ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  54              		.equ DTOP,  RAM_ADR+0x512 
  55              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  56              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  57              	
  58              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  59              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  60              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  61              	
  62              		.equ CELLL ,	4	/*size of a cell */
  63              		.equ BASEE ,	10	/*default radix */
  64              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  65              	
  66              		.equ BKSPP ,	8	/*backspace */
  67              		.equ LF ,	10	  /*line feed */
  68              		.equ CRR ,	13	/*carriage return */
  69              		.equ ERR ,	27	/*error escape */
  70              		.equ TIC ,	39	/*tick */
  71              	
  72              	/*************************************
  73              	   system variables offset from UPP
  74              	*************************************/
  75              	  .equ RNDSEED, 4    // prng seed 
  76              	  .equ TICKS, RNDSEED+4  // millseconds counter
  77              	  .equ CD_TIMER, TICKS+4  // count down timer
  78              	  .equ BOOT, CD_TIMER+4  // boot program address
  79              	  .equ STDIN, BOOT+4   //character ouput device 
  80              	  .equ STDOUT, STDIN+4 // character input device 
  81              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  82              	  .equ BCHAR, NBASE+4   // display base character flag 
  83              	  .equ TMP, BCHAR+4   // temporary variable
  84              	  .equ CSPAN, TMP+4  // character count received by expect  
  85              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  86              	  .equ SRC, TOIN+4    // SOURCE 
  87              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  88              	  .equ TIBUF, SRC+4   // TIB buffer address 
  89              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  90              	  .equ EVAL, SRCID+4  // eval|compile vector 
  91              	  .equ VHOLD, EVAL+4   // hold pointer 
  92              	  .equ CTXT, VHOLD+4  // context pointer 
  93              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  94              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  95              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  96              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  97              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  98              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  99              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 100              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 101              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 102              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 103              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 104              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 105              	  .equ KBD_QUEUE_SIZE, 16 
 106              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 107              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QTAIL,KBD_QHEAD+4
 109              	  .equ ROW,KBD_QTAIL+4 
 110              	  .equ COL,ROW+4 
 111              	  .equ BK_COLOR,COL+4 
 112              	  .equ PEN_COLOR,BK_COLOR+4
 113              	  .equ VFPSW, PEN_COLOR+4 
 114              	  .equ VFBASE, VFPSW+4 
 115              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 116              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 117              	// BLOCK words extension 
 118              	   .equ BLKID, CSTATE+4 
 119              	
 120              	
 121              	/***********************************************
 122              	* MACROS
 123              	*	Assemble inline direct threaded code ending.
 124              	***********************************************/
 125              		.macro _CALL fn /* low level routine call */ 
 126              	 	PUSH {LR}
 127              		BL \fn  
 128              		POP {LR}
 129              		.endm
 130              		
 131              		.macro _RET /* exit sub-routine */ 
 132              		BX LR 
 133              		.endm 
 134              	
 135              		// dictionary header  
 136              		.macro _HEADER  label, nlen, name
 137              			.word LINK 
 138              			.equ LINK , . 
 139              		_\label: .byte \nlen    // name field
 140              			.ascii "\name"
 141              			.p2align 2 
 142              		\label:   // code field 
 143              		.endm 
 144              		
 145              	
 146              	// local function header 
 147              		.macro _FUNC label 
 148              		.section .text, "ax", %progbits 
 149              		.p2align 2 
 150              		.type \label, %function  
 151              		\label:
 152              		.endm 
 153              	
 154              	// global function header 
 155              		.macro _GBL_FUNC label 
 156              		.global \label 
 157              		_FUNC \label 
 158              		.endm 
 159              	
 160              	
 161              	// load large constant to register 
 162              		.macro _MOV32 r, value 
 163              		mov \r,#(\value&0xffff)
 164              		movt \r,#(\value>>16)
ARM GAS  forth.s 			page 11


 165              		.endm 
 166              	
 167              		.macro _NEXT /* direct jump INEXT */ 
 168              		B INEXT   
 169              		.endm 
 170              	
 171              	 	.macro	_NEST /*start high level word */
 172              		BX INX  
 173              		NOP.N 
 174              		.endm
 175              	
 176              		.macro _ADR label 
 177              		.word 1+\label  
 178              		.endm 
 179              	
 180              	 	.macro	_UNNEST	/*end high level word */
 181              		_ADR UNNEST 
 182              		.endm
 183              	
 184              	 	.macro	_DOLIT u /*long literals */
 185              		_ADR	DOLIT
 186              		.word	\u 
 187              		.endm
 188              	
 189              		.macro _DOTQP len, text 
 190              		_ADR DOTQP 
 191              		.byte \len 
 192              		.ascii "\text" 
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		// POSTPONE COMPILE 
 197              		.macro _COMPI name 
 198              		_DOLIT	\name + 1
 199              		_ADR	COMMA 
 200              		.endm 
 201              	
 202              		.macro _ABORQ len,name 
 203              		_ADR ABORQ 
 204              		.byte \len 
 205              		.ascii "\name"
 206              		.p2align 2 
 207              		.endm
 208              	
 209              		.macro _BRAN label 
 210              		_ADR BRAN 
 211              		.word \label 
 212              		.endm 
 213              	
 214              		.macro _QBRAN label 
 215              		_ADR QBRAN 
 216              		.word \label
 217              		.endm 
 218              	
 219              		.macro _TBRAN label 
 220              		_ADR TBRAN 
 221              		.word \label 
ARM GAS  forth.s 			page 12


 222              		.endm 
 223              	
 224              		.macro _DONXT label 
 225              		_ADR DONXT
 226              		.word \label 
 227              		.endm 
 228              	
 229              	 	.macro	_PUSH	/*push TOS on data stack*/
 230              		STR	TOS,[DSP,#-4]!
 231              		.endm
 232              	
 233              	 	.macro	_POP /*pop data stack to TOS */
 234              		LDR	TOS,[DSP],#4
 235              		.endm
 236              	
 237              		// calling a colon word 
 238              		// from a code word   
 239              		.macro _CALL_COLWORD target 
 240              	    ldr WP,=\target 
 241              		orr WP,#1
 242              		b \target  
 243              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
ARM GAS  forth.s 			page 13


  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
ARM GAS  forth.s 			page 14


 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF81CC9 	  ldr IP,=dh
 159 000e 02F05DBF 	  b INEXT  
 160              	dh:
 161 0012 49520000 	  _ADR PRESE
 162 0016 51460000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 192F0000 	  _ADR CFSR 
 164 0038 AD320000 	  _ADR DUPP
 165 003c 19320000 	  _ADR TOR 
 166 0040 F3300000 	  _DOLIT 16 
 166      10000000 
 167 0048 09390000 	  _ADR BASE 
 168 004c 75310000 	  _ADR STORE 
ARM GAS  forth.s 			page 15


 169 0050 4D470000 	  _ADR UDOT 
 170 0054 51460000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 B5310000 	  _ADR RFROM
 172 0068 F3300000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 69330000 	  _ADR ANDD
 174 0074 33310000 	  _QBRAN 1f
 174      94000000 
 175 007c 392F0000 	  _ADR BFAR
 176 0080 F3300000 	  _DOLIT ','
 176      2C000000 
 177 0088 952F0000 	  _ADR EMIT 
 178 008c 39450000 	  _ADR SPACE 
 179 0090 4D470000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 51460000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 25220000 	  _ADR FPSCR
 184 00a8 4D470000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF868C8 	  ldr IP,=fpu_except
 202 00c4 02F002BF 	  b INEXT 
 203              	fpu_except:  
 204 00c8 F5450000 	  _ADR CR 
 205 00cc 09390000 	  _ADR BASE 
 206 00d0 89310000 	  _ADR AT 
 207 00d4 19320000 	  _ADR TOR  
 208 00d8 F3300000 	  _DOLIT 16 
 208      10000000 
 209 00e0 09390000 	  _ADR BASE 
 210 00e4 75310000 	  _ADR STORE
 211 00e8 F3300000 	  _DOLIT 4 
 211      04000000 
 212 00f0 F9330000 	  _ADR SUBB  
 213 00f4 51460000 	  _DOTQP 4, "IP= "
 213      0449503D 
ARM GAS  forth.s 			page 16


 213      200000BF 
 214 0100 81470000 	  _ADR DOT 
 215 0104 51460000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 25220000 	  _ADR FPSCR 
 217 0124 AD320000 	  _ADR DUPP 
 218 0128 81470000 	  _ADR DOT
 219 012c F9340000 	  _ADR QDUP 
 220 0130 33310000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 F3300000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 952F0000 	  _ADR EMIT 
 223 0144 F3300000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 952F0000 	  _ADR EMIT
 225 0150 AD320000 	  _ADR DUPP 
 226 0154 F3300000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 69330000 	  _ADR ANDD
 228 0160 F9340000 	  _ADR QDUP  
 229 0164 33310000 	  _QBRAN 1f 
 229      84010000 
 230 016c F3300000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 E9330000 	  _ADR PLUS 
 232 0178 89310000 	  _ADR AT 
 233 017c 5D380000 	  _ADR COUNT 
 234 0180 8D450000 	  _ADR TYPEE
 235 0184 F3300000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 69330000 	  _ADR ANDD
 237 0190 B5360000 	  _ADR CLZ 
 238 0194 F3300000 	  _DOLIT 31 
 238      1F000000 
 239 019c BD320000 	  _ADR SWAP 
 240 01a0 F9330000 	  _ADR SUBB 
 241 01a4 F3300000 	  _DOLIT 2 
 241      02000000 
 242 01ac D9330000 	  _ADR LSHIFT 
 243 01b0 F3300000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 E9330000 	  _ADR PLUS 
 245 01bc 89310000 	  _ADR AT 
 246 01c0 5D380000 	  _ADR COUNT 
 247 01c4 8D450000 	  _ADR TYPEE 
 248 01c8 F5450000 	2: _ADR CR 
 249 01cc F3300000 	  _DOLIT 0
 249      00000000 
 250 01d4 45220000 	  _ADR CLR_FPSCR 
 251 01d8 B5310000 	  _ADR RFROM  
 252 01dc 09390000 	  _ADR BASE 
 253 01e0 75310000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
ARM GAS  forth.s 			page 17


 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF844C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
ARM GAS  forth.s 			page 18


 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8CCC6 	  ldr IP,=nmi_hl 
 306 0268 02F030BE 	  b  INEXT
 307              	nmi_hl:
 308 026c 49520000 	  _ADR PRESE 
 309 0270 F5450000 	  _ADR CR 
 310 0274 51460000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 F5450000 	  _ADR CR 
 312 0298 BD4F0000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF890C6 	  ldr IP,=hardfault_hl 
 326 02aa 02F00FBE 	  b INEXT
 327              	hardfault_hl:
 328 02ae 49520000 	  _ADR PRESE
 329 02b2 F5450000 	  _ADR CR  
 330 02b6 51460000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 F5450000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
ARM GAS  forth.s 			page 19


 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF858C6 	  ldr IP,=memfault_hl 
 345 02e6 02F0F1BD 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 49520000 	  _ADR PRESE
 348 02ee F5450000 	  _ADR CR  
 349 02f2 51460000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 F3300000 	  _DOLIT 16 
 350      10000000 
 351 0320 09390000 	  _ADR BASE 
 352 0324 75310000 	  _ADR STORE   
 353 0328 192F0000 	  _ADR CFSR
 354 032c F3300000 	  _DOLIT 255 
 354      FF000000 
 355 0334 69330000 	  _ADR ANDD 
 356 0338 4D470000 	  _ADR UDOT 
 357 033c F5450000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8F0C5 	  ldr IP,=busfault_hl 
 372 0352 02F0BBBD 	  b INEXT 
 373              	busfault_hl:
 374 0356 49520000 	  _ADR PRESE
 375 035a F3300000 	  _DOLIT 1 
 375      01000000 
 376 0362 5D300000 	  _ADR ULED 
 377 0366 F3300000 	  _DOLIT  100 
 377      64000000 
 378 036e C5380000 	  _ADR MSEC 
 379 0372 392F0000 	  _ADR BFAR 
 380 0376 192F0000 	  _ADR CFSR 
 381 037a F5450000 	  _ADR CR  
 382 037e 51460000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 F3300000 	  _DOLIT 16 
 383      10000000 
ARM GAS  forth.s 			page 20


 384 03a8 09390000 	  _ADR BASE 
 385 03ac 75310000 	  _ADR STORE   
 386 03b0 F3300000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 69330000 	  _ADR ANDD   
 388 03bc 4D470000 	  _ADR UDOT 
 389 03c0 51460000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc 4D470000 	  _ADR UDOT 
 391 03d0 F5450000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF860C5 	  ldr IP,=usagefault_hl
 405 03e6 02F071BD 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 49520000 	  _ADR PRESE
 408 03ee F5450000 	  _ADR CR  
 409 03f2 51460000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 F3300000 	  _DOLIT 16 
 410      10000000 
 411 0418 09390000 	  _ADR BASE 
 412 041c 75310000 	  _ADR STORE   
 413 0420 192F0000 	  _ADR CFSR
 414 0424 F3300000 	  _DOLIT 16 
 414      10000000 
 415 042c C1330000 	  _ADR RSHIFT 
 416 0430 4D470000 	  _ADR UDOT 
 417 0434 F5450000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
ARM GAS  forth.s 			page 21


 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8A4C4 	  ldr IP,=ur
 474 04a4 02F012BD 	  b INEXT  
 475              	ur:
 476 04a8 49520000 	  _ADR PRESE
 477 04ac F5450000 	  _ADR CR   
 478 04b0 F3300000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 5D380000 		_ADR COUNT 
 480 04bc 8D450000 	  _ADR TYPEE 
ARM GAS  forth.s 			page 22


 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F051FE 	  bl  fpu_init 
 518 0524 00F00BFB 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F004FC 	  bl  flash_spi_init   
 522 0534 06F0ECB8 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 23


 530      C2F20107 
 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8F8A3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
ARM GAS  forth.s 			page 24


 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
ARM GAS  forth.s 			page 25


 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A749     		ldr r1,=UZERO 
 674 06b2 4FF0C402 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
ARM GAS  forth.s 			page 26


 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
ARM GAS  forth.s 			page 27


 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
ARM GAS  forth.s 			page 28


 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
ARM GAS  forth.s 			page 29


 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 20660000 		.word HI_BOTH  /*'BOOT */
 874 0878 241A0000 		.word PS2_QKEY /* query for character */
 875 087c EC120000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 00000000 	  .word 0     // SRCID 
 884 08a0 6C500000 		.word INTER	/*'EVAL */
 885 08a4 00000000 		.word 0			/*HLD */
 886 08a8 08670000 		.word _LASTN	/*CONTEXT */
 887 08ac 74670000 		.word CTOP  	/* FCP end of system dictionnary */
 888 08b0 105F0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 08b4 08670000 		.word _LASTN	/*LAST word in dictionary */
 890 08b8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
 890      00000000 
 891 08c8 00000000 		.word 0  /* RX_HEAD */
 892 08cc 00000000 		.word 0  /* RX_TAIL */ 
 893 08d0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
ARM GAS  forth.s 			page 30


 894 08d4 00000000 		.word 0  /* VID_STATE, video state */  
 895 08d8 00000000 	    .word 0  /* VID_FIELD, field */
 896 08dc 30810120 		.word VID_BUFF /* video_buffer address */ 
 897 08e0 00000000 	    .word 0 /* kbd struct */
 898 08e4 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 08f4 00000000 		.word 0  /* kbd queue head */
 900 08f8 00000000 		.word 0 /* kbd queue tail */ 
 901 08fc 00000000 	    .word 0 /* tv cursor row */
 902 0900 00000000 	    .word 0 /* tv cursor column */ 
 903 0904 00000000 	    .word 0 /* tv back color */
 904 0908 07000000 	    .word 7 /* tv font color */
 905 090c 00000000 	    .word 0 /* FPSW */
 906 0910 00000000 	    .word 0 /* FBASE */ 
 907 0914 00000000 	    .word 0 /* BEEP_DTMR */
 908 0918 00000000 	    .word 0 /* CSTATE */ 
 909 091c 00000000 	    .word 0 /* BLKID */ 
 910 0920 00000000 	    .word 0,0 
 910      00000000 
 911              	ULAST:
 912              	
 913              	// used by _HEADER macro 
 914              	// to link names field
 915              	// in dictionary  
 916 0928 12000000 	    .equ LINK, 0 
 916      C8000000 
 916      60520000 
 916      6C020000 
 916      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
ARM GAS  forth.s 			page 31


  27              	
  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
  31              	********************************/
  32 0954 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 0968 504700BF 	    _NEST 
  34              	    // save normal context 
  35 096c B5390000 	    _ADR CNTXT 
  36 0970 89310000 	    _ADR AT 
  37 0974 19320000 	    _ADR TOR 
  38              	    // set environment context 
  39 0978 F3300000 	    _DOLIT _ENVLASTN  
  39      EE0A0000 
  40 0980 B5390000 	    _ADR   CNTXT 
  41 0984 75310000 	    _ADR   STORE 
  42              	    // search string 
  43 0988 8D320000 	    _ADR   DROP 
  44 098c 55340000 	    _ADR   ONEM 
  45 0990 AD4C0000 	    _ADR   NAMEQ
  46 0994 AD320000 	    _ADR   DUPP 
  47 0998 33310000 	    _QBRAN  1f
  47      B0090000 
  48 09a0 8D320000 	    _ADR   DROP 
  49 09a4 09310000 	    _ADR   EXECU 
  50 09a8 5B310000 	    _BRAN  2f
  50      B8090000 
  51 09b0 BD320000 	1:  _ADR  SWAP 
  52 09b4 8D320000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 09b8 B5310000 	    _ADR RFROM
  55 09bc B5390000 	    _ADR CNTXT 
  56 09c0 75310000 	    _ADR STORE 
  57 09c4 D32E0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
  66              		_\label: .byte \nlen    // name field
  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
ARM GAS  forth.s 			page 32


  77              	/**********************************
  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
  81              	*************************************/
  82 09c8 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 09dc 47F8046D 	    _PUSH 
  84 09e0 4FF0FF06 	    MOV  TOS,#255
  85 09e4 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 09e6 CC090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 09f0 47F8046D 	    _PUSH
  97 09f4 4FF05006 	    MOV TOS,#80
  98 09f8 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 09fa EA090000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 0a04 47F8046D 	    _PUSH 
 109 0a08 4FF05006 	    MOV TOS,#80
 110 0a0c 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
 115              	constant:
 116              	    32 bits
 117              	**************************************/
 118 0a0e FE090000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 0a24 47F8046D 	    _PUSH 
 120 0a28 4FF02006 	    MOV TOS,#32
 121 0a2c 6AE0     	    B flag_true
ARM GAS  forth.s 			page 33


 122              	
 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
 126              	    is the default
 127              	constant:
 128              	    true 
 129              	***************************************/
 130 0a2e 120A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 0a3c 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 0a3e 320A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 0a4c 47F8046D 	    _PUSH 
 143 0a50 4FF07F06 	    MOV TOS,#127 
 144 0a54 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 0a56 420A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 0a60 47F8046D 	    _PUSH 
 154 0a64 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 0a6c 47F8046D 	    _PUSH
 156 0a70 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 0a78 44E0     	    B flag_true
 158              	
 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 0a7a 5A0A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 0a84 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 34


 167 0a88 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 167      C7F6FF76 
 168 0a90 38E0     	    B flag_true 
 169              	
 170              	/************************************
 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 0a92 7E0A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 0a9c 47F8046D 	    _PUSH 
 178 0aa0 4FF0FF36 	    MOV TOS,#-1 
 179 0aa4 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 0aa6 960A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 0ab4 47F8046D 	    _PUSH 
 189 0ab8 4FF0FF36 	    MOV  TOS,#-1 
 190 0abc 47F8046D 	    _PUSH 
 191 0ac0 4FF0FF36 	    MOV TOS,#-1 
 192 0ac4 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 0ac6 AA0A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 0ae0 47F8046D 	    _PUSH 
 203 0ae4 4FF02006 	    MOV TOS,#32 
 204 0ae8 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 0aea CA0A0000 		.word	ENVLNK 
ARM GAS  forth.s 			page 35


 214              		ENVLINK = . 
 215 0aee 0B       	_ENVLASTN:	.byte 11
 216 0aef 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
 216      4C4C53
 217 0afa 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 0afc 47F8046D 	    _PUSH 
 220 0b00 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 0b04 47F8046D 	    _PUSH 
 225 0b08 4FF0FF36 	    MOV TOS,#-1 
 226 0b0c 02F0DEB9 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0b10 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0b18 1868     		ldr r0,[r3,#USART_SR]
  38 0b1a 5968     		ldr r1,[r3,#USART_DR]
ARM GAS  forth.s 			page 36


  39 0b1c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0b20 0CD0     		beq 2f // no char received 
  41 0b22 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0b26 3FF4B6AC 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0b2a 04F15400 		add r0,UP,#RX_QUEUE
  44 0b2e A26E     		ldr r2,[UP,#RX_TAIL]
  45 0b30 8154     		strb r1,[r0,r2]
  46 0b32 02F10102 		add r2,#1 
  47 0b36 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0b3a A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0b3c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0b3e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0b46 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0b48 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0b4c 01EA0201 	  and r1,r1,r2
  62 0b50 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0b54 41EA0201 	  orr r1,r1,r2 
  64 0b58 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0b5a 4FF4EE61 	  mov r1,#0x77<<4 
  67 0b5e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0b60 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0b68 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0b6c 8160     	  str r1,[r0,#USART_BRR]
  73 0b6e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0b72 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0b74 4FF02500 	  mov r0,#USART1_IRQ 
  77 0b78 4FF00701 	  mov r1,#7
  78 0b7c 00B5FFF7 	  _CALL nvic_set_priority
  78      B3FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0b86 4FF02500 	  mov r0,#USART1_IRQ 
  81 0b8a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C5FD5DF8 
  81      04EB
  82 0b94 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
ARM GAS  forth.s 			page 37


  90 0b96 58090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0ba4 47F8046D 		_PUSH
  92 0ba8 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 0baa 616E     		ldr T1,[UP,#RX_HEAD]
  94 0bac 90EA0106 		eors TOS,T0,T1 
  95 0bb0 0CD0     		beq 1f
  96 0bb2 04F15400 		add T0,UP,#RX_QUEUE 
  97 0bb6 0844     		add T0,T1 
  98 0bb8 0678     		ldrb TOS,[T0]
  99 0bba 01F10101 		add T1,#1 
 100 0bbe 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0bc2 6166     		str T1,[UP,#RX_HEAD]
 102 0bc4 47F8046D 		_PUSH 
 103 0bc8 4FF0FF36 		mov TOS,#-1
 104 0bcc 02F07EB9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0bd0 9A0B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0be0 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0be8 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0bea 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0bee FBD0     		beq 1b 
 115 0bf0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0bf2 57F8046B 		_POP
 117 0bf6 02F069B9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0bfa D40B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0c04 47F8046D 	        _PUSH 
 126 0c08 4FF00006 	        mov TOS,#0
 127 0c0c 02F05EB9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0c10 FE0B0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0c1c 47F8046D 	        _PUSH 
 135 0c20 4FF00106 	        mov TOS,#1
ARM GAS  forth.s 			page 38


 136 0c24 02F052B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0c28 140C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0c34 3046     	        mov T0,TOS
 144 0c36 57F8046B 	        _POP 
 145 0c3a 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0c3c 4B48     	        ldr T0,=SER_QKEY 
 148 0c3e 6061     	        str T0,[UP,#STDIN]
 149 0c40 4B48     	        ldr T0,=SER_EMIT
 150 0c42 A061     	        str T0,[UP,#STDOUT]
 151 0c44 02F042B9 	        _NEXT 
 152              	4: // local console 
 153 0c48 4A48     	        ldr T0,=PS2_QKEY
 154 0c4a 6061     	        str T0,[UP,#STDIN]
 155 0c4c 4A48     	        ldr T0,=TV_EMIT
 156 0c4e A061     	        str T0,[UP,#STDOUT]
 157 0c50 02F03CB9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0c54 2C0C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0c64 504700BF 	      _NEST 
 166 0c68 F3300000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0c70 45340000 	1:    _ADR ONEP  // c+1
 168 0c74 19320000 	      _ADR TOR   
 169 0c78 F3300000 	      _DOLIT 10 
 169      0A000000 
 170 0c80 613D0000 	      _ADR SLMOD // r q  
 171 0c84 F9340000 	      _ADR QDUP  // r q q | r 0  
 172 0c88 33310000 	      _QBRAN 2f  // r 0 
 172      9C0C0000 
 173 0c90 B5310000 	      _ADR RFROM // r q c 
 174 0c94 5B310000 	      _BRAN 1b
 174      700C0000 
 175 0c9c F3300000 	2:    _DOLIT '0'  
 175      30000000 
 176 0ca4 E9330000 	      _ADR PLUS 
 177 0ca8 952F0000 	      _ADR EMIT 
 178 0cac B5310000 	      _ADR RFROM 
 179 0cb0 F9340000 	      _ADR QDUP 
 180 0cb4 33310000 	      _QBRAN 3f
 180      CC0C0000 
 181 0cbc 55340000 	      _ADR ONEM 
ARM GAS  forth.s 			page 39


 182 0cc0 19320000 	      _ADR TOR 
 183 0cc4 5B310000 	      _BRAN 2b 
 183      9C0C0000 
 184              	3:    
 185 0ccc D32E0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0cd0 580C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0cdc 504700BF 	      _NEST 
 193 0ce0 F3300000 	      _DOLIT 27 
 193      1B000000 
 194 0ce8 952F0000 	      _ADR EMIT 
 195 0cec F3300000 	      _DOLIT '['
 195      5B000000 
 196 0cf4 952F0000 	      _ADR EMIT 
 197 0cf8 D32E0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0cfc D40C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0d08 504700BF 	      _NEST
 205 0d0c DD0C0000 	      _ADR ANSI_ESC
 206 0d10 BD320000 	      _ADR SWAP 
 207 0d14 650C0000 	      _ADR ANSI_PARAM 
 208 0d18 F3300000 	      _DOLIT ';'
 208      3B000000 
 209 0d20 952F0000 	      _ADR EMIT
 210 0d24 650C0000 	      _ADR ANSI_PARAM
 211 0d28 F3300000 	      _DOLIT 'H'
 211      48000000 
 212 0d30 952F0000 	      _ADR EMIT 
 213 0d34 D32E0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0d38 000D0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0d44 504700BF 	    _NEST
 221 0d48 F3300000 	    _DOLIT 1 
 221      01000000 
 222 0d50 AD320000 	    _ADR DUPP 
 223 0d54 090D0000 	    _ADR SER_AT  
 224 0d58 DD0C0000 	    _ADR ANSI_ESC
 225 0d5c F3300000 	    _DOLIT 'J'
 225      4A000000 
ARM GAS  forth.s 			page 40


 226 0d64 952F0000 	    _ADR EMIT 
 227 0d68 D32E0000 	    _UNNEST 
 228 0d6c A40B0000 	
 228      E00B0000 
 228      241A0000 
 228      EC120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	  .equ HRES, 320  // horizontal resolution
  20              	  .equ VRES, 200   // vertical resolution
ARM GAS  forth.s 			page 41


  21              	  .equ BPP, 4     // bits per pixel
  22              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  23              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  24              	
  25              	  .equ CHAR_WIDTH, 6 
  26              	  .equ CHAR_HEIGHT, 8
  27              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0d7c 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0d84 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0d86 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
ARM GAS  forth.s 			page 42


  80              	//  movt r2,#0x55<<8 
  81 0d8e 41EA0201 	  orr r1,r2
  82 0d92 0160     	  str r1,[r0,#GPIO_MODER]
  83 0d94 81EA0101 	  eor r1,r1 
  84 0d98 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0d9a 4FF00101 	  mov r1,#1 // pin 1 
  88 0d9e 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0da2 00B5FFF7 	  _CALL gpio_config 
  89      FCFC5DF8 
  89      04EB
  90 0dac 4FF00101 	  mov r1,#1 
  91 0db0 4FF00202 	  mov r2,#2
  92 0db4 00B5FFF7 	  _CALL gpio_speed 
  92      32FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0dbe 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0dc0 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0dc4 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0dc6 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0dce 4FF00200 	  mov r0,#2 
 100 0dd2 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0dd4 41EA0001 	  orr r1,r0 
 102 0dd8 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0dda 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0de2 41F2D470 	  mov r0,#HPER
 106 0de6 D062     	  str r0,[r2,#TIM_ARR]
 107 0de8 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0dec D063     	  str r0,[r2,#TIM_CCR3]
 109 0dee 4FF4E170 	  mov r0,#HPULSE 
 110 0df2 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0df4 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0df8 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0dfa 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0dfe 1062     	  str r0,[r2,#TIM_CCER]
 115 0e00 4FF00100 	  mov r0,#1 
 116 0e04 D060     	  str r0,[r2,#TIM_DIER]
 117 0e06 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0e08 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0e0c 4FF00201 	  mov r1,#2
 121 0e10 00B5FFF7 	  _CALL nvic_set_priority
 121      69FC5DF8 
 121      04EB
 122 0e1a 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0e1e 00B5FFF7 	  _CALL nvic_enable_irq
 123      7BFC5DF8 
 123      04EB
 124 0e28 7047     	  _RET
 125              	
 126              	/*************************************
ARM GAS  forth.s 			page 43


 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0e2a 00BF     	  _GBL_FUNC tv_out_isr
 132 0e2c 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0e34 81EA0101 	  eor T1,T1
 134 0e38 0161     	  str T1,[T0,#TIM_SR]
 135 0e3a E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0e3c 01F10101 	  add T1,#1 
 137 0e40 E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0e42 226F     	  ldr T2,[UP,#VID_STATE]
 140 0e44 002A     	  cmp T2,#ST_VSYNC 
 141 0e46 07D0     	  beq state_vsync
 142 0e48 012A     	  cmp T2,#ST_PREVID 
 143 0e4a 2FD0     	  beq state_pre_video 
 144 0e4c 022A     	  cmp T2,#ST_VIDEO 
 145 0e4e 36D0     	  beq state_video_out 
 146 0e50 032A     	  cmp T2,#ST_POSTVID 
 147 0e52 63D0     	  beq state_post_video
 148 0e54 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0e58 0129     	  cmp T1,#1
 152 0e5a 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0e5c 4FF0DB01 	  mov T1,#SERRATION
 155 0e60 0164     	  str T1,[T0,#TIM_CCR4]
 156 0e62 40F6E931 	  mov T1,#SYNC_LINE 
 157 0e66 C162     	  str T1,[T0,#TIM_ARR]
 158 0e68 6BE0     	  b tv_isr_exit 
 159 0e6a 0729     	1: cmp T1,#7
 160 0e6c 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0e6e 40F62821 	  mov T1,#VSYNC_PULSE
 163 0e72 0164     	  str T1,[T0,#TIM_CCR4]
 164 0e74 65E0     	  b tv_isr_exit
 165 0e76 0D29     	2: cmp T1,#13
 166 0e78 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0e7a 4FF0DB01 	   mov T1,#SERRATION 
 169 0e7e 0164     	   str T1,[T0,#TIM_CCR4]
 170 0e80 5FE0     	   b tv_isr_exit   
 171 0e82 1229     	3: cmp T1,#18
 172 0e84 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0e86 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0e88 0029     	   cmp T1,#ODD_FIELD  
 176 0e8a 5AD0     	   beq tv_isr_exit 
 177 0e8c 01E0     	   b sync_end 
 178 0e8e 1329     	4: cmp T1,#19 
 179 0e90 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0e92 4FF00901 	   mov T1,#9
 182 0e96 E166     	   str T1,[UP,#VID_CNTR]
ARM GAS  forth.s 			page 44


 183 0e98 4FF4E171 	   mov T1,#HPULSE 
 184 0e9c 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0e9e 41F2D471 	   mov T1,#HPER 
 186 0ea2 C162     	   str T1,[T0,#TIM_ARR] 
 187 0ea4 4FF00101 	   mov T1,#ST_PREVID 
 188 0ea8 2167     	   str T1,[UP,#VID_STATE]
 189 0eaa 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0eac 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0eae 48D4     	   bmi tv_isr_exit 
 194 0eb0 4FF00201 	   mov T1,#ST_VIDEO 
 195 0eb4 2167     	   str T1,[UP,#VID_STATE]
 196 0eb6 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0eba C160     	   str T1,[T0,#TIM_DIER]
 198 0ebc 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0ebe F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ec0 06D9     	   bls 1f 
 205 0ec2 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ec6 2167     	   str T1,[UP,#VID_STATE]
 207 0ec8 4FF00101 	   mov T1,#1 
 208 0ecc C160     	   str T1,[T0,#TIM_DIER]
 209 0ece 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ed0 A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ed2 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ed6 4FF0A003 	   mov T3,#BPR 
 214 0eda 03FB01F1 	   mul T1,T3 
 215 0ede 0844     	   add T0,T1  
 216 0ee0 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0ee8 10F8012B 	2: ldrb T2,[T0],#1 
 222 0eec 4FEA0222 	   lsl T2,#8 
 223 0ef0 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0ef2 AFF30080 	   nop.w 
 225 0ef6 AFF30080 	   nop.w
 226 0efa AFF30080 	   nop.w 
 227 0efe AFF30080 	   nop.w 
 228 0f02 4FEA0212 	   lsl T2,#4  
 229 0f06 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0f08 AFF30080 	   nop.w
 231 0f0c AFF30080 	   nop.w  
 232 0f10 013B     	   subs T3,#1
 233 0f12 E9D1     	   bne 2b  
 234 0f14 4FF47022 	   mov T2,#(15<<16) 
 235 0f18 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0f1a 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0f1c 4FF48372 	   mov T2,#262
ARM GAS  forth.s 			page 45


 239 0f20 9142     	   cmp T1,T2
 240 0f22 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0f24 616F     	   ldr T1,[UP,VID_FIELD]
 243 0f26 11B9     	   cbnz T1, frame_end 
 244 0f28 40F6E931 	   mov T1,#SYNC_LINE
 245 0f2c C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0f2e 4FF00001 	   mov T1,#ST_VSYNC 
 248 0f32 2167     	   str T1,[UP,#VID_STATE]
 249 0f34 81EA0101 	   eor T1,T1 
 250 0f38 E166     	   str T1,[UP,#VID_CNTR]
 251 0f3a 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0f3c 6FEA0101 	   mvn T1,T1  
 253 0f40 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0f42 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0f44 3C0D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0f54 47F8046D 		_PUSH 
 266 0f58 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0f5c 01F0B6BF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0f60 480F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0f70 47F8046D 		_PUSH 
 273 0f74 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0f78 01F0A8BF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0f7c 640F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0f88 47F8046D 	  _PUSH 
 280 0f8c 04F19C06 	  ADD TOS,UP,#COL 
 281 0f90 01F09CBF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0f94 800F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0f9c 47F8046D 	  _PUSH 
ARM GAS  forth.s 			page 46


 287 0fa0 04F19806 	  ADD TOS,UP,#ROW 
 288 0fa4 01F092BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0fa8 980F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0fb4 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0fb8 00FB06F6 	  mul TOS,T0 
 295 0fbc 01F086BF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0fc0 AC0F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0fcc 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0fd0 00FB06F6 	  mul TOS,T0 
 302 0fd4 01F07ABF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0fd8 C40F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0fe4 47F8046D 	  _PUSH 
 308 0fe8 DFF88C65 	  ldr TOS,=font_6x8 
 309 0fec 01F06EBF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0ff0 DC0F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0ffc 47F8046D 	  _PUSH 
 315 1000 A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 1002 01F063BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 1006 F40F0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 1010 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 1012 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 1016 02FB00F0 	    mul T0,T2 
 330 101a 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 101e 1044     	    add T0,T2 
 332 1020 A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 1022 0344     	    add T3,T0 // T3 -> byte address 
ARM GAS  forth.s 			page 47


 334 1024 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 1026 4FF00F02 	    mov T2,#15 // AND mask 
 336 102a 11F0010F 	    tst T1,#1 
 337 102e 01D0     	    beq 1f 
 338 1030 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 1034 DFF84405 	1:  ldr T0,=plot_op 
 340 1038 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 103c 05EA0205 	    and WP,T2 // mask out nibble 
 343 1040 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 1044 11F0010F 	    tst T1,#1 
 345 1048 01D1     	    bne 1f 
 346 104a 4FEA0010 	    lsl T0,#4 // high nibble  
 347 104e 45EA0005 	1:  orr WP,T0  
 348 1052 1D70     	    strb WP,[T3]
 349 1054 1AE0     	    b 9f 
 350              	op_pen: 
 351 1056 05EA0205 	    and WP,T2 
 352 105a 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 105e 11F0010F 	    tst T1,#1
 354 1062 01D1     	    bne 1f 
 355 1064 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 1068 45EA0005 	1:	orr WP,T0 
 357 106c 1D70     	    strb WP,[T3]
 358 106e 0DE0     	    b 9f 
 359              	op_invert:
 360 1070 85EA0205 	    eor WP,T2 
 361 1074 1D70     	    strb WP,[T3]
 362 1076 09E0     	    b 9f 
 363              	op_xor:
 364 1078 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 107c 11F0010F 	    tst T1,#1 
 366 1080 01D1     	    bne 1f 
 367 1082 4FEA0010 	    lsl T0,#4 
 368 1086 85EA0005 	1:  eor WP,T0 
 369 108a 1D70     	    strb WP,[T3]
 370 108c 57F8046B 	9:  _POP 
 371 1090 01F01CBF 	    _NEXT 
 372              	
 373 1094 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 1098 0A100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 10a4 E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 10a6 0028     	    cmp T0,#0
 381 10a8 FCD1     	    bne 1b
 382 10aa 01F00FBF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 10ae 9C100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
ARM GAS  forth.s 			page 48


 387 10b8 80EA0000 	    eor T0,T0 
 388 10bc 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 10c0 40EA0100 	    orr T0,T1 
 390 10c4 4FEA0111 	    lsl T1,#4 
 391 10c8 40EA0100 	    orr T0,T1 
 392 10cc 4FEA0021 	    lsl T1,T0,#8 
 393 10d0 40EA0100 	    orr T0,T1 
 394 10d4 4FEA0041 	    lsl T1,T0,#16
 395 10d8 40EA0100 	    orr T0,T1 
 396 10dc 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 10e0 A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 10e2 5050     	1:	str T0,[T2,T1]
 399 10e4 0439     	    subs T1,#4
 400 10e6 FCD1     	    bne 1b
 401 10e8 1060     	    str T0,[T2]
 402 10ea 80EA0000 	    eor T0,T0 
 403 10ee C4F89800 	    str T0,[UP,#ROW]
 404 10f2 C4F89C00 	    str T0,[UP,#COL]
 405 10f6 01F0E9BE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 10fa B2100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 1108 504700BF 	  _NEST
 412 110c F3300000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 1114 AD320000 	  _ADR DUPP  
 414 1118 19320000 	  _ADR TOR 
 415 111c 09340000 	  _ADR STAR
 416 1120 FD0F0000 	  _ADR VIDBUFF
 417 1124 E9330000 	  _ADR PLUS
 418 1128 B5310000 	  _ADR RFROM   
 419 112c F3300000 	  _DOLIT 0 
 419      00000000 
 420 1134 31400000 	  _ADR FILL 
 421 1138 D32E0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 113c FE100000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 114c 504700BF 	    _NEST 
 429 1150 FD0F0000 	    _ADR VIDBUFF 
 430 1154 AD320000 	    _ADR DUPP 
 431 1158 F3300000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 1160 AD320000 	    _ADR DUPP 
 433 1164 19320000 	    _ADR TOR 
 434 1168 E9330000 	    _ADR PLUS 
ARM GAS  forth.s 			page 49


 435 116c BD320000 	    _ADR SWAP 
 436 1170 F3300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 1178 B5310000 	    _ADR RFROM  
 438 117c F9330000 	    _ADR SUBB 
 439 1180 E93F0000 	    _ADR WMOVE
 440 1184 F3300000 	    _DOLIT 24 
 440      18000000 
 441 118c 09110000 	    _ADR CLRLINE 
 442 1190 D32E0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 1194 40110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 11a4 504700BF 	    _NEST 
 450 11a8 FD0F0000 	    _ADR VIDBUFF
 451 11ac AD320000 	    _ADR DUPP 
 452 11b0 F3300000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 11b8 E9330000 	    _ADR PLUS 
 454 11bc F3300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 11c4 F3300000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 11cc F9330000 	    _ADR SUBB  
 457 11d0 E93F0000 	    _ADR WMOVE
 458 11d4 F3300000 	    _DOLIT 0 
 458      00000000 
 459 11dc 09110000 	    _ADR CLRLINE
 460 11e0 D32E0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 11e4 98110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 11f0 E34D     	    ldr WP,=SCROLLUP 
 469 11f2 45F00105 	    orr WP,#1
 470 11f6 80EA0000 	    eor T0,T0 
 471 11fa C4F89C00 	    str T0,[UP,#COL]
 472 11fe D4F89800 	    ldr T0,[UP,#ROW]
 473 1202 1828     	    cmp T0,#24 
 474 1204 A2D0     	    beq SCROLLUP  
 475 1206 00F10100 	    add T0,#1 
 476 120a C4F89800 	    str T0,[UP,#ROW]
 477 120e 01F05DBE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
ARM GAS  forth.s 			page 50


 481              	// move cursor 1 char. right 
 482 1212 E8110000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 121c D4F89C00 	  ldr T0,[UP,#COL]
 484 1220 00F10100 	  add T0,#1
 485 1224 3528     	  cmp T0,#53
 486 1226 E3D5     	  bpl TV_CRLF  
 487 1228 C4F89C00 	  str T0,[UP,#COL]
 488 122c 01F04EBE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 1230 16120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 123c D4F89C00 	    ldr T0,[UP,#COL]
 497 1240 28B1     	    cbz T0,1f 
 498 1242 A0F10100 	    sub T0,#1 
 499 1246 C4F89C00 	    str T0,[UP,#COL]
 500 124a 01F03FBE 	    _NEXT 
 501 124e D4F89800 	1:  ldr T0,[UP,#ROW]
 502 1252 38B1     	    cbz T0,9f
 503 1254 A0F10100 	    sub T0,#1
 504 1258 C4F89800 	    str T0,[UP,#ROW]
 505 125c 4FF03400 	    mov T0,#52 
 506 1260 C4F89C00 	    str T0,[UP,#COL]
 507 1264 01F032BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 1268 4FF08000 	    mov T0,#128 
 513 126c 06EA0006 	    and TOS,T0 
 514 1270 4FEAD616 	    lsr TOS,#7
 515 1274 01F02ABE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1278 3868     	  ldr T0,[DSP]
 520 127a 00F10100 	  add T0,#1 
 521 127e 3860     	  str T0,[DSP]
 522 1280 01F024BE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 1284 4FEA4606 	    lsl TOS,#1
 527 1288 01F020BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
ARM GAS  forth.s 			page 51


 534              	CHAR_ROW:  
 535 128c 504700BF 	    _NEST 
 536 1290 F3300000 	    _DOLIT 5 
 536      05000000 
 537 1298 19320000 	    _ADR TOR 
 538 129c 19320000 	1:  _ADR TOR 
 539 12a0 E1350000 	    _ADR DDUP 
 540 12a4 E9310000 	    _ADR RAT
 541 12a8 69120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 12ac 11100000 	    _ADR PLOT 
 543 12b0 79120000 	    _ADR INCR_X 
 544 12b4 B5310000 	    _ADR RFROM 
 545 12b8 85120000 	    _ADR NEXT_PIXEL
 546 12bc 15310000 	    _DONXT 1b
 546      9C120000 
 547 12c4 CD350000 	    _ADR TDROP 
 548 12c8 D32E0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 12cc A6F12006 	   sub TOS,#32
 553 12d0 4FF00800 	   mov T0,#8 
 554 12d4 00FB06F6 	   mul TOS,T0 
 555 12d8 A748     	   ldr T0,=font_6x8
 556 12da 0644     	   add TOS,T0 
 557 12dc 01F0F6BD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 12e0 34120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 12ec 504700BF 	    _NEST
 565 12f0 AD320000 	    _ADR DUPP 
 566 12f4 F3300000 	    _DOLIT 32 
 566      20000000 
 567 12fc 71370000 	    _ADR ULESS
 568 1300 33310000 	    _QBRAN 1f
 568      10130000 
 569 1308 5B310000 	    _BRAN CTRL_KEY
 569      74130000 
 570 1310 CD120000 	1:  _ADR CHAR_FONT 
 571 1314 890F0000 	    _ADR CURSOR_COL 
 572 1318 89310000 	    _ADR AT
 573 131c CD0F0000 	    _ADR COLX  // x coord 
 574 1320 9D0F0000 	    _ADR CURSOR_ROW 
 575 1324 89310000 	    _ADR AT    
 576 1328 B50F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 132c 91350000 	    _ADR ROT  // TEST 
 578 1330 F3300000 	    _DOLIT 7   
 578      07000000 
 579 1338 19320000 	    _ADR TOR  
 580 133c 19320000 	1:  _ADR TOR  // { x y }
 581 1340 E1350000 	    _ADR DDUP  // { x y x y }
 582 1344 E9310000 	    _ADR RAT 
ARM GAS  forth.s 			page 52


 583 1348 A9310000 	    _ADR CAT   // { x y x y r }
 584 134c 8D120000 	    _ADR CHAR_ROW 
 585 1350 45340000 	    _ADR ONEP // {x y' }
 586 1354 B5310000 	    _ADR RFROM 
 587 1358 45340000 	    _ADR ONEP // {x y' c-adr' }
 588 135c 15310000 	    _DONXT 1b
 588      3C130000 
 589 1364 CD350000 	    _ADR TDROP  
 590 1368 1D120000 	    _ADR RIGHT
 591 136c 5D140000 	9:  _ADR SHOW_CURSOR 
 592 1370 D32E0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 1374 E5140000 	    _ADR HIDE_CURSOR
 595 1378 AD320000 	    _ADR DUPP 
 596 137c F3300000 	    _DOLIT BKSPP  
 596      08000000 
 597 1384 31370000 	    _ADR EQUAL 
 598 1388 33310000 	    _QBRAN 1f 
 598      A0130000 
 599 1390 3D140000 	    _ADR BACK_SPACE 
 600 1394 8D320000 	8:  _ADR DROP 
 601 1398 5B310000 	    _BRAN 9b 
 601      6C130000 
 602 13a0 AD320000 	1:  _ADR DUPP 
 603 13a4 F3300000 	    _DOLIT CRR 
 603      0D000000 
 604 13ac 31370000 	    _ADR EQUAL 
 605 13b0 33310000 	    _QBRAN 1f 
 605      C4130000 
 606 13b8 E5130000 	    _ADR CAR_RET
 607 13bc 5B310000 	    _BRAN 8b
 607      94130000 
 608 13c4 F3300000 	1:  _DOLIT LF 
 608      0A000000 
 609 13cc 31370000 	    _ADR EQUAL 
 610 13d0 33310000 	    _QBRAN 9b 
 610      6C130000 
 611 13d8 FD130000 	    _ADR LN_FEED
 612 13dc 5B310000 	    _BRAN 9b  
 612      6C130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 13e4 504700BF 	   _NEST
 620 13e8 F3300000 	   _DOLIT 0 
 620      00000000 
 621 13f0 890F0000 	   _ADR CURSOR_COL 
 622 13f4 75310000 	   _ADR STORE 
 623 13f8 D32E0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
ARM GAS  forth.s 			page 53


 629              	LN_FEED:
 630 13fc 504700BF 	    _NEST 
 631 1400 9D0F0000 	    _ADR CURSOR_ROW 
 632 1404 89310000 	    _ADR AT 
 633 1408 AD320000 	    _ADR DUPP 
 634 140c F3300000 	    _DOLIT 24 
 634      18000000 
 635 1414 91330000 	    _ADR XORR 
 636 1418 33310000 	    _QBRAN 1f
 636      30140000 
 637 1420 45340000 	    _ADR ONEP 
 638 1424 9D0F0000 	    _ADR CURSOR_ROW 
 639 1428 75310000 	    _ADR STORE 
 640 142c D32E0000 	    _UNNEST    
 641 1430 8D320000 	1:  _ADR DROP 
 642 1434 4D110000 	    _ADR SCROLLUP 
 643 1438 D32E0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 143c 504700BF 	  _NEST 
 652 1440 3D120000 	  _ADR LEFT 
 653 1444 5D140000 	  _ADR SHOW_CURSOR
 654 1448 D32E0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 144c E4120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 145c 504700BF 	    _NEST 
 663 1460 F3300000 	    _DOLIT 0xFF
 663      FF000000 
 664 1468 9D0F0000 	0:  _ADR CURSOR_ROW
 665 146c 89310000 	    _ADR AT  
 666 1470 45340000 	    _ADR ONEP 
 667 1474 B50F0000 	    _ADR ROWY 
 668 1478 F3300000 	    _DOLIT BPR
 668      A0000000 
 669 1480 09340000 	    _ADR STAR
 670 1484 F3300000 	    _DOLIT BPR  
 670      A0000000 
 671 148c F9330000 	    _ADR SUBB 
 672 1490 890F0000 	    _ADR CURSOR_COL
 673 1494 89310000 	    _ADR AT 
 674 1498 CD0F0000 	    _ADR COLX 
 675 149c E9340000 	    _ADR TWOSL  
 676 14a0 E9330000 	    _ADR PLUS
 677 14a4 FD0F0000 	    _ADR VIDBUFF
ARM GAS  forth.s 			page 54


 678 14a8 E9330000 	    _ADR PLUS
 679 14ac F3300000 	    _DOLIT 2
 679      02000000 
 680 14b4 19320000 	    _ADR TOR  
 681 14b8 E1350000 	1:  _ADR DDUP 
 682 14bc 95310000 	    _ADR CSTOR 
 683 14c0 45340000 	    _ADR ONEP 
 684 14c4 15310000 	    _DONXT 1b
 684      B8140000 
 685 14cc B9350000 	2:  _ADR DDROP // drop 3 elements 
 686 14d0 D32E0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 14d4 50140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 14e4 504700BF 	    _NEST 
 694 14e8 550F0000 	    _ADR BACKCOLOR 
 695 14ec 89310000 	    _ADR AT 
 696 14f0 AD320000 	    _ADR DUPP  
 697 14f4 F3300000 	    _DOLIT 4 
 697      04000000 
 698 14fc D9330000 	    _ADR LSHIFT 
 699 1500 7D330000 	    _ADR ORR 
 700 1504 5B310000 	    _BRAN 0b
 700      68140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 150c D8140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1518 352E     	    cmp TOS,#53
 706 151a 01D4     	    bmi 1f 
 707 151c 4FF03406 	    mov TOS,#52
 708 1520 C4F89C60 	1:  str TOS,[UP,#COL]
 709 1524 57F8046B 	    _POP
 710 1528 192E     	    cmp TOS,#25
 711 152a 01D4     	    bmi 1f 
 712 152c 4FF01806 	    mov TOS,#24 
 713 1530 C4F89860 	1:  str TOS,[UP,#ROW]
 714 1534 57F8046B 	    _POP 
 715 1538 01F0C8BC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 153c 10150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1548 504700BF 	    _NEST 
 721 154c 113F0000 	    _ADR PAD 
 722 1550 AD320000 	    _ADR DUPP 
 723 1554 45340000 	    _ADR ONEP 
ARM GAS  forth.s 			page 55


 724 1558 F3300000 	    _DOLIT 53
 724      35000000 
 725 1560 6D4E0000 	    _ADR ACCEP
 726 1564 BD320000 	    _ADR SWAP 
 727 1568 8D320000 	    _ADR DROP 
 728 156c ED320000 	    _ADR OVER 
 729 1570 95310000 	    _ADR CSTOR  
 730 1574 D32E0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
ARM GAS  forth.s 			page 56


 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
ARM GAS  forth.s 			page 57


 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
ARM GAS  forth.s 			page 58


 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
ARM GAS  forth.s 			page 59


  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
ARM GAS  forth.s 			page 60


  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
ARM GAS  forth.s 			page 61


  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
ARM GAS  forth.s 			page 62


 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 1584 1C61     	   .byte 0x1c,'a' 
   9 1586 3262     	   .byte 0x32,'b'
  10 1588 2163     	   .byte 0x21,'c'
  11 158a 2364     	   .byte 0x23,'d'
  12 158c 2465     	   .byte 0x24,'e'
  13 158e 2B66     	   .byte 0x2b,'f'
  14 1590 3467     	   .byte 0x34,'g'
  15 1592 3368     	   .byte 0x33,'h'
  16 1594 4369     	   .byte 0x43,'i'
  17 1596 3B6A     	   .byte 0x3B,'j'
  18 1598 426B     	   .byte 0x42,'k'
  19 159a 4B6C     	   .byte 0x4b,'l'
  20 159c 3A6D     	   .byte 0x3a,'m'
  21 159e 316E     	   .byte 0x31,'n'
  22 15a0 446F     	   .byte 0x44,'o'
  23 15a2 4D70     	   .byte 0x4d,'p'
  24 15a4 1571     	   .byte 0x15,'q'
  25 15a6 2D72     	   .byte 0x2d,'r'
  26 15a8 1B73     	   .byte 0x1b,'s'
  27 15aa 2C74     	   .byte 0x2c,'t'
  28 15ac 3C75     	   .byte 0x3c,'u'
  29 15ae 2A76     	   .byte 0x2a,'v'
  30 15b0 1D77     	   .byte 0x1d,'w'
  31 15b2 2278     	   .byte 0x22,'x'
  32 15b4 3579     	   .byte 0x35,'y'
  33 15b6 1A7A     	   .byte 0x1a,'z'
  34 15b8 4530     	   .byte 0x45,'0'
  35 15ba 1631     	   .byte 0x16,'1'
  36 15bc 1E32     	   .byte 0x1e,'2'
  37 15be 2633     	   .byte 0x26,'3'
  38 15c0 2534     	   .byte 0x25,'4'
  39 15c2 2E35     	   .byte 0x2e,'5'
  40 15c4 3636     	   .byte 0x36,'6'
  41 15c6 3D37     	   .byte 0x3d,'7'
  42 15c8 3E38     	   .byte 0x3e,'8'
  43 15ca 4639     	   .byte 0x46,'9'
  44 15cc 0E60     	   .byte 0x0e,'`'
  45 15ce 4E2D     	   .byte 0x4e,'-'
  46 15d0 553D     	   .byte 0x55,'='
  47 15d2 5D5C     	   .byte 0x5d,'\\'
  48 15d4 545B     	   .byte 0x54,'['
  49 15d6 5B5D     	   .byte 0x5b,']'
ARM GAS  forth.s 			page 63


  50 15d8 4C3B     	   .byte 0x4c,';'
  51 15da 5227     	   .byte 0x52,'\''
  52 15dc 412C     	   .byte 0x41,','
  53 15de 492E     	   .byte 0x49,'.'
  54 15e0 7C2A     	   .byte 0x7c,'*'
  55 15e2 792B     	   .byte 0x79,'+'
  56 15e4 2920     	   .byte 0x29,' '
  57 15e6 5A0D     	   .byte SC_ENTER,CRR 
  58 15e8 6608     	   .byte SC_BKSP,BKSPP 
  59 15ea 0D09     	   .byte SC_TAB,9
  60 15ec 761B     	   .byte SC_ESC,27
  61 15ee 119E     	   .byte SC_LALT,VK_LALT 
  62 15f0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 15f2 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 15f4 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 15f6 779A     	   .byte SC_NUM,VK_NLOCK 
  66 15f8 5800     	   .byte SC_CAPS,0
  67 15fa 0580     	   .byte SC_F1,VK_F1
  68 15fc 0681     	   .byte SC_F2,VK_F2
  69 15fe 0482     	   .byte SC_F3,VK_F3
  70 1600 0C83     	   .byte SC_F4,VK_F4
  71 1602 0384     	   .byte SC_F5,VK_F5
  72 1604 0B85     	   .byte SC_F6,VK_F6
  73 1606 8386     	   .byte SC_F7,VK_F7
  74 1608 0A87     	   .byte SC_F8,VK_F8
  75 160a 0188     	   .byte SC_F9,VK_F9
  76 160c 098A     	   .byte SC_F10,VK_F10
  77 160e 788B     	   .byte SC_F11,VK_F11
  78 1610 078C     	   .byte SC_F12,VK_F12
  79 1612 7030     	   .byte SC_KP0,'0'
  80 1614 6931     	   .byte SC_KP1,'1'
  81 1616 7232     	   .byte SC_KP2,'2'
  82 1618 7A33     	   .byte SC_KP3,'3'
  83 161a 6B34     	   .byte SC_KP4,'4'
  84 161c 7335     	   .byte SC_KP5,'5'
  85 161e 7436     	   .byte SC_KP6,'6'
  86 1620 6C37     	   .byte SC_KP7,'7'
  87 1622 7538     	   .byte SC_KP8,'8'
  88 1624 7D39     	   .byte SC_KP9,'9'
  89 1626 7C2A     	   .byte SC_KPMUL,'*'
  90 1628 4A2F     	   .byte SC_KPDIV,'/'
  91 162a 792B     	   .byte SC_KPPLUS,'+'
  92 162c 7B2D     	   .byte SC_KPMINUS,'-'
  93 162e 712E     	   .byte SC_KPDOT,'.'
  94 1630 5A0D     	   .byte SC_KPENTER,'\r'
  95 1632 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1634 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1636 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1638 6141     	   .byte 'a','A'
 102 163a 6242     	   .byte 'b','B'
 103 163c 6343     	   .byte 'c','C'
 104 163e 6444     	   .byte 'd','D'
 105 1640 6545     	   .byte 'e','E'
 106 1642 6646     	   .byte 'f','F'
ARM GAS  forth.s 			page 64


 107 1644 6747     	   .byte 'g','G'
 108 1646 6848     	   .byte 'h','H'
 109 1648 6949     	   .byte 'i','I'
 110 164a 6A4A     	   .byte 'j','J'
 111 164c 6B4B     	   .byte 'k','K'
 112 164e 6C4C     	   .byte 'l','L'
 113 1650 6D4D     	   .byte 'm','M'
 114 1652 6E4E     	   .byte 'n','N'
 115 1654 6F4F     	   .byte 'o','O'
 116 1656 7050     	   .byte 'p','P'
 117 1658 7151     	   .byte 'q','Q'
 118 165a 7252     	   .byte 'r','R'
 119 165c 7353     	   .byte 's','S'
 120 165e 7454     	   .byte 't','T'
 121 1660 7555     	   .byte 'u','U'
 122 1662 7656     	   .byte 'v','V'
 123 1664 7757     	   .byte 'w','W'
 124 1666 7858     	   .byte 'x','X'
 125 1668 7959     	   .byte 'y','Y'
 126 166a 7A5A     	   .byte 'z','Z'
 127 166c 3121     	   .byte '1','!'
 128 166e 3240     	   .byte '2','@'
 129 1670 3323     	   .byte '3','#'
 130 1672 3424     	   .byte '4','$'
 131 1674 3525     	   .byte '5','%'
 132 1676 365E     	   .byte '6','^'
 133 1678 3726     	   .byte '7','&'
 134 167a 382A     	   .byte '8','*'
 135 167c 3928     	   .byte '9','('
 136 167e 3029     	   .byte '0',')'
 137 1680 2D5F     	   .byte '-','_'
 138 1682 3D2B     	   .byte '=','+'
 139 1684 607E     	   .byte '`','~'
 140 1686 2722     	   .byte '\'','"'
 141 1688 2C3C     	   .byte ',','<'
 142 168a 2E3E     	   .byte '.','>'
 143 168c 2F3F     	   .byte '/','?'
 144 168e 5C7C     	   .byte '\\','|'
 145 1690 3B3A     	   .byte ';',':'
 146 1692 5B7B     	   .byte '[','{'
 147 1694 5D7D     	   .byte ']','}'
 148 1696 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1698 315C     	   .byte '1','\\'
 153 169a 3240     	   .byte '2','@'
 154 169c 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 169e 363F     	   .byte '6','?'
 158 16a0 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 16a2 397B     	   .byte '9','{'
 161 16a4 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
ARM GAS  forth.s 			page 65


 164 16a6 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 16a8 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 16aa 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 16ac 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 16ae 11A3     	    .byte SC_RALT,VK_RALT
 172 16b0 2F97     	    .byte SC_APPS,VK_APPS
 173 16b2 758D     	    .byte SC_UP,VK_UP
 174 16b4 728E     	    .byte SC_DOWN,VK_DOWN
 175 16b6 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 16b8 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 16ba 7095     	    .byte SC_INSERT,VK_INSERT
 178 16bc 6C91     	    .byte SC_HOME,VK_HOME
 179 16be 7D93     	    .byte SC_PGUP,VK_PGUP
 180 16c0 7A94     	    .byte SC_PGDN,VK_PGDN
 181 16c2 717F     	    .byte SC_DEL,VK_DELETE
 182 16c4 6992     	    .byte SC_END,VK_END
 183 16c6 4A2F     	    .byte SC_KPDIV,'/'
 184 16c8 5A0D     	    .byte SC_KPENTER,'\r'
 185 16ca 1200     	    .byte 0x12,0
 186 16cc 7C00     	    .byte 0x7c,0
 187 16ce 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 16d0 6303     	   .byte 'c', VK_CTRL_C 
 193 16d2 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 16d4 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 16d6 27A2     	   .byte SC_RGUI,VK_RGUI
 196 16d8 11A3     	   .byte SC_RALT,VK_RALT
 197 16da 2F97     	   .byte SC_APPS,VK_APPS
 198 16dc 7095     	   .byte SC_INSERT,VK_INSERT
 199 16de 6C91     	   .byte SC_HOME,VK_HOME
 200 16e0 7D93     	   .byte SC_PGUP,VK_PGUP
 201 16e2 717F     	   .byte SC_DEL,VK_DELETE
 202 16e4 6992     	   .byte SC_END,VK_END
 203 16e6 7A94     	   .byte SC_PGDN,VK_PGDN
 204 16e8 758D     	   .byte SC_UP,VK_UP
 205 16ea 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 16ec 728E     	   .byte SC_DOWN,VK_DOWN
 207 16ee 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 16f0 4A2F     	   .byte SC_KPDIV,'/'
 209 16f2 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 16f4 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 16f6 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 16f8 119E     	   .byte SC_LALT,VK_LALT
 213 16fa 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 16fc 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 16fe 761B     	   .byte SC_ESC,VK_ESC
 216 1700 779A     	   .byte SC_NUM,VK_NLOCK
 217 1702 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1704 0000     	   .byte 0,0
 219              	
 220              	
ARM GAS  forth.s 			page 66


  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1706 00BF     	    _GBL_FUNC kbd_isr 
  79 1708 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1710 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1714 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1716 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 171e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 1722 10F0020F 	    tst r0,#KBD_TX 
  85 1726 40F08480 	    bne send_bit  
  86 172a 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 172c 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1730 01F10102 	    add r2,r1,#1
  89 1734 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1738 0029     	    cmp r1,#0
  91 173a 15D0     	    beq start_bit 
  92 173c 0929     	    cmp r1,#9 
ARM GAS  forth.s 			page 67


  93 173e 25D0     	    beq parity_bit 
  94 1740 0A29     	    cmp r1,#10 
  95 1742 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 1744 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1748 4FEA5202 	    lsr r2,#1 
  99 174c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1750 07D0     	    beq 1f 
 101 1752 42F08002 	    orr r2,#(1<<7)
 102 1756 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 175a 00F10100 	    add r0,#1 
 104 175e 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 1762 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1766 63E0     	    b 9f         
 107              	start_bit:
 108 1768 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 176c 60D1     	    bne 9f // not a start bit 
 110 176e 80EA0000 	    eor r0,r0 
 111 1772 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 1776 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 177a 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 177e 6FF00101 	    mvn r1,#1
 115 1782 00EA0100 	    and r0,r1 // clear error flag 
 116 1786 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 178a 51E0     	    b 9f 
 118              	parity_bit:
 119 178c 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 1790 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1794 4CD0     	    beq 9f  
 122 1796 01F10101 	    add r1,#1 
 123 179a 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 179e 47E0     	    b 9f      
 125              	stop_bit:
 126 17a0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 17a4 40D0     	    beq 8f // error stop bit expected 
 128 17a6 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 17aa 11F0010F 	    tst r1,#1 
 130 17ae 3BD0     	    beq 8f // error parity
 131 17b0 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 17b4 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 17b8 E028     	    cmp r0,#XT_KEY
 134 17ba 04D1     	    bne 1f
 135 17bc 41F04001 	    orr r1,#KBD_F_XT
 136 17c0 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 17c4 30E0     	    b 8f  
 138 17c6 11F0800F 	1:  tst r1,#KBD_F_REL
 139 17ca 14D0     	    beq store_code
 140 17cc 5828     	    cmp r0,#SC_CAPS
 141 17ce 04D1     	    bne 1f
 142 17d0 81F00401 	    eor r1,#KBD_F_CAPS
 143 17d4 41F00101 	    orr r1,#KBD_F_CTGL 
 144 17d8 06E0     	    b 2f 
 145 17da 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 17e4 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 17e8 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
ARM GAS  forth.s 			page 68


 148 17ec 01EA0201 	    and r1,r2
 149 17f0 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 17f4 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 17f6 F028     	    cmp r0,#KEY_REL
 154 17f8 04D1     	    bne 1f
 155              	// set release flags 
 156 17fa 41F08001 	    orr r1,#KBD_F_REL 
 157 17fe 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 1802 11E0     	    b 8f     
 159 1804 0146     	1:  mov r1,r0 
 160 1806 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1810 0AD1     	    bne 8f // was async key 
 162 1812 D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1816 04F18002 	    add r2,UP,#KBD_QUEUE
 164 181a 1154     	    strb r1,[r2,r0]
 165 181c 00F10100 	    add r0,#1
 166 1820 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1824 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1828 80EA0000 	8:  eor r0,r0 
 169 182c A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 1830 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 1832 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1836 01F10100 	    add r0,r1,#1
 182 183a 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 183e 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 1842 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1846 0829     	1:  cmp r1,#8 
 187 1848 15D0     	    beq send_parity 
 188 184a 0929     	    cmp r1,#9 
 189 184c 1CD0     	    beq send_stop
 190 184e 0A29     	    cmp r1,#10
 191 1850 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 1852 10F0010F 	    tst r0,#1
 194 1856 4FEA5000 	    lsr r0,#1
 195 185a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 185e 02D1     	    bne 1f 
 197 1860 4FEA0242 	    lsl r2,#16
 198 1864 05E0     	    b 2f  
 199 1866 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 186a 00F10100 	    add r0,#1 
 201 186e 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 1872 9A61     	2:  str r2,[R3,#GPIO_BSRR]
ARM GAS  forth.s 			page 69


 203 1874 1CE0     	    b 9f 
 204              	send_parity:
 205 1876 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 187a 10F0010F 	    tst r0,#1
 207 187e 01D0     	    beq 1f 
 208 1880 4FEA0242 	    lsl r2,#16
 209 1884 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1886 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1888 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 188a 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 188e 1960     	    str r1,[r3,#GPIO_MODER]
 217 1890 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1892 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1896 6FF00201 	    mvn r1,#KBD_TX 
 221 189a 00EA0100 	    and r0,r1 
 222 189e 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 18a0 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 18a4 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 18a8 80EA0000 	    eor r0,r0 
 226 18ac 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 18b0 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 18b2 02B4     	    push {r1}
 238 18b4 DFF86414 	    ldr r1,=async_keys
 239 18b8 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 18c2 02BC     	    pop {r1}
 241 18c4 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 18c6 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 18d0 FF28     	    cmp r0,#255
ARM GAS  forth.s 			page 70


 256 18d2 01D1     	    bne set_async_key 
 257 18d4 0020     	    movs r0,#0 
 258 18d6 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 18d8 06B4     	    push {r1,r2}
 262 18da 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 18de DFF84014 	    ldr r1,=async_jump 
 264 18e2 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 18e6 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 18ea 04E0     	    b set_reset
 268              	ctrl_key:
 269 18ec 4FF01000 	    mov r0,#KBD_F_CTRL
 270 18f0 01E0     	    b set_reset 
 271              	alt_key:
 272 18f2 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 18f6 12F0800F 	    tst r2,#KBD_F_REL 
 275 18fa 04D0     	    beq 1f 
 276 18fc 6FEA0000 	    mvn r0,r0
 277 1900 02EA0002 	    and r2,r0
 278 1904 01E0     	    b 2f
 279 1906 42EA0002 	1:  orr r2,r0 
 280 190a 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 190e 5FF0FF30 	    movs r0,#-1
 282 1912 06BC     	9:  pop {r1,r2}
 283 1914 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1916 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1918 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 191a 1401     	    .byte SC_LCTRL,1  // left control 
 290 191c 1401     	    .byte SC_RCTRL,1  // right control 
 291 191e 1102     	    .byte SC_LALT,2  // left alt 
 292 1920 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 1922 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1924 00       	    .byte 0 // shift  key 
 297 1925 03       	    .byte (ctrl_key-shift_key)/2
 298 1926 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1927 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1928 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1930 1846     	    mov r0,r3 
 311 1932 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
ARM GAS  forth.s 			page 71


 312 1936 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 193a 00B5FEF7 	    _CALL gpio_config
 313      30FF5DF8 
 313      04EB
 314 1944 1846     	    mov r0,r3 
 315 1946 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 194a 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 194e 00B5FEF7 	    _CALL gpio_config
 317      26FF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1958 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1960 4FF40050 	    mov r0,#(2<<12)
 321 1964 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1966 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 196e 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1972 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1974 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1976 80EA0000 	   eor r0,r0 
 328 197a C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 197e C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1982 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1986 4FF00101 	   mov r1,#1 
 333 198a 00B5FEF7 	   _CALL nvic_set_priority
 333      ACFE5DF8 
 333      04EB
 334 1994 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1998 00B5FEF7 	   _CALL nvic_enable_irq 
 335      BEFE5DF8 
 335      04EB
 336 19a2 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 19a4 40150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 19b4 47F8046D 	    _PUSH 
 342 19b8 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 19bc 06F0FC06 	    and TOS,#0xFC  
 344 19c0 01F084BA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 19c4 0EB4     	    push {T1,T2,T3}
 352 19c6 80EA0000 	    eor T0,T0  
 353 19ca 04F18003 	    add T3,UP,#KBD_QUEUE
 354 19ce D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 19d2 D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
ARM GAS  forth.s 			page 72


 356 19d6 9142     	    cmp T1,T2 
 357 19d8 06D0     	    beq 2f  
 358 19da 585C     	    ldrb T0,[T3,T1]
 359 19dc 01F10101 	    add T1,#1 
 360 19e0 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 19e4 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 19e8 0EBC     	2:  pop {T1,T2,T3}
 363 19ea 7047     	    _RET 
 364              	
 365              	wait_code:
 366 19ec 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 19f6 0000     	    movs T0,T0
 368 19f8 F8D0     	    beq wait_code  
 369 19fa 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 19fc 04B4     	    push {T2}
 380 19fe 11F8012B 	1:  ldrb T2,[T1],#1
 381 1a02 22B1     	    cbz T2,2f 
 382 1a04 8242     	    cmp T2,T0
 383 1a06 02D0     	    beq 2f 
 384 1a08 01F10101 	    add T1,#1 
 385 1a0c F7E7     	    b 1b 
 386 1a0e 0878     	2:  ldrb T0,[T1]
 387 1a10 0000     	    movs T0,T0 // set/reset zero flag 
 388 1a12 04BC     	9:  pop {T2}
 389 1a14 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1a16 A8190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1a24 47F8046D 	    _PUSH 
 398 1a28 86EA0606 	    eor TOS,TOS 
 399 1a2c BD49     	    ldr T1,=sc_ascii // translation table
 400 1a2e 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1a32 4FF04002 	    mov T2,#KBD_F_XT 
 402 1a36 1042     	    tst T0,T2
 403 1a38 00D0     	    beq 1f
 404 1a3a BB49     	    ldr T1,=extended // extended code translation
 405 1a3c 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
ARM GAS  forth.s 			page 73


 406 1a46 98B1     	    cbz T0,inkey_exit
 407 1a48 E128     	    cmp T0,#XT2_KEY // pause 
 408 1a4a 13D0     	    beq pause_key
 409 1a4c 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1a56 0646     	    mov TOS,T0
 411 1a58 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1a62 032E     	    cmp TOS,#VK_CTRL_C 
 413 1a64 3EF417AD 	    beq user_reboot 
 414 1a68 47F8046D 	    _PUSH 
 415 1a6c 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1a70 01F02CBA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1a74 4FF00701 	    mov T1,#7 
 420 1a78 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1a82 0139     	    subs T1,#1
 422 1a84 F8D1     	    bne 1b 
 423 1a86 01F021BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1a8a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1a8e 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1a92 06D1     	    bne shift_down 
 431 1a94 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1a98 06D1     	    bne altchar_down 
 433 1a9a 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1a9e 06D1     	    bne ctrl_down 
 435 1aa0 0DE0     	    b 9f 
 436              	shift_down:
 437 1aa2 3046     	    mov T0,TOS 
 438 1aa4 A149     	    ldr T1,=shifted 
 439 1aa6 04E0     	    b 8f 
 440              	altchar_down:
 441 1aa8 3046     	    mov T0,TOS 
 442 1aaa A149     	    ldr T1,=altchar
 443 1aac 01E0     	    b 8f
 444              	ctrl_down:
 445 1aae 3046     	    mov T0,TOS 
 446 1ab0 A049     	    ldr T1,=controls 
 447 1ab2 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1abc 0646     	    mov TOS,T0
 449 1abe 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1ac8 7047     	    _RET 
 451              	
 452              	do_capslock:
ARM GAS  forth.s 			page 74


 453 1aca 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1ace 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1ad2 0BD0     	    beq 9f 
 456 1ad4 412E     	    cmp TOS,#'A'
 457 1ad6 09D4     	    bmi 9f 
 458 1ad8 5B2E     	    cmp TOS,#'Z'+1 
 459 1ada 03D4     	    bmi 3f 
 460 1adc 612E     	    cmp TOS,#'a'
 461 1ade 05D4     	    bmi 9f 
 462 1ae0 7B2E     	    cmp TOS,#'z'+1
 463 1ae2 03D5     	    bpl 9f 
 464 1ae4 4FF02000 	3:  mov T0,#(1<<5)
 465 1ae8 86EA0006 	    eor TOS,T0 
 466 1aec 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1aee 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1af0 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1af2 0128     	    cmp r0,ST_PREVID 
 484 1af4 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1af6 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1afa 00B5FEF7 	    _CALL nvic_disable_irq
 487      22FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1b04 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1b0c 1846     	    mov r0,r3 
 491 1b0e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1b12 4FF01102 	    mov r2,#OUTPUT_OD
 493 1b16 00B5FEF7 	    _CALL gpio_config 
 493      42FE5DF8 
 493      04EB
 494 1b20 1846     	    mov r0,r3 
 495 1b22 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1b26 82EA0202 	    eor r2,r2 
 497 1b2a 00B5FEF7 	    _CALL gpio_out 
 497      8EFE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1b34 4FF4E150 	    mov r0,#150*48
 500 1b38 0138     	1:  subs r0,#1 
 501 1b3a FDD1     	    bne 1b
 502 1b3c 01BC     	    pop {r0}
ARM GAS  forth.s 			page 75


 503 1b3e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 1b42 D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1b46 40F00200 	    orr r0,#KBD_TX 
 506 1b4a 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 507 1b4e 80EA0000 	    eor r0,r0 
 508 1b52 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1b56 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1b5a 1846     	    mov r0,r3 
 513 1b5c 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1b60 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1b64 00B5FEF7 	    _CALL gpio_config 
 515      1BFE5DF8 
 515      04EB
 516 1b6e 1846     	    mov r0,r3 
 517 1b70 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1b74 82EA0202 	    eor r2,r2 
 519 1b78 00B5FEF7 	    _CALL gpio_out
 519      67FE5DF8 
 519      04EB
 520              	// release clock line 
 521 1b82 1846     	    mov r0,r3 
 522 1b84 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1b88 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1b8c 00B5FEF7 	    _CALL gpio_config
 524      07FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1b96 4FF00A00 	    mov r0,#10
 528 1b9a E060     	    str r0,[UP,#CD_TIMER]
 529 1b9c E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1b9e 20B1     	    cbz r0, 4f 
 531 1ba0 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1ba4 10F0020F 	    tst r0,#KBD_TX
 533 1ba8 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1baa 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1bae 00B5FEF7 	    _CALL nvic_enable_irq
 536      B3FD5DF8 
 536      04EB
 537 1bb8 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1bbc 20F00201 	    bic r1,r0,#KBD_TX
 539 1bc0 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1bc4 00F00200 	    and r0,#KBD_TX
 541 1bc8 48B1     	    cbz r0, 5f
 542 1bca 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1bcc 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1bd0 1960     	    str r1,[r3,#GPIO_MODER]
 545 1bd2 80EA0000 	    eor r0,r0 
 546 1bd6 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1bda 6FEA0000 	    mvn r0,r0   
 548 1bde 0EBC     	5:  pop {r1,r2,r3}
 549 1be0 7047     	    _RET 
 550              	
 551              	 
ARM GAS  forth.s 			page 76


 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1be2 80EA0000 	    eor T0,T0 
 555 1be6 C4F89000 	    str T0,[UP,#KBD_QHEAD]
 556 1bea C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1bee 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1bf2 6FF00301 	    mvn T1,#3
 559 1bf6 00EA0100 	    and T0,T1 
 560 1bfa 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1bfe 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1c00 1A1A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1c0c 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1c10 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1c1a B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1c1c 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1c26 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1c30 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1c32 EBD0     	    beq 1b 
 575 1c34 4FF4FA70 	    mov T0,#500 
 576 1c38 E060     	    str T0,[UP,#CD_TIMER]
 577 1c3a 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1c44 10B9     	    cbnz T0,3f
 579 1c46 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1c48 0028     	    cmp T0,#0 
 581 1c4a F6D1     	    bne 2b 
 582 1c4c 47F8046D 	3:  _PUSH 
 583 1c50 0646     	    mov TOS,T0  
 584 1c52 01F03BB9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1c56 041C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1c64 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1c6e 4FF0ED00 	     mov T0,#KBD_CMD_LED 
ARM GAS  forth.s 			page 77


 594 1c72 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1c7c 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1c86 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1c88 ECD0     	    beq 1b
 598 1c8a FA28     	    cmp T0,#KBD_ACK  
 599 1c8c F6D1     	    bne 2b 
 600 1c8e 3046     	2:  mov T0,TOS 
 601 1c90 00F00700 	    and T0,#7 
 602 1c94 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1c9e 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ca8 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1caa F0D0     	    beq 2b
 606 1cac FA28     	    cmp T0,#KBD_ACK 
 607 1cae F6D1     	    bne 3b  
 608 1cb0 57F8046B 	    _POP 
 609 1cb4 01F00AB9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1cb8 5A1C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1cc8 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1ccc 10F0010F 	    tst T0,#1
 619 1cd0 01D1     	    bne 1f 
 620 1cd2 01F0FBB8 	    _NEXT 
 621 1cd6 47F8046D 	1: _PUSH 
 622 1cda 6FF00101 	    mvn T1,#1 
 623 1cde 00EA0100 	    and T0,T1 
 624 1ce2 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1ce6 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1cea 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1cf2 BC1C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1d00 504700BF 	    _NEST
 635 1d04 C91C0000 	1:  _ADR CAPS_LED  
ARM GAS  forth.s 			page 78


 636 1d08 251A0000 	    _ADR PS2_QKEY 
 637 1d0c F9340000 	    _ADR QDUP 
 638 1d10 33310000 	    _QBRAN 1b  
 638      041D0000 
 639 1d18 D32E0000 	    _UNNEST 
 640 1d1c 16190000 	
 640      24190000 
 640      84150000 
 640      A8160000 
 640      38160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1d3c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1d44 0346     	    mov r3,r0 
  44 1d46 4FF00401 	    mov r1,#PIN_F_SC 
  45 1d4a 4FF00102 	    mov r2,#OUTPUT_PP
  46 1d4e 00B5FEF7 	    _CALL gpio_config 
ARM GAS  forth.s 			page 79


  46      26FD5DF8 
  46      04EB
  47 1d58 1846     	    mov r0,r3 
  48 1d5a 4FF00401 	    mov r1,#PIN_F_SC  
  49 1d5e 4FF00102 	    MOV r2,#1
  50 1d62 00B5FEF7 	    _CALL gpio_out 
  50      72FD5DF8 
  50      04EB
  51 1d6c 1846     	    mov r0,r3 
  52 1d6e 4FF00501 	    mov r1,#PIN_SCK  
  53 1d72 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1d76 00B5FEF7 	    _CALL gpio_config 
  54      12FD5DF8 
  54      04EB
  55 1d80 1846     	    mov r0,r3 
  56 1d82 4FF00701 	    mov r1,#PIN_MOSI 
  57 1d86 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1d8a 00B5FEF7 	    _CALL gpio_config 
  58      08FD5DF8 
  58      04EB
  59 1d94 1846     	    mov r0,r3
  60 1d96 4FF00601 	    mov r1,#PIN_MISO
  61 1d9a 4FF00202 	    mov r2,#INPUT_AFO  
  62 1d9e 00B5FEF7 	    _CALL gpio_config
  62      FEFC5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1da8 4CF6AA40 	    mov r0,#0xCCAA
  65 1dac 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1dae 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1db6 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1db8 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1dbc 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1dbe 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1dc6 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1dca 0180     	    strh r1,[r0,#SPI_CR1]
  73 1dcc 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1dce 80EA0000 	    eor r0,r0 
  75 1dd2 C5F25050 	    movt r0,#0x5550 
  76 1dd6 40EA0100 	    orr r0,r1 
  77 1dda 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1ddc 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1dde F61C0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1dec 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1df4 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 80


  88 1df8 4FF00002 	    mov r2,#0 
  89 1dfc 00B5FEF7 	    _CALL gpio_out 
  89      25FD5DF8 
  89      04EB
  90 1e06 01F061B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1e0a E21D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1e18 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1e20 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1e22 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1e26 FBD1     	    bne 1b 
 102 1e28 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1e30 4FF00401 	    mov r1,#PIN_F_SC 
 104 1e34 4FF00102 	    mov r2,#1 
 105 1e38 00B5FEF7 	    _CALL gpio_out 
 105      07FD5DF8 
 105      04EB
 106 1e42 01F043B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1e46 0E1E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1e54 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1e5c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1e5e 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1e62 FBD0     	    beq 0b 
 118 1e64 6FF00001 	    mvn T1,#0 
 119 1e68 0173     	    strb T1,[T0,#SPI_DR]
 120 1e6a 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1e6c 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1e70 FBD0     	    beq 1b     
 123              	2:  
 124 1e72 47F8046D 	    _PUSH 
 125 1e76 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1e78 01F028B8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
ARM GAS  forth.s 			page 81


 132              	*************************/
 133 1e7c 4A1E0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1e88 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1e90 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1e92 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1e96 FBD0     	    beq 0b 
 138 1e98 0673     	    strb TOS,[T0,#SPI_DR]
 139 1e9a 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1e9c 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1ea0 FBD0     	    beq 1b 
 142 1ea2 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1ea4 57F8046B 	    _POP 
 144 1ea8 01F010B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1eac 801E0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1eb8 504700BF 	    _NEST 
 153 1ebc ED1D0000 	    _ADR CHIP_SEL 
 154 1ec0 F3300000 	    _DOLIT 4
 154      04000000 
 155 1ec8 891E0000 	    _ADR WR_BYTE
 156 1ecc 191E0000 	    _ADR CHIP_DSEL
 157 1ed0 D32E0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1ed4 B01E0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1ee0 504700BF 	    _NEST 
 165 1ee4 ED1D0000 	    _ADR CHIP_SEL 
 166 1ee8 F3300000 	    _DOLIT 6 
 166      06000000 
 167 1ef0 891E0000 	    _ADR WR_BYTE 
 168 1ef4 191E0000 	    _ADR CHIP_DSEL 
 169 1ef8 D32E0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1efc D81E0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1f08 504700BF 	    _NEST
 177 1f0c ED1D0000 	    _ADR CHIP_SEL  
ARM GAS  forth.s 			page 82


 178 1f10 F3300000 	    _DOLIT sr_cmd 
 178      301F0000 
 179 1f18 E9330000 	    _ADR PLUS 
 180 1f1c A9310000 	    _ADR CAT
 181 1f20 891E0000 	    _ADR WR_BYTE
 182 1f24 551E0000 	    _ADR RD_BYTE
 183 1f28 191E0000 	    _ADR CHIP_DSEL  
 184 1f2c D32E0000 	    _UNNEST 
 185 1f30 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1f33 001F0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1f40 504700BF 	    _NEST 
 193 1f44 AD320000 	    _ADR DUPP 
 194 1f48 F3300000 	    _DOLIT 16
 194      10000000 
 195 1f50 C1330000 	    _ADR RSHIFT 
 196 1f54 891E0000 	    _ADR WR_BYTE 
 197 1f58 AD320000 	    _ADR DUPP
 198 1f5c F3300000 	    _DOLIT 8 
 198      08000000 
 199 1f64 C1330000 	    _ADR RSHIFT 
 200 1f68 891E0000 	    _ADR WR_BYTE 
 201 1f6c 891E0000 	    _ADR WR_BYTE 
 202 1f70 D32E0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1f74 371F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1f84 504700BF 	    _NEST 
 210 1f88 F3300000 	1:  _DOLIT 0 
 210      00000000 
 211 1f90 091F0000 	    _ADR RD_SR 
 212 1f94 F3300000 	    _DOLIT 3 
 212      03000000 
 213 1f9c 69330000 	    _ADR ANDD 
 214 1fa0 33310000 	    _QBRAN 2f
 214      B01F0000 
 215 1fa8 5B310000 	    _BRAN 1b
 215      881F0000 
 216 1fb0 D32E0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
ARM GAS  forth.s 			page 83


 222              	***************************/
 223 1fb4 781F0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1fc4 504700BF 	    _NEST 
 225 1fc8 E11E0000 	    _ADR WR_ENBL
 226 1fcc ED1D0000 	    _ADR CHIP_SEL 
 227 1fd0 F3300000 	    _DOLIT 0x20 
 227      20000000 
 228 1fd8 891E0000 	    _ADR WR_BYTE 
 229 1fdc 411F0000 	    _ADR SEND_ADR
 230 1fe0 191E0000 	    _ADR CHIP_DSEL 
 231 1fe4 851F0000 	    _ADR WAIT_DONE 
 232 1fe8 D32E0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1fec B81F0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1ffc 504700BF 	    _NEST 
 240 2000 E11E0000 	    _ADR WR_ENBL 
 241 2004 ED1D0000 	    _ADR CHIP_SEL
 242 2008 F3300000 	    _DOLIT 0x60
 242      60000000 
 243 2010 F3300000 	    _DOLIT 0xC7 
 243      C7000000 
 244 2018 891E0000 	    _ADR WR_BYTE 
 245 201c 891E0000 	    _ADR WR_BYTE 
 246 2020 191E0000 	    _ADR CHIP_DSEL 
 247 2024 851F0000 	    _ADR WAIT_DONE
 248 2028 D32E0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 202c F01F0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 2038 504700BF 	    _NEST
 258 203c ED1D0000 	    _ADR CHIP_SEL 
 259 2040 F3300000 	    _DOLIT 3 
 259      03000000 
 260 2048 891E0000 	    _ADR WR_BYTE 
 261 204c 411F0000 	    _ADR SEND_ADR
 262 2050 19320000 	    _ADR TOR   
 263 2054 5B310000 	    _BRAN 2f
 263      6C200000 
 264 205c 551E0000 	1:  _ADR RD_BYTE
 265 2060 ED320000 	    _ADR OVER 
ARM GAS  forth.s 			page 84


 266 2064 95310000 	    _ADR CSTOR
 267 2068 45340000 	    _ADR ONEP 
 268 206c 15310000 	2:  _DONXT 1b
 268      5C200000 
 269 2074 8D320000 	    _ADR DROP 
 270 2078 191E0000 	    _ADR CHIP_DSEL 
 271 207c D32E0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 2080 30200000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 208c 504700BF 	    _NEST 
 280 2090 E11E0000 	    _ADR WR_ENBL
 281 2094 ED1D0000 	    _ADR CHIP_SEL
 282 2098 F3300000 	    _DOLIT 2 
 282      02000000 
 283 20a0 891E0000 	    _ADR WR_BYTE 
 284 20a4 411F0000 	    _ADR SEND_ADR
 285 20a8 19320000 	    _ADR TOR
 286 20ac 5B310000 	    _BRAN 2f 
 286      CC200000 
 287 20b4 AD320000 	1:  _ADR DUPP 
 288 20b8 A9310000 	    _ADR CAT 
 289 20bc AD320000 	    _ADR DUPP 
 290 20c0 59480000 	    _ADR HDOT
 291 20c4 891E0000 	    _ADR WR_BYTE 
 292 20c8 45340000 	    _ADR ONEP
 293 20cc 15310000 	2:  _DONXT 1b 
 293      B4200000 
 294 20d4 8D320000 	    _ADR DROP
 295 20d8 191E0000 	    _ADR CHIP_DSEL
 296 20dc 851F0000 	    _ADR WAIT_DONE 
 297 20e0 D32E0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 20e4 84200000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
ARM GAS  forth.s 			page 85


 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 20f4 504700BF 	    _NEST 
 318              	    
 319 20f8 D32E0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 20fc E8200000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 210c 504700BF 	    _NEST 
 327              	
 328 2110 D32E0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 2114 00210000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 211c 504700BF 	    _NEST 
 336              	
 337 2120 D32E0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 2124 18210000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 2130 504700BF 	    _NEST 
 345              	
 346 2134 D32E0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 2138 28210000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 2144 504700BF 	    _NEST 
 354              	
 355 2148 D32E0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 86


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/***********************************
  21              	    block words set 
  22              	    according to Forth 2012 standard
  23              	    see forth-2012.pdf in docs 
  24              	************************************/
  25              	
  26              	/**************************************************************************************************
  27              	                                    EXCERPT from forth-2012.pdf chapter 7 
  28              	
  29              	7.2 Additional terms
  30              	
  31              	block: 1024 characters of data on mass storage, designated by a block number.
  32              	
  33              	block buffer: A block-sized region of data space where a block is made temporarily available for us
  34              	current block buffer is the block buffer most recently accessed by BLOCK, BUFFER, LOAD, LIST,
  35              	or THRU.
  36              	
  37              	NOTE:  these blocks will be stored on the flash memory on board of BLACK PILL. 
  38              	
  39              	***************************************************************************************************
  40              	
  41              	
  42              	/*****************************
  43              	    BLK ( -- a-addr )
  44              	    address of system variable 
  45              	    containing the active 
  46              	    block #
  47              	******************************/
  48 214c 3C210000 	    _HEADER BLK,3,"BLK"
  48      03424C4B 
  49 2154 47F8046D 	    _PUSH 
  50 2158 2646     	    MOV     TOS,UP 
  51 215a 06F1B806 	    ADD TOS,#BLKID
  52 215e 00F0B5BE 	    _NEXT 
  53              	
  54              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
ARM GAS  forth.s 			page 87


   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 2162 5F708930 	     .word  0x3089705F // 1e-9
  34 2166 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 216a 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 216e BD378635 	     .word  0x358637BD // 1e-6 
  37 2172 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 2176 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 217a 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 217e 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 2182 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 2186 0000803F 	     .word  0x3F800000 // 1.0 
  44 218a 00002041 	     .word  0x41200000 // 1e1 
  45 218e 0000C842 	     .word  0x42C80000 // 1e2 
  46 2192 00007A44 	     .word  0x447A0000 // 1e3 
  47 2196 00401C46 	     .word  0x461C4000 // 1e4 
  48 219a 0050C347 	     .word  0x47C35000 // 1e5 
  49 219e 00247449 	     .word  0x49742400 // 1e6 
  50 21a2 8096184B 	     .word  0x4B189680 // 1e7
  51 21a6 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 21aa 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 21ae 50210000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      3130
  60 21b8 4FEA8606 	    lsl TOS,#2  
  61 21bc FF48     	    ldr t0, =p10 
ARM GAS  forth.s 			page 88


  62 21be 0644     	    add TOS,TOS,T0
  63 21c0 3668     	    ldr TOS,[TOS]  
  64 21c2 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 21c6 DFF8F803 	   ldr.w r0,=CPACR 
  73 21ca 0168     	   ldr R1,[R0]
  74 21cc 41F47001 	   orr r1,r1,#(0xf<<20)
  75 21d0 0160     	   str r1,[r0]
  76 21d2 BFF34F8F 	   dsb 
  77 21d6 FB48     	   ldr r0,=FPC_BASE_ADR
  78 21d8 81EA0101 	   eor r1,r1 
  79 21dc 0160     	   str r1,[r0,FPCCR]
  80 21de BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 21e2 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 21e4 B2210000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 21ec 4FF05100 	    mov r0,#FPU_IRQ 
  92 21f0 00B5FEF7 	    _CALL nvic_disable_irq
  92      A7FA5DF8 
  92      04EB
  93 21fa 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 21fe E8210000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 2208 4FF05100 	    mov r0,#FPU_IRQ
 102 220c 00B5FEF7 	    _CALL nvic_enable_irq
 102      84FA5DF8 
 102      04EB
 103 2216 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 221a 02220000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
ARM GAS  forth.s 			page 89


 110      4352
 111 2224 47F8046D 	   _PUSH 
 112 2228 F1EE106A 	   vmrs TOS,FPSCR
 113 222c BFF34F8F 	   dsb  
 114 2230 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 2234 1E220000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 2244 F1EE100A 	   vmrs T0,FPSCR 
 125 2248 BFF34F8F 	   dsb 
 126 224c 06EA0006 	   and TOS,T0  
 127 2250 E1EE106A 	   vmsr FPSCR,TOS 
 128 2254 BFF34F8F 	   dsb 
 129 2258 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 225c 38220000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 2264 00EE106A 	    vmov.f32 S0,TOS 
 138 2268 57F8046B 	    _POP 
 139 226c 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2270 60220000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 2278 00EE906A 	    vmov.f32 S1,TOS 
 147 227c 57F8046B 	    _POP 
 148 2280 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 2284 74220000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 228c 01EE106A 	    vmov.f32 S2,TOS 
 156 2290 57F8046B 	    _POP 
 157 2294 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
ARM GAS  forth.s 			page 90


 161              	    push fpu S0 
 162              	*******************************/
 163 2298 88220000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 22a0 47F8046D 	    _PUSH 
 165 22a4 10EE106A 	    vmov.f32 TOS,S0 
 166 22a8 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 22ac 9C220000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 22b4 47F8046D 	    _PUSH 
 174 22b8 10EE906A 	    vmov.f32 TOS,S1 
 175 22bc 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 22c0 B0220000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 22c8 47F8046D 	    _PUSH 
 183 22cc 11EE106A 	    vmov.f32 TOS,S2 
 184 22d0 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 22d4 C4220000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 22dc 00EE106A 	    vmov.f32 S0,TOS
 194 22e0 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 22e4 10EE106A 	    vmov.f32 TOS,s0 
 196 22e8 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 22ec D8220000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 22f8 00EE106A 	    vmov.f32 S0,TOS 
 204 22fc BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 2300 10EE106A 	    vmov.f32 TOS,S0 
 206 2304 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
ARM GAS  forth.s 			page 91


 212 2308 F0220000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 2310 00EE106A 	    vmov.f32 S0,TOS
 214 2314 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2318 10EE106A 	    vmov.f32 TOS,s0 
 216 231c 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2320 0C230000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2328 00EE106A 	   vmov.f32 s0,TOS 
 224 232c 57F8046B 	   _POP 
 225 2330 00EE906A 	   vmov.f32 s1,TOS 
 226 2334 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2338 10EE106A 	   vmov.f32 TOS,s0
 228 233c 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2340 24230000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2348 00EE106A 	   vmov.f32 s0,TOS 
 237 234c 57F8046B 	   _POP 
 238 2350 00EE906A 	   vmov.f32 s1,TOS 
 239 2354 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2358 10EE106A 	   vmov.f32 TOS,s0
 241 235c 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2360 44230000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2368 00EE106A 	   vmov.f32 s0,TOS 
 251 236c 57F8046B 	   _POP 
 252 2370 00EE906A 	   vmov.f32 s1,TOS 
 253 2374 20EE800A 	   vmul.f32 s0,s1,s0 
 254 2378 10EE106A 	   vmov.f32 TOS,s0
 255 237c 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 2380 64230000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 2388 00EE106A 	   vmov.f32 s0,TOS 
ARM GAS  forth.s 			page 92


 264 238c 57F8046B 	   _POP 
 265 2390 00EE906A 	   vmov.f32 s1,TOS 
 266 2394 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 2398 10EE106A 	   vmov.f32 TOS,s0
 268 239c 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 23a0 84230000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 23ac 00EE106A 	    vmov.f32 s0,TOS 
 277 23b0 B1EE400A 	    vneg.f32 S0,S0 
 278 23b4 10EE106A 	    vmov.f32 TOS,S0    
 279 23b8 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 23bc A4230000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 23c8 80EA0000 	    eor T0,T0 
 287 23cc 6FEA0000 	    mvn T0,T0 
 288 23d0 4FEA5000 	    lsr T0,#1 
 289 23d4 06EA0006 	    and TOS,T0 
 290 23d8 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 23dc C0230000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 23e8 00EE106A 	     vmov.f32 s0,TOS 
 299 23ec B1EEC00A 	     vsqrt.f32 s0,s0 
 300 23f0 10EE106A 	     vmov.f32 TOS,s0 
 301 23f4 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 23f8 E0230000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 2400 00EE106A 	    vmov.f32 s0,TOS 
 309 2404 B5EE400A 	    vcmp.f32 s0, #0.0 
 310 2408 F1EE106A 	    vmrs TOS,FPSCR
 311 240c BFF34F8F 	    dsb  
 312 2410 4FEAE676 	    asr TOS,#31   
 313 2414 00F05ABD 	    _NEXT 
ARM GAS  forth.s 			page 93


 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2418 FC230000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2420 504700BF 	    _NEST 
 321 2424 49230000 	    _ADR FSUBB
 322 2428 01240000 	    _ADR FZLESS
 323 242c 7D360000 	    _ADR INVER     
 324 2430 D32E0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 2434 1C240000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 243c 504700BF 	    _NEST 
 332 2440 49230000 	    _ADR FSUBB 
 333 2444 01240000 	    _ADR FZLESS
 334 2448 D32E0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 244c 38240000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2458 504700BF 	    _NEST 
 342 245c ED320000 	   _ADR OVER 
 343 2460 ED320000 	   _ADR OVER 
 344 2464 21240000 	   _ADR FGREAT 
 345 2468 33310000 	   _QBRAN 1f 
 345      74240000 
 346 2470 BD320000 	   _ADR SWAP  
 347 2474 8D320000 	1: _ADR DROP 
 348 2478 D32E0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 247c 50240000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 2488 504700BF 	    _NEST 
 355 248c ED320000 	    _ADR OVER 
 356 2490 ED320000 	    _ADR OVER 
 357 2494 3D240000 	    _ADR FLESS 
 358 2498 33310000 	    _QBRAN 1f
 358      A4240000 
 359 24a0 BD320000 	    _ADR SWAP   
 360 24a4 8D320000 	1:  _ADR DROP 
 361 24a8 D32E0000 	    _UNNEST 
 362              	
ARM GAS  forth.s 			page 94


 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 24ac 80240000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 24b8 80EA0000 	    eor T0,T0 
 370 24bc C8F20000 	    movt T0,#0X8000
 371 24c0 06EA0006 	    and TOS,T0
 372 24c4 4FEAE676 	    asr TOS,#31  
 373 24c8 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 24cc B0240000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 24d8 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 24e0 06EA0006 	    and TOS,T0 
 382 24e4 4FEAD656 	    lsr TOS,#23
 383 24e8 A6F17F06 	    sub TOS,#127 
 384 24ec 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 24f0 D0240000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 24fc 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 2504 06EA0006 	    AND TOS,T0 
 393 2508 80EA0000 	    EOR T0,T0 
 394 250c C0F28000 	    MOVT T0,0x80
 395 2510 46EA0006 	    ORR TOS,T0 
 396 2514 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 2518 F4240000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2520 47F8046D 	    _PUSH 
 405 2524 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 252c 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
ARM GAS  forth.s 			page 95


 410              	    2.0 natural logarithm
 411              	********************************/
 412 2530 1C250000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2538 47F8046D 	    _PUSH 
 414 253c 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 2544 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2548 34250000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 2554 47F8046D 	    _PUSH 
 423 2558 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2560 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2564 4C250000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2570 47F8046D 	    _PUSH 
 433 2574 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 257c 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 2580 68250000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 258c 504700BF 	    _NEST
 443 2590 D9240000 	    _ADR FEXP 
 444 2594 11230000 	    _ADR STOF 
 445 2598 71250000 	    _ADR LOG2
 446 259c 69230000 	    _ADR FSTAR 
 447 25a0 F9220000 	    _ADR TRUNC  
 448 25a4 AD320000 	    _ADR DUPP 
 449 25a8 1D330000 	    _ADR ZLESS 
 450 25ac 33310000 	    _QBRAN 1f 
 450      B8250000 
 451 25b4 55340000 	    _ADR ONEM
 452 25b8 D32E0000 	1:  _UNNEST 
 453 25bc 86210000 	
 453      88ED00E0 
 453      34EF00E0 
ARM GAS  forth.s 			page 96


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 25c8 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 25cc 0000C842 	            .word  0x42C80000  // 100.0
  31 25d0 00401C46 	            .word  0x461C4000  // 10000.0 
  32 25d4 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 25d8 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 25dc AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 25e0 504700BF 	    _NEST 
  45 25e4 F3300000 	    _DOLIT 2 
  45      02000000 
  46 25ec D9330000 	    _ADR LSHIFT 
  47 25f0 F3300000 	    _DOLIT p10p2n 
  47      C8250000 
  48 25f8 E9330000 	    _ADR PLUS 
  49 25fc 89310000 	    _ADR AT 
  50 2600 D32E0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
ARM GAS  forth.s 			page 97


  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2604 504700BF 	    _NEST 
  59 2608 F3300000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2610 F3300000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2618 C53E0000 	    _ADR PICK  // idx f e 1 idx 
  62 261c D9330000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2620 69330000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2624 D32E0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2628 504700BF 	    _NEST 
  78 262c 19320000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2630 E9310000 	    _ADR RAT   // idx f e R: e 
  81 2634 05260000 	    _ADR bit_state // idx f state 
  82 2638 33310000 	    _QBRAN 1f   // bit reset 
  82      4C260000 
  83 2640 ED320000 	    _ADR OVER 
  84 2644 E1250000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2648 89230000 	    _ADR FSLH  // idx f R: e 
  86 264c BD320000 	1:  _ADR SWAP  // f idx R: e 
  87 2650 45340000 	    _ADR ONEP   // F idx++ R: e 
  88 2654 BD320000 	    _ADR SWAP   // idx f  
  89 2658 ED320000 	    _ADR OVER   // idx f idx 
  90 265c F3300000 	    _DOLIT 5 
  90      05000000 
  91 2664 BD370000 	    _ADR GREAT  // idx > 5
  92 2668 33310000 	    _QBRAN div_loop 
  92      30260000 
  93 2670 B5310000 	    _ADR RFROM 
  94 2674 8D320000 	    _ADR DROP 
  95 2678 D32E0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
ARM GAS  forth.s 			page 98


 108 267c 504700BF 	    _NEST 
 109 2680 19320000 	    _ADR TOR 
 110              	mult_loop:
 111 2684 E9310000 	    _ADR RAT   // idx f e R: e 
 112 2688 05260000 	    _ADR bit_state // idx f state 
 113 268c 33310000 	    _QBRAN 1f   // bit reset 
 113      A0260000 
 114 2694 ED320000 	    _ADR OVER  
 115 2698 E1250000 	    _ADR p10p2at // idx f pwr10 R: e
 116 269c 69230000 	    _ADR FSTAR  // idx f R: e 
 117 26a0 BD320000 	1:  _ADR SWAP  // f idx R: e 
 118 26a4 45340000 	    _ADR ONEP   // F idx++ R: e 
 119 26a8 BD320000 	    _ADR SWAP   // idx f  
 120 26ac ED320000 	    _ADR OVER   // idx f idx 
 121 26b0 F3300000 	    _DOLIT 5 
 121      05000000 
 122 26b8 BD370000 	    _ADR GREAT  // idx > 5
 123 26bc 33310000 	    _QBRAN mult_loop 
 123      84260000 
 124 26c4 B5310000 	    _ADR RFROM 
 125 26c8 8D320000 	    _ADR DROP 
 126 26cc D32E0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 26d0 504700BF 	    _NEST 
 136 26d4 ED320000 	    _ADR OVER  // e f e 
 137 26d8 33310000 	    _QBRAN 3f // exp==0,  done 
 137      14270000 
 138 26e0 F3300000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 26e8 A5350000 	    _ADR NROT // idx e f
 140 26ec BD320000 	    _ADR SWAP // idx f e   
 141 26f0 AD320000 	    _ADR DUPP  // idx f e e 
 142 26f4 1D330000 	    _ADR ZLESS
 143 26f8 33310000 	    _QBRAN pos_exp 
 143      10270000 
 144              	// negative exponent 
 145 2700 A1360000 	    _ADR ABSS 
 146 2704 29260000 	    _ADR mant_div 
 147 2708 5B310000 	    _BRAN 3f 
 147      14270000 
 148              	pos_exp: // positive exponent 
 149 2710 7D260000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2714 BD320000 	3:  _ADR SWAP 
 152 2718 8D320000 	    _ADR DROP 
 153 271c D32E0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
ARM GAS  forth.s 			page 99


 158              	*********************************/
 159              	integer:
 160 2720 504700BF 	    _NEST 
 161 2724 F3300000 	    _DOLIT 0 
 161      00000000 
 162 272c AD320000 	    _ADR DUPP 
 163 2730 D1320000 	    _ADR DSWAP // 0 0 a cnt 
 164 2734 6D430000 	    _ADR TONBR // d a+ cnt- 
 165 2738 2D320000 	    _ADR DTOR 
 166 273c 8D320000 	    _ADR DROP // drop hi word 
 167 2740 C9310000 	    _ADR DRFROM // i a+ cnt-  
 168 2744 91350000 	    _ADR ROT  // a+ cnt- i
 169 2748 11230000 	    _ADR STOF 
 170 274c D32E0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 2750 504700BF 	    _NEST 
 180 2754 AD320000 	    _ADR DUPP 
 181 2758 19320000 	    _ADR TOR 
 182 275c F3300000 	    _DOLIT 0
 182      00000000 
 183 2764 AD320000 	    _ADR DUPP
 184 2768 D1320000 	    _ADR DSWAP 
 185 276c 6D430000 	    _ADR TONBR // -- d a+ cnt-  
 186 2770 D1320000 	    _ADR DSWAP  // a+ cnt- d
 187 2774 8D320000 	    _ADR DROP   // a+ cnt- i 
 188 2778 11230000 	    _ADR STOF  // convert integer to float 
 189 277c B5310000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 2780 F3300000 	    _DOLIT 2 
 190      02000000 
 191 2788 C53E0000 	    _ADR  PICK  
 192 278c F9330000 	    _ADR SUBB 
 193 2790 F3300000 	    _DOLIT 9 
 193      09000000 
 194 2798 F1370000 	    _ADR MIN 
 195 279c B9210000 	    _ADR PWR10
 196 27a0 89230000 	    _ADR FSLH  // a+ cnt- fdec 
 197 27a4 D32E0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 27a8 504700BF 	    _NEST 
 206 27ac 03440000 	    _ADR NEGQ 
 207 27b0 19320000 	    _ADR TOR 
 208 27b4 F3300000 	    _DOLIT 0 
 208      00000000 
 209 27bc AD320000 	    _ADR DUPP 
ARM GAS  forth.s 			page 100


 210 27c0 D1320000 	    _ADR DSWAP // 0 0 a cnt  
 211 27c4 6D430000 	    _ADR TONBR // d a cnt   
 212 27c8 D1320000 	    _ADR DSWAP
 213 27cc 8D320000 	    _ADR DROP  // hi word 
 214 27d0 B5310000 	    _ADR RFROM 
 215 27d4 33310000 	    _QBRAN 1f 
 215      E0270000 
 216 27dc 91360000 	    _ADR NEGAT 
 217              	1:  
 218 27e0 D32E0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 27e4 84250000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 27f0 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 27f4 09390000 	    _ADR BASE 
 231 27f8 89310000 	    _ADR AT 
 232 27fc 19320000 	    _ADR TOR 
 233              	    // use decimal base  
 234 2800 E1420000 	    _ADR DECIM 
 235 2804 F3300000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 280c ED320000 		_ADR	OVER   // a 0 a     R: base
 237 2810 5D380000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 2814 03440000 	    _ADR   NEGQ
 240 2818 19320000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 281c AD320000 	    _ADR   DUPP 
 242 2820 19320000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 2824 21270000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 2828 ED320000 	    _ADR  OVER  
 245 282c B5310000 	    _ADR  RFROM  
 246 2830 31370000 	    _ADR  EQUAL
 247 2834 BD320000 	    _ADR  SWAP
 248 2838 19320000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 283c 47310000 	    _TBRAN expect_dot  
 249      74280000 
 250              	// must be '.' or 'E'     
 251 2844 F3300000 	    _DOLIT '.' 
 251      2E000000 
 252 284c E1430000 	    _ADR CHARQ
 253 2850 47310000 	    _TBRAN get_fraction  
 253      88280000 
 254 2858 F3300000 	    _DOLIT 'E'
 254      45000000 
 255 2860 E1430000 	    _ADR  CHARQ 
 256 2864 47310000 	    _TBRAN get_exponent 
 256      DC280000 
 257 286c 5B310000 	    _BRAN error2
ARM GAS  forth.s 			page 101


 257      30290000 
 258              	expect_dot:
 259 2874 F3300000 	    _DOLIT '.' 
 259      2E000000 
 260 287c E1430000 	    _ADR CHARQ 
 261 2880 33310000 	    _QBRAN error2
 261      30290000 
 262              	get_fraction:
 263 2888 ED320000 	    _ADR OVER 
 264 288c A9310000 	    _ADR CAT 
 265 2890 F3300000 	    _DOLIT 10
 265      0A000000 
 266 2898 05430000 	    _ADR DIGTQ 
 267 289c BD320000 	    _ADR SWAP 
 268 28a0 8D320000 	    _ADR DROP 
 269 28a4 33310000 	    _QBRAN error2       
 269      30290000 
 270 28ac 51270000 	    _ADR decimals 
 271 28b0 19320000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 28b4 F3300000 	    _DOLIT 'E' 
 273      45000000 
 274 28bc E1430000 	    _ADR CHARQ
 275 28c0 47310000 	    _TBRAN get_exponent 
 275      DC280000 
 276 28c8 F3300000 	    _DOLIT fzero 
 276      00000000 
 277 28d0 19320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 28d4 5B310000 	    _BRAN build_float
 278      F0280000 
 279              	get_exponent: 
 280 28dc A9270000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 28e0 19320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 28e4 AD320000 	    _ADR DUPP 
 283 28e8 47310000 	    _TBRAN error4   // count must be 0 
 283      50290000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 28f0 B9350000 	    _ADR DDROP 
 286 28f4 B9350000 	    _ADR DDROP 
 287 28f8 B5310000 	    _ADR RFROM 
 288 28fc C9310000 	    _ADR DRFROM 
 289 2900 29230000 	    _ADR FPLUS 
 290 2904 D1260000 	    _ADR exp_adjust
 291 2908 B5310000 	    _ADR RFROM 
 292 290c 33310000 	    _QBRAN 1f 
 292      20290000 
 293 2914 F3300000 	    _DOLIT fminus1
 293      000080BF 
 294 291c 69230000 	    _ADR FSTAR 
 295 2920 F3300000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 2928 5B310000 	    _BRAN restore_base  
 296      64290000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 2930 B9350000 	    _ADR DDROP  
 299 2934 5B310000 	    _BRAN e4  
 299      5C290000 
ARM GAS  forth.s 			page 102


 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 293c B9350000 	    _ADR DDROP  // a 0 a R: base sign
 302 2940 B5310000 	    _ADR RFROM 
 303 2944 8D320000 	    _ADR DROP 
 304 2948 5B310000 	    _BRAN e4  
 304      5C290000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 2950 B9350000 	    _ADR DDROP 
 307 2954 C9310000 	    _ADR DRFROM 
 308 2958 B9350000 	    _ADR DDROP 
 309 295c C9310000 	e4: _ADR DRFROM 
 310 2960 B9350000 	    _ADR DDROP 
 311              	restore_base: 
 312 2964 B5310000 	    _ADR RFROM 
 313 2968 09390000 	    _ADR BASE 
 314 296c 75310000 	    _ADR STORE 
 315 2970 D32E0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2974 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2978 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 297c 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2980 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2984 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2988 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 298c BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2990 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2994 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
ARM GAS  forth.s 			page 103


  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2998 E8270000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 29a4 504700BF 	    _NEST
  50 29a8 F3300000 	    _DOLIT 1  
  50      01000000 
  51 29b0 D9370000 	    _ADR MAX  
  52 29b4 F3300000 	    _DOLIT 8
  52      08000000 
  53 29bc F1370000 	    _ADR MIN 
  54 29c0 F3300000 	    _DOLIT 2 
  54      02000000 
  55 29c8 D9330000 	    _ADR LSHIFT 
  56 29cc F3300000 	    _DOLIT rounding 
  56      74290000 
  57 29d4 E9330000 	    _ADR PLUS 
  58 29d8 89310000 	    _ADR AT   
  59 29dc 29230000 	    _ADR FPLUS 
  60 29e0 D32E0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 29e4 9C290000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 29ec 57F8040B 	    ldr T0,[DSP],#4
  69 29f0 3070     	    strb T0,[TOS]  
  70 29f2 06F10106 	    add TOS,#1
  71 29f6 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 29f8 504700BF 	    _NEST 
  81 29fc 19320000 	    _ADR TOR  // >R ( i r: b )
  82 2a00 393C0000 	    _ADR STOD // ( dbl r: b )
  83 2a04 AD320000 	    _ADR DUPP // ( dbl i r: b )
  84 2a08 19320000 	    _ADR TOR  // ( dbl r: b sign )
  85 2a0c 15360000 	    _ADR DABS 
  86 2a10 49410000 	    _ADR BDIGS 
  87 2a14 ED410000 	    _ADR DIGS 
  88 2a18 B5310000 	    _ADR RFROM 
  89 2a1c 21420000 	    _ADR SIGN 
ARM GAS  forth.s 			page 104


  90 2a20 49420000 	    _ADR EDIGS // ( -- p u )
  91 2a24 AD320000 	    _ADR DUPP  
  92 2a28 A5350000 	    _ADR NROT // -rot ( -- u p u )
  93 2a2c E9310000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2a30 BD320000 	    _ADR SWAP // ( -- u p b u )
  95 2a34 A53F0000 	    _ADR CMOVE // ( -- u ) 
  96 2a38 AD320000 	    _ADR DUPP  // ( -- u u )
  97 2a3c B5310000 	    _ADR RFROM // ( -- u u b )
  98 2a40 E9330000 	    _ADR PLUS  // ( -- u b+ )
  99 2a44 BD320000 	    _ADR SWAP  // ( -- b+ u )
 100 2a48 D32E0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2a4c E8290000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2a58 504700BF 	    _NEST 
 116 2a5c B9210000 	    _ADR PWR10 
 117 2a60 19320000 	    _ADR TOR  // f2 r: f1 
 118 2a64 F3300000 	    _DOLIT 0   // m 
 118      00000000 
 119 2a6c BD320000 	    _ADR SWAP  // m f2 
 120 2a70 AD320000 	1:  _ADR DUPP 
 121 2a74 E9310000 	    _ADR RAT 
 122 2a78 3D240000 	    _ADR FLESS
 123 2a7c 33310000 	    _QBRAN 2f
 123      A42A0000 
 124 2a84 F3300000 	    _DOLIT ten 
 124      00002041 
 125 2a8c 69230000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2a90 BD320000 	    _ADR SWAP
 128 2a94 55340000 	    _ADR ONEM 
 129 2a98 BD320000 	    _ADR SWAP 
 130 2a9c 5B310000 	    _BRAN 1b
 130      702A0000 
 131 2aa4 B5310000 	2:  _ADR RFROM 
 132 2aa8 8D320000 	    _ADR DROP 
 133 2aac BD320000 	    _ADR SWAP 
 134 2ab0 D32E0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
ARM GAS  forth.s 			page 105


 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 2ab4 502A0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 2ac4 504700BF 	    _NEST 
 150 2ac8 B9210000 	    _ADR PWR10
 151 2acc 19320000 	    _ADR TOR
 152 2ad0 F3300000 	    _DOLIT 0 
 152      00000000 
 153 2ad8 BD320000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2adc E9310000 	1:  _ADR RAT   
 155 2ae0 ED320000 	    _ADR OVER 
 156 2ae4 21240000 	    _ADR FGREAT 
 157 2ae8 47310000 	    _TBRAN 2f 
 157      102B0000 
 158 2af0 F3300000 	    _DOLIT ten 
 158      00002041 
 159 2af8 89230000 	    _ADR FSLH 
 160              	    // increment m 
 161 2afc BD320000 	    _ADR SWAP 
 162 2b00 45340000 	    _ADR ONEP 
 163 2b04 BD320000 	    _ADR SWAP 
 164 2b08 5B310000 	    _BRAN 1b   
 164      DC2A0000 
 165 2b10 B5310000 	2:  _ADR RFROM 
 166 2b14 8D320000 	    _ADR DROP
 167 2b18 BD320000 	    _ADR SWAP 
 168 2b1c D32E0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2b20 504700BF 	    _NEST
 183 2b24 BD320000 	    _ADR SWAP
 184 2b28 F9340000 	    _ADR QDUP    
 185 2b2c 33310000 	    _QBRAN 2f 
 185      502B0000 
 186 2b34 BD320000 	    _ADR SWAP 
 187 2b38 F3300000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2b40 BD320000 	    _ADR SWAP  
ARM GAS  forth.s 			page 106


 189 2b44 ED290000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2b48 F9290000 	    _ADR ITOA // ( i b -- b u )
 191 2b4c 8D320000 	    _ADR DROP // ( -- b+ )     
 192 2b50 D32E0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2b54 504700BF 	    _NEST
 208 2b58 F3300000 	    _DOLIT 2 
 208      02000000 
 209 2b60 C53E0000 	    _ADR PICK 
 210 2b64 1D330000 	    _ADR ZLESS 
 211 2b68 33310000 	    _QBRAN 1f 
 211      802B0000 
 212 2b70 19320000 	    _ADR TOR 
 213 2b74 8D320000 	    _ADR DROP 
 214 2b78 5B310000 	    _BRAN 2f 
 214      EC2B0000 
 215 2b80 F3300000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2b88 BD320000 	    _ADR SWAP 
 217 2b8c ED290000 	    _ADR CSTOP 
 218 2b90 19320000 	    _ADR TOR // >r ( d f r: b ) 
 219 2b94 BD320000 	1:  _ADR SWAP  
 220 2b98 F9340000 	    _ADR QDUP 
 221 2b9c 33310000 	    _QBRAN 2f
 221      EC2B0000 
 222 2ba4 55340000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 2ba8 BD320000 	    _ADR SWAP // swap ( -- d f r: b )
 224 2bac F3300000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 2bb4 69230000 	    _ADR FSTAR // f*
 226 2bb8 AD320000 	    _ADR DUPP  
 227 2bbc F9220000 	    _ADR TRUNC // d f i
 228 2bc0 AD320000 	    _ADR DUPP  // d f i i  
 229 2bc4 F3300000 	    _DOLIT '0' 
 229      30000000 
 230 2bcc E9330000 	    _ADR PLUS 
 231 2bd0 B5310000 	    _ADR RFROM // R> ( d f c b )
 232 2bd4 ED290000 	    _ADR CSTOP // ( d f i b+ )
 233 2bd8 19320000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2bdc 11230000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2be0 49230000 	    _ADR FSUBB 
 236 2be4 5B310000 	    _BRAN 1b 
 236      942B0000 
 237 2bec 8D320000 	2:  _ADR DROP 
ARM GAS  forth.s 			page 107


 238 2bf0 B5310000 	    _ADR RFROM 
 239 2bf4 D32E0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2bf8 504700BF 	    _NEST 
 257 2bfc 19320000 	    _ADR TOR // ( -- d f r: b )
 258 2c00 AD320000 	    _ADR DUPP 
 259 2c04 F3300000 	    _DOLIT fone 
 259      0000803F 
 260 2c0c 3D240000 	    _ADR FLESS 
 261 2c10 33310000 	    _QBRAN 1f
 261      702C0000 
 262 2c18 F3300000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2c20 592A0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2c24 A5350000 	    _ADR NROT
 265 2c28 ED320000 	    _ADR OVER 
 266 2c2c A5290000 	    _ADR ROUND
 267 2c30 AD320000 	    _ADR DUPP 
 268 2c34 F3300000 	    _DOLIT fone 
 268      0000803F 
 269 2c3c 3D240000 	    _ADR FLESS 
 270 2c40 33310000 	    _QBRAN 2f 
 270      7C2C0000 
 271              	    // first digit '0' 
 272 2c48 F3300000 	    _DOLIT '0' 
 272      30000000 
 273 2c50 B5310000 	    _ADR RFROM 
 274 2c54 ED290000 	    _ADR CSTOP 
 275 2c58 19320000 	    _ADR TOR 
 276              	    // decrement d 
 277 2c5c BD320000 	    _ADR SWAP 
 278 2c60 55340000 	    _ADR ONEM 
 279 2c64 BD320000 	    _ADR SWAP 
 280 2c68 B5310000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2c6c D32E0000 	    _UNNEST 
 282 2c70 ED320000 	1:  _ADR OVER 
 283 2c74 C52A0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2c78 A5350000 	    _ADR NROT   // m d f r: b 
 285 2c7c AD320000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2c80 F9220000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2c84 AD320000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2c88 19320000 	    _ADR TOR   // ( -- m d f i r: b i ) 
ARM GAS  forth.s 			page 108


 289 2c8c 11230000 	    _ADR STOF  // ( -- m d f f )
 290 2c90 49230000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2c94 B5310000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2c98 B5310000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2c9c F9290000 	    _ADR ITOA // -- m d f b u )
 294 2ca0 19320000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2ca4 91350000 	    _ADR ROT
 296 2ca8 B5310000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2cac F9330000 	    _ADR SUBB // ( -- m f b d- )
 298 2cb0 A5350000 	    _ADR NROT // ( -- m d f b )
 299 2cb4 D32E0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2cb8 B82A0000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2cc0 504700BF 	    _NEST 
 315 2cc4 ED320000 	    _ADR OVER  
 316 2cc8 D9240000 	    _ADR FEXP 
 317 2ccc F3300000 	    _DOLIT 128 
 317      80000000 
 318 2cd4 31370000 	    _ADR EQUAL 
 319 2cd8 33310000 	    _QBRAN 1f
 319      E82C0000 
 320 2ce0 5B310000 	    _BRAN nan 
 320      A42D0000 
 321 2ce8 AD320000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2cec 19320000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2cf0 A5340000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2cf4 BD320000 	    _ADR SWAP 
 326 2cf8 ED290000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2cfc ED320000 	    _ADR OVER 
 328 2d00 33310000 	    _QBRAN zdz // 0.0 
 328      542D0000 
 329              	    // check float sign 
 330 2d08 ED320000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2d0c B9240000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2d10 33310000 	    _QBRAN 1f  // 0branch 1f 
 332      342D0000 
 333              	    // negative number add '-' to buffer 
 334 2d18 BD320000 	    _ADR SWAP 
 335 2d1c C9230000 	    _ADR FABS 
 336 2d20 BD320000 	    _ADR SWAP 
 337 2d24 F3300000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2d2c BD320000 	    _ADR SWAP 
ARM GAS  forth.s 			page 109


 339 2d30 ED290000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2d34 F92B0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2d38 552B0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2d3c 212B0000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2d40 E9310000 	    _ADR RAT 
 344 2d44 F9330000 	    _ADR SUBB 
 345 2d48 B5310000 	    _ADR RFROM 
 346 2d4c BD320000 	    _ADR SWAP 
 347 2d50 D32E0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2d54 19320000 	     _ADR TOR 
 350 2d58 B9350000 	     _ADR DDROP
 351 2d5c B5310000 	     _ADR RFROM
 352 2d60 F3300000 	     _DOLIT '0'
 352      30000000 
 353 2d68 BD320000 	     _ADR SWAP 
 354 2d6c ED290000 	     _ADR CSTOP 
 355 2d70 F3300000 	     _DOLIT '.'
 355      2E000000 
 356 2d78 BD320000 	     _ADR SWAP 
 357 2d7c ED290000 	     _ADR CSTOP 
 358 2d80 F3300000 	     _DOLIT '0'
 358      30000000 
 359 2d88 BD320000 	     _ADR SWAP 
 360 2d8c ED290000 	     _ADR CSTOP 
 361 2d90 8D320000 	     _ADR DROP  
 362 2d94 B5310000 	     _ADR RFROM 
 363 2d98 F3300000 	     _DOLIT 4 
 363      04000000 
 364 2da0 D32E0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2da4 19320000 	    _ADR TOR   // ( d f r: b )
 367 2da8 BD320000 	    _ADR SWAP  // f d  
 368 2dac 8D320000 	    _ADR DROP  // f 
 369 2db0 A5340000 	    _ADR BLANK  // f c 
 370 2db4 E9310000 	    _ADR RAT    // f c b 
 371 2db8 ED290000 	    _ADR CSTOP  // f b+ 
 372 2dbc BD320000 	    _ADR SWAP   // b+ f 
 373 2dc0 FD240000 	    _ADR FMANT  // b+ mant
 374 2dc4 F3300000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2dcc 69330000 	    _ADR ANDD   
 376 2dd0 33310000 	    _QBRAN infinity 
 376      102E0000 
 377 2dd8 F3300000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2de0 BD320000 	    _ADR SWAP   // c b+
 379 2de4 ED290000 	    _ADR CSTOP  // b+
 380 2de8 F3300000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2df0 BD320000 	    _ADR SWAP   // c b+ 
 382 2df4 ED290000 	    _ADR CSTOP  // b+
 383 2df8 F3300000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2e00 BD320000 	    _ADR SWAP   // c b+ 
 385 2e04 ED290000 	    _ADR CSTOP  // b+
 386 2e08 5B310000 	    _BRAN 1f 
ARM GAS  forth.s 			page 110


 386      402E0000 
 387              	infinity:
 388 2e10 F3300000 	    _DOLIT 'I'
 388      49000000 
 389 2e18 BD320000 	    _ADR SWAP 
 390 2e1c ED290000 	    _ADR CSTOP 
 391 2e20 F3300000 	    _DOLIT 'N'
 391      4E000000 
 392 2e28 BD320000 	    _ADR SWAP 
 393 2e2c ED290000 	    _ADR CSTOP 
 394 2e30 F3300000 	    _DOLIT 'F'
 394      46000000 
 395 2e38 BD320000 	    _ADR SWAP 
 396 2e3c ED290000 	    _ADR CSTOP 
 397              	1:
 398 2e40 8D320000 	    _ADR DROP 
 399 2e44 B5310000 	    _ADR RFROM 
 400 2e48 F3300000 	    _DOLIT 4 
 400      04000000 
 401 2e50 D32E0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2e54 BC2C0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2e5c 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2e60 F3300000 	    _DOLIT 1 
 415      01000000 
 416 2e68 D9370000 	    _ADR MAX 
 417 2e6c F3300000 	    _DOLIT 7 
 417      07000000 
 418 2e74 F1370000 	    _ADR MIN
 419 2e78 BD320000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2e7c F93E0000 	    _ADR HERE
 422 2e80 19320000 	    _ADR TOR  
 423 2e84 F3300000 	    _DOLIT 16 
 423      10000000 
 424 2e8c 8D530000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2e90 E9310000 	    _ADR RAT 
 427 2e94 F3300000 	    _DOLIT 16 
 427      10000000 
 428 2e9c F3300000 	    _DOLIT 0 
 428      00000000 
 429 2ea4 31400000 	    _ADR FILL 
 430 2ea8 B5310000 	    _ADR RFROM // ( d f b )
 431 2eac C12C0000 	    _ADR FTOA 
 432 2eb0 8D450000 	    _ADR TYPEE 
ARM GAS  forth.s 			page 111


 433              	    // free buffer 
 434 2eb4 F3300000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2ebc 8D530000 	    _ADR ALLOT
 436 2ec0 D32E0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
ARM GAS  forth.s 			page 112


  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2ec4 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2ec8 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2ecc 5CF8045B 		LDR WP,[IP],#4 
  89 2ed0 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2ed2 58F804CB 		LDMFD RSP!,{IP}
  92 2ed6 5CF8045B 		LDR WP,[IP],#4 
  93 2eda 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2edc 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
ARM GAS  forth.s 			page 113


 106 2ee0 0968     		ldr T1,[T1]     // address in here   
 107 2ee2 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2ee6 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2eea 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2eee 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2ef2 04F14C02 		add T2,UP,#USER_CTOP 
 112 2ef6 1160     		str T1,[T2]  // save update HERE value 
 113 2ef8 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2efa 47F8046D 		_PUSH 
 119 2efe 04F11406 		ADD TOS,UP,#STDIN 
 120 2f02 E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2f04 47F8046D 		_PUSH 
 126 2f08 04F11806 		ADD TOS,UP,#STDOUT
 127 2f0c DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2f0e 582E0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2f18 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2f20 47F8046D 	    _PUSH 
 136 2f24 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2f26 81EA0101 	    eor T1,T1 
 138 2f2a 8162     	    str T1,[T0,#SCB_CFSR]
 139 2f2c CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2f2e 122F0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2f38 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2f40 47F8046D 		_PUSH 
 148 2f44 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2f46 81EA0101 	    eor T1,T1 
 150 2f4a 8163     	    str T1,[T0,#SCB_BFAR]
 151 2f4c BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
ARM GAS  forth.s 			page 114


 157 2f4e 322F0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 2f58 504700BF 		_NEST 
 159 2f5c FB2E0000 		_ADR TSTDIN // ' STDIN 
 160 2f60 853F0000 		_ADR ATEXE
 161 2f64 D32E0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2f68 522F0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2f70 504700BF 		_NEST
 169              	KEY1:
 170 2f74 C91C0000 		_ADR CAPS_LED 
 171 2f78 592F0000 		_ADR	QKEY 
 172 2f7c 33310000 		_QBRAN	KEY1
 172      742F0000 
 173              	/*  add this code to filter out control characters 	
 174              		_ADR    DUPP 
 175              		_DOLIT  13 
 176              		_ADR    EQUAL 
 177              		_TBRAN  KEY2 
 178              		_ADR    DUPP
 179              		_DOLIT  32 
 180              		_ADR    LESS 
 181              		_QBRAN  KEY2 
 182              		_ADR    DROP 
 183              		_BRAN   KEY1 
 184              	*/ 
 185              	KEY2: 	
 186 2f84 D32E0000 		_UNNEST
 187              	
 188              	/**********************************************
 189              		EMIT ( c -- )
 190              		transmit a character to console 
 191              	**********************************************/
 192 2f88 6C2F0000 		_HEADER EMIT,4,"EMIT"
 192      04454D49 
 192      540000BF 
 193 2f94 504700BF 		_NEST 
 194 2f98 052F0000 		_ADR TSTDOUT 
 195 2f9c 853F0000 		_ADR ATEXE 
 196 2fa0 D32E0000 		_UNNEST 
 197              	
 198              	
 199              	/************************************************
 200              	 GET-IP ( n - c )
 201              	 return interrupt priority of IRQn 
 202              	************************************************/
 203              	/*
 204              		_HEADER GETIP,6,"GET-IP" 
 205              		_NEST 
 206              		_ADR DUPP 
 207              		_ADR ZLESS
ARM GAS  forth.s 			page 115


 208              		_QBRAN 1f 
 209              		_DOLIT 15
 210              		_ADR ANDD
 211              		_DOLIT 4
 212              		_ADR SUBB  
 213              		_DOLIT 0xE000ED18 
 214              		_BRAN 2f 
 215              	1:	_DOLIT 0xE000E400 
 216              	2:	_ADR PLUS 
 217              		_ADR CAT
 218              		_DOLIT 4 
 219              		_ADR RSHIFT 
 220              		_UNNEST 
 221              	*/
 222              	
 223              	/***********************************************
 224              	 RANDOM ( n+ -- {0..n+ - 1} )
 225              	 return pseudo random number 
 226              	 REF: https://en.wikipedia.org/wiki/Xorshift
 227              	************************************************/
 228 2fa4 8C2F0000 		_HEADER RAND,6,"RANDOM"
 228      0652414E 
 228      444F4D00 
 229 2fb0 504700BF 		_NEST
 230 2fb4 A1360000 		_ADR ABSS   
 231 2fb8 AD380000 		_ADR SEED 
 232 2fbc 89310000 		_ADR AT 
 233 2fc0 AD320000 		_ADR DUPP 
 234 2fc4 F3300000 		_DOLIT 13
 234      0D000000 
 235 2fcc D9330000 		_ADR LSHIFT 
 236 2fd0 91330000 		_ADR XORR  
 237 2fd4 AD320000 		_ADR DUPP 
 238 2fd8 F3300000 		_DOLIT 17 
 238      11000000 
 239 2fe0 C1330000 		_ADR RSHIFT 
 240 2fe4 91330000 		_ADR XORR 
 241 2fe8 AD320000 		_ADR DUPP
 242 2fec F3300000 		_DOLIT 5 
 242      05000000 
 243 2ff4 D9330000 		_ADR LSHIFT 
 244 2ff8 91330000 		_ADR XORR  
 245 2ffc AD320000 		_ADR DUPP 
 246 3000 AD380000 		_ADR SEED 
 247 3004 75310000 		_ADR STORE 
 248 3008 F3300000 		_DOLIT 0x7FFFFFFF
 248      FFFFFF7F 
 249 3010 69330000 		_ADR ANDD 
 250 3014 BD320000 		_ADR SWAP 
 251 3018 813D0000 		_ADR MODD 
 252 301c D32E0000 		_UNNEST 
 253              	
 254              	
 255              	/****************************************
 256              	 MS ( u -- ) 
 257              	 suspend execution for u milliseconds
 258              	****************************************/
ARM GAS  forth.s 			page 116


 259 3020 A82F0000 		_HEADER PAUSE,2,"MS"
 259      024D5300 
 260 3028 504700BF 		_NEST 
 261 302c D9380000 		_ADR TIMER 
 262 3030 75310000 		_ADR STORE 
 263              	PAUSE_LOOP:
 264 3034 D9380000 		_ADR TIMER 
 265 3038 89310000 		_ADR AT 
 266 303c 33310000 		_QBRAN PAUSE_EXIT 
 266      4C300000 
 267 3044 5B310000 		_BRAN PAUSE_LOOP 
 267      34300000 
 268              	PAUSE_EXIT: 		
 269 304c D32E0000 		_UNNEST 
 270              	
 271              	/******************************************
 272              	  ULED ( T|F -- )
 273              	  control user LED, -1 ON, 0 OFF 
 274              	*******************************************/
 275 3050 24300000 		_HEADER ULED,4,"ULED"
 275      04554C45 
 275      440000BF 
 276 305c 4FF40050 		mov T0,#(1<<LED_PIN)
 277 3060 4FF40061 		_MOV32 T1,LED_GPIO 
 277      C4F20201 
 278 3068 3600     		movs TOS,TOS 
 279 306a 57F8046B 		_POP
 280 306e 03D0     		beq ULED_OFF
 281 3070 4FEA0040 		lsl T0,#16 
 282 3074 8861     		str T0,[T1,#GPIO_BSRR]
 283 3076 29E7     		_NEXT 
 284              	ULED_OFF:
 285 3078 8861     		str T0,[T1,#GPIO_BSRR]
 286 307a 27E7     		_NEXT    
 287              	
 288              	/**************************
 289              	   JOYSTK  ( -- u )
 290              	   read joystick port 
 291              	**************************/
 292 307c 54300000 		_HEADER JOYSTK,6,"JOYSTK"
 292      064A4F59 
 292      53544B00 
 293 3088 504700BF 		_NEST 
 294 308c F3300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 294      10000240 
 295 3094 89310000 		_ADR AT 
 296 3098 F3300000 		_DOLIT 0x100f 
 296      0F100000 
 297 30a0 69330000 		_ADR ANDD 
 298 30a4 D32E0000 		_UNNEST 
 299              	
 300              	/****************************
 301              		BEEP ( msec freq -- )
 302              	input:
 303              		freq  frequence hertz 
 304              		msec  durration in msec 
 305              	*****************************/
ARM GAS  forth.s 			page 117


 306 30a8 80300000 		_HEADER BEEP,4,"BEEP"
 306      04424545 
 306      500000BF 
 307 30b4 48F68050 		_MOV32 r0,6000000 // Fclk 
 307      C0F25B00 
 308 30bc B0FBF6F0 		udiv r0,r0,TOS
 309 30c0 57F8046B 		_POP  
 310 30c4 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 310      C4F20001 
 311 30cc C862     		str r0,[r1,#TIM_ARR]
 312 30ce 4FEA5000 		lsr r0,#1
 313 30d2 4863     		str r0,[r1,#TIM_CCR1]
 314 30d4 4FF00100 		mov r0,#1 
 315 30d8 0862     		str r0,[r1,#TIM_CCER]
 316 30da 0860     		str r0,[r1,#TIM_CR1]
 317 30dc C868     		ldr r0,[r1,#TIM_DIER]
 318 30de C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 319 30e2 57F8046B 		_POP
 320 30e6 F1E6     		_NEXT 
 321              	
 322              	
 323              	/***************
 324              	//  The kernel
 325              	***************/
 326              	
 327              	/********************
 328              	    NOP	( -- )
 329              	 	do nothing.
 330              	*********************/
 331 30e8 AC300000 		_HEADER NOP,3,"NOP"
 331      034E4F50 
 332 30f0 ECE6     		_NEXT
 333              		  
 334              	 
 335              	/********************
 336              	    doLIT	( -- w )
 337              	 	Push an inline literal.
 338              	hidden word used by compiler 
 339              	*********************/
 340              	DOLIT:
 341 30f2 47F8046D 		_PUSH				//  store TOS on data stack
 342 30f6 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 343 30fa E7E6     		_NEXT 
 344              	
 345              	/*******************************
 346              	    EXECUTE	( ca -- )
 347              	 	Execute the word at ca.
 348              	*******************************/
 349 30fc EC300000 		_HEADER EXECU,7,"EXECUTE"
 349      07455845 
 349      43555445 
 350 3108 46F00105 		ORR	WP,TOS,#1 
 351 310c 57F8046B 		_POP
 352 3110 2847     		BX WP 
 353 3112 DBE6     		_NEXT 
 354              	
 355              	/**********************************************************
ARM GAS  forth.s 			page 118


 356              	    donext	( -- ) counter on R:
 357              	 	Run time code for the single index loop.
 358              	 	: next ( -- ) \ hilevel model
 359              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 360              	hidden word used by compiler 	  
 361              	*********************************************************/
 362              	DONXT:
 363 3114 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 364 3118 22B9     		CBNZ T2,NEXT1 
 365              		/* loop done */
 366 311a 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 367 311e 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 368 3122 D3E6     		_NEXT
 369              	NEXT1:
 370              		/* decrement loop counter */
 371 3124 A2F10102 		SUB	T2,T2,#1
 372 3128 C8F80020 		STR	T2,[RSP]
 373 312c DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 374 3130 CCE6     		_NEXT 
 375              	
 376              	/**************************************
 377              	    ?branch	( f -- )
 378              	 	Branch if flag is zero.
 379              	hiddend word used by compiler
 380              	**************************************/
 381              	QBRAN:
 382 3132 3600     		MOVS	TOS,TOS
 383 3134 57F8046B 		_POP
 384 3138 02D1     		BNE	QBRAN1
 385 313a DCF800C0 		LDR	IP,[IP]
 386 313e C5E6     		_NEXT
 387              	QBRAN1:
 388 3140 0CF1040C 	 	ADD	IP,IP,#4
 389 3144 C2E6     		_NEXT
 390              	
 391              	/***********************************
 392              		tbranch ( f -- )
 393              	    branch if flag is true 
 394              	***********************************/
 395              	TBRAN:
 396 3146 3600     		MOVS TOS,TOS 
 397 3148 57F8046B 		_POP 
 398 314c 02D0     		BEQ 1f 
 399 314e DCF800C0 		LDR IP,[IP]
 400 3152 BBE6     		_NEXT 
 401 3154 0CF1040C 	1:  ADD IP,IP,#4
 402 3158 B8E6     		_NEXT 
 403              	
 404              	
 405              	/***********************************
 406              	    branch	( -- )
 407              	 	Branch to an inline address.
 408              	hidden word used by compiler 
 409              	***********************************/
 410              	BRAN:
 411 315a DCF800C0 		LDR	IP,[IP]
 412 315e B5E6     		_NEXT
ARM GAS  forth.s 			page 119


 413              	
 414              	/******************************************
 415              	    EXIT	(  -- )
 416              	 	Exit the currently executing command.
 417              	******************************************/
 418 3160 00310000 		_HEADER EXIT,4,"EXIT"
 418      04455849 
 418      540000BF 
 419 316c B1E6     		b UNNEST 
 420              	
 421              	
 422              	/***********************************
 423              	    !	   ( w a -- )
 424              	 	Pop the data stack to memory.
 425              	************************************/
 426 316e 64310000 		_HEADER STORE,1,"!"
 426      0121
 427 3174 57F8045B 		LDR	WP,[DSP],#4
 428 3178 3560     		STR	WP,[TOS]
 429 317a 57F8046B 		_POP
 430 317e A5E6     		_NEXT 
 431              	
 432              	/********************************************
 433              	    @	   ( a -- w )
 434              	 	Push memory location to the data stack.
 435              	*********************************************/
 436 3180 72310000 		_HEADER AT,1,"@"
 436      014000BF 
 437 3188 3668     		LDR	TOS,[TOS]
 438 318a 9FE6     		_NEXT 
 439              	
 440              	/*******************************************
 441              	    C!	  ( c b -- )
 442              	 	Pop the data stack to byte memory.
 443              	*******************************************/
 444 318c 84310000 		_HEADER CSTOR,2,"C!"
 444      02432100 
 445 3194 57F8045B 		LDR	WP,[DSP],#4
 446 3198 3570     		STRB WP,[TOS]
 447 319a 57F8046B 		_POP
 448 319e 95E6     		_NEXT
 449              	
 450              	/*********************************************
 451              	    C@	  ( b -- c )
 452              	 	Push byte memory location to the data stack.
 453              	**********************************************/
 454 31a0 90310000 		_HEADER CAT,2,"C@"
 454      02434000 
 455 31a8 3678     		LDRB	TOS,[TOS]
 456 31aa 8FE6     		_NEXT 
 457              	
 458              	
 459              	/*********************************************
 460              	    R>	  ( -- w  R: w -- ) 
 461              	 	push from rstack.
 462              	**********************************************/
 463 31ac A4310000 		_HEADER RFROM,2,"R>"
ARM GAS  forth.s 			page 120


 463      02523E00 
 464 31b4 47F8046D 		_PUSH
 465 31b8 58F8046B 		LDR	TOS,[RSP],#4
 466 31bc 86E6     		_NEXT 
 467              	
 468              	/***********************************************
 469              		2R> (  -- x1 x2 ) R: x1 x2 --  
 470              	    push a double from rstack 
 471              	***********************************************/
 472 31be B0310000 		_HEADER DRFROM,3,"2R>"
 472      0332523E 
 472      00BF
 473 31c8 47F8046D 		_PUSH 
 474 31cc D8F80460 		LDR TOS,[RSP,#CELLL] 
 475 31d0 47F8046D 		_PUSH 
 476 31d4 D8F80060 		LDR TOS,[RSP]
 477 31d8 08F10808 		ADD RSP,#2*CELLL 
 478 31dc 76E6     		_NEXT 
 479              	
 480              	/************************************************
 481              	    R@	  ( -- w )
 482              	 	Copy top of return stack to the data stack.
 483              	************************************************/
 484 31de C2310000 		_HEADER RAT,2,"R@"
 484      02524000 
 484      00BF
 485 31e8 47F8046D 		_PUSH
 486 31ec D8F80060 		LDR	TOS,[RSP]
 487 31f0 6CE6     		_NEXT 
 488              	
 489              	/***********************************************
 490              		2R@ ( -- x2 x1 ) ( R: x1 x2 -- ) 
 491              		Copy 2 element of return stack to data stack
 492              	***********************************************/
 493 31f2 E2310000 		_HEADER DRAT,3,"2R@"
 493      03325240 
 493      00BF
 494 31fc 47F8046D 		_PUSH 
 495 3200 D8F80460 		LDR TOS,[RSP,#CELLL] 
 496 3204 47F8046D 		_PUSH 
 497 3208 D8F80060 		LDR TOS,[RSP] 
 498 320c 5EE6     		_NEXT 
 499              	
 500              	
 501              	/***********************************************
 502              	    >R	  ( w -- ) R: -- w 
 503              	 	pop to rstack.
 504              	************************************************/
 505 320e F6310000 		_HEADER TOR,2,">R"
 505      023E5200 
 505      00BF
 506 3218 48F8046D 		STR	TOS,[RSP,#-CELLL]!
 507 321c 57F8046B 		_POP
 508 3220 54E6     		_NEXT
 509              	
 510              	/*********************************************
 511              		2>R ( x1 x2 -- ) R: -- x1 x2  
ARM GAS  forth.s 			page 121


 512              		pop a double to rstack 
 513              	*********************************************/
 514 3222 12320000 		_HEADER DTOR,3,"2>R"
 514      03323E52 
 514      00BF
 515 322c 57F8040B 		LDR T0, [DSP],#CELLL
 516 3230 48F8040D 		STR T0,[RSP,#-CELLL]!
 517 3234 48F8046D 	 	STR TOS,[RSP,#-CELLL]!
 518 3238 57F8046B 		_POP  
 519 323c 46E6     		_NEXT 	
 520              	
 521              	
 522              	/*******************************
 523              	//	RP! ( u -- )
 524              	// initialize RPP with u 
 525              	*******************************/
 526 323e 26320000 		_HEADER RPSTOR,3,"RP!"
 526      03525021 
 526      00BF
 527 3248 B046     		MOV RSP,TOS 
 528 324a 57F8046B 		_POP  
 529 324e 3DE6     		_NEXT 
 530              	
 531              	/********************************
 532              		SP! ( u -- )
 533              	 initialize SPP with u 
 534              	********************************/
 535 3250 42320000 		_HEADER SPSTOR,3,"SP!"
 535      03535021 
 536 3258 3746     		MOV DSP,TOS 
 537 325a 86EA0606 		EOR TOS,TOS,TOS 
 538 325e 35E6     		_NEXT 
 539              	
 540              	/**************************************
 541              	    SP@	 ( -- a )
 542              	 	Push the current data stack pointer.
 543              	***************************************/
 544 3260 54320000 		_HEADER SPAT,3,"SP@"
 544      03535040 
 545 3268 47F8046D 		_PUSH
 546 326c 3E46     		MOV	TOS,DSP
 547 326e 2DE6     		_NEXT
 548              	
 549              	/**************************************
 550              	   RP@ ( -- a )
 551              	   push current rstack pointer 
 552              	**************************************/
 553 3270 64320000 		_HEADER RPAT,3,"RP@"
 553      03525040 
 554 3278 47F8046D 		_PUSH 
 555 327c 4646     		MOV TOS,RSP 
 556 327e 25E6     		_NEXT 
 557              	
 558              	/********************************
 559              	    DROP	( w -- )
 560              	 	Discard top stack item.
 561              	********************************/
ARM GAS  forth.s 			page 122


 562 3280 74320000 		_HEADER DROP,4,"DROP"
 562      0444524F 
 562      500000BF 
 563 328c 57F8046B 		_POP
 564 3290 1CE6     		_NEXT 
 565              	
 566              	/*********************************
 567              	CORE EXTENSION 
 568              		NIP ( x1 x2 -- x2 )
 569              		throw next element 
 570              	*********************************/
 571 3292 84320000 		_HEADER NIP,3,"NIP"
 571      034E4950 
 571      00BF
 572 329c 07F10407 		ADD DSP,#CELLL 
 573 32a0 14E6     		_NEXT 
 574              	
 575              	/*********************************
 576              	    DUP	 ( w -- w w )
 577              	 	Duplicate the top stack item.
 578              	*********************************/
 579 32a2 96320000 		_HEADER DUPP,3,"DUP"
 579      03445550 
 579      00BF
 580 32ac 47F8046D 		_PUSH
 581 32b0 0CE6     		_NEXT 
 582              	
 583              	/**********************************
 584              	    SWAP	( w1 w2 -- w2 w1 )
 585              	 	Exchange top two stack items.
 586              	**********************************/
 587 32b2 A6320000 		_HEADER SWAP,4,"SWAP"
 587      04535741 
 587      5000
 588 32bc 3D68     		LDR	WP,[DSP]
 589 32be 3E60     		STR	TOS,[DSP]
 590 32c0 2E46     		MOV	TOS,WP
 591 32c2 03E6     		_NEXT 
 592              	
 593              	/***********************************
 594              		2SWAP ( d2 d1 -- d1 d2 )
 595              		swap double integer 
 596              	***************************************/
 597 32c4 B6320000 		_HEADER DSWAP,5,"2SWAP"
 597      05325357 
 597      415000BF 
 598 32d0 3046     		mov T0,TOS 
 599 32d2 3968     		ldr T1,[DSP]
 600 32d4 7E68     		ldr TOS,[DSP,#4]
 601 32d6 BD68     		ldr WP,[DSP,#8]
 602 32d8 3D60     		str WP,[DSP]
 603 32da 7860     		str T0,[DSP,#4]
 604 32dc B960     		str T1,[DSP,#8]
 605 32de F5E5     		_NEXT 
 606              	
 607              	
 608              	/***********************************
ARM GAS  forth.s 			page 123


 609              	    OVER	( w1 w2 -- w1 w2 w1 )
 610              	 	Copy second stack item to top.
 611              	***********************************/
 612 32e0 C8320000 		_HEADER OVER,4,"OVER"
 612      044F5645 
 612      520000BF 
 613 32ec 47F8046D 		_PUSH
 614 32f0 7E68     		LDR	TOS,[DSP,#4]
 615 32f2 EBE5     		_NEXT 
 616              	
 617              	/***********************************
 618              		2OVER ( d2 d1 -- d2 d1 d2 )
 619              		copy a double integer to TOS 
 620              	**********************************************/
 621 32f4 E4320000 		_HEADER DOVER,5,"2OVER"
 621      05324F56 
 621      455200BF 
 622 3300 7868     		ldr T0,[DSP,#4]
 623 3302 BD68     		ldr WP,[DSP,#8]
 624 3304 47F8046D 		_PUSH 
 625 3308 2E46     		mov TOS,WP 
 626 330a 47F8046D 		_PUSH
 627 330e 0646     		mov TOS,T0 
 628 3310 DCE5     		_NEXT 
 629              	
 630              	
 631              	/***********************************
 632              	    0<	  ( n -- t )
 633              	 	Return true if n is negative.
 634              	***********************************/
 635 3312 F8320000 		_HEADER ZLESS,2,"0<"
 635      02303C00 
 635      00BF
 636 331c 4FEAE676 		ASR TOS,#31
 637 3320 D4E5     		_NEXT 
 638              	
 639              	/**********************************
 640              		0> ( n -- flag )
 641              		true if n > 0 
 642              	**********************************/
 643 3322 16330000 		_HEADER ZGREAT,2,"0>"
 643      02303E00 
 643      00BF
 644 332c 1EB1     		CBZ TOS, 1f
 645 332e 4FEAE676 		ASR TOS,#31 
 646 3332 6FEA0606 		MVN TOS,TOS 
 647 3336 C9E5     	1:	_NEXT 
 648              	
 649              	
 650              	/**********************************
 651              		0<> ( n -- flag )
 652              	    true if n <> 0
 653              	*********************************/
 654 3338 26330000 		_HEADER ZNEQU,3,"0<>"
 654      03303C3E 
 655 3340 0EB1     		CBZ TOS,1f
 656 3342 4FF0FF36 		MOV TOS,#-1
ARM GAS  forth.s 			page 124


 657 3346 C1E5     	1:	_NEXT
 658              	
 659              	
 660              	/*********************************
 661              		<>  ( x1 x2 -- flag )
 662              		true fi x1 <> x2 
 663              	********************************/
 664 3348 3C330000 		_HEADER NEQU,2,"<>"
 664      023C3E00 
 665 3350 57F8040B 		LDR T0,[DSP],#CELLL 
 666 3354 4640     		EORS TOS,T0 
 667 3356 01D0     		BEQ 1f
 668 3358 4FF0FF36 		MOV TOS,#-1
 669 335c B6E5     	1:  _NEXT 
 670              	
 671              	
 672              	/********************************
 673              	    AND	 ( w w -- w )
 674              	 	Bitwise AND.
 675              	********************************/
 676 335e 4C330000 		_HEADER ANDD,3,"AND"
 676      03414E44 
 676      00BF
 677 3368 57F8045B 		LDR	WP,[DSP],#4
 678 336c 06EA0506 		AND	TOS,TOS,WP
 679 3370 ACE5     		_NEXT 
 680              	
 681              	/******************************
 682              	    OR	  ( w w -- w )
 683              	 	Bitwise inclusive OR.
 684              	******************************/
 685 3372 62330000 		_HEADER ORR,2,"OR"
 685      024F5200 
 685      00BF
 686 337c 57F8045B 		LDR	WP,[DSP],#4
 687 3380 46EA0506 		ORR	TOS,TOS,WP
 688 3384 A2E5     		_NEXT 
 689              	
 690              	/*****************************
 691              	    XOR	 ( w w -- w )
 692              	 	Bitwise exclusive OR.
 693              	*****************************/
 694 3386 76330000 		_HEADER XORR,3,"XOR"
 694      03584F52 
 694      00BF
 695 3390 57F8045B 		LDR	WP,[DSP],#4
 696 3394 86EA0506 		EOR	TOS,TOS,WP
 697 3398 98E5     		_NEXT 
 698              	
 699              	/**************************************************
 700              	    UM+	 ( w w -- w cy )
 701              	 	Add two numbers, return the sum and carry flag.
 702              	***************************************************/
 703 339a 8A330000 		_HEADER UPLUS,3,"UM+"
 703      03554D2B 
 703      00BF
 704 33a4 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 125


 705 33a6 AD19     		ADDS	WP,WP,TOS
 706 33a8 4FF00006 		MOV	TOS,#0
 707 33ac 46F10006 		ADC	TOS,TOS,#0
 708 33b0 3D60     		STR	WP,[DSP]
 709 33b2 8BE5     		_NEXT 
 710              	
 711              	/*********************************
 712              	    RSHIFT	 ( w # -- w )
 713              	 	logical Right shift # bits.
 714              	**********************************/
 715 33b4 9E330000 		_HEADER RSHIFT,6,"RSHIFT"
 715      06525348 
 715      49465400 
 716 33c0 57F8045B 		LDR	WP,[DSP],#4
 717 33c4 25FA06F6 		MOV	TOS,WP,LSR TOS
 718 33c8 80E5     		_NEXT 
 719              	
 720              	/****************************
 721              	    LSHIFT	 ( w # -- w )
 722              	 	left shift # bits.
 723              	****************************/
 724 33ca B8330000 		_HEADER LSHIFT,6,"LSHIFT"
 724      064C5348 
 724      49465400 
 724      00BF
 725 33d8 57F8045B 		LDR	WP,[DSP],#4
 726 33dc 05FA06F6 		MOV	TOS,WP,LSL TOS
 727 33e0 74E5     		_NEXT
 728              	
 729              	/*************************
 730              	    +	 ( w w -- w )
 731              	 	Add.
 732              	*************************/
 733 33e2 CE330000 		_HEADER PLUS,1,"+"
 733      012B
 734 33e8 57F8045B 		LDR	WP,[DSP],#4
 735 33ec 2E44     		ADD	TOS,TOS,WP
 736 33ee 6DE5     		_NEXT 
 737              	
 738              	/************************
 739              	    -	 ( w w -- w )
 740              	 	Subtract.
 741              	************************/
 742 33f0 E6330000 		_HEADER SUBB,1,"-"
 742      012D00BF 
 743 33f8 57F8045B 		LDR	WP,[DSP],#4
 744 33fc C6EB0506 		RSB	TOS,TOS,WP
 745 3400 64E5     		_NEXT 
 746              	
 747              	/************************
 748              	    *	 ( w w -- w )
 749              	 	Multiply.
 750              	***********************/
 751 3402 F4330000 		_HEADER STAR,1,"*"
 751      012A
 752 3408 57F8045B 		LDR	WP,[DSP],#4
 753 340c 05FB06F6 		MUL	TOS,WP,TOS
ARM GAS  forth.s 			page 126


 754 3410 5CE5     		_NEXT 
 755              	
 756              	/***************************
 757              	    UM*	 ( w w -- ud )
 758              	 	Unsigned multiply.
 759              	****************************/
 760 3412 06340000 		_HEADER UMSTA,3,"UM*"
 760      03554D2A 
 760      00BF
 761 341c 3D68     		LDR	WP,[DSP]
 762 341e A6FB0523 		UMULL	T2,T3,TOS,WP
 763 3422 3A60     		STR	T2,[DSP]
 764 3424 1E46     		MOV	TOS,T3
 765 3426 51E5     		_NEXT 
 766              	
 767              	/***************************
 768              	    M*	 ( w w -- d )
 769              	 	signed multiply.
 770              		hold double result
 771              	***************************/
 772 3428 16340000 		_HEADER MSTAR,2,"M*"
 772      024D2A00 
 773 3430 3D68     		LDR	WP,[DSP]
 774 3432 86FB0523 		SMULL	T2,T3,TOS,WP
 775 3436 3A60     		STR	T2,[DSP]
 776 3438 1E46     		MOV	TOS,T3
 777 343a 47E5     		_NEXT 
 778              	
 779              	/***************************
 780              	    1+	 ( w -- w+1 )
 781              	 	Add 1.
 782              	***************************/
 783 343c 2C340000 		_HEADER ONEP,2,"1+"
 783      02312B00 
 784 3444 06F10106 		ADD	TOS,TOS,#1
 785 3448 40E5     		_NEXT 
 786              	
 787              	/***************************
 788              	    1-	 ( w -- w-1 )
 789              	 	Subtract 1.
 790              	***************************/
 791 344a 40340000 		_HEADER ONEM,2,"1-"
 791      02312D00 
 791      00BF
 792 3454 A6F10106 		SUB	TOS,TOS,#1
 793 3458 38E5     		_NEXT 
 794              	
 795              	/***************************
 796              	    2+	 ( w -- w+2 )
 797              	 	Add 2.
 798              	**************************/
 799 345a 4E340000 		_HEADER TWOP,2,"2+"
 799      02322B00 
 799      00BF
 800 3464 06F10206 		ADD	TOS,TOS,#2
 801 3468 30E5     		_NEXT
 802              	
ARM GAS  forth.s 			page 127


 803              	/**************************
 804              	    2-	 ( w -- w-2 )
 805              	 	Subtract 2.
 806              	**************************/
 807 346a 5E340000 		_HEADER TWOM,2,"2-"
 807      02322D00 
 807      00BF
 808 3474 A6F10206 		SUB	TOS,TOS,#2
 809 3478 28E5     		_NEXT
 810              	
 811              	/***************************
 812              	    CELL+	( w -- w+4 )
 813              	 	Add CELLL.
 814              	***************************/
 815 347a 6E340000 		_HEADER CELLP,5,"CELL+"
 815      0543454C 
 815      4C2B
 816 3484 06F10406 		ADD	TOS,TOS,#CELLL
 817 3488 20E5     		_NEXT
 818              	
 819              	/***************************
 820              	    CELL-	( w -- w-4 )
 821              	 	Subtract CELLL.
 822              	**************************/
 823 348a 7E340000 		_HEADER CELLM,5,"CELL-"
 823      0543454C 
 823      4C2D
 824 3494 A6F10406 		SUB	TOS,TOS,#CELLL
 825 3498 18E5     		_NEXT
 826              	
 827              	/**************************** 
 828              	    BL	( -- 32 )
 829              	 	Blank (ASCII space).
 830              	*****************************/
 831 349a 8E340000 		_HEADER BLANK,2,"BL"
 831      02424C00 
 831      00BF
 832 34a4 47F8046D 		_PUSH
 833 34a8 4FF02006 		MOV	TOS,#32
 834 34ac 0EE5     		_NEXT 
 835              	
 836              	/**************************
 837              	    CELLS	( w -- w*4 )
 838              	 	Multiply CELLL 
 839              	***************************/
 840 34ae 9E340000 		_HEADER CELLS,5,"CELLS"
 840      0543454C 
 840      4C53
 841 34b8 4FEA8606 		LSL TOS,#2
 842 34bc 06E5     		_NEXT
 843              	
 844              	/***************************
 845              	    CELL/	( w -- w/4 )
 846              	 	Divide by CELLL.
 847              	***************************/
 848 34be B2340000 		_HEADER CELLSL,5,"CELL/"
 848      0543454C 
ARM GAS  forth.s 			page 128


 848      4C2F
 849 34c8 4FEAA606 		ASR TOS,#2
 850 34cc FEE4     		_NEXT
 851              	
 852              	/*************************
 853              	    2*	( w -- w*2 )
 854              	 	Multiply 2.
 855              	*************************/
 856 34ce C2340000 		_HEADER TWOST,2,"2*"
 856      02322A00 
 856      00BF
 857 34d8 4FEA4606 		MOV	TOS,TOS,LSL#1
 858 34dc F6E4     		_NEXT
 859              	
 860              	/*************************
 861              	    2/	( w -- w/2 )
 862              	 	Divide by 2.
 863              	***********************/
 864 34de D2340000 		_HEADER TWOSL,2,"2/"
 864      02322F00 
 864      00BF
 865 34e8 4FEA6606 		MOV	TOS,TOS,ASR#1
 866 34ec EEE4     		_NEXT
 867              	
 868              	/****************************
 869              	    ?DUP	( w -- w w | 0 )
 870              	 	Conditional duplicate.
 871              	*****************************/
 872 34ee E2340000 		_HEADER QDUP,4,"?DUP"
 872      043F4455 
 872      5000
 873 34f8 3500     		MOVS	WP,TOS
 874 34fa 18BF     		IT NE 
 875 34fc 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 876 3500 E4E4     		_NEXT
 877              	
 878              	/************************************
 879              	 CORE EXTENSION 
 880              		TUCK ( x1 x2 -- x2 x1 x2 )
 881              	***********************************/
 882 3502 F2340000 		_HEADER TUCK,4,"TUCK"
 882      04545543 
 882      4B00
 883 350c 47F8046D 		_PUSH 
 884 3510 7E68     		LDR TOS, [DSP,#CELLL]
 885 3512 DBE4     		_NEXT 
 886              	
 887              	/************************************
 888              	 CORE EXTENSION 
 889              		ROLL ( Xu Xu-1 .. X0 u -- Xu-1 ... X0 Xu )
 890              	**********************************************/
 891 3514 06350000 		_HEADER ROLL,4,"ROLL"
 891      04524F4C 
 891      4C0000BF 
 892 3520 504700BF 		_NEST 
 893 3524 F9340000 		_ADR QDUP 
 894 3528 33310000 		_QBRAN 9f 
ARM GAS  forth.s 			page 129


 894      84350000 
 895 3530 AD320000 		_ADR  DUPP 
 896 3534 F3300000 		_DOLIT 1 
 896      01000000 
 897 353c 31370000 		_ADR   EQUAL 
 898 3540 33310000 		_QBRAN 1f 
 898      58350000 
 899 3548 8D320000 		_ADR  DROP 
 900 354c BD320000 		_ADR  SWAP 
 901 3550 5B310000 		_BRAN 9f 
 901      84350000 
 902 3558 19320000 	1:  _ADR  TOR 	
 903 355c E9310000 		_ADR  RAT
 904 3560 C53E0000 		_ADR  PICK 	
 905 3564 69320000 		_ADR  SPAT
 906 3568 AD320000 		_ADR  DUPP 
 907 356c 85340000 		_ADR  CELLP 
 908 3570 B5310000 		_ADR  RFROM
 909 3574 45340000 		_ADR  ONEP  
 910 3578 B9340000 		_ADR  CELLS 
 911 357c E93F0000 		_ADR  WMOVE  
 912 3580 8D320000 		_ADR  DROP 
 913 3584 D32E0000 	9:	_UNNEST 
 914              	/*
 915              		MOV T0, TOS
 916              		CBZ T0, 9f 
 917              		MOV T1, T0   // COUNTER   
 918              		SUBB T0, #1 
 919              		SLL T0, #2 
 920              		_POP
 921              		MOV T2, TOS 
 922              		LDR TOS,[DSP,T0]
 923              		MOV T2, [DSP,T0]
 924              		SUBS T1,#1
 925              		BEQ  9f 
 926              	
 927              	9:	_NEXT 
 928              	*/
 929              	
 930              	/***********************************
 931              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 932              	 	Rotate top 3 items.
 933              	*************************************/
 934 3588 18350000 		_HEADER ROT,3,"ROT"
 934      03524F54 
 935 3590 3868     		LDR	T0,[DSP]  // w2 
 936 3592 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 937 3594 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 938 3596 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 939 3598 98E4     		_NEXT
 940              	
 941              	/*********************************
 942              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 943              	 left rotate top 3 elements 
 944              	********************************/
 945 359a 8C350000 		_HEADER NROT,4,"-ROT"
 945      042D524F 
ARM GAS  forth.s 			page 130


 945      5400
 946 35a4 7868     		LDR T0,[DSP,#4]
 947 35a6 7E60     		STR TOS,[DSP,#4]	
 948 35a8 3E68     		LDR TOS,[DSP]
 949 35aa 3860     		STR T0,[DSP]
 950 35ac 8EE4     		_NEXT 
 951              	
 952              	/*********************************
 953              	    2DROP	( w1 w2 -- )
 954              	 	Drop top 2 items.
 955              	*********************************/
 956 35ae 9E350000 		_HEADER DDROP,5,"2DROP"
 956      05324452 
 956      4F50
 957 35b8 57F8046B 		_POP
 958 35bc 57F8046B 		_POP
 959 35c0 84E4     		_NEXT 
 960              	
 961              	/********************************
 962              		3DROP ( w1 w2 w3 -- )
 963              		drop top 3 items 
 964              	********************************/
 965 35c2 B2350000 		_HEADER TDROP,5,"3DROP"
 965      05334452 
 965      4F50
 966 35cc 07F10807 	    add DSP,#8 
 967 35d0 57F8046B 	    _POP 
 968 35d4 7AE4     	    _NEXT 
 969              	
 970              	/***********************************
 971              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 972              	 	Duplicate top 2 items.
 973              	************************************/
 974 35d6 C6350000 		_HEADER DDUP,4,"2DUP"
 974      04324455 
 974      5000
 975 35e0 3868     		LDR	T0,[DSP] // w1
 976 35e2 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 977 35e6 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 978 35ea 6FE4     		_NEXT
 979              	
 980              	/******************************
 981              	    D+	( d1 d2 -- d3 )
 982              	 	Add top 2 double numbers.
 983              	******************************/
 984 35ec DA350000 		_HEADER DPLUS,2,"D+"
 984      02442B00 
 985 35f4 57F8045B 		LDR	WP,[DSP],#4
 986 35f8 57F8042B 		LDR	T2,[DSP],#4
 987 35fc 3B68     		LDR	T3,[DSP]
 988 35fe ED18     		ADDS	WP,WP,T3
 989 3600 3D60     		STR	WP,[DSP]
 990 3602 46EB0206 		ADC	TOS,TOS,T2
 991 3606 61E4     		_NEXT
 992              	
 993              	/******************************
 994              		DABS ( d -- ud )
ARM GAS  forth.s 			page 131


 995              		absolute value double 
 996              	*****************************/
 997 3608 F0350000 		_HEADER DABS,4,"DABS"
 997      04444142 
 997      530000BF 
 998 3614 16F0004F 		tst TOS,#(1<<31)
 999 3618 09D0     		beq 9f 
 1000 361a 6FEA0606 		mvn TOS,TOS 
 1001 361e 3D68     		ldr WP,[DSP]
 1002 3620 6FEA0505 		mvn WP,WP 
 1003 3624 0135     		adds WP,#1
 1004 3626 3D60     		str WP,[DSP]
 1005 3628 01D3     		bcc 9f 
 1006 362a 06F10106 		add TOS,#1 
 1007 362e 4DE4     	9:	_NEXT 
 1008              	
 1009              	/*****************************
 1010              	  UD> ( d1 d2 -- f )
 1011              	  unsigned compare double d1 > d2 
 1012              	******************************/
 1013 3630 0C360000 		_HEADER UDGREAT,3,"UD>"
 1013      0355443E 
 1014 3638 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 1015 363c 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 1016 363e B042     		cmp T0,TOS 
 1017 3640 02D8     		bhi 1f
 1018 3642 04D4     		bmi 2f  
 1019 3644 A942     		cmp T1,WP 
 1020 3646 02D9     		bls 2f 
 1021 3648 4FF0FF36 	1:	mov TOS,#-1 
 1022 364c 3EE4     		_NEXT 
 1023 364e 4FF00006 	2:  mov TOS,#0 
 1024 3652 3BE4     		_NEXT 
 1025              	
 1026              	/******************************
 1027              		D0= ( d -- f )
 1028              		double 0= 
 1029              	*****************************/
 1030 3654 34360000 		_HEADER DZEQUAL,3,"D0="
 1030      0344303D 
 1031 365c 3046     		mov T0,TOS
 1032 365e 57F8046B 		_POP 
 1033 3662 46EA0006 		orr TOS,T0 
 1034 3666 01D0     		beq 9f
 1035 3668 6FF00006 		mvn TOS,#0 
 1036 366c 2EE4     	9:	_NEXT 
 1037              	
 1038              	/*****************************
 1039              	    INVERT	 ( w -- !w )
 1040              	 	1"s complement.
 1041              	*****************************/
 1042 366e 58360000 		_HEADER INVER,6,"INVERT"
 1042      06494E56 
 1042      45525400 
 1042      00BF
 1043 367c 6FEA0606 		MVN	TOS,TOS
 1044 3680 24E4     		_NEXT
ARM GAS  forth.s 			page 132


 1045              	
 1046              	/*****************************
 1047              	    NEGATE	( w -- -w )
 1048              	 	2's complement.
 1049              	***************************/
 1050 3682 72360000 		_HEADER NEGAT,6,"NEGATE"
 1050      064E4547 
 1050      41544500 
 1050      00BF
 1051 3690 C6F10006 		RSB	TOS,TOS,#0
 1052 3694 1AE4     		_NEXT
 1053              	
 1054              	/***************************
 1055              	    ABS	 ( w -- |w| )
 1056              	 	Absolute.
 1057              	**************************/
 1058 3696 86360000 		_HEADER ABSS,3,"ABS"
 1058      03414253 
 1058      00BF
 1059 36a0 16F0004F 		TST	TOS,#0x80000000
 1060 36a4 18BF     		IT NE
 1061 36a6 7642     	    RSBNE   TOS,TOS,#0
 1062 36a8 10E4     		_NEXT
 1063              	
 1064              	/**************************
 1065              		CLZ ( n - n )
 1066              		count leading zeros 
 1067              	**************************/
 1068 36aa 9A360000 		_HEADER CLZ,3,"CLZ"
 1068      03434C5A 
 1068      00BF
 1069 36b4 B6FA86F6 		clz TOS,TOS 
 1070 36b8 08E4     		_NEXT 
 1071              	
 1072              	/*************************
 1073              		CTZ ( n -- n )
 1074              		count trailing zeros 
 1075              	************************/
 1076 36ba AE360000 		_HEADER CTZ,3,"CTZ"
 1076      0343545A 
 1076      00BF
 1077 36c4 80EA0000 		eor T0,T0 
 1078 36c8 16F0010F 	1:  tst TOS,#1 
 1079 36cc 04D1     		bne 2f 
 1080 36ce 4FEA5606 		lsr TOS,#1 
 1081 36d2 00F10100 		add T0,#1 
 1082 36d6 F7E7     		b 1b 
 1083 36d8 0646     	2:  mov TOS,T0 
 1084 36da FFF7F7BB 		_NEXT 
 1085              	
 1086              	/**********************
 1087              	CORE EXTENSION 
 1088              		FALSE ( -- 0 )
 1089              		return false flag 
 1090              	***********************/
 1091 36de BE360000 		_HEADER FALSE,5,"FALSE"
 1091      0546414C 
ARM GAS  forth.s 			page 133


 1091      5345
 1092 36e8 47F8046D 		_PUSH 
 1093 36ec 86EA0606 		EOR TOS,TOS 
 1094 36f0 FFF7ECBB 		_NEXT 
 1095              	
 1096              	/**********************
 1097              	CORE EXTENSION 
 1098              		TRUE ( -- -1 )
 1099              		return true flag 
 1100              	***********************/
 1101 36f4 E2360000 		_HEADER TRUE,4,"TRUE"
 1101      04545255 
 1101      450000BF 
 1102 3700 47F8046D 		_PUSH 
 1103 3704 86EA0606 		EOR TOS,TOS
 1104 3708 6FEA0606 		MVN TOS,TOS 
 1105 370c FFF7DEBB 		_NEXT 
 1106              	
 1107              	
 1108              	/*******************
 1109              	  0= ( w -- f )
 1110              	 TOS==0?
 1111              	*******************/
 1112 3710 F8360000 		_HEADER ZEQUAL,2,"0="
 1112      02303D00 
 1113 3718 1EB9     		cbnz TOS,1f
 1114 371a 4FF0FF36 		mov TOS,#-1
 1115 371e FFF7D5BB 		_NEXT 
 1116 3722 86EA0606 	1:  eor TOS,TOS,TOS  
 1117 3726 FFF7D1BB 		_NEXT 	
 1118              	
 1119              	/*********************
 1120              	    =	 ( w w -- t )
 1121              	 	Equal?
 1122              	*********************/
 1123 372a 14370000 		_HEADER EQUAL,1,"="
 1123      013D
 1124 3730 57F8045B 		LDR	WP,[DSP],#4
 1125 3734 AE42     		CMP	TOS,WP
 1126 3736 0CBF     		ITE EQ 
 1127 3738 6FF00006 	    MVNEQ	TOS,#0
 1128 373c 0026     		MOVNE	TOS,#0
 1129 373e FFF7C5BB 		_NEXT
 1130              	
 1131              	/************************
 1132              		<> ( w w -- f )
 1133              		different?
 1134              	************************/
 1135 3742 2E370000 		_HEADER DIFF,2,"<>"
 1135      023C3E00 
 1135      00BF
 1136 374c 3046     		mov T0,TOS 
 1137 374e 57F8046B 		_POP 
 1138 3752 86EA0006 		eor TOS,T0
 1139 3756 B6FA86F0 		clz T0,TOS 
 1140 375a 06FA00F6 		lsl TOS,T0 
 1141 375e 4FEAE676 		asr TOS,#31 
ARM GAS  forth.s 			page 134


 1142 3762 FFF7B3BB 		_NEXT 
 1143              	
 1144              	/************************
 1145              	    U<	 ( w w -- t )
 1146              	 	Unsigned less?
 1147              	*************************/
 1148 3766 46370000 		_HEADER ULESS,2,"U<"
 1148      02553C00 
 1148      00BF
 1149 3770 57F8045B 		LDR	WP,[DSP],#4
 1150 3774 B542     		CMP	WP,TOS
 1151 3776 34BF     		ITE CC 
 1152 3778 6FF00006 		MVNCC	TOS,#0
 1153 377c 0026     		MOVCS	TOS,#0
 1154 377e FFF7A5BB 		_NEXT
 1155              	
 1156              	/**********************
 1157              	    <	( w w -- t )
 1158              	 	Less?
 1159              	**********************/
 1160 3782 6A370000 		_HEADER LESS,1,"<"
 1160      013C
 1161 3788 57F8045B 		LDR	WP,[DSP],#4
 1162 378c B542     		CMP	WP,TOS
 1163 378e B4BF     	    ITE LT
 1164 3790 6FF00006 		MVNLT	TOS,#0
 1165 3794 0026     		MOVGE	TOS,#0
 1166 3796 FFF799BB 		_NEXT 
 1167              	
 1168              	/**********************
 1169              		U> ( u u -- t|f )
 1170              	    unsigned greater 
 1171              	**********************/
 1172 379a 86370000 		_HEADER UGREAT,2,"U>"
 1172      02553E00 
 1172      00BF
 1173 37a4 57F8045B 		LDR WP,[DSP],#4 
 1174 37a8 AE42     		CMP TOS,WP 
 1175 37aa 34BF     		ITE CC  
 1176 37ac 6FF00006 		MVNCC TOS,#0 
 1177 37b0 0026     		MOVCS TOS,#0
 1178 37b2 FFF78BBB 		_NEXT 
 1179              	
 1180              	/***********************
 1181              	    >	( w w -- t )
 1182              	 	greater?
 1183              	***********************/
 1184 37b6 9E370000 		_HEADER GREAT,1,">"
 1184      013E
 1185 37bc 57F8045B 		LDR	WP,[DSP],#4
 1186 37c0 B542     		CMP	WP,TOS
 1187 37c2 CCBF     		ITE GT
 1188 37c4 6FF00006 	    MVNGT	TOS,#0
 1189 37c8 0026     		MOVLE	TOS,#0
 1190 37ca FFF77FBB 		_NEXT
 1191              	
 1192              	/***************************
ARM GAS  forth.s 			page 135


 1193              	    MAX	 ( w w -- max )
 1194              	 	Leave maximum.
 1195              	***************************/
 1196 37ce BA370000 		_HEADER MAX,3,"MAX"
 1196      034D4158 
 1196      00BF
 1197 37d8 57F8045B 		LDR	WP,[DSP],#4
 1198 37dc B542     		CMP	WP,TOS
 1199 37de C8BF     		IT GT 
 1200 37e0 2E46     		MOVGT	TOS,WP
 1201 37e2 FFF773BB 		_NEXT 
 1202              	
 1203              	/**************************
 1204              	    MIN	 ( w w -- min )
 1205              	 	Leave minimum.
 1206              	**************************/
 1207 37e6 D2370000 		_HEADER MIN,3,"MIN"
 1207      034D494E 
 1207      00BF
 1208 37f0 57F8045B 		LDR	WP,[DSP],#4
 1209 37f4 B542     		CMP	WP,TOS
 1210 37f6 B8BF     		IT LT
 1211 37f8 2E46     		MOVLT	TOS,WP
 1212 37fa FFF767BB 		_NEXT
 1213              	
 1214              	/***********************
 1215              	    +!	 ( w a -- )
 1216              	 	Add to memory.
 1217              	***********************/
 1218 37fe EA370000 		_HEADER PSTOR,2,"+!"
 1218      022B2100 
 1218      00BF
 1219 3808 57F8045B 		LDR	WP,[DSP],#4
 1220 380c 3268     		LDR	T2,[TOS]
 1221 380e 2A44     		ADD	T2,T2,WP
 1222 3810 3260     		STR	T2,[TOS]
 1223 3812 57F8046B 		_POP
 1224 3816 FFF759BB 		_NEXT
 1225              	
 1226              	/************************
 1227              	    2!	 ( d a -- )
 1228              	 	Store double number.
 1229              	*************************/
 1230 381a 02380000 		_HEADER DSTOR,2,"2!"
 1230      02322100 
 1230      00BF
 1231 3824 57F8045B 		LDR	WP,[DSP],#4
 1232 3828 57F8042B 		LDR	T2,[DSP],#4
 1233 382c 46F8045B 		STR	WP,[TOS],#4
 1234 3830 3260     		STR	T2,[TOS]
 1235 3832 57F8046B 		_POP
 1236 3836 FFF749BB 		_NEXT
 1237              	
 1238              	/************************
 1239              	    2@	 ( a -- d )
 1240              	 	Fetch double number.
 1241              	************************/
ARM GAS  forth.s 			page 136


 1242 383a 1E380000 		_HEADER DAT,2,"2@"
 1242      02324000 
 1242      00BF
 1243 3844 7568     		LDR	WP,[TOS,#4]
 1244 3846 47F8045D 		STR	WP,[DSP,#-4]!
 1245 384a 3668     		LDR	TOS,[TOS]
 1246 384c FFF73EBB 		_NEXT
 1247              	
 1248              	/***************************
 1249              	    COUNT	( b -- b+1 c )
 1250              	 	Fetch length of string.
 1251              	****************************/
 1252 3850 3E380000 		_HEADER COUNT,5,"COUNT"
 1252      05434F55 
 1252      4E5400BF 
 1253 385c 16F8015B 		LDRB	WP,[TOS],#1
 1254 3860 47F8046D 		_PUSH
 1255 3864 2E46     		MOV	TOS,WP
 1256 3866 FFF731BB 		_NEXT
 1257              	
 1258              	/******************************
 1259              	    DNEGATE	( d -- -d )
 1260              	 	Negate double number.
 1261              	**************************/
 1262 386a 54380000 		_HEADER DNEGA,7,"DNEGATE"
 1262      07444E45 
 1262      47415445 
 1262      00BF
 1263 3878 3D68     		LDR	WP,[DSP]
 1264 387a A2EB0202 		SUB	T2,T2,T2
 1265 387e 551B     		SUBS WP,T2,WP
 1266 3880 62EB0606 		SBC	TOS,T2,TOS
 1267 3884 3D60     		STR	WP,[DSP]
 1268 3886 FFF721BB 		_NEXT
 1269              	
 1270              	/******************************
 1271              	  System and user variables
 1272              	******************************/
 1273              	
 1274              	/***********************
 1275              	  system variables 
 1276              	***********************/
 1277              	
 1278              	/***********************
 1279              		STATE ( -- a )
 1280              		compilation state 
 1281              		0 -> interpret
 1282              		-1 -> compile 
 1283              	************************/
 1284 388a 6E380000 		_HEADER STATE,5,"STATE"
 1284      05535441 
 1284      5445
 1285 3894 47F8046D 		_PUSH 
 1286 3898 04F1B406 		ADD TOS,UP,#CSTATE 
 1287 389c FFF716BB 		_NEXT 
 1288              	
 1289              	/**************************
ARM GAS  forth.s 			page 137


 1290              	 SEED ( -- a)
 1291              	 return PRNG seed address 
 1292              	**************************/
 1293 38a0 8E380000 		_HEADER SEED,4,"SEED"
 1293      04534545 
 1293      440000BF 
 1294 38ac 47F8046D 		_PUSH 
 1295 38b0 04F10406 		ADD TOS,UP,#RNDSEED
 1296 38b4 FFF70ABB 		_NEXT 	
 1297              	
 1298              	/****************************************
 1299              	  TICKS ( -- u )
 1300              	 return milliseconds since last reset or
 1301              	 power up. 
 1302              	****************************************/
 1303 38b8 A4380000 		_HEADER MSEC,5,"TICKS"
 1303      05544943 
 1303      4B5300BF 
 1304 38c4 47F8046D 	    _PUSH
 1305 38c8 A668     	    LDR TOS,[UP,#TICKS]
 1306 38ca FFF7FFBA 	    _NEXT 
 1307              	
 1308              	/*************************
 1309              	 TIMER ( -- a )
 1310              	 count down timer 
 1311              	**********************/
 1312 38ce BC380000 		_HEADER TIMER,5,"TIMER"
 1312      0554494D 
 1312      4552
 1313 38d8 47F8046D 		 _PUSH 
 1314 38dc 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1315 38e0 FFF7F4BA 	    _NEXT
 1316              	
 1317              	/*****************************
 1318              	    'BOOT	 ( -- a )
 1319              	 	boot up application vector 
 1320              	*****************************/
 1321 38e4 D2380000 		_HEADER TBOOT,5,"'BOOT"
 1321      0527424F 
 1321      4F5400BF 
 1322 38f0 47F8046D 		_PUSH
 1323 38f4 04F11006 		ADD	TOS,UP,#BOOT 
 1324 38f8 FFF7E8BA 		_NEXT
 1325              		
 1326              	/********************************************	
 1327              	    BASE	( -- a )
 1328              	 	Storage of the radix base for numeric I/O.
 1329              	**********************************************/
 1330 38fc E8380000 		_HEADER BASE,4,"BASE"
 1330      04424153 
 1330      450000BF 
 1331 3908 47F8046D 		_PUSH
 1332 390c 04F11C06 		ADD	TOS,UP,#NBASE
 1333 3910 FFF7DCBA 		_NEXT
 1334              	
 1335              	/***********************************************
 1336              		BCHAR ( -- flag )
ARM GAS  forth.s 			page 138


 1337              		boolean variable
 1338              		if set base char include in convertion 
 1339              		of integer to string.  
 1340              	************************************************/
 1341 3914 00390000 			_HEADER BCHR,5,"BCHAR"
 1341      05424348 
 1341      415200BF 
 1342 3920 47F8046D 			_PUSH 
 1343 3924 04F12006 			ADD TOS,UP,#BCHAR 
 1344 3928 FFF7D0BA 			_NEXT 
 1345              	
 1346              	/*****************************************************
 1347              	    temp	 ( -- a )
 1348              	 	A temporary storage location used in parse and find.
 1349              	hidden word for internal use
 1350              	********************************************************/
 1351              	TEMP:
 1352 392c 47F8046D 		_PUSH
 1353 3930 04F12406 		ADD	TOS,UP,#TMP
 1354 3934 FFF7CABA 		_NEXT
 1355              	
 1356              	/*******************************************
 1357              	    SPAN	( -- a )
 1358              	 	Hold character count received by EXPECT.
 1359              	********************************************/
 1360 3938 18390000 		_HEADER SPAN,4,"SPAN"
 1360      04535041 
 1360      4E0000BF 
 1361 3944 47F8046D 		_PUSH
 1362 3948 04F12806 		ADD	TOS,UP,#CSPAN
 1363 394c FFF7BEBA 		_NEXT
 1364              	
 1365              	/***********************************************************
 1366              	    >IN	 ( -- a )
 1367              	 	Hold the character pointer while parsing input stream.
 1368              	***********************************************************/
 1369 3950 3C390000 		_HEADER INN,3,">IN"
 1369      033E494E 
 1370 3958 47F8046D 		_PUSH
 1371 395c 04F12C06 		ADD	TOS,UP,#TOIN
 1372 3960 FFF7B4BA 		_NEXT
 1373              	
 1374              	/**************************************
 1375              	    #TIB	( -- a )
 1376              	 	Hold the current count and address 
 1377              		of the terminal input buffer.
 1378              	**************************************/
 1379 3964 54390000 		_HEADER NTIB,4,"#TIB"
 1379      04235449 
 1379      420000BF 
 1380 3970 47F8046D 		_PUSH
 1381 3974 04F13006 		ADD	TOS,UP,#NTIBB
 1382 3978 FFF7A8BA 		_NEXT
 1383              	
 1384              	/******************************
 1385              	    'EVAL	( -- a )
 1386              	 	Execution vector of EVAL.
ARM GAS  forth.s 			page 139


 1387              	*******************************/
 1388 397c 68390000 		_HEADER TEVAL,5,"'EVAL"
 1388      05274556 
 1388      414C00BF 
 1389 3988 47F8046D 		_PUSH
 1390 398c 04F13C06 		ADD	TOS,UP,#EVAL
 1391 3990 FFF79CBA 		_NEXT
 1392              	
 1393              	/*********************************
 1394              	    HLD	 ( -- a )
 1395              	 	Hold a pointer in building a 
 1396              		numeric output string.
 1397              	*********************************/
 1398 3994 80390000 		_HEADER HLD,3,"HLD"
 1398      03484C44 
 1399 399c 47F8046D 		_PUSH
 1400 39a0 04F14006 		ADD	TOS,UP,#VHOLD
 1401 39a4 FFF792BA 		_NEXT
 1402              	
 1403              	/**********************************
 1404              	    CONTEXT	( -- a )
 1405              	 	A area to specify vocabulary 
 1406              		search order.
 1407              	**********************************/
 1408 39a8 98390000 		_HEADER CNTXT,7,"CONTEXT"
 1408      07434F4E 
 1408      54455854 
 1409              	CRRNT:
 1410 39b4 47F8046D 		_PUSH
 1411 39b8 04F14406 		ADD	TOS,UP,#CTXT
 1412 39bc FFF786BA 		_NEXT
 1413              	
 1414              	/******************************
 1415              	    CP	( -- a )
 1416              	 	Point to top free area  
 1417              		in user RAM. 
 1418              	******************************/
 1419 39c0 AC390000 		_HEADER CPP,2,"CP"
 1419      02435000 
 1420 39c8 47F8046D 		_PUSH
 1421 39cc 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1422 39d0 FFF77CBA 		_NEXT
 1423              	
 1424              	/*****************************
 1425              	CORE EXT 
 1426              		UNUSED ( -- n )
 1427              		return free bytes in 
 1428              		user RAM 
 1429              	*****************************/
 1430 39d4 C4390000 		_HEADER UNUSED,6,"UNUSED"
 1430      06554E55 
 1430      53454400 
 1431 39e0 47F8046D 		_PUSH 
 1432 39e4 E06C     		LDR T0,[UP,#USER_CTOP]
 1433 39e6 48F22C16 		_MOV32 TOS,DEND 
 1433      C2F20106 
 1434 39ee A6EB0006 		SUB TOS,T0 
ARM GAS  forth.s 			page 140


 1435 39f2 FFF76BBA 		_NEXT 
 1436              	
 1437              	/****************************
 1438              	   FCP ( -- a )
 1439              	  Point ot top of Forth 
 1440              	  system dictionary
 1441              	****************************/
 1442 39f6 D8390000 		_HEADER FCP,3,"FCP"
 1442      03464350 
 1442      00BF
 1443 3a00 47F8046D 		_PUSH 
 1444 3a04 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1445 3a08 FFF760BA 		_NEXT 
 1446              	
 1447              	/***************************
 1448              	    LAST	( -- a )
 1449              	 	Point to the last name 
 1450              		in the dictionary.
 1451              	***************************/
 1452 3a0c FA390000 		_HEADER LAST,4,"LAST"
 1452      044C4153 
 1452      540000BF 
 1453 3a18 47F8046D 		_PUSH
 1454 3a1c 04F15006 		ADD	TOS,UP,#LASTN
 1455 3a20 FFF754BA 		_NEXT
 1456              	
 1457              	
 1458              	/***********************
 1459              		system constants 
 1460              	***********************/
 1461              	
 1462              	/********************************
 1463              		USER-BEGIN ( -- a )
 1464              	  where user area begin in RAM
 1465              	********************************/
 1466 3a24 103A0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1466      0A555345 
 1466      522D4245 
 1466      47494E00 
 1467 3a34 47F8046D 		_PUSH 
 1468 3a38 DFF80460 		ldr TOS,USR_BGN_ADR 
 1469 3a3c FFF746BA 		_NEXT 
 1470              	USR_BGN_ADR:
 1471 3a40 12050020 	.word  DTOP 
 1472              	
 1473              	/*********************************
 1474              	  USER_END ( -- a )
 1475              	  where user area end in RAM 
 1476              	******************************/
 1477 3a44 283A0000 		_HEADER USER_END,8,"USER-END"
 1477      08555345 
 1477      522D454E 
 1477      440000BF 
 1478 3a54 47F8046D 		_PUSH 
 1479 3a58 DFF80460 		ldr TOS,USER_END_ADR 
 1480 3a5c FFF736BA 		_NEXT 
 1481              	USER_END_ADR:
ARM GAS  forth.s 			page 141


 1482 3a60 2C810120 		.word DEND 
 1483              	
 1484              	/********************************
 1485              		MAX-INT ( -- n+ )
 1486              		maximum integer 
 1487              	*******************************/
 1488 3a64 483A0000 		_HEADER MAXINT,7,"MAX-INT"
 1488      074D4158 
 1488      2D494E54 
 1489 3a70 47F8046D 		_PUSH 
 1490 3a74 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1490      C7F6FF76 
 1491 3a7c FFF726BA 		_NEXT 
 1492              	
 1493              	/******************************
 1494              		MIN-INT ( -- n- )
 1495              		minimum integer 
 1496              	******************************/
 1497 3a80 683A0000 		_HEADER MININT,7,"MIN-INT"
 1497      074D494E 
 1497      2D494E54 
 1498 3a8c 47F8046D 		_PUSH 
 1499 3a90 4FF00006 		_MOV32 TOS, 0x80000000
 1499      C8F20006 
 1500 3a98 FFF718BA 		_NEXT 
 1501              	
 1502              	/******************************
 1503              		MAX-UINT ( -- u )
 1504              		maximum unsigned integer 
 1505              	******************************/
 1506 3a9c 843A0000 		_HEADER MAXUINT,8,"MAX-UINT"
 1506      084D4158 
 1506      2D55494E 
 1506      540000BF 
 1507 3aac 47F8046D 		_PUSH
 1508 3ab0 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1508      CFF6FF76 
 1509 3ab8 FFF708BA 		_NEXT 
 1510              	
 1511              	
 1512              	/* *********************
 1513              	  Common functions
 1514              	***********************/
 1515              	
 1516              	/********************************
 1517              	    WITHIN	( u ul uh -- t )
 1518              	 	Return true if u is within 
 1519              		the range of ul and uh.
 1520              	********************************/
 1521 3abc A03A0000 		_HEADER WITHI,6,"WITHIN"
 1521      06574954 
 1521      48494E00 
 1522 3ac8 504700BF 		_NEST
 1523 3acc ED320000 		_ADR	OVER
 1524 3ad0 F9330000 		_ADR	SUBB
 1525 3ad4 19320000 		_ADR	TOR
 1526 3ad8 F9330000 		_ADR	SUBB
ARM GAS  forth.s 			page 142


 1527 3adc B5310000 		_ADR	RFROM
 1528 3ae0 71370000 		_ADR	ULESS
 1529 3ae4 D32E0000 		_UNNEST
 1530              	
 1531              	//  Divide
 1532              	
 1533              	/*************************************
 1534              	    UM/MOD	( udl udh u -- ur uq )
 1535              	 	Unsigned divide of a double by a 
 1536              		single. Return mod and quotient.
 1537              	**************************************/
 1538 3ae8 C03A0000 		_HEADER UMMOD,6,"UM/MOD"
 1538      06554D2F 
 1538      4D4F4400 
 1539 3af4 4FF00103 		MOV	T3,#1
 1540 3af8 57F8045B 		LDR	WP,[DSP],#4
 1541 3afc 3A68     		LDR	T2,[DSP]
 1542              	UMMOD0:
 1543 3afe 9218     		ADDS	T2,T2,T2
 1544 3b00 6D41     		ADCS	WP,WP,WP
 1545 3b02 04D3     		BCC	UMMOD1
 1546 3b04 A5EB0605 		SUB	WP,WP,TOS
 1547 3b08 02F10102 		ADD	T2,T2,#1
 1548 3b0c 04E0     		B UMMOD2
 1549              	UMMOD1:
 1550 3b0e AD1B     		SUBS	WP,WP,TOS 
 1551 3b10 28BF     		IT CS 
 1552 3b12 0132     		ADDCS	T2,T2,#1
 1553 3b14 00D2     		BCS	UMMOD2
 1554 3b16 3544     		ADD	WP,WP,TOS
 1555              	UMMOD2:
 1556 3b18 DB18     		ADDS	T3,T3,T3
 1557 3b1a F0D3     		BCC	UMMOD0
 1558 3b1c 1646     		MOV	TOS,T2
 1559 3b1e 3D60     		STR	WP,[DSP]
 1560 3b20 FFF7D4B9 		_NEXT
 1561              	
 1562              	/****************************
 1563              	    FM/MOD	( d n -- r q )
 1564              	 	Signed floored divide 
 1565              		of double by single. 
 1566              		Return mod and quotient.
 1567              	****************************/
 1568 3b24 EC3A0000 		_HEADER MSMOD,6,"FM/MOD"
 1568      06464D2F 
 1568      4D4F4400 
 1569 3b30 504700BF 		_NEST
 1570 3b34 AD320000 		_ADR	DUPP
 1571 3b38 1D330000 		_ADR	ZLESS
 1572 3b3c AD320000 		_ADR	DUPP
 1573 3b40 19320000 		_ADR	TOR
 1574 3b44 33310000 		_QBRAN MMOD1
 1574      5C3B0000 
 1575 3b4c 91360000 		_ADR	NEGAT
 1576 3b50 19320000 		_ADR	TOR
 1577 3b54 79380000 		_ADR	DNEGA
 1578 3b58 B5310000 		_ADR	RFROM
ARM GAS  forth.s 			page 143


 1579              	MMOD1:
 1580 3b5c 19320000 		_ADR	TOR
 1581 3b60 AD320000 		_ADR	DUPP
 1582 3b64 1D330000 		_ADR	ZLESS
 1583 3b68 33310000 		_QBRAN MMOD2
 1583      783B0000 
 1584 3b70 E9310000 		_ADR	RAT
 1585 3b74 E9330000 		_ADR	PLUS
 1586              	MMOD2:
 1587 3b78 B5310000 		_ADR	RFROM
 1588 3b7c F53A0000 		_ADR	UMMOD
 1589 3b80 B5310000 		_ADR	RFROM
 1590 3b84 33310000 		_QBRAN	MMOD3
 1590      983B0000 
 1591 3b8c BD320000 		_ADR	SWAP
 1592 3b90 91360000 		_ADR	NEGAT
 1593 3b94 BD320000 		_ADR	SWAP
 1594              	MMOD3:   
 1595 3b98 D32E0000 		_UNNEST
 1596              	
 1597              	/****************************
 1598              		SM/REM (d n1 -- n2 n3 )
 1599              	    symetric signed division 
 1600              		double by single 
 1601              	input:
 1602              		d   signed double 
 1603              		n1  signed single 
 1604              	output: 
 1605              		n2  signed remainder 
 1606              		n3  signed quotient 
 1607              	****************************/
 1608 3b9c 283B0000 		_HEADER SMSLSHREM,6,"SM/REM"
 1608      06534D2F 
 1608      52454D00 
 1609 3ba8 504700BF 		_NEST 
 1610 3bac AD320000 		_ADR DUPP 
 1611 3bb0 1D330000 		_ADR ZLESS 
 1612 3bb4 AD320000 		_ADR DUPP 
 1613 3bb8 19320000 		_ADR TOR   // divisor sign 
 1614 3bbc 33310000 		_QBRAN 1f 
 1614      C83B0000 
 1615 3bc4 91360000 		_ADR NEGAT 
 1616 3bc8 ED320000 	1:  _ADR OVER 
 1617 3bcc 1D330000 		_ADR ZLESS 
 1618 3bd0 AD320000 		_ADR DUPP 
 1619 3bd4 19320000 		_ADR TOR  // divident sign 
 1620 3bd8 33310000 		_QBRAN  1f 
 1620      EC3B0000 
 1621 3be0 19320000 		_ADR TOR 
 1622 3be4 79380000 		_ADR DNEGA
 1623 3be8 B5310000 		_ADR RFROM 
 1624 3bec F53A0000 	1:  _ADR UMMOD  // rem quot  
 1625 3bf0 B5310000 		_ADR RFROM 
 1626 3bf4 E9310000 		_ADR RAT 
 1627 3bf8 91330000 		_ADR XORR
 1628 3bfc 33310000 		_QBRAN 1f
 1628      083C0000 
ARM GAS  forth.s 			page 144


 1629 3c04 91360000 		_ADR NEGAT 
 1630 3c08 AD320000 	1:  _ADR DUPP 
 1631 3c0c 1D330000 		_ADR ZLESS 
 1632 3c10 B5310000 		_ADR RFROM 
 1633 3c14 91330000 		_ADR XORR 
 1634 3c18 33310000 		_QBRAN 1f 
 1634      2C3C0000 
 1635 3c20 BD320000 		_ADR SWAP 
 1636 3c24 91360000 		_ADR NEGAT 
 1637 3c28 BD320000 	    _ADR SWAP 
 1638 3c2c D32E0000 	1:  _UNNEST 
 1639              	
 1640              	
 1641              	/****************************
 1642              		S>D ( n -- d )
 1643              		convert single to double 
 1644              	*****************************/
 1645 3c30 A03B0000 		_HEADER STOD,3,"S>D"
 1645      03533E44 
 1646 3c38 47F8046D 		_PUSH 
 1647 3c3c 4FEAE676 		ASR TOS,#31
 1648 3c40 FFF744B9 		_NEXT 
 1649              	
 1650              	/****************************
 1651              		D2* ( d -- d<<1 )
 1652              		double * 2 
 1653              	***************************/
 1654 3c44 343C0000 		_HEADER D2STAR,3,"D2*"
 1654      0344322A 
 1655 3c4c 3868     		ldr T0,[DSP]
 1656 3c4e 4000     		lsls T0,#1
 1657 3c50 3860     		str T0,[DSP]
 1658 3c52 4FEA4606 		lsl TOS,#1
 1659 3c56 46F10006 		adc TOS,#0
 1660 3c5a FFF737B9 		_NEXT 
 1661              	
 1662              	/****************************
 1663              		D2/  ( d -- d>>1 )
 1664              		double signed divide by 2 
 1665              	*****************************/
 1666 3c5e 483C0000 		_HEADER D2SL,3,"D2/"
 1666      0344322F 
 1666      00BF
 1667 3c68 3868     		ldr T0,[DSP]
 1668 3c6a 7610     		asrs TOS,#1
 1669 3c6c 4FEA3000 		rrx T0,T0 
 1670 3c70 3860     		str T0,[DSP]
 1671 3c72 FFF72BB9 		_NEXT 
 1672              	
 1673              	/***************************
 1674              		D/MOD  ( d+ n+ - r+ qd+ )
 1675              		unsigned double division
 1676              		and modulo 
 1677              		output:
 1678              			qd+ = d+ / n+
 1679              			r+ = qd+ - (d+ * n+ )
 1680              	***************************/
ARM GAS  forth.s 			page 145


 1681 3c76 623C0000 		_HEADER DSLMOD,5,"D/MOD"
 1681      05442F4D 
 1681      4F44
 1682 3c80 3D68     		ldr WP,[DSP]  // d+ high 
 1683 3c82 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1684 3c84 4FF02002 		mov T2,#32 // shift counter  
 1685 3c88 81EA0101 		eor T1,T1 // quotient T0:T1  
 1686 3c8c 25B9     		cbnz WP,1f    
 1687 3c8e 82EA0202 		eor T2,T2 // nos shifting required 
 1688 3c92 0546     		mov WP,T0 
 1689 3c94 80EA0000 		eor T0,T0 
 1690 3c98 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1691 3c9a 15F0004F 	    tst WP,#(1<<31) 
 1692 3c9e 06D1     		bne 2f
 1693 3ca0 4918     		adds T1,T1,T1 
 1694 3ca2 4041     		adcs T0,T0,T0 
 1695 3ca4 45EB0505 		adc WP,WP,WP 
 1696 3ca8 A2F10102 		sub T2,#1 
 1697 3cac F4E7     		b 1b 
 1698 3cae B5FBF6F3 	2:  udiv T3,WP,TOS
 1699 3cb2 41EA0301 		orr T1,T3   // append partial quotient 
 1700 3cb6 06FB03F3 		mul T3,TOS
 1701 3cba A5EB0305 		sub WP,T3 //remainder 
 1702 3cbe 02B1     		cbz T2,8f 
 1703 3cc0 EAE7     		b 1b 
 1704 3cc2 7D60     	8:	str WP,[DSP,#4] // remainder 
 1705 3cc4 3960     		str T1,[DSP]  // q lo 
 1706 3cc6 0646     		mov TOS,T0  // q hi 		
 1707 3cc8 FFF700B9 		_NEXT 
 1708              	
 1709              	
 1710              	/****************************
 1711              		D/  ( ud u -- udq )
 1712              		divide unsigned double 
 1713              		by unsigned single 
 1714              		return double quotient
 1715              		rounded to nearest integer 
 1716              	****************************/
 1717 3ccc 7A3C0000 		_HEADER DSLASH,2,"D/"
 1717      02442F00 
 1718 3cd4 504700BF 		_NEST 
 1719 3cd8 AD320000 		_ADR DUPP 
 1720 3cdc F3300000 		_DOLIT 1 
 1720      01000000 
 1721 3ce4 C1330000 		_ADR RSHIFT 
 1722 3ce8 19320000 		_ADR TOR 
 1723 3cec 813C0000 		_ADR DSLMOD 
 1724 3cf0 91350000 		_ADR ROT 
 1725 3cf4 B5310000 		_ADR RFROM 
 1726 3cf8 BD370000 		_ADR GREAT 
 1727 3cfc 33310000 		_QBRAN 9f
 1727      143D0000 
 1728 3d04 F3300000 		_DOLIT 1 
 1728      01000000 
 1729 3d0c 393C0000 		_ADR STOD 
 1730 3d10 F5350000 		_ADR DPLUS 
 1731 3d14 D32E0000 	9:	_UNNEST 
ARM GAS  forth.s 			page 146


 1732              	
 1733              	
 1734              	/****************************
 1735              		D* ( d s -- d )
 1736              	    multiply a double 
 1737              		by a single 
 1738              	****************************/
 1739 3d18 D03C0000 		_HEADER DSTAR,2,"D*"
 1739      02442A00 
 1740              	/*
 1741              		_NEST 
 1742              		_ADR NROT 
 1743              		_ADR DUPP 
 1744              		_ADR TOR 
 1745              		_ADR DABS
 1746              		_ADR SWAP  
 1747              		_ADR ROT   
 1748              		_ADR DUPP
 1749              		_ADR TOR
 1750              		_ADR MSTAR
 1751              		_ADR ROT
 1752              		_ADR RFROM 
 1753              		_ADR STAR 
 1754              		_ADR PLUS
 1755              		_ADR RFROM 
 1756              		_ADR ZLESS 
 1757              		_QBRAN 9f
 1758              		_ADR DNEGA   
 1759              	9:	_UNNEST 
 1760              	*/
 1761 3d20 57F8040B 		ldr T0,[DSP],#4
 1762 3d24 3968     		ldr T1,[DSP]
 1763 3d26 3860     		str T0,[DSP] 
 1764 3d28 83EA0303 		eor T3,T3 
 1765 3d2c 10F0004F 		tst T0,#(1<<31)
 1766 3d30 02D0     		beq 1f 
 1767              		// DNEGATE 
 1768 3d32 591A     		subs T1,T3,T1  
 1769 3d34 63EB0000 		sbc T0,T3,T0 
 1770 3d38 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1771 3d3c 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1772 3d40 0E44     		add TOS,T1  // TOS:T2 product  
 1773 3d42 3868     		ldr r0,[DSP]
 1774 3d44 10F0004F 		tst T0,#(1<<31)
 1775 3d48 02D0     		beq 2f 
 1776              		// DNEGATE product 
 1777 3d4a 9A1A     		subs T2,T3,T2  
 1778 3d4c 63EB0606 		sbc TOS,T3,TOS 
 1779 3d50 3A60     	2:  str T2,[DSP]
 1780 3d52 FFF7BBB8 		_NEXT 
 1781              	
 1782              	
 1783              	/****************************
 1784              	   /MOD	( n n -- r q )
 1785              		Signed divide. Return
 1786              		mod and quotient.
 1787              	****************************/
ARM GAS  forth.s 			page 147


 1788 3d56 1C3D0000 		_HEADER SLMOD,4,"/MOD"
 1788      042F4D4F 
 1788      4400
 1789 3d60 504700BF 		_NEST
 1790 3d64 ED320000 		_ADR	OVER
 1791 3d68 1D330000 		_ADR	ZLESS
 1792 3d6c BD320000 		_ADR	SWAP
 1793 3d70 313B0000 		_ADR	MSMOD
 1794 3d74 D32E0000 		_UNNEST
 1795              	
 1796              	/**************************
 1797              	    MOD	 ( n n -- r )
 1798              	 	Signed divide. Return
 1799              		mod only.
 1800              	**************************/
 1801 3d78 5A3D0000 		_HEADER MODD,3,"MOD"
 1801      034D4F44 
 1802 3d80 504700BF 		_NEST
 1803 3d84 613D0000 		_ADR	SLMOD
 1804 3d88 8D320000 		_ADR	DROP
 1805 3d8c D32E0000 		_UNNEST
 1806              	
 1807              	/*************************
 1808              	    /	   ( n n -- q )
 1809              	 	Signed divide. Return
 1810              		quotient only.
 1811              	**************************/
 1812 3d90 7C3D0000 		_HEADER SLASH,1,"/"
 1812      012F00BF 
 1813 3d98 504700BF 		_NEST
 1814 3d9c 613D0000 		_ADR	SLMOD
 1815 3da0 BD320000 		_ADR	SWAP
 1816 3da4 8D320000 		_ADR	DROP
 1817 3da8 D32E0000 		_UNNEST
 1818              	
 1819              	//******************************
 1820              	//   */MOD	( n1 n2 n3 -- r q )
 1821              	/*   Multiply n1 and n2, then 
 1822              	   divide by n3. Return 
 1823              	   mod and quotient.
 1824              	******************************/
 1825 3dac 943D0000 		_HEADER SSMOD,5,"*/MOD"
 1825      052A2F4D 
 1825      4F4400BF 
 1826 3db8 504700BF 		_NEST
 1827 3dbc 19320000 		_ADR	TOR
 1828 3dc0 31340000 		_ADR	MSTAR
 1829 3dc4 B5310000 		_ADR	RFROM
 1830 3dc8 313B0000 		_ADR	MSMOD
 1831 3dcc D32E0000 		_UNNEST
 1832              	
 1833              	//*******************************
 1834              	//  */ ( n1 n2 n3 -- q )
 1835              	/* 	Multiply n1 by n2, then 
 1836              		divide by n3. Return quotient
 1837              		only.
 1838              	*******************************/
ARM GAS  forth.s 			page 148


 1839 3dd0 B03D0000 		_HEADER STASL,2,"*/"
 1839      022A2F00 
 1840 3dd8 504700BF 		_NEST
 1841 3ddc B93D0000 		_ADR	SSMOD
 1842 3de0 BD320000 		_ADR	SWAP
 1843 3de4 8D320000 		_ADR	DROP
 1844 3de8 D32E0000 		_UNNEST
 1845              	
 1846              	/*******************
 1847              	  Miscellaneous
 1848              	*******************/
 1849              	
 1850              	/*************************
 1851              		CHAR+ ( a -- a+ )
 1852              		increment a by one 
 1853              		char size unit. 
 1854              	*************************/
 1855 3dec D43D0000 		_HEADER CHARP,5,"CHAR+"
 1855      05434841 
 1855      522B00BF 
 1856 3df8 06F10106 		add TOS,#1
 1857 3dfc FFF766B8 		_NEXT 
 1858              	
 1859              	/*************************
 1860              		CHARS ( n1 -- n1 )
 1861              		address size of 
 1862              		n1 character
 1863              		same on this system 
 1864              	*************************/
 1865 3e00 F03D0000 		_HEADER CHARS,5,"CHARS"
 1865      05434841 
 1865      525300BF 
 1866 3e0c FFF75EB8 		_NEXT 
 1867              	
 1868              	
 1869              	
 1870              	/*************************
 1871              		ALIGN ( -- )
 1872              		align data pointer 
 1873              		to cell boundary 
 1874              	************************/
 1875 3e10 043E0000 		_HEADER ALIGN,5,"ALIGN"
 1875      05414C49 
 1875      474E00BF 
 1876 3e1c E06C     		ldr T0,[UP,#USER_CTOP]
 1877 3e1e 00F10300 		add T0,#(CELLL-1)
 1878 3e22 20F00300 		and T0,#0xFFFFFFFC 
 1879 3e26 E064     		str T0,[UP,#USER_CTOP]
 1880 3e28 FFF750B8 		_NEXT 
 1881              	
 1882              	
 1883              	/*************************
 1884              	    ALIGNED	( b -- a )
 1885              	 	Align address to the 
 1886              		cell boundary.
 1887              	**************************/
 1888 3e2c 143E0000 		_HEADER ALGND,7,"ALIGNED"
ARM GAS  forth.s 			page 149


 1888      07414C49 
 1888      474E4544 
 1889 3e38 06F10306 		ADD	TOS,TOS,#3
 1890 3e3c 6FF00305 		MVN	WP,#3
 1891 3e40 06EA0506 		AND	TOS,TOS,WP
 1892 3e44 FFF742B8 		_NEXT
 1893              	
 1894              	/****************************
 1895              	    >CHAR	( c -- c )
 1896              	 	Filter non-printing 
 1897              		characters.
 1898              	****************************/
 1899 3e48 303E0000 		_HEADER TCHAR,5,">CHAR"
 1899      053E4348 
 1899      415200BF 
 1900 3e54 504700BF 		_NEST
 1901 3e58 F3300000 		_DOLIT  0x7F
 1901      7F000000 
 1902 3e60 69330000 		_ADR	ANDD
 1903 3e64 AD320000 		_ADR	DUPP	// mask msb
 1904 3e68 A5340000 		_ADR	BLANK
 1905 3e6c F3300000 		_DOLIT 	127
 1905      7F000000 
 1906 3e74 C93A0000 		_ADR	WITHI	// check for printable
 1907 3e78 7D360000 		_ADR	INVER
 1908 3e7c 33310000 		_QBRAN	TCHA1
 1908      903E0000 
 1909 3e84 8D320000 		_ADR	DROP
 1910 3e88 F3300000 		_DOLIT 	'_'	// replace non-printables
 1910      5F000000 
 1911              	TCHA1:
 1912 3e90 D32E0000 		  _UNNEST
 1913              	
 1914              	/************************
 1915              	    DEPTH	( -- n )
 1916              	 	Return the depth of
 1917              		the data stack.
 1918              	***********************/
 1919 3e94 4C3E0000 		_HEADER DEPTH,5,"DEPTH"
 1919      05444550 
 1919      544800BF 
 1920 3ea0 4FF6B062 		_MOV32 T2,SPP 
 1920      C2F20102 
 1921 3ea8 A2EB0702 		SUB	T2,T2,DSP
 1922 3eac 47F8046D 		_PUSH
 1923 3eb0 4FEAA206 		ASR	TOS,T2,#2
 1924 3eb4 FFF70AB8 		_NEXT
 1925              	
 1926              	/*****************************
 1927              	    PICK	( ... +n -- ... w )
 1928              	 	Copy the nth stack item 
 1929              		to tos.
 1930              	******************************/
 1931 3eb8 983E0000 		_HEADER PICK,4,"PICK"
 1931      04504943 
 1931      4B0000BF 
 1932 3ec4 4FEA8606 		lsl TOS,#2 
ARM GAS  forth.s 			page 150


 1933 3ec8 BE59     		ldr TOS,[DSP,TOS]
 1934 3eca FEF7FFBF 		_NEXT 
 1935              	
 1936              	/*****************************
 1937              		PUT ( xn..x0 w i -- xi...x0 )
 1938              		put value w at position 
 1939              		xi on stack 
 1940              		i in range [0..n] 
 1941              	*****************************/
 1942 3ece BC3E0000 		_HEADER PUT,3,"PUT"
 1942      03505554 
 1942      00BF
 1943 3ed8 3546     		mov WP,TOS 
 1944 3eda 57F8046B 		_POP 
 1945 3ede 4FEA8505 		lsl WP,#2 
 1946 3ee2 7E51     		str TOS,[DSP,WP]
 1947 3ee4 57F8046B 		_POP 
 1948 3ee8 FEF7F0BF 		_NEXT 
 1949              	
 1950              	/*********************
 1951              	  Memory access
 1952              	*********************/
 1953              	
 1954              	/*************************
 1955              	    HERE	( -- a )
 1956              	 	Return the top of
 1957              		the code dictionary.
 1958              	*************************/
 1959 3eec D23E0000 		_HEADER HERE,4,"HERE"
 1959      04484552 
 1959      450000BF 
 1960 3ef8 504700BF 		_NEST
 1961 3efc C9390000 		_ADR	CPP
 1962 3f00 89310000 		_ADR	AT
 1963 3f04 D32E0000 		_UNNEST
 1964              	
 1965              	/***************************	
 1966              	    PAD	 ( -- a )
 1967              	 	Return the address of 
 1968              		a temporary buffer.
 1969              	***************************/
 1970 3f08 F03E0000 		_HEADER PAD,3,"PAD"
 1970      03504144 
 1971 3f10 504700BF 		_NEST
 1972 3f14 F93E0000 		_ADR	HERE
 1973 3f18 F3300000 		_DOLIT 80
 1973      50000000 
 1974 3f20 E9330000 		_ADR PLUS 
 1975 3f24 D32E0000 		_UNNEST
 1976              	
 1977              	/***********************
 1978              	    TIB	 ( -- a )
 1979              	 	Return the address 
 1980              		of the terminal 
 1981              		input buffer.
 1982              	************************/
 1983 3f28 0C3F0000 		_HEADER TIB,3,"TIB"
ARM GAS  forth.s 			page 151


 1983      03544942 
 1984 3f30 47F8046D 		_PUSH
 1985 3f34 666B     		ldr TOS,[UP,#TIBUF]
 1986 3f36 FEF7C9BF 		_NEXT
 1987              	
 1988              	/*************************
 1989              		SOURCE-ID, ( -- 0 | -1 )
 1990              	output:
 1991              		-1 	String (via EVALUATE)	
 1992              		0 	User input device
 1993              	*****************************/
 1994 3f3a 2C3F0000 		_HEADER SOURCID,9,"SOURCE-ID"
 1994      09534F55 
 1994      5243452D 
 1994      4944
 1995 3f48 47F8046D 		_PUSH 
 1996 3f4c A66B     		ldr TOS,[UP,#SRCID]
 1997 3f4e FEF7BDBF 		_NEXT 
 1998              	
 1999              	
 2000              	/***********************************
 2001              		SOURCE ( -- a u )
 2002              	output:
 2003              		a  address of transaction buffer 
 2004              		u  # char in buffer 
 2005              	***********************************/
 2006 3f52 3E3F0000 		_HEADER SOURCE,6,"SOURCE"
 2006      06534F55 
 2006      52434500 
 2006      00BF
 2007 3f60 504700BF 		_NEST 
 2008 3f64 F3300000 		_DOLIT  UPP+SRC 
 2008      30000020 
 2009 3f6c 45380000 		_ADR   DAT 
 2010 3f70 D32E0000 		_UNNEST 
 2011              	
 2012              	/*************************
 2013              	    @EXECUTE	( a -- )
 2014              	 	Execute vector stored
 2015              		in address a.
 2016              	*************************/
 2017 3f74 563F0000 		_HEADER ATEXE,8,"@EXECUTE"
 2017      08404558 
 2017      45435554 
 2017      450000BF 
 2018 3f84 3500     		MOVS	WP,TOS
 2019 3f86 57F8046B 		_POP
 2020 3f8a 2D68     		LDR	WP,[WP]
 2021 3f8c 45F00105 		ORR	WP,WP,#1
 2022 3f90 18BF     	    IT NE 
 2023 3f92 2847     		BXNE	WP
 2024 3f94 FEF79ABF 		_NEXT
 2025              	
 2026              	/*******************************
 2027              	    CMOVE	( b1 b2 u -- )
 2028              	 	Copy u bytes from b1 to b2.
 2029              	********************************/
ARM GAS  forth.s 			page 152


 2030 3f98 783F0000 		_HEADER CMOVE,5,"CMOVE"
 2030      05434D4F 
 2030      564500BF 
 2031 3fa4 012E     		CMP TOS,#1 
 2032 3fa6 0DD4     		BMI CMOV3 
 2033 3fa8 57F8042B 		LDR	T2,[DSP],#4
 2034 3fac 57F8043B 		LDR	T3,[DSP],#4
 2035 3fb0 03E0     		B CMOV1
 2036              	CMOV0:
 2037 3fb2 13F8015B 		LDRB	WP,[T3],#1
 2038 3fb6 02F8015B 		STRB	WP,[T2],#1
 2039              	CMOV1:
 2040 3fba 3600     		MOVS	TOS,TOS
 2041 3fbc 04D0     		BEQ	CMOV2
 2042 3fbe A6F10106 		SUB	TOS,TOS,#1
 2043 3fc2 F6E7     		B CMOV0
 2044              	CMOV3: 
 2045 3fc4 07F10807 		ADD  DSP,#2*CELLL  
 2046              	CMOV2:
 2047 3fc8 57F8046B 		_POP
 2048 3fcc FEF77EBF 		_NEXT
 2049              	
 2050              	/*********************************
 2051              		MOVE ( a1 a2 u -- )
 2052              		alias for CMOVE 
 2053              	*********************************/
 2054 3fd0 9C3F0000 		_HEADER MOVE,4,"MOVE"
 2054      044D4F56 
 2054      450000BF 
 2055 3fdc E2E7     		B CMOVE 
 2056              	
 2057              	
 2058              	/***************************
 2059              	    WMOVE	( a1 a2 u -- )
 2060              	 	Copy u byte from a1 to a2
 2061              		round u to upper modulo 4 
 2062              	*******************************/
 2063 3fde D43F0000 		_HEADER WMOVE,5,"WMOVE"
 2063      05574D4F 
 2063      5645
 2064 3fe8 4FF00400 		MOV T0,#4
 2065 3fec 06F10306 		ADD TOS,#3 
 2066 3ff0 26F00306 		BIC TOS,#3
 2067 3ff4 57F8041B 		LDR	T1,[DSP],#4 // dest
 2068 3ff8 57F8042B 		LDR	T2,[DSP],#4 // src 
 2069 3ffc 8A42     		CMP T2,T1 
 2070 3ffe 08D5     		BPL MOVE1
 2071 4000 6FF00300 		MOV T0,#-4 
 2072 4004 3144     		ADD T1,TOS
 2073 4006 3244     		ADD T2,TOS 
 2074 4008 01E0     		B MOVE3
 2075              	MOVE0:
 2076 400a 1568     		LDR	WP,[T2]
 2077 400c 0D60     		STR	WP,[T1]
 2078              	MOVE3: 
 2079 400e 0144     		ADD T1,T0 
 2080 4010 0244     		ADD T2,T0 
ARM GAS  forth.s 			page 153


 2081              	MOVE1:
 2082 4012 3600     		MOVS TOS,TOS
 2083 4014 02D0     		BEQ	MOVE2
 2084 4016 A6F10406 		SUB	TOS,TOS,#4
 2085 401a F6E7     		B MOVE0
 2086              	MOVE2:
 2087 401c 57F8046B 		_POP
 2088 4020 FEF754BF 		_NEXT
 2089              	
 2090              	/**************************
 2091              	    FILL	( b u c -- )
 2092              	 	Fill u bytes of character
 2093              		c to area beginning at b.
 2094              	******************************/
 2095 4024 E23F0000 		_HEADER FILL,4,"FILL"
 2095      0446494C 
 2095      4C0000BF 
 2096 4030 03CF     		LDMFD DSP!,{T0,T1} 
 2097 4032 0000     		MOVS T0,T0 
 2098 4034 03D0     		BEQ FILL2
 2099              	FILL1:
 2100 4036 01F8016B 		STRB	TOS,[T1],#1
 2101 403a 0138     		SUBS	T0,T0,#1
 2102 403c FBD1     		BNE FILL1
 2103              	FILL2:
 2104 403e 57F8046B 		_POP
 2105 4042 FEF743BF 		_NEXT
 2106              	
 2107              	/*****************************
 2108              	CORE EXTENSION 
 2109              		ERASE ( a u -- )
 2110              		fill u bytes with zeros 
 2111              		starting at a 
 2112              	*****************************/
 2113 4046 28400000 		_HEADER ERASE,5,"ERASE"
 2113      05455241 
 2113      5345
 2114 4050 504700BF 		_NEST 
 2115 4054 AD320000 		_ADR	DUPP 
 2116 4058 2D330000 		_ADR	ZGREAT 
 2117 405c 33310000 		_QBRAN	1f 
 2117      74400000 
 2118 4064 F3300000 		_DOLIT	0 
 2118      00000000 
 2119 406c 31400000 		_ADR	FILL 
 2120 4070 D32E0000 		_UNNEST 
 2121 4074 B9350000 	1:   _ADR	DDROP 
 2122 4078 D32E0000 		_UNNEST 
 2123              	
 2124              	
 2125              	/*****************************
 2126              	    PACK$	( b u a -- a )
 2127              	 	Build a counted word with
 2128              		u characters from b. 
 2129              		Null fill.
 2130              	*****************************/
 2131 407c 4A400000 		_HEADER PACKS,5,"PACK$"
ARM GAS  forth.s 			page 154


 2131      05504143 
 2131      4B2400BF 
 2132 4088 504700BF 		_NEST
 2133 408c 393E0000 		_ADR	ALGND
 2134 4090 AD320000 		_ADR	DUPP
 2135 4094 19320000 		_ADR	TOR		// strings only on cell boundary
 2136 4098 ED320000 		_ADR	OVER
 2137 409c E9330000 		_ADR	PLUS
 2138 40a0 45340000 		_ADR	ONEP 
 2139 40a4 F3300000 		_DOLIT 	0xFFFFFFFC
 2139      FCFFFFFF 
 2140 40ac 69330000 		_ADR	ANDD			// count mod cell
 2141 40b0 F3300000 		_DOLIT 	0
 2141      00000000 
 2142 40b8 BD320000 		_ADR	SWAP
 2143 40bc 75310000 		_ADR	STORE			// null fill cell
 2144 40c0 E9310000 		_ADR	RAT
 2145 40c4 E1350000 		_ADR	DDUP
 2146 40c8 95310000 		_ADR	CSTOR
 2147 40cc 45340000 		_ADR	ONEP			// save count
 2148 40d0 BD320000 		_ADR	SWAP
 2149 40d4 A53F0000 		_ADR	CMOVE
 2150 40d8 B5310000 		_ADR	RFROM
 2151 40dc D32E0000 		_UNNEST   			// move string
 2152              	
 2153              	/***********************************
 2154              	  Numeric output, single precision
 2155              	***********************************/
 2156              	
 2157              	/**************************
 2158              	    DIGIT	( u -- c )
 2159              	 	Convert digit u to 
 2160              		a character.
 2161              	***************************/
 2162 40e0 80400000 		_HEADER DIGIT,5,"DIGIT"
 2162      05444947 
 2162      495400BF 
 2163 40ec 504700BF 		_NEST
 2164 40f0 F3300000 		_DOLIT 9
 2164      09000000 
 2165 40f8 ED320000 		_ADR	OVER
 2166 40fc 89370000 		_ADR	LESS
 2167 4100 F3300000 		_DOLIT	7
 2167      07000000 
 2168 4108 69330000 		_ADR	ANDD
 2169 410c E9330000 		_ADR	PLUS
 2170 4110 F3300000 		_DOLIT	'0'
 2170      30000000 
 2171 4118 E9330000 		_ADR	PLUS 
 2172 411c D32E0000 		_UNNEST
 2173              	
 2174              	/*********************************
 2175              	    EXTRACT	( ud base -- ud c )
 2176              	 	Extract the least significant
 2177              		digit from positive double.
 2178              	**********************************/
 2179 4120 E4400000 		_HEADER EXTRC,7,"EXTRACT"
ARM GAS  forth.s 			page 155


 2179      07455854 
 2179      52414354 
 2180 412c 504700BF 		_NEST
 2181 4130 813C0000 		_ADR	DSLMOD
 2182 4134 91350000 		_ADR	ROT
 2183 4138 ED400000 		_ADR	DIGIT
 2184 413c D32E0000 		_UNNEST
 2185              	
 2186              	/***************************
 2187              	    <#	  ( -- )
 2188              	 	Initiate the numeric
 2189              		output process.
 2190              	****************************/
 2191 4140 24410000 		_HEADER BDIGS,2,"<#"
 2191      023C2300 
 2192 4148 504700BF 		_NEST
 2193 414c 113F0000 		_ADR	PAD
 2194 4150 9D390000 		_ADR	HLD
 2195 4154 75310000 		_ADR	STORE
 2196 4158 D32E0000 		_UNNEST
 2197              	
 2198              	/*********************************
 2199              	    HOLD	( c -- )
 2200              	 	Insert a character into the 
 2201              		numeric output string.
 2202              	**********************************/
 2203 415c 44410000 		_HEADER HOLD,4,"HOLD"
 2203      04484F4C 
 2203      440000BF 
 2204 4168 504700BF 		_NEST
 2205 416c 9D390000 		_ADR	HLD
 2206 4170 89310000 		_ADR	AT
 2207 4174 55340000 		_ADR	ONEM
 2208 4178 AD320000 		_ADR	DUPP
 2209 417c 9D390000 		_ADR	HLD
 2210 4180 75310000 		_ADR	STORE
 2211 4184 95310000 		_ADR	CSTOR
 2212 4188 D32E0000 		_UNNEST
 2213              	
 2214              	/********************************
 2215              	CORE EXTENSION 
 2216              		HOLDS ( c-addr u -- )
 2217              		add string to pictured 
 2218              		numeric output.
 2219              	*********************************/
 2220 418c 60410000 		_HEADER HOLDS,5,"HOLDS" 
 2220      05484F4C 
 2220      445300BF 
 2221 4198 504700BF 		_NEST 
 2222 419c 9D390000 		_ADR	HLD   
 2223 41a0 89310000 		_ADR	AT     // c-addr u a 
 2224 41a4 ED320000 		_ADR	OVER 
 2225 41a8 F9330000 		_ADR	SUBB 
 2226 41ac AD320000 		_ADR	DUPP 
 2227 41b0 9D390000 		_ADR	HLD 
 2228 41b4 75310000 		_ADR	STORE
 2229 41b8 BD320000 		_ADR	SWAP  
ARM GAS  forth.s 			page 156


 2230 41bc A53F0000 		_ADR	CMOVE  
 2231 41c0 D32E0000 		_UNNEST 
 2232              	
 2233              	
 2234              	/***********************
 2235              	    #	   ( ud -- ud )
 2236              	 	Extract one digit 
 2237              		from ud and append 
 2238              		the digit to output 
 2239              		string.
 2240              	*************************/
 2241 41c4 90410000 		_HEADER DIG,1,"#"
 2241      012300BF 
 2242 41cc 504700BF 		_NEST
 2243 41d0 09390000 		_ADR	BASE
 2244 41d4 89310000 		_ADR	AT
 2245 41d8 2D410000 		_ADR	EXTRC
 2246 41dc 69410000 		_ADR	HOLD
 2247 41e0 D32E0000 		_UNNEST
 2248              	
 2249              	/***************************
 2250              	    #S	  ( ud -- 0 )
 2251              	 	Convert ud until all 
 2252              		digits are added to 
 2253              		the output string.
 2254              	***************************/
 2255 41e4 C8410000 		_HEADER DIGS,2,"#S"
 2255      02235300 
 2256 41ec 504700BF 		_NEST
 2257              	DIGS1:
 2258 41f0 CD410000 	    _ADR	DIG
 2259 41f4 E1350000 		_ADR	DDUP
 2260 41f8 7D330000 		_ADR    ORR 
 2261 41fc 33310000 		_QBRAN 	DIGS2
 2261      0C420000 
 2262 4204 5B310000 		_BRAN	DIGS1
 2262      F0410000 
 2263              	DIGS2:
 2264 420c 8D320000 		 _ADR DROP 
 2265 4210 D32E0000 		 _UNNEST
 2266              	
 2267              	/*********************
 2268              	    SIGN	( n -- )
 2269              	 	Add a minus sign
 2270              		to the numeric
 2271              		output string.
 2272              	*********************/
 2273 4214 E8410000 		_HEADER SIGN,4,"SIGN"
 2273      04534947 
 2273      4E0000BF 
 2274 4220 504700BF 		_NEST
 2275 4224 1D330000 		_ADR	ZLESS
 2276 4228 33310000 		_QBRAN	SIGN1
 2276      3C420000 
 2277 4230 F3300000 		_DOLIT '-'
 2277      2D000000 
 2278 4238 69410000 		_ADR	HOLD
ARM GAS  forth.s 			page 157


 2279              	SIGN1:
 2280 423c D32E0000 		  _UNNEST
 2281              	
 2282              	/*************************
 2283              	    #>  ( w -- b u )
 2284              	 	Prepare the output 
 2285              		word to be TYPE'd.
 2286              	************************/
 2287 4240 18420000 		_HEADER EDIGS,2,"#>"
 2287      02233E00 
 2288 4248 504700BF 		_NEST
 2289 424c 8D320000 		_ADR	DROP
 2290 4250 9D390000 		_ADR	HLD
 2291 4254 89310000 		_ADR	AT
 2292 4258 113F0000 		_ADR	PAD
 2293 425c ED320000 		_ADR	OVER
 2294 4260 F9330000 		_ADR	SUBB
 2295 4264 D32E0000 		_UNNEST
 2296              	
 2297              	/**************************
 2298              	    str	 ( n -- b u )
 2299              	 	Convert a signed 
 2300              		integer to a numeric 
 2301              		string.
 2302              	hidden word used by compiler
 2303              	***************************/
 2304              	STRR:
 2305 4268 504700BF 		_NEST
 2306 426c 393C0000 		_ADR 	STOD 
 2307 4270 AD320000 		_ADR	DUPP
 2308 4274 19320000 		_ADR	TOR
 2309 4278 15360000 		_ADR	DABS
 2310 427c 49410000 		_ADR	BDIGS
 2311 4280 ED410000 		_ADR	DIGS
 2312 4284 B5310000 		_ADR	RFROM
 2313 4288 21420000 		_ADR	SIGN
 2314 428c 49420000 		_ADR	EDIGS
 2315 4290 D32E0000 		_UNNEST
 2316              	
 2317              	/*************************
 2318              	    HEX	 ( -- )
 2319              	 	Use radix 16 as 
 2320              		base for numeric 
 2321              		conversions.
 2322              	*************************/
 2323 4294 44420000 		_HEADER HEX,3,"HEX"
 2323      03484558 
 2324 429c 504700BF 		_NEST
 2325 42a0 F3300000 		_DOLIT 16
 2325      10000000 
 2326 42a8 09390000 		_ADR	BASE
 2327 42ac 75310000 		_ADR	STORE
 2328 42b0 D32E0000 		_UNNEST
 2329              	
 2330              	/**************************
 2331              		BIN ( -- )
 2332              		Use radix 2 as 
ARM GAS  forth.s 			page 158


 2333              		base for numeric 
 2334              		conversion 
 2335              	**************************/
 2336 42b4 98420000 		_HEADER BIN,3,"BIN"
 2336      0342494E 
 2337 42bc 504700BF 		_NEST 
 2338 42c0 F3300000 		_DOLIT 2 
 2338      02000000 
 2339 42c8 09390000 		_ADR BASE 
 2340 42cc 75310000 		_ADR STORE
 2341 42d0 D32E0000 		_UNNEST 
 2342              	
 2343              	/************************
 2344              	    DECIMAL	( -- )
 2345              	 	Use radix 10 as base
 2346              		for numeric conversions.
 2347              	*************************/
 2348 42d4 B8420000 		_HEADER DECIM,7,"DECIMAL"
 2348      07444543 
 2348      494D414C 
 2349 42e0 504700BF 		_NEST
 2350 42e4 F3300000 		_DOLIT 10
 2350      0A000000 
 2351 42ec 09390000 		_ADR	BASE
 2352 42f0 75310000 		_ADR	STORE
 2353 42f4 D32E0000 		_UNNEST
 2354              	
 2355              	/************************************
 2356              	  Numeric input
 2357              	***********************************/
 2358              	
 2359              	/***********************************
 2360              	    DIGIT?	( c base -- u t )
 2361              	 	Convert a character to its 
 2362              		numeric value. A flag 
 2363              		indicates success.
 2364              	**********************************/
 2365 42f8 D8420000 		_HEADER DIGTQ,6,"DIGIT?"
 2365      06444947 
 2365      49543F00 
 2366 4304 504700BF 		_NEST
 2367 4308 19320000 		_ADR	TOR
 2368 430c F3300000 		_DOLIT 	'0'
 2368      30000000 
 2369 4314 F9330000 		_ADR	SUBB
 2370 4318 F3300000 		_DOLIT 9
 2370      09000000 
 2371 4320 ED320000 		_ADR	OVER
 2372 4324 89370000 		_ADR	LESS
 2373 4328 33310000 		_QBRAN	DGTQ1
 2373      50430000 
 2374 4330 F3300000 		_DOLIT 7
 2374      07000000 
 2375 4338 F9330000 		_ADR	SUBB
 2376 433c AD320000 		_ADR	DUPP
 2377 4340 F3300000 		_DOLIT	10
 2377      0A000000 
ARM GAS  forth.s 			page 159


 2378 4348 89370000 		_ADR	LESS
 2379 434c 7D330000 		_ADR	ORR
 2380              	DGTQ1:
 2381 4350 AD320000 		_ADR	DUPP
 2382 4354 B5310000 		_ADR	RFROM
 2383 4358 71370000 		_ADR	ULESS
 2384 435c D32E0000 		_UNNEST
 2385              	
 2386              	
 2387              	/*****************************************
 2388              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2389              	  convert unsigned double string 
 2390              	  to double integer adding to ud1 
 2391              	input:
 2392              		ud1  unsiged double 
 2393              		adr1  string address 
 2394              		u1    string length 
 2395              	outpout:
 2396              		ud2   modifield ud1 
 2397              		adr2  point to char not converted 
 2398              		u2    char left in string 
 2399              	**************************************/
 2400 4360 FC420000 		_HEADER TONBR,7,">NUMBER"
 2400      073E4E55 
 2400      4D424552 
 2401 436c 504700BF 		_NEST 
 2402 4370 AD320000 		_ADR DUPP 
 2403 4374 33310000 		_QBRAN 9f 
 2403      DC430000 
 2404 437c ED320000 	1: 	_ADR OVER  // d a u a 
 2405 4380 A9310000 		_ADR CAT   // d  a u c 
 2406 4384 09390000 		_ADR BASE   
 2407 4388 89310000 		_ADR AT      // d a u c base
 2408 438c 05430000 		_ADR DIGTQ   // d a u n flag 
 2409 4390 33310000 		_QBRAN 8f
 2409      D8430000 
 2410 4398 19320000 		_ADR TOR   	 
 2411 439c 55340000 		_ADR ONEM 
 2412 43a0 D1320000 		_ADR DSWAP // a u d 
 2413 43a4 09390000 		_ADR BASE 
 2414 43a8 89310000 		_ADR AT 
 2415 43ac 213D0000 		_ADR DSTAR 
 2416 43b0 B5310000 		_ADR RFROM 
 2417 43b4 F3300000 		_DOLIT 0    
 2417      00000000 
 2418 43bc F5350000 		_ADR DPLUS 
 2419 43c0 D1320000 		_ADR DSWAP 
 2420 43c4 BD320000 		_ADR SWAP 
 2421 43c8 45340000 		_ADR ONEP
 2422 43cc BD320000 		_ADR SWAP  
 2423 43d0 5B310000 		_BRAN 1b 
 2423      7C430000 
 2424 43d8 8D320000 	8:  _ADR DROP
 2425 43dc D32E0000 	9:	_UNNEST 
 2426              	
 2427              	
 2428              	/**************************
ARM GAS  forth.s 			page 160


 2429              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2430              	 check for charcter c 
 2431              	 move pointer if *a==c  
 2432              	**************************/
 2433              	CHARQ:
 2434 43e0 7868     	    ldr T0,[DSP,#4]
 2435 43e2 10F8011B 	    ldrb T1,[T0],#1 
 2436 43e6 3246     	    mov T2,TOS 
 2437 43e8 86EA0606 	    eor TOS,TOS
 2438 43ec 9142     	    cmp T1,T2
 2439 43ee 06D1     	    bne 1f 
 2440 43f0 7860     	    str T0,[DSP,#4]
 2441 43f2 3868     		ldr T0,[DSP]
 2442 43f4 A0F10100 		sub T0,#1 
 2443 43f8 3860     		str T0,[DSP]
 2444 43fa 6FEA0606 	    mvn TOS,TOS  
 2445 43fe FEF765BD 	1:  _NEXT
 2446              	
 2447              	
 2448              	/*********************************
 2449              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2450              	   skip '-'|'+' return -1 if '-' 
 2451              	   else return 0 
 2452              	*********************************/
 2453              	NEGQ: 
 2454 4402 47F8046D 		_PUSH 
 2455 4406 86EA0606 		eor TOS,TOS // false flag 
 2456 440a 7868     		ldr T0,[DSP,#4]
 2457 440c 10F8011B 		ldrb T1,[T0],#1
 2458 4410 2D29     		cmp T1,#'-' 
 2459 4412 02D0     		beq 1f
 2460 4414 2B29     		cmp T1,#'+'
 2461 4416 07D1     		bne 3f 
 2462 4418 01E0     		b 2f 
 2463 441a 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2464 441e 7860     	2:	str T0,[DSP,#4]
 2465 4420 3868     		ldr T0,[DSP]
 2466 4422 A0F10100 		sub T0,#1 
 2467 4426 3860     		str T0,[DSP]
 2468 4428 FEF750BD 	3:	_NEXT 
 2469              	
 2470              	
 2471              	
 2472              	/**********************************
 2473              	    INT?	( a -- n T | a F )
 2474              	 	parse string  at 'a' for 
 2475              		integer. Push a flag on TOS.
 2476              		integer form:
 2477              			[-]hex_digit+  | 
 2478              			$[-]hex_digit+ |
 2479              			%[-]bin_digit+ | 
 2480              			[-]dec_digit+ 
 2481              	**********************************/
 2482 442c 64430000 		_HEADER INTQ,4,"INT?"
 2482      04494E54 
 2482      3F0000BF 
 2483 4438 504700BF 		_NEST
ARM GAS  forth.s 			page 161


 2484              	// save BASE 	
 2485 443c 09390000 		_ADR	BASE
 2486 4440 89310000 		_ADR	AT
 2487 4444 19320000 		_ADR	TOR
 2488 4448 F3300000 		_DOLIT	0      // a 0 
 2488      00000000 
 2489 4450 ED320000 		_ADR	OVER   // a 0 a 
 2490 4454 5D380000 		_ADR	COUNT  // a 0 a+ cnt 
 2491 4458 F3300000 		_DOLIT  '$' 
 2491      24000000 
 2492 4460 E1430000 		_ADR    CHARQ 
 2493 4464 33310000 		_QBRAN  0f 
 2493      78440000 
 2494              	// hexadecimal number 
 2495 446c 9D420000 		_ADR    HEX
 2496 4470 5B310000 		_BRAN   2f 
 2496      90440000 
 2497 4478 F3300000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2497      25000000 
 2498 4480 E1430000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2499 4484 33310000 		_QBRAN  2f
 2499      90440000 
 2500 448c BD420000 		_ADR	BIN 
 2501              	2: // check if negative number 
 2502 4490 03440000 		_ADR    NEGQ 
 2503 4494 19320000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2504 4498 F3300000 		_DOLIT  0
 2504      00000000 
 2505 44a0 AD320000 		_ADR	DUPP 
 2506 44a4 D1320000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2507 44a8 6D430000 		_ADR    TONBR // a 0 d a+ cnt 
 2508 44ac 33310000 		_QBRAN  2f
 2508      C8440000 
 2509              	    // not an integer 
 2510 44b4 B5310000 		_ADR RFROM // a 0 d a sign  
 2511 44b8 B9350000 		_ADR DDROP 
 2512 44bc B9350000 		_ADR DDROP 
 2513 44c0 5B310000 		_BRAN 7f 
 2513      F0440000 
 2514              	2: // valid integer 
 2515 44c8 8D320000 		_ADR	DROP // a 0 d
 2516 44cc D1320000 		_ADR    DSWAP 
 2517 44d0 B9350000 		_ADR    DDROP 
 2518 44d4 8D320000 		_ADR    DROP  // d>s 
 2519 44d8 B5310000 		_ADR    RFROM // n sign 
 2520 44dc 33310000 		_QBRAN  2f
 2520      E8440000 
 2521 44e4 91360000 		_ADR    NEGAT   
 2522 44e8 F3300000 	2:	_DOLIT  -1 
 2522      FFFFFFFF 
 2523              	7: // restore BASE 
 2524 44f0 B5310000 		_ADR	RFROM
 2525 44f4 09390000 		_ADR	BASE
 2526 44f8 75310000 		_ADR	STORE
 2527 44fc D32E0000 		_UNNEST
 2528              	
 2529              	
ARM GAS  forth.s 			page 162


 2530              	/********************************
 2531              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2532              	    parse number, integer or float 
 2533              	    if not a number return ( a 0 ) 
 2534              	    if integer return ( int -1 ) 
 2535              	    if float return ( float -2 )
 2536              	**********************************/
 2537 4500 30440000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2537      074E554D 
 2537      4245523F 
 2538 450c 504700BF 	    _NEST 
 2539 4510 39440000 	    _ADR INTQ
 2540 4514 F9340000 	    _ADR QDUP 
 2541 4518 33310000 	    _QBRAN 2f 
 2541      24450000 
 2542 4520 D32E0000 	    _UNNEST 
 2543 4524 F1270000 	2:  _ADR FLOATQ
 2544 4528 D32E0000 	    _UNNEST 
 2545              	
 2546              	
 2547              	/********************
 2548              	  console I/O
 2549              	********************/
 2550              	
 2551              	/**********************
 2552              	    SPACE	( -- )
 2553              	 	Send the blank 
 2554              		character to 
 2555              		the output device.
 2556              	************************/
 2557 452c 04450000 		_HEADER SPACE,5,"SPACE"
 2557      05535041 
 2557      434500BF 
 2558 4538 504700BF 		_NEST
 2559 453c A5340000 		_ADR	BLANK
 2560 4540 952F0000 		_ADR	EMIT
 2561 4544 D32E0000 		_UNNEST
 2562              	
 2563              	/***************************
 2564              	    SPACES	( +n -- )
 2565              	 	Send n spaces to the 
 2566              		output device.
 2567              	****************************/
 2568 4548 30450000 		_HEADER SPACS,6,"SPACES"
 2568      06535041 
 2568      43455300 
 2569 4554 504700BF 		_NEST
 2570 4558 F3300000 		_DOLIT	0
 2570      00000000 
 2571 4560 D9370000 		_ADR	MAX
 2572 4564 19320000 		_ADR	TOR
 2573 4568 5B310000 		_BRAN	CHAR2
 2573      74450000 
 2574              	CHAR1:
 2575 4570 39450000 		_ADR	SPACE
 2576              	CHAR2:
 2577 4574 15310000 		_DONXT	CHAR1
ARM GAS  forth.s 			page 163


 2577      70450000 
 2578 457c D32E0000 		_UNNEST
 2579              	
 2580              	/***********************
 2581              	    TYPE	( b u -- )
 2582              	 	Output u characters 
 2583              		from b.
 2584              	************************/
 2585 4580 4C450000 		_HEADER TYPEE,4,"TYPE"
 2585      04545950 
 2585      450000BF 
 2586 458c 504700BF 		_NEST
 2587 4590 19320000 		_ADR  TOR   // ( a+1 -- R: u )
 2588 4594 5B310000 		_BRAN	TYPE2
 2588      A8450000 
 2589              	TYPE1:  
 2590 459c 5D380000 		_ADR  COUNT
 2591 45a0 553E0000 		_ADR TCHAR
 2592 45a4 952F0000 		_ADR EMIT
 2593              	TYPE2:  
 2594 45a8 15310000 		_DONXT	TYPE1
 2594      9C450000 
 2595 45b0 8D320000 		_ADR	DROP
 2596 45b4 D32E0000 		_UNNEST
 2597              	
 2598              	/***************************
 2599              		\TYPE ( b u )
 2600              		like TYPE but without 
 2601              		filtering 
 2602              	***************************/
 2603 45b8 84450000 		_HEADER SLTYPE,5,"\\TYPE"
 2603      055C5459 
 2603      504500BF 
 2604 45c4 504700BF 		_NEST 
 2605 45c8 19320000 		_ADR	TOR 
 2606 45cc 5B310000 		_BRAN	2f 
 2606      DC450000 
 2607 45d4 5D380000 	1:	_ADR	COUNT 
 2608 45d8 952F0000 		_ADR	EMIT 
 2609 45dc 15310000 	2:  _DONXT	1b 
 2609      D4450000 
 2610 45e4 8D320000 		_ADR	DROP 
 2611 45e8 D32E0000 		_UNNEST 
 2612              	
 2613              	
 2614              	
 2615              	/***************************
 2616              	    CR	  ( -- )
 2617              	 	Output a carriage return
 2618              		and a line feed.
 2619              	****************************/
 2620 45ec BC450000 		_HEADER CR,2,"CR"
 2620      02435200 
 2621 45f4 504700BF 		_NEST
 2622 45f8 F3300000 		_DOLIT	CRR
 2622      0D000000 
 2623 4600 952F0000 		_ADR	EMIT
ARM GAS  forth.s 			page 164


 2624 4604 F3300000 		_DOLIT	LF
 2624      0A000000 
 2625 460c 952F0000 		_ADR	EMIT
 2626 4610 D32E0000 		_UNNEST
 2627              	
 2628              	/******************************************
 2629              	  do_$	( -- a u )
 2630              	  Return the address of a compiled string.
 2631              	  adjust return address to skip over it.
 2632              	hidden word used by compiler. 
 2633              	******************************************/
 2634              	DOSTR:
 2635 4614 504700BF 		_NEST     
 2636              	/* compiled string address is 2 levels deep */
 2637 4618 B5310000 		_ADR	RFROM	// { -- a1 }
 2638 461c B5310000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2639 4620 AD320000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2640 4624 5D380000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2641 4628 E9330000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2642 462c 393E0000 		_ADR	ALGND	//  end of string
 2643              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2644 4630 19320000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2645 4634 BD320000 		_ADR	SWAP	//  count tugged
 2646 4638 19320000 		_ADR	TOR     //  ( -- a2) is string address
 2647 463c 5D380000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2648 4640 D32E0000 		_UNNEST
 2649              	
 2650              	/******************************************
 2651              	    $"|	( -- a u )
 2652              	 	Run time routine compiled by _". 
 2653              		Return address of a compiled string.
 2654              	hidden word used by compiler
 2655              	*****************************************/
 2656              	STRQP:
 2657 4644 504700BF 		_NEST
 2658 4648 15460000 		_ADR	DOSTR
 2659 464c D32E0000 		_UNNEST			// force a call to dostr
 2660              	
 2661              	
 2662              	/**********************
 2663              	    ."|	( -- )
 2664              	 	Run time routine of ." 
 2665              		Output a compiled string.
 2666              	hidden word used by compiler
 2667              	*****************************/
 2668              	DOTQP:
 2669 4650 504700BF 		_NEST
 2670 4654 15460000 		_ADR	DOSTR
 2671 4658 8D450000 		_ADR	TYPEE 
 2672 465c D32E0000 		_UNNEST
 2673              	
 2674              	/*************************
 2675              		LPAD  ( n+ -- )
 2676              		emit n spaceS + 
 2677              		base character  
 2678              		16 -> $
 2679              		 2 -> %
ARM GAS  forth.s 			page 165


 2680              		 other -> none 
 2681              	*************************/
 2682              	LPAD:
 2683 4660 504700BF 		_NEST 
 2684 4664 21390000 		_ADR BCHR 
 2685 4668 89310000 		_ADR  AT 
 2686 466c 33310000 		_QBRAN 3f 
 2686      D8460000 
 2687 4674 09390000 		_ADR BASE 
 2688 4678 89310000 		_ADR AT 
 2689 467c AD320000 		_ADR DUPP 
 2690 4680 F3300000 		_DOLIT 16
 2690      10000000 
 2691 4688 31370000 		_ADR EQUAL 
 2692 468c 33310000 		_QBRAN 1f
 2692      B4460000 
 2693 4694 8D320000 		_ADR DROP 
 2694 4698 F3300000 		_DOLIT '$'
 2694      24000000 
 2695 46a0 BD320000 	0:	_ADR  SWAP 
 2696 46a4 55340000 		_ADR  ONEM 
 2697 46a8 55450000 		_ADR  SPACS 
 2698 46ac 952F0000 		_ADR  EMIT 
 2699 46b0 D32E0000 		_UNNEST 
 2700 46b4 F3300000 	1:  _DOLIT 2 
 2700      02000000 
 2701 46bc 31370000 		_ADR EQUAL 
 2702 46c0 33310000 		_QBRAN 3f
 2702      D8460000 
 2703 46c8 F3300000 		_DOLIT '%'
 2703      25000000 
 2704 46d0 5B310000 		_BRAN 0b   	
 2704      A0460000 
 2705 46d8 55450000 	3:	_ADR  SPACS 
 2706 46dc D32E0000 		_UNNEST 
 2707              	
 2708              	
 2709              	/******************************
 2710              	    .R	  ( n +n -- )
 2711              	 	Display an integer in a 
 2712              		field of n columns, 
 2713              		right justified.
 2714              	*******************************/
 2715 46e0 F0450000 		_HEADER DOTR,2,".R"
 2715      022E5200 
 2716 46e8 504700BF 		_NEST
 2717 46ec 19320000 		_ADR	TOR
 2718 46f0 393C0000 		_ADR    STOD 
 2719 46f4 D1470000 		_ADR	DTOA 
 2720 46f8 B5310000 		_ADR	RFROM
 2721 46fc ED320000 		_ADR	OVER
 2722 4700 F9330000 		_ADR	SUBB
 2723 4704 61460000 		_ADR    LPAD  
 2724 4708 8D450000 		_ADR	TYPEE
 2725 470c D32E0000 		_UNNEST
 2726              	
 2727              	
ARM GAS  forth.s 			page 166


 2728              	/*************************
 2729              	    U.R	 ( u +n -- )
 2730              	 	Display an unsigned 
 2731              		integer in n column, 
 2732              		right justified.
 2733              	***************************/
 2734 4710 E4460000 		_HEADER UDOTR,3,"U.R"
 2734      03552E52 
 2735 4718 504700BF 		_NEST
 2736 471c 19320000 		_ADR    TOR 
 2737 4720 F3300000 		_DOLIT  0
 2737      00000000 
 2738 4728 D1470000 		_ADR    DTOA 
 2739 472c B5310000 		_ADR	RFROM
 2740 4730 ED320000 		_ADR	OVER
 2741 4734 F9330000 		_ADR	SUBB
 2742 4738 61460000 		_ADR    LPAD  
 2743 473c 8D450000 		_ADR	TYPEE
 2744 4740 D32E0000 		_UNNEST
 2745              	
 2746              	
 2747              	/************************
 2748              	    U.	  ( u -- )
 2749              	 	Display an unsigned 
 2750              		integer in free format.
 2751              	***************************/
 2752 4744 14470000 		_HEADER UDOT,2,"U."
 2752      02552E00 
 2753 474c 504700BF 		_NEST
 2754 4750 F3300000 		_DOLIT  0 
 2754      00000000 
 2755 4758 49410000 		_ADR	BDIGS
 2756 475c ED410000 		_ADR	DIGS
 2757 4760 49420000 		_ADR	EDIGS
 2758 4764 F3300000 		_DOLIT  1 
 2758      01000000 
 2759 476c 61460000 		_ADR	LPAD  
 2760 4770 8D450000 		_ADR	TYPEE
 2761 4774 D32E0000 		_UNNEST
 2762              	
 2763              	
 2764              	/************************
 2765              	    .	   ( w -- )
 2766              	 	Display an integer 
 2767              		in free format, 
 2768              		preceeded by a space.
 2769              	**************************/
 2770 4778 48470000 		_HEADER DOT,1,"."
 2770      012E00BF 
 2771 4780 504700BF 		_NEST
 2772 4784 39450000 		_ADR    SPACE 
 2773 4788 09390000 		_ADR	BASE
 2774 478c 89310000 		_ADR	AT
 2775 4790 F3300000 	1:	_DOLIT  10
 2775      0A000000 
 2776 4798 91330000 		_ADR	XORR	// decimal base?
 2777 479c 33310000 		_QBRAN	DOT1
ARM GAS  forth.s 			page 167


 2777      AC470000 
 2778 47a4 4D470000 		_ADR	UDOT    // no,display unsigned
 2779 47a8 D32E0000 		_UNNEST			
 2780              	DOT1:
 2781 47ac 393C0000 		_ADR    STOD 
 2782 47b0 D1470000 	    _ADR	DTOA
 2783 47b4 F3300000 		_DOLIT  1 
 2783      01000000 
 2784 47bc 61460000 		_ADR	LPAD  
 2785 47c0 8D450000 	1:	_ADR	TYPEE
 2786 47c4 D32E0000 		_UNNEST			// yes, display signed
 2787              	
 2788              	
 2789              	/*************************
 2790              	  D>A ( d -- p u )
 2791              	  convert double integer to 
 2792              	  ASCII string in pad  
 2793              	input:
 2794              		d    int64 to convert 
 2795              	output:
 2796              		p     pointer to string  
 2797              		u     string length 
 2798              	**************************/
 2799 47c8 7C470000 		_HEADER DTOA,3,"D>A" 
 2799      03443E41 
 2800 47d0 504700BF 		_NEST
 2801 47d4 AD320000 	    _ADR DUPP 
 2802 47d8 19320000 		_ADR TOR 
 2803 47dc 15360000 		_ADR DABS 
 2804 47e0 49410000 		_ADR BDIGS
 2805 47e4 ED410000 		_ADR DIGS 
 2806 47e8 B5310000 		_ADR RFROM 
 2807 47ec 21420000 		_ADR SIGN  
 2808 47f0 49420000 		_ADR EDIGS 
 2809 47f4 D32E0000 		_UNNEST 
 2810              	
 2811              	
 2812              	/*************************
 2813              	   D. ( d -- )
 2814              	   display double integer 
 2815              	**************************/
 2816 47f8 CC470000 		_HEADER DDOT,2,"D."
 2816      02442E00 
 2817 4800 504700BF 		_NEST
 2818 4804 39450000 		_ADR SPACE 
 2819 4808 D1470000 		_ADR DTOA 
 2820 480c F3300000 		_DOLIT 1
 2820      01000000 
 2821 4814 61460000 		_ADR LPAD 
 2822 4818 8D450000 		_ADR TYPEE
 2823 481c D32E0000 		_UNNEST 
 2824              	
 2825              	/**************************
 2826              		UD. ( d -- )
 2827              		display unsigned double
 2828              	**************************/
 2829 4820 FC470000 		_HEADER UDDOT,3,"UD."
ARM GAS  forth.s 			page 168


 2829      0355442E 
 2830 4828 504700BF 		_NEST
 2831 482c 39450000 		_ADR SPACE 
 2832 4830 49410000 		_ADR BDIGS
 2833 4834 ED410000 		_ADR DIGS 
 2834 4838 49420000 		_ADR EDIGS 
 2835 483c F3300000 		_DOLIT 1
 2835      01000000 
 2836 4844 61460000 		_ADR LPAD 
 2837 4848 8D450000 		_ADR TYPEE
 2838 484c D32E0000 		_UNNEST 
 2839              	
 2840              	
 2841              	
 2842              	/***********************
 2843              		H. ( w -- )
 2844              		display integer 
 2845              		in hexadecimal 
 2846              	*********************/
 2847 4850 24480000 		_HEADER HDOT,2,"H."
 2847      02482E00 
 2848 4858 504700BF 		_NEST 
 2849 485c 09390000 		_ADR BASE
 2850 4860 89310000 		_ADR AT 
 2851 4864 BD320000 		_ADR SWAP
 2852 4868 9D420000 		_ADR HEX
 2853 486c F3300000 		_DOLIT 0 
 2853      00000000 
 2854 4874 49410000 		_ADR BDIGS
 2855 4878 ED410000 		_ADR DIGS
 2856 487c 49420000 		_ADR EDIGS
 2857 4880 39450000 		_ADR SPACE
 2858 4884 F3300000 		_DOLIT '$'
 2858      24000000 
 2859 488c 952F0000 		_ADR EMIT 
 2860 4890 8D450000 		_ADR TYPEE
 2861 4894 09390000 		_ADR BASE
 2862 4898 75310000 		_ADR STORE  
 2863 489c D32E0000 		_UNNEST 
 2864              	
 2865              	
 2866              	/***********************
 2867              	    ?	   ( a -- )
 2868              	 	Display the contents
 2869              		in a memory cell.
 2870              	*************************/
 2871 48a0 54480000 		_HEADER QUEST,1,"?"
 2871      013F00BF 
 2872 48a8 504700BF 		_NEST
 2873 48ac 89310000 		_ADR	AT
 2874 48b0 81470000 		_ADR	DOT
 2875 48b4 D32E0000 		_UNNEST
 2876              	
 2877              	/**************
 2878              	  Parsing
 2879              	***************/
 2880              	
ARM GAS  forth.s 			page 169


 2881              	/*********************************************
 2882              	    parse	( b u c -- b u delta //  string> )
 2883              	 	Scan word delimited by c. 
 2884              		Return found string and its offset.
 2885              	hidden word used by PARSE
 2886              	**********************************************/
 2887              	PARS:
 2888 48b8 504700BF 		_NEST
 2889 48bc 2D390000 		_ADR	TEMP
 2890 48c0 75310000 		_ADR	STORE
 2891 48c4 ED320000 		_ADR	OVER
 2892 48c8 19320000 		_ADR	TOR
 2893 48cc AD320000 		_ADR	DUPP
 2894 48d0 33310000 		_QBRAN	PARS8
 2894      CC490000 
 2895 48d8 55340000 		_ADR	ONEM
 2896 48dc 2D390000 		_ADR	TEMP
 2897 48e0 89310000 		_ADR	AT
 2898 48e4 A5340000 		_ADR	BLANK
 2899 48e8 31370000 		_ADR	EQUAL
 2900 48ec 33310000 		_QBRAN	PARS3
 2900      40490000 
 2901 48f4 19320000 		_ADR	TOR
 2902              	PARS1:
 2903 48f8 A5340000 		_ADR	BLANK
 2904 48fc ED320000 		_ADR	OVER
 2905 4900 A9310000 		_ADR	CAT	 // skip leading blanks 
 2906 4904 F9330000 		_ADR	SUBB
 2907 4908 1D330000 		_ADR	ZLESS
 2908 490c 7D360000 		_ADR	INVER
 2909 4910 33310000 		_QBRAN	PARS2
 2909      3C490000 
 2910 4918 45340000 		_ADR	ONEP
 2911 491c 15310000 		_DONXT	PARS1
 2911      F8480000 
 2912 4924 B5310000 		_ADR	RFROM
 2913 4928 8D320000 		_ADR	DROP
 2914 492c F3300000 		_DOLIT	0
 2914      00000000 
 2915 4934 AD320000 		_ADR	DUPP
 2916 4938 D32E0000 		_UNNEST
 2917              	PARS2:
 2918 493c B5310000 		_ADR	RFROM
 2919              	PARS3:
 2920 4940 ED320000 		_ADR	OVER
 2921 4944 BD320000 		_ADR	SWAP
 2922 4948 19320000 		_ADR	TOR
 2923              	PARS4:
 2924 494c 2D390000 		_ADR	TEMP
 2925 4950 89310000 		_ADR	AT
 2926 4954 ED320000 		_ADR	OVER
 2927 4958 A9310000 		_ADR	CAT
 2928 495c F9330000 		_ADR	SUBB // scan for delimiter
 2929 4960 2D390000 		_ADR	TEMP
 2930 4964 89310000 		_ADR	AT
 2931 4968 A5340000 		_ADR	BLANK
 2932 496c 31370000 		_ADR	EQUAL
ARM GAS  forth.s 			page 170


 2933 4970 33310000 		_QBRAN	PARS5
 2933      7C490000 
 2934 4978 1D330000 		_ADR	ZLESS
 2935              	PARS5:
 2936 497c 33310000 		_QBRAN	PARS6
 2936      A0490000 
 2937 4984 45340000 		_ADR	ONEP
 2938 4988 15310000 		_DONXT	PARS4
 2938      4C490000 
 2939 4990 AD320000 		_ADR	DUPP
 2940 4994 19320000 		_ADR	TOR
 2941 4998 5B310000 		_BRAN	PARS7
 2941      B4490000 
 2942              	PARS6:
 2943 49a0 B5310000 		_ADR	RFROM
 2944 49a4 8D320000 		_ADR	DROP
 2945 49a8 AD320000 		_ADR	DUPP
 2946 49ac 45340000 		_ADR	ONEP
 2947 49b0 19320000 		_ADR	TOR
 2948              	PARS7:
 2949 49b4 ED320000 		_ADR	OVER
 2950 49b8 F9330000 		_ADR	SUBB
 2951 49bc B5310000 		_ADR	RFROM
 2952 49c0 B5310000 		_ADR	RFROM
 2953 49c4 F9330000 		_ADR	SUBB
 2954 49c8 D32E0000 		_UNNEST
 2955              	PARS8:
 2956 49cc ED320000 		_ADR	OVER
 2957 49d0 B5310000 		_ADR	RFROM
 2958 49d4 F9330000 		_ADR	SUBB
 2959 49d8 D32E0000 		_UNNEST
 2960              	
 2961              	/************************************
 2962              	 CORE EXTENSION 
 2963              	    PARSE	( c -- b u //  string> )
 2964              	 	Scan input stream and return 
 2965              		counted string delimited by c.
 2966              	************************************/
 2967 49dc A4480000 		_HEADER PARSE,5,"PARSE"
 2967      05504152 
 2967      534500BF 
 2968 49e8 504700BF 		_NEST
 2969 49ec 19320000 		_ADR	TOR
 2970 49f0 313F0000 		_ADR	TIB
 2971 49f4 59390000 		_ADR	INN
 2972 49f8 89310000 		_ADR	AT
 2973 49fc E9330000 		_ADR	PLUS			// current input buffer pointer
 2974 4a00 71390000 		_ADR	NTIB
 2975 4a04 89310000 		_ADR	AT
 2976 4a08 59390000 		_ADR	INN
 2977 4a0c 89310000 		_ADR	AT
 2978 4a10 F9330000 		_ADR	SUBB			// remaining count
 2979 4a14 B5310000 		_ADR	RFROM
 2980 4a18 B9480000 		_ADR	PARS
 2981 4a1c 59390000 		_ADR	INN
 2982 4a20 09380000 		_ADR	PSTOR
 2983 4a24 D32E0000 		_UNNEST
ARM GAS  forth.s 			page 171


 2984              	
 2985              	/************************************
 2986              	 CORE EXTENSION 
 2987              		PARSE-NAME ( -- b u )
 2988              		space delimited parse input 
 2989              		buffer 
 2990              	*************************************/
 2991 4a28 E0490000 		_HEADER PARSENAME,10,"PARSE-NAME"
 2991      0A504152 
 2991      53452D4E 
 2991      414D4500 
 2992 4a38 504700BF 		_NEST 
 2993 4a3c A5340000 		_ADR	BLANK  
 2994 4a40 E9490000 		_ADR	PARSE 
 2995 4a44 D32E0000 		_UNNEST 
 2996              	
 2997              	
 2998              	/*******************************
 2999              	    .(	  ( -- )
 3000              	 	Output following string 
 3001              		up to next ) .
 3002              	******************************/
 3003 4a48 2C4A0000 		_HEADER DOTPR,IMEDD+2,".("
 3003      822E2800 
 3004 4a50 504700BF 		_NEST
 3005 4a54 F3300000 		_DOLIT	')'
 3005      29000000 
 3006 4a5c E9490000 		_ADR	PARSE
 3007 4a60 8D450000 		_ADR	TYPEE
 3008 4a64 D32E0000 		_UNNEST
 3009              	
 3010              	/************************
 3011              	    (	   ( -- )
 3012              	 	Ignore following 
 3013              		string up to next )
 3014              		A comment.
 3015              	************************/
 3016 4a68 4C4A0000 		_HEADER PAREN,IMEDD+1,"("
 3016      812800BF 
 3017 4a70 504700BF 		_NEST
 3018 4a74 F3300000 		_DOLIT	')'
 3018      29000000 
 3019 4a7c E9490000 		_ADR	PARSE
 3020 4a80 B9350000 		_ADR	DDROP
 3021 4a84 D32E0000 		_UNNEST
 3022              	
 3023              	/*******************
 3024              	    \	   ( -- )
 3025              	 	Ignore following 
 3026              		text till the 
 3027              		end of line.
 3028              	********************/
 3029 4a88 6C4A0000 		_HEADER BKSLA,IMEDD+1,"\\"
 3029      815C00BF 
 3030 4a90 504700BF 		_NEST
 3031 4a94 71390000 		_ADR	NTIB
 3032 4a98 89310000 		_ADR	AT
ARM GAS  forth.s 			page 172


 3033 4a9c 59390000 		_ADR	INN
 3034 4aa0 75310000 		_ADR	STORE
 3035 4aa4 D32E0000 		_UNNEST
 3036              	
 3037              	/******************************
 3038              	    CHAR	( -- c )
 3039              	 	Parse next word and
 3040              		return its first character.
 3041              	*******************************/
 3042 4aa8 8C4A0000 		_HEADER CHAR,4,"CHAR"
 3042      04434841 
 3042      520000BF 
 3043 4ab4 504700BF 		_NEST
 3044 4ab8 A5340000 		_ADR	BLANK
 3045 4abc E9490000 		_ADR	PARSE
 3046 4ac0 8D320000 		_ADR	DROP
 3047 4ac4 A9310000 		_ADR	CAT
 3048 4ac8 D32E0000 		_UNNEST
 3049              	
 3050              	/**********************************
 3051              		[CHAR] ( -- c )
 3052              		immediate version of CHAR 
 3053              	**********************************/
 3054 4acc AC4A0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 3054      C65B4348 
 3054      41525D00 
 3055 4ad8 504700BF 		_NEST 
 3056 4adc B54A0000 		_ADR CHAR
 3057 4ae0 51540000 		_ADR LITER 
 3058 4ae4 D32E0000 		_UNNEST 
 3059              	
 3060              	/**********************************
 3061              	    WORD	( c -- a //  string> )
 3062              	 	Parse a word from input stream
 3063              		and copy it to code dictionary.
 3064              	***********************************/
 3065 4ae8 D04A0000 		_HEADER WORDD,4,"WORD"
 3065      04574F52 
 3065      440000BF 
 3066 4af4 504700BF 		_NEST
 3067 4af8 E9490000 		_ADR	PARSE
 3068 4afc F93E0000 		_ADR	HERE
 3069 4b00 85340000 		_ADR	CELLP
 3070 4b04 89400000 		_ADR	PACKS
 3071 4b08 D32E0000 		_UNNEST
 3072              	
 3073              	/********************************
 3074              	    TOKEN	( -- a //  string> )
 3075              	 	Parse a word from input 
 3076              		stream and copy it to 
 3077              		name dictionary.
 3078              	*********************************/
 3079 4b0c EC4A0000 		_HEADER TOKEN,5,"TOKEN"
 3079      05544F4B 
 3079      454E00BF 
 3080 4b18 504700BF 		_NEST
 3081 4b1c A5340000 		_ADR	BLANK
ARM GAS  forth.s 			page 173


 3082 4b20 F54A0000 		_ADR	WORDD
 3083 4b24 194D0000 		_ADR	UPPER 
 3084 4b28 D32E0000 		_UNNEST
 3085              	
 3086              	/**********************
 3087              	  Dictionary search
 3088              	***********************/
 3089              	
 3090              	/*************************
 3091              	    >CFA	( nfa -- cfa )
 3092              	 	Return a code field address
 3093              		given a name field address.
 3094              	**************************/
 3095 4b2c 104B0000 		_HEADER TOCFA,4,">CFA"
 3095      043E4346 
 3095      410000BF 
 3096 4b38 504700BF 		_NEST
 3097 4b3c 5D380000 		_ADR	COUNT
 3098 4b40 F3300000 		_DOLIT	0x1F
 3098      1F000000 
 3099 4b48 69330000 		_ADR	ANDD
 3100 4b4c E9330000 		_ADR	PLUS
 3101 4b50 393E0000 		_ADR	ALGND
 3102 4b54 F3300000 		_DOLIT  1
 3102      01000000 
 3103 4b5c 7D330000 		_ADR    ORR    // set thum bit 
 3104 4b60 D32E0000 		_UNNEST
 3105              	
 3106              	/***************************************
 3107              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3108              	 	Compare u bytes in two strings. 
 3109              		Return 0 if identical.
 3110              	
 3111              	  Picatout 2020-12-01, 
 3112              	    Because of problem with .align 
 3113              		directive that doesn't fill 
 3114              		with zero's I had to change 
 3115              		the "SAME?" and "SEARCH" 
 3116              	 	words  to do a byte by byte comparison. 
 3117              	****************************************/
 3118 4b64 304B0000 		_HEADER SAMEQ,5,"SAME?"
 3118      0553414D 
 3118      453F00BF 
 3119 4b70 504700BF 		_NEST
 3120 4b74 19320000 		_ADR	TOR
 3121 4b78 5B310000 		_BRAN	SAME2
 3121      BC4B0000 
 3122              	SAME1:
 3123 4b80 ED320000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3124 4b84 E9310000 		_ADR	RAT   // a1 a2 a1 u 
 3125 4b88 E9330000 		_ADR	PLUS  // a1 a2 a1+u 
 3126 4b8c A9310000 		_ADR	CAT	   // a1 a2 c1    		
 3127 4b90 ED320000 		_ADR	OVER  // a1 a2 c1 a2 
 3128 4b94 E9310000 		_ADR	RAT    
 3129 4b98 E9330000 		_ADR	PLUS    
 3130 4b9c A9310000 		_ADR	CAT	  // a1 a2 c1 c2
 3131 4ba0 F9330000 		_ADR	SUBB  
ARM GAS  forth.s 			page 174


 3132 4ba4 F9340000 		_ADR	QDUP
 3133 4ba8 33310000 		_QBRAN	SAME2
 3133      BC4B0000 
 3134 4bb0 B5310000 		_ADR	RFROM
 3135 4bb4 8D320000 		_ADR	DROP
 3136 4bb8 D32E0000 		_UNNEST	// strings not equal
 3137              	SAME2:
 3138 4bbc 15310000 		_DONXT	SAME1
 3138      804B0000 
 3139 4bc4 F3300000 		_DOLIT	0
 3139      00000000 
 3140 4bcc D32E0000 		_UNNEST	// strings equal
 3141              	
 3142              	/***********************************
 3143              	    SEARCH	( a na -- ca na | a F )
 3144              	 	Search a vocabulary for a string.
 3145              		Return ca and na if succeeded.
 3146              	hidden word used by NAME?
 3147              	
 3148              	  Picatout 2020-12-01,  
 3149              		 Modified from original. 
 3150              	   See comment for word "SAME?" 
 3151              	************************************/
 3152              	SEARCH:
 3153 4bd0 504700BF 		_NEST
 3154 4bd4 BD320000 		_ADR	SWAP			// na a	
 3155 4bd8 5D380000 		_ADR	COUNT			// na a+1 count
 3156 4bdc AD320000 		_ADR	DUPP 
 3157 4be0 2D390000 		_ADR	TEMP
 3158 4be4 75310000 		_ADR	STORE			// na a+1 count 
 3159 4be8 19320000 		_ADR  TOR		// na a+1  R: count  
 3160 4bec BD320000 		_ADR	SWAP			// a+1 na
 3161              	SEARCH1:
 3162 4bf0 AD320000 		_ADR	DUPP			// a+1 na na
 3163 4bf4 33310000 		_QBRAN	SEARCH6	// end of vocabulary
 3163      484C0000 
 3164 4bfc AD320000 		_ADR	DUPP			// a+1 na na
 3165 4c00 A9310000 		_ADR	CAT			// a+1 na name1
 3166 4c04 F3300000 		_DOLIT	MASKK
 3166      1FFFFFFF 
 3167 4c0c 69330000 		_ADR	ANDD
 3168 4c10 E9310000 		_ADR	RAT			// a+1 na name1 count 
 3169 4c14 91330000 		_ADR	XORR			// a+1 na,  same length?
 3170 4c18 33310000 		_QBRAN	SEARCH2
 3170      304C0000 
 3171 4c20 95340000 		_ADR	CELLM			// a+1 la
 3172 4c24 89310000 		_ADR	AT			// a+1 next_na
 3173 4c28 5B310000 		_BRAN	SEARCH1			// try next word
 3173      F04B0000 
 3174              	SEARCH2:   
 3175 4c30 45340000 		_ADR	ONEP			// a+1 na+1
 3176 4c34 2D390000 		_ADR	TEMP
 3177 4c38 89310000 		_ADR	AT			// a+1 na+1 count
 3178 4c3c 714B0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3179              	SEARCH3:	
 3180 4c40 5B310000 		_BRAN	SEARCH4
 3180      604C0000 
ARM GAS  forth.s 			page 175


 3181              	SEARCH6:	
 3182 4c48 B5310000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3183 4c4c 8D320000 		_ADR	DROP			// a+1 0
 3184 4c50 BD320000 		_ADR	SWAP			// 0 a+1
 3185 4c54 55340000 		_ADR	ONEM			// 0 a
 3186 4c58 BD320000 		_ADR	SWAP			// a 0 
 3187 4c5c D32E0000 		_UNNEST			// return without a match
 3188              	SEARCH4:	
 3189 4c60 33310000 		_QBRAN	SEARCH5			// a+1 na+1
 3189      7C4C0000 
 3190 4c68 55340000 		_ADR	ONEM			// a+1 na
 3191 4c6c 95340000 		_ADR	CELLM			// a+4 la
 3192 4c70 89310000 		_ADR	AT			// a+1 next_na
 3193 4c74 5B310000 		_BRAN	SEARCH1			// compare next name
 3193      F04B0000 
 3194              	SEARCH5:	
 3195 4c7c B5310000 		_ADR	RFROM			// a+1 na+1 count
 3196 4c80 8D320000 		_ADR	DROP			// a+1 na+1
 3197 4c84 BD320000 		_ADR	SWAP			// na+1 a+1
 3198 4c88 8D320000 		_ADR	DROP			// na+1
 3199 4c8c 55340000 		_ADR	ONEM			// na
 3200 4c90 AD320000 		_ADR	DUPP			// na na
 3201 4c94 394B0000 		_ADR	TOCFA			// na cfa
 3202 4c98 BD320000 		_ADR	SWAP			// cfa na
 3203 4c9c D32E0000 		_UNNEST			//  return with a match
 3204              	
 3205              	/********************************
 3206              	    NAME?	( a -- ca na | a F )
 3207              	 	Search all context vocabularies 
 3208              		for a string.
 3209              	***********************************/
 3210 4ca0 684B0000 		_HEADER NAMEQ,5,"NAME?"
 3210      054E414D 
 3210      453F00BF 
 3211 4cac 504700BF 		_NEST
 3212 4cb0 B5390000 		_ADR	CNTXT
 3213 4cb4 89310000 		_ADR	AT
 3214 4cb8 D14B0000 		_ADR	SEARCH
 3215 4cbc D32E0000 		_UNNEST
 3216              	
 3217              	/********************
 3218              	  console input
 3219              	********************/
 3220              	
 3221              	/****************************
 3222              		ASCIZ ( a -- a+ )
 3223              		convert counted string to 
 3224              		null terminated string 
 3225              		in pad.
 3226              	*****************************/
 3227 4cc0 A44C0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3227      05415343 
 3227      495A00BF 
 3228 4ccc 504700BF 		_NEST 
 3229 4cd0 5D380000 		_ADR COUNT
 3230 4cd4 AD320000 		_ADR DUPP
 3231 4cd8 19320000 		_ADR TOR 
ARM GAS  forth.s 			page 176


 3232 4cdc 113F0000 		_ADR PAD 
 3233 4ce0 BD320000 		_ADR SWAP
 3234 4ce4 E93F0000 		_ADR WMOVE  
 3235 4ce8 113F0000 		_ADR PAD 
 3236 4cec B5310000 		_ADR RFROM
 3237 4cf0 E9330000 		_ADR PLUS 
 3238 4cf4 F3300000 		_DOLIT 0 
 3238      00000000 
 3239 4cfc BD320000 		_ADR SWAP  
 3240 4d00 95310000 		_ADR CSTOR
 3241 4d04 113F0000 		_ADR PAD   
 3242 4d08 D32E0000 		_UNNEST 
 3243              	
 3244              	/***********************
 3245              		UPPER (cstring -- cstring )
 3246              		convert to upper case in situ
 3247              	*******************************/
 3248 4d0c C44C0000 		_HEADER UPPER,5,"UPPER"
 3248      05555050 
 3248      455200BF 
 3249 4d18 504700BF 		_NEST 
 3250 4d1c AD320000 		_ADR DUPP 
 3251 4d20 19320000 		_ADR TOR 
 3252 4d24 5D380000 		_ADR COUNT
 3253 4d28 F3300000 		_DOLIT 0x1f
 3253      1F000000 
 3254 4d30 69330000 		_ADR ANDD
 3255 4d34 19320000 		_ADR TOR 
 3256 4d38 5B310000 		_BRAN 3f
 3256      8C4D0000 
 3257 4d40 AD320000 	1:  _ADR DUPP 
 3258 4d44 5D380000 		_ADR COUNT 
 3259 4d48 AD320000 		_ADR DUPP 
 3260 4d4c F3300000 		_DOLIT 'a'-1
 3260      60000000 
 3261 4d54 BD370000 		_ADR GREAT
 3262 4d58 33310000 		_QBRAN 2f 
 3262      844D0000 
 3263 4d60 AD320000 		_ADR DUPP 
 3264 4d64 F3300000 		_DOLIT 'z'+1 
 3264      7B000000 
 3265 4d6c 89370000 		_ADR LESS 
 3266 4d70 33310000 		_QBRAN 2f 
 3266      844D0000 
 3267 4d78 F3300000 		_DOLIT 0x5f  
 3267      5F000000 
 3268 4d80 69330000 		_ADR ANDD
 3269 4d84 91350000 	2:	_ADR ROT
 3270 4d88 95310000 		_ADR CSTOR
 3271 4d8c 15310000 	3:  _DONXT 1b
 3271      404D0000 
 3272 4d94 8D320000 		_ADR DROP 
 3273 4d98 B5310000 		_ADR RFROM
 3274 4d9c D32E0000 		_UNNEST 
 3275              	
 3276              	/**************************************
 3277              	   BKSP  ( bot eot cur -- bot eot cur )
ARM GAS  forth.s 			page 177


 3278              	   Move cursor left by one character.
 3279              	hidden word used by KTAP
 3280              	***************************************/
 3281              	BKSP:
 3282 4da0 504700BF 		_NEST
 3283 4da4 19320000 		_ADR	TOR
 3284 4da8 ED320000 		_ADR	OVER
 3285 4dac B5310000 		_ADR	RFROM
 3286 4db0 BD320000 		_ADR	SWAP
 3287 4db4 ED320000 		_ADR	OVER
 3288 4db8 91330000 		_ADR	XORR
 3289 4dbc 33310000 		_QBRAN	BACK1
 3289      E84D0000 
 3290 4dc4 F3300000 		_DOLIT	BKSPP
 3290      08000000 
 3291 4dcc 952F0000 		_ADR	EMIT
 3292 4dd0 55340000 		_ADR	ONEM
 3293 4dd4 A5340000 		_ADR	BLANK
 3294 4dd8 952F0000 		_ADR	EMIT
 3295 4ddc F3300000 		_DOLIT	BKSPP
 3295      08000000 
 3296 4de4 952F0000 		_ADR	EMIT
 3297              	BACK1:
 3298 4de8 D32E0000 		  _UNNEST
 3299              	
 3300              	/****************************************
 3301              	   TAP	 ( bot eot cur c -- bot eot cur )
 3302              	   Accept and echo the key stroke 
 3303              	   and bump the cursor.
 3304              	hidden word used by KTAP 
 3305              	****************************************/
 3306              	TAP:
 3307 4dec 504700BF 		_NEST
 3308 4df0 AD320000 		_ADR	DUPP
 3309 4df4 952F0000 		_ADR	EMIT
 3310 4df8 ED320000 		_ADR	OVER
 3311 4dfc 95310000 		_ADR	CSTOR
 3312 4e00 45340000 		_ADR	ONEP
 3313 4e04 D32E0000 		_UNNEST
 3314              	
 3315              	
 3316              	/*******************************************
 3317              	    kTAP	( bot eot cur c -- bot eot cur )
 3318              	 	Process a key stroke, CR or backspace.
 3319              	hidden word used by ACCEPT 
 3320              	*******************************************/
 3321              	KTAP:
 3322              	TTAP:
 3323 4e08 504700BF 		_NEST
 3324 4e0c AD320000 		_ADR	DUPP
 3325 4e10 F3300000 		_DOLIT	CRR
 3325      0D000000 
 3326 4e18 91330000 		_ADR	XORR
 3327 4e1c 33310000 		_QBRAN  KTAP2
 3327      4C4E0000 
 3328 4e24 F3300000 		_DOLIT	BKSPP
 3328      08000000 
ARM GAS  forth.s 			page 178


 3329 4e2c 91330000 		_ADR	XORR
 3330 4e30 33310000 		_QBRAN	KTAP1
 3330      444E0000 
 3331 4e38 A5340000 		_ADR	BLANK
 3332 4e3c ED4D0000 		_ADR	TAP
 3333 4e40 D32E0000 		_UNNEST
 3334              	//	.word	0			// patch
 3335              	KTAP1:
 3336 4e44 A14D0000 		_ADR	BKSP
 3337 4e48 D32E0000 		_UNNEST
 3338              	KTAP2:
 3339 4e4c 8D320000 		_ADR	DROP
 3340 4e50 BD320000 		_ADR	SWAP
 3341 4e54 8D320000 		_ADR	DROP
 3342 4e58 AD320000 		_ADR	DUPP
 3343 4e5c D32E0000 		_UNNEST
 3344              	
 3345              	/************************************
 3346              	    ACCEPT	( b u -- b u )
 3347              	 	Accept characters to input 
 3348              		buffer. Return with actual count.
 3349              	*************************************/
 3350 4e60 104D0000 		_HEADER ACCEP,6,"ACCEPT"
 3350      06414343 
 3350      45505400 
 3351 4e6c 504700BF 		_NEST
 3352 4e70 ED320000 		_ADR	OVER
 3353 4e74 E9330000 		_ADR	PLUS
 3354 4e78 ED320000 		_ADR	OVER
 3355              	ACCP1:
 3356 4e7c E1350000 		_ADR	DDUP
 3357 4e80 91330000 		_ADR	XORR
 3358 4e84 33310000 		_QBRAN	ACCP4
 3358      C44E0000 
 3359 4e8c 712F0000 		_ADR	KEY
 3360 4e90 AD320000 		_ADR	DUPP
 3361 4e94 A5340000 		_ADR	BLANK
 3362 4e98 F3300000 		_DOLIT 127
 3362      7F000000 
 3363 4ea0 C93A0000 		_ADR	WITHI
 3364 4ea4 33310000 		_QBRAN	ACCP2
 3364      B84E0000 
 3365 4eac ED4D0000 		_ADR	TAP
 3366 4eb0 5B310000 		_BRAN	ACCP3
 3366      BC4E0000 
 3367              	ACCP2:
 3368 4eb8 094E0000 		_ADR	KTAP
 3369              	ACCP3:	  
 3370 4ebc 5B310000 		_BRAN	ACCP1
 3370      7C4E0000 
 3371              	ACCP4:
 3372 4ec4 8D320000 		_ADR	DROP
 3373 4ec8 ED320000 		_ADR	OVER
 3374 4ecc F9330000 		_ADR	SUBB
 3375 4ed0 D32E0000 		_UNNEST
 3376              	
 3377              	/*****************************
ARM GAS  forth.s 			page 179


 3378              	    QUERY	( -- )
 3379              	 	Accept input stream 
 3380              		to terminal input buffer.
 3381              	******************************/
 3382 4ed4 644E0000 		_HEADER QUERY,5,"QUERY"
 3382      05515545 
 3382      525900BF 
 3383 4ee0 504700BF 		_NEST
 3384 4ee4 313F0000 		_ADR	TIB
 3385 4ee8 F3300000 		_DOLIT 80
 3385      50000000 
 3386 4ef0 6D4E0000 		_ADR	ACCEP
 3387 4ef4 71390000 		_ADR	NTIB
 3388 4ef8 75310000 		_ADR	STORE
 3389 4efc 8D320000 		_ADR	DROP
 3390 4f00 F3300000 		_DOLIT	0
 3390      00000000 
 3391 4f08 59390000 		_ADR	INN
 3392 4f0c 75310000 		_ADR	STORE
 3393 4f10 D32E0000 		_UNNEST
 3394              	
 3395              	/*****************************
 3396              	  CORE EXT 
 3397              	  REFILL ( -- )
 3398              	  if SOURCE-ID== 0 call QUERY 
 3399              	  and return TRUE 
 3400              	  if SOURCE-ID=1 return FALSE 
 3401              	******************************/
 3402 4f14 D84E0000 		_HEADER REFILL,6,"REFILL"
 3402      06524546 
 3402      494C4C00 
 3403 4f20 504700BF 		_NEST 
 3404 4f24 493F0000 		_ADR	SOURCID 
 3405 4f28 33310000 		_QBRAN	1f
 3405      384F0000 
 3406 4f30 E9360000 		_ADR	FALSE 
 3407 4f34 D32E0000 		_UNNEST 
 3408 4f38 E14E0000 	1:  _ADR	QUERY 
 3409 4f3c 01370000 		_ADR	TRUE 
 3410 4f40 D32E0000 		_UNNEST 
 3411              	
 3412              	/*****************************
 3413              	  CORE EXT 
 3414              		SAVE-INPUT ( -- n )
 3415              		if SOURCE-ID=0 STACK >IN @ 
 3416              		if SOURCE-ID=1 do nothing 
 3417              	*****************************/
 3418 4f44 184F0000 		_HEADER SAVEINP,10,"SAVE-INPUT"
 3418      0A534156 
 3418      452D494E 
 3418      50555400 
 3419 4f54 504700BF 		_NEST 
 3420 4f58 493F0000 		_ADR SOURCID 
 3421 4f5c 33310000 		_QBRAN 1f 
 3421      684F0000 
 3422 4f64 D32E0000 		_UNNEST 
 3423 4f68 59390000 	1:  _ADR	INN 
ARM GAS  forth.s 			page 180


 3424 4f6c 89310000 		_ADR	AT 
 3425 4f70 D32E0000 		_UNNEST 
 3426              	
 3427              	/*****************************
 3428              	  CORE EXT 
 3429              		RESTORE-INPUT ( n -- flag )
 3430              		if SOURCE-ID=0 n -> >IN stack FALSE 
 3431              		if SOURCE-ID=1 stack TRUE 
 3432              	***************************************/
 3433 4f74 484F0000 		_HEADER RESTINP,13,"RESTORE-INPUT"
 3433      0D524553 
 3433      544F5245 
 3433      2D494E50 
 3433      555400BF 
 3434 4f88 504700BF 		_NEST 
 3435 4f8c 493F0000 		_ADR	SOURCID 
 3436 4f90 33310000 		_QBRAN	1f
 3436      A04F0000 
 3437 4f98 01370000 		_ADR	TRUE 
 3438 4f9c D32E0000 		_UNNEST 
 3439 4fa0 59390000 	1:  _ADR	INN  
 3440 4fa4 75310000 		_ADR	STORE 
 3441 4fa8 E9360000 		_ADR	FALSE 
 3442 4fac D32E0000 		_UNNEST 
 3443              	
 3444              	
 3445              	/********************
 3446              	  Error handling
 3447              	********************/
 3448              	
 3449              	/*********************
 3450              	    ABORT	( a -- )
 3451              	 	Reset data stack 
 3452              		and jump to QUIT.
 3453              	**********************/
 3454 4fb0 784F0000 		_HEADER ABORT,5,"ABORT"
 3454      0541424F 
 3454      525400BF 
 3455 4fbc 504700BF 		_NEST
 3456              	ABORT1: 
 3457 4fc0 C9500000 		_ADR    LBRAC  
 3458 4fc4 49520000 		_ADR	PRESE
 3459 4fc8 F3300000 		_DOLIT  0 
 3459      00000000 
 3460 4fd0 AD320000 		_ADR    DUPP 
 3461 4fd4 F3300000 		_DOLIT  UPP+TOIN 
 3461      2C000020 
 3462 4fdc 25380000 		_ADR    DSTOR 
 3463 4fe0 F3300000 		_DOLIT  TIBB 
 3463      B0FE0120 
 3464 4fe8 F3300000 		_DOLIT  UPP+TIBUF  
 3464      34000020 
 3465 4ff0 75310000 		_ADR    STORE 
 3466 4ff4 F5450000 		_ADR    CR 
 3467 4ff8 5B310000 		_BRAN	QUIT
 3467      60520000 
 3468              	
ARM GAS  forth.s 			page 181


 3469              	
 3470              	/*******************************
 3471              		PRT_ABORT ( a -- )
 3472              	    print message and abort 
 3473              	input:
 3474              		a   address of counted string 	
 3475              	
 3476              	hidden word 
 3477              	*******************************/
 3478              	PRT_ABORT:
 3479 5000 504700BF 		_NEST 
 3480 5004 39450000 		_ADR SPACE 
 3481 5008 5D380000 		_ADR COUNT 
 3482 500c 8D450000 		_ADR TYPEE 
 3483 5010 39450000 		_ADR  SPACE 
 3484 5014 F3300000 		_DOLIT '?'
 3484      3F000000 
 3485 501c 952F0000 		_ADR    EMIT 
 3486 5020 F5450000 		_ADR    CR 
 3487 5024 5B310000 		_BRAN   ABORT1 
 3487      C04F0000 
 3488              	
 3489              	
 3490              	
 3491              	
 3492              	/*******************************
 3493              	    _abort"	( f -- )
 3494              	 	Run time routine of ABORT"
 3495              		Abort with a message.
 3496              	hidden used by compiler 
 3497              	********************************/
 3498              	ABORQ:
 3499 502c 504700BF 		_NEST
 3500 5030 15460000 		_ADR	DOSTR
 3501 5034 91350000 		_ADR	ROT  
 3502 5038 33310000 		_QBRAN	1f	// error flag
 3502      54500000 
 3503 5040 39450000 		_ADR    SPACE 
 3504 5044 8D450000 		_ADR    TYPEE
 3505 5048 F5450000 		_ADR    CR  
 3506 504c 5B310000 		_BRAN   ABORT1
 3506      C04F0000 
 3507              	1:
 3508 5054 B9350000 		_ADR	DDROP
 3509 5058 D32E0000 		_UNNEST			// drop message
 3510              	
 3511              	
 3512              	/************************
 3513              	  The text interpreter
 3514              	************************/
 3515              	
 3516              	/***************************
 3517              	    $INTERPRET  ( a -- )
 3518              	 	Interpret a word. 
 3519              		If failed, try to 
 3520              		convert it to an integer.
 3521              	******************************/
ARM GAS  forth.s 			page 182


 3522 505c B44F0000 		_HEADER INTER,10,"$INTERPRET"
 3522      0A24494E 
 3522      54455250 
 3522      52455400 
 3523 506c 504700BF 		_NEST
 3524 5070 AD4C0000 		_ADR	NAMEQ
 3525 5074 F9340000 		_ADR	QDUP	// ?defined
 3526 5078 33310000 		_QBRAN	INTE1
 3526      AC500000 
 3527 5080 89310000 		_ADR	AT
 3528 5084 F3300000 		_DOLIT	COMPO
 3528      40000000 
 3529 508c 69330000 		_ADR	ANDD	// ?compile only lexicon bits
 3530 5090 2D500000 		_ABORQ	13," compile only"
 3530      0D20636F 
 3530      6D70696C 
 3530      65206F6E 
 3530      6C7900BF 
 3531 50a4 09310000 		_ADR	EXECU
 3532 50a8 D32E0000 		_UNNEST			// execute defined word
 3533              	INTE1:
 3534 50ac 0D450000 		_ADR	NUMBERQ
 3535 50b0 33310000 		_QBRAN	INTE2
 3535      BC500000 
 3536 50b8 D32E0000 		_UNNEST
 3537              	INTE2:
 3538 50bc 01500000 		_ADR	PRT_ABORT	// error
 3539              	
 3540              	/******************************
 3541              	    [	   ( -- )
 3542              	 	Start the text interpreter.
 3543              	*******************************/
 3544 50c0 60500000 		_HEADER LBRAC,IMEDD+1,"["
 3544      815B00BF 
 3545 50c8 504700BF 		_NEST
 3546 50cc F3300000 		_DOLIT	INTER
 3546      6C500000 
 3547 50d4 89390000 		_ADR	TEVAL
 3548 50d8 75310000 		_ADR	STORE
 3549 50dc F3300000 		_DOLIT  0 
 3549      00000000 
 3550 50e4 95380000 		_ADR    STATE 
 3551 50e8 75310000 		_ADR    STORE 
 3552 50ec D32E0000 		_UNNEST
 3553              	
 3554              	/**********************
 3555              	    .OK	 ( -- )
 3556              	 	Display "ok" only 
 3557              		while interpreting.
 3558              	************************/
 3559 50f0 C4500000 		_HEADER DOTOK,3,".OK"
 3559      032E4F4B 
 3560 50f8 504700BF 		_NEST
 3561 50fc F3300000 		_DOLIT	INTER
 3561      6C500000 
 3562 5104 89390000 		_ADR	TEVAL
 3563 5108 89310000 		_ADR	AT
ARM GAS  forth.s 			page 183


 3564 510c 31370000 		_ADR	EQUAL
 3565 5110 33310000 		_QBRAN	DOTO1
 3565      20510000 
 3566 5118 51460000 		_DOTQP	3," ok"
 3566      03206F6B 
 3567              	DOTO1:
 3568 5120 F5450000 		_ADR	CR
 3569 5124 D32E0000 		_UNNEST
 3570              	
 3571              	/*************************
 3572              	    ?STACK	( -- )
 3573              	 	Abort if the data 
 3574              		stack underflows.
 3575              	************************/
 3576 5128 F4500000 		_HEADER QSTAC,6,"?STACK"
 3576      063F5354 
 3576      41434B00 
 3577 5134 504700BF 		_NEST
 3578 5138 A13E0000 		_ADR	DEPTH
 3579 513c 1D330000 		_ADR	ZLESS	// check only for underflow
 3580 5140 2D500000 		_ABORQ	9,"underflow"
 3580      09756E64 
 3580      6572666C 
 3580      6F7700BF 
 3581 5150 D32E0000 		_UNNEST
 3582              	
 3583              	/*******************
 3584              	    EVAL	( -- )
 3585              	 	Interpret the 
 3586              		input stream.
 3587              	*******************/
 3588 5154 2C510000 		_HEADER EVAL,4,"EVAL"
 3588      04455641 
 3588      4C0000BF 
 3589 5160 504700BF 		_NEST
 3590              	EVAL1:
 3591 5164 194B0000 	    _ADR	TOKEN
 3592 5168 AD320000 		_ADR	DUPP
 3593 516c A9310000 		_ADR	CAT	// ?input stream empty
 3594 5170 33310000 		_QBRAN	EVAL2
 3594      8C510000 
 3595 5178 89390000 		_ADR	TEVAL
 3596 517c 853F0000 		_ADR	ATEXE
 3597 5180 35510000 		_ADR	QSTAC	// evaluate input, check stack
 3598 5184 5B310000 		_BRAN	EVAL1
 3598      64510000 
 3599              	EVAL2:
 3600 518c 8D320000 		_ADR	DROP
 3601 5190 F9500000 		_ADR	DOTOK
 3602 5194 D32E0000 		_UNNEST	// prompt
 3603              	
 3604              	
 3605              	/******************************
 3606              		EVALUATE ( ix* a u -- jx* )
 3607              	    interpret string 
 3608              	input:
 3609              	    ix*  argument required 
ARM GAS  forth.s 			page 184


 3610              		a   address string to interpret 
 3611              		u   str length 
 3612              	output:
 3613              		jx*  evalution results 
 3614              	***********************************/
 3615 5198 58510000 		_HEADER EVALUATE,8,"EVALUATE"
 3615      08455641 
 3615      4C554154 
 3615      450000BF 
 3616 51a8 504700BF 		_NEST 
 3617              		// save original source specs
 3618 51ac F3300000 		_DOLIT UPP+TOIN 
 3618      2C000020 
 3619 51b4 AD320000 		_ADR   DUPP 
 3620 51b8 89310000 		_ADR  AT 
 3621 51bc 19320000 		_ADR   TOR 
 3622 51c0 F3300000 		_DOLIT  0
 3622      00000000 
 3623 51c8 BD320000 		_ADR  SWAP
 3624 51cc 75310000 		_ADR   STORE 
 3625 51d0 F3300000 		_DOLIT UPP+SRC 
 3625      30000020 
 3626 51d8 45380000 		_ADR   DAT 
 3627 51dc 2D320000 		_ADR   DTOR 
 3628 51e0 F3300000 		_DOLIT -1
 3628      FFFFFFFF 
 3629 51e8 F3300000 		_DOLIT UPP+SRCID 
 3629      38000020 
 3630 51f0 75310000 		_ADR   STORE 
 3631 51f4 F3300000 		_DOLIT UPP+SRC 
 3631      30000020 
 3632 51fc 25380000 		_ADR   DSTOR
 3633 5200 61510000 		_ADR   EVAL 
 3634              	    // restore original source specs 
 3635 5204 C9310000 		_ADR   DRFROM 
 3636 5208 F3300000 		_DOLIT UPP+SRC 
 3636      30000020 
 3637 5210 25380000 		_ADR   DSTOR 
 3638 5214 B5310000 		_ADR   RFROM 
 3639 5218 F3300000 		_DOLIT UPP+TOIN 
 3639      2C000020 
 3640 5220 75310000 		_ADR   STORE 
 3641 5224 F3300000 		_DOLIT 0 
 3641      00000000 
 3642 522c F3300000 		_DOLIT UPP+SRCID 
 3642      38000020 
 3643 5234 75310000 		_ADR   STORE 
 3644 5238 D32E0000 		_UNNEST 
 3645              	
 3646              	
 3647              	/**********************************
 3648              	    PRESET	( -- )
 3649              	 	Reset data stack pointer 
 3650              		and the terminal input buffer.
 3651              	**********************************/
 3652 523c 9C510000 		_HEADER PRESE,6,"PRESET"
 3652      06505245 
ARM GAS  forth.s 			page 185


 3652      53455400 
 3653 5248 4FF6B067 		_MOV32 DSP,SPP 
 3653      C2F20107 
 3654 5250 FDF73CBE 		_NEXT 
 3655              	
 3656              	
 3657              	/*********************
 3658              	    QUIT	( -- )
 3659              	 	Reset return stack 
 3660              		pointer and start 
 3661              		text interpreter.
 3662              	***********************/
 3663 5254 40520000 		_HEADER QUIT,4,"QUIT"
 3663      04515549 
 3663      540000BF 
 3664 5260 F3300000 		_DOLIT RPP 
 3664      80FF0120 
 3665 5268 49320000 		_ADR RPSTOR 
 3666              	QUIT1:
 3667 526c C9500000 		_ADR	LBRAC			// start interpretation
 3668              	QUIT2:
 3669 5270 E14E0000 		_ADR	QUERY			// get input
 3670 5274 61510000 		_ADR	EVAL
 3671 5278 5B310000 		_BRAN	QUIT2	// continue till error
 3671      70520000 
 3672              	
 3673              	/***************************
 3674              		FORGET ( <string> -- )
 3675              		forget all definition 
 3676              		starting at <string>
 3677              	****************************/
 3678 5280 58520000 		_HEADER FORGET,6,"FORGET"
 3678      06464F52 
 3678      47455400 
 3679 528c 504700BF 		_NEST 
 3680 5290 194B0000 		_ADR TOKEN 
 3681 5294 AD320000 		_ADR DUPP 
 3682 5298 33310000 		_QBRAN 9f 
 3682      D4520000 
 3683 52a0 AD4C0000 		_ADR NAMEQ // ( a -- cfa na | a 0 )
 3684 52a4 F9340000 		_ADR QDUP 
 3685 52a8 33310000 		_QBRAN 8f
 3685      D0520000 
 3686 52b0 95340000 		_ADR CELLM // ( cfa la )
 3687 52b4 AD320000 		_ADR DUPP 
 3688 52b8 C9390000 		_ADR CPP   
 3689 52bc 75310000 		_ADR STORE
 3690 52c0 89310000 		_ADR AT 
 3691 52c4 193A0000 		_ADR LAST 
 3692 52c8 75310000 		_ADR STORE
 3693 52cc 215D0000 		_ADR OVERT 
 3694 52d0 8D320000 	8:  _ADR DROP 
 3695 52d4 D32E0000 	9:	_UNNEST 
 3696              	
 3697              		.p2align 2 
 3698              	
 3699              	/*****************
ARM GAS  forth.s 			page 186


 3700              	  The compiler
 3701              	******************/
 3702              	
 3703              	/**************************************
 3704              		POSTPONE <name> ( -- )
 3705              		use to compile immediate word 
 3706              	**************************************/
 3707 52d8 84520000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3707      C8504F53 
 3707      54504F4E 
 3707      450000BF 
 3708 52e8 504700BF 		_NEST 
 3709 52ec 25530000 		_ADR ITICK
 3710 52f0 A15D0000 		_ADR CALLC  
 3711 52f4 D32E0000 		_UNNEST 
 3712              	
 3713              	
 3714              	/**************************************
 3715              	    '	   ( -- ca )
 3716              	 	Search context vocabularies 
 3717              		for the next word in input stream.
 3718              	***************************************/
 3719 52f8 DC520000 		_HEADER TICK,1,"'"
 3719      012700BF 
 3720 5300 504700BF 		_NEST
 3721 5304 194B0000 		_ADR	TOKEN
 3722 5308 AD4C0000 		_ADR	NAMEQ	// ?defined
 3723 530c 33310000 		_QBRAN	TICK1
 3723      18530000 
 3724 5314 D32E0000 		_UNNEST	// yes, push code address
 3725              	TICK1:
 3726 5318 01500000 		_ADR PRT_ABORT	// error
 3727              	
 3728              	/*****************************************
 3729              		['] ( -- ca )
 3730              		immediate version of ' 
 3731              	****************************************/
 3732 531c FC520000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3732      C35B275D 
 3733 5324 504700BF 		_NEST 
 3734 5328 01530000 		_ADR TICK  
 3735 532c D32E0000 		_UNNEST 
 3736              	
 3737              	
 3738              	/***********************************
 3739              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3740              		search all context for name at 
 3741              		c-adr 
 3742              	input:
 3743              		c-adr   name 
 3744              	output:
 3745              		c-adr  0   not found 
 3746              		xt 1   found word immediate 
 3747              		xt -1  found normal word 
 3748              	***********************************/
 3749 5330 20530000 		_HEADER FIND,4,"FIND"
 3749      0446494E 
ARM GAS  forth.s 			page 187


 3749      440000BF 
 3750 533c 504700BF 		_NEST 
 3751 5340 AD4C0000 		_ADR NAMEQ 
 3752 5344 AD320000 		_ADR DUPP 
 3753 5348 33310000 		_QBRAN 9f
 3753      7C530000 
 3754 5350 A9310000 		_ADR CAT 
 3755 5354 F3300000 		_DOLIT IMEDD
 3755      80000000 
 3756 535c 69330000 		_ADR ANDD 
 3757 5360 F3300000 		_DOLIT 7 
 3757      07000000 
 3758 5368 C1330000 		_ADR RSHIFT  
 3759 536c AD320000 		_ADR DUPP 
 3760 5370 47310000 		_TBRAN 9f 
 3760      7C530000 
 3761 5378 7D360000 		_ADR INVER 
 3762 537c D32E0000 	9:	_UNNEST 
 3763              	
 3764              	
 3765              	
 3766              	/***********************
 3767              	    ALLOT	( n -- )
 3768              	 	Allocate n bytes to 
 3769              		the ram area.
 3770              	************************/
 3771 5380 34530000 		_HEADER ALLOT,5,"ALLOT"
 3771      05414C4C 
 3771      4F5400BF 
 3772 538c 504700BF 		_NEST
 3773 5390 C9390000 		_ADR	CPP
 3774 5394 09380000 		_ADR	PSTOR
 3775 5398 D32E0000 		_UNNEST			// adjust code pointer
 3776              	
 3777              	/******************************
 3778              	    ,	   ( w -- )
 3779              	 	Compile an integer 
 3780              		into dataspace.
 3781              	******************************/
 3782 539c 84530000 		_HEADER COMMA,1,","
 3782      012C00BF 
 3783 53a4 504700BF 		_NEST
 3784 53a8 F93E0000 		_ADR	HERE
 3785 53ac AD320000 		_ADR	DUPP
 3786 53b0 85340000 		_ADR	CELLP	// cell boundary
 3787 53b4 C9390000 		_ADR	CPP
 3788 53b8 75310000 		_ADR	STORE
 3789 53bc 75310000 		_ADR	STORE
 3790 53c0 D32E0000 		_UNNEST	// adjust code pointer, compile
 3791              		.p2align 2 
 3792              	
 3793              	/***********************************
 3794              		C, ( c -- )
 3795              		compile 1 character into 
 3796              		dataspace 
 3797              	************************************/
 3798 53c4 A0530000 		_HEADER CCOMMA,2,"C,"
ARM GAS  forth.s 			page 188


 3798      02432C00 
 3799 53cc 504700BF 		_NEST 
 3800 53d0 F93E0000 		_ADR 	HERE 
 3801 53d4 AD320000 		_ADR	DUPP 
 3802 53d8 45340000 		_ADR    ONEP 
 3803 53dc C9390000 		_ADR    CPP 
 3804 53e0 75310000 		_ADR    STORE 
 3805 53e4 95310000 		_ADR    CSTOR 
 3806 53e8 D32E0000 		_UNNEST 
 3807              	
 3808              	/************************************
 3809              	    [COMPILE]   ( -- //  string> )
 3810              	 	Compile the next immediate word 
 3811              		into code dictionary.
 3812              	*************************************/
 3813 53ec C8530000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3813      895B434F 
 3813      4D50494C 
 3813      455D00BF 
 3814 53fc 504700BF 		_NEST
 3815 5400 01530000 		_ADR	TICK
 3816 5404 A5530000 		_ADR	COMMA
 3817 5408 D32E0000 		_UNNEST
 3818              	
 3819              	/****************************
 3820              	    COMPILE	( -- )
 3821              	 	Compile the next address 
 3822              		in colon list to code 
 3823              		dictionary.
 3824              	*******************************/
 3825 540c F0530000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3825      47434F4D 
 3825      50494C45 
 3826 5418 504700BF 		_NEST
 3827 541c B5310000 		_ADR	RFROM
 3828 5420 AD320000 		_ADR	DUPP 
 3829 5424 89310000 		_ADR	AT
 3830 5428 F3300000 		_DOLIT 1 
 3830      01000000 
 3831 5430 7D330000 		_ADR	ORR 
 3832 5434 A5530000 		_ADR	COMMA 
 3833 5438 85340000 		_ADR	CELLP 
 3834 543c 19320000 		_ADR	TOR 
 3835 5440 D32E0000 		_UNNEST	// adjust return address
 3836              	
 3837              	/*************************
 3838              	    LITERAL	( w -- )
 3839              	 	Compile tos to code 
 3840              		dictionary as an 
 3841              		integer literal.
 3842              	***************************/
 3843 5444 10540000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3843      874C4954 
 3843      4552414C 
 3844 5450 504700BF 		_NEST
 3845 5454 F3300000 		_COMPI	DOLIT
 3845      F3300000 
ARM GAS  forth.s 			page 189


 3845      A5530000 
 3846 5460 A5530000 		_ADR	COMMA
 3847 5464 D32E0000 		_UNNEST
 3848              	
 3849              	/********************
 3850              	    $,"	( -- )
 3851              	 	Compile a literal 
 3852              		string up to next " .
 3853              	hidden word 
 3854              	************************/
 3855              	STRCQ:
 3856 5468 504700BF 		_NEST
 3857 546c F3300000 		_DOLIT -4
 3857      FCFFFFFF 
 3858 5474 C9390000 		_ADR	CPP
 3859 5478 09380000 		_ADR	PSTOR
 3860 547c F3300000 		_DOLIT	'\"'
 3860      22000000 
 3861 5484 F54A0000 		_ADR	WORDD	// move word to code dictionary
 3862 5488 5D380000 		_ADR	COUNT
 3863 548c E9330000 		_ADR	PLUS
 3864 5490 393E0000 		_ADR	ALGND	// calculate aligned end of string
 3865 5494 C9390000 		_ADR	CPP
 3866 5498 75310000 		_ADR	STORE   // adjust the code pointer
 3867 549c D32E0000 		_UNNEST 			
 3868              	
 3869              	/*******************
 3870              	   Structures
 3871              	*******************/
 3872              	
 3873              	/*************************
 3874              	    FOR	 ( -- a )
 3875              	 	Start a FOR-NEXT loop 
 3876              		structure in a colon 
 3877              		definition.
 3878              	**************************/
 3879 54a0 48540000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3879      C3464F52 
 3880 54a8 504700BF 		_NEST
 3881 54ac F3300000 		_COMPI	TOR
 3881      19320000 
 3881      A5530000 
 3882 54b8 F93E0000 		_ADR	HERE
 3883 54bc D32E0000 		_UNNEST
 3884              	
 3885              	/********************************
 3886              		DO ( limit start -- a 0 )
 3887              		initialise a DO...LOOP 
 3888              		or DO...+LOOP 
 3889              	********************************/
 3890 54c0 A4540000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3890      C2444F00 
 3891 54c8 504700BF 		_NEST
 3892 54cc F3300000 		_COMPI DTOR 
 3892      2D320000 
 3892      A5530000 
 3893 54d8 F93E0000 		_ADR HERE 
ARM GAS  forth.s 			page 190


 3894 54dc F3300000 		_DOLIT 0  // end marker used by resolve_leave 
 3894      00000000 
 3895 54e4 D32E0000 		_UNNEST 
 3896              		
 3897              	/******************************
 3898              		?DO ( limit start -- a )	
 3899              	    initialise conditional 
 3900              		?DO ... LOOP 	
 3901              		at run time abort loop 
 3902              		if limit = start 
 3903              	******************************/
 3904 54e8 C4540000 		_HEADER QDO,COMPO+IMEDD+3,"?DO"
 3904      C33F444F 
 3905 54f0 504700BF 		_NEST 
 3906 54f4 F3300000 		_COMPI  DDUP
 3906      E1350000 
 3906      A5530000 
 3907 5500 F3300000 		_COMPI  EQUAL 
 3907      31370000 
 3907      A5530000 
 3908 550c F3300000 		_COMPI  QBRAN
 3908      33310000 
 3908      A5530000 
 3909 5518 F93E0000 		_ADR    HERE 
 3910 551c F3300000 		_DOLIT  0 
 3910      00000000 
 3911 5524 A5530000 		_ADR    COMMA 
 3912 5528 F3300000 		_COMPI  DDROP  
 3912      B9350000 
 3912      A5530000 
 3913 5534 F3300000 		_COMPI  EXIT 
 3913      6D310000 
 3913      A5530000 
 3914 5540 F93E0000 		_ADR    HERE 
 3915 5544 BD320000 		_ADR    SWAP 
 3916 5548 75310000 		_ADR    STORE  
 3917 554c C9540000 		_ADR    DO 
 3918 5550 D32E0000 		_UNNEST 
 3919              	
 3920              	DOPLOOP: // ( n -- R: limit counter )
 3921 5554 3246     		mov T2,TOS 
 3922 5556 57F8046B 		_POP 
 3923 555a B8E80300 		ldmfd RSP!,{T0,T1}
 3924 555e 1044     		add T0,T2 
 3925 5560 28E90300 		stmfd RSP!,{T0,T1}
 3926 5564 8842     		cmp T0,T1 
 3927 5566 05D4     		bmi 9f 
 3928 5568 08F10808 		add RSP,#8
 3929 556c 0CF1040C 		add IP,#4
 3930 5570 FDF7ACBC 		_NEXT 
 3931 5574 DCF800C0 	9:  ldr IP,[IP]
 3932 5578 FDF7A8BC 		_NEXT 
 3933              	
 3934              	
 3935              	/***************************
 3936              		+LOOP ( a -- )
 3937              		increment counter 
ARM GAS  forth.s 			page 191


 3938              		end loop if countr>limit
 3939              	****************************/
 3940 557c EC540000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3940      C52B4C4F 
 3940      4F5000BF 
 3941 5588 504700BF 		_NEST 
 3942 558c F3300000 		_COMPI DOPLOOP 
 3942      55550000 
 3942      A5530000 
 3943 5598 CD550000 		_ADR resolve_leave 
 3944 559c A5530000 		_ADR COMMA
 3945 55a0 D32E0000 		_UNNEST 
 3946              	
 3947              	DOLOOP: // ( -- R: limit counter )
 3948 55a4 D8F80000 		ldr T0,[RSP]
 3949 55a8 00F10100 		add T0,#1
 3950 55ac C8F80000 		str T0,[RSP]
 3951 55b0 D8F80410 		ldr T1,[RSP,#4]
 3952 55b4 8842     		cmp T0,T1 
 3953 55b6 05D4     		bmi 9f
 3954 55b8 08F10808 		add RSP,#8  // drop counter and limit  
 3955 55bc 0CF1040C 		add IP,IP,#4 // skip loop address 
 3956 55c0 FDF784BC 		_NEXT 
 3957 55c4 DCF800C0 	9:  ldr IP,[IP]
 3958 55c8 FDF780BC 		_NEXT 
 3959              	
 3960              	
 3961              	resolve_leave:
 3962 55cc 504700BF 		_NEST
 3963 55d0 F9340000 	1:	_ADR QDUP 
 3964 55d4 33310000 		_QBRAN 2f 
 3964      F4550000 
 3965 55dc F93E0000 		_ADR HERE 
 3966 55e0 85340000 		_ADR CELLP 
 3967 55e4 BD320000 		_ADR SWAP 
 3968 55e8 75310000 		_ADR STORE 
 3969 55ec 5B310000 		_BRAN 1b 
 3969      D0550000 
 3970              	2:
 3971 55f4 D32E0000 		_UNNEST 
 3972              	
 3973              	/********************************
 3974              		LOOP ( a -- )
 3975              		increment counter 
 3976              		end loop if >= limit 
 3977              	*********************************/
 3978 55f8 80550000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3978      C44C4F4F 
 3978      500000BF 
 3979 5604 504700BF 		_NEST 
 3980 5608 F3300000 		_COMPI DOLOOP
 3980      A5550000 
 3980      A5530000 
 3981 5614 CD550000 		_ADR resolve_leave 
 3982 5618 A5530000 		_ADR COMMA  // resolve loop branch 
 3983 561c D32E0000 		_UNNEST 
 3984              	
ARM GAS  forth.s 			page 192


 3985              	/************************************
 3986              		UNLOOP ( -- ) ( R: limit count -- )
 3987              		remove loop parameters from rstack 
 3988              	****************************************/
 3989 5620 FC550000 		_HEADER UNLOOP,6,"UNLOOP"
 3989      06554E4C 
 3989      4F4F5000 
 3990 562c 08F10808 		add RSP,#2*CELLL 
 3991 5630 FDF74CBC 		_NEXT 
 3992              	
 3993              	
 3994              	/*********************************
 3995              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3996              		exit inner DO...LOOP 
 3997              	**********************************/
 3998 5634 24560000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3998      C54C4541 
 3998      564500BF 
 3999 5640 504700BF 		_NEST 
 4000 5644 F3300000 		_COMPI DOLEAVE
 4000      75560000 
 4000      A5530000 
 4001 5650 F93E0000 		_ADR HERE
 4002 5654 ED320000 		_ADR OVER 
 4003 5658 33310000 		_QBRAN 1f
 4003      64560000 
 4004 5660 BD320000 		_ADR SWAP 
 4005 5664 F3300000 	1:	_DOLIT 0 
 4005      00000000 
 4006 566c A5530000 		_ADR COMMA   
 4007 5670 D32E0000 		_UNNEST 
 4008              	
 4009              	// LEAVE runtime
 4010              	// remove limit and counter from rstack  
 4011              	DOLEAVE:
 4012 5674 08F10808 		add RSP,#2*CELLL
 4013 5678 DCF800C0 		ldr IP,[IP] 
 4014 567c FDF726BC 		_NEXT 
 4015              	
 4016              	
 4017              	/**********************
 4018              	    BEGIN	( -- a )
 4019              	 	Start an infinite 
 4020              		or indefinite 
 4021              		loop structure.
 4022              	************************/
 4023 5680 38560000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 4023      C5424547 
 4023      494E00BF 
 4024 568c 504700BF 		_NEST
 4025 5690 F93E0000 		_ADR	HERE
 4026 5694 D32E0000 		_UNNEST
 4027              		.p2align 2 
 4028              	
 4029              	/********************
 4030              	    NEXT	( a -- )
 4031              	 	Terminate a FOR-NEXT
ARM GAS  forth.s 			page 193


 4032              		loop structure.
 4033              	**************************/
 4034 5698 84560000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 4034      C44E4558 
 4034      540000BF 
 4035 56a4 504700BF 		_NEST
 4036 56a8 F3300000 		_COMPI	DONXT
 4036      15310000 
 4036      A5530000 
 4037 56b4 A5530000 		_ADR	COMMA
 4038 56b8 D32E0000 		_UNNEST
 4039              	
 4040              	/***************************
 4041              		I ( -- n )
 4042              		stack for loop counter 
 4043              	***************************/
 4044 56bc 9C560000 		_HEADER I,1+COMPO,"I"
 4044      414900BF 
 4045 56c4 47F8046D 		_PUSH 
 4046 56c8 D8F80060 		ldr TOS,[RSP]
 4047 56cc FDF7FEBB 		_NEXT 
 4048              	
 4049              	/****************************
 4050              		J ( -- n )
 4051              		stack outer loop counter 
 4052              	****************************/
 4053 56d0 C0560000 		_HEADER J,1,"J"
 4053      014A00BF 
 4054 56d8 47F8046D 		_PUSH 
 4055 56dc D8F80460 		ldr TOS,[RSP,#4]
 4056 56e0 FDF7F4BB 		_NEXT 
 4057              	
 4058              	/**********************
 4059              	    UNTIL	( a -- )
 4060              	 	Terminate a BEGIN-UNTIL
 4061              		indefinite loop structure.
 4062              	******************************/
 4063 56e4 D4560000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 4063      C5554E54 
 4063      494C00BF 
 4064 56f0 504700BF 		_NEST
 4065 56f4 F3300000 		_COMPI	QBRAN
 4065      33310000 
 4065      A5530000 
 4066 5700 A5530000 		_ADR	COMMA
 4067 5704 D32E0000 		_UNNEST
 4068              	
 4069              	/**********************
 4070              	    AGAIN	( a -- )
 4071              	 	Terminate a BEGIN-AGAIN
 4072              		infinite loop structure.
 4073              	*****************************/
 4074 5708 E8560000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 4074      C5414741 
 4074      494E00BF 
 4075 5714 504700BF 		_NEST
 4076 5718 F3300000 		_COMPI	BRAN
ARM GAS  forth.s 			page 194


 4076      5B310000 
 4076      A5530000 
 4077 5724 A5530000 		_ADR	COMMA
 4078 5728 D32E0000 		_UNNEST
 4079              	
 4080              	/************************
 4081              	    IF	  ( -- A )
 4082              	 	Begin a conditional
 4083              		branch structure.
 4084              	**************************/
 4085 572c 0C570000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 4085      C2494600 
 4086 5734 504700BF 		_NEST
 4087 5738 F3300000 		_COMPI	QBRAN
 4087      33310000 
 4087      A5530000 
 4088 5744 F93E0000 		_ADR	HERE
 4089 5748 F3300000 		_DOLIT	4
 4089      04000000 
 4090 5750 C9390000 		_ADR	CPP
 4091 5754 09380000 		_ADR	PSTOR
 4092 5758 D32E0000 		_UNNEST
 4093              	
 4094              	/*************************
 4095              	    AHEAD	( -- A )
 4096              	 	Compile a forward 
 4097              		branch instruction.
 4098              	*************************/
 4099 575c 30570000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 4099      C5414845 
 4099      414400BF 
 4100 5768 504700BF 		_NEST
 4101 576c F3300000 		_COMPI	BRAN
 4101      5B310000 
 4101      A5530000 
 4102 5778 F93E0000 		_ADR	HERE
 4103 577c F3300000 		_DOLIT	4
 4103      04000000 
 4104 5784 C9390000 		_ADR	CPP
 4105 5788 09380000 		_ADR	PSTOR
 4106 578c D32E0000 		_UNNEST
 4107              	
 4108              	/**************************
 4109              	    REPEAT	( A a -- )
 4110              	 	Terminate a BEGIN-WHILE-REPEAT
 4111              		indefinite loop.
 4112              	**********************************/
 4113 5790 60570000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 4113      C6524550 
 4113      45415400 
 4114 579c 504700BF 		_NEST
 4115 57a0 15570000 		_ADR	AGAIN
 4116 57a4 F93E0000 		_ADR	HERE
 4117 57a8 BD320000 		_ADR	SWAP
 4118 57ac 75310000 		_ADR	STORE
 4119 57b0 D32E0000 		_UNNEST
 4120              	
ARM GAS  forth.s 			page 195


 4121              	/*********************
 4122              	    THEN	( A -- )
 4123              	 	Terminate a conditional
 4124              		branch structure.
 4125              	*****************************/
 4126 57b4 94570000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 4126      C4544845 
 4126      4E0000BF 
 4127 57c0 504700BF 		_NEST
 4128 57c4 F93E0000 		_ADR	HERE
 4129 57c8 BD320000 		_ADR	SWAP
 4130 57cc 75310000 		_ADR	STORE
 4131 57d0 D32E0000 		_UNNEST
 4132              	
 4133              	/***************************
 4134              	    AFT	 ( a -- a A )
 4135              	 	Jump to THEN in a 
 4136              		FOR-AFT-THEN-NEXT loop 
 4137              		the first time through.
 4138              	*****************************/
 4139 57d4 B8570000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 4139      C3414654 
 4140 57dc 504700BF 		_NEST
 4141 57e0 8D320000 		_ADR	DROP
 4142 57e4 69570000 		_ADR	AHEAD
 4143 57e8 8D560000 		_ADR	BEGIN
 4144 57ec BD320000 		_ADR	SWAP
 4145 57f0 D32E0000 		_UNNEST
 4146              	
 4147              	/**********************
 4148              	    ELSE	( A -- A )
 4149              	 	Start the false 
 4150              		clause in an 
 4151              		IF-ELSE-THEN structure.
 4152              	****************************/
 4153 57f4 D8570000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 4153      C4454C53 
 4153      450000BF 
 4154 5800 504700BF 		_NEST
 4155 5804 69570000 		_ADR	AHEAD
 4156 5808 BD320000 		_ADR	SWAP
 4157 580c C1570000 		_ADR	THENN
 4158 5810 D32E0000 		_UNNEST
 4159              	
 4160              	/**************************
 4161              	    WHILE	( a -- A a )
 4162              	 	Conditional branch out 
 4163              		of a BEGIN-WHILE-REPEAT loop.
 4164              	*********************************/
 4165 5814 F8570000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 4165      C5574849 
 4165      4C4500BF 
 4166 5820 504700BF 		_NEST
 4167 5824 35570000 		_ADR	IFF
 4168 5828 BD320000 		_ADR	SWAP
 4169 582c D32E0000 		_UNNEST
 4170              	
ARM GAS  forth.s 			page 196


 4171              	/**********************************
 4172              		CASE ( -- 0 )
 4173              		put a 0 on stack as a marker 
 4174              		for end of BRANCH list to 
 4175              		resolve by ENDCASE 
 4176              	***********************************/
 4177 5830 18580000 		_HEADER CASE,COMPO+IMEDD+4,"CASE"
 4177      C4434153 
 4177      450000BF 
 4178 583c 504700BF 		_NEST 
 4179 5840 F3300000 		_DOLIT 0 
 4179      00000000 
 4180 5848 D32E0000 		_UNNEST 
 4181              	
 4182              	/**********************************
 4183              		OF ( -- a )
 4184              		compile code for value comparison
 4185              		and add address of slot to be 
 4186              		resolved by ENDOF 
 4187              	*********************************/
 4188 584c 34580000 		_HEADER OF,COMPO+IMEDD+2,"OF"
 4188      C24F4600 
 4189 5854 504700BF 		_NEST 
 4190 5858 F3300000 		_COMPI OVER 
 4190      ED320000 
 4190      A5530000 
 4191 5864 F3300000 		_COMPI EQUAL  
 4191      31370000 
 4191      A5530000 
 4192 5870 F3300000 		_COMPI QBRAN 
 4192      33310000 
 4192      A5530000 
 4193 587c F93E0000 		_ADR	HERE  
 4194 5880 F3300000 		_DOLIT 0 
 4194      00000000 
 4195 5888 A5530000 		_ADR COMMA 
 4196 588c D32E0000 		_UNNEST
 4197              	
 4198              	/**********************************
 4199              		ENDOF ( a1 -- a2 )
 4200              		resolve QBRAN of predecing OF 
 4201              		and add slot for forward BRANCH 
 4202              		to be resolved by ENDCASE 
 4203              	**********************************/
 4204 5890 50580000 		_HEADER ENDOF,COMPO+IMEDD+5,"ENDOF"
 4204      C5454E44 
 4204      4F4600BF 
 4205 589c 504700BF 		_NEST
 4206 58a0 F3300000 		_COMPI	BRAN 
 4206      5B310000 
 4206      A5530000 
 4207 58ac F3300000 		_DOLIT	0 
 4207      00000000 
 4208 58b4 A5530000 		_ADR	COMMA 
 4209 58b8 F93E0000 		_ADR	HERE 
 4210 58bc BD320000 		_ADR	SWAP 
 4211 58c0 75310000 		_ADR	STORE 
ARM GAS  forth.s 			page 197


 4212 58c4 F93E0000 		_ADR	HERE 
 4213 58c8 95340000 		_ADR	CELLM 
 4214 58cc D32E0000 		_UNNEST 
 4215              	
 4216              	/*************************************
 4217              		ENDCASE ( 0...a  -- )
 4218              		compile code for DROP 
 4219              		and resolve forward BRANCH 
 4220              		for each OF 
 4221              	*************************************/
 4222 58d0 94580000 		_HEADER ENDCASE,COMPO+IMEDD+7,"ENDCASE"
 4222      C7454E44 
 4222      43415345 
 4223 58dc 504700BF 		_NEST 
 4224 58e0 F3300000 		_COMPI DROP 
 4224      8D320000 
 4224      A5530000 
 4225 58ec F9340000 	1:	_ADR QDUP 
 4226 58f0 33310000 		_QBRAN 2f 
 4226      10590000 
 4227 58f8 F93E0000 		_ADR HERE
 4228 58fc 95340000 		_ADR CELLM 	
 4229 5900 BD320000 		_ADR SWAP 
 4230 5904 75310000 		_ADR STORE 
 4231 5908 5B310000 		_BRAN 1b 
 4231      EC580000 
 4232              	2:
 4233 5910 D32E0000 		_UNNEST 
 4234              	
 4235              	
 4236              	/**********************************
 4237              		RECURSE ( -- )
 4238              		compile recursive call to 
 4239              		actual defined word 
 4240              	***********************************/
 4241 5914 D4580000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 4241      C7524543 
 4241      55525345 
 4242 5920 504700BF 		_NEST 
 4243 5924 193A0000 		_ADR LAST
 4244 5928 89310000 		_ADR AT  
 4245 592c 394B0000 		_ADR TOCFA 
 4246 5930 A5530000 		_ADR COMMA  
 4247 5934 D32E0000 		_UNNEST 
 4248              	
 4249              	
 4250              	/***********************************
 4251              	    ABORT"	( -- //  string> )
 4252              	 	Conditional abort with an 
 4253              		error message.
 4254              	***********************************/
 4255 5938 18590000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 4255      C641424F 
 4255      52542200 
 4256 5944 504700BF 		_NEST
 4257 5948 F3300000 		_COMPI	ABORQ
 4257      2D500000 
ARM GAS  forth.s 			page 198


 4257      A5530000 
 4258 5954 69540000 		_ADR	STRCQ
 4259 5958 D32E0000 		_UNNEST
 4260              	
 4261              	/******************************
 4262              	    S"	( -- //  string> )
 4263              	 	Compile an inline 
 4264              		counted string. 
 4265              		at runtime: ( -- a u )
 4266              	*****************************/
 4267 595c 3C590000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 4267      C2532200 
 4268 5964 504700BF 		_NEST
 4269 5968 F3300000 		_COMPI	STRQP
 4269      45460000 
 4269      A5530000 
 4270 5974 69540000 		_ADR	STRCQ
 4271 5978 D32E0000 		_UNNEST
 4272              	
 4273              	/********************************
 4274              	CORE EXT 
 4275              		S\" ( -- )
 4276              		compile and inline counted 
 4277              		string with escaped char.
 4278              	********************************/
 4279 597c 60590000 		_HEADER STRSLHQ,COMPO+IMEDD+3,"S\\\""
 4279      C3535C22 
 4280 5984 504700BF 		_NEST 
 4281 5988 F3300000 		_COMPI	STRQP
 4281      45460000 
 4281      A5530000 
 4282 5994 F93E0000 		_ADR	HERE   
 4283 5998 F3300000 		_DOLIT	0 
 4283      00000000 
 4284 59a0 CD530000 		_ADR	CCOMMA // space for count 
 4285 59a4 215A0000 	1:	_ADR	GETC
 4286 59a8 F9340000 		_ADR	QDUP 
 4287 59ac 33310000 		_QBRAN  4f 
 4287      F4590000 
 4288 59b4 AD320000 		_ADR	DUPP 
 4289 59b8 F3300000 		_DOLIT	'\\' 
 4289      5C000000 
 4290 59c0 31370000 		_ADR	EQUAL
 4291 59c4 33310000 		_QBRAN	2f
 4291      D8590000 
 4292 59cc 3F5A0000 		_ADR	ESCAPE
 4293 59d0 5B310000 		_BRAN	3f 
 4293      145A0000 
 4294 59d8 AD320000 	2:  _ADR	DUPP 
 4295 59dc F3300000 		_DOLIT	'"' 
 4295      22000000 
 4296 59e4 31370000 		_ADR	EQUAL 
 4297 59e8 33310000 		_QBRAN	3f
 4297      145A0000 
 4298 59f0 8D320000 		_ADR	DROP 
 4299 59f4 F93E0000 	4:	_ADR	HERE 
 4300 59f8 ED320000 		_ADR	OVER
ARM GAS  forth.s 			page 199


 4301 59fc 45340000 		_ADR	ONEP   
 4302 5a00 F9330000 		_ADR	SUBB
 4303 5a04 BD320000 		_ADR	SWAP 
 4304 5a08 95310000 		_ADR	CSTOR  
 4305 5a0c 1D3E0000 		_ADR	ALIGN 
 4306 5a10 D32E0000 		_UNNEST   
 4307              	3:	
 4308 5a14 CD530000 		_ADR	CCOMMA 
 4309 5a18 5B310000 		_BRAN	1b 
 4309      A4590000 
 4310              	
 4311              	GETC: 
 4312 5a20 606B     		ldr T0,[UP,#TIBUF]
 4313 5a22 E16A     		ldr T1,[UP,#TOIN]
 4314 5a24 226B     		ldr T2,[UP,#NTIBB]
 4315 5a26 47F8046D 		_PUSH
 4316 5a2a 4FF00006 		mov TOS,#0  
 4317 5a2e 9142     		cmp	T1,T2 
 4318 5a30 03D0     		beq 1f 
 4319 5a32 465C     		Ldrb TOS,[T0,T1]
 4320 5a34 01F10101 		add  T1,#1 
 4321 5a38 E162     		str T1,[UP,#TOIN]
 4322 5a3a FDF747BA 	1:	_NEXT 
 4323              	
 4324              	// replace escaped character 
 4325              	ESCAPE: 
 4326 5a3e 504700BF 		_NEST 
 4327 5a42 8D320000 		_ADR	DROP 
 4328 5a46 215A0000 		_ADR	GETC  
 4329 5a4a AD320000 		_ADR	DUPP
 4330 5a4e 33310000 		_QBRAN  5f 
 4330      EA5A0000 
 4331 5a56 AD320000 		_ADR	DUPP 
 4332 5a5a F3300000 		_DOLIT	'"' 
 4332      22000000 
 4333 5a62 31370000 		_ADR	EQUAL 
 4334 5a66 33310000 		_QBRAN  1f 
 4334      725A0000 
 4335 5a6e D32E0000 		_UNNEST 
 4336 5a72 AD320000 	1: 	_ADR	DUPP 
 4337 5a76 F3300000 		_DOLIT	'\\' 
 4337      5C000000 
 4338 5a7e 31370000 		_ADR	EQUAL 
 4339 5a82 33310000 		_QBRAN  2f 
 4339      8E5A0000 
 4340 5a8a D32E0000 		_UNNEST 	
 4341 5a8e F3300000 	2:	_DOLIT	0X20 
 4341      20000000 
 4342 5a96 7D330000 		_ADR	ORR   // convert to lower case 
 4343 5a9a AD320000 		_ADR	DUPP 
 4344 5a9e F3300000 		_DOLIT	'x' 
 4344      78000000 
 4345 5aa6 31370000 		_ADR	EQUAL 
 4346 5aaa 33310000 		_QBRAN  3f 
 4346      BA5A0000 
 4347 5ab2 EF5A0000 		_ADR	PARSE_HEX 
 4348 5ab6 D32E0000 		_UNNEST 
ARM GAS  forth.s 			page 200


 4349 5aba F3300000 	3:  _DOLIT	'a' 
 4349      61000000 
 4350 5ac2 F9330000 		_ADR	SUBB
 4351 5ac6 AD320000 		_ADR	DUPP 
 4352 5aca 1D330000 		_ADR	ZLESS 
 4353 5ace 33310000 		_QBRAN	4f
 4353      DA5A0000 
 4354 5ad6 D32E0000 		_UNNEST 
 4355 5ada F3300000 	4:  _DOLIT	esc_char 
 4355      725B0000 
 4356 5ae2 E9330000 		_ADR	PLUS 
 4357 5ae6 A9310000 		_ADR	CAT 
 4358 5aea D32E0000 	5:	_UNNEST 
 4359              	
 4360              	PARSE_HEX:
 4361 5aee 504700BF 		_NEST 
 4362 5af2 8D320000 		_ADR 	DROP 
 4363 5af6 215A0000 		_ADR	GETC 
 4364 5afa AD320000 		_ADR	DUPP 
 4365 5afe 33310000 		_QBRAN	2f
 4365      365B0000 
 4366 5b06 3B5B0000 		_ADR	TO_HEX 
 4367 5b0a F3300000 	1:	_DOLIT	16 
 4367      10000000 
 4368 5b12 09340000 		_ADR	STAR 
 4369 5b16 19320000 		_ADR	TOR 
 4370 5b1a 215A0000 		_ADR	GETC
 4371 5b1e AD320000 		_ADR	DUPP 
 4372 5b22 33310000 		_QBRAN	3f 
 4372      2E5B0000 
 4373 5b2a 3B5B0000 		_ADR	TO_HEX 
 4374 5b2e B5310000 	3:	_ADR	RFROM 
 4375 5b32 E9330000 		_ADR	PLUS 
 4376 5b36 D32E0000 	2:	_UNNEST 
 4377              	
 4378              	
 4379              	TO_HEX: 
 4380 5b3a 504700BF 		_NEST 
 4381 5b3e F3300000 		_DOLIT	'0' 
 4381      30000000 
 4382 5b46 F9330000 		_ADR	SUBB 
 4383 5b4a AD320000 		_ADR	DUPP 
 4384 5b4e F3300000 		_DOLIT	9 
 4384      09000000 
 4385 5b56 BD370000 		_ADR	GREAT 
 4386 5b5a 33310000 		_QBRAN	1f 
 4386      6E5B0000 
 4387 5b62 F3300000 		_DOLIT	7 
 4387      07000000 
 4388 5b6a F9330000 		_ADR	SUBB  
 4389              	1:
 4390 5b6e D32E0000 		_UNNEST 
 4391              	
 4392              	
 4393 5b72 07086364 	esc_char:  .byte 7,8,'c','d',27,12,'g','h','i','j','k',10,13,10,'o','p',34,13,'s',9,'u',11,'x','y',
 4393      1B0C6768 
 4393      696A6B0A 
ARM GAS  forth.s 			page 201


 4393      0D0A6F70 
 4393      220D7309 
 4394              	
 4395              	
 4396              	/********************
 4397              	    $,\"	( -- )
 4398              	 	Compile a literal 
 4399              		escaped string up to next " .
 4400              	hidden word 
 4401              	************************/
 4402              	STRCSLHQ:
 4403              	
 4404              	
 4405              	
 4406              	/********************************
 4407              	EXTENDED CORE 
 4408              		C" string" ( -- )
 4409              		Compile an inline counted 
 4410              		literal.
 4411              		at runtime ( -- a )
 4412              	*********************************/
 4413 5b8b 80590000 		_HEADER CSTRQ,IMEDD+COMPO+2,"C\""
 4413      C2432200 
 4413      BF
 4414 5b94 504700BF 		_NEST 
 4415 5b98 F3300000 		_COMPI	STRQP
 4415      45460000 
 4415      A5530000 
 4416 5ba4 69540000 		_ADR	STRCQ 
 4417 5ba8 F3300000 		_COMPI	DROP 
 4417      8D320000 
 4417      A5530000 
 4418 5bb4 F3300000 		_COMPI	ONEM  
 4418      55340000 
 4418      A5530000 
 4419 5bc0 D32E0000 		_UNNEST 
 4420              	
 4421              	
 4422              	/******************************
 4423              	    ."	( -- //  string> )
 4424              	 	Compile an inline word
 4425              		literal to be typed out 
 4426              		at run time.
 4427              	*******************************/
 4428 5bc4 8F5B0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 4428      C22E2200 
 4429 5bcc 504700BF 		_NEST
 4430 5bd0 F3300000 		_COMPI	DOTQP
 4430      51460000 
 4430      A5530000 
 4431 5bdc 69540000 		_ADR	STRCQ
 4432 5be0 D32E0000 		_UNNEST
 4433              	
 4434              	/*********************
 4435              	  Name compiler
 4436              	***********************/
 4437              	
ARM GAS  forth.s 			page 202


 4438              	/**************************
 4439              	    ?UNIQUE	( a -- a )
 4440              	 	Display a warning 
 4441              		message if the word 
 4442              		already exists.
 4443              	**************************/
 4444 5be4 C85B0000 		_HEADER UNIQU,7,"?UNIQUE"
 4444      073F554E 
 4444      49515545 
 4445 5bf0 504700BF 		_NEST
 4446 5bf4 AD320000 		_ADR	DUPP
 4447 5bf8 AD4C0000 		_ADR	NAMEQ			// ?name exists
 4448 5bfc 33310000 		_QBRAN	UNIQ1	// redefinitions are OK
 4448      1C5C0000 
 4449 5c04 51460000 		_DOTQP	7," reDef "		// but warn the user
 4449      07207265 
 4449      44656620 
 4450 5c10 ED320000 		_ADR	OVER
 4451 5c14 5D380000 		_ADR	COUNT
 4452 5c18 8D450000 		_ADR	TYPEE			// just in case its not planned
 4453              	UNIQ1:
 4454 5c1c 8D320000 		_ADR	DROP
 4455 5c20 D32E0000 		_UNNEST
 4456              	
 4457              	/***********************
 4458              	    $,n	 ( na -- )
 4459              	 	Build a new dictionary 
 4460              		name using the data at na.
 4461              	hidden word 
 4462              	*******************************/
 4463              	SNAME:
 4464 5c24 504700BF 		_NEST
 4465 5c28 AD320000 		_ADR	DUPP			//  na na
 4466 5c2c A9310000 		_ADR	CAT			//  ?null input
 4467 5c30 33310000 		_QBRAN	SNAM1
 4467      6C5C0000 
 4468 5c38 F15B0000 		_ADR	UNIQU			//  na
 4469 5c3c 193A0000 		_ADR	LAST			//  na last
 4470 5c40 89310000 		_ADR	AT			//  na la
 4471 5c44 A5530000 		_ADR	COMMA			//  na
 4472 5c48 AD320000 		_ADR	DUPP			//  na na
 4473 5c4c 193A0000 		_ADR	LAST			//  na na last
 4474 5c50 75310000 		_ADR	STORE			//  na , save na for vocabulary link
 4475 5c54 5D380000 		_ADR	COUNT			//  na+1 count
 4476 5c58 E9330000 		_ADR	PLUS			//  na+1+count
 4477 5c5c 393E0000 		_ADR	ALGND			//  word boundary
 4478 5c60 C9390000 		_ADR	CPP
 4479 5c64 75310000 		_ADR	STORE			//  top of dictionary now
 4480 5c68 D32E0000 		_UNNEST
 4481              	SNAM1:
 4482 5c6c 45460000 		_ADR	STRQP
 4483 5c70 07       		.byte	7
 4484 5c71 206E616D 		.ascii " name? "
 4484      653F20
 4485 5c78 01500000 		_ADR	PRT_ABORT
 4486              	
 4487              	/************************
ARM GAS  forth.s 			page 203


 4488              	    $COMPILE	( a -- )
 4489              	 	Compile next word to 
 4490              		code dictionary as 
 4491              		a token or literal.
 4492              	**************************/
 4493 5c7c E85B0000 		_HEADER SCOMP,8,"$COMPILE"
 4493      0824434F 
 4493      4D50494C 
 4493      450000BF 
 4494 5c8c 504700BF 		_NEST
 4495 5c90 AD4C0000 		_ADR	NAMEQ
 4496 5c94 F9340000 		_ADR	QDUP	// defined?
 4497 5c98 33310000 		_QBRAN	SCOM2
 4497      C85C0000 
 4498 5ca0 89310000 		_ADR	AT
 4499 5ca4 F3300000 		_DOLIT	IMEDD
 4499      80000000 
 4500 5cac 69330000 		_ADR	ANDD	// immediate?
 4501 5cb0 33310000 		_QBRAN	SCOM1
 4501      C05C0000 
 4502 5cb8 09310000 		_ADR	EXECU
 4503 5cbc D32E0000 		_UNNEST			// it's immediate, execute
 4504              	SCOM1:
 4505 5cc0 A15D0000 		_ADR	CALLC			// it's not immediate, compile
 4506 5cc4 D32E0000 		_UNNEST	
 4507              	SCOM2:
 4508 5cc8 0D450000 		_ADR	NUMBERQ 
 4509 5ccc 33310000 		_QBRAN	SCOM3
 4509      DC5C0000 
 4510 5cd4 51540000 		_ADR	LITER
 4511 5cd8 D32E0000 		_UNNEST			// compile number as integer
 4512              	SCOM3: // compilation abort 
 4513 5cdc E55C0000 		_ADR COLON_ABORT 
 4514 5ce0 01500000 		_ADR	PRT_ABORT			// error
 4515              	
 4516              	/********************************
 4517              	 before aborting a compilation 
 4518              	 reset HERE and LAST
 4519              	 to previous values. 
 4520              	*******************************/
 4521              	COLON_ABORT:
 4522 5ce4 504700BF 		_NEST 
 4523 5ce8 193A0000 		_ADR LAST 
 4524 5cec 89310000 		_ADR AT 
 4525 5cf0 95340000 		_ADR CELLM 
 4526 5cf4 AD320000 		_ADR DUPP 
 4527 5cf8 C9390000 		_ADR CPP  
 4528 5cfc 75310000 		_ADR STORE 
 4529 5d00 89310000 		_ADR AT 
 4530 5d04 193A0000 		_ADR LAST 
 4531 5d08 75310000 		_ADR STORE 
 4532 5d0c 215D0000 		_ADR OVERT 
 4533 5d10 D32E0000 		_UNNEST 
 4534              	
 4535              	/*********************
 4536              	    OVERT	( -- )
 4537              	 	Link a new word 
ARM GAS  forth.s 			page 204


 4538              		into the current 
 4539              		vocabulary.
 4540              	**********************/
 4541 5d14 805C0000 		_HEADER OVERT,5,"OVERT"
 4541      054F5645 
 4541      525400BF 
 4542 5d20 504700BF 		_NEST
 4543 5d24 193A0000 		_ADR	LAST
 4544 5d28 89310000 		_ADR	AT
 4545 5d2c B5390000 		_ADR	CNTXT
 4546 5d30 75310000 		_ADR	STORE
 4547 5d34 D32E0000 		_UNNEST
 4548              	
 4549              	/**********************
 4550              	    ;  ( -- )
 4551              	 	Terminate a colon
 4552              		definition.
 4553              	***********************/
 4554 5d38 185D0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4554      C13B00BF 
 4555 5d40 504700BF 		_NEST
 4556 5d44 F3300000 		_DOLIT	UNNEST
 4556      D22E0000 
 4557 5d4c A15D0000 		_ADR	CALLC
 4558 5d50 1D3E0000 		_ADR    ALIGN 
 4559 5d54 C9500000 		_ADR	LBRAC
 4560 5d58 215D0000 		_ADR	OVERT
 4561 5d5c D32E0000 		_UNNEST
 4562              	
 4563              	/******************
 4564              	    ]	   ( -- )
 4565              	 	Start compiling 
 4566              		the words in 
 4567              		the input stream.
 4568              	*********************/
 4569 5d60 3C5D0000 		_HEADER RBRAC,1,"]"
 4569      015D00BF 
 4570 5d68 504700BF 		_NEST
 4571 5d6c F3300000 		_DOLIT	SCOMP
 4571      8C5C0000 
 4572 5d74 89390000 		_ADR	TEVAL
 4573 5d78 75310000 		_ADR	STORE
 4574 5d7c F3300000 		_DOLIT  -1
 4574      FFFFFFFF 
 4575 5d84 95380000 		_ADR    STATE 
 4576 5d88 75310000 		_ADR    STORE 
 4577 5d8c D32E0000 		_UNNEST
 4578              	
 4579              	/****************************
 4580              	    COMPILE,	( cfa -- )
 4581              	 	compile cfa.
 4582              	
 4583              	*****************************/
 4584 5d90 645D0000 		_HEADER CALLC,COMPO+IMEDD+8,"COMPILE,"
 4584      C8434F4D 
 4584      50494C45 
 4584      2C0000BF 
ARM GAS  forth.s 			page 205


 4585 5da0 504700BF 		_NEST
 4586 5da4 F3300000 		_DOLIT 1 
 4586      01000000 
 4587 5dac 7D330000 		_ADR ORR 
 4588 5db0 A5530000 		_ADR COMMA  
 4589 5db4 D32E0000 		_UNNEST 
 4590              	
 4591              	
 4592              	/****************************
 4593              		BUFFER: "name" ( u -- a )
 4594              		create a named buffer of 
 4595              		u bytes 
 4596              		0's the buffer. 
 4597              	*****************************/
 4598 5db8 945D0000 		_HEADER BUFFER,7,"BUFFER:"
 4598      07425546 
 4598      4645523A 
 4599 5dc4 504700BF 		_NEST 
 4600 5dc8 1D3E0000 		_ADR    ALIGN 
 4601 5dcc 194B0000 		_ADR	TOKEN
 4602 5dd0 255C0000 		_ADR	SNAME
 4603 5dd4 F93E0000 		_ADR    HERE 
 4604 5dd8 ED320000 		_ADR    OVER 
 4605 5ddc 8D530000 		_ADR    ALLOT 
 4606 5de0 F3300000 		_DOLIT	0 
 4606      00000000 
 4607 5de8 91350000 		_ADR	ROT 
 4608 5dec AD320000 		_ADR	DUPP 
 4609 5df0 19320000 		_ADR	TOR 
 4610 5df4 31400000 		_ADR	FILL
 4611 5df8 B5310000 		_ADR	RFROM 
 4612 5dfc 215D0000 		_ADR    OVERT 
 4613 5e00 D32E0000 		_UNNEST 
 4614              	
 4615              	
 4616              	/*************************
 4617              	 	:	( -- //  string> )
 4618              	 	Start a new colon 
 4619              		definition using 
 4620              		next word as its name.
 4621              	**************************/
 4622 5e04 BC5D0000 		_HEADER COLON,1,":"
 4622      013A00BF 
 4623 5e0c 504700BF 		_NEST
 4624 5e10 1D3E0000 		_ADR    ALIGN 
 4625 5e14 194B0000 		_ADR	TOKEN
 4626 5e18 255C0000 		_ADR	SNAME
 4627 5e1c DD2E0000 		_ADR	COMPI_NEST 
 4628 5e20 695D0000 		_ADR	RBRAC
 4629 5e24 D32E0000 		_UNNEST
 4630              	
 4631              	/*************************
 4632              	    IMMEDIATE   ( -- )
 4633              	 	Make the last compiled 
 4634              		word an immediate word.
 4635              	***************************/
 4636 5e28 085E0000 		_HEADER IMMED,9,"IMMEDIATE"
ARM GAS  forth.s 			page 206


 4636      09494D4D 
 4636      45444941 
 4636      544500BF 
 4637 5e38 504700BF 		_NEST
 4638 5e3c F3300000 		_DOLIT	IMEDD
 4638      80000000 
 4639 5e44 193A0000 		_ADR	LAST
 4640 5e48 89310000 		_ADR	AT
 4641 5e4c 89310000 		_ADR	AT
 4642 5e50 7D330000 		_ADR	ORR
 4643 5e54 193A0000 		_ADR	LAST
 4644 5e58 89310000 		_ADR	AT
 4645 5e5c 75310000 		_ADR	STORE
 4646 5e60 D32E0000 		_UNNEST
 4647              	
 4648              	/******************
 4649              	  Defining words
 4650              	******************/
 4651              	
 4652              		.p2align 2 
 4653              	/****************************************
 4654              	 doDOES> ( -- a )
 4655              	 runtime action of  DOES>		 
 4656              	hidden word used by compiler 
 4657              	***************************************/
 4658              	DODOES:
 4659 5e64 504700BF 		_NEST 
 4660 5e68 E9310000 		_ADR	RAT 
 4661 5e6c 85340000 		_ADR	CELLP 
 4662 5e70 45340000 		_ADR	ONEP  
 4663 5e74 193A0000 		_ADR	LAST 
 4664 5e78 89310000 		_ADR	AT
 4665 5e7c 394B0000 		_ADR	TOCFA
 4666 5e80 55340000 		_ADR    ONEM  
 4667 5e84 F1630000 		_ADR	TOVECTOR  
 4668 5e88 75310000 		_ADR	STORE
 4669 5e8c D32E0000 		_UNNEST 
 4670              	
 4671              		.p2align 2
 4672              	/**********************
 4673              	  DOES> ( -- )
 4674              	  compile time action
 4675              	*************************/
 4676 5e90 2C5E0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4676      C5444F45 
 4676      533E00BF 
 4677 5e9c 504700BF 		_NEST 
 4678 5ea0 F3300000 		_COMPI	DODOES 
 4678      655E0000 
 4678      A5530000 
 4679 5eac F3300000 		_COMPI	UNNEST 
 4679      D32E0000 
 4679      A5530000 
 4680 5eb8 DD2E0000 		_ADR	COMPI_NEST
 4681 5ebc D32E0000 	 	_UNNEST 
 4682              	
 4683              	
ARM GAS  forth.s 			page 207


 4684              	/****************************
 4685              	  DEFER@ ( cfa1 -- cfa2 )
 4686              	
 4687              	******************************/
 4688 5ec0 945E0000 		_HEADER DEFERAT,6,"DEFER@"
 4688      06444546 
 4688      45524000 
 4689 5ecc 504700BF 		_NEST 
 4690 5ed0 85340000 		_ADR CELLP 
 4691 5ed4 89310000 		_ADR AT 
 4692 5ed8 D32E0000 		_UNNEST 
 4693              	
 4694              	/*********************************
 4695              		ACTION-OF "name" ( -- xt )
 4696              		push the action token 
 4697              		of defered word "name" 
 4698              	*********************************/
 4699 5edc C45E0000 		_HEADER ACTIONOF,IMEDD+9,"ACTION-OF"
 4699      89414354 
 4699      494F4E2D 
 4699      4F4600BF 
 4700 5eec 504700BF 		_NEST 
 4701 5ef0 01530000 		_ADR 	TICK  
 4702 5ef4 CD5E0000 		_ADR 	DEFERAT 
 4703 5ef8 95380000 		_ADR    STATE 
 4704 5efc 89310000 		_ADR 	AT 
 4705 5f00 33310000 		_QBRAN 	1f
 4705      0C5F0000 
 4706 5f08 A5530000 		_ADR    COMMA 
 4707 5f0c D32E0000 	1: 	_UNNEST 
 4708              	
 4709              	
 4710              	/*********************************
 4711              	 DEFER! ( cfa1 cfa2 -- )
 4712              	 assign an action to a defered word 
 4713              	************************************/
 4714 5f10 E05E0000 		_HEADER DEFERSTO,6,"DEFER!"
 4714      06444546 
 4714      45522100 
 4715 5f1c 504700BF 		_NEST 
 4716 5f20 F3300000 		_DOLIT	-2 
 4716      FEFFFFFF 
 4717 5f28 69330000 		_ADR	ANDD   // clear thumb bit of cfa2  
 4718 5f2c 85340000 		_ADR 	CELLP  // skip NEST 
 4719 5f30 75310000 		_ADR STORE 
 4720 5f34 D32E0000 		_UNNEST
 4721              	
 4722              	/****************************
 4723              	  DEFER ( "name" -- )
 4724              	  create a defered definition
 4725              	*****************************/
 4726 5f38 145F0000 		_HEADER DEFER,5,"DEFER"
 4726      05444546 
 4726      455200BF 
 4727 5f44 504700BF 		_NEST 
 4728 5f48 0D5E0000 		_ADR COLON 
 4729              	// runtime code 
ARM GAS  forth.s 			page 208


 4730 5f4c F3300000 		_DOLIT NO_ACTION  
 4730      6C5F0000 
 4731 5f54 A15D0000 		_ADR  CALLC 
 4732 5f58 F3300000 		_DOLIT UNNEST 
 4732      D22E0000 
 4733 5f60 A15D0000 		_ADR  CALLC
 4734              	// end of runtime code 	
 4735 5f64 415D0000 		_ADR  SEMIS  
 4736 5f68 D32E0000 		_UNNEST 
 4737              	
 4738              	NO_ACTION:
 4739 5f6c 504700BF 		_NEST 
 4740 5f70 F3300000 		_DOLIT 1 
 4740      01000000 
 4741 5f78 2D500000 		_ABORQ 15 , " no action set!"
 4741      0F206E6F 
 4741      20616374 
 4741      696F6E20 
 4741      73657421 
 4742 5f8c D32E0000 		_UNNEST 
 4743              	
 4744              	/*********************************
 4745              		:NONAME  ( -- xt )
 4746              		create a colon word without 
 4747              		name. 
 4748              	output:
 4749              		xt  exÃ©cution token of 
 4750              		new definition
 4751              	*********************************/
 4752 5f90 3C5F0000 		_HEADER NONAME,7,":NONAME"
 4752      073A4E4F 
 4752      4E414D45 
 4753 5f9c 504700BF 		_NEST 
 4754 5fa0 F93E0000 		_ADR 	HERE 
 4755 5fa4 DD2E0000 		_ADR	COMPI_NEST 
 4756 5fa8 695D0000 		_ADR 	RBRAC
 4757 5fac D32E0000 		_UNNEST 
 4758              	
 4759              	/*******************************
 4760              		IS cccc ( cfa -- )
 4761              	input:
 4762              	   cccc  defered word name 
 4763              	   xt    execution token 
 4764              	   to be affected to the 
 4765              	   defered word.
 4766              	********************************/
 4767 5fb0 945F0000 		_HEADER IS,IMEDD+2,"IS"
 4767      82495300 
 4768 5fb8 504700BF 		_NEST
 4769 5fbc 95380000 		_ADR STATE 
 4770 5fc0 89310000 		_ADR AT 
 4771 5fc4 33310000 		_QBRAN 1f 
 4771      EC5F0000 
 4772 5fcc F3300000 		_DOLIT ITICK
 4772      24530000 
 4773 5fd4 A15D0000 		_ADR CALLC  
 4774 5fd8 F3300000 		_DOLIT DEFERSTO
ARM GAS  forth.s 			page 209


 4774      1C5F0000 
 4775 5fe0 A15D0000 		_ADR CALLC
 4776 5fe4 5B310000 		_BRAN 2f    
 4776      F45F0000 
 4777 5fec 01530000 	1:  _ADR TICK 
 4778 5ff0 1D5F0000 		_ADR DEFERSTO 
 4779 5ff4 D32E0000 	2:	_UNNEST 
 4780              	
 4781              	
 4782              	/******************************
 4783              	    CREATE	( -- //  string> )
 4784              	 	Compile a new array entry 
 4785              		without allocating code space.
 4786              	***********************************/
 4787 5ff8 B45F0000 		_HEADER CREAT,6,"CREATE"
 4787      06435245 
 4787      41544500 
 4788 6004 504700BF 		_NEST 
 4789 6008 1D3E0000 		_ADR	ALIGN 
 4790 600c 194B0000 		_ADR	TOKEN
 4791 6010 255C0000 		_ADR	SNAME
 4792 6014 215D0000 		_ADR	OVERT
 4793 6018 DD2E0000 		_ADR	COMPI_NEST 
 4794 601c F3300000 		_COMPI	DOVAR
 4794      45600000 
 4794      A5530000 
 4795 6028 F3300000 		_COMPI  NOP     // reserved slot  for DOES> vector   
 4795      F1300000 
 4795      A5530000 
 4796 6034 F3300000 		_COMPI  UNNEST 
 4796      D32E0000 
 4796      A5530000 
 4797 6040 D32E0000 		_UNNEST
 4798              	
 4799              	/*******************************
 4800              	  doVAR	( -- a )
 4801              	  Run time routine for VARIABLE and CREATE.
 4802              	hidden word used by compiler
 4803              	********************************/
 4804              	DOVAR:
 4805 6044 47F8046D 		_PUSH
 4806 6048 6646     		MOV TOS,IP
 4807 604a 06F10806 		ADD TOS,#2*CELLL // >BODY 
 4808 604e FCF73DBF 		_NEXT  
 4809              	
 4810              	
 4811              	/*******************************
 4812              	    VARIABLE	( -- //  string> )
 4813              	 	Compile a new variable 
 4814              		initialized to 0.
 4815              	***********************************/
 4816 6052 FC5F0000 		_HEADER VARIA,8,"VARIABLE"
 4816      08564152 
 4816      4941424C 
 4816      4500
 4817 6060 504700BF 		_NEST
 4818 6064 05600000 		_ADR	CREAT
ARM GAS  forth.s 			page 210


 4819 6068 F3300000 		_DOLIT	0
 4819      00000000 
 4820 6070 A5530000 		_ADR	COMMA
 4821 6074 D32E0000 		_UNNEST
 4822              	
 4823              	/**********************************
 4824              	    doCON	( -- a ) 
 4825              	 	Run time routine for CONSTANT.
 4826              	hidden word used by compiler 
 4827              	***********************************/
 4828              	DOCON:
 4829 6078 47F8046D 		_PUSH
 4830 607c 5CF8046B 		LDR.W TOS,[IP],#4 
 4831 6080 FCF727BF 		B UNNEST 
 4832              	
 4833              	
 4834              	/***********************************
 4835              	CORE EXT 
 4836              		VALUE name ( x -- )
 4837              		create a value object and 
 4838              		assign x to it. 
 4839              	***********************************/
 4840 6084 56600000 		_HEADER VALUE,5,"VALUE" 
 4840      0556414C 
 4840      554500BF 
 4841 6090 504700BF 		_NEST 
 4842 6094 05600000 		_ADR CREAT 
 4843 6098 F3300000 		_DOLIT AT 
 4843      88310000 
 4844 60a0 F3300000 		_DOLIT	1 
 4844      01000000 
 4845 60a8 7D330000 		_ADR	ORR 
 4846 60ac F93E0000 		_ADR	HERE 
 4847 60b0 F3300000 		_DOLIT	8 
 4847      08000000 
 4848 60b8 F9330000 		_ADR	SUBB 
 4849 60bc 75310000 		_ADR	STORE 
 4850 60c0 A5530000 		_ADR	COMMA 
 4851 60c4 D32E0000 		_UNNEST 
 4852              	
 4853              	/***********************************
 4854              	CORE EXT 
 4855              		TO name ( x -- )
 4856              	    assign a new value to name 
 4857              	***********************************/
 4858 60c8 88600000 		_HEADER TO,2,"TO"
 4858      02544F00 
 4859 60d0 504700BF 		_NEST 
 4860 60d4 01530000 		_ADR	TICK 
 4861 60d8 55340000 		_ADR	ONEM 
 4862 60dc F3300000 		_DOLIT	4*CELLL
 4862      10000000 
 4863 60e4 E9330000 		_ADR	PLUS  
 4864 60e8 75310000 		_ADR	STORE 
 4865 60ec D32E0000 		_UNNEST 
 4866              	
 4867              	
ARM GAS  forth.s 			page 211


 4868              	/***********************************
 4869              	    CONSTANT	( u -- //  string> )
 4870              	 	Compile a new constant.
 4871              	************************************/
 4872 60f0 CC600000 		_HEADER CONST,8,"CONSTANT"
 4872      08434F4E 
 4872      5354414E 
 4872      540000BF 
 4873 6100 504700BF 		_NEST 
 4874 6104 194B0000 		_ADR	TOKEN
 4875 6108 255C0000 		_ADR	SNAME
 4876 610c 215D0000 		_ADR	OVERT
 4877 6110 DD2E0000 		_ADR	COMPI_NEST
 4878 6114 F3300000 		_DOLIT	DOCON
 4878      78600000 
 4879 611c A15D0000 		_ADR	CALLC
 4880 6120 A5530000 		_ADR	COMMA
 4881 6124 F3300000 		_DOLIT	UNNEST 
 4881      D22E0000 
 4882 612c A15D0000 		_ADR	CALLC  
 4883 6130 D32E0000 		_UNNEST
 4884              	
 4885              	
 4886              	/***********
 4887              	  Tools
 4888              	***********/
 4889              	
 4890              	/*************************
 4891              	    dm+	 ( a u -- a )
 4892              	 	Dump u bytes from a , 
 4893              		leaving a+u on the stack.
 4894              		hidden word used by DUMP 
 4895              	****************************/
 4896              	DMP:
 4897 6134 504700BF 		_NEST
 4898 6138 ED320000 		_ADR	OVER
 4899 613c F3300000 		_DOLIT	4
 4899      04000000 
 4900 6144 19470000 		_ADR	UDOTR			// display address
 4901 6148 F3300000 		_DOLIT  0         // don't show base char 
 4901      00000000 
 4902 6150 21390000 		_ADR    BCHR
 4903 6154 AD320000 		_ADR    DUPP
 4904 6158 89310000 		_ADR    AT 
 4905 615c 19320000 		_ADR    TOR      // save original value of BCHAR 
 4906 6160 75310000 		_ADR    STORE 
 4907 6164 39450000 		_ADR	SPACE
 4908 6168 19320000 		_ADR	TOR			// start count down loop
 4909 616c 5B310000 		_BRAN	PDUM2			// skip first pass
 4909      8C610000 
 4910              	PDUM1:
 4911 6174 AD320000 	    _ADR	DUPP
 4912 6178 A9310000 		_ADR	CAT
 4913 617c F3300000 		_DOLIT	3
 4913      03000000 
 4914 6184 19470000 		_ADR	UDOTR			// display numeric data
 4915 6188 45340000 		_ADR	ONEP			// increment address
ARM GAS  forth.s 			page 212


 4916              	PDUM2:
 4917 618c 15310000 	    _ADR	DONXT
 4918 6190 74610000 		.word	PDUM1	// loop till done
 4919 6194 B5310000 		_ADR    RFROM   // restore BCHAR value 
 4920 6198 21390000 		_ADR    BCHR 
 4921 619c 75310000 		_ADR    STORE 
 4922 61a0 D32E0000 		_UNNEST
 4923              		.p2align 2 
 4924              	//    DUMP	( a u -- )
 4925              	// 	Dump u bytes from a, in a formatted manner.
 4926              	
 4927              	/**********************
 4928              		DUMP ( a n -- )
 4929              		hex dump memory 
 4930              	*********************/
 4931 61a4 F4600000 		_HEADER DUMP,4,"DUMP"
 4931      0444554D 
 4931      500000BF 
 4932 61b0 504700BF 		_NEST
 4933 61b4 F3300000 		_DOLIT  15 
 4933      0F000000 
 4934 61bc E9330000 		_ADR    PLUS 
 4935 61c0 F3300000 		_DOLIT  0xFFFFFFF0 
 4935      F0FFFFFF 
 4936 61c8 69330000 		_ADR    ANDD 
 4937 61cc BD320000 		_ADR    SWAP 
 4938 61d0 F3300000 		_DOLIT  0xFFFFFFFC
 4938      FCFFFFFF 
 4939 61d8 69330000 		_ADR    ANDD 
 4940 61dc BD320000 		_ADR    SWAP 
 4941 61e0 09390000 		_ADR	BASE
 4942 61e4 89310000 		_ADR	AT
 4943 61e8 19320000 		_ADR	TOR
 4944 61ec 9D420000 		_ADR	HEX			// save radix,set hex
 4945 61f0 F3300000 		_DOLIT	16
 4945      10000000 
 4946 61f8 993D0000 		_ADR	SLASH			// change count to lines
 4947 61fc 19320000 		_ADR	TOR
 4948 6200 5B310000 		_BRAN	DUMP4			// start count down loop
 4948      30620000 
 4949              	DUMP1:
 4950 6208 F5450000 	    _ADR	CR
 4951 620c F3300000 		_DOLIT	16
 4951      10000000 
 4952 6214 E1350000 		_ADR	DDUP
 4953 6218 35610000 		_ADR	DMP			// display numeric
 4954 621c 91350000 		_ADR	ROT
 4955 6220 91350000 		_ADR	ROT
 4956 6224 39450000 		_ADR	SPACE
 4957 6228 39450000 		_ADR	SPACE
 4958 622c 8D450000 		_ADR	TYPEE			// display printable characters
 4959              	DUMP4:
 4960 6230 15310000 	  _DONXT	DUMP1	// loop till done
 4960      08620000 
 4961              	DUMP3:
 4962 6238 8D320000 		_ADR	DROP
 4963 623c B5310000 		_ADR	RFROM
ARM GAS  forth.s 			page 213


 4964 6240 09390000 		_ADR	BASE
 4965 6244 75310000 		_ADR	STORE			// restore radix
 4966 6248 D32E0000 		_UNNEST
 4967              	
 4968              	/*******************************
 4969              	   TRACE. display in hexadecimal
 4970              	   TRACE. use a different buffer 
 4971              	   than DOT  to avoid current 
 4972              	   display overwrite.
 4973              	*******************************/ 
 4974              	TDOT: // ( u -- )
 4975 624c 504700BF 		_NEST 
 4976 6250 09390000 		_ADR BASE 
 4977 6254 89310000 		_ADR AT 
 4978 6258 19320000 		_ADR TOR
 4979 625c 9D420000 		_ADR HEX  
 4980 6260 9D390000 		_ADR HLD 
 4981 6264 89310000 		_ADR AT 
 4982 6268 19320000 		_ADR TOR   // R: base *hold 
 4983 626c F93E0000 		_ADR HERE 
 4984 6270 F3300000 		_DOLIT 160 
 4984      A0000000 
 4985 6278 E9330000 		_ADR PLUS
 4986 627c AD320000 		_ADR DUPP 
 4987 6280 19320000 		_ADR TOR  
 4988 6284 9D390000 		_ADR HLD 
 4989 6288 75310000 		_ADR STORE
 4990 628c F3300000 		_DOLIT 0  
 4990      00000000 
 4991 6294 ED410000 		_ADR DIGS  
 4992 6298 8D320000 		_ADR DROP
 4993 629c F3300000 		_DOLIT '$'
 4993      24000000 
 4994 62a4 69410000 		_ADR HOLD 
 4995 62a8 9D390000 		_ADR HLD 
 4996 62ac 89310000 		_ADR AT
 4997 62b0 B5310000 		_ADR RFROM   
 4998 62b4 ED320000 		_ADR OVER 
 4999 62b8 F9330000 		_ADR SUBB 
 5000 62bc 39450000 		_ADR SPACE 
 5001 62c0 8D450000 		_ADR TYPEE 
 5002 62c4 B5310000 		_ADR RFROM 
 5003 62c8 9D390000 		_ADR HLD 
 5004 62cc 75310000 		_ADR STORE 
 5005 62d0 B5310000 		_ADR RFROM 
 5006 62d4 09390000 		_ADR BASE 
 5007 62d8 75310000 		_ADR STORE 
 5008 62dc D32E0000 		_UNNEST 
 5009              	
 5010              	/**********************
 5011              	   .S	  ( ... -- ... )
 5012              	 	Display the contents 
 5013              		of the data stack.
 5014              	*************************/
 5015 62e0 A8610000 		_HEADER DOTS,2,".S"
 5015      022E5300 
 5016 62e8 504700BF 		_NEST
ARM GAS  forth.s 			page 214


 5017 62ec A13E0000 		_ADR	DEPTH	// stack depth
 5018 62f0 19320000 		_ADR	TOR		// start count down loop
 5019 62f4 5B310000 		_BRAN	DOTS2  // skip first pass
 5019      08630000 
 5020              	DOTS1:
 5021 62fc E9310000 		_ADR	RAT
 5022 6300 C53E0000 		_ADR	PICK
 5023 6304 4D620000 		_ADR	TDOT // index stack, display contents
 5024              	DOTS2:
 5025 6308 15310000 		_DONXT	DOTS1 // loop till done
 5025      FC620000 
 5026 6310 F5450000 		_ADR	CR 
 5027 6314 D32E0000 		_UNNEST
 5028              	
 5029              	RBASE: 
 5030 6318 47F8046D 		_PUSH 
 5031 631c 4FF68076 		_MOV32 TOS,RPP 
 5031      C2F20106 
 5032 6324 FCF7D2BD 		_NEXT 
 5033              	
 5034              	
 5035              	/**************************
 5036              	  R.  display return stack 
 5037              	**************************/
 5038              	RDOT: 
 5039 6328 504700BF 		_NEST 
 5040 632c 19630000 		_ADR RBASE
 5041 6330 79320000 		_ADR RPAT 
 5042 6334 F9330000 		_ADR SUBB
 5043 6338 C9340000 		_ADR CELLSL   
 5044 633c F3300000 		_DOLIT 2
 5044      02000000 
 5045 6344 F9330000 		_ADR SUBB 
 5046 6348 19320000 		_ADR TOR
 5047 634c 19630000 		_ADR RBASE 
 5048 6350 95340000 	1:	_ADR CELLM 
 5049 6354 AD320000 		_ADR DUPP 
 5050 6358 89310000 		_ADR AT 
 5051 635c 4D620000 		_ADR TDOT 
 5052 6360 B5310000 		_ADR RFROM   
 5053 6364 55340000 		_ADR ONEM 
 5054 6368 AD320000 		_ADR DUPP
 5055 636c 19320000 		_ADR TOR 
 5056 6370 19370000 		_ADR ZEQUAL   
 5057 6374 33310000 		_QBRAN 1b
 5057      50630000 
 5058 637c B5310000 		_ADR RFROM  
 5059 6380 B9350000 		_ADR DDROP
 5060 6384 F5450000 		_ADR CR   
 5061 6388 D32E0000 		_UNNEST 
 5062              	
 5063              	/**************************
 5064              		TRACE ( -- )
 5065              		display stacks content 
 5066              	**************************/
 5067 638c E4620000 		_HEADER TRACE,5,"TRACE"
 5067      05545241 
ARM GAS  forth.s 			page 215


 5067      434500BF 
 5068 6398 504700BF 		_NEST
 5069 639c F5450000 		_ADR CR 
 5070 63a0 F3300000 		_DOLIT '>' 
 5070      3E000000 
 5071 63a8 F3300000 		_DOLIT 'S'
 5071      53000000 
 5072 63b0 952F0000 		_ADR EMIT 
 5073 63b4 952F0000 		_ADR EMIT  
 5074 63b8 E9620000 		_ADR DOTS
 5075 63bc F3300000 		_DOLIT '>'
 5075      3E000000 
 5076 63c4 F3300000 		_DOLIT 'R'
 5076      52000000 
 5077 63cc 952F0000 		_ADR EMIT 
 5078 63d0 952F0000 		_ADR EMIT 
 5079 63d4 29630000 		_ADR RDOT 
 5080 63d8 D32E0000 		_UNNEST 
 5081              	
 5082              	
 5083              	/****************************
 5084              	  >BODY  ( xt -- adr )
 5085              	  get parameter field address
 5086              	  from code field address 
 5087              	****************************/
 5088 63dc 90630000 		_HEADER TOBODY,5,">BODY"
 5088      053E424F 
 5088      445900BF 
 5089 63e8 06F11006 		add TOS,#4*CELLL   
 5090 63ec FCF76EBD 		_NEXT 		
 5091              	
 5092              	/*****************************
 5093              		>VECTOR ( xt -- adr )
 5094              		for words defined by 
 5095              		CREATE  return 
 5096              		address vector slot 
 5097              		for DOES> 
 5098              	hidden word.	
 5099              	*****************************/
 5100              	TOVECTOR:
 5101 63f0 06F10806 		add TOS,#2*CELLL
 5102 63f4 FCF76ABD 		_NEXT 
 5103              	
 5104              	/*****************************
 5105              	    >NFA	( cfa -- nfa | F )
 5106              	 	Convert code address 
 5107              		to a name address.
 5108              	*****************************/
 5109 63f8 E0630000 		_HEADER TONFA,4,">NFA"
 5109      043E4E46 
 5109      410000BF 
 5110 6404 504700BF 		_NEST
 5111 6408 19320000 		_ADR	TOR			//  
 5112 640c B5390000 		_ADR	CNTXT			//  va
 5113 6410 89310000 		_ADR	AT			//  nfa
 5114              	TNAM1:
 5115 6414 AD320000 		_ADR	DUPP			//  nfa nfa
ARM GAS  forth.s 			page 216


 5116 6418 33310000 		_QBRAN	TNAM2	//  vocabulary end, no match
 5116      48640000 
 5117 6420 AD320000 		_ADR	DUPP			//  nfa nfa
 5118 6424 394B0000 		_ADR	TOCFA			//  nfa cfa
 5119 6428 E9310000 		_ADR	RAT			//  nfa cfa code
 5120 642c 91330000 		_ADR	XORR			//  nfa f --
 5121 6430 33310000 		_QBRAN	TNAM2
 5121      48640000 
 5122 6438 95340000 		_ADR	CELLM			//  la 
 5123 643c 89310000 		_ADR	AT			//  next_nfa
 5124 6440 5B310000 		_BRAN	TNAM1
 5124      14640000 
 5125              	TNAM2:	
 5126 6448 B5310000 		_ADR	RFROM
 5127 644c 8D320000 		_ADR	DROP			//  0|nfa --
 5128 6450 D32E0000 		_UNNEST			// 0
 5129              	
 5130              	
 5131              	/********************************
 5132              	    .ID	 ( na -- )
 5133              	 	Display the name at address.
 5134              	********************************/
 5135 6454 FC630000 		_HEADER DOTID,3,".ID"
 5135      032E4944 
 5136 645c 504700BF 		_NEST
 5137 6460 F9340000 		_ADR	QDUP			// if zero no name
 5138 6464 33310000 		_QBRAN	DOTI1
 5138      88640000 
 5139 646c 5D380000 		_ADR	COUNT
 5140 6470 F3300000 		_DOLIT	0x1F
 5140      1F000000 
 5141 6478 69330000 		_ADR	ANDD			// mask lexicon bits
 5142 647c 39450000 		_ADR	SPACE 
 5143 6480 8D450000 		_ADR	TYPEE
 5144 6484 D32E0000 		_UNNEST			// display name string
 5145              	DOTI1:
 5146 6488 51460000 		_DOTQP	9," {noName}"
 5146      09207B6E 
 5146      6F4E616D 
 5146      657D00BF 
 5147 6498 D32E0000 		_UNNEST
 5148              	
 5149              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 5150              	.if WANT_SEE 
 5151              	/*******************************
 5152              	    SEE	 ( -- //  string> )
 5153              	 	A simple decompiler.
 5154              	*******************************/
 5155              		_HEADER SEE,3,"SEE"
 5156              		_NEST
 5157              		_ADR	TICK	//  ca --, starting address
 5158              		_ADR	CR	
 5159              		_DOLIT	20
 5160              		_ADR	TOR
 5161              	SEE1:
 5162              		_ADR	CELLP			//  a
 5163              		_ADR	DUPP			//  a a
ARM GAS  forth.s 			page 217


 5164              		_ADR	DECOMP		//  a
 5165              		_DONXT	SEE1
 5166              		_ADR	DROP
 5167              		_UNNEST
 5168              	
 5169              	/*************************
 5170              	 	DECOMPILE ( a -- )
 5171              	 	Convert code in a.  
 5172              		Display name of command or as data.
 5173              	*************************************/
 5174              		_HEADER DECOMP,9,"DECOMPILE"
 5175              		_NEST
 5176              		_ADR	DUPP			//  a a
 5177              	// 	_ADR	TOR			//  a
 5178              		_ADR	AT			//  a code
 5179              		_ADR	DUPP			//  a code code
 5180              		_DOLIT	0xF800D000 //0xF800F800
 5181              		_ADR	ANDD
 5182              		_DOLIT	0xF000D000 //0xF800F000
 5183              		_ADR	EQUAL			//  a code ?
 5184              		_ADR	INVER 
 5185              		_QBRAN	DECOM2	//  not a command
 5186              		//  a valid_code --, extract address and display name
 5187              		MOVW	IP,#0xFFE
 5188              		MOV	WP,TOS
 5189              		LSL	TOS,TOS,#21		//  get bits 22-12
 5190              		ASR	TOS,TOS,#9		//  with sign extension
 5191              		LSR	WP,WP,#15		//  get bits 11-1
 5192              		AND	WP,WP,IP		//  retain only bits 11-1
 5193              		ORR	TOS,TOS,WP		//  get bits 22-1
 5194              		NOP
 5195              		_ADR	OVER			//  a offset a
 5196              		_ADR	PLUS			//  a target-4
 5197              		_ADR	CELLP			//  a target
 5198              		_ADR	TONFA			//  a na/0 --, is it a name?
 5199              		_ADR	QDUP			//  name address or zero
 5200              		_QBRAN	DECOM1
 5201              		_ADR	SPACE			//  a na
 5202              		_ADR	DOTID			//  a --, display name
 5203              	// 	_ADR	RFROM			//  a
 5204              		_ADR	DROP
 5205              		_UNNEST
 5206              	DECOM1:	// _ADR	RFROM		//  a
 5207              		_ADR	AT			//  data
 5208              		_ADR	UDOT			//  display data
 5209              		_UNNEST
 5210              	DECOM2:
 5211              		_ADR	UDOT
 5212              	// 	_ADR	RFROM
 5213              		_ADR	DROP
 5214              		_UNNEST
 5215              	.endif 
 5216              	
 5217              	
 5218              	/*********************
 5219              	    WORDS	( -- )
 5220              	 	Display the names 
ARM GAS  forth.s 			page 218


 5221              		in the context vocabulary.
 5222              	*******************************/
 5223 649c 58640000 		_HEADER WORDS,5,"WORDS"
 5223      05574F52 
 5223      445300BF 
 5224 64a8 504700BF 		_NEST
 5225 64ac F5450000 		_ADR	CR
 5226 64b0 B5390000 		_ADR	CNTXT
 5227 64b4 89310000 		_ADR	AT			// only in context
 5228              	WORS1:
 5229 64b8 F9340000 		_ADR	QDUP			// ?at end of list
 5230 64bc 33310000 		_QBRAN	WORS2
 5230      E0640000 
 5231 64c4 AD320000 		_ADR	DUPP
 5232 64c8 39450000 		_ADR	SPACE
 5233 64cc 5D640000 		_ADR	DOTID			// display a name
 5234 64d0 95340000 		_ADR	CELLM
 5235 64d4 89310000 		_ADR	AT
 5236 64d8 5B310000 		_BRAN	WORS1
 5236      B8640000 
 5237              	WORS2:
 5238 64e0 D32E0000 		_UNNEST
 5239              	
 5240              	
 5241              	/*************************
 5242              		MARKER <string> ( -- )
 5243              	    create forget point 
 5244              		in dictionary 
 5245              	*************************/	
 5246 64e4 A0640000 		_HEADER MARKER,6,"MARKER"
 5246      064D4152 
 5246      4B455200 
 5247 64f0 504700BF 		_NEST
 5248 64f4 05600000 		_ADR	CREAT 
 5249 64f8 655E0000 		_ADR	DODOES
 5250 64fc D32E0000 		_UNNEST 
 5251 6500 504700BF 		_NEST 
 5252 6504 F3300000 		_DOLIT	4*CELLL  
 5252      10000000 
 5253 650c F9330000 		_ADR	SUBB
 5254 6510 45340000 		_ADR	ONEP  
 5255 6514 05640000 		_ADR	TONFA 
 5256 6518 95340000 		_ADR	CELLM
 5257 651c 89310000 		_ADR	AT  
 5258 6520 193A0000 		_ADR	LAST 
 5259 6524 75310000 		_ADR	STORE 
 5260 6528 215D0000 		_ADR	OVERT
 5261 652c D32E0000 		_UNNEST 
 5262              	
 5263              	/*********************************
 5264              		ARRAY "name" ( n -- )
 5265              	    create an array of n elements 
 5266              	*********************************/
 5267 6530 E8640000 		_HEADER ARRAY,5,"ARRAY"
 5267      05415252 
 5267      415900BF 
 5268 653c 504700BF 		_NEST 
ARM GAS  forth.s 			page 219


 5269 6540 194B0000 		_ADR	TOKEN
 5270 6544 255C0000 		_ADR	SNAME
 5271 6548 215D0000 		_ADR	OVERT
 5272 654c DD2E0000 		_ADR	COMPI_NEST
 5273 6550 F3300000 		_DOLIT	DO_ARRAY
 5273      7C650000 
 5274 6558 A15D0000 		_ADR	CALLC
 5275 655c F3300000 		_DOLIT	UNNEST 
 5275      D22E0000 
 5276 6564 A15D0000 		_ADR	CALLC  
 5277 6568 F3300000 		_DOLIT  4 
 5277      04000000 
 5278 6570 09340000 		_ADR    STAR 
 5279 6574 8D530000 		_ADR    ALLOT 
 5280 6578 D32E0000 		_UNNEST 	
 5281              	
 5282              	// does> du array
 5283              	DO_ARRAY:
 5284 657c 504700BF 		_NEST  
 5285 6580 F3300000 		_DOLIT 4 
 5285      04000000 
 5286 6588 09340000 		_ADR STAR  
 5287 658c E9310000 		_ADR RAT  
 5288 6590 85340000 		_ADR CELLP 
 5289 6594 E9330000 		_ADR PLUS  
 5290 6598 D32E0000 		_UNNEST 
 5291              	
 5292              	
 5293              	/****************
 5294              	  cold start
 5295              	*****************/
 5296              	
 5297              	/**********************************
 5298              	    VER	 ( -- n )
 5299              	 	Return the version 
 5300              		number of this implementation.
 5301              	hidden word used by COLD
 5302              	**********************************/
 5303              	VERSN:
 5304 659c 504700BF 		_NEST
 5305 65a0 F3300000 		_DOLIT	VER*256+EXT
 5305      00010000 
 5306 65a8 D32E0000 		_UNNEST
 5307              	
 5308              	/*********************
 5309              	    hi	  ( -- )
 5310              	 	Display the sign-on 
 5311              		message.
 5312              	***********************/
 5313 65ac 34650000 		_HEADER HI,2,"HI"
 5313      02484900 
 5314 65b4 504700BF 		_NEST
 5315 65b8 F5450000 		_ADR	CR	// initialize I/O
 5316 65bc 51460000 		_DOTQP	17, "beyond Jupiter, v" 
 5316      11626579 
 5316      6F6E6420 
 5316      4A757069 
ARM GAS  forth.s 			page 220


 5316      7465722C 
 5317 65d4 09390000 		_ADR	BASE
 5318 65d8 89310000 		_ADR	AT
 5319 65dc 9D420000 		_ADR	HEX	// save radix
 5320 65e0 9D650000 		_ADR	VERSN
 5321 65e4 49410000 		_ADR	BDIGS
 5322 65e8 F3300000 		_DOLIT  0 
 5322      00000000 
 5323 65f0 CD410000 		_ADR	DIG
 5324 65f4 CD410000 		_ADR	DIG
 5325 65f8 F3300000 		_DOLIT	'.'
 5325      2E000000 
 5326 6600 69410000 		_ADR	HOLD
 5327 6604 ED410000 		_ADR	DIGS
 5328 6608 49420000 		_ADR	EDIGS
 5329 660c 8D450000 		_ADR	TYPEE	// format version number
 5330 6610 09390000 		_ADR	BASE
 5331 6614 75310000 		_ADR	STORE
 5332 6618 F5450000 		_ADR	CR
 5333 661c D32E0000 		_UNNEST			// restore radix
 5334              	
 5335              	/***********************
 5336              	   HI_BOTH ( -- )
 5337              	   display sign-on 
 5338              	   on both CONSOLE
 5339              	***********************/
 5340              	HI_BOTH:
 5341 6620 504700BF 	    _NEST 
 5342 6624 050C0000 		_ADR LOCAL 
 5343 6628 350C0000 		_ADR CONSOLE 
 5344 662c B5650000 		_ADR HI 
 5345 6630 1D0C0000 		_ADR SERIAL 
 5346 6634 350C0000 		_ADR CONSOLE 
 5347 6638 B5650000 		_ADR HI
 5348 663c D32E0000 		_UNNEST 
 5349              	
 5350              	/**********************
 5351              	 check if PS2 keyboard 
 5352              	 present.
 5353              	**********************/
 5354              	PS2_QUERY: 
 5355 6640 504700BF 		_NEST 
 5356 6644 F3300000 		_DOLIT 400 
 5356      90010000 
 5357 664c 29300000 		_ADR PAUSE
 5358 6650 251A0000 		_ADR PS2_QKEY
 5359 6654 33310000 		_QBRAN 1f
 5359      70660000 
 5360 665c F3300000 		_DOLIT BAT_OK 
 5360      AA000000 
 5361 6664 91330000 		_ADR XORR 
 5362 6668 33310000 		_QBRAN 9f 
 5362      B4660000 
 5363 6670 0D1C0000 	1:	_ADR KBD_RST
 5364 6674 F3300000 		_DOLIT BAT_OK 
 5364      AA000000 
 5365 667c 91330000 		_ADR XORR  
ARM GAS  forth.s 			page 221


 5366 6680 33310000 		_QBRAN 9f  
 5366      B4660000 
 5367              	// no ps2 keyboard 
 5368              	// swith to serial console
 5369 6688 F5450000 		_ADR CR 
 5370 668c 51460000 		_DOTQP 25,"no PS2 keyboard detected."
 5370      196E6F20 
 5370      50533220 
 5370      6B657962 
 5370      6F617264 
 5371 66ac 1D0C0000 		_ADR SERIAL 
 5372 66b0 350C0000 		_ADR CONSOLE 
 5373 66b4 D32E0000 	9:	_UNNEST 
 5374              	
 5375              	/*************************
 5376              	   check PA8 to 
 5377              	   select console 
 5378              	   PA8 -> low  LOCAL 
 5379              	   PA8 -> high SERIAL 
 5380              	*************************/
 5381              	IF_SENSE:
 5382 66b8 504700BF 		_NEST 
 5383 66bc 050C0000 		_ADR LOCAL 
 5384 66c0 F3300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 5384      10000240 
 5385 66c8 89310000 		_ADR AT 
 5386 66cc F3300000 		_DOLIT (1<<8)
 5386      00010000 
 5387 66d4 69330000 		_ADR ANDD 
 5388 66d8 33310000 		_QBRAN 9f 
 5388      E4660000 
 5389 66e0 45340000 		_ADR ONEP 
 5390 66e4 350C0000 	9:  _ADR CONSOLE 
 5391 66e8 D32E0000 		_UNNEST 
 5392              	
 5393              	/****************************
 5394              	   display READY on active
 5395              	   console
 5396              	***************************/
 5397              	READY:
 5398 66ec 504700BF 	    _NEST 
 5399 66f0 51460000 		_DOTQP 5,"READY"
 5399      05524541 
 5399      445900BF 
 5400 66fc F5450000 		_ADR  CR 
 5401 6700 D32E0000 	    _UNNEST 
 5402              	
 5403              	/********************
 5404              	    COLD	( -- )
 5405              	 	The high level cold 
 5406              		start sequence.
 5407              	**************************/
 5408 6704 B0650000 		.word	LINK 
 5409              		LINK = . 
 5410 6708 04       	_LASTN:	.byte  4
 5411 6709 434F4C44 		.ascii "COLD"
 5412 670d 0000BF   		.p2align 2	
ARM GAS  forth.s 			page 222


 5413              	COLD:
 5414 6710 00B5F9F7 		_CALL forth_init 
 5414      11FF5DF8 
 5414      04EB
 5415 671a DFF85CC0 		ldr IP,=COLD1 
 5416 671e FCF7D5BB 		_NEXT
 5417 6722 00BF     		.p2align 2 
 5418              	COLD1:
 5419 6724 F3300000 		_DOLIT  0 
 5419      00000000 
 5420 672c 5D300000 		_ADR ULED // turn off user LED 
 5421 6730 F3300000 		_DOLIT	UZERO
 5421      64080000 
 5422 6738 F3300000 		_DOLIT	UPP
 5422      00000020 
 5423 6740 F3300000 		_DOLIT	ULAST-UZERO
 5423      C4000000 
 5424 6748 E93F0000 		_ADR	WMOVE 			// initialize user area
 5425 674c 49520000 		_ADR	PRESE			// initialize stack and TIB
 5426 6750 B91E0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 5427 6754 41660000 		_ADR 	PS2_QUERY  
 5428 6758 F1380000 		_ADR	TBOOT
 5429 675c 853F0000 		_ADR	ATEXE			// application boot
 5430 6760 215D0000 		_ADR	OVERT
 5431 6764 B9660000 		_ADR	IF_SENSE
 5432 6768 ED660000 		_ADR    READY 
 5433 676c 5B310000 		_BRAN	QUIT			// start interpretation
 5433      60520000 
 5434              	COLD2:
 5435              		.p2align 2 	
 5436              	CTOP:
 5437 6774 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5438              	
 5439              	
 5440 6778 24670000 	  .end 
ARM GAS  forth.s 			page 223


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 224


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 225


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 226


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 227


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 228


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020000000 UPP
          macros.inc:54     *ABS*:0000000020000512 DTOP
          macros.inc:55     *ABS*:000000002001812c DEND
          macros.inc:56     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:58     *ABS*:0000000000000040 COMPO
          macros.inc:59     *ABS*:0000000000000080 IMEDD
          macros.inc:60     *ABS*:00000000ffffff1f MASKK
          macros.inc:62     *ABS*:0000000000000004 CELLL
          macros.inc:63     *ABS*:000000000000000a BASEE
          macros.inc:64     *ABS*:0000000000000008 VOCSS
          macros.inc:66     *ABS*:0000000000000008 BKSPP
          macros.inc:67     *ABS*:000000000000000a LF
          macros.inc:68     *ABS*:000000000000000d CRR
          macros.inc:69     *ABS*:000000000000001b ERR
          macros.inc:70     *ABS*:0000000000000027 TIC
          macros.inc:75     *ABS*:0000000000000004 RNDSEED
          macros.inc:76     *ABS*:0000000000000008 TICKS
          macros.inc:77     *ABS*:000000000000000c CD_TIMER
          macros.inc:78     *ABS*:0000000000000010 BOOT
          macros.inc:79     *ABS*:0000000000000014 STDIN
          macros.inc:80     *ABS*:0000000000000018 STDOUT
          macros.inc:81     *ABS*:000000000000001c NBASE
          macros.inc:82     *ABS*:0000000000000020 BCHAR
          macros.inc:83     *ABS*:0000000000000024 TMP
          macros.inc:84     *ABS*:0000000000000028 CSPAN
ARM GAS  forth.s 			page 229


          macros.inc:85     *ABS*:000000000000002c TOIN
          macros.inc:86     *ABS*:0000000000000030 SRC
          macros.inc:87     *ABS*:0000000000000030 NTIBB
          macros.inc:88     *ABS*:0000000000000034 TIBUF
          macros.inc:89     *ABS*:0000000000000038 SRCID
             forth.s:3588   .text:0000000000005160 EVAL
          macros.inc:91     *ABS*:0000000000000040 VHOLD
          macros.inc:92     *ABS*:0000000000000044 CTXT
          macros.inc:93     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:94     *ABS*:000000000000004c USER_CTOP
          macros.inc:95     *ABS*:0000000000000050 LASTN
          macros.inc:96     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:97     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:98     *ABS*:0000000000000064 RX_HEAD
          macros.inc:99     *ABS*:0000000000000068 RX_TAIL
          macros.inc:100    *ABS*:000000000000006c VID_CNTR
          macros.inc:101    *ABS*:0000000000000070 VID_STATE
          macros.inc:102    *ABS*:0000000000000074 VID_FIELD
          macros.inc:103    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:104    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:105    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:106    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:107    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:108    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:109    *ABS*:0000000000000098 ROW
          macros.inc:110    *ABS*:000000000000009c COL
          macros.inc:111    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:112    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:113    *ABS*:00000000000000a8 VFPSW
          macros.inc:114    *ABS*:00000000000000ac VFBASE
          macros.inc:115    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:116    *ABS*:00000000000000b4 CSTATE
          macros.inc:118    *ABS*:00000000000000b8 BLKID
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e2c tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b10 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001708 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002ecc INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3652   .text:0000000000005248 PRESE
             forth.s:2668   .text:0000000000004650 DOTQP
ARM GAS  forth.s 			page 230


              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002f18 CFSR
             forth.s:579    .text:00000000000032ac DUPP
             forth.s:505    .text:0000000000003218 TOR
             forth.s:340    .text:00000000000030f2 DOLIT
             forth.s:1330   .text:0000000000003908 BASE
             forth.s:426    .text:0000000000003174 STORE
             forth.s:2752   .text:000000000000474c UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:463    .text:00000000000031b4 RFROM
             forth.s:676    .text:0000000000003368 ANDD
             forth.s:381    .text:0000000000003132 QBRAN
             forth.s:145    .text:0000000000002f38 BFAR
             forth.s:192    .text:0000000000002f94 EMIT
             forth.s:2557   .text:0000000000004538 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002224 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2620   .text:00000000000045f4 CR
             forth.s:436    .text:0000000000003188 AT
             forth.s:742    .text:00000000000033f8 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2770   .text:0000000000004780 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:872    .text:00000000000034f8 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:733    .text:00000000000033e8 PLUS
             forth.s:1252   .text:000000000000385c COUNT
             forth.s:2585   .text:000000000000458c TYPEE
             forth.s:1068   .text:00000000000036b4 CLZ
             forth.s:587    .text:00000000000032bc SWAP
             forth.s:724    .text:00000000000033d8 LSHIFT
               fpu.s:123    .text:0000000000002244 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3663   .text:0000000000005260 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
ARM GAS  forth.s 			page 231


              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3454   .text:0000000000004fbc ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:275    .text:000000000000305c ULED
             forth.s:1303   .text:00000000000038c4 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:715    .text:00000000000033c0 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:00000000000021c6 fpu_init
          ser-term.s:56     .text:0000000000000b3e ser_init
             tvout.s:74     .text:0000000000000d7c tv_init
           ps2_kbd.s:307    .text:0000000000001928 kbd_init
         spi-flash.s:41     .text:0000000000001d3c flash_spi_init
             forth.s:5413   .text:0000000000006710 COLD
             forth.s:83     .text:0000000000002ec4 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:911    .text:0000000000000928 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:5340   .text:0000000000006620 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a24 PS2_QKEY
ARM GAS  forth.s 			page 232


             tvout.s:563    .text:00000000000012ec TV_EMIT
             forth.s:3522   .text:000000000000506c INTER
             forth.s:5410   .text:0000000000006708 _LASTN
             forth.s:5436   .text:0000000000006774 CTOP
             forth.s:5409   .text:0000000000006708 LINK
              init.s:916    .text:0000000000000928 $d
       environment.s:32     .text:0000000000000958 _ENVQ
       environment.s:32     .text:0000000000000968 ENVQ
       environment.s:35     .text:000000000000096c $d
             forth.s:1408   .text:00000000000039b4 CNTXT
       environment.s:215    .text:0000000000000aee _ENVLASTN
             forth.s:562    .text:000000000000328c DROP
             forth.s:791    .text:0000000000003454 ONEM
             forth.s:3210   .text:0000000000004cac NAMEQ
             forth.s:349    .text:0000000000003108 EXECU
             forth.s:410    .text:000000000000315a BRAN
             forth.s:90     .text:0000000000002ed2 UNNEST
       environment.s:201    .text:0000000000000aca ENVLNK
       environment.s:82     .text:00000000000009cc _CNTDSTR
       environment.s:82     .text:00000000000009dc $t
       environment.s:82     .text:00000000000009dc CNTDSTR
       environment.s:223    .text:0000000000000b04 flag_true
       environment.s:95     .text:00000000000009e6 $d
       environment.s:95     .text:00000000000009ea _SLHOLD
       environment.s:95     .text:00000000000009f0 $t
       environment.s:95     .text:00000000000009f0 SLHOLD
       environment.s:107    .text:00000000000009fa $d
       environment.s:107    .text:00000000000009fe _SLPAD
       environment.s:107    .text:0000000000000a04 SLPAD
       environment.s:118    .text:0000000000000a0e $d
       environment.s:118    .text:0000000000000a12 _ADRBITS
       environment.s:118    .text:0000000000000a24 $t
       environment.s:118    .text:0000000000000a24 ADRBITS
       environment.s:130    .text:0000000000000a2e $d
       environment.s:130    .text:0000000000000a32 _FLOORED
       environment.s:130    .text:0000000000000a3a $t
       environment.s:130    .text:0000000000000a3c FLOORED
       environment.s:141    .text:0000000000000a3e $d
       environment.s:141    .text:0000000000000a42 _MAXCHAR
       environment.s:141    .text:0000000000000a4c MAXCHAR
       environment.s:152    .text:0000000000000a56 $d
       environment.s:152    .text:0000000000000a5a _MAXD
       environment.s:152    .text:0000000000000a60 $t
       environment.s:152    .text:0000000000000a60 MAXD
       environment.s:165    .text:0000000000000a7a $d
       environment.s:165    .text:0000000000000a7e _MAXN
       environment.s:165    .text:0000000000000a84 $t
       environment.s:165    .text:0000000000000a84 MAXN
       environment.s:176    .text:0000000000000a92 $d
       environment.s:176    .text:0000000000000a96 _MAXU
       environment.s:176    .text:0000000000000a9c $t
       environment.s:176    .text:0000000000000a9c MAXU
       environment.s:187    .text:0000000000000aa6 $d
       environment.s:187    .text:0000000000000aaa _MAXUD
       environment.s:187    .text:0000000000000ab4 MAXUD
       environment.s:201    .text:0000000000000ac6 $d
       environment.s:201    .text:0000000000000aca _RSTKCELLS
ARM GAS  forth.s 			page 233


       environment.s:201    .text:0000000000000ae0 RSTKCELLS
       environment.s:213    .text:0000000000000aea $d
       environment.s:214    .text:0000000000000aee ENVLINK
       environment.s:217    .text:0000000000000afa $t
       environment.s:218    .text:0000000000000afc STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000b96 $d
          ser-term.s:90     .text:0000000000000b9a _SER_QKEY
          ser-term.s:90     .text:0000000000000ba4 SER_QKEY
          ser-term.s:110    .text:0000000000000bd0 $d
          ser-term.s:110    .text:0000000000000bd4 _SER_EMIT
          ser-term.s:110    .text:0000000000000be0 SER_EMIT
          ser-term.s:124    .text:0000000000000bfa $d
          ser-term.s:124    .text:0000000000000bfe _LOCAL
          ser-term.s:124    .text:0000000000000c04 $t
          ser-term.s:124    .text:0000000000000c04 LOCAL
          ser-term.s:133    .text:0000000000000c10 $d
          ser-term.s:133    .text:0000000000000c14 _SERIAL
          ser-term.s:133    .text:0000000000000c1c SERIAL
          ser-term.s:142    .text:0000000000000c28 $d
          ser-term.s:142    .text:0000000000000c2c _CONSOLE
          ser-term.s:142    .text:0000000000000c34 $t
          ser-term.s:142    .text:0000000000000c34 CONSOLE
          ser-term.s:164    .text:0000000000000c54 $d
          ser-term.s:164    .text:0000000000000c58 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c64 ANSI_PARAM
          ser-term.s:166    .text:0000000000000c68 $d
             forth.s:783    .text:0000000000003444 ONEP
             forth.s:1788   .text:0000000000003d60 SLMOD
          ser-term.s:191    .text:0000000000000cd4 _ANSI_ESC
          ser-term.s:191    .text:0000000000000cdc ANSI_ESC
          ser-term.s:193    .text:0000000000000ce0 $d
          ser-term.s:203    .text:0000000000000d00 _SER_AT
          ser-term.s:203    .text:0000000000000d08 SER_AT
          ser-term.s:205    .text:0000000000000d0c $d
          ser-term.s:219    .text:0000000000000d3c _SER_CLS
          ser-term.s:219    .text:0000000000000d44 $t
          ser-term.s:219    .text:0000000000000d44 SER_CLS
          ser-term.s:221    .text:0000000000000d48 $d
          ser-term.s:228    .text:0000000000000d6c $d
           tvout.inc:19     *ABS*:0000000000000140 HRES
           tvout.inc:20     *ABS*:00000000000000c8 VRES
           tvout.inc:21     *ABS*:0000000000000004 BPP
           tvout.inc:22     *ABS*:00000000000000a0 BPR
           tvout.inc:23     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:25     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:26     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 234


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d7c $t
             tvout.s:150    .text:0000000000000e58 state_vsync
             tvout.s:191    .text:0000000000000eac state_pre_video
             tvout.s:202    .text:0000000000000ebe state_video_out
             tvout.s:237    .text:0000000000000f1c state_post_video
             tvout.s:254    .text:0000000000000f42 tv_isr_exit
             tvout.s:180    .text:0000000000000e92 sync_end
             tvout.s:246    .text:0000000000000f2e frame_end
             tvout.s:264    .text:0000000000000f44 $d
             tvout.s:264    .text:0000000000000f48 _BACKCOLOR
             tvout.s:264    .text:0000000000000f54 BACKCOLOR
             tvout.s:271    .text:0000000000000f60 $d
             tvout.s:271    .text:0000000000000f64 _PENCOLOR
             tvout.s:271    .text:0000000000000f6e $t
             tvout.s:271    .text:0000000000000f70 PENCOLOR
             tvout.s:278    .text:0000000000000f7c $d
             tvout.s:278    .text:0000000000000f80 _CURSOR_COL
             tvout.s:278    .text:0000000000000f88 CURSOR_COL
             tvout.s:285    .text:0000000000000f94 $d
             tvout.s:285    .text:0000000000000f98 _CURSOR_ROW
             tvout.s:285    .text:0000000000000f9c $t
             tvout.s:285    .text:0000000000000f9c CURSOR_ROW
             tvout.s:292    .text:0000000000000fa8 $d
             tvout.s:292    .text:0000000000000fac _ROWY
             tvout.s:292    .text:0000000000000fb2 $t
             tvout.s:292    .text:0000000000000fb4 ROWY
             tvout.s:299    .text:0000000000000fc0 $d
             tvout.s:299    .text:0000000000000fc4 _COLX
             tvout.s:299    .text:0000000000000fca $t
             tvout.s:299    .text:0000000000000fcc COLX
             tvout.s:306    .text:0000000000000fd8 $d
             tvout.s:306    .text:0000000000000fdc _FONT
             tvout.s:306    .text:0000000000000fe4 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000ff0 $d
             tvout.s:313    .text:0000000000000ff4 _VIDBUFF
             tvout.s:313    .text:0000000000000ffc $t
             tvout.s:313    .text:0000000000000ffc VIDBUFF
             tvout.s:325    .text:0000000000001006 $d
             tvout.s:325    .text:000000000000100a _PLOT
             tvout.s:325    .text:0000000000001010 PLOT
             tvout.s:373    .text:0000000000001094 plot_op
             tvout.s:341    .text:000000000000103c op_back
             tvout.s:350    .text:0000000000001056 op_pen
ARM GAS  forth.s 			page 235


             tvout.s:359    .text:0000000000001070 op_invert
             tvout.s:363    .text:0000000000001078 op_xor
             tvout.s:373    .text:0000000000001094 $d
             tvout.s:378    .text:000000000000109c _VSYNC
             tvout.s:378    .text:00000000000010a2 $t
             tvout.s:378    .text:00000000000010a4 VSYNC
             tvout.s:386    .text:00000000000010ae $d
             tvout.s:386    .text:00000000000010b2 _CLS
             tvout.s:386    .text:00000000000010b6 $t
             tvout.s:386    .text:00000000000010b8 CLS
             tvout.s:410    .text:00000000000010fa $d
             tvout.s:410    .text:00000000000010fe _CLRLINE
             tvout.s:410    .text:0000000000001106 $t
             tvout.s:410    .text:0000000000001108 CLRLINE
             tvout.s:412    .text:000000000000110c $d
             forth.s:751    .text:0000000000003408 STAR
             forth.s:2095   .text:0000000000004030 FILL
             tvout.s:427    .text:0000000000001140 _SCROLLUP
             tvout.s:427    .text:000000000000114c SCROLLUP
             tvout.s:429    .text:0000000000001150 $d
             forth.s:2063   .text:0000000000003fe8 WMOVE
             tvout.s:448    .text:0000000000001198 _SCROLLDOWN
             tvout.s:448    .text:00000000000011a4 SCROLLDOWN
             tvout.s:450    .text:00000000000011a8 $d
             tvout.s:467    .text:00000000000011e8 _TV_CRLF
             tvout.s:467    .text:00000000000011f0 $t
             tvout.s:467    .text:00000000000011f0 TV_CRLF
             tvout.s:482    .text:0000000000001212 $d
             tvout.s:482    .text:0000000000001216 _RIGHT
             tvout.s:482    .text:000000000000121c $t
             tvout.s:482    .text:000000000000121c RIGHT
             tvout.s:495    .text:0000000000001230 $d
             tvout.s:495    .text:0000000000001234 _LEFT
             tvout.s:495    .text:000000000000123c LEFT
             tvout.s:511    .text:0000000000001268 FONT_PIXEL
             tvout.s:518    .text:0000000000001278 INCR_X
             tvout.s:525    .text:0000000000001284 NEXT_PIXEL
             tvout.s:534    .text:000000000000128c CHAR_ROW
             tvout.s:536    .text:0000000000001290 $d
             forth.s:974    .text:00000000000035e0 DDUP
             forth.s:484    .text:00000000000031e8 RAT
             forth.s:362    .text:0000000000003114 DONXT
             forth.s:965    .text:00000000000035cc TDROP
             tvout.s:551    .text:00000000000012cc CHAR_FONT
             tvout.s:552    .text:00000000000012cc $t
             tvout.s:563    .text:00000000000012e0 $d
             tvout.s:563    .text:00000000000012e4 _TV_EMIT
             tvout.s:563    .text:00000000000012ec $t
             tvout.s:565    .text:00000000000012f0 $d
             forth.s:1148   .text:0000000000003770 ULESS
             tvout.s:593    .text:0000000000001374 CTRL_KEY
             forth.s:934    .text:0000000000003590 ROT
             forth.s:454    .text:00000000000031a8 CAT
             tvout.s:660    .text:000000000000145c SHOW_CURSOR
             tvout.s:691    .text:00000000000014e4 HIDE_CURSOR
             forth.s:1123   .text:0000000000003730 EQUAL
             tvout.s:650    .text:000000000000143c BACK_SPACE
ARM GAS  forth.s 			page 236


             tvout.s:618    .text:00000000000013e4 CAR_RET
             tvout.s:629    .text:00000000000013fc LN_FEED
             tvout.s:619    .text:00000000000013e4 $t
             tvout.s:620    .text:00000000000013e8 $d
             tvout.s:630    .text:00000000000013fc $t
             tvout.s:631    .text:0000000000001400 $d
             forth.s:694    .text:0000000000003390 XORR
             tvout.s:651    .text:000000000000143c $t
             tvout.s:652    .text:0000000000001440 $d
             tvout.s:660    .text:0000000000001450 _SHOW_CURSOR
             tvout.s:660    .text:000000000000145c $t
             tvout.s:663    .text:0000000000001460 $d
             forth.s:864    .text:00000000000034e8 TWOSL
             forth.s:444    .text:0000000000003194 CSTOR
             forth.s:956    .text:00000000000035b8 DDROP
             tvout.s:691    .text:00000000000014d8 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014e4 $t
             tvout.s:694    .text:00000000000014e8 $d
             forth.s:685    .text:000000000000337c ORR
             tvout.s:704    .text:0000000000001510 _TV_AT
             tvout.s:704    .text:0000000000001516 $t
             tvout.s:704    .text:0000000000001518 TV_AT
             tvout.s:719    .text:000000000000153c $d
             tvout.s:719    .text:0000000000001540 _INPUT
             tvout.s:719    .text:0000000000001546 $t
             tvout.s:719    .text:0000000000001548 INPUT
             tvout.s:721    .text:000000000000154c $d
             forth.s:1970   .text:0000000000003f10 PAD
             forth.s:3350   .text:0000000000004e6c ACCEP
             forth.s:612    .text:00000000000032ec OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001578 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
ARM GAS  forth.s 			page 237


       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
ARM GAS  forth.s 			page 238


       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000001584 sc_ascii
         mcSaite.inc:100    .text:0000000000001638 shifted
         mcSaite.inc:151    .text:0000000000001698 altchar
         mcSaite.inc:167    .text:00000000000016a8 extended
         mcSaite.inc:191    .text:00000000000016d0 controls
ARM GAS  forth.s 			page 239


           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001706 $t
           ps2_kbd.s:179    .text:0000000000001832 send_bit
           ps2_kbd.s:107    .text:0000000000001768 start_bit
           ps2_kbd.s:118    .text:000000000000178c parity_bit
           ps2_kbd.s:125    .text:00000000000017a0 stop_bit
           ps2_kbd.s:152    .text:00000000000017f6 store_code
           ps2_kbd.s:253    .text:00000000000018c6 do_async_key
           ps2_kbd.s:204    .text:0000000000001876 send_parity
           ps2_kbd.s:211    .text:0000000000001888 send_stop
           ps2_kbd.s:218    .text:0000000000001892 rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018b2 is_async_key
           ps2_kbd.s:286    .text:0000000000001916 async_keys
           ps2_kbd.s:378    .text:00000000000019fc table_scan
           ps2_kbd.s:260    .text:00000000000018d8 set_async_key
           ps2_kbd.s:295    .text:0000000000001924 async_jump
           ps2_kbd.s:265    .text:00000000000018e6 shift_key
           ps2_kbd.s:273    .text:00000000000018f6 set_reset
           ps2_kbd.s:268    .text:00000000000018ec ctrl_key
           ps2_kbd.s:271    .text:00000000000018f2 alt_key
           ps2_kbd.s:287    .text:0000000000001916 $d
           ps2_kbd.s:340    .text:00000000000019a4 $d
           ps2_kbd.s:340    .text:00000000000019a8 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019b2 $t
           ps2_kbd.s:340    .text:00000000000019b4 KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019c4 keycode
           ps2_kbd.s:365    .text:00000000000019ec wait_code
           ps2_kbd.s:396    .text:0000000000001a16 $d
           ps2_kbd.s:396    .text:0000000000001a1a _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a70 inkey_exit
           ps2_kbd.s:418    .text:0000000000001a74 pause_key
           ps2_kbd.s:427    .text:0000000000001a8a do_modifiers
           ps2_kbd.s:436    .text:0000000000001aa2 shift_down
           ps2_kbd.s:440    .text:0000000000001aa8 altchar_down
           ps2_kbd.s:444    .text:0000000000001aae ctrl_down
           ps2_kbd.s:452    .text:0000000000001aca do_capslock
           ps2_kbd.s:478    .text:0000000000001aee kbd_send
           ps2_kbd.s:553    .text:0000000000001be2 kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001c00 $d
           ps2_kbd.s:567    .text:0000000000001c04 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001c0c $t
           ps2_kbd.s:567    .text:0000000000001c0c KBD_RST
           ps2_kbd.s:591    .text:0000000000001c56 $d
ARM GAS  forth.s 			page 240


           ps2_kbd.s:591    .text:0000000000001c5a _KBD_LED
           ps2_kbd.s:591    .text:0000000000001c62 $t
           ps2_kbd.s:591    .text:0000000000001c64 KBD_LED
           ps2_kbd.s:616    .text:0000000000001cb8 $d
           ps2_kbd.s:616    .text:0000000000001cbc _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001cc8 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001cf2 $d
           ps2_kbd.s:633    .text:0000000000001cf6 _WKEY
           ps2_kbd.s:633    .text:0000000000001d00 WKEY
           ps2_kbd.s:635    .text:0000000000001d04 $d
           ps2_kbd.s:640    .text:0000000000001d1c $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001d3c $t
         spi-flash.s:85     .text:0000000000001dde $d
         spi-flash.s:85     .text:0000000000001de2 _CHIP_SEL
         spi-flash.s:85     .text:0000000000001dec CHIP_SEL
         spi-flash.s:97     .text:0000000000001e0a $d
         spi-flash.s:97     .text:0000000000001e0e _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001e18 $t
         spi-flash.s:97     .text:0000000000001e18 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001e46 $d
         spi-flash.s:113    .text:0000000000001e4a _RD_BYTE
         spi-flash.s:113    .text:0000000000001e52 $t
         spi-flash.s:113    .text:0000000000001e54 RD_BYTE
         spi-flash.s:133    .text:0000000000001e7c $d
         spi-flash.s:133    .text:0000000000001e80 _WR_BYTE
         spi-flash.s:133    .text:0000000000001e88 $t
         spi-flash.s:133    .text:0000000000001e88 WR_BYTE
         spi-flash.s:151    .text:0000000000001eac $d
         spi-flash.s:151    .text:0000000000001eb0 _WR_DIS
         spi-flash.s:151    .text:0000000000001eb8 WR_DIS
         spi-flash.s:153    .text:0000000000001ebc $d
         spi-flash.s:163    .text:0000000000001ed8 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ee0 $t
         spi-flash.s:163    .text:0000000000001ee0 WR_ENBL
         spi-flash.s:165    .text:0000000000001ee4 $d
         spi-flash.s:175    .text:0000000000001f00 _RD_SR
         spi-flash.s:175    .text:0000000000001f06 $t
         spi-flash.s:175    .text:0000000000001f08 RD_SR
         spi-flash.s:177    .text:0000000000001f0c $d
         spi-flash.s:185    .text:0000000000001f30 sr_cmd
         spi-flash.s:191    .text:0000000000001f37 _SEND_ADR
         spi-flash.s:191    .text:0000000000001f40 $t
         spi-flash.s:191    .text:0000000000001f40 SEND_ADR
         spi-flash.s:193    .text:0000000000001f44 $d
         spi-flash.s:208    .text:0000000000001f78 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001f82 $t
         spi-flash.s:208    .text:0000000000001f84 WAIT_DONE
         spi-flash.s:210    .text:0000000000001f88 $d
         spi-flash.s:223    .text:0000000000001fb8 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001fc2 $t
         spi-flash.s:223    .text:0000000000001fc4 ERASE_BLK
         spi-flash.s:225    .text:0000000000001fc8 $d
         spi-flash.s:238    .text:0000000000001ff0 _ERASE_CHIP
ARM GAS  forth.s 			page 241


         spi-flash.s:238    .text:0000000000001ffc ERASE_CHIP
         spi-flash.s:240    .text:0000000000002000 $d
         spi-flash.s:256    .text:0000000000002030 _RD_BLK
         spi-flash.s:256    .text:0000000000002038 RD_BLK
         spi-flash.s:258    .text:000000000000203c $d
         spi-flash.s:278    .text:0000000000002084 _WR_BLK
         spi-flash.s:278    .text:000000000000208c WR_BLK
         spi-flash.s:280    .text:0000000000002090 $d
             forth.s:2847   .text:0000000000004858 HDOT
         spi-flash.s:316    .text:00000000000020e8 _SEARCH_FILE
         spi-flash.s:316    .text:00000000000020f4 $t
         spi-flash.s:316    .text:00000000000020f4 SEARCH_FILE
         spi-flash.s:319    .text:00000000000020f8 $d
         spi-flash.s:325    .text:0000000000002100 _ERASE_FILE
         spi-flash.s:325    .text:000000000000210c ERASE_FILE
         spi-flash.s:328    .text:0000000000002110 $d
         spi-flash.s:334    .text:0000000000002118 _DIR
         spi-flash.s:334    .text:000000000000211c $t
         spi-flash.s:334    .text:000000000000211c DIR
         spi-flash.s:337    .text:0000000000002120 $d
         spi-flash.s:343    .text:0000000000002128 _SAVE
         spi-flash.s:343    .text:0000000000002130 SAVE
         spi-flash.s:346    .text:0000000000002134 $d
         spi-flash.s:352    .text:000000000000213c _LOAD
         spi-flash.s:352    .text:0000000000002144 LOAD
         spi-flash.s:355    .text:0000000000002148 $d
             block.s:48     .text:0000000000002150 _BLK
             block.s:48     .text:0000000000002154 $t
             block.s:48     .text:0000000000002154 BLK
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:33     .text:0000000000002162 $d
               fpu.s:42     .text:0000000000002186 p10
               fpu.s:59     .text:00000000000021b2 _PWR10
               fpu.s:59     .text:00000000000021b8 $t
               fpu.s:59     .text:00000000000021b8 PWR10
               fpu.s:90     .text:00000000000021e4 $d
               fpu.s:90     .text:00000000000021e8 _FDI
               fpu.s:90     .text:00000000000021ec $t
               fpu.s:90     .text:00000000000021ec FDI
               fpu.s:100    .text:00000000000021fe $d
               fpu.s:100    .text:0000000000002202 _FEI
               fpu.s:100    .text:0000000000002206 $t
               fpu.s:100    .text:0000000000002208 FEI
               fpu.s:110    .text:000000000000221a $d
               fpu.s:110    .text:000000000000221e _FPSCR
               fpu.s:110    .text:0000000000002224 $t
               fpu.s:123    .text:0000000000002234 $d
               fpu.s:123    .text:0000000000002238 _CLR_FPSCR
               fpu.s:123    .text:0000000000002242 $t
               fpu.s:136    .text:000000000000225c $d
               fpu.s:136    .text:0000000000002260 _TOS0
               fpu.s:136    .text:0000000000002264 $t
               fpu.s:136    .text:0000000000002264 TOS0
               fpu.s:145    .text:0000000000002270 $d
ARM GAS  forth.s 			page 242


               fpu.s:145    .text:0000000000002274 _TOS1
               fpu.s:145    .text:0000000000002278 $t
               fpu.s:145    .text:0000000000002278 TOS1
               fpu.s:154    .text:0000000000002284 $d
               fpu.s:154    .text:0000000000002288 _TOS2
               fpu.s:154    .text:000000000000228c $t
               fpu.s:154    .text:000000000000228c TOS2
               fpu.s:163    .text:0000000000002298 $d
               fpu.s:163    .text:000000000000229c _S0FROM
               fpu.s:163    .text:00000000000022a0 $t
               fpu.s:163    .text:00000000000022a0 S0FROM
               fpu.s:172    .text:00000000000022ac $d
               fpu.s:172    .text:00000000000022b0 _S1FROM
               fpu.s:172    .text:00000000000022b4 $t
               fpu.s:172    .text:00000000000022b4 S1FROM
               fpu.s:181    .text:00000000000022c0 $d
               fpu.s:181    .text:00000000000022c4 _S2FROM
               fpu.s:181    .text:00000000000022c8 $t
               fpu.s:181    .text:00000000000022c8 S2FROM
               fpu.s:192    .text:00000000000022d4 $d
               fpu.s:192    .text:00000000000022d8 _FTOS
               fpu.s:192    .text:00000000000022dc $t
               fpu.s:192    .text:00000000000022dc FTOS
               fpu.s:202    .text:00000000000022ec $d
               fpu.s:202    .text:00000000000022f0 _TRUNC
               fpu.s:202    .text:00000000000022f6 $t
               fpu.s:202    .text:00000000000022f8 TRUNC
               fpu.s:212    .text:0000000000002308 $d
               fpu.s:212    .text:000000000000230c _STOF
               fpu.s:212    .text:0000000000002310 $t
               fpu.s:212    .text:0000000000002310 STOF
               fpu.s:222    .text:0000000000002320 $d
               fpu.s:222    .text:0000000000002324 _FPLUS
               fpu.s:222    .text:0000000000002328 FPLUS
               fpu.s:235    .text:0000000000002340 $d
               fpu.s:235    .text:0000000000002344 _FSUBB
               fpu.s:235    .text:0000000000002348 FSUBB
               fpu.s:249    .text:0000000000002360 $d
               fpu.s:249    .text:0000000000002364 _FSTAR
               fpu.s:249    .text:0000000000002368 FSTAR
               fpu.s:262    .text:0000000000002380 $d
               fpu.s:262    .text:0000000000002384 _FSLH
               fpu.s:262    .text:0000000000002388 FSLH
               fpu.s:275    .text:00000000000023a0 $d
               fpu.s:275    .text:00000000000023a4 _FNEG
               fpu.s:275    .text:00000000000023ac $t
               fpu.s:275    .text:00000000000023ac FNEG
               fpu.s:285    .text:00000000000023bc $d
               fpu.s:285    .text:00000000000023c0 _FABS
               fpu.s:285    .text:00000000000023c8 FABS
               fpu.s:297    .text:00000000000023dc $d
               fpu.s:297    .text:00000000000023e0 _SQRT
               fpu.s:297    .text:00000000000023e8 SQRT
               fpu.s:307    .text:00000000000023f8 $d
               fpu.s:307    .text:00000000000023fc _FZLESS
               fpu.s:307    .text:0000000000002400 $t
               fpu.s:307    .text:0000000000002400 FZLESS
ARM GAS  forth.s 			page 243


               fpu.s:319    .text:0000000000002418 $d
               fpu.s:319    .text:000000000000241c _FGREAT
               fpu.s:319    .text:0000000000002420 FGREAT
               fpu.s:321    .text:0000000000002424 $d
             forth.s:1042   .text:000000000000367c INVER
               fpu.s:330    .text:0000000000002438 _FLESS
               fpu.s:330    .text:000000000000243c FLESS
               fpu.s:332    .text:0000000000002440 $d
               fpu.s:340    .text:0000000000002450 _FMIN
               fpu.s:340    .text:0000000000002458 FMIN
               fpu.s:342    .text:000000000000245c $d
               fpu.s:353    .text:0000000000002480 _FMAX
               fpu.s:353    .text:0000000000002488 FMAX
               fpu.s:355    .text:000000000000248c $d
               fpu.s:368    .text:00000000000024b0 _FSIGN
               fpu.s:368    .text:00000000000024b6 $t
               fpu.s:368    .text:00000000000024b8 FSIGN
               fpu.s:379    .text:00000000000024cc $d
               fpu.s:379    .text:00000000000024d0 _FEXP
               fpu.s:379    .text:00000000000024d8 FEXP
               fpu.s:390    .text:00000000000024f0 $d
               fpu.s:390    .text:00000000000024f4 _FMANT
               fpu.s:390    .text:00000000000024fa $t
               fpu.s:390    .text:00000000000024fc FMANT
               fpu.s:403    .text:0000000000002518 $d
               fpu.s:403    .text:000000000000251c _PI
               fpu.s:403    .text:0000000000002520 PI
               fpu.s:412    .text:0000000000002530 $d
               fpu.s:412    .text:0000000000002534 _LN2
               fpu.s:412    .text:0000000000002538 $t
               fpu.s:412    .text:0000000000002538 LN2
               fpu.s:421    .text:0000000000002548 $d
               fpu.s:421    .text:000000000000254c _LN10
               fpu.s:421    .text:0000000000002554 LN10
               fpu.s:431    .text:0000000000002564 $d
               fpu.s:431    .text:0000000000002568 _LOG2
               fpu.s:431    .text:0000000000002570 LOG2
               fpu.s:441    .text:0000000000002580 $d
               fpu.s:441    .text:0000000000002584 _LOG2TO10
               fpu.s:441    .text:000000000000258c $t
               fpu.s:441    .text:000000000000258c LOG2TO10
               fpu.s:443    .text:0000000000002590 $d
             forth.s:635    .text:000000000000331c ZLESS
               fpu.s:453    .text:00000000000025bc $d
            strtof.s:29     .text:00000000000025c8 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000025e0 p10p2at
            strtof.s:44     .text:00000000000025e0 $t
            strtof.s:45     .text:00000000000025e4 $d
            strtof.s:57     .text:0000000000002604 bit_state
            strtof.s:58     .text:0000000000002604 $t
            strtof.s:59     .text:0000000000002608 $d
             forth.s:1931   .text:0000000000003ec4 PICK
            strtof.s:76     .text:0000000000002628 mant_div
ARM GAS  forth.s 			page 244


            strtof.s:77     .text:0000000000002628 $t
            strtof.s:78     .text:000000000000262c $d
            strtof.s:79     .text:0000000000002630 div_loop
             forth.s:1184   .text:00000000000037bc GREAT
            strtof.s:107    .text:000000000000267c mant_mult
            strtof.s:108    .text:000000000000267c $t
            strtof.s:109    .text:0000000000002680 $d
            strtof.s:110    .text:0000000000002684 mult_loop
            strtof.s:134    .text:00000000000026d0 exp_adjust
            strtof.s:135    .text:00000000000026d0 $t
            strtof.s:136    .text:00000000000026d4 $d
             forth.s:945    .text:00000000000035a4 NROT
            strtof.s:148    .text:0000000000002710 pos_exp
             forth.s:1058   .text:00000000000036a0 ABSS
            strtof.s:159    .text:0000000000002720 integer
            strtof.s:160    .text:0000000000002720 $t
            strtof.s:161    .text:0000000000002724 $d
             forth.s:597    .text:00000000000032d0 DSWAP
             forth.s:2400   .text:000000000000436c TONBR
             forth.s:514    .text:000000000000322c DTOR
             forth.s:472    .text:00000000000031c8 DRFROM
            strtof.s:178    .text:0000000000002750 decimals
            strtof.s:179    .text:0000000000002750 $t
            strtof.s:180    .text:0000000000002754 $d
             forth.s:1207   .text:00000000000037f0 MIN
            strtof.s:204    .text:00000000000027a8 exponent
            strtof.s:205    .text:00000000000027a8 $t
            strtof.s:206    .text:00000000000027ac $d
             forth.s:2453   .text:0000000000004402 NEGQ
             forth.s:1050   .text:0000000000003690 NEGAT
            strtof.s:226    .text:00000000000027e8 _FLOATQ
            strtof.s:226    .text:00000000000027f0 FLOATQ
            strtof.s:230    .text:00000000000027f4 $d
             forth.s:2348   .text:00000000000042e0 DECIM
             forth.s:395    .text:0000000000003146 TBRAN
            strtof.s:258    .text:0000000000002874 expect_dot
             forth.s:2433   .text:00000000000043e0 CHARQ
            strtof.s:262    .text:0000000000002888 get_fraction
            strtof.s:279    .text:00000000000028dc get_exponent
            strtof.s:297    .text:0000000000002930 error2
             forth.s:2365   .text:0000000000004304 DIGTQ
            strtof.s:284    .text:00000000000028f0 build_float
            strtof.s:305    .text:0000000000002950 error4
            strtof.s:311    .text:0000000000002964 restore_base
            strtof.s:309    .text:000000000000295c e4
            strtof.s:300    .text:000000000000293c error3
              ftoa.s:28     .text:0000000000002974 rounding
              ftoa.s:48     .text:000000000000299c _ROUND
              ftoa.s:48     .text:00000000000029a2 $t
              ftoa.s:48     .text:00000000000029a4 ROUND
              ftoa.s:50     .text:00000000000029a8 $d
             forth.s:1196   .text:00000000000037d8 MAX
              ftoa.s:67     .text:00000000000029e8 _CSTOP
              ftoa.s:67     .text:00000000000029ec $t
              ftoa.s:67     .text:00000000000029ec CSTOP
              ftoa.s:79     .text:00000000000029f8 ITOA
              ftoa.s:81     .text:00000000000029fc $d
ARM GAS  forth.s 			page 245


             forth.s:1645   .text:0000000000003c38 STOD
             forth.s:997    .text:0000000000003614 DABS
             forth.s:2191   .text:0000000000004148 BDIGS
             forth.s:2255   .text:00000000000041ec DIGS
             forth.s:2273   .text:0000000000004220 SIGN
             forth.s:2287   .text:0000000000004248 EDIGS
             forth.s:2030   .text:0000000000003fa4 CMOVE
              ftoa.s:114    .text:0000000000002a50 _SCALEUP
              ftoa.s:114    .text:0000000000002a58 $t
              ftoa.s:114    .text:0000000000002a58 SCALEUP
              ftoa.s:116    .text:0000000000002a5c $d
              ftoa.s:148    .text:0000000000002ab8 _SCALEDOWN
              ftoa.s:148    .text:0000000000002ac2 $t
              ftoa.s:148    .text:0000000000002ac4 SCALEDOWN
              ftoa.s:150    .text:0000000000002ac8 $d
              ftoa.s:181    .text:0000000000002b20 EPART
              ftoa.s:182    .text:0000000000002b20 $t
              ftoa.s:183    .text:0000000000002b24 $d
              ftoa.s:206    .text:0000000000002b54 FPART
              ftoa.s:207    .text:0000000000002b54 $t
              ftoa.s:208    .text:0000000000002b58 $d
              ftoa.s:255    .text:0000000000002bf8 IPART
              ftoa.s:256    .text:0000000000002bf8 $t
              ftoa.s:257    .text:0000000000002bfc $d
              ftoa.s:313    .text:0000000000002cbc _FTOA
              ftoa.s:313    .text:0000000000002cc0 $t
              ftoa.s:313    .text:0000000000002cc0 FTOA
              ftoa.s:315    .text:0000000000002cc4 $d
              ftoa.s:365    .text:0000000000002da4 nan
             forth.s:831    .text:00000000000034a4 BLANK
              ftoa.s:348    .text:0000000000002d54 zdz
              ftoa.s:387    .text:0000000000002e10 infinity
              ftoa.s:412    .text:0000000000002e58 _FDOT
              ftoa.s:412    .text:0000000000002e5c FDOT
              ftoa.s:415    .text:0000000000002e60 $d
             forth.s:1959   .text:0000000000003ef8 HERE
             forth.s:3771   .text:000000000000538c ALLOT
             forth.s:80     .text:0000000000002ec4 $t
             forth.s:104    .text:0000000000002edc COMPI_NEST
             forth.s:117    .text:0000000000002efa TSTDIN
             forth.s:124    .text:0000000000002f04 TSTDOUT
             forth.s:133    .text:0000000000002f0e $d
             forth.s:133    .text:0000000000002f12 _CFSR
             forth.s:145    .text:0000000000002f2e $d
             forth.s:145    .text:0000000000002f32 _BFAR
             forth.s:157    .text:0000000000002f4e $d
             forth.s:157    .text:0000000000002f52 _QKEY
             forth.s:157    .text:0000000000002f58 QKEY
             forth.s:159    .text:0000000000002f5c $d
             forth.s:2017   .text:0000000000003f84 ATEXE
             forth.s:167    .text:0000000000002f6c _KEY
             forth.s:167    .text:0000000000002f70 $t
             forth.s:167    .text:0000000000002f70 KEY
             forth.s:169    .text:0000000000002f74 KEY1
             forth.s:170    .text:0000000000002f74 $d
             forth.s:185    .text:0000000000002f84 KEY2
             forth.s:192    .text:0000000000002f8c _EMIT
ARM GAS  forth.s 			page 246


             forth.s:194    .text:0000000000002f98 $d
             forth.s:228    .text:0000000000002fa8 _RAND
             forth.s:228    .text:0000000000002fb0 RAND
             forth.s:230    .text:0000000000002fb4 $d
             forth.s:1293   .text:00000000000038ac SEED
             forth.s:1801   .text:0000000000003d80 MODD
             forth.s:259    .text:0000000000003024 _PAUSE
             forth.s:259    .text:0000000000003028 PAUSE
             forth.s:261    .text:000000000000302c $d
             forth.s:1312   .text:00000000000038d8 TIMER
             forth.s:263    .text:0000000000003034 PAUSE_LOOP
             forth.s:268    .text:000000000000304c PAUSE_EXIT
             forth.s:275    .text:0000000000003054 _ULED
             forth.s:284    .text:0000000000003078 ULED_OFF
             forth.s:292    .text:000000000000307c $d
             forth.s:292    .text:0000000000003080 _JOYSTK
             forth.s:292    .text:0000000000003088 JOYSTK
             forth.s:294    .text:000000000000308c $d
             forth.s:306    .text:00000000000030ac _BEEP
             forth.s:306    .text:00000000000030b4 BEEP
             forth.s:331    .text:00000000000030e8 $d
             forth.s:331    .text:00000000000030ec _NOP
             forth.s:331    .text:00000000000030f0 $t
             forth.s:331    .text:00000000000030f0 NOP
             forth.s:349    .text:00000000000030fc $d
             forth.s:349    .text:0000000000003100 _EXECU
             forth.s:349    .text:0000000000003108 $t
             forth.s:369    .text:0000000000003124 NEXT1
             forth.s:387    .text:0000000000003140 QBRAN1
             forth.s:418    .text:0000000000003160 $d
             forth.s:418    .text:0000000000003164 _EXIT
             forth.s:418    .text:000000000000316c EXIT
             forth.s:426    .text:000000000000316e $d
             forth.s:426    .text:0000000000003172 _STORE
             forth.s:426    .text:0000000000003174 $t
             forth.s:436    .text:0000000000003180 $d
             forth.s:436    .text:0000000000003184 _AT
             forth.s:436    .text:0000000000003186 $t
             forth.s:444    .text:000000000000318c $d
             forth.s:444    .text:0000000000003190 _CSTOR
             forth.s:454    .text:00000000000031a0 $d
             forth.s:454    .text:00000000000031a4 _CAT
             forth.s:463    .text:00000000000031ac $d
             forth.s:463    .text:00000000000031b0 _RFROM
             forth.s:472    .text:00000000000031be $d
             forth.s:472    .text:00000000000031c2 _DRFROM
             forth.s:472    .text:00000000000031c6 $t
             forth.s:484    .text:00000000000031de $d
             forth.s:484    .text:00000000000031e2 _RAT
             forth.s:493    .text:00000000000031f2 $d
             forth.s:493    .text:00000000000031f6 _DRAT
             forth.s:493    .text:00000000000031fa $t
             forth.s:493    .text:00000000000031fc DRAT
             forth.s:505    .text:000000000000320e $d
             forth.s:505    .text:0000000000003212 _TOR
             forth.s:514    .text:0000000000003222 $d
             forth.s:514    .text:0000000000003226 _DTOR
ARM GAS  forth.s 			page 247


             forth.s:514    .text:000000000000322a $t
             forth.s:526    .text:000000000000323e $d
             forth.s:526    .text:0000000000003242 _RPSTOR
             forth.s:526    .text:0000000000003246 $t
             forth.s:526    .text:0000000000003248 RPSTOR
             forth.s:535    .text:0000000000003250 $d
             forth.s:535    .text:0000000000003254 _SPSTOR
             forth.s:535    .text:0000000000003258 $t
             forth.s:535    .text:0000000000003258 SPSTOR
             forth.s:544    .text:0000000000003260 $d
             forth.s:544    .text:0000000000003264 _SPAT
             forth.s:544    .text:0000000000003268 $t
             forth.s:544    .text:0000000000003268 SPAT
             forth.s:553    .text:0000000000003270 $d
             forth.s:553    .text:0000000000003274 _RPAT
             forth.s:553    .text:0000000000003278 $t
             forth.s:553    .text:0000000000003278 RPAT
             forth.s:562    .text:0000000000003280 $d
             forth.s:562    .text:0000000000003284 _DROP
             forth.s:571    .text:0000000000003292 $d
             forth.s:571    .text:0000000000003296 _NIP
             forth.s:571    .text:000000000000329a $t
             forth.s:571    .text:000000000000329c NIP
             forth.s:579    .text:00000000000032a2 $d
             forth.s:579    .text:00000000000032a6 _DUPP
             forth.s:579    .text:00000000000032aa $t
             forth.s:587    .text:00000000000032b2 $d
             forth.s:587    .text:00000000000032b6 _SWAP
             forth.s:597    .text:00000000000032c4 $d
             forth.s:597    .text:00000000000032c8 _DSWAP
             forth.s:597    .text:00000000000032ce $t
             forth.s:612    .text:00000000000032e0 $d
             forth.s:612    .text:00000000000032e4 _OVER
             forth.s:621    .text:00000000000032f4 $d
             forth.s:621    .text:00000000000032f8 _DOVER
             forth.s:621    .text:00000000000032fe $t
             forth.s:621    .text:0000000000003300 DOVER
             forth.s:635    .text:0000000000003312 $d
             forth.s:635    .text:0000000000003316 _ZLESS
             forth.s:643    .text:0000000000003322 $d
             forth.s:643    .text:0000000000003326 _ZGREAT
             forth.s:643    .text:000000000000332c ZGREAT
             forth.s:654    .text:0000000000003338 $d
             forth.s:654    .text:000000000000333c _ZNEQU
             forth.s:654    .text:0000000000003340 $t
             forth.s:654    .text:0000000000003340 ZNEQU
             forth.s:664    .text:0000000000003348 $d
             forth.s:664    .text:000000000000334c _NEQU
             forth.s:664    .text:0000000000003350 NEQU
             forth.s:676    .text:000000000000335e $d
             forth.s:676    .text:0000000000003362 _ANDD
             forth.s:676    .text:0000000000003366 $t
             forth.s:685    .text:0000000000003372 $d
             forth.s:685    .text:0000000000003376 _ORR
             forth.s:694    .text:0000000000003386 $d
             forth.s:694    .text:000000000000338a _XORR
             forth.s:694    .text:000000000000338e $t
ARM GAS  forth.s 			page 248


             forth.s:703    .text:000000000000339a $d
             forth.s:703    .text:000000000000339e _UPLUS
             forth.s:703    .text:00000000000033a2 $t
             forth.s:703    .text:00000000000033a4 UPLUS
             forth.s:715    .text:00000000000033b4 $d
             forth.s:715    .text:00000000000033b8 _RSHIFT
             forth.s:724    .text:00000000000033ca $d
             forth.s:724    .text:00000000000033ce _LSHIFT
             forth.s:733    .text:00000000000033e2 $d
             forth.s:733    .text:00000000000033e6 _PLUS
             forth.s:733    .text:00000000000033e8 $t
             forth.s:742    .text:00000000000033f0 $d
             forth.s:742    .text:00000000000033f4 _SUBB
             forth.s:742    .text:00000000000033f6 $t
             forth.s:751    .text:0000000000003402 $d
             forth.s:751    .text:0000000000003406 _STAR
             forth.s:751    .text:0000000000003408 $t
             forth.s:760    .text:0000000000003412 $d
             forth.s:760    .text:0000000000003416 _UMSTA
             forth.s:760    .text:000000000000341a $t
             forth.s:760    .text:000000000000341c UMSTA
             forth.s:772    .text:0000000000003428 $d
             forth.s:772    .text:000000000000342c _MSTAR
             forth.s:772    .text:0000000000003430 MSTAR
             forth.s:783    .text:000000000000343c $d
             forth.s:783    .text:0000000000003440 _ONEP
             forth.s:791    .text:000000000000344a $d
             forth.s:791    .text:000000000000344e _ONEM
             forth.s:799    .text:000000000000345a $d
             forth.s:799    .text:000000000000345e _TWOP
             forth.s:799    .text:0000000000003464 TWOP
             forth.s:807    .text:000000000000346a $d
             forth.s:807    .text:000000000000346e _TWOM
             forth.s:807    .text:0000000000003474 TWOM
             forth.s:815    .text:000000000000347a $d
             forth.s:815    .text:000000000000347e _CELLP
             forth.s:815    .text:0000000000003484 $t
             forth.s:815    .text:0000000000003484 CELLP
             forth.s:823    .text:000000000000348a $d
             forth.s:823    .text:000000000000348e _CELLM
             forth.s:823    .text:0000000000003494 $t
             forth.s:823    .text:0000000000003494 CELLM
             forth.s:831    .text:000000000000349a $d
             forth.s:831    .text:000000000000349e _BLANK
             forth.s:840    .text:00000000000034ae $d
             forth.s:840    .text:00000000000034b2 _CELLS
             forth.s:840    .text:00000000000034b8 $t
             forth.s:840    .text:00000000000034b8 CELLS
             forth.s:848    .text:00000000000034be $d
             forth.s:848    .text:00000000000034c2 _CELLSL
             forth.s:848    .text:00000000000034c8 $t
             forth.s:848    .text:00000000000034c8 CELLSL
             forth.s:856    .text:00000000000034ce $d
             forth.s:856    .text:00000000000034d2 _TWOST
             forth.s:856    .text:00000000000034d8 TWOST
             forth.s:864    .text:00000000000034de $d
             forth.s:864    .text:00000000000034e2 _TWOSL
ARM GAS  forth.s 			page 249


             forth.s:872    .text:00000000000034ee $d
             forth.s:872    .text:00000000000034f2 _QDUP
             forth.s:882    .text:0000000000003502 $d
             forth.s:882    .text:0000000000003506 _TUCK
             forth.s:882    .text:000000000000350c TUCK
             forth.s:891    .text:0000000000003514 $d
             forth.s:891    .text:0000000000003518 _ROLL
             forth.s:891    .text:0000000000003520 ROLL
             forth.s:893    .text:0000000000003524 $d
             forth.s:934    .text:000000000000358c _ROT
             forth.s:934    .text:0000000000003590 $t
             forth.s:945    .text:000000000000359a $d
             forth.s:945    .text:000000000000359e _NROT
             forth.s:956    .text:00000000000035ae $d
             forth.s:956    .text:00000000000035b2 _DDROP
             forth.s:956    .text:00000000000035b8 $t
             forth.s:965    .text:00000000000035c2 $d
             forth.s:965    .text:00000000000035c6 _TDROP
             forth.s:965    .text:00000000000035cc $t
             forth.s:974    .text:00000000000035d6 $d
             forth.s:974    .text:00000000000035da _DDUP
             forth.s:984    .text:00000000000035ec $d
             forth.s:984    .text:00000000000035f0 _DPLUS
             forth.s:984    .text:00000000000035f4 DPLUS
             forth.s:997    .text:0000000000003608 $d
             forth.s:997    .text:000000000000360c _DABS
             forth.s:1013   .text:0000000000003630 $d
             forth.s:1013   .text:0000000000003634 _UDGREAT
             forth.s:1013   .text:0000000000003638 $t
             forth.s:1013   .text:0000000000003638 UDGREAT
             forth.s:1030   .text:0000000000003654 $d
             forth.s:1030   .text:0000000000003658 _DZEQUAL
             forth.s:1030   .text:000000000000365c $t
             forth.s:1030   .text:000000000000365c DZEQUAL
             forth.s:1042   .text:000000000000366e $d
             forth.s:1042   .text:0000000000003672 _INVER
             forth.s:1050   .text:0000000000003682 $d
             forth.s:1050   .text:0000000000003686 _NEGAT
             forth.s:1058   .text:0000000000003696 $d
             forth.s:1058   .text:000000000000369a _ABSS
             forth.s:1058   .text:000000000000369e $t
             forth.s:1068   .text:00000000000036aa $d
             forth.s:1068   .text:00000000000036ae _CLZ
             forth.s:1068   .text:00000000000036b2 $t
             forth.s:1076   .text:00000000000036ba $d
             forth.s:1076   .text:00000000000036be _CTZ
             forth.s:1076   .text:00000000000036c2 $t
             forth.s:1076   .text:00000000000036c4 CTZ
             forth.s:1091   .text:00000000000036de $d
             forth.s:1091   .text:00000000000036e2 _FALSE
             forth.s:1091   .text:00000000000036e8 $t
             forth.s:1091   .text:00000000000036e8 FALSE
             forth.s:1101   .text:00000000000036f4 $d
             forth.s:1101   .text:00000000000036f8 _TRUE
             forth.s:1101   .text:0000000000003700 TRUE
             forth.s:1112   .text:0000000000003710 $d
             forth.s:1112   .text:0000000000003714 _ZEQUAL
ARM GAS  forth.s 			page 250


             forth.s:1112   .text:0000000000003718 ZEQUAL
             forth.s:1123   .text:000000000000372a $d
             forth.s:1123   .text:000000000000372e _EQUAL
             forth.s:1123   .text:0000000000003730 $t
             forth.s:1135   .text:0000000000003742 $d
             forth.s:1135   .text:0000000000003746 _DIFF
             forth.s:1135   .text:000000000000374c DIFF
             forth.s:1148   .text:0000000000003766 $d
             forth.s:1148   .text:000000000000376a _ULESS
             forth.s:1160   .text:0000000000003782 $d
             forth.s:1160   .text:0000000000003786 _LESS
             forth.s:1160   .text:0000000000003788 $t
             forth.s:1160   .text:0000000000003788 LESS
             forth.s:1172   .text:000000000000379a $d
             forth.s:1172   .text:000000000000379e _UGREAT
             forth.s:1172   .text:00000000000037a4 UGREAT
             forth.s:1184   .text:00000000000037b6 $d
             forth.s:1184   .text:00000000000037ba _GREAT
             forth.s:1184   .text:00000000000037bc $t
             forth.s:1196   .text:00000000000037ce $d
             forth.s:1196   .text:00000000000037d2 _MAX
             forth.s:1196   .text:00000000000037d6 $t
             forth.s:1207   .text:00000000000037e6 $d
             forth.s:1207   .text:00000000000037ea _MIN
             forth.s:1207   .text:00000000000037ee $t
             forth.s:1218   .text:00000000000037fe $d
             forth.s:1218   .text:0000000000003802 _PSTOR
             forth.s:1218   .text:0000000000003808 PSTOR
             forth.s:1230   .text:000000000000381a $d
             forth.s:1230   .text:000000000000381e _DSTOR
             forth.s:1230   .text:0000000000003824 DSTOR
             forth.s:1242   .text:000000000000383a $d
             forth.s:1242   .text:000000000000383e _DAT
             forth.s:1242   .text:0000000000003844 DAT
             forth.s:1252   .text:0000000000003850 $d
             forth.s:1252   .text:0000000000003854 _COUNT
             forth.s:1252   .text:000000000000385a $t
             forth.s:1262   .text:000000000000386a $d
             forth.s:1262   .text:000000000000386e _DNEGA
             forth.s:1262   .text:0000000000003876 $t
             forth.s:1262   .text:0000000000003878 DNEGA
             forth.s:1284   .text:000000000000388a $d
             forth.s:1284   .text:000000000000388e _STATE
             forth.s:1284   .text:0000000000003894 $t
             forth.s:1284   .text:0000000000003894 STATE
             forth.s:1293   .text:00000000000038a0 $d
             forth.s:1293   .text:00000000000038a4 _SEED
             forth.s:1303   .text:00000000000038b8 $d
             forth.s:1303   .text:00000000000038bc _MSEC
             forth.s:1303   .text:00000000000038c2 $t
             forth.s:1312   .text:00000000000038ce $d
             forth.s:1312   .text:00000000000038d2 _TIMER
             forth.s:1312   .text:00000000000038d8 $t
             forth.s:1321   .text:00000000000038e4 $d
             forth.s:1321   .text:00000000000038e8 _TBOOT
             forth.s:1321   .text:00000000000038ee $t
             forth.s:1321   .text:00000000000038f0 TBOOT
ARM GAS  forth.s 			page 251


             forth.s:1330   .text:00000000000038fc $d
             forth.s:1330   .text:0000000000003900 _BASE
             forth.s:1341   .text:0000000000003914 $d
             forth.s:1341   .text:0000000000003918 _BCHR
             forth.s:1341   .text:000000000000391e $t
             forth.s:1341   .text:0000000000003920 BCHR
             forth.s:1351   .text:000000000000392c TEMP
             forth.s:1360   .text:0000000000003938 $d
             forth.s:1360   .text:000000000000393c _SPAN
             forth.s:1360   .text:0000000000003944 SPAN
             forth.s:1369   .text:0000000000003950 $d
             forth.s:1369   .text:0000000000003954 _INN
             forth.s:1369   .text:0000000000003958 $t
             forth.s:1369   .text:0000000000003958 INN
             forth.s:1379   .text:0000000000003964 $d
             forth.s:1379   .text:0000000000003968 _NTIB
             forth.s:1379   .text:0000000000003970 NTIB
             forth.s:1388   .text:000000000000397c $d
             forth.s:1388   .text:0000000000003980 _TEVAL
             forth.s:1388   .text:0000000000003986 $t
             forth.s:1388   .text:0000000000003988 TEVAL
             forth.s:1398   .text:0000000000003994 $d
             forth.s:1398   .text:0000000000003998 _HLD
             forth.s:1398   .text:000000000000399c $t
             forth.s:1398   .text:000000000000399c HLD
             forth.s:1408   .text:00000000000039a8 $d
             forth.s:1408   .text:00000000000039ac _CNTXT
             forth.s:1408   .text:00000000000039b4 $t
             forth.s:1409   .text:00000000000039b4 CRRNT
             forth.s:1419   .text:00000000000039c0 $d
             forth.s:1419   .text:00000000000039c4 _CPP
             forth.s:1419   .text:00000000000039c8 CPP
             forth.s:1430   .text:00000000000039d4 $d
             forth.s:1430   .text:00000000000039d8 _UNUSED
             forth.s:1430   .text:00000000000039e0 UNUSED
             forth.s:1442   .text:00000000000039f6 $d
             forth.s:1442   .text:00000000000039fa _FCP
             forth.s:1442   .text:00000000000039fe $t
             forth.s:1442   .text:0000000000003a00 FCP
             forth.s:1452   .text:0000000000003a0c $d
             forth.s:1452   .text:0000000000003a10 _LAST
             forth.s:1452   .text:0000000000003a18 LAST
             forth.s:1466   .text:0000000000003a24 $d
             forth.s:1466   .text:0000000000003a28 _USER_BEGIN
             forth.s:1466   .text:0000000000003a34 USER_BEGIN
             forth.s:1470   .text:0000000000003a40 USR_BGN_ADR
             forth.s:1471   .text:0000000000003a40 $d
             forth.s:1477   .text:0000000000003a48 _USER_END
             forth.s:1477   .text:0000000000003a54 USER_END
             forth.s:1481   .text:0000000000003a60 USER_END_ADR
             forth.s:1482   .text:0000000000003a60 $d
             forth.s:1488   .text:0000000000003a68 _MAXINT
             forth.s:1488   .text:0000000000003a70 $t
             forth.s:1488   .text:0000000000003a70 MAXINT
             forth.s:1497   .text:0000000000003a80 $d
             forth.s:1497   .text:0000000000003a84 _MININT
             forth.s:1497   .text:0000000000003a8c $t
ARM GAS  forth.s 			page 252


             forth.s:1497   .text:0000000000003a8c MININT
             forth.s:1506   .text:0000000000003a9c $d
             forth.s:1506   .text:0000000000003aa0 _MAXUINT
             forth.s:1506   .text:0000000000003aac MAXUINT
             forth.s:1521   .text:0000000000003abc $d
             forth.s:1521   .text:0000000000003ac0 _WITHI
             forth.s:1521   .text:0000000000003ac8 WITHI
             forth.s:1523   .text:0000000000003acc $d
             forth.s:1538   .text:0000000000003aec _UMMOD
             forth.s:1538   .text:0000000000003af4 UMMOD
             forth.s:1542   .text:0000000000003afe UMMOD0
             forth.s:1549   .text:0000000000003b0e UMMOD1
             forth.s:1555   .text:0000000000003b18 UMMOD2
             forth.s:1568   .text:0000000000003b24 $d
             forth.s:1568   .text:0000000000003b28 _MSMOD
             forth.s:1568   .text:0000000000003b30 MSMOD
             forth.s:1570   .text:0000000000003b34 $d
             forth.s:1579   .text:0000000000003b5c MMOD1
             forth.s:1586   .text:0000000000003b78 MMOD2
             forth.s:1594   .text:0000000000003b98 MMOD3
             forth.s:1608   .text:0000000000003ba0 _SMSLSHREM
             forth.s:1608   .text:0000000000003ba8 SMSLSHREM
             forth.s:1610   .text:0000000000003bac $d
             forth.s:1645   .text:0000000000003c34 _STOD
             forth.s:1645   .text:0000000000003c38 $t
             forth.s:1654   .text:0000000000003c44 $d
             forth.s:1654   .text:0000000000003c48 _D2STAR
             forth.s:1654   .text:0000000000003c4c $t
             forth.s:1654   .text:0000000000003c4c D2STAR
             forth.s:1666   .text:0000000000003c5e $d
             forth.s:1666   .text:0000000000003c62 _D2SL
             forth.s:1666   .text:0000000000003c66 $t
             forth.s:1666   .text:0000000000003c68 D2SL
             forth.s:1681   .text:0000000000003c76 $d
             forth.s:1681   .text:0000000000003c7a _DSLMOD
             forth.s:1681   .text:0000000000003c80 $t
             forth.s:1681   .text:0000000000003c80 DSLMOD
             forth.s:1717   .text:0000000000003ccc $d
             forth.s:1717   .text:0000000000003cd0 _DSLASH
             forth.s:1717   .text:0000000000003cd4 DSLASH
             forth.s:1719   .text:0000000000003cd8 $d
             forth.s:1739   .text:0000000000003d1c _DSTAR
             forth.s:1739   .text:0000000000003d20 DSTAR
             forth.s:1788   .text:0000000000003d56 $d
             forth.s:1788   .text:0000000000003d5a _SLMOD
             forth.s:1790   .text:0000000000003d64 $d
             forth.s:1801   .text:0000000000003d7c _MODD
             forth.s:1801   .text:0000000000003d80 $t
             forth.s:1803   .text:0000000000003d84 $d
             forth.s:1812   .text:0000000000003d94 _SLASH
             forth.s:1812   .text:0000000000003d96 $t
             forth.s:1812   .text:0000000000003d98 SLASH
             forth.s:1814   .text:0000000000003d9c $d
             forth.s:1825   .text:0000000000003db0 _SSMOD
             forth.s:1825   .text:0000000000003db6 $t
             forth.s:1825   .text:0000000000003db8 SSMOD
             forth.s:1827   .text:0000000000003dbc $d
ARM GAS  forth.s 			page 253


             forth.s:1839   .text:0000000000003dd4 _STASL
             forth.s:1839   .text:0000000000003dd8 STASL
             forth.s:1841   .text:0000000000003ddc $d
             forth.s:1855   .text:0000000000003df0 _CHARP
             forth.s:1855   .text:0000000000003df6 $t
             forth.s:1855   .text:0000000000003df8 CHARP
             forth.s:1865   .text:0000000000003e00 $d
             forth.s:1865   .text:0000000000003e04 _CHARS
             forth.s:1865   .text:0000000000003e0a $t
             forth.s:1865   .text:0000000000003e0c CHARS
             forth.s:1875   .text:0000000000003e10 $d
             forth.s:1875   .text:0000000000003e14 _ALIGN
             forth.s:1875   .text:0000000000003e1a $t
             forth.s:1875   .text:0000000000003e1c ALIGN
             forth.s:1888   .text:0000000000003e2c $d
             forth.s:1888   .text:0000000000003e30 _ALGND
             forth.s:1888   .text:0000000000003e38 $t
             forth.s:1888   .text:0000000000003e38 ALGND
             forth.s:1899   .text:0000000000003e48 $d
             forth.s:1899   .text:0000000000003e4c _TCHAR
             forth.s:1899   .text:0000000000003e52 $t
             forth.s:1899   .text:0000000000003e54 TCHAR
             forth.s:1901   .text:0000000000003e58 $d
             forth.s:1911   .text:0000000000003e90 TCHA1
             forth.s:1919   .text:0000000000003e98 _DEPTH
             forth.s:1919   .text:0000000000003e9e $t
             forth.s:1919   .text:0000000000003ea0 DEPTH
             forth.s:1931   .text:0000000000003eb8 $d
             forth.s:1931   .text:0000000000003ebc _PICK
             forth.s:1942   .text:0000000000003ece $d
             forth.s:1942   .text:0000000000003ed2 _PUT
             forth.s:1942   .text:0000000000003ed6 $t
             forth.s:1942   .text:0000000000003ed8 PUT
             forth.s:1959   .text:0000000000003eec $d
             forth.s:1959   .text:0000000000003ef0 _HERE
             forth.s:1961   .text:0000000000003efc $d
             forth.s:1970   .text:0000000000003f0c _PAD
             forth.s:1970   .text:0000000000003f10 $t
             forth.s:1972   .text:0000000000003f14 $d
             forth.s:1983   .text:0000000000003f2c _TIB
             forth.s:1983   .text:0000000000003f30 $t
             forth.s:1983   .text:0000000000003f30 TIB
             forth.s:1994   .text:0000000000003f3a $d
             forth.s:1994   .text:0000000000003f3e _SOURCID
             forth.s:1994   .text:0000000000003f48 $t
             forth.s:1994   .text:0000000000003f48 SOURCID
             forth.s:2006   .text:0000000000003f52 $d
             forth.s:2006   .text:0000000000003f56 _SOURCE
             forth.s:2006   .text:0000000000003f60 SOURCE
             forth.s:2008   .text:0000000000003f64 $d
             forth.s:2017   .text:0000000000003f78 _ATEXE
             forth.s:2030   .text:0000000000003f98 $d
             forth.s:2030   .text:0000000000003f9c _CMOVE
             forth.s:2030   .text:0000000000003fa2 $t
             forth.s:2044   .text:0000000000003fc4 CMOV3
             forth.s:2039   .text:0000000000003fba CMOV1
             forth.s:2036   .text:0000000000003fb2 CMOV0
ARM GAS  forth.s 			page 254


             forth.s:2046   .text:0000000000003fc8 CMOV2
             forth.s:2054   .text:0000000000003fd0 $d
             forth.s:2054   .text:0000000000003fd4 _MOVE
             forth.s:2054   .text:0000000000003fdc MOVE
             forth.s:2063   .text:0000000000003fde $d
             forth.s:2063   .text:0000000000003fe2 _WMOVE
             forth.s:2063   .text:0000000000003fe8 $t
             forth.s:2081   .text:0000000000004012 MOVE1
             forth.s:2078   .text:000000000000400e MOVE3
             forth.s:2075   .text:000000000000400a MOVE0
             forth.s:2086   .text:000000000000401c MOVE2
             forth.s:2095   .text:0000000000004024 $d
             forth.s:2095   .text:0000000000004028 _FILL
             forth.s:2103   .text:000000000000403e FILL2
             forth.s:2099   .text:0000000000004036 FILL1
             forth.s:2113   .text:0000000000004046 $d
             forth.s:2113   .text:000000000000404a _ERASE
             forth.s:2113   .text:0000000000004050 $t
             forth.s:2113   .text:0000000000004050 ERASE
             forth.s:2115   .text:0000000000004054 $d
             forth.s:2131   .text:0000000000004080 _PACKS
             forth.s:2131   .text:0000000000004086 $t
             forth.s:2131   .text:0000000000004088 PACKS
             forth.s:2133   .text:000000000000408c $d
             forth.s:2162   .text:00000000000040e4 _DIGIT
             forth.s:2162   .text:00000000000040ea $t
             forth.s:2162   .text:00000000000040ec DIGIT
             forth.s:2164   .text:00000000000040f0 $d
             forth.s:2179   .text:0000000000004124 _EXTRC
             forth.s:2179   .text:000000000000412c $t
             forth.s:2179   .text:000000000000412c EXTRC
             forth.s:2181   .text:0000000000004130 $d
             forth.s:2191   .text:0000000000004144 _BDIGS
             forth.s:2193   .text:000000000000414c $d
             forth.s:2203   .text:0000000000004160 _HOLD
             forth.s:2203   .text:0000000000004168 HOLD
             forth.s:2205   .text:000000000000416c $d
             forth.s:2220   .text:0000000000004190 _HOLDS
             forth.s:2220   .text:0000000000004196 $t
             forth.s:2220   .text:0000000000004198 HOLDS
             forth.s:2222   .text:000000000000419c $d
             forth.s:2241   .text:00000000000041c8 _DIG
             forth.s:2241   .text:00000000000041ca $t
             forth.s:2241   .text:00000000000041cc DIG
             forth.s:2243   .text:00000000000041d0 $d
             forth.s:2255   .text:00000000000041e8 _DIGS
             forth.s:2257   .text:00000000000041f0 DIGS1
             forth.s:2258   .text:00000000000041f0 $d
             forth.s:2263   .text:000000000000420c DIGS2
             forth.s:2273   .text:0000000000004218 _SIGN
             forth.s:2275   .text:0000000000004224 $d
             forth.s:2279   .text:000000000000423c SIGN1
             forth.s:2287   .text:0000000000004244 _EDIGS
             forth.s:2289   .text:000000000000424c $d
             forth.s:2304   .text:0000000000004268 STRR
             forth.s:2305   .text:0000000000004268 $t
             forth.s:2306   .text:000000000000426c $d
ARM GAS  forth.s 			page 255


             forth.s:2323   .text:0000000000004298 _HEX
             forth.s:2323   .text:000000000000429c $t
             forth.s:2323   .text:000000000000429c HEX
             forth.s:2325   .text:00000000000042a0 $d
             forth.s:2336   .text:00000000000042b8 _BIN
             forth.s:2336   .text:00000000000042bc $t
             forth.s:2336   .text:00000000000042bc BIN
             forth.s:2338   .text:00000000000042c0 $d
             forth.s:2348   .text:00000000000042d8 _DECIM
             forth.s:2348   .text:00000000000042e0 $t
             forth.s:2350   .text:00000000000042e4 $d
             forth.s:2365   .text:00000000000042fc _DIGTQ
             forth.s:2367   .text:0000000000004308 $d
             forth.s:2380   .text:0000000000004350 DGTQ1
             forth.s:2400   .text:0000000000004364 _TONBR
             forth.s:2400   .text:000000000000436c $t
             forth.s:2402   .text:0000000000004370 $d
             forth.s:2434   .text:00000000000043e0 $t
             forth.s:2482   .text:000000000000442c $d
             forth.s:2482   .text:0000000000004430 _INTQ
             forth.s:2482   .text:0000000000004438 INTQ
             forth.s:2485   .text:000000000000443c $d
             forth.s:2537   .text:0000000000004504 _NUMBERQ
             forth.s:2537   .text:000000000000450c $t
             forth.s:2537   .text:000000000000450c NUMBERQ
             forth.s:2539   .text:0000000000004510 $d
             forth.s:2557   .text:0000000000004530 _SPACE
             forth.s:2557   .text:0000000000004536 $t
             forth.s:2559   .text:000000000000453c $d
             forth.s:2568   .text:000000000000454c _SPACS
             forth.s:2568   .text:0000000000004554 SPACS
             forth.s:2570   .text:0000000000004558 $d
             forth.s:2576   .text:0000000000004574 CHAR2
             forth.s:2574   .text:0000000000004570 CHAR1
             forth.s:2585   .text:0000000000004584 _TYPEE
             forth.s:2587   .text:0000000000004590 $d
             forth.s:2593   .text:00000000000045a8 TYPE2
             forth.s:2589   .text:000000000000459c TYPE1
             forth.s:2603   .text:00000000000045bc _SLTYPE
             forth.s:2603   .text:00000000000045c2 $t
             forth.s:2603   .text:00000000000045c4 SLTYPE
             forth.s:2605   .text:00000000000045c8 $d
             forth.s:2620   .text:00000000000045f0 _CR
             forth.s:2622   .text:00000000000045f8 $d
             forth.s:2634   .text:0000000000004614 DOSTR
             forth.s:2635   .text:0000000000004614 $t
             forth.s:2637   .text:0000000000004618 $d
             forth.s:2656   .text:0000000000004644 STRQP
             forth.s:2657   .text:0000000000004644 $t
             forth.s:2658   .text:0000000000004648 $d
             forth.s:2669   .text:0000000000004650 $t
             forth.s:2670   .text:0000000000004654 $d
             forth.s:2682   .text:0000000000004660 LPAD
             forth.s:2683   .text:0000000000004660 $t
             forth.s:2684   .text:0000000000004664 $d
             forth.s:2715   .text:00000000000046e4 _DOTR
             forth.s:2715   .text:00000000000046e8 DOTR
ARM GAS  forth.s 			page 256


             forth.s:2717   .text:00000000000046ec $d
             forth.s:2799   .text:00000000000047d0 DTOA
             forth.s:2734   .text:0000000000004714 _UDOTR
             forth.s:2734   .text:0000000000004718 $t
             forth.s:2734   .text:0000000000004718 UDOTR
             forth.s:2736   .text:000000000000471c $d
             forth.s:2752   .text:0000000000004748 _UDOT
             forth.s:2754   .text:0000000000004750 $d
             forth.s:2770   .text:000000000000477c _DOT
             forth.s:2770   .text:000000000000477e $t
             forth.s:2772   .text:0000000000004784 $d
             forth.s:2780   .text:00000000000047ac DOT1
             forth.s:2799   .text:00000000000047cc _DTOA
             forth.s:2799   .text:00000000000047d0 $t
             forth.s:2801   .text:00000000000047d4 $d
             forth.s:2816   .text:00000000000047fc _DDOT
             forth.s:2816   .text:0000000000004800 DDOT
             forth.s:2818   .text:0000000000004804 $d
             forth.s:2829   .text:0000000000004824 _UDDOT
             forth.s:2829   .text:0000000000004828 $t
             forth.s:2829   .text:0000000000004828 UDDOT
             forth.s:2831   .text:000000000000482c $d
             forth.s:2847   .text:0000000000004854 _HDOT
             forth.s:2849   .text:000000000000485c $d
             forth.s:2871   .text:00000000000048a4 _QUEST
             forth.s:2871   .text:00000000000048a6 $t
             forth.s:2871   .text:00000000000048a8 QUEST
             forth.s:2873   .text:00000000000048ac $d
             forth.s:2887   .text:00000000000048b8 PARS
             forth.s:2888   .text:00000000000048b8 $t
             forth.s:2889   .text:00000000000048bc $d
             forth.s:2955   .text:00000000000049cc PARS8
             forth.s:2919   .text:0000000000004940 PARS3
             forth.s:2902   .text:00000000000048f8 PARS1
             forth.s:2917   .text:000000000000493c PARS2
             forth.s:2923   .text:000000000000494c PARS4
             forth.s:2935   .text:000000000000497c PARS5
             forth.s:2942   .text:00000000000049a0 PARS6
             forth.s:2948   .text:00000000000049b4 PARS7
             forth.s:2967   .text:00000000000049e0 _PARSE
             forth.s:2967   .text:00000000000049e6 $t
             forth.s:2967   .text:00000000000049e8 PARSE
             forth.s:2969   .text:00000000000049ec $d
             forth.s:2991   .text:0000000000004a2c _PARSENAME
             forth.s:2991   .text:0000000000004a38 PARSENAME
             forth.s:2993   .text:0000000000004a3c $d
             forth.s:3003   .text:0000000000004a4c _DOTPR
             forth.s:3003   .text:0000000000004a50 DOTPR
             forth.s:3005   .text:0000000000004a54 $d
             forth.s:3016   .text:0000000000004a6c _PAREN
             forth.s:3016   .text:0000000000004a6e $t
             forth.s:3016   .text:0000000000004a70 PAREN
             forth.s:3018   .text:0000000000004a74 $d
             forth.s:3029   .text:0000000000004a8c _BKSLA
             forth.s:3029   .text:0000000000004a8e $t
             forth.s:3029   .text:0000000000004a90 BKSLA
             forth.s:3031   .text:0000000000004a94 $d
ARM GAS  forth.s 			page 257


             forth.s:3042   .text:0000000000004aac _CHAR
             forth.s:3042   .text:0000000000004ab4 CHAR
             forth.s:3044   .text:0000000000004ab8 $d
             forth.s:3054   .text:0000000000004ad0 _IMCHAR
             forth.s:3054   .text:0000000000004ad8 IMCHAR
             forth.s:3056   .text:0000000000004adc $d
             forth.s:3843   .text:0000000000005450 LITER
             forth.s:3065   .text:0000000000004aec _WORDD
             forth.s:3065   .text:0000000000004af4 WORDD
             forth.s:3067   .text:0000000000004af8 $d
             forth.s:3079   .text:0000000000004b10 _TOKEN
             forth.s:3079   .text:0000000000004b16 $t
             forth.s:3079   .text:0000000000004b18 TOKEN
             forth.s:3081   .text:0000000000004b1c $d
             forth.s:3248   .text:0000000000004d18 UPPER
             forth.s:3095   .text:0000000000004b30 _TOCFA
             forth.s:3095   .text:0000000000004b38 TOCFA
             forth.s:3097   .text:0000000000004b3c $d
             forth.s:3118   .text:0000000000004b68 _SAMEQ
             forth.s:3118   .text:0000000000004b6e $t
             forth.s:3118   .text:0000000000004b70 SAMEQ
             forth.s:3120   .text:0000000000004b74 $d
             forth.s:3137   .text:0000000000004bbc SAME2
             forth.s:3122   .text:0000000000004b80 SAME1
             forth.s:3152   .text:0000000000004bd0 SEARCH
             forth.s:3153   .text:0000000000004bd0 $t
             forth.s:3154   .text:0000000000004bd4 $d
             forth.s:3161   .text:0000000000004bf0 SEARCH1
             forth.s:3181   .text:0000000000004c48 SEARCH6
             forth.s:3174   .text:0000000000004c30 SEARCH2
             forth.s:3179   .text:0000000000004c40 SEARCH3
             forth.s:3188   .text:0000000000004c60 SEARCH4
             forth.s:3194   .text:0000000000004c7c SEARCH5
             forth.s:3210   .text:0000000000004ca4 _NAMEQ
             forth.s:3210   .text:0000000000004caa $t
             forth.s:3212   .text:0000000000004cb0 $d
             forth.s:3227   .text:0000000000004cc4 _ASCIZ
             forth.s:3227   .text:0000000000004cca $t
             forth.s:3227   .text:0000000000004ccc ASCIZ
             forth.s:3229   .text:0000000000004cd0 $d
             forth.s:3248   .text:0000000000004d10 _UPPER
             forth.s:3248   .text:0000000000004d16 $t
             forth.s:3250   .text:0000000000004d1c $d
             forth.s:3281   .text:0000000000004da0 BKSP
             forth.s:3282   .text:0000000000004da0 $t
             forth.s:3283   .text:0000000000004da4 $d
             forth.s:3297   .text:0000000000004de8 BACK1
             forth.s:3306   .text:0000000000004dec TAP
             forth.s:3307   .text:0000000000004dec $t
             forth.s:3308   .text:0000000000004df0 $d
             forth.s:3321   .text:0000000000004e08 KTAP
             forth.s:3322   .text:0000000000004e08 TTAP
             forth.s:3323   .text:0000000000004e08 $t
             forth.s:3324   .text:0000000000004e0c $d
             forth.s:3338   .text:0000000000004e4c KTAP2
             forth.s:3335   .text:0000000000004e44 KTAP1
             forth.s:3350   .text:0000000000004e64 _ACCEP
ARM GAS  forth.s 			page 258


             forth.s:3352   .text:0000000000004e70 $d
             forth.s:3355   .text:0000000000004e7c ACCP1
             forth.s:3371   .text:0000000000004ec4 ACCP4
             forth.s:3367   .text:0000000000004eb8 ACCP2
             forth.s:3369   .text:0000000000004ebc ACCP3
             forth.s:3382   .text:0000000000004ed8 _QUERY
             forth.s:3382   .text:0000000000004ede $t
             forth.s:3382   .text:0000000000004ee0 QUERY
             forth.s:3384   .text:0000000000004ee4 $d
             forth.s:3402   .text:0000000000004f18 _REFILL
             forth.s:3402   .text:0000000000004f20 REFILL
             forth.s:3404   .text:0000000000004f24 $d
             forth.s:3418   .text:0000000000004f48 _SAVEINP
             forth.s:3418   .text:0000000000004f54 SAVEINP
             forth.s:3420   .text:0000000000004f58 $d
             forth.s:3433   .text:0000000000004f78 _RESTINP
             forth.s:3433   .text:0000000000004f86 $t
             forth.s:3433   .text:0000000000004f88 RESTINP
             forth.s:3435   .text:0000000000004f8c $d
             forth.s:3454   .text:0000000000004fb4 _ABORT
             forth.s:3454   .text:0000000000004fba $t
             forth.s:3456   .text:0000000000004fc0 ABORT1
             forth.s:3457   .text:0000000000004fc0 $d
             forth.s:3544   .text:00000000000050c8 LBRAC
             forth.s:3478   .text:0000000000005000 PRT_ABORT
             forth.s:3479   .text:0000000000005000 $t
             forth.s:3480   .text:0000000000005004 $d
             forth.s:3498   .text:000000000000502c ABORQ
             forth.s:3499   .text:000000000000502c $t
             forth.s:3500   .text:0000000000005030 $d
             forth.s:3522   .text:0000000000005060 _INTER
             forth.s:3524   .text:0000000000005070 $d
             forth.s:3533   .text:00000000000050ac INTE1
             forth.s:3530   .text:00000000000050a2 $t
             forth.s:3531   .text:00000000000050a4 $d
             forth.s:3537   .text:00000000000050bc INTE2
             forth.s:3544   .text:00000000000050c4 _LBRAC
             forth.s:3544   .text:00000000000050c6 $t
             forth.s:3546   .text:00000000000050cc $d
             forth.s:3559   .text:00000000000050f4 _DOTOK
             forth.s:3559   .text:00000000000050f8 $t
             forth.s:3559   .text:00000000000050f8 DOTOK
             forth.s:3561   .text:00000000000050fc $d
             forth.s:3567   .text:0000000000005120 DOTO1
             forth.s:3568   .text:0000000000005120 $d
             forth.s:3576   .text:000000000000512c _QSTAC
             forth.s:3576   .text:0000000000005134 QSTAC
             forth.s:3578   .text:0000000000005138 $d
             forth.s:3580   .text:000000000000514e $t
             forth.s:3581   .text:0000000000005150 $d
             forth.s:3588   .text:0000000000005158 _EVAL
             forth.s:3590   .text:0000000000005164 EVAL1
             forth.s:3591   .text:0000000000005164 $d
             forth.s:3599   .text:000000000000518c EVAL2
             forth.s:3615   .text:000000000000519c _EVALUATE
             forth.s:3615   .text:00000000000051a8 EVALUATE
             forth.s:3618   .text:00000000000051ac $d
ARM GAS  forth.s 			page 259


             forth.s:3652   .text:0000000000005240 _PRESE
             forth.s:3663   .text:0000000000005254 $d
             forth.s:3663   .text:0000000000005258 _QUIT
             forth.s:3664   .text:0000000000005260 $d
             forth.s:3666   .text:000000000000526c QUIT1
             forth.s:3668   .text:0000000000005270 QUIT2
             forth.s:3678   .text:0000000000005284 _FORGET
             forth.s:3678   .text:000000000000528c FORGET
             forth.s:3680   .text:0000000000005290 $d
             forth.s:4541   .text:0000000000005d20 OVERT
             forth.s:3707   .text:00000000000052d8 $d
             forth.s:3707   .text:00000000000052dc _POSTPONE
             forth.s:3707   .text:00000000000052e8 POSTPONE
             forth.s:3709   .text:00000000000052ec $d
             forth.s:3732   .text:0000000000005324 ITICK
             forth.s:4584   .text:0000000000005da0 CALLC
             forth.s:3719   .text:00000000000052fc _TICK
             forth.s:3719   .text:00000000000052fe $t
             forth.s:3719   .text:0000000000005300 TICK
             forth.s:3721   .text:0000000000005304 $d
             forth.s:3725   .text:0000000000005318 TICK1
             forth.s:3732   .text:0000000000005320 _ITICK
             forth.s:3732   .text:0000000000005324 $t
             forth.s:3734   .text:0000000000005328 $d
             forth.s:3749   .text:0000000000005334 _FIND
             forth.s:3749   .text:000000000000533c FIND
             forth.s:3751   .text:0000000000005340 $d
             forth.s:3771   .text:0000000000005384 _ALLOT
             forth.s:3771   .text:000000000000538a $t
             forth.s:3773   .text:0000000000005390 $d
             forth.s:3782   .text:00000000000053a0 _COMMA
             forth.s:3782   .text:00000000000053a2 $t
             forth.s:3782   .text:00000000000053a4 COMMA
             forth.s:3784   .text:00000000000053a8 $d
             forth.s:3798   .text:00000000000053c4 $d
             forth.s:3798   .text:00000000000053c8 _CCOMMA
             forth.s:3798   .text:00000000000053cc CCOMMA
             forth.s:3800   .text:00000000000053d0 $d
             forth.s:3813   .text:00000000000053f0 _BCOMP
             forth.s:3813   .text:00000000000053fa $t
             forth.s:3813   .text:00000000000053fc BCOMP
             forth.s:3815   .text:0000000000005400 $d
             forth.s:3825   .text:0000000000005410 _COMPI
             forth.s:3825   .text:0000000000005418 $t
             forth.s:3825   .text:0000000000005418 COMPI
             forth.s:3827   .text:000000000000541c $d
             forth.s:3843   .text:0000000000005448 _LITER
             forth.s:3843   .text:0000000000005450 $t
             forth.s:3845   .text:0000000000005454 $d
             forth.s:3855   .text:0000000000005468 STRCQ
             forth.s:3856   .text:0000000000005468 $t
             forth.s:3857   .text:000000000000546c $d
             forth.s:3879   .text:00000000000054a4 _FOR
             forth.s:3879   .text:00000000000054a8 $t
             forth.s:3879   .text:00000000000054a8 FOR
             forth.s:3881   .text:00000000000054ac $d
             forth.s:3890   .text:00000000000054c4 _DO
ARM GAS  forth.s 			page 260


             forth.s:3890   .text:00000000000054c8 DO
             forth.s:3892   .text:00000000000054cc $d
             forth.s:3904   .text:00000000000054ec _QDO
             forth.s:3904   .text:00000000000054f0 $t
             forth.s:3904   .text:00000000000054f0 QDO
             forth.s:3906   .text:00000000000054f4 $d
             forth.s:3920   .text:0000000000005554 DOPLOOP
             forth.s:3921   .text:0000000000005554 $t
             forth.s:3940   .text:000000000000557c $d
             forth.s:3940   .text:0000000000005580 _PLOOP
             forth.s:3940   .text:0000000000005586 $t
             forth.s:3940   .text:0000000000005588 PLOOP
             forth.s:3942   .text:000000000000558c $d
             forth.s:3961   .text:00000000000055cc resolve_leave
             forth.s:3947   .text:00000000000055a4 DOLOOP
             forth.s:3948   .text:00000000000055a4 $t
             forth.s:3963   .text:00000000000055d0 $d
             forth.s:3978   .text:00000000000055fc _LOOP
             forth.s:3978   .text:0000000000005604 LOOP
             forth.s:3980   .text:0000000000005608 $d
             forth.s:3989   .text:0000000000005624 _UNLOOP
             forth.s:3989   .text:000000000000562c UNLOOP
             forth.s:3998   .text:0000000000005634 $d
             forth.s:3998   .text:0000000000005638 _LEAVE
             forth.s:3998   .text:000000000000563e $t
             forth.s:3998   .text:0000000000005640 LEAVE
             forth.s:4000   .text:0000000000005644 $d
             forth.s:4011   .text:0000000000005674 DOLEAVE
             forth.s:4012   .text:0000000000005674 $t
             forth.s:4023   .text:0000000000005680 $d
             forth.s:4023   .text:0000000000005684 _BEGIN
             forth.s:4023   .text:000000000000568a $t
             forth.s:4023   .text:000000000000568c BEGIN
             forth.s:4025   .text:0000000000005690 $d
             forth.s:4034   .text:0000000000005698 $d
             forth.s:4034   .text:000000000000569c _FNEXT
             forth.s:4034   .text:00000000000056a4 FNEXT
             forth.s:4036   .text:00000000000056a8 $d
             forth.s:4044   .text:00000000000056c0 _I
             forth.s:4044   .text:00000000000056c2 $t
             forth.s:4044   .text:00000000000056c4 I
             forth.s:4053   .text:00000000000056d0 $d
             forth.s:4053   .text:00000000000056d4 _J
             forth.s:4053   .text:00000000000056d6 $t
             forth.s:4053   .text:00000000000056d8 J
             forth.s:4063   .text:00000000000056e4 $d
             forth.s:4063   .text:00000000000056e8 _UNTIL
             forth.s:4063   .text:00000000000056ee $t
             forth.s:4063   .text:00000000000056f0 UNTIL
             forth.s:4065   .text:00000000000056f4 $d
             forth.s:4074   .text:000000000000570c _AGAIN
             forth.s:4074   .text:0000000000005712 $t
             forth.s:4074   .text:0000000000005714 AGAIN
             forth.s:4076   .text:0000000000005718 $d
             forth.s:4085   .text:0000000000005730 _IFF
             forth.s:4085   .text:0000000000005734 IFF
             forth.s:4087   .text:0000000000005738 $d
ARM GAS  forth.s 			page 261


             forth.s:4099   .text:0000000000005760 _AHEAD
             forth.s:4099   .text:0000000000005766 $t
             forth.s:4099   .text:0000000000005768 AHEAD
             forth.s:4101   .text:000000000000576c $d
             forth.s:4113   .text:0000000000005794 _REPEA
             forth.s:4113   .text:000000000000579c REPEA
             forth.s:4115   .text:00000000000057a0 $d
             forth.s:4126   .text:00000000000057b8 _THENN
             forth.s:4126   .text:00000000000057c0 THENN
             forth.s:4128   .text:00000000000057c4 $d
             forth.s:4139   .text:00000000000057d8 _AFT
             forth.s:4139   .text:00000000000057dc $t
             forth.s:4139   .text:00000000000057dc AFT
             forth.s:4141   .text:00000000000057e0 $d
             forth.s:4153   .text:00000000000057f8 _ELSEE
             forth.s:4153   .text:0000000000005800 ELSEE
             forth.s:4155   .text:0000000000005804 $d
             forth.s:4165   .text:0000000000005818 _WHILE
             forth.s:4165   .text:000000000000581e $t
             forth.s:4165   .text:0000000000005820 WHILE
             forth.s:4167   .text:0000000000005824 $d
             forth.s:4177   .text:0000000000005834 _CASE
             forth.s:4177   .text:000000000000583c CASE
             forth.s:4179   .text:0000000000005840 $d
             forth.s:4188   .text:0000000000005850 _OF
             forth.s:4188   .text:0000000000005854 OF
             forth.s:4190   .text:0000000000005858 $d
             forth.s:4204   .text:0000000000005894 _ENDOF
             forth.s:4204   .text:000000000000589a $t
             forth.s:4204   .text:000000000000589c ENDOF
             forth.s:4206   .text:00000000000058a0 $d
             forth.s:4222   .text:00000000000058d4 _ENDCASE
             forth.s:4222   .text:00000000000058dc $t
             forth.s:4222   .text:00000000000058dc ENDCASE
             forth.s:4224   .text:00000000000058e0 $d
             forth.s:4241   .text:0000000000005918 _RECURSE
             forth.s:4241   .text:0000000000005920 $t
             forth.s:4241   .text:0000000000005920 RECURSE
             forth.s:4243   .text:0000000000005924 $d
             forth.s:4255   .text:000000000000593c _ABRTQ
             forth.s:4255   .text:0000000000005944 ABRTQ
             forth.s:4257   .text:0000000000005948 $d
             forth.s:4267   .text:0000000000005960 _STRQ
             forth.s:4267   .text:0000000000005964 STRQ
             forth.s:4269   .text:0000000000005968 $d
             forth.s:4279   .text:0000000000005980 _STRSLHQ
             forth.s:4279   .text:0000000000005984 $t
             forth.s:4279   .text:0000000000005984 STRSLHQ
             forth.s:4281   .text:0000000000005988 $d
             forth.s:4311   .text:0000000000005a20 GETC
             forth.s:4325   .text:0000000000005a3e ESCAPE
             forth.s:4312   .text:0000000000005a20 $t
             forth.s:4327   .text:0000000000005a42 $d
             forth.s:4360   .text:0000000000005aee PARSE_HEX
             forth.s:4393   .text:0000000000005b72 esc_char
             forth.s:4361   .text:0000000000005aee $t
             forth.s:4362   .text:0000000000005af2 $d
ARM GAS  forth.s 			page 262


             forth.s:4379   .text:0000000000005b3a TO_HEX
             forth.s:4380   .text:0000000000005b3a $t
             forth.s:4381   .text:0000000000005b3e $d
             forth.s:4402   .text:0000000000005b8b STRCSLHQ
             forth.s:4413   .text:0000000000005b8f _CSTRQ
             forth.s:4413   .text:0000000000005b92 $t
             forth.s:4413   .text:0000000000005b94 CSTRQ
             forth.s:4415   .text:0000000000005b98 $d
             forth.s:4428   .text:0000000000005bc8 _DOTQ
             forth.s:4428   .text:0000000000005bcc DOTQ
             forth.s:4430   .text:0000000000005bd0 $d
             forth.s:4444   .text:0000000000005be8 _UNIQU
             forth.s:4444   .text:0000000000005bf0 $t
             forth.s:4444   .text:0000000000005bf0 UNIQU
             forth.s:4446   .text:0000000000005bf4 $d
             forth.s:4453   .text:0000000000005c1c UNIQ1
             forth.s:4450   .text:0000000000005c10 $d
             forth.s:4463   .text:0000000000005c24 SNAME
             forth.s:4464   .text:0000000000005c24 $t
             forth.s:4465   .text:0000000000005c28 $d
             forth.s:4481   .text:0000000000005c6c SNAM1
             forth.s:4493   .text:0000000000005c80 _SCOMP
             forth.s:4493   .text:0000000000005c8c SCOMP
             forth.s:4495   .text:0000000000005c90 $d
             forth.s:4507   .text:0000000000005cc8 SCOM2
             forth.s:4504   .text:0000000000005cc0 SCOM1
             forth.s:4512   .text:0000000000005cdc SCOM3
             forth.s:4521   .text:0000000000005ce4 COLON_ABORT
             forth.s:4522   .text:0000000000005ce4 $t
             forth.s:4523   .text:0000000000005ce8 $d
             forth.s:4541   .text:0000000000005d18 _OVERT
             forth.s:4541   .text:0000000000005d1e $t
             forth.s:4543   .text:0000000000005d24 $d
             forth.s:4554   .text:0000000000005d3c _SEMIS
             forth.s:4554   .text:0000000000005d3e $t
             forth.s:4554   .text:0000000000005d40 SEMIS
             forth.s:4556   .text:0000000000005d44 $d
             forth.s:4569   .text:0000000000005d64 _RBRAC
             forth.s:4569   .text:0000000000005d66 $t
             forth.s:4569   .text:0000000000005d68 RBRAC
             forth.s:4571   .text:0000000000005d6c $d
             forth.s:4584   .text:0000000000005d94 _CALLC
             forth.s:4586   .text:0000000000005da4 $d
             forth.s:4598   .text:0000000000005dbc _BUFFER
             forth.s:4598   .text:0000000000005dc4 $t
             forth.s:4598   .text:0000000000005dc4 BUFFER
             forth.s:4600   .text:0000000000005dc8 $d
             forth.s:4622   .text:0000000000005e08 _COLON
             forth.s:4622   .text:0000000000005e0a $t
             forth.s:4622   .text:0000000000005e0c COLON
             forth.s:4624   .text:0000000000005e10 $d
             forth.s:4636   .text:0000000000005e2c _IMMED
             forth.s:4636   .text:0000000000005e36 $t
             forth.s:4636   .text:0000000000005e38 IMMED
             forth.s:4638   .text:0000000000005e3c $d
             forth.s:4652   .text:0000000000005e64 $t
             forth.s:4658   .text:0000000000005e64 DODOES
ARM GAS  forth.s 			page 263


             forth.s:4660   .text:0000000000005e68 $d
             forth.s:5100   .text:00000000000063f0 TOVECTOR
             forth.s:4676   .text:0000000000005e90 $d
             forth.s:4676   .text:0000000000005e94 _DOES
             forth.s:4676   .text:0000000000005e9a $t
             forth.s:4676   .text:0000000000005e9c DOES
             forth.s:4678   .text:0000000000005ea0 $d
             forth.s:4688   .text:0000000000005ec4 _DEFERAT
             forth.s:4688   .text:0000000000005ecc DEFERAT
             forth.s:4690   .text:0000000000005ed0 $d
             forth.s:4699   .text:0000000000005ee0 _ACTIONOF
             forth.s:4699   .text:0000000000005eea $t
             forth.s:4699   .text:0000000000005eec ACTIONOF
             forth.s:4701   .text:0000000000005ef0 $d
             forth.s:4714   .text:0000000000005f14 _DEFERSTO
             forth.s:4714   .text:0000000000005f1c DEFERSTO
             forth.s:4716   .text:0000000000005f20 $d
             forth.s:4726   .text:0000000000005f3c _DEFER
             forth.s:4726   .text:0000000000005f42 $t
             forth.s:4726   .text:0000000000005f44 DEFER
             forth.s:4728   .text:0000000000005f48 $d
             forth.s:4738   .text:0000000000005f6c NO_ACTION
             forth.s:4739   .text:0000000000005f6c $t
             forth.s:4740   .text:0000000000005f70 $d
             forth.s:4742   .text:0000000000005f8c $d
             forth.s:4752   .text:0000000000005f94 _NONAME
             forth.s:4752   .text:0000000000005f9c $t
             forth.s:4752   .text:0000000000005f9c NONAME
             forth.s:4754   .text:0000000000005fa0 $d
             forth.s:4767   .text:0000000000005fb4 _IS
             forth.s:4767   .text:0000000000005fb8 IS
             forth.s:4769   .text:0000000000005fbc $d
             forth.s:4787   .text:0000000000005ffc _CREAT
             forth.s:4787   .text:0000000000006004 CREAT
             forth.s:4789   .text:0000000000006008 $d
             forth.s:4804   .text:0000000000006044 DOVAR
             forth.s:4805   .text:0000000000006044 $t
             forth.s:4816   .text:0000000000006052 $d
             forth.s:4816   .text:0000000000006056 _VARIA
             forth.s:4816   .text:0000000000006060 VARIA
             forth.s:4818   .text:0000000000006064 $d
             forth.s:4828   .text:0000000000006078 DOCON
             forth.s:4829   .text:0000000000006078 $t
             forth.s:4840   .text:0000000000006084 $d
             forth.s:4840   .text:0000000000006088 _VALUE
             forth.s:4840   .text:000000000000608e $t
             forth.s:4840   .text:0000000000006090 VALUE
             forth.s:4842   .text:0000000000006094 $d
             forth.s:4858   .text:00000000000060cc _TO
             forth.s:4858   .text:00000000000060d0 TO
             forth.s:4860   .text:00000000000060d4 $d
             forth.s:4872   .text:00000000000060f4 _CONST
             forth.s:4872   .text:0000000000006100 CONST
             forth.s:4874   .text:0000000000006104 $d
             forth.s:4896   .text:0000000000006134 DMP
             forth.s:4897   .text:0000000000006134 $t
             forth.s:4898   .text:0000000000006138 $d
ARM GAS  forth.s 			page 264


             forth.s:4916   .text:000000000000618c PDUM2
             forth.s:4910   .text:0000000000006174 PDUM1
             forth.s:4931   .text:00000000000061a4 $d
             forth.s:4931   .text:00000000000061a8 _DUMP
             forth.s:4931   .text:00000000000061b0 DUMP
             forth.s:4933   .text:00000000000061b4 $d
             forth.s:4959   .text:0000000000006230 DUMP4
             forth.s:4949   .text:0000000000006208 DUMP1
             forth.s:4961   .text:0000000000006238 DUMP3
             forth.s:4974   .text:000000000000624c TDOT
             forth.s:4975   .text:000000000000624c $t
             forth.s:4976   .text:0000000000006250 $d
             forth.s:5015   .text:00000000000062e4 _DOTS
             forth.s:5015   .text:00000000000062e8 DOTS
             forth.s:5017   .text:00000000000062ec $d
             forth.s:5024   .text:0000000000006308 DOTS2
             forth.s:5020   .text:00000000000062fc DOTS1
             forth.s:5029   .text:0000000000006318 RBASE
             forth.s:5030   .text:0000000000006318 $t
             forth.s:5038   .text:0000000000006328 RDOT
             forth.s:5040   .text:000000000000632c $d
             forth.s:5067   .text:0000000000006390 _TRACE
             forth.s:5067   .text:0000000000006396 $t
             forth.s:5067   .text:0000000000006398 TRACE
             forth.s:5069   .text:000000000000639c $d
             forth.s:5088   .text:00000000000063e0 _TOBODY
             forth.s:5088   .text:00000000000063e6 $t
             forth.s:5088   .text:00000000000063e8 TOBODY
             forth.s:5109   .text:00000000000063f8 $d
             forth.s:5109   .text:00000000000063fc _TONFA
             forth.s:5109   .text:0000000000006404 TONFA
             forth.s:5111   .text:0000000000006408 $d
             forth.s:5114   .text:0000000000006414 TNAM1
             forth.s:5125   .text:0000000000006448 TNAM2
             forth.s:5135   .text:0000000000006458 _DOTID
             forth.s:5135   .text:000000000000645c $t
             forth.s:5135   .text:000000000000645c DOTID
             forth.s:5137   .text:0000000000006460 $d
             forth.s:5145   .text:0000000000006488 DOTI1
             forth.s:5146   .text:0000000000006496 $t
             forth.s:5147   .text:0000000000006498 $d
             forth.s:5149   *ABS*:0000000000000000 WANT_SEE
             forth.s:5223   .text:00000000000064a0 _WORDS
             forth.s:5223   .text:00000000000064a6 $t
             forth.s:5223   .text:00000000000064a8 WORDS
             forth.s:5225   .text:00000000000064ac $d
             forth.s:5228   .text:00000000000064b8 WORS1
             forth.s:5237   .text:00000000000064e0 WORS2
             forth.s:5246   .text:00000000000064e8 _MARKER
             forth.s:5246   .text:00000000000064f0 MARKER
             forth.s:5248   .text:00000000000064f4 $d
             forth.s:5251   .text:0000000000006500 $t
             forth.s:5252   .text:0000000000006504 $d
             forth.s:5267   .text:0000000000006534 _ARRAY
             forth.s:5267   .text:000000000000653a $t
             forth.s:5267   .text:000000000000653c ARRAY
             forth.s:5269   .text:0000000000006540 $d
ARM GAS  forth.s 			page 265


             forth.s:5283   .text:000000000000657c DO_ARRAY
             forth.s:5284   .text:000000000000657c $t
             forth.s:5285   .text:0000000000006580 $d
             forth.s:5303   .text:000000000000659c VERSN
             forth.s:5304   .text:000000000000659c $t
             forth.s:5305   .text:00000000000065a0 $d
             forth.s:5313   .text:00000000000065b0 _HI
             forth.s:5313   .text:00000000000065b4 HI
             forth.s:5315   .text:00000000000065b8 $d
             forth.s:5316   .text:00000000000065d2 $t
             forth.s:5317   .text:00000000000065d4 $d
             forth.s:5341   .text:0000000000006620 $t
             forth.s:5342   .text:0000000000006624 $d
             forth.s:5354   .text:0000000000006640 PS2_QUERY
             forth.s:5355   .text:0000000000006640 $t
             forth.s:5356   .text:0000000000006644 $d
             forth.s:5370   .text:00000000000066aa $t
             forth.s:5371   .text:00000000000066ac $d
             forth.s:5381   .text:00000000000066b8 IF_SENSE
             forth.s:5382   .text:00000000000066b8 $t
             forth.s:5383   .text:00000000000066bc $d
             forth.s:5397   .text:00000000000066ec READY
             forth.s:5398   .text:00000000000066ec $t
             forth.s:5399   .text:00000000000066f0 $d
             forth.s:5399   .text:00000000000066fa $t
             forth.s:5400   .text:00000000000066fc $d
             forth.s:5418   .text:0000000000006724 COLD1
             forth.s:5419   .text:0000000000006724 $d
             forth.s:5434   .text:0000000000006774 COLD2
             forth.s:5437   .text:0000000000006774 $d
             forth.s:5440   .text:0000000000006778 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:0000000000000965 $d
       environment.s:32     .text:0000000000000966 $t
       environment.s:107    .text:0000000000000a03 $d
       environment.s:107    .text:0000000000000a04 $t
       environment.s:141    .text:0000000000000a4b $d
       environment.s:141    .text:0000000000000a4c $t
       environment.s:187    .text:0000000000000ab1 $d
       environment.s:187    .text:0000000000000ab2 $t
       environment.s:201    .text:0000000000000add $d
       environment.s:201    .text:0000000000000ade $t
          ser-term.s:90     .text:0000000000000ba3 $d
          ser-term.s:90     .text:0000000000000ba4 $t
          ser-term.s:110    .text:0000000000000bdd $d
          ser-term.s:110    .text:0000000000000bde $t
ARM GAS  forth.s 			page 266


          ser-term.s:133    .text:0000000000000c1b $d
          ser-term.s:133    .text:0000000000000c1c $t
          ser-term.s:164    .text:0000000000000c63 $d
          ser-term.s:164    .text:0000000000000c64 $t
          ser-term.s:191    .text:0000000000000cd9 $d
          ser-term.s:191    .text:0000000000000cda $t
          ser-term.s:203    .text:0000000000000d07 $d
          ser-term.s:203    .text:0000000000000d08 $t
             tvout.s:264    .text:0000000000000f53 $d
             tvout.s:264    .text:0000000000000f54 $t
             tvout.s:278    .text:0000000000000f87 $d
             tvout.s:278    .text:0000000000000f88 $t
             tvout.s:306    .text:0000000000000fe1 $d
             tvout.s:306    .text:0000000000000fe2 $t
             tvout.s:325    .text:000000000000100f $d
             tvout.s:325    .text:0000000000001010 $t
             tvout.s:427    .text:0000000000001149 $d
             tvout.s:427    .text:000000000000114a $t
             tvout.s:448    .text:00000000000011a3 $d
             tvout.s:448    .text:00000000000011a4 $t
             tvout.s:495    .text:0000000000001239 $d
             tvout.s:495    .text:000000000000123a $t
           ps2_kbd.s:307    .text:0000000000001927 $d
           ps2_kbd.s:307    .text:0000000000001928 $t
           ps2_kbd.s:396    .text:0000000000001a23 $d
           ps2_kbd.s:396    .text:0000000000001a24 $t
           ps2_kbd.s:616    .text:0000000000001cc5 $d
           ps2_kbd.s:616    .text:0000000000001cc6 $t
           ps2_kbd.s:633    .text:0000000000001cff $d
           ps2_kbd.s:633    .text:0000000000001d00 $t
         spi-flash.s:85     .text:0000000000001deb $d
         spi-flash.s:85     .text:0000000000001dec $t
         spi-flash.s:151    .text:0000000000001eb7 $d
         spi-flash.s:151    .text:0000000000001eb8 $t
         spi-flash.s:238    .text:0000000000001ffb $d
         spi-flash.s:238    .text:0000000000001ffc $t
         spi-flash.s:256    .text:0000000000002037 $d
         spi-flash.s:256    .text:0000000000002038 $t
         spi-flash.s:278    .text:000000000000208b $d
         spi-flash.s:278    .text:000000000000208c $t
         spi-flash.s:325    .text:000000000000210b $d
         spi-flash.s:325    .text:000000000000210c $t
         spi-flash.s:343    .text:000000000000212d $d
         spi-flash.s:343    .text:000000000000212e $t
         spi-flash.s:352    .text:0000000000002141 $d
         spi-flash.s:352    .text:0000000000002142 $t
               fpu.s:222    .text:0000000000002327 $d
               fpu.s:222    .text:0000000000002328 $t
               fpu.s:235    .text:0000000000002347 $d
               fpu.s:235    .text:0000000000002348 $t
               fpu.s:249    .text:0000000000002367 $d
               fpu.s:249    .text:0000000000002368 $t
               fpu.s:262    .text:0000000000002387 $d
               fpu.s:262    .text:0000000000002388 $t
               fpu.s:285    .text:00000000000023c5 $d
               fpu.s:285    .text:00000000000023c6 $t
               fpu.s:297    .text:00000000000023e5 $d
ARM GAS  forth.s 			page 267


               fpu.s:297    .text:00000000000023e6 $t
               fpu.s:319    .text:000000000000241f $d
               fpu.s:319    .text:0000000000002420 $t
               fpu.s:330    .text:000000000000243b $d
               fpu.s:330    .text:000000000000243c $t
               fpu.s:340    .text:0000000000002455 $d
               fpu.s:340    .text:0000000000002456 $t
               fpu.s:353    .text:0000000000002485 $d
               fpu.s:353    .text:0000000000002486 $t
               fpu.s:379    .text:00000000000024d5 $d
               fpu.s:379    .text:00000000000024d6 $t
               fpu.s:403    .text:000000000000251f $d
               fpu.s:403    .text:0000000000002520 $t
               fpu.s:421    .text:0000000000002551 $d
               fpu.s:421    .text:0000000000002552 $t
               fpu.s:431    .text:000000000000256d $d
               fpu.s:431    .text:000000000000256e $t
            strtof.s:226    .text:00000000000027ef $d
            strtof.s:226    .text:00000000000027f0 $t
              ftoa.s:412    .text:0000000000002e5b $d
              ftoa.s:412    .text:0000000000002e5c $t
             forth.s:133    .text:0000000000002f17 $d
             forth.s:133    .text:0000000000002f18 $t
             forth.s:145    .text:0000000000002f37 $d
             forth.s:145    .text:0000000000002f38 $t
             forth.s:157    .text:0000000000002f57 $d
             forth.s:157    .text:0000000000002f58 $t
             forth.s:192    .text:0000000000002f91 $d
             forth.s:192    .text:0000000000002f92 $t
             forth.s:228    .text:0000000000002faf $d
             forth.s:228    .text:0000000000002fb0 $t
             forth.s:259    .text:0000000000003027 $d
             forth.s:259    .text:0000000000003028 $t
             forth.s:275    .text:0000000000003059 $d
             forth.s:275    .text:000000000000305a $t
             forth.s:292    .text:0000000000003087 $d
             forth.s:292    .text:0000000000003088 $t
             forth.s:306    .text:00000000000030b1 $d
             forth.s:306    .text:00000000000030b2 $t
             forth.s:418    .text:0000000000003169 $d
             forth.s:418    .text:000000000000316a $t
             forth.s:444    .text:0000000000003193 $d
             forth.s:444    .text:0000000000003194 $t
             forth.s:454    .text:00000000000031a7 $d
             forth.s:454    .text:00000000000031a8 $t
             forth.s:463    .text:00000000000031b3 $d
             forth.s:463    .text:00000000000031b4 $t
             forth.s:484    .text:00000000000031e5 $d
             forth.s:484    .text:00000000000031e6 $t
             forth.s:505    .text:0000000000003215 $d
             forth.s:505    .text:0000000000003216 $t
             forth.s:562    .text:0000000000003289 $d
             forth.s:562    .text:000000000000328a $t
             forth.s:587    .text:00000000000032bb $d
             forth.s:587    .text:00000000000032bc $t
             forth.s:612    .text:00000000000032e9 $d
             forth.s:612    .text:00000000000032ea $t
ARM GAS  forth.s 			page 268


             forth.s:635    .text:0000000000003319 $d
             forth.s:635    .text:000000000000331a $t
             forth.s:643    .text:0000000000003329 $d
             forth.s:643    .text:000000000000332a $t
             forth.s:664    .text:000000000000334f $d
             forth.s:664    .text:0000000000003350 $t
             forth.s:685    .text:0000000000003379 $d
             forth.s:685    .text:000000000000337a $t
             forth.s:715    .text:00000000000033bf $d
             forth.s:715    .text:00000000000033c0 $t
             forth.s:724    .text:00000000000033d5 $d
             forth.s:724    .text:00000000000033d6 $t
             forth.s:772    .text:000000000000342f $d
             forth.s:772    .text:0000000000003430 $t
             forth.s:783    .text:0000000000003443 $d
             forth.s:783    .text:0000000000003444 $t
             forth.s:791    .text:0000000000003451 $d
             forth.s:791    .text:0000000000003452 $t
             forth.s:799    .text:0000000000003461 $d
             forth.s:799    .text:0000000000003462 $t
             forth.s:807    .text:0000000000003471 $d
             forth.s:807    .text:0000000000003472 $t
             forth.s:831    .text:00000000000034a1 $d
             forth.s:831    .text:00000000000034a2 $t
             forth.s:856    .text:00000000000034d5 $d
             forth.s:856    .text:00000000000034d6 $t
             forth.s:864    .text:00000000000034e5 $d
             forth.s:864    .text:00000000000034e6 $t
             forth.s:872    .text:00000000000034f7 $d
             forth.s:872    .text:00000000000034f8 $t
             forth.s:882    .text:000000000000350b $d
             forth.s:882    .text:000000000000350c $t
             forth.s:891    .text:000000000000351d $d
             forth.s:891    .text:000000000000351e $t
             forth.s:945    .text:00000000000035a3 $d
             forth.s:945    .text:00000000000035a4 $t
             forth.s:974    .text:00000000000035df $d
             forth.s:974    .text:00000000000035e0 $t
             forth.s:984    .text:00000000000035f3 $d
             forth.s:984    .text:00000000000035f4 $t
             forth.s:997    .text:0000000000003611 $d
             forth.s:997    .text:0000000000003612 $t
             forth.s:1042   .text:0000000000003679 $d
             forth.s:1042   .text:000000000000367a $t
             forth.s:1050   .text:000000000000368d $d
             forth.s:1050   .text:000000000000368e $t
             forth.s:1101   .text:00000000000036fd $d
             forth.s:1101   .text:00000000000036fe $t
             forth.s:1112   .text:0000000000003717 $d
             forth.s:1112   .text:0000000000003718 $t
             forth.s:1135   .text:0000000000003749 $d
             forth.s:1135   .text:000000000000374a $t
             forth.s:1148   .text:000000000000376d $d
             forth.s:1148   .text:000000000000376e $t
             forth.s:1172   .text:00000000000037a1 $d
             forth.s:1172   .text:00000000000037a2 $t
             forth.s:1218   .text:0000000000003805 $d
ARM GAS  forth.s 			page 269


             forth.s:1218   .text:0000000000003806 $t
             forth.s:1230   .text:0000000000003821 $d
             forth.s:1230   .text:0000000000003822 $t
             forth.s:1242   .text:0000000000003841 $d
             forth.s:1242   .text:0000000000003842 $t
             forth.s:1293   .text:00000000000038a9 $d
             forth.s:1293   .text:00000000000038aa $t
             forth.s:1330   .text:0000000000003905 $d
             forth.s:1330   .text:0000000000003906 $t
             forth.s:1360   .text:0000000000003941 $d
             forth.s:1360   .text:0000000000003942 $t
             forth.s:1379   .text:000000000000396d $d
             forth.s:1379   .text:000000000000396e $t
             forth.s:1419   .text:00000000000039c7 $d
             forth.s:1419   .text:00000000000039c8 $t
             forth.s:1430   .text:00000000000039df $d
             forth.s:1430   .text:00000000000039e0 $t
             forth.s:1452   .text:0000000000003a15 $d
             forth.s:1452   .text:0000000000003a16 $t
             forth.s:1466   .text:0000000000003a33 $d
             forth.s:1466   .text:0000000000003a34 $t
             forth.s:1477   .text:0000000000003a51 $d
             forth.s:1477   .text:0000000000003a52 $t
             forth.s:1506   .text:0000000000003aa9 $d
             forth.s:1506   .text:0000000000003aaa $t
             forth.s:1521   .text:0000000000003ac7 $d
             forth.s:1521   .text:0000000000003ac8 $t
             forth.s:1538   .text:0000000000003af3 $d
             forth.s:1538   .text:0000000000003af4 $t
             forth.s:1568   .text:0000000000003b2f $d
             forth.s:1568   .text:0000000000003b30 $t
             forth.s:1608   .text:0000000000003ba7 $d
             forth.s:1608   .text:0000000000003ba8 $t
             forth.s:1717   .text:0000000000003cd3 $d
             forth.s:1717   .text:0000000000003cd4 $t
             forth.s:1739   .text:0000000000003d1f $d
             forth.s:1739   .text:0000000000003d20 $t
             forth.s:1788   .text:0000000000003d5f $d
             forth.s:1788   .text:0000000000003d60 $t
             forth.s:1839   .text:0000000000003dd7 $d
             forth.s:1839   .text:0000000000003dd8 $t
             forth.s:1931   .text:0000000000003ec1 $d
             forth.s:1931   .text:0000000000003ec2 $t
             forth.s:1959   .text:0000000000003ef5 $d
             forth.s:1959   .text:0000000000003ef6 $t
             forth.s:2006   .text:0000000000003f5d $d
             forth.s:2006   .text:0000000000003f5e $t
             forth.s:2017   .text:0000000000003f81 $d
             forth.s:2017   .text:0000000000003f82 $t
             forth.s:2054   .text:0000000000003fd9 $d
             forth.s:2054   .text:0000000000003fda $t
             forth.s:2095   .text:000000000000402d $d
             forth.s:2095   .text:000000000000402e $t
             forth.s:2191   .text:0000000000004147 $d
             forth.s:2191   .text:0000000000004148 $t
             forth.s:2203   .text:0000000000004165 $d
             forth.s:2203   .text:0000000000004166 $t
ARM GAS  forth.s 			page 270


             forth.s:2255   .text:00000000000041eb $d
             forth.s:2255   .text:00000000000041ec $t
             forth.s:2273   .text:000000000000421d $d
             forth.s:2273   .text:000000000000421e $t
             forth.s:2287   .text:0000000000004247 $d
             forth.s:2287   .text:0000000000004248 $t
             forth.s:2365   .text:0000000000004303 $d
             forth.s:2365   .text:0000000000004304 $t
             forth.s:2482   .text:0000000000004435 $d
             forth.s:2482   .text:0000000000004436 $t
             forth.s:2568   .text:0000000000004553 $d
             forth.s:2568   .text:0000000000004554 $t
             forth.s:2585   .text:0000000000004589 $d
             forth.s:2585   .text:000000000000458a $t
             forth.s:2620   .text:00000000000045f3 $d
             forth.s:2620   .text:00000000000045f4 $t
             forth.s:2715   .text:00000000000046e7 $d
             forth.s:2715   .text:00000000000046e8 $t
             forth.s:2752   .text:000000000000474b $d
             forth.s:2752   .text:000000000000474c $t
             forth.s:2816   .text:00000000000047ff $d
             forth.s:2816   .text:0000000000004800 $t
             forth.s:2847   .text:0000000000004857 $d
             forth.s:2847   .text:0000000000004858 $t
             forth.s:2991   .text:0000000000004a37 $d
             forth.s:2991   .text:0000000000004a38 $t
             forth.s:3003   .text:0000000000004a4f $d
             forth.s:3003   .text:0000000000004a50 $t
             forth.s:3042   .text:0000000000004ab1 $d
             forth.s:3042   .text:0000000000004ab2 $t
             forth.s:3054   .text:0000000000004ad7 $d
             forth.s:3054   .text:0000000000004ad8 $t
             forth.s:3065   .text:0000000000004af1 $d
             forth.s:3065   .text:0000000000004af2 $t
             forth.s:3095   .text:0000000000004b35 $d
             forth.s:3095   .text:0000000000004b36 $t
             forth.s:3350   .text:0000000000004e6b $d
             forth.s:3350   .text:0000000000004e6c $t
             forth.s:3402   .text:0000000000004f1f $d
             forth.s:3402   .text:0000000000004f20 $t
             forth.s:3418   .text:0000000000004f53 $d
             forth.s:3418   .text:0000000000004f54 $t
             forth.s:3522   .text:000000000000506b $d
             forth.s:3522   .text:000000000000506c $t
             forth.s:3576   .text:0000000000005133 $d
             forth.s:3576   .text:0000000000005134 $t
             forth.s:3588   .text:000000000000515d $d
             forth.s:3588   .text:000000000000515e $t
             forth.s:3615   .text:00000000000051a5 $d
             forth.s:3615   .text:00000000000051a6 $t
             forth.s:3652   .text:0000000000005247 $d
             forth.s:3652   .text:0000000000005248 $t
             forth.s:3663   .text:000000000000525d $d
             forth.s:3663   .text:000000000000525e $t
             forth.s:3678   .text:000000000000528b $d
             forth.s:3678   .text:000000000000528c $t
             forth.s:3707   .text:00000000000052e5 $d
ARM GAS  forth.s 			page 271


             forth.s:3707   .text:00000000000052e6 $t
             forth.s:3749   .text:0000000000005339 $d
             forth.s:3749   .text:000000000000533a $t
             forth.s:3798   .text:00000000000053cb $d
             forth.s:3798   .text:00000000000053cc $t
             forth.s:3890   .text:00000000000054c7 $d
             forth.s:3890   .text:00000000000054c8 $t
             forth.s:3978   .text:0000000000005601 $d
             forth.s:3978   .text:0000000000005602 $t
             forth.s:3989   .text:000000000000562b $d
             forth.s:3989   .text:000000000000562c $t
             forth.s:4034   .text:00000000000056a1 $d
             forth.s:4034   .text:00000000000056a2 $t
             forth.s:4085   .text:0000000000005733 $d
             forth.s:4085   .text:0000000000005734 $t
             forth.s:4113   .text:000000000000579b $d
             forth.s:4113   .text:000000000000579c $t
             forth.s:4126   .text:00000000000057bd $d
             forth.s:4126   .text:00000000000057be $t
             forth.s:4153   .text:00000000000057fd $d
             forth.s:4153   .text:00000000000057fe $t
             forth.s:4177   .text:0000000000005839 $d
             forth.s:4177   .text:000000000000583a $t
             forth.s:4188   .text:0000000000005853 $d
             forth.s:4188   .text:0000000000005854 $t
             forth.s:4255   .text:0000000000005943 $d
             forth.s:4255   .text:0000000000005944 $t
             forth.s:4267   .text:0000000000005963 $d
             forth.s:4267   .text:0000000000005964 $t
             forth.s:4428   .text:0000000000005bcb $d
             forth.s:4428   .text:0000000000005bcc $t
             forth.s:4493   .text:0000000000005c89 $d
             forth.s:4493   .text:0000000000005c8a $t
             forth.s:4584   .text:0000000000005d9d $d
             forth.s:4584   .text:0000000000005d9e $t
             forth.s:4688   .text:0000000000005ecb $d
             forth.s:4688   .text:0000000000005ecc $t
             forth.s:4714   .text:0000000000005f1b $d
             forth.s:4714   .text:0000000000005f1c $t
             forth.s:4767   .text:0000000000005fb7 $d
             forth.s:4767   .text:0000000000005fb8 $t
             forth.s:4787   .text:0000000000006003 $d
             forth.s:4787   .text:0000000000006004 $t
             forth.s:4816   .text:000000000000605f $d
             forth.s:4816   .text:0000000000006060 $t
             forth.s:4858   .text:00000000000060cf $d
             forth.s:4858   .text:00000000000060d0 $t
             forth.s:4872   .text:00000000000060fd $d
             forth.s:4872   .text:00000000000060fe $t
             forth.s:4931   .text:00000000000061ad $d
             forth.s:4931   .text:00000000000061ae $t
             forth.s:5015   .text:00000000000062e7 $d
             forth.s:5015   .text:00000000000062e8 $t
             forth.s:5109   .text:0000000000006401 $d
             forth.s:5109   .text:0000000000006402 $t
             forth.s:5246   .text:00000000000064ef $d
             forth.s:5246   .text:00000000000064f0 $t
ARM GAS  forth.s 			page 272


             forth.s:5313   .text:00000000000065b3 $d
             forth.s:5313   .text:00000000000065b4 $t
             forth.s:5412   .text:000000000000670d $d
             forth.s:5412   .text:000000000000670e $t

UNDEFINED SYMBOLS
_mstack
