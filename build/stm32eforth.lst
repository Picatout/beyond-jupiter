ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0x400 
 203              	   .equ NVIC_STIR, 0xE00 
 204              	
 205              	/* TIMERS registers */
 206              	.equ TIM1_BASE_ADR,0x40010000
 207              	.equ TIM9_BASE_ADR,0x40010400
 208              	.equ TIM10_BASE_ADR,0x40010800
 209              	.equ TIM11_BASE_ADR,0x40010C00
 210              	
 211              	.equ TIM2_BASE_ADR,0x40000000
 212              	.equ TIM3_BASE_ADR,0x40000400
 213              	.equ TIM4_BASE_ADR,0x40000800
 214              	.equ TIM5_BASE_ADR,0x40000C00
 215              	
 216              	/* TIMER1 */
 217              	.equ TIM1_RCR,48 
 218              	.equ TIM1_BDTR,68 
 219              	
 220              	/* TIMER2..TIMER5 */
 221              	.equ TIM_CR1,0
 222              	.equ TIM_CR2,4
 223              	.equ TIM_SMCR,8
 224              	.equ TIM_DIER,12
 225              	.equ TIM_SR,16
 226              	.equ TIM_EGR,20
 227              	.equ TIM_CCMR1,24
 228              	.equ TIM_CCMR2,28
 229              	.equ TIM_CCER,32
 230              	.equ TIM_CNT,36
 231              	.equ TIM_PSC,40
 232              	.equ TIM_ARR,44
 233              	.equ TIM_CCR1,52
 234              	.equ TIM_CCR2,56
 235              	.equ TIM_CCR3,60
 236              	.equ TIM_CCR4,64
 237              	.equ TIM_DCR,72
 238              	.equ TIM_DMAR,76
 239              	.equ TIM2_OR,80
 240              	.equ TIM5_OR,80 
 241              	
 242              	/* SYSCFG registers */
 243              	.equ SYSCFG_BASE_ADR, 0x40013800
 244              	
 245              	.equ SYSCFG_MEMRMP,0
 246              	.equ SYSCFG_PMC,4
 247              	.equ SYSCFG_EXTICR1,8
 248              	.equ SYSCFG_EXTICR2,12
 249              	.equ SYSCFG_EXTICR3,16
 250              	.equ SYSCFG_EXTICR4,20
 251              	.equ SYSCFG_CMPCR,32
 252              	
 253              	/* EXTI registers */
 254              	.equ EXTI_BASE_ADR, 0x40013C00
 255              	
ARM GAS  forth.s 			page 6


 256              	.equ EXTI_IMR,0
 257              	.equ EXTI_EMR,4
 258              	.equ EXTI_RTSR,8
 259              	.equ EXTI_FTSR,12
 260              	.equ EXTI_SWIER,16
 261              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 7


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ CSPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HOLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HOLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
ARM GAS  forth.s 			page 8


 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
 133              		.macro _FUNC label 
 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
ARM GAS  forth.s 			page 9


 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
ARM GAS  forth.s 			page 10


  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      kbd_isr         /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
ARM GAS  forth.s 			page 11


  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
ARM GAS  forth.s 			page 12


 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F047F8 		bl uart_puts 
 160 0006 31E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#CD_TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#CD_TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
ARM GAS  forth.s 			page 13


 199 0052 04F14400 		add r0,UP,#RX_QUEUE
 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 064D     		ldr r5,user_reboot_msg
 210 0068 00F014F8 		bl uart_puts 
 211              	reset_mcu: 
 212 006c 0348     		ldr r0,scb_adr 
 213 006e C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0070 41F00401 		orr r1,#(1<<2)
 215 0074 C0F2FA51 		movt r1,#SCB_VECTKEY
 216 0078 C160     		str r1,[r0,#SCB_AIRCR]
 217 007a FEE7     		b . 
 218              		.p2align 2 
 219              	scb_adr:
 220 007c 00ED00E0 		.word SCB_BASE_ADR 
 221              	user_reboot_msg:
 222 0080 84000000 		.word .+4
 223 0084 0D       		.byte 13 
 224 0085 0D757365 		.ascii "\ruser reboot!"
 224      72207265 
 224      626F6F74 
 224      21
 225 0092 00BF     		.p2align 2 
 226              	
 227              	   
 228              	// send counted string to uart 
 229              	// input: r5 string* 
 230              		.type uart_puts,%function 
 231              	uart_puts:
 232 0094 4FF48050 		_MOV32 r0,UART 
 232      C4F20100 
 233 009c 15F8011B 		ldrb r1,[r5],#1 // string length
 234 00a0 0940     		ands r1,r1
 235 00a2 0CD0     	1:	beq 9f 
 236 00a4 0268     	2:  ldr r2,[r0,#USART_SR]
 237 00a6 12F08002 		ands r2,#0x80 
 238 00aa FBD0     		beq 2b 	
 239 00ac 15F8012B 		ldrb r2,[r5],#1
 240 00b0 0271     		strb r2,[r0,#USART_DR]
 241 00b2 0139     		subs r1,r1,#1 
 242 00b4 F6D1     		bne 2b 
 243 00b6 0268     	3:	ldr r2,[r0,#USART_SR]
 244 00b8 12F04002 		ands r2,#(1<<6)
 245 00bc FBD0     		beq 3b 
 246 00be 7047     	9:  bx lr 
 247              	
 248              	
 249              	/**************************************
 250              	  reset_handler execute at MCU reset
 251              	***************************************/
ARM GAS  forth.s 			page 14


 252              	  .type  reset_handler, %function
 253              	  .p2align 2 
 254              	  .global reset_handler
 255              	reset_handler:
 256 00c0 4FF00000 		_MOV32 r0,RAM_END
 256      C2F20200 
 257 00c8 8546     		mov sp,r0  
 258 00ca FFF7FEFF 		bl	remap 
 259 00ce 00F033F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 260 00d2 00F093F8 		bl  uart_init
 261 00d6 FFF7FEFF 		bl	tv_init 
 262 00da 00F019F8 		bl forth_init 
 263              	/****** test code ******/
 264 00de 4FF40143 		_MOV32 T3,VID_BUFF 
 264      C2F20103 
 265 00e6 4FF4FA42 		mov T2,#32000
 266 00ea 80EA0000 		eor T0,T0 
 267 00ee 4FF00A01 	1:  mov T1,#10
 268 00f2 03F8010B 	2:	strb T0,[T3],#1
 269 00f6 0139     		subs T1,#1 
 270 00f8 FBD1     		bne 2b  
 271 00fa 00F11100 		add T0,#0x11
 272 00fe 10F00F0F 		tst T0,#15
 273 0102 01D1     		bne 3f
 274 0104 80EA0000 		eor T0,T0
 275 0108 0A3A     	3:  subs T2,#10 
 276 010a F0D1     		bne 1b 
 277              	/***** end test code ****/
 278 010c 02F0ECBC 		b COLD 
 279              	
 280              	
 281              	
 282              		.type forth_init, %function 
 283              	forth_init:
 284 0110 4FF00004 		_MOV32 UP,UPP 
 284      C2F20004 
 285 0118 4FF47F47 		_MOV32 DSP,SPP
 285      C2F20107 
 286 0120 4FF68078 		_MOV32 RSP,RPP
 286      C2F20108 
 287 0128 DFF8FCA1 	  ldr INX,=NEST
 288 012c 4AF0010A 	  orr INX,#1 
 289 0130 86EA0606 		EOR TOS,TOS  
 290 0134 7047     		_RET 
 291              	
 292              	/************
 293              	// test code 
 294              		.type echo, %function 
 295              	ECHO:
 296              		.word KEY,EMIT,BRANCH,echo  
 297              	
 298              		.type blink, %function 
 299              	blink:
 300              		_MOV32 r0,GPIOC_BASE_ADR
 301              	0:	mov r4,#1<<LED_PIN 
 302              		str r4,[r0,GPIO_BSRR]
 303              		mov	r4,#500
ARM GAS  forth.s 			page 15


 304              		str r4,[R3,#TIMER] 
 305              		_CALL timeout
 306              		mov r4,#1<<(LED_PIN+16)
 307              		str r4,[r0,#GPIO_BSRR]
 308              		mov	r4,#500
 309              		str r4,[R3,#TIMER] 
 310              		_CALL timeout 
 311              		b 0b 
 312              	
 313              		.type timeout, %function 
 314              	timeout:
 315              		ldr r4,[r3,#TIMER]
 316              		orrs r4,r4
 317              		bne timeout 
 318              		bx lr 
 319              	***** end test code *****/
 320              	
 321              	  .type init_devices, %function
 322 0136 00BF     	  .p2align 2 
 323              	init_devices:
 324              	/* init clock to HSE 96 Mhz */
 325              	/* set 3 wait states in FLASH_ACR_LATENCY */
 326 0138 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 326      C4F20200 
 327 0140 4FF00301 	  mov r1,#3 
 328 0144 0160     	  str r1,[r0,#FLASH_ACR]
 329              	/* configure clock for HSE, 25 Mhz crystal */
 330              	/* enable HSE in RCC_CR */
 331 0146 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 331      C4F20200 
 332 014e 0168     	  ldr r1,[r0,#RCC_CR]
 333 0150 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 334 0154 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 335              	/* wait HSERDY loop */
 336              	wait_hserdy:
 337 0156 0168     	  ldr r1,[r0,#RCC_CR]
 338 0158 11F4003F 	  tst r1,#(1<<17)
 339 015c FBD0     	  beq wait_hserdy
 340              	
 341              	/************************************************* 
 342              	   configure PLL  and source 
 343              	   SYSCLOCK=96 Mhz
 344              	   select HSE as  PLL source clock
 345              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 346              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 347              	****************************************************/
 348              	  /* set RCC_PLLCFGR */
 349 015e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 349      C4F20200 
 350 0166 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 350      C0F24041 
 351 016e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 352              	  /* enable PLL */
 353 0170 0168     	  ldr r1,[r0,#RCC_CR]
 354 0172 41F08071 	  orr r1, #(1<<24)
 355 0176 0160     	  str r1,[r0,#RCC_CR]
 356              	/* wait for PLLRDY */
ARM GAS  forth.s 			page 16


 357              	wait_pllrdy:
 358 0178 0168     	  ldr r1,[r0,#RCC_CR]
 359 017a 11F0007F 	  tst r1,#(1<<25)
 360 017e FBD1     	  bne wait_pllrdy 
 361              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 362 0180 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 362      C0F21901 
 363 0188 8160     	  str r1,[r0,#RCC_CFGR]
 364              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 365 018a 8168     	  ldr r1,[r0,#RCC_CFGR]
 366 018c 41F00201 	  orr r1,#2
 367 0190 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 368              	/* wait for SWS==2 */
 369              	wait_sws:
 370 0192 8168     	  ldr r1,[r0,#RCC_CFGR]
 371 0194 11F0080F 	  tst r1,#(2<<2)
 372 0198 FBD0     	  beq wait_sws
 373              	/* now sysclock is 96 Mhz */
 374              	
 375              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 376 019a 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 377 019e 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 378 01a0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 379 01a4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 380              	/* configure GPIOC:13 as output for user LED */
 381 01a6 4FF40060 	  _MOV32 r0,LED_GPIO 
 381      C4F20200 
 382 01ae 0168     	  ldr r1,[r0,#GPIO_MODER]
 383 01b0 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 384 01b4 01EA0201 	  and r1,r1,r2
 385 01b8 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 386 01bc 0160     	  str r1,[r0,#GPIO_MODER]
 387 01be 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 388 01c0 41F40051 	  orr r1,#(1<<LED_PIN)
 389 01c4 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 390 01c6 81EA0101 	  eor r1,r1 
 391 01ca 8182     	  strh r1,[r0,#GPIO_ODR]	
 392              	/* enable compensation CELL for fast I/O */
 393 01cc 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 393      C4F20101 
 394 01d4 4FF00100 		mov r0,#1 
 395 01d8 0862     		str r0,[R1,#SYSCFG_CMPCR]
 396              	/* wait for ready bit */ 
 397 01da 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 398 01dc 10F4807F 	    tst r0,#(1<<8)
 399 01e0 FBD0     		beq 1b 	
 400              	
 401              	
 402              	/* configure systicks for 1msec ticks */
 403 01e2 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 403      CEF20000 
 404 01ea 47F2FF61 	  _MOV32 r1,95999 
 404      C0F20101 
 405 01f2 4160     	  str r1,[r0,#STK_LOAD]
 406 01f4 4FF00701 	  mov r1,#7
 407 01f8 0160     	  str r1,[r0,STK_CTL]
 408 01fa 7047     	  _RET  
ARM GAS  forth.s 			page 17


 409              	
 410              	/*******************************
 411              	  initialize UART peripheral 
 412              	********************************/
 413              		.type uart_init, %function
 414              	uart_init:
 415              	/* set GPIOA PIN 9, uart TX  */
 416 01fc 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 416      C4F20200 
 417 0204 0168     	  ldr r1,[r0,#GPIO_MODER]
 418 0206 6FF47012 	  mvn r2,#0xf<<(2*9)
 419 020a 01EA0201 	  and r1,r1,r2
 420 020e 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 421 0212 41EA0201 	  orr r1,r1,r2 
 422 0216 0160     	  str r1,[r0,#GPIO_MODER]
 423              	/* select alternate functions USART1==AF07 */ 
 424 0218 4FF4EE61 	  mov r1,#0x77<<4 
 425 021c 4162     	  str r1,[r0,#GPIO_AFRH]
 426              	/* configure USART1 registers */
 427 021e 4FF48050 	  _MOV32 r0,UART 
 427      C4F20100 
 428              	/* BAUD rate */
 429 0226 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 430 022a 8160     	  str r1,[r0,#USART_BRR]
 431 022c 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 432 0230 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 433              	/* enable interrupt in NVIC */
 434 0232 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 434      CEF20000 
 435 023a D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 436 023e 41F02001 	  orr r1,#32   
 437 0242 C0F80411 	  str r1,[r0,#NVIC_ISER1]
 438 0246 7047     	  bx lr 
 439              	
 440              	/* copy system variables to RAM */ 
 441              		.type remap, %function 
 442              	    .global remap 
 443              	remap:
 444              	// copy system to RAM 	
 445 0248 4FF00000 		_MOV32 r0,RAM_ADR 
 445      C2F20000 
 446 0250 3649     		ldr r1,=UZERO 
 447 0252 4FF0A002 		mov r2,#ULAST-UZERO 
 448 0256 02F10302 		add r2,r2,#3
 449 025a 22F00302 		and r2,r2,#~3 
 450 025e 51F8043B 	1:	ldr r3,[r1],#4 
 451 0262 40F8043B 		str r3,[r0],#4 
 452 0266 043A     		subs R2,#4 
 453 0268 F9D1     		bne 1b
 454              	// zero end of RAM 
 455 026a 4FF00002 		_MOV32 r2,RAM_END 
 455      C2F20202 
 456 0272 83EA0303 		eor r3,r3,r3 
 457 0276 40F8043B 	2:  str r3,[r0],#4
 458 027a 9042     		cmp r0,r2 
 459 027c FBDB     		blt 2b 
 460 027e 4FF00004 		_MOV32 UP,RAM_ADR  
ARM GAS  forth.s 			page 18


 460      C2F20004 
 461 0286 7047     		_RET 
 462              	
 463              	/******************************************************
 464              	*  COLD start moves the following to USER variables.
 465              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 466              	******************************************************/
 467              		.p2align 2
 468              	UZERO:
 469 0288 00000000 		.word 0  			/*Reserved */
 470 028c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 471 0290 00000000 		.word 0      /* TICKS */
 472 0294 00000000 	    .word 0     /* CD_TIMER */
 473 0298 782A0000 		.word HI  /*'BOOT */
 474 029c 0A000000 		.word BASEE 	/*BASE */
 475 02a0 00000000 		.word 0			/*tmp */
 476 02a4 00000000 		.word 0			/*SPAN */
 477 02a8 00000000 		.word 0			/*>IN */
 478 02ac 00000000 		.word 0			/*#TIB */
 479 02b0 00FF0120 		.word TIBB	/*TIBU */
 480 02b4 E01F0000 		.word INTER	/*'EVAL */
 481 02b8 00000000 		.word 0			/*HLD */
 482 02bc E02A0000 		.word _LASTN	/*CONTEXT */
 483 02c0 3C2B0000 		.word CTOP  	/* FCP end of system dictionnary */
 484 02c4 B4280020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 485 02c8 E02A0000 		.word _LASTN	/*LAST word in dictionary */
 486 02cc 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 486      00000000 
 486      00000000 
 486      00000000 
 487 02dc 00000000 		.word 0  /* RX_HEAD */
 488 02e0 00000000 		.word 0  /* RX_TAIL */ 
 489 02e4 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 490 02e8 00000000 		.word 0  /* VID_STATE, video state */  
 491 02ec 00000000 	    .word 0  /* VID_FIELD, field */
 492 02f0 00810120 		.word VID_BUFF /* video_buffer address */ 
 493 02f4 00000000 	    .word 0 /* kbd struct */
 494 02f8 00000000 		.space KBD_QUEUE_SIZE,0  
 494      00000000 
 494      00000000 
 494      00000000 
 495 0308 00000000 		.word 0  /* kbd queue head */
 496 030c 00000000 		.word 0 /* kbd queue tail */ 
 497 0310 00000000 	    .word 0 /* tv cursor row */
 498 0314 00000000 	    .word 0 /* tv cursor column */ 
 499 0318 00000000 	    .word 0 /* tv back color */
 500 031c 07000000 	    .word 7 /* tv font color */
 501 0320 00000000 	    .word 0,0 
 501      00000000 
 502              	ULAST:
 503 0328 AC090000 	
 503      88020000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
ARM GAS  forth.s 			page 19


   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
   7              	
   8              	  .equ CHAR_WIDTH, 6 
   9              	  .equ CHAR_HEIGHT, 8
  10              	  
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*15-1) // 15µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
  48              	   .equ ODD_FIELD,0 
  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
ARM GAS  forth.s 			page 20


  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 0330 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  64      C4F20202 
  65 0338 1168     	  ldr r1,[r2,#GPIO_MODER]
  66 033a 4FF05500 	  mov r0,#0x55
  67 033e 41EA0001 	  orr r1,r0
  68 0342 1160     	  str r1,[r2,#GPIO_MODER]
  69              	//  mov r0,#15 
  70              	//  ldr r1,[r2,#GPIO_OTYPER]
  71              	//  orr r1,r0 
  72              	//  str r1,[r2,#GPIO_OTYPER]
  73              	//  str r1,[r2,#GPIO_BSRR]
  74              	//  ldr r1,[r2,GPIO_OSPEEDR]
  75              	//  lsl r0,#1 // fast speed  
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OSPEEDR]
  78 0344 80EA0000 	  eor r0,r0 
  79 0348 5061     	  str r0,[r2,#GPIO_ODR]  
  80              	// configure PB1 as OUTPUT_AFPP 
  81              	// this is TIM3_CC4 output compare 
  82 034a 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  83 034e 4FF00800 	  mov r0,(2<<2) // alternate function output 
  84 0352 1168     	  ldr r1,[r2,#GPIO_MODER]
  85 0354 41EA0001 	  orr r1,r0 
  86 0358 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  87 035a 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  88 035c 41EA0001 	  orr r1,r0 
  89 0360 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  90 0362 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  91 0366 116A     	  ldr r1,[r2,#GPIO_AFRL]
  92 0368 41EA0001 	  orr r1,r0 
  93 036c 1162     	  str r1,[r2,#GPIO_AFRL]
  94              	// enable peripheral clock 
  95 036e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  95      C4F20202 
  96 0376 4FF00200 	  mov r0,#2 
  97 037a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  98 037c 41EA0001 	  orr r1,r0 
  99 0380 1164     	  str r1,[r2,#RCC_APB1ENR]
 100              	// configure TIMER3   
 101 0382 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 101      C4F20002 
 102 038a 41F2D470 	  mov r0,#HPER
 103 038e D062     	  str r0,[r2,#TIM_ARR]
 104 0390 40F29F50 	  mov r0,#VIDEO_DELAY 
 105 0394 D063     	  str r0,[r2,#TIM_CCR3]
 106 0396 4FF4E170 	  mov r0,#HPULSE 
ARM GAS  forth.s 			page 21


 107 039a 1064     	  str r0,[r2,#TIM_CCR4]  
 108 039c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 109 03a0 D061     	  str r0,[r2,#TIM_CCMR2]
 110 03a2 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 111 03a6 1062     	  str r0,[r2,#TIM_CCER]
 112 03a8 4FF00100 	  mov r0,#1 
 113 03ac D060     	  str r0,[r2,#TIM_DIER]
 114 03ae 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 115              	// enable interrupt in NVIC controller 
 116 03b0 4FEA4070 	  lsl r0,#29 // IRQ29
 117 03b4 4FF46042 	  _MOV32 r2,NVIC_BASE_ADR
 117      CEF20002 
 118 03bc D2F80011 	  ldr r1,[r2,#NVIC_ISER0]
 119 03c0 41EA0001 	  orr r1,r0 
 120 03c4 C2F80011 	  str r1,[r2,#NVIC_ISER0]
 121 03c8 7047     	  _RET
 122              	
 123              	/*************************************
 124              	  TIMER3 interrupt for tv_out
 125              	  T1 line # 
 126              	  T0 TIM3_BASE_ADR 
 127              	*************************************/
 128 03ca 00BF     	  _GBL_FUNC tv_out_isr
 129 03cc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 129      C4F20000 
 130 03d4 81EA0101 	  eor T1,T1
 131 03d8 0161     	  str T1,[T0,#TIM_SR]
 132 03da E16D     	  ldr T1,[UP,#VID_CNTR]
 133 03dc 01F10101 	  add T1,#1 
 134 03e0 E165     	  str T1,[UP,#VID_CNTR]
 135              	/** machine state cases **/
 136 03e2 226E     	  ldr T2,[UP,#VID_STATE]
 137 03e4 002A     	  cmp T2,#ST_VSYNC 
 138 03e6 07D0     	  beq state_vsync
 139 03e8 012A     	  cmp T2,#ST_PREVID 
 140 03ea 2FD0     	  beq state_pre_video 
 141 03ec 022A     	  cmp T2,#ST_VIDEO 
 142 03ee 36D0     	  beq state_video_out 
 143 03f0 032A     	  cmp T2,#ST_POSTVID 
 144 03f2 60D0     	  beq state_post_video
 145 03f4 FFF7FEBF 	  b default_handler // invalid state 
 146              	/*** vertical sync state **/
 147              	state_vsync:
 148 03f8 0129     	  cmp T1,#1
 149 03fa 06D1     	  bne 1f 
 150              	/****** set vertical pre-sync  *****/
 151 03fc 4FF0DB01 	  mov T1,#SERRATION
 152 0400 0164     	  str T1,[T0,#TIM_CCR4]
 153 0402 40F6E931 	  mov T1,#SYNC_LINE 
 154 0406 C162     	  str T1,[T0,#TIM_ARR]
 155 0408 68E0     	  b tv_isr_exit 
 156 040a 0729     	1: cmp T1,#7
 157 040c 03D1     	  bne 2f 
 158              	// vertical sync pulse   
 159 040e 40F62821 	  mov T1,#VSYNC_PULSE
 160 0412 0164     	  str T1,[T0,#TIM_CCR4]
 161 0414 62E0     	  b tv_isr_exit
ARM GAS  forth.s 			page 22


 162 0416 0D29     	2: cmp T1,#13
 163 0418 03D1     	   bne 3f  
 164              	// set vertical post-sync    
 165 041a 4FF0DB01 	   mov T1,#SERRATION 
 166 041e 0164     	   str T1,[T0,#TIM_CCR4]
 167 0420 5CE0     	   b tv_isr_exit   
 168 0422 1229     	3: cmp T1,#18
 169 0424 03D1     	   bne 4f 
 170              	// if even field full line  
 171 0426 616E     	   ldr T1,[UP,#VID_FIELD]
 172 0428 0029     	   cmp T1,#ODD_FIELD  
 173 042a 57D0     	   beq tv_isr_exit 
 174 042c 01E0     	   b sync_end 
 175 042e 1329     	4: cmp T1,#19 
 176 0430 54D1     	   bne tv_isr_exit
 177              	sync_end: 
 178 0432 4FF00901 	   mov T1,#9
 179 0436 E165     	   str T1,[UP,#VID_CNTR]
 180 0438 4FF4E171 	   mov T1,#HPULSE 
 181 043c 0164     	   str T1,[T0,#TIM_CCR4] 
 182 043e 41F2D471 	   mov T1,#HPER 
 183 0442 C162     	   str T1,[T0,#TIM_ARR] 
 184 0444 4FF00101 	   mov T1,#ST_PREVID 
 185 0448 2166     	   str T1,[UP,#VID_STATE]
 186 044a 47E0     	   b tv_isr_exit 
 187              	/*****************************/
 188              	state_pre_video:
 189 044c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 190 044e 45D4     	   bmi tv_isr_exit 
 191 0450 4FF00201 	   mov T1,#ST_VIDEO 
 192 0454 2166     	   str T1,[UP,#VID_STATE]
 193 0456 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 194 045a C160     	   str T1,[T0,#TIM_DIER]
 195 045c 3EE0     	   b tv_isr_exit 
 196              	/**************************
 197              	    VIDEO OUTPUT 
 198              	**************************/   
 199              	state_video_out:
 200 045e F029     	   cmp T1,#VIDEO_LAST_LINE 
 201 0460 06D9     	   bls 1f 
 202 0462 4FF00301 	   mov T1,#ST_POSTVID 
 203 0466 2166     	   str T1,[UP,#VID_STATE]
 204 0468 4FF00101 	   mov T1,#1 
 205 046c C160     	   str T1,[T0,#TIM_DIER]
 206 046e 35E0     	   b tv_isr_exit 
 207              	1: // video output
 208 0470 A06E     	   ldr T0,[UP,#VID_BUFFER]
 209 0472 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 210 0476 4FF0A003 	   mov T3,#160
 211 047a 03FB01F1 	   mul T1,T3 
 212 047e 0844     	   add T0,T1  
 213 0480 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 213      C4F20201 
 214 0488 0278     	2: ldrb T2,[T0]
 215 048a 4FEA1212 	   lsr T2,#4 
 216 048e 4A61     	   str T2,[T1,#GPIO_ODR]
 217 0490 AFF30080 	   nop.w
ARM GAS  forth.s 			page 23


 218 0494 AFF30080 	   nop.w 
 219 0498 10F8012B 	   ldrb T2,[T0],#1
 220 049c 02F00F02 	   and T2,#15 
 221 04a0 4A61     	   str T2,[T1,#GPIO_ODR]
 222 04a2 AFF30080 	   nop.w
 223 04a6 AFF30080 	   nop.w  
 224 04aa 013B     	   subs T3,#1
 225 04ac ECD1     	   bne 2b  
 226 04ae 4FF47022 	   mov T2,#(15<<16) 
 227 04b2 8A61     	   str T2,[T1,#GPIO_BSRR]
 228 04b4 12E0     	   b tv_isr_exit 
 229              	state_post_video:
 230 04b6 4FF48372 	   mov T2,#262
 231 04ba 9142     	   cmp T1,T2
 232 04bc 0ED4     	   bmi tv_isr_exit     
 233              	// odd field line 262 half line 
 234 04be 616E     	   ldr T1,[UP,VID_FIELD]
 235 04c0 11B9     	   cbnz T1, frame_end 
 236 04c2 40F6E931 	   mov T1,#SYNC_LINE
 237 04c6 C162     	   str T1,[T0,#TIM_ARR]      
 238              	frame_end: 
 239 04c8 4FF00001 	   mov T1,#ST_VSYNC 
 240 04cc 2166     	   str T1,[UP,#VID_STATE]
 241 04ce 81EA0101 	   eor T1,T1 
 242 04d2 E165     	   str T1,[UP,#VID_CNTR]
 243 04d4 616E     	   ldr T1,[UP,#VID_FIELD]
 244 04d6 6FEA0101 	   mvn T1,T1  
 245 04da 6166     	   str T1,[UP,#VID_FIELD]
 246              	tv_isr_exit: 
 247 04dc 7047     	   _RET   
 248              	
 249              	/***************************
 250              	    FORTH WORDS 
 251              	***************************/
 252              	    .equ LINK, 0 
 253              	
 254              	// BACK-COLOR ( -- a )
 255              	//   back color variable 
 256 04de 00000000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 256      0A424143 
 256      4B2D434F 
 256      4C4F5200 
 256      00BF
 257 04f0 47F8046D 		_PUSH 
 258 04f4 04F19006 		ADD TOS,UP,#BK_COLOR
 259 04f8 5CE2     		_NEXT
 260              	
 261              	// PEN-COLOR ( -- a )
 262              	// pen color variable 
 263 04fa E2040000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 263      0950454E 
 263      2D434F4C 
 263      4F52
 264 0508 47F8046D 		_PUSH 
 265 050c 04F19406 		ADD TOS,UP,#PEN_COLOR
 266 0510 50E2     		_NEXT 
 267              	
ARM GAS  forth.s 			page 24


 268              	// COLUMN ( -- a )
 269              	// cursor column variable 
 270 0512 FE040000 	  _HEADER COLUMN,6,"COLUMN"
 270      06434F4C 
 270      554D4E00 
 270      00BF
 271 0520 47F8046D 	  _PUSH 
 272 0524 04F18C06 	  ADD TOS,UP,#COL 
 273 0528 44E2     	  _NEXT 
 274              	
 275              	// ROW ( -- a )
 276              	// cursor row 
 277 052a 16050000 	  _HEADER CURSOR_ROW,3,"ROW"
 277      03524F57 
 277      00BF
 278 0534 47F8046D 	  _PUSH 
 279 0538 04F18806 	  ADD TOS,UP,#ROW 
 280 053c 3AE2     	  _NEXT 
 281              	
 282              	// ROW>Y ( n1 - n2 )
 283              	// convert cursor row to y coord 
 284 053e 2E050000 	  _HEADER ROWY,5,"ROW>Y"
 284      05524F57 
 284      3E59
 285 0548 4FF00800 	  mov T0,#CHAR_HEIGHT
 286 054c 00FB06F6 	  mul TOS,T0 
 287 0550 30E2     	  _NEXT 
 288              	
 289              	// COL>X ( n1 -- n2 )
 290              	// convert cursor column to x coord 
 291 0552 42050000 	  _HEADER COLX,5,"COL>X" 
 291      05434F4C 
 291      3E58
 292 055c 4FF00600 	  mov T0,#CHAR_WIDTH 
 293 0560 00FB06F6 	  mul TOS,T0 
 294 0564 26E2     	  _NEXT 
 295              	
 296              	// FONT ( -- a )
 297              	// return address of font table
 298 0566 56050000 	  _HEADER FONT,4,"FONT" 
 298      04464F4E 
 298      5400
 299 0570 47F8046D 	  _PUSH 
 300 0574 CB4E     	  ldr TOS,=font_6x8 
 301 0576 1DE2     	  _NEXT 
 302              	
 303              	// VIDBUFF ( -- a )
 304              	// address of video buffer 
 305 0578 6A050000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 305      07564944 
 305      42554646 
 306 0584 47F8046D 	  _PUSH 
 307 0588 A66E     	  LDR TOS,[UP,#VID_BUFFER]
 308 058a 13E2     	  _NEXT 
 309              	
 310              	
 311              	// PLOT ( x y op -- )
ARM GAS  forth.s 			page 25


 312              	// draw a pixel 
 313              	//    0 back color 
 314              	//    1 pen color 
 315              	//    2 invert (pen -> back | back -> pen )
 316              	//    3 xor pen color  
 317 058c 7C050000 	    _HEADER PLOT,4,"PLOT"
 317      04504C4F 
 317      540000BF 
 318 0598 3046     	    mov T0,TOS // op 
 319 059a 06CF     	    ldmfd DSP!,{T1,T2} // T1=y,T2=x 
 320 059c 4FF0A003 	    mov T3,#BPR // bytes per row  
 321 05a0 03FB01F1 	    mul T1,T3 
 322 05a4 4FEA5205 	    lsr WP,T2,#1 
 323 05a8 2944     	    add T1,WP 
 324 05aa A36E     	    ldr T3,[UP,#VID_BUFFER] 
 325 05ac 5D5C     	    ldrb WP,[T3,T1] // byte in buffer 2 pixels 
 326 05ae 4FF00F06 	    mov TOS,#15 // AND mask 
 327 05b2 12F0010F 	    tst T2,#1 
 328 05b6 01D0     	    beq 1f 
 329 05b8 4FEA0616 	    lsl TOS,#4 // mask out low nibble for odd pixel  
 330 05bc 30B1     	1:	cbz T0,op_back 
 331 05be 0128     	    cmp T0,#1 
 332 05c0 11D0     	    beq op_pen 
 333 05c2 0228     	    cmp T0,#2 
 334 05c4 1CD0     	    beq op_invert 
 335 05c6 0328     	    cmp T0,#3 
 336 05c8 33D0     	    beq op_xor
 337 05ca 3CE0     	    b 9f   
 338              	op_back:
 339 05cc 05EA0605 	    and WP,TOS // mask out nibble 
 340 05d0 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 341 05d4 12F0010F 	    tst T2,#1 
 342 05d8 01D1     	    bne 1f 
 343 05da 4FEA0010 	    lsl T0,#4 // high nibble  
 344 05de 45EA0005 	1:  orr WP,T0  
 345 05e2 5D54     	    strb WP,[T3,T1]
 346 05e4 2FE0     	    b 9f 
 347              	op_pen: 
 348 05e6 05EA0605 	    and WP,TOS 
 349 05ea 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 350 05ee 12F0010F 	    tst T2,#1
 351 05f2 01D1     	    bne 1f 
 352 05f4 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 353 05f8 45EA0005 	1:	orr WP,T0 
 354 05fc 5D54     	    strb WP,[T3,T1]
 355 05fe 22E0     	    b 9f 
 356              	op_invert:
 357 0600 05EA0605 	    and WP,TOS 
 358 0604 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 359 0608 12F0010F 	    tst T2,#1 
 360 060c 01D1     	    bne 1f 
 361 060e 4FEA0010 	    lsl T0,#4 
 362 0612 8542     	1:  cmp WP,T0
 363 0614 06D1     	    bne 2f 
 364 0616 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 365 061a 12F0010F 	    tst T2,#1 
 366 061e 01D1     	    bne 2f 
ARM GAS  forth.s 			page 26


 367 0620 4FEA0010 	    lsl T0,#4
 368 0624 5D5C     	2:  ldrb WP,[T3,T1]
 369 0626 05EA0605 	    and WP,TOS 
 370 062a 45EA0005 	    orr WP,T0 
 371 062e 5D54     	    strb WP,[T3,T1]
 372 0630 09E0     	    b 9f 
 373              	op_xor:
 374 0632 D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 375 0636 12F0010F 	    tst T2,#1 
 376 063a 01D1     	    bne 1f 
 377 063c 4FEA0010 	    lsl T0,#4 
 378 0640 85EA0005 	1:  eor WP,T0 
 379 0644 5D54     	    strb WP,[T3,T1]
 380 0646 57F8046B 	9:  _POP 
 381 064a B3E1     	    _NEXT 
 382              	
 383              	// VSYNC ( -- )
 384              	// wait vertical sync phase 
 385 064c 90050000 	    _HEADER VSYNC,5,"VSYNC"
 385      05565359 
 385      4E4300BF 
 386 0658 E06D     	1:  ldr T0,[UP,#VID_CNTR]
 387 065a 0028     	    cmp T0,#0
 388 065c FCD1     	    bne 1b
 389 065e A9E1     	    _NEXT 
 390              	
 391              	// CLS ( -- )
 392              	// clear TV screen 
 393 0660 50060000 	    _HEADER CLS,3,"CLS"
 393      03434C53 
 394 0668 80EA0000 	    eor T0,T0 
 395 066c 94F89010 	    ldrb T1,[UP,#BK_COLOR]
 396 0670 40EA0100 	    orr T0,T1 
 397 0674 4FEA0111 	    lsl T1,#4 
 398 0678 40EA0100 	    orr T0,T1 
 399 067c 4FEA0021 	    lsl T1,T0,#8 
 400 0680 40EA0100 	    orr T0,T1 
 401 0684 4FEA0041 	    lsl T1,T0,#16
 402 0688 40EA0100 	    orr T0,T1 
 403 068c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 404 0690 A26E     	    ldr T2,[UP,#VID_BUFFER]
 405 0692 5050     	1:	str T0,[T2,T1]
 406 0694 0439     	    subs T1,#4
 407 0696 FCD1     	    bne 1b
 408 0698 1060     	    str T0,[T2]
 409 069a 80EA0000 	    eor T0,T0 
 410 069e C4F88800 	    str T0,[UP,#ROW]
 411 06a2 C4F88C00 	    str T0,[UP,#COL]
 412 06a6 85E1     	    _NEXT 
 413              	
 414              	
 415              	// CLRLINE ( n -- )
 416              	// clear text line 
 417 06a8 64060000 	  _HEADER CLRLINE,7,"CLRLINE"
 417      07434C52 
 417      4C494E45 
 418 06b4 504700BF 	  _NEST
ARM GAS  forth.s 			page 27


 419 06b8 250B0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 419      00050000 
 420 06c0 590C0000 	  _ADR DUPP  
 421 06c4 010C0000 	  _ADR TOR 
 422 06c8 3D0D0000 	  _ADR STAR
 423 06cc 85050000 	  _ADR VIDBUFF
 424 06d0 1D0D0000 	  _ADR PLUS
 425 06d4 D90B0000 	  _ADR RFROM   
 426 06d8 250B0000 	  _DOLIT 0 
 426      00000000 
 427 06e0 61140000 	  _ADR FILL 
 428 06e4 BB090000 	  _UNNEST 
 429              	
 430              	// SCROLLUP ( -- )
 431              	// scroll up tv screen 1 char height 
 432 06e8 AC060000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 432      08534352 
 432      4F4C4C55 
 432      500000BF 
 433 06f8 504700BF 	  _NEST 
 434 06fc 85050000 	  _ADR VIDBUFF 
 435 0700 590C0000 	  _ADR DUPP 
 436 0704 250B0000 	  _DOLIT BPR*CHAR_HEIGHT 
 436      00050000 
 437 070c 590C0000 	  _ADR DUPP 
 438 0710 010C0000 	  _ADR TOR 
 439 0714 1D0D0000 	  _ADR PLUS 
 440 0718 690C0000 	  _ADR SWAP 
 441 071c 250B0000 	  _DOLIT VIDEO_BUFFER_SIZE 
 441      007D0000 
 442 0724 D90B0000 	  _ADR RFROM  
 443 0728 2D0D0000 	  _ADR SUBB 
 444 072c 2D140000 	  _ADR MOVE
 445 0730 250B0000 	  _DOLIT 24 
 445      18000000 
 446 0738 B5060000 	  _ADR CLRLINE 
 447 073c BB090000 	  _UNNEST 
 448              	
 449              	//  RIGHT ( -- )
 450              	// move cursor 1 char. right 
 451 0740 EC060000 	  _HEADER RIGHT,5,"RIGHT"
 451      05524947 
 451      485400BF 
 452 074c D4F88C00 	  ldr T0,[UP,#COL]
 453 0750 00F10100 	  add T0,#1
 454 0754 3528     	  cmp T0,#53
 455 0756 02D5     	  bpl 1f 
 456 0758 C4F88C00 	  str T0,[UP,#COL]
 457 075c 2AE1     	  _NEXT 
 458 075e 80EA0000 	1: eor T0,T0 
 459 0762 C4F88C00 	  str T0,[UP,#COL]
 460 0766 D4F88800 	  ldr T0,[UP,#ROW]
 461 076a 1828     	  cmp T0,#24
 462 076c 04D0     	  beq 2f 
 463 076e 00F10100 	  add T0,#1 
 464 0772 C4F88800 	  str T0,[UP,#ROW]
 465 0776 1DE1     	  _NEXT 
ARM GAS  forth.s 			page 28


 466 0778 48F804CD 	2: STMFD	RSP!,{IP}
 467 077c DFF828C1 	   ldr IP,=3f 
 468 0780 18E1     	   b INEXT 
 469              	3: 
 470 0782 F9060000 	  _ADR SCROLLUP 
 471 0786 BB090000 	  _UNNEST  
 472              	
 473              	
 474              	// CHAR_ROW 
 475              	// plot character row 
 476              	// {x y r -- }
 477 078a 44070000 	  _HEADER CHAR_ROW,7,"CHARROW"
 477      07434841 
 477      52524F57 
 477      00BF
 478 0798 504700BF 	    _NEST 
 479 079c 250B0000 	    _DOLIT 5 
 479      05000000 
 480 07a4 010C0000 	    _ADR TOR 
 481 07a8 590C0000 	1:  _ADR DUPP
 482 07ac 250B0000 	    _DOLIT 128 
 482      80000000 
 483 07b4 9D0C0000 	    _ADR ANDD
 484 07b8 250B0000 	    _DOLIT 7 
 484      07000000 
 485 07c0 F50C0000 	    _ADR RSHIFT // {x y r 0|1 -- }
 486 07c4 010C0000 	    _ADR TOR 
 487 07c8 410E0000 	    _ADR ROT 
 488 07cc 410E0000 	    _ADR ROT 
 489 07d0 690E0000 	    _ADR DDUP
 490 07d4 D90B0000 	    _ADR RFROM 
 491 07d8 99050000 	    _ADR PLOT // { -- x y r } 
 492 07dc 690C0000 	    _ADR SWAP  
 493 07e0 790D0000 	    _ADR ONEP 
 494 07e4 690C0000 	    _ADR SWAP 
 495 07e8 410E0000 	    _ADR ROT // { x' y r }
 496 07ec 250B0000 	    _DOLIT 1 
 496      01000000 
 497 07f4 0D0D0000 	    _ADR LSHIFT 
 498 07f8 490B0000 	    _DONXT 1b
 498      A8070000 
 499 0800 550E0000 	    _ADR DDROP 
 500 0804 490C0000 	    _ADR DROP 
 501 0808 BB090000 	    _UNNEST 
 502              	
 503              	
 504              	/**********************************
 505              	   TV-PUTC ( c -- )
 506              	   draw character in video buffer
 507              	**********************************/
 508 080c 8E070000 	    _HEADER TVPUTC,7,"TV-PUTC"
 508      0754562D 
 508      50555443 
 509 0818 504700BF 	    _NEST 
 510 081c 250B0000 	    _DOLIT 32 
 510      20000000 
 511 0824 2D0D0000 	    _ADR SUBB
ARM GAS  forth.s 			page 29


 512 0828 250B0000 	    _DOLIT 8 
 512      08000000 
 513 0830 3D0D0000 	    _ADR STAR 
 514 0834 71050000 	    _ADR FONT 
 515 0838 1D0D0000 	    _ADR PLUS // character font address
 516 083c 21050000 	    _ADR COLUMN 
 517 0840 AD0B0000 	    _ADR AT
 518 0844 5D050000 	    _ADR COLX  // x coord 
 519 0848 35050000 	    _ADR CURSOR_ROW 
 520 084c AD0B0000 	    _ADR AT    
 521 0850 49050000 	    _ADR ROWY  // {c-adr x y -- } 
 522 0854 250B0000 	    _DOLIT 7   
 522      07000000 
 523 085c 010C0000 	    _ADR TOR  
 524 0860 690E0000 	1:  _ADR DDUP // {c-adr x y x y -- }
 525 0864 250B0000 	    _DOLIT 4 
 525      04000000 
 526 086c 65130000 	    _ADR PICK 
 527 0870 CD0B0000 	    _ADR CAT 
 528 0874 99070000 	    _ADR CHAR_ROW  //{c-adr x y x y r -- }
 529 0878 790D0000 	    _ADR ONEP // {c-adr x y' -- }
 530 087c 410E0000 	    _ADR ROT   
 531 0880 790D0000 	    _ADR ONEP 
 532 0884 410E0000 	    _ADR ROT 
 533 0888 410E0000 	    _ADR ROT
 534 088c 490B0000 	    _DONXT 1b
 534      60080000 
 535 0894 550E0000 	    _ADR DDROP 
 536 0898 490C0000 	    _ADR DROP 
 537 089c 4D070000 	    _ADR RIGHT
 538 08a0 BB090000 	    _UNNEST  
 539              	
 540              	
 541              		.section .rodata 
 542              		.p2align 2
 543              	/********************************************
 544              	    TV font  ASCII 6 pixels x 8 pixels 
 545              	********************************************/
 546              	font_6x8:
 547 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 547      00000000 
 548 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 548      20002000 
 549 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 549      00000000 
 550 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 550      F8505000 
 551 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 551      28F02000 
 552 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 552      40981800 
 553 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 553      A8906800 
 554 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 554      00000000 
 555 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 555      40201000 
ARM GAS  forth.s 			page 30


 556 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 556      10204000 
 557 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 557      A8200000 
 558 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 558      20200000 
 559 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 559      60204000 
 560 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 560      00000000 
 561 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 561      00606000 
 562 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 562      40800000 
 563 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 563      C8887000 
 564 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 564      2020F800 
 565 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 565      4080F800 
 566 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 566      0808F000 
 567 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 567      F8101000 
 568 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 568      0808F000 
 569 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 569      88887000 
 570 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 570      40404000 
 571 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 571      88887000 
 572 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 572      08087000 
 573 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 573      60600000 
 574 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 574      60204000 
 575 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 575      40201000 
 576 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 576      F8000000 
 577 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 577      10204000 
 578 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 578      20002000 
 579 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 579      A8A87000 
 580 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 580      88888800 
 581 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 581      8888F000 
 582 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 582      80807800 
 583 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 583      8888F000 
 584 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
ARM GAS  forth.s 			page 31


 584      8080F800 
 585 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 585      80808000 
 586 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 586      88887000 
 587 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 587      88888800 
 588 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 588      20207000 
 589 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 589      08906000 
 590 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 590      A0908800 
 591 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 591      8080F800 
 592 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 592      88888800 
 593 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 593      98888800 
 594 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 594      88887000 
 595 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 595      80808000 
 596 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 596      A8987800 
 597 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 597      A0908800 
 598 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 598      0808F000 
 599 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 599      20202000 
 600 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 600      88887000 
 601 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 601      88502000 
 602 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 602      A8D88800 
 603 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 603      50888800 
 604 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 604      20202000 
 605 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 605      8080F800 
 606 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 606      40406000 
 607 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 607      10080000 
 608 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 608      08081800 
 609 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 609      00000000 
 610 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 610      0000F800 
 611 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 611      00000000 
 612 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 612      78887800 
ARM GAS  forth.s 			page 32


 613 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 613      C888F000 
 614 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 614      80887000 
 615 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 615      98887800 
 616 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 616      F8807000 
 617 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 617      40404000 
 618 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 618      88780870 
 619 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 619      88888800 
 620 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 620      20202000 
 621 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 621      10906000 
 622 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 622      C0A09000 
 623 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 623      20207000 
 624 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 624      A8888800 
 625 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 625      88888800 
 626 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 626      88887000 
 627 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 627      88F08080 
 628 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 628      90B05018 
 629 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 629      80808000 
 630 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 630      7008F000 
 631 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 631      40483000 
 632 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 632      88986800 
 633 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 633      88502000 
 634 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 634      A8A85000 
 635 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 635      20508800 
 636 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 636      88780870 
 637 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 637      2040F800 
 638 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 638      40402000 
 639 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 639      20202000 
 640 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 640      20204000 
 641 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
ARM GAS  forth.s 			page 33


 641      10000000 
 642 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 642      FCFCFCFC 
 643 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 643      10204000 
 644 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 644      40201000 
 645 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 645      20200000 
 646 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 646      A8702000 
 647 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 647      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte ones; count bits to 1 
  44              	    }
ARM GAS  forth.s 			page 34


  45              	
  46              	flags 
  47              	   :0 -> parity error flags 
  48              	**********************************/
  49              	    .equ KBD_F_PAR_ERR,1
  50              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  51              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  52              	    .equ KBD_BITCNTR,KBD_STRUCT 
  53              	    .equ KBD_ONES,KBD_STRUCT+3 
  54              	
  55              	/**********************************
  56              	    kbd_isr
  57              	    interrupt service routine 
  58              	    EXTI0 connected to keyboard 
  59              	    clock signal and triggered 
  60              	    on falling edge 
  61              	**********************************/
  62              	    _GBL_FUNC kbd_isr 
  63 08ac 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  63      C4F20102 
  64 08b4 4FF00100 	    mov r0,#1 
  65 08b8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  66 08ba 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  66      C4F20202 
  67 08c2 108A     	    ldrh r0,[r2,#GPIO_IDR]
  68 08c4 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  69 08c8 0029     	    cmp r1,#0 
  70 08ca 19D0     	    beq start_bit 
  71 08cc 0929     	    cmp r1,#9 
  72 08ce 22D0     	    beq parity_bit 
  73 08d0 0A29     	    cmp r1,#10 
  74 08d2 31D0     	    beq stop_bit 
  75 08d4 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  76 08d8 4FEA5202 	    lsr r2,#1 
  77 08dc 10F4805F 	    tst r0,#(1<<12) // data bit 
  78 08e0 07D0     	    beq 1f 
  79 08e2 42F08002 	    orr r2,#(1<<7)
  80 08e6 94F86F00 	    ldrb r0,[UP,#KBD_ONES]
  81 08ea 00F10100 	    add r0,#1 
  82 08ee 84F86F00 	    strb r0,[UP,#KBD_ONES]
  83 08f2 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  84 08f6 01F10101 	    add r1,#1 
  85 08fa 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  86 08fe 31E0     	    b 9f         
  87              	start_bit:
  88 0900 01F10101 	    add r1,#1 
  89 0904 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  90 0908 81EA0101 	    eor r1,r1 
  91 090c 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  92 0910 84F86F10 	    strb r1,[UP,#KBD_ONES]
  93 0914 26E0     	    b 9f 
  94              	parity_bit:
  95 0916 D4F86F10 	    ldr r1,[UP,#KBD_ONES]
  96 091a 10F4805F 	    tst r0,#(1<<12)
  97 091e 01D0     	    beq 1f 
  98 0920 01F10101 	    add r1,#1 
  99 0924 11F0010F 	1:  tst r1,#1 
ARM GAS  forth.s 			page 35


 100 0928 1CD1     	    bne 9f      
 101              	2: // parity error
 102 092a 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 103 092e 41F00101 	    orr r1,#KBD_F_PAR_ERR // parity error flags 
 104 0932 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 105 0936 15E0     	    b 9f      
 106              	stop_bit:
 107 0938 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 108 093c 11F0010F 	    tst r1,#KBD_F_PAR_ERR 
 109 0940 10D1     	    bne 9f // drop this code 
 110              	// store code in queue 
 111 0942 D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 112 0946 04F17002 	    add r2,UP,#KBD_QUEUE
 113 094a 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 114 094e 5054     	    strb r0,[r2,r1]
 115 0950 01F10101 	    add r1,#1
 116 0954 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 117 0958 84F88410 	    strb r1,[UP,#KBD_QTAIL]
 118 095c 80EA0000 	    eor r0,r0 
 119 0960 A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 120 0964 7047     	9:  _RET 
 121              	    
 122              	/**********************************
 123              	    kbd_init 
 124              	    initialize keyboard 
 125              	    PS2 clock on PA11 
 126              	    PS2 data on PA12 
 127              	**********************************/
 128 0966 00BF     	    _GBL_FUNC kbd_init 
 129              	// configure EXTI0 on pin PA11 
 130 0968 4FF46052 	   _MOV32 r2,SYSCFG_BASE_ADR
 130      C4F20102 
 131 0970 4FF00B00 	   mov r0,#11 
 132 0974 9060     	   str r0,[R2,#SYSCFG_EXTICR1]
 133              	// interrupt triggered on falling edge 
 134 0976 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 134      C4F20102 
 135 097e 4FF00100 	   mov r0,#(1<<0)
 136 0982 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI0 
 137 0984 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 138              	// enable interrupt EXIT0 in NVIC 
 139 0986 4FF04000 	   mov r0,#(1<<6) // IRQ6
 140 098a 4FF46042 	   _MOV32 r2,NVIC_BASE_ADR
 140      CEF20002 
 141 0992 D2F80011 	   ldr r1,[r2,#NVIC_ISER0]
 142 0996 41EA0001 	   orr r1,r0 
 143 099a C2F80011 	   str r1,[r2,#NVIC_ISER0]
 144 099e 7047     	   _RET 
 145              	
 146              	
 147              	
 148              	
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
ARM GAS  forth.s 			page 36


   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
ARM GAS  forth.s 			page 37


  63              	
  64              		.include "stm32f411ce.inc"
  65              		
  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 09a0 47F8046D 		_PUSH
  77 09a4 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 09a6 57F8046B 		_POP 
  82 09aa 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 09ac 48F804CD 		STMFD	RSP!,{IP}
  87 09b0 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 09b4 5CF8045B 		LDR WP,[IP],#4 
  91 09b8 2847     		BX WP  
  92              	UNNEST:
  93 09ba 58F804CB 		LDMFD RSP!,{IP}
  94 09be 5CF8045B 		LDR WP,[IP],#4 
  95 09c2 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 09c4 04F13C01 		add T1,UP,#USER_CTOP 
 107 09c8 0968     		ldr T1,[T1]
 108 09ca 44F25072 		mov T2,#0x4700+(10<<3)
 109 09ce 21F8022B 		strh T2,[T1],#2
 110 09d2 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 09d6 21F8022B 		strh T2,[T1],#2 
 112 09da 04F13C02 		add T2,UP,#USER_CTOP 
 113 09de 1160     		str T1,[T2]
 114 09e0 E8E7     		_NEXT  
 115              	
 116              	
 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
ARM GAS  forth.s 			page 38


 120              	
 121 09e2 10080000 		.word LINK 
 122 09e6 06       	_RAND: .byte 6
 123 09e7 52414E44 		.ascii "RANDOM"
 123      4F4D
 124 09ed 0000BF   		.p2align 2 
 125              	RAND:
 126 09f0 504700BF 		_NEST
 127 09f4 BD0E0000 		_ADR ABSS   
 128 09f8 FD0F0000 		_ADR SEED 
 129 09fc AD0B0000 		_ADR AT 
 130 0a00 590C0000 		_ADR DUPP 
 131 0a04 250B0000 		_DOLIT 13
 131      0D000000 
 132 0a0c 0D0D0000 		_ADR LSHIFT 
 133 0a10 C50C0000 		_ADR XORR  
 134 0a14 590C0000 		_ADR DUPP 
 135 0a18 250B0000 		_DOLIT 17 
 135      11000000 
 136 0a20 F50C0000 		_ADR RSHIFT 
 137 0a24 C50C0000 		_ADR XORR 
 138 0a28 590C0000 		_ADR DUPP
 139 0a2c 250B0000 		_DOLIT 5 
 139      05000000 
 140 0a34 0D0D0000 		_ADR LSHIFT 
 141 0a38 C50C0000 		_ADR XORR  
 142 0a3c 590C0000 		_ADR DUPP 
 143 0a40 FD0F0000 		_ADR SEED 
 144 0a44 990B0000 		_ADR STORE 
 145 0a48 250B0000 		_DOLIT 0x7FFFFFFF
 145      FFFFFF7F 
 146 0a50 9D0C0000 		_ADR ANDD 
 147 0a54 690C0000 		_ADR SWAP 
 148 0a58 61120000 		_ADR MODD 
 149 0a5c BB090000 		_UNNEST 
 150              	
 151              	
 152              	// PAUSE ( u -- ) 
 153              	// suspend execution for u milliseconds
 154 0a60 E6090000 		.word _RAND
 155 0a64 05       	_PAUSE: .byte 5
 156 0a65 50415553 		.ascii "PAUSE"
 156      45
 157 0a6a 00BF     		.p2align 2
 158              	PAUSE:
 159 0a6c 504700BF 		_NEST 
 160 0a70 25100000 		_ADR TIMER 
 161 0a74 990B0000 		_ADR STORE 
 162              	PAUSE_LOOP:
 163 0a78 25100000 		_ADR TIMER 
 164 0a7c AD0B0000 		_ADR AT 
 165 0a80 670B0000 		_QBRAN PAUSE_EXIT 
 165      900A0000 
 166 0a88 7B0B0000 		_BRAN PAUSE_LOOP 
 166      780A0000 
 167              	PAUSE_EXIT: 		
 168 0a90 BB090000 		_UNNEST 
ARM GAS  forth.s 			page 39


 169              	
 170              	//  ULED ( T|F -- )
 171              	// control user LED, -1 ON, 0 OFF  
 172 0a94 640A0000 		.word _PAUSE
 173 0a98 04       	_ULED: .byte 4
 174 0a99 554C4544 		.ascii "ULED"
 175 0a9d 0000BF   		.p2align 2
 176              		.type ULED, %function 
 177              	ULED:
 178 0aa0 4FF40050 		mov T0,#(1<<LED_PIN)
 179 0aa4 4FF40061 		_MOV32 T1,LED_GPIO 
 179      C4F20201 
 180 0aac 3600     		movs TOS,TOS 
 181 0aae 57F8046B 		_POP
 182 0ab2 03D0     		beq ULED_OFF
 183 0ab4 4FEA0040 		lsl T0,#16 
 184 0ab8 8861     		str T0,[T1,#GPIO_BSRR]
 185 0aba 7BE7     		_NEXT 
 186              	ULED_OFF:
 187 0abc 8861     		str T0,[T1,#GPIO_BSRR]
 188 0abe 79E7     		_NEXT    
 189              	
 190              	//    ?KEY	 ( -- c T | F )
 191              	// 	Return input character and true, or a false if no input.
 192 0ac0 980A0000 		.word	_ULED
 193 0ac4 04       	_QRX:	.byte   4
 194 0ac5 3F4B4559 		.ascii "?KEY"
 195 0ac9 0000BF   		.p2align 2 
 196              	QKEY:
 197              	QRX: 
 198 0acc 47F8046D 		_PUSH
 199 0ad0 A06D     		ldr T0,[UP,#RX_TAIL] 
 200 0ad2 616D     		ldr T1,[UP,#RX_HEAD]
 201 0ad4 90EA0106 		eors TOS,T0,T1 
 202 0ad8 0CD0     		beq 1f
 203 0ada 04F14400 		add T0,UP,#RX_QUEUE 
 204 0ade 0844     		add T0,T1 
 205 0ae0 0678     		ldrb TOS,[T0]
 206 0ae2 01F10101 		add T1,#1 
 207 0ae6 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 208 0aea 6165     		str T1,[UP,#RX_HEAD]
 209 0aec 47F8046D 		_PUSH 
 210 0af0 4FF0FF36 		mov TOS,#-1
 211 0af4 5EE7     	1:	_NEXT 
 212              	
 213              	//    TX!	 ( c -- )
 214              	// 	Send character c to the output device.
 215              	
 216 0af6 C40A0000 		.word	_QRX
 217 0afa 04       	_TXSTO:	.byte 4
 218 0afb 454D4954 		.ascii "EMIT"
 219 0aff 00       		.p2align 2 	
 220              	TXSTO:
 221              	EMIT:
 222              	TECHO:
 223 0b00 4FF48055 		_MOV32 WP,UART 
 223      C4F20105 
ARM GAS  forth.s 			page 40


 224 0b08 2868     	1:  ldr T0,[WP,#USART_SR]
 225 0b0a 10F0800F 	    tst T0,#0x80 // TXE flag 
 226 0b0e FBD0     		beq 1b 
 227 0b10 2E71     		strb TOS,[WP,#USART_DR]	 
 228 0b12 57F8046B 		_POP
 229 0b16 4DE7     		_NEXT 
 230              		
 231              	/***************
 232              	//  The kernel
 233              	***************/
 234              	
 235              	//    NOP	( -- )
 236              	// 	do nothing.
 237              	
 238 0b18 FA0A0000 		.word	_TXSTO
 239 0b1c 03       	_NOP:	.byte   3
 240 0b1d 4E4F50   		.ascii "NOP"
 241              		.p2align 2 	
 242              	NOP:
 243 0b20 48E7     		_NEXT 
 244              	 
 245              	
 246              	//    doLIT	( -- w )
 247              	// 	Push an inline literal.
 248              	
 249              	// 	.word	_NOP
 250              	// _LIT	.byte   COMPO+5
 251              	// 	.ascii "doLIT"
 252 0b22 00BF     	 	.p2align 2 	
 253              	DOLIT:
 254 0b24 47F8046D 		_PUSH				//  store TOS on data stack
 255 0b28 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 256 0b2c 42E7     		_NEXT 
 257              	
 258              	//    EXECUTE	( ca -- )
 259              	// 	Execute the word at ca.
 260              	
 261 0b2e 1C0B0000 		.word	_NOP
 262 0b32 07       	_EXECU:	.byte   7
 263 0b33 45584543 		.ascii "EXECUTE"
 263      555445
 264 0b3a 00BF     		.p2align 2 	
 265              	EXECU: 
 266 0b3c 46F00105 		ORR	WP,TOS,#1 
 267 0b40 57F8046B 		_POP
 268 0b44 2847     		BX WP 
 269 0b46 35E7     		_NEXT 
 270              	
 271              	//    next	( -- ) counter on R:
 272              	// 	Run time code for the single index loop.
 273              	// 	: next ( -- ) \ hilevel model
 274              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 275              	
 276              	// 	.word	_EXECU
 277              	// _DONXT	.byte   COMPO+4
 278              	// 	.ascii "next"
 279              	// 	.p2align 2 	
ARM GAS  forth.s 			page 41


 280              	DONXT:
 281 0b48 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 282 0b4c 22B9     		CBNZ T2,NEXT1 
 283              		/* loop done */
 284 0b4e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 285 0b52 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 286 0b56 2DE7     		_NEXT
 287              	NEXT1:
 288              		/* decrement loop counter */
 289 0b58 A2F10102 		SUB	T2,T2,#1
 290 0b5c C8F80020 		STR	T2,[RSP]
 291 0b60 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 292 0b64 26E7     		_NEXT 
 293              	
 294              	//    ?branch	( f -- )
 295              	// 	Branch if flag is zero.
 296              	
 297              	// 	.word	_DONXT
 298              	// _QBRAN	.byte   COMPO+7
 299              	// 	.ascii "?branch"
 300              	// 	.p2align 2 	
 301              	QBRAN:
 302 0b66 3600     		MOVS	TOS,TOS
 303 0b68 57F8046B 		_POP
 304 0b6c 02D1     		BNE	QBRAN1
 305 0b6e DCF800C0 		LDR	IP,[IP]
 306 0b72 1FE7     		_NEXT
 307              	QBRAN1:
 308 0b74 0CF1040C 	 	ADD	IP,IP,#4
 309 0b78 1CE7     		_NEXT
 310              	
 311              	//    branch	( -- )
 312              	// 	Branch to an inline address.
 313              	
 314              	// 	.word	_QBRAN
 315              	// _BRAN	.byte   COMPO+6
 316              	// 	.ascii "branch"
 317              	// 	.p2align 2 	
 318              	BRAN:
 319 0b7a DCF800C0 		LDR	IP,[IP]
 320 0b7e 19E7     		_NEXT
 321              	
 322              	//    EXIT	(  -- )
 323              	// 	Exit the currently executing command.
 324              	
 325 0b80 320B0000 		.word	_EXECU
 326 0b84 04       	_EXIT:	.byte   4
 327 0b85 45584954 		.ascii "EXIT"
 328 0b89 0000BF   		.p2align 2 	
 329              	EXIT:
 330 0b8c BB090000 		_UNNEST
 331              	
 332              	//    !	   ( w a -- )
 333              	// 	Pop the data stack to memory.
 334              	
 335 0b90 840B0000 		.word	_EXIT
 336 0b94 01       	_STORE:	.byte   1
ARM GAS  forth.s 			page 42


 337 0b95 21       		.ascii "!"
 338 0b96 00BF     		.p2align 2 	
 339              	STORE:
 340 0b98 57F8045B 		LDR	WP,[DSP],#4
 341 0b9c 3560     		STR	WP,[TOS]
 342 0b9e 57F8046B 		_POP
 343 0ba2 07E7     		_NEXT 
 344              	
 345              	//    @	   ( a -- w )
 346              	// 	Push memory location to the data stack.
 347              	
 348 0ba4 940B0000 		.word	_STORE
 349 0ba8 01       	_AT:	.byte   1
 350 0ba9 40       		.ascii "@"
 351 0baa 00BF     		.p2align 2 	
 352              	AT:
 353 0bac 3668     		LDR	TOS,[TOS]
 354 0bae 01E7     		_NEXT 
 355              	
 356              	//    C!	  ( c b -- )
 357              	// 	Pop the data stack to byte memory.
 358              	
 359 0bb0 A80B0000 		.word	_AT
 360 0bb4 02       	_CSTOR:	.byte   2
 361 0bb5 4321     		.ascii "C!"
 362 0bb7 00       		.p2align 2 	
 363              	CSTOR:
 364 0bb8 57F8045B 		LDR	WP,[DSP],#4
 365 0bbc 3570     		STRB WP,[TOS]
 366 0bbe 57F8046B 		_POP
 367 0bc2 F7E6     		_NEXT
 368              	
 369              	//    C@	  ( b -- c )
 370              	// 	Push byte memory location to the data stack.
 371              	
 372 0bc4 B40B0000 		.word	_CSTOR
 373 0bc8 02       	_CAT:	.byte   2
 374 0bc9 4340     		.ascii "C@"
 375 0bcb 00       		.p2align 2 	
 376              	CAT:
 377 0bcc 3678     		LDRB	TOS,[TOS]
 378 0bce F1E6     		_NEXT 
 379              	
 380              	//    R>	  ( -- w )
 381              	// 	Pop the return stack to the data stack.
 382              	
 383 0bd0 C80B0000 		.word	_CAT
 384 0bd4 02       	_RFROM:	.byte   2
 385 0bd5 523E     		.ascii "R>"
 386 0bd7 00       		.p2align 2 	
 387              	RFROM:
 388 0bd8 47F8046D 		_PUSH
 389 0bdc 58F8046B 		LDR	TOS,[RSP],#4
 390 0be0 E8E6     		_NEXT 
 391              	
 392              	//    R@	  ( -- w )
 393              	// 	Copy top of return stack to the data stack.
ARM GAS  forth.s 			page 43


 394              	
 395 0be2 D40B0000 		.word	_RFROM
 396 0be6 02       	_RAT:	.byte   2
 397 0be7 5240     		.ascii "R@"
 398 0be9 0000BF   		.p2align 2 	
 399              	RAT:
 400 0bec 47F8046D 		_PUSH
 401 0bf0 D8F80060 		LDR	TOS,[RSP]
 402 0bf4 DEE6     		_NEXT 
 403              	
 404              	//    >R	  ( w -- )
 405              	// 	Push the data stack to the return stack.
 406              	
 407 0bf6 E60B0000 		.word	_RAT
 408 0bfa 42       	_TOR:	.byte   COMPO+2
 409 0bfb 3E52     		.ascii ">R"
 410 0bfd 0000BF   		.p2align 2 	
 411              	TOR:
 412 0c00 48F8046D 		STR	TOS,[RSP,#-4]!
 413 0c04 57F8046B 		_POP
 414 0c08 D4E6     		_NEXT
 415              	
 416              	//	RP! ( u -- )
 417              	// initialize RPP with u 
 418 0c0a FA0B0000 		.word _TOR 
 419 0c0e 03       	_RPSTOR: .byte 3 
 420 0c0f 525021   		.ascii "RP!" 
 421 0c12 00BF     		.p2align 2 
 422              	RPSTOR:
 423 0c14 B046     		MOV RSP,TOS 
 424 0c16 57F8046B 		_POP  
 425 0c1a CBE6     		_NEXT 
 426              	
 427              	
 428              	//	SP! ( u -- )
 429              	// initialize SPP with u 
 430 0c1c 0E0C0000 		.word _RPSTOR  
 431 0c20 03       	_SPSTOR: .byte 3 
 432 0c21 535021   		.ascii "SP!" 
 433              		.p2align 2 
 434              	SPSTOR:
 435 0c24 3746     		MOV DSP,TOS 
 436 0c26 86EA0606 		EOR TOS,TOS,TOS 
 437 0c2a C3E6     		_NEXT 
 438              	
 439              	//    SP@	 ( -- a )
 440              	// 	Push the current data stack pointer.
 441              	
 442 0c2c 200C0000 		.word	_SPSTOR
 443 0c30 03       	_SPAT:	.byte   3
 444 0c31 535040   		.ascii "SP@"
 445              		.p2align 2 	
 446              	SPAT:
 447 0c34 47F8046D 		_PUSH
 448 0c38 3E46     		MOV	TOS,DSP
 449 0c3a BBE6     		_NEXT
 450              	
ARM GAS  forth.s 			page 44


 451              	//    DROP	( w -- )
 452              	// 	Discard top stack item.
 453              	
 454 0c3c 300C0000 		.word	_SPAT
 455 0c40 04       	_DROP:	.byte   4
 456 0c41 44524F50 		.ascii "DROP"
 457 0c45 0000BF   		.p2align 2 	
 458              	DROP:
 459 0c48 57F8046B 		_POP
 460 0c4c B2E6     		_NEXT 
 461              	
 462              	//    DUP	 ( w -- w w )
 463              	// 	Duplicate the top stack item.
 464              	
 465 0c4e 400C0000 		.word	_DROP
 466 0c52 03       	_DUPP:	.byte   3
 467 0c53 445550   		.ascii "DUP"
 468 0c56 00BF     		.p2align 2 	
 469              	DUPP:
 470 0c58 47F8046D 		_PUSH
 471 0c5c AAE6     		_NEXT 
 472              	
 473              	//    SWAP	( w1 w2 -- w2 w1 )
 474              	// 	Exchange top two stack items.
 475              	
 476 0c5e 520C0000 		.word	_DUPP
 477 0c62 04       	_SWAP:	.byte   4
 478 0c63 53574150 		.ascii "SWAP"
 479 0c67 00       		.p2align 2 	
 480              	SWAP:
 481 0c68 3D68     		LDR	WP,[DSP]
 482 0c6a 3E60     		STR	TOS,[DSP]
 483 0c6c 2E46     		MOV	TOS,WP
 484 0c6e A1E6     		_NEXT 
 485              	
 486              	//    OVER	( w1 w2 -- w1 w2 w1 )
 487              	// 	Copy second stack item to top.
 488              	
 489 0c70 620C0000 		.word	_SWAP
 490 0c74 04       	_OVER:	.byte   4
 491 0c75 4F564552 		.ascii "OVER"
 492 0c79 0000BF   		.p2align 2 	
 493              	OVER:
 494 0c7c 47F8046D 		_PUSH
 495 0c80 7E68     		LDR	TOS,[DSP,#4]
 496 0c82 97E6     		_NEXT 
 497              	
 498              	//    0<	  ( n -- t )
 499              	// 	Return true if n is negative.
 500              	
 501 0c84 740C0000 		.word	_OVER
 502 0c88 02       	_ZLESS:	.byte   2
 503 0c89 303C     		.ascii "0<"
 504 0c8b 00       		.p2align 2 	
 505              	ZLESS:
 506              	//	MOV	WP,#0
 507              	//	ADD	TOS,WP,TOS,ASR #32
ARM GAS  forth.s 			page 45


 508 0c8c 4FEAE676 		ASR TOS,#31
 509 0c90 90E6     		_NEXT 
 510              	
 511              	//    AND	 ( w w -- w )
 512              	// 	Bitwise AND.
 513              	
 514 0c92 880C0000 		.word	_ZLESS
 515 0c96 03       	_ANDD:	.byte   3
 516 0c97 414E44   		.ascii "AND"
 517 0c9a 00BF     		.p2align 2 	
 518              	ANDD:
 519 0c9c 57F8045B 		LDR	WP,[DSP],#4
 520 0ca0 06EA0506 		AND	TOS,TOS,WP
 521 0ca4 86E6     		_NEXT 
 522              	
 523              	//    OR	  ( w w -- w )
 524              	// 	Bitwise inclusive OR.
 525              	
 526 0ca6 960C0000 		.word	_ANDD
 527 0caa 02       	_ORR:	.byte   2
 528 0cab 4F52     		.ascii "OR"
 529 0cad 0000BF   		.p2align 2 	
 530              	ORR:
 531 0cb0 57F8045B 		LDR	WP,[DSP],#4
 532 0cb4 46EA0506 		ORR	TOS,TOS,WP
 533 0cb8 7CE6     		_NEXT 
 534              	
 535              	//    XOR	 ( w w -- w )
 536              	// 	Bitwise exclusive OR.
 537              	
 538 0cba AA0C0000 		.word	_ORR
 539 0cbe 03       	_XORR:	.byte   3
 540 0cbf 584F52   		.ascii "XOR"
 541 0cc2 00BF     		.p2align 2 	
 542              	XORR:
 543 0cc4 57F8045B 		LDR	WP,[DSP],#4
 544 0cc8 86EA0506 		EOR	TOS,TOS,WP
 545 0ccc 72E6     		_NEXT 
 546              	
 547              	//    UM+	 ( w w -- w cy )
 548              	// 	Add two numbers, return the sum and carry flag.
 549              	
 550 0cce BE0C0000 		.word	_XORR
 551 0cd2 03       	_UPLUS:	.byte   3
 552 0cd3 554D2B   		.ascii "UM+"
 553 0cd6 00BF     		.p2align 2 	
 554              	UPLUS:
 555 0cd8 3D68     		LDR	WP,[DSP]
 556 0cda AD19     		ADDS	WP,WP,TOS
 557 0cdc 4FF00006 		MOV	TOS,#0
 558 0ce0 46F10006 		ADC	TOS,TOS,#0
 559 0ce4 3D60     		STR	WP,[DSP]
 560 0ce6 65E6     		_NEXT 
 561              	
 562              	//    RSHIFT	 ( w # -- w )
 563              	// 	arithmetic Right shift # bits.
 564              	
ARM GAS  forth.s 			page 46


 565 0ce8 D20C0000 		.word	_UPLUS
 566 0cec 06       	_RSHIFT:	.byte   6
 567 0ced 52534849 		.ascii "RSHIFT"
 567      4654
 568 0cf3 00       		.p2align 2 	
 569              	RSHIFT:
 570 0cf4 57F8045B 		LDR	WP,[DSP],#4
 571 0cf8 45FA06F6 		MOV	TOS,WP,ASR TOS
 572 0cfc 5AE6     		_NEXT 
 573              	
 574              	//    LSHIFT	 ( w # -- w )
 575              	// 	Right shift # bits.
 576              	
 577 0cfe EC0C0000 		.word	_RSHIFT
 578 0d02 06       	_LSHIFT:	.byte   6
 579 0d03 4C534849 		.ascii "LSHIFT"
 579      4654
 580 0d09 0000BF   		.p2align 2 	
 581              	LSHIFT:
 582 0d0c 57F8045B 		LDR	WP,[DSP],#4
 583 0d10 05FA06F6 		MOV	TOS,WP,LSL TOS
 584 0d14 4EE6     		_NEXT
 585              	
 586              	//    +	 ( w w -- w )
 587              	// 	Add.
 588              	
 589 0d16 020D0000 		.word	_LSHIFT
 590 0d1a 01       	_PLUS:	.byte   1
 591 0d1b 2B       		.ascii "+"
 592              		.p2align 2 	
 593              	PLUS:
 594 0d1c 57F8045B 		LDR	WP,[DSP],#4
 595 0d20 2E44     		ADD	TOS,TOS,WP
 596 0d22 47E6     		_NEXT 
 597              	
 598              	//    -	 ( w w -- w )
 599              	// 	Subtract.
 600              	
 601 0d24 1A0D0000 		.word	_PLUS
 602 0d28 01       	_SUBB:	.byte   1
 603 0d29 2D       		.ascii "-"
 604 0d2a 00BF     		.p2align 2 	
 605              	SUBB:
 606 0d2c 57F8045B 		LDR	WP,[DSP],#4
 607 0d30 C6EB0506 		RSB	TOS,TOS,WP
 608 0d34 3EE6     		_NEXT 
 609              	
 610              	//    *	 ( w w -- w )
 611              	// 	Multiply.
 612              	
 613 0d36 280D0000 		.word	_SUBB
 614 0d3a 01       	_STAR:	.byte   1
 615 0d3b 2A       		.ascii "*"
 616              		.p2align 2 	
 617              	STAR:
 618 0d3c 57F8045B 		LDR	WP,[DSP],#4
 619 0d40 05FB06F6 		MUL	TOS,WP,TOS
ARM GAS  forth.s 			page 47


 620 0d44 36E6     		_NEXT 
 621              	
 622              	//    UM*	 ( w w -- ud )
 623              	// 	Unsigned multiply.
 624              	
 625 0d46 3A0D0000 		.word	_STAR
 626 0d4a 03       	_UMSTA:	.byte   3
 627 0d4b 554D2A   		.ascii "UM*"
 628 0d4e 00BF     		.p2align 2 	
 629              	UMSTA:
 630 0d50 3D68     		LDR	WP,[DSP]
 631 0d52 A6FB0523 		UMULL	T2,T3,TOS,WP
 632 0d56 3A60     		STR	T2,[DSP]
 633 0d58 1E46     		MOV	TOS,T3
 634 0d5a 2BE6     		_NEXT 
 635              	
 636              	//    M*	 ( w w -- d )
 637              	// 	signed multiply.
 638              	
 639 0d5c 4A0D0000 		.word	_UMSTA
 640 0d60 02       	_MSTAR:	.byte   2
 641 0d61 4D2A     		.ascii "M*"
 642 0d63 00       		.p2align 2 	
 643              	MSTAR:
 644 0d64 3D68     		LDR	WP,[DSP]
 645 0d66 86FB0523 		SMULL	T2,T3,TOS,WP
 646 0d6a 3A60     		STR	T2,[DSP]
 647 0d6c 1E46     		MOV	TOS,T3
 648 0d6e 21E6     		_NEXT 
 649              	
 650              	//    1+	 ( w -- w+1 )
 651              	// 	Add 1.
 652              	
 653 0d70 600D0000 		.word	_MSTAR
 654 0d74 02       	_ONEP:	.byte   2
 655 0d75 312B     		.ascii "1+"
 656 0d77 00       		.p2align 2 	
 657              	ONEP:
 658 0d78 06F10106 		ADD	TOS,TOS,#1
 659 0d7c 1AE6     		_NEXT 
 660              	
 661              	//    1-	 ( w -- w-1 )
 662              	// 	Subtract 1.
 663              	
 664 0d7e 740D0000 		.word	_ONEP
 665 0d82 02       	_ONEM:	.byte   2
 666 0d83 312D     		.ascii "1-"
 667 0d85 0000BF   		.p2align 2 	
 668              	ONEM:
 669 0d88 A6F10106 		SUB	TOS,TOS,#1
 670 0d8c 12E6     		_NEXT 
 671              	
 672              	//    2+	 ( w -- w+2 )
 673              	// 	Add 1.
 674              	
 675 0d8e 820D0000 		.word	_ONEM
 676 0d92 02       	_TWOP:	.byte   2
ARM GAS  forth.s 			page 48


 677 0d93 322B     		.ascii "2+"
 678 0d95 0000BF   		.p2align 2 	
 679              	TWOP:
 680 0d98 06F10206 		ADD	TOS,TOS,#2
 681 0d9c 0AE6     		_NEXT
 682              	
 683              	//    2-	 ( w -- w-2 )
 684              	// 	Subtract 2.
 685              	
 686 0d9e 920D0000 		.word	_TWOP
 687 0da2 02       	_TWOM:	.byte   2
 688 0da3 322D     		.ascii "2-"
 689 0da5 0000BF   		.p2align 2 	
 690              	TWOM:
 691 0da8 A6F10206 		SUB	TOS,TOS,#2
 692 0dac 02E6     		_NEXT
 693              	
 694              	//    CELL+	( w -- w+4 )
 695              	// 	Add CELLL.
 696              	
 697 0dae A20D0000 		.word	_TWOM
 698 0db2 05       	_CELLP:	.byte   5
 699 0db3 43454C4C 		.ascii "CELL+"
 699      2B
 700              		.p2align 2 	
 701              	CELLP:
 702 0db8 06F10406 		ADD	TOS,TOS,#CELLL
 703 0dbc FAE5     		_NEXT
 704              	
 705              	//    CELL-	( w -- w-4 )
 706              	// 	Subtract CELLL.
 707              	
 708 0dbe B20D0000 		.word	_CELLP
 709 0dc2 05       	_CELLM:	.byte   5
 710 0dc3 43454C4C 		.ascii "CELL-"
 710      2D
 711              		.p2align 2 	
 712              	CELLM:
 713 0dc8 A6F10406 		SUB	TOS,TOS,#CELLL
 714 0dcc F2E5     		_NEXT
 715              	 
 716              	//    BL	( -- 32 )
 717              	// 	Blank (ASCII space).
 718              	
 719 0dce C20D0000 		.word	_CELLM
 720 0dd2 02       	_BLANK:	.byte   2
 721 0dd3 424C     		.ascii "BL"
 722 0dd5 0000BF   		.p2align 2 	
 723              	BLANK:
 724 0dd8 47F8046D 		_PUSH
 725 0ddc 4FF02006 		MOV	TOS,#32
 726 0de0 E8E5     		_NEXT 
 727              	
 728              	//    CELLS	( w -- w*4 )
 729              	// 	Multiply 4.
 730              	
 731 0de2 D20D0000 		.word	_BLANK
ARM GAS  forth.s 			page 49


 732 0de6 05       	_CELLS:	.byte   5
 733 0de7 43454C4C 		.ascii "CELLS"
 733      53
 734              		.p2align 2 	
 735              	CELLS:
 736 0dec 4FEA8606 		MOV	TOS,TOS,LSL#2
 737 0df0 E0E5     		_NEXT
 738              	
 739              	//    CELL/	( w -- w/4 )
 740              	// 	Divide by 4.
 741              	
 742 0df2 E60D0000 		.word	_CELLS
 743 0df6 05       	_CELLSL:	.byte   5
 744 0df7 43454C4C 		.ascii "CELL/"
 744      2F
 745              		.p2align 2 	
 746              	CELLSL:
 747 0dfc 4FEAA606 		MOV	TOS,TOS,ASR#2
 748 0e00 D8E5     		_NEXT
 749              	
 750              	//    2*	( w -- w*2 )
 751              	// 	Multiply 2.
 752              	
 753 0e02 F60D0000 		.word	_CELLSL
 754 0e06 02       	_TWOST:	.byte   2
 755 0e07 322A     		.ascii "2*"
 756 0e09 0000BF   		.p2align 2 	
 757              	TWOST:
 758 0e0c 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 0e10 D0E5     		_NEXT
 760              	
 761              	//    2/	( w -- w/2 )
 762              	// 	Divide by 2.
 763              	
 764 0e12 060E0000 		.word	_TWOST
 765 0e16 02       	_TWOSL:	.byte   2
 766 0e17 322F     		.ascii "2/"
 767 0e19 0000BF   		.p2align 2 	
 768              	TWOSL:
 769 0e1c 4FEA6606 		MOV	TOS,TOS,ASR#1
 770 0e20 C8E5     		_NEXT
 771              	
 772              	//    ?DUP	( w -- w w | 0 )
 773              	// 	Conditional duplicate.
 774              	
 775 0e22 160E0000 		.word	_TWOSL
 776 0e26 04       	_QDUP:	.byte   4
 777 0e27 3F445550 		.ascii "?DUP"
 778 0e2b 00       		.p2align 2 	
 779              	QDUP:
 780 0e2c 3500     		MOVS	WP,TOS
 781 0e2e 18BF     		IT NE 
 782 0e30 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 783 0e34 BEE5     		_NEXT
 784              	
 785              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 786              	// 	Rotate top 3 items.
ARM GAS  forth.s 			page 50


 787              	
 788 0e36 260E0000 		.word	_QDUP
 789 0e3a 03       	_ROT:	.byte   3
 790 0e3b 524F54   		.ascii "ROT"
 791 0e3e 00BF     		.p2align 2 	
 792              	ROT:
 793 0e40 3868     		LDR	T0,[DSP]  // w2 
 794 0e42 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 795 0e44 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 796 0e46 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 797 0e48 B4E5     		_NEXT
 798              	
 799              	//    2DROP	( w1 w2 -- )
 800              	// 	Drop top 2 items.
 801              	
 802 0e4a 3A0E0000 		.word	_ROT
 803 0e4e 05       	_DDROP:	.byte   5
 804 0e4f 3244524F 		.ascii "2DROP"
 804      50
 805              		.p2align 2 	
 806              	DDROP:
 807 0e54 57F8046B 		_POP
 808 0e58 57F8046B 		_POP
 809 0e5c AAE5     		_NEXT 
 810              	
 811              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 812              	// 	Duplicate top 2 items.
 813              	
 814 0e5e 4E0E0000 		.word	_DDROP
 815 0e62 04       	_DDUP:	.byte   4
 816 0e63 32445550 		.ascii "2DUP"
 817 0e67 00       		.p2align 2 	
 818              	DDUP:
 819 0e68 3868     		LDR	T0,[DSP] // w1
 820 0e6a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 821 0e6e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 822 0e72 9FE5     		_NEXT
 823              	
 824              	//    D+	( d1 d2 -- d3 )
 825              	// 	Add top 2 double numbers.
 826              	
 827 0e74 620E0000 		.word	_DDUP
 828 0e78 02       	_DPLUS:	.byte   2
 829 0e79 442B     		.ascii "D+"
 830 0e7b 00       		.p2align 2 	
 831              	DPLUS:
 832 0e7c 57F8045B 		LDR	WP,[DSP],#4
 833 0e80 57F8042B 		LDR	T2,[DSP],#4
 834 0e84 3B68     		LDR	T3,[DSP]
 835 0e86 ED18     		ADDS	WP,WP,T3
 836 0e88 3D60     		STR	WP,[DSP]
 837 0e8a 46EB0206 		ADC	TOS,TOS,T2
 838 0e8e 91E5     		_NEXT
 839              	
 840              	//    NOT	 ( w -- !w )
 841              	// 	1"s complement.
 842              	
ARM GAS  forth.s 			page 51


 843 0e90 780E0000 		.word	_DPLUS
 844 0e94 03       	_INVER:	.byte   3
 845 0e95 4E4F54   		.ascii "NOT"
 846              		.p2align 2 	
 847              	INVER:
 848 0e98 6FEA0606 		MVN	TOS,TOS
 849 0e9c 8AE5     		_NEXT
 850              	
 851              	//    NEGATE	( w -- -w )
 852              	// 	2's complement.
 853              	
 854 0e9e 940E0000 		.word	_INVER
 855 0ea2 06       	_NEGAT:	.byte   6
 856 0ea3 4E454741 		.ascii "NEGATE"
 856      5445
 857 0ea9 0000BF   		.p2align 2 	
 858              	NEGAT:
 859 0eac C6F10006 		RSB	TOS,TOS,#0
 860 0eb0 80E5     		_NEXT
 861              	
 862              	//    ABS	 ( w -- |w| )
 863              	// 	Absolute.
 864              	
 865 0eb2 A20E0000 		.word	_NEGAT
 866 0eb6 03       	_ABSS:	.byte   3
 867 0eb7 414253   		.ascii "ABS"
 868 0eba 00BF     		.p2align 2 	
 869              	ABSS:
 870 0ebc 16F0004F 		TST	TOS,#0x80000000
 871 0ec0 18BF     		IT NE
 872 0ec2 7642     	    RSBNE   TOS,TOS,#0
 873 0ec4 76E5     		_NEXT
 874              	
 875              	//  0= ( w -- f )
 876              	// TOS==0?
 877              	
 878 0ec6 B60E0000 		.word _ABSS
 879 0eca 02       	_ZEQUAL: .byte 2
 880 0ecb 303D     		.ascii "0="
 881 0ecd 0000BF   		.p2align 2
 882              	ZEQUAL:
 883 0ed0 16B9     		cbnz TOS,1f
 884 0ed2 4FF0FF36 		mov TOS,#-1
 885 0ed6 6DE5     		_NEXT 
 886 0ed8 86EA0606 	1:  eor TOS,TOS,TOS  
 887 0edc 6AE5     		_NEXT 	
 888              	
 889              	//    =	 ( w w -- t )
 890              	// 	Equal?
 891              	
 892 0ede CA0E0000 		.word	_ZEQUAL
 893 0ee2 01       	_EQUAL:	.byte   1
 894 0ee3 3D       		.ascii "="
 895              		.p2align 2 	
 896              	EQUAL:
 897 0ee4 57F8045B 		LDR	WP,[DSP],#4
 898 0ee8 AE42     		CMP	TOS,WP
ARM GAS  forth.s 			page 52


 899 0eea 0CBF     		ITE EQ 
 900 0eec 6FF00006 	    MVNEQ	TOS,#0
 901 0ef0 0026     		MOVNE	TOS,#0
 902 0ef2 5FE5     		_NEXT
 903              	
 904              	//    U<	 ( w w -- t )
 905              	// 	Unsigned less?
 906              	
 907 0ef4 E20E0000 		.word	_EQUAL
 908 0ef8 02       	_ULESS:	.byte   2
 909 0ef9 553C     		.ascii "U<"
 910 0efb 00       		.p2align 2 	
 911              	ULESS:
 912 0efc 57F8045B 		LDR	WP,[DSP],#4
 913 0f00 B542     		CMP	WP,TOS
 914 0f02 34BF     		ITE CC 
 915 0f04 6FF00006 		MVNCC	TOS,#0
 916 0f08 0026     		MOVCS	TOS,#0
 917 0f0a 53E5     		_NEXT
 918              	
 919              	//    <	( w w -- t )
 920              	// 	Less?
 921              	
 922 0f0c F80E0000 		.word	_ULESS
 923 0f10 01       	_LESS:	.byte   1
 924 0f11 3C       		.ascii "<"
 925 0f12 00BF     		.p2align 2 	
 926              	LESS:
 927 0f14 57F8045B 		LDR	WP,[DSP],#4
 928 0f18 B542     		CMP	WP,TOS
 929 0f1a B4BF     	    ITE LT
 930 0f1c 6FF00006 		MVNLT	TOS,#0
 931 0f20 0026     		MOVGE	TOS,#0
 932 0f22 47E5     		_NEXT 
 933              	
 934              	//    >	( w w -- t )
 935              	// 	greater?
 936              	
 937 0f24 100F0000 		.word	_LESS
 938 0f28 01       	_GREAT:	.byte   1
 939 0f29 3E       		.ascii ">"
 940 0f2a 00BF     		.p2align 2 	
 941              	GREAT:
 942 0f2c 57F8045B 		LDR	WP,[DSP],#4
 943 0f30 B542     		CMP	WP,TOS
 944 0f32 CCBF     		ITE GT
 945 0f34 6FF00006 	    MVNGT	TOS,#0
 946 0f38 0026     		MOVLE	TOS,#0
 947 0f3a 3BE5     		_NEXT
 948              	
 949              	//    MAX	 ( w w -- max )
 950              	// 	Leave maximum.
 951              	
 952 0f3c 280F0000 		.word	_GREAT
 953 0f40 03       	_MAX:	.byte   3
 954 0f41 4D4158   		.ascii "MAX"
 955              		.p2align 2 	
ARM GAS  forth.s 			page 53


 956              	MAX:
 957 0f44 57F8045B 		LDR	WP,[DSP],#4
 958 0f48 B542     		CMP	WP,TOS
 959 0f4a C8BF     		IT GT 
 960 0f4c 2E46     		MOVGT	TOS,WP
 961 0f4e 31E5     		_NEXT 
 962              	
 963              	//    MIN	 ( w w -- min )
 964              	// 	Leave minimum.
 965              	
 966 0f50 400F0000 		.word	_MAX
 967 0f54 03       	_MIN:	.byte   3
 968 0f55 4D494E   		.ascii "MIN"
 969              		.p2align 2 	
 970              	MIN:
 971 0f58 57F8045B 		LDR	WP,[DSP],#4
 972 0f5c B542     		CMP	WP,TOS
 973 0f5e B8BF     		IT LT
 974 0f60 2E46     		MOVLT	TOS,WP
 975 0f62 27E5     		_NEXT
 976              	
 977              	//    +!	 ( w a -- )
 978              	// 	Add to memory.
 979              	
 980 0f64 540F0000 		.word	_MIN
 981 0f68 02       	_PSTOR:	.byte   2
 982 0f69 2B21     		.ascii "+!"
 983 0f6b 00       		.p2align 2 	
 984              	PSTOR:
 985 0f6c 57F8045B 		LDR	WP,[DSP],#4
 986 0f70 3268     		LDR	T2,[TOS]
 987 0f72 2A44     		ADD	T2,T2,WP
 988 0f74 3260     		STR	T2,[TOS]
 989 0f76 57F8046B 		_POP
 990 0f7a 1BE5     		_NEXT
 991              	
 992              	//    2!	 ( d a -- )
 993              	// 	Store double number.
 994              	
 995 0f7c 680F0000 		.word	_PSTOR
 996 0f80 02       	_DSTOR:	.byte   2
 997 0f81 3221     		.ascii "2!"
 998 0f83 00       		.p2align 2 	
 999              	DSTOR:
 1000 0f84 57F8045B 		LDR	WP,[DSP],#4
 1001 0f88 57F8042B 		LDR	T2,[DSP],#4
 1002 0f8c 46F8045B 		STR	WP,[TOS],#4
 1003 0f90 3260     		STR	T2,[TOS]
 1004 0f92 57F8046B 		_POP
 1005 0f96 0DE5     		_NEXT
 1006              	
 1007              	//    2@	 ( a -- d )
 1008              	// 	Fetch double number.
 1009              	
 1010 0f98 800F0000 		.word	_DSTOR
 1011 0f9c 02       	_DAT:	.byte   2
 1012 0f9d 3240     		.ascii "2@"
ARM GAS  forth.s 			page 54


 1013 0f9f 00       		.p2align 2 	
 1014              	DAT:
 1015 0fa0 7568     		LDR	WP,[TOS,#4]
 1016 0fa2 47F8045D 		STR	WP,[DSP,#-4]!
 1017 0fa6 3668     		LDR	TOS,[TOS]
 1018 0fa8 04E5     		_NEXT
 1019              	
 1020              	//    COUNT	( b -- b+1 c )
 1021              	// 	Fetch length of string.
 1022              	
 1023 0faa 9C0F0000 		.word	_DAT
 1024 0fae 05       	_COUNT:	.byte   5
 1025 0faf 434F554E 		.ascii "COUNT"
 1025      54
 1026              		.p2align 2 	
 1027              	COUNT:
 1028 0fb4 16F8015B 		LDRB	WP,[TOS],#1
 1029 0fb8 47F8046D 		_PUSH
 1030 0fbc 2E46     		MOV	TOS,WP
 1031 0fbe F9E4     		_NEXT
 1032              	
 1033              	//    DNEGATE	( d -- -d )
 1034              	// 	Negate double number.
 1035              	
 1036 0fc0 AE0F0000 		.word	_COUNT
 1037 0fc4 07       	_DNEGA:	.byte   7
 1038 0fc5 444E4547 		.ascii "DNEGATE"
 1038      415445
 1039              		.p2align 2 	
 1040              	DNEGA:
 1041 0fcc 3D68     		LDR	WP,[DSP]
 1042 0fce A2EB0202 		SUB	T2,T2,T2
 1043 0fd2 551B     		SUBS WP,T2,WP
 1044 0fd4 62EB0606 		SBC	TOS,T2,TOS
 1045 0fd8 3D60     		STR	WP,[DSP]
 1046 0fda EBE4     		_NEXT
 1047              	
 1048              	// **************************************************************************
 1049              	//  System and user variables
 1050              	
 1051              	//    doVAR	( -- a )
 1052              	// 	Run time routine for VARIABLE and CREATE.
 1053              	
 1054              	// 	.word	_DNEGA
 1055              	// _DOVAR	.byte  COMPO+5
 1056              	// 	.ascii "doVAR"
 1057              	// 	.p2align 2 	
 1058              	DOVAR:
 1059 0fdc 47F8046D 		_PUSH
 1060 0fe0 6646     		MOV TOS,IP
 1061 0fe2 0CF1040C 		ADD IP,IP,#4 
 1062 0fe6 E8E4     		B UNNEST 
 1063              	
 1064              	//    doCON	( -- a ) 
 1065              	// 	Run time routine for CONSTANT.
 1066              	
 1067              	// 	.word	_DOVAR
ARM GAS  forth.s 			page 55


 1068              	// _DOCON	.byte  COMPO+5
 1069              	// 	.ascii "doCON"
 1070              	// 	.p2align 2 	
 1071              	DOCON:
 1072 0fe8 47F8046D 		_PUSH
 1073 0fec 5CF8046B 		LDR.W TOS,[IP],#4 
 1074 0ff0 E3E4     		B UNNEST 
 1075              	
 1076              	/***********************
 1077              	  system variables 
 1078              	***********************/
 1079              	
 1080              	 // SEED ( -- a)
 1081              	 // return PRNG seed address 
 1082              	
 1083 0ff2 C40F0000 		.word _DNEGA
 1084 0ff6 04       	_SEED: .byte 4
 1085 0ff7 53454544 		.ascii "SEED"
 1086 0ffb 00       		.p2align 2
 1087              	SEED:
 1088 0ffc 47F8046D 		_PUSH 
 1089 1000 04F10406 		ADD TOS,UP,#RNDSEED
 1090 1004 D6E4     		_NEXT 	
 1091              	
 1092              	//  MSEC ( -- a)
 1093              	// return address of milliseconds counter
 1094 1006 F60F0000 	  .word _SEED 
 1095 100a 04       	_MSEC: .byte 4
 1096 100b 4D534543 	  .ascii "MSEC"
 1097 100f 00       	  .p2align 2 
 1098              	MSEC:
 1099 1010 47F8046D 	  _PUSH
 1100 1014 04F10806 	  ADD TOS,UP,#TICKS
 1101 1018 CCE4     	  _NEXT 
 1102              	
 1103              	// TIMER ( -- a )
 1104              	// count down timer 
 1105 101a 0A100000 	  .word _MSEC
 1106 101e 05       	_TIMER:  .byte 5
 1107 101f 54494D45 	  .ascii "TIMER"
 1107      52
 1108              	  .p2align 2 
 1109              	TIMER:
 1110 1024 47F8046D 	  _PUSH 
 1111 1028 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1112 102c C2E4     	  _NEXT
 1113              	
 1114              	//    'BOOT	 ( -- a )
 1115              	// 	Application.
 1116              	
 1117 102e 1E100000 		.word	_TIMER
 1118 1032 05       	_TBOOT:	.byte   5
 1119 1033 27424F4F 		.ascii "'BOOT"
 1119      54
 1120              		.p2align 2 	
 1121              	TBOOT:
 1122 1038 47F8046D 		_PUSH
ARM GAS  forth.s 			page 56


 1123 103c 04F11006 		ADD	TOS,UP,#BOOT 
 1124 1040 B8E4     		_NEXT
 1125              		
 1126              	//    BASE	( -- a )
 1127              	// 	Storage of the radix base for numeric I/O.
 1128              	
 1129 1042 32100000 		.word	_TBOOT
 1130 1046 04       	_BASE:	.byte   4
 1131 1047 42415345 		.ascii "BASE"
 1132 104b 00       		.p2align 2 	
 1133              	BASE:
 1134 104c 47F8046D 		_PUSH
 1135 1050 04F11406 		ADD	TOS,UP,#NBASE
 1136 1054 AEE4     		_NEXT
 1137              	
 1138              	//    tmp	 ( -- a )
 1139              	// 	A temporary storage location used in parse and find.
 1140              	
 1141              	// 	.word	_BASE
 1142              	// _TEMP	.byte   COMPO+3
 1143              	// 	.ascii "tmp"
 1144              	// 	.p2align 2 	
 1145              	TEMP:
 1146 1056 47F8046D 		_PUSH
 1147 105a 04F11806 		ADD	TOS,UP,#TMP
 1148 105e A9E4     		_NEXT
 1149              	
 1150              	//    SPAN	( -- a )
 1151              	// 	Hold character count received by EXPECT.
 1152              	
 1153 1060 46100000 		.word	_BASE
 1154 1064 04       	_SPAN:	.byte   4
 1155 1065 5350414E 		.ascii "SPAN"
 1156 1069 0000BF   		.p2align 2 	
 1157              	SPAN:
 1158 106c 47F8046D 		_PUSH
 1159 1070 04F11C06 		ADD	TOS,UP,#CSPAN
 1160 1074 9EE4     		_NEXT
 1161              	
 1162              	//    >IN	 ( -- a )
 1163              	// 	Hold the character pointer while parsing input stream.
 1164              	
 1165 1076 64100000 		.word	_SPAN
 1166 107a 03       	_INN:	.byte   3
 1167 107b 3E494E   		.ascii ">IN"
 1168 107e 00BF     		.p2align 2 	
 1169              	INN:
 1170 1080 47F8046D 		_PUSH
 1171 1084 04F12006 		ADD	TOS,UP,#TOIN
 1172 1088 94E4     		_NEXT
 1173              	
 1174              	//    #TIB	( -- a )
 1175              	// 	Hold the current count and address of the terminal input buffer.
 1176              	
 1177 108a 7A100000 		.word	_INN
 1178 108e 04       	_NTIB:	.byte   4
 1179 108f 23544942 		.ascii "#TIB"
ARM GAS  forth.s 			page 57


 1180 1093 00       		.p2align 2 	
 1181              	NTIB:
 1182 1094 47F8046D 		_PUSH
 1183 1098 04F12406 		ADD	TOS,UP,#NTIBB
 1184 109c 8AE4     		_NEXT
 1185              	
 1186              	//    'EVAL	( -- a )
 1187              	// 	Execution vector of EVAL.
 1188              	
 1189 109e 8E100000 		.word	_NTIB
 1190 10a2 05       	_TEVAL:	.byte   5
 1191 10a3 27455641 		.ascii "'EVAL"
 1191      4C
 1192              		.p2align 2 	
 1193              	TEVAL:
 1194 10a8 47F8046D 		_PUSH
 1195 10ac 04F12C06 		ADD	TOS,UP,#EVAL
 1196 10b0 80E4     		_NEXT
 1197              	
 1198              	//    HLD	 ( -- a )
 1199              	// 	Hold a pointer in building a numeric output string.
 1200              	
 1201 10b2 A2100000 		.word	_TEVAL
 1202 10b6 03       	_HLD:	.byte   3
 1203 10b7 484C44   		.ascii "HLD"
 1204 10ba 00BF     		.p2align 2 	
 1205              	HLD:
 1206 10bc 47F8046D 		_PUSH
 1207 10c0 04F13006 		ADD	TOS,UP,#HOLD
 1208 10c4 76E4     		_NEXT
 1209              	
 1210              	//    CONTEXT	( -- a )
 1211              	// 	A area to specify vocabulary search order.
 1212              	
 1213 10c6 B6100000 		.word	_HLD
 1214 10ca 07       	_CNTXT:	.byte   7
 1215 10cb 434F4E54 		.ascii "CONTEXT"
 1215      455854
 1216 10d2 00BF     		.p2align 2 	
 1217              	CNTXT:
 1218              	CRRNT:
 1219 10d4 47F8046D 		_PUSH
 1220 10d8 04F13406 		ADD	TOS,UP,#CTXT
 1221 10dc 6AE4     		_NEXT
 1222              	
 1223              	//    CP	( -- a )
 1224              	// 	Point to top name in RAM vocabulary.
 1225              	
 1226 10de CA100000 		.word	_CNTXT
 1227 10e2 02       	_CP:	.byte   2
 1228 10e3 4350     		.ascii "CP"
 1229 10e5 0000BF   		.p2align 2 	
 1230              	CPP:
 1231 10e8 47F8046D 		_PUSH
 1232 10ec 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1233 10f0 60E4     		_NEXT
 1234              	
ARM GAS  forth.s 			page 58


 1235              	//   FCP ( -- a )
 1236              	//  Point ot top of Forth system dictionary
 1237 10f2 E2100000 		.word _CP
 1238 10f6 03       	_FCP: .byte 3            
 1239 10f7 464350   		.ascii "FCP"
 1240 10fa 00BF     		.p2align 2 
 1241              	FCP: 
 1242 10fc 47F8046D 		_PUSH 
 1243 1100 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1244 1104 56E4     		_NEXT 
 1245              	
 1246              	//    LAST	( -- a )
 1247              	// 	Point to the last name in the name dictionary.
 1248              	
 1249 1106 F6100000 		.word	_FCP
 1250 110a 04       	_LAST:	.byte   4
 1251 110b 4C415354 		.ascii "LAST"
 1252 110f 00       		.p2align 2 	
 1253              	LAST:
 1254 1110 47F8046D 		_PUSH
 1255 1114 04F14006 		ADD	TOS,UP,#LASTN
 1256 1118 4CE4     		_NEXT
 1257              	
 1258              	
 1259              	/***********************
 1260              		system constants 
 1261              	***********************/
 1262              	
 1263              	//	USER_BEGIN ( -- a )
 1264              	//  where user area begin in RAM
 1265 111a 0A110000 		.word _LAST
 1266 111e 0A       	_USER_BGN: .byte 10
 1267 111f 55534552 		.ascii "USER_BEGIN"
 1267      5F424547 
 1267      494E
 1268 1129 0000BF   		.p2align 2
 1269              	USER_BEGIN:
 1270 112c 47F8046D 		_PUSH 
 1271 1130 004E     		ldr TOS,USR_BGN_ADR 
 1272 1132 3FE4     		_NEXT 
 1273              	USR_BGN_ADR:
 1274 1134 12050020 	.word  DTOP 
 1275              	
 1276              	//  USER_END ( -- a )
 1277              	//  where user area end in RAM 
 1278 1138 1E110000 		.word _USER_BGN
 1279 113c 08       	_USER_END: .byte 8 
 1280 113d 55534552 		.ascii "USER_END" 
 1280      5F454E44 
 1281 1145 0000BF   		.p2align 2 
 1282              	USER_END:
 1283 1148 47F8046D 		_PUSH 
 1284 114c 004E     		ldr TOS,USER_END_ADR 
 1285 114e 31E4     		_NEXT 
 1286              	USER_END_ADR:
 1287 1150 FC800120 		.word DEND 
 1288              	
ARM GAS  forth.s 			page 59


 1289              	
 1290              	/* *********************
 1291              	  Common functions
 1292              	***********************/
 1293              	
 1294              	//    WITHIN	( u ul uh -- t )
 1295              	// 	Return true if u is within the range of ul and uh.
 1296              	
 1297 1154 3C110000 		.word	_USER_END 
 1298 1158 06       	_WITHI:	.byte   6
 1299 1159 57495448 		.ascii "WITHIN"
 1299      494E
 1300 115f 00       		.p2align 2 	
 1301              	WITHI:
 1302 1160 504700BF 		_NEST
 1303 1164 7D0C0000 		_ADR	OVER
 1304 1168 2D0D0000 		_ADR	SUBB
 1305 116c 010C0000 		_ADR	TOR
 1306 1170 2D0D0000 		_ADR	SUBB
 1307 1174 D90B0000 		_ADR	RFROM
 1308 1178 FD0E0000 		_ADR	ULESS
 1309 117c BB090000 		_UNNEST
 1310              	
 1311              	//  Divide
 1312              	
 1313              	//    UM/MOD	( udl udh u -- ur uq )
 1314              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1315              	
 1316 1180 58110000 		.word	_WITHI
 1317 1184 06       	_UMMOD:	.byte   6
 1318 1185 554D2F4D 		.ascii "UM/MOD"
 1318      4F44
 1319 118b 00       		.p2align 2 	
 1320              	UMMOD:
 1321 118c 4FF00103 		MOV	T3,#1
 1322 1190 57F8045B 		LDR	WP,[DSP],#4
 1323 1194 3A68     		LDR	T2,[DSP]
 1324              	UMMOD0:
 1325 1196 9218     		ADDS	T2,T2,T2
 1326 1198 6D41     		ADCS	WP,WP,WP
 1327 119a 04D3     		BCC	UMMOD1
 1328 119c A5EB0605 		SUB	WP,WP,TOS
 1329 11a0 02F10102 		ADD	T2,T2,#1
 1330 11a4 04E0     		B UMMOD2
 1331              	UMMOD1:
 1332 11a6 AD1B     		SUBS	WP,WP,TOS 
 1333 11a8 28BF     		IT CS 
 1334 11aa 0132     		ADDCS	T2,T2,#1
 1335 11ac 00D2     		BCS	UMMOD2
 1336 11ae 3544     		ADD	WP,WP,TOS
 1337              	UMMOD2:
 1338 11b0 DB18     		ADDS	T3,T3,T3
 1339 11b2 F0D3     		BCC	UMMOD0
 1340 11b4 1646     		MOV	TOS,T2
 1341 11b6 3D60     		STR	WP,[DSP]
 1342 11b8 FFF7FCBB 		_NEXT
 1343              	
ARM GAS  forth.s 			page 60


 1344              	//    M/MOD	( d n -- r q )
 1345              	// 	Signed floored divide of double by single. Return mod and quotient.
 1346              	
 1347 11bc 84110000 		.word	_UMMOD
 1348 11c0 05       	_MSMOD:	.byte  5
 1349 11c1 4D2F4D4F 		.ascii "M/MOD"
 1349      44
 1350 11c6 00BF     		.p2align 2 	
 1351              	MSMOD:	
 1352 11c8 504700BF 		_NEST
 1353 11cc 590C0000 		_ADR	DUPP
 1354 11d0 8D0C0000 		_ADR	ZLESS
 1355 11d4 590C0000 		_ADR	DUPP
 1356 11d8 010C0000 		_ADR	TOR
 1357 11dc 670B0000 		_QBRAN MMOD1
 1357      F4110000 
 1358 11e4 AD0E0000 		_ADR	NEGAT
 1359 11e8 010C0000 		_ADR	TOR
 1360 11ec CD0F0000 		_ADR	DNEGA
 1361 11f0 D90B0000 		_ADR	RFROM
 1362              	MMOD1:
 1363 11f4 010C0000 		_ADR	TOR
 1364 11f8 590C0000 		_ADR	DUPP
 1365 11fc 8D0C0000 		_ADR	ZLESS
 1366 1200 670B0000 		_QBRAN MMOD2
 1366      10120000 
 1367 1208 ED0B0000 		_ADR	RAT
 1368 120c 1D0D0000 		_ADR	PLUS
 1369              	MMOD2:
 1370 1210 D90B0000 		_ADR	RFROM
 1371 1214 8D110000 		_ADR	UMMOD
 1372 1218 D90B0000 		_ADR	RFROM
 1373 121c 670B0000 		_QBRAN	MMOD3
 1373      30120000 
 1374 1224 690C0000 		_ADR	SWAP
 1375 1228 AD0E0000 		_ADR	NEGAT
 1376 122c 690C0000 		_ADR	SWAP
 1377              	MMOD3:   
 1378 1230 BB090000 		_UNNEST
 1379              	
 1380              	//    /MOD	( n n -- r q )
 1381              	// 	Signed divide. Return mod and quotient.
 1382              	
 1383 1234 C0110000 		.word	_MSMOD
 1384 1238 04       	_SLMOD:	.byte   4
 1385 1239 2F4D4F44 		.ascii "/MOD"
 1386 123d 0000BF   		.p2align 2 	
 1387              	SLMOD:
 1388 1240 504700BF 		_NEST
 1389 1244 7D0C0000 		_ADR	OVER
 1390 1248 8D0C0000 		_ADR	ZLESS
 1391 124c 690C0000 		_ADR	SWAP
 1392 1250 C9110000 		_ADR	MSMOD
 1393 1254 BB090000 		_UNNEST
 1394              	
 1395              	//    MOD	 ( n n -- r )
 1396              	// 	Signed divide. Return mod only.
ARM GAS  forth.s 			page 61


 1397              	
 1398 1258 38120000 		.word	_SLMOD
 1399 125c 03       	_MODD:	.byte  3
 1400 125d 4D4F44   		.ascii "MOD"
 1401              		.p2align 2 	
 1402              	MODD:
 1403 1260 504700BF 		_NEST
 1404 1264 41120000 		_ADR	SLMOD
 1405 1268 490C0000 		_ADR	DROP
 1406 126c BB090000 		_UNNEST
 1407              	
 1408              	//    /	   ( n n -- q )
 1409              	// 	Signed divide. Return quotient only.
 1410              	
 1411 1270 5C120000 		.word	_MODD
 1412 1274 01       	_SLASH:	.byte  1
 1413 1275 2F       		.ascii "/"
 1414 1276 00BF     		.p2align 2 	
 1415              	SLASH:
 1416 1278 504700BF 		_NEST
 1417 127c 41120000 		_ADR	SLMOD
 1418 1280 690C0000 		_ADR	SWAP
 1419 1284 490C0000 		_ADR	DROP
 1420 1288 BB090000 		_UNNEST
 1421              	
 1422              	//    */MOD	( n1 n2 n3 -- r q )
 1423              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1424              	
 1425 128c 74120000 		.word	_SLASH
 1426 1290 05       	_SSMOD:	.byte  5
 1427 1291 2A2F4D4F 		.ascii "*/MOD"
 1427      44
 1428 1296 00BF     		.p2align 2 	
 1429              	SSMOD:
 1430 1298 504700BF 		_NEST
 1431 129c 010C0000 		_ADR	TOR
 1432 12a0 650D0000 		_ADR	MSTAR
 1433 12a4 D90B0000 		_ADR	RFROM
 1434 12a8 C9110000 		_ADR	MSMOD
 1435 12ac BB090000 		_UNNEST
 1436              	
 1437              	//    */	  ( n1 n2 n3 -- q )
 1438              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1439              	
 1440 12b0 90120000 		.word	_SSMOD
 1441 12b4 02       	_STASL:	.byte  2
 1442 12b5 2A2F     		.ascii "*/"
 1443 12b7 00       		.p2align 2 	
 1444              	STASL:
 1445 12b8 504700BF 		_NEST
 1446 12bc 99120000 		_ADR	SSMOD
 1447 12c0 690C0000 		_ADR	SWAP
 1448 12c4 490C0000 		_ADR	DROP
 1449 12c8 BB090000 		_UNNEST
 1450              	
 1451              	// **************************************************************************
 1452              	//  Miscellaneous
ARM GAS  forth.s 			page 62


 1453              	
 1454              	//    ALIGNED	( b -- a )
 1455              	// 	Align address to the cell boundary.
 1456              	
 1457 12cc B4120000 		.word	_STASL
 1458 12d0 07       	_ALGND:	.byte   7
 1459 12d1 414C4947 		.ascii "ALIGNED"
 1459      4E4544
 1460              		.p2align 2 	
 1461              	ALGND:
 1462 12d8 06F10306 		ADD	TOS,TOS,#3
 1463 12dc 6FF00305 		MVN	WP,#3
 1464 12e0 06EA0506 		AND	TOS,TOS,WP
 1465 12e4 FFF766BB 		_NEXT
 1466              	
 1467              	//    >CHAR	( c -- c )
 1468              	// 	Filter non-printing characters.
 1469              	
 1470 12e8 D0120000 		.word	_ALGND
 1471 12ec 05       	_TCHAR:	.byte  5
 1472 12ed 3E434841 		.ascii ">CHAR"
 1472      52
 1473 12f2 00BF     		.p2align 2 	
 1474              	TCHAR:
 1475 12f4 504700BF 		_NEST
 1476 12f8 250B0000 		_DOLIT  0x7F
 1476      7F000000 
 1477 1300 9D0C0000 		_ADR	ANDD
 1478 1304 590C0000 		_ADR	DUPP	// mask msb
 1479 1308 D90D0000 		_ADR	BLANK
 1480 130c 250B0000 		_DOLIT 	127
 1480      7F000000 
 1481 1314 61110000 		_ADR	WITHI	// check for printable
 1482 1318 990E0000 		_ADR	INVER
 1483 131c 670B0000 		_QBRAN	TCHA1
 1483      30130000 
 1484 1324 490C0000 		_ADR	DROP
 1485 1328 250B0000 		_DOLIT 	'_'	// replace non-printables
 1485      5F000000 
 1486              	TCHA1:
 1487 1330 BB090000 		  _UNNEST
 1488              	
 1489              	//    DEPTH	( -- n )
 1490              	// 	Return the depth of the data stack.
 1491              	
 1492 1334 EC120000 		.word	_TCHAR
 1493 1338 05       	_DEPTH:	.byte  5
 1494 1339 44455054 		.ascii "DEPTH"
 1494      48
 1495 133e 00BF     		.p2align 2 	
 1496              	DEPTH:
 1497 1340 4FF47F42 		_MOV32 T2,SPP 
 1497      C2F20102 
 1498 1348 A2EB0702 		SUB	T2,T2,DSP
 1499 134c 47F8046D 		_PUSH
 1500 1350 4FEAA206 		ASR	TOS,T2,#2
 1501 1354 FFF72EBB 		_NEXT
ARM GAS  forth.s 			page 63


 1502              	
 1503              	//    PICK	( ... +n -- ... w )
 1504              	// 	Copy the nth stack item to tos.
 1505              	
 1506 1358 38130000 		.word	_DEPTH
 1507 135c 04       	_PICK:	.byte  4
 1508 135d 5049434B 		.ascii "PICK"
 1509 1361 0000BF   		.p2align 2 	
 1510              	PICK:
 1511 1364 504700BF 		_NEST
 1512 1368 790D0000 		_ADR	ONEP
 1513 136c ED0D0000 		_ADR	CELLS
 1514 1370 350C0000 		_ADR	SPAT
 1515 1374 1D0D0000 		_ADR	PLUS
 1516 1378 AD0B0000 		_ADR	AT
 1517 137c BB090000 		_UNNEST
 1518              	
 1519              	// **************************************************************************
 1520              	//  Memory access
 1521              	
 1522              	//    HERE	( -- a )
 1523              	// 	Return the top of the code dictionary.
 1524              	
 1525 1380 5C130000 		.word	_PICK
 1526 1384 04       	_HERE:	.byte  4
 1527 1385 48455245 		.ascii "HERE"
 1528 1389 0000BF   		.p2align 2 	
 1529              	HERE:
 1530 138c 504700BF 		_NEST
 1531 1390 E9100000 		_ADR	CPP
 1532 1394 AD0B0000 		_ADR	AT
 1533 1398 BB090000 		_UNNEST
 1534              		
 1535              	//    PAD	 ( -- a )
 1536              	// 	Return the address of a temporary buffer.
 1537              	
 1538 139c 84130000 		.word	_HERE
 1539 13a0 03       	_PAD:	.byte  3
 1540 13a1 504144   		.ascii "PAD"
 1541              		.p2align 2 	
 1542              	PAD:
 1543 13a4 504700BF 		_NEST
 1544 13a8 8D130000 		_ADR	HERE
 1545 13ac 250B0000 		_DOLIT 80
 1545      50000000 
 1546 13b4 1D0D0000 		_ADR PLUS 
 1547 13b8 BB090000 		_UNNEST
 1548              	
 1549              	//    TIB	 ( -- a )
 1550              	// 	Return the address of the terminal input buffer.
 1551              	
 1552 13bc A0130000 		.word	_PAD
 1553 13c0 03       	_TIB:	.byte  3
 1554 13c1 544942   		.ascii "TIB"
 1555              		.p2align 2 	
 1556              	TIB:
 1557 13c4 47F8046D 		_PUSH
ARM GAS  forth.s 			page 64


 1558 13c8 A66A     		ldr TOS,[UP,#TIBUF]
 1559 13ca FFF7F3BA 		_NEXT
 1560              	
 1561              	//    @EXECUTE	( a -- )
 1562              	// 	Execute vector stored in address a.
 1563              	
 1564 13ce C0130000 		.word	_TIB
 1565 13d2 08       	_ATEXE:	.byte   8
 1566 13d3 40455845 		.ascii "@EXECUTE"
 1566      43555445 
 1567 13db 00       		.p2align 2 	
 1568              	ATEXE: 
 1569 13dc 3500     		MOVS	WP,TOS
 1570 13de 57F8046B 		_POP
 1571 13e2 2D68     		LDR	WP,[WP]
 1572 13e4 45F00105 		ORR	WP,WP,#1
 1573 13e8 18BF     	    IT NE 
 1574 13ea 2847     		BXNE	WP
 1575 13ec FFF7E2BA 		_NEXT
 1576              	
 1577              	//    CMOVE	( b1 b2 u -- )
 1578              	// 	Copy u bytes from b1 to b2.
 1579              	
 1580 13f0 D2130000 		.word	_ATEXE
 1581 13f4 05       	_CMOVE:	.byte   5
 1582 13f5 434D4F56 		.ascii "CMOVE"
 1582      45
 1583 13fa 00BF     		.p2align 2 	
 1584              	CMOVE:
 1585 13fc 57F8042B 		LDR	T2,[DSP],#4
 1586 1400 57F8043B 		LDR	T3,[DSP],#4
 1587 1404 03E0     		B CMOV1
 1588              	CMOV0:
 1589 1406 13F8015B 		LDRB	WP,[T3],#1
 1590 140a 02F8015B 		STRB	WP,[T2],#1
 1591              	CMOV1:
 1592 140e 3600     		MOVS	TOS,TOS
 1593 1410 02D0     		BEQ	CMOV2
 1594 1412 A6F10106 		SUB	TOS,TOS,#1
 1595 1416 F6E7     		B CMOV0
 1596              	CMOV2:
 1597 1418 57F8046B 		_POP
 1598 141c FFF7CABA 		_NEXT
 1599              	
 1600              	//    MOVE	( a1 a2 u -- )
 1601              	// 	Copy u words from a1 to a2.
 1602              	
 1603 1420 F4130000 		.word	_CMOVE
 1604 1424 04       	_MOVE:	.byte   4
 1605 1425 4D4F5645 		.ascii "MOVE"
 1606 1429 0000BF   		.p2align 2 	
 1607              	MOVE:
 1608 142c 26F00306 		AND	TOS,TOS,#-4
 1609 1430 57F8042B 		LDR	T2,[DSP],#4
 1610 1434 57F8043B 		LDR	T3,[DSP],#4
 1611 1438 03E0     		B MOVE1
 1612              	MOVE0:
ARM GAS  forth.s 			page 65


 1613 143a 53F8045B 		LDR	WP,[T3],#4
 1614 143e 42F8045B 		STR	WP,[T2],#4
 1615              	MOVE1:
 1616 1442 3600     		MOVS	TOS,TOS
 1617 1444 02D0     		BEQ	MOVE2
 1618 1446 A6F10406 		SUB	TOS,TOS,#4
 1619 144a F6E7     		B MOVE0
 1620              	MOVE2:
 1621 144c 57F8046B 		_POP
 1622 1450 FFF7B0BA 		_NEXT
 1623              	
 1624              	//    FILL	( b u c -- )
 1625              	// 	Fill u bytes of character c to area beginning at b.
 1626              	
 1627 1454 24140000 		.word	_MOVE
 1628 1458 04       	_FILL:	.byte   4
 1629 1459 46494C4C 		.ascii "FILL"
 1630 145d 0000BF   		.p2align 2 	
 1631              	FILL:
 1632 1460 03CF     		LDMFD DSP!,{T0,T1} 
 1633 1462 0000     		MOVS T0,T0 
 1634 1464 03D0     		BEQ FILL2
 1635              	FILL1:
 1636 1466 01F8016B 		STRB	TOS,[T1],#1
 1637 146a 0138     		SUBS	T0,T0,#1
 1638 146c FBD1     		BNE FILL1
 1639              	FILL2:
 1640 146e 57F8046B 		_POP
 1641 1472 FFF79FBA 		_NEXT
 1642              	
 1643              	//    PACK$	( b u a -- a )
 1644              	// 	Build a counted word with u characters from b. Null fill.
 1645              	
 1646 1476 58140000 		.word	_FILL
 1647 147a 05       	_PACKS:	.byte  5
 1648 147b 5041434B 		.ascii "PACK$$"
 1648      2424
 1649 1481 0000BF   		.p2align 2 	
 1650              	PACKS:
 1651 1484 504700BF 		_NEST
 1652 1488 D9120000 		_ADR	ALGND
 1653 148c 590C0000 		_ADR	DUPP
 1654 1490 010C0000 		_ADR	TOR			// strings only on cell boundary
 1655 1494 7D0C0000 		_ADR	OVER
 1656 1498 1D0D0000 		_ADR	PLUS
 1657 149c 790D0000 		_ADR	ONEP
 1658 14a0 250B0000 		_DOLIT 	0xFFFFFFFC
 1658      FCFFFFFF 
 1659 14a8 9D0C0000 		_ADR	ANDD			// count mod cell
 1660 14ac 250B0000 		_DOLIT 	0
 1660      00000000 
 1661 14b4 690C0000 		_ADR	SWAP
 1662 14b8 990B0000 		_ADR	STORE			// null fill cell
 1663 14bc ED0B0000 		_ADR	RAT
 1664 14c0 690E0000 		_ADR	DDUP
 1665 14c4 B90B0000 		_ADR	CSTOR
 1666 14c8 790D0000 		_ADR	ONEP			// save count
ARM GAS  forth.s 			page 66


 1667 14cc 690C0000 		_ADR	SWAP
 1668 14d0 FD130000 		_ADR	CMOVE
 1669 14d4 D90B0000 		_ADR	RFROM
 1670 14d8 BB090000 		_UNNEST   			// move string
 1671              	
 1672              	// **************************************************************************
 1673              	//  Numeric output, single precision
 1674              	
 1675              	//    DIGIT	( u -- c )
 1676              	// 	Convert digit u to a character.
 1677              	
 1678 14dc 7A140000 		.word	_PACKS
 1679 14e0 05       	_DIGIT:	.byte  5
 1680 14e1 44494749 		.ascii "DIGIT"
 1680      54
 1681 14e6 00BF     		.p2align 2 	
 1682              	DIGIT:
 1683 14e8 504700BF 		_NEST
 1684 14ec 250B0000 		_DOLIT 9
 1684      09000000 
 1685 14f4 7D0C0000 		_ADR	OVER
 1686 14f8 150F0000 		_ADR	LESS
 1687 14fc 250B0000 		_DOLIT	7
 1687      07000000 
 1688 1504 9D0C0000 		_ADR	ANDD
 1689 1508 1D0D0000 		_ADR	PLUS
 1690 150c 250B0000 		_DOLIT	'0'
 1690      30000000 
 1691 1514 1D0D0000 		_ADR	PLUS 
 1692 1518 BB090000 		_UNNEST
 1693              	
 1694              	//    EXTRACT	( n base -- n c )
 1695              	// 	Extract the least significant digit from n.
 1696              	
 1697 151c E0140000 		.word	_DIGIT
 1698 1520 07       	_EXTRC:	.byte  7
 1699 1521 45585452 		.ascii "EXTRACT"
 1699      414354
 1700              		.p2align 2 	
 1701              	EXTRC:
 1702 1528 504700BF 		_NEST
 1703 152c 250B0000 		_DOLIT 0
 1703      00000000 
 1704 1534 690C0000 		_ADR	SWAP
 1705 1538 8D110000 		_ADR	UMMOD
 1706 153c 690C0000 		_ADR	SWAP
 1707 1540 E9140000 		_ADR	DIGIT
 1708 1544 BB090000 		_UNNEST
 1709              	
 1710              	//    <#	  ( -- )
 1711              	// 	Initiate the numeric output process.
 1712              	
 1713 1548 20150000 		.word	_EXTRC
 1714 154c 02       	_BDIGS:	.byte  2
 1715 154d 3C23     		.ascii "<#"
 1716 154f 00       		.p2align 2 	
 1717              	BDIGS:
ARM GAS  forth.s 			page 67


 1718 1550 504700BF 		_NEST
 1719 1554 A5130000 		_ADR	PAD
 1720 1558 BD100000 		_ADR	HLD
 1721 155c 990B0000 		_ADR	STORE
 1722 1560 BB090000 		_UNNEST
 1723              	
 1724              	//    HOLD	( c -- )
 1725              	// 	Insert a character into the numeric output string.
 1726              	
 1727 1564 4C150000 		.word	_BDIGS
 1728 1568 04       	_HOLD:	.byte  4
 1729 1569 484F4C44 		.ascii "HOLD"
 1730 156d 0000BF   		.p2align 2 	
 1731              	HOLD:
 1732 1570 504700BF 		_NEST
 1733 1574 BD100000 		_ADR	HLD
 1734 1578 AD0B0000 		_ADR	AT
 1735 157c 890D0000 		_ADR	ONEM
 1736 1580 590C0000 		_ADR	DUPP
 1737 1584 BD100000 		_ADR	HLD
 1738 1588 990B0000 		_ADR	STORE
 1739 158c B90B0000 		_ADR	CSTOR
 1740 1590 BB090000 		_UNNEST
 1741              	
 1742              	//    #	   ( u -- u )
 1743              	// 	Extract one digit from u and append the digit to output string.
 1744              	
 1745 1594 68150000 		.word	_HOLD
 1746 1598 01       	_DIG:	.byte  1
 1747 1599 23       		.ascii "#"
 1748 159a 00BF     		.p2align 2 	
 1749              	DIG:
 1750 159c 504700BF 		_NEST
 1751 15a0 4D100000 		_ADR	BASE
 1752 15a4 AD0B0000 		_ADR	AT
 1753 15a8 29150000 		_ADR	EXTRC
 1754 15ac 71150000 		_ADR	HOLD
 1755 15b0 BB090000 		_UNNEST
 1756              	
 1757              	//    #S	  ( u -- 0 )
 1758              	// 	Convert u until all digits are added to the output string.
 1759              	
 1760 15b4 98150000 		.word	_DIG
 1761 15b8 02       	_DIGS:	.byte  2
 1762 15b9 2353     		.ascii "#S"
 1763 15bb 00       		.p2align 2 	
 1764              	DIGS:
 1765 15bc 504700BF 		_NEST
 1766              	DIGS1:
 1767 15c0 9D150000 	    _ADR	DIG
 1768 15c4 590C0000 		_ADR	DUPP
 1769 15c8 670B0000 		_QBRAN 	DIGS2
 1769      D8150000 
 1770 15d0 7B0B0000 		_BRAN	DIGS1
 1770      C0150000 
 1771              	DIGS2:
 1772 15d8 BB090000 		  _UNNEST
ARM GAS  forth.s 			page 68


 1773              	
 1774              	//    SIGN	( n -- )
 1775              	// 	Add a minus sign to the numeric output string.
 1776              	
 1777 15dc B8150000 		.word	_DIGS
 1778 15e0 04       	_SIGN:	.byte  4
 1779 15e1 5349474E 		.ascii "SIGN"
 1780 15e5 0000BF   		.p2align 2 	
 1781              	SIGN:
 1782 15e8 504700BF 		_NEST
 1783 15ec 8D0C0000 		_ADR	ZLESS
 1784 15f0 670B0000 		_QBRAN	SIGN1
 1784      04160000 
 1785 15f8 250B0000 		_DOLIT '-'
 1785      2D000000 
 1786 1600 71150000 		_ADR	HOLD
 1787              	SIGN1:
 1788 1604 BB090000 		  _UNNEST
 1789              	
 1790              	//    #>	  ( w -- b u )
 1791              	// 	Prepare the output word to be TYPE'd.
 1792              	
 1793 1608 E0150000 		.word	_SIGN
 1794 160c 02       	_EDIGS:	.byte  2
 1795 160d 233E     		.ascii "#>"
 1796 160f 00       		.p2align 2 	
 1797              	EDIGS:
 1798 1610 504700BF 		_NEST
 1799 1614 490C0000 		_ADR	DROP
 1800 1618 BD100000 		_ADR	HLD
 1801 161c AD0B0000 		_ADR	AT
 1802 1620 A5130000 		_ADR	PAD
 1803 1624 7D0C0000 		_ADR	OVER
 1804 1628 2D0D0000 		_ADR	SUBB
 1805 162c BB090000 		_UNNEST
 1806              	
 1807              	//    str	 ( n -- b u )
 1808              	// 	Convert a signed integer to a numeric string.
 1809              	
 1810              	// 	.word	_EDIGS
 1811              	// _STRR	.byte  3
 1812              	// 	.ascii "str"
 1813              	// 	.p2align 2 	
 1814              	STRR:
 1815 1630 504700BF 		_NEST
 1816 1634 590C0000 		_ADR	DUPP
 1817 1638 010C0000 		_ADR	TOR
 1818 163c BD0E0000 		_ADR	ABSS
 1819 1640 51150000 		_ADR	BDIGS
 1820 1644 BD150000 		_ADR	DIGS
 1821 1648 D90B0000 		_ADR	RFROM
 1822 164c E9150000 		_ADR	SIGN
 1823 1650 11160000 		_ADR	EDIGS
 1824 1654 BB090000 		_UNNEST
 1825              	
 1826              	//    HEX	 ( -- )
 1827              	// 	Use radix 16 as base for numeric conversions.
ARM GAS  forth.s 			page 69


 1828              	
 1829 1658 0C160000 		.word	_EDIGS
 1830 165c 03       	_HEX:	.byte  3
 1831 165d 484558   		.ascii "HEX"
 1832              		.p2align 2 	
 1833              	HEX:
 1834 1660 504700BF 		_NEST
 1835 1664 250B0000 		_DOLIT 16
 1835      10000000 
 1836 166c 4D100000 		_ADR	BASE
 1837 1670 990B0000 		_ADR	STORE
 1838 1674 BB090000 		_UNNEST
 1839              	
 1840              	//    DECIMAL	( -- )
 1841              	// 	Use radix 10 as base for numeric conversions.
 1842              	
 1843 1678 5C160000 		.word	_HEX
 1844 167c 07       	_DECIM:	.byte  7
 1845 167d 44454349 		.ascii "DECIMAL"
 1845      4D414C
 1846              		.p2align 2 	
 1847              	DECIM:
 1848 1684 504700BF 		_NEST
 1849 1688 250B0000 		_DOLIT 10
 1849      0A000000 
 1850 1690 4D100000 		_ADR	BASE
 1851 1694 990B0000 		_ADR	STORE
 1852 1698 BB090000 		_UNNEST
 1853              	
 1854              	// **************************************************************************
 1855              	//  Numeric input, single precision
 1856              	
 1857              	//    DIGIT?	( c base -- u t )
 1858              	// 	Convert a character to its numeric value. A flag indicates success.
 1859              	
 1860 169c 7C160000 		.word	_DECIM
 1861 16a0 06       	_DIGTQ:	.byte  6
 1862 16a1 44494749 		.ascii "DIGIT?"
 1862      543F
 1863 16a7 00       		.p2align 2 	
 1864              	DIGTQ:
 1865 16a8 504700BF 		_NEST
 1866 16ac 010C0000 		_ADR	TOR
 1867 16b0 250B0000 		_DOLIT 	'0'
 1867      30000000 
 1868 16b8 2D0D0000 		_ADR	SUBB
 1869 16bc 250B0000 		_DOLIT 9
 1869      09000000 
 1870 16c4 7D0C0000 		_ADR	OVER
 1871 16c8 150F0000 		_ADR	LESS
 1872 16cc 670B0000 		_QBRAN	DGTQ1
 1872      F4160000 
 1873 16d4 250B0000 		_DOLIT 7
 1873      07000000 
 1874 16dc 2D0D0000 		_ADR	SUBB
 1875 16e0 590C0000 		_ADR	DUPP
 1876 16e4 250B0000 		_DOLIT	10
ARM GAS  forth.s 			page 70


 1876      0A000000 
 1877 16ec 150F0000 		_ADR	LESS
 1878 16f0 B10C0000 		_ADR	ORR
 1879              	DGTQ1:
 1880 16f4 590C0000 		_ADR	DUPP
 1881 16f8 D90B0000 		_ADR	RFROM
 1882 16fc FD0E0000 		_ADR	ULESS
 1883 1700 BB090000 		_UNNEST
 1884              	
 1885              	//    NUMBER?	( a -- n T | a F )
 1886              	// 	Convert a number word to integer. Push a flag on tos.
 1887              	
 1888 1704 A0160000 		.word	_DIGTQ
 1889 1708 07       	_NUMBQ:	.byte  7
 1890 1709 4E554D42 		.ascii "NUMBER?"
 1890      45523F
 1891              		.p2align 2 	
 1892              	NUMBQ:
 1893 1710 504700BF 		_NEST
 1894 1714 4D100000 		_ADR	BASE
 1895 1718 AD0B0000 		_ADR	AT
 1896 171c 010C0000 		_ADR	TOR
 1897 1720 250B0000 		_DOLIT	0
 1897      00000000 
 1898 1728 7D0C0000 		_ADR	OVER
 1899 172c B50F0000 		_ADR	COUNT
 1900 1730 7D0C0000 		_ADR	OVER
 1901 1734 CD0B0000 		_ADR	CAT
 1902 1738 250B0000 		_DOLIT '$'
 1902      24000000 
 1903 1740 E50E0000 		_ADR	EQUAL
 1904 1744 670B0000 		_QBRAN	NUMQ1
 1904      60170000 
 1905 174c 61160000 		_ADR	HEX
 1906 1750 690C0000 		_ADR	SWAP
 1907 1754 790D0000 		_ADR	ONEP
 1908 1758 690C0000 		_ADR	SWAP
 1909 175c 890D0000 		_ADR	ONEM
 1910              	NUMQ1:
 1911 1760 7D0C0000 		_ADR	OVER
 1912 1764 CD0B0000 		_ADR	CAT
 1913 1768 250B0000 		_DOLIT	'-'
 1913      2D000000 
 1914 1770 E50E0000 		_ADR	EQUAL
 1915 1774 010C0000 		_ADR	TOR
 1916 1778 690C0000 		_ADR	SWAP
 1917 177c ED0B0000 		_ADR	RAT
 1918 1780 2D0D0000 		_ADR	SUBB
 1919 1784 690C0000 		_ADR	SWAP
 1920 1788 ED0B0000 		_ADR	RAT
 1921 178c 1D0D0000 		_ADR	PLUS
 1922 1790 2D0E0000 		_ADR	QDUP
 1923 1794 670B0000 		_QBRAN	NUMQ6
 1923      28180000 
 1924 179c 890D0000 		_ADR	ONEM
 1925 17a0 010C0000 		_ADR	TOR
 1926              	NUMQ2:
ARM GAS  forth.s 			page 71


 1927 17a4 590C0000 		_ADR	DUPP
 1928 17a8 010C0000 		_ADR	TOR
 1929 17ac CD0B0000 		_ADR	CAT
 1930 17b0 4D100000 		_ADR	BASE
 1931 17b4 AD0B0000 		_ADR	AT
 1932 17b8 A9160000 		_ADR	DIGTQ
 1933 17bc 670B0000 		_QBRAN	NUMQ4
 1933      0C180000 
 1934 17c4 690C0000 		_ADR	SWAP
 1935 17c8 4D100000 		_ADR	BASE
 1936 17cc AD0B0000 		_ADR	AT
 1937 17d0 3D0D0000 		_ADR	STAR
 1938 17d4 1D0D0000 		_ADR	PLUS
 1939 17d8 D90B0000 		_ADR	RFROM
 1940 17dc 790D0000 		_ADR	ONEP
 1941 17e0 490B0000 		_DONXT	NUMQ2
 1941      A4170000 
 1942 17e8 ED0B0000 		_ADR	RAT
 1943 17ec 690C0000 		_ADR	SWAP
 1944 17f0 490C0000 		_ADR	DROP
 1945 17f4 670B0000 		_QBRAN	NUMQ3
 1945      00180000 
 1946 17fc AD0E0000 		_ADR	NEGAT
 1947              	NUMQ3:
 1948 1800 690C0000 		_ADR	SWAP
 1949 1804 7B0B0000 		_BRAN	NUMQ5
 1949      24180000 
 1950              	NUMQ4:
 1951 180c D90B0000 		_ADR	RFROM
 1952 1810 D90B0000 		_ADR	RFROM
 1953 1814 550E0000 		_ADR	DDROP
 1954 1818 550E0000 		_ADR	DDROP
 1955 181c 250B0000 		_DOLIT	0
 1955      00000000 
 1956              	NUMQ5:
 1957 1824 590C0000 		_ADR	DUPP
 1958              	NUMQ6:
 1959 1828 D90B0000 		_ADR	RFROM
 1960 182c 550E0000 		_ADR	DDROP
 1961 1830 D90B0000 		_ADR	RFROM
 1962 1834 4D100000 		_ADR	BASE
 1963 1838 990B0000 		_ADR	STORE
 1964 183c BB090000 		_UNNEST
 1965              	
 1966              	// **************************************************************************
 1967              	//  Basic I/O
 1968              	
 1969              	//    KEY	 ( -- c )
 1970              	// 	Wait for and return an input character.
 1971              	
 1972 1840 08170000 		.word	_NUMBQ
 1973 1844 03       	_KEY:	.byte  3
 1974 1845 4B4559   		.ascii "KEY"
 1975              		.p2align 2 	
 1976              	KEY:
 1977 1848 504700BF 		_NEST
 1978              	KEY1:
ARM GAS  forth.s 			page 72


 1979 184c CD0A0000 		_ADR	QRX
 1980 1850 670B0000 		_QBRAN	KEY1
 1980      4C180000 
 1981 1858 BB090000 		_UNNEST
 1982              	
 1983              	//    SPACE	( -- )
 1984              	// 	Send the blank character to the output device.
 1985              	
 1986 185c 44180000 		.word	_KEY
 1987 1860 05       	_SPACE:	.byte  5
 1988 1861 53504143 		.ascii "SPACE"
 1988      45
 1989 1866 00BF     		.p2align 2 	
 1990              	SPACE:
 1991 1868 504700BF 		_NEST
 1992 186c D90D0000 		_ADR	BLANK
 1993 1870 010B0000 		_ADR	EMIT
 1994 1874 BB090000 		_UNNEST
 1995              	
 1996              	//    SPACES	( +n -- )
 1997              	// 	Send n spaces to the output device.
 1998              	
 1999 1878 60180000 		.word	_SPACE
 2000 187c 06       	_SPACS:	.byte  6
 2001 187d 53504143 		.ascii "SPACES"
 2001      4553
 2002 1883 00       		.p2align 2 	
 2003              	SPACS:
 2004 1884 504700BF 		_NEST
 2005 1888 250B0000 		_DOLIT	0
 2005      00000000 
 2006 1890 450F0000 		_ADR	MAX
 2007 1894 010C0000 		_ADR	TOR
 2008 1898 7B0B0000 		_BRAN	CHAR2
 2008      A4180000 
 2009              	CHAR1:
 2010 18a0 69180000 		_ADR	SPACE
 2011              	CHAR2:
 2012 18a4 490B0000 		_DONXT	CHAR1
 2012      A0180000 
 2013 18ac BB090000 		_UNNEST
 2014              	
 2015              	//    TYPE	( b u -- )
 2016              	// 	Output u characters from b.
 2017              	
 2018 18b0 7C180000 		.word	_SPACS
 2019 18b4 04       	_TYPEE:	.byte	4
 2020 18b5 54595045 		.ascii "TYPE"
 2021 18b9 0000BF   		.p2align 2 	
 2022              	TYPEE:
 2023 18bc 504700BF 		_NEST
 2024 18c0 010C0000 		_ADR  TOR   // ( a+1 -- R: u )
 2025 18c4 7B0B0000 		_BRAN	TYPE2
 2025      D8180000 
 2026              	TYPE1:  
 2027 18cc B50F0000 		_ADR  COUNT
 2028 18d0 F5120000 		_ADR TCHAR
ARM GAS  forth.s 			page 73


 2029 18d4 010B0000 		_ADR EMIT
 2030              	TYPE2:  
 2031 18d8 490B0000 		_DONXT	TYPE1
 2031      CC180000 
 2032 18e0 490C0000 		_ADR	DROP
 2033 18e4 BB090000 		_UNNEST
 2034              	
 2035              	//    CR	  ( -- )
 2036              	// 	Output a carriage return and a line feed.
 2037              	
 2038 18e8 B4180000 		.word	_TYPEE
 2039 18ec 02       	_CR:	.byte  2
 2040 18ed 4352     		.ascii "CR"
 2041 18ef 00       		.p2align 2 	
 2042              	CR:
 2043 18f0 504700BF 		_NEST
 2044 18f4 250B0000 		_DOLIT	CRR
 2044      0D000000 
 2045 18fc 010B0000 		_ADR	EMIT
 2046 1900 250B0000 		_DOLIT	LF
 2046      0A000000 
 2047 1908 010B0000 		_ADR	EMIT
 2048 190c BB090000 		_UNNEST
 2049              	
 2050              	//    do_$	( -- a )
 2051              	// 	Return the address of a compiled string.
 2052              	//  adjust return address to skip over it.
 2053              	
 2054              	// 	.word	_CR
 2055              	// _DOSTR	.byte  COMPO+3
 2056              	// 	.ascii "do$$"
 2057              	// 	.p2align 2 	
 2058              	DOSTR:
 2059 1910 504700BF 		_NEST     
 2060              	/* compiled string address is 2 levels deep */
 2061 1914 D90B0000 		_ADR	RFROM	// { -- a1 }
 2062 1918 D90B0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2063 191c 590C0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2064 1920 B50F0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2065 1924 1D0D0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2066 1928 D9120000 		_ADR	ALGND	//  end of string
 2067              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2068 192c 010C0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2069 1930 690C0000 		_ADR	SWAP	//  count tugged
 2070 1934 010C0000 		_ADR	TOR     //  ( -- a2) is string address
 2071 1938 BB090000 		_UNNEST
 2072              	
 2073              	//    $"|	( -- a )
 2074              	// 	Run time routine compiled by _". Return address of a compiled string.
 2075              	
 2076              	// 	.word	_DOSTR
 2077              	// _STRQP	.byte  COMPO+3
 2078              	// 	.ascii "$\"|"
 2079              	// 	.p2align 2 	
 2080              	STRQP:
 2081 193c 504700BF 		_NEST
 2082 1940 11190000 		_ADR	DOSTR
ARM GAS  forth.s 			page 74


 2083 1944 BB090000 		_UNNEST			// force a call to dostr
 2084              	
 2085              	//    .$	( a -- )
 2086              	// 	Run time routine of ." . Output a compiled string.
 2087              	
 2088              	// 	.word	_STRQP
 2089              	// _DOTST	.byte  COMPO+2
 2090              	// 	.ascii ".$$"
 2091              	// 	.p2align 2 	
 2092              	DOTST:
 2093 1948 504700BF 		_NEST
 2094 194c B50F0000 		_ADR	COUNT // ( -- a+1 c )
 2095 1950 BD180000 		_ADR	TYPEE
 2096 1954 BB090000 		_UNNEST
 2097              	
 2098              	//    ."|	( -- )
 2099              	// 	Run time routine of ." . Output a compiled string.
 2100              	
 2101              	// 	.word	_DOTST
 2102              	// _DOTQP	.byte  COMPO+3
 2103              	// 	.ascii ".""|"
 2104              	// 	.p2align 2 	
 2105              	DOTQP:
 2106 1958 504700BF 		_NEST
 2107 195c 11190000 		_ADR	DOSTR
 2108 1960 49190000 		_ADR	DOTST
 2109 1964 BB090000 		_UNNEST
 2110              	
 2111              	//    .R	  ( n +n -- )
 2112              	// 	Display an integer in a field of n columns, right justified.
 2113              	
 2114 1968 EC180000 		.word	_CR
 2115 196c 02       	_DOTR:	.byte  2
 2116 196d 2E52     		.ascii ".R"
 2117 196f 00       		.p2align 2 	
 2118              	DOTR:
 2119 1970 504700BF 		_NEST
 2120 1974 010C0000 		_ADR	TOR
 2121 1978 31160000 		_ADR	STRR
 2122 197c D90B0000 		_ADR	RFROM
 2123 1980 7D0C0000 		_ADR	OVER
 2124 1984 2D0D0000 		_ADR	SUBB
 2125 1988 85180000 		_ADR	SPACS
 2126 198c BD180000 		_ADR	TYPEE
 2127 1990 BB090000 		_UNNEST
 2128              	
 2129              	//    U.R	 ( u +n -- )
 2130              	// 	Display an unsigned integer in n column, right justified.
 2131              	
 2132 1994 6C190000 		.word	_DOTR
 2133 1998 03       	_UDOTR:	.byte  3
 2134 1999 552E52   		.ascii "U.R"
 2135              		.p2align 2 	
 2136              	UDOTR:
 2137 199c 504700BF 		_NEST
 2138 19a0 010C0000 		_ADR	TOR
 2139 19a4 51150000 		_ADR	BDIGS
ARM GAS  forth.s 			page 75


 2140 19a8 BD150000 		_ADR	DIGS
 2141 19ac 11160000 		_ADR	EDIGS
 2142 19b0 D90B0000 		_ADR	RFROM
 2143 19b4 7D0C0000 		_ADR	OVER
 2144 19b8 2D0D0000 		_ADR	SUBB
 2145 19bc 85180000 		_ADR	SPACS
 2146 19c0 BD180000 		_ADR	TYPEE
 2147 19c4 BB090000 		_UNNEST
 2148              	
 2149              	//    U.	  ( u -- )
 2150              	// 	Display an unsigned integer in free format.
 2151              	
 2152 19c8 98190000 		.word	_UDOTR
 2153 19cc 02       	_UDOT:	.byte  2
 2154 19cd 552E     		.ascii "U."
 2155 19cf 00       		.p2align 2 	
 2156              	UDOT:
 2157 19d0 504700BF 		_NEST
 2158 19d4 51150000 		_ADR	BDIGS
 2159 19d8 BD150000 		_ADR	DIGS
 2160 19dc 11160000 		_ADR	EDIGS
 2161 19e0 69180000 		_ADR	SPACE
 2162 19e4 BD180000 		_ADR	TYPEE
 2163 19e8 BB090000 		_UNNEST
 2164              	
 2165              	//    .	   ( w -- )
 2166              	// 	Display an integer in free format, preceeded by a space.
 2167              	
 2168 19ec CC190000 		.word	_UDOT
 2169 19f0 01       	_DOT:	.byte  1
 2170 19f1 2E       		.ascii "."
 2171 19f2 00BF     		.p2align 2 	
 2172              	DOT:
 2173 19f4 504700BF 		_NEST
 2174 19f8 4D100000 		_ADR	BASE
 2175 19fc AD0B0000 		_ADR	AT
 2176 1a00 250B0000 		_DOLIT 10
 2176      0A000000 
 2177 1a08 C50C0000 		_ADR	XORR			// ?decimal
 2178 1a0c 670B0000 		_QBRAN	DOT1
 2178      1C1A0000 
 2179 1a14 D1190000 		_ADR	UDOT
 2180 1a18 BB090000 		_UNNEST			// no,display unsigned
 2181              	DOT1:
 2182 1a1c 31160000 	    _ADR	STRR
 2183 1a20 69180000 		_ADR	SPACE
 2184 1a24 BD180000 		_ADR	TYPEE
 2185 1a28 BB090000 		_UNNEST			// yes, display signed
 2186              	
 2187              	//    ?	   ( a -- )
 2188              	// 	Display the contents in a memory cell.
 2189              	
 2190 1a2c F0190000 		.word	_DOT
 2191 1a30 01       	_QUEST:	.byte  1
 2192 1a31 3F       		.ascii "?"
 2193 1a32 00BF     		.p2align 2 	
 2194              	QUEST:
ARM GAS  forth.s 			page 76


 2195 1a34 504700BF 		_NEST
 2196 1a38 AD0B0000 		_ADR	AT
 2197 1a3c F5190000 		_ADR	DOT
 2198 1a40 BB090000 		_UNNEST
 2199              	
 2200              	// **************************************************************************
 2201              	//  Parsing
 2202              	
 2203              	//    parse	( b u c -- b u delta //  string> )
 2204              	// 	Scan word delimited by c. Return found string and its offset.
 2205              	
 2206              	// 	.word	_QUEST
 2207              	// _PARS	.byte  5
 2208              	// 	.ascii "parse"
 2209              	// 	.p2align 2 	
 2210              	PARS:
 2211 1a44 504700BF 		_NEST
 2212 1a48 57100000 		_ADR	TEMP
 2213 1a4c 990B0000 		_ADR	STORE
 2214 1a50 7D0C0000 		_ADR	OVER
 2215 1a54 010C0000 		_ADR	TOR
 2216 1a58 590C0000 		_ADR	DUPP
 2217 1a5c 670B0000 		_QBRAN	PARS8
 2217      581B0000 
 2218 1a64 890D0000 		_ADR	ONEM
 2219 1a68 57100000 		_ADR	TEMP
 2220 1a6c AD0B0000 		_ADR	AT
 2221 1a70 D90D0000 		_ADR	BLANK
 2222 1a74 E50E0000 		_ADR	EQUAL
 2223 1a78 670B0000 		_QBRAN	PARS3
 2223      CC1A0000 
 2224 1a80 010C0000 		_ADR	TOR
 2225              	PARS1:
 2226 1a84 D90D0000 		_ADR	BLANK
 2227 1a88 7D0C0000 		_ADR	OVER
 2228 1a8c CD0B0000 		_ADR	CAT			// skip leading blanks 
 2229 1a90 2D0D0000 		_ADR	SUBB
 2230 1a94 8D0C0000 		_ADR	ZLESS
 2231 1a98 990E0000 		_ADR	INVER
 2232 1a9c 670B0000 		_QBRAN	PARS2
 2232      C81A0000 
 2233 1aa4 790D0000 		_ADR	ONEP
 2234 1aa8 490B0000 		_DONXT	PARS1
 2234      841A0000 
 2235 1ab0 D90B0000 		_ADR	RFROM
 2236 1ab4 490C0000 		_ADR	DROP
 2237 1ab8 250B0000 		_DOLIT	0
 2237      00000000 
 2238 1ac0 590C0000 		_ADR	DUPP
 2239 1ac4 BB090000 		_UNNEST
 2240              	PARS2:
 2241 1ac8 D90B0000 		_ADR	RFROM
 2242              	PARS3:
 2243 1acc 7D0C0000 		_ADR	OVER
 2244 1ad0 690C0000 		_ADR	SWAP
 2245 1ad4 010C0000 		_ADR	TOR
 2246              	PARS4:
ARM GAS  forth.s 			page 77


 2247 1ad8 57100000 		_ADR	TEMP
 2248 1adc AD0B0000 		_ADR	AT
 2249 1ae0 7D0C0000 		_ADR	OVER
 2250 1ae4 CD0B0000 		_ADR	CAT
 2251 1ae8 2D0D0000 		_ADR	SUBB			// scan for delimiter
 2252 1aec 57100000 		_ADR	TEMP
 2253 1af0 AD0B0000 		_ADR	AT
 2254 1af4 D90D0000 		_ADR	BLANK
 2255 1af8 E50E0000 		_ADR	EQUAL
 2256 1afc 670B0000 		_QBRAN	PARS5
 2256      081B0000 
 2257 1b04 8D0C0000 		_ADR	ZLESS
 2258              	PARS5:
 2259 1b08 670B0000 		_QBRAN	PARS6
 2259      2C1B0000 
 2260 1b10 790D0000 		_ADR	ONEP
 2261 1b14 490B0000 		_DONXT	PARS4
 2261      D81A0000 
 2262 1b1c 590C0000 		_ADR	DUPP
 2263 1b20 010C0000 		_ADR	TOR
 2264 1b24 7B0B0000 		_BRAN	PARS7
 2264      401B0000 
 2265              	PARS6:
 2266 1b2c D90B0000 		_ADR	RFROM
 2267 1b30 490C0000 		_ADR	DROP
 2268 1b34 590C0000 		_ADR	DUPP
 2269 1b38 790D0000 		_ADR	ONEP
 2270 1b3c 010C0000 		_ADR	TOR
 2271              	PARS7:
 2272 1b40 7D0C0000 		_ADR	OVER
 2273 1b44 2D0D0000 		_ADR	SUBB
 2274 1b48 D90B0000 		_ADR	RFROM
 2275 1b4c D90B0000 		_ADR	RFROM
 2276 1b50 2D0D0000 		_ADR	SUBB
 2277 1b54 BB090000 		_UNNEST
 2278              	PARS8:
 2279 1b58 7D0C0000 		_ADR	OVER
 2280 1b5c D90B0000 		_ADR	RFROM
 2281 1b60 2D0D0000 		_ADR	SUBB
 2282 1b64 BB090000 		_UNNEST
 2283              	
 2284              	//    PARSE	( c -- b u //  string> )
 2285              	// 	Scan input stream and return counted string delimited by c.
 2286              	
 2287 1b68 301A0000 		.word	_QUEST
 2288 1b6c 05       	_PARSE:	.byte  5
 2289 1b6d 50415253 		.ascii "PARSE"
 2289      45
 2290 1b72 00BF     		.p2align 2 	
 2291              	PARSE:
 2292 1b74 504700BF 		_NEST
 2293 1b78 010C0000 		_ADR	TOR
 2294 1b7c C5130000 		_ADR	TIB
 2295 1b80 81100000 		_ADR	INN
 2296 1b84 AD0B0000 		_ADR	AT
 2297 1b88 1D0D0000 		_ADR	PLUS			// current input buffer pointer
 2298 1b8c 95100000 		_ADR	NTIB
ARM GAS  forth.s 			page 78


 2299 1b90 AD0B0000 		_ADR	AT
 2300 1b94 81100000 		_ADR	INN
 2301 1b98 AD0B0000 		_ADR	AT
 2302 1b9c 2D0D0000 		_ADR	SUBB			// remaining count
 2303 1ba0 D90B0000 		_ADR	RFROM
 2304 1ba4 451A0000 		_ADR	PARS
 2305 1ba8 81100000 		_ADR	INN
 2306 1bac 6D0F0000 		_ADR	PSTOR
 2307 1bb0 BB090000 		_UNNEST
 2308              	
 2309              	//    .(	  ( -- )
 2310              	// 	Output following string up to next ) .
 2311              	
 2312 1bb4 6C1B0000 		.word	_PARSE
 2313 1bb8 82       	_DOTPR:	.byte  IMEDD+2
 2314 1bb9 2E28     		.ascii ".("
 2315 1bbb 00       		.p2align 2 	
 2316              	DOTPR:
 2317 1bbc 504700BF 		_NEST
 2318 1bc0 250B0000 		_DOLIT	')'
 2318      29000000 
 2319 1bc8 751B0000 		_ADR	PARSE
 2320 1bcc BD180000 		_ADR	TYPEE
 2321 1bd0 BB090000 		_UNNEST
 2322              	
 2323              	//    (	   ( -- )
 2324              	// 	Ignore following string up to next ) . A comment.
 2325              	
 2326 1bd4 B81B0000 		.word	_DOTPR
 2327 1bd8 81       	_PAREN:	.byte  IMEDD+1
 2328 1bd9 28       		.ascii "("
 2329 1bda 00BF     		.p2align 2 	
 2330              	PAREN:
 2331 1bdc 504700BF 		_NEST
 2332 1be0 250B0000 		_DOLIT	')'
 2332      29000000 
 2333 1be8 751B0000 		_ADR	PARSE
 2334 1bec 550E0000 		_ADR	DDROP
 2335 1bf0 BB090000 		_UNNEST
 2336              	
 2337              	//    \	   ( -- )
 2338              	// 	Ignore following text till the end of line.
 2339              	
 2340 1bf4 D81B0000 		.word	_PAREN
 2341 1bf8 81       	_BKSLA:	.byte  IMEDD+1
 2342 1bf9 5C       		.byte	'\\'
 2343 1bfa 00BF     		.p2align 2 	
 2344              	BKSLA:
 2345 1bfc 504700BF 		_NEST
 2346 1c00 95100000 		_ADR	NTIB
 2347 1c04 AD0B0000 		_ADR	AT
 2348 1c08 81100000 		_ADR	INN
 2349 1c0c 990B0000 		_ADR	STORE
 2350 1c10 BB090000 		_UNNEST
 2351              	
 2352              	//    CHAR	( -- c )
 2353              	// 	Parse next word and return its first character.
ARM GAS  forth.s 			page 79


 2354              	
 2355 1c14 F81B0000 		.word	_BKSLA
 2356 1c18 04       	_CHAR:	.byte  4
 2357 1c19 43484152 		.ascii "CHAR"
 2358 1c1d 0000BF   		.p2align 2 	
 2359              	CHAR:
 2360 1c20 504700BF 		_NEST
 2361 1c24 D90D0000 		_ADR	BLANK
 2362 1c28 751B0000 		_ADR	PARSE
 2363 1c2c 490C0000 		_ADR	DROP
 2364 1c30 CD0B0000 		_ADR	CAT
 2365 1c34 BB090000 		_UNNEST
 2366              	
 2367              	//    WORD	( c -- a //  string> )
 2368              	// 	Parse a word from input stream and copy it to code dictionary.
 2369              	
 2370 1c38 181C0000 		.word	_CHAR
 2371 1c3c 04       	_WORDD:	.byte  4
 2372 1c3d 574F5244 		.ascii "WORD"
 2373 1c41 0000BF   		.p2align 2 	
 2374              	WORDD:
 2375 1c44 504700BF 		_NEST
 2376 1c48 751B0000 		_ADR	PARSE
 2377 1c4c 8D130000 		_ADR	HERE
 2378 1c50 B90D0000 		_ADR	CELLP
 2379 1c54 85140000 		_ADR	PACKS
 2380 1c58 BB090000 		_UNNEST
 2381              	
 2382              	//    TOKEN	( -- a //  string> )
 2383              	// 	Parse a word from input stream and copy it to name dictionary.
 2384              	
 2385 1c5c 3C1C0000 		.word	_WORDD
 2386 1c60 05       	_TOKEN:	.byte  5
 2387 1c61 544F4B45 		.ascii "TOKEN"
 2387      4E
 2388 1c66 00BF     		.p2align 2 	
 2389              	TOKEN:
 2390 1c68 504700BF 		_NEST
 2391 1c6c D90D0000 		_ADR	BLANK
 2392 1c70 451C0000 		_ADR	WORDD
 2393 1c74 BB090000 		_UNNEST
 2394              	
 2395              	// **************************************************************************
 2396              	//  Dictionary search
 2397              	
 2398              	//    NAME>	( na -- ca )
 2399              	// 	Return a code address given a name address.
 2400              	
 2401 1c78 601C0000 		.word	_TOKEN
 2402 1c7c 05       	_NAMET:	.byte  5
 2403 1c7d 4E414D45 		.ascii "NAME>"
 2403      3E
 2404 1c82 00BF     		.p2align 2 	
 2405              	NAMET:
 2406 1c84 504700BF 		_NEST
 2407 1c88 B50F0000 		_ADR	COUNT
 2408 1c8c 250B0000 		_DOLIT	0x1F
ARM GAS  forth.s 			page 80


 2408      1F000000 
 2409 1c94 9D0C0000 		_ADR	ANDD
 2410 1c98 1D0D0000 		_ADR	PLUS
 2411 1c9c D9120000 		_ADR	ALGND
 2412 1ca0 BB090000 		_UNNEST
 2413              	
 2414              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2415              	// 	Compare u bytes in two strings. Return 0 if identical.
 2416              	//
 2417              	//  Picatout 2020-12-01, 
 2418              	//      Because of problem with .align directive that
 2419              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2420              	// 		words  to do a byte by byte comparison. 
 2421              	//
 2422 1ca4 7C1C0000 		.word	_NAMET
 2423 1ca8 05       	_SAMEQ:	.byte  5
 2424 1ca9 53414D45 		.ascii "SAME?"
 2424      3F
 2425 1cae 00BF     		.p2align 2	
 2426              	SAMEQ:
 2427 1cb0 504700BF 		_NEST
 2428 1cb4 010C0000 		_ADR	TOR
 2429 1cb8 7B0B0000 		_BRAN	SAME2
 2429      FC1C0000 
 2430              	SAME1:
 2431 1cc0 7D0C0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2432 1cc4 ED0B0000 		_ADR	RAT   // a1 a2 a1 u 
 2433 1cc8 1D0D0000 		_ADR	PLUS  // a1 a2 a1+u 
 2434 1ccc CD0B0000 		_ADR	CAT	   // a1 a2 c1    		
 2435 1cd0 7D0C0000 		_ADR	OVER  // a1 a2 c1 a2 
 2436 1cd4 ED0B0000 		_ADR	RAT    
 2437 1cd8 1D0D0000 		_ADR	PLUS    
 2438 1cdc CD0B0000 		_ADR	CAT	  // a1 a2 c1 c2
 2439 1ce0 2D0D0000 		_ADR	SUBB  
 2440 1ce4 2D0E0000 		_ADR	QDUP
 2441 1ce8 670B0000 		_QBRAN	SAME2
 2441      FC1C0000 
 2442 1cf0 D90B0000 		_ADR	RFROM
 2443 1cf4 490C0000 		_ADR	DROP
 2444 1cf8 BB090000 		_UNNEST	// strings not equal
 2445              	SAME2:
 2446 1cfc 490B0000 		_DONXT	SAME1
 2446      C01C0000 
 2447 1d04 250B0000 		_DOLIT	0
 2447      00000000 
 2448 1d0c BB090000 		_UNNEST	// strings equal
 2449              	
 2450              	//    find	( a na -- ca na | a F )
 2451              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2452              	
 2453              	//  Picatout 2020-12-01,  
 2454              	//		Modified from original. See comment for word "SAME?" 
 2455              	
 2456              	// 	.word	_SAMEQ
 2457              	// _FIND	.byte  4
 2458              	// 	.ascii "find"
 2459              	// 	.p2align 2 	
ARM GAS  forth.s 			page 81


 2460              	FIND:
 2461 1d10 504700BF 		_NEST
 2462 1d14 690C0000 		_ADR	SWAP			// na a	
 2463 1d18 B50F0000 		_ADR	COUNT			// na a+1 count
 2464 1d1c 590C0000 		_ADR	DUPP 
 2465 1d20 57100000 		_ADR	TEMP
 2466 1d24 990B0000 		_ADR	STORE			// na a+1 count 
 2467 1d28 010C0000 		_ADR  TOR		// na a+1  R: count  
 2468 1d2c 690C0000 		_ADR	SWAP			// a+1 na
 2469              	FIND1:
 2470 1d30 590C0000 		_ADR	DUPP			// a+1 na na
 2471 1d34 670B0000 		_QBRAN	FIND6	// end of vocabulary
 2471      881D0000 
 2472 1d3c 590C0000 		_ADR	DUPP			// a+1 na na
 2473 1d40 CD0B0000 		_ADR	CAT			// a+1 na name1
 2474 1d44 250B0000 		_DOLIT	MASKK
 2474      1FFFFFFF 
 2475 1d4c 9D0C0000 		_ADR	ANDD
 2476 1d50 ED0B0000 		_ADR	RAT			// a+1 na name1 count 
 2477 1d54 C50C0000 		_ADR	XORR			// a+1 na,  same length?
 2478 1d58 670B0000 		_QBRAN	FIND2
 2478      701D0000 
 2479 1d60 C90D0000 		_ADR	CELLM			// a+1 la
 2480 1d64 AD0B0000 		_ADR	AT			// a+1 next_na
 2481 1d68 7B0B0000 		_BRAN	FIND1			// try next word
 2481      301D0000 
 2482              	FIND2:   
 2483 1d70 790D0000 		_ADR	ONEP			// a+1 na+1
 2484 1d74 57100000 		_ADR	TEMP
 2485 1d78 AD0B0000 		_ADR	AT			// a+1 na+1 count
 2486 1d7c B11C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2487              	FIND3:	
 2488 1d80 7B0B0000 		_BRAN	FIND4
 2488      A01D0000 
 2489              	FIND6:	
 2490 1d88 D90B0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2491 1d8c 490C0000 		_ADR	DROP			// a+1 0
 2492 1d90 690C0000 		_ADR	SWAP			// 0 a+1
 2493 1d94 890D0000 		_ADR	ONEM			// 0 a
 2494 1d98 690C0000 		_ADR	SWAP			// a 0 
 2495 1d9c BB090000 		_UNNEST			// return without a match
 2496              	FIND4:	
 2497 1da0 670B0000 		_QBRAN	FIND5			// a+1 na+1
 2497      BC1D0000 
 2498 1da8 890D0000 		_ADR	ONEM			// a+1 na
 2499 1dac C90D0000 		_ADR	CELLM			// a+4 la
 2500 1db0 AD0B0000 		_ADR	AT			// a+1 next_na
 2501 1db4 7B0B0000 		_BRAN	FIND1			// compare next name
 2501      301D0000 
 2502              	FIND5:	
 2503 1dbc D90B0000 		_ADR	RFROM			// a+1 na+1 count
 2504 1dc0 490C0000 		_ADR	DROP			// a+1 na+1
 2505 1dc4 690C0000 		_ADR	SWAP			// na+1 a+1
 2506 1dc8 490C0000 		_ADR	DROP			// na+1
 2507 1dcc 890D0000 		_ADR	ONEM			// na
 2508 1dd0 590C0000 		_ADR	DUPP			// na na
 2509 1dd4 851C0000 		_ADR	NAMET			// na ca
ARM GAS  forth.s 			page 82


 2510 1dd8 690C0000 		_ADR	SWAP			// ca na
 2511 1ddc BB090000 		_UNNEST			//  return with a match
 2512              	
 2513              	//    NAME?	( a -- ca na | a F )
 2514              	// 	Search all context vocabularies for a string.
 2515              	
 2516 1de0 A81C0000 		.word	_SAMEQ
 2517 1de4 05       	_NAMEQ:	.byte  5
 2518 1de5 4E414D45 		.ascii "NAME?"
 2518      3F
 2519 1dea 00BF     		.p2align 2 	
 2520              	NAMEQ:
 2521 1dec 504700BF 		_NEST
 2522 1df0 D5100000 		_ADR	CNTXT
 2523 1df4 AD0B0000 		_ADR	AT
 2524 1df8 111D0000 		_ADR	FIND
 2525 1dfc BB090000 		_UNNEST
 2526              	
 2527              	// **************************************************************************
 2528              	//  Terminal input
 2529              	
 2530              	//    	  ( bot eot cur -- bot eot cur )
 2531              	// 	Backup the cursor by one character.
 2532              	
 2533              	// 	.word	_NAMEQ
 2534              	// _BKSP	.byte  2
 2535              	// 	.ascii "^H"
 2536              	// 	.p2align 2 	
 2537              	BKSP:
 2538 1e00 504700BF 		_NEST
 2539 1e04 010C0000 		_ADR	TOR
 2540 1e08 7D0C0000 		_ADR	OVER
 2541 1e0c D90B0000 		_ADR	RFROM
 2542 1e10 690C0000 		_ADR	SWAP
 2543 1e14 7D0C0000 		_ADR	OVER
 2544 1e18 C50C0000 		_ADR	XORR
 2545 1e1c 670B0000 		_QBRAN	BACK1
 2545      481E0000 
 2546 1e24 250B0000 		_DOLIT	BKSPP
 2546      08000000 
 2547 1e2c 010B0000 		_ADR	TECHO
 2548 1e30 890D0000 		_ADR	ONEM
 2549 1e34 D90D0000 		_ADR	BLANK
 2550 1e38 010B0000 		_ADR	TECHO
 2551 1e3c 250B0000 		_DOLIT	BKSPP
 2551      08000000 
 2552 1e44 010B0000 		_ADR	TECHO
 2553              	BACK1:
 2554 1e48 BB090000 		  _UNNEST
 2555              	
 2556              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2557              	// 	Accept and echo the key stroke and bump the cursor.
 2558              	
 2559              	// 	.word	_BKSP
 2560              	// _TAP	.byte  3
 2561              	// 	.ascii "TAP"
 2562              	// 	.p2align 2 	
ARM GAS  forth.s 			page 83


 2563              	TAP:
 2564 1e4c 504700BF 		_NEST
 2565 1e50 590C0000 		_ADR	DUPP
 2566 1e54 010B0000 		_ADR	TECHO
 2567 1e58 7D0C0000 		_ADR	OVER
 2568 1e5c B90B0000 		_ADR	CSTOR
 2569 1e60 790D0000 		_ADR	ONEP
 2570 1e64 BB090000 		_UNNEST
 2571              	
 2572              	//    kTAP	( bot eot cur c -- bot eot cur )
 2573              	// 	Process a key stroke, CR or backspace.
 2574              	
 2575              	// 	.word	_TAP
 2576              	// _KTAP	.byte  4
 2577              	// 	.ascii "kTAP"
 2578              	// 	.p2align 2 	
 2579              	KTAP:
 2580              	TTAP:
 2581 1e68 504700BF 		_NEST
 2582 1e6c 590C0000 		_ADR	DUPP
 2583 1e70 250B0000 		_DOLIT	CRR
 2583      0D000000 
 2584 1e78 C50C0000 		_ADR	XORR
 2585 1e7c 670B0000 		_QBRAN  KTAP2
 2585      AC1E0000 
 2586 1e84 250B0000 		_DOLIT	BKSPP
 2586      08000000 
 2587 1e8c C50C0000 		_ADR	XORR
 2588 1e90 670B0000 		_QBRAN	KTAP1
 2588      A41E0000 
 2589 1e98 D90D0000 		_ADR	BLANK
 2590 1e9c 4D1E0000 		_ADR	TAP
 2591 1ea0 BB090000 		_UNNEST
 2592              	//	.word	0			// patch
 2593              	KTAP1:
 2594 1ea4 011E0000 		_ADR	BKSP
 2595 1ea8 BB090000 		_UNNEST
 2596              	KTAP2:
 2597 1eac 490C0000 		_ADR	DROP
 2598 1eb0 690C0000 		_ADR	SWAP
 2599 1eb4 490C0000 		_ADR	DROP
 2600 1eb8 590C0000 		_ADR	DUPP
 2601 1ebc BB090000 		_UNNEST
 2602              	
 2603              	//    ACCEPT	( b u -- b u )
 2604              	// 	Accept characters to input buffer. Return with actual count.
 2605              	
 2606 1ec0 E41D0000 		.word	_NAMEQ
 2607 1ec4 06       	_ACCEP:	.byte  6
 2608 1ec5 41434345 		.ascii "ACCEPT"
 2608      5054
 2609 1ecb 00       		.p2align 2 	
 2610              	ACCEP:
 2611 1ecc 504700BF 		_NEST
 2612 1ed0 7D0C0000 		_ADR	OVER
 2613 1ed4 1D0D0000 		_ADR	PLUS
 2614 1ed8 7D0C0000 		_ADR	OVER
ARM GAS  forth.s 			page 84


 2615              	ACCP1:
 2616 1edc 690E0000 		_ADR	DDUP
 2617 1ee0 C50C0000 		_ADR	XORR
 2618 1ee4 670B0000 		_QBRAN	ACCP4
 2618      241F0000 
 2619 1eec 49180000 		_ADR	KEY
 2620 1ef0 590C0000 		_ADR	DUPP
 2621 1ef4 D90D0000 		_ADR	BLANK
 2622 1ef8 250B0000 		_DOLIT 127
 2622      7F000000 
 2623 1f00 61110000 		_ADR	WITHI
 2624 1f04 670B0000 		_QBRAN	ACCP2
 2624      181F0000 
 2625 1f0c 4D1E0000 		_ADR	TAP
 2626 1f10 7B0B0000 		_BRAN	ACCP3
 2626      1C1F0000 
 2627              	ACCP2:
 2628 1f18 691E0000 		_ADR	KTAP
 2629              	ACCP3:	  
 2630 1f1c 7B0B0000 		_BRAN	ACCP1
 2630      DC1E0000 
 2631              	ACCP4:
 2632 1f24 490C0000 		_ADR	DROP
 2633 1f28 7D0C0000 		_ADR	OVER
 2634 1f2c 2D0D0000 		_ADR	SUBB
 2635 1f30 BB090000 		_UNNEST
 2636              	
 2637              	//    QUERY	( -- )
 2638              	// 	Accept input stream to terminal input buffer.
 2639              	
 2640 1f34 C41E0000 		.word	_ACCEP
 2641 1f38 05       	_QUERY:	.byte  5
 2642 1f39 51554552 		.ascii "QUERY"
 2642      59
 2643 1f3e 00BF     		.p2align 2 	
 2644              	QUERY:
 2645 1f40 504700BF 		_NEST
 2646 1f44 C5130000 		_ADR	TIB
 2647 1f48 250B0000 		_DOLIT 80
 2647      50000000 
 2648 1f50 CD1E0000 		_ADR	ACCEP
 2649 1f54 95100000 		_ADR	NTIB
 2650 1f58 990B0000 		_ADR	STORE
 2651 1f5c 490C0000 		_ADR	DROP
 2652 1f60 250B0000 		_DOLIT	0
 2652      00000000 
 2653 1f68 81100000 		_ADR	INN
 2654 1f6c 990B0000 		_ADR	STORE
 2655 1f70 BB090000 		_UNNEST
 2656              	
 2657              	// **************************************************************************
 2658              	//  Error handling
 2659              	
 2660              	//    ABORT	( a -- )
 2661              	// 	Reset data stack and jump to QUIT.
 2662              	
 2663 1f74 381F0000 		.word	_QUERY
ARM GAS  forth.s 			page 85


 2664 1f78 05       	_ABORT:	.byte  5
 2665 1f79 41424F52 		.ascii "ABORT"
 2665      54
 2666 1f7e 00BF     		.p2align 2 	
 2667              	ABORT:
 2668 1f80 504700BF 		_NEST
 2669              	ABORT1:
 2670 1f84 69180000 		_ADR	SPACE
 2671 1f88 B50F0000 		_ADR	COUNT
 2672 1f8c BD180000 		_ADR	TYPEE
 2673 1f90 250B0000 		_DOLIT	0X3F
 2673      3F000000 
 2674 1f98 010B0000 		_ADR	EMIT
 2675 1f9c F1180000 		_ADR	CR
 2676 1fa0 09210000 		_ADR	PRESE
 2677 1fa4 7B0B0000 		_BRAN	QUIT
 2677      28210000 
 2678              	
 2679              	//    _abort"	( f -- )
 2680              	// 	Run time routine of ABORT" . Abort with a message.
 2681              	
 2682              	// 	.word	_ABORT
 2683              	// _ABORQ	.byte  COMPO+6
 2684              	// 	.ascii "abort\""
 2685              	// 	.p2align 2 	
 2686              	ABORQ:
 2687 1fac 504700BF 		_NEST
 2688 1fb0 11190000 		_ADR	DOSTR
 2689 1fb4 690C0000 		_ADR	SWAP 
 2690 1fb8 670B0000 		_QBRAN	1f	// text flag
 2690      C81F0000 
 2691 1fc0 7B0B0000 		_BRAN	ABORT1
 2691      841F0000 
 2692              	1:
 2693 1fc8 490C0000 		_ADR	DROP
 2694 1fcc BB090000 		_UNNEST			// drop error
 2695              	
 2696              	// **************************************************************************
 2697              	//  The text interpreter
 2698              	
 2699              	//    $INTERPRET  ( a -- )
 2700              	// 	Interpret a word. If failed, try to convert it to an integer.
 2701              	
 2702 1fd0 781F0000 		.word	_ABORT
 2703 1fd4 0A       	_INTER:	.byte  10
 2704 1fd5 2424494E 		.ascii "$$INTERPRET"
 2704      54455250 
 2704      524554
 2705              		.p2align 2 	
 2706              	INTER:
 2707 1fe0 504700BF 		_NEST
 2708 1fe4 ED1D0000 		_ADR	NAMEQ
 2709 1fe8 2D0E0000 		_ADR	QDUP	// ?defined
 2710 1fec 670B0000 		_QBRAN	INTE1
 2710      20200000 
 2711 1ff4 AD0B0000 		_ADR	AT
 2712 1ff8 250B0000 		_DOLIT	COMPO
ARM GAS  forth.s 			page 86


 2712      40000000 
 2713 2000 9D0C0000 		_ADR	ANDD	// ?compile only lexicon bits
 2714 2004 AD1F0000 		_ABORQ	13," compile only"
 2714      0D20636F 
 2714      6D70696C 
 2714      65206F6E 
 2714      6C7900BF 
 2715 2018 3D0B0000 		_ADR	EXECU
 2716 201c BB090000 		_UNNEST			// execute defined word
 2717              	INTE1:
 2718 2020 11170000 		_ADR	NUMBQ
 2719 2024 670B0000 		_QBRAN	INTE2
 2719      30200000 
 2720 202c BB090000 		_UNNEST
 2721              	INTE2:
 2722 2030 811F0000 		_ADR	ABORT	// error
 2723              	
 2724              	//    [	   ( -- )
 2725              	// 	Start the text interpreter.
 2726              	
 2727 2034 D41F0000 		.word	_INTER
 2728 2038 81       	_LBRAC:	.byte  IMEDD+1
 2729 2039 5B       		.ascii "["
 2730 203a 00BF     		.p2align 2 	
 2731              	LBRAC:
 2732 203c 504700BF 		_NEST
 2733 2040 250B0000 		_DOLIT	INTER
 2733      E01F0000 
 2734 2048 A9100000 		_ADR	TEVAL
 2735 204c 990B0000 		_ADR	STORE
 2736 2050 BB090000 		_UNNEST
 2737              	
 2738              	//    .OK	 ( -- )
 2739              	// 	Display "ok" only while interpreting.
 2740              	
 2741 2054 38200000 		.word	_LBRAC
 2742 2058 03       	_DOTOK:	.byte  3
 2743 2059 2E4F4B   		.ascii ".OK"
 2744              		.p2align 2 	
 2745              	DOTOK:
 2746 205c 504700BF 		_NEST
 2747 2060 250B0000 		_DOLIT	INTER
 2747      E01F0000 
 2748 2068 A9100000 		_ADR	TEVAL
 2749 206c AD0B0000 		_ADR	AT
 2750 2070 E50E0000 		_ADR	EQUAL
 2751 2074 670B0000 		_QBRAN	DOTO1
 2751      84200000 
 2752 207c 59190000 		_DOTQP	3," ok"
 2752      03206F6B 
 2753              	DOTO1:
 2754 2084 F1180000 		_ADR	CR
 2755 2088 BB090000 		_UNNEST
 2756              	
 2757              	//    ?STACK	( -- )
 2758              	// 	Abort if the data stack underflows.
 2759              	
ARM GAS  forth.s 			page 87


 2760 208c 58200000 		.word	_DOTOK
 2761 2090 06       	_QSTAC:	.byte  6
 2762 2091 3F535441 		.ascii "?STACK"
 2762      434B
 2763 2097 00       		.p2align 2 	
 2764              	QSTAC:
 2765 2098 504700BF 		_NEST
 2766 209c 41130000 		_ADR	DEPTH
 2767 20a0 8D0C0000 		_ADR	ZLESS	// check only for underflow
 2768 20a4 AD1F0000 		_ABORQ	9,"underflow"
 2768      09756E64 
 2768      6572666C 
 2768      6F7700BF 
 2769 20b4 BB090000 		_UNNEST
 2770              	
 2771              	//    EVAL	( -- )
 2772              	// 	Interpret the input stream.
 2773              	
 2774 20b8 90200000 		.word	_QSTAC
 2775 20bc 04       	_EVAL:	.byte  4
 2776 20bd 4556414C 		.ascii "EVAL"
 2777 20c1 0000BF   		.p2align 2 	
 2778              	EVAL:
 2779 20c4 504700BF 		_NEST
 2780              	EVAL1:
 2781 20c8 691C0000 	    _ADR	TOKEN
 2782 20cc 590C0000 		_ADR	DUPP
 2783 20d0 CD0B0000 		_ADR	CAT	// ?input stream empty
 2784 20d4 670B0000 		_QBRAN	EVAL2
 2784      F0200000 
 2785 20dc A9100000 		_ADR	TEVAL
 2786 20e0 DD130000 		_ADR	ATEXE
 2787 20e4 99200000 		_ADR	QSTAC	// evaluate input, check stack
 2788 20e8 7B0B0000 		_BRAN	EVAL1
 2788      C8200000 
 2789              	EVAL2:
 2790 20f0 490C0000 		_ADR	DROP
 2791 20f4 5D200000 		_ADR	DOTOK
 2792 20f8 BB090000 		_UNNEST	// prompt
 2793              	
 2794              	//    PRESET	( -- )
 2795              	// 	Reset data stack pointer and the terminal input buffer.
 2796              	
 2797 20fc BC200000 		.word	_EVAL
 2798 2100 06       	_PRESE:	.byte  6
 2799 2101 50524553 		.ascii "PRESET"
 2799      4554
 2800 2107 00       		.p2align 2 	
 2801              	PRESE:
 2802 2108 504700BF 		_NEST 
 2803 210c 250B0000 		_DOLIT SPP 
 2803      00FF0120 
 2804 2114 250C0000 		_ADR SPSTOR 
 2805 2118 BB090000 		_UNNEST 
 2806              	
 2807              	//    QUIT	( -- )
 2808              	// 	Reset return stack pointer and start text interpreter.
ARM GAS  forth.s 			page 88


 2809              	
 2810 211c 00210000 		.word	_PRESE
 2811 2120 04       	_QUIT:	.byte  4
 2812 2121 51554954 		.ascii "QUIT"
 2813 2125 0000BF   		.p2align 2 	
 2814              	QUIT:
 2815 2128 250B0000 		_DOLIT RPP 
 2815      80FF0120 
 2816 2130 150C0000 		_ADR RPSTOR 
 2817              	QUIT1:
 2818 2134 3D200000 		_ADR	LBRAC			// start interpretation
 2819              	QUIT2:
 2820 2138 411F0000 		_ADR	QUERY			// get input
 2821 213c C5200000 		_ADR	EVAL
 2822 2140 7B0B0000 		_BRAN	QUIT2	// continue till error
 2822      38210000 
 2823              	
 2824 2148 20210000 		.word _QUIT
 2825 214c 06       	_FORGET: .byte 6 
 2826 214d 464F5247 		.ascii "FORGET"
 2826      4554
 2827 2153 00       		.p2align 2
 2828              	FORGET:
 2829 2154 504700BF 		_NEST 
 2830 2158 691C0000 		_ADR TOKEN 
 2831 215c 590C0000 		_ADR DUPP 
 2832 2160 670B0000 		_QBRAN 9f 
 2832      9C210000 
 2833 2168 ED1D0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2834 216c 2D0E0000 		_ADR QDUP 
 2835 2170 670B0000 		_QBRAN 8f
 2835      98210000 
 2836 2178 C90D0000 		_ADR CELLM // ( ca la )
 2837 217c 590C0000 		_ADR DUPP 
 2838 2180 E9100000 		_ADR CPP   
 2839 2184 990B0000 		_ADR STORE
 2840 2188 AD0B0000 		_ADR AT 
 2841 218c 11110000 		_ADR LAST 
 2842 2190 990B0000 		_ADR STORE
 2843 2194 01260000 		_ADR OVERT 
 2844 2198 490C0000 	8:  _ADR DROP 
 2845 219c BB090000 	9:	_UNNEST 
 2846              	
 2847              		.p2align 2 
 2848              	
 2849              	// **************************************************************************
 2850              	//  The compiler
 2851              	
 2852              	//    '	   ( -- ca )
 2853              	// 	Search context vocabularies for the next word in input stream.
 2854              	
 2855 21a0 4C210000 		.word	_FORGET
 2856 21a4 01       	_TICK:	.byte  1
 2857 21a5 27       		.ascii "'"
 2858 21a6 00BF     		.p2align 2 	
 2859              	TICK:
 2860 21a8 504700BF 		_NEST
ARM GAS  forth.s 			page 89


 2861 21ac 691C0000 		_ADR	TOKEN
 2862 21b0 ED1D0000 		_ADR	NAMEQ	// ?defined
 2863 21b4 670B0000 		_QBRAN	TICK1
 2863      C0210000 
 2864 21bc BB090000 		_UNNEST	// yes, push code address
 2865              	TICK1:	
 2866 21c0 811F0000 		_ADR ABORT	// no, error
 2867              	
 2868              	//    ALLOT	( n -- )
 2869              	// 	Allocate n bytes to the ram area.
 2870              	
 2871 21c4 A4210000 		.word	_TICK
 2872 21c8 05       	_ALLOT:	.byte  5
 2873 21c9 414C4C4F 		.ascii "ALLOT"
 2873      54
 2874 21ce 00BF     		.p2align 2 	
 2875              	ALLOT:
 2876 21d0 504700BF 		_NEST
 2877 21d4 E9100000 		_ADR	CPP
 2878 21d8 6D0F0000 		_ADR	PSTOR
 2879 21dc BB090000 		_UNNEST			// adjust code pointer
 2880              	
 2881              	//    ,	   ( w -- )
 2882              	// 	Compile an integer into the code dictionary.
 2883              	
 2884 21e0 C8210000 		.word	_ALLOT
 2885 21e4 012C     	_COMMA:	.byte  1,','
 2886 21e6 00BF     		.p2align 2 	
 2887              	COMMA:
 2888 21e8 504700BF 		_NEST
 2889 21ec 8D130000 		_ADR	HERE
 2890 21f0 590C0000 		_ADR	DUPP
 2891 21f4 B90D0000 		_ADR	CELLP	// cell boundary
 2892 21f8 E9100000 		_ADR	CPP
 2893 21fc 990B0000 		_ADR	STORE
 2894 2200 990B0000 		_ADR	STORE
 2895 2204 BB090000 		_UNNEST	// adjust code pointer, compile
 2896              		.p2align 2 
 2897              	//    [COMPILE]   ( -- //  string> )
 2898              	// 	Compile the next immediate word into code dictionary.
 2899              	
 2900 2208 E4210000 		.word	_COMMA
 2901 220c 89       	_BCOMP:	.byte  IMEDD+9
 2902 220d 5B434F4D 		.ascii "[COMPILE]"
 2902      50494C45 
 2902      5D
 2903 2216 00BF     		.p2align 2 	
 2904              	BCOMP:
 2905 2218 504700BF 		_NEST
 2906 221c A9210000 		_ADR	TICK
 2907 2220 E9210000 		_ADR	COMMA
 2908 2224 BB090000 		_UNNEST
 2909              	
 2910              	//    COMPILE	( -- )
 2911              	// 	Compile the next address in colon list to code dictionary.
 2912              	
 2913 2228 0C220000 		.word	_BCOMP
ARM GAS  forth.s 			page 90


 2914 222c 47       	_COMPI:	.byte  COMPO+7
 2915 222d 434F4D50 		.ascii "COMPILE"
 2915      494C45
 2916              		.p2align 2 	
 2917              	COMPI:
 2918 2234 504700BF 		_NEST
 2919 2238 D90B0000 		_ADR	RFROM
 2920 223c 590C0000 		_ADR	DUPP 
 2921 2240 AD0B0000 		_ADR	AT
 2922 2244 250B0000 		_DOLIT 1 
 2922      01000000 
 2923 224c B10C0000 		_ADR	ORR 
 2924 2250 E9210000 		_ADR	COMMA 
 2925 2254 B90D0000 		_ADR	CELLP 
 2926 2258 010C0000 		_ADR	TOR 
 2927 225c BB090000 		_UNNEST			// adjust return address
 2928              	
 2929              	//    LITERAL	( w -- )
 2930              	// 	Compile tos to code dictionary as an integer literal.
 2931              	
 2932 2260 2C220000 		.word	_COMPI
 2933 2264 87       	_LITER:	.byte  IMEDD+7
 2934 2265 4C495445 		.ascii "LITERAL"
 2934      52414C
 2935              		.p2align 2 	
 2936              	LITER:
 2937 226c 504700BF 		_NEST
 2938 2270 250B0000 		_COMPI	DOLIT
 2938      240B0000 
 2938      5D260000 
 2939 227c E9210000 		_ADR	COMMA
 2940 2280 BB090000 		_UNNEST
 2941              	
 2942              	//    $,"	( -- )
 2943              	// 	Compile a literal string up to next " .
 2944              	
 2945              	// 	.word	_LITER
 2946              	// _STRCQ	.byte  3
 2947              	// 	.ascii "$,\""
 2948              	// 	.p2align 2 	
 2949              	STRCQ:
 2950 2284 504700BF 		_NEST
 2951 2288 250B0000 		_DOLIT -4
 2951      FCFFFFFF 
 2952 2290 E9100000 		_ADR	CPP
 2953 2294 6D0F0000 		_ADR	PSTOR
 2954 2298 250B0000 		_DOLIT	'\"'
 2954      22000000 
 2955 22a0 451C0000 		_ADR	WORDD			// move word to code dictionary
 2956 22a4 B50F0000 		_ADR	COUNT
 2957 22a8 1D0D0000 		_ADR	PLUS
 2958 22ac D9120000 		_ADR	ALGND			// calculate aligned end of string
 2959 22b0 E9100000 		_ADR	CPP
 2960 22b4 990B0000 		_ADR	STORE
 2961 22b8 BB090000 		_UNNEST 			// adjust the code pointer
 2962              	
 2963              	/*******************
ARM GAS  forth.s 			page 91


 2964              	//  Structures
 2965              	*******************/
 2966              	//    FOR	 ( -- a )
 2967              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2968              	
 2969 22bc 64220000 		.word	_LITER
 2970 22c0 C3       	_FOR:	.byte  COMPO+IMEDD+3
 2971 22c1 464F52   		.ascii "FOR"
 2972              		.p2align 2 	
 2973              	FOR:
 2974 22c4 504700BF 		_NEST
 2975 22c8 250B0000 		_COMPI	TOR
 2975      000C0000 
 2975      5D260000 
 2976 22d4 8D130000 		_ADR	HERE
 2977 22d8 BB090000 		_UNNEST
 2978              	
 2979              	//    BEGIN	( -- a )
 2980              	// 	Start an infinite or indefinite loop structure.
 2981              	
 2982 22dc C0220000 		.word	_FOR
 2983 22e0 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 2984 22e1 42454749 		.ascii "BEGIN"
 2984      4E
 2985 22e6 00BF     		.p2align 2 	
 2986              	BEGIN:
 2987 22e8 504700BF 		_NEST
 2988 22ec 8D130000 		_ADR	HERE
 2989 22f0 BB090000 		_UNNEST
 2990              		.p2align 2 
 2991              	
 2992              	//    NEXT	( a -- )
 2993              	// 	Terminate a FOR-NEXT loop structure.
 2994 22f4 E0220000 		.word	_BEGIN
 2995 22f8 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 2996 22f9 4E455854 		.ascii "NEXT"
 2997 22fd 0000BF   		.p2align 2 	
 2998              	FNEXT:
 2999 2300 504700BF 		_NEST
 3000 2304 250B0000 		_COMPI	DONXT
 3000      480B0000 
 3000      5D260000 
 3001 2310 E9210000 		_ADR	COMMA
 3002 2314 BB090000 		_UNNEST
 3003              	
 3004              	//    UNTIL	( a -- )
 3005              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3006              	
 3007 2318 F8220000 		.word	_FNEXT
 3008 231c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3009 231d 554E5449 		.ascii "UNTIL"
 3009      4C
 3010 2322 00BF     		.p2align 2 	
 3011              	UNTIL:
 3012 2324 504700BF 		_NEST
 3013 2328 250B0000 		_COMPI	QBRAN
 3013      660B0000 
ARM GAS  forth.s 			page 92


 3013      5D260000 
 3014 2334 E9210000 		_ADR	COMMA
 3015 2338 BB090000 		_UNNEST
 3016              	
 3017              	//    AGAIN	( a -- )
 3018              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3019              	
 3020 233c 1C230000 		.word	_UNTIL
 3021 2340 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3022 2341 41474149 		.ascii "AGAIN"
 3022      4E
 3023 2346 00BF     		.p2align 2 	
 3024              	AGAIN:
 3025 2348 504700BF 		_NEST
 3026 234c 250B0000 		_COMPI	BRAN
 3026      7A0B0000 
 3026      5D260000 
 3027 2358 E9210000 		_ADR	COMMA
 3028 235c BB090000 		_UNNEST
 3029              	
 3030              	//    IF	  ( -- A )
 3031              	// 	Begin a conditional branch structure.
 3032              	
 3033 2360 40230000 		.word	_AGAIN
 3034 2364 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3035 2365 4946     		.ascii "IF"
 3036 2367 00       		.p2align 2 	
 3037              	IFF:
 3038 2368 504700BF 		_NEST
 3039 236c 250B0000 		_COMPI	QBRAN
 3039      660B0000 
 3039      5D260000 
 3040 2378 8D130000 		_ADR	HERE
 3041 237c 250B0000 		_DOLIT	4
 3041      04000000 
 3042 2384 E9100000 		_ADR	CPP
 3043 2388 6D0F0000 		_ADR	PSTOR
 3044 238c BB090000 		_UNNEST
 3045              	
 3046              	//    AHEAD	( -- A )
 3047              	// 	Compile a forward branch instruction.
 3048              	
 3049 2390 64230000 		.word	_IFF
 3050 2394 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3051 2395 41484541 		.ascii "AHEAD"
 3051      44
 3052 239a 00BF     		.p2align 2 	
 3053              	AHEAD:
 3054 239c 504700BF 		_NEST
 3055 23a0 250B0000 		_COMPI	BRAN
 3055      7A0B0000 
 3055      5D260000 
 3056 23ac 8D130000 		_ADR	HERE
 3057 23b0 250B0000 		_DOLIT	4
 3057      04000000 
 3058 23b8 E9100000 		_ADR	CPP
 3059 23bc 6D0F0000 		_ADR	PSTOR
ARM GAS  forth.s 			page 93


 3060 23c0 BB090000 		_UNNEST
 3061              	
 3062              	//    REPEAT	( A a -- )
 3063              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3064              	
 3065 23c4 94230000 		.word	_AHEAD
 3066 23c8 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3067 23c9 52455045 		.ascii "REPEAT"
 3067      4154
 3068 23cf 00       		.p2align 2 	
 3069              	REPEA:
 3070 23d0 504700BF 		_NEST
 3071 23d4 49230000 		_ADR	AGAIN
 3072 23d8 8D130000 		_ADR	HERE
 3073 23dc 690C0000 		_ADR	SWAP
 3074 23e0 990B0000 		_ADR	STORE
 3075 23e4 BB090000 		_UNNEST
 3076              	
 3077              	//    THEN	( A -- )
 3078              	// 	Terminate a conditional branch structure.
 3079              	
 3080 23e8 C8230000 		.word	_REPEA
 3081 23ec C4       	_THENN:	.byte  COMPO+IMEDD+4
 3082 23ed 5448454E 		.ascii "THEN"
 3083 23f1 0000BF   		.p2align 2 	
 3084              	THENN:
 3085 23f4 504700BF 		_NEST
 3086 23f8 8D130000 		_ADR	HERE
 3087 23fc 690C0000 		_ADR	SWAP
 3088 2400 990B0000 		_ADR	STORE
 3089 2404 BB090000 		_UNNEST
 3090              	
 3091              	//    AFT	 ( a -- a A )
 3092              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3093              	
 3094 2408 EC230000 		.word	_THENN
 3095 240c C3       	_AFT:	.byte  COMPO+IMEDD+3
 3096 240d 414654   		.ascii "AFT"
 3097              		.p2align 2 	
 3098              	AFT:
 3099 2410 504700BF 		_NEST
 3100 2414 490C0000 		_ADR	DROP
 3101 2418 9D230000 		_ADR	AHEAD
 3102 241c E9220000 		_ADR	BEGIN
 3103 2420 690C0000 		_ADR	SWAP
 3104 2424 BB090000 		_UNNEST
 3105              	
 3106              	//    ELSE	( A -- A )
 3107              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3108              	
 3109 2428 0C240000 		.word	_AFT
 3110 242c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3111 242d 454C5345 		.ascii "ELSE"
 3112 2431 0000BF   		.p2align 2 	
 3113              	ELSEE:
 3114 2434 504700BF 		_NEST
 3115 2438 9D230000 		_ADR	AHEAD
ARM GAS  forth.s 			page 94


 3116 243c 690C0000 		_ADR	SWAP
 3117 2440 F5230000 		_ADR	THENN
 3118 2444 BB090000 		_UNNEST
 3119              	
 3120              	//    WHILE	( a -- A a )
 3121              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3122              	
 3123 2448 2C240000 		.word	_ELSEE
 3124 244c C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3125 244d 5748494C 		.ascii "WHILE"
 3125      45
 3126 2452 00BF     		.p2align 2 	
 3127              	WHILE:
 3128 2454 504700BF 		_NEST
 3129 2458 69230000 		_ADR	IFF
 3130 245c 690C0000 		_ADR	SWAP
 3131 2460 BB090000 		_UNNEST
 3132              	
 3133              	//    ABORT"	( -- //  string> )
 3134              	// 	Conditional abort with an error message.
 3135              	
 3136 2464 4C240000 		.word	_WHILE
 3137 2468 86       	_ABRTQ:	.byte  IMEDD+6
 3138 2469 41424F52 		.ascii "ABORT\""
 3138      5422
 3139 246f 00       		.p2align 2 	
 3140              	ABRTQ:
 3141 2470 504700BF 		_NEST
 3142 2474 250B0000 		_COMPI	ABORQ
 3142      AC1F0000 
 3142      5D260000 
 3143 2480 85220000 		_ADR	STRCQ
 3144 2484 BB090000 		_UNNEST
 3145              	
 3146              	//    $"	( -- //  string> )
 3147              	// 	Compile an inline word literal.
 3148              	
 3149 2488 68240000 		.word	_ABRTQ
 3150 248c 82       	_STRQ:	.byte  IMEDD+2
 3151 248d 2422     		.ascii	"$\""
 3152 248f 00       		.p2align 2 	
 3153              	STRQ:
 3154 2490 504700BF 		_NEST
 3155 2494 250B0000 		_COMPI	STRQP
 3155      3C190000 
 3155      5D260000 
 3156 24a0 85220000 		_ADR	STRCQ
 3157 24a4 BB090000 		_UNNEST
 3158              	
 3159              	//    ."	( -- //  string> )
 3160              	// 	Compile an inline word  literal to be typed out at run time.
 3161              	
 3162 24a8 8C240000 		.word	_STRQ
 3163 24ac C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3164 24ad 2E22     		.ascii	".\""
 3165 24af 00       		.p2align 2 	
 3166              	DOTQ:
ARM GAS  forth.s 			page 95


 3167 24b0 504700BF 		_NEST
 3168 24b4 250B0000 		_COMPI	DOTQP
 3168      58190000 
 3168      5D260000 
 3169 24c0 85220000 		_ADR	STRCQ
 3170 24c4 BB090000 		_UNNEST
 3171              	
 3172              	// **************************************************************************
 3173              	//  Name compiler
 3174              	
 3175              	//    ?UNIQUE	( a -- a )
 3176              	// 	Display a warning message if the word already exists.
 3177              	
 3178 24c8 AC240000 		.word	_DOTQ
 3179 24cc 07       	_UNIQU:	.byte  7
 3180 24cd 3F554E49 		.ascii "?UNIQUE"
 3180      515545
 3181              		.p2align 2 	
 3182              	UNIQU:
 3183 24d4 504700BF 		_NEST
 3184 24d8 590C0000 		_ADR	DUPP
 3185 24dc ED1D0000 		_ADR	NAMEQ			// ?name exists
 3186 24e0 670B0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3186      00250000 
 3187 24e8 59190000 		_DOTQP	7," reDef "		// but warn the user
 3187      07207265 
 3187      44656620 
 3188 24f4 7D0C0000 		_ADR	OVER
 3189 24f8 B50F0000 		_ADR	COUNT
 3190 24fc BD180000 		_ADR	TYPEE			// just in case its not planned
 3191              	UNIQ1:
 3192 2500 490C0000 		_ADR	DROP
 3193 2504 BB090000 		_UNNEST
 3194              	
 3195              	//    $,n	 ( na -- )
 3196              	// 	Build a new dictionary name using the data at na.
 3197              	
 3198              	// 	.word	_UNIQU
 3199              	// _SNAME	.byte  3
 3200              	// 	.ascii "$,n"
 3201              	// 	.p2align 2 	
 3202              	SNAME:
 3203 2508 504700BF 		_NEST
 3204 250c 590C0000 		_ADR	DUPP			//  na na
 3205 2510 CD0B0000 		_ADR	CAT			//  ?null input
 3206 2514 670B0000 		_QBRAN	SNAM1
 3206      50250000 
 3207 251c D5240000 		_ADR	UNIQU			//  na
 3208 2520 11110000 		_ADR	LAST			//  na last
 3209 2524 AD0B0000 		_ADR	AT			//  na la
 3210 2528 E9210000 		_ADR	COMMA			//  na
 3211 252c 590C0000 		_ADR	DUPP			//  na na
 3212 2530 11110000 		_ADR	LAST			//  na na last
 3213 2534 990B0000 		_ADR	STORE			//  na , save na for vocabulary link
 3214 2538 B50F0000 		_ADR	COUNT			//  na+1 count
 3215 253c 1D0D0000 		_ADR	PLUS			//  na+1+count
 3216 2540 D9120000 		_ADR	ALGND			//  word boundary
ARM GAS  forth.s 			page 96


 3217 2544 E9100000 		_ADR	CPP
 3218 2548 990B0000 		_ADR	STORE			//  top of dictionary now
 3219 254c BB090000 		_UNNEST
 3220              	SNAM1:
 3221 2550 3D190000 		_ADR	STRQP
 3222 2554 07       		.byte	7
 3223 2555 206E616D 		.ascii " name? "
 3223      653F20
 3224 255c 811F0000 		_ADR	ABORT
 3225              	
 3226              	//    $COMPILE	( a -- )
 3227              	// 	Compile next word to code dictionary as a token or literal.
 3228              	
 3229 2560 CC240000 		.word	_UNIQU
 3230 2564 08       	_SCOMP:	.byte  8
 3231 2565 24434F4D 		.ascii "$COMPILE"
 3231      50494C45 
 3232 256d 0000BF   		.p2align 2 	
 3233              	SCOMP:
 3234 2570 504700BF 		_NEST
 3235 2574 ED1D0000 		_ADR	NAMEQ
 3236 2578 2D0E0000 		_ADR	QDUP	// defined?
 3237 257c 670B0000 		_QBRAN	SCOM2
 3237      AC250000 
 3238 2584 AD0B0000 		_ADR	AT
 3239 2588 250B0000 		_DOLIT	IMEDD
 3239      80000000 
 3240 2590 9D0C0000 		_ADR	ANDD	// immediate?
 3241 2594 670B0000 		_QBRAN	SCOM1
 3241      A4250000 
 3242 259c 3D0B0000 		_ADR	EXECU
 3243 25a0 BB090000 		_UNNEST			// it's immediate, execute
 3244              	SCOM1:
 3245 25a4 5D260000 		_ADR	CALLC			// it's not immediate, compile
 3246 25a8 BB090000 		_UNNEST	
 3247              	SCOM2:
 3248 25ac 11170000 		_ADR	NUMBQ
 3249 25b0 670B0000 		_QBRAN	SCOM3
 3249      C0250000 
 3250 25b8 6D220000 		_ADR	LITER
 3251 25bc BB090000 		_UNNEST			// compile number as integer
 3252              	SCOM3: // compilation abort 
 3253 25c0 C9250000 		_ADR COLON_ABORT 
 3254 25c4 811F0000 		_ADR	ABORT			// error
 3255              	
 3256              	// before aborting a compilation 
 3257              	// reset HERE and LAST
 3258              	// to previous values. 
 3259              	COLON_ABORT:
 3260 25c8 504700BF 		_NEST 
 3261 25cc 11110000 		_ADR LAST 
 3262 25d0 AD0B0000 		_ADR AT 
 3263 25d4 C90D0000 		_ADR CELLM 
 3264 25d8 590C0000 		_ADR DUPP 
 3265 25dc E9100000 		_ADR CPP  
 3266 25e0 990B0000 		_ADR STORE 
 3267 25e4 AD0B0000 		_ADR AT 
ARM GAS  forth.s 			page 97


 3268 25e8 11110000 		_ADR LAST 
 3269 25ec 990B0000 		_ADR STORE 
 3270 25f0 BB090000 		_UNNEST 
 3271              	
 3272              	//    OVERT	( -- )
 3273              	// 	Link a new word into the current vocabulary.
 3274              	
 3275 25f4 64250000 		.word	_SCOMP
 3276 25f8 05       	_OVERT:	.byte  5
 3277 25f9 4F564552 		.ascii "OVERT"
 3277      54
 3278 25fe 00BF     		.p2align 2 	
 3279              	OVERT:
 3280 2600 504700BF 		_NEST
 3281 2604 11110000 		_ADR	LAST
 3282 2608 AD0B0000 		_ADR	AT
 3283 260c D5100000 		_ADR	CNTXT
 3284 2610 990B0000 		_ADR	STORE
 3285 2614 BB090000 		_UNNEST
 3286              	
 3287              	//    ; 	   ( -- )
 3288              	// 	Terminate a colon definition.
 3289              	
 3290 2618 F8250000 		.word	_OVERT
 3291 261c C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3292 261d 3B       		.ascii ";"
 3293 261e 00BF     		.p2align 2 	
 3294              	SEMIS:
 3295 2620 504700BF 		_NEST
 3296 2624 250B0000 		_DOLIT	UNNEST
 3296      BA090000 
 3297 262c 5D260000 		_ADR	CALLC
 3298 2630 3D200000 		_ADR	LBRAC
 3299 2634 01260000 		_ADR	OVERT
 3300 2638 BB090000 		_UNNEST
 3301              	
 3302              	//    ]	   ( -- )
 3303              	// 	Start compiling the words in the input stream.
 3304              	
 3305 263c 1C260000 		.word	_SEMIS
 3306 2640 01       	_RBRAC:	.byte  1
 3307 2641 5D       		.ascii "]"
 3308 2642 00BF     		.p2align 2 	
 3309              	RBRAC:
 3310 2644 504700BF 		_NEST
 3311 2648 250B0000 		_DOLIT	SCOMP
 3311      70250000 
 3312 2650 A9100000 		_ADR	TEVAL
 3313 2654 990B0000 		_ADR	STORE
 3314 2658 BB090000 		_UNNEST
 3315              	
 3316              	//    BL.W	( ca -- )
 3317              	// 	compile ca.
 3318              	
 3319              	// 	.word	_RBRAC
 3320              	// _CALLC	.byte  5
 3321              	// 	.ascii "call,"
ARM GAS  forth.s 			page 98


 3322              	// 	.p2align 2 	
 3323              	CALLC:
 3324 265c 504700BF 		_NEST
 3325 2660 250B0000 		_DOLIT 1 
 3325      01000000 
 3326 2668 B10C0000 		_ADR ORR 
 3327 266c E9210000 		_ADR COMMA  
 3328 2670 BB090000 		_UNNEST 
 3329              	
 3330              	
 3331              	// 	:	( -- //  string> )
 3332              	// 	Start a new colon definition using next word as its name.
 3333              	
 3334 2674 40260000 		.word	_RBRAC
 3335 2678 01       	_COLON:	.byte  1
 3336 2679 3A       		.ascii ":"
 3337 267a 00BF     		.p2align 2 	
 3338              	COLON:
 3339 267c 504700BF 		_NEST
 3340 2680 691C0000 		_ADR	TOKEN
 3341 2684 09250000 		_ADR	SNAME
 3342 2688 C5090000 		_ADR	COMPI_NEST 
 3343 268c 45260000 		_ADR	RBRAC
 3344 2690 BB090000 		_UNNEST
 3345              	
 3346              	//    IMMEDIATE   ( -- )
 3347              	// 	Make the last compiled word an immediate word.
 3348              	
 3349 2694 78260000 		.word	_COLON
 3350 2698 09       	_IMMED:	.byte  9
 3351 2699 494D4D45 		.ascii "IMMEDIATE"
 3351      44494154 
 3351      45
 3352 26a2 00BF     		.p2align 2 	
 3353              	IMMED:
 3354 26a4 504700BF 		_NEST
 3355 26a8 250B0000 		_DOLIT	IMEDD
 3355      80000000 
 3356 26b0 11110000 		_ADR	LAST
 3357 26b4 AD0B0000 		_ADR	AT
 3358 26b8 AD0B0000 		_ADR	AT
 3359 26bc B10C0000 		_ADR	ORR
 3360 26c0 11110000 		_ADR	LAST
 3361 26c4 AD0B0000 		_ADR	AT
 3362 26c8 990B0000 		_ADR	STORE
 3363 26cc BB090000 		_UNNEST
 3364              	
 3365              	// **************************************************************************
 3366              	//  Defining words
 3367              	
 3368              	//    CONSTANT	( u -- //  string> )
 3369              	// 	Compile a new constant.
 3370              	
 3371 26d0 98260000 		.word	_IMMED
 3372 26d4 08       	_CONST:	.byte  8
 3373 26d5 434F4E53 		.ascii "CONSTANT"
 3373      54414E54 
ARM GAS  forth.s 			page 99


 3374 26dd 0000BF   		.p2align 2 	
 3375              	CONST:
 3376 26e0 504700BF 		_NEST 
 3377 26e4 691C0000 		_ADR	TOKEN
 3378 26e8 09250000 		_ADR	SNAME
 3379 26ec 01260000 		_ADR	OVERT
 3380 26f0 C5090000 		_ADR	COMPI_NEST
 3381 26f4 250B0000 		_DOLIT	DOCON
 3381      E80F0000 
 3382 26fc 5D260000 		_ADR	CALLC
 3383 2700 E9210000 		_ADR	COMMA
 3384 2704 250B0000 		_DOLIT	UNNEST 
 3384      BA090000 
 3385 270c 5D260000 		_ADR	CALLC  
 3386 2710 BB090000 		_UNNEST
 3387              	
 3388              		.p2align 2 
 3389              	// doDOES> ( -- a )
 3390              	// runtime action of DOES> 
 3391              	// leave parameter field address on stack 
 3392              	DODOES:
 3393 2714 504700BF 		_NEST 
 3394 2718 D90B0000 		_ADR	RFROM
 3395 271c B90D0000 		_ADR	CELLP 
 3396 2720 790D0000 		_ADR	ONEP  
 3397 2724 11110000 		_ADR LAST 
 3398 2728 AD0B0000 		_ADR AT
 3399 272c 851C0000 		_ADR NAMET 
 3400 2730 B90D0000 		_ADR CELLP 
 3401 2734 990B0000 		_ADR STORE  
 3402 2738 BB090000 		_UNNEST 
 3403              	
 3404              		.p2align 2
 3405              	//  DOES> ( -- )
 3406              	//  compile time action 
 3407 273c D4260000 		.word _CONST   
 3408 2740 C5       	_DOES: .byte IMEDD+COMPO+5 
 3409 2741 444F4553 		.ascii "DOES>"
 3409      3E
 3410 2746 00BF     		.p2align 2
 3411              	DOES: 
 3412 2748 504700BF 		_NEST 
 3413 274c 250B0000 		_DOLIT DODOES 
 3413      14270000 
 3414 2754 5D260000 		_ADR CALLC 
 3415 2758 250B0000 		_DOLIT	UNNEST
 3415      BA090000 
 3416 2760 5D260000 		_ADR	CALLC 
 3417 2764 C5090000 		_ADR COMPI_NEST
 3418 2768 250B0000 		_DOLIT RFROM 
 3418      D80B0000 
 3419 2770 5D260000 		_ADR	CALLC
 3420 2774 BB090000 		_UNNEST 
 3421              	
 3422              	
 3423              	
 3424              	//  DEFER@ ( "name" -- a )
ARM GAS  forth.s 			page 100


 3425              	//  return value of code field of defered function. 
 3426 2778 40270000 		.word _DOES 
 3427 277c 06       	_DEFERAT: .byte 6 
 3428 277d 44454645 		.ascii "DEFER@"
 3428      5240
 3429 2783 00       		.p2align 2 
 3430              	DEFERAT: 
 3431 2784 504700BF 		_NEST 
 3432 2788 A9210000 		_ADR TICK
 3433 278c B90D0000 		_ADR CELLP 
 3434 2790 AD0B0000 		_ADR AT 
 3435 2794 890D0000 		_ADR ONEM 
 3436 2798 BB090000 		_UNNEST 
 3437              	
 3438              	// DEFER! ( "name1" "name2" -- )
 3439              	// assign an action to a defered word 
 3440 279c 7C270000 		.word _DEFERAT 
 3441 27a0 06       	_DEFERSTO: .byte 6 
 3442 27a1 44454645 		.ascii "DEFER!" 
 3442      5221
 3443 27a7 00       		.p2align 2 
 3444              	DEFERSTO:
 3445 27a8 504700BF 		_NEST 
 3446 27ac A9210000 		_ADR TICK 
 3447 27b0 790D0000 		_ADR ONEP 
 3448 27b4 A9210000 		_ADR TICK 
 3449 27b8 B90D0000 		_ADR CELLP 
 3450 27bc 990B0000 		_ADR STORE 
 3451 27c0 BB090000 		_UNNEST
 3452              	
 3453              	//  DEFER ( "name" -- )
 3454              	//  create a defered definition
 3455 27c4 A0270000 		.word _DEFERSTO  
 3456 27c8 05       	_DEFER: .byte 5 
 3457 27c9 44454645 		.ascii "DEFER"
 3457      52
 3458 27ce 00BF     		.p2align 2
 3459              	DEFER:
 3460 27d0 504700BF 		_NEST 
 3461 27d4 21280000 		_ADR CREAT 
 3462 27d8 250B0000 		_DOLIT UNNEST 
 3462      BA090000 
 3463 27e0 5D260000 		_ADR CALLC 
 3464 27e4 250B0000 		_DOLIT DEFER_NOP
 3464      08280000 
 3465 27ec 790D0000 		_ADR ONEP 
 3466 27f0 11110000 		_ADR LAST 
 3467 27f4 AD0B0000 		_ADR AT 
 3468 27f8 851C0000 		_ADR NAMET 
 3469 27fc B90D0000 		_ADR CELLP 
 3470 2800 990B0000 		_ADR STORE 
 3471 2804 BB090000 		_UNNEST 
 3472              	DEFER_NOP:
 3473 2808 504700BF 		_NEST  
 3474 280c 210B0000 		_ADR NOP 
 3475 2810 BB090000 		_UNNEST 
 3476              	
ARM GAS  forth.s 			page 101


 3477              	//    CREATE	( -- //  string> )
 3478              	// 	Compile a new array entry without allocating code space.
 3479              	
 3480 2814 C8270000 		.word	_DEFER 
 3481 2818 06       	_CREAT:	.byte  6
 3482 2819 43524541 		.ascii "CREATE"
 3482      5445
 3483 281f 00       		.p2align 2 	
 3484              	CREAT:
 3485 2820 504700BF 		_NEST 
 3486 2824 691C0000 		_ADR	TOKEN
 3487 2828 09250000 		_ADR	SNAME
 3488 282c 01260000 		_ADR	OVERT
 3489 2830 C5090000 		_ADR	COMPI_NEST 
 3490 2834 250B0000 		_DOLIT	DOVAR
 3490      DC0F0000 
 3491 283c 5D260000 		_ADR	CALLC
 3492 2840 BB090000 		_UNNEST
 3493              	
 3494              	//    VARIABLE	( -- //  string> )
 3495              	// 	Compile a new variable initialized to 0.
 3496              	
 3497 2844 18280000 		.word	_CREAT
 3498 2848 08       	_VARIA:	.byte  8
 3499 2849 56415249 		.ascii "VARIABLE"
 3499      41424C45 
 3500 2851 0000BF   		.p2align 2 	
 3501              	VARIA:
 3502 2854 504700BF 		_NEST
 3503 2858 21280000 		_ADR	CREAT
 3504 285c 250B0000 		_DOLIT	0
 3504      00000000 
 3505 2864 E9210000 		_ADR	COMMA
 3506 2868 250B0000 		_DOLIT UNNEST
 3506      BA090000 
 3507 2870 5D260000 		_ADR	CALLC  
 3508 2874 BB090000 		_UNNEST
 3509              	
 3510              	// **************************************************************************
 3511              	//  Tools
 3512              	
 3513              	//    dm+	 ( a u -- a )
 3514              	// 	Dump u bytes from , leaving a+u on the stack.
 3515              	
 3516              	// 	.word	_VARIA 
 3517              	// _DMP	.byte  3
 3518              	// 	.ascii "dm+"
 3519              	// 	.p2align 2 	
 3520              	DMP:
 3521 2878 504700BF 		_NEST
 3522 287c 7D0C0000 		_ADR	OVER
 3523 2880 250B0000 		_DOLIT	4
 3523      04000000 
 3524 2888 9D190000 		_ADR	UDOTR			// display address
 3525 288c 69180000 		_ADR	SPACE
 3526 2890 010C0000 		_ADR	TOR			// start count down loop
 3527 2894 7B0B0000 		_BRAN	PDUM2			// skip first pass
ARM GAS  forth.s 			page 102


 3527      B4280000 
 3528              	PDUM1:
 3529 289c 590C0000 	  _ADR	DUPP
 3530 28a0 CD0B0000 		_ADR	CAT
 3531 28a4 250B0000 		_DOLIT	3
 3531      03000000 
 3532 28ac 9D190000 		_ADR	UDOTR			// display numeric data
 3533 28b0 790D0000 		_ADR	ONEP			// increment address
 3534              	PDUM2:
 3535 28b4 490B0000 	  _ADR	DONXT
 3536 28b8 9C280000 		.word	PDUM1	// loop till done
 3537 28bc BB090000 		_UNNEST
 3538              		.p2align 2 
 3539              	//    DUMP	( a u -- )
 3540              	// 	Dump u bytes from a, in a formatted manner.
 3541              	
 3542 28c0 48280000 		.word	_VARIA
 3543 28c4 04       	_DUMP:	.byte  4
 3544 28c5 44554D50 		.ascii "DUMP"
 3545 28c9 0000BF   		.p2align 2 	
 3546              	DUMP:
 3547 28cc 504700BF 		_NEST
 3548 28d0 4D100000 		_ADR	BASE
 3549 28d4 AD0B0000 		_ADR	AT
 3550 28d8 010C0000 		_ADR	TOR
 3551 28dc 61160000 		_ADR	HEX			// save radix,set hex
 3552 28e0 250B0000 		_DOLIT	16
 3552      10000000 
 3553 28e8 79120000 		_ADR	SLASH			// change count to lines
 3554 28ec 010C0000 		_ADR	TOR
 3555 28f0 7B0B0000 		_BRAN	DUMP4			// start count down loop
 3555      20290000 
 3556              	DUMP1:
 3557 28f8 F1180000 	  _ADR	CR
 3558 28fc 250B0000 		_DOLIT	16
 3558      10000000 
 3559 2904 690E0000 		_ADR	DDUP
 3560 2908 79280000 		_ADR	DMP			// display numeric
 3561 290c 410E0000 		_ADR	ROT
 3562 2910 410E0000 		_ADR	ROT
 3563 2914 69180000 		_ADR	SPACE
 3564 2918 69180000 		_ADR	SPACE
 3565 291c BD180000 		_ADR	TYPEE			// display printable characters
 3566              	DUMP4:
 3567 2920 490B0000 	  _DONXT	DUMP1	// loop till done
 3567      F8280000 
 3568              	DUMP3:
 3569 2928 490C0000 		_ADR	DROP
 3570 292c D90B0000 		_ADR	RFROM
 3571 2930 4D100000 		_ADR	BASE
 3572 2934 990B0000 		_ADR	STORE			// restore radix
 3573 2938 BB090000 		_UNNEST
 3574              	
 3575              	//    .S	  ( ... -- ... )
 3576              	// 	Display the contents of the data stack.
 3577              	
 3578 293c C4280000 		.word	_DUMP
ARM GAS  forth.s 			page 103


 3579              	_DOTS:
 3580 2940 02       		.byte  2
 3581 2941 2E53     		.ascii ".S"
 3582 2943 00       		.p2align 2 	
 3583              	DOTS:
 3584 2944 504700BF 		_NEST
 3585 2948 69180000 		_ADR	SPACE
 3586 294c 41130000 		_ADR	DEPTH			// stack depth
 3587 2950 010C0000 		_ADR	TOR			// start count down loop
 3588 2954 7B0B0000 		_BRAN	DOTS2			// skip first pass
 3588      68290000 
 3589              	DOTS1:
 3590 295c ED0B0000 		_ADR	RAT
 3591 2960 65130000 		_ADR	PICK
 3592 2964 F5190000 		_ADR	DOT			// index stack, display contents
 3593              	DOTS2:
 3594 2968 490B0000 		_DONXT	DOTS1	// loop till done
 3594      5C290000 
 3595 2970 69180000 		_ADR	SPACE
 3596 2974 BB090000 		_UNNEST
 3597              	
 3598              	//    >NAME	( ca -- na | F )
 3599              	// 	Convert code address to a name address.
 3600              	
 3601 2978 40290000 		.word	_DOTS
 3602 297c 05       	_TNAME:	.byte  5
 3603 297d 3E4E414D 		.ascii ">NAME"
 3603      45
 3604 2982 00BF     		.p2align 2 	
 3605              	TNAME:
 3606 2984 504700BF 		_NEST
 3607 2988 010C0000 		_ADR	TOR			//  
 3608 298c D5100000 		_ADR	CNTXT			//  va
 3609 2990 AD0B0000 		_ADR	AT			//  na
 3610              	TNAM1:
 3611 2994 590C0000 		_ADR	DUPP			//  na na
 3612 2998 670B0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3612      C8290000 
 3613 29a0 590C0000 		_ADR	DUPP			//  na na
 3614 29a4 851C0000 		_ADR	NAMET			//  na ca
 3615 29a8 ED0B0000 		_ADR	RAT			//  na ca code
 3616 29ac C50C0000 		_ADR	XORR			//  na f --
 3617 29b0 670B0000 		_QBRAN	TNAM2
 3617      C8290000 
 3618 29b8 C90D0000 		_ADR	CELLM			//  la 
 3619 29bc AD0B0000 		_ADR	AT			//  next_na
 3620 29c0 7B0B0000 		_BRAN	TNAM1
 3620      94290000 
 3621              	TNAM2:	
 3622 29c8 D90B0000 		_ADR	RFROM
 3623 29cc 490C0000 		_ADR	DROP			//  0|na --
 3624 29d0 BB090000 		_UNNEST			// 0
 3625              	
 3626              	//    .ID	 ( na -- )
 3627              	// 	Display the name at address.
 3628              	
 3629 29d4 7C290000 		.word	_TNAME
ARM GAS  forth.s 			page 104


 3630 29d8 03       	_DOTID:	.byte  3
 3631 29d9 2E4944   		.ascii ".ID"
 3632              		.p2align 2 	
 3633              	DOTID:
 3634 29dc 504700BF 		_NEST
 3635 29e0 2D0E0000 		_ADR	QDUP			// if zero no name
 3636 29e4 670B0000 		_QBRAN	DOTI1
 3636      042A0000 
 3637 29ec B50F0000 		_ADR	COUNT
 3638 29f0 250B0000 		_DOLIT	0x1F
 3638      1F000000 
 3639 29f8 9D0C0000 		_ADR	ANDD			// mask lexicon bits
 3640 29fc BD180000 		_ADR	TYPEE
 3641 2a00 BB090000 		_UNNEST			// display name string
 3642              	DOTI1:
 3643 2a04 59190000 		_DOTQP	9," {noName}"
 3643      09207B6E 
 3643      6F4E616D 
 3643      657D00BF 
 3644 2a14 BB090000 		_UNNEST
 3645              	
 3646              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3647              	.if WANT_SEE 
 3648              	//    SEE	 ( -- //  string> )
 3649              	// 	A simple decompiler.
 3650              	
 3651              		.word	_DOTID
 3652              	_SEE:	.byte  3
 3653              		.ascii "SEE"
 3654              		.p2align 2 	
 3655              	SEE:
 3656              		_NEST
 3657              		_ADR	TICK	//  ca --, starting address
 3658              		_ADR	CR	
 3659              		_DOLIT	20
 3660              		_ADR	TOR
 3661              	SEE1:
 3662              		_ADR	CELLP			//  a
 3663              		_ADR	DUPP			//  a a
 3664              		_ADR	DECOMP		//  a
 3665              		_DONXT	SEE1
 3666              		_ADR	DROP
 3667              		_UNNEST
 3668              	
 3669              	// 	DECOMPILE ( a -- )
 3670              	// 	Convert code in a.  Display name of command or as data.
 3671              	
 3672              		.word	_SEE
 3673              	_DECOM:	.byte  9
 3674              		.ascii "DECOMPILE"
 3675              		.p2align 2 
 3676              		
 3677              	DECOMP:	
 3678              		_NEST
 3679              		_ADR	DUPP			//  a a
 3680              	// 	_ADR	TOR			//  a
 3681              		_ADR	AT			//  a code
ARM GAS  forth.s 			page 105


 3682              		_ADR	DUPP			//  a code code
 3683              		_DOLIT	0xF800D000 //0xF800F800
 3684              		_ADR	ANDD
 3685              		_DOLIT	0xF000D000 //0xF800F000
 3686              		_ADR	EQUAL			//  a code ?
 3687              		_ADR	INVER 
 3688              		_QBRAN	DECOM2	//  not a command
 3689              		//  a valid_code --, extract address and display name
 3690              		MOVW	IP,#0xFFE
 3691              		MOV	WP,TOS
 3692              		LSL	TOS,TOS,#21		//  get bits 22-12
 3693              		ASR	TOS,TOS,#9		//  with sign extension
 3694              		LSR	WP,WP,#15		//  get bits 11-1
 3695              		AND	WP,WP,IP		//  retain only bits 11-1
 3696              		ORR	TOS,TOS,WP		//  get bits 22-1
 3697              		NOP
 3698              		_ADR	OVER			//  a offset a
 3699              		_ADR	PLUS			//  a target-4
 3700              		_ADR	CELLP			//  a target
 3701              		_ADR	TNAME			//  a na/0 --, is it a name?
 3702              		_ADR	QDUP			//  name address or zero
 3703              		_QBRAN	DECOM1
 3704              		_ADR	SPACE			//  a na
 3705              		_ADR	DOTID			//  a --, display name
 3706              	// 	_ADR	RFROM			//  a
 3707              		_ADR	DROP
 3708              		_UNNEST
 3709              	DECOM1:	// _ADR	RFROM		//  a
 3710              		_ADR	AT			//  data
 3711              		_ADR	UDOT			//  display data
 3712              		_UNNEST
 3713              	DECOM2:
 3714              		_ADR	UDOT
 3715              	// 	_ADR	RFROM
 3716              		_ADR	DROP
 3717              		_UNNEST
 3718              	
 3719              	//    WORDS	( -- )
 3720              	// 	Display the names in the context vocabulary.
 3721              	
 3722              		.word	_DECOM
 3723              	.else 
 3724 2a18 D8290000 		.word _DOTID 
 3725              	.endif 
 3726 2a1c 05       	_WORDS:	.byte  5
 3727 2a1d 574F5244 		.ascii "WORDS"
 3727      53
 3728 2a22 00BF     		.p2align 2 	
 3729              	WORDS:
 3730 2a24 504700BF 		_NEST
 3731 2a28 F1180000 		_ADR	CR
 3732 2a2c D5100000 		_ADR	CNTXT
 3733 2a30 AD0B0000 		_ADR	AT			// only in context
 3734              	WORS1:
 3735 2a34 2D0E0000 		_ADR	QDUP			// ?at end of list
 3736 2a38 670B0000 		_QBRAN	WORS2
 3736      5C2A0000 
ARM GAS  forth.s 			page 106


 3737 2a40 590C0000 		_ADR	DUPP
 3738 2a44 69180000 		_ADR	SPACE
 3739 2a48 DD290000 		_ADR	DOTID			// display a name
 3740 2a4c C90D0000 		_ADR	CELLM
 3741 2a50 AD0B0000 		_ADR	AT
 3742 2a54 7B0B0000 		_BRAN	WORS1
 3742      342A0000 
 3743              	WORS2:
 3744 2a5c BB090000 		_UNNEST
 3745              	
 3746              	// **************************************************************************
 3747              	//  cold start
 3748              	
 3749              	//    VER	 ( -- n )
 3750              	// 	Return the version number of this implementation.
 3751              	
 3752              	// 	.word	_WORDS
 3753              	// _VERSN	.byte  3
 3754              	// 	.ascii "VER"
 3755              	// 	.p2align 2 	
 3756              	VERSN:
 3757 2a60 504700BF 		_NEST
 3758 2a64 250B0000 		_DOLIT	VER*256+EXT
 3758      00010000 
 3759 2a6c BB090000 		_UNNEST
 3760              	
 3761              	//    hi	  ( -- )
 3762              	// 	Display the sign-on message of eForth.
 3763              	
 3764 2a70 1C2A0000 		.word	_WORDS
 3765 2a74 02       	_HI:	.byte  2
 3766 2a75 4849     		.ascii "HI"
 3767 2a77 00       		.p2align 2
 3768              	
 3769              	HI:
 3770 2a78 504700BF 		_NEST
 3771 2a7c F1180000 		_ADR	CR	// initialize I/O
 3772 2a80 59190000 		_DOTQP	17, "beyond Jupiter, v" 
 3772      11626579 
 3772      6F6E6420 
 3772      4A757069 
 3772      7465722C 
 3773 2a98 4D100000 		_ADR	BASE
 3774 2a9c AD0B0000 		_ADR	AT
 3775 2aa0 61160000 		_ADR	HEX	// save radix
 3776 2aa4 612A0000 		_ADR	VERSN
 3777 2aa8 51150000 		_ADR	BDIGS
 3778 2aac 9D150000 		_ADR	DIG
 3779 2ab0 9D150000 		_ADR	DIG
 3780 2ab4 250B0000 		_DOLIT	'.'
 3780      2E000000 
 3781 2abc 71150000 		_ADR	HOLD
 3782 2ac0 BD150000 		_ADR	DIGS
 3783 2ac4 11160000 		_ADR	EDIGS
 3784 2ac8 BD180000 		_ADR	TYPEE	// format version number
 3785 2acc 4D100000 		_ADR	BASE
 3786 2ad0 990B0000 		_ADR	STORE
ARM GAS  forth.s 			page 107


 3787 2ad4 F1180000 		_ADR	CR
 3788 2ad8 BB090000 		_UNNEST			// restore radix
 3789              	
 3790              	//    COLD	( -- )
 3791              	// 	The high level cold start sequence.
 3792              	
 3793 2adc 742A0000 		.word	_HI
 3794 2ae0 04       	_LASTN:	.byte  4
 3795 2ae1 434F4C44 		.ascii "COLD"
 3796 2ae5 0000BF   		.p2align 2	
 3797              	COLD:
 3798 2ae8 00B5FDF7 		_CALL forth_init 
 3798      11FB5DF8 
 3798      04EB
 3799 2af2 DFF84CC0 		ldr IP,=COLD1 
 3800 2af6 FDF75DBF 		_NEXT
 3801 2afa 00BF     		.p2align 2 
 3802              	COLD1:
 3803 2afc 250B0000 		_DOLIT  0 
 3803      00000000 
 3804 2b04 01000000 		_ADR ULED // turn off user LED 
 3805 2b08 250B0000 		_DOLIT	UZERO
 3805      88020000 
 3806 2b10 250B0000 		_DOLIT	UPP
 3806      00000020 
 3807 2b18 250B0000 		_DOLIT	ULAST-UZERO
 3807      A0000000 
 3808 2b20 2D140000 		_ADR	MOVE 			// initialize user area
 3809 2b24 09210000 		_ADR	PRESE			// initialize stack and TIB
 3810 2b28 39100000 		_ADR	TBOOT
 3811 2b2c DD130000 		_ADR	ATEXE			// application boot
 3812 2b30 01260000 		_ADR	OVERT
 3813 2b34 7B0B0000 		_BRAN	QUIT			// start interpretation
 3813      28210000 
 3814              	COLD2:
 3815              		.p2align 2 	
 3816              	CTOP:
 3817 2b3c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3818              	
 3819              	
 3820 2b40 FC2A0000 	  .end 
ARM GAS  forth.s 			page 108


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 109


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 110


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:203    *ABS*:0000000000000e00 NVIC_STIR
     stm32f411ce.inc:206    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:207    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:208    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:209    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:211    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:212    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:213    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:214    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:217    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:218    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:221    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:222    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:223    *ABS*:0000000000000008 TIM_SMCR
ARM GAS  forth.s 			page 111


     stm32f411ce.inc:224    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:225    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:226    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:227    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:228    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:229    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:230    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:231    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:232    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:233    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:234    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:235    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:236    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:237    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:238    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:239    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:240    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:243    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:245    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:246    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:247    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:248    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:249    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:250    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:251    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:254    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:256    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:257    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:258    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:259    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:260    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:261    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
ARM GAS  forth.s 			page 112


          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
          macros.inc:79     *ABS*:000000000000001c CSPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
          macros.inc:81     *ABS*:0000000000000024 NTIBB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2778   .text:00000000000020c4 EVAL
             forth.s:1731   .text:0000000000001570 HOLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:255    .text:00000000000000c0 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
           ps2_kbd.s:62     .text:00000000000008ac kbd_isr
             tvout.s:128    .text:00000000000003cc tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:231    .text:0000000000000094 uart_puts
              init.s:211    .text:000000000000006c reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
              init.s:221    .text:0000000000000080 user_reboot_msg
              init.s:219    .text:000000000000007c scb_adr
              init.s:220    .text:000000000000007c $d
              init.s:225    .text:0000000000000092 $t
              init.s:443    .text:0000000000000248 remap
              init.s:323    .text:0000000000000138 init_devices
              init.s:414    .text:00000000000001fc uart_init
             tvout.s:62     .text:0000000000000330 tv_init
ARM GAS  forth.s 			page 113


              init.s:283    .text:0000000000000110 forth_init
             forth.s:3797   .text:0000000000002ae8 COLD
             forth.s:85     .text:00000000000009ac NEST
              init.s:336    .text:0000000000000156 wait_hserdy
              init.s:357    .text:0000000000000178 wait_pllrdy
              init.s:369    .text:0000000000000192 wait_sws
              init.s:468    .text:0000000000000288 UZERO
              init.s:502    .text:0000000000000328 ULAST
              init.s:469    .text:0000000000000288 $d
             forth.s:3769   .text:0000000000002a78 HI
             forth.s:2706   .text:0000000000001fe0 INTER
             forth.s:3794   .text:0000000000002ae0 _LASTN
             forth.s:3816   .text:0000000000002b3c CTOP
              init.s:503    .text:0000000000000328 $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:8      *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:9      *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:000000000000059f VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:0000000000000330 $t
             tvout.s:147    .text:00000000000003f8 state_vsync
             tvout.s:188    .text:000000000000044c state_pre_video
             tvout.s:199    .text:000000000000045e state_video_out
             tvout.s:229    .text:00000000000004b6 state_post_video
             tvout.s:246    .text:00000000000004dc tv_isr_exit
             tvout.s:177    .text:0000000000000432 sync_end
             tvout.s:238    .text:00000000000004c8 frame_end
             tvout.s:508    .text:0000000000000810 LINK
             tvout.s:256    .text:00000000000004de $d
             tvout.s:256    .text:00000000000004e2 _BACKCOLOR
             tvout.s:256    .text:00000000000004f0 BACKCOLOR
             forth.s:89     .text:00000000000009b4 INEXT
             tvout.s:263    .text:00000000000004fa $d
             tvout.s:263    .text:00000000000004fe _PENCOLOR
             tvout.s:263    .text:0000000000000508 $t
             tvout.s:263    .text:0000000000000508 PENCOLOR
             tvout.s:270    .text:0000000000000512 $d
ARM GAS  forth.s 			page 114


             tvout.s:270    .text:0000000000000516 _COLUMN
             tvout.s:270    .text:0000000000000520 COLUMN
             tvout.s:277    .text:000000000000052a $d
             tvout.s:277    .text:000000000000052e _CURSOR_ROW
             tvout.s:277    .text:0000000000000532 $t
             tvout.s:277    .text:0000000000000534 CURSOR_ROW
             tvout.s:284    .text:000000000000053e $d
             tvout.s:284    .text:0000000000000542 _ROWY
             tvout.s:284    .text:0000000000000548 $t
             tvout.s:284    .text:0000000000000548 ROWY
             tvout.s:291    .text:0000000000000552 $d
             tvout.s:291    .text:0000000000000556 _COLX
             tvout.s:291    .text:000000000000055c $t
             tvout.s:291    .text:000000000000055c COLX
             tvout.s:298    .text:0000000000000566 $d
             tvout.s:298    .text:000000000000056a _FONT
             tvout.s:298    .text:0000000000000570 FONT
             tvout.s:546    .rodata:0000000000000000 font_6x8
             tvout.s:305    .text:0000000000000578 $d
             tvout.s:305    .text:000000000000057c _VIDBUFF
             tvout.s:305    .text:0000000000000584 $t
             tvout.s:305    .text:0000000000000584 VIDBUFF
             tvout.s:317    .text:000000000000058c $d
             tvout.s:317    .text:0000000000000590 _PLOT
             tvout.s:317    .text:0000000000000598 PLOT
             tvout.s:338    .text:00000000000005cc op_back
             tvout.s:347    .text:00000000000005e6 op_pen
             tvout.s:356    .text:0000000000000600 op_invert
             tvout.s:373    .text:0000000000000632 op_xor
             tvout.s:385    .text:000000000000064c $d
             tvout.s:385    .text:0000000000000650 _VSYNC
             tvout.s:385    .text:0000000000000656 $t
             tvout.s:385    .text:0000000000000658 VSYNC
             tvout.s:393    .text:0000000000000660 $d
             tvout.s:393    .text:0000000000000664 _CLS
             tvout.s:393    .text:0000000000000668 $t
             tvout.s:393    .text:0000000000000668 CLS
             tvout.s:417    .text:00000000000006a8 $d
             tvout.s:417    .text:00000000000006ac _CLRLINE
             tvout.s:417    .text:00000000000006b4 $t
             tvout.s:417    .text:00000000000006b4 CLRLINE
             tvout.s:419    .text:00000000000006b8 $d
             forth.s:253    .text:0000000000000b24 DOLIT
             forth.s:469    .text:0000000000000c58 DUPP
             forth.s:411    .text:0000000000000c00 TOR
             forth.s:617    .text:0000000000000d3c STAR
             forth.s:593    .text:0000000000000d1c PLUS
             forth.s:387    .text:0000000000000bd8 RFROM
             forth.s:1631   .text:0000000000001460 FILL
             forth.s:92     .text:00000000000009ba UNNEST
             tvout.s:432    .text:00000000000006ec _SCROLLUP
             tvout.s:432    .text:00000000000006f8 SCROLLUP
             tvout.s:434    .text:00000000000006fc $d
             forth.s:480    .text:0000000000000c68 SWAP
             forth.s:605    .text:0000000000000d2c SUBB
             forth.s:1607   .text:000000000000142c MOVE
             tvout.s:451    .text:0000000000000744 _RIGHT
ARM GAS  forth.s 			page 115


             tvout.s:451    .text:000000000000074a $t
             tvout.s:451    .text:000000000000074c RIGHT
             tvout.s:470    .text:0000000000000782 $d
             tvout.s:477    .text:000000000000078e _CHAR_ROW
             tvout.s:477    .text:0000000000000796 $t
             tvout.s:477    .text:0000000000000798 CHAR_ROW
             tvout.s:479    .text:000000000000079c $d
             forth.s:518    .text:0000000000000c9c ANDD
             forth.s:569    .text:0000000000000cf4 RSHIFT
             forth.s:792    .text:0000000000000e40 ROT
             forth.s:818    .text:0000000000000e68 DDUP
             forth.s:657    .text:0000000000000d78 ONEP
             forth.s:581    .text:0000000000000d0c LSHIFT
             forth.s:280    .text:0000000000000b48 DONXT
             forth.s:806    .text:0000000000000e54 DDROP
             forth.s:458    .text:0000000000000c48 DROP
             tvout.s:508    .text:0000000000000810 _TVPUTC
             tvout.s:508    .text:0000000000000818 $t
             tvout.s:508    .text:0000000000000818 TVPUTC
             tvout.s:510    .text:000000000000081c $d
             forth.s:352    .text:0000000000000bac AT
             forth.s:1510   .text:0000000000001364 PICK
             forth.s:376    .text:0000000000000bcc CAT
             tvout.s:542    .rodata:0000000000000000 $d
             tvout.s:647    .text:00000000000008a4 $d
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_F_PAR_ERR
           ps2_kbd.s:50     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:51     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:52     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:53     *ABS*:000000000000006f KBD_ONES
           ps2_kbd.s:62     .text:00000000000008ac $t
           ps2_kbd.s:87     .text:0000000000000900 start_bit
           ps2_kbd.s:94     .text:0000000000000916 parity_bit
           ps2_kbd.s:106    .text:0000000000000938 stop_bit
           ps2_kbd.s:128    .text:0000000000000968 kbd_init
             forth.s:75     .text:00000000000009a0 TPUSH
             forth.s:80     .text:00000000000009a6 TPOP
             forth.s:105    .text:00000000000009c4 COMPI_NEST
             forth.s:121    .text:00000000000009e2 $d
             forth.s:122    .text:00000000000009e6 _RAND
             forth.s:125    .text:00000000000009f0 RAND
             forth.s:127    .text:00000000000009f4 $d
             forth.s:869    .text:0000000000000ebc ABSS
             forth.s:1087   .text:0000000000000ffc SEED
             forth.s:542    .text:0000000000000cc4 XORR
             forth.s:339    .text:0000000000000b98 STORE
             forth.s:1402   .text:0000000000001260 MODD
             forth.s:155    .text:0000000000000a64 _PAUSE
             forth.s:157    .text:0000000000000a6a $t
             forth.s:158    .text:0000000000000a6c PAUSE
             forth.s:160    .text:0000000000000a70 $d
             forth.s:1109   .text:0000000000001024 TIMER
             forth.s:162    .text:0000000000000a78 PAUSE_LOOP
             forth.s:301    .text:0000000000000b66 QBRAN
             forth.s:167    .text:0000000000000a90 PAUSE_EXIT
             forth.s:318    .text:0000000000000b7a BRAN
             forth.s:173    .text:0000000000000a98 _ULED
ARM GAS  forth.s 			page 116


             forth.s:177    .text:0000000000000aa0 ULED
             forth.s:186    .text:0000000000000abc ULED_OFF
             forth.s:192    .text:0000000000000ac0 $d
             forth.s:193    .text:0000000000000ac4 _QRX
             forth.s:196    .text:0000000000000acc QKEY
             forth.s:197    .text:0000000000000acc QRX
             forth.s:216    .text:0000000000000af6 $d
             forth.s:217    .text:0000000000000afa _TXSTO
             forth.s:220    .text:0000000000000b00 TXSTO
             forth.s:221    .text:0000000000000b00 EMIT
             forth.s:222    .text:0000000000000b00 TECHO
             forth.s:238    .text:0000000000000b18 $d
             forth.s:239    .text:0000000000000b1c _NOP
             forth.s:241    .text:0000000000000b20 $t
             forth.s:242    .text:0000000000000b20 NOP
             forth.s:261    .text:0000000000000b2e $d
             forth.s:262    .text:0000000000000b32 _EXECU
             forth.s:264    .text:0000000000000b3a $t
             forth.s:265    .text:0000000000000b3c EXECU
             forth.s:287    .text:0000000000000b58 NEXT1
             forth.s:307    .text:0000000000000b74 QBRAN1
             forth.s:325    .text:0000000000000b80 $d
             forth.s:326    .text:0000000000000b84 _EXIT
             forth.s:329    .text:0000000000000b8c EXIT
             forth.s:330    .text:0000000000000b8c $d
             forth.s:336    .text:0000000000000b94 _STORE
             forth.s:338    .text:0000000000000b96 $t
             forth.s:348    .text:0000000000000ba4 $d
             forth.s:349    .text:0000000000000ba8 _AT
             forth.s:351    .text:0000000000000baa $t
             forth.s:359    .text:0000000000000bb0 $d
             forth.s:360    .text:0000000000000bb4 _CSTOR
             forth.s:363    .text:0000000000000bb8 CSTOR
             forth.s:372    .text:0000000000000bc4 $d
             forth.s:373    .text:0000000000000bc8 _CAT
             forth.s:383    .text:0000000000000bd0 $d
             forth.s:384    .text:0000000000000bd4 _RFROM
             forth.s:395    .text:0000000000000be2 $d
             forth.s:396    .text:0000000000000be6 _RAT
             forth.s:399    .text:0000000000000bec RAT
             forth.s:407    .text:0000000000000bf6 $d
             forth.s:408    .text:0000000000000bfa _TOR
             forth.s:418    .text:0000000000000c0a $d
             forth.s:419    .text:0000000000000c0e _RPSTOR
             forth.s:421    .text:0000000000000c12 $t
             forth.s:422    .text:0000000000000c14 RPSTOR
             forth.s:430    .text:0000000000000c1c $d
             forth.s:431    .text:0000000000000c20 _SPSTOR
             forth.s:433    .text:0000000000000c24 $t
             forth.s:434    .text:0000000000000c24 SPSTOR
             forth.s:442    .text:0000000000000c2c $d
             forth.s:443    .text:0000000000000c30 _SPAT
             forth.s:445    .text:0000000000000c34 $t
             forth.s:446    .text:0000000000000c34 SPAT
             forth.s:454    .text:0000000000000c3c $d
             forth.s:455    .text:0000000000000c40 _DROP
             forth.s:465    .text:0000000000000c4e $d
ARM GAS  forth.s 			page 117


             forth.s:466    .text:0000000000000c52 _DUPP
             forth.s:468    .text:0000000000000c56 $t
             forth.s:476    .text:0000000000000c5e $d
             forth.s:477    .text:0000000000000c62 _SWAP
             forth.s:489    .text:0000000000000c70 $d
             forth.s:490    .text:0000000000000c74 _OVER
             forth.s:493    .text:0000000000000c7c OVER
             forth.s:501    .text:0000000000000c84 $d
             forth.s:502    .text:0000000000000c88 _ZLESS
             forth.s:505    .text:0000000000000c8c ZLESS
             forth.s:514    .text:0000000000000c92 $d
             forth.s:515    .text:0000000000000c96 _ANDD
             forth.s:517    .text:0000000000000c9a $t
             forth.s:526    .text:0000000000000ca6 $d
             forth.s:527    .text:0000000000000caa _ORR
             forth.s:530    .text:0000000000000cb0 ORR
             forth.s:538    .text:0000000000000cba $d
             forth.s:539    .text:0000000000000cbe _XORR
             forth.s:541    .text:0000000000000cc2 $t
             forth.s:550    .text:0000000000000cce $d
             forth.s:551    .text:0000000000000cd2 _UPLUS
             forth.s:553    .text:0000000000000cd6 $t
             forth.s:554    .text:0000000000000cd8 UPLUS
             forth.s:565    .text:0000000000000ce8 $d
             forth.s:566    .text:0000000000000cec _RSHIFT
             forth.s:577    .text:0000000000000cfe $d
             forth.s:578    .text:0000000000000d02 _LSHIFT
             forth.s:589    .text:0000000000000d16 $d
             forth.s:590    .text:0000000000000d1a _PLUS
             forth.s:592    .text:0000000000000d1c $t
             forth.s:601    .text:0000000000000d24 $d
             forth.s:602    .text:0000000000000d28 _SUBB
             forth.s:604    .text:0000000000000d2a $t
             forth.s:613    .text:0000000000000d36 $d
             forth.s:614    .text:0000000000000d3a _STAR
             forth.s:616    .text:0000000000000d3c $t
             forth.s:625    .text:0000000000000d46 $d
             forth.s:626    .text:0000000000000d4a _UMSTA
             forth.s:628    .text:0000000000000d4e $t
             forth.s:629    .text:0000000000000d50 UMSTA
             forth.s:639    .text:0000000000000d5c $d
             forth.s:640    .text:0000000000000d60 _MSTAR
             forth.s:643    .text:0000000000000d64 MSTAR
             forth.s:653    .text:0000000000000d70 $d
             forth.s:654    .text:0000000000000d74 _ONEP
             forth.s:664    .text:0000000000000d7e $d
             forth.s:665    .text:0000000000000d82 _ONEM
             forth.s:668    .text:0000000000000d88 ONEM
             forth.s:675    .text:0000000000000d8e $d
             forth.s:676    .text:0000000000000d92 _TWOP
             forth.s:679    .text:0000000000000d98 TWOP
             forth.s:686    .text:0000000000000d9e $d
             forth.s:687    .text:0000000000000da2 _TWOM
             forth.s:690    .text:0000000000000da8 TWOM
             forth.s:697    .text:0000000000000dae $d
             forth.s:698    .text:0000000000000db2 _CELLP
             forth.s:700    .text:0000000000000db8 $t
ARM GAS  forth.s 			page 118


             forth.s:701    .text:0000000000000db8 CELLP
             forth.s:708    .text:0000000000000dbe $d
             forth.s:709    .text:0000000000000dc2 _CELLM
             forth.s:711    .text:0000000000000dc8 $t
             forth.s:712    .text:0000000000000dc8 CELLM
             forth.s:719    .text:0000000000000dce $d
             forth.s:720    .text:0000000000000dd2 _BLANK
             forth.s:723    .text:0000000000000dd8 BLANK
             forth.s:731    .text:0000000000000de2 $d
             forth.s:732    .text:0000000000000de6 _CELLS
             forth.s:734    .text:0000000000000dec $t
             forth.s:735    .text:0000000000000dec CELLS
             forth.s:742    .text:0000000000000df2 $d
             forth.s:743    .text:0000000000000df6 _CELLSL
             forth.s:745    .text:0000000000000dfc $t
             forth.s:746    .text:0000000000000dfc CELLSL
             forth.s:753    .text:0000000000000e02 $d
             forth.s:754    .text:0000000000000e06 _TWOST
             forth.s:757    .text:0000000000000e0c TWOST
             forth.s:764    .text:0000000000000e12 $d
             forth.s:765    .text:0000000000000e16 _TWOSL
             forth.s:768    .text:0000000000000e1c TWOSL
             forth.s:775    .text:0000000000000e22 $d
             forth.s:776    .text:0000000000000e26 _QDUP
             forth.s:779    .text:0000000000000e2c QDUP
             forth.s:788    .text:0000000000000e36 $d
             forth.s:789    .text:0000000000000e3a _ROT
             forth.s:791    .text:0000000000000e3e $t
             forth.s:802    .text:0000000000000e4a $d
             forth.s:803    .text:0000000000000e4e _DDROP
             forth.s:805    .text:0000000000000e54 $t
             forth.s:814    .text:0000000000000e5e $d
             forth.s:815    .text:0000000000000e62 _DDUP
             forth.s:827    .text:0000000000000e74 $d
             forth.s:828    .text:0000000000000e78 _DPLUS
             forth.s:831    .text:0000000000000e7c DPLUS
             forth.s:843    .text:0000000000000e90 $d
             forth.s:844    .text:0000000000000e94 _INVER
             forth.s:846    .text:0000000000000e98 $t
             forth.s:847    .text:0000000000000e98 INVER
             forth.s:854    .text:0000000000000e9e $d
             forth.s:855    .text:0000000000000ea2 _NEGAT
             forth.s:858    .text:0000000000000eac NEGAT
             forth.s:865    .text:0000000000000eb2 $d
             forth.s:866    .text:0000000000000eb6 _ABSS
             forth.s:868    .text:0000000000000eba $t
             forth.s:878    .text:0000000000000ec6 $d
             forth.s:879    .text:0000000000000eca _ZEQUAL
             forth.s:882    .text:0000000000000ed0 ZEQUAL
             forth.s:892    .text:0000000000000ede $d
             forth.s:893    .text:0000000000000ee2 _EQUAL
             forth.s:895    .text:0000000000000ee4 $t
             forth.s:896    .text:0000000000000ee4 EQUAL
             forth.s:907    .text:0000000000000ef4 $d
             forth.s:908    .text:0000000000000ef8 _ULESS
             forth.s:911    .text:0000000000000efc ULESS
             forth.s:922    .text:0000000000000f0c $d
ARM GAS  forth.s 			page 119


             forth.s:923    .text:0000000000000f10 _LESS
             forth.s:925    .text:0000000000000f12 $t
             forth.s:926    .text:0000000000000f14 LESS
             forth.s:937    .text:0000000000000f24 $d
             forth.s:938    .text:0000000000000f28 _GREAT
             forth.s:940    .text:0000000000000f2a $t
             forth.s:941    .text:0000000000000f2c GREAT
             forth.s:952    .text:0000000000000f3c $d
             forth.s:953    .text:0000000000000f40 _MAX
             forth.s:955    .text:0000000000000f44 $t
             forth.s:956    .text:0000000000000f44 MAX
             forth.s:966    .text:0000000000000f50 $d
             forth.s:967    .text:0000000000000f54 _MIN
             forth.s:969    .text:0000000000000f58 $t
             forth.s:970    .text:0000000000000f58 MIN
             forth.s:980    .text:0000000000000f64 $d
             forth.s:981    .text:0000000000000f68 _PSTOR
             forth.s:984    .text:0000000000000f6c PSTOR
             forth.s:995    .text:0000000000000f7c $d
             forth.s:996    .text:0000000000000f80 _DSTOR
             forth.s:999    .text:0000000000000f84 DSTOR
             forth.s:1010   .text:0000000000000f98 $d
             forth.s:1011   .text:0000000000000f9c _DAT
             forth.s:1014   .text:0000000000000fa0 DAT
             forth.s:1023   .text:0000000000000faa $d
             forth.s:1024   .text:0000000000000fae _COUNT
             forth.s:1026   .text:0000000000000fb4 $t
             forth.s:1027   .text:0000000000000fb4 COUNT
             forth.s:1036   .text:0000000000000fc0 $d
             forth.s:1037   .text:0000000000000fc4 _DNEGA
             forth.s:1039   .text:0000000000000fcc $t
             forth.s:1040   .text:0000000000000fcc DNEGA
             forth.s:1058   .text:0000000000000fdc DOVAR
             forth.s:1071   .text:0000000000000fe8 DOCON
             forth.s:1083   .text:0000000000000ff2 $d
             forth.s:1084   .text:0000000000000ff6 _SEED
             forth.s:1094   .text:0000000000001006 $d
             forth.s:1095   .text:000000000000100a _MSEC
             forth.s:1098   .text:0000000000001010 MSEC
             forth.s:1105   .text:000000000000101a $d
             forth.s:1106   .text:000000000000101e _TIMER
             forth.s:1108   .text:0000000000001024 $t
             forth.s:1117   .text:000000000000102e $d
             forth.s:1118   .text:0000000000001032 _TBOOT
             forth.s:1120   .text:0000000000001038 $t
             forth.s:1121   .text:0000000000001038 TBOOT
             forth.s:1129   .text:0000000000001042 $d
             forth.s:1130   .text:0000000000001046 _BASE
             forth.s:1133   .text:000000000000104c BASE
             forth.s:1145   .text:0000000000001056 TEMP
             forth.s:1153   .text:0000000000001060 $d
             forth.s:1154   .text:0000000000001064 _SPAN
             forth.s:1157   .text:000000000000106c SPAN
             forth.s:1165   .text:0000000000001076 $d
             forth.s:1166   .text:000000000000107a _INN
             forth.s:1168   .text:000000000000107e $t
             forth.s:1169   .text:0000000000001080 INN
ARM GAS  forth.s 			page 120


             forth.s:1177   .text:000000000000108a $d
             forth.s:1178   .text:000000000000108e _NTIB
             forth.s:1181   .text:0000000000001094 NTIB
             forth.s:1189   .text:000000000000109e $d
             forth.s:1190   .text:00000000000010a2 _TEVAL
             forth.s:1192   .text:00000000000010a8 $t
             forth.s:1193   .text:00000000000010a8 TEVAL
             forth.s:1201   .text:00000000000010b2 $d
             forth.s:1202   .text:00000000000010b6 _HLD
             forth.s:1204   .text:00000000000010ba $t
             forth.s:1205   .text:00000000000010bc HLD
             forth.s:1213   .text:00000000000010c6 $d
             forth.s:1214   .text:00000000000010ca _CNTXT
             forth.s:1216   .text:00000000000010d2 $t
             forth.s:1217   .text:00000000000010d4 CNTXT
             forth.s:1218   .text:00000000000010d4 CRRNT
             forth.s:1226   .text:00000000000010de $d
             forth.s:1227   .text:00000000000010e2 _CP
             forth.s:1230   .text:00000000000010e8 CPP
             forth.s:1237   .text:00000000000010f2 $d
             forth.s:1238   .text:00000000000010f6 _FCP
             forth.s:1240   .text:00000000000010fa $t
             forth.s:1241   .text:00000000000010fc FCP
             forth.s:1249   .text:0000000000001106 $d
             forth.s:1250   .text:000000000000110a _LAST
             forth.s:1253   .text:0000000000001110 LAST
             forth.s:1265   .text:000000000000111a $d
             forth.s:1266   .text:000000000000111e _USER_BGN
             forth.s:1269   .text:000000000000112c USER_BEGIN
             forth.s:1273   .text:0000000000001134 USR_BGN_ADR
             forth.s:1274   .text:0000000000001134 $d
             forth.s:1279   .text:000000000000113c _USER_END
             forth.s:1282   .text:0000000000001148 USER_END
             forth.s:1286   .text:0000000000001150 USER_END_ADR
             forth.s:1287   .text:0000000000001150 $d
             forth.s:1298   .text:0000000000001158 _WITHI
             forth.s:1301   .text:0000000000001160 WITHI
             forth.s:1303   .text:0000000000001164 $d
             forth.s:1317   .text:0000000000001184 _UMMOD
             forth.s:1320   .text:000000000000118c UMMOD
             forth.s:1324   .text:0000000000001196 UMMOD0
             forth.s:1331   .text:00000000000011a6 UMMOD1
             forth.s:1337   .text:00000000000011b0 UMMOD2
             forth.s:1347   .text:00000000000011bc $d
             forth.s:1348   .text:00000000000011c0 _MSMOD
             forth.s:1350   .text:00000000000011c6 $t
             forth.s:1351   .text:00000000000011c8 MSMOD
             forth.s:1353   .text:00000000000011cc $d
             forth.s:1362   .text:00000000000011f4 MMOD1
             forth.s:1369   .text:0000000000001210 MMOD2
             forth.s:1377   .text:0000000000001230 MMOD3
             forth.s:1384   .text:0000000000001238 _SLMOD
             forth.s:1387   .text:0000000000001240 SLMOD
             forth.s:1389   .text:0000000000001244 $d
             forth.s:1399   .text:000000000000125c _MODD
             forth.s:1401   .text:0000000000001260 $t
             forth.s:1404   .text:0000000000001264 $d
ARM GAS  forth.s 			page 121


             forth.s:1412   .text:0000000000001274 _SLASH
             forth.s:1414   .text:0000000000001276 $t
             forth.s:1415   .text:0000000000001278 SLASH
             forth.s:1417   .text:000000000000127c $d
             forth.s:1426   .text:0000000000001290 _SSMOD
             forth.s:1428   .text:0000000000001296 $t
             forth.s:1429   .text:0000000000001298 SSMOD
             forth.s:1431   .text:000000000000129c $d
             forth.s:1441   .text:00000000000012b4 _STASL
             forth.s:1444   .text:00000000000012b8 STASL
             forth.s:1446   .text:00000000000012bc $d
             forth.s:1458   .text:00000000000012d0 _ALGND
             forth.s:1460   .text:00000000000012d8 $t
             forth.s:1461   .text:00000000000012d8 ALGND
             forth.s:1470   .text:00000000000012e8 $d
             forth.s:1471   .text:00000000000012ec _TCHAR
             forth.s:1473   .text:00000000000012f2 $t
             forth.s:1474   .text:00000000000012f4 TCHAR
             forth.s:1476   .text:00000000000012f8 $d
             forth.s:1486   .text:0000000000001330 TCHA1
             forth.s:1493   .text:0000000000001338 _DEPTH
             forth.s:1495   .text:000000000000133e $t
             forth.s:1496   .text:0000000000001340 DEPTH
             forth.s:1506   .text:0000000000001358 $d
             forth.s:1507   .text:000000000000135c _PICK
             forth.s:1512   .text:0000000000001368 $d
             forth.s:1526   .text:0000000000001384 _HERE
             forth.s:1529   .text:000000000000138c HERE
             forth.s:1531   .text:0000000000001390 $d
             forth.s:1539   .text:00000000000013a0 _PAD
             forth.s:1541   .text:00000000000013a4 $t
             forth.s:1542   .text:00000000000013a4 PAD
             forth.s:1544   .text:00000000000013a8 $d
             forth.s:1553   .text:00000000000013c0 _TIB
             forth.s:1555   .text:00000000000013c4 $t
             forth.s:1556   .text:00000000000013c4 TIB
             forth.s:1564   .text:00000000000013ce $d
             forth.s:1565   .text:00000000000013d2 _ATEXE
             forth.s:1568   .text:00000000000013dc ATEXE
             forth.s:1580   .text:00000000000013f0 $d
             forth.s:1581   .text:00000000000013f4 _CMOVE
             forth.s:1583   .text:00000000000013fa $t
             forth.s:1584   .text:00000000000013fc CMOVE
             forth.s:1591   .text:000000000000140e CMOV1
             forth.s:1588   .text:0000000000001406 CMOV0
             forth.s:1596   .text:0000000000001418 CMOV2
             forth.s:1603   .text:0000000000001420 $d
             forth.s:1604   .text:0000000000001424 _MOVE
             forth.s:1615   .text:0000000000001442 MOVE1
             forth.s:1612   .text:000000000000143a MOVE0
             forth.s:1620   .text:000000000000144c MOVE2
             forth.s:1627   .text:0000000000001454 $d
             forth.s:1628   .text:0000000000001458 _FILL
             forth.s:1639   .text:000000000000146e FILL2
             forth.s:1635   .text:0000000000001466 FILL1
             forth.s:1646   .text:0000000000001476 $d
             forth.s:1647   .text:000000000000147a _PACKS
ARM GAS  forth.s 			page 122


             forth.s:1650   .text:0000000000001484 PACKS
             forth.s:1652   .text:0000000000001488 $d
             forth.s:1679   .text:00000000000014e0 _DIGIT
             forth.s:1681   .text:00000000000014e6 $t
             forth.s:1682   .text:00000000000014e8 DIGIT
             forth.s:1684   .text:00000000000014ec $d
             forth.s:1698   .text:0000000000001520 _EXTRC
             forth.s:1700   .text:0000000000001528 $t
             forth.s:1701   .text:0000000000001528 EXTRC
             forth.s:1703   .text:000000000000152c $d
             forth.s:1714   .text:000000000000154c _BDIGS
             forth.s:1717   .text:0000000000001550 BDIGS
             forth.s:1719   .text:0000000000001554 $d
             forth.s:1728   .text:0000000000001568 _HOLD
             forth.s:1733   .text:0000000000001574 $d
             forth.s:1746   .text:0000000000001598 _DIG
             forth.s:1748   .text:000000000000159a $t
             forth.s:1749   .text:000000000000159c DIG
             forth.s:1751   .text:00000000000015a0 $d
             forth.s:1761   .text:00000000000015b8 _DIGS
             forth.s:1764   .text:00000000000015bc DIGS
             forth.s:1766   .text:00000000000015c0 DIGS1
             forth.s:1767   .text:00000000000015c0 $d
             forth.s:1771   .text:00000000000015d8 DIGS2
             forth.s:1778   .text:00000000000015e0 _SIGN
             forth.s:1781   .text:00000000000015e8 SIGN
             forth.s:1783   .text:00000000000015ec $d
             forth.s:1787   .text:0000000000001604 SIGN1
             forth.s:1794   .text:000000000000160c _EDIGS
             forth.s:1797   .text:0000000000001610 EDIGS
             forth.s:1799   .text:0000000000001614 $d
             forth.s:1814   .text:0000000000001630 STRR
             forth.s:1815   .text:0000000000001630 $t
             forth.s:1816   .text:0000000000001634 $d
             forth.s:1830   .text:000000000000165c _HEX
             forth.s:1832   .text:0000000000001660 $t
             forth.s:1833   .text:0000000000001660 HEX
             forth.s:1835   .text:0000000000001664 $d
             forth.s:1844   .text:000000000000167c _DECIM
             forth.s:1846   .text:0000000000001684 $t
             forth.s:1847   .text:0000000000001684 DECIM
             forth.s:1849   .text:0000000000001688 $d
             forth.s:1861   .text:00000000000016a0 _DIGTQ
             forth.s:1864   .text:00000000000016a8 DIGTQ
             forth.s:1866   .text:00000000000016ac $d
             forth.s:1879   .text:00000000000016f4 DGTQ1
             forth.s:1889   .text:0000000000001708 _NUMBQ
             forth.s:1891   .text:0000000000001710 $t
             forth.s:1892   .text:0000000000001710 NUMBQ
             forth.s:1894   .text:0000000000001714 $d
             forth.s:1910   .text:0000000000001760 NUMQ1
             forth.s:1958   .text:0000000000001828 NUMQ6
             forth.s:1926   .text:00000000000017a4 NUMQ2
             forth.s:1950   .text:000000000000180c NUMQ4
             forth.s:1947   .text:0000000000001800 NUMQ3
             forth.s:1956   .text:0000000000001824 NUMQ5
             forth.s:1973   .text:0000000000001844 _KEY
ARM GAS  forth.s 			page 123


             forth.s:1975   .text:0000000000001848 $t
             forth.s:1976   .text:0000000000001848 KEY
             forth.s:1978   .text:000000000000184c KEY1
             forth.s:1979   .text:000000000000184c $d
             forth.s:1987   .text:0000000000001860 _SPACE
             forth.s:1989   .text:0000000000001866 $t
             forth.s:1990   .text:0000000000001868 SPACE
             forth.s:1992   .text:000000000000186c $d
             forth.s:2000   .text:000000000000187c _SPACS
             forth.s:2003   .text:0000000000001884 SPACS
             forth.s:2005   .text:0000000000001888 $d
             forth.s:2011   .text:00000000000018a4 CHAR2
             forth.s:2009   .text:00000000000018a0 CHAR1
             forth.s:2019   .text:00000000000018b4 _TYPEE
             forth.s:2022   .text:00000000000018bc TYPEE
             forth.s:2024   .text:00000000000018c0 $d
             forth.s:2030   .text:00000000000018d8 TYPE2
             forth.s:2026   .text:00000000000018cc TYPE1
             forth.s:2039   .text:00000000000018ec _CR
             forth.s:2042   .text:00000000000018f0 CR
             forth.s:2044   .text:00000000000018f4 $d
             forth.s:2058   .text:0000000000001910 DOSTR
             forth.s:2059   .text:0000000000001910 $t
             forth.s:2061   .text:0000000000001914 $d
             forth.s:2080   .text:000000000000193c STRQP
             forth.s:2081   .text:000000000000193c $t
             forth.s:2082   .text:0000000000001940 $d
             forth.s:2092   .text:0000000000001948 DOTST
             forth.s:2093   .text:0000000000001948 $t
             forth.s:2094   .text:000000000000194c $d
             forth.s:2105   .text:0000000000001958 DOTQP
             forth.s:2106   .text:0000000000001958 $t
             forth.s:2107   .text:000000000000195c $d
             forth.s:2115   .text:000000000000196c _DOTR
             forth.s:2118   .text:0000000000001970 DOTR
             forth.s:2120   .text:0000000000001974 $d
             forth.s:2133   .text:0000000000001998 _UDOTR
             forth.s:2135   .text:000000000000199c $t
             forth.s:2136   .text:000000000000199c UDOTR
             forth.s:2138   .text:00000000000019a0 $d
             forth.s:2153   .text:00000000000019cc _UDOT
             forth.s:2156   .text:00000000000019d0 UDOT
             forth.s:2158   .text:00000000000019d4 $d
             forth.s:2169   .text:00000000000019f0 _DOT
             forth.s:2171   .text:00000000000019f2 $t
             forth.s:2172   .text:00000000000019f4 DOT
             forth.s:2174   .text:00000000000019f8 $d
             forth.s:2181   .text:0000000000001a1c DOT1
             forth.s:2191   .text:0000000000001a30 _QUEST
             forth.s:2193   .text:0000000000001a32 $t
             forth.s:2194   .text:0000000000001a34 QUEST
             forth.s:2196   .text:0000000000001a38 $d
             forth.s:2210   .text:0000000000001a44 PARS
             forth.s:2211   .text:0000000000001a44 $t
             forth.s:2212   .text:0000000000001a48 $d
             forth.s:2278   .text:0000000000001b58 PARS8
             forth.s:2242   .text:0000000000001acc PARS3
ARM GAS  forth.s 			page 124


             forth.s:2225   .text:0000000000001a84 PARS1
             forth.s:2240   .text:0000000000001ac8 PARS2
             forth.s:2246   .text:0000000000001ad8 PARS4
             forth.s:2258   .text:0000000000001b08 PARS5
             forth.s:2265   .text:0000000000001b2c PARS6
             forth.s:2271   .text:0000000000001b40 PARS7
             forth.s:2288   .text:0000000000001b6c _PARSE
             forth.s:2290   .text:0000000000001b72 $t
             forth.s:2291   .text:0000000000001b74 PARSE
             forth.s:2293   .text:0000000000001b78 $d
             forth.s:2313   .text:0000000000001bb8 _DOTPR
             forth.s:2316   .text:0000000000001bbc DOTPR
             forth.s:2318   .text:0000000000001bc0 $d
             forth.s:2327   .text:0000000000001bd8 _PAREN
             forth.s:2329   .text:0000000000001bda $t
             forth.s:2330   .text:0000000000001bdc PAREN
             forth.s:2332   .text:0000000000001be0 $d
             forth.s:2341   .text:0000000000001bf8 _BKSLA
             forth.s:2343   .text:0000000000001bfa $t
             forth.s:2344   .text:0000000000001bfc BKSLA
             forth.s:2346   .text:0000000000001c00 $d
             forth.s:2356   .text:0000000000001c18 _CHAR
             forth.s:2359   .text:0000000000001c20 CHAR
             forth.s:2361   .text:0000000000001c24 $d
             forth.s:2371   .text:0000000000001c3c _WORDD
             forth.s:2374   .text:0000000000001c44 WORDD
             forth.s:2376   .text:0000000000001c48 $d
             forth.s:2386   .text:0000000000001c60 _TOKEN
             forth.s:2388   .text:0000000000001c66 $t
             forth.s:2389   .text:0000000000001c68 TOKEN
             forth.s:2391   .text:0000000000001c6c $d
             forth.s:2402   .text:0000000000001c7c _NAMET
             forth.s:2404   .text:0000000000001c82 $t
             forth.s:2405   .text:0000000000001c84 NAMET
             forth.s:2407   .text:0000000000001c88 $d
             forth.s:2423   .text:0000000000001ca8 _SAMEQ
             forth.s:2425   .text:0000000000001cae $t
             forth.s:2426   .text:0000000000001cb0 SAMEQ
             forth.s:2428   .text:0000000000001cb4 $d
             forth.s:2445   .text:0000000000001cfc SAME2
             forth.s:2430   .text:0000000000001cc0 SAME1
             forth.s:2460   .text:0000000000001d10 FIND
             forth.s:2461   .text:0000000000001d10 $t
             forth.s:2462   .text:0000000000001d14 $d
             forth.s:2469   .text:0000000000001d30 FIND1
             forth.s:2489   .text:0000000000001d88 FIND6
             forth.s:2482   .text:0000000000001d70 FIND2
             forth.s:2487   .text:0000000000001d80 FIND3
             forth.s:2496   .text:0000000000001da0 FIND4
             forth.s:2502   .text:0000000000001dbc FIND5
             forth.s:2517   .text:0000000000001de4 _NAMEQ
             forth.s:2519   .text:0000000000001dea $t
             forth.s:2520   .text:0000000000001dec NAMEQ
             forth.s:2522   .text:0000000000001df0 $d
             forth.s:2537   .text:0000000000001e00 BKSP
             forth.s:2538   .text:0000000000001e00 $t
             forth.s:2539   .text:0000000000001e04 $d
ARM GAS  forth.s 			page 125


             forth.s:2553   .text:0000000000001e48 BACK1
             forth.s:2563   .text:0000000000001e4c TAP
             forth.s:2564   .text:0000000000001e4c $t
             forth.s:2565   .text:0000000000001e50 $d
             forth.s:2579   .text:0000000000001e68 KTAP
             forth.s:2580   .text:0000000000001e68 TTAP
             forth.s:2581   .text:0000000000001e68 $t
             forth.s:2582   .text:0000000000001e6c $d
             forth.s:2596   .text:0000000000001eac KTAP2
             forth.s:2593   .text:0000000000001ea4 KTAP1
             forth.s:2607   .text:0000000000001ec4 _ACCEP
             forth.s:2610   .text:0000000000001ecc ACCEP
             forth.s:2612   .text:0000000000001ed0 $d
             forth.s:2615   .text:0000000000001edc ACCP1
             forth.s:2631   .text:0000000000001f24 ACCP4
             forth.s:2627   .text:0000000000001f18 ACCP2
             forth.s:2629   .text:0000000000001f1c ACCP3
             forth.s:2641   .text:0000000000001f38 _QUERY
             forth.s:2643   .text:0000000000001f3e $t
             forth.s:2644   .text:0000000000001f40 QUERY
             forth.s:2646   .text:0000000000001f44 $d
             forth.s:2664   .text:0000000000001f78 _ABORT
             forth.s:2666   .text:0000000000001f7e $t
             forth.s:2667   .text:0000000000001f80 ABORT
             forth.s:2669   .text:0000000000001f84 ABORT1
             forth.s:2670   .text:0000000000001f84 $d
             forth.s:2801   .text:0000000000002108 PRESE
             forth.s:2814   .text:0000000000002128 QUIT
             forth.s:2686   .text:0000000000001fac ABORQ
             forth.s:2687   .text:0000000000001fac $t
             forth.s:2688   .text:0000000000001fb0 $d
             forth.s:2703   .text:0000000000001fd4 _INTER
             forth.s:2705   .text:0000000000001fe0 $t
             forth.s:2708   .text:0000000000001fe4 $d
             forth.s:2717   .text:0000000000002020 INTE1
             forth.s:2714   .text:0000000000002016 $t
             forth.s:2715   .text:0000000000002018 $d
             forth.s:2721   .text:0000000000002030 INTE2
             forth.s:2728   .text:0000000000002038 _LBRAC
             forth.s:2730   .text:000000000000203a $t
             forth.s:2731   .text:000000000000203c LBRAC
             forth.s:2733   .text:0000000000002040 $d
             forth.s:2742   .text:0000000000002058 _DOTOK
             forth.s:2744   .text:000000000000205c $t
             forth.s:2745   .text:000000000000205c DOTOK
             forth.s:2747   .text:0000000000002060 $d
             forth.s:2753   .text:0000000000002084 DOTO1
             forth.s:2754   .text:0000000000002084 $d
             forth.s:2761   .text:0000000000002090 _QSTAC
             forth.s:2764   .text:0000000000002098 QSTAC
             forth.s:2766   .text:000000000000209c $d
             forth.s:2768   .text:00000000000020b2 $t
             forth.s:2769   .text:00000000000020b4 $d
             forth.s:2775   .text:00000000000020bc _EVAL
             forth.s:2780   .text:00000000000020c8 EVAL1
             forth.s:2781   .text:00000000000020c8 $d
             forth.s:2789   .text:00000000000020f0 EVAL2
ARM GAS  forth.s 			page 126


             forth.s:2798   .text:0000000000002100 _PRESE
             forth.s:2803   .text:000000000000210c $d
             forth.s:2811   .text:0000000000002120 _QUIT
             forth.s:2815   .text:0000000000002128 $d
             forth.s:2817   .text:0000000000002134 QUIT1
             forth.s:2819   .text:0000000000002138 QUIT2
             forth.s:2825   .text:000000000000214c _FORGET
             forth.s:2828   .text:0000000000002154 FORGET
             forth.s:2830   .text:0000000000002158 $d
             forth.s:3279   .text:0000000000002600 OVERT
             forth.s:2855   .text:00000000000021a0 $d
             forth.s:2856   .text:00000000000021a4 _TICK
             forth.s:2858   .text:00000000000021a6 $t
             forth.s:2859   .text:00000000000021a8 TICK
             forth.s:2861   .text:00000000000021ac $d
             forth.s:2865   .text:00000000000021c0 TICK1
             forth.s:2872   .text:00000000000021c8 _ALLOT
             forth.s:2874   .text:00000000000021ce $t
             forth.s:2875   .text:00000000000021d0 ALLOT
             forth.s:2877   .text:00000000000021d4 $d
             forth.s:2885   .text:00000000000021e4 _COMMA
             forth.s:2886   .text:00000000000021e6 $t
             forth.s:2887   .text:00000000000021e8 COMMA
             forth.s:2889   .text:00000000000021ec $d
             forth.s:2900   .text:0000000000002208 $d
             forth.s:2901   .text:000000000000220c _BCOMP
             forth.s:2903   .text:0000000000002216 $t
             forth.s:2904   .text:0000000000002218 BCOMP
             forth.s:2906   .text:000000000000221c $d
             forth.s:2914   .text:000000000000222c _COMPI
             forth.s:2916   .text:0000000000002234 $t
             forth.s:2917   .text:0000000000002234 COMPI
             forth.s:2919   .text:0000000000002238 $d
             forth.s:2933   .text:0000000000002264 _LITER
             forth.s:2935   .text:000000000000226c $t
             forth.s:2936   .text:000000000000226c LITER
             forth.s:2938   .text:0000000000002270 $d
             forth.s:3323   .text:000000000000265c CALLC
             forth.s:2949   .text:0000000000002284 STRCQ
             forth.s:2950   .text:0000000000002284 $t
             forth.s:2951   .text:0000000000002288 $d
             forth.s:2970   .text:00000000000022c0 _FOR
             forth.s:2972   .text:00000000000022c4 $t
             forth.s:2973   .text:00000000000022c4 FOR
             forth.s:2975   .text:00000000000022c8 $d
             forth.s:2983   .text:00000000000022e0 _BEGIN
             forth.s:2985   .text:00000000000022e6 $t
             forth.s:2986   .text:00000000000022e8 BEGIN
             forth.s:2988   .text:00000000000022ec $d
             forth.s:2994   .text:00000000000022f4 $d
             forth.s:2995   .text:00000000000022f8 _FNEXT
             forth.s:2998   .text:0000000000002300 FNEXT
             forth.s:3000   .text:0000000000002304 $d
             forth.s:3008   .text:000000000000231c _UNTIL
             forth.s:3010   .text:0000000000002322 $t
             forth.s:3011   .text:0000000000002324 UNTIL
             forth.s:3013   .text:0000000000002328 $d
ARM GAS  forth.s 			page 127


             forth.s:3021   .text:0000000000002340 _AGAIN
             forth.s:3023   .text:0000000000002346 $t
             forth.s:3024   .text:0000000000002348 AGAIN
             forth.s:3026   .text:000000000000234c $d
             forth.s:3034   .text:0000000000002364 _IFF
             forth.s:3037   .text:0000000000002368 IFF
             forth.s:3039   .text:000000000000236c $d
             forth.s:3050   .text:0000000000002394 _AHEAD
             forth.s:3052   .text:000000000000239a $t
             forth.s:3053   .text:000000000000239c AHEAD
             forth.s:3055   .text:00000000000023a0 $d
             forth.s:3066   .text:00000000000023c8 _REPEA
             forth.s:3069   .text:00000000000023d0 REPEA
             forth.s:3071   .text:00000000000023d4 $d
             forth.s:3081   .text:00000000000023ec _THENN
             forth.s:3084   .text:00000000000023f4 THENN
             forth.s:3086   .text:00000000000023f8 $d
             forth.s:3095   .text:000000000000240c _AFT
             forth.s:3097   .text:0000000000002410 $t
             forth.s:3098   .text:0000000000002410 AFT
             forth.s:3100   .text:0000000000002414 $d
             forth.s:3110   .text:000000000000242c _ELSEE
             forth.s:3113   .text:0000000000002434 ELSEE
             forth.s:3115   .text:0000000000002438 $d
             forth.s:3124   .text:000000000000244c _WHILE
             forth.s:3126   .text:0000000000002452 $t
             forth.s:3127   .text:0000000000002454 WHILE
             forth.s:3129   .text:0000000000002458 $d
             forth.s:3137   .text:0000000000002468 _ABRTQ
             forth.s:3140   .text:0000000000002470 ABRTQ
             forth.s:3142   .text:0000000000002474 $d
             forth.s:3150   .text:000000000000248c _STRQ
             forth.s:3153   .text:0000000000002490 STRQ
             forth.s:3155   .text:0000000000002494 $d
             forth.s:3163   .text:00000000000024ac _DOTQ
             forth.s:3166   .text:00000000000024b0 DOTQ
             forth.s:3168   .text:00000000000024b4 $d
             forth.s:3179   .text:00000000000024cc _UNIQU
             forth.s:3181   .text:00000000000024d4 $t
             forth.s:3182   .text:00000000000024d4 UNIQU
             forth.s:3184   .text:00000000000024d8 $d
             forth.s:3191   .text:0000000000002500 UNIQ1
             forth.s:3188   .text:00000000000024f4 $d
             forth.s:3202   .text:0000000000002508 SNAME
             forth.s:3203   .text:0000000000002508 $t
             forth.s:3204   .text:000000000000250c $d
             forth.s:3220   .text:0000000000002550 SNAM1
             forth.s:3230   .text:0000000000002564 _SCOMP
             forth.s:3233   .text:0000000000002570 SCOMP
             forth.s:3235   .text:0000000000002574 $d
             forth.s:3247   .text:00000000000025ac SCOM2
             forth.s:3244   .text:00000000000025a4 SCOM1
             forth.s:3252   .text:00000000000025c0 SCOM3
             forth.s:3259   .text:00000000000025c8 COLON_ABORT
             forth.s:3260   .text:00000000000025c8 $t
             forth.s:3261   .text:00000000000025cc $d
             forth.s:3276   .text:00000000000025f8 _OVERT
ARM GAS  forth.s 			page 128


             forth.s:3278   .text:00000000000025fe $t
             forth.s:3281   .text:0000000000002604 $d
             forth.s:3291   .text:000000000000261c _SEMIS
             forth.s:3293   .text:000000000000261e $t
             forth.s:3294   .text:0000000000002620 SEMIS
             forth.s:3296   .text:0000000000002624 $d
             forth.s:3306   .text:0000000000002640 _RBRAC
             forth.s:3308   .text:0000000000002642 $t
             forth.s:3309   .text:0000000000002644 RBRAC
             forth.s:3311   .text:0000000000002648 $d
             forth.s:3324   .text:000000000000265c $t
             forth.s:3325   .text:0000000000002660 $d
             forth.s:3335   .text:0000000000002678 _COLON
             forth.s:3337   .text:000000000000267a $t
             forth.s:3338   .text:000000000000267c COLON
             forth.s:3340   .text:0000000000002680 $d
             forth.s:3350   .text:0000000000002698 _IMMED
             forth.s:3352   .text:00000000000026a2 $t
             forth.s:3353   .text:00000000000026a4 IMMED
             forth.s:3355   .text:00000000000026a8 $d
             forth.s:3372   .text:00000000000026d4 _CONST
             forth.s:3375   .text:00000000000026e0 CONST
             forth.s:3377   .text:00000000000026e4 $d
             forth.s:3388   .text:0000000000002714 $t
             forth.s:3392   .text:0000000000002714 DODOES
             forth.s:3394   .text:0000000000002718 $d
             forth.s:3407   .text:000000000000273c $d
             forth.s:3408   .text:0000000000002740 _DOES
             forth.s:3410   .text:0000000000002746 $t
             forth.s:3411   .text:0000000000002748 DOES
             forth.s:3413   .text:000000000000274c $d
             forth.s:3427   .text:000000000000277c _DEFERAT
             forth.s:3430   .text:0000000000002784 DEFERAT
             forth.s:3432   .text:0000000000002788 $d
             forth.s:3441   .text:00000000000027a0 _DEFERSTO
             forth.s:3444   .text:00000000000027a8 DEFERSTO
             forth.s:3446   .text:00000000000027ac $d
             forth.s:3456   .text:00000000000027c8 _DEFER
             forth.s:3458   .text:00000000000027ce $t
             forth.s:3459   .text:00000000000027d0 DEFER
             forth.s:3461   .text:00000000000027d4 $d
             forth.s:3484   .text:0000000000002820 CREAT
             forth.s:3472   .text:0000000000002808 DEFER_NOP
             forth.s:3473   .text:0000000000002808 $t
             forth.s:3474   .text:000000000000280c $d
             forth.s:3481   .text:0000000000002818 _CREAT
             forth.s:3486   .text:0000000000002824 $d
             forth.s:3498   .text:0000000000002848 _VARIA
             forth.s:3501   .text:0000000000002854 VARIA
             forth.s:3503   .text:0000000000002858 $d
             forth.s:3520   .text:0000000000002878 DMP
             forth.s:3521   .text:0000000000002878 $t
             forth.s:3522   .text:000000000000287c $d
             forth.s:3534   .text:00000000000028b4 PDUM2
             forth.s:3528   .text:000000000000289c PDUM1
             forth.s:3542   .text:00000000000028c0 $d
             forth.s:3543   .text:00000000000028c4 _DUMP
ARM GAS  forth.s 			page 129


             forth.s:3546   .text:00000000000028cc DUMP
             forth.s:3548   .text:00000000000028d0 $d
             forth.s:3566   .text:0000000000002920 DUMP4
             forth.s:3556   .text:00000000000028f8 DUMP1
             forth.s:3568   .text:0000000000002928 DUMP3
             forth.s:3579   .text:0000000000002940 _DOTS
             forth.s:3583   .text:0000000000002944 DOTS
             forth.s:3585   .text:0000000000002948 $d
             forth.s:3593   .text:0000000000002968 DOTS2
             forth.s:3589   .text:000000000000295c DOTS1
             forth.s:3602   .text:000000000000297c _TNAME
             forth.s:3604   .text:0000000000002982 $t
             forth.s:3605   .text:0000000000002984 TNAME
             forth.s:3607   .text:0000000000002988 $d
             forth.s:3610   .text:0000000000002994 TNAM1
             forth.s:3621   .text:00000000000029c8 TNAM2
             forth.s:3630   .text:00000000000029d8 _DOTID
             forth.s:3632   .text:00000000000029dc $t
             forth.s:3633   .text:00000000000029dc DOTID
             forth.s:3635   .text:00000000000029e0 $d
             forth.s:3642   .text:0000000000002a04 DOTI1
             forth.s:3643   .text:0000000000002a12 $t
             forth.s:3644   .text:0000000000002a14 $d
             forth.s:3646   *ABS*:0000000000000000 WANT_SEE
             forth.s:3726   .text:0000000000002a1c _WORDS
             forth.s:3728   .text:0000000000002a22 $t
             forth.s:3729   .text:0000000000002a24 WORDS
             forth.s:3731   .text:0000000000002a28 $d
             forth.s:3734   .text:0000000000002a34 WORS1
             forth.s:3743   .text:0000000000002a5c WORS2
             forth.s:3756   .text:0000000000002a60 VERSN
             forth.s:3757   .text:0000000000002a60 $t
             forth.s:3758   .text:0000000000002a64 $d
             forth.s:3765   .text:0000000000002a74 _HI
             forth.s:3771   .text:0000000000002a7c $d
             forth.s:3772   .text:0000000000002a96 $t
             forth.s:3773   .text:0000000000002a98 $d
             forth.s:3802   .text:0000000000002afc COLD1
             forth.s:3803   .text:0000000000002afc $d
             forth.s:3814   .text:0000000000002b3c COLD2
             forth.s:3817   .text:0000000000002b3c $d
             forth.s:3820   .text:0000000000002b40 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             tvout.s:256    .text:00000000000004ed $d
             tvout.s:256    .text:00000000000004ee $t
             tvout.s:270    .text:000000000000051d $d
             tvout.s:270    .text:000000000000051e $t
             tvout.s:298    .text:000000000000056f $d
             tvout.s:298    .text:0000000000000570 $t
             tvout.s:317    .text:0000000000000595 $d
             tvout.s:317    .text:0000000000000596 $t
             tvout.s:432    .text:00000000000006f5 $d
             tvout.s:432    .text:00000000000006f6 $t
             forth.s:124    .text:00000000000009ed $d
             forth.s:124    .text:00000000000009ee $t
             forth.s:175    .text:0000000000000a9d $d
ARM GAS  forth.s 			page 130


             forth.s:175    .text:0000000000000a9e $t
             forth.s:195    .text:0000000000000ac9 $d
             forth.s:195    .text:0000000000000aca $t
             forth.s:219    .text:0000000000000aff $d
             forth.s:219    .text:0000000000000b00 $t
             forth.s:328    .text:0000000000000b89 $d
             forth.s:328    .text:0000000000000b8a $t
             forth.s:362    .text:0000000000000bb7 $d
             forth.s:362    .text:0000000000000bb8 $t
             forth.s:375    .text:0000000000000bcb $d
             forth.s:375    .text:0000000000000bcc $t
             forth.s:386    .text:0000000000000bd7 $d
             forth.s:386    .text:0000000000000bd8 $t
             forth.s:398    .text:0000000000000be9 $d
             forth.s:398    .text:0000000000000bea $t
             forth.s:410    .text:0000000000000bfd $d
             forth.s:410    .text:0000000000000bfe $t
             forth.s:457    .text:0000000000000c45 $d
             forth.s:457    .text:0000000000000c46 $t
             forth.s:479    .text:0000000000000c67 $d
             forth.s:479    .text:0000000000000c68 $t
             forth.s:492    .text:0000000000000c79 $d
             forth.s:492    .text:0000000000000c7a $t
             forth.s:504    .text:0000000000000c8b $d
             forth.s:504    .text:0000000000000c8c $t
             forth.s:529    .text:0000000000000cad $d
             forth.s:529    .text:0000000000000cae $t
             forth.s:568    .text:0000000000000cf3 $d
             forth.s:568    .text:0000000000000cf4 $t
             forth.s:580    .text:0000000000000d09 $d
             forth.s:580    .text:0000000000000d0a $t
             forth.s:642    .text:0000000000000d63 $d
             forth.s:642    .text:0000000000000d64 $t
             forth.s:656    .text:0000000000000d77 $d
             forth.s:656    .text:0000000000000d78 $t
             forth.s:667    .text:0000000000000d85 $d
             forth.s:667    .text:0000000000000d86 $t
             forth.s:678    .text:0000000000000d95 $d
             forth.s:678    .text:0000000000000d96 $t
             forth.s:689    .text:0000000000000da5 $d
             forth.s:689    .text:0000000000000da6 $t
             forth.s:722    .text:0000000000000dd5 $d
             forth.s:722    .text:0000000000000dd6 $t
             forth.s:756    .text:0000000000000e09 $d
             forth.s:756    .text:0000000000000e0a $t
             forth.s:767    .text:0000000000000e19 $d
             forth.s:767    .text:0000000000000e1a $t
             forth.s:778    .text:0000000000000e2b $d
             forth.s:778    .text:0000000000000e2c $t
             forth.s:817    .text:0000000000000e67 $d
             forth.s:817    .text:0000000000000e68 $t
             forth.s:830    .text:0000000000000e7b $d
             forth.s:830    .text:0000000000000e7c $t
             forth.s:857    .text:0000000000000ea9 $d
             forth.s:857    .text:0000000000000eaa $t
             forth.s:881    .text:0000000000000ecd $d
             forth.s:881    .text:0000000000000ece $t
ARM GAS  forth.s 			page 131


             forth.s:910    .text:0000000000000efb $d
             forth.s:910    .text:0000000000000efc $t
             forth.s:983    .text:0000000000000f6b $d
             forth.s:983    .text:0000000000000f6c $t
             forth.s:998    .text:0000000000000f83 $d
             forth.s:998    .text:0000000000000f84 $t
             forth.s:1013   .text:0000000000000f9f $d
             forth.s:1013   .text:0000000000000fa0 $t
             forth.s:1086   .text:0000000000000ffb $d
             forth.s:1086   .text:0000000000000ffc $t
             forth.s:1097   .text:000000000000100f $d
             forth.s:1097   .text:0000000000001010 $t
             forth.s:1132   .text:000000000000104b $d
             forth.s:1132   .text:000000000000104c $t
             forth.s:1156   .text:0000000000001069 $d
             forth.s:1156   .text:000000000000106a $t
             forth.s:1180   .text:0000000000001093 $d
             forth.s:1180   .text:0000000000001094 $t
             forth.s:1229   .text:00000000000010e5 $d
             forth.s:1229   .text:00000000000010e6 $t
             forth.s:1252   .text:000000000000110f $d
             forth.s:1252   .text:0000000000001110 $t
             forth.s:1268   .text:0000000000001129 $d
             forth.s:1268   .text:000000000000112a $t
             forth.s:1281   .text:0000000000001145 $d
             forth.s:1281   .text:0000000000001146 $t
             forth.s:1300   .text:000000000000115f $d
             forth.s:1300   .text:0000000000001160 $t
             forth.s:1319   .text:000000000000118b $d
             forth.s:1319   .text:000000000000118c $t
             forth.s:1386   .text:000000000000123d $d
             forth.s:1386   .text:000000000000123e $t
             forth.s:1443   .text:00000000000012b7 $d
             forth.s:1443   .text:00000000000012b8 $t
             forth.s:1509   .text:0000000000001361 $d
             forth.s:1509   .text:0000000000001362 $t
             forth.s:1528   .text:0000000000001389 $d
             forth.s:1528   .text:000000000000138a $t
             forth.s:1567   .text:00000000000013db $d
             forth.s:1567   .text:00000000000013dc $t
             forth.s:1606   .text:0000000000001429 $d
             forth.s:1606   .text:000000000000142a $t
             forth.s:1630   .text:000000000000145d $d
             forth.s:1630   .text:000000000000145e $t
             forth.s:1649   .text:0000000000001481 $d
             forth.s:1649   .text:0000000000001482 $t
             forth.s:1716   .text:000000000000154f $d
             forth.s:1716   .text:0000000000001550 $t
             forth.s:1730   .text:000000000000156d $d
             forth.s:1730   .text:000000000000156e $t
             forth.s:1763   .text:00000000000015bb $d
             forth.s:1763   .text:00000000000015bc $t
             forth.s:1780   .text:00000000000015e5 $d
             forth.s:1780   .text:00000000000015e6 $t
             forth.s:1796   .text:000000000000160f $d
             forth.s:1796   .text:0000000000001610 $t
             forth.s:1863   .text:00000000000016a7 $d
ARM GAS  forth.s 			page 132


             forth.s:1863   .text:00000000000016a8 $t
             forth.s:2002   .text:0000000000001883 $d
             forth.s:2002   .text:0000000000001884 $t
             forth.s:2021   .text:00000000000018b9 $d
             forth.s:2021   .text:00000000000018ba $t
             forth.s:2041   .text:00000000000018ef $d
             forth.s:2041   .text:00000000000018f0 $t
             forth.s:2117   .text:000000000000196f $d
             forth.s:2117   .text:0000000000001970 $t
             forth.s:2155   .text:00000000000019cf $d
             forth.s:2155   .text:00000000000019d0 $t
             forth.s:2315   .text:0000000000001bbb $d
             forth.s:2315   .text:0000000000001bbc $t
             forth.s:2358   .text:0000000000001c1d $d
             forth.s:2358   .text:0000000000001c1e $t
             forth.s:2373   .text:0000000000001c41 $d
             forth.s:2373   .text:0000000000001c42 $t
             forth.s:2609   .text:0000000000001ecb $d
             forth.s:2609   .text:0000000000001ecc $t
             forth.s:2763   .text:0000000000002097 $d
             forth.s:2763   .text:0000000000002098 $t
             forth.s:2777   .text:00000000000020c1 $d
             forth.s:2777   .text:00000000000020c2 $t
             forth.s:2800   .text:0000000000002107 $d
             forth.s:2800   .text:0000000000002108 $t
             forth.s:2813   .text:0000000000002125 $d
             forth.s:2813   .text:0000000000002126 $t
             forth.s:2827   .text:0000000000002153 $d
             forth.s:2827   .text:0000000000002154 $t
             forth.s:2997   .text:00000000000022fd $d
             forth.s:2997   .text:00000000000022fe $t
             forth.s:3036   .text:0000000000002367 $d
             forth.s:3036   .text:0000000000002368 $t
             forth.s:3068   .text:00000000000023cf $d
             forth.s:3068   .text:00000000000023d0 $t
             forth.s:3083   .text:00000000000023f1 $d
             forth.s:3083   .text:00000000000023f2 $t
             forth.s:3112   .text:0000000000002431 $d
             forth.s:3112   .text:0000000000002432 $t
             forth.s:3139   .text:000000000000246f $d
             forth.s:3139   .text:0000000000002470 $t
             forth.s:3152   .text:000000000000248f $d
             forth.s:3152   .text:0000000000002490 $t
             forth.s:3165   .text:00000000000024af $d
             forth.s:3165   .text:00000000000024b0 $t
             forth.s:3232   .text:000000000000256d $d
             forth.s:3232   .text:000000000000256e $t
             forth.s:3374   .text:00000000000026dd $d
             forth.s:3374   .text:00000000000026de $t
             forth.s:3429   .text:0000000000002783 $d
             forth.s:3429   .text:0000000000002784 $t
             forth.s:3443   .text:00000000000027a7 $d
             forth.s:3443   .text:00000000000027a8 $t
             forth.s:3483   .text:000000000000281f $d
             forth.s:3483   .text:0000000000002820 $t
             forth.s:3500   .text:0000000000002851 $d
             forth.s:3500   .text:0000000000002852 $t
ARM GAS  forth.s 			page 133


             forth.s:3545   .text:00000000000028c9 $d
             forth.s:3545   .text:00000000000028ca $t
             forth.s:3582   .text:0000000000002943 $d
             forth.s:3582   .text:0000000000002944 $t
             forth.s:3767   .text:0000000000002a77 $d
             forth.s:3767   .text:0000000000002a78 $t
             forth.s:3796   .text:0000000000002ae5 $d
             forth.s:3796   .text:0000000000002ae6 $t

UNDEFINED SYMBOLS
_mstack
