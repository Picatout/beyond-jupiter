ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
 199              	   .equ NVIC_ISPR2, 0x208 
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXTI9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
ARM GAS  forth.s 			page 6


 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
 313              	.equ TIM_SR,16
ARM GAS  forth.s 			page 7


 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
ARM GAS  forth.s 			page 8


  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
ARM GAS  forth.s 			page 9


  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		/* dictionary header  */
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
ARM GAS  forth.s 			page 10


 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
ARM GAS  forth.s 			page 11


 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    STMFD	RSP!,{IP}
 223              	    ldr IP,=\target
 224              		b INEXT   
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
ARM GAS  forth.s 			page 12


  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
ARM GAS  forth.s 			page 13


 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF890C4 	  ldr IP,=dh
 159 000e 01F095BB 	  b INEXT  
 160              	dh:
ARM GAS  forth.s 			page 14


 161 0012 A52E0000 	  _ADR PRESE    
 162 0016 BB180000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e 711D0000 	  _ADR COUNT 
 164 0022 59260000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a ED190000 	  _ADR DUPP
 167 002e 95190000 	  _ADR TOR 
 168 0032 BB180000 	  _DOLIT 16 
 168      10000000 
 169 003a 091E0000 	  _ADR BASE 
 170 003e 2D190000 	  _ADR STORE 
 171 0042 91270000 	  _ADR DOT 
 172 0046 6D190000 	  _ADR RFROM
 173 004a BB180000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 311A0000 	  _ADR ANDD
 175 0056 FB180000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 BB180000 	  _DOLIT ','
 177      2C000000 
 178 006a C5170000 	  _ADR EMIT 
 179 006e 05260000 	  _ADR SPACE 
 180 0072 91270000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F058BB 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F04FBB 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
ARM GAS  forth.s 			page 15


 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C0C3 	  ldr IP,=ur
 232 00e2 01F02BBB 	  b INEXT  
 233              	ur:
 234 00e6 A52E0000 	  _ADR PRESE
 235 00ea 8D260000 	  _ADR CR   
 236 00ee BB180000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 711D0000 		_ADR COUNT 
 238 00fa 59260000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
ARM GAS  forth.s 			page 16


 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C4F9 		bl  ser_init
 271 0152 FFF7FEFF 		bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F085FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 03F0CFBB 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF820A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
ARM GAS  forth.s 			page 17


 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 347 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 348 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 349 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 350 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 351              	/* configure GPIOC:13 as output for user LED */
 352 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 352      C4F20200 
 353 0206 4FF00D01 	  mov r1,#LED_PIN
 354 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 355 020e 00B500F0 	  _CALL gpio_config 
 355      8FF85DF8 
 355      04EB
 356 0218 4FF00102 	  mov r2,#1
 357 021c 00B500F0 	  _CALL gpio_out 
ARM GAS  forth.s 			page 18


 357      DEF85DF8 
 357      04EB
 358              	/* enable compensation CELL for fast I/O */
 359 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 359      C4F20101 
 360 022e 4FF00100 		mov r0,#1 
 361 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 362              	/* wait for ready bit */ 
 363 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 364 0236 10F4807F 	    tst r0,#(1<<8)
 365 023a FBD0     		beq 1b 	
 366              	
 367              	
 368              	/* configure systicks for 1msec ticks */
 369              	// set priority to 15 (lowest)
 370 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 371 0240 4FF00F01 	  mov r1,#15 
 372 0244 00B500F0 	  _CALL nvic_set_priority
 372      2FF85DF8 
 372      04EB
 373 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 373      CEF20000 
 374 0256 47F2FF61 	  _MOV32 r1,95999 
 374      C0F20101 
 375 025e 4160     	  str r1,[r0,#STK_LOAD]
 376 0260 4FF00701 	  mov r1,#7
 377 0264 0160     	  str r1,[r0,STK_CTL]
 378 0266 7047     	  _RET  
 379              	
 380              	
 381              	/* copy system variables to RAM */ 
 382              		.type remap, %function 
 383              	    .global remap 
 384              	remap:
 385              	// copy system to RAM 	
 386 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 386      C2F20000 
 387 0270 8D49     		ldr r1,=UZERO 
 388 0272 4FF0A802 		mov r2,#ULAST-UZERO 
 389 0276 02F10302 		add r2,r2,#3
 390 027a 22F00302 		and r2,r2,#~3 
 391 027e 51F8043B 	1:	ldr r3,[r1],#4 
 392 0282 40F8043B 		str r3,[r0],#4 
 393 0286 043A     		subs R2,#4 
 394 0288 F9D1     		bne 1b
 395              	// zero end of RAM 
 396 028a 4FF00002 		_MOV32 r2,RAM_END 
 396      C2F20202 
 397 0292 83EA0303 		eor r3,r3,r3 
 398 0296 40F8043B 	2:  str r3,[r0],#4
 399 029a 9042     		cmp r0,r2 
 400 029c FBDB     		blt 2b 
 401 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 401      C2F20004 
 402 02a6 7047     		_RET 
 403              	
 404              	// set irq priority 
ARM GAS  forth.s 			page 19


 405              	// 0 highest 
 406              	// 15 lowest
 407              	// input: r0 IRQn  
 408              	//        r1  ipr 
 409              	nvic_set_priority:
 410 02a8 08B4     	    push {r3}
 411 02aa 0028     	    cmp r0,#0 
 412 02ac 08D4     	    bmi negative_irq 
 413 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 413      CEF20003 
 414 02b6 4FEA0111 	    lsl r1,#4 
 415 02ba 1954     	    strb r1,[r3,r0]
 416 02bc 08BC     	    pop {r3}
 417 02be 7047     	    _RET 
 418              	negative_irq:
 419 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 419      CEF20003 
 420 02c8 00F00F00 	    and r0,#0XF 
 421 02cc A0F10400 	    sub r0,#4 
 422 02d0 4FEA0111 	    lsl r1,#4 
 423 02d4 1954     	    strb r1,[r3,r0]
 424 02d6 08BC     	    pop {r3}
 425 02d8 7047     	    _RET 
 426              	
 427              	
 428              	// enable interrupt in nvic 
 429              	// input: r0 = IRQn 
 430              	nvic_enable_irq: 
 431 02da 0EB4     	    push {r1,r2,r3}
 432 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 432      CEF20003 
 433 02e4 0146     	    mov r1,r0 
 434 02e6 4FEA5111 	    lsr r1,#5  
 435 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 436 02ee 00F01F00 	    and r0,#31 // bit#
 437 02f2 4FF00102 	    mov r2,#1 
 438 02f6 02FA00F2 	    lsl r2,r0
 439 02fa 72B6     	    cpsid I
 440 02fc 5A50     	    str r2,[r3,r1]
 441 02fe 62B6     	    cpsie I 
 442 0300 0EBC     	    pop {r1,r2,r3}
 443 0302 7047     	    _RET 
 444              	
 445              	// disable interrupt in nvic
 446              	// input: r0 = IRQn
 447              	nvic_disable_irq:
 448 0304 0EB4     	    push {r1,r2,r3}
 449 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 449      CEF20003 
 450 030e 0146     	    mov r1,r0 
 451 0310 4FEA5111 	    lsr r1,#5  
 452 0314 4FEA8101 	    lsl r1,#2  // ISERn
 453 0318 00F01F00 	    and r0,#31 // bit#
 454 031c 4FF00102 	    mov r2,#1 
 455 0320 02FA00F2 	    lsl r2,r0
 456 0324 5A50     	    str r2,[r3,r1]
 457 0326 BFF34F8F 	    dsb 
ARM GAS  forth.s 			page 20


 458 032a BFF36F8F 	    isb 
 459 032e 0EBC     	    pop {r1,r2,r3}
 460 0330 7047     	    _RET 
 461              	
 462              	/**********************************
 463              	  gpio_config 
 464              	  Configure gpio mode 
 465              	  input:
 466              	    r0   GPIOx 
 467              	    r1   pin 
 468              	    r2   mode 
 469              	  output:
 470              	    none 
 471              	  use:
 472              	    r3,r5,r11  
 473              	**********************************/
 474              	gpio_config:
 475 0332 2DE92808 	    push {r3,r5,r11}
 476              	//  clear registers field 
 477 0336 4FF00105 	    mov r5,#1
 478 033a 05FA01F5 	    lsl r5,r1
 479 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 480 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 481 0344 03EA0503 	    and r3,r5 
 482 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 483 034a 4FF00305 	    mov r5,#3 
 484 034e 4FF0020B 	    mov r11,#2 
 485 0352 01FB0BFB 	    mul r11,r1 
 486 0356 05FA0BF5 	    lsl r5,r11 
 487 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 488 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 489 0360 03EA0503 	    and r3,r5 
 490 0364 0360     	    str r3,[r0,#GPIO_MODER]
 491 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 492 0368 03EA0503 	    and r3,r5 
 493 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 494              	// set mode register, r2 low nibble  
 495 036e 02F00305 	    and r5,r2,#3    
 496 0372 05FA0BF5 	    lsl r5,r11 // mode 
 497 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 498 0378 43EA0503 	    orr r3,r5 
 499 037c 0360     	    str r3,[r0,#GPIO_MODER]
 500 037e 032A     	    cmp r2,#3
 501 0380 13D0     	    beq 9f // analog input 
 502 0382 12F00305 	    ands r5,r2,#3 
 503 0386 08D0     	    beq input_pull 
 504              	output_type:
 505 0388 4FEA1212 	    lsr r2,#4 
 506 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 507 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 508 0392 43EA0203 	    orr r3,r2 
 509 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 510 0398 07E0     	    b 9f 
 511              	input_pull:
 512 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 513 039c 4FEA1212 	    lsr r2,#4 
 514 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
ARM GAS  forth.s 			page 21


 515 03a4 43EA0203 	    orr r3,r2 
 516 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 517 03aa BDE82808 	9:  pop {r3,r5,r11}
 518 03ae 7047     	    _RET 
 519              	
 520              	// configure gpio speed 
 521              	// input:
 522              	//    r0   GPIO_BASE_ADR 
 523              	//    r1   pin 
 524              	//    r2   speed
 525              	// use:
 526              	//  r3,r5,r11 
 527              	gpio_speed:
 528 03b0 2DE92808 	    push {r3,r5,r11}
 529 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 530 03b6 4FF00305 	    mov r5,#3
 531 03ba 4FF0020B 	    mov r11,#2 
 532 03be 01FB0BFB 	    mul r11,r1 
 533 03c2 05FA0BF5 	    lsl r5,r11
 534 03c6 6FEA0505 	    mvn r5,r5 
 535 03ca 03EA0503 	    and r3,r5   
 536 03ce 02FA0BF2 	    lsl r2,r11  
 537 03d2 43EA0203 	    orr r3,r2 
 538 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 539 03d8 BDE82808 	    pop {r3,r5,r11}
 540 03dc 7047     	    _RET
 541              	
 542              	/**************************** 
 543              	  gpio_out port,pin,0|1
 544              	  input:
 545              	    r0   gpio_base_adr 
 546              	    r1   pin 
 547              	    r2   data 0|1 
 548              	**************************/
 549              	gpio_out:
 550 03de 08B4     	    push {r3}
 551 03e0 4FF00103 	    mov r3,#1 
 552 03e4 03FA01F3 	    lsl r3,r1 
 553 03e8 0AB9     	    cbnz r2, 1f 
 554 03ea 4FEA0343 	    lsl r3,#16 
 555 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 556 03f0 08BC     	    pop {r3}
 557 03f2 7047     	    _RET 
 558              	
 559              	/******************************************************
 560              	*  COLD start moves the following to USER variables.
 561              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 562              	******************************************************/
 563              		.p2align 2
 564              	UZERO:
 565 03f4 00000000 		.word 0  			/*Reserved */
 566 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 567 03fc 00000000 		.word 0      /* TICKS */
 568 0400 00000000 	    .word 0     /* CD_TIMER */
 569 0404 14380000 		.word HI  /*'BOOT */
 570 0408 54130000 		.word PS2_QKEY /* query for character */
 571 040c 0C0C0000 	  .word TV_EMIT  /* char output device */
ARM GAS  forth.s 			page 22


 572 0410 0A000000 	  .word BASEE 	/*BASE */
 573 0414 00000000 		.word 0			/*tmp */
 574 0418 00000000 		.word 0			/*SPAN */
 575 041c 00000000 		.word 0			/*>IN */
 576 0420 00000000 		.word 0			/*#TIB */
 577 0424 00FF0120 		.word TIBB	/*TIBU */
 578 0428 7C2D0000 		.word INTER	/*'EVAL */
 579 042c 00000000 		.word 0			/*HLD */
 580 0430 FC380000 		.word _LASTN	/*CONTEXT */
 581 0434 60390000 		.word CTOP  	/* FCP end of system dictionnary */
 582 0438 6C350020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 583 043c FC380000 		.word _LASTN	/*LAST word in dictionary */
 584 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 584      00000000 
 584      00000000 
 584      00000000 
 585 0450 00000000 		.word 0  /* RX_HEAD */
 586 0454 00000000 		.word 0  /* RX_TAIL */ 
 587 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 588 045c 00000000 		.word 0  /* VID_STATE, video state */  
 589 0460 00000000 	    .word 0  /* VID_FIELD, field */
 590 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 591 0468 00000000 	    .word 0 /* kbd struct */
 592 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 592      00000000 
 592      00000000 
 592      00000000 
 593 047c 00000000 		.word 0  /* kbd queue head */
 594 0480 00000000 		.word 0 /* kbd queue tail */ 
 595 0484 00000000 	    .word 0 /* tv cursor row */
 596 0488 00000000 	    .word 0 /* tv cursor column */ 
 597 048c 00000000 	    .word 0 /* tv back color */
 598 0490 07000000 	    .word 7 /* tv font color */
 599 0494 00000000 	    .word 0,0 
 599      00000000 
 600              	ULAST:
 601              	
 602              	// used by _HEADER macro 
 603              	// to link names field
 604              	// in dictionary  
 605 049c 12000000 	    .equ LINK, 0 
 605      E6000000 
 605      34170000 
 605      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
ARM GAS  forth.s 			page 23


  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04ac 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04b4 1868     		ldr r0,[r3,#USART_SR]
  38 04b6 5968     		ldr r1,[r3,#USART_DR]
  39 04b8 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04bc 0CD0     		beq 2f // no char received 
  41 04be B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04c2 3FF407AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04c6 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ca 226E     		ldr r2,[UP,#RX_TAIL]
  45 04cc 8154     		strb r1,[r0,r2]
  46 04ce 02F10102 		add r2,#1 
  47 04d2 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04d6 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04d8 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04da 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04e2 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04e4 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04e8 01EA0201 	  and r1,r1,r2
  62 04ec 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f0 41EA0201 	  orr r1,r1,r2 
  64 04f4 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04f6 4FF4EE61 	  mov r1,#0x77<<4 
  67 04fa 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
ARM GAS  forth.s 			page 24


  69 04fc 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0504 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0508 8160     	  str r1,[r0,#USART_BRR]
  73 050a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 050e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0510 4FF02500 	  mov r0,#USART1_IRQ 
  77 0514 4FF00101 	  mov r1,#1 
  78 0518 00B5FFF7 	  _CALL nvic_set_priority
  78      C5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0522 4FF02500 	  mov r0,#USART1_IRQ 
  81 0526 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D7FE5DF8 
  81      04EB
  82 0530 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0532 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0540 47F8046D 		_PUSH
  92 0544 206E     		ldr T0,[UP,#RX_TAIL] 
  93 0546 E16D     		ldr T1,[UP,#RX_HEAD]
  94 0548 90EA0106 		eors TOS,T0,T1 
  95 054c 0CD0     		beq 1f
  96 054e 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0552 0844     		add T0,T1 
  98 0554 0678     		ldrb TOS,[T0]
  99 0556 01F10101 		add T1,#1 
 100 055a 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 055e E165     		str T1,[UP,#RX_HEAD]
 102 0560 47F8046D 		_PUSH 
 103 0564 4FF0FF36 		mov TOS,#-1
 104 0568 01F0E8B8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 056c 36050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 057c 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0584 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0586 10F0800F 	    tst T0,#0x80 // TXE flag 
ARM GAS  forth.s 			page 25


 114 058a FBD0     		beq 1b 
 115 058c 2E71     		strb TOS,[WP,#USART_DR]	 
 116 058e 57F8046B 		_POP
 117 0592 01F0D3B8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0596 70050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a0 47F8046D 	        _PUSH 
 126 05a4 4FF00006 	        mov TOS,#0
 127 05a8 01F0C8B8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05ac 9A050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05b8 47F8046D 	        _PUSH 
 135 05bc 4FF00106 	        mov TOS,#1
 136 05c0 01F0BCB8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05c4 B0050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d0 3046     	        mov T0,TOS
 144 05d2 57F8046B 	        _POP 
 145 05d6 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05d8 4B48     	        ldr T0,=SER_QKEY 
 148 05da 6061     	        str T0,[UP,#STDIN]
 149 05dc 4B48     	        ldr T0,=SER_EMIT
 150 05de A061     	        str T0,[UP,#STDOUT]
 151 05e0 01F0ACB8 	        _NEXT 
 152              	4: // local console 
 153 05e4 4A48     	        ldr T0,=PS2_QKEY
 154 05e6 6061     	        str T0,[UP,#STDIN]
 155 05e8 4A48     	        ldr T0,=TV_EMIT
 156 05ea A061     	        str T0,[UP,#STDOUT]
 157 05ec 01F0A6B8 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f0 C8050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
ARM GAS  forth.s 			page 26


 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0600 504700BF 	      _NEST 
 166 0604 BB180000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 060c 0D1B0000 	1:    _ADR ONEP  // c+1
 168 0610 95190000 	      _ADR TOR   
 169 0614 BB180000 	      _DOLIT 10 
 169      0A000000 
 170 061c FD1F0000 	      _ADR SLMOD // r q  
 171 0620 C11B0000 	      _ADR QDUP  // r q q | r 0  
 172 0624 FB180000 	      _QBRAN 2f  // r 0 
 172      38060000 
 173 062c 6D190000 	      _ADR RFROM // r q c 
 174 0630 0F190000 	      _BRAN 1b
 174      0C060000 
 175 0638 BB180000 	2:    _DOLIT '0'  
 175      30000000 
 176 0640 B11A0000 	      _ADR PLUS 
 177 0644 C5170000 	      _ADR EMIT 
 178 0648 6D190000 	      _ADR RFROM 
 179 064c C11B0000 	      _ADR QDUP 
 180 0650 FB180000 	      _QBRAN 3f
 180      68060000 
 181 0658 1D1B0000 	      _ADR ONEM 
 182 065c 95190000 	      _ADR TOR 
 183 0660 0F190000 	      _BRAN 2b 
 183      38060000 
 184              	3:    
 185 0668 43170000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 066c F4050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0678 504700BF 	      _NEST 
 193 067c BB180000 	      _DOLIT 27 
 193      1B000000 
 194 0684 C5170000 	      _ADR EMIT 
 195 0688 BB180000 	      _DOLIT '['
 195      5B000000 
 196 0690 C5170000 	      _ADR EMIT 
 197 0694 43170000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0698 70060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06a4 504700BF 	      _NEST
 205 06a8 79060000 	      _ADR ANSI_ESC
ARM GAS  forth.s 			page 27


 206 06ac FD190000 	      _ADR SWAP 
 207 06b0 01060000 	      _ADR ANSI_PARAM 
 208 06b4 BB180000 	      _DOLIT ';'
 208      3B000000 
 209 06bc C5170000 	      _ADR EMIT
 210 06c0 01060000 	      _ADR ANSI_PARAM
 211 06c4 BB180000 	      _DOLIT 'H'
 211      48000000 
 212 06cc C5170000 	      _ADR EMIT 
 213 06d0 43170000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06d4 9C060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e0 504700BF 	    _NEST
 221 06e4 BB180000 	    _DOLIT 1 
 221      01000000 
 222 06ec ED190000 	    _ADR DUPP 
 223 06f0 A5060000 	    _ADR SER_AT  
 224 06f4 79060000 	    _ADR ANSI_ESC
 225 06f8 BB180000 	    _DOLIT 'J'
 225      4A000000 
 226 0700 C5170000 	    _ADR EMIT 
 227 0704 43170000 	    _UNNEST 
 228 0708 40050000 	
 228      7C050000 
 228      54130000 
 228      0C0C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
ARM GAS  forth.s 			page 28


  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
ARM GAS  forth.s 			page 29


  55              	/*******************************************************
  56              	NOTES:
  57              	 1) Values computed for a 96Mhz sysclock 
  58              	 2) Video sync output on PB1 use T3_CH4
  59              	 3) video out trigger TIMER3 CH3 
  60              	********************************************************/
  61              	
  62              	/**************************************
  63              	  initialize TIMER3 CH4 to generate tv_out
  64              	  synchronization signal.
  65              	**************************************/ 
  66              	  _GBL_FUNC tv_init
  67              	// configure PA0:3 as OUTPUT_OD 
  68 0718 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  68      C4F20200 
  69 0720 0168     	  ldr r1,[r0,#GPIO_MODER]
  70 0722 4FF05502 	  mov r2,#0x55
  71 0726 41EA0201 	  orr r1,r2
  72 072a 0160     	  str r1,[r0,#GPIO_MODER]
  73 072c 81EA0101 	  eor r1,r1 
  74 0730 4161     	  str r1,[r0,#GPIO_ODR]  
  75              	// configure PB1 as OUTPUT_AFPP 
  76              	// this is TIM3_CC4 output compare 
  77 0732 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  78 0736 4FF00101 	  mov r1,#1 // pin 1 
  79 073a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  80 073e 00B5FFF7 	  _CALL gpio_config 
  80      F7FD5DF8 
  80      04EB
  81 0748 4FF00101 	  mov r1,#1 
  82 074c 4FF00202 	  mov r2,#2
  83 0750 00B5FFF7 	  _CALL gpio_speed 
  83      2DFE5DF8 
  83      04EB
  84              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  85 075a 016A     	  ldr r1,[r0,#GPIO_AFRL]
  86 075c 41F02001 	  orr r1,#(2<<4) // r2 
  87 0760 0162     	  str r1,[r0,#GPIO_AFRL]
  88              	// enable peripheral clock 
  89 0762 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  89      C4F20202 
  90 076a 4FF00200 	  mov r0,#2 
  91 076e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  92 0770 41EA0001 	  orr r1,r0 
  93 0774 1164     	  str r1,[r2,#RCC_APB1ENR]
  94              	// configure TIMER3   
  95 0776 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  95      C4F20002 
  96 077e 41F2D470 	  mov r0,#HPER
  97 0782 D062     	  str r0,[r2,#TIM_ARR]
  98 0784 40F23F50 	  mov r0,#VIDEO_DELAY 
  99 0788 D063     	  str r0,[r2,#TIM_CCR3]
 100 078a 4FF4E170 	  mov r0,#HPULSE 
 101 078e 1064     	  str r0,[r2,#TIM_CCR4]  
 102 0790 47F27000 	  mov r0,#(7<<12)+(7<<4)
 103 0794 D061     	  str r0,[r2,#TIM_CCMR2]
 104 0796 4FF48850 	  mov r0,#(1<<12)+(1<<8)
ARM GAS  forth.s 			page 30


 105 079a 1062     	  str r0,[r2,#TIM_CCER]
 106 079c 4FF00100 	  mov r0,#1 
 107 07a0 D060     	  str r0,[r2,#TIM_DIER]
 108 07a2 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 109              	// enable interrupt in NVIC controller 
 110 07a4 4FF01D00 	  mov r0,#TIM3_IRQ 
 111 07a8 4FF00201 	  mov r1,#2
 112 07ac 00B5FFF7 	  _CALL nvic_set_priority
 112      7BFD5DF8 
 112      04EB
 113 07b6 4FF01D00 	  mov r0,#TIM3_IRQ 
 114 07ba 00B5FFF7 	  _CALL nvic_enable_irq
 114      8DFD5DF8 
 114      04EB
 115 07c4 7047     	  _RET
 116              	
 117              	/*************************************
 118              	  TIMER3 interrupt for tv_out
 119              	  T1 line # 
 120              	  T0 TIM3_BASE_ADR 
 121              	*************************************/
 122 07c6 00BF     	  _GBL_FUNC tv_out_isr
 123 07c8 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 123      C4F20000 
 124 07d0 81EA0101 	  eor T1,T1
 125 07d4 0161     	  str T1,[T0,#TIM_SR]
 126 07d6 616E     	  ldr T1,[UP,#VID_CNTR]
 127 07d8 01F10101 	  add T1,#1 
 128 07dc 6166     	  str T1,[UP,#VID_CNTR]
 129              	/** machine state cases **/
 130 07de A26E     	  ldr T2,[UP,#VID_STATE]
 131 07e0 002A     	  cmp T2,#ST_VSYNC 
 132 07e2 07D0     	  beq state_vsync
 133 07e4 012A     	  cmp T2,#ST_PREVID 
 134 07e6 2FD0     	  beq state_pre_video 
 135 07e8 022A     	  cmp T2,#ST_VIDEO 
 136 07ea 36D0     	  beq state_video_out 
 137 07ec 032A     	  cmp T2,#ST_POSTVID 
 138 07ee 60D0     	  beq state_post_video
 139 07f0 FFF7FEBF 	  b default_handler // invalid state 
 140              	/*** vertical sync state **/
 141              	state_vsync:
 142 07f4 0129     	  cmp T1,#1
 143 07f6 06D1     	  bne 1f 
 144              	/****** set vertical pre-sync  *****/
 145 07f8 4FF0DB01 	  mov T1,#SERRATION
 146 07fc 0164     	  str T1,[T0,#TIM_CCR4]
 147 07fe 40F6E931 	  mov T1,#SYNC_LINE 
 148 0802 C162     	  str T1,[T0,#TIM_ARR]
 149 0804 68E0     	  b tv_isr_exit 
 150 0806 0729     	1: cmp T1,#7
 151 0808 03D1     	  bne 2f 
 152              	// vertical sync pulse   
 153 080a 40F62821 	  mov T1,#VSYNC_PULSE
 154 080e 0164     	  str T1,[T0,#TIM_CCR4]
 155 0810 62E0     	  b tv_isr_exit
 156 0812 0D29     	2: cmp T1,#13
ARM GAS  forth.s 			page 31


 157 0814 03D1     	   bne 3f  
 158              	// set vertical post-sync    
 159 0816 4FF0DB01 	   mov T1,#SERRATION 
 160 081a 0164     	   str T1,[T0,#TIM_CCR4]
 161 081c 5CE0     	   b tv_isr_exit   
 162 081e 1229     	3: cmp T1,#18
 163 0820 03D1     	   bne 4f 
 164              	// if even field full line  
 165 0822 E16E     	   ldr T1,[UP,#VID_FIELD]
 166 0824 0029     	   cmp T1,#ODD_FIELD  
 167 0826 57D0     	   beq tv_isr_exit 
 168 0828 01E0     	   b sync_end 
 169 082a 1329     	4: cmp T1,#19 
 170 082c 54D1     	   bne tv_isr_exit
 171              	sync_end: 
 172 082e 4FF00901 	   mov T1,#9
 173 0832 6166     	   str T1,[UP,#VID_CNTR]
 174 0834 4FF4E171 	   mov T1,#HPULSE 
 175 0838 0164     	   str T1,[T0,#TIM_CCR4] 
 176 083a 41F2D471 	   mov T1,#HPER 
 177 083e C162     	   str T1,[T0,#TIM_ARR] 
 178 0840 4FF00101 	   mov T1,#ST_PREVID 
 179 0844 A166     	   str T1,[UP,#VID_STATE]
 180 0846 47E0     	   b tv_isr_exit 
 181              	/*****************************/
 182              	state_pre_video:
 183 0848 2829     	   cmp T1,#VIDEO_FIRST_LINE
 184 084a 45D4     	   bmi tv_isr_exit 
 185 084c 4FF00201 	   mov T1,#ST_VIDEO 
 186 0850 A166     	   str T1,[UP,#VID_STATE]
 187 0852 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 188 0856 C160     	   str T1,[T0,#TIM_DIER]
 189 0858 3EE0     	   b tv_isr_exit 
 190              	/**************************
 191              	    VIDEO OUTPUT 
 192              	**************************/   
 193              	state_video_out:
 194 085a F029     	   cmp T1,#VIDEO_LAST_LINE 
 195 085c 06D9     	   bls 1f 
 196 085e 4FF00301 	   mov T1,#ST_POSTVID 
 197 0862 A166     	   str T1,[UP,#VID_STATE]
 198 0864 4FF00101 	   mov T1,#1 
 199 0868 C160     	   str T1,[T0,#TIM_DIER]
 200 086a 35E0     	   b tv_isr_exit 
 201              	1: // video output
 202 086c 206F     	   ldr T0,[UP,#VID_BUFFER]
 203 086e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 204 0872 4FF0A003 	   mov T3,#160
 205 0876 03FB01F1 	   mul T1,T3 
 206 087a 0844     	   add T0,T1  
 207 087c 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 207      C4F20201 
 208 0884 0278     	2: ldrb T2,[T0]
 209 0886 4FEA1212 	   lsr T2,#4 
 210 088a 4A61     	   str T2,[T1,#GPIO_ODR]
 211 088c AFF30080 	   nop.w
 212 0890 AFF30080 	   nop.w 
ARM GAS  forth.s 			page 32


 213 0894 10F8012B 	   ldrb T2,[T0],#1
 214 0898 02F00F02 	   and T2,#15 
 215 089c 4A61     	   str T2,[T1,#GPIO_ODR]
 216 089e AFF30080 	   nop.w
 217 08a2 AFF30080 	   nop.w  
 218 08a6 013B     	   subs T3,#1
 219 08a8 ECD1     	   bne 2b  
 220 08aa 4FF47022 	   mov T2,#(15<<16) 
 221 08ae 8A61     	   str T2,[T1,#GPIO_BSRR]
 222 08b0 12E0     	   b tv_isr_exit 
 223              	state_post_video:
 224 08b2 4FF48372 	   mov T2,#262
 225 08b6 9142     	   cmp T1,T2
 226 08b8 0ED4     	   bmi tv_isr_exit     
 227              	// odd field line 262 half line 
 228 08ba E16E     	   ldr T1,[UP,VID_FIELD]
 229 08bc 11B9     	   cbnz T1, frame_end 
 230 08be 40F6E931 	   mov T1,#SYNC_LINE
 231 08c2 C162     	   str T1,[T0,#TIM_ARR]      
 232              	frame_end: 
 233 08c4 4FF00001 	   mov T1,#ST_VSYNC 
 234 08c8 A166     	   str T1,[UP,#VID_STATE]
 235 08ca 81EA0101 	   eor T1,T1 
 236 08ce 6166     	   str T1,[UP,#VID_CNTR]
 237 08d0 E16E     	   ldr T1,[UP,#VID_FIELD]
 238 08d2 6FEA0101 	   mvn T1,T1  
 239 08d6 E166     	   str T1,[UP,#VID_FIELD]
 240              	tv_isr_exit: 
 241 08d8 7047     	   _RET   
 242              	
 243              	
 244              	/***************************
 245              	    FORTH WORDS 
 246              	***************************/
 247              	
 248              	// BACK-COLOR ( -- a )
 249              	//   back color variable 
 250 08da D8060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 250      0A424143 
 250      4B2D434F 
 250      4C4F5200 
 250      00BF
 251 08ec 47F8046D 		_PUSH 
 252 08f0 04F19806 		ADD TOS,UP,#BK_COLOR
 253 08f4 00F022BF 		_NEXT
 254              	
 255              	// PEN-COLOR ( -- a )
 256              	// pen color variable 
 257 08f8 DE080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 257      0950454E 
 257      2D434F4C 
 257      4F5200BF 
 258 0908 47F8046D 		_PUSH 
 259 090c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 260 0910 00F014BF 		_NEXT 
 261              	
 262              	// COLUMN ( -- a )
ARM GAS  forth.s 			page 33


 263              	// cursor column variable 
 264 0914 FC080000 	  _HEADER CURSOR_COL,6,"COLUMN"
 264      06434F4C 
 264      554D4E00 
 265 0920 47F8046D 	  _PUSH 
 266 0924 04F19406 	  ADD TOS,UP,#COL 
 267 0928 00F008BF 	  _NEXT 
 268              	
 269              	// ROW ( -- a )
 270              	// cursor row 
 271 092c 18090000 	  _HEADER CURSOR_ROW,3,"ROW"
 271      03524F57 
 272 0934 47F8046D 	  _PUSH 
 273 0938 04F19006 	  ADD TOS,UP,#ROW 
 274 093c 00F0FEBE 	  _NEXT 
 275              	
 276              	// ROW>Y ( n1 - n2 )
 277              	// convert cursor row to y coord 
 278 0940 30090000 	  _HEADER ROWY,5,"ROW>Y"
 278      05524F57 
 278      3E5900BF 
 279 094c 4FF00800 	  mov T0,#CHAR_HEIGHT
 280 0950 00FB06F6 	  mul TOS,T0 
 281 0954 00F0F2BE 	  _NEXT 
 282              	
 283              	// COL>X ( n1 -- n2 )
 284              	// convert cursor column to x coord 
 285 0958 44090000 	  _HEADER COLX,5,"COL>X" 
 285      05434F4C 
 285      3E5800BF 
 286 0964 4FF00600 	  mov T0,#CHAR_WIDTH 
 287 0968 00FB06F6 	  mul TOS,T0 
 288 096c 00F0E6BE 	  _NEXT 
 289              	
 290              	// FONT ( -- a )
 291              	// return address of font table
 292 0970 5C090000 	  _HEADER FONT,4,"FONT" 
 292      04464F4E 
 292      540000BF 
 293 097c 47F8046D 	  _PUSH 
 294 0980 DFF83465 	  ldr TOS,=font_6x8 
 295 0984 00F0DABE 	  _NEXT 
 296              	
 297              	// VIDBUFF ( -- a )
 298              	// address of video buffer 
 299 0988 74090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 299      07564944 
 299      42554646 
 300 0994 47F8046D 	  _PUSH 
 301 0998 266F     	  LDR TOS,[UP,#VID_BUFFER]
 302 099a 00F0CFBE 	  _NEXT 
 303              	
 304              	
 305              	// PLOT ( x y op -- )
 306              	// draw a pixel 
 307              	//    0 back color 
 308              	//    1 pen color 
ARM GAS  forth.s 			page 34


 309              	//    2 invert (invert color pixels )
 310              	//    3 xor pen color  
 311 099e 8C090000 	    _HEADER PLOT,4,"PLOT"
 311      04504C4F 
 311      5400
 312              	// compute video buffer byte address from coords
 313 09a8 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 314 09aa 4FF0A002 	    mov T2,#BPR // bytes per row  
 315 09ae 02FB00F0 	    mul T0,T2 
 316 09b2 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 317 09b6 1044     	    add T0,T2 
 318 09b8 236F     	    ldr T3,[UP,#VID_BUFFER] 
 319 09ba 0344     	    add T3,T0 // T3 -> byte address 
 320 09bc 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 321 09be 4FF00F02 	    mov T2,#15 // AND mask 
 322 09c2 11F0010F 	    tst T1,#1 
 323 09c6 01D0     	    beq 1f 
 324 09c8 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 325 09cc DFF8EC04 	1:  ldr T0,=plot_op 
 326 09d0 D0E806F0 	    tbb [T0,TOS]
 327              	op_back:
 328 09d4 05EA0205 	    and WP,T2 // mask out nibble 
 329 09d8 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 330 09dc 11F0010F 	    tst T1,#1 
 331 09e0 01D1     	    bne 1f 
 332 09e2 4FEA0010 	    lsl T0,#4 // high nibble  
 333 09e6 45EA0005 	1:  orr WP,T0  
 334 09ea 1D70     	    strb WP,[T3]
 335 09ec 1AE0     	    b 9f 
 336              	op_pen: 
 337 09ee 05EA0205 	    and WP,T2 
 338 09f2 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 339 09f6 11F0010F 	    tst T1,#1
 340 09fa 01D1     	    bne 1f 
 341 09fc 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 342 0a00 45EA0005 	1:	orr WP,T0 
 343 0a04 1D70     	    strb WP,[T3]
 344 0a06 0DE0     	    b 9f 
 345              	op_invert:
 346 0a08 85EA0205 	    eor WP,T2 
 347 0a0c 1D70     	    strb WP,[T3]
 348 0a0e 09E0     	    b 9f 
 349              	op_xor:
 350 0a10 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 351 0a14 11F0010F 	    tst T1,#1 
 352 0a18 01D1     	    bne 1f 
 353 0a1a 4FEA0010 	    lsl T0,#4 
 354 0a1e 85EA0005 	1:  eor WP,T0 
 355 0a22 1D70     	    strb WP,[T3]
 356 0a24 57F8046B 	9:  _POP 
 357 0a28 00F088BE 	    _NEXT 
 358              	
 359 0a2c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 360              	
 361              	
 362              	// VSYNC ( -- )
 363              	// wait vertical sync phase 
ARM GAS  forth.s 			page 35


 364 0a30 A2090000 	    _HEADER VSYNC,5,"VSYNC"
 364      05565359 
 364      4E4300BF 
 365 0a3c 606E     	1:  ldr T0,[UP,#VID_CNTR]
 366 0a3e 0028     	    cmp T0,#0
 367 0a40 FCD1     	    bne 1b
 368 0a42 00F07BBE 	    _NEXT 
 369              	
 370              	// CLS ( -- )
 371              	// clear TV screen 
 372 0a46 340A0000 	    _HEADER CLS,3,"CLS"
 372      03434C53 
 372      00BF
 373 0a50 80EA0000 	    eor T0,T0 
 374 0a54 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 375 0a58 40EA0100 	    orr T0,T1 
 376 0a5c 4FEA0111 	    lsl T1,#4 
 377 0a60 40EA0100 	    orr T0,T1 
 378 0a64 4FEA0021 	    lsl T1,T0,#8 
 379 0a68 40EA0100 	    orr T0,T1 
 380 0a6c 4FEA0041 	    lsl T1,T0,#16
 381 0a70 40EA0100 	    orr T0,T1 
 382 0a74 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 383 0a78 226F     	    ldr T2,[UP,#VID_BUFFER]
 384 0a7a 5050     	1:	str T0,[T2,T1]
 385 0a7c 0439     	    subs T1,#4
 386 0a7e FCD1     	    bne 1b
 387 0a80 1060     	    str T0,[T2]
 388 0a82 80EA0000 	    eor T0,T0 
 389 0a86 C4F89000 	    str T0,[UP,#ROW]
 390 0a8a C4F89400 	    str T0,[UP,#COL]
 391 0a8e 00F055BE 	    _NEXT 
 392              	
 393              	
 394              	// CLRLINE ( n -- )
 395              	// clear text line 
 396 0a92 4A0A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 396      07434C52 
 396      4C494E45 
 396      00BF
 397 0aa0 504700BF 	  _NEST
 398 0aa4 BB180000 	  _DOLIT (BPR*CHAR_HEIGHT)
 398      00050000 
 399 0aac ED190000 	  _ADR DUPP  
 400 0ab0 95190000 	  _ADR TOR 
 401 0ab4 D11A0000 	  _ADR STAR
 402 0ab8 95090000 	  _ADR VIDBUFF
 403 0abc B11A0000 	  _ADR PLUS
 404 0ac0 6D190000 	  _ADR RFROM   
 405 0ac4 BB180000 	  _DOLIT 0 
 405      00000000 
 406 0acc 1D220000 	  _ADR FILL 
 407 0ad0 43170000 	  _UNNEST 
 408              	
 409              	// SCROLLUP ( -- )
 410              	// scroll up tv screen 1 char height 
 411 0ad4 960A0000 	  _HEADER SCROLLUP,8,"SCROLLUP"
ARM GAS  forth.s 			page 36


 411      08534352 
 411      4F4C4C55 
 411      500000BF 
 412 0ae4 504700BF 	  _NEST 
 413 0ae8 95090000 	  _ADR VIDBUFF 
 414 0aec ED190000 	  _ADR DUPP 
 415 0af0 BB180000 	  _DOLIT BPR*CHAR_HEIGHT 
 415      00050000 
 416 0af8 ED190000 	  _ADR DUPP 
 417 0afc 95190000 	  _ADR TOR 
 418 0b00 B11A0000 	  _ADR PLUS 
 419 0b04 FD190000 	  _ADR SWAP 
 420 0b08 BB180000 	  _DOLIT VIDEO_BUFFER_SIZE 
 420      007D0000 
 421 0b10 6D190000 	  _ADR RFROM  
 422 0b14 C11A0000 	  _ADR SUBB 
 423 0b18 E9210000 	  _ADR MOVE
 424 0b1c BB180000 	  _DOLIT 24 
 424      18000000 
 425 0b24 A10A0000 	  _ADR CLRLINE 
 426 0b28 43170000 	  _UNNEST 
 427              	
 428              	//  RIGHT ( -- )
 429              	// move cursor 1 char. right 
 430 0b2c D80A0000 	  _HEADER RIGHT,5,"RIGHT"
 430      05524947 
 430      485400BF 
 431 0b38 D4F89400 	  ldr T0,[UP,#COL]
 432 0b3c 00F10100 	  add T0,#1
 433 0b40 3528     	  cmp T0,#53
 434 0b42 09D5     	  bpl TVCR  
 435 0b44 C4F89400 	  str T0,[UP,#COL]
 436 0b48 00F0F8BD 	  _NEXT 
 437              	
 438              	
 439              	// TV-CR 
 440              	// carriage return line feed 
 441 0b4c 300B0000 	  _HEADER TVCR,5,"TV-CR"
 441      0554562D 
 441      435200BF 
 442 0b58 80EA0000 	  eor T0,T0 
 443 0b5c C4F89400 	  str T0,[UP,#COL]
 444 0b60 D4F89000 	  ldr T0,[UP,#ROW]
 445 0b64 1828     	  cmp T0,#24
 446 0b66 05D0     	  beq 2f 
 447 0b68 00F10100 	  add T0,#1 
 448 0b6c C4F89000 	  str T0,[UP,#ROW]
 449 0b70 00F0E4BD 	  _NEXT 
 450 0b74 48F804CD 	2:_CALL_COLWORD 3f 
 450      DFF844C3 
 450      00F0DEBD 
 451              	3: 
 452 0b80 E50A0000 	  _ADR SCROLLUP 
 453 0b84 43170000 	  _UNNEST  
 454              	
 455              	
 456              	// extract font pixel 
ARM GAS  forth.s 			page 37


 457              	FONT_PIXEL: // ( r -- 0|1 )
 458 0b88 4FF08000 	    mov T0,#128 
 459 0b8c 06EA0006 	    and TOS,T0 
 460 0b90 4FEAD616 	    lsr TOS,#7
 461 0b94 00F0D2BD 	    _NEXT 
 462              	
 463              	// increment x coord 
 464              	INCR_X: // ( x y -- x' y )
 465 0b98 3868     	  ldr T0,[DSP]
 466 0b9a 00F10100 	  add T0,#1 
 467 0b9e 3860     	  str T0,[DSP]
 468 0ba0 00F0CCBD 	  _NEXT 
 469              	
 470              	// shift font row data
 471              	NEXT_PIXEL:
 472 0ba4 4FEA4606 	    lsl TOS,#1
 473 0ba8 00F0C8BD 	    _NEXT 
 474              	
 475              	
 476              	// CHAR_ROW 
 477              	// plot character row 
 478              	// {x y r -- }
 479              	//  _HEADER CHAR_ROW,7,"CHARROW"
 480              	CHAR_ROW:  
 481 0bac 504700BF 	    _NEST 
 482 0bb0 BB180000 	    _DOLIT 5 
 482      05000000 
 483 0bb8 95190000 	    _ADR TOR 
 484 0bbc 95190000 	1:  _ADR TOR 
 485 0bc0 251C0000 	    _ADR DDUP 
 486 0bc4 81190000 	    _ADR RAT
 487 0bc8 890B0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 488 0bcc A9090000 	    _ADR PLOT 
 489 0bd0 990B0000 	    _ADR INCR_X 
 490 0bd4 6D190000 	    _ADR RFROM 
 491 0bd8 A50B0000 	    _ADR NEXT_PIXEL
 492              	    //_DOLIT 1 
 493              	    //_ADR LSHIFT 
 494 0bdc DD180000 	    _DONXT 1b
 494      BC0B0000 
 495 0be4 111C0000 	    _ADR TDROP 
 496 0be8 43170000 	    _UNNEST 
 497              	
 498              	
 499              	CHAR_FONT: // ( c -- c-adr )
 500 0bec A6F12006 	   sub TOS,#32
 501 0bf0 4FF00800 	   mov T0,#8 
 502 0bf4 00FB06F6 	   mul TOS,T0 
 503 0bf8 AF48     	   ldr T0,=font_6x8
 504 0bfa 0644     	   add TOS,T0 
 505 0bfc 00F09EBD 	   _NEXT 
 506              	
 507              	/**********************************
 508              	   TV-EMIT ( c -- )
 509              	   draw character in video buffer
 510              	**********************************/
 511 0c00 500B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
ARM GAS  forth.s 			page 38


 511      0754562D 
 511      454D4954 
 512 0c0c 504700BF 	    _NEST
 513 0c10 ED190000 	    _ADR DUPP 
 514 0c14 BB180000 	    _DOLIT 32 
 514      20000000 
 515 0c1c B91C0000 	    _ADR ULESS
 516 0c20 FB180000 	    _QBRAN 1f
 516      300C0000 
 517 0c28 0F190000 	    _BRAN CTRL_KEY
 517      940C0000 
 518 0c30 ED0B0000 	1:  _ADR CHAR_FONT 
 519 0c34 21090000 	    _ADR CURSOR_COL 
 520 0c38 41190000 	    _ADR AT
 521 0c3c 65090000 	    _ADR COLX  // x coord 
 522 0c40 35090000 	    _ADR CURSOR_ROW 
 523 0c44 41190000 	    _ADR AT    
 524 0c48 4D090000 	    _ADR ROWY  // {c-adr x y -- } 
 525 0c4c D51B0000 	    _ADR ROT  // TEST 
 526 0c50 BB180000 	    _DOLIT 7   
 526      07000000 
 527 0c58 95190000 	    _ADR TOR  
 528 0c5c 95190000 	1:  _ADR TOR  // { x y }
 529 0c60 251C0000 	    _ADR DDUP  // { x y x y }
 530 0c64 81190000 	    _ADR RAT 
 531 0c68 61190000 	    _ADR CAT   // { x y x y r }
 532 0c6c AD0B0000 	    _ADR CHAR_ROW 
 533 0c70 0D1B0000 	    _ADR ONEP // {x y' }
 534 0c74 6D190000 	    _ADR RFROM 
 535 0c78 0D1B0000 	    _ADR ONEP // {x y' c-adr' }
 536 0c7c DD180000 	    _DONXT 1b
 536      5C0C0000 
 537 0c84 111C0000 	    _ADR TDROP  
 538 0c88 390B0000 	    _ADR RIGHT
 539 0c8c 990D0000 	9:  _ADR DRAW_CURSOR 
 540 0c90 43170000 	    _UNNEST  
 541              	CTRL_KEY:
 542 0c94 250E0000 	    _ADR ERASE_CURSOR
 543 0c98 ED190000 	    _ADR DUPP 
 544 0c9c BB180000 	    _DOLIT BKSPP  
 544      08000000 
 545 0ca4 A11C0000 	    _ADR EQUAL 
 546 0ca8 FB180000 	    _QBRAN 1f
 546      C00C0000 
 547 0cb0 5D0D0000 	    _ADR BACK_SPACE 
 548 0cb4 DD190000 	8:  _ADR DROP 
 549 0cb8 0F190000 	    _BRAN 9b 
 549      8C0C0000 
 550 0cc0 ED190000 	1:  _ADR DUPP 
 551 0cc4 BB180000 	    _DOLIT CRR 
 551      0D000000 
 552 0ccc A11C0000 	    _ADR EQUAL 
 553 0cd0 FB180000 	    _QBRAN 1f 
 553      E40C0000 
 554 0cd8 050D0000 	    _ADR CAR_RET
 555 0cdc 0F190000 	    _BRAN 8b
 555      B40C0000 
ARM GAS  forth.s 			page 39


 556 0ce4 BB180000 	1:  _DOLIT LF 
 556      0A000000 
 557 0cec A11C0000 	    _ADR EQUAL 
 558 0cf0 FB180000 	    _QBRAN 9b 
 558      8C0C0000 
 559 0cf8 1D0D0000 	    _ADR LN_FEED
 560 0cfc 0F190000 	    _BRAN 9b  
 560      8C0C0000 
 561              	
 562              	/*******************************
 563              	  CAR_RET 
 564              	  carriage return
 565              	*******************************/
 566              	CAR_RET:
 567 0d04 504700BF 	   _NEST
 568 0d08 BB180000 	   _DOLIT 0 
 568      00000000 
 569 0d10 21090000 	   _ADR CURSOR_COL 
 570 0d14 2D190000 	   _ADR STORE 
 571 0d18 43170000 	   _UNNEST   
 572              	
 573              	/*************************
 574              	  LN_FEED 
 575              	  send cursor to next line 
 576              	**************************/
 577              	LN_FEED:
 578 0d1c 504700BF 	    _NEST 
 579 0d20 35090000 	    _ADR CURSOR_ROW 
 580 0d24 41190000 	    _ADR AT 
 581 0d28 ED190000 	    _ADR DUPP 
 582 0d2c BB180000 	    _DOLIT 24 
 582      18000000 
 583 0d34 591A0000 	    _ADR XORR 
 584 0d38 FB180000 	    _QBRAN 1f
 584      500D0000 
 585 0d40 0D1B0000 	    _ADR ONEP 
 586 0d44 35090000 	    _ADR CURSOR_ROW 
 587 0d48 2D190000 	    _ADR STORE 
 588 0d4c 43170000 	    _UNNEST    
 589 0d50 DD190000 	1:  _ADR DROP 
 590 0d54 E50A0000 	    _ADR SCROLLUP 
 591 0d58 43170000 	    _UNNEST  
 592              	
 593              	
 594              	/*****************************
 595              	  BACK_SPACE  
 596              	  move cursor left 1 character
 597              	*****************************/
 598              	BACK_SPACE: 
 599 0d5c 504700BF 	  _NEST 
 600 0d60 21090000 	  _ADR CURSOR_COL 
 601 0d64 41190000 	  _ADR AT 
 602 0d68 C11B0000 	  _ADR QDUP 
 603 0d6c FB180000 	  _QBRAN 9f
 603      840D0000 
 604 0d74 1D1B0000 	  _ADR ONEM
 605 0d78 21090000 	  _ADR CURSOR_COL 
ARM GAS  forth.s 			page 40


 606 0d7c 2D190000 	  _ADR STORE
 607 0d80 990D0000 	  _ADR DRAW_CURSOR
 608 0d84 43170000 	9: _UNNEST    
 609              	
 610              	
 611              	/*******************************
 612              	  DRAW_CURSOR ( -- )
 613              	********************************/
 614 0d88 040C0000 	    _HEADER DRAW_CURSOR,11,"DRAW-CURSOR"
 614      0B445241 
 614      572D4355 
 614      52534F52 
 615              	//DRAW_CURSOR:
 616 0d98 504700BF 	    _NEST 
 617 0d9c BB180000 	    _DOLIT 0xFF
 617      FF000000 
 618 0da4 35090000 	0:  _ADR CURSOR_ROW
 619 0da8 41190000 	    _ADR AT  
 620 0dac 0D1B0000 	    _ADR ONEP 
 621 0db0 4D090000 	    _ADR ROWY 
 622 0db4 BB180000 	    _DOLIT BPR
 622      A0000000 
 623 0dbc D11A0000 	    _ADR STAR
 624 0dc0 BB180000 	    _DOLIT BPR  
 624      A0000000 
 625 0dc8 C11A0000 	    _ADR SUBB 
 626 0dcc 21090000 	    _ADR CURSOR_COL
 627 0dd0 41190000 	    _ADR AT 
 628 0dd4 65090000 	    _ADR COLX 
 629 0dd8 B11B0000 	    _ADR TWOSL  
 630 0ddc B11A0000 	    _ADR PLUS
 631 0de0 95090000 	    _ADR VIDBUFF
 632 0de4 B11A0000 	    _ADR PLUS
 633 0de8 BB180000 	    _DOLIT 2
 633      02000000 
 634 0df0 95190000 	    _ADR TOR  
 635 0df4 251C0000 	1:  _ADR DDUP 
 636 0df8 4D190000 	    _ADR CSTOR 
 637 0dfc 0D1B0000 	    _ADR ONEP 
 638 0e00 DD180000 	    _DONXT 1b
 638      F40D0000 
 639 0e08 FD1B0000 	2:  _ADR DDROP // drop 3 elements 
 640 0e0c 43170000 	    _UNNEST  
 641              	
 642              	/*************************
 643              	    ERASE_CURSOR 
 644              	*************************/
 645 0e10 8C0D0000 	    _HEADER ERASE_CURSOR,12,"ERASE-CURSOR"
 645      0C455241 
 645      53452D43 
 645      5552534F 
 645      520000BF 
 646              	//ERASE_CURSOR:
 647 0e24 504700BF 	    _NEST 
 648 0e28 ED080000 	    _ADR BACKCOLOR 
 649 0e2c 41190000 	    _ADR AT 
 650 0e30 ED190000 	    _ADR DUPP  
ARM GAS  forth.s 			page 41


 651 0e34 BB180000 	    _DOLIT 4 
 651      04000000 
 652 0e3c A11A0000 	    _ADR LSHIFT 
 653 0e40 451A0000 	    _ADR ORR 
 654 0e44 0F190000 	    _BRAN 0b
 654      A40D0000 
 655              	
 656              	// TV-AT ( line col -- )
 657              	// set text cursor position 
 658 0e4c 140E0000 	    _HEADER TV_AT,5,"TV-AT"
 658      0554562D 
 658      415400BF 
 659 0e58 352E     	    cmp TOS,#53
 660 0e5a 01D4     	    bmi 1f 
 661 0e5c 4FF03406 	    mov TOS,#52
 662 0e60 C4F89460 	1:  str TOS,[UP,#COL]
 663 0e64 57F8046B 	    _POP
 664 0e68 192E     	    cmp TOS,#25
 665 0e6a 01D4     	    bmi 1f 
 666 0e6c 4FF01806 	    mov TOS,#24 
 667 0e70 C4F89060 	1:  str TOS,[UP,#ROW]
 668 0e74 57F8046B 	    _POP 
 669 0e78 00F060BC 	    _NEXT 
 670              	
 671              	// INPUT ( -- c-adr )
 672              	// input a string in pad 
 673 0e7c 500E0000 	    _HEADER INPUT,5,"INPUT"
 673      05494E50 
 673      555400BF 
 674 0e88 504700BF 	    _NEST 
 675 0e8c 61210000 	    _ADR PAD 
 676 0e90 ED190000 	    _ADR DUPP 
 677 0e94 0D1B0000 	    _ADR ONEP 
 678 0e98 BB180000 	    _DOLIT 53
 678      35000000 
 679 0ea0 692C0000 	    _ADR ACCEP
 680 0ea4 FD190000 	    _ADR SWAP 
 681 0ea8 DD190000 	    _ADR DROP 
 682 0eac 111A0000 	    _ADR OVER 
 683 0eb0 4D190000 	    _ADR CSTOR  
 684 0eb4 43170000 	    _UNNEST 
 685              	
 686              	
 687              		.section .rodata 
 688              		.p2align 2
 689              	/********************************************
 690              	    TV font  ASCII 6 pixels x 8 pixels 
 691              	********************************************/
 692              	font_6x8:
 693 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 693      00000000 
 694 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 694      20002000 
 695 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 695      00000000 
 696 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 696      F8505000 
ARM GAS  forth.s 			page 42


 697 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 697      28F02000 
 698 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 698      40981800 
 699 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 699      A8906800 
 700 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 700      00000000 
 701 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 701      40201000 
 702 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 702      10204000 
 703 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 703      A8200000 
 704 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 704      20200000 
 705 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 705      60204000 
 706 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 706      00000000 
 707 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 707      00606000 
 708 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 708      40800000 
 709 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 709      C8887000 
 710 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 710      2020F800 
 711 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 711      4080F800 
 712 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 712      0808F000 
 713 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 713      F8101000 
 714 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 714      0808F000 
 715 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 715      88887000 
 716 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 716      40404000 
 717 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 717      88887000 
 718 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 718      08087000 
 719 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 719      60600000 
 720 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 720      60204000 
 721 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 721      40201000 
 722 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 722      F8000000 
 723 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 723      10204000 
 724 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 724      20002000 
 725 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
ARM GAS  forth.s 			page 43


 725      A8A87000 
 726 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 726      88888800 
 727 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 727      8888F000 
 728 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 728      80807800 
 729 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 729      8888F000 
 730 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 730      8080F800 
 731 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 731      80808000 
 732 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 732      88887000 
 733 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 733      88888800 
 734 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 734      20207000 
 735 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 735      08906000 
 736 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 736      A0908800 
 737 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 737      8080F800 
 738 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 738      88888800 
 739 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 739      98888800 
 740 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 740      88887000 
 741 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 741      80808000 
 742 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 742      A8987800 
 743 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 743      A0908800 
 744 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 744      0808F000 
 745 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 745      20202000 
 746 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 746      88887000 
 747 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 747      88502000 
 748 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 748      A8D88800 
 749 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 749      50888800 
 750 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 750      20202000 
 751 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 751      8080F800 
 752 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 752      40406000 
 753 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 753      10080000 
ARM GAS  forth.s 			page 44


 754 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 754      08081800 
 755 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 755      00000000 
 756 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 756      0000F800 
 757 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 757      00000000 
 758 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 758      78887800 
 759 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 759      C888F000 
 760 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 760      80887000 
 761 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 761      98887800 
 762 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 762      F8807000 
 763 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 763      40404000 
 764 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 764      88780870 
 765 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 765      88888800 
 766 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 766      20202000 
 767 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 767      10906000 
 768 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 768      C0A09000 
 769 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 769      20207000 
 770 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 770      A8888800 
 771 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 771      88888800 
 772 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 772      88887000 
 773 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 773      88F08080 
 774 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 774      90B05018 
 775 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 775      80808000 
 776 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 776      7008F000 
 777 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 777      40483000 
 778 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 778      88986800 
 779 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 779      88502000 
 780 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 780      A8A85000 
 781 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 781      20508800 
 782 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
ARM GAS  forth.s 			page 45


 782      88780870 
 783 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 783      2040F800 
 784 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 784      40402000 
 785 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 785      20202000 
 786 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 786      20204000 
 787 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 787      10000000 
 788 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 788      FCFCFCFC 
 789 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 789      10204000 
 790 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 790      40201000 
 791 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 791      20200000 
 792 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 792      A8702000 
 793 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 793      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
ARM GAS  forth.s 			page 46


  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
ARM GAS  forth.s 			page 47


  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
ARM GAS  forth.s 			page 48


 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0ec4 1C61     	   .byte 0x1c,'a' 
   9 0ec6 3262     	   .byte 0x32,'b'
  10 0ec8 2163     	   .byte 0x21,'c'
  11 0eca 2364     	   .byte 0x23,'d'
  12 0ecc 2465     	   .byte 0x24,'e'
  13 0ece 2B66     	   .byte 0x2b,'f'
  14 0ed0 3467     	   .byte 0x34,'g'
  15 0ed2 3368     	   .byte 0x33,'h'
  16 0ed4 4369     	   .byte 0x43,'i'
ARM GAS  forth.s 			page 49


  17 0ed6 3B6A     	   .byte 0x3B,'j'
  18 0ed8 426B     	   .byte 0x42,'k'
  19 0eda 4B6C     	   .byte 0x4b,'l'
  20 0edc 3A6D     	   .byte 0x3a,'m'
  21 0ede 316E     	   .byte 0x31,'n'
  22 0ee0 446F     	   .byte 0x44,'o'
  23 0ee2 4D70     	   .byte 0x4d,'p'
  24 0ee4 1571     	   .byte 0x15,'q'
  25 0ee6 2D72     	   .byte 0x2d,'r'
  26 0ee8 1B73     	   .byte 0x1b,'s'
  27 0eea 2C74     	   .byte 0x2c,'t'
  28 0eec 3C75     	   .byte 0x3c,'u'
  29 0eee 2A76     	   .byte 0x2a,'v'
  30 0ef0 1D77     	   .byte 0x1d,'w'
  31 0ef2 2278     	   .byte 0x22,'x'
  32 0ef4 3579     	   .byte 0x35,'y'
  33 0ef6 1A7A     	   .byte 0x1a,'z'
  34 0ef8 4530     	   .byte 0x45,'0'
  35 0efa 1631     	   .byte 0x16,'1'
  36 0efc 1E32     	   .byte 0x1e,'2'
  37 0efe 2633     	   .byte 0x26,'3'
  38 0f00 2534     	   .byte 0x25,'4'
  39 0f02 2E35     	   .byte 0x2e,'5'
  40 0f04 3636     	   .byte 0x36,'6'
  41 0f06 3D37     	   .byte 0x3d,'7'
  42 0f08 3E38     	   .byte 0x3e,'8'
  43 0f0a 4639     	   .byte 0x46,'9'
  44 0f0c 0E60     	   .byte 0x0e,'`'
  45 0f0e 4E2D     	   .byte 0x4e,'-'
  46 0f10 553D     	   .byte 0x55,'='
  47 0f12 5D5C     	   .byte 0x5d,'\\'
  48 0f14 545B     	   .byte 0x54,'['
  49 0f16 5B5D     	   .byte 0x5b,']'
  50 0f18 4C3B     	   .byte 0x4c,';'
  51 0f1a 5227     	   .byte 0x52,'\''
  52 0f1c 412C     	   .byte 0x41,','
  53 0f1e 492E     	   .byte 0x49,'.'
  54 0f20 7C2A     	   .byte 0x7c,'*'
  55 0f22 792B     	   .byte 0x79,'+'
  56 0f24 2920     	   .byte 0x29,' '
  57 0f26 5A0D     	   .byte SC_ENTER,CRR 
  58 0f28 6608     	   .byte SC_BKSP,BKSPP 
  59 0f2a 0D09     	   .byte SC_TAB,9
  60 0f2c 761B     	   .byte SC_ESC,27
  61 0f2e 119E     	   .byte SC_LALT,VK_LALT 
  62 0f30 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f32 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f34 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f36 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f38 5800     	   .byte SC_CAPS,0
  67 0f3a 0580     	   .byte SC_F1,VK_F1
  68 0f3c 0681     	   .byte SC_F2,VK_F2
  69 0f3e 0482     	   .byte SC_F3,VK_F3
  70 0f40 0C83     	   .byte SC_F4,VK_F4
  71 0f42 0384     	   .byte SC_F5,VK_F5
  72 0f44 0B85     	   .byte SC_F6,VK_F6
  73 0f46 8386     	   .byte SC_F7,VK_F7
ARM GAS  forth.s 			page 50


  74 0f48 0A87     	   .byte SC_F8,VK_F8
  75 0f4a 0188     	   .byte SC_F9,VK_F9
  76 0f4c 098A     	   .byte SC_F10,VK_F10
  77 0f4e 788B     	   .byte SC_F11,VK_F11
  78 0f50 078C     	   .byte SC_F12,VK_F12
  79 0f52 7030     	   .byte SC_KP0,'0'
  80 0f54 6931     	   .byte SC_KP1,'1'
  81 0f56 7232     	   .byte SC_KP2,'2'
  82 0f58 7A33     	   .byte SC_KP3,'3'
  83 0f5a 6B34     	   .byte SC_KP4,'4'
  84 0f5c 7335     	   .byte SC_KP5,'5'
  85 0f5e 7436     	   .byte SC_KP6,'6'
  86 0f60 6C37     	   .byte SC_KP7,'7'
  87 0f62 7538     	   .byte SC_KP8,'8'
  88 0f64 7D39     	   .byte SC_KP9,'9'
  89 0f66 7C2A     	   .byte SC_KPMUL,'*'
  90 0f68 4A2F     	   .byte SC_KPDIV,'/'
  91 0f6a 792B     	   .byte SC_KPPLUS,'+'
  92 0f6c 7B2D     	   .byte SC_KPMINUS,'-'
  93 0f6e 712E     	   .byte SC_KPDOT,'.'
  94 0f70 5A0D     	   .byte SC_KPENTER,'\r'
  95 0f72 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0f74 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0f76 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0f78 6141     	   .byte 'a','A'
 102 0f7a 6242     	   .byte 'b','B'
 103 0f7c 6343     	   .byte 'c','C'
 104 0f7e 6444     	   .byte 'd','D'
 105 0f80 6545     	   .byte 'e','E'
 106 0f82 6646     	   .byte 'f','F'
 107 0f84 6747     	   .byte 'g','G'
 108 0f86 6848     	   .byte 'h','H'
 109 0f88 6949     	   .byte 'i','I'
 110 0f8a 6A4A     	   .byte 'j','J'
 111 0f8c 6B4B     	   .byte 'k','K'
 112 0f8e 6C4C     	   .byte 'l','L'
 113 0f90 6D4D     	   .byte 'm','M'
 114 0f92 6E4E     	   .byte 'n','N'
 115 0f94 6F4F     	   .byte 'o','O'
 116 0f96 7050     	   .byte 'p','P'
 117 0f98 7151     	   .byte 'q','Q'
 118 0f9a 7252     	   .byte 'r','R'
 119 0f9c 7353     	   .byte 's','S'
 120 0f9e 7454     	   .byte 't','T'
 121 0fa0 7555     	   .byte 'u','U'
 122 0fa2 7656     	   .byte 'v','V'
 123 0fa4 7757     	   .byte 'w','W'
 124 0fa6 7858     	   .byte 'x','X'
 125 0fa8 7959     	   .byte 'y','Y'
 126 0faa 7A5A     	   .byte 'z','Z'
 127 0fac 3121     	   .byte '1','!'
 128 0fae 3240     	   .byte '2','@'
 129 0fb0 3323     	   .byte '3','#'
 130 0fb2 3424     	   .byte '4','$'
ARM GAS  forth.s 			page 51


 131 0fb4 3525     	   .byte '5','%'
 132 0fb6 365E     	   .byte '6','^'
 133 0fb8 3726     	   .byte '7','&'
 134 0fba 382A     	   .byte '8','*'
 135 0fbc 3928     	   .byte '9','('
 136 0fbe 3029     	   .byte '0',')'
 137 0fc0 2D5F     	   .byte '-','_'
 138 0fc2 3D2B     	   .byte '=','+'
 139 0fc4 607E     	   .byte '`','~'
 140 0fc6 2722     	   .byte '\'','"'
 141 0fc8 2C3C     	   .byte ',','<'
 142 0fca 2E3E     	   .byte '.','>'
 143 0fcc 2F3F     	   .byte '/','?'
 144 0fce 5C7C     	   .byte '\\','|'
 145 0fd0 3B3A     	   .byte ';',':'
 146 0fd2 5B7B     	   .byte '[','{'
 147 0fd4 5D7D     	   .byte ']','}'
 148 0fd6 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 0fd8 315C     	   .byte '1','\\'
 153 0fda 3240     	   .byte '2','@'
 154 0fdc 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 0fde 363F     	   .byte '6','?'
 158 0fe0 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 0fe2 397B     	   .byte '9','{'
 161 0fe4 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 0fe6 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 0fe8 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 0fea 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 0fec 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 0fee 11A3     	    .byte SC_RALT,VK_RALT
 172 0ff0 2F97     	    .byte SC_APPS,VK_APPS
 173 0ff2 758D     	    .byte SC_UP,VK_UP
 174 0ff4 728E     	    .byte SC_DOWN,VK_DOWN
 175 0ff6 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 0ff8 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 0ffa 7095     	    .byte SC_INSERT,VK_INSERT
 178 0ffc 6C91     	    .byte SC_HOME,VK_HOME
 179 0ffe 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1000 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1002 717F     	    .byte SC_DEL,VK_DELETE
 182 1004 6992     	    .byte SC_END,VK_END
 183 1006 4A2F     	    .byte SC_KPDIV,'/'
 184 1008 5A0D     	    .byte SC_KPENTER,'\r'
 185 100a 1200     	    .byte 0x12,0
 186 100c 7C00     	    .byte 0x7c,0
 187 100e 0000     	    .byte 0,0
ARM GAS  forth.s 			page 52


 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1010 6303     	   .byte 'c', VK_CTRL_C 
 193 1012 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1014 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1016 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1018 11A3     	   .byte SC_RALT,VK_RALT
 197 101a 2F97     	   .byte SC_APPS,VK_APPS
 198 101c 7095     	   .byte SC_INSERT,VK_INSERT
 199 101e 6C91     	   .byte SC_HOME,VK_HOME
 200 1020 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1022 717F     	   .byte SC_DEL,VK_DELETE
 202 1024 6992     	   .byte SC_END,VK_END
 203 1026 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1028 758D     	   .byte SC_UP,VK_UP
 205 102a 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 102c 728E     	   .byte SC_DOWN,VK_DOWN
 207 102e 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1030 4A2F     	   .byte SC_KPDIV,'/'
 209 1032 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1034 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1036 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1038 119E     	   .byte SC_LALT,VK_LALT
 213 103a 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 103c 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 103e 761B     	   .byte SC_ESC,VK_ESC
 216 1040 779A     	   .byte SC_NUM,VK_NLOCK
 217 1042 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1044 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
ARM GAS  forth.s 			page 53


  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77 1046 00BF     	    _GBL_FUNC kbd_isr 
  78 1048 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 1050 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  80 1054 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  81 1056 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
  81      C4F20203 
  82 105e D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  83 1062 10F0020F 	    tst r0,#KBD_TX 
  84 1066 40F08480 	    bne send_bit  
  85 106a 188A     	    ldrh r0,[r3,#GPIO_IDR]
  86 106c 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  87 1070 01F10102 	    add r2,r1,#1
  88 1074 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  89 1078 0029     	    cmp r1,#0
  90 107a 15D0     	    beq start_bit 
  91 107c 0929     	    cmp r1,#9 
  92 107e 25D0     	    beq parity_bit 
  93 1080 0A29     	    cmp r1,#10 
  94 1082 2DD0     	    beq stop_bit 
  95              	    // data bit 
  96 1084 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  97 1088 4FEA5202 	    lsr r2,#1 
  98 108c 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  99 1090 07D0     	    beq 1f 
 100 1092 42F08002 	    orr r2,#(1<<7)
 101 1096 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 102 109a 00F10100 	    add r0,#1 
 103 109e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 104 10a2 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 105 10a6 63E0     	    b 9f         
 106              	start_bit:
 107 10a8 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 108 10ac 60D1     	    bne 9f // not a start bit 
 109 10ae 80EA0000 	    eor r0,r0 
 110 10b2 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 111 10b6 84F87700 	    strb r0,[UP,#KBD_PARITY]
 112 10ba 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 113 10be 6FF00101 	    mvn r1,#1
 114 10c2 00EA0100 	    and r0,r1 // clear error flag 
 115 10c6 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 116 10ca 51E0     	    b 9f 
ARM GAS  forth.s 			page 54


 117              	parity_bit:
 118 10cc 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 119 10d0 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 120 10d4 4CD0     	    beq 9f  
 121 10d6 01F10101 	    add r1,#1 
 122 10da 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 123 10de 47E0     	    b 9f      
 124              	stop_bit:
 125 10e0 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 126 10e4 40D0     	    beq 8f // error stop bit expected 
 127 10e6 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 128 10ea 11F0010F 	    tst r1,#1 
 129 10ee 3BD0     	    beq 8f // error parity
 130 10f0 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 131 10f4 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 132 10f8 E028     	    cmp r0,#XT_KEY
 133 10fa 04D1     	    bne 1f
 134 10fc 41F04001 	    orr r1,#KBD_F_XT
 135 1100 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 136 1104 30E0     	    b 8f  
 137 1106 11F0800F 	1:  tst r1,#KBD_F_REL
 138 110a 14D0     	    beq store_code
 139 110c 5828     	    cmp r0,#SC_CAPS
 140 110e 04D1     	    bne 1f
 141 1110 81F00401 	    eor r1,#KBD_F_CAPS
 142 1114 41F00101 	    orr r1,#KBD_F_CTGL 
 143 1118 06E0     	    b 2f 
 144 111a 00B500F0 	1:  _CALL do_async_key 
 144      73F85DF8 
 144      04EB
 145 1124 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 146 1128 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 147 112c 01EA0201 	    and r1,r2
 148 1130 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 149 1134 18E0     	    b 8f
 150              	// store code in queue 
 151              	store_code:
 152 1136 F028     	    cmp r0,#KEY_REL
 153 1138 04D1     	    bne 1f
 154              	// set release flags 
 155 113a 41F08001 	    orr r1,#KBD_F_REL 
 156 113e 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 157 1142 11E0     	    b 8f     
 158 1144 0146     	1:  mov r1,r0 
 159 1146 00B500F0 	    _CALL do_async_key 
 159      5DF85DF8 
 159      04EB
 160 1150 0AD1     	    bne 8f // was async key 
 161 1152 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 162 1156 04F17802 	    add r2,UP,#KBD_QUEUE
 163 115a 1154     	    strb r1,[r2,r0]
 164 115c 00F10100 	    add r0,#1
 165 1160 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 166 1164 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 167 1168 80EA0000 	8:  eor r0,r0 
 168 116c A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 169 1170 7047     	9:  _RET 
ARM GAS  forth.s 			page 55


 170              	
 171              	/* send bit to keyboard 
 172              	 registers usage:
 173              	    r0 bit shifter 
 174              	    r1 bit counter 
 175              	    r2 output bit 
 176              	    r3 GPIOA_BASE_ADR 
 177              	*/
 178              	send_bit:
 179 1172 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 180 1176 01F10100 	    add r0,r1,#1
 181 117a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 182 117e 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 183 1182 4FF48052 	    mov r2,#(1<<KBD_DATA_PIN)
 184              	//    cbz r1,9f 
 185 1186 0829     	1:  cmp r1,#8 
 186 1188 15D0     	    beq send_parity 
 187 118a 0929     	    cmp r1,#9 
 188 118c 1CD0     	    beq send_stop
 189 118e 0A29     	    cmp r1,#10
 190 1190 1FD0     	    beq rx_ack_bit  
 191              	// data bits
 192 1192 10F0010F 	    tst r0,#1
 193 1196 4FEA5000 	    lsr r0,#1
 194 119a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 195 119e 02D1     	    bne 1f 
 196 11a0 4FEA0242 	    lsl r2,#16
 197 11a4 05E0     	    b 2f  
 198 11a6 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 199 11aa 00F10100 	    add r0,#1 
 200 11ae 84F87700 	    strb r0,[UP,#KBD_PARITY]
 201 11b2 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 202 11b4 1CE0     	    b 9f 
 203              	send_parity:
 204 11b6 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 205 11ba 10F0010F 	    tst r0,#1
 206 11be 01D0     	    beq 1f 
 207 11c0 4FEA0242 	    lsl r2,#16
 208 11c4 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 209 11c6 13E0     	    b 9f 
 210              	send_stop:
 211              	//    str r2,[r3,#GPIO_BSRR]
 212              	// release data pin 
 213 11c8 1968     	    ldr r1,[r3,#GPIO_MODER]
 214 11ca 21F04071 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 215 11ce 1960     	    str r1,[r3,#GPIO_MODER]
 216 11d0 0EE0     	    b 9f
 217              	rx_ack_bit:
 218 11d2 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 219 11d6 6FF00201 	    mvn r1,#KBD_TX 
 220 11da 00EA0100 	    and r0,r1 
 221 11de 198A     	    ldrh r1,[r3,#GPIO_IDR]
 222 11e0 11F4805F 	    tst r1,#(1<<KBD_DATA_PIN)
 223 11e4 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 224 11e8 80EA0000 	    eor r0,r0 
 225 11ec 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 226 11f0 7047     	9:  _RET 
ARM GAS  forth.s 			page 56


 227              	
 228              	/*************************************
 229              	 check if it is an asynchronous key 
 230              	 input:
 231              	    r0  virtual code
 232              	 output:
 233              	    r0 code order | 255 
 234              	*************************************/
 235              	is_async_key:
 236 11f2 02B4     	    push {r1}
 237 11f4 DFF85014 	    ldr r1,=async_keys
 238 11f8 00B500F0 	    _CALL table_scan
 238      96F85DF8 
 238      04EB
 239 1202 02BC     	    pop {r1}
 240 1204 7047     	    _RET 
 241              	
 242              	
 243              	/***************************
 244              	 check if async key 
 245              	 and process it
 246              	 input: 
 247              	    r0 code 
 248              	 output:
 249              	    r0 0|-1  
 250              	    Z flag set->not async, reset->async key      
 251              	****************************/
 252              	do_async_key:
 253 1206 00B5FFF7 	    _CALL is_async_key  
 253      F3FF5DF8 
 253      04EB
 254 1210 FF28     	    cmp r0,#255
 255 1212 01D1     	    bne set_async_key 
 256 1214 0020     	    movs r0,#0 
 257 1216 7047     	    _RET  
 258              	// asynchornous key, set/reset flag 
 259              	set_async_key:
 260 1218 06B4     	    push {r1,r2}
 261 121a 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 262 121e DFF82C14 	    ldr r1,=async_jump 
 263 1222 D1E800F0 	    tbb [r1,r0]
 264              	shift_key:
 265 1226 4FF00800 	    mov r0,#KBD_F_SHIFT 
 266 122a 04E0     	    b set_reset
 267              	ctrl_key:
 268 122c 4FF01000 	    mov r0,#KBD_F_CTRL
 269 1230 01E0     	    b set_reset 
 270              	alt_key:
 271 1232 4FF02000 	    mov r0,#KBD_F_ALT 
 272              	set_reset:
 273 1236 12F0800F 	    tst r2,#KBD_F_REL 
 274 123a 04D0     	    beq 1f 
 275 123c 6FEA0000 	    mvn r0,r0
 276 1240 02EA0002 	    and r2,r0
 277 1244 01E0     	    b 2f
 278 1246 42EA0002 	1:  orr r2,r0 
 279 124a 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 57


 280 124e 5FF0FF30 	    movs r0,#-1
 281 1252 06BC     	9:  pop {r1,r2}
 282 1254 7047     	    _RET 
 283              	
 284              	// asynchronous key table 
 285              	async_keys:
 286 1256 1200     	    .byte SC_LSHIFT,0 // left shift 
 287 1258 5900     	    .byte SC_RSHIFT,0 // right shift 
 288 125a 1401     	    .byte SC_LCTRL,1  // left control 
 289 125c 1401     	    .byte SC_RCTRL,1  // right control 
 290 125e 1102     	    .byte SC_LALT,2  // left alt 
 291 1260 1102     	    .byte SC_RALT,2   // right alt (alt char)
 292 1262 00FF     	    .byte 0,255 
 293              	
 294              	async_jump: // tbb table for async keys 
 295 1264 00       	    .byte 0 // shift  key 
 296 1265 03       	    .byte (ctrl_key-shift_key)/2
 297 1266 06       	    .byte (alt_key-shift_key)/2
 298              	
 299              	
 300              	/**********************************
 301              	    kbd_init 
 302              	    initialize keyboard 
 303              	    PS2 clock on PA11 
 304              	    PS2 data on PA12 
 305              	**********************************/
 306 1267 00       	    _GBL_FUNC kbd_init 
 307              	//  clock and data pins as INPUT_FLOAT 
 308 1268 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR 
 308      C4F20203 
 309 1270 1846     	    mov r0,r3 
 310 1272 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 311 1276 4FF00002 	    mov r2,#INPUT_FLOAT 
 312 127a 00B5FFF7 	    _CALL gpio_config
 312      59F85DF8 
 312      04EB
 313 1284 1846     	    mov r0,r3 
 314 1286 4FF00C01 	    mov r1,#KBD_DATA_PIN
 315 128a 4FF00002 	    mov r2,#INPUT_FLOAT 
 316 128e 00B5FFF7 	    _CALL gpio_config
 316      4FF85DF8 
 316      04EB
 317              	// interrupt triggered on falling edge 
 318 1298 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 318      C4F20102 
 319 12a0 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 320 12a4 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 321 12a6 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 322 12a8 80EA0000 	   eor r0,r0 
 323 12ac C4F88800 	   str r0,[UP,#KBD_QHEAD]
 324 12b0 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 325              	// enable interrupt EXTI15_10_IRQ in NVIC 
 326 12b4 4FF02800 	   mov r0,#EXTI15_10_IRQ
 327 12b8 4FF00101 	   mov r1,#1 
 328 12bc 00B5FEF7 	   _CALL nvic_set_priority
 328      F3FF5DF8 
 328      04EB
ARM GAS  forth.s 			page 58


 329 12c6 4FF02800 	   mov r0,#EXTI15_10_IRQ
 330 12ca 00B5FFF7 	   _CALL nvic_enable_irq 
 330      05F85DF8 
 330      04EB
 331 12d4 7047     	   _RET 
 332              	
 333              	// KEY-ASYNC ( -- n )
 334              	// return async key flags 
 335 12d6 800E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 335      094B4559 
 335      2D415359 
 335      4E43
 336 12e4 47F8046D 	    _PUSH 
 337 12e8 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 338 12ec 06F0FC06 	    and TOS,#0xFC  
 339 12f0 24E2     	    _NEXT 
 340              	
 341              	// KEYCODE 
 342              	// extract keyboard scancode from queue.
 343              	// output:
 344              	//        T0  keycode | 0 
 345              	keycode: 
 346 12f2 0EB4     	    push {T1,T2,T3}
 347 12f4 80EA0000 	    eor T0,T0  
 348 12f8 04F17803 	    add T3,UP,#KBD_QUEUE
 349 12fc D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 350 1300 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 351 1304 9142     	    cmp T1,T2 
 352 1306 06D0     	    beq 2f  
 353 1308 585C     	    ldrb T0,[T3,T1]
 354 130a 01F10101 	    add T1,#1 
 355 130e 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 356 1312 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 357 1316 0EBC     	2:  pop {T1,T2,T3}
 358 1318 7047     	    _RET 
 359              	
 360              	wait_code:
 361 131a 00B5FFF7 	    _CALL keycode 
 361      E9FF5DF8 
 361      04EB
 362 1324 0000     	    movs T0,T0
 363 1326 F8D0     	    beq wait_code  
 364 1328 7047     	    _RET 
 365              	
 366              	// translation table scan 
 367              	// input:
 368              	//      T0   target code 
 369              	//      T1   table pointer 
 370              	// output: 
 371              	//        T0   0 | code
 372              	//        Z flag  
 373              	table_scan:
 374 132a 04B4     	    push {T2}
 375 132c 11F8012B 	1:  ldrb T2,[T1],#1
 376 1330 22B1     	    cbz T2,2f 
 377 1332 8242     	    cmp T2,T0
 378 1334 02D0     	    beq 2f 
ARM GAS  forth.s 			page 59


 379 1336 01F10101 	    add T1,#1 
 380 133a F7E7     	    b 1b 
 381 133c 0878     	2:  ldrb T0,[T1]
 382 133e 0000     	    movs T0,T0 // set/reset zero flag 
 383 1340 04BC     	9:  pop {T2}
 384 1342 7047     	    _RET 
 385              	
 386              	/**********************************
 387              	   PS2-KEY? ( -- key -1 | 0 )
 388              	   get a character from keyboard
 389              	   don't wait for it.
 390              	*********************************/
 391 1344 DA120000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 391      08505332 
 391      2D4B4559 
 391      3F0000BF 
 392 1354 47F8046D 	    _PUSH 
 393 1358 86EA0606 	    eor TOS,TOS 
 394 135c BC49     	    ldr T1,=sc_ascii // translation table
 395 135e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 396 1362 4FF04002 	    mov T2,#KBD_F_XT 
 397 1366 1042     	    tst T0,T2
 398 1368 00D0     	    beq 1f
 399 136a BA49     	    ldr T1,=extended // extended code translation
 400 136c 00B5FFF7 	1:  _CALL keycode
 400      C0FF5DF8 
 400      04EB
 401 1376 98B1     	    cbz T0,inkey_exit
 402 1378 E128     	    cmp T0,#XT2_KEY // pause 
 403 137a 12D0     	    beq pause_key
 404 137c 00B5FFF7 	    _CALL table_scan 
 404      D4FF5DF8 
 404      04EB
 405 1386 0646     	    mov TOS,T0
 406 1388 00B500F0 	    _CALL do_modifiers
 406      14F85DF8 
 406      04EB
 407 1392 032E     	    cmp TOS,#VK_CTRL_C 
 408 1394 3EF49EAE 	    beq user_reboot 
 409 1398 47F8046D 	    _PUSH 
 410 139c 4FF0FF36 	    mov TOS,#-1
 411              	inkey_exit:     
 412 13a0 CCE1     	    _NEXT
 413              	pause_key: // discard next 7 codes 
 414 13a2 4FF00701 	    mov T1,#7 
 415 13a6 00B5FFF7 	1:  _CALL wait_code 
 415      B7FF5DF8 
 415      04EB
 416 13b0 0139     	    subs T1,#1
 417 13b2 F8D1     	    bne 1b 
 418 13b4 C2E1     	    _NEXT 
 419              	
 420              	// check for modifiers flags 
 421              	// and process it.
 422              	do_modifiers:
 423 13b6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 424 13ba 10F0080F 	    tst T0,#KBD_F_SHIFT 
ARM GAS  forth.s 			page 60


 425 13be 06D1     	    bne shift_down 
 426 13c0 10F0200F 	    tst T0,#KBD_F_ALT  
 427 13c4 06D1     	    bne altchar_down 
 428 13c6 10F0100F 	    tst T0,#KBD_F_CTRL
 429 13ca 06D1     	    bne ctrl_down 
 430 13cc 0DE0     	    b 9f 
 431              	shift_down:
 432 13ce 3046     	    mov T0,TOS 
 433 13d0 A149     	    ldr T1,=shifted 
 434 13d2 04E0     	    b 8f 
 435              	altchar_down:
 436 13d4 3046     	    mov T0,TOS 
 437 13d6 A149     	    ldr T1,=altchar
 438 13d8 01E0     	    b 8f
 439              	ctrl_down:
 440 13da 3046     	    mov T0,TOS 
 441 13dc A049     	    ldr T1,=controls 
 442 13de 00B5FFF7 	8:  _CALL table_scan
 442      A3FF5DF8 
 442      04EB
 443 13e8 0646     	    mov TOS,T0
 444 13ea 00B500F0 	9:  _CALL do_capslock 
 444      03F85DF8 
 444      04EB
 445 13f4 7047     	    _RET 
 446              	
 447              	do_capslock:
 448 13f6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 449 13fa 10F0040F 	    tst T0,#KBD_F_CAPS 
 450 13fe 0BD0     	    beq 9f 
 451 1400 412E     	    cmp TOS,#'A'
 452 1402 09D4     	    bmi 9f 
 453 1404 5B2E     	    cmp TOS,#'Z'+1 
 454 1406 03D4     	    bmi 3f 
 455 1408 612E     	    cmp TOS,#'a'
 456 140a 05D4     	    bmi 9f 
 457 140c 7B2E     	    cmp TOS,#'z'+1
 458 140e 03D5     	    bpl 9f 
 459 1410 4FF02000 	3:  mov T0,#(1<<5)
 460 1414 86EA0006 	    eor TOS,T0 
 461 1418 7047     	9:  _RET 
 462              	
 463              	
 464              	
 465              	/***************************
 466              	 send byte do keyboard
 467              	 input:
 468              	    r0  byte to send 
 469              	 use: 
 470              	    r1,r2 temp 
 471              	    r3 GPIOA_BASE_ADR 
 472              	***************************/
 473              	kbd_send:
 474 141a 0FB4     	    push {r0,r1,r2,r3}
 475              	// wait pre-video phase
 476              	// for least video output disturbance
 477 141c A06E     	1:  ldr r0,[UP,#VID_STATE]
ARM GAS  forth.s 			page 61


 478 141e 0128     	    cmp r0,ST_PREVID 
 479 1420 FCD1     	    bne 1b
 480              	// disable video interrupt 
 481 1422 4FF01D00 	    mov r0,#TIM3_IRQ 
 482 1426 00B5FEF7 	    _CALL nvic_disable_irq
 482      6CFF5DF8 
 482      04EB
 483              	// take control of keyboard clock line  
 484 1430 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
 484      C4F20203 
 485 1438 1846     	    mov r0,r3 
 486 143a 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 487 143e 4FF01102 	    mov r2,#OUTPUT_OD
 488 1442 00B5FEF7 	    _CALL gpio_config 
 488      75FF5DF8 
 488      04EB
 489 144c 1846     	    mov r0,r3 
 490 144e 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 491 1452 82EA0202 	    eor r2,r2 
 492 1456 00B5FEF7 	    _CALL gpio_out 
 492      C1FF5DF8 
 492      04EB
 493              	// delay to hold clock line to 0 for 150Âµsec     
 494 1460 4FF4E150 	    mov r0,#150*48
 495 1464 0138     	1:  subs r0,#1 
 496 1466 FDD1     	    bne 1b
 497 1468 01BC     	    pop {r0}
 498 146a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 499 146e D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 500 1472 40F00200 	    orr r0,#KBD_TX 
 501 1476 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 502 147a 80EA0000 	    eor r0,r0 
 503 147e 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 504 1482 84F87700 	    strb r0,[UP,#KBD_PARITY]
 505              	// take control of data line 
 506              	// and put it to 0 for start bit.    
 507 1486 1846     	    mov r0,r3 
 508 1488 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 509 148c 4FF01102 	    mov r2,#OUTPUT_OD 
 510 1490 00B5FEF7 	    _CALL gpio_config 
 510      4EFF5DF8 
 510      04EB
 511 149a 1846     	    mov r0,r3 
 512 149c 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 513 14a0 82EA0202 	    eor r2,r2 
 514 14a4 00B5FEF7 	    _CALL gpio_out
 514      9AFF5DF8 
 514      04EB
 515              	// release clock line 
 516 14ae 1846     	    mov r0,r3 
 517 14b0 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 518 14b4 4FF00002 	    mov r2,#INPUT_FLOAT
 519 14b8 00B5FEF7 	    _CALL gpio_config
 519      3AFF5DF8 
 519      04EB
 520              	// wait send completed
 521              	//  expire after 10 msec 
ARM GAS  forth.s 			page 62


 522 14c2 4FF00A00 	    mov r0,#10
 523 14c6 E060     	    str r0,[UP,#CD_TIMER]
 524 14c8 E068     	1:  ldr r0,[UP,#CD_TIMER]
 525 14ca 20B1     	    cbz r0, 4f 
 526 14cc 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 527 14d0 10F0020F 	    tst r0,#KBD_TX
 528 14d4 F8D1     	    bne 1b 
 529              	// enable video interrupt     
 530 14d6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 531 14da 00B5FEF7 	    _CALL nvic_enable_irq
 531      FDFE5DF8 
 531      04EB
 532 14e4 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 533 14e8 20F00201 	    bic r1,r0,#KBD_TX
 534 14ec 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 535 14f0 00F00200 	    and r0,#KBD_TX
 536 14f4 48B1     	    cbz r0, 5f
 537 14f6 1968     	    ldr r1,[r3,#GPIO_MODER]
 538 14f8 21F04071 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 539 14fc 1960     	    str r1,[r3,#GPIO_MODER]
 540 14fe 80EA0000 	    eor r0,r0 
 541 1502 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 542 1506 6FEA0000 	    mvn r0,r0   
 543 150a 0EBC     	5:  pop {r1,r2,r3}
 544 150c 7047     	    _RET 
 545              	
 546              	 
 547              	// flush keyboard queue 
 548              	kbd_clear_queue:
 549 150e 80EA0000 	    eor T0,T0 
 550 1512 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 551 1516 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 552 151a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 553 151e 6FF00301 	    mvn T1,#3
 554 1522 00EA0100 	    and T0,T1 
 555 1526 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 556 152a 7047     	    _RET 
 557              	
 558              	/**********************************
 559              	 KBD-RST ( -- c )
 560              	 send a reset command to keyboard
 561              	**********************************/
 562 152c 48130000 	    _HEADER KBD_RST,7,"KBD-RST"
 562      074B4244 
 562      2D525354 
 563 1538 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 564 153c 00B5FFF7 	    _CALL kbd_send
 564      6CFF5DF8 
 564      04EB
 565 1546 B8B9     	    cbnz T0,3f // keyboard not dectected
 566 1548 00B5FFF7 	    _CALL kbd_clear_queue
 566      E0FF5DF8 
 566      04EB
 567 1552 00B5FFF7 	    _CALL wait_code 
 567      E1FE5DF8 
 567      04EB
 568 155c FE28     	    cmp r0,KBD_CMD_RESEND
ARM GAS  forth.s 			page 63


 569 155e EBD0     	    beq 1b 
 570 1560 4FF4FA70 	    mov T0,#500 
 571 1564 E060     	    str T0,[UP,#CD_TIMER]
 572 1566 00B5FFF7 	2:  _CALL keycode
 572      C3FE5DF8 
 572      04EB
 573 1570 10B9     	    cbnz T0,3f
 574 1572 E068     	    ldr T0,[UP,#CD_TIMER]
 575 1574 0028     	    cmp T0,#0 
 576 1576 F6D1     	    bne 2b 
 577 1578 47F8046D 	3:  _PUSH 
 578 157c 0646     	    mov TOS,T0  
 579 157e DDE0     	    _NEXT 
 580              	
 581              	/*****************************
 582              	 KBD-LED ( c -- )
 583              	 send command to control
 584              	 keyboard LEDS 
 585              	*****************************/
 586 1580 30150000 	    _HEADER KBD_LED,7,"KBD-LED"
 586      074B4244 
 586      2D4C4544 
 587 158c 00B5FFF7 	1:  _CALL kbd_clear_queue
 587      BEFF5DF8 
 587      04EB
 588 1596 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 589 159a 00B5FFF7 	    _CALL kbd_send 
 589      3DFF5DF8 
 589      04EB
 590 15a4 00B5FFF7 	2:  _CALL wait_code 
 590      B8FE5DF8 
 590      04EB
 591 15ae FE28     	    cmp T0,#KBD_CMD_RESEND
 592 15b0 ECD0     	    beq 1b
 593 15b2 FA28     	    cmp T0,#KBD_ACK  
 594 15b4 F6D1     	    bne 2b 
 595 15b6 3046     	2:  mov T0,TOS 
 596 15b8 00F00700 	    and T0,#7 
 597 15bc 00B5FFF7 	    _CALL kbd_send 
 597      2CFF5DF8 
 597      04EB
 598 15c6 00B5FFF7 	3:  _CALL wait_code 
 598      A7FE5DF8 
 598      04EB
 599 15d0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 600 15d2 F0D0     	    beq 2b
 601 15d4 FA28     	    cmp T0,#KBD_ACK 
 602 15d6 F6D1     	    bne 3b  
 603 15d8 57F8046B 	    _POP 
 604 15dc AEE0     	    _NEXT 
 605              	
 606              	/**************************
 607              	 CAPS-LED ( -- )
 608              	 synch capslock LED
 609              	 to KBD_F_CAPS 
 610              	**************************/
 611 15de 84150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
ARM GAS  forth.s 			page 64


 611      08434150 
 611      532D4C45 
 611      4400
 612 15ec 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 613 15f0 10F0010F 	    tst T0,#1
 614 15f4 00D1     	    bne 1f 
 615 15f6 A1E0     	    _NEXT 
 616 15f8 47F8046D 	1: _PUSH 
 617 15fc 6FF00101 	    mvn T1,#1 
 618 1600 00EA0100 	    and T0,T1 
 619 1604 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 620 1608 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 621 160c 48F804CD 	    _CALL_COLWORD 1f
 621      DFF850C0 
 621      92E0
 622 1616 8D150000 	1:  _ADR KBD_LED       
 623 161a 43170000 	    _UNNEST
 624              	
 625              	/************************
 626              	 WAIT-KEY ( -- c )
 627              	 wait for keyboard key 
 628              	*************************/
 629 161e E2150000 	    _HEADER WKEY,8,"WAIT-KEY"
 629      08574149 
 629      542D4B45 
 629      5900
 630 162c 504700BF 	    _NEST
 631 1630 ED150000 	1:  _ADR CAPS_LED  
 632 1634 55130000 	    _ADR PS2_QKEY 
 633 1638 C11B0000 	    _ADR QDUP 
 634 163c FB180000 	    _QBRAN 1b  
 634      30160000 
 635 1644 43170000 	    _UNNEST 
 636 1648 56120000 	
 636      64120000 
 636      C40E0000 
 636      E80F0000 
 636      780F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 65


  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 1668 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 1670 0346     	    mov r3,r0 
  42 1672 4FF00401 	    mov r1,#PIN_F_SC 
  43 1676 4FF00102 	    mov r2,#OUTPUT_PP
  44 167a 00B5FEF7 	    _CALL gpio_config 
  44      59FE5DF8 
  44      04EB
  45 1684 1846     	    mov r0,r3 
  46 1686 4FF00401 	    mov r1,#PIN_F_SC  
  47 168a 4FF00101 	    MOV r1,#1
  48 168e 00B5FEF7 	    _CALL gpio_out 
  48      A5FE5DF8 
  48      04EB
  49 1698 1846     	    mov r0,r3 
  50 169a 4FF00501 	    mov r1,#PIN_SCK  
  51 169e 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 16a2 00B5FEF7 	    _CALL gpio_config 
  52      45FE5DF8 
  52      04EB
  53 16ac 1846     	    mov r0,r3 
  54 16ae 4FF00701 	    mov r1,#PIN_MOSI 
  55 16b2 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 16b6 00B5FEF7 	    _CALL gpio_config 
  56      3BFE5DF8 
  56      04EB
  57 16c0 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  57      C4F20200 
  58 16c8 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  59 16ca 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  60 16ce 4164     	    str r1,[r0,#RCC_APB2ENR]
  61 16d0 7047     	    _RET 
  62              	
  63              	
  64              	/**********************
  65              	    CHIP-SEL ( -- )
  66              	    drive F_SC low 
ARM GAS  forth.s 			page 66


  67              	*********************/
  68 16d2 22160000 	    _HEADER CHIPSEL,8,"CHIP-SEL"
  68      08434849 
  68      502D5345 
  68      4C00
  69 16e0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  69      C4F20200 
  70 16e8 4FF00401 	    mov r1,#PIN_F_SC 
  71 16ec 4FF00002 	    mov r2,#0 
  72 16f0 00B5FEF7 	    _CALL gpio_out 
  72      74FE5DF8 
  72      04EB
  73 16fa 1FE0     	    _NEXT 
  74              	
  75              	
  76              	/*********************
  77              	    _CHIP-DSEL 
  78              	    drive F_SC high 
  79              	*********************/
  80 16fc D6160000 	    _HEADER CHIPDSEL,9,"CHIP-DSEL"
  80      09434849 
  80      502D4453 
  80      454C00BF 
  81 170c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  81      C4F20200 
  82 1714 4FF00401 	    mov r1,#PIN_F_SC 
  83 1718 4FF00102 	    mov r2,#1 
  84 171c 00B5FEF7 	    _CALL gpio_out 
  84      5EFE5DF8 
  84      04EB
  85 1726 09E0     	    _NEXT 
  86              	
  87              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
ARM GAS  forth.s 			page 67


  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/*****************************************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	//  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
ARM GAS  forth.s 			page 68


  82              	// PUSH TOS, to be used in colon definition 
  83              	TPUSH:
  84 1728 47F8046D 		_PUSH
  85 172c 06E0     		_NEXT
  86              	
  87              	// POP TOS, to be used in colon defintion  
  88              	TPOP:
  89 172e 57F8046B 		_POP 
  90 1732 03E0     		_NEXT
  91              	
  92              	// hi level word enter 
  93              	NEST: 
  94 1734 48F804CD 		STMFD	RSP!,{IP}
  95 1738 05F1030C 		ADD IP,WP,#3
  96              	// inner interprer
  97              	INEXT: 
  98 173c 5CF8045B 		LDR WP,[IP],#4 
  99 1740 2847     		BX WP  
 100              	UNNEST:
 101 1742 58F804CB 		LDMFD RSP!,{IP}
 102 1746 5CF8045B 		LDR WP,[IP],#4 
 103 174a 2847     		BX WP  
 104              	
 105              		.p2align 2 
 106              	
 107              	// compile "BX 	INX" 
 108              	// this is the only way 
 109              	// a colon defintion in RAM 
 110              	// can jump to NEST
 111              	// INX is initialized to NEST address 
 112              	// and must be preserved   
 113              	COMPI_NEST:
 114 174c 04F14401 		add T1,UP,#USER_CTOP 
 115 1750 0968     		ldr T1,[T1]
 116 1752 44F25072 		mov T2,#0x4700+(10<<3)
 117 1756 21F8022B 		strh T2,[T1],#2
 118 175a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 119 175e 21F8022B 		strh T2,[T1],#2 
 120 1762 04F14402 		add T2,UP,#USER_CTOP 
 121 1766 1160     		str T1,[T2]
 122 1768 E8E7     		_NEXT  
 123              	
 124              	// ' STDIN 
 125              	// stdin vector 
 126              	TSTDIN:
 127 176a 47F8046D 		_PUSH 
 128 176e 04F11406 		ADD TOS,UP,#STDIN 
 129 1772 E3E7     		_NEXT 
 130              	
 131              	// ' STDOUT 
 132              	// stdout vector 
 133              	TSTDOUT:
 134 1774 47F8046D 		_PUSH 
 135 1778 04F11806 		ADD TOS,UP,#STDOUT
 136 177c DEE7     		_NEXT 
 137              		
 138              	/********************************************
ARM GAS  forth.s 			page 69


 139              		KEY? ( -- c T | F )
 140              		check if available character 
 141              	********************************************/
 142 177e 00170000 		_HEADER QKEY,4,"KEY?"
 142      044B4559 
 142      3F00
 143              	QRX: 
 144 1788 504700BF 		_NEST 
 145 178c 6B170000 		_ADR TSTDIN // ' STDIN 
 146 1790 99210000 		_ADR ATEXE
 147 1794 43170000 		_UNNEST 
 148              	
 149              	/********************************************
 150              	    KEY	 ( -- c )
 151              	 	Wait for and return an input character.
 152              	********************************************/
 153 1798 82170000 		_HEADER KEY,3,"KEY"
 153      034B4559 
 154 17a0 504700BF 		_NEST
 155              	KEY1:
 156 17a4 ED150000 		_ADR CAPS_LED 
 157 17a8 89170000 		_ADR	QRX
 158 17ac FB180000 		_QBRAN	KEY1
 158      A4170000 
 159 17b4 43170000 		_UNNEST
 160              	
 161              	/**********************************************
 162              		EMIT ( c -- )
 163              		transmit a character to console 
 164              	**********************************************/
 165 17b8 9C170000 		_HEADER EMIT,4,"EMIT"
 165      04454D49 
 165      540000BF 
 166              	TECHO:
 167 17c4 504700BF 		_NEST 
 168 17c8 75170000 		_ADR TSTDOUT 
 169 17cc 99210000 		_ADR ATEXE 
 170 17d0 43170000 		_UNNEST 
 171              	
 172              	
 173              	/************************************************
 174              	 GET-IP ( n - c )
 175              	 return interrupt priority of IRQn 
 176              	************************************************/
 177              	/*
 178              		_HEADER GETIP,6,"GET-IP" 
 179              		_NEST 
 180              		_ADR DUPP 
 181              		_ADR ZLESS
 182              		_QBRAN 1f 
 183              		_DOLIT 15
 184              		_ADR ANDD
 185              		_DOLIT 4
 186              		_ADR SUBB  
 187              		_DOLIT 0xE000ED18 
 188              		_BRAN 2f 
 189              	1:	_DOLIT 0xE000E400 
ARM GAS  forth.s 			page 70


 190              	2:	_ADR PLUS 
 191              		_ADR CAT
 192              		_DOLIT 4 
 193              		_ADR RSHIFT 
 194              		_UNNEST 
 195              	*/
 196              	
 197              	/***********************************************
 198              	 RANDOM ( n+ -- {0..n+ - 1} )
 199              	 return pseudo random number 
 200              	 REF: https://en.wikipedia.org/wiki/Xorshift
 201              	************************************************/
 202 17d4 BC170000 		_HEADER RAND,6,"RANDOM"
 202      0652414E 
 202      444F4D00 
 203 17e0 504700BF 		_NEST
 204 17e4 791C0000 		_ADR ABSS   
 205 17e8 B91D0000 		_ADR SEED 
 206 17ec 41190000 		_ADR AT 
 207 17f0 ED190000 		_ADR DUPP 
 208 17f4 BB180000 		_DOLIT 13
 208      0D000000 
 209 17fc A11A0000 		_ADR LSHIFT 
 210 1800 591A0000 		_ADR XORR  
 211 1804 ED190000 		_ADR DUPP 
 212 1808 BB180000 		_DOLIT 17 
 212      11000000 
 213 1810 891A0000 		_ADR RSHIFT 
 214 1814 591A0000 		_ADR XORR 
 215 1818 ED190000 		_ADR DUPP
 216 181c BB180000 		_DOLIT 5 
 216      05000000 
 217 1824 A11A0000 		_ADR LSHIFT 
 218 1828 591A0000 		_ADR XORR  
 219 182c ED190000 		_ADR DUPP 
 220 1830 B91D0000 		_ADR SEED 
 221 1834 2D190000 		_ADR STORE 
 222 1838 BB180000 		_DOLIT 0x7FFFFFFF
 222      FFFFFF7F 
 223 1840 311A0000 		_ADR ANDD 
 224 1844 FD190000 		_ADR SWAP 
 225 1848 1D200000 		_ADR MODD 
 226 184c 43170000 		_UNNEST 
 227              	
 228              	
 229              	/****************************************
 230              	 PAUSE ( u -- ) 
 231              	 suspend execution for u milliseconds
 232              	****************************************/
 233 1850 D8170000 		_HEADER PAUSE,5,"PAUSE"
 233      05504155 
 233      534500BF 
 234 185c 504700BF 		_NEST 
 235 1860 E11D0000 		_ADR TIMER 
 236 1864 2D190000 		_ADR STORE 
 237              	PAUSE_LOOP:
 238 1868 E11D0000 		_ADR TIMER 
ARM GAS  forth.s 			page 71


 239 186c 41190000 		_ADR AT 
 240 1870 FB180000 		_QBRAN PAUSE_EXIT 
 240      80180000 
 241 1878 0F190000 		_BRAN PAUSE_LOOP 
 241      68180000 
 242              	PAUSE_EXIT: 		
 243 1880 43170000 		_UNNEST 
 244              	
 245              	/******************************************
 246              	  ULED ( T|F -- )
 247              	  control user LED, -1 ON, 0 OFF 
 248              	*******************************************/
 249 1884 54180000 		_HEADER ULED,4,"ULED"
 249      04554C45 
 249      440000BF 
 250 1890 4FF40050 		mov T0,#(1<<LED_PIN)
 251 1894 4FF40061 		_MOV32 T1,LED_GPIO 
 251      C4F20201 
 252 189c 3600     		movs TOS,TOS 
 253 189e 57F8046B 		_POP
 254 18a2 03D0     		beq ULED_OFF
 255 18a4 4FEA0040 		lsl T0,#16 
 256 18a8 8861     		str T0,[T1,#GPIO_BSRR]
 257 18aa 47E7     		_NEXT 
 258              	ULED_OFF:
 259 18ac 8861     		str T0,[T1,#GPIO_BSRR]
 260 18ae 45E7     		_NEXT    
 261              	
 262              	
 263              		
 264              	/***************
 265              	//  The kernel
 266              	***************/
 267              	
 268              	/********************
 269              	    NOP	( -- )
 270              	 	do nothing.
 271              	*********************/
 272 18b0 88180000 		_HEADER NOP,3,"NOP"
 272      034E4F50 
 273 18b8 40E7     		_NEXT 
 274              	 
 275              	/********************
 276              	    doLIT	( -- w )
 277              	 	Push an inline literal.
 278              	hidden word used by compiler 
 279              	*********************/
 280              	DOLIT:
 281 18ba 47F8046D 		_PUSH				//  store TOS on data stack
 282 18be 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 283 18c2 3BE7     		_NEXT 
 284              	
 285              	/*******************************
 286              	    EXECUTE	( ca -- )
 287              	 	Execute the word at ca.
 288              	*******************************/
 289 18c4 B4180000 		_HEADER EXECU,7,"EXECUTE"
ARM GAS  forth.s 			page 72


 289      07455845 
 289      43555445 
 290 18d0 46F00105 		ORR	WP,TOS,#1 
 291 18d4 57F8046B 		_POP
 292 18d8 2847     		BX WP 
 293 18da 2FE7     		_NEXT 
 294              	
 295              	/**********************************************************
 296              	    donext	( -- ) counter on R:
 297              	 	Run time code for the single index loop.
 298              	 	: next ( -- ) \ hilevel model
 299              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 300              	hidden word used by compiler 	  
 301              	*********************************************************/
 302              	DONXT:
 303 18dc D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 304 18e0 22B9     		CBNZ T2,NEXT1 
 305              		/* loop done */
 306 18e2 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 307 18e6 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 308 18ea 27E7     		_NEXT
 309              	NEXT1:
 310              		/* decrement loop counter */
 311 18ec A2F10102 		SUB	T2,T2,#1
 312 18f0 C8F80020 		STR	T2,[RSP]
 313 18f4 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 314 18f8 20E7     		_NEXT 
 315              	
 316              	/**************************************
 317              	    ?branch	( f -- )
 318              	 	Branch if flag is zero.
 319              	hiddend word used by compiler
 320              	**************************************/
 321              	QBRAN:
 322 18fa 3600     		MOVS	TOS,TOS
 323 18fc 57F8046B 		_POP
 324 1900 02D1     		BNE	QBRAN1
 325 1902 DCF800C0 		LDR	IP,[IP]
 326 1906 19E7     		_NEXT
 327              	QBRAN1:
 328 1908 0CF1040C 	 	ADD	IP,IP,#4
 329 190c 16E7     		_NEXT
 330              	
 331              	/***********************************
 332              	    branch	( -- )
 333              	 	Branch to an inline address.
 334              	hidden word used by compiler 
 335              	***********************************/
 336              	BRAN:
 337 190e DCF800C0 		LDR	IP,[IP]
 338 1912 13E7     		_NEXT
 339              	
 340              	/******************************************
 341              	    EXIT	(  -- )
 342              	 	Exit the currently executing command.
 343              	******************************************/
 344 1914 C8180000 		_HEADER EXIT,4,"EXIT"
ARM GAS  forth.s 			page 73


 344      04455849 
 344      540000BF 
 345 1920 43170000 		_UNNEST
 346              	
 347              	/***********************************
 348              	    !	   ( w a -- )
 349              	 	Pop the data stack to memory.
 350              	************************************/
 351 1924 18190000 		_HEADER STORE,1,"!"
 351      012100BF 
 352 192c 57F8045B 		LDR	WP,[DSP],#4
 353 1930 3560     		STR	WP,[TOS]
 354 1932 57F8046B 		_POP
 355 1936 01E7     		_NEXT 
 356              	
 357              	/********************************************
 358              	    @	   ( a -- w )
 359              	 	Push memory location to the data stack.
 360              	*********************************************/
 361 1938 28190000 		_HEADER AT,1,"@"
 361      014000BF 
 362 1940 3668     		LDR	TOS,[TOS]
 363 1942 FBE6     		_NEXT 
 364              	
 365              	/*******************************************
 366              	    C!	  ( c b -- )
 367              	 	Pop the data stack to byte memory.
 368              	*******************************************/
 369 1944 3C190000 		_HEADER CSTOR,2,"C!"
 369      02432100 
 370 194c 57F8045B 		LDR	WP,[DSP],#4
 371 1950 3570     		STRB WP,[TOS]
 372 1952 57F8046B 		_POP
 373 1956 F1E6     		_NEXT
 374              	
 375              	/*********************************************
 376              	    C@	  ( b -- c )
 377              	 	Push byte memory location to the data stack.
 378              	**********************************************/
 379 1958 48190000 		_HEADER CAT,2,"C@"
 379      02434000 
 380 1960 3678     		LDRB	TOS,[TOS]
 381 1962 EBE6     		_NEXT 
 382              	
 383              	/*********************************************
 384              	    R>	  ( -- w )
 385              	 	Pop the return stack to the data stack.
 386              	**********************************************/
 387 1964 5C190000 		_HEADER RFROM,2,"R>"
 387      02523E00 
 388 196c 47F8046D 		_PUSH
 389 1970 58F8046B 		LDR	TOS,[RSP],#4
 390 1974 E2E6     		_NEXT 
 391              	
 392              	/************************************************
 393              	    R@	  ( -- w )
 394              	 	Copy top of return stack to the data stack.
ARM GAS  forth.s 			page 74


 395              	************************************************/
 396 1976 68190000 		_HEADER RAT,2,"R@"
 396      02524000 
 396      00BF
 397 1980 47F8046D 		_PUSH
 398 1984 D8F80060 		LDR	TOS,[RSP]
 399 1988 D8E6     		_NEXT 
 400              	
 401              	/***********************************************
 402              	    >R	  ( w -- )
 403              	 	Push the data stack to the return stack.
 404              	************************************************/
 405 198a 7A190000 		_HEADER TOR,2,">R"
 405      023E5200 
 405      00BF
 406 1994 48F8046D 		STR	TOS,[RSP,#-4]!
 407 1998 57F8046B 		_POP
 408 199c CEE6     		_NEXT
 409              	
 410              	/*******************************
 411              	//	RP! ( u -- )
 412              	// initialize RPP with u 
 413              	*******************************/
 414 199e 8E190000 		_HEADER RPSTOR,3,"RP!"
 414      03525021 
 414      00BF
 415 19a8 B046     		MOV RSP,TOS 
 416 19aa 57F8046B 		_POP  
 417 19ae C5E6     		_NEXT 
 418              	
 419              	/********************************
 420              		SP! ( u -- )
 421              	 initialize SPP with u 
 422              	********************************/
 423 19b0 A2190000 		_HEADER SPSTOR,3,"SP!"
 423      03535021 
 424 19b8 3746     		MOV DSP,TOS 
 425 19ba 86EA0606 		EOR TOS,TOS,TOS 
 426 19be BDE6     		_NEXT 
 427              	
 428              	/**************************************
 429              	    SP@	 ( -- a )
 430              	 	Push the current data stack pointer.
 431              	***************************************/
 432 19c0 B4190000 		_HEADER SPAT,3,"SP@"
 432      03535040 
 433 19c8 47F8046D 		_PUSH
 434 19cc 3E46     		MOV	TOS,DSP
 435 19ce B5E6     		_NEXT
 436              	
 437              	/********************************
 438              	    DROP	( w -- )
 439              	 	Discard top stack item.
 440              	********************************/
 441 19d0 C4190000 		_HEADER DROP,4,"DROP"
 441      0444524F 
 441      500000BF 
ARM GAS  forth.s 			page 75


 442 19dc 57F8046B 		_POP
 443 19e0 ACE6     		_NEXT 
 444              	
 445              	/*********************************
 446              	    DUP	 ( w -- w w )
 447              	 	Duplicate the top stack item.
 448              	*********************************/
 449 19e2 D4190000 		_HEADER DUPP,3,"DUP"
 449      03445550 
 449      00BF
 450 19ec 47F8046D 		_PUSH
 451 19f0 A4E6     		_NEXT 
 452              	
 453              	/**********************************
 454              	    SWAP	( w1 w2 -- w2 w1 )
 455              	 	Exchange top two stack items.
 456              	**********************************/
 457 19f2 E6190000 		_HEADER SWAP,4,"SWAP"
 457      04535741 
 457      5000
 458 19fc 3D68     		LDR	WP,[DSP]
 459 19fe 3E60     		STR	TOS,[DSP]
 460 1a00 2E46     		MOV	TOS,WP
 461 1a02 9BE6     		_NEXT 
 462              	
 463              	/***********************************
 464              	    OVER	( w1 w2 -- w1 w2 w1 )
 465              	 	Copy second stack item to top.
 466              	***********************************/
 467 1a04 F6190000 		_HEADER OVER,4,"OVER"
 467      044F5645 
 467      520000BF 
 468 1a10 47F8046D 		_PUSH
 469 1a14 7E68     		LDR	TOS,[DSP,#4]
 470 1a16 91E6     		_NEXT 
 471              	
 472              	/***********************************
 473              	    0<	  ( n -- t )
 474              	 	Return true if n is negative.
 475              	***********************************/
 476 1a18 081A0000 		_HEADER ZLESS,2,"0<"
 476      02303C00 
 477 1a20 4FEAE676 		ASR TOS,#31
 478 1a24 8AE6     		_NEXT 
 479              	
 480              	/********************************
 481              	    AND	 ( w w -- w )
 482              	 	Bitwise AND.
 483              	********************************/
 484 1a26 1C1A0000 		_HEADER ANDD,3,"AND"
 484      03414E44 
 484      00BF
 485 1a30 57F8045B 		LDR	WP,[DSP],#4
 486 1a34 06EA0506 		AND	TOS,TOS,WP
 487 1a38 80E6     		_NEXT 
 488              	
 489              	/******************************
ARM GAS  forth.s 			page 76


 490              	    OR	  ( w w -- w )
 491              	 	Bitwise inclusive OR.
 492              	******************************/
 493 1a3a 2A1A0000 		_HEADER ORR,2,"OR"
 493      024F5200 
 493      00BF
 494 1a44 57F8045B 		LDR	WP,[DSP],#4
 495 1a48 46EA0506 		ORR	TOS,TOS,WP
 496 1a4c 76E6     		_NEXT 
 497              	
 498              	/*****************************
 499              	    XOR	 ( w w -- w )
 500              	 	Bitwise exclusive OR.
 501              	*****************************/
 502 1a4e 3E1A0000 		_HEADER XORR,3,"XOR"
 502      03584F52 
 502      00BF
 503 1a58 57F8045B 		LDR	WP,[DSP],#4
 504 1a5c 86EA0506 		EOR	TOS,TOS,WP
 505 1a60 6CE6     		_NEXT 
 506              	
 507              	/**************************************************
 508              	    UM+	 ( w w -- w cy )
 509              	 	Add two numbers, return the sum and carry flag.
 510              	***************************************************/
 511 1a62 521A0000 		_HEADER UPLUS,3,"UM+"
 511      03554D2B 
 511      00BF
 512 1a6c 3D68     		LDR	WP,[DSP]
 513 1a6e AD19     		ADDS	WP,WP,TOS
 514 1a70 4FF00006 		MOV	TOS,#0
 515 1a74 46F10006 		ADC	TOS,TOS,#0
 516 1a78 3D60     		STR	WP,[DSP]
 517 1a7a 5FE6     		_NEXT 
 518              	
 519              	/*********************************
 520              	    RSHIFT	 ( w # -- w )
 521              	 	arithmetic Right shift # bits.
 522              	**********************************/
 523 1a7c 661A0000 		_HEADER RSHIFT,6,"RSHIFT"
 523      06525348 
 523      49465400 
 524 1a88 57F8045B 		LDR	WP,[DSP],#4
 525 1a8c 45FA06F6 		MOV	TOS,WP,ASR TOS
 526 1a90 54E6     		_NEXT 
 527              	
 528              	/****************************
 529              	    LSHIFT	 ( w # -- w )
 530              	 	Right shift # bits.
 531              	****************************/
 532 1a92 801A0000 		_HEADER LSHIFT,6,"LSHIFT"
 532      064C5348 
 532      49465400 
 532      00BF
 533 1aa0 57F8045B 		LDR	WP,[DSP],#4
 534 1aa4 05FA06F6 		MOV	TOS,WP,LSL TOS
 535 1aa8 48E6     		_NEXT
ARM GAS  forth.s 			page 77


 536              	
 537              	/*************************
 538              	    +	 ( w w -- w )
 539              	 	Add.
 540              	*************************/
 541 1aaa 961A0000 		_HEADER PLUS,1,"+"
 541      012B
 542 1ab0 57F8045B 		LDR	WP,[DSP],#4
 543 1ab4 2E44     		ADD	TOS,TOS,WP
 544 1ab6 41E6     		_NEXT 
 545              	
 546              	/************************
 547              	    -	 ( w w -- w )
 548              	 	Subtract.
 549              	************************/
 550 1ab8 AE1A0000 		_HEADER SUBB,1,"-"
 550      012D00BF 
 551 1ac0 57F8045B 		LDR	WP,[DSP],#4
 552 1ac4 C6EB0506 		RSB	TOS,TOS,WP
 553 1ac8 38E6     		_NEXT 
 554              	
 555              	/************************
 556              	    *	 ( w w -- w )
 557              	 	Multiply.
 558              	***********************/
 559 1aca BC1A0000 		_HEADER STAR,1,"*"
 559      012A
 560 1ad0 57F8045B 		LDR	WP,[DSP],#4
 561 1ad4 05FB06F6 		MUL	TOS,WP,TOS
 562 1ad8 30E6     		_NEXT 
 563              	
 564              	/***************************
 565              	    UM*	 ( w w -- ud )
 566              	 	Unsigned multiply.
 567              	****************************/
 568 1ada CE1A0000 		_HEADER UMSTA,3,"UM*"
 568      03554D2A 
 568      00BF
 569 1ae4 3D68     		LDR	WP,[DSP]
 570 1ae6 A6FB0523 		UMULL	T2,T3,TOS,WP
 571 1aea 3A60     		STR	T2,[DSP]
 572 1aec 1E46     		MOV	TOS,T3
 573 1aee 25E6     		_NEXT 
 574              	
 575              	/***************************
 576              	    M*	 ( w w -- d )
 577              	 	signed multiply.
 578              	***************************/
 579 1af0 DE1A0000 		_HEADER MSTAR,2,"M*"
 579      024D2A00 
 580 1af8 3D68     		LDR	WP,[DSP]
 581 1afa 86FB0523 		SMULL	T2,T3,TOS,WP
 582 1afe 3A60     		STR	T2,[DSP]
 583 1b00 1E46     		MOV	TOS,T3
 584 1b02 1BE6     		_NEXT 
 585              	
 586              	/***************************
ARM GAS  forth.s 			page 78


 587              	    1+	 ( w -- w+1 )
 588              	 	Add 1.
 589              	***************************/
 590 1b04 F41A0000 		_HEADER ONEP,2,"1+"
 590      02312B00 
 591 1b0c 06F10106 		ADD	TOS,TOS,#1
 592 1b10 14E6     		_NEXT 
 593              	
 594              	/***************************
 595              	    1-	 ( w -- w-1 )
 596              	 	Subtract 1.
 597              	***************************/
 598 1b12 081B0000 		_HEADER ONEM,2,"1-"
 598      02312D00 
 598      00BF
 599 1b1c A6F10106 		SUB	TOS,TOS,#1
 600 1b20 0CE6     		_NEXT 
 601              	
 602              	/***************************
 603              	    2+	 ( w -- w+2 )
 604              	 	Add 2.
 605              	**************************/
 606 1b22 161B0000 		_HEADER TWOP,2,"2+"
 606      02322B00 
 606      00BF
 607 1b2c 06F10206 		ADD	TOS,TOS,#2
 608 1b30 04E6     		_NEXT
 609              	
 610              	/**************************
 611              	    2-	 ( w -- w-2 )
 612              	 	Subtract 2.
 613              	**************************/
 614 1b32 261B0000 		_HEADER TWOM,2,"2-"
 614      02322D00 
 614      00BF
 615 1b3c A6F10206 		SUB	TOS,TOS,#2
 616 1b40 FCE5     		_NEXT
 617              	
 618              	/***************************
 619              	    CELL+	( w -- w+4 )
 620              	 	Add CELLL.
 621              	***************************/
 622 1b42 361B0000 		_HEADER CELLP,5,"CELL+"
 622      0543454C 
 622      4C2B
 623 1b4c 06F10406 		ADD	TOS,TOS,#CELLL
 624 1b50 F4E5     		_NEXT
 625              	
 626              	/***************************
 627              	    CELL-	( w -- w-4 )
 628              	 	Subtract CELLL.
 629              	**************************/
 630 1b52 461B0000 		_HEADER CELLM,5,"CELL-"
 630      0543454C 
 630      4C2D
 631 1b5c A6F10406 		SUB	TOS,TOS,#CELLL
 632 1b60 ECE5     		_NEXT
ARM GAS  forth.s 			page 79


 633              	
 634              	/**************************** 
 635              	    BL	( -- 32 )
 636              	 	Blank (ASCII space).
 637              	*****************************/
 638 1b62 561B0000 		_HEADER BLANK,2,"BL"
 638      02424C00 
 638      00BF
 639 1b6c 47F8046D 		_PUSH
 640 1b70 4FF02006 		MOV	TOS,#32
 641 1b74 E2E5     		_NEXT 
 642              	
 643              	/**************************
 644              	    CELLS	( w -- w*4 )
 645              	 	Multiply CELLL 
 646              	***************************/
 647 1b76 661B0000 		_HEADER CELLS,5,"CELLS"
 647      0543454C 
 647      4C53
 648 1b80 4FEA8606 		LSL TOS,#2
 649 1b84 DAE5     		_NEXT
 650              	
 651              	/***************************
 652              	    CELL/	( w -- w/4 )
 653              	 	Divide by CELLL.
 654              	***************************/
 655 1b86 7A1B0000 		_HEADER CELLSL,5,"CELL/"
 655      0543454C 
 655      4C2F
 656 1b90 4FEAA606 		ASR TOS,#2
 657 1b94 D2E5     		_NEXT
 658              	
 659              	/*************************
 660              	    2*	( w -- w*2 )
 661              	 	Multiply 2.
 662              	*************************/
 663 1b96 8A1B0000 		_HEADER TWOST,2,"2*"
 663      02322A00 
 663      00BF
 664 1ba0 4FEA4606 		MOV	TOS,TOS,LSL#1
 665 1ba4 CAE5     		_NEXT
 666              	
 667              	/*************************
 668              	    2/	( w -- w/2 )
 669              	 	Divide by 2.
 670              	***********************/
 671 1ba6 9A1B0000 		_HEADER TWOSL,2,"2/"
 671      02322F00 
 671      00BF
 672 1bb0 4FEA6606 		MOV	TOS,TOS,ASR#1
 673 1bb4 C2E5     		_NEXT
 674              	
 675              	/****************************
 676              	    ?DUP	( w -- w w | 0 )
 677              	 	Conditional duplicate.
 678              	*****************************/
 679 1bb6 AA1B0000 		_HEADER QDUP,4,"?DUP"
ARM GAS  forth.s 			page 80


 679      043F4455 
 679      5000
 680 1bc0 3500     		MOVS	WP,TOS
 681 1bc2 18BF     		IT NE 
 682 1bc4 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 683 1bc8 B8E5     		_NEXT
 684              	
 685              	/***********************************
 686              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 687              	 	Rotate top 3 items.
 688              	*************************************/
 689 1bca BA1B0000 		_HEADER ROT,3,"ROT"
 689      03524F54 
 689      00BF
 690 1bd4 3868     		LDR	T0,[DSP]  // w2 
 691 1bd6 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 692 1bd8 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 693 1bda 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 694 1bdc AEE5     		_NEXT
 695              	
 696              	/*********************************
 697              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 698              	 left rotate top 3 elements 
 699              	********************************/
 700 1bde CE1B0000 		_HEADER NROT,4,"-ROT"
 700      042D524F 
 700      5400
 701 1be8 7868     		LDR T0,[DSP,#4]
 702 1bea 7E60     		STR TOS,[DSP,#4]	
 703 1bec 3E68     		LDR TOS,[DSP]
 704 1bee 3860     		STR T0,[DSP]
 705 1bf0 A4E5     		_NEXT 
 706              	
 707              	/*********************************
 708              	    2DROP	( w1 w2 -- )
 709              	 	Drop top 2 items.
 710              	*********************************/
 711 1bf2 E21B0000 		_HEADER DDROP,5,"2DROP"
 711      05324452 
 711      4F50
 712 1bfc 57F8046B 		_POP
 713 1c00 57F8046B 		_POP
 714 1c04 9AE5     		_NEXT 
 715              	
 716              	/********************************
 717              		3DROP ( w1 w2 w3 -- )
 718              		drop top 3 items 
 719              	********************************/
 720 1c06 F61B0000 		_HEADER TDROP,5,"3DROP"
 720      05334452 
 720      4F50
 721 1c10 07F10807 	    add DSP,#8 
 722 1c14 57F8046B 	    _POP 
 723 1c18 90E5     	    _NEXT 
 724              	
 725              	/***********************************
 726              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
ARM GAS  forth.s 			page 81


 727              	 	Duplicate top 2 items.
 728              	************************************/
 729 1c1a 0A1C0000 		_HEADER DDUP,4,"2DUP"
 729      04324455 
 729      5000
 730 1c24 3868     		LDR	T0,[DSP] // w1
 731 1c26 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 732 1c2a 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 733 1c2e 85E5     		_NEXT
 734              	
 735              	/******************************
 736              	    D+	( d1 d2 -- d3 )
 737              	 	Add top 2 double numbers.
 738              	******************************/
 739 1c30 1E1C0000 		_HEADER DPLUS,2,"D+"
 739      02442B00 
 740 1c38 57F8045B 		LDR	WP,[DSP],#4
 741 1c3c 57F8042B 		LDR	T2,[DSP],#4
 742 1c40 3B68     		LDR	T3,[DSP]
 743 1c42 ED18     		ADDS	WP,WP,T3
 744 1c44 3D60     		STR	WP,[DSP]
 745 1c46 46EB0206 		ADC	TOS,TOS,T2
 746 1c4a 77E5     		_NEXT
 747              	
 748              	/*****************************
 749              	    NOT	 ( w -- !w )
 750              	 	1"s complement.
 751              	*****************************/
 752 1c4c 341C0000 		_HEADER INVER,3,"NOT"
 752      034E4F54 
 753 1c54 6FEA0606 		MVN	TOS,TOS
 754 1c58 70E5     		_NEXT
 755              	
 756              	/*****************************
 757              	    NEGATE	( w -- -w )
 758              	 	2's complement.
 759              	***************************/
 760 1c5a 501C0000 		_HEADER NEGAT,6,"NEGATE"
 760      064E4547 
 760      41544500 
 760      00BF
 761 1c68 C6F10006 		RSB	TOS,TOS,#0
 762 1c6c 66E5     		_NEXT
 763              	
 764              	/***************************
 765              	    ABS	 ( w -- |w| )
 766              	 	Absolute.
 767              	**************************/
 768 1c6e 5E1C0000 		_HEADER ABSS,3,"ABS"
 768      03414253 
 768      00BF
 769 1c78 16F0004F 		TST	TOS,#0x80000000
 770 1c7c 18BF     		IT NE
 771 1c7e 7642     	    RSBNE   TOS,TOS,#0
 772 1c80 5CE5     		_NEXT
 773              	
 774              	/*******************
ARM GAS  forth.s 			page 82


 775              	  0= ( w -- f )
 776              	 TOS==0?
 777              	*******************/
 778 1c82 721C0000 		_HEADER ZEQUAL,2,"0="
 778      02303D00 
 778      00BF
 779 1c8c 16B9     		cbnz TOS,1f
 780 1c8e 4FF0FF36 		mov TOS,#-1
 781 1c92 53E5     		_NEXT 
 782 1c94 86EA0606 	1:  eor TOS,TOS,TOS  
 783 1c98 50E5     		_NEXT 	
 784              	
 785              	/*********************
 786              	    =	 ( w w -- t )
 787              	 	Equal?
 788              	*********************/
 789 1c9a 861C0000 		_HEADER EQUAL,1,"="
 789      013D
 790 1ca0 57F8045B 		LDR	WP,[DSP],#4
 791 1ca4 AE42     		CMP	TOS,WP
 792 1ca6 0CBF     		ITE EQ 
 793 1ca8 6FF00006 	    MVNEQ	TOS,#0
 794 1cac 0026     		MOVNE	TOS,#0
 795 1cae 45E5     		_NEXT
 796              	
 797              	/************************
 798              	    U<	 ( w w -- t )
 799              	 	Unsigned less?
 800              	*************************/
 801 1cb0 9E1C0000 		_HEADER ULESS,2,"U<"
 801      02553C00 
 802 1cb8 57F8045B 		LDR	WP,[DSP],#4
 803 1cbc B542     		CMP	WP,TOS
 804 1cbe 34BF     		ITE CC 
 805 1cc0 6FF00006 		MVNCC	TOS,#0
 806 1cc4 0026     		MOVCS	TOS,#0
 807 1cc6 39E5     		_NEXT
 808              	
 809              	/**********************
 810              	    <	( w w -- t )
 811              	 	Less?
 812              	**********************/
 813 1cc8 B41C0000 		_HEADER LESS,1,"<"
 813      013C00BF 
 814 1cd0 57F8045B 		LDR	WP,[DSP],#4
 815 1cd4 B542     		CMP	WP,TOS
 816 1cd6 B4BF     	    ITE LT
 817 1cd8 6FF00006 		MVNLT	TOS,#0
 818 1cdc 0026     		MOVGE	TOS,#0
 819 1cde 2DE5     		_NEXT 
 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 1ce0 CC1C0000 		_HEADER GREAT,1,">"
 825      013E00BF 
ARM GAS  forth.s 			page 83


 826 1ce8 57F8045B 		LDR	WP,[DSP],#4
 827 1cec B542     		CMP	WP,TOS
 828 1cee CCBF     		ITE GT
 829 1cf0 6FF00006 	    MVNGT	TOS,#0
 830 1cf4 0026     		MOVLE	TOS,#0
 831 1cf6 21E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 1cf8 E41C0000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 1d00 57F8045B 		LDR	WP,[DSP],#4
 839 1d04 B542     		CMP	WP,TOS
 840 1d06 C8BF     		IT GT 
 841 1d08 2E46     		MOVGT	TOS,WP
 842 1d0a 17E5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
 846              	 	Leave minimum.
 847              	**************************/
 848 1d0c FC1C0000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 1d14 57F8045B 		LDR	WP,[DSP],#4
 850 1d18 B542     		CMP	WP,TOS
 851 1d1a B8BF     		IT LT
 852 1d1c 2E46     		MOVLT	TOS,WP
 853 1d1e 0DE5     		_NEXT
 854              	
 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 1d20 101D0000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 1d28 57F8045B 		LDR	WP,[DSP],#4
 861 1d2c 3268     		LDR	T2,[TOS]
 862 1d2e 2A44     		ADD	T2,T2,WP
 863 1d30 3260     		STR	T2,[TOS]
 864 1d32 57F8046B 		_POP
 865 1d36 01E5     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 1d38 241D0000 		_HEADER DSTOR,2,"2!"
 871      02322100 
 872 1d40 57F8045B 		LDR	WP,[DSP],#4
 873 1d44 57F8042B 		LDR	T2,[DSP],#4
 874 1d48 46F8045B 		STR	WP,[TOS],#4
 875 1d4c 3260     		STR	T2,[TOS]
 876 1d4e 57F8046B 		_POP
 877 1d52 F3E4     		_NEXT
 878              	
ARM GAS  forth.s 			page 84


 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 1d54 3C1D0000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 1d5c 7568     		LDR	WP,[TOS,#4]
 885 1d5e 47F8045D 		STR	WP,[DSP,#-4]!
 886 1d62 3668     		LDR	TOS,[TOS]
 887 1d64 EAE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 1d66 581D0000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 1d70 16F8015B 		LDRB	WP,[TOS],#1
 895 1d74 47F8046D 		_PUSH
 896 1d78 2E46     		MOV	TOS,WP
 897 1d7a DFE4     		_NEXT
 898              	
 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
 903 1d7c 6A1D0000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 1d88 3D68     		LDR	WP,[DSP]
 905 1d8a A2EB0202 		SUB	T2,T2,T2
 906 1d8e 551B     		SUBS WP,T2,WP
 907 1d90 62EB0606 		SBC	TOS,T2,TOS
 908 1d94 3D60     		STR	WP,[DSP]
 909 1d96 D1E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 1d98 47F8046D 		_PUSH
 922 1d9c 6646     		MOV TOS,IP
 923 1d9e 0CF1040C 		ADD IP,IP,#4 
 924 1da2 CEE4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
ARM GAS  forth.s 			page 85


 931              	DOCON:
 932 1da4 47F8046D 		_PUSH
 933 1da8 5CF8046B 		LDR.W TOS,[IP],#4 
 934 1dac C9E4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 1dae 801D0000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 1db8 47F8046D 		_PUSH 
 946 1dbc 04F10406 		ADD TOS,UP,#RNDSEED
 947 1dc0 BCE4     		_NEXT 	
 948              	
 949              	/****************************************
 950              	  MSEC ( -- a)
 951              	 return address of milliseconds counter
 952              	****************************************/
 953 1dc2 B21D0000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
 954 1dcc 47F8046D 	    _PUSH
 955 1dd0 04F10806 	    ADD TOS,UP,#TICKS
 956 1dd4 B2E4     	    _NEXT 
 957              	
 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 1dd6 C61D0000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 1de0 47F8046D 		 _PUSH 
 964 1de4 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 1de8 A8E4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 1dea DA1D0000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 1df4 47F8046D 		_PUSH
 973 1df8 04F11006 		ADD	TOS,UP,#BOOT 
 974 1dfc 9EE4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
ARM GAS  forth.s 			page 86


 980 1dfe EE1D0000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 1e08 47F8046D 		_PUSH
 982 1e0c 04F11C06 		ADD	TOS,UP,#NBASE
 983 1e10 94E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 1e12 47F8046D 		_PUSH
 992 1e16 04F12006 		ADD	TOS,UP,#TMP
 993 1e1a 8FE4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
 999 1e1c 021E0000 		_HEADER SPAN,4,"SPAN"
 999      04535041 
 999      4E0000BF 
 1000 1e28 47F8046D 		_PUSH
 1001 1e2c 04F12406 		ADD	TOS,UP,#CSPAN
 1002 1e30 84E4     		_NEXT
 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
 1007              	***********************************************************/
 1008 1e32 201E0000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 1e3c 47F8046D 		_PUSH
 1010 1e40 04F12806 		ADD	TOS,UP,#TOIN
 1011 1e44 7AE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 1e46 361E0000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 1e50 47F8046D 		_PUSH
 1020 1e54 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 1e58 70E4     		_NEXT
 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 1e5a 4A1E0000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
ARM GAS  forth.s 			page 87


 1027      414C
 1028 1e64 47F8046D 		_PUSH
 1029 1e68 04F13406 		ADD	TOS,UP,#EVAL
 1030 1e6c 66E4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 1e6e 5E1E0000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 1e78 47F8046D 		_PUSH
 1039 1e7c 04F13806 		ADD	TOS,UP,#HOLD
 1040 1e80 5CE4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
 1046              	**********************************/
 1047 1e82 721E0000 		_HEADER CNTXT,7,"CONTEXT"
 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
 1049 1e90 47F8046D 		_PUSH
 1050 1e94 04F13C06 		ADD	TOS,UP,#CTXT
 1051 1e98 50E4     		_NEXT
 1052              	
 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 1e9a 861E0000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 1ea4 47F8046D 		_PUSH
 1060 1ea8 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 1eac 46E4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 1eae 9E1E0000 		_HEADER FCP,3,"FCP"
 1068      03464350 
 1068      00BF
 1069 1eb8 47F8046D 		_PUSH 
 1070 1ebc 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 1ec0 3CE4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
ARM GAS  forth.s 			page 88


 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 1ec2 B21E0000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 1ecc 47F8046D 		_PUSH
 1080 1ed0 04F14806 		ADD	TOS,UP,#LASTN
 1081 1ed4 32E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 1ed6 C61E0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
 1092      522D4245 
 1092      47494E00 
 1092      00BF
 1093 1ee8 47F8046D 		_PUSH 
 1094 1eec 004E     		ldr TOS,USR_BGN_ADR 
 1095 1eee 25E4     		_NEXT 
 1096              	USR_BGN_ADR:
 1097 1ef0 12050020 	.word  DTOP 
 1098              	
 1099              	/*********************************
 1100              	  USER_END ( -- a )
 1101              	  where user area end in RAM 
 1102              	******************************/
 1103 1ef4 DA1E0000 		_HEADER USER_END,8,"USER-END"
 1103      08555345 
 1103      522D454E 
 1103      440000BF 
 1104 1f04 47F8046D 		_PUSH 
 1105 1f08 004E     		ldr TOS,USER_END_ADR 
 1106 1f0a 17E4     		_NEXT 
 1107              	USER_END_ADR:
 1108 1f0c FC800120 		.word DEND 
 1109              	
 1110              	
 1111              	/* *********************
 1112              	  Common functions
 1113              	***********************/
 1114              	
 1115              	/********************************
 1116              	    WITHIN	( u ul uh -- t )
 1117              	 	Return true if u is within 
 1118              		the range of ul and uh.
 1119              	********************************/
 1120 1f10 F81E0000 		_HEADER WITHI,6,"WITHIN"
 1120      06574954 
 1120      48494E00 
ARM GAS  forth.s 			page 89


 1121 1f1c 504700BF 		_NEST
 1122 1f20 111A0000 		_ADR	OVER
 1123 1f24 C11A0000 		_ADR	SUBB
 1124 1f28 95190000 		_ADR	TOR
 1125 1f2c C11A0000 		_ADR	SUBB
 1126 1f30 6D190000 		_ADR	RFROM
 1127 1f34 B91C0000 		_ADR	ULESS
 1128 1f38 43170000 		_UNNEST
 1129              	
 1130              	//  Divide
 1131              	
 1132              	/*************************************
 1133              	    UM/MOD	( udl udh u -- ur uq )
 1134              	 	Unsigned divide of a double by a 
 1135              		single. Return mod and quotient.
 1136              	**************************************/
 1137 1f3c 141F0000 		_HEADER UMMOD,6,"UM/MOD"
 1137      06554D2F 
 1137      4D4F4400 
 1138 1f48 4FF00103 		MOV	T3,#1
 1139 1f4c 57F8045B 		LDR	WP,[DSP],#4
 1140 1f50 3A68     		LDR	T2,[DSP]
 1141              	UMMOD0:
 1142 1f52 9218     		ADDS	T2,T2,T2
 1143 1f54 6D41     		ADCS	WP,WP,WP
 1144 1f56 04D3     		BCC	UMMOD1
 1145 1f58 A5EB0605 		SUB	WP,WP,TOS
 1146 1f5c 02F10102 		ADD	T2,T2,#1
 1147 1f60 04E0     		B UMMOD2
 1148              	UMMOD1:
 1149 1f62 AD1B     		SUBS	WP,WP,TOS 
 1150 1f64 28BF     		IT CS 
 1151 1f66 0132     		ADDCS	T2,T2,#1
 1152 1f68 00D2     		BCS	UMMOD2
 1153 1f6a 3544     		ADD	WP,WP,TOS
 1154              	UMMOD2:
 1155 1f6c DB18     		ADDS	T3,T3,T3
 1156 1f6e F0D3     		BCC	UMMOD0
 1157 1f70 1646     		MOV	TOS,T2
 1158 1f72 3D60     		STR	WP,[DSP]
 1159 1f74 FFF7E2BB 		_NEXT
 1160              	
 1161              	/****************************
 1162              	    M/MOD	( d n -- r q )
 1163              	 	Signed floored divide 
 1164              		of double by single. 
 1165              		Return mod and quotient.
 1166              	****************************/
 1167 1f78 401F0000 		_HEADER MSMOD,5,"M/MOD"
 1167      054D2F4D 
 1167      4F4400BF 
 1168 1f84 504700BF 		_NEST
 1169 1f88 ED190000 		_ADR	DUPP
 1170 1f8c 211A0000 		_ADR	ZLESS
 1171 1f90 ED190000 		_ADR	DUPP
 1172 1f94 95190000 		_ADR	TOR
 1173 1f98 FB180000 		_QBRAN MMOD1
ARM GAS  forth.s 			page 90


 1173      B01F0000 
 1174 1fa0 691C0000 		_ADR	NEGAT
 1175 1fa4 95190000 		_ADR	TOR
 1176 1fa8 891D0000 		_ADR	DNEGA
 1177 1fac 6D190000 		_ADR	RFROM
 1178              	MMOD1:
 1179 1fb0 95190000 		_ADR	TOR
 1180 1fb4 ED190000 		_ADR	DUPP
 1181 1fb8 211A0000 		_ADR	ZLESS
 1182 1fbc FB180000 		_QBRAN MMOD2
 1182      CC1F0000 
 1183 1fc4 81190000 		_ADR	RAT
 1184 1fc8 B11A0000 		_ADR	PLUS
 1185              	MMOD2:
 1186 1fcc 6D190000 		_ADR	RFROM
 1187 1fd0 491F0000 		_ADR	UMMOD
 1188 1fd4 6D190000 		_ADR	RFROM
 1189 1fd8 FB180000 		_QBRAN	MMOD3
 1189      EC1F0000 
 1190 1fe0 FD190000 		_ADR	SWAP
 1191 1fe4 691C0000 		_ADR	NEGAT
 1192 1fe8 FD190000 		_ADR	SWAP
 1193              	MMOD3:   
 1194 1fec 43170000 		_UNNEST
 1195              	
 1196              	/****************************
 1197              	   /MOD	( n n -- r q )
 1198              		Signed divide. Return
 1199              		mod and quotient.
 1200              	****************************/
 1201 1ff0 7C1F0000 		_HEADER SLMOD,4,"/MOD"
 1201      042F4D4F 
 1201      440000BF 
 1202 1ffc 504700BF 		_NEST
 1203 2000 111A0000 		_ADR	OVER
 1204 2004 211A0000 		_ADR	ZLESS
 1205 2008 FD190000 		_ADR	SWAP
 1206 200c 851F0000 		_ADR	MSMOD
 1207 2010 43170000 		_UNNEST
 1208              	
 1209              	/**************************
 1210              	    MOD	 ( n n -- r )
 1211              	 	Signed divide. Return
 1212              		mod only.
 1213              	**************************/
 1214 2014 F41F0000 		_HEADER MODD,3,"MOD"
 1214      034D4F44 
 1215 201c 504700BF 		_NEST
 1216 2020 FD1F0000 		_ADR	SLMOD
 1217 2024 DD190000 		_ADR	DROP
 1218 2028 43170000 		_UNNEST
 1219              	
 1220              	/*************************
 1221              	    /	   ( n n -- q )
 1222              	 	Signed divide. Return
 1223              		quotient only.
 1224              	**************************/
ARM GAS  forth.s 			page 91


 1225 202c 18200000 		_HEADER SLASH,1,"/"
 1225      012F00BF 
 1226 2034 504700BF 		_NEST
 1227 2038 FD1F0000 		_ADR	SLMOD
 1228 203c FD190000 		_ADR	SWAP
 1229 2040 DD190000 		_ADR	DROP
 1230 2044 43170000 		_UNNEST
 1231              	
 1232              	//******************************
 1233              	//  */MOD	( n1 n2 n3 -- r q )
 1234              	/* 	Multiply n1 and n2, then 
 1235              		divide by n3. Return 
 1236              		mod and quotient.
 1237              	******************************/
 1238 2048 30200000 		_HEADER SSMOD,5,"*/MOD"
 1238      052A2F4D 
 1238      4F4400BF 
 1239 2054 504700BF 		_NEST
 1240 2058 95190000 		_ADR	TOR
 1241 205c F91A0000 		_ADR	MSTAR
 1242 2060 6D190000 		_ADR	RFROM
 1243 2064 851F0000 		_ADR	MSMOD
 1244 2068 43170000 		_UNNEST
 1245              	
 1246              	//*******************************
 1247              	//  */ ( n1 n2 n3 -- q )
 1248              	/* 	Multiply n1 by n2, then 
 1249              		divide by n3. Return quotient
 1250              		only.
 1251              	*******************************/
 1252 206c 4C200000 		_HEADER STASL,2,"*/"
 1252      022A2F00 
 1253 2074 504700BF 		_NEST
 1254 2078 55200000 		_ADR	SSMOD
 1255 207c FD190000 		_ADR	SWAP
 1256 2080 DD190000 		_ADR	DROP
 1257 2084 43170000 		_UNNEST
 1258              	
 1259              	/*******************
 1260              	  Miscellaneous
 1261              	*******************/
 1262              	
 1263              	/*************************
 1264              	    ALIGNED	( b -- a )
 1265              	 	Align address to the 
 1266              		cell boundary.
 1267              	**************************/
 1268 2088 70200000 		_HEADER ALGND,7,"ALIGNED"
 1268      07414C49 
 1268      474E4544 
 1269 2094 06F10306 		ADD	TOS,TOS,#3
 1270 2098 6FF00305 		MVN	WP,#3
 1271 209c 06EA0506 		AND	TOS,TOS,WP
 1272 20a0 FFF74CBB 		_NEXT
 1273              	
 1274              	/****************************
 1275              	    >CHAR	( c -- c )
ARM GAS  forth.s 			page 92


 1276              	 	Filter non-printing 
 1277              		characters.
 1278              	****************************/
 1279 20a4 8C200000 		_HEADER TCHAR,5,">CHAR"
 1279      053E4348 
 1279      415200BF 
 1280 20b0 504700BF 		_NEST
 1281 20b4 BB180000 		_DOLIT  0x7F
 1281      7F000000 
 1282 20bc 311A0000 		_ADR	ANDD
 1283 20c0 ED190000 		_ADR	DUPP	// mask msb
 1284 20c4 6D1B0000 		_ADR	BLANK
 1285 20c8 BB180000 		_DOLIT 	127
 1285      7F000000 
 1286 20d0 1D1F0000 		_ADR	WITHI	// check for printable
 1287 20d4 551C0000 		_ADR	INVER
 1288 20d8 FB180000 		_QBRAN	TCHA1
 1288      EC200000 
 1289 20e0 DD190000 		_ADR	DROP
 1290 20e4 BB180000 		_DOLIT 	'_'	// replace non-printables
 1290      5F000000 
 1291              	TCHA1:
 1292 20ec 43170000 		  _UNNEST
 1293              	
 1294              	/************************
 1295              	    DEPTH	( -- n )
 1296              	 	Return the depth of
 1297              		the data stack.
 1298              	***********************/
 1299 20f0 A8200000 		_HEADER DEPTH,5,"DEPTH"
 1299      05444550 
 1299      544800BF 
 1300 20fc 4FF47F42 		_MOV32 T2,SPP 
 1300      C2F20102 
 1301 2104 A2EB0702 		SUB	T2,T2,DSP
 1302 2108 47F8046D 		_PUSH
 1303 210c 4FEAA206 		ASR	TOS,T2,#2
 1304 2110 FFF714BB 		_NEXT
 1305              	
 1306              	/*****************************
 1307              	    PICK	( ... +n -- ... w )
 1308              	 	Copy the nth stack item 
 1309              		to tos.
 1310              	******************************/
 1311 2114 F4200000 		_HEADER PICK,4,"PICK"
 1311      04504943 
 1311      4B0000BF 
 1312 2120 504700BF 		_NEST
 1313 2124 0D1B0000 		_ADR	ONEP
 1314 2128 811B0000 		_ADR	CELLS
 1315 212c C9190000 		_ADR	SPAT
 1316 2130 B11A0000 		_ADR	PLUS
 1317 2134 41190000 		_ADR	AT
 1318 2138 43170000 		_UNNEST
 1319              	
 1320              	/*********************
 1321              	  Memory access
ARM GAS  forth.s 			page 93


 1322              	*********************/
 1323              	
 1324              	/*************************
 1325              	    HERE	( -- a )
 1326              	 	Return the top of
 1327              		the code dictionary.
 1328              	*************************/
 1329 213c 18210000 		_HEADER HERE,4,"HERE"
 1329      04484552 
 1329      450000BF 
 1330 2148 504700BF 		_NEST
 1331 214c A51E0000 		_ADR	CPP
 1332 2150 41190000 		_ADR	AT
 1333 2154 43170000 		_UNNEST
 1334              	
 1335              	/***************************	
 1336              	    PAD	 ( -- a )
 1337              	 	Return the address of 
 1338              		a temporary buffer.
 1339              	***************************/
 1340 2158 40210000 		_HEADER PAD,3,"PAD"
 1340      03504144 
 1341 2160 504700BF 		_NEST
 1342 2164 49210000 		_ADR	HERE
 1343 2168 BB180000 		_DOLIT 80
 1343      50000000 
 1344 2170 B11A0000 		_ADR PLUS 
 1345 2174 43170000 		_UNNEST
 1346              	
 1347              	/***********************
 1348              	    TIB	 ( -- a )
 1349              	 	Return the address 
 1350              		of the terminal 
 1351              		input buffer.
 1352              	************************/
 1353 2178 5C210000 		_HEADER TIB,3,"TIB"
 1353      03544942 
 1354 2180 47F8046D 		_PUSH
 1355 2184 266B     		ldr TOS,[UP,#TIBUF]
 1356 2186 FFF7D9BA 		_NEXT
 1357              	
 1358              	/*************************
 1359              	    @EXECUTE	( a -- )
 1360              	 	Execute vector stored
 1361              		in address a.
 1362              	*************************/
 1363 218a 7C210000 		_HEADER ATEXE,8,"@EXECUTE"
 1363      08404558 
 1363      45435554 
 1363      4500
 1364 2198 3500     		MOVS	WP,TOS
 1365 219a 57F8046B 		_POP
 1366 219e 2D68     		LDR	WP,[WP]
 1367 21a0 45F00105 		ORR	WP,WP,#1
 1368 21a4 18BF     	    IT NE 
 1369 21a6 2847     		BXNE	WP
 1370 21a8 FFF7C8BA 		_NEXT
ARM GAS  forth.s 			page 94


 1371              	
 1372              	/*******************************
 1373              	    CMOVE	( b1 b2 u -- )
 1374              	 	Copy u bytes from b1 to b2.
 1375              	********************************/
 1376 21ac 8E210000 		_HEADER CMOVE,5,"CMOVE"
 1376      05434D4F 
 1376      564500BF 
 1377 21b8 57F8042B 		LDR	T2,[DSP],#4
 1378 21bc 57F8043B 		LDR	T3,[DSP],#4
 1379 21c0 03E0     		B CMOV1
 1380              	CMOV0:
 1381 21c2 13F8015B 		LDRB	WP,[T3],#1
 1382 21c6 02F8015B 		STRB	WP,[T2],#1
 1383              	CMOV1:
 1384 21ca 3600     		MOVS	TOS,TOS
 1385 21cc 02D0     		BEQ	CMOV2
 1386 21ce A6F10106 		SUB	TOS,TOS,#1
 1387 21d2 F6E7     		B CMOV0
 1388              	CMOV2:
 1389 21d4 57F8046B 		_POP
 1390 21d8 FFF7B0BA 		_NEXT
 1391              	
 1392              	/***************************
 1393              	    MOVE	( a1 a2 u -- )
 1394              	 	Copy u words from a1 to a2.
 1395              	*******************************/
 1396 21dc B0210000 		_HEADER MOVE,4,"MOVE"
 1396      044D4F56 
 1396      450000BF 
 1397 21e8 26F00306 		AND	TOS,TOS,#-4
 1398 21ec 57F8042B 		LDR	T2,[DSP],#4
 1399 21f0 57F8043B 		LDR	T3,[DSP],#4
 1400 21f4 03E0     		B MOVE1
 1401              	MOVE0:
 1402 21f6 53F8045B 		LDR	WP,[T3],#4
 1403 21fa 42F8045B 		STR	WP,[T2],#4
 1404              	MOVE1:
 1405 21fe 3600     		MOVS	TOS,TOS
 1406 2200 02D0     		BEQ	MOVE2
 1407 2202 A6F10406 		SUB	TOS,TOS,#4
 1408 2206 F6E7     		B MOVE0
 1409              	MOVE2:
 1410 2208 57F8046B 		_POP
 1411 220c FFF796BA 		_NEXT
 1412              	
 1413              	/**************************
 1414              	    FILL	( b u c -- )
 1415              	 	Fill u bytes of character
 1416              		c to area beginning at b.
 1417              	******************************/
 1418 2210 E0210000 		_HEADER FILL,4,"FILL"
 1418      0446494C 
 1418      4C0000BF 
 1419 221c 03CF     		LDMFD DSP!,{T0,T1} 
 1420 221e 0000     		MOVS T0,T0 
 1421 2220 03D0     		BEQ FILL2
ARM GAS  forth.s 			page 95


 1422              	FILL1:
 1423 2222 01F8016B 		STRB	TOS,[T1],#1
 1424 2226 0138     		SUBS	T0,T0,#1
 1425 2228 FBD1     		BNE FILL1
 1426              	FILL2:
 1427 222a 57F8046B 		_POP
 1428 222e FFF785BA 		_NEXT
 1429              	
 1430              	/*****************************
 1431              	    PACK$	( b u a -- a )
 1432              	 	Build a counted word with
 1433              		u characters from b. 
 1434              		Null fill.
 1435              	*****************************/
 1436 2232 14220000 		_HEADER PACKS,5,"PACK$"
 1436      05504143 
 1436      4B24
 1437 223c 504700BF 		_NEST
 1438 2240 95200000 		_ADR	ALGND
 1439 2244 ED190000 		_ADR	DUPP
 1440 2248 95190000 		_ADR	TOR			// strings only on cell boundary
 1441 224c 111A0000 		_ADR	OVER
 1442 2250 B11A0000 		_ADR	PLUS
 1443 2254 0D1B0000 		_ADR	ONEP
 1444 2258 BB180000 		_DOLIT 	0xFFFFFFFC
 1444      FCFFFFFF 
 1445 2260 311A0000 		_ADR	ANDD			// count mod cell
 1446 2264 BB180000 		_DOLIT 	0
 1446      00000000 
 1447 226c FD190000 		_ADR	SWAP
 1448 2270 2D190000 		_ADR	STORE			// null fill cell
 1449 2274 81190000 		_ADR	RAT
 1450 2278 251C0000 		_ADR	DDUP
 1451 227c 4D190000 		_ADR	CSTOR
 1452 2280 0D1B0000 		_ADR	ONEP			// save count
 1453 2284 FD190000 		_ADR	SWAP
 1454 2288 B9210000 		_ADR	CMOVE
 1455 228c 6D190000 		_ADR	RFROM
 1456 2290 43170000 		_UNNEST   			// move string
 1457              	
 1458              	/***********************************
 1459              	  Numeric output, single precision
 1460              	***********************************/
 1461              	
 1462              	/**************************
 1463              	    DIGIT	( u -- c )
 1464              	 	Convert digit u to 
 1465              		a character.
 1466              	***************************/
 1467 2294 36220000 		_HEADER DIGIT,5,"DIGIT"
 1467      05444947 
 1467      495400BF 
 1468 22a0 504700BF 		_NEST
 1469 22a4 BB180000 		_DOLIT 9
 1469      09000000 
 1470 22ac 111A0000 		_ADR	OVER
 1471 22b0 D11C0000 		_ADR	LESS
ARM GAS  forth.s 			page 96


 1472 22b4 BB180000 		_DOLIT	7
 1472      07000000 
 1473 22bc 311A0000 		_ADR	ANDD
 1474 22c0 B11A0000 		_ADR	PLUS
 1475 22c4 BB180000 		_DOLIT	'0'
 1475      30000000 
 1476 22cc B11A0000 		_ADR	PLUS 
 1477 22d0 43170000 		_UNNEST
 1478              	
 1479              	/*********************************
 1480              	    EXTRACT	( n base -- n c )
 1481              	 	Extract the least significant
 1482              		digit from n.
 1483              	**********************************/
 1484 22d4 98220000 		_HEADER EXTRC,7,"EXTRACT"
 1484      07455854 
 1484      52414354 
 1485 22e0 504700BF 		_NEST
 1486 22e4 BB180000 		_DOLIT 0
 1486      00000000 
 1487 22ec FD190000 		_ADR	SWAP
 1488 22f0 491F0000 		_ADR	UMMOD
 1489 22f4 FD190000 		_ADR	SWAP
 1490 22f8 A1220000 		_ADR	DIGIT
 1491 22fc 43170000 		_UNNEST
 1492              	
 1493              	/***************************
 1494              	    <#	  ( -- )
 1495              	 	Initiate the numeric
 1496              		output process.
 1497              	****************************/
 1498 2300 D8220000 		_HEADER BDIGS,2,"<#"
 1498      023C2300 
 1499 2308 504700BF 		_NEST
 1500 230c 61210000 		_ADR	PAD
 1501 2310 791E0000 		_ADR	HLD
 1502 2314 2D190000 		_ADR	STORE
 1503 2318 43170000 		_UNNEST
 1504              	
 1505              	/*********************************
 1506              	    HOLD	( c -- )
 1507              	 	Insert a character into the 
 1508              		numeric output string.
 1509              	**********************************/
 1510 231c 04230000 		_HEADER HOLD,4,"HOLD"
 1510      04484F4C 
 1510      440000BF 
 1511 2328 504700BF 		_NEST
 1512 232c 791E0000 		_ADR	HLD
 1513 2330 41190000 		_ADR	AT
 1514 2334 1D1B0000 		_ADR	ONEM
 1515 2338 ED190000 		_ADR	DUPP
 1516 233c 791E0000 		_ADR	HLD
 1517 2340 2D190000 		_ADR	STORE
 1518 2344 4D190000 		_ADR	CSTOR
 1519 2348 43170000 		_UNNEST
 1520              	
ARM GAS  forth.s 			page 97


 1521              	/***********************
 1522              	    #	   ( u -- u )
 1523              	 	Extract one digit 
 1524              		from u and append 
 1525              		the digit to output 
 1526              		string.
 1527              	*************************/
 1528 234c 20230000 		_HEADER DIG,1,"#"
 1528      012300BF 
 1529 2354 504700BF 		_NEST
 1530 2358 091E0000 		_ADR	BASE
 1531 235c 41190000 		_ADR	AT
 1532 2360 E1220000 		_ADR	EXTRC
 1533 2364 29230000 		_ADR	HOLD
 1534 2368 43170000 		_UNNEST
 1535              	
 1536              	/***************************
 1537              	    #S	  ( u -- 0 )
 1538              	 	Convert u until all 
 1539              		digits are added to 
 1540              		the output string.
 1541              	***************************/
 1542 236c 50230000 		_HEADER DIGS,2,"#S"
 1542      02235300 
 1543 2374 504700BF 		_NEST
 1544              	DIGS1:
 1545 2378 55230000 	    _ADR	DIG
 1546 237c ED190000 		_ADR	DUPP
 1547 2380 FB180000 		_QBRAN 	DIGS2
 1547      90230000 
 1548 2388 0F190000 		_BRAN	DIGS1
 1548      78230000 
 1549              	DIGS2:
 1550 2390 43170000 		  _UNNEST
 1551              	
 1552              	/*********************
 1553              	    SIGN	( n -- )
 1554              	 	Add a minus sign
 1555              		to the numeric
 1556              		output string.
 1557              	*********************/
 1558 2394 70230000 		_HEADER SIGN,4,"SIGN"
 1558      04534947 
 1558      4E0000BF 
 1559 23a0 504700BF 		_NEST
 1560 23a4 211A0000 		_ADR	ZLESS
 1561 23a8 FB180000 		_QBRAN	SIGN1
 1561      BC230000 
 1562 23b0 BB180000 		_DOLIT '-'
 1562      2D000000 
 1563 23b8 29230000 		_ADR	HOLD
 1564              	SIGN1:
 1565 23bc 43170000 		  _UNNEST
 1566              	
 1567              	/*************************
 1568              	    #>  ( w -- b u )
 1569              	 	Prepare the output 
ARM GAS  forth.s 			page 98


 1570              		word to be TYPE'd.
 1571              	************************/
 1572 23c0 98230000 		_HEADER EDIGS,2,"#>"
 1572      02233E00 
 1573 23c8 504700BF 		_NEST
 1574 23cc DD190000 		_ADR	DROP
 1575 23d0 791E0000 		_ADR	HLD
 1576 23d4 41190000 		_ADR	AT
 1577 23d8 61210000 		_ADR	PAD
 1578 23dc 111A0000 		_ADR	OVER
 1579 23e0 C11A0000 		_ADR	SUBB
 1580 23e4 43170000 		_UNNEST
 1581              	
 1582              	/**************************
 1583              	    str	 ( n -- b u )
 1584              	 	Convert a signed 
 1585              		integer to a numeric 
 1586              		string.
 1587              	hidden word used by compiler
 1588              	***************************/
 1589              	STRR:
 1590 23e8 504700BF 		_NEST
 1591 23ec ED190000 		_ADR	DUPP
 1592 23f0 95190000 		_ADR	TOR
 1593 23f4 791C0000 		_ADR	ABSS
 1594 23f8 09230000 		_ADR	BDIGS
 1595 23fc 75230000 		_ADR	DIGS
 1596 2400 6D190000 		_ADR	RFROM
 1597 2404 A1230000 		_ADR	SIGN
 1598 2408 C9230000 		_ADR	EDIGS
 1599 240c 43170000 		_UNNEST
 1600              	
 1601              	/*************************
 1602              	    HEX	 ( -- )
 1603              	 	Use radix 16 as 
 1604              		base for numeric 
 1605              		conversions.
 1606              	*************************/
 1607 2410 C4230000 		_HEADER HEX,3,"HEX"
 1607      03484558 
 1608 2418 504700BF 		_NEST
 1609 241c BB180000 		_DOLIT 16
 1609      10000000 
 1610 2424 091E0000 		_ADR	BASE
 1611 2428 2D190000 		_ADR	STORE
 1612 242c 43170000 		_UNNEST
 1613              	
 1614              	/************************
 1615              	    DECIMAL	( -- )
 1616              	 	Use radix 10 as base
 1617              		for numeric conversions.
 1618              	*************************/
 1619 2430 14240000 		_HEADER DECIM,7,"DECIMAL"
 1619      07444543 
 1619      494D414C 
 1620 243c 504700BF 		_NEST
 1621 2440 BB180000 		_DOLIT 10
ARM GAS  forth.s 			page 99


 1621      0A000000 
 1622 2448 091E0000 		_ADR	BASE
 1623 244c 2D190000 		_ADR	STORE
 1624 2450 43170000 		_UNNEST
 1625              	
 1626              	/************************************
 1627              	  Numeric input, single precision
 1628              	***********************************/
 1629              	
 1630              	/***********************************
 1631              	    DIGIT?	( c base -- u t )
 1632              	 	Convert a character to its 
 1633              		numeric value. A flag 
 1634              		indicates success.
 1635              	**********************************/
 1636 2454 34240000 		_HEADER DIGTQ,6,"DIGIT?"
 1636      06444947 
 1636      49543F00 
 1637 2460 504700BF 		_NEST
 1638 2464 95190000 		_ADR	TOR
 1639 2468 BB180000 		_DOLIT 	'0'
 1639      30000000 
 1640 2470 C11A0000 		_ADR	SUBB
 1641 2474 BB180000 		_DOLIT 9
 1641      09000000 
 1642 247c 111A0000 		_ADR	OVER
 1643 2480 D11C0000 		_ADR	LESS
 1644 2484 FB180000 		_QBRAN	DGTQ1
 1644      AC240000 
 1645 248c BB180000 		_DOLIT 7
 1645      07000000 
 1646 2494 C11A0000 		_ADR	SUBB
 1647 2498 ED190000 		_ADR	DUPP
 1648 249c BB180000 		_DOLIT	10
 1648      0A000000 
 1649 24a4 D11C0000 		_ADR	LESS
 1650 24a8 451A0000 		_ADR	ORR
 1651              	DGTQ1:
 1652 24ac ED190000 		_ADR	DUPP
 1653 24b0 6D190000 		_ADR	RFROM
 1654 24b4 B91C0000 		_ADR	ULESS
 1655 24b8 43170000 		_UNNEST
 1656              	
 1657              	/**********************************
 1658              	    NUMBER?	( a -- n T | a F )
 1659              	 	Convert a number word to 
 1660              		integer. Push a flag on tos.
 1661              	**********************************/
 1662 24bc 58240000 		_HEADER NUMBQ,7,"NUMBER?"
 1662      074E554D 
 1662      4245523F 
 1663 24c8 504700BF 		_NEST
 1664 24cc 091E0000 		_ADR	BASE
 1665 24d0 41190000 		_ADR	AT
 1666 24d4 95190000 		_ADR	TOR
 1667 24d8 BB180000 		_DOLIT	0
 1667      00000000 
ARM GAS  forth.s 			page 100


 1668 24e0 111A0000 		_ADR	OVER
 1669 24e4 711D0000 		_ADR	COUNT
 1670 24e8 111A0000 		_ADR	OVER
 1671 24ec 61190000 		_ADR	CAT
 1672 24f0 BB180000 		_DOLIT '$'
 1672      24000000 
 1673 24f8 A11C0000 		_ADR	EQUAL
 1674 24fc FB180000 		_QBRAN	NUMQ1
 1674      18250000 
 1675 2504 19240000 		_ADR	HEX
 1676 2508 FD190000 		_ADR	SWAP
 1677 250c 0D1B0000 		_ADR	ONEP
 1678 2510 FD190000 		_ADR	SWAP
 1679 2514 1D1B0000 		_ADR	ONEM
 1680              	NUMQ1:
 1681 2518 111A0000 		_ADR	OVER
 1682 251c 61190000 		_ADR	CAT
 1683 2520 BB180000 		_DOLIT	'-'
 1683      2D000000 
 1684 2528 A11C0000 		_ADR	EQUAL
 1685 252c 95190000 		_ADR	TOR
 1686 2530 FD190000 		_ADR	SWAP
 1687 2534 81190000 		_ADR	RAT
 1688 2538 C11A0000 		_ADR	SUBB
 1689 253c FD190000 		_ADR	SWAP
 1690 2540 81190000 		_ADR	RAT
 1691 2544 B11A0000 		_ADR	PLUS
 1692 2548 C11B0000 		_ADR	QDUP
 1693 254c FB180000 		_QBRAN	NUMQ6
 1693      E0250000 
 1694 2554 1D1B0000 		_ADR	ONEM
 1695 2558 95190000 		_ADR	TOR
 1696              	NUMQ2:
 1697 255c ED190000 		_ADR	DUPP
 1698 2560 95190000 		_ADR	TOR
 1699 2564 61190000 		_ADR	CAT
 1700 2568 091E0000 		_ADR	BASE
 1701 256c 41190000 		_ADR	AT
 1702 2570 61240000 		_ADR	DIGTQ
 1703 2574 FB180000 		_QBRAN	NUMQ4
 1703      C4250000 
 1704 257c FD190000 		_ADR	SWAP
 1705 2580 091E0000 		_ADR	BASE
 1706 2584 41190000 		_ADR	AT
 1707 2588 D11A0000 		_ADR	STAR
 1708 258c B11A0000 		_ADR	PLUS
 1709 2590 6D190000 		_ADR	RFROM
 1710 2594 0D1B0000 		_ADR	ONEP
 1711 2598 DD180000 		_DONXT	NUMQ2
 1711      5C250000 
 1712 25a0 81190000 		_ADR	RAT
 1713 25a4 FD190000 		_ADR	SWAP
 1714 25a8 DD190000 		_ADR	DROP
 1715 25ac FB180000 		_QBRAN	NUMQ3
 1715      B8250000 
 1716 25b4 691C0000 		_ADR	NEGAT
 1717              	NUMQ3:
ARM GAS  forth.s 			page 101


 1718 25b8 FD190000 		_ADR	SWAP
 1719 25bc 0F190000 		_BRAN	NUMQ5
 1719      DC250000 
 1720              	NUMQ4:
 1721 25c4 6D190000 		_ADR	RFROM
 1722 25c8 6D190000 		_ADR	RFROM
 1723 25cc FD1B0000 		_ADR	DDROP
 1724 25d0 FD1B0000 		_ADR	DDROP
 1725 25d4 BB180000 		_DOLIT	0
 1725      00000000 
 1726              	NUMQ5:
 1727 25dc ED190000 		_ADR	DUPP
 1728              	NUMQ6:
 1729 25e0 6D190000 		_ADR	RFROM
 1730 25e4 FD1B0000 		_ADR	DDROP
 1731 25e8 6D190000 		_ADR	RFROM
 1732 25ec 091E0000 		_ADR	BASE
 1733 25f0 2D190000 		_ADR	STORE
 1734 25f4 43170000 		_UNNEST
 1735              	
 1736              	/********************
 1737              	  console I/O
 1738              	********************/
 1739              	
 1740              	/**********************
 1741              	    SPACE	( -- )
 1742              	 	Send the blank 
 1743              		character to 
 1744              		the output device.
 1745              	************************/
 1746 25f8 C0240000 		_HEADER SPACE,5,"SPACE"
 1746      05535041 
 1746      434500BF 
 1747 2604 504700BF 		_NEST
 1748 2608 6D1B0000 		_ADR	BLANK
 1749 260c C5170000 		_ADR	EMIT
 1750 2610 43170000 		_UNNEST
 1751              	
 1752              	/***************************
 1753              	    SPACES	( +n -- )
 1754              	 	Send n spaces to the 
 1755              		output device.
 1756              	****************************/
 1757 2614 FC250000 		_HEADER SPACS,6,"SPACES"
 1757      06535041 
 1757      43455300 
 1758 2620 504700BF 		_NEST
 1759 2624 BB180000 		_DOLIT	0
 1759      00000000 
 1760 262c 011D0000 		_ADR	MAX
 1761 2630 95190000 		_ADR	TOR
 1762 2634 0F190000 		_BRAN	CHAR2
 1762      40260000 
 1763              	CHAR1:
 1764 263c 05260000 		_ADR	SPACE
 1765              	CHAR2:
 1766 2640 DD180000 		_DONXT	CHAR1
ARM GAS  forth.s 			page 102


 1766      3C260000 
 1767 2648 43170000 		_UNNEST
 1768              	
 1769              	/***********************
 1770              	    TYPE	( b u -- )
 1771              	 	Output u characters 
 1772              		from b.
 1773              	************************/
 1774 264c 18260000 		_HEADER TYPEE,4,"TYPE"
 1774      04545950 
 1774      450000BF 
 1775 2658 504700BF 		_NEST
 1776 265c 95190000 		_ADR  TOR   // ( a+1 -- R: u )
 1777 2660 0F190000 		_BRAN	TYPE2
 1777      74260000 
 1778              	TYPE1:  
 1779 2668 711D0000 		_ADR  COUNT
 1780 266c B1200000 		_ADR TCHAR
 1781 2670 C5170000 		_ADR EMIT
 1782              	TYPE2:  
 1783 2674 DD180000 		_DONXT	TYPE1
 1783      68260000 
 1784 267c DD190000 		_ADR	DROP
 1785 2680 43170000 		_UNNEST
 1786              	
 1787              	/***************************
 1788              	    CR	  ( -- )
 1789              	 	Output a carriage return
 1790              		and a line feed.
 1791              	****************************/
 1792 2684 50260000 		_HEADER CR,2,"CR"
 1792      02435200 
 1793 268c 504700BF 		_NEST
 1794 2690 BB180000 		_DOLIT	CRR
 1794      0D000000 
 1795 2698 C5170000 		_ADR	EMIT
 1796 269c BB180000 		_DOLIT	LF
 1796      0A000000 
 1797 26a4 C5170000 		_ADR	EMIT
 1798 26a8 43170000 		_UNNEST
 1799              	
 1800              	/******************************************
 1801              	  do_$	( -- a )
 1802              	  Return the address of a compiled string.
 1803              	  adjust return address to skip over it.
 1804              	hidden word used by compiler. 
 1805              	******************************************/
 1806              	DOSTR:
 1807 26ac 504700BF 		_NEST     
 1808              	/* compiled string address is 2 levels deep */
 1809 26b0 6D190000 		_ADR	RFROM	// { -- a1 }
 1810 26b4 6D190000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1811 26b8 ED190000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1812 26bc 711D0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1813 26c0 B11A0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1814 26c4 95200000 		_ADR	ALGND	//  end of string
 1815              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
ARM GAS  forth.s 			page 103


 1816 26c8 95190000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1817 26cc FD190000 		_ADR	SWAP	//  count tugged
 1818 26d0 95190000 		_ADR	TOR     //  ( -- a2) is string address
 1819 26d4 43170000 		_UNNEST
 1820              	
 1821              	/******************************************
 1822              	    $"|	( -- a )
 1823              	 	Run time routine compiled by _". 
 1824              		Return address of a compiled string.
 1825              	hidden word used by compiler
 1826              	*****************************************/
 1827              	STRQP:
 1828 26d8 504700BF 		_NEST
 1829 26dc AD260000 		_ADR	DOSTR
 1830 26e0 43170000 		_UNNEST			// force a call to dostr
 1831              	
 1832              	/*******************************
 1833              	    .$	( a -- )
 1834              	 	Run time routine of ." 
 1835              		Output a compiled string.
 1836              	hidden word used by compiler
 1837              	*******************************/
 1838              	DOTST:
 1839 26e4 504700BF 		_NEST
 1840 26e8 711D0000 		_ADR	COUNT // ( -- a+1 c )
 1841 26ec 59260000 		_ADR	TYPEE
 1842 26f0 43170000 		_UNNEST
 1843              	
 1844              	/**********************
 1845              	    ."|	( -- )
 1846              	 	Run time routine of ." 
 1847              		Output a compiled string.
 1848              	hidden word used by compiler
 1849              	*****************************/
 1850              	DOTQP:
 1851 26f4 504700BF 		_NEST
 1852 26f8 AD260000 		_ADR	DOSTR
 1853 26fc E5260000 		_ADR	DOTST
 1854 2700 43170000 		_UNNEST
 1855              	
 1856              	/******************************
 1857              	    .R	  ( n +n -- )
 1858              	 	Display an integer in a 
 1859              		field of n columns, 
 1860              		right justified.
 1861              	*******************************/
 1862 2704 88260000 		_HEADER DOTR,2,".R"
 1862      022E5200 
 1863 270c 504700BF 		_NEST
 1864 2710 95190000 		_ADR	TOR
 1865 2714 E9230000 		_ADR	STRR
 1866 2718 6D190000 		_ADR	RFROM
 1867 271c 111A0000 		_ADR	OVER
 1868 2720 C11A0000 		_ADR	SUBB
 1869 2724 21260000 		_ADR	SPACS
 1870 2728 59260000 		_ADR	TYPEE
 1871 272c 43170000 		_UNNEST
ARM GAS  forth.s 			page 104


 1872              	
 1873              	/*************************
 1874              	    U.R	 ( u +n -- )
 1875              	 	Display an unsigned 
 1876              		integer in n column, 
 1877              		right justified.
 1878              	***************************/
 1879 2730 08270000 		_HEADER UDOTR,3,"U.R"
 1879      03552E52 
 1880 2738 504700BF 		_NEST
 1881 273c 95190000 		_ADR	TOR
 1882 2740 09230000 		_ADR	BDIGS
 1883 2744 75230000 		_ADR	DIGS
 1884 2748 C9230000 		_ADR	EDIGS
 1885 274c 6D190000 		_ADR	RFROM
 1886 2750 111A0000 		_ADR	OVER
 1887 2754 C11A0000 		_ADR	SUBB
 1888 2758 21260000 		_ADR	SPACS
 1889 275c 59260000 		_ADR	TYPEE
 1890 2760 43170000 		_UNNEST
 1891              	
 1892              	/************************
 1893              	    U.	  ( u -- )
 1894              	 	Display an unsigned 
 1895              		integer in free format.
 1896              	***************************/
 1897 2764 34270000 		_HEADER UDOT,2,"U."
 1897      02552E00 
 1898 276c 504700BF 		_NEST
 1899 2770 09230000 		_ADR	BDIGS
 1900 2774 75230000 		_ADR	DIGS
 1901 2778 C9230000 		_ADR	EDIGS
 1902 277c 05260000 		_ADR	SPACE
 1903 2780 59260000 		_ADR	TYPEE
 1904 2784 43170000 		_UNNEST
 1905              	
 1906              	/************************
 1907              	    .	   ( w -- )
 1908              	 	Display an integer 
 1909              		in free format, 
 1910              		preceeded by a space.
 1911              	**************************/
 1912 2788 68270000 		_HEADER DOT,1,"."
 1912      012E00BF 
 1913 2790 504700BF 		_NEST
 1914 2794 091E0000 		_ADR	BASE
 1915 2798 41190000 		_ADR	AT
 1916 279c BB180000 		_DOLIT 10
 1916      0A000000 
 1917 27a4 591A0000 		_ADR	XORR			// ?decimal
 1918 27a8 FB180000 		_QBRAN	DOT1
 1918      B8270000 
 1919 27b0 6D270000 		_ADR	UDOT
 1920 27b4 43170000 		_UNNEST			// no,display unsigned
 1921              	DOT1:
 1922 27b8 E9230000 	    _ADR	STRR
 1923 27bc 05260000 		_ADR	SPACE
ARM GAS  forth.s 			page 105


 1924 27c0 59260000 		_ADR	TYPEE
 1925 27c4 43170000 		_UNNEST			// yes, display signed
 1926              	
 1927              	/***********************
 1928              	    ?	   ( a -- )
 1929              	 	Display the contents
 1930              		in a memory cell.
 1931              	*************************/
 1932 27c8 8C270000 		_HEADER QUEST,1,"?"
 1932      013F00BF 
 1933 27d0 504700BF 		_NEST
 1934 27d4 41190000 		_ADR	AT
 1935 27d8 91270000 		_ADR	DOT
 1936 27dc 43170000 		_UNNEST
 1937              	
 1938              	/**************
 1939              	  Parsing
 1940              	***************/
 1941              	
 1942              	/*********************************************
 1943              	    parse	( b u c -- b u delta //  string> )
 1944              	 	Scan word delimited by c. 
 1945              		Return found string and its offset.
 1946              	hidden word used by PARSE
 1947              	**********************************************/
 1948              	PARS:
 1949 27e0 504700BF 		_NEST
 1950 27e4 131E0000 		_ADR	TEMP
 1951 27e8 2D190000 		_ADR	STORE
 1952 27ec 111A0000 		_ADR	OVER
 1953 27f0 95190000 		_ADR	TOR
 1954 27f4 ED190000 		_ADR	DUPP
 1955 27f8 FB180000 		_QBRAN	PARS8
 1955      F4280000 
 1956 2800 1D1B0000 		_ADR	ONEM
 1957 2804 131E0000 		_ADR	TEMP
 1958 2808 41190000 		_ADR	AT
 1959 280c 6D1B0000 		_ADR	BLANK
 1960 2810 A11C0000 		_ADR	EQUAL
 1961 2814 FB180000 		_QBRAN	PARS3
 1961      68280000 
 1962 281c 95190000 		_ADR	TOR
 1963              	PARS1:
 1964 2820 6D1B0000 		_ADR	BLANK
 1965 2824 111A0000 		_ADR	OVER
 1966 2828 61190000 		_ADR	CAT			// skip leading blanks 
 1967 282c C11A0000 		_ADR	SUBB
 1968 2830 211A0000 		_ADR	ZLESS
 1969 2834 551C0000 		_ADR	INVER
 1970 2838 FB180000 		_QBRAN	PARS2
 1970      64280000 
 1971 2840 0D1B0000 		_ADR	ONEP
 1972 2844 DD180000 		_DONXT	PARS1
 1972      20280000 
 1973 284c 6D190000 		_ADR	RFROM
 1974 2850 DD190000 		_ADR	DROP
 1975 2854 BB180000 		_DOLIT	0
ARM GAS  forth.s 			page 106


 1975      00000000 
 1976 285c ED190000 		_ADR	DUPP
 1977 2860 43170000 		_UNNEST
 1978              	PARS2:
 1979 2864 6D190000 		_ADR	RFROM
 1980              	PARS3:
 1981 2868 111A0000 		_ADR	OVER
 1982 286c FD190000 		_ADR	SWAP
 1983 2870 95190000 		_ADR	TOR
 1984              	PARS4:
 1985 2874 131E0000 		_ADR	TEMP
 1986 2878 41190000 		_ADR	AT
 1987 287c 111A0000 		_ADR	OVER
 1988 2880 61190000 		_ADR	CAT
 1989 2884 C11A0000 		_ADR	SUBB			// scan for delimiter
 1990 2888 131E0000 		_ADR	TEMP
 1991 288c 41190000 		_ADR	AT
 1992 2890 6D1B0000 		_ADR	BLANK
 1993 2894 A11C0000 		_ADR	EQUAL
 1994 2898 FB180000 		_QBRAN	PARS5
 1994      A4280000 
 1995 28a0 211A0000 		_ADR	ZLESS
 1996              	PARS5:
 1997 28a4 FB180000 		_QBRAN	PARS6
 1997      C8280000 
 1998 28ac 0D1B0000 		_ADR	ONEP
 1999 28b0 DD180000 		_DONXT	PARS4
 1999      74280000 
 2000 28b8 ED190000 		_ADR	DUPP
 2001 28bc 95190000 		_ADR	TOR
 2002 28c0 0F190000 		_BRAN	PARS7
 2002      DC280000 
 2003              	PARS6:
 2004 28c8 6D190000 		_ADR	RFROM
 2005 28cc DD190000 		_ADR	DROP
 2006 28d0 ED190000 		_ADR	DUPP
 2007 28d4 0D1B0000 		_ADR	ONEP
 2008 28d8 95190000 		_ADR	TOR
 2009              	PARS7:
 2010 28dc 111A0000 		_ADR	OVER
 2011 28e0 C11A0000 		_ADR	SUBB
 2012 28e4 6D190000 		_ADR	RFROM
 2013 28e8 6D190000 		_ADR	RFROM
 2014 28ec C11A0000 		_ADR	SUBB
 2015 28f0 43170000 		_UNNEST
 2016              	PARS8:
 2017 28f4 111A0000 		_ADR	OVER
 2018 28f8 6D190000 		_ADR	RFROM
 2019 28fc C11A0000 		_ADR	SUBB
 2020 2900 43170000 		_UNNEST
 2021              	
 2022              	/************************************
 2023              	    PARSE	( c -- b u //  string> )
 2024              	 	Scan input stream and return 
 2025              		counted string delimited by c.
 2026              	************************************/
 2027 2904 CC270000 		_HEADER PARSE,5,"PARSE"
ARM GAS  forth.s 			page 107


 2027      05504152 
 2027      534500BF 
 2028 2910 504700BF 		_NEST
 2029 2914 95190000 		_ADR	TOR
 2030 2918 81210000 		_ADR	TIB
 2031 291c 3D1E0000 		_ADR	INN
 2032 2920 41190000 		_ADR	AT
 2033 2924 B11A0000 		_ADR	PLUS			// current input buffer pointer
 2034 2928 511E0000 		_ADR	NTIB
 2035 292c 41190000 		_ADR	AT
 2036 2930 3D1E0000 		_ADR	INN
 2037 2934 41190000 		_ADR	AT
 2038 2938 C11A0000 		_ADR	SUBB			// remaining count
 2039 293c 6D190000 		_ADR	RFROM
 2040 2940 E1270000 		_ADR	PARS
 2041 2944 3D1E0000 		_ADR	INN
 2042 2948 291D0000 		_ADR	PSTOR
 2043 294c 43170000 		_UNNEST
 2044              	
 2045              	/*******************************
 2046              	    .(	  ( -- )
 2047              	 	Output following string 
 2048              		up to next ) .
 2049              	******************************/
 2050 2950 08290000 		_HEADER DOTPR,2,".("
 2050      022E2800 
 2051 2958 504700BF 		_NEST
 2052 295c BB180000 		_DOLIT	')'
 2052      29000000 
 2053 2964 11290000 		_ADR	PARSE
 2054 2968 59260000 		_ADR	TYPEE
 2055 296c 43170000 		_UNNEST
 2056              	
 2057              	/************************
 2058              	    (	   ( -- )
 2059              	 	Ignore following 
 2060              		string up to next )
 2061              		A comment.
 2062              	************************/
 2063 2970 54290000 		_HEADER PAREN,1,"("
 2063      012800BF 
 2064 2978 504700BF 		_NEST
 2065 297c BB180000 		_DOLIT	')'
 2065      29000000 
 2066 2984 11290000 		_ADR	PARSE
 2067 2988 FD1B0000 		_ADR	DDROP
 2068 298c 43170000 		_UNNEST
 2069              	
 2070              	/*******************
 2071              	    \	   ( -- )
 2072              	 	Ignore following 
 2073              		text till the 
 2074              		end of line.
 2075              	********************/
 2076 2990 74290000 		_HEADER BKSLA,1,"\\"
 2076      015C00BF 
 2077 2998 504700BF 		_NEST
ARM GAS  forth.s 			page 108


 2078 299c 511E0000 		_ADR	NTIB
 2079 29a0 41190000 		_ADR	AT
 2080 29a4 3D1E0000 		_ADR	INN
 2081 29a8 2D190000 		_ADR	STORE
 2082 29ac 43170000 		_UNNEST
 2083              	
 2084              	/******************************
 2085              	    CHAR	( -- c )
 2086              	 	Parse next word and
 2087              		return its first character.
 2088              	*******************************/
 2089 29b0 94290000 		_HEADER CHAR,4,"CHAR"
 2089      04434841 
 2089      520000BF 
 2090 29bc 504700BF 		_NEST
 2091 29c0 6D1B0000 		_ADR	BLANK
 2092 29c4 11290000 		_ADR	PARSE
 2093 29c8 DD190000 		_ADR	DROP
 2094 29cc 61190000 		_ADR	CAT
 2095 29d0 43170000 		_UNNEST
 2096              	
 2097              	/**********************************
 2098              	    WORD	( c -- a //  string> )
 2099              	 	Parse a word from input stream
 2100              		and copy it to code dictionary.
 2101              	***********************************/
 2102 29d4 B4290000 		_HEADER WORDD,4,"WORD"
 2102      04574F52 
 2102      440000BF 
 2103 29e0 504700BF 		_NEST
 2104 29e4 11290000 		_ADR	PARSE
 2105 29e8 49210000 		_ADR	HERE
 2106 29ec 4D1B0000 		_ADR	CELLP
 2107 29f0 3D220000 		_ADR	PACKS
 2108 29f4 43170000 		_UNNEST
 2109              	
 2110              	/********************************
 2111              	    TOKEN	( -- a //  string> )
 2112              	 	Parse a word from input 
 2113              		stream and copy it to 
 2114              		name dictionary.
 2115              	*********************************/
 2116 29f8 D8290000 		_HEADER TOKEN,5,"TOKEN"
 2116      05544F4B 
 2116      454E00BF 
 2117 2a04 504700BF 		_NEST
 2118 2a08 6D1B0000 		_ADR	BLANK
 2119 2a0c E1290000 		_ADR	WORDD
 2120 2a10 43170000 		_UNNEST
 2121              	
 2122              	/**********************
 2123              	  Dictionary search
 2124              	***********************/
 2125              	
 2126              	/*************************
 2127              	    NAME>	( na -- ca )
 2128              	 	Return a code address
ARM GAS  forth.s 			page 109


 2129              		given a name address.
 2130              	**************************/
 2131 2a14 FC290000 		_HEADER NAMET,5,"NAME>"
 2131      054E414D 
 2131      453E00BF 
 2132 2a20 504700BF 		_NEST
 2133 2a24 711D0000 		_ADR	COUNT
 2134 2a28 BB180000 		_DOLIT	0x1F
 2134      1F000000 
 2135 2a30 311A0000 		_ADR	ANDD
 2136 2a34 B11A0000 		_ADR	PLUS
 2137 2a38 95200000 		_ADR	ALGND
 2138 2a3c 43170000 		_UNNEST
 2139              	
 2140              	/***************************************
 2141              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2142              	 	Compare u bytes in two strings. 
 2143              		Return 0 if identical.
 2144              	
 2145              	  Picatout 2020-12-01, 
 2146              	    Because of problem with .align 
 2147              		directive that doesn't fill 
 2148              		with zero's I had to change 
 2149              		the "SAME?" and "FIND" 
 2150              	 	words  to do a byte by byte comparison. 
 2151              	****************************************/
 2152 2a40 182A0000 		_HEADER SAMEQ,5,"SAME?"
 2152      0553414D 
 2152      453F00BF 
 2153 2a4c 504700BF 		_NEST
 2154 2a50 95190000 		_ADR	TOR
 2155 2a54 0F190000 		_BRAN	SAME2
 2155      982A0000 
 2156              	SAME1:
 2157 2a5c 111A0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2158 2a60 81190000 		_ADR	RAT   // a1 a2 a1 u 
 2159 2a64 B11A0000 		_ADR	PLUS  // a1 a2 a1+u 
 2160 2a68 61190000 		_ADR	CAT	   // a1 a2 c1    		
 2161 2a6c 111A0000 		_ADR	OVER  // a1 a2 c1 a2 
 2162 2a70 81190000 		_ADR	RAT    
 2163 2a74 B11A0000 		_ADR	PLUS    
 2164 2a78 61190000 		_ADR	CAT	  // a1 a2 c1 c2
 2165 2a7c C11A0000 		_ADR	SUBB  
 2166 2a80 C11B0000 		_ADR	QDUP
 2167 2a84 FB180000 		_QBRAN	SAME2
 2167      982A0000 
 2168 2a8c 6D190000 		_ADR	RFROM
 2169 2a90 DD190000 		_ADR	DROP
 2170 2a94 43170000 		_UNNEST	// strings not equal
 2171              	SAME2:
 2172 2a98 DD180000 		_DONXT	SAME1
 2172      5C2A0000 
 2173 2aa0 BB180000 		_DOLIT	0
 2173      00000000 
 2174 2aa8 43170000 		_UNNEST	// strings equal
 2175              	
 2176              	/***********************************
ARM GAS  forth.s 			page 110


 2177              	    FIND	( a na -- ca na | a F )
 2178              	 	Search a vocabulary for a string.
 2179              		Return ca and na if succeeded.
 2180              	hidden word used by NAME?
 2181              	
 2182              	  Picatout 2020-12-01,  
 2183              		 Modified from original. 
 2184              	   See comment for word "SAME?" 
 2185              	************************************/
 2186              	FIND:
 2187 2aac 504700BF 		_NEST
 2188 2ab0 FD190000 		_ADR	SWAP			// na a	
 2189 2ab4 711D0000 		_ADR	COUNT			// na a+1 count
 2190 2ab8 ED190000 		_ADR	DUPP 
 2191 2abc 131E0000 		_ADR	TEMP
 2192 2ac0 2D190000 		_ADR	STORE			// na a+1 count 
 2193 2ac4 95190000 		_ADR  TOR		// na a+1  R: count  
 2194 2ac8 FD190000 		_ADR	SWAP			// a+1 na
 2195              	FIND1:
 2196 2acc ED190000 		_ADR	DUPP			// a+1 na na
 2197 2ad0 FB180000 		_QBRAN	FIND6	// end of vocabulary
 2197      242B0000 
 2198 2ad8 ED190000 		_ADR	DUPP			// a+1 na na
 2199 2adc 61190000 		_ADR	CAT			// a+1 na name1
 2200 2ae0 BB180000 		_DOLIT	MASKK
 2200      1FFFFFFF 
 2201 2ae8 311A0000 		_ADR	ANDD
 2202 2aec 81190000 		_ADR	RAT			// a+1 na name1 count 
 2203 2af0 591A0000 		_ADR	XORR			// a+1 na,  same length?
 2204 2af4 FB180000 		_QBRAN	FIND2
 2204      0C2B0000 
 2205 2afc 5D1B0000 		_ADR	CELLM			// a+1 la
 2206 2b00 41190000 		_ADR	AT			// a+1 next_na
 2207 2b04 0F190000 		_BRAN	FIND1			// try next word
 2207      CC2A0000 
 2208              	FIND2:   
 2209 2b0c 0D1B0000 		_ADR	ONEP			// a+1 na+1
 2210 2b10 131E0000 		_ADR	TEMP
 2211 2b14 41190000 		_ADR	AT			// a+1 na+1 count
 2212 2b18 4D2A0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2213              	FIND3:	
 2214 2b1c 0F190000 		_BRAN	FIND4
 2214      3C2B0000 
 2215              	FIND6:	
 2216 2b24 6D190000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2217 2b28 DD190000 		_ADR	DROP			// a+1 0
 2218 2b2c FD190000 		_ADR	SWAP			// 0 a+1
 2219 2b30 1D1B0000 		_ADR	ONEM			// 0 a
 2220 2b34 FD190000 		_ADR	SWAP			// a 0 
 2221 2b38 43170000 		_UNNEST			// return without a match
 2222              	FIND4:	
 2223 2b3c FB180000 		_QBRAN	FIND5			// a+1 na+1
 2223      582B0000 
 2224 2b44 1D1B0000 		_ADR	ONEM			// a+1 na
 2225 2b48 5D1B0000 		_ADR	CELLM			// a+4 la
 2226 2b4c 41190000 		_ADR	AT			// a+1 next_na
 2227 2b50 0F190000 		_BRAN	FIND1			// compare next name
ARM GAS  forth.s 			page 111


 2227      CC2A0000 
 2228              	FIND5:	
 2229 2b58 6D190000 		_ADR	RFROM			// a+1 na+1 count
 2230 2b5c DD190000 		_ADR	DROP			// a+1 na+1
 2231 2b60 FD190000 		_ADR	SWAP			// na+1 a+1
 2232 2b64 DD190000 		_ADR	DROP			// na+1
 2233 2b68 1D1B0000 		_ADR	ONEM			// na
 2234 2b6c ED190000 		_ADR	DUPP			// na na
 2235 2b70 212A0000 		_ADR	NAMET			// na ca
 2236 2b74 FD190000 		_ADR	SWAP			// ca na
 2237 2b78 43170000 		_UNNEST			//  return with a match
 2238              	
 2239              	/********************************
 2240              	    NAME?	( a -- ca na | a F )
 2241              	 	Search all context vocabularies 
 2242              		for a string.
 2243              	***********************************/
 2244 2b7c 442A0000 		_HEADER NAMEQ,5,"NAME?"
 2244      054E414D 
 2244      453F00BF 
 2245 2b88 504700BF 		_NEST
 2246 2b8c 911E0000 		_ADR	CNTXT
 2247 2b90 41190000 		_ADR	AT
 2248 2b94 AD2A0000 		_ADR	FIND
 2249 2b98 43170000 		_UNNEST
 2250              	
 2251              	/********************
 2252              	  console input
 2253              	********************/
 2254              	
 2255              	/**************************************
 2256              	   BKSP  ( bot eot cur -- bot eot cur )
 2257              	   Move cursor left by one character.
 2258              	hidden word used by KTAP
 2259              	***************************************/
 2260              	BKSP:
 2261 2b9c 504700BF 		_NEST
 2262 2ba0 95190000 		_ADR	TOR
 2263 2ba4 111A0000 		_ADR	OVER
 2264 2ba8 6D190000 		_ADR	RFROM
 2265 2bac FD190000 		_ADR	SWAP
 2266 2bb0 111A0000 		_ADR	OVER
 2267 2bb4 591A0000 		_ADR	XORR
 2268 2bb8 FB180000 		_QBRAN	BACK1
 2268      E42B0000 
 2269 2bc0 BB180000 		_DOLIT	BKSPP
 2269      08000000 
 2270 2bc8 C5170000 		_ADR	TECHO
 2271 2bcc 1D1B0000 		_ADR	ONEM
 2272 2bd0 6D1B0000 		_ADR	BLANK
 2273 2bd4 C5170000 		_ADR	TECHO
 2274 2bd8 BB180000 		_DOLIT	BKSPP
 2274      08000000 
 2275 2be0 C5170000 		_ADR	TECHO
 2276              	BACK1:
 2277 2be4 43170000 		  _UNNEST
 2278              	
ARM GAS  forth.s 			page 112


 2279              	/****************************************
 2280              	   TAP	 ( bot eot cur c -- bot eot cur )
 2281              	   Accept and echo the key stroke 
 2282              	   and bump the cursor.
 2283              	hidden word used by KTAP 
 2284              	****************************************/
 2285              	TAP:
 2286 2be8 504700BF 		_NEST
 2287 2bec ED190000 		_ADR	DUPP
 2288 2bf0 C5170000 		_ADR	TECHO
 2289 2bf4 111A0000 		_ADR	OVER
 2290 2bf8 4D190000 		_ADR	CSTOR
 2291 2bfc 0D1B0000 		_ADR	ONEP
 2292 2c00 43170000 		_UNNEST
 2293              	
 2294              	/*******************************************
 2295              	    kTAP	( bot eot cur c -- bot eot cur )
 2296              	 	Process a key stroke, CR or backspace.
 2297              	hidden word used by ACCEPT 
 2298              	*******************************************/
 2299              	KTAP:
 2300              	TTAP:
 2301 2c04 504700BF 		_NEST
 2302 2c08 ED190000 		_ADR	DUPP
 2303 2c0c BB180000 		_DOLIT	CRR
 2303      0D000000 
 2304 2c14 591A0000 		_ADR	XORR
 2305 2c18 FB180000 		_QBRAN  KTAP2
 2305      482C0000 
 2306 2c20 BB180000 		_DOLIT	BKSPP
 2306      08000000 
 2307 2c28 591A0000 		_ADR	XORR
 2308 2c2c FB180000 		_QBRAN	KTAP1
 2308      402C0000 
 2309 2c34 6D1B0000 		_ADR	BLANK
 2310 2c38 E92B0000 		_ADR	TAP
 2311 2c3c 43170000 		_UNNEST
 2312              	//	.word	0			// patch
 2313              	KTAP1:
 2314 2c40 9D2B0000 		_ADR	BKSP
 2315 2c44 43170000 		_UNNEST
 2316              	KTAP2:
 2317 2c48 DD190000 		_ADR	DROP
 2318 2c4c FD190000 		_ADR	SWAP
 2319 2c50 DD190000 		_ADR	DROP
 2320 2c54 ED190000 		_ADR	DUPP
 2321 2c58 43170000 		_UNNEST
 2322              	
 2323              	/************************************
 2324              	    ACCEPT	( b u -- b u )
 2325              	 	Accept characters to input 
 2326              		buffer. Return with actual count.
 2327              	*************************************/
 2328 2c5c 802B0000 		_HEADER ACCEP,6,"ACCEPT"
 2328      06414343 
 2328      45505400 
 2329 2c68 504700BF 		_NEST
ARM GAS  forth.s 			page 113


 2330 2c6c 111A0000 		_ADR	OVER
 2331 2c70 B11A0000 		_ADR	PLUS
 2332 2c74 111A0000 		_ADR	OVER
 2333              	ACCP1:
 2334 2c78 251C0000 		_ADR	DDUP
 2335 2c7c 591A0000 		_ADR	XORR
 2336 2c80 FB180000 		_QBRAN	ACCP4
 2336      C02C0000 
 2337 2c88 A1170000 		_ADR	KEY
 2338 2c8c ED190000 		_ADR	DUPP
 2339 2c90 6D1B0000 		_ADR	BLANK
 2340 2c94 BB180000 		_DOLIT 127
 2340      7F000000 
 2341 2c9c 1D1F0000 		_ADR	WITHI
 2342 2ca0 FB180000 		_QBRAN	ACCP2
 2342      B42C0000 
 2343 2ca8 E92B0000 		_ADR	TAP
 2344 2cac 0F190000 		_BRAN	ACCP3
 2344      B82C0000 
 2345              	ACCP2:
 2346 2cb4 052C0000 		_ADR	KTAP
 2347              	ACCP3:	  
 2348 2cb8 0F190000 		_BRAN	ACCP1
 2348      782C0000 
 2349              	ACCP4:
 2350 2cc0 DD190000 		_ADR	DROP
 2351 2cc4 111A0000 		_ADR	OVER
 2352 2cc8 C11A0000 		_ADR	SUBB
 2353 2ccc 43170000 		_UNNEST
 2354              	
 2355              	/*****************************
 2356              	    QUERY	( -- )
 2357              	 	Accept input stream 
 2358              		to terminal input buffer.
 2359              	******************************/
 2360 2cd0 602C0000 		_HEADER QUERY,5,"QUERY"
 2360      05515545 
 2360      525900BF 
 2361 2cdc 504700BF 		_NEST
 2362 2ce0 81210000 		_ADR	TIB
 2363 2ce4 BB180000 		_DOLIT 80
 2363      50000000 
 2364 2cec 692C0000 		_ADR	ACCEP
 2365 2cf0 511E0000 		_ADR	NTIB
 2366 2cf4 2D190000 		_ADR	STORE
 2367 2cf8 DD190000 		_ADR	DROP
 2368 2cfc BB180000 		_DOLIT	0
 2368      00000000 
 2369 2d04 3D1E0000 		_ADR	INN
 2370 2d08 2D190000 		_ADR	STORE
 2371 2d0c 43170000 		_UNNEST
 2372              	
 2373              	/********************
 2374              	  Error handling
 2375              	********************/
 2376              	
 2377              	/*********************
ARM GAS  forth.s 			page 114


 2378              	    ABORT	( a -- )
 2379              	 	Reset data stack 
 2380              		and jump to QUIT.
 2381              	**********************/
 2382 2d10 D42C0000 		_HEADER ABORT,5,"ABORT"
 2382      0541424F 
 2382      525400BF 
 2383 2d1c 504700BF 		_NEST
 2384              	ABORT1:
 2385 2d20 05260000 		_ADR	SPACE
 2386 2d24 711D0000 		_ADR	COUNT
 2387 2d28 59260000 		_ADR	TYPEE
 2388 2d2c BB180000 		_DOLIT	0X3F
 2388      3F000000 
 2389 2d34 C5170000 		_ADR	EMIT
 2390 2d38 8D260000 		_ADR	CR
 2391 2d3c A52E0000 		_ADR	PRESE
 2392 2d40 0F190000 		_BRAN	QUIT
 2392      C42E0000 
 2393              	
 2394              	/*******************************
 2395              	    _abort"	( f -- )
 2396              	 	Run time routine of ABORT"
 2397              		Abort with a message.
 2398              	hidden used by compiler 
 2399              	********************************/
 2400              	ABORQ:
 2401 2d48 504700BF 		_NEST
 2402 2d4c AD260000 		_ADR	DOSTR
 2403 2d50 FD190000 		_ADR	SWAP 
 2404 2d54 FB180000 		_QBRAN	1f	// text flag
 2404      642D0000 
 2405 2d5c 0F190000 		_BRAN	ABORT1
 2405      202D0000 
 2406              	1:
 2407 2d64 DD190000 		_ADR	DROP
 2408 2d68 43170000 		_UNNEST			// drop error
 2409              	
 2410              	/************************
 2411              	  The text interpreter
 2412              	************************/
 2413              	
 2414              	/***************************
 2415              	    $INTERPRET  ( a -- )
 2416              	 	Interpret a word. 
 2417              		If failed, try to 
 2418              		convert it to an integer.
 2419              	******************************/
 2420 2d6c 142D0000 		_HEADER INTER,10,"$INTERPRET"
 2420      0A24494E 
 2420      54455250 
 2420      52455400 
 2421 2d7c 504700BF 		_NEST
 2422 2d80 892B0000 		_ADR	NAMEQ
 2423 2d84 C11B0000 		_ADR	QDUP	// ?defined
 2424 2d88 FB180000 		_QBRAN	INTE1
 2424      BC2D0000 
ARM GAS  forth.s 			page 115


 2425 2d90 41190000 		_ADR	AT
 2426 2d94 BB180000 		_DOLIT	COMPO
 2426      40000000 
 2427 2d9c 311A0000 		_ADR	ANDD	// ?compile only lexicon bits
 2428 2da0 492D0000 		_ABORQ	13," compile only"
 2428      0D20636F 
 2428      6D70696C 
 2428      65206F6E 
 2428      6C7900BF 
 2429 2db4 D1180000 		_ADR	EXECU
 2430 2db8 43170000 		_UNNEST			// execute defined word
 2431              	INTE1:
 2432 2dbc C9240000 		_ADR	NUMBQ
 2433 2dc0 FB180000 		_QBRAN	INTE2
 2433      CC2D0000 
 2434 2dc8 43170000 		_UNNEST
 2435              	INTE2:
 2436 2dcc 1D2D0000 		_ADR	ABORT	// error
 2437              	
 2438              	/******************************
 2439              	    [	   ( -- )
 2440              	 	Start the text interpreter.
 2441              	*******************************/
 2442 2dd0 702D0000 		_HEADER LBRAC,1,"["
 2442      015B00BF 
 2443 2dd8 504700BF 		_NEST
 2444 2ddc BB180000 		_DOLIT	INTER
 2444      7C2D0000 
 2445 2de4 651E0000 		_ADR	TEVAL
 2446 2de8 2D190000 		_ADR	STORE
 2447 2dec 43170000 		_UNNEST
 2448              	
 2449              	/**********************
 2450              	    .OK	 ( -- )
 2451              	 	Display "ok" only 
 2452              		while interpreting.
 2453              	************************/
 2454 2df0 D42D0000 		_HEADER DOTOK,3,".OK"
 2454      032E4F4B 
 2455 2df8 504700BF 		_NEST
 2456 2dfc BB180000 		_DOLIT	INTER
 2456      7C2D0000 
 2457 2e04 651E0000 		_ADR	TEVAL
 2458 2e08 41190000 		_ADR	AT
 2459 2e0c A11C0000 		_ADR	EQUAL
 2460 2e10 FB180000 		_QBRAN	DOTO1
 2460      202E0000 
 2461 2e18 F5260000 		_DOTQP	3," ok"
 2461      03206F6B 
 2462              	DOTO1:
 2463 2e20 8D260000 		_ADR	CR
 2464 2e24 43170000 		_UNNEST
 2465              	
 2466              	/*************************
 2467              	    ?STACK	( -- )
 2468              	 	Abort if the data 
 2469              		stack underflows.
ARM GAS  forth.s 			page 116


 2470              	************************/
 2471 2e28 F42D0000 		_HEADER QSTAC,6,"?STACK"
 2471      063F5354 
 2471      41434B00 
 2472 2e34 504700BF 		_NEST
 2473 2e38 FD200000 		_ADR	DEPTH
 2474 2e3c 211A0000 		_ADR	ZLESS	// check only for underflow
 2475 2e40 492D0000 		_ABORQ	9,"underflow"
 2475      09756E64 
 2475      6572666C 
 2475      6F7700BF 
 2476 2e50 43170000 		_UNNEST
 2477              	
 2478              	/*******************
 2479              	    EVAL	( -- )
 2480              	 	Interpret the 
 2481              		input stream.
 2482              	*******************/
 2483 2e54 2C2E0000 		_HEADER EVAL,4,"EVAL"
 2483      04455641 
 2483      4C0000BF 
 2484 2e60 504700BF 		_NEST
 2485              	EVAL1:
 2486 2e64 052A0000 	    _ADR	TOKEN
 2487 2e68 ED190000 		_ADR	DUPP
 2488 2e6c 61190000 		_ADR	CAT	// ?input stream empty
 2489 2e70 FB180000 		_QBRAN	EVAL2
 2489      8C2E0000 
 2490 2e78 651E0000 		_ADR	TEVAL
 2491 2e7c 99210000 		_ADR	ATEXE
 2492 2e80 352E0000 		_ADR	QSTAC	// evaluate input, check stack
 2493 2e84 0F190000 		_BRAN	EVAL1
 2493      642E0000 
 2494              	EVAL2:
 2495 2e8c DD190000 		_ADR	DROP
 2496 2e90 F92D0000 		_ADR	DOTOK
 2497 2e94 43170000 		_UNNEST	// prompt
 2498              	
 2499              	/**********************************
 2500              	    PRESET	( -- )
 2501              	 	Reset data stack pointer 
 2502              		and the terminal input buffer.
 2503              	**********************************/
 2504 2e98 582E0000 		_HEADER PRESE,6,"PRESET"
 2504      06505245 
 2504      53455400 
 2505 2ea4 504700BF 		_NEST 
 2506 2ea8 BB180000 		_DOLIT SPP 
 2506      00FF0120 
 2507 2eb0 B9190000 		_ADR SPSTOR 
 2508 2eb4 43170000 		_UNNEST 
 2509              	
 2510              	/*********************
 2511              	    QUIT	( -- )
 2512              	 	Reset return stack 
 2513              		pointer and start 
 2514              		text interpreter.
ARM GAS  forth.s 			page 117


 2515              	***********************/
 2516 2eb8 9C2E0000 		_HEADER QUIT,4,"QUIT"
 2516      04515549 
 2516      540000BF 
 2517 2ec4 BB180000 		_DOLIT RPP 
 2517      80FF0120 
 2518 2ecc A9190000 		_ADR RPSTOR 
 2519              	QUIT1:
 2520 2ed0 D92D0000 		_ADR	LBRAC			// start interpretation
 2521              	QUIT2:
 2522 2ed4 DD2C0000 		_ADR	QUERY			// get input
 2523 2ed8 612E0000 		_ADR	EVAL
 2524 2edc 0F190000 		_BRAN	QUIT2	// continue till error
 2524      D42E0000 
 2525              	
 2526              	/***************************
 2527              		FORGET ( <string> -- )
 2528              		forget all definition 
 2529              		starting at <string>
 2530              	****************************/
 2531 2ee4 BC2E0000 		_HEADER FORGET,6,"FORGET"
 2531      06464F52 
 2531      47455400 
 2532 2ef0 504700BF 		_NEST 
 2533 2ef4 052A0000 		_ADR TOKEN 
 2534 2ef8 ED190000 		_ADR DUPP 
 2535 2efc FB180000 		_QBRAN 9f 
 2535      382F0000 
 2536 2f04 892B0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2537 2f08 C11B0000 		_ADR QDUP 
 2538 2f0c FB180000 		_QBRAN 8f
 2538      342F0000 
 2539 2f14 5D1B0000 		_ADR CELLM // ( ca la )
 2540 2f18 ED190000 		_ADR DUPP 
 2541 2f1c A51E0000 		_ADR CPP   
 2542 2f20 2D190000 		_ADR STORE
 2543 2f24 41190000 		_ADR AT 
 2544 2f28 CD1E0000 		_ADR LAST 
 2545 2f2c 2D190000 		_ADR STORE
 2546 2f30 9D330000 		_ADR OVERT 
 2547 2f34 DD190000 	8:  _ADR DROP 
 2548 2f38 43170000 	9:	_UNNEST 
 2549              	
 2550              		.p2align 2 
 2551              	
 2552              	/*****************
 2553              	  The compiler
 2554              	******************/
 2555              	
 2556              	/**************************************
 2557              	    '	   ( -- ca )
 2558              	 	Search context vocabularies 
 2559              		for the next word in input stream.
 2560              	***************************************/
 2561 2f3c E82E0000 		_HEADER TICK,1,"'"
 2561      012700BF 
 2562 2f44 504700BF 		_NEST
ARM GAS  forth.s 			page 118


 2563 2f48 052A0000 		_ADR	TOKEN
 2564 2f4c 892B0000 		_ADR	NAMEQ	// ?defined
 2565 2f50 FB180000 		_QBRAN	TICK1
 2565      5C2F0000 
 2566 2f58 43170000 		_UNNEST	// yes, push code address
 2567              	TICK1:	
 2568 2f5c 1D2D0000 		_ADR ABORT	// no, error
 2569              	
 2570              	/***********************
 2571              	    ALLOT	( n -- )
 2572              	 	Allocate n bytes to 
 2573              		the ram area.
 2574              	************************/
 2575 2f60 402F0000 		_HEADER ALLOT,5,"ALLOT"
 2575      05414C4C 
 2575      4F5400BF 
 2576 2f6c 504700BF 		_NEST
 2577 2f70 A51E0000 		_ADR	CPP
 2578 2f74 291D0000 		_ADR	PSTOR
 2579 2f78 43170000 		_UNNEST			// adjust code pointer
 2580              	
 2581              	/******************************
 2582              	    ,	   ( w -- )
 2583              	 	Compile an integer 
 2584              		into the code dictionary.
 2585              	******************************/
 2586 2f7c 642F0000 		_HEADER COMMA,1,","
 2586      012C00BF 
 2587 2f84 504700BF 		_NEST
 2588 2f88 49210000 		_ADR	HERE
 2589 2f8c ED190000 		_ADR	DUPP
 2590 2f90 4D1B0000 		_ADR	CELLP	// cell boundary
 2591 2f94 A51E0000 		_ADR	CPP
 2592 2f98 2D190000 		_ADR	STORE
 2593 2f9c 2D190000 		_ADR	STORE
 2594 2fa0 43170000 		_UNNEST	// adjust code pointer, compile
 2595              		.p2align 2 
 2596              	
 2597              	/************************************
 2598              	    [COMPILE]   ( -- //  string> )
 2599              	 	Compile the next immediate word 
 2600              		into code dictionary.
 2601              	*************************************/
 2602 2fa4 802F0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2602      895B434F 
 2602      4D50494C 
 2602      455D00BF 
 2603 2fb4 504700BF 		_NEST
 2604 2fb8 452F0000 		_ADR	TICK
 2605 2fbc 852F0000 		_ADR	COMMA
 2606 2fc0 43170000 		_UNNEST
 2607              	
 2608              	/****************************
 2609              	    COMPILE	( -- )
 2610              	 	Compile the next address 
 2611              		in colon list to code 
 2612              		dictionary.
ARM GAS  forth.s 			page 119


 2613              	*******************************/
 2614 2fc4 A82F0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2614      47434F4D 
 2614      50494C45 
 2615 2fd0 504700BF 		_NEST
 2616 2fd4 6D190000 		_ADR	RFROM
 2617 2fd8 ED190000 		_ADR	DUPP 
 2618 2fdc 41190000 		_ADR	AT
 2619 2fe0 BB180000 		_DOLIT 1 
 2619      01000000 
 2620 2fe8 451A0000 		_ADR	ORR 
 2621 2fec 852F0000 		_ADR	COMMA 
 2622 2ff0 4D1B0000 		_ADR	CELLP 
 2623 2ff4 95190000 		_ADR	TOR 
 2624 2ff8 43170000 		_UNNEST	// adjust return address
 2625              	
 2626              	/*************************
 2627              	    LITERAL	( w -- )
 2628              	 	Compile tos to code 
 2629              		dictionary as an 
 2630              		integer literal.
 2631              	***************************/
 2632 2ffc C82F0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2632      874C4954 
 2632      4552414C 
 2633 3008 504700BF 		_NEST
 2634 300c BB180000 		_COMPI	DOLIT
 2634      BA180000 
 2634      F9330000 
 2635 3018 852F0000 		_ADR	COMMA
 2636 301c 43170000 		_UNNEST
 2637              	
 2638              	/********************
 2639              	    $,"	( -- )
 2640              	 	Compile a literal 
 2641              		string up to next " .
 2642              	hidden word 
 2643              	************************/
 2644              	STRCQ:
 2645 3020 504700BF 		_NEST
 2646 3024 BB180000 		_DOLIT -4
 2646      FCFFFFFF 
 2647 302c A51E0000 		_ADR	CPP
 2648 3030 291D0000 		_ADR	PSTOR
 2649 3034 BB180000 		_DOLIT	'\"'
 2649      22000000 
 2650 303c E1290000 		_ADR	WORDD			// move word to code dictionary
 2651 3040 711D0000 		_ADR	COUNT
 2652 3044 B11A0000 		_ADR	PLUS
 2653 3048 95200000 		_ADR	ALGND			// calculate aligned end of string
 2654 304c A51E0000 		_ADR	CPP
 2655 3050 2D190000 		_ADR	STORE
 2656 3054 43170000 		_UNNEST 			// adjust the code pointer
 2657              	
 2658              	/*******************
 2659              	//  Structures
 2660              	*******************/
ARM GAS  forth.s 			page 120


 2661              	
 2662              	/*************************
 2663              	    FOR	 ( -- a )
 2664              	 	Start a FOR-NEXT loop 
 2665              		structure in a colon 
 2666              		definition.
 2667              	**************************/
 2668 3058 00300000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2668      C3464F52 
 2669 3060 504700BF 		_NEST
 2670 3064 BB180000 		_COMPI	TOR
 2670      94190000 
 2670      F9330000 
 2671 3070 49210000 		_ADR	HERE
 2672 3074 43170000 		_UNNEST
 2673              	
 2674              	/**********************
 2675              	    BEGIN	( -- a )
 2676              	 	Start an infinite 
 2677              		or indefinite 
 2678              		loop structure.
 2679              	************************/
 2680 3078 5C300000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2680      C5424547 
 2680      494E00BF 
 2681 3084 504700BF 		_NEST
 2682 3088 49210000 		_ADR	HERE
 2683 308c 43170000 		_UNNEST
 2684              		.p2align 2 
 2685              	
 2686              	/********************
 2687              	    NEXT	( a -- )
 2688              	 	Terminate a FOR-NEXT
 2689              		loop structure.
 2690              	**************************/
 2691 3090 7C300000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2691      C44E4558 
 2691      540000BF 
 2692 309c 504700BF 		_NEST
 2693 30a0 BB180000 		_COMPI	DONXT
 2693      DC180000 
 2693      F9330000 
 2694 30ac 852F0000 		_ADR	COMMA
 2695 30b0 43170000 		_UNNEST
 2696              	
 2697              	/**********************
 2698              	    UNTIL	( a -- )
 2699              	 	Terminate a BEGIN-UNTIL
 2700              		indefinite loop structure.
 2701              	******************************/
 2702 30b4 94300000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2702      C5554E54 
 2702      494C00BF 
 2703 30c0 504700BF 		_NEST
 2704 30c4 BB180000 		_COMPI	QBRAN
 2704      FA180000 
 2704      F9330000 
ARM GAS  forth.s 			page 121


 2705 30d0 852F0000 		_ADR	COMMA
 2706 30d4 43170000 		_UNNEST
 2707              	
 2708              	/**********************
 2709              	    AGAIN	( a -- )
 2710              	 	Terminate a BEGIN-AGAIN
 2711              		infinite loop structure.
 2712              	*****************************/
 2713 30d8 B8300000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2713      C5414741 
 2713      494E00BF 
 2714 30e4 504700BF 		_NEST
 2715 30e8 BB180000 		_COMPI	BRAN
 2715      0E190000 
 2715      F9330000 
 2716 30f4 852F0000 		_ADR	COMMA
 2717 30f8 43170000 		_UNNEST
 2718              	
 2719              	/************************
 2720              	    IF	  ( -- A )
 2721              	 	Begin a conditional
 2722              		branch structure.
 2723              	**************************/
 2724 30fc DC300000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2724      C2494600 
 2725 3104 504700BF 		_NEST
 2726 3108 BB180000 		_COMPI	QBRAN
 2726      FA180000 
 2726      F9330000 
 2727 3114 49210000 		_ADR	HERE
 2728 3118 BB180000 		_DOLIT	4
 2728      04000000 
 2729 3120 A51E0000 		_ADR	CPP
 2730 3124 291D0000 		_ADR	PSTOR
 2731 3128 43170000 		_UNNEST
 2732              	
 2733              	/*************************
 2734              	    AHEAD	( -- A )
 2735              	 	Compile a forward 
 2736              		branch instruction.
 2737              	*************************/
 2738 312c 00310000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2738      C5414845 
 2738      414400BF 
 2739 3138 504700BF 		_NEST
 2740 313c BB180000 		_COMPI	BRAN
 2740      0E190000 
 2740      F9330000 
 2741 3148 49210000 		_ADR	HERE
 2742 314c BB180000 		_DOLIT	4
 2742      04000000 
 2743 3154 A51E0000 		_ADR	CPP
 2744 3158 291D0000 		_ADR	PSTOR
 2745 315c 43170000 		_UNNEST
 2746              	
 2747              	/**************************
 2748              	    REPEAT	( A a -- )
ARM GAS  forth.s 			page 122


 2749              	 	Terminate a BEGIN-WHILE-REPEAT
 2750              		indefinite loop.
 2751              	**********************************/
 2752 3160 30310000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2752      C6524550 
 2752      45415400 
 2753 316c 504700BF 		_NEST
 2754 3170 E5300000 		_ADR	AGAIN
 2755 3174 49210000 		_ADR	HERE
 2756 3178 FD190000 		_ADR	SWAP
 2757 317c 2D190000 		_ADR	STORE
 2758 3180 43170000 		_UNNEST
 2759              	
 2760              	/*********************
 2761              	    THEN	( A -- )
 2762              	 	Terminate a conditional
 2763              		branch structure.
 2764              	*****************************/
 2765 3184 64310000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2765      C4544845 
 2765      4E0000BF 
 2766 3190 504700BF 		_NEST
 2767 3194 49210000 		_ADR	HERE
 2768 3198 FD190000 		_ADR	SWAP
 2769 319c 2D190000 		_ADR	STORE
 2770 31a0 43170000 		_UNNEST
 2771              	
 2772              	/***************************
 2773              	    AFT	 ( a -- a A )
 2774              	 	Jump to THEN in a 
 2775              		FOR-AFT-THEN-NEXT loop 
 2776              		the first time through.
 2777              	*****************************/
 2778 31a4 88310000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2778      C3414654 
 2779 31ac 504700BF 		_NEST
 2780 31b0 DD190000 		_ADR	DROP
 2781 31b4 39310000 		_ADR	AHEAD
 2782 31b8 85300000 		_ADR	BEGIN
 2783 31bc FD190000 		_ADR	SWAP
 2784 31c0 43170000 		_UNNEST
 2785              	
 2786              	/**********************
 2787              	    ELSE	( A -- A )
 2788              	 	Start the false 
 2789              		clause in an 
 2790              		IF-ELSE-THEN structure.
 2791              	****************************/
 2792 31c4 A8310000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2792      C4454C53 
 2792      450000BF 
 2793 31d0 504700BF 		_NEST
 2794 31d4 39310000 		_ADR	AHEAD
 2795 31d8 FD190000 		_ADR	SWAP
 2796 31dc 91310000 		_ADR	THENN
 2797 31e0 43170000 		_UNNEST
 2798              	
ARM GAS  forth.s 			page 123


 2799              	/**************************
 2800              	    WHILE	( a -- A a )
 2801              	 	Conditional branch out 
 2802              		of a BEGIN-WHILE-REPEAT loop.
 2803              	*********************************/
 2804 31e4 C8310000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2804      C5574849 
 2804      4C4500BF 
 2805 31f0 504700BF 		_NEST
 2806 31f4 05310000 		_ADR	IFF
 2807 31f8 FD190000 		_ADR	SWAP
 2808 31fc 43170000 		_UNNEST
 2809              	
 2810              	/***********************************
 2811              	    ABORT"	( -- //  string> )
 2812              	 	Conditional abort with an 
 2813              		error message.
 2814              	***********************************/
 2815 3200 E8310000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2815      8641424F 
 2815      52542200 
 2816 320c 504700BF 		_NEST
 2817 3210 BB180000 		_COMPI	ABORQ
 2817      482D0000 
 2817      F9330000 
 2818 321c 21300000 		_ADR	STRCQ
 2819 3220 43170000 		_UNNEST
 2820              	
 2821              	/******************************
 2822              	    $"	( -- //  string> )
 2823              	 	Compile an inline 
 2824              		word literal.
 2825              	*****************************/
 2826 3224 04320000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2826      C2242200 
 2827 322c 504700BF 		_NEST
 2828 3230 BB180000 		_COMPI	STRQP
 2828      D8260000 
 2828      F9330000 
 2829 323c 21300000 		_ADR	STRCQ
 2830 3240 43170000 		_UNNEST
 2831              	
 2832              	/******************************
 2833              	    ."	( -- //  string> )
 2834              	 	Compile an inline word
 2835              		literal to be typed out 
 2836              		at run time.
 2837              	*******************************/
 2838 3244 28320000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2838      C22E2200 
 2839 324c 504700BF 		_NEST
 2840 3250 BB180000 		_COMPI	DOTQP
 2840      F4260000 
 2840      F9330000 
 2841 325c 21300000 		_ADR	STRCQ
 2842 3260 43170000 		_UNNEST
 2843              	
ARM GAS  forth.s 			page 124


 2844              	/*********************
 2845              	  Name compiler
 2846              	***********************/
 2847              	
 2848              	/**************************
 2849              	    ?UNIQUE	( a -- a )
 2850              	 	Display a warning 
 2851              		message if the word 
 2852              		already exists.
 2853              	**************************/
 2854 3264 48320000 		_HEADER UNIQU,7,"?UNIQUE"
 2854      073F554E 
 2854      49515545 
 2855 3270 504700BF 		_NEST
 2856 3274 ED190000 		_ADR	DUPP
 2857 3278 892B0000 		_ADR	NAMEQ			// ?name exists
 2858 327c FB180000 		_QBRAN	UNIQ1	// redefinitions are OK
 2858      9C320000 
 2859 3284 F5260000 		_DOTQP	7," reDef "		// but warn the user
 2859      07207265 
 2859      44656620 
 2860 3290 111A0000 		_ADR	OVER
 2861 3294 711D0000 		_ADR	COUNT
 2862 3298 59260000 		_ADR	TYPEE			// just in case its not planned
 2863              	UNIQ1:
 2864 329c DD190000 		_ADR	DROP
 2865 32a0 43170000 		_UNNEST
 2866              	
 2867              	/***********************
 2868              	    $,n	 ( na -- )
 2869              	 	Build a new dictionary 
 2870              		name using the data at na.
 2871              	hidden word 
 2872              	*******************************/
 2873              	SNAME:
 2874 32a4 504700BF 		_NEST
 2875 32a8 ED190000 		_ADR	DUPP			//  na na
 2876 32ac 61190000 		_ADR	CAT			//  ?null input
 2877 32b0 FB180000 		_QBRAN	SNAM1
 2877      EC320000 
 2878 32b8 71320000 		_ADR	UNIQU			//  na
 2879 32bc CD1E0000 		_ADR	LAST			//  na last
 2880 32c0 41190000 		_ADR	AT			//  na la
 2881 32c4 852F0000 		_ADR	COMMA			//  na
 2882 32c8 ED190000 		_ADR	DUPP			//  na na
 2883 32cc CD1E0000 		_ADR	LAST			//  na na last
 2884 32d0 2D190000 		_ADR	STORE			//  na , save na for vocabulary link
 2885 32d4 711D0000 		_ADR	COUNT			//  na+1 count
 2886 32d8 B11A0000 		_ADR	PLUS			//  na+1+count
 2887 32dc 95200000 		_ADR	ALGND			//  word boundary
 2888 32e0 A51E0000 		_ADR	CPP
 2889 32e4 2D190000 		_ADR	STORE			//  top of dictionary now
 2890 32e8 43170000 		_UNNEST
 2891              	SNAM1:
 2892 32ec D9260000 		_ADR	STRQP
 2893 32f0 07       		.byte	7
 2894 32f1 206E616D 		.ascii " name? "
ARM GAS  forth.s 			page 125


 2894      653F20
 2895 32f8 1D2D0000 		_ADR	ABORT
 2896              	
 2897              	/************************
 2898              	    $COMPILE	( a -- )
 2899              	 	Compile next word to 
 2900              		code dictionary as 
 2901              		a token or literal.
 2902              	**************************/
 2903 32fc 68320000 		_HEADER SCOMP,8,"$COMPILE"
 2903      0824434F 
 2903      4D50494C 
 2903      450000BF 
 2904 330c 504700BF 		_NEST
 2905 3310 892B0000 		_ADR	NAMEQ
 2906 3314 C11B0000 		_ADR	QDUP	// defined?
 2907 3318 FB180000 		_QBRAN	SCOM2
 2907      48330000 
 2908 3320 41190000 		_ADR	AT
 2909 3324 BB180000 		_DOLIT	IMEDD
 2909      80000000 
 2910 332c 311A0000 		_ADR	ANDD	// immediate?
 2911 3330 FB180000 		_QBRAN	SCOM1
 2911      40330000 
 2912 3338 D1180000 		_ADR	EXECU
 2913 333c 43170000 		_UNNEST			// it's immediate, execute
 2914              	SCOM1:
 2915 3340 F9330000 		_ADR	CALLC			// it's not immediate, compile
 2916 3344 43170000 		_UNNEST	
 2917              	SCOM2:
 2918 3348 C9240000 		_ADR	NUMBQ
 2919 334c FB180000 		_QBRAN	SCOM3
 2919      5C330000 
 2920 3354 09300000 		_ADR	LITER
 2921 3358 43170000 		_UNNEST			// compile number as integer
 2922              	SCOM3: // compilation abort 
 2923 335c 65330000 		_ADR COLON_ABORT 
 2924 3360 1D2D0000 		_ADR	ABORT			// error
 2925              	
 2926              	/********************************
 2927              	 before aborting a compilation 
 2928              	 reset HERE and LAST
 2929              	 to previous values. 
 2930              	*******************************/
 2931              	COLON_ABORT:
 2932 3364 504700BF 		_NEST 
 2933 3368 CD1E0000 		_ADR LAST 
 2934 336c 41190000 		_ADR AT 
 2935 3370 5D1B0000 		_ADR CELLM 
 2936 3374 ED190000 		_ADR DUPP 
 2937 3378 A51E0000 		_ADR CPP  
 2938 337c 2D190000 		_ADR STORE 
 2939 3380 41190000 		_ADR AT 
 2940 3384 CD1E0000 		_ADR LAST 
 2941 3388 2D190000 		_ADR STORE 
 2942 338c 43170000 		_UNNEST 
 2943              	
ARM GAS  forth.s 			page 126


 2944              	/*********************
 2945              	    OVERT	( -- )
 2946              	 	Link a new word 
 2947              		into the current 
 2948              		vocabulary.
 2949              	**********************/
 2950 3390 00330000 		_HEADER OVERT,5,"OVERT"
 2950      054F5645 
 2950      525400BF 
 2951 339c 504700BF 		_NEST
 2952 33a0 CD1E0000 		_ADR	LAST
 2953 33a4 41190000 		_ADR	AT
 2954 33a8 911E0000 		_ADR	CNTXT
 2955 33ac 2D190000 		_ADR	STORE
 2956 33b0 43170000 		_UNNEST
 2957              	
 2958              	/**********************
 2959              	    ;  ( -- )
 2960              	 	Terminate a colon
 2961              		definition.
 2962              	***********************/
 2963 33b4 94330000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 2963      C13B00BF 
 2964 33bc 504700BF 		_NEST
 2965 33c0 BB180000 		_DOLIT	UNNEST
 2965      42170000 
 2966 33c8 F9330000 		_ADR	CALLC
 2967 33cc D92D0000 		_ADR	LBRAC
 2968 33d0 9D330000 		_ADR	OVERT
 2969 33d4 43170000 		_UNNEST
 2970              	
 2971              	/******************
 2972              	    ]	   ( -- )
 2973              	 	Start compiling 
 2974              		the words in 
 2975              		the input stream.
 2976              	*********************/
 2977 33d8 B8330000 		_HEADER RBRAC,1,"]"
 2977      015D00BF 
 2978 33e0 504700BF 		_NEST
 2979 33e4 BB180000 		_DOLIT	SCOMP
 2979      0C330000 
 2980 33ec 651E0000 		_ADR	TEVAL
 2981 33f0 2D190000 		_ADR	STORE
 2982 33f4 43170000 		_UNNEST
 2983              	
 2984              	/*********************
 2985              	    BL.W	( ca -- )
 2986              	 	compile ca.
 2987              	hidden word used by compiler
 2988              	*****************************/
 2989              	CALLC:
 2990 33f8 504700BF 		_NEST
 2991 33fc BB180000 		_DOLIT 1 
 2991      01000000 
 2992 3404 451A0000 		_ADR ORR 
 2993 3408 852F0000 		_ADR COMMA  
ARM GAS  forth.s 			page 127


 2994 340c 43170000 		_UNNEST 
 2995              	
 2996              	
 2997              	/*************************
 2998              	 	:	( -- //  string> )
 2999              	 	Start a new colon 
 3000              		definition using 
 3001              		next word as its name.
 3002              	**************************/
 3003 3410 DC330000 		_HEADER COLON,1,":"
 3003      013A00BF 
 3004 3418 504700BF 		_NEST
 3005 341c 052A0000 		_ADR	TOKEN
 3006 3420 A5320000 		_ADR	SNAME
 3007 3424 4D170000 		_ADR	COMPI_NEST 
 3008 3428 E1330000 		_ADR	RBRAC
 3009 342c 43170000 		_UNNEST
 3010              	
 3011              	/*************************
 3012              	    IMMEDIATE   ( -- )
 3013              	 	Make the last compiled 
 3014              		word an immediate word.
 3015              	***************************/
 3016 3430 14340000 		_HEADER IMMED,9,"IMMEDIATE"
 3016      09494D4D 
 3016      45444941 
 3016      544500BF 
 3017 3440 504700BF 		_NEST
 3018 3444 BB180000 		_DOLIT	IMEDD
 3018      80000000 
 3019 344c CD1E0000 		_ADR	LAST
 3020 3450 41190000 		_ADR	AT
 3021 3454 41190000 		_ADR	AT
 3022 3458 451A0000 		_ADR	ORR
 3023 345c CD1E0000 		_ADR	LAST
 3024 3460 41190000 		_ADR	AT
 3025 3464 2D190000 		_ADR	STORE
 3026 3468 43170000 		_UNNEST
 3027              	
 3028              	/******************
 3029              	  Defining words
 3030              	******************/
 3031              	
 3032              	/***********************************
 3033              	    CONSTANT	( u -- //  string> )
 3034              	 	Compile a new constant.
 3035              	************************************/
 3036 346c 34340000 		_HEADER CONST,8,"CONSTANT"
 3036      08434F4E 
 3036      5354414E 
 3036      540000BF 
 3037 347c 504700BF 		_NEST 
 3038 3480 052A0000 		_ADR	TOKEN
 3039 3484 A5320000 		_ADR	SNAME
 3040 3488 9D330000 		_ADR	OVERT
 3041 348c 4D170000 		_ADR	COMPI_NEST
 3042 3490 BB180000 		_DOLIT	DOCON
ARM GAS  forth.s 			page 128


 3042      A41D0000 
 3043 3498 F9330000 		_ADR	CALLC
 3044 349c 852F0000 		_ADR	COMMA
 3045 34a0 BB180000 		_DOLIT	UNNEST 
 3045      42170000 
 3046 34a8 F9330000 		_ADR	CALLC  
 3047 34ac 43170000 		_UNNEST
 3048              	
 3049              		.p2align 2 
 3050              	/****************************************
 3051              	 doDOES> ( -- a )
 3052              	 runtime action of DOES> 
 3053              	 leave parameter field address on stack 
 3054              	hidden word used by compiler 
 3055              	***************************************/
 3056              	DODOES:
 3057 34b0 504700BF 		_NEST 
 3058 34b4 6D190000 		_ADR	RFROM
 3059 34b8 4D1B0000 		_ADR	CELLP 
 3060 34bc 0D1B0000 		_ADR	ONEP  
 3061 34c0 CD1E0000 		_ADR LAST 
 3062 34c4 41190000 		_ADR AT
 3063 34c8 212A0000 		_ADR NAMET 
 3064 34cc 4D1B0000 		_ADR CELLP 
 3065 34d0 2D190000 		_ADR STORE  
 3066 34d4 43170000 		_UNNEST 
 3067              	
 3068              		.p2align 2
 3069              	/**********************
 3070              	  DOES> ( -- )
 3071              	  compile time action
 3072              	*************************/
 3073 34d8 70340000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3073      C5444F45 
 3073      533E00BF 
 3074 34e4 504700BF 		_NEST 
 3075 34e8 BB180000 		_DOLIT DODOES 
 3075      B0340000 
 3076 34f0 F9330000 		_ADR CALLC 
 3077 34f4 BB180000 		_DOLIT	UNNEST
 3077      42170000 
 3078 34fc F9330000 		_ADR	CALLC 
 3079 3500 4D170000 		_ADR COMPI_NEST
 3080 3504 BB180000 		_DOLIT RFROM 
 3080      6C190000 
 3081 350c F9330000 		_ADR	CALLC
 3082 3510 43170000 		_UNNEST 
 3083              	
 3084              	
 3085              	/****************************
 3086              	  DEFER@ ( "name" -- a )
 3087              	  return value of code field 
 3088              	  of defered function. 
 3089              	******************************/
 3090 3514 DC340000 		_HEADER DEFERAT,6,"DEFER@"
 3090      06444546 
 3090      45524000 
ARM GAS  forth.s 			page 129


 3091 3520 504700BF 		_NEST 
 3092 3524 452F0000 		_ADR TICK
 3093 3528 4D1B0000 		_ADR CELLP 
 3094 352c 41190000 		_ADR AT 
 3095 3530 1D1B0000 		_ADR ONEM 
 3096 3534 43170000 		_UNNEST 
 3097              	
 3098              	/*********************************
 3099              	 DEFER! ( "name1" "name2" -- )
 3100              	 assign an action to a defered word 
 3101              	************************************/
 3102 3538 18350000 		_HEADER DEFERSTO,6,"DEFER!"
 3102      06444546 
 3102      45522100 
 3103 3544 504700BF 		_NEST 
 3104 3548 452F0000 		_ADR TICK 
 3105 354c 0D1B0000 		_ADR ONEP 
 3106 3550 452F0000 		_ADR TICK 
 3107 3554 4D1B0000 		_ADR CELLP 
 3108 3558 2D190000 		_ADR STORE 
 3109 355c 43170000 		_UNNEST
 3110              	
 3111              	/****************************
 3112              	  DEFER ( "name" -- )
 3113              	  create a defered definition
 3114              	*****************************/
 3115 3560 3C350000 		_HEADER DEFER,5,"DEFER"
 3115      05444546 
 3115      455200BF 
 3116 356c 504700BF 		_NEST 
 3117 3570 BD350000 		_ADR CREAT 
 3118 3574 BB180000 		_DOLIT UNNEST 
 3118      42170000 
 3119 357c F9330000 		_ADR CALLC 
 3120 3580 BB180000 		_DOLIT DEFER_NOP
 3120      A4350000 
 3121 3588 0D1B0000 		_ADR ONEP 
 3122 358c CD1E0000 		_ADR LAST 
 3123 3590 41190000 		_ADR AT 
 3124 3594 212A0000 		_ADR NAMET 
 3125 3598 4D1B0000 		_ADR CELLP 
 3126 359c 2D190000 		_ADR STORE 
 3127 35a0 43170000 		_UNNEST 
 3128              	DEFER_NOP:
 3129 35a4 504700BF 		_NEST  
 3130 35a8 B9180000 		_ADR NOP 
 3131 35ac 43170000 		_UNNEST 
 3132              	
 3133              	/******************************
 3134              	    CREATE	( -- //  string> )
 3135              	 	Compile a new array entry 
 3136              		without allocating code space.
 3137              	***********************************/
 3138 35b0 64350000 		_HEADER CREAT,6,"CREATE"
 3138      06435245 
 3138      41544500 
 3139 35bc 504700BF 		_NEST 
ARM GAS  forth.s 			page 130


 3140 35c0 052A0000 		_ADR	TOKEN
 3141 35c4 A5320000 		_ADR	SNAME
 3142 35c8 9D330000 		_ADR	OVERT
 3143 35cc 4D170000 		_ADR	COMPI_NEST 
 3144 35d0 BB180000 		_DOLIT	DOVAR
 3144      981D0000 
 3145 35d8 F9330000 		_ADR	CALLC
 3146 35dc 43170000 		_UNNEST
 3147              	
 3148              	/*******************************
 3149              	    VARIABLE	( -- //  string> )
 3150              	 	Compile a new variable 
 3151              		initialized to 0.
 3152              	***********************************/
 3153 35e0 B4350000 		_HEADER VARIA,8,"VARIABLE"
 3153      08564152 
 3153      4941424C 
 3153      450000BF 
 3154 35f0 504700BF 		_NEST
 3155 35f4 BD350000 		_ADR	CREAT
 3156 35f8 BB180000 		_DOLIT	0
 3156      00000000 
 3157 3600 852F0000 		_ADR	COMMA
 3158 3604 BB180000 		_DOLIT UNNEST
 3158      42170000 
 3159 360c F9330000 		_ADR	CALLC  
 3160 3610 43170000 		_UNNEST
 3161              	
 3162              	/***********
 3163              	  Tools
 3164              	***********/
 3165              	
 3166              	/*************************
 3167              	    dm+	 ( a u -- a )
 3168              	 	Dump u bytes from , 
 3169              		leaving a+u on the stack.
 3170              	hidden word used by DUMP 
 3171              	****************************/
 3172              	DMP:
 3173 3614 504700BF 		_NEST
 3174 3618 111A0000 		_ADR	OVER
 3175 361c BB180000 		_DOLIT	4
 3175      04000000 
 3176 3624 39270000 		_ADR	UDOTR			// display address
 3177 3628 05260000 		_ADR	SPACE
 3178 362c 95190000 		_ADR	TOR			// start count down loop
 3179 3630 0F190000 		_BRAN	PDUM2			// skip first pass
 3179      50360000 
 3180              	PDUM1:
 3181 3638 ED190000 	  _ADR	DUPP
 3182 363c 61190000 		_ADR	CAT
 3183 3640 BB180000 		_DOLIT	3
 3183      03000000 
 3184 3648 39270000 		_ADR	UDOTR			// display numeric data
 3185 364c 0D1B0000 		_ADR	ONEP			// increment address
 3186              	PDUM2:
 3187 3650 DD180000 	  _ADR	DONXT
ARM GAS  forth.s 			page 131


 3188 3654 38360000 		.word	PDUM1	// loop till done
 3189 3658 43170000 		_UNNEST
 3190              		.p2align 2 
 3191              	//    DUMP	( a u -- )
 3192              	// 	Dump u bytes from a, in a formatted manner.
 3193              	
 3194              	/**********************
 3195              		DUMP ( a n -- )
 3196              		hex dump memory 
 3197              	*********************/
 3198 365c E4350000 		_HEADER DUMP,4,"DUMP"
 3198      0444554D 
 3198      500000BF 
 3199 3668 504700BF 		_NEST
 3200 366c 091E0000 		_ADR	BASE
 3201 3670 41190000 		_ADR	AT
 3202 3674 95190000 		_ADR	TOR
 3203 3678 19240000 		_ADR	HEX			// save radix,set hex
 3204 367c BB180000 		_DOLIT	16
 3204      10000000 
 3205 3684 35200000 		_ADR	SLASH			// change count to lines
 3206 3688 95190000 		_ADR	TOR
 3207 368c 0F190000 		_BRAN	DUMP4			// start count down loop
 3207      BC360000 
 3208              	DUMP1:
 3209 3694 8D260000 	  _ADR	CR
 3210 3698 BB180000 		_DOLIT	16
 3210      10000000 
 3211 36a0 251C0000 		_ADR	DDUP
 3212 36a4 15360000 		_ADR	DMP			// display numeric
 3213 36a8 D51B0000 		_ADR	ROT
 3214 36ac D51B0000 		_ADR	ROT
 3215 36b0 05260000 		_ADR	SPACE
 3216 36b4 05260000 		_ADR	SPACE
 3217 36b8 59260000 		_ADR	TYPEE			// display printable characters
 3218              	DUMP4:
 3219 36bc DD180000 	  _DONXT	DUMP1	// loop till done
 3219      94360000 
 3220              	DUMP3:
 3221 36c4 DD190000 		_ADR	DROP
 3222 36c8 6D190000 		_ADR	RFROM
 3223 36cc 091E0000 		_ADR	BASE
 3224 36d0 2D190000 		_ADR	STORE			// restore radix
 3225 36d4 43170000 		_UNNEST
 3226              	
 3227              	/**********************
 3228              	   .S	  ( ... -- ... )
 3229              	 	Display the contents 
 3230              		of the data stack.
 3231              	*************************/
 3232 36d8 60360000 		_HEADER DOTS,2,".S"
 3232      022E5300 
 3233 36e0 504700BF 		_NEST
 3234 36e4 05260000 		_ADR	SPACE
 3235 36e8 FD200000 		_ADR	DEPTH			// stack depth
 3236 36ec 95190000 		_ADR	TOR			// start count down loop
 3237 36f0 0F190000 		_BRAN	DOTS2			// skip first pass
ARM GAS  forth.s 			page 132


 3237      04370000 
 3238              	DOTS1:
 3239 36f8 81190000 		_ADR	RAT
 3240 36fc 21210000 		_ADR	PICK
 3241 3700 91270000 		_ADR	DOT			// index stack, display contents
 3242              	DOTS2:
 3243 3704 DD180000 		_DONXT	DOTS1	// loop till done
 3243      F8360000 
 3244 370c 05260000 		_ADR	SPACE
 3245 3710 43170000 		_UNNEST
 3246              	
 3247              	/*****************************
 3248              	    >NAME	( ca -- na | F )
 3249              	 	Convert code address 
 3250              		to a name address.
 3251              	*****************************/
 3252 3714 DC360000 		_HEADER TNAME,5,">NAME"
 3252      053E4E41 
 3252      4D4500BF 
 3253 3720 504700BF 		_NEST
 3254 3724 95190000 		_ADR	TOR			//  
 3255 3728 911E0000 		_ADR	CNTXT			//  va
 3256 372c 41190000 		_ADR	AT			//  na
 3257              	TNAM1:
 3258 3730 ED190000 		_ADR	DUPP			//  na na
 3259 3734 FB180000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3259      64370000 
 3260 373c ED190000 		_ADR	DUPP			//  na na
 3261 3740 212A0000 		_ADR	NAMET			//  na ca
 3262 3744 81190000 		_ADR	RAT			//  na ca code
 3263 3748 591A0000 		_ADR	XORR			//  na f --
 3264 374c FB180000 		_QBRAN	TNAM2
 3264      64370000 
 3265 3754 5D1B0000 		_ADR	CELLM			//  la 
 3266 3758 41190000 		_ADR	AT			//  next_na
 3267 375c 0F190000 		_BRAN	TNAM1
 3267      30370000 
 3268              	TNAM2:	
 3269 3764 6D190000 		_ADR	RFROM
 3270 3768 DD190000 		_ADR	DROP			//  0|na --
 3271 376c 43170000 		_UNNEST			// 0
 3272              	
 3273              	/********************************
 3274              	    .ID	 ( na -- )
 3275              	 	Display the name at address.
 3276              	********************************/
 3277 3770 18370000 		_HEADER DOTID,3,".ID"
 3277      032E4944 
 3278 3778 504700BF 		_NEST
 3279 377c C11B0000 		_ADR	QDUP			// if zero no name
 3280 3780 FB180000 		_QBRAN	DOTI1
 3280      A0370000 
 3281 3788 711D0000 		_ADR	COUNT
 3282 378c BB180000 		_DOLIT	0x1F
 3282      1F000000 
 3283 3794 311A0000 		_ADR	ANDD			// mask lexicon bits
 3284 3798 59260000 		_ADR	TYPEE
ARM GAS  forth.s 			page 133


 3285 379c 43170000 		_UNNEST			// display name string
 3286              	DOTI1:
 3287 37a0 F5260000 		_DOTQP	9," {noName}"
 3287      09207B6E 
 3287      6F4E616D 
 3287      657D00BF 
 3288 37b0 43170000 		_UNNEST
 3289              	
 3290              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3291              	.if WANT_SEE 
 3292              	/*******************************
 3293              	    SEE	 ( -- //  string> )
 3294              	 	A simple decompiler.
 3295              	*******************************/
 3296              		_HEADER SEE,3,"SEE"
 3297              		_NEST
 3298              		_ADR	TICK	//  ca --, starting address
 3299              		_ADR	CR	
 3300              		_DOLIT	20
 3301              		_ADR	TOR
 3302              	SEE1:
 3303              		_ADR	CELLP			//  a
 3304              		_ADR	DUPP			//  a a
 3305              		_ADR	DECOMP		//  a
 3306              		_DONXT	SEE1
 3307              		_ADR	DROP
 3308              		_UNNEST
 3309              	
 3310              	/*************************
 3311              	 	DECOMPILE ( a -- )
 3312              	 	Convert code in a.  
 3313              		Display name of command or as data.
 3314              	*************************************/
 3315              		_HEADER DECOMP,9,"DECOMPILE"
 3316              		_NEST
 3317              		_ADR	DUPP			//  a a
 3318              	// 	_ADR	TOR			//  a
 3319              		_ADR	AT			//  a code
 3320              		_ADR	DUPP			//  a code code
 3321              		_DOLIT	0xF800D000 //0xF800F800
 3322              		_ADR	ANDD
 3323              		_DOLIT	0xF000D000 //0xF800F000
 3324              		_ADR	EQUAL			//  a code ?
 3325              		_ADR	INVER 
 3326              		_QBRAN	DECOM2	//  not a command
 3327              		//  a valid_code --, extract address and display name
 3328              		MOVW	IP,#0xFFE
 3329              		MOV	WP,TOS
 3330              		LSL	TOS,TOS,#21		//  get bits 22-12
 3331              		ASR	TOS,TOS,#9		//  with sign extension
 3332              		LSR	WP,WP,#15		//  get bits 11-1
 3333              		AND	WP,WP,IP		//  retain only bits 11-1
 3334              		ORR	TOS,TOS,WP		//  get bits 22-1
 3335              		NOP
 3336              		_ADR	OVER			//  a offset a
 3337              		_ADR	PLUS			//  a target-4
 3338              		_ADR	CELLP			//  a target
ARM GAS  forth.s 			page 134


 3339              		_ADR	TNAME			//  a na/0 --, is it a name?
 3340              		_ADR	QDUP			//  name address or zero
 3341              		_QBRAN	DECOM1
 3342              		_ADR	SPACE			//  a na
 3343              		_ADR	DOTID			//  a --, display name
 3344              	// 	_ADR	RFROM			//  a
 3345              		_ADR	DROP
 3346              		_UNNEST
 3347              	DECOM1:	// _ADR	RFROM		//  a
 3348              		_ADR	AT			//  data
 3349              		_ADR	UDOT			//  display data
 3350              		_UNNEST
 3351              	DECOM2:
 3352              		_ADR	UDOT
 3353              	// 	_ADR	RFROM
 3354              		_ADR	DROP
 3355              		_UNNEST
 3356              	.endif 
 3357              	
 3358              	/*********************
 3359              	    WORDS	( -- )
 3360              	 	Display the names 
 3361              		in the context vocabulary.
 3362              	*******************************/
 3363 37b4 74370000 		_HEADER WORDS,5,"WORDS"
 3363      05574F52 
 3363      445300BF 
 3364 37c0 504700BF 		_NEST
 3365 37c4 8D260000 		_ADR	CR
 3366 37c8 911E0000 		_ADR	CNTXT
 3367 37cc 41190000 		_ADR	AT			// only in context
 3368              	WORS1:
 3369 37d0 C11B0000 		_ADR	QDUP			// ?at end of list
 3370 37d4 FB180000 		_QBRAN	WORS2
 3370      F8370000 
 3371 37dc ED190000 		_ADR	DUPP
 3372 37e0 05260000 		_ADR	SPACE
 3373 37e4 79370000 		_ADR	DOTID			// display a name
 3374 37e8 5D1B0000 		_ADR	CELLM
 3375 37ec 41190000 		_ADR	AT
 3376 37f0 0F190000 		_BRAN	WORS1
 3376      D0370000 
 3377              	WORS2:
 3378 37f8 43170000 		_UNNEST
 3379              	
 3380              	/****************
 3381              	  cold start
 3382              	*****************/
 3383              	
 3384              	/**********************************
 3385              	    VER	 ( -- n )
 3386              	 	Return the version 
 3387              		number of this implementation.
 3388              	hidden word used by COLD
 3389              	**********************************/
 3390              	VERSN:
 3391 37fc 504700BF 		_NEST
ARM GAS  forth.s 			page 135


 3392 3800 BB180000 		_DOLIT	VER*256+EXT
 3392      00010000 
 3393 3808 43170000 		_UNNEST
 3394              	
 3395              	/*********************
 3396              	    hi	  ( -- )
 3397              	 	Display the sign-on 
 3398              		message.
 3399              	***********************/
 3400 380c B8370000 		_HEADER HI,2,"HI"
 3400      02484900 
 3401 3814 504700BF 		_NEST
 3402 3818 8D260000 		_ADR	CR	// initialize I/O
 3403 381c F5260000 		_DOTQP	17, "beyond Jupiter, v" 
 3403      11626579 
 3403      6F6E6420 
 3403      4A757069 
 3403      7465722C 
 3404 3834 091E0000 		_ADR	BASE
 3405 3838 41190000 		_ADR	AT
 3406 383c 19240000 		_ADR	HEX	// save radix
 3407 3840 FD370000 		_ADR	VERSN
 3408 3844 09230000 		_ADR	BDIGS
 3409 3848 55230000 		_ADR	DIG
 3410 384c 55230000 		_ADR	DIG
 3411 3850 BB180000 		_DOLIT	'.'
 3411      2E000000 
 3412 3858 29230000 		_ADR	HOLD
 3413 385c 75230000 		_ADR	DIGS
 3414 3860 C9230000 		_ADR	EDIGS
 3415 3864 59260000 		_ADR	TYPEE	// format version number
 3416 3868 091E0000 		_ADR	BASE
 3417 386c 2D190000 		_ADR	STORE
 3418 3870 8D260000 		_ADR	CR
 3419 3874 43170000 		_UNNEST			// restore radix
 3420              	
 3421              	/**********************
 3422              	 check if PS2 keyboard 
 3423              	 present.
 3424              	**********************/
 3425              	PS2_QUERY:
 3426 3878 504700BF 		_NEST 
 3427 387c 39150000 		_ADR KBD_RST
 3428 3880 BB180000 		_DOLIT BAT_OK 
 3428      AA000000 
 3429 3888 591A0000 		_ADR XORR  
 3430 388c FB180000 		_QBRAN 9f  
 3430      C0380000 
 3431              	// no ps2 keyboard 
 3432              	// swith to serial console
 3433 3894 8D260000 		_ADR CR 
 3434 3898 F5260000 		_DOTQP 25,"no PS2 keyboard detected."
 3434      196E6F20 
 3434      50533220 
 3434      6B657962 
 3434      6F617264 
 3435 38b8 B9050000 		_ADR SERIAL 
ARM GAS  forth.s 			page 136


 3436 38bc D1050000 		_ADR CONSOLE 
 3437 38c0 43170000 	9:	_UNNEST 
 3438              	
 3439              	/*************************
 3440              	   check PA8 to 
 3441              	   select console 
 3442              	   PA8 -> low  LOCAL 
 3443              	   PA8 -> high SERIAL 
 3444              	*************************/
 3445              	IF_SENSE:
 3446 38c4 504700BF 		_NEST 
 3447 38c8 A1050000 		_ADR LOCAL 
 3448 38cc BB180000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3448      10000240 
 3449 38d4 41190000 		_ADR AT 
 3450 38d8 BB180000 		_DOLIT (1<<8)
 3450      00010000 
 3451 38e0 311A0000 		_ADR ANDD 
 3452 38e4 FB180000 		_QBRAN 9f 
 3452      F0380000 
 3453 38ec 0D1B0000 		_ADR ONEP 
 3454 38f0 D1050000 	9:  _ADR CONSOLE 
 3455 38f4 43170000 		_UNNEST 
 3456              	
 3457              	
 3458              	/********************
 3459              	    COLD	( -- )
 3460              	 	The high level cold 
 3461              		start sequence.
 3462              	**************************/
 3463 38f8 10380000 		.word	LINK 
 3464              		LINK = . 
 3465 38fc 04       	_LASTN:	.byte  4
 3466 38fd 434F4C44 		.ascii "COLD"
 3467 3901 0000BF   		.p2align 2	
 3468              	COLD:
 3469 3904 00B5FCF7 		_CALL forth_init 
 3469      2FFC5DF8 
 3469      04EB
 3470 390e DFF854C0 		ldr IP,=COLD1 
 3471 3912 FDF713BF 		_NEXT
 3472 3916 00BF     		.p2align 2 
 3473              	COLD1:
 3474 3918 BB180000 		_DOLIT  0 
 3474      00000000 
 3475 3920 91180000 		_ADR ULED // turn off user LED 
 3476 3924 BB180000 		_DOLIT	UZERO
 3476      F4030000 
 3477 392c BB180000 		_DOLIT	UPP
 3477      00000020 
 3478 3934 BB180000 		_DOLIT	ULAST-UZERO
 3478      A8000000 
 3479 393c E9210000 		_ADR	MOVE 			// initialize user area
 3480 3940 A52E0000 		_ADR	PRESE			// initialize stack and TIB
 3481 3944 C5380000 		_ADR	IF_SENSE 
 3482 3948 79380000 		_ADR 	PS2_QUERY  
 3483 394c F51D0000 		_ADR	TBOOT
ARM GAS  forth.s 			page 137


 3484 3950 99210000 		_ADR	ATEXE			// application boot
 3485 3954 9D330000 		_ADR	OVERT
 3486 3958 0F190000 		_BRAN	QUIT			// start interpretation
 3486      C42E0000 
 3487              	COLD2:
 3488              		.p2align 2 	
 3489              	CTOP:
 3490 3960 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3491              	
 3492              	
 3493 3964 18390000 	  .end 
ARM GAS  forth.s 			page 138


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 139


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 140


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 141


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 142


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 143


          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2483   .text:0000000000002e60 EVAL
             forth.s:1510   .text:0000000000002328 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
ARM GAS  forth.s 			page 144


          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:122    .text:00000000000007c8 tv_out_isr
          ser-term.s:35     .text:00000000000004ac uart_rx_handler
           ps2_kbd.s:77     .text:0000000000001048 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:97     .text:000000000000173c INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2504   .text:0000000000002ea4 PRESE
             forth.s:280    .text:00000000000018ba DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:0000000000001d70 COUNT
             forth.s:1774   .text:0000000000002658 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:449    .text:00000000000019ec DUPP
             forth.s:405    .text:0000000000001994 TOR
             forth.s:980    .text:0000000000001e08 BASE
             forth.s:351    .text:000000000000192c STORE
             forth.s:1912   .text:0000000000002790 DOT
             forth.s:387    .text:000000000000196c RFROM
             forth.s:484    .text:0000000000001a30 ANDD
             forth.s:321    .text:00000000000018fa QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:165    .text:00000000000017c4 EMIT
             forth.s:1746   .text:0000000000002604 SPACE
              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1792   .text:000000000000268c CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:384    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004da ser_init
             tvout.s:66     .text:0000000000000718 tv_init
           ps2_kbd.s:306    .text:0000000000001268 kbd_init
         spi-flash.s:39     .text:0000000000001668 flash_spi_init
             forth.s:3468   .text:0000000000003904 COLD
             forth.s:93     .text:0000000000001734 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
ARM GAS  forth.s 			page 145


              init.s:474    .text:0000000000000332 gpio_config
              init.s:549    .text:00000000000003de gpio_out
              init.s:409    .text:00000000000002a8 nvic_set_priority
              init.s:564    .text:00000000000003f4 UZERO
              init.s:600    .text:000000000000049c ULAST
              init.s:418    .text:00000000000002c0 negative_irq
              init.s:430    .text:00000000000002da nvic_enable_irq
              init.s:447    .text:0000000000000304 nvic_disable_irq
              init.s:511    .text:000000000000039a input_pull
              init.s:504    .text:0000000000000388 output_type
              init.s:527    .text:00000000000003b0 gpio_speed
              init.s:565    .text:00000000000003f4 $d
             forth.s:3400   .text:0000000000003814 HI
           ps2_kbd.s:391    .text:0000000000001354 PS2_QKEY
             tvout.s:511    .text:0000000000000c0c TV_EMIT
             forth.s:2420   .text:0000000000002d7c INTER
             forth.s:3465   .text:00000000000038fc _LASTN
             forth.s:3489   .text:0000000000003960 CTOP
             forth.s:3464   .text:00000000000038fc LINK
              init.s:605    .text:000000000000049c $d
          ser-term.s:33     .text:00000000000004ac $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000532 $d
          ser-term.s:90     .text:0000000000000536 _SER_QKEY
          ser-term.s:90     .text:0000000000000540 SER_QKEY
          ser-term.s:110    .text:000000000000056c $d
          ser-term.s:110    .text:0000000000000570 _SER_EMIT
          ser-term.s:110    .text:000000000000057c SER_EMIT
          ser-term.s:124    .text:0000000000000596 $d
          ser-term.s:124    .text:000000000000059a _LOCAL
          ser-term.s:124    .text:00000000000005a0 $t
          ser-term.s:124    .text:00000000000005a0 LOCAL
          ser-term.s:133    .text:00000000000005ac $d
          ser-term.s:133    .text:00000000000005b0 _SERIAL
          ser-term.s:133    .text:00000000000005b8 SERIAL
          ser-term.s:142    .text:00000000000005c4 $d
          ser-term.s:142    .text:00000000000005c8 _CONSOLE
          ser-term.s:142    .text:00000000000005d0 $t
          ser-term.s:142    .text:00000000000005d0 CONSOLE
          ser-term.s:164    .text:00000000000005f0 $d
          ser-term.s:164    .text:00000000000005f4 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000600 ANSI_PARAM
          ser-term.s:166    .text:0000000000000604 $d
             forth.s:590    .text:0000000000001b0c ONEP
             forth.s:1201   .text:0000000000001ffc SLMOD
             forth.s:679    .text:0000000000001bc0 QDUP
             forth.s:336    .text:000000000000190e BRAN
             forth.s:541    .text:0000000000001ab0 PLUS
             forth.s:598    .text:0000000000001b1c ONEM
             forth.s:100    .text:0000000000001742 UNNEST
          ser-term.s:191    .text:0000000000000670 _ANSI_ESC
          ser-term.s:191    .text:0000000000000678 ANSI_ESC
          ser-term.s:193    .text:000000000000067c $d
          ser-term.s:203    .text:000000000000069c _SER_AT
          ser-term.s:203    .text:00000000000006a4 SER_AT
          ser-term.s:205    .text:00000000000006a8 $d
             forth.s:457    .text:00000000000019fc SWAP
ARM GAS  forth.s 			page 146


          ser-term.s:219    .text:00000000000006d8 _SER_CLS
          ser-term.s:219    .text:00000000000006e0 $t
          ser-term.s:219    .text:00000000000006e0 SER_CLS
          ser-term.s:221    .text:00000000000006e4 $d
          ser-term.s:228    .text:0000000000000708 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:66     .text:0000000000000718 $t
             tvout.s:141    .text:00000000000007f4 state_vsync
             tvout.s:182    .text:0000000000000848 state_pre_video
             tvout.s:193    .text:000000000000085a state_video_out
             tvout.s:223    .text:00000000000008b2 state_post_video
             tvout.s:240    .text:00000000000008d8 tv_isr_exit
             tvout.s:171    .text:000000000000082e sync_end
             tvout.s:232    .text:00000000000008c4 frame_end
             tvout.s:250    .text:00000000000008da $d
             tvout.s:250    .text:00000000000008de _BACKCOLOR
             tvout.s:250    .text:00000000000008ec BACKCOLOR
             tvout.s:257    .text:00000000000008f8 $d
             tvout.s:257    .text:00000000000008fc _PENCOLOR
             tvout.s:257    .text:0000000000000906 $t
             tvout.s:257    .text:0000000000000908 PENCOLOR
             tvout.s:264    .text:0000000000000914 $d
             tvout.s:264    .text:0000000000000918 _CURSOR_COL
             tvout.s:264    .text:0000000000000920 CURSOR_COL
             tvout.s:271    .text:000000000000092c $d
             tvout.s:271    .text:0000000000000930 _CURSOR_ROW
             tvout.s:271    .text:0000000000000934 $t
             tvout.s:271    .text:0000000000000934 CURSOR_ROW
             tvout.s:278    .text:0000000000000940 $d
             tvout.s:278    .text:0000000000000944 _ROWY
             tvout.s:278    .text:000000000000094a $t
             tvout.s:278    .text:000000000000094c ROWY
             tvout.s:285    .text:0000000000000958 $d
ARM GAS  forth.s 			page 147


             tvout.s:285    .text:000000000000095c _COLX
             tvout.s:285    .text:0000000000000962 $t
             tvout.s:285    .text:0000000000000964 COLX
             tvout.s:292    .text:0000000000000970 $d
             tvout.s:292    .text:0000000000000974 _FONT
             tvout.s:292    .text:000000000000097c FONT
             tvout.s:692    .rodata:0000000000000000 font_6x8
             tvout.s:299    .text:0000000000000988 $d
             tvout.s:299    .text:000000000000098c _VIDBUFF
             tvout.s:299    .text:0000000000000994 $t
             tvout.s:299    .text:0000000000000994 VIDBUFF
             tvout.s:311    .text:000000000000099e $d
             tvout.s:311    .text:00000000000009a2 _PLOT
             tvout.s:311    .text:00000000000009a8 PLOT
             tvout.s:359    .text:0000000000000a2c plot_op
             tvout.s:327    .text:00000000000009d4 op_back
             tvout.s:336    .text:00000000000009ee op_pen
             tvout.s:345    .text:0000000000000a08 op_invert
             tvout.s:349    .text:0000000000000a10 op_xor
             tvout.s:359    .text:0000000000000a2c $d
             tvout.s:364    .text:0000000000000a34 _VSYNC
             tvout.s:364    .text:0000000000000a3a $t
             tvout.s:364    .text:0000000000000a3c VSYNC
             tvout.s:372    .text:0000000000000a46 $d
             tvout.s:372    .text:0000000000000a4a _CLS
             tvout.s:372    .text:0000000000000a4e $t
             tvout.s:372    .text:0000000000000a50 CLS
             tvout.s:396    .text:0000000000000a92 $d
             tvout.s:396    .text:0000000000000a96 _CLRLINE
             tvout.s:396    .text:0000000000000a9e $t
             tvout.s:396    .text:0000000000000aa0 CLRLINE
             tvout.s:398    .text:0000000000000aa4 $d
             forth.s:559    .text:0000000000001ad0 STAR
             forth.s:1418   .text:000000000000221c FILL
             tvout.s:411    .text:0000000000000ad8 _SCROLLUP
             tvout.s:411    .text:0000000000000ae4 SCROLLUP
             tvout.s:413    .text:0000000000000ae8 $d
             forth.s:550    .text:0000000000001ac0 SUBB
             forth.s:1396   .text:00000000000021e8 MOVE
             tvout.s:430    .text:0000000000000b30 _RIGHT
             tvout.s:430    .text:0000000000000b36 $t
             tvout.s:430    .text:0000000000000b38 RIGHT
             tvout.s:441    .text:0000000000000b58 TVCR
             tvout.s:441    .text:0000000000000b4c $d
             tvout.s:441    .text:0000000000000b50 _TVCR
             tvout.s:441    .text:0000000000000b56 $t
             tvout.s:452    .text:0000000000000b80 $d
             tvout.s:457    .text:0000000000000b88 FONT_PIXEL
             tvout.s:458    .text:0000000000000b88 $t
             tvout.s:464    .text:0000000000000b98 INCR_X
             tvout.s:471    .text:0000000000000ba4 NEXT_PIXEL
             tvout.s:480    .text:0000000000000bac CHAR_ROW
             tvout.s:482    .text:0000000000000bb0 $d
             forth.s:729    .text:0000000000001c24 DDUP
             forth.s:396    .text:0000000000001980 RAT
             forth.s:302    .text:00000000000018dc DONXT
             forth.s:720    .text:0000000000001c10 TDROP
ARM GAS  forth.s 			page 148


             tvout.s:499    .text:0000000000000bec CHAR_FONT
             tvout.s:500    .text:0000000000000bec $t
             tvout.s:511    .text:0000000000000c00 $d
             tvout.s:511    .text:0000000000000c04 _TV_EMIT
             tvout.s:511    .text:0000000000000c0c $t
             tvout.s:513    .text:0000000000000c10 $d
             forth.s:801    .text:0000000000001cb8 ULESS
             tvout.s:541    .text:0000000000000c94 CTRL_KEY
             forth.s:361    .text:0000000000001940 AT
             forth.s:689    .text:0000000000001bd4 ROT
             forth.s:379    .text:0000000000001960 CAT
             tvout.s:614    .text:0000000000000d98 DRAW_CURSOR
             tvout.s:645    .text:0000000000000e24 ERASE_CURSOR
             forth.s:789    .text:0000000000001ca0 EQUAL
             tvout.s:598    .text:0000000000000d5c BACK_SPACE
             forth.s:441    .text:00000000000019dc DROP
             tvout.s:566    .text:0000000000000d04 CAR_RET
             tvout.s:577    .text:0000000000000d1c LN_FEED
             tvout.s:567    .text:0000000000000d04 $t
             tvout.s:568    .text:0000000000000d08 $d
             tvout.s:578    .text:0000000000000d1c $t
             tvout.s:579    .text:0000000000000d20 $d
             forth.s:502    .text:0000000000001a58 XORR
             tvout.s:599    .text:0000000000000d5c $t
             tvout.s:600    .text:0000000000000d60 $d
             tvout.s:614    .text:0000000000000d8c _DRAW_CURSOR
             tvout.s:614    .text:0000000000000d98 $t
             tvout.s:617    .text:0000000000000d9c $d
             forth.s:671    .text:0000000000001bb0 TWOSL
             forth.s:369    .text:000000000000194c CSTOR
             forth.s:711    .text:0000000000001bfc DDROP
             tvout.s:645    .text:0000000000000e14 _ERASE_CURSOR
             tvout.s:648    .text:0000000000000e28 $d
             forth.s:532    .text:0000000000001aa0 LSHIFT
             forth.s:493    .text:0000000000001a44 ORR
             tvout.s:658    .text:0000000000000e50 _TV_AT
             tvout.s:658    .text:0000000000000e56 $t
             tvout.s:658    .text:0000000000000e58 TV_AT
             tvout.s:673    .text:0000000000000e7c $d
             tvout.s:673    .text:0000000000000e80 _INPUT
             tvout.s:673    .text:0000000000000e86 $t
             tvout.s:673    .text:0000000000000e88 INPUT
             tvout.s:675    .text:0000000000000e8c $d
             forth.s:1340   .text:0000000000002160 PAD
             forth.s:2328   .text:0000000000002c68 ACCEP
             forth.s:467    .text:0000000000001a10 OVER
             tvout.s:688    .rodata:0000000000000000 $d
             tvout.s:793    .text:0000000000000eb8 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
ARM GAS  forth.s 			page 149


       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
ARM GAS  forth.s 			page 150


       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
ARM GAS  forth.s 			page 151


       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000ec4 sc_ascii
         mcSaite.inc:100    .text:0000000000000f78 shifted
         mcSaite.inc:151    .text:0000000000000fd8 altchar
         mcSaite.inc:167    .text:0000000000000fe8 extended
         mcSaite.inc:191    .text:0000000000001010 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:0000000000001046 $t
           ps2_kbd.s:178    .text:0000000000001172 send_bit
           ps2_kbd.s:106    .text:00000000000010a8 start_bit
           ps2_kbd.s:117    .text:00000000000010cc parity_bit
           ps2_kbd.s:124    .text:00000000000010e0 stop_bit
           ps2_kbd.s:151    .text:0000000000001136 store_code
           ps2_kbd.s:252    .text:0000000000001206 do_async_key
           ps2_kbd.s:203    .text:00000000000011b6 send_parity
           ps2_kbd.s:210    .text:00000000000011c8 send_stop
           ps2_kbd.s:217    .text:00000000000011d2 rx_ack_bit
           ps2_kbd.s:235    .text:00000000000011f2 is_async_key
           ps2_kbd.s:285    .text:0000000000001256 async_keys
           ps2_kbd.s:373    .text:000000000000132a table_scan
           ps2_kbd.s:259    .text:0000000000001218 set_async_key
           ps2_kbd.s:294    .text:0000000000001264 async_jump
           ps2_kbd.s:264    .text:0000000000001226 shift_key
           ps2_kbd.s:272    .text:0000000000001236 set_reset
           ps2_kbd.s:267    .text:000000000000122c ctrl_key
           ps2_kbd.s:270    .text:0000000000001232 alt_key
           ps2_kbd.s:286    .text:0000000000001256 $d
           ps2_kbd.s:335    .text:00000000000012d6 $d
           ps2_kbd.s:335    .text:00000000000012da _KEY_ASYNC
           ps2_kbd.s:335    .text:00000000000012e4 $t
           ps2_kbd.s:335    .text:00000000000012e4 KEY_ASYNC
           ps2_kbd.s:345    .text:00000000000012f2 keycode
           ps2_kbd.s:360    .text:000000000000131a wait_code
           ps2_kbd.s:391    .text:0000000000001344 $d
ARM GAS  forth.s 			page 152


           ps2_kbd.s:391    .text:0000000000001348 _PS2_QKEY
           ps2_kbd.s:411    .text:00000000000013a0 inkey_exit
           ps2_kbd.s:413    .text:00000000000013a2 pause_key
           ps2_kbd.s:422    .text:00000000000013b6 do_modifiers
           ps2_kbd.s:431    .text:00000000000013ce shift_down
           ps2_kbd.s:435    .text:00000000000013d4 altchar_down
           ps2_kbd.s:439    .text:00000000000013da ctrl_down
           ps2_kbd.s:447    .text:00000000000013f6 do_capslock
           ps2_kbd.s:473    .text:000000000000141a kbd_send
           ps2_kbd.s:548    .text:000000000000150e kbd_clear_queue
           ps2_kbd.s:562    .text:000000000000152c $d
           ps2_kbd.s:562    .text:0000000000001530 _KBD_RST
           ps2_kbd.s:562    .text:0000000000001538 $t
           ps2_kbd.s:562    .text:0000000000001538 KBD_RST
           ps2_kbd.s:586    .text:0000000000001580 $d
           ps2_kbd.s:586    .text:0000000000001584 _KBD_LED
           ps2_kbd.s:586    .text:000000000000158c $t
           ps2_kbd.s:586    .text:000000000000158c KBD_LED
           ps2_kbd.s:611    .text:00000000000015de $d
           ps2_kbd.s:611    .text:00000000000015e2 _CAPS_LED
           ps2_kbd.s:611    .text:00000000000015ec CAPS_LED
           ps2_kbd.s:622    .text:0000000000001616 $d
           ps2_kbd.s:629    .text:0000000000001622 _WKEY
           ps2_kbd.s:629    .text:000000000000162c WKEY
           ps2_kbd.s:631    .text:0000000000001630 $d
           ps2_kbd.s:636    .text:0000000000001648 $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:0000000000001668 $t
         spi-flash.s:68     .text:00000000000016d2 $d
         spi-flash.s:68     .text:00000000000016d6 _CHIPSEL
         spi-flash.s:68     .text:00000000000016e0 CHIPSEL
         spi-flash.s:80     .text:00000000000016fc $d
         spi-flash.s:80     .text:0000000000001700 _CHIPDSEL
         spi-flash.s:80     .text:000000000000170a $t
         spi-flash.s:80     .text:000000000000170c CHIPDSEL
             forth.s:83     .text:0000000000001728 TPUSH
             forth.s:88     .text:000000000000172e TPOP
             forth.s:113    .text:000000000000174c COMPI_NEST
             forth.s:126    .text:000000000000176a TSTDIN
             forth.s:133    .text:0000000000001774 TSTDOUT
             forth.s:142    .text:000000000000177e $d
             forth.s:142    .text:0000000000001782 _QKEY
             forth.s:142    .text:0000000000001788 QKEY
             forth.s:143    .text:0000000000001788 QRX
             forth.s:145    .text:000000000000178c $d
             forth.s:1363   .text:0000000000002198 ATEXE
             forth.s:153    .text:000000000000179c _KEY
             forth.s:153    .text:00000000000017a0 $t
             forth.s:153    .text:00000000000017a0 KEY
             forth.s:155    .text:00000000000017a4 KEY1
             forth.s:156    .text:00000000000017a4 $d
             forth.s:165    .text:00000000000017bc _EMIT
             forth.s:166    .text:00000000000017c4 TECHO
             forth.s:168    .text:00000000000017c8 $d
ARM GAS  forth.s 			page 153


             forth.s:202    .text:00000000000017d8 _RAND
             forth.s:202    .text:00000000000017e0 RAND
             forth.s:204    .text:00000000000017e4 $d
             forth.s:768    .text:0000000000001c78 ABSS
             forth.s:944    .text:0000000000001db8 SEED
             forth.s:523    .text:0000000000001a88 RSHIFT
             forth.s:1214   .text:000000000000201c MODD
             forth.s:233    .text:0000000000001854 _PAUSE
             forth.s:233    .text:000000000000185a $t
             forth.s:233    .text:000000000000185c PAUSE
             forth.s:235    .text:0000000000001860 $d
             forth.s:962    .text:0000000000001de0 TIMER
             forth.s:237    .text:0000000000001868 PAUSE_LOOP
             forth.s:242    .text:0000000000001880 PAUSE_EXIT
             forth.s:249    .text:0000000000001888 _ULED
             forth.s:249    .text:0000000000001890 ULED
             forth.s:258    .text:00000000000018ac ULED_OFF
             forth.s:272    .text:00000000000018b0 $d
             forth.s:272    .text:00000000000018b4 _NOP
             forth.s:272    .text:00000000000018b8 $t
             forth.s:272    .text:00000000000018b8 NOP
             forth.s:289    .text:00000000000018c4 $d
             forth.s:289    .text:00000000000018c8 _EXECU
             forth.s:289    .text:00000000000018d0 $t
             forth.s:289    .text:00000000000018d0 EXECU
             forth.s:309    .text:00000000000018ec NEXT1
             forth.s:327    .text:0000000000001908 QBRAN1
             forth.s:344    .text:0000000000001914 $d
             forth.s:344    .text:0000000000001918 _EXIT
             forth.s:344    .text:0000000000001920 EXIT
             forth.s:345    .text:0000000000001920 $d
             forth.s:351    .text:0000000000001928 _STORE
             forth.s:351    .text:000000000000192a $t
             forth.s:361    .text:0000000000001938 $d
             forth.s:361    .text:000000000000193c _AT
             forth.s:361    .text:000000000000193e $t
             forth.s:369    .text:0000000000001944 $d
             forth.s:369    .text:0000000000001948 _CSTOR
             forth.s:379    .text:0000000000001958 $d
             forth.s:379    .text:000000000000195c _CAT
             forth.s:387    .text:0000000000001964 $d
             forth.s:387    .text:0000000000001968 _RFROM
             forth.s:396    .text:0000000000001976 $d
             forth.s:396    .text:000000000000197a _RAT
             forth.s:405    .text:000000000000198a $d
             forth.s:405    .text:000000000000198e _TOR
             forth.s:414    .text:000000000000199e $d
             forth.s:414    .text:00000000000019a2 _RPSTOR
             forth.s:414    .text:00000000000019a6 $t
             forth.s:414    .text:00000000000019a8 RPSTOR
             forth.s:423    .text:00000000000019b0 $d
             forth.s:423    .text:00000000000019b4 _SPSTOR
             forth.s:423    .text:00000000000019b8 $t
             forth.s:423    .text:00000000000019b8 SPSTOR
             forth.s:432    .text:00000000000019c0 $d
             forth.s:432    .text:00000000000019c4 _SPAT
             forth.s:432    .text:00000000000019c8 $t
ARM GAS  forth.s 			page 154


             forth.s:432    .text:00000000000019c8 SPAT
             forth.s:441    .text:00000000000019d0 $d
             forth.s:441    .text:00000000000019d4 _DROP
             forth.s:449    .text:00000000000019e2 $d
             forth.s:449    .text:00000000000019e6 _DUPP
             forth.s:449    .text:00000000000019ea $t
             forth.s:457    .text:00000000000019f2 $d
             forth.s:457    .text:00000000000019f6 _SWAP
             forth.s:467    .text:0000000000001a04 $d
             forth.s:467    .text:0000000000001a08 _OVER
             forth.s:476    .text:0000000000001a18 $d
             forth.s:476    .text:0000000000001a1c _ZLESS
             forth.s:476    .text:0000000000001a20 ZLESS
             forth.s:484    .text:0000000000001a26 $d
             forth.s:484    .text:0000000000001a2a _ANDD
             forth.s:484    .text:0000000000001a2e $t
             forth.s:493    .text:0000000000001a3a $d
             forth.s:493    .text:0000000000001a3e _ORR
             forth.s:502    .text:0000000000001a4e $d
             forth.s:502    .text:0000000000001a52 _XORR
             forth.s:502    .text:0000000000001a56 $t
             forth.s:511    .text:0000000000001a62 $d
             forth.s:511    .text:0000000000001a66 _UPLUS
             forth.s:511    .text:0000000000001a6a $t
             forth.s:511    .text:0000000000001a6c UPLUS
             forth.s:523    .text:0000000000001a7c $d
             forth.s:523    .text:0000000000001a80 _RSHIFT
             forth.s:532    .text:0000000000001a92 $d
             forth.s:532    .text:0000000000001a96 _LSHIFT
             forth.s:541    .text:0000000000001aaa $d
             forth.s:541    .text:0000000000001aae _PLUS
             forth.s:541    .text:0000000000001ab0 $t
             forth.s:550    .text:0000000000001ab8 $d
             forth.s:550    .text:0000000000001abc _SUBB
             forth.s:550    .text:0000000000001abe $t
             forth.s:559    .text:0000000000001aca $d
             forth.s:559    .text:0000000000001ace _STAR
             forth.s:559    .text:0000000000001ad0 $t
             forth.s:568    .text:0000000000001ada $d
             forth.s:568    .text:0000000000001ade _UMSTA
             forth.s:568    .text:0000000000001ae2 $t
             forth.s:568    .text:0000000000001ae4 UMSTA
             forth.s:579    .text:0000000000001af0 $d
             forth.s:579    .text:0000000000001af4 _MSTAR
             forth.s:579    .text:0000000000001af8 MSTAR
             forth.s:590    .text:0000000000001b04 $d
             forth.s:590    .text:0000000000001b08 _ONEP
             forth.s:598    .text:0000000000001b12 $d
             forth.s:598    .text:0000000000001b16 _ONEM
             forth.s:606    .text:0000000000001b22 $d
             forth.s:606    .text:0000000000001b26 _TWOP
             forth.s:606    .text:0000000000001b2c TWOP
             forth.s:614    .text:0000000000001b32 $d
             forth.s:614    .text:0000000000001b36 _TWOM
             forth.s:614    .text:0000000000001b3c TWOM
             forth.s:622    .text:0000000000001b42 $d
             forth.s:622    .text:0000000000001b46 _CELLP
ARM GAS  forth.s 			page 155


             forth.s:622    .text:0000000000001b4c $t
             forth.s:622    .text:0000000000001b4c CELLP
             forth.s:630    .text:0000000000001b52 $d
             forth.s:630    .text:0000000000001b56 _CELLM
             forth.s:630    .text:0000000000001b5c $t
             forth.s:630    .text:0000000000001b5c CELLM
             forth.s:638    .text:0000000000001b62 $d
             forth.s:638    .text:0000000000001b66 _BLANK
             forth.s:638    .text:0000000000001b6c BLANK
             forth.s:647    .text:0000000000001b76 $d
             forth.s:647    .text:0000000000001b7a _CELLS
             forth.s:647    .text:0000000000001b80 $t
             forth.s:647    .text:0000000000001b80 CELLS
             forth.s:655    .text:0000000000001b86 $d
             forth.s:655    .text:0000000000001b8a _CELLSL
             forth.s:655    .text:0000000000001b90 $t
             forth.s:655    .text:0000000000001b90 CELLSL
             forth.s:663    .text:0000000000001b96 $d
             forth.s:663    .text:0000000000001b9a _TWOST
             forth.s:663    .text:0000000000001ba0 TWOST
             forth.s:671    .text:0000000000001ba6 $d
             forth.s:671    .text:0000000000001baa _TWOSL
             forth.s:679    .text:0000000000001bb6 $d
             forth.s:679    .text:0000000000001bba _QDUP
             forth.s:689    .text:0000000000001bca $d
             forth.s:689    .text:0000000000001bce _ROT
             forth.s:689    .text:0000000000001bd2 $t
             forth.s:700    .text:0000000000001bde $d
             forth.s:700    .text:0000000000001be2 _NROT
             forth.s:700    .text:0000000000001be8 NROT
             forth.s:711    .text:0000000000001bf2 $d
             forth.s:711    .text:0000000000001bf6 _DDROP
             forth.s:711    .text:0000000000001bfc $t
             forth.s:720    .text:0000000000001c06 $d
             forth.s:720    .text:0000000000001c0a _TDROP
             forth.s:720    .text:0000000000001c10 $t
             forth.s:729    .text:0000000000001c1a $d
             forth.s:729    .text:0000000000001c1e _DDUP
             forth.s:739    .text:0000000000001c30 $d
             forth.s:739    .text:0000000000001c34 _DPLUS
             forth.s:739    .text:0000000000001c38 DPLUS
             forth.s:752    .text:0000000000001c4c $d
             forth.s:752    .text:0000000000001c50 _INVER
             forth.s:752    .text:0000000000001c54 $t
             forth.s:752    .text:0000000000001c54 INVER
             forth.s:760    .text:0000000000001c5a $d
             forth.s:760    .text:0000000000001c5e _NEGAT
             forth.s:760    .text:0000000000001c68 NEGAT
             forth.s:768    .text:0000000000001c6e $d
             forth.s:768    .text:0000000000001c72 _ABSS
             forth.s:768    .text:0000000000001c76 $t
             forth.s:778    .text:0000000000001c82 $d
             forth.s:778    .text:0000000000001c86 _ZEQUAL
             forth.s:778    .text:0000000000001c8c ZEQUAL
             forth.s:789    .text:0000000000001c9a $d
             forth.s:789    .text:0000000000001c9e _EQUAL
             forth.s:789    .text:0000000000001ca0 $t
ARM GAS  forth.s 			page 156


             forth.s:801    .text:0000000000001cb0 $d
             forth.s:801    .text:0000000000001cb4 _ULESS
             forth.s:813    .text:0000000000001cc8 $d
             forth.s:813    .text:0000000000001ccc _LESS
             forth.s:813    .text:0000000000001cce $t
             forth.s:813    .text:0000000000001cd0 LESS
             forth.s:825    .text:0000000000001ce0 $d
             forth.s:825    .text:0000000000001ce4 _GREAT
             forth.s:825    .text:0000000000001ce6 $t
             forth.s:825    .text:0000000000001ce8 GREAT
             forth.s:837    .text:0000000000001cf8 $d
             forth.s:837    .text:0000000000001cfc _MAX
             forth.s:837    .text:0000000000001d00 $t
             forth.s:837    .text:0000000000001d00 MAX
             forth.s:848    .text:0000000000001d0c $d
             forth.s:848    .text:0000000000001d10 _MIN
             forth.s:848    .text:0000000000001d14 $t
             forth.s:848    .text:0000000000001d14 MIN
             forth.s:859    .text:0000000000001d20 $d
             forth.s:859    .text:0000000000001d24 _PSTOR
             forth.s:859    .text:0000000000001d28 PSTOR
             forth.s:871    .text:0000000000001d38 $d
             forth.s:871    .text:0000000000001d3c _DSTOR
             forth.s:871    .text:0000000000001d40 DSTOR
             forth.s:883    .text:0000000000001d54 $d
             forth.s:883    .text:0000000000001d58 _DAT
             forth.s:883    .text:0000000000001d5c DAT
             forth.s:893    .text:0000000000001d66 $d
             forth.s:893    .text:0000000000001d6a _COUNT
             forth.s:893    .text:0000000000001d70 $t
             forth.s:903    .text:0000000000001d7c $d
             forth.s:903    .text:0000000000001d80 _DNEGA
             forth.s:903    .text:0000000000001d88 $t
             forth.s:903    .text:0000000000001d88 DNEGA
             forth.s:920    .text:0000000000001d98 DOVAR
             forth.s:931    .text:0000000000001da4 DOCON
             forth.s:944    .text:0000000000001dae $d
             forth.s:944    .text:0000000000001db2 _SEED
             forth.s:953    .text:0000000000001dc2 $d
             forth.s:953    .text:0000000000001dc6 _MSEC
             forth.s:953    .text:0000000000001dcc MSEC
             forth.s:962    .text:0000000000001dd6 $d
             forth.s:962    .text:0000000000001dda _TIMER
             forth.s:962    .text:0000000000001de0 $t
             forth.s:971    .text:0000000000001dea $d
             forth.s:971    .text:0000000000001dee _TBOOT
             forth.s:971    .text:0000000000001df4 $t
             forth.s:971    .text:0000000000001df4 TBOOT
             forth.s:980    .text:0000000000001dfe $d
             forth.s:980    .text:0000000000001e02 _BASE
             forth.s:990    .text:0000000000001e12 TEMP
             forth.s:999    .text:0000000000001e1c $d
             forth.s:999    .text:0000000000001e20 _SPAN
             forth.s:999    .text:0000000000001e28 SPAN
             forth.s:1008   .text:0000000000001e32 $d
             forth.s:1008   .text:0000000000001e36 _INN
             forth.s:1008   .text:0000000000001e3a $t
ARM GAS  forth.s 			page 157


             forth.s:1008   .text:0000000000001e3c INN
             forth.s:1018   .text:0000000000001e46 $d
             forth.s:1018   .text:0000000000001e4a _NTIB
             forth.s:1018   .text:0000000000001e50 NTIB
             forth.s:1027   .text:0000000000001e5a $d
             forth.s:1027   .text:0000000000001e5e _TEVAL
             forth.s:1027   .text:0000000000001e64 $t
             forth.s:1027   .text:0000000000001e64 TEVAL
             forth.s:1037   .text:0000000000001e6e $d
             forth.s:1037   .text:0000000000001e72 _HLD
             forth.s:1037   .text:0000000000001e76 $t
             forth.s:1037   .text:0000000000001e78 HLD
             forth.s:1047   .text:0000000000001e82 $d
             forth.s:1047   .text:0000000000001e86 _CNTXT
             forth.s:1047   .text:0000000000001e8e $t
             forth.s:1047   .text:0000000000001e90 CNTXT
             forth.s:1048   .text:0000000000001e90 CRRNT
             forth.s:1058   .text:0000000000001e9a $d
             forth.s:1058   .text:0000000000001e9e _CPP
             forth.s:1058   .text:0000000000001ea4 CPP
             forth.s:1068   .text:0000000000001eae $d
             forth.s:1068   .text:0000000000001eb2 _FCP
             forth.s:1068   .text:0000000000001eb6 $t
             forth.s:1068   .text:0000000000001eb8 FCP
             forth.s:1078   .text:0000000000001ec2 $d
             forth.s:1078   .text:0000000000001ec6 _LAST
             forth.s:1078   .text:0000000000001ecc LAST
             forth.s:1092   .text:0000000000001ed6 $d
             forth.s:1092   .text:0000000000001eda _USER_BEGIN
             forth.s:1092   .text:0000000000001ee8 USER_BEGIN
             forth.s:1096   .text:0000000000001ef0 USR_BGN_ADR
             forth.s:1097   .text:0000000000001ef0 $d
             forth.s:1103   .text:0000000000001ef8 _USER_END
             forth.s:1103   .text:0000000000001f04 USER_END
             forth.s:1107   .text:0000000000001f0c USER_END_ADR
             forth.s:1108   .text:0000000000001f0c $d
             forth.s:1120   .text:0000000000001f14 _WITHI
             forth.s:1120   .text:0000000000001f1c WITHI
             forth.s:1122   .text:0000000000001f20 $d
             forth.s:1137   .text:0000000000001f40 _UMMOD
             forth.s:1137   .text:0000000000001f48 UMMOD
             forth.s:1141   .text:0000000000001f52 UMMOD0
             forth.s:1148   .text:0000000000001f62 UMMOD1
             forth.s:1154   .text:0000000000001f6c UMMOD2
             forth.s:1167   .text:0000000000001f78 $d
             forth.s:1167   .text:0000000000001f7c _MSMOD
             forth.s:1167   .text:0000000000001f82 $t
             forth.s:1167   .text:0000000000001f84 MSMOD
             forth.s:1169   .text:0000000000001f88 $d
             forth.s:1178   .text:0000000000001fb0 MMOD1
             forth.s:1185   .text:0000000000001fcc MMOD2
             forth.s:1193   .text:0000000000001fec MMOD3
             forth.s:1201   .text:0000000000001ff4 _SLMOD
             forth.s:1203   .text:0000000000002000 $d
             forth.s:1214   .text:0000000000002018 _MODD
             forth.s:1214   .text:000000000000201c $t
             forth.s:1216   .text:0000000000002020 $d
ARM GAS  forth.s 			page 158


             forth.s:1225   .text:0000000000002030 _SLASH
             forth.s:1225   .text:0000000000002032 $t
             forth.s:1225   .text:0000000000002034 SLASH
             forth.s:1227   .text:0000000000002038 $d
             forth.s:1238   .text:000000000000204c _SSMOD
             forth.s:1238   .text:0000000000002052 $t
             forth.s:1238   .text:0000000000002054 SSMOD
             forth.s:1240   .text:0000000000002058 $d
             forth.s:1252   .text:0000000000002070 _STASL
             forth.s:1252   .text:0000000000002074 STASL
             forth.s:1254   .text:0000000000002078 $d
             forth.s:1268   .text:000000000000208c _ALGND
             forth.s:1268   .text:0000000000002094 $t
             forth.s:1268   .text:0000000000002094 ALGND
             forth.s:1279   .text:00000000000020a4 $d
             forth.s:1279   .text:00000000000020a8 _TCHAR
             forth.s:1279   .text:00000000000020ae $t
             forth.s:1279   .text:00000000000020b0 TCHAR
             forth.s:1281   .text:00000000000020b4 $d
             forth.s:1291   .text:00000000000020ec TCHA1
             forth.s:1299   .text:00000000000020f4 _DEPTH
             forth.s:1299   .text:00000000000020fa $t
             forth.s:1299   .text:00000000000020fc DEPTH
             forth.s:1311   .text:0000000000002114 $d
             forth.s:1311   .text:0000000000002118 _PICK
             forth.s:1311   .text:0000000000002120 PICK
             forth.s:1313   .text:0000000000002124 $d
             forth.s:1329   .text:0000000000002140 _HERE
             forth.s:1329   .text:0000000000002148 HERE
             forth.s:1331   .text:000000000000214c $d
             forth.s:1340   .text:000000000000215c _PAD
             forth.s:1340   .text:0000000000002160 $t
             forth.s:1342   .text:0000000000002164 $d
             forth.s:1353   .text:000000000000217c _TIB
             forth.s:1353   .text:0000000000002180 $t
             forth.s:1353   .text:0000000000002180 TIB
             forth.s:1363   .text:000000000000218a $d
             forth.s:1363   .text:000000000000218e _ATEXE
             forth.s:1376   .text:00000000000021ac $d
             forth.s:1376   .text:00000000000021b0 _CMOVE
             forth.s:1376   .text:00000000000021b6 $t
             forth.s:1376   .text:00000000000021b8 CMOVE
             forth.s:1383   .text:00000000000021ca CMOV1
             forth.s:1380   .text:00000000000021c2 CMOV0
             forth.s:1388   .text:00000000000021d4 CMOV2
             forth.s:1396   .text:00000000000021dc $d
             forth.s:1396   .text:00000000000021e0 _MOVE
             forth.s:1404   .text:00000000000021fe MOVE1
             forth.s:1401   .text:00000000000021f6 MOVE0
             forth.s:1409   .text:0000000000002208 MOVE2
             forth.s:1418   .text:0000000000002210 $d
             forth.s:1418   .text:0000000000002214 _FILL
             forth.s:1426   .text:000000000000222a FILL2
             forth.s:1422   .text:0000000000002222 FILL1
             forth.s:1436   .text:0000000000002232 $d
             forth.s:1436   .text:0000000000002236 _PACKS
             forth.s:1436   .text:000000000000223c $t
ARM GAS  forth.s 			page 159


             forth.s:1436   .text:000000000000223c PACKS
             forth.s:1438   .text:0000000000002240 $d
             forth.s:1467   .text:0000000000002298 _DIGIT
             forth.s:1467   .text:000000000000229e $t
             forth.s:1467   .text:00000000000022a0 DIGIT
             forth.s:1469   .text:00000000000022a4 $d
             forth.s:1484   .text:00000000000022d8 _EXTRC
             forth.s:1484   .text:00000000000022e0 $t
             forth.s:1484   .text:00000000000022e0 EXTRC
             forth.s:1486   .text:00000000000022e4 $d
             forth.s:1498   .text:0000000000002304 _BDIGS
             forth.s:1498   .text:0000000000002308 BDIGS
             forth.s:1500   .text:000000000000230c $d
             forth.s:1510   .text:0000000000002320 _HOLD
             forth.s:1512   .text:000000000000232c $d
             forth.s:1528   .text:0000000000002350 _DIG
             forth.s:1528   .text:0000000000002352 $t
             forth.s:1528   .text:0000000000002354 DIG
             forth.s:1530   .text:0000000000002358 $d
             forth.s:1542   .text:0000000000002370 _DIGS
             forth.s:1542   .text:0000000000002374 DIGS
             forth.s:1544   .text:0000000000002378 DIGS1
             forth.s:1545   .text:0000000000002378 $d
             forth.s:1549   .text:0000000000002390 DIGS2
             forth.s:1558   .text:0000000000002398 _SIGN
             forth.s:1558   .text:00000000000023a0 SIGN
             forth.s:1560   .text:00000000000023a4 $d
             forth.s:1564   .text:00000000000023bc SIGN1
             forth.s:1572   .text:00000000000023c4 _EDIGS
             forth.s:1572   .text:00000000000023c8 EDIGS
             forth.s:1574   .text:00000000000023cc $d
             forth.s:1589   .text:00000000000023e8 STRR
             forth.s:1590   .text:00000000000023e8 $t
             forth.s:1591   .text:00000000000023ec $d
             forth.s:1607   .text:0000000000002414 _HEX
             forth.s:1607   .text:0000000000002418 $t
             forth.s:1607   .text:0000000000002418 HEX
             forth.s:1609   .text:000000000000241c $d
             forth.s:1619   .text:0000000000002434 _DECIM
             forth.s:1619   .text:000000000000243c $t
             forth.s:1619   .text:000000000000243c DECIM
             forth.s:1621   .text:0000000000002440 $d
             forth.s:1636   .text:0000000000002458 _DIGTQ
             forth.s:1636   .text:0000000000002460 DIGTQ
             forth.s:1638   .text:0000000000002464 $d
             forth.s:1651   .text:00000000000024ac DGTQ1
             forth.s:1662   .text:00000000000024c0 _NUMBQ
             forth.s:1662   .text:00000000000024c8 $t
             forth.s:1662   .text:00000000000024c8 NUMBQ
             forth.s:1664   .text:00000000000024cc $d
             forth.s:1680   .text:0000000000002518 NUMQ1
             forth.s:1728   .text:00000000000025e0 NUMQ6
             forth.s:1696   .text:000000000000255c NUMQ2
             forth.s:1720   .text:00000000000025c4 NUMQ4
             forth.s:1717   .text:00000000000025b8 NUMQ3
             forth.s:1726   .text:00000000000025dc NUMQ5
             forth.s:1746   .text:00000000000025fc _SPACE
ARM GAS  forth.s 			page 160


             forth.s:1746   .text:0000000000002602 $t
             forth.s:1748   .text:0000000000002608 $d
             forth.s:1757   .text:0000000000002618 _SPACS
             forth.s:1757   .text:0000000000002620 SPACS
             forth.s:1759   .text:0000000000002624 $d
             forth.s:1765   .text:0000000000002640 CHAR2
             forth.s:1763   .text:000000000000263c CHAR1
             forth.s:1774   .text:0000000000002650 _TYPEE
             forth.s:1776   .text:000000000000265c $d
             forth.s:1782   .text:0000000000002674 TYPE2
             forth.s:1778   .text:0000000000002668 TYPE1
             forth.s:1792   .text:0000000000002688 _CR
             forth.s:1794   .text:0000000000002690 $d
             forth.s:1806   .text:00000000000026ac DOSTR
             forth.s:1807   .text:00000000000026ac $t
             forth.s:1809   .text:00000000000026b0 $d
             forth.s:1827   .text:00000000000026d8 STRQP
             forth.s:1828   .text:00000000000026d8 $t
             forth.s:1829   .text:00000000000026dc $d
             forth.s:1838   .text:00000000000026e4 DOTST
             forth.s:1839   .text:00000000000026e4 $t
             forth.s:1840   .text:00000000000026e8 $d
             forth.s:1850   .text:00000000000026f4 DOTQP
             forth.s:1851   .text:00000000000026f4 $t
             forth.s:1852   .text:00000000000026f8 $d
             forth.s:1862   .text:0000000000002708 _DOTR
             forth.s:1862   .text:000000000000270c DOTR
             forth.s:1864   .text:0000000000002710 $d
             forth.s:1879   .text:0000000000002734 _UDOTR
             forth.s:1879   .text:0000000000002738 $t
             forth.s:1879   .text:0000000000002738 UDOTR
             forth.s:1881   .text:000000000000273c $d
             forth.s:1897   .text:0000000000002768 _UDOT
             forth.s:1897   .text:000000000000276c UDOT
             forth.s:1899   .text:0000000000002770 $d
             forth.s:1912   .text:000000000000278c _DOT
             forth.s:1912   .text:000000000000278e $t
             forth.s:1914   .text:0000000000002794 $d
             forth.s:1921   .text:00000000000027b8 DOT1
             forth.s:1932   .text:00000000000027cc _QUEST
             forth.s:1932   .text:00000000000027ce $t
             forth.s:1932   .text:00000000000027d0 QUEST
             forth.s:1934   .text:00000000000027d4 $d
             forth.s:1948   .text:00000000000027e0 PARS
             forth.s:1949   .text:00000000000027e0 $t
             forth.s:1950   .text:00000000000027e4 $d
             forth.s:2016   .text:00000000000028f4 PARS8
             forth.s:1980   .text:0000000000002868 PARS3
             forth.s:1963   .text:0000000000002820 PARS1
             forth.s:1978   .text:0000000000002864 PARS2
             forth.s:1984   .text:0000000000002874 PARS4
             forth.s:1996   .text:00000000000028a4 PARS5
             forth.s:2003   .text:00000000000028c8 PARS6
             forth.s:2009   .text:00000000000028dc PARS7
             forth.s:2027   .text:0000000000002908 _PARSE
             forth.s:2027   .text:000000000000290e $t
             forth.s:2027   .text:0000000000002910 PARSE
ARM GAS  forth.s 			page 161


             forth.s:2029   .text:0000000000002914 $d
             forth.s:2050   .text:0000000000002954 _DOTPR
             forth.s:2050   .text:0000000000002958 DOTPR
             forth.s:2052   .text:000000000000295c $d
             forth.s:2063   .text:0000000000002974 _PAREN
             forth.s:2063   .text:0000000000002976 $t
             forth.s:2063   .text:0000000000002978 PAREN
             forth.s:2065   .text:000000000000297c $d
             forth.s:2076   .text:0000000000002994 _BKSLA
             forth.s:2076   .text:0000000000002996 $t
             forth.s:2076   .text:0000000000002998 BKSLA
             forth.s:2078   .text:000000000000299c $d
             forth.s:2089   .text:00000000000029b4 _CHAR
             forth.s:2089   .text:00000000000029bc CHAR
             forth.s:2091   .text:00000000000029c0 $d
             forth.s:2102   .text:00000000000029d8 _WORDD
             forth.s:2102   .text:00000000000029e0 WORDD
             forth.s:2104   .text:00000000000029e4 $d
             forth.s:2116   .text:00000000000029fc _TOKEN
             forth.s:2116   .text:0000000000002a02 $t
             forth.s:2116   .text:0000000000002a04 TOKEN
             forth.s:2118   .text:0000000000002a08 $d
             forth.s:2131   .text:0000000000002a18 _NAMET
             forth.s:2131   .text:0000000000002a1e $t
             forth.s:2131   .text:0000000000002a20 NAMET
             forth.s:2133   .text:0000000000002a24 $d
             forth.s:2152   .text:0000000000002a44 _SAMEQ
             forth.s:2152   .text:0000000000002a4a $t
             forth.s:2152   .text:0000000000002a4c SAMEQ
             forth.s:2154   .text:0000000000002a50 $d
             forth.s:2171   .text:0000000000002a98 SAME2
             forth.s:2156   .text:0000000000002a5c SAME1
             forth.s:2186   .text:0000000000002aac FIND
             forth.s:2187   .text:0000000000002aac $t
             forth.s:2188   .text:0000000000002ab0 $d
             forth.s:2195   .text:0000000000002acc FIND1
             forth.s:2215   .text:0000000000002b24 FIND6
             forth.s:2208   .text:0000000000002b0c FIND2
             forth.s:2213   .text:0000000000002b1c FIND3
             forth.s:2222   .text:0000000000002b3c FIND4
             forth.s:2228   .text:0000000000002b58 FIND5
             forth.s:2244   .text:0000000000002b80 _NAMEQ
             forth.s:2244   .text:0000000000002b86 $t
             forth.s:2244   .text:0000000000002b88 NAMEQ
             forth.s:2246   .text:0000000000002b8c $d
             forth.s:2260   .text:0000000000002b9c BKSP
             forth.s:2261   .text:0000000000002b9c $t
             forth.s:2262   .text:0000000000002ba0 $d
             forth.s:2276   .text:0000000000002be4 BACK1
             forth.s:2285   .text:0000000000002be8 TAP
             forth.s:2286   .text:0000000000002be8 $t
             forth.s:2287   .text:0000000000002bec $d
             forth.s:2299   .text:0000000000002c04 KTAP
             forth.s:2300   .text:0000000000002c04 TTAP
             forth.s:2301   .text:0000000000002c04 $t
             forth.s:2302   .text:0000000000002c08 $d
             forth.s:2316   .text:0000000000002c48 KTAP2
ARM GAS  forth.s 			page 162


             forth.s:2313   .text:0000000000002c40 KTAP1
             forth.s:2328   .text:0000000000002c60 _ACCEP
             forth.s:2330   .text:0000000000002c6c $d
             forth.s:2333   .text:0000000000002c78 ACCP1
             forth.s:2349   .text:0000000000002cc0 ACCP4
             forth.s:2345   .text:0000000000002cb4 ACCP2
             forth.s:2347   .text:0000000000002cb8 ACCP3
             forth.s:2360   .text:0000000000002cd4 _QUERY
             forth.s:2360   .text:0000000000002cda $t
             forth.s:2360   .text:0000000000002cdc QUERY
             forth.s:2362   .text:0000000000002ce0 $d
             forth.s:2382   .text:0000000000002d14 _ABORT
             forth.s:2382   .text:0000000000002d1a $t
             forth.s:2382   .text:0000000000002d1c ABORT
             forth.s:2384   .text:0000000000002d20 ABORT1
             forth.s:2385   .text:0000000000002d20 $d
             forth.s:2516   .text:0000000000002ec4 QUIT
             forth.s:2400   .text:0000000000002d48 ABORQ
             forth.s:2401   .text:0000000000002d48 $t
             forth.s:2402   .text:0000000000002d4c $d
             forth.s:2420   .text:0000000000002d70 _INTER
             forth.s:2422   .text:0000000000002d80 $d
             forth.s:2431   .text:0000000000002dbc INTE1
             forth.s:2428   .text:0000000000002db2 $t
             forth.s:2429   .text:0000000000002db4 $d
             forth.s:2435   .text:0000000000002dcc INTE2
             forth.s:2442   .text:0000000000002dd4 _LBRAC
             forth.s:2442   .text:0000000000002dd6 $t
             forth.s:2442   .text:0000000000002dd8 LBRAC
             forth.s:2444   .text:0000000000002ddc $d
             forth.s:2454   .text:0000000000002df4 _DOTOK
             forth.s:2454   .text:0000000000002df8 $t
             forth.s:2454   .text:0000000000002df8 DOTOK
             forth.s:2456   .text:0000000000002dfc $d
             forth.s:2462   .text:0000000000002e20 DOTO1
             forth.s:2463   .text:0000000000002e20 $d
             forth.s:2471   .text:0000000000002e2c _QSTAC
             forth.s:2471   .text:0000000000002e34 QSTAC
             forth.s:2473   .text:0000000000002e38 $d
             forth.s:2475   .text:0000000000002e4e $t
             forth.s:2476   .text:0000000000002e50 $d
             forth.s:2483   .text:0000000000002e58 _EVAL
             forth.s:2485   .text:0000000000002e64 EVAL1
             forth.s:2486   .text:0000000000002e64 $d
             forth.s:2494   .text:0000000000002e8c EVAL2
             forth.s:2504   .text:0000000000002e9c _PRESE
             forth.s:2506   .text:0000000000002ea8 $d
             forth.s:2516   .text:0000000000002ebc _QUIT
             forth.s:2517   .text:0000000000002ec4 $d
             forth.s:2519   .text:0000000000002ed0 QUIT1
             forth.s:2521   .text:0000000000002ed4 QUIT2
             forth.s:2531   .text:0000000000002ee8 _FORGET
             forth.s:2531   .text:0000000000002ef0 FORGET
             forth.s:2533   .text:0000000000002ef4 $d
             forth.s:2950   .text:000000000000339c OVERT
             forth.s:2561   .text:0000000000002f3c $d
             forth.s:2561   .text:0000000000002f40 _TICK
ARM GAS  forth.s 			page 163


             forth.s:2561   .text:0000000000002f42 $t
             forth.s:2561   .text:0000000000002f44 TICK
             forth.s:2563   .text:0000000000002f48 $d
             forth.s:2567   .text:0000000000002f5c TICK1
             forth.s:2575   .text:0000000000002f64 _ALLOT
             forth.s:2575   .text:0000000000002f6a $t
             forth.s:2575   .text:0000000000002f6c ALLOT
             forth.s:2577   .text:0000000000002f70 $d
             forth.s:2586   .text:0000000000002f80 _COMMA
             forth.s:2586   .text:0000000000002f82 $t
             forth.s:2586   .text:0000000000002f84 COMMA
             forth.s:2588   .text:0000000000002f88 $d
             forth.s:2602   .text:0000000000002fa4 $d
             forth.s:2602   .text:0000000000002fa8 _BCOMP
             forth.s:2602   .text:0000000000002fb2 $t
             forth.s:2602   .text:0000000000002fb4 BCOMP
             forth.s:2604   .text:0000000000002fb8 $d
             forth.s:2614   .text:0000000000002fc8 _COMPI
             forth.s:2614   .text:0000000000002fd0 $t
             forth.s:2614   .text:0000000000002fd0 COMPI
             forth.s:2616   .text:0000000000002fd4 $d
             forth.s:2632   .text:0000000000003000 _LITER
             forth.s:2632   .text:0000000000003008 $t
             forth.s:2632   .text:0000000000003008 LITER
             forth.s:2634   .text:000000000000300c $d
             forth.s:2989   .text:00000000000033f8 CALLC
             forth.s:2644   .text:0000000000003020 STRCQ
             forth.s:2645   .text:0000000000003020 $t
             forth.s:2646   .text:0000000000003024 $d
             forth.s:2668   .text:000000000000305c _FOR
             forth.s:2668   .text:0000000000003060 $t
             forth.s:2668   .text:0000000000003060 FOR
             forth.s:2670   .text:0000000000003064 $d
             forth.s:2680   .text:000000000000307c _BEGIN
             forth.s:2680   .text:0000000000003082 $t
             forth.s:2680   .text:0000000000003084 BEGIN
             forth.s:2682   .text:0000000000003088 $d
             forth.s:2691   .text:0000000000003090 $d
             forth.s:2691   .text:0000000000003094 _FNEXT
             forth.s:2691   .text:000000000000309c FNEXT
             forth.s:2693   .text:00000000000030a0 $d
             forth.s:2702   .text:00000000000030b8 _UNTIL
             forth.s:2702   .text:00000000000030be $t
             forth.s:2702   .text:00000000000030c0 UNTIL
             forth.s:2704   .text:00000000000030c4 $d
             forth.s:2713   .text:00000000000030dc _AGAIN
             forth.s:2713   .text:00000000000030e2 $t
             forth.s:2713   .text:00000000000030e4 AGAIN
             forth.s:2715   .text:00000000000030e8 $d
             forth.s:2724   .text:0000000000003100 _IFF
             forth.s:2724   .text:0000000000003104 IFF
             forth.s:2726   .text:0000000000003108 $d
             forth.s:2738   .text:0000000000003130 _AHEAD
             forth.s:2738   .text:0000000000003136 $t
             forth.s:2738   .text:0000000000003138 AHEAD
             forth.s:2740   .text:000000000000313c $d
             forth.s:2752   .text:0000000000003164 _REPEA
ARM GAS  forth.s 			page 164


             forth.s:2752   .text:000000000000316c REPEA
             forth.s:2754   .text:0000000000003170 $d
             forth.s:2765   .text:0000000000003188 _THENN
             forth.s:2765   .text:0000000000003190 THENN
             forth.s:2767   .text:0000000000003194 $d
             forth.s:2778   .text:00000000000031a8 _AFT
             forth.s:2778   .text:00000000000031ac $t
             forth.s:2778   .text:00000000000031ac AFT
             forth.s:2780   .text:00000000000031b0 $d
             forth.s:2792   .text:00000000000031c8 _ELSEE
             forth.s:2792   .text:00000000000031d0 ELSEE
             forth.s:2794   .text:00000000000031d4 $d
             forth.s:2804   .text:00000000000031e8 _WHILE
             forth.s:2804   .text:00000000000031ee $t
             forth.s:2804   .text:00000000000031f0 WHILE
             forth.s:2806   .text:00000000000031f4 $d
             forth.s:2815   .text:0000000000003204 _ABRTQ
             forth.s:2815   .text:000000000000320c ABRTQ
             forth.s:2817   .text:0000000000003210 $d
             forth.s:2826   .text:0000000000003228 _STRQ
             forth.s:2826   .text:000000000000322c STRQ
             forth.s:2828   .text:0000000000003230 $d
             forth.s:2838   .text:0000000000003248 _DOTQ
             forth.s:2838   .text:000000000000324c DOTQ
             forth.s:2840   .text:0000000000003250 $d
             forth.s:2854   .text:0000000000003268 _UNIQU
             forth.s:2854   .text:0000000000003270 $t
             forth.s:2854   .text:0000000000003270 UNIQU
             forth.s:2856   .text:0000000000003274 $d
             forth.s:2863   .text:000000000000329c UNIQ1
             forth.s:2860   .text:0000000000003290 $d
             forth.s:2873   .text:00000000000032a4 SNAME
             forth.s:2874   .text:00000000000032a4 $t
             forth.s:2875   .text:00000000000032a8 $d
             forth.s:2891   .text:00000000000032ec SNAM1
             forth.s:2903   .text:0000000000003300 _SCOMP
             forth.s:2903   .text:000000000000330c SCOMP
             forth.s:2905   .text:0000000000003310 $d
             forth.s:2917   .text:0000000000003348 SCOM2
             forth.s:2914   .text:0000000000003340 SCOM1
             forth.s:2922   .text:000000000000335c SCOM3
             forth.s:2931   .text:0000000000003364 COLON_ABORT
             forth.s:2932   .text:0000000000003364 $t
             forth.s:2933   .text:0000000000003368 $d
             forth.s:2950   .text:0000000000003394 _OVERT
             forth.s:2950   .text:000000000000339a $t
             forth.s:2952   .text:00000000000033a0 $d
             forth.s:2963   .text:00000000000033b8 _SEMIS
             forth.s:2963   .text:00000000000033ba $t
             forth.s:2963   .text:00000000000033bc SEMIS
             forth.s:2965   .text:00000000000033c0 $d
             forth.s:2977   .text:00000000000033dc _RBRAC
             forth.s:2977   .text:00000000000033de $t
             forth.s:2977   .text:00000000000033e0 RBRAC
             forth.s:2979   .text:00000000000033e4 $d
             forth.s:2990   .text:00000000000033f8 $t
             forth.s:2991   .text:00000000000033fc $d
ARM GAS  forth.s 			page 165


             forth.s:3003   .text:0000000000003414 _COLON
             forth.s:3003   .text:0000000000003416 $t
             forth.s:3003   .text:0000000000003418 COLON
             forth.s:3005   .text:000000000000341c $d
             forth.s:3016   .text:0000000000003434 _IMMED
             forth.s:3016   .text:000000000000343e $t
             forth.s:3016   .text:0000000000003440 IMMED
             forth.s:3018   .text:0000000000003444 $d
             forth.s:3036   .text:0000000000003470 _CONST
             forth.s:3036   .text:000000000000347c CONST
             forth.s:3038   .text:0000000000003480 $d
             forth.s:3049   .text:00000000000034b0 $t
             forth.s:3056   .text:00000000000034b0 DODOES
             forth.s:3058   .text:00000000000034b4 $d
             forth.s:3073   .text:00000000000034d8 $d
             forth.s:3073   .text:00000000000034dc _DOES
             forth.s:3073   .text:00000000000034e2 $t
             forth.s:3073   .text:00000000000034e4 DOES
             forth.s:3075   .text:00000000000034e8 $d
             forth.s:3090   .text:0000000000003518 _DEFERAT
             forth.s:3090   .text:0000000000003520 DEFERAT
             forth.s:3092   .text:0000000000003524 $d
             forth.s:3102   .text:000000000000353c _DEFERSTO
             forth.s:3102   .text:0000000000003544 DEFERSTO
             forth.s:3104   .text:0000000000003548 $d
             forth.s:3115   .text:0000000000003564 _DEFER
             forth.s:3115   .text:000000000000356a $t
             forth.s:3115   .text:000000000000356c DEFER
             forth.s:3117   .text:0000000000003570 $d
             forth.s:3138   .text:00000000000035bc CREAT
             forth.s:3128   .text:00000000000035a4 DEFER_NOP
             forth.s:3129   .text:00000000000035a4 $t
             forth.s:3130   .text:00000000000035a8 $d
             forth.s:3138   .text:00000000000035b4 _CREAT
             forth.s:3140   .text:00000000000035c0 $d
             forth.s:3153   .text:00000000000035e4 _VARIA
             forth.s:3153   .text:00000000000035f0 VARIA
             forth.s:3155   .text:00000000000035f4 $d
             forth.s:3172   .text:0000000000003614 DMP
             forth.s:3173   .text:0000000000003614 $t
             forth.s:3174   .text:0000000000003618 $d
             forth.s:3186   .text:0000000000003650 PDUM2
             forth.s:3180   .text:0000000000003638 PDUM1
             forth.s:3198   .text:000000000000365c $d
             forth.s:3198   .text:0000000000003660 _DUMP
             forth.s:3198   .text:0000000000003668 DUMP
             forth.s:3200   .text:000000000000366c $d
             forth.s:3218   .text:00000000000036bc DUMP4
             forth.s:3208   .text:0000000000003694 DUMP1
             forth.s:3220   .text:00000000000036c4 DUMP3
             forth.s:3232   .text:00000000000036dc _DOTS
             forth.s:3232   .text:00000000000036e0 DOTS
             forth.s:3234   .text:00000000000036e4 $d
             forth.s:3242   .text:0000000000003704 DOTS2
             forth.s:3238   .text:00000000000036f8 DOTS1
             forth.s:3252   .text:0000000000003718 _TNAME
             forth.s:3252   .text:000000000000371e $t
ARM GAS  forth.s 			page 166


             forth.s:3252   .text:0000000000003720 TNAME
             forth.s:3254   .text:0000000000003724 $d
             forth.s:3257   .text:0000000000003730 TNAM1
             forth.s:3268   .text:0000000000003764 TNAM2
             forth.s:3277   .text:0000000000003774 _DOTID
             forth.s:3277   .text:0000000000003778 $t
             forth.s:3277   .text:0000000000003778 DOTID
             forth.s:3279   .text:000000000000377c $d
             forth.s:3286   .text:00000000000037a0 DOTI1
             forth.s:3287   .text:00000000000037ae $t
             forth.s:3288   .text:00000000000037b0 $d
             forth.s:3290   *ABS*:0000000000000000 WANT_SEE
             forth.s:3363   .text:00000000000037b8 _WORDS
             forth.s:3363   .text:00000000000037be $t
             forth.s:3363   .text:00000000000037c0 WORDS
             forth.s:3365   .text:00000000000037c4 $d
             forth.s:3368   .text:00000000000037d0 WORS1
             forth.s:3377   .text:00000000000037f8 WORS2
             forth.s:3390   .text:00000000000037fc VERSN
             forth.s:3391   .text:00000000000037fc $t
             forth.s:3392   .text:0000000000003800 $d
             forth.s:3400   .text:0000000000003810 _HI
             forth.s:3402   .text:0000000000003818 $d
             forth.s:3403   .text:0000000000003832 $t
             forth.s:3404   .text:0000000000003834 $d
             forth.s:3425   .text:0000000000003878 PS2_QUERY
             forth.s:3426   .text:0000000000003878 $t
             forth.s:3427   .text:000000000000387c $d
             forth.s:3434   .text:00000000000038b6 $t
             forth.s:3435   .text:00000000000038b8 $d
             forth.s:3445   .text:00000000000038c4 IF_SENSE
             forth.s:3446   .text:00000000000038c4 $t
             forth.s:3447   .text:00000000000038c8 $d
             forth.s:3473   .text:0000000000003918 COLD1
             forth.s:3474   .text:0000000000003918 $d
             forth.s:3487   .text:0000000000003960 COLD2
             forth.s:3490   .text:0000000000003960 $d
             forth.s:3493   .text:0000000000003964 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:000000000000053f $d
          ser-term.s:90     .text:0000000000000540 $t
          ser-term.s:110    .text:0000000000000579 $d
          ser-term.s:110    .text:000000000000057a $t
          ser-term.s:133    .text:00000000000005b7 $d
          ser-term.s:133    .text:00000000000005b8 $t
          ser-term.s:164    .text:00000000000005ff $d
          ser-term.s:164    .text:0000000000000600 $t
          ser-term.s:191    .text:0000000000000675 $d
          ser-term.s:191    .text:0000000000000676 $t
          ser-term.s:203    .text:00000000000006a3 $d
          ser-term.s:203    .text:00000000000006a4 $t
             tvout.s:250    .text:00000000000008e9 $d
             tvout.s:250    .text:00000000000008ea $t
             tvout.s:264    .text:000000000000091f $d
             tvout.s:264    .text:0000000000000920 $t
             tvout.s:292    .text:0000000000000979 $d
ARM GAS  forth.s 			page 167


             tvout.s:292    .text:000000000000097a $t
             tvout.s:311    .text:00000000000009a7 $d
             tvout.s:311    .text:00000000000009a8 $t
             tvout.s:411    .text:0000000000000ae1 $d
             tvout.s:411    .text:0000000000000ae2 $t
             tvout.s:645    .text:0000000000000e21 $d
             tvout.s:645    .text:0000000000000e22 $t
           ps2_kbd.s:306    .text:0000000000001267 $d
           ps2_kbd.s:306    .text:0000000000001268 $t
           ps2_kbd.s:391    .text:0000000000001351 $d
           ps2_kbd.s:391    .text:0000000000001352 $t
           ps2_kbd.s:611    .text:00000000000015eb $d
           ps2_kbd.s:611    .text:00000000000015ec $t
           ps2_kbd.s:629    .text:000000000000162b $d
           ps2_kbd.s:629    .text:000000000000162c $t
         spi-flash.s:68     .text:00000000000016df $d
         spi-flash.s:68     .text:00000000000016e0 $t
             forth.s:142    .text:0000000000001787 $d
             forth.s:142    .text:0000000000001788 $t
             forth.s:165    .text:00000000000017c1 $d
             forth.s:165    .text:00000000000017c2 $t
             forth.s:202    .text:00000000000017df $d
             forth.s:202    .text:00000000000017e0 $t
             forth.s:249    .text:000000000000188d $d
             forth.s:249    .text:000000000000188e $t
             forth.s:344    .text:000000000000191d $d
             forth.s:344    .text:000000000000191e $t
             forth.s:369    .text:000000000000194b $d
             forth.s:369    .text:000000000000194c $t
             forth.s:379    .text:000000000000195f $d
             forth.s:379    .text:0000000000001960 $t
             forth.s:387    .text:000000000000196b $d
             forth.s:387    .text:000000000000196c $t
             forth.s:396    .text:000000000000197d $d
             forth.s:396    .text:000000000000197e $t
             forth.s:405    .text:0000000000001991 $d
             forth.s:405    .text:0000000000001992 $t
             forth.s:441    .text:00000000000019d9 $d
             forth.s:441    .text:00000000000019da $t
             forth.s:457    .text:00000000000019fb $d
             forth.s:457    .text:00000000000019fc $t
             forth.s:467    .text:0000000000001a0d $d
             forth.s:467    .text:0000000000001a0e $t
             forth.s:476    .text:0000000000001a1f $d
             forth.s:476    .text:0000000000001a20 $t
             forth.s:493    .text:0000000000001a41 $d
             forth.s:493    .text:0000000000001a42 $t
             forth.s:523    .text:0000000000001a87 $d
             forth.s:523    .text:0000000000001a88 $t
             forth.s:532    .text:0000000000001a9d $d
             forth.s:532    .text:0000000000001a9e $t
             forth.s:579    .text:0000000000001af7 $d
             forth.s:579    .text:0000000000001af8 $t
             forth.s:590    .text:0000000000001b0b $d
             forth.s:590    .text:0000000000001b0c $t
             forth.s:598    .text:0000000000001b19 $d
             forth.s:598    .text:0000000000001b1a $t
ARM GAS  forth.s 			page 168


             forth.s:606    .text:0000000000001b29 $d
             forth.s:606    .text:0000000000001b2a $t
             forth.s:614    .text:0000000000001b39 $d
             forth.s:614    .text:0000000000001b3a $t
             forth.s:638    .text:0000000000001b69 $d
             forth.s:638    .text:0000000000001b6a $t
             forth.s:663    .text:0000000000001b9d $d
             forth.s:663    .text:0000000000001b9e $t
             forth.s:671    .text:0000000000001bad $d
             forth.s:671    .text:0000000000001bae $t
             forth.s:679    .text:0000000000001bbf $d
             forth.s:679    .text:0000000000001bc0 $t
             forth.s:700    .text:0000000000001be7 $d
             forth.s:700    .text:0000000000001be8 $t
             forth.s:729    .text:0000000000001c23 $d
             forth.s:729    .text:0000000000001c24 $t
             forth.s:739    .text:0000000000001c37 $d
             forth.s:739    .text:0000000000001c38 $t
             forth.s:760    .text:0000000000001c65 $d
             forth.s:760    .text:0000000000001c66 $t
             forth.s:778    .text:0000000000001c89 $d
             forth.s:778    .text:0000000000001c8a $t
             forth.s:801    .text:0000000000001cb7 $d
             forth.s:801    .text:0000000000001cb8 $t
             forth.s:859    .text:0000000000001d27 $d
             forth.s:859    .text:0000000000001d28 $t
             forth.s:871    .text:0000000000001d3f $d
             forth.s:871    .text:0000000000001d40 $t
             forth.s:883    .text:0000000000001d5b $d
             forth.s:883    .text:0000000000001d5c $t
             forth.s:944    .text:0000000000001db7 $d
             forth.s:944    .text:0000000000001db8 $t
             forth.s:953    .text:0000000000001dcb $d
             forth.s:953    .text:0000000000001dcc $t
             forth.s:980    .text:0000000000001e07 $d
             forth.s:980    .text:0000000000001e08 $t
             forth.s:999    .text:0000000000001e25 $d
             forth.s:999    .text:0000000000001e26 $t
             forth.s:1018   .text:0000000000001e4f $d
             forth.s:1018   .text:0000000000001e50 $t
             forth.s:1058   .text:0000000000001ea1 $d
             forth.s:1058   .text:0000000000001ea2 $t
             forth.s:1078   .text:0000000000001ecb $d
             forth.s:1078   .text:0000000000001ecc $t
             forth.s:1092   .text:0000000000001ee5 $d
             forth.s:1092   .text:0000000000001ee6 $t
             forth.s:1103   .text:0000000000001f01 $d
             forth.s:1103   .text:0000000000001f02 $t
             forth.s:1120   .text:0000000000001f1b $d
             forth.s:1120   .text:0000000000001f1c $t
             forth.s:1137   .text:0000000000001f47 $d
             forth.s:1137   .text:0000000000001f48 $t
             forth.s:1201   .text:0000000000001ff9 $d
             forth.s:1201   .text:0000000000001ffa $t
             forth.s:1252   .text:0000000000002073 $d
             forth.s:1252   .text:0000000000002074 $t
             forth.s:1311   .text:000000000000211d $d
ARM GAS  forth.s 			page 169


             forth.s:1311   .text:000000000000211e $t
             forth.s:1329   .text:0000000000002145 $d
             forth.s:1329   .text:0000000000002146 $t
             forth.s:1363   .text:0000000000002197 $d
             forth.s:1363   .text:0000000000002198 $t
             forth.s:1396   .text:00000000000021e5 $d
             forth.s:1396   .text:00000000000021e6 $t
             forth.s:1418   .text:0000000000002219 $d
             forth.s:1418   .text:000000000000221a $t
             forth.s:1498   .text:0000000000002307 $d
             forth.s:1498   .text:0000000000002308 $t
             forth.s:1510   .text:0000000000002325 $d
             forth.s:1510   .text:0000000000002326 $t
             forth.s:1542   .text:0000000000002373 $d
             forth.s:1542   .text:0000000000002374 $t
             forth.s:1558   .text:000000000000239d $d
             forth.s:1558   .text:000000000000239e $t
             forth.s:1572   .text:00000000000023c7 $d
             forth.s:1572   .text:00000000000023c8 $t
             forth.s:1636   .text:000000000000245f $d
             forth.s:1636   .text:0000000000002460 $t
             forth.s:1757   .text:000000000000261f $d
             forth.s:1757   .text:0000000000002620 $t
             forth.s:1774   .text:0000000000002655 $d
             forth.s:1774   .text:0000000000002656 $t
             forth.s:1792   .text:000000000000268b $d
             forth.s:1792   .text:000000000000268c $t
             forth.s:1862   .text:000000000000270b $d
             forth.s:1862   .text:000000000000270c $t
             forth.s:1897   .text:000000000000276b $d
             forth.s:1897   .text:000000000000276c $t
             forth.s:2050   .text:0000000000002957 $d
             forth.s:2050   .text:0000000000002958 $t
             forth.s:2089   .text:00000000000029b9 $d
             forth.s:2089   .text:00000000000029ba $t
             forth.s:2102   .text:00000000000029dd $d
             forth.s:2102   .text:00000000000029de $t
             forth.s:2328   .text:0000000000002c67 $d
             forth.s:2328   .text:0000000000002c68 $t
             forth.s:2420   .text:0000000000002d7b $d
             forth.s:2420   .text:0000000000002d7c $t
             forth.s:2471   .text:0000000000002e33 $d
             forth.s:2471   .text:0000000000002e34 $t
             forth.s:2483   .text:0000000000002e5d $d
             forth.s:2483   .text:0000000000002e5e $t
             forth.s:2504   .text:0000000000002ea3 $d
             forth.s:2504   .text:0000000000002ea4 $t
             forth.s:2516   .text:0000000000002ec1 $d
             forth.s:2516   .text:0000000000002ec2 $t
             forth.s:2531   .text:0000000000002eef $d
             forth.s:2531   .text:0000000000002ef0 $t
             forth.s:2691   .text:0000000000003099 $d
             forth.s:2691   .text:000000000000309a $t
             forth.s:2724   .text:0000000000003103 $d
             forth.s:2724   .text:0000000000003104 $t
             forth.s:2752   .text:000000000000316b $d
             forth.s:2752   .text:000000000000316c $t
ARM GAS  forth.s 			page 170


             forth.s:2765   .text:000000000000318d $d
             forth.s:2765   .text:000000000000318e $t
             forth.s:2792   .text:00000000000031cd $d
             forth.s:2792   .text:00000000000031ce $t
             forth.s:2815   .text:000000000000320b $d
             forth.s:2815   .text:000000000000320c $t
             forth.s:2826   .text:000000000000322b $d
             forth.s:2826   .text:000000000000322c $t
             forth.s:2838   .text:000000000000324b $d
             forth.s:2838   .text:000000000000324c $t
             forth.s:2903   .text:0000000000003309 $d
             forth.s:2903   .text:000000000000330a $t
             forth.s:3036   .text:0000000000003479 $d
             forth.s:3036   .text:000000000000347a $t
             forth.s:3090   .text:000000000000351f $d
             forth.s:3090   .text:0000000000003520 $t
             forth.s:3102   .text:0000000000003543 $d
             forth.s:3102   .text:0000000000003544 $t
             forth.s:3138   .text:00000000000035bb $d
             forth.s:3138   .text:00000000000035bc $t
             forth.s:3153   .text:00000000000035ed $d
             forth.s:3153   .text:00000000000035ee $t
             forth.s:3198   .text:0000000000003665 $d
             forth.s:3198   .text:0000000000003666 $t
             forth.s:3232   .text:00000000000036df $d
             forth.s:3232   .text:00000000000036e0 $t
             forth.s:3400   .text:0000000000003813 $d
             forth.s:3400   .text:0000000000003814 $t
             forth.s:3467   .text:0000000000003901 $d
             forth.s:3467   .text:0000000000003902 $t

UNDEFINED SYMBOLS
_mstack
