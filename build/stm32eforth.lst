ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      CBF95DF8 
 157      04EB
 158 000a DFF8CCC6 	  ldr IP,=dh
 159 000e 02F0B1BA 	  b INEXT  
 160              	dh:
 161 0012 05420000 	  _ADR PRESE
 162 0016 BD380000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 C5250000 	  _ADR CFSR 
 164 0038 D5280000 	  _ADR DUPP
 165 003c 51280000 	  _ADR TOR 
 166 0040 3B270000 	  _DOLIT 16 
 166      10000000 
 167 0048 D12D0000 	  _ADR BASE 
 168 004c AD270000 	  _ADR STORE 
 169 0050 41390000 	  _ADR UDOT 
 170 0054 BD380000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 0D280000 	  _ADR RFROM
 172 0068 3B270000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 19290000 	  _ADR ANDD
 174 0074 7B270000 	  _QBRAN 1f
 174      94000000 
 175 007c E9250000 	  _ADR BFAR
 176 0080 3B270000 	  _DOLIT ','
 176      2C000000 
 177 0088 45260000 	  _ADR EMIT 
 178 008c CD370000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 41390000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 BD380000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 8D1D0000 	  _ADR FPSCR
 184 00a8 41390000 	  _ADR UDOT 
 185              	1:
 186 00ac 39030000 	  _ADR reset_mcu 
 187              	
 188              	  
 189              	
 190              	/*********************************
 191              	   fpu exception 
 192              	*********************************/
 193              	  .type fpu_exception, %function 
 194              	  .global fpu_exception 
 195              	  .p2align 2 
 196              	fpu_exception:
 197 00b0 4FF00000 	  _MOV32 r0,RAM_END 
 197      C2F20200 
 198 00b8 8546     	  mov sp,r0 
 199 00ba DFF820C6 	  ldr IP,=fpu_except 
 200 00be 02F059BA 	  b INEXT 
 201              	fpu_except:  
 202 00c2 05420000 	  _ADR PRESE
 203 00c6 55380000 	  _ADR CR  
 204 00ca 3B270000 	  _DOLIT 16 
 204      10000000 
 205 00d2 D12D0000 	  _ADR BASE 
 206 00d6 AD270000 	  _ADR STORE 
 207 00da BD380000 	  _DOTQP 21 , "fpu exception FPSCR: "
 207      15667075 
 207      20657863 
 207      65707469 
 207      6F6E2046 
 208 00f4 8D1D0000 	  _ADR FPSCR 
 209 00f8 41390000 	  _ADR UDOT 
 210 00fc 55380000 	  _ADR CR 
 211 0100 39030000 	  _ADR reset_mcu 
 212              	
 213              	
 214              	
 215              	/*********************************
 216              	  non maskable interrupt handler
 217              	  irq -14 
 218              	*********************************/
 219              	  .type nmi_handler, %function
 220              	  .p2align 2
 221              	  .global nmi_handler 
 222              	nmi_handler:
 223 0104 DFF8D8C5 	  ldr IP,=nmi_hl 
 224 0108 02F034BA 	  b  INEXT
 225              	nmi_hl:
 226 010c 05420000 	  _ADR PRESE 
ARM GAS  forth.s 			page 16


 227 0110 55380000 	  _ADR CR 
 228 0114 BD380000 	  _DOTQP  25 , "not managed nmi exception"
 228      196E6F74 
 228      206D616E 
 228      61676564 
 228      206E6D69 
 229 0134 55380000 	  _ADR CR 
 230 0138 7D400000 	  _ADR ABORT 
 231              	   
 232              	
 233              	/***********************************
 234              	   hard fault handler
 235              	   irq -13
 236              	***********************************/
 237              	  .type hardfault_handler, %function
 238              	  .p2align 2
 239              	  .global hardfault_handler 
 240              	hardfault_handler:
 241 013c 4FF00000 	  _MOV32 r0,RAM_END 
 241      C2F20200 
 242 0144 8546     	  mov sp,r0 
 243 0146 DFF89CC5 	  ldr IP,=hardfault_hl 
 244 014a 02F013BA 	  b INEXT
 245              	hardfault_hl:
 246 014e 05420000 	  _ADR PRESE
 247 0152 55380000 	  _ADR CR  
 248 0156 BD380000 	  _DOTQP  20 , "hard fault exception"
 248      14686172 
 248      64206661 
 248      756C7420 
 248      65786365 
 249 0170 55380000 	  _ADR CR 
 250 0174 39030000 	  _ADR reset_mcu
 251              	
 252              	/***********************************
 253              	   memory manager fault 
 254              	   irq -12 
 255              	************************************/
 256              	  .type memfault_handler, %function
 257              	  .p2align 2
 258              	  .global memfault_handler 
 259              	memfault_handler:
 260 0178 4FF00000 	  _MOV32 r0,RAM_END 
 260      C2F20200 
 261 0180 8546     	  mov sp,r0 
 262 0182 DFF864C5 	  ldr IP,=memfault_hl 
 263 0186 02F0F5B9 	  b INEXT 
 264              	memfault_hl: 
 265 018a 05420000 	  _ADR PRESE
 266 018e 55380000 	  _ADR CR  
 267 0192 BD380000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 267      216D656D 
 267      6F727920 
 267      6D616E61 
 267      67657220 
 268 01b8 3B270000 	  _DOLIT 16 
 268      10000000 
ARM GAS  forth.s 			page 17


 269 01c0 D12D0000 	  _ADR BASE 
 270 01c4 AD270000 	  _ADR STORE   
 271 01c8 C5250000 	  _ADR CFSR
 272 01cc 3B270000 	  _DOLIT 255 
 272      FF000000 
 273 01d4 19290000 	  _ADR ANDD 
 274 01d8 41390000 	  _ADR UDOT 
 275 01dc 55380000 	  _ADR CR 
 276 01e0 39030000 	  _ADR reset_mcu 
 277              	
 278              	
 279              	/************************************
 280              	   bus fault 
 281              	   irq -11 
 282              	***********************************/
 283              	  .type busfault_handler, %function
 284              	  .p2align 2
 285              	  .global busfault_handler 
 286              	busfault_handler:
 287 01e4 4FF00000 	  _MOV32 r0,RAM_END 
 287      C2F20200 
 288 01ec 8546     	  mov sp,r0 
 289 01ee DFF8FCC4 	  ldr IP,=busfault_hl 
 290 01f2 02F0BFB9 	  b INEXT 
 291              	busfault_hl:
 292 01f6 05420000 	  _ADR PRESE
 293 01fa 3B270000 	  _DOLIT 1 
 293      01000000 
 294 0202 11270000 	  _ADR ULED 
 295 0206 3B270000 	  _DOLIT  100 
 295      64000000 
 296 020e 892D0000 	  _ADR MSEC 
 297 0212 E9250000 	  _ADR BFAR 
 298 0216 C5250000 	  _ADR CFSR 
 299 021a 55380000 	  _ADR CR  
 300 021e BD380000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 300      1B627573 
 300      20666175 
 300      6C742065 
 300      78636570 
 301 0240 3B270000 	  _DOLIT 16 
 301      10000000 
 302 0248 D12D0000 	  _ADR BASE 
 303 024c AD270000 	  _ADR STORE   
 304 0250 3B270000 	  _DOLIT 0XFF00 
 304      00FF0000 
 305 0258 19290000 	  _ADR ANDD   
 306 025c 41390000 	  _ADR UDOT 
 307 0260 BD380000 	  _DOTQP 7 , " BFAR: "
 307      07204246 
 307      41523A20 
 308 026c 41390000 	  _ADR UDOT 
 309 0270 55380000 	  _ADR CR 
 310 0274 39030000 	  _ADR reset_mcu  
 311              	
 312              	/************************************
 313              	    usage fault
ARM GAS  forth.s 			page 18


 314              	    irq -10 
 315              	************************************/
 316              	  .type usagefault_handler, %function
 317              	  .p2align 2
 318              	  .global usagefault_handler 
 319              	usagefault_handler:
 320 0278 4FF00000 	  _MOV32 r0,RAM_END 
 320      C2F20200 
 321 0280 8546     	  mov sp,r0 
 322 0282 DFF86CC4 	  ldr IP,=usagefault_hl
 323 0286 02F075B9 	  b INEXT 
 324              	usagefault_hl:
 325 028a 05420000 	  _ADR PRESE
 326 028e 55380000 	  _ADR CR  
 327 0292 BD380000 	  _DOTQP  23 , "usage exception, UFSR: "
 327      17757361 
 327      67652065 
 327      78636570 
 327      74696F6E 
 328 02b0 3B270000 	  _DOLIT 16 
 328      10000000 
 329 02b8 D12D0000 	  _ADR BASE 
 330 02bc AD270000 	  _ADR STORE   
 331 02c0 C5250000 	  _ADR CFSR
 332 02c4 3B270000 	  _DOLIT 16 
 332      10000000 
 333 02cc 71290000 	  _ADR RSHIFT 
 334 02d0 41390000 	  _ADR UDOT 
 335 02d4 55380000 	  _ADR CR 
 336 02d8 39030000 	  _ADR reset_mcu  
 337              	
 338              	
 339              	/*********************************
 340              		system milliseconds counter
 341              	*********************************/	
 342              	  .type systick_handler, %function
 343              	  .p2align 2 
 344              	  .global systick_handler
 345              	systick_handler:
 346 02dc 4FF00003 	  _MOV32 r3,UPP
 346      C2F20003 
 347 02e4 9868     	  ldr r0,[r3,#TICKS]  
 348 02e6 00F10100 	  add r0,#1
 349 02ea 9860     	  str r0,[r3,#TICKS]
 350 02ec D868     	  ldr r0,[r3,#CD_TIMER]
 351 02ee 10B1     	  cbz r0, systick_exit
 352 02f0 A0F10100 	  sub r0,#1
 353 02f4 D860     	  str r0,[r3,#CD_TIMER]
 354              	systick_exit:
 355 02f6 7047     	  bx lr
 356              	
 357              	user_reboot:
 358 02f8 00B500F0 	   _CALL forth_init 
 358      4FF85DF8 
 358      04EB
 359 0302 DFF8F0C3 	  ldr IP,=ur
 360 0306 02F035B9 	  b INEXT  
ARM GAS  forth.s 			page 19


 361              	ur:
 362 030a 05420000 	  _ADR PRESE
 363 030e 55380000 	  _ADR CR   
 364 0312 3B270000 		_DOLIT user_reboot_msg
 364      28030000 
 365 031a 292D0000 		_ADR COUNT 
 366 031e 21380000 	  _ADR TYPEE 
 367 0322 39030000 	  _ADR reset_mcu 
 368              	
 369 0326 00BF     		.p2align 2 
 370              	user_reboot_msg:
 371 0328 0C       		.byte 12
 372 0329 75736572 		.ascii "user reboot!"
 372      20726562 
 372      6F6F7421 
 373 0335 0000BF   		.p2align 2 
 374              	
 375              	reset_mcu:
 376 0338 4FF48050 	  _MOV32 r0,UART 
 376      C4F20100 
 377 0340 0168     	1: ldr r1,[r0,#USART_SR]
 378 0342 11F0400F 	  tst r1,#(1<<6)
 379 0346 FBD0     	  beq 1b
 380 0348 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 380      CEF20000 
 381 0350 C168     		ldr r1,[r0,#SCB_AIRCR]
 382 0352 41F00401 		orr r1,#(1<<2)
 383 0356 C0F2FA51 		movt r1,#SCB_VECTKEY
 384 035a C160     		str r1,[r0,#SCB_AIRCR]
 385 035c FEE7     		b . 
 386              	
 387              	/**************************************
 388              	  reset_handler execute at MCU reset
 389              	***************************************/
 390              	  .type  reset_handler, %function
 391 035e 00BF     	  .p2align 2 
 392              	  .global reset_handler
 393              	reset_handler:
 394 0360 4FF00000 		_MOV32 r0,RAM_END
 394      C2F20200 
 395 0368 8546     		mov sp,r0 
 396              	// enable memory, bus and usage exceptions  
 397 036a 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 397      CEF20000 
 398 0372 81EA0101 	  eor r1,r1 
 399 0376 C0F20701 	  movt r1,#7 
 400 037a 4162     	  str r1,[r0,#SCB_SHCSR]
 401 037c FFF7FEFF 		bl	remap 
 402 0380 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 403 0384 01F0E6FC 	  bl  fpu_init 
 404 0388 00F0D1F9 		bl  ser_init
 405 038c FFF7FEFF 	 	bl	tv_init
 406 0390 FFF7FEFF 	  bl  kbd_init
 407 0394 01F0D6FA 	  bl  flash_spi_init   
 408 0398 04F020BE 		b COLD 
 409              	
 410              	
ARM GAS  forth.s 			page 20


 411              	
 412              		.type forth_init, %function 
 413              	  .p2align 2 
 414              	forth_init:
 415 039c 4FF00004 		_MOV32 UP,UPP 
 415      C2F20004 
 416 03a4 4FF68067 		_MOV32 DSP,SPP
 416      C2F20107 
 417 03ac 4FF47F48 		_MOV32 RSP,RPP
 417      C2F20108 
 418 03b4 DFF840A3 	  ldr INX,=NEST
 419 03b8 4AF0010A 	  orr INX,#1 
 420 03bc 86EA0606 		EOR TOS,TOS  
 421 03c0 7047     		_RET 
 422              	
 423              	
 424              	
 425              	  .type init_devices, %function
 426 03c2 00BF     	  .p2align 2 
 427              	init_devices:
 428              	/* init clock to HSE 96 Mhz */
 429              	/* set 3 wait states in FLASH_ACR_LATENCY */
 430 03c4 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 430      C4F20200 
 431 03cc 4FF00301 	  mov r1,#3 
 432 03d0 0160     	  str r1,[r0,#FLASH_ACR]
 433              	/* configure clock for HSE, 25 Mhz crystal */
 434              	/* enable HSE in RCC_CR */
 435 03d2 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 435      C4F20200 
 436 03da 0168     	  ldr r1,[r0,#RCC_CR]
 437 03dc 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 438 03e0 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 439              	/* wait HSERDY loop */
 440              	wait_hserdy:
 441 03e2 0168     	  ldr r1,[r0,#RCC_CR]
 442 03e4 11F4003F 	  tst r1,#(1<<17)
 443 03e8 FBD0     	  beq wait_hserdy
 444              	
 445              	/************************************************* 
 446              	   configure PLL  and source 
 447              	   SYSCLOCK=96 Mhz
 448              	   select HSE as  PLL source clock
 449              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 450              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 451              	****************************************************/
 452              	  /* set RCC_PLLCFGR */
 453 03ea 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 453      C4F20200 
 454 03f2 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 454      C0F24041 
 455 03fa 4160     	  str r1,[r0,#RCC_PLLCFGR]
 456              	  /* enable PLL */
 457 03fc 0168     	  ldr r1,[r0,#RCC_CR]
 458 03fe 41F08071 	  orr r1, #(1<<24)
 459 0402 0160     	  str r1,[r0,#RCC_CR]
 460              	/* wait for PLLRDY */
ARM GAS  forth.s 			page 21


 461              	wait_pllrdy:
 462 0404 0168     	  ldr r1,[r0,#RCC_CR]
 463 0406 11F0007F 	  tst r1,#(1<<25)
 464 040a FBD1     	  bne wait_pllrdy 
 465              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 466 040c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 466      C0F21901 
 467 0414 8160     	  str r1,[r0,#RCC_CFGR]
 468              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 469 0416 8168     	  ldr r1,[r0,#RCC_CFGR]
 470 0418 41F00201 	  orr r1,#2
 471 041c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 472              	/* wait for SWS==2 */
 473              	wait_sws:
 474 041e 8168     	  ldr r1,[r0,#RCC_CFGR]
 475 0420 11F0080F 	  tst r1,#(2<<2)
 476 0424 FBD0     	  beq wait_sws
 477              	/* now sysclock is 96 Mhz */
 478              	
 479              	
 480              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 481 0426 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 482 042a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 483 042c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 484 0430 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 485              	/* configure GPIOC:13 as output for user LED */
 486 0432 4FF40060 	  _MOV32 r0,LED_GPIO 
 486      C4F20200 
 487 043a 4FF00D01 	  mov r1,#LED_PIN
 488 043e 4FF01102 	  mov r2,#OUTPUT_OD 
 489 0442 00B500F0 	  _CALL gpio_config 
 489      8FF85DF8 
 489      04EB
 490 044c 4FF00102 	  mov r2,#1
 491 0450 00B500F0 	  _CALL gpio_out 
 491      DEF85DF8 
 491      04EB
 492              	/* enable compensation CELL for fast I/O */
 493 045a 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 493      C4F20101 
 494 0462 4FF00100 		mov r0,#1 
 495 0466 0862     		str r0,[R1,#SYSCFG_CMPCR]
 496              	/* wait for ready bit */ 
 497 0468 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 498 046a 10F4807F 	    tst r0,#(1<<8)
 499 046e FBD0     		beq 1b 	
 500              	
 501              	
 502              	/* configure systicks for 1msec ticks */
 503              	// set priority to 15 (lowest)
 504 0470 4FF0FF30 	  mov r0,#STCK_IRQ
 505 0474 4FF00F01 	  mov r1,#15 
 506 0478 00B500F0 	  _CALL nvic_set_priority
 506      2FF85DF8 
 506      04EB
 507 0482 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 507      CEF20000 
ARM GAS  forth.s 			page 22


 508 048a 47F2FF61 	  _MOV32 r1,95999 
 508      C0F20101 
 509 0492 4160     	  str r1,[r0,#STK_LOAD]
 510 0494 4FF00701 	  mov r1,#7
 511 0498 0160     	  str r1,[r0,STK_CTL]
 512 049a 7047     	  _RET  
 513              	
 514              	
 515              	/* copy system variables to RAM */ 
 516              		.type remap, %function 
 517              	    .global remap 
 518              	remap:
 519              	// copy system to RAM 	
 520 049c 4FF00000 		_MOV32 r0,RAM_ADR 
 520      C2F20000 
 521 04a4 9549     		ldr r1,=UZERO 
 522 04a6 4FF0B002 		mov r2,#ULAST-UZERO 
 523 04aa 02F10302 		add r2,r2,#3
 524 04ae 22F00302 		and r2,r2,#~3 
 525 04b2 51F8043B 	1:	ldr r3,[r1],#4 
 526 04b6 40F8043B 		str r3,[r0],#4 
 527 04ba 043A     		subs R2,#4 
 528 04bc F9D1     		bne 1b
 529              	// zero end of RAM 
 530 04be 4FF00002 		_MOV32 r2,RAM_END 
 530      C2F20202 
 531 04c6 83EA0303 		eor r3,r3,r3 
 532 04ca 40F8043B 	2:  str r3,[r0],#4
 533 04ce 9042     		cmp r0,r2 
 534 04d0 FBDB     		blt 2b 
 535 04d2 4FF00004 		_MOV32 UP,RAM_ADR  
 535      C2F20004 
 536 04da 7047     		_RET 
 537              	
 538              	// set irq priority 
 539              	// 0 highest 
 540              	// 15 lowest
 541              	// input: r0 IRQn  
 542              	//        r1  ipr 
 543              	nvic_set_priority:
 544 04dc 08B4     	    push {r3}
 545 04de 0028     	    cmp r0,#0 
 546 04e0 08D4     	    bmi negative_irq 
 547 04e2 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 547      CEF20003 
 548 04ea 4FEA0111 	    lsl r1,#4 
 549 04ee 1954     	    strb r1,[r3,r0]
 550 04f0 08BC     	    pop {r3}
 551 04f2 7047     	    _RET 
 552              	negative_irq:
 553 04f4 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 553      CEF20003 
 554 04fc 00F00F00 	    and r0,#0XF 
 555 0500 A0F10400 	    sub r0,#4 
 556 0504 4FEA0111 	    lsl r1,#4 
 557 0508 1954     	    strb r1,[r3,r0]
 558 050a 08BC     	    pop {r3}
ARM GAS  forth.s 			page 23


 559 050c 7047     	    _RET 
 560              	
 561              	
 562              	// enable interrupt in nvic 
 563              	// input: r0 = IRQn 
 564              	nvic_enable_irq: 
 565 050e 0EB4     	    push {r1,r2,r3}
 566 0510 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 566      CEF20003 
 567 0518 0146     	    mov r1,r0 
 568 051a 4FEA5111 	    lsr r1,#5  
 569 051e 4FEA8101 	    lsl r1,#2  // ISERn  
 570 0522 00F01F00 	    and r0,#31 // bit#
 571 0526 4FF00102 	    mov r2,#1 
 572 052a 02FA00F2 	    lsl r2,r0
 573 052e 72B6     	    cpsid I
 574 0530 5A50     	    str r2,[r3,r1]
 575 0532 62B6     	    cpsie I 
 576 0534 0EBC     	    pop {r1,r2,r3}
 577 0536 7047     	    _RET 
 578              	
 579              	// disable interrupt in nvic
 580              	// input: r0 = IRQn
 581              	nvic_disable_irq:
 582 0538 0EB4     	    push {r1,r2,r3}
 583 053a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 583      CEF20003 
 584 0542 0146     	    mov r1,r0 
 585 0544 4FEA5111 	    lsr r1,#5  
 586 0548 4FEA8101 	    lsl r1,#2  // ISERn
 587 054c 00F01F00 	    and r0,#31 // bit#
 588 0550 4FF00102 	    mov r2,#1 
 589 0554 02FA00F2 	    lsl r2,r0
 590 0558 5A50     	    str r2,[r3,r1]
 591 055a BFF34F8F 	    dsb 
 592 055e BFF36F8F 	    isb 
 593 0562 0EBC     	    pop {r1,r2,r3}
 594 0564 7047     	    _RET 
 595              	
 596              	/**********************************
 597              	  gpio_config 
 598              	  Configure gpio mode 
 599              	  input:
 600              	    r0   GPIOx 
 601              	    r1   pin 
 602              	    r2   mode 
 603              	  output:
 604              	    none 
 605              	  use:
 606              	    r3,r5,r11  
 607              	**********************************/
 608              	gpio_config:
 609 0566 2DE92808 	    push {r3,r5,r11}
 610              	//  clear registers field 
 611 056a 4FF00105 	    mov r5,#1
 612 056e 05FA01F5 	    lsl r5,r1
 613 0572 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
ARM GAS  forth.s 			page 24


 614 0576 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 615 0578 03EA0503 	    and r3,r5 
 616 057c 4360     	    str r3,[r0,#GPIO_OTYPER]
 617 057e 4FF00305 	    mov r5,#3 
 618 0582 4FF0020B 	    mov r11,#2 
 619 0586 01FB0BFB 	    mul r11,r1 
 620 058a 05FA0BF5 	    lsl r5,r11 
 621 058e 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 622 0592 0368     	    ldr r3,[r0,#GPIO_MODER]
 623 0594 03EA0503 	    and r3,r5 
 624 0598 0360     	    str r3,[r0,#GPIO_MODER]
 625 059a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 626 059c 03EA0503 	    and r3,r5 
 627 05a0 C360     	    str r3,[r0,#GPIO_PUPDR]
 628              	// set mode register, r2 low nibble  
 629 05a2 02F00305 	    and r5,r2,#3    
 630 05a6 05FA0BF5 	    lsl r5,r11 // mode 
 631 05aa 0368     	    ldr r3,[r0,#GPIO_MODER]
 632 05ac 43EA0503 	    orr r3,r5 
 633 05b0 0360     	    str r3,[r0,#GPIO_MODER]
 634 05b2 032A     	    cmp r2,#3
 635 05b4 13D0     	    beq 9f // analog input 
 636 05b6 12F00305 	    ands r5,r2,#3 
 637 05ba 08D0     	    beq input_pull 
 638              	output_type:
 639 05bc 4FEA1212 	    lsr r2,#4 
 640 05c0 02FA01F2 	    lsl r2,r1 // 1 bit field 
 641 05c4 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 642 05c6 43EA0203 	    orr r3,r2 
 643 05ca 4360     	    str r3,[r0,#GPIO_OTYPER]
 644 05cc 07E0     	    b 9f 
 645              	input_pull:
 646 05ce C368     	    ldr r3,[r0,#GPIO_PUPDR]
 647 05d0 4FEA1212 	    lsr r2,#4 
 648 05d4 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 649 05d8 43EA0203 	    orr r3,r2 
 650 05dc C360     	    str r3,[r0,#GPIO_PUPDR]
 651 05de BDE82808 	9:  pop {r3,r5,r11}
 652 05e2 7047     	    _RET 
 653              	
 654              	// configure gpio speed 
 655              	// input:
 656              	//    r0   GPIO_BASE_ADR 
 657              	//    r1   pin 
 658              	//    r2   speed
 659              	// use:
 660              	//  r3,r5,r11 
 661              	gpio_speed:
 662 05e4 2DE92808 	    push {r3,r5,r11}
 663 05e8 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 664 05ea 4FF00305 	    mov r5,#3
 665 05ee 4FF0020B 	    mov r11,#2 
 666 05f2 01FB0BFB 	    mul r11,r1 
 667 05f6 05FA0BF5 	    lsl r5,r11
 668 05fa 6FEA0505 	    mvn r5,r5 
 669 05fe 03EA0503 	    and r3,r5   
 670 0602 02FA0BF2 	    lsl r2,r11  
ARM GAS  forth.s 			page 25


 671 0606 43EA0203 	    orr r3,r2 
 672 060a 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 673 060c BDE82808 	    pop {r3,r5,r11}
 674 0610 7047     	    _RET
 675              	
 676              	/**************************** 
 677              	  gpio_out port,pin,0|1
 678              	  input:
 679              	    r0   gpio_base_adr 
 680              	    r1   pin 
 681              	    r2   data 0|1 
 682              	**************************/
 683              	gpio_out:
 684 0612 08B4     	    push {r3}
 685 0614 4FF00103 	    mov r3,#1 
 686 0618 03FA01F3 	    lsl r3,r1 
 687 061c 0AB9     	    cbnz r2, 1f 
 688 061e 4FEA0343 	    lsl r3,#16 
 689 0622 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 690 0624 08BC     	    pop {r3}
 691 0626 7047     	    _RET 
 692              	
 693              	/******************************************************
 694              	*  COLD start moves the following to USER variables.
 695              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 696              	******************************************************/
 697              		.p2align 2
 698              	UZERO:
 699 0628 00000000 		.word 0  			/*Reserved */
 700 062c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 701 0630 00000000 		.word 0      /* TICKS */
 702 0634 00000000 	    .word 0     /* CD_TIMER */
 703 0638 EC4E0000 		.word HI_BOTH  /*'BOOT */
 704 063c 2C160000 		.word PS2_QKEY /* query for character */
 705 0640 F40E0000 	  .word TV_EMIT  /* char output device */
 706 0644 0A000000 	  .word BASEE 	/*BASE */
 707 0648 00000000 		.word 0			/*tmp */
 708 064c 00000000 		.word 0			/*SPAN */
 709 0650 00000000 		.word 0			/*>IN */
 710 0654 00000000 		.word 0			/*#TIB */
 711 0658 80FE0120 		.word TIBB	/*TIBU */
 712 065c DC400000 		.word INTER	/*'EVAL */
 713 0660 00000000 		.word 0			/*HLD */
 714 0664 D44F0000 		.word _LASTN	/*CONTEXT */
 715 0668 3C500000 		.word CTOP  	/* FCP end of system dictionnary */
 716 066c 144A0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 717 0670 D44F0000 		.word _LASTN	/*LAST word in dictionary */
 718 0674 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 718      00000000 
 718      00000000 
 718      00000000 
 719 0684 00000000 		.word 0  /* RX_HEAD */
 720 0688 00000000 		.word 0  /* RX_TAIL */ 
 721 068c 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 722 0690 00000000 		.word 0  /* VID_STATE, video state */  
 723 0694 00000000 	    .word 0  /* VID_FIELD, field */
 724 0698 80800120 		.word VID_BUFF /* video_buffer address */ 
ARM GAS  forth.s 			page 26


 725 069c 00000000 	    .word 0 /* kbd struct */
 726 06a0 00000000 		.space KBD_QUEUE_SIZE,0  
 726      00000000 
 726      00000000 
 726      00000000 
 727 06b0 00000000 		.word 0  /* kbd queue head */
 728 06b4 00000000 		.word 0 /* kbd queue tail */ 
 729 06b8 00000000 	    .word 0 /* tv cursor row */
 730 06bc 00000000 	    .word 0 /* tv cursor column */ 
 731 06c0 00000000 	    .word 0 /* tv back color */
 732 06c4 07000000 	    .word 7 /* tv font color */
 733 06c8 00000000 	    .word 0 /* FPSW */
 734 06cc 00000000 	    .word 0 /* FBASE */ 
 735 06d0 00000000 	    .word 0,0 
 735      00000000 
 736              	ULAST:
 737              	
 738              	// used by _HEADER macro 
 739              	// to link names field
 740              	// in dictionary  
 741 06d8 12000000 	    .equ LINK, 0 
 741      C2000000 
 741      0C010000 
 741      4E010000 
 741      8A010000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
ARM GAS  forth.s 			page 27


  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0700 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0708 1868     		ldr r0,[r3,#USART_SR]
  38 070a 5968     		ldr r1,[r3,#USART_DR]
  39 070c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0710 0CD0     		beq 2f // no char received 
  41 0712 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0716 3FF4EFAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 071a 04F14C00 		add r0,UP,#RX_QUEUE
  44 071e 226E     		ldr r2,[UP,#RX_TAIL]
  45 0720 8154     		strb r1,[r0,r2]
  46 0722 02F10102 		add r2,#1 
  47 0726 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 072a 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 072c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 072e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0736 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0738 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 073c 01EA0201 	  and r1,r1,r2
  62 0740 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0744 41EA0201 	  orr r1,r1,r2 
  64 0748 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 074a 4FF4EE61 	  mov r1,#0x77<<4 
  67 074e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0750 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0758 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 075c 8160     	  str r1,[r0,#USART_BRR]
  73 075e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0762 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0764 4FF02500 	  mov r0,#USART1_IRQ 
  77 0768 4FF00701 	  mov r1,#7
  78 076c 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0776 4FF02500 	  mov r0,#USART1_IRQ 
  81 077a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FE5DF8 
  81      04EB
  82 0784 7047     	  _RET  
ARM GAS  forth.s 			page 28


  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0786 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0794 47F8046D 		_PUSH
  92 0798 206E     		ldr T0,[UP,#RX_TAIL] 
  93 079a E16D     		ldr T1,[UP,#RX_HEAD]
  94 079c 90EA0106 		eors TOS,T0,T1 
  95 07a0 0CD0     		beq 1f
  96 07a2 04F14C00 		add T0,UP,#RX_QUEUE 
  97 07a6 0844     		add T0,T1 
  98 07a8 0678     		ldrb TOS,[T0]
  99 07aa 01F10101 		add T1,#1 
 100 07ae 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 07b2 E165     		str T1,[UP,#RX_HEAD]
 102 07b4 47F8046D 		_PUSH 
 103 07b8 4FF0FF36 		mov TOS,#-1
 104 07bc 01F0DABE 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 07c0 8A070000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 07d0 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 07d8 2868     	1:  ldr T0,[WP,#USART_SR]
 113 07da 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 07de FBD0     		beq 1b 
 115 07e0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 07e2 57F8046B 		_POP
 117 07e6 01F0C5BE 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 07ea C4070000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 07f4 47F8046D 	        _PUSH 
 126 07f8 4FF00006 	        mov TOS,#0
 127 07fc 01F0BABE 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
ARM GAS  forth.s 			page 29


 131              	    constant: serial console id 
 132              	****************************************/
 133 0800 EE070000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 080c 47F8046D 	        _PUSH 
 135 0810 4FF00106 	        mov TOS,#1
 136 0814 01F0AEBE 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0818 04080000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0824 3046     	        mov T0,TOS
 144 0826 57F8046B 	        _POP 
 145 082a 50B1     	        cbz T0, 4f 
 146              	// serial console 
 147 082c 5048     	        ldr T0,=SER_QKEY 
 148 082e 6061     	        str T0,[UP,#STDIN]
 149 0830 5048     	        ldr T0,=SER_EMIT
 150 0832 A061     	        str T0,[UP,#STDOUT]
 151 0834 504D45F0 	        _CALL_COLWORD READY 
 151      010504F0 
 151      BDBB
 152 083e 01F099BE 	        _NEXT 
 153              	4: // local console 
 154 0842 4E48     	        ldr T0,=PS2_QKEY
 155 0844 6061     	        str T0,[UP,#STDIN]
 156 0846 4E48     	        ldr T0,=TV_EMIT
 157 0848 A061     	        str T0,[UP,#STDOUT]
 158 084a 4B4D45F0 	        _CALL_COLWORD READY 
 158      010504F0 
 158      B2BB
 159 0854 01F08EBE 	        _NEXT 
 160              	
 161              	/*******************************
 162              	    ANSI-PARAM ( n -- )
 163              	    convert and transmit 
 164              	    ANSI ESC[  parameter 
 165              	*******************************/
 166 0858 1C080000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 166      0A414E53 
 166      492D5041 
 166      52414D00 
 167 0868 504700BF 	      _NEST 
 168 086c 3B270000 	      _DOLIT -1 // c 
 168      FFFFFFFF 
 169 0874 F5290000 	1:    _ADR ONEP  // c+1
 170 0878 51280000 	      _ADR TOR   
 171 087c 3B270000 	      _DOLIT 10 
 171      0A000000 
 172 0884 01310000 	      _ADR SLMOD // r q  
 173 0888 A92A0000 	      _ADR QDUP  // r q q | r 0  
 174 088c 7B270000 	      _QBRAN 2f  // r 0 
ARM GAS  forth.s 			page 30


 174      A0080000 
 175 0894 0D280000 	      _ADR RFROM // r q c 
 176 0898 8F270000 	      _BRAN 1b
 176      74080000 
 177 08a0 3B270000 	2:    _DOLIT '0'  
 177      30000000 
 178 08a8 99290000 	      _ADR PLUS 
 179 08ac 45260000 	      _ADR EMIT 
 180 08b0 0D280000 	      _ADR RFROM 
 181 08b4 A92A0000 	      _ADR QDUP 
 182 08b8 7B270000 	      _QBRAN 3f
 182      D0080000 
 183 08c0 052A0000 	      _ADR ONEM 
 184 08c4 51280000 	      _ADR TOR 
 185 08c8 8F270000 	      _BRAN 2b 
 185      A0080000 
 186              	3:    
 187 08d0 7B250000 	      _UNNEST 
 188              	
 189              	/******************************
 190              	    ESC[ 
 191              	    send ANSI escape sequence
 192              	*******************************/
 193 08d4 5C080000 	      _HEADER ANSI_ESC,4,"ESC["
 193      04455343 
 193      5B0000BF 
 194 08e0 504700BF 	      _NEST 
 195 08e4 3B270000 	      _DOLIT 27 
 195      1B000000 
 196 08ec 45260000 	      _ADR EMIT 
 197 08f0 3B270000 	      _DOLIT '['
 197      5B000000 
 198 08f8 45260000 	      _ADR EMIT 
 199 08fc 7B250000 	      _UNNEST 
 200              	
 201              	/*************************************
 202              	    SER-AT ( line col -- )
 203              	    move cursor on serial console
 204              	*************************************/
 205 0900 D8080000 	      _HEADER SER_AT,6,"SER-AT"
 205      06534552 
 205      2D415400 
 206 090c 504700BF 	      _NEST
 207 0910 E1080000 	      _ADR ANSI_ESC
 208 0914 E5280000 	      _ADR SWAP 
 209 0918 69080000 	      _ADR ANSI_PARAM 
 210 091c 3B270000 	      _DOLIT ';'
 210      3B000000 
 211 0924 45260000 	      _ADR EMIT
 212 0928 69080000 	      _ADR ANSI_PARAM
 213 092c 3B270000 	      _DOLIT 'H'
 213      48000000 
 214 0934 45260000 	      _ADR EMIT 
 215 0938 7B250000 	      _UNNEST 
 216              	
 217              	/****************************
 218              	    SER-CLS ( -- )
ARM GAS  forth.s 			page 31


 219              	    serial clear screeen 
 220              	****************************/
 221 093c 04090000 	    _HEADER SER_CLS,7,"SER-CLS"
 221      07534552 
 221      2D434C53 
 222 0948 504700BF 	    _NEST
 223 094c 3B270000 	    _DOLIT 1 
 223      01000000 
 224 0954 D5280000 	    _ADR DUPP 
 225 0958 0D090000 	    _ADR SER_AT  
 226 095c E1080000 	    _ADR ANSI_ESC
 227 0960 3B270000 	    _DOLIT 'J'
 227      4A000000 
 228 0968 45260000 	    _ADR EMIT 
 229 096c 7B250000 	    _UNNEST 
 230 0970 94070000 	
 230      D0070000 
 230      B84F0000 
 230      2C160000 
 230      F40E0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
ARM GAS  forth.s 			page 32


   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
ARM GAS  forth.s 			page 33


  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0984 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 098c 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 098e 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0996 41EA0201 	  orr r1,r2
  82 099a 0160     	  str r1,[r0,#GPIO_MODER]
  83 099c 81EA0101 	  eor r1,r1 
  84 09a0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 09a2 4FF00101 	  mov r1,#1 // pin 1 
  88 09a6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 09aa 00B5FFF7 	  _CALL gpio_config 
  89      DBFD5DF8 
  89      04EB
  90 09b4 4FF00101 	  mov r1,#1 
  91 09b8 4FF00202 	  mov r2,#2
  92 09bc 00B5FFF7 	  _CALL gpio_speed 
  92      11FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 09c6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 09c8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 09cc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 09ce 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 09d6 4FF00200 	  mov r0,#2 
 100 09da 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 09dc 41EA0001 	  orr r1,r0 
 102 09e0 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 09e2 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 09ea 41F2D470 	  mov r0,#HPER
 106 09ee D062     	  str r0,[r2,#TIM_ARR]
 107 09f0 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 09f4 D063     	  str r0,[r2,#TIM_CCR3]
 109 09f6 4FF4E170 	  mov r0,#HPULSE 
 110 09fa 1064     	  str r0,[r2,#TIM_CCR4]  
 111 09fc 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0a00 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0a02 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0a06 1062     	  str r0,[r2,#TIM_CCER]
 115 0a08 4FF00100 	  mov r0,#1 
ARM GAS  forth.s 			page 34


 116 0a0c D060     	  str r0,[r2,#TIM_DIER]
 117 0a0e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0a10 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0a14 4FF00201 	  mov r1,#2
 121 0a18 00B5FFF7 	  _CALL nvic_set_priority
 121      5FFD5DF8 
 121      04EB
 122 0a22 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0a26 00B5FFF7 	  _CALL nvic_enable_irq
 123      71FD5DF8 
 123      04EB
 124 0a30 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0a32 00BF     	  _GBL_FUNC tv_out_isr
 132 0a34 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0a3c 81EA0101 	  eor T1,T1
 134 0a40 0161     	  str T1,[T0,#TIM_SR]
 135 0a42 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0a44 01F10101 	  add T1,#1 
 137 0a48 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0a4a A26E     	  ldr T2,[UP,#VID_STATE]
 140 0a4c 002A     	  cmp T2,#ST_VSYNC 
 141 0a4e 07D0     	  beq state_vsync
 142 0a50 012A     	  cmp T2,#ST_PREVID 
 143 0a52 2FD0     	  beq state_pre_video 
 144 0a54 022A     	  cmp T2,#ST_VIDEO 
 145 0a56 36D0     	  beq state_video_out 
 146 0a58 032A     	  cmp T2,#ST_POSTVID 
 147 0a5a 63D0     	  beq state_post_video
 148 0a5c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0a60 0129     	  cmp T1,#1
 152 0a62 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0a64 4FF0DB01 	  mov T1,#SERRATION
 155 0a68 0164     	  str T1,[T0,#TIM_CCR4]
 156 0a6a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0a6e C162     	  str T1,[T0,#TIM_ARR]
 158 0a70 6BE0     	  b tv_isr_exit 
 159 0a72 0729     	1: cmp T1,#7
 160 0a74 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0a76 40F62821 	  mov T1,#VSYNC_PULSE
 163 0a7a 0164     	  str T1,[T0,#TIM_CCR4]
 164 0a7c 65E0     	  b tv_isr_exit
 165 0a7e 0D29     	2: cmp T1,#13
 166 0a80 03D1     	   bne 3f  
 167              	// set vertical post-sync    
ARM GAS  forth.s 			page 35


 168 0a82 4FF0DB01 	   mov T1,#SERRATION 
 169 0a86 0164     	   str T1,[T0,#TIM_CCR4]
 170 0a88 5FE0     	   b tv_isr_exit   
 171 0a8a 1229     	3: cmp T1,#18
 172 0a8c 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0a8e E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0a90 0029     	   cmp T1,#ODD_FIELD  
 176 0a92 5AD0     	   beq tv_isr_exit 
 177 0a94 01E0     	   b sync_end 
 178 0a96 1329     	4: cmp T1,#19 
 179 0a98 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0a9a 4FF00901 	   mov T1,#9
 182 0a9e 6166     	   str T1,[UP,#VID_CNTR]
 183 0aa0 4FF4E171 	   mov T1,#HPULSE 
 184 0aa4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0aa6 41F2D471 	   mov T1,#HPER 
 186 0aaa C162     	   str T1,[T0,#TIM_ARR] 
 187 0aac 4FF00101 	   mov T1,#ST_PREVID 
 188 0ab0 A166     	   str T1,[UP,#VID_STATE]
 189 0ab2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ab4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ab6 48D4     	   bmi tv_isr_exit 
 194 0ab8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0abc A166     	   str T1,[UP,#VID_STATE]
 196 0abe 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0ac2 C160     	   str T1,[T0,#TIM_DIER]
 198 0ac4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0ac6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ac8 06D9     	   bls 1f 
 205 0aca 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ace A166     	   str T1,[UP,#VID_STATE]
 207 0ad0 4FF00101 	   mov T1,#1 
 208 0ad4 C160     	   str T1,[T0,#TIM_DIER]
 209 0ad6 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ad8 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ada A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ade 4FF0A003 	   mov T3,#160
 214 0ae2 03FB01F1 	   mul T1,T3 
 215 0ae6 0844     	   add T0,T1  
 216 0ae8 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0af0 10F8012B 	2: ldrb T2,[T0],#1 
 222 0af4 4FEA0222 	   lsl T2,#8 
 223 0af8 8A82     	   strh T2,[T1,#GPIO_ODR]
ARM GAS  forth.s 			page 36


 224 0afa AFF30080 	   nop.w 
 225 0afe AFF30080 	   nop.w
 226 0b02 AFF30080 	   nop.w 
 227 0b06 AFF30080 	   nop.w 
 228 0b0a 4FEA0212 	   lsl T2,#4  
 229 0b0e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0b10 AFF30080 	   nop.w
 231 0b14 AFF30080 	   nop.w  
 232 0b18 013B     	   subs T3,#1
 233 0b1a E9D1     	   bne 2b  
 234 0b1c 4FF47022 	   mov T2,#(15<<16) 
 235 0b20 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0b22 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0b24 4FF48372 	   mov T2,#262
 239 0b28 9142     	   cmp T1,T2
 240 0b2a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0b2c E16E     	   ldr T1,[UP,VID_FIELD]
 243 0b2e 11B9     	   cbnz T1, frame_end 
 244 0b30 40F6E931 	   mov T1,#SYNC_LINE
 245 0b34 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0b36 4FF00001 	   mov T1,#ST_VSYNC 
 248 0b3a A166     	   str T1,[UP,#VID_STATE]
 249 0b3c 81EA0101 	   eor T1,T1 
 250 0b40 6166     	   str T1,[UP,#VID_CNTR]
 251 0b42 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0b44 6FEA0101 	   mvn T1,T1  
 253 0b48 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0b4a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0b4c 40090000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0b5c 47F8046D 		_PUSH 
 266 0b60 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0b64 01F006BD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0b68 500B0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0b78 47F8046D 		_PUSH 
 273 0b7c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0b80 01F0F8BC 		_NEXT 
ARM GAS  forth.s 			page 37


 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0b84 6C0B0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0b90 47F8046D 	  _PUSH 
 280 0b94 04F19406 	  ADD TOS,UP,#COL 
 281 0b98 01F0ECBC 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0b9c 880B0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0ba4 47F8046D 	  _PUSH 
 287 0ba8 04F19006 	  ADD TOS,UP,#ROW 
 288 0bac 01F0E2BC 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0bb0 A00B0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0bbc 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0bc0 00FB06F6 	  mul TOS,T0 
 295 0bc4 01F0D6BC 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0bc8 B40B0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0bd4 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0bd8 00FB06F6 	  mul TOS,T0 
 302 0bdc 01F0CABC 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0be0 CC0B0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0bec 47F8046D 	  _PUSH 
 308 0bf0 DFF88C65 	  ldr TOS,=font_6x8 
 309 0bf4 01F0BEBC 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0bf8 E40B0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0c04 47F8046D 	  _PUSH 
 315 0c08 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0c0a 01F0B3BC 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
ARM GAS  forth.s 			page 38


 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0c0e FC0B0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0c18 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0c1a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0c1e 02FB00F0 	    mul T0,T2 
 330 0c22 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0c26 1044     	    add T0,T2 
 332 0c28 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0c2a 0344     	    add T3,T0 // T3 -> byte address 
 334 0c2c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0c2e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0c32 11F0010F 	    tst T1,#1 
 337 0c36 01D0     	    beq 1f 
 338 0c38 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0c3c DFF84405 	1:  ldr T0,=plot_op 
 340 0c40 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0c44 05EA0205 	    and WP,T2 // mask out nibble 
 343 0c48 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0c4c 11F0010F 	    tst T1,#1 
 345 0c50 01D1     	    bne 1f 
 346 0c52 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0c56 45EA0005 	1:  orr WP,T0  
 348 0c5a 1D70     	    strb WP,[T3]
 349 0c5c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0c5e 05EA0205 	    and WP,T2 
 352 0c62 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0c66 11F0010F 	    tst T1,#1
 354 0c6a 01D1     	    bne 1f 
 355 0c6c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0c70 45EA0005 	1:	orr WP,T0 
 357 0c74 1D70     	    strb WP,[T3]
 358 0c76 0DE0     	    b 9f 
 359              	op_invert:
 360 0c78 85EA0205 	    eor WP,T2 
 361 0c7c 1D70     	    strb WP,[T3]
 362 0c7e 09E0     	    b 9f 
 363              	op_xor:
 364 0c80 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0c84 11F0010F 	    tst T1,#1 
 366 0c88 01D1     	    bne 1f 
 367 0c8a 4FEA0010 	    lsl T0,#4 
 368 0c8e 85EA0005 	1:  eor WP,T0 
 369 0c92 1D70     	    strb WP,[T3]
 370 0c94 57F8046B 	9:  _POP 
 371 0c98 01F06CBC 	    _NEXT 
 372              	
 373 0c9c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
ARM GAS  forth.s 			page 39


 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ca0 120C0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0cac 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0cae 0028     	    cmp T0,#0
 381 0cb0 FCD1     	    bne 1b
 382 0cb2 01F05FBC 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0cb6 A40C0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0cc0 80EA0000 	    eor T0,T0 
 388 0cc4 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0cc8 40EA0100 	    orr T0,T1 
 390 0ccc 4FEA0111 	    lsl T1,#4 
 391 0cd0 40EA0100 	    orr T0,T1 
 392 0cd4 4FEA0021 	    lsl T1,T0,#8 
 393 0cd8 40EA0100 	    orr T0,T1 
 394 0cdc 4FEA0041 	    lsl T1,T0,#16
 395 0ce0 40EA0100 	    orr T0,T1 
 396 0ce4 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0ce8 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0cea 5050     	1:	str T0,[T2,T1]
 399 0cec 0439     	    subs T1,#4
 400 0cee FCD1     	    bne 1b
 401 0cf0 1060     	    str T0,[T2]
 402 0cf2 80EA0000 	    eor T0,T0 
 403 0cf6 C4F89000 	    str T0,[UP,#ROW]
 404 0cfa C4F89400 	    str T0,[UP,#COL]
 405 0cfe 01F039BC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0d02 BA0C0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0d10 504700BF 	  _NEST
 412 0d14 3B270000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0d1c D5280000 	  _ADR DUPP  
 414 0d20 51280000 	  _ADR TOR 
 415 0d24 B9290000 	  _ADR STAR
 416 0d28 050C0000 	  _ADR VIDBUFF
 417 0d2c 99290000 	  _ADR PLUS
 418 0d30 0D280000 	  _ADR RFROM   
 419 0d34 3B270000 	  _DOLIT 0 
 419      00000000 
 420 0d3c 35330000 	  _ADR FILL 
 421 0d40 7B250000 	  _UNNEST 
 422              	
 423              	/**********************************
ARM GAS  forth.s 			page 40


 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0d44 060D0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0d54 504700BF 	    _NEST 
 429 0d58 050C0000 	    _ADR VIDBUFF 
 430 0d5c D5280000 	    _ADR DUPP 
 431 0d60 3B270000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0d68 D5280000 	    _ADR DUPP 
 433 0d6c 51280000 	    _ADR TOR 
 434 0d70 99290000 	    _ADR PLUS 
 435 0d74 E5280000 	    _ADR SWAP 
 436 0d78 3B270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0d80 0D280000 	    _ADR RFROM  
 438 0d84 A9290000 	    _ADR SUBB 
 439 0d88 ED320000 	    _ADR MOVE
 440 0d8c 3B270000 	    _DOLIT 24 
 440      18000000 
 441 0d94 110D0000 	    _ADR CLRLINE 
 442 0d98 7B250000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0d9c 480D0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0dac 504700BF 	    _NEST 
 450 0db0 050C0000 	    _ADR VIDBUFF
 451 0db4 D5280000 	    _ADR DUPP 
 452 0db8 3B270000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0dc0 99290000 	    _ADR PLUS 
 454 0dc4 3B270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0dcc 3B270000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0dd4 A9290000 	    _ADR SUBB  
 457 0dd8 ED320000 	    _ADR MOVE
 458 0ddc 3B270000 	    _DOLIT 0 
 458      00000000 
 459 0de4 110D0000 	    _ADR CLRLINE
 460 0de8 7B250000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0dec A00D0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
ARM GAS  forth.s 			page 41


 467      0754562D 
 467      43524C46 
 468 0df8 E34D     	    ldr WP,=SCROLLUP 
 469 0dfa 45F00105 	    orr WP,#1
 470 0dfe 80EA0000 	    eor T0,T0 
 471 0e02 C4F89400 	    str T0,[UP,#COL]
 472 0e06 D4F89000 	    ldr T0,[UP,#ROW]
 473 0e0a 1828     	    cmp T0,#24 
 474 0e0c A2D0     	    beq SCROLLUP  
 475 0e0e 00F10100 	    add T0,#1 
 476 0e12 C4F89000 	    str T0,[UP,#ROW]
 477 0e16 01F0ADBB 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0e1a F00D0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0e24 D4F89400 	  ldr T0,[UP,#COL]
 484 0e28 00F10100 	  add T0,#1
 485 0e2c 3528     	  cmp T0,#53
 486 0e2e E3D5     	  bpl TV_CRLF  
 487 0e30 C4F89400 	  str T0,[UP,#COL]
 488 0e34 01F09EBB 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0e38 1E0E0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0e44 D4F89400 	    ldr T0,[UP,#COL]
 497 0e48 28B1     	    cbz T0,1f 
 498 0e4a A0F10100 	    sub T0,#1 
 499 0e4e C4F89400 	    str T0,[UP,#COL]
 500 0e52 01F08FBB 	    _NEXT 
 501 0e56 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0e5a 38B1     	    cbz T0,9f
 503 0e5c A0F10100 	    sub T0,#1
 504 0e60 C4F89000 	    str T0,[UP,#ROW]
 505 0e64 4FF03400 	    mov T0,#52 
 506 0e68 C4F89400 	    str T0,[UP,#COL]
 507 0e6c 01F082BB 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0e70 4FF08000 	    mov T0,#128 
 513 0e74 06EA0006 	    and TOS,T0 
 514 0e78 4FEAD616 	    lsr TOS,#7
 515 0e7c 01F07ABB 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
ARM GAS  forth.s 			page 42


 519 0e80 3868     	  ldr T0,[DSP]
 520 0e82 00F10100 	  add T0,#1 
 521 0e86 3860     	  str T0,[DSP]
 522 0e88 01F074BB 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0e8c 4FEA4606 	    lsl TOS,#1
 527 0e90 01F070BB 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0e94 504700BF 	    _NEST 
 536 0e98 3B270000 	    _DOLIT 5 
 536      05000000 
 537 0ea0 51280000 	    _ADR TOR 
 538 0ea4 51280000 	1:  _ADR TOR 
 539 0ea8 0D2B0000 	    _ADR DDUP 
 540 0eac 3D280000 	    _ADR RAT
 541 0eb0 710E0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0eb4 190C0000 	    _ADR PLOT 
 543 0eb8 810E0000 	    _ADR INCR_X 
 544 0ebc 0D280000 	    _ADR RFROM 
 545 0ec0 8D0E0000 	    _ADR NEXT_PIXEL
 546 0ec4 5D270000 	    _DONXT 1b
 546      A40E0000 
 547 0ecc F92A0000 	    _ADR TDROP 
 548 0ed0 7B250000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0ed4 A6F12006 	   sub TOS,#32
 553 0ed8 4FF00800 	   mov T0,#8 
 554 0edc 00FB06F6 	   mul TOS,T0 
 555 0ee0 A748     	   ldr T0,=font_6x8
 556 0ee2 0644     	   add TOS,T0 
 557 0ee4 01F046BB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0ee8 3C0E0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0ef4 504700BF 	    _NEST
 565 0ef8 D5280000 	    _ADR DUPP 
 566 0efc 3B270000 	    _DOLIT 32 
 566      20000000 
 567 0f04 592C0000 	    _ADR ULESS
 568 0f08 7B270000 	    _QBRAN 1f
 568      180F0000 
 569 0f10 8F270000 	    _BRAN CTRL_KEY
ARM GAS  forth.s 			page 43


 569      7C0F0000 
 570 0f18 D50E0000 	1:  _ADR CHAR_FONT 
 571 0f1c 910B0000 	    _ADR CURSOR_COL 
 572 0f20 C1270000 	    _ADR AT
 573 0f24 D50B0000 	    _ADR COLX  // x coord 
 574 0f28 A50B0000 	    _ADR CURSOR_ROW 
 575 0f2c C1270000 	    _ADR AT    
 576 0f30 BD0B0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0f34 BD2A0000 	    _ADR ROT  // TEST 
 578 0f38 3B270000 	    _DOLIT 7   
 578      07000000 
 579 0f40 51280000 	    _ADR TOR  
 580 0f44 51280000 	1:  _ADR TOR  // { x y }
 581 0f48 0D2B0000 	    _ADR DDUP  // { x y x y }
 582 0f4c 3D280000 	    _ADR RAT 
 583 0f50 E1270000 	    _ADR CAT   // { x y x y r }
 584 0f54 950E0000 	    _ADR CHAR_ROW 
 585 0f58 F5290000 	    _ADR ONEP // {x y' }
 586 0f5c 0D280000 	    _ADR RFROM 
 587 0f60 F5290000 	    _ADR ONEP // {x y' c-adr' }
 588 0f64 5D270000 	    _DONXT 1b
 588      440F0000 
 589 0f6c F92A0000 	    _ADR TDROP  
 590 0f70 250E0000 	    _ADR RIGHT
 591 0f74 65100000 	9:  _ADR SHOW_CURSOR 
 592 0f78 7B250000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0f7c ED100000 	    _ADR HIDE_CURSOR
 595 0f80 D5280000 	    _ADR DUPP 
 596 0f84 3B270000 	    _DOLIT BKSPP  
 596      08000000 
 597 0f8c 212C0000 	    _ADR EQUAL 
 598 0f90 7B270000 	    _QBRAN 1f 
 598      A80F0000 
 599 0f98 45100000 	    _ADR BACK_SPACE 
 600 0f9c C5280000 	8:  _ADR DROP 
 601 0fa0 8F270000 	    _BRAN 9b 
 601      740F0000 
 602 0fa8 D5280000 	1:  _ADR DUPP 
 603 0fac 3B270000 	    _DOLIT CRR 
 603      0D000000 
 604 0fb4 212C0000 	    _ADR EQUAL 
 605 0fb8 7B270000 	    _QBRAN 1f 
 605      CC0F0000 
 606 0fc0 ED0F0000 	    _ADR CAR_RET
 607 0fc4 8F270000 	    _BRAN 8b
 607      9C0F0000 
 608 0fcc 3B270000 	1:  _DOLIT LF 
 608      0A000000 
 609 0fd4 212C0000 	    _ADR EQUAL 
 610 0fd8 7B270000 	    _QBRAN 9b 
 610      740F0000 
 611 0fe0 05100000 	    _ADR LN_FEED
 612 0fe4 8F270000 	    _BRAN 9b  
 612      740F0000 
 613              	
 614              	/*******************************
ARM GAS  forth.s 			page 44


 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0fec 504700BF 	   _NEST
 620 0ff0 3B270000 	   _DOLIT 0 
 620      00000000 
 621 0ff8 910B0000 	   _ADR CURSOR_COL 
 622 0ffc AD270000 	   _ADR STORE 
 623 1000 7B250000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1004 504700BF 	    _NEST 
 631 1008 A50B0000 	    _ADR CURSOR_ROW 
 632 100c C1270000 	    _ADR AT 
 633 1010 D5280000 	    _ADR DUPP 
 634 1014 3B270000 	    _DOLIT 24 
 634      18000000 
 635 101c 41290000 	    _ADR XORR 
 636 1020 7B270000 	    _QBRAN 1f
 636      38100000 
 637 1028 F5290000 	    _ADR ONEP 
 638 102c A50B0000 	    _ADR CURSOR_ROW 
 639 1030 AD270000 	    _ADR STORE 
 640 1034 7B250000 	    _UNNEST    
 641 1038 C5280000 	1:  _ADR DROP 
 642 103c 550D0000 	    _ADR SCROLLUP 
 643 1040 7B250000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1044 504700BF 	  _NEST 
 652 1048 450E0000 	  _ADR LEFT 
 653 104c 65100000 	  _ADR SHOW_CURSOR
 654 1050 7B250000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1054 EC0E0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1064 504700BF 	    _NEST 
 663 1068 3B270000 	    _DOLIT 0xFF
 663      FF000000 
 664 1070 A50B0000 	0:  _ADR CURSOR_ROW
ARM GAS  forth.s 			page 45


 665 1074 C1270000 	    _ADR AT  
 666 1078 F5290000 	    _ADR ONEP 
 667 107c BD0B0000 	    _ADR ROWY 
 668 1080 3B270000 	    _DOLIT BPR
 668      A0000000 
 669 1088 B9290000 	    _ADR STAR
 670 108c 3B270000 	    _DOLIT BPR  
 670      A0000000 
 671 1094 A9290000 	    _ADR SUBB 
 672 1098 910B0000 	    _ADR CURSOR_COL
 673 109c C1270000 	    _ADR AT 
 674 10a0 D50B0000 	    _ADR COLX 
 675 10a4 992A0000 	    _ADR TWOSL  
 676 10a8 99290000 	    _ADR PLUS
 677 10ac 050C0000 	    _ADR VIDBUFF
 678 10b0 99290000 	    _ADR PLUS
 679 10b4 3B270000 	    _DOLIT 2
 679      02000000 
 680 10bc 51280000 	    _ADR TOR  
 681 10c0 0D2B0000 	1:  _ADR DDUP 
 682 10c4 CD270000 	    _ADR CSTOR 
 683 10c8 F5290000 	    _ADR ONEP 
 684 10cc 5D270000 	    _DONXT 1b
 684      C0100000 
 685 10d4 E52A0000 	2:  _ADR DDROP // drop 3 elements 
 686 10d8 7B250000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 10dc 58100000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 10ec 504700BF 	    _NEST 
 694 10f0 5D0B0000 	    _ADR BACKCOLOR 
 695 10f4 C1270000 	    _ADR AT 
 696 10f8 D5280000 	    _ADR DUPP  
 697 10fc 3B270000 	    _DOLIT 4 
 697      04000000 
 698 1104 89290000 	    _ADR LSHIFT 
 699 1108 2D290000 	    _ADR ORR 
 700 110c 8F270000 	    _BRAN 0b
 700      70100000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1114 E0100000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1120 352E     	    cmp TOS,#53
 706 1122 01D4     	    bmi 1f 
 707 1124 4FF03406 	    mov TOS,#52
 708 1128 C4F89460 	1:  str TOS,[UP,#COL]
 709 112c 57F8046B 	    _POP
 710 1130 192E     	    cmp TOS,#25
ARM GAS  forth.s 			page 46


 711 1132 01D4     	    bmi 1f 
 712 1134 4FF01806 	    mov TOS,#24 
 713 1138 C4F89060 	1:  str TOS,[UP,#ROW]
 714 113c 57F8046B 	    _POP 
 715 1140 01F018BA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1144 18110000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1150 504700BF 	    _NEST 
 721 1154 65320000 	    _ADR PAD 
 722 1158 D5280000 	    _ADR DUPP 
 723 115c F5290000 	    _ADR ONEP 
 724 1160 3B270000 	    _DOLIT 53
 724      35000000 
 725 1168 C93F0000 	    _ADR ACCEP
 726 116c E5280000 	    _ADR SWAP 
 727 1170 C5280000 	    _ADR DROP 
 728 1174 F9280000 	    _ADR OVER 
 729 1178 CD270000 	    _ADR CSTOR  
 730 117c 7B250000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
ARM GAS  forth.s 			page 47


 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
ARM GAS  forth.s 			page 48


 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
ARM GAS  forth.s 			page 49


 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
ARM GAS  forth.s 			page 50


 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
ARM GAS  forth.s 			page 51


  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
ARM GAS  forth.s 			page 52


  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
ARM GAS  forth.s 			page 53


 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 118c 1C61     	   .byte 0x1c,'a' 
   9 118e 3262     	   .byte 0x32,'b'
  10 1190 2163     	   .byte 0x21,'c'
  11 1192 2364     	   .byte 0x23,'d'
  12 1194 2465     	   .byte 0x24,'e'
  13 1196 2B66     	   .byte 0x2b,'f'
  14 1198 3467     	   .byte 0x34,'g'
  15 119a 3368     	   .byte 0x33,'h'
  16 119c 4369     	   .byte 0x43,'i'
  17 119e 3B6A     	   .byte 0x3B,'j'
  18 11a0 426B     	   .byte 0x42,'k'
  19 11a2 4B6C     	   .byte 0x4b,'l'
  20 11a4 3A6D     	   .byte 0x3a,'m'
  21 11a6 316E     	   .byte 0x31,'n'
  22 11a8 446F     	   .byte 0x44,'o'
  23 11aa 4D70     	   .byte 0x4d,'p'
  24 11ac 1571     	   .byte 0x15,'q'
  25 11ae 2D72     	   .byte 0x2d,'r'
  26 11b0 1B73     	   .byte 0x1b,'s'
  27 11b2 2C74     	   .byte 0x2c,'t'
  28 11b4 3C75     	   .byte 0x3c,'u'
  29 11b6 2A76     	   .byte 0x2a,'v'
  30 11b8 1D77     	   .byte 0x1d,'w'
  31 11ba 2278     	   .byte 0x22,'x'
  32 11bc 3579     	   .byte 0x35,'y'
  33 11be 1A7A     	   .byte 0x1a,'z'
  34 11c0 4530     	   .byte 0x45,'0'
ARM GAS  forth.s 			page 54


  35 11c2 1631     	   .byte 0x16,'1'
  36 11c4 1E32     	   .byte 0x1e,'2'
  37 11c6 2633     	   .byte 0x26,'3'
  38 11c8 2534     	   .byte 0x25,'4'
  39 11ca 2E35     	   .byte 0x2e,'5'
  40 11cc 3636     	   .byte 0x36,'6'
  41 11ce 3D37     	   .byte 0x3d,'7'
  42 11d0 3E38     	   .byte 0x3e,'8'
  43 11d2 4639     	   .byte 0x46,'9'
  44 11d4 0E60     	   .byte 0x0e,'`'
  45 11d6 4E2D     	   .byte 0x4e,'-'
  46 11d8 553D     	   .byte 0x55,'='
  47 11da 5D5C     	   .byte 0x5d,'\\'
  48 11dc 545B     	   .byte 0x54,'['
  49 11de 5B5D     	   .byte 0x5b,']'
  50 11e0 4C3B     	   .byte 0x4c,';'
  51 11e2 5227     	   .byte 0x52,'\''
  52 11e4 412C     	   .byte 0x41,','
  53 11e6 492E     	   .byte 0x49,'.'
  54 11e8 7C2A     	   .byte 0x7c,'*'
  55 11ea 792B     	   .byte 0x79,'+'
  56 11ec 2920     	   .byte 0x29,' '
  57 11ee 5A0D     	   .byte SC_ENTER,CRR 
  58 11f0 6608     	   .byte SC_BKSP,BKSPP 
  59 11f2 0D09     	   .byte SC_TAB,9
  60 11f4 761B     	   .byte SC_ESC,27
  61 11f6 119E     	   .byte SC_LALT,VK_LALT 
  62 11f8 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 11fa 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 11fc 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 11fe 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1200 5800     	   .byte SC_CAPS,0
  67 1202 0580     	   .byte SC_F1,VK_F1
  68 1204 0681     	   .byte SC_F2,VK_F2
  69 1206 0482     	   .byte SC_F3,VK_F3
  70 1208 0C83     	   .byte SC_F4,VK_F4
  71 120a 0384     	   .byte SC_F5,VK_F5
  72 120c 0B85     	   .byte SC_F6,VK_F6
  73 120e 8386     	   .byte SC_F7,VK_F7
  74 1210 0A87     	   .byte SC_F8,VK_F8
  75 1212 0188     	   .byte SC_F9,VK_F9
  76 1214 098A     	   .byte SC_F10,VK_F10
  77 1216 788B     	   .byte SC_F11,VK_F11
  78 1218 078C     	   .byte SC_F12,VK_F12
  79 121a 7030     	   .byte SC_KP0,'0'
  80 121c 6931     	   .byte SC_KP1,'1'
  81 121e 7232     	   .byte SC_KP2,'2'
  82 1220 7A33     	   .byte SC_KP3,'3'
  83 1222 6B34     	   .byte SC_KP4,'4'
  84 1224 7335     	   .byte SC_KP5,'5'
  85 1226 7436     	   .byte SC_KP6,'6'
  86 1228 6C37     	   .byte SC_KP7,'7'
  87 122a 7538     	   .byte SC_KP8,'8'
  88 122c 7D39     	   .byte SC_KP9,'9'
  89 122e 7C2A     	   .byte SC_KPMUL,'*'
  90 1230 4A2F     	   .byte SC_KPDIV,'/'
  91 1232 792B     	   .byte SC_KPPLUS,'+'
ARM GAS  forth.s 			page 55


  92 1234 7B2D     	   .byte SC_KPMINUS,'-'
  93 1236 712E     	   .byte SC_KPDOT,'.'
  94 1238 5A0D     	   .byte SC_KPENTER,'\r'
  95 123a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 123c AAAA     	   .byte BAT_OK,BAT_OK  
  97 123e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1240 6141     	   .byte 'a','A'
 102 1242 6242     	   .byte 'b','B'
 103 1244 6343     	   .byte 'c','C'
 104 1246 6444     	   .byte 'd','D'
 105 1248 6545     	   .byte 'e','E'
 106 124a 6646     	   .byte 'f','F'
 107 124c 6747     	   .byte 'g','G'
 108 124e 6848     	   .byte 'h','H'
 109 1250 6949     	   .byte 'i','I'
 110 1252 6A4A     	   .byte 'j','J'
 111 1254 6B4B     	   .byte 'k','K'
 112 1256 6C4C     	   .byte 'l','L'
 113 1258 6D4D     	   .byte 'm','M'
 114 125a 6E4E     	   .byte 'n','N'
 115 125c 6F4F     	   .byte 'o','O'
 116 125e 7050     	   .byte 'p','P'
 117 1260 7151     	   .byte 'q','Q'
 118 1262 7252     	   .byte 'r','R'
 119 1264 7353     	   .byte 's','S'
 120 1266 7454     	   .byte 't','T'
 121 1268 7555     	   .byte 'u','U'
 122 126a 7656     	   .byte 'v','V'
 123 126c 7757     	   .byte 'w','W'
 124 126e 7858     	   .byte 'x','X'
 125 1270 7959     	   .byte 'y','Y'
 126 1272 7A5A     	   .byte 'z','Z'
 127 1274 3121     	   .byte '1','!'
 128 1276 3240     	   .byte '2','@'
 129 1278 3323     	   .byte '3','#'
 130 127a 3424     	   .byte '4','$'
 131 127c 3525     	   .byte '5','%'
 132 127e 365E     	   .byte '6','^'
 133 1280 3726     	   .byte '7','&'
 134 1282 382A     	   .byte '8','*'
 135 1284 3928     	   .byte '9','('
 136 1286 3029     	   .byte '0',')'
 137 1288 2D5F     	   .byte '-','_'
 138 128a 3D2B     	   .byte '=','+'
 139 128c 607E     	   .byte '`','~'
 140 128e 2722     	   .byte '\'','"'
 141 1290 2C3C     	   .byte ',','<'
 142 1292 2E3E     	   .byte '.','>'
 143 1294 2F3F     	   .byte '/','?'
 144 1296 5C7C     	   .byte '\\','|'
 145 1298 3B3A     	   .byte ';',':'
 146 129a 5B7B     	   .byte '[','{'
 147 129c 5D7D     	   .byte ']','}'
 148 129e 0000     	   .byte 0,0
ARM GAS  forth.s 			page 56


 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 12a0 315C     	   .byte '1','\\'
 153 12a2 3240     	   .byte '2','@'
 154 12a4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 12a6 363F     	   .byte '6','?'
 158 12a8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 12aa 397B     	   .byte '9','{'
 161 12ac 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 12ae 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 12b0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 12b2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 12b4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 12b6 11A3     	    .byte SC_RALT,VK_RALT
 172 12b8 2F97     	    .byte SC_APPS,VK_APPS
 173 12ba 758D     	    .byte SC_UP,VK_UP
 174 12bc 728E     	    .byte SC_DOWN,VK_DOWN
 175 12be 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 12c0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 12c2 7095     	    .byte SC_INSERT,VK_INSERT
 178 12c4 6C91     	    .byte SC_HOME,VK_HOME
 179 12c6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 12c8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 12ca 717F     	    .byte SC_DEL,VK_DELETE
 182 12cc 6992     	    .byte SC_END,VK_END
 183 12ce 4A2F     	    .byte SC_KPDIV,'/'
 184 12d0 5A0D     	    .byte SC_KPENTER,'\r'
 185 12d2 1200     	    .byte 0x12,0
 186 12d4 7C00     	    .byte 0x7c,0
 187 12d6 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 12d8 6303     	   .byte 'c', VK_CTRL_C 
 193 12da 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 12dc 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 12de 27A2     	   .byte SC_RGUI,VK_RGUI
 196 12e0 11A3     	   .byte SC_RALT,VK_RALT
 197 12e2 2F97     	   .byte SC_APPS,VK_APPS
 198 12e4 7095     	   .byte SC_INSERT,VK_INSERT
 199 12e6 6C91     	   .byte SC_HOME,VK_HOME
 200 12e8 7D93     	   .byte SC_PGUP,VK_PGUP
 201 12ea 717F     	   .byte SC_DEL,VK_DELETE
 202 12ec 6992     	   .byte SC_END,VK_END
 203 12ee 7A94     	   .byte SC_PGDN,VK_PGDN
 204 12f0 758D     	   .byte SC_UP,VK_UP
 205 12f2 6B8F     	   .byte SC_LEFT,VK_LEFT
ARM GAS  forth.s 			page 57


 206 12f4 728E     	   .byte SC_DOWN,VK_DOWN
 207 12f6 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 12f8 4A2F     	   .byte SC_KPDIV,'/'
 209 12fa 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 12fc 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 12fe 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1300 119E     	   .byte SC_LALT,VK_LALT
 213 1302 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1304 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1306 761B     	   .byte SC_ESC,VK_ESC
 216 1308 779A     	   .byte SC_NUM,VK_NLOCK
 217 130a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 130c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 130e 00BF     	    _GBL_FUNC kbd_isr 
  79 1310 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
ARM GAS  forth.s 			page 58


  79      C4F20102 
  80 1318 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 131c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 131e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1326 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 132a 10F0020F 	    tst r0,#KBD_TX 
  85 132e 40F08480 	    bne send_bit  
  86 1332 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1334 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1338 01F10102 	    add r2,r1,#1
  89 133c 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 1340 0029     	    cmp r1,#0
  91 1342 15D0     	    beq start_bit 
  92 1344 0929     	    cmp r1,#9 
  93 1346 25D0     	    beq parity_bit 
  94 1348 0A29     	    cmp r1,#10 
  95 134a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 134c 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1350 4FEA5202 	    lsr r2,#1 
  99 1354 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1358 07D0     	    beq 1f 
 101 135a 42F08002 	    orr r2,#(1<<7)
 102 135e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 1362 00F10100 	    add r0,#1 
 104 1366 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 136a 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 136e 63E0     	    b 9f         
 107              	start_bit:
 108 1370 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1374 60D1     	    bne 9f // not a start bit 
 110 1376 80EA0000 	    eor r0,r0 
 111 137a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 137e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1382 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1386 6FF00101 	    mvn r1,#1
 115 138a 00EA0100 	    and r0,r1 // clear error flag 
 116 138e 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1392 51E0     	    b 9f 
 118              	parity_bit:
 119 1394 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1398 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 139c 4CD0     	    beq 9f  
 122 139e 01F10101 	    add r1,#1 
 123 13a2 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 13a6 47E0     	    b 9f      
 125              	stop_bit:
 126 13a8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 13ac 40D0     	    beq 8f // error stop bit expected 
 128 13ae 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 13b2 11F0010F 	    tst r1,#1 
 130 13b6 3BD0     	    beq 8f // error parity
 131 13b8 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 13bc 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 13c0 E028     	    cmp r0,#XT_KEY
 134 13c2 04D1     	    bne 1f
ARM GAS  forth.s 			page 59


 135 13c4 41F04001 	    orr r1,#KBD_F_XT
 136 13c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 13cc 30E0     	    b 8f  
 138 13ce 11F0800F 	1:  tst r1,#KBD_F_REL
 139 13d2 14D0     	    beq store_code
 140 13d4 5828     	    cmp r0,#SC_CAPS
 141 13d6 04D1     	    bne 1f
 142 13d8 81F00401 	    eor r1,#KBD_F_CAPS
 143 13dc 41F00101 	    orr r1,#KBD_F_CTGL 
 144 13e0 06E0     	    b 2f 
 145 13e2 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 13ec 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 13f0 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 13f4 01EA0201 	    and r1,r2
 149 13f8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 13fc 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 13fe F028     	    cmp r0,#KEY_REL
 154 1400 04D1     	    bne 1f
 155              	// set release flags 
 156 1402 41F08001 	    orr r1,#KBD_F_REL 
 157 1406 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 140a 11E0     	    b 8f     
 159 140c 0146     	1:  mov r1,r0 
 160 140e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1418 0AD1     	    bne 8f // was async key 
 162 141a D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 141e 04F17802 	    add r2,UP,#KBD_QUEUE
 164 1422 1154     	    strb r1,[r2,r0]
 165 1424 00F10100 	    add r0,#1
 166 1428 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 142c 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 1430 80EA0000 	8:  eor r0,r0 
 169 1434 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1438 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 143a 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 143e 01F10100 	    add r0,r1,#1
 182 1442 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 1446 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 144a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 144e 0829     	1:  cmp r1,#8 
 187 1450 15D0     	    beq send_parity 
ARM GAS  forth.s 			page 60


 188 1452 0929     	    cmp r1,#9 
 189 1454 1CD0     	    beq send_stop
 190 1456 0A29     	    cmp r1,#10
 191 1458 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 145a 10F0010F 	    tst r0,#1
 194 145e 4FEA5000 	    lsr r0,#1
 195 1462 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1466 02D1     	    bne 1f 
 197 1468 4FEA0242 	    lsl r2,#16
 198 146c 05E0     	    b 2f  
 199 146e 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1472 00F10100 	    add r0,#1 
 201 1476 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 147a 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 147c 1CE0     	    b 9f 
 204              	send_parity:
 205 147e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1482 10F0010F 	    tst r0,#1
 207 1486 01D0     	    beq 1f 
 208 1488 4FEA0242 	    lsl r2,#16
 209 148c 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 148e 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1490 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1492 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1496 1960     	    str r1,[r3,#GPIO_MODER]
 217 1498 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 149a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 149e 6FF00201 	    mvn r1,#KBD_TX 
 221 14a2 00EA0100 	    and r0,r1 
 222 14a6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 14a8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 14ac 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 14b0 80EA0000 	    eor r0,r0 
 226 14b4 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 14b8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 14ba 02B4     	    push {r1}
 238 14bc DFF86414 	    ldr r1,=async_keys
 239 14c0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 14ca 02BC     	    pop {r1}
 241 14cc 7047     	    _RET 
 242              	
ARM GAS  forth.s 			page 61


 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 14ce 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 14d8 FF28     	    cmp r0,#255
 256 14da 01D1     	    bne set_async_key 
 257 14dc 0020     	    movs r0,#0 
 258 14de 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 14e0 06B4     	    push {r1,r2}
 262 14e2 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 14e6 DFF84014 	    ldr r1,=async_jump 
 264 14ea D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 14ee 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 14f2 04E0     	    b set_reset
 268              	ctrl_key:
 269 14f4 4FF01000 	    mov r0,#KBD_F_CTRL
 270 14f8 01E0     	    b set_reset 
 271              	alt_key:
 272 14fa 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 14fe 12F0800F 	    tst r2,#KBD_F_REL 
 275 1502 04D0     	    beq 1f 
 276 1504 6FEA0000 	    mvn r0,r0
 277 1508 02EA0002 	    and r2,r0
 278 150c 01E0     	    b 2f
 279 150e 42EA0002 	1:  orr r2,r0 
 280 1512 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1516 5FF0FF30 	    movs r0,#-1
 282 151a 06BC     	9:  pop {r1,r2}
 283 151c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 151e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1520 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1522 1401     	    .byte SC_LCTRL,1  // left control 
 290 1524 1401     	    .byte SC_RCTRL,1  // right control 
 291 1526 1102     	    .byte SC_LALT,2  // left alt 
 292 1528 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 152a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 152c 00       	    .byte 0 // shift  key 
 297 152d 03       	    .byte (ctrl_key-shift_key)/2
ARM GAS  forth.s 			page 62


 298 152e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 152f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1530 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1538 1846     	    mov r0,r3 
 311 153a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 153e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1542 00B5FFF7 	    _CALL gpio_config
 313      0FF85DF8 
 313      04EB
 314 154c 1846     	    mov r0,r3 
 315 154e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1552 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1556 00B5FFF7 	    _CALL gpio_config
 317      05F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1560 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1568 4FF40050 	    mov r0,#(2<<12)
 321 156c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 156e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1576 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 157a 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 157c D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 157e 80EA0000 	   eor r0,r0 
 328 1582 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1586 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 158a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 158e 4FF00101 	   mov r1,#1 
 333 1592 00B5FEF7 	   _CALL nvic_set_priority
 333      A2FF5DF8 
 333      04EB
 334 159c 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 15a0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      B4FF5DF8 
 335      04EB
 336 15aa 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 15ac 48110000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
ARM GAS  forth.s 			page 63


 341 15bc 47F8046D 	    _PUSH 
 342 15c0 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 15c4 06F0FC06 	    and TOS,#0xFC  
 344 15c8 00F0D4BF 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 15cc 0EB4     	    push {T1,T2,T3}
 352 15ce 80EA0000 	    eor T0,T0  
 353 15d2 04F17803 	    add T3,UP,#KBD_QUEUE
 354 15d6 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 15da D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 15de 9142     	    cmp T1,T2 
 357 15e0 06D0     	    beq 2f  
 358 15e2 585C     	    ldrb T0,[T3,T1]
 359 15e4 01F10101 	    add T1,#1 
 360 15e8 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 15ec C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 15f0 0EBC     	2:  pop {T1,T2,T3}
 363 15f2 7047     	    _RET 
 364              	
 365              	wait_code:
 366 15f4 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 15fe 0000     	    movs T0,T0
 368 1600 F8D0     	    beq wait_code  
 369 1602 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1604 04B4     	    push {T2}
 380 1606 11F8012B 	1:  ldrb T2,[T1],#1
 381 160a 22B1     	    cbz T2,2f 
 382 160c 8242     	    cmp T2,T0
 383 160e 02D0     	    beq 2f 
 384 1610 01F10101 	    add T1,#1 
 385 1614 F7E7     	    b 1b 
 386 1616 0878     	2:  ldrb T0,[T1]
 387 1618 0000     	    movs T0,T0 // set/reset zero flag 
 388 161a 04BC     	9:  pop {T2}
 389 161c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
ARM GAS  forth.s 			page 64


 396 161e B0150000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 162c 47F8046D 	    _PUSH 
 398 1630 86EA0606 	    eor TOS,TOS 
 399 1634 BD49     	    ldr T1,=sc_ascii // translation table
 400 1636 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 163a 4FF04002 	    mov T2,#KBD_F_XT 
 402 163e 1042     	    tst T0,T2
 403 1640 00D0     	    beq 1f
 404 1642 BB49     	    ldr T1,=extended // extended code translation
 405 1644 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 164e 98B1     	    cbz T0,inkey_exit
 407 1650 E128     	    cmp T0,#XT2_KEY // pause 
 408 1652 13D0     	    beq pause_key
 409 1654 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 165e 0646     	    mov TOS,T0
 411 1660 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 166a 032E     	    cmp TOS,#VK_CTRL_C 
 413 166c 3EF444AE 	    beq user_reboot 
 414 1670 47F8046D 	    _PUSH 
 415 1674 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1678 00F07CBF 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 167c 4FF00701 	    mov T1,#7 
 420 1680 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 168a 0139     	    subs T1,#1
 422 168c F8D1     	    bne 1b 
 423 168e 00F071BF 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1692 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1696 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 169a 06D1     	    bne shift_down 
 431 169c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 16a0 06D1     	    bne altchar_down 
 433 16a2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 16a6 06D1     	    bne ctrl_down 
 435 16a8 0DE0     	    b 9f 
 436              	shift_down:
 437 16aa 3046     	    mov T0,TOS 
 438 16ac A149     	    ldr T1,=shifted 
 439 16ae 04E0     	    b 8f 
 440              	altchar_down:
 441 16b0 3046     	    mov T0,TOS 
ARM GAS  forth.s 			page 65


 442 16b2 A149     	    ldr T1,=altchar
 443 16b4 01E0     	    b 8f
 444              	ctrl_down:
 445 16b6 3046     	    mov T0,TOS 
 446 16b8 A049     	    ldr T1,=controls 
 447 16ba 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 16c4 0646     	    mov TOS,T0
 449 16c6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 16d0 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 16d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 16d6 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 16da 0BD0     	    beq 9f 
 456 16dc 412E     	    cmp TOS,#'A'
 457 16de 09D4     	    bmi 9f 
 458 16e0 5B2E     	    cmp TOS,#'Z'+1 
 459 16e2 03D4     	    bmi 3f 
 460 16e4 612E     	    cmp TOS,#'a'
 461 16e6 05D4     	    bmi 9f 
 462 16e8 7B2E     	    cmp TOS,#'z'+1
 463 16ea 03D5     	    bpl 9f 
 464 16ec 4FF02000 	3:  mov T0,#(1<<5)
 465 16f0 86EA0006 	    eor TOS,T0 
 466 16f4 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 16f6 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 16f8 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 16fa 0128     	    cmp r0,ST_PREVID 
 484 16fc FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 16fe 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1702 00B5FEF7 	    _CALL nvic_disable_irq
 487      18FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 170c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1714 1846     	    mov r0,r3 
 491 1716 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
ARM GAS  forth.s 			page 66


 492 171a 4FF01102 	    mov r2,#OUTPUT_OD
 493 171e 00B5FEF7 	    _CALL gpio_config 
 493      21FF5DF8 
 493      04EB
 494 1728 1846     	    mov r0,r3 
 495 172a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 172e 82EA0202 	    eor r2,r2 
 497 1732 00B5FEF7 	    _CALL gpio_out 
 497      6DFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 173c 4FF4E150 	    mov r0,#150*48
 500 1740 0138     	1:  subs r0,#1 
 501 1742 FDD1     	    bne 1b
 502 1744 01BC     	    pop {r0}
 503 1746 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 174a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 174e 40F00200 	    orr r0,#KBD_TX 
 506 1752 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 1756 80EA0000 	    eor r0,r0 
 508 175a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 175e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1762 1846     	    mov r0,r3 
 513 1764 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1768 4FF01102 	    mov r2,#OUTPUT_OD 
 515 176c 00B5FEF7 	    _CALL gpio_config 
 515      FAFE5DF8 
 515      04EB
 516 1776 1846     	    mov r0,r3 
 517 1778 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 177c 82EA0202 	    eor r2,r2 
 519 1780 00B5FEF7 	    _CALL gpio_out
 519      46FF5DF8 
 519      04EB
 520              	// release clock line 
 521 178a 1846     	    mov r0,r3 
 522 178c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1790 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1794 00B5FEF7 	    _CALL gpio_config
 524      E6FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 179e 4FF00A00 	    mov r0,#10
 528 17a2 E060     	    str r0,[UP,#CD_TIMER]
 529 17a4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 17a6 20B1     	    cbz r0, 4f 
 531 17a8 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 17ac 10F0020F 	    tst r0,#KBD_TX
 533 17b0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 17b2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 17b6 00B5FEF7 	    _CALL nvic_enable_irq
 536      A9FE5DF8 
 536      04EB
ARM GAS  forth.s 			page 67


 537 17c0 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 17c4 20F00201 	    bic r1,r0,#KBD_TX
 539 17c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 17cc 00F00200 	    and r0,#KBD_TX
 541 17d0 48B1     	    cbz r0, 5f
 542 17d2 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 17d4 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 17d8 1960     	    str r1,[r3,#GPIO_MODER]
 545 17da 80EA0000 	    eor r0,r0 
 546 17de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 17e2 6FEA0000 	    mvn r0,r0   
 548 17e6 0EBC     	5:  pop {r1,r2,r3}
 549 17e8 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 17ea 80EA0000 	    eor T0,T0 
 555 17ee C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 17f2 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 17f6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 17fa 6FF00301 	    mvn T1,#3
 559 17fe 00EA0100 	    and T0,T1 
 560 1802 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1806 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1808 22160000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1814 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1818 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1822 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1824 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 182e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1838 FE28     	    cmp r0,KBD_CMD_RESEND
 574 183a EBD0     	    beq 1b 
 575 183c 4FF4FA70 	    mov T0,#500 
 576 1840 E060     	    str T0,[UP,#CD_TIMER]
 577 1842 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 184c 10B9     	    cbnz T0,3f
 579 184e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1850 0028     	    cmp T0,#0 
 581 1852 F6D1     	    bne 2b 
 582 1854 47F8046D 	3:  _PUSH 
 583 1858 0646     	    mov TOS,T0  
ARM GAS  forth.s 			page 68


 584 185a 00F08BBE 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 185e 0C180000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 186c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1876 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 187a 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1884 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 188e FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1890 ECD0     	    beq 1b
 598 1892 FA28     	    cmp T0,#KBD_ACK  
 599 1894 F6D1     	    bne 2b 
 600 1896 3046     	2:  mov T0,TOS 
 601 1898 00F00700 	    and T0,#7 
 602 189c 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 18a6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 18b0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 18b2 F0D0     	    beq 2b
 606 18b4 FA28     	    cmp T0,#KBD_ACK 
 607 18b6 F6D1     	    bne 3b  
 608 18b8 57F8046B 	    _POP 
 609 18bc 00F05ABE 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 18c0 62180000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 18d0 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 18d4 10F0010F 	    tst T0,#1
 619 18d8 01D1     	    bne 1f 
 620 18da 00F04BBE 	    _NEXT 
 621 18de 47F8046D 	1: _PUSH 
 622 18e2 6FF00101 	    mvn T1,#1 
 623 18e6 00EA0100 	    and T0,T1 
 624 18ea 84F87600 	    strb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 69


 625 18ee 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 18f2 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 18fa C4180000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1908 504700BF 	    _NEST
 635 190c D1180000 	1:  _ADR CAPS_LED  
 636 1910 2D160000 	    _ADR PS2_QKEY 
 637 1914 A92A0000 	    _ADR QDUP 
 638 1918 7B270000 	    _QBRAN 1b  
 638      0C190000 
 639 1920 7B250000 	    _UNNEST 
 640 1924 1E150000 	
 640      2C150000 
 640      8C110000 
 640      B0120000 
 640      40120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
ARM GAS  forth.s 			page 70


  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1944 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 194c 0346     	    mov r3,r0 
  44 194e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1952 4FF00102 	    mov r2,#OUTPUT_PP
  46 1956 00B5FEF7 	    _CALL gpio_config 
  46      05FE5DF8 
  46      04EB
  47 1960 1846     	    mov r0,r3 
  48 1962 4FF00401 	    mov r1,#PIN_F_SC  
  49 1966 4FF00102 	    MOV r2,#1
  50 196a 00B5FEF7 	    _CALL gpio_out 
  50      51FE5DF8 
  50      04EB
  51 1974 1846     	    mov r0,r3 
  52 1976 4FF00501 	    mov r1,#PIN_SCK  
  53 197a 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 197e 00B5FEF7 	    _CALL gpio_config 
  54      F1FD5DF8 
  54      04EB
  55 1988 1846     	    mov r0,r3 
  56 198a 4FF00701 	    mov r1,#PIN_MOSI 
  57 198e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1992 00B5FEF7 	    _CALL gpio_config 
  58      E7FD5DF8 
  58      04EB
  59 199c 1846     	    mov r0,r3
  60 199e 4FF00601 	    mov r1,#PIN_MISO
  61 19a2 4FF00202 	    mov r2,#INPUT_AFO  
  62 19a6 00B5FEF7 	    _CALL gpio_config
  62      DDFD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 19b0 4CF6AA40 	    mov r0,#0xCCAA
  65 19b4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 19b6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 19be 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 19c0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 19c4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 19c6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 19ce 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 19d2 0180     	    strh r1,[r0,#SPI_CR1]
  73 19d4 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 19d6 80EA0000 	    eor r0,r0 
  75 19da C5F25050 	    movt r0,#0x5550 
  76 19de 40EA0100 	    orr r0,r1 
ARM GAS  forth.s 			page 71


  77 19e2 1862     	    str r0,[r3,#GPIO_AFRL]
  78 19e4 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 19e6 FE180000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 19f4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 19fc 4FF00401 	    mov r1,#PIN_F_SC 
  88 1a00 4FF00002 	    mov r2,#0 
  89 1a04 00B5FEF7 	    _CALL gpio_out 
  89      04FE5DF8 
  89      04EB
  90 1a0e 00F0B1BD 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1a12 EA190000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1a20 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1a28 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1a2a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1a2e FBD1     	    bne 1b 
 102 1a30 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1a38 4FF00401 	    mov r1,#PIN_F_SC 
 104 1a3c 4FF00102 	    mov r2,#1 
 105 1a40 00B5FEF7 	    _CALL gpio_out 
 105      E6FD5DF8 
 105      04EB
 106 1a4a 00F093BD 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1a4e 161A0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1a5c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1a64 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1a66 11F0020F 	    tst T1,#(1<<1) //TXE
ARM GAS  forth.s 			page 72


 117 1a6a FBD0     	    beq 0b 
 118 1a6c 6FF00001 	    mvn T1,#0 
 119 1a70 0173     	    strb T1,[T0,#SPI_DR]
 120 1a72 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1a74 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1a78 FBD0     	    beq 1b     
 123              	2:  
 124 1a7a 47F8046D 	    _PUSH 
 125 1a7e 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1a80 00F078BD 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1a84 521A0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1a90 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1a98 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1a9a 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1a9e FBD0     	    beq 0b 
 138 1aa0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1aa2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1aa4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1aa8 FBD0     	    beq 1b 
 142 1aaa 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1aac 57F8046B 	    _POP 
 144 1ab0 00F060BD 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ab4 881A0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1ac0 504700BF 	    _NEST 
 153 1ac4 F5190000 	    _ADR CHIP_SEL 
 154 1ac8 3B270000 	    _DOLIT 4
 154      04000000 
 155 1ad0 911A0000 	    _ADR WR_BYTE
 156 1ad4 211A0000 	    _ADR CHIP_DSEL
 157 1ad8 7B250000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1adc B81A0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1ae8 504700BF 	    _NEST 
 165 1aec F5190000 	    _ADR CHIP_SEL 
ARM GAS  forth.s 			page 73


 166 1af0 3B270000 	    _DOLIT 6 
 166      06000000 
 167 1af8 911A0000 	    _ADR WR_BYTE 
 168 1afc 211A0000 	    _ADR CHIP_DSEL 
 169 1b00 7B250000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1b04 E01A0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1b10 504700BF 	    _NEST
 177 1b14 F5190000 	    _ADR CHIP_SEL  
 178 1b18 3B270000 	    _DOLIT sr_cmd 
 178      381B0000 
 179 1b20 99290000 	    _ADR PLUS 
 180 1b24 E1270000 	    _ADR CAT
 181 1b28 911A0000 	    _ADR WR_BYTE
 182 1b2c 5D1A0000 	    _ADR RD_BYTE
 183 1b30 211A0000 	    _ADR CHIP_DSEL  
 184 1b34 7B250000 	    _UNNEST 
 185 1b38 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1b3b 081B0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1b48 504700BF 	    _NEST 
 193 1b4c D5280000 	    _ADR DUPP 
 194 1b50 3B270000 	    _DOLIT 16
 194      10000000 
 195 1b58 71290000 	    _ADR RSHIFT 
 196 1b5c 911A0000 	    _ADR WR_BYTE 
 197 1b60 D5280000 	    _ADR DUPP
 198 1b64 3B270000 	    _DOLIT 8 
 198      08000000 
 199 1b6c 71290000 	    _ADR RSHIFT 
 200 1b70 911A0000 	    _ADR WR_BYTE 
 201 1b74 911A0000 	    _ADR WR_BYTE 
 202 1b78 7B250000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1b7c 3F1B0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1b8c 504700BF 	    _NEST 
 210 1b90 3B270000 	1:  _DOLIT 0 
ARM GAS  forth.s 			page 74


 210      00000000 
 211 1b98 111B0000 	    _ADR RD_SR 
 212 1b9c 3B270000 	    _DOLIT 3 
 212      03000000 
 213 1ba4 19290000 	    _ADR ANDD 
 214 1ba8 7B270000 	    _QBRAN 2f
 214      B81B0000 
 215 1bb0 8F270000 	    _BRAN 1b
 215      901B0000 
 216 1bb8 7B250000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1bbc 801B0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1bcc 504700BF 	    _NEST 
 225 1bd0 E91A0000 	    _ADR WR_ENBL
 226 1bd4 F5190000 	    _ADR CHIP_SEL 
 227 1bd8 3B270000 	    _DOLIT 0x20 
 227      20000000 
 228 1be0 911A0000 	    _ADR WR_BYTE 
 229 1be4 491B0000 	    _ADR SEND_ADR
 230 1be8 211A0000 	    _ADR CHIP_DSEL 
 231 1bec 8D1B0000 	    _ADR WAIT_DONE 
 232 1bf0 7B250000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1bf4 C01B0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1c04 504700BF 	    _NEST 
 240 1c08 E91A0000 	    _ADR WR_ENBL 
 241 1c0c F5190000 	    _ADR CHIP_SEL
 242 1c10 3B270000 	    _DOLIT 0x60
 242      60000000 
 243 1c18 3B270000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1c20 911A0000 	    _ADR WR_BYTE 
 245 1c24 911A0000 	    _ADR WR_BYTE 
 246 1c28 211A0000 	    _ADR CHIP_DSEL 
 247 1c2c 8D1B0000 	    _ADR WAIT_DONE
 248 1c30 7B250000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
ARM GAS  forth.s 			page 75


 255              	******************************/
 256 1c34 F81B0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1c40 504700BF 	    _NEST
 258 1c44 F5190000 	    _ADR CHIP_SEL 
 259 1c48 3B270000 	    _DOLIT 3 
 259      03000000 
 260 1c50 911A0000 	    _ADR WR_BYTE 
 261 1c54 491B0000 	    _ADR SEND_ADR
 262 1c58 51280000 	    _ADR TOR   
 263 1c5c 8F270000 	    _BRAN 2f
 263      741C0000 
 264 1c64 5D1A0000 	1:  _ADR RD_BYTE
 265 1c68 F9280000 	    _ADR OVER 
 266 1c6c CD270000 	    _ADR CSTOR
 267 1c70 F5290000 	    _ADR ONEP 
 268 1c74 5D270000 	2:  _DONXT 1b
 268      641C0000 
 269 1c7c C5280000 	    _ADR DROP 
 270 1c80 211A0000 	    _ADR CHIP_DSEL 
 271 1c84 7B250000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1c88 381C0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1c94 504700BF 	    _NEST 
 280 1c98 E91A0000 	    _ADR WR_ENBL
 281 1c9c F5190000 	    _ADR CHIP_SEL
 282 1ca0 3B270000 	    _DOLIT 2 
 282      02000000 
 283 1ca8 911A0000 	    _ADR WR_BYTE 
 284 1cac 491B0000 	    _ADR SEND_ADR
 285 1cb0 51280000 	    _ADR TOR
 286 1cb4 8F270000 	    _BRAN 2f 
 286      D41C0000 
 287 1cbc D5280000 	1:  _ADR DUPP 
 288 1cc0 E1270000 	    _ADR CAT 
 289 1cc4 D5280000 	    _ADR DUPP 
 290 1cc8 E1390000 	    _ADR HDOT
 291 1ccc 911A0000 	    _ADR WR_BYTE 
 292 1cd0 F5290000 	    _ADR ONEP
 293 1cd4 5D270000 	2:  _DONXT 1b 
 293      BC1C0000 
 294 1cdc C5280000 	    _ADR DROP
 295 1ce0 211A0000 	    _ADR CHIP_DSEL
 296 1ce4 8D1B0000 	    _ADR WAIT_DONE 
 297 1ce8 7B250000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
ARM GAS  forth.s 			page 76


 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1cec 8C1C0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1cfc 504700BF 	    _NEST 
 318              	    
 319 1d00 7B250000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1d04 F01C0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1d14 504700BF 	    _NEST 
 327              	
 328 1d18 7B250000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1d1c 081D0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1d24 504700BF 	    _NEST 
 336              	
 337 1d28 7B250000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1d2c 201D0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1d38 504700BF 	    _NEST 
 345              	
 346 1d3c 7B250000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
ARM GAS  forth.s 			page 77


 350              	    load program from flash 
 351              	******************************/
 352 1d40 301D0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1d4c 504700BF 	    _NEST 
 354              	
 355 1d50 7B250000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	
  32              	
  33              	/*****************************
  34              	   initialize FPU
  35              	****************************/
  36              	fpu_init: 
  37 1d54 DFF8A003 	   ldr.w r0,=CPACR 
  38 1d58 0168     	   ldr R1,[R0]
  39 1d5a 41F47001 	   orr r1,r1,#(0xf<<20)
  40 1d5e 0160     	   str r1,[r0]
  41 1d60 BFF34F8F 	   dsb 
  42 1d64 4FF00000 	   ldr r0,=FPCCR
  43 1d68 81EA0101 	   eor r1,r1 
  44 1d6c 0160     	   str r1,[r0]
  45 1d6e BFF34F8F 	   dsb 
  46 1d72 4FF05100 	   mov r0,#FPU_IRQ 
ARM GAS  forth.s 			page 78


  47 1d76 00B5FEF7 	   _CALL nvic_enable_irq
  47      C9FB5DF8 
  47      04EB
  48 1d80 7047     	   _RET
  49              	
  50              	/***************************
  51              	   FPSCR ( -- u )
  52              	   stack fpu SCR register 
  53              	***************************/
  54 1d82 441D0000 	   _HEADER FPSCR,5,"FPSCR"
  54      05465053 
  54      4352
  55 1d8c 47F8046D 	   _PUSH 
  56 1d90 F1EE106A 	   vmrs TOS,FPSCR
  57 1d94 BFF34F8F 	   dsb  
  58 1d98 ECE3     	   _NEXT 
  59              	
  60              	
  61              	/**************************
  62              	   CLR_FPSCR ( -- )
  63              	************************/
  64 1d9a 861D0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
  64      09434C52 
  64      5F465053 
  64      4352
  65 1da8 80EA0000 	   eor T0,T0 
  66 1dac E1EE100A 	   vmsr FPSCR,T0
  67 1db0 BFF34F8F 	   dsb 
  68 1db4 DEE3     	   _NEXT 
  69              	
  70              	
  71              	/*******************************
  72              	    >S0 variable ( f# --  )
  73              	    send float to fpu S0 
  74              	**********************************/
  75 1db6 9E1D0000 	    _HEADER TOS0,3,">S0"
  75      033E5330 
  75      00BF
  76 1dc0 00EE106A 	    vmov.f32 S0,TOS 
  77 1dc4 57F8046B 	    _POP 
  78 1dc8 D4E3     	    _NEXT  
  79              	
  80              	/*******************************
  81              	    >S1 variable ( f# --  )
  82              	    send float to fpu S1 
  83              	**********************************/
  84 1dca BA1D0000 	    _HEADER TOS1,3,">S1"
  84      033E5331 
  84      00BF
  85 1dd4 00EE906A 	    vmov.f32 S1,TOS 
  86 1dd8 57F8046B 	    _POP 
  87 1ddc CAE3     	    _NEXT  
  88              	
  89              	/*******************************
  90              	    >S2 variable ( f# --  )
  91              	    send float to fpu S2 
  92              	**********************************/
ARM GAS  forth.s 			page 79


  93 1dde CE1D0000 	    _HEADER TOS2,3,">S2"
  93      033E5332 
  93      00BF
  94 1de8 01EE106A 	    vmov.f32 S2,TOS 
  95 1dec 57F8046B 	    _POP 
  96 1df0 C0E3     	    _NEXT  
  97              	
  98              	/*******************************
  99              	    S0>  ( -- f )
 100              	    push fpu S0 
 101              	*******************************/
 102 1df2 E21D0000 	    _HEADER S0FROM,3,"S0>"
 102      0353303E 
 102      00BF
 103 1dfc 47F8046D 	    _PUSH 
 104 1e00 10EE106A 	    vmov.f32 TOS,S0 
 105 1e04 B6E3     	    _NEXT 
 106              	
 107              	/*******************************
 108              	    S1>  ( -- f )
 109              	    push fpu S1 
 110              	*******************************/
 111 1e06 F61D0000 	    _HEADER S1FROM,3,"S1>"
 111      0353313E 
 111      00BF
 112 1e10 47F8046D 	    _PUSH 
 113 1e14 10EE906A 	    vmov.f32 TOS,S1 
 114 1e18 ACE3     	    _NEXT 
 115              	
 116              	/*******************************
 117              	    S2>  ( -- f )
 118              	    push fpu S2 
 119              	*******************************/
 120 1e1a 0A1E0000 	    _HEADER S2FROM,3,"S2>"
 120      0353323E 
 120      00BF
 121 1e24 47F8046D 	    _PUSH 
 122 1e28 11EE106A 	    vmov.f32 TOS,S2 
 123 1e2c A2E3     	    _NEXT 
 124              	
 125              	
 126              	/*******************************
 127              	    F>S ( f -- n )
 128              	    convert float to integer 
 129              	    round to nearest integer 
 130              	*******************************/
 131 1e2e 1E1E0000 	    _HEADER FTOS,3,"F>S"
 131      03463E53 
 131      00BF
 132 1e38 00EE106A 	    vmov.f32 S0,TOS
 133 1e3c BDEE400A 	    vcvtr.s32.f32 s0,s0 
 134 1e40 10EE106A 	    vmov.f32 TOS,s0 
 135 1e44 96E3     	    _NEXT 
 136              	    
 137              	/*******************************
 138              	    TRUNC (f - n )
 139              	    truncate float to integer 
ARM GAS  forth.s 			page 80


 140              	*******************************/
 141 1e46 321E0000 	    _HEADER TRUNC,5,"TRUNC"
 141      05545255 
 141      4E43
 142 1e50 00EE106A 	    vmov.f32 S0,TOS 
 143 1e54 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 144 1e58 10EE106A 	    vmov.f32 TOS,S0 
 145 1e5c 8AE3     	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S>F ( s -- f )
 149              	    convert integer to float 
 150              	*******************************/
 151 1e5e 4A1E0000 	    _HEADER STOF,3,"S>F" 
 151      03533E46 
 151      00BF
 152 1e68 00EE106A 	    vmov.f32 S0,TOS
 153 1e6c B8EEC00A 	    vcvt.f32.s32 s0,s0 
 154 1e70 10EE106A 	    vmov.f32 TOS,s0 
 155 1e74 7EE3     	   _NEXT 
 156              	
 157              	/*******************************
 158              	    F+ ( f1 f2 -- f1+f2 )
 159              	    add 2 floats 
 160              	*******************************/
 161 1e76 621E0000 	    _HEADER FPLUS,2,"F+"
 161      02462B00 
 161      00BF
 162 1e80 00EE106A 	   vmov.f32 s0,TOS 
 163 1e84 57F8046B 	   _POP 
 164 1e88 00EE906A 	   vmov.f32 s1,TOS 
 165 1e8c 30EE200A 	   vadd.f32 s0,s0,s1 
 166 1e90 10EE106A 	   vmov.f32 TOS,s0
 167 1e94 6EE3     	   _NEXT 
 168              	
 169              	   
 170              	/*******************************
 171              	    F- ( f1 f2 -- f1-f2 )
 172              	    substract 2 float 
 173              	*******************************/
 174 1e96 7A1E0000 	    _HEADER FMINUS,2,"F-"
 174      02462D00 
 174      00BF
 175 1ea0 00EE106A 	   vmov.f32 s0,TOS 
 176 1ea4 57F8046B 	   _POP 
 177 1ea8 00EE906A 	   vmov.f32 s1,TOS 
 178 1eac 30EEC00A 	   vsub.f32 s0,s1,s0 
 179 1eb0 10EE106A 	   vmov.f32 TOS,s0
 180 1eb4 5EE3     	   _NEXT 
 181              	
 182              	
 183              	
 184              	/*******************************
 185              	    F* ( f1 f2 -- f1*f2 )
 186              	    multiply 2 float 
 187              	******************************/
 188 1eb6 9A1E0000 	   _HEADER FSTAR,2,"F*"
ARM GAS  forth.s 			page 81


 188      02462A00 
 188      00BF
 189 1ec0 00EE106A 	   vmov.f32 s0,TOS 
 190 1ec4 57F8046B 	   _POP 
 191 1ec8 00EE906A 	   vmov.f32 s1,TOS 
 192 1ecc 20EE800A 	   vmul.f32 s0,s1,s0 
 193 1ed0 10EE106A 	   vmov.f32 TOS,s0
 194 1ed4 4EE3     	   _NEXT 
 195              	
 196              	
 197              	/*******************************
 198              	    F/ ( f1 f2 -- f1/f2 )
 199              	    divide f1 by f2 
 200              	*******************************/
 201 1ed6 BA1E0000 	    _HEADER FSLH,2,"F/"
 201      02462F00 
 201      00BF
 202 1ee0 00EE106A 	   vmov.f32 s0,TOS 
 203 1ee4 57F8046B 	   _POP 
 204 1ee8 00EE906A 	   vmov.f32 s1,TOS 
 205 1eec 80EE800A 	   vdiv.f32 s0,s1,s0 
 206 1ef0 10EE106A 	   vmov.f32 TOS,s0
 207 1ef4 3EE3     	   _NEXT 
 208              	
 209              	
 210              	/********************************
 211              	    FNEGATE ( f -- -f )
 212              	    negate floating point 
 213              	********************************/
 214 1ef6 DA1E0000 	    _HEADER FNEG,7,"FNEGATE"
 214      07464E45 
 214      47415445 
 214      00BF
 215 1f04 00EE106A 	    vmov.f32 s0,TOS 
 216 1f08 B1EE400A 	    vneg.f32 S0,S0 
 217 1f0c 10EE106A 	    vmov.f32 TOS,S0    
 218 1f10 30E3     	    _NEXT 
 219              	
 220              	/**********************************
 221              	    FABS ( f -- f )
 222              	    return absolute value 
 223              	******************************/
 224 1f12 FA1E0000 	    _HEADER FABS,4,"FABS"
 224      04464142 
 224      5300
 225 1f1c 80EA0000 	    eor T0,T0 
 226 1f20 6FEA0000 	    mvn T0,T0 
 227 1f24 4FEA5000 	    lsr T0,#1 
 228 1f28 06EA0006 	    and TOS,T0 
 229 1f2c 22E3     	    _NEXT 
 230              	
 231              	
 232              	/*****************************
 233              	     SQRT  ( f -- f )
 234              	     compute square root 
 235              	*****************************/
 236 1f2e 161F0000 	     _HEADER SQRT,4,"SQRT"
ARM GAS  forth.s 			page 82


 236      04535152 
 236      5400
 237 1f38 00EE106A 	     vmov.f32 s0,TOS 
 238 1f3c B1EEC00A 	     vsqrt.f32 s0,s0 
 239 1f40 10EE106A 	     vmov.f32 TOS,s0 
 240 1f44 16E3     	     _NEXT 
 241              	
 242              	
 243              	/*****************************
 244              	   F0<   ( f -- flag )
 245              	*****************************/
 246 1f46 321F0000 	    _HEADER FZLESS,3,"F0<"
 246      0346303C 
 246      00BF
 247 1f50 00EE106A 	    vmov.f32 s0,TOS 
 248 1f54 B5EE400A 	    vcmp.f32 s0, #0.0 
 249 1f58 F1EE106A 	    vmrs TOS,FPSCR
 250 1f5c BFF34F8F 	    dsb  
 251 1f60 4FEAE676 	    asr TOS,#31   
 252 1f64 06E3     	    _NEXT 
 253              	
 254              	/*****************************
 255              	    F> ( f#1 f#2 -- flag )
 256              	    f#1>f#2 ? 
 257              	*****************************/
 258 1f66 4A1F0000 	    _HEADER FGREAT,2,"F>"
 258      02463E00 
 258      00BF
 259 1f70 504700BF 	    _NEST 
 260 1f74 A11E0000 	    _ADR FMINUS
 261 1f78 511F0000 	    _ADR FZLESS
 262 1f7c A52B0000 	    _ADR INVER     
 263 1f80 7B250000 	    _UNNEST 
 264              	
 265              	/*****************************
 266              	    F< ( f#1 f#2 -- flag )
 267              	    f#1<f#2 ? 
 268              	*****************************/
 269 1f84 6A1F0000 	    _HEADER FLESS,2,"F<"
 269      02463C00 
 270 1f8c 504700BF 	    _NEST 
 271 1f90 A11E0000 	    _ADR FMINUS 
 272 1f94 511F0000 	    _ADR FZLESS
 273 1f98 7B250000 	    _UNNEST 
 274              	
 275              	
 276              	/*******************************
 277              	    FMIN ( f#1 f#2 -- smallest )
 278              	********************************/
 279 1f9c 881F0000 	    _HEADER FMIN,4,"FMIN"
 279      04464D49 
 279      4E0000BF 
 280 1fa8 504700BF 	    _NEST 
 281 1fac F9280000 	   _ADR OVER 
 282 1fb0 F9280000 	   _ADR OVER 
 283 1fb4 711F0000 	   _ADR FGREAT 
 284 1fb8 7B270000 	   _QBRAN 1f 
ARM GAS  forth.s 			page 83


 284      C41F0000 
 285 1fc0 E5280000 	   _ADR SWAP  
 286 1fc4 C5280000 	1: _ADR DROP 
 287 1fc8 7B250000 	    _UNNEST 
 288              	
 289              	/*******************************
 290              	    FMAX (f#1 f#2 -- largest )
 291              	*******************************/
 292 1fcc A01F0000 	    _HEADER FMAX,4,"FMAX"
 292      04464D41 
 292      580000BF 
 293 1fd8 504700BF 	    _NEST 
 294 1fdc F9280000 	    _ADR OVER 
 295 1fe0 F9280000 	    _ADR OVER 
 296 1fe4 8D1F0000 	    _ADR FLESS 
 297 1fe8 7B270000 	    _QBRAN 1f
 297      F41F0000 
 298 1ff0 E5280000 	    _ADR SWAP   
 299 1ff4 C5280000 	1:  _ADR DROP 
 300 1ff8 7B250000 	    _UNNEST 
 301              	
 302              	
 303              	/*******************************
 304              	    FSIGN ( f -- n )
 305              	    return float sign 
 306              	*******************************/
 307 1ffc D01F0000 	    _HEADER FSIGN,5,"FSIGN"
 307      05465349 
 307      474E00BF 
 308 2008 80EA0000 	    eor T0,T0 
 309 200c C8F20000 	    movt T0,#0X8000
 310 2010 06EA0006 	    and TOS,T0
 311 2014 4FEAE676 	    asr TOS,#31  
 312 2018 ACE2     	    _NEXT 
 313              	
 314              	/*******************************
 315              	    FEXP ( f --  n )
 316              	    return binary exponent of f 
 317              	*******************************/
 318 201a 00200000 	    _HEADER FEXP,4,"FEXP"
 318      04464558 
 318      5000
 319 2024 4FF00000 	    _MOV32 T0,0X7F800000
 319      C7F68070 
 320 202c 06EA0006 	    and TOS,T0 
 321 2030 4FEAD656 	    lsr TOS,#23
 322 2034 A6F17F06 	    sub TOS,#127 
 323 2038 9CE2     	    _NEXT  
 324              	
 325              	/*******************************
 326              	   FMANT ( f -- n )
 327              	   return float mantisssa 
 328              	********************************/
 329 203a 1E200000 	    _HEADER FMANT,5,"FMANT"
 329      05464D41 
 329      4E54
 330 2044 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
ARM GAS  forth.s 			page 84


 330      C0F27F00 
 331 204c 06EA0006 	    AND TOS,T0 
 332 2050 80EA0000 	    EOR T0,T0 
 333 2054 C0F28000 	    MOVT T0,0x80
 334 2058 46EA0006 	    ORR TOS,T0 
 335 205c 8AE2     	    _NEXT 
 336              	
 337              	
 338              	/*******************************
 339              	    PI  ( -- f )
 340              	    return 3.14159265
 341              	*******************************/
 342 205e 3E200000 	    _HEADER PI,2,"PI"
 342      02504900 
 342      00BF
 343 2068 47F8046D 	    _PUSH 
 344 206c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 344      C4F24906 
 345 2074 7EE2     	    _NEXT
 346              	 
 347              	/********************************
 348              	    LOG2 ( -- f)
 349              	    return log10(2)
 350              	*******************************/
 351 2076 62200000 	    _HEADER LOG2,4,"LOG2"
 351      044C4F47 
 351      3200
 352 2080 47F8046D 	    _PUSH 
 353 2084 42F29A06 	    _MOV32 TOS,0x3E9A209A
 353      C3F69A66 
 354 208c 72E2     	    _NEXT 
 355              	
 356              	/********************************
 357              	    LOG2>10 ( f -- exp )
 358              	    convert float base2 exponent 
 359              	    to base10
 360              	********************************/
 361 208e 7A200000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 361      074C4F47 
 361      323E3130 
 361      00BF
 362 209c 504700BF 	    _NEST
 363 20a0 25200000 	    _ADR FEXP 
 364 20a4 691E0000 	    _ADR STOF 
 365 20a8 81200000 	    _ADR LOG2
 366 20ac C11E0000 	    _ADR FSTAR 
 367 20b0 511E0000 	    _ADR TRUNC  
 368 20b4 D5280000 	    _ADR DUPP 
 369 20b8 09290000 	    _ADR ZLESS 
 370 20bc 7B270000 	    _QBRAN 1f 
 370      C8200000 
 371 20c4 052A0000 	    _ADR ONEM
 372 20c8 7B250000 	1:  _UNNEST 
 373              	
 374              	/********************************
 375              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 376              	    parse number, integer or float 
ARM GAS  forth.s 			page 85


 377              	    if not a number return ( a 0 ) 
 378              	    if integer return ( int -1 ) 
 379              	    if float return ( float -2 )
 380              	**********************************/
 381 20cc 92200000 	    _HEADER NUMBER,6,"NUMBER"
 381      064E554D 
 381      42455200 
 382 20d8 504700BF 	    _NEST 
 383 20dc B9360000 	    _ADR INTQ
 384 20e0 A92A0000 	    _ADR QDUP 
 385 20e4 7B270000 	    _QBRAN 2f 
 385      F0200000 
 386 20ec 7B250000 	    _UNNEST 
 387 20f0 E5220000 	2:  _ADR FLOATQ
 388 20f4 7B250000 	    _UNNEST 
 388      88ED00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/****************************************************************************************
  21              	  float number parser 
  22              	
  23              	  adapted from  following C code 
  24              	  ref: https://github.com/ochafik/LibCL/blob/master/src/main/resources/LibCL/strtof.c
  25              	
  26              	****************************************************************************************/
  27              	
  28              	/******************************************************
  29              	    powers of 10 used in parsing float numbers 
  30              	*******************************************************/    
  31              	
  32 20fc 00002041 	powersof10:  .word  0x41200000  // 10.0 
  33 2100 0000C842 	             .word  0x42C80000  // 100.0
  34 2104 00401C46 	             .word  0x461C4000  // 10000.0 
  35 2108 20BCBE4C 	             .word  0x4CBEBC20  // 1.0e8
  36 210c CA1B0E5A 	             .word  0x5A0E1BCA  // 1.0e16 
  37 2110 AEC59D74 	             .word  0x749DC5AE  // 1.0e32 
  38              	
  39              	fzero =  0x0
  40              	fone =  0x3F800000
  41              	fminus1 = 0xBF800000
ARM GAS  forth.s 			page 86


  42              	ften = 0x41200000 
  43              	
  44              	
  45              	// fetch element from powersof10 array 
  46              	power10: // ( idx -- f )
  47 2114 504700BF 	    _NEST 
  48 2118 3B270000 	    _DOLIT 2 
  48      02000000 
  49 2120 89290000 	    _ADR LSHIFT 
  50 2124 3B270000 	    _DOLIT powersof10
  50      FC200000 
  51 212c 99290000 	    _ADR PLUS 
  52 2130 C1270000 	    _ADR AT 
  53 2134 7B250000 	    _UNNEST 
  54              	
  55              	
  56              	
  57              	
  58              	// check if exponent bit at idx position is 
  59              	// set or reset   
  60              	bit_state: // ( idx f e -- idx f bit )
  61 2138 504700BF 	    _NEST 
  62 213c 3B270000 	    _DOLIT 1  // idx f e 1
  62      01000000 
  63 2144 3B270000 	    _DOLIT 3  // idx f e 1 3 
  63      03000000 
  64 214c 25320000 	    _ADR PICK  // idx f e 1 idx 
  65 2150 89290000 	    _ADR LSHIFT // idx f e bit_mask 
  66 2154 19290000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  67 2158 7B250000 	    _UNNEST 
  68              	
  69              	// exponent adjustment 
  70              	// multiply or divide mantissa by exponent  
  71              	// if exponant < 0 divide 
  72              	// if exponant >0 multiply 
  73              	// 8f exponant == 0 done 
  74              	mult_div_exp: // ( e f  -- f )
  75 215c 504700BF 	    _NEST 
  76 2160 F9280000 	    _ADR OVER  // e f e 
  77 2164 7B270000 	    _QBRAN 4f // exp==0,  done 
  77      28220000 
  78 216c 3B270000 	    _DOLIT 0  // e f idx  
  78      00000000 
  79 2174 D12A0000 	    _ADR NROT // idx e f
  80 2178 E5280000 	    _ADR SWAP // idx f e   
  81 217c D5280000 	    _ADR DUPP  // idx f e e 
  82 2180 09290000 	    _ADR ZLESS
  83 2184 7B270000 	    _QBRAN pos_exp 
  83      DC210000 
  84              	// negative exponent 
  85 218c C92B0000 	    _ADR ABSS 
  86 2190 51280000 	    _ADR TOR //  -- idx f R: e 
  87              	div_loop:
  88 2194 3D280000 	    _ADR RAT   // idx f e R: e 
  89 2198 39210000 	    _ADR bit_state // idx f state 
  90 219c 7B270000 	    _QBRAN 1f   // bit reset 
  90      B0210000 
ARM GAS  forth.s 			page 87


  91 21a4 F9280000 	    _ADR OVER 
  92 21a8 15210000 	    _ADR power10 // idx f pwr10 R: e
  93 21ac E11E0000 	    _ADR FSLH  // idx f R: e 
  94 21b0 E5280000 	1:  _ADR SWAP  // f idx R: e 
  95 21b4 F5290000 	    _ADR ONEP   // F idx++ R: e 
  96 21b8 E5280000 	    _ADR SWAP   // idx f  
  97 21bc F9280000 	    _ADR OVER   // idx f idx 
  98 21c0 3B270000 	    _DOLIT 5 
  98      05000000 
  99 21c8 A12C0000 	    _ADR GREAT  // idx > 5
 100 21cc 7B270000 	    _QBRAN div_loop 
 100      94210000 
 101 21d4 8F270000 	    _BRAN 3f 
 101      20220000 
 102              	pos_exp: // positive exponent 
 103 21dc 51280000 	    _ADR TOR // idx f  R: e 
 104              	mult_loop:
 105 21e0 3D280000 	    _ADR RAT   // idx f e R: e 
 106 21e4 39210000 	    _ADR bit_state // idx f state 
 107 21e8 7B270000 	    _QBRAN 1f   // bit reset 
 107      FC210000 
 108 21f0 F9280000 	    _ADR OVER  
 109 21f4 15210000 	    _ADR power10 // idx f pwr10 R: e
 110 21f8 C11E0000 	    _ADR FSTAR  // idx f R: e 
 111 21fc E5280000 	1:  _ADR SWAP  // f idx R: e 
 112 2200 F5290000 	    _ADR ONEP   // F idx++ R: e 
 113 2204 E5280000 	    _ADR SWAP   // idx f  
 114 2208 F9280000 	    _ADR OVER   // idx f idx 
 115 220c 3B270000 	    _DOLIT 5 
 115      05000000 
 116 2214 A12C0000 	    _ADR GREAT  // idx > 5
 117 2218 7B270000 	    _QBRAN mult_loop 
 117      E0210000 
 118              	// adjustment done 
 119 2220 0D280000 	3:  _ADR RFROM 
 120 2224 C5280000 	    _ADR DROP 
 121 2228 E5280000 	4:  _ADR SWAP 
 122 222c C5280000 	    _ADR DROP 
 123 2230 7B250000 	    _UNNEST 
 124              	
 125              	// divide fraction by 
 126              	// 10^d 
 127              	div_fract: // ( d f -- f )
 128 2234 504700BF 	    _NEST 
 129 2238 E5280000 	    _ADR SWAP  // -- f d 
 130 223c 51280000 	    _ADR TOR  // -- f R: d 
 131 2240 3B270000 	    _DOLIT fone  // -- f 1.0 R: d 
 131      0000803F 
 132 2248 8F270000 	    _BRAN 2f 
 132      5C220000 
 133              	1: // create 10^d 
 134 2250 3B270000 	    _DOLIT ften 
 134      00002041 
 135 2258 C11E0000 	    _ADR FSTAR 
 136 225c 5D270000 	2:  _DONXT 1b  
 136      50220000 
 137 2264 E11E0000 	    _ADR FSLH
ARM GAS  forth.s 			page 88


 138 2268 7B250000 	    _UNNEST 
 139              	
 140              	/*****************************
 141              	   decimals ( a -- a+ fdec | a 0.0 )
 142              	   parse digits after '.' 
 143              	   convert to float 
 144              	*****************************/
 145              	decimals:
 146 226c 504700BF 	    _NEST 
 147 2270 3B270000 	    _DOLIT 0
 147      00000000 
 148 2278 D5280000 	    _ADR DUPP
 149 227c BD2A0000 	    _ADR ROT
 150 2280 F5350000 	    _ADR PARSE_DIGITS // d n a+ 
 151 2284 D12A0000 	    _ADR NROT  // a d n 
 152 2288 691E0000 	    _ADR STOF  // convert integer n to float 
 153 228c 35220000 	    _ADR div_fract // a 0 a n/10^d 
 154 2290 7B250000 	    _UNNEST 
 155              	
 156              	
 157              	/************************************
 158              	   exponent ( a -- exp a+ )
 159              	   parse float exponent 
 160              	************************************/
 161              	exponent: 
 162 2294 504700BF 	    _NEST 
 163 2298 6F360000 	    _ADR NEGQ 
 164 229c 51280000 	    _ADR TOR 
 165 22a0 3B270000 	    _DOLIT 0 
 165      00000000 
 166 22a8 D5280000 	    _ADR DUPP 
 167 22ac BD2A0000 	    _ADR ROT 
 168 22b0 F5350000 	    _ADR PARSE_DIGITS // d n a  
 169 22b4 D12A0000 	    _ADR NROT 
 170 22b8 E5280000 	    _ADR SWAP 
 171 22bc C5280000 	    _ADR DROP 
 172 22c0 0D280000 	    _ADR RFROM 
 173 22c4 7B270000 	    _QBRAN 1f 
 173      D0220000 
 174 22cc B92B0000 	    _ADR NEGAT 
 175 22d0 E5280000 	1:  _ADR SWAP 
 176 22d4 7B250000 	    _UNNEST  // -- exp a+  
 177              	
 178              	
 179              	/**********************************
 180              	    FLOAT? ( a -- f# -2 | a 0 )
 181              	    parse float number 
 182              	    return a 0 if not float 
 183              	**********************************/
 184 22d8 D0200000 	    _HEADER FLOATQ,6,"FLOAT?"
 184      06464C4F 
 184      41543F00 
 185 22e4 504700BF 	    _NEST
 186              	    // always use base 10 
 187              	    // hexadecimal float not accepted 
 188 22e8 D12D0000 	    _ADR BASE 
 189 22ec C1270000 	    _ADR AT 
ARM GAS  forth.s 			page 89


 190 22f0 51280000 	    _ADR TOR 
 191              	    // use decimal base  
 192 22f4 75350000 	    _ADR DECIM 
 193 22f8 3B270000 		_DOLIT	0      // failed flag   
 193      00000000 
 194 2300 F9280000 		_ADR	OVER   // a 0 a     R: base
 195 2304 292D0000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 196 2308 C5280000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 197              	// check for '-'|'+' save sign on R: 
 198 230c 6F360000 	    _ADR NEGQ 
 199 2310 51280000 	    _ADR   TOR // -- ... a  R: base sign 
 200              	// if next char is digit parse integer part 
 201 2314 D5280000 	    _ADR DUPP 
 202 2318 E1270000 	    _ADR CAT 
 203 231c 3B270000 	    _DOLIT 10 
 203      0A000000 
 204 2324 99350000 	    _ADR DIGTQ // u t|f 
 205 2328 E5280000 	    _ADR SWAP 
 206 232c C5280000 	    _ADR DROP  // drop u 
 207 2330 7B270000 	    _QBRAN must_be_dot 
 207      84230000 
 208              	// get integer part     
 209 2338 3B270000 	    _DOLIT 0 
 209      00000000 
 210 2340 D5280000 	    _ADR DUPP
 211 2344 BD2A0000 	    _ADR ROT // a 0 0 0 a  
 212 2348 F5350000 	    _ADR PARSE_DIGITS // a 0 d n a 
 213 234c D12A0000 	    _ADR NROT // ... a d n 
 214 2350 691E0000 	    _ADR STOF  // convert n to float 
 215 2354 51280000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 216 2358 C5280000 	    _ADR DROP // d not needed
 217              	// if next char is 'E' get exponent 
 218 235c 3B270000 	    _DOLIT 'E' 
 218      45000000 
 219 2364 55360000 	    _ADR CHARQ 
 220 2368 7B270000 	    _QBRAN 1f // next is decimal fraction  
 220      90230000 
 221 2370 3B270000 	    _DOLIT fzero // no fraction 
 221      00000000 
 222 2378 51280000 	    _ADR TOR  // R: base sign fint 0.0
 223 237c 8F270000 	    _BRAN 3f // get exponent   
 223      EC230000 
 224              	// no integer part, next character must be '.' 
 225              	must_be_dot: 
 226 2384 3B270000 	    _DOLIT fzero // integer part 0.0 
 226      00000000 
 227 238c 51280000 	    _ADR TOR  // R: base sign fint 
 228 2390 3B270000 	1:  _DOLIT '.' 
 228      2E000000 
 229 2398 55360000 	    _ADR CHARQ 
 230 239c 7B270000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 230      5C240000 
 231 23a4 6D220000 	    _ADR decimals // -- a 0 a fdec 
 232 23a8 51280000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 233              	// if next char == 'E' there is an exponent 
 234              	// else no exponent, float completed 
 235 23ac 3B270000 	    _DOLIT 'E' 
ARM GAS  forth.s 			page 90


 235      45000000 
 236 23b4 55360000 	    _ADR CHARQ 
 237 23b8 7B270000 	    _QBRAN 1f
 237      C8230000 
 238 23c0 8F270000 	    _BRAN 3f 
 238      EC230000 
 239              	// no exponent, must be end of string 
 240 23c8 E1270000 	1:   _ADR CAT 
 241 23cc 7B270000 	    _QBRAN 1f 
 241      DC230000 
 242 23d4 8F270000 	    _BRAN error2 // error not end of string 
 242      70240000 
 243 23dc 51280000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 244 23e0 C5280000 	    _ADR DROP 
 245 23e4 8F270000 	    _BRAN build_float 
 245      24240000 
 246              	3: // get exponent 
 247 23ec 95220000 	    _ADR exponent // a 0 exp a+ 
 248              	// must be end of string 
 249 23f0 E1270000 	    _ADR CAT 
 250 23f4 7B270000 	    _QBRAN 4f
 250      04240000 
 251 23fc 8F270000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 251      70240000 
 252 2404 51280000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 253 2408 E52A0000 	    _ADR DDROP 
 254 240c 8F270000 	    _BRAN build_float     
 254      24240000 
 255              	5: // no exponent 
 256 2414 3B270000 	    _DOLIT 0 
 256      00000000 
 257 241c 51280000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 258 2420 C5280000 	    _ADR DROP 
 259              	build_float: // a 0 R: base sign fint fdec exp 
 260 2424 0D280000 	    _ADR RFROM 
 261 2428 21280000 	    _ADR DRFROM 
 262 242c 811E0000 	    _ADR FPLUS 
 263 2430 5D210000 	    _ADR mult_div_exp
 264 2434 0D280000 	    _ADR RFROM 
 265 2438 7B270000 	    _QBRAN 1f 
 265      4C240000 
 266 2440 3B270000 	    _DOLIT fminus1
 266      000080BF 
 267 2448 C11E0000 	    _ADR FSTAR 
 268 244c 3B270000 	1:  _DOLIT -2 
 268      FEFFFFFF 
 269 2454 8F270000 	    _BRAN restore_base  
 269      80240000 
 270              	error1: // a 0 a R: base sign fint 
 271 245c 21280000 	    _ADR DRFROM 
 272 2460 E52A0000 	    _ADR DDROP
 273 2464 C5280000 	    _ADR DROP  
 274 2468 8F270000 	    _BRAN restore_base  
 274      80240000 
 275              	error2: // a 0 a R: base sign fint fdec  
 276 2470 21280000 	    _ADR DRFROM 
 277 2474 E52A0000 	    _ADR DDROP  // a 0 a R: base sign
ARM GAS  forth.s 			page 91


 278 2478 0D280000 	    _ADR RFROM  // a 0 a sign R: base  
 279 247c E52A0000 	    _ADR DDROP  
 280              	restore_base: 
 281 2480 0D280000 	    _ADR RFROM 
 282 2484 D12D0000 	    _ADR BASE 
 283 2488 AD270000 	    _ADR STORE 
 284 248c 7B250000 	    _UNNEST 
 285              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	// used as multiply factor 
  27              	pwr10m9: 
  28 2490 77CC2B32 	    .word 0x322BCC77  // 10e-9
  29 2494 95BFD633 	    .word 0x33D6BF95  // 10e-8
  30 2498 BD378635 	    .word 0x358637BD  // 10e-7
  31 249c ACC52737 	    .word 0x3727C5AC  // 10eâ»6
  32 24a0 17B7D138 	    .word 0x38D1B717  // 10e-5
  33 24a4 6F12833A 	    .word 0x3A83126F  // 10e-4
  34 24a8 0AD7233C 	    .word 0x3C23D70A  // 10e-3
  35 24ac CDCCCC3D 	    .word 0x3DCCCCCD  // 10e-2
  36 24b0 0000803F 	    .word 0x3F800000  // 10e-1
  37              	pwr10e0:    
  38 24b4 00002041 	    .word 0x41200000  // 10e0 
  39 24b8 0000C842 	    .word 0x42C80000  // 10e1 
  40 24bc 00007A44 	    .word 0x447A0000  // 10e2
  41 24c0 00401C46 	    .word 0x461C4000  // 10e3 
  42 24c4 0050C347 	    .word 0x47C35000  // 10e4 
  43 24c8 00247449 	    .word 0x49742400  // 10e5 
  44 24cc 8096184B 	    .word 0x4B189680  // 10e6 
  45 24d0 20BCBE4C 	    .word 0x4CBEBC20  // 10e7 
  46 24d4 286B6E4E 	    .word 0x4E6E6B28  // 10e8 
  47 24d8 F9021550 	    .word 0x501502F9  // 10e8 
  48              	
  49              	
ARM GAS  forth.s 			page 92


  50              	// used to round mantissa 
  51              	rounding:
  52 24dc FFEBAF2C 	    .word  0x2CAFEBFF // 0.5e-11f,   < 0.00001 
  53 24e0 FFE65B2E 	    .word  0x2E5BE6FF // 0.5e-10f,   0.00001 - 0.0001 
  54 24e4 5F700930 	 	.word  0x3009705F // 0.5e-9f,   0.0001 - 0.001
  55 24e8 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f,   0.001 - 0.01
  56 24ec 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f,   0.01 - 0.1
  57 24f0 BD370635 	    .word  0x350637BD // 0.5e-6f,   0.1 - 1     
  58 24f4 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f,   1 - 10    : 0.000005
  59 24f8 17B75138 	    .word  0x3851B717 // 0.5e-4f,   10 - 100 
  60 24fc 6F12033A 	 	.word  0x3A03126F // 0.5e-3f,   100 - 1000 
  61 2500 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f,   1000 - 10000 
  62 2504 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f,   10000 - 100000 
  63 2508 0000003F 	 	.word  0x3F000000 // 0.5e0f,    100000 - 1000000 
  64              	
  65              	
  66              	/***********************************
  67              	    E. ( f w -- )
  68              	    print in scientific notation 
  69              	    f -> float to print 
  70              	    w -> maximum string width
  71              	***********************************/
  72 250c DC220000 	    _HEADER EDOT,2,"E."
  72      02452E00 
  73 2514 504700BF 	    _NEST
  74              	
  75 2518 7B250000 	    _UNNEST 
  76              	
  77              	
  78              	/***********************************
  79              	    F. ( f w -- )
  80              	    print in fixed point format 
  81              	    f -> float to print 
  82              	    w -> maximum string width 
  83              	***********************************/
  84 251c 10250000 	    _HEADER FDOT,2,"F."
  84      02462E00 
  85 2524 504700BF 	    _NEST 
  86 2528 3B270000 	    _DOLIT 40 // width <= 40
  86      28000000 
  87 2530 CD2C0000 	    _ADR MIN 
  88 2534 E5280000 	    _ADR SWAP
  89 2538 D5280000 	    _ADR DUPP 
  90 253c 25200000 	    _ADR FEXP 
  91 2540 3B270000 	    _DOLIT 31 
  91      1F000000 
  92              	    
  93 2548 7B250000 	    _UNNEST 
  94              	
  95              	
  96              	// convert integer to string 
  97              	// in buffer b 
  98              	// return pstr 
  99              	itoa: // ( s b -- pstr )
 100 254c 504700BF 	    _NEST 
 101 2550 4D2E0000 	    _ADR HLD 
 102 2554 AD270000 	    _ADR STORE 
ARM GAS  forth.s 			page 93


 103 2558 3B270000 	    _DOLIT 0  // convert to double 
 103      00000000 
 104 2560 81340000 	    _ADR DIGS 
 105 2564 01000000 	    _ADR 
****  Warning: missing operand; zero assumed
 106 2568 7B250000 	    _UNNEST 
 107              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
ARM GAS  forth.s 			page 94


  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 256c 48F804CD 		STMFD	RSP!,{IP}
  85 2570 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2574 5CF8045B 		LDR WP,[IP],#4 
  89 2578 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 257a 58F804CB 		LDMFD RSP!,{IP}
  92 257e 5CF8045B 		LDR WP,[IP],#4 
  93 2582 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2584 04F14401 		add T1,UP,#USER_CTOP 
 105 2588 0968     		ldr T1,[T1]
 106 258a 44F25072 		mov T2,#0x4700+(10<<3)
 107 258e 21F8022B 		strh T2,[T1],#2
ARM GAS  forth.s 			page 95


 108 2592 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2596 21F8022B 		strh T2,[T1],#2 
 110 259a 04F14402 		add T2,UP,#USER_CTOP 
 111 259e 1160     		str T1,[T2]
 112 25a0 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 25a2 47F8046D 		_PUSH 
 118 25a6 04F11406 		ADD TOS,UP,#STDIN 
 119 25aa E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 25ac 47F8046D 		_PUSH 
 125 25b0 04F11806 		ADD TOS,UP,#STDOUT
 126 25b4 DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 25b6 20250000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 25c4 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 25cc 47F8046D 	    _PUSH 
 135 25d0 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 25d2 81EA0101 	    eor T1,T1 
 137 25d6 8162     	    str T1,[T0,#SCB_CFSR]
 138 25d8 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 25da BA250000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 25e8 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 25f0 47F8046D 		_PUSH 
 147 25f4 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 25f6 81EA0101 	    eor T1,T1 
 149 25fa 8163     	    str T1,[T0,#SCB_BFAR]
 150 25fc BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 25fe DE250000 		_HEADER QKEY,4,"KEY?" 
ARM GAS  forth.s 			page 96


 156      044B4559 
 156      3F00
 157 2608 504700BF 		_NEST 
 158 260c A3250000 		_ADR TSTDIN // ' STDIN 
 159 2610 9D320000 		_ADR ATEXE
 160 2614 7B250000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2618 02260000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2620 504700BF 		_NEST
 168              	KEY1:
 169 2624 D1180000 		_ADR CAPS_LED 
 170 2628 09260000 		_ADR	QKEY 
 171 262c 7B270000 		_QBRAN	KEY1
 171      24260000 
 172 2634 7B250000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2638 1C260000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 2644 504700BF 		_NEST 
 180 2648 AD250000 		_ADR TSTDOUT 
 181 264c 9D320000 		_ADR ATEXE 
 182 2650 7B250000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
ARM GAS  forth.s 			page 97


 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 2654 3C260000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2660 504700BF 		_NEST
 216 2664 C92B0000 		_ADR ABSS   
 217 2668 712D0000 		_ADR SEED 
 218 266c C1270000 		_ADR AT 
 219 2670 D5280000 		_ADR DUPP 
 220 2674 3B270000 		_DOLIT 13
 220      0D000000 
 221 267c 89290000 		_ADR LSHIFT 
 222 2680 41290000 		_ADR XORR  
 223 2684 D5280000 		_ADR DUPP 
 224 2688 3B270000 		_DOLIT 17 
 224      11000000 
 225 2690 71290000 		_ADR RSHIFT 
 226 2694 41290000 		_ADR XORR 
 227 2698 D5280000 		_ADR DUPP
 228 269c 3B270000 		_DOLIT 5 
 228      05000000 
 229 26a4 89290000 		_ADR LSHIFT 
 230 26a8 41290000 		_ADR XORR  
 231 26ac D5280000 		_ADR DUPP 
 232 26b0 712D0000 		_ADR SEED 
 233 26b4 AD270000 		_ADR STORE 
 234 26b8 3B270000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 26c0 19290000 		_ADR ANDD 
 236 26c4 E5280000 		_ADR SWAP 
 237 26c8 21310000 		_ADR MODD 
 238 26cc 7B250000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 26d0 58260000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 26dc 504700BF 		_NEST 
 247 26e0 A12D0000 		_ADR TIMER 
 248 26e4 AD270000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 26e8 A12D0000 		_ADR TIMER 
 251 26ec C1270000 		_ADR AT 
 252 26f0 7B270000 		_QBRAN PAUSE_EXIT 
 252      00270000 
 253 26f8 8F270000 		_BRAN PAUSE_LOOP 
 253      E8260000 
 254              	PAUSE_EXIT: 		
ARM GAS  forth.s 			page 98


 255 2700 7B250000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2704 D4260000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2710 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2714 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 271c 3600     		movs TOS,TOS 
 265 271e 57F8046B 		_POP
 266 2722 03D0     		beq ULED_OFF
 267 2724 4FEA0040 		lsl T0,#16 
 268 2728 8861     		str T0,[T1,#GPIO_BSRR]
 269 272a 23E7     		_NEXT 
 270              	ULED_OFF:
 271 272c 8861     		str T0,[T1,#GPIO_BSRR]
 272 272e 21E7     		_NEXT    
 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 2730 08270000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 2738 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 273a 47F8046D 		_PUSH				//  store TOS on data stack
 294 273e 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 2742 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 2744 34270000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 2750 46F00105 		ORR	WP,TOS,#1 
 303 2754 57F8046B 		_POP
 304 2758 2847     		BX WP 
 305 275a 0BE7     		_NEXT 
ARM GAS  forth.s 			page 99


 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 275c D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 2760 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 2762 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 2766 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 276a 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 276c A2F10102 		SUB	T2,T2,#1
 324 2770 C8F80020 		STR	T2,[RSP]
 325 2774 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 2778 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 277a 3600     		MOVS	TOS,TOS
 335 277c 57F8046B 		_POP
 336 2780 02D1     		BNE	QBRAN1
 337 2782 DCF800C0 		LDR	IP,[IP]
 338 2786 F5E6     		_NEXT
 339              	QBRAN1:
 340 2788 0CF1040C 	 	ADD	IP,IP,#4
 341 278c F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 278e DCF800C0 		LDR	IP,[IP]
 350 2792 EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 2794 48270000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 27a0 7B250000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
ARM GAS  forth.s 			page 100


 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 27a4 98270000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 27ac 57F8045B 		LDR	WP,[DSP],#4
 365 27b0 3560     		STR	WP,[TOS]
 366 27b2 57F8046B 		_POP
 367 27b6 DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 27b8 A8270000 		_HEADER AT,1,"@"
 373      014000BF 
 374 27c0 3668     		LDR	TOS,[TOS]
 375 27c2 D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 27c4 BC270000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 27cc 57F8045B 		LDR	WP,[DSP],#4
 383 27d0 3570     		STRB WP,[TOS]
 384 27d2 57F8046B 		_POP
 385 27d6 CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 27d8 C8270000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 27e0 3678     		LDRB	TOS,[TOS]
 393 27e2 C7E6     		_NEXT 
 394              	
 395              	/*********************************************
 396              		array@ ( a i -- w )
 397              		fetch array element 
 398              		a -> pointer to array 
 399              		i -> index 
 400              	*********************************************/
 401 27e4 DC270000 		_HEADER ARRAYAT,6,"ARRAY@"
 401      06415252 
 401      41594000 
 402 27f0 4FF00200 		mov T0,#2 
 403 27f4 06FA00F0 		lsl T0,TOS,T0 
 404 27f8 57F8046B 		_POP 
 405 27fc 0644     		add TOS,T0 
 406 27fe 3668     		ldr TOS,[TOS]
 407 2800 B8E6     		_NEXT 
 408              	
 409              	/*********************************************
 410              	    R>	  ( -- w  R: w -- ) 
 411              	 	push from rstack.
ARM GAS  forth.s 			page 101


 412              	**********************************************/
 413 2802 E8270000 		_HEADER RFROM,2,"R>"
 413      02523E00 
 413      00BF
 414 280c 47F8046D 		_PUSH
 415 2810 58F8046B 		LDR	TOS,[RSP],#4
 416 2814 AEE6     		_NEXT 
 417              	
 418              	/***********************************************
 419              		2R> (  -- D ) R: D --  
 420              	    push a double from rstack 
 421              	***********************************************/
 422 2816 06280000 		_HEADER DRFROM,3,"2R>"
 422      0332523E 
 422      00BF
 423 2820 47F8046D 		_PUSH 
 424 2824 58F8046B 		LDR TOS,[RSP],#4 
 425 2828 47F8046D 		_PUSH 
 426 282c 58F8046B 		LDR TOS,[RSP],#4
 427 2830 A0E6     		_NEXT 
 428              	
 429              	/************************************************
 430              	    R@	  ( -- w )
 431              	 	Copy top of return stack to the data stack.
 432              	************************************************/
 433 2832 1A280000 		_HEADER RAT,2,"R@"
 433      02524000 
 433      00BF
 434 283c 47F8046D 		_PUSH
 435 2840 D8F80060 		LDR	TOS,[RSP]
 436 2844 96E6     		_NEXT 
 437              	
 438              	/***********************************************
 439              	    >R	  ( w -- ) R: -- w 
 440              	 	pop to rstack.
 441              	************************************************/
 442 2846 36280000 		_HEADER TOR,2,">R"
 442      023E5200 
 442      00BF
 443 2850 48F8046D 		STR	TOS,[RSP,#-4]!
 444 2854 57F8046B 		_POP
 445 2858 8CE6     		_NEXT
 446              	
 447              	/*********************************************
 448              		2>R ( d -- ) R: -- d 
 449              		pop a double to rstack 
 450              	*********************************************/
 451 285a 4A280000 		_HEADER DTOR,3,"2>R"
 451      03323E52 
 451      00BF
 452 2864 48F8046D 		STR TOS,[RSP,#-4]!
 453 2868 57F8046B 	    _POP 
 454 286c 48F8046D 		STR TOS,[RSP,#-4]!
 455 2870 57F8046B 		_POP  
 456 2874 7EE6     		_NEXT 	
 457              	
 458              	
ARM GAS  forth.s 			page 102


 459              	/*******************************
 460              	//	RP! ( u -- )
 461              	// initialize RPP with u 
 462              	*******************************/
 463 2876 5E280000 		_HEADER RPSTOR,3,"RP!"
 463      03525021 
 463      00BF
 464 2880 B046     		MOV RSP,TOS 
 465 2882 57F8046B 		_POP  
 466 2886 75E6     		_NEXT 
 467              	
 468              	/********************************
 469              		SP! ( u -- )
 470              	 initialize SPP with u 
 471              	********************************/
 472 2888 7A280000 		_HEADER SPSTOR,3,"SP!"
 472      03535021 
 473 2890 3746     		MOV DSP,TOS 
 474 2892 86EA0606 		EOR TOS,TOS,TOS 
 475 2896 6DE6     		_NEXT 
 476              	
 477              	/**************************************
 478              	    SP@	 ( -- a )
 479              	 	Push the current data stack pointer.
 480              	***************************************/
 481 2898 8C280000 		_HEADER SPAT,3,"SP@"
 481      03535040 
 482 28a0 47F8046D 		_PUSH
 483 28a4 3E46     		MOV	TOS,DSP
 484 28a6 65E6     		_NEXT
 485              	
 486              	/**************************************
 487              	   RP@ ( -- a )
 488              	   push current rstack pointer 
 489              	**************************************/
 490 28a8 9C280000 		_HEADER RPAT,3,"RP@"
 490      03525040 
 491 28b0 47F8046D 		_PUSH 
 492 28b4 4646     		MOV TOS,RSP 
 493 28b6 5DE6     		_NEXT 
 494              	
 495              	/********************************
 496              	    DROP	( w -- )
 497              	 	Discard top stack item.
 498              	********************************/
 499 28b8 AC280000 		_HEADER DROP,4,"DROP"
 499      0444524F 
 499      500000BF 
 500 28c4 57F8046B 		_POP
 501 28c8 54E6     		_NEXT 
 502              	
 503              	/*********************************
 504              	    DUP	 ( w -- w w )
 505              	 	Duplicate the top stack item.
 506              	*********************************/
 507 28ca BC280000 		_HEADER DUPP,3,"DUP"
 507      03445550 
ARM GAS  forth.s 			page 103


 507      00BF
 508 28d4 47F8046D 		_PUSH
 509 28d8 4CE6     		_NEXT 
 510              	
 511              	/**********************************
 512              	    SWAP	( w1 w2 -- w2 w1 )
 513              	 	Exchange top two stack items.
 514              	**********************************/
 515 28da CE280000 		_HEADER SWAP,4,"SWAP"
 515      04535741 
 515      5000
 516 28e4 3D68     		LDR	WP,[DSP]
 517 28e6 3E60     		STR	TOS,[DSP]
 518 28e8 2E46     		MOV	TOS,WP
 519 28ea 43E6     		_NEXT 
 520              	
 521              	/***********************************
 522              	    OVER	( w1 w2 -- w1 w2 w1 )
 523              	 	Copy second stack item to top.
 524              	***********************************/
 525 28ec DE280000 		_HEADER OVER,4,"OVER"
 525      044F5645 
 525      520000BF 
 526 28f8 47F8046D 		_PUSH
 527 28fc 7E68     		LDR	TOS,[DSP,#4]
 528 28fe 39E6     		_NEXT 
 529              	
 530              	/***********************************
 531              	    0<	  ( n -- t )
 532              	 	Return true if n is negative.
 533              	***********************************/
 534 2900 F0280000 		_HEADER ZLESS,2,"0<"
 534      02303C00 
 535 2908 4FEAE676 		ASR TOS,#31
 536 290c 32E6     		_NEXT 
 537              	
 538              	/********************************
 539              	    AND	 ( w w -- w )
 540              	 	Bitwise AND.
 541              	********************************/
 542 290e 04290000 		_HEADER ANDD,3,"AND"
 542      03414E44 
 542      00BF
 543 2918 57F8045B 		LDR	WP,[DSP],#4
 544 291c 06EA0506 		AND	TOS,TOS,WP
 545 2920 28E6     		_NEXT 
 546              	
 547              	/******************************
 548              	    OR	  ( w w -- w )
 549              	 	Bitwise inclusive OR.
 550              	******************************/
 551 2922 12290000 		_HEADER ORR,2,"OR"
 551      024F5200 
 551      00BF
 552 292c 57F8045B 		LDR	WP,[DSP],#4
 553 2930 46EA0506 		ORR	TOS,TOS,WP
 554 2934 1EE6     		_NEXT 
ARM GAS  forth.s 			page 104


 555              	
 556              	/*****************************
 557              	    XOR	 ( w w -- w )
 558              	 	Bitwise exclusive OR.
 559              	*****************************/
 560 2936 26290000 		_HEADER XORR,3,"XOR"
 560      03584F52 
 560      00BF
 561 2940 57F8045B 		LDR	WP,[DSP],#4
 562 2944 86EA0506 		EOR	TOS,TOS,WP
 563 2948 14E6     		_NEXT 
 564              	
 565              	/**************************************************
 566              	    UM+	 ( w w -- w cy )
 567              	 	Add two numbers, return the sum and carry flag.
 568              	***************************************************/
 569 294a 3A290000 		_HEADER UPLUS,3,"UM+"
 569      03554D2B 
 569      00BF
 570 2954 3D68     		LDR	WP,[DSP]
 571 2956 AD19     		ADDS	WP,WP,TOS
 572 2958 4FF00006 		MOV	TOS,#0
 573 295c 46F10006 		ADC	TOS,TOS,#0
 574 2960 3D60     		STR	WP,[DSP]
 575 2962 07E6     		_NEXT 
 576              	
 577              	/*********************************
 578              	    RSHIFT	 ( w # -- w )
 579              	 	arithmetic Right shift # bits.
 580              	**********************************/
 581 2964 4E290000 		_HEADER RSHIFT,6,"RSHIFT"
 581      06525348 
 581      49465400 
 582 2970 57F8045B 		LDR	WP,[DSP],#4
 583 2974 45FA06F6 		MOV	TOS,WP,ASR TOS
 584 2978 FCE5     		_NEXT 
 585              	
 586              	/****************************
 587              	    LSHIFT	 ( w # -- w )
 588              	 	Right shift # bits.
 589              	****************************/
 590 297a 68290000 		_HEADER LSHIFT,6,"LSHIFT"
 590      064C5348 
 590      49465400 
 590      00BF
 591 2988 57F8045B 		LDR	WP,[DSP],#4
 592 298c 05FA06F6 		MOV	TOS,WP,LSL TOS
 593 2990 F0E5     		_NEXT
 594              	
 595              	/*************************
 596              	    +	 ( w w -- w )
 597              	 	Add.
 598              	*************************/
 599 2992 7E290000 		_HEADER PLUS,1,"+"
 599      012B
 600 2998 57F8045B 		LDR	WP,[DSP],#4
 601 299c 2E44     		ADD	TOS,TOS,WP
ARM GAS  forth.s 			page 105


 602 299e E9E5     		_NEXT 
 603              	
 604              	/************************
 605              	    -	 ( w w -- w )
 606              	 	Subtract.
 607              	************************/
 608 29a0 96290000 		_HEADER SUBB,1,"-"
 608      012D00BF 
 609 29a8 57F8045B 		LDR	WP,[DSP],#4
 610 29ac C6EB0506 		RSB	TOS,TOS,WP
 611 29b0 E0E5     		_NEXT 
 612              	
 613              	/************************
 614              	    *	 ( w w -- w )
 615              	 	Multiply.
 616              	***********************/
 617 29b2 A4290000 		_HEADER STAR,1,"*"
 617      012A
 618 29b8 57F8045B 		LDR	WP,[DSP],#4
 619 29bc 05FB06F6 		MUL	TOS,WP,TOS
 620 29c0 D8E5     		_NEXT 
 621              	
 622              	/***************************
 623              	    UM*	 ( w w -- ud )
 624              	 	Unsigned multiply.
 625              	****************************/
 626 29c2 B6290000 		_HEADER UMSTA,3,"UM*"
 626      03554D2A 
 626      00BF
 627 29cc 3D68     		LDR	WP,[DSP]
 628 29ce A6FB0523 		UMULL	T2,T3,TOS,WP
 629 29d2 3A60     		STR	T2,[DSP]
 630 29d4 1E46     		MOV	TOS,T3
 631 29d6 CDE5     		_NEXT 
 632              	
 633              	/***************************
 634              	    M*	 ( w w -- d )
 635              	 	signed multiply.
 636              		hold double result
 637              	***************************/
 638 29d8 C6290000 		_HEADER MSTAR,2,"M*"
 638      024D2A00 
 639 29e0 3D68     		LDR	WP,[DSP]
 640 29e2 86FB0523 		SMULL	T2,T3,TOS,WP
 641 29e6 3A60     		STR	T2,[DSP]
 642 29e8 1E46     		MOV	TOS,T3
 643 29ea C3E5     		_NEXT 
 644              	
 645              	/***************************
 646              	    1+	 ( w -- w+1 )
 647              	 	Add 1.
 648              	***************************/
 649 29ec DC290000 		_HEADER ONEP,2,"1+"
 649      02312B00 
 650 29f4 06F10106 		ADD	TOS,TOS,#1
 651 29f8 BCE5     		_NEXT 
 652              	
ARM GAS  forth.s 			page 106


 653              	/***************************
 654              	    1-	 ( w -- w-1 )
 655              	 	Subtract 1.
 656              	***************************/
 657 29fa F0290000 		_HEADER ONEM,2,"1-"
 657      02312D00 
 657      00BF
 658 2a04 A6F10106 		SUB	TOS,TOS,#1
 659 2a08 B4E5     		_NEXT 
 660              	
 661              	/***************************
 662              	    2+	 ( w -- w+2 )
 663              	 	Add 2.
 664              	**************************/
 665 2a0a FE290000 		_HEADER TWOP,2,"2+"
 665      02322B00 
 665      00BF
 666 2a14 06F10206 		ADD	TOS,TOS,#2
 667 2a18 ACE5     		_NEXT
 668              	
 669              	/**************************
 670              	    2-	 ( w -- w-2 )
 671              	 	Subtract 2.
 672              	**************************/
 673 2a1a 0E2A0000 		_HEADER TWOM,2,"2-"
 673      02322D00 
 673      00BF
 674 2a24 A6F10206 		SUB	TOS,TOS,#2
 675 2a28 A4E5     		_NEXT
 676              	
 677              	/***************************
 678              	    CELL+	( w -- w+4 )
 679              	 	Add CELLL.
 680              	***************************/
 681 2a2a 1E2A0000 		_HEADER CELLP,5,"CELL+"
 681      0543454C 
 681      4C2B
 682 2a34 06F10406 		ADD	TOS,TOS,#CELLL
 683 2a38 9CE5     		_NEXT
 684              	
 685              	/***************************
 686              	    CELL-	( w -- w-4 )
 687              	 	Subtract CELLL.
 688              	**************************/
 689 2a3a 2E2A0000 		_HEADER CELLM,5,"CELL-"
 689      0543454C 
 689      4C2D
 690 2a44 A6F10406 		SUB	TOS,TOS,#CELLL
 691 2a48 94E5     		_NEXT
 692              	
 693              	/**************************** 
 694              	    BL	( -- 32 )
 695              	 	Blank (ASCII space).
 696              	*****************************/
 697 2a4a 3E2A0000 		_HEADER BLANK,2,"BL"
 697      02424C00 
 697      00BF
ARM GAS  forth.s 			page 107


 698 2a54 47F8046D 		_PUSH
 699 2a58 4FF02006 		MOV	TOS,#32
 700 2a5c 8AE5     		_NEXT 
 701              	
 702              	/**************************
 703              	    CELLS	( w -- w*4 )
 704              	 	Multiply CELLL 
 705              	***************************/
 706 2a5e 4E2A0000 		_HEADER CELLS,5,"CELLS"
 706      0543454C 
 706      4C53
 707 2a68 4FEA8606 		LSL TOS,#2
 708 2a6c 82E5     		_NEXT
 709              	
 710              	/***************************
 711              	    CELL/	( w -- w/4 )
 712              	 	Divide by CELLL.
 713              	***************************/
 714 2a6e 622A0000 		_HEADER CELLSL,5,"CELL/"
 714      0543454C 
 714      4C2F
 715 2a78 4FEAA606 		ASR TOS,#2
 716 2a7c 7AE5     		_NEXT
 717              	
 718              	/*************************
 719              	    2*	( w -- w*2 )
 720              	 	Multiply 2.
 721              	*************************/
 722 2a7e 722A0000 		_HEADER TWOST,2,"2*"
 722      02322A00 
 722      00BF
 723 2a88 4FEA4606 		MOV	TOS,TOS,LSL#1
 724 2a8c 72E5     		_NEXT
 725              	
 726              	/*************************
 727              	    2/	( w -- w/2 )
 728              	 	Divide by 2.
 729              	***********************/
 730 2a8e 822A0000 		_HEADER TWOSL,2,"2/"
 730      02322F00 
 730      00BF
 731 2a98 4FEA6606 		MOV	TOS,TOS,ASR#1
 732 2a9c 6AE5     		_NEXT
 733              	
 734              	/****************************
 735              	    ?DUP	( w -- w w | 0 )
 736              	 	Conditional duplicate.
 737              	*****************************/
 738 2a9e 922A0000 		_HEADER QDUP,4,"?DUP"
 738      043F4455 
 738      5000
 739 2aa8 3500     		MOVS	WP,TOS
 740 2aaa 18BF     		IT NE 
 741 2aac 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 742 2ab0 60E5     		_NEXT
 743              	
 744              	/***********************************
ARM GAS  forth.s 			page 108


 745              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 746              	 	Rotate top 3 items.
 747              	*************************************/
 748 2ab2 A22A0000 		_HEADER ROT,3,"ROT"
 748      03524F54 
 748      00BF
 749 2abc 3868     		LDR	T0,[DSP]  // w2 
 750 2abe 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 751 2ac0 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 752 2ac2 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 753 2ac4 56E5     		_NEXT
 754              	
 755              	/*********************************
 756              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 757              	 left rotate top 3 elements 
 758              	********************************/
 759 2ac6 B62A0000 		_HEADER NROT,4,"-ROT"
 759      042D524F 
 759      5400
 760 2ad0 7868     		LDR T0,[DSP,#4]
 761 2ad2 7E60     		STR TOS,[DSP,#4]	
 762 2ad4 3E68     		LDR TOS,[DSP]
 763 2ad6 3860     		STR T0,[DSP]
 764 2ad8 4CE5     		_NEXT 
 765              	
 766              	/*********************************
 767              	    2DROP	( w1 w2 -- )
 768              	 	Drop top 2 items.
 769              	*********************************/
 770 2ada CA2A0000 		_HEADER DDROP,5,"2DROP"
 770      05324452 
 770      4F50
 771 2ae4 57F8046B 		_POP
 772 2ae8 57F8046B 		_POP
 773 2aec 42E5     		_NEXT 
 774              	
 775              	/********************************
 776              		3DROP ( w1 w2 w3 -- )
 777              		drop top 3 items 
 778              	********************************/
 779 2aee DE2A0000 		_HEADER TDROP,5,"3DROP"
 779      05334452 
 779      4F50
 780 2af8 07F10807 	    add DSP,#8 
 781 2afc 57F8046B 	    _POP 
 782 2b00 38E5     	    _NEXT 
 783              	
 784              	/***********************************
 785              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 786              	 	Duplicate top 2 items.
 787              	************************************/
 788 2b02 F22A0000 		_HEADER DDUP,4,"2DUP"
 788      04324455 
 788      5000
 789 2b0c 3868     		LDR	T0,[DSP] // w1
 790 2b0e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 791 2b12 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
ARM GAS  forth.s 			page 109


 792 2b16 2DE5     		_NEXT
 793              	
 794              	/******************************
 795              	    D+	( d1 d2 -- d3 )
 796              	 	Add top 2 double numbers.
 797              	******************************/
 798 2b18 062B0000 		_HEADER DPLUS,2,"D+"
 798      02442B00 
 799 2b20 57F8045B 		LDR	WP,[DSP],#4
 800 2b24 57F8042B 		LDR	T2,[DSP],#4
 801 2b28 3B68     		LDR	T3,[DSP]
 802 2b2a ED18     		ADDS	WP,WP,T3
 803 2b2c 3D60     		STR	WP,[DSP]
 804 2b2e 46EB0206 		ADC	TOS,TOS,T2
 805 2b32 1FE5     		_NEXT
 806              	
 807              	/******************************
 808              		DABS ( d -- ud )
 809              		absolute value double 
 810              	*****************************/
 811 2b34 1C2B0000 		_HEADER DABS,4,"DABS"
 811      04444142 
 811      530000BF 
 812 2b40 16F0004F 		tst TOS,#(1<<31)
 813 2b44 09D0     		beq 9f 
 814 2b46 6FEA0606 		mvn TOS,TOS 
 815 2b4a 3D68     		ldr WP,[DSP]
 816 2b4c 6FEA0505 		mvn WP,WP 
 817 2b50 0135     		adds WP,#1
 818 2b52 3D60     		str WP,[DSP]
 819 2b54 01D3     		bcc 9f 
 820 2b56 06F10106 		add TOS,#1 
 821 2b5a 0BE5     	9:	_NEXT 
 822              	
 823              	/*****************************
 824              	  UD> ( d1 d2 -- f )
 825              	  unsigned compare double d1 > d2 
 826              	******************************/
 827 2b5c 382B0000 		_HEADER UDGREAT,3,"UD>"
 827      0355443E 
 828 2b64 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 829 2b68 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 830 2b6a B042     		cmp T0,TOS 
 831 2b6c 02D8     		bhi 1f
 832 2b6e 04D4     		bmi 2f  
 833 2b70 A942     		cmp T1,WP 
 834 2b72 02D9     		bls 2f 
 835 2b74 4FF0FF36 	1:	mov TOS,#-1 
 836 2b78 FCE4     		_NEXT 
 837 2b7a 4FF00006 	2:  mov TOS,#0 
 838 2b7e F9E4     		_NEXT 
 839              	
 840              	/******************************
 841              		D0= ( d -- f )
 842              		double 0= 
 843              	*****************************/
 844 2b80 602B0000 		_HEADER DZEQUAL,3,"D0="
ARM GAS  forth.s 			page 110


 844      0344303D 
 845 2b88 3046     		mov T0,TOS
 846 2b8a 57F8046B 		_POP 
 847 2b8e 46EA0006 		orr TOS,T0 
 848 2b92 01D0     		beq 9f
 849 2b94 6FF00006 		mvn TOS,#0 
 850 2b98 ECE4     	9:	_NEXT 
 851              	
 852              	/*****************************
 853              	    NOT	 ( w -- !w )
 854              	 	1"s complement.
 855              	*****************************/
 856 2b9a 842B0000 		_HEADER INVER,3,"NOT"
 856      034E4F54 
 856      00BF
 857 2ba4 6FEA0606 		MVN	TOS,TOS
 858 2ba8 E4E4     		_NEXT
 859              	
 860              	/*****************************
 861              	    NEGATE	( w -- -w )
 862              	 	2's complement.
 863              	***************************/
 864 2baa 9E2B0000 		_HEADER NEGAT,6,"NEGATE"
 864      064E4547 
 864      41544500 
 864      00BF
 865 2bb8 C6F10006 		RSB	TOS,TOS,#0
 866 2bbc DAE4     		_NEXT
 867              	
 868              	/***************************
 869              	    ABS	 ( w -- |w| )
 870              	 	Absolute.
 871              	**************************/
 872 2bbe AE2B0000 		_HEADER ABSS,3,"ABS"
 872      03414253 
 872      00BF
 873 2bc8 16F0004F 		TST	TOS,#0x80000000
 874 2bcc 18BF     		IT NE
 875 2bce 7642     	    RSBNE   TOS,TOS,#0
 876 2bd0 D0E4     		_NEXT
 877              	
 878              	/**************************
 879              		CLZ ( n - n )
 880              		count leading zeros 
 881              	**************************/
 882 2bd2 C22B0000 		_HEADER CLZ,3,"CLZ"
 882      03434C5A 
 882      00BF
 883 2bdc B6FA86F6 		clz TOS,TOS 
 884 2be0 C8E4     		_NEXT 
 885              	
 886              	/*************************
 887              		CTZ ( n -- n )
 888              		count trailing zeros 
 889              	************************/
 890 2be2 D62B0000 		_HEADER CTZ,3,"CTZ"
 890      0343545A 
ARM GAS  forth.s 			page 111


 890      00BF
 891 2bec 80EA0000 		eor T0,T0 
 892 2bf0 16F0010F 	1:  tst TOS,#1 
 893 2bf4 04D1     		bne 2f 
 894 2bf6 4FEA5606 		lsr TOS,#1 
 895 2bfa 00F10100 		add T0,#1 
 896 2bfe F7E7     		b 1b 
 897 2c00 0646     	2:  mov TOS,T0 
 898 2c02 B7E4     		_NEXT 
 899              	
 900              	
 901              	/*******************
 902              	  0= ( w -- f )
 903              	 TOS==0?
 904              	*******************/
 905 2c04 E62B0000 		_HEADER ZEQUAL,2,"0="
 905      02303D00 
 906 2c0c 16B9     		cbnz TOS,1f
 907 2c0e 4FF0FF36 		mov TOS,#-1
 908 2c12 AFE4     		_NEXT 
 909 2c14 86EA0606 	1:  eor TOS,TOS,TOS  
 910 2c18 ACE4     		_NEXT 	
 911              	
 912              	/*********************
 913              	    =	 ( w w -- t )
 914              	 	Equal?
 915              	*********************/
 916 2c1a 082C0000 		_HEADER EQUAL,1,"="
 916      013D
 917 2c20 57F8045B 		LDR	WP,[DSP],#4
 918 2c24 AE42     		CMP	TOS,WP
 919 2c26 0CBF     		ITE EQ 
 920 2c28 6FF00006 	    MVNEQ	TOS,#0
 921 2c2c 0026     		MOVNE	TOS,#0
 922 2c2e A1E4     		_NEXT
 923              	
 924              	/************************
 925              		<> ( w w -- f )
 926              		different?
 927              	************************/
 928 2c30 1E2C0000 		_HEADER DIFF,2,"<>"
 928      023C3E00 
 929 2c38 3046     		mov T0,TOS 
 930 2c3a 57F8046B 		_POP 
 931 2c3e 86EA0006 		eor TOS,T0
 932 2c42 B6FA86F0 		clz T0,TOS 
 933 2c46 06FA00F6 		lsl TOS,T0 
 934 2c4a 4FEAE676 		asr TOS,#31 
 935 2c4e 91E4     		_NEXT 
 936              	
 937              	/************************
 938              	    U<	 ( w w -- t )
 939              	 	Unsigned less?
 940              	*************************/
 941 2c50 342C0000 		_HEADER ULESS,2,"U<"
 941      02553C00 
 942 2c58 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 112


 943 2c5c B542     		CMP	WP,TOS
 944 2c5e 34BF     		ITE CC 
 945 2c60 6FF00006 		MVNCC	TOS,#0
 946 2c64 0026     		MOVCS	TOS,#0
 947 2c66 85E4     		_NEXT
 948              	
 949              	/**********************
 950              	    <	( w w -- t )
 951              	 	Less?
 952              	**********************/
 953 2c68 542C0000 		_HEADER LESS,1,"<"
 953      013C00BF 
 954 2c70 57F8045B 		LDR	WP,[DSP],#4
 955 2c74 B542     		CMP	WP,TOS
 956 2c76 B4BF     	    ITE LT
 957 2c78 6FF00006 		MVNLT	TOS,#0
 958 2c7c 0026     		MOVGE	TOS,#0
 959 2c7e 79E4     		_NEXT 
 960              	
 961              	/**********************
 962              		U> ( u u -- t|f )
 963              	    unsigned greater 
 964              	**********************/
 965 2c80 6C2C0000 		_HEADER UGREAT,2,"U>"
 965      02553E00 
 966 2c88 57F8045B 		LDR WP,[DSP],#4 
 967 2c8c AE42     		CMP TOS,WP 
 968 2c8e 34BF     		ITE CC  
 969 2c90 6FF00006 		MVNCC TOS,#0 
 970 2c94 0026     		MOVCS TOS,#0
 971 2c96 6DE4     		_NEXT 
 972              	
 973              	/***********************
 974              	    >	( w w -- t )
 975              	 	greater?
 976              	***********************/
 977 2c98 842C0000 		_HEADER GREAT,1,">"
 977      013E00BF 
 978 2ca0 57F8045B 		LDR	WP,[DSP],#4
 979 2ca4 B542     		CMP	WP,TOS
 980 2ca6 CCBF     		ITE GT
 981 2ca8 6FF00006 	    MVNGT	TOS,#0
 982 2cac 0026     		MOVLE	TOS,#0
 983 2cae 61E4     		_NEXT
 984              	
 985              	/***************************
 986              	    MAX	 ( w w -- max )
 987              	 	Leave maximum.
 988              	***************************/
 989 2cb0 9C2C0000 		_HEADER MAX,3,"MAX"
 989      034D4158 
 990 2cb8 57F8045B 		LDR	WP,[DSP],#4
 991 2cbc B542     		CMP	WP,TOS
 992 2cbe C8BF     		IT GT 
 993 2cc0 2E46     		MOVGT	TOS,WP
 994 2cc2 57E4     		_NEXT 
 995              	
ARM GAS  forth.s 			page 113


 996              	/**************************
 997              	    MIN	 ( w w -- min )
 998              	 	Leave minimum.
 999              	**************************/
 1000 2cc4 B42C0000 		_HEADER MIN,3,"MIN"
 1000      034D494E 
 1001 2ccc 57F8045B 		LDR	WP,[DSP],#4
 1002 2cd0 B542     		CMP	WP,TOS
 1003 2cd2 B8BF     		IT LT
 1004 2cd4 2E46     		MOVLT	TOS,WP
 1005 2cd6 4DE4     		_NEXT
 1006              	
 1007              	/***********************
 1008              	    +!	 ( w a -- )
 1009              	 	Add to memory.
 1010              	***********************/
 1011 2cd8 C82C0000 		_HEADER PSTOR,2,"+!"
 1011      022B2100 
 1012 2ce0 57F8045B 		LDR	WP,[DSP],#4
 1013 2ce4 3268     		LDR	T2,[TOS]
 1014 2ce6 2A44     		ADD	T2,T2,WP
 1015 2ce8 3260     		STR	T2,[TOS]
 1016 2cea 57F8046B 		_POP
 1017 2cee 41E4     		_NEXT
 1018              	
 1019              	/************************
 1020              	    2!	 ( d a -- )
 1021              	 	Store double number.
 1022              	*************************/
 1023 2cf0 DC2C0000 		_HEADER DSTOR,2,"2!"
 1023      02322100 
 1024 2cf8 57F8045B 		LDR	WP,[DSP],#4
 1025 2cfc 57F8042B 		LDR	T2,[DSP],#4
 1026 2d00 46F8045B 		STR	WP,[TOS],#4
 1027 2d04 3260     		STR	T2,[TOS]
 1028 2d06 57F8046B 		_POP
 1029 2d0a 33E4     		_NEXT
 1030              	
 1031              	/************************
 1032              	    2@	 ( a -- d )
 1033              	 	Fetch double number.
 1034              	************************/
 1035 2d0c F42C0000 		_HEADER DAT,2,"D@"
 1035      02444000 
 1036 2d14 7568     		LDR	WP,[TOS,#4]
 1037 2d16 47F8045D 		STR	WP,[DSP,#-4]!
 1038 2d1a 3668     		LDR	TOS,[TOS]
 1039 2d1c 2AE4     		_NEXT
 1040              	
 1041              	/***************************
 1042              	    COUNT	( b -- b+1 c )
 1043              	 	Fetch length of string.
 1044              	****************************/
 1045 2d1e 102D0000 		_HEADER COUNT,5,"COUNT"
 1045      05434F55 
 1045      4E54
 1046 2d28 16F8015B 		LDRB	WP,[TOS],#1
ARM GAS  forth.s 			page 114


 1047 2d2c 47F8046D 		_PUSH
 1048 2d30 2E46     		MOV	TOS,WP
 1049 2d32 1FE4     		_NEXT
 1050              	
 1051              	/******************************
 1052              	    DNEGATE	( d -- -d )
 1053              	 	Negate double number.
 1054              	**************************/
 1055 2d34 222D0000 		_HEADER DNEGA,7,"DNEGATE"
 1055      07444E45 
 1055      47415445 
 1056 2d40 3D68     		LDR	WP,[DSP]
 1057 2d42 A2EB0202 		SUB	T2,T2,T2
 1058 2d46 551B     		SUBS WP,T2,WP
 1059 2d48 62EB0606 		SBC	TOS,T2,TOS
 1060 2d4c 3D60     		STR	WP,[DSP]
 1061 2d4e 11E4     		_NEXT
 1062              	
 1063              	/******************************
 1064              	  System and user variables
 1065              	******************************/
 1066              	
 1067              	/*******************************
 1068              	  doVAR	( -- a )
 1069              	  Run time routine for VARIABLE and CREATE.
 1070              	hidden word used by compiler
 1071              	********************************/
 1072              	DOVAR:
 1073 2d50 47F8046D 		_PUSH
 1074 2d54 6646     		MOV TOS,IP
 1075 2d56 0CF1040C 		ADD IP,IP,#4 
 1076 2d5a 0EE4     		B UNNEST 
 1077              	
 1078              	/**********************************
 1079              	    doCON	( -- a ) 
 1080              	 	Run time routine for CONSTANT.
 1081              	hidden word used by compiler 
 1082              	***********************************/
 1083              	DOCON:
 1084 2d5c 47F8046D 		_PUSH
 1085 2d60 5CF8046B 		LDR.W TOS,[IP],#4 
 1086 2d64 09E4     		B UNNEST 
 1087              	
 1088              	/***********************
 1089              	  system variables 
 1090              	***********************/
 1091              	
 1092              	/**************************
 1093              	 SEED ( -- a)
 1094              	 return PRNG seed address 
 1095              	**************************/
 1096 2d66 382D0000 		_HEADER SEED,4,"SEED"
 1096      04534545 
 1096      4400
 1097 2d70 47F8046D 		_PUSH 
 1098 2d74 04F10406 		ADD TOS,UP,#RNDSEED
 1099 2d78 FFF7FCBB 		_NEXT 	
ARM GAS  forth.s 			page 115


 1100              	
 1101              	/****************************************
 1102              	  MSEC ( -- a)
 1103              	 return address of milliseconds counter
 1104              	****************************************/
 1105 2d7c 6A2D0000 		_HEADER MSEC,4,"MSEC"
 1105      044D5345 
 1105      430000BF 
 1106 2d88 47F8046D 	    _PUSH
 1107 2d8c 04F10806 	    ADD TOS,UP,#TICKS
 1108 2d90 FFF7F0BB 	    _NEXT 
 1109              	
 1110              	/*************************
 1111              	 TIMER ( -- a )
 1112              	 count down timer 
 1113              	**********************/
 1114 2d94 802D0000 		_HEADER TIMER,5,"TIMER"
 1114      0554494D 
 1114      455200BF 
 1115 2da0 47F8046D 		 _PUSH 
 1116 2da4 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1117 2da8 FFF7E4BB 	    _NEXT
 1118              	
 1119              	/*****************************
 1120              	    'BOOT	 ( -- a )
 1121              	 	boot up application vector 
 1122              	*****************************/
 1123 2dac 982D0000 		_HEADER TBOOT,5,"'BOOT"
 1123      0527424F 
 1123      4F5400BF 
 1124 2db8 47F8046D 		_PUSH
 1125 2dbc 04F11006 		ADD	TOS,UP,#BOOT 
 1126 2dc0 FFF7D8BB 		_NEXT
 1127              		
 1128              	/********************************************	
 1129              	    BASE	( -- a )
 1130              	 	Storage of the radix base for numeric I/O.
 1131              	**********************************************/
 1132 2dc4 B02D0000 		_HEADER BASE,4,"BASE"
 1132      04424153 
 1132      450000BF 
 1133 2dd0 47F8046D 		_PUSH
 1134 2dd4 04F11C06 		ADD	TOS,UP,#NBASE
 1135 2dd8 FFF7CCBB 		_NEXT
 1136              	
 1137              	/*****************************************************
 1138              	    temp	 ( -- a )
 1139              	 	A temporary storage location used in parse and find.
 1140              	hidden word for internal use
 1141              	********************************************************/
 1142              	TEMP:
 1143 2ddc 47F8046D 		_PUSH
 1144 2de0 04F12006 		ADD	TOS,UP,#TMP
 1145 2de4 FFF7C6BB 		_NEXT
 1146              	
 1147              	/*******************************************
 1148              	    SPAN	( -- a )
ARM GAS  forth.s 			page 116


 1149              	 	Hold character count received by EXPECT.
 1150              	********************************************/
 1151 2de8 C82D0000 		_HEADER SPAN,4,"SPAN"
 1151      04535041 
 1151      4E0000BF 
 1152 2df4 47F8046D 		_PUSH
 1153 2df8 04F12406 		ADD	TOS,UP,#CSPAN
 1154 2dfc FFF7BABB 		_NEXT
 1155              	
 1156              	/***********************************************************
 1157              	    >IN	 ( -- a )
 1158              	 	Hold the character pointer while parsing input stream.
 1159              	***********************************************************/
 1160 2e00 EC2D0000 		_HEADER INN,3,">IN"
 1160      033E494E 
 1161 2e08 47F8046D 		_PUSH
 1162 2e0c 04F12806 		ADD	TOS,UP,#TOIN
 1163 2e10 FFF7B0BB 		_NEXT
 1164              	
 1165              	/**************************************
 1166              	    #TIB	( -- a )
 1167              	 	Hold the current count and address 
 1168              		of the terminal input buffer.
 1169              	**************************************/
 1170 2e14 042E0000 		_HEADER NTIB,4,"#TIB"
 1170      04235449 
 1170      420000BF 
 1171 2e20 47F8046D 		_PUSH
 1172 2e24 04F12C06 		ADD	TOS,UP,#NTIBB
 1173 2e28 FFF7A4BB 		_NEXT
 1174              	
 1175              	/******************************
 1176              	    'EVAL	( -- a )
 1177              	 	Execution vector of EVAL.
 1178              	*******************************/
 1179 2e2c 182E0000 		_HEADER TEVAL,5,"'EVAL"
 1179      05274556 
 1179      414C00BF 
 1180 2e38 47F8046D 		_PUSH
 1181 2e3c 04F13406 		ADD	TOS,UP,#EVAL
 1182 2e40 FFF798BB 		_NEXT
 1183              	
 1184              	/*********************************
 1185              	    HLD	 ( -- a )
 1186              	 	Hold a pointer in building a 
 1187              		numeric output string.
 1188              	*********************************/
 1189 2e44 302E0000 		_HEADER HLD,3,"HLD"
 1189      03484C44 
 1190 2e4c 47F8046D 		_PUSH
 1191 2e50 04F13806 		ADD	TOS,UP,#VHOLD
 1192 2e54 FFF78EBB 		_NEXT
 1193              	
 1194              	/**********************************
 1195              	    CONTEXT	( -- a )
 1196              	 	A area to specify vocabulary 
 1197              		search order.
ARM GAS  forth.s 			page 117


 1198              	**********************************/
 1199 2e58 482E0000 		_HEADER CNTXT,7,"CONTEXT"
 1199      07434F4E 
 1199      54455854 
 1200              	CRRNT:
 1201 2e64 47F8046D 		_PUSH
 1202 2e68 04F13C06 		ADD	TOS,UP,#CTXT
 1203 2e6c FFF782BB 		_NEXT
 1204              	
 1205              	/******************************
 1206              	    CP	( -- a )
 1207              	 	Point to top name in RAM 
 1208              		vocabulary.
 1209              	******************************/
 1210 2e70 5C2E0000 		_HEADER CPP,2,"CP"
 1210      02435000 
 1211 2e78 47F8046D 		_PUSH
 1212 2e7c 04F14406 		ADD	TOS,UP,#USER_CTOP
 1213 2e80 FFF778BB 		_NEXT
 1214              	
 1215              	/****************************
 1216              	   FCP ( -- a )
 1217              	  Point ot top of Forth 
 1218              	  system dictionary
 1219              	****************************/
 1220 2e84 742E0000 		_HEADER FCP,3,"FCP"
 1220      03464350 
 1221 2e8c 47F8046D 		_PUSH 
 1222 2e90 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1223 2e94 FFF76EBB 		_NEXT 
 1224              	
 1225              	/***************************
 1226              	    LAST	( -- a )
 1227              	 	Point to the last name 
 1228              		in the name dictionary.
 1229              	***************************/
 1230 2e98 882E0000 		_HEADER LAST,4,"LAST"
 1230      044C4153 
 1230      540000BF 
 1231 2ea4 47F8046D 		_PUSH
 1232 2ea8 04F14806 		ADD	TOS,UP,#LASTN
 1233 2eac FFF762BB 		_NEXT
 1234              	
 1235              	
 1236              	/***********************
 1237              		system constants 
 1238              	***********************/
 1239              	
 1240              	/********************************
 1241              		USER-BEGIN ( -- a )
 1242              	  where user area begin in RAM
 1243              	********************************/
 1244 2eb0 9C2E0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1244      0A555345 
 1244      522D4245 
 1244      47494E00 
 1245 2ec0 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 118


 1246 2ec4 DFF80460 		ldr TOS,USR_BGN_ADR 
 1247 2ec8 FFF754BB 		_NEXT 
 1248              	USR_BGN_ADR:
 1249 2ecc 12050020 	.word  DTOP 
 1250              	
 1251              	/*********************************
 1252              	  USER_END ( -- a )
 1253              	  where user area end in RAM 
 1254              	******************************/
 1255 2ed0 B42E0000 		_HEADER USER_END,8,"USER-END"
 1255      08555345 
 1255      522D454E 
 1255      440000BF 
 1256 2ee0 47F8046D 		_PUSH 
 1257 2ee4 DFF80460 		ldr TOS,USER_END_ADR 
 1258 2ee8 FFF744BB 		_NEXT 
 1259              	USER_END_ADR:
 1260 2eec 7C800120 		.word DEND 
 1261              	
 1262              	
 1263              	/* *********************
 1264              	  Common functions
 1265              	***********************/
 1266              	
 1267              	/********************************
 1268              	    WITHIN	( u ul uh -- t )
 1269              	 	Return true if u is within 
 1270              		the range of ul and uh.
 1271              	********************************/
 1272 2ef0 D42E0000 		_HEADER WITHI,6,"WITHIN"
 1272      06574954 
 1272      48494E00 
 1273 2efc 504700BF 		_NEST
 1274 2f00 F9280000 		_ADR	OVER
 1275 2f04 A9290000 		_ADR	SUBB
 1276 2f08 51280000 		_ADR	TOR
 1277 2f0c A9290000 		_ADR	SUBB
 1278 2f10 0D280000 		_ADR	RFROM
 1279 2f14 592C0000 		_ADR	ULESS
 1280 2f18 7B250000 		_UNNEST
 1281              	
 1282              	//  Divide
 1283              	
 1284              	/*************************************
 1285              	    UM/MOD	( udl udh u -- ur uq )
 1286              	 	Unsigned divide of a double by a 
 1287              		single. Return mod and quotient.
 1288              	**************************************/
 1289 2f1c F42E0000 		_HEADER UMMOD,6,"UM/MOD"
 1289      06554D2F 
 1289      4D4F4400 
 1290 2f28 4FF00103 		MOV	T3,#1
 1291 2f2c 57F8045B 		LDR	WP,[DSP],#4
 1292 2f30 3A68     		LDR	T2,[DSP]
 1293              	UMMOD0:
 1294 2f32 9218     		ADDS	T2,T2,T2
 1295 2f34 6D41     		ADCS	WP,WP,WP
ARM GAS  forth.s 			page 119


 1296 2f36 04D3     		BCC	UMMOD1
 1297 2f38 A5EB0605 		SUB	WP,WP,TOS
 1298 2f3c 02F10102 		ADD	T2,T2,#1
 1299 2f40 04E0     		B UMMOD2
 1300              	UMMOD1:
 1301 2f42 AD1B     		SUBS	WP,WP,TOS 
 1302 2f44 28BF     		IT CS 
 1303 2f46 0132     		ADDCS	T2,T2,#1
 1304 2f48 00D2     		BCS	UMMOD2
 1305 2f4a 3544     		ADD	WP,WP,TOS
 1306              	UMMOD2:
 1307 2f4c DB18     		ADDS	T3,T3,T3
 1308 2f4e F0D3     		BCC	UMMOD0
 1309 2f50 1646     		MOV	TOS,T2
 1310 2f52 3D60     		STR	WP,[DSP]
 1311 2f54 FFF70EBB 		_NEXT
 1312              	
 1313              	/****************************
 1314              	    M/MOD	( d n -- r q )
 1315              	 	Signed floored divide 
 1316              		of double by single. 
 1317              		Return mod and quotient.
 1318              	****************************/
 1319 2f58 202F0000 		_HEADER MSMOD,5,"M/MOD"
 1319      054D2F4D 
 1319      4F4400BF 
 1320 2f64 504700BF 		_NEST
 1321 2f68 D5280000 		_ADR	DUPP
 1322 2f6c 09290000 		_ADR	ZLESS
 1323 2f70 D5280000 		_ADR	DUPP
 1324 2f74 51280000 		_ADR	TOR
 1325 2f78 7B270000 		_QBRAN MMOD1
 1325      902F0000 
 1326 2f80 B92B0000 		_ADR	NEGAT
 1327 2f84 51280000 		_ADR	TOR
 1328 2f88 412D0000 		_ADR	DNEGA
 1329 2f8c 0D280000 		_ADR	RFROM
 1330              	MMOD1:
 1331 2f90 51280000 		_ADR	TOR
 1332 2f94 D5280000 		_ADR	DUPP
 1333 2f98 09290000 		_ADR	ZLESS
 1334 2f9c 7B270000 		_QBRAN MMOD2
 1334      AC2F0000 
 1335 2fa4 3D280000 		_ADR	RAT
 1336 2fa8 99290000 		_ADR	PLUS
 1337              	MMOD2:
 1338 2fac 0D280000 		_ADR	RFROM
 1339 2fb0 292F0000 		_ADR	UMMOD
 1340 2fb4 0D280000 		_ADR	RFROM
 1341 2fb8 7B270000 		_QBRAN	MMOD3
 1341      CC2F0000 
 1342 2fc0 E5280000 		_ADR	SWAP
 1343 2fc4 B92B0000 		_ADR	NEGAT
 1344 2fc8 E5280000 		_ADR	SWAP
 1345              	MMOD3:   
 1346 2fcc 7B250000 		_UNNEST
 1347              	
ARM GAS  forth.s 			page 120


 1348              	/****************************
 1349              		S>D ( n -- d )
 1350              		convert single to double 
 1351              	*****************************/
 1352 2fd0 5C2F0000 		_HEADER STOD,3,"S>D"
 1352      03533E44 
 1353 2fd8 47F8046D 		_PUSH 
 1354 2fdc 4FEAE676 		ASR TOS,#31
 1355 2fe0 FFF7C8BA 		_NEXT 
 1356              	
 1357              	/****************************
 1358              		D2* ( d -- d<<1 )
 1359              		double * 2 
 1360              	***************************/
 1361 2fe4 D42F0000 		_HEADER D2STAR,3,"D2*"
 1361      0344322A 
 1362 2fec 3868     		ldr T0,[DSP]
 1363 2fee 4000     		lsls T0,#1
 1364 2ff0 3860     		str T0,[DSP]
 1365 2ff2 4FEA4606 		lsl TOS,#1
 1366 2ff6 46F10006 		adc TOS,#0
 1367 2ffa FFF7BBBA 		_NEXT 
 1368              	
 1369              	/****************************
 1370              		D2/  ( d -- d>>1 )
 1371              		double signed divide by 2 
 1372              	*****************************/
 1373 2ffe E82F0000 		_HEADER D2SL,3,"D2/"
 1373      0344322F 
 1373      00BF
 1374 3008 3868     		ldr T0,[DSP]
 1375 300a 7610     		asrs TOS,#1
 1376 300c 4FEA3000 		rrx T0,T0 
 1377 3010 3860     		str T0,[DSP]
 1378 3012 FFF7AFBA 		_NEXT 
 1379              	
 1380              	/***************************
 1381              		D/MOD  ( d+ n+ - r+ qd+ )
 1382              		unsigned double division
 1383              		and modulo 
 1384              		output:
 1385              			qd+ = d+ / n+
 1386              			r+ = qd+ - (d+ * n+ )
 1387              	***************************/
 1388 3016 02300000 		_HEADER DSLMOD,5,"D/MOD"
 1388      05442F4D 
 1388      4F44
 1389 3020 3D68     		ldr WP,[DSP]  // d+ high 
 1390 3022 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1391 3024 4FF02002 		mov T2,#32 // shift counter  
 1392 3028 81EA0101 		eor T1,T1 // quotient T0:T1  
 1393 302c 25B9     		cbnz WP,1f    
 1394 302e 82EA0202 		eor T2,T2 // nos shifting required 
 1395 3032 0546     		mov WP,T0 
 1396 3034 80EA0000 		eor T0,T0 
 1397 3038 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1398 303a 15F0004F 	    tst WP,#(1<<31) 
ARM GAS  forth.s 			page 121


 1399 303e 06D1     		bne 2f
 1400 3040 4918     		adds T1,T1,T1 
 1401 3042 4041     		adcs T0,T0,T0 
 1402 3044 45EB0505 		adc WP,WP,WP 
 1403 3048 A2F10102 		sub T2,#1 
 1404 304c F4E7     		b 1b 
 1405 304e B5FBF6F3 	2:  udiv T3,WP,TOS
 1406 3052 41EA0301 		orr T1,T3   // append partial quotient 
 1407 3056 06FB03F3 		mul T3,TOS
 1408 305a A5EB0305 		sub WP,T3 //remainder 
 1409 305e 02B1     		cbz T2,8f 
 1410 3060 EAE7     		b 1b 
 1411 3062 7D60     	8:	str WP,[DSP,#4] // remainder 
 1412 3064 3960     		str T1,[DSP]  // q lo 
 1413 3066 0646     		mov TOS,T0  // q hi 		
 1414 3068 FFF784BA 		_NEXT 
 1415              	
 1416              	
 1417              	/****************************
 1418              		D/  ( ud u -- udq )
 1419              		divide unsigned double 
 1420              		by unsigned single 
 1421              		return double quotient
 1422              		rounded to nearest integer 
 1423              	****************************/
 1424 306c 1A300000 		_HEADER DSLASH,2,"D/"
 1424      02442F00 
 1425 3074 504700BF 		_NEST 
 1426 3078 D5280000 		_ADR DUPP 
 1427 307c 3B270000 		_DOLIT 1 
 1427      01000000 
 1428 3084 71290000 		_ADR RSHIFT 
 1429 3088 51280000 		_ADR TOR 
 1430 308c 21300000 		_ADR DSLMOD 
 1431 3090 BD2A0000 		_ADR ROT 
 1432 3094 0D280000 		_ADR RFROM 
 1433 3098 A12C0000 		_ADR GREAT 
 1434 309c 7B270000 		_QBRAN 9f
 1434      B4300000 
 1435 30a4 3B270000 		_DOLIT 1 
 1435      01000000 
 1436 30ac D92F0000 		_ADR STOD 
 1437 30b0 212B0000 		_ADR DPLUS 
 1438 30b4 7B250000 	9:	_UNNEST 
 1439              	
 1440              	
 1441              	/****************************
 1442              		D* ( d s -- d )
 1443              	    multiply a double 
 1444              		by a single 
 1445              	****************************/
 1446 30b8 70300000 		_HEADER DSTAR,2,"D*"
 1446      02442A00 
 1447              	/*
 1448              		_NEST 
 1449              		_ADR NROT 
 1450              		_ADR DUPP 
ARM GAS  forth.s 			page 122


 1451              		_ADR TOR 
 1452              		_ADR DABS
 1453              		_ADR SWAP  
 1454              		_ADR ROT   
 1455              		_ADR DUPP
 1456              		_ADR TOR
 1457              		_ADR MSTAR
 1458              		_ADR ROT
 1459              		_ADR RFROM 
 1460              		_ADR STAR 
 1461              		_ADR PLUS
 1462              		_ADR RFROM 
 1463              		_ADR ZLESS 
 1464              		_QBRAN 9f
 1465              		_ADR DNEGA   
 1466              	9:	_UNNEST 
 1467              	*/
 1468 30c0 57F8040B 		ldr T0,[DSP],#4
 1469 30c4 3968     		ldr T1,[DSP]
 1470 30c6 3860     		str T0,[DSP] 
 1471 30c8 83EA0303 		eor T3,T3 
 1472 30cc 10F0004F 		tst T0,#(1<<31)
 1473 30d0 02D0     		beq 1f 
 1474              		// DNEGATE 
 1475 30d2 591A     		subs T1,T3,T1  
 1476 30d4 63EB0000 		sbc T0,T3,T0 
 1477 30d8 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1478 30dc 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1479 30e0 0E44     		add TOS,T1  // TOS:T2 product  
 1480 30e2 3868     		ldr r0,[DSP]
 1481 30e4 10F0004F 		tst T0,#(1<<31)
 1482 30e8 02D0     		beq 2f 
 1483              		// DNEGATE product 
 1484 30ea 9A1A     		subs T2,T3,T2  
 1485 30ec 63EB0606 		sbc TOS,T3,TOS 
 1486 30f0 3A60     	2:  str T2,[DSP]
 1487 30f2 FFF73FBA 		_NEXT 
 1488              	
 1489              	
 1490              	/****************************
 1491              	   /MOD	( n n -- r q )
 1492              		Signed divide. Return
 1493              		mod and quotient.
 1494              	****************************/
 1495 30f6 BC300000 		_HEADER SLMOD,4,"/MOD"
 1495      042F4D4F 
 1495      4400
 1496 3100 504700BF 		_NEST
 1497 3104 F9280000 		_ADR	OVER
 1498 3108 09290000 		_ADR	ZLESS
 1499 310c E5280000 		_ADR	SWAP
 1500 3110 652F0000 		_ADR	MSMOD
 1501 3114 7B250000 		_UNNEST
 1502              	
 1503              	/**************************
 1504              	    MOD	 ( n n -- r )
 1505              	 	Signed divide. Return
ARM GAS  forth.s 			page 123


 1506              		mod only.
 1507              	**************************/
 1508 3118 FA300000 		_HEADER MODD,3,"MOD"
 1508      034D4F44 
 1509 3120 504700BF 		_NEST
 1510 3124 01310000 		_ADR	SLMOD
 1511 3128 C5280000 		_ADR	DROP
 1512 312c 7B250000 		_UNNEST
 1513              	
 1514              	/*************************
 1515              	    /	   ( n n -- q )
 1516              	 	Signed divide. Return
 1517              		quotient only.
 1518              	**************************/
 1519 3130 1C310000 		_HEADER SLASH,1,"/"
 1519      012F00BF 
 1520 3138 504700BF 		_NEST
 1521 313c 01310000 		_ADR	SLMOD
 1522 3140 E5280000 		_ADR	SWAP
 1523 3144 C5280000 		_ADR	DROP
 1524 3148 7B250000 		_UNNEST
 1525              	
 1526              	//******************************
 1527              	//  */MOD	( n1 n2 n3 -- r q )
 1528              	/* 	Multiply n1 and n2, then 
 1529              		divide by n3. Return 
 1530              		mod and quotient.
 1531              	******************************/
 1532 314c 34310000 		_HEADER SSMOD,5,"*/MOD"
 1532      052A2F4D 
 1532      4F4400BF 
 1533 3158 504700BF 		_NEST
 1534 315c 51280000 		_ADR	TOR
 1535 3160 E1290000 		_ADR	MSTAR
 1536 3164 0D280000 		_ADR	RFROM
 1537 3168 652F0000 		_ADR	MSMOD
 1538 316c 7B250000 		_UNNEST
 1539              	
 1540              	//*******************************
 1541              	//  */ ( n1 n2 n3 -- q )
 1542              	/* 	Multiply n1 by n2, then 
 1543              		divide by n3. Return quotient
 1544              		only.
 1545              	*******************************/
 1546 3170 50310000 		_HEADER STASL,2,"*/"
 1546      022A2F00 
 1547 3178 504700BF 		_NEST
 1548 317c 59310000 		_ADR	SSMOD
 1549 3180 E5280000 		_ADR	SWAP
 1550 3184 C5280000 		_ADR	DROP
 1551 3188 7B250000 		_UNNEST
 1552              	
 1553              	/*******************
 1554              	  Miscellaneous
 1555              	*******************/
 1556              	
 1557              	/*************************
ARM GAS  forth.s 			page 124


 1558              	    ALIGNED	( b -- a )
 1559              	 	Align address to the 
 1560              		cell boundary.
 1561              	**************************/
 1562 318c 74310000 		_HEADER ALGND,7,"ALIGNED"
 1562      07414C49 
 1562      474E4544 
 1563 3198 06F10306 		ADD	TOS,TOS,#3
 1564 319c 6FF00305 		MVN	WP,#3
 1565 31a0 06EA0506 		AND	TOS,TOS,WP
 1566 31a4 FFF7E6B9 		_NEXT
 1567              	
 1568              	/****************************
 1569              	    >CHAR	( c -- c )
 1570              	 	Filter non-printing 
 1571              		characters.
 1572              	****************************/
 1573 31a8 90310000 		_HEADER TCHAR,5,">CHAR"
 1573      053E4348 
 1573      415200BF 
 1574 31b4 504700BF 		_NEST
 1575 31b8 3B270000 		_DOLIT  0x7F
 1575      7F000000 
 1576 31c0 19290000 		_ADR	ANDD
 1577 31c4 D5280000 		_ADR	DUPP	// mask msb
 1578 31c8 552A0000 		_ADR	BLANK
 1579 31cc 3B270000 		_DOLIT 	127
 1579      7F000000 
 1580 31d4 FD2E0000 		_ADR	WITHI	// check for printable
 1581 31d8 A52B0000 		_ADR	INVER
 1582 31dc 7B270000 		_QBRAN	TCHA1
 1582      F0310000 
 1583 31e4 C5280000 		_ADR	DROP
 1584 31e8 3B270000 		_DOLIT 	'_'	// replace non-printables
 1584      5F000000 
 1585              	TCHA1:
 1586 31f0 7B250000 		  _UNNEST
 1587              	
 1588              	/************************
 1589              	    DEPTH	( -- n )
 1590              	 	Return the depth of
 1591              		the data stack.
 1592              	***********************/
 1593 31f4 AC310000 		_HEADER DEPTH,5,"DEPTH"
 1593      05444550 
 1593      544800BF 
 1594 3200 4FF68062 		_MOV32 T2,SPP 
 1594      C2F20102 
 1595 3208 A2EB0702 		SUB	T2,T2,DSP
 1596 320c 47F8046D 		_PUSH
 1597 3210 4FEAA206 		ASR	TOS,T2,#2
 1598 3214 FFF7AEB9 		_NEXT
 1599              	
 1600              	/*****************************
 1601              	    PICK	( ... +n -- ... w )
 1602              	 	Copy the nth stack item 
 1603              		to tos.
ARM GAS  forth.s 			page 125


 1604              	******************************/
 1605 3218 F8310000 		_HEADER PICK,4,"PICK"
 1605      04504943 
 1605      4B0000BF 
 1606 3224 504700BF 		_NEST
 1607 3228 F5290000 		_ADR	ONEP
 1608 322c 692A0000 		_ADR	CELLS
 1609 3230 A1280000 		_ADR	SPAT
 1610 3234 99290000 		_ADR	PLUS
 1611 3238 C1270000 		_ADR	AT
 1612 323c 7B250000 		_UNNEST
 1613              	
 1614              	/*********************
 1615              	  Memory access
 1616              	*********************/
 1617              	
 1618              	/*************************
 1619              	    HERE	( -- a )
 1620              	 	Return the top of
 1621              		the code dictionary.
 1622              	*************************/
 1623 3240 1C320000 		_HEADER HERE,4,"HERE"
 1623      04484552 
 1623      450000BF 
 1624 324c 504700BF 		_NEST
 1625 3250 792E0000 		_ADR	CPP
 1626 3254 C1270000 		_ADR	AT
 1627 3258 7B250000 		_UNNEST
 1628              	
 1629              	/***************************	
 1630              	    PAD	 ( -- a )
 1631              	 	Return the address of 
 1632              		a temporary buffer.
 1633              	***************************/
 1634 325c 44320000 		_HEADER PAD,3,"PAD"
 1634      03504144 
 1635 3264 504700BF 		_NEST
 1636 3268 4D320000 		_ADR	HERE
 1637 326c 3B270000 		_DOLIT 80
 1637      50000000 
 1638 3274 99290000 		_ADR PLUS 
 1639 3278 7B250000 		_UNNEST
 1640              	
 1641              	/***********************
 1642              	    TIB	 ( -- a )
 1643              	 	Return the address 
 1644              		of the terminal 
 1645              		input buffer.
 1646              	************************/
 1647 327c 60320000 		_HEADER TIB,3,"TIB"
 1647      03544942 
 1648 3284 47F8046D 		_PUSH
 1649 3288 266B     		ldr TOS,[UP,#TIBUF]
 1650 328a FFF773B9 		_NEXT
 1651              	
 1652              	/*************************
 1653              	    @EXECUTE	( a -- )
ARM GAS  forth.s 			page 126


 1654              	 	Execute vector stored
 1655              		in address a.
 1656              	*************************/
 1657 328e 80320000 		_HEADER ATEXE,8,"@EXECUTE"
 1657      08404558 
 1657      45435554 
 1657      4500
 1658 329c 3500     		MOVS	WP,TOS
 1659 329e 57F8046B 		_POP
 1660 32a2 2D68     		LDR	WP,[WP]
 1661 32a4 45F00105 		ORR	WP,WP,#1
 1662 32a8 18BF     	    IT NE 
 1663 32aa 2847     		BXNE	WP
 1664 32ac FFF762B9 		_NEXT
 1665              	
 1666              	/*******************************
 1667              	    CMOVE	( b1 b2 u -- )
 1668              	 	Copy u bytes from b1 to b2.
 1669              	********************************/
 1670 32b0 92320000 		_HEADER CMOVE,5,"CMOVE"
 1670      05434D4F 
 1670      564500BF 
 1671 32bc 57F8042B 		LDR	T2,[DSP],#4
 1672 32c0 57F8043B 		LDR	T3,[DSP],#4
 1673 32c4 03E0     		B CMOV1
 1674              	CMOV0:
 1675 32c6 13F8015B 		LDRB	WP,[T3],#1
 1676 32ca 02F8015B 		STRB	WP,[T2],#1
 1677              	CMOV1:
 1678 32ce 3600     		MOVS	TOS,TOS
 1679 32d0 02D0     		BEQ	CMOV2
 1680 32d2 A6F10106 		SUB	TOS,TOS,#1
 1681 32d6 F6E7     		B CMOV0
 1682              	CMOV2:
 1683 32d8 57F8046B 		_POP
 1684 32dc FFF74AB9 		_NEXT
 1685              	
 1686              	/***************************
 1687              	    MOVE	( a1 a2 u -- )
 1688              	 	Copy u words from a1 to a2.
 1689              	*******************************/
 1690 32e0 B4320000 		_HEADER MOVE,4,"MOVE"
 1690      044D4F56 
 1690      450000BF 
 1691 32ec 4FF00400 		MOV T0,#4 
 1692 32f0 06F10306 		ADD TOS,#3 
 1693 32f4 26F00306 		BIC TOS,#3
 1694 32f8 57F8041B 		LDR	T1,[DSP],#4 // dest
 1695 32fc 57F8042B 		LDR	T2,[DSP],#4 // src 
 1696 3300 8A42     		CMP T2,T1 
 1697 3302 08D5     		BPL MOVE1
 1698 3304 6FF00300 		MOV T0,#-4 
 1699 3308 3144     		ADD T1,TOS
 1700 330a 3244     		ADD T2,TOS 
 1701 330c 01E0     		B MOVE3
 1702              	MOVE0:
 1703 330e 1568     		LDR	WP,[T2]
ARM GAS  forth.s 			page 127


 1704 3310 0D60     		STR	WP,[T1]
 1705              	MOVE3: 
 1706 3312 0144     		ADD T1,T0 
 1707 3314 0244     		ADD T2,T0 
 1708              	MOVE1:
 1709 3316 3600     		MOVS TOS,TOS
 1710 3318 02D0     		BEQ	MOVE2
 1711 331a A6F10406 		SUB	TOS,TOS,#4
 1712 331e F6E7     		B MOVE0
 1713              	MOVE2:
 1714 3320 57F8046B 		_POP
 1715 3324 FFF726B9 		_NEXT
 1716              	
 1717              	/**************************
 1718              	    FILL	( b u c -- )
 1719              	 	Fill u bytes of character
 1720              		c to area beginning at b.
 1721              	******************************/
 1722 3328 E4320000 		_HEADER FILL,4,"FILL"
 1722      0446494C 
 1722      4C0000BF 
 1723 3334 03CF     		LDMFD DSP!,{T0,T1} 
 1724 3336 0000     		MOVS T0,T0 
 1725 3338 03D0     		BEQ FILL2
 1726              	FILL1:
 1727 333a 01F8016B 		STRB	TOS,[T1],#1
 1728 333e 0138     		SUBS	T0,T0,#1
 1729 3340 FBD1     		BNE FILL1
 1730              	FILL2:
 1731 3342 57F8046B 		_POP
 1732 3346 FFF715B9 		_NEXT
 1733              	
 1734              	/*****************************
 1735              	    PACK$	( b u a -- a )
 1736              	 	Build a counted word with
 1737              		u characters from b. 
 1738              		Null fill.
 1739              	*****************************/
 1740 334a 2C330000 		_HEADER PACKS,5,"PACK$"
 1740      05504143 
 1740      4B24
 1741 3354 504700BF 		_NEST
 1742 3358 99310000 		_ADR	ALGND
 1743 335c D5280000 		_ADR	DUPP
 1744 3360 51280000 		_ADR	TOR		// strings only on cell boundary
 1745 3364 F9280000 		_ADR	OVER
 1746 3368 99290000 		_ADR	PLUS
 1747 336c F5290000 		_ADR	ONEP 
 1748 3370 3B270000 		_DOLIT 	0xFFFFFFFC
 1748      FCFFFFFF 
 1749 3378 19290000 		_ADR	ANDD			// count mod cell
 1750 337c 3B270000 		_DOLIT 	0
 1750      00000000 
 1751 3384 E5280000 		_ADR	SWAP
 1752 3388 AD270000 		_ADR	STORE			// null fill cell
 1753 338c 3D280000 		_ADR	RAT
 1754 3390 0D2B0000 		_ADR	DDUP
ARM GAS  forth.s 			page 128


 1755 3394 CD270000 		_ADR	CSTOR
 1756 3398 F5290000 		_ADR	ONEP			// save count
 1757 339c E5280000 		_ADR	SWAP
 1758 33a0 BD320000 		_ADR	CMOVE
 1759 33a4 0D280000 		_ADR	RFROM
 1760 33a8 7B250000 		_UNNEST   			// move string
 1761              	
 1762              	/***********************************
 1763              	  Numeric output, single precision
 1764              	***********************************/
 1765              	
 1766              	/**************************
 1767              	    DIGIT	( u -- c )
 1768              	 	Convert digit u to 
 1769              		a character.
 1770              	***************************/
 1771 33ac 4E330000 		_HEADER DIGIT,5,"DIGIT"
 1771      05444947 
 1771      495400BF 
 1772 33b8 504700BF 		_NEST
 1773 33bc 3B270000 		_DOLIT 9
 1773      09000000 
 1774 33c4 F9280000 		_ADR	OVER
 1775 33c8 712C0000 		_ADR	LESS
 1776 33cc 3B270000 		_DOLIT	7
 1776      07000000 
 1777 33d4 19290000 		_ADR	ANDD
 1778 33d8 99290000 		_ADR	PLUS
 1779 33dc 3B270000 		_DOLIT	'0'
 1779      30000000 
 1780 33e4 99290000 		_ADR	PLUS 
 1781 33e8 7B250000 		_UNNEST
 1782              	
 1783              	/*********************************
 1784              	    EXTRACT	( ud base -- ud c )
 1785              	 	Extract the least significant
 1786              		digit from positive double.
 1787              	**********************************/
 1788 33ec B0330000 		_HEADER EXTRC,7,"EXTRACT"
 1788      07455854 
 1788      52414354 
 1789 33f8 504700BF 		_NEST
 1790 33fc 21300000 		_ADR	DSLMOD
 1791 3400 BD2A0000 		_ADR	ROT
 1792 3404 B9330000 		_ADR	DIGIT
 1793 3408 7B250000 		_UNNEST
 1794              	
 1795              	/***************************
 1796              	    <#	  ( -- )
 1797              	 	Initiate the numeric
 1798              		output process.
 1799              	****************************/
 1800 340c F0330000 		_HEADER BDIGS,2,"<#"
 1800      023C2300 
 1801 3414 504700BF 		_NEST
 1802 3418 65320000 		_ADR	PAD
 1803 341c 4D2E0000 		_ADR	HLD
ARM GAS  forth.s 			page 129


 1804 3420 AD270000 		_ADR	STORE
 1805 3424 7B250000 		_UNNEST
 1806              	
 1807              	/*********************************
 1808              	    HOLD	( c -- )
 1809              	 	Insert a character into the 
 1810              		numeric output string.
 1811              	**********************************/
 1812 3428 10340000 		_HEADER HOLD,4,"HOLD"
 1812      04484F4C 
 1812      440000BF 
 1813 3434 504700BF 		_NEST
 1814 3438 4D2E0000 		_ADR	HLD
 1815 343c C1270000 		_ADR	AT
 1816 3440 052A0000 		_ADR	ONEM
 1817 3444 D5280000 		_ADR	DUPP
 1818 3448 4D2E0000 		_ADR	HLD
 1819 344c AD270000 		_ADR	STORE
 1820 3450 CD270000 		_ADR	CSTOR
 1821 3454 7B250000 		_UNNEST
 1822              	
 1823              	/***********************
 1824              	    #	   ( ud -- ud )
 1825              	 	Extract one digit 
 1826              		from ud and append 
 1827              		the digit to output 
 1828              		string.
 1829              	*************************/
 1830 3458 2C340000 		_HEADER DIG,1,"#"
 1830      012300BF 
 1831 3460 504700BF 		_NEST
 1832 3464 D12D0000 		_ADR	BASE
 1833 3468 C1270000 		_ADR	AT
 1834 346c F9330000 		_ADR	EXTRC
 1835 3470 35340000 		_ADR	HOLD
 1836 3474 7B250000 		_UNNEST
 1837              	
 1838              	/***************************
 1839              	    #S	  ( ud -- 0 )
 1840              	 	Convert ud until all 
 1841              		digits are added to 
 1842              		the output string.
 1843              	***************************/
 1844 3478 5C340000 		_HEADER DIGS,2,"#S"
 1844      02235300 
 1845 3480 504700BF 		_NEST
 1846              	DIGS1:
 1847 3484 61340000 	    _ADR	DIG
 1848 3488 0D2B0000 		_ADR	DDUP
 1849 348c 2D290000 		_ADR    ORR 
 1850 3490 7B270000 		_QBRAN 	DIGS2
 1850      A0340000 
 1851 3498 8F270000 		_BRAN	DIGS1
 1851      84340000 
 1852              	DIGS2:
 1853 34a0 C5280000 		 _ADR DROP 
 1854 34a4 7B250000 		 _UNNEST
ARM GAS  forth.s 			page 130


 1855              	
 1856              	/*********************
 1857              	    SIGN	( n -- )
 1858              	 	Add a minus sign
 1859              		to the numeric
 1860              		output string.
 1861              	*********************/
 1862 34a8 7C340000 		_HEADER SIGN,4,"SIGN"
 1862      04534947 
 1862      4E0000BF 
 1863 34b4 504700BF 		_NEST
 1864 34b8 09290000 		_ADR	ZLESS
 1865 34bc 7B270000 		_QBRAN	SIGN1
 1865      D0340000 
 1866 34c4 3B270000 		_DOLIT '-'
 1866      2D000000 
 1867 34cc 35340000 		_ADR	HOLD
 1868              	SIGN1:
 1869 34d0 7B250000 		  _UNNEST
 1870              	
 1871              	/*************************
 1872              	    #>  ( w -- b u )
 1873              	 	Prepare the output 
 1874              		word to be TYPE'd.
 1875              	************************/
 1876 34d4 AC340000 		_HEADER EDIGS,2,"#>"
 1876      02233E00 
 1877 34dc 504700BF 		_NEST
 1878 34e0 C5280000 		_ADR	DROP
 1879 34e4 4D2E0000 		_ADR	HLD
 1880 34e8 C1270000 		_ADR	AT
 1881 34ec 65320000 		_ADR	PAD
 1882 34f0 F9280000 		_ADR	OVER
 1883 34f4 A9290000 		_ADR	SUBB
 1884 34f8 7B250000 		_UNNEST
 1885              	
 1886              	/**************************
 1887              	    str	 ( n -- b u )
 1888              	 	Convert a signed 
 1889              		integer to a numeric 
 1890              		string.
 1891              	hidden word used by compiler
 1892              	***************************/
 1893              	STRR:
 1894 34fc 504700BF 		_NEST
 1895 3500 D92F0000 		_ADR 	STOD 
 1896 3504 D5280000 		_ADR	DUPP
 1897 3508 51280000 		_ADR	TOR
 1898 350c 412B0000 		_ADR	DABS
 1899 3510 15340000 		_ADR	BDIGS
 1900 3514 81340000 		_ADR	DIGS
 1901 3518 0D280000 		_ADR	RFROM
 1902 351c B5340000 		_ADR	SIGN
 1903 3520 DD340000 		_ADR	EDIGS
 1904 3524 7B250000 		_UNNEST
 1905              	
 1906              	/*************************
ARM GAS  forth.s 			page 131


 1907              	    HEX	 ( -- )
 1908              	 	Use radix 16 as 
 1909              		base for numeric 
 1910              		conversions.
 1911              	*************************/
 1912 3528 D8340000 		_HEADER HEX,3,"HEX"
 1912      03484558 
 1913 3530 504700BF 		_NEST
 1914 3534 3B270000 		_DOLIT 16
 1914      10000000 
 1915 353c D12D0000 		_ADR	BASE
 1916 3540 AD270000 		_ADR	STORE
 1917 3544 7B250000 		_UNNEST
 1918              	
 1919              	/**************************
 1920              		BIN ( -- )
 1921              		Use radix 2 as 
 1922              		base for numeric 
 1923              		conversion 
 1924              	**************************/
 1925 3548 2C350000 		_HEADER BIN,3,"BIN"
 1925      0342494E 
 1926 3550 504700BF 		_NEST 
 1927 3554 3B270000 		_DOLIT 2 
 1927      02000000 
 1928 355c D12D0000 		_ADR BASE 
 1929 3560 AD270000 		_ADR STORE
 1930 3564 7B250000 		_UNNEST 
 1931              	
 1932              	/************************
 1933              	    DECIMAL	( -- )
 1934              	 	Use radix 10 as base
 1935              		for numeric conversions.
 1936              	*************************/
 1937 3568 4C350000 		_HEADER DECIM,7,"DECIMAL"
 1937      07444543 
 1937      494D414C 
 1938 3574 504700BF 		_NEST
 1939 3578 3B270000 		_DOLIT 10
 1939      0A000000 
 1940 3580 D12D0000 		_ADR	BASE
 1941 3584 AD270000 		_ADR	STORE
 1942 3588 7B250000 		_UNNEST
 1943              	
 1944              	/************************************
 1945              	  Numeric input, single precision
 1946              	***********************************/
 1947              	
 1948              	/***********************************
 1949              	    DIGIT?	( c base -- u t )
 1950              	 	Convert a character to its 
 1951              		numeric value. A flag 
 1952              		indicates success.
 1953              	**********************************/
 1954 358c 6C350000 		_HEADER DIGTQ,6,"DIGIT?"
 1954      06444947 
 1954      49543F00 
ARM GAS  forth.s 			page 132


 1955 3598 504700BF 		_NEST
 1956 359c 51280000 		_ADR	TOR
 1957 35a0 3B270000 		_DOLIT 	'0'
 1957      30000000 
 1958 35a8 A9290000 		_ADR	SUBB
 1959 35ac 3B270000 		_DOLIT 9
 1959      09000000 
 1960 35b4 F9280000 		_ADR	OVER
 1961 35b8 712C0000 		_ADR	LESS
 1962 35bc 7B270000 		_QBRAN	DGTQ1
 1962      E4350000 
 1963 35c4 3B270000 		_DOLIT 7
 1963      07000000 
 1964 35cc A9290000 		_ADR	SUBB
 1965 35d0 D5280000 		_ADR	DUPP
 1966 35d4 3B270000 		_DOLIT	10
 1966      0A000000 
 1967 35dc 712C0000 		_ADR	LESS
 1968 35e0 2D290000 		_ADR	ORR
 1969              	DGTQ1:
 1970 35e4 D5280000 		_ADR	DUPP
 1971 35e8 0D280000 		_ADR	RFROM
 1972 35ec 592C0000 		_ADR	ULESS
 1973 35f0 7B250000 		_UNNEST
 1974              	
 1975              	/***********************************
 1976              	 parse digits 
 1977              	  d digits count 
 1978              	  n parsed integer
 1979              	  a+ updated pointer  
 1980              	************************************/
 1981              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1982 35f4 504700BF 	    _NEST
 1983 35f8 D12D0000 	    _ADR BASE 
 1984 35fc C1270000 	    _ADR AT 
 1985 3600 51280000 	    _ADR TOR  
 1986 3604 292D0000 	1:  _ADR COUNT 
 1987 3608 3D280000 	    _ADR RAT 
 1988 360c 99350000 	    _ADR DIGTQ
 1989 3610 7B270000 	    _QBRAN 2f
 1989      40360000 
 1990 3618 BD2A0000 	    _ADR ROT 
 1991 361c 3D280000 	    _ADR RAT 
 1992 3620 B9290000 	    _ADR STAR 
 1993 3624 99290000 	    _ADR PLUS
 1994 3628 E5280000 	    _ADR SWAP 
 1995 362c BD2A0000 	    _ADR ROT 
 1996 3630 F5290000 	    _ADR ONEP 
 1997 3634 D12A0000 	    _ADR NROT
 1998 3638 8F270000 	    _BRAN 1b 
 1998      04360000 
 1999 3640 C5280000 	2:  _ADR DROP 
 2000 3644 052A0000 	    _ADR ONEM  // decrement a 
 2001 3648 0D280000 	    _ADR RFROM 
 2002 364c C5280000 	    _ADR DROP 
 2003 3650 7B250000 	    _UNNEST 
 2004              	
ARM GAS  forth.s 			page 133


 2005              	/**************************
 2006              	 CHAR? 
 2007              	 check for charcter c 
 2008              	 move pointer if *a==c  
 2009              	**************************/
 2010              	CHARQ: // ( a c -- a+ t | a f )
 2011 3654 3868     	    ldr T0,[DSP]
 2012 3656 10F8011B 	    ldrb T1,[T0],#1 
 2013 365a 3246     	    mov T2,TOS 
 2014 365c 86EA0606 	    eor TOS,TOS
 2015 3660 9142     	    cmp T1,T2
 2016 3662 02D1     	    bne 1f 
 2017 3664 3860     	    str T0,[DSP]
 2018 3666 6FEA0606 	    mvn TOS,TOS  
 2019 366a FEF783BF 	1:  _NEXT
 2020              	
 2021              	/*********************************
 2022              	   NEG? ( a -- a|a+  f|t )
 2023              	   skip '-'|'+' return -1 if '-' 
 2024              	   else return 0 
 2025              	*********************************/
 2026              	NEGQ: 
 2027 366e 504700BF 	    _NEST 
 2028 3672 3B270000 	    _DOLIT '-' 
 2028      2D000000 
 2029 367a 55360000 	    _ADR CHARQ
 2030 367e D5280000 	    _ADR DUPP  
 2031 3682 7B270000 	    _QBRAN 1f
 2031      92360000 
 2032 368a 8F270000 	    _BRAN 2f
 2032      AA360000 
 2033 3692 E5280000 	1:  _ADR SWAP 
 2034 3696 3B270000 	    _DOLIT '+'
 2034      2B000000 
 2035 369e 55360000 	    _ADR CHARQ
 2036 36a2 C5280000 	    _ADR DROP  
 2037 36a6 E5280000 		_ADR SWAP 
 2038 36aa 7B250000 	2:  _UNNEST 
 2039              	
 2040              	
 2041              	/**********************************
 2042              	    INT?	( a -- n T | a F )
 2043              	 	parse string  at 'a' for 
 2044              		integer. Push a flag on TOS.
 2045              		integer form:
 2046              			[-]hex_digit+  | 
 2047              			$[-]hex_digit+ |
 2048              			%[-]bin_digit+ | 
 2049              			[-]dec_digit+ 
 2050              	**********************************/
 2051 36ae 90350000 		_HEADER INTQ,4,"INT?"
 2051      04494E54 
 2051      3F00
 2052 36b8 504700BF 		_NEST
 2053              	// save BASE 	
 2054 36bc D12D0000 		_ADR	BASE
 2055 36c0 C1270000 		_ADR	AT
ARM GAS  forth.s 			page 134


 2056 36c4 51280000 		_ADR	TOR
 2057 36c8 3B270000 		_DOLIT	0      // a 0 
 2057      00000000 
 2058 36d0 F9280000 		_ADR	OVER   // a 0 a 
 2059 36d4 292D0000 		_ADR	COUNT  // a 0 a+ cnt 
 2060 36d8 E5280000 		_ADR    SWAP   
 2061 36dc 3B270000 		_DOLIT  '$' 
 2061      24000000 
 2062 36e4 55360000 		_ADR    CHARQ 
 2063 36e8 7B270000 		_QBRAN  0f 
 2063      FC360000 
 2064              	// hexadecimal number 
 2065 36f0 31350000 		_ADR    HEX
 2066 36f4 8F270000 		_BRAN   1f 
 2066      14370000 
 2067 36fc 3B270000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2067      25000000 
 2068 3704 55360000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2069 3708 7B270000 		_QBRAN  2f
 2069      20370000 
 2070 3710 51350000 		_ADR	BIN 
 2071              	1:	// decrement cnt 
 2072 3714 E5280000 	    _ADR	SWAP 
 2073 3718 052A0000 		_ADR	ONEM 
 2074 371c E5280000 		_ADR	SWAP  // -- a 0 cnt- a  
 2075              	2: // check if negative number 
 2076 3720 D5280000 		_ADR    DUPP 
 2077 3724 6F360000 		_ADR    NEGQ 
 2078 3728 51280000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2079 372c D5280000 		_ADR    DUPP 
 2080 3730 BD2A0000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2081 3734 A9290000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2082 3738 7B270000 		_QBRAN  2f  
 2082      4C370000 
 2083 3740 E5280000 		_ADR    SWAP  // -- a 0 a cnt 
 2084 3744 052A0000 		_ADR    ONEM  // -- a 0 a cnt--
 2085 3748 E5280000 		_ADR    SWAP   
 2086 374c E5280000 	2:  _ADR    SWAP 
 2087 3750 51280000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2088 3754 3B270000 		_DOLIT  0
 2088      00000000 
 2089 375c D5280000 		_ADR	DUPP 
 2090 3760 BD2A0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2091 3764 F5350000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2092 3768 C5280000 		_ADR	DROP // a 0 d n 
 2093 376c E5280000 		_ADR	SWAP  // a 0 n d 
 2094 3770 0D280000 		_ADR	RFROM // a 0 n d cnt  
 2095 3774 212C0000 		_ADR	EQUAL // d == cnt ? 
 2096 3778 7B270000 		_QBRAN  5f // digits left, not an integer 
 2096      A8370000 
 2097 3780 0D280000 	2:	_ADR	RFROM  // sign 
 2098 3784 7B270000 		_QBRAN  3f   // positive integer 
 2098      90370000 
 2099 378c B92B0000 		_ADR	NEGAT
 2100              	3:	
 2101 3790 D12A0000 		_ADR	NROT  // n a 0 
 2102 3794 E52A0000 		_ADR	DDROP // n  
ARM GAS  forth.s 			page 135


 2103 3798 3B270000 		_DOLIT  -1    // n -1 
 2103      FFFFFFFF 
 2104 37a0 8F270000 		_BRAN   7f  
 2104      B0370000 
 2105 37a8 0D280000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2106 37ac E52A0000 	    _ADR	DDROP 
 2107              	7: // restore BASE 
 2108 37b0 0D280000 		_ADR	RFROM
 2109 37b4 D12D0000 		_ADR	BASE
 2110 37b8 AD270000 		_ADR	STORE
 2111 37bc 7B250000 		_UNNEST
 2112              	
 2113              	
 2114              	/********************
 2115              	  console I/O
 2116              	********************/
 2117              	
 2118              	/**********************
 2119              	    SPACE	( -- )
 2120              	 	Send the blank 
 2121              		character to 
 2122              		the output device.
 2123              	************************/
 2124 37c0 B2360000 		_HEADER SPACE,5,"SPACE"
 2124      05535041 
 2124      434500BF 
 2125 37cc 504700BF 		_NEST
 2126 37d0 552A0000 		_ADR	BLANK
 2127 37d4 45260000 		_ADR	EMIT
 2128 37d8 7B250000 		_UNNEST
 2129              	
 2130              	/***************************
 2131              	    SPACES	( +n -- )
 2132              	 	Send n spaces to the 
 2133              		output device.
 2134              	****************************/
 2135 37dc C4370000 		_HEADER SPACS,6,"SPACES"
 2135      06535041 
 2135      43455300 
 2136 37e8 504700BF 		_NEST
 2137 37ec 3B270000 		_DOLIT	0
 2137      00000000 
 2138 37f4 B92C0000 		_ADR	MAX
 2139 37f8 51280000 		_ADR	TOR
 2140 37fc 8F270000 		_BRAN	CHAR2
 2140      08380000 
 2141              	CHAR1:
 2142 3804 CD370000 		_ADR	SPACE
 2143              	CHAR2:
 2144 3808 5D270000 		_DONXT	CHAR1
 2144      04380000 
 2145 3810 7B250000 		_UNNEST
 2146              	
 2147              	/***********************
 2148              	    TYPE	( b u -- )
 2149              	 	Output u characters 
 2150              		from b.
ARM GAS  forth.s 			page 136


 2151              	************************/
 2152 3814 E0370000 		_HEADER TYPEE,4,"TYPE"
 2152      04545950 
 2152      450000BF 
 2153 3820 504700BF 		_NEST
 2154 3824 51280000 		_ADR  TOR   // ( a+1 -- R: u )
 2155 3828 8F270000 		_BRAN	TYPE2
 2155      3C380000 
 2156              	TYPE1:  
 2157 3830 292D0000 		_ADR  COUNT
 2158 3834 B5310000 		_ADR TCHAR
 2159 3838 45260000 		_ADR EMIT
 2160              	TYPE2:  
 2161 383c 5D270000 		_DONXT	TYPE1
 2161      30380000 
 2162 3844 C5280000 		_ADR	DROP
 2163 3848 7B250000 		_UNNEST
 2164              	
 2165              	/***************************
 2166              	    CR	  ( -- )
 2167              	 	Output a carriage return
 2168              		and a line feed.
 2169              	****************************/
 2170 384c 18380000 		_HEADER CR,2,"CR"
 2170      02435200 
 2171 3854 504700BF 		_NEST
 2172 3858 3B270000 		_DOLIT	CRR
 2172      0D000000 
 2173 3860 45260000 		_ADR	EMIT
 2174 3864 3B270000 		_DOLIT	LF
 2174      0A000000 
 2175 386c 45260000 		_ADR	EMIT
 2176 3870 7B250000 		_UNNEST
 2177              	
 2178              	/******************************************
 2179              	  do_$	( -- a )
 2180              	  Return the address of a compiled string.
 2181              	  adjust return address to skip over it.
 2182              	hidden word used by compiler. 
 2183              	******************************************/
 2184              	DOSTR:
 2185 3874 504700BF 		_NEST     
 2186              	/* compiled string address is 2 levels deep */
 2187 3878 0D280000 		_ADR	RFROM	// { -- a1 }
 2188 387c 0D280000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2189 3880 D5280000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2190 3884 292D0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2191 3888 99290000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2192 388c 99310000 		_ADR	ALGND	//  end of string
 2193              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2194 3890 51280000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2195 3894 E5280000 		_ADR	SWAP	//  count tugged
 2196 3898 51280000 		_ADR	TOR     //  ( -- a2) is string address
 2197 389c 7B250000 		_UNNEST
 2198              	
 2199              	/******************************************
 2200              	    $"|	( -- a )
ARM GAS  forth.s 			page 137


 2201              	 	Run time routine compiled by _". 
 2202              		Return address of a compiled string.
 2203              	hidden word used by compiler
 2204              	*****************************************/
 2205              	STRQP:
 2206 38a0 504700BF 		_NEST
 2207 38a4 75380000 		_ADR	DOSTR
 2208 38a8 7B250000 		_UNNEST			// force a call to dostr
 2209              	
 2210              	/*******************************
 2211              	    .$	( a -- )
 2212              	 	Run time routine of ." 
 2213              		Output a compiled string.
 2214              	hidden word used by compiler
 2215              	*******************************/
 2216              	DOTST:
 2217 38ac 504700BF 		_NEST
 2218 38b0 292D0000 		_ADR	COUNT // ( -- a+1 c )
 2219 38b4 21380000 		_ADR	TYPEE
 2220 38b8 7B250000 		_UNNEST
 2221              	
 2222              	/**********************
 2223              	    ."|	( -- )
 2224              	 	Run time routine of ." 
 2225              		Output a compiled string.
 2226              	hidden word used by compiler
 2227              	*****************************/
 2228              	DOTQP:
 2229 38bc 504700BF 		_NEST
 2230 38c0 75380000 		_ADR	DOSTR
 2231 38c4 AD380000 		_ADR	DOTST
 2232 38c8 7B250000 		_UNNEST
 2233              	
 2234              	/******************************
 2235              	    .R	  ( n +n -- )
 2236              	 	Display an integer in a 
 2237              		field of n columns, 
 2238              		right justified.
 2239              	*******************************/
 2240 38cc 50380000 		_HEADER DOTR,2,".R"
 2240      022E5200 
 2241 38d4 504700BF 		_NEST
 2242 38d8 51280000 		_ADR	TOR
 2243 38dc FD340000 		_ADR	STRR
 2244 38e0 0D280000 		_ADR	RFROM
 2245 38e4 F9280000 		_ADR	OVER
 2246 38e8 A9290000 		_ADR	SUBB
 2247 38ec E9370000 		_ADR	SPACS
 2248 38f0 21380000 		_ADR	TYPEE
 2249 38f4 7B250000 		_UNNEST
 2250              	
 2251              	/*************************
 2252              	    U.R	 ( u +n -- )
 2253              	 	Display an unsigned 
 2254              		integer in n column, 
 2255              		right justified.
 2256              	***************************/
ARM GAS  forth.s 			page 138


 2257 38f8 D0380000 		_HEADER UDOTR,3,"U.R"
 2257      03552E52 
 2258 3900 504700BF 		_NEST
 2259 3904 E5280000 		_ADR	SWAP 
 2260 3908 D92F0000 		_ADR 	STOD 
 2261 390c BD2A0000 		_ADR	ROT 
 2262 3910 51280000 		_ADR	TOR
 2263 3914 15340000 		_ADR	BDIGS
 2264 3918 81340000 		_ADR	DIGS
 2265 391c DD340000 		_ADR	EDIGS
 2266 3920 0D280000 		_ADR	RFROM
 2267 3924 F9280000 		_ADR	OVER
 2268 3928 A9290000 		_ADR	SUBB
 2269 392c E9370000 		_ADR	SPACS
 2270 3930 21380000 		_ADR	TYPEE
 2271 3934 7B250000 		_UNNEST
 2272              	
 2273              	/************************
 2274              	    U.	  ( u -- )
 2275              	 	Display an unsigned 
 2276              		integer in free format.
 2277              	***************************/
 2278 3938 FC380000 		_HEADER UDOT,2,"U."
 2278      02552E00 
 2279 3940 504700BF 		_NEST
 2280 3944 D92F0000 		_ADR 	STOD 
 2281 3948 15340000 		_ADR	BDIGS
 2282 394c 81340000 		_ADR	DIGS
 2283 3950 DD340000 		_ADR	EDIGS
 2284 3954 CD370000 		_ADR	SPACE
 2285 3958 21380000 		_ADR	TYPEE
 2286 395c 7B250000 		_UNNEST
 2287              	
 2288              	/************************
 2289              	    .	   ( w -- )
 2290              	 	Display an integer 
 2291              		in free format, 
 2292              		preceeded by a space.
 2293              	**************************/
 2294 3960 3C390000 		_HEADER DOT,1,"."
 2294      012E00BF 
 2295 3968 504700BF 		_NEST
 2296 396c D12D0000 		_ADR	BASE
 2297 3970 C1270000 		_ADR	AT
 2298 3974 3B270000 		_DOLIT 10
 2298      0A000000 
 2299 397c 41290000 		_ADR	XORR			// ?decimal
 2300 3980 7B270000 		_QBRAN	DOT1
 2300      90390000 
 2301 3988 41390000 		_ADR	UDOT
 2302 398c 7B250000 		_UNNEST			// no,display unsigned
 2303              	DOT1:
 2304 3990 FD340000 	    _ADR	STRR
 2305 3994 CD370000 		_ADR	SPACE
 2306 3998 21380000 		_ADR	TYPEE
 2307 399c 7B250000 		_UNNEST			// yes, display signed
 2308              	
ARM GAS  forth.s 			page 139


 2309              	/*************************
 2310              	   D. ( d -- )
 2311              	   display double integer 
 2312              	**************************/
 2313 39a0 64390000 		_HEADER DDOT,2,"D."
 2313      02442E00 
 2314 39a8 504700BF 		_NEST 
 2315 39ac D5280000 		_ADR DUPP 
 2316 39b0 51280000 		_ADR TOR 
 2317 39b4 412B0000 		_ADR DABS 
 2318 39b8 15340000 		_ADR BDIGS
 2319 39bc 81340000 		_ADR DIGS 
 2320 39c0 0D280000 		_ADR RFROM
 2321 39c4 B5340000 		_ADR SIGN 
 2322 39c8 DD340000 		_ADR EDIGS
 2323 39cc CD370000 		_ADR SPACE 
 2324 39d0 21380000 		_ADR TYPEE 
 2325 39d4 7B250000 		_UNNEST 
 2326              	
 2327              	
 2328              	/***********************
 2329              		H. ( w -- )
 2330              		display integer 
 2331              		in hexadecimal 
 2332              	*********************/
 2333 39d8 A4390000 		_HEADER HDOT,2,"H."
 2333      02482E00 
 2334 39e0 504700BF 		_NEST 
 2335 39e4 D12D0000 		_ADR BASE
 2336 39e8 C1270000 		_ADR AT 
 2337 39ec E5280000 		_ADR SWAP
 2338 39f0 31350000 		_ADR HEX
 2339 39f4 3B270000 		_DOLIT 0 
 2339      00000000 
 2340 39fc 15340000 		_ADR BDIGS
 2341 3a00 81340000 		_ADR DIGS
 2342 3a04 DD340000 		_ADR EDIGS
 2343 3a08 CD370000 		_ADR SPACE
 2344 3a0c 3B270000 		_DOLIT '$'
 2344      24000000 
 2345 3a14 45260000 		_ADR EMIT 
 2346 3a18 21380000 		_ADR TYPEE
 2347 3a1c D12D0000 		_ADR BASE
 2348 3a20 AD270000 		_ADR STORE  
 2349 3a24 7B250000 		_UNNEST 
 2350              	
 2351              	
 2352              	/***********************
 2353              	    ?	   ( a -- )
 2354              	 	Display the contents
 2355              		in a memory cell.
 2356              	*************************/
 2357 3a28 DC390000 		_HEADER QUEST,1,"?"
 2357      013F00BF 
 2358 3a30 504700BF 		_NEST
 2359 3a34 C1270000 		_ADR	AT
 2360 3a38 69390000 		_ADR	DOT
ARM GAS  forth.s 			page 140


 2361 3a3c 7B250000 		_UNNEST
 2362              	
 2363              	/**************
 2364              	  Parsing
 2365              	***************/
 2366              	
 2367              	/*********************************************
 2368              	    parse	( b u c -- b u delta //  string> )
 2369              	 	Scan word delimited by c. 
 2370              		Return found string and its offset.
 2371              	hidden word used by PARSE
 2372              	**********************************************/
 2373              	PARS:
 2374 3a40 504700BF 		_NEST
 2375 3a44 DD2D0000 		_ADR	TEMP
 2376 3a48 AD270000 		_ADR	STORE
 2377 3a4c F9280000 		_ADR	OVER
 2378 3a50 51280000 		_ADR	TOR
 2379 3a54 D5280000 		_ADR	DUPP
 2380 3a58 7B270000 		_QBRAN	PARS8
 2380      543B0000 
 2381 3a60 052A0000 		_ADR	ONEM
 2382 3a64 DD2D0000 		_ADR	TEMP
 2383 3a68 C1270000 		_ADR	AT
 2384 3a6c 552A0000 		_ADR	BLANK
 2385 3a70 212C0000 		_ADR	EQUAL
 2386 3a74 7B270000 		_QBRAN	PARS3
 2386      C83A0000 
 2387 3a7c 51280000 		_ADR	TOR
 2388              	PARS1:
 2389 3a80 552A0000 		_ADR	BLANK
 2390 3a84 F9280000 		_ADR	OVER
 2391 3a88 E1270000 		_ADR	CAT	 // skip leading blanks 
 2392 3a8c A9290000 		_ADR	SUBB
 2393 3a90 09290000 		_ADR	ZLESS
 2394 3a94 A52B0000 		_ADR	INVER
 2395 3a98 7B270000 		_QBRAN	PARS2
 2395      C43A0000 
 2396 3aa0 F5290000 		_ADR	ONEP
 2397 3aa4 5D270000 		_DONXT	PARS1
 2397      803A0000 
 2398 3aac 0D280000 		_ADR	RFROM
 2399 3ab0 C5280000 		_ADR	DROP
 2400 3ab4 3B270000 		_DOLIT	0
 2400      00000000 
 2401 3abc D5280000 		_ADR	DUPP
 2402 3ac0 7B250000 		_UNNEST
 2403              	PARS2:
 2404 3ac4 0D280000 		_ADR	RFROM
 2405              	PARS3:
 2406 3ac8 F9280000 		_ADR	OVER
 2407 3acc E5280000 		_ADR	SWAP
 2408 3ad0 51280000 		_ADR	TOR
 2409              	PARS4:
 2410 3ad4 DD2D0000 		_ADR	TEMP
 2411 3ad8 C1270000 		_ADR	AT
 2412 3adc F9280000 		_ADR	OVER
ARM GAS  forth.s 			page 141


 2413 3ae0 E1270000 		_ADR	CAT
 2414 3ae4 A9290000 		_ADR	SUBB // scan for delimiter
 2415 3ae8 DD2D0000 		_ADR	TEMP
 2416 3aec C1270000 		_ADR	AT
 2417 3af0 552A0000 		_ADR	BLANK
 2418 3af4 212C0000 		_ADR	EQUAL
 2419 3af8 7B270000 		_QBRAN	PARS5
 2419      043B0000 
 2420 3b00 09290000 		_ADR	ZLESS
 2421              	PARS5:
 2422 3b04 7B270000 		_QBRAN	PARS6
 2422      283B0000 
 2423 3b0c F5290000 		_ADR	ONEP
 2424 3b10 5D270000 		_DONXT	PARS4
 2424      D43A0000 
 2425 3b18 D5280000 		_ADR	DUPP
 2426 3b1c 51280000 		_ADR	TOR
 2427 3b20 8F270000 		_BRAN	PARS7
 2427      3C3B0000 
 2428              	PARS6:
 2429 3b28 0D280000 		_ADR	RFROM
 2430 3b2c C5280000 		_ADR	DROP
 2431 3b30 D5280000 		_ADR	DUPP
 2432 3b34 F5290000 		_ADR	ONEP
 2433 3b38 51280000 		_ADR	TOR
 2434              	PARS7:
 2435 3b3c F9280000 		_ADR	OVER
 2436 3b40 A9290000 		_ADR	SUBB
 2437 3b44 0D280000 		_ADR	RFROM
 2438 3b48 0D280000 		_ADR	RFROM
 2439 3b4c A9290000 		_ADR	SUBB
 2440 3b50 7B250000 		_UNNEST
 2441              	PARS8:
 2442 3b54 F9280000 		_ADR	OVER
 2443 3b58 0D280000 		_ADR	RFROM
 2444 3b5c A9290000 		_ADR	SUBB
 2445 3b60 7B250000 		_UNNEST
 2446              	
 2447              	/************************************
 2448              	    PARSE	( c -- b u //  string> )
 2449              	 	Scan input stream and return 
 2450              		counted string delimited by c.
 2451              	************************************/
 2452 3b64 2C3A0000 		_HEADER PARSE,5,"PARSE"
 2452      05504152 
 2452      534500BF 
 2453 3b70 504700BF 		_NEST
 2454 3b74 51280000 		_ADR	TOR
 2455 3b78 85320000 		_ADR	TIB
 2456 3b7c 092E0000 		_ADR	INN
 2457 3b80 C1270000 		_ADR	AT
 2458 3b84 99290000 		_ADR	PLUS			// current input buffer pointer
 2459 3b88 212E0000 		_ADR	NTIB
 2460 3b8c C1270000 		_ADR	AT
 2461 3b90 092E0000 		_ADR	INN
 2462 3b94 C1270000 		_ADR	AT
 2463 3b98 A9290000 		_ADR	SUBB			// remaining count
ARM GAS  forth.s 			page 142


 2464 3b9c 0D280000 		_ADR	RFROM
 2465 3ba0 413A0000 		_ADR	PARS
 2466 3ba4 092E0000 		_ADR	INN
 2467 3ba8 E12C0000 		_ADR	PSTOR
 2468 3bac 7B250000 		_UNNEST
 2469              	
 2470              	/*******************************
 2471              	    .(	  ( -- )
 2472              	 	Output following string 
 2473              		up to next ) .
 2474              	******************************/
 2475 3bb0 683B0000 		_HEADER DOTPR,2,".("
 2475      022E2800 
 2476 3bb8 504700BF 		_NEST
 2477 3bbc 3B270000 		_DOLIT	')'
 2477      29000000 
 2478 3bc4 713B0000 		_ADR	PARSE
 2479 3bc8 21380000 		_ADR	TYPEE
 2480 3bcc 7B250000 		_UNNEST
 2481              	
 2482              	/************************
 2483              	    (	   ( -- )
 2484              	 	Ignore following 
 2485              		string up to next )
 2486              		A comment.
 2487              	************************/
 2488 3bd0 B43B0000 		_HEADER PAREN,IMEDD+1,"("
 2488      812800BF 
 2489 3bd8 504700BF 		_NEST
 2490 3bdc 3B270000 		_DOLIT	')'
 2490      29000000 
 2491 3be4 713B0000 		_ADR	PARSE
 2492 3be8 E52A0000 		_ADR	DDROP
 2493 3bec 7B250000 		_UNNEST
 2494              	
 2495              	/*******************
 2496              	    \	   ( -- )
 2497              	 	Ignore following 
 2498              		text till the 
 2499              		end of line.
 2500              	********************/
 2501 3bf0 D43B0000 		_HEADER BKSLA,IMEDD+1,"\\"
 2501      815C00BF 
 2502 3bf8 504700BF 		_NEST
 2503 3bfc 212E0000 		_ADR	NTIB
 2504 3c00 C1270000 		_ADR	AT
 2505 3c04 092E0000 		_ADR	INN
 2506 3c08 AD270000 		_ADR	STORE
 2507 3c0c 7B250000 		_UNNEST
 2508              	
 2509              	/******************************
 2510              	    CHAR	( -- c )
 2511              	 	Parse next word and
 2512              		return its first character.
 2513              	*******************************/
 2514 3c10 F43B0000 		_HEADER CHAR,4,"CHAR"
 2514      04434841 
ARM GAS  forth.s 			page 143


 2514      520000BF 
 2515 3c1c 504700BF 		_NEST
 2516 3c20 552A0000 		_ADR	BLANK
 2517 3c24 713B0000 		_ADR	PARSE
 2518 3c28 C5280000 		_ADR	DROP
 2519 3c2c E1270000 		_ADR	CAT
 2520 3c30 7B250000 		_UNNEST
 2521              	
 2522              	/**********************************
 2523              		[CHAR] ( -- c )
 2524              		immediate version of CHAR 
 2525              	**********************************/
 2526 3c34 143C0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2526      C65B4348 
 2526      41525D00 
 2527 3c40 504700BF 		_NEST 
 2528 3c44 1D3C0000 		_ADR CHAR
 2529 3c48 69430000 		_ADR LITER 
 2530 3c4c 7B250000 		_UNNEST 
 2531              	
 2532              	/**********************************
 2533              	    WORD	( c -- a //  string> )
 2534              	 	Parse a word from input stream
 2535              		and copy it to code dictionary.
 2536              	***********************************/
 2537 3c50 383C0000 		_HEADER WORDD,4,"WORD"
 2537      04574F52 
 2537      440000BF 
 2538 3c5c 504700BF 		_NEST
 2539 3c60 713B0000 		_ADR	PARSE
 2540 3c64 4D320000 		_ADR	HERE
 2541 3c68 352A0000 		_ADR	CELLP
 2542 3c6c 55330000 		_ADR	PACKS
 2543 3c70 7B250000 		_UNNEST
 2544              	
 2545              	/********************************
 2546              	    TOKEN	( -- a //  string> )
 2547              	 	Parse a word from input 
 2548              		stream and copy it to 
 2549              		name dictionary.
 2550              	*********************************/
 2551 3c74 543C0000 		_HEADER TOKEN,5,"TOKEN"
 2551      05544F4B 
 2551      454E00BF 
 2552 3c80 504700BF 		_NEST
 2553 3c84 552A0000 		_ADR	BLANK
 2554 3c88 5D3C0000 		_ADR	WORDD
 2555 3c8c 753E0000 		_ADR	UPPER 
 2556 3c90 7B250000 		_UNNEST
 2557              	
 2558              	/**********************
 2559              	  Dictionary search
 2560              	***********************/
 2561              	
 2562              	/*************************
 2563              	    NAME>	( na -- ca )
 2564              	 	Return a code address
ARM GAS  forth.s 			page 144


 2565              		given a name address.
 2566              	**************************/
 2567 3c94 783C0000 		_HEADER NAMET,5,"NAME>"
 2567      054E414D 
 2567      453E00BF 
 2568 3ca0 504700BF 		_NEST
 2569 3ca4 292D0000 		_ADR	COUNT
 2570 3ca8 3B270000 		_DOLIT	0x1F
 2570      1F000000 
 2571 3cb0 19290000 		_ADR	ANDD
 2572 3cb4 99290000 		_ADR	PLUS
 2573 3cb8 99310000 		_ADR	ALGND
 2574 3cbc 7B250000 		_UNNEST
 2575              	
 2576              	/***************************************
 2577              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2578              	 	Compare u bytes in two strings. 
 2579              		Return 0 if identical.
 2580              	
 2581              	  Picatout 2020-12-01, 
 2582              	    Because of problem with .align 
 2583              		directive that doesn't fill 
 2584              		with zero's I had to change 
 2585              		the "SAME?" and "FIND" 
 2586              	 	words  to do a byte by byte comparison. 
 2587              	****************************************/
 2588 3cc0 983C0000 		_HEADER SAMEQ,5,"SAME?"
 2588      0553414D 
 2588      453F00BF 
 2589 3ccc 504700BF 		_NEST
 2590 3cd0 51280000 		_ADR	TOR
 2591 3cd4 8F270000 		_BRAN	SAME2
 2591      183D0000 
 2592              	SAME1:
 2593 3cdc F9280000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2594 3ce0 3D280000 		_ADR	RAT   // a1 a2 a1 u 
 2595 3ce4 99290000 		_ADR	PLUS  // a1 a2 a1+u 
 2596 3ce8 E1270000 		_ADR	CAT	   // a1 a2 c1    		
 2597 3cec F9280000 		_ADR	OVER  // a1 a2 c1 a2 
 2598 3cf0 3D280000 		_ADR	RAT    
 2599 3cf4 99290000 		_ADR	PLUS    
 2600 3cf8 E1270000 		_ADR	CAT	  // a1 a2 c1 c2
 2601 3cfc A9290000 		_ADR	SUBB  
 2602 3d00 A92A0000 		_ADR	QDUP
 2603 3d04 7B270000 		_QBRAN	SAME2
 2603      183D0000 
 2604 3d0c 0D280000 		_ADR	RFROM
 2605 3d10 C5280000 		_ADR	DROP
 2606 3d14 7B250000 		_UNNEST	// strings not equal
 2607              	SAME2:
 2608 3d18 5D270000 		_DONXT	SAME1
 2608      DC3C0000 
 2609 3d20 3B270000 		_DOLIT	0
 2609      00000000 
 2610 3d28 7B250000 		_UNNEST	// strings equal
 2611              	
 2612              	/***********************************
ARM GAS  forth.s 			page 145


 2613              	    FIND	( a na -- ca na | a F )
 2614              	 	Search a vocabulary for a string.
 2615              		Return ca and na if succeeded.
 2616              	hidden word used by NAME?
 2617              	
 2618              	  Picatout 2020-12-01,  
 2619              		 Modified from original. 
 2620              	   See comment for word "SAME?" 
 2621              	************************************/
 2622              	FIND:
 2623 3d2c 504700BF 		_NEST
 2624 3d30 E5280000 		_ADR	SWAP			// na a	
 2625 3d34 292D0000 		_ADR	COUNT			// na a+1 count
 2626 3d38 D5280000 		_ADR	DUPP 
 2627 3d3c DD2D0000 		_ADR	TEMP
 2628 3d40 AD270000 		_ADR	STORE			// na a+1 count 
 2629 3d44 51280000 		_ADR  TOR		// na a+1  R: count  
 2630 3d48 E5280000 		_ADR	SWAP			// a+1 na
 2631              	FIND1:
 2632 3d4c D5280000 		_ADR	DUPP			// a+1 na na
 2633 3d50 7B270000 		_QBRAN	FIND6	// end of vocabulary
 2633      A43D0000 
 2634 3d58 D5280000 		_ADR	DUPP			// a+1 na na
 2635 3d5c E1270000 		_ADR	CAT			// a+1 na name1
 2636 3d60 3B270000 		_DOLIT	MASKK
 2636      1FFFFFFF 
 2637 3d68 19290000 		_ADR	ANDD
 2638 3d6c 3D280000 		_ADR	RAT			// a+1 na name1 count 
 2639 3d70 41290000 		_ADR	XORR			// a+1 na,  same length?
 2640 3d74 7B270000 		_QBRAN	FIND2
 2640      8C3D0000 
 2641 3d7c 452A0000 		_ADR	CELLM			// a+1 la
 2642 3d80 C1270000 		_ADR	AT			// a+1 next_na
 2643 3d84 8F270000 		_BRAN	FIND1			// try next word
 2643      4C3D0000 
 2644              	FIND2:   
 2645 3d8c F5290000 		_ADR	ONEP			// a+1 na+1
 2646 3d90 DD2D0000 		_ADR	TEMP
 2647 3d94 C1270000 		_ADR	AT			// a+1 na+1 count
 2648 3d98 CD3C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2649              	FIND3:	
 2650 3d9c 8F270000 		_BRAN	FIND4
 2650      BC3D0000 
 2651              	FIND6:	
 2652 3da4 0D280000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2653 3da8 C5280000 		_ADR	DROP			// a+1 0
 2654 3dac E5280000 		_ADR	SWAP			// 0 a+1
 2655 3db0 052A0000 		_ADR	ONEM			// 0 a
 2656 3db4 E5280000 		_ADR	SWAP			// a 0 
 2657 3db8 7B250000 		_UNNEST			// return without a match
 2658              	FIND4:	
 2659 3dbc 7B270000 		_QBRAN	FIND5			// a+1 na+1
 2659      D83D0000 
 2660 3dc4 052A0000 		_ADR	ONEM			// a+1 na
 2661 3dc8 452A0000 		_ADR	CELLM			// a+4 la
 2662 3dcc C1270000 		_ADR	AT			// a+1 next_na
 2663 3dd0 8F270000 		_BRAN	FIND1			// compare next name
ARM GAS  forth.s 			page 146


 2663      4C3D0000 
 2664              	FIND5:	
 2665 3dd8 0D280000 		_ADR	RFROM			// a+1 na+1 count
 2666 3ddc C5280000 		_ADR	DROP			// a+1 na+1
 2667 3de0 E5280000 		_ADR	SWAP			// na+1 a+1
 2668 3de4 C5280000 		_ADR	DROP			// na+1
 2669 3de8 052A0000 		_ADR	ONEM			// na
 2670 3dec D5280000 		_ADR	DUPP			// na na
 2671 3df0 A13C0000 		_ADR	NAMET			// na ca
 2672 3df4 E5280000 		_ADR	SWAP			// ca na
 2673 3df8 7B250000 		_UNNEST			//  return with a match
 2674              	
 2675              	/********************************
 2676              	    NAME?	( a -- ca na | a F )
 2677              	 	Search all context vocabularies 
 2678              		for a string.
 2679              	***********************************/
 2680 3dfc C43C0000 		_HEADER NAMEQ,5,"NAME?"
 2680      054E414D 
 2680      453F00BF 
 2681 3e08 504700BF 		_NEST
 2682 3e0c 652E0000 		_ADR	CNTXT
 2683 3e10 C1270000 		_ADR	AT
 2684 3e14 2D3D0000 		_ADR	FIND
 2685 3e18 7B250000 		_UNNEST
 2686              	
 2687              	/********************
 2688              	  console input
 2689              	********************/
 2690              	
 2691              	/****************************
 2692              		ASCIZ ( a -- a+ )
 2693              		convert counted string to 
 2694              		null terminated string 
 2695              		in pad.
 2696              	*****************************/
 2697 3e1c 003E0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2697      05415343 
 2697      495A00BF 
 2698 3e28 504700BF 		_NEST 
 2699 3e2c 292D0000 		_ADR COUNT
 2700 3e30 D5280000 		_ADR DUPP
 2701 3e34 51280000 		_ADR TOR 
 2702 3e38 65320000 		_ADR PAD 
 2703 3e3c E5280000 		_ADR SWAP
 2704 3e40 ED320000 		_ADR MOVE  
 2705 3e44 65320000 		_ADR PAD 
 2706 3e48 0D280000 		_ADR RFROM
 2707 3e4c 99290000 		_ADR PLUS 
 2708 3e50 3B270000 		_DOLIT 0 
 2708      00000000 
 2709 3e58 E5280000 		_ADR SWAP  
 2710 3e5c CD270000 		_ADR CSTOR
 2711 3e60 65320000 		_ADR PAD   
 2712 3e64 7B250000 		_UNNEST 
 2713              	
 2714              	/***********************
ARM GAS  forth.s 			page 147


 2715              		UPPER (cstring -- cstring )
 2716              		convert to upper case in situ
 2717              	*******************************/
 2718 3e68 203E0000 		_HEADER UPPER,5,"UPPER"
 2718      05555050 
 2718      455200BF 
 2719 3e74 504700BF 		_NEST 
 2720 3e78 D5280000 		_ADR DUPP 
 2721 3e7c 51280000 		_ADR TOR 
 2722 3e80 292D0000 		_ADR COUNT
 2723 3e84 3B270000 		_DOLIT 0x1f
 2723      1F000000 
 2724 3e8c 19290000 		_ADR ANDD
 2725 3e90 51280000 		_ADR TOR 
 2726 3e94 8F270000 		_BRAN 3f
 2726      E83E0000 
 2727 3e9c D5280000 	1:  _ADR DUPP 
 2728 3ea0 292D0000 		_ADR COUNT 
 2729 3ea4 D5280000 		_ADR DUPP 
 2730 3ea8 3B270000 		_DOLIT 'a'-1
 2730      60000000 
 2731 3eb0 A12C0000 		_ADR GREAT
 2732 3eb4 7B270000 		_QBRAN 2f 
 2732      E03E0000 
 2733 3ebc D5280000 		_ADR DUPP 
 2734 3ec0 3B270000 		_DOLIT 'z'+1 
 2734      7B000000 
 2735 3ec8 712C0000 		_ADR LESS 
 2736 3ecc 7B270000 		_QBRAN 2f 
 2736      E03E0000 
 2737 3ed4 3B270000 		_DOLIT 0x5f  
 2737      5F000000 
 2738 3edc 19290000 		_ADR ANDD
 2739 3ee0 BD2A0000 	2:	_ADR ROT
 2740 3ee4 CD270000 		_ADR CSTOR
 2741 3ee8 5D270000 	3:  _DONXT 1b
 2741      9C3E0000 
 2742 3ef0 C5280000 		_ADR DROP 
 2743 3ef4 0D280000 		_ADR RFROM
 2744 3ef8 7B250000 		_UNNEST 
 2745              	
 2746              	/**************************************
 2747              	   BKSP  ( bot eot cur -- bot eot cur )
 2748              	   Move cursor left by one character.
 2749              	hidden word used by KTAP
 2750              	***************************************/
 2751              	BKSP:
 2752 3efc 504700BF 		_NEST
 2753 3f00 51280000 		_ADR	TOR
 2754 3f04 F9280000 		_ADR	OVER
 2755 3f08 0D280000 		_ADR	RFROM
 2756 3f0c E5280000 		_ADR	SWAP
 2757 3f10 F9280000 		_ADR	OVER
 2758 3f14 41290000 		_ADR	XORR
 2759 3f18 7B270000 		_QBRAN	BACK1
 2759      443F0000 
 2760 3f20 3B270000 		_DOLIT	BKSPP
ARM GAS  forth.s 			page 148


 2760      08000000 
 2761 3f28 45260000 		_ADR	EMIT
 2762 3f2c 052A0000 		_ADR	ONEM
 2763 3f30 552A0000 		_ADR	BLANK
 2764 3f34 45260000 		_ADR	EMIT
 2765 3f38 3B270000 		_DOLIT	BKSPP
 2765      08000000 
 2766 3f40 45260000 		_ADR	EMIT
 2767              	BACK1:
 2768 3f44 7B250000 		  _UNNEST
 2769              	
 2770              	/****************************************
 2771              	   TAP	 ( bot eot cur c -- bot eot cur )
 2772              	   Accept and echo the key stroke 
 2773              	   and bump the cursor.
 2774              	hidden word used by KTAP 
 2775              	****************************************/
 2776              	TAP:
 2777 3f48 504700BF 		_NEST
 2778 3f4c D5280000 		_ADR	DUPP
 2779 3f50 45260000 		_ADR	EMIT
 2780 3f54 F9280000 		_ADR	OVER
 2781 3f58 CD270000 		_ADR	CSTOR
 2782 3f5c F5290000 		_ADR	ONEP
 2783 3f60 7B250000 		_UNNEST
 2784              	
 2785              	
 2786              	/*******************************************
 2787              	    kTAP	( bot eot cur c -- bot eot cur )
 2788              	 	Process a key stroke, CR or backspace.
 2789              	hidden word used by ACCEPT 
 2790              	*******************************************/
 2791              	KTAP:
 2792              	TTAP:
 2793 3f64 504700BF 		_NEST
 2794 3f68 D5280000 		_ADR	DUPP
 2795 3f6c 3B270000 		_DOLIT	CRR
 2795      0D000000 
 2796 3f74 41290000 		_ADR	XORR
 2797 3f78 7B270000 		_QBRAN  KTAP2
 2797      A83F0000 
 2798 3f80 3B270000 		_DOLIT	BKSPP
 2798      08000000 
 2799 3f88 41290000 		_ADR	XORR
 2800 3f8c 7B270000 		_QBRAN	KTAP1
 2800      A03F0000 
 2801 3f94 552A0000 		_ADR	BLANK
 2802 3f98 493F0000 		_ADR	TAP
 2803 3f9c 7B250000 		_UNNEST
 2804              	//	.word	0			// patch
 2805              	KTAP1:
 2806 3fa0 FD3E0000 		_ADR	BKSP
 2807 3fa4 7B250000 		_UNNEST
 2808              	KTAP2:
 2809 3fa8 C5280000 		_ADR	DROP
 2810 3fac E5280000 		_ADR	SWAP
 2811 3fb0 C5280000 		_ADR	DROP
ARM GAS  forth.s 			page 149


 2812 3fb4 D5280000 		_ADR	DUPP
 2813 3fb8 7B250000 		_UNNEST
 2814              	
 2815              	/************************************
 2816              	    ACCEPT	( b u -- b u )
 2817              	 	Accept characters to input 
 2818              		buffer. Return with actual count.
 2819              	*************************************/
 2820 3fbc 6C3E0000 		_HEADER ACCEP,6,"ACCEPT"
 2820      06414343 
 2820      45505400 
 2821 3fc8 504700BF 		_NEST
 2822 3fcc F9280000 		_ADR	OVER
 2823 3fd0 99290000 		_ADR	PLUS
 2824 3fd4 F9280000 		_ADR	OVER
 2825              	ACCP1:
 2826 3fd8 0D2B0000 		_ADR	DDUP
 2827 3fdc 41290000 		_ADR	XORR
 2828 3fe0 7B270000 		_QBRAN	ACCP4
 2828      20400000 
 2829 3fe8 21260000 		_ADR	KEY
 2830 3fec D5280000 		_ADR	DUPP
 2831 3ff0 552A0000 		_ADR	BLANK
 2832 3ff4 3B270000 		_DOLIT 127
 2832      7F000000 
 2833 3ffc FD2E0000 		_ADR	WITHI
 2834 4000 7B270000 		_QBRAN	ACCP2
 2834      14400000 
 2835 4008 493F0000 		_ADR	TAP
 2836 400c 8F270000 		_BRAN	ACCP3
 2836      18400000 
 2837              	ACCP2:
 2838 4014 653F0000 		_ADR	KTAP
 2839              	ACCP3:	  
 2840 4018 8F270000 		_BRAN	ACCP1
 2840      D83F0000 
 2841              	ACCP4:
 2842 4020 C5280000 		_ADR	DROP
 2843 4024 F9280000 		_ADR	OVER
 2844 4028 A9290000 		_ADR	SUBB
 2845 402c 7B250000 		_UNNEST
 2846              	
 2847              	/*****************************
 2848              	    QUERY	( -- )
 2849              	 	Accept input stream 
 2850              		to terminal input buffer.
 2851              	******************************/
 2852 4030 C03F0000 		_HEADER QUERY,5,"QUERY"
 2852      05515545 
 2852      525900BF 
 2853 403c 504700BF 		_NEST
 2854 4040 85320000 		_ADR	TIB
 2855 4044 3B270000 		_DOLIT 80
 2855      50000000 
 2856 404c C93F0000 		_ADR	ACCEP
 2857 4050 212E0000 		_ADR	NTIB
 2858 4054 AD270000 		_ADR	STORE
ARM GAS  forth.s 			page 150


 2859 4058 C5280000 		_ADR	DROP
 2860 405c 3B270000 		_DOLIT	0
 2860      00000000 
 2861 4064 092E0000 		_ADR	INN
 2862 4068 AD270000 		_ADR	STORE
 2863 406c 7B250000 		_UNNEST
 2864              	
 2865              	/********************
 2866              	  Error handling
 2867              	********************/
 2868              	
 2869              	/*********************
 2870              	    ABORT	( a -- )
 2871              	 	Reset data stack 
 2872              		and jump to QUIT.
 2873              	**********************/
 2874 4070 34400000 		_HEADER ABORT,5,"ABORT"
 2874      0541424F 
 2874      525400BF 
 2875 407c 504700BF 		_NEST
 2876              	ABORT1:
 2877 4080 CD370000 		_ADR	SPACE
 2878 4084 292D0000 		_ADR	COUNT
 2879 4088 21380000 		_ADR	TYPEE
 2880 408c 3B270000 		_DOLIT	0X3F
 2880      3F000000 
 2881 4094 45260000 		_ADR	EMIT
 2882 4098 55380000 		_ADR	CR
 2883 409c 05420000 		_ADR	PRESE
 2884 40a0 8F270000 		_BRAN	QUIT
 2884      24420000 
 2885              	
 2886              	/*******************************
 2887              	    _abort"	( f -- )
 2888              	 	Run time routine of ABORT"
 2889              		Abort with a message.
 2890              	hidden used by compiler 
 2891              	********************************/
 2892              	ABORQ:
 2893 40a8 504700BF 		_NEST
 2894 40ac 75380000 		_ADR	DOSTR
 2895 40b0 E5280000 		_ADR	SWAP 
 2896 40b4 7B270000 		_QBRAN	1f	// text flag
 2896      C4400000 
 2897 40bc 8F270000 		_BRAN	ABORT1
 2897      80400000 
 2898              	1:
 2899 40c4 C5280000 		_ADR	DROP
 2900 40c8 7B250000 		_UNNEST			// drop error
 2901              	
 2902              	/************************
 2903              	  The text interpreter
 2904              	************************/
 2905              	
 2906              	/***************************
 2907              	    $INTERPRET  ( a -- )
 2908              	 	Interpret a word. 
ARM GAS  forth.s 			page 151


 2909              		If failed, try to 
 2910              		convert it to an integer.
 2911              	******************************/
 2912 40cc 74400000 		_HEADER INTER,10,"$INTERPRET"
 2912      0A24494E 
 2912      54455250 
 2912      52455400 
 2913 40dc 504700BF 		_NEST
 2914 40e0 093E0000 		_ADR	NAMEQ
 2915 40e4 A92A0000 		_ADR	QDUP	// ?defined
 2916 40e8 7B270000 		_QBRAN	INTE1
 2916      1C410000 
 2917 40f0 C1270000 		_ADR	AT
 2918 40f4 3B270000 		_DOLIT	COMPO
 2918      40000000 
 2919 40fc 19290000 		_ADR	ANDD	// ?compile only lexicon bits
 2920 4100 A9400000 		_ABORQ	13," compile only"
 2920      0D20636F 
 2920      6D70696C 
 2920      65206F6E 
 2920      6C7900BF 
 2921 4114 51270000 		_ADR	EXECU
 2922 4118 7B250000 		_UNNEST			// execute defined word
 2923              	INTE1:
 2924 411c D9200000 		_ADR	NUMBER 
 2925 4120 7B270000 		_QBRAN	INTE2
 2925      2C410000 
 2926 4128 7B250000 		_UNNEST
 2927              	INTE2:
 2928 412c 7D400000 		_ADR	ABORT	// error
 2929              	
 2930              	/******************************
 2931              	    [	   ( -- )
 2932              	 	Start the text interpreter.
 2933              	*******************************/
 2934 4130 D0400000 		_HEADER LBRAC,IMEDD+1,"["
 2934      815B00BF 
 2935 4138 504700BF 		_NEST
 2936 413c 3B270000 		_DOLIT	INTER
 2936      DC400000 
 2937 4144 392E0000 		_ADR	TEVAL
 2938 4148 AD270000 		_ADR	STORE
 2939 414c 7B250000 		_UNNEST
 2940              	
 2941              	/**********************
 2942              	    .OK	 ( -- )
 2943              	 	Display "ok" only 
 2944              		while interpreting.
 2945              	************************/
 2946 4150 34410000 		_HEADER DOTOK,3,".OK"
 2946      032E4F4B 
 2947 4158 504700BF 		_NEST
 2948 415c 3B270000 		_DOLIT	INTER
 2948      DC400000 
 2949 4164 392E0000 		_ADR	TEVAL
 2950 4168 C1270000 		_ADR	AT
 2951 416c 212C0000 		_ADR	EQUAL
ARM GAS  forth.s 			page 152


 2952 4170 7B270000 		_QBRAN	DOTO1
 2952      80410000 
 2953 4178 BD380000 		_DOTQP	3," ok"
 2953      03206F6B 
 2954              	DOTO1:
 2955 4180 55380000 		_ADR	CR
 2956 4184 7B250000 		_UNNEST
 2957              	
 2958              	/*************************
 2959              	    ?STACK	( -- )
 2960              	 	Abort if the data 
 2961              		stack underflows.
 2962              	************************/
 2963 4188 54410000 		_HEADER QSTAC,6,"?STACK"
 2963      063F5354 
 2963      41434B00 
 2964 4194 504700BF 		_NEST
 2965 4198 01320000 		_ADR	DEPTH
 2966 419c 09290000 		_ADR	ZLESS	// check only for underflow
 2967 41a0 A9400000 		_ABORQ	9,"underflow"
 2967      09756E64 
 2967      6572666C 
 2967      6F7700BF 
 2968 41b0 7B250000 		_UNNEST
 2969              	
 2970              	/*******************
 2971              	    EVAL	( -- )
 2972              	 	Interpret the 
 2973              		input stream.
 2974              	*******************/
 2975 41b4 8C410000 		_HEADER EVAL,4,"EVAL"
 2975      04455641 
 2975      4C0000BF 
 2976 41c0 504700BF 		_NEST
 2977              	EVAL1:
 2978 41c4 813C0000 	    _ADR	TOKEN
 2979 41c8 D5280000 		_ADR	DUPP
 2980 41cc E1270000 		_ADR	CAT	// ?input stream empty
 2981 41d0 7B270000 		_QBRAN	EVAL2
 2981      EC410000 
 2982 41d8 392E0000 		_ADR	TEVAL
 2983 41dc 9D320000 		_ADR	ATEXE
 2984 41e0 95410000 		_ADR	QSTAC	// evaluate input, check stack
 2985 41e4 8F270000 		_BRAN	EVAL1
 2985      C4410000 
 2986              	EVAL2:
 2987 41ec C5280000 		_ADR	DROP
 2988 41f0 59410000 		_ADR	DOTOK
 2989 41f4 7B250000 		_UNNEST	// prompt
 2990              	
 2991              	/**********************************
 2992              	    PRESET	( -- )
 2993              	 	Reset data stack pointer 
 2994              		and the terminal input buffer.
 2995              	**********************************/
 2996 41f8 B8410000 		_HEADER PRESE,6,"PRESET"
 2996      06505245 
ARM GAS  forth.s 			page 153


 2996      53455400 
 2997 4204 504700BF 		_NEST 
 2998 4208 3B270000 		_DOLIT SPP 
 2998      80FE0120 
 2999 4210 91280000 		_ADR SPSTOR 
 3000 4214 7B250000 		_UNNEST 
 3001              	
 3002              	/*********************
 3003              	    QUIT	( -- )
 3004              	 	Reset return stack 
 3005              		pointer and start 
 3006              		text interpreter.
 3007              	***********************/
 3008 4218 FC410000 		_HEADER QUIT,4,"QUIT"
 3008      04515549 
 3008      540000BF 
 3009 4224 3B270000 		_DOLIT RPP 
 3009      00FF0120 
 3010 422c 81280000 		_ADR RPSTOR 
 3011              	QUIT1:
 3012 4230 39410000 		_ADR	LBRAC			// start interpretation
 3013              	QUIT2:
 3014 4234 3D400000 		_ADR	QUERY			// get input
 3015 4238 C1410000 		_ADR	EVAL
 3016 423c 8F270000 		_BRAN	QUIT2	// continue till error
 3016      34420000 
 3017              	
 3018              	/***************************
 3019              		FORGET ( <string> -- )
 3020              		forget all definition 
 3021              		starting at <string>
 3022              	****************************/
 3023 4244 1C420000 		_HEADER FORGET,6,"FORGET"
 3023      06464F52 
 3023      47455400 
 3024 4250 504700BF 		_NEST 
 3025 4254 813C0000 		_ADR TOKEN 
 3026 4258 D5280000 		_ADR DUPP 
 3027 425c 7B270000 		_QBRAN 9f 
 3027      98420000 
 3028 4264 093E0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3029 4268 A92A0000 		_ADR QDUP 
 3030 426c 7B270000 		_QBRAN 8f
 3030      94420000 
 3031 4274 452A0000 		_ADR CELLM // ( ca la )
 3032 4278 D5280000 		_ADR DUPP 
 3033 427c 792E0000 		_ADR CPP   
 3034 4280 AD270000 		_ADR STORE
 3035 4284 C1270000 		_ADR AT 
 3036 4288 A52E0000 		_ADR LAST 
 3037 428c AD270000 		_ADR STORE
 3038 4290 ED470000 		_ADR OVERT 
 3039 4294 C5280000 	8:  _ADR DROP 
 3040 4298 7B250000 	9:	_UNNEST 
 3041              	
 3042              		.p2align 2 
 3043              	
ARM GAS  forth.s 			page 154


 3044              	/*****************
 3045              	  The compiler
 3046              	******************/
 3047              	
 3048              	/**************************************
 3049              	    '	   ( -- ca )
 3050              	 	Search context vocabularies 
 3051              		for the next word in input stream.
 3052              	***************************************/
 3053 429c 48420000 		_HEADER TICK,1,"'"
 3053      012700BF 
 3054 42a4 504700BF 		_NEST
 3055 42a8 813C0000 		_ADR	TOKEN
 3056 42ac 093E0000 		_ADR	NAMEQ	// ?defined
 3057 42b0 7B270000 		_QBRAN	TICK1
 3057      BC420000 
 3058 42b8 7B250000 		_UNNEST	// yes, push code address
 3059              	TICK1:	
 3060 42bc 7D400000 		_ADR ABORT	// no, error
 3061              	
 3062              	/***********************
 3063              	    ALLOT	( n -- )
 3064              	 	Allocate n bytes to 
 3065              		the ram area.
 3066              	************************/
 3067 42c0 A0420000 		_HEADER ALLOT,5,"ALLOT"
 3067      05414C4C 
 3067      4F5400BF 
 3068 42cc 504700BF 		_NEST
 3069 42d0 792E0000 		_ADR	CPP
 3070 42d4 E12C0000 		_ADR	PSTOR
 3071 42d8 7B250000 		_UNNEST			// adjust code pointer
 3072              	
 3073              	/******************************
 3074              	    ,	   ( w -- )
 3075              	 	Compile an integer 
 3076              		into the code dictionary.
 3077              	******************************/
 3078 42dc C4420000 		_HEADER COMMA,1,","
 3078      012C00BF 
 3079 42e4 504700BF 		_NEST
 3080 42e8 4D320000 		_ADR	HERE
 3081 42ec D5280000 		_ADR	DUPP
 3082 42f0 352A0000 		_ADR	CELLP	// cell boundary
 3083 42f4 792E0000 		_ADR	CPP
 3084 42f8 AD270000 		_ADR	STORE
 3085 42fc AD270000 		_ADR	STORE
 3086 4300 7B250000 		_UNNEST	// adjust code pointer, compile
 3087              		.p2align 2 
 3088              	
 3089              	/************************************
 3090              	    [COMPILE]   ( -- //  string> )
 3091              	 	Compile the next immediate word 
 3092              		into code dictionary.
 3093              	*************************************/
 3094 4304 E0420000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3094      895B434F 
ARM GAS  forth.s 			page 155


 3094      4D50494C 
 3094      455D00BF 
 3095 4314 504700BF 		_NEST
 3096 4318 A5420000 		_ADR	TICK
 3097 431c E5420000 		_ADR	COMMA
 3098 4320 7B250000 		_UNNEST
 3099              	
 3100              	/****************************
 3101              	    COMPILE	( -- )
 3102              	 	Compile the next address 
 3103              		in colon list to code 
 3104              		dictionary.
 3105              	*******************************/
 3106 4324 08430000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3106      47434F4D 
 3106      50494C45 
 3107 4330 504700BF 		_NEST
 3108 4334 0D280000 		_ADR	RFROM
 3109 4338 D5280000 		_ADR	DUPP 
 3110 433c C1270000 		_ADR	AT
 3111 4340 3B270000 		_DOLIT 1 
 3111      01000000 
 3112 4348 2D290000 		_ADR	ORR 
 3113 434c E5420000 		_ADR	COMMA 
 3114 4350 352A0000 		_ADR	CELLP 
 3115 4354 51280000 		_ADR	TOR 
 3116 4358 7B250000 		_UNNEST	// adjust return address
 3117              	
 3118              	/*************************
 3119              	    LITERAL	( w -- )
 3120              	 	Compile tos to code 
 3121              		dictionary as an 
 3122              		integer literal.
 3123              	***************************/
 3124 435c 28430000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3124      874C4954 
 3124      4552414C 
 3125 4368 504700BF 		_NEST
 3126 436c 3B270000 		_COMPI	DOLIT
 3126      3A270000 
 3126      49480000 
 3127 4378 E5420000 		_ADR	COMMA
 3128 437c 7B250000 		_UNNEST
 3129              	
 3130              	/********************
 3131              	    $,"	( -- )
 3132              	 	Compile a literal 
 3133              		string up to next " .
 3134              	hidden word 
 3135              	************************/
 3136              	STRCQ:
 3137 4380 504700BF 		_NEST
 3138 4384 3B270000 		_DOLIT -4
 3138      FCFFFFFF 
 3139 438c 792E0000 		_ADR	CPP
 3140 4390 E12C0000 		_ADR	PSTOR
 3141 4394 3B270000 		_DOLIT	'\"'
ARM GAS  forth.s 			page 156


 3141      22000000 
 3142 439c 5D3C0000 		_ADR	WORDD			// move word to code dictionary
 3143 43a0 292D0000 		_ADR	COUNT
 3144 43a4 99290000 		_ADR	PLUS
 3145 43a8 99310000 		_ADR	ALGND			// calculate aligned end of string
 3146 43ac 792E0000 		_ADR	CPP
 3147 43b0 AD270000 		_ADR	STORE
 3148 43b4 7B250000 		_UNNEST 			// adjust the code pointer
 3149              	
 3150              	/*******************
 3151              	   Structures
 3152              	*******************/
 3153              	
 3154              	/*************************
 3155              	    FOR	 ( -- a )
 3156              	 	Start a FOR-NEXT loop 
 3157              		structure in a colon 
 3158              		definition.
 3159              	**************************/
 3160 43b8 60430000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3160      C3464F52 
 3161 43c0 504700BF 		_NEST
 3162 43c4 3B270000 		_COMPI	TOR
 3162      50280000 
 3162      49480000 
 3163 43d0 4D320000 		_ADR	HERE
 3164 43d4 7B250000 		_UNNEST
 3165              	
 3166              	/********************************
 3167              		DO ( limit start -- )
 3168              		initialise a DO...LOOP 
 3169              		or DO...+LOOP 
 3170              	********************************/
 3171 43d8 BC430000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3171      C2444F00 
 3172 43e0 504700BF 		_NEST
 3173 43e4 3B270000 		_COMPI SWAP
 3173      E4280000 
 3173      49480000 
 3174 43f0 3B270000 		_COMPI TOR 
 3174      50280000 
 3174      49480000 
 3175 43fc 3B270000 		_COMPI TOR 
 3175      50280000 
 3175      49480000 
 3176 4408 4D320000 		_ADR HERE 
 3177 440c 7B250000 		_UNNEST 
 3178              	
 3179              	DOPLOOP: // ( n -- R: counter limit )
 3180 4410 B8E80300 		ldmfd RSP!,{T0,T1}
 3181 4414 3044     		add T0,TOS 
 3182 4416 28E90300 		stmfd RSP!,{T0,T1}
 3183 441a 8842     		cmp T0,T1 
 3184 441c 05D4     		bmi 9f 
 3185 441e 08F10808 		add RSP,#8
 3186 4422 0CF1040C 		add IP,#4
 3187 4426 FEF7A5B8 		_NEXT 
ARM GAS  forth.s 			page 157


 3188 442a DCF800C0 	9:  ldr IP,[IP]
 3189 442e FEF7A1B8 		_NEXT 
 3190              		
 3191              	/***************************
 3192              		+LOOP ( a -- )
 3193              		increment counter 
 3194              		end loop if countr>limit
 3195              	****************************/
 3196 4432 DC430000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3196      C52B4C4F 
 3196      4F50
 3197 443c 504700BF 		_NEST 
 3198 4440 3B270000 		_COMPI DOPLOOP 
 3198      10440000 
 3198      49480000 
 3199 444c E5420000 		_ADR COMMA
 3200 4450 7B250000 		_UNNEST 
 3201              	
 3202              	DOLOOP: // ( -- R: counter limit )
 3203 4454 D8F80000 		ldr T0,[RSP]
 3204 4458 00F10100 		add T0,#1
 3205 445c C8F80000 		str T0,[RSP]
 3206 4460 D8F80410 		ldr T1,[RSP,#4]
 3207 4464 8842     		cmp T0,T1 
 3208 4466 05D4     		bmi 9f
 3209 4468 08F10808 		add RSP,#8  // counter and limit  
 3210 446c 0CF1040C 		add IP,IP,#4 // skip loop address 
 3211 4470 FEF780B8 		_NEXT 
 3212 4474 DCF800C0 	9:  ldr IP,[IP]
 3213 4478 FEF77CB8 		_NEXT 
 3214              	
 3215              	
 3216              	/********************************
 3217              		LOOP ( a -- )
 3218              		increment counter 
 3219              		end loop if >= limit 
 3220              	*********************************/
 3221 447c 36440000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3221      C44C4F4F 
 3221      500000BF 
 3222 4488 504700BF 		_NEST 
 3223 448c 3B270000 		_COMPI DOLOOP
 3223      54440000 
 3223      49480000 
 3224 4498 E5420000 		_ADR COMMA 
 3225 449c 7B250000 		_UNNEST 
 3226              	
 3227              	
 3228              	/**********************
 3229              	    BEGIN	( -- a )
 3230              	 	Start an infinite 
 3231              		or indefinite 
 3232              		loop structure.
 3233              	************************/
 3234 44a0 80440000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3234      C5424547 
 3234      494E00BF 
ARM GAS  forth.s 			page 158


 3235 44ac 504700BF 		_NEST
 3236 44b0 4D320000 		_ADR	HERE
 3237 44b4 7B250000 		_UNNEST
 3238              		.p2align 2 
 3239              	
 3240              	/********************
 3241              	    NEXT	( a -- )
 3242              	 	Terminate a FOR-NEXT
 3243              		loop structure.
 3244              	**************************/
 3245 44b8 A4440000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3245      C44E4558 
 3245      540000BF 
 3246 44c4 504700BF 		_NEST
 3247 44c8 3B270000 		_COMPI	DONXT
 3247      5C270000 
 3247      49480000 
 3248 44d4 E5420000 		_ADR	COMMA
 3249 44d8 7B250000 		_UNNEST
 3250              	
 3251              	/***************************
 3252              		I ( -- n )
 3253              		stack for loop counter 
 3254              	***************************/
 3255 44dc BC440000 		_HEADER I,1+COMPO,"I"
 3255      414900BF 
 3256 44e4 47F8046D 		_PUSH 
 3257 44e8 D8F80060 		ldr TOS,[RSP]
 3258 44ec FEF742B8 		_NEXT 
 3259              	
 3260              	/****************************
 3261              		J ( -- n )
 3262              		stack outer loop counter 
 3263              	****************************/
 3264 44f0 E0440000 		_HEADER J,1,"J"
 3264      014A00BF 
 3265 44f8 47F8046D 		_PUSH 
 3266 44fc D8F80460 		ldr TOS,[RSP,#4]
 3267 4500 FEF738B8 		_NEXT 
 3268              	
 3269              	/**********************
 3270              	    UNTIL	( a -- )
 3271              	 	Terminate a BEGIN-UNTIL
 3272              		indefinite loop structure.
 3273              	******************************/
 3274 4504 F4440000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3274      C5554E54 
 3274      494C00BF 
 3275 4510 504700BF 		_NEST
 3276 4514 3B270000 		_COMPI	QBRAN
 3276      7A270000 
 3276      49480000 
 3277 4520 E5420000 		_ADR	COMMA
 3278 4524 7B250000 		_UNNEST
 3279              	
 3280              	/**********************
 3281              	    AGAIN	( a -- )
ARM GAS  forth.s 			page 159


 3282              	 	Terminate a BEGIN-AGAIN
 3283              		infinite loop structure.
 3284              	*****************************/
 3285 4528 08450000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3285      C5414741 
 3285      494E00BF 
 3286 4534 504700BF 		_NEST
 3287 4538 3B270000 		_COMPI	BRAN
 3287      8E270000 
 3287      49480000 
 3288 4544 E5420000 		_ADR	COMMA
 3289 4548 7B250000 		_UNNEST
 3290              	
 3291              	/************************
 3292              	    IF	  ( -- A )
 3293              	 	Begin a conditional
 3294              		branch structure.
 3295              	**************************/
 3296 454c 2C450000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3296      C2494600 
 3297 4554 504700BF 		_NEST
 3298 4558 3B270000 		_COMPI	QBRAN
 3298      7A270000 
 3298      49480000 
 3299 4564 4D320000 		_ADR	HERE
 3300 4568 3B270000 		_DOLIT	4
 3300      04000000 
 3301 4570 792E0000 		_ADR	CPP
 3302 4574 E12C0000 		_ADR	PSTOR
 3303 4578 7B250000 		_UNNEST
 3304              	
 3305              	/*************************
 3306              	    AHEAD	( -- A )
 3307              	 	Compile a forward 
 3308              		branch instruction.
 3309              	*************************/
 3310 457c 50450000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3310      C5414845 
 3310      414400BF 
 3311 4588 504700BF 		_NEST
 3312 458c 3B270000 		_COMPI	BRAN
 3312      8E270000 
 3312      49480000 
 3313 4598 4D320000 		_ADR	HERE
 3314 459c 3B270000 		_DOLIT	4
 3314      04000000 
 3315 45a4 792E0000 		_ADR	CPP
 3316 45a8 E12C0000 		_ADR	PSTOR
 3317 45ac 7B250000 		_UNNEST
 3318              	
 3319              	/**************************
 3320              	    REPEAT	( A a -- )
 3321              	 	Terminate a BEGIN-WHILE-REPEAT
 3322              		indefinite loop.
 3323              	**********************************/
 3324 45b0 80450000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3324      C6524550 
ARM GAS  forth.s 			page 160


 3324      45415400 
 3325 45bc 504700BF 		_NEST
 3326 45c0 35450000 		_ADR	AGAIN
 3327 45c4 4D320000 		_ADR	HERE
 3328 45c8 E5280000 		_ADR	SWAP
 3329 45cc AD270000 		_ADR	STORE
 3330 45d0 7B250000 		_UNNEST
 3331              	
 3332              	/*********************
 3333              	    THEN	( A -- )
 3334              	 	Terminate a conditional
 3335              		branch structure.
 3336              	*****************************/
 3337 45d4 B4450000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3337      C4544845 
 3337      4E0000BF 
 3338 45e0 504700BF 		_NEST
 3339 45e4 4D320000 		_ADR	HERE
 3340 45e8 E5280000 		_ADR	SWAP
 3341 45ec AD270000 		_ADR	STORE
 3342 45f0 7B250000 		_UNNEST
 3343              	
 3344              	/***************************
 3345              	    AFT	 ( a -- a A )
 3346              	 	Jump to THEN in a 
 3347              		FOR-AFT-THEN-NEXT loop 
 3348              		the first time through.
 3349              	*****************************/
 3350 45f4 D8450000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3350      C3414654 
 3351 45fc 504700BF 		_NEST
 3352 4600 C5280000 		_ADR	DROP
 3353 4604 89450000 		_ADR	AHEAD
 3354 4608 AD440000 		_ADR	BEGIN
 3355 460c E5280000 		_ADR	SWAP
 3356 4610 7B250000 		_UNNEST
 3357              	
 3358              	/**********************
 3359              	    ELSE	( A -- A )
 3360              	 	Start the false 
 3361              		clause in an 
 3362              		IF-ELSE-THEN structure.
 3363              	****************************/
 3364 4614 F8450000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3364      C4454C53 
 3364      450000BF 
 3365 4620 504700BF 		_NEST
 3366 4624 89450000 		_ADR	AHEAD
 3367 4628 E5280000 		_ADR	SWAP
 3368 462c E1450000 		_ADR	THENN
 3369 4630 7B250000 		_UNNEST
 3370              	
 3371              	/**************************
 3372              	    WHILE	( a -- A a )
 3373              	 	Conditional branch out 
 3374              		of a BEGIN-WHILE-REPEAT loop.
 3375              	*********************************/
ARM GAS  forth.s 			page 161


 3376 4634 18460000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3376      C5574849 
 3376      4C4500BF 
 3377 4640 504700BF 		_NEST
 3378 4644 55450000 		_ADR	IFF
 3379 4648 E5280000 		_ADR	SWAP
 3380 464c 7B250000 		_UNNEST
 3381              	
 3382              	/***********************************
 3383              	    ABORT"	( -- //  string> )
 3384              	 	Conditional abort with an 
 3385              		error message.
 3386              	***********************************/
 3387 4650 38460000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3387      8641424F 
 3387      52542200 
 3388 465c 504700BF 		_NEST
 3389 4660 3B270000 		_COMPI	ABORQ
 3389      A8400000 
 3389      49480000 
 3390 466c 81430000 		_ADR	STRCQ
 3391 4670 7B250000 		_UNNEST
 3392              	
 3393              	/******************************
 3394              	    $"	( -- //  string> )
 3395              	 	Compile an inline 
 3396              		word literal.
 3397              	*****************************/
 3398 4674 54460000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3398      C2242200 
 3399 467c 504700BF 		_NEST
 3400 4680 3B270000 		_COMPI	STRQP
 3400      A0380000 
 3400      49480000 
 3401 468c 81430000 		_ADR	STRCQ
 3402 4690 7B250000 		_UNNEST
 3403              	
 3404              	/******************************
 3405              	    ."	( -- //  string> )
 3406              	 	Compile an inline word
 3407              		literal to be typed out 
 3408              		at run time.
 3409              	*******************************/
 3410 4694 78460000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3410      C22E2200 
 3411 469c 504700BF 		_NEST
 3412 46a0 3B270000 		_COMPI	DOTQP
 3412      BC380000 
 3412      49480000 
 3413 46ac 81430000 		_ADR	STRCQ
 3414 46b0 7B250000 		_UNNEST
 3415              	
 3416              	/*********************
 3417              	  Name compiler
 3418              	***********************/
 3419              	
 3420              	/**************************
ARM GAS  forth.s 			page 162


 3421              	    ?UNIQUE	( a -- a )
 3422              	 	Display a warning 
 3423              		message if the word 
 3424              		already exists.
 3425              	**************************/
 3426 46b4 98460000 		_HEADER UNIQU,7,"?UNIQUE"
 3426      073F554E 
 3426      49515545 
 3427 46c0 504700BF 		_NEST
 3428 46c4 D5280000 		_ADR	DUPP
 3429 46c8 093E0000 		_ADR	NAMEQ			// ?name exists
 3430 46cc 7B270000 		_QBRAN	UNIQ1	// redefinitions are OK
 3430      EC460000 
 3431 46d4 BD380000 		_DOTQP	7," reDef "		// but warn the user
 3431      07207265 
 3431      44656620 
 3432 46e0 F9280000 		_ADR	OVER
 3433 46e4 292D0000 		_ADR	COUNT
 3434 46e8 21380000 		_ADR	TYPEE			// just in case its not planned
 3435              	UNIQ1:
 3436 46ec C5280000 		_ADR	DROP
 3437 46f0 7B250000 		_UNNEST
 3438              	
 3439              	/***********************
 3440              	    $,n	 ( na -- )
 3441              	 	Build a new dictionary 
 3442              		name using the data at na.
 3443              	hidden word 
 3444              	*******************************/
 3445              	SNAME:
 3446 46f4 504700BF 		_NEST
 3447 46f8 D5280000 		_ADR	DUPP			//  na na
 3448 46fc E1270000 		_ADR	CAT			//  ?null input
 3449 4700 7B270000 		_QBRAN	SNAM1
 3449      3C470000 
 3450 4708 C1460000 		_ADR	UNIQU			//  na
 3451 470c A52E0000 		_ADR	LAST			//  na last
 3452 4710 C1270000 		_ADR	AT			//  na la
 3453 4714 E5420000 		_ADR	COMMA			//  na
 3454 4718 D5280000 		_ADR	DUPP			//  na na
 3455 471c A52E0000 		_ADR	LAST			//  na na last
 3456 4720 AD270000 		_ADR	STORE			//  na , save na for vocabulary link
 3457 4724 292D0000 		_ADR	COUNT			//  na+1 count
 3458 4728 99290000 		_ADR	PLUS			//  na+1+count
 3459 472c 99310000 		_ADR	ALGND			//  word boundary
 3460 4730 792E0000 		_ADR	CPP
 3461 4734 AD270000 		_ADR	STORE			//  top of dictionary now
 3462 4738 7B250000 		_UNNEST
 3463              	SNAM1:
 3464 473c A1380000 		_ADR	STRQP
 3465 4740 07       		.byte	7
 3466 4741 206E616D 		.ascii " name? "
 3466      653F20
 3467 4748 7D400000 		_ADR	ABORT
 3468              	
 3469              	/************************
 3470              	    $COMPILE	( a -- )
ARM GAS  forth.s 			page 163


 3471              	 	Compile next word to 
 3472              		code dictionary as 
 3473              		a token or literal.
 3474              	**************************/
 3475 474c B8460000 		_HEADER SCOMP,8,"$COMPILE"
 3475      0824434F 
 3475      4D50494C 
 3475      450000BF 
 3476 475c 504700BF 		_NEST
 3477 4760 093E0000 		_ADR	NAMEQ
 3478 4764 A92A0000 		_ADR	QDUP	// defined?
 3479 4768 7B270000 		_QBRAN	SCOM2
 3479      98470000 
 3480 4770 C1270000 		_ADR	AT
 3481 4774 3B270000 		_DOLIT	IMEDD
 3481      80000000 
 3482 477c 19290000 		_ADR	ANDD	// immediate?
 3483 4780 7B270000 		_QBRAN	SCOM1
 3483      90470000 
 3484 4788 51270000 		_ADR	EXECU
 3485 478c 7B250000 		_UNNEST			// it's immediate, execute
 3486              	SCOM1:
 3487 4790 49480000 		_ADR	CALLC			// it's not immediate, compile
 3488 4794 7B250000 		_UNNEST	
 3489              	SCOM2:
 3490 4798 D9200000 		_ADR	NUMBER 
 3491 479c 7B270000 		_QBRAN	SCOM3
 3491      AC470000 
 3492 47a4 69430000 		_ADR	LITER
 3493 47a8 7B250000 		_UNNEST			// compile number as integer
 3494              	SCOM3: // compilation abort 
 3495 47ac B5470000 		_ADR COLON_ABORT 
 3496 47b0 7D400000 		_ADR	ABORT			// error
 3497              	
 3498              	/********************************
 3499              	 before aborting a compilation 
 3500              	 reset HERE and LAST
 3501              	 to previous values. 
 3502              	*******************************/
 3503              	COLON_ABORT:
 3504 47b4 504700BF 		_NEST 
 3505 47b8 A52E0000 		_ADR LAST 
 3506 47bc C1270000 		_ADR AT 
 3507 47c0 452A0000 		_ADR CELLM 
 3508 47c4 D5280000 		_ADR DUPP 
 3509 47c8 792E0000 		_ADR CPP  
 3510 47cc AD270000 		_ADR STORE 
 3511 47d0 C1270000 		_ADR AT 
 3512 47d4 A52E0000 		_ADR LAST 
 3513 47d8 AD270000 		_ADR STORE 
 3514 47dc 7B250000 		_UNNEST 
 3515              	
 3516              	/*********************
 3517              	    OVERT	( -- )
 3518              	 	Link a new word 
 3519              		into the current 
 3520              		vocabulary.
ARM GAS  forth.s 			page 164


 3521              	**********************/
 3522 47e0 50470000 		_HEADER OVERT,5,"OVERT"
 3522      054F5645 
 3522      525400BF 
 3523 47ec 504700BF 		_NEST
 3524 47f0 A52E0000 		_ADR	LAST
 3525 47f4 C1270000 		_ADR	AT
 3526 47f8 652E0000 		_ADR	CNTXT
 3527 47fc AD270000 		_ADR	STORE
 3528 4800 7B250000 		_UNNEST
 3529              	
 3530              	/**********************
 3531              	    ;  ( -- )
 3532              	 	Terminate a colon
 3533              		definition.
 3534              	***********************/
 3535 4804 E4470000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3535      C13B00BF 
 3536 480c 504700BF 		_NEST
 3537 4810 3B270000 		_DOLIT	UNNEST
 3537      7A250000 
 3538 4818 49480000 		_ADR	CALLC
 3539 481c 39410000 		_ADR	LBRAC
 3540 4820 ED470000 		_ADR	OVERT
 3541 4824 7B250000 		_UNNEST
 3542              	
 3543              	/******************
 3544              	    ]	   ( -- )
 3545              	 	Start compiling 
 3546              		the words in 
 3547              		the input stream.
 3548              	*********************/
 3549 4828 08480000 		_HEADER RBRAC,1,"]"
 3549      015D00BF 
 3550 4830 504700BF 		_NEST
 3551 4834 3B270000 		_DOLIT	SCOMP
 3551      5C470000 
 3552 483c 392E0000 		_ADR	TEVAL
 3553 4840 AD270000 		_ADR	STORE
 3554 4844 7B250000 		_UNNEST
 3555              	
 3556              	/*********************
 3557              	    BL.W	( ca -- )
 3558              	 	compile ca.
 3559              	hidden word used by compiler
 3560              	*****************************/
 3561              	CALLC:
 3562 4848 504700BF 		_NEST
 3563 484c 3B270000 		_DOLIT 1 
 3563      01000000 
 3564 4854 2D290000 		_ADR ORR 
 3565 4858 E5420000 		_ADR COMMA  
 3566 485c 7B250000 		_UNNEST 
 3567              	
 3568              	
 3569              	/*************************
 3570              	 	:	( -- //  string> )
ARM GAS  forth.s 			page 165


 3571              	 	Start a new colon 
 3572              		definition using 
 3573              		next word as its name.
 3574              	**************************/
 3575 4860 2C480000 		_HEADER COLON,1,":"
 3575      013A00BF 
 3576 4868 504700BF 		_NEST
 3577 486c 813C0000 		_ADR	TOKEN
 3578 4870 F5460000 		_ADR	SNAME
 3579 4874 85250000 		_ADR	COMPI_NEST 
 3580 4878 31480000 		_ADR	RBRAC
 3581 487c 7B250000 		_UNNEST
 3582              	
 3583              	/*************************
 3584              	    IMMEDIATE   ( -- )
 3585              	 	Make the last compiled 
 3586              		word an immediate word.
 3587              	***************************/
 3588 4880 64480000 		_HEADER IMMED,9,"IMMEDIATE"
 3588      09494D4D 
 3588      45444941 
 3588      544500BF 
 3589 4890 504700BF 		_NEST
 3590 4894 3B270000 		_DOLIT	IMEDD
 3590      80000000 
 3591 489c A52E0000 		_ADR	LAST
 3592 48a0 C1270000 		_ADR	AT
 3593 48a4 C1270000 		_ADR	AT
 3594 48a8 2D290000 		_ADR	ORR
 3595 48ac A52E0000 		_ADR	LAST
 3596 48b0 C1270000 		_ADR	AT
 3597 48b4 AD270000 		_ADR	STORE
 3598 48b8 7B250000 		_UNNEST
 3599              	
 3600              	/******************
 3601              	  Defining words
 3602              	******************/
 3603              	
 3604              	/***********************************
 3605              	    CONSTANT	( u -- //  string> )
 3606              	 	Compile a new constant.
 3607              	************************************/
 3608 48bc 84480000 		_HEADER CONST,8,"CONSTANT"
 3608      08434F4E 
 3608      5354414E 
 3608      540000BF 
 3609 48cc 504700BF 		_NEST 
 3610 48d0 813C0000 		_ADR	TOKEN
 3611 48d4 F5460000 		_ADR	SNAME
 3612 48d8 ED470000 		_ADR	OVERT
 3613 48dc 85250000 		_ADR	COMPI_NEST
 3614 48e0 3B270000 		_DOLIT	DOCON
 3614      5C2D0000 
 3615 48e8 49480000 		_ADR	CALLC
 3616 48ec E5420000 		_ADR	COMMA
 3617 48f0 3B270000 		_DOLIT	UNNEST 
 3617      7A250000 
ARM GAS  forth.s 			page 166


 3618 48f8 49480000 		_ADR	CALLC  
 3619 48fc 7B250000 		_UNNEST
 3620              	
 3621              		.p2align 2 
 3622              	/****************************************
 3623              	 doDOES> ( -- a )
 3624              	 runtime action of DOES> 
 3625              	 leave parameter field address on stack 
 3626              	hidden word used by compiler 
 3627              	***************************************/
 3628              	DODOES:
 3629 4900 504700BF 		_NEST 
 3630 4904 0D280000 		_ADR	RFROM
 3631 4908 352A0000 		_ADR	CELLP 
 3632 490c F5290000 		_ADR	ONEP  
 3633 4910 A52E0000 		_ADR LAST 
 3634 4914 C1270000 		_ADR AT
 3635 4918 A13C0000 		_ADR NAMET 
 3636 491c 352A0000 		_ADR CELLP 
 3637 4920 AD270000 		_ADR STORE  
 3638 4924 7B250000 		_UNNEST 
 3639              	
 3640              		.p2align 2
 3641              	/**********************
 3642              	  DOES> ( -- )
 3643              	  compile time action
 3644              	*************************/
 3645 4928 C0480000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3645      C5444F45 
 3645      533E00BF 
 3646 4934 504700BF 		_NEST 
 3647 4938 3B270000 		_DOLIT DODOES 
 3647      00490000 
 3648 4940 49480000 		_ADR CALLC 
 3649 4944 3B270000 		_DOLIT	UNNEST
 3649      7A250000 
 3650 494c 49480000 		_ADR	CALLC 
 3651 4950 85250000 		_ADR COMPI_NEST
 3652 4954 3B270000 		_DOLIT RFROM 
 3652      0C280000 
 3653 495c 49480000 		_ADR	CALLC
 3654 4960 7B250000 		_UNNEST 
 3655              	
 3656              	
 3657              	/****************************
 3658              	  DEFER@ ( "name" -- a )
 3659              	  return value of code field 
 3660              	  of defered function. 
 3661              	******************************/
 3662 4964 2C490000 		_HEADER DEFERAT,6,"DEFER@"
 3662      06444546 
 3662      45524000 
 3663 4970 504700BF 		_NEST 
 3664 4974 A5420000 		_ADR TICK
 3665 4978 352A0000 		_ADR CELLP 
 3666 497c C1270000 		_ADR AT 
 3667 4980 052A0000 		_ADR ONEM 
ARM GAS  forth.s 			page 167


 3668 4984 7B250000 		_UNNEST 
 3669              	
 3670              	/*********************************
 3671              	 DEFER! ( "name1" "name2" -- )
 3672              	 assign an action to a defered word 
 3673              	************************************/
 3674 4988 68490000 		_HEADER DEFERSTO,6,"DEFER!"
 3674      06444546 
 3674      45522100 
 3675 4994 504700BF 		_NEST 
 3676 4998 A5420000 		_ADR TICK 
 3677 499c F5290000 		_ADR ONEP 
 3678 49a0 A5420000 		_ADR TICK 
 3679 49a4 352A0000 		_ADR CELLP 
 3680 49a8 AD270000 		_ADR STORE 
 3681 49ac 7B250000 		_UNNEST
 3682              	
 3683              	/****************************
 3684              	  DEFER ( "name" -- )
 3685              	  create a defered definition
 3686              	*****************************/
 3687 49b0 8C490000 		_HEADER DEFER,5,"DEFER"
 3687      05444546 
 3687      455200BF 
 3688 49bc 504700BF 		_NEST 
 3689 49c0 0D4A0000 		_ADR CREAT 
 3690 49c4 3B270000 		_DOLIT UNNEST 
 3690      7A250000 
 3691 49cc 49480000 		_ADR CALLC 
 3692 49d0 3B270000 		_DOLIT DEFER_NOP
 3692      F4490000 
 3693 49d8 F5290000 		_ADR ONEP 
 3694 49dc A52E0000 		_ADR LAST 
 3695 49e0 C1270000 		_ADR AT 
 3696 49e4 A13C0000 		_ADR NAMET 
 3697 49e8 352A0000 		_ADR CELLP 
 3698 49ec AD270000 		_ADR STORE 
 3699 49f0 7B250000 		_UNNEST 
 3700              	DEFER_NOP:
 3701 49f4 504700BF 		_NEST  
 3702 49f8 39270000 		_ADR NOP 
 3703 49fc 7B250000 		_UNNEST 
 3704              	
 3705              	/******************************
 3706              	    CREATE	( -- //  string> )
 3707              	 	Compile a new array entry 
 3708              		without allocating code space.
 3709              	***********************************/
 3710 4a00 B4490000 		_HEADER CREAT,6,"CREATE"
 3710      06435245 
 3710      41544500 
 3711 4a0c 504700BF 		_NEST 
 3712 4a10 813C0000 		_ADR	TOKEN
 3713 4a14 F5460000 		_ADR	SNAME
 3714 4a18 ED470000 		_ADR	OVERT
 3715 4a1c 85250000 		_ADR	COMPI_NEST 
 3716 4a20 3B270000 		_DOLIT	DOVAR
ARM GAS  forth.s 			page 168


 3716      502D0000 
 3717 4a28 49480000 		_ADR	CALLC
 3718 4a2c 7B250000 		_UNNEST
 3719              	
 3720              	/*******************************
 3721              	    VARIABLE	( -- //  string> )
 3722              	 	Compile a new variable 
 3723              		initialized to 0.
 3724              	***********************************/
 3725 4a30 044A0000 		_HEADER VARIA,8,"VARIABLE"
 3725      08564152 
 3725      4941424C 
 3725      450000BF 
 3726 4a40 504700BF 		_NEST
 3727 4a44 0D4A0000 		_ADR	CREAT
 3728 4a48 3B270000 		_DOLIT	0
 3728      00000000 
 3729 4a50 E5420000 		_ADR	COMMA
 3730 4a54 3B270000 		_DOLIT UNNEST
 3730      7A250000 
 3731 4a5c 49480000 		_ADR	CALLC  
 3732 4a60 7B250000 		_UNNEST
 3733              	
 3734              	/***********
 3735              	  Tools
 3736              	***********/
 3737              	
 3738              	/*************************
 3739              	    dm+	 ( a u -- a )
 3740              	 	Dump u bytes from , 
 3741              		leaving a+u on the stack.
 3742              	hidden word used by DUMP 
 3743              	****************************/
 3744              	DMP:
 3745 4a64 504700BF 		_NEST
 3746 4a68 F9280000 		_ADR	OVER
 3747 4a6c 3B270000 		_DOLIT	4
 3747      04000000 
 3748 4a74 01390000 		_ADR	UDOTR			// display address
 3749 4a78 CD370000 		_ADR	SPACE
 3750 4a7c 51280000 		_ADR	TOR			// start count down loop
 3751 4a80 8F270000 		_BRAN	PDUM2			// skip first pass
 3751      A04A0000 
 3752              	PDUM1:
 3753 4a88 D5280000 	  _ADR	DUPP
 3754 4a8c E1270000 		_ADR	CAT
 3755 4a90 3B270000 		_DOLIT	3
 3755      03000000 
 3756 4a98 01390000 		_ADR	UDOTR			// display numeric data
 3757 4a9c F5290000 		_ADR	ONEP			// increment address
 3758              	PDUM2:
 3759 4aa0 5D270000 	  _ADR	DONXT
 3760 4aa4 884A0000 		.word	PDUM1	// loop till done
 3761 4aa8 7B250000 		_UNNEST
 3762              		.p2align 2 
 3763              	//    DUMP	( a u -- )
 3764              	// 	Dump u bytes from a, in a formatted manner.
ARM GAS  forth.s 			page 169


 3765              	
 3766              	/**********************
 3767              		DUMP ( a n -- )
 3768              		hex dump memory 
 3769              	*********************/
 3770 4aac 344A0000 		_HEADER DUMP,4,"DUMP"
 3770      0444554D 
 3770      500000BF 
 3771 4ab8 504700BF 		_NEST
 3772 4abc 3B270000 		_DOLIT  15 
 3772      0F000000 
 3773 4ac4 99290000 		_ADR    PLUS 
 3774 4ac8 3B270000 		_DOLIT  0xFFFFFFF0 
 3774      F0FFFFFF 
 3775 4ad0 19290000 		_ADR    ANDD 
 3776 4ad4 D12D0000 		_ADR	BASE
 3777 4ad8 C1270000 		_ADR	AT
 3778 4adc 51280000 		_ADR	TOR
 3779 4ae0 31350000 		_ADR	HEX			// save radix,set hex
 3780 4ae4 3B270000 		_DOLIT	16
 3780      10000000 
 3781 4aec 39310000 		_ADR	SLASH			// change count to lines
 3782 4af0 51280000 		_ADR	TOR
 3783 4af4 8F270000 		_BRAN	DUMP4			// start count down loop
 3783      244B0000 
 3784              	DUMP1:
 3785 4afc 55380000 	    _ADR	CR
 3786 4b00 3B270000 		_DOLIT	16
 3786      10000000 
 3787 4b08 0D2B0000 		_ADR	DDUP
 3788 4b0c 654A0000 		_ADR	DMP			// display numeric
 3789 4b10 BD2A0000 		_ADR	ROT
 3790 4b14 BD2A0000 		_ADR	ROT
 3791 4b18 CD370000 		_ADR	SPACE
 3792 4b1c CD370000 		_ADR	SPACE
 3793 4b20 21380000 		_ADR	TYPEE			// display printable characters
 3794              	DUMP4:
 3795 4b24 5D270000 	  _DONXT	DUMP1	// loop till done
 3795      FC4A0000 
 3796              	DUMP3:
 3797 4b2c C5280000 		_ADR	DROP
 3798 4b30 0D280000 		_ADR	RFROM
 3799 4b34 D12D0000 		_ADR	BASE
 3800 4b38 AD270000 		_ADR	STORE			// restore radix
 3801 4b3c 7B250000 		_UNNEST
 3802              	
 3803              	/*******************************
 3804              	   TRACE. display in hexadecimal
 3805              	   TRACE. use a different buffer 
 3806              	   than DOT  to avoid current 
 3807              	   display overwrite.
 3808              	*******************************/ 
 3809              	TDOT: // ( u -- )
 3810 4b40 504700BF 		_NEST 
 3811 4b44 D12D0000 		_ADR BASE 
 3812 4b48 C1270000 		_ADR AT 
 3813 4b4c 51280000 		_ADR TOR
ARM GAS  forth.s 			page 170


 3814 4b50 31350000 		_ADR HEX  
 3815 4b54 4D2E0000 		_ADR HLD 
 3816 4b58 C1270000 		_ADR AT 
 3817 4b5c 51280000 		_ADR TOR   // R: base *hold 
 3818 4b60 4D320000 		_ADR HERE 
 3819 4b64 3B270000 		_DOLIT 160 
 3819      A0000000 
 3820 4b6c 99290000 		_ADR PLUS
 3821 4b70 D5280000 		_ADR DUPP 
 3822 4b74 51280000 		_ADR TOR  
 3823 4b78 4D2E0000 		_ADR HLD 
 3824 4b7c AD270000 		_ADR STORE
 3825 4b80 D92F0000 		_ADR STOD 
 3826 4b84 81340000 		_ADR DIGS  
 3827 4b88 C5280000 		_ADR DROP
 3828 4b8c 3B270000 		_DOLIT '$'
 3828      24000000 
 3829 4b94 35340000 		_ADR HOLD 
 3830 4b98 4D2E0000 		_ADR HLD 
 3831 4b9c C1270000 		_ADR AT
 3832 4ba0 0D280000 		_ADR RFROM   
 3833 4ba4 F9280000 		_ADR OVER 
 3834 4ba8 A9290000 		_ADR SUBB 
 3835 4bac CD370000 		_ADR SPACE 
 3836 4bb0 21380000 		_ADR TYPEE 
 3837 4bb4 0D280000 		_ADR RFROM 
 3838 4bb8 4D2E0000 		_ADR HLD 
 3839 4bbc AD270000 		_ADR STORE 
 3840 4bc0 0D280000 		_ADR RFROM 
 3841 4bc4 D12D0000 		_ADR BASE 
 3842 4bc8 AD270000 		_ADR STORE 
 3843 4bcc 7B250000 		_UNNEST 
 3844              	
 3845              	/**********************
 3846              	   .S	  ( ... -- ... )
 3847              	 	Display the contents 
 3848              		of the data stack.
 3849              	*************************/
 3850 4bd0 B04A0000 		_HEADER DOTS,2,".S"
 3850      022E5300 
 3851 4bd8 504700BF 		_NEST
 3852 4bdc 01320000 		_ADR	DEPTH	// stack depth
 3853 4be0 51280000 		_ADR	TOR		// start count down loop
 3854 4be4 8F270000 		_BRAN	DOTS2  // skip first pass
 3854      F84B0000 
 3855              	DOTS1:
 3856 4bec 3D280000 		_ADR	RAT
 3857 4bf0 25320000 		_ADR	PICK
 3858 4bf4 414B0000 		_ADR	TDOT // index stack, display contents
 3859              	DOTS2:
 3860 4bf8 5D270000 		_DONXT	DOTS1 // loop till done
 3860      EC4B0000 
 3861 4c00 55380000 		_ADR	CR 
 3862 4c04 7B250000 		_UNNEST
 3863              	
 3864              	RBASE: 
 3865 4c08 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 171


 3866 4c0c 4FF47F46 		_MOV32 TOS,RPP 
 3866      C2F20106 
 3867 4c14 FDF7AEBC 		_NEXT 
 3868              	
 3869              	
 3870              	/**************************
 3871              	  R.  display return stack 
 3872              	**************************/
 3873              	RDOT: 
 3874 4c18 504700BF 		_NEST 
 3875 4c1c 094C0000 		_ADR RBASE
 3876 4c20 B1280000 		_ADR RPAT 
 3877 4c24 A9290000 		_ADR SUBB
 3878 4c28 792A0000 		_ADR CELLSL   
 3879 4c2c 3B270000 		_DOLIT 2
 3879      02000000 
 3880 4c34 A9290000 		_ADR SUBB 
 3881 4c38 51280000 		_ADR TOR
 3882 4c3c 094C0000 		_ADR RBASE 
 3883 4c40 452A0000 	1:	_ADR CELLM 
 3884 4c44 D5280000 		_ADR DUPP 
 3885 4c48 C1270000 		_ADR AT 
 3886 4c4c 414B0000 		_ADR TDOT 
 3887 4c50 0D280000 		_ADR RFROM   
 3888 4c54 052A0000 		_ADR ONEM 
 3889 4c58 D5280000 		_ADR DUPP
 3890 4c5c 51280000 		_ADR TOR 
 3891 4c60 0D2C0000 		_ADR ZEQUAL   
 3892 4c64 7B270000 		_QBRAN 1b
 3892      404C0000 
 3893 4c6c 0D280000 		_ADR RFROM  
 3894 4c70 E52A0000 		_ADR DDROP
 3895 4c74 55380000 		_ADR CR   
 3896 4c78 7B250000 		_UNNEST 
 3897              	
 3898              	/**************************
 3899              		TRACE ( -- )
 3900              		display stacks content 
 3901              	**************************/
 3902 4c7c D44B0000 		_HEADER TRACE,5,"TRACE"
 3902      05545241 
 3902      434500BF 
 3903 4c88 504700BF 		_NEST
 3904 4c8c 55380000 		_ADR CR 
 3905 4c90 3B270000 		_DOLIT '>' 
 3905      3E000000 
 3906 4c98 3B270000 		_DOLIT 'S'
 3906      53000000 
 3907 4ca0 45260000 		_ADR EMIT 
 3908 4ca4 45260000 		_ADR EMIT  
 3909 4ca8 D94B0000 		_ADR DOTS
 3910 4cac 3B270000 		_DOLIT '>'
 3910      3E000000 
 3911 4cb4 3B270000 		_DOLIT 'R'
 3911      52000000 
 3912 4cbc 45260000 		_ADR EMIT 
 3913 4cc0 45260000 		_ADR EMIT 
ARM GAS  forth.s 			page 172


 3914 4cc4 194C0000 		_ADR RDOT 
 3915 4cc8 7B250000 		_UNNEST 
 3916              	
 3917              	
 3918              	/*****************************
 3919              	    >NAME	( ca -- na | F )
 3920              	 	Convert code address 
 3921              		to a name address.
 3922              	*****************************/
 3923 4ccc 804C0000 		_HEADER TNAME,5,">NAME"
 3923      053E4E41 
 3923      4D4500BF 
 3924 4cd8 504700BF 		_NEST
 3925 4cdc 51280000 		_ADR	TOR			//  
 3926 4ce0 652E0000 		_ADR	CNTXT			//  va
 3927 4ce4 C1270000 		_ADR	AT			//  na
 3928              	TNAM1:
 3929 4ce8 D5280000 		_ADR	DUPP			//  na na
 3930 4cec 7B270000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3930      1C4D0000 
 3931 4cf4 D5280000 		_ADR	DUPP			//  na na
 3932 4cf8 A13C0000 		_ADR	NAMET			//  na ca
 3933 4cfc 3D280000 		_ADR	RAT			//  na ca code
 3934 4d00 41290000 		_ADR	XORR			//  na f --
 3935 4d04 7B270000 		_QBRAN	TNAM2
 3935      1C4D0000 
 3936 4d0c 452A0000 		_ADR	CELLM			//  la 
 3937 4d10 C1270000 		_ADR	AT			//  next_na
 3938 4d14 8F270000 		_BRAN	TNAM1
 3938      E84C0000 
 3939              	TNAM2:	
 3940 4d1c 0D280000 		_ADR	RFROM
 3941 4d20 C5280000 		_ADR	DROP			//  0|na --
 3942 4d24 7B250000 		_UNNEST			// 0
 3943              	
 3944              	/********************************
 3945              	    .ID	 ( na -- )
 3946              	 	Display the name at address.
 3947              	********************************/
 3948 4d28 D04C0000 		_HEADER DOTID,3,".ID"
 3948      032E4944 
 3949 4d30 504700BF 		_NEST
 3950 4d34 A92A0000 		_ADR	QDUP			// if zero no name
 3951 4d38 7B270000 		_QBRAN	DOTI1
 3951      584D0000 
 3952 4d40 292D0000 		_ADR	COUNT
 3953 4d44 3B270000 		_DOLIT	0x1F
 3953      1F000000 
 3954 4d4c 19290000 		_ADR	ANDD			// mask lexicon bits
 3955 4d50 21380000 		_ADR	TYPEE
 3956 4d54 7B250000 		_UNNEST			// display name string
 3957              	DOTI1:
 3958 4d58 BD380000 		_DOTQP	9," {noName}"
 3958      09207B6E 
 3958      6F4E616D 
 3958      657D00BF 
 3959 4d68 7B250000 		_UNNEST
ARM GAS  forth.s 			page 173


 3960              	
 3961              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3962              	.if WANT_SEE 
 3963              	/*******************************
 3964              	    SEE	 ( -- //  string> )
 3965              	 	A simple decompiler.
 3966              	*******************************/
 3967              		_HEADER SEE,3,"SEE"
 3968              		_NEST
 3969              		_ADR	TICK	//  ca --, starting address
 3970              		_ADR	CR	
 3971              		_DOLIT	20
 3972              		_ADR	TOR
 3973              	SEE1:
 3974              		_ADR	CELLP			//  a
 3975              		_ADR	DUPP			//  a a
 3976              		_ADR	DECOMP		//  a
 3977              		_DONXT	SEE1
 3978              		_ADR	DROP
 3979              		_UNNEST
 3980              	
 3981              	/*************************
 3982              	 	DECOMPILE ( a -- )
 3983              	 	Convert code in a.  
 3984              		Display name of command or as data.
 3985              	*************************************/
 3986              		_HEADER DECOMP,9,"DECOMPILE"
 3987              		_NEST
 3988              		_ADR	DUPP			//  a a
 3989              	// 	_ADR	TOR			//  a
 3990              		_ADR	AT			//  a code
 3991              		_ADR	DUPP			//  a code code
 3992              		_DOLIT	0xF800D000 //0xF800F800
 3993              		_ADR	ANDD
 3994              		_DOLIT	0xF000D000 //0xF800F000
 3995              		_ADR	EQUAL			//  a code ?
 3996              		_ADR	INVER 
 3997              		_QBRAN	DECOM2	//  not a command
 3998              		//  a valid_code --, extract address and display name
 3999              		MOVW	IP,#0xFFE
 4000              		MOV	WP,TOS
 4001              		LSL	TOS,TOS,#21		//  get bits 22-12
 4002              		ASR	TOS,TOS,#9		//  with sign extension
 4003              		LSR	WP,WP,#15		//  get bits 11-1
 4004              		AND	WP,WP,IP		//  retain only bits 11-1
 4005              		ORR	TOS,TOS,WP		//  get bits 22-1
 4006              		NOP
 4007              		_ADR	OVER			//  a offset a
 4008              		_ADR	PLUS			//  a target-4
 4009              		_ADR	CELLP			//  a target
 4010              		_ADR	TNAME			//  a na/0 --, is it a name?
 4011              		_ADR	QDUP			//  name address or zero
 4012              		_QBRAN	DECOM1
 4013              		_ADR	SPACE			//  a na
 4014              		_ADR	DOTID			//  a --, display name
 4015              	// 	_ADR	RFROM			//  a
 4016              		_ADR	DROP
ARM GAS  forth.s 			page 174


 4017              		_UNNEST
 4018              	DECOM1:	// _ADR	RFROM		//  a
 4019              		_ADR	AT			//  data
 4020              		_ADR	UDOT			//  display data
 4021              		_UNNEST
 4022              	DECOM2:
 4023              		_ADR	UDOT
 4024              	// 	_ADR	RFROM
 4025              		_ADR	DROP
 4026              		_UNNEST
 4027              	.endif 
 4028              	
 4029              	/**********************
 4030              		VLIST ( -- )
 4031              		WORDS alias 
 4032              		+ display words count 
 4033              	**********************/
 4034 4d6c 2C4D0000 		_HEADER VLIST,5,"VLIST"
 4034      05564C49 
 4034      535400BF 
 4035 4d78 504700BF 		_NEST 
 4036 4d7c 9D4D0000 		_ADR WORDS
 4037 4d80 55380000 		_ADR CR 
 4038 4d84 E14D0000 		_ADR WC
 4039 4d88 69390000 		_ADR DOT    
 4040 4d8c 7B250000 		_UNNEST 
 4041              	
 4042              	/*********************
 4043              	    WORDS	( -- )
 4044              	 	Display the names 
 4045              		in the context vocabulary.
 4046              	*******************************/
 4047 4d90 704D0000 		_HEADER WORDS,5,"WORDS"
 4047      05574F52 
 4047      445300BF 
 4048 4d9c 504700BF 		_NEST
 4049 4da0 55380000 		_ADR	CR
 4050 4da4 652E0000 		_ADR	CNTXT
 4051 4da8 C1270000 		_ADR	AT			// only in context
 4052              	WORS1:
 4053 4dac A92A0000 		_ADR	QDUP			// ?at end of list
 4054 4db0 7B270000 		_QBRAN	WORS2
 4054      D44D0000 
 4055 4db8 D5280000 		_ADR	DUPP
 4056 4dbc CD370000 		_ADR	SPACE
 4057 4dc0 314D0000 		_ADR	DOTID			// display a name
 4058 4dc4 452A0000 		_ADR	CELLM
 4059 4dc8 C1270000 		_ADR	AT
 4060 4dcc 8F270000 		_BRAN	WORS1
 4060      AC4D0000 
 4061              	WORS2:
 4062 4dd4 7B250000 		_UNNEST
 4063              	
 4064              	/*****************************
 4065              		WC ( - n )
 4066              		count words in dictionary 
 4067              	******************************/
ARM GAS  forth.s 			page 175


 4068 4dd8 944D0000 		_HEADER WC,2,"WC"
 4068      02574300 
 4069 4de0 504700BF 		_NEST 
 4070 4de4 3B270000 		_DOLIT 0 
 4070      00000000 
 4071 4dec A52E0000 		_ADR LAST
 4072 4df0 C1270000 	1:	_ADR AT
 4073 4df4 A92A0000 		_ADR QDUP
 4074 4df8 7B270000 		_QBRAN 9f
 4074      184E0000 
 4075 4e00 E5280000 		_ADR SWAP
 4076 4e04 F5290000 		_ADR ONEP
 4077 4e08 E5280000 		_ADR SWAP
 4078 4e0c 452A0000 		_ADR CELLM
 4079 4e10 8F270000 		_BRAN 1b
 4079      F04D0000 
 4080 4e18 7B250000 	9:	_UNNEST 
 4081              	
 4082              	/*************************
 4083              		MARK <string> ( -- )
 4084              	    create forget point 
 4085              		in dictionary 
 4086              	*************************/	
 4087 4e1c DC4D0000 		_HEADER MARK,4,"MARK"
 4087      044D4152 
 4087      4B0000BF 
 4088 4e28 504700BF 		_NEST
 4089 4e2c 0D4A0000 		_ADR CREAT 
 4090 4e30 01490000 		_ADR DODOES 
 4091 4e34 7B250000 		_UNNEST
 4092 4e38 504700BF 		_NEST  
 4093 4e3c 0D280000 		_ADR RFROM 
 4094 4e40 3B270000 		_DOLIT 8
 4094      08000000 
 4095 4e48 A9290000 		_ADR SUBB
 4096 4e4c D94C0000 		_ADR TNAME
 4097 4e50 452A0000 		_ADR CELLM
 4098 4e54 C1270000 		_ADR AT  
 4099 4e58 A52E0000 		_ADR LAST 
 4100 4e5c AD270000 		_ADR STORE 
 4101 4e60 ED470000 		_ADR OVERT
 4102 4e64 7B250000 		_UNNEST 
 4103              	
 4104              	/****************
 4105              	  cold start
 4106              	*****************/
 4107              	
 4108              	/**********************************
 4109              	    VER	 ( -- n )
 4110              	 	Return the version 
 4111              		number of this implementation.
 4112              	hidden word used by COLD
 4113              	**********************************/
 4114              	VERSN:
 4115 4e68 504700BF 		_NEST
 4116 4e6c 3B270000 		_DOLIT	VER*256+EXT
 4116      00010000 
ARM GAS  forth.s 			page 176


 4117 4e74 7B250000 		_UNNEST
 4118              	
 4119              	/*********************
 4120              	    hi	  ( -- )
 4121              	 	Display the sign-on 
 4122              		message.
 4123              	***********************/
 4124 4e78 204E0000 		_HEADER HI,2,"HI"
 4124      02484900 
 4125 4e80 504700BF 		_NEST
 4126 4e84 55380000 		_ADR	CR	// initialize I/O
 4127 4e88 BD380000 		_DOTQP	17, "beyond Jupiter, v" 
 4127      11626579 
 4127      6F6E6420 
 4127      4A757069 
 4127      7465722C 
 4128 4ea0 D12D0000 		_ADR	BASE
 4129 4ea4 C1270000 		_ADR	AT
 4130 4ea8 31350000 		_ADR	HEX	// save radix
 4131 4eac 694E0000 		_ADR	VERSN
 4132 4eb0 15340000 		_ADR	BDIGS
 4133 4eb4 3B270000 		_DOLIT  0 
 4133      00000000 
 4134 4ebc 61340000 		_ADR	DIG
 4135 4ec0 61340000 		_ADR	DIG
 4136 4ec4 3B270000 		_DOLIT	'.'
 4136      2E000000 
 4137 4ecc 35340000 		_ADR	HOLD
 4138 4ed0 81340000 		_ADR	DIGS
 4139 4ed4 DD340000 		_ADR	EDIGS
 4140 4ed8 21380000 		_ADR	TYPEE	// format version number
 4141 4edc D12D0000 		_ADR	BASE
 4142 4ee0 AD270000 		_ADR	STORE
 4143 4ee4 55380000 		_ADR	CR
 4144 4ee8 7B250000 		_UNNEST			// restore radix
 4145              	
 4146              	/***********************
 4147              	   HI_BOTH ( -- )
 4148              	   display sign-on 
 4149              	   on both CONSOLE
 4150              	***********************/
 4151              	HI_BOTH:
 4152 4eec 504700BF 	    _NEST 
 4153 4ef0 F5070000 		_ADR LOCAL 
 4154 4ef4 25080000 		_ADR CONSOLE 
 4155 4ef8 814E0000 		_ADR HI 
 4156 4efc 0D080000 		_ADR SERIAL 
 4157 4f00 25080000 		_ADR CONSOLE 
 4158 4f04 814E0000 		_ADR HI
 4159 4f08 7B250000 		_UNNEST 
 4160              	
 4161              	/**********************
 4162              	 check if PS2 keyboard 
 4163              	 present.
 4164              	**********************/
 4165              	PS2_QUERY: 
 4166 4f0c 504700BF 		_NEST 
ARM GAS  forth.s 			page 177


 4167 4f10 3B270000 		_DOLIT 400 
 4167      90010000 
 4168 4f18 DD260000 		_ADR PAUSE
 4169 4f1c 2D160000 		_ADR PS2_QKEY
 4170 4f20 7B270000 		_QBRAN 1f
 4170      3C4F0000 
 4171 4f28 3B270000 		_DOLIT BAT_OK 
 4171      AA000000 
 4172 4f30 41290000 		_ADR XORR 
 4173 4f34 7B270000 		_QBRAN 9f 
 4173      804F0000 
 4174 4f3c 15180000 	1:	_ADR KBD_RST
 4175 4f40 3B270000 		_DOLIT BAT_OK 
 4175      AA000000 
 4176 4f48 41290000 		_ADR XORR  
 4177 4f4c 7B270000 		_QBRAN 9f  
 4177      804F0000 
 4178              	// no ps2 keyboard 
 4179              	// swith to serial console
 4180 4f54 55380000 		_ADR CR 
 4181 4f58 BD380000 		_DOTQP 25,"no PS2 keyboard detected."
 4181      196E6F20 
 4181      50533220 
 4181      6B657962 
 4181      6F617264 
 4182 4f78 0D080000 		_ADR SERIAL 
 4183 4f7c 25080000 		_ADR CONSOLE 
 4184 4f80 7B250000 	9:	_UNNEST 
 4185              	
 4186              	/*************************
 4187              	   check PA8 to 
 4188              	   select console 
 4189              	   PA8 -> low  LOCAL 
 4190              	   PA8 -> high SERIAL 
 4191              	*************************/
 4192              	IF_SENSE:
 4193 4f84 504700BF 		_NEST 
 4194 4f88 F5070000 		_ADR LOCAL 
 4195 4f8c 3B270000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4195      10000240 
 4196 4f94 C1270000 		_ADR AT 
 4197 4f98 3B270000 		_DOLIT (1<<8)
 4197      00010000 
 4198 4fa0 19290000 		_ADR ANDD 
 4199 4fa4 7B270000 		_QBRAN 9f 
 4199      B04F0000 
 4200 4fac F5290000 		_ADR ONEP 
 4201 4fb0 25080000 	9:  _ADR CONSOLE 
 4202 4fb4 7B250000 		_UNNEST 
 4203              	
 4204              	/****************************
 4205              	   display READY on active
 4206              	   console
 4207              	***************************/
 4208              	READY:
 4209 4fb8 504700BF 	    _NEST 
 4210 4fbc BD380000 		_DOTQP 5,"READY"
ARM GAS  forth.s 			page 178


 4210      05524541 
 4210      445900BF 
 4211 4fc8 55380000 		_ADR  CR 
 4212 4fcc 7B250000 	    _UNNEST 
 4213              	
 4214              	/********************
 4215              	    COLD	( -- )
 4216              	 	The high level cold 
 4217              		start sequence.
 4218              	**************************/
 4219 4fd0 7C4E0000 		.word	LINK 
 4220              		LINK = . 
 4221 4fd4 04       	_LASTN:	.byte  4
 4222 4fd5 434F4C44 		.ascii "COLD"
 4223 4fd9 0000BF   		.p2align 2	
 4224              	COLD:
 4225 4fdc 00B5FBF7 		_CALL forth_init 
 4225      DDF95DF8 
 4225      04EB
 4226 4fe6 DFF858C0 		ldr IP,=COLD1 
 4227 4fea FDF7C3BA 		_NEXT
 4228 4fee 00BF     		.p2align 2 
 4229              	COLD1:
 4230 4ff0 3B270000 		_DOLIT  0 
 4230      00000000 
 4231 4ff8 11270000 		_ADR ULED // turn off user LED 
 4232 4ffc 3B270000 		_DOLIT	UZERO
 4232      28060000 
 4233 5004 3B270000 		_DOLIT	UPP
 4233      00000020 
 4234 500c 3B270000 		_DOLIT	ULAST-UZERO
 4234      B0000000 
 4235 5014 ED320000 		_ADR	MOVE 			// initialize user area
 4236 5018 05420000 		_ADR	PRESE			// initialize stack and TIB
 4237 501c C11A0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4238 5020 0D4F0000 		_ADR 	PS2_QUERY  
 4239 5024 B92D0000 		_ADR	TBOOT
 4240 5028 9D320000 		_ADR	ATEXE			// application boot
 4241 502c ED470000 		_ADR	OVERT
 4242 5030 854F0000 		_ADR	IF_SENSE
 4243 5034 8F270000 		_BRAN	QUIT			// start interpretation
 4243      24420000 
 4244              	COLD2:
 4245              		.p2align 2 	
 4246              	CTOP:
 4247 503c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4248              	
 4249              	
 4250 5040 F04F0000 	  .end 
ARM GAS  forth.s 			page 179


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 180


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 181


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 182


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 183


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 184


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 185


             forth.s:2975   .text:00000000000041c0 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:393    .text:0000000000000360 reset_handler
              init.s:222    .text:0000000000000104 nmi_handler
              init.s:240    .text:000000000000013c hardfault_handler
              init.s:259    .text:0000000000000178 memfault_handler
              init.s:286    .text:00000000000001e4 busfault_handler
              init.s:319    .text:0000000000000278 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:345    .text:00000000000002dc systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000a34 tv_out_isr
          ser-term.s:35     .text:0000000000000700 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001310 kbd_isr
              init.s:196    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:414    .text:000000000000039c forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002574 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2996   .text:0000000000004204 PRESE
             forth.s:2228   .text:00000000000038bc DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:00000000000025c4 CFSR
             forth.s:507    .text:00000000000028d4 DUPP
             forth.s:442    .text:0000000000002850 TOR
             forth.s:292    .text:000000000000273a DOLIT
             forth.s:1132   .text:0000000000002dd0 BASE
             forth.s:363    .text:00000000000027ac STORE
             forth.s:2278   .text:0000000000003940 UDOT
ARM GAS  forth.s 			page 186


              init.s:171    .text:0000000000000064 $d
             forth.s:413    .text:000000000000280c RFROM
             forth.s:542    .text:0000000000002918 ANDD
             forth.s:333    .text:000000000000277a QBRAN
             forth.s:144    .text:00000000000025e8 BFAR
             forth.s:178    .text:0000000000002644 EMIT
             forth.s:2124   .text:00000000000037cc SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:54     .text:0000000000001d8c FPSCR
              init.s:375    .text:0000000000000338 reset_mcu
              init.s:195    .text:00000000000000b0 $t
              init.s:201    .text:00000000000000c2 fpu_except
              init.s:202    .text:00000000000000c2 $d
             forth.s:2170   .text:0000000000003854 CR
              init.s:208    .text:00000000000000f4 $d
              init.s:220    .text:0000000000000104 $t
              init.s:225    .text:000000000000010c nmi_hl
              init.s:226    .text:000000000000010c $d
              init.s:228    .text:0000000000000132 $t
              init.s:229    .text:0000000000000134 $d
             forth.s:2874   .text:000000000000407c ABORT
              init.s:238    .text:000000000000013c $t
              init.s:245    .text:000000000000014e hardfault_hl
              init.s:246    .text:000000000000014e $d
              init.s:249    .text:0000000000000170 $d
              init.s:257    .text:0000000000000178 $t
              init.s:264    .text:000000000000018a memfault_hl
              init.s:265    .text:000000000000018a $d
              init.s:268    .text:00000000000001b8 $d
              init.s:284    .text:00000000000001e4 $t
              init.s:291    .text:00000000000001f6 busfault_hl
              init.s:292    .text:00000000000001f6 $d
             forth.s:261    .text:0000000000002710 ULED
             forth.s:1105   .text:0000000000002d88 MSEC
              init.s:300    .text:000000000000023e $t
              init.s:301    .text:0000000000000240 $d
              init.s:308    .text:000000000000026c $d
              init.s:317    .text:0000000000000278 $t
              init.s:324    .text:000000000000028a usagefault_hl
              init.s:325    .text:000000000000028a $d
              init.s:327    .text:00000000000002ae $t
              init.s:328    .text:00000000000002b0 $d
             forth.s:581    .text:0000000000002970 RSHIFT
              init.s:343    .text:00000000000002dc $t
              init.s:354    .text:00000000000002f6 systick_exit
              init.s:357    .text:00000000000002f8 user_reboot
              init.s:361    .text:000000000000030a ur
              init.s:362    .text:000000000000030a $d
              init.s:370    .text:0000000000000328 user_reboot_msg
             forth.s:1045   .text:0000000000002d28 COUNT
             forth.s:2152   .text:0000000000003820 TYPEE
              init.s:369    .text:0000000000000326 $t
              init.s:371    .text:0000000000000328 $d
              init.s:518    .text:000000000000049c remap
              init.s:427    .text:00000000000003c4 init_devices
               fpu.s:36     .text:0000000000001d54 fpu_init
ARM GAS  forth.s 			page 187


          ser-term.s:56     .text:000000000000072e ser_init
             tvout.s:74     .text:0000000000000984 tv_init
           ps2_kbd.s:307    .text:0000000000001530 kbd_init
         spi-flash.s:41     .text:0000000000001944 flash_spi_init
             forth.s:4224   .text:0000000000004fdc COLD
             forth.s:83     .text:000000000000256c NEST
              init.s:440    .text:00000000000003e2 wait_hserdy
              init.s:461    .text:0000000000000404 wait_pllrdy
              init.s:473    .text:000000000000041e wait_sws
              init.s:608    .text:0000000000000566 gpio_config
              init.s:683    .text:0000000000000612 gpio_out
              init.s:543    .text:00000000000004dc nvic_set_priority
              init.s:698    .text:0000000000000628 UZERO
              init.s:736    .text:00000000000006d8 ULAST
              init.s:552    .text:00000000000004f4 negative_irq
              init.s:564    .text:000000000000050e nvic_enable_irq
              init.s:581    .text:0000000000000538 nvic_disable_irq
              init.s:645    .text:00000000000005ce input_pull
              init.s:638    .text:00000000000005bc output_type
              init.s:661    .text:00000000000005e4 gpio_speed
              init.s:699    .text:0000000000000628 $d
             forth.s:4151   .text:0000000000004eec HI_BOTH
           ps2_kbd.s:396    .text:000000000000162c PS2_QKEY
             tvout.s:563    .text:0000000000000ef4 TV_EMIT
             forth.s:2912   .text:00000000000040dc INTER
             forth.s:4221   .text:0000000000004fd4 _LASTN
             forth.s:4246   .text:000000000000503c CTOP
             forth.s:4220   .text:0000000000004fd4 LINK
              init.s:741    .text:00000000000006d8 $d
          ser-term.s:33     .text:0000000000000700 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000786 $d
          ser-term.s:90     .text:000000000000078a _SER_QKEY
          ser-term.s:90     .text:0000000000000794 SER_QKEY
          ser-term.s:110    .text:00000000000007c0 $d
          ser-term.s:110    .text:00000000000007c4 _SER_EMIT
          ser-term.s:110    .text:00000000000007d0 SER_EMIT
          ser-term.s:124    .text:00000000000007ea $d
          ser-term.s:124    .text:00000000000007ee _LOCAL
          ser-term.s:124    .text:00000000000007f4 $t
          ser-term.s:124    .text:00000000000007f4 LOCAL
          ser-term.s:133    .text:0000000000000800 $d
          ser-term.s:133    .text:0000000000000804 _SERIAL
          ser-term.s:133    .text:000000000000080c SERIAL
          ser-term.s:142    .text:0000000000000818 $d
          ser-term.s:142    .text:000000000000081c _CONSOLE
          ser-term.s:142    .text:0000000000000824 $t
          ser-term.s:142    .text:0000000000000824 CONSOLE
             forth.s:4208   .text:0000000000004fb8 READY
          ser-term.s:166    .text:0000000000000858 $d
          ser-term.s:166    .text:000000000000085c _ANSI_PARAM
          ser-term.s:166    .text:0000000000000868 ANSI_PARAM
          ser-term.s:168    .text:000000000000086c $d
             forth.s:649    .text:00000000000029f4 ONEP
             forth.s:1495   .text:0000000000003100 SLMOD
             forth.s:738    .text:0000000000002aa8 QDUP
             forth.s:348    .text:000000000000278e BRAN
ARM GAS  forth.s 			page 188


             forth.s:599    .text:0000000000002998 PLUS
             forth.s:657    .text:0000000000002a04 ONEM
             forth.s:90     .text:000000000000257a UNNEST
          ser-term.s:193    .text:00000000000008d8 _ANSI_ESC
          ser-term.s:193    .text:00000000000008e0 ANSI_ESC
          ser-term.s:195    .text:00000000000008e4 $d
          ser-term.s:205    .text:0000000000000904 _SER_AT
          ser-term.s:205    .text:000000000000090c SER_AT
          ser-term.s:207    .text:0000000000000910 $d
             forth.s:515    .text:00000000000028e4 SWAP
          ser-term.s:221    .text:0000000000000940 _SER_CLS
          ser-term.s:221    .text:0000000000000948 $t
          ser-term.s:221    .text:0000000000000948 SER_CLS
          ser-term.s:223    .text:000000000000094c $d
          ser-term.s:230    .text:0000000000000970 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000984 $t
             tvout.s:150    .text:0000000000000a60 state_vsync
             tvout.s:191    .text:0000000000000ab4 state_pre_video
             tvout.s:202    .text:0000000000000ac6 state_video_out
             tvout.s:237    .text:0000000000000b24 state_post_video
             tvout.s:254    .text:0000000000000b4a tv_isr_exit
             tvout.s:180    .text:0000000000000a9a sync_end
             tvout.s:246    .text:0000000000000b36 frame_end
             tvout.s:264    .text:0000000000000b4c $d
             tvout.s:264    .text:0000000000000b50 _BACKCOLOR
             tvout.s:264    .text:0000000000000b5c BACKCOLOR
             tvout.s:271    .text:0000000000000b68 $d
ARM GAS  forth.s 			page 189


             tvout.s:271    .text:0000000000000b6c _PENCOLOR
             tvout.s:271    .text:0000000000000b76 $t
             tvout.s:271    .text:0000000000000b78 PENCOLOR
             tvout.s:278    .text:0000000000000b84 $d
             tvout.s:278    .text:0000000000000b88 _CURSOR_COL
             tvout.s:278    .text:0000000000000b90 CURSOR_COL
             tvout.s:285    .text:0000000000000b9c $d
             tvout.s:285    .text:0000000000000ba0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000ba4 $t
             tvout.s:285    .text:0000000000000ba4 CURSOR_ROW
             tvout.s:292    .text:0000000000000bb0 $d
             tvout.s:292    .text:0000000000000bb4 _ROWY
             tvout.s:292    .text:0000000000000bba $t
             tvout.s:292    .text:0000000000000bbc ROWY
             tvout.s:299    .text:0000000000000bc8 $d
             tvout.s:299    .text:0000000000000bcc _COLX
             tvout.s:299    .text:0000000000000bd2 $t
             tvout.s:299    .text:0000000000000bd4 COLX
             tvout.s:306    .text:0000000000000be0 $d
             tvout.s:306    .text:0000000000000be4 _FONT
             tvout.s:306    .text:0000000000000bec FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000bf8 $d
             tvout.s:313    .text:0000000000000bfc _VIDBUFF
             tvout.s:313    .text:0000000000000c04 $t
             tvout.s:313    .text:0000000000000c04 VIDBUFF
             tvout.s:325    .text:0000000000000c0e $d
             tvout.s:325    .text:0000000000000c12 _PLOT
             tvout.s:325    .text:0000000000000c18 PLOT
             tvout.s:373    .text:0000000000000c9c plot_op
             tvout.s:341    .text:0000000000000c44 op_back
             tvout.s:350    .text:0000000000000c5e op_pen
             tvout.s:359    .text:0000000000000c78 op_invert
             tvout.s:363    .text:0000000000000c80 op_xor
             tvout.s:373    .text:0000000000000c9c $d
             tvout.s:378    .text:0000000000000ca4 _VSYNC
             tvout.s:378    .text:0000000000000caa $t
             tvout.s:378    .text:0000000000000cac VSYNC
             tvout.s:386    .text:0000000000000cb6 $d
             tvout.s:386    .text:0000000000000cba _CLS
             tvout.s:386    .text:0000000000000cbe $t
             tvout.s:386    .text:0000000000000cc0 CLS
             tvout.s:410    .text:0000000000000d02 $d
             tvout.s:410    .text:0000000000000d06 _CLRLINE
             tvout.s:410    .text:0000000000000d0e $t
             tvout.s:410    .text:0000000000000d10 CLRLINE
             tvout.s:412    .text:0000000000000d14 $d
             forth.s:617    .text:00000000000029b8 STAR
             forth.s:1722   .text:0000000000003334 FILL
             tvout.s:427    .text:0000000000000d48 _SCROLLUP
             tvout.s:427    .text:0000000000000d54 SCROLLUP
             tvout.s:429    .text:0000000000000d58 $d
             forth.s:608    .text:00000000000029a8 SUBB
             forth.s:1690   .text:00000000000032ec MOVE
             tvout.s:448    .text:0000000000000da0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000dac SCROLLDOWN
             tvout.s:450    .text:0000000000000db0 $d
ARM GAS  forth.s 			page 190


             tvout.s:467    .text:0000000000000df0 _TV_CRLF
             tvout.s:467    .text:0000000000000df8 $t
             tvout.s:467    .text:0000000000000df8 TV_CRLF
             tvout.s:482    .text:0000000000000e1a $d
             tvout.s:482    .text:0000000000000e1e _RIGHT
             tvout.s:482    .text:0000000000000e24 $t
             tvout.s:482    .text:0000000000000e24 RIGHT
             tvout.s:495    .text:0000000000000e38 $d
             tvout.s:495    .text:0000000000000e3c _LEFT
             tvout.s:495    .text:0000000000000e44 LEFT
             tvout.s:511    .text:0000000000000e70 FONT_PIXEL
             tvout.s:518    .text:0000000000000e80 INCR_X
             tvout.s:525    .text:0000000000000e8c NEXT_PIXEL
             tvout.s:534    .text:0000000000000e94 CHAR_ROW
             tvout.s:536    .text:0000000000000e98 $d
             forth.s:788    .text:0000000000002b0c DDUP
             forth.s:433    .text:000000000000283c RAT
             forth.s:314    .text:000000000000275c DONXT
             forth.s:779    .text:0000000000002af8 TDROP
             tvout.s:551    .text:0000000000000ed4 CHAR_FONT
             tvout.s:552    .text:0000000000000ed4 $t
             tvout.s:563    .text:0000000000000ee8 $d
             tvout.s:563    .text:0000000000000eec _TV_EMIT
             tvout.s:563    .text:0000000000000ef4 $t
             tvout.s:565    .text:0000000000000ef8 $d
             forth.s:941    .text:0000000000002c58 ULESS
             tvout.s:593    .text:0000000000000f7c CTRL_KEY
             forth.s:373    .text:00000000000027c0 AT
             forth.s:748    .text:0000000000002abc ROT
             forth.s:391    .text:00000000000027e0 CAT
             tvout.s:660    .text:0000000000001064 SHOW_CURSOR
             tvout.s:691    .text:00000000000010ec HIDE_CURSOR
             forth.s:916    .text:0000000000002c20 EQUAL
             tvout.s:650    .text:0000000000001044 BACK_SPACE
             forth.s:499    .text:00000000000028c4 DROP
             tvout.s:618    .text:0000000000000fec CAR_RET
             tvout.s:629    .text:0000000000001004 LN_FEED
             tvout.s:619    .text:0000000000000fec $t
             tvout.s:620    .text:0000000000000ff0 $d
             tvout.s:630    .text:0000000000001004 $t
             tvout.s:631    .text:0000000000001008 $d
             forth.s:560    .text:0000000000002940 XORR
             tvout.s:651    .text:0000000000001044 $t
             tvout.s:652    .text:0000000000001048 $d
             tvout.s:660    .text:0000000000001058 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001064 $t
             tvout.s:663    .text:0000000000001068 $d
             forth.s:730    .text:0000000000002a98 TWOSL
             forth.s:381    .text:00000000000027cc CSTOR
             forth.s:770    .text:0000000000002ae4 DDROP
             tvout.s:691    .text:00000000000010e0 _HIDE_CURSOR
             tvout.s:691    .text:00000000000010ec $t
             tvout.s:694    .text:00000000000010f0 $d
             forth.s:590    .text:0000000000002988 LSHIFT
             forth.s:551    .text:000000000000292c ORR
             tvout.s:704    .text:0000000000001118 _TV_AT
             tvout.s:704    .text:000000000000111e $t
ARM GAS  forth.s 			page 191


             tvout.s:704    .text:0000000000001120 TV_AT
             tvout.s:719    .text:0000000000001144 $d
             tvout.s:719    .text:0000000000001148 _INPUT
             tvout.s:719    .text:000000000000114e $t
             tvout.s:719    .text:0000000000001150 INPUT
             tvout.s:721    .text:0000000000001154 $d
             forth.s:1634   .text:0000000000003264 PAD
             forth.s:2820   .text:0000000000003fc8 ACCEP
             forth.s:525    .text:00000000000028f8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001180 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
ARM GAS  forth.s 			page 192


       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
ARM GAS  forth.s 			page 193


       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000118c sc_ascii
         mcSaite.inc:100    .text:0000000000001240 shifted
         mcSaite.inc:151    .text:00000000000012a0 altchar
         mcSaite.inc:167    .text:00000000000012b0 extended
         mcSaite.inc:191    .text:00000000000012d8 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000130e $t
           ps2_kbd.s:179    .text:000000000000143a send_bit
           ps2_kbd.s:107    .text:0000000000001370 start_bit
           ps2_kbd.s:118    .text:0000000000001394 parity_bit
           ps2_kbd.s:125    .text:00000000000013a8 stop_bit
           ps2_kbd.s:152    .text:00000000000013fe store_code
ARM GAS  forth.s 			page 194


           ps2_kbd.s:253    .text:00000000000014ce do_async_key
           ps2_kbd.s:204    .text:000000000000147e send_parity
           ps2_kbd.s:211    .text:0000000000001490 send_stop
           ps2_kbd.s:218    .text:000000000000149a rx_ack_bit
           ps2_kbd.s:236    .text:00000000000014ba is_async_key
           ps2_kbd.s:286    .text:000000000000151e async_keys
           ps2_kbd.s:378    .text:0000000000001604 table_scan
           ps2_kbd.s:260    .text:00000000000014e0 set_async_key
           ps2_kbd.s:295    .text:000000000000152c async_jump
           ps2_kbd.s:265    .text:00000000000014ee shift_key
           ps2_kbd.s:273    .text:00000000000014fe set_reset
           ps2_kbd.s:268    .text:00000000000014f4 ctrl_key
           ps2_kbd.s:271    .text:00000000000014fa alt_key
           ps2_kbd.s:287    .text:000000000000151e $d
           ps2_kbd.s:340    .text:00000000000015ac $d
           ps2_kbd.s:340    .text:00000000000015b0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000015ba $t
           ps2_kbd.s:340    .text:00000000000015bc KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000015cc keycode
           ps2_kbd.s:365    .text:00000000000015f4 wait_code
           ps2_kbd.s:396    .text:000000000000161e $d
           ps2_kbd.s:396    .text:0000000000001622 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001678 inkey_exit
           ps2_kbd.s:418    .text:000000000000167c pause_key
           ps2_kbd.s:427    .text:0000000000001692 do_modifiers
           ps2_kbd.s:436    .text:00000000000016aa shift_down
           ps2_kbd.s:440    .text:00000000000016b0 altchar_down
           ps2_kbd.s:444    .text:00000000000016b6 ctrl_down
           ps2_kbd.s:452    .text:00000000000016d2 do_capslock
           ps2_kbd.s:478    .text:00000000000016f6 kbd_send
           ps2_kbd.s:553    .text:00000000000017ea kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001808 $d
           ps2_kbd.s:567    .text:000000000000180c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001814 $t
           ps2_kbd.s:567    .text:0000000000001814 KBD_RST
           ps2_kbd.s:591    .text:000000000000185e $d
           ps2_kbd.s:591    .text:0000000000001862 _KBD_LED
           ps2_kbd.s:591    .text:000000000000186a $t
           ps2_kbd.s:591    .text:000000000000186c KBD_LED
           ps2_kbd.s:616    .text:00000000000018c0 $d
           ps2_kbd.s:616    .text:00000000000018c4 _CAPS_LED
           ps2_kbd.s:616    .text:00000000000018d0 CAPS_LED
           ps2_kbd.s:633    .text:00000000000018fa $d
           ps2_kbd.s:633    .text:00000000000018fe _WKEY
           ps2_kbd.s:633    .text:0000000000001908 WKEY
           ps2_kbd.s:635    .text:000000000000190c $d
           ps2_kbd.s:640    .text:0000000000001924 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001944 $t
         spi-flash.s:85     .text:00000000000019e6 $d
         spi-flash.s:85     .text:00000000000019ea _CHIP_SEL
         spi-flash.s:85     .text:00000000000019f4 CHIP_SEL
         spi-flash.s:97     .text:0000000000001a12 $d
         spi-flash.s:97     .text:0000000000001a16 _CHIP_DSEL
ARM GAS  forth.s 			page 195


         spi-flash.s:97     .text:0000000000001a20 $t
         spi-flash.s:97     .text:0000000000001a20 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001a4e $d
         spi-flash.s:113    .text:0000000000001a52 _RD_BYTE
         spi-flash.s:113    .text:0000000000001a5a $t
         spi-flash.s:113    .text:0000000000001a5c RD_BYTE
         spi-flash.s:133    .text:0000000000001a84 $d
         spi-flash.s:133    .text:0000000000001a88 _WR_BYTE
         spi-flash.s:133    .text:0000000000001a90 $t
         spi-flash.s:133    .text:0000000000001a90 WR_BYTE
         spi-flash.s:151    .text:0000000000001ab4 $d
         spi-flash.s:151    .text:0000000000001ab8 _WR_DIS
         spi-flash.s:151    .text:0000000000001ac0 WR_DIS
         spi-flash.s:153    .text:0000000000001ac4 $d
         spi-flash.s:163    .text:0000000000001ae0 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ae8 $t
         spi-flash.s:163    .text:0000000000001ae8 WR_ENBL
         spi-flash.s:165    .text:0000000000001aec $d
         spi-flash.s:175    .text:0000000000001b08 _RD_SR
         spi-flash.s:175    .text:0000000000001b0e $t
         spi-flash.s:175    .text:0000000000001b10 RD_SR
         spi-flash.s:177    .text:0000000000001b14 $d
         spi-flash.s:185    .text:0000000000001b38 sr_cmd
         spi-flash.s:191    .text:0000000000001b3f _SEND_ADR
         spi-flash.s:191    .text:0000000000001b48 $t
         spi-flash.s:191    .text:0000000000001b48 SEND_ADR
         spi-flash.s:193    .text:0000000000001b4c $d
         spi-flash.s:208    .text:0000000000001b80 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001b8a $t
         spi-flash.s:208    .text:0000000000001b8c WAIT_DONE
         spi-flash.s:210    .text:0000000000001b90 $d
         spi-flash.s:223    .text:0000000000001bc0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001bca $t
         spi-flash.s:223    .text:0000000000001bcc ERASE_BLK
         spi-flash.s:225    .text:0000000000001bd0 $d
         spi-flash.s:238    .text:0000000000001bf8 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001c04 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001c08 $d
         spi-flash.s:256    .text:0000000000001c38 _RD_BLK
         spi-flash.s:256    .text:0000000000001c40 RD_BLK
         spi-flash.s:258    .text:0000000000001c44 $d
         spi-flash.s:278    .text:0000000000001c8c _WR_BLK
         spi-flash.s:278    .text:0000000000001c94 WR_BLK
         spi-flash.s:280    .text:0000000000001c98 $d
             forth.s:2333   .text:00000000000039e0 HDOT
         spi-flash.s:316    .text:0000000000001cf0 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001cfc $t
         spi-flash.s:316    .text:0000000000001cfc SEARCH_FILE
         spi-flash.s:319    .text:0000000000001d00 $d
         spi-flash.s:325    .text:0000000000001d08 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001d14 ERASE_FILE
         spi-flash.s:328    .text:0000000000001d18 $d
         spi-flash.s:334    .text:0000000000001d20 _DIR
         spi-flash.s:334    .text:0000000000001d24 $t
         spi-flash.s:334    .text:0000000000001d24 DIR
         spi-flash.s:337    .text:0000000000001d28 $d
         spi-flash.s:343    .text:0000000000001d30 _SAVE
ARM GAS  forth.s 			page 196


         spi-flash.s:343    .text:0000000000001d38 SAVE
         spi-flash.s:346    .text:0000000000001d3c $d
         spi-flash.s:352    .text:0000000000001d44 _LOAD
         spi-flash.s:352    .text:0000000000001d4c LOAD
         spi-flash.s:355    .text:0000000000001d50 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:37     .text:0000000000001d54 $t
               fpu.s:54     .text:0000000000001d82 $d
               fpu.s:54     .text:0000000000001d86 _FPSCR
               fpu.s:54     .text:0000000000001d8c $t
               fpu.s:64     .text:0000000000001d9a $d
               fpu.s:64     .text:0000000000001d9e _CLR_FPSCR
               fpu.s:64     .text:0000000000001da8 $t
               fpu.s:64     .text:0000000000001da8 CLR_FPSCR
               fpu.s:75     .text:0000000000001db6 $d
               fpu.s:75     .text:0000000000001dba _TOS0
               fpu.s:75     .text:0000000000001dbe $t
               fpu.s:75     .text:0000000000001dc0 TOS0
               fpu.s:84     .text:0000000000001dca $d
               fpu.s:84     .text:0000000000001dce _TOS1
               fpu.s:84     .text:0000000000001dd2 $t
               fpu.s:84     .text:0000000000001dd4 TOS1
               fpu.s:93     .text:0000000000001dde $d
               fpu.s:93     .text:0000000000001de2 _TOS2
               fpu.s:93     .text:0000000000001de6 $t
               fpu.s:93     .text:0000000000001de8 TOS2
               fpu.s:102    .text:0000000000001df2 $d
               fpu.s:102    .text:0000000000001df6 _S0FROM
               fpu.s:102    .text:0000000000001dfa $t
               fpu.s:102    .text:0000000000001dfc S0FROM
               fpu.s:111    .text:0000000000001e06 $d
               fpu.s:111    .text:0000000000001e0a _S1FROM
               fpu.s:111    .text:0000000000001e0e $t
               fpu.s:111    .text:0000000000001e10 S1FROM
               fpu.s:120    .text:0000000000001e1a $d
               fpu.s:120    .text:0000000000001e1e _S2FROM
               fpu.s:120    .text:0000000000001e22 $t
               fpu.s:120    .text:0000000000001e24 S2FROM
               fpu.s:131    .text:0000000000001e2e $d
               fpu.s:131    .text:0000000000001e32 _FTOS
               fpu.s:131    .text:0000000000001e36 $t
               fpu.s:131    .text:0000000000001e38 FTOS
               fpu.s:141    .text:0000000000001e46 $d
               fpu.s:141    .text:0000000000001e4a _TRUNC
               fpu.s:141    .text:0000000000001e50 $t
               fpu.s:141    .text:0000000000001e50 TRUNC
               fpu.s:151    .text:0000000000001e5e $d
               fpu.s:151    .text:0000000000001e62 _STOF
               fpu.s:151    .text:0000000000001e66 $t
               fpu.s:151    .text:0000000000001e68 STOF
               fpu.s:161    .text:0000000000001e76 $d
               fpu.s:161    .text:0000000000001e7a _FPLUS
               fpu.s:161    .text:0000000000001e80 FPLUS
               fpu.s:174    .text:0000000000001e96 $d
               fpu.s:174    .text:0000000000001e9a _FMINUS
ARM GAS  forth.s 			page 197


               fpu.s:174    .text:0000000000001ea0 FMINUS
               fpu.s:188    .text:0000000000001eb6 $d
               fpu.s:188    .text:0000000000001eba _FSTAR
               fpu.s:188    .text:0000000000001ec0 FSTAR
               fpu.s:201    .text:0000000000001ed6 $d
               fpu.s:201    .text:0000000000001eda _FSLH
               fpu.s:201    .text:0000000000001ee0 FSLH
               fpu.s:214    .text:0000000000001ef6 $d
               fpu.s:214    .text:0000000000001efa _FNEG
               fpu.s:214    .text:0000000000001f02 $t
               fpu.s:214    .text:0000000000001f04 FNEG
               fpu.s:224    .text:0000000000001f12 $d
               fpu.s:224    .text:0000000000001f16 _FABS
               fpu.s:224    .text:0000000000001f1c FABS
               fpu.s:236    .text:0000000000001f2e $d
               fpu.s:236    .text:0000000000001f32 _SQRT
               fpu.s:236    .text:0000000000001f38 SQRT
               fpu.s:246    .text:0000000000001f46 $d
               fpu.s:246    .text:0000000000001f4a _FZLESS
               fpu.s:246    .text:0000000000001f4e $t
               fpu.s:246    .text:0000000000001f50 FZLESS
               fpu.s:258    .text:0000000000001f66 $d
               fpu.s:258    .text:0000000000001f6a _FGREAT
               fpu.s:258    .text:0000000000001f70 FGREAT
               fpu.s:260    .text:0000000000001f74 $d
             forth.s:856    .text:0000000000002ba4 INVER
               fpu.s:269    .text:0000000000001f88 _FLESS
               fpu.s:269    .text:0000000000001f8c FLESS
               fpu.s:271    .text:0000000000001f90 $d
               fpu.s:279    .text:0000000000001fa0 _FMIN
               fpu.s:279    .text:0000000000001fa8 FMIN
               fpu.s:281    .text:0000000000001fac $d
               fpu.s:292    .text:0000000000001fd0 _FMAX
               fpu.s:292    .text:0000000000001fd8 FMAX
               fpu.s:294    .text:0000000000001fdc $d
               fpu.s:307    .text:0000000000002000 _FSIGN
               fpu.s:307    .text:0000000000002006 $t
               fpu.s:307    .text:0000000000002008 FSIGN
               fpu.s:318    .text:000000000000201a $d
               fpu.s:318    .text:000000000000201e _FEXP
               fpu.s:318    .text:0000000000002024 FEXP
               fpu.s:329    .text:000000000000203a $d
               fpu.s:329    .text:000000000000203e _FMANT
               fpu.s:329    .text:0000000000002044 $t
               fpu.s:329    .text:0000000000002044 FMANT
               fpu.s:342    .text:000000000000205e $d
               fpu.s:342    .text:0000000000002062 _PI
               fpu.s:342    .text:0000000000002068 PI
               fpu.s:351    .text:0000000000002076 $d
               fpu.s:351    .text:000000000000207a _LOG2
               fpu.s:351    .text:0000000000002080 LOG2
               fpu.s:361    .text:000000000000208e $d
               fpu.s:361    .text:0000000000002092 _LOG2TO10
               fpu.s:361    .text:000000000000209a $t
               fpu.s:361    .text:000000000000209c LOG2TO10
               fpu.s:363    .text:00000000000020a0 $d
             forth.s:534    .text:0000000000002908 ZLESS
ARM GAS  forth.s 			page 198


               fpu.s:381    .text:00000000000020d0 _NUMBER
               fpu.s:381    .text:00000000000020d8 NUMBER
               fpu.s:383    .text:00000000000020dc $d
             forth.s:2051   .text:00000000000036b8 INTQ
            strtof.s:184    .text:00000000000022e4 FLOATQ
               fpu.s:388    .text:00000000000020f8 $d
            strtof.s:32     .text:00000000000020fc powersof10
            strtof.s:39     *ABS*:0000000000000000 fzero
            strtof.s:40     *ABS*:000000003f800000 fone
            strtof.s:41     *ABS*:00000000bf800000 fminus1
            strtof.s:42     *ABS*:0000000041200000 ften
            strtof.s:46     .text:0000000000002114 power10
            strtof.s:47     .text:0000000000002114 $t
            strtof.s:48     .text:0000000000002118 $d
            strtof.s:60     .text:0000000000002138 bit_state
            strtof.s:61     .text:0000000000002138 $t
            strtof.s:62     .text:000000000000213c $d
             forth.s:1605   .text:0000000000003224 PICK
            strtof.s:74     .text:000000000000215c mult_div_exp
            strtof.s:75     .text:000000000000215c $t
            strtof.s:76     .text:0000000000002160 $d
             forth.s:759    .text:0000000000002ad0 NROT
            strtof.s:102    .text:00000000000021dc pos_exp
             forth.s:872    .text:0000000000002bc8 ABSS
            strtof.s:87     .text:0000000000002194 div_loop
             forth.s:977    .text:0000000000002ca0 GREAT
            strtof.s:104    .text:00000000000021e0 mult_loop
            strtof.s:127    .text:0000000000002234 div_fract
            strtof.s:128    .text:0000000000002234 $t
            strtof.s:129    .text:0000000000002238 $d
            strtof.s:145    .text:000000000000226c decimals
            strtof.s:146    .text:000000000000226c $t
            strtof.s:147    .text:0000000000002270 $d
             forth.s:1981   .text:00000000000035f4 PARSE_DIGITS
            strtof.s:161    .text:0000000000002294 exponent
            strtof.s:162    .text:0000000000002294 $t
            strtof.s:163    .text:0000000000002298 $d
             forth.s:2026   .text:000000000000366e NEGQ
             forth.s:864    .text:0000000000002bb8 NEGAT
            strtof.s:184    .text:00000000000022dc _FLOATQ
            strtof.s:188    .text:00000000000022e8 $d
             forth.s:1937   .text:0000000000003574 DECIM
             forth.s:1954   .text:0000000000003598 DIGTQ
            strtof.s:225    .text:0000000000002384 must_be_dot
             forth.s:2010   .text:0000000000003654 CHARQ
            strtof.s:270    .text:000000000000245c error1
            strtof.s:275    .text:0000000000002470 error2
            strtof.s:259    .text:0000000000002424 build_float
             forth.s:422    .text:0000000000002820 DRFROM
            strtof.s:280    .text:0000000000002480 restore_base
              ftoa.s:27     .text:0000000000002490 pwr10m9
              ftoa.s:37     .text:00000000000024b4 pwr10e0
              ftoa.s:51     .text:00000000000024dc rounding
              ftoa.s:72     .text:0000000000002510 _EDOT
              ftoa.s:72     .text:0000000000002514 EDOT
              ftoa.s:75     .text:0000000000002518 $d
              ftoa.s:84     .text:0000000000002520 _FDOT
ARM GAS  forth.s 			page 199


              ftoa.s:84     .text:0000000000002524 FDOT
              ftoa.s:86     .text:0000000000002528 $d
             forth.s:1000   .text:0000000000002ccc MIN
              ftoa.s:99     .text:000000000000254c itoa
              ftoa.s:100    .text:000000000000254c $t
              ftoa.s:101    .text:0000000000002550 $d
             forth.s:1189   .text:0000000000002e4c HLD
             forth.s:1844   .text:0000000000003480 DIGS
             forth.s:80     .text:000000000000256c $t
             forth.s:103    .text:0000000000002584 COMPI_NEST
             forth.s:116    .text:00000000000025a2 TSTDIN
             forth.s:123    .text:00000000000025ac TSTDOUT
             forth.s:132    .text:00000000000025b6 $d
             forth.s:132    .text:00000000000025ba _CFSR
             forth.s:144    .text:00000000000025da $d
             forth.s:144    .text:00000000000025de _BFAR
             forth.s:156    .text:00000000000025fe $d
             forth.s:156    .text:0000000000002602 _QKEY
             forth.s:156    .text:0000000000002608 QKEY
             forth.s:158    .text:000000000000260c $d
             forth.s:1657   .text:000000000000329c ATEXE
             forth.s:166    .text:000000000000261c _KEY
             forth.s:166    .text:0000000000002620 $t
             forth.s:166    .text:0000000000002620 KEY
             forth.s:168    .text:0000000000002624 KEY1
             forth.s:169    .text:0000000000002624 $d
             forth.s:178    .text:000000000000263c _EMIT
             forth.s:180    .text:0000000000002648 $d
             forth.s:214    .text:0000000000002658 _RAND
             forth.s:214    .text:0000000000002660 RAND
             forth.s:216    .text:0000000000002664 $d
             forth.s:1096   .text:0000000000002d70 SEED
             forth.s:1508   .text:0000000000003120 MODD
             forth.s:245    .text:00000000000026d4 _PAUSE
             forth.s:245    .text:00000000000026da $t
             forth.s:245    .text:00000000000026dc PAUSE
             forth.s:247    .text:00000000000026e0 $d
             forth.s:1114   .text:0000000000002da0 TIMER
             forth.s:249    .text:00000000000026e8 PAUSE_LOOP
             forth.s:254    .text:0000000000002700 PAUSE_EXIT
             forth.s:261    .text:0000000000002708 _ULED
             forth.s:270    .text:000000000000272c ULED_OFF
             forth.s:284    .text:0000000000002730 $d
             forth.s:284    .text:0000000000002734 _NOP
             forth.s:284    .text:0000000000002738 $t
             forth.s:284    .text:0000000000002738 NOP
             forth.s:301    .text:0000000000002744 $d
             forth.s:301    .text:0000000000002748 _EXECU
             forth.s:301    .text:0000000000002750 $t
             forth.s:301    .text:0000000000002750 EXECU
             forth.s:321    .text:000000000000276c NEXT1
             forth.s:339    .text:0000000000002788 QBRAN1
             forth.s:356    .text:0000000000002794 $d
             forth.s:356    .text:0000000000002798 _EXIT
             forth.s:356    .text:00000000000027a0 EXIT
             forth.s:357    .text:00000000000027a0 $d
             forth.s:363    .text:00000000000027a8 _STORE
ARM GAS  forth.s 			page 200


             forth.s:363    .text:00000000000027aa $t
             forth.s:373    .text:00000000000027b8 $d
             forth.s:373    .text:00000000000027bc _AT
             forth.s:373    .text:00000000000027be $t
             forth.s:381    .text:00000000000027c4 $d
             forth.s:381    .text:00000000000027c8 _CSTOR
             forth.s:391    .text:00000000000027d8 $d
             forth.s:391    .text:00000000000027dc _CAT
             forth.s:401    .text:00000000000027e4 $d
             forth.s:401    .text:00000000000027e8 _ARRAYAT
             forth.s:401    .text:00000000000027f0 ARRAYAT
             forth.s:413    .text:0000000000002802 $d
             forth.s:413    .text:0000000000002806 _RFROM
             forth.s:422    .text:0000000000002816 $d
             forth.s:422    .text:000000000000281a _DRFROM
             forth.s:422    .text:000000000000281e $t
             forth.s:433    .text:0000000000002832 $d
             forth.s:433    .text:0000000000002836 _RAT
             forth.s:442    .text:0000000000002846 $d
             forth.s:442    .text:000000000000284a _TOR
             forth.s:451    .text:000000000000285a $d
             forth.s:451    .text:000000000000285e _DTOR
             forth.s:451    .text:0000000000002862 $t
             forth.s:451    .text:0000000000002864 DTOR
             forth.s:463    .text:0000000000002876 $d
             forth.s:463    .text:000000000000287a _RPSTOR
             forth.s:463    .text:000000000000287e $t
             forth.s:463    .text:0000000000002880 RPSTOR
             forth.s:472    .text:0000000000002888 $d
             forth.s:472    .text:000000000000288c _SPSTOR
             forth.s:472    .text:0000000000002890 $t
             forth.s:472    .text:0000000000002890 SPSTOR
             forth.s:481    .text:0000000000002898 $d
             forth.s:481    .text:000000000000289c _SPAT
             forth.s:481    .text:00000000000028a0 $t
             forth.s:481    .text:00000000000028a0 SPAT
             forth.s:490    .text:00000000000028a8 $d
             forth.s:490    .text:00000000000028ac _RPAT
             forth.s:490    .text:00000000000028b0 $t
             forth.s:490    .text:00000000000028b0 RPAT
             forth.s:499    .text:00000000000028b8 $d
             forth.s:499    .text:00000000000028bc _DROP
             forth.s:507    .text:00000000000028ca $d
             forth.s:507    .text:00000000000028ce _DUPP
             forth.s:507    .text:00000000000028d2 $t
             forth.s:515    .text:00000000000028da $d
             forth.s:515    .text:00000000000028de _SWAP
             forth.s:525    .text:00000000000028ec $d
             forth.s:525    .text:00000000000028f0 _OVER
             forth.s:534    .text:0000000000002900 $d
             forth.s:534    .text:0000000000002904 _ZLESS
             forth.s:542    .text:000000000000290e $d
             forth.s:542    .text:0000000000002912 _ANDD
             forth.s:542    .text:0000000000002916 $t
             forth.s:551    .text:0000000000002922 $d
             forth.s:551    .text:0000000000002926 _ORR
             forth.s:560    .text:0000000000002936 $d
ARM GAS  forth.s 			page 201


             forth.s:560    .text:000000000000293a _XORR
             forth.s:560    .text:000000000000293e $t
             forth.s:569    .text:000000000000294a $d
             forth.s:569    .text:000000000000294e _UPLUS
             forth.s:569    .text:0000000000002952 $t
             forth.s:569    .text:0000000000002954 UPLUS
             forth.s:581    .text:0000000000002964 $d
             forth.s:581    .text:0000000000002968 _RSHIFT
             forth.s:590    .text:000000000000297a $d
             forth.s:590    .text:000000000000297e _LSHIFT
             forth.s:599    .text:0000000000002992 $d
             forth.s:599    .text:0000000000002996 _PLUS
             forth.s:599    .text:0000000000002998 $t
             forth.s:608    .text:00000000000029a0 $d
             forth.s:608    .text:00000000000029a4 _SUBB
             forth.s:608    .text:00000000000029a6 $t
             forth.s:617    .text:00000000000029b2 $d
             forth.s:617    .text:00000000000029b6 _STAR
             forth.s:617    .text:00000000000029b8 $t
             forth.s:626    .text:00000000000029c2 $d
             forth.s:626    .text:00000000000029c6 _UMSTA
             forth.s:626    .text:00000000000029ca $t
             forth.s:626    .text:00000000000029cc UMSTA
             forth.s:638    .text:00000000000029d8 $d
             forth.s:638    .text:00000000000029dc _MSTAR
             forth.s:638    .text:00000000000029e0 MSTAR
             forth.s:649    .text:00000000000029ec $d
             forth.s:649    .text:00000000000029f0 _ONEP
             forth.s:657    .text:00000000000029fa $d
             forth.s:657    .text:00000000000029fe _ONEM
             forth.s:665    .text:0000000000002a0a $d
             forth.s:665    .text:0000000000002a0e _TWOP
             forth.s:665    .text:0000000000002a14 TWOP
             forth.s:673    .text:0000000000002a1a $d
             forth.s:673    .text:0000000000002a1e _TWOM
             forth.s:673    .text:0000000000002a24 TWOM
             forth.s:681    .text:0000000000002a2a $d
             forth.s:681    .text:0000000000002a2e _CELLP
             forth.s:681    .text:0000000000002a34 $t
             forth.s:681    .text:0000000000002a34 CELLP
             forth.s:689    .text:0000000000002a3a $d
             forth.s:689    .text:0000000000002a3e _CELLM
             forth.s:689    .text:0000000000002a44 $t
             forth.s:689    .text:0000000000002a44 CELLM
             forth.s:697    .text:0000000000002a4a $d
             forth.s:697    .text:0000000000002a4e _BLANK
             forth.s:697    .text:0000000000002a54 BLANK
             forth.s:706    .text:0000000000002a5e $d
             forth.s:706    .text:0000000000002a62 _CELLS
             forth.s:706    .text:0000000000002a68 $t
             forth.s:706    .text:0000000000002a68 CELLS
             forth.s:714    .text:0000000000002a6e $d
             forth.s:714    .text:0000000000002a72 _CELLSL
             forth.s:714    .text:0000000000002a78 $t
             forth.s:714    .text:0000000000002a78 CELLSL
             forth.s:722    .text:0000000000002a7e $d
             forth.s:722    .text:0000000000002a82 _TWOST
ARM GAS  forth.s 			page 202


             forth.s:722    .text:0000000000002a88 TWOST
             forth.s:730    .text:0000000000002a8e $d
             forth.s:730    .text:0000000000002a92 _TWOSL
             forth.s:738    .text:0000000000002a9e $d
             forth.s:738    .text:0000000000002aa2 _QDUP
             forth.s:748    .text:0000000000002ab2 $d
             forth.s:748    .text:0000000000002ab6 _ROT
             forth.s:748    .text:0000000000002aba $t
             forth.s:759    .text:0000000000002ac6 $d
             forth.s:759    .text:0000000000002aca _NROT
             forth.s:770    .text:0000000000002ada $d
             forth.s:770    .text:0000000000002ade _DDROP
             forth.s:770    .text:0000000000002ae4 $t
             forth.s:779    .text:0000000000002aee $d
             forth.s:779    .text:0000000000002af2 _TDROP
             forth.s:779    .text:0000000000002af8 $t
             forth.s:788    .text:0000000000002b02 $d
             forth.s:788    .text:0000000000002b06 _DDUP
             forth.s:798    .text:0000000000002b18 $d
             forth.s:798    .text:0000000000002b1c _DPLUS
             forth.s:798    .text:0000000000002b20 DPLUS
             forth.s:811    .text:0000000000002b34 $d
             forth.s:811    .text:0000000000002b38 _DABS
             forth.s:811    .text:0000000000002b40 DABS
             forth.s:827    .text:0000000000002b5c $d
             forth.s:827    .text:0000000000002b60 _UDGREAT
             forth.s:827    .text:0000000000002b64 $t
             forth.s:827    .text:0000000000002b64 UDGREAT
             forth.s:844    .text:0000000000002b80 $d
             forth.s:844    .text:0000000000002b84 _DZEQUAL
             forth.s:844    .text:0000000000002b88 $t
             forth.s:844    .text:0000000000002b88 DZEQUAL
             forth.s:856    .text:0000000000002b9a $d
             forth.s:856    .text:0000000000002b9e _INVER
             forth.s:856    .text:0000000000002ba2 $t
             forth.s:864    .text:0000000000002baa $d
             forth.s:864    .text:0000000000002bae _NEGAT
             forth.s:872    .text:0000000000002bbe $d
             forth.s:872    .text:0000000000002bc2 _ABSS
             forth.s:872    .text:0000000000002bc6 $t
             forth.s:882    .text:0000000000002bd2 $d
             forth.s:882    .text:0000000000002bd6 _CLZ
             forth.s:882    .text:0000000000002bda $t
             forth.s:882    .text:0000000000002bdc CLZ
             forth.s:890    .text:0000000000002be2 $d
             forth.s:890    .text:0000000000002be6 _CTZ
             forth.s:890    .text:0000000000002bea $t
             forth.s:890    .text:0000000000002bec CTZ
             forth.s:905    .text:0000000000002c04 $d
             forth.s:905    .text:0000000000002c08 _ZEQUAL
             forth.s:905    .text:0000000000002c0c ZEQUAL
             forth.s:916    .text:0000000000002c1a $d
             forth.s:916    .text:0000000000002c1e _EQUAL
             forth.s:916    .text:0000000000002c20 $t
             forth.s:928    .text:0000000000002c30 $d
             forth.s:928    .text:0000000000002c34 _DIFF
             forth.s:928    .text:0000000000002c38 DIFF
ARM GAS  forth.s 			page 203


             forth.s:941    .text:0000000000002c50 $d
             forth.s:941    .text:0000000000002c54 _ULESS
             forth.s:953    .text:0000000000002c68 $d
             forth.s:953    .text:0000000000002c6c _LESS
             forth.s:953    .text:0000000000002c6e $t
             forth.s:953    .text:0000000000002c70 LESS
             forth.s:965    .text:0000000000002c80 $d
             forth.s:965    .text:0000000000002c84 _UGREAT
             forth.s:965    .text:0000000000002c88 UGREAT
             forth.s:977    .text:0000000000002c98 $d
             forth.s:977    .text:0000000000002c9c _GREAT
             forth.s:977    .text:0000000000002c9e $t
             forth.s:989    .text:0000000000002cb0 $d
             forth.s:989    .text:0000000000002cb4 _MAX
             forth.s:989    .text:0000000000002cb8 $t
             forth.s:989    .text:0000000000002cb8 MAX
             forth.s:1000   .text:0000000000002cc4 $d
             forth.s:1000   .text:0000000000002cc8 _MIN
             forth.s:1000   .text:0000000000002ccc $t
             forth.s:1011   .text:0000000000002cd8 $d
             forth.s:1011   .text:0000000000002cdc _PSTOR
             forth.s:1011   .text:0000000000002ce0 PSTOR
             forth.s:1023   .text:0000000000002cf0 $d
             forth.s:1023   .text:0000000000002cf4 _DSTOR
             forth.s:1023   .text:0000000000002cf8 DSTOR
             forth.s:1035   .text:0000000000002d0c $d
             forth.s:1035   .text:0000000000002d10 _DAT
             forth.s:1035   .text:0000000000002d14 DAT
             forth.s:1045   .text:0000000000002d1e $d
             forth.s:1045   .text:0000000000002d22 _COUNT
             forth.s:1045   .text:0000000000002d28 $t
             forth.s:1055   .text:0000000000002d34 $d
             forth.s:1055   .text:0000000000002d38 _DNEGA
             forth.s:1055   .text:0000000000002d40 $t
             forth.s:1055   .text:0000000000002d40 DNEGA
             forth.s:1072   .text:0000000000002d50 DOVAR
             forth.s:1083   .text:0000000000002d5c DOCON
             forth.s:1096   .text:0000000000002d66 $d
             forth.s:1096   .text:0000000000002d6a _SEED
             forth.s:1105   .text:0000000000002d7c $d
             forth.s:1105   .text:0000000000002d80 _MSEC
             forth.s:1114   .text:0000000000002d94 $d
             forth.s:1114   .text:0000000000002d98 _TIMER
             forth.s:1114   .text:0000000000002d9e $t
             forth.s:1123   .text:0000000000002dac $d
             forth.s:1123   .text:0000000000002db0 _TBOOT
             forth.s:1123   .text:0000000000002db6 $t
             forth.s:1123   .text:0000000000002db8 TBOOT
             forth.s:1132   .text:0000000000002dc4 $d
             forth.s:1132   .text:0000000000002dc8 _BASE
             forth.s:1142   .text:0000000000002ddc TEMP
             forth.s:1151   .text:0000000000002de8 $d
             forth.s:1151   .text:0000000000002dec _SPAN
             forth.s:1151   .text:0000000000002df4 SPAN
             forth.s:1160   .text:0000000000002e00 $d
             forth.s:1160   .text:0000000000002e04 _INN
             forth.s:1160   .text:0000000000002e08 $t
ARM GAS  forth.s 			page 204


             forth.s:1160   .text:0000000000002e08 INN
             forth.s:1170   .text:0000000000002e14 $d
             forth.s:1170   .text:0000000000002e18 _NTIB
             forth.s:1170   .text:0000000000002e20 NTIB
             forth.s:1179   .text:0000000000002e2c $d
             forth.s:1179   .text:0000000000002e30 _TEVAL
             forth.s:1179   .text:0000000000002e36 $t
             forth.s:1179   .text:0000000000002e38 TEVAL
             forth.s:1189   .text:0000000000002e44 $d
             forth.s:1189   .text:0000000000002e48 _HLD
             forth.s:1189   .text:0000000000002e4c $t
             forth.s:1199   .text:0000000000002e58 $d
             forth.s:1199   .text:0000000000002e5c _CNTXT
             forth.s:1199   .text:0000000000002e64 $t
             forth.s:1199   .text:0000000000002e64 CNTXT
             forth.s:1200   .text:0000000000002e64 CRRNT
             forth.s:1210   .text:0000000000002e70 $d
             forth.s:1210   .text:0000000000002e74 _CPP
             forth.s:1210   .text:0000000000002e78 CPP
             forth.s:1220   .text:0000000000002e84 $d
             forth.s:1220   .text:0000000000002e88 _FCP
             forth.s:1220   .text:0000000000002e8c $t
             forth.s:1220   .text:0000000000002e8c FCP
             forth.s:1230   .text:0000000000002e98 $d
             forth.s:1230   .text:0000000000002e9c _LAST
             forth.s:1230   .text:0000000000002ea4 LAST
             forth.s:1244   .text:0000000000002eb0 $d
             forth.s:1244   .text:0000000000002eb4 _USER_BEGIN
             forth.s:1244   .text:0000000000002ec0 USER_BEGIN
             forth.s:1248   .text:0000000000002ecc USR_BGN_ADR
             forth.s:1249   .text:0000000000002ecc $d
             forth.s:1255   .text:0000000000002ed4 _USER_END
             forth.s:1255   .text:0000000000002ee0 USER_END
             forth.s:1259   .text:0000000000002eec USER_END_ADR
             forth.s:1260   .text:0000000000002eec $d
             forth.s:1272   .text:0000000000002ef4 _WITHI
             forth.s:1272   .text:0000000000002efc WITHI
             forth.s:1274   .text:0000000000002f00 $d
             forth.s:1289   .text:0000000000002f20 _UMMOD
             forth.s:1289   .text:0000000000002f28 UMMOD
             forth.s:1293   .text:0000000000002f32 UMMOD0
             forth.s:1300   .text:0000000000002f42 UMMOD1
             forth.s:1306   .text:0000000000002f4c UMMOD2
             forth.s:1319   .text:0000000000002f58 $d
             forth.s:1319   .text:0000000000002f5c _MSMOD
             forth.s:1319   .text:0000000000002f62 $t
             forth.s:1319   .text:0000000000002f64 MSMOD
             forth.s:1321   .text:0000000000002f68 $d
             forth.s:1330   .text:0000000000002f90 MMOD1
             forth.s:1337   .text:0000000000002fac MMOD2
             forth.s:1345   .text:0000000000002fcc MMOD3
             forth.s:1352   .text:0000000000002fd4 _STOD
             forth.s:1352   .text:0000000000002fd8 $t
             forth.s:1352   .text:0000000000002fd8 STOD
             forth.s:1361   .text:0000000000002fe4 $d
             forth.s:1361   .text:0000000000002fe8 _D2STAR
             forth.s:1361   .text:0000000000002fec $t
ARM GAS  forth.s 			page 205


             forth.s:1361   .text:0000000000002fec D2STAR
             forth.s:1373   .text:0000000000002ffe $d
             forth.s:1373   .text:0000000000003002 _D2SL
             forth.s:1373   .text:0000000000003006 $t
             forth.s:1373   .text:0000000000003008 D2SL
             forth.s:1388   .text:0000000000003016 $d
             forth.s:1388   .text:000000000000301a _DSLMOD
             forth.s:1388   .text:0000000000003020 $t
             forth.s:1388   .text:0000000000003020 DSLMOD
             forth.s:1424   .text:000000000000306c $d
             forth.s:1424   .text:0000000000003070 _DSLASH
             forth.s:1424   .text:0000000000003074 DSLASH
             forth.s:1426   .text:0000000000003078 $d
             forth.s:1446   .text:00000000000030bc _DSTAR
             forth.s:1446   .text:00000000000030c0 DSTAR
             forth.s:1495   .text:00000000000030f6 $d
             forth.s:1495   .text:00000000000030fa _SLMOD
             forth.s:1497   .text:0000000000003104 $d
             forth.s:1508   .text:000000000000311c _MODD
             forth.s:1508   .text:0000000000003120 $t
             forth.s:1510   .text:0000000000003124 $d
             forth.s:1519   .text:0000000000003134 _SLASH
             forth.s:1519   .text:0000000000003136 $t
             forth.s:1519   .text:0000000000003138 SLASH
             forth.s:1521   .text:000000000000313c $d
             forth.s:1532   .text:0000000000003150 _SSMOD
             forth.s:1532   .text:0000000000003156 $t
             forth.s:1532   .text:0000000000003158 SSMOD
             forth.s:1534   .text:000000000000315c $d
             forth.s:1546   .text:0000000000003174 _STASL
             forth.s:1546   .text:0000000000003178 STASL
             forth.s:1548   .text:000000000000317c $d
             forth.s:1562   .text:0000000000003190 _ALGND
             forth.s:1562   .text:0000000000003198 $t
             forth.s:1562   .text:0000000000003198 ALGND
             forth.s:1573   .text:00000000000031a8 $d
             forth.s:1573   .text:00000000000031ac _TCHAR
             forth.s:1573   .text:00000000000031b2 $t
             forth.s:1573   .text:00000000000031b4 TCHAR
             forth.s:1575   .text:00000000000031b8 $d
             forth.s:1585   .text:00000000000031f0 TCHA1
             forth.s:1593   .text:00000000000031f8 _DEPTH
             forth.s:1593   .text:00000000000031fe $t
             forth.s:1593   .text:0000000000003200 DEPTH
             forth.s:1605   .text:0000000000003218 $d
             forth.s:1605   .text:000000000000321c _PICK
             forth.s:1607   .text:0000000000003228 $d
             forth.s:1623   .text:0000000000003244 _HERE
             forth.s:1623   .text:000000000000324c HERE
             forth.s:1625   .text:0000000000003250 $d
             forth.s:1634   .text:0000000000003260 _PAD
             forth.s:1634   .text:0000000000003264 $t
             forth.s:1636   .text:0000000000003268 $d
             forth.s:1647   .text:0000000000003280 _TIB
             forth.s:1647   .text:0000000000003284 $t
             forth.s:1647   .text:0000000000003284 TIB
             forth.s:1657   .text:000000000000328e $d
ARM GAS  forth.s 			page 206


             forth.s:1657   .text:0000000000003292 _ATEXE
             forth.s:1670   .text:00000000000032b0 $d
             forth.s:1670   .text:00000000000032b4 _CMOVE
             forth.s:1670   .text:00000000000032ba $t
             forth.s:1670   .text:00000000000032bc CMOVE
             forth.s:1677   .text:00000000000032ce CMOV1
             forth.s:1674   .text:00000000000032c6 CMOV0
             forth.s:1682   .text:00000000000032d8 CMOV2
             forth.s:1690   .text:00000000000032e0 $d
             forth.s:1690   .text:00000000000032e4 _MOVE
             forth.s:1708   .text:0000000000003316 MOVE1
             forth.s:1705   .text:0000000000003312 MOVE3
             forth.s:1702   .text:000000000000330e MOVE0
             forth.s:1713   .text:0000000000003320 MOVE2
             forth.s:1722   .text:0000000000003328 $d
             forth.s:1722   .text:000000000000332c _FILL
             forth.s:1730   .text:0000000000003342 FILL2
             forth.s:1726   .text:000000000000333a FILL1
             forth.s:1740   .text:000000000000334a $d
             forth.s:1740   .text:000000000000334e _PACKS
             forth.s:1740   .text:0000000000003354 $t
             forth.s:1740   .text:0000000000003354 PACKS
             forth.s:1742   .text:0000000000003358 $d
             forth.s:1771   .text:00000000000033b0 _DIGIT
             forth.s:1771   .text:00000000000033b6 $t
             forth.s:1771   .text:00000000000033b8 DIGIT
             forth.s:1773   .text:00000000000033bc $d
             forth.s:1788   .text:00000000000033f0 _EXTRC
             forth.s:1788   .text:00000000000033f8 $t
             forth.s:1788   .text:00000000000033f8 EXTRC
             forth.s:1790   .text:00000000000033fc $d
             forth.s:1800   .text:0000000000003410 _BDIGS
             forth.s:1800   .text:0000000000003414 BDIGS
             forth.s:1802   .text:0000000000003418 $d
             forth.s:1812   .text:000000000000342c _HOLD
             forth.s:1812   .text:0000000000003434 HOLD
             forth.s:1814   .text:0000000000003438 $d
             forth.s:1830   .text:000000000000345c _DIG
             forth.s:1830   .text:000000000000345e $t
             forth.s:1830   .text:0000000000003460 DIG
             forth.s:1832   .text:0000000000003464 $d
             forth.s:1844   .text:000000000000347c _DIGS
             forth.s:1846   .text:0000000000003484 DIGS1
             forth.s:1847   .text:0000000000003484 $d
             forth.s:1852   .text:00000000000034a0 DIGS2
             forth.s:1862   .text:00000000000034ac _SIGN
             forth.s:1862   .text:00000000000034b4 SIGN
             forth.s:1864   .text:00000000000034b8 $d
             forth.s:1868   .text:00000000000034d0 SIGN1
             forth.s:1876   .text:00000000000034d8 _EDIGS
             forth.s:1876   .text:00000000000034dc EDIGS
             forth.s:1878   .text:00000000000034e0 $d
             forth.s:1893   .text:00000000000034fc STRR
             forth.s:1894   .text:00000000000034fc $t
             forth.s:1895   .text:0000000000003500 $d
             forth.s:1912   .text:000000000000352c _HEX
             forth.s:1912   .text:0000000000003530 $t
ARM GAS  forth.s 			page 207


             forth.s:1912   .text:0000000000003530 HEX
             forth.s:1914   .text:0000000000003534 $d
             forth.s:1925   .text:000000000000354c _BIN
             forth.s:1925   .text:0000000000003550 $t
             forth.s:1925   .text:0000000000003550 BIN
             forth.s:1927   .text:0000000000003554 $d
             forth.s:1937   .text:000000000000356c _DECIM
             forth.s:1937   .text:0000000000003574 $t
             forth.s:1939   .text:0000000000003578 $d
             forth.s:1954   .text:0000000000003590 _DIGTQ
             forth.s:1956   .text:000000000000359c $d
             forth.s:1969   .text:00000000000035e4 DGTQ1
             forth.s:1982   .text:00000000000035f4 $t
             forth.s:1983   .text:00000000000035f8 $d
             forth.s:2011   .text:0000000000003654 $t
             forth.s:2028   .text:0000000000003672 $d
             forth.s:2051   .text:00000000000036b2 _INTQ
             forth.s:2054   .text:00000000000036bc $d
             forth.s:2124   .text:00000000000037c4 _SPACE
             forth.s:2124   .text:00000000000037ca $t
             forth.s:2126   .text:00000000000037d0 $d
             forth.s:2135   .text:00000000000037e0 _SPACS
             forth.s:2135   .text:00000000000037e8 SPACS
             forth.s:2137   .text:00000000000037ec $d
             forth.s:2143   .text:0000000000003808 CHAR2
             forth.s:2141   .text:0000000000003804 CHAR1
             forth.s:2152   .text:0000000000003818 _TYPEE
             forth.s:2154   .text:0000000000003824 $d
             forth.s:2160   .text:000000000000383c TYPE2
             forth.s:2156   .text:0000000000003830 TYPE1
             forth.s:2170   .text:0000000000003850 _CR
             forth.s:2172   .text:0000000000003858 $d
             forth.s:2184   .text:0000000000003874 DOSTR
             forth.s:2185   .text:0000000000003874 $t
             forth.s:2187   .text:0000000000003878 $d
             forth.s:2205   .text:00000000000038a0 STRQP
             forth.s:2206   .text:00000000000038a0 $t
             forth.s:2207   .text:00000000000038a4 $d
             forth.s:2216   .text:00000000000038ac DOTST
             forth.s:2217   .text:00000000000038ac $t
             forth.s:2218   .text:00000000000038b0 $d
             forth.s:2229   .text:00000000000038bc $t
             forth.s:2230   .text:00000000000038c0 $d
             forth.s:2240   .text:00000000000038d0 _DOTR
             forth.s:2240   .text:00000000000038d4 DOTR
             forth.s:2242   .text:00000000000038d8 $d
             forth.s:2257   .text:00000000000038fc _UDOTR
             forth.s:2257   .text:0000000000003900 $t
             forth.s:2257   .text:0000000000003900 UDOTR
             forth.s:2259   .text:0000000000003904 $d
             forth.s:2278   .text:000000000000393c _UDOT
             forth.s:2280   .text:0000000000003944 $d
             forth.s:2294   .text:0000000000003964 _DOT
             forth.s:2294   .text:0000000000003966 $t
             forth.s:2294   .text:0000000000003968 DOT
             forth.s:2296   .text:000000000000396c $d
             forth.s:2303   .text:0000000000003990 DOT1
ARM GAS  forth.s 			page 208


             forth.s:2313   .text:00000000000039a4 _DDOT
             forth.s:2313   .text:00000000000039a8 DDOT
             forth.s:2315   .text:00000000000039ac $d
             forth.s:2333   .text:00000000000039dc _HDOT
             forth.s:2335   .text:00000000000039e4 $d
             forth.s:2357   .text:0000000000003a2c _QUEST
             forth.s:2357   .text:0000000000003a2e $t
             forth.s:2357   .text:0000000000003a30 QUEST
             forth.s:2359   .text:0000000000003a34 $d
             forth.s:2373   .text:0000000000003a40 PARS
             forth.s:2374   .text:0000000000003a40 $t
             forth.s:2375   .text:0000000000003a44 $d
             forth.s:2441   .text:0000000000003b54 PARS8
             forth.s:2405   .text:0000000000003ac8 PARS3
             forth.s:2388   .text:0000000000003a80 PARS1
             forth.s:2403   .text:0000000000003ac4 PARS2
             forth.s:2409   .text:0000000000003ad4 PARS4
             forth.s:2421   .text:0000000000003b04 PARS5
             forth.s:2428   .text:0000000000003b28 PARS6
             forth.s:2434   .text:0000000000003b3c PARS7
             forth.s:2452   .text:0000000000003b68 _PARSE
             forth.s:2452   .text:0000000000003b6e $t
             forth.s:2452   .text:0000000000003b70 PARSE
             forth.s:2454   .text:0000000000003b74 $d
             forth.s:2475   .text:0000000000003bb4 _DOTPR
             forth.s:2475   .text:0000000000003bb8 DOTPR
             forth.s:2477   .text:0000000000003bbc $d
             forth.s:2488   .text:0000000000003bd4 _PAREN
             forth.s:2488   .text:0000000000003bd6 $t
             forth.s:2488   .text:0000000000003bd8 PAREN
             forth.s:2490   .text:0000000000003bdc $d
             forth.s:2501   .text:0000000000003bf4 _BKSLA
             forth.s:2501   .text:0000000000003bf6 $t
             forth.s:2501   .text:0000000000003bf8 BKSLA
             forth.s:2503   .text:0000000000003bfc $d
             forth.s:2514   .text:0000000000003c14 _CHAR
             forth.s:2514   .text:0000000000003c1c CHAR
             forth.s:2516   .text:0000000000003c20 $d
             forth.s:2526   .text:0000000000003c38 _IMCHAR
             forth.s:2526   .text:0000000000003c40 IMCHAR
             forth.s:2528   .text:0000000000003c44 $d
             forth.s:3124   .text:0000000000004368 LITER
             forth.s:2537   .text:0000000000003c54 _WORDD
             forth.s:2537   .text:0000000000003c5c WORDD
             forth.s:2539   .text:0000000000003c60 $d
             forth.s:2551   .text:0000000000003c78 _TOKEN
             forth.s:2551   .text:0000000000003c7e $t
             forth.s:2551   .text:0000000000003c80 TOKEN
             forth.s:2553   .text:0000000000003c84 $d
             forth.s:2718   .text:0000000000003e74 UPPER
             forth.s:2567   .text:0000000000003c98 _NAMET
             forth.s:2567   .text:0000000000003c9e $t
             forth.s:2567   .text:0000000000003ca0 NAMET
             forth.s:2569   .text:0000000000003ca4 $d
             forth.s:2588   .text:0000000000003cc4 _SAMEQ
             forth.s:2588   .text:0000000000003cca $t
             forth.s:2588   .text:0000000000003ccc SAMEQ
ARM GAS  forth.s 			page 209


             forth.s:2590   .text:0000000000003cd0 $d
             forth.s:2607   .text:0000000000003d18 SAME2
             forth.s:2592   .text:0000000000003cdc SAME1
             forth.s:2622   .text:0000000000003d2c FIND
             forth.s:2623   .text:0000000000003d2c $t
             forth.s:2624   .text:0000000000003d30 $d
             forth.s:2631   .text:0000000000003d4c FIND1
             forth.s:2651   .text:0000000000003da4 FIND6
             forth.s:2644   .text:0000000000003d8c FIND2
             forth.s:2649   .text:0000000000003d9c FIND3
             forth.s:2658   .text:0000000000003dbc FIND4
             forth.s:2664   .text:0000000000003dd8 FIND5
             forth.s:2680   .text:0000000000003e00 _NAMEQ
             forth.s:2680   .text:0000000000003e06 $t
             forth.s:2680   .text:0000000000003e08 NAMEQ
             forth.s:2682   .text:0000000000003e0c $d
             forth.s:2697   .text:0000000000003e20 _ASCIZ
             forth.s:2697   .text:0000000000003e26 $t
             forth.s:2697   .text:0000000000003e28 ASCIZ
             forth.s:2699   .text:0000000000003e2c $d
             forth.s:2718   .text:0000000000003e6c _UPPER
             forth.s:2718   .text:0000000000003e72 $t
             forth.s:2720   .text:0000000000003e78 $d
             forth.s:2751   .text:0000000000003efc BKSP
             forth.s:2752   .text:0000000000003efc $t
             forth.s:2753   .text:0000000000003f00 $d
             forth.s:2767   .text:0000000000003f44 BACK1
             forth.s:2776   .text:0000000000003f48 TAP
             forth.s:2777   .text:0000000000003f48 $t
             forth.s:2778   .text:0000000000003f4c $d
             forth.s:2791   .text:0000000000003f64 KTAP
             forth.s:2792   .text:0000000000003f64 TTAP
             forth.s:2793   .text:0000000000003f64 $t
             forth.s:2794   .text:0000000000003f68 $d
             forth.s:2808   .text:0000000000003fa8 KTAP2
             forth.s:2805   .text:0000000000003fa0 KTAP1
             forth.s:2820   .text:0000000000003fc0 _ACCEP
             forth.s:2822   .text:0000000000003fcc $d
             forth.s:2825   .text:0000000000003fd8 ACCP1
             forth.s:2841   .text:0000000000004020 ACCP4
             forth.s:2837   .text:0000000000004014 ACCP2
             forth.s:2839   .text:0000000000004018 ACCP3
             forth.s:2852   .text:0000000000004034 _QUERY
             forth.s:2852   .text:000000000000403a $t
             forth.s:2852   .text:000000000000403c QUERY
             forth.s:2854   .text:0000000000004040 $d
             forth.s:2874   .text:0000000000004074 _ABORT
             forth.s:2874   .text:000000000000407a $t
             forth.s:2876   .text:0000000000004080 ABORT1
             forth.s:2877   .text:0000000000004080 $d
             forth.s:3008   .text:0000000000004224 QUIT
             forth.s:2892   .text:00000000000040a8 ABORQ
             forth.s:2893   .text:00000000000040a8 $t
             forth.s:2894   .text:00000000000040ac $d
             forth.s:2912   .text:00000000000040d0 _INTER
             forth.s:2914   .text:00000000000040e0 $d
             forth.s:2923   .text:000000000000411c INTE1
ARM GAS  forth.s 			page 210


             forth.s:2920   .text:0000000000004112 $t
             forth.s:2921   .text:0000000000004114 $d
             forth.s:2927   .text:000000000000412c INTE2
             forth.s:2934   .text:0000000000004134 _LBRAC
             forth.s:2934   .text:0000000000004136 $t
             forth.s:2934   .text:0000000000004138 LBRAC
             forth.s:2936   .text:000000000000413c $d
             forth.s:2946   .text:0000000000004154 _DOTOK
             forth.s:2946   .text:0000000000004158 $t
             forth.s:2946   .text:0000000000004158 DOTOK
             forth.s:2948   .text:000000000000415c $d
             forth.s:2954   .text:0000000000004180 DOTO1
             forth.s:2955   .text:0000000000004180 $d
             forth.s:2963   .text:000000000000418c _QSTAC
             forth.s:2963   .text:0000000000004194 QSTAC
             forth.s:2965   .text:0000000000004198 $d
             forth.s:2967   .text:00000000000041ae $t
             forth.s:2968   .text:00000000000041b0 $d
             forth.s:2975   .text:00000000000041b8 _EVAL
             forth.s:2977   .text:00000000000041c4 EVAL1
             forth.s:2978   .text:00000000000041c4 $d
             forth.s:2986   .text:00000000000041ec EVAL2
             forth.s:2996   .text:00000000000041fc _PRESE
             forth.s:2998   .text:0000000000004208 $d
             forth.s:3008   .text:000000000000421c _QUIT
             forth.s:3009   .text:0000000000004224 $d
             forth.s:3011   .text:0000000000004230 QUIT1
             forth.s:3013   .text:0000000000004234 QUIT2
             forth.s:3023   .text:0000000000004248 _FORGET
             forth.s:3023   .text:0000000000004250 FORGET
             forth.s:3025   .text:0000000000004254 $d
             forth.s:3522   .text:00000000000047ec OVERT
             forth.s:3053   .text:000000000000429c $d
             forth.s:3053   .text:00000000000042a0 _TICK
             forth.s:3053   .text:00000000000042a2 $t
             forth.s:3053   .text:00000000000042a4 TICK
             forth.s:3055   .text:00000000000042a8 $d
             forth.s:3059   .text:00000000000042bc TICK1
             forth.s:3067   .text:00000000000042c4 _ALLOT
             forth.s:3067   .text:00000000000042ca $t
             forth.s:3067   .text:00000000000042cc ALLOT
             forth.s:3069   .text:00000000000042d0 $d
             forth.s:3078   .text:00000000000042e0 _COMMA
             forth.s:3078   .text:00000000000042e2 $t
             forth.s:3078   .text:00000000000042e4 COMMA
             forth.s:3080   .text:00000000000042e8 $d
             forth.s:3094   .text:0000000000004304 $d
             forth.s:3094   .text:0000000000004308 _BCOMP
             forth.s:3094   .text:0000000000004312 $t
             forth.s:3094   .text:0000000000004314 BCOMP
             forth.s:3096   .text:0000000000004318 $d
             forth.s:3106   .text:0000000000004328 _COMPI
             forth.s:3106   .text:0000000000004330 $t
             forth.s:3106   .text:0000000000004330 COMPI
             forth.s:3108   .text:0000000000004334 $d
             forth.s:3124   .text:0000000000004360 _LITER
             forth.s:3124   .text:0000000000004368 $t
ARM GAS  forth.s 			page 211


             forth.s:3126   .text:000000000000436c $d
             forth.s:3561   .text:0000000000004848 CALLC
             forth.s:3136   .text:0000000000004380 STRCQ
             forth.s:3137   .text:0000000000004380 $t
             forth.s:3138   .text:0000000000004384 $d
             forth.s:3160   .text:00000000000043bc _FOR
             forth.s:3160   .text:00000000000043c0 $t
             forth.s:3160   .text:00000000000043c0 FOR
             forth.s:3162   .text:00000000000043c4 $d
             forth.s:3171   .text:00000000000043dc _DO
             forth.s:3171   .text:00000000000043e0 DO
             forth.s:3173   .text:00000000000043e4 $d
             forth.s:3179   .text:0000000000004410 DOPLOOP
             forth.s:3180   .text:0000000000004410 $t
             forth.s:3196   .text:0000000000004432 $d
             forth.s:3196   .text:0000000000004436 _PLOOP
             forth.s:3196   .text:000000000000443c $t
             forth.s:3196   .text:000000000000443c PLOOP
             forth.s:3198   .text:0000000000004440 $d
             forth.s:3202   .text:0000000000004454 DOLOOP
             forth.s:3203   .text:0000000000004454 $t
             forth.s:3221   .text:000000000000447c $d
             forth.s:3221   .text:0000000000004480 _LOOP
             forth.s:3221   .text:0000000000004488 LOOP
             forth.s:3223   .text:000000000000448c $d
             forth.s:3234   .text:00000000000044a4 _BEGIN
             forth.s:3234   .text:00000000000044aa $t
             forth.s:3234   .text:00000000000044ac BEGIN
             forth.s:3236   .text:00000000000044b0 $d
             forth.s:3245   .text:00000000000044b8 $d
             forth.s:3245   .text:00000000000044bc _FNEXT
             forth.s:3245   .text:00000000000044c4 FNEXT
             forth.s:3247   .text:00000000000044c8 $d
             forth.s:3255   .text:00000000000044e0 _I
             forth.s:3255   .text:00000000000044e2 $t
             forth.s:3255   .text:00000000000044e4 I
             forth.s:3264   .text:00000000000044f0 $d
             forth.s:3264   .text:00000000000044f4 _J
             forth.s:3264   .text:00000000000044f6 $t
             forth.s:3264   .text:00000000000044f8 J
             forth.s:3274   .text:0000000000004504 $d
             forth.s:3274   .text:0000000000004508 _UNTIL
             forth.s:3274   .text:000000000000450e $t
             forth.s:3274   .text:0000000000004510 UNTIL
             forth.s:3276   .text:0000000000004514 $d
             forth.s:3285   .text:000000000000452c _AGAIN
             forth.s:3285   .text:0000000000004532 $t
             forth.s:3285   .text:0000000000004534 AGAIN
             forth.s:3287   .text:0000000000004538 $d
             forth.s:3296   .text:0000000000004550 _IFF
             forth.s:3296   .text:0000000000004554 IFF
             forth.s:3298   .text:0000000000004558 $d
             forth.s:3310   .text:0000000000004580 _AHEAD
             forth.s:3310   .text:0000000000004586 $t
             forth.s:3310   .text:0000000000004588 AHEAD
             forth.s:3312   .text:000000000000458c $d
             forth.s:3324   .text:00000000000045b4 _REPEA
ARM GAS  forth.s 			page 212


             forth.s:3324   .text:00000000000045bc REPEA
             forth.s:3326   .text:00000000000045c0 $d
             forth.s:3337   .text:00000000000045d8 _THENN
             forth.s:3337   .text:00000000000045e0 THENN
             forth.s:3339   .text:00000000000045e4 $d
             forth.s:3350   .text:00000000000045f8 _AFT
             forth.s:3350   .text:00000000000045fc $t
             forth.s:3350   .text:00000000000045fc AFT
             forth.s:3352   .text:0000000000004600 $d
             forth.s:3364   .text:0000000000004618 _ELSEE
             forth.s:3364   .text:0000000000004620 ELSEE
             forth.s:3366   .text:0000000000004624 $d
             forth.s:3376   .text:0000000000004638 _WHILE
             forth.s:3376   .text:000000000000463e $t
             forth.s:3376   .text:0000000000004640 WHILE
             forth.s:3378   .text:0000000000004644 $d
             forth.s:3387   .text:0000000000004654 _ABRTQ
             forth.s:3387   .text:000000000000465c ABRTQ
             forth.s:3389   .text:0000000000004660 $d
             forth.s:3398   .text:0000000000004678 _STRQ
             forth.s:3398   .text:000000000000467c STRQ
             forth.s:3400   .text:0000000000004680 $d
             forth.s:3410   .text:0000000000004698 _DOTQ
             forth.s:3410   .text:000000000000469c DOTQ
             forth.s:3412   .text:00000000000046a0 $d
             forth.s:3426   .text:00000000000046b8 _UNIQU
             forth.s:3426   .text:00000000000046c0 $t
             forth.s:3426   .text:00000000000046c0 UNIQU
             forth.s:3428   .text:00000000000046c4 $d
             forth.s:3435   .text:00000000000046ec UNIQ1
             forth.s:3432   .text:00000000000046e0 $d
             forth.s:3445   .text:00000000000046f4 SNAME
             forth.s:3446   .text:00000000000046f4 $t
             forth.s:3447   .text:00000000000046f8 $d
             forth.s:3463   .text:000000000000473c SNAM1
             forth.s:3475   .text:0000000000004750 _SCOMP
             forth.s:3475   .text:000000000000475c SCOMP
             forth.s:3477   .text:0000000000004760 $d
             forth.s:3489   .text:0000000000004798 SCOM2
             forth.s:3486   .text:0000000000004790 SCOM1
             forth.s:3494   .text:00000000000047ac SCOM3
             forth.s:3503   .text:00000000000047b4 COLON_ABORT
             forth.s:3504   .text:00000000000047b4 $t
             forth.s:3505   .text:00000000000047b8 $d
             forth.s:3522   .text:00000000000047e4 _OVERT
             forth.s:3522   .text:00000000000047ea $t
             forth.s:3524   .text:00000000000047f0 $d
             forth.s:3535   .text:0000000000004808 _SEMIS
             forth.s:3535   .text:000000000000480a $t
             forth.s:3535   .text:000000000000480c SEMIS
             forth.s:3537   .text:0000000000004810 $d
             forth.s:3549   .text:000000000000482c _RBRAC
             forth.s:3549   .text:000000000000482e $t
             forth.s:3549   .text:0000000000004830 RBRAC
             forth.s:3551   .text:0000000000004834 $d
             forth.s:3562   .text:0000000000004848 $t
             forth.s:3563   .text:000000000000484c $d
ARM GAS  forth.s 			page 213


             forth.s:3575   .text:0000000000004864 _COLON
             forth.s:3575   .text:0000000000004866 $t
             forth.s:3575   .text:0000000000004868 COLON
             forth.s:3577   .text:000000000000486c $d
             forth.s:3588   .text:0000000000004884 _IMMED
             forth.s:3588   .text:000000000000488e $t
             forth.s:3588   .text:0000000000004890 IMMED
             forth.s:3590   .text:0000000000004894 $d
             forth.s:3608   .text:00000000000048c0 _CONST
             forth.s:3608   .text:00000000000048cc CONST
             forth.s:3610   .text:00000000000048d0 $d
             forth.s:3621   .text:0000000000004900 $t
             forth.s:3628   .text:0000000000004900 DODOES
             forth.s:3630   .text:0000000000004904 $d
             forth.s:3645   .text:0000000000004928 $d
             forth.s:3645   .text:000000000000492c _DOES
             forth.s:3645   .text:0000000000004932 $t
             forth.s:3645   .text:0000000000004934 DOES
             forth.s:3647   .text:0000000000004938 $d
             forth.s:3662   .text:0000000000004968 _DEFERAT
             forth.s:3662   .text:0000000000004970 DEFERAT
             forth.s:3664   .text:0000000000004974 $d
             forth.s:3674   .text:000000000000498c _DEFERSTO
             forth.s:3674   .text:0000000000004994 DEFERSTO
             forth.s:3676   .text:0000000000004998 $d
             forth.s:3687   .text:00000000000049b4 _DEFER
             forth.s:3687   .text:00000000000049ba $t
             forth.s:3687   .text:00000000000049bc DEFER
             forth.s:3689   .text:00000000000049c0 $d
             forth.s:3710   .text:0000000000004a0c CREAT
             forth.s:3700   .text:00000000000049f4 DEFER_NOP
             forth.s:3701   .text:00000000000049f4 $t
             forth.s:3702   .text:00000000000049f8 $d
             forth.s:3710   .text:0000000000004a04 _CREAT
             forth.s:3712   .text:0000000000004a10 $d
             forth.s:3725   .text:0000000000004a34 _VARIA
             forth.s:3725   .text:0000000000004a40 VARIA
             forth.s:3727   .text:0000000000004a44 $d
             forth.s:3744   .text:0000000000004a64 DMP
             forth.s:3745   .text:0000000000004a64 $t
             forth.s:3746   .text:0000000000004a68 $d
             forth.s:3758   .text:0000000000004aa0 PDUM2
             forth.s:3752   .text:0000000000004a88 PDUM1
             forth.s:3770   .text:0000000000004aac $d
             forth.s:3770   .text:0000000000004ab0 _DUMP
             forth.s:3770   .text:0000000000004ab8 DUMP
             forth.s:3772   .text:0000000000004abc $d
             forth.s:3794   .text:0000000000004b24 DUMP4
             forth.s:3784   .text:0000000000004afc DUMP1
             forth.s:3796   .text:0000000000004b2c DUMP3
             forth.s:3809   .text:0000000000004b40 TDOT
             forth.s:3810   .text:0000000000004b40 $t
             forth.s:3811   .text:0000000000004b44 $d
             forth.s:3850   .text:0000000000004bd4 _DOTS
             forth.s:3850   .text:0000000000004bd8 DOTS
             forth.s:3852   .text:0000000000004bdc $d
             forth.s:3859   .text:0000000000004bf8 DOTS2
ARM GAS  forth.s 			page 214


             forth.s:3855   .text:0000000000004bec DOTS1
             forth.s:3864   .text:0000000000004c08 RBASE
             forth.s:3865   .text:0000000000004c08 $t
             forth.s:3873   .text:0000000000004c18 RDOT
             forth.s:3875   .text:0000000000004c1c $d
             forth.s:3902   .text:0000000000004c80 _TRACE
             forth.s:3902   .text:0000000000004c86 $t
             forth.s:3902   .text:0000000000004c88 TRACE
             forth.s:3904   .text:0000000000004c8c $d
             forth.s:3923   .text:0000000000004cd0 _TNAME
             forth.s:3923   .text:0000000000004cd6 $t
             forth.s:3923   .text:0000000000004cd8 TNAME
             forth.s:3925   .text:0000000000004cdc $d
             forth.s:3928   .text:0000000000004ce8 TNAM1
             forth.s:3939   .text:0000000000004d1c TNAM2
             forth.s:3948   .text:0000000000004d2c _DOTID
             forth.s:3948   .text:0000000000004d30 $t
             forth.s:3948   .text:0000000000004d30 DOTID
             forth.s:3950   .text:0000000000004d34 $d
             forth.s:3957   .text:0000000000004d58 DOTI1
             forth.s:3958   .text:0000000000004d66 $t
             forth.s:3959   .text:0000000000004d68 $d
             forth.s:3961   *ABS*:0000000000000000 WANT_SEE
             forth.s:4034   .text:0000000000004d70 _VLIST
             forth.s:4034   .text:0000000000004d76 $t
             forth.s:4034   .text:0000000000004d78 VLIST
             forth.s:4036   .text:0000000000004d7c $d
             forth.s:4047   .text:0000000000004d9c WORDS
             forth.s:4068   .text:0000000000004de0 WC
             forth.s:4047   .text:0000000000004d94 _WORDS
             forth.s:4047   .text:0000000000004d9a $t
             forth.s:4049   .text:0000000000004da0 $d
             forth.s:4052   .text:0000000000004dac WORS1
             forth.s:4061   .text:0000000000004dd4 WORS2
             forth.s:4068   .text:0000000000004ddc _WC
             forth.s:4070   .text:0000000000004de4 $d
             forth.s:4087   .text:0000000000004e20 _MARK
             forth.s:4087   .text:0000000000004e28 MARK
             forth.s:4089   .text:0000000000004e2c $d
             forth.s:4092   .text:0000000000004e38 $t
             forth.s:4093   .text:0000000000004e3c $d
             forth.s:4114   .text:0000000000004e68 VERSN
             forth.s:4115   .text:0000000000004e68 $t
             forth.s:4116   .text:0000000000004e6c $d
             forth.s:4124   .text:0000000000004e7c _HI
             forth.s:4124   .text:0000000000004e80 HI
             forth.s:4126   .text:0000000000004e84 $d
             forth.s:4127   .text:0000000000004e9e $t
             forth.s:4128   .text:0000000000004ea0 $d
             forth.s:4152   .text:0000000000004eec $t
             forth.s:4153   .text:0000000000004ef0 $d
             forth.s:4165   .text:0000000000004f0c PS2_QUERY
             forth.s:4166   .text:0000000000004f0c $t
             forth.s:4167   .text:0000000000004f10 $d
             forth.s:4181   .text:0000000000004f76 $t
             forth.s:4182   .text:0000000000004f78 $d
             forth.s:4192   .text:0000000000004f84 IF_SENSE
ARM GAS  forth.s 			page 215


             forth.s:4193   .text:0000000000004f84 $t
             forth.s:4194   .text:0000000000004f88 $d
             forth.s:4209   .text:0000000000004fb8 $t
             forth.s:4210   .text:0000000000004fbc $d
             forth.s:4210   .text:0000000000004fc6 $t
             forth.s:4211   .text:0000000000004fc8 $d
             forth.s:4229   .text:0000000000004ff0 COLD1
             forth.s:4230   .text:0000000000004ff0 $d
             forth.s:4244   .text:000000000000503c COLD2
             forth.s:4247   .text:000000000000503c $d
             forth.s:4250   .text:0000000000005040 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:248    .text:000000000000016f $d
              init.s:373    .text:0000000000000335 $d
              init.s:373    .text:0000000000000336 $t
          ser-term.s:90     .text:0000000000000793 $d
          ser-term.s:90     .text:0000000000000794 $t
          ser-term.s:110    .text:00000000000007cd $d
          ser-term.s:110    .text:00000000000007ce $t
          ser-term.s:133    .text:000000000000080b $d
          ser-term.s:133    .text:000000000000080c $t
          ser-term.s:166    .text:0000000000000867 $d
          ser-term.s:166    .text:0000000000000868 $t
          ser-term.s:193    .text:00000000000008dd $d
          ser-term.s:193    .text:00000000000008de $t
          ser-term.s:205    .text:000000000000090b $d
          ser-term.s:205    .text:000000000000090c $t
             tvout.s:264    .text:0000000000000b5b $d
             tvout.s:264    .text:0000000000000b5c $t
             tvout.s:278    .text:0000000000000b8f $d
             tvout.s:278    .text:0000000000000b90 $t
             tvout.s:306    .text:0000000000000be9 $d
             tvout.s:306    .text:0000000000000bea $t
             tvout.s:325    .text:0000000000000c17 $d
             tvout.s:325    .text:0000000000000c18 $t
             tvout.s:427    .text:0000000000000d51 $d
             tvout.s:427    .text:0000000000000d52 $t
             tvout.s:448    .text:0000000000000dab $d
             tvout.s:448    .text:0000000000000dac $t
             tvout.s:495    .text:0000000000000e41 $d
             tvout.s:495    .text:0000000000000e42 $t
           ps2_kbd.s:307    .text:000000000000152f $d
           ps2_kbd.s:307    .text:0000000000001530 $t
           ps2_kbd.s:396    .text:000000000000162b $d
           ps2_kbd.s:396    .text:000000000000162c $t
           ps2_kbd.s:616    .text:00000000000018cd $d
           ps2_kbd.s:616    .text:00000000000018ce $t
           ps2_kbd.s:633    .text:0000000000001907 $d
           ps2_kbd.s:633    .text:0000000000001908 $t
         spi-flash.s:85     .text:00000000000019f3 $d
         spi-flash.s:85     .text:00000000000019f4 $t
         spi-flash.s:151    .text:0000000000001abf $d
         spi-flash.s:151    .text:0000000000001ac0 $t
         spi-flash.s:238    .text:0000000000001c03 $d
         spi-flash.s:238    .text:0000000000001c04 $t
         spi-flash.s:256    .text:0000000000001c3f $d
ARM GAS  forth.s 			page 216


         spi-flash.s:256    .text:0000000000001c40 $t
         spi-flash.s:278    .text:0000000000001c93 $d
         spi-flash.s:278    .text:0000000000001c94 $t
         spi-flash.s:325    .text:0000000000001d13 $d
         spi-flash.s:325    .text:0000000000001d14 $t
         spi-flash.s:343    .text:0000000000001d35 $d
         spi-flash.s:343    .text:0000000000001d36 $t
         spi-flash.s:352    .text:0000000000001d49 $d
         spi-flash.s:352    .text:0000000000001d4a $t
               fpu.s:161    .text:0000000000001e7d $d
               fpu.s:161    .text:0000000000001e7e $t
               fpu.s:174    .text:0000000000001e9d $d
               fpu.s:174    .text:0000000000001e9e $t
               fpu.s:188    .text:0000000000001ebd $d
               fpu.s:188    .text:0000000000001ebe $t
               fpu.s:201    .text:0000000000001edd $d
               fpu.s:201    .text:0000000000001ede $t
               fpu.s:224    .text:0000000000001f1b $d
               fpu.s:224    .text:0000000000001f1c $t
               fpu.s:236    .text:0000000000001f37 $d
               fpu.s:236    .text:0000000000001f38 $t
               fpu.s:258    .text:0000000000001f6d $d
               fpu.s:258    .text:0000000000001f6e $t
               fpu.s:269    .text:0000000000001f8b $d
               fpu.s:269    .text:0000000000001f8c $t
               fpu.s:279    .text:0000000000001fa5 $d
               fpu.s:279    .text:0000000000001fa6 $t
               fpu.s:292    .text:0000000000001fd5 $d
               fpu.s:292    .text:0000000000001fd6 $t
               fpu.s:318    .text:0000000000002023 $d
               fpu.s:318    .text:0000000000002024 $t
               fpu.s:342    .text:0000000000002065 $d
               fpu.s:342    .text:0000000000002066 $t
               fpu.s:351    .text:000000000000207f $d
               fpu.s:351    .text:0000000000002080 $t
               fpu.s:381    .text:00000000000020d7 $d
               fpu.s:381    .text:00000000000020d8 $t
            strtof.s:184    .text:00000000000022e3 $d
            strtof.s:184    .text:00000000000022e4 $t
              ftoa.s:72     .text:0000000000002513 $d
              ftoa.s:72     .text:0000000000002514 $t
              ftoa.s:84     .text:0000000000002523 $d
              ftoa.s:84     .text:0000000000002524 $t
             forth.s:132    .text:00000000000025c1 $d
             forth.s:132    .text:00000000000025c2 $t
             forth.s:144    .text:00000000000025e5 $d
             forth.s:144    .text:00000000000025e6 $t
             forth.s:156    .text:0000000000002607 $d
             forth.s:156    .text:0000000000002608 $t
             forth.s:178    .text:0000000000002641 $d
             forth.s:178    .text:0000000000002642 $t
             forth.s:214    .text:000000000000265f $d
             forth.s:214    .text:0000000000002660 $t
             forth.s:261    .text:000000000000270d $d
             forth.s:261    .text:000000000000270e $t
             forth.s:356    .text:000000000000279d $d
             forth.s:356    .text:000000000000279e $t
ARM GAS  forth.s 			page 217


             forth.s:381    .text:00000000000027cb $d
             forth.s:381    .text:00000000000027cc $t
             forth.s:391    .text:00000000000027df $d
             forth.s:391    .text:00000000000027e0 $t
             forth.s:401    .text:00000000000027ef $d
             forth.s:401    .text:00000000000027f0 $t
             forth.s:413    .text:0000000000002809 $d
             forth.s:413    .text:000000000000280a $t
             forth.s:433    .text:0000000000002839 $d
             forth.s:433    .text:000000000000283a $t
             forth.s:442    .text:000000000000284d $d
             forth.s:442    .text:000000000000284e $t
             forth.s:499    .text:00000000000028c1 $d
             forth.s:499    .text:00000000000028c2 $t
             forth.s:515    .text:00000000000028e3 $d
             forth.s:515    .text:00000000000028e4 $t
             forth.s:525    .text:00000000000028f5 $d
             forth.s:525    .text:00000000000028f6 $t
             forth.s:534    .text:0000000000002907 $d
             forth.s:534    .text:0000000000002908 $t
             forth.s:551    .text:0000000000002929 $d
             forth.s:551    .text:000000000000292a $t
             forth.s:581    .text:000000000000296f $d
             forth.s:581    .text:0000000000002970 $t
             forth.s:590    .text:0000000000002985 $d
             forth.s:590    .text:0000000000002986 $t
             forth.s:638    .text:00000000000029df $d
             forth.s:638    .text:00000000000029e0 $t
             forth.s:649    .text:00000000000029f3 $d
             forth.s:649    .text:00000000000029f4 $t
             forth.s:657    .text:0000000000002a01 $d
             forth.s:657    .text:0000000000002a02 $t
             forth.s:665    .text:0000000000002a11 $d
             forth.s:665    .text:0000000000002a12 $t
             forth.s:673    .text:0000000000002a21 $d
             forth.s:673    .text:0000000000002a22 $t
             forth.s:697    .text:0000000000002a51 $d
             forth.s:697    .text:0000000000002a52 $t
             forth.s:722    .text:0000000000002a85 $d
             forth.s:722    .text:0000000000002a86 $t
             forth.s:730    .text:0000000000002a95 $d
             forth.s:730    .text:0000000000002a96 $t
             forth.s:738    .text:0000000000002aa7 $d
             forth.s:738    .text:0000000000002aa8 $t
             forth.s:759    .text:0000000000002acf $d
             forth.s:759    .text:0000000000002ad0 $t
             forth.s:788    .text:0000000000002b0b $d
             forth.s:788    .text:0000000000002b0c $t
             forth.s:798    .text:0000000000002b1f $d
             forth.s:798    .text:0000000000002b20 $t
             forth.s:811    .text:0000000000002b3d $d
             forth.s:811    .text:0000000000002b3e $t
             forth.s:864    .text:0000000000002bb5 $d
             forth.s:864    .text:0000000000002bb6 $t
             forth.s:905    .text:0000000000002c0b $d
             forth.s:905    .text:0000000000002c0c $t
             forth.s:928    .text:0000000000002c37 $d
ARM GAS  forth.s 			page 218


             forth.s:928    .text:0000000000002c38 $t
             forth.s:941    .text:0000000000002c57 $d
             forth.s:941    .text:0000000000002c58 $t
             forth.s:965    .text:0000000000002c87 $d
             forth.s:965    .text:0000000000002c88 $t
             forth.s:1011   .text:0000000000002cdf $d
             forth.s:1011   .text:0000000000002ce0 $t
             forth.s:1023   .text:0000000000002cf7 $d
             forth.s:1023   .text:0000000000002cf8 $t
             forth.s:1035   .text:0000000000002d13 $d
             forth.s:1035   .text:0000000000002d14 $t
             forth.s:1096   .text:0000000000002d6f $d
             forth.s:1096   .text:0000000000002d70 $t
             forth.s:1105   .text:0000000000002d85 $d
             forth.s:1105   .text:0000000000002d86 $t
             forth.s:1132   .text:0000000000002dcd $d
             forth.s:1132   .text:0000000000002dce $t
             forth.s:1151   .text:0000000000002df1 $d
             forth.s:1151   .text:0000000000002df2 $t
             forth.s:1170   .text:0000000000002e1d $d
             forth.s:1170   .text:0000000000002e1e $t
             forth.s:1210   .text:0000000000002e77 $d
             forth.s:1210   .text:0000000000002e78 $t
             forth.s:1230   .text:0000000000002ea1 $d
             forth.s:1230   .text:0000000000002ea2 $t
             forth.s:1244   .text:0000000000002ebf $d
             forth.s:1244   .text:0000000000002ec0 $t
             forth.s:1255   .text:0000000000002edd $d
             forth.s:1255   .text:0000000000002ede $t
             forth.s:1272   .text:0000000000002efb $d
             forth.s:1272   .text:0000000000002efc $t
             forth.s:1289   .text:0000000000002f27 $d
             forth.s:1289   .text:0000000000002f28 $t
             forth.s:1424   .text:0000000000003073 $d
             forth.s:1424   .text:0000000000003074 $t
             forth.s:1446   .text:00000000000030bf $d
             forth.s:1446   .text:00000000000030c0 $t
             forth.s:1495   .text:00000000000030ff $d
             forth.s:1495   .text:0000000000003100 $t
             forth.s:1546   .text:0000000000003177 $d
             forth.s:1546   .text:0000000000003178 $t
             forth.s:1605   .text:0000000000003221 $d
             forth.s:1605   .text:0000000000003222 $t
             forth.s:1623   .text:0000000000003249 $d
             forth.s:1623   .text:000000000000324a $t
             forth.s:1657   .text:000000000000329b $d
             forth.s:1657   .text:000000000000329c $t
             forth.s:1690   .text:00000000000032e9 $d
             forth.s:1690   .text:00000000000032ea $t
             forth.s:1722   .text:0000000000003331 $d
             forth.s:1722   .text:0000000000003332 $t
             forth.s:1800   .text:0000000000003413 $d
             forth.s:1800   .text:0000000000003414 $t
             forth.s:1812   .text:0000000000003431 $d
             forth.s:1812   .text:0000000000003432 $t
             forth.s:1844   .text:000000000000347f $d
             forth.s:1844   .text:0000000000003480 $t
ARM GAS  forth.s 			page 219


             forth.s:1862   .text:00000000000034b1 $d
             forth.s:1862   .text:00000000000034b2 $t
             forth.s:1876   .text:00000000000034db $d
             forth.s:1876   .text:00000000000034dc $t
             forth.s:1954   .text:0000000000003597 $d
             forth.s:1954   .text:0000000000003598 $t
             forth.s:2051   .text:00000000000036b7 $d
             forth.s:2051   .text:00000000000036b8 $t
             forth.s:2135   .text:00000000000037e7 $d
             forth.s:2135   .text:00000000000037e8 $t
             forth.s:2152   .text:000000000000381d $d
             forth.s:2152   .text:000000000000381e $t
             forth.s:2170   .text:0000000000003853 $d
             forth.s:2170   .text:0000000000003854 $t
             forth.s:2240   .text:00000000000038d3 $d
             forth.s:2240   .text:00000000000038d4 $t
             forth.s:2278   .text:000000000000393f $d
             forth.s:2278   .text:0000000000003940 $t
             forth.s:2313   .text:00000000000039a7 $d
             forth.s:2313   .text:00000000000039a8 $t
             forth.s:2333   .text:00000000000039df $d
             forth.s:2333   .text:00000000000039e0 $t
             forth.s:2475   .text:0000000000003bb7 $d
             forth.s:2475   .text:0000000000003bb8 $t
             forth.s:2514   .text:0000000000003c19 $d
             forth.s:2514   .text:0000000000003c1a $t
             forth.s:2526   .text:0000000000003c3f $d
             forth.s:2526   .text:0000000000003c40 $t
             forth.s:2537   .text:0000000000003c59 $d
             forth.s:2537   .text:0000000000003c5a $t
             forth.s:2820   .text:0000000000003fc7 $d
             forth.s:2820   .text:0000000000003fc8 $t
             forth.s:2912   .text:00000000000040db $d
             forth.s:2912   .text:00000000000040dc $t
             forth.s:2963   .text:0000000000004193 $d
             forth.s:2963   .text:0000000000004194 $t
             forth.s:2975   .text:00000000000041bd $d
             forth.s:2975   .text:00000000000041be $t
             forth.s:2996   .text:0000000000004203 $d
             forth.s:2996   .text:0000000000004204 $t
             forth.s:3008   .text:0000000000004221 $d
             forth.s:3008   .text:0000000000004222 $t
             forth.s:3023   .text:000000000000424f $d
             forth.s:3023   .text:0000000000004250 $t
             forth.s:3171   .text:00000000000043df $d
             forth.s:3171   .text:00000000000043e0 $t
             forth.s:3221   .text:0000000000004485 $d
             forth.s:3221   .text:0000000000004486 $t
             forth.s:3245   .text:00000000000044c1 $d
             forth.s:3245   .text:00000000000044c2 $t
             forth.s:3296   .text:0000000000004553 $d
             forth.s:3296   .text:0000000000004554 $t
             forth.s:3324   .text:00000000000045bb $d
             forth.s:3324   .text:00000000000045bc $t
             forth.s:3337   .text:00000000000045dd $d
             forth.s:3337   .text:00000000000045de $t
             forth.s:3364   .text:000000000000461d $d
ARM GAS  forth.s 			page 220


             forth.s:3364   .text:000000000000461e $t
             forth.s:3387   .text:000000000000465b $d
             forth.s:3387   .text:000000000000465c $t
             forth.s:3398   .text:000000000000467b $d
             forth.s:3398   .text:000000000000467c $t
             forth.s:3410   .text:000000000000469b $d
             forth.s:3410   .text:000000000000469c $t
             forth.s:3475   .text:0000000000004759 $d
             forth.s:3475   .text:000000000000475a $t
             forth.s:3608   .text:00000000000048c9 $d
             forth.s:3608   .text:00000000000048ca $t
             forth.s:3662   .text:000000000000496f $d
             forth.s:3662   .text:0000000000004970 $t
             forth.s:3674   .text:0000000000004993 $d
             forth.s:3674   .text:0000000000004994 $t
             forth.s:3710   .text:0000000000004a0b $d
             forth.s:3710   .text:0000000000004a0c $t
             forth.s:3725   .text:0000000000004a3d $d
             forth.s:3725   .text:0000000000004a3e $t
             forth.s:3770   .text:0000000000004ab5 $d
             forth.s:3770   .text:0000000000004ab6 $t
             forth.s:3850   .text:0000000000004bd7 $d
             forth.s:3850   .text:0000000000004bd8 $t
             forth.s:4068   .text:0000000000004ddf $d
             forth.s:4068   .text:0000000000004de0 $t
             forth.s:4087   .text:0000000000004e25 $d
             forth.s:4087   .text:0000000000004e26 $t
             forth.s:4124   .text:0000000000004e7f $d
             forth.s:4124   .text:0000000000004e80 $t
             forth.s:4223   .text:0000000000004fd9 $d
             forth.s:4223   .text:0000000000004fda $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
