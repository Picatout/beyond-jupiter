ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
 199              	   .equ NVIC_ISPR2, 0x208 
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXTI9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
ARM GAS  forth.s 			page 6


 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
 313              	.equ TIM_SR,16
ARM GAS  forth.s 			page 7


 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
ARM GAS  forth.s 			page 8


  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
ARM GAS  forth.s 			page 9


  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		/* dictionary header  */
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
ARM GAS  forth.s 			page 10


 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
ARM GAS  forth.s 			page 11


 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    STMFD	RSP!,{IP}
 223              	    ldr IP,=\target  
 224              	   	b INEXT 
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
ARM GAS  forth.s 			page 12


  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
ARM GAS  forth.s 			page 13


 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      A5F85DF8 
 157      04EB
 158 000a DFF878C4 	  ldr IP,=dh
 159 000e 01F0F5B9 	  b INEXT  
 160              	dh:
ARM GAS  forth.s 			page 14


 161 0012 6D2B0000 	  _ADR PRESE    
 162 0016 7B150000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e 311A0000 	  _ADR COUNT 
 164 0022 21230000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a AD160000 	  _ADR DUPP
 167 002e 55160000 	  _ADR TOR 
 168 0032 7B150000 	  _DOLIT 16 
 168      10000000 
 169 003a C91A0000 	  _ADR BASE 
 170 003e ED150000 	  _ADR STORE 
 171 0042 59240000 	  _ADR DOT 
 172 0046 2D160000 	  _ADR RFROM
 173 004a 7B150000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 F1160000 	  _ADR ANDD
 175 0056 BB150000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 7B150000 	  _DOLIT ','
 177      2C000000 
 178 006a 85140000 	  _ADR EMIT 
 179 006e CD220000 	  _ADR SPACE 
 180 0072 59240000 	  _ADR DOT 
 181              	1:
 182 0076 01010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F0B8B9 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F0AFB9 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
ARM GAS  forth.s 			page 15


 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 504700BF 	  _NEST 
 231 00d8 47F8046D 	  _PUSH 
 232 00dc 7B150000 		_DOLIT user_reboot_msg
 232      F0000000 
 233 00e4 311A0000 		_ADR COUNT 
 234 00e8 21230000 	  _ADR TYPEE 
 235 00ec 01010000 	  _ADR reset_mcu 
 236              	
 237              		.p2align 2 
 238              	user_reboot_msg:
 239 00f0 0D       		.byte 13 
 240 00f1 0D757365 		.ascii "\ruser reboot!"
 240      72207265 
 240      626F6F74 
 240      21
 241 00fe 00BF     		.p2align 2 
 242              	
 243              	reset_mcu:
 244 0100 4FF48050 	  _MOV32 r0,UART 
 244      C4F20100 
 245 0108 0168     	1: ldr r1,[r0,#USART_SR]
 246 010a 11F0400F 	  tst r1,#(1<<6)
 247 010e FBD0     	  beq 1b
 248 0110 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 248      CEF20000 
 249 0118 C168     		ldr r1,[r0,#SCB_AIRCR]
 250 011a 41F00401 		orr r1,#(1<<2)
 251 011e C0F2FA51 		movt r1,#SCB_VECTKEY
 252 0122 C160     		str r1,[r0,#SCB_AIRCR]
 253 0124 FEE7     		b . 
 254              	
 255              	 
 256              	
ARM GAS  forth.s 			page 16


 257              	/**************************************
 258              	  reset_handler execute at MCU reset
 259              	***************************************/
 260              	  .type  reset_handler, %function
 261 0126 00BF     	  .p2align 2 
 262              	  .global reset_handler
 263              	reset_handler:
 264 0128 4FF00000 		_MOV32 r0,RAM_END
 264      C2F20200 
 265 0130 8546     		mov sp,r0  
 266 0132 FFF7FEFF 		bl	remap 
 267 0136 00F01FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 268 013a 00F0BFF9 		bl  ser_init
 269 013e FFF7FEFF 		bl	tv_init
 270 0142 FFF7FEFF 	  bl  kbd_init  
 271 0146 00F003F8 		bl forth_init 
 272 014a 03F0FFB9 		b COLD 
 273              	
 274              	
 275              	
 276              		.type forth_init, %function 
 277 014e 00BF     	  .p2align 2 
 278              	forth_init:
 279 0150 4FF00004 		_MOV32 UP,UPP 
 279      C2F20004 
 280 0158 4FF47F47 		_MOV32 DSP,SPP
 280      C2F20107 
 281 0160 4FF68078 		_MOV32 RSP,RPP
 281      C2F20108 
 282 0168 DFF81CA3 	  ldr INX,=NEST
 283 016c 4AF0010A 	  orr INX,#1 
 284 0170 86EA0606 		EOR TOS,TOS  
 285 0174 7047     		_RET 
 286              	
 287              	
 288              	
 289              	  .type init_devices, %function
 290 0176 00BF     	  .p2align 2 
 291              	init_devices:
 292              	/* init clock to HSE 96 Mhz */
 293              	/* set 3 wait states in FLASH_ACR_LATENCY */
 294 0178 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 294      C4F20200 
 295 0180 4FF00301 	  mov r1,#3 
 296 0184 0160     	  str r1,[r0,#FLASH_ACR]
 297              	/* configure clock for HSE, 25 Mhz crystal */
 298              	/* enable HSE in RCC_CR */
 299 0186 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 299      C4F20200 
 300 018e 0168     	  ldr r1,[r0,#RCC_CR]
 301 0190 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 302 0194 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 303              	/* wait HSERDY loop */
 304              	wait_hserdy:
 305 0196 0168     	  ldr r1,[r0,#RCC_CR]
 306 0198 11F4003F 	  tst r1,#(1<<17)
 307 019c FBD0     	  beq wait_hserdy
ARM GAS  forth.s 			page 17


 308              	
 309              	/************************************************* 
 310              	   configure PLL  and source 
 311              	   SYSCLOCK=96 Mhz
 312              	   select HSE as  PLL source clock
 313              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 314              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 315              	****************************************************/
 316              	  /* set RCC_PLLCFGR */
 317 019e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 317      C4F20200 
 318 01a6 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 318      C0F24041 
 319 01ae 4160     	  str r1,[r0,#RCC_PLLCFGR]
 320              	  /* enable PLL */
 321 01b0 0168     	  ldr r1,[r0,#RCC_CR]
 322 01b2 41F08071 	  orr r1, #(1<<24)
 323 01b6 0160     	  str r1,[r0,#RCC_CR]
 324              	/* wait for PLLRDY */
 325              	wait_pllrdy:
 326 01b8 0168     	  ldr r1,[r0,#RCC_CR]
 327 01ba 11F0007F 	  tst r1,#(1<<25)
 328 01be FBD1     	  bne wait_pllrdy 
 329              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 330 01c0 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 330      C0F21901 
 331 01c8 8160     	  str r1,[r0,#RCC_CFGR]
 332              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 333 01ca 8168     	  ldr r1,[r0,#RCC_CFGR]
 334 01cc 41F00201 	  orr r1,#2
 335 01d0 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 336              	/* wait for SWS==2 */
 337              	wait_sws:
 338 01d2 8168     	  ldr r1,[r0,#RCC_CFGR]
 339 01d4 11F0080F 	  tst r1,#(2<<2)
 340 01d8 FBD0     	  beq wait_sws
 341              	/* now sysclock is 96 Mhz */
 342              	
 343              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 344 01da 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 345 01de 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 346 01e0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 347 01e4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 348              	/* configure GPIOC:13 as output for user LED */
 349 01e6 4FF40060 	  _MOV32 r0,LED_GPIO 
 349      C4F20200 
 350 01ee 4FF00D01 	  mov r1,#LED_PIN
 351 01f2 4FF01102 	  mov r2,#OUTPUT_OD 
 352 01f6 00B500F0 	  _CALL gpio_config 
 352      8FF85DF8 
 352      04EB
 353 0200 4FF00102 	  mov r2,#1
 354 0204 00B500F0 	  _CALL gpio_out 
 354      DEF85DF8 
 354      04EB
 355              	/* enable compensation CELL for fast I/O */
 356 020e 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
ARM GAS  forth.s 			page 18


 356      C4F20101 
 357 0216 4FF00100 		mov r0,#1 
 358 021a 0862     		str r0,[R1,#SYSCFG_CMPCR]
 359              	/* wait for ready bit */ 
 360 021c 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 361 021e 10F4807F 	    tst r0,#(1<<8)
 362 0222 FBD0     		beq 1b 	
 363              	
 364              	
 365              	/* configure systicks for 1msec ticks */
 366              	// set priority to 15 (lowest)
 367 0224 4FF0FF30 	  mov r0,#STCK_IRQ
 368 0228 4FF00F01 	  mov r1,#15 
 369 022c 00B500F0 	  _CALL nvic_set_priority
 369      2FF85DF8 
 369      04EB
 370 0236 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 370      CEF20000 
 371 023e 47F2FF61 	  _MOV32 r1,95999 
 371      C0F20101 
 372 0246 4160     	  str r1,[r0,#STK_LOAD]
 373 0248 4FF00701 	  mov r1,#7
 374 024c 0160     	  str r1,[r0,STK_CTL]
 375 024e 7047     	  _RET  
 376              	
 377              	
 378              	/* copy system variables to RAM */ 
 379              		.type remap, %function 
 380              	    .global remap 
 381              	remap:
 382              	// copy system to RAM 	
 383 0250 4FF00000 		_MOV32 r0,RAM_ADR 
 383      C2F20000 
 384 0258 8C49     		ldr r1,=UZERO 
 385 025a 4FF0A802 		mov r2,#ULAST-UZERO 
 386 025e 02F10302 		add r2,r2,#3
 387 0262 22F00302 		and r2,r2,#~3 
 388 0266 51F8043B 	1:	ldr r3,[r1],#4 
 389 026a 40F8043B 		str r3,[r0],#4 
 390 026e 043A     		subs R2,#4 
 391 0270 F9D1     		bne 1b
 392              	// zero end of RAM 
 393 0272 4FF00002 		_MOV32 r2,RAM_END 
 393      C2F20202 
 394 027a 83EA0303 		eor r3,r3,r3 
 395 027e 40F8043B 	2:  str r3,[r0],#4
 396 0282 9042     		cmp r0,r2 
 397 0284 FBDB     		blt 2b 
 398 0286 4FF00004 		_MOV32 UP,RAM_ADR  
 398      C2F20004 
 399 028e 7047     		_RET 
 400              	
 401              	// set irq priority 
 402              	// 0 highest 
 403              	// 15 lowest
 404              	// input: r0 IRQn  
 405              	//        r1  ipr 
ARM GAS  forth.s 			page 19


 406              	nvic_set_priority:
 407 0290 08B4     	    push {r3}
 408 0292 0028     	    cmp r0,#0 
 409 0294 08D4     	    bmi negative_irq 
 410 0296 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 410      CEF20003 
 411 029e 4FEA0111 	    lsl r1,#4 
 412 02a2 1954     	    strb r1,[r3,r0]
 413 02a4 08BC     	    pop {r3}
 414 02a6 7047     	    _RET 
 415              	negative_irq:
 416 02a8 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 416      CEF20003 
 417 02b0 00F00F00 	    and r0,#0XF 
 418 02b4 A0F10400 	    sub r0,#4 
 419 02b8 4FEA0111 	    lsl r1,#4 
 420 02bc 1954     	    strb r1,[r3,r0]
 421 02be 08BC     	    pop {r3}
 422 02c0 7047     	    _RET 
 423              	
 424              	
 425              	// enable interrupt in nvic 
 426              	// input: r0 = IRQn 
 427              	nvic_enable_irq: 
 428 02c2 0EB4     	    push {r1,r2,r3}
 429 02c4 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 429      CEF20003 
 430 02cc 0146     	    mov r1,r0 
 431 02ce 4FEA5111 	    lsr r1,#5  
 432 02d2 4FEA8101 	    lsl r1,#2  // ISERn  
 433 02d6 00F01F00 	    and r0,#31 // bit#
 434 02da 4FF00102 	    mov r2,#1 
 435 02de 02FA00F2 	    lsl r2,r0
 436 02e2 72B6     	    cpsid I
 437 02e4 5A50     	    str r2,[r3,r1]
 438 02e6 62B6     	    cpsie I 
 439 02e8 0EBC     	    pop {r1,r2,r3}
 440 02ea 7047     	    _RET 
 441              	
 442              	// disable interrupt in nvic
 443              	// input: r0 = IRQn
 444              	nvic_disable_irq:
 445 02ec 0EB4     	    push {r1,r2,r3}
 446 02ee 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 446      CEF20003 
 447 02f6 0146     	    mov r1,r0 
 448 02f8 4FEA5111 	    lsr r1,#5  
 449 02fc 4FEA8101 	    lsl r1,#2  // ISERn
 450 0300 00F01F00 	    and r0,#31 // bit#
 451 0304 4FF00102 	    mov r2,#1 
 452 0308 02FA00F2 	    lsl r2,r0
 453 030c 5A50     	    str r2,[r3,r1]
 454 030e BFF34F8F 	    dsb 
 455 0312 BFF36F8F 	    isb 
 456 0316 0EBC     	    pop {r1,r2,r3}
 457 0318 7047     	    _RET 
 458              	
ARM GAS  forth.s 			page 20


 459              	/**********************************
 460              	  gpio_config 
 461              	  Configure gpio mode 
 462              	  input:
 463              	    r0   GPIOx 
 464              	    r1   pin 
 465              	    r2   mode 
 466              	  output:
 467              	    none 
 468              	  use:
 469              	    r3,r5,r11  
 470              	**********************************/
 471              	gpio_config:
 472 031a 2DE92808 	    push {r3,r5,r11}
 473              	//  clear registers field 
 474 031e 4FF00105 	    mov r5,#1
 475 0322 05FA01F5 	    lsl r5,r1
 476 0326 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 477 032a 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 478 032c 03EA0503 	    and r3,r5 
 479 0330 4360     	    str r3,[r0,#GPIO_OTYPER]
 480 0332 4FF00305 	    mov r5,#3 
 481 0336 4FF0020B 	    mov r11,#2 
 482 033a 01FB0BFB 	    mul r11,r1 
 483 033e 05FA0BF5 	    lsl r5,r11 
 484 0342 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 485 0346 0368     	    ldr r3,[r0,#GPIO_MODER]
 486 0348 03EA0503 	    and r3,r5 
 487 034c 0360     	    str r3,[r0,#GPIO_MODER]
 488 034e C368     	    ldr r3,[r0,#GPIO_PUPDR]
 489 0350 03EA0503 	    and r3,r5 
 490 0354 C360     	    str r3,[r0,#GPIO_PUPDR]
 491              	// set mode register, r2 low nibble  
 492 0356 02F00305 	    and r5,r2,#3    
 493 035a 05FA0BF5 	    lsl r5,r11 // mode 
 494 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 495 0360 43EA0503 	    orr r3,r5 
 496 0364 0360     	    str r3,[r0,#GPIO_MODER]
 497 0366 032A     	    cmp r2,#3
 498 0368 13D0     	    beq 9f // analog input 
 499 036a 12F00305 	    ands r5,r2,#3 
 500 036e 08D0     	    beq input_pull 
 501              	output_type:
 502 0370 4FEA1212 	    lsr r2,#4 
 503 0374 02FA01F2 	    lsl r2,r1 // 1 bit field 
 504 0378 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 505 037a 43EA0203 	    orr r3,r2 
 506 037e 4360     	    str r3,[r0,#GPIO_OTYPER]
 507 0380 07E0     	    b 9f 
 508              	input_pull:
 509 0382 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 510 0384 4FEA1212 	    lsr r2,#4 
 511 0388 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 512 038c 43EA0203 	    orr r3,r2 
 513 0390 C360     	    str r3,[r0,#GPIO_PUPDR]
 514 0392 BDE82808 	9:  pop {r3,r5,r11}
 515 0396 7047     	    _RET 
ARM GAS  forth.s 			page 21


 516              	
 517              	// configure gpio speed 
 518              	// input:
 519              	//    r0   GPIO_BASE_ADR 
 520              	//    r1   pin 
 521              	//    r2   speed
 522              	// use:
 523              	//  r3,r5,r11 
 524              	gpio_speed:
 525 0398 2DE92808 	    push {r3,r5,r11}
 526 039c 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 527 039e 4FF00305 	    mov r5,#3
 528 03a2 4FF0020B 	    mov r11,#2 
 529 03a6 01FB0BFB 	    mul r11,r1 
 530 03aa 05FA0BF5 	    lsl r5,r11
 531 03ae 6FEA0505 	    mvn r5,r5 
 532 03b2 03EA0503 	    and r3,r5   
 533 03b6 02FA0BF2 	    lsl r2,r11  
 534 03ba 43EA0203 	    orr r3,r2 
 535 03be 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 536 03c0 BDE82808 	    pop {r3,r5,r11}
 537 03c4 7047     	    _RET
 538              	
 539              	/**************************** 
 540              	  gpio_out port,pin,0|1
 541              	  input:
 542              	    r0   gpio_base_adr 
 543              	    r1   pin 
 544              	    r2   data 0|1 
 545              	**************************/
 546              	gpio_out:
 547 03c6 08B4     	    push {r3}
 548 03c8 4FF00103 	    mov r3,#1 
 549 03cc 03FA01F3 	    lsl r3,r1 
 550 03d0 0AB9     	    cbnz r2, 1f 
 551 03d2 4FEA0343 	    lsl r3,#16 
 552 03d6 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 553 03d8 08BC     	    pop {r3}
 554 03da 7047     	    _RET 
 555              	
 556              	/******************************************************
 557              	*  COLD start moves the following to USER variables.
 558              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 559              	******************************************************/
 560              		.p2align 2
 561              	UZERO:
 562 03dc 00000000 		.word 0  			/*Reserved */
 563 03e0 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 564 03e4 00000000 		.word 0      /* TICKS */
 565 03e8 00000000 	    .word 0     /* CD_TIMER */
 566 03ec DC340000 		.word HI  /*'BOOT */
 567 03f0 24050000 		.word SER_QKEY /* query for character */
 568 03f4 60050000 	  .word SER_EMIT  /* char output device */
 569 03f8 0A000000 	  .word BASEE 	/*BASE */
 570 03fc 00000000 		.word 0			/*tmp */
 571 0400 00000000 		.word 0			/*SPAN */
 572 0404 00000000 		.word 0			/*>IN */
ARM GAS  forth.s 			page 22


 573 0408 00000000 		.word 0			/*#TIB */
 574 040c 00FF0120 		.word TIBB	/*TIBU */
 575 0410 442A0000 		.word INTER	/*'EVAL */
 576 0414 00000000 		.word 0			/*HLD */
 577 0418 44350000 		.word _LASTN	/*CONTEXT */
 578 041c A0350000 		.word CTOP  	/* FCP end of system dictionnary */
 579 0420 C4310020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 580 0424 44350000 		.word _LASTN	/*LAST word in dictionary */
 581 0428 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 581      00000000 
 581      00000000 
 581      00000000 
 582 0438 00000000 		.word 0  /* RX_HEAD */
 583 043c 00000000 		.word 0  /* RX_TAIL */ 
 584 0440 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 585 0444 00000000 		.word 0  /* VID_STATE, video state */  
 586 0448 00000000 	    .word 0  /* VID_FIELD, field */
 587 044c 00810120 		.word VID_BUFF /* video_buffer address */ 
 588 0450 00000000 	    .word 0 /* kbd struct */
 589 0454 00000000 		.space KBD_QUEUE_SIZE,0  
 589      00000000 
 589      00000000 
 589      00000000 
 590 0464 00000000 		.word 0  /* kbd queue head */
 591 0468 00000000 		.word 0 /* kbd queue tail */ 
 592 046c 00000000 	    .word 0 /* tv cursor row */
 593 0470 00000000 	    .word 0 /* tv cursor column */ 
 594 0474 00000000 	    .word 0 /* tv back color */
 595 0478 07000000 	    .word 7 /* tv font color */
 596 047c 00000000 	    .word 0,0 
 596      00000000 
 597              	ULAST:
 598              	
 599              	// used by _HEADER macro 
 600              	// to link names field
 601              	// in dictionary  
 602 0484 12000000 	    .equ LINK, 0 
 602      F4130000 
 602      DC030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
ARM GAS  forth.s 			page 23


  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0490 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0498 1868     		ldr r0,[r3,#USART_SR]
  38 049a 5968     		ldr r1,[r3,#USART_DR]
  39 049c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04a0 0BD0     		beq 2f // no char received 
  41 04a2 0329     		cmp r1,#3
  42 04a4 3FF416AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04a8 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ac 226E     		ldr r2,[UP,#RX_TAIL]
  45 04ae 8154     		strb r1,[r0,r2]
  46 04b0 02F10102 		add r2,#1 
  47 04b4 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04b8 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04ba 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04bc 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04c4 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04c6 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04ca 01EA0201 	  and r1,r1,r2
  62 04ce 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04d2 41EA0201 	  orr r1,r1,r2 
  64 04d6 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04d8 4FF4EE61 	  mov r1,#0x77<<4 
  67 04dc 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 04de 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 04e6 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 04ea 8160     	  str r1,[r0,#USART_BRR]
ARM GAS  forth.s 			page 24


  73 04ec 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 04f0 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 04f2 4FF02500 	  mov r0,#USART1_IRQ 
  77 04f6 4FF00101 	  mov r1,#1 
  78 04fa 00B5FFF7 	  _CALL nvic_set_priority
  78      C8FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0504 4FF02500 	  mov r0,#USART1_IRQ 
  81 0508 00B5FFF7 	  _CALL nvic_enable_irq  
  81      DAFE5DF8 
  81      04EB
  82 0512 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0514 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F0000BF 
  91 0524 47F8046D 		_PUSH
  92 0528 206E     		ldr T0,[UP,#RX_TAIL] 
  93 052a E16D     		ldr T1,[UP,#RX_HEAD]
  94 052c 90EA0106 		eors TOS,T0,T1 
  95 0530 0CD0     		beq 1f
  96 0532 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0536 0844     		add T0,T1 
  98 0538 0678     		ldrb TOS,[T0]
  99 053a 01F10101 		add T1,#1 
 100 053e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0542 E165     		str T1,[UP,#RX_HEAD]
 102 0544 47F8046D 		_PUSH 
 103 0548 4FF0FF36 		mov TOS,#-1
 104 054c 00F056BF 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0550 18050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0560 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0568 2868     	1:  ldr T0,[WP,#USART_SR]
 113 056a 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 056e FBD0     		beq 1b 
 115 0570 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0572 57F8046B 		_POP
 117 0576 00F041BF 		_NEXT 
 118              	
ARM GAS  forth.s 			page 25


 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 057a 54050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0584 47F8046D 	        _PUSH 
 126 0588 4FF00006 	        mov TOS,#0
 127 058c 00F036BF 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0590 7E050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 059c 47F8046D 	        _PUSH 
 135 05a0 4FF00106 	        mov TOS,#1
 136 05a4 00F02ABF 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05a8 94050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05b4 26B1     	        cbz TOS, 4f 
 144              	// serial console 
 145 05b6 0648     	        ldr T0,=SER_QKEY 
 146 05b8 6061     	        str T0,[UP,#STDIN]
 147 05ba 0648     	        ldr T0,=SER_EMIT
 148 05bc A061     	        str T0,[UP,#STDOUT]
 149 05be 03E0     	        b 9f 
 150              	4: // local console 
 151 05c0 0548     	        ldr T0,=PS2_QKEY
 152 05c2 6061     	        str T0,[UP,#STDIN]
 153 05c4 0548     	        ldr T0,=TV_EMIT
 154 05c6 A061     	        str T0,[UP,#STDOUT]
 155 05c8 57F8046B 	9:      _POP 
 156 05cc 00F016BF 	        _NEXT 
 157 05d0 24050000 	
 157      60050000 
 157      10110000 
 157      D40A0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
ARM GAS  forth.s 			page 26


  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
ARM GAS  forth.s 			page 27


  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	/*******************************************************
  56              	NOTES:
  57              	 1) Values computed for a 96Mhz sysclock 
  58              	 2) Video sync output on PB1 use T3_CH4
  59              	 3) video out trigger TIMER3 CH3 
  60              	********************************************************/
  61              	
  62              	/**************************************
  63              	  initialize TIMER3 CH4 to generate tv_out
  64              	  synchronization signal.
  65              	**************************************/ 
  66              	  _GBL_FUNC tv_init
  67              	// configure PA0:3 as OUTPUT_OD 
  68 05e0 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  68      C4F20200 
  69 05e8 0168     	  ldr r1,[r0,#GPIO_MODER]
  70 05ea 4FF05502 	  mov r2,#0x55
  71 05ee 41EA0201 	  orr r1,r2
  72 05f2 0160     	  str r1,[r0,#GPIO_MODER]
  73 05f4 81EA0101 	  eor r1,r1 
  74 05f8 4161     	  str r1,[r0,#GPIO_ODR]  
  75              	// configure PB1 as OUTPUT_AFPP 
  76              	// this is TIM3_CC4 output compare 
  77 05fa 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  78 05fe 4FF00101 	  mov r1,#1 // pin 1 
  79 0602 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  80 0606 00B5FFF7 	  _CALL gpio_config 
  80      87FE5DF8 
  80      04EB
  81 0610 4FF00101 	  mov r1,#1 
  82 0614 4FF00202 	  mov r2,#2
  83 0618 00B5FFF7 	  _CALL gpio_speed 
  83      BDFE5DF8 
  83      04EB
  84              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  85 0622 016A     	  ldr r1,[r0,#GPIO_AFRL]
  86 0624 41F02001 	  orr r1,#(2<<4) // r2 
  87 0628 0162     	  str r1,[r0,#GPIO_AFRL]
  88              	// enable peripheral clock 
  89 062a 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  89      C4F20202 
ARM GAS  forth.s 			page 28


  90 0632 4FF00200 	  mov r0,#2 
  91 0636 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  92 0638 41EA0001 	  orr r1,r0 
  93 063c 1164     	  str r1,[r2,#RCC_APB1ENR]
  94              	// configure TIMER3   
  95 063e 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  95      C4F20002 
  96 0646 41F2D470 	  mov r0,#HPER
  97 064a D062     	  str r0,[r2,#TIM_ARR]
  98 064c 40F23F50 	  mov r0,#VIDEO_DELAY 
  99 0650 D063     	  str r0,[r2,#TIM_CCR3]
 100 0652 4FF4E170 	  mov r0,#HPULSE 
 101 0656 1064     	  str r0,[r2,#TIM_CCR4]  
 102 0658 47F27000 	  mov r0,#(7<<12)+(7<<4)
 103 065c D061     	  str r0,[r2,#TIM_CCMR2]
 104 065e 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 105 0662 1062     	  str r0,[r2,#TIM_CCER]
 106 0664 4FF00100 	  mov r0,#1 
 107 0668 D060     	  str r0,[r2,#TIM_DIER]
 108 066a 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 109              	// enable interrupt in NVIC controller 
 110 066c 4FF01D00 	  mov r0,#TIM3_IRQ 
 111 0670 4FF00201 	  mov r1,#2
 112 0674 00B5FFF7 	  _CALL nvic_set_priority
 112      0BFE5DF8 
 112      04EB
 113 067e 4FF01D00 	  mov r0,#TIM3_IRQ 
 114 0682 00B5FFF7 	  _CALL nvic_enable_irq
 114      1DFE5DF8 
 114      04EB
 115 068c 7047     	  _RET
 116              	
 117              	/*************************************
 118              	  TIMER3 interrupt for tv_out
 119              	  T1 line # 
 120              	  T0 TIM3_BASE_ADR 
 121              	*************************************/
 122 068e 00BF     	  _GBL_FUNC tv_out_isr
 123 0690 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 123      C4F20000 
 124 0698 81EA0101 	  eor T1,T1
 125 069c 0161     	  str T1,[T0,#TIM_SR]
 126 069e 616E     	  ldr T1,[UP,#VID_CNTR]
 127 06a0 01F10101 	  add T1,#1 
 128 06a4 6166     	  str T1,[UP,#VID_CNTR]
 129              	/** machine state cases **/
 130 06a6 A26E     	  ldr T2,[UP,#VID_STATE]
 131 06a8 002A     	  cmp T2,#ST_VSYNC 
 132 06aa 07D0     	  beq state_vsync
 133 06ac 012A     	  cmp T2,#ST_PREVID 
 134 06ae 2FD0     	  beq state_pre_video 
 135 06b0 022A     	  cmp T2,#ST_VIDEO 
 136 06b2 36D0     	  beq state_video_out 
 137 06b4 032A     	  cmp T2,#ST_POSTVID 
 138 06b6 60D0     	  beq state_post_video
 139 06b8 FFF7FEBF 	  b default_handler // invalid state 
 140              	/*** vertical sync state **/
ARM GAS  forth.s 			page 29


 141              	state_vsync:
 142 06bc 0129     	  cmp T1,#1
 143 06be 06D1     	  bne 1f 
 144              	/****** set vertical pre-sync  *****/
 145 06c0 4FF0DB01 	  mov T1,#SERRATION
 146 06c4 0164     	  str T1,[T0,#TIM_CCR4]
 147 06c6 40F6E931 	  mov T1,#SYNC_LINE 
 148 06ca C162     	  str T1,[T0,#TIM_ARR]
 149 06cc 68E0     	  b tv_isr_exit 
 150 06ce 0729     	1: cmp T1,#7
 151 06d0 03D1     	  bne 2f 
 152              	// vertical sync pulse   
 153 06d2 40F62821 	  mov T1,#VSYNC_PULSE
 154 06d6 0164     	  str T1,[T0,#TIM_CCR4]
 155 06d8 62E0     	  b tv_isr_exit
 156 06da 0D29     	2: cmp T1,#13
 157 06dc 03D1     	   bne 3f  
 158              	// set vertical post-sync    
 159 06de 4FF0DB01 	   mov T1,#SERRATION 
 160 06e2 0164     	   str T1,[T0,#TIM_CCR4]
 161 06e4 5CE0     	   b tv_isr_exit   
 162 06e6 1229     	3: cmp T1,#18
 163 06e8 03D1     	   bne 4f 
 164              	// if even field full line  
 165 06ea E16E     	   ldr T1,[UP,#VID_FIELD]
 166 06ec 0029     	   cmp T1,#ODD_FIELD  
 167 06ee 57D0     	   beq tv_isr_exit 
 168 06f0 01E0     	   b sync_end 
 169 06f2 1329     	4: cmp T1,#19 
 170 06f4 54D1     	   bne tv_isr_exit
 171              	sync_end: 
 172 06f6 4FF00901 	   mov T1,#9
 173 06fa 6166     	   str T1,[UP,#VID_CNTR]
 174 06fc 4FF4E171 	   mov T1,#HPULSE 
 175 0700 0164     	   str T1,[T0,#TIM_CCR4] 
 176 0702 41F2D471 	   mov T1,#HPER 
 177 0706 C162     	   str T1,[T0,#TIM_ARR] 
 178 0708 4FF00101 	   mov T1,#ST_PREVID 
 179 070c A166     	   str T1,[UP,#VID_STATE]
 180 070e 47E0     	   b tv_isr_exit 
 181              	/*****************************/
 182              	state_pre_video:
 183 0710 2829     	   cmp T1,#VIDEO_FIRST_LINE
 184 0712 45D4     	   bmi tv_isr_exit 
 185 0714 4FF00201 	   mov T1,#ST_VIDEO 
 186 0718 A166     	   str T1,[UP,#VID_STATE]
 187 071a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 188 071e C160     	   str T1,[T0,#TIM_DIER]
 189 0720 3EE0     	   b tv_isr_exit 
 190              	/**************************
 191              	    VIDEO OUTPUT 
 192              	**************************/   
 193              	state_video_out:
 194 0722 F029     	   cmp T1,#VIDEO_LAST_LINE 
 195 0724 06D9     	   bls 1f 
 196 0726 4FF00301 	   mov T1,#ST_POSTVID 
 197 072a A166     	   str T1,[UP,#VID_STATE]
ARM GAS  forth.s 			page 30


 198 072c 4FF00101 	   mov T1,#1 
 199 0730 C160     	   str T1,[T0,#TIM_DIER]
 200 0732 35E0     	   b tv_isr_exit 
 201              	1: // video output
 202 0734 206F     	   ldr T0,[UP,#VID_BUFFER]
 203 0736 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 204 073a 4FF0A003 	   mov T3,#160
 205 073e 03FB01F1 	   mul T1,T3 
 206 0742 0844     	   add T0,T1  
 207 0744 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 207      C4F20201 
 208 074c 0278     	2: ldrb T2,[T0]
 209 074e 4FEA1212 	   lsr T2,#4 
 210 0752 4A61     	   str T2,[T1,#GPIO_ODR]
 211 0754 AFF30080 	   nop.w
 212 0758 AFF30080 	   nop.w 
 213 075c 10F8012B 	   ldrb T2,[T0],#1
 214 0760 02F00F02 	   and T2,#15 
 215 0764 4A61     	   str T2,[T1,#GPIO_ODR]
 216 0766 AFF30080 	   nop.w
 217 076a AFF30080 	   nop.w  
 218 076e 013B     	   subs T3,#1
 219 0770 ECD1     	   bne 2b  
 220 0772 4FF47022 	   mov T2,#(15<<16) 
 221 0776 8A61     	   str T2,[T1,#GPIO_BSRR]
 222 0778 12E0     	   b tv_isr_exit 
 223              	state_post_video:
 224 077a 4FF48372 	   mov T2,#262
 225 077e 9142     	   cmp T1,T2
 226 0780 0ED4     	   bmi tv_isr_exit     
 227              	// odd field line 262 half line 
 228 0782 E16E     	   ldr T1,[UP,VID_FIELD]
 229 0784 11B9     	   cbnz T1, frame_end 
 230 0786 40F6E931 	   mov T1,#SYNC_LINE
 231 078a C162     	   str T1,[T0,#TIM_ARR]      
 232              	frame_end: 
 233 078c 4FF00001 	   mov T1,#ST_VSYNC 
 234 0790 A166     	   str T1,[UP,#VID_STATE]
 235 0792 81EA0101 	   eor T1,T1 
 236 0796 6166     	   str T1,[UP,#VID_CNTR]
 237 0798 E16E     	   ldr T1,[UP,#VID_FIELD]
 238 079a 6FEA0101 	   mvn T1,T1  
 239 079e E166     	   str T1,[UP,#VID_FIELD]
 240              	tv_isr_exit: 
 241 07a0 7047     	   _RET   
 242              	
 243              	
 244              	/***************************
 245              	    FORTH WORDS 
 246              	***************************/
 247              	
 248              	// BACK-COLOR ( -- a )
 249              	//   back color variable 
 250 07a2 AC050000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 250      0A424143 
 250      4B2D434F 
 250      4C4F5200 
ARM GAS  forth.s 			page 31


 250      00BF
 251 07b4 47F8046D 		_PUSH 
 252 07b8 04F19806 		ADD TOS,UP,#BK_COLOR
 253 07bc 00F01EBE 		_NEXT
 254              	
 255              	// PEN-COLOR ( -- a )
 256              	// pen color variable 
 257 07c0 A6070000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 257      0950454E 
 257      2D434F4C 
 257      4F5200BF 
 258 07d0 47F8046D 		_PUSH 
 259 07d4 04F19C06 		ADD TOS,UP,#PEN_COLOR
 260 07d8 00F010BE 		_NEXT 
 261              	
 262              	// COLUMN ( -- a )
 263              	// cursor column variable 
 264 07dc C4070000 	  _HEADER COLUMN,6,"COLUMN"
 264      06434F4C 
 264      554D4E00 
 265 07e8 47F8046D 	  _PUSH 
 266 07ec 04F19406 	  ADD TOS,UP,#COL 
 267 07f0 00F004BE 	  _NEXT 
 268              	
 269              	// ROW ( -- a )
 270              	// cursor row 
 271 07f4 E0070000 	  _HEADER CURSOR_ROW,3,"ROW"
 271      03524F57 
 272 07fc 47F8046D 	  _PUSH 
 273 0800 04F19006 	  ADD TOS,UP,#ROW 
 274 0804 00F0FABD 	  _NEXT 
 275              	
 276              	// ROW>Y ( n1 - n2 )
 277              	// convert cursor row to y coord 
 278 0808 F8070000 	  _HEADER ROWY,5,"ROW>Y"
 278      05524F57 
 278      3E5900BF 
 279 0814 4FF00800 	  mov T0,#CHAR_HEIGHT
 280 0818 00FB06F6 	  mul TOS,T0 
 281 081c 00F0EEBD 	  _NEXT 
 282              	
 283              	// COL>X ( n1 -- n2 )
 284              	// convert cursor column to x coord 
 285 0820 0C080000 	  _HEADER COLX,5,"COL>X" 
 285      05434F4C 
 285      3E5800BF 
 286 082c 4FF00600 	  mov T0,#CHAR_WIDTH 
 287 0830 00FB06F6 	  mul TOS,T0 
 288 0834 00F0E2BD 	  _NEXT 
 289              	
 290              	// FONT ( -- a )
 291              	// return address of font table
 292 0838 24080000 	  _HEADER FONT,4,"FONT" 
 292      04464F4E 
 292      540000BF 
 293 0844 47F8046D 	  _PUSH 
 294 0848 DFF85864 	  ldr TOS,=font_6x8 
ARM GAS  forth.s 			page 32


 295 084c 00F0D6BD 	  _NEXT 
 296              	
 297              	// VIDBUFF ( -- a )
 298              	// address of video buffer 
 299 0850 3C080000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 299      07564944 
 299      42554646 
 300 085c 47F8046D 	  _PUSH 
 301 0860 266F     	  LDR TOS,[UP,#VID_BUFFER]
 302 0862 00F0CBBD 	  _NEXT 
 303              	
 304              	
 305              	// PLOT ( x y op -- )
 306              	// draw a pixel 
 307              	//    0 back color 
 308              	//    1 pen color 
 309              	//    2 invert (invert color pixels )
 310              	//    3 xor pen color  
 311 0866 54080000 	    _HEADER PLOT,4,"PLOT"
 311      04504C4F 
 311      5400
 312              	// compute video buffer byte address from coords
 313 0870 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 314 0872 4FF0A002 	    mov T2,#BPR // bytes per row  
 315 0876 02FB00F0 	    mul T0,T2 
 316 087a 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 317 087e 1044     	    add T0,T2 
 318 0880 236F     	    ldr T3,[UP,#VID_BUFFER] 
 319 0882 0344     	    add T3,T0 // T3 -> byte address 
 320 0884 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 321 0886 4FF00F02 	    mov T2,#15 // AND mask 
 322 088a 11F0010F 	    tst T1,#1 
 323 088e 01D0     	    beq 1f 
 324 0890 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 325 0894 DFF81004 	1:  ldr T0,=plot_op 
 326 0898 D0E806F0 	    tbb [T0,TOS]
 327              	op_back:
 328 089c 05EA0205 	    and WP,T2 // mask out nibble 
 329 08a0 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 330 08a4 11F0010F 	    tst T1,#1 
 331 08a8 01D1     	    bne 1f 
 332 08aa 4FEA0010 	    lsl T0,#4 // high nibble  
 333 08ae 45EA0005 	1:  orr WP,T0  
 334 08b2 1D70     	    strb WP,[T3]
 335 08b4 1AE0     	    b 9f 
 336              	op_pen: 
 337 08b6 05EA0205 	    and WP,T2 
 338 08ba 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 339 08be 11F0010F 	    tst T1,#1
 340 08c2 01D1     	    bne 1f 
 341 08c4 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 342 08c8 45EA0005 	1:	orr WP,T0 
 343 08cc 1D70     	    strb WP,[T3]
 344 08ce 0DE0     	    b 9f 
 345              	op_invert:
 346 08d0 85EA0205 	    eor WP,T2 
 347 08d4 1D70     	    strb WP,[T3]
ARM GAS  forth.s 			page 33


 348 08d6 09E0     	    b 9f 
 349              	op_xor:
 350 08d8 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 351 08dc 11F0010F 	    tst T1,#1 
 352 08e0 01D1     	    bne 1f 
 353 08e2 4FEA0010 	    lsl T0,#4 
 354 08e6 85EA0005 	1:  eor WP,T0 
 355 08ea 1D70     	    strb WP,[T3]
 356 08ec 57F8046B 	9:  _POP 
 357 08f0 00F084BD 	    _NEXT 
 358              	
 359 08f4 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 360              	
 361              	
 362              	// VSYNC ( -- )
 363              	// wait vertical sync phase 
 364 08f8 6A080000 	    _HEADER VSYNC,5,"VSYNC"
 364      05565359 
 364      4E4300BF 
 365 0904 606E     	1:  ldr T0,[UP,#VID_CNTR]
 366 0906 0028     	    cmp T0,#0
 367 0908 FCD1     	    bne 1b
 368 090a 00F077BD 	    _NEXT 
 369              	
 370              	// CLS ( -- )
 371              	// clear TV screen 
 372 090e FC080000 	    _HEADER CLS,3,"CLS"
 372      03434C53 
 372      00BF
 373 0918 80EA0000 	    eor T0,T0 
 374 091c 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 375 0920 40EA0100 	    orr T0,T1 
 376 0924 4FEA0111 	    lsl T1,#4 
 377 0928 40EA0100 	    orr T0,T1 
 378 092c 4FEA0021 	    lsl T1,T0,#8 
 379 0930 40EA0100 	    orr T0,T1 
 380 0934 4FEA0041 	    lsl T1,T0,#16
 381 0938 40EA0100 	    orr T0,T1 
 382 093c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 383 0940 226F     	    ldr T2,[UP,#VID_BUFFER]
 384 0942 5050     	1:	str T0,[T2,T1]
 385 0944 0439     	    subs T1,#4
 386 0946 FCD1     	    bne 1b
 387 0948 1060     	    str T0,[T2]
 388 094a 80EA0000 	    eor T0,T0 
 389 094e C4F89000 	    str T0,[UP,#ROW]
 390 0952 C4F89400 	    str T0,[UP,#COL]
 391 0956 00F051BD 	    _NEXT 
 392              	
 393              	
 394              	// CLRLINE ( n -- )
 395              	// clear text line 
 396 095a 12090000 	  _HEADER CLRLINE,7,"CLRLINE"
 396      07434C52 
 396      4C494E45 
 396      00BF
 397 0968 504700BF 	  _NEST
ARM GAS  forth.s 			page 34


 398 096c 7B150000 	  _DOLIT (BPR*CHAR_HEIGHT)
 398      00050000 
 399 0974 AD160000 	  _ADR DUPP  
 400 0978 55160000 	  _ADR TOR 
 401 097c 91170000 	  _ADR STAR
 402 0980 5D080000 	  _ADR VIDBUFF
 403 0984 71170000 	  _ADR PLUS
 404 0988 2D160000 	  _ADR RFROM   
 405 098c 7B150000 	  _DOLIT 0 
 405      00000000 
 406 0994 E51E0000 	  _ADR FILL 
 407 0998 03140000 	  _UNNEST 
 408              	
 409              	// SCROLLUP ( -- )
 410              	// scroll up tv screen 1 char height 
 411 099c 5E090000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 411      08534352 
 411      4F4C4C55 
 411      500000BF 
 412 09ac 504700BF 	  _NEST 
 413 09b0 5D080000 	  _ADR VIDBUFF 
 414 09b4 AD160000 	  _ADR DUPP 
 415 09b8 7B150000 	  _DOLIT BPR*CHAR_HEIGHT 
 415      00050000 
 416 09c0 AD160000 	  _ADR DUPP 
 417 09c4 55160000 	  _ADR TOR 
 418 09c8 71170000 	  _ADR PLUS 
 419 09cc BD160000 	  _ADR SWAP 
 420 09d0 7B150000 	  _DOLIT VIDEO_BUFFER_SIZE 
 420      007D0000 
 421 09d8 2D160000 	  _ADR RFROM  
 422 09dc 81170000 	  _ADR SUBB 
 423 09e0 B11E0000 	  _ADR MOVE
 424 09e4 7B150000 	  _DOLIT 24 
 424      18000000 
 425 09ec 69090000 	  _ADR CLRLINE 
 426 09f0 03140000 	  _UNNEST 
 427              	
 428              	//  RIGHT ( -- )
 429              	// move cursor 1 char. right 
 430 09f4 A0090000 	  _HEADER RIGHT,5,"RIGHT"
 430      05524947 
 430      485400BF 
 431 0a00 D4F89400 	  ldr T0,[UP,#COL]
 432 0a04 00F10100 	  add T0,#1
 433 0a08 3528     	  cmp T0,#53
 434 0a0a 09D5     	  bpl TVCR  
 435 0a0c C4F89400 	  str T0,[UP,#COL]
 436 0a10 00F0F4BC 	  _NEXT 
 437              	
 438              	
 439              	// TV-CR 
 440              	// carriage return line feed 
 441 0a14 F8090000 	  _HEADER TVCR,5,"TV-CR"
 441      0554562D 
 441      435200BF 
 442 0a20 80EA0000 	  eor T0,T0 
ARM GAS  forth.s 			page 35


 443 0a24 C4F89400 	  str T0,[UP,#COL]
 444 0a28 D4F89000 	  ldr T0,[UP,#ROW]
 445 0a2c 1828     	  cmp T0,#24
 446 0a2e 05D0     	  beq 2f 
 447 0a30 00F10100 	  add T0,#1 
 448 0a34 C4F89000 	  str T0,[UP,#ROW]
 449 0a38 00F0E0BC 	  _NEXT 
 450 0a3c 48F804CD 	2:_CALL_COLWORD 3f 
 450      DFF868C2 
 450      00F0DABC 
 451              	3: 
 452 0a48 AD090000 	  _ADR SCROLLUP 
 453 0a4c 03140000 	  _UNNEST  
 454              	
 455              	
 456              	// extract font pixel 
 457              	FONT_PIXEL: // ( r -- 0|1 )
 458 0a50 4FF08000 	    mov T0,#128 
 459 0a54 06EA0006 	    and TOS,T0 
 460 0a58 4FEAD616 	    lsr TOS,#7
 461 0a5c 00F0CEBC 	    _NEXT 
 462              	
 463              	// increment x coord 
 464              	INCR_X: // ( x y -- x' y )
 465 0a60 3868     	  ldr T0,[DSP]
 466 0a62 00F10100 	  add T0,#1 
 467 0a66 3860     	  str T0,[DSP]
 468 0a68 00F0C8BC 	  _NEXT 
 469              	
 470              	// shift font row data
 471              	NEXT_PIXEL:
 472 0a6c 4FEA4606 	    lsl TOS,#1
 473 0a70 00F0C4BC 	    _NEXT 
 474              	
 475              	
 476              	// CHAR_ROW 
 477              	// plot character row 
 478              	// {x y r -- }
 479              	//  _HEADER CHAR_ROW,7,"CHARROW"
 480              	CHAR_ROW:  
 481 0a74 504700BF 	    _NEST 
 482 0a78 7B150000 	    _DOLIT 5 
 482      05000000 
 483 0a80 55160000 	    _ADR TOR 
 484 0a84 55160000 	1:  _ADR TOR 
 485 0a88 E5180000 	    _ADR DDUP 
 486 0a8c 41160000 	    _ADR RAT
 487 0a90 510A0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 488 0a94 71080000 	    _ADR PLOT 
 489 0a98 610A0000 	    _ADR INCR_X 
 490 0a9c 2D160000 	    _ADR RFROM 
 491 0aa0 6D0A0000 	    _ADR NEXT_PIXEL
 492              	    //_DOLIT 1 
 493              	    //_ADR LSHIFT 
 494 0aa4 9D150000 	    _DONXT 1b
 494      840A0000 
 495 0aac D1180000 	    _ADR TDROP 
ARM GAS  forth.s 			page 36


 496 0ab0 03140000 	    _UNNEST 
 497              	
 498              	
 499              	CHAR_FONT: // ( c -- c-adr )
 500 0ab4 A6F12006 	   sub TOS,#32
 501 0ab8 4FF00800 	   mov T0,#8 
 502 0abc 00FB06F6 	   mul TOS,T0 
 503 0ac0 7848     	   ldr T0,=font_6x8
 504 0ac2 0644     	   add TOS,T0 
 505 0ac4 00F09ABC 	   _NEXT 
 506              	
 507              	/**********************************
 508              	   TV-EMIT ( c -- )
 509              	   draw character in video buffer
 510              	**********************************/
 511 0ac8 180A0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 511      0754562D 
 511      454D4954 
 512 0ad4 504700BF 	    _NEST
 513 0ad8 AD160000 	    _ADR DUPP 
 514 0adc 7B150000 	    _DOLIT 32 
 514      20000000 
 515 0ae4 79190000 	    _ADR ULESS
 516 0ae8 BB150000 	    _QBRAN 1f
 516      F80A0000 
 517 0af0 CF150000 	    _BRAN CTRL_KEY
 517      580B0000 
 518 0af8 B50A0000 	1:  _ADR CHAR_FONT 
 519 0afc E9070000 	    _ADR COLUMN 
 520 0b00 01160000 	    _ADR AT
 521 0b04 2D080000 	    _ADR COLX  // x coord 
 522 0b08 FD070000 	    _ADR CURSOR_ROW 
 523 0b0c 01160000 	    _ADR AT    
 524 0b10 15080000 	    _ADR ROWY  // {c-adr x y -- } 
 525 0b14 95180000 	    _ADR ROT  // TEST 
 526 0b18 7B150000 	    _DOLIT 7   
 526      07000000 
 527 0b20 55160000 	    _ADR TOR  
 528 0b24 55160000 	1:  _ADR TOR  // { x y }
 529 0b28 E5180000 	    _ADR DDUP  // { x y x y }
 530 0b2c 41160000 	    _ADR RAT 
 531 0b30 21160000 	    _ADR CAT   // { x y x y r }
 532 0b34 750A0000 	    _ADR CHAR_ROW 
 533 0b38 CD170000 	    _ADR ONEP // {x y' }
 534 0b3c 2D160000 	    _ADR RFROM 
 535 0b40 CD170000 	    _ADR ONEP // {x y' c-adr' }
 536 0b44 9D150000 	    _DONXT 1b
 536      240B0000 
 537 0b4c D1180000 	    _ADR TDROP  
 538 0b50 010A0000 	    _ADR RIGHT
 539 0b54 03140000 	9:  _UNNEST  
 540              	CTRL_KEY:
 541 0b58 AD160000 	    _ADR DUPP 
 542 0b5c 7B150000 	    _DOLIT 8 
 542      08000000 
 543 0b64 61190000 	    _ADR EQUAL 
 544 0b68 BB150000 	    _QBRAN 1f
ARM GAS  forth.s 			page 37


 544      7C0B0000 
 545 0b70 F10B0000 	    _ADR DELBACK
 546 0b74 D1180000 	8:  _ADR TDROP 
 547 0b78 03140000 	    _UNNEST  
 548 0b7c AD160000 	1:  _ADR DUPP 
 549 0b80 7B150000 	    _DOLIT 13
 549      0D000000 
 550 0b88 61190000 	    _ADR EQUAL 
 551 0b8c BB150000 	    _QBRAN 1f 
 551      A00B0000 
 552 0b94 BD0B0000 	    _ADR CAR_RET
 553 0b98 CF150000 	    _BRAN 8b
 553      740B0000 
 554 0ba0 7B150000 	1:  _DOLIT 10 
 554      0A000000 
 555 0ba8 61190000 	    _ADR EQUAL 
 556 0bac BB150000 	    _QBRAN 9b 
 556      540B0000 
 557 0bb4 C90B0000 	    _ADR LN_FEED
 558 0bb8 03140000 	    _UNNEST 
 559              	
 560              	/*******************************
 561              	  CAR_RET 
 562              	  carriage return
 563              	*******************************/
 564              	CAR_RET:
 565 0bbc 4FF00000 	   mov T0,#0 
 566 0bc0 C4F89400 	   str T0,[UP,#COL] 
 567 0bc4 00F01ABC 	   _NEXT 
 568              	
 569              	/*************************
 570              	  LN_FEED 
 571              	  send cursor to next line 
 572              	**************************/
 573              	LN_FEED:
 574 0bc8 D4F89000 	  ldr T0,[UP,#ROW]
 575 0bcc 1828     	  cmp T0,#24
 576 0bce 05D0     	  beq 2f 
 577 0bd0 00F10100 	  add T0,#1 
 578 0bd4 C4F89000 	  str T0,[UP,#ROW]
 579 0bd8 00F010BC 	  _NEXT 
 580 0bdc 48F804CD 	2:_CALL_COLWORD 3f 
 580      DFF8CCC0 
 580      00F00ABC 
 581              	3: 
 582 0be8 AD090000 	  _ADR SCROLLUP 
 583 0bec 03140000 	  _UNNEST  
 584              	
 585              	/*****************************
 586              	  DELBACK 
 587              	  delete character left to 
 588              	  cursor 
 589              	*****************************/
 590              	DELBACK: 
 591 0bf0 504700BF 	  _NEST 
 592 0bf4 E9070000 	  _ADR COLUMN 
 593 0bf8 01160000 	  _ADR AT 
ARM GAS  forth.s 			page 38


 594 0bfc 81180000 	  _ADR QDUP 
 595 0c00 BB150000 	  _QBRAN 9f
 595      380C0000 
 596 0c08 DD170000 	  _ADR ONEM
 597 0c0c E9070000 	  _ADR COLUMN 
 598 0c10 ED150000 	  _ADR STORE
 599 0c14 7B150000 	  _DOLIT 32 
 599      20000000 
 600 0c1c D50A0000 	  _ADR TV_EMIT 
 601 0c20 E9070000 	  _ADR COLUMN 
 602 0c24 AD160000 	  _ADR DUPP 
 603 0c28 01160000 	  _ADR AT 
 604 0c2c DD170000 	  _ADR ONEM 
 605 0c30 BD160000 	  _ADR SWAP 
 606 0c34 ED150000 	  _ADR STORE 
 607 0c38 03140000 	9: _UNNEST    
 608              	
 609              	// CURPOS ( line col -- )
 610              	// set text cursor position 
 611 0c3c CC0A0000 	    _HEADER CURPOS,6,"CURPOS"
 611      06435552 
 611      504F5300 
 612 0c48 352E     	    cmp TOS,#53
 613 0c4a 01D4     	    bmi 1f 
 614 0c4c 4FF03406 	    mov TOS,#52
 615 0c50 C4F89460 	1:  str TOS,[UP,#COL]
 616 0c54 57F8046B 	    _POP
 617 0c58 192E     	    cmp TOS,#25
 618 0c5a 01D4     	    bmi 1f 
 619 0c5c 4FF01806 	    mov TOS,#24 
 620 0c60 C4F89060 	1:  str TOS,[UP,#ROW]
 621 0c64 57F8046B 	    _POP 
 622 0c68 C8E3     	    _NEXT 
 623              	
 624              	// INPUT ( -- c-adr )
 625              	// input a string in pad 
 626 0c6a 400C0000 	    _HEADER INPUT,5,"INPUT"
 626      05494E50 
 626      5554
 627 0c74 504700BF 	    _NEST 
 628 0c78 291E0000 	    _ADR PAD 
 629 0c7c AD160000 	    _ADR DUPP 
 630 0c80 CD170000 	    _ADR ONEP 
 631 0c84 7B150000 	    _DOLIT 53
 631      35000000 
 632 0c8c 31290000 	    _ADR ACCEP
 633 0c90 BD160000 	    _ADR SWAP 
 634 0c94 9D160000 	    _ADR DROP 
 635 0c98 D1160000 	    _ADR OVER 
 636 0c9c 0D160000 	    _ADR CSTOR  
 637 0ca0 03140000 	    _UNNEST 
 638              	
 639              	
 640              		.section .rodata 
 641              		.p2align 2
 642              	/********************************************
 643              	    TV font  ASCII 6 pixels x 8 pixels 
ARM GAS  forth.s 			page 39


 644              	********************************************/
 645              	font_6x8:
 646 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 646      00000000 
 647 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 647      20002000 
 648 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 648      00000000 
 649 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 649      F8505000 
 650 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 650      28F02000 
 651 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 651      40981800 
 652 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 652      A8906800 
 653 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 653      00000000 
 654 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 654      40201000 
 655 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 655      10204000 
 656 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 656      A8200000 
 657 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 657      20200000 
 658 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 658      60204000 
 659 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 659      00000000 
 660 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 660      00606000 
 661 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 661      40800000 
 662 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 662      C8887000 
 663 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 663      2020F800 
 664 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 664      4080F800 
 665 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 665      0808F000 
 666 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 666      F8101000 
 667 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 667      0808F000 
 668 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 668      88887000 
 669 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 669      40404000 
 670 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 670      88887000 
 671 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 671      08087000 
 672 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 672      60600000 
 673 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
ARM GAS  forth.s 			page 40


 673      60204000 
 674 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 674      40201000 
 675 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 675      F8000000 
 676 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 676      10204000 
 677 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 677      20002000 
 678 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 678      A8A87000 
 679 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 679      88888800 
 680 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 680      8888F000 
 681 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 681      80807800 
 682 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 682      8888F000 
 683 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 683      8080F800 
 684 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 684      80808000 
 685 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 685      88887000 
 686 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 686      88888800 
 687 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 687      20207000 
 688 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 688      08906000 
 689 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 689      A0908800 
 690 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 690      8080F800 
 691 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 691      88888800 
 692 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 692      98888800 
 693 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 693      88887000 
 694 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 694      80808000 
 695 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 695      A8987800 
 696 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 696      A0908800 
 697 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 697      0808F000 
 698 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 698      20202000 
 699 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 699      88887000 
 700 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 700      88502000 
 701 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 701      A8D88800 
ARM GAS  forth.s 			page 41


 702 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 702      50888800 
 703 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 703      20202000 
 704 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 704      8080F800 
 705 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 705      40406000 
 706 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 706      10080000 
 707 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 707      08081800 
 708 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 708      00000000 
 709 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 709      0000F800 
 710 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 710      00000000 
 711 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 711      78887800 
 712 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 712      C888F000 
 713 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 713      80887000 
 714 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 714      98887800 
 715 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 715      F8807000 
 716 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 716      40404000 
 717 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 717      88780870 
 718 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 718      88888800 
 719 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 719      20202000 
 720 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 720      10906000 
 721 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 721      C0A09000 
 722 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 722      20207000 
 723 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 723      A8888800 
 724 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 724      88888800 
 725 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 725      88887000 
 726 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 726      88F08080 
 727 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 727      90B05018 
 728 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 728      80808000 
 729 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 729      7008F000 
 730 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
ARM GAS  forth.s 			page 42


 730      40483000 
 731 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 731      88986800 
 732 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 732      88502000 
 733 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 733      A8A85000 
 734 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 734      20508800 
 735 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 735      88780870 
 736 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 736      2040F800 
 737 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 737      40402000 
 738 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 738      20202000 
 739 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 739      20204000 
 740 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 740      10000000 
 741 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 741      FCFCFCFC 
 742 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 742      10204000 
 743 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 743      40201000 
 744 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 744      20200000 
 745 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 745      A8702000 
 746 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 746      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
ARM GAS  forth.s 			page 43


  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
ARM GAS  forth.s 			page 44


  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes   
  83              	VK_BACK =	8
  84              	VK_TAB =	9
  85              	VK_ESC =	27
  86              	VK_ENTER =	'\r'
  87              	VK_SPACE =	' ' 
  88              	VK_DELETE =	127 
  89              	VK_F1 =	128
  90              	VK_F2 =	129
  91              	VK_F3 =	130
  92              	VK_F4 =	131
  93              	VK_F5 =	132
  94              	VK_F6 =	133
  95              	VK_F7 =	134
  96              	VK_F8 =	135
  97              	VK_F9 =	136
  98              	VK_F10 =	138
ARM GAS  forth.s 			page 45


  99              	VK_F11 =	139
 100              	VK_F12 =	140
 101              	VK_UP =	141
 102              	VK_DOWN =	142
 103              	VK_LEFT =	143
 104              	VK_RIGHT =	144
 105              	VK_HOME =	145
 106              	VK_END =	146
 107              	VK_PGUP =	147
 108              	VK_PGDN =	148
 109              	VK_INSERT =	149
 110              	VK_APPS =	151
 111              	VK_PRN	=	152
 112              	VK_PAUSE =	153
 113              	VK_NLOCK =    154 // numlock
 114              	VK_CLOCK =	155 // capslock
 115              	VK_LSHIFT =	156
 116              	VK_LCTRL =	157
 117              	VK_LALT =	158
 118              	VK_RSHIFT =	159
 119              	VK_LGUI =	160
 120              	VK_RCTRL =	161
 121              	VK_RGUI =	162
 122              	VK_RALT =	163
 123              	VK_SCROLL =	164
 124              	VK_NUM	=	165 
 125              	VK_CAPS =	168
 126              	//<SHIFT>-<KEY> 
 127              	VK_SUP	=	169
 128              	VK_SDOWN =	170
 129              	VK_SLEFT =	171
 130              	VK_SRIGHT =	172
 131              	VK_SHOME =	173
 132              	VK_SEND	=	174
 133              	VK_SPGUP =	175
 134              	VK_SPGDN =	176
 135              	VK_SDEL  =    191
 136              	//<CTRL>-<KEY>
 137              	VK_CUP	=	177
 138              	VK_CDOWN =	178	
 139              	VK_CLEFT =	179
 140              	VK_CRIGHT =	180
 141              	VK_CHOME =	181
 142              	VK_CEND =	182
 143              	VK_CPGUP =	183
 144              	VK_CPGDN =	184
 145              	VK_CDEL  =    185
 146              	VK_CBACK =    186
 147              	VK_LWINDOW =  187
 148              	VK_RWINDOW =  188
 149              	VK_MENU	=   189
 150              	VK_SLEEP =	190
 151              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
ARM GAS  forth.s 			page 46


   8 0cb4 1C61     	   .byte 0x1c,'a' 
   9 0cb6 3262     	   .byte 0x32,'b'
  10 0cb8 2163     	   .byte 0x21,'c'
  11 0cba 2364     	   .byte 0x23,'d'
  12 0cbc 2465     	   .byte 0x24,'e'
  13 0cbe 2B66     	   .byte 0x2b,'f'
  14 0cc0 3467     	   .byte 0x34,'g'
  15 0cc2 3368     	   .byte 0x33,'h'
  16 0cc4 4369     	   .byte 0x43,'i'
  17 0cc6 3B6A     	   .byte 0x3B,'j'
  18 0cc8 426B     	   .byte 0x42,'k'
  19 0cca 4B6C     	   .byte 0x4b,'l'
  20 0ccc 3A6D     	   .byte 0x3a,'m'
  21 0cce 316E     	   .byte 0x31,'n'
  22 0cd0 446F     	   .byte 0x44,'o'
  23 0cd2 4D70     	   .byte 0x4d,'p'
  24 0cd4 1571     	   .byte 0x15,'q'
  25 0cd6 2D72     	   .byte 0x2d,'r'
  26 0cd8 1B73     	   .byte 0x1b,'s'
  27 0cda 2C74     	   .byte 0x2c,'t'
  28 0cdc 3C75     	   .byte 0x3c,'u'
  29 0cde 2A76     	   .byte 0x2a,'v'
  30 0ce0 1D77     	   .byte 0x1d,'w'
  31 0ce2 2278     	   .byte 0x22,'x'
  32 0ce4 3579     	   .byte 0x35,'y'
  33 0ce6 1A7A     	   .byte 0x1a,'z'
  34 0ce8 4530     	   .byte 0x45,'0'
  35 0cea 1631     	   .byte 0x16,'1'
  36 0cec 1E32     	   .byte 0x1e,'2'
  37 0cee 2633     	   .byte 0x26,'3'
  38 0cf0 2534     	   .byte 0x25,'4'
  39 0cf2 2E35     	   .byte 0x2e,'5'
  40 0cf4 3636     	   .byte 0x36,'6'
  41 0cf6 3D37     	   .byte 0x3d,'7'
  42 0cf8 3E38     	   .byte 0x3e,'8'
  43 0cfa 4639     	   .byte 0x46,'9'
  44 0cfc 0E60     	   .byte 0x0e,'`'
  45 0cfe 4E2D     	   .byte 0x4e,'-'
  46 0d00 553D     	   .byte 0x55,'='
  47 0d02 5D5C     	   .byte 0x5d,'\\'
  48 0d04 545B     	   .byte 0x54,'['
  49 0d06 5B5D     	   .byte 0x5b,']'
  50 0d08 4C3B     	   .byte 0x4c,';'
  51 0d0a 5227     	   .byte 0x52,'\''
  52 0d0c 412C     	   .byte 0x41,','
  53 0d0e 492E     	   .byte 0x49,'.'
  54 0d10 7C2A     	   .byte 0x7c,'*'
  55 0d12 792B     	   .byte 0x79,'+'
  56 0d14 2920     	   .byte 0x29,' '
  57 0d16 5A0D     	   .byte SC_ENTER,'\r'
  58 0d18 6608     	   .byte SC_BKSP,8
  59 0d1a 0D09     	   .byte SC_TAB,9
  60 0d1c 761B     	   .byte SC_ESC,27
  61 0d1e 119E     	   .byte SC_LALT,VK_LALT 
  62 0d20 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0d22 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0d24 7EA4     	   .byte SC_SCROLL,VK_SCROLL
ARM GAS  forth.s 			page 47


  65 0d26 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0d28 5800     	   .byte SC_CAPS,0
  67 0d2a 0580     	   .byte SC_F1,VK_F1
  68 0d2c 0681     	   .byte SC_F2,VK_F2
  69 0d2e 0482     	   .byte SC_F3,VK_F3
  70 0d30 0C83     	   .byte SC_F4,VK_F4
  71 0d32 0384     	   .byte SC_F5,VK_F5
  72 0d34 0B85     	   .byte SC_F6,VK_F6
  73 0d36 8386     	   .byte SC_F7,VK_F7
  74 0d38 0A87     	   .byte SC_F8,VK_F8
  75 0d3a 0188     	   .byte SC_F9,VK_F9
  76 0d3c 098A     	   .byte SC_F10,VK_F10
  77 0d3e 788B     	   .byte SC_F11,VK_F11
  78 0d40 078C     	   .byte SC_F12,VK_F12
  79 0d42 7030     	   .byte SC_KP0,'0'
  80 0d44 6931     	   .byte SC_KP1,'1'
  81 0d46 7232     	   .byte SC_KP2,'2'
  82 0d48 7A33     	   .byte SC_KP3,'3'
  83 0d4a 6B34     	   .byte SC_KP4,'4'
  84 0d4c 7335     	   .byte SC_KP5,'5'
  85 0d4e 7436     	   .byte SC_KP6,'6'
  86 0d50 6C37     	   .byte SC_KP7,'7'
  87 0d52 7538     	   .byte SC_KP8,'8'
  88 0d54 7D39     	   .byte SC_KP9,'9'
  89 0d56 7C2A     	   .byte SC_KPMUL,'*'
  90 0d58 4A2F     	   .byte SC_KPDIV,'/'
  91 0d5a 792B     	   .byte SC_KPPLUS,'+'
  92 0d5c 7B2D     	   .byte SC_KPMINUS,'-'
  93 0d5e 712E     	   .byte SC_KPDOT,'.'
  94 0d60 5A0D     	   .byte SC_KPENTER,'\r'
  95 0d62 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0d64 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0d66 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0d68 6141     	   .byte 'a','A'
 102 0d6a 6242     	   .byte 'b','B'
 103 0d6c 6343     	   .byte 'c','C'
 104 0d6e 6444     	   .byte 'd','D'
 105 0d70 6545     	   .byte 'e','E'
 106 0d72 6646     	   .byte 'f','F'
 107 0d74 6747     	   .byte 'g','G'
 108 0d76 6848     	   .byte 'h','H'
 109 0d78 6949     	   .byte 'i','I'
 110 0d7a 6A4A     	   .byte 'j','J'
 111 0d7c 6B4B     	   .byte 'k','K'
 112 0d7e 6C4C     	   .byte 'l','L'
 113 0d80 6D4D     	   .byte 'm','M'
 114 0d82 6E4E     	   .byte 'n','N'
 115 0d84 6F4F     	   .byte 'o','O'
 116 0d86 7050     	   .byte 'p','P'
 117 0d88 7151     	   .byte 'q','Q'
 118 0d8a 7252     	   .byte 'r','R'
 119 0d8c 7353     	   .byte 's','S'
 120 0d8e 7454     	   .byte 't','T'
 121 0d90 7555     	   .byte 'u','U'
ARM GAS  forth.s 			page 48


 122 0d92 7656     	   .byte 'v','V'
 123 0d94 7757     	   .byte 'w','W'
 124 0d96 7858     	   .byte 'x','X'
 125 0d98 7959     	   .byte 'y','Y'
 126 0d9a 7A5A     	   .byte 'z','Z'
 127 0d9c 3121     	   .byte '1','!'
 128 0d9e 3240     	   .byte '2','@'
 129 0da0 3323     	   .byte '3','#'
 130 0da2 3424     	   .byte '4','$'
 131 0da4 3525     	   .byte '5','%'
 132 0da6 365E     	   .byte '6','^'
 133 0da8 3726     	   .byte '7','&'
 134 0daa 382A     	   .byte '8','*'
 135 0dac 3928     	   .byte '9','('
 136 0dae 3029     	   .byte '0',')'
 137 0db0 2D5F     	   .byte '-','_'
 138 0db2 3D2B     	   .byte '=','+'
 139 0db4 607E     	   .byte '`','~'
 140 0db6 2722     	   .byte '\'','"'
 141 0db8 2C3C     	   .byte ',','<'
 142 0dba 2E3E     	   .byte '.','>'
 143 0dbc 2F3F     	   .byte '/','?'
 144 0dbe 5C7C     	   .byte '\\','|'
 145 0dc0 3B3A     	   .byte ';',':'
 146 0dc2 5B7B     	   .byte '[','{'
 147 0dc4 5D7D     	   .byte ']','}'
 148 0dc6 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 0dc8 315C     	   .byte '1','\\'
 153 0dca 3240     	   .byte '2','@'
 154 0dcc 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 0dce 363F     	   .byte '6','?'
 158 0dd0 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 0dd2 397B     	   .byte '9','{'
 161 0dd4 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 0dd6 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 0dd8 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 0dda 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 0ddc 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 0dde 11A3     	    .byte SC_RALT,VK_RALT
 172 0de0 2F97     	    .byte SC_APPS,VK_APPS
 173 0de2 758D     	    .byte SC_UP,VK_UP
 174 0de4 728E     	    .byte SC_DOWN,VK_DOWN
 175 0de6 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 0de8 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 0dea 7095     	    .byte SC_INSERT,VK_INSERT
 178 0dec 6C91     	    .byte SC_HOME,VK_HOME
ARM GAS  forth.s 			page 49


 179 0dee 7D93     	    .byte SC_PGUP,VK_PGUP
 180 0df0 7A94     	    .byte SC_PGDN,VK_PGDN
 181 0df2 717F     	    .byte SC_DEL,VK_DELETE
 182 0df4 6992     	    .byte SC_END,VK_END
 183 0df6 4A2F     	    .byte SC_KPDIV,'/'
 184 0df8 5A0D     	    .byte SC_KPENTER,'\r'
 185 0dfa 1200     	    .byte 0x12,0
 186 0dfc 7C00     	    .byte 0x7c,0
 187 0dfe 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 0e00 1FA0     	   .byte SC_LGUI,VK_LGUI
 193 0e02 14A1     	   .byte SC_RCTRL,VK_RCTRL
 194 0e04 27A2     	   .byte SC_RGUI,VK_RGUI
 195 0e06 11A3     	   .byte SC_RALT,VK_RALT
 196 0e08 2F97     	   .byte SC_APPS,VK_APPS
 197 0e0a 7095     	   .byte SC_INSERT,VK_INSERT
 198 0e0c 6C91     	   .byte SC_HOME,VK_HOME
 199 0e0e 7D93     	   .byte SC_PGUP,VK_PGUP
 200 0e10 717F     	   .byte SC_DEL,VK_DELETE
 201 0e12 6992     	   .byte SC_END,VK_END
 202 0e14 7A94     	   .byte SC_PGDN,VK_PGDN
 203 0e16 758D     	   .byte SC_UP,VK_UP
 204 0e18 6B8F     	   .byte SC_LEFT,VK_LEFT
 205 0e1a 728E     	   .byte SC_DOWN,VK_DOWN
 206 0e1c 7490     	   .byte SC_RIGHT,VK_RIGHT
 207 0e1e 4A2F     	   .byte SC_KPDIV,'/'
 208 0e20 5A0D     	   .byte SC_ENTER,VK_ENTER
 209 0e22 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 210 0e24 149D     	   .byte SC_LCTRL,VK_LCTRL
 211 0e26 119E     	   .byte SC_LALT,VK_LALT
 212 0e28 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 213 0e2a 5A0D     	   .byte SC_KPENTER,VK_ENTER
 214 0e2c 761B     	   .byte SC_ESC,VK_ESC
 215 0e2e 779A     	   .byte SC_NUM,VK_NLOCK
 216 0e30 589B     	   .byte SC_CAPS,VK_CLOCK
 217 0e32 0000     	   .byte 0,0
 218              	
 219              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
ARM GAS  forth.s 			page 50


  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77              	    _GBL_FUNC kbd_isr 
  78 0e34 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 0e3c 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  80 0e40 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  81 0e42 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
  81      C4F20203 
  82 0e4a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  83 0e4e 10F0020F 	    tst r0,#KBD_TX 
  84 0e52 40F08480 	    bne send_bit  
  85 0e56 188A     	    ldrh r0,[r3,#GPIO_IDR]
  86 0e58 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  87 0e5c 01F10102 	    add r2,r1,#1
  88 0e60 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  89 0e64 0029     	    cmp r1,#0
  90 0e66 15D0     	    beq start_bit 
  91 0e68 0929     	    cmp r1,#9 
  92 0e6a 25D0     	    beq parity_bit 
  93 0e6c 0A29     	    cmp r1,#10 
  94 0e6e 2DD0     	    beq stop_bit 
  95              	    // data bit 
  96 0e70 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  97 0e74 4FEA5202 	    lsr r2,#1 
  98 0e78 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  99 0e7c 07D0     	    beq 1f 
 100 0e7e 42F08002 	    orr r2,#(1<<7)
 101 0e82 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 102 0e86 00F10100 	    add r0,#1 
 103 0e8a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 104 0e8e 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 105 0e92 63E0     	    b 9f         
 106              	start_bit:
 107 0e94 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 108 0e98 60D1     	    bne 9f // not a start bit 
ARM GAS  forth.s 			page 51


 109 0e9a 80EA0000 	    eor r0,r0 
 110 0e9e 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 111 0ea2 84F87700 	    strb r0,[UP,#KBD_PARITY]
 112 0ea6 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 113 0eaa 6FF00101 	    mvn r1,#1
 114 0eae 00EA0100 	    and r0,r1 // clear error flag 
 115 0eb2 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 116 0eb6 51E0     	    b 9f 
 117              	parity_bit:
 118 0eb8 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 119 0ebc 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 120 0ec0 4CD0     	    beq 9f  
 121 0ec2 01F10101 	    add r1,#1 
 122 0ec6 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 123 0eca 47E0     	    b 9f      
 124              	stop_bit:
 125 0ecc 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 126 0ed0 40D0     	    beq 8f // error stop bit expected 
 127 0ed2 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 128 0ed6 11F0010F 	    tst r1,#1 
 129 0eda 3BD0     	    beq 8f // error parity
 130 0edc 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 131 0ee0 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 132 0ee4 E028     	    cmp r0,#XT_KEY
 133 0ee6 04D1     	    bne 1f
 134 0ee8 41F04001 	    orr r1,#KBD_F_XT
 135 0eec 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 136 0ef0 30E0     	    b 8f  
 137 0ef2 11F0800F 	1:  tst r1,#KBD_F_REL
 138 0ef6 14D0     	    beq store_code
 139 0ef8 5828     	    cmp r0,#SC_CAPS
 140 0efa 04D1     	    bne 1f
 141 0efc 81F00401 	    eor r1,#KBD_F_CAPS
 142 0f00 41F00101 	    orr r1,#KBD_F_CTGL 
 143 0f04 06E0     	    b 2f 
 144 0f06 00B500F0 	1:  _CALL do_async_key 
 144      74F85DF8 
 144      04EB
 145 0f10 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 146 0f14 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 147 0f18 01EA0201 	    and r1,r2
 148 0f1c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 149 0f20 18E0     	    b 8f
 150              	// store code in queue 
 151              	store_code:
 152 0f22 F028     	    cmp r0,#KEY_REL
 153 0f24 04D1     	    bne 1f
 154              	// set release flags 
 155 0f26 41F08001 	    orr r1,#KBD_F_REL 
 156 0f2a 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 157 0f2e 11E0     	    b 8f     
 158 0f30 0146     	1:  mov r1,r0 
 159 0f32 00B500F0 	    _CALL do_async_key 
 159      5EF85DF8 
 159      04EB
 160 0f3c 0AD1     	    bne 8f // was async key 
 161 0f3e D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
ARM GAS  forth.s 			page 52


 162 0f42 04F17802 	    add r2,UP,#KBD_QUEUE
 163 0f46 1154     	    strb r1,[r2,r0]
 164 0f48 00F10100 	    add r0,#1
 165 0f4c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 166 0f50 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 167 0f54 80EA0000 	8:  eor r0,r0 
 168 0f58 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 169 0f5c 7047     	9:  _RET 
 170              	
 171              	/* send bit to keyboard 
 172              	 registers usage:
 173              	    r0 bit shifter 
 174              	    r1 bit counter 
 175              	    r2 output bit 
 176              	    r3 GPIOA_BASE_ADR 
 177              	*/
 178              	send_bit:
 179 0f5e 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 180 0f62 01F10100 	    add r0,r1,#1
 181 0f66 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 182 0f6a 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 183 0f6e 4FF48052 	    mov r2,#(1<<KBD_DATA_PIN)
 184              	//    cbz r1,9f 
 185 0f72 0829     	1:  cmp r1,#8 
 186 0f74 15D0     	    beq send_parity 
 187 0f76 0929     	    cmp r1,#9 
 188 0f78 1CD0     	    beq send_stop
 189 0f7a 0A29     	    cmp r1,#10
 190 0f7c 21D0     	    beq rx_ack_bit  
 191              	// data bits
 192 0f7e 10F0010F 	    tst r0,#1
 193 0f82 4FEA5000 	    lsr r0,#1
 194 0f86 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 195 0f8a 02D1     	    bne 1f 
 196 0f8c 4FEA0242 	    lsl r2,#16
 197 0f90 05E0     	    b 2f  
 198 0f92 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 199 0f96 00F10100 	    add r0,#1 
 200 0f9a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 201 0f9e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 202 0fa0 1EE0     	    b 9f 
 203              	send_parity:
 204 0fa2 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 205 0fa6 10F0010F 	    tst r0,#1
 206 0faa 01D0     	    beq 1f 
 207 0fac 4FEA0242 	    lsl r2,#16
 208 0fb0 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 209 0fb2 15E0     	    b 9f 
 210              	send_stop:
 211              	//    str r2,[r3,#GPIO_BSRR]
 212              	// release data pin 
 213 0fb4 6FF04070 	    mvn r0,#(3<<(2*KBD_DATA_PIN))
 214 0fb8 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 0fba 01EA0001 	    and r1,r0 
 216 0fbe 1960     	    str r1,[r3,#GPIO_MODER]
 217 0fc0 0EE0     	    b 9f
 218              	rx_ack_bit:
ARM GAS  forth.s 			page 53


 219 0fc2 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 0fc6 6FF00201 	    mvn r1,#KBD_TX 
 221 0fca 00EA0100 	    and r0,r1 
 222 0fce 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 0fd0 11F4805F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 0fd4 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 0fd8 80EA0000 	    eor r0,r0 
 226 0fdc 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 0fe0 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 0fe2 02B4     	    push {r1}
 238 0fe4 F849     	    ldr r1,=async_keys
 239 0fe6 00B500F0 	    _CALL table_scan
 239      7DF85DF8 
 239      04EB
 240 0ff0 02BC     	    pop {r1}
 241 0ff2 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 0ff4 00B5FFF7 	    _CALL is_async_key  
 254      F4FF5DF8 
 254      04EB
 255 0ffe FF28     	    cmp r0,#255
 256 1000 01D1     	    bne set_async_key 
 257 1002 0020     	    movs r0,#0 
 258 1004 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1006 06B4     	    push {r1,r2}
 262 1008 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 100c EF49     	    ldr r1,=async_jump 
 264 100e D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1012 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1016 04E0     	    b set_reset
 268              	ctrl_key:
 269 1018 4FF01000 	    mov r0,#KBD_F_CTRL
 270 101c 01E0     	    b set_reset 
 271              	alt_key:
ARM GAS  forth.s 			page 54


 272 101e 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1022 12F0800F 	    tst r2,#KBD_F_REL 
 275 1026 04D0     	    beq 1f 
 276 1028 6FEA0000 	    mvn r0,r0
 277 102c 02EA0002 	    and r2,r0
 278 1030 01E0     	    b 2f
 279 1032 42EA0002 	1:  orr r2,r0 
 280 1036 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 103a 5FF0FF30 	    movs r0,#-1
 282 103e 06BC     	9:  pop {r1,r2}
 283 1040 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1042 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1044 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1046 1401     	    .byte SC_LCTRL,1  // left control 
 290 1048 1401     	    .byte SC_RCTRL,1  // right control 
 291 104a 1102     	    .byte SC_LALT,2  // left alt 
 292 104c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 104e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1050 00       	    .byte 0 // shift  key 
 297 1051 03       	    .byte (ctrl_key-shift_key)/2
 298 1052 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1053 00       	    _GBL_FUNC kbd_init 
 308              	// interrupt triggered on falling edge 
 309 1054 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 309      C4F20102 
 310 105c 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 311 1060 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 312 1062 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 313 1064 80EA0000 	   eor r0,r0 
 314 1068 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 315 106c C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 316              	// enable interrupt EXTI15_10_IRQ in NVIC 
 317 1070 4FF02800 	   mov r0,#EXTI15_10_IRQ
 318 1074 4FF00101 	   mov r1,#1 
 319 1078 00B5FFF7 	   _CALL nvic_set_priority
 319      09F95DF8 
 319      04EB
 320 1082 4FF02800 	   mov r0,#EXTI15_10_IRQ
 321 1086 00B5FFF7 	   _CALL nvic_enable_irq 
 321      1BF95DF8 
 321      04EB
 322 1090 7047     	   _RET 
 323              	
ARM GAS  forth.s 			page 55


 324              	// KEY-ASYNC ( -- n )
 325              	// return async key flags 
 326 1092 6E0C0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 326      094B4559 
 326      2D415359 
 326      4E43
 327 10a0 47F8046D 	    _PUSH 
 328 10a4 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 329 10a8 06F0FC06 	    and TOS,#0xFC  
 330 10ac A6E1     	    _NEXT 
 331              	
 332              	// KEYCODE 
 333              	// extract keyboard scancode from queue.
 334              	// output:
 335              	//        T0  keycode | 0 
 336              	keycode: 
 337 10ae 0EB4     	    push {T1,T2,T3}
 338 10b0 80EA0000 	    eor T0,T0  
 339 10b4 04F17803 	    add T3,UP,#KBD_QUEUE
 340 10b8 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 341 10bc D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 342 10c0 9142     	    cmp T1,T2 
 343 10c2 06D0     	    beq 2f  
 344 10c4 585C     	    ldrb T0,[T3,T1]
 345 10c6 01F10101 	    add T1,#1 
 346 10ca 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 347 10ce C4F88810 	    str T1,[UP,#KBD_QHEAD]
 348 10d2 0EBC     	2:  pop {T1,T2,T3}
 349 10d4 7047     	    _RET 
 350              	
 351              	wait_code:
 352 10d6 00B5FFF7 	    _CALL keycode 
 352      E9FF5DF8 
 352      04EB
 353 10e0 0000     	    movs T0,T0
 354 10e2 F8D0     	    beq wait_code  
 355 10e4 7047     	    _RET 
 356              	
 357              	// translation table scan 
 358              	// input:
 359              	//      T0   target code 
 360              	//      T1   table pointer 
 361              	// output: 
 362              	//        T0   0 | code
 363              	//        Z flag  
 364              	table_scan:
 365 10e6 04B4     	    push {T2}
 366 10e8 11F8012B 	1:  ldrb T2,[T1],#1
 367 10ec 22B1     	    cbz T2,2f 
 368 10ee 8242     	    cmp T2,T0
 369 10f0 02D0     	    beq 2f 
 370 10f2 01F10101 	    add T1,#1 
 371 10f6 F7E7     	    b 1b 
 372 10f8 0878     	2:  ldrb T0,[T1]
 373 10fa 0000     	    movs T0,T0 // set/reset zero flag 
 374 10fc 04BC     	9:  pop {T2}
 375 10fe 7047     	    _RET 
ARM GAS  forth.s 			page 56


 376              	
 377              	/**********************************
 378              	   PS2-KEY? ( -- key -1 | 0 )
 379              	   get a character from keyboard
 380              	   don't wait for it.
 381              	*********************************/
 382 1100 96100000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 382      08505332 
 382      2D4B4559 
 382      3F0000BF 
 383 1110 47F8046D 	    _PUSH 
 384 1114 86EA0606 	    eor TOS,TOS 
 385 1118 AD49     	    ldr T1,=sc_ascii // translation table
 386 111a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 387 111e 4FF04002 	    mov T2,#KBD_F_XT 
 388 1122 1042     	    tst T0,T2
 389 1124 00D0     	    beq 1f
 390 1126 AB49     	    ldr T1,=extended // extended code translation
 391 1128 00B5FFF7 	1:  _CALL keycode
 391      C0FF5DF8 
 391      04EB
 392 1132 80B1     	    cbz T0,inkey_exit
 393 1134 E128     	    cmp T0,#XT2_KEY // pause 
 394 1136 0FD0     	    beq pause_key
 395 1138 00B5FFF7 	    _CALL table_scan 
 395      D4FF5DF8 
 395      04EB
 396 1142 0646     	    mov TOS,T0
 397 1144 00B500F0 	    _CALL do_modifiers
 397      11F85DF8 
 397      04EB
 398 114e 47F8046D 	    _PUSH 
 399 1152 4FF0FF36 	    mov TOS,#-1
 400              	inkey_exit:     
 401 1156 51E1     	    _NEXT
 402              	pause_key: // discard next 7 codes 
 403 1158 4FF00701 	    mov T1,#7 
 404 115c 00B5FFF7 	1:  _CALL wait_code 
 404      BAFF5DF8 
 404      04EB
 405 1166 0139     	    subs T1,#1
 406 1168 F8D1     	    bne 1b 
 407 116a 47E1     	    _NEXT 
 408              	
 409              	// check for modifiers flags 
 410              	// and process it.
 411              	do_modifiers:
 412 116c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 413 1170 10F0080F 	    tst T0,#KBD_F_SHIFT 
 414 1174 05D1     	    bne shift_down 
 415 1176 10F0200F 	    tst T0,#KBD_F_ALT  
 416 117a 05D1     	    bne altchar_down 
 417 117c 10F0100F 	    tst T0,#KBD_F_CTRL
 418 1180 0DE0     	    b 9f 
 419              	shift_down:
 420 1182 3046     	    mov T0,TOS 
 421 1184 9449     	    ldr T1,=shifted 
ARM GAS  forth.s 			page 57


 422 1186 04E0     	    b 8f 
 423              	altchar_down:
 424 1188 3046     	    mov T0,TOS 
 425 118a 9449     	    ldr T1,=altchar
 426 118c 01E0     	    b 8f
 427              	ctrl_down:
 428 118e 3046     	    mov T0,TOS 
 429 1190 9349     	    ldr T1,=controls 
 430 1192 00B5FFF7 	8:  _CALL table_scan
 430      A7FF5DF8 
 430      04EB
 431 119c 0646     	    mov TOS,T0
 432 119e 00B500F0 	9:  _CALL do_capslock 
 432      03F85DF8 
 432      04EB
 433 11a8 7047     	    _RET 
 434              	
 435              	do_capslock:
 436 11aa 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 437 11ae 10F0040F 	    tst T0,#KBD_F_CAPS 
 438 11b2 0BD0     	    beq 9f 
 439 11b4 412E     	    cmp TOS,#'A'
 440 11b6 09D4     	    bmi 9f 
 441 11b8 5B2E     	    cmp TOS,#'Z'+1 
 442 11ba 03D4     	    bmi 3f 
 443 11bc 612E     	    cmp TOS,#'a'
 444 11be 05D4     	    bmi 9f 
 445 11c0 7B2E     	    cmp TOS,#'z'+1
 446 11c2 03D5     	    bpl 9f 
 447 11c4 4FF02000 	3:  mov T0,#(1<<5)
 448 11c8 86EA0006 	    eor TOS,T0 
 449 11cc 7047     	9:  _RET 
 450              	
 451              	
 452              	
 453              	/***************************
 454              	 send byte do keyboard
 455              	 input:
 456              	    r0  byte to send 
 457              	 use: 
 458              	    r1,r2 temp 
 459              	    r3 GPIOA_BASE_ADR 
 460              	***************************/
 461              	kbd_send:
 462 11ce 0FB4     	    push {r0,r1,r2,r3}
 463              	// wait pre-video phase
 464              	// for least video output disturbance
 465 11d0 A06E     	1:  ldr r0,[UP,#VID_STATE]
 466 11d2 0128     	    cmp r0,ST_PREVID 
 467 11d4 FCD1     	    bne 1b
 468              	// disable video interrupt 
 469 11d6 4FF01D00 	    mov r0,#TIM3_IRQ 
 470 11da 00B5FFF7 	    _CALL nvic_disable_irq
 470      86F85DF8 
 470      04EB
 471              	// take control of keyboard clock line  
 472 11e4 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
ARM GAS  forth.s 			page 58


 472      C4F20203 
 473 11ec 1846     	    mov r0,r3 
 474 11ee 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 475 11f2 4FF01102 	    mov r2,#OUTPUT_OD
 476 11f6 00B5FFF7 	    _CALL gpio_config 
 476      8FF85DF8 
 476      04EB
 477 1200 1846     	    mov r0,r3 
 478 1202 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 479 1206 82EA0202 	    eor r2,r2 
 480 120a 00B5FFF7 	    _CALL gpio_out 
 480      DBF85DF8 
 480      04EB
 481              	// delay to hold clock line to 0 for 150Âµsec     
 482 1214 4FF4E150 	    mov r0,#150*48
 483 1218 0138     	1:  subs r0,#1 
 484 121a FDD1     	    bne 1b
 485 121c 01BC     	    pop {r0}
 486 121e 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 487 1222 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 488 1226 40F00200 	    orr r0,#KBD_TX 
 489 122a 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 490 122e 80EA0000 	    eor r0,r0 
 491 1232 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 492 1236 84F87700 	    strb r0,[UP,#KBD_PARITY]
 493              	// take control of data line 
 494              	// and put it to 0 for start bit.    
 495 123a 1846     	    mov r0,r3 
 496 123c 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 497 1240 4FF01102 	    mov r2,#OUTPUT_OD 
 498 1244 00B5FFF7 	    _CALL gpio_config 
 498      68F85DF8 
 498      04EB
 499 124e 1846     	    mov r0,r3 
 500 1250 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 501 1254 82EA0202 	    eor r2,r2 
 502 1258 00B5FFF7 	    _CALL gpio_out
 502      B4F85DF8 
 502      04EB
 503              	// release clock line 
 504 1262 1846     	    mov r0,r3 
 505 1264 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 506 1268 4FF00002 	    mov r2,#INPUT_FLOAT
 507 126c 00B5FFF7 	    _CALL gpio_config
 507      54F85DF8 
 507      04EB
 508              	// wait send completed 
 509 1276 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 510 127a 10F0020F 	    tst r0,#KBD_TX
 511 127e FAD1     	    bne 2b 
 512              	// enable video interrupt     
 513 1280 4FF01D00 	    mov r0,#TIM3_IRQ
 514 1284 00B5FFF7 	    _CALL nvic_enable_irq
 514      1CF85DF8 
 514      04EB
 515 128e 0EBC     	    pop {r1,r2,r3}
 516 1290 7047     	    _RET 
ARM GAS  forth.s 			page 59


 517              	
 518              	 
 519              	// flush keyboard queue 
 520              	kbd_clear_queue:
 521 1292 80EA0000 	    eor T0,T0 
 522 1296 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 523 129a C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 524 129e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 525 12a2 6FF00301 	    mvn T1,#3
 526 12a6 00EA0100 	    and T0,T1 
 527 12aa 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 528 12ae 7047     	    _RET 
 529              	
 530              	/**********************************
 531              	 KBD-RST ( -- c )
 532              	 send a reset command to keyboard
 533              	**********************************/
 534 12b0 04110000 	    _HEADER KBD_RST,7,"KBD-RST"
 534      074B4244 
 534      2D525354 
 535 12bc 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 536 12c0 00B5FFF7 	    _CALL kbd_send
 536      84FF5DF8 
 536      04EB
 537 12ca 00B5FFF7 	    _CALL kbd_clear_queue
 537      E1FF5DF8 
 537      04EB
 538 12d4 00B5FFF7 	    _CALL wait_code 
 538      FEFE5DF8 
 538      04EB
 539 12de FE28     	    cmp r0,KBD_CMD_RESEND
 540 12e0 ECD0     	    beq 1b 
 541 12e2 4FF06400 	    mov T0,#100
 542 12e6 E060     	    str T0,[UP,#CD_TIMER]
 543 12e8 E068     	2:  ldr T0,[UP,#CD_TIMER]
 544 12ea 0028     	    cmp T0,#0 
 545 12ec FCD1     	    bne 2b 
 546 12ee 00B5FFF7 	2:  _CALL wait_code 
 546      F1FE5DF8 
 546      04EB
 547 12f8 47F8046D 	    _PUSH 
 548 12fc 0646     	    mov TOS,T0  
 549 12fe 7DE0     	    _NEXT 
 550              	
 551              	/*****************************
 552              	 KBD-LED ( c -- )
 553              	 send command to control
 554              	 keyboard LEDS 
 555              	*****************************/
 556 1300 B4120000 	    _HEADER KBD_LED,7,"KBD-LED"
 556      074B4244 
 556      2D4C4544 
 557 130c 00B5FFF7 	1:  _CALL kbd_clear_queue
 557      C0FF5DF8 
 557      04EB
 558 1316 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 559 131a 00B5FFF7 	    _CALL kbd_send
ARM GAS  forth.s 			page 60


 559      57FF5DF8 
 559      04EB
 560 1324 00B5FFF7 	2:  _CALL wait_code 
 560      D6FE5DF8 
 560      04EB
 561 132e FE28     	    cmp T0,#KBD_CMD_RESEND
 562 1330 ECD0     	    beq 1b
 563 1332 FA28     	    cmp T0,#KBD_ACK  
 564 1334 F6D1     	    bne 2b 
 565 1336 3046     	2:  mov T0,TOS 
 566 1338 00F00700 	    and T0,#7 
 567 133c 00B5FFF7 	    _CALL kbd_send 
 567      46FF5DF8 
 567      04EB
 568 1346 00B5FFF7 	3:  _CALL wait_code 
 568      C5FE5DF8 
 568      04EB
 569 1350 FE28     	    cmp T0,#KBD_CMD_RESEND 
 570 1352 F0D0     	    beq 2b
 571 1354 FA28     	    cmp T0,#KBD_ACK 
 572 1356 F6D1     	    bne 3b  
 573 1358 57F8046B 	    _POP 
 574 135c 4EE0     	    _NEXT 
 575              	
 576              	/**************************
 577              	 CAPS-LED ( -- )
 578              	 synch capslock LED
 579              	 to KBD_F_CAPS 
 580              	**************************/
 581 135e 04130000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 581      08434150 
 581      532D4C45 
 581      4400
 582 136c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 583 1370 10F0010F 	    tst T0,#1
 584 1374 00D1     	    bne 1f 
 585 1376 41E0     	    _NEXT 
 586 1378 47F8046D 	1: _PUSH 
 587 137c 6FF00101 	    mvn T1,#1 
 588 1380 00EA0100 	    and T0,T1 
 589 1384 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 590 1388 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 591 138c 48F804CD 	    _CALL_COLWORD 1f
 591      DFF850C0 
 591      32E0
 592 1396 0D130000 	1:  _ADR KBD_LED       
 593 139a 03140000 	    _UNNEST
 594              	
 595              	/************************
 596              	 WAIT-KEY ( -- c )
 597              	 wait for keyboard key 
 598              	*************************/
 599 139e 62130000 	    _HEADER WKEY,8,"WAIT-KEY"
 599      08574149 
 599      542D4B45 
 599      5900
 600 13ac 504700BF 	    _NEST
ARM GAS  forth.s 			page 61


 601 13b0 6D130000 	1:  _ADR CAPS_LED  
 602 13b4 11110000 	    _ADR PS2_QKEY 
 603 13b8 81180000 	    _ADR QDUP 
 604 13bc BB150000 	    _QBRAN 1b  
 604      B0130000 
 605 13c4 03140000 	    _UNNEST 
 606 13c8 42100000 	
 606      50100000 
 606      B40C0000 
 606      D80D0000 
 606      680D0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/*****************************************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
ARM GAS  forth.s 			page 62


  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	//  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// PUSH TOS, to be used in colon definition 
  83              	TPUSH:
  84 13e8 47F8046D 		_PUSH
  85 13ec 06E0     		_NEXT
  86              	
  87              	// POP TOS, to be used in colon defintion  
  88              	TPOP:
  89 13ee 57F8046B 		_POP 
  90 13f2 03E0     		_NEXT
  91              	
  92              	// hi level word enter 
  93              	NEST: 
  94 13f4 48F804CD 		STMFD	RSP!,{IP}
  95 13f8 05F1030C 		ADD IP,WP,#3
  96              	// inner interprer
  97              	INEXT: 
  98 13fc 5CF8045B 		LDR WP,[IP],#4 
  99 1400 2847     		BX WP  
 100              	UNNEST:
 101 1402 58F804CB 		LDMFD RSP!,{IP}
 102 1406 5CF8045B 		LDR WP,[IP],#4 
 103 140a 2847     		BX WP  
ARM GAS  forth.s 			page 63


 104              	
 105              		.p2align 2 
 106              	
 107              	// compile "BX 	INX" 
 108              	// this is the only way 
 109              	// a colon defintion in RAM 
 110              	// can jump to NEST
 111              	// INX is initialized to NEST address 
 112              	// and must be preserved   
 113              	COMPI_NEST:
 114 140c 04F14401 		add T1,UP,#USER_CTOP 
 115 1410 0968     		ldr T1,[T1]
 116 1412 44F25072 		mov T2,#0x4700+(10<<3)
 117 1416 21F8022B 		strh T2,[T1],#2
 118 141a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 119 141e 21F8022B 		strh T2,[T1],#2 
 120 1422 04F14402 		add T2,UP,#USER_CTOP 
 121 1426 1160     		str T1,[T2]
 122 1428 E8E7     		_NEXT  
 123              	
 124              	// ' STDIN 
 125              	// stdin vector 
 126              	TSTDIN:
 127 142a 47F8046D 		_PUSH 
 128 142e 04F11406 		ADD TOS,UP,#STDIN 
 129 1432 E3E7     		_NEXT 
 130              	
 131              	// ' STDOUT 
 132              	// stdout vector 
 133              	TSTDOUT:
 134 1434 47F8046D 		_PUSH 
 135 1438 04F11806 		ADD TOS,UP,#STDOUT
 136 143c DEE7     		_NEXT 
 137              		
 138              	/********************************************
 139              		KEY? ( -- c T | F )
 140              		check if available character 
 141              	********************************************/
 142 143e A2130000 		_HEADER QKEY,4,"KEY?"
 142      044B4559 
 142      3F00
 143              	QRX: 
 144 1448 504700BF 		_NEST 
 145 144c 2B140000 		_ADR TSTDIN // ' STDIN 
 146 1450 611E0000 		_ADR ATEXE
 147 1454 03140000 		_UNNEST 
 148              	
 149              	/********************************************
 150              	    KEY	 ( -- c )
 151              	 	Wait for and return an input character.
 152              	********************************************/
 153 1458 42140000 		_HEADER KEY,3,"KEY"
 153      034B4559 
 154 1460 504700BF 		_NEST
 155              	KEY1:
 156 1464 6D130000 		_ADR CAPS_LED 
 157 1468 49140000 		_ADR	QRX
ARM GAS  forth.s 			page 64


 158 146c BB150000 		_QBRAN	KEY1
 158      64140000 
 159 1474 03140000 		_UNNEST
 160              	
 161              	/**********************************************
 162              		EMIT ( c -- )
 163              		transmit a character to console 
 164              	**********************************************/
 165 1478 5C140000 		_HEADER EMIT,4,"EMIT"
 165      04454D49 
 165      540000BF 
 166              	TECHO:
 167 1484 504700BF 		_NEST 
 168 1488 35140000 		_ADR TSTDOUT 
 169 148c 611E0000 		_ADR ATEXE 
 170 1490 03140000 		_UNNEST 
 171              	
 172              	
 173              	/************************************************
 174              	 GET-IP ( n - c )
 175              	 return interrupt priority of IRQn 
 176              	************************************************/
 177              	/*
 178              		_HEADER GETIP,6,"GET-IP" 
 179              		_NEST 
 180              		_ADR DUPP 
 181              		_ADR ZLESS
 182              		_QBRAN 1f 
 183              		_DOLIT 15
 184              		_ADR ANDD
 185              		_DOLIT 4
 186              		_ADR SUBB  
 187              		_DOLIT 0xE000ED18 
 188              		_BRAN 2f 
 189              	1:	_DOLIT 0xE000E400 
 190              	2:	_ADR PLUS 
 191              		_ADR CAT
 192              		_DOLIT 4 
 193              		_ADR RSHIFT 
 194              		_UNNEST 
 195              	*/
 196              	
 197              	/***********************************************
 198              	 RANDOM ( n+ -- {0..n+ - 1} )
 199              	 return pseudo random number 
 200              	 REF: https://en.wikipedia.org/wiki/Xorshift
 201              	************************************************/
 202 1494 7C140000 		_HEADER RAND,6,"RANDOM"
 202      0652414E 
 202      444F4D00 
 203 14a0 504700BF 		_NEST
 204 14a4 39190000 		_ADR ABSS   
 205 14a8 791A0000 		_ADR SEED 
 206 14ac 01160000 		_ADR AT 
 207 14b0 AD160000 		_ADR DUPP 
 208 14b4 7B150000 		_DOLIT 13
 208      0D000000 
ARM GAS  forth.s 			page 65


 209 14bc 61170000 		_ADR LSHIFT 
 210 14c0 19170000 		_ADR XORR  
 211 14c4 AD160000 		_ADR DUPP 
 212 14c8 7B150000 		_DOLIT 17 
 212      11000000 
 213 14d0 49170000 		_ADR RSHIFT 
 214 14d4 19170000 		_ADR XORR 
 215 14d8 AD160000 		_ADR DUPP
 216 14dc 7B150000 		_DOLIT 5 
 216      05000000 
 217 14e4 61170000 		_ADR LSHIFT 
 218 14e8 19170000 		_ADR XORR  
 219 14ec AD160000 		_ADR DUPP 
 220 14f0 791A0000 		_ADR SEED 
 221 14f4 ED150000 		_ADR STORE 
 222 14f8 7B150000 		_DOLIT 0x7FFFFFFF
 222      FFFFFF7F 
 223 1500 F1160000 		_ADR ANDD 
 224 1504 BD160000 		_ADR SWAP 
 225 1508 E51C0000 		_ADR MODD 
 226 150c 03140000 		_UNNEST 
 227              	
 228              	
 229              	/****************************************
 230              	 PAUSE ( u -- ) 
 231              	 suspend execution for u milliseconds
 232              	****************************************/
 233 1510 98140000 		_HEADER PAUSE,5,"PAUSE"
 233      05504155 
 233      534500BF 
 234 151c 504700BF 		_NEST 
 235 1520 A11A0000 		_ADR TIMER 
 236 1524 ED150000 		_ADR STORE 
 237              	PAUSE_LOOP:
 238 1528 A11A0000 		_ADR TIMER 
 239 152c 01160000 		_ADR AT 
 240 1530 BB150000 		_QBRAN PAUSE_EXIT 
 240      40150000 
 241 1538 CF150000 		_BRAN PAUSE_LOOP 
 241      28150000 
 242              	PAUSE_EXIT: 		
 243 1540 03140000 		_UNNEST 
 244              	
 245              	/******************************************
 246              	  ULED ( T|F -- )
 247              	  control user LED, -1 ON, 0 OFF 
 248              	*******************************************/
 249 1544 14150000 		_HEADER ULED,4,"ULED"
 249      04554C45 
 249      440000BF 
 250 1550 4FF40050 		mov T0,#(1<<LED_PIN)
 251 1554 4FF40061 		_MOV32 T1,LED_GPIO 
 251      C4F20201 
 252 155c 3600     		movs TOS,TOS 
 253 155e 57F8046B 		_POP
 254 1562 03D0     		beq ULED_OFF
 255 1564 4FEA0040 		lsl T0,#16 
ARM GAS  forth.s 			page 66


 256 1568 8861     		str T0,[T1,#GPIO_BSRR]
 257 156a 47E7     		_NEXT 
 258              	ULED_OFF:
 259 156c 8861     		str T0,[T1,#GPIO_BSRR]
 260 156e 45E7     		_NEXT    
 261              	
 262              	
 263              		
 264              	/***************
 265              	//  The kernel
 266              	***************/
 267              	
 268              	/********************
 269              	    NOP	( -- )
 270              	 	do nothing.
 271              	*********************/
 272 1570 48150000 		_HEADER NOP,3,"NOP"
 272      034E4F50 
 273 1578 40E7     		_NEXT 
 274              	 
 275              	/********************
 276              	    doLIT	( -- w )
 277              	 	Push an inline literal.
 278              	hidden word used by compiler 
 279              	*********************/
 280              	DOLIT:
 281 157a 47F8046D 		_PUSH				//  store TOS on data stack
 282 157e 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 283 1582 3BE7     		_NEXT 
 284              	
 285              	/*******************************
 286              	    EXECUTE	( ca -- )
 287              	 	Execute the word at ca.
 288              	*******************************/
 289 1584 74150000 		_HEADER EXECU,7,"EXECUTE"
 289      07455845 
 289      43555445 
 290 1590 46F00105 		ORR	WP,TOS,#1 
 291 1594 57F8046B 		_POP
 292 1598 2847     		BX WP 
 293 159a 2FE7     		_NEXT 
 294              	
 295              	/**********************************************************
 296              	    donext	( -- ) counter on R:
 297              	 	Run time code for the single index loop.
 298              	 	: next ( -- ) \ hilevel model
 299              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 300              	hidden word used by compiler 	  
 301              	*********************************************************/
 302              	DONXT:
 303 159c D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 304 15a0 22B9     		CBNZ T2,NEXT1 
 305              		/* loop done */
 306 15a2 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 307 15a6 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 308 15aa 27E7     		_NEXT
 309              	NEXT1:
ARM GAS  forth.s 			page 67


 310              		/* decrement loop counter */
 311 15ac A2F10102 		SUB	T2,T2,#1
 312 15b0 C8F80020 		STR	T2,[RSP]
 313 15b4 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 314 15b8 20E7     		_NEXT 
 315              	
 316              	/**************************************
 317              	    ?branch	( f -- )
 318              	 	Branch if flag is zero.
 319              	hiddend word used by compiler
 320              	**************************************/
 321              	QBRAN:
 322 15ba 3600     		MOVS	TOS,TOS
 323 15bc 57F8046B 		_POP
 324 15c0 02D1     		BNE	QBRAN1
 325 15c2 DCF800C0 		LDR	IP,[IP]
 326 15c6 19E7     		_NEXT
 327              	QBRAN1:
 328 15c8 0CF1040C 	 	ADD	IP,IP,#4
 329 15cc 16E7     		_NEXT
 330              	
 331              	/***********************************
 332              	    branch	( -- )
 333              	 	Branch to an inline address.
 334              	hidden word used by compiler 
 335              	***********************************/
 336              	BRAN:
 337 15ce DCF800C0 		LDR	IP,[IP]
 338 15d2 13E7     		_NEXT
 339              	
 340              	/******************************************
 341              	    EXIT	(  -- )
 342              	 	Exit the currently executing command.
 343              	******************************************/
 344 15d4 88150000 		_HEADER EXIT,4,"EXIT"
 344      04455849 
 344      540000BF 
 345 15e0 03140000 		_UNNEST
 346              	
 347              	/***********************************
 348              	    !	   ( w a -- )
 349              	 	Pop the data stack to memory.
 350              	************************************/
 351 15e4 D8150000 		_HEADER STORE,1,"!"
 351      012100BF 
 352 15ec 57F8045B 		LDR	WP,[DSP],#4
 353 15f0 3560     		STR	WP,[TOS]
 354 15f2 57F8046B 		_POP
 355 15f6 01E7     		_NEXT 
 356              	
 357              	/********************************************
 358              	    @	   ( a -- w )
 359              	 	Push memory location to the data stack.
 360              	*********************************************/
 361 15f8 E8150000 		_HEADER AT,1,"@"
 361      014000BF 
 362 1600 3668     		LDR	TOS,[TOS]
ARM GAS  forth.s 			page 68


 363 1602 FBE6     		_NEXT 
 364              	
 365              	/*******************************************
 366              	    C!	  ( c b -- )
 367              	 	Pop the data stack to byte memory.
 368              	*******************************************/
 369 1604 FC150000 		_HEADER CSTOR,2,"C!"
 369      02432100 
 370 160c 57F8045B 		LDR	WP,[DSP],#4
 371 1610 3570     		STRB WP,[TOS]
 372 1612 57F8046B 		_POP
 373 1616 F1E6     		_NEXT
 374              	
 375              	/*********************************************
 376              	    C@	  ( b -- c )
 377              	 	Push byte memory location to the data stack.
 378              	**********************************************/
 379 1618 08160000 		_HEADER CAT,2,"C@"
 379      02434000 
 380 1620 3678     		LDRB	TOS,[TOS]
 381 1622 EBE6     		_NEXT 
 382              	
 383              	/*********************************************
 384              	    R>	  ( -- w )
 385              	 	Pop the return stack to the data stack.
 386              	**********************************************/
 387 1624 1C160000 		_HEADER RFROM,2,"R>"
 387      02523E00 
 388 162c 47F8046D 		_PUSH
 389 1630 58F8046B 		LDR	TOS,[RSP],#4
 390 1634 E2E6     		_NEXT 
 391              	
 392              	/************************************************
 393              	    R@	  ( -- w )
 394              	 	Copy top of return stack to the data stack.
 395              	************************************************/
 396 1636 28160000 		_HEADER RAT,2,"R@"
 396      02524000 
 396      00BF
 397 1640 47F8046D 		_PUSH
 398 1644 D8F80060 		LDR	TOS,[RSP]
 399 1648 D8E6     		_NEXT 
 400              	
 401              	/***********************************************
 402              	    >R	  ( w -- )
 403              	 	Push the data stack to the return stack.
 404              	************************************************/
 405 164a 3A160000 		_HEADER TOR,2,">R"
 405      023E5200 
 405      00BF
 406 1654 48F8046D 		STR	TOS,[RSP,#-4]!
 407 1658 57F8046B 		_POP
 408 165c CEE6     		_NEXT
 409              	
 410              	/*******************************
 411              	//	RP! ( u -- )
 412              	// initialize RPP with u 
ARM GAS  forth.s 			page 69


 413              	*******************************/
 414 165e 4E160000 		_HEADER RPSTOR,3,"RP!"
 414      03525021 
 414      00BF
 415 1668 B046     		MOV RSP,TOS 
 416 166a 57F8046B 		_POP  
 417 166e C5E6     		_NEXT 
 418              	
 419              	/********************************
 420              		SP! ( u -- )
 421              	 initialize SPP with u 
 422              	********************************/
 423 1670 62160000 		_HEADER SPSTOR,3,"SP!"
 423      03535021 
 424 1678 3746     		MOV DSP,TOS 
 425 167a 86EA0606 		EOR TOS,TOS,TOS 
 426 167e BDE6     		_NEXT 
 427              	
 428              	/**************************************
 429              	    SP@	 ( -- a )
 430              	 	Push the current data stack pointer.
 431              	***************************************/
 432 1680 74160000 		_HEADER SPAT,3,"SP@"
 432      03535040 
 433 1688 47F8046D 		_PUSH
 434 168c 3E46     		MOV	TOS,DSP
 435 168e B5E6     		_NEXT
 436              	
 437              	/********************************
 438              	    DROP	( w -- )
 439              	 	Discard top stack item.
 440              	********************************/
 441 1690 84160000 		_HEADER DROP,4,"DROP"
 441      0444524F 
 441      500000BF 
 442 169c 57F8046B 		_POP
 443 16a0 ACE6     		_NEXT 
 444              	
 445              	/*********************************
 446              	    DUP	 ( w -- w w )
 447              	 	Duplicate the top stack item.
 448              	*********************************/
 449 16a2 94160000 		_HEADER DUPP,3,"DUP"
 449      03445550 
 449      00BF
 450 16ac 47F8046D 		_PUSH
 451 16b0 A4E6     		_NEXT 
 452              	
 453              	/**********************************
 454              	    SWAP	( w1 w2 -- w2 w1 )
 455              	 	Exchange top two stack items.
 456              	**********************************/
 457 16b2 A6160000 		_HEADER SWAP,4,"SWAP"
 457      04535741 
 457      5000
 458 16bc 3D68     		LDR	WP,[DSP]
 459 16be 3E60     		STR	TOS,[DSP]
ARM GAS  forth.s 			page 70


 460 16c0 2E46     		MOV	TOS,WP
 461 16c2 9BE6     		_NEXT 
 462              	
 463              	/***********************************
 464              	    OVER	( w1 w2 -- w1 w2 w1 )
 465              	 	Copy second stack item to top.
 466              	***********************************/
 467 16c4 B6160000 		_HEADER OVER,4,"OVER"
 467      044F5645 
 467      520000BF 
 468 16d0 47F8046D 		_PUSH
 469 16d4 7E68     		LDR	TOS,[DSP,#4]
 470 16d6 91E6     		_NEXT 
 471              	
 472              	/***********************************
 473              	    0<	  ( n -- t )
 474              	 	Return true if n is negative.
 475              	***********************************/
 476 16d8 C8160000 		_HEADER ZLESS,2,"0<"
 476      02303C00 
 477 16e0 4FEAE676 		ASR TOS,#31
 478 16e4 8AE6     		_NEXT 
 479              	
 480              	/********************************
 481              	    AND	 ( w w -- w )
 482              	 	Bitwise AND.
 483              	********************************/
 484 16e6 DC160000 		_HEADER ANDD,3,"AND"
 484      03414E44 
 484      00BF
 485 16f0 57F8045B 		LDR	WP,[DSP],#4
 486 16f4 06EA0506 		AND	TOS,TOS,WP
 487 16f8 80E6     		_NEXT 
 488              	
 489              	/******************************
 490              	    OR	  ( w w -- w )
 491              	 	Bitwise inclusive OR.
 492              	******************************/
 493 16fa EA160000 		_HEADER ORR,2,"OR"
 493      024F5200 
 493      00BF
 494 1704 57F8045B 		LDR	WP,[DSP],#4
 495 1708 46EA0506 		ORR	TOS,TOS,WP
 496 170c 76E6     		_NEXT 
 497              	
 498              	/*****************************
 499              	    XOR	 ( w w -- w )
 500              	 	Bitwise exclusive OR.
 501              	*****************************/
 502 170e FE160000 		_HEADER XORR,3,"XOR"
 502      03584F52 
 502      00BF
 503 1718 57F8045B 		LDR	WP,[DSP],#4
 504 171c 86EA0506 		EOR	TOS,TOS,WP
 505 1720 6CE6     		_NEXT 
 506              	
 507              	/**************************************************
ARM GAS  forth.s 			page 71


 508              	    UM+	 ( w w -- w cy )
 509              	 	Add two numbers, return the sum and carry flag.
 510              	***************************************************/
 511 1722 12170000 		_HEADER UPLUS,3,"UM+"
 511      03554D2B 
 511      00BF
 512 172c 3D68     		LDR	WP,[DSP]
 513 172e AD19     		ADDS	WP,WP,TOS
 514 1730 4FF00006 		MOV	TOS,#0
 515 1734 46F10006 		ADC	TOS,TOS,#0
 516 1738 3D60     		STR	WP,[DSP]
 517 173a 5FE6     		_NEXT 
 518              	
 519              	/*********************************
 520              	    RSHIFT	 ( w # -- w )
 521              	 	arithmetic Right shift # bits.
 522              	**********************************/
 523 173c 26170000 		_HEADER RSHIFT,6,"RSHIFT"
 523      06525348 
 523      49465400 
 524 1748 57F8045B 		LDR	WP,[DSP],#4
 525 174c 45FA06F6 		MOV	TOS,WP,ASR TOS
 526 1750 54E6     		_NEXT 
 527              	
 528              	/****************************
 529              	    LSHIFT	 ( w # -- w )
 530              	 	Right shift # bits.
 531              	****************************/
 532 1752 40170000 		_HEADER LSHIFT,6,"LSHIFT"
 532      064C5348 
 532      49465400 
 532      00BF
 533 1760 57F8045B 		LDR	WP,[DSP],#4
 534 1764 05FA06F6 		MOV	TOS,WP,LSL TOS
 535 1768 48E6     		_NEXT
 536              	
 537              	/*************************
 538              	    +	 ( w w -- w )
 539              	 	Add.
 540              	*************************/
 541 176a 56170000 		_HEADER PLUS,1,"+"
 541      012B
 542 1770 57F8045B 		LDR	WP,[DSP],#4
 543 1774 2E44     		ADD	TOS,TOS,WP
 544 1776 41E6     		_NEXT 
 545              	
 546              	/************************
 547              	    -	 ( w w -- w )
 548              	 	Subtract.
 549              	************************/
 550 1778 6E170000 		_HEADER SUBB,1,"-"
 550      012D00BF 
 551 1780 57F8045B 		LDR	WP,[DSP],#4
 552 1784 C6EB0506 		RSB	TOS,TOS,WP
 553 1788 38E6     		_NEXT 
 554              	
 555              	/************************
ARM GAS  forth.s 			page 72


 556              	    *	 ( w w -- w )
 557              	 	Multiply.
 558              	***********************/
 559 178a 7C170000 		_HEADER STAR,1,"*"
 559      012A
 560 1790 57F8045B 		LDR	WP,[DSP],#4
 561 1794 05FB06F6 		MUL	TOS,WP,TOS
 562 1798 30E6     		_NEXT 
 563              	
 564              	/***************************
 565              	    UM*	 ( w w -- ud )
 566              	 	Unsigned multiply.
 567              	****************************/
 568 179a 8E170000 		_HEADER UMSTA,3,"UM*"
 568      03554D2A 
 568      00BF
 569 17a4 3D68     		LDR	WP,[DSP]
 570 17a6 A6FB0523 		UMULL	T2,T3,TOS,WP
 571 17aa 3A60     		STR	T2,[DSP]
 572 17ac 1E46     		MOV	TOS,T3
 573 17ae 25E6     		_NEXT 
 574              	
 575              	/***************************
 576              	    M*	 ( w w -- d )
 577              	 	signed multiply.
 578              	***************************/
 579 17b0 9E170000 		_HEADER MSTAR,2,"M*"
 579      024D2A00 
 580 17b8 3D68     		LDR	WP,[DSP]
 581 17ba 86FB0523 		SMULL	T2,T3,TOS,WP
 582 17be 3A60     		STR	T2,[DSP]
 583 17c0 1E46     		MOV	TOS,T3
 584 17c2 1BE6     		_NEXT 
 585              	
 586              	/***************************
 587              	    1+	 ( w -- w+1 )
 588              	 	Add 1.
 589              	***************************/
 590 17c4 B4170000 		_HEADER ONEP,2,"1+"
 590      02312B00 
 591 17cc 06F10106 		ADD	TOS,TOS,#1
 592 17d0 14E6     		_NEXT 
 593              	
 594              	/***************************
 595              	    1-	 ( w -- w-1 )
 596              	 	Subtract 1.
 597              	***************************/
 598 17d2 C8170000 		_HEADER ONEM,2,"1-"
 598      02312D00 
 598      00BF
 599 17dc A6F10106 		SUB	TOS,TOS,#1
 600 17e0 0CE6     		_NEXT 
 601              	
 602              	/***************************
 603              	    2+	 ( w -- w+2 )
 604              	 	Add 2.
 605              	**************************/
ARM GAS  forth.s 			page 73


 606 17e2 D6170000 		_HEADER TWOP,2,"2+"
 606      02322B00 
 606      00BF
 607 17ec 06F10206 		ADD	TOS,TOS,#2
 608 17f0 04E6     		_NEXT
 609              	
 610              	/**************************
 611              	    2-	 ( w -- w-2 )
 612              	 	Subtract 2.
 613              	**************************/
 614 17f2 E6170000 		_HEADER TWOM,2,"2-"
 614      02322D00 
 614      00BF
 615 17fc A6F10206 		SUB	TOS,TOS,#2
 616 1800 FCE5     		_NEXT
 617              	
 618              	/***************************
 619              	    CELL+	( w -- w+4 )
 620              	 	Add CELLL.
 621              	***************************/
 622 1802 F6170000 		_HEADER CELLP,5,"CELL+"
 622      0543454C 
 622      4C2B
 623 180c 06F10406 		ADD	TOS,TOS,#CELLL
 624 1810 F4E5     		_NEXT
 625              	
 626              	/***************************
 627              	    CELL-	( w -- w-4 )
 628              	 	Subtract CELLL.
 629              	**************************/
 630 1812 06180000 		_HEADER CELLM,5,"CELL-"
 630      0543454C 
 630      4C2D
 631 181c A6F10406 		SUB	TOS,TOS,#CELLL
 632 1820 ECE5     		_NEXT
 633              	
 634              	/**************************** 
 635              	    BL	( -- 32 )
 636              	 	Blank (ASCII space).
 637              	*****************************/
 638 1822 16180000 		_HEADER BLANK,2,"BL"
 638      02424C00 
 638      00BF
 639 182c 47F8046D 		_PUSH
 640 1830 4FF02006 		MOV	TOS,#32
 641 1834 E2E5     		_NEXT 
 642              	
 643              	/**************************
 644              	    CELLS	( w -- w*4 )
 645              	 	Multiply CELLL 
 646              	***************************/
 647 1836 26180000 		_HEADER CELLS,5,"CELLS"
 647      0543454C 
 647      4C53
 648 1840 4FEA8606 		LSL TOS,#2
 649 1844 DAE5     		_NEXT
 650              	
ARM GAS  forth.s 			page 74


 651              	/***************************
 652              	    CELL/	( w -- w/4 )
 653              	 	Divide by CELLL.
 654              	***************************/
 655 1846 3A180000 		_HEADER CELLSL,5,"CELL/"
 655      0543454C 
 655      4C2F
 656 1850 4FEAA606 		ASR TOS,#2
 657 1854 D2E5     		_NEXT
 658              	
 659              	/*************************
 660              	    2*	( w -- w*2 )
 661              	 	Multiply 2.
 662              	*************************/
 663 1856 4A180000 		_HEADER TWOST,2,"2*"
 663      02322A00 
 663      00BF
 664 1860 4FEA4606 		MOV	TOS,TOS,LSL#1
 665 1864 CAE5     		_NEXT
 666              	
 667              	/*************************
 668              	    2/	( w -- w/2 )
 669              	 	Divide by 2.
 670              	***********************/
 671 1866 5A180000 		_HEADER TWOSL,2,"2/"
 671      02322F00 
 671      00BF
 672 1870 4FEA6606 		MOV	TOS,TOS,ASR#1
 673 1874 C2E5     		_NEXT
 674              	
 675              	/****************************
 676              	    ?DUP	( w -- w w | 0 )
 677              	 	Conditional duplicate.
 678              	*****************************/
 679 1876 6A180000 		_HEADER QDUP,4,"?DUP"
 679      043F4455 
 679      5000
 680 1880 3500     		MOVS	WP,TOS
 681 1882 18BF     		IT NE 
 682 1884 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 683 1888 B8E5     		_NEXT
 684              	
 685              	/***********************************
 686              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 687              	 	Rotate top 3 items.
 688              	*************************************/
 689 188a 7A180000 		_HEADER ROT,3,"ROT"
 689      03524F54 
 689      00BF
 690 1894 3868     		LDR	T0,[DSP]  // w2 
 691 1896 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 692 1898 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 693 189a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 694 189c AEE5     		_NEXT
 695              	
 696              	/*********************************
 697              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
ARM GAS  forth.s 			page 75


 698              	 left rotate top 3 elements 
 699              	********************************/
 700 189e 8E180000 		_HEADER NROT,4,"-ROT"
 700      042D524F 
 700      5400
 701 18a8 7868     		LDR T0,[DSP,#4]
 702 18aa 7E60     		STR TOS,[DSP,#4]	
 703 18ac 3E68     		LDR TOS,[DSP]
 704 18ae 3860     		STR T0,[DSP]
 705 18b0 A4E5     		_NEXT 
 706              	
 707              	/*********************************
 708              	    2DROP	( w1 w2 -- )
 709              	 	Drop top 2 items.
 710              	*********************************/
 711 18b2 A2180000 		_HEADER DDROP,5,"2DROP"
 711      05324452 
 711      4F50
 712 18bc 57F8046B 		_POP
 713 18c0 57F8046B 		_POP
 714 18c4 9AE5     		_NEXT 
 715              	
 716              	/********************************
 717              		3DROP ( w1 w2 w3 -- )
 718              		drop top 3 items 
 719              	********************************/
 720 18c6 B6180000 		_HEADER TDROP,5,"3DROP"
 720      05334452 
 720      4F50
 721 18d0 07F10807 	    add DSP,#8 
 722 18d4 57F8046B 	    _POP 
 723 18d8 90E5     	    _NEXT 
 724              	
 725              	/***********************************
 726              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 727              	 	Duplicate top 2 items.
 728              	************************************/
 729 18da CA180000 		_HEADER DDUP,4,"2DUP"
 729      04324455 
 729      5000
 730 18e4 3868     		LDR	T0,[DSP] // w1
 731 18e6 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 732 18ea 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 733 18ee 85E5     		_NEXT
 734              	
 735              	/******************************
 736              	    D+	( d1 d2 -- d3 )
 737              	 	Add top 2 double numbers.
 738              	******************************/
 739 18f0 DE180000 		_HEADER DPLUS,2,"D+"
 739      02442B00 
 740 18f8 57F8045B 		LDR	WP,[DSP],#4
 741 18fc 57F8042B 		LDR	T2,[DSP],#4
 742 1900 3B68     		LDR	T3,[DSP]
 743 1902 ED18     		ADDS	WP,WP,T3
 744 1904 3D60     		STR	WP,[DSP]
 745 1906 46EB0206 		ADC	TOS,TOS,T2
ARM GAS  forth.s 			page 76


 746 190a 77E5     		_NEXT
 747              	
 748              	/*****************************
 749              	    NOT	 ( w -- !w )
 750              	 	1"s complement.
 751              	*****************************/
 752 190c F4180000 		_HEADER INVER,3,"NOT"
 752      034E4F54 
 753 1914 6FEA0606 		MVN	TOS,TOS
 754 1918 70E5     		_NEXT
 755              	
 756              	/*****************************
 757              	    NEGATE	( w -- -w )
 758              	 	2's complement.
 759              	***************************/
 760 191a 10190000 		_HEADER NEGAT,6,"NEGATE"
 760      064E4547 
 760      41544500 
 760      00BF
 761 1928 C6F10006 		RSB	TOS,TOS,#0
 762 192c 66E5     		_NEXT
 763              	
 764              	/***************************
 765              	    ABS	 ( w -- |w| )
 766              	 	Absolute.
 767              	**************************/
 768 192e 1E190000 		_HEADER ABSS,3,"ABS"
 768      03414253 
 768      00BF
 769 1938 16F0004F 		TST	TOS,#0x80000000
 770 193c 18BF     		IT NE
 771 193e 7642     	    RSBNE   TOS,TOS,#0
 772 1940 5CE5     		_NEXT
 773              	
 774              	/*******************
 775              	  0= ( w -- f )
 776              	 TOS==0?
 777              	*******************/
 778 1942 32190000 		_HEADER ZEQUAL,2,"0="
 778      02303D00 
 778      00BF
 779 194c 16B9     		cbnz TOS,1f
 780 194e 4FF0FF36 		mov TOS,#-1
 781 1952 53E5     		_NEXT 
 782 1954 86EA0606 	1:  eor TOS,TOS,TOS  
 783 1958 50E5     		_NEXT 	
 784              	
 785              	/*********************
 786              	    =	 ( w w -- t )
 787              	 	Equal?
 788              	*********************/
 789 195a 46190000 		_HEADER EQUAL,1,"="
 789      013D
 790 1960 57F8045B 		LDR	WP,[DSP],#4
 791 1964 AE42     		CMP	TOS,WP
 792 1966 0CBF     		ITE EQ 
 793 1968 6FF00006 	    MVNEQ	TOS,#0
ARM GAS  forth.s 			page 77


 794 196c 0026     		MOVNE	TOS,#0
 795 196e 45E5     		_NEXT
 796              	
 797              	/************************
 798              	    U<	 ( w w -- t )
 799              	 	Unsigned less?
 800              	*************************/
 801 1970 5E190000 		_HEADER ULESS,2,"U<"
 801      02553C00 
 802 1978 57F8045B 		LDR	WP,[DSP],#4
 803 197c B542     		CMP	WP,TOS
 804 197e 34BF     		ITE CC 
 805 1980 6FF00006 		MVNCC	TOS,#0
 806 1984 0026     		MOVCS	TOS,#0
 807 1986 39E5     		_NEXT
 808              	
 809              	/**********************
 810              	    <	( w w -- t )
 811              	 	Less?
 812              	**********************/
 813 1988 74190000 		_HEADER LESS,1,"<"
 813      013C00BF 
 814 1990 57F8045B 		LDR	WP,[DSP],#4
 815 1994 B542     		CMP	WP,TOS
 816 1996 B4BF     	    ITE LT
 817 1998 6FF00006 		MVNLT	TOS,#0
 818 199c 0026     		MOVGE	TOS,#0
 819 199e 2DE5     		_NEXT 
 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 19a0 8C190000 		_HEADER GREAT,1,">"
 825      013E00BF 
 826 19a8 57F8045B 		LDR	WP,[DSP],#4
 827 19ac B542     		CMP	WP,TOS
 828 19ae CCBF     		ITE GT
 829 19b0 6FF00006 	    MVNGT	TOS,#0
 830 19b4 0026     		MOVLE	TOS,#0
 831 19b6 21E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 19b8 A4190000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 19c0 57F8045B 		LDR	WP,[DSP],#4
 839 19c4 B542     		CMP	WP,TOS
 840 19c6 C8BF     		IT GT 
 841 19c8 2E46     		MOVGT	TOS,WP
 842 19ca 17E5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
 846              	 	Leave minimum.
ARM GAS  forth.s 			page 78


 847              	**************************/
 848 19cc BC190000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 19d4 57F8045B 		LDR	WP,[DSP],#4
 850 19d8 B542     		CMP	WP,TOS
 851 19da B8BF     		IT LT
 852 19dc 2E46     		MOVLT	TOS,WP
 853 19de 0DE5     		_NEXT
 854              	
 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 19e0 D0190000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 19e8 57F8045B 		LDR	WP,[DSP],#4
 861 19ec 3268     		LDR	T2,[TOS]
 862 19ee 2A44     		ADD	T2,T2,WP
 863 19f0 3260     		STR	T2,[TOS]
 864 19f2 57F8046B 		_POP
 865 19f6 01E5     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 19f8 E4190000 		_HEADER DSTOR,2,"2!"
 871      02322100 
 872 1a00 57F8045B 		LDR	WP,[DSP],#4
 873 1a04 57F8042B 		LDR	T2,[DSP],#4
 874 1a08 46F8045B 		STR	WP,[TOS],#4
 875 1a0c 3260     		STR	T2,[TOS]
 876 1a0e 57F8046B 		_POP
 877 1a12 F3E4     		_NEXT
 878              	
 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 1a14 FC190000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 1a1c 7568     		LDR	WP,[TOS,#4]
 885 1a1e 47F8045D 		STR	WP,[DSP,#-4]!
 886 1a22 3668     		LDR	TOS,[TOS]
 887 1a24 EAE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 1a26 181A0000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 1a30 16F8015B 		LDRB	WP,[TOS],#1
 895 1a34 47F8046D 		_PUSH
 896 1a38 2E46     		MOV	TOS,WP
 897 1a3a DFE4     		_NEXT
ARM GAS  forth.s 			page 79


 898              	
 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
 903 1a3c 2A1A0000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 1a48 3D68     		LDR	WP,[DSP]
 905 1a4a A2EB0202 		SUB	T2,T2,T2
 906 1a4e 551B     		SUBS WP,T2,WP
 907 1a50 62EB0606 		SBC	TOS,T2,TOS
 908 1a54 3D60     		STR	WP,[DSP]
 909 1a56 D1E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 1a58 47F8046D 		_PUSH
 922 1a5c 6646     		MOV TOS,IP
 923 1a5e 0CF1040C 		ADD IP,IP,#4 
 924 1a62 CEE4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
 931              	DOCON:
 932 1a64 47F8046D 		_PUSH
 933 1a68 5CF8046B 		LDR.W TOS,[IP],#4 
 934 1a6c C9E4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 1a6e 401A0000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 1a78 47F8046D 		_PUSH 
 946 1a7c 04F10406 		ADD TOS,UP,#RNDSEED
 947 1a80 BCE4     		_NEXT 	
 948              	
 949              	/****************************************
 950              	  MSEC ( -- a)
ARM GAS  forth.s 			page 80


 951              	 return address of milliseconds counter
 952              	****************************************/
 953 1a82 721A0000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
 954 1a8c 47F8046D 	    _PUSH
 955 1a90 04F10806 	    ADD TOS,UP,#TICKS
 956 1a94 B2E4     	    _NEXT 
 957              	
 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 1a96 861A0000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 1aa0 47F8046D 		 _PUSH 
 964 1aa4 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 1aa8 A8E4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 1aaa 9A1A0000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 1ab4 47F8046D 		_PUSH
 973 1ab8 04F11006 		ADD	TOS,UP,#BOOT 
 974 1abc 9EE4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
 980 1abe AE1A0000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 1ac8 47F8046D 		_PUSH
 982 1acc 04F11C06 		ADD	TOS,UP,#NBASE
 983 1ad0 94E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 1ad2 47F8046D 		_PUSH
 992 1ad6 04F12006 		ADD	TOS,UP,#TMP
 993 1ada 8FE4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
 999 1adc C21A0000 		_HEADER SPAN,4,"SPAN"
ARM GAS  forth.s 			page 81


 999      04535041 
 999      4E0000BF 
 1000 1ae8 47F8046D 		_PUSH
 1001 1aec 04F12406 		ADD	TOS,UP,#CSPAN
 1002 1af0 84E4     		_NEXT
 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
 1007              	***********************************************************/
 1008 1af2 E01A0000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 1afc 47F8046D 		_PUSH
 1010 1b00 04F12806 		ADD	TOS,UP,#TOIN
 1011 1b04 7AE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 1b06 F61A0000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 1b10 47F8046D 		_PUSH
 1020 1b14 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 1b18 70E4     		_NEXT
 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 1b1a 0A1B0000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
 1027      414C
 1028 1b24 47F8046D 		_PUSH
 1029 1b28 04F13406 		ADD	TOS,UP,#EVAL
 1030 1b2c 66E4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 1b2e 1E1B0000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 1b38 47F8046D 		_PUSH
 1039 1b3c 04F13806 		ADD	TOS,UP,#HOLD
 1040 1b40 5CE4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
 1046              	**********************************/
ARM GAS  forth.s 			page 82


 1047 1b42 321B0000 		_HEADER CNTXT,7,"CONTEXT"
 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
 1049 1b50 47F8046D 		_PUSH
 1050 1b54 04F13C06 		ADD	TOS,UP,#CTXT
 1051 1b58 50E4     		_NEXT
 1052              	
 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 1b5a 461B0000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 1b64 47F8046D 		_PUSH
 1060 1b68 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 1b6c 46E4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 1b6e 5E1B0000 		_HEADER FCP,3,"FCP"
 1068      03464350 
 1068      00BF
 1069 1b78 47F8046D 		_PUSH 
 1070 1b7c 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 1b80 3CE4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 1b82 721B0000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 1b8c 47F8046D 		_PUSH
 1080 1b90 04F14806 		ADD	TOS,UP,#LASTN
 1081 1b94 32E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 1b96 861B0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
 1092      522D4245 
ARM GAS  forth.s 			page 83


 1092      47494E00 
 1092      00BF
 1093 1ba8 861B0000 		.word _LAST
 1094 1bac 47F8046D 		_PUSH 
 1095 1bb0 004E     		ldr TOS,USR_BGN_ADR 
 1096 1bb2 23E4     		_NEXT 
 1097              	USR_BGN_ADR:
 1098 1bb4 12050020 	.word  DTOP 
 1099              	
 1100              	/*********************************
 1101              	  USER_END ( -- a )
 1102              	  where user area end in RAM 
 1103              	******************************/
 1104 1bb8 9A1B0000 		_HEADER USER_END,8,"USER-END"
 1104      08555345 
 1104      522D454E 
 1104      440000BF 
 1105 1bc8 47F8046D 		_PUSH 
 1106 1bcc 004E     		ldr TOS,USER_END_ADR 
 1107 1bce 15E4     		_NEXT 
 1108              	USER_END_ADR:
 1109 1bd0 FC800120 		.word DEND 
 1110              	
 1111              	
 1112              	/* *********************
 1113              	  Common functions
 1114              	***********************/
 1115              	
 1116              	/********************************
 1117              	    WITHIN	( u ul uh -- t )
 1118              	 	Return true if u is within 
 1119              		the range of ul and uh.
 1120              	********************************/
 1121 1bd4 BC1B0000 		_HEADER WITHI,6,"WITHIN"
 1121      06574954 
 1121      48494E00 
 1122 1be0 504700BF 		_NEST
 1123 1be4 D1160000 		_ADR	OVER
 1124 1be8 81170000 		_ADR	SUBB
 1125 1bec 55160000 		_ADR	TOR
 1126 1bf0 81170000 		_ADR	SUBB
 1127 1bf4 2D160000 		_ADR	RFROM
 1128 1bf8 79190000 		_ADR	ULESS
 1129 1bfc 03140000 		_UNNEST
 1130              	
 1131              	//  Divide
 1132              	
 1133              	/*************************************
 1134              	    UM/MOD	( udl udh u -- ur uq )
 1135              	 	Unsigned divide of a double by a 
 1136              		single. Return mod and quotient.
 1137              	**************************************/
 1138 1c00 D81B0000 		_HEADER UMMOD,6,"UM/MOD"
 1138      06554D2F 
 1138      4D4F4400 
 1139 1c0c 4FF00103 		MOV	T3,#1
 1140 1c10 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 84


 1141 1c14 3A68     		LDR	T2,[DSP]
 1142              	UMMOD0:
 1143 1c16 9218     		ADDS	T2,T2,T2
 1144 1c18 6D41     		ADCS	WP,WP,WP
 1145 1c1a 04D3     		BCC	UMMOD1
 1146 1c1c A5EB0605 		SUB	WP,WP,TOS
 1147 1c20 02F10102 		ADD	T2,T2,#1
 1148 1c24 04E0     		B UMMOD2
 1149              	UMMOD1:
 1150 1c26 AD1B     		SUBS	WP,WP,TOS 
 1151 1c28 28BF     		IT CS 
 1152 1c2a 0132     		ADDCS	T2,T2,#1
 1153 1c2c 00D2     		BCS	UMMOD2
 1154 1c2e 3544     		ADD	WP,WP,TOS
 1155              	UMMOD2:
 1156 1c30 DB18     		ADDS	T3,T3,T3
 1157 1c32 F0D3     		BCC	UMMOD0
 1158 1c34 1646     		MOV	TOS,T2
 1159 1c36 3D60     		STR	WP,[DSP]
 1160 1c38 FFF7E0BB 		_NEXT
 1161              	
 1162              	/****************************
 1163              	    M/MOD	( d n -- r q )
 1164              	 	Signed floored divide 
 1165              		of double by single. 
 1166              		Return mod and quotient.
 1167              	****************************/
 1168 1c3c 041C0000 		_HEADER MSMOD,5,"M/MOD"
 1168      054D2F4D 
 1168      4F4400BF 
 1169 1c48 504700BF 		_NEST
 1170 1c4c AD160000 		_ADR	DUPP
 1171 1c50 E1160000 		_ADR	ZLESS
 1172 1c54 AD160000 		_ADR	DUPP
 1173 1c58 55160000 		_ADR	TOR
 1174 1c5c BB150000 		_QBRAN MMOD1
 1174      741C0000 
 1175 1c64 29190000 		_ADR	NEGAT
 1176 1c68 55160000 		_ADR	TOR
 1177 1c6c 491A0000 		_ADR	DNEGA
 1178 1c70 2D160000 		_ADR	RFROM
 1179              	MMOD1:
 1180 1c74 55160000 		_ADR	TOR
 1181 1c78 AD160000 		_ADR	DUPP
 1182 1c7c E1160000 		_ADR	ZLESS
 1183 1c80 BB150000 		_QBRAN MMOD2
 1183      901C0000 
 1184 1c88 41160000 		_ADR	RAT
 1185 1c8c 71170000 		_ADR	PLUS
 1186              	MMOD2:
 1187 1c90 2D160000 		_ADR	RFROM
 1188 1c94 0D1C0000 		_ADR	UMMOD
 1189 1c98 2D160000 		_ADR	RFROM
 1190 1c9c BB150000 		_QBRAN	MMOD3
 1190      B01C0000 
 1191 1ca4 BD160000 		_ADR	SWAP
 1192 1ca8 29190000 		_ADR	NEGAT
ARM GAS  forth.s 			page 85


 1193 1cac BD160000 		_ADR	SWAP
 1194              	MMOD3:   
 1195 1cb0 03140000 		_UNNEST
 1196              	
 1197              	/****************************
 1198              	   /MOD	( n n -- r q )
 1199              		Signed divide. Return
 1200              		mod and quotient.
 1201              	****************************/
 1202 1cb4 401C0000 		_HEADER SLMOD,4,"/MOD"
 1202      042F4D4F 
 1202      440000BF 
 1203 1cc0 401C0000 		.word	_MSMOD
 1204 1cc4 504700BF 		_NEST
 1205 1cc8 D1160000 		_ADR	OVER
 1206 1ccc E1160000 		_ADR	ZLESS
 1207 1cd0 BD160000 		_ADR	SWAP
 1208 1cd4 491C0000 		_ADR	MSMOD
 1209 1cd8 03140000 		_UNNEST
 1210              	
 1211              	/**************************
 1212              	    MOD	 ( n n -- r )
 1213              	 	Signed divide. Return
 1214              		mod only.
 1215              	**************************/
 1216 1cdc B81C0000 		_HEADER MODD,3,"MOD"
 1216      034D4F44 
 1217 1ce4 504700BF 		_NEST
 1218 1ce8 C11C0000 		_ADR	SLMOD
 1219 1cec 9D160000 		_ADR	DROP
 1220 1cf0 03140000 		_UNNEST
 1221              	
 1222              	/*************************
 1223              	    /	   ( n n -- q )
 1224              	 	Signed divide. Return
 1225              		quotient only.
 1226              	**************************/
 1227 1cf4 E01C0000 		_HEADER SLASH,1,"/"
 1227      012F00BF 
 1228 1cfc 504700BF 		_NEST
 1229 1d00 C11C0000 		_ADR	SLMOD
 1230 1d04 BD160000 		_ADR	SWAP
 1231 1d08 9D160000 		_ADR	DROP
 1232 1d0c 03140000 		_UNNEST
 1233              	
 1234              	//******************************
 1235              	//  */MOD	( n1 n2 n3 -- r q )
 1236              	/* 	Multiply n1 and n2, then 
 1237              		divide by n3. Return 
 1238              		mod and quotient.
 1239              	******************************/
 1240 1d10 F81C0000 		_HEADER SSMOD,5,"*/MOD"
 1240      052A2F4D 
 1240      4F4400BF 
 1241 1d1c 504700BF 		_NEST
 1242 1d20 55160000 		_ADR	TOR
 1243 1d24 B9170000 		_ADR	MSTAR
ARM GAS  forth.s 			page 86


 1244 1d28 2D160000 		_ADR	RFROM
 1245 1d2c 491C0000 		_ADR	MSMOD
 1246 1d30 03140000 		_UNNEST
 1247              	
 1248              	//*******************************
 1249              	//  */ ( n1 n2 n3 -- q )
 1250              	/* 	Multiply n1 by n2, then 
 1251              		divide by n3. Return quotient
 1252              		only.
 1253              	*******************************/
 1254 1d34 141D0000 		_HEADER STASL,2,"*/"
 1254      022A2F00 
 1255 1d3c 504700BF 		_NEST
 1256 1d40 1D1D0000 		_ADR	SSMOD
 1257 1d44 BD160000 		_ADR	SWAP
 1258 1d48 9D160000 		_ADR	DROP
 1259 1d4c 03140000 		_UNNEST
 1260              	
 1261              	/*******************
 1262              	  Miscellaneous
 1263              	*******************/
 1264              	
 1265              	/*************************
 1266              	    ALIGNED	( b -- a )
 1267              	 	Align address to the 
 1268              		cell boundary.
 1269              	**************************/
 1270 1d50 381D0000 		_HEADER ALGND,7,"ALIGNED"
 1270      07414C49 
 1270      474E4544 
 1271 1d5c 06F10306 		ADD	TOS,TOS,#3
 1272 1d60 6FF00305 		MVN	WP,#3
 1273 1d64 06EA0506 		AND	TOS,TOS,WP
 1274 1d68 FFF748BB 		_NEXT
 1275              	
 1276              	/****************************
 1277              	    >CHAR	( c -- c )
 1278              	 	Filter non-printing 
 1279              		characters.
 1280              	****************************/
 1281 1d6c 541D0000 		_HEADER TCHAR,5,">CHAR"
 1281      053E4348 
 1281      415200BF 
 1282 1d78 504700BF 		_NEST
 1283 1d7c 7B150000 		_DOLIT  0x7F
 1283      7F000000 
 1284 1d84 F1160000 		_ADR	ANDD
 1285 1d88 AD160000 		_ADR	DUPP	// mask msb
 1286 1d8c 2D180000 		_ADR	BLANK
 1287 1d90 7B150000 		_DOLIT 	127
 1287      7F000000 
 1288 1d98 E11B0000 		_ADR	WITHI	// check for printable
 1289 1d9c 15190000 		_ADR	INVER
 1290 1da0 BB150000 		_QBRAN	TCHA1
 1290      B41D0000 
 1291 1da8 9D160000 		_ADR	DROP
 1292 1dac 7B150000 		_DOLIT 	'_'	// replace non-printables
ARM GAS  forth.s 			page 87


 1292      5F000000 
 1293              	TCHA1:
 1294 1db4 03140000 		  _UNNEST
 1295              	
 1296              	/************************
 1297              	    DEPTH	( -- n )
 1298              	 	Return the depth of
 1299              		the data stack.
 1300              	***********************/
 1301 1db8 701D0000 		_HEADER DEPTH,5,"DEPTH"
 1301      05444550 
 1301      544800BF 
 1302 1dc4 4FF47F42 		_MOV32 T2,SPP 
 1302      C2F20102 
 1303 1dcc A2EB0702 		SUB	T2,T2,DSP
 1304 1dd0 47F8046D 		_PUSH
 1305 1dd4 4FEAA206 		ASR	TOS,T2,#2
 1306 1dd8 FFF710BB 		_NEXT
 1307              	
 1308              	/*****************************
 1309              	    PICK	( ... +n -- ... w )
 1310              	 	Copy the nth stack item 
 1311              		to tos.
 1312              	******************************/
 1313 1ddc BC1D0000 		_HEADER PICK,4,"PICK"
 1313      04504943 
 1313      4B0000BF 
 1314 1de8 504700BF 		_NEST
 1315 1dec CD170000 		_ADR	ONEP
 1316 1df0 41180000 		_ADR	CELLS
 1317 1df4 89160000 		_ADR	SPAT
 1318 1df8 71170000 		_ADR	PLUS
 1319 1dfc 01160000 		_ADR	AT
 1320 1e00 03140000 		_UNNEST
 1321              	
 1322              	/*********************
 1323              	  Memory access
 1324              	*********************/
 1325              	
 1326              	/*************************
 1327              	    HERE	( -- a )
 1328              	 	Return the top of
 1329              		the code dictionary.
 1330              	*************************/
 1331 1e04 E01D0000 		_HEADER HERE,4,"HERE"
 1331      04484552 
 1331      450000BF 
 1332 1e10 504700BF 		_NEST
 1333 1e14 651B0000 		_ADR	CPP
 1334 1e18 01160000 		_ADR	AT
 1335 1e1c 03140000 		_UNNEST
 1336              	
 1337              	/***************************	
 1338              	    PAD	 ( -- a )
 1339              	 	Return the address of 
 1340              		a temporary buffer.
 1341              	***************************/
ARM GAS  forth.s 			page 88


 1342 1e20 081E0000 		_HEADER PAD,3,"PAD"
 1342      03504144 
 1343 1e28 504700BF 		_NEST
 1344 1e2c 111E0000 		_ADR	HERE
 1345 1e30 7B150000 		_DOLIT 80
 1345      50000000 
 1346 1e38 71170000 		_ADR PLUS 
 1347 1e3c 03140000 		_UNNEST
 1348              	
 1349              	/***********************
 1350              	    TIB	 ( -- a )
 1351              	 	Return the address 
 1352              		of the terminal 
 1353              		input buffer.
 1354              	************************/
 1355 1e40 241E0000 		_HEADER TIB,3,"TIB"
 1355      03544942 
 1356 1e48 47F8046D 		_PUSH
 1357 1e4c 266B     		ldr TOS,[UP,#TIBUF]
 1358 1e4e FFF7D5BA 		_NEXT
 1359              	
 1360              	/*************************
 1361              	    @EXECUTE	( a -- )
 1362              	 	Execute vector stored
 1363              		in address a.
 1364              	*************************/
 1365 1e52 441E0000 		_HEADER ATEXE,8,"@EXECUTE"
 1365      08404558 
 1365      45435554 
 1365      4500
 1366 1e60 3500     		MOVS	WP,TOS
 1367 1e62 57F8046B 		_POP
 1368 1e66 2D68     		LDR	WP,[WP]
 1369 1e68 45F00105 		ORR	WP,WP,#1
 1370 1e6c 18BF     	    IT NE 
 1371 1e6e 2847     		BXNE	WP
 1372 1e70 FFF7C4BA 		_NEXT
 1373              	
 1374              	/*******************************
 1375              	    CMOVE	( b1 b2 u -- )
 1376              	 	Copy u bytes from b1 to b2.
 1377              	********************************/
 1378 1e74 561E0000 		_HEADER CMOVE,5,"CMOVE"
 1378      05434D4F 
 1378      564500BF 
 1379 1e80 57F8042B 		LDR	T2,[DSP],#4
 1380 1e84 57F8043B 		LDR	T3,[DSP],#4
 1381 1e88 03E0     		B CMOV1
 1382              	CMOV0:
 1383 1e8a 13F8015B 		LDRB	WP,[T3],#1
 1384 1e8e 02F8015B 		STRB	WP,[T2],#1
 1385              	CMOV1:
 1386 1e92 3600     		MOVS	TOS,TOS
 1387 1e94 02D0     		BEQ	CMOV2
 1388 1e96 A6F10106 		SUB	TOS,TOS,#1
 1389 1e9a F6E7     		B CMOV0
 1390              	CMOV2:
ARM GAS  forth.s 			page 89


 1391 1e9c 57F8046B 		_POP
 1392 1ea0 FFF7ACBA 		_NEXT
 1393              	
 1394              	/***************************
 1395              	    MOVE	( a1 a2 u -- )
 1396              	 	Copy u words from a1 to a2.
 1397              	*******************************/
 1398 1ea4 781E0000 		_HEADER MOVE,4,"MOVE"
 1398      044D4F56 
 1398      450000BF 
 1399 1eb0 26F00306 		AND	TOS,TOS,#-4
 1400 1eb4 57F8042B 		LDR	T2,[DSP],#4
 1401 1eb8 57F8043B 		LDR	T3,[DSP],#4
 1402 1ebc 03E0     		B MOVE1
 1403              	MOVE0:
 1404 1ebe 53F8045B 		LDR	WP,[T3],#4
 1405 1ec2 42F8045B 		STR	WP,[T2],#4
 1406              	MOVE1:
 1407 1ec6 3600     		MOVS	TOS,TOS
 1408 1ec8 02D0     		BEQ	MOVE2
 1409 1eca A6F10406 		SUB	TOS,TOS,#4
 1410 1ece F6E7     		B MOVE0
 1411              	MOVE2:
 1412 1ed0 57F8046B 		_POP
 1413 1ed4 FFF792BA 		_NEXT
 1414              	
 1415              	/**************************
 1416              	    FILL	( b u c -- )
 1417              	 	Fill u bytes of character
 1418              		c to area beginning at b.
 1419              	******************************/
 1420 1ed8 A81E0000 		_HEADER FILL,4,"FILL"
 1420      0446494C 
 1420      4C0000BF 
 1421 1ee4 03CF     		LDMFD DSP!,{T0,T1} 
 1422 1ee6 0000     		MOVS T0,T0 
 1423 1ee8 03D0     		BEQ FILL2
 1424              	FILL1:
 1425 1eea 01F8016B 		STRB	TOS,[T1],#1
 1426 1eee 0138     		SUBS	T0,T0,#1
 1427 1ef0 FBD1     		BNE FILL1
 1428              	FILL2:
 1429 1ef2 57F8046B 		_POP
 1430 1ef6 FFF781BA 		_NEXT
 1431              	
 1432              	/*****************************
 1433              	    PACK$	( b u a -- a )
 1434              	 	Build a counted word with
 1435              		u characters from b. 
 1436              		Null fill.
 1437              	*****************************/
 1438 1efa DC1E0000 		_HEADER PACKS,5,"PACK$"
 1438      05504143 
 1438      4B24
 1439 1f04 504700BF 		_NEST
 1440 1f08 5D1D0000 		_ADR	ALGND
 1441 1f0c AD160000 		_ADR	DUPP
ARM GAS  forth.s 			page 90


 1442 1f10 55160000 		_ADR	TOR			// strings only on cell boundary
 1443 1f14 D1160000 		_ADR	OVER
 1444 1f18 71170000 		_ADR	PLUS
 1445 1f1c CD170000 		_ADR	ONEP
 1446 1f20 7B150000 		_DOLIT 	0xFFFFFFFC
 1446      FCFFFFFF 
 1447 1f28 F1160000 		_ADR	ANDD			// count mod cell
 1448 1f2c 7B150000 		_DOLIT 	0
 1448      00000000 
 1449 1f34 BD160000 		_ADR	SWAP
 1450 1f38 ED150000 		_ADR	STORE			// null fill cell
 1451 1f3c 41160000 		_ADR	RAT
 1452 1f40 E5180000 		_ADR	DDUP
 1453 1f44 0D160000 		_ADR	CSTOR
 1454 1f48 CD170000 		_ADR	ONEP			// save count
 1455 1f4c BD160000 		_ADR	SWAP
 1456 1f50 811E0000 		_ADR	CMOVE
 1457 1f54 2D160000 		_ADR	RFROM
 1458 1f58 03140000 		_UNNEST   			// move string
 1459              	
 1460              	/***********************************
 1461              	  Numeric output, single precision
 1462              	***********************************/
 1463              	
 1464              	/**************************
 1465              	    DIGIT	( u -- c )
 1466              	 	Convert digit u to 
 1467              		a character.
 1468              	***************************/
 1469 1f5c FE1E0000 		_HEADER DIGIT,5,"DIGIT"
 1469      05444947 
 1469      495400BF 
 1470 1f68 504700BF 		_NEST
 1471 1f6c 7B150000 		_DOLIT 9
 1471      09000000 
 1472 1f74 D1160000 		_ADR	OVER
 1473 1f78 91190000 		_ADR	LESS
 1474 1f7c 7B150000 		_DOLIT	7
 1474      07000000 
 1475 1f84 F1160000 		_ADR	ANDD
 1476 1f88 71170000 		_ADR	PLUS
 1477 1f8c 7B150000 		_DOLIT	'0'
 1477      30000000 
 1478 1f94 71170000 		_ADR	PLUS 
 1479 1f98 03140000 		_UNNEST
 1480              	
 1481              	/*********************************
 1482              	    EXTRACT	( n base -- n c )
 1483              	 	Extract the least significant
 1484              		digit from n.
 1485              	**********************************/
 1486 1f9c 601F0000 		_HEADER EXTRC,7,"EXTRACT"
 1486      07455854 
 1486      52414354 
 1487 1fa8 504700BF 		_NEST
 1488 1fac 7B150000 		_DOLIT 0
 1488      00000000 
ARM GAS  forth.s 			page 91


 1489 1fb4 BD160000 		_ADR	SWAP
 1490 1fb8 0D1C0000 		_ADR	UMMOD
 1491 1fbc BD160000 		_ADR	SWAP
 1492 1fc0 691F0000 		_ADR	DIGIT
 1493 1fc4 03140000 		_UNNEST
 1494              	
 1495              	/***************************
 1496              	    <#	  ( -- )
 1497              	 	Initiate the numeric
 1498              		output process.
 1499              	****************************/
 1500 1fc8 A01F0000 		_HEADER BDIGS,2,"<#"
 1500      023C2300 
 1501 1fd0 504700BF 		_NEST
 1502 1fd4 291E0000 		_ADR	PAD
 1503 1fd8 391B0000 		_ADR	HLD
 1504 1fdc ED150000 		_ADR	STORE
 1505 1fe0 03140000 		_UNNEST
 1506              	
 1507              	/*********************************
 1508              	    HOLD	( c -- )
 1509              	 	Insert a character into the 
 1510              		numeric output string.
 1511              	**********************************/
 1512 1fe4 CC1F0000 		_HEADER HOLD,4,"HOLD"
 1512      04484F4C 
 1512      440000BF 
 1513 1ff0 504700BF 		_NEST
 1514 1ff4 391B0000 		_ADR	HLD
 1515 1ff8 01160000 		_ADR	AT
 1516 1ffc DD170000 		_ADR	ONEM
 1517 2000 AD160000 		_ADR	DUPP
 1518 2004 391B0000 		_ADR	HLD
 1519 2008 ED150000 		_ADR	STORE
 1520 200c 0D160000 		_ADR	CSTOR
 1521 2010 03140000 		_UNNEST
 1522              	
 1523              	/***********************
 1524              	    #	   ( u -- u )
 1525              	 	Extract one digit 
 1526              		from u and append 
 1527              		the digit to output 
 1528              		string.
 1529              	*************************/
 1530 2014 E81F0000 		_HEADER DIG,1,"#"
 1530      012300BF 
 1531 201c 504700BF 		_NEST
 1532 2020 C91A0000 		_ADR	BASE
 1533 2024 01160000 		_ADR	AT
 1534 2028 A91F0000 		_ADR	EXTRC
 1535 202c F11F0000 		_ADR	HOLD
 1536 2030 03140000 		_UNNEST
 1537              	
 1538              	/***************************
 1539              	    #S	  ( u -- 0 )
 1540              	 	Convert u until all 
 1541              		digits are added to 
ARM GAS  forth.s 			page 92


 1542              		the output string.
 1543              	***************************/
 1544 2034 18200000 		_HEADER DIGS,2,"#S"
 1544      02235300 
 1545 203c 504700BF 		_NEST
 1546              	DIGS1:
 1547 2040 1D200000 	    _ADR	DIG
 1548 2044 AD160000 		_ADR	DUPP
 1549 2048 BB150000 		_QBRAN 	DIGS2
 1549      58200000 
 1550 2050 CF150000 		_BRAN	DIGS1
 1550      40200000 
 1551              	DIGS2:
 1552 2058 03140000 		  _UNNEST
 1553              	
 1554              	/*********************
 1555              	    SIGN	( n -- )
 1556              	 	Add a minus sign
 1557              		to the numeric
 1558              		output string.
 1559              	*********************/
 1560 205c 38200000 		_HEADER SIGN,4,"SIGN"
 1560      04534947 
 1560      4E0000BF 
 1561 2068 504700BF 		_NEST
 1562 206c E1160000 		_ADR	ZLESS
 1563 2070 BB150000 		_QBRAN	SIGN1
 1563      84200000 
 1564 2078 7B150000 		_DOLIT '-'
 1564      2D000000 
 1565 2080 F11F0000 		_ADR	HOLD
 1566              	SIGN1:
 1567 2084 03140000 		  _UNNEST
 1568              	
 1569              	/*************************
 1570              	    #>  ( w -- b u )
 1571              	 	Prepare the output 
 1572              		word to be TYPE'd.
 1573              	************************/
 1574 2088 60200000 		_HEADER EDIGS,2,"#>"
 1574      02233E00 
 1575 2090 504700BF 		_NEST
 1576 2094 9D160000 		_ADR	DROP
 1577 2098 391B0000 		_ADR	HLD
 1578 209c 01160000 		_ADR	AT
 1579 20a0 291E0000 		_ADR	PAD
 1580 20a4 D1160000 		_ADR	OVER
 1581 20a8 81170000 		_ADR	SUBB
 1582 20ac 03140000 		_UNNEST
 1583              	
 1584              	/**************************
 1585              	    str	 ( n -- b u )
 1586              	 	Convert a signed 
 1587              		integer to a numeric 
 1588              		string.
 1589              	hidden word used by compiler
 1590              	***************************/
ARM GAS  forth.s 			page 93


 1591              	STRR:
 1592 20b0 504700BF 		_NEST
 1593 20b4 AD160000 		_ADR	DUPP
 1594 20b8 55160000 		_ADR	TOR
 1595 20bc 39190000 		_ADR	ABSS
 1596 20c0 D11F0000 		_ADR	BDIGS
 1597 20c4 3D200000 		_ADR	DIGS
 1598 20c8 2D160000 		_ADR	RFROM
 1599 20cc 69200000 		_ADR	SIGN
 1600 20d0 91200000 		_ADR	EDIGS
 1601 20d4 03140000 		_UNNEST
 1602              	
 1603              	/*************************
 1604              	    HEX	 ( -- )
 1605              	 	Use radix 16 as 
 1606              		base for numeric 
 1607              		conversions.
 1608              	*************************/
 1609 20d8 8C200000 		_HEADER HEX,3,"HEX"
 1609      03484558 
 1610 20e0 504700BF 		_NEST
 1611 20e4 7B150000 		_DOLIT 16
 1611      10000000 
 1612 20ec C91A0000 		_ADR	BASE
 1613 20f0 ED150000 		_ADR	STORE
 1614 20f4 03140000 		_UNNEST
 1615              	
 1616              	/************************
 1617              	    DECIMAL	( -- )
 1618              	 	Use radix 10 as base
 1619              		for numeric conversions.
 1620              	*************************/
 1621 20f8 DC200000 		_HEADER DECIM,7,"DECIMAL"
 1621      07444543 
 1621      494D414C 
 1622 2104 504700BF 		_NEST
 1623 2108 7B150000 		_DOLIT 10
 1623      0A000000 
 1624 2110 C91A0000 		_ADR	BASE
 1625 2114 ED150000 		_ADR	STORE
 1626 2118 03140000 		_UNNEST
 1627              	
 1628              	/************************************
 1629              	  Numeric input, single precision
 1630              	***********************************/
 1631              	
 1632              	/***********************************
 1633              	    DIGIT?	( c base -- u t )
 1634              	 	Convert a character to its 
 1635              		numeric value. A flag 
 1636              		indicates success.
 1637              	**********************************/
 1638 211c FC200000 		_HEADER DIGTQ,6,"DIGIT?"
 1638      06444947 
 1638      49543F00 
 1639 2128 504700BF 		_NEST
 1640 212c 55160000 		_ADR	TOR
ARM GAS  forth.s 			page 94


 1641 2130 7B150000 		_DOLIT 	'0'
 1641      30000000 
 1642 2138 81170000 		_ADR	SUBB
 1643 213c 7B150000 		_DOLIT 9
 1643      09000000 
 1644 2144 D1160000 		_ADR	OVER
 1645 2148 91190000 		_ADR	LESS
 1646 214c BB150000 		_QBRAN	DGTQ1
 1646      74210000 
 1647 2154 7B150000 		_DOLIT 7
 1647      07000000 
 1648 215c 81170000 		_ADR	SUBB
 1649 2160 AD160000 		_ADR	DUPP
 1650 2164 7B150000 		_DOLIT	10
 1650      0A000000 
 1651 216c 91190000 		_ADR	LESS
 1652 2170 05170000 		_ADR	ORR
 1653              	DGTQ1:
 1654 2174 AD160000 		_ADR	DUPP
 1655 2178 2D160000 		_ADR	RFROM
 1656 217c 79190000 		_ADR	ULESS
 1657 2180 03140000 		_UNNEST
 1658              	
 1659              	/**********************************
 1660              	    NUMBER?	( a -- n T | a F )
 1661              	 	Convert a number word to 
 1662              		integer. Push a flag on tos.
 1663              	**********************************/
 1664 2184 20210000 		_HEADER NUMBQ,7,"NUMBER?"
 1664      074E554D 
 1664      4245523F 
 1665 2190 504700BF 		_NEST
 1666 2194 C91A0000 		_ADR	BASE
 1667 2198 01160000 		_ADR	AT
 1668 219c 55160000 		_ADR	TOR
 1669 21a0 7B150000 		_DOLIT	0
 1669      00000000 
 1670 21a8 D1160000 		_ADR	OVER
 1671 21ac 311A0000 		_ADR	COUNT
 1672 21b0 D1160000 		_ADR	OVER
 1673 21b4 21160000 		_ADR	CAT
 1674 21b8 7B150000 		_DOLIT '$'
 1674      24000000 
 1675 21c0 61190000 		_ADR	EQUAL
 1676 21c4 BB150000 		_QBRAN	NUMQ1
 1676      E0210000 
 1677 21cc E1200000 		_ADR	HEX
 1678 21d0 BD160000 		_ADR	SWAP
 1679 21d4 CD170000 		_ADR	ONEP
 1680 21d8 BD160000 		_ADR	SWAP
 1681 21dc DD170000 		_ADR	ONEM
 1682              	NUMQ1:
 1683 21e0 D1160000 		_ADR	OVER
 1684 21e4 21160000 		_ADR	CAT
 1685 21e8 7B150000 		_DOLIT	'-'
 1685      2D000000 
 1686 21f0 61190000 		_ADR	EQUAL
ARM GAS  forth.s 			page 95


 1687 21f4 55160000 		_ADR	TOR
 1688 21f8 BD160000 		_ADR	SWAP
 1689 21fc 41160000 		_ADR	RAT
 1690 2200 81170000 		_ADR	SUBB
 1691 2204 BD160000 		_ADR	SWAP
 1692 2208 41160000 		_ADR	RAT
 1693 220c 71170000 		_ADR	PLUS
 1694 2210 81180000 		_ADR	QDUP
 1695 2214 BB150000 		_QBRAN	NUMQ6
 1695      A8220000 
 1696 221c DD170000 		_ADR	ONEM
 1697 2220 55160000 		_ADR	TOR
 1698              	NUMQ2:
 1699 2224 AD160000 		_ADR	DUPP
 1700 2228 55160000 		_ADR	TOR
 1701 222c 21160000 		_ADR	CAT
 1702 2230 C91A0000 		_ADR	BASE
 1703 2234 01160000 		_ADR	AT
 1704 2238 29210000 		_ADR	DIGTQ
 1705 223c BB150000 		_QBRAN	NUMQ4
 1705      8C220000 
 1706 2244 BD160000 		_ADR	SWAP
 1707 2248 C91A0000 		_ADR	BASE
 1708 224c 01160000 		_ADR	AT
 1709 2250 91170000 		_ADR	STAR
 1710 2254 71170000 		_ADR	PLUS
 1711 2258 2D160000 		_ADR	RFROM
 1712 225c CD170000 		_ADR	ONEP
 1713 2260 9D150000 		_DONXT	NUMQ2
 1713      24220000 
 1714 2268 41160000 		_ADR	RAT
 1715 226c BD160000 		_ADR	SWAP
 1716 2270 9D160000 		_ADR	DROP
 1717 2274 BB150000 		_QBRAN	NUMQ3
 1717      80220000 
 1718 227c 29190000 		_ADR	NEGAT
 1719              	NUMQ3:
 1720 2280 BD160000 		_ADR	SWAP
 1721 2284 CF150000 		_BRAN	NUMQ5
 1721      A4220000 
 1722              	NUMQ4:
 1723 228c 2D160000 		_ADR	RFROM
 1724 2290 2D160000 		_ADR	RFROM
 1725 2294 BD180000 		_ADR	DDROP
 1726 2298 BD180000 		_ADR	DDROP
 1727 229c 7B150000 		_DOLIT	0
 1727      00000000 
 1728              	NUMQ5:
 1729 22a4 AD160000 		_ADR	DUPP
 1730              	NUMQ6:
 1731 22a8 2D160000 		_ADR	RFROM
 1732 22ac BD180000 		_ADR	DDROP
 1733 22b0 2D160000 		_ADR	RFROM
 1734 22b4 C91A0000 		_ADR	BASE
 1735 22b8 ED150000 		_ADR	STORE
 1736 22bc 03140000 		_UNNEST
 1737              	
ARM GAS  forth.s 			page 96


 1738              	/********************
 1739              	  console I/O
 1740              	********************/
 1741              	
 1742              	/**********************
 1743              	    SPACE	( -- )
 1744              	 	Send the blank 
 1745              		character to 
 1746              		the output device.
 1747              	************************/
 1748 22c0 88210000 		_HEADER SPACE,5,"SPACE"
 1748      05535041 
 1748      434500BF 
 1749 22cc 504700BF 		_NEST
 1750 22d0 2D180000 		_ADR	BLANK
 1751 22d4 85140000 		_ADR	EMIT
 1752 22d8 03140000 		_UNNEST
 1753              	
 1754              	/***************************
 1755              	    SPACES	( +n -- )
 1756              	 	Send n spaces to the 
 1757              		output device.
 1758              	****************************/
 1759 22dc C4220000 		_HEADER SPACS,6,"SPACES"
 1759      06535041 
 1759      43455300 
 1760 22e8 504700BF 		_NEST
 1761 22ec 7B150000 		_DOLIT	0
 1761      00000000 
 1762 22f4 C1190000 		_ADR	MAX
 1763 22f8 55160000 		_ADR	TOR
 1764 22fc CF150000 		_BRAN	CHAR2
 1764      08230000 
 1765              	CHAR1:
 1766 2304 CD220000 		_ADR	SPACE
 1767              	CHAR2:
 1768 2308 9D150000 		_DONXT	CHAR1
 1768      04230000 
 1769 2310 03140000 		_UNNEST
 1770              	
 1771              	/***********************
 1772              	    TYPE	( b u -- )
 1773              	 	Output u characters 
 1774              		from b.
 1775              	************************/
 1776 2314 E0220000 		_HEADER TYPEE,4,"TYPE"
 1776      04545950 
 1776      450000BF 
 1777 2320 504700BF 		_NEST
 1778 2324 55160000 		_ADR  TOR   // ( a+1 -- R: u )
 1779 2328 CF150000 		_BRAN	TYPE2
 1779      3C230000 
 1780              	TYPE1:  
 1781 2330 311A0000 		_ADR  COUNT
 1782 2334 791D0000 		_ADR TCHAR
 1783 2338 85140000 		_ADR EMIT
 1784              	TYPE2:  
ARM GAS  forth.s 			page 97


 1785 233c 9D150000 		_DONXT	TYPE1
 1785      30230000 
 1786 2344 9D160000 		_ADR	DROP
 1787 2348 03140000 		_UNNEST
 1788              	
 1789              	/***************************
 1790              	    CR	  ( -- )
 1791              	 	Output a carriage return
 1792              		and a line feed.
 1793              	****************************/
 1794 234c 18230000 		_HEADER CR,2,"CR"
 1794      02435200 
 1795 2354 504700BF 		_NEST
 1796 2358 7B150000 		_DOLIT	CRR
 1796      0D000000 
 1797 2360 85140000 		_ADR	EMIT
 1798 2364 7B150000 		_DOLIT	LF
 1798      0A000000 
 1799 236c 85140000 		_ADR	EMIT
 1800 2370 03140000 		_UNNEST
 1801              	
 1802              	/******************************************
 1803              	  do_$	( -- a )
 1804              	  Return the address of a compiled string.
 1805              	  adjust return address to skip over it.
 1806              	hidden word used by compiler. 
 1807              	******************************************/
 1808              	DOSTR:
 1809 2374 504700BF 		_NEST     
 1810              	/* compiled string address is 2 levels deep */
 1811 2378 2D160000 		_ADR	RFROM	// { -- a1 }
 1812 237c 2D160000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1813 2380 AD160000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1814 2384 311A0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1815 2388 71170000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1816 238c 5D1D0000 		_ADR	ALGND	//  end of string
 1817              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1818 2390 55160000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1819 2394 BD160000 		_ADR	SWAP	//  count tugged
 1820 2398 55160000 		_ADR	TOR     //  ( -- a2) is string address
 1821 239c 03140000 		_UNNEST
 1822              	
 1823              	/******************************************
 1824              	    $"|	( -- a )
 1825              	 	Run time routine compiled by _". 
 1826              		Return address of a compiled string.
 1827              	hidden word used by compiler
 1828              	*****************************************/
 1829              	STRQP:
 1830 23a0 504700BF 		_NEST
 1831 23a4 75230000 		_ADR	DOSTR
 1832 23a8 03140000 		_UNNEST			// force a call to dostr
 1833              	
 1834              	/*******************************
 1835              	    .$	( a -- )
 1836              	 	Run time routine of ." 
 1837              		Output a compiled string.
ARM GAS  forth.s 			page 98


 1838              	hidden word used by compiler
 1839              	*******************************/
 1840              	DOTST:
 1841 23ac 504700BF 		_NEST
 1842 23b0 311A0000 		_ADR	COUNT // ( -- a+1 c )
 1843 23b4 21230000 		_ADR	TYPEE
 1844 23b8 03140000 		_UNNEST
 1845              	
 1846              	/**********************
 1847              	    ."|	( -- )
 1848              	 	Run time routine of ." 
 1849              		Output a compiled string.
 1850              	hidden word used by compiler
 1851              	*****************************/
 1852              	DOTQP:
 1853 23bc 504700BF 		_NEST
 1854 23c0 75230000 		_ADR	DOSTR
 1855 23c4 AD230000 		_ADR	DOTST
 1856 23c8 03140000 		_UNNEST
 1857              	
 1858              	/******************************
 1859              	    .R	  ( n +n -- )
 1860              	 	Display an integer in a 
 1861              		field of n columns, 
 1862              		right justified.
 1863              	*******************************/
 1864 23cc 50230000 		_HEADER DOTR,2,".R"
 1864      022E5200 
 1865 23d4 504700BF 		_NEST
 1866 23d8 55160000 		_ADR	TOR
 1867 23dc B1200000 		_ADR	STRR
 1868 23e0 2D160000 		_ADR	RFROM
 1869 23e4 D1160000 		_ADR	OVER
 1870 23e8 81170000 		_ADR	SUBB
 1871 23ec E9220000 		_ADR	SPACS
 1872 23f0 21230000 		_ADR	TYPEE
 1873 23f4 03140000 		_UNNEST
 1874              	
 1875              	/*************************
 1876              	    U.R	 ( u +n -- )
 1877              	 	Display an unsigned 
 1878              		integer in n column, 
 1879              		right justified.
 1880              	***************************/
 1881 23f8 D0230000 		_HEADER UDOTR,3,"U.R"
 1881      03552E52 
 1882 2400 504700BF 		_NEST
 1883 2404 55160000 		_ADR	TOR
 1884 2408 D11F0000 		_ADR	BDIGS
 1885 240c 3D200000 		_ADR	DIGS
 1886 2410 91200000 		_ADR	EDIGS
 1887 2414 2D160000 		_ADR	RFROM
 1888 2418 D1160000 		_ADR	OVER
 1889 241c 81170000 		_ADR	SUBB
 1890 2420 E9220000 		_ADR	SPACS
 1891 2424 21230000 		_ADR	TYPEE
 1892 2428 03140000 		_UNNEST
ARM GAS  forth.s 			page 99


 1893              	
 1894              	/************************
 1895              	    U.	  ( u -- )
 1896              	 	Display an unsigned 
 1897              		integer in free format.
 1898              	***************************/
 1899 242c FC230000 		_HEADER UDOT,2,"U."
 1899      02552E00 
 1900 2434 504700BF 		_NEST
 1901 2438 D11F0000 		_ADR	BDIGS
 1902 243c 3D200000 		_ADR	DIGS
 1903 2440 91200000 		_ADR	EDIGS
 1904 2444 CD220000 		_ADR	SPACE
 1905 2448 21230000 		_ADR	TYPEE
 1906 244c 03140000 		_UNNEST
 1907              	
 1908              	/************************
 1909              	    .	   ( w -- )
 1910              	 	Display an integer 
 1911              		in free format, 
 1912              		preceeded by a space.
 1913              	**************************/
 1914 2450 30240000 		_HEADER DOT,1,"."
 1914      012E00BF 
 1915 2458 504700BF 		_NEST
 1916 245c C91A0000 		_ADR	BASE
 1917 2460 01160000 		_ADR	AT
 1918 2464 7B150000 		_DOLIT 10
 1918      0A000000 
 1919 246c 19170000 		_ADR	XORR			// ?decimal
 1920 2470 BB150000 		_QBRAN	DOT1
 1920      80240000 
 1921 2478 35240000 		_ADR	UDOT
 1922 247c 03140000 		_UNNEST			// no,display unsigned
 1923              	DOT1:
 1924 2480 B1200000 	    _ADR	STRR
 1925 2484 CD220000 		_ADR	SPACE
 1926 2488 21230000 		_ADR	TYPEE
 1927 248c 03140000 		_UNNEST			// yes, display signed
 1928              	
 1929              	/***********************
 1930              	    ?	   ( a -- )
 1931              	 	Display the contents
 1932              		in a memory cell.
 1933              	*************************/
 1934 2490 54240000 		_HEADER QUEST,1,"?"
 1934      013F00BF 
 1935 2498 504700BF 		_NEST
 1936 249c 01160000 		_ADR	AT
 1937 24a0 59240000 		_ADR	DOT
 1938 24a4 03140000 		_UNNEST
 1939              	
 1940              	/**************
 1941              	  Parsing
 1942              	***************/
 1943              	
 1944              	/*********************************************
ARM GAS  forth.s 			page 100


 1945              	    parse	( b u c -- b u delta //  string> )
 1946              	 	Scan word delimited by c. 
 1947              		Return found string and its offset.
 1948              	hidden word used by PARSE
 1949              	**********************************************/
 1950              	PARS:
 1951 24a8 504700BF 		_NEST
 1952 24ac D31A0000 		_ADR	TEMP
 1953 24b0 ED150000 		_ADR	STORE
 1954 24b4 D1160000 		_ADR	OVER
 1955 24b8 55160000 		_ADR	TOR
 1956 24bc AD160000 		_ADR	DUPP
 1957 24c0 BB150000 		_QBRAN	PARS8
 1957      BC250000 
 1958 24c8 DD170000 		_ADR	ONEM
 1959 24cc D31A0000 		_ADR	TEMP
 1960 24d0 01160000 		_ADR	AT
 1961 24d4 2D180000 		_ADR	BLANK
 1962 24d8 61190000 		_ADR	EQUAL
 1963 24dc BB150000 		_QBRAN	PARS3
 1963      30250000 
 1964 24e4 55160000 		_ADR	TOR
 1965              	PARS1:
 1966 24e8 2D180000 		_ADR	BLANK
 1967 24ec D1160000 		_ADR	OVER
 1968 24f0 21160000 		_ADR	CAT			// skip leading blanks 
 1969 24f4 81170000 		_ADR	SUBB
 1970 24f8 E1160000 		_ADR	ZLESS
 1971 24fc 15190000 		_ADR	INVER
 1972 2500 BB150000 		_QBRAN	PARS2
 1972      2C250000 
 1973 2508 CD170000 		_ADR	ONEP
 1974 250c 9D150000 		_DONXT	PARS1
 1974      E8240000 
 1975 2514 2D160000 		_ADR	RFROM
 1976 2518 9D160000 		_ADR	DROP
 1977 251c 7B150000 		_DOLIT	0
 1977      00000000 
 1978 2524 AD160000 		_ADR	DUPP
 1979 2528 03140000 		_UNNEST
 1980              	PARS2:
 1981 252c 2D160000 		_ADR	RFROM
 1982              	PARS3:
 1983 2530 D1160000 		_ADR	OVER
 1984 2534 BD160000 		_ADR	SWAP
 1985 2538 55160000 		_ADR	TOR
 1986              	PARS4:
 1987 253c D31A0000 		_ADR	TEMP
 1988 2540 01160000 		_ADR	AT
 1989 2544 D1160000 		_ADR	OVER
 1990 2548 21160000 		_ADR	CAT
 1991 254c 81170000 		_ADR	SUBB			// scan for delimiter
 1992 2550 D31A0000 		_ADR	TEMP
 1993 2554 01160000 		_ADR	AT
 1994 2558 2D180000 		_ADR	BLANK
 1995 255c 61190000 		_ADR	EQUAL
 1996 2560 BB150000 		_QBRAN	PARS5
ARM GAS  forth.s 			page 101


 1996      6C250000 
 1997 2568 E1160000 		_ADR	ZLESS
 1998              	PARS5:
 1999 256c BB150000 		_QBRAN	PARS6
 1999      90250000 
 2000 2574 CD170000 		_ADR	ONEP
 2001 2578 9D150000 		_DONXT	PARS4
 2001      3C250000 
 2002 2580 AD160000 		_ADR	DUPP
 2003 2584 55160000 		_ADR	TOR
 2004 2588 CF150000 		_BRAN	PARS7
 2004      A4250000 
 2005              	PARS6:
 2006 2590 2D160000 		_ADR	RFROM
 2007 2594 9D160000 		_ADR	DROP
 2008 2598 AD160000 		_ADR	DUPP
 2009 259c CD170000 		_ADR	ONEP
 2010 25a0 55160000 		_ADR	TOR
 2011              	PARS7:
 2012 25a4 D1160000 		_ADR	OVER
 2013 25a8 81170000 		_ADR	SUBB
 2014 25ac 2D160000 		_ADR	RFROM
 2015 25b0 2D160000 		_ADR	RFROM
 2016 25b4 81170000 		_ADR	SUBB
 2017 25b8 03140000 		_UNNEST
 2018              	PARS8:
 2019 25bc D1160000 		_ADR	OVER
 2020 25c0 2D160000 		_ADR	RFROM
 2021 25c4 81170000 		_ADR	SUBB
 2022 25c8 03140000 		_UNNEST
 2023              	
 2024              	/************************************
 2025              	    PARSE	( c -- b u //  string> )
 2026              	 	Scan input stream and return 
 2027              		counted string delimited by c.
 2028              	************************************/
 2029 25cc 94240000 		_HEADER PARSE,5,"PARSE"
 2029      05504152 
 2029      534500BF 
 2030 25d8 504700BF 		_NEST
 2031 25dc 55160000 		_ADR	TOR
 2032 25e0 491E0000 		_ADR	TIB
 2033 25e4 FD1A0000 		_ADR	INN
 2034 25e8 01160000 		_ADR	AT
 2035 25ec 71170000 		_ADR	PLUS			// current input buffer pointer
 2036 25f0 111B0000 		_ADR	NTIB
 2037 25f4 01160000 		_ADR	AT
 2038 25f8 FD1A0000 		_ADR	INN
 2039 25fc 01160000 		_ADR	AT
 2040 2600 81170000 		_ADR	SUBB			// remaining count
 2041 2604 2D160000 		_ADR	RFROM
 2042 2608 A9240000 		_ADR	PARS
 2043 260c FD1A0000 		_ADR	INN
 2044 2610 E9190000 		_ADR	PSTOR
 2045 2614 03140000 		_UNNEST
 2046              	
 2047              	/*******************************
ARM GAS  forth.s 			page 102


 2048              	    .(	  ( -- )
 2049              	 	Output following string 
 2050              		up to next ) .
 2051              	******************************/
 2052 2618 D0250000 		_HEADER DOTPR,2,".("
 2052      022E2800 
 2053 2620 504700BF 		_NEST
 2054 2624 7B150000 		_DOLIT	')'
 2054      29000000 
 2055 262c D9250000 		_ADR	PARSE
 2056 2630 21230000 		_ADR	TYPEE
 2057 2634 03140000 		_UNNEST
 2058              	
 2059              	/************************
 2060              	    (	   ( -- )
 2061              	 	Ignore following 
 2062              		string up to next )
 2063              		A comment.
 2064              	************************/
 2065 2638 1C260000 		_HEADER PAREN,1,"("
 2065      012800BF 
 2066 2640 504700BF 		_NEST
 2067 2644 7B150000 		_DOLIT	')'
 2067      29000000 
 2068 264c D9250000 		_ADR	PARSE
 2069 2650 BD180000 		_ADR	DDROP
 2070 2654 03140000 		_UNNEST
 2071              	
 2072              	/*******************
 2073              	    \	   ( -- )
 2074              	 	Ignore following 
 2075              		text till the 
 2076              		end of line.
 2077              	********************/
 2078 2658 3C260000 		_HEADER BKSLA,1,"\\"
 2078      015C00BF 
 2079 2660 504700BF 		_NEST
 2080 2664 111B0000 		_ADR	NTIB
 2081 2668 01160000 		_ADR	AT
 2082 266c FD1A0000 		_ADR	INN
 2083 2670 ED150000 		_ADR	STORE
 2084 2674 03140000 		_UNNEST
 2085              	
 2086              	/******************************
 2087              	    CHAR	( -- c )
 2088              	 	Parse next word and
 2089              		return its first character.
 2090              	*******************************/
 2091 2678 5C260000 		_HEADER CHAR,4,"CHAR"
 2091      04434841 
 2091      520000BF 
 2092 2684 504700BF 		_NEST
 2093 2688 2D180000 		_ADR	BLANK
 2094 268c D9250000 		_ADR	PARSE
 2095 2690 9D160000 		_ADR	DROP
 2096 2694 21160000 		_ADR	CAT
 2097 2698 03140000 		_UNNEST
ARM GAS  forth.s 			page 103


 2098              	
 2099              	/**********************************
 2100              	    WORD	( c -- a //  string> )
 2101              	 	Parse a word from input stream
 2102              		and copy it to code dictionary.
 2103              	***********************************/
 2104 269c 7C260000 		_HEADER WORDD,4,"WORD"
 2104      04574F52 
 2104      440000BF 
 2105 26a8 504700BF 		_NEST
 2106 26ac D9250000 		_ADR	PARSE
 2107 26b0 111E0000 		_ADR	HERE
 2108 26b4 0D180000 		_ADR	CELLP
 2109 26b8 051F0000 		_ADR	PACKS
 2110 26bc 03140000 		_UNNEST
 2111              	
 2112              	/********************************
 2113              	    TOKEN	( -- a //  string> )
 2114              	 	Parse a word from input 
 2115              		stream and copy it to 
 2116              		name dictionary.
 2117              	*********************************/
 2118 26c0 A0260000 		_HEADER TOKEN,5,"TOKEN"
 2118      05544F4B 
 2118      454E00BF 
 2119 26cc 504700BF 		_NEST
 2120 26d0 2D180000 		_ADR	BLANK
 2121 26d4 A9260000 		_ADR	WORDD
 2122 26d8 03140000 		_UNNEST
 2123              	
 2124              	/**********************
 2125              	  Dictionary search
 2126              	***********************/
 2127              	
 2128              	/*************************
 2129              	    NAME>	( na -- ca )
 2130              	 	Return a code address
 2131              		given a name address.
 2132              	**************************/
 2133 26dc C4260000 		_HEADER NAMET,5,"NAME>"
 2133      054E414D 
 2133      453E00BF 
 2134 26e8 504700BF 		_NEST
 2135 26ec 311A0000 		_ADR	COUNT
 2136 26f0 7B150000 		_DOLIT	0x1F
 2136      1F000000 
 2137 26f8 F1160000 		_ADR	ANDD
 2138 26fc 71170000 		_ADR	PLUS
 2139 2700 5D1D0000 		_ADR	ALGND
 2140 2704 03140000 		_UNNEST
 2141              	
 2142              	/***************************************
 2143              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2144              	 	Compare u bytes in two strings. 
 2145              		Return 0 if identical.
 2146              	
 2147              	  Picatout 2020-12-01, 
ARM GAS  forth.s 			page 104


 2148              	    Because of problem with .align 
 2149              		directive that doesn't fill 
 2150              		with zero's I had to change 
 2151              		the "SAME?" and "FIND" 
 2152              	 	words  to do a byte by byte comparison. 
 2153              	****************************************/
 2154 2708 E0260000 		_HEADER SAMEQ,5,"SAME?"
 2154      0553414D 
 2154      453F00BF 
 2155 2714 504700BF 		_NEST
 2156 2718 55160000 		_ADR	TOR
 2157 271c CF150000 		_BRAN	SAME2
 2157      60270000 
 2158              	SAME1:
 2159 2724 D1160000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2160 2728 41160000 		_ADR	RAT   // a1 a2 a1 u 
 2161 272c 71170000 		_ADR	PLUS  // a1 a2 a1+u 
 2162 2730 21160000 		_ADR	CAT	   // a1 a2 c1    		
 2163 2734 D1160000 		_ADR	OVER  // a1 a2 c1 a2 
 2164 2738 41160000 		_ADR	RAT    
 2165 273c 71170000 		_ADR	PLUS    
 2166 2740 21160000 		_ADR	CAT	  // a1 a2 c1 c2
 2167 2744 81170000 		_ADR	SUBB  
 2168 2748 81180000 		_ADR	QDUP
 2169 274c BB150000 		_QBRAN	SAME2
 2169      60270000 
 2170 2754 2D160000 		_ADR	RFROM
 2171 2758 9D160000 		_ADR	DROP
 2172 275c 03140000 		_UNNEST	// strings not equal
 2173              	SAME2:
 2174 2760 9D150000 		_DONXT	SAME1
 2174      24270000 
 2175 2768 7B150000 		_DOLIT	0
 2175      00000000 
 2176 2770 03140000 		_UNNEST	// strings equal
 2177              	
 2178              	/***********************************
 2179              	    FIND	( a na -- ca na | a F )
 2180              	 	Search a vocabulary for a string.
 2181              		Return ca and na if succeeded.
 2182              	hidden word used by NAME?
 2183              	
 2184              	  Picatout 2020-12-01,  
 2185              		 Modified from original. 
 2186              	   See comment for word "SAME?" 
 2187              	************************************/
 2188              	FIND:
 2189 2774 504700BF 		_NEST
 2190 2778 BD160000 		_ADR	SWAP			// na a	
 2191 277c 311A0000 		_ADR	COUNT			// na a+1 count
 2192 2780 AD160000 		_ADR	DUPP 
 2193 2784 D31A0000 		_ADR	TEMP
 2194 2788 ED150000 		_ADR	STORE			// na a+1 count 
 2195 278c 55160000 		_ADR  TOR		// na a+1  R: count  
 2196 2790 BD160000 		_ADR	SWAP			// a+1 na
 2197              	FIND1:
 2198 2794 AD160000 		_ADR	DUPP			// a+1 na na
ARM GAS  forth.s 			page 105


 2199 2798 BB150000 		_QBRAN	FIND6	// end of vocabulary
 2199      EC270000 
 2200 27a0 AD160000 		_ADR	DUPP			// a+1 na na
 2201 27a4 21160000 		_ADR	CAT			// a+1 na name1
 2202 27a8 7B150000 		_DOLIT	MASKK
 2202      1FFFFFFF 
 2203 27b0 F1160000 		_ADR	ANDD
 2204 27b4 41160000 		_ADR	RAT			// a+1 na name1 count 
 2205 27b8 19170000 		_ADR	XORR			// a+1 na,  same length?
 2206 27bc BB150000 		_QBRAN	FIND2
 2206      D4270000 
 2207 27c4 1D180000 		_ADR	CELLM			// a+1 la
 2208 27c8 01160000 		_ADR	AT			// a+1 next_na
 2209 27cc CF150000 		_BRAN	FIND1			// try next word
 2209      94270000 
 2210              	FIND2:   
 2211 27d4 CD170000 		_ADR	ONEP			// a+1 na+1
 2212 27d8 D31A0000 		_ADR	TEMP
 2213 27dc 01160000 		_ADR	AT			// a+1 na+1 count
 2214 27e0 15270000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2215              	FIND3:	
 2216 27e4 CF150000 		_BRAN	FIND4
 2216      04280000 
 2217              	FIND6:	
 2218 27ec 2D160000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2219 27f0 9D160000 		_ADR	DROP			// a+1 0
 2220 27f4 BD160000 		_ADR	SWAP			// 0 a+1
 2221 27f8 DD170000 		_ADR	ONEM			// 0 a
 2222 27fc BD160000 		_ADR	SWAP			// a 0 
 2223 2800 03140000 		_UNNEST			// return without a match
 2224              	FIND4:	
 2225 2804 BB150000 		_QBRAN	FIND5			// a+1 na+1
 2225      20280000 
 2226 280c DD170000 		_ADR	ONEM			// a+1 na
 2227 2810 1D180000 		_ADR	CELLM			// a+4 la
 2228 2814 01160000 		_ADR	AT			// a+1 next_na
 2229 2818 CF150000 		_BRAN	FIND1			// compare next name
 2229      94270000 
 2230              	FIND5:	
 2231 2820 2D160000 		_ADR	RFROM			// a+1 na+1 count
 2232 2824 9D160000 		_ADR	DROP			// a+1 na+1
 2233 2828 BD160000 		_ADR	SWAP			// na+1 a+1
 2234 282c 9D160000 		_ADR	DROP			// na+1
 2235 2830 DD170000 		_ADR	ONEM			// na
 2236 2834 AD160000 		_ADR	DUPP			// na na
 2237 2838 E9260000 		_ADR	NAMET			// na ca
 2238 283c BD160000 		_ADR	SWAP			// ca na
 2239 2840 03140000 		_UNNEST			//  return with a match
 2240              	
 2241              	/********************************
 2242              	    NAME?	( a -- ca na | a F )
 2243              	 	Search all context vocabularies 
 2244              		for a string.
 2245              	***********************************/
 2246 2844 0C270000 		_HEADER NAMEQ,5,"NAME?"
 2246      054E414D 
 2246      453F00BF 
ARM GAS  forth.s 			page 106


 2247 2850 504700BF 		_NEST
 2248 2854 511B0000 		_ADR	CNTXT
 2249 2858 01160000 		_ADR	AT
 2250 285c 75270000 		_ADR	FIND
 2251 2860 03140000 		_UNNEST
 2252              	
 2253              	/********************
 2254              	  console input
 2255              	********************/
 2256              	
 2257              	/**************************************
 2258              	   BKSP  ( bot eot cur -- bot eot cur )
 2259              	   Move cursor left by one character.
 2260              	hidden word used by KTAP
 2261              	***************************************/
 2262              	BKSP:
 2263 2864 504700BF 		_NEST
 2264 2868 55160000 		_ADR	TOR
 2265 286c D1160000 		_ADR	OVER
 2266 2870 2D160000 		_ADR	RFROM
 2267 2874 BD160000 		_ADR	SWAP
 2268 2878 D1160000 		_ADR	OVER
 2269 287c 19170000 		_ADR	XORR
 2270 2880 BB150000 		_QBRAN	BACK1
 2270      AC280000 
 2271 2888 7B150000 		_DOLIT	BKSPP
 2271      08000000 
 2272 2890 85140000 		_ADR	TECHO
 2273 2894 DD170000 		_ADR	ONEM
 2274 2898 2D180000 		_ADR	BLANK
 2275 289c 85140000 		_ADR	TECHO
 2276 28a0 7B150000 		_DOLIT	BKSPP
 2276      08000000 
 2277 28a8 85140000 		_ADR	TECHO
 2278              	BACK1:
 2279 28ac 03140000 		  _UNNEST
 2280              	
 2281              	/****************************************
 2282              	   TAP	 ( bot eot cur c -- bot eot cur )
 2283              	   Accept and echo the key stroke 
 2284              	   and bump the cursor.
 2285              	hidden word used by KTAP 
 2286              	****************************************/
 2287              	TAP:
 2288 28b0 504700BF 		_NEST
 2289 28b4 AD160000 		_ADR	DUPP
 2290 28b8 85140000 		_ADR	TECHO
 2291 28bc D1160000 		_ADR	OVER
 2292 28c0 0D160000 		_ADR	CSTOR
 2293 28c4 CD170000 		_ADR	ONEP
 2294 28c8 03140000 		_UNNEST
 2295              	
 2296              	/*******************************************
 2297              	    kTAP	( bot eot cur c -- bot eot cur )
 2298              	 	Process a key stroke, CR or backspace.
 2299              	hidden word used by ACCEPT 
 2300              	*******************************************/
ARM GAS  forth.s 			page 107


 2301              	KTAP:
 2302              	TTAP:
 2303 28cc 504700BF 		_NEST
 2304 28d0 AD160000 		_ADR	DUPP
 2305 28d4 7B150000 		_DOLIT	CRR
 2305      0D000000 
 2306 28dc 19170000 		_ADR	XORR
 2307 28e0 BB150000 		_QBRAN  KTAP2
 2307      10290000 
 2308 28e8 7B150000 		_DOLIT	BKSPP
 2308      08000000 
 2309 28f0 19170000 		_ADR	XORR
 2310 28f4 BB150000 		_QBRAN	KTAP1
 2310      08290000 
 2311 28fc 2D180000 		_ADR	BLANK
 2312 2900 B1280000 		_ADR	TAP
 2313 2904 03140000 		_UNNEST
 2314              	//	.word	0			// patch
 2315              	KTAP1:
 2316 2908 65280000 		_ADR	BKSP
 2317 290c 03140000 		_UNNEST
 2318              	KTAP2:
 2319 2910 9D160000 		_ADR	DROP
 2320 2914 BD160000 		_ADR	SWAP
 2321 2918 9D160000 		_ADR	DROP
 2322 291c AD160000 		_ADR	DUPP
 2323 2920 03140000 		_UNNEST
 2324              	
 2325              	/************************************
 2326              	    ACCEPT	( b u -- b u )
 2327              	 	Accept characters to input 
 2328              		buffer. Return with actual count.
 2329              	*************************************/
 2330 2924 48280000 		_HEADER ACCEP,6,"ACCEPT"
 2330      06414343 
 2330      45505400 
 2331 2930 504700BF 		_NEST
 2332 2934 D1160000 		_ADR	OVER
 2333 2938 71170000 		_ADR	PLUS
 2334 293c D1160000 		_ADR	OVER
 2335              	ACCP1:
 2336 2940 E5180000 		_ADR	DDUP
 2337 2944 19170000 		_ADR	XORR
 2338 2948 BB150000 		_QBRAN	ACCP4
 2338      88290000 
 2339 2950 61140000 		_ADR	KEY
 2340 2954 AD160000 		_ADR	DUPP
 2341 2958 2D180000 		_ADR	BLANK
 2342 295c 7B150000 		_DOLIT 127
 2342      7F000000 
 2343 2964 E11B0000 		_ADR	WITHI
 2344 2968 BB150000 		_QBRAN	ACCP2
 2344      7C290000 
 2345 2970 B1280000 		_ADR	TAP
 2346 2974 CF150000 		_BRAN	ACCP3
 2346      80290000 
 2347              	ACCP2:
ARM GAS  forth.s 			page 108


 2348 297c CD280000 		_ADR	KTAP
 2349              	ACCP3:	  
 2350 2980 CF150000 		_BRAN	ACCP1
 2350      40290000 
 2351              	ACCP4:
 2352 2988 9D160000 		_ADR	DROP
 2353 298c D1160000 		_ADR	OVER
 2354 2990 81170000 		_ADR	SUBB
 2355 2994 03140000 		_UNNEST
 2356              	
 2357              	/*****************************
 2358              	    QUERY	( -- )
 2359              	 	Accept input stream 
 2360              		to terminal input buffer.
 2361              	******************************/
 2362 2998 28290000 		_HEADER QUERY,5,"QUERY"
 2362      05515545 
 2362      525900BF 
 2363 29a4 504700BF 		_NEST
 2364 29a8 491E0000 		_ADR	TIB
 2365 29ac 7B150000 		_DOLIT 80
 2365      50000000 
 2366 29b4 31290000 		_ADR	ACCEP
 2367 29b8 111B0000 		_ADR	NTIB
 2368 29bc ED150000 		_ADR	STORE
 2369 29c0 9D160000 		_ADR	DROP
 2370 29c4 7B150000 		_DOLIT	0
 2370      00000000 
 2371 29cc FD1A0000 		_ADR	INN
 2372 29d0 ED150000 		_ADR	STORE
 2373 29d4 03140000 		_UNNEST
 2374              	
 2375              	/********************
 2376              	  Error handling
 2377              	********************/
 2378              	
 2379              	/*********************
 2380              	    ABORT	( a -- )
 2381              	 	Reset data stack 
 2382              		and jump to QUIT.
 2383              	**********************/
 2384 29d8 9C290000 		_HEADER ABORT,5,"ABORT"
 2384      0541424F 
 2384      525400BF 
 2385 29e4 504700BF 		_NEST
 2386              	ABORT1:
 2387 29e8 CD220000 		_ADR	SPACE
 2388 29ec 311A0000 		_ADR	COUNT
 2389 29f0 21230000 		_ADR	TYPEE
 2390 29f4 7B150000 		_DOLIT	0X3F
 2390      3F000000 
 2391 29fc 85140000 		_ADR	EMIT
 2392 2a00 55230000 		_ADR	CR
 2393 2a04 6D2B0000 		_ADR	PRESE
 2394 2a08 CF150000 		_BRAN	QUIT
 2394      8C2B0000 
 2395              	
ARM GAS  forth.s 			page 109


 2396              	/*******************************
 2397              	    _abort"	( f -- )
 2398              	 	Run time routine of ABORT"
 2399              		Abort with a message.
 2400              	hidden used by compiler 
 2401              	********************************/
 2402              	ABORQ:
 2403 2a10 504700BF 		_NEST
 2404 2a14 75230000 		_ADR	DOSTR
 2405 2a18 BD160000 		_ADR	SWAP 
 2406 2a1c BB150000 		_QBRAN	1f	// text flag
 2406      2C2A0000 
 2407 2a24 CF150000 		_BRAN	ABORT1
 2407      E8290000 
 2408              	1:
 2409 2a2c 9D160000 		_ADR	DROP
 2410 2a30 03140000 		_UNNEST			// drop error
 2411              	
 2412              	/************************
 2413              	  The text interpreter
 2414              	************************/
 2415              	
 2416              	/***************************
 2417              	    $INTERPRET  ( a -- )
 2418              	 	Interpret a word. 
 2419              		If failed, try to 
 2420              		convert it to an integer.
 2421              	******************************/
 2422 2a34 DC290000 		_HEADER INTER,10,"$INTERPRET"
 2422      0A24494E 
 2422      54455250 
 2422      52455400 
 2423 2a44 504700BF 		_NEST
 2424 2a48 51280000 		_ADR	NAMEQ
 2425 2a4c 81180000 		_ADR	QDUP	// ?defined
 2426 2a50 BB150000 		_QBRAN	INTE1
 2426      842A0000 
 2427 2a58 01160000 		_ADR	AT
 2428 2a5c 7B150000 		_DOLIT	COMPO
 2428      40000000 
 2429 2a64 F1160000 		_ADR	ANDD	// ?compile only lexicon bits
 2430 2a68 112A0000 		_ABORQ	13," compile only"
 2430      0D20636F 
 2430      6D70696C 
 2430      65206F6E 
 2430      6C7900BF 
 2431 2a7c 91150000 		_ADR	EXECU
 2432 2a80 03140000 		_UNNEST			// execute defined word
 2433              	INTE1:
 2434 2a84 91210000 		_ADR	NUMBQ
 2435 2a88 BB150000 		_QBRAN	INTE2
 2435      942A0000 
 2436 2a90 03140000 		_UNNEST
 2437              	INTE2:
 2438 2a94 E5290000 		_ADR	ABORT	// error
 2439              	
 2440              	/******************************
ARM GAS  forth.s 			page 110


 2441              	    [	   ( -- )
 2442              	 	Start the text interpreter.
 2443              	*******************************/
 2444 2a98 382A0000 		_HEADER LBRAC,1,"["
 2444      015B00BF 
 2445 2aa0 504700BF 		_NEST
 2446 2aa4 7B150000 		_DOLIT	INTER
 2446      442A0000 
 2447 2aac 251B0000 		_ADR	TEVAL
 2448 2ab0 ED150000 		_ADR	STORE
 2449 2ab4 03140000 		_UNNEST
 2450              	
 2451              	/**********************
 2452              	    .OK	 ( -- )
 2453              	 	Display "ok" only 
 2454              		while interpreting.
 2455              	************************/
 2456 2ab8 9C2A0000 		_HEADER DOTOK,3,".OK"
 2456      032E4F4B 
 2457 2ac0 504700BF 		_NEST
 2458 2ac4 7B150000 		_DOLIT	INTER
 2458      442A0000 
 2459 2acc 251B0000 		_ADR	TEVAL
 2460 2ad0 01160000 		_ADR	AT
 2461 2ad4 61190000 		_ADR	EQUAL
 2462 2ad8 BB150000 		_QBRAN	DOTO1
 2462      E82A0000 
 2463 2ae0 BD230000 		_DOTQP	3," ok"
 2463      03206F6B 
 2464              	DOTO1:
 2465 2ae8 55230000 		_ADR	CR
 2466 2aec 03140000 		_UNNEST
 2467              	
 2468              	/*************************
 2469              	    ?STACK	( -- )
 2470              	 	Abort if the data 
 2471              		stack underflows.
 2472              	************************/
 2473 2af0 BC2A0000 		_HEADER QSTAC,6,"?STACK"
 2473      063F5354 
 2473      41434B00 
 2474 2afc 504700BF 		_NEST
 2475 2b00 C51D0000 		_ADR	DEPTH
 2476 2b04 E1160000 		_ADR	ZLESS	// check only for underflow
 2477 2b08 112A0000 		_ABORQ	9,"underflow"
 2477      09756E64 
 2477      6572666C 
 2477      6F7700BF 
 2478 2b18 03140000 		_UNNEST
 2479              	
 2480              	/*******************
 2481              	    EVAL	( -- )
 2482              	 	Interpret the 
 2483              		input stream.
 2484              	*******************/
 2485 2b1c F42A0000 		_HEADER EVAL,4,"EVAL"
 2485      04455641 
ARM GAS  forth.s 			page 111


 2485      4C0000BF 
 2486 2b28 504700BF 		_NEST
 2487              	EVAL1:
 2488 2b2c CD260000 	    _ADR	TOKEN
 2489 2b30 AD160000 		_ADR	DUPP
 2490 2b34 21160000 		_ADR	CAT	// ?input stream empty
 2491 2b38 BB150000 		_QBRAN	EVAL2
 2491      542B0000 
 2492 2b40 251B0000 		_ADR	TEVAL
 2493 2b44 611E0000 		_ADR	ATEXE
 2494 2b48 FD2A0000 		_ADR	QSTAC	// evaluate input, check stack
 2495 2b4c CF150000 		_BRAN	EVAL1
 2495      2C2B0000 
 2496              	EVAL2:
 2497 2b54 9D160000 		_ADR	DROP
 2498 2b58 C12A0000 		_ADR	DOTOK
 2499 2b5c 03140000 		_UNNEST	// prompt
 2500              	
 2501              	/**********************************
 2502              	    PRESET	( -- )
 2503              	 	Reset data stack pointer 
 2504              		and the terminal input buffer.
 2505              	**********************************/
 2506 2b60 202B0000 		_HEADER PRESE,6,"PRESET"
 2506      06505245 
 2506      53455400 
 2507 2b6c 504700BF 		_NEST 
 2508 2b70 7B150000 		_DOLIT SPP 
 2508      00FF0120 
 2509 2b78 79160000 		_ADR SPSTOR 
 2510 2b7c 03140000 		_UNNEST 
 2511              	
 2512              	/*********************
 2513              	    QUIT	( -- )
 2514              	 	Reset return stack 
 2515              		pointer and start 
 2516              		text interpreter.
 2517              	***********************/
 2518 2b80 642B0000 		_HEADER QUIT,4,"QUIT"
 2518      04515549 
 2518      540000BF 
 2519 2b8c 7B150000 		_DOLIT RPP 
 2519      80FF0120 
 2520 2b94 69160000 		_ADR RPSTOR 
 2521              	QUIT1:
 2522 2b98 A12A0000 		_ADR	LBRAC			// start interpretation
 2523              	QUIT2:
 2524 2b9c A5290000 		_ADR	QUERY			// get input
 2525 2ba0 292B0000 		_ADR	EVAL
 2526 2ba4 CF150000 		_BRAN	QUIT2	// continue till error
 2526      9C2B0000 
 2527              	
 2528              	/***************************
 2529              		FORGET ( <string> -- )
 2530              		forget all definition 
 2531              		starting at <string>
 2532              	****************************/
ARM GAS  forth.s 			page 112


 2533 2bac 842B0000 		_HEADER FORGET,6,"FORGET"
 2533      06464F52 
 2533      47455400 
 2534 2bb8 504700BF 		_NEST 
 2535 2bbc CD260000 		_ADR TOKEN 
 2536 2bc0 AD160000 		_ADR DUPP 
 2537 2bc4 BB150000 		_QBRAN 9f 
 2537      002C0000 
 2538 2bcc 51280000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2539 2bd0 81180000 		_ADR QDUP 
 2540 2bd4 BB150000 		_QBRAN 8f
 2540      FC2B0000 
 2541 2bdc 1D180000 		_ADR CELLM // ( ca la )
 2542 2be0 AD160000 		_ADR DUPP 
 2543 2be4 651B0000 		_ADR CPP   
 2544 2be8 ED150000 		_ADR STORE
 2545 2bec 01160000 		_ADR AT 
 2546 2bf0 8D1B0000 		_ADR LAST 
 2547 2bf4 ED150000 		_ADR STORE
 2548 2bf8 65300000 		_ADR OVERT 
 2549 2bfc 9D160000 	8:  _ADR DROP 
 2550 2c00 03140000 	9:	_UNNEST 
 2551              	
 2552              		.p2align 2 
 2553              	
 2554              	/*****************
 2555              	  The compiler
 2556              	******************/
 2557              	
 2558              	/**************************************
 2559              	    '	   ( -- ca )
 2560              	 	Search context vocabularies 
 2561              		for the next word in input stream.
 2562              	***************************************/
 2563 2c04 B02B0000 		_HEADER TICK,1,"'"
 2563      012700BF 
 2564 2c0c 504700BF 		_NEST
 2565 2c10 CD260000 		_ADR	TOKEN
 2566 2c14 51280000 		_ADR	NAMEQ	// ?defined
 2567 2c18 BB150000 		_QBRAN	TICK1
 2567      242C0000 
 2568 2c20 03140000 		_UNNEST	// yes, push code address
 2569              	TICK1:	
 2570 2c24 E5290000 		_ADR ABORT	// no, error
 2571              	
 2572              	/***********************
 2573              	    ALLOT	( n -- )
 2574              	 	Allocate n bytes to 
 2575              		the ram area.
 2576              	************************/
 2577 2c28 082C0000 		_HEADER ALLOT,5,"ALLOT"
 2577      05414C4C 
 2577      4F5400BF 
 2578 2c34 504700BF 		_NEST
 2579 2c38 651B0000 		_ADR	CPP
 2580 2c3c E9190000 		_ADR	PSTOR
 2581 2c40 03140000 		_UNNEST			// adjust code pointer
ARM GAS  forth.s 			page 113


 2582              	
 2583              	/******************************
 2584              	    ,	   ( w -- )
 2585              	 	Compile an integer 
 2586              		into the code dictionary.
 2587              	******************************/
 2588 2c44 2C2C0000 		_HEADER COMMA,1,","
 2588      012C00BF 
 2589 2c4c 504700BF 		_NEST
 2590 2c50 111E0000 		_ADR	HERE
 2591 2c54 AD160000 		_ADR	DUPP
 2592 2c58 0D180000 		_ADR	CELLP	// cell boundary
 2593 2c5c 651B0000 		_ADR	CPP
 2594 2c60 ED150000 		_ADR	STORE
 2595 2c64 ED150000 		_ADR	STORE
 2596 2c68 03140000 		_UNNEST	// adjust code pointer, compile
 2597              		.p2align 2 
 2598              	
 2599              	/************************************
 2600              	    [COMPILE]   ( -- //  string> )
 2601              	 	Compile the next immediate word 
 2602              		into code dictionary.
 2603              	*************************************/
 2604 2c6c 482C0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2604      895B434F 
 2604      4D50494C 
 2604      455D00BF 
 2605 2c7c 504700BF 		_NEST
 2606 2c80 0D2C0000 		_ADR	TICK
 2607 2c84 4D2C0000 		_ADR	COMMA
 2608 2c88 03140000 		_UNNEST
 2609              	
 2610              	/****************************
 2611              	    COMPILE	( -- )
 2612              	 	Compile the next address 
 2613              		in colon list to code 
 2614              		dictionary.
 2615              	*******************************/
 2616 2c8c 702C0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2616      47434F4D 
 2616      50494C45 
 2617 2c98 504700BF 		_NEST
 2618 2c9c 2D160000 		_ADR	RFROM
 2619 2ca0 AD160000 		_ADR	DUPP 
 2620 2ca4 01160000 		_ADR	AT
 2621 2ca8 7B150000 		_DOLIT 1 
 2621      01000000 
 2622 2cb0 05170000 		_ADR	ORR 
 2623 2cb4 4D2C0000 		_ADR	COMMA 
 2624 2cb8 0D180000 		_ADR	CELLP 
 2625 2cbc 55160000 		_ADR	TOR 
 2626 2cc0 03140000 		_UNNEST	// adjust return address
 2627              	
 2628              	/*************************
 2629              	    LITERAL	( w -- )
 2630              	 	Compile tos to code 
 2631              		dictionary as an 
ARM GAS  forth.s 			page 114


 2632              		integer literal.
 2633              	***************************/
 2634 2cc4 902C0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2634      874C4954 
 2634      4552414C 
 2635 2cd0 504700BF 		_NEST
 2636 2cd4 7B150000 		_COMPI	DOLIT
 2636      7A150000 
 2636      C1300000 
 2637 2ce0 4D2C0000 		_ADR	COMMA
 2638 2ce4 03140000 		_UNNEST
 2639              	
 2640              	/********************
 2641              	    $,"	( -- )
 2642              	 	Compile a literal 
 2643              		string up to next " .
 2644              	hidden word 
 2645              	************************/
 2646              	STRCQ:
 2647 2ce8 504700BF 		_NEST
 2648 2cec 7B150000 		_DOLIT -4
 2648      FCFFFFFF 
 2649 2cf4 651B0000 		_ADR	CPP
 2650 2cf8 E9190000 		_ADR	PSTOR
 2651 2cfc 7B150000 		_DOLIT	'\"'
 2651      22000000 
 2652 2d04 A9260000 		_ADR	WORDD			// move word to code dictionary
 2653 2d08 311A0000 		_ADR	COUNT
 2654 2d0c 71170000 		_ADR	PLUS
 2655 2d10 5D1D0000 		_ADR	ALGND			// calculate aligned end of string
 2656 2d14 651B0000 		_ADR	CPP
 2657 2d18 ED150000 		_ADR	STORE
 2658 2d1c 03140000 		_UNNEST 			// adjust the code pointer
 2659              	
 2660              	/*******************
 2661              	//  Structures
 2662              	*******************/
 2663              	
 2664              	/*************************
 2665              	    FOR	 ( -- a )
 2666              	 	Start a FOR-NEXT loop 
 2667              		structure in a colon 
 2668              		definition.
 2669              	**************************/
 2670 2d20 C82C0000 		_HEADER FOR,3,"FOR"
 2670      03464F52 
 2671 2d28 504700BF 		_NEST
 2672 2d2c 7B150000 		_COMPI	TOR
 2672      54160000 
 2672      C1300000 
 2673 2d38 111E0000 		_ADR	HERE
 2674 2d3c 03140000 		_UNNEST
 2675              	
 2676              	/**********************
 2677              	    BEGIN	( -- a )
 2678              	 	Start an infinite 
 2679              		or indefinite 
ARM GAS  forth.s 			page 115


 2680              		loop structure.
 2681              	************************/
 2682 2d40 242D0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2682      C5424547 
 2682      494E00BF 
 2683 2d4c 504700BF 		_NEST
 2684 2d50 111E0000 		_ADR	HERE
 2685 2d54 03140000 		_UNNEST
 2686              		.p2align 2 
 2687              	
 2688              	/********************
 2689              	    NEXT	( a -- )
 2690              	 	Terminate a FOR-NEXT
 2691              		loop structure.
 2692              	**************************/
 2693 2d58 442D0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2693      C44E4558 
 2693      540000BF 
 2694 2d64 504700BF 		_NEST
 2695 2d68 7B150000 		_COMPI	DONXT
 2695      9C150000 
 2695      C1300000 
 2696 2d74 4D2C0000 		_ADR	COMMA
 2697 2d78 03140000 		_UNNEST
 2698              	
 2699              	/**********************
 2700              	    UNTIL	( a -- )
 2701              	 	Terminate a BEGIN-UNTIL
 2702              		indefinite loop structure.
 2703              	******************************/
 2704 2d7c 5C2D0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2704      C5554E54 
 2704      494C00BF 
 2705 2d88 504700BF 		_NEST
 2706 2d8c 7B150000 		_COMPI	QBRAN
 2706      BA150000 
 2706      C1300000 
 2707 2d98 4D2C0000 		_ADR	COMMA
 2708 2d9c 03140000 		_UNNEST
 2709              	
 2710              	/**********************
 2711              	    AGAIN	( a -- )
 2712              	 	Terminate a BEGIN-AGAIN
 2713              		infinite loop structure.
 2714              	*****************************/
 2715 2da0 802D0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2715      C5414741 
 2715      494E00BF 
 2716 2dac 504700BF 		_NEST
 2717 2db0 7B150000 		_COMPI	BRAN
 2717      CE150000 
 2717      C1300000 
 2718 2dbc 4D2C0000 		_ADR	COMMA
 2719 2dc0 03140000 		_UNNEST
 2720              	
 2721              	/************************
 2722              	    IF	  ( -- A )
ARM GAS  forth.s 			page 116


 2723              	 	Begin a conditional
 2724              		branch structure.
 2725              	**************************/
 2726 2dc4 A42D0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2726      C2494600 
 2727 2dcc 504700BF 		_NEST
 2728 2dd0 7B150000 		_COMPI	QBRAN
 2728      BA150000 
 2728      C1300000 
 2729 2ddc 111E0000 		_ADR	HERE
 2730 2de0 7B150000 		_DOLIT	4
 2730      04000000 
 2731 2de8 651B0000 		_ADR	CPP
 2732 2dec E9190000 		_ADR	PSTOR
 2733 2df0 03140000 		_UNNEST
 2734              	
 2735              	/*************************
 2736              	    AHEAD	( -- A )
 2737              	 	Compile a forward 
 2738              		branch instruction.
 2739              	*************************/
 2740 2df4 C82D0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2740      C5414845 
 2740      414400BF 
 2741 2e00 504700BF 		_NEST
 2742 2e04 7B150000 		_COMPI	BRAN
 2742      CE150000 
 2742      C1300000 
 2743 2e10 111E0000 		_ADR	HERE
 2744 2e14 7B150000 		_DOLIT	4
 2744      04000000 
 2745 2e1c 651B0000 		_ADR	CPP
 2746 2e20 E9190000 		_ADR	PSTOR
 2747 2e24 03140000 		_UNNEST
 2748              	
 2749              	/**************************
 2750              	    REPEAT	( A a -- )
 2751              	 	Terminate a BEGIN-WHILE-REPEAT
 2752              		indefinite loop.
 2753              	**********************************/
 2754 2e28 F82D0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2754      C6524550 
 2754      45415400 
 2755 2e34 504700BF 		_NEST
 2756 2e38 AD2D0000 		_ADR	AGAIN
 2757 2e3c 111E0000 		_ADR	HERE
 2758 2e40 BD160000 		_ADR	SWAP
 2759 2e44 ED150000 		_ADR	STORE
 2760 2e48 03140000 		_UNNEST
 2761              	
 2762              	/*********************
 2763              	    THEN	( A -- )
 2764              	 	Terminate a conditional
 2765              		branch structure.
 2766              	*****************************/
 2767 2e4c 2C2E0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2767      C4544845 
ARM GAS  forth.s 			page 117


 2767      4E0000BF 
 2768 2e58 504700BF 		_NEST
 2769 2e5c 111E0000 		_ADR	HERE
 2770 2e60 BD160000 		_ADR	SWAP
 2771 2e64 ED150000 		_ADR	STORE
 2772 2e68 03140000 		_UNNEST
 2773              	
 2774              	/***************************
 2775              	    AFT	 ( a -- a A )
 2776              	 	Jump to THEN in a 
 2777              		FOR-AFT-THEN-NEXT loop 
 2778              		the first time through.
 2779              	*****************************/
 2780 2e6c 502E0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2780      C3414654 
 2781 2e74 504700BF 		_NEST
 2782 2e78 9D160000 		_ADR	DROP
 2783 2e7c 012E0000 		_ADR	AHEAD
 2784 2e80 4D2D0000 		_ADR	BEGIN
 2785 2e84 BD160000 		_ADR	SWAP
 2786 2e88 03140000 		_UNNEST
 2787              	
 2788              	/**********************
 2789              	    ELSE	( A -- A )
 2790              	 	Start the false 
 2791              		clause in an 
 2792              		IF-ELSE-THEN structure.
 2793              	****************************/
 2794 2e8c 702E0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2794      C4454C53 
 2794      450000BF 
 2795 2e98 504700BF 		_NEST
 2796 2e9c 012E0000 		_ADR	AHEAD
 2797 2ea0 BD160000 		_ADR	SWAP
 2798 2ea4 592E0000 		_ADR	THENN
 2799 2ea8 03140000 		_UNNEST
 2800              	
 2801              	/**************************
 2802              	    WHILE	( a -- A a )
 2803              	 	Conditional branch out 
 2804              		of a BEGIN-WHILE-REPEAT loop.
 2805              	*********************************/
 2806 2eac 902E0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2806      C5574849 
 2806      4C4500BF 
 2807 2eb8 504700BF 		_NEST
 2808 2ebc CD2D0000 		_ADR	IFF
 2809 2ec0 BD160000 		_ADR	SWAP
 2810 2ec4 03140000 		_UNNEST
 2811              	
 2812              	/***********************************
 2813              	    ABORT"	( -- //  string> )
 2814              	 	Conditional abort with an 
 2815              		error message.
 2816              	***********************************/
 2817 2ec8 B02E0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2817      8641424F 
ARM GAS  forth.s 			page 118


 2817      52542200 
 2818 2ed4 504700BF 		_NEST
 2819 2ed8 7B150000 		_COMPI	ABORQ
 2819      102A0000 
 2819      C1300000 
 2820 2ee4 E92C0000 		_ADR	STRCQ
 2821 2ee8 03140000 		_UNNEST
 2822              	
 2823              	/******************************
 2824              	    $"	( -- //  string> )
 2825              	 	Compile an inline 
 2826              		word literal.
 2827              	*****************************/
 2828 2eec CC2E0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2828      C2242200 
 2829 2ef4 504700BF 		_NEST
 2830 2ef8 7B150000 		_COMPI	STRQP
 2830      A0230000 
 2830      C1300000 
 2831 2f04 E92C0000 		_ADR	STRCQ
 2832 2f08 03140000 		_UNNEST
 2833              	
 2834              	/******************************
 2835              	    ."	( -- //  string> )
 2836              	 	Compile an inline word
 2837              		literal to be typed out 
 2838              		at run time.
 2839              	*******************************/
 2840 2f0c F02E0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2840      C22E2200 
 2841 2f14 504700BF 		_NEST
 2842 2f18 7B150000 		_COMPI	DOTQP
 2842      BC230000 
 2842      C1300000 
 2843 2f24 E92C0000 		_ADR	STRCQ
 2844 2f28 03140000 		_UNNEST
 2845              	
 2846              	/*********************
 2847              	  Name compiler
 2848              	***********************/
 2849              	
 2850              	/**************************
 2851              	    ?UNIQUE	( a -- a )
 2852              	 	Display a warning 
 2853              		message if the word 
 2854              		already exists.
 2855              	**************************/
 2856 2f2c 102F0000 		_HEADER UNIQU,7,"?UNIQUE"
 2856      073F554E 
 2856      49515545 
 2857 2f38 504700BF 		_NEST
 2858 2f3c AD160000 		_ADR	DUPP
 2859 2f40 51280000 		_ADR	NAMEQ			// ?name exists
 2860 2f44 BB150000 		_QBRAN	UNIQ1	// redefinitions are OK
 2860      642F0000 
 2861 2f4c BD230000 		_DOTQP	7," reDef "		// but warn the user
 2861      07207265 
ARM GAS  forth.s 			page 119


 2861      44656620 
 2862 2f58 D1160000 		_ADR	OVER
 2863 2f5c 311A0000 		_ADR	COUNT
 2864 2f60 21230000 		_ADR	TYPEE			// just in case its not planned
 2865              	UNIQ1:
 2866 2f64 9D160000 		_ADR	DROP
 2867 2f68 03140000 		_UNNEST
 2868              	
 2869              	/***********************
 2870              	    $,n	 ( na -- )
 2871              	 	Build a new dictionary 
 2872              		name using the data at na.
 2873              	hidden word 
 2874              	*******************************/
 2875              	SNAME:
 2876 2f6c 504700BF 		_NEST
 2877 2f70 AD160000 		_ADR	DUPP			//  na na
 2878 2f74 21160000 		_ADR	CAT			//  ?null input
 2879 2f78 BB150000 		_QBRAN	SNAM1
 2879      B42F0000 
 2880 2f80 392F0000 		_ADR	UNIQU			//  na
 2881 2f84 8D1B0000 		_ADR	LAST			//  na last
 2882 2f88 01160000 		_ADR	AT			//  na la
 2883 2f8c 4D2C0000 		_ADR	COMMA			//  na
 2884 2f90 AD160000 		_ADR	DUPP			//  na na
 2885 2f94 8D1B0000 		_ADR	LAST			//  na na last
 2886 2f98 ED150000 		_ADR	STORE			//  na , save na for vocabulary link
 2887 2f9c 311A0000 		_ADR	COUNT			//  na+1 count
 2888 2fa0 71170000 		_ADR	PLUS			//  na+1+count
 2889 2fa4 5D1D0000 		_ADR	ALGND			//  word boundary
 2890 2fa8 651B0000 		_ADR	CPP
 2891 2fac ED150000 		_ADR	STORE			//  top of dictionary now
 2892 2fb0 03140000 		_UNNEST
 2893              	SNAM1:
 2894 2fb4 A1230000 		_ADR	STRQP
 2895 2fb8 07       		.byte	7
 2896 2fb9 206E616D 		.ascii " name? "
 2896      653F20
 2897 2fc0 E5290000 		_ADR	ABORT
 2898              	
 2899              	/************************
 2900              	    $COMPILE	( a -- )
 2901              	 	Compile next word to 
 2902              		code dictionary as 
 2903              		a token or literal.
 2904              	**************************/
 2905 2fc4 302F0000 		_HEADER SCOMP,8,"$COMPILE"
 2905      0824434F 
 2905      4D50494C 
 2905      450000BF 
 2906 2fd4 504700BF 		_NEST
 2907 2fd8 51280000 		_ADR	NAMEQ
 2908 2fdc 81180000 		_ADR	QDUP	// defined?
 2909 2fe0 BB150000 		_QBRAN	SCOM2
 2909      10300000 
 2910 2fe8 01160000 		_ADR	AT
 2911 2fec 7B150000 		_DOLIT	IMEDD
ARM GAS  forth.s 			page 120


 2911      80000000 
 2912 2ff4 F1160000 		_ADR	ANDD	// immediate?
 2913 2ff8 BB150000 		_QBRAN	SCOM1
 2913      08300000 
 2914 3000 91150000 		_ADR	EXECU
 2915 3004 03140000 		_UNNEST			// it's immediate, execute
 2916              	SCOM1:
 2917 3008 C1300000 		_ADR	CALLC			// it's not immediate, compile
 2918 300c 03140000 		_UNNEST	
 2919              	SCOM2:
 2920 3010 91210000 		_ADR	NUMBQ
 2921 3014 BB150000 		_QBRAN	SCOM3
 2921      24300000 
 2922 301c D12C0000 		_ADR	LITER
 2923 3020 03140000 		_UNNEST			// compile number as integer
 2924              	SCOM3: // compilation abort 
 2925 3024 2D300000 		_ADR COLON_ABORT 
 2926 3028 E5290000 		_ADR	ABORT			// error
 2927              	
 2928              	/********************************
 2929              	 before aborting a compilation 
 2930              	 reset HERE and LAST
 2931              	 to previous values. 
 2932              	*******************************/
 2933              	COLON_ABORT:
 2934 302c 504700BF 		_NEST 
 2935 3030 8D1B0000 		_ADR LAST 
 2936 3034 01160000 		_ADR AT 
 2937 3038 1D180000 		_ADR CELLM 
 2938 303c AD160000 		_ADR DUPP 
 2939 3040 651B0000 		_ADR CPP  
 2940 3044 ED150000 		_ADR STORE 
 2941 3048 01160000 		_ADR AT 
 2942 304c 8D1B0000 		_ADR LAST 
 2943 3050 ED150000 		_ADR STORE 
 2944 3054 03140000 		_UNNEST 
 2945              	
 2946              	/*********************
 2947              	    OVERT	( -- )
 2948              	 	Link a new word 
 2949              		into the current 
 2950              		vocabulary.
 2951              	**********************/
 2952 3058 C82F0000 		_HEADER OVERT,5,"OVERT"
 2952      054F5645 
 2952      525400BF 
 2953 3064 504700BF 		_NEST
 2954 3068 8D1B0000 		_ADR	LAST
 2955 306c 01160000 		_ADR	AT
 2956 3070 511B0000 		_ADR	CNTXT
 2957 3074 ED150000 		_ADR	STORE
 2958 3078 03140000 		_UNNEST
 2959              	
 2960              	/**********************
 2961              	    ;  ( -- )
 2962              	 	Terminate a colon
 2963              		definition.
ARM GAS  forth.s 			page 121


 2964              	***********************/
 2965 307c 5C300000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 2965      C13B00BF 
 2966 3084 504700BF 		_NEST
 2967 3088 7B150000 		_DOLIT	UNNEST
 2967      02140000 
 2968 3090 C1300000 		_ADR	CALLC
 2969 3094 A12A0000 		_ADR	LBRAC
 2970 3098 65300000 		_ADR	OVERT
 2971 309c 03140000 		_UNNEST
 2972              	
 2973              	/******************
 2974              	    ]	   ( -- )
 2975              	 	Start compiling 
 2976              		the words in 
 2977              		the input stream.
 2978              	*********************/
 2979 30a0 80300000 		_HEADER RBRAC,1,"]"
 2979      015D00BF 
 2980 30a8 504700BF 		_NEST
 2981 30ac 7B150000 		_DOLIT	SCOMP
 2981      D42F0000 
 2982 30b4 251B0000 		_ADR	TEVAL
 2983 30b8 ED150000 		_ADR	STORE
 2984 30bc 03140000 		_UNNEST
 2985              	
 2986              	/*********************
 2987              	    BL.W	( ca -- )
 2988              	 	compile ca.
 2989              	hidden word used by compiler
 2990              	*****************************/
 2991              	CALLC:
 2992 30c0 504700BF 		_NEST
 2993 30c4 7B150000 		_DOLIT 1 
 2993      01000000 
 2994 30cc 05170000 		_ADR ORR 
 2995 30d0 4D2C0000 		_ADR COMMA  
 2996 30d4 03140000 		_UNNEST 
 2997              	
 2998              	
 2999              	/*************************
 3000              	 	:	( -- //  string> )
 3001              	 	Start a new colon 
 3002              		definition using 
 3003              		next word as its name.
 3004              	**************************/
 3005 30d8 A4300000 		_HEADER COLON,1,":"
 3005      013A00BF 
 3006 30e0 504700BF 		_NEST
 3007 30e4 CD260000 		_ADR	TOKEN
 3008 30e8 6D2F0000 		_ADR	SNAME
 3009 30ec 0D140000 		_ADR	COMPI_NEST 
 3010 30f0 A9300000 		_ADR	RBRAC
 3011 30f4 03140000 		_UNNEST
 3012              	
 3013              	/*************************
 3014              	    IMMEDIATE   ( -- )
ARM GAS  forth.s 			page 122


 3015              	 	Make the last compiled 
 3016              		word an immediate word.
 3017              	***************************/
 3018 30f8 DC300000 		_HEADER IMMED,9,"IMMEDIATE"
 3018      09494D4D 
 3018      45444941 
 3018      544500BF 
 3019 3108 504700BF 		_NEST
 3020 310c 7B150000 		_DOLIT	IMEDD
 3020      80000000 
 3021 3114 8D1B0000 		_ADR	LAST
 3022 3118 01160000 		_ADR	AT
 3023 311c 01160000 		_ADR	AT
 3024 3120 05170000 		_ADR	ORR
 3025 3124 8D1B0000 		_ADR	LAST
 3026 3128 01160000 		_ADR	AT
 3027 312c ED150000 		_ADR	STORE
 3028 3130 03140000 		_UNNEST
 3029              	
 3030              	/******************
 3031              	  Defining words
 3032              	******************/
 3033              	
 3034              	/***********************************
 3035              	    CONSTANT	( u -- //  string> )
 3036              	 	Compile a new constant.
 3037              	************************************/
 3038 3134 FC300000 		_HEADER CONST,8,"CONSTANT"
 3038      08434F4E 
 3038      5354414E 
 3038      540000BF 
 3039 3144 504700BF 		_NEST 
 3040 3148 CD260000 		_ADR	TOKEN
 3041 314c 6D2F0000 		_ADR	SNAME
 3042 3150 65300000 		_ADR	OVERT
 3043 3154 0D140000 		_ADR	COMPI_NEST
 3044 3158 7B150000 		_DOLIT	DOCON
 3044      641A0000 
 3045 3160 C1300000 		_ADR	CALLC
 3046 3164 4D2C0000 		_ADR	COMMA
 3047 3168 7B150000 		_DOLIT	UNNEST 
 3047      02140000 
 3048 3170 C1300000 		_ADR	CALLC  
 3049 3174 03140000 		_UNNEST
 3050              	
 3051              		.p2align 2 
 3052              	/****************************************
 3053              	 doDOES> ( -- a )
 3054              	 runtime action of DOES> 
 3055              	 leave parameter field address on stack 
 3056              	hidden word used by compiler 
 3057              	***************************************/
 3058              	DODOES:
 3059 3178 504700BF 		_NEST 
 3060 317c 2D160000 		_ADR	RFROM
 3061 3180 0D180000 		_ADR	CELLP 
 3062 3184 CD170000 		_ADR	ONEP  
ARM GAS  forth.s 			page 123


 3063 3188 8D1B0000 		_ADR LAST 
 3064 318c 01160000 		_ADR AT
 3065 3190 E9260000 		_ADR NAMET 
 3066 3194 0D180000 		_ADR CELLP 
 3067 3198 ED150000 		_ADR STORE  
 3068 319c 03140000 		_UNNEST 
 3069              	
 3070              		.p2align 2
 3071              	/**********************
 3072              	  DOES> ( -- )
 3073              	  compile time action
 3074              	*************************/
 3075 31a0 38310000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3075      C5444F45 
 3075      533E00BF 
 3076 31ac 504700BF 		_NEST 
 3077 31b0 7B150000 		_DOLIT DODOES 
 3077      78310000 
 3078 31b8 C1300000 		_ADR CALLC 
 3079 31bc 7B150000 		_DOLIT	UNNEST
 3079      02140000 
 3080 31c4 C1300000 		_ADR	CALLC 
 3081 31c8 0D140000 		_ADR COMPI_NEST
 3082 31cc 7B150000 		_DOLIT RFROM 
 3082      2C160000 
 3083 31d4 C1300000 		_ADR	CALLC
 3084 31d8 03140000 		_UNNEST 
 3085              	
 3086              	
 3087              	/****************************
 3088              	  DEFER@ ( "name" -- a )
 3089              	  return value of code field 
 3090              	  of defered function. 
 3091              	******************************/
 3092 31dc A4310000 		_HEADER DEFERAT,6,"DEFER@"
 3092      06444546 
 3092      45524000 
 3093 31e8 504700BF 		_NEST 
 3094 31ec 0D2C0000 		_ADR TICK
 3095 31f0 0D180000 		_ADR CELLP 
 3096 31f4 01160000 		_ADR AT 
 3097 31f8 DD170000 		_ADR ONEM 
 3098 31fc 03140000 		_UNNEST 
 3099              	
 3100              	/*********************************
 3101              	 DEFER! ( "name1" "name2" -- )
 3102              	 assign an action to a defered word 
 3103              	************************************/
 3104 3200 E0310000 		_HEADER DEFERSTO,6,"DEFER!"
 3104      06444546 
 3104      45522100 
 3105 320c 504700BF 		_NEST 
 3106 3210 0D2C0000 		_ADR TICK 
 3107 3214 CD170000 		_ADR ONEP 
 3108 3218 0D2C0000 		_ADR TICK 
 3109 321c 0D180000 		_ADR CELLP 
 3110 3220 ED150000 		_ADR STORE 
ARM GAS  forth.s 			page 124


 3111 3224 03140000 		_UNNEST
 3112              	
 3113              	/****************************
 3114              	  DEFER ( "name" -- )
 3115              	  create a defered definition
 3116              	*****************************/
 3117 3228 04320000 		_HEADER DEFER,5,"DEFER"
 3117      05444546 
 3117      455200BF 
 3118 3234 504700BF 		_NEST 
 3119 3238 85320000 		_ADR CREAT 
 3120 323c 7B150000 		_DOLIT UNNEST 
 3120      02140000 
 3121 3244 C1300000 		_ADR CALLC 
 3122 3248 7B150000 		_DOLIT DEFER_NOP
 3122      6C320000 
 3123 3250 CD170000 		_ADR ONEP 
 3124 3254 8D1B0000 		_ADR LAST 
 3125 3258 01160000 		_ADR AT 
 3126 325c E9260000 		_ADR NAMET 
 3127 3260 0D180000 		_ADR CELLP 
 3128 3264 ED150000 		_ADR STORE 
 3129 3268 03140000 		_UNNEST 
 3130              	DEFER_NOP:
 3131 326c 504700BF 		_NEST  
 3132 3270 79150000 		_ADR NOP 
 3133 3274 03140000 		_UNNEST 
 3134              	
 3135              	/******************************
 3136              	    CREATE	( -- //  string> )
 3137              	 	Compile a new array entry 
 3138              		without allocating code space.
 3139              	***********************************/
 3140 3278 2C320000 		_HEADER CREAT,6,"CREATE"
 3140      06435245 
 3140      41544500 
 3141 3284 504700BF 		_NEST 
 3142 3288 CD260000 		_ADR	TOKEN
 3143 328c 6D2F0000 		_ADR	SNAME
 3144 3290 65300000 		_ADR	OVERT
 3145 3294 0D140000 		_ADR	COMPI_NEST 
 3146 3298 7B150000 		_DOLIT	DOVAR
 3146      581A0000 
 3147 32a0 C1300000 		_ADR	CALLC
 3148 32a4 03140000 		_UNNEST
 3149              	
 3150              	/*******************************
 3151              	    VARIABLE	( -- //  string> )
 3152              	 	Compile a new variable 
 3153              		initialized to 0.
 3154              	***********************************/
 3155 32a8 7C320000 		_HEADER VARIA,8,"VARIABLE"
 3155      08564152 
 3155      4941424C 
 3155      450000BF 
 3156 32b8 504700BF 		_NEST
 3157 32bc 85320000 		_ADR	CREAT
ARM GAS  forth.s 			page 125


 3158 32c0 7B150000 		_DOLIT	0
 3158      00000000 
 3159 32c8 4D2C0000 		_ADR	COMMA
 3160 32cc 7B150000 		_DOLIT UNNEST
 3160      02140000 
 3161 32d4 C1300000 		_ADR	CALLC  
 3162 32d8 03140000 		_UNNEST
 3163              	
 3164              	/***********
 3165              	  Tools
 3166              	***********/
 3167              	
 3168              	/*************************
 3169              	    dm+	 ( a u -- a )
 3170              	 	Dump u bytes from , 
 3171              		leaving a+u on the stack.
 3172              	hidden word used by DUMP 
 3173              	****************************/
 3174              	DMP:
 3175 32dc 504700BF 		_NEST
 3176 32e0 D1160000 		_ADR	OVER
 3177 32e4 7B150000 		_DOLIT	4
 3177      04000000 
 3178 32ec 01240000 		_ADR	UDOTR			// display address
 3179 32f0 CD220000 		_ADR	SPACE
 3180 32f4 55160000 		_ADR	TOR			// start count down loop
 3181 32f8 CF150000 		_BRAN	PDUM2			// skip first pass
 3181      18330000 
 3182              	PDUM1:
 3183 3300 AD160000 	  _ADR	DUPP
 3184 3304 21160000 		_ADR	CAT
 3185 3308 7B150000 		_DOLIT	3
 3185      03000000 
 3186 3310 01240000 		_ADR	UDOTR			// display numeric data
 3187 3314 CD170000 		_ADR	ONEP			// increment address
 3188              	PDUM2:
 3189 3318 9D150000 	  _ADR	DONXT
 3190 331c 00330000 		.word	PDUM1	// loop till done
 3191 3320 03140000 		_UNNEST
 3192              		.p2align 2 
 3193              	//    DUMP	( a u -- )
 3194              	// 	Dump u bytes from a, in a formatted manner.
 3195              	
 3196              	/**********************
 3197              		DUMP ( a n -- )
 3198              		hex dump memory 
 3199              	*********************/
 3200 3324 AC320000 		_HEADER DUMP,4,"DUMP"
 3200      0444554D 
 3200      500000BF 
 3201 3330 504700BF 		_NEST
 3202 3334 C91A0000 		_ADR	BASE
 3203 3338 01160000 		_ADR	AT
 3204 333c 55160000 		_ADR	TOR
 3205 3340 E1200000 		_ADR	HEX			// save radix,set hex
 3206 3344 7B150000 		_DOLIT	16
 3206      10000000 
ARM GAS  forth.s 			page 126


 3207 334c FD1C0000 		_ADR	SLASH			// change count to lines
 3208 3350 55160000 		_ADR	TOR
 3209 3354 CF150000 		_BRAN	DUMP4			// start count down loop
 3209      84330000 
 3210              	DUMP1:
 3211 335c 55230000 	  _ADR	CR
 3212 3360 7B150000 		_DOLIT	16
 3212      10000000 
 3213 3368 E5180000 		_ADR	DDUP
 3214 336c DD320000 		_ADR	DMP			// display numeric
 3215 3370 95180000 		_ADR	ROT
 3216 3374 95180000 		_ADR	ROT
 3217 3378 CD220000 		_ADR	SPACE
 3218 337c CD220000 		_ADR	SPACE
 3219 3380 21230000 		_ADR	TYPEE			// display printable characters
 3220              	DUMP4:
 3221 3384 9D150000 	  _DONXT	DUMP1	// loop till done
 3221      5C330000 
 3222              	DUMP3:
 3223 338c 9D160000 		_ADR	DROP
 3224 3390 2D160000 		_ADR	RFROM
 3225 3394 C91A0000 		_ADR	BASE
 3226 3398 ED150000 		_ADR	STORE			// restore radix
 3227 339c 03140000 		_UNNEST
 3228              	
 3229              	/**********************
 3230              	   .S	  ( ... -- ... )
 3231              	 	Display the contents 
 3232              		of the data stack.
 3233              	*************************/
 3234 33a0 28330000 		_HEADER DOTS,2,".S"
 3234      022E5300 
 3235 33a8 504700BF 		_NEST
 3236 33ac CD220000 		_ADR	SPACE
 3237 33b0 C51D0000 		_ADR	DEPTH			// stack depth
 3238 33b4 55160000 		_ADR	TOR			// start count down loop
 3239 33b8 CF150000 		_BRAN	DOTS2			// skip first pass
 3239      CC330000 
 3240              	DOTS1:
 3241 33c0 41160000 		_ADR	RAT
 3242 33c4 E91D0000 		_ADR	PICK
 3243 33c8 59240000 		_ADR	DOT			// index stack, display contents
 3244              	DOTS2:
 3245 33cc 9D150000 		_DONXT	DOTS1	// loop till done
 3245      C0330000 
 3246 33d4 CD220000 		_ADR	SPACE
 3247 33d8 03140000 		_UNNEST
 3248              	
 3249              	/*****************************
 3250              	    >NAME	( ca -- na | F )
 3251              	 	Convert code address 
 3252              		to a name address.
 3253              	*****************************/
 3254 33dc A4330000 		_HEADER TNAME,5,">NAME"
 3254      053E4E41 
 3254      4D4500BF 
 3255 33e8 504700BF 		_NEST
ARM GAS  forth.s 			page 127


 3256 33ec 55160000 		_ADR	TOR			//  
 3257 33f0 511B0000 		_ADR	CNTXT			//  va
 3258 33f4 01160000 		_ADR	AT			//  na
 3259              	TNAM1:
 3260 33f8 AD160000 		_ADR	DUPP			//  na na
 3261 33fc BB150000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3261      2C340000 
 3262 3404 AD160000 		_ADR	DUPP			//  na na
 3263 3408 E9260000 		_ADR	NAMET			//  na ca
 3264 340c 41160000 		_ADR	RAT			//  na ca code
 3265 3410 19170000 		_ADR	XORR			//  na f --
 3266 3414 BB150000 		_QBRAN	TNAM2
 3266      2C340000 
 3267 341c 1D180000 		_ADR	CELLM			//  la 
 3268 3420 01160000 		_ADR	AT			//  next_na
 3269 3424 CF150000 		_BRAN	TNAM1
 3269      F8330000 
 3270              	TNAM2:	
 3271 342c 2D160000 		_ADR	RFROM
 3272 3430 9D160000 		_ADR	DROP			//  0|na --
 3273 3434 03140000 		_UNNEST			// 0
 3274              	
 3275              	/********************************
 3276              	    .ID	 ( na -- )
 3277              	 	Display the name at address.
 3278              	********************************/
 3279 3438 E0330000 		_HEADER DOTID,3,".ID"
 3279      032E4944 
 3280 3440 504700BF 		_NEST
 3281 3444 81180000 		_ADR	QDUP			// if zero no name
 3282 3448 BB150000 		_QBRAN	DOTI1
 3282      68340000 
 3283 3450 311A0000 		_ADR	COUNT
 3284 3454 7B150000 		_DOLIT	0x1F
 3284      1F000000 
 3285 345c F1160000 		_ADR	ANDD			// mask lexicon bits
 3286 3460 21230000 		_ADR	TYPEE
 3287 3464 03140000 		_UNNEST			// display name string
 3288              	DOTI1:
 3289 3468 BD230000 		_DOTQP	9," {noName}"
 3289      09207B6E 
 3289      6F4E616D 
 3289      657D00BF 
 3290 3478 03140000 		_UNNEST
 3291              	
 3292              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3293              	.if WANT_SEE 
 3294              	/*******************************
 3295              	    SEE	 ( -- //  string> )
 3296              	 	A simple decompiler.
 3297              	*******************************/
 3298              		_HEADER SEE,3,"SEE"
 3299              		_NEST
 3300              		_ADR	TICK	//  ca --, starting address
 3301              		_ADR	CR	
 3302              		_DOLIT	20
 3303              		_ADR	TOR
ARM GAS  forth.s 			page 128


 3304              	SEE1:
 3305              		_ADR	CELLP			//  a
 3306              		_ADR	DUPP			//  a a
 3307              		_ADR	DECOMP		//  a
 3308              		_DONXT	SEE1
 3309              		_ADR	DROP
 3310              		_UNNEST
 3311              	
 3312              	/*************************
 3313              	 	DECOMPILE ( a -- )
 3314              	 	Convert code in a.  
 3315              		Display name of command or as data.
 3316              	*************************************/
 3317              		_HEADER DECOMP,9,"DECOMPILE"
 3318              		_NEST
 3319              		_ADR	DUPP			//  a a
 3320              	// 	_ADR	TOR			//  a
 3321              		_ADR	AT			//  a code
 3322              		_ADR	DUPP			//  a code code
 3323              		_DOLIT	0xF800D000 //0xF800F800
 3324              		_ADR	ANDD
 3325              		_DOLIT	0xF000D000 //0xF800F000
 3326              		_ADR	EQUAL			//  a code ?
 3327              		_ADR	INVER 
 3328              		_QBRAN	DECOM2	//  not a command
 3329              		//  a valid_code --, extract address and display name
 3330              		MOVW	IP,#0xFFE
 3331              		MOV	WP,TOS
 3332              		LSL	TOS,TOS,#21		//  get bits 22-12
 3333              		ASR	TOS,TOS,#9		//  with sign extension
 3334              		LSR	WP,WP,#15		//  get bits 11-1
 3335              		AND	WP,WP,IP		//  retain only bits 11-1
 3336              		ORR	TOS,TOS,WP		//  get bits 22-1
 3337              		NOP
 3338              		_ADR	OVER			//  a offset a
 3339              		_ADR	PLUS			//  a target-4
 3340              		_ADR	CELLP			//  a target
 3341              		_ADR	TNAME			//  a na/0 --, is it a name?
 3342              		_ADR	QDUP			//  name address or zero
 3343              		_QBRAN	DECOM1
 3344              		_ADR	SPACE			//  a na
 3345              		_ADR	DOTID			//  a --, display name
 3346              	// 	_ADR	RFROM			//  a
 3347              		_ADR	DROP
 3348              		_UNNEST
 3349              	DECOM1:	// _ADR	RFROM		//  a
 3350              		_ADR	AT			//  data
 3351              		_ADR	UDOT			//  display data
 3352              		_UNNEST
 3353              	DECOM2:
 3354              		_ADR	UDOT
 3355              	// 	_ADR	RFROM
 3356              		_ADR	DROP
 3357              		_UNNEST
 3358              	.endif 
 3359              	
 3360              	/*********************
ARM GAS  forth.s 			page 129


 3361              	    WORDS	( -- )
 3362              	 	Display the names 
 3363              		in the context vocabulary.
 3364              	*******************************/
 3365 347c 3C340000 		_HEADER WORDS,5,"WORDS"
 3365      05574F52 
 3365      445300BF 
 3366 3488 504700BF 		_NEST
 3367 348c 55230000 		_ADR	CR
 3368 3490 511B0000 		_ADR	CNTXT
 3369 3494 01160000 		_ADR	AT			// only in context
 3370              	WORS1:
 3371 3498 81180000 		_ADR	QDUP			// ?at end of list
 3372 349c BB150000 		_QBRAN	WORS2
 3372      C0340000 
 3373 34a4 AD160000 		_ADR	DUPP
 3374 34a8 CD220000 		_ADR	SPACE
 3375 34ac 41340000 		_ADR	DOTID			// display a name
 3376 34b0 1D180000 		_ADR	CELLM
 3377 34b4 01160000 		_ADR	AT
 3378 34b8 CF150000 		_BRAN	WORS1
 3378      98340000 
 3379              	WORS2:
 3380 34c0 03140000 		_UNNEST
 3381              	
 3382              	/****************
 3383              	  cold start
 3384              	*****************/
 3385              	
 3386              	/**********************************
 3387              	    VER	 ( -- n )
 3388              	 	Return the version 
 3389              		number of this implementation.
 3390              	hidden word used by COLD
 3391              	**********************************/
 3392              	VERSN:
 3393 34c4 504700BF 		_NEST
 3394 34c8 7B150000 		_DOLIT	VER*256+EXT
 3394      00010000 
 3395 34d0 03140000 		_UNNEST
 3396              	
 3397              	/*********************
 3398              	    hi	  ( -- )
 3399              	 	Display the sign-on 
 3400              		message.
 3401              	***********************/
 3402 34d4 80340000 		_HEADER HI,2,"HI"
 3402      02484900 
 3403 34dc 504700BF 		_NEST
 3404 34e0 55230000 		_ADR	CR	// initialize I/O
 3405 34e4 BD230000 		_DOTQP	17, "beyond Jupiter, v" 
 3405      11626579 
 3405      6F6E6420 
 3405      4A757069 
 3405      7465722C 
 3406 34fc C91A0000 		_ADR	BASE
 3407 3500 01160000 		_ADR	AT
ARM GAS  forth.s 			page 130


 3408 3504 E1200000 		_ADR	HEX	// save radix
 3409 3508 C5340000 		_ADR	VERSN
 3410 350c D11F0000 		_ADR	BDIGS
 3411 3510 1D200000 		_ADR	DIG
 3412 3514 1D200000 		_ADR	DIG
 3413 3518 7B150000 		_DOLIT	'.'
 3413      2E000000 
 3414 3520 F11F0000 		_ADR	HOLD
 3415 3524 3D200000 		_ADR	DIGS
 3416 3528 91200000 		_ADR	EDIGS
 3417 352c 21230000 		_ADR	TYPEE	// format version number
 3418 3530 C91A0000 		_ADR	BASE
 3419 3534 ED150000 		_ADR	STORE
 3420 3538 55230000 		_ADR	CR
 3421 353c 03140000 		_UNNEST			// restore radix
 3422              	
 3423              	/********************
 3424              	    COLD	( -- )
 3425              	 	The high level cold 
 3426              		start sequence.
 3427              	**************************/
 3428 3540 D8340000 		.word	LINK 
 3429              		LINK = . 
 3430 3544 04       	_LASTN:	.byte  4
 3431 3545 434F4C44 		.ascii "COLD"
 3432 3549 0000BF   		.p2align 2	
 3433              	COLD:
 3434 354c 00B5FCF7 		_CALL forth_init 
 3434      FFFD5DF8 
 3434      04EB
 3435 3556 DFF84CC0 		ldr IP,=COLD1 
 3436 355a FDF74FBF 		_NEXT
 3437 355e 00BF     		.p2align 2 
 3438              	COLD1:
 3439 3560 7B150000 		_DOLIT  0 
 3439      00000000 
 3440 3568 51150000 		_ADR ULED // turn off user LED 
 3441 356c 7B150000 		_DOLIT	UZERO
 3441      DC030000 
 3442 3574 7B150000 		_DOLIT	UPP
 3442      00000020 
 3443 357c 7B150000 		_DOLIT	ULAST-UZERO
 3443      A8000000 
 3444 3584 B11E0000 		_ADR	MOVE 			// initialize user area
 3445 3588 6D2B0000 		_ADR	PRESE			// initialize stack and TIB
 3446 358c B51A0000 		_ADR	TBOOT
 3447 3590 611E0000 		_ADR	ATEXE			// application boot
 3448 3594 65300000 		_ADR	OVERT
 3449 3598 CF150000 		_BRAN	QUIT			// start interpretation
 3449      8C2B0000 
 3450              	COLD2:
 3451              		.p2align 2 	
 3452              	CTOP:
 3453 35a0 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3454              	
 3455              	
 3456 35a4 60350000 	  .end 
ARM GAS  forth.s 			page 131


ARM GAS  forth.s 			page 132


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 133


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 134


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 135


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 136


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 137


          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2485   .text:0000000000002b28 EVAL
             forth.s:1512   .text:0000000000001ff0 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
ARM GAS  forth.s 			page 138


          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:263    .text:0000000000000128 reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:122    .text:0000000000000690 tv_out_isr
          ser-term.s:35     .text:0000000000000490 uart_rx_handler
           ps2_kbd.s:77     .text:0000000000000e34 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:278    .text:0000000000000150 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:97     .text:00000000000013fc INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2506   .text:0000000000002b6c PRESE
             forth.s:280    .text:000000000000157a DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:0000000000001a30 COUNT
             forth.s:1776   .text:0000000000002320 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:449    .text:00000000000016ac DUPP
             forth.s:405    .text:0000000000001654 TOR
             forth.s:980    .text:0000000000001ac8 BASE
             forth.s:351    .text:00000000000015ec STORE
             forth.s:1914   .text:0000000000002458 DOT
             forth.s:387    .text:000000000000162c RFROM
             forth.s:484    .text:00000000000016f0 ANDD
             forth.s:321    .text:00000000000015ba QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:165    .text:0000000000001484 EMIT
             forth.s:1748   .text:00000000000022cc SPACE
              init.s:243    .text:0000000000000100 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:232    .text:00000000000000dc $d
              init.s:238    .text:00000000000000f0 user_reboot_msg
              init.s:239    .text:00000000000000f0 $d
              init.s:241    .text:00000000000000fe $t
              init.s:381    .text:0000000000000250 remap
              init.s:291    .text:0000000000000178 init_devices
          ser-term.s:56     .text:00000000000004bc ser_init
             tvout.s:66     .text:00000000000005e0 tv_init
           ps2_kbd.s:307    .text:0000000000001054 kbd_init
             forth.s:3433   .text:000000000000354c COLD
             forth.s:93     .text:00000000000013f4 NEST
              init.s:304    .text:0000000000000196 wait_hserdy
              init.s:325    .text:00000000000001b8 wait_pllrdy
              init.s:337    .text:00000000000001d2 wait_sws
              init.s:471    .text:000000000000031a gpio_config
              init.s:546    .text:00000000000003c6 gpio_out
              init.s:406    .text:0000000000000290 nvic_set_priority
ARM GAS  forth.s 			page 139


              init.s:561    .text:00000000000003dc UZERO
              init.s:597    .text:0000000000000484 ULAST
              init.s:415    .text:00000000000002a8 negative_irq
              init.s:427    .text:00000000000002c2 nvic_enable_irq
              init.s:444    .text:00000000000002ec nvic_disable_irq
              init.s:508    .text:0000000000000382 input_pull
              init.s:501    .text:0000000000000370 output_type
              init.s:524    .text:0000000000000398 gpio_speed
              init.s:562    .text:00000000000003dc $d
             forth.s:3402   .text:00000000000034dc HI
          ser-term.s:90     .text:0000000000000524 SER_QKEY
          ser-term.s:110    .text:0000000000000560 SER_EMIT
             forth.s:2422   .text:0000000000002a44 INTER
             forth.s:3430   .text:0000000000003544 _LASTN
             forth.s:3452   .text:00000000000035a0 CTOP
             forth.s:3429   .text:0000000000003544 LINK
              init.s:602    .text:0000000000000484 $d
          ser-term.s:33     .text:0000000000000490 $t
          ser-term.s:90     .text:0000000000000514 $d
          ser-term.s:90     .text:0000000000000518 _SER_QKEY
          ser-term.s:110    .text:0000000000000550 $d
          ser-term.s:110    .text:0000000000000554 _SER_EMIT
          ser-term.s:124    .text:000000000000057a $d
          ser-term.s:124    .text:000000000000057e _LOCAL
          ser-term.s:124    .text:0000000000000584 $t
          ser-term.s:124    .text:0000000000000584 LOCAL
          ser-term.s:133    .text:0000000000000590 $d
          ser-term.s:133    .text:0000000000000594 _SERIAL
          ser-term.s:133    .text:000000000000059c SERIAL
          ser-term.s:142    .text:00000000000005a8 $d
          ser-term.s:142    .text:00000000000005ac _CONSOLE
          ser-term.s:142    .text:00000000000005b4 $t
          ser-term.s:142    .text:00000000000005b4 CONSOLE
           ps2_kbd.s:382    .text:0000000000001110 PS2_QKEY
             tvout.s:511    .text:0000000000000ad4 TV_EMIT
          ser-term.s:157    .text:00000000000005d0 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
ARM GAS  forth.s 			page 140


             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:66     .text:00000000000005e0 $t
             tvout.s:141    .text:00000000000006bc state_vsync
             tvout.s:182    .text:0000000000000710 state_pre_video
             tvout.s:193    .text:0000000000000722 state_video_out
             tvout.s:223    .text:000000000000077a state_post_video
             tvout.s:240    .text:00000000000007a0 tv_isr_exit
             tvout.s:171    .text:00000000000006f6 sync_end
             tvout.s:232    .text:000000000000078c frame_end
             tvout.s:250    .text:00000000000007a2 $d
             tvout.s:250    .text:00000000000007a6 _BACKCOLOR
             tvout.s:250    .text:00000000000007b4 BACKCOLOR
             tvout.s:257    .text:00000000000007c0 $d
             tvout.s:257    .text:00000000000007c4 _PENCOLOR
             tvout.s:257    .text:00000000000007ce $t
             tvout.s:257    .text:00000000000007d0 PENCOLOR
             tvout.s:264    .text:00000000000007dc $d
             tvout.s:264    .text:00000000000007e0 _COLUMN
             tvout.s:264    .text:00000000000007e8 COLUMN
             tvout.s:271    .text:00000000000007f4 $d
             tvout.s:271    .text:00000000000007f8 _CURSOR_ROW
             tvout.s:271    .text:00000000000007fc $t
             tvout.s:271    .text:00000000000007fc CURSOR_ROW
             tvout.s:278    .text:0000000000000808 $d
             tvout.s:278    .text:000000000000080c _ROWY
             tvout.s:278    .text:0000000000000812 $t
             tvout.s:278    .text:0000000000000814 ROWY
             tvout.s:285    .text:0000000000000820 $d
             tvout.s:285    .text:0000000000000824 _COLX
             tvout.s:285    .text:000000000000082a $t
             tvout.s:285    .text:000000000000082c COLX
             tvout.s:292    .text:0000000000000838 $d
             tvout.s:292    .text:000000000000083c _FONT
             tvout.s:292    .text:0000000000000844 FONT
             tvout.s:645    .rodata:0000000000000000 font_6x8
             tvout.s:299    .text:0000000000000850 $d
             tvout.s:299    .text:0000000000000854 _VIDBUFF
             tvout.s:299    .text:000000000000085c $t
             tvout.s:299    .text:000000000000085c VIDBUFF
             tvout.s:311    .text:0000000000000866 $d
             tvout.s:311    .text:000000000000086a _PLOT
             tvout.s:311    .text:0000000000000870 PLOT
             tvout.s:359    .text:00000000000008f4 plot_op
             tvout.s:327    .text:000000000000089c op_back
             tvout.s:336    .text:00000000000008b6 op_pen
             tvout.s:345    .text:00000000000008d0 op_invert
             tvout.s:349    .text:00000000000008d8 op_xor
             tvout.s:359    .text:00000000000008f4 $d
             tvout.s:364    .text:00000000000008fc _VSYNC
             tvout.s:364    .text:0000000000000902 $t
             tvout.s:364    .text:0000000000000904 VSYNC
             tvout.s:372    .text:000000000000090e $d
             tvout.s:372    .text:0000000000000912 _CLS
             tvout.s:372    .text:0000000000000916 $t
ARM GAS  forth.s 			page 141


             tvout.s:372    .text:0000000000000918 CLS
             tvout.s:396    .text:000000000000095a $d
             tvout.s:396    .text:000000000000095e _CLRLINE
             tvout.s:396    .text:0000000000000966 $t
             tvout.s:396    .text:0000000000000968 CLRLINE
             tvout.s:398    .text:000000000000096c $d
             forth.s:559    .text:0000000000001790 STAR
             forth.s:541    .text:0000000000001770 PLUS
             forth.s:1420   .text:0000000000001ee4 FILL
             forth.s:100    .text:0000000000001402 UNNEST
             tvout.s:411    .text:00000000000009a0 _SCROLLUP
             tvout.s:411    .text:00000000000009ac SCROLLUP
             tvout.s:413    .text:00000000000009b0 $d
             forth.s:457    .text:00000000000016bc SWAP
             forth.s:550    .text:0000000000001780 SUBB
             forth.s:1398   .text:0000000000001eb0 MOVE
             tvout.s:430    .text:00000000000009f8 _RIGHT
             tvout.s:430    .text:00000000000009fe $t
             tvout.s:430    .text:0000000000000a00 RIGHT
             tvout.s:441    .text:0000000000000a20 TVCR
             tvout.s:441    .text:0000000000000a14 $d
             tvout.s:441    .text:0000000000000a18 _TVCR
             tvout.s:441    .text:0000000000000a1e $t
             tvout.s:452    .text:0000000000000a48 $d
             tvout.s:457    .text:0000000000000a50 FONT_PIXEL
             tvout.s:458    .text:0000000000000a50 $t
             tvout.s:464    .text:0000000000000a60 INCR_X
             tvout.s:471    .text:0000000000000a6c NEXT_PIXEL
             tvout.s:480    .text:0000000000000a74 CHAR_ROW
             tvout.s:482    .text:0000000000000a78 $d
             forth.s:729    .text:00000000000018e4 DDUP
             forth.s:396    .text:0000000000001640 RAT
             forth.s:302    .text:000000000000159c DONXT
             forth.s:720    .text:00000000000018d0 TDROP
             tvout.s:499    .text:0000000000000ab4 CHAR_FONT
             tvout.s:500    .text:0000000000000ab4 $t
             tvout.s:511    .text:0000000000000ac8 $d
             tvout.s:511    .text:0000000000000acc _TV_EMIT
             tvout.s:511    .text:0000000000000ad4 $t
             tvout.s:513    .text:0000000000000ad8 $d
             forth.s:801    .text:0000000000001978 ULESS
             forth.s:336    .text:00000000000015ce BRAN
             tvout.s:540    .text:0000000000000b58 CTRL_KEY
             forth.s:361    .text:0000000000001600 AT
             forth.s:689    .text:0000000000001894 ROT
             forth.s:379    .text:0000000000001620 CAT
             forth.s:590    .text:00000000000017cc ONEP
             forth.s:789    .text:0000000000001960 EQUAL
             tvout.s:590    .text:0000000000000bf0 DELBACK
             tvout.s:564    .text:0000000000000bbc CAR_RET
             tvout.s:573    .text:0000000000000bc8 LN_FEED
             tvout.s:565    .text:0000000000000bbc $t
             tvout.s:582    .text:0000000000000be8 $d
             tvout.s:591    .text:0000000000000bf0 $t
             tvout.s:592    .text:0000000000000bf4 $d
             forth.s:679    .text:0000000000001880 QDUP
             forth.s:598    .text:00000000000017dc ONEM
ARM GAS  forth.s 			page 142


             tvout.s:611    .text:0000000000000c40 _CURPOS
             tvout.s:611    .text:0000000000000c48 CURPOS
             tvout.s:626    .text:0000000000000c6a $d
             tvout.s:626    .text:0000000000000c6e _INPUT
             tvout.s:626    .text:0000000000000c74 $t
             tvout.s:626    .text:0000000000000c74 INPUT
             tvout.s:628    .text:0000000000000c78 $d
             forth.s:1342   .text:0000000000001e28 PAD
             forth.s:2330   .text:0000000000002930 ACCEP
             forth.s:441    .text:000000000000169c DROP
             forth.s:467    .text:00000000000016d0 OVER
             forth.s:369    .text:000000000000160c CSTOR
             tvout.s:641    .rodata:0000000000000000 $d
             tvout.s:746    .text:0000000000000ca4 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
ARM GAS  forth.s 			page 143


       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:83     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:84     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:85     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:86     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:87     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:88     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:89     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:90     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:91     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:92     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:93     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:94     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:95     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:96     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:97     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:98     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:99     *ABS*:000000000000008b VK_F11
       ps2_codes.inc:100    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:101    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:102    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:103    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:104    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:105    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:106    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:107    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:108    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:109    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:110    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:111    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:112    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:113    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:114    *ABS*:000000000000009b VK_CLOCK
ARM GAS  forth.s 			page 144


       ps2_codes.inc:115    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:116    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:117    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:118    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:119    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:120    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:121    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:122    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:123    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:124    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:125    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:127    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:128    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:129    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:130    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:131    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:132    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:133    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:134    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:135    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:137    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:138    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:139    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:140    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:141    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:142    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:143    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:144    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:145    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:146    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:147    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:148    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:150    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000cb4 sc_ascii
         mcSaite.inc:100    .text:0000000000000d68 shifted
         mcSaite.inc:151    .text:0000000000000dc8 altchar
         mcSaite.inc:167    .text:0000000000000dd8 extended
         mcSaite.inc:191    .text:0000000000000e00 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:0000000000000e34 $t
           ps2_kbd.s:178    .text:0000000000000f5e send_bit
           ps2_kbd.s:106    .text:0000000000000e94 start_bit
           ps2_kbd.s:117    .text:0000000000000eb8 parity_bit
ARM GAS  forth.s 			page 145


           ps2_kbd.s:124    .text:0000000000000ecc stop_bit
           ps2_kbd.s:151    .text:0000000000000f22 store_code
           ps2_kbd.s:253    .text:0000000000000ff4 do_async_key
           ps2_kbd.s:203    .text:0000000000000fa2 send_parity
           ps2_kbd.s:210    .text:0000000000000fb4 send_stop
           ps2_kbd.s:218    .text:0000000000000fc2 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000000fe2 is_async_key
           ps2_kbd.s:286    .text:0000000000001042 async_keys
           ps2_kbd.s:364    .text:00000000000010e6 table_scan
           ps2_kbd.s:260    .text:0000000000001006 set_async_key
           ps2_kbd.s:295    .text:0000000000001050 async_jump
           ps2_kbd.s:265    .text:0000000000001012 shift_key
           ps2_kbd.s:273    .text:0000000000001022 set_reset
           ps2_kbd.s:268    .text:0000000000001018 ctrl_key
           ps2_kbd.s:271    .text:000000000000101e alt_key
           ps2_kbd.s:287    .text:0000000000001042 $d
           ps2_kbd.s:326    .text:0000000000001092 $d
           ps2_kbd.s:326    .text:0000000000001096 _KEY_ASYNC
           ps2_kbd.s:326    .text:00000000000010a0 $t
           ps2_kbd.s:326    .text:00000000000010a0 KEY_ASYNC
           ps2_kbd.s:336    .text:00000000000010ae keycode
           ps2_kbd.s:351    .text:00000000000010d6 wait_code
           ps2_kbd.s:382    .text:0000000000001100 $d
           ps2_kbd.s:382    .text:0000000000001104 _PS2_QKEY
           ps2_kbd.s:400    .text:0000000000001156 inkey_exit
           ps2_kbd.s:402    .text:0000000000001158 pause_key
           ps2_kbd.s:411    .text:000000000000116c do_modifiers
           ps2_kbd.s:419    .text:0000000000001182 shift_down
           ps2_kbd.s:423    .text:0000000000001188 altchar_down
           ps2_kbd.s:427    .text:000000000000118e ctrl_down
           ps2_kbd.s:435    .text:00000000000011aa do_capslock
           ps2_kbd.s:461    .text:00000000000011ce kbd_send
           ps2_kbd.s:520    .text:0000000000001292 kbd_clear_queue
           ps2_kbd.s:534    .text:00000000000012b0 $d
           ps2_kbd.s:534    .text:00000000000012b4 _KBD_RST
           ps2_kbd.s:534    .text:00000000000012bc $t
           ps2_kbd.s:534    .text:00000000000012bc KBD_RST
           ps2_kbd.s:556    .text:0000000000001300 $d
           ps2_kbd.s:556    .text:0000000000001304 _KBD_LED
           ps2_kbd.s:556    .text:000000000000130c $t
           ps2_kbd.s:556    .text:000000000000130c KBD_LED
           ps2_kbd.s:581    .text:000000000000135e $d
           ps2_kbd.s:581    .text:0000000000001362 _CAPS_LED
           ps2_kbd.s:581    .text:000000000000136c CAPS_LED
           ps2_kbd.s:592    .text:0000000000001396 $d
           ps2_kbd.s:599    .text:00000000000013a2 _WKEY
           ps2_kbd.s:599    .text:00000000000013ac WKEY
           ps2_kbd.s:601    .text:00000000000013b0 $d
           ps2_kbd.s:606    .text:00000000000013c8 $d
             forth.s:80     .text:00000000000013e8 $t
             forth.s:83     .text:00000000000013e8 TPUSH
             forth.s:88     .text:00000000000013ee TPOP
             forth.s:113    .text:000000000000140c COMPI_NEST
             forth.s:126    .text:000000000000142a TSTDIN
             forth.s:133    .text:0000000000001434 TSTDOUT
             forth.s:142    .text:000000000000143e $d
             forth.s:142    .text:0000000000001442 _QKEY
ARM GAS  forth.s 			page 146


             forth.s:142    .text:0000000000001448 QKEY
             forth.s:143    .text:0000000000001448 QRX
             forth.s:145    .text:000000000000144c $d
             forth.s:1365   .text:0000000000001e60 ATEXE
             forth.s:153    .text:000000000000145c _KEY
             forth.s:153    .text:0000000000001460 $t
             forth.s:153    .text:0000000000001460 KEY
             forth.s:155    .text:0000000000001464 KEY1
             forth.s:156    .text:0000000000001464 $d
             forth.s:165    .text:000000000000147c _EMIT
             forth.s:166    .text:0000000000001484 TECHO
             forth.s:168    .text:0000000000001488 $d
             forth.s:202    .text:0000000000001498 _RAND
             forth.s:202    .text:00000000000014a0 RAND
             forth.s:204    .text:00000000000014a4 $d
             forth.s:768    .text:0000000000001938 ABSS
             forth.s:944    .text:0000000000001a78 SEED
             forth.s:532    .text:0000000000001760 LSHIFT
             forth.s:502    .text:0000000000001718 XORR
             forth.s:523    .text:0000000000001748 RSHIFT
             forth.s:1216   .text:0000000000001ce4 MODD
             forth.s:233    .text:0000000000001514 _PAUSE
             forth.s:233    .text:000000000000151a $t
             forth.s:233    .text:000000000000151c PAUSE
             forth.s:235    .text:0000000000001520 $d
             forth.s:962    .text:0000000000001aa0 TIMER
             forth.s:237    .text:0000000000001528 PAUSE_LOOP
             forth.s:242    .text:0000000000001540 PAUSE_EXIT
             forth.s:249    .text:0000000000001548 _ULED
             forth.s:249    .text:0000000000001550 ULED
             forth.s:258    .text:000000000000156c ULED_OFF
             forth.s:272    .text:0000000000001570 $d
             forth.s:272    .text:0000000000001574 _NOP
             forth.s:272    .text:0000000000001578 $t
             forth.s:272    .text:0000000000001578 NOP
             forth.s:289    .text:0000000000001584 $d
             forth.s:289    .text:0000000000001588 _EXECU
             forth.s:289    .text:0000000000001590 $t
             forth.s:289    .text:0000000000001590 EXECU
             forth.s:309    .text:00000000000015ac NEXT1
             forth.s:327    .text:00000000000015c8 QBRAN1
             forth.s:344    .text:00000000000015d4 $d
             forth.s:344    .text:00000000000015d8 _EXIT
             forth.s:344    .text:00000000000015e0 EXIT
             forth.s:345    .text:00000000000015e0 $d
             forth.s:351    .text:00000000000015e8 _STORE
             forth.s:351    .text:00000000000015ea $t
             forth.s:361    .text:00000000000015f8 $d
             forth.s:361    .text:00000000000015fc _AT
             forth.s:361    .text:00000000000015fe $t
             forth.s:369    .text:0000000000001604 $d
             forth.s:369    .text:0000000000001608 _CSTOR
             forth.s:379    .text:0000000000001618 $d
             forth.s:379    .text:000000000000161c _CAT
             forth.s:387    .text:0000000000001624 $d
             forth.s:387    .text:0000000000001628 _RFROM
             forth.s:396    .text:0000000000001636 $d
ARM GAS  forth.s 			page 147


             forth.s:396    .text:000000000000163a _RAT
             forth.s:405    .text:000000000000164a $d
             forth.s:405    .text:000000000000164e _TOR
             forth.s:414    .text:000000000000165e $d
             forth.s:414    .text:0000000000001662 _RPSTOR
             forth.s:414    .text:0000000000001666 $t
             forth.s:414    .text:0000000000001668 RPSTOR
             forth.s:423    .text:0000000000001670 $d
             forth.s:423    .text:0000000000001674 _SPSTOR
             forth.s:423    .text:0000000000001678 $t
             forth.s:423    .text:0000000000001678 SPSTOR
             forth.s:432    .text:0000000000001680 $d
             forth.s:432    .text:0000000000001684 _SPAT
             forth.s:432    .text:0000000000001688 $t
             forth.s:432    .text:0000000000001688 SPAT
             forth.s:441    .text:0000000000001690 $d
             forth.s:441    .text:0000000000001694 _DROP
             forth.s:449    .text:00000000000016a2 $d
             forth.s:449    .text:00000000000016a6 _DUPP
             forth.s:449    .text:00000000000016aa $t
             forth.s:457    .text:00000000000016b2 $d
             forth.s:457    .text:00000000000016b6 _SWAP
             forth.s:467    .text:00000000000016c4 $d
             forth.s:467    .text:00000000000016c8 _OVER
             forth.s:476    .text:00000000000016d8 $d
             forth.s:476    .text:00000000000016dc _ZLESS
             forth.s:476    .text:00000000000016e0 ZLESS
             forth.s:484    .text:00000000000016e6 $d
             forth.s:484    .text:00000000000016ea _ANDD
             forth.s:484    .text:00000000000016ee $t
             forth.s:493    .text:00000000000016fa $d
             forth.s:493    .text:00000000000016fe _ORR
             forth.s:493    .text:0000000000001704 ORR
             forth.s:502    .text:000000000000170e $d
             forth.s:502    .text:0000000000001712 _XORR
             forth.s:502    .text:0000000000001716 $t
             forth.s:511    .text:0000000000001722 $d
             forth.s:511    .text:0000000000001726 _UPLUS
             forth.s:511    .text:000000000000172a $t
             forth.s:511    .text:000000000000172c UPLUS
             forth.s:523    .text:000000000000173c $d
             forth.s:523    .text:0000000000001740 _RSHIFT
             forth.s:532    .text:0000000000001752 $d
             forth.s:532    .text:0000000000001756 _LSHIFT
             forth.s:541    .text:000000000000176a $d
             forth.s:541    .text:000000000000176e _PLUS
             forth.s:541    .text:0000000000001770 $t
             forth.s:550    .text:0000000000001778 $d
             forth.s:550    .text:000000000000177c _SUBB
             forth.s:550    .text:000000000000177e $t
             forth.s:559    .text:000000000000178a $d
             forth.s:559    .text:000000000000178e _STAR
             forth.s:559    .text:0000000000001790 $t
             forth.s:568    .text:000000000000179a $d
             forth.s:568    .text:000000000000179e _UMSTA
             forth.s:568    .text:00000000000017a2 $t
             forth.s:568    .text:00000000000017a4 UMSTA
ARM GAS  forth.s 			page 148


             forth.s:579    .text:00000000000017b0 $d
             forth.s:579    .text:00000000000017b4 _MSTAR
             forth.s:579    .text:00000000000017b8 MSTAR
             forth.s:590    .text:00000000000017c4 $d
             forth.s:590    .text:00000000000017c8 _ONEP
             forth.s:598    .text:00000000000017d2 $d
             forth.s:598    .text:00000000000017d6 _ONEM
             forth.s:606    .text:00000000000017e2 $d
             forth.s:606    .text:00000000000017e6 _TWOP
             forth.s:606    .text:00000000000017ec TWOP
             forth.s:614    .text:00000000000017f2 $d
             forth.s:614    .text:00000000000017f6 _TWOM
             forth.s:614    .text:00000000000017fc TWOM
             forth.s:622    .text:0000000000001802 $d
             forth.s:622    .text:0000000000001806 _CELLP
             forth.s:622    .text:000000000000180c $t
             forth.s:622    .text:000000000000180c CELLP
             forth.s:630    .text:0000000000001812 $d
             forth.s:630    .text:0000000000001816 _CELLM
             forth.s:630    .text:000000000000181c $t
             forth.s:630    .text:000000000000181c CELLM
             forth.s:638    .text:0000000000001822 $d
             forth.s:638    .text:0000000000001826 _BLANK
             forth.s:638    .text:000000000000182c BLANK
             forth.s:647    .text:0000000000001836 $d
             forth.s:647    .text:000000000000183a _CELLS
             forth.s:647    .text:0000000000001840 $t
             forth.s:647    .text:0000000000001840 CELLS
             forth.s:655    .text:0000000000001846 $d
             forth.s:655    .text:000000000000184a _CELLSL
             forth.s:655    .text:0000000000001850 $t
             forth.s:655    .text:0000000000001850 CELLSL
             forth.s:663    .text:0000000000001856 $d
             forth.s:663    .text:000000000000185a _TWOST
             forth.s:663    .text:0000000000001860 TWOST
             forth.s:671    .text:0000000000001866 $d
             forth.s:671    .text:000000000000186a _TWOSL
             forth.s:671    .text:0000000000001870 TWOSL
             forth.s:679    .text:0000000000001876 $d
             forth.s:679    .text:000000000000187a _QDUP
             forth.s:689    .text:000000000000188a $d
             forth.s:689    .text:000000000000188e _ROT
             forth.s:689    .text:0000000000001892 $t
             forth.s:700    .text:000000000000189e $d
             forth.s:700    .text:00000000000018a2 _NROT
             forth.s:700    .text:00000000000018a8 NROT
             forth.s:711    .text:00000000000018b2 $d
             forth.s:711    .text:00000000000018b6 _DDROP
             forth.s:711    .text:00000000000018bc $t
             forth.s:711    .text:00000000000018bc DDROP
             forth.s:720    .text:00000000000018c6 $d
             forth.s:720    .text:00000000000018ca _TDROP
             forth.s:720    .text:00000000000018d0 $t
             forth.s:729    .text:00000000000018da $d
             forth.s:729    .text:00000000000018de _DDUP
             forth.s:739    .text:00000000000018f0 $d
             forth.s:739    .text:00000000000018f4 _DPLUS
ARM GAS  forth.s 			page 149


             forth.s:739    .text:00000000000018f8 DPLUS
             forth.s:752    .text:000000000000190c $d
             forth.s:752    .text:0000000000001910 _INVER
             forth.s:752    .text:0000000000001914 $t
             forth.s:752    .text:0000000000001914 INVER
             forth.s:760    .text:000000000000191a $d
             forth.s:760    .text:000000000000191e _NEGAT
             forth.s:760    .text:0000000000001928 NEGAT
             forth.s:768    .text:000000000000192e $d
             forth.s:768    .text:0000000000001932 _ABSS
             forth.s:768    .text:0000000000001936 $t
             forth.s:778    .text:0000000000001942 $d
             forth.s:778    .text:0000000000001946 _ZEQUAL
             forth.s:778    .text:000000000000194c ZEQUAL
             forth.s:789    .text:000000000000195a $d
             forth.s:789    .text:000000000000195e _EQUAL
             forth.s:789    .text:0000000000001960 $t
             forth.s:801    .text:0000000000001970 $d
             forth.s:801    .text:0000000000001974 _ULESS
             forth.s:813    .text:0000000000001988 $d
             forth.s:813    .text:000000000000198c _LESS
             forth.s:813    .text:000000000000198e $t
             forth.s:813    .text:0000000000001990 LESS
             forth.s:825    .text:00000000000019a0 $d
             forth.s:825    .text:00000000000019a4 _GREAT
             forth.s:825    .text:00000000000019a6 $t
             forth.s:825    .text:00000000000019a8 GREAT
             forth.s:837    .text:00000000000019b8 $d
             forth.s:837    .text:00000000000019bc _MAX
             forth.s:837    .text:00000000000019c0 $t
             forth.s:837    .text:00000000000019c0 MAX
             forth.s:848    .text:00000000000019cc $d
             forth.s:848    .text:00000000000019d0 _MIN
             forth.s:848    .text:00000000000019d4 $t
             forth.s:848    .text:00000000000019d4 MIN
             forth.s:859    .text:00000000000019e0 $d
             forth.s:859    .text:00000000000019e4 _PSTOR
             forth.s:859    .text:00000000000019e8 PSTOR
             forth.s:871    .text:00000000000019f8 $d
             forth.s:871    .text:00000000000019fc _DSTOR
             forth.s:871    .text:0000000000001a00 DSTOR
             forth.s:883    .text:0000000000001a14 $d
             forth.s:883    .text:0000000000001a18 _DAT
             forth.s:883    .text:0000000000001a1c DAT
             forth.s:893    .text:0000000000001a26 $d
             forth.s:893    .text:0000000000001a2a _COUNT
             forth.s:893    .text:0000000000001a30 $t
             forth.s:903    .text:0000000000001a3c $d
             forth.s:903    .text:0000000000001a40 _DNEGA
             forth.s:903    .text:0000000000001a48 $t
             forth.s:903    .text:0000000000001a48 DNEGA
             forth.s:920    .text:0000000000001a58 DOVAR
             forth.s:931    .text:0000000000001a64 DOCON
             forth.s:944    .text:0000000000001a6e $d
             forth.s:944    .text:0000000000001a72 _SEED
             forth.s:953    .text:0000000000001a82 $d
             forth.s:953    .text:0000000000001a86 _MSEC
ARM GAS  forth.s 			page 150


             forth.s:953    .text:0000000000001a8c MSEC
             forth.s:962    .text:0000000000001a96 $d
             forth.s:962    .text:0000000000001a9a _TIMER
             forth.s:962    .text:0000000000001aa0 $t
             forth.s:971    .text:0000000000001aaa $d
             forth.s:971    .text:0000000000001aae _TBOOT
             forth.s:971    .text:0000000000001ab4 $t
             forth.s:971    .text:0000000000001ab4 TBOOT
             forth.s:980    .text:0000000000001abe $d
             forth.s:980    .text:0000000000001ac2 _BASE
             forth.s:990    .text:0000000000001ad2 TEMP
             forth.s:999    .text:0000000000001adc $d
             forth.s:999    .text:0000000000001ae0 _SPAN
             forth.s:999    .text:0000000000001ae8 SPAN
             forth.s:1008   .text:0000000000001af2 $d
             forth.s:1008   .text:0000000000001af6 _INN
             forth.s:1008   .text:0000000000001afa $t
             forth.s:1008   .text:0000000000001afc INN
             forth.s:1018   .text:0000000000001b06 $d
             forth.s:1018   .text:0000000000001b0a _NTIB
             forth.s:1018   .text:0000000000001b10 NTIB
             forth.s:1027   .text:0000000000001b1a $d
             forth.s:1027   .text:0000000000001b1e _TEVAL
             forth.s:1027   .text:0000000000001b24 $t
             forth.s:1027   .text:0000000000001b24 TEVAL
             forth.s:1037   .text:0000000000001b2e $d
             forth.s:1037   .text:0000000000001b32 _HLD
             forth.s:1037   .text:0000000000001b36 $t
             forth.s:1037   .text:0000000000001b38 HLD
             forth.s:1047   .text:0000000000001b42 $d
             forth.s:1047   .text:0000000000001b46 _CNTXT
             forth.s:1047   .text:0000000000001b4e $t
             forth.s:1047   .text:0000000000001b50 CNTXT
             forth.s:1048   .text:0000000000001b50 CRRNT
             forth.s:1058   .text:0000000000001b5a $d
             forth.s:1058   .text:0000000000001b5e _CPP
             forth.s:1058   .text:0000000000001b64 CPP
             forth.s:1068   .text:0000000000001b6e $d
             forth.s:1068   .text:0000000000001b72 _FCP
             forth.s:1068   .text:0000000000001b76 $t
             forth.s:1068   .text:0000000000001b78 FCP
             forth.s:1078   .text:0000000000001b82 $d
             forth.s:1078   .text:0000000000001b86 _LAST
             forth.s:1078   .text:0000000000001b8c LAST
             forth.s:1092   .text:0000000000001b96 $d
             forth.s:1092   .text:0000000000001b9a _USER_BEGIN
             forth.s:1092   .text:0000000000001ba8 USER_BEGIN
             forth.s:1093   .text:0000000000001ba8 $d
             forth.s:1094   .text:0000000000001bac $t
             forth.s:1097   .text:0000000000001bb4 USR_BGN_ADR
             forth.s:1098   .text:0000000000001bb4 $d
             forth.s:1104   .text:0000000000001bbc _USER_END
             forth.s:1104   .text:0000000000001bc8 USER_END
             forth.s:1108   .text:0000000000001bd0 USER_END_ADR
             forth.s:1109   .text:0000000000001bd0 $d
             forth.s:1121   .text:0000000000001bd8 _WITHI
             forth.s:1121   .text:0000000000001be0 WITHI
ARM GAS  forth.s 			page 151


             forth.s:1123   .text:0000000000001be4 $d
             forth.s:1138   .text:0000000000001c04 _UMMOD
             forth.s:1138   .text:0000000000001c0c UMMOD
             forth.s:1142   .text:0000000000001c16 UMMOD0
             forth.s:1149   .text:0000000000001c26 UMMOD1
             forth.s:1155   .text:0000000000001c30 UMMOD2
             forth.s:1168   .text:0000000000001c3c $d
             forth.s:1168   .text:0000000000001c40 _MSMOD
             forth.s:1168   .text:0000000000001c46 $t
             forth.s:1168   .text:0000000000001c48 MSMOD
             forth.s:1170   .text:0000000000001c4c $d
             forth.s:1179   .text:0000000000001c74 MMOD1
             forth.s:1186   .text:0000000000001c90 MMOD2
             forth.s:1194   .text:0000000000001cb0 MMOD3
             forth.s:1202   .text:0000000000001cb8 _SLMOD
             forth.s:1202   .text:0000000000001cc0 SLMOD
             forth.s:1203   .text:0000000000001cc0 $d
             forth.s:1204   .text:0000000000001cc4 $t
             forth.s:1205   .text:0000000000001cc8 $d
             forth.s:1216   .text:0000000000001ce0 _MODD
             forth.s:1216   .text:0000000000001ce4 $t
             forth.s:1218   .text:0000000000001ce8 $d
             forth.s:1227   .text:0000000000001cf8 _SLASH
             forth.s:1227   .text:0000000000001cfa $t
             forth.s:1227   .text:0000000000001cfc SLASH
             forth.s:1229   .text:0000000000001d00 $d
             forth.s:1240   .text:0000000000001d14 _SSMOD
             forth.s:1240   .text:0000000000001d1a $t
             forth.s:1240   .text:0000000000001d1c SSMOD
             forth.s:1242   .text:0000000000001d20 $d
             forth.s:1254   .text:0000000000001d38 _STASL
             forth.s:1254   .text:0000000000001d3c STASL
             forth.s:1256   .text:0000000000001d40 $d
             forth.s:1270   .text:0000000000001d54 _ALGND
             forth.s:1270   .text:0000000000001d5c $t
             forth.s:1270   .text:0000000000001d5c ALGND
             forth.s:1281   .text:0000000000001d6c $d
             forth.s:1281   .text:0000000000001d70 _TCHAR
             forth.s:1281   .text:0000000000001d76 $t
             forth.s:1281   .text:0000000000001d78 TCHAR
             forth.s:1283   .text:0000000000001d7c $d
             forth.s:1293   .text:0000000000001db4 TCHA1
             forth.s:1301   .text:0000000000001dbc _DEPTH
             forth.s:1301   .text:0000000000001dc2 $t
             forth.s:1301   .text:0000000000001dc4 DEPTH
             forth.s:1313   .text:0000000000001ddc $d
             forth.s:1313   .text:0000000000001de0 _PICK
             forth.s:1313   .text:0000000000001de8 PICK
             forth.s:1315   .text:0000000000001dec $d
             forth.s:1331   .text:0000000000001e08 _HERE
             forth.s:1331   .text:0000000000001e10 HERE
             forth.s:1333   .text:0000000000001e14 $d
             forth.s:1342   .text:0000000000001e24 _PAD
             forth.s:1342   .text:0000000000001e28 $t
             forth.s:1344   .text:0000000000001e2c $d
             forth.s:1355   .text:0000000000001e44 _TIB
             forth.s:1355   .text:0000000000001e48 $t
ARM GAS  forth.s 			page 152


             forth.s:1355   .text:0000000000001e48 TIB
             forth.s:1365   .text:0000000000001e52 $d
             forth.s:1365   .text:0000000000001e56 _ATEXE
             forth.s:1378   .text:0000000000001e74 $d
             forth.s:1378   .text:0000000000001e78 _CMOVE
             forth.s:1378   .text:0000000000001e7e $t
             forth.s:1378   .text:0000000000001e80 CMOVE
             forth.s:1385   .text:0000000000001e92 CMOV1
             forth.s:1382   .text:0000000000001e8a CMOV0
             forth.s:1390   .text:0000000000001e9c CMOV2
             forth.s:1398   .text:0000000000001ea4 $d
             forth.s:1398   .text:0000000000001ea8 _MOVE
             forth.s:1406   .text:0000000000001ec6 MOVE1
             forth.s:1403   .text:0000000000001ebe MOVE0
             forth.s:1411   .text:0000000000001ed0 MOVE2
             forth.s:1420   .text:0000000000001ed8 $d
             forth.s:1420   .text:0000000000001edc _FILL
             forth.s:1428   .text:0000000000001ef2 FILL2
             forth.s:1424   .text:0000000000001eea FILL1
             forth.s:1438   .text:0000000000001efa $d
             forth.s:1438   .text:0000000000001efe _PACKS
             forth.s:1438   .text:0000000000001f04 $t
             forth.s:1438   .text:0000000000001f04 PACKS
             forth.s:1440   .text:0000000000001f08 $d
             forth.s:1469   .text:0000000000001f60 _DIGIT
             forth.s:1469   .text:0000000000001f66 $t
             forth.s:1469   .text:0000000000001f68 DIGIT
             forth.s:1471   .text:0000000000001f6c $d
             forth.s:1486   .text:0000000000001fa0 _EXTRC
             forth.s:1486   .text:0000000000001fa8 $t
             forth.s:1486   .text:0000000000001fa8 EXTRC
             forth.s:1488   .text:0000000000001fac $d
             forth.s:1500   .text:0000000000001fcc _BDIGS
             forth.s:1500   .text:0000000000001fd0 BDIGS
             forth.s:1502   .text:0000000000001fd4 $d
             forth.s:1512   .text:0000000000001fe8 _HOLD
             forth.s:1514   .text:0000000000001ff4 $d
             forth.s:1530   .text:0000000000002018 _DIG
             forth.s:1530   .text:000000000000201a $t
             forth.s:1530   .text:000000000000201c DIG
             forth.s:1532   .text:0000000000002020 $d
             forth.s:1544   .text:0000000000002038 _DIGS
             forth.s:1544   .text:000000000000203c DIGS
             forth.s:1546   .text:0000000000002040 DIGS1
             forth.s:1547   .text:0000000000002040 $d
             forth.s:1551   .text:0000000000002058 DIGS2
             forth.s:1560   .text:0000000000002060 _SIGN
             forth.s:1560   .text:0000000000002068 SIGN
             forth.s:1562   .text:000000000000206c $d
             forth.s:1566   .text:0000000000002084 SIGN1
             forth.s:1574   .text:000000000000208c _EDIGS
             forth.s:1574   .text:0000000000002090 EDIGS
             forth.s:1576   .text:0000000000002094 $d
             forth.s:1591   .text:00000000000020b0 STRR
             forth.s:1592   .text:00000000000020b0 $t
             forth.s:1593   .text:00000000000020b4 $d
             forth.s:1609   .text:00000000000020dc _HEX
ARM GAS  forth.s 			page 153


             forth.s:1609   .text:00000000000020e0 $t
             forth.s:1609   .text:00000000000020e0 HEX
             forth.s:1611   .text:00000000000020e4 $d
             forth.s:1621   .text:00000000000020fc _DECIM
             forth.s:1621   .text:0000000000002104 $t
             forth.s:1621   .text:0000000000002104 DECIM
             forth.s:1623   .text:0000000000002108 $d
             forth.s:1638   .text:0000000000002120 _DIGTQ
             forth.s:1638   .text:0000000000002128 DIGTQ
             forth.s:1640   .text:000000000000212c $d
             forth.s:1653   .text:0000000000002174 DGTQ1
             forth.s:1664   .text:0000000000002188 _NUMBQ
             forth.s:1664   .text:0000000000002190 $t
             forth.s:1664   .text:0000000000002190 NUMBQ
             forth.s:1666   .text:0000000000002194 $d
             forth.s:1682   .text:00000000000021e0 NUMQ1
             forth.s:1730   .text:00000000000022a8 NUMQ6
             forth.s:1698   .text:0000000000002224 NUMQ2
             forth.s:1722   .text:000000000000228c NUMQ4
             forth.s:1719   .text:0000000000002280 NUMQ3
             forth.s:1728   .text:00000000000022a4 NUMQ5
             forth.s:1748   .text:00000000000022c4 _SPACE
             forth.s:1748   .text:00000000000022ca $t
             forth.s:1750   .text:00000000000022d0 $d
             forth.s:1759   .text:00000000000022e0 _SPACS
             forth.s:1759   .text:00000000000022e8 SPACS
             forth.s:1761   .text:00000000000022ec $d
             forth.s:1767   .text:0000000000002308 CHAR2
             forth.s:1765   .text:0000000000002304 CHAR1
             forth.s:1776   .text:0000000000002318 _TYPEE
             forth.s:1778   .text:0000000000002324 $d
             forth.s:1784   .text:000000000000233c TYPE2
             forth.s:1780   .text:0000000000002330 TYPE1
             forth.s:1794   .text:0000000000002350 _CR
             forth.s:1794   .text:0000000000002354 CR
             forth.s:1796   .text:0000000000002358 $d
             forth.s:1808   .text:0000000000002374 DOSTR
             forth.s:1809   .text:0000000000002374 $t
             forth.s:1811   .text:0000000000002378 $d
             forth.s:1829   .text:00000000000023a0 STRQP
             forth.s:1830   .text:00000000000023a0 $t
             forth.s:1831   .text:00000000000023a4 $d
             forth.s:1840   .text:00000000000023ac DOTST
             forth.s:1841   .text:00000000000023ac $t
             forth.s:1842   .text:00000000000023b0 $d
             forth.s:1852   .text:00000000000023bc DOTQP
             forth.s:1853   .text:00000000000023bc $t
             forth.s:1854   .text:00000000000023c0 $d
             forth.s:1864   .text:00000000000023d0 _DOTR
             forth.s:1864   .text:00000000000023d4 DOTR
             forth.s:1866   .text:00000000000023d8 $d
             forth.s:1881   .text:00000000000023fc _UDOTR
             forth.s:1881   .text:0000000000002400 $t
             forth.s:1881   .text:0000000000002400 UDOTR
             forth.s:1883   .text:0000000000002404 $d
             forth.s:1899   .text:0000000000002430 _UDOT
             forth.s:1899   .text:0000000000002434 UDOT
ARM GAS  forth.s 			page 154


             forth.s:1901   .text:0000000000002438 $d
             forth.s:1914   .text:0000000000002454 _DOT
             forth.s:1914   .text:0000000000002456 $t
             forth.s:1916   .text:000000000000245c $d
             forth.s:1923   .text:0000000000002480 DOT1
             forth.s:1934   .text:0000000000002494 _QUEST
             forth.s:1934   .text:0000000000002496 $t
             forth.s:1934   .text:0000000000002498 QUEST
             forth.s:1936   .text:000000000000249c $d
             forth.s:1950   .text:00000000000024a8 PARS
             forth.s:1951   .text:00000000000024a8 $t
             forth.s:1952   .text:00000000000024ac $d
             forth.s:2018   .text:00000000000025bc PARS8
             forth.s:1982   .text:0000000000002530 PARS3
             forth.s:1965   .text:00000000000024e8 PARS1
             forth.s:1980   .text:000000000000252c PARS2
             forth.s:1986   .text:000000000000253c PARS4
             forth.s:1998   .text:000000000000256c PARS5
             forth.s:2005   .text:0000000000002590 PARS6
             forth.s:2011   .text:00000000000025a4 PARS7
             forth.s:2029   .text:00000000000025d0 _PARSE
             forth.s:2029   .text:00000000000025d6 $t
             forth.s:2029   .text:00000000000025d8 PARSE
             forth.s:2031   .text:00000000000025dc $d
             forth.s:2052   .text:000000000000261c _DOTPR
             forth.s:2052   .text:0000000000002620 DOTPR
             forth.s:2054   .text:0000000000002624 $d
             forth.s:2065   .text:000000000000263c _PAREN
             forth.s:2065   .text:000000000000263e $t
             forth.s:2065   .text:0000000000002640 PAREN
             forth.s:2067   .text:0000000000002644 $d
             forth.s:2078   .text:000000000000265c _BKSLA
             forth.s:2078   .text:000000000000265e $t
             forth.s:2078   .text:0000000000002660 BKSLA
             forth.s:2080   .text:0000000000002664 $d
             forth.s:2091   .text:000000000000267c _CHAR
             forth.s:2091   .text:0000000000002684 CHAR
             forth.s:2093   .text:0000000000002688 $d
             forth.s:2104   .text:00000000000026a0 _WORDD
             forth.s:2104   .text:00000000000026a8 WORDD
             forth.s:2106   .text:00000000000026ac $d
             forth.s:2118   .text:00000000000026c4 _TOKEN
             forth.s:2118   .text:00000000000026ca $t
             forth.s:2118   .text:00000000000026cc TOKEN
             forth.s:2120   .text:00000000000026d0 $d
             forth.s:2133   .text:00000000000026e0 _NAMET
             forth.s:2133   .text:00000000000026e6 $t
             forth.s:2133   .text:00000000000026e8 NAMET
             forth.s:2135   .text:00000000000026ec $d
             forth.s:2154   .text:000000000000270c _SAMEQ
             forth.s:2154   .text:0000000000002712 $t
             forth.s:2154   .text:0000000000002714 SAMEQ
             forth.s:2156   .text:0000000000002718 $d
             forth.s:2173   .text:0000000000002760 SAME2
             forth.s:2158   .text:0000000000002724 SAME1
             forth.s:2188   .text:0000000000002774 FIND
             forth.s:2189   .text:0000000000002774 $t
ARM GAS  forth.s 			page 155


             forth.s:2190   .text:0000000000002778 $d
             forth.s:2197   .text:0000000000002794 FIND1
             forth.s:2217   .text:00000000000027ec FIND6
             forth.s:2210   .text:00000000000027d4 FIND2
             forth.s:2215   .text:00000000000027e4 FIND3
             forth.s:2224   .text:0000000000002804 FIND4
             forth.s:2230   .text:0000000000002820 FIND5
             forth.s:2246   .text:0000000000002848 _NAMEQ
             forth.s:2246   .text:000000000000284e $t
             forth.s:2246   .text:0000000000002850 NAMEQ
             forth.s:2248   .text:0000000000002854 $d
             forth.s:2262   .text:0000000000002864 BKSP
             forth.s:2263   .text:0000000000002864 $t
             forth.s:2264   .text:0000000000002868 $d
             forth.s:2278   .text:00000000000028ac BACK1
             forth.s:2287   .text:00000000000028b0 TAP
             forth.s:2288   .text:00000000000028b0 $t
             forth.s:2289   .text:00000000000028b4 $d
             forth.s:2301   .text:00000000000028cc KTAP
             forth.s:2302   .text:00000000000028cc TTAP
             forth.s:2303   .text:00000000000028cc $t
             forth.s:2304   .text:00000000000028d0 $d
             forth.s:2318   .text:0000000000002910 KTAP2
             forth.s:2315   .text:0000000000002908 KTAP1
             forth.s:2330   .text:0000000000002928 _ACCEP
             forth.s:2332   .text:0000000000002934 $d
             forth.s:2335   .text:0000000000002940 ACCP1
             forth.s:2351   .text:0000000000002988 ACCP4
             forth.s:2347   .text:000000000000297c ACCP2
             forth.s:2349   .text:0000000000002980 ACCP3
             forth.s:2362   .text:000000000000299c _QUERY
             forth.s:2362   .text:00000000000029a2 $t
             forth.s:2362   .text:00000000000029a4 QUERY
             forth.s:2364   .text:00000000000029a8 $d
             forth.s:2384   .text:00000000000029dc _ABORT
             forth.s:2384   .text:00000000000029e2 $t
             forth.s:2384   .text:00000000000029e4 ABORT
             forth.s:2386   .text:00000000000029e8 ABORT1
             forth.s:2387   .text:00000000000029e8 $d
             forth.s:2518   .text:0000000000002b8c QUIT
             forth.s:2402   .text:0000000000002a10 ABORQ
             forth.s:2403   .text:0000000000002a10 $t
             forth.s:2404   .text:0000000000002a14 $d
             forth.s:2422   .text:0000000000002a38 _INTER
             forth.s:2424   .text:0000000000002a48 $d
             forth.s:2433   .text:0000000000002a84 INTE1
             forth.s:2430   .text:0000000000002a7a $t
             forth.s:2431   .text:0000000000002a7c $d
             forth.s:2437   .text:0000000000002a94 INTE2
             forth.s:2444   .text:0000000000002a9c _LBRAC
             forth.s:2444   .text:0000000000002a9e $t
             forth.s:2444   .text:0000000000002aa0 LBRAC
             forth.s:2446   .text:0000000000002aa4 $d
             forth.s:2456   .text:0000000000002abc _DOTOK
             forth.s:2456   .text:0000000000002ac0 $t
             forth.s:2456   .text:0000000000002ac0 DOTOK
             forth.s:2458   .text:0000000000002ac4 $d
ARM GAS  forth.s 			page 156


             forth.s:2464   .text:0000000000002ae8 DOTO1
             forth.s:2465   .text:0000000000002ae8 $d
             forth.s:2473   .text:0000000000002af4 _QSTAC
             forth.s:2473   .text:0000000000002afc QSTAC
             forth.s:2475   .text:0000000000002b00 $d
             forth.s:2477   .text:0000000000002b16 $t
             forth.s:2478   .text:0000000000002b18 $d
             forth.s:2485   .text:0000000000002b20 _EVAL
             forth.s:2487   .text:0000000000002b2c EVAL1
             forth.s:2488   .text:0000000000002b2c $d
             forth.s:2496   .text:0000000000002b54 EVAL2
             forth.s:2506   .text:0000000000002b64 _PRESE
             forth.s:2508   .text:0000000000002b70 $d
             forth.s:2518   .text:0000000000002b84 _QUIT
             forth.s:2519   .text:0000000000002b8c $d
             forth.s:2521   .text:0000000000002b98 QUIT1
             forth.s:2523   .text:0000000000002b9c QUIT2
             forth.s:2533   .text:0000000000002bb0 _FORGET
             forth.s:2533   .text:0000000000002bb8 FORGET
             forth.s:2535   .text:0000000000002bbc $d
             forth.s:2952   .text:0000000000003064 OVERT
             forth.s:2563   .text:0000000000002c04 $d
             forth.s:2563   .text:0000000000002c08 _TICK
             forth.s:2563   .text:0000000000002c0a $t
             forth.s:2563   .text:0000000000002c0c TICK
             forth.s:2565   .text:0000000000002c10 $d
             forth.s:2569   .text:0000000000002c24 TICK1
             forth.s:2577   .text:0000000000002c2c _ALLOT
             forth.s:2577   .text:0000000000002c32 $t
             forth.s:2577   .text:0000000000002c34 ALLOT
             forth.s:2579   .text:0000000000002c38 $d
             forth.s:2588   .text:0000000000002c48 _COMMA
             forth.s:2588   .text:0000000000002c4a $t
             forth.s:2588   .text:0000000000002c4c COMMA
             forth.s:2590   .text:0000000000002c50 $d
             forth.s:2604   .text:0000000000002c6c $d
             forth.s:2604   .text:0000000000002c70 _BCOMP
             forth.s:2604   .text:0000000000002c7a $t
             forth.s:2604   .text:0000000000002c7c BCOMP
             forth.s:2606   .text:0000000000002c80 $d
             forth.s:2616   .text:0000000000002c90 _COMPI
             forth.s:2616   .text:0000000000002c98 $t
             forth.s:2616   .text:0000000000002c98 COMPI
             forth.s:2618   .text:0000000000002c9c $d
             forth.s:2634   .text:0000000000002cc8 _LITER
             forth.s:2634   .text:0000000000002cd0 $t
             forth.s:2634   .text:0000000000002cd0 LITER
             forth.s:2636   .text:0000000000002cd4 $d
             forth.s:2991   .text:00000000000030c0 CALLC
             forth.s:2646   .text:0000000000002ce8 STRCQ
             forth.s:2647   .text:0000000000002ce8 $t
             forth.s:2648   .text:0000000000002cec $d
             forth.s:2670   .text:0000000000002d24 _FOR
             forth.s:2670   .text:0000000000002d28 $t
             forth.s:2670   .text:0000000000002d28 FOR
             forth.s:2672   .text:0000000000002d2c $d
             forth.s:2682   .text:0000000000002d44 _BEGIN
ARM GAS  forth.s 			page 157


             forth.s:2682   .text:0000000000002d4a $t
             forth.s:2682   .text:0000000000002d4c BEGIN
             forth.s:2684   .text:0000000000002d50 $d
             forth.s:2693   .text:0000000000002d58 $d
             forth.s:2693   .text:0000000000002d5c _FNEXT
             forth.s:2693   .text:0000000000002d64 FNEXT
             forth.s:2695   .text:0000000000002d68 $d
             forth.s:2704   .text:0000000000002d80 _UNTIL
             forth.s:2704   .text:0000000000002d86 $t
             forth.s:2704   .text:0000000000002d88 UNTIL
             forth.s:2706   .text:0000000000002d8c $d
             forth.s:2715   .text:0000000000002da4 _AGAIN
             forth.s:2715   .text:0000000000002daa $t
             forth.s:2715   .text:0000000000002dac AGAIN
             forth.s:2717   .text:0000000000002db0 $d
             forth.s:2726   .text:0000000000002dc8 _IFF
             forth.s:2726   .text:0000000000002dcc IFF
             forth.s:2728   .text:0000000000002dd0 $d
             forth.s:2740   .text:0000000000002df8 _AHEAD
             forth.s:2740   .text:0000000000002dfe $t
             forth.s:2740   .text:0000000000002e00 AHEAD
             forth.s:2742   .text:0000000000002e04 $d
             forth.s:2754   .text:0000000000002e2c _REPEA
             forth.s:2754   .text:0000000000002e34 REPEA
             forth.s:2756   .text:0000000000002e38 $d
             forth.s:2767   .text:0000000000002e50 _THENN
             forth.s:2767   .text:0000000000002e58 THENN
             forth.s:2769   .text:0000000000002e5c $d
             forth.s:2780   .text:0000000000002e70 _AFT
             forth.s:2780   .text:0000000000002e74 $t
             forth.s:2780   .text:0000000000002e74 AFT
             forth.s:2782   .text:0000000000002e78 $d
             forth.s:2794   .text:0000000000002e90 _ELSEE
             forth.s:2794   .text:0000000000002e98 ELSEE
             forth.s:2796   .text:0000000000002e9c $d
             forth.s:2806   .text:0000000000002eb0 _WHILE
             forth.s:2806   .text:0000000000002eb6 $t
             forth.s:2806   .text:0000000000002eb8 WHILE
             forth.s:2808   .text:0000000000002ebc $d
             forth.s:2817   .text:0000000000002ecc _ABRTQ
             forth.s:2817   .text:0000000000002ed4 ABRTQ
             forth.s:2819   .text:0000000000002ed8 $d
             forth.s:2828   .text:0000000000002ef0 _STRQ
             forth.s:2828   .text:0000000000002ef4 STRQ
             forth.s:2830   .text:0000000000002ef8 $d
             forth.s:2840   .text:0000000000002f10 _DOTQ
             forth.s:2840   .text:0000000000002f14 DOTQ
             forth.s:2842   .text:0000000000002f18 $d
             forth.s:2856   .text:0000000000002f30 _UNIQU
             forth.s:2856   .text:0000000000002f38 $t
             forth.s:2856   .text:0000000000002f38 UNIQU
             forth.s:2858   .text:0000000000002f3c $d
             forth.s:2865   .text:0000000000002f64 UNIQ1
             forth.s:2862   .text:0000000000002f58 $d
             forth.s:2875   .text:0000000000002f6c SNAME
             forth.s:2876   .text:0000000000002f6c $t
             forth.s:2877   .text:0000000000002f70 $d
ARM GAS  forth.s 			page 158


             forth.s:2893   .text:0000000000002fb4 SNAM1
             forth.s:2905   .text:0000000000002fc8 _SCOMP
             forth.s:2905   .text:0000000000002fd4 SCOMP
             forth.s:2907   .text:0000000000002fd8 $d
             forth.s:2919   .text:0000000000003010 SCOM2
             forth.s:2916   .text:0000000000003008 SCOM1
             forth.s:2924   .text:0000000000003024 SCOM3
             forth.s:2933   .text:000000000000302c COLON_ABORT
             forth.s:2934   .text:000000000000302c $t
             forth.s:2935   .text:0000000000003030 $d
             forth.s:2952   .text:000000000000305c _OVERT
             forth.s:2952   .text:0000000000003062 $t
             forth.s:2954   .text:0000000000003068 $d
             forth.s:2965   .text:0000000000003080 _SEMIS
             forth.s:2965   .text:0000000000003082 $t
             forth.s:2965   .text:0000000000003084 SEMIS
             forth.s:2967   .text:0000000000003088 $d
             forth.s:2979   .text:00000000000030a4 _RBRAC
             forth.s:2979   .text:00000000000030a6 $t
             forth.s:2979   .text:00000000000030a8 RBRAC
             forth.s:2981   .text:00000000000030ac $d
             forth.s:2992   .text:00000000000030c0 $t
             forth.s:2993   .text:00000000000030c4 $d
             forth.s:3005   .text:00000000000030dc _COLON
             forth.s:3005   .text:00000000000030de $t
             forth.s:3005   .text:00000000000030e0 COLON
             forth.s:3007   .text:00000000000030e4 $d
             forth.s:3018   .text:00000000000030fc _IMMED
             forth.s:3018   .text:0000000000003106 $t
             forth.s:3018   .text:0000000000003108 IMMED
             forth.s:3020   .text:000000000000310c $d
             forth.s:3038   .text:0000000000003138 _CONST
             forth.s:3038   .text:0000000000003144 CONST
             forth.s:3040   .text:0000000000003148 $d
             forth.s:3051   .text:0000000000003178 $t
             forth.s:3058   .text:0000000000003178 DODOES
             forth.s:3060   .text:000000000000317c $d
             forth.s:3075   .text:00000000000031a0 $d
             forth.s:3075   .text:00000000000031a4 _DOES
             forth.s:3075   .text:00000000000031aa $t
             forth.s:3075   .text:00000000000031ac DOES
             forth.s:3077   .text:00000000000031b0 $d
             forth.s:3092   .text:00000000000031e0 _DEFERAT
             forth.s:3092   .text:00000000000031e8 DEFERAT
             forth.s:3094   .text:00000000000031ec $d
             forth.s:3104   .text:0000000000003204 _DEFERSTO
             forth.s:3104   .text:000000000000320c DEFERSTO
             forth.s:3106   .text:0000000000003210 $d
             forth.s:3117   .text:000000000000322c _DEFER
             forth.s:3117   .text:0000000000003232 $t
             forth.s:3117   .text:0000000000003234 DEFER
             forth.s:3119   .text:0000000000003238 $d
             forth.s:3140   .text:0000000000003284 CREAT
             forth.s:3130   .text:000000000000326c DEFER_NOP
             forth.s:3131   .text:000000000000326c $t
             forth.s:3132   .text:0000000000003270 $d
             forth.s:3140   .text:000000000000327c _CREAT
ARM GAS  forth.s 			page 159


             forth.s:3142   .text:0000000000003288 $d
             forth.s:3155   .text:00000000000032ac _VARIA
             forth.s:3155   .text:00000000000032b8 VARIA
             forth.s:3157   .text:00000000000032bc $d
             forth.s:3174   .text:00000000000032dc DMP
             forth.s:3175   .text:00000000000032dc $t
             forth.s:3176   .text:00000000000032e0 $d
             forth.s:3188   .text:0000000000003318 PDUM2
             forth.s:3182   .text:0000000000003300 PDUM1
             forth.s:3200   .text:0000000000003324 $d
             forth.s:3200   .text:0000000000003328 _DUMP
             forth.s:3200   .text:0000000000003330 DUMP
             forth.s:3202   .text:0000000000003334 $d
             forth.s:3220   .text:0000000000003384 DUMP4
             forth.s:3210   .text:000000000000335c DUMP1
             forth.s:3222   .text:000000000000338c DUMP3
             forth.s:3234   .text:00000000000033a4 _DOTS
             forth.s:3234   .text:00000000000033a8 DOTS
             forth.s:3236   .text:00000000000033ac $d
             forth.s:3244   .text:00000000000033cc DOTS2
             forth.s:3240   .text:00000000000033c0 DOTS1
             forth.s:3254   .text:00000000000033e0 _TNAME
             forth.s:3254   .text:00000000000033e6 $t
             forth.s:3254   .text:00000000000033e8 TNAME
             forth.s:3256   .text:00000000000033ec $d
             forth.s:3259   .text:00000000000033f8 TNAM1
             forth.s:3270   .text:000000000000342c TNAM2
             forth.s:3279   .text:000000000000343c _DOTID
             forth.s:3279   .text:0000000000003440 $t
             forth.s:3279   .text:0000000000003440 DOTID
             forth.s:3281   .text:0000000000003444 $d
             forth.s:3288   .text:0000000000003468 DOTI1
             forth.s:3289   .text:0000000000003476 $t
             forth.s:3290   .text:0000000000003478 $d
             forth.s:3292   *ABS*:0000000000000000 WANT_SEE
             forth.s:3365   .text:0000000000003480 _WORDS
             forth.s:3365   .text:0000000000003486 $t
             forth.s:3365   .text:0000000000003488 WORDS
             forth.s:3367   .text:000000000000348c $d
             forth.s:3370   .text:0000000000003498 WORS1
             forth.s:3379   .text:00000000000034c0 WORS2
             forth.s:3392   .text:00000000000034c4 VERSN
             forth.s:3393   .text:00000000000034c4 $t
             forth.s:3394   .text:00000000000034c8 $d
             forth.s:3402   .text:00000000000034d8 _HI
             forth.s:3404   .text:00000000000034e0 $d
             forth.s:3405   .text:00000000000034fa $t
             forth.s:3406   .text:00000000000034fc $d
             forth.s:3438   .text:0000000000003560 COLD1
             forth.s:3439   .text:0000000000003560 $d
             forth.s:3450   .text:00000000000035a0 COLD2
             forth.s:3453   .text:00000000000035a0 $d
             forth.s:3456   .text:00000000000035a4 $d
          ser-term.s:90     .text:0000000000000521 $d
          ser-term.s:90     .text:0000000000000522 $t
          ser-term.s:110    .text:000000000000055d $d
          ser-term.s:110    .text:000000000000055e $t
ARM GAS  forth.s 			page 160


          ser-term.s:133    .text:000000000000059b $d
          ser-term.s:133    .text:000000000000059c $t
             tvout.s:250    .text:00000000000007b1 $d
             tvout.s:250    .text:00000000000007b2 $t
             tvout.s:264    .text:00000000000007e7 $d
             tvout.s:264    .text:00000000000007e8 $t
             tvout.s:292    .text:0000000000000841 $d
             tvout.s:292    .text:0000000000000842 $t
             tvout.s:311    .text:000000000000086f $d
             tvout.s:311    .text:0000000000000870 $t
             tvout.s:411    .text:00000000000009a9 $d
             tvout.s:411    .text:00000000000009aa $t
             tvout.s:611    .text:0000000000000c47 $d
             tvout.s:611    .text:0000000000000c48 $t
           ps2_kbd.s:307    .text:0000000000001053 $d
           ps2_kbd.s:307    .text:0000000000001054 $t
           ps2_kbd.s:382    .text:000000000000110d $d
           ps2_kbd.s:382    .text:000000000000110e $t
           ps2_kbd.s:581    .text:000000000000136b $d
           ps2_kbd.s:581    .text:000000000000136c $t
           ps2_kbd.s:599    .text:00000000000013ab $d
           ps2_kbd.s:599    .text:00000000000013ac $t
             forth.s:142    .text:0000000000001447 $d
             forth.s:142    .text:0000000000001448 $t
             forth.s:165    .text:0000000000001481 $d
             forth.s:165    .text:0000000000001482 $t
             forth.s:202    .text:000000000000149f $d
             forth.s:202    .text:00000000000014a0 $t
             forth.s:249    .text:000000000000154d $d
             forth.s:249    .text:000000000000154e $t
             forth.s:344    .text:00000000000015dd $d
             forth.s:344    .text:00000000000015de $t
             forth.s:369    .text:000000000000160b $d
             forth.s:369    .text:000000000000160c $t
             forth.s:379    .text:000000000000161f $d
             forth.s:379    .text:0000000000001620 $t
             forth.s:387    .text:000000000000162b $d
             forth.s:387    .text:000000000000162c $t
             forth.s:396    .text:000000000000163d $d
             forth.s:396    .text:000000000000163e $t
             forth.s:405    .text:0000000000001651 $d
             forth.s:405    .text:0000000000001652 $t
             forth.s:441    .text:0000000000001699 $d
             forth.s:441    .text:000000000000169a $t
             forth.s:457    .text:00000000000016bb $d
             forth.s:457    .text:00000000000016bc $t
             forth.s:467    .text:00000000000016cd $d
             forth.s:467    .text:00000000000016ce $t
             forth.s:476    .text:00000000000016df $d
             forth.s:476    .text:00000000000016e0 $t
             forth.s:493    .text:0000000000001701 $d
             forth.s:493    .text:0000000000001702 $t
             forth.s:523    .text:0000000000001747 $d
             forth.s:523    .text:0000000000001748 $t
             forth.s:532    .text:000000000000175d $d
             forth.s:532    .text:000000000000175e $t
             forth.s:579    .text:00000000000017b7 $d
ARM GAS  forth.s 			page 161


             forth.s:579    .text:00000000000017b8 $t
             forth.s:590    .text:00000000000017cb $d
             forth.s:590    .text:00000000000017cc $t
             forth.s:598    .text:00000000000017d9 $d
             forth.s:598    .text:00000000000017da $t
             forth.s:606    .text:00000000000017e9 $d
             forth.s:606    .text:00000000000017ea $t
             forth.s:614    .text:00000000000017f9 $d
             forth.s:614    .text:00000000000017fa $t
             forth.s:638    .text:0000000000001829 $d
             forth.s:638    .text:000000000000182a $t
             forth.s:663    .text:000000000000185d $d
             forth.s:663    .text:000000000000185e $t
             forth.s:671    .text:000000000000186d $d
             forth.s:671    .text:000000000000186e $t
             forth.s:679    .text:000000000000187f $d
             forth.s:679    .text:0000000000001880 $t
             forth.s:700    .text:00000000000018a7 $d
             forth.s:700    .text:00000000000018a8 $t
             forth.s:729    .text:00000000000018e3 $d
             forth.s:729    .text:00000000000018e4 $t
             forth.s:739    .text:00000000000018f7 $d
             forth.s:739    .text:00000000000018f8 $t
             forth.s:760    .text:0000000000001925 $d
             forth.s:760    .text:0000000000001926 $t
             forth.s:778    .text:0000000000001949 $d
             forth.s:778    .text:000000000000194a $t
             forth.s:801    .text:0000000000001977 $d
             forth.s:801    .text:0000000000001978 $t
             forth.s:859    .text:00000000000019e7 $d
             forth.s:859    .text:00000000000019e8 $t
             forth.s:871    .text:00000000000019ff $d
             forth.s:871    .text:0000000000001a00 $t
             forth.s:883    .text:0000000000001a1b $d
             forth.s:883    .text:0000000000001a1c $t
             forth.s:944    .text:0000000000001a77 $d
             forth.s:944    .text:0000000000001a78 $t
             forth.s:953    .text:0000000000001a8b $d
             forth.s:953    .text:0000000000001a8c $t
             forth.s:980    .text:0000000000001ac7 $d
             forth.s:980    .text:0000000000001ac8 $t
             forth.s:999    .text:0000000000001ae5 $d
             forth.s:999    .text:0000000000001ae6 $t
             forth.s:1018   .text:0000000000001b0f $d
             forth.s:1018   .text:0000000000001b10 $t
             forth.s:1058   .text:0000000000001b61 $d
             forth.s:1058   .text:0000000000001b62 $t
             forth.s:1078   .text:0000000000001b8b $d
             forth.s:1078   .text:0000000000001b8c $t
             forth.s:1092   .text:0000000000001ba5 $d
             forth.s:1092   .text:0000000000001ba6 $t
             forth.s:1104   .text:0000000000001bc5 $d
             forth.s:1104   .text:0000000000001bc6 $t
             forth.s:1121   .text:0000000000001bdf $d
             forth.s:1121   .text:0000000000001be0 $t
             forth.s:1138   .text:0000000000001c0b $d
             forth.s:1138   .text:0000000000001c0c $t
ARM GAS  forth.s 			page 162


             forth.s:1202   .text:0000000000001cbd $d
             forth.s:1202   .text:0000000000001cbe $t
             forth.s:1254   .text:0000000000001d3b $d
             forth.s:1254   .text:0000000000001d3c $t
             forth.s:1313   .text:0000000000001de5 $d
             forth.s:1313   .text:0000000000001de6 $t
             forth.s:1331   .text:0000000000001e0d $d
             forth.s:1331   .text:0000000000001e0e $t
             forth.s:1365   .text:0000000000001e5f $d
             forth.s:1365   .text:0000000000001e60 $t
             forth.s:1398   .text:0000000000001ead $d
             forth.s:1398   .text:0000000000001eae $t
             forth.s:1420   .text:0000000000001ee1 $d
             forth.s:1420   .text:0000000000001ee2 $t
             forth.s:1500   .text:0000000000001fcf $d
             forth.s:1500   .text:0000000000001fd0 $t
             forth.s:1512   .text:0000000000001fed $d
             forth.s:1512   .text:0000000000001fee $t
             forth.s:1544   .text:000000000000203b $d
             forth.s:1544   .text:000000000000203c $t
             forth.s:1560   .text:0000000000002065 $d
             forth.s:1560   .text:0000000000002066 $t
             forth.s:1574   .text:000000000000208f $d
             forth.s:1574   .text:0000000000002090 $t
             forth.s:1638   .text:0000000000002127 $d
             forth.s:1638   .text:0000000000002128 $t
             forth.s:1759   .text:00000000000022e7 $d
             forth.s:1759   .text:00000000000022e8 $t
             forth.s:1776   .text:000000000000231d $d
             forth.s:1776   .text:000000000000231e $t
             forth.s:1794   .text:0000000000002353 $d
             forth.s:1794   .text:0000000000002354 $t
             forth.s:1864   .text:00000000000023d3 $d
             forth.s:1864   .text:00000000000023d4 $t
             forth.s:1899   .text:0000000000002433 $d
             forth.s:1899   .text:0000000000002434 $t
             forth.s:2052   .text:000000000000261f $d
             forth.s:2052   .text:0000000000002620 $t
             forth.s:2091   .text:0000000000002681 $d
             forth.s:2091   .text:0000000000002682 $t
             forth.s:2104   .text:00000000000026a5 $d
             forth.s:2104   .text:00000000000026a6 $t
             forth.s:2330   .text:000000000000292f $d
             forth.s:2330   .text:0000000000002930 $t
             forth.s:2422   .text:0000000000002a43 $d
             forth.s:2422   .text:0000000000002a44 $t
             forth.s:2473   .text:0000000000002afb $d
             forth.s:2473   .text:0000000000002afc $t
             forth.s:2485   .text:0000000000002b25 $d
             forth.s:2485   .text:0000000000002b26 $t
             forth.s:2506   .text:0000000000002b6b $d
             forth.s:2506   .text:0000000000002b6c $t
             forth.s:2518   .text:0000000000002b89 $d
             forth.s:2518   .text:0000000000002b8a $t
             forth.s:2533   .text:0000000000002bb7 $d
             forth.s:2533   .text:0000000000002bb8 $t
             forth.s:2693   .text:0000000000002d61 $d
ARM GAS  forth.s 			page 163


             forth.s:2693   .text:0000000000002d62 $t
             forth.s:2726   .text:0000000000002dcb $d
             forth.s:2726   .text:0000000000002dcc $t
             forth.s:2754   .text:0000000000002e33 $d
             forth.s:2754   .text:0000000000002e34 $t
             forth.s:2767   .text:0000000000002e55 $d
             forth.s:2767   .text:0000000000002e56 $t
             forth.s:2794   .text:0000000000002e95 $d
             forth.s:2794   .text:0000000000002e96 $t
             forth.s:2817   .text:0000000000002ed3 $d
             forth.s:2817   .text:0000000000002ed4 $t
             forth.s:2828   .text:0000000000002ef3 $d
             forth.s:2828   .text:0000000000002ef4 $t
             forth.s:2840   .text:0000000000002f13 $d
             forth.s:2840   .text:0000000000002f14 $t
             forth.s:2905   .text:0000000000002fd1 $d
             forth.s:2905   .text:0000000000002fd2 $t
             forth.s:3038   .text:0000000000003141 $d
             forth.s:3038   .text:0000000000003142 $t
             forth.s:3092   .text:00000000000031e7 $d
             forth.s:3092   .text:00000000000031e8 $t
             forth.s:3104   .text:000000000000320b $d
             forth.s:3104   .text:000000000000320c $t
             forth.s:3140   .text:0000000000003283 $d
             forth.s:3140   .text:0000000000003284 $t
             forth.s:3155   .text:00000000000032b5 $d
             forth.s:3155   .text:00000000000032b6 $t
             forth.s:3200   .text:000000000000332d $d
             forth.s:3200   .text:000000000000332e $t
             forth.s:3234   .text:00000000000033a7 $d
             forth.s:3234   .text:00000000000033a8 $t
             forth.s:3402   .text:00000000000034db $d
             forth.s:3402   .text:00000000000034dc $t
             forth.s:3432   .text:0000000000003549 $d
             forth.s:3432   .text:000000000000354a $t

UNDEFINED SYMBOLS
_mstack
