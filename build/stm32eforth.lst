ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ BCHAR, NBASE+4   // display base character flag 
  81              	  .equ TMP, BCHAR+4   // temporary variable
  82              	  .equ CSPAN, TMP+4  // character count received by expect  
  83              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  84              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  85              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  86              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  87              	  .equ VHOLD, EVAL+4   // hold pointer 
  88              	  .equ CTXT, VHOLD+4  // context pointer 
  89              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  90              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  91              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  92              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  93              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  94              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  95              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  96              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  97              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  98              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  99              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 100              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 101              	  .equ KBD_QUEUE_SIZE, 16 
 102              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 103              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 104              	  .equ KBD_QTAIL,KBD_QHEAD+4
 105              	  .equ ROW,KBD_QTAIL+4 
 106              	  .equ COL,ROW+4 
 107              	  .equ BK_COLOR,COL+4 
ARM GAS  forth.s 			page 10


 108              	  .equ PEN_COLOR,BK_COLOR+4
 109              	  .equ VFPSW, PEN_COLOR+4 
 110              	  .equ VFBASE, VFPSW+4 
 111              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 112              	
 113              	/***********************************************
 114              	* MACROS
 115              	*	Assemble inline direct threaded code ending.
 116              	***********************************************/
 117              		.macro _CALL fn /* low level routine call */ 
 118              	 	PUSH {LR}
 119              		BL \fn  
 120              		POP {LR}
 121              		.endm
 122              		
 123              		.macro _RET /* exit sub-routine */ 
 124              		BX LR 
 125              		.endm 
 126              	
 127              		// dictionary header  
 128              		.macro _HEADER  label, nlen, name
 129              			.word LINK 
 130              			.equ LINK , . 
 131              		_\label: .byte \nlen    // name field
 132              			.ascii "\name"
 133              			.p2align 2 
 134              		\label:   // code field 
 135              		.endm 
 136              		
 137              	
 138              	// local function header 
 139              		.macro _FUNC label 
 140              		.section .text, "ax", %progbits 
 141              		.p2align 2 
 142              		.type \label, %function  
 143              		\label:
 144              		.endm 
 145              	
 146              	// global function header 
 147              		.macro _GBL_FUNC label 
 148              		.global \label 
 149              		_FUNC \label 
 150              		.endm 
 151              	
 152              	
 153              	// load large constant to register 
 154              		.macro _MOV32 r, value 
 155              		mov \r,#(\value&0xffff)
 156              		movt \r,#(\value>>16)
 157              		.endm 
 158              	
 159              		.macro _NEXT /* direct jump INEXT */ 
 160              		B INEXT   
 161              		.endm 
 162              	
 163              	 	.macro	_NEST /*start high level word */
 164              		BX INX  
ARM GAS  forth.s 			page 11


 165              		NOP.N 
 166              		.endm
 167              	
 168              		.macro _ADR label 
 169              		.word 1+\label  
 170              		.endm 
 171              	
 172              	 	.macro	_UNNEST	/*end high level word */
 173              		_ADR UNNEST 
 174              		.endm
 175              	
 176              	 	.macro	_DOLIT u /*long literals */
 177              		_ADR	DOLIT
 178              		.word	\u 
 179              		.endm
 180              	
 181              		.macro _DOTQP len, text 
 182              		_ADR DOTQP 
 183              		.byte \len 
 184              		.ascii "\text" 
 185              		.p2align 2 
 186              		.endm
 187              	
 188              		.macro _COMPI name 
 189              		_DOLIT \name 
 190              		_ADR CALLC 
 191              		.endm 
 192              	
 193              		.macro _ABORQ len,name 
 194              		_ADR ABORQ 
 195              		.byte \len 
 196              		.ascii "\name"
 197              		.p2align 2 
 198              		.endm
 199              	
 200              		.macro _BRAN label 
 201              		_ADR BRAN 
 202              		.word \label 
 203              		.endm 
 204              	
 205              		.macro _QBRAN label 
 206              		_ADR QBRAN 
 207              		.word \label
 208              		.endm 
 209              	
 210              		.macro _TBRAN label 
 211              		_ADR TBRAN 
 212              		.word \label 
 213              		.endm 
 214              	
 215              		.macro _DONXT label 
 216              		_ADR DONXT
 217              		.word \label 
 218              		.endm 
 219              	
 220              	 	.macro	_PUSH	/*push TOS on data stack*/
 221              		STR	TOS,[DSP,#-4]!
ARM GAS  forth.s 			page 12


 222              		.endm
 223              	
 224              	 	.macro	_POP /*pop data stack to TOS */
 225              		LDR	TOS,[DSP],#4
 226              		.endm
 227              	
 228              		// calling a colon word 
 229              		// from a code word   
 230              		.macro _CALL_COLWORD target 
 231              	    ldr WP,=\target 
 232              		orr WP,#1
 233              		b \target  
 234              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
ARM GAS  forth.s 			page 13


  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
ARM GAS  forth.s 			page 14


 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF810C9 	  ldr IP,=dh
 159 000e 02F05DBE 	  b INEXT  
 160              	dh:
 161 0012 E14A0000 	  _ADR PRESE
 162 0016 E5400000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 192D0000 	  _ADR CFSR 
 164 0038 85300000 	  _ADR DUPP
 165 003c 01300000 	  _ADR TOR 
 166 0040 F72E0000 	  _DOLIT 16 
 166      10000000 
 167 0048 D5350000 	  _ADR BASE 
 168 004c 7D2F0000 	  _ADR STORE 
 169 0050 E1410000 	  _ADR UDOT 
 170 0054 E5400000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 BD2F0000 	  _ADR RFROM
 172 0068 F72E0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 05310000 	  _ADR ANDD
ARM GAS  forth.s 			page 15


 174 0074 372F0000 	  _QBRAN 1f
 174      94000000 
 175 007c 392D0000 	  _ADR BFAR
 176 0080 F72E0000 	  _DOLIT ','
 176      2C000000 
 177 0088 952D0000 	  _ADR EMIT 
 178 008c F53F0000 	  _ADR SPACE 
 179 0090 E1410000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 E5400000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 49200000 	  _ADR FPSCR
 184 00a8 E1410000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF85CC8 	  ldr IP,=fpu_except
 202 00c4 02F002BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 7D400000 	  _ADR CR 
 205 00cc D5350000 	  _ADR BASE 
 206 00d0 912F0000 	  _ADR AT 
 207 00d4 01300000 	  _ADR TOR  
 208 00d8 F72E0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 D5350000 	  _ADR BASE 
 210 00e4 7D2F0000 	  _ADR STORE
 211 00e8 F72E0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 95310000 	  _ADR SUBB  
 213 00f4 E5400000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 15420000 	  _ADR DOT 
 215 0104 E5400000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 49200000 	  _ADR FPSCR 
 217 0124 85300000 	  _ADR DUPP 
ARM GAS  forth.s 			page 16


 218 0128 15420000 	  _ADR DOT
 219 012c 95320000 	  _ADR QDUP 
 220 0130 372F0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 F72E0000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 952D0000 	  _ADR EMIT 
 223 0144 F72E0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 952D0000 	  _ADR EMIT
 225 0150 85300000 	  _ADR DUPP 
 226 0154 F72E0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 05310000 	  _ADR ANDD
 228 0160 95320000 	  _ADR QDUP  
 229 0164 372F0000 	  _QBRAN 1f 
 229      84010000 
 230 016c F72E0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 85310000 	  _ADR PLUS 
 232 0178 912F0000 	  _ADR AT 
 233 017c 21350000 	  _ADR COUNT 
 234 0180 49400000 	  _ADR TYPEE
 235 0184 F72E0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 05310000 	  _ADR ANDD
 237 0190 C9330000 	  _ADR CLZ 
 238 0194 F72E0000 	  _DOLIT 31 
 238      1F000000 
 239 019c 95300000 	  _ADR SWAP 
 240 01a0 95310000 	  _ADR SUBB 
 241 01a4 F72E0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 75310000 	  _ADR LSHIFT 
 243 01b0 F72E0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 85310000 	  _ADR PLUS 
 245 01bc 912F0000 	  _ADR AT 
 246 01c0 21350000 	  _ADR COUNT 
 247 01c4 49400000 	  _ADR TYPEE 
 248 01c8 7D400000 	2: _ADR CR 
 249 01cc F72E0000 	  _DOLIT 0
 249      00000000 
 250 01d4 69200000 	  _ADR CLR_FPSCR 
 251 01d8 BD2F0000 	  _ADR RFROM  
 252 01dc D5350000 	  _ADR BASE 
 253 01e0 7D2F0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF838C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
ARM GAS  forth.s 			page 17


 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
ARM GAS  forth.s 			page 18


 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C0C6 	  ldr IP,=nmi_hl 
 306 0268 02F030BD 	  b  INEXT
 307              	nmi_hl:
 308 026c E14A0000 	  _ADR PRESE 
 309 0270 7D400000 	  _ADR CR 
 310 0274 E5400000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 7D400000 	  _ADR CR 
 312 0298 59490000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF884C6 	  ldr IP,=hardfault_hl 
 326 02aa 02F00FBD 	  b INEXT
 327              	hardfault_hl:
 328 02ae E14A0000 	  _ADR PRESE
 329 02b2 7D400000 	  _ADR CR  
 330 02b6 E5400000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 7D400000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF84CC6 	  ldr IP,=memfault_hl 
 345 02e6 02F0F1BC 	  b INEXT 
 346              	memfault_hl: 
 347 02ea E14A0000 	  _ADR PRESE
 348 02ee 7D400000 	  _ADR CR  
 349 02f2 E5400000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
ARM GAS  forth.s 			page 19


 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 F72E0000 	  _DOLIT 16 
 350      10000000 
 351 0320 D5350000 	  _ADR BASE 
 352 0324 7D2F0000 	  _ADR STORE   
 353 0328 192D0000 	  _ADR CFSR
 354 032c F72E0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 05310000 	  _ADR ANDD 
 356 0338 E1410000 	  _ADR UDOT 
 357 033c 7D400000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8E4C5 	  ldr IP,=busfault_hl 
 372 0352 02F0BBBC 	  b INEXT 
 373              	busfault_hl:
 374 0356 E14A0000 	  _ADR PRESE
 375 035a F72E0000 	  _DOLIT 1 
 375      01000000 
 376 0362 612E0000 	  _ADR ULED 
 377 0366 F72E0000 	  _DOLIT  100 
 377      64000000 
 378 036e 8D350000 	  _ADR MSEC 
 379 0372 392D0000 	  _ADR BFAR 
 380 0376 192D0000 	  _ADR CFSR 
 381 037a 7D400000 	  _ADR CR  
 382 037e E5400000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 F72E0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 D5350000 	  _ADR BASE 
 385 03ac 7D2F0000 	  _ADR STORE   
 386 03b0 F72E0000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 05310000 	  _ADR ANDD   
 388 03bc E1410000 	  _ADR UDOT 
 389 03c0 E5400000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
ARM GAS  forth.s 			page 20


 390 03cc E1410000 	  _ADR UDOT 
 391 03d0 7D400000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF854C5 	  ldr IP,=usagefault_hl
 405 03e6 02F071BC 	  b INEXT 
 406              	usagefault_hl:
 407 03ea E14A0000 	  _ADR PRESE
 408 03ee 7D400000 	  _ADR CR  
 409 03f2 E5400000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 F72E0000 	  _DOLIT 16 
 410      10000000 
 411 0418 D5350000 	  _ADR BASE 
 412 041c 7D2F0000 	  _ADR STORE   
 413 0420 192D0000 	  _ADR CFSR
 414 0424 F72E0000 	  _DOLIT 16 
 414      10000000 
 415 042c 5D310000 	  _ADR RSHIFT 
 416 0430 E1410000 	  _ADR UDOT 
 417 0434 7D400000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8AC00 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
ARM GAS  forth.s 			page 21


 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8AC00 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8AC00 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF898C4 	  ldr IP,=ur
 474 04a4 02F012BC 	  b INEXT  
 475              	ur:
 476 04a8 E14A0000 	  _ADR PRESE
 477 04ac 7D400000 	  _ADR CR   
 478 04b0 F72E0000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 21350000 		_ADR COUNT 
 480 04bc 49400000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
ARM GAS  forth.s 			page 22


 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F063FD 	  bl  fpu_init 
 518 0524 00F027FA 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F020FB 	  bl  flash_spi_init   
 522 0534 05F0F4B9 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF68067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF47F48 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8ECA3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
ARM GAS  forth.s 			page 23


 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
ARM GAS  forth.s 			page 24


 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
ARM GAS  forth.s 			page 25


 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A449     		ldr r1,=UZERO 
 674 06b2 4FF0B802 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
ARM GAS  forth.s 			page 26


 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
ARM GAS  forth.s 			page 27


 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
ARM GAS  forth.s 			page 28


 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
ARM GAS  forth.s 			page 29


 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 30580000 		.word HI_BOTH  /*'BOOT */
 874 0878 5C180000 		.word PS2_QKEY /* query for character */
 875 087c 24110000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 80FE0120 		.word TIBB	/*TIBU */
 883 089c B8490000 		.word INTER	/*'EVAL */
 884 08a0 00000000 		.word 0			/*HLD */
 885 08a4 18590000 		.word _LASTN	/*CONTEXT */
 886 08a8 84590000 		.word CTOP  	/* FCP end of system dictionnary */
 887 08ac 20510020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 888 08b0 18590000 		.word _LASTN	/*LAST word in dictionary */
 889 08b4 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 889      00000000 
 889      00000000 
 889      00000000 
 890 08c4 00000000 		.word 0  /* RX_HEAD */
 891 08c8 00000000 		.word 0  /* RX_TAIL */ 
 892 08cc 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 893 08d0 00000000 		.word 0  /* VID_STATE, video state */  
 894 08d4 00000000 	    .word 0  /* VID_FIELD, field */
 895 08d8 80800120 		.word VID_BUFF /* video_buffer address */ 
 896 08dc 00000000 	    .word 0 /* kbd struct */
 897 08e0 00000000 		.space KBD_QUEUE_SIZE,0  
 897      00000000 
 897      00000000 
 897      00000000 
 898 08f0 00000000 		.word 0  /* kbd queue head */
 899 08f4 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 30


 900 08f8 00000000 	    .word 0 /* tv cursor row */
 901 08fc 00000000 	    .word 0 /* tv cursor column */ 
 902 0900 00000000 	    .word 0 /* tv back color */
 903 0904 07000000 	    .word 7 /* tv font color */
 904 0908 00000000 	    .word 0 /* FPSW */
 905 090c 00000000 	    .word 0 /* FBASE */ 
 906 0910 00000000 	    .word 0 /* BEEP_DTMR */ 
 907 0914 00000000 	    .word 0,0 
 907      00000000 
 908              	ULAST:
 909              	
 910              	// used by _HEADER macro 
 911              	// to link names field
 912              	// in dictionary  
 913 091c 12000000 	    .equ LINK, 0 
 913      C8000000 
 913      004B0000 
 913      6C020000 
 913      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0948 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0950 1868     		ldr r0,[r3,#USART_SR]
ARM GAS  forth.s 			page 31


  38 0952 5968     		ldr r1,[r3,#USART_DR]
  39 0954 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0958 0CD0     		beq 2f // no char received 
  41 095a B1F1030F 		cmp r1,#VK_CTRL_C 
  42 095e 3FF49AAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0962 04F15000 		add r0,UP,#RX_QUEUE
  44 0966 626E     		ldr r2,[UP,#RX_TAIL]
  45 0968 8154     		strb r1,[r0,r2]
  46 096a 02F10102 		add r2,#1 
  47 096e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0972 6266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0974 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0976 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 097e 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0980 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0984 01EA0201 	  and r1,r1,r2
  62 0988 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 098c 41EA0201 	  orr r1,r1,r2 
  64 0990 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0992 4FF4EE61 	  mov r1,#0x77<<4 
  67 0996 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0998 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 09a0 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 09a4 8160     	  str r1,[r0,#USART_BRR]
  73 09a6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 09aa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 09ac 4FF02500 	  mov r0,#USART1_IRQ 
  77 09b0 4FF00701 	  mov r1,#7
  78 09b4 00B5FFF7 	  _CALL nvic_set_priority
  78      97FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 09be 4FF02500 	  mov r0,#USART1_IRQ 
  81 09c2 00B5FFF7 	  _CALL nvic_enable_irq  
  81      A9FE5DF8 
  81      04EB
  82 09cc 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
ARM GAS  forth.s 			page 32


  89              	************************************************************/
  90 09ce 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 09dc 47F8046D 		_PUSH
  92 09e0 606E     		ldr T0,[UP,#RX_TAIL] 
  93 09e2 216E     		ldr T1,[UP,#RX_HEAD]
  94 09e4 90EA0106 		eors TOS,T0,T1 
  95 09e8 0CD0     		beq 1f
  96 09ea 04F15000 		add T0,UP,#RX_QUEUE 
  97 09ee 0844     		add T0,T1 
  98 09f0 0678     		ldrb TOS,[T0]
  99 09f2 01F10101 		add T1,#1 
 100 09f6 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 09fa 2166     		str T1,[UP,#RX_HEAD]
 102 09fc 47F8046D 		_PUSH 
 103 0a00 4FF0FF36 		mov TOS,#-1
 104 0a04 02F062B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0a08 D2090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0a18 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0a20 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0a22 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0a26 FBD0     		beq 1b 
 115 0a28 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0a2a 57F8046B 		_POP
 117 0a2e 02F04DB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0a32 0C0A0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0a3c 47F8046D 	        _PUSH 
 126 0a40 4FF00006 	        mov TOS,#0
 127 0a44 02F042B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0a48 360A0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0a54 47F8046D 	        _PUSH 
ARM GAS  forth.s 			page 33


 135 0a58 4FF00106 	        mov TOS,#1
 136 0a5c 02F036B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0a60 4C0A0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0a6c 3046     	        mov T0,TOS
 144 0a6e 57F8046B 	        _POP 
 145 0a72 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0a74 4B48     	        ldr T0,=SER_QKEY 
 148 0a76 6061     	        str T0,[UP,#STDIN]
 149 0a78 4B48     	        ldr T0,=SER_EMIT
 150 0a7a A061     	        str T0,[UP,#STDOUT]
 151 0a7c 02F026B9 	        _NEXT 
 152              	4: // local console 
 153 0a80 4A48     	        ldr T0,=PS2_QKEY
 154 0a82 6061     	        str T0,[UP,#STDIN]
 155 0a84 4A48     	        ldr T0,=TV_EMIT
 156 0a86 A061     	        str T0,[UP,#STDOUT]
 157 0a88 02F020B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0a8c 640A0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0a9c 504700BF 	      _NEST 
 166 0aa0 F72E0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0aa8 E1310000 	1:    _ADR ONEP  // c+1
 168 0aac 01300000 	      _ADR TOR   
 169 0ab0 F72E0000 	      _DOLIT 10 
 169      0A000000 
 170 0ab8 1D390000 	      _ADR SLMOD // r q  
 171 0abc 95320000 	      _ADR QDUP  // r q q | r 0  
 172 0ac0 372F0000 	      _QBRAN 2f  // r 0 
 172      D40A0000 
 173 0ac8 BD2F0000 	      _ADR RFROM // r q c 
 174 0acc 5F2F0000 	      _BRAN 1b
 174      A80A0000 
 175 0ad4 F72E0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0adc 85310000 	      _ADR PLUS 
 177 0ae0 952D0000 	      _ADR EMIT 
 178 0ae4 BD2F0000 	      _ADR RFROM 
 179 0ae8 95320000 	      _ADR QDUP 
 180 0aec 372F0000 	      _QBRAN 3f
 180      040B0000 
ARM GAS  forth.s 			page 34


 181 0af4 F1310000 	      _ADR ONEM 
 182 0af8 01300000 	      _ADR TOR 
 183 0afc 5F2F0000 	      _BRAN 2b 
 183      D40A0000 
 184              	3:    
 185 0b04 D32C0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0b08 900A0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0b14 504700BF 	      _NEST 
 193 0b18 F72E0000 	      _DOLIT 27 
 193      1B000000 
 194 0b20 952D0000 	      _ADR EMIT 
 195 0b24 F72E0000 	      _DOLIT '['
 195      5B000000 
 196 0b2c 952D0000 	      _ADR EMIT 
 197 0b30 D32C0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0b34 0C0B0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0b40 504700BF 	      _NEST
 205 0b44 150B0000 	      _ADR ANSI_ESC
 206 0b48 95300000 	      _ADR SWAP 
 207 0b4c 9D0A0000 	      _ADR ANSI_PARAM 
 208 0b50 F72E0000 	      _DOLIT ';'
 208      3B000000 
 209 0b58 952D0000 	      _ADR EMIT
 210 0b5c 9D0A0000 	      _ADR ANSI_PARAM
 211 0b60 F72E0000 	      _DOLIT 'H'
 211      48000000 
 212 0b68 952D0000 	      _ADR EMIT 
 213 0b6c D32C0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0b70 380B0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0b7c 504700BF 	    _NEST
 221 0b80 F72E0000 	    _DOLIT 1 
 221      01000000 
 222 0b88 85300000 	    _ADR DUPP 
 223 0b8c 410B0000 	    _ADR SER_AT  
 224 0b90 150B0000 	    _ADR ANSI_ESC
 225 0b94 F72E0000 	    _DOLIT 'J'
ARM GAS  forth.s 			page 35


 225      4A000000 
 226 0b9c 952D0000 	    _ADR EMIT 
 227 0ba0 D32C0000 	    _UNNEST 
 228 0ba4 DC090000 	
 228      180A0000 
 228      5C180000 
 228      24110000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 36


  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0bb4 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0bbc 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0bbe 4FF00002 	  _MOV32 r2,0x55000000
ARM GAS  forth.s 			page 37


  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0bc6 41EA0201 	  orr r1,r2
  82 0bca 0160     	  str r1,[r0,#GPIO_MODER]
  83 0bcc 81EA0101 	  eor r1,r1 
  84 0bd0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0bd2 4FF00101 	  mov r1,#1 // pin 1 
  88 0bd6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0bda 00B5FFF7 	  _CALL gpio_config 
  89      E0FD5DF8 
  89      04EB
  90 0be4 4FF00101 	  mov r1,#1 
  91 0be8 4FF00202 	  mov r2,#2
  92 0bec 00B5FFF7 	  _CALL gpio_speed 
  92      16FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0bf6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0bf8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0bfc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0bfe 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0c06 4FF00200 	  mov r0,#2 
 100 0c0a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0c0c 41EA0001 	  orr r1,r0 
 102 0c10 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0c12 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0c1a 41F2D470 	  mov r0,#HPER
 106 0c1e D062     	  str r0,[r2,#TIM_ARR]
 107 0c20 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0c24 D063     	  str r0,[r2,#TIM_CCR3]
 109 0c26 4FF4E170 	  mov r0,#HPULSE 
 110 0c2a 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0c2c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0c30 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0c32 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0c36 1062     	  str r0,[r2,#TIM_CCER]
 115 0c38 4FF00100 	  mov r0,#1 
 116 0c3c D060     	  str r0,[r2,#TIM_DIER]
 117 0c3e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0c40 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0c44 4FF00201 	  mov r1,#2
 121 0c48 00B5FFF7 	  _CALL nvic_set_priority
 121      4DFD5DF8 
 121      04EB
 122 0c52 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0c56 00B5FFF7 	  _CALL nvic_enable_irq
 123      5FFD5DF8 
 123      04EB
 124 0c60 7047     	  _RET
ARM GAS  forth.s 			page 38


 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0c62 00BF     	  _GBL_FUNC tv_out_isr
 132 0c64 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0c6c 81EA0101 	  eor T1,T1
 134 0c70 0161     	  str T1,[T0,#TIM_SR]
 135 0c72 A16E     	  ldr T1,[UP,#VID_CNTR]
 136 0c74 01F10101 	  add T1,#1 
 137 0c78 A166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0c7a E26E     	  ldr T2,[UP,#VID_STATE]
 140 0c7c 002A     	  cmp T2,#ST_VSYNC 
 141 0c7e 07D0     	  beq state_vsync
 142 0c80 012A     	  cmp T2,#ST_PREVID 
 143 0c82 2FD0     	  beq state_pre_video 
 144 0c84 022A     	  cmp T2,#ST_VIDEO 
 145 0c86 36D0     	  beq state_video_out 
 146 0c88 032A     	  cmp T2,#ST_POSTVID 
 147 0c8a 63D0     	  beq state_post_video
 148 0c8c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0c90 0129     	  cmp T1,#1
 152 0c92 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0c94 4FF0DB01 	  mov T1,#SERRATION
 155 0c98 0164     	  str T1,[T0,#TIM_CCR4]
 156 0c9a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0c9e C162     	  str T1,[T0,#TIM_ARR]
 158 0ca0 6BE0     	  b tv_isr_exit 
 159 0ca2 0729     	1: cmp T1,#7
 160 0ca4 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0ca6 40F62821 	  mov T1,#VSYNC_PULSE
 163 0caa 0164     	  str T1,[T0,#TIM_CCR4]
 164 0cac 65E0     	  b tv_isr_exit
 165 0cae 0D29     	2: cmp T1,#13
 166 0cb0 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0cb2 4FF0DB01 	   mov T1,#SERRATION 
 169 0cb6 0164     	   str T1,[T0,#TIM_CCR4]
 170 0cb8 5FE0     	   b tv_isr_exit   
 171 0cba 1229     	3: cmp T1,#18
 172 0cbc 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0cbe 216F     	   ldr T1,[UP,#VID_FIELD]
 175 0cc0 0029     	   cmp T1,#ODD_FIELD  
 176 0cc2 5AD0     	   beq tv_isr_exit 
 177 0cc4 01E0     	   b sync_end 
 178 0cc6 1329     	4: cmp T1,#19 
 179 0cc8 57D1     	   bne tv_isr_exit
 180              	sync_end: 
ARM GAS  forth.s 			page 39


 181 0cca 4FF00901 	   mov T1,#9
 182 0cce A166     	   str T1,[UP,#VID_CNTR]
 183 0cd0 4FF4E171 	   mov T1,#HPULSE 
 184 0cd4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0cd6 41F2D471 	   mov T1,#HPER 
 186 0cda C162     	   str T1,[T0,#TIM_ARR] 
 187 0cdc 4FF00101 	   mov T1,#ST_PREVID 
 188 0ce0 E166     	   str T1,[UP,#VID_STATE]
 189 0ce2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ce4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ce6 48D4     	   bmi tv_isr_exit 
 194 0ce8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0cec E166     	   str T1,[UP,#VID_STATE]
 196 0cee 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0cf2 C160     	   str T1,[T0,#TIM_DIER]
 198 0cf4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0cf6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0cf8 06D9     	   bls 1f 
 205 0cfa 4FF00301 	   mov T1,#ST_POSTVID 
 206 0cfe E166     	   str T1,[UP,#VID_STATE]
 207 0d00 4FF00101 	   mov T1,#1 
 208 0d04 C160     	   str T1,[T0,#TIM_DIER]
 209 0d06 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0d08 606F     	   ldr T0,[UP,#VID_BUFFER]
 212 0d0a A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0d0e 4FF0A003 	   mov T3,#160
 214 0d12 03FB01F1 	   mul T1,T3 
 215 0d16 0844     	   add T0,T1  
 216 0d18 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0d20 10F8012B 	2: ldrb T2,[T0],#1 
 222 0d24 4FEA0222 	   lsl T2,#8 
 223 0d28 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0d2a AFF30080 	   nop.w 
 225 0d2e AFF30080 	   nop.w
 226 0d32 AFF30080 	   nop.w 
 227 0d36 AFF30080 	   nop.w 
 228 0d3a 4FEA0212 	   lsl T2,#4  
 229 0d3e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0d40 AFF30080 	   nop.w
 231 0d44 AFF30080 	   nop.w  
 232 0d48 013B     	   subs T3,#1
 233 0d4a E9D1     	   bne 2b  
 234 0d4c 4FF47022 	   mov T2,#(15<<16) 
 235 0d50 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0d52 12E0     	   b tv_isr_exit 
ARM GAS  forth.s 			page 40


 237              	state_post_video:
 238 0d54 4FF48372 	   mov T2,#262
 239 0d58 9142     	   cmp T1,T2
 240 0d5a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0d5c 216F     	   ldr T1,[UP,VID_FIELD]
 243 0d5e 11B9     	   cbnz T1, frame_end 
 244 0d60 40F6E931 	   mov T1,#SYNC_LINE
 245 0d64 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0d66 4FF00001 	   mov T1,#ST_VSYNC 
 248 0d6a E166     	   str T1,[UP,#VID_STATE]
 249 0d6c 81EA0101 	   eor T1,T1 
 250 0d70 A166     	   str T1,[UP,#VID_CNTR]
 251 0d72 216F     	   ldr T1,[UP,#VID_FIELD]
 252 0d74 6FEA0101 	   mvn T1,T1  
 253 0d78 2167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0d7a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0d7c 740B0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0d8c 47F8046D 		_PUSH 
 266 0d90 04F19C06 		ADD TOS,UP,#BK_COLOR
 267 0d94 01F09ABF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0d98 800D0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0da8 47F8046D 		_PUSH 
 273 0dac 04F1A006 		ADD TOS,UP,#PEN_COLOR
 274 0db0 01F08CBF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0db4 9C0D0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0dc0 47F8046D 	  _PUSH 
 280 0dc4 04F19806 	  ADD TOS,UP,#COL 
 281 0dc8 01F080BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0dcc B80D0000 	  _HEADER CURSOR_ROW,3,"ROW"
ARM GAS  forth.s 			page 41


 285      03524F57 
 286 0dd4 47F8046D 	  _PUSH 
 287 0dd8 04F19406 	  ADD TOS,UP,#ROW 
 288 0ddc 01F076BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0de0 D00D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0dec 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0df0 00FB06F6 	  mul TOS,T0 
 295 0df4 01F06ABF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0df8 E40D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0e04 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0e08 00FB06F6 	  mul TOS,T0 
 302 0e0c 01F05EBF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0e10 FC0D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0e1c 47F8046D 	  _PUSH 
 308 0e20 DFF88C65 	  ldr TOS,=font_6x8 
 309 0e24 01F052BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0e28 140E0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0e34 47F8046D 	  _PUSH 
 315 0e38 666F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0e3a 01F047BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0e3e 2C0E0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0e48 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0e4a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0e4e 02FB00F0 	    mul T0,T2 
 330 0e52 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0e56 1044     	    add T0,T2 
ARM GAS  forth.s 			page 42


 332 0e58 636F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0e5a 0344     	    add T3,T0 // T3 -> byte address 
 334 0e5c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0e5e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0e62 11F0010F 	    tst T1,#1 
 337 0e66 01D0     	    beq 1f 
 338 0e68 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0e6c DFF84405 	1:  ldr T0,=plot_op 
 340 0e70 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0e74 05EA0205 	    and WP,T2 // mask out nibble 
 343 0e78 94F89C00 	    ldrb T0,[UP,#BK_COLOR]
 344 0e7c 11F0010F 	    tst T1,#1 
 345 0e80 01D1     	    bne 1f 
 346 0e82 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0e86 45EA0005 	1:  orr WP,T0  
 348 0e8a 1D70     	    strb WP,[T3]
 349 0e8c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0e8e 05EA0205 	    and WP,T2 
 352 0e92 94F8A000 	    ldrb T0,[UP,#PEN_COLOR]
 353 0e96 11F0010F 	    tst T1,#1
 354 0e9a 01D1     	    bne 1f 
 355 0e9c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0ea0 45EA0005 	1:	orr WP,T0 
 357 0ea4 1D70     	    strb WP,[T3]
 358 0ea6 0DE0     	    b 9f 
 359              	op_invert:
 360 0ea8 85EA0205 	    eor WP,T2 
 361 0eac 1D70     	    strb WP,[T3]
 362 0eae 09E0     	    b 9f 
 363              	op_xor:
 364 0eb0 D4F8A000 	    ldr T0,[UP,#PEN_COLOR]
 365 0eb4 11F0010F 	    tst T1,#1 
 366 0eb8 01D1     	    bne 1f 
 367 0eba 4FEA0010 	    lsl T0,#4 
 368 0ebe 85EA0005 	1:  eor WP,T0 
 369 0ec2 1D70     	    strb WP,[T3]
 370 0ec4 57F8046B 	9:  _POP 
 371 0ec8 01F000BF 	    _NEXT 
 372              	
 373 0ecc 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ed0 420E0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0edc A06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0ede 0028     	    cmp T0,#0
 381 0ee0 FCD1     	    bne 1b
 382 0ee2 01F0F3BE 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0ee6 D40E0000 	    _HEADER CLS,3,"CLS"
ARM GAS  forth.s 			page 43


 386      03434C53 
 386      00BF
 387 0ef0 80EA0000 	    eor T0,T0 
 388 0ef4 94F89C10 	    ldrb T1,[UP,#BK_COLOR]
 389 0ef8 40EA0100 	    orr T0,T1 
 390 0efc 4FEA0111 	    lsl T1,#4 
 391 0f00 40EA0100 	    orr T0,T1 
 392 0f04 4FEA0021 	    lsl T1,T0,#8 
 393 0f08 40EA0100 	    orr T0,T1 
 394 0f0c 4FEA0041 	    lsl T1,T0,#16
 395 0f10 40EA0100 	    orr T0,T1 
 396 0f14 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0f18 626F     	    ldr T2,[UP,#VID_BUFFER]
 398 0f1a 5050     	1:	str T0,[T2,T1]
 399 0f1c 0439     	    subs T1,#4
 400 0f1e FCD1     	    bne 1b
 401 0f20 1060     	    str T0,[T2]
 402 0f22 80EA0000 	    eor T0,T0 
 403 0f26 C4F89400 	    str T0,[UP,#ROW]
 404 0f2a C4F89800 	    str T0,[UP,#COL]
 405 0f2e 01F0CDBE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0f32 EA0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0f40 504700BF 	  _NEST
 412 0f44 F72E0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0f4c 85300000 	  _ADR DUPP  
 414 0f50 01300000 	  _ADR TOR 
 415 0f54 A5310000 	  _ADR STAR
 416 0f58 350E0000 	  _ADR VIDBUFF
 417 0f5c 85310000 	  _ADR PLUS
 418 0f60 BD2F0000 	  _ADR RFROM   
 419 0f64 F72E0000 	  _DOLIT 0 
 419      00000000 
 420 0f6c 5D3B0000 	  _ADR FILL 
 421 0f70 D32C0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0f74 360F0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0f84 504700BF 	    _NEST 
 429 0f88 350E0000 	    _ADR VIDBUFF 
 430 0f8c 85300000 	    _ADR DUPP 
 431 0f90 F72E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0f98 85300000 	    _ADR DUPP 
ARM GAS  forth.s 			page 44


 433 0f9c 01300000 	    _ADR TOR 
 434 0fa0 85310000 	    _ADR PLUS 
 435 0fa4 95300000 	    _ADR SWAP 
 436 0fa8 F72E0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0fb0 BD2F0000 	    _ADR RFROM  
 438 0fb4 95310000 	    _ADR SUBB 
 439 0fb8 153B0000 	    _ADR MOVE
 440 0fbc F72E0000 	    _DOLIT 24 
 440      18000000 
 441 0fc4 410F0000 	    _ADR CLRLINE 
 442 0fc8 D32C0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0fcc 780F0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0fdc 504700BF 	    _NEST 
 450 0fe0 350E0000 	    _ADR VIDBUFF
 451 0fe4 85300000 	    _ADR DUPP 
 452 0fe8 F72E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0ff0 85310000 	    _ADR PLUS 
 454 0ff4 F72E0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0ffc F72E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 1004 95310000 	    _ADR SUBB  
 457 1008 153B0000 	    _ADR MOVE
 458 100c F72E0000 	    _DOLIT 0 
 458      00000000 
 459 1014 410F0000 	    _ADR CLRLINE
 460 1018 D32C0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 101c D00F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 1028 E34D     	    ldr WP,=SCROLLUP 
 469 102a 45F00105 	    orr WP,#1
 470 102e 80EA0000 	    eor T0,T0 
 471 1032 C4F89800 	    str T0,[UP,#COL]
 472 1036 D4F89400 	    ldr T0,[UP,#ROW]
 473 103a 1828     	    cmp T0,#24 
 474 103c A2D0     	    beq SCROLLUP  
 475 103e 00F10100 	    add T0,#1 
 476 1042 C4F89400 	    str T0,[UP,#ROW]
 477 1046 01F041BE 	    _NEXT 
 478              	
ARM GAS  forth.s 			page 45


 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 104a 20100000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 1054 D4F89800 	  ldr T0,[UP,#COL]
 484 1058 00F10100 	  add T0,#1
 485 105c 3528     	  cmp T0,#53
 486 105e E3D5     	  bpl TV_CRLF  
 487 1060 C4F89800 	  str T0,[UP,#COL]
 488 1064 01F032BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 1068 4E100000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1074 D4F89800 	    ldr T0,[UP,#COL]
 497 1078 28B1     	    cbz T0,1f 
 498 107a A0F10100 	    sub T0,#1 
 499 107e C4F89800 	    str T0,[UP,#COL]
 500 1082 01F023BE 	    _NEXT 
 501 1086 D4F89400 	1:  ldr T0,[UP,#ROW]
 502 108a 38B1     	    cbz T0,9f
 503 108c A0F10100 	    sub T0,#1
 504 1090 C4F89400 	    str T0,[UP,#ROW]
 505 1094 4FF03400 	    mov T0,#52 
 506 1098 C4F89800 	    str T0,[UP,#COL]
 507 109c 01F016BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 10a0 4FF08000 	    mov T0,#128 
 513 10a4 06EA0006 	    and TOS,T0 
 514 10a8 4FEAD616 	    lsr TOS,#7
 515 10ac 01F00EBE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 10b0 3868     	  ldr T0,[DSP]
 520 10b2 00F10100 	  add T0,#1 
 521 10b6 3860     	  str T0,[DSP]
 522 10b8 01F008BE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 10bc 4FEA4606 	    lsl TOS,#1
 527 10c0 01F004BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
ARM GAS  forth.s 			page 46


 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 10c4 504700BF 	    _NEST 
 536 10c8 F72E0000 	    _DOLIT 5 
 536      05000000 
 537 10d0 01300000 	    _ADR TOR 
 538 10d4 01300000 	1:  _ADR TOR 
 539 10d8 F9320000 	    _ADR DDUP 
 540 10dc ED2F0000 	    _ADR RAT
 541 10e0 A1100000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 10e4 490E0000 	    _ADR PLOT 
 543 10e8 B1100000 	    _ADR INCR_X 
 544 10ec BD2F0000 	    _ADR RFROM 
 545 10f0 BD100000 	    _ADR NEXT_PIXEL
 546 10f4 192F0000 	    _DONXT 1b
 546      D4100000 
 547 10fc E5320000 	    _ADR TDROP 
 548 1100 D32C0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1104 A6F12006 	   sub TOS,#32
 553 1108 4FF00800 	   mov T0,#8 
 554 110c 00FB06F6 	   mul TOS,T0 
 555 1110 A748     	   ldr T0,=font_6x8
 556 1112 0644     	   add TOS,T0 
 557 1114 01F0DABD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1118 6C100000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1124 504700BF 	    _NEST
 565 1128 85300000 	    _ADR DUPP 
 566 112c F72E0000 	    _DOLIT 32 
 566      20000000 
 567 1134 45340000 	    _ADR ULESS
 568 1138 372F0000 	    _QBRAN 1f
 568      48110000 
 569 1140 5F2F0000 	    _BRAN CTRL_KEY
 569      AC110000 
 570 1148 05110000 	1:  _ADR CHAR_FONT 
 571 114c C10D0000 	    _ADR CURSOR_COL 
 572 1150 912F0000 	    _ADR AT
 573 1154 050E0000 	    _ADR COLX  // x coord 
 574 1158 D50D0000 	    _ADR CURSOR_ROW 
 575 115c 912F0000 	    _ADR AT    
 576 1160 ED0D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1164 A9320000 	    _ADR ROT  // TEST 
 578 1168 F72E0000 	    _DOLIT 7   
 578      07000000 
 579 1170 01300000 	    _ADR TOR  
 580 1174 01300000 	1:  _ADR TOR  // { x y }
ARM GAS  forth.s 			page 47


 581 1178 F9320000 	    _ADR DDUP  // { x y x y }
 582 117c ED2F0000 	    _ADR RAT 
 583 1180 B12F0000 	    _ADR CAT   // { x y x y r }
 584 1184 C5100000 	    _ADR CHAR_ROW 
 585 1188 E1310000 	    _ADR ONEP // {x y' }
 586 118c BD2F0000 	    _ADR RFROM 
 587 1190 E1310000 	    _ADR ONEP // {x y' c-adr' }
 588 1194 192F0000 	    _DONXT 1b
 588      74110000 
 589 119c E5320000 	    _ADR TDROP  
 590 11a0 55100000 	    _ADR RIGHT
 591 11a4 95120000 	9:  _ADR SHOW_CURSOR 
 592 11a8 D32C0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 11ac 1D130000 	    _ADR HIDE_CURSOR
 595 11b0 85300000 	    _ADR DUPP 
 596 11b4 F72E0000 	    _DOLIT BKSPP  
 596      08000000 
 597 11bc 0D340000 	    _ADR EQUAL 
 598 11c0 372F0000 	    _QBRAN 1f 
 598      D8110000 
 599 11c8 75120000 	    _ADR BACK_SPACE 
 600 11cc 75300000 	8:  _ADR DROP 
 601 11d0 5F2F0000 	    _BRAN 9b 
 601      A4110000 
 602 11d8 85300000 	1:  _ADR DUPP 
 603 11dc F72E0000 	    _DOLIT CRR 
 603      0D000000 
 604 11e4 0D340000 	    _ADR EQUAL 
 605 11e8 372F0000 	    _QBRAN 1f 
 605      FC110000 
 606 11f0 1D120000 	    _ADR CAR_RET
 607 11f4 5F2F0000 	    _BRAN 8b
 607      CC110000 
 608 11fc F72E0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1204 0D340000 	    _ADR EQUAL 
 610 1208 372F0000 	    _QBRAN 9b 
 610      A4110000 
 611 1210 35120000 	    _ADR LN_FEED
 612 1214 5F2F0000 	    _BRAN 9b  
 612      A4110000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 121c 504700BF 	   _NEST
 620 1220 F72E0000 	   _DOLIT 0 
 620      00000000 
 621 1228 C10D0000 	   _ADR CURSOR_COL 
 622 122c 7D2F0000 	   _ADR STORE 
 623 1230 D32C0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
ARM GAS  forth.s 			page 48


 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1234 504700BF 	    _NEST 
 631 1238 D50D0000 	    _ADR CURSOR_ROW 
 632 123c 912F0000 	    _ADR AT 
 633 1240 85300000 	    _ADR DUPP 
 634 1244 F72E0000 	    _DOLIT 24 
 634      18000000 
 635 124c 2D310000 	    _ADR XORR 
 636 1250 372F0000 	    _QBRAN 1f
 636      68120000 
 637 1258 E1310000 	    _ADR ONEP 
 638 125c D50D0000 	    _ADR CURSOR_ROW 
 639 1260 7D2F0000 	    _ADR STORE 
 640 1264 D32C0000 	    _UNNEST    
 641 1268 75300000 	1:  _ADR DROP 
 642 126c 850F0000 	    _ADR SCROLLUP 
 643 1270 D32C0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1274 504700BF 	  _NEST 
 652 1278 75100000 	  _ADR LEFT 
 653 127c 95120000 	  _ADR SHOW_CURSOR
 654 1280 D32C0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1284 1C110000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1294 504700BF 	    _NEST 
 663 1298 F72E0000 	    _DOLIT 0xFF
 663      FF000000 
 664 12a0 D50D0000 	0:  _ADR CURSOR_ROW
 665 12a4 912F0000 	    _ADR AT  
 666 12a8 E1310000 	    _ADR ONEP 
 667 12ac ED0D0000 	    _ADR ROWY 
 668 12b0 F72E0000 	    _DOLIT BPR
 668      A0000000 
 669 12b8 A5310000 	    _ADR STAR
 670 12bc F72E0000 	    _DOLIT BPR  
 670      A0000000 
 671 12c4 95310000 	    _ADR SUBB 
 672 12c8 C10D0000 	    _ADR CURSOR_COL
 673 12cc 912F0000 	    _ADR AT 
 674 12d0 050E0000 	    _ADR COLX 
 675 12d4 85320000 	    _ADR TWOSL  
ARM GAS  forth.s 			page 49


 676 12d8 85310000 	    _ADR PLUS
 677 12dc 350E0000 	    _ADR VIDBUFF
 678 12e0 85310000 	    _ADR PLUS
 679 12e4 F72E0000 	    _DOLIT 2
 679      02000000 
 680 12ec 01300000 	    _ADR TOR  
 681 12f0 F9320000 	1:  _ADR DDUP 
 682 12f4 9D2F0000 	    _ADR CSTOR 
 683 12f8 E1310000 	    _ADR ONEP 
 684 12fc 192F0000 	    _DONXT 1b
 684      F0120000 
 685 1304 D1320000 	2:  _ADR DDROP // drop 3 elements 
 686 1308 D32C0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 130c 88120000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 131c 504700BF 	    _NEST 
 694 1320 8D0D0000 	    _ADR BACKCOLOR 
 695 1324 912F0000 	    _ADR AT 
 696 1328 85300000 	    _ADR DUPP  
 697 132c F72E0000 	    _DOLIT 4 
 697      04000000 
 698 1334 75310000 	    _ADR LSHIFT 
 699 1338 19310000 	    _ADR ORR 
 700 133c 5F2F0000 	    _BRAN 0b
 700      A0120000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1344 10130000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1350 352E     	    cmp TOS,#53
 706 1352 01D4     	    bmi 1f 
 707 1354 4FF03406 	    mov TOS,#52
 708 1358 C4F89860 	1:  str TOS,[UP,#COL]
 709 135c 57F8046B 	    _POP
 710 1360 192E     	    cmp TOS,#25
 711 1362 01D4     	    bmi 1f 
 712 1364 4FF01806 	    mov TOS,#24 
 713 1368 C4F89460 	1:  str TOS,[UP,#ROW]
 714 136c 57F8046B 	    _POP 
 715 1370 01F0ACBC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1374 48130000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1380 504700BF 	    _NEST 
 721 1384 8D3A0000 	    _ADR PAD 
ARM GAS  forth.s 			page 50


 722 1388 85300000 	    _ADR DUPP 
 723 138c E1310000 	    _ADR ONEP 
 724 1390 F72E0000 	    _DOLIT 53
 724      35000000 
 725 1398 A5480000 	    _ADR ACCEP
 726 139c 95300000 	    _ADR SWAP 
 727 13a0 75300000 	    _ADR DROP 
 728 13a4 C5300000 	    _ADR OVER 
 729 13a8 9D2F0000 	    _ADR CSTOR  
 730 13ac D32C0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
ARM GAS  forth.s 			page 51


 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
ARM GAS  forth.s 			page 52


 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
ARM GAS  forth.s 			page 53


 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
ARM GAS  forth.s 			page 54


   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
ARM GAS  forth.s 			page 55


  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
ARM GAS  forth.s 			page 56


  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
ARM GAS  forth.s 			page 57


 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 13bc 1C61     	   .byte 0x1c,'a' 
   9 13be 3262     	   .byte 0x32,'b'
  10 13c0 2163     	   .byte 0x21,'c'
  11 13c2 2364     	   .byte 0x23,'d'
  12 13c4 2465     	   .byte 0x24,'e'
  13 13c6 2B66     	   .byte 0x2b,'f'
  14 13c8 3467     	   .byte 0x34,'g'
  15 13ca 3368     	   .byte 0x33,'h'
  16 13cc 4369     	   .byte 0x43,'i'
  17 13ce 3B6A     	   .byte 0x3B,'j'
  18 13d0 426B     	   .byte 0x42,'k'
  19 13d2 4B6C     	   .byte 0x4b,'l'
  20 13d4 3A6D     	   .byte 0x3a,'m'
  21 13d6 316E     	   .byte 0x31,'n'
  22 13d8 446F     	   .byte 0x44,'o'
  23 13da 4D70     	   .byte 0x4d,'p'
  24 13dc 1571     	   .byte 0x15,'q'
  25 13de 2D72     	   .byte 0x2d,'r'
  26 13e0 1B73     	   .byte 0x1b,'s'
  27 13e2 2C74     	   .byte 0x2c,'t'
  28 13e4 3C75     	   .byte 0x3c,'u'
  29 13e6 2A76     	   .byte 0x2a,'v'
  30 13e8 1D77     	   .byte 0x1d,'w'
  31 13ea 2278     	   .byte 0x22,'x'
  32 13ec 3579     	   .byte 0x35,'y'
  33 13ee 1A7A     	   .byte 0x1a,'z'
  34 13f0 4530     	   .byte 0x45,'0'
  35 13f2 1631     	   .byte 0x16,'1'
  36 13f4 1E32     	   .byte 0x1e,'2'
  37 13f6 2633     	   .byte 0x26,'3'
  38 13f8 2534     	   .byte 0x25,'4'
  39 13fa 2E35     	   .byte 0x2e,'5'
  40 13fc 3636     	   .byte 0x36,'6'
  41 13fe 3D37     	   .byte 0x3d,'7'
  42 1400 3E38     	   .byte 0x3e,'8'
  43 1402 4639     	   .byte 0x46,'9'
  44 1404 0E60     	   .byte 0x0e,'`'
  45 1406 4E2D     	   .byte 0x4e,'-'
  46 1408 553D     	   .byte 0x55,'='
  47 140a 5D5C     	   .byte 0x5d,'\\'
ARM GAS  forth.s 			page 58


  48 140c 545B     	   .byte 0x54,'['
  49 140e 5B5D     	   .byte 0x5b,']'
  50 1410 4C3B     	   .byte 0x4c,';'
  51 1412 5227     	   .byte 0x52,'\''
  52 1414 412C     	   .byte 0x41,','
  53 1416 492E     	   .byte 0x49,'.'
  54 1418 7C2A     	   .byte 0x7c,'*'
  55 141a 792B     	   .byte 0x79,'+'
  56 141c 2920     	   .byte 0x29,' '
  57 141e 5A0D     	   .byte SC_ENTER,CRR 
  58 1420 6608     	   .byte SC_BKSP,BKSPP 
  59 1422 0D09     	   .byte SC_TAB,9
  60 1424 761B     	   .byte SC_ESC,27
  61 1426 119E     	   .byte SC_LALT,VK_LALT 
  62 1428 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 142a 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 142c 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 142e 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1430 5800     	   .byte SC_CAPS,0
  67 1432 0580     	   .byte SC_F1,VK_F1
  68 1434 0681     	   .byte SC_F2,VK_F2
  69 1436 0482     	   .byte SC_F3,VK_F3
  70 1438 0C83     	   .byte SC_F4,VK_F4
  71 143a 0384     	   .byte SC_F5,VK_F5
  72 143c 0B85     	   .byte SC_F6,VK_F6
  73 143e 8386     	   .byte SC_F7,VK_F7
  74 1440 0A87     	   .byte SC_F8,VK_F8
  75 1442 0188     	   .byte SC_F9,VK_F9
  76 1444 098A     	   .byte SC_F10,VK_F10
  77 1446 788B     	   .byte SC_F11,VK_F11
  78 1448 078C     	   .byte SC_F12,VK_F12
  79 144a 7030     	   .byte SC_KP0,'0'
  80 144c 6931     	   .byte SC_KP1,'1'
  81 144e 7232     	   .byte SC_KP2,'2'
  82 1450 7A33     	   .byte SC_KP3,'3'
  83 1452 6B34     	   .byte SC_KP4,'4'
  84 1454 7335     	   .byte SC_KP5,'5'
  85 1456 7436     	   .byte SC_KP6,'6'
  86 1458 6C37     	   .byte SC_KP7,'7'
  87 145a 7538     	   .byte SC_KP8,'8'
  88 145c 7D39     	   .byte SC_KP9,'9'
  89 145e 7C2A     	   .byte SC_KPMUL,'*'
  90 1460 4A2F     	   .byte SC_KPDIV,'/'
  91 1462 792B     	   .byte SC_KPPLUS,'+'
  92 1464 7B2D     	   .byte SC_KPMINUS,'-'
  93 1466 712E     	   .byte SC_KPDOT,'.'
  94 1468 5A0D     	   .byte SC_KPENTER,'\r'
  95 146a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 146c AAAA     	   .byte BAT_OK,BAT_OK  
  97 146e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1470 6141     	   .byte 'a','A'
 102 1472 6242     	   .byte 'b','B'
 103 1474 6343     	   .byte 'c','C'
 104 1476 6444     	   .byte 'd','D'
ARM GAS  forth.s 			page 59


 105 1478 6545     	   .byte 'e','E'
 106 147a 6646     	   .byte 'f','F'
 107 147c 6747     	   .byte 'g','G'
 108 147e 6848     	   .byte 'h','H'
 109 1480 6949     	   .byte 'i','I'
 110 1482 6A4A     	   .byte 'j','J'
 111 1484 6B4B     	   .byte 'k','K'
 112 1486 6C4C     	   .byte 'l','L'
 113 1488 6D4D     	   .byte 'm','M'
 114 148a 6E4E     	   .byte 'n','N'
 115 148c 6F4F     	   .byte 'o','O'
 116 148e 7050     	   .byte 'p','P'
 117 1490 7151     	   .byte 'q','Q'
 118 1492 7252     	   .byte 'r','R'
 119 1494 7353     	   .byte 's','S'
 120 1496 7454     	   .byte 't','T'
 121 1498 7555     	   .byte 'u','U'
 122 149a 7656     	   .byte 'v','V'
 123 149c 7757     	   .byte 'w','W'
 124 149e 7858     	   .byte 'x','X'
 125 14a0 7959     	   .byte 'y','Y'
 126 14a2 7A5A     	   .byte 'z','Z'
 127 14a4 3121     	   .byte '1','!'
 128 14a6 3240     	   .byte '2','@'
 129 14a8 3323     	   .byte '3','#'
 130 14aa 3424     	   .byte '4','$'
 131 14ac 3525     	   .byte '5','%'
 132 14ae 365E     	   .byte '6','^'
 133 14b0 3726     	   .byte '7','&'
 134 14b2 382A     	   .byte '8','*'
 135 14b4 3928     	   .byte '9','('
 136 14b6 3029     	   .byte '0',')'
 137 14b8 2D5F     	   .byte '-','_'
 138 14ba 3D2B     	   .byte '=','+'
 139 14bc 607E     	   .byte '`','~'
 140 14be 2722     	   .byte '\'','"'
 141 14c0 2C3C     	   .byte ',','<'
 142 14c2 2E3E     	   .byte '.','>'
 143 14c4 2F3F     	   .byte '/','?'
 144 14c6 5C7C     	   .byte '\\','|'
 145 14c8 3B3A     	   .byte ';',':'
 146 14ca 5B7B     	   .byte '[','{'
 147 14cc 5D7D     	   .byte ']','}'
 148 14ce 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 14d0 315C     	   .byte '1','\\'
 153 14d2 3240     	   .byte '2','@'
 154 14d4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 14d6 363F     	   .byte '6','?'
 158 14d8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 14da 397B     	   .byte '9','{'
 161 14dc 307D     	   .byte '0','}'
ARM GAS  forth.s 			page 60


 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 14de 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 14e0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 14e2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 14e4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 14e6 11A3     	    .byte SC_RALT,VK_RALT
 172 14e8 2F97     	    .byte SC_APPS,VK_APPS
 173 14ea 758D     	    .byte SC_UP,VK_UP
 174 14ec 728E     	    .byte SC_DOWN,VK_DOWN
 175 14ee 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 14f0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 14f2 7095     	    .byte SC_INSERT,VK_INSERT
 178 14f4 6C91     	    .byte SC_HOME,VK_HOME
 179 14f6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 14f8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 14fa 717F     	    .byte SC_DEL,VK_DELETE
 182 14fc 6992     	    .byte SC_END,VK_END
 183 14fe 4A2F     	    .byte SC_KPDIV,'/'
 184 1500 5A0D     	    .byte SC_KPENTER,'\r'
 185 1502 1200     	    .byte 0x12,0
 186 1504 7C00     	    .byte 0x7c,0
 187 1506 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1508 6303     	   .byte 'c', VK_CTRL_C 
 193 150a 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 150c 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 150e 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1510 11A3     	   .byte SC_RALT,VK_RALT
 197 1512 2F97     	   .byte SC_APPS,VK_APPS
 198 1514 7095     	   .byte SC_INSERT,VK_INSERT
 199 1516 6C91     	   .byte SC_HOME,VK_HOME
 200 1518 7D93     	   .byte SC_PGUP,VK_PGUP
 201 151a 717F     	   .byte SC_DEL,VK_DELETE
 202 151c 6992     	   .byte SC_END,VK_END
 203 151e 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1520 758D     	   .byte SC_UP,VK_UP
 205 1522 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1524 728E     	   .byte SC_DOWN,VK_DOWN
 207 1526 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1528 4A2F     	   .byte SC_KPDIV,'/'
 209 152a 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 152c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 152e 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1530 119E     	   .byte SC_LALT,VK_LALT
 213 1532 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1534 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1536 761B     	   .byte SC_ESC,VK_ESC
 216 1538 779A     	   .byte SC_NUM,VK_NLOCK
 217 153a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 153c 0000     	   .byte 0,0
ARM GAS  forth.s 			page 61


 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 153e 00BF     	    _GBL_FUNC kbd_isr 
  79 1540 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1548 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 154c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 154e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1556 D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
  84 155a 10F0020F 	    tst r0,#KBD_TX 
  85 155e 40F08480 	    bne send_bit  
  86 1562 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1564 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1568 01F10102 	    add r2,r1,#1
  89 156c 84F87820 	    strb r2,[UP,#KBD_BITCNTR]
  90 1570 0029     	    cmp r1,#0
ARM GAS  forth.s 			page 62


  91 1572 15D0     	    beq start_bit 
  92 1574 0929     	    cmp r1,#9 
  93 1576 25D0     	    beq parity_bit 
  94 1578 0A29     	    cmp r1,#10 
  95 157a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 157c 94F87920 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1580 4FEA5202 	    lsr r2,#1 
  99 1584 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1588 07D0     	    beq 1f 
 101 158a 42F08002 	    orr r2,#(1<<7)
 102 158e 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1592 00F10100 	    add r0,#1 
 104 1596 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 105 159a 84F87920 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 159e 63E0     	    b 9f         
 107              	start_bit:
 108 15a0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 15a4 60D1     	    bne 9f // not a start bit 
 110 15a6 80EA0000 	    eor r0,r0 
 111 15aa 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 112 15ae 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 113 15b2 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 15b6 6FF00101 	    mvn r1,#1
 115 15ba 00EA0100 	    and r0,r1 // clear error flag 
 116 15be 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 117 15c2 51E0     	    b 9f 
 118              	parity_bit:
 119 15c4 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 120 15c8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 15cc 4CD0     	    beq 9f  
 122 15ce 01F10101 	    add r1,#1 
 123 15d2 84F87B10 	    strb r1,[UP,#KBD_PARITY]  
 124 15d6 47E0     	    b 9f      
 125              	stop_bit:
 126 15d8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 15dc 40D0     	    beq 8f // error stop bit expected 
 128 15de 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 129 15e2 11F0010F 	    tst r1,#1 
 130 15e6 3BD0     	    beq 8f // error parity
 131 15e8 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 15ec 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 15f0 E028     	    cmp r0,#XT_KEY
 134 15f2 04D1     	    bne 1f
 135 15f4 41F04001 	    orr r1,#KBD_F_XT
 136 15f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 137 15fc 30E0     	    b 8f  
 138 15fe 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1602 14D0     	    beq store_code
 140 1604 5828     	    cmp r0,#SC_CAPS
 141 1606 04D1     	    bne 1f
 142 1608 81F00401 	    eor r1,#KBD_F_CAPS
 143 160c 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1610 06E0     	    b 2f 
 145 1612 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
ARM GAS  forth.s 			page 63


 146 161c 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1620 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1624 01EA0201 	    and r1,r2
 149 1628 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 150 162c 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 162e F028     	    cmp r0,#KEY_REL
 154 1630 04D1     	    bne 1f
 155              	// set release flags 
 156 1632 41F08001 	    orr r1,#KBD_F_REL 
 157 1636 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 158 163a 11E0     	    b 8f     
 159 163c 0146     	1:  mov r1,r0 
 160 163e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1648 0AD1     	    bne 8f // was async key 
 162 164a D4F89000 	    ldr r0,[UP,#KBD_QTAIL]
 163 164e 04F17C02 	    add r2,UP,#KBD_QUEUE
 164 1652 1154     	    strb r1,[r2,r0]
 165 1654 00F10100 	    add r0,#1
 166 1658 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 165c 84F89000 	    strb r0,[UP,#KBD_QTAIL]
 168 1660 80EA0000 	8:  eor r0,r0 
 169 1664 A4F87800 	    strh r0,[UP,#KBD_BITCNTR]
 170 1668 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 166a 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 166e 01F10100 	    add r0,r1,#1
 182 1672 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 183 1676 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 167a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 167e 0829     	1:  cmp r1,#8 
 187 1680 15D0     	    beq send_parity 
 188 1682 0929     	    cmp r1,#9 
 189 1684 1CD0     	    beq send_stop
 190 1686 0A29     	    cmp r1,#10
 191 1688 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 168a 10F0010F 	    tst r0,#1
 194 168e 4FEA5000 	    lsr r0,#1
 195 1692 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 196 1696 02D1     	    bne 1f 
 197 1698 4FEA0242 	    lsl r2,#16
 198 169c 05E0     	    b 2f  
 199 169e 94F87B00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 16a2 00F10100 	    add r0,#1 
ARM GAS  forth.s 			page 64


 201 16a6 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 202 16aa 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 16ac 1CE0     	    b 9f 
 204              	send_parity:
 205 16ae 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 206 16b2 10F0010F 	    tst r0,#1
 207 16b6 01D0     	    beq 1f 
 208 16b8 4FEA0242 	    lsl r2,#16
 209 16bc 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 16be 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 16c0 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 16c2 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 16c6 1960     	    str r1,[r3,#GPIO_MODER]
 217 16c8 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 16ca 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 16ce 6FF00201 	    mvn r1,#KBD_TX 
 221 16d2 00EA0100 	    and r0,r1 
 222 16d6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 16d8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 16dc 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 225 16e0 80EA0000 	    eor r0,r0 
 226 16e4 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 227 16e8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 16ea 02B4     	    push {r1}
 238 16ec DFF86414 	    ldr r1,=async_keys
 239 16f0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 16fa 02BC     	    pop {r1}
 241 16fc 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 16fe 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
ARM GAS  forth.s 			page 65


 254      04EB
 255 1708 FF28     	    cmp r0,#255
 256 170a 01D1     	    bne set_async_key 
 257 170c 0020     	    movs r0,#0 
 258 170e 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1710 06B4     	    push {r1,r2}
 262 1712 94F87A20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1716 DFF84014 	    ldr r1,=async_jump 
 264 171a D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 171e 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1722 04E0     	    b set_reset
 268              	ctrl_key:
 269 1724 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1728 01E0     	    b set_reset 
 271              	alt_key:
 272 172a 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 172e 12F0800F 	    tst r2,#KBD_F_REL 
 275 1732 04D0     	    beq 1f 
 276 1734 6FEA0000 	    mvn r0,r0
 277 1738 02EA0002 	    and r2,r0
 278 173c 01E0     	    b 2f
 279 173e 42EA0002 	1:  orr r2,r0 
 280 1742 84F87A20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1746 5FF0FF30 	    movs r0,#-1
 282 174a 06BC     	9:  pop {r1,r2}
 283 174c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 174e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1750 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1752 1401     	    .byte SC_LCTRL,1  // left control 
 290 1754 1401     	    .byte SC_RCTRL,1  // right control 
 291 1756 1102     	    .byte SC_LALT,2  // left alt 
 292 1758 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 175a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 175c 00       	    .byte 0 // shift  key 
 297 175d 03       	    .byte (ctrl_key-shift_key)/2
 298 175e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 175f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1760 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
ARM GAS  forth.s 			page 66


 310 1768 1846     	    mov r0,r3 
 311 176a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 176e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1772 00B5FFF7 	    _CALL gpio_config
 313      14F85DF8 
 313      04EB
 314 177c 1846     	    mov r0,r3 
 315 177e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1782 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1786 00B5FFF7 	    _CALL gpio_config
 317      0AF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1790 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1798 4FF40050 	    mov r0,#(2<<12)
 321 179c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 179e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 17a6 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 17aa 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 17ac D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 17ae 80EA0000 	   eor r0,r0 
 328 17b2 C4F88C00 	   str r0,[UP,#KBD_QHEAD]
 329 17b6 C4F89000 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 17ba 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 17be 4FF00101 	   mov r1,#1 
 333 17c2 00B5FEF7 	   _CALL nvic_set_priority
 333      90FF5DF8 
 333      04EB
 334 17cc 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 17d0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A2FF5DF8 
 335      04EB
 336 17da 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 17dc 78130000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 17ec 47F8046D 	    _PUSH 
 342 17f0 94F87A60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 17f4 06F0FC06 	    and TOS,#0xFC  
 344 17f8 01F068BA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 17fc 0EB4     	    push {T1,T2,T3}
 352 17fe 80EA0000 	    eor T0,T0  
 353 1802 04F17C03 	    add T3,UP,#KBD_QUEUE
ARM GAS  forth.s 			page 67


 354 1806 D4F88C10 	    ldr T1,[UP,#KBD_QHEAD]
 355 180a D4F89020 	    ldr T2,[UP,#KBD_QTAIL]
 356 180e 9142     	    cmp T1,T2 
 357 1810 06D0     	    beq 2f  
 358 1812 585C     	    ldrb T0,[T3,T1]
 359 1814 01F10101 	    add T1,#1 
 360 1818 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 181c C4F88C10 	    str T1,[UP,#KBD_QHEAD]
 362 1820 0EBC     	2:  pop {T1,T2,T3}
 363 1822 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1824 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 182e 0000     	    movs T0,T0
 368 1830 F8D0     	    beq wait_code  
 369 1832 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1834 04B4     	    push {T2}
 380 1836 11F8012B 	1:  ldrb T2,[T1],#1
 381 183a 22B1     	    cbz T2,2f 
 382 183c 8242     	    cmp T2,T0
 383 183e 02D0     	    beq 2f 
 384 1840 01F10101 	    add T1,#1 
 385 1844 F7E7     	    b 1b 
 386 1846 0878     	2:  ldrb T0,[T1]
 387 1848 0000     	    movs T0,T0 // set/reset zero flag 
 388 184a 04BC     	9:  pop {T2}
 389 184c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 184e E0170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 185c 47F8046D 	    _PUSH 
 398 1860 86EA0606 	    eor TOS,TOS 
 399 1864 BD49     	    ldr T1,=sc_ascii // translation table
 400 1866 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 186a 4FF04002 	    mov T2,#KBD_F_XT 
 402 186e 1042     	    tst T0,T2
 403 1870 00D0     	    beq 1f
 404 1872 BB49     	    ldr T1,=extended // extended code translation
 405 1874 00B5FFF7 	1:  _CALL keycode
ARM GAS  forth.s 			page 68


 405      C1FF5DF8 
 405      04EB
 406 187e 98B1     	    cbz T0,inkey_exit
 407 1880 E128     	    cmp T0,#XT2_KEY // pause 
 408 1882 13D0     	    beq pause_key
 409 1884 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 188e 0646     	    mov TOS,T0
 411 1890 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 189a 032E     	    cmp TOS,#VK_CTRL_C 
 413 189c 3EF4FBAD 	    beq user_reboot 
 414 18a0 47F8046D 	    _PUSH 
 415 18a4 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 18a8 01F010BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 18ac 4FF00701 	    mov T1,#7 
 420 18b0 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 18ba 0139     	    subs T1,#1
 422 18bc F8D1     	    bne 1b 
 423 18be 01F005BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 18c2 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 18c6 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 18ca 06D1     	    bne shift_down 
 431 18cc 10F0200F 	    tst T0,#KBD_F_ALT  
 432 18d0 06D1     	    bne altchar_down 
 433 18d2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 18d6 06D1     	    bne ctrl_down 
 435 18d8 0DE0     	    b 9f 
 436              	shift_down:
 437 18da 3046     	    mov T0,TOS 
 438 18dc A149     	    ldr T1,=shifted 
 439 18de 04E0     	    b 8f 
 440              	altchar_down:
 441 18e0 3046     	    mov T0,TOS 
 442 18e2 A149     	    ldr T1,=altchar
 443 18e4 01E0     	    b 8f
 444              	ctrl_down:
 445 18e6 3046     	    mov T0,TOS 
 446 18e8 A049     	    ldr T1,=controls 
 447 18ea 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 18f4 0646     	    mov TOS,T0
 449 18f6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1900 7047     	    _RET 
ARM GAS  forth.s 			page 69


 451              	
 452              	do_capslock:
 453 1902 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1906 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 190a 0BD0     	    beq 9f 
 456 190c 412E     	    cmp TOS,#'A'
 457 190e 09D4     	    bmi 9f 
 458 1910 5B2E     	    cmp TOS,#'Z'+1 
 459 1912 03D4     	    bmi 3f 
 460 1914 612E     	    cmp TOS,#'a'
 461 1916 05D4     	    bmi 9f 
 462 1918 7B2E     	    cmp TOS,#'z'+1
 463 191a 03D5     	    bpl 9f 
 464 191c 4FF02000 	3:  mov T0,#(1<<5)
 465 1920 86EA0006 	    eor TOS,T0 
 466 1924 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1926 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1928 E06E     	1:  ldr r0,[UP,#VID_STATE]
 483 192a 0128     	    cmp r0,ST_PREVID 
 484 192c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 192e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1932 00B5FEF7 	    _CALL nvic_disable_irq
 487      06FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 193c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1944 1846     	    mov r0,r3 
 491 1946 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 194a 4FF01102 	    mov r2,#OUTPUT_OD
 493 194e 00B5FEF7 	    _CALL gpio_config 
 493      26FF5DF8 
 493      04EB
 494 1958 1846     	    mov r0,r3 
 495 195a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 195e 82EA0202 	    eor r2,r2 
 497 1962 00B5FEF7 	    _CALL gpio_out 
 497      72FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 196c 4FF4E150 	    mov r0,#150*48
 500 1970 0138     	1:  subs r0,#1 
ARM GAS  forth.s 			page 70


 501 1972 FDD1     	    bne 1b
 502 1974 01BC     	    pop {r0}
 503 1976 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 504 197a D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
 505 197e 40F00200 	    orr r0,#KBD_TX 
 506 1982 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 507 1986 80EA0000 	    eor r0,r0 
 508 198a 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 509 198e 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1992 1846     	    mov r0,r3 
 513 1994 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1998 4FF01102 	    mov r2,#OUTPUT_OD 
 515 199c 00B5FEF7 	    _CALL gpio_config 
 515      FFFE5DF8 
 515      04EB
 516 19a6 1846     	    mov r0,r3 
 517 19a8 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 19ac 82EA0202 	    eor r2,r2 
 519 19b0 00B5FEF7 	    _CALL gpio_out
 519      4BFF5DF8 
 519      04EB
 520              	// release clock line 
 521 19ba 1846     	    mov r0,r3 
 522 19bc 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 19c0 4FF00002 	    mov r2,#INPUT_FLOAT
 524 19c4 00B5FEF7 	    _CALL gpio_config
 524      EBFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 19ce 4FF00A00 	    mov r0,#10
 528 19d2 E060     	    str r0,[UP,#CD_TIMER]
 529 19d4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 19d6 20B1     	    cbz r0, 4f 
 531 19d8 94F87A00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 19dc 10F0020F 	    tst r0,#KBD_TX
 533 19e0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 19e2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 19e6 00B5FEF7 	    _CALL nvic_enable_irq
 536      97FE5DF8 
 536      04EB
 537 19f0 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 19f4 20F00201 	    bic r1,r0,#KBD_TX
 539 19f8 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 540 19fc 00F00200 	    and r0,#KBD_TX
 541 1a00 48B1     	    cbz r0, 5f
 542 1a02 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1a04 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1a08 1960     	    str r1,[r3,#GPIO_MODER]
 545 1a0a 80EA0000 	    eor r0,r0 
 546 1a0e 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1a12 6FEA0000 	    mvn r0,r0   
 548 1a16 0EBC     	5:  pop {r1,r2,r3}
 549 1a18 7047     	    _RET 
ARM GAS  forth.s 			page 71


 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1a1a 80EA0000 	    eor T0,T0 
 555 1a1e C4F88C00 	    str T0,[UP,#KBD_QHEAD]
 556 1a22 C4F89000 	    str T0,[UP,#KBD_QTAIL]
 557 1a26 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1a2a 6FF00301 	    mvn T1,#3
 559 1a2e 00EA0100 	    and T0,T1 
 560 1a32 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 561 1a36 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1a38 52180000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1a44 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1a48 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1a52 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1a54 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1a5e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1a68 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1a6a EBD0     	    beq 1b 
 575 1a6c 4FF4FA70 	    mov T0,#500 
 576 1a70 E060     	    str T0,[UP,#CD_TIMER]
 577 1a72 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1a7c 10B9     	    cbnz T0,3f
 579 1a7e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1a80 0028     	    cmp T0,#0 
 581 1a82 F6D1     	    bne 2b 
 582 1a84 47F8046D 	3:  _PUSH 
 583 1a88 0646     	    mov TOS,T0  
 584 1a8a 01F01FB9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1a8e 3C1A0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1a9c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
ARM GAS  forth.s 			page 72


 592      04EB
 593 1aa6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1aaa 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1ab4 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1abe FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1ac0 ECD0     	    beq 1b
 598 1ac2 FA28     	    cmp T0,#KBD_ACK  
 599 1ac4 F6D1     	    bne 2b 
 600 1ac6 3046     	2:  mov T0,TOS 
 601 1ac8 00F00700 	    and T0,#7 
 602 1acc 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1ad6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ae0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ae2 F0D0     	    beq 2b
 606 1ae4 FA28     	    cmp T0,#KBD_ACK 
 607 1ae6 F6D1     	    bne 3b  
 608 1ae8 57F8046B 	    _POP 
 609 1aec 01F0EEB8 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1af0 921A0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1b00 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1b04 10F0010F 	    tst T0,#1
 619 1b08 01D1     	    bne 1f 
 620 1b0a 01F0DFB8 	    _NEXT 
 621 1b0e 47F8046D 	1: _PUSH 
 622 1b12 6FF00101 	    mvn T1,#1 
 623 1b16 00EA0100 	    and T0,T1 
 624 1b1a 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 625 1b1e 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1b22 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1b2a F41A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
ARM GAS  forth.s 			page 73


 634 1b38 504700BF 	    _NEST
 635 1b3c 011B0000 	1:  _ADR CAPS_LED  
 636 1b40 5D180000 	    _ADR PS2_QKEY 
 637 1b44 95320000 	    _ADR QDUP 
 638 1b48 372F0000 	    _QBRAN 1b  
 638      3C1B0000 
 639 1b50 D32C0000 	    _UNNEST 
 640 1b54 4E170000 	
 640      5C170000 
 640      BC130000 
 640      E0140000 
 640      70140000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1b74 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1b7c 0346     	    mov r3,r0 
  44 1b7e 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 74


  45 1b82 4FF00102 	    mov r2,#OUTPUT_PP
  46 1b86 00B5FEF7 	    _CALL gpio_config 
  46      0AFE5DF8 
  46      04EB
  47 1b90 1846     	    mov r0,r3 
  48 1b92 4FF00401 	    mov r1,#PIN_F_SC  
  49 1b96 4FF00102 	    MOV r2,#1
  50 1b9a 00B5FEF7 	    _CALL gpio_out 
  50      56FE5DF8 
  50      04EB
  51 1ba4 1846     	    mov r0,r3 
  52 1ba6 4FF00501 	    mov r1,#PIN_SCK  
  53 1baa 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1bae 00B5FEF7 	    _CALL gpio_config 
  54      F6FD5DF8 
  54      04EB
  55 1bb8 1846     	    mov r0,r3 
  56 1bba 4FF00701 	    mov r1,#PIN_MOSI 
  57 1bbe 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1bc2 00B5FEF7 	    _CALL gpio_config 
  58      ECFD5DF8 
  58      04EB
  59 1bcc 1846     	    mov r0,r3
  60 1bce 4FF00601 	    mov r1,#PIN_MISO
  61 1bd2 4FF00202 	    mov r2,#INPUT_AFO  
  62 1bd6 00B5FEF7 	    _CALL gpio_config
  62      E2FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1be0 4CF6AA40 	    mov r0,#0xCCAA
  65 1be4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1be6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1bee 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1bf0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1bf4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1bf6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1bfe 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1c02 0180     	    strh r1,[r0,#SPI_CR1]
  73 1c04 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1c06 80EA0000 	    eor r0,r0 
  75 1c0a C5F25050 	    movt r0,#0x5550 
  76 1c0e 40EA0100 	    orr r0,r1 
  77 1c12 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1c14 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1c16 2E1B0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1c24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
ARM GAS  forth.s 			page 75


  86      C4F20200 
  87 1c2c 4FF00401 	    mov r1,#PIN_F_SC 
  88 1c30 4FF00002 	    mov r2,#0 
  89 1c34 00B5FEF7 	    _CALL gpio_out 
  89      09FE5DF8 
  89      04EB
  90 1c3e 01F045B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1c42 1A1C0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1c50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1c58 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1c5a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1c5e FBD1     	    bne 1b 
 102 1c60 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1c68 4FF00401 	    mov r1,#PIN_F_SC 
 104 1c6c 4FF00102 	    mov r2,#1 
 105 1c70 00B5FEF7 	    _CALL gpio_out 
 105      EBFD5DF8 
 105      04EB
 106 1c7a 01F027B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1c7e 461C0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1c8c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1c94 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1c96 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1c9a FBD0     	    beq 0b 
 118 1c9c 6FF00001 	    mvn T1,#0 
 119 1ca0 0173     	    strb T1,[T0,#SPI_DR]
 120 1ca2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1ca4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1ca8 FBD0     	    beq 1b     
 123              	2:  
 124 1caa 47F8046D 	    _PUSH 
 125 1cae 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1cb0 01F00CB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
ARM GAS  forth.s 			page 76


 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1cb4 821C0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1cc0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1cc8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1cca 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1cce FBD0     	    beq 0b 
 138 1cd0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1cd2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1cd4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1cd8 FBD0     	    beq 1b 
 142 1cda 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1cdc 57F8046B 	    _POP 
 144 1ce0 00F0F4BF 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ce4 B81C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1cf0 504700BF 	    _NEST 
 153 1cf4 251C0000 	    _ADR CHIP_SEL 
 154 1cf8 F72E0000 	    _DOLIT 4
 154      04000000 
 155 1d00 C11C0000 	    _ADR WR_BYTE
 156 1d04 511C0000 	    _ADR CHIP_DSEL
 157 1d08 D32C0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1d0c E81C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1d18 504700BF 	    _NEST 
 165 1d1c 251C0000 	    _ADR CHIP_SEL 
 166 1d20 F72E0000 	    _DOLIT 6 
 166      06000000 
 167 1d28 C11C0000 	    _ADR WR_BYTE 
 168 1d2c 511C0000 	    _ADR CHIP_DSEL 
 169 1d30 D32C0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1d34 101D0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
ARM GAS  forth.s 			page 77


 176 1d40 504700BF 	    _NEST
 177 1d44 251C0000 	    _ADR CHIP_SEL  
 178 1d48 F72E0000 	    _DOLIT sr_cmd 
 178      681D0000 
 179 1d50 85310000 	    _ADR PLUS 
 180 1d54 B12F0000 	    _ADR CAT
 181 1d58 C11C0000 	    _ADR WR_BYTE
 182 1d5c 8D1C0000 	    _ADR RD_BYTE
 183 1d60 511C0000 	    _ADR CHIP_DSEL  
 184 1d64 D32C0000 	    _UNNEST 
 185 1d68 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1d6b 381D0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1d78 504700BF 	    _NEST 
 193 1d7c 85300000 	    _ADR DUPP 
 194 1d80 F72E0000 	    _DOLIT 16
 194      10000000 
 195 1d88 5D310000 	    _ADR RSHIFT 
 196 1d8c C11C0000 	    _ADR WR_BYTE 
 197 1d90 85300000 	    _ADR DUPP
 198 1d94 F72E0000 	    _DOLIT 8 
 198      08000000 
 199 1d9c 5D310000 	    _ADR RSHIFT 
 200 1da0 C11C0000 	    _ADR WR_BYTE 
 201 1da4 C11C0000 	    _ADR WR_BYTE 
 202 1da8 D32C0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1dac 6F1D0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1dbc 504700BF 	    _NEST 
 210 1dc0 F72E0000 	1:  _DOLIT 0 
 210      00000000 
 211 1dc8 411D0000 	    _ADR RD_SR 
 212 1dcc F72E0000 	    _DOLIT 3 
 212      03000000 
 213 1dd4 05310000 	    _ADR ANDD 
 214 1dd8 372F0000 	    _QBRAN 2f
 214      E81D0000 
 215 1de0 5F2F0000 	    _BRAN 1b
 215      C01D0000 
 216 1de8 D32C0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
ARM GAS  forth.s 			page 78


 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1dec B01D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1dfc 504700BF 	    _NEST 
 225 1e00 191D0000 	    _ADR WR_ENBL
 226 1e04 251C0000 	    _ADR CHIP_SEL 
 227 1e08 F72E0000 	    _DOLIT 0x20 
 227      20000000 
 228 1e10 C11C0000 	    _ADR WR_BYTE 
 229 1e14 791D0000 	    _ADR SEND_ADR
 230 1e18 511C0000 	    _ADR CHIP_DSEL 
 231 1e1c BD1D0000 	    _ADR WAIT_DONE 
 232 1e20 D32C0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1e24 F01D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1e34 504700BF 	    _NEST 
 240 1e38 191D0000 	    _ADR WR_ENBL 
 241 1e3c 251C0000 	    _ADR CHIP_SEL
 242 1e40 F72E0000 	    _DOLIT 0x60
 242      60000000 
 243 1e48 F72E0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1e50 C11C0000 	    _ADR WR_BYTE 
 245 1e54 C11C0000 	    _ADR WR_BYTE 
 246 1e58 511C0000 	    _ADR CHIP_DSEL 
 247 1e5c BD1D0000 	    _ADR WAIT_DONE
 248 1e60 D32C0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1e64 281E0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1e70 504700BF 	    _NEST
 258 1e74 251C0000 	    _ADR CHIP_SEL 
 259 1e78 F72E0000 	    _DOLIT 3 
 259      03000000 
 260 1e80 C11C0000 	    _ADR WR_BYTE 
 261 1e84 791D0000 	    _ADR SEND_ADR
 262 1e88 01300000 	    _ADR TOR   
 263 1e8c 5F2F0000 	    _BRAN 2f
 263      A41E0000 
ARM GAS  forth.s 			page 79


 264 1e94 8D1C0000 	1:  _ADR RD_BYTE
 265 1e98 C5300000 	    _ADR OVER 
 266 1e9c 9D2F0000 	    _ADR CSTOR
 267 1ea0 E1310000 	    _ADR ONEP 
 268 1ea4 192F0000 	2:  _DONXT 1b
 268      941E0000 
 269 1eac 75300000 	    _ADR DROP 
 270 1eb0 511C0000 	    _ADR CHIP_DSEL 
 271 1eb4 D32C0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1eb8 681E0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1ec4 504700BF 	    _NEST 
 280 1ec8 191D0000 	    _ADR WR_ENBL
 281 1ecc 251C0000 	    _ADR CHIP_SEL
 282 1ed0 F72E0000 	    _DOLIT 2 
 282      02000000 
 283 1ed8 C11C0000 	    _ADR WR_BYTE 
 284 1edc 791D0000 	    _ADR SEND_ADR
 285 1ee0 01300000 	    _ADR TOR
 286 1ee4 5F2F0000 	    _BRAN 2f 
 286      041F0000 
 287 1eec 85300000 	1:  _ADR DUPP 
 288 1ef0 B12F0000 	    _ADR CAT 
 289 1ef4 85300000 	    _ADR DUPP 
 290 1ef8 BD420000 	    _ADR HDOT
 291 1efc C11C0000 	    _ADR WR_BYTE 
 292 1f00 E1310000 	    _ADR ONEP
 293 1f04 192F0000 	2:  _DONXT 1b 
 293      EC1E0000 
 294 1f0c 75300000 	    _ADR DROP
 295 1f10 511C0000 	    _ADR CHIP_DSEL
 296 1f14 BD1D0000 	    _ADR WAIT_DONE 
 297 1f18 D32C0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
ARM GAS  forth.s 			page 80


 315              	********************************/
 316 1f1c BC1E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1f2c 504700BF 	    _NEST 
 318              	    
 319 1f30 D32C0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1f34 201F0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1f44 504700BF 	    _NEST 
 327              	
 328 1f48 D32C0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1f4c 381F0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1f54 504700BF 	    _NEST 
 336              	
 337 1f58 D32C0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1f5c 501F0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1f68 504700BF 	    _NEST 
 345              	
 346 1f6c D32C0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1f70 601F0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1f7c 504700BF 	    _NEST 
 354              	
 355 1f80 D32C0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
ARM GAS  forth.s 			page 81


   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1f84 5F708930 	     .word  0x3089705F // 1e-9
  34 1f88 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1f8c 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1f90 BD378635 	     .word  0x358637BD // 1e-6 
  37 1f94 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1f98 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1f9c 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1fa0 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1fa4 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1fa8 0000803F 	     .word  0x3F800000 // 1.0 
  44 1fac 00002041 	     .word  0x41200000 // 1e1 
  45 1fb0 0000C842 	     .word  0x42C80000 // 1e2 
  46 1fb4 00007A44 	     .word  0x447A0000 // 1e3 
  47 1fb8 00401C46 	     .word  0x461C4000 // 1e4 
  48 1fbc 0050C347 	     .word  0x47C35000 // 1e5 
  49 1fc0 00247449 	     .word  0x49742400 // 1e6 
  50 1fc4 8096184B 	     .word  0x4B189680 // 1e7
  51 1fc8 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1fcc 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1fd0 741F0000 	    _HEADER PWR10,5,"PWR10"
ARM GAS  forth.s 			page 82


  59      05505752 
  59      313000BF 
  60 1fdc 4FEA8606 	    lsl TOS,#2  
  61 1fe0 FF48     	    ldr t0, =p10 
  62 1fe2 0644     	    add TOS,TOS,T0
  63 1fe4 3668     	    ldr TOS,[TOS]  
  64 1fe6 00F071BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1fea DFF8F803 	   ldr.w r0,=CPACR 
  73 1fee 0168     	   ldr R1,[R0]
  74 1ff0 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1ff4 0160     	   str r1,[r0]
  76 1ff6 BFF34F8F 	   dsb 
  77 1ffa FB48     	   ldr r0,=FPC_BASE_ADR
  78 1ffc 81EA0101 	   eor r1,r1 
  79 2000 0160     	   str r1,[r0,FPCCR]
  80 2002 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 2006 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 2008 D41F0000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 2010 4FF05100 	    mov r0,#FPU_IRQ 
  92 2014 00B5FEF7 	    _CALL nvic_disable_irq
  92      95FB5DF8 
  92      04EB
  93 201e 00F055BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 2022 0C200000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 202c 4FF05100 	    mov r0,#FPU_IRQ
 102 2030 00B5FEF7 	    _CALL nvic_enable_irq
 102      72FB5DF8 
 102      04EB
 103 203a 00F047BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
ARM GAS  forth.s 			page 83


 108              	   stack fpu SCR register 
 109              	***************************/
 110 203e 26200000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 2048 47F8046D 	   _PUSH 
 112 204c F1EE106A 	   vmrs TOS,FPSCR
 113 2050 BFF34F8F 	   dsb  
 114 2054 00F03ABE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 2058 42200000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 2068 F1EE100A 	   vmrs T0,FPSCR 
 125 206c BFF34F8F 	   dsb 
 126 2070 06EA0006 	   and TOS,T0  
 127 2074 E1EE106A 	   vmsr FPSCR,TOS 
 128 2078 BFF34F8F 	   dsb 
 129 207c 00F026BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2080 5C200000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 2088 00EE106A 	    vmov.f32 S0,TOS 
 138 208c 57F8046B 	    _POP 
 139 2090 00F01CBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2094 84200000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 209c 00EE906A 	    vmov.f32 S1,TOS 
 147 20a0 57F8046B 	    _POP 
 148 20a4 00F012BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 20a8 98200000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 20b0 01EE106A 	    vmov.f32 S2,TOS 
 156 20b4 57F8046B 	    _POP 
ARM GAS  forth.s 			page 84


 157 20b8 00F008BE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 20bc AC200000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 20c4 47F8046D 	    _PUSH 
 165 20c8 10EE106A 	    vmov.f32 TOS,S0 
 166 20cc 00F0FEBD 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 20d0 C0200000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 20d8 47F8046D 	    _PUSH 
 174 20dc 10EE906A 	    vmov.f32 TOS,S1 
 175 20e0 00F0F4BD 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 20e4 D4200000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 20ec 47F8046D 	    _PUSH 
 183 20f0 11EE106A 	    vmov.f32 TOS,S2 
 184 20f4 00F0EABD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 20f8 E8200000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 2100 00EE106A 	    vmov.f32 S0,TOS
 194 2104 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 2108 10EE106A 	    vmov.f32 TOS,s0 
 196 210c 00F0DEBD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 2110 FC200000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 211c 00EE106A 	    vmov.f32 S0,TOS 
 204 2120 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 2124 10EE106A 	    vmov.f32 TOS,S0 
 206 2128 00F0D0BD 	    _NEXT 
 207              	
ARM GAS  forth.s 			page 85


 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 212c 14210000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 2134 00EE106A 	    vmov.f32 S0,TOS
 214 2138 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 213c 10EE106A 	    vmov.f32 TOS,s0 
 216 2140 00F0C4BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2144 30210000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 214c 00EE106A 	   vmov.f32 s0,TOS 
 224 2150 57F8046B 	   _POP 
 225 2154 00EE906A 	   vmov.f32 s1,TOS 
 226 2158 30EE200A 	   vadd.f32 s0,s0,s1 
 227 215c 10EE106A 	   vmov.f32 TOS,s0
 228 2160 00F0B4BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2164 48210000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 216c 00EE106A 	   vmov.f32 s0,TOS 
 237 2170 57F8046B 	   _POP 
 238 2174 00EE906A 	   vmov.f32 s1,TOS 
 239 2178 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 217c 10EE106A 	   vmov.f32 TOS,s0
 241 2180 00F0A4BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2184 68210000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 218c 00EE106A 	   vmov.f32 s0,TOS 
 251 2190 57F8046B 	   _POP 
 252 2194 00EE906A 	   vmov.f32 s1,TOS 
 253 2198 20EE800A 	   vmul.f32 s0,s1,s0 
 254 219c 10EE106A 	   vmov.f32 TOS,s0
 255 21a0 00F094BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
ARM GAS  forth.s 			page 86


 261              	*******************************/
 262 21a4 88210000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 21ac 00EE106A 	   vmov.f32 s0,TOS 
 264 21b0 57F8046B 	   _POP 
 265 21b4 00EE906A 	   vmov.f32 s1,TOS 
 266 21b8 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 21bc 10EE106A 	   vmov.f32 TOS,s0
 268 21c0 00F084BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 21c4 A8210000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 21d0 00EE106A 	    vmov.f32 s0,TOS 
 277 21d4 B1EE400A 	    vneg.f32 S0,S0 
 278 21d8 10EE106A 	    vmov.f32 TOS,S0    
 279 21dc 00F076BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 21e0 C8210000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 21ec 80EA0000 	    eor T0,T0 
 287 21f0 6FEA0000 	    mvn T0,T0 
 288 21f4 4FEA5000 	    lsr T0,#1 
 289 21f8 06EA0006 	    and TOS,T0 
 290 21fc 00F066BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 2200 E4210000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 220c 00EE106A 	     vmov.f32 s0,TOS 
 299 2210 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 2214 10EE106A 	     vmov.f32 TOS,s0 
 301 2218 00F058BD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 221c 04220000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 2224 00EE106A 	    vmov.f32 s0,TOS 
 309 2228 B5EE400A 	    vcmp.f32 s0, #0.0 
ARM GAS  forth.s 			page 87


 310 222c F1EE106A 	    vmrs TOS,FPSCR
 311 2230 BFF34F8F 	    dsb  
 312 2234 4FEAE676 	    asr TOS,#31   
 313 2238 00F048BD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 223c 20220000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2244 504700BF 	    _NEST 
 321 2248 6D210000 	    _ADR FSUBB
 322 224c 25220000 	    _ADR FZLESS
 323 2250 91330000 	    _ADR INVER     
 324 2254 D32C0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 2258 40220000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2260 504700BF 	    _NEST 
 332 2264 6D210000 	    _ADR FSUBB 
 333 2268 25220000 	    _ADR FZLESS
 334 226c D32C0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2270 5C220000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 227c 504700BF 	    _NEST 
 342 2280 C5300000 	   _ADR OVER 
 343 2284 C5300000 	   _ADR OVER 
 344 2288 45220000 	   _ADR FGREAT 
 345 228c 372F0000 	   _QBRAN 1f 
 345      98220000 
 346 2294 95300000 	   _ADR SWAP  
 347 2298 75300000 	1: _ADR DROP 
 348 229c D32C0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 22a0 74220000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 22ac 504700BF 	    _NEST 
 355 22b0 C5300000 	    _ADR OVER 
 356 22b4 C5300000 	    _ADR OVER 
 357 22b8 61220000 	    _ADR FLESS 
 358 22bc 372F0000 	    _QBRAN 1f
 358      C8220000 
ARM GAS  forth.s 			page 88


 359 22c4 95300000 	    _ADR SWAP   
 360 22c8 75300000 	1:  _ADR DROP 
 361 22cc D32C0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 22d0 A4220000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 22dc 80EA0000 	    eor T0,T0 
 370 22e0 C8F20000 	    movt T0,#0X8000
 371 22e4 06EA0006 	    and TOS,T0
 372 22e8 4FEAE676 	    asr TOS,#31  
 373 22ec 00F0EEBC 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 22f0 D4220000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 22fc 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 2304 06EA0006 	    and TOS,T0 
 382 2308 4FEAD656 	    lsr TOS,#23
 383 230c A6F17F06 	    sub TOS,#127 
 384 2310 00F0DCBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 2314 F4220000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 2320 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 2328 06EA0006 	    AND TOS,T0 
 393 232c 80EA0000 	    EOR T0,T0 
 394 2330 C0F28000 	    MOVT T0,0x80
 395 2334 46EA0006 	    ORR TOS,T0 
 396 2338 00F0C8BC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 233c 18230000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2344 47F8046D 	    _PUSH 
 405 2348 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
ARM GAS  forth.s 			page 89


 406 2350 00F0BCBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 2354 40230000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 235c 47F8046D 	    _PUSH 
 414 2360 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 2368 00F0B0BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 236c 58230000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 2378 47F8046D 	    _PUSH 
 423 237c 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2384 00F0A2BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 2388 70230000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2394 47F8046D 	    _PUSH 
 433 2398 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 23a0 00F094BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 23a4 8C230000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 23b0 504700BF 	    _NEST
 443 23b4 FD220000 	    _ADR FEXP 
 444 23b8 35210000 	    _ADR STOF 
 445 23bc 95230000 	    _ADR LOG2
 446 23c0 8D210000 	    _ADR FSTAR 
 447 23c4 1D210000 	    _ADR TRUNC  
 448 23c8 85300000 	    _ADR DUPP 
 449 23cc F5300000 	    _ADR ZLESS 
 450 23d0 372F0000 	    _QBRAN 1f 
 450      DC230000 
 451 23d8 F1310000 	    _ADR ONEM
ARM GAS  forth.s 			page 90


 452 23dc D32C0000 	1:  _UNNEST 
 453 23e0 A81F0000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 23ec 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 23f0 0000C842 	            .word  0x42C80000  // 100.0
  31 23f4 00401C46 	            .word  0x461C4000  // 10000.0 
  32 23f8 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 23fc CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2400 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 2404 504700BF 	    _NEST 
  45 2408 F72E0000 	    _DOLIT 2 
  45      02000000 
  46 2410 75310000 	    _ADR LSHIFT 
  47 2414 F72E0000 	    _DOLIT p10p2n 
  47      EC230000 
  48 241c 85310000 	    _ADR PLUS 
  49 2420 912F0000 	    _ADR AT 
  50 2424 D32C0000 	    _UNNEST 
  51              	
ARM GAS  forth.s 			page 91


  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2428 504700BF 	    _NEST 
  59 242c F72E0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2434 F72E0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 243c 413A0000 	    _ADR PICK  // idx f e 1 idx 
  62 2440 75310000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2444 05310000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2448 D32C0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 244c 504700BF 	    _NEST 
  78 2450 01300000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2454 ED2F0000 	    _ADR RAT   // idx f e R: e 
  81 2458 29240000 	    _ADR bit_state // idx f state 
  82 245c 372F0000 	    _QBRAN 1f   // bit reset 
  82      70240000 
  83 2464 C5300000 	    _ADR OVER 
  84 2468 05240000 	    _ADR p10p2at // idx f pwr10 R: e
  85 246c AD210000 	    _ADR FSLH  // idx f R: e 
  86 2470 95300000 	1:  _ADR SWAP  // f idx R: e 
  87 2474 E1310000 	    _ADR ONEP   // F idx++ R: e 
  88 2478 95300000 	    _ADR SWAP   // idx f  
  89 247c C5300000 	    _ADR OVER   // idx f idx 
  90 2480 F72E0000 	    _DOLIT 5 
  90      05000000 
  91 2488 8D340000 	    _ADR GREAT  // idx > 5
  92 248c 372F0000 	    _QBRAN div_loop 
  92      54240000 
  93 2494 BD2F0000 	    _ADR RFROM 
  94 2498 75300000 	    _ADR DROP 
  95 249c D32C0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
ARM GAS  forth.s 			page 92


 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 24a0 504700BF 	    _NEST 
 109 24a4 01300000 	    _ADR TOR 
 110              	mult_loop:
 111 24a8 ED2F0000 	    _ADR RAT   // idx f e R: e 
 112 24ac 29240000 	    _ADR bit_state // idx f state 
 113 24b0 372F0000 	    _QBRAN 1f   // bit reset 
 113      C4240000 
 114 24b8 C5300000 	    _ADR OVER  
 115 24bc 05240000 	    _ADR p10p2at // idx f pwr10 R: e
 116 24c0 8D210000 	    _ADR FSTAR  // idx f R: e 
 117 24c4 95300000 	1:  _ADR SWAP  // f idx R: e 
 118 24c8 E1310000 	    _ADR ONEP   // F idx++ R: e 
 119 24cc 95300000 	    _ADR SWAP   // idx f  
 120 24d0 C5300000 	    _ADR OVER   // idx f idx 
 121 24d4 F72E0000 	    _DOLIT 5 
 121      05000000 
 122 24dc 8D340000 	    _ADR GREAT  // idx > 5
 123 24e0 372F0000 	    _QBRAN mult_loop 
 123      A8240000 
 124 24e8 BD2F0000 	    _ADR RFROM 
 125 24ec 75300000 	    _ADR DROP 
 126 24f0 D32C0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 24f4 504700BF 	    _NEST 
 136 24f8 C5300000 	    _ADR OVER  // e f e 
 137 24fc 372F0000 	    _QBRAN 3f // exp==0,  done 
 137      38250000 
 138 2504 F72E0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 250c BD320000 	    _ADR NROT // idx e f
 140 2510 95300000 	    _ADR SWAP // idx f e   
 141 2514 85300000 	    _ADR DUPP  // idx f e e 
 142 2518 F5300000 	    _ADR ZLESS
 143 251c 372F0000 	    _QBRAN pos_exp 
 143      34250000 
 144              	// negative exponent 
 145 2524 B5330000 	    _ADR ABSS 
 146 2528 4D240000 	    _ADR mant_div 
 147 252c 5F2F0000 	    _BRAN 3f 
 147      38250000 
 148              	pos_exp: // positive exponent 
 149 2534 A1240000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2538 95300000 	3:  _ADR SWAP 
 152 253c 75300000 	    _ADR DROP 
 153 2540 D32C0000 	    _UNNEST 
ARM GAS  forth.s 			page 93


 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
 160 2544 504700BF 	    _NEST 
 161 2548 F72E0000 	    _DOLIT 0 
 161      00000000 
 162 2550 85300000 	    _ADR DUPP 
 163 2554 A9300000 	    _ADR DSWAP // 0 0 a cnt 
 164 2558 293E0000 	    _ADR TONBR // d a+ cnt- 
 165 255c 15300000 	    _ADR DTOR 
 166 2560 75300000 	    _ADR DROP // drop hi word 
 167 2564 D12F0000 	    _ADR DRFROM // i a+ cnt-  
 168 2568 A9320000 	    _ADR ROT  // a+ cnt- i
 169 256c 35210000 	    _ADR STOF 
 170 2570 D32C0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 2574 504700BF 	    _NEST 
 180 2578 85300000 	    _ADR DUPP 
 181 257c 01300000 	    _ADR TOR 
 182 2580 F72E0000 	    _DOLIT 0
 182      00000000 
 183 2588 85300000 	    _ADR DUPP
 184 258c A9300000 	    _ADR DSWAP 
 185 2590 293E0000 	    _ADR TONBR // -- d a+ cnt-  
 186 2594 A9300000 	    _ADR DSWAP  // a+ cnt- d
 187 2598 75300000 	    _ADR DROP   // a+ cnt- i 
 188 259c 35210000 	    _ADR STOF  // convert integer to float 
 189 25a0 BD2F0000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 25a4 F72E0000 	    _DOLIT 2 
 190      02000000 
 191 25ac 413A0000 	    _ADR  PICK  
 192 25b0 95310000 	    _ADR SUBB 
 193 25b4 F72E0000 	    _DOLIT 9 
 193      09000000 
 194 25bc B9340000 	    _ADR MIN 
 195 25c0 DD1F0000 	    _ADR PWR10
 196 25c4 AD210000 	    _ADR FSLH  // a+ cnt- fdec 
 197 25c8 D32C0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 25cc 504700BF 	    _NEST 
 206 25d0 BF3E0000 	    _ADR NEGQ 
ARM GAS  forth.s 			page 94


 207 25d4 01300000 	    _ADR TOR 
 208 25d8 F72E0000 	    _DOLIT 0 
 208      00000000 
 209 25e0 85300000 	    _ADR DUPP 
 210 25e4 A9300000 	    _ADR DSWAP // 0 0 a cnt  
 211 25e8 293E0000 	    _ADR TONBR // d a cnt   
 212 25ec A9300000 	    _ADR DSWAP
 213 25f0 75300000 	    _ADR DROP  // hi word 
 214 25f4 BD2F0000 	    _ADR RFROM 
 215 25f8 372F0000 	    _QBRAN 1f 
 215      04260000 
 216 2600 A5330000 	    _ADR NEGAT 
 217              	1:  
 218 2604 D32C0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 2608 A8230000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 2614 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 2618 D5350000 	    _ADR BASE 
 231 261c 912F0000 	    _ADR AT 
 232 2620 01300000 	    _ADR TOR 
 233              	    // use decimal base  
 234 2624 9D3D0000 	    _ADR DECIM 
 235 2628 F72E0000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 2630 C5300000 		_ADR	OVER   // a 0 a     R: base
 237 2634 21350000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 2638 BF3E0000 	    _ADR   NEGQ
 240 263c 01300000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 2640 85300000 	    _ADR   DUPP 
 242 2644 01300000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 2648 45250000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 264c C5300000 	    _ADR  OVER  
 245 2650 BD2F0000 	    _ADR  RFROM  
 246 2654 0D340000 	    _ADR  EQUAL
 247 2658 95300000 	    _ADR  SWAP
 248 265c 01300000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 2660 4B2F0000 	    _TBRAN expect_dot  
 249      98260000 
 250              	// must be '.' or 'E'     
 251 2668 F72E0000 	    _DOLIT '.' 
 251      2E000000 
 252 2670 9D3E0000 	    _ADR CHARQ
 253 2674 4B2F0000 	    _TBRAN get_fraction  
 253      AC260000 
 254 267c F72E0000 	    _DOLIT 'E'
 254      45000000 
ARM GAS  forth.s 			page 95


 255 2684 9D3E0000 	    _ADR  CHARQ 
 256 2688 4B2F0000 	    _TBRAN get_exponent 
 256      DC260000 
 257 2690 5F2F0000 	    _BRAN error2
 257      30270000 
 258              	expect_dot:
 259 2698 F72E0000 	    _DOLIT '.' 
 259      2E000000 
 260 26a0 9D3E0000 	    _ADR CHARQ 
 261 26a4 372F0000 	    _QBRAN error2
 261      30270000 
 262              	get_fraction:      
 263 26ac 75250000 	    _ADR decimals 
 264 26b0 01300000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 265              	// if next char is 'E' get exponent 
 266 26b4 F72E0000 	    _DOLIT 'E' 
 266      45000000 
 267 26bc 9D3E0000 	    _ADR CHARQ
 268 26c0 4B2F0000 	    _TBRAN get_exponent 
 268      DC260000 
 269 26c8 F72E0000 	    _DOLIT fzero 
 269      00000000 
 270 26d0 01300000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 271 26d4 5F2F0000 	    _BRAN build_float
 271      F0260000 
 272              	get_exponent: 
 273 26dc CD250000 	    _ADR exponent // -- a 0 a+ cnt- exp
 274 26e0 01300000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 275 26e4 85300000 	    _ADR DUPP 
 276 26e8 4B2F0000 	    _TBRAN error4   // count must be 0 
 276      50270000 
 277              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 278 26f0 D1320000 	    _ADR DDROP 
 279 26f4 D1320000 	    _ADR DDROP 
 280 26f8 BD2F0000 	    _ADR RFROM 
 281 26fc D12F0000 	    _ADR DRFROM 
 282 2700 4D210000 	    _ADR FPLUS 
 283 2704 F5240000 	    _ADR exp_adjust
 284 2708 BD2F0000 	    _ADR RFROM 
 285 270c 372F0000 	    _QBRAN 1f 
 285      20270000 
 286 2714 F72E0000 	    _DOLIT fminus1
 286      000080BF 
 287 271c 8D210000 	    _ADR FSTAR 
 288 2720 F72E0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 2728 5F2F0000 	    _BRAN restore_base  
 289      64270000 
 290              	error2: // a 0 a cnt R: base sign fint 
 291 2730 D1320000 	    _ADR DDROP  
 292 2734 5F2F0000 	    _BRAN e4  
 292      5C270000 
 293              	error3: // a 0 a cnt R: base sign fint fdec  
 294 273c D1320000 	    _ADR DDROP  // a 0 a R: base sign
 295 2740 BD2F0000 	    _ADR RFROM 
 296 2744 75300000 	    _ADR DROP 
 297 2748 5F2F0000 	    _BRAN e4  
ARM GAS  forth.s 			page 96


 297      5C270000 
 298              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 299 2750 D1320000 	    _ADR DDROP 
 300 2754 D12F0000 	    _ADR DRFROM 
 301 2758 D1320000 	    _ADR DDROP 
 302 275c D12F0000 	e4: _ADR DRFROM 
 303 2760 D1320000 	    _ADR DDROP 
 304              	restore_base: 
 305 2764 BD2F0000 	    _ADR RFROM 
 306 2768 D5350000 	    _ADR BASE 
 307 276c 7D2F0000 	    _ADR STORE 
 308 2770 D32C0000 	    _UNNEST 
 309              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2774 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2778 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 277c 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2780 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2784 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2788 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 278c BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2790 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2794 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
ARM GAS  forth.s 			page 97


  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2798 0C260000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 27a4 504700BF 	    _NEST
  50 27a8 F72E0000 	    _DOLIT 1  
  50      01000000 
  51 27b0 A5340000 	    _ADR MAX  
  52 27b4 F72E0000 	    _DOLIT 8
  52      08000000 
  53 27bc B9340000 	    _ADR MIN 
  54 27c0 F72E0000 	    _DOLIT 2 
  54      02000000 
  55 27c8 75310000 	    _ADR LSHIFT 
  56 27cc F72E0000 	    _DOLIT rounding 
  56      74270000 
  57 27d4 85310000 	    _ADR PLUS 
  58 27d8 912F0000 	    _ADR AT   
  59 27dc 4D210000 	    _ADR FPLUS 
  60 27e0 D32C0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 27e4 9C270000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 27ec 57F8040B 	    ldr T0,[DSP],#4
  69 27f0 3070     	    strb T0,[TOS]  
  70 27f2 06F10106 	    add TOS,#1
  71 27f6 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 27f8 504700BF 	    _NEST 
  81 27fc 01300000 	    _ADR TOR  // >R ( i r: b )
  82 2800 F5370000 	    _ADR STOD // ( dbl r: b )
  83 2804 85300000 	    _ADR DUPP // ( dbl i r: b )
  84 2808 01300000 	    _ADR TOR  // ( dbl r: b sign )
  85 280c 2D330000 	    _ADR DABS 
  86 2810 3D3C0000 	    _ADR BDIGS 
  87 2814 A93C0000 	    _ADR DIGS 
  88 2818 BD2F0000 	    _ADR RFROM 
  89 281c DD3C0000 	    _ADR SIGN 
  90 2820 053D0000 	    _ADR EDIGS // ( -- p u )
  91 2824 85300000 	    _ADR DUPP  
  92 2828 BD320000 	    _ADR NROT // -rot ( -- u p u )
  93 282c ED2F0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2830 95300000 	    _ADR SWAP // ( -- u p b u )
ARM GAS  forth.s 			page 98


  95 2834 E53A0000 	    _ADR CMOVE // ( -- u ) 
  96 2838 85300000 	    _ADR DUPP  // ( -- u u )
  97 283c BD2F0000 	    _ADR RFROM // ( -- u u b )
  98 2840 85310000 	    _ADR PLUS  // ( -- u b+ )
  99 2844 95300000 	    _ADR SWAP  // ( -- b+ u )
 100 2848 D32C0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 284c E8270000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2858 504700BF 	    _NEST 
 116 285c DD1F0000 	    _ADR PWR10 
 117 2860 01300000 	    _ADR TOR  // f2 r: f1 
 118 2864 F72E0000 	    _DOLIT 0   // m 
 118      00000000 
 119 286c 95300000 	    _ADR SWAP  // m f2 
 120 2870 85300000 	1:  _ADR DUPP 
 121 2874 ED2F0000 	    _ADR RAT 
 122 2878 61220000 	    _ADR FLESS
 123 287c 372F0000 	    _QBRAN 2f
 123      A4280000 
 124 2884 F72E0000 	    _DOLIT ten 
 124      00002041 
 125 288c 8D210000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2890 95300000 	    _ADR SWAP
 128 2894 F1310000 	    _ADR ONEM 
 129 2898 95300000 	    _ADR SWAP 
 130 289c 5F2F0000 	    _BRAN 1b
 130      70280000 
 131 28a4 BD2F0000 	2:  _ADR RFROM 
 132 28a8 75300000 	    _ADR DROP 
 133 28ac 95300000 	    _ADR SWAP 
 134 28b0 D32C0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
ARM GAS  forth.s 			page 99


 146              	    m    log10 reduction factor
 147              	******************************/
 148 28b4 50280000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 28c4 504700BF 	    _NEST 
 150 28c8 DD1F0000 	    _ADR PWR10
 151 28cc 01300000 	    _ADR TOR
 152 28d0 F72E0000 	    _DOLIT 0 
 152      00000000 
 153 28d8 95300000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 28dc ED2F0000 	1:  _ADR RAT   
 155 28e0 C5300000 	    _ADR OVER 
 156 28e4 45220000 	    _ADR FGREAT 
 157 28e8 4B2F0000 	    _TBRAN 2f 
 157      10290000 
 158 28f0 F72E0000 	    _DOLIT ten 
 158      00002041 
 159 28f8 AD210000 	    _ADR FSLH 
 160              	    // increment m 
 161 28fc 95300000 	    _ADR SWAP 
 162 2900 E1310000 	    _ADR ONEP 
 163 2904 95300000 	    _ADR SWAP 
 164 2908 5F2F0000 	    _BRAN 1b   
 164      DC280000 
 165 2910 BD2F0000 	2:  _ADR RFROM 
 166 2914 75300000 	    _ADR DROP
 167 2918 95300000 	    _ADR SWAP 
 168 291c D32C0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2920 504700BF 	    _NEST
 183 2924 95300000 	    _ADR SWAP
 184 2928 95320000 	    _ADR QDUP    
 185 292c 372F0000 	    _QBRAN 2f 
 185      50290000 
 186 2934 95300000 	    _ADR SWAP 
 187 2938 F72E0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2940 95300000 	    _ADR SWAP  
 189 2944 ED270000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2948 F9270000 	    _ADR ITOA // ( i b -- b u )
 191 294c 75300000 	    _ADR DROP // ( -- b+ )     
 192 2950 D32C0000 	2:  _UNNEST 
 193              	
ARM GAS  forth.s 			page 100


 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2954 504700BF 	    _NEST
 208 2958 F72E0000 	    _DOLIT 2 
 208      02000000 
 209 2960 413A0000 	    _ADR PICK 
 210 2964 F5300000 	    _ADR ZLESS 
 211 2968 372F0000 	    _QBRAN 1f 
 211      80290000 
 212 2970 01300000 	    _ADR TOR 
 213 2974 75300000 	    _ADR DROP 
 214 2978 5F2F0000 	    _BRAN 2f 
 214      EC290000 
 215 2980 F72E0000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2988 95300000 	    _ADR SWAP 
 217 298c ED270000 	    _ADR CSTOP 
 218 2990 01300000 	    _ADR TOR // >r ( d f r: b ) 
 219 2994 95300000 	1:  _ADR SWAP  
 220 2998 95320000 	    _ADR QDUP 
 221 299c 372F0000 	    _QBRAN 2f
 221      EC290000 
 222 29a4 F1310000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 29a8 95300000 	    _ADR SWAP // swap ( -- d f r: b )
 224 29ac F72E0000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 29b4 8D210000 	    _ADR FSTAR // f*
 226 29b8 85300000 	    _ADR DUPP  
 227 29bc 1D210000 	    _ADR TRUNC // d f i
 228 29c0 85300000 	    _ADR DUPP  // d f i i  
 229 29c4 F72E0000 	    _DOLIT '0' 
 229      30000000 
 230 29cc 85310000 	    _ADR PLUS 
 231 29d0 BD2F0000 	    _ADR RFROM // R> ( d f c b )
 232 29d4 ED270000 	    _ADR CSTOP // ( d f i b+ )
 233 29d8 01300000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 29dc 35210000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 29e0 6D210000 	    _ADR FSUBB 
 236 29e4 5F2F0000 	    _BRAN 1b 
 236      94290000 
 237 29ec 75300000 	2:  _ADR DROP 
 238 29f0 BD2F0000 	    _ADR RFROM 
 239 29f4 D32C0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
ARM GAS  forth.s 			page 101


 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 29f8 504700BF 	    _NEST 
 257 29fc 01300000 	    _ADR TOR // ( -- d f r: b )
 258 2a00 85300000 	    _ADR DUPP 
 259 2a04 F72E0000 	    _DOLIT fone 
 259      0000803F 
 260 2a0c 61220000 	    _ADR FLESS 
 261 2a10 372F0000 	    _QBRAN 1f
 261      702A0000 
 262 2a18 F72E0000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2a20 59280000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2a24 BD320000 	    _ADR NROT
 265 2a28 C5300000 	    _ADR OVER 
 266 2a2c A5270000 	    _ADR ROUND
 267 2a30 85300000 	    _ADR DUPP 
 268 2a34 F72E0000 	    _DOLIT fone 
 268      0000803F 
 269 2a3c 61220000 	    _ADR FLESS 
 270 2a40 372F0000 	    _QBRAN 2f 
 270      7C2A0000 
 271              	    // first digit '0' 
 272 2a48 F72E0000 	    _DOLIT '0' 
 272      30000000 
 273 2a50 BD2F0000 	    _ADR RFROM 
 274 2a54 ED270000 	    _ADR CSTOP 
 275 2a58 01300000 	    _ADR TOR 
 276              	    // decrement d 
 277 2a5c 95300000 	    _ADR SWAP 
 278 2a60 F1310000 	    _ADR ONEM 
 279 2a64 95300000 	    _ADR SWAP 
 280 2a68 BD2F0000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2a6c D32C0000 	    _UNNEST 
 282 2a70 C5300000 	1:  _ADR OVER 
 283 2a74 C5280000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2a78 BD320000 	    _ADR NROT   // m d f r: b 
 285 2a7c 85300000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2a80 1D210000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2a84 85300000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2a88 01300000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2a8c 35210000 	    _ADR STOF  // ( -- m d f f )
 290 2a90 6D210000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2a94 BD2F0000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2a98 BD2F0000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2a9c F9270000 	    _ADR ITOA // -- m d f b u )
ARM GAS  forth.s 			page 102


 294 2aa0 01300000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2aa4 A9320000 	    _ADR ROT
 296 2aa8 BD2F0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2aac 95310000 	    _ADR SUBB // ( -- m f b d- )
 298 2ab0 BD320000 	    _ADR NROT // ( -- m d f b )
 299 2ab4 D32C0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ab8 B8280000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ac0 504700BF 	    _NEST 
 315 2ac4 C5300000 	    _ADR OVER  
 316 2ac8 FD220000 	    _ADR FEXP 
 317 2acc F72E0000 	    _DOLIT 128 
 317      80000000 
 318 2ad4 0D340000 	    _ADR EQUAL 
 319 2ad8 372F0000 	    _QBRAN 1f
 319      E82A0000 
 320 2ae0 5F2F0000 	    _BRAN nan 
 320      A42B0000 
 321 2ae8 85300000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2aec 01300000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2af0 41320000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2af4 95300000 	    _ADR SWAP 
 326 2af8 ED270000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2afc C5300000 	    _ADR OVER 
 328 2b00 372F0000 	    _QBRAN zdz // 0.0 
 328      542B0000 
 329              	    // check float sign 
 330 2b08 C5300000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2b0c DD220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2b10 372F0000 	    _QBRAN 1f  // 0branch 1f 
 332      342B0000 
 333              	    // negative number add '-' to buffer 
 334 2b18 95300000 	    _ADR SWAP 
 335 2b1c ED210000 	    _ADR FABS 
 336 2b20 95300000 	    _ADR SWAP 
 337 2b24 F72E0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2b2c 95300000 	    _ADR SWAP 
 339 2b30 ED270000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2b34 F9290000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2b38 55290000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2b3c 21290000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2b40 ED2F0000 	    _ADR RAT 
ARM GAS  forth.s 			page 103


 344 2b44 95310000 	    _ADR SUBB 
 345 2b48 BD2F0000 	    _ADR RFROM 
 346 2b4c 95300000 	    _ADR SWAP 
 347 2b50 D32C0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2b54 01300000 	     _ADR TOR 
 350 2b58 D1320000 	     _ADR DDROP
 351 2b5c BD2F0000 	     _ADR RFROM
 352 2b60 F72E0000 	     _DOLIT '0'
 352      30000000 
 353 2b68 95300000 	     _ADR SWAP 
 354 2b6c ED270000 	     _ADR CSTOP 
 355 2b70 F72E0000 	     _DOLIT '.'
 355      2E000000 
 356 2b78 95300000 	     _ADR SWAP 
 357 2b7c ED270000 	     _ADR CSTOP 
 358 2b80 F72E0000 	     _DOLIT '0'
 358      30000000 
 359 2b88 95300000 	     _ADR SWAP 
 360 2b8c ED270000 	     _ADR CSTOP 
 361 2b90 75300000 	     _ADR DROP  
 362 2b94 BD2F0000 	     _ADR RFROM 
 363 2b98 F72E0000 	     _DOLIT 4 
 363      04000000 
 364 2ba0 D32C0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2ba4 01300000 	    _ADR TOR   // ( d f r: b )
 367 2ba8 95300000 	    _ADR SWAP  // f d  
 368 2bac 75300000 	    _ADR DROP  // f 
 369 2bb0 41320000 	    _ADR BLANK  // f c 
 370 2bb4 ED2F0000 	    _ADR RAT    // f c b 
 371 2bb8 ED270000 	    _ADR CSTOP  // f b+ 
 372 2bbc 95300000 	    _ADR SWAP   // b+ f 
 373 2bc0 21230000 	    _ADR FMANT  // b+ mant
 374 2bc4 F72E0000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2bcc 05310000 	    _ADR ANDD   
 376 2bd0 372F0000 	    _QBRAN infinity 
 376      102C0000 
 377 2bd8 F72E0000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2be0 95300000 	    _ADR SWAP   // c b+
 379 2be4 ED270000 	    _ADR CSTOP  // b+
 380 2be8 F72E0000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2bf0 95300000 	    _ADR SWAP   // c b+ 
 382 2bf4 ED270000 	    _ADR CSTOP  // b+
 383 2bf8 F72E0000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2c00 95300000 	    _ADR SWAP   // c b+ 
 385 2c04 ED270000 	    _ADR CSTOP  // b+
 386 2c08 5F2F0000 	    _BRAN 1f 
 386      402C0000 
 387              	infinity:
 388 2c10 F72E0000 	    _DOLIT 'I'
 388      49000000 
 389 2c18 95300000 	    _ADR SWAP 
ARM GAS  forth.s 			page 104


 390 2c1c ED270000 	    _ADR CSTOP 
 391 2c20 F72E0000 	    _DOLIT 'N'
 391      4E000000 
 392 2c28 95300000 	    _ADR SWAP 
 393 2c2c ED270000 	    _ADR CSTOP 
 394 2c30 F72E0000 	    _DOLIT 'F'
 394      46000000 
 395 2c38 95300000 	    _ADR SWAP 
 396 2c3c ED270000 	    _ADR CSTOP 
 397              	1:
 398 2c40 75300000 	    _ADR DROP 
 399 2c44 BD2F0000 	    _ADR RFROM 
 400 2c48 F72E0000 	    _DOLIT 4 
 400      04000000 
 401 2c50 D32C0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2c54 BC2A0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2c5c 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2c60 F72E0000 	    _DOLIT 1 
 415      01000000 
 416 2c68 A5340000 	    _ADR MAX 
 417 2c6c F72E0000 	    _DOLIT 7 
 417      07000000 
 418 2c74 B9340000 	    _ADR MIN
 419 2c78 95300000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2c7c 753A0000 	    _ADR HERE
 422 2c80 01300000 	    _ADR TOR  
 423 2c84 F72E0000 	    _DOLIT 16 
 423      10000000 
 424 2c8c A94B0000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2c90 ED2F0000 	    _ADR RAT 
 427 2c94 F72E0000 	    _DOLIT 16 
 427      10000000 
 428 2c9c F72E0000 	    _DOLIT 0 
 428      00000000 
 429 2ca4 5D3B0000 	    _ADR FILL 
 430 2ca8 BD2F0000 	    _ADR RFROM // ( d f b )
 431 2cac C12A0000 	    _ADR FTOA 
 432 2cb0 49400000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2cb4 F72E0000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2cbc A94B0000 	    _ADR ALLOT
 436 2cc0 D32C0000 	    _UNNEST
ARM GAS  forth.s 			page 105


 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
ARM GAS  forth.s 			page 106


  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2cc4 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2cc8 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2ccc 5CF8045B 		LDR WP,[IP],#4 
  89 2cd0 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2cd2 58F804CB 		LDMFD RSP!,{IP}
  92 2cd6 5CF8045B 		LDR WP,[IP],#4 
  93 2cda 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2cdc 04F14801 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2ce0 0968     		ldr T1,[T1]     // address in here   
 107 2ce2 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2ce6 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2cea 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2cee 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
ARM GAS  forth.s 			page 107


 111 2cf2 04F14802 		add T2,UP,#USER_CTOP 
 112 2cf6 1160     		str T1,[T2]  // save update HERE value 
 113 2cf8 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2cfa 47F8046D 		_PUSH 
 119 2cfe 04F11406 		ADD TOS,UP,#STDIN 
 120 2d02 E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2d04 47F8046D 		_PUSH 
 126 2d08 04F11806 		ADD TOS,UP,#STDOUT
 127 2d0c DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2d0e 582C0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2d18 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2d20 47F8046D 	    _PUSH 
 136 2d24 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2d26 81EA0101 	    eor T1,T1 
 138 2d2a 8162     	    str T1,[T0,#SCB_CFSR]
 139 2d2c CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2d2e 122D0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2d38 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2d40 47F8046D 		_PUSH 
 148 2d44 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2d46 81EA0101 	    eor T1,T1 
 150 2d4a 8163     	    str T1,[T0,#SCB_BFAR]
 151 2d4c BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2d4e 322D0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 2d58 504700BF 		_NEST 
 159 2d5c FB2C0000 		_ADR TSTDIN // ' STDIN 
ARM GAS  forth.s 			page 108


 160 2d60 C53A0000 		_ADR ATEXE
 161 2d64 D32C0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2d68 522D0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2d70 504700BF 		_NEST
 169              	KEY1:
 170 2d74 011B0000 		_ADR CAPS_LED 
 171 2d78 592D0000 		_ADR	QKEY 
 172 2d7c 372F0000 		_QBRAN	KEY1
 172      742D0000 
 173 2d84 D32C0000 		_UNNEST
 174              	
 175              	/**********************************************
 176              		EMIT ( c -- )
 177              		transmit a character to console 
 178              	**********************************************/
 179 2d88 6C2D0000 		_HEADER EMIT,4,"EMIT"
 179      04454D49 
 179      540000BF 
 180 2d94 504700BF 		_NEST 
 181 2d98 052D0000 		_ADR TSTDOUT 
 182 2d9c C53A0000 		_ADR ATEXE 
 183 2da0 D32C0000 		_UNNEST 
 184              	
 185              	
 186              	/************************************************
 187              	 GET-IP ( n - c )
 188              	 return interrupt priority of IRQn 
 189              	************************************************/
 190              	/*
 191              		_HEADER GETIP,6,"GET-IP" 
 192              		_NEST 
 193              		_ADR DUPP 
 194              		_ADR ZLESS
 195              		_QBRAN 1f 
 196              		_DOLIT 15
 197              		_ADR ANDD
 198              		_DOLIT 4
 199              		_ADR SUBB  
 200              		_DOLIT 0xE000ED18 
 201              		_BRAN 2f 
 202              	1:	_DOLIT 0xE000E400 
 203              	2:	_ADR PLUS 
 204              		_ADR CAT
 205              		_DOLIT 4 
 206              		_ADR RSHIFT 
 207              		_UNNEST 
 208              	*/
 209              	
 210              	/***********************************************
 211              	 RANDOM ( n+ -- {0..n+ - 1} )
 212              	 return pseudo random number 
ARM GAS  forth.s 			page 109


 213              	 REF: https://en.wikipedia.org/wiki/Xorshift
 214              	************************************************/
 215 2da4 8C2D0000 		_HEADER RAND,6,"RANDOM"
 215      0652414E 
 215      444F4D00 
 216 2db0 504700BF 		_NEST
 217 2db4 B5330000 		_ADR ABSS   
 218 2db8 75350000 		_ADR SEED 
 219 2dbc 912F0000 		_ADR AT 
 220 2dc0 85300000 		_ADR DUPP 
 221 2dc4 F72E0000 		_DOLIT 13
 221      0D000000 
 222 2dcc 75310000 		_ADR LSHIFT 
 223 2dd0 2D310000 		_ADR XORR  
 224 2dd4 85300000 		_ADR DUPP 
 225 2dd8 F72E0000 		_DOLIT 17 
 225      11000000 
 226 2de0 5D310000 		_ADR RSHIFT 
 227 2de4 2D310000 		_ADR XORR 
 228 2de8 85300000 		_ADR DUPP
 229 2dec F72E0000 		_DOLIT 5 
 229      05000000 
 230 2df4 75310000 		_ADR LSHIFT 
 231 2df8 2D310000 		_ADR XORR  
 232 2dfc 85300000 		_ADR DUPP 
 233 2e00 75350000 		_ADR SEED 
 234 2e04 7D2F0000 		_ADR STORE 
 235 2e08 F72E0000 		_DOLIT 0x7FFFFFFF
 235      FFFFFF7F 
 236 2e10 05310000 		_ADR ANDD 
 237 2e14 95300000 		_ADR SWAP 
 238 2e18 3D390000 		_ADR MODD 
 239 2e1c D32C0000 		_UNNEST 
 240              	
 241              	
 242              	/****************************************
 243              	 PAUSE ( u -- ) 
 244              	 suspend execution for u milliseconds
 245              	****************************************/
 246 2e20 A82D0000 		_HEADER PAUSE,5,"PAUSE"
 246      05504155 
 246      534500BF 
 247 2e2c 504700BF 		_NEST 
 248 2e30 A5350000 		_ADR TIMER 
 249 2e34 7D2F0000 		_ADR STORE 
 250              	PAUSE_LOOP:
 251 2e38 A5350000 		_ADR TIMER 
 252 2e3c 912F0000 		_ADR AT 
 253 2e40 372F0000 		_QBRAN PAUSE_EXIT 
 253      502E0000 
 254 2e48 5F2F0000 		_BRAN PAUSE_LOOP 
 254      382E0000 
 255              	PAUSE_EXIT: 		
 256 2e50 D32C0000 		_UNNEST 
 257              	
 258              	/******************************************
 259              	  ULED ( T|F -- )
ARM GAS  forth.s 			page 110


 260              	  control user LED, -1 ON, 0 OFF 
 261              	*******************************************/
 262 2e54 242E0000 		_HEADER ULED,4,"ULED"
 262      04554C45 
 262      440000BF 
 263 2e60 4FF40050 		mov T0,#(1<<LED_PIN)
 264 2e64 4FF40061 		_MOV32 T1,LED_GPIO 
 264      C4F20201 
 265 2e6c 3600     		movs TOS,TOS 
 266 2e6e 57F8046B 		_POP
 267 2e72 03D0     		beq ULED_OFF
 268 2e74 4FEA0040 		lsl T0,#16 
 269 2e78 8861     		str T0,[T1,#GPIO_BSRR]
 270 2e7a 27E7     		_NEXT 
 271              	ULED_OFF:
 272 2e7c 8861     		str T0,[T1,#GPIO_BSRR]
 273 2e7e 25E7     		_NEXT    
 274              	
 275              	/**************************
 276              	   JOYSTK  ( -- u )
 277              	   read joystick port 
 278              	**************************/
 279 2e80 582E0000 		_HEADER JOYSTK,6,"JOYSTK"
 279      064A4F59 
 279      53544B00 
 280 2e8c 504700BF 		_NEST 
 281 2e90 F72E0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 281      10000240 
 282 2e98 912F0000 		_ADR AT 
 283 2e9c F72E0000 		_DOLIT 0x100f 
 283      0F100000 
 284 2ea4 05310000 		_ADR ANDD 
 285 2ea8 D32C0000 		_UNNEST 
 286              	
 287              	/****************************
 288              		BEEP ( msec freq -- )
 289              	input:
 290              		freq  frequence hertz 
 291              		msec  durration in msec 
 292              	*****************************/
 293 2eac 842E0000 		_HEADER BEEP,4,"BEEP"
 293      04424545 
 293      500000BF 
 294 2eb8 48F68050 		_MOV32 r0,6000000 // Fclk 
 294      C0F25B00 
 295 2ec0 B0FBF6F0 		udiv r0,r0,TOS
 296 2ec4 57F8046B 		_POP  
 297 2ec8 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 297      C4F20001 
 298 2ed0 C862     		str r0,[r1,#TIM_ARR]
 299 2ed2 4FEA5000 		lsr r0,#1
 300 2ed6 4863     		str r0,[r1,#TIM_CCR1]
 301 2ed8 4FF00100 		mov r0,#1 
 302 2edc 0862     		str r0,[r1,#TIM_CCER]
 303 2ede 0860     		str r0,[r1,#TIM_CR1]
 304 2ee0 C868     		ldr r0,[r1,#TIM_DIER]
 305 2ee2 C4F8AC60 		str TOS,[UP,#BEEP_DTMR]
ARM GAS  forth.s 			page 111


 306 2ee6 57F8046B 		_POP
 307 2eea EFE6     		_NEXT 
 308              	
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 2eec B02E0000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 2ef4 EAE6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 2ef6 47F8046D 		_PUSH				//  store TOS on data stack
 328 2efa 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 2efe E5E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 2f00 F02E0000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 2f0c 46F00105 		ORR	WP,TOS,#1 
 337 2f10 57F8046B 		_POP
 338 2f14 2847     		BX WP 
 339 2f16 D9E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 2f18 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 2f1c 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 2f1e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 2f22 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 2f26 D1E6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
 357 2f28 A2F10102 		SUB	T2,T2,#1
 358 2f2c C8F80020 		STR	T2,[RSP]
 359 2f30 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
ARM GAS  forth.s 			page 112


 360 2f34 CAE6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 2f36 3600     		MOVS	TOS,TOS
 369 2f38 57F8046B 		_POP
 370 2f3c 02D1     		BNE	QBRAN1
 371 2f3e DCF800C0 		LDR	IP,[IP]
 372 2f42 C3E6     		_NEXT
 373              	QBRAN1:
 374 2f44 0CF1040C 	 	ADD	IP,IP,#4
 375 2f48 C0E6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 2f4a 3600     		MOVS TOS,TOS 
 383 2f4c 57F8046B 		_POP 
 384 2f50 02D0     		BEQ 1f 
 385 2f52 DCF800C0 		LDR IP,[IP]
 386 2f56 B9E6     		_NEXT 
 387 2f58 0CF1040C 	1:  ADD IP,IP,#4
 388 2f5c B6E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 2f5e DCF800C0 		LDR	IP,[IP]
 398 2f62 B3E6     		_NEXT
 399              	
 400              	/******************************************
 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
 403              	******************************************/
 404 2f64 042F0000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 2f70 D32C0000 		_UNNEST
 406              	
 407              	/***********************************
 408              	    !	   ( w a -- )
 409              	 	Pop the data stack to memory.
 410              	************************************/
 411 2f74 682F0000 		_HEADER STORE,1,"!"
 411      012100BF 
 412 2f7c 57F8045B 		LDR	WP,[DSP],#4
 413 2f80 3560     		STR	WP,[TOS]
ARM GAS  forth.s 			page 113


 414 2f82 57F8046B 		_POP
 415 2f86 A1E6     		_NEXT 
 416              	
 417              	/********************************************
 418              	    @	   ( a -- w )
 419              	 	Push memory location to the data stack.
 420              	*********************************************/
 421 2f88 782F0000 		_HEADER AT,1,"@"
 421      014000BF 
 422 2f90 3668     		LDR	TOS,[TOS]
 423 2f92 9BE6     		_NEXT 
 424              	
 425              	/*******************************************
 426              	    C!	  ( c b -- )
 427              	 	Pop the data stack to byte memory.
 428              	*******************************************/
 429 2f94 8C2F0000 		_HEADER CSTOR,2,"C!"
 429      02432100 
 430 2f9c 57F8045B 		LDR	WP,[DSP],#4
 431 2fa0 3570     		STRB WP,[TOS]
 432 2fa2 57F8046B 		_POP
 433 2fa6 91E6     		_NEXT
 434              	
 435              	/*********************************************
 436              	    C@	  ( b -- c )
 437              	 	Push byte memory location to the data stack.
 438              	**********************************************/
 439 2fa8 982F0000 		_HEADER CAT,2,"C@"
 439      02434000 
 440 2fb0 3678     		LDRB	TOS,[TOS]
 441 2fb2 8BE6     		_NEXT 
 442              	
 443              	
 444              	/*********************************************
 445              	    R>	  ( -- w  R: w -- ) 
 446              	 	push from rstack.
 447              	**********************************************/
 448 2fb4 AC2F0000 		_HEADER RFROM,2,"R>"
 448      02523E00 
 449 2fbc 47F8046D 		_PUSH
 450 2fc0 58F8046B 		LDR	TOS,[RSP],#4
 451 2fc4 82E6     		_NEXT 
 452              	
 453              	/***********************************************
 454              		2R> (  -- D ) R: D --  
 455              	    push a double from rstack 
 456              	***********************************************/
 457 2fc6 B82F0000 		_HEADER DRFROM,3,"2R>"
 457      0332523E 
 457      00BF
 458 2fd0 47F8046D 		_PUSH 
 459 2fd4 58F8046B 		LDR TOS,[RSP],#4 
 460 2fd8 47F8046D 		_PUSH 
 461 2fdc 58F8046B 		LDR TOS,[RSP],#4
 462 2fe0 74E6     		_NEXT 
 463              	
 464              	/************************************************
ARM GAS  forth.s 			page 114


 465              	    R@	  ( -- w )
 466              	 	Copy top of return stack to the data stack.
 467              	************************************************/
 468 2fe2 CA2F0000 		_HEADER RAT,2,"R@"
 468      02524000 
 468      00BF
 469 2fec 47F8046D 		_PUSH
 470 2ff0 D8F80060 		LDR	TOS,[RSP]
 471 2ff4 6AE6     		_NEXT 
 472              	
 473              	/***********************************************
 474              	    >R	  ( w -- ) R: -- w 
 475              	 	pop to rstack.
 476              	************************************************/
 477 2ff6 E62F0000 		_HEADER TOR,2,">R"
 477      023E5200 
 477      00BF
 478 3000 48F8046D 		STR	TOS,[RSP,#-4]!
 479 3004 57F8046B 		_POP
 480 3008 60E6     		_NEXT
 481              	
 482              	/*********************************************
 483              		2>R ( d -- ) R: -- d 
 484              		pop a double to rstack 
 485              	*********************************************/
 486 300a FA2F0000 		_HEADER DTOR,3,"2>R"
 486      03323E52 
 486      00BF
 487 3014 48F8046D 		STR TOS,[RSP,#-4]!
 488 3018 57F8046B 	    _POP 
 489 301c 48F8046D 		STR TOS,[RSP,#-4]!
 490 3020 57F8046B 		_POP  
 491 3024 52E6     		_NEXT 	
 492              	
 493              	
 494              	/*******************************
 495              	//	RP! ( u -- )
 496              	// initialize RPP with u 
 497              	*******************************/
 498 3026 0E300000 		_HEADER RPSTOR,3,"RP!"
 498      03525021 
 498      00BF
 499 3030 B046     		MOV RSP,TOS 
 500 3032 57F8046B 		_POP  
 501 3036 49E6     		_NEXT 
 502              	
 503              	/********************************
 504              		SP! ( u -- )
 505              	 initialize SPP with u 
 506              	********************************/
 507 3038 2A300000 		_HEADER SPSTOR,3,"SP!"
 507      03535021 
 508 3040 3746     		MOV DSP,TOS 
 509 3042 86EA0606 		EOR TOS,TOS,TOS 
 510 3046 41E6     		_NEXT 
 511              	
 512              	/**************************************
ARM GAS  forth.s 			page 115


 513              	    SP@	 ( -- a )
 514              	 	Push the current data stack pointer.
 515              	***************************************/
 516 3048 3C300000 		_HEADER SPAT,3,"SP@"
 516      03535040 
 517 3050 47F8046D 		_PUSH
 518 3054 3E46     		MOV	TOS,DSP
 519 3056 39E6     		_NEXT
 520              	
 521              	/**************************************
 522              	   RP@ ( -- a )
 523              	   push current rstack pointer 
 524              	**************************************/
 525 3058 4C300000 		_HEADER RPAT,3,"RP@"
 525      03525040 
 526 3060 47F8046D 		_PUSH 
 527 3064 4646     		MOV TOS,RSP 
 528 3066 31E6     		_NEXT 
 529              	
 530              	/********************************
 531              	    DROP	( w -- )
 532              	 	Discard top stack item.
 533              	********************************/
 534 3068 5C300000 		_HEADER DROP,4,"DROP"
 534      0444524F 
 534      500000BF 
 535 3074 57F8046B 		_POP
 536 3078 28E6     		_NEXT 
 537              	
 538              	/*********************************
 539              	    DUP	 ( w -- w w )
 540              	 	Duplicate the top stack item.
 541              	*********************************/
 542 307a 6C300000 		_HEADER DUPP,3,"DUP"
 542      03445550 
 542      00BF
 543 3084 47F8046D 		_PUSH
 544 3088 20E6     		_NEXT 
 545              	
 546              	/**********************************
 547              	    SWAP	( w1 w2 -- w2 w1 )
 548              	 	Exchange top two stack items.
 549              	**********************************/
 550 308a 7E300000 		_HEADER SWAP,4,"SWAP"
 550      04535741 
 550      5000
 551 3094 3D68     		LDR	WP,[DSP]
 552 3096 3E60     		STR	TOS,[DSP]
 553 3098 2E46     		MOV	TOS,WP
 554 309a 17E6     		_NEXT 
 555              	
 556              	/***********************************
 557              		2SWAP ( d2 d1 -- d1 d2 )
 558              		swap double integer 
 559              	***************************************/
 560 309c 8E300000 		_HEADER DSWAP,5,"2SWAP"
 560      05325357 
ARM GAS  forth.s 			page 116


 560      415000BF 
 561 30a8 3046     		mov T0,TOS 
 562 30aa 3968     		ldr T1,[DSP]
 563 30ac 7E68     		ldr TOS,[DSP,#4]
 564 30ae BD68     		ldr WP,[DSP,#8]
 565 30b0 3D60     		str WP,[DSP]
 566 30b2 7860     		str T0,[DSP,#4]
 567 30b4 B960     		str T1,[DSP,#8]
 568 30b6 09E6     		_NEXT 
 569              	
 570              	
 571              	/***********************************
 572              	    OVER	( w1 w2 -- w1 w2 w1 )
 573              	 	Copy second stack item to top.
 574              	***********************************/
 575 30b8 A0300000 		_HEADER OVER,4,"OVER"
 575      044F5645 
 575      520000BF 
 576 30c4 47F8046D 		_PUSH
 577 30c8 7E68     		LDR	TOS,[DSP,#4]
 578 30ca FFE5     		_NEXT 
 579              	
 580              	/***********************************
 581              		2OVER ( d2 d1 -- d2 d1 d2 )
 582              		copy a double integer to TOS 
 583              	**********************************************/
 584 30cc BC300000 		_HEADER DOVER,5,"2OVER"
 584      05324F56 
 584      455200BF 
 585 30d8 7868     		ldr T0,[DSP,#4]
 586 30da BD68     		ldr WP,[DSP,#8]
 587 30dc 47F8046D 		_PUSH 
 588 30e0 2E46     		mov TOS,WP 
 589 30e2 47F8046D 		_PUSH
 590 30e6 0646     		mov TOS,T0 
 591 30e8 F0E5     		_NEXT 
 592              	
 593              	
 594              	/***********************************
 595              	    0<	  ( n -- t )
 596              	 	Return true if n is negative.
 597              	***********************************/
 598 30ea D0300000 		_HEADER ZLESS,2,"0<"
 598      02303C00 
 598      00BF
 599 30f4 4FEAE676 		ASR TOS,#31
 600 30f8 E8E5     		_NEXT 
 601              	
 602              	/********************************
 603              	    AND	 ( w w -- w )
 604              	 	Bitwise AND.
 605              	********************************/
 606 30fa EE300000 		_HEADER ANDD,3,"AND"
 606      03414E44 
 606      00BF
 607 3104 57F8045B 		LDR	WP,[DSP],#4
 608 3108 06EA0506 		AND	TOS,TOS,WP
ARM GAS  forth.s 			page 117


 609 310c DEE5     		_NEXT 
 610              	
 611              	/******************************
 612              	    OR	  ( w w -- w )
 613              	 	Bitwise inclusive OR.
 614              	******************************/
 615 310e FE300000 		_HEADER ORR,2,"OR"
 615      024F5200 
 615      00BF
 616 3118 57F8045B 		LDR	WP,[DSP],#4
 617 311c 46EA0506 		ORR	TOS,TOS,WP
 618 3120 D4E5     		_NEXT 
 619              	
 620              	/*****************************
 621              	    XOR	 ( w w -- w )
 622              	 	Bitwise exclusive OR.
 623              	*****************************/
 624 3122 12310000 		_HEADER XORR,3,"XOR"
 624      03584F52 
 624      00BF
 625 312c 57F8045B 		LDR	WP,[DSP],#4
 626 3130 86EA0506 		EOR	TOS,TOS,WP
 627 3134 CAE5     		_NEXT 
 628              	
 629              	/**************************************************
 630              	    UM+	 ( w w -- w cy )
 631              	 	Add two numbers, return the sum and carry flag.
 632              	***************************************************/
 633 3136 26310000 		_HEADER UPLUS,3,"UM+"
 633      03554D2B 
 633      00BF
 634 3140 3D68     		LDR	WP,[DSP]
 635 3142 AD19     		ADDS	WP,WP,TOS
 636 3144 4FF00006 		MOV	TOS,#0
 637 3148 46F10006 		ADC	TOS,TOS,#0
 638 314c 3D60     		STR	WP,[DSP]
 639 314e BDE5     		_NEXT 
 640              	
 641              	/*********************************
 642              	    RSHIFT	 ( w # -- w )
 643              	 	arithmetic Right shift # bits.
 644              	**********************************/
 645 3150 3A310000 		_HEADER RSHIFT,6,"RSHIFT"
 645      06525348 
 645      49465400 
 646 315c 57F8045B 		LDR	WP,[DSP],#4
 647 3160 45FA06F6 		MOV	TOS,WP,ASR TOS
 648 3164 B2E5     		_NEXT 
 649              	
 650              	/****************************
 651              	    LSHIFT	 ( w # -- w )
 652              	 	left shift # bits.
 653              	****************************/
 654 3166 54310000 		_HEADER LSHIFT,6,"LSHIFT"
 654      064C5348 
 654      49465400 
 654      00BF
ARM GAS  forth.s 			page 118


 655 3174 57F8045B 		LDR	WP,[DSP],#4
 656 3178 05FA06F6 		MOV	TOS,WP,LSL TOS
 657 317c A6E5     		_NEXT
 658              	
 659              	/*************************
 660              	    +	 ( w w -- w )
 661              	 	Add.
 662              	*************************/
 663 317e 6A310000 		_HEADER PLUS,1,"+"
 663      012B
 664 3184 57F8045B 		LDR	WP,[DSP],#4
 665 3188 2E44     		ADD	TOS,TOS,WP
 666 318a 9FE5     		_NEXT 
 667              	
 668              	/************************
 669              	    -	 ( w w -- w )
 670              	 	Subtract.
 671              	************************/
 672 318c 82310000 		_HEADER SUBB,1,"-"
 672      012D00BF 
 673 3194 57F8045B 		LDR	WP,[DSP],#4
 674 3198 C6EB0506 		RSB	TOS,TOS,WP
 675 319c 96E5     		_NEXT 
 676              	
 677              	/************************
 678              	    *	 ( w w -- w )
 679              	 	Multiply.
 680              	***********************/
 681 319e 90310000 		_HEADER STAR,1,"*"
 681      012A
 682 31a4 57F8045B 		LDR	WP,[DSP],#4
 683 31a8 05FB06F6 		MUL	TOS,WP,TOS
 684 31ac 8EE5     		_NEXT 
 685              	
 686              	/***************************
 687              	    UM*	 ( w w -- ud )
 688              	 	Unsigned multiply.
 689              	****************************/
 690 31ae A2310000 		_HEADER UMSTA,3,"UM*"
 690      03554D2A 
 690      00BF
 691 31b8 3D68     		LDR	WP,[DSP]
 692 31ba A6FB0523 		UMULL	T2,T3,TOS,WP
 693 31be 3A60     		STR	T2,[DSP]
 694 31c0 1E46     		MOV	TOS,T3
 695 31c2 83E5     		_NEXT 
 696              	
 697              	/***************************
 698              	    M*	 ( w w -- d )
 699              	 	signed multiply.
 700              		hold double result
 701              	***************************/
 702 31c4 B2310000 		_HEADER MSTAR,2,"M*"
 702      024D2A00 
 703 31cc 3D68     		LDR	WP,[DSP]
 704 31ce 86FB0523 		SMULL	T2,T3,TOS,WP
 705 31d2 3A60     		STR	T2,[DSP]
ARM GAS  forth.s 			page 119


 706 31d4 1E46     		MOV	TOS,T3
 707 31d6 79E5     		_NEXT 
 708              	
 709              	/***************************
 710              	    1+	 ( w -- w+1 )
 711              	 	Add 1.
 712              	***************************/
 713 31d8 C8310000 		_HEADER ONEP,2,"1+"
 713      02312B00 
 714 31e0 06F10106 		ADD	TOS,TOS,#1
 715 31e4 72E5     		_NEXT 
 716              	
 717              	/***************************
 718              	    1-	 ( w -- w-1 )
 719              	 	Subtract 1.
 720              	***************************/
 721 31e6 DC310000 		_HEADER ONEM,2,"1-"
 721      02312D00 
 721      00BF
 722 31f0 A6F10106 		SUB	TOS,TOS,#1
 723 31f4 6AE5     		_NEXT 
 724              	
 725              	/***************************
 726              	    2+	 ( w -- w+2 )
 727              	 	Add 2.
 728              	**************************/
 729 31f6 EA310000 		_HEADER TWOP,2,"2+"
 729      02322B00 
 729      00BF
 730 3200 06F10206 		ADD	TOS,TOS,#2
 731 3204 62E5     		_NEXT
 732              	
 733              	/**************************
 734              	    2-	 ( w -- w-2 )
 735              	 	Subtract 2.
 736              	**************************/
 737 3206 FA310000 		_HEADER TWOM,2,"2-"
 737      02322D00 
 737      00BF
 738 3210 A6F10206 		SUB	TOS,TOS,#2
 739 3214 5AE5     		_NEXT
 740              	
 741              	/***************************
 742              	    CELL+	( w -- w+4 )
 743              	 	Add CELLL.
 744              	***************************/
 745 3216 0A320000 		_HEADER CELLP,5,"CELL+"
 745      0543454C 
 745      4C2B
 746 3220 06F10406 		ADD	TOS,TOS,#CELLL
 747 3224 52E5     		_NEXT
 748              	
 749              	/***************************
 750              	    CELL-	( w -- w-4 )
 751              	 	Subtract CELLL.
 752              	**************************/
 753 3226 1A320000 		_HEADER CELLM,5,"CELL-"
ARM GAS  forth.s 			page 120


 753      0543454C 
 753      4C2D
 754 3230 A6F10406 		SUB	TOS,TOS,#CELLL
 755 3234 4AE5     		_NEXT
 756              	
 757              	/**************************** 
 758              	    BL	( -- 32 )
 759              	 	Blank (ASCII space).
 760              	*****************************/
 761 3236 2A320000 		_HEADER BLANK,2,"BL"
 761      02424C00 
 761      00BF
 762 3240 47F8046D 		_PUSH
 763 3244 4FF02006 		MOV	TOS,#32
 764 3248 40E5     		_NEXT 
 765              	
 766              	/**************************
 767              	    CELLS	( w -- w*4 )
 768              	 	Multiply CELLL 
 769              	***************************/
 770 324a 3A320000 		_HEADER CELLS,5,"CELLS"
 770      0543454C 
 770      4C53
 771 3254 4FEA8606 		LSL TOS,#2
 772 3258 38E5     		_NEXT
 773              	
 774              	/***************************
 775              	    CELL/	( w -- w/4 )
 776              	 	Divide by CELLL.
 777              	***************************/
 778 325a 4E320000 		_HEADER CELLSL,5,"CELL/"
 778      0543454C 
 778      4C2F
 779 3264 4FEAA606 		ASR TOS,#2
 780 3268 30E5     		_NEXT
 781              	
 782              	/*************************
 783              	    2*	( w -- w*2 )
 784              	 	Multiply 2.
 785              	*************************/
 786 326a 5E320000 		_HEADER TWOST,2,"2*"
 786      02322A00 
 786      00BF
 787 3274 4FEA4606 		MOV	TOS,TOS,LSL#1
 788 3278 28E5     		_NEXT
 789              	
 790              	/*************************
 791              	    2/	( w -- w/2 )
 792              	 	Divide by 2.
 793              	***********************/
 794 327a 6E320000 		_HEADER TWOSL,2,"2/"
 794      02322F00 
 794      00BF
 795 3284 4FEA6606 		MOV	TOS,TOS,ASR#1
 796 3288 20E5     		_NEXT
 797              	
 798              	/****************************
ARM GAS  forth.s 			page 121


 799              	    ?DUP	( w -- w w | 0 )
 800              	 	Conditional duplicate.
 801              	*****************************/
 802 328a 7E320000 		_HEADER QDUP,4,"?DUP"
 802      043F4455 
 802      5000
 803 3294 3500     		MOVS	WP,TOS
 804 3296 18BF     		IT NE 
 805 3298 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 806 329c 16E5     		_NEXT
 807              	
 808              	/***********************************
 809              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 810              	 	Rotate top 3 items.
 811              	*************************************/
 812 329e 8E320000 		_HEADER ROT,3,"ROT"
 812      03524F54 
 812      00BF
 813 32a8 3868     		LDR	T0,[DSP]  // w2 
 814 32aa 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 815 32ac 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 816 32ae 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 817 32b0 0CE5     		_NEXT
 818              	
 819              	/*********************************
 820              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 821              	 left rotate top 3 elements 
 822              	********************************/
 823 32b2 A2320000 		_HEADER NROT,4,"-ROT"
 823      042D524F 
 823      5400
 824 32bc 7868     		LDR T0,[DSP,#4]
 825 32be 7E60     		STR TOS,[DSP,#4]	
 826 32c0 3E68     		LDR TOS,[DSP]
 827 32c2 3860     		STR T0,[DSP]
 828 32c4 02E5     		_NEXT 
 829              	
 830              	/*********************************
 831              	    2DROP	( w1 w2 -- )
 832              	 	Drop top 2 items.
 833              	*********************************/
 834 32c6 B6320000 		_HEADER DDROP,5,"2DROP"
 834      05324452 
 834      4F50
 835 32d0 57F8046B 		_POP
 836 32d4 57F8046B 		_POP
 837 32d8 F8E4     		_NEXT 
 838              	
 839              	/********************************
 840              		3DROP ( w1 w2 w3 -- )
 841              		drop top 3 items 
 842              	********************************/
 843 32da CA320000 		_HEADER TDROP,5,"3DROP"
 843      05334452 
 843      4F50
 844 32e4 07F10807 	    add DSP,#8 
 845 32e8 57F8046B 	    _POP 
ARM GAS  forth.s 			page 122


 846 32ec EEE4     	    _NEXT 
 847              	
 848              	/***********************************
 849              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 850              	 	Duplicate top 2 items.
 851              	************************************/
 852 32ee DE320000 		_HEADER DDUP,4,"2DUP"
 852      04324455 
 852      5000
 853 32f8 3868     		LDR	T0,[DSP] // w1
 854 32fa 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 855 32fe 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 856 3302 E3E4     		_NEXT
 857              	
 858              	/******************************
 859              	    D+	( d1 d2 -- d3 )
 860              	 	Add top 2 double numbers.
 861              	******************************/
 862 3304 F2320000 		_HEADER DPLUS,2,"D+"
 862      02442B00 
 863 330c 57F8045B 		LDR	WP,[DSP],#4
 864 3310 57F8042B 		LDR	T2,[DSP],#4
 865 3314 3B68     		LDR	T3,[DSP]
 866 3316 ED18     		ADDS	WP,WP,T3
 867 3318 3D60     		STR	WP,[DSP]
 868 331a 46EB0206 		ADC	TOS,TOS,T2
 869 331e D5E4     		_NEXT
 870              	
 871              	/******************************
 872              		DABS ( d -- ud )
 873              		absolute value double 
 874              	*****************************/
 875 3320 08330000 		_HEADER DABS,4,"DABS"
 875      04444142 
 875      530000BF 
 876 332c 16F0004F 		tst TOS,#(1<<31)
 877 3330 09D0     		beq 9f 
 878 3332 6FEA0606 		mvn TOS,TOS 
 879 3336 3D68     		ldr WP,[DSP]
 880 3338 6FEA0505 		mvn WP,WP 
 881 333c 0135     		adds WP,#1
 882 333e 3D60     		str WP,[DSP]
 883 3340 01D3     		bcc 9f 
 884 3342 06F10106 		add TOS,#1 
 885 3346 C1E4     	9:	_NEXT 
 886              	
 887              	/*****************************
 888              	  UD> ( d1 d2 -- f )
 889              	  unsigned compare double d1 > d2 
 890              	******************************/
 891 3348 24330000 		_HEADER UDGREAT,3,"UD>"
 891      0355443E 
 892 3350 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 893 3354 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 894 3356 B042     		cmp T0,TOS 
 895 3358 02D8     		bhi 1f
 896 335a 04D4     		bmi 2f  
ARM GAS  forth.s 			page 123


 897 335c A942     		cmp T1,WP 
 898 335e 02D9     		bls 2f 
 899 3360 4FF0FF36 	1:	mov TOS,#-1 
 900 3364 B2E4     		_NEXT 
 901 3366 4FF00006 	2:  mov TOS,#0 
 902 336a AFE4     		_NEXT 
 903              	
 904              	/******************************
 905              		D0= ( d -- f )
 906              		double 0= 
 907              	*****************************/
 908 336c 4C330000 		_HEADER DZEQUAL,3,"D0="
 908      0344303D 
 909 3374 3046     		mov T0,TOS
 910 3376 57F8046B 		_POP 
 911 337a 46EA0006 		orr TOS,T0 
 912 337e 01D0     		beq 9f
 913 3380 6FF00006 		mvn TOS,#0 
 914 3384 A2E4     	9:	_NEXT 
 915              	
 916              	/*****************************
 917              	    NOT	 ( w -- !w )
 918              	 	1"s complement.
 919              	*****************************/
 920 3386 70330000 		_HEADER INVER,3,"NOT"
 920      034E4F54 
 920      00BF
 921 3390 6FEA0606 		MVN	TOS,TOS
 922 3394 9AE4     		_NEXT
 923              	
 924              	/*****************************
 925              	    NEGATE	( w -- -w )
 926              	 	2's complement.
 927              	***************************/
 928 3396 8A330000 		_HEADER NEGAT,6,"NEGATE"
 928      064E4547 
 928      41544500 
 928      00BF
 929 33a4 C6F10006 		RSB	TOS,TOS,#0
 930 33a8 90E4     		_NEXT
 931              	
 932              	/***************************
 933              	    ABS	 ( w -- |w| )
 934              	 	Absolute.
 935              	**************************/
 936 33aa 9A330000 		_HEADER ABSS,3,"ABS"
 936      03414253 
 936      00BF
 937 33b4 16F0004F 		TST	TOS,#0x80000000
 938 33b8 18BF     		IT NE
 939 33ba 7642     	    RSBNE   TOS,TOS,#0
 940 33bc 86E4     		_NEXT
 941              	
 942              	/**************************
 943              		CLZ ( n - n )
 944              		count leading zeros 
 945              	**************************/
ARM GAS  forth.s 			page 124


 946 33be AE330000 		_HEADER CLZ,3,"CLZ"
 946      03434C5A 
 946      00BF
 947 33c8 B6FA86F6 		clz TOS,TOS 
 948 33cc 7EE4     		_NEXT 
 949              	
 950              	/*************************
 951              		CTZ ( n -- n )
 952              		count trailing zeros 
 953              	************************/
 954 33ce C2330000 		_HEADER CTZ,3,"CTZ"
 954      0343545A 
 954      00BF
 955 33d8 80EA0000 		eor T0,T0 
 956 33dc 16F0010F 	1:  tst TOS,#1 
 957 33e0 04D1     		bne 2f 
 958 33e2 4FEA5606 		lsr TOS,#1 
 959 33e6 00F10100 		add T0,#1 
 960 33ea F7E7     		b 1b 
 961 33ec 0646     	2:  mov TOS,T0 
 962 33ee 6DE4     		_NEXT 
 963              	
 964              	
 965              	/*******************
 966              	  0= ( w -- f )
 967              	 TOS==0?
 968              	*******************/
 969 33f0 D2330000 		_HEADER ZEQUAL,2,"0="
 969      02303D00 
 970 33f8 16B9     		cbnz TOS,1f
 971 33fa 4FF0FF36 		mov TOS,#-1
 972 33fe 65E4     		_NEXT 
 973 3400 86EA0606 	1:  eor TOS,TOS,TOS  
 974 3404 62E4     		_NEXT 	
 975              	
 976              	/*********************
 977              	    =	 ( w w -- t )
 978              	 	Equal?
 979              	*********************/
 980 3406 F4330000 		_HEADER EQUAL,1,"="
 980      013D
 981 340c 57F8045B 		LDR	WP,[DSP],#4
 982 3410 AE42     		CMP	TOS,WP
 983 3412 0CBF     		ITE EQ 
 984 3414 6FF00006 	    MVNEQ	TOS,#0
 985 3418 0026     		MOVNE	TOS,#0
 986 341a 57E4     		_NEXT
 987              	
 988              	/************************
 989              		<> ( w w -- f )
 990              		different?
 991              	************************/
 992 341c 0A340000 		_HEADER DIFF,2,"<>"
 992      023C3E00 
 993 3424 3046     		mov T0,TOS 
 994 3426 57F8046B 		_POP 
 995 342a 86EA0006 		eor TOS,T0
ARM GAS  forth.s 			page 125


 996 342e B6FA86F0 		clz T0,TOS 
 997 3432 06FA00F6 		lsl TOS,T0 
 998 3436 4FEAE676 		asr TOS,#31 
 999 343a 47E4     		_NEXT 
 1000              	
 1001              	/************************
 1002              	    U<	 ( w w -- t )
 1003              	 	Unsigned less?
 1004              	*************************/
 1005 343c 20340000 		_HEADER ULESS,2,"U<"
 1005      02553C00 
 1006 3444 57F8045B 		LDR	WP,[DSP],#4
 1007 3448 B542     		CMP	WP,TOS
 1008 344a 34BF     		ITE CC 
 1009 344c 6FF00006 		MVNCC	TOS,#0
 1010 3450 0026     		MOVCS	TOS,#0
 1011 3452 3BE4     		_NEXT
 1012              	
 1013              	/**********************
 1014              	    <	( w w -- t )
 1015              	 	Less?
 1016              	**********************/
 1017 3454 40340000 		_HEADER LESS,1,"<"
 1017      013C00BF 
 1018 345c 57F8045B 		LDR	WP,[DSP],#4
 1019 3460 B542     		CMP	WP,TOS
 1020 3462 B4BF     	    ITE LT
 1021 3464 6FF00006 		MVNLT	TOS,#0
 1022 3468 0026     		MOVGE	TOS,#0
 1023 346a 2FE4     		_NEXT 
 1024              	
 1025              	/**********************
 1026              		U> ( u u -- t|f )
 1027              	    unsigned greater 
 1028              	**********************/
 1029 346c 58340000 		_HEADER UGREAT,2,"U>"
 1029      02553E00 
 1030 3474 57F8045B 		LDR WP,[DSP],#4 
 1031 3478 AE42     		CMP TOS,WP 
 1032 347a 34BF     		ITE CC  
 1033 347c 6FF00006 		MVNCC TOS,#0 
 1034 3480 0026     		MOVCS TOS,#0
 1035 3482 23E4     		_NEXT 
 1036              	
 1037              	/***********************
 1038              	    >	( w w -- t )
 1039              	 	greater?
 1040              	***********************/
 1041 3484 70340000 		_HEADER GREAT,1,">"
 1041      013E00BF 
 1042 348c 57F8045B 		LDR	WP,[DSP],#4
 1043 3490 B542     		CMP	WP,TOS
 1044 3492 CCBF     		ITE GT
 1045 3494 6FF00006 	    MVNGT	TOS,#0
 1046 3498 0026     		MOVLE	TOS,#0
 1047 349a 17E4     		_NEXT
 1048              	
ARM GAS  forth.s 			page 126


 1049              	/***************************
 1050              	    MAX	 ( w w -- max )
 1051              	 	Leave maximum.
 1052              	***************************/
 1053 349c 88340000 		_HEADER MAX,3,"MAX"
 1053      034D4158 
 1054 34a4 57F8045B 		LDR	WP,[DSP],#4
 1055 34a8 B542     		CMP	WP,TOS
 1056 34aa C8BF     		IT GT 
 1057 34ac 2E46     		MOVGT	TOS,WP
 1058 34ae 0DE4     		_NEXT 
 1059              	
 1060              	/**************************
 1061              	    MIN	 ( w w -- min )
 1062              	 	Leave minimum.
 1063              	**************************/
 1064 34b0 A0340000 		_HEADER MIN,3,"MIN"
 1064      034D494E 
 1065 34b8 57F8045B 		LDR	WP,[DSP],#4
 1066 34bc B542     		CMP	WP,TOS
 1067 34be B8BF     		IT LT
 1068 34c0 2E46     		MOVLT	TOS,WP
 1069 34c2 03E4     		_NEXT
 1070              	
 1071              	/***********************
 1072              	    +!	 ( w a -- )
 1073              	 	Add to memory.
 1074              	***********************/
 1075 34c4 B4340000 		_HEADER PSTOR,2,"+!"
 1075      022B2100 
 1076 34cc 57F8045B 		LDR	WP,[DSP],#4
 1077 34d0 3268     		LDR	T2,[TOS]
 1078 34d2 2A44     		ADD	T2,T2,WP
 1079 34d4 3260     		STR	T2,[TOS]
 1080 34d6 57F8046B 		_POP
 1081 34da FFF7F7BB 		_NEXT
 1082              	
 1083              	/************************
 1084              	    2!	 ( d a -- )
 1085              	 	Store double number.
 1086              	*************************/
 1087 34de C8340000 		_HEADER DSTOR,2,"2!"
 1087      02322100 
 1087      00BF
 1088 34e8 57F8045B 		LDR	WP,[DSP],#4
 1089 34ec 57F8042B 		LDR	T2,[DSP],#4
 1090 34f0 46F8045B 		STR	WP,[TOS],#4
 1091 34f4 3260     		STR	T2,[TOS]
 1092 34f6 57F8046B 		_POP
 1093 34fa FFF7E7BB 		_NEXT
 1094              	
 1095              	/************************
 1096              	    2@	 ( a -- d )
 1097              	 	Fetch double number.
 1098              	************************/
 1099 34fe E2340000 		_HEADER DAT,2,"2@"
 1099      02324000 
ARM GAS  forth.s 			page 127


 1099      00BF
 1100 3508 7568     		LDR	WP,[TOS,#4]
 1101 350a 47F8045D 		STR	WP,[DSP,#-4]!
 1102 350e 3668     		LDR	TOS,[TOS]
 1103 3510 FFF7DCBB 		_NEXT
 1104              	
 1105              	/***************************
 1106              	    COUNT	( b -- b+1 c )
 1107              	 	Fetch length of string.
 1108              	****************************/
 1109 3514 02350000 		_HEADER COUNT,5,"COUNT"
 1109      05434F55 
 1109      4E5400BF 
 1110 3520 16F8015B 		LDRB	WP,[TOS],#1
 1111 3524 47F8046D 		_PUSH
 1112 3528 2E46     		MOV	TOS,WP
 1113 352a FFF7CFBB 		_NEXT
 1114              	
 1115              	/******************************
 1116              	    DNEGATE	( d -- -d )
 1117              	 	Negate double number.
 1118              	**************************/
 1119 352e 18350000 		_HEADER DNEGA,7,"DNEGATE"
 1119      07444E45 
 1119      47415445 
 1119      00BF
 1120 353c 3D68     		LDR	WP,[DSP]
 1121 353e A2EB0202 		SUB	T2,T2,T2
 1122 3542 551B     		SUBS WP,T2,WP
 1123 3544 62EB0606 		SBC	TOS,T2,TOS
 1124 3548 3D60     		STR	WP,[DSP]
 1125 354a FFF7BFBB 		_NEXT
 1126              	
 1127              	/******************************
 1128              	  System and user variables
 1129              	******************************/
 1130              	
 1131              	/*******************************
 1132              	  doVAR	( -- a )
 1133              	  Run time routine for VARIABLE and CREATE.
 1134              	hidden word used by compiler
 1135              	********************************/
 1136              	DOVAR:
 1137 354e 47F8046D 		_PUSH
 1138 3552 6646     		MOV TOS,IP
 1139 3554 0CF1040C 		ADD IP,IP,#4 
 1140 3558 FFF7BBBB 		B UNNEST 
 1141              	
 1142              	/**********************************
 1143              	    doCON	( -- a ) 
 1144              	 	Run time routine for CONSTANT.
 1145              	hidden word used by compiler 
 1146              	***********************************/
 1147              	DOCON:
 1148 355c 47F8046D 		_PUSH
 1149 3560 5CF8046B 		LDR.W TOS,[IP],#4 
 1150 3564 FFF7B5BB 		B UNNEST 
ARM GAS  forth.s 			page 128


 1151              	
 1152              	/***********************
 1153              	  system variables 
 1154              	***********************/
 1155              	
 1156              	/**************************
 1157              	 SEED ( -- a)
 1158              	 return PRNG seed address 
 1159              	**************************/
 1160 3568 32350000 		_HEADER SEED,4,"SEED"
 1160      04534545 
 1160      440000BF 
 1161 3574 47F8046D 		_PUSH 
 1162 3578 04F10406 		ADD TOS,UP,#RNDSEED
 1163 357c FFF7A6BB 		_NEXT 	
 1164              	
 1165              	/****************************************
 1166              	  MSEC ( -- a)
 1167              	 return address of milliseconds counter
 1168              	****************************************/
 1169 3580 6C350000 		_HEADER MSEC,4,"MSEC"
 1169      044D5345 
 1169      430000BF 
 1170 358c 47F8046D 	    _PUSH
 1171 3590 04F10806 	    ADD TOS,UP,#TICKS
 1172 3594 FFF79ABB 	    _NEXT 
 1173              	
 1174              	/*************************
 1175              	 TIMER ( -- a )
 1176              	 count down timer 
 1177              	**********************/
 1178 3598 84350000 		_HEADER TIMER,5,"TIMER"
 1178      0554494D 
 1178      455200BF 
 1179 35a4 47F8046D 		 _PUSH 
 1180 35a8 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1181 35ac FFF78EBB 	    _NEXT
 1182              	
 1183              	/*****************************
 1184              	    'BOOT	 ( -- a )
 1185              	 	boot up application vector 
 1186              	*****************************/
 1187 35b0 9C350000 		_HEADER TBOOT,5,"'BOOT"
 1187      0527424F 
 1187      4F5400BF 
 1188 35bc 47F8046D 		_PUSH
 1189 35c0 04F11006 		ADD	TOS,UP,#BOOT 
 1190 35c4 FFF782BB 		_NEXT
 1191              		
 1192              	/********************************************	
 1193              	    BASE	( -- a )
 1194              	 	Storage of the radix base for numeric I/O.
 1195              	**********************************************/
 1196 35c8 B4350000 		_HEADER BASE,4,"BASE"
 1196      04424153 
 1196      450000BF 
 1197 35d4 47F8046D 		_PUSH
ARM GAS  forth.s 			page 129


 1198 35d8 04F11C06 		ADD	TOS,UP,#NBASE
 1199 35dc FFF776BB 		_NEXT
 1200              	
 1201              	/***********************************************
 1202              		BCHAR ( -- flag )
 1203              		boolean variable
 1204              		if set base char include in convertion 
 1205              		of integer to string.  
 1206              	************************************************/
 1207 35e0 CC350000 			_HEADER BCHR,5,"BCHAR"
 1207      05424348 
 1207      415200BF 
 1208 35ec 47F8046D 			_PUSH 
 1209 35f0 04F12006 			ADD TOS,UP,#BCHAR 
 1210 35f4 FFF76ABB 			_NEXT 
 1211              	
 1212              	/*****************************************************
 1213              	    temp	 ( -- a )
 1214              	 	A temporary storage location used in parse and find.
 1215              	hidden word for internal use
 1216              	********************************************************/
 1217              	TEMP:
 1218 35f8 47F8046D 		_PUSH
 1219 35fc 04F12406 		ADD	TOS,UP,#TMP
 1220 3600 FFF764BB 		_NEXT
 1221              	
 1222              	/*******************************************
 1223              	    SPAN	( -- a )
 1224              	 	Hold character count received by EXPECT.
 1225              	********************************************/
 1226 3604 E4350000 		_HEADER SPAN,4,"SPAN"
 1226      04535041 
 1226      4E0000BF 
 1227 3610 47F8046D 		_PUSH
 1228 3614 04F12806 		ADD	TOS,UP,#CSPAN
 1229 3618 FFF758BB 		_NEXT
 1230              	
 1231              	/***********************************************************
 1232              	    >IN	 ( -- a )
 1233              	 	Hold the character pointer while parsing input stream.
 1234              	***********************************************************/
 1235 361c 08360000 		_HEADER INN,3,">IN"
 1235      033E494E 
 1236 3624 47F8046D 		_PUSH
 1237 3628 04F12C06 		ADD	TOS,UP,#TOIN
 1238 362c FFF74EBB 		_NEXT
 1239              	
 1240              	/**************************************
 1241              	    #TIB	( -- a )
 1242              	 	Hold the current count and address 
 1243              		of the terminal input buffer.
 1244              	**************************************/
 1245 3630 20360000 		_HEADER NTIB,4,"#TIB"
 1245      04235449 
 1245      420000BF 
 1246 363c 47F8046D 		_PUSH
 1247 3640 04F13006 		ADD	TOS,UP,#NTIBB
ARM GAS  forth.s 			page 130


 1248 3644 FFF742BB 		_NEXT
 1249              	
 1250              	/******************************
 1251              	    'EVAL	( -- a )
 1252              	 	Execution vector of EVAL.
 1253              	*******************************/
 1254 3648 34360000 		_HEADER TEVAL,5,"'EVAL"
 1254      05274556 
 1254      414C00BF 
 1255 3654 47F8046D 		_PUSH
 1256 3658 04F13806 		ADD	TOS,UP,#EVAL
 1257 365c FFF736BB 		_NEXT
 1258              	
 1259              	/*********************************
 1260              	    HLD	 ( -- a )
 1261              	 	Hold a pointer in building a 
 1262              		numeric output string.
 1263              	*********************************/
 1264 3660 4C360000 		_HEADER HLD,3,"HLD"
 1264      03484C44 
 1265 3668 47F8046D 		_PUSH
 1266 366c 04F13C06 		ADD	TOS,UP,#VHOLD
 1267 3670 FFF72CBB 		_NEXT
 1268              	
 1269              	/**********************************
 1270              	    CONTEXT	( -- a )
 1271              	 	A area to specify vocabulary 
 1272              		search order.
 1273              	**********************************/
 1274 3674 64360000 		_HEADER CNTXT,7,"CONTEXT"
 1274      07434F4E 
 1274      54455854 
 1275              	CRRNT:
 1276 3680 47F8046D 		_PUSH
 1277 3684 04F14006 		ADD	TOS,UP,#CTXT
 1278 3688 FFF720BB 		_NEXT
 1279              	
 1280              	/******************************
 1281              	    CP	( -- a )
 1282              	 	Point to top free area  
 1283              		in user RAM. 
 1284              	******************************/
 1285 368c 78360000 		_HEADER CPP,2,"CP"
 1285      02435000 
 1286 3694 47F8046D 		_PUSH
 1287 3698 04F14806 		ADD	TOS,UP,#USER_CTOP
 1288 369c FFF716BB 		_NEXT
 1289              	
 1290              	/****************************
 1291              	   FCP ( -- a )
 1292              	  Point ot top of Forth 
 1293              	  system dictionary
 1294              	****************************/
 1295 36a0 90360000 		_HEADER FCP,3,"FCP"
 1295      03464350 
 1296 36a8 47F8046D 		_PUSH 
 1297 36ac 04F14406 		ADD TOS,UP,#FORTH_CTOP 
ARM GAS  forth.s 			page 131


 1298 36b0 FFF70CBB 		_NEXT 
 1299              	
 1300              	/***************************
 1301              	    LAST	( -- a )
 1302              	 	Point to the last name 
 1303              		in the dictionary.
 1304              	***************************/
 1305 36b4 A4360000 		_HEADER LAST,4,"LAST"
 1305      044C4153 
 1305      540000BF 
 1306 36c0 47F8046D 		_PUSH
 1307 36c4 04F14C06 		ADD	TOS,UP,#LASTN
 1308 36c8 FFF700BB 		_NEXT
 1309              	
 1310              	
 1311              	/***********************
 1312              		system constants 
 1313              	***********************/
 1314              	
 1315              	/********************************
 1316              		USER-BEGIN ( -- a )
 1317              	  where user area begin in RAM
 1318              	********************************/
 1319 36cc B8360000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1319      0A555345 
 1319      522D4245 
 1319      47494E00 
 1320 36dc 47F8046D 		_PUSH 
 1321 36e0 DFF80460 		ldr TOS,USR_BGN_ADR 
 1322 36e4 FFF7F2BA 		_NEXT 
 1323              	USR_BGN_ADR:
 1324 36e8 12050020 	.word  DTOP 
 1325              	
 1326              	/*********************************
 1327              	  USER_END ( -- a )
 1328              	  where user area end in RAM 
 1329              	******************************/
 1330 36ec D0360000 		_HEADER USER_END,8,"USER-END"
 1330      08555345 
 1330      522D454E 
 1330      440000BF 
 1331 36fc 47F8046D 		_PUSH 
 1332 3700 DFF80460 		ldr TOS,USER_END_ADR 
 1333 3704 FFF7E2BA 		_NEXT 
 1334              	USER_END_ADR:
 1335 3708 7C800120 		.word DEND 
 1336              	
 1337              	
 1338              	/* *********************
 1339              	  Common functions
 1340              	***********************/
 1341              	
 1342              	/********************************
 1343              	    WITHIN	( u ul uh -- t )
 1344              	 	Return true if u is within 
 1345              		the range of ul and uh.
 1346              	********************************/
ARM GAS  forth.s 			page 132


 1347 370c F0360000 		_HEADER WITHI,6,"WITHIN"
 1347      06574954 
 1347      48494E00 
 1348 3718 504700BF 		_NEST
 1349 371c C5300000 		_ADR	OVER
 1350 3720 95310000 		_ADR	SUBB
 1351 3724 01300000 		_ADR	TOR
 1352 3728 95310000 		_ADR	SUBB
 1353 372c BD2F0000 		_ADR	RFROM
 1354 3730 45340000 		_ADR	ULESS
 1355 3734 D32C0000 		_UNNEST
 1356              	
 1357              	//  Divide
 1358              	
 1359              	/*************************************
 1360              	    UM/MOD	( udl udh u -- ur uq )
 1361              	 	Unsigned divide of a double by a 
 1362              		single. Return mod and quotient.
 1363              	**************************************/
 1364 3738 10370000 		_HEADER UMMOD,6,"UM/MOD"
 1364      06554D2F 
 1364      4D4F4400 
 1365 3744 4FF00103 		MOV	T3,#1
 1366 3748 57F8045B 		LDR	WP,[DSP],#4
 1367 374c 3A68     		LDR	T2,[DSP]
 1368              	UMMOD0:
 1369 374e 9218     		ADDS	T2,T2,T2
 1370 3750 6D41     		ADCS	WP,WP,WP
 1371 3752 04D3     		BCC	UMMOD1
 1372 3754 A5EB0605 		SUB	WP,WP,TOS
 1373 3758 02F10102 		ADD	T2,T2,#1
 1374 375c 04E0     		B UMMOD2
 1375              	UMMOD1:
 1376 375e AD1B     		SUBS	WP,WP,TOS 
 1377 3760 28BF     		IT CS 
 1378 3762 0132     		ADDCS	T2,T2,#1
 1379 3764 00D2     		BCS	UMMOD2
 1380 3766 3544     		ADD	WP,WP,TOS
 1381              	UMMOD2:
 1382 3768 DB18     		ADDS	T3,T3,T3
 1383 376a F0D3     		BCC	UMMOD0
 1384 376c 1646     		MOV	TOS,T2
 1385 376e 3D60     		STR	WP,[DSP]
 1386 3770 FFF7ACBA 		_NEXT
 1387              	
 1388              	/****************************
 1389              	    M/MOD	( d n -- r q )
 1390              	 	Signed floored divide 
 1391              		of double by single. 
 1392              		Return mod and quotient.
 1393              	****************************/
 1394 3774 3C370000 		_HEADER MSMOD,5,"M/MOD"
 1394      054D2F4D 
 1394      4F4400BF 
 1395 3780 504700BF 		_NEST
 1396 3784 85300000 		_ADR	DUPP
 1397 3788 F5300000 		_ADR	ZLESS
ARM GAS  forth.s 			page 133


 1398 378c 85300000 		_ADR	DUPP
 1399 3790 01300000 		_ADR	TOR
 1400 3794 372F0000 		_QBRAN MMOD1
 1400      AC370000 
 1401 379c A5330000 		_ADR	NEGAT
 1402 37a0 01300000 		_ADR	TOR
 1403 37a4 3D350000 		_ADR	DNEGA
 1404 37a8 BD2F0000 		_ADR	RFROM
 1405              	MMOD1:
 1406 37ac 01300000 		_ADR	TOR
 1407 37b0 85300000 		_ADR	DUPP
 1408 37b4 F5300000 		_ADR	ZLESS
 1409 37b8 372F0000 		_QBRAN MMOD2
 1409      C8370000 
 1410 37c0 ED2F0000 		_ADR	RAT
 1411 37c4 85310000 		_ADR	PLUS
 1412              	MMOD2:
 1413 37c8 BD2F0000 		_ADR	RFROM
 1414 37cc 45370000 		_ADR	UMMOD
 1415 37d0 BD2F0000 		_ADR	RFROM
 1416 37d4 372F0000 		_QBRAN	MMOD3
 1416      E8370000 
 1417 37dc 95300000 		_ADR	SWAP
 1418 37e0 A5330000 		_ADR	NEGAT
 1419 37e4 95300000 		_ADR	SWAP
 1420              	MMOD3:   
 1421 37e8 D32C0000 		_UNNEST
 1422              	
 1423              	/****************************
 1424              		S>D ( n -- d )
 1425              		convert single to double 
 1426              	*****************************/
 1427 37ec 78370000 		_HEADER STOD,3,"S>D"
 1427      03533E44 
 1428 37f4 47F8046D 		_PUSH 
 1429 37f8 4FEAE676 		ASR TOS,#31
 1430 37fc FFF766BA 		_NEXT 
 1431              	
 1432              	/****************************
 1433              		D2* ( d -- d<<1 )
 1434              		double * 2 
 1435              	***************************/
 1436 3800 F0370000 		_HEADER D2STAR,3,"D2*"
 1436      0344322A 
 1437 3808 3868     		ldr T0,[DSP]
 1438 380a 4000     		lsls T0,#1
 1439 380c 3860     		str T0,[DSP]
 1440 380e 4FEA4606 		lsl TOS,#1
 1441 3812 46F10006 		adc TOS,#0
 1442 3816 FFF759BA 		_NEXT 
 1443              	
 1444              	/****************************
 1445              		D2/  ( d -- d>>1 )
 1446              		double signed divide by 2 
 1447              	*****************************/
 1448 381a 04380000 		_HEADER D2SL,3,"D2/"
 1448      0344322F 
ARM GAS  forth.s 			page 134


 1448      00BF
 1449 3824 3868     		ldr T0,[DSP]
 1450 3826 7610     		asrs TOS,#1
 1451 3828 4FEA3000 		rrx T0,T0 
 1452 382c 3860     		str T0,[DSP]
 1453 382e FFF74DBA 		_NEXT 
 1454              	
 1455              	/***************************
 1456              		D/MOD  ( d+ n+ - r+ qd+ )
 1457              		unsigned double division
 1458              		and modulo 
 1459              		output:
 1460              			qd+ = d+ / n+
 1461              			r+ = qd+ - (d+ * n+ )
 1462              	***************************/
 1463 3832 1E380000 		_HEADER DSLMOD,5,"D/MOD"
 1463      05442F4D 
 1463      4F44
 1464 383c 3D68     		ldr WP,[DSP]  // d+ high 
 1465 383e 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1466 3840 4FF02002 		mov T2,#32 // shift counter  
 1467 3844 81EA0101 		eor T1,T1 // quotient T0:T1  
 1468 3848 25B9     		cbnz WP,1f    
 1469 384a 82EA0202 		eor T2,T2 // nos shifting required 
 1470 384e 0546     		mov WP,T0 
 1471 3850 80EA0000 		eor T0,T0 
 1472 3854 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1473 3856 15F0004F 	    tst WP,#(1<<31) 
 1474 385a 06D1     		bne 2f
 1475 385c 4918     		adds T1,T1,T1 
 1476 385e 4041     		adcs T0,T0,T0 
 1477 3860 45EB0505 		adc WP,WP,WP 
 1478 3864 A2F10102 		sub T2,#1 
 1479 3868 F4E7     		b 1b 
 1480 386a B5FBF6F3 	2:  udiv T3,WP,TOS
 1481 386e 41EA0301 		orr T1,T3   // append partial quotient 
 1482 3872 06FB03F3 		mul T3,TOS
 1483 3876 A5EB0305 		sub WP,T3 //remainder 
 1484 387a 02B1     		cbz T2,8f 
 1485 387c EAE7     		b 1b 
 1486 387e 7D60     	8:	str WP,[DSP,#4] // remainder 
 1487 3880 3960     		str T1,[DSP]  // q lo 
 1488 3882 0646     		mov TOS,T0  // q hi 		
 1489 3884 FFF722BA 		_NEXT 
 1490              	
 1491              	
 1492              	/****************************
 1493              		D/  ( ud u -- udq )
 1494              		divide unsigned double 
 1495              		by unsigned single 
 1496              		return double quotient
 1497              		rounded to nearest integer 
 1498              	****************************/
 1499 3888 36380000 		_HEADER DSLASH,2,"D/"
 1499      02442F00 
 1500 3890 504700BF 		_NEST 
 1501 3894 85300000 		_ADR DUPP 
ARM GAS  forth.s 			page 135


 1502 3898 F72E0000 		_DOLIT 1 
 1502      01000000 
 1503 38a0 5D310000 		_ADR RSHIFT 
 1504 38a4 01300000 		_ADR TOR 
 1505 38a8 3D380000 		_ADR DSLMOD 
 1506 38ac A9320000 		_ADR ROT 
 1507 38b0 BD2F0000 		_ADR RFROM 
 1508 38b4 8D340000 		_ADR GREAT 
 1509 38b8 372F0000 		_QBRAN 9f
 1509      D0380000 
 1510 38c0 F72E0000 		_DOLIT 1 
 1510      01000000 
 1511 38c8 F5370000 		_ADR STOD 
 1512 38cc 0D330000 		_ADR DPLUS 
 1513 38d0 D32C0000 	9:	_UNNEST 
 1514              	
 1515              	
 1516              	/****************************
 1517              		D* ( d s -- d )
 1518              	    multiply a double 
 1519              		by a single 
 1520              	****************************/
 1521 38d4 8C380000 		_HEADER DSTAR,2,"D*"
 1521      02442A00 
 1522              	/*
 1523              		_NEST 
 1524              		_ADR NROT 
 1525              		_ADR DUPP 
 1526              		_ADR TOR 
 1527              		_ADR DABS
 1528              		_ADR SWAP  
 1529              		_ADR ROT   
 1530              		_ADR DUPP
 1531              		_ADR TOR
 1532              		_ADR MSTAR
 1533              		_ADR ROT
 1534              		_ADR RFROM 
 1535              		_ADR STAR 
 1536              		_ADR PLUS
 1537              		_ADR RFROM 
 1538              		_ADR ZLESS 
 1539              		_QBRAN 9f
 1540              		_ADR DNEGA   
 1541              	9:	_UNNEST 
 1542              	*/
 1543 38dc 57F8040B 		ldr T0,[DSP],#4
 1544 38e0 3968     		ldr T1,[DSP]
 1545 38e2 3860     		str T0,[DSP] 
 1546 38e4 83EA0303 		eor T3,T3 
 1547 38e8 10F0004F 		tst T0,#(1<<31)
 1548 38ec 02D0     		beq 1f 
 1549              		// DNEGATE 
 1550 38ee 591A     		subs T1,T3,T1  
 1551 38f0 63EB0000 		sbc T0,T3,T0 
 1552 38f4 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1553 38f8 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1554 38fc 0E44     		add TOS,T1  // TOS:T2 product  
ARM GAS  forth.s 			page 136


 1555 38fe 3868     		ldr r0,[DSP]
 1556 3900 10F0004F 		tst T0,#(1<<31)
 1557 3904 02D0     		beq 2f 
 1558              		// DNEGATE product 
 1559 3906 9A1A     		subs T2,T3,T2  
 1560 3908 63EB0606 		sbc TOS,T3,TOS 
 1561 390c 3A60     	2:  str T2,[DSP]
 1562 390e FFF7DDB9 		_NEXT 
 1563              	
 1564              	
 1565              	/****************************
 1566              	   /MOD	( n n -- r q )
 1567              		Signed divide. Return
 1568              		mod and quotient.
 1569              	****************************/
 1570 3912 D8380000 		_HEADER SLMOD,4,"/MOD"
 1570      042F4D4F 
 1570      4400
 1571 391c 504700BF 		_NEST
 1572 3920 C5300000 		_ADR	OVER
 1573 3924 F5300000 		_ADR	ZLESS
 1574 3928 95300000 		_ADR	SWAP
 1575 392c 81370000 		_ADR	MSMOD
 1576 3930 D32C0000 		_UNNEST
 1577              	
 1578              	/**************************
 1579              	    MOD	 ( n n -- r )
 1580              	 	Signed divide. Return
 1581              		mod only.
 1582              	**************************/
 1583 3934 16390000 		_HEADER MODD,3,"MOD"
 1583      034D4F44 
 1584 393c 504700BF 		_NEST
 1585 3940 1D390000 		_ADR	SLMOD
 1586 3944 75300000 		_ADR	DROP
 1587 3948 D32C0000 		_UNNEST
 1588              	
 1589              	/*************************
 1590              	    /	   ( n n -- q )
 1591              	 	Signed divide. Return
 1592              		quotient only.
 1593              	**************************/
 1594 394c 38390000 		_HEADER SLASH,1,"/"
 1594      012F00BF 
 1595 3954 504700BF 		_NEST
 1596 3958 1D390000 		_ADR	SLMOD
 1597 395c 95300000 		_ADR	SWAP
 1598 3960 75300000 		_ADR	DROP
 1599 3964 D32C0000 		_UNNEST
 1600              	
 1601              	//******************************
 1602              	//   */MOD	( n1 n2 n3 -- r q )
 1603              	/*   Multiply n1 and n2, then 
 1604              	   divide by n3. Return 
 1605              	   mod and quotient.
 1606              	******************************/
 1607 3968 50390000 		_HEADER SSMOD,5,"*/MOD"
ARM GAS  forth.s 			page 137


 1607      052A2F4D 
 1607      4F4400BF 
 1608 3974 504700BF 		_NEST
 1609 3978 01300000 		_ADR	TOR
 1610 397c CD310000 		_ADR	MSTAR
 1611 3980 BD2F0000 		_ADR	RFROM
 1612 3984 81370000 		_ADR	MSMOD
 1613 3988 D32C0000 		_UNNEST
 1614              	
 1615              	//*******************************
 1616              	//  */ ( n1 n2 n3 -- q )
 1617              	/* 	Multiply n1 by n2, then 
 1618              		divide by n3. Return quotient
 1619              		only.
 1620              	*******************************/
 1621 398c 6C390000 		_HEADER STASL,2,"*/"
 1621      022A2F00 
 1622 3994 504700BF 		_NEST
 1623 3998 75390000 		_ADR	SSMOD
 1624 399c 95300000 		_ADR	SWAP
 1625 39a0 75300000 		_ADR	DROP
 1626 39a4 D32C0000 		_UNNEST
 1627              	
 1628              	/*******************
 1629              	  Miscellaneous
 1630              	*******************/
 1631              	
 1632              	/*************************
 1633              	    ALIGNED	( b -- a )
 1634              	 	Align address to the 
 1635              		cell boundary.
 1636              	**************************/
 1637 39a8 90390000 		_HEADER ALGND,7,"ALIGNED"
 1637      07414C49 
 1637      474E4544 
 1638 39b4 06F10306 		ADD	TOS,TOS,#3
 1639 39b8 6FF00305 		MVN	WP,#3
 1640 39bc 06EA0506 		AND	TOS,TOS,WP
 1641 39c0 FFF784B9 		_NEXT
 1642              	
 1643              	/****************************
 1644              	    >CHAR	( c -- c )
 1645              	 	Filter non-printing 
 1646              		characters.
 1647              	****************************/
 1648 39c4 AC390000 		_HEADER TCHAR,5,">CHAR"
 1648      053E4348 
 1648      415200BF 
 1649 39d0 504700BF 		_NEST
 1650 39d4 F72E0000 		_DOLIT  0x7F
 1650      7F000000 
 1651 39dc 05310000 		_ADR	ANDD
 1652 39e0 85300000 		_ADR	DUPP	// mask msb
 1653 39e4 41320000 		_ADR	BLANK
 1654 39e8 F72E0000 		_DOLIT 	127
 1654      7F000000 
 1655 39f0 19370000 		_ADR	WITHI	// check for printable
ARM GAS  forth.s 			page 138


 1656 39f4 91330000 		_ADR	INVER
 1657 39f8 372F0000 		_QBRAN	TCHA1
 1657      0C3A0000 
 1658 3a00 75300000 		_ADR	DROP
 1659 3a04 F72E0000 		_DOLIT 	'_'	// replace non-printables
 1659      5F000000 
 1660              	TCHA1:
 1661 3a0c D32C0000 		  _UNNEST
 1662              	
 1663              	/************************
 1664              	    DEPTH	( -- n )
 1665              	 	Return the depth of
 1666              		the data stack.
 1667              	***********************/
 1668 3a10 C8390000 		_HEADER DEPTH,5,"DEPTH"
 1668      05444550 
 1668      544800BF 
 1669 3a1c 4FF68062 		_MOV32 T2,SPP 
 1669      C2F20102 
 1670 3a24 A2EB0702 		SUB	T2,T2,DSP
 1671 3a28 47F8046D 		_PUSH
 1672 3a2c 4FEAA206 		ASR	TOS,T2,#2
 1673 3a30 FFF74CB9 		_NEXT
 1674              	
 1675              	/*****************************
 1676              	    PICK	( ... +n -- ... w )
 1677              	 	Copy the nth stack item 
 1678              		to tos.
 1679              	******************************/
 1680 3a34 143A0000 		_HEADER PICK,4,"PICK"
 1680      04504943 
 1680      4B0000BF 
 1681 3a40 4FEA8606 		lsl TOS,#2 
 1682 3a44 BE59     		ldr TOS,[DSP,TOS]
 1683 3a46 FFF741B9 		_NEXT 
 1684              	
 1685              	/*****************************
 1686              		PUT ( xn..x0 w i -- xi...x0 )
 1687              		put value w at position 
 1688              		xi on stack 
 1689              		i in range [0..n] 
 1690              	*****************************/
 1691 3a4a 383A0000 		_HEADER PUT,3,"PUT"
 1691      03505554 
 1691      00BF
 1692 3a54 3546     		mov WP,TOS 
 1693 3a56 57F8046B 		_POP 
 1694 3a5a 4FEA8505 		lsl WP,#2 
 1695 3a5e 7E51     		str TOS,[DSP,WP]
 1696 3a60 57F8046B 		_POP 
 1697 3a64 FFF732B9 		_NEXT 
 1698              	
 1699              	/*********************
 1700              	  Memory access
 1701              	*********************/
 1702              	
 1703              	/*************************
ARM GAS  forth.s 			page 139


 1704              	    HERE	( -- a )
 1705              	 	Return the top of
 1706              		the code dictionary.
 1707              	*************************/
 1708 3a68 4E3A0000 		_HEADER HERE,4,"HERE"
 1708      04484552 
 1708      450000BF 
 1709 3a74 504700BF 		_NEST
 1710 3a78 95360000 		_ADR	CPP
 1711 3a7c 912F0000 		_ADR	AT
 1712 3a80 D32C0000 		_UNNEST
 1713              	
 1714              	/***************************	
 1715              	    PAD	 ( -- a )
 1716              	 	Return the address of 
 1717              		a temporary buffer.
 1718              	***************************/
 1719 3a84 6C3A0000 		_HEADER PAD,3,"PAD"
 1719      03504144 
 1720 3a8c 504700BF 		_NEST
 1721 3a90 753A0000 		_ADR	HERE
 1722 3a94 F72E0000 		_DOLIT 80
 1722      50000000 
 1723 3a9c 85310000 		_ADR PLUS 
 1724 3aa0 D32C0000 		_UNNEST
 1725              	
 1726              	/***********************
 1727              	    TIB	 ( -- a )
 1728              	 	Return the address 
 1729              		of the terminal 
 1730              		input buffer.
 1731              	************************/
 1732 3aa4 883A0000 		_HEADER TIB,3,"TIB"
 1732      03544942 
 1733 3aac 47F8046D 		_PUSH
 1734 3ab0 666B     		ldr TOS,[UP,#TIBUF]
 1735 3ab2 FFF70BB9 		_NEXT
 1736              	
 1737              	/*************************
 1738              	    @EXECUTE	( a -- )
 1739              	 	Execute vector stored
 1740              		in address a.
 1741              	*************************/
 1742 3ab6 A83A0000 		_HEADER ATEXE,8,"@EXECUTE"
 1742      08404558 
 1742      45435554 
 1742      4500
 1743 3ac4 3500     		MOVS	WP,TOS
 1744 3ac6 57F8046B 		_POP
 1745 3aca 2D68     		LDR	WP,[WP]
 1746 3acc 45F00105 		ORR	WP,WP,#1
 1747 3ad0 18BF     	    IT NE 
 1748 3ad2 2847     		BXNE	WP
 1749 3ad4 FFF7FAB8 		_NEXT
 1750              	
 1751              	/*******************************
 1752              	    CMOVE	( b1 b2 u -- )
ARM GAS  forth.s 			page 140


 1753              	 	Copy u bytes from b1 to b2.
 1754              	********************************/
 1755 3ad8 BA3A0000 		_HEADER CMOVE,5,"CMOVE"
 1755      05434D4F 
 1755      564500BF 
 1756 3ae4 57F8042B 		LDR	T2,[DSP],#4
 1757 3ae8 57F8043B 		LDR	T3,[DSP],#4
 1758 3aec 03E0     		B CMOV1
 1759              	CMOV0:
 1760 3aee 13F8015B 		LDRB	WP,[T3],#1
 1761 3af2 02F8015B 		STRB	WP,[T2],#1
 1762              	CMOV1:
 1763 3af6 3600     		MOVS	TOS,TOS
 1764 3af8 02D0     		BEQ	CMOV2
 1765 3afa A6F10106 		SUB	TOS,TOS,#1
 1766 3afe F6E7     		B CMOV0
 1767              	CMOV2:
 1768 3b00 57F8046B 		_POP
 1769 3b04 FFF7E2B8 		_NEXT
 1770              	
 1771              	/***************************
 1772              	    MOVE	( a1 a2 u -- )
 1773              	 	Copy u words from a1 to a2.
 1774              	*******************************/
 1775 3b08 DC3A0000 		_HEADER MOVE,4,"MOVE"
 1775      044D4F56 
 1775      450000BF 
 1776 3b14 4FF00400 		MOV T0,#4 
 1777 3b18 06F10306 		ADD TOS,#3 
 1778 3b1c 26F00306 		BIC TOS,#3
 1779 3b20 57F8041B 		LDR	T1,[DSP],#4 // dest
 1780 3b24 57F8042B 		LDR	T2,[DSP],#4 // src 
 1781 3b28 8A42     		CMP T2,T1 
 1782 3b2a 08D5     		BPL MOVE1
 1783 3b2c 6FF00300 		MOV T0,#-4 
 1784 3b30 3144     		ADD T1,TOS
 1785 3b32 3244     		ADD T2,TOS 
 1786 3b34 01E0     		B MOVE3
 1787              	MOVE0:
 1788 3b36 1568     		LDR	WP,[T2]
 1789 3b38 0D60     		STR	WP,[T1]
 1790              	MOVE3: 
 1791 3b3a 0144     		ADD T1,T0 
 1792 3b3c 0244     		ADD T2,T0 
 1793              	MOVE1:
 1794 3b3e 3600     		MOVS TOS,TOS
 1795 3b40 02D0     		BEQ	MOVE2
 1796 3b42 A6F10406 		SUB	TOS,TOS,#4
 1797 3b46 F6E7     		B MOVE0
 1798              	MOVE2:
 1799 3b48 57F8046B 		_POP
 1800 3b4c FFF7BEB8 		_NEXT
 1801              	
 1802              	/**************************
 1803              	    FILL	( b u c -- )
 1804              	 	Fill u bytes of character
 1805              		c to area beginning at b.
ARM GAS  forth.s 			page 141


 1806              	******************************/
 1807 3b50 0C3B0000 		_HEADER FILL,4,"FILL"
 1807      0446494C 
 1807      4C0000BF 
 1808 3b5c 03CF     		LDMFD DSP!,{T0,T1} 
 1809 3b5e 0000     		MOVS T0,T0 
 1810 3b60 03D0     		BEQ FILL2
 1811              	FILL1:
 1812 3b62 01F8016B 		STRB	TOS,[T1],#1
 1813 3b66 0138     		SUBS	T0,T0,#1
 1814 3b68 FBD1     		BNE FILL1
 1815              	FILL2:
 1816 3b6a 57F8046B 		_POP
 1817 3b6e FFF7ADB8 		_NEXT
 1818              	
 1819              	/*****************************
 1820              	    PACK$	( b u a -- a )
 1821              	 	Build a counted word with
 1822              		u characters from b. 
 1823              		Null fill.
 1824              	*****************************/
 1825 3b72 543B0000 		_HEADER PACKS,5,"PACK$"
 1825      05504143 
 1825      4B24
 1826 3b7c 504700BF 		_NEST
 1827 3b80 B5390000 		_ADR	ALGND
 1828 3b84 85300000 		_ADR	DUPP
 1829 3b88 01300000 		_ADR	TOR		// strings only on cell boundary
 1830 3b8c C5300000 		_ADR	OVER
 1831 3b90 85310000 		_ADR	PLUS
 1832 3b94 E1310000 		_ADR	ONEP 
 1833 3b98 F72E0000 		_DOLIT 	0xFFFFFFFC
 1833      FCFFFFFF 
 1834 3ba0 05310000 		_ADR	ANDD			// count mod cell
 1835 3ba4 F72E0000 		_DOLIT 	0
 1835      00000000 
 1836 3bac 95300000 		_ADR	SWAP
 1837 3bb0 7D2F0000 		_ADR	STORE			// null fill cell
 1838 3bb4 ED2F0000 		_ADR	RAT
 1839 3bb8 F9320000 		_ADR	DDUP
 1840 3bbc 9D2F0000 		_ADR	CSTOR
 1841 3bc0 E1310000 		_ADR	ONEP			// save count
 1842 3bc4 95300000 		_ADR	SWAP
 1843 3bc8 E53A0000 		_ADR	CMOVE
 1844 3bcc BD2F0000 		_ADR	RFROM
 1845 3bd0 D32C0000 		_UNNEST   			// move string
 1846              	
 1847              	/***********************************
 1848              	  Numeric output, single precision
 1849              	***********************************/
 1850              	
 1851              	/**************************
 1852              	    DIGIT	( u -- c )
 1853              	 	Convert digit u to 
 1854              		a character.
 1855              	***************************/
 1856 3bd4 763B0000 		_HEADER DIGIT,5,"DIGIT"
ARM GAS  forth.s 			page 142


 1856      05444947 
 1856      495400BF 
 1857 3be0 504700BF 		_NEST
 1858 3be4 F72E0000 		_DOLIT 9
 1858      09000000 
 1859 3bec C5300000 		_ADR	OVER
 1860 3bf0 5D340000 		_ADR	LESS
 1861 3bf4 F72E0000 		_DOLIT	7
 1861      07000000 
 1862 3bfc 05310000 		_ADR	ANDD
 1863 3c00 85310000 		_ADR	PLUS
 1864 3c04 F72E0000 		_DOLIT	'0'
 1864      30000000 
 1865 3c0c 85310000 		_ADR	PLUS 
 1866 3c10 D32C0000 		_UNNEST
 1867              	
 1868              	/*********************************
 1869              	    EXTRACT	( ud base -- ud c )
 1870              	 	Extract the least significant
 1871              		digit from positive double.
 1872              	**********************************/
 1873 3c14 D83B0000 		_HEADER EXTRC,7,"EXTRACT"
 1873      07455854 
 1873      52414354 
 1874 3c20 504700BF 		_NEST
 1875 3c24 3D380000 		_ADR	DSLMOD
 1876 3c28 A9320000 		_ADR	ROT
 1877 3c2c E13B0000 		_ADR	DIGIT
 1878 3c30 D32C0000 		_UNNEST
 1879              	
 1880              	/***************************
 1881              	    <#	  ( -- )
 1882              	 	Initiate the numeric
 1883              		output process.
 1884              	****************************/
 1885 3c34 183C0000 		_HEADER BDIGS,2,"<#"
 1885      023C2300 
 1886 3c3c 504700BF 		_NEST
 1887 3c40 8D3A0000 		_ADR	PAD
 1888 3c44 69360000 		_ADR	HLD
 1889 3c48 7D2F0000 		_ADR	STORE
 1890 3c4c D32C0000 		_UNNEST
 1891              	
 1892              	/*********************************
 1893              	    HOLD	( c -- )
 1894              	 	Insert a character into the 
 1895              		numeric output string.
 1896              	**********************************/
 1897 3c50 383C0000 		_HEADER HOLD,4,"HOLD"
 1897      04484F4C 
 1897      440000BF 
 1898 3c5c 504700BF 		_NEST
 1899 3c60 69360000 		_ADR	HLD
 1900 3c64 912F0000 		_ADR	AT
 1901 3c68 F1310000 		_ADR	ONEM
 1902 3c6c 85300000 		_ADR	DUPP
 1903 3c70 69360000 		_ADR	HLD
ARM GAS  forth.s 			page 143


 1904 3c74 7D2F0000 		_ADR	STORE
 1905 3c78 9D2F0000 		_ADR	CSTOR
 1906 3c7c D32C0000 		_UNNEST
 1907              	
 1908              	/***********************
 1909              	    #	   ( ud -- ud )
 1910              	 	Extract one digit 
 1911              		from ud and append 
 1912              		the digit to output 
 1913              		string.
 1914              	*************************/
 1915 3c80 543C0000 		_HEADER DIG,1,"#"
 1915      012300BF 
 1916 3c88 504700BF 		_NEST
 1917 3c8c D5350000 		_ADR	BASE
 1918 3c90 912F0000 		_ADR	AT
 1919 3c94 213C0000 		_ADR	EXTRC
 1920 3c98 5D3C0000 		_ADR	HOLD
 1921 3c9c D32C0000 		_UNNEST
 1922              	
 1923              	/***************************
 1924              	    #S	  ( ud -- 0 )
 1925              	 	Convert ud until all 
 1926              		digits are added to 
 1927              		the output string.
 1928              	***************************/
 1929 3ca0 843C0000 		_HEADER DIGS,2,"#S"
 1929      02235300 
 1930 3ca8 504700BF 		_NEST
 1931              	DIGS1:
 1932 3cac 893C0000 	    _ADR	DIG
 1933 3cb0 F9320000 		_ADR	DDUP
 1934 3cb4 19310000 		_ADR    ORR 
 1935 3cb8 372F0000 		_QBRAN 	DIGS2
 1935      C83C0000 
 1936 3cc0 5F2F0000 		_BRAN	DIGS1
 1936      AC3C0000 
 1937              	DIGS2:
 1938 3cc8 75300000 		 _ADR DROP 
 1939 3ccc D32C0000 		 _UNNEST
 1940              	
 1941              	/*********************
 1942              	    SIGN	( n -- )
 1943              	 	Add a minus sign
 1944              		to the numeric
 1945              		output string.
 1946              	*********************/
 1947 3cd0 A43C0000 		_HEADER SIGN,4,"SIGN"
 1947      04534947 
 1947      4E0000BF 
 1948 3cdc 504700BF 		_NEST
 1949 3ce0 F5300000 		_ADR	ZLESS
 1950 3ce4 372F0000 		_QBRAN	SIGN1
 1950      F83C0000 
 1951 3cec F72E0000 		_DOLIT '-'
 1951      2D000000 
 1952 3cf4 5D3C0000 		_ADR	HOLD
ARM GAS  forth.s 			page 144


 1953              	SIGN1:
 1954 3cf8 D32C0000 		  _UNNEST
 1955              	
 1956              	/*************************
 1957              	    #>  ( w -- b u )
 1958              	 	Prepare the output 
 1959              		word to be TYPE'd.
 1960              	************************/
 1961 3cfc D43C0000 		_HEADER EDIGS,2,"#>"
 1961      02233E00 
 1962 3d04 504700BF 		_NEST
 1963 3d08 75300000 		_ADR	DROP
 1964 3d0c 69360000 		_ADR	HLD
 1965 3d10 912F0000 		_ADR	AT
 1966 3d14 8D3A0000 		_ADR	PAD
 1967 3d18 C5300000 		_ADR	OVER
 1968 3d1c 95310000 		_ADR	SUBB
 1969 3d20 D32C0000 		_UNNEST
 1970              	
 1971              	/**************************
 1972              	    str	 ( n -- b u )
 1973              	 	Convert a signed 
 1974              		integer to a numeric 
 1975              		string.
 1976              	hidden word used by compiler
 1977              	***************************/
 1978              	STRR:
 1979 3d24 504700BF 		_NEST
 1980 3d28 F5370000 		_ADR 	STOD 
 1981 3d2c 85300000 		_ADR	DUPP
 1982 3d30 01300000 		_ADR	TOR
 1983 3d34 2D330000 		_ADR	DABS
 1984 3d38 3D3C0000 		_ADR	BDIGS
 1985 3d3c A93C0000 		_ADR	DIGS
 1986 3d40 BD2F0000 		_ADR	RFROM
 1987 3d44 DD3C0000 		_ADR	SIGN
 1988 3d48 053D0000 		_ADR	EDIGS
 1989 3d4c D32C0000 		_UNNEST
 1990              	
 1991              	/*************************
 1992              	    HEX	 ( -- )
 1993              	 	Use radix 16 as 
 1994              		base for numeric 
 1995              		conversions.
 1996              	*************************/
 1997 3d50 003D0000 		_HEADER HEX,3,"HEX"
 1997      03484558 
 1998 3d58 504700BF 		_NEST
 1999 3d5c F72E0000 		_DOLIT 16
 1999      10000000 
 2000 3d64 D5350000 		_ADR	BASE
 2001 3d68 7D2F0000 		_ADR	STORE
 2002 3d6c D32C0000 		_UNNEST
 2003              	
 2004              	/**************************
 2005              		BIN ( -- )
 2006              		Use radix 2 as 
ARM GAS  forth.s 			page 145


 2007              		base for numeric 
 2008              		conversion 
 2009              	**************************/
 2010 3d70 543D0000 		_HEADER BIN,3,"BIN"
 2010      0342494E 
 2011 3d78 504700BF 		_NEST 
 2012 3d7c F72E0000 		_DOLIT 2 
 2012      02000000 
 2013 3d84 D5350000 		_ADR BASE 
 2014 3d88 7D2F0000 		_ADR STORE
 2015 3d8c D32C0000 		_UNNEST 
 2016              	
 2017              	/************************
 2018              	    DECIMAL	( -- )
 2019              	 	Use radix 10 as base
 2020              		for numeric conversions.
 2021              	*************************/
 2022 3d90 743D0000 		_HEADER DECIM,7,"DECIMAL"
 2022      07444543 
 2022      494D414C 
 2023 3d9c 504700BF 		_NEST
 2024 3da0 F72E0000 		_DOLIT 10
 2024      0A000000 
 2025 3da8 D5350000 		_ADR	BASE
 2026 3dac 7D2F0000 		_ADR	STORE
 2027 3db0 D32C0000 		_UNNEST
 2028              	
 2029              	/************************************
 2030              	  Numeric input
 2031              	***********************************/
 2032              	
 2033              	/***********************************
 2034              	    DIGIT?	( c base -- u t )
 2035              	 	Convert a character to its 
 2036              		numeric value. A flag 
 2037              		indicates success.
 2038              	**********************************/
 2039 3db4 943D0000 		_HEADER DIGTQ,6,"DIGIT?"
 2039      06444947 
 2039      49543F00 
 2040 3dc0 504700BF 		_NEST
 2041 3dc4 01300000 		_ADR	TOR
 2042 3dc8 F72E0000 		_DOLIT 	'0'
 2042      30000000 
 2043 3dd0 95310000 		_ADR	SUBB
 2044 3dd4 F72E0000 		_DOLIT 9
 2044      09000000 
 2045 3ddc C5300000 		_ADR	OVER
 2046 3de0 5D340000 		_ADR	LESS
 2047 3de4 372F0000 		_QBRAN	DGTQ1
 2047      0C3E0000 
 2048 3dec F72E0000 		_DOLIT 7
 2048      07000000 
 2049 3df4 95310000 		_ADR	SUBB
 2050 3df8 85300000 		_ADR	DUPP
 2051 3dfc F72E0000 		_DOLIT	10
 2051      0A000000 
ARM GAS  forth.s 			page 146


 2052 3e04 5D340000 		_ADR	LESS
 2053 3e08 19310000 		_ADR	ORR
 2054              	DGTQ1:
 2055 3e0c 85300000 		_ADR	DUPP
 2056 3e10 BD2F0000 		_ADR	RFROM
 2057 3e14 45340000 		_ADR	ULESS
 2058 3e18 D32C0000 		_UNNEST
 2059              	
 2060              	
 2061              	/*****************************************
 2062              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2063              	  convert unsigned double string 
 2064              	  to double integer adding to ud1 
 2065              	input:
 2066              		ud1  unsiged double 
 2067              		adr1  string address 
 2068              		u1    string length 
 2069              	outpout:
 2070              		ud2   modifield ud1 
 2071              		adr2  point to char not converted 
 2072              		u2    char left in string 
 2073              	**************************************/
 2074 3e1c B83D0000 		_HEADER TONBR,7,">NUMBER"
 2074      073E4E55 
 2074      4D424552 
 2075 3e28 504700BF 		_NEST 
 2076 3e2c 85300000 		_ADR DUPP 
 2077 3e30 372F0000 		_QBRAN 9f 
 2077      983E0000 
 2078 3e38 C5300000 	1: 	_ADR OVER  // d a u a 
 2079 3e3c B12F0000 		_ADR CAT   // d  a u c 
 2080 3e40 D5350000 		_ADR BASE   
 2081 3e44 912F0000 		_ADR AT      // d a u c base
 2082 3e48 C13D0000 		_ADR DIGTQ   // d a u n flag 
 2083 3e4c 372F0000 		_QBRAN 8f
 2083      943E0000 
 2084 3e54 01300000 		_ADR TOR   	 
 2085 3e58 F1310000 		_ADR ONEM 
 2086 3e5c A9300000 		_ADR DSWAP // a u d 
 2087 3e60 D5350000 		_ADR BASE 
 2088 3e64 912F0000 		_ADR AT 
 2089 3e68 DD380000 		_ADR DSTAR 
 2090 3e6c BD2F0000 		_ADR RFROM 
 2091 3e70 F72E0000 		_DOLIT 0    
 2091      00000000 
 2092 3e78 0D330000 		_ADR DPLUS 
 2093 3e7c A9300000 		_ADR DSWAP 
 2094 3e80 95300000 		_ADR SWAP 
 2095 3e84 E1310000 		_ADR ONEP
 2096 3e88 95300000 		_ADR SWAP  
 2097 3e8c 5F2F0000 		_BRAN 1b 
 2097      383E0000 
 2098 3e94 75300000 	8:  _ADR DROP
 2099 3e98 D32C0000 	9:	_UNNEST 
 2100              	
 2101              	
 2102              	/**************************
ARM GAS  forth.s 			page 147


 2103              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2104              	 check for charcter c 
 2105              	 move pointer if *a==c  
 2106              	**************************/
 2107              	CHARQ:
 2108 3e9c 7868     	    ldr T0,[DSP,#4]
 2109 3e9e 10F8011B 	    ldrb T1,[T0],#1 
 2110 3ea2 3246     	    mov T2,TOS 
 2111 3ea4 86EA0606 	    eor TOS,TOS
 2112 3ea8 9142     	    cmp T1,T2
 2113 3eaa 06D1     	    bne 1f 
 2114 3eac 7860     	    str T0,[DSP,#4]
 2115 3eae 3868     		ldr T0,[DSP]
 2116 3eb0 A0F10100 		sub T0,#1 
 2117 3eb4 3860     		str T0,[DSP]
 2118 3eb6 6FEA0606 	    mvn TOS,TOS  
 2119 3eba FEF707BF 	1:  _NEXT
 2120              	
 2121              	
 2122              	/*********************************
 2123              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2124              	   skip '-'|'+' return -1 if '-' 
 2125              	   else return 0 
 2126              	*********************************/
 2127              	NEGQ: 
 2128 3ebe 47F8046D 		_PUSH 
 2129 3ec2 86EA0606 		eor TOS,TOS // false flag 
 2130 3ec6 7868     		ldr T0,[DSP,#4]
 2131 3ec8 10F8011B 		ldrb T1,[T0],#1
 2132 3ecc 2D29     		cmp T1,#'-' 
 2133 3ece 02D0     		beq 1f
 2134 3ed0 2B29     		cmp T1,#'+'
 2135 3ed2 07D1     		bne 3f 
 2136 3ed4 01E0     		b 2f 
 2137 3ed6 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2138 3eda 7860     	2:	str T0,[DSP,#4]
 2139 3edc 3868     		ldr T0,[DSP]
 2140 3ede A0F10100 		sub T0,#1 
 2141 3ee2 3860     		str T0,[DSP]
 2142 3ee4 FEF7F2BE 	3:	_NEXT 
 2143              	
 2144              	
 2145              	
 2146              	/**********************************
 2147              	    INT?	( a -- n T | a F )
 2148              	 	parse string  at 'a' for 
 2149              		integer. Push a flag on TOS.
 2150              		integer form:
 2151              			[-]hex_digit+  | 
 2152              			$[-]hex_digit+ |
 2153              			%[-]bin_digit+ | 
 2154              			[-]dec_digit+ 
 2155              	**********************************/
 2156 3ee8 203E0000 		_HEADER INTQ,4,"INT?"
 2156      04494E54 
 2156      3F0000BF 
 2157 3ef4 504700BF 		_NEST
ARM GAS  forth.s 			page 148


 2158              	// save BASE 	
 2159 3ef8 D5350000 		_ADR	BASE
 2160 3efc 912F0000 		_ADR	AT
 2161 3f00 01300000 		_ADR	TOR
 2162 3f04 F72E0000 		_DOLIT	0      // a 0 
 2162      00000000 
 2163 3f0c C5300000 		_ADR	OVER   // a 0 a 
 2164 3f10 21350000 		_ADR	COUNT  // a 0 a+ cnt 
 2165 3f14 F72E0000 		_DOLIT  '$' 
 2165      24000000 
 2166 3f1c 9D3E0000 		_ADR    CHARQ 
 2167 3f20 372F0000 		_QBRAN  0f 
 2167      343F0000 
 2168              	// hexadecimal number 
 2169 3f28 593D0000 		_ADR    HEX
 2170 3f2c 5F2F0000 		_BRAN   2f 
 2170      4C3F0000 
 2171 3f34 F72E0000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2171      25000000 
 2172 3f3c 9D3E0000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2173 3f40 372F0000 		_QBRAN  2f
 2173      4C3F0000 
 2174 3f48 793D0000 		_ADR	BIN 
 2175              	2: // check if negative number 
 2176 3f4c BF3E0000 		_ADR    NEGQ 
 2177 3f50 01300000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2178 3f54 F72E0000 		_DOLIT  0
 2178      00000000 
 2179 3f5c 85300000 		_ADR	DUPP 
 2180 3f60 A9300000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2181 3f64 293E0000 		_ADR    TONBR // a 0 d a+ cnt 
 2182 3f68 372F0000 		_QBRAN  2f
 2182      843F0000 
 2183              	    // not an integer 
 2184 3f70 BD2F0000 		_ADR RFROM // a 0 d a sign  
 2185 3f74 D1320000 		_ADR DDROP 
 2186 3f78 D1320000 		_ADR DDROP 
 2187 3f7c 5F2F0000 		_BRAN 7f 
 2187      AC3F0000 
 2188              	2: // valid integer 
 2189 3f84 75300000 		_ADR	DROP // a 0 d
 2190 3f88 A9300000 		_ADR    DSWAP 
 2191 3f8c D1320000 		_ADR    DDROP 
 2192 3f90 75300000 		_ADR    DROP  // d>s 
 2193 3f94 BD2F0000 		_ADR    RFROM // n sign 
 2194 3f98 372F0000 		_QBRAN  2f
 2194      A43F0000 
 2195 3fa0 A5330000 		_ADR    NEGAT   
 2196 3fa4 F72E0000 	2:	_DOLIT  -1 
 2196      FFFFFFFF 
 2197              	7: // restore BASE 
 2198 3fac BD2F0000 		_ADR	RFROM
 2199 3fb0 D5350000 		_ADR	BASE
 2200 3fb4 7D2F0000 		_ADR	STORE
 2201 3fb8 D32C0000 		_UNNEST
 2202              	
 2203              	
ARM GAS  forth.s 			page 149


 2204              	/********************************
 2205              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2206              	    parse number, integer or float 
 2207              	    if not a number return ( a 0 ) 
 2208              	    if integer return ( int -1 ) 
 2209              	    if float return ( float -2 )
 2210              	**********************************/
 2211 3fbc EC3E0000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2211      074E554D 
 2211      4245523F 
 2212 3fc8 504700BF 	    _NEST 
 2213 3fcc F53E0000 	    _ADR INTQ
 2214 3fd0 95320000 	    _ADR QDUP 
 2215 3fd4 372F0000 	    _QBRAN 2f 
 2215      E03F0000 
 2216 3fdc D32C0000 	    _UNNEST 
 2217 3fe0 15260000 	2:  _ADR FLOATQ
 2218 3fe4 D32C0000 	    _UNNEST 
 2219              	
 2220              	
 2221              	/********************
 2222              	  console I/O
 2223              	********************/
 2224              	
 2225              	/**********************
 2226              	    SPACE	( -- )
 2227              	 	Send the blank 
 2228              		character to 
 2229              		the output device.
 2230              	************************/
 2231 3fe8 C03F0000 		_HEADER SPACE,5,"SPACE"
 2231      05535041 
 2231      434500BF 
 2232 3ff4 504700BF 		_NEST
 2233 3ff8 41320000 		_ADR	BLANK
 2234 3ffc 952D0000 		_ADR	EMIT
 2235 4000 D32C0000 		_UNNEST
 2236              	
 2237              	/***************************
 2238              	    SPACES	( +n -- )
 2239              	 	Send n spaces to the 
 2240              		output device.
 2241              	****************************/
 2242 4004 EC3F0000 		_HEADER SPACS,6,"SPACES"
 2242      06535041 
 2242      43455300 
 2243 4010 504700BF 		_NEST
 2244 4014 F72E0000 		_DOLIT	0
 2244      00000000 
 2245 401c A5340000 		_ADR	MAX
 2246 4020 01300000 		_ADR	TOR
 2247 4024 5F2F0000 		_BRAN	CHAR2
 2247      30400000 
 2248              	CHAR1:
 2249 402c F53F0000 		_ADR	SPACE
 2250              	CHAR2:
 2251 4030 192F0000 		_DONXT	CHAR1
ARM GAS  forth.s 			page 150


 2251      2C400000 
 2252 4038 D32C0000 		_UNNEST
 2253              	
 2254              	/***********************
 2255              	    TYPE	( b u -- )
 2256              	 	Output u characters 
 2257              		from b.
 2258              	************************/
 2259 403c 08400000 		_HEADER TYPEE,4,"TYPE"
 2259      04545950 
 2259      450000BF 
 2260 4048 504700BF 		_NEST
 2261 404c 01300000 		_ADR  TOR   // ( a+1 -- R: u )
 2262 4050 5F2F0000 		_BRAN	TYPE2
 2262      64400000 
 2263              	TYPE1:  
 2264 4058 21350000 		_ADR  COUNT
 2265 405c D1390000 		_ADR TCHAR
 2266 4060 952D0000 		_ADR EMIT
 2267              	TYPE2:  
 2268 4064 192F0000 		_DONXT	TYPE1
 2268      58400000 
 2269 406c 75300000 		_ADR	DROP
 2270 4070 D32C0000 		_UNNEST
 2271              	
 2272              	/***************************
 2273              	    CR	  ( -- )
 2274              	 	Output a carriage return
 2275              		and a line feed.
 2276              	****************************/
 2277 4074 40400000 		_HEADER CR,2,"CR"
 2277      02435200 
 2278 407c 504700BF 		_NEST
 2279 4080 F72E0000 		_DOLIT	CRR
 2279      0D000000 
 2280 4088 952D0000 		_ADR	EMIT
 2281 408c F72E0000 		_DOLIT	LF
 2281      0A000000 
 2282 4094 952D0000 		_ADR	EMIT
 2283 4098 D32C0000 		_UNNEST
 2284              	
 2285              	/******************************************
 2286              	  do_$	( -- a )
 2287              	  Return the address of a compiled string.
 2288              	  adjust return address to skip over it.
 2289              	hidden word used by compiler. 
 2290              	******************************************/
 2291              	DOSTR:
 2292 409c 504700BF 		_NEST     
 2293              	/* compiled string address is 2 levels deep */
 2294 40a0 BD2F0000 		_ADR	RFROM	// { -- a1 }
 2295 40a4 BD2F0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2296 40a8 85300000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2297 40ac 21350000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2298 40b0 85310000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2299 40b4 B5390000 		_ADR	ALGND	//  end of string
 2300              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
ARM GAS  forth.s 			page 151


 2301 40b8 01300000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2302 40bc 95300000 		_ADR	SWAP	//  count tugged
 2303 40c0 01300000 		_ADR	TOR     //  ( -- a2) is string address
 2304 40c4 D32C0000 		_UNNEST
 2305              	
 2306              	/******************************************
 2307              	    $"|	( -- a )
 2308              	 	Run time routine compiled by _". 
 2309              		Return address of a compiled string.
 2310              	hidden word used by compiler
 2311              	*****************************************/
 2312              	STRQP:
 2313 40c8 504700BF 		_NEST
 2314 40cc 9D400000 		_ADR	DOSTR
 2315 40d0 D32C0000 		_UNNEST			// force a call to dostr
 2316              	
 2317              	/*******************************
 2318              	    .$	( a -- )
 2319              	 	Run time routine of ." 
 2320              		Output a compiled string.
 2321              	hidden word used by compiler
 2322              	*******************************/
 2323              	DOTST:
 2324 40d4 504700BF 		_NEST
 2325 40d8 21350000 		_ADR	COUNT // ( -- a+1 c )
 2326 40dc 49400000 		_ADR	TYPEE
 2327 40e0 D32C0000 		_UNNEST
 2328              	
 2329              	/**********************
 2330              	    ."|	( -- )
 2331              	 	Run time routine of ." 
 2332              		Output a compiled string.
 2333              	hidden word used by compiler
 2334              	*****************************/
 2335              	DOTQP:
 2336 40e4 504700BF 		_NEST
 2337 40e8 9D400000 		_ADR	DOSTR
 2338 40ec D5400000 		_ADR	DOTST
 2339 40f0 D32C0000 		_UNNEST
 2340              	
 2341              	/*************************
 2342              		LPAD  ( n+ -- )
 2343              		emit n spaceS + 
 2344              		base character  
 2345              		16 -> $
 2346              		 2 -> %
 2347              		 other -> none 
 2348              	*************************/
 2349              	LPAD:
 2350 40f4 504700BF 		_NEST 
 2351 40f8 ED350000 		_ADR BCHR 
 2352 40fc 912F0000 		_ADR  AT 
 2353 4100 372F0000 		_QBRAN 3f 
 2353      6C410000 
 2354 4108 D5350000 		_ADR BASE 
 2355 410c 912F0000 		_ADR AT 
 2356 4110 85300000 		_ADR DUPP 
ARM GAS  forth.s 			page 152


 2357 4114 F72E0000 		_DOLIT 16
 2357      10000000 
 2358 411c 0D340000 		_ADR EQUAL 
 2359 4120 372F0000 		_QBRAN 1f
 2359      48410000 
 2360 4128 75300000 		_ADR DROP 
 2361 412c F72E0000 		_DOLIT '$'
 2361      24000000 
 2362 4134 95300000 	0:	_ADR  SWAP 
 2363 4138 F1310000 		_ADR  ONEM 
 2364 413c 11400000 		_ADR  SPACS 
 2365 4140 952D0000 		_ADR  EMIT 
 2366 4144 D32C0000 		_UNNEST 
 2367 4148 F72E0000 	1:  _DOLIT 2 
 2367      02000000 
 2368 4150 0D340000 		_ADR EQUAL 
 2369 4154 372F0000 		_QBRAN 3f
 2369      6C410000 
 2370 415c F72E0000 		_DOLIT '%'
 2370      25000000 
 2371 4164 5F2F0000 		_BRAN 0b   	
 2371      34410000 
 2372 416c 11400000 	3:	_ADR  SPACS 
 2373 4170 D32C0000 		_UNNEST 
 2374              	
 2375              	
 2376              	/******************************
 2377              	    .R	  ( n +n -- )
 2378              	 	Display an integer in a 
 2379              		field of n columns, 
 2380              		right justified.
 2381              	*******************************/
 2382 4174 78400000 		_HEADER DOTR,2,".R"
 2382      022E5200 
 2383 417c 504700BF 		_NEST
 2384 4180 01300000 		_ADR	TOR
 2385 4184 F5370000 		_ADR    STOD 
 2386 4188 65420000 		_ADR	DTOA 
 2387 418c BD2F0000 		_ADR	RFROM
 2388 4190 C5300000 		_ADR	OVER
 2389 4194 95310000 		_ADR	SUBB
 2390 4198 F5400000 		_ADR    LPAD  
 2391 419c 49400000 		_ADR	TYPEE
 2392 41a0 D32C0000 		_UNNEST
 2393              	
 2394              	
 2395              	/*************************
 2396              	    U.R	 ( u +n -- )
 2397              	 	Display an unsigned 
 2398              		integer in n column, 
 2399              		right justified.
 2400              	***************************/
 2401 41a4 78410000 		_HEADER UDOTR,3,"U.R"
 2401      03552E52 
 2402 41ac 504700BF 		_NEST
 2403 41b0 01300000 		_ADR    TOR 
 2404 41b4 F72E0000 		_DOLIT  0
ARM GAS  forth.s 			page 153


 2404      00000000 
 2405 41bc 65420000 		_ADR    DTOA 
 2406 41c0 BD2F0000 		_ADR	RFROM
 2407 41c4 C5300000 		_ADR	OVER
 2408 41c8 95310000 		_ADR	SUBB
 2409 41cc F5400000 		_ADR    LPAD  
 2410 41d0 49400000 		_ADR	TYPEE
 2411 41d4 D32C0000 		_UNNEST
 2412              	
 2413              	
 2414              	/************************
 2415              	    U.	  ( u -- )
 2416              	 	Display an unsigned 
 2417              		integer in free format.
 2418              	***************************/
 2419 41d8 A8410000 		_HEADER UDOT,2,"U."
 2419      02552E00 
 2420 41e0 504700BF 		_NEST
 2421 41e4 F72E0000 		_DOLIT  0 
 2421      00000000 
 2422 41ec 3D3C0000 		_ADR	BDIGS
 2423 41f0 A93C0000 		_ADR	DIGS
 2424 41f4 053D0000 		_ADR	EDIGS
 2425 41f8 F72E0000 		_DOLIT  1 
 2425      01000000 
 2426 4200 F5400000 		_ADR	LPAD  
 2427 4204 49400000 		_ADR	TYPEE
 2428 4208 D32C0000 		_UNNEST
 2429              	
 2430              	
 2431              	/************************
 2432              	    .	   ( w -- )
 2433              	 	Display an integer 
 2434              		in free format, 
 2435              		preceeded by a space.
 2436              	**************************/
 2437 420c DC410000 		_HEADER DOT,1,"."
 2437      012E00BF 
 2438 4214 504700BF 		_NEST
 2439 4218 F53F0000 		_ADR    SPACE 
 2440 421c D5350000 		_ADR	BASE
 2441 4220 912F0000 		_ADR	AT
 2442 4224 F72E0000 	1:	_DOLIT  10
 2442      0A000000 
 2443 422c 2D310000 		_ADR	XORR	// decimal base?
 2444 4230 372F0000 		_QBRAN	DOT1
 2444      40420000 
 2445 4238 E1410000 		_ADR	UDOT    // no,display unsigned
 2446 423c D32C0000 		_UNNEST			
 2447              	DOT1:
 2448 4240 F5370000 		_ADR    STOD 
 2449 4244 65420000 	    _ADR	DTOA
 2450 4248 F72E0000 		_DOLIT  1 
 2450      01000000 
 2451 4250 F5400000 		_ADR	LPAD  
 2452 4254 49400000 	1:	_ADR	TYPEE
 2453 4258 D32C0000 		_UNNEST			// yes, display signed
ARM GAS  forth.s 			page 154


 2454              	
 2455              	
 2456              	/*************************
 2457              	  D>A ( d -- p u )
 2458              	  convert double integer to 
 2459              	  ASCII string in pad  
 2460              	input:
 2461              		d    int64 to convert 
 2462              	output:
 2463              		p     pointer to string  
 2464              		u     string length 
 2465              	**************************/
 2466 425c 10420000 		_HEADER DTOA,3,"D>A" 
 2466      03443E41 
 2467 4264 504700BF 		_NEST
 2468 4268 85300000 	    _ADR DUPP 
 2469 426c 01300000 		_ADR TOR 
 2470 4270 2D330000 		_ADR DABS 
 2471 4274 3D3C0000 		_ADR BDIGS
 2472 4278 A93C0000 		_ADR DIGS 
 2473 427c BD2F0000 		_ADR RFROM 
 2474 4280 DD3C0000 		_ADR SIGN  
 2475 4284 053D0000 		_ADR EDIGS 
 2476 4288 D32C0000 		_UNNEST 
 2477              	
 2478              	
 2479              	/*************************
 2480              	   D. ( d -- )
 2481              	   display double integer 
 2482              	**************************/
 2483 428c 60420000 		_HEADER DDOT,2,"D."
 2483      02442E00 
 2484 4294 504700BF 		_NEST
 2485 4298 F53F0000 		_ADR SPACE 
 2486 429c 65420000 		_ADR DTOA 
 2487 42a0 F72E0000 		_DOLIT 1
 2487      01000000 
 2488 42a8 F5400000 		_ADR LPAD 
 2489 42ac 49400000 		_ADR TYPEE
 2490 42b0 D32C0000 		_UNNEST 
 2491              	
 2492              	
 2493              	
 2494              	/***********************
 2495              		H. ( w -- )
 2496              		display integer 
 2497              		in hexadecimal 
 2498              	*********************/
 2499 42b4 90420000 		_HEADER HDOT,2,"H."
 2499      02482E00 
 2500 42bc 504700BF 		_NEST 
 2501 42c0 D5350000 		_ADR BASE
 2502 42c4 912F0000 		_ADR AT 
 2503 42c8 95300000 		_ADR SWAP
 2504 42cc 593D0000 		_ADR HEX
 2505 42d0 F72E0000 		_DOLIT 0 
 2505      00000000 
ARM GAS  forth.s 			page 155


 2506 42d8 3D3C0000 		_ADR BDIGS
 2507 42dc A93C0000 		_ADR DIGS
 2508 42e0 053D0000 		_ADR EDIGS
 2509 42e4 F53F0000 		_ADR SPACE
 2510 42e8 F72E0000 		_DOLIT '$'
 2510      24000000 
 2511 42f0 952D0000 		_ADR EMIT 
 2512 42f4 49400000 		_ADR TYPEE
 2513 42f8 D5350000 		_ADR BASE
 2514 42fc 7D2F0000 		_ADR STORE  
 2515 4300 D32C0000 		_UNNEST 
 2516              	
 2517              	
 2518              	/***********************
 2519              	    ?	   ( a -- )
 2520              	 	Display the contents
 2521              		in a memory cell.
 2522              	*************************/
 2523 4304 B8420000 		_HEADER QUEST,1,"?"
 2523      013F00BF 
 2524 430c 504700BF 		_NEST
 2525 4310 912F0000 		_ADR	AT
 2526 4314 15420000 		_ADR	DOT
 2527 4318 D32C0000 		_UNNEST
 2528              	
 2529              	/**************
 2530              	  Parsing
 2531              	***************/
 2532              	
 2533              	/*********************************************
 2534              	    parse	( b u c -- b u delta //  string> )
 2535              	 	Scan word delimited by c. 
 2536              		Return found string and its offset.
 2537              	hidden word used by PARSE
 2538              	**********************************************/
 2539              	PARS:
 2540 431c 504700BF 		_NEST
 2541 4320 F9350000 		_ADR	TEMP
 2542 4324 7D2F0000 		_ADR	STORE
 2543 4328 C5300000 		_ADR	OVER
 2544 432c 01300000 		_ADR	TOR
 2545 4330 85300000 		_ADR	DUPP
 2546 4334 372F0000 		_QBRAN	PARS8
 2546      30440000 
 2547 433c F1310000 		_ADR	ONEM
 2548 4340 F9350000 		_ADR	TEMP
 2549 4344 912F0000 		_ADR	AT
 2550 4348 41320000 		_ADR	BLANK
 2551 434c 0D340000 		_ADR	EQUAL
 2552 4350 372F0000 		_QBRAN	PARS3
 2552      A4430000 
 2553 4358 01300000 		_ADR	TOR
 2554              	PARS1:
 2555 435c 41320000 		_ADR	BLANK
 2556 4360 C5300000 		_ADR	OVER
 2557 4364 B12F0000 		_ADR	CAT	 // skip leading blanks 
 2558 4368 95310000 		_ADR	SUBB
ARM GAS  forth.s 			page 156


 2559 436c F5300000 		_ADR	ZLESS
 2560 4370 91330000 		_ADR	INVER
 2561 4374 372F0000 		_QBRAN	PARS2
 2561      A0430000 
 2562 437c E1310000 		_ADR	ONEP
 2563 4380 192F0000 		_DONXT	PARS1
 2563      5C430000 
 2564 4388 BD2F0000 		_ADR	RFROM
 2565 438c 75300000 		_ADR	DROP
 2566 4390 F72E0000 		_DOLIT	0
 2566      00000000 
 2567 4398 85300000 		_ADR	DUPP
 2568 439c D32C0000 		_UNNEST
 2569              	PARS2:
 2570 43a0 BD2F0000 		_ADR	RFROM
 2571              	PARS3:
 2572 43a4 C5300000 		_ADR	OVER
 2573 43a8 95300000 		_ADR	SWAP
 2574 43ac 01300000 		_ADR	TOR
 2575              	PARS4:
 2576 43b0 F9350000 		_ADR	TEMP
 2577 43b4 912F0000 		_ADR	AT
 2578 43b8 C5300000 		_ADR	OVER
 2579 43bc B12F0000 		_ADR	CAT
 2580 43c0 95310000 		_ADR	SUBB // scan for delimiter
 2581 43c4 F9350000 		_ADR	TEMP
 2582 43c8 912F0000 		_ADR	AT
 2583 43cc 41320000 		_ADR	BLANK
 2584 43d0 0D340000 		_ADR	EQUAL
 2585 43d4 372F0000 		_QBRAN	PARS5
 2585      E0430000 
 2586 43dc F5300000 		_ADR	ZLESS
 2587              	PARS5:
 2588 43e0 372F0000 		_QBRAN	PARS6
 2588      04440000 
 2589 43e8 E1310000 		_ADR	ONEP
 2590 43ec 192F0000 		_DONXT	PARS4
 2590      B0430000 
 2591 43f4 85300000 		_ADR	DUPP
 2592 43f8 01300000 		_ADR	TOR
 2593 43fc 5F2F0000 		_BRAN	PARS7
 2593      18440000 
 2594              	PARS6:
 2595 4404 BD2F0000 		_ADR	RFROM
 2596 4408 75300000 		_ADR	DROP
 2597 440c 85300000 		_ADR	DUPP
 2598 4410 E1310000 		_ADR	ONEP
 2599 4414 01300000 		_ADR	TOR
 2600              	PARS7:
 2601 4418 C5300000 		_ADR	OVER
 2602 441c 95310000 		_ADR	SUBB
 2603 4420 BD2F0000 		_ADR	RFROM
 2604 4424 BD2F0000 		_ADR	RFROM
 2605 4428 95310000 		_ADR	SUBB
 2606 442c D32C0000 		_UNNEST
 2607              	PARS8:
 2608 4430 C5300000 		_ADR	OVER
ARM GAS  forth.s 			page 157


 2609 4434 BD2F0000 		_ADR	RFROM
 2610 4438 95310000 		_ADR	SUBB
 2611 443c D32C0000 		_UNNEST
 2612              	
 2613              	/************************************
 2614              	    PARSE	( c -- b u //  string> )
 2615              	 	Scan input stream and return 
 2616              		counted string delimited by c.
 2617              	************************************/
 2618 4440 08430000 		_HEADER PARSE,5,"PARSE"
 2618      05504152 
 2618      534500BF 
 2619 444c 504700BF 		_NEST
 2620 4450 01300000 		_ADR	TOR
 2621 4454 AD3A0000 		_ADR	TIB
 2622 4458 25360000 		_ADR	INN
 2623 445c 912F0000 		_ADR	AT
 2624 4460 85310000 		_ADR	PLUS			// current input buffer pointer
 2625 4464 3D360000 		_ADR	NTIB
 2626 4468 912F0000 		_ADR	AT
 2627 446c 25360000 		_ADR	INN
 2628 4470 912F0000 		_ADR	AT
 2629 4474 95310000 		_ADR	SUBB			// remaining count
 2630 4478 BD2F0000 		_ADR	RFROM
 2631 447c 1D430000 		_ADR	PARS
 2632 4480 25360000 		_ADR	INN
 2633 4484 CD340000 		_ADR	PSTOR
 2634 4488 D32C0000 		_UNNEST
 2635              	
 2636              	/*******************************
 2637              	    .(	  ( -- )
 2638              	 	Output following string 
 2639              		up to next ) .
 2640              	******************************/
 2641 448c 44440000 		_HEADER DOTPR,2,".("
 2641      022E2800 
 2642 4494 504700BF 		_NEST
 2643 4498 F72E0000 		_DOLIT	')'
 2643      29000000 
 2644 44a0 4D440000 		_ADR	PARSE
 2645 44a4 49400000 		_ADR	TYPEE
 2646 44a8 D32C0000 		_UNNEST
 2647              	
 2648              	/************************
 2649              	    (	   ( -- )
 2650              	 	Ignore following 
 2651              		string up to next )
 2652              		A comment.
 2653              	************************/
 2654 44ac 90440000 		_HEADER PAREN,IMEDD+1,"("
 2654      812800BF 
 2655 44b4 504700BF 		_NEST
 2656 44b8 F72E0000 		_DOLIT	')'
 2656      29000000 
 2657 44c0 4D440000 		_ADR	PARSE
 2658 44c4 D1320000 		_ADR	DDROP
 2659 44c8 D32C0000 		_UNNEST
ARM GAS  forth.s 			page 158


 2660              	
 2661              	/*******************
 2662              	    \	   ( -- )
 2663              	 	Ignore following 
 2664              		text till the 
 2665              		end of line.
 2666              	********************/
 2667 44cc B0440000 		_HEADER BKSLA,IMEDD+1,"\\"
 2667      815C00BF 
 2668 44d4 504700BF 		_NEST
 2669 44d8 3D360000 		_ADR	NTIB
 2670 44dc 912F0000 		_ADR	AT
 2671 44e0 25360000 		_ADR	INN
 2672 44e4 7D2F0000 		_ADR	STORE
 2673 44e8 D32C0000 		_UNNEST
 2674              	
 2675              	/******************************
 2676              	    CHAR	( -- c )
 2677              	 	Parse next word and
 2678              		return its first character.
 2679              	*******************************/
 2680 44ec D0440000 		_HEADER CHAR,4,"CHAR"
 2680      04434841 
 2680      520000BF 
 2681 44f8 504700BF 		_NEST
 2682 44fc 41320000 		_ADR	BLANK
 2683 4500 4D440000 		_ADR	PARSE
 2684 4504 75300000 		_ADR	DROP
 2685 4508 B12F0000 		_ADR	CAT
 2686 450c D32C0000 		_UNNEST
 2687              	
 2688              	/**********************************
 2689              		[CHAR] ( -- c )
 2690              		immediate version of CHAR 
 2691              	**********************************/
 2692 4510 F0440000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2692      C65B4348 
 2692      41525D00 
 2693 451c 504700BF 		_NEST 
 2694 4520 F9440000 		_ADR CHAR
 2695 4524 454C0000 		_ADR LITER 
 2696 4528 D32C0000 		_UNNEST 
 2697              	
 2698              	/**********************************
 2699              	    WORD	( c -- a //  string> )
 2700              	 	Parse a word from input stream
 2701              		and copy it to code dictionary.
 2702              	***********************************/
 2703 452c 14450000 		_HEADER WORDD,4,"WORD"
 2703      04574F52 
 2703      440000BF 
 2704 4538 504700BF 		_NEST
 2705 453c 4D440000 		_ADR	PARSE
 2706 4540 753A0000 		_ADR	HERE
 2707 4544 21320000 		_ADR	CELLP
 2708 4548 7D3B0000 		_ADR	PACKS
 2709 454c D32C0000 		_UNNEST
ARM GAS  forth.s 			page 159


 2710              	
 2711              	/********************************
 2712              	    TOKEN	( -- a //  string> )
 2713              	 	Parse a word from input 
 2714              		stream and copy it to 
 2715              		name dictionary.
 2716              	*********************************/
 2717 4550 30450000 		_HEADER TOKEN,5,"TOKEN"
 2717      05544F4B 
 2717      454E00BF 
 2718 455c 504700BF 		_NEST
 2719 4560 41320000 		_ADR	BLANK
 2720 4564 39450000 		_ADR	WORDD
 2721 4568 51470000 		_ADR	UPPER 
 2722 456c D32C0000 		_UNNEST
 2723              	
 2724              	/**********************
 2725              	  Dictionary search
 2726              	***********************/
 2727              	
 2728              	/*************************
 2729              	    NAME>	( na -- ca )
 2730              	 	Return a code address
 2731              		given a name address.
 2732              	**************************/
 2733 4570 54450000 		_HEADER NAMET,5,"NAME>"
 2733      054E414D 
 2733      453E00BF 
 2734 457c 504700BF 		_NEST
 2735 4580 21350000 		_ADR	COUNT
 2736 4584 F72E0000 		_DOLIT	0x1F
 2736      1F000000 
 2737 458c 05310000 		_ADR	ANDD
 2738 4590 85310000 		_ADR	PLUS
 2739 4594 B5390000 		_ADR	ALGND
 2740 4598 D32C0000 		_UNNEST
 2741              	
 2742              	/***************************************
 2743              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2744              	 	Compare u bytes in two strings. 
 2745              		Return 0 if identical.
 2746              	
 2747              	  Picatout 2020-12-01, 
 2748              	    Because of problem with .align 
 2749              		directive that doesn't fill 
 2750              		with zero's I had to change 
 2751              		the "SAME?" and "FIND" 
 2752              	 	words  to do a byte by byte comparison. 
 2753              	****************************************/
 2754 459c 74450000 		_HEADER SAMEQ,5,"SAME?"
 2754      0553414D 
 2754      453F00BF 
 2755 45a8 504700BF 		_NEST
 2756 45ac 01300000 		_ADR	TOR
 2757 45b0 5F2F0000 		_BRAN	SAME2
 2757      F4450000 
 2758              	SAME1:
ARM GAS  forth.s 			page 160


 2759 45b8 C5300000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2760 45bc ED2F0000 		_ADR	RAT   // a1 a2 a1 u 
 2761 45c0 85310000 		_ADR	PLUS  // a1 a2 a1+u 
 2762 45c4 B12F0000 		_ADR	CAT	   // a1 a2 c1    		
 2763 45c8 C5300000 		_ADR	OVER  // a1 a2 c1 a2 
 2764 45cc ED2F0000 		_ADR	RAT    
 2765 45d0 85310000 		_ADR	PLUS    
 2766 45d4 B12F0000 		_ADR	CAT	  // a1 a2 c1 c2
 2767 45d8 95310000 		_ADR	SUBB  
 2768 45dc 95320000 		_ADR	QDUP
 2769 45e0 372F0000 		_QBRAN	SAME2
 2769      F4450000 
 2770 45e8 BD2F0000 		_ADR	RFROM
 2771 45ec 75300000 		_ADR	DROP
 2772 45f0 D32C0000 		_UNNEST	// strings not equal
 2773              	SAME2:
 2774 45f4 192F0000 		_DONXT	SAME1
 2774      B8450000 
 2775 45fc F72E0000 		_DOLIT	0
 2775      00000000 
 2776 4604 D32C0000 		_UNNEST	// strings equal
 2777              	
 2778              	/***********************************
 2779              	    FIND	( a na -- ca na | a F )
 2780              	 	Search a vocabulary for a string.
 2781              		Return ca and na if succeeded.
 2782              	hidden word used by NAME?
 2783              	
 2784              	  Picatout 2020-12-01,  
 2785              		 Modified from original. 
 2786              	   See comment for word "SAME?" 
 2787              	************************************/
 2788              	FIND:
 2789 4608 504700BF 		_NEST
 2790 460c 95300000 		_ADR	SWAP			// na a	
 2791 4610 21350000 		_ADR	COUNT			// na a+1 count
 2792 4614 85300000 		_ADR	DUPP 
 2793 4618 F9350000 		_ADR	TEMP
 2794 461c 7D2F0000 		_ADR	STORE			// na a+1 count 
 2795 4620 01300000 		_ADR  TOR		// na a+1  R: count  
 2796 4624 95300000 		_ADR	SWAP			// a+1 na
 2797              	FIND1:
 2798 4628 85300000 		_ADR	DUPP			// a+1 na na
 2799 462c 372F0000 		_QBRAN	FIND6	// end of vocabulary
 2799      80460000 
 2800 4634 85300000 		_ADR	DUPP			// a+1 na na
 2801 4638 B12F0000 		_ADR	CAT			// a+1 na name1
 2802 463c F72E0000 		_DOLIT	MASKK
 2802      1FFFFFFF 
 2803 4644 05310000 		_ADR	ANDD
 2804 4648 ED2F0000 		_ADR	RAT			// a+1 na name1 count 
 2805 464c 2D310000 		_ADR	XORR			// a+1 na,  same length?
 2806 4650 372F0000 		_QBRAN	FIND2
 2806      68460000 
 2807 4658 31320000 		_ADR	CELLM			// a+1 la
 2808 465c 912F0000 		_ADR	AT			// a+1 next_na
 2809 4660 5F2F0000 		_BRAN	FIND1			// try next word
ARM GAS  forth.s 			page 161


 2809      28460000 
 2810              	FIND2:   
 2811 4668 E1310000 		_ADR	ONEP			// a+1 na+1
 2812 466c F9350000 		_ADR	TEMP
 2813 4670 912F0000 		_ADR	AT			// a+1 na+1 count
 2814 4674 A9450000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2815              	FIND3:	
 2816 4678 5F2F0000 		_BRAN	FIND4
 2816      98460000 
 2817              	FIND6:	
 2818 4680 BD2F0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2819 4684 75300000 		_ADR	DROP			// a+1 0
 2820 4688 95300000 		_ADR	SWAP			// 0 a+1
 2821 468c F1310000 		_ADR	ONEM			// 0 a
 2822 4690 95300000 		_ADR	SWAP			// a 0 
 2823 4694 D32C0000 		_UNNEST			// return without a match
 2824              	FIND4:	
 2825 4698 372F0000 		_QBRAN	FIND5			// a+1 na+1
 2825      B4460000 
 2826 46a0 F1310000 		_ADR	ONEM			// a+1 na
 2827 46a4 31320000 		_ADR	CELLM			// a+4 la
 2828 46a8 912F0000 		_ADR	AT			// a+1 next_na
 2829 46ac 5F2F0000 		_BRAN	FIND1			// compare next name
 2829      28460000 
 2830              	FIND5:	
 2831 46b4 BD2F0000 		_ADR	RFROM			// a+1 na+1 count
 2832 46b8 75300000 		_ADR	DROP			// a+1 na+1
 2833 46bc 95300000 		_ADR	SWAP			// na+1 a+1
 2834 46c0 75300000 		_ADR	DROP			// na+1
 2835 46c4 F1310000 		_ADR	ONEM			// na
 2836 46c8 85300000 		_ADR	DUPP			// na na
 2837 46cc 7D450000 		_ADR	NAMET			// na ca
 2838 46d0 95300000 		_ADR	SWAP			// ca na
 2839 46d4 D32C0000 		_UNNEST			//  return with a match
 2840              	
 2841              	/********************************
 2842              	    NAME?	( a -- ca na | a F )
 2843              	 	Search all context vocabularies 
 2844              		for a string.
 2845              	***********************************/
 2846 46d8 A0450000 		_HEADER NAMEQ,5,"NAME?"
 2846      054E414D 
 2846      453F00BF 
 2847 46e4 504700BF 		_NEST
 2848 46e8 81360000 		_ADR	CNTXT
 2849 46ec 912F0000 		_ADR	AT
 2850 46f0 09460000 		_ADR	FIND
 2851 46f4 D32C0000 		_UNNEST
 2852              	
 2853              	/********************
 2854              	  console input
 2855              	********************/
 2856              	
 2857              	/****************************
 2858              		ASCIZ ( a -- a+ )
 2859              		convert counted string to 
 2860              		null terminated string 
ARM GAS  forth.s 			page 162


 2861              		in pad.
 2862              	*****************************/
 2863 46f8 DC460000 		_HEADER ASCIZ,5,"ASCIZ" 
 2863      05415343 
 2863      495A00BF 
 2864 4704 504700BF 		_NEST 
 2865 4708 21350000 		_ADR COUNT
 2866 470c 85300000 		_ADR DUPP
 2867 4710 01300000 		_ADR TOR 
 2868 4714 8D3A0000 		_ADR PAD 
 2869 4718 95300000 		_ADR SWAP
 2870 471c 153B0000 		_ADR MOVE  
 2871 4720 8D3A0000 		_ADR PAD 
 2872 4724 BD2F0000 		_ADR RFROM
 2873 4728 85310000 		_ADR PLUS 
 2874 472c F72E0000 		_DOLIT 0 
 2874      00000000 
 2875 4734 95300000 		_ADR SWAP  
 2876 4738 9D2F0000 		_ADR CSTOR
 2877 473c 8D3A0000 		_ADR PAD   
 2878 4740 D32C0000 		_UNNEST 
 2879              	
 2880              	/***********************
 2881              		UPPER (cstring -- cstring )
 2882              		convert to upper case in situ
 2883              	*******************************/
 2884 4744 FC460000 		_HEADER UPPER,5,"UPPER"
 2884      05555050 
 2884      455200BF 
 2885 4750 504700BF 		_NEST 
 2886 4754 85300000 		_ADR DUPP 
 2887 4758 01300000 		_ADR TOR 
 2888 475c 21350000 		_ADR COUNT
 2889 4760 F72E0000 		_DOLIT 0x1f
 2889      1F000000 
 2890 4768 05310000 		_ADR ANDD
 2891 476c 01300000 		_ADR TOR 
 2892 4770 5F2F0000 		_BRAN 3f
 2892      C4470000 
 2893 4778 85300000 	1:  _ADR DUPP 
 2894 477c 21350000 		_ADR COUNT 
 2895 4780 85300000 		_ADR DUPP 
 2896 4784 F72E0000 		_DOLIT 'a'-1
 2896      60000000 
 2897 478c 8D340000 		_ADR GREAT
 2898 4790 372F0000 		_QBRAN 2f 
 2898      BC470000 
 2899 4798 85300000 		_ADR DUPP 
 2900 479c F72E0000 		_DOLIT 'z'+1 
 2900      7B000000 
 2901 47a4 5D340000 		_ADR LESS 
 2902 47a8 372F0000 		_QBRAN 2f 
 2902      BC470000 
 2903 47b0 F72E0000 		_DOLIT 0x5f  
 2903      5F000000 
 2904 47b8 05310000 		_ADR ANDD
 2905 47bc A9320000 	2:	_ADR ROT
ARM GAS  forth.s 			page 163


 2906 47c0 9D2F0000 		_ADR CSTOR
 2907 47c4 192F0000 	3:  _DONXT 1b
 2907      78470000 
 2908 47cc 75300000 		_ADR DROP 
 2909 47d0 BD2F0000 		_ADR RFROM
 2910 47d4 D32C0000 		_UNNEST 
 2911              	
 2912              	/**************************************
 2913              	   BKSP  ( bot eot cur -- bot eot cur )
 2914              	   Move cursor left by one character.
 2915              	hidden word used by KTAP
 2916              	***************************************/
 2917              	BKSP:
 2918 47d8 504700BF 		_NEST
 2919 47dc 01300000 		_ADR	TOR
 2920 47e0 C5300000 		_ADR	OVER
 2921 47e4 BD2F0000 		_ADR	RFROM
 2922 47e8 95300000 		_ADR	SWAP
 2923 47ec C5300000 		_ADR	OVER
 2924 47f0 2D310000 		_ADR	XORR
 2925 47f4 372F0000 		_QBRAN	BACK1
 2925      20480000 
 2926 47fc F72E0000 		_DOLIT	BKSPP
 2926      08000000 
 2927 4804 952D0000 		_ADR	EMIT
 2928 4808 F1310000 		_ADR	ONEM
 2929 480c 41320000 		_ADR	BLANK
 2930 4810 952D0000 		_ADR	EMIT
 2931 4814 F72E0000 		_DOLIT	BKSPP
 2931      08000000 
 2932 481c 952D0000 		_ADR	EMIT
 2933              	BACK1:
 2934 4820 D32C0000 		  _UNNEST
 2935              	
 2936              	/****************************************
 2937              	   TAP	 ( bot eot cur c -- bot eot cur )
 2938              	   Accept and echo the key stroke 
 2939              	   and bump the cursor.
 2940              	hidden word used by KTAP 
 2941              	****************************************/
 2942              	TAP:
 2943 4824 504700BF 		_NEST
 2944 4828 85300000 		_ADR	DUPP
 2945 482c 952D0000 		_ADR	EMIT
 2946 4830 C5300000 		_ADR	OVER
 2947 4834 9D2F0000 		_ADR	CSTOR
 2948 4838 E1310000 		_ADR	ONEP
 2949 483c D32C0000 		_UNNEST
 2950              	
 2951              	
 2952              	/*******************************************
 2953              	    kTAP	( bot eot cur c -- bot eot cur )
 2954              	 	Process a key stroke, CR or backspace.
 2955              	hidden word used by ACCEPT 
 2956              	*******************************************/
 2957              	KTAP:
 2958              	TTAP:
ARM GAS  forth.s 			page 164


 2959 4840 504700BF 		_NEST
 2960 4844 85300000 		_ADR	DUPP
 2961 4848 F72E0000 		_DOLIT	CRR
 2961      0D000000 
 2962 4850 2D310000 		_ADR	XORR
 2963 4854 372F0000 		_QBRAN  KTAP2
 2963      84480000 
 2964 485c F72E0000 		_DOLIT	BKSPP
 2964      08000000 
 2965 4864 2D310000 		_ADR	XORR
 2966 4868 372F0000 		_QBRAN	KTAP1
 2966      7C480000 
 2967 4870 41320000 		_ADR	BLANK
 2968 4874 25480000 		_ADR	TAP
 2969 4878 D32C0000 		_UNNEST
 2970              	//	.word	0			// patch
 2971              	KTAP1:
 2972 487c D9470000 		_ADR	BKSP
 2973 4880 D32C0000 		_UNNEST
 2974              	KTAP2:
 2975 4884 75300000 		_ADR	DROP
 2976 4888 95300000 		_ADR	SWAP
 2977 488c 75300000 		_ADR	DROP
 2978 4890 85300000 		_ADR	DUPP
 2979 4894 D32C0000 		_UNNEST
 2980              	
 2981              	/************************************
 2982              	    ACCEPT	( b u -- b u )
 2983              	 	Accept characters to input 
 2984              		buffer. Return with actual count.
 2985              	*************************************/
 2986 4898 48470000 		_HEADER ACCEP,6,"ACCEPT"
 2986      06414343 
 2986      45505400 
 2987 48a4 504700BF 		_NEST
 2988 48a8 C5300000 		_ADR	OVER
 2989 48ac 85310000 		_ADR	PLUS
 2990 48b0 C5300000 		_ADR	OVER
 2991              	ACCP1:
 2992 48b4 F9320000 		_ADR	DDUP
 2993 48b8 2D310000 		_ADR	XORR
 2994 48bc 372F0000 		_QBRAN	ACCP4
 2994      FC480000 
 2995 48c4 712D0000 		_ADR	KEY
 2996 48c8 85300000 		_ADR	DUPP
 2997 48cc 41320000 		_ADR	BLANK
 2998 48d0 F72E0000 		_DOLIT 127
 2998      7F000000 
 2999 48d8 19370000 		_ADR	WITHI
 3000 48dc 372F0000 		_QBRAN	ACCP2
 3000      F0480000 
 3001 48e4 25480000 		_ADR	TAP
 3002 48e8 5F2F0000 		_BRAN	ACCP3
 3002      F4480000 
 3003              	ACCP2:
 3004 48f0 41480000 		_ADR	KTAP
 3005              	ACCP3:	  
ARM GAS  forth.s 			page 165


 3006 48f4 5F2F0000 		_BRAN	ACCP1
 3006      B4480000 
 3007              	ACCP4:
 3008 48fc 75300000 		_ADR	DROP
 3009 4900 C5300000 		_ADR	OVER
 3010 4904 95310000 		_ADR	SUBB
 3011 4908 D32C0000 		_UNNEST
 3012              	
 3013              	/*****************************
 3014              	    QUERY	( -- )
 3015              	 	Accept input stream 
 3016              		to terminal input buffer.
 3017              	******************************/
 3018 490c 9C480000 		_HEADER QUERY,5,"QUERY"
 3018      05515545 
 3018      525900BF 
 3019 4918 504700BF 		_NEST
 3020 491c AD3A0000 		_ADR	TIB
 3021 4920 F72E0000 		_DOLIT 80
 3021      50000000 
 3022 4928 A5480000 		_ADR	ACCEP
 3023 492c 3D360000 		_ADR	NTIB
 3024 4930 7D2F0000 		_ADR	STORE
 3025 4934 75300000 		_ADR	DROP
 3026 4938 F72E0000 		_DOLIT	0
 3026      00000000 
 3027 4940 25360000 		_ADR	INN
 3028 4944 7D2F0000 		_ADR	STORE
 3029 4948 D32C0000 		_UNNEST
 3030              	
 3031              	/********************
 3032              	  Error handling
 3033              	********************/
 3034              	
 3035              	/*********************
 3036              	    ABORT	( a -- )
 3037              	 	Reset data stack 
 3038              		and jump to QUIT.
 3039              	**********************/
 3040 494c 10490000 		_HEADER ABORT,5,"ABORT"
 3040      0541424F 
 3040      525400BF 
 3041 4958 504700BF 		_NEST
 3042              	ABORT1:
 3043 495c F53F0000 		_ADR	SPACE
 3044 4960 21350000 		_ADR	COUNT
 3045 4964 49400000 		_ADR	TYPEE
 3046 4968 F72E0000 		_DOLIT	0X3F
 3046      3F000000 
 3047 4970 952D0000 		_ADR	EMIT
 3048 4974 7D400000 		_ADR	CR
 3049 4978 E14A0000 		_ADR	PRESE
 3050 497c 5F2F0000 		_BRAN	QUIT
 3050      004B0000 
 3051              	
 3052              	/*******************************
 3053              	    _abort"	( f -- )
ARM GAS  forth.s 			page 166


 3054              	 	Run time routine of ABORT"
 3055              		Abort with a message.
 3056              	hidden used by compiler 
 3057              	********************************/
 3058              	ABORQ:
 3059 4984 504700BF 		_NEST
 3060 4988 9D400000 		_ADR	DOSTR
 3061 498c 95300000 		_ADR	SWAP 
 3062 4990 372F0000 		_QBRAN	1f	// text flag
 3062      A0490000 
 3063 4998 5F2F0000 		_BRAN	ABORT1
 3063      5C490000 
 3064              	1:
 3065 49a0 75300000 		_ADR	DROP
 3066 49a4 D32C0000 		_UNNEST			// drop error
 3067              	
 3068              	/************************
 3069              	  The text interpreter
 3070              	************************/
 3071              	
 3072              	/***************************
 3073              	    $INTERPRET  ( a -- )
 3074              	 	Interpret a word. 
 3075              		If failed, try to 
 3076              		convert it to an integer.
 3077              	******************************/
 3078 49a8 50490000 		_HEADER INTER,10,"$INTERPRET"
 3078      0A24494E 
 3078      54455250 
 3078      52455400 
 3079 49b8 504700BF 		_NEST
 3080 49bc E5460000 		_ADR	NAMEQ
 3081 49c0 95320000 		_ADR	QDUP	// ?defined
 3082 49c4 372F0000 		_QBRAN	INTE1
 3082      F8490000 
 3083 49cc 912F0000 		_ADR	AT
 3084 49d0 F72E0000 		_DOLIT	COMPO
 3084      40000000 
 3085 49d8 05310000 		_ADR	ANDD	// ?compile only lexicon bits
 3086 49dc 85490000 		_ABORQ	13," compile only"
 3086      0D20636F 
 3086      6D70696C 
 3086      65206F6E 
 3086      6C7900BF 
 3087 49f0 0D2F0000 		_ADR	EXECU
 3088 49f4 D32C0000 		_UNNEST			// execute defined word
 3089              	INTE1:
 3090 49f8 C93F0000 		_ADR	NUMBERQ
 3091 49fc 372F0000 		_QBRAN	INTE2
 3091      084A0000 
 3092 4a04 D32C0000 		_UNNEST
 3093              	INTE2:
 3094 4a08 59490000 		_ADR	ABORT	// error
 3095              	
 3096              	/******************************
 3097              	    [	   ( -- )
 3098              	 	Start the text interpreter.
ARM GAS  forth.s 			page 167


 3099              	*******************************/
 3100 4a0c AC490000 		_HEADER LBRAC,IMEDD+1,"["
 3100      815B00BF 
 3101 4a14 504700BF 		_NEST
 3102 4a18 F72E0000 		_DOLIT	INTER
 3102      B8490000 
 3103 4a20 55360000 		_ADR	TEVAL
 3104 4a24 7D2F0000 		_ADR	STORE
 3105 4a28 D32C0000 		_UNNEST
 3106              	
 3107              	/**********************
 3108              	    .OK	 ( -- )
 3109              	 	Display "ok" only 
 3110              		while interpreting.
 3111              	************************/
 3112 4a2c 104A0000 		_HEADER DOTOK,3,".OK"
 3112      032E4F4B 
 3113 4a34 504700BF 		_NEST
 3114 4a38 F72E0000 		_DOLIT	INTER
 3114      B8490000 
 3115 4a40 55360000 		_ADR	TEVAL
 3116 4a44 912F0000 		_ADR	AT
 3117 4a48 0D340000 		_ADR	EQUAL
 3118 4a4c 372F0000 		_QBRAN	DOTO1
 3118      5C4A0000 
 3119 4a54 E5400000 		_DOTQP	3," ok"
 3119      03206F6B 
 3120              	DOTO1:
 3121 4a5c 7D400000 		_ADR	CR
 3122 4a60 D32C0000 		_UNNEST
 3123              	
 3124              	/*************************
 3125              	    ?STACK	( -- )
 3126              	 	Abort if the data 
 3127              		stack underflows.
 3128              	************************/
 3129 4a64 304A0000 		_HEADER QSTAC,6,"?STACK"
 3129      063F5354 
 3129      41434B00 
 3130 4a70 504700BF 		_NEST
 3131 4a74 1D3A0000 		_ADR	DEPTH
 3132 4a78 F5300000 		_ADR	ZLESS	// check only for underflow
 3133 4a7c 85490000 		_ABORQ	9,"underflow"
 3133      09756E64 
 3133      6572666C 
 3133      6F7700BF 
 3134 4a8c D32C0000 		_UNNEST
 3135              	
 3136              	/*******************
 3137              	    EVAL	( -- )
 3138              	 	Interpret the 
 3139              		input stream.
 3140              	*******************/
 3141 4a90 684A0000 		_HEADER EVAL,4,"EVAL"
 3141      04455641 
 3141      4C0000BF 
 3142 4a9c 504700BF 		_NEST
ARM GAS  forth.s 			page 168


 3143              	EVAL1:
 3144 4aa0 5D450000 	    _ADR	TOKEN
 3145 4aa4 85300000 		_ADR	DUPP
 3146 4aa8 B12F0000 		_ADR	CAT	// ?input stream empty
 3147 4aac 372F0000 		_QBRAN	EVAL2
 3147      C84A0000 
 3148 4ab4 55360000 		_ADR	TEVAL
 3149 4ab8 C53A0000 		_ADR	ATEXE
 3150 4abc 714A0000 		_ADR	QSTAC	// evaluate input, check stack
 3151 4ac0 5F2F0000 		_BRAN	EVAL1
 3151      A04A0000 
 3152              	EVAL2:
 3153 4ac8 75300000 		_ADR	DROP
 3154 4acc 354A0000 		_ADR	DOTOK
 3155 4ad0 D32C0000 		_UNNEST	// prompt
 3156              	
 3157              	/**********************************
 3158              	    PRESET	( -- )
 3159              	 	Reset data stack pointer 
 3160              		and the terminal input buffer.
 3161              	**********************************/
 3162 4ad4 944A0000 		_HEADER PRESE,6,"PRESET"
 3162      06505245 
 3162      53455400 
 3163 4ae0 504700BF 		_NEST 
 3164 4ae4 F72E0000 		_DOLIT SPP 
 3164      80FE0120 
 3165 4aec 41300000 		_ADR SPSTOR 
 3166 4af0 D32C0000 		_UNNEST 
 3167              	
 3168              	/*********************
 3169              	    QUIT	( -- )
 3170              	 	Reset return stack 
 3171              		pointer and start 
 3172              		text interpreter.
 3173              	***********************/
 3174 4af4 D84A0000 		_HEADER QUIT,4,"QUIT"
 3174      04515549 
 3174      540000BF 
 3175 4b00 F72E0000 		_DOLIT RPP 
 3175      00FF0120 
 3176 4b08 31300000 		_ADR RPSTOR 
 3177              	QUIT1:
 3178 4b0c 154A0000 		_ADR	LBRAC			// start interpretation
 3179              	QUIT2:
 3180 4b10 19490000 		_ADR	QUERY			// get input
 3181 4b14 9D4A0000 		_ADR	EVAL
 3182 4b18 5F2F0000 		_BRAN	QUIT2	// continue till error
 3182      104B0000 
 3183              	
 3184              	/***************************
 3185              		FORGET ( <string> -- )
 3186              		forget all definition 
 3187              		starting at <string>
 3188              	****************************/
 3189 4b20 F84A0000 		_HEADER FORGET,6,"FORGET"
 3189      06464F52 
ARM GAS  forth.s 			page 169


 3189      47455400 
 3190 4b2c 504700BF 		_NEST 
 3191 4b30 5D450000 		_ADR TOKEN 
 3192 4b34 85300000 		_ADR DUPP 
 3193 4b38 372F0000 		_QBRAN 9f 
 3193      744B0000 
 3194 4b40 E5460000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3195 4b44 95320000 		_ADR QDUP 
 3196 4b48 372F0000 		_QBRAN 8f
 3196      704B0000 
 3197 4b50 31320000 		_ADR CELLM // ( ca la )
 3198 4b54 85300000 		_ADR DUPP 
 3199 4b58 95360000 		_ADR CPP   
 3200 4b5c 7D2F0000 		_ADR STORE
 3201 4b60 912F0000 		_ADR AT 
 3202 4b64 C1360000 		_ADR LAST 
 3203 4b68 7D2F0000 		_ADR STORE
 3204 4b6c D5500000 		_ADR OVERT 
 3205 4b70 75300000 	8:  _ADR DROP 
 3206 4b74 D32C0000 	9:	_UNNEST 
 3207              	
 3208              		.p2align 2 
 3209              	
 3210              	/*****************
 3211              	  The compiler
 3212              	******************/
 3213              	
 3214              	/**************************************
 3215              	    '	   ( -- ca )
 3216              	 	Search context vocabularies 
 3217              		for the next word in input stream.
 3218              	***************************************/
 3219 4b78 244B0000 		_HEADER TICK,1,"'"
 3219      012700BF 
 3220 4b80 504700BF 		_NEST
 3221 4b84 5D450000 		_ADR	TOKEN
 3222 4b88 E5460000 		_ADR	NAMEQ	// ?defined
 3223 4b8c 372F0000 		_QBRAN	TICK1
 3223      984B0000 
 3224 4b94 D32C0000 		_UNNEST	// yes, push code address
 3225              	TICK1:	
 3226 4b98 59490000 		_ADR ABORT	// no, error
 3227              	
 3228              	/***********************
 3229              	    ALLOT	( n -- )
 3230              	 	Allocate n bytes to 
 3231              		the ram area.
 3232              	************************/
 3233 4b9c 7C4B0000 		_HEADER ALLOT,5,"ALLOT"
 3233      05414C4C 
 3233      4F5400BF 
 3234 4ba8 504700BF 		_NEST
 3235 4bac 95360000 		_ADR	CPP
 3236 4bb0 CD340000 		_ADR	PSTOR
 3237 4bb4 D32C0000 		_UNNEST			// adjust code pointer
 3238              	
 3239              	/******************************
ARM GAS  forth.s 			page 170


 3240              	    ,	   ( w -- )
 3241              	 	Compile an integer 
 3242              		into the code dictionary.
 3243              	******************************/
 3244 4bb8 A04B0000 		_HEADER COMMA,1,","
 3244      012C00BF 
 3245 4bc0 504700BF 		_NEST
 3246 4bc4 753A0000 		_ADR	HERE
 3247 4bc8 85300000 		_ADR	DUPP
 3248 4bcc 21320000 		_ADR	CELLP	// cell boundary
 3249 4bd0 95360000 		_ADR	CPP
 3250 4bd4 7D2F0000 		_ADR	STORE
 3251 4bd8 7D2F0000 		_ADR	STORE
 3252 4bdc D32C0000 		_UNNEST	// adjust code pointer, compile
 3253              		.p2align 2 
 3254              	
 3255              	/************************************
 3256              	    [COMPILE]   ( -- //  string> )
 3257              	 	Compile the next immediate word 
 3258              		into code dictionary.
 3259              	*************************************/
 3260 4be0 BC4B0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3260      895B434F 
 3260      4D50494C 
 3260      455D00BF 
 3261 4bf0 504700BF 		_NEST
 3262 4bf4 814B0000 		_ADR	TICK
 3263 4bf8 C14B0000 		_ADR	COMMA
 3264 4bfc D32C0000 		_UNNEST
 3265              	
 3266              	/****************************
 3267              	    COMPILE	( -- )
 3268              	 	Compile the next address 
 3269              		in colon list to code 
 3270              		dictionary.
 3271              	*******************************/
 3272 4c00 E44B0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3272      47434F4D 
 3272      50494C45 
 3273 4c0c 504700BF 		_NEST
 3274 4c10 BD2F0000 		_ADR	RFROM
 3275 4c14 85300000 		_ADR	DUPP 
 3276 4c18 912F0000 		_ADR	AT
 3277 4c1c F72E0000 		_DOLIT 1 
 3277      01000000 
 3278 4c24 19310000 		_ADR	ORR 
 3279 4c28 C14B0000 		_ADR	COMMA 
 3280 4c2c 21320000 		_ADR	CELLP 
 3281 4c30 01300000 		_ADR	TOR 
 3282 4c34 D32C0000 		_UNNEST	// adjust return address
 3283              	
 3284              	/*************************
 3285              	    LITERAL	( w -- )
 3286              	 	Compile tos to code 
 3287              		dictionary as an 
 3288              		integer literal.
 3289              	***************************/
ARM GAS  forth.s 			page 171


 3290 4c38 044C0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3290      874C4954 
 3290      4552414C 
 3291 4c44 504700BF 		_NEST
 3292 4c48 F72E0000 		_COMPI	DOLIT
 3292      F62E0000 
 3292      31510000 
 3293 4c54 C14B0000 		_ADR	COMMA
 3294 4c58 D32C0000 		_UNNEST
 3295              	
 3296              	/********************
 3297              	    $,"	( -- )
 3298              	 	Compile a literal 
 3299              		string up to next " .
 3300              	hidden word 
 3301              	************************/
 3302              	STRCQ:
 3303 4c5c 504700BF 		_NEST
 3304 4c60 F72E0000 		_DOLIT -4
 3304      FCFFFFFF 
 3305 4c68 95360000 		_ADR	CPP
 3306 4c6c CD340000 		_ADR	PSTOR
 3307 4c70 F72E0000 		_DOLIT	'\"'
 3307      22000000 
 3308 4c78 39450000 		_ADR	WORDD			// move word to code dictionary
 3309 4c7c 21350000 		_ADR	COUNT
 3310 4c80 85310000 		_ADR	PLUS
 3311 4c84 B5390000 		_ADR	ALGND			// calculate aligned end of string
 3312 4c88 95360000 		_ADR	CPP
 3313 4c8c 7D2F0000 		_ADR	STORE
 3314 4c90 D32C0000 		_UNNEST 			// adjust the code pointer
 3315              	
 3316              	/*******************
 3317              	   Structures
 3318              	*******************/
 3319              	
 3320              	/*************************
 3321              	    FOR	 ( -- a )
 3322              	 	Start a FOR-NEXT loop 
 3323              		structure in a colon 
 3324              		definition.
 3325              	**************************/
 3326 4c94 3C4C0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3326      C3464F52 
 3327 4c9c 504700BF 		_NEST
 3328 4ca0 F72E0000 		_COMPI	TOR
 3328      00300000 
 3328      31510000 
 3329 4cac 753A0000 		_ADR	HERE
 3330 4cb0 D32C0000 		_UNNEST
 3331              	
 3332              	/********************************
 3333              		DO ( limit start -- )
 3334              		initialise a DO...LOOP 
 3335              		or DO...+LOOP 
 3336              	********************************/
 3337 4cb4 984C0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
ARM GAS  forth.s 			page 172


 3337      C2444F00 
 3338 4cbc 504700BF 		_NEST
 3339 4cc0 F72E0000 		_COMPI SWAP
 3339      94300000 
 3339      31510000 
 3340 4ccc F72E0000 		_COMPI TOR 
 3340      00300000 
 3340      31510000 
 3341 4cd8 F72E0000 		_COMPI TOR 
 3341      00300000 
 3341      31510000 
 3342 4ce4 753A0000 		_ADR HERE 
 3343 4ce8 D32C0000 		_UNNEST 
 3344              	
 3345              	DOPLOOP: // ( n -- R: counter limit )
 3346 4cec 3246     		mov T2,TOS 
 3347 4cee 57F8046B 		_POP 
 3348 4cf2 B8E80300 		ldmfd RSP!,{T0,T1}
 3349 4cf6 1044     		add T0,T2 
 3350 4cf8 28E90300 		stmfd RSP!,{T0,T1}
 3351 4cfc 8842     		cmp T0,T1 
 3352 4cfe 05D4     		bmi 9f 
 3353 4d00 08F10808 		add RSP,#8
 3354 4d04 0CF1040C 		add IP,#4
 3355 4d08 FDF7E0BF 		_NEXT 
 3356 4d0c DCF800C0 	9:  ldr IP,[IP]
 3357 4d10 FDF7DCBF 		_NEXT 
 3358              		
 3359              	/***************************
 3360              		+LOOP ( a -- )
 3361              		increment counter 
 3362              		end loop if countr>limit
 3363              	****************************/
 3364 4d14 B84C0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3364      C52B4C4F 
 3364      4F5000BF 
 3365 4d20 504700BF 		_NEST 
 3366 4d24 F72E0000 		_COMPI DOPLOOP 
 3366      EC4C0000 
 3366      31510000 
 3367 4d30 C14B0000 		_ADR COMMA
 3368 4d34 D32C0000 		_UNNEST 
 3369              	
 3370              	DOLOOP: // ( -- R: counter limit )
 3371 4d38 D8F80000 		ldr T0,[RSP]
 3372 4d3c 00F10100 		add T0,#1
 3373 4d40 C8F80000 		str T0,[RSP]
 3374 4d44 D8F80410 		ldr T1,[RSP,#4]
 3375 4d48 8842     		cmp T0,T1 
 3376 4d4a 05D4     		bmi 9f
 3377 4d4c 08F10808 		add RSP,#8  // counter and limit  
 3378 4d50 0CF1040C 		add IP,IP,#4 // skip loop address 
 3379 4d54 FDF7BABF 		_NEXT 
 3380 4d58 DCF800C0 	9:  ldr IP,[IP]
 3381 4d5c FDF7B6BF 		_NEXT 
 3382              	
 3383              	
ARM GAS  forth.s 			page 173


 3384              	/********************************
 3385              		LOOP ( a -- )
 3386              		increment counter 
 3387              		end loop if >= limit 
 3388              	*********************************/
 3389 4d60 184D0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3389      C44C4F4F 
 3389      500000BF 
 3390 4d6c 504700BF 		_NEST 
 3391 4d70 F72E0000 		_COMPI DOLOOP
 3391      384D0000 
 3391      31510000 
 3392 4d7c C14B0000 		_ADR COMMA 
 3393 4d80 D32C0000 		_UNNEST 
 3394              	
 3395              	
 3396              	/**********************
 3397              	    BEGIN	( -- a )
 3398              	 	Start an infinite 
 3399              		or indefinite 
 3400              		loop structure.
 3401              	************************/
 3402 4d84 644D0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3402      C5424547 
 3402      494E00BF 
 3403 4d90 504700BF 		_NEST
 3404 4d94 753A0000 		_ADR	HERE
 3405 4d98 D32C0000 		_UNNEST
 3406              		.p2align 2 
 3407              	
 3408              	/********************
 3409              	    NEXT	( a -- )
 3410              	 	Terminate a FOR-NEXT
 3411              		loop structure.
 3412              	**************************/
 3413 4d9c 884D0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3413      C44E4558 
 3413      540000BF 
 3414 4da8 504700BF 		_NEST
 3415 4dac F72E0000 		_COMPI	DONXT
 3415      182F0000 
 3415      31510000 
 3416 4db8 C14B0000 		_ADR	COMMA
 3417 4dbc D32C0000 		_UNNEST
 3418              	
 3419              	/***************************
 3420              		I ( -- n )
 3421              		stack for loop counter 
 3422              	***************************/
 3423 4dc0 A04D0000 		_HEADER I,1+COMPO,"I"
 3423      414900BF 
 3424 4dc8 47F8046D 		_PUSH 
 3425 4dcc D8F80060 		ldr TOS,[RSP]
 3426 4dd0 FDF77CBF 		_NEXT 
 3427              	
 3428              	/****************************
 3429              		J ( -- n )
ARM GAS  forth.s 			page 174


 3430              		stack outer loop counter 
 3431              	****************************/
 3432 4dd4 C44D0000 		_HEADER J,1,"J"
 3432      014A00BF 
 3433 4ddc 47F8046D 		_PUSH 
 3434 4de0 D8F80460 		ldr TOS,[RSP,#4]
 3435 4de4 FDF772BF 		_NEXT 
 3436              	
 3437              	/**********************
 3438              	    UNTIL	( a -- )
 3439              	 	Terminate a BEGIN-UNTIL
 3440              		indefinite loop structure.
 3441              	******************************/
 3442 4de8 D84D0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3442      C5554E54 
 3442      494C00BF 
 3443 4df4 504700BF 		_NEST
 3444 4df8 F72E0000 		_COMPI	QBRAN
 3444      362F0000 
 3444      31510000 
 3445 4e04 C14B0000 		_ADR	COMMA
 3446 4e08 D32C0000 		_UNNEST
 3447              	
 3448              	/**********************
 3449              	    AGAIN	( a -- )
 3450              	 	Terminate a BEGIN-AGAIN
 3451              		infinite loop structure.
 3452              	*****************************/
 3453 4e0c EC4D0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3453      C5414741 
 3453      494E00BF 
 3454 4e18 504700BF 		_NEST
 3455 4e1c F72E0000 		_COMPI	BRAN
 3455      5E2F0000 
 3455      31510000 
 3456 4e28 C14B0000 		_ADR	COMMA
 3457 4e2c D32C0000 		_UNNEST
 3458              	
 3459              	/************************
 3460              	    IF	  ( -- A )
 3461              	 	Begin a conditional
 3462              		branch structure.
 3463              	**************************/
 3464 4e30 104E0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3464      C2494600 
 3465 4e38 504700BF 		_NEST
 3466 4e3c F72E0000 		_COMPI	QBRAN
 3466      362F0000 
 3466      31510000 
 3467 4e48 753A0000 		_ADR	HERE
 3468 4e4c F72E0000 		_DOLIT	4
 3468      04000000 
 3469 4e54 95360000 		_ADR	CPP
 3470 4e58 CD340000 		_ADR	PSTOR
 3471 4e5c D32C0000 		_UNNEST
 3472              	
 3473              	/*************************
ARM GAS  forth.s 			page 175


 3474              	    AHEAD	( -- A )
 3475              	 	Compile a forward 
 3476              		branch instruction.
 3477              	*************************/
 3478 4e60 344E0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3478      C5414845 
 3478      414400BF 
 3479 4e6c 504700BF 		_NEST
 3480 4e70 F72E0000 		_COMPI	BRAN
 3480      5E2F0000 
 3480      31510000 
 3481 4e7c 753A0000 		_ADR	HERE
 3482 4e80 F72E0000 		_DOLIT	4
 3482      04000000 
 3483 4e88 95360000 		_ADR	CPP
 3484 4e8c CD340000 		_ADR	PSTOR
 3485 4e90 D32C0000 		_UNNEST
 3486              	
 3487              	/**************************
 3488              	    REPEAT	( A a -- )
 3489              	 	Terminate a BEGIN-WHILE-REPEAT
 3490              		indefinite loop.
 3491              	**********************************/
 3492 4e94 644E0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3492      C6524550 
 3492      45415400 
 3493 4ea0 504700BF 		_NEST
 3494 4ea4 194E0000 		_ADR	AGAIN
 3495 4ea8 753A0000 		_ADR	HERE
 3496 4eac 95300000 		_ADR	SWAP
 3497 4eb0 7D2F0000 		_ADR	STORE
 3498 4eb4 D32C0000 		_UNNEST
 3499              	
 3500              	/*********************
 3501              	    THEN	( A -- )
 3502              	 	Terminate a conditional
 3503              		branch structure.
 3504              	*****************************/
 3505 4eb8 984E0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3505      C4544845 
 3505      4E0000BF 
 3506 4ec4 504700BF 		_NEST
 3507 4ec8 753A0000 		_ADR	HERE
 3508 4ecc 95300000 		_ADR	SWAP
 3509 4ed0 7D2F0000 		_ADR	STORE
 3510 4ed4 D32C0000 		_UNNEST
 3511              	
 3512              	/***************************
 3513              	    AFT	 ( a -- a A )
 3514              	 	Jump to THEN in a 
 3515              		FOR-AFT-THEN-NEXT loop 
 3516              		the first time through.
 3517              	*****************************/
 3518 4ed8 BC4E0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3518      C3414654 
 3519 4ee0 504700BF 		_NEST
 3520 4ee4 75300000 		_ADR	DROP
ARM GAS  forth.s 			page 176


 3521 4ee8 6D4E0000 		_ADR	AHEAD
 3522 4eec 914D0000 		_ADR	BEGIN
 3523 4ef0 95300000 		_ADR	SWAP
 3524 4ef4 D32C0000 		_UNNEST
 3525              	
 3526              	/**********************
 3527              	    ELSE	( A -- A )
 3528              	 	Start the false 
 3529              		clause in an 
 3530              		IF-ELSE-THEN structure.
 3531              	****************************/
 3532 4ef8 DC4E0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3532      C4454C53 
 3532      450000BF 
 3533 4f04 504700BF 		_NEST
 3534 4f08 6D4E0000 		_ADR	AHEAD
 3535 4f0c 95300000 		_ADR	SWAP
 3536 4f10 C54E0000 		_ADR	THENN
 3537 4f14 D32C0000 		_UNNEST
 3538              	
 3539              	/**************************
 3540              	    WHILE	( a -- A a )
 3541              	 	Conditional branch out 
 3542              		of a BEGIN-WHILE-REPEAT loop.
 3543              	*********************************/
 3544 4f18 FC4E0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3544      C5574849 
 3544      4C4500BF 
 3545 4f24 504700BF 		_NEST
 3546 4f28 394E0000 		_ADR	IFF
 3547 4f2c 95300000 		_ADR	SWAP
 3548 4f30 D32C0000 		_UNNEST
 3549              	
 3550              	/***********************************
 3551              	    ABORT"	( -- //  string> )
 3552              	 	Conditional abort with an 
 3553              		error message.
 3554              	***********************************/
 3555 4f34 1C4F0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3555      8641424F 
 3555      52542200 
 3556 4f40 504700BF 		_NEST
 3557 4f44 F72E0000 		_COMPI	ABORQ
 3557      84490000 
 3557      31510000 
 3558 4f50 5D4C0000 		_ADR	STRCQ
 3559 4f54 D32C0000 		_UNNEST
 3560              	
 3561              	/******************************
 3562              	    $"	( -- //  string> )
 3563              	 	Compile an inline 
 3564              		word literal.
 3565              	*****************************/
 3566 4f58 384F0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3566      C2242200 
 3567 4f60 504700BF 		_NEST
 3568 4f64 F72E0000 		_COMPI	STRQP
ARM GAS  forth.s 			page 177


 3568      C8400000 
 3568      31510000 
 3569 4f70 5D4C0000 		_ADR	STRCQ
 3570 4f74 D32C0000 		_UNNEST
 3571              	
 3572              	/******************************
 3573              	    ."	( -- //  string> )
 3574              	 	Compile an inline word
 3575              		literal to be typed out 
 3576              		at run time.
 3577              	*******************************/
 3578 4f78 5C4F0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3578      C22E2200 
 3579 4f80 504700BF 		_NEST
 3580 4f84 F72E0000 		_COMPI	DOTQP
 3580      E4400000 
 3580      31510000 
 3581 4f90 5D4C0000 		_ADR	STRCQ
 3582 4f94 D32C0000 		_UNNEST
 3583              	
 3584              	/*********************
 3585              	  Name compiler
 3586              	***********************/
 3587              	
 3588              	/**************************
 3589              	    ?UNIQUE	( a -- a )
 3590              	 	Display a warning 
 3591              		message if the word 
 3592              		already exists.
 3593              	**************************/
 3594 4f98 7C4F0000 		_HEADER UNIQU,7,"?UNIQUE"
 3594      073F554E 
 3594      49515545 
 3595 4fa4 504700BF 		_NEST
 3596 4fa8 85300000 		_ADR	DUPP
 3597 4fac E5460000 		_ADR	NAMEQ			// ?name exists
 3598 4fb0 372F0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3598      D04F0000 
 3599 4fb8 E5400000 		_DOTQP	7," reDef "		// but warn the user
 3599      07207265 
 3599      44656620 
 3600 4fc4 C5300000 		_ADR	OVER
 3601 4fc8 21350000 		_ADR	COUNT
 3602 4fcc 49400000 		_ADR	TYPEE			// just in case its not planned
 3603              	UNIQ1:
 3604 4fd0 75300000 		_ADR	DROP
 3605 4fd4 D32C0000 		_UNNEST
 3606              	
 3607              	/***********************
 3608              	    $,n	 ( na -- )
 3609              	 	Build a new dictionary 
 3610              		name using the data at na.
 3611              	hidden word 
 3612              	*******************************/
 3613              	SNAME:
 3614 4fd8 504700BF 		_NEST
 3615 4fdc 85300000 		_ADR	DUPP			//  na na
ARM GAS  forth.s 			page 178


 3616 4fe0 B12F0000 		_ADR	CAT			//  ?null input
 3617 4fe4 372F0000 		_QBRAN	SNAM1
 3617      20500000 
 3618 4fec A54F0000 		_ADR	UNIQU			//  na
 3619 4ff0 C1360000 		_ADR	LAST			//  na last
 3620 4ff4 912F0000 		_ADR	AT			//  na la
 3621 4ff8 C14B0000 		_ADR	COMMA			//  na
 3622 4ffc 85300000 		_ADR	DUPP			//  na na
 3623 5000 C1360000 		_ADR	LAST			//  na na last
 3624 5004 7D2F0000 		_ADR	STORE			//  na , save na for vocabulary link
 3625 5008 21350000 		_ADR	COUNT			//  na+1 count
 3626 500c 85310000 		_ADR	PLUS			//  na+1+count
 3627 5010 B5390000 		_ADR	ALGND			//  word boundary
 3628 5014 95360000 		_ADR	CPP
 3629 5018 7D2F0000 		_ADR	STORE			//  top of dictionary now
 3630 501c D32C0000 		_UNNEST
 3631              	SNAM1:
 3632 5020 C9400000 		_ADR	STRQP
 3633 5024 07       		.byte	7
 3634 5025 206E616D 		.ascii " name? "
 3634      653F20
 3635 502c 59490000 		_ADR	ABORT
 3636              	
 3637              	/************************
 3638              	    $COMPILE	( a -- )
 3639              	 	Compile next word to 
 3640              		code dictionary as 
 3641              		a token or literal.
 3642              	**************************/
 3643 5030 9C4F0000 		_HEADER SCOMP,8,"$COMPILE"
 3643      0824434F 
 3643      4D50494C 
 3643      450000BF 
 3644 5040 504700BF 		_NEST
 3645 5044 E5460000 		_ADR	NAMEQ
 3646 5048 95320000 		_ADR	QDUP	// defined?
 3647 504c 372F0000 		_QBRAN	SCOM2
 3647      7C500000 
 3648 5054 912F0000 		_ADR	AT
 3649 5058 F72E0000 		_DOLIT	IMEDD
 3649      80000000 
 3650 5060 05310000 		_ADR	ANDD	// immediate?
 3651 5064 372F0000 		_QBRAN	SCOM1
 3651      74500000 
 3652 506c 0D2F0000 		_ADR	EXECU
 3653 5070 D32C0000 		_UNNEST			// it's immediate, execute
 3654              	SCOM1:
 3655 5074 31510000 		_ADR	CALLC			// it's not immediate, compile
 3656 5078 D32C0000 		_UNNEST	
 3657              	SCOM2:
 3658 507c C93F0000 		_ADR	NUMBERQ 
 3659 5080 372F0000 		_QBRAN	SCOM3
 3659      90500000 
 3660 5088 454C0000 		_ADR	LITER
 3661 508c D32C0000 		_UNNEST			// compile number as integer
 3662              	SCOM3: // compilation abort 
 3663 5090 99500000 		_ADR COLON_ABORT 
ARM GAS  forth.s 			page 179


 3664 5094 59490000 		_ADR	ABORT			// error
 3665              	
 3666              	/********************************
 3667              	 before aborting a compilation 
 3668              	 reset HERE and LAST
 3669              	 to previous values. 
 3670              	*******************************/
 3671              	COLON_ABORT:
 3672 5098 504700BF 		_NEST 
 3673 509c C1360000 		_ADR LAST 
 3674 50a0 912F0000 		_ADR AT 
 3675 50a4 31320000 		_ADR CELLM 
 3676 50a8 85300000 		_ADR DUPP 
 3677 50ac 95360000 		_ADR CPP  
 3678 50b0 7D2F0000 		_ADR STORE 
 3679 50b4 912F0000 		_ADR AT 
 3680 50b8 C1360000 		_ADR LAST 
 3681 50bc 7D2F0000 		_ADR STORE 
 3682 50c0 D5500000 		_ADR OVERT 
 3683 50c4 D32C0000 		_UNNEST 
 3684              	
 3685              	/*********************
 3686              	    OVERT	( -- )
 3687              	 	Link a new word 
 3688              		into the current 
 3689              		vocabulary.
 3690              	**********************/
 3691 50c8 34500000 		_HEADER OVERT,5,"OVERT"
 3691      054F5645 
 3691      525400BF 
 3692 50d4 504700BF 		_NEST
 3693 50d8 C1360000 		_ADR	LAST
 3694 50dc 912F0000 		_ADR	AT
 3695 50e0 81360000 		_ADR	CNTXT
 3696 50e4 7D2F0000 		_ADR	STORE
 3697 50e8 D32C0000 		_UNNEST
 3698              	
 3699              	/**********************
 3700              	    ;  ( -- )
 3701              	 	Terminate a colon
 3702              		definition.
 3703              	***********************/
 3704 50ec CC500000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3704      C13B00BF 
 3705 50f4 504700BF 		_NEST
 3706 50f8 F72E0000 		_DOLIT	UNNEST
 3706      D22C0000 
 3707 5100 31510000 		_ADR	CALLC
 3708 5104 154A0000 		_ADR	LBRAC
 3709 5108 D5500000 		_ADR	OVERT
 3710 510c D32C0000 		_UNNEST
 3711              	
 3712              	/******************
 3713              	    ]	   ( -- )
 3714              	 	Start compiling 
 3715              		the words in 
 3716              		the input stream.
ARM GAS  forth.s 			page 180


 3717              	*********************/
 3718 5110 F0500000 		_HEADER RBRAC,1,"]"
 3718      015D00BF 
 3719 5118 504700BF 		_NEST
 3720 511c F72E0000 		_DOLIT	SCOMP
 3720      40500000 
 3721 5124 55360000 		_ADR	TEVAL
 3722 5128 7D2F0000 		_ADR	STORE
 3723 512c D32C0000 		_UNNEST
 3724              	
 3725              	/*********************
 3726              	    BL.W	( ca -- )
 3727              	 	compile ca.
 3728              	hidden word used by compiler
 3729              	*****************************/
 3730              	CALLC:
 3731 5130 504700BF 		_NEST
 3732 5134 F72E0000 		_DOLIT 1 
 3732      01000000 
 3733 513c 19310000 		_ADR ORR 
 3734 5140 C14B0000 		_ADR COMMA  
 3735 5144 D32C0000 		_UNNEST 
 3736              	
 3737              	
 3738              	/*************************
 3739              	 	:	( -- //  string> )
 3740              	 	Start a new colon 
 3741              		definition using 
 3742              		next word as its name.
 3743              	**************************/
 3744 5148 14510000 		_HEADER COLON,1,":"
 3744      013A00BF 
 3745 5150 504700BF 		_NEST
 3746 5154 5D450000 		_ADR	TOKEN
 3747 5158 D94F0000 		_ADR	SNAME
 3748 515c D5500000 		_ADR    OVERT 
 3749 5160 DD2C0000 		_ADR	COMPI_NEST 
 3750 5164 19510000 		_ADR	RBRAC
 3751 5168 D32C0000 		_UNNEST
 3752              	
 3753              	/*************************
 3754              	    IMMEDIATE   ( -- )
 3755              	 	Make the last compiled 
 3756              		word an immediate word.
 3757              	***************************/
 3758 516c 4C510000 		_HEADER IMMED,9,"IMMEDIATE"
 3758      09494D4D 
 3758      45444941 
 3758      544500BF 
 3759 517c 504700BF 		_NEST
 3760 5180 F72E0000 		_DOLIT	IMEDD
 3760      80000000 
 3761 5188 C1360000 		_ADR	LAST
 3762 518c 912F0000 		_ADR	AT
 3763 5190 912F0000 		_ADR	AT
 3764 5194 19310000 		_ADR	ORR
 3765 5198 C1360000 		_ADR	LAST
ARM GAS  forth.s 			page 181


 3766 519c 912F0000 		_ADR	AT
 3767 51a0 7D2F0000 		_ADR	STORE
 3768 51a4 D32C0000 		_UNNEST
 3769              	
 3770              	/******************
 3771              	  Defining words
 3772              	******************/
 3773              	
 3774              	/***********************************
 3775              	    CONSTANT	( u -- //  string> )
 3776              	 	Compile a new constant.
 3777              	************************************/
 3778 51a8 70510000 		_HEADER CONST,8,"CONSTANT"
 3778      08434F4E 
 3778      5354414E 
 3778      540000BF 
 3779 51b8 504700BF 		_NEST 
 3780 51bc 5D450000 		_ADR	TOKEN
 3781 51c0 D94F0000 		_ADR	SNAME
 3782 51c4 D5500000 		_ADR	OVERT
 3783 51c8 DD2C0000 		_ADR	COMPI_NEST
 3784 51cc F72E0000 		_DOLIT	DOCON
 3784      5C350000 
 3785 51d4 31510000 		_ADR	CALLC
 3786 51d8 C14B0000 		_ADR	COMMA
 3787 51dc F72E0000 		_DOLIT	UNNEST 
 3787      D22C0000 
 3788 51e4 31510000 		_ADR	CALLC  
 3789 51e8 D32C0000 		_UNNEST
 3790              	
 3791              		.p2align 2 
 3792              	/****************************************
 3793              	 doDOES> ( -- a )
 3794              	 runtime action of 		 
 3795              	 leave parameter field address on stack 
 3796              	hidden word used by compiler 
 3797              	***************************************/
 3798              	DODOES:
 3799 51ec 504700BF 		_NEST 
 3800 51f0 BD2F0000 		_ADR	RFROM
 3801 51f4 21320000 		_ADR	CELLP 
 3802 51f8 E1310000 		_ADR	ONEP  
 3803 51fc C1360000 		_ADR LAST 
 3804 5200 912F0000 		_ADR AT
 3805 5204 7D450000 		_ADR NAMET 
 3806 5208 21320000 		_ADR CELLP 
 3807 520c 7D2F0000 		_ADR STORE  
 3808 5210 D32C0000 		_UNNEST 
 3809              	
 3810              		.p2align 2
 3811              	/**********************
 3812              	  DOES> ( -- )
 3813              	  compile time action
 3814              	*************************/
 3815 5214 AC510000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3815      C5444F45 
 3815      533E00BF 
ARM GAS  forth.s 			page 182


 3816 5220 504700BF 		_NEST 
 3817 5224 F72E0000 		_DOLIT DODOES 
 3817      EC510000 
 3818 522c 31510000 		_ADR CALLC 
 3819 5230 F72E0000 		_DOLIT	UNNEST
 3819      D22C0000 
 3820 5238 31510000 		_ADR	CALLC 
 3821 523c DD2C0000 		_ADR COMPI_NEST
 3822 5240 F72E0000 		_DOLIT RFROM 
 3822      BC2F0000 
 3823 5248 31510000 		_ADR	CALLC
 3824 524c D32C0000 		_UNNEST 
 3825              	
 3826              	
 3827              	/****************************
 3828              	  DEFER@ ( "name" -- a )
 3829              	  return value of code field 
 3830              	  of defered function. 
 3831              	******************************/
 3832 5250 18520000 		_HEADER DEFERAT,6,"DEFER@"
 3832      06444546 
 3832      45524000 
 3833 525c 504700BF 		_NEST 
 3834 5260 814B0000 		_ADR TICK
 3835 5264 21320000 		_ADR CELLP 
 3836 5268 912F0000 		_ADR AT 
 3837 526c F1310000 		_ADR ONEM 
 3838 5270 D32C0000 		_UNNEST 
 3839              	
 3840              	/*********************************
 3841              	 DEFER! ( "name1" "name2" -- )
 3842              	 assign an action to a defered word 
 3843              	************************************/
 3844 5274 54520000 		_HEADER DEFERSTO,6,"DEFER!"
 3844      06444546 
 3844      45522100 
 3845 5280 504700BF 		_NEST 
 3846 5284 814B0000 		_ADR TICK 
 3847 5288 E1310000 		_ADR ONEP 
 3848 528c 814B0000 		_ADR TICK 
 3849 5290 21320000 		_ADR CELLP 
 3850 5294 7D2F0000 		_ADR STORE 
 3851 5298 D32C0000 		_UNNEST
 3852              	
 3853              	/****************************
 3854              	  DEFER ( "name" -- )
 3855              	  create a defered definition
 3856              	*****************************/
 3857 529c 78520000 		_HEADER DEFER,5,"DEFER"
 3857      05444546 
 3857      455200BF 
 3858 52a8 504700BF 		_NEST 
 3859 52ac F9520000 		_ADR CREAT 
 3860 52b0 F72E0000 		_DOLIT UNNEST 
 3860      D22C0000 
 3861 52b8 31510000 		_ADR CALLC 
 3862 52bc F72E0000 		_DOLIT DEFER_NOP
ARM GAS  forth.s 			page 183


 3862      E0520000 
 3863 52c4 E1310000 		_ADR ONEP 
 3864 52c8 C1360000 		_ADR LAST 
 3865 52cc 912F0000 		_ADR AT 
 3866 52d0 7D450000 		_ADR NAMET 
 3867 52d4 21320000 		_ADR CELLP 
 3868 52d8 7D2F0000 		_ADR STORE 
 3869 52dc D32C0000 		_UNNEST 
 3870              	DEFER_NOP:
 3871 52e0 504700BF 		_NEST  
 3872 52e4 F52E0000 		_ADR NOP 
 3873 52e8 D32C0000 		_UNNEST 
 3874              	
 3875              	/******************************
 3876              	    CREATE	( -- //  string> )
 3877              	 	Compile a new array entry 
 3878              		without allocating code space.
 3879              	***********************************/
 3880 52ec A0520000 		_HEADER CREAT,6,"CREATE"
 3880      06435245 
 3880      41544500 
 3881 52f8 504700BF 		_NEST 
 3882 52fc 5D450000 		_ADR	TOKEN
 3883 5300 D94F0000 		_ADR	SNAME
 3884 5304 D5500000 		_ADR	OVERT
 3885 5308 DD2C0000 		_ADR	COMPI_NEST 
 3886 530c F72E0000 		_DOLIT	DOVAR
 3886      4E350000 
 3887 5314 31510000 		_ADR	CALLC
 3888 5318 D32C0000 		_UNNEST
 3889              	
 3890              	/*******************************
 3891              	    VARIABLE	( -- //  string> )
 3892              	 	Compile a new variable 
 3893              		initialized to 0.
 3894              	***********************************/
 3895 531c F0520000 		_HEADER VARIA,8,"VARIABLE"
 3895      08564152 
 3895      4941424C 
 3895      450000BF 
 3896 532c 504700BF 		_NEST
 3897 5330 F9520000 		_ADR	CREAT
 3898 5334 F72E0000 		_DOLIT	0
 3898      00000000 
 3899 533c C14B0000 		_ADR	COMMA
 3900 5340 F72E0000 		_DOLIT UNNEST
 3900      D22C0000 
 3901 5348 31510000 		_ADR	CALLC  
 3902 534c D32C0000 		_UNNEST
 3903              	
 3904              	
 3905              	/***********
 3906              	  Tools
 3907              	***********/
 3908              	
 3909              	/*************************
 3910              	    dm+	 ( a u -- a )
ARM GAS  forth.s 			page 184


 3911              	 	Dump u bytes from a , 
 3912              		leaving a+u on the stack.
 3913              		hidden word used by DUMP 
 3914              	****************************/
 3915              	DMP:
 3916 5350 504700BF 		_NEST
 3917 5354 C5300000 		_ADR	OVER
 3918 5358 F72E0000 		_DOLIT	4
 3918      04000000 
 3919 5360 AD410000 		_ADR	UDOTR			// display address
 3920 5364 F72E0000 		_DOLIT  0         // don't show base char 
 3920      00000000 
 3921 536c ED350000 		_ADR    BCHR
 3922 5370 85300000 		_ADR    DUPP
 3923 5374 912F0000 		_ADR    AT 
 3924 5378 01300000 		_ADR    TOR      // save original value of BCHAR 
 3925 537c 7D2F0000 		_ADR    STORE 
 3926 5380 F53F0000 		_ADR	SPACE
 3927 5384 01300000 		_ADR	TOR			// start count down loop
 3928 5388 5F2F0000 		_BRAN	PDUM2			// skip first pass
 3928      A8530000 
 3929              	PDUM1:
 3930 5390 85300000 	    _ADR	DUPP
 3931 5394 B12F0000 		_ADR	CAT
 3932 5398 F72E0000 		_DOLIT	3
 3932      03000000 
 3933 53a0 AD410000 		_ADR	UDOTR			// display numeric data
 3934 53a4 E1310000 		_ADR	ONEP			// increment address
 3935              	PDUM2:
 3936 53a8 192F0000 	    _ADR	DONXT
 3937 53ac 90530000 		.word	PDUM1	// loop till done
 3938 53b0 BD2F0000 		_ADR    RFROM   // restore BCHAR value 
 3939 53b4 ED350000 		_ADR    BCHR 
 3940 53b8 7D2F0000 		_ADR    STORE 
 3941 53bc D32C0000 		_UNNEST
 3942              		.p2align 2 
 3943              	//    DUMP	( a u -- )
 3944              	// 	Dump u bytes from a, in a formatted manner.
 3945              	
 3946              	/**********************
 3947              		DUMP ( a n -- )
 3948              		hex dump memory 
 3949              	*********************/
 3950 53c0 20530000 		_HEADER DUMP,4,"DUMP"
 3950      0444554D 
 3950      500000BF 
 3951 53cc 504700BF 		_NEST
 3952 53d0 F72E0000 		_DOLIT  15 
 3952      0F000000 
 3953 53d8 85310000 		_ADR    PLUS 
 3954 53dc F72E0000 		_DOLIT  0xFFFFFFF0 
 3954      F0FFFFFF 
 3955 53e4 05310000 		_ADR    ANDD 
 3956 53e8 95300000 		_ADR    SWAP 
 3957 53ec F72E0000 		_DOLIT  0xFFFFFFFC
 3957      FCFFFFFF 
 3958 53f4 05310000 		_ADR    ANDD 
ARM GAS  forth.s 			page 185


 3959 53f8 95300000 		_ADR    SWAP 
 3960 53fc D5350000 		_ADR	BASE
 3961 5400 912F0000 		_ADR	AT
 3962 5404 01300000 		_ADR	TOR
 3963 5408 593D0000 		_ADR	HEX			// save radix,set hex
 3964 540c F72E0000 		_DOLIT	16
 3964      10000000 
 3965 5414 55390000 		_ADR	SLASH			// change count to lines
 3966 5418 01300000 		_ADR	TOR
 3967 541c 5F2F0000 		_BRAN	DUMP4			// start count down loop
 3967      4C540000 
 3968              	DUMP1:
 3969 5424 7D400000 	    _ADR	CR
 3970 5428 F72E0000 		_DOLIT	16
 3970      10000000 
 3971 5430 F9320000 		_ADR	DDUP
 3972 5434 51530000 		_ADR	DMP			// display numeric
 3973 5438 A9320000 		_ADR	ROT
 3974 543c A9320000 		_ADR	ROT
 3975 5440 F53F0000 		_ADR	SPACE
 3976 5444 F53F0000 		_ADR	SPACE
 3977 5448 49400000 		_ADR	TYPEE			// display printable characters
 3978              	DUMP4:
 3979 544c 192F0000 	  _DONXT	DUMP1	// loop till done
 3979      24540000 
 3980              	DUMP3:
 3981 5454 75300000 		_ADR	DROP
 3982 5458 BD2F0000 		_ADR	RFROM
 3983 545c D5350000 		_ADR	BASE
 3984 5460 7D2F0000 		_ADR	STORE			// restore radix
 3985 5464 D32C0000 		_UNNEST
 3986              	
 3987              	/*******************************
 3988              	   TRACE. display in hexadecimal
 3989              	   TRACE. use a different buffer 
 3990              	   than DOT  to avoid current 
 3991              	   display overwrite.
 3992              	*******************************/ 
 3993              	TDOT: // ( u -- )
 3994 5468 504700BF 		_NEST 
 3995 546c D5350000 		_ADR BASE 
 3996 5470 912F0000 		_ADR AT 
 3997 5474 01300000 		_ADR TOR
 3998 5478 593D0000 		_ADR HEX  
 3999 547c 69360000 		_ADR HLD 
 4000 5480 912F0000 		_ADR AT 
 4001 5484 01300000 		_ADR TOR   // R: base *hold 
 4002 5488 753A0000 		_ADR HERE 
 4003 548c F72E0000 		_DOLIT 160 
 4003      A0000000 
 4004 5494 85310000 		_ADR PLUS
 4005 5498 85300000 		_ADR DUPP 
 4006 549c 01300000 		_ADR TOR  
 4007 54a0 69360000 		_ADR HLD 
 4008 54a4 7D2F0000 		_ADR STORE
 4009 54a8 F72E0000 		_DOLIT 0  
 4009      00000000 
ARM GAS  forth.s 			page 186


 4010 54b0 A93C0000 		_ADR DIGS  
 4011 54b4 75300000 		_ADR DROP
 4012 54b8 F72E0000 		_DOLIT '$'
 4012      24000000 
 4013 54c0 5D3C0000 		_ADR HOLD 
 4014 54c4 69360000 		_ADR HLD 
 4015 54c8 912F0000 		_ADR AT
 4016 54cc BD2F0000 		_ADR RFROM   
 4017 54d0 C5300000 		_ADR OVER 
 4018 54d4 95310000 		_ADR SUBB 
 4019 54d8 F53F0000 		_ADR SPACE 
 4020 54dc 49400000 		_ADR TYPEE 
 4021 54e0 BD2F0000 		_ADR RFROM 
 4022 54e4 69360000 		_ADR HLD 
 4023 54e8 7D2F0000 		_ADR STORE 
 4024 54ec BD2F0000 		_ADR RFROM 
 4025 54f0 D5350000 		_ADR BASE 
 4026 54f4 7D2F0000 		_ADR STORE 
 4027 54f8 D32C0000 		_UNNEST 
 4028              	
 4029              	/**********************
 4030              	   .S	  ( ... -- ... )
 4031              	 	Display the contents 
 4032              		of the data stack.
 4033              	*************************/
 4034 54fc C4530000 		_HEADER DOTS,2,".S"
 4034      022E5300 
 4035 5504 504700BF 		_NEST
 4036 5508 1D3A0000 		_ADR	DEPTH	// stack depth
 4037 550c 01300000 		_ADR	TOR		// start count down loop
 4038 5510 5F2F0000 		_BRAN	DOTS2  // skip first pass
 4038      24550000 
 4039              	DOTS1:
 4040 5518 ED2F0000 		_ADR	RAT
 4041 551c 413A0000 		_ADR	PICK
 4042 5520 69540000 		_ADR	TDOT // index stack, display contents
 4043              	DOTS2:
 4044 5524 192F0000 		_DONXT	DOTS1 // loop till done
 4044      18550000 
 4045 552c 7D400000 		_ADR	CR 
 4046 5530 D32C0000 		_UNNEST
 4047              	
 4048              	RBASE: 
 4049 5534 47F8046D 		_PUSH 
 4050 5538 4FF47F46 		_MOV32 TOS,RPP 
 4050      C2F20106 
 4051 5540 FDF7C4BB 		_NEXT 
 4052              	
 4053              	
 4054              	/**************************
 4055              	  R.  display return stack 
 4056              	**************************/
 4057              	RDOT: 
 4058 5544 504700BF 		_NEST 
 4059 5548 35550000 		_ADR RBASE
 4060 554c 61300000 		_ADR RPAT 
 4061 5550 95310000 		_ADR SUBB
ARM GAS  forth.s 			page 187


 4062 5554 65320000 		_ADR CELLSL   
 4063 5558 F72E0000 		_DOLIT 2
 4063      02000000 
 4064 5560 95310000 		_ADR SUBB 
 4065 5564 01300000 		_ADR TOR
 4066 5568 35550000 		_ADR RBASE 
 4067 556c 31320000 	1:	_ADR CELLM 
 4068 5570 85300000 		_ADR DUPP 
 4069 5574 912F0000 		_ADR AT 
 4070 5578 69540000 		_ADR TDOT 
 4071 557c BD2F0000 		_ADR RFROM   
 4072 5580 F1310000 		_ADR ONEM 
 4073 5584 85300000 		_ADR DUPP
 4074 5588 01300000 		_ADR TOR 
 4075 558c F9330000 		_ADR ZEQUAL   
 4076 5590 372F0000 		_QBRAN 1b
 4076      6C550000 
 4077 5598 BD2F0000 		_ADR RFROM  
 4078 559c D1320000 		_ADR DDROP
 4079 55a0 7D400000 		_ADR CR   
 4080 55a4 D32C0000 		_UNNEST 
 4081              	
 4082              	/**************************
 4083              		TRACE ( -- )
 4084              		display stacks content 
 4085              	**************************/
 4086 55a8 00550000 		_HEADER TRACE,5,"TRACE"
 4086      05545241 
 4086      434500BF 
 4087 55b4 504700BF 		_NEST
 4088 55b8 7D400000 		_ADR CR 
 4089 55bc F72E0000 		_DOLIT '>' 
 4089      3E000000 
 4090 55c4 F72E0000 		_DOLIT 'S'
 4090      53000000 
 4091 55cc 952D0000 		_ADR EMIT 
 4092 55d0 952D0000 		_ADR EMIT  
 4093 55d4 05550000 		_ADR DOTS
 4094 55d8 F72E0000 		_DOLIT '>'
 4094      3E000000 
 4095 55e0 F72E0000 		_DOLIT 'R'
 4095      52000000 
 4096 55e8 952D0000 		_ADR EMIT 
 4097 55ec 952D0000 		_ADR EMIT 
 4098 55f0 45550000 		_ADR RDOT 
 4099 55f4 D32C0000 		_UNNEST 
 4100              	
 4101              	
 4102              	/****************************
 4103              	  >BODY  ( xt -- adr )
 4104              	  get parameter field address
 4105              	  from code field address 
 4106              	****************************/
 4107 55f8 AC550000 		_HEADER TOBODY,5,">BODY"
 4107      053E424F 
 4107      445900BF 
 4108 5604 06F10806 		add TOS,#8 
ARM GAS  forth.s 			page 188


 4109 5608 FDF760BB 		_NEXT 		
 4110              	
 4111              	/*****************************
 4112              	    >NAME	( ca -- na | F )
 4113              	 	Convert code address 
 4114              		to a name address.
 4115              	*****************************/
 4116 560c FC550000 		_HEADER TNAME,5,">NAME"
 4116      053E4E41 
 4116      4D4500BF 
 4117 5618 504700BF 		_NEST
 4118 561c 01300000 		_ADR	TOR			//  
 4119 5620 81360000 		_ADR	CNTXT			//  va
 4120 5624 912F0000 		_ADR	AT			//  na
 4121              	TNAM1:
 4122 5628 85300000 		_ADR	DUPP			//  na na
 4123 562c 372F0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4123      5C560000 
 4124 5634 85300000 		_ADR	DUPP			//  na na
 4125 5638 7D450000 		_ADR	NAMET			//  na ca
 4126 563c ED2F0000 		_ADR	RAT			//  na ca code
 4127 5640 2D310000 		_ADR	XORR			//  na f --
 4128 5644 372F0000 		_QBRAN	TNAM2
 4128      5C560000 
 4129 564c 31320000 		_ADR	CELLM			//  la 
 4130 5650 912F0000 		_ADR	AT			//  next_na
 4131 5654 5F2F0000 		_BRAN	TNAM1
 4131      28560000 
 4132              	TNAM2:	
 4133 565c BD2F0000 		_ADR	RFROM
 4134 5660 75300000 		_ADR	DROP			//  0|na --
 4135 5664 D32C0000 		_UNNEST			// 0
 4136              	
 4137              	/********************************
 4138              	    .ID	 ( na -- )
 4139              	 	Display the name at address.
 4140              	********************************/
 4141 5668 10560000 		_HEADER DOTID,3,".ID"
 4141      032E4944 
 4142 5670 504700BF 		_NEST
 4143 5674 95320000 		_ADR	QDUP			// if zero no name
 4144 5678 372F0000 		_QBRAN	DOTI1
 4144      98560000 
 4145 5680 21350000 		_ADR	COUNT
 4146 5684 F72E0000 		_DOLIT	0x1F
 4146      1F000000 
 4147 568c 05310000 		_ADR	ANDD			// mask lexicon bits
 4148 5690 49400000 		_ADR	TYPEE
 4149 5694 D32C0000 		_UNNEST			// display name string
 4150              	DOTI1:
 4151 5698 E5400000 		_DOTQP	9," {noName}"
 4151      09207B6E 
 4151      6F4E616D 
 4151      657D00BF 
 4152 56a8 D32C0000 		_UNNEST
 4153              	
 4154              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
ARM GAS  forth.s 			page 189


 4155              	.if WANT_SEE 
 4156              	/*******************************
 4157              	    SEE	 ( -- //  string> )
 4158              	 	A simple decompiler.
 4159              	*******************************/
 4160              		_HEADER SEE,3,"SEE"
 4161              		_NEST
 4162              		_ADR	TICK	//  ca --, starting address
 4163              		_ADR	CR	
 4164              		_DOLIT	20
 4165              		_ADR	TOR
 4166              	SEE1:
 4167              		_ADR	CELLP			//  a
 4168              		_ADR	DUPP			//  a a
 4169              		_ADR	DECOMP		//  a
 4170              		_DONXT	SEE1
 4171              		_ADR	DROP
 4172              		_UNNEST
 4173              	
 4174              	/*************************
 4175              	 	DECOMPILE ( a -- )
 4176              	 	Convert code in a.  
 4177              		Display name of command or as data.
 4178              	*************************************/
 4179              		_HEADER DECOMP,9,"DECOMPILE"
 4180              		_NEST
 4181              		_ADR	DUPP			//  a a
 4182              	// 	_ADR	TOR			//  a
 4183              		_ADR	AT			//  a code
 4184              		_ADR	DUPP			//  a code code
 4185              		_DOLIT	0xF800D000 //0xF800F800
 4186              		_ADR	ANDD
 4187              		_DOLIT	0xF000D000 //0xF800F000
 4188              		_ADR	EQUAL			//  a code ?
 4189              		_ADR	INVER 
 4190              		_QBRAN	DECOM2	//  not a command
 4191              		//  a valid_code --, extract address and display name
 4192              		MOVW	IP,#0xFFE
 4193              		MOV	WP,TOS
 4194              		LSL	TOS,TOS,#21		//  get bits 22-12
 4195              		ASR	TOS,TOS,#9		//  with sign extension
 4196              		LSR	WP,WP,#15		//  get bits 11-1
 4197              		AND	WP,WP,IP		//  retain only bits 11-1
 4198              		ORR	TOS,TOS,WP		//  get bits 22-1
 4199              		NOP
 4200              		_ADR	OVER			//  a offset a
 4201              		_ADR	PLUS			//  a target-4
 4202              		_ADR	CELLP			//  a target
 4203              		_ADR	TNAME			//  a na/0 --, is it a name?
 4204              		_ADR	QDUP			//  name address or zero
 4205              		_QBRAN	DECOM1
 4206              		_ADR	SPACE			//  a na
 4207              		_ADR	DOTID			//  a --, display name
 4208              	// 	_ADR	RFROM			//  a
 4209              		_ADR	DROP
 4210              		_UNNEST
 4211              	DECOM1:	// _ADR	RFROM		//  a
ARM GAS  forth.s 			page 190


 4212              		_ADR	AT			//  data
 4213              		_ADR	UDOT			//  display data
 4214              		_UNNEST
 4215              	DECOM2:
 4216              		_ADR	UDOT
 4217              	// 	_ADR	RFROM
 4218              		_ADR	DROP
 4219              		_UNNEST
 4220              	.endif 
 4221              	
 4222              	
 4223              	/*********************
 4224              	    WORDS	( -- )
 4225              	 	Display the names 
 4226              		in the context vocabulary.
 4227              	*******************************/
 4228 56ac 6C560000 		_HEADER WORDS,5,"WORDS"
 4228      05574F52 
 4228      445300BF 
 4229 56b8 504700BF 		_NEST
 4230 56bc 7D400000 		_ADR	CR
 4231 56c0 81360000 		_ADR	CNTXT
 4232 56c4 912F0000 		_ADR	AT			// only in context
 4233              	WORS1:
 4234 56c8 95320000 		_ADR	QDUP			// ?at end of list
 4235 56cc 372F0000 		_QBRAN	WORS2
 4235      F0560000 
 4236 56d4 85300000 		_ADR	DUPP
 4237 56d8 F53F0000 		_ADR	SPACE
 4238 56dc 71560000 		_ADR	DOTID			// display a name
 4239 56e0 31320000 		_ADR	CELLM
 4240 56e4 912F0000 		_ADR	AT
 4241 56e8 5F2F0000 		_BRAN	WORS1
 4241      C8560000 
 4242              	WORS2:
 4243 56f0 D32C0000 		_UNNEST
 4244              	
 4245              	
 4246              	/*************************
 4247              		MARK <string> ( -- )
 4248              	    create forget point 
 4249              		in dictionary 
 4250              	*************************/	
 4251 56f4 B0560000 		_HEADER MARK,4,"MARK"
 4251      044D4152 
 4251      4B0000BF 
 4252 5700 504700BF 		_NEST
 4253 5704 F9520000 		_ADR CREAT 
 4254 5708 ED510000 		_ADR DODOES 
 4255 570c D32C0000 		_UNNEST
 4256 5710 504700BF 		_NEST  
 4257 5714 BD2F0000 		_ADR RFROM 
 4258 5718 F72E0000 		_DOLIT 8
 4258      08000000 
 4259 5720 95310000 		_ADR SUBB
 4260 5724 19560000 		_ADR TNAME
 4261 5728 31320000 		_ADR CELLM
ARM GAS  forth.s 			page 191


 4262 572c 912F0000 		_ADR AT  
 4263 5730 C1360000 		_ADR LAST 
 4264 5734 7D2F0000 		_ADR STORE 
 4265 5738 D5500000 		_ADR OVERT
 4266 573c D32C0000 		_UNNEST 
 4267              	
 4268              	/*********************************
 4269              		ARRAY "name" ( n -- )
 4270              	    create an array of n elements 
 4271              	*********************************/
 4272 5740 F8560000 		_HEADER ARRAY,5,"ARRAY"
 4272      05415252 
 4272      415900BF 
 4273 574c 504700BF 		_NEST 
 4274 5750 5D450000 		_ADR	TOKEN
 4275 5754 D94F0000 		_ADR	SNAME
 4276 5758 D5500000 		_ADR	OVERT
 4277 575c DD2C0000 		_ADR	COMPI_NEST
 4278 5760 F72E0000 		_DOLIT	DO_ARRAY
 4278      8C570000 
 4279 5768 31510000 		_ADR	CALLC
 4280 576c F72E0000 		_DOLIT	UNNEST 
 4280      D22C0000 
 4281 5774 31510000 		_ADR	CALLC  
 4282 5778 F72E0000 		_DOLIT  4 
 4282      04000000 
 4283 5780 A5310000 		_ADR    STAR 
 4284 5784 A94B0000 		_ADR    ALLOT 
 4285 5788 D32C0000 		_UNNEST 	
 4286              	
 4287              	// does> du array
 4288              	DO_ARRAY:
 4289 578c 504700BF 		_NEST  
 4290 5790 F72E0000 		_DOLIT 4 
 4290      04000000 
 4291 5798 A5310000 		_ADR STAR  
 4292 579c ED2F0000 		_ADR RAT  
 4293 57a0 21320000 		_ADR CELLP 
 4294 57a4 85310000 		_ADR PLUS  
 4295 57a8 D32C0000 		_UNNEST 
 4296              	
 4297              	
 4298              	/****************
 4299              	  cold start
 4300              	*****************/
 4301              	
 4302              	/**********************************
 4303              	    VER	 ( -- n )
 4304              	 	Return the version 
 4305              		number of this implementation.
 4306              	hidden word used by COLD
 4307              	**********************************/
 4308              	VERSN:
 4309 57ac 504700BF 		_NEST
 4310 57b0 F72E0000 		_DOLIT	VER*256+EXT
 4310      00010000 
 4311 57b8 D32C0000 		_UNNEST
ARM GAS  forth.s 			page 192


 4312              	
 4313              	/*********************
 4314              	    hi	  ( -- )
 4315              	 	Display the sign-on 
 4316              		message.
 4317              	***********************/
 4318 57bc 44570000 		_HEADER HI,2,"HI"
 4318      02484900 
 4319 57c4 504700BF 		_NEST
 4320 57c8 7D400000 		_ADR	CR	// initialize I/O
 4321 57cc E5400000 		_DOTQP	17, "beyond Jupiter, v" 
 4321      11626579 
 4321      6F6E6420 
 4321      4A757069 
 4321      7465722C 
 4322 57e4 D5350000 		_ADR	BASE
 4323 57e8 912F0000 		_ADR	AT
 4324 57ec 593D0000 		_ADR	HEX	// save radix
 4325 57f0 AD570000 		_ADR	VERSN
 4326 57f4 3D3C0000 		_ADR	BDIGS
 4327 57f8 F72E0000 		_DOLIT  0 
 4327      00000000 
 4328 5800 893C0000 		_ADR	DIG
 4329 5804 893C0000 		_ADR	DIG
 4330 5808 F72E0000 		_DOLIT	'.'
 4330      2E000000 
 4331 5810 5D3C0000 		_ADR	HOLD
 4332 5814 A93C0000 		_ADR	DIGS
 4333 5818 053D0000 		_ADR	EDIGS
 4334 581c 49400000 		_ADR	TYPEE	// format version number
 4335 5820 D5350000 		_ADR	BASE
 4336 5824 7D2F0000 		_ADR	STORE
 4337 5828 7D400000 		_ADR	CR
 4338 582c D32C0000 		_UNNEST			// restore radix
 4339              	
 4340              	/***********************
 4341              	   HI_BOTH ( -- )
 4342              	   display sign-on 
 4343              	   on both CONSOLE
 4344              	***********************/
 4345              	HI_BOTH:
 4346 5830 504700BF 	    _NEST 
 4347 5834 3D0A0000 		_ADR LOCAL 
 4348 5838 6D0A0000 		_ADR CONSOLE 
 4349 583c C5570000 		_ADR HI 
 4350 5840 550A0000 		_ADR SERIAL 
 4351 5844 6D0A0000 		_ADR CONSOLE 
 4352 5848 C5570000 		_ADR HI
 4353 584c D32C0000 		_UNNEST 
 4354              	
 4355              	/**********************
 4356              	 check if PS2 keyboard 
 4357              	 present.
 4358              	**********************/
 4359              	PS2_QUERY: 
 4360 5850 504700BF 		_NEST 
 4361 5854 F72E0000 		_DOLIT 400 
ARM GAS  forth.s 			page 193


 4361      90010000 
 4362 585c 2D2E0000 		_ADR PAUSE
 4363 5860 5D180000 		_ADR PS2_QKEY
 4364 5864 372F0000 		_QBRAN 1f
 4364      80580000 
 4365 586c F72E0000 		_DOLIT BAT_OK 
 4365      AA000000 
 4366 5874 2D310000 		_ADR XORR 
 4367 5878 372F0000 		_QBRAN 9f 
 4367      C4580000 
 4368 5880 451A0000 	1:	_ADR KBD_RST
 4369 5884 F72E0000 		_DOLIT BAT_OK 
 4369      AA000000 
 4370 588c 2D310000 		_ADR XORR  
 4371 5890 372F0000 		_QBRAN 9f  
 4371      C4580000 
 4372              	// no ps2 keyboard 
 4373              	// swith to serial console
 4374 5898 7D400000 		_ADR CR 
 4375 589c E5400000 		_DOTQP 25,"no PS2 keyboard detected."
 4375      196E6F20 
 4375      50533220 
 4375      6B657962 
 4375      6F617264 
 4376 58bc 550A0000 		_ADR SERIAL 
 4377 58c0 6D0A0000 		_ADR CONSOLE 
 4378 58c4 D32C0000 	9:	_UNNEST 
 4379              	
 4380              	/*************************
 4381              	   check PA8 to 
 4382              	   select console 
 4383              	   PA8 -> low  LOCAL 
 4384              	   PA8 -> high SERIAL 
 4385              	*************************/
 4386              	IF_SENSE:
 4387 58c8 504700BF 		_NEST 
 4388 58cc 3D0A0000 		_ADR LOCAL 
 4389 58d0 F72E0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4389      10000240 
 4390 58d8 912F0000 		_ADR AT 
 4391 58dc F72E0000 		_DOLIT (1<<8)
 4391      00010000 
 4392 58e4 05310000 		_ADR ANDD 
 4393 58e8 372F0000 		_QBRAN 9f 
 4393      F4580000 
 4394 58f0 E1310000 		_ADR ONEP 
 4395 58f4 6D0A0000 	9:  _ADR CONSOLE 
 4396 58f8 D32C0000 		_UNNEST 
 4397              	
 4398              	/****************************
 4399              	   display READY on active
 4400              	   console
 4401              	***************************/
 4402              	READY:
 4403 58fc 504700BF 	    _NEST 
 4404 5900 E5400000 		_DOTQP 5,"READY"
 4404      05524541 
ARM GAS  forth.s 			page 194


 4404      445900BF 
 4405 590c 7D400000 		_ADR  CR 
 4406 5910 D32C0000 	    _UNNEST 
 4407              	
 4408              	/********************
 4409              	    COLD	( -- )
 4410              	 	The high level cold 
 4411              		start sequence.
 4412              	**************************/
 4413 5914 C0570000 		.word	LINK 
 4414              		LINK = . 
 4415 5918 04       	_LASTN:	.byte  4
 4416 5919 434F4C44 		.ascii "COLD"
 4417 591d 0000BF   		.p2align 2	
 4418              	COLD:
 4419 5920 00B5FAF7 		_CALL forth_init 
 4419      09FE5DF8 
 4419      04EB
 4420 592a DFF85CC0 		ldr IP,=COLD1 
 4421 592e FDF7CDB9 		_NEXT
 4422 5932 00BF     		.p2align 2 
 4423              	COLD1:
 4424 5934 F72E0000 		_DOLIT  0 
 4424      00000000 
 4425 593c 612E0000 		_ADR ULED // turn off user LED 
 4426 5940 F72E0000 		_DOLIT	UZERO
 4426      64080000 
 4427 5948 F72E0000 		_DOLIT	UPP
 4427      00000020 
 4428 5950 F72E0000 		_DOLIT	ULAST-UZERO
 4428      B8000000 
 4429 5958 153B0000 		_ADR	MOVE 			// initialize user area
 4430 595c E14A0000 		_ADR	PRESE			// initialize stack and TIB
 4431 5960 F11C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4432 5964 51580000 		_ADR 	PS2_QUERY  
 4433 5968 BD350000 		_ADR	TBOOT
 4434 596c C53A0000 		_ADR	ATEXE			// application boot
 4435 5970 D5500000 		_ADR	OVERT
 4436 5974 C9580000 		_ADR	IF_SENSE
 4437 5978 FD580000 		_ADR    READY 
 4438 597c 5F2F0000 		_BRAN	QUIT			// start interpretation
 4438      004B0000 
 4439              	COLD2:
 4440              		.p2align 2 	
 4441              	CTOP:
 4442 5984 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4443              	
 4444              	
 4445 5988 34590000 	  .end 
ARM GAS  forth.s 			page 195


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 196


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 197


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 198


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 199


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 200


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 BCHAR
          macros.inc:81     *ABS*:0000000000000024 TMP
          macros.inc:82     *ABS*:0000000000000028 CSPAN
          macros.inc:83     *ABS*:000000000000002c TOIN
ARM GAS  forth.s 			page 201


          macros.inc:84     *ABS*:0000000000000030 NTIBB
          macros.inc:85     *ABS*:0000000000000034 TIBUF
             forth.s:3141   .text:0000000000004a9c EVAL
          macros.inc:87     *ABS*:000000000000003c VHOLD
          macros.inc:88     *ABS*:0000000000000040 CTXT
          macros.inc:89     *ABS*:0000000000000044 FORTH_CTOP
          macros.inc:90     *ABS*:0000000000000048 USER_CTOP
          macros.inc:91     *ABS*:000000000000004c LASTN
          macros.inc:92     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:93     *ABS*:0000000000000050 RX_QUEUE
          macros.inc:94     *ABS*:0000000000000060 RX_HEAD
          macros.inc:95     *ABS*:0000000000000064 RX_TAIL
          macros.inc:96     *ABS*:0000000000000068 VID_CNTR
          macros.inc:97     *ABS*:000000000000006c VID_STATE
          macros.inc:98     *ABS*:0000000000000070 VID_FIELD
          macros.inc:99     *ABS*:0000000000000074 VID_BUFFER
          macros.inc:100    *ABS*:0000000000000078 KBD_STRUCT
          macros.inc:101    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:102    *ABS*:000000000000007c KBD_QUEUE
          macros.inc:103    *ABS*:000000000000008c KBD_QHEAD
          macros.inc:104    *ABS*:0000000000000090 KBD_QTAIL
          macros.inc:105    *ABS*:0000000000000094 ROW
          macros.inc:106    *ABS*:0000000000000098 COL
          macros.inc:107    *ABS*:000000000000009c BK_COLOR
          macros.inc:108    *ABS*:00000000000000a0 PEN_COLOR
          macros.inc:109    *ABS*:00000000000000a4 VFPSW
          macros.inc:110    *ABS*:00000000000000a8 VFBASE
          macros.inc:111    *ABS*:00000000000000ac BEEP_DTMR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000c64 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000948 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001540 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002ccc INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3162   .text:0000000000004ae0 PRESE
             forth.s:2335   .text:00000000000040e4 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002d18 CFSR
             forth.s:542    .text:0000000000003084 DUPP
             forth.s:477    .text:0000000000003000 TOR
ARM GAS  forth.s 			page 202


             forth.s:326    .text:0000000000002ef6 DOLIT
             forth.s:1196   .text:00000000000035d4 BASE
             forth.s:411    .text:0000000000002f7c STORE
             forth.s:2419   .text:00000000000041e0 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:448    .text:0000000000002fbc RFROM
             forth.s:606    .text:0000000000003104 ANDD
             forth.s:367    .text:0000000000002f36 QBRAN
             forth.s:145    .text:0000000000002d38 BFAR
             forth.s:179    .text:0000000000002d94 EMIT
             forth.s:2231   .text:0000000000003ff4 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002048 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2277   .text:000000000000407c CR
             forth.s:421    .text:0000000000002f90 AT
             forth.s:672    .text:0000000000003194 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2437   .text:0000000000004214 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:802    .text:0000000000003294 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:663    .text:0000000000003184 PLUS
             forth.s:1109   .text:0000000000003520 COUNT
             forth.s:2259   .text:0000000000004048 TYPEE
             forth.s:946    .text:00000000000033c8 CLZ
             forth.s:550    .text:0000000000003094 SWAP
             forth.s:654    .text:0000000000003174 LSHIFT
               fpu.s:123    .text:0000000000002068 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3174   .text:0000000000004b00 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3040   .text:0000000000004958 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
ARM GAS  forth.s 			page 203


              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:262    .text:0000000000002e60 ULED
             forth.s:1169   .text:000000000000358c MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:645    .text:000000000000315c RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000001fea fpu_init
          ser-term.s:56     .text:0000000000000976 ser_init
             tvout.s:74     .text:0000000000000bb4 tv_init
           ps2_kbd.s:307    .text:0000000000001760 kbd_init
         spi-flash.s:41     .text:0000000000001b74 flash_spi_init
             forth.s:4418   .text:0000000000005920 COLD
             forth.s:83     .text:0000000000002cc4 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:908    .text:000000000000091c ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4345   .text:0000000000005830 HI_BOTH
           ps2_kbd.s:396    .text:000000000000185c PS2_QKEY
             tvout.s:563    .text:0000000000001124 TV_EMIT
             forth.s:3078   .text:00000000000049b8 INTER
             forth.s:4415   .text:0000000000005918 _LASTN
             forth.s:4441   .text:0000000000005984 CTOP
             forth.s:4414   .text:0000000000005918 LINK
ARM GAS  forth.s 			page 204


              init.s:913    .text:000000000000091c $d
          ser-term.s:33     .text:0000000000000948 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000009ce $d
          ser-term.s:90     .text:00000000000009d2 _SER_QKEY
          ser-term.s:90     .text:00000000000009dc SER_QKEY
          ser-term.s:110    .text:0000000000000a08 $d
          ser-term.s:110    .text:0000000000000a0c _SER_EMIT
          ser-term.s:110    .text:0000000000000a18 SER_EMIT
          ser-term.s:124    .text:0000000000000a32 $d
          ser-term.s:124    .text:0000000000000a36 _LOCAL
          ser-term.s:124    .text:0000000000000a3c $t
          ser-term.s:124    .text:0000000000000a3c LOCAL
          ser-term.s:133    .text:0000000000000a48 $d
          ser-term.s:133    .text:0000000000000a4c _SERIAL
          ser-term.s:133    .text:0000000000000a54 SERIAL
          ser-term.s:142    .text:0000000000000a60 $d
          ser-term.s:142    .text:0000000000000a64 _CONSOLE
          ser-term.s:142    .text:0000000000000a6c $t
          ser-term.s:142    .text:0000000000000a6c CONSOLE
          ser-term.s:164    .text:0000000000000a8c $d
          ser-term.s:164    .text:0000000000000a90 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000a9c ANSI_PARAM
          ser-term.s:166    .text:0000000000000aa0 $d
             forth.s:713    .text:00000000000031e0 ONEP
             forth.s:1570   .text:000000000000391c SLMOD
             forth.s:396    .text:0000000000002f5e BRAN
             forth.s:721    .text:00000000000031f0 ONEM
             forth.s:90     .text:0000000000002cd2 UNNEST
          ser-term.s:191    .text:0000000000000b0c _ANSI_ESC
          ser-term.s:191    .text:0000000000000b14 ANSI_ESC
          ser-term.s:193    .text:0000000000000b18 $d
          ser-term.s:203    .text:0000000000000b38 _SER_AT
          ser-term.s:203    .text:0000000000000b40 SER_AT
          ser-term.s:205    .text:0000000000000b44 $d
          ser-term.s:219    .text:0000000000000b74 _SER_CLS
          ser-term.s:219    .text:0000000000000b7c $t
          ser-term.s:219    .text:0000000000000b7c SER_CLS
          ser-term.s:221    .text:0000000000000b80 $d
          ser-term.s:228    .text:0000000000000ba4 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
ARM GAS  forth.s 			page 205


             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000bb4 $t
             tvout.s:150    .text:0000000000000c90 state_vsync
             tvout.s:191    .text:0000000000000ce4 state_pre_video
             tvout.s:202    .text:0000000000000cf6 state_video_out
             tvout.s:237    .text:0000000000000d54 state_post_video
             tvout.s:254    .text:0000000000000d7a tv_isr_exit
             tvout.s:180    .text:0000000000000cca sync_end
             tvout.s:246    .text:0000000000000d66 frame_end
             tvout.s:264    .text:0000000000000d7c $d
             tvout.s:264    .text:0000000000000d80 _BACKCOLOR
             tvout.s:264    .text:0000000000000d8c BACKCOLOR
             tvout.s:271    .text:0000000000000d98 $d
             tvout.s:271    .text:0000000000000d9c _PENCOLOR
             tvout.s:271    .text:0000000000000da6 $t
             tvout.s:271    .text:0000000000000da8 PENCOLOR
             tvout.s:278    .text:0000000000000db4 $d
             tvout.s:278    .text:0000000000000db8 _CURSOR_COL
             tvout.s:278    .text:0000000000000dc0 CURSOR_COL
             tvout.s:285    .text:0000000000000dcc $d
             tvout.s:285    .text:0000000000000dd0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000dd4 $t
             tvout.s:285    .text:0000000000000dd4 CURSOR_ROW
             tvout.s:292    .text:0000000000000de0 $d
             tvout.s:292    .text:0000000000000de4 _ROWY
             tvout.s:292    .text:0000000000000dea $t
             tvout.s:292    .text:0000000000000dec ROWY
             tvout.s:299    .text:0000000000000df8 $d
             tvout.s:299    .text:0000000000000dfc _COLX
             tvout.s:299    .text:0000000000000e02 $t
             tvout.s:299    .text:0000000000000e04 COLX
             tvout.s:306    .text:0000000000000e10 $d
             tvout.s:306    .text:0000000000000e14 _FONT
             tvout.s:306    .text:0000000000000e1c FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000e28 $d
             tvout.s:313    .text:0000000000000e2c _VIDBUFF
             tvout.s:313    .text:0000000000000e34 $t
             tvout.s:313    .text:0000000000000e34 VIDBUFF
             tvout.s:325    .text:0000000000000e3e $d
             tvout.s:325    .text:0000000000000e42 _PLOT
             tvout.s:325    .text:0000000000000e48 PLOT
             tvout.s:373    .text:0000000000000ecc plot_op
             tvout.s:341    .text:0000000000000e74 op_back
             tvout.s:350    .text:0000000000000e8e op_pen
ARM GAS  forth.s 			page 206


             tvout.s:359    .text:0000000000000ea8 op_invert
             tvout.s:363    .text:0000000000000eb0 op_xor
             tvout.s:373    .text:0000000000000ecc $d
             tvout.s:378    .text:0000000000000ed4 _VSYNC
             tvout.s:378    .text:0000000000000eda $t
             tvout.s:378    .text:0000000000000edc VSYNC
             tvout.s:386    .text:0000000000000ee6 $d
             tvout.s:386    .text:0000000000000eea _CLS
             tvout.s:386    .text:0000000000000eee $t
             tvout.s:386    .text:0000000000000ef0 CLS
             tvout.s:410    .text:0000000000000f32 $d
             tvout.s:410    .text:0000000000000f36 _CLRLINE
             tvout.s:410    .text:0000000000000f3e $t
             tvout.s:410    .text:0000000000000f40 CLRLINE
             tvout.s:412    .text:0000000000000f44 $d
             forth.s:681    .text:00000000000031a4 STAR
             forth.s:1807   .text:0000000000003b5c FILL
             tvout.s:427    .text:0000000000000f78 _SCROLLUP
             tvout.s:427    .text:0000000000000f84 SCROLLUP
             tvout.s:429    .text:0000000000000f88 $d
             forth.s:1775   .text:0000000000003b14 MOVE
             tvout.s:448    .text:0000000000000fd0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000fdc SCROLLDOWN
             tvout.s:450    .text:0000000000000fe0 $d
             tvout.s:467    .text:0000000000001020 _TV_CRLF
             tvout.s:467    .text:0000000000001028 $t
             tvout.s:467    .text:0000000000001028 TV_CRLF
             tvout.s:482    .text:000000000000104a $d
             tvout.s:482    .text:000000000000104e _RIGHT
             tvout.s:482    .text:0000000000001054 $t
             tvout.s:482    .text:0000000000001054 RIGHT
             tvout.s:495    .text:0000000000001068 $d
             tvout.s:495    .text:000000000000106c _LEFT
             tvout.s:495    .text:0000000000001074 LEFT
             tvout.s:511    .text:00000000000010a0 FONT_PIXEL
             tvout.s:518    .text:00000000000010b0 INCR_X
             tvout.s:525    .text:00000000000010bc NEXT_PIXEL
             tvout.s:534    .text:00000000000010c4 CHAR_ROW
             tvout.s:536    .text:00000000000010c8 $d
             forth.s:852    .text:00000000000032f8 DDUP
             forth.s:468    .text:0000000000002fec RAT
             forth.s:348    .text:0000000000002f18 DONXT
             forth.s:843    .text:00000000000032e4 TDROP
             tvout.s:551    .text:0000000000001104 CHAR_FONT
             tvout.s:552    .text:0000000000001104 $t
             tvout.s:563    .text:0000000000001118 $d
             tvout.s:563    .text:000000000000111c _TV_EMIT
             tvout.s:563    .text:0000000000001124 $t
             tvout.s:565    .text:0000000000001128 $d
             forth.s:1005   .text:0000000000003444 ULESS
             tvout.s:593    .text:00000000000011ac CTRL_KEY
             forth.s:812    .text:00000000000032a8 ROT
             forth.s:439    .text:0000000000002fb0 CAT
             tvout.s:660    .text:0000000000001294 SHOW_CURSOR
             tvout.s:691    .text:000000000000131c HIDE_CURSOR
             forth.s:980    .text:000000000000340c EQUAL
             tvout.s:650    .text:0000000000001274 BACK_SPACE
ARM GAS  forth.s 			page 207


             forth.s:534    .text:0000000000003074 DROP
             tvout.s:618    .text:000000000000121c CAR_RET
             tvout.s:629    .text:0000000000001234 LN_FEED
             tvout.s:619    .text:000000000000121c $t
             tvout.s:620    .text:0000000000001220 $d
             tvout.s:630    .text:0000000000001234 $t
             tvout.s:631    .text:0000000000001238 $d
             forth.s:624    .text:000000000000312c XORR
             tvout.s:651    .text:0000000000001274 $t
             tvout.s:652    .text:0000000000001278 $d
             tvout.s:660    .text:0000000000001288 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001294 $t
             tvout.s:663    .text:0000000000001298 $d
             forth.s:794    .text:0000000000003284 TWOSL
             forth.s:429    .text:0000000000002f9c CSTOR
             forth.s:834    .text:00000000000032d0 DDROP
             tvout.s:691    .text:0000000000001310 _HIDE_CURSOR
             tvout.s:691    .text:000000000000131c $t
             tvout.s:694    .text:0000000000001320 $d
             forth.s:615    .text:0000000000003118 ORR
             tvout.s:704    .text:0000000000001348 _TV_AT
             tvout.s:704    .text:000000000000134e $t
             tvout.s:704    .text:0000000000001350 TV_AT
             tvout.s:719    .text:0000000000001374 $d
             tvout.s:719    .text:0000000000001378 _INPUT
             tvout.s:719    .text:000000000000137e $t
             tvout.s:719    .text:0000000000001380 INPUT
             tvout.s:721    .text:0000000000001384 $d
             forth.s:1719   .text:0000000000003a8c PAD
             forth.s:2986   .text:00000000000048a4 ACCEP
             forth.s:575    .text:00000000000030c4 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000013b0 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
ARM GAS  forth.s 			page 208


       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
ARM GAS  forth.s 			page 209


       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000013bc sc_ascii
         mcSaite.inc:100    .text:0000000000001470 shifted
         mcSaite.inc:151    .text:00000000000014d0 altchar
         mcSaite.inc:167    .text:00000000000014e0 extended
ARM GAS  forth.s 			page 210


         mcSaite.inc:191    .text:0000000000001508 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007a KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000079 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000078 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007b KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000153e $t
           ps2_kbd.s:179    .text:000000000000166a send_bit
           ps2_kbd.s:107    .text:00000000000015a0 start_bit
           ps2_kbd.s:118    .text:00000000000015c4 parity_bit
           ps2_kbd.s:125    .text:00000000000015d8 stop_bit
           ps2_kbd.s:152    .text:000000000000162e store_code
           ps2_kbd.s:253    .text:00000000000016fe do_async_key
           ps2_kbd.s:204    .text:00000000000016ae send_parity
           ps2_kbd.s:211    .text:00000000000016c0 send_stop
           ps2_kbd.s:218    .text:00000000000016ca rx_ack_bit
           ps2_kbd.s:236    .text:00000000000016ea is_async_key
           ps2_kbd.s:286    .text:000000000000174e async_keys
           ps2_kbd.s:378    .text:0000000000001834 table_scan
           ps2_kbd.s:260    .text:0000000000001710 set_async_key
           ps2_kbd.s:295    .text:000000000000175c async_jump
           ps2_kbd.s:265    .text:000000000000171e shift_key
           ps2_kbd.s:273    .text:000000000000172e set_reset
           ps2_kbd.s:268    .text:0000000000001724 ctrl_key
           ps2_kbd.s:271    .text:000000000000172a alt_key
           ps2_kbd.s:287    .text:000000000000174e $d
           ps2_kbd.s:340    .text:00000000000017dc $d
           ps2_kbd.s:340    .text:00000000000017e0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000017ea $t
           ps2_kbd.s:340    .text:00000000000017ec KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000017fc keycode
           ps2_kbd.s:365    .text:0000000000001824 wait_code
           ps2_kbd.s:396    .text:000000000000184e $d
           ps2_kbd.s:396    .text:0000000000001852 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000018a8 inkey_exit
           ps2_kbd.s:418    .text:00000000000018ac pause_key
           ps2_kbd.s:427    .text:00000000000018c2 do_modifiers
           ps2_kbd.s:436    .text:00000000000018da shift_down
           ps2_kbd.s:440    .text:00000000000018e0 altchar_down
           ps2_kbd.s:444    .text:00000000000018e6 ctrl_down
           ps2_kbd.s:452    .text:0000000000001902 do_capslock
           ps2_kbd.s:478    .text:0000000000001926 kbd_send
           ps2_kbd.s:553    .text:0000000000001a1a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001a38 $d
           ps2_kbd.s:567    .text:0000000000001a3c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001a44 $t
           ps2_kbd.s:567    .text:0000000000001a44 KBD_RST
ARM GAS  forth.s 			page 211


           ps2_kbd.s:591    .text:0000000000001a8e $d
           ps2_kbd.s:591    .text:0000000000001a92 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001a9a $t
           ps2_kbd.s:591    .text:0000000000001a9c KBD_LED
           ps2_kbd.s:616    .text:0000000000001af0 $d
           ps2_kbd.s:616    .text:0000000000001af4 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001b00 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001b2a $d
           ps2_kbd.s:633    .text:0000000000001b2e _WKEY
           ps2_kbd.s:633    .text:0000000000001b38 WKEY
           ps2_kbd.s:635    .text:0000000000001b3c $d
           ps2_kbd.s:640    .text:0000000000001b54 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001b74 $t
         spi-flash.s:85     .text:0000000000001c16 $d
         spi-flash.s:85     .text:0000000000001c1a _CHIP_SEL
         spi-flash.s:85     .text:0000000000001c24 CHIP_SEL
         spi-flash.s:97     .text:0000000000001c42 $d
         spi-flash.s:97     .text:0000000000001c46 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001c50 $t
         spi-flash.s:97     .text:0000000000001c50 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001c7e $d
         spi-flash.s:113    .text:0000000000001c82 _RD_BYTE
         spi-flash.s:113    .text:0000000000001c8a $t
         spi-flash.s:113    .text:0000000000001c8c RD_BYTE
         spi-flash.s:133    .text:0000000000001cb4 $d
         spi-flash.s:133    .text:0000000000001cb8 _WR_BYTE
         spi-flash.s:133    .text:0000000000001cc0 $t
         spi-flash.s:133    .text:0000000000001cc0 WR_BYTE
         spi-flash.s:151    .text:0000000000001ce4 $d
         spi-flash.s:151    .text:0000000000001ce8 _WR_DIS
         spi-flash.s:151    .text:0000000000001cf0 WR_DIS
         spi-flash.s:153    .text:0000000000001cf4 $d
         spi-flash.s:163    .text:0000000000001d10 _WR_ENBL
         spi-flash.s:163    .text:0000000000001d18 $t
         spi-flash.s:163    .text:0000000000001d18 WR_ENBL
         spi-flash.s:165    .text:0000000000001d1c $d
         spi-flash.s:175    .text:0000000000001d38 _RD_SR
         spi-flash.s:175    .text:0000000000001d3e $t
         spi-flash.s:175    .text:0000000000001d40 RD_SR
         spi-flash.s:177    .text:0000000000001d44 $d
         spi-flash.s:185    .text:0000000000001d68 sr_cmd
         spi-flash.s:191    .text:0000000000001d6f _SEND_ADR
         spi-flash.s:191    .text:0000000000001d78 $t
         spi-flash.s:191    .text:0000000000001d78 SEND_ADR
         spi-flash.s:193    .text:0000000000001d7c $d
         spi-flash.s:208    .text:0000000000001db0 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001dba $t
         spi-flash.s:208    .text:0000000000001dbc WAIT_DONE
         spi-flash.s:210    .text:0000000000001dc0 $d
         spi-flash.s:223    .text:0000000000001df0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001dfa $t
         spi-flash.s:223    .text:0000000000001dfc ERASE_BLK
         spi-flash.s:225    .text:0000000000001e00 $d
ARM GAS  forth.s 			page 212


         spi-flash.s:238    .text:0000000000001e28 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001e34 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001e38 $d
         spi-flash.s:256    .text:0000000000001e68 _RD_BLK
         spi-flash.s:256    .text:0000000000001e70 RD_BLK
         spi-flash.s:258    .text:0000000000001e74 $d
         spi-flash.s:278    .text:0000000000001ebc _WR_BLK
         spi-flash.s:278    .text:0000000000001ec4 WR_BLK
         spi-flash.s:280    .text:0000000000001ec8 $d
             forth.s:2499   .text:00000000000042bc HDOT
         spi-flash.s:316    .text:0000000000001f20 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001f2c $t
         spi-flash.s:316    .text:0000000000001f2c SEARCH_FILE
         spi-flash.s:319    .text:0000000000001f30 $d
         spi-flash.s:325    .text:0000000000001f38 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001f44 ERASE_FILE
         spi-flash.s:328    .text:0000000000001f48 $d
         spi-flash.s:334    .text:0000000000001f50 _DIR
         spi-flash.s:334    .text:0000000000001f54 $t
         spi-flash.s:334    .text:0000000000001f54 DIR
         spi-flash.s:337    .text:0000000000001f58 $d
         spi-flash.s:343    .text:0000000000001f60 _SAVE
         spi-flash.s:343    .text:0000000000001f68 SAVE
         spi-flash.s:346    .text:0000000000001f6c $d
         spi-flash.s:352    .text:0000000000001f74 _LOAD
         spi-flash.s:352    .text:0000000000001f7c LOAD
         spi-flash.s:355    .text:0000000000001f80 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001fa8 p10
               fpu.s:59     .text:0000000000001fd4 _PWR10
               fpu.s:59     .text:0000000000001fda $t
               fpu.s:59     .text:0000000000001fdc PWR10
               fpu.s:90     .text:0000000000002008 $d
               fpu.s:90     .text:000000000000200c _FDI
               fpu.s:90     .text:0000000000002010 $t
               fpu.s:90     .text:0000000000002010 FDI
               fpu.s:100    .text:0000000000002022 $d
               fpu.s:100    .text:0000000000002026 _FEI
               fpu.s:100    .text:000000000000202a $t
               fpu.s:100    .text:000000000000202c FEI
               fpu.s:110    .text:000000000000203e $d
               fpu.s:110    .text:0000000000002042 _FPSCR
               fpu.s:110    .text:0000000000002048 $t
               fpu.s:123    .text:0000000000002058 $d
               fpu.s:123    .text:000000000000205c _CLR_FPSCR
               fpu.s:123    .text:0000000000002066 $t
               fpu.s:136    .text:0000000000002080 $d
               fpu.s:136    .text:0000000000002084 _TOS0
               fpu.s:136    .text:0000000000002088 $t
               fpu.s:136    .text:0000000000002088 TOS0
               fpu.s:145    .text:0000000000002094 $d
               fpu.s:145    .text:0000000000002098 _TOS1
               fpu.s:145    .text:000000000000209c $t
               fpu.s:145    .text:000000000000209c TOS1
ARM GAS  forth.s 			page 213


               fpu.s:154    .text:00000000000020a8 $d
               fpu.s:154    .text:00000000000020ac _TOS2
               fpu.s:154    .text:00000000000020b0 $t
               fpu.s:154    .text:00000000000020b0 TOS2
               fpu.s:163    .text:00000000000020bc $d
               fpu.s:163    .text:00000000000020c0 _S0FROM
               fpu.s:163    .text:00000000000020c4 $t
               fpu.s:163    .text:00000000000020c4 S0FROM
               fpu.s:172    .text:00000000000020d0 $d
               fpu.s:172    .text:00000000000020d4 _S1FROM
               fpu.s:172    .text:00000000000020d8 $t
               fpu.s:172    .text:00000000000020d8 S1FROM
               fpu.s:181    .text:00000000000020e4 $d
               fpu.s:181    .text:00000000000020e8 _S2FROM
               fpu.s:181    .text:00000000000020ec $t
               fpu.s:181    .text:00000000000020ec S2FROM
               fpu.s:192    .text:00000000000020f8 $d
               fpu.s:192    .text:00000000000020fc _FTOS
               fpu.s:192    .text:0000000000002100 $t
               fpu.s:192    .text:0000000000002100 FTOS
               fpu.s:202    .text:0000000000002110 $d
               fpu.s:202    .text:0000000000002114 _TRUNC
               fpu.s:202    .text:000000000000211a $t
               fpu.s:202    .text:000000000000211c TRUNC
               fpu.s:212    .text:000000000000212c $d
               fpu.s:212    .text:0000000000002130 _STOF
               fpu.s:212    .text:0000000000002134 $t
               fpu.s:212    .text:0000000000002134 STOF
               fpu.s:222    .text:0000000000002144 $d
               fpu.s:222    .text:0000000000002148 _FPLUS
               fpu.s:222    .text:000000000000214c FPLUS
               fpu.s:235    .text:0000000000002164 $d
               fpu.s:235    .text:0000000000002168 _FSUBB
               fpu.s:235    .text:000000000000216c FSUBB
               fpu.s:249    .text:0000000000002184 $d
               fpu.s:249    .text:0000000000002188 _FSTAR
               fpu.s:249    .text:000000000000218c FSTAR
               fpu.s:262    .text:00000000000021a4 $d
               fpu.s:262    .text:00000000000021a8 _FSLH
               fpu.s:262    .text:00000000000021ac FSLH
               fpu.s:275    .text:00000000000021c4 $d
               fpu.s:275    .text:00000000000021c8 _FNEG
               fpu.s:275    .text:00000000000021d0 $t
               fpu.s:275    .text:00000000000021d0 FNEG
               fpu.s:285    .text:00000000000021e0 $d
               fpu.s:285    .text:00000000000021e4 _FABS
               fpu.s:285    .text:00000000000021ec FABS
               fpu.s:297    .text:0000000000002200 $d
               fpu.s:297    .text:0000000000002204 _SQRT
               fpu.s:297    .text:000000000000220c SQRT
               fpu.s:307    .text:000000000000221c $d
               fpu.s:307    .text:0000000000002220 _FZLESS
               fpu.s:307    .text:0000000000002224 $t
               fpu.s:307    .text:0000000000002224 FZLESS
               fpu.s:319    .text:000000000000223c $d
               fpu.s:319    .text:0000000000002240 _FGREAT
               fpu.s:319    .text:0000000000002244 FGREAT
ARM GAS  forth.s 			page 214


               fpu.s:321    .text:0000000000002248 $d
             forth.s:920    .text:0000000000003390 INVER
               fpu.s:330    .text:000000000000225c _FLESS
               fpu.s:330    .text:0000000000002260 FLESS
               fpu.s:332    .text:0000000000002264 $d
               fpu.s:340    .text:0000000000002274 _FMIN
               fpu.s:340    .text:000000000000227c FMIN
               fpu.s:342    .text:0000000000002280 $d
               fpu.s:353    .text:00000000000022a4 _FMAX
               fpu.s:353    .text:00000000000022ac FMAX
               fpu.s:355    .text:00000000000022b0 $d
               fpu.s:368    .text:00000000000022d4 _FSIGN
               fpu.s:368    .text:00000000000022da $t
               fpu.s:368    .text:00000000000022dc FSIGN
               fpu.s:379    .text:00000000000022f0 $d
               fpu.s:379    .text:00000000000022f4 _FEXP
               fpu.s:379    .text:00000000000022fc FEXP
               fpu.s:390    .text:0000000000002314 $d
               fpu.s:390    .text:0000000000002318 _FMANT
               fpu.s:390    .text:000000000000231e $t
               fpu.s:390    .text:0000000000002320 FMANT
               fpu.s:403    .text:000000000000233c $d
               fpu.s:403    .text:0000000000002340 _PI
               fpu.s:403    .text:0000000000002344 PI
               fpu.s:412    .text:0000000000002354 $d
               fpu.s:412    .text:0000000000002358 _LN2
               fpu.s:412    .text:000000000000235c $t
               fpu.s:412    .text:000000000000235c LN2
               fpu.s:421    .text:000000000000236c $d
               fpu.s:421    .text:0000000000002370 _LN10
               fpu.s:421    .text:0000000000002378 LN10
               fpu.s:431    .text:0000000000002388 $d
               fpu.s:431    .text:000000000000238c _LOG2
               fpu.s:431    .text:0000000000002394 LOG2
               fpu.s:441    .text:00000000000023a4 $d
               fpu.s:441    .text:00000000000023a8 _LOG2TO10
               fpu.s:441    .text:00000000000023b0 $t
               fpu.s:441    .text:00000000000023b0 LOG2TO10
               fpu.s:443    .text:00000000000023b4 $d
             forth.s:598    .text:00000000000030f4 ZLESS
               fpu.s:453    .text:00000000000023e0 $d
            strtof.s:29     .text:00000000000023ec p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:0000000000002404 p10p2at
            strtof.s:44     .text:0000000000002404 $t
            strtof.s:45     .text:0000000000002408 $d
            strtof.s:57     .text:0000000000002428 bit_state
            strtof.s:58     .text:0000000000002428 $t
            strtof.s:59     .text:000000000000242c $d
             forth.s:1680   .text:0000000000003a40 PICK
            strtof.s:76     .text:000000000000244c mant_div
            strtof.s:77     .text:000000000000244c $t
            strtof.s:78     .text:0000000000002450 $d
            strtof.s:79     .text:0000000000002454 div_loop
ARM GAS  forth.s 			page 215


             forth.s:1041   .text:000000000000348c GREAT
            strtof.s:107    .text:00000000000024a0 mant_mult
            strtof.s:108    .text:00000000000024a0 $t
            strtof.s:109    .text:00000000000024a4 $d
            strtof.s:110    .text:00000000000024a8 mult_loop
            strtof.s:134    .text:00000000000024f4 exp_adjust
            strtof.s:135    .text:00000000000024f4 $t
            strtof.s:136    .text:00000000000024f8 $d
             forth.s:823    .text:00000000000032bc NROT
            strtof.s:148    .text:0000000000002534 pos_exp
             forth.s:936    .text:00000000000033b4 ABSS
            strtof.s:159    .text:0000000000002544 integer
            strtof.s:160    .text:0000000000002544 $t
            strtof.s:161    .text:0000000000002548 $d
             forth.s:560    .text:00000000000030a8 DSWAP
             forth.s:2074   .text:0000000000003e28 TONBR
             forth.s:486    .text:0000000000003014 DTOR
             forth.s:457    .text:0000000000002fd0 DRFROM
            strtof.s:178    .text:0000000000002574 decimals
            strtof.s:179    .text:0000000000002574 $t
            strtof.s:180    .text:0000000000002578 $d
             forth.s:1064   .text:00000000000034b8 MIN
            strtof.s:204    .text:00000000000025cc exponent
            strtof.s:205    .text:00000000000025cc $t
            strtof.s:206    .text:00000000000025d0 $d
             forth.s:2127   .text:0000000000003ebe NEGQ
             forth.s:928    .text:00000000000033a4 NEGAT
            strtof.s:226    .text:000000000000260c _FLOATQ
            strtof.s:226    .text:0000000000002614 FLOATQ
            strtof.s:230    .text:0000000000002618 $d
             forth.s:2022   .text:0000000000003d9c DECIM
             forth.s:381    .text:0000000000002f4a TBRAN
            strtof.s:258    .text:0000000000002698 expect_dot
             forth.s:2107   .text:0000000000003e9c CHARQ
            strtof.s:262    .text:00000000000026ac get_fraction
            strtof.s:272    .text:00000000000026dc get_exponent
            strtof.s:290    .text:0000000000002730 error2
            strtof.s:277    .text:00000000000026f0 build_float
            strtof.s:298    .text:0000000000002750 error4
            strtof.s:304    .text:0000000000002764 restore_base
            strtof.s:302    .text:000000000000275c e4
            strtof.s:293    .text:000000000000273c error3
              ftoa.s:28     .text:0000000000002774 rounding
              ftoa.s:48     .text:000000000000279c _ROUND
              ftoa.s:48     .text:00000000000027a2 $t
              ftoa.s:48     .text:00000000000027a4 ROUND
              ftoa.s:50     .text:00000000000027a8 $d
             forth.s:1053   .text:00000000000034a4 MAX
              ftoa.s:67     .text:00000000000027e8 _CSTOP
              ftoa.s:67     .text:00000000000027ec $t
              ftoa.s:67     .text:00000000000027ec CSTOP
              ftoa.s:79     .text:00000000000027f8 ITOA
              ftoa.s:81     .text:00000000000027fc $d
             forth.s:1427   .text:00000000000037f4 STOD
             forth.s:875    .text:000000000000332c DABS
             forth.s:1885   .text:0000000000003c3c BDIGS
             forth.s:1929   .text:0000000000003ca8 DIGS
ARM GAS  forth.s 			page 216


             forth.s:1947   .text:0000000000003cdc SIGN
             forth.s:1961   .text:0000000000003d04 EDIGS
             forth.s:1755   .text:0000000000003ae4 CMOVE
              ftoa.s:114    .text:0000000000002850 _SCALEUP
              ftoa.s:114    .text:0000000000002858 $t
              ftoa.s:114    .text:0000000000002858 SCALEUP
              ftoa.s:116    .text:000000000000285c $d
              ftoa.s:148    .text:00000000000028b8 _SCALEDOWN
              ftoa.s:148    .text:00000000000028c2 $t
              ftoa.s:148    .text:00000000000028c4 SCALEDOWN
              ftoa.s:150    .text:00000000000028c8 $d
              ftoa.s:181    .text:0000000000002920 EPART
              ftoa.s:182    .text:0000000000002920 $t
              ftoa.s:183    .text:0000000000002924 $d
              ftoa.s:206    .text:0000000000002954 FPART
              ftoa.s:207    .text:0000000000002954 $t
              ftoa.s:208    .text:0000000000002958 $d
              ftoa.s:255    .text:00000000000029f8 IPART
              ftoa.s:256    .text:00000000000029f8 $t
              ftoa.s:257    .text:00000000000029fc $d
              ftoa.s:313    .text:0000000000002abc _FTOA
              ftoa.s:313    .text:0000000000002ac0 $t
              ftoa.s:313    .text:0000000000002ac0 FTOA
              ftoa.s:315    .text:0000000000002ac4 $d
              ftoa.s:365    .text:0000000000002ba4 nan
             forth.s:761    .text:0000000000003240 BLANK
              ftoa.s:348    .text:0000000000002b54 zdz
              ftoa.s:387    .text:0000000000002c10 infinity
              ftoa.s:412    .text:0000000000002c58 _FDOT
              ftoa.s:412    .text:0000000000002c5c FDOT
              ftoa.s:415    .text:0000000000002c60 $d
             forth.s:1708   .text:0000000000003a74 HERE
             forth.s:3233   .text:0000000000004ba8 ALLOT
             forth.s:80     .text:0000000000002cc4 $t
             forth.s:104    .text:0000000000002cdc COMPI_NEST
             forth.s:117    .text:0000000000002cfa TSTDIN
             forth.s:124    .text:0000000000002d04 TSTDOUT
             forth.s:133    .text:0000000000002d0e $d
             forth.s:133    .text:0000000000002d12 _CFSR
             forth.s:145    .text:0000000000002d2e $d
             forth.s:145    .text:0000000000002d32 _BFAR
             forth.s:157    .text:0000000000002d4e $d
             forth.s:157    .text:0000000000002d52 _QKEY
             forth.s:157    .text:0000000000002d58 QKEY
             forth.s:159    .text:0000000000002d5c $d
             forth.s:1742   .text:0000000000003ac4 ATEXE
             forth.s:167    .text:0000000000002d6c _KEY
             forth.s:167    .text:0000000000002d70 $t
             forth.s:167    .text:0000000000002d70 KEY
             forth.s:169    .text:0000000000002d74 KEY1
             forth.s:170    .text:0000000000002d74 $d
             forth.s:179    .text:0000000000002d8c _EMIT
             forth.s:181    .text:0000000000002d98 $d
             forth.s:215    .text:0000000000002da8 _RAND
             forth.s:215    .text:0000000000002db0 RAND
             forth.s:217    .text:0000000000002db4 $d
             forth.s:1160   .text:0000000000003574 SEED
ARM GAS  forth.s 			page 217


             forth.s:1583   .text:000000000000393c MODD
             forth.s:246    .text:0000000000002e24 _PAUSE
             forth.s:246    .text:0000000000002e2a $t
             forth.s:246    .text:0000000000002e2c PAUSE
             forth.s:248    .text:0000000000002e30 $d
             forth.s:1178   .text:00000000000035a4 TIMER
             forth.s:250    .text:0000000000002e38 PAUSE_LOOP
             forth.s:255    .text:0000000000002e50 PAUSE_EXIT
             forth.s:262    .text:0000000000002e58 _ULED
             forth.s:271    .text:0000000000002e7c ULED_OFF
             forth.s:279    .text:0000000000002e80 $d
             forth.s:279    .text:0000000000002e84 _JOYSTK
             forth.s:279    .text:0000000000002e8c JOYSTK
             forth.s:281    .text:0000000000002e90 $d
             forth.s:293    .text:0000000000002eb0 _BEEP
             forth.s:293    .text:0000000000002eb8 BEEP
             forth.s:318    .text:0000000000002eec $d
             forth.s:318    .text:0000000000002ef0 _NOP
             forth.s:318    .text:0000000000002ef4 $t
             forth.s:318    .text:0000000000002ef4 NOP
             forth.s:335    .text:0000000000002f00 $d
             forth.s:335    .text:0000000000002f04 _EXECU
             forth.s:335    .text:0000000000002f0c $t
             forth.s:335    .text:0000000000002f0c EXECU
             forth.s:355    .text:0000000000002f28 NEXT1
             forth.s:373    .text:0000000000002f44 QBRAN1
             forth.s:404    .text:0000000000002f64 $d
             forth.s:404    .text:0000000000002f68 _EXIT
             forth.s:404    .text:0000000000002f70 EXIT
             forth.s:405    .text:0000000000002f70 $d
             forth.s:411    .text:0000000000002f78 _STORE
             forth.s:411    .text:0000000000002f7a $t
             forth.s:421    .text:0000000000002f88 $d
             forth.s:421    .text:0000000000002f8c _AT
             forth.s:421    .text:0000000000002f8e $t
             forth.s:429    .text:0000000000002f94 $d
             forth.s:429    .text:0000000000002f98 _CSTOR
             forth.s:439    .text:0000000000002fa8 $d
             forth.s:439    .text:0000000000002fac _CAT
             forth.s:448    .text:0000000000002fb4 $d
             forth.s:448    .text:0000000000002fb8 _RFROM
             forth.s:457    .text:0000000000002fc6 $d
             forth.s:457    .text:0000000000002fca _DRFROM
             forth.s:457    .text:0000000000002fce $t
             forth.s:468    .text:0000000000002fe2 $d
             forth.s:468    .text:0000000000002fe6 _RAT
             forth.s:477    .text:0000000000002ff6 $d
             forth.s:477    .text:0000000000002ffa _TOR
             forth.s:486    .text:000000000000300a $d
             forth.s:486    .text:000000000000300e _DTOR
             forth.s:486    .text:0000000000003012 $t
             forth.s:498    .text:0000000000003026 $d
             forth.s:498    .text:000000000000302a _RPSTOR
             forth.s:498    .text:000000000000302e $t
             forth.s:498    .text:0000000000003030 RPSTOR
             forth.s:507    .text:0000000000003038 $d
             forth.s:507    .text:000000000000303c _SPSTOR
ARM GAS  forth.s 			page 218


             forth.s:507    .text:0000000000003040 $t
             forth.s:507    .text:0000000000003040 SPSTOR
             forth.s:516    .text:0000000000003048 $d
             forth.s:516    .text:000000000000304c _SPAT
             forth.s:516    .text:0000000000003050 $t
             forth.s:516    .text:0000000000003050 SPAT
             forth.s:525    .text:0000000000003058 $d
             forth.s:525    .text:000000000000305c _RPAT
             forth.s:525    .text:0000000000003060 $t
             forth.s:525    .text:0000000000003060 RPAT
             forth.s:534    .text:0000000000003068 $d
             forth.s:534    .text:000000000000306c _DROP
             forth.s:542    .text:000000000000307a $d
             forth.s:542    .text:000000000000307e _DUPP
             forth.s:542    .text:0000000000003082 $t
             forth.s:550    .text:000000000000308a $d
             forth.s:550    .text:000000000000308e _SWAP
             forth.s:560    .text:000000000000309c $d
             forth.s:560    .text:00000000000030a0 _DSWAP
             forth.s:560    .text:00000000000030a6 $t
             forth.s:575    .text:00000000000030b8 $d
             forth.s:575    .text:00000000000030bc _OVER
             forth.s:584    .text:00000000000030cc $d
             forth.s:584    .text:00000000000030d0 _DOVER
             forth.s:584    .text:00000000000030d6 $t
             forth.s:584    .text:00000000000030d8 DOVER
             forth.s:598    .text:00000000000030ea $d
             forth.s:598    .text:00000000000030ee _ZLESS
             forth.s:606    .text:00000000000030fa $d
             forth.s:606    .text:00000000000030fe _ANDD
             forth.s:606    .text:0000000000003102 $t
             forth.s:615    .text:000000000000310e $d
             forth.s:615    .text:0000000000003112 _ORR
             forth.s:624    .text:0000000000003122 $d
             forth.s:624    .text:0000000000003126 _XORR
             forth.s:624    .text:000000000000312a $t
             forth.s:633    .text:0000000000003136 $d
             forth.s:633    .text:000000000000313a _UPLUS
             forth.s:633    .text:000000000000313e $t
             forth.s:633    .text:0000000000003140 UPLUS
             forth.s:645    .text:0000000000003150 $d
             forth.s:645    .text:0000000000003154 _RSHIFT
             forth.s:654    .text:0000000000003166 $d
             forth.s:654    .text:000000000000316a _LSHIFT
             forth.s:663    .text:000000000000317e $d
             forth.s:663    .text:0000000000003182 _PLUS
             forth.s:663    .text:0000000000003184 $t
             forth.s:672    .text:000000000000318c $d
             forth.s:672    .text:0000000000003190 _SUBB
             forth.s:672    .text:0000000000003192 $t
             forth.s:681    .text:000000000000319e $d
             forth.s:681    .text:00000000000031a2 _STAR
             forth.s:681    .text:00000000000031a4 $t
             forth.s:690    .text:00000000000031ae $d
             forth.s:690    .text:00000000000031b2 _UMSTA
             forth.s:690    .text:00000000000031b6 $t
             forth.s:690    .text:00000000000031b8 UMSTA
ARM GAS  forth.s 			page 219


             forth.s:702    .text:00000000000031c4 $d
             forth.s:702    .text:00000000000031c8 _MSTAR
             forth.s:702    .text:00000000000031cc MSTAR
             forth.s:713    .text:00000000000031d8 $d
             forth.s:713    .text:00000000000031dc _ONEP
             forth.s:721    .text:00000000000031e6 $d
             forth.s:721    .text:00000000000031ea _ONEM
             forth.s:729    .text:00000000000031f6 $d
             forth.s:729    .text:00000000000031fa _TWOP
             forth.s:729    .text:0000000000003200 TWOP
             forth.s:737    .text:0000000000003206 $d
             forth.s:737    .text:000000000000320a _TWOM
             forth.s:737    .text:0000000000003210 TWOM
             forth.s:745    .text:0000000000003216 $d
             forth.s:745    .text:000000000000321a _CELLP
             forth.s:745    .text:0000000000003220 $t
             forth.s:745    .text:0000000000003220 CELLP
             forth.s:753    .text:0000000000003226 $d
             forth.s:753    .text:000000000000322a _CELLM
             forth.s:753    .text:0000000000003230 $t
             forth.s:753    .text:0000000000003230 CELLM
             forth.s:761    .text:0000000000003236 $d
             forth.s:761    .text:000000000000323a _BLANK
             forth.s:770    .text:000000000000324a $d
             forth.s:770    .text:000000000000324e _CELLS
             forth.s:770    .text:0000000000003254 $t
             forth.s:770    .text:0000000000003254 CELLS
             forth.s:778    .text:000000000000325a $d
             forth.s:778    .text:000000000000325e _CELLSL
             forth.s:778    .text:0000000000003264 $t
             forth.s:778    .text:0000000000003264 CELLSL
             forth.s:786    .text:000000000000326a $d
             forth.s:786    .text:000000000000326e _TWOST
             forth.s:786    .text:0000000000003274 TWOST
             forth.s:794    .text:000000000000327a $d
             forth.s:794    .text:000000000000327e _TWOSL
             forth.s:802    .text:000000000000328a $d
             forth.s:802    .text:000000000000328e _QDUP
             forth.s:812    .text:000000000000329e $d
             forth.s:812    .text:00000000000032a2 _ROT
             forth.s:812    .text:00000000000032a6 $t
             forth.s:823    .text:00000000000032b2 $d
             forth.s:823    .text:00000000000032b6 _NROT
             forth.s:834    .text:00000000000032c6 $d
             forth.s:834    .text:00000000000032ca _DDROP
             forth.s:834    .text:00000000000032d0 $t
             forth.s:843    .text:00000000000032da $d
             forth.s:843    .text:00000000000032de _TDROP
             forth.s:843    .text:00000000000032e4 $t
             forth.s:852    .text:00000000000032ee $d
             forth.s:852    .text:00000000000032f2 _DDUP
             forth.s:862    .text:0000000000003304 $d
             forth.s:862    .text:0000000000003308 _DPLUS
             forth.s:862    .text:000000000000330c DPLUS
             forth.s:875    .text:0000000000003320 $d
             forth.s:875    .text:0000000000003324 _DABS
             forth.s:891    .text:0000000000003348 $d
ARM GAS  forth.s 			page 220


             forth.s:891    .text:000000000000334c _UDGREAT
             forth.s:891    .text:0000000000003350 $t
             forth.s:891    .text:0000000000003350 UDGREAT
             forth.s:908    .text:000000000000336c $d
             forth.s:908    .text:0000000000003370 _DZEQUAL
             forth.s:908    .text:0000000000003374 $t
             forth.s:908    .text:0000000000003374 DZEQUAL
             forth.s:920    .text:0000000000003386 $d
             forth.s:920    .text:000000000000338a _INVER
             forth.s:920    .text:000000000000338e $t
             forth.s:928    .text:0000000000003396 $d
             forth.s:928    .text:000000000000339a _NEGAT
             forth.s:936    .text:00000000000033aa $d
             forth.s:936    .text:00000000000033ae _ABSS
             forth.s:936    .text:00000000000033b2 $t
             forth.s:946    .text:00000000000033be $d
             forth.s:946    .text:00000000000033c2 _CLZ
             forth.s:946    .text:00000000000033c6 $t
             forth.s:954    .text:00000000000033ce $d
             forth.s:954    .text:00000000000033d2 _CTZ
             forth.s:954    .text:00000000000033d6 $t
             forth.s:954    .text:00000000000033d8 CTZ
             forth.s:969    .text:00000000000033f0 $d
             forth.s:969    .text:00000000000033f4 _ZEQUAL
             forth.s:969    .text:00000000000033f8 ZEQUAL
             forth.s:980    .text:0000000000003406 $d
             forth.s:980    .text:000000000000340a _EQUAL
             forth.s:980    .text:000000000000340c $t
             forth.s:992    .text:000000000000341c $d
             forth.s:992    .text:0000000000003420 _DIFF
             forth.s:992    .text:0000000000003424 DIFF
             forth.s:1005   .text:000000000000343c $d
             forth.s:1005   .text:0000000000003440 _ULESS
             forth.s:1017   .text:0000000000003454 $d
             forth.s:1017   .text:0000000000003458 _LESS
             forth.s:1017   .text:000000000000345a $t
             forth.s:1017   .text:000000000000345c LESS
             forth.s:1029   .text:000000000000346c $d
             forth.s:1029   .text:0000000000003470 _UGREAT
             forth.s:1029   .text:0000000000003474 UGREAT
             forth.s:1041   .text:0000000000003484 $d
             forth.s:1041   .text:0000000000003488 _GREAT
             forth.s:1041   .text:000000000000348a $t
             forth.s:1053   .text:000000000000349c $d
             forth.s:1053   .text:00000000000034a0 _MAX
             forth.s:1053   .text:00000000000034a4 $t
             forth.s:1064   .text:00000000000034b0 $d
             forth.s:1064   .text:00000000000034b4 _MIN
             forth.s:1064   .text:00000000000034b8 $t
             forth.s:1075   .text:00000000000034c4 $d
             forth.s:1075   .text:00000000000034c8 _PSTOR
             forth.s:1075   .text:00000000000034cc PSTOR
             forth.s:1087   .text:00000000000034de $d
             forth.s:1087   .text:00000000000034e2 _DSTOR
             forth.s:1087   .text:00000000000034e8 DSTOR
             forth.s:1099   .text:00000000000034fe $d
             forth.s:1099   .text:0000000000003502 _DAT
ARM GAS  forth.s 			page 221


             forth.s:1099   .text:0000000000003508 DAT
             forth.s:1109   .text:0000000000003514 $d
             forth.s:1109   .text:0000000000003518 _COUNT
             forth.s:1109   .text:000000000000351e $t
             forth.s:1119   .text:000000000000352e $d
             forth.s:1119   .text:0000000000003532 _DNEGA
             forth.s:1119   .text:000000000000353a $t
             forth.s:1119   .text:000000000000353c DNEGA
             forth.s:1136   .text:000000000000354e DOVAR
             forth.s:1147   .text:000000000000355c DOCON
             forth.s:1160   .text:0000000000003568 $d
             forth.s:1160   .text:000000000000356c _SEED
             forth.s:1169   .text:0000000000003580 $d
             forth.s:1169   .text:0000000000003584 _MSEC
             forth.s:1178   .text:0000000000003598 $d
             forth.s:1178   .text:000000000000359c _TIMER
             forth.s:1178   .text:00000000000035a2 $t
             forth.s:1187   .text:00000000000035b0 $d
             forth.s:1187   .text:00000000000035b4 _TBOOT
             forth.s:1187   .text:00000000000035ba $t
             forth.s:1187   .text:00000000000035bc TBOOT
             forth.s:1196   .text:00000000000035c8 $d
             forth.s:1196   .text:00000000000035cc _BASE
             forth.s:1207   .text:00000000000035e0 $d
             forth.s:1207   .text:00000000000035e4 _BCHR
             forth.s:1207   .text:00000000000035ea $t
             forth.s:1207   .text:00000000000035ec BCHR
             forth.s:1217   .text:00000000000035f8 TEMP
             forth.s:1226   .text:0000000000003604 $d
             forth.s:1226   .text:0000000000003608 _SPAN
             forth.s:1226   .text:0000000000003610 SPAN
             forth.s:1235   .text:000000000000361c $d
             forth.s:1235   .text:0000000000003620 _INN
             forth.s:1235   .text:0000000000003624 $t
             forth.s:1235   .text:0000000000003624 INN
             forth.s:1245   .text:0000000000003630 $d
             forth.s:1245   .text:0000000000003634 _NTIB
             forth.s:1245   .text:000000000000363c NTIB
             forth.s:1254   .text:0000000000003648 $d
             forth.s:1254   .text:000000000000364c _TEVAL
             forth.s:1254   .text:0000000000003652 $t
             forth.s:1254   .text:0000000000003654 TEVAL
             forth.s:1264   .text:0000000000003660 $d
             forth.s:1264   .text:0000000000003664 _HLD
             forth.s:1264   .text:0000000000003668 $t
             forth.s:1264   .text:0000000000003668 HLD
             forth.s:1274   .text:0000000000003674 $d
             forth.s:1274   .text:0000000000003678 _CNTXT
             forth.s:1274   .text:0000000000003680 $t
             forth.s:1274   .text:0000000000003680 CNTXT
             forth.s:1275   .text:0000000000003680 CRRNT
             forth.s:1285   .text:000000000000368c $d
             forth.s:1285   .text:0000000000003690 _CPP
             forth.s:1285   .text:0000000000003694 CPP
             forth.s:1295   .text:00000000000036a0 $d
             forth.s:1295   .text:00000000000036a4 _FCP
             forth.s:1295   .text:00000000000036a8 $t
ARM GAS  forth.s 			page 222


             forth.s:1295   .text:00000000000036a8 FCP
             forth.s:1305   .text:00000000000036b4 $d
             forth.s:1305   .text:00000000000036b8 _LAST
             forth.s:1305   .text:00000000000036c0 LAST
             forth.s:1319   .text:00000000000036cc $d
             forth.s:1319   .text:00000000000036d0 _USER_BEGIN
             forth.s:1319   .text:00000000000036dc USER_BEGIN
             forth.s:1323   .text:00000000000036e8 USR_BGN_ADR
             forth.s:1324   .text:00000000000036e8 $d
             forth.s:1330   .text:00000000000036f0 _USER_END
             forth.s:1330   .text:00000000000036fc USER_END
             forth.s:1334   .text:0000000000003708 USER_END_ADR
             forth.s:1335   .text:0000000000003708 $d
             forth.s:1347   .text:0000000000003710 _WITHI
             forth.s:1347   .text:0000000000003718 WITHI
             forth.s:1349   .text:000000000000371c $d
             forth.s:1364   .text:000000000000373c _UMMOD
             forth.s:1364   .text:0000000000003744 UMMOD
             forth.s:1368   .text:000000000000374e UMMOD0
             forth.s:1375   .text:000000000000375e UMMOD1
             forth.s:1381   .text:0000000000003768 UMMOD2
             forth.s:1394   .text:0000000000003774 $d
             forth.s:1394   .text:0000000000003778 _MSMOD
             forth.s:1394   .text:000000000000377e $t
             forth.s:1394   .text:0000000000003780 MSMOD
             forth.s:1396   .text:0000000000003784 $d
             forth.s:1405   .text:00000000000037ac MMOD1
             forth.s:1412   .text:00000000000037c8 MMOD2
             forth.s:1420   .text:00000000000037e8 MMOD3
             forth.s:1427   .text:00000000000037f0 _STOD
             forth.s:1427   .text:00000000000037f4 $t
             forth.s:1436   .text:0000000000003800 $d
             forth.s:1436   .text:0000000000003804 _D2STAR
             forth.s:1436   .text:0000000000003808 $t
             forth.s:1436   .text:0000000000003808 D2STAR
             forth.s:1448   .text:000000000000381a $d
             forth.s:1448   .text:000000000000381e _D2SL
             forth.s:1448   .text:0000000000003822 $t
             forth.s:1448   .text:0000000000003824 D2SL
             forth.s:1463   .text:0000000000003832 $d
             forth.s:1463   .text:0000000000003836 _DSLMOD
             forth.s:1463   .text:000000000000383c $t
             forth.s:1463   .text:000000000000383c DSLMOD
             forth.s:1499   .text:0000000000003888 $d
             forth.s:1499   .text:000000000000388c _DSLASH
             forth.s:1499   .text:0000000000003890 DSLASH
             forth.s:1501   .text:0000000000003894 $d
             forth.s:1521   .text:00000000000038d8 _DSTAR
             forth.s:1521   .text:00000000000038dc DSTAR
             forth.s:1570   .text:0000000000003912 $d
             forth.s:1570   .text:0000000000003916 _SLMOD
             forth.s:1572   .text:0000000000003920 $d
             forth.s:1583   .text:0000000000003938 _MODD
             forth.s:1583   .text:000000000000393c $t
             forth.s:1585   .text:0000000000003940 $d
             forth.s:1594   .text:0000000000003950 _SLASH
             forth.s:1594   .text:0000000000003952 $t
ARM GAS  forth.s 			page 223


             forth.s:1594   .text:0000000000003954 SLASH
             forth.s:1596   .text:0000000000003958 $d
             forth.s:1607   .text:000000000000396c _SSMOD
             forth.s:1607   .text:0000000000003972 $t
             forth.s:1607   .text:0000000000003974 SSMOD
             forth.s:1609   .text:0000000000003978 $d
             forth.s:1621   .text:0000000000003990 _STASL
             forth.s:1621   .text:0000000000003994 STASL
             forth.s:1623   .text:0000000000003998 $d
             forth.s:1637   .text:00000000000039ac _ALGND
             forth.s:1637   .text:00000000000039b4 $t
             forth.s:1637   .text:00000000000039b4 ALGND
             forth.s:1648   .text:00000000000039c4 $d
             forth.s:1648   .text:00000000000039c8 _TCHAR
             forth.s:1648   .text:00000000000039ce $t
             forth.s:1648   .text:00000000000039d0 TCHAR
             forth.s:1650   .text:00000000000039d4 $d
             forth.s:1660   .text:0000000000003a0c TCHA1
             forth.s:1668   .text:0000000000003a14 _DEPTH
             forth.s:1668   .text:0000000000003a1a $t
             forth.s:1668   .text:0000000000003a1c DEPTH
             forth.s:1680   .text:0000000000003a34 $d
             forth.s:1680   .text:0000000000003a38 _PICK
             forth.s:1691   .text:0000000000003a4a $d
             forth.s:1691   .text:0000000000003a4e _PUT
             forth.s:1691   .text:0000000000003a52 $t
             forth.s:1691   .text:0000000000003a54 PUT
             forth.s:1708   .text:0000000000003a68 $d
             forth.s:1708   .text:0000000000003a6c _HERE
             forth.s:1710   .text:0000000000003a78 $d
             forth.s:1719   .text:0000000000003a88 _PAD
             forth.s:1719   .text:0000000000003a8c $t
             forth.s:1721   .text:0000000000003a90 $d
             forth.s:1732   .text:0000000000003aa8 _TIB
             forth.s:1732   .text:0000000000003aac $t
             forth.s:1732   .text:0000000000003aac TIB
             forth.s:1742   .text:0000000000003ab6 $d
             forth.s:1742   .text:0000000000003aba _ATEXE
             forth.s:1755   .text:0000000000003ad8 $d
             forth.s:1755   .text:0000000000003adc _CMOVE
             forth.s:1755   .text:0000000000003ae2 $t
             forth.s:1762   .text:0000000000003af6 CMOV1
             forth.s:1759   .text:0000000000003aee CMOV0
             forth.s:1767   .text:0000000000003b00 CMOV2
             forth.s:1775   .text:0000000000003b08 $d
             forth.s:1775   .text:0000000000003b0c _MOVE
             forth.s:1793   .text:0000000000003b3e MOVE1
             forth.s:1790   .text:0000000000003b3a MOVE3
             forth.s:1787   .text:0000000000003b36 MOVE0
             forth.s:1798   .text:0000000000003b48 MOVE2
             forth.s:1807   .text:0000000000003b50 $d
             forth.s:1807   .text:0000000000003b54 _FILL
             forth.s:1815   .text:0000000000003b6a FILL2
             forth.s:1811   .text:0000000000003b62 FILL1
             forth.s:1825   .text:0000000000003b72 $d
             forth.s:1825   .text:0000000000003b76 _PACKS
             forth.s:1825   .text:0000000000003b7c $t
ARM GAS  forth.s 			page 224


             forth.s:1825   .text:0000000000003b7c PACKS
             forth.s:1827   .text:0000000000003b80 $d
             forth.s:1856   .text:0000000000003bd8 _DIGIT
             forth.s:1856   .text:0000000000003bde $t
             forth.s:1856   .text:0000000000003be0 DIGIT
             forth.s:1858   .text:0000000000003be4 $d
             forth.s:1873   .text:0000000000003c18 _EXTRC
             forth.s:1873   .text:0000000000003c20 $t
             forth.s:1873   .text:0000000000003c20 EXTRC
             forth.s:1875   .text:0000000000003c24 $d
             forth.s:1885   .text:0000000000003c38 _BDIGS
             forth.s:1887   .text:0000000000003c40 $d
             forth.s:1897   .text:0000000000003c54 _HOLD
             forth.s:1897   .text:0000000000003c5c HOLD
             forth.s:1899   .text:0000000000003c60 $d
             forth.s:1915   .text:0000000000003c84 _DIG
             forth.s:1915   .text:0000000000003c86 $t
             forth.s:1915   .text:0000000000003c88 DIG
             forth.s:1917   .text:0000000000003c8c $d
             forth.s:1929   .text:0000000000003ca4 _DIGS
             forth.s:1931   .text:0000000000003cac DIGS1
             forth.s:1932   .text:0000000000003cac $d
             forth.s:1937   .text:0000000000003cc8 DIGS2
             forth.s:1947   .text:0000000000003cd4 _SIGN
             forth.s:1949   .text:0000000000003ce0 $d
             forth.s:1953   .text:0000000000003cf8 SIGN1
             forth.s:1961   .text:0000000000003d00 _EDIGS
             forth.s:1963   .text:0000000000003d08 $d
             forth.s:1978   .text:0000000000003d24 STRR
             forth.s:1979   .text:0000000000003d24 $t
             forth.s:1980   .text:0000000000003d28 $d
             forth.s:1997   .text:0000000000003d54 _HEX
             forth.s:1997   .text:0000000000003d58 $t
             forth.s:1997   .text:0000000000003d58 HEX
             forth.s:1999   .text:0000000000003d5c $d
             forth.s:2010   .text:0000000000003d74 _BIN
             forth.s:2010   .text:0000000000003d78 $t
             forth.s:2010   .text:0000000000003d78 BIN
             forth.s:2012   .text:0000000000003d7c $d
             forth.s:2022   .text:0000000000003d94 _DECIM
             forth.s:2022   .text:0000000000003d9c $t
             forth.s:2024   .text:0000000000003da0 $d
             forth.s:2039   .text:0000000000003db8 _DIGTQ
             forth.s:2039   .text:0000000000003dc0 DIGTQ
             forth.s:2041   .text:0000000000003dc4 $d
             forth.s:2054   .text:0000000000003e0c DGTQ1
             forth.s:2074   .text:0000000000003e20 _TONBR
             forth.s:2074   .text:0000000000003e28 $t
             forth.s:2076   .text:0000000000003e2c $d
             forth.s:2108   .text:0000000000003e9c $t
             forth.s:2156   .text:0000000000003ee8 $d
             forth.s:2156   .text:0000000000003eec _INTQ
             forth.s:2156   .text:0000000000003ef4 INTQ
             forth.s:2159   .text:0000000000003ef8 $d
             forth.s:2211   .text:0000000000003fc0 _NUMBERQ
             forth.s:2211   .text:0000000000003fc8 $t
             forth.s:2211   .text:0000000000003fc8 NUMBERQ
ARM GAS  forth.s 			page 225


             forth.s:2213   .text:0000000000003fcc $d
             forth.s:2231   .text:0000000000003fec _SPACE
             forth.s:2231   .text:0000000000003ff2 $t
             forth.s:2233   .text:0000000000003ff8 $d
             forth.s:2242   .text:0000000000004008 _SPACS
             forth.s:2242   .text:0000000000004010 SPACS
             forth.s:2244   .text:0000000000004014 $d
             forth.s:2250   .text:0000000000004030 CHAR2
             forth.s:2248   .text:000000000000402c CHAR1
             forth.s:2259   .text:0000000000004040 _TYPEE
             forth.s:2261   .text:000000000000404c $d
             forth.s:2267   .text:0000000000004064 TYPE2
             forth.s:2263   .text:0000000000004058 TYPE1
             forth.s:2277   .text:0000000000004078 _CR
             forth.s:2279   .text:0000000000004080 $d
             forth.s:2291   .text:000000000000409c DOSTR
             forth.s:2292   .text:000000000000409c $t
             forth.s:2294   .text:00000000000040a0 $d
             forth.s:2312   .text:00000000000040c8 STRQP
             forth.s:2313   .text:00000000000040c8 $t
             forth.s:2314   .text:00000000000040cc $d
             forth.s:2323   .text:00000000000040d4 DOTST
             forth.s:2324   .text:00000000000040d4 $t
             forth.s:2325   .text:00000000000040d8 $d
             forth.s:2336   .text:00000000000040e4 $t
             forth.s:2337   .text:00000000000040e8 $d
             forth.s:2349   .text:00000000000040f4 LPAD
             forth.s:2350   .text:00000000000040f4 $t
             forth.s:2351   .text:00000000000040f8 $d
             forth.s:2382   .text:0000000000004178 _DOTR
             forth.s:2382   .text:000000000000417c DOTR
             forth.s:2384   .text:0000000000004180 $d
             forth.s:2466   .text:0000000000004264 DTOA
             forth.s:2401   .text:00000000000041a8 _UDOTR
             forth.s:2401   .text:00000000000041ac $t
             forth.s:2401   .text:00000000000041ac UDOTR
             forth.s:2403   .text:00000000000041b0 $d
             forth.s:2419   .text:00000000000041dc _UDOT
             forth.s:2421   .text:00000000000041e4 $d
             forth.s:2437   .text:0000000000004210 _DOT
             forth.s:2437   .text:0000000000004212 $t
             forth.s:2439   .text:0000000000004218 $d
             forth.s:2447   .text:0000000000004240 DOT1
             forth.s:2466   .text:0000000000004260 _DTOA
             forth.s:2466   .text:0000000000004264 $t
             forth.s:2468   .text:0000000000004268 $d
             forth.s:2483   .text:0000000000004290 _DDOT
             forth.s:2483   .text:0000000000004294 DDOT
             forth.s:2485   .text:0000000000004298 $d
             forth.s:2499   .text:00000000000042b8 _HDOT
             forth.s:2501   .text:00000000000042c0 $d
             forth.s:2523   .text:0000000000004308 _QUEST
             forth.s:2523   .text:000000000000430a $t
             forth.s:2523   .text:000000000000430c QUEST
             forth.s:2525   .text:0000000000004310 $d
             forth.s:2539   .text:000000000000431c PARS
             forth.s:2540   .text:000000000000431c $t
ARM GAS  forth.s 			page 226


             forth.s:2541   .text:0000000000004320 $d
             forth.s:2607   .text:0000000000004430 PARS8
             forth.s:2571   .text:00000000000043a4 PARS3
             forth.s:2554   .text:000000000000435c PARS1
             forth.s:2569   .text:00000000000043a0 PARS2
             forth.s:2575   .text:00000000000043b0 PARS4
             forth.s:2587   .text:00000000000043e0 PARS5
             forth.s:2594   .text:0000000000004404 PARS6
             forth.s:2600   .text:0000000000004418 PARS7
             forth.s:2618   .text:0000000000004444 _PARSE
             forth.s:2618   .text:000000000000444a $t
             forth.s:2618   .text:000000000000444c PARSE
             forth.s:2620   .text:0000000000004450 $d
             forth.s:2641   .text:0000000000004490 _DOTPR
             forth.s:2641   .text:0000000000004494 DOTPR
             forth.s:2643   .text:0000000000004498 $d
             forth.s:2654   .text:00000000000044b0 _PAREN
             forth.s:2654   .text:00000000000044b2 $t
             forth.s:2654   .text:00000000000044b4 PAREN
             forth.s:2656   .text:00000000000044b8 $d
             forth.s:2667   .text:00000000000044d0 _BKSLA
             forth.s:2667   .text:00000000000044d2 $t
             forth.s:2667   .text:00000000000044d4 BKSLA
             forth.s:2669   .text:00000000000044d8 $d
             forth.s:2680   .text:00000000000044f0 _CHAR
             forth.s:2680   .text:00000000000044f8 CHAR
             forth.s:2682   .text:00000000000044fc $d
             forth.s:2692   .text:0000000000004514 _IMCHAR
             forth.s:2692   .text:000000000000451c IMCHAR
             forth.s:2694   .text:0000000000004520 $d
             forth.s:3290   .text:0000000000004c44 LITER
             forth.s:2703   .text:0000000000004530 _WORDD
             forth.s:2703   .text:0000000000004538 WORDD
             forth.s:2705   .text:000000000000453c $d
             forth.s:2717   .text:0000000000004554 _TOKEN
             forth.s:2717   .text:000000000000455a $t
             forth.s:2717   .text:000000000000455c TOKEN
             forth.s:2719   .text:0000000000004560 $d
             forth.s:2884   .text:0000000000004750 UPPER
             forth.s:2733   .text:0000000000004574 _NAMET
             forth.s:2733   .text:000000000000457a $t
             forth.s:2733   .text:000000000000457c NAMET
             forth.s:2735   .text:0000000000004580 $d
             forth.s:2754   .text:00000000000045a0 _SAMEQ
             forth.s:2754   .text:00000000000045a6 $t
             forth.s:2754   .text:00000000000045a8 SAMEQ
             forth.s:2756   .text:00000000000045ac $d
             forth.s:2773   .text:00000000000045f4 SAME2
             forth.s:2758   .text:00000000000045b8 SAME1
             forth.s:2788   .text:0000000000004608 FIND
             forth.s:2789   .text:0000000000004608 $t
             forth.s:2790   .text:000000000000460c $d
             forth.s:2797   .text:0000000000004628 FIND1
             forth.s:2817   .text:0000000000004680 FIND6
             forth.s:2810   .text:0000000000004668 FIND2
             forth.s:2815   .text:0000000000004678 FIND3
             forth.s:2824   .text:0000000000004698 FIND4
ARM GAS  forth.s 			page 227


             forth.s:2830   .text:00000000000046b4 FIND5
             forth.s:2846   .text:00000000000046dc _NAMEQ
             forth.s:2846   .text:00000000000046e2 $t
             forth.s:2846   .text:00000000000046e4 NAMEQ
             forth.s:2848   .text:00000000000046e8 $d
             forth.s:2863   .text:00000000000046fc _ASCIZ
             forth.s:2863   .text:0000000000004702 $t
             forth.s:2863   .text:0000000000004704 ASCIZ
             forth.s:2865   .text:0000000000004708 $d
             forth.s:2884   .text:0000000000004748 _UPPER
             forth.s:2884   .text:000000000000474e $t
             forth.s:2886   .text:0000000000004754 $d
             forth.s:2917   .text:00000000000047d8 BKSP
             forth.s:2918   .text:00000000000047d8 $t
             forth.s:2919   .text:00000000000047dc $d
             forth.s:2933   .text:0000000000004820 BACK1
             forth.s:2942   .text:0000000000004824 TAP
             forth.s:2943   .text:0000000000004824 $t
             forth.s:2944   .text:0000000000004828 $d
             forth.s:2957   .text:0000000000004840 KTAP
             forth.s:2958   .text:0000000000004840 TTAP
             forth.s:2959   .text:0000000000004840 $t
             forth.s:2960   .text:0000000000004844 $d
             forth.s:2974   .text:0000000000004884 KTAP2
             forth.s:2971   .text:000000000000487c KTAP1
             forth.s:2986   .text:000000000000489c _ACCEP
             forth.s:2988   .text:00000000000048a8 $d
             forth.s:2991   .text:00000000000048b4 ACCP1
             forth.s:3007   .text:00000000000048fc ACCP4
             forth.s:3003   .text:00000000000048f0 ACCP2
             forth.s:3005   .text:00000000000048f4 ACCP3
             forth.s:3018   .text:0000000000004910 _QUERY
             forth.s:3018   .text:0000000000004916 $t
             forth.s:3018   .text:0000000000004918 QUERY
             forth.s:3020   .text:000000000000491c $d
             forth.s:3040   .text:0000000000004950 _ABORT
             forth.s:3040   .text:0000000000004956 $t
             forth.s:3042   .text:000000000000495c ABORT1
             forth.s:3043   .text:000000000000495c $d
             forth.s:3058   .text:0000000000004984 ABORQ
             forth.s:3059   .text:0000000000004984 $t
             forth.s:3060   .text:0000000000004988 $d
             forth.s:3078   .text:00000000000049ac _INTER
             forth.s:3080   .text:00000000000049bc $d
             forth.s:3089   .text:00000000000049f8 INTE1
             forth.s:3086   .text:00000000000049ee $t
             forth.s:3087   .text:00000000000049f0 $d
             forth.s:3093   .text:0000000000004a08 INTE2
             forth.s:3100   .text:0000000000004a10 _LBRAC
             forth.s:3100   .text:0000000000004a12 $t
             forth.s:3100   .text:0000000000004a14 LBRAC
             forth.s:3102   .text:0000000000004a18 $d
             forth.s:3112   .text:0000000000004a30 _DOTOK
             forth.s:3112   .text:0000000000004a34 $t
             forth.s:3112   .text:0000000000004a34 DOTOK
             forth.s:3114   .text:0000000000004a38 $d
             forth.s:3120   .text:0000000000004a5c DOTO1
ARM GAS  forth.s 			page 228


             forth.s:3121   .text:0000000000004a5c $d
             forth.s:3129   .text:0000000000004a68 _QSTAC
             forth.s:3129   .text:0000000000004a70 QSTAC
             forth.s:3131   .text:0000000000004a74 $d
             forth.s:3133   .text:0000000000004a8a $t
             forth.s:3134   .text:0000000000004a8c $d
             forth.s:3141   .text:0000000000004a94 _EVAL
             forth.s:3143   .text:0000000000004aa0 EVAL1
             forth.s:3144   .text:0000000000004aa0 $d
             forth.s:3152   .text:0000000000004ac8 EVAL2
             forth.s:3162   .text:0000000000004ad8 _PRESE
             forth.s:3164   .text:0000000000004ae4 $d
             forth.s:3174   .text:0000000000004af8 _QUIT
             forth.s:3175   .text:0000000000004b00 $d
             forth.s:3177   .text:0000000000004b0c QUIT1
             forth.s:3179   .text:0000000000004b10 QUIT2
             forth.s:3189   .text:0000000000004b24 _FORGET
             forth.s:3189   .text:0000000000004b2c FORGET
             forth.s:3191   .text:0000000000004b30 $d
             forth.s:3691   .text:00000000000050d4 OVERT
             forth.s:3219   .text:0000000000004b78 $d
             forth.s:3219   .text:0000000000004b7c _TICK
             forth.s:3219   .text:0000000000004b7e $t
             forth.s:3219   .text:0000000000004b80 TICK
             forth.s:3221   .text:0000000000004b84 $d
             forth.s:3225   .text:0000000000004b98 TICK1
             forth.s:3233   .text:0000000000004ba0 _ALLOT
             forth.s:3233   .text:0000000000004ba6 $t
             forth.s:3235   .text:0000000000004bac $d
             forth.s:3244   .text:0000000000004bbc _COMMA
             forth.s:3244   .text:0000000000004bbe $t
             forth.s:3244   .text:0000000000004bc0 COMMA
             forth.s:3246   .text:0000000000004bc4 $d
             forth.s:3260   .text:0000000000004be0 $d
             forth.s:3260   .text:0000000000004be4 _BCOMP
             forth.s:3260   .text:0000000000004bee $t
             forth.s:3260   .text:0000000000004bf0 BCOMP
             forth.s:3262   .text:0000000000004bf4 $d
             forth.s:3272   .text:0000000000004c04 _COMPI
             forth.s:3272   .text:0000000000004c0c $t
             forth.s:3272   .text:0000000000004c0c COMPI
             forth.s:3274   .text:0000000000004c10 $d
             forth.s:3290   .text:0000000000004c3c _LITER
             forth.s:3290   .text:0000000000004c44 $t
             forth.s:3292   .text:0000000000004c48 $d
             forth.s:3730   .text:0000000000005130 CALLC
             forth.s:3302   .text:0000000000004c5c STRCQ
             forth.s:3303   .text:0000000000004c5c $t
             forth.s:3304   .text:0000000000004c60 $d
             forth.s:3326   .text:0000000000004c98 _FOR
             forth.s:3326   .text:0000000000004c9c $t
             forth.s:3326   .text:0000000000004c9c FOR
             forth.s:3328   .text:0000000000004ca0 $d
             forth.s:3337   .text:0000000000004cb8 _DO
             forth.s:3337   .text:0000000000004cbc DO
             forth.s:3339   .text:0000000000004cc0 $d
             forth.s:3345   .text:0000000000004cec DOPLOOP
ARM GAS  forth.s 			page 229


             forth.s:3346   .text:0000000000004cec $t
             forth.s:3364   .text:0000000000004d14 $d
             forth.s:3364   .text:0000000000004d18 _PLOOP
             forth.s:3364   .text:0000000000004d1e $t
             forth.s:3364   .text:0000000000004d20 PLOOP
             forth.s:3366   .text:0000000000004d24 $d
             forth.s:3370   .text:0000000000004d38 DOLOOP
             forth.s:3371   .text:0000000000004d38 $t
             forth.s:3389   .text:0000000000004d60 $d
             forth.s:3389   .text:0000000000004d64 _LOOP
             forth.s:3389   .text:0000000000004d6c LOOP
             forth.s:3391   .text:0000000000004d70 $d
             forth.s:3402   .text:0000000000004d88 _BEGIN
             forth.s:3402   .text:0000000000004d8e $t
             forth.s:3402   .text:0000000000004d90 BEGIN
             forth.s:3404   .text:0000000000004d94 $d
             forth.s:3413   .text:0000000000004d9c $d
             forth.s:3413   .text:0000000000004da0 _FNEXT
             forth.s:3413   .text:0000000000004da8 FNEXT
             forth.s:3415   .text:0000000000004dac $d
             forth.s:3423   .text:0000000000004dc4 _I
             forth.s:3423   .text:0000000000004dc6 $t
             forth.s:3423   .text:0000000000004dc8 I
             forth.s:3432   .text:0000000000004dd4 $d
             forth.s:3432   .text:0000000000004dd8 _J
             forth.s:3432   .text:0000000000004dda $t
             forth.s:3432   .text:0000000000004ddc J
             forth.s:3442   .text:0000000000004de8 $d
             forth.s:3442   .text:0000000000004dec _UNTIL
             forth.s:3442   .text:0000000000004df2 $t
             forth.s:3442   .text:0000000000004df4 UNTIL
             forth.s:3444   .text:0000000000004df8 $d
             forth.s:3453   .text:0000000000004e10 _AGAIN
             forth.s:3453   .text:0000000000004e16 $t
             forth.s:3453   .text:0000000000004e18 AGAIN
             forth.s:3455   .text:0000000000004e1c $d
             forth.s:3464   .text:0000000000004e34 _IFF
             forth.s:3464   .text:0000000000004e38 IFF
             forth.s:3466   .text:0000000000004e3c $d
             forth.s:3478   .text:0000000000004e64 _AHEAD
             forth.s:3478   .text:0000000000004e6a $t
             forth.s:3478   .text:0000000000004e6c AHEAD
             forth.s:3480   .text:0000000000004e70 $d
             forth.s:3492   .text:0000000000004e98 _REPEA
             forth.s:3492   .text:0000000000004ea0 REPEA
             forth.s:3494   .text:0000000000004ea4 $d
             forth.s:3505   .text:0000000000004ebc _THENN
             forth.s:3505   .text:0000000000004ec4 THENN
             forth.s:3507   .text:0000000000004ec8 $d
             forth.s:3518   .text:0000000000004edc _AFT
             forth.s:3518   .text:0000000000004ee0 $t
             forth.s:3518   .text:0000000000004ee0 AFT
             forth.s:3520   .text:0000000000004ee4 $d
             forth.s:3532   .text:0000000000004efc _ELSEE
             forth.s:3532   .text:0000000000004f04 ELSEE
             forth.s:3534   .text:0000000000004f08 $d
             forth.s:3544   .text:0000000000004f1c _WHILE
ARM GAS  forth.s 			page 230


             forth.s:3544   .text:0000000000004f22 $t
             forth.s:3544   .text:0000000000004f24 WHILE
             forth.s:3546   .text:0000000000004f28 $d
             forth.s:3555   .text:0000000000004f38 _ABRTQ
             forth.s:3555   .text:0000000000004f40 ABRTQ
             forth.s:3557   .text:0000000000004f44 $d
             forth.s:3566   .text:0000000000004f5c _STRQ
             forth.s:3566   .text:0000000000004f60 STRQ
             forth.s:3568   .text:0000000000004f64 $d
             forth.s:3578   .text:0000000000004f7c _DOTQ
             forth.s:3578   .text:0000000000004f80 DOTQ
             forth.s:3580   .text:0000000000004f84 $d
             forth.s:3594   .text:0000000000004f9c _UNIQU
             forth.s:3594   .text:0000000000004fa4 $t
             forth.s:3594   .text:0000000000004fa4 UNIQU
             forth.s:3596   .text:0000000000004fa8 $d
             forth.s:3603   .text:0000000000004fd0 UNIQ1
             forth.s:3600   .text:0000000000004fc4 $d
             forth.s:3613   .text:0000000000004fd8 SNAME
             forth.s:3614   .text:0000000000004fd8 $t
             forth.s:3615   .text:0000000000004fdc $d
             forth.s:3631   .text:0000000000005020 SNAM1
             forth.s:3643   .text:0000000000005034 _SCOMP
             forth.s:3643   .text:0000000000005040 SCOMP
             forth.s:3645   .text:0000000000005044 $d
             forth.s:3657   .text:000000000000507c SCOM2
             forth.s:3654   .text:0000000000005074 SCOM1
             forth.s:3662   .text:0000000000005090 SCOM3
             forth.s:3671   .text:0000000000005098 COLON_ABORT
             forth.s:3672   .text:0000000000005098 $t
             forth.s:3673   .text:000000000000509c $d
             forth.s:3691   .text:00000000000050cc _OVERT
             forth.s:3691   .text:00000000000050d2 $t
             forth.s:3693   .text:00000000000050d8 $d
             forth.s:3704   .text:00000000000050f0 _SEMIS
             forth.s:3704   .text:00000000000050f2 $t
             forth.s:3704   .text:00000000000050f4 SEMIS
             forth.s:3706   .text:00000000000050f8 $d
             forth.s:3718   .text:0000000000005114 _RBRAC
             forth.s:3718   .text:0000000000005116 $t
             forth.s:3718   .text:0000000000005118 RBRAC
             forth.s:3720   .text:000000000000511c $d
             forth.s:3731   .text:0000000000005130 $t
             forth.s:3732   .text:0000000000005134 $d
             forth.s:3744   .text:000000000000514c _COLON
             forth.s:3744   .text:000000000000514e $t
             forth.s:3744   .text:0000000000005150 COLON
             forth.s:3746   .text:0000000000005154 $d
             forth.s:3758   .text:0000000000005170 _IMMED
             forth.s:3758   .text:000000000000517a $t
             forth.s:3758   .text:000000000000517c IMMED
             forth.s:3760   .text:0000000000005180 $d
             forth.s:3778   .text:00000000000051ac _CONST
             forth.s:3778   .text:00000000000051b8 CONST
             forth.s:3780   .text:00000000000051bc $d
             forth.s:3791   .text:00000000000051ec $t
             forth.s:3798   .text:00000000000051ec DODOES
ARM GAS  forth.s 			page 231


             forth.s:3800   .text:00000000000051f0 $d
             forth.s:3815   .text:0000000000005214 $d
             forth.s:3815   .text:0000000000005218 _DOES
             forth.s:3815   .text:000000000000521e $t
             forth.s:3815   .text:0000000000005220 DOES
             forth.s:3817   .text:0000000000005224 $d
             forth.s:3832   .text:0000000000005254 _DEFERAT
             forth.s:3832   .text:000000000000525c DEFERAT
             forth.s:3834   .text:0000000000005260 $d
             forth.s:3844   .text:0000000000005278 _DEFERSTO
             forth.s:3844   .text:0000000000005280 DEFERSTO
             forth.s:3846   .text:0000000000005284 $d
             forth.s:3857   .text:00000000000052a0 _DEFER
             forth.s:3857   .text:00000000000052a6 $t
             forth.s:3857   .text:00000000000052a8 DEFER
             forth.s:3859   .text:00000000000052ac $d
             forth.s:3880   .text:00000000000052f8 CREAT
             forth.s:3870   .text:00000000000052e0 DEFER_NOP
             forth.s:3871   .text:00000000000052e0 $t
             forth.s:3872   .text:00000000000052e4 $d
             forth.s:3880   .text:00000000000052f0 _CREAT
             forth.s:3882   .text:00000000000052fc $d
             forth.s:3895   .text:0000000000005320 _VARIA
             forth.s:3895   .text:000000000000532c VARIA
             forth.s:3897   .text:0000000000005330 $d
             forth.s:3915   .text:0000000000005350 DMP
             forth.s:3916   .text:0000000000005350 $t
             forth.s:3917   .text:0000000000005354 $d
             forth.s:3935   .text:00000000000053a8 PDUM2
             forth.s:3929   .text:0000000000005390 PDUM1
             forth.s:3950   .text:00000000000053c0 $d
             forth.s:3950   .text:00000000000053c4 _DUMP
             forth.s:3950   .text:00000000000053cc DUMP
             forth.s:3952   .text:00000000000053d0 $d
             forth.s:3978   .text:000000000000544c DUMP4
             forth.s:3968   .text:0000000000005424 DUMP1
             forth.s:3980   .text:0000000000005454 DUMP3
             forth.s:3993   .text:0000000000005468 TDOT
             forth.s:3994   .text:0000000000005468 $t
             forth.s:3995   .text:000000000000546c $d
             forth.s:4034   .text:0000000000005500 _DOTS
             forth.s:4034   .text:0000000000005504 DOTS
             forth.s:4036   .text:0000000000005508 $d
             forth.s:4043   .text:0000000000005524 DOTS2
             forth.s:4039   .text:0000000000005518 DOTS1
             forth.s:4048   .text:0000000000005534 RBASE
             forth.s:4049   .text:0000000000005534 $t
             forth.s:4057   .text:0000000000005544 RDOT
             forth.s:4059   .text:0000000000005548 $d
             forth.s:4086   .text:00000000000055ac _TRACE
             forth.s:4086   .text:00000000000055b2 $t
             forth.s:4086   .text:00000000000055b4 TRACE
             forth.s:4088   .text:00000000000055b8 $d
             forth.s:4107   .text:00000000000055fc _TOBODY
             forth.s:4107   .text:0000000000005602 $t
             forth.s:4107   .text:0000000000005604 TOBODY
             forth.s:4116   .text:000000000000560c $d
ARM GAS  forth.s 			page 232


             forth.s:4116   .text:0000000000005610 _TNAME
             forth.s:4116   .text:0000000000005616 $t
             forth.s:4116   .text:0000000000005618 TNAME
             forth.s:4118   .text:000000000000561c $d
             forth.s:4121   .text:0000000000005628 TNAM1
             forth.s:4132   .text:000000000000565c TNAM2
             forth.s:4141   .text:000000000000566c _DOTID
             forth.s:4141   .text:0000000000005670 $t
             forth.s:4141   .text:0000000000005670 DOTID
             forth.s:4143   .text:0000000000005674 $d
             forth.s:4150   .text:0000000000005698 DOTI1
             forth.s:4151   .text:00000000000056a6 $t
             forth.s:4152   .text:00000000000056a8 $d
             forth.s:4154   *ABS*:0000000000000000 WANT_SEE
             forth.s:4228   .text:00000000000056b0 _WORDS
             forth.s:4228   .text:00000000000056b6 $t
             forth.s:4228   .text:00000000000056b8 WORDS
             forth.s:4230   .text:00000000000056bc $d
             forth.s:4233   .text:00000000000056c8 WORS1
             forth.s:4242   .text:00000000000056f0 WORS2
             forth.s:4251   .text:00000000000056f8 _MARK
             forth.s:4251   .text:0000000000005700 MARK
             forth.s:4253   .text:0000000000005704 $d
             forth.s:4256   .text:0000000000005710 $t
             forth.s:4257   .text:0000000000005714 $d
             forth.s:4272   .text:0000000000005744 _ARRAY
             forth.s:4272   .text:000000000000574a $t
             forth.s:4272   .text:000000000000574c ARRAY
             forth.s:4274   .text:0000000000005750 $d
             forth.s:4288   .text:000000000000578c DO_ARRAY
             forth.s:4289   .text:000000000000578c $t
             forth.s:4290   .text:0000000000005790 $d
             forth.s:4308   .text:00000000000057ac VERSN
             forth.s:4309   .text:00000000000057ac $t
             forth.s:4310   .text:00000000000057b0 $d
             forth.s:4318   .text:00000000000057c0 _HI
             forth.s:4318   .text:00000000000057c4 HI
             forth.s:4320   .text:00000000000057c8 $d
             forth.s:4321   .text:00000000000057e2 $t
             forth.s:4322   .text:00000000000057e4 $d
             forth.s:4346   .text:0000000000005830 $t
             forth.s:4347   .text:0000000000005834 $d
             forth.s:4359   .text:0000000000005850 PS2_QUERY
             forth.s:4360   .text:0000000000005850 $t
             forth.s:4361   .text:0000000000005854 $d
             forth.s:4375   .text:00000000000058ba $t
             forth.s:4376   .text:00000000000058bc $d
             forth.s:4386   .text:00000000000058c8 IF_SENSE
             forth.s:4387   .text:00000000000058c8 $t
             forth.s:4388   .text:00000000000058cc $d
             forth.s:4402   .text:00000000000058fc READY
             forth.s:4403   .text:00000000000058fc $t
             forth.s:4404   .text:0000000000005900 $d
             forth.s:4404   .text:000000000000590a $t
             forth.s:4405   .text:000000000000590c $d
             forth.s:4423   .text:0000000000005934 COLD1
             forth.s:4424   .text:0000000000005934 $d
ARM GAS  forth.s 			page 233


             forth.s:4439   .text:0000000000005984 COLD2
             forth.s:4442   .text:0000000000005984 $d
             forth.s:4445   .text:0000000000005988 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
          ser-term.s:90     .text:00000000000009db $d
          ser-term.s:90     .text:00000000000009dc $t
          ser-term.s:110    .text:0000000000000a15 $d
          ser-term.s:110    .text:0000000000000a16 $t
          ser-term.s:133    .text:0000000000000a53 $d
          ser-term.s:133    .text:0000000000000a54 $t
          ser-term.s:164    .text:0000000000000a9b $d
          ser-term.s:164    .text:0000000000000a9c $t
          ser-term.s:191    .text:0000000000000b11 $d
          ser-term.s:191    .text:0000000000000b12 $t
          ser-term.s:203    .text:0000000000000b3f $d
          ser-term.s:203    .text:0000000000000b40 $t
             tvout.s:264    .text:0000000000000d8b $d
             tvout.s:264    .text:0000000000000d8c $t
             tvout.s:278    .text:0000000000000dbf $d
             tvout.s:278    .text:0000000000000dc0 $t
             tvout.s:306    .text:0000000000000e19 $d
             tvout.s:306    .text:0000000000000e1a $t
             tvout.s:325    .text:0000000000000e47 $d
             tvout.s:325    .text:0000000000000e48 $t
             tvout.s:427    .text:0000000000000f81 $d
             tvout.s:427    .text:0000000000000f82 $t
             tvout.s:448    .text:0000000000000fdb $d
             tvout.s:448    .text:0000000000000fdc $t
             tvout.s:495    .text:0000000000001071 $d
             tvout.s:495    .text:0000000000001072 $t
           ps2_kbd.s:307    .text:000000000000175f $d
           ps2_kbd.s:307    .text:0000000000001760 $t
           ps2_kbd.s:396    .text:000000000000185b $d
           ps2_kbd.s:396    .text:000000000000185c $t
           ps2_kbd.s:616    .text:0000000000001afd $d
           ps2_kbd.s:616    .text:0000000000001afe $t
           ps2_kbd.s:633    .text:0000000000001b37 $d
           ps2_kbd.s:633    .text:0000000000001b38 $t
         spi-flash.s:85     .text:0000000000001c23 $d
         spi-flash.s:85     .text:0000000000001c24 $t
         spi-flash.s:151    .text:0000000000001cef $d
         spi-flash.s:151    .text:0000000000001cf0 $t
         spi-flash.s:238    .text:0000000000001e33 $d
         spi-flash.s:238    .text:0000000000001e34 $t
         spi-flash.s:256    .text:0000000000001e6f $d
         spi-flash.s:256    .text:0000000000001e70 $t
ARM GAS  forth.s 			page 234


         spi-flash.s:278    .text:0000000000001ec3 $d
         spi-flash.s:278    .text:0000000000001ec4 $t
         spi-flash.s:325    .text:0000000000001f43 $d
         spi-flash.s:325    .text:0000000000001f44 $t
         spi-flash.s:343    .text:0000000000001f65 $d
         spi-flash.s:343    .text:0000000000001f66 $t
         spi-flash.s:352    .text:0000000000001f79 $d
         spi-flash.s:352    .text:0000000000001f7a $t
               fpu.s:222    .text:000000000000214b $d
               fpu.s:222    .text:000000000000214c $t
               fpu.s:235    .text:000000000000216b $d
               fpu.s:235    .text:000000000000216c $t
               fpu.s:249    .text:000000000000218b $d
               fpu.s:249    .text:000000000000218c $t
               fpu.s:262    .text:00000000000021ab $d
               fpu.s:262    .text:00000000000021ac $t
               fpu.s:285    .text:00000000000021e9 $d
               fpu.s:285    .text:00000000000021ea $t
               fpu.s:297    .text:0000000000002209 $d
               fpu.s:297    .text:000000000000220a $t
               fpu.s:319    .text:0000000000002243 $d
               fpu.s:319    .text:0000000000002244 $t
               fpu.s:330    .text:000000000000225f $d
               fpu.s:330    .text:0000000000002260 $t
               fpu.s:340    .text:0000000000002279 $d
               fpu.s:340    .text:000000000000227a $t
               fpu.s:353    .text:00000000000022a9 $d
               fpu.s:353    .text:00000000000022aa $t
               fpu.s:379    .text:00000000000022f9 $d
               fpu.s:379    .text:00000000000022fa $t
               fpu.s:403    .text:0000000000002343 $d
               fpu.s:403    .text:0000000000002344 $t
               fpu.s:421    .text:0000000000002375 $d
               fpu.s:421    .text:0000000000002376 $t
               fpu.s:431    .text:0000000000002391 $d
               fpu.s:431    .text:0000000000002392 $t
            strtof.s:226    .text:0000000000002613 $d
            strtof.s:226    .text:0000000000002614 $t
              ftoa.s:412    .text:0000000000002c5b $d
              ftoa.s:412    .text:0000000000002c5c $t
             forth.s:133    .text:0000000000002d17 $d
             forth.s:133    .text:0000000000002d18 $t
             forth.s:145    .text:0000000000002d37 $d
             forth.s:145    .text:0000000000002d38 $t
             forth.s:157    .text:0000000000002d57 $d
             forth.s:157    .text:0000000000002d58 $t
             forth.s:179    .text:0000000000002d91 $d
             forth.s:179    .text:0000000000002d92 $t
             forth.s:215    .text:0000000000002daf $d
             forth.s:215    .text:0000000000002db0 $t
             forth.s:262    .text:0000000000002e5d $d
             forth.s:262    .text:0000000000002e5e $t
             forth.s:279    .text:0000000000002e8b $d
             forth.s:279    .text:0000000000002e8c $t
             forth.s:293    .text:0000000000002eb5 $d
             forth.s:293    .text:0000000000002eb6 $t
             forth.s:404    .text:0000000000002f6d $d
ARM GAS  forth.s 			page 235


             forth.s:404    .text:0000000000002f6e $t
             forth.s:429    .text:0000000000002f9b $d
             forth.s:429    .text:0000000000002f9c $t
             forth.s:439    .text:0000000000002faf $d
             forth.s:439    .text:0000000000002fb0 $t
             forth.s:448    .text:0000000000002fbb $d
             forth.s:448    .text:0000000000002fbc $t
             forth.s:468    .text:0000000000002fe9 $d
             forth.s:468    .text:0000000000002fea $t
             forth.s:477    .text:0000000000002ffd $d
             forth.s:477    .text:0000000000002ffe $t
             forth.s:534    .text:0000000000003071 $d
             forth.s:534    .text:0000000000003072 $t
             forth.s:550    .text:0000000000003093 $d
             forth.s:550    .text:0000000000003094 $t
             forth.s:575    .text:00000000000030c1 $d
             forth.s:575    .text:00000000000030c2 $t
             forth.s:598    .text:00000000000030f1 $d
             forth.s:598    .text:00000000000030f2 $t
             forth.s:615    .text:0000000000003115 $d
             forth.s:615    .text:0000000000003116 $t
             forth.s:645    .text:000000000000315b $d
             forth.s:645    .text:000000000000315c $t
             forth.s:654    .text:0000000000003171 $d
             forth.s:654    .text:0000000000003172 $t
             forth.s:702    .text:00000000000031cb $d
             forth.s:702    .text:00000000000031cc $t
             forth.s:713    .text:00000000000031df $d
             forth.s:713    .text:00000000000031e0 $t
             forth.s:721    .text:00000000000031ed $d
             forth.s:721    .text:00000000000031ee $t
             forth.s:729    .text:00000000000031fd $d
             forth.s:729    .text:00000000000031fe $t
             forth.s:737    .text:000000000000320d $d
             forth.s:737    .text:000000000000320e $t
             forth.s:761    .text:000000000000323d $d
             forth.s:761    .text:000000000000323e $t
             forth.s:786    .text:0000000000003271 $d
             forth.s:786    .text:0000000000003272 $t
             forth.s:794    .text:0000000000003281 $d
             forth.s:794    .text:0000000000003282 $t
             forth.s:802    .text:0000000000003293 $d
             forth.s:802    .text:0000000000003294 $t
             forth.s:823    .text:00000000000032bb $d
             forth.s:823    .text:00000000000032bc $t
             forth.s:852    .text:00000000000032f7 $d
             forth.s:852    .text:00000000000032f8 $t
             forth.s:862    .text:000000000000330b $d
             forth.s:862    .text:000000000000330c $t
             forth.s:875    .text:0000000000003329 $d
             forth.s:875    .text:000000000000332a $t
             forth.s:928    .text:00000000000033a1 $d
             forth.s:928    .text:00000000000033a2 $t
             forth.s:969    .text:00000000000033f7 $d
             forth.s:969    .text:00000000000033f8 $t
             forth.s:992    .text:0000000000003423 $d
             forth.s:992    .text:0000000000003424 $t
ARM GAS  forth.s 			page 236


             forth.s:1005   .text:0000000000003443 $d
             forth.s:1005   .text:0000000000003444 $t
             forth.s:1029   .text:0000000000003473 $d
             forth.s:1029   .text:0000000000003474 $t
             forth.s:1075   .text:00000000000034cb $d
             forth.s:1075   .text:00000000000034cc $t
             forth.s:1087   .text:00000000000034e5 $d
             forth.s:1087   .text:00000000000034e6 $t
             forth.s:1099   .text:0000000000003505 $d
             forth.s:1099   .text:0000000000003506 $t
             forth.s:1160   .text:0000000000003571 $d
             forth.s:1160   .text:0000000000003572 $t
             forth.s:1169   .text:0000000000003589 $d
             forth.s:1169   .text:000000000000358a $t
             forth.s:1196   .text:00000000000035d1 $d
             forth.s:1196   .text:00000000000035d2 $t
             forth.s:1226   .text:000000000000360d $d
             forth.s:1226   .text:000000000000360e $t
             forth.s:1245   .text:0000000000003639 $d
             forth.s:1245   .text:000000000000363a $t
             forth.s:1285   .text:0000000000003693 $d
             forth.s:1285   .text:0000000000003694 $t
             forth.s:1305   .text:00000000000036bd $d
             forth.s:1305   .text:00000000000036be $t
             forth.s:1319   .text:00000000000036db $d
             forth.s:1319   .text:00000000000036dc $t
             forth.s:1330   .text:00000000000036f9 $d
             forth.s:1330   .text:00000000000036fa $t
             forth.s:1347   .text:0000000000003717 $d
             forth.s:1347   .text:0000000000003718 $t
             forth.s:1364   .text:0000000000003743 $d
             forth.s:1364   .text:0000000000003744 $t
             forth.s:1499   .text:000000000000388f $d
             forth.s:1499   .text:0000000000003890 $t
             forth.s:1521   .text:00000000000038db $d
             forth.s:1521   .text:00000000000038dc $t
             forth.s:1570   .text:000000000000391b $d
             forth.s:1570   .text:000000000000391c $t
             forth.s:1621   .text:0000000000003993 $d
             forth.s:1621   .text:0000000000003994 $t
             forth.s:1680   .text:0000000000003a3d $d
             forth.s:1680   .text:0000000000003a3e $t
             forth.s:1708   .text:0000000000003a71 $d
             forth.s:1708   .text:0000000000003a72 $t
             forth.s:1742   .text:0000000000003ac3 $d
             forth.s:1742   .text:0000000000003ac4 $t
             forth.s:1775   .text:0000000000003b11 $d
             forth.s:1775   .text:0000000000003b12 $t
             forth.s:1807   .text:0000000000003b59 $d
             forth.s:1807   .text:0000000000003b5a $t
             forth.s:1885   .text:0000000000003c3b $d
             forth.s:1885   .text:0000000000003c3c $t
             forth.s:1897   .text:0000000000003c59 $d
             forth.s:1897   .text:0000000000003c5a $t
             forth.s:1929   .text:0000000000003ca7 $d
             forth.s:1929   .text:0000000000003ca8 $t
             forth.s:1947   .text:0000000000003cd9 $d
ARM GAS  forth.s 			page 237


             forth.s:1947   .text:0000000000003cda $t
             forth.s:1961   .text:0000000000003d03 $d
             forth.s:1961   .text:0000000000003d04 $t
             forth.s:2039   .text:0000000000003dbf $d
             forth.s:2039   .text:0000000000003dc0 $t
             forth.s:2156   .text:0000000000003ef1 $d
             forth.s:2156   .text:0000000000003ef2 $t
             forth.s:2242   .text:000000000000400f $d
             forth.s:2242   .text:0000000000004010 $t
             forth.s:2259   .text:0000000000004045 $d
             forth.s:2259   .text:0000000000004046 $t
             forth.s:2277   .text:000000000000407b $d
             forth.s:2277   .text:000000000000407c $t
             forth.s:2382   .text:000000000000417b $d
             forth.s:2382   .text:000000000000417c $t
             forth.s:2419   .text:00000000000041df $d
             forth.s:2419   .text:00000000000041e0 $t
             forth.s:2483   .text:0000000000004293 $d
             forth.s:2483   .text:0000000000004294 $t
             forth.s:2499   .text:00000000000042bb $d
             forth.s:2499   .text:00000000000042bc $t
             forth.s:2641   .text:0000000000004493 $d
             forth.s:2641   .text:0000000000004494 $t
             forth.s:2680   .text:00000000000044f5 $d
             forth.s:2680   .text:00000000000044f6 $t
             forth.s:2692   .text:000000000000451b $d
             forth.s:2692   .text:000000000000451c $t
             forth.s:2703   .text:0000000000004535 $d
             forth.s:2703   .text:0000000000004536 $t
             forth.s:2986   .text:00000000000048a3 $d
             forth.s:2986   .text:00000000000048a4 $t
             forth.s:3078   .text:00000000000049b7 $d
             forth.s:3078   .text:00000000000049b8 $t
             forth.s:3129   .text:0000000000004a6f $d
             forth.s:3129   .text:0000000000004a70 $t
             forth.s:3141   .text:0000000000004a99 $d
             forth.s:3141   .text:0000000000004a9a $t
             forth.s:3162   .text:0000000000004adf $d
             forth.s:3162   .text:0000000000004ae0 $t
             forth.s:3174   .text:0000000000004afd $d
             forth.s:3174   .text:0000000000004afe $t
             forth.s:3189   .text:0000000000004b2b $d
             forth.s:3189   .text:0000000000004b2c $t
             forth.s:3337   .text:0000000000004cbb $d
             forth.s:3337   .text:0000000000004cbc $t
             forth.s:3389   .text:0000000000004d69 $d
             forth.s:3389   .text:0000000000004d6a $t
             forth.s:3413   .text:0000000000004da5 $d
             forth.s:3413   .text:0000000000004da6 $t
             forth.s:3464   .text:0000000000004e37 $d
             forth.s:3464   .text:0000000000004e38 $t
             forth.s:3492   .text:0000000000004e9f $d
             forth.s:3492   .text:0000000000004ea0 $t
             forth.s:3505   .text:0000000000004ec1 $d
             forth.s:3505   .text:0000000000004ec2 $t
             forth.s:3532   .text:0000000000004f01 $d
             forth.s:3532   .text:0000000000004f02 $t
ARM GAS  forth.s 			page 238


             forth.s:3555   .text:0000000000004f3f $d
             forth.s:3555   .text:0000000000004f40 $t
             forth.s:3566   .text:0000000000004f5f $d
             forth.s:3566   .text:0000000000004f60 $t
             forth.s:3578   .text:0000000000004f7f $d
             forth.s:3578   .text:0000000000004f80 $t
             forth.s:3643   .text:000000000000503d $d
             forth.s:3643   .text:000000000000503e $t
             forth.s:3778   .text:00000000000051b5 $d
             forth.s:3778   .text:00000000000051b6 $t
             forth.s:3832   .text:000000000000525b $d
             forth.s:3832   .text:000000000000525c $t
             forth.s:3844   .text:000000000000527f $d
             forth.s:3844   .text:0000000000005280 $t
             forth.s:3880   .text:00000000000052f7 $d
             forth.s:3880   .text:00000000000052f8 $t
             forth.s:3895   .text:0000000000005329 $d
             forth.s:3895   .text:000000000000532a $t
             forth.s:3950   .text:00000000000053c9 $d
             forth.s:3950   .text:00000000000053ca $t
             forth.s:4034   .text:0000000000005503 $d
             forth.s:4034   .text:0000000000005504 $t
             forth.s:4251   .text:00000000000056fd $d
             forth.s:4251   .text:00000000000056fe $t
             forth.s:4318   .text:00000000000057c3 $d
             forth.s:4318   .text:00000000000057c4 $t
             forth.s:4417   .text:000000000000591d $d
             forth.s:4417   .text:000000000000591e $t

UNDEFINED SYMBOLS
_mstack
