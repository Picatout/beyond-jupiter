ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	   
 179              	   /* NVIC block */
 180              	   .equ NVIC_BASE_ADR, 0xE000E000
 181              	   .equ NVIC_ISER0, 0x100
 182              	   .equ NVIC_ISER1, 0x104
 183              	   .equ NVIC_ISER2, 0x108
 184              	   .equ NVIC_ISER3, 0x10c
 185              	   .equ NVIC_ISER4, 0x110
 186              	   .equ NVIC_ISER5, 0x114
 187              	   .equ NVIC_ISER6, 0x118
 188              	   .equ NVIC_ISER7, 0x11c
 189              	   .equ NVIC_ICER0, 0x180
 190              	   .equ NVIC_ICER1, 0x184 
 191              	   .equ NVIC_ICER2, 0x188 
 192              	   .equ NVIC_ICER3, 0x18C 
 193              	   .equ NVIC_ICER4, 0x190 
 194              	   .equ NVIC_ICER5, 0x194 
 195              	   .equ NVIC_ICER6, 0x198 
 196              	   .equ NVIC_ICER7, 0x19C 
 197              	   .equ NVIC_ISPR0, 0x200
 198              	   .equ NVIC_ISPR1, 0x204
 199              	   .equ NVIC_ISPR2, 0x208 
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ISPR3, 0x20c 
 201              	   .equ NVIC_ISPR4, 0x210 
 202              	   .equ NVIC_ISPR5, 0x214 
 203              	   .equ NVIC_ISPR6, 0x218 
 204              	   .equ NVIC_ISPR7, 0x21c 
 205              	   .equ NVIC_ICPR0, 0x280
 206              	   .equ NVIC_ICPR1, 0x284
 207              	   .equ NVIC_ICPR2, 0x288
 208              	   .equ NVIC_ICPR3, 0x28c
 209              	   .equ NVIC_ICPR4, 0x290
 210              	   .equ NVIC_ICPR5, 0x294
 211              	   .equ NVIC_ICPR6, 0x298
 212              	   .equ NVIC_ICPR7, 0x29c
 213              	   .equ NVIC_IABR0, 0x300
 214              	   .equ NVIC_IABR1, 0x304
 215              	   .equ NVIC_IABR2, 0x308
 216              	   .equ NVIC_IABR3, 0x30c
 217              	   .equ NVIC_IABR4, 0x310
 218              	   .equ NVIC_IABR5, 0x314
 219              	   .equ NVIC_IABR6, 0x318
 220              	   .equ NVIC_IABR7, 0x31c
 221              	/*  NVIC_IPR0 - NVIC_IPR59 */
 222              	   .equ NVIC_IPR_BASE, 0xE000E400 
 223              	
 224              	/*  IRQ number */
 225              	   .equ NMI_IRQ, (-14) // non maskable
 226              	   .equ HF_IRQ, (-13)  // hard fault
 227              	   .equ MM_IRQ, (-12)  // memory Management
 228              	   .equ BF_IRQ, (-11)  // bus fault 
 229              	   .equ UF_IRQ, (-10)  // usage fault 
 230              	   .equ SVC_IRQ, (-5)  // service call 
 231              	   .equ DM_IRQ, (-4)  // debug monitor
 232              	   .equ PSV_IRQ, (-2) // pending service 
 233              	   .equ STCK_IRQ, (-1) // systick 
 234              	   .equ WWDG_IRQ, (0) // window watchdog 
 235              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 236              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 237              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 238              	   .equ FLASH_IRQ, (4) // flash global 
 239              	   .equ RCC_IRQ, (5)  // real time clock 
 240              	   .equ EXTI0_IRQ, (6) // 
 241              	   .equ EXTI1_IRQ, (7)
 242              	   .equ EXTI2_IRQ, (8)
 243              	   .equ EXTI3_IRQ, (9)
 244              	   .equ EXTI4_IRQ, (10)
 245              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 246              	   .equ DMA1S1_IRQ, (12)
 247              	   .equ DMA1S2_IRQ, (13)
 248              	   .equ DMA1S3_IRQ, (14)
 249              	   .equ DMA1S4_IRQ, (15)
 250              	   .equ DMA1S5_IRQ, (16)
 251              	   .equ DMA1S6_IRQ, (17)
 252              	   .equ ADC_IRQ, (18)
 253              	   .equ EXTI9_5_IRQ, (23)
 254              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 255              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 256              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
ARM GAS  forth.s 			page 6


 257              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 258              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 259              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 260              	   .equ TIM4_IRQ, (30) // TIMER4 global
 261              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 262              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 263              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 264              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 265              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 266              	   .equ SPI2_IRQ, (36)  // SPI2 global
 267              	   .equ USART1_IRQ, (37) // USART1 global
 268              	   .equ USART2_IRQ, (38) // USART2 global
 269              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 270              	   .equ EXTI17_IRQ, (41)
 271              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 272              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 273              	   .equ SDIO_IRQ, (49) // SDIO global
 274              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 275              	   .equ SPI3_IRQ, (51)
 276              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 277              	   .equ DMA2S1_IRQ, (57) 
 278              	   .equ DMAS2_IRQ, (58)
 279              	   .equ DMAS3_IRQ, (59)
 280              	   .equ DMAS4_IRQ, (60)
 281              	   .equ OTG_FS_IRQ, (67)
 282              	   .equ DMA2S5_IRQ, (68)
 283              	   .equ DMA2S6_IRQ, (69)
 284              	   .equ DMA2S7_IRQ, (70)
 285              	   .equ USART6_IRQ, (71)
 286              	   .equ I2C3EV_IRQ, (72)
 287              	   .equ I2C3ER_IRQ, (73)
 288              	   .equ FPU_IRQ, (81) // FPU global
 289              	   .equ SPI4_IRQ, (84)
 290              	   .equ SPI5_IRQ, (85)
 291              	   
 292              	
 293              	/* TIMERS registers */
 294              	.equ TIM1_BASE_ADR,0x40010000
 295              	.equ TIM9_BASE_ADR,0x40010400
 296              	.equ TIM10_BASE_ADR,0x40010800
 297              	.equ TIM11_BASE_ADR,0x40010C00
 298              	
 299              	.equ TIM2_BASE_ADR,0x40000000
 300              	.equ TIM3_BASE_ADR,0x40000400
 301              	.equ TIM4_BASE_ADR,0x40000800
 302              	.equ TIM5_BASE_ADR,0x40000C00
 303              	
 304              	/* TIMER1 */
 305              	.equ TIM1_RCR,48 
 306              	.equ TIM1_BDTR,68 
 307              	
 308              	/* TIMER2..TIMER5 */
 309              	.equ TIM_CR1,0
 310              	.equ TIM_CR2,4
 311              	.equ TIM_SMCR,8
 312              	.equ TIM_DIER,12
 313              	.equ TIM_SR,16
ARM GAS  forth.s 			page 7


 314              	.equ TIM_EGR,20
 315              	.equ TIM_CCMR1,24
 316              	.equ TIM_CCMR2,28
 317              	.equ TIM_CCER,32
 318              	.equ TIM_CNT,36
 319              	.equ TIM_PSC,40
 320              	.equ TIM_ARR,44
 321              	.equ TIM_CCR1,52
 322              	.equ TIM_CCR2,56
 323              	.equ TIM_CCR3,60
 324              	.equ TIM_CCR4,64
 325              	.equ TIM_DCR,72
 326              	.equ TIM_DMAR,76
 327              	.equ TIM2_OR,80
 328              	.equ TIM5_OR,80 
 329              	
 330              	/* SYSCFG registers */
 331              	.equ SYSCFG_BASE_ADR, 0x40013800
 332              	
 333              	.equ SYSCFG_MEMRMP,0
 334              	.equ SYSCFG_PMC,4
 335              	.equ SYSCFG_EXTICR1,8
 336              	.equ SYSCFG_EXTICR2,12
 337              	.equ SYSCFG_EXTICR3,16
 338              	.equ SYSCFG_EXTICR4,20
 339              	.equ SYSCFG_CMPCR,32
 340              	
 341              	/* EXTI registers */
 342              	.equ EXTI_BASE_ADR, 0x40013C00
 343              	
 344              	.equ EXTI_IMR,0
 345              	.equ EXTI_EMR,4
 346              	.equ EXTI_RTSR,8
 347              	.equ EXTI_FTSR,12
 348              	.equ EXTI_SWIER,16
 349              	.equ EXTI_PR,20
 350              	
 351              	/* SPI registers */
 352              	SPI1_BASE_ADR = 0x40013000 
 353              	SPI2_BASE_ADR = 0x40003800
 354              	SPI3_BASE_ADR = 0x40003C00
 355              	SPI4_BASE_ADR = 0x40013400
 356              	
 357              	SPI_CR1 = 0
 358              	SPI_CR2 = 4
 359              	SPI_SR = 8
 360              	SPI_DR = 12 
 361              	SPI_CRCPR = 16 
 362              	SPI_RXCRCR = 20 
 363              	SPI_TXCRCR = 24
 364              	SPI_I2SCFGR = 28  
 365              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
ARM GAS  forth.s 			page 8


   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
ARM GAS  forth.s 			page 9


  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	
 109              	/***********************************************
 110              	* MACROS
 111              	*	Assemble inline direct threaded code ending.
 112              	***********************************************/
 113              		.macro _CALL fn /* low level routine call */ 
 114              	 	PUSH {LR}
 115              		BL \fn  
 116              		POP {LR}
 117              		.endm
 118              		
ARM GAS  forth.s 			page 10


 119              		.macro _RET /* exit sub-routine */ 
 120              		BX LR 
 121              		.endm 
 122              	
 123              		/* dictionary header  */
 124              		.macro _HEADER  label, nlen, name
 125              			.word LINK 
 126              			.equ LINK , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		\label:   // code field 
 131              		.endm 
 132              		
 133              	
 134              	// local function header 
 135              		.macro _FUNC label 
 136              		.section .text, "ax", %progbits 
 137              		.p2align 2 
 138              		.type \label, %function  
 139              		\label:
 140              		.endm 
 141              	
 142              	// global function header 
 143              		.macro _GBL_FUNC label 
 144              		.global \label 
 145              		_FUNC \label 
 146              		.endm 
 147              	
 148              	
 149              	// load large constant to register 
 150              		.macro _MOV32 r, value 
 151              		mov \r,#(\value&0xffff)
 152              		movt \r,#(\value>>16)
 153              		.endm 
 154              	
 155              		.macro _NEXT /* direct jump INEXT */ 
 156              		B INEXT   
 157              		.endm 
 158              	
 159              	 	.macro	_NEST /*start high level word */
 160              		BX INX  
 161              		NOP.N 
 162              		.endm
 163              	
 164              		.macro _ADR label 
 165              		.word 1+\label  
 166              		.endm 
 167              	
 168              	 	.macro	_UNNEST	/*end high level word */
 169              		_ADR UNNEST 
 170              		.endm
 171              	
 172              	 	.macro	_DOLIT u /*long literals */
 173              		_ADR	DOLIT
 174              		.word	\u 
 175              		.endm
ARM GAS  forth.s 			page 11


 176              	
 177              		.macro _DOTQP len, text 
 178              		_ADR DOTQP 
 179              		.byte \len 
 180              		.ascii "\text" 
 181              		.p2align 2 
 182              		.endm
 183              	
 184              		.macro _COMPI name 
 185              		_DOLIT \name 
 186              		_ADR CALLC 
 187              		.endm 
 188              	
 189              		.macro _ABORQ len,name 
 190              		_ADR ABORQ 
 191              		.byte \len 
 192              		.ascii "\name"
 193              		.p2align 2 
 194              		.endm
 195              	
 196              		.macro _BRAN label 
 197              		_ADR BRAN 
 198              		.word \label 
 199              		.endm 
 200              	
 201              		.macro _QBRAN label 
 202              		_ADR QBRAN 
 203              		.word \label
 204              		.endm 
 205              	
 206              		.macro _DONXT label 
 207              		_ADR DONXT
 208              		.word \label 
 209              		.endm 
 210              	
 211              	 	.macro	_PUSH	/*push TOS on data stack*/
 212              		STR	TOS,[DSP,#-4]!
 213              		.endm
 214              	
 215              	 	.macro	_POP /*pop data stack to TOS */
 216              		LDR	TOS,[DSP],#4
 217              		.endm
 218              	
 219              		// calling a colon word 
 220              		// from a code word   
 221              		.macro _CALL_COLWORD target 
 222              	    ldr WP,=\target 
 223              		orr WP,#1
 224              		b \target  
 225              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
ARM GAS  forth.s 			page 12


  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
ARM GAS  forth.s 			page 13


  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
ARM GAS  forth.s 			page 14


 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF890C4 	  ldr IP,=dh
 159 000e 01F03DBC 	  b INEXT  
 160              	dh:
 161 0012 09300000 	  _ADR PRESE    
 162 0016 0B1A0000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e C11E0000 	  _ADR COUNT 
 164 0022 BD270000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 3D1B0000 	  _ADR DUPP
 167 002e E51A0000 	  _ADR TOR 
 168 0032 0B1A0000 	  _DOLIT 16 
 168      10000000 
 169 003a 591F0000 	  _ADR BASE 
 170 003e 7D1A0000 	  _ADR STORE 
 171 0042 F5280000 	  _ADR DOT 
 172 0046 BD1A0000 	  _ADR RFROM
 173 004a 0B1A0000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 811B0000 	  _ADR ANDD
 175 0056 4B1A0000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 0B1A0000 	  _DOLIT ','
 177      2C000000 
 178 006a 15190000 	  _ADR EMIT 
 179 006e 69270000 	  _ADR SPACE 
 180 0072 F5280000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F000BC 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
ARM GAS  forth.s 			page 15


 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F0F7BB 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C0C3 	  ldr IP,=ur
 232 00e2 01F0D3BB 	  b INEXT  
 233              	ur:
 234 00e6 09300000 	  _ADR PRESE
 235 00ea F1270000 	  _ADR CR   
 236 00ee 0B1A0000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 C11E0000 		_ADR COUNT 
 238 00fa BD270000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
ARM GAS  forth.s 			page 16


 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C4F9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0B1FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 03F08BBC 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF820A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
ARM GAS  forth.s 			page 17


 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
ARM GAS  forth.s 			page 18


 346              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 347 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 348 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 349 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 350 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 351              	/* configure GPIOC:13 as output for user LED */
 352 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 352      C4F20200 
 353 0206 4FF00D01 	  mov r1,#LED_PIN
 354 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 355 020e 00B500F0 	  _CALL gpio_config 
 355      8FF85DF8 
 355      04EB
 356 0218 4FF00102 	  mov r2,#1
 357 021c 00B500F0 	  _CALL gpio_out 
 357      DEF85DF8 
 357      04EB
 358              	/* enable compensation CELL for fast I/O */
 359 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 359      C4F20101 
 360 022e 4FF00100 		mov r0,#1 
 361 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 362              	/* wait for ready bit */ 
 363 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 364 0236 10F4807F 	    tst r0,#(1<<8)
 365 023a FBD0     		beq 1b 	
 366              	
 367              	
 368              	/* configure systicks for 1msec ticks */
 369              	// set priority to 15 (lowest)
 370 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 371 0240 4FF00F01 	  mov r1,#15 
 372 0244 00B500F0 	  _CALL nvic_set_priority
 372      2FF85DF8 
 372      04EB
 373 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 373      CEF20000 
 374 0256 47F2FF61 	  _MOV32 r1,95999 
 374      C0F20101 
 375 025e 4160     	  str r1,[r0,#STK_LOAD]
 376 0260 4FF00701 	  mov r1,#7
 377 0264 0160     	  str r1,[r0,STK_CTL]
 378 0266 7047     	  _RET  
 379              	
 380              	
 381              	/* copy system variables to RAM */ 
 382              		.type remap, %function 
 383              	    .global remap 
 384              	remap:
 385              	// copy system to RAM 	
 386 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 386      C2F20000 
 387 0270 8D49     		ldr r1,=UZERO 
 388 0272 4FF0A802 		mov r2,#ULAST-UZERO 
 389 0276 02F10302 		add r2,r2,#3
 390 027a 22F00302 		and r2,r2,#~3 
 391 027e 51F8043B 	1:	ldr r3,[r1],#4 
ARM GAS  forth.s 			page 19


 392 0282 40F8043B 		str r3,[r0],#4 
 393 0286 043A     		subs R2,#4 
 394 0288 F9D1     		bne 1b
 395              	// zero end of RAM 
 396 028a 4FF00002 		_MOV32 r2,RAM_END 
 396      C2F20202 
 397 0292 83EA0303 		eor r3,r3,r3 
 398 0296 40F8043B 	2:  str r3,[r0],#4
 399 029a 9042     		cmp r0,r2 
 400 029c FBDB     		blt 2b 
 401 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 401      C2F20004 
 402 02a6 7047     		_RET 
 403              	
 404              	// set irq priority 
 405              	// 0 highest 
 406              	// 15 lowest
 407              	// input: r0 IRQn  
 408              	//        r1  ipr 
 409              	nvic_set_priority:
 410 02a8 08B4     	    push {r3}
 411 02aa 0028     	    cmp r0,#0 
 412 02ac 08D4     	    bmi negative_irq 
 413 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 413      CEF20003 
 414 02b6 4FEA0111 	    lsl r1,#4 
 415 02ba 1954     	    strb r1,[r3,r0]
 416 02bc 08BC     	    pop {r3}
 417 02be 7047     	    _RET 
 418              	negative_irq:
 419 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 419      CEF20003 
 420 02c8 00F00F00 	    and r0,#0XF 
 421 02cc A0F10400 	    sub r0,#4 
 422 02d0 4FEA0111 	    lsl r1,#4 
 423 02d4 1954     	    strb r1,[r3,r0]
 424 02d6 08BC     	    pop {r3}
 425 02d8 7047     	    _RET 
 426              	
 427              	
 428              	// enable interrupt in nvic 
 429              	// input: r0 = IRQn 
 430              	nvic_enable_irq: 
 431 02da 0EB4     	    push {r1,r2,r3}
 432 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 432      CEF20003 
 433 02e4 0146     	    mov r1,r0 
 434 02e6 4FEA5111 	    lsr r1,#5  
 435 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 436 02ee 00F01F00 	    and r0,#31 // bit#
 437 02f2 4FF00102 	    mov r2,#1 
 438 02f6 02FA00F2 	    lsl r2,r0
 439 02fa 72B6     	    cpsid I
 440 02fc 5A50     	    str r2,[r3,r1]
 441 02fe 62B6     	    cpsie I 
 442 0300 0EBC     	    pop {r1,r2,r3}
 443 0302 7047     	    _RET 
ARM GAS  forth.s 			page 20


 444              	
 445              	// disable interrupt in nvic
 446              	// input: r0 = IRQn
 447              	nvic_disable_irq:
 448 0304 0EB4     	    push {r1,r2,r3}
 449 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 449      CEF20003 
 450 030e 0146     	    mov r1,r0 
 451 0310 4FEA5111 	    lsr r1,#5  
 452 0314 4FEA8101 	    lsl r1,#2  // ISERn
 453 0318 00F01F00 	    and r0,#31 // bit#
 454 031c 4FF00102 	    mov r2,#1 
 455 0320 02FA00F2 	    lsl r2,r0
 456 0324 5A50     	    str r2,[r3,r1]
 457 0326 BFF34F8F 	    dsb 
 458 032a BFF36F8F 	    isb 
 459 032e 0EBC     	    pop {r1,r2,r3}
 460 0330 7047     	    _RET 
 461              	
 462              	/**********************************
 463              	  gpio_config 
 464              	  Configure gpio mode 
 465              	  input:
 466              	    r0   GPIOx 
 467              	    r1   pin 
 468              	    r2   mode 
 469              	  output:
 470              	    none 
 471              	  use:
 472              	    r3,r5,r11  
 473              	**********************************/
 474              	gpio_config:
 475 0332 2DE92808 	    push {r3,r5,r11}
 476              	//  clear registers field 
 477 0336 4FF00105 	    mov r5,#1
 478 033a 05FA01F5 	    lsl r5,r1
 479 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 480 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 481 0344 03EA0503 	    and r3,r5 
 482 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 483 034a 4FF00305 	    mov r5,#3 
 484 034e 4FF0020B 	    mov r11,#2 
 485 0352 01FB0BFB 	    mul r11,r1 
 486 0356 05FA0BF5 	    lsl r5,r11 
 487 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 488 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 489 0360 03EA0503 	    and r3,r5 
 490 0364 0360     	    str r3,[r0,#GPIO_MODER]
 491 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 492 0368 03EA0503 	    and r3,r5 
 493 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 494              	// set mode register, r2 low nibble  
 495 036e 02F00305 	    and r5,r2,#3    
 496 0372 05FA0BF5 	    lsl r5,r11 // mode 
 497 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 498 0378 43EA0503 	    orr r3,r5 
 499 037c 0360     	    str r3,[r0,#GPIO_MODER]
ARM GAS  forth.s 			page 21


 500 037e 032A     	    cmp r2,#3
 501 0380 13D0     	    beq 9f // analog input 
 502 0382 12F00305 	    ands r5,r2,#3 
 503 0386 08D0     	    beq input_pull 
 504              	output_type:
 505 0388 4FEA1212 	    lsr r2,#4 
 506 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 507 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 508 0392 43EA0203 	    orr r3,r2 
 509 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 510 0398 07E0     	    b 9f 
 511              	input_pull:
 512 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 513 039c 4FEA1212 	    lsr r2,#4 
 514 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 515 03a4 43EA0203 	    orr r3,r2 
 516 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 517 03aa BDE82808 	9:  pop {r3,r5,r11}
 518 03ae 7047     	    _RET 
 519              	
 520              	// configure gpio speed 
 521              	// input:
 522              	//    r0   GPIO_BASE_ADR 
 523              	//    r1   pin 
 524              	//    r2   speed
 525              	// use:
 526              	//  r3,r5,r11 
 527              	gpio_speed:
 528 03b0 2DE92808 	    push {r3,r5,r11}
 529 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 530 03b6 4FF00305 	    mov r5,#3
 531 03ba 4FF0020B 	    mov r11,#2 
 532 03be 01FB0BFB 	    mul r11,r1 
 533 03c2 05FA0BF5 	    lsl r5,r11
 534 03c6 6FEA0505 	    mvn r5,r5 
 535 03ca 03EA0503 	    and r3,r5   
 536 03ce 02FA0BF2 	    lsl r2,r11  
 537 03d2 43EA0203 	    orr r3,r2 
 538 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 539 03d8 BDE82808 	    pop {r3,r5,r11}
 540 03dc 7047     	    _RET
 541              	
 542              	/**************************** 
 543              	  gpio_out port,pin,0|1
 544              	  input:
 545              	    r0   gpio_base_adr 
 546              	    r1   pin 
 547              	    r2   data 0|1 
 548              	**************************/
 549              	gpio_out:
 550 03de 08B4     	    push {r3}
 551 03e0 4FF00103 	    mov r3,#1 
 552 03e4 03FA01F3 	    lsl r3,r1 
 553 03e8 0AB9     	    cbnz r2, 1f 
 554 03ea 4FEA0343 	    lsl r3,#16 
 555 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 556 03f0 08BC     	    pop {r3}
ARM GAS  forth.s 			page 22


 557 03f2 7047     	    _RET 
 558              	
 559              	/******************************************************
 560              	*  COLD start moves the following to USER variables.
 561              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 562              	******************************************************/
 563              		.p2align 2
 564              	UZERO:
 565 03f4 00000000 		.word 0  			/*Reserved */
 566 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 567 03fc 00000000 		.word 0      /* TICKS */
 568 0400 00000000 	    .word 0     /* CD_TIMER */
 569 0404 8C390000 		.word HI  /*'BOOT */
 570 0408 B4130000 		.word PS2_QKEY /* query for character */
 571 040c 8C0C0000 	  .word TV_EMIT  /* char output device */
 572 0410 0A000000 	  .word BASEE 	/*BASE */
 573 0414 00000000 		.word 0			/*tmp */
 574 0418 00000000 		.word 0			/*SPAN */
 575 041c 00000000 		.word 0			/*>IN */
 576 0420 00000000 		.word 0			/*#TIB */
 577 0424 00FF0120 		.word TIBB	/*TIBU */
 578 0428 E02E0000 		.word INTER	/*'EVAL */
 579 042c 00000000 		.word 0			/*HLD */
 580 0430 743A0000 		.word _LASTN	/*CONTEXT */
 581 0434 D83A0000 		.word CTOP  	/* FCP end of system dictionnary */
 582 0438 E4360020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 583 043c 743A0000 		.word _LASTN	/*LAST word in dictionary */
 584 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 584      00000000 
 584      00000000 
 584      00000000 
 585 0450 00000000 		.word 0  /* RX_HEAD */
 586 0454 00000000 		.word 0  /* RX_TAIL */ 
 587 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 588 045c 00000000 		.word 0  /* VID_STATE, video state */  
 589 0460 00000000 	    .word 0  /* VID_FIELD, field */
 590 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 591 0468 00000000 	    .word 0 /* kbd struct */
 592 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 592      00000000 
 592      00000000 
 592      00000000 
 593 047c 00000000 		.word 0  /* kbd queue head */
 594 0480 00000000 		.word 0 /* kbd queue tail */ 
 595 0484 00000000 	    .word 0 /* tv cursor row */
 596 0488 00000000 	    .word 0 /* tv cursor column */ 
 597 048c 00000000 	    .word 0 /* tv back color */
 598 0490 07000000 	    .word 7 /* tv font color */
 599 0494 00000000 	    .word 0,0 
 599      00000000 
 600              	ULAST:
 601              	
 602              	// used by _HEADER macro 
 603              	// to link names field
 604              	// in dictionary  
 605 049c 12000000 	    .equ LINK, 0 
 605      E6000000 
ARM GAS  forth.s 			page 23


 605      84180000 
 605      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04ac 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04b4 1868     		ldr r0,[r3,#USART_SR]
  38 04b6 5968     		ldr r1,[r3,#USART_DR]
  39 04b8 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04bc 0CD0     		beq 2f // no char received 
  41 04be B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04c2 3FF407AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04c6 04F14C00 		add r0,UP,#RX_QUEUE
  44 04ca 226E     		ldr r2,[UP,#RX_TAIL]
  45 04cc 8154     		strb r1,[r0,r2]
  46 04ce 02F10102 		add r2,#1 
  47 04d2 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04d6 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04d8 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
ARM GAS  forth.s 			page 24


  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04da 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04e2 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04e4 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04e8 01EA0201 	  and r1,r1,r2
  62 04ec 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f0 41EA0201 	  orr r1,r1,r2 
  64 04f4 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04f6 4FF4EE61 	  mov r1,#0x77<<4 
  67 04fa 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 04fc 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0504 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0508 8160     	  str r1,[r0,#USART_BRR]
  73 050a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 050e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0510 4FF02500 	  mov r0,#USART1_IRQ 
  77 0514 4FF00701 	  mov r1,#7
  78 0518 00B5FFF7 	  _CALL nvic_set_priority
  78      C5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0522 4FF02500 	  mov r0,#USART1_IRQ 
  81 0526 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D7FE5DF8 
  81      04EB
  82 0530 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0532 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0540 47F8046D 		_PUSH
  92 0544 206E     		ldr T0,[UP,#RX_TAIL] 
  93 0546 E16D     		ldr T1,[UP,#RX_HEAD]
  94 0548 90EA0106 		eors TOS,T0,T1 
  95 054c 0CD0     		beq 1f
  96 054e 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0552 0844     		add T0,T1 
  98 0554 0678     		ldrb TOS,[T0]
  99 0556 01F10101 		add T1,#1 
 100 055a 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 055e E165     		str T1,[UP,#RX_HEAD]
 102 0560 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 25


 103 0564 4FF0FF36 		mov TOS,#-1
 104 0568 01F090B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 056c 36050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 057c 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0584 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0586 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 058a FBD0     		beq 1b 
 115 058c 2E71     		strb TOS,[WP,#USART_DR]	 
 116 058e 57F8046B 		_POP
 117 0592 01F07BB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0596 70050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a0 47F8046D 	        _PUSH 
 126 05a4 4FF00006 	        mov TOS,#0
 127 05a8 01F070B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05ac 9A050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05b8 47F8046D 	        _PUSH 
 135 05bc 4FF00106 	        mov TOS,#1
 136 05c0 01F064B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05c4 B0050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d0 3046     	        mov T0,TOS
 144 05d2 57F8046B 	        _POP 
 145 05d6 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05d8 4B48     	        ldr T0,=SER_QKEY 
 148 05da 6061     	        str T0,[UP,#STDIN]
 149 05dc 4B48     	        ldr T0,=SER_EMIT
ARM GAS  forth.s 			page 26


 150 05de A061     	        str T0,[UP,#STDOUT]
 151 05e0 01F054B9 	        _NEXT 
 152              	4: // local console 
 153 05e4 4A48     	        ldr T0,=PS2_QKEY
 154 05e6 6061     	        str T0,[UP,#STDIN]
 155 05e8 4A48     	        ldr T0,=TV_EMIT
 156 05ea A061     	        str T0,[UP,#STDOUT]
 157 05ec 01F04EB9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f0 C8050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0600 504700BF 	      _NEST 
 166 0604 0B1A0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 060c 5D1C0000 	1:    _ADR ONEP  // c+1
 168 0610 E51A0000 	      _ADR TOR   
 169 0614 0B1A0000 	      _DOLIT 10 
 169      0A000000 
 170 061c 4D210000 	      _ADR SLMOD // r q  
 171 0620 111D0000 	      _ADR QDUP  // r q q | r 0  
 172 0624 4B1A0000 	      _QBRAN 2f  // r 0 
 172      38060000 
 173 062c BD1A0000 	      _ADR RFROM // r q c 
 174 0630 5F1A0000 	      _BRAN 1b
 174      0C060000 
 175 0638 0B1A0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0640 011C0000 	      _ADR PLUS 
 177 0644 15190000 	      _ADR EMIT 
 178 0648 BD1A0000 	      _ADR RFROM 
 179 064c 111D0000 	      _ADR QDUP 
 180 0650 4B1A0000 	      _QBRAN 3f
 180      68060000 
 181 0658 6D1C0000 	      _ADR ONEM 
 182 065c E51A0000 	      _ADR TOR 
 183 0660 5F1A0000 	      _BRAN 2b 
 183      38060000 
 184              	3:    
 185 0668 93180000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 066c F4050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0678 504700BF 	      _NEST 
 193 067c 0B1A0000 	      _DOLIT 27 
 193      1B000000 
ARM GAS  forth.s 			page 27


 194 0684 15190000 	      _ADR EMIT 
 195 0688 0B1A0000 	      _DOLIT '['
 195      5B000000 
 196 0690 15190000 	      _ADR EMIT 
 197 0694 93180000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0698 70060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06a4 504700BF 	      _NEST
 205 06a8 79060000 	      _ADR ANSI_ESC
 206 06ac 4D1B0000 	      _ADR SWAP 
 207 06b0 01060000 	      _ADR ANSI_PARAM 
 208 06b4 0B1A0000 	      _DOLIT ';'
 208      3B000000 
 209 06bc 15190000 	      _ADR EMIT
 210 06c0 01060000 	      _ADR ANSI_PARAM
 211 06c4 0B1A0000 	      _DOLIT 'H'
 211      48000000 
 212 06cc 15190000 	      _ADR EMIT 
 213 06d0 93180000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06d4 9C060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e0 504700BF 	    _NEST
 221 06e4 0B1A0000 	    _DOLIT 1 
 221      01000000 
 222 06ec 3D1B0000 	    _ADR DUPP 
 223 06f0 A5060000 	    _ADR SER_AT  
 224 06f4 79060000 	    _ADR ANSI_ESC
 225 06f8 0B1A0000 	    _DOLIT 'J'
 225      4A000000 
 226 0700 15190000 	    _ADR EMIT 
 227 0704 93180000 	    _UNNEST 
 228 0708 40050000 	
 228      7C050000 
 228      B4130000 
 228      8C0C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
ARM GAS  forth.s 			page 28


  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
ARM GAS  forth.s 			page 29


  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*12-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	/*******************************************************
  56              	NOTES:
  57              	 1) Values computed for a 96Mhz sysclock 
  58              	 2) Video sync output on PB1 use T3_CH4
  59              	 3) video out trigger TIMER3 CH3 
  60              	********************************************************/
  61              	
  62              	/**************************************
  63              	  initialize TIMER3 CH4 to generate tv_out
  64              	  synchronization signal.
  65              	**************************************/ 
  66              	  _GBL_FUNC tv_init
  67              	// configure PA0:3 as OUTPUT_OD 
  68 0718 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR 
  68      C4F20200 
  69 0720 0168     	  ldr r1,[r0,#GPIO_MODER]
  70 0722 4FF05502 	  mov r2,#0x55
  71 0726 41EA0201 	  orr r1,r2
  72 072a 0160     	  str r1,[r0,#GPIO_MODER]
  73 072c 81EA0101 	  eor r1,r1 
  74 0730 4161     	  str r1,[r0,#GPIO_ODR]  
  75              	// configure PB1 as OUTPUT_AFPP 
  76              	// this is TIM3_CC4 output compare 
  77 0732 00F58060 	  add r0,#0x400 // GPIOB_BASE_ADR
  78 0736 4FF00101 	  mov r1,#1 // pin 1 
  79 073a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  80 073e 00B5FFF7 	  _CALL gpio_config 
  80      F7FD5DF8 
  80      04EB
  81 0748 4FF00101 	  mov r1,#1 
  82 074c 4FF00202 	  mov r2,#2
  83 0750 00B5FFF7 	  _CALL gpio_speed 
  83      2DFE5DF8 
  83      04EB
  84              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  85 075a 016A     	  ldr r1,[r0,#GPIO_AFRL]
  86 075c 41F02001 	  orr r1,#(2<<4) // r2 
  87 0760 0162     	  str r1,[r0,#GPIO_AFRL]
  88              	// enable peripheral clock 
  89 0762 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  89      C4F20202 
  90 076a 4FF00200 	  mov r0,#2 
ARM GAS  forth.s 			page 30


  91 076e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  92 0770 41EA0001 	  orr r1,r0 
  93 0774 1164     	  str r1,[r2,#RCC_APB1ENR]
  94              	// configure TIMER3   
  95 0776 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
  95      C4F20002 
  96 077e 41F2D470 	  mov r0,#HPER
  97 0782 D062     	  str r0,[r2,#TIM_ARR]
  98 0784 40F27F40 	  mov r0,#VIDEO_DELAY 
  99 0788 D063     	  str r0,[r2,#TIM_CCR3]
 100 078a 4FF4E170 	  mov r0,#HPULSE 
 101 078e 1064     	  str r0,[r2,#TIM_CCR4]  
 102 0790 47F27000 	  mov r0,#(7<<12)+(7<<4)
 103 0794 D061     	  str r0,[r2,#TIM_CCMR2]
 104 0796 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 105 079a 1062     	  str r0,[r2,#TIM_CCER]
 106 079c 4FF00100 	  mov r0,#1 
 107 07a0 D060     	  str r0,[r2,#TIM_DIER]
 108 07a2 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 109              	// enable interrupt in NVIC controller 
 110 07a4 4FF01D00 	  mov r0,#TIM3_IRQ 
 111 07a8 4FF00201 	  mov r1,#2
 112 07ac 00B5FFF7 	  _CALL nvic_set_priority
 112      7BFD5DF8 
 112      04EB
 113 07b6 4FF01D00 	  mov r0,#TIM3_IRQ 
 114 07ba 00B5FFF7 	  _CALL nvic_enable_irq
 114      8DFD5DF8 
 114      04EB
 115 07c4 7047     	  _RET
 116              	
 117              	/*************************************
 118              	  TIMER3 interrupt for tv_out
 119              	  T1 line # 
 120              	  T0 TIM3_BASE_ADR 
 121              	*************************************/
 122 07c6 00BF     	  _GBL_FUNC tv_out_isr
 123 07c8 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 123      C4F20000 
 124 07d0 81EA0101 	  eor T1,T1
 125 07d4 0161     	  str T1,[T0,#TIM_SR]
 126 07d6 616E     	  ldr T1,[UP,#VID_CNTR]
 127 07d8 01F10101 	  add T1,#1 
 128 07dc 6166     	  str T1,[UP,#VID_CNTR]
 129              	/** machine state cases **/
 130 07de A26E     	  ldr T2,[UP,#VID_STATE]
 131 07e0 002A     	  cmp T2,#ST_VSYNC 
 132 07e2 07D0     	  beq state_vsync
 133 07e4 012A     	  cmp T2,#ST_PREVID 
 134 07e6 2FD0     	  beq state_pre_video 
 135 07e8 022A     	  cmp T2,#ST_VIDEO 
 136 07ea 36D0     	  beq state_video_out 
 137 07ec 032A     	  cmp T2,#ST_POSTVID 
 138 07ee 67D0     	  beq state_post_video
 139 07f0 FFF7FEBF 	  b default_handler // invalid state 
 140              	/*** vertical sync state **/
 141              	state_vsync:
ARM GAS  forth.s 			page 31


 142 07f4 0129     	  cmp T1,#1
 143 07f6 06D1     	  bne 1f 
 144              	/****** set vertical pre-sync  *****/
 145 07f8 4FF0DB01 	  mov T1,#SERRATION
 146 07fc 0164     	  str T1,[T0,#TIM_CCR4]
 147 07fe 40F6E931 	  mov T1,#SYNC_LINE 
 148 0802 C162     	  str T1,[T0,#TIM_ARR]
 149 0804 6FE0     	  b tv_isr_exit 
 150 0806 0729     	1: cmp T1,#7
 151 0808 03D1     	  bne 2f 
 152              	// vertical sync pulse   
 153 080a 40F62821 	  mov T1,#VSYNC_PULSE
 154 080e 0164     	  str T1,[T0,#TIM_CCR4]
 155 0810 69E0     	  b tv_isr_exit
 156 0812 0D29     	2: cmp T1,#13
 157 0814 03D1     	   bne 3f  
 158              	// set vertical post-sync    
 159 0816 4FF0DB01 	   mov T1,#SERRATION 
 160 081a 0164     	   str T1,[T0,#TIM_CCR4]
 161 081c 63E0     	   b tv_isr_exit   
 162 081e 1229     	3: cmp T1,#18
 163 0820 03D1     	   bne 4f 
 164              	// if even field full line  
 165 0822 E16E     	   ldr T1,[UP,#VID_FIELD]
 166 0824 0029     	   cmp T1,#ODD_FIELD  
 167 0826 5ED0     	   beq tv_isr_exit 
 168 0828 01E0     	   b sync_end 
 169 082a 1329     	4: cmp T1,#19 
 170 082c 5BD1     	   bne tv_isr_exit
 171              	sync_end: 
 172 082e 4FF00901 	   mov T1,#9
 173 0832 6166     	   str T1,[UP,#VID_CNTR]
 174 0834 4FF4E171 	   mov T1,#HPULSE 
 175 0838 0164     	   str T1,[T0,#TIM_CCR4] 
 176 083a 41F2D471 	   mov T1,#HPER 
 177 083e C162     	   str T1,[T0,#TIM_ARR] 
 178 0840 4FF00101 	   mov T1,#ST_PREVID 
 179 0844 A166     	   str T1,[UP,#VID_STATE]
 180 0846 4EE0     	   b tv_isr_exit 
 181              	/*****************************/
 182              	state_pre_video:
 183 0848 2829     	   cmp T1,#VIDEO_FIRST_LINE
 184 084a 4CD4     	   bmi tv_isr_exit 
 185 084c 4FF00201 	   mov T1,#ST_VIDEO 
 186 0850 A166     	   str T1,[UP,#VID_STATE]
 187 0852 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 188 0856 C160     	   str T1,[T0,#TIM_DIER]
 189 0858 45E0     	   b tv_isr_exit 
 190              	/**************************
 191              	    VIDEO OUTPUT 
 192              	**************************/   
 193              	state_video_out:
 194 085a F029     	   cmp T1,#VIDEO_LAST_LINE 
 195 085c 06D9     	   bls 1f 
 196 085e 4FF00301 	   mov T1,#ST_POSTVID 
 197 0862 A166     	   str T1,[UP,#VID_STATE]
 198 0864 4FF00101 	   mov T1,#1 
ARM GAS  forth.s 			page 32


 199 0868 C160     	   str T1,[T0,#TIM_DIER]
 200 086a 3CE0     	   b tv_isr_exit 
 201              	1: // video output
 202 086c 206F     	   ldr T0,[UP,#VID_BUFFER]
 203 086e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 204 0872 4FF0A003 	   mov T3,#160
 205 0876 03FB01F1 	   mul T1,T3 
 206 087a 0844     	   add T0,T1  
 207 087c 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 207      C4F20201 
 208 0884 30B4     	   push {r4,r5} 
 209 0886 6FF00F04 	   mvn r4,#(15)
 210 088a 0578     	2: ldrb r5,[T0]
 211 088c 8A8A     	   ldrh T2,[T1,#GPIO_ODR]
 212 088e 02EA0402 	   and T2,r4
 213 0892 4FEA1515 	   lsr r5,#4  
 214 0896 42EA0502 	   orr T2,r5 
 215 089a 8A82     	   strh T2,[T1,#GPIO_ODR]
 216 089c 02EA0402 	   and T2,r4 
 217 08a0 10F8015B 	   ldrb r5,[T0],#1
 218 08a4 05F00F05 	   and r5,#15
 219 08a8 42EA0502 	   orr T2,r5 
 220 08ac AFF30080 	   nop.w 
 221 08b0 8A82     	   strh T2,[T1,#GPIO_ODR]
 222 08b2 013B     	   subs T3,#1
 223 08b4 E9D1     	   bne 2b  
 224 08b6 4FF47024 	   mov r4,#(15<<16) 
 225 08ba 8C61     	   str r4,[T1,#GPIO_BSRR]
 226 08bc 30BC     	   pop {r4,r5}
 227 08be 12E0     	   b tv_isr_exit 
 228              	state_post_video:
 229 08c0 4FF48372 	   mov T2,#262
 230 08c4 9142     	   cmp T1,T2
 231 08c6 0ED4     	   bmi tv_isr_exit     
 232              	// odd field line 262 half line 
 233 08c8 E16E     	   ldr T1,[UP,VID_FIELD]
 234 08ca 11B9     	   cbnz T1, frame_end 
 235 08cc 40F6E931 	   mov T1,#SYNC_LINE
 236 08d0 C162     	   str T1,[T0,#TIM_ARR]      
 237              	frame_end: 
 238 08d2 4FF00001 	   mov T1,#ST_VSYNC 
 239 08d6 A166     	   str T1,[UP,#VID_STATE]
 240 08d8 81EA0101 	   eor T1,T1 
 241 08dc 6166     	   str T1,[UP,#VID_CNTR]
 242 08de E16E     	   ldr T1,[UP,#VID_FIELD]
 243 08e0 6FEA0101 	   mvn T1,T1  
 244 08e4 E166     	   str T1,[UP,#VID_FIELD]
 245              	tv_isr_exit: 
 246 08e6 7047     	   _RET   
 247              	
 248              	
 249              	/***************************
 250              	    FORTH WORDS 
 251              	***************************/
 252              	
 253              	// BACK-COLOR ( -- a )
 254              	//   back color variable 
ARM GAS  forth.s 			page 33


 255 08e8 D8060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 255      0A424143 
 255      4B2D434F 
 255      4C4F5200 
 256 08f8 47F8046D 		_PUSH 
 257 08fc 04F19806 		ADD TOS,UP,#BK_COLOR
 258 0900 00F0C4BF 		_NEXT
 259              	
 260              	// PEN-COLOR ( -- a )
 261              	// pen color variable 
 262 0904 EC080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 262      0950454E 
 262      2D434F4C 
 262      4F5200BF 
 263 0914 47F8046D 		_PUSH 
 264 0918 04F19C06 		ADD TOS,UP,#PEN_COLOR
 265 091c 00F0B6BF 		_NEXT 
 266              	
 267              	// COLUMN ( -- a )
 268              	// cursor column variable 
 269 0920 08090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 269      06434F4C 
 269      554D4E00 
 270 092c 47F8046D 	  _PUSH 
 271 0930 04F19406 	  ADD TOS,UP,#COL 
 272 0934 00F0AABF 	  _NEXT 
 273              	
 274              	// ROW ( -- a )
 275              	// cursor row 
 276 0938 24090000 	  _HEADER CURSOR_ROW,3,"ROW"
 276      03524F57 
 277 0940 47F8046D 	  _PUSH 
 278 0944 04F19006 	  ADD TOS,UP,#ROW 
 279 0948 00F0A0BF 	  _NEXT 
 280              	
 281              	// ROW>Y ( n1 - n2 )
 282              	// convert cursor row to y coord 
 283 094c 3C090000 	  _HEADER ROWY,5,"ROW>Y"
 283      05524F57 
 283      3E5900BF 
 284 0958 4FF00800 	  mov T0,#CHAR_HEIGHT
 285 095c 00FB06F6 	  mul TOS,T0 
 286 0960 00F094BF 	  _NEXT 
 287              	
 288              	// COL>X ( n1 -- n2 )
 289              	// convert cursor column to x coord 
 290 0964 50090000 	  _HEADER COLX,5,"COL>X" 
 290      05434F4C 
 290      3E5800BF 
 291 0970 4FF00600 	  mov T0,#CHAR_WIDTH 
 292 0974 00FB06F6 	  mul TOS,T0 
 293 0978 00F088BF 	  _NEXT 
 294              	
 295              	// FONT ( -- a )
 296              	// return address of font table
 297 097c 68090000 	  _HEADER FONT,4,"FONT" 
 297      04464F4E 
ARM GAS  forth.s 			page 34


 297      540000BF 
 298 0988 47F8046D 	  _PUSH 
 299 098c DFF88865 	  ldr TOS,=font_6x8 
 300 0990 00F07CBF 	  _NEXT 
 301              	
 302              	// VIDBUFF ( -- a )
 303              	// address of video buffer 
 304 0994 80090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 304      07564944 
 304      42554646 
 305 09a0 47F8046D 	  _PUSH 
 306 09a4 266F     	  LDR TOS,[UP,#VID_BUFFER]
 307 09a6 00F071BF 	  _NEXT 
 308              	
 309              	
 310              	// PLOT ( x y op -- )
 311              	// draw a pixel 
 312              	//    0 back color 
 313              	//    1 pen color 
 314              	//    2 invert (invert color pixels )
 315              	//    3 xor pen color  
 316 09aa 98090000 	    _HEADER PLOT,4,"PLOT"
 316      04504C4F 
 316      5400
 317              	// compute video buffer byte address from coords
 318 09b4 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 319 09b6 4FF0A002 	    mov T2,#BPR // bytes per row  
 320 09ba 02FB00F0 	    mul T0,T2 
 321 09be 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 322 09c2 1044     	    add T0,T2 
 323 09c4 236F     	    ldr T3,[UP,#VID_BUFFER] 
 324 09c6 0344     	    add T3,T0 // T3 -> byte address 
 325 09c8 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 326 09ca 4FF00F02 	    mov T2,#15 // AND mask 
 327 09ce 11F0010F 	    tst T1,#1 
 328 09d2 01D0     	    beq 1f 
 329 09d4 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 330 09d8 DFF84005 	1:  ldr T0,=plot_op 
 331 09dc D0E806F0 	    tbb [T0,TOS]
 332              	op_back:
 333 09e0 05EA0205 	    and WP,T2 // mask out nibble 
 334 09e4 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 335 09e8 11F0010F 	    tst T1,#1 
 336 09ec 01D1     	    bne 1f 
 337 09ee 4FEA0010 	    lsl T0,#4 // high nibble  
 338 09f2 45EA0005 	1:  orr WP,T0  
 339 09f6 1D70     	    strb WP,[T3]
 340 09f8 1AE0     	    b 9f 
 341              	op_pen: 
 342 09fa 05EA0205 	    and WP,T2 
 343 09fe 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 344 0a02 11F0010F 	    tst T1,#1
 345 0a06 01D1     	    bne 1f 
 346 0a08 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 347 0a0c 45EA0005 	1:	orr WP,T0 
 348 0a10 1D70     	    strb WP,[T3]
 349 0a12 0DE0     	    b 9f 
ARM GAS  forth.s 			page 35


 350              	op_invert:
 351 0a14 85EA0205 	    eor WP,T2 
 352 0a18 1D70     	    strb WP,[T3]
 353 0a1a 09E0     	    b 9f 
 354              	op_xor:
 355 0a1c D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 356 0a20 11F0010F 	    tst T1,#1 
 357 0a24 01D1     	    bne 1f 
 358 0a26 4FEA0010 	    lsl T0,#4 
 359 0a2a 85EA0005 	1:  eor WP,T0 
 360 0a2e 1D70     	    strb WP,[T3]
 361 0a30 57F8046B 	9:  _POP 
 362 0a34 00F02ABF 	    _NEXT 
 363              	
 364 0a38 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 365              	
 366              	
 367              	// VSYNC ( -- )
 368              	// wait vertical sync phase 
 369 0a3c AE090000 	    _HEADER VSYNC,5,"VSYNC"
 369      05565359 
 369      4E4300BF 
 370 0a48 606E     	1:  ldr T0,[UP,#VID_CNTR]
 371 0a4a 0028     	    cmp T0,#0
 372 0a4c FCD1     	    bne 1b
 373 0a4e 00F01DBF 	    _NEXT 
 374              	
 375              	// CLS ( -- )
 376              	// clear TV screen 
 377 0a52 400A0000 	    _HEADER CLS,3,"CLS"
 377      03434C53 
 377      00BF
 378 0a5c 80EA0000 	    eor T0,T0 
 379 0a60 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 380 0a64 40EA0100 	    orr T0,T1 
 381 0a68 4FEA0111 	    lsl T1,#4 
 382 0a6c 40EA0100 	    orr T0,T1 
 383 0a70 4FEA0021 	    lsl T1,T0,#8 
 384 0a74 40EA0100 	    orr T0,T1 
 385 0a78 4FEA0041 	    lsl T1,T0,#16
 386 0a7c 40EA0100 	    orr T0,T1 
 387 0a80 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 388 0a84 226F     	    ldr T2,[UP,#VID_BUFFER]
 389 0a86 5050     	1:	str T0,[T2,T1]
 390 0a88 0439     	    subs T1,#4
 391 0a8a FCD1     	    bne 1b
 392 0a8c 1060     	    str T0,[T2]
 393 0a8e 80EA0000 	    eor T0,T0 
 394 0a92 C4F89000 	    str T0,[UP,#ROW]
 395 0a96 C4F89400 	    str T0,[UP,#COL]
 396 0a9a 00F0F7BE 	    _NEXT 
 397              	
 398              	
 399              	// CLRLINE ( n -- )
 400              	// clear text line 
 401 0a9e 560A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 401      07434C52 
ARM GAS  forth.s 			page 36


 401      4C494E45 
 401      00BF
 402 0aac 504700BF 	  _NEST
 403 0ab0 0B1A0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 403      00050000 
 404 0ab8 3D1B0000 	  _ADR DUPP  
 405 0abc E51A0000 	  _ADR TOR 
 406 0ac0 211C0000 	  _ADR STAR
 407 0ac4 A1090000 	  _ADR VIDBUFF
 408 0ac8 011C0000 	  _ADR PLUS
 409 0acc BD1A0000 	  _ADR RFROM   
 410 0ad0 0B1A0000 	  _DOLIT 0 
 410      00000000 
 411 0ad8 81230000 	  _ADR FILL 
 412 0adc 93180000 	  _UNNEST 
 413              	
 414              	/**********************************
 415              	 SCROLLUP ( -- )
 416              	 scroll up tv screen 1 char height 
 417              	**********************************/
 418 0ae0 A20A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 418      08534352 
 418      4F4C4C55 
 418      500000BF 
 419 0af0 504700BF 	    _NEST 
 420 0af4 A1090000 	    _ADR VIDBUFF 
 421 0af8 3D1B0000 	    _ADR DUPP 
 422 0afc 0B1A0000 	    _DOLIT BPR*CHAR_HEIGHT 
 422      00050000 
 423 0b04 3D1B0000 	    _ADR DUPP 
 424 0b08 E51A0000 	    _ADR TOR 
 425 0b0c 011C0000 	    _ADR PLUS 
 426 0b10 4D1B0000 	    _ADR SWAP 
 427 0b14 0B1A0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 427      007D0000 
 428 0b1c BD1A0000 	    _ADR RFROM  
 429 0b20 111C0000 	    _ADR SUBB 
 430 0b24 39230000 	    _ADR MOVE
 431 0b28 0B1A0000 	    _DOLIT 24 
 431      18000000 
 432 0b30 AD0A0000 	    _ADR CLRLINE 
 433 0b34 93180000 	    _UNNEST 
 434              	
 435              	/***********************************
 436              	    SCROLLDOWN ( -- )
 437              	    scroll down tv screen 1 char 
 438              	***********************************/
 439 0b38 E40A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 439      0A534352 
 439      4F4C4C44 
 439      4F574E00 
 440 0b48 504700BF 	    _NEST 
 441 0b4c A1090000 	    _ADR VIDBUFF
 442 0b50 3D1B0000 	    _ADR DUPP 
 443 0b54 0B1A0000 	    _DOLIT BPR*CHAR_HEIGHT 
 443      00050000 
 444 0b5c 011C0000 	    _ADR PLUS 
ARM GAS  forth.s 			page 37


 445 0b60 0B1A0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 445      007D0000 
 446 0b68 0B1A0000 	    _DOLIT BPR*CHAR_HEIGHT 
 446      00050000 
 447 0b70 111C0000 	    _ADR SUBB  
 448 0b74 39230000 	    _ADR MOVE
 449 0b78 0B1A0000 	    _DOLIT 0 
 449      00000000 
 450 0b80 AD0A0000 	    _ADR CLRLINE
 451 0b84 93180000 	    _UNNEST 
 452              	
 453              	
 454              	/*****************************
 455              	    TV-CRLF 
 456              	    carriage return line feed 
 457              	*****************************/
 458 0b88 3C0B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 458      0754562D 
 458      43524C46 
 459 0b94 E24D     	    ldr WP,=SCROLLUP 
 460 0b96 45F00105 	    orr WP,#1
 461 0b9a 80EA0000 	    eor T0,T0 
 462 0b9e C4F89400 	    str T0,[UP,#COL]
 463 0ba2 D4F89000 	    ldr T0,[UP,#ROW]
 464 0ba6 1828     	    cmp T0,#24 
 465 0ba8 A2D0     	    beq SCROLLUP  
 466 0baa 00F10100 	    add T0,#1 
 467 0bae C4F89000 	    str T0,[UP,#ROW]
 468 0bb2 00F06BBE 	    _NEXT 
 469              	
 470              	
 471              	//  RIGHT ( -- )
 472              	// move cursor 1 char. right 
 473 0bb6 8C0B0000 	  _HEADER RIGHT,5,"RIGHT"
 473      05524947 
 473      4854
 474 0bc0 D4F89400 	  ldr T0,[UP,#COL]
 475 0bc4 00F10100 	  add T0,#1
 476 0bc8 3528     	  cmp T0,#53
 477 0bca E3D5     	  bpl TV_CRLF  
 478 0bcc C4F89400 	  str T0,[UP,#COL]
 479 0bd0 00F05CBE 	  _NEXT 
 480              	
 481              	/**************************
 482              	    LEFT ( -- )
 483              	    move text cursor 
 484              	    1 character left 
 485              	**************************/
 486 0bd4 BA0B0000 	    _HEADER LEFT,4,"LEFT"
 486      044C4546 
 486      540000BF 
 487 0be0 D4F89400 	    ldr T0,[UP,#COL]
 488 0be4 18B1     	    cbz T0,1f 
 489 0be6 A0F10100 	    sub T0,#1 
 490 0bea C4F89400 	    str T0,[UP,#COL]
 491 0bee D4F89000 	1:  ldr T0,[UP,#ROW]
 492 0bf2 38B1     	    cbz T0,9f
ARM GAS  forth.s 			page 38


 493 0bf4 A0F10100 	    sub T0,#1
 494 0bf8 C4F89000 	    str T0,[UP,#ROW]
 495 0bfc 4FF03400 	    mov T0,#52 
 496 0c00 C4F89400 	    str T0,[UP,#COL]
 497 0c04 00F042BE 	9:  _NEXT 
 498              	
 499              	
 500              	// extract font pixel 
 501              	FONT_PIXEL: // ( r -- 0|1 )
 502 0c08 4FF08000 	    mov T0,#128 
 503 0c0c 06EA0006 	    and TOS,T0 
 504 0c10 4FEAD616 	    lsr TOS,#7
 505 0c14 00F03ABE 	    _NEXT 
 506              	
 507              	// increment x coord 
 508              	INCR_X: // ( x y -- x' y )
 509 0c18 3868     	  ldr T0,[DSP]
 510 0c1a 00F10100 	  add T0,#1 
 511 0c1e 3860     	  str T0,[DSP]
 512 0c20 00F034BE 	  _NEXT 
 513              	
 514              	// shift font row data
 515              	NEXT_PIXEL:
 516 0c24 4FEA4606 	    lsl TOS,#1
 517 0c28 00F030BE 	    _NEXT 
 518              	
 519              	
 520              	// CHAR_ROW 
 521              	// plot character row 
 522              	// {x y r -- }
 523              	//  _HEADER CHAR_ROW,7,"CHARROW"
 524              	CHAR_ROW:  
 525 0c2c 504700BF 	    _NEST 
 526 0c30 0B1A0000 	    _DOLIT 5 
 526      05000000 
 527 0c38 E51A0000 	    _ADR TOR 
 528 0c3c E51A0000 	1:  _ADR TOR 
 529 0c40 751D0000 	    _ADR DDUP 
 530 0c44 D11A0000 	    _ADR RAT
 531 0c48 090C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 532 0c4c B5090000 	    _ADR PLOT 
 533 0c50 190C0000 	    _ADR INCR_X 
 534 0c54 BD1A0000 	    _ADR RFROM 
 535 0c58 250C0000 	    _ADR NEXT_PIXEL
 536              	    //_DOLIT 1 
 537              	    //_ADR LSHIFT 
 538 0c5c 2D1A0000 	    _DONXT 1b
 538      3C0C0000 
 539 0c64 611D0000 	    _ADR TDROP 
 540 0c68 93180000 	    _UNNEST 
 541              	
 542              	
 543              	CHAR_FONT: // ( c -- c-adr )
 544 0c6c A6F12006 	   sub TOS,#32
 545 0c70 4FF00800 	   mov T0,#8 
 546 0c74 00FB06F6 	   mul TOS,T0 
 547 0c78 A748     	   ldr T0,=font_6x8
ARM GAS  forth.s 			page 39


 548 0c7a 0644     	   add TOS,T0 
 549 0c7c 00F006BE 	   _NEXT 
 550              	
 551              	/**********************************
 552              	   TV-EMIT ( c -- )
 553              	   draw character in video buffer
 554              	**********************************/
 555 0c80 D80B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 555      0754562D 
 555      454D4954 
 556 0c8c 504700BF 	    _NEST
 557 0c90 3D1B0000 	    _ADR DUPP 
 558 0c94 0B1A0000 	    _DOLIT 32 
 558      20000000 
 559 0c9c 091E0000 	    _ADR ULESS
 560 0ca0 4B1A0000 	    _QBRAN 1f
 560      B00C0000 
 561 0ca8 5F1A0000 	    _BRAN CTRL_KEY
 561      140D0000 
 562 0cb0 6D0C0000 	1:  _ADR CHAR_FONT 
 563 0cb4 2D090000 	    _ADR CURSOR_COL 
 564 0cb8 911A0000 	    _ADR AT
 565 0cbc 71090000 	    _ADR COLX  // x coord 
 566 0cc0 41090000 	    _ADR CURSOR_ROW 
 567 0cc4 911A0000 	    _ADR AT    
 568 0cc8 59090000 	    _ADR ROWY  // {c-adr x y -- } 
 569 0ccc 251D0000 	    _ADR ROT  // TEST 
 570 0cd0 0B1A0000 	    _DOLIT 7   
 570      07000000 
 571 0cd8 E51A0000 	    _ADR TOR  
 572 0cdc E51A0000 	1:  _ADR TOR  // { x y }
 573 0ce0 751D0000 	    _ADR DDUP  // { x y x y }
 574 0ce4 D11A0000 	    _ADR RAT 
 575 0ce8 B11A0000 	    _ADR CAT   // { x y x y r }
 576 0cec 2D0C0000 	    _ADR CHAR_ROW 
 577 0cf0 5D1C0000 	    _ADR ONEP // {x y' }
 578 0cf4 BD1A0000 	    _ADR RFROM 
 579 0cf8 5D1C0000 	    _ADR ONEP // {x y' c-adr' }
 580 0cfc 2D1A0000 	    _DONXT 1b
 580      DC0C0000 
 581 0d04 611D0000 	    _ADR TDROP  
 582 0d08 C10B0000 	    _ADR RIGHT
 583 0d0c FD0D0000 	9:  _ADR SHOW_CURSOR 
 584 0d10 93180000 	    _UNNEST  
 585              	CTRL_KEY:
 586 0d14 850E0000 	    _ADR HIDE_CURSOR
 587 0d18 3D1B0000 	    _ADR DUPP 
 588 0d1c 0B1A0000 	    _DOLIT BKSPP  
 588      08000000 
 589 0d24 F11D0000 	    _ADR EQUAL 
 590 0d28 4B1A0000 	    _QBRAN 1f
 590      400D0000 
 591 0d30 DD0D0000 	    _ADR BACK_SPACE 
 592 0d34 2D1B0000 	8:  _ADR DROP 
 593 0d38 5F1A0000 	    _BRAN 9b 
 593      0C0D0000 
 594 0d40 3D1B0000 	1:  _ADR DUPP 
ARM GAS  forth.s 			page 40


 595 0d44 0B1A0000 	    _DOLIT CRR 
 595      0D000000 
 596 0d4c F11D0000 	    _ADR EQUAL 
 597 0d50 4B1A0000 	    _QBRAN 1f 
 597      640D0000 
 598 0d58 850D0000 	    _ADR CAR_RET
 599 0d5c 5F1A0000 	    _BRAN 8b
 599      340D0000 
 600 0d64 0B1A0000 	1:  _DOLIT LF 
 600      0A000000 
 601 0d6c F11D0000 	    _ADR EQUAL 
 602 0d70 4B1A0000 	    _QBRAN 9b 
 602      0C0D0000 
 603 0d78 9D0D0000 	    _ADR LN_FEED
 604 0d7c 5F1A0000 	    _BRAN 9b  
 604      0C0D0000 
 605              	
 606              	/*******************************
 607              	  CAR_RET 
 608              	  carriage return
 609              	*******************************/
 610              	CAR_RET:
 611 0d84 504700BF 	   _NEST
 612 0d88 0B1A0000 	   _DOLIT 0 
 612      00000000 
 613 0d90 2D090000 	   _ADR CURSOR_COL 
 614 0d94 7D1A0000 	   _ADR STORE 
 615 0d98 93180000 	   _UNNEST   
 616              	
 617              	/*************************
 618              	  LN_FEED 
 619              	  send cursor to next line 
 620              	**************************/
 621              	LN_FEED:
 622 0d9c 504700BF 	    _NEST 
 623 0da0 41090000 	    _ADR CURSOR_ROW 
 624 0da4 911A0000 	    _ADR AT 
 625 0da8 3D1B0000 	    _ADR DUPP 
 626 0dac 0B1A0000 	    _DOLIT 24 
 626      18000000 
 627 0db4 A91B0000 	    _ADR XORR 
 628 0db8 4B1A0000 	    _QBRAN 1f
 628      D00D0000 
 629 0dc0 5D1C0000 	    _ADR ONEP 
 630 0dc4 41090000 	    _ADR CURSOR_ROW 
 631 0dc8 7D1A0000 	    _ADR STORE 
 632 0dcc 93180000 	    _UNNEST    
 633 0dd0 2D1B0000 	1:  _ADR DROP 
 634 0dd4 F10A0000 	    _ADR SCROLLUP 
 635 0dd8 93180000 	    _UNNEST  
 636              	
 637              	
 638              	/*****************************
 639              	  BACK_SPACE  
 640              	  move cursor left 1 character
 641              	*****************************/
 642              	BACK_SPACE: 
ARM GAS  forth.s 			page 41


 643 0ddc 504700BF 	  _NEST 
 644 0de0 E10B0000 	  _ADR LEFT 
 645 0de4 FD0D0000 	  _ADR SHOW_CURSOR
 646 0de8 93180000 	9: _UNNEST    
 647              	
 648              	
 649              	/*******************************
 650              	  SHOW_CURSOR ( -- )
 651              	********************************/
 652 0dec 840C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 652      0B53484F 
 652      572D4355 
 652      52534F52 
 653              	//SHOW_CURSOR:
 654 0dfc 504700BF 	    _NEST 
 655 0e00 0B1A0000 	    _DOLIT 0xFF
 655      FF000000 
 656 0e08 41090000 	0:  _ADR CURSOR_ROW
 657 0e0c 911A0000 	    _ADR AT  
 658 0e10 5D1C0000 	    _ADR ONEP 
 659 0e14 59090000 	    _ADR ROWY 
 660 0e18 0B1A0000 	    _DOLIT BPR
 660      A0000000 
 661 0e20 211C0000 	    _ADR STAR
 662 0e24 0B1A0000 	    _DOLIT BPR  
 662      A0000000 
 663 0e2c 111C0000 	    _ADR SUBB 
 664 0e30 2D090000 	    _ADR CURSOR_COL
 665 0e34 911A0000 	    _ADR AT 
 666 0e38 71090000 	    _ADR COLX 
 667 0e3c 011D0000 	    _ADR TWOSL  
 668 0e40 011C0000 	    _ADR PLUS
 669 0e44 A1090000 	    _ADR VIDBUFF
 670 0e48 011C0000 	    _ADR PLUS
 671 0e4c 0B1A0000 	    _DOLIT 2
 671      02000000 
 672 0e54 E51A0000 	    _ADR TOR  
 673 0e58 751D0000 	1:  _ADR DDUP 
 674 0e5c 9D1A0000 	    _ADR CSTOR 
 675 0e60 5D1C0000 	    _ADR ONEP 
 676 0e64 2D1A0000 	    _DONXT 1b
 676      580E0000 
 677 0e6c 4D1D0000 	2:  _ADR DDROP // drop 3 elements 
 678 0e70 93180000 	    _UNNEST  
 679              	
 680              	/*************************
 681              	    HIDE_CURSOR 
 682              	*************************/
 683 0e74 F00D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 683      0B484944 
 683      452D4355 
 683      52534F52 
 684              	//HIDE_CURSOR:
 685 0e84 504700BF 	    _NEST 
 686 0e88 F9080000 	    _ADR BACKCOLOR 
 687 0e8c 911A0000 	    _ADR AT 
 688 0e90 3D1B0000 	    _ADR DUPP  
ARM GAS  forth.s 			page 42


 689 0e94 0B1A0000 	    _DOLIT 4 
 689      04000000 
 690 0e9c F11B0000 	    _ADR LSHIFT 
 691 0ea0 951B0000 	    _ADR ORR 
 692 0ea4 5F1A0000 	    _BRAN 0b
 692      080E0000 
 693              	
 694              	// TV-AT ( line col -- )
 695              	// set text cursor position 
 696 0eac 780E0000 	    _HEADER TV_AT,5,"TV-AT"
 696      0554562D 
 696      415400BF 
 697 0eb8 352E     	    cmp TOS,#53
 698 0eba 01D4     	    bmi 1f 
 699 0ebc 4FF03406 	    mov TOS,#52
 700 0ec0 C4F89460 	1:  str TOS,[UP,#COL]
 701 0ec4 57F8046B 	    _POP
 702 0ec8 192E     	    cmp TOS,#25
 703 0eca 01D4     	    bmi 1f 
 704 0ecc 4FF01806 	    mov TOS,#24 
 705 0ed0 C4F89060 	1:  str TOS,[UP,#ROW]
 706 0ed4 57F8046B 	    _POP 
 707 0ed8 00F0D8BC 	    _NEXT 
 708              	
 709              	// INPUT ( -- c-adr )
 710              	// input a string in pad 
 711 0edc B00E0000 	    _HEADER INPUT,5,"INPUT"
 711      05494E50 
 711      555400BF 
 712 0ee8 504700BF 	    _NEST 
 713 0eec B1220000 	    _ADR PAD 
 714 0ef0 3D1B0000 	    _ADR DUPP 
 715 0ef4 5D1C0000 	    _ADR ONEP 
 716 0ef8 0B1A0000 	    _DOLIT 53
 716      35000000 
 717 0f00 CD2D0000 	    _ADR ACCEP
 718 0f04 4D1B0000 	    _ADR SWAP 
 719 0f08 2D1B0000 	    _ADR DROP 
 720 0f0c 611B0000 	    _ADR OVER 
 721 0f10 9D1A0000 	    _ADR CSTOR  
 722 0f14 93180000 	    _UNNEST 
 723              	
 724              	
 725              		.section .rodata 
 726              		.p2align 2
 727              	/********************************************
 728              	    TV font  ASCII 6 pixels x 8 pixels 
 729              	********************************************/
 730              	font_6x8:
 731 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 731      00000000 
 732 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 732      20002000 
 733 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 733      00000000 
 734 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 734      F8505000 
ARM GAS  forth.s 			page 43


 735 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 735      28F02000 
 736 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 736      40981800 
 737 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 737      A8906800 
 738 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 738      00000000 
 739 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 739      40201000 
 740 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 740      10204000 
 741 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 741      A8200000 
 742 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 742      20200000 
 743 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 743      60204000 
 744 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 744      00000000 
 745 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 745      00606000 
 746 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 746      40800000 
 747 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 747      C8887000 
 748 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 748      2020F800 
 749 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 749      4080F800 
 750 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 750      0808F000 
 751 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 751      F8101000 
 752 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 752      0808F000 
 753 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 753      88887000 
 754 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 754      40404000 
 755 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 755      88887000 
 756 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 756      08087000 
 757 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 757      60600000 
 758 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 758      60204000 
 759 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 759      40201000 
 760 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 760      F8000000 
 761 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 761      10204000 
 762 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 762      20002000 
 763 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
ARM GAS  forth.s 			page 44


 763      A8A87000 
 764 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 764      88888800 
 765 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 765      8888F000 
 766 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 766      80807800 
 767 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 767      8888F000 
 768 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 768      8080F800 
 769 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 769      80808000 
 770 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 770      88887000 
 771 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 771      88888800 
 772 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 772      20207000 
 773 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 773      08906000 
 774 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 774      A0908800 
 775 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 775      8080F800 
 776 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 776      88888800 
 777 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 777      98888800 
 778 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 778      88887000 
 779 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 779      80808000 
 780 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 780      A8987800 
 781 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 781      A0908800 
 782 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 782      0808F000 
 783 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 783      20202000 
 784 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 784      88887000 
 785 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 785      88502000 
 786 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 786      A8D88800 
 787 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 787      50888800 
 788 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 788      20202000 
 789 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 789      8080F800 
 790 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 790      40406000 
 791 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 791      10080000 
ARM GAS  forth.s 			page 45


 792 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 792      08081800 
 793 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 793      00000000 
 794 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 794      0000F800 
 795 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 795      00000000 
 796 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 796      78887800 
 797 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 797      C888F000 
 798 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 798      80887000 
 799 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 799      98887800 
 800 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 800      F8807000 
 801 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 801      40404000 
 802 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 802      88780870 
 803 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 803      88888800 
 804 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 804      20202000 
 805 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 805      10906000 
 806 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 806      C0A09000 
 807 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 807      20207000 
 808 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 808      A8888800 
 809 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 809      88888800 
 810 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 810      88887000 
 811 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 811      88F08080 
 812 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 812      90B05018 
 813 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 813      80808000 
 814 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 814      7008F000 
 815 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 815      40483000 
 816 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 816      88986800 
 817 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 817      88502000 
 818 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 818      A8A85000 
 819 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 819      20508800 
 820 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
ARM GAS  forth.s 			page 46


 820      88780870 
 821 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 821      2040F800 
 822 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 822      40402000 
 823 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 823      20202000 
 824 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 824      20204000 
 825 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 825      10000000 
 826 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 826      FCFCFCFC 
 827 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 827      10204000 
 828 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 828      40201000 
 829 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 829      20200000 
 830 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 830      A8702000 
 831 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 831      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
ARM GAS  forth.s 			page 47


  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
ARM GAS  forth.s 			page 48


  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
ARM GAS  forth.s 			page 49


 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f24 1C61     	   .byte 0x1c,'a' 
   9 0f26 3262     	   .byte 0x32,'b'
  10 0f28 2163     	   .byte 0x21,'c'
  11 0f2a 2364     	   .byte 0x23,'d'
  12 0f2c 2465     	   .byte 0x24,'e'
  13 0f2e 2B66     	   .byte 0x2b,'f'
  14 0f30 3467     	   .byte 0x34,'g'
  15 0f32 3368     	   .byte 0x33,'h'
  16 0f34 4369     	   .byte 0x43,'i'
ARM GAS  forth.s 			page 50


  17 0f36 3B6A     	   .byte 0x3B,'j'
  18 0f38 426B     	   .byte 0x42,'k'
  19 0f3a 4B6C     	   .byte 0x4b,'l'
  20 0f3c 3A6D     	   .byte 0x3a,'m'
  21 0f3e 316E     	   .byte 0x31,'n'
  22 0f40 446F     	   .byte 0x44,'o'
  23 0f42 4D70     	   .byte 0x4d,'p'
  24 0f44 1571     	   .byte 0x15,'q'
  25 0f46 2D72     	   .byte 0x2d,'r'
  26 0f48 1B73     	   .byte 0x1b,'s'
  27 0f4a 2C74     	   .byte 0x2c,'t'
  28 0f4c 3C75     	   .byte 0x3c,'u'
  29 0f4e 2A76     	   .byte 0x2a,'v'
  30 0f50 1D77     	   .byte 0x1d,'w'
  31 0f52 2278     	   .byte 0x22,'x'
  32 0f54 3579     	   .byte 0x35,'y'
  33 0f56 1A7A     	   .byte 0x1a,'z'
  34 0f58 4530     	   .byte 0x45,'0'
  35 0f5a 1631     	   .byte 0x16,'1'
  36 0f5c 1E32     	   .byte 0x1e,'2'
  37 0f5e 2633     	   .byte 0x26,'3'
  38 0f60 2534     	   .byte 0x25,'4'
  39 0f62 2E35     	   .byte 0x2e,'5'
  40 0f64 3636     	   .byte 0x36,'6'
  41 0f66 3D37     	   .byte 0x3d,'7'
  42 0f68 3E38     	   .byte 0x3e,'8'
  43 0f6a 4639     	   .byte 0x46,'9'
  44 0f6c 0E60     	   .byte 0x0e,'`'
  45 0f6e 4E2D     	   .byte 0x4e,'-'
  46 0f70 553D     	   .byte 0x55,'='
  47 0f72 5D5C     	   .byte 0x5d,'\\'
  48 0f74 545B     	   .byte 0x54,'['
  49 0f76 5B5D     	   .byte 0x5b,']'
  50 0f78 4C3B     	   .byte 0x4c,';'
  51 0f7a 5227     	   .byte 0x52,'\''
  52 0f7c 412C     	   .byte 0x41,','
  53 0f7e 492E     	   .byte 0x49,'.'
  54 0f80 7C2A     	   .byte 0x7c,'*'
  55 0f82 792B     	   .byte 0x79,'+'
  56 0f84 2920     	   .byte 0x29,' '
  57 0f86 5A0D     	   .byte SC_ENTER,CRR 
  58 0f88 6608     	   .byte SC_BKSP,BKSPP 
  59 0f8a 0D09     	   .byte SC_TAB,9
  60 0f8c 761B     	   .byte SC_ESC,27
  61 0f8e 119E     	   .byte SC_LALT,VK_LALT 
  62 0f90 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f92 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f94 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f96 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f98 5800     	   .byte SC_CAPS,0
  67 0f9a 0580     	   .byte SC_F1,VK_F1
  68 0f9c 0681     	   .byte SC_F2,VK_F2
  69 0f9e 0482     	   .byte SC_F3,VK_F3
  70 0fa0 0C83     	   .byte SC_F4,VK_F4
  71 0fa2 0384     	   .byte SC_F5,VK_F5
  72 0fa4 0B85     	   .byte SC_F6,VK_F6
  73 0fa6 8386     	   .byte SC_F7,VK_F7
ARM GAS  forth.s 			page 51


  74 0fa8 0A87     	   .byte SC_F8,VK_F8
  75 0faa 0188     	   .byte SC_F9,VK_F9
  76 0fac 098A     	   .byte SC_F10,VK_F10
  77 0fae 788B     	   .byte SC_F11,VK_F11
  78 0fb0 078C     	   .byte SC_F12,VK_F12
  79 0fb2 7030     	   .byte SC_KP0,'0'
  80 0fb4 6931     	   .byte SC_KP1,'1'
  81 0fb6 7232     	   .byte SC_KP2,'2'
  82 0fb8 7A33     	   .byte SC_KP3,'3'
  83 0fba 6B34     	   .byte SC_KP4,'4'
  84 0fbc 7335     	   .byte SC_KP5,'5'
  85 0fbe 7436     	   .byte SC_KP6,'6'
  86 0fc0 6C37     	   .byte SC_KP7,'7'
  87 0fc2 7538     	   .byte SC_KP8,'8'
  88 0fc4 7D39     	   .byte SC_KP9,'9'
  89 0fc6 7C2A     	   .byte SC_KPMUL,'*'
  90 0fc8 4A2F     	   .byte SC_KPDIV,'/'
  91 0fca 792B     	   .byte SC_KPPLUS,'+'
  92 0fcc 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fce 712E     	   .byte SC_KPDOT,'.'
  94 0fd0 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fd2 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fd4 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fd6 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fd8 6141     	   .byte 'a','A'
 102 0fda 6242     	   .byte 'b','B'
 103 0fdc 6343     	   .byte 'c','C'
 104 0fde 6444     	   .byte 'd','D'
 105 0fe0 6545     	   .byte 'e','E'
 106 0fe2 6646     	   .byte 'f','F'
 107 0fe4 6747     	   .byte 'g','G'
 108 0fe6 6848     	   .byte 'h','H'
 109 0fe8 6949     	   .byte 'i','I'
 110 0fea 6A4A     	   .byte 'j','J'
 111 0fec 6B4B     	   .byte 'k','K'
 112 0fee 6C4C     	   .byte 'l','L'
 113 0ff0 6D4D     	   .byte 'm','M'
 114 0ff2 6E4E     	   .byte 'n','N'
 115 0ff4 6F4F     	   .byte 'o','O'
 116 0ff6 7050     	   .byte 'p','P'
 117 0ff8 7151     	   .byte 'q','Q'
 118 0ffa 7252     	   .byte 'r','R'
 119 0ffc 7353     	   .byte 's','S'
 120 0ffe 7454     	   .byte 't','T'
 121 1000 7555     	   .byte 'u','U'
 122 1002 7656     	   .byte 'v','V'
 123 1004 7757     	   .byte 'w','W'
 124 1006 7858     	   .byte 'x','X'
 125 1008 7959     	   .byte 'y','Y'
 126 100a 7A5A     	   .byte 'z','Z'
 127 100c 3121     	   .byte '1','!'
 128 100e 3240     	   .byte '2','@'
 129 1010 3323     	   .byte '3','#'
 130 1012 3424     	   .byte '4','$'
ARM GAS  forth.s 			page 52


 131 1014 3525     	   .byte '5','%'
 132 1016 365E     	   .byte '6','^'
 133 1018 3726     	   .byte '7','&'
 134 101a 382A     	   .byte '8','*'
 135 101c 3928     	   .byte '9','('
 136 101e 3029     	   .byte '0',')'
 137 1020 2D5F     	   .byte '-','_'
 138 1022 3D2B     	   .byte '=','+'
 139 1024 607E     	   .byte '`','~'
 140 1026 2722     	   .byte '\'','"'
 141 1028 2C3C     	   .byte ',','<'
 142 102a 2E3E     	   .byte '.','>'
 143 102c 2F3F     	   .byte '/','?'
 144 102e 5C7C     	   .byte '\\','|'
 145 1030 3B3A     	   .byte ';',':'
 146 1032 5B7B     	   .byte '[','{'
 147 1034 5D7D     	   .byte ']','}'
 148 1036 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1038 315C     	   .byte '1','\\'
 153 103a 3240     	   .byte '2','@'
 154 103c 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 103e 363F     	   .byte '6','?'
 158 1040 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 1042 397B     	   .byte '9','{'
 161 1044 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 1046 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1048 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 104a 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 104c 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 104e 11A3     	    .byte SC_RALT,VK_RALT
 172 1050 2F97     	    .byte SC_APPS,VK_APPS
 173 1052 758D     	    .byte SC_UP,VK_UP
 174 1054 728E     	    .byte SC_DOWN,VK_DOWN
 175 1056 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1058 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 105a 7095     	    .byte SC_INSERT,VK_INSERT
 178 105c 6C91     	    .byte SC_HOME,VK_HOME
 179 105e 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1060 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1062 717F     	    .byte SC_DEL,VK_DELETE
 182 1064 6992     	    .byte SC_END,VK_END
 183 1066 4A2F     	    .byte SC_KPDIV,'/'
 184 1068 5A0D     	    .byte SC_KPENTER,'\r'
 185 106a 1200     	    .byte 0x12,0
 186 106c 7C00     	    .byte 0x7c,0
 187 106e 0000     	    .byte 0,0
ARM GAS  forth.s 			page 53


 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1070 6303     	   .byte 'c', VK_CTRL_C 
 193 1072 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1074 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1076 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1078 11A3     	   .byte SC_RALT,VK_RALT
 197 107a 2F97     	   .byte SC_APPS,VK_APPS
 198 107c 7095     	   .byte SC_INSERT,VK_INSERT
 199 107e 6C91     	   .byte SC_HOME,VK_HOME
 200 1080 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1082 717F     	   .byte SC_DEL,VK_DELETE
 202 1084 6992     	   .byte SC_END,VK_END
 203 1086 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1088 758D     	   .byte SC_UP,VK_UP
 205 108a 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 108c 728E     	   .byte SC_DOWN,VK_DOWN
 207 108e 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1090 4A2F     	   .byte SC_KPDIV,'/'
 209 1092 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1094 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1096 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1098 119E     	   .byte SC_LALT,VK_LALT
 213 109a 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 109c 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 109e 761B     	   .byte SC_ESC,VK_ESC
 216 10a0 779A     	   .byte SC_NUM,VK_NLOCK
 217 10a2 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10a4 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
ARM GAS  forth.s 			page 54


  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 12 
  68              	    .equ KBD_CLOCK_PIN, 11
  69              	
  70              	/**********************************
  71              	    kbd_isr
  72              	    interrupt service routine 
  73              	    EXTI0 connected to keyboard 
  74              	    clock signal and triggered 
  75              	    on falling edge 
  76              	**********************************/
  77 10a6 00BF     	    _GBL_FUNC kbd_isr 
  78 10a8 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  78      C4F20102 
  79 10b0 4FF40060 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  80 10b4 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  81 10b6 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
  81      C4F20203 
  82 10be D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  83 10c2 10F0020F 	    tst r0,#KBD_TX 
  84 10c6 40F08480 	    bne send_bit  
  85 10ca 188A     	    ldrh r0,[r3,#GPIO_IDR]
  86 10cc 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  87 10d0 01F10102 	    add r2,r1,#1
  88 10d4 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  89 10d8 0029     	    cmp r1,#0
  90 10da 15D0     	    beq start_bit 
  91 10dc 0929     	    cmp r1,#9 
  92 10de 25D0     	    beq parity_bit 
  93 10e0 0A29     	    cmp r1,#10 
  94 10e2 2DD0     	    beq stop_bit 
  95              	    // data bit 
  96 10e4 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  97 10e8 4FEA5202 	    lsr r2,#1 
  98 10ec 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
  99 10f0 07D0     	    beq 1f 
 100 10f2 42F08002 	    orr r2,#(1<<7)
 101 10f6 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 102 10fa 00F10100 	    add r0,#1 
 103 10fe 84F87700 	    strb r0,[UP,#KBD_PARITY]
 104 1102 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 105 1106 63E0     	    b 9f         
 106              	start_bit:
 107 1108 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN) 
 108 110c 60D1     	    bne 9f // not a start bit 
 109 110e 80EA0000 	    eor r0,r0 
 110 1112 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 111 1116 84F87700 	    strb r0,[UP,#KBD_PARITY]
 112 111a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 113 111e 6FF00101 	    mvn r1,#1
 114 1122 00EA0100 	    and r0,r1 // clear error flag 
 115 1126 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 116 112a 51E0     	    b 9f 
ARM GAS  forth.s 			page 55


 117              	parity_bit:
 118 112c 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 119 1130 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 120 1134 4CD0     	    beq 9f  
 121 1136 01F10101 	    add r1,#1 
 122 113a 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 123 113e 47E0     	    b 9f      
 124              	stop_bit:
 125 1140 10F4805F 	    tst r0,#(1<<KBD_DATA_PIN)
 126 1144 40D0     	    beq 8f // error stop bit expected 
 127 1146 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 128 114a 11F0010F 	    tst r1,#1 
 129 114e 3BD0     	    beq 8f // error parity
 130 1150 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 131 1154 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 132 1158 E028     	    cmp r0,#XT_KEY
 133 115a 04D1     	    bne 1f
 134 115c 41F04001 	    orr r1,#KBD_F_XT
 135 1160 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 136 1164 30E0     	    b 8f  
 137 1166 11F0800F 	1:  tst r1,#KBD_F_REL
 138 116a 14D0     	    beq store_code
 139 116c 5828     	    cmp r0,#SC_CAPS
 140 116e 04D1     	    bne 1f
 141 1170 81F00401 	    eor r1,#KBD_F_CAPS
 142 1174 41F00101 	    orr r1,#KBD_F_CTGL 
 143 1178 06E0     	    b 2f 
 144 117a 00B500F0 	1:  _CALL do_async_key 
 144      73F85DF8 
 144      04EB
 145 1184 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 146 1188 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 147 118c 01EA0201 	    and r1,r2
 148 1190 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 149 1194 18E0     	    b 8f
 150              	// store code in queue 
 151              	store_code:
 152 1196 F028     	    cmp r0,#KEY_REL
 153 1198 04D1     	    bne 1f
 154              	// set release flags 
 155 119a 41F08001 	    orr r1,#KBD_F_REL 
 156 119e 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 157 11a2 11E0     	    b 8f     
 158 11a4 0146     	1:  mov r1,r0 
 159 11a6 00B500F0 	    _CALL do_async_key 
 159      5DF85DF8 
 159      04EB
 160 11b0 0AD1     	    bne 8f // was async key 
 161 11b2 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 162 11b6 04F17802 	    add r2,UP,#KBD_QUEUE
 163 11ba 1154     	    strb r1,[r2,r0]
 164 11bc 00F10100 	    add r0,#1
 165 11c0 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 166 11c4 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 167 11c8 80EA0000 	8:  eor r0,r0 
 168 11cc A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 169 11d0 7047     	9:  _RET 
ARM GAS  forth.s 			page 56


 170              	
 171              	/* send bit to keyboard 
 172              	 registers usage:
 173              	    r0 bit shifter 
 174              	    r1 bit counter 
 175              	    r2 output bit 
 176              	    r3 GPIOA_BASE_ADR 
 177              	*/
 178              	send_bit:
 179 11d2 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 180 11d6 01F10100 	    add r0,r1,#1
 181 11da 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 182 11de 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 183 11e2 4FF48052 	    mov r2,#(1<<KBD_DATA_PIN)
 184              	//    cbz r1,9f 
 185 11e6 0829     	1:  cmp r1,#8 
 186 11e8 15D0     	    beq send_parity 
 187 11ea 0929     	    cmp r1,#9 
 188 11ec 1CD0     	    beq send_stop
 189 11ee 0A29     	    cmp r1,#10
 190 11f0 1FD0     	    beq rx_ack_bit  
 191              	// data bits
 192 11f2 10F0010F 	    tst r0,#1
 193 11f6 4FEA5000 	    lsr r0,#1
 194 11fa 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 195 11fe 02D1     	    bne 1f 
 196 1200 4FEA0242 	    lsl r2,#16
 197 1204 05E0     	    b 2f  
 198 1206 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 199 120a 00F10100 	    add r0,#1 
 200 120e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 201 1212 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 202 1214 1CE0     	    b 9f 
 203              	send_parity:
 204 1216 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 205 121a 10F0010F 	    tst r0,#1
 206 121e 01D0     	    beq 1f 
 207 1220 4FEA0242 	    lsl r2,#16
 208 1224 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 209 1226 13E0     	    b 9f 
 210              	send_stop:
 211              	//    str r2,[r3,#GPIO_BSRR]
 212              	// release data pin 
 213 1228 1968     	    ldr r1,[r3,#GPIO_MODER]
 214 122a 21F04071 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 215 122e 1960     	    str r1,[r3,#GPIO_MODER]
 216 1230 0EE0     	    b 9f
 217              	rx_ack_bit:
 218 1232 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 219 1236 6FF00201 	    mvn r1,#KBD_TX 
 220 123a 00EA0100 	    and r0,r1 
 221 123e 198A     	    ldrh r1,[r3,#GPIO_IDR]
 222 1240 11F4805F 	    tst r1,#(1<<KBD_DATA_PIN)
 223 1244 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 224 1248 80EA0000 	    eor r0,r0 
 225 124c 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 226 1250 7047     	9:  _RET 
ARM GAS  forth.s 			page 57


 227              	
 228              	/*************************************
 229              	 check if it is an asynchronous key 
 230              	 input:
 231              	    r0  virtual code
 232              	 output:
 233              	    r0 code order | 255 
 234              	*************************************/
 235              	is_async_key:
 236 1252 02B4     	    push {r1}
 237 1254 DFF84814 	    ldr r1,=async_keys
 238 1258 00B500F0 	    _CALL table_scan
 238      96F85DF8 
 238      04EB
 239 1262 02BC     	    pop {r1}
 240 1264 7047     	    _RET 
 241              	
 242              	
 243              	/***************************
 244              	 check if async key 
 245              	 and process it
 246              	 input: 
 247              	    r0 code 
 248              	 output:
 249              	    r0 0|-1  
 250              	    Z flag set->not async, reset->async key      
 251              	****************************/
 252              	do_async_key:
 253 1266 00B5FFF7 	    _CALL is_async_key  
 253      F3FF5DF8 
 253      04EB
 254 1270 FF28     	    cmp r0,#255
 255 1272 01D1     	    bne set_async_key 
 256 1274 0020     	    movs r0,#0 
 257 1276 7047     	    _RET  
 258              	// asynchornous key, set/reset flag 
 259              	set_async_key:
 260 1278 06B4     	    push {r1,r2}
 261 127a 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 262 127e DFF82414 	    ldr r1,=async_jump 
 263 1282 D1E800F0 	    tbb [r1,r0]
 264              	shift_key:
 265 1286 4FF00800 	    mov r0,#KBD_F_SHIFT 
 266 128a 04E0     	    b set_reset
 267              	ctrl_key:
 268 128c 4FF01000 	    mov r0,#KBD_F_CTRL
 269 1290 01E0     	    b set_reset 
 270              	alt_key:
 271 1292 4FF02000 	    mov r0,#KBD_F_ALT 
 272              	set_reset:
 273 1296 12F0800F 	    tst r2,#KBD_F_REL 
 274 129a 04D0     	    beq 1f 
 275 129c 6FEA0000 	    mvn r0,r0
 276 12a0 02EA0002 	    and r2,r0
 277 12a4 01E0     	    b 2f
 278 12a6 42EA0002 	1:  orr r2,r0 
 279 12aa 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 58


 280 12ae 5FF0FF30 	    movs r0,#-1
 281 12b2 06BC     	9:  pop {r1,r2}
 282 12b4 7047     	    _RET 
 283              	
 284              	// asynchronous key table 
 285              	async_keys:
 286 12b6 1200     	    .byte SC_LSHIFT,0 // left shift 
 287 12b8 5900     	    .byte SC_RSHIFT,0 // right shift 
 288 12ba 1401     	    .byte SC_LCTRL,1  // left control 
 289 12bc 1401     	    .byte SC_RCTRL,1  // right control 
 290 12be 1102     	    .byte SC_LALT,2  // left alt 
 291 12c0 1102     	    .byte SC_RALT,2   // right alt (alt char)
 292 12c2 00FF     	    .byte 0,255 
 293              	
 294              	async_jump: // tbb table for async keys 
 295 12c4 00       	    .byte 0 // shift  key 
 296 12c5 03       	    .byte (ctrl_key-shift_key)/2
 297 12c6 06       	    .byte (alt_key-shift_key)/2
 298              	
 299              	
 300              	/**********************************
 301              	    kbd_init 
 302              	    initialize keyboard 
 303              	    PS2 clock on PA11 
 304              	    PS2 data on PA12 
 305              	**********************************/
 306 12c7 00       	    _GBL_FUNC kbd_init 
 307              	//  clock and data pins as INPUT_FLOAT 
 308 12c8 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR 
 308      C4F20203 
 309 12d0 1846     	    mov r0,r3 
 310 12d2 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 311 12d6 4FF00002 	    mov r2,#INPUT_FLOAT 
 312 12da 00B5FFF7 	    _CALL gpio_config
 312      29F85DF8 
 312      04EB
 313 12e4 1846     	    mov r0,r3 
 314 12e6 4FF00C01 	    mov r1,#KBD_DATA_PIN
 315 12ea 4FF00002 	    mov r2,#INPUT_FLOAT 
 316 12ee 00B5FFF7 	    _CALL gpio_config
 316      1FF85DF8 
 316      04EB
 317              	// interrupt triggered on falling edge 
 318 12f8 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 318      C4F20102 
 319 1300 4FF40060 	   mov r0,#(1<<KBD_CLOCK_PIN)
 320 1304 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 321 1306 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 322 1308 80EA0000 	   eor r0,r0 
 323 130c C4F88800 	   str r0,[UP,#KBD_QHEAD]
 324 1310 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 325              	// enable interrupt EXTI15_10_IRQ in NVIC 
 326 1314 4FF02800 	   mov r0,#EXTI15_10_IRQ
 327 1318 4FF00101 	   mov r1,#1 
 328 131c 00B5FEF7 	   _CALL nvic_set_priority
 328      C3FF5DF8 
 328      04EB
ARM GAS  forth.s 			page 59


 329 1326 4FF02800 	   mov r0,#EXTI15_10_IRQ
 330 132a 00B5FEF7 	   _CALL nvic_enable_irq 
 330      D5FF5DF8 
 330      04EB
 331 1334 7047     	   _RET 
 332              	
 333              	// KEY-ASYNC ( -- n )
 334              	// return async key flags 
 335 1336 E00E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 335      094B4559 
 335      2D415359 
 335      4E43
 336 1344 47F8046D 	    _PUSH 
 337 1348 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 338 134c 06F0FC06 	    and TOS,#0xFC  
 339 1350 9CE2     	    _NEXT 
 340              	
 341              	// KEYCODE 
 342              	// extract keyboard scancode from queue.
 343              	// output:
 344              	//        T0  keycode | 0 
 345              	keycode: 
 346 1352 0EB4     	    push {T1,T2,T3}
 347 1354 80EA0000 	    eor T0,T0  
 348 1358 04F17803 	    add T3,UP,#KBD_QUEUE
 349 135c D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 350 1360 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 351 1364 9142     	    cmp T1,T2 
 352 1366 06D0     	    beq 2f  
 353 1368 585C     	    ldrb T0,[T3,T1]
 354 136a 01F10101 	    add T1,#1 
 355 136e 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 356 1372 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 357 1376 0EBC     	2:  pop {T1,T2,T3}
 358 1378 7047     	    _RET 
 359              	
 360              	wait_code:
 361 137a 00B5FFF7 	    _CALL keycode 
 361      E9FF5DF8 
 361      04EB
 362 1384 0000     	    movs T0,T0
 363 1386 F8D0     	    beq wait_code  
 364 1388 7047     	    _RET 
 365              	
 366              	// translation table scan 
 367              	// input:
 368              	//      T0   target code 
 369              	//      T1   table pointer 
 370              	// output: 
 371              	//        T0   0 | code
 372              	//        Z flag  
 373              	table_scan:
 374 138a 04B4     	    push {T2}
 375 138c 11F8012B 	1:  ldrb T2,[T1],#1
 376 1390 22B1     	    cbz T2,2f 
 377 1392 8242     	    cmp T2,T0
 378 1394 02D0     	    beq 2f 
ARM GAS  forth.s 			page 60


 379 1396 01F10101 	    add T1,#1 
 380 139a F7E7     	    b 1b 
 381 139c 0878     	2:  ldrb T0,[T1]
 382 139e 0000     	    movs T0,T0 // set/reset zero flag 
 383 13a0 04BC     	9:  pop {T2}
 384 13a2 7047     	    _RET 
 385              	
 386              	/**********************************
 387              	   PS2-KEY? ( -- key -1 | 0 )
 388              	   get a character from keyboard
 389              	   don't wait for it.
 390              	*********************************/
 391 13a4 3A130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 391      08505332 
 391      2D4B4559 
 391      3F0000BF 
 392 13b4 47F8046D 	    _PUSH 
 393 13b8 86EA0606 	    eor TOS,TOS 
 394 13bc BA49     	    ldr T1,=sc_ascii // translation table
 395 13be 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 396 13c2 4FF04002 	    mov T2,#KBD_F_XT 
 397 13c6 1042     	    tst T0,T2
 398 13c8 00D0     	    beq 1f
 399 13ca B849     	    ldr T1,=extended // extended code translation
 400 13cc 00B5FFF7 	1:  _CALL keycode
 400      C0FF5DF8 
 400      04EB
 401 13d6 98B1     	    cbz T0,inkey_exit
 402 13d8 E128     	    cmp T0,#XT2_KEY // pause 
 403 13da 12D0     	    beq pause_key
 404 13dc 00B5FFF7 	    _CALL table_scan 
 404      D4FF5DF8 
 404      04EB
 405 13e6 0646     	    mov TOS,T0
 406 13e8 00B500F0 	    _CALL do_modifiers
 406      14F85DF8 
 406      04EB
 407 13f2 032E     	    cmp TOS,#VK_CTRL_C 
 408 13f4 3EF46EAE 	    beq user_reboot 
 409 13f8 47F8046D 	    _PUSH 
 410 13fc 4FF0FF36 	    mov TOS,#-1
 411              	inkey_exit:     
 412 1400 44E2     	    _NEXT
 413              	pause_key: // discard next 7 codes 
 414 1402 4FF00701 	    mov T1,#7 
 415 1406 00B5FFF7 	1:  _CALL wait_code 
 415      B7FF5DF8 
 415      04EB
 416 1410 0139     	    subs T1,#1
 417 1412 F8D1     	    bne 1b 
 418 1414 3AE2     	    _NEXT 
 419              	
 420              	// check for modifiers flags 
 421              	// and process it.
 422              	do_modifiers:
 423 1416 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 424 141a 10F0080F 	    tst T0,#KBD_F_SHIFT 
ARM GAS  forth.s 			page 61


 425 141e 06D1     	    bne shift_down 
 426 1420 10F0200F 	    tst T0,#KBD_F_ALT  
 427 1424 06D1     	    bne altchar_down 
 428 1426 10F0100F 	    tst T0,#KBD_F_CTRL
 429 142a 06D1     	    bne ctrl_down 
 430 142c 0DE0     	    b 9f 
 431              	shift_down:
 432 142e 3046     	    mov T0,TOS 
 433 1430 9F49     	    ldr T1,=shifted 
 434 1432 04E0     	    b 8f 
 435              	altchar_down:
 436 1434 3046     	    mov T0,TOS 
 437 1436 9F49     	    ldr T1,=altchar
 438 1438 01E0     	    b 8f
 439              	ctrl_down:
 440 143a 3046     	    mov T0,TOS 
 441 143c 9E49     	    ldr T1,=controls 
 442 143e 00B5FFF7 	8:  _CALL table_scan
 442      A3FF5DF8 
 442      04EB
 443 1448 0646     	    mov TOS,T0
 444 144a 00B500F0 	9:  _CALL do_capslock 
 444      03F85DF8 
 444      04EB
 445 1454 7047     	    _RET 
 446              	
 447              	do_capslock:
 448 1456 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 449 145a 10F0040F 	    tst T0,#KBD_F_CAPS 
 450 145e 0BD0     	    beq 9f 
 451 1460 412E     	    cmp TOS,#'A'
 452 1462 09D4     	    bmi 9f 
 453 1464 5B2E     	    cmp TOS,#'Z'+1 
 454 1466 03D4     	    bmi 3f 
 455 1468 612E     	    cmp TOS,#'a'
 456 146a 05D4     	    bmi 9f 
 457 146c 7B2E     	    cmp TOS,#'z'+1
 458 146e 03D5     	    bpl 9f 
 459 1470 4FF02000 	3:  mov T0,#(1<<5)
 460 1474 86EA0006 	    eor TOS,T0 
 461 1478 7047     	9:  _RET 
 462              	
 463              	
 464              	
 465              	/***************************
 466              	 send byte do keyboard
 467              	 input:
 468              	    r0  byte to send 
 469              	 use: 
 470              	    r1,r2 temp 
 471              	    r3 GPIOA_BASE_ADR 
 472              	***************************/
 473              	kbd_send:
 474 147a 0FB4     	    push {r0,r1,r2,r3}
 475              	// wait pre-video phase
 476              	// for least video output disturbance
 477 147c A06E     	1:  ldr r0,[UP,#VID_STATE]
ARM GAS  forth.s 			page 62


 478 147e 0128     	    cmp r0,ST_PREVID 
 479 1480 FCD1     	    bne 1b
 480              	// disable video interrupt 
 481 1482 4FF01D00 	    mov r0,#TIM3_IRQ 
 482 1486 00B5FEF7 	    _CALL nvic_disable_irq
 482      3CFF5DF8 
 482      04EB
 483              	// take control of keyboard clock line  
 484 1490 4FF00003 	    _MOV32 r3,GPIOA_BASE_ADR
 484      C4F20203 
 485 1498 1846     	    mov r0,r3 
 486 149a 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 487 149e 4FF01102 	    mov r2,#OUTPUT_OD
 488 14a2 00B5FEF7 	    _CALL gpio_config 
 488      45FF5DF8 
 488      04EB
 489 14ac 1846     	    mov r0,r3 
 490 14ae 4FF00B01 	    mov r1,#KBD_CLOCK_PIN
 491 14b2 82EA0202 	    eor r2,r2 
 492 14b6 00B5FEF7 	    _CALL gpio_out 
 492      91FF5DF8 
 492      04EB
 493              	// delay to hold clock line to 0 for 150Âµsec     
 494 14c0 4FF4E150 	    mov r0,#150*48
 495 14c4 0138     	1:  subs r0,#1 
 496 14c6 FDD1     	    bne 1b
 497 14c8 01BC     	    pop {r0}
 498 14ca 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 499 14ce D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 500 14d2 40F00200 	    orr r0,#KBD_TX 
 501 14d6 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 502 14da 80EA0000 	    eor r0,r0 
 503 14de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 504 14e2 84F87700 	    strb r0,[UP,#KBD_PARITY]
 505              	// take control of data line 
 506              	// and put it to 0 for start bit.    
 507 14e6 1846     	    mov r0,r3 
 508 14e8 4FF00C01 	    mov r1,#KBD_DATA_PIN  
 509 14ec 4FF01102 	    mov r2,#OUTPUT_OD 
 510 14f0 00B5FEF7 	    _CALL gpio_config 
 510      1EFF5DF8 
 510      04EB
 511 14fa 1846     	    mov r0,r3 
 512 14fc 4FF00C01 	    mov r1,#KBD_DATA_PIN 
 513 1500 82EA0202 	    eor r2,r2 
 514 1504 00B5FEF7 	    _CALL gpio_out
 514      6AFF5DF8 
 514      04EB
 515              	// release clock line 
 516 150e 1846     	    mov r0,r3 
 517 1510 4FF00B01 	    mov r1,#KBD_CLOCK_PIN 
 518 1514 4FF00002 	    mov r2,#INPUT_FLOAT
 519 1518 00B5FEF7 	    _CALL gpio_config
 519      0AFF5DF8 
 519      04EB
 520              	// wait send completed
 521              	//  expire after 10 msec 
ARM GAS  forth.s 			page 63


 522 1522 4FF00A00 	    mov r0,#10
 523 1526 E060     	    str r0,[UP,#CD_TIMER]
 524 1528 E068     	1:  ldr r0,[UP,#CD_TIMER]
 525 152a 20B1     	    cbz r0, 4f 
 526 152c 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 527 1530 10F0020F 	    tst r0,#KBD_TX
 528 1534 F8D1     	    bne 1b 
 529              	// enable video interrupt     
 530 1536 4FF01D00 	4:  mov r0,#TIM3_IRQ
 531 153a 00B5FEF7 	    _CALL nvic_enable_irq
 531      CDFE5DF8 
 531      04EB
 532 1544 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 533 1548 20F00201 	    bic r1,r0,#KBD_TX
 534 154c 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 535 1550 00F00200 	    and r0,#KBD_TX
 536 1554 48B1     	    cbz r0, 5f
 537 1556 1968     	    ldr r1,[r3,#GPIO_MODER]
 538 1558 21F04071 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 539 155c 1960     	    str r1,[r3,#GPIO_MODER]
 540 155e 80EA0000 	    eor r0,r0 
 541 1562 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 542 1566 6FEA0000 	    mvn r0,r0   
 543 156a 0EBC     	5:  pop {r1,r2,r3}
 544 156c 7047     	    _RET 
 545              	
 546              	 
 547              	// flush keyboard queue 
 548              	kbd_clear_queue:
 549 156e 80EA0000 	    eor T0,T0 
 550 1572 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 551 1576 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 552 157a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 553 157e 6FF00301 	    mvn T1,#3
 554 1582 00EA0100 	    and T0,T1 
 555 1586 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 556 158a 7047     	    _RET 
 557              	
 558              	/**********************************
 559              	 KBD-RST ( -- c )
 560              	 send a reset command to keyboard
 561              	**********************************/
 562 158c A8130000 	    _HEADER KBD_RST,7,"KBD-RST"
 562      074B4244 
 562      2D525354 
 563 1598 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 564 159c 00B5FFF7 	    _CALL kbd_send
 564      6CFF5DF8 
 564      04EB
 565 15a6 B8B9     	    cbnz T0,3f // keyboard not dectected
 566 15a8 00B5FFF7 	    _CALL kbd_clear_queue
 566      E0FF5DF8 
 566      04EB
 567 15b2 00B5FFF7 	    _CALL wait_code 
 567      E1FE5DF8 
 567      04EB
 568 15bc FE28     	    cmp r0,KBD_CMD_RESEND
ARM GAS  forth.s 			page 64


 569 15be EBD0     	    beq 1b 
 570 15c0 4FF4FA70 	    mov T0,#500 
 571 15c4 E060     	    str T0,[UP,#CD_TIMER]
 572 15c6 00B5FFF7 	2:  _CALL keycode
 572      C3FE5DF8 
 572      04EB
 573 15d0 10B9     	    cbnz T0,3f
 574 15d2 E068     	    ldr T0,[UP,#CD_TIMER]
 575 15d4 0028     	    cmp T0,#0 
 576 15d6 F6D1     	    bne 2b 
 577 15d8 47F8046D 	3:  _PUSH 
 578 15dc 0646     	    mov TOS,T0  
 579 15de 55E1     	    _NEXT 
 580              	
 581              	/*****************************
 582              	 KBD-LED ( c -- )
 583              	 send command to control
 584              	 keyboard LEDS 
 585              	*****************************/
 586 15e0 90150000 	    _HEADER KBD_LED,7,"KBD-LED"
 586      074B4244 
 586      2D4C4544 
 587 15ec 00B5FFF7 	1:  _CALL kbd_clear_queue
 587      BEFF5DF8 
 587      04EB
 588 15f6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 589 15fa 00B5FFF7 	    _CALL kbd_send 
 589      3DFF5DF8 
 589      04EB
 590 1604 00B5FFF7 	2:  _CALL wait_code 
 590      B8FE5DF8 
 590      04EB
 591 160e FE28     	    cmp T0,#KBD_CMD_RESEND
 592 1610 ECD0     	    beq 1b
 593 1612 FA28     	    cmp T0,#KBD_ACK  
 594 1614 F6D1     	    bne 2b 
 595 1616 3046     	2:  mov T0,TOS 
 596 1618 00F00700 	    and T0,#7 
 597 161c 00B5FFF7 	    _CALL kbd_send 
 597      2CFF5DF8 
 597      04EB
 598 1626 00B5FFF7 	3:  _CALL wait_code 
 598      A7FE5DF8 
 598      04EB
 599 1630 FE28     	    cmp T0,#KBD_CMD_RESEND 
 600 1632 F0D0     	    beq 2b
 601 1634 FA28     	    cmp T0,#KBD_ACK 
 602 1636 F6D1     	    bne 3b  
 603 1638 57F8046B 	    _POP 
 604 163c 26E1     	    _NEXT 
 605              	
 606              	/**************************
 607              	 CAPS-LED ( -- )
 608              	 synch capslock LED
 609              	 to KBD_F_CAPS 
 610              	**************************/
 611 163e E4150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
ARM GAS  forth.s 			page 65


 611      08434150 
 611      532D4C45 
 611      4400
 612 164c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 613 1650 10F0010F 	    tst T0,#1
 614 1654 00D1     	    bne 1f 
 615 1656 19E1     	    _NEXT 
 616 1658 47F8046D 	1: _PUSH 
 617 165c 6FF00101 	    mvn T1,#1 
 618 1660 00EA0100 	    and T0,T1 
 619 1664 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 620 1668 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 621 166c 134D45F0 	    _CALL_COLWORD KBD_LED
 621      0105BBE7 
 622              	
 623              	
 624              	/************************
 625              	 WAIT-KEY ( -- c )
 626              	 wait for keyboard key 
 627              	*************************/
 628 1674 42160000 	    _HEADER WKEY,8,"WAIT-KEY"
 628      08574149 
 628      542D4B45 
 628      590000BF 
 629 1684 504700BF 	    _NEST
 630 1688 4D160000 	1:  _ADR CAPS_LED  
 631 168c B5130000 	    _ADR PS2_QKEY 
 632 1690 111D0000 	    _ADR QDUP 
 633 1694 4B1A0000 	    _QBRAN 1b  
 633      88160000 
 634 169c 93180000 	    _UNNEST 
 635 16a0 B6120000 	
 635      C4120000 
 635      240F0000 
 635      48100000 
 635      D80F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
ARM GAS  forth.s 			page 66


  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16c0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16c8 0346     	    mov r3,r0 
  42 16ca 4FF00401 	    mov r1,#PIN_F_SC 
  43 16ce 4FF00102 	    mov r2,#OUTPUT_PP
  44 16d2 00B5FEF7 	    _CALL gpio_config 
  44      2DFE5DF8 
  44      04EB
  45 16dc 1846     	    mov r0,r3 
  46 16de 4FF00401 	    mov r1,#PIN_F_SC  
  47 16e2 4FF00102 	    MOV r2,#1
  48 16e6 00B5FEF7 	    _CALL gpio_out 
  48      79FE5DF8 
  48      04EB
  49 16f0 1846     	    mov r0,r3 
  50 16f2 4FF00501 	    mov r1,#PIN_SCK  
  51 16f6 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 16fa 00B5FEF7 	    _CALL gpio_config 
  52      19FE5DF8 
  52      04EB
  53 1704 1846     	    mov r0,r3 
  54 1706 4FF00701 	    mov r1,#PIN_MOSI 
  55 170a 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 170e 00B5FEF7 	    _CALL gpio_config 
  56      0FFE5DF8 
  56      04EB
  57 1718 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  57      C4F20200 
  58 1720 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  59 1722 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  60 1726 4164     	    str r1,[r0,#RCC_APB2ENR]
  61 1728 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  61      C4F20100 
  62 1730 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  63 1734 0180     	    strh r1,[r0,#SPI_CR1]
  64 1736 196A     	    ldr r1,[r3,#GPIO_AFRL]
  65 1738 80EA0000 	    eor r0,r0 
  66 173c C5F25050 	    movt r0,#0x555<<4
  67 1740 40EA0100 	    orr r0,r1 
ARM GAS  forth.s 			page 67


  68 1744 1862     	    str r0,[r3,#GPIO_AFRL]
  69 1746 7047     	    _RET 
  70              	
  71              	
  72              	/**********************
  73              	    CHIP-SEL ( -- )
  74              	    drive F_SC low 
  75              	*********************/
  76 1748 78160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  76      08434849 
  76      502D5345 
  76      4C0000BF 
  77 1758 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  77      C4F20200 
  78 1760 4FF00401 	    mov r1,#PIN_F_SC 
  79 1764 4FF00002 	    mov r2,#0 
  80 1768 00B5FEF7 	    _CALL gpio_out 
  80      38FE5DF8 
  80      04EB
  81 1772 8BE0     	    _NEXT 
  82              	
  83              	
  84              	/*********************
  85              	    CHIP-DSEL 
  86              	    drive F_SC high 
  87              	*********************/
  88 1774 4C170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  88      09434849 
  88      502D4453 
  88      454C00BF 
  89 1784 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  89      C4F20200 
  90 178c 4FF00401 	    mov r1,#PIN_F_SC 
  91 1790 4FF00102 	    mov r2,#1 
  92 1794 00B5FEF7 	    _CALL gpio_out 
  92      22FE5DF8 
  92      04EB
  93 179e 75E0     	    _NEXT 
  94              	
  95              	
  96              	/****************************
  97              	    READ-BYTE ( -- )
  98              	    read flash byte 
  99              	***************************/
 100 17a0 78170000 	    _HEADER READ_BYTE,9,"READ-BYTE"
 100      09524541 
 100      442D4259 
 100      544500BF 
 101 17b0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 101      C4F20100 
 102 17b8 47F8046D 	    _PUSH 
 103 17bc 0189     	    ldrh T1,[T0,#SPI_SR]
 104 17be 11F0010F 	    tst T1,#(1<<0) // RXNE 
 105 17c2 0AD1     	    bne 2f
 106 17c4 0189     	0:  ldrh T1,[T0,#SPI_SR]
 107 17c6 11F0020F 	    tst T1,#(1<<1) //TXE
 108 17ca FBD0     	    beq 0b 
ARM GAS  forth.s 			page 68


 109 17cc 81EA0101 	    eor T1,T1 
 110 17d0 0173     	    strb T1,[T0,#SPI_DR]
 111 17d2 8168     	1:  ldr T1,[T0,#SPI_SR]
 112 17d4 11F0010F 	    tst T1,#(1<<0) // RXNE 
 113 17d8 FBD0     	    beq 1b     
 114 17da 8689     	2:  ldrh TOS,[T0,#SPI_DR]
 115 17dc 56E0     	    _NEXT 
 116              	
 117              	
 118              	/*********************************
 119              	    WRITE-BYTE  ( c -- )
 120              	    write flash byte 
 121              	*************************/
 122 17de A4170000 	    _HEADER WRITE_BYTE,10,"WRITE-BYTE"
 122      0A575249 
 122      54452D42 
 122      59544500 
 122      00BF
 123 17f0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 123      C4F20100 
 124 17f8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 125 17fa 11F0020F 	    tst T1,#(1<<1) //TXE
 126 17fe FBD0     	    beq 0b 
 127 1800 0673     	    strb TOS,[T0,#SPI_DR]
 128 1802 0189     	1:  ldrh T1,[T0,#SPI_SR]
 129 1804 11F0010F 	    tst T1,#(1<<0) // RXNE 
 130 1808 FBD0     	    beq 1b 
 131 180a 8189     	    ldrh T1,[T0,#SPI_DR]
 132 180c 57F8046B 	    _POP 
 133 1810 3CE0     	    _NEXT 
 134              	
 135              	/*************************
 136              	    WR-ENBL ( -- )
 137              	    set WEL flag in SR0 
 138              	************************/
 139 1812 E2170000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 139      0757522D 
 139      454E424C 
 139      00BF
 140 1820 504700BF 	    _NEST 
 141 1824 59170000 	    _ADR CHIP_SEL 
 142 1828 0B1A0000 	    _DOLIT 6 
 142      06000000 
 143 1830 F1170000 	    _ADR WRITE_BYTE 
 144 1834 85170000 	    _ADR CHIP_DSEL 
 145 1838 93180000 	    _UNNEST 
 146              	
 147              	/********************************
 148              	    FLASH-RDSR ( n -- c )
 149              	    read status register  
 150              	********************************/
 151 183c 16180000 	    _HEADER FLASH_RDSR,10,"FLASH-RDSR"
 151      0A464C41 
 151      53482D52 
 151      44535200 
 152 184c 504700BF 	    _NEST 
 153 1850 59170000 	    _ADR CHIP_SEL 
ARM GAS  forth.s 			page 69


 154 1854 0B1A0000 	    _DOLIT sr_cmd 
 154      74180000 
 155 185c 011C0000 	    _ADR PLUS 
 156 1860 B11A0000 	    _ADR CAT
 157 1864 F1170000 	    _ADR WRITE_BYTE
 158 1868 B1170000 	    _ADR READ_BYTE 
 159 186c 85170000 	    _ADR CHIP_DSEL 
 160 1870 93180000 	    _UNNEST 
 161 1874 053515   	sr_cmd: .byte 5,0x35,0x15      
 162              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/*****************************************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
ARM GAS  forth.s 			page 70


  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	//  Start of eForth system 
  78              	***********************************/
  79              	
  80 1877 00       		.p2align 2 
  81              	
  82              	// PUSH TOS, to be used in colon definition 
  83              	TPUSH:
  84 1878 47F8046D 		_PUSH
  85 187c 06E0     		_NEXT
  86              	
  87              	// POP TOS, to be used in colon defintion  
  88              	TPOP:
  89 187e 57F8046B 		_POP 
  90 1882 03E0     		_NEXT
  91              	
  92              	// hi level word enter 
  93              	NEST: 
  94 1884 48F804CD 		STMFD	RSP!,{IP}
  95 1888 05F1030C 		ADD IP,WP,#3
  96              	// inner interprer
  97              	INEXT: 
  98 188c 5CF8045B 		LDR WP,[IP],#4 
  99 1890 2847     		BX WP  
 100              	UNNEST:
 101 1892 58F804CB 		LDMFD RSP!,{IP}
 102 1896 5CF8045B 		LDR WP,[IP],#4 
 103 189a 2847     		BX WP  
 104              	
ARM GAS  forth.s 			page 71


 105              		.p2align 2 
 106              	
 107              	// compile "BX 	INX" 
 108              	// this is the only way 
 109              	// a colon defintion in RAM 
 110              	// can jump to NEST
 111              	// INX is initialized to NEST address 
 112              	// and must be preserved   
 113              	COMPI_NEST:
 114 189c 04F14401 		add T1,UP,#USER_CTOP 
 115 18a0 0968     		ldr T1,[T1]
 116 18a2 44F25072 		mov T2,#0x4700+(10<<3)
 117 18a6 21F8022B 		strh T2,[T1],#2
 118 18aa 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 119 18ae 21F8022B 		strh T2,[T1],#2 
 120 18b2 04F14402 		add T2,UP,#USER_CTOP 
 121 18b6 1160     		str T1,[T2]
 122 18b8 E8E7     		_NEXT  
 123              	
 124              	// ' STDIN 
 125              	// stdin vector 
 126              	TSTDIN:
 127 18ba 47F8046D 		_PUSH 
 128 18be 04F11406 		ADD TOS,UP,#STDIN 
 129 18c2 E3E7     		_NEXT 
 130              	
 131              	// ' STDOUT 
 132              	// stdout vector 
 133              	TSTDOUT:
 134 18c4 47F8046D 		_PUSH 
 135 18c8 04F11806 		ADD TOS,UP,#STDOUT
 136 18cc DEE7     		_NEXT 
 137              		
 138              	/********************************************
 139              		KEY? ( -- c T | F )
 140              		check if available character 
 141              	********************************************/
 142 18ce 40180000 		_HEADER QKEY,4,"KEY?"
 142      044B4559 
 142      3F00
 143              	QRX: 
 144 18d8 504700BF 		_NEST 
 145 18dc BB180000 		_ADR TSTDIN // ' STDIN 
 146 18e0 E9220000 		_ADR ATEXE
 147 18e4 93180000 		_UNNEST 
 148              	
 149              	/********************************************
 150              	    KEY	 ( -- c )
 151              	 	Wait for and return an input character.
 152              	********************************************/
 153 18e8 D2180000 		_HEADER KEY,3,"KEY"
 153      034B4559 
 154 18f0 504700BF 		_NEST
 155              	KEY1:
 156 18f4 4D160000 		_ADR CAPS_LED 
 157 18f8 D9180000 		_ADR	QRX
 158 18fc 4B1A0000 		_QBRAN	KEY1
ARM GAS  forth.s 			page 72


 158      F4180000 
 159 1904 93180000 		_UNNEST
 160              	
 161              	/**********************************************
 162              		EMIT ( c -- )
 163              		transmit a character to console 
 164              	**********************************************/
 165 1908 EC180000 		_HEADER EMIT,4,"EMIT"
 165      04454D49 
 165      540000BF 
 166              	TECHO:
 167 1914 504700BF 		_NEST 
 168 1918 C5180000 		_ADR TSTDOUT 
 169 191c E9220000 		_ADR ATEXE 
 170 1920 93180000 		_UNNEST 
 171              	
 172              	
 173              	/************************************************
 174              	 GET-IP ( n - c )
 175              	 return interrupt priority of IRQn 
 176              	************************************************/
 177              	/*
 178              		_HEADER GETIP,6,"GET-IP" 
 179              		_NEST 
 180              		_ADR DUPP 
 181              		_ADR ZLESS
 182              		_QBRAN 1f 
 183              		_DOLIT 15
 184              		_ADR ANDD
 185              		_DOLIT 4
 186              		_ADR SUBB  
 187              		_DOLIT 0xE000ED18 
 188              		_BRAN 2f 
 189              	1:	_DOLIT 0xE000E400 
 190              	2:	_ADR PLUS 
 191              		_ADR CAT
 192              		_DOLIT 4 
 193              		_ADR RSHIFT 
 194              		_UNNEST 
 195              	*/
 196              	
 197              	/***********************************************
 198              	 RANDOM ( n+ -- {0..n+ - 1} )
 199              	 return pseudo random number 
 200              	 REF: https://en.wikipedia.org/wiki/Xorshift
 201              	************************************************/
 202 1924 0C190000 		_HEADER RAND,6,"RANDOM"
 202      0652414E 
 202      444F4D00 
 203 1930 504700BF 		_NEST
 204 1934 C91D0000 		_ADR ABSS   
 205 1938 091F0000 		_ADR SEED 
 206 193c 911A0000 		_ADR AT 
 207 1940 3D1B0000 		_ADR DUPP 
 208 1944 0B1A0000 		_DOLIT 13
 208      0D000000 
 209 194c F11B0000 		_ADR LSHIFT 
ARM GAS  forth.s 			page 73


 210 1950 A91B0000 		_ADR XORR  
 211 1954 3D1B0000 		_ADR DUPP 
 212 1958 0B1A0000 		_DOLIT 17 
 212      11000000 
 213 1960 D91B0000 		_ADR RSHIFT 
 214 1964 A91B0000 		_ADR XORR 
 215 1968 3D1B0000 		_ADR DUPP
 216 196c 0B1A0000 		_DOLIT 5 
 216      05000000 
 217 1974 F11B0000 		_ADR LSHIFT 
 218 1978 A91B0000 		_ADR XORR  
 219 197c 3D1B0000 		_ADR DUPP 
 220 1980 091F0000 		_ADR SEED 
 221 1984 7D1A0000 		_ADR STORE 
 222 1988 0B1A0000 		_DOLIT 0x7FFFFFFF
 222      FFFFFF7F 
 223 1990 811B0000 		_ADR ANDD 
 224 1994 4D1B0000 		_ADR SWAP 
 225 1998 6D210000 		_ADR MODD 
 226 199c 93180000 		_UNNEST 
 227              	
 228              	
 229              	/****************************************
 230              	 PAUSE ( u -- ) 
 231              	 suspend execution for u milliseconds
 232              	****************************************/
 233 19a0 28190000 		_HEADER PAUSE,5,"PAUSE"
 233      05504155 
 233      534500BF 
 234 19ac 504700BF 		_NEST 
 235 19b0 311F0000 		_ADR TIMER 
 236 19b4 7D1A0000 		_ADR STORE 
 237              	PAUSE_LOOP:
 238 19b8 311F0000 		_ADR TIMER 
 239 19bc 911A0000 		_ADR AT 
 240 19c0 4B1A0000 		_QBRAN PAUSE_EXIT 
 240      D0190000 
 241 19c8 5F1A0000 		_BRAN PAUSE_LOOP 
 241      B8190000 
 242              	PAUSE_EXIT: 		
 243 19d0 93180000 		_UNNEST 
 244              	
 245              	/******************************************
 246              	  ULED ( T|F -- )
 247              	  control user LED, -1 ON, 0 OFF 
 248              	*******************************************/
 249 19d4 A4190000 		_HEADER ULED,4,"ULED"
 249      04554C45 
 249      440000BF 
 250 19e0 4FF40050 		mov T0,#(1<<LED_PIN)
 251 19e4 4FF40061 		_MOV32 T1,LED_GPIO 
 251      C4F20201 
 252 19ec 3600     		movs TOS,TOS 
 253 19ee 57F8046B 		_POP
 254 19f2 03D0     		beq ULED_OFF
 255 19f4 4FEA0040 		lsl T0,#16 
 256 19f8 8861     		str T0,[T1,#GPIO_BSRR]
ARM GAS  forth.s 			page 74


 257 19fa 47E7     		_NEXT 
 258              	ULED_OFF:
 259 19fc 8861     		str T0,[T1,#GPIO_BSRR]
 260 19fe 45E7     		_NEXT    
 261              	
 262              	
 263              		
 264              	/***************
 265              	//  The kernel
 266              	***************/
 267              	
 268              	/********************
 269              	    NOP	( -- )
 270              	 	do nothing.
 271              	*********************/
 272 1a00 D8190000 		_HEADER NOP,3,"NOP"
 272      034E4F50 
 273 1a08 40E7     		_NEXT 
 274              	 
 275              	/********************
 276              	    doLIT	( -- w )
 277              	 	Push an inline literal.
 278              	hidden word used by compiler 
 279              	*********************/
 280              	DOLIT:
 281 1a0a 47F8046D 		_PUSH				//  store TOS on data stack
 282 1a0e 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 283 1a12 3BE7     		_NEXT 
 284              	
 285              	/*******************************
 286              	    EXECUTE	( ca -- )
 287              	 	Execute the word at ca.
 288              	*******************************/
 289 1a14 041A0000 		_HEADER EXECU,7,"EXECUTE"
 289      07455845 
 289      43555445 
 290 1a20 46F00105 		ORR	WP,TOS,#1 
 291 1a24 57F8046B 		_POP
 292 1a28 2847     		BX WP 
 293 1a2a 2FE7     		_NEXT 
 294              	
 295              	/**********************************************************
 296              	    donext	( -- ) counter on R:
 297              	 	Run time code for the single index loop.
 298              	 	: next ( -- ) \ hilevel model
 299              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 300              	hidden word used by compiler 	  
 301              	*********************************************************/
 302              	DONXT:
 303 1a2c D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 304 1a30 22B9     		CBNZ T2,NEXT1 
 305              		/* loop done */
 306 1a32 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 307 1a36 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 308 1a3a 27E7     		_NEXT
 309              	NEXT1:
 310              		/* decrement loop counter */
ARM GAS  forth.s 			page 75


 311 1a3c A2F10102 		SUB	T2,T2,#1
 312 1a40 C8F80020 		STR	T2,[RSP]
 313 1a44 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 314 1a48 20E7     		_NEXT 
 315              	
 316              	/**************************************
 317              	    ?branch	( f -- )
 318              	 	Branch if flag is zero.
 319              	hiddend word used by compiler
 320              	**************************************/
 321              	QBRAN:
 322 1a4a 3600     		MOVS	TOS,TOS
 323 1a4c 57F8046B 		_POP
 324 1a50 02D1     		BNE	QBRAN1
 325 1a52 DCF800C0 		LDR	IP,[IP]
 326 1a56 19E7     		_NEXT
 327              	QBRAN1:
 328 1a58 0CF1040C 	 	ADD	IP,IP,#4
 329 1a5c 16E7     		_NEXT
 330              	
 331              	/***********************************
 332              	    branch	( -- )
 333              	 	Branch to an inline address.
 334              	hidden word used by compiler 
 335              	***********************************/
 336              	BRAN:
 337 1a5e DCF800C0 		LDR	IP,[IP]
 338 1a62 13E7     		_NEXT
 339              	
 340              	/******************************************
 341              	    EXIT	(  -- )
 342              	 	Exit the currently executing command.
 343              	******************************************/
 344 1a64 181A0000 		_HEADER EXIT,4,"EXIT"
 344      04455849 
 344      540000BF 
 345 1a70 93180000 		_UNNEST
 346              	
 347              	/***********************************
 348              	    !	   ( w a -- )
 349              	 	Pop the data stack to memory.
 350              	************************************/
 351 1a74 681A0000 		_HEADER STORE,1,"!"
 351      012100BF 
 352 1a7c 57F8045B 		LDR	WP,[DSP],#4
 353 1a80 3560     		STR	WP,[TOS]
 354 1a82 57F8046B 		_POP
 355 1a86 01E7     		_NEXT 
 356              	
 357              	/********************************************
 358              	    @	   ( a -- w )
 359              	 	Push memory location to the data stack.
 360              	*********************************************/
 361 1a88 781A0000 		_HEADER AT,1,"@"
 361      014000BF 
 362 1a90 3668     		LDR	TOS,[TOS]
 363 1a92 FBE6     		_NEXT 
ARM GAS  forth.s 			page 76


 364              	
 365              	/*******************************************
 366              	    C!	  ( c b -- )
 367              	 	Pop the data stack to byte memory.
 368              	*******************************************/
 369 1a94 8C1A0000 		_HEADER CSTOR,2,"C!"
 369      02432100 
 370 1a9c 57F8045B 		LDR	WP,[DSP],#4
 371 1aa0 3570     		STRB WP,[TOS]
 372 1aa2 57F8046B 		_POP
 373 1aa6 F1E6     		_NEXT
 374              	
 375              	/*********************************************
 376              	    C@	  ( b -- c )
 377              	 	Push byte memory location to the data stack.
 378              	**********************************************/
 379 1aa8 981A0000 		_HEADER CAT,2,"C@"
 379      02434000 
 380 1ab0 3678     		LDRB	TOS,[TOS]
 381 1ab2 EBE6     		_NEXT 
 382              	
 383              	/*********************************************
 384              	    R>	  ( -- w )
 385              	 	Pop the return stack to the data stack.
 386              	**********************************************/
 387 1ab4 AC1A0000 		_HEADER RFROM,2,"R>"
 387      02523E00 
 388 1abc 47F8046D 		_PUSH
 389 1ac0 58F8046B 		LDR	TOS,[RSP],#4
 390 1ac4 E2E6     		_NEXT 
 391              	
 392              	/************************************************
 393              	    R@	  ( -- w )
 394              	 	Copy top of return stack to the data stack.
 395              	************************************************/
 396 1ac6 B81A0000 		_HEADER RAT,2,"R@"
 396      02524000 
 396      00BF
 397 1ad0 47F8046D 		_PUSH
 398 1ad4 D8F80060 		LDR	TOS,[RSP]
 399 1ad8 D8E6     		_NEXT 
 400              	
 401              	/***********************************************
 402              	    >R	  ( w -- )
 403              	 	Push the data stack to the return stack.
 404              	************************************************/
 405 1ada CA1A0000 		_HEADER TOR,2,">R"
 405      023E5200 
 405      00BF
 406 1ae4 48F8046D 		STR	TOS,[RSP,#-4]!
 407 1ae8 57F8046B 		_POP
 408 1aec CEE6     		_NEXT
 409              	
 410              	/*******************************
 411              	//	RP! ( u -- )
 412              	// initialize RPP with u 
 413              	*******************************/
ARM GAS  forth.s 			page 77


 414 1aee DE1A0000 		_HEADER RPSTOR,3,"RP!"
 414      03525021 
 414      00BF
 415 1af8 B046     		MOV RSP,TOS 
 416 1afa 57F8046B 		_POP  
 417 1afe C5E6     		_NEXT 
 418              	
 419              	/********************************
 420              		SP! ( u -- )
 421              	 initialize SPP with u 
 422              	********************************/
 423 1b00 F21A0000 		_HEADER SPSTOR,3,"SP!"
 423      03535021 
 424 1b08 3746     		MOV DSP,TOS 
 425 1b0a 86EA0606 		EOR TOS,TOS,TOS 
 426 1b0e BDE6     		_NEXT 
 427              	
 428              	/**************************************
 429              	    SP@	 ( -- a )
 430              	 	Push the current data stack pointer.
 431              	***************************************/
 432 1b10 041B0000 		_HEADER SPAT,3,"SP@"
 432      03535040 
 433 1b18 47F8046D 		_PUSH
 434 1b1c 3E46     		MOV	TOS,DSP
 435 1b1e B5E6     		_NEXT
 436              	
 437              	/********************************
 438              	    DROP	( w -- )
 439              	 	Discard top stack item.
 440              	********************************/
 441 1b20 141B0000 		_HEADER DROP,4,"DROP"
 441      0444524F 
 441      500000BF 
 442 1b2c 57F8046B 		_POP
 443 1b30 ACE6     		_NEXT 
 444              	
 445              	/*********************************
 446              	    DUP	 ( w -- w w )
 447              	 	Duplicate the top stack item.
 448              	*********************************/
 449 1b32 241B0000 		_HEADER DUPP,3,"DUP"
 449      03445550 
 449      00BF
 450 1b3c 47F8046D 		_PUSH
 451 1b40 A4E6     		_NEXT 
 452              	
 453              	/**********************************
 454              	    SWAP	( w1 w2 -- w2 w1 )
 455              	 	Exchange top two stack items.
 456              	**********************************/
 457 1b42 361B0000 		_HEADER SWAP,4,"SWAP"
 457      04535741 
 457      5000
 458 1b4c 3D68     		LDR	WP,[DSP]
 459 1b4e 3E60     		STR	TOS,[DSP]
 460 1b50 2E46     		MOV	TOS,WP
ARM GAS  forth.s 			page 78


 461 1b52 9BE6     		_NEXT 
 462              	
 463              	/***********************************
 464              	    OVER	( w1 w2 -- w1 w2 w1 )
 465              	 	Copy second stack item to top.
 466              	***********************************/
 467 1b54 461B0000 		_HEADER OVER,4,"OVER"
 467      044F5645 
 467      520000BF 
 468 1b60 47F8046D 		_PUSH
 469 1b64 7E68     		LDR	TOS,[DSP,#4]
 470 1b66 91E6     		_NEXT 
 471              	
 472              	/***********************************
 473              	    0<	  ( n -- t )
 474              	 	Return true if n is negative.
 475              	***********************************/
 476 1b68 581B0000 		_HEADER ZLESS,2,"0<"
 476      02303C00 
 477 1b70 4FEAE676 		ASR TOS,#31
 478 1b74 8AE6     		_NEXT 
 479              	
 480              	/********************************
 481              	    AND	 ( w w -- w )
 482              	 	Bitwise AND.
 483              	********************************/
 484 1b76 6C1B0000 		_HEADER ANDD,3,"AND"
 484      03414E44 
 484      00BF
 485 1b80 57F8045B 		LDR	WP,[DSP],#4
 486 1b84 06EA0506 		AND	TOS,TOS,WP
 487 1b88 80E6     		_NEXT 
 488              	
 489              	/******************************
 490              	    OR	  ( w w -- w )
 491              	 	Bitwise inclusive OR.
 492              	******************************/
 493 1b8a 7A1B0000 		_HEADER ORR,2,"OR"
 493      024F5200 
 493      00BF
 494 1b94 57F8045B 		LDR	WP,[DSP],#4
 495 1b98 46EA0506 		ORR	TOS,TOS,WP
 496 1b9c 76E6     		_NEXT 
 497              	
 498              	/*****************************
 499              	    XOR	 ( w w -- w )
 500              	 	Bitwise exclusive OR.
 501              	*****************************/
 502 1b9e 8E1B0000 		_HEADER XORR,3,"XOR"
 502      03584F52 
 502      00BF
 503 1ba8 57F8045B 		LDR	WP,[DSP],#4
 504 1bac 86EA0506 		EOR	TOS,TOS,WP
 505 1bb0 6CE6     		_NEXT 
 506              	
 507              	/**************************************************
 508              	    UM+	 ( w w -- w cy )
ARM GAS  forth.s 			page 79


 509              	 	Add two numbers, return the sum and carry flag.
 510              	***************************************************/
 511 1bb2 A21B0000 		_HEADER UPLUS,3,"UM+"
 511      03554D2B 
 511      00BF
 512 1bbc 3D68     		LDR	WP,[DSP]
 513 1bbe AD19     		ADDS	WP,WP,TOS
 514 1bc0 4FF00006 		MOV	TOS,#0
 515 1bc4 46F10006 		ADC	TOS,TOS,#0
 516 1bc8 3D60     		STR	WP,[DSP]
 517 1bca 5FE6     		_NEXT 
 518              	
 519              	/*********************************
 520              	    RSHIFT	 ( w # -- w )
 521              	 	arithmetic Right shift # bits.
 522              	**********************************/
 523 1bcc B61B0000 		_HEADER RSHIFT,6,"RSHIFT"
 523      06525348 
 523      49465400 
 524 1bd8 57F8045B 		LDR	WP,[DSP],#4
 525 1bdc 45FA06F6 		MOV	TOS,WP,ASR TOS
 526 1be0 54E6     		_NEXT 
 527              	
 528              	/****************************
 529              	    LSHIFT	 ( w # -- w )
 530              	 	Right shift # bits.
 531              	****************************/
 532 1be2 D01B0000 		_HEADER LSHIFT,6,"LSHIFT"
 532      064C5348 
 532      49465400 
 532      00BF
 533 1bf0 57F8045B 		LDR	WP,[DSP],#4
 534 1bf4 05FA06F6 		MOV	TOS,WP,LSL TOS
 535 1bf8 48E6     		_NEXT
 536              	
 537              	/*************************
 538              	    +	 ( w w -- w )
 539              	 	Add.
 540              	*************************/
 541 1bfa E61B0000 		_HEADER PLUS,1,"+"
 541      012B
 542 1c00 57F8045B 		LDR	WP,[DSP],#4
 543 1c04 2E44     		ADD	TOS,TOS,WP
 544 1c06 41E6     		_NEXT 
 545              	
 546              	/************************
 547              	    -	 ( w w -- w )
 548              	 	Subtract.
 549              	************************/
 550 1c08 FE1B0000 		_HEADER SUBB,1,"-"
 550      012D00BF 
 551 1c10 57F8045B 		LDR	WP,[DSP],#4
 552 1c14 C6EB0506 		RSB	TOS,TOS,WP
 553 1c18 38E6     		_NEXT 
 554              	
 555              	/************************
 556              	    *	 ( w w -- w )
ARM GAS  forth.s 			page 80


 557              	 	Multiply.
 558              	***********************/
 559 1c1a 0C1C0000 		_HEADER STAR,1,"*"
 559      012A
 560 1c20 57F8045B 		LDR	WP,[DSP],#4
 561 1c24 05FB06F6 		MUL	TOS,WP,TOS
 562 1c28 30E6     		_NEXT 
 563              	
 564              	/***************************
 565              	    UM*	 ( w w -- ud )
 566              	 	Unsigned multiply.
 567              	****************************/
 568 1c2a 1E1C0000 		_HEADER UMSTA,3,"UM*"
 568      03554D2A 
 568      00BF
 569 1c34 3D68     		LDR	WP,[DSP]
 570 1c36 A6FB0523 		UMULL	T2,T3,TOS,WP
 571 1c3a 3A60     		STR	T2,[DSP]
 572 1c3c 1E46     		MOV	TOS,T3
 573 1c3e 25E6     		_NEXT 
 574              	
 575              	/***************************
 576              	    M*	 ( w w -- d )
 577              	 	signed multiply.
 578              	***************************/
 579 1c40 2E1C0000 		_HEADER MSTAR,2,"M*"
 579      024D2A00 
 580 1c48 3D68     		LDR	WP,[DSP]
 581 1c4a 86FB0523 		SMULL	T2,T3,TOS,WP
 582 1c4e 3A60     		STR	T2,[DSP]
 583 1c50 1E46     		MOV	TOS,T3
 584 1c52 1BE6     		_NEXT 
 585              	
 586              	/***************************
 587              	    1+	 ( w -- w+1 )
 588              	 	Add 1.
 589              	***************************/
 590 1c54 441C0000 		_HEADER ONEP,2,"1+"
 590      02312B00 
 591 1c5c 06F10106 		ADD	TOS,TOS,#1
 592 1c60 14E6     		_NEXT 
 593              	
 594              	/***************************
 595              	    1-	 ( w -- w-1 )
 596              	 	Subtract 1.
 597              	***************************/
 598 1c62 581C0000 		_HEADER ONEM,2,"1-"
 598      02312D00 
 598      00BF
 599 1c6c A6F10106 		SUB	TOS,TOS,#1
 600 1c70 0CE6     		_NEXT 
 601              	
 602              	/***************************
 603              	    2+	 ( w -- w+2 )
 604              	 	Add 2.
 605              	**************************/
 606 1c72 661C0000 		_HEADER TWOP,2,"2+"
ARM GAS  forth.s 			page 81


 606      02322B00 
 606      00BF
 607 1c7c 06F10206 		ADD	TOS,TOS,#2
 608 1c80 04E6     		_NEXT
 609              	
 610              	/**************************
 611              	    2-	 ( w -- w-2 )
 612              	 	Subtract 2.
 613              	**************************/
 614 1c82 761C0000 		_HEADER TWOM,2,"2-"
 614      02322D00 
 614      00BF
 615 1c8c A6F10206 		SUB	TOS,TOS,#2
 616 1c90 FCE5     		_NEXT
 617              	
 618              	/***************************
 619              	    CELL+	( w -- w+4 )
 620              	 	Add CELLL.
 621              	***************************/
 622 1c92 861C0000 		_HEADER CELLP,5,"CELL+"
 622      0543454C 
 622      4C2B
 623 1c9c 06F10406 		ADD	TOS,TOS,#CELLL
 624 1ca0 F4E5     		_NEXT
 625              	
 626              	/***************************
 627              	    CELL-	( w -- w-4 )
 628              	 	Subtract CELLL.
 629              	**************************/
 630 1ca2 961C0000 		_HEADER CELLM,5,"CELL-"
 630      0543454C 
 630      4C2D
 631 1cac A6F10406 		SUB	TOS,TOS,#CELLL
 632 1cb0 ECE5     		_NEXT
 633              	
 634              	/**************************** 
 635              	    BL	( -- 32 )
 636              	 	Blank (ASCII space).
 637              	*****************************/
 638 1cb2 A61C0000 		_HEADER BLANK,2,"BL"
 638      02424C00 
 638      00BF
 639 1cbc 47F8046D 		_PUSH
 640 1cc0 4FF02006 		MOV	TOS,#32
 641 1cc4 E2E5     		_NEXT 
 642              	
 643              	/**************************
 644              	    CELLS	( w -- w*4 )
 645              	 	Multiply CELLL 
 646              	***************************/
 647 1cc6 B61C0000 		_HEADER CELLS,5,"CELLS"
 647      0543454C 
 647      4C53
 648 1cd0 4FEA8606 		LSL TOS,#2
 649 1cd4 DAE5     		_NEXT
 650              	
 651              	/***************************
ARM GAS  forth.s 			page 82


 652              	    CELL/	( w -- w/4 )
 653              	 	Divide by CELLL.
 654              	***************************/
 655 1cd6 CA1C0000 		_HEADER CELLSL,5,"CELL/"
 655      0543454C 
 655      4C2F
 656 1ce0 4FEAA606 		ASR TOS,#2
 657 1ce4 D2E5     		_NEXT
 658              	
 659              	/*************************
 660              	    2*	( w -- w*2 )
 661              	 	Multiply 2.
 662              	*************************/
 663 1ce6 DA1C0000 		_HEADER TWOST,2,"2*"
 663      02322A00 
 663      00BF
 664 1cf0 4FEA4606 		MOV	TOS,TOS,LSL#1
 665 1cf4 CAE5     		_NEXT
 666              	
 667              	/*************************
 668              	    2/	( w -- w/2 )
 669              	 	Divide by 2.
 670              	***********************/
 671 1cf6 EA1C0000 		_HEADER TWOSL,2,"2/"
 671      02322F00 
 671      00BF
 672 1d00 4FEA6606 		MOV	TOS,TOS,ASR#1
 673 1d04 C2E5     		_NEXT
 674              	
 675              	/****************************
 676              	    ?DUP	( w -- w w | 0 )
 677              	 	Conditional duplicate.
 678              	*****************************/
 679 1d06 FA1C0000 		_HEADER QDUP,4,"?DUP"
 679      043F4455 
 679      5000
 680 1d10 3500     		MOVS	WP,TOS
 681 1d12 18BF     		IT NE 
 682 1d14 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 683 1d18 B8E5     		_NEXT
 684              	
 685              	/***********************************
 686              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 687              	 	Rotate top 3 items.
 688              	*************************************/
 689 1d1a 0A1D0000 		_HEADER ROT,3,"ROT"
 689      03524F54 
 689      00BF
 690 1d24 3868     		LDR	T0,[DSP]  // w2 
 691 1d26 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 692 1d28 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 693 1d2a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 694 1d2c AEE5     		_NEXT
 695              	
 696              	/*********************************
 697              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 698              	 left rotate top 3 elements 
ARM GAS  forth.s 			page 83


 699              	********************************/
 700 1d2e 1E1D0000 		_HEADER NROT,4,"-ROT"
 700      042D524F 
 700      5400
 701 1d38 7868     		LDR T0,[DSP,#4]
 702 1d3a 7E60     		STR TOS,[DSP,#4]	
 703 1d3c 3E68     		LDR TOS,[DSP]
 704 1d3e 3860     		STR T0,[DSP]
 705 1d40 A4E5     		_NEXT 
 706              	
 707              	/*********************************
 708              	    2DROP	( w1 w2 -- )
 709              	 	Drop top 2 items.
 710              	*********************************/
 711 1d42 321D0000 		_HEADER DDROP,5,"2DROP"
 711      05324452 
 711      4F50
 712 1d4c 57F8046B 		_POP
 713 1d50 57F8046B 		_POP
 714 1d54 9AE5     		_NEXT 
 715              	
 716              	/********************************
 717              		3DROP ( w1 w2 w3 -- )
 718              		drop top 3 items 
 719              	********************************/
 720 1d56 461D0000 		_HEADER TDROP,5,"3DROP"
 720      05334452 
 720      4F50
 721 1d60 07F10807 	    add DSP,#8 
 722 1d64 57F8046B 	    _POP 
 723 1d68 90E5     	    _NEXT 
 724              	
 725              	/***********************************
 726              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 727              	 	Duplicate top 2 items.
 728              	************************************/
 729 1d6a 5A1D0000 		_HEADER DDUP,4,"2DUP"
 729      04324455 
 729      5000
 730 1d74 3868     		LDR	T0,[DSP] // w1
 731 1d76 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 732 1d7a 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 733 1d7e 85E5     		_NEXT
 734              	
 735              	/******************************
 736              	    D+	( d1 d2 -- d3 )
 737              	 	Add top 2 double numbers.
 738              	******************************/
 739 1d80 6E1D0000 		_HEADER DPLUS,2,"D+"
 739      02442B00 
 740 1d88 57F8045B 		LDR	WP,[DSP],#4
 741 1d8c 57F8042B 		LDR	T2,[DSP],#4
 742 1d90 3B68     		LDR	T3,[DSP]
 743 1d92 ED18     		ADDS	WP,WP,T3
 744 1d94 3D60     		STR	WP,[DSP]
 745 1d96 46EB0206 		ADC	TOS,TOS,T2
 746 1d9a 77E5     		_NEXT
ARM GAS  forth.s 			page 84


 747              	
 748              	/*****************************
 749              	    NOT	 ( w -- !w )
 750              	 	1"s complement.
 751              	*****************************/
 752 1d9c 841D0000 		_HEADER INVER,3,"NOT"
 752      034E4F54 
 753 1da4 6FEA0606 		MVN	TOS,TOS
 754 1da8 70E5     		_NEXT
 755              	
 756              	/*****************************
 757              	    NEGATE	( w -- -w )
 758              	 	2's complement.
 759              	***************************/
 760 1daa A01D0000 		_HEADER NEGAT,6,"NEGATE"
 760      064E4547 
 760      41544500 
 760      00BF
 761 1db8 C6F10006 		RSB	TOS,TOS,#0
 762 1dbc 66E5     		_NEXT
 763              	
 764              	/***************************
 765              	    ABS	 ( w -- |w| )
 766              	 	Absolute.
 767              	**************************/
 768 1dbe AE1D0000 		_HEADER ABSS,3,"ABS"
 768      03414253 
 768      00BF
 769 1dc8 16F0004F 		TST	TOS,#0x80000000
 770 1dcc 18BF     		IT NE
 771 1dce 7642     	    RSBNE   TOS,TOS,#0
 772 1dd0 5CE5     		_NEXT
 773              	
 774              	/*******************
 775              	  0= ( w -- f )
 776              	 TOS==0?
 777              	*******************/
 778 1dd2 C21D0000 		_HEADER ZEQUAL,2,"0="
 778      02303D00 
 778      00BF
 779 1ddc 16B9     		cbnz TOS,1f
 780 1dde 4FF0FF36 		mov TOS,#-1
 781 1de2 53E5     		_NEXT 
 782 1de4 86EA0606 	1:  eor TOS,TOS,TOS  
 783 1de8 50E5     		_NEXT 	
 784              	
 785              	/*********************
 786              	    =	 ( w w -- t )
 787              	 	Equal?
 788              	*********************/
 789 1dea D61D0000 		_HEADER EQUAL,1,"="
 789      013D
 790 1df0 57F8045B 		LDR	WP,[DSP],#4
 791 1df4 AE42     		CMP	TOS,WP
 792 1df6 0CBF     		ITE EQ 
 793 1df8 6FF00006 	    MVNEQ	TOS,#0
 794 1dfc 0026     		MOVNE	TOS,#0
ARM GAS  forth.s 			page 85


 795 1dfe 45E5     		_NEXT
 796              	
 797              	/************************
 798              	    U<	 ( w w -- t )
 799              	 	Unsigned less?
 800              	*************************/
 801 1e00 EE1D0000 		_HEADER ULESS,2,"U<"
 801      02553C00 
 802 1e08 57F8045B 		LDR	WP,[DSP],#4
 803 1e0c B542     		CMP	WP,TOS
 804 1e0e 34BF     		ITE CC 
 805 1e10 6FF00006 		MVNCC	TOS,#0
 806 1e14 0026     		MOVCS	TOS,#0
 807 1e16 39E5     		_NEXT
 808              	
 809              	/**********************
 810              	    <	( w w -- t )
 811              	 	Less?
 812              	**********************/
 813 1e18 041E0000 		_HEADER LESS,1,"<"
 813      013C00BF 
 814 1e20 57F8045B 		LDR	WP,[DSP],#4
 815 1e24 B542     		CMP	WP,TOS
 816 1e26 B4BF     	    ITE LT
 817 1e28 6FF00006 		MVNLT	TOS,#0
 818 1e2c 0026     		MOVGE	TOS,#0
 819 1e2e 2DE5     		_NEXT 
 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 1e30 1C1E0000 		_HEADER GREAT,1,">"
 825      013E00BF 
 826 1e38 57F8045B 		LDR	WP,[DSP],#4
 827 1e3c B542     		CMP	WP,TOS
 828 1e3e CCBF     		ITE GT
 829 1e40 6FF00006 	    MVNGT	TOS,#0
 830 1e44 0026     		MOVLE	TOS,#0
 831 1e46 21E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 1e48 341E0000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 1e50 57F8045B 		LDR	WP,[DSP],#4
 839 1e54 B542     		CMP	WP,TOS
 840 1e56 C8BF     		IT GT 
 841 1e58 2E46     		MOVGT	TOS,WP
 842 1e5a 17E5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
 846              	 	Leave minimum.
 847              	**************************/
ARM GAS  forth.s 			page 86


 848 1e5c 4C1E0000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 1e64 57F8045B 		LDR	WP,[DSP],#4
 850 1e68 B542     		CMP	WP,TOS
 851 1e6a B8BF     		IT LT
 852 1e6c 2E46     		MOVLT	TOS,WP
 853 1e6e 0DE5     		_NEXT
 854              	
 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 1e70 601E0000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 1e78 57F8045B 		LDR	WP,[DSP],#4
 861 1e7c 3268     		LDR	T2,[TOS]
 862 1e7e 2A44     		ADD	T2,T2,WP
 863 1e80 3260     		STR	T2,[TOS]
 864 1e82 57F8046B 		_POP
 865 1e86 01E5     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 1e88 741E0000 		_HEADER DSTOR,2,"2!"
 871      02322100 
 872 1e90 57F8045B 		LDR	WP,[DSP],#4
 873 1e94 57F8042B 		LDR	T2,[DSP],#4
 874 1e98 46F8045B 		STR	WP,[TOS],#4
 875 1e9c 3260     		STR	T2,[TOS]
 876 1e9e 57F8046B 		_POP
 877 1ea2 F3E4     		_NEXT
 878              	
 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 1ea4 8C1E0000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 1eac 7568     		LDR	WP,[TOS,#4]
 885 1eae 47F8045D 		STR	WP,[DSP,#-4]!
 886 1eb2 3668     		LDR	TOS,[TOS]
 887 1eb4 EAE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 1eb6 A81E0000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 1ec0 16F8015B 		LDRB	WP,[TOS],#1
 895 1ec4 47F8046D 		_PUSH
 896 1ec8 2E46     		MOV	TOS,WP
 897 1eca DFE4     		_NEXT
 898              	
ARM GAS  forth.s 			page 87


 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
 903 1ecc BA1E0000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 1ed8 3D68     		LDR	WP,[DSP]
 905 1eda A2EB0202 		SUB	T2,T2,T2
 906 1ede 551B     		SUBS WP,T2,WP
 907 1ee0 62EB0606 		SBC	TOS,T2,TOS
 908 1ee4 3D60     		STR	WP,[DSP]
 909 1ee6 D1E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 1ee8 47F8046D 		_PUSH
 922 1eec 6646     		MOV TOS,IP
 923 1eee 0CF1040C 		ADD IP,IP,#4 
 924 1ef2 CEE4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
 931              	DOCON:
 932 1ef4 47F8046D 		_PUSH
 933 1ef8 5CF8046B 		LDR.W TOS,[IP],#4 
 934 1efc C9E4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 1efe D01E0000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 1f08 47F8046D 		_PUSH 
 946 1f0c 04F10406 		ADD TOS,UP,#RNDSEED
 947 1f10 BCE4     		_NEXT 	
 948              	
 949              	/****************************************
 950              	  MSEC ( -- a)
 951              	 return address of milliseconds counter
ARM GAS  forth.s 			page 88


 952              	****************************************/
 953 1f12 021F0000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
 954 1f1c 47F8046D 	    _PUSH
 955 1f20 04F10806 	    ADD TOS,UP,#TICKS
 956 1f24 B2E4     	    _NEXT 
 957              	
 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 1f26 161F0000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 1f30 47F8046D 		 _PUSH 
 964 1f34 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 1f38 A8E4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 1f3a 2A1F0000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 1f44 47F8046D 		_PUSH
 973 1f48 04F11006 		ADD	TOS,UP,#BOOT 
 974 1f4c 9EE4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
 980 1f4e 3E1F0000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 1f58 47F8046D 		_PUSH
 982 1f5c 04F11C06 		ADD	TOS,UP,#NBASE
 983 1f60 94E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 1f62 47F8046D 		_PUSH
 992 1f66 04F12006 		ADD	TOS,UP,#TMP
 993 1f6a 8FE4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
 999 1f6c 521F0000 		_HEADER SPAN,4,"SPAN"
 999      04535041 
ARM GAS  forth.s 			page 89


 999      4E0000BF 
 1000 1f78 47F8046D 		_PUSH
 1001 1f7c 04F12406 		ADD	TOS,UP,#CSPAN
 1002 1f80 84E4     		_NEXT
 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
 1007              	***********************************************************/
 1008 1f82 701F0000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 1f8c 47F8046D 		_PUSH
 1010 1f90 04F12806 		ADD	TOS,UP,#TOIN
 1011 1f94 7AE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 1f96 861F0000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 1fa0 47F8046D 		_PUSH
 1020 1fa4 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 1fa8 70E4     		_NEXT
 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 1faa 9A1F0000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
 1027      414C
 1028 1fb4 47F8046D 		_PUSH
 1029 1fb8 04F13406 		ADD	TOS,UP,#EVAL
 1030 1fbc 66E4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 1fbe AE1F0000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 1fc8 47F8046D 		_PUSH
 1039 1fcc 04F13806 		ADD	TOS,UP,#HOLD
 1040 1fd0 5CE4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
 1046              	**********************************/
 1047 1fd2 C21F0000 		_HEADER CNTXT,7,"CONTEXT"
ARM GAS  forth.s 			page 90


 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
 1049 1fe0 47F8046D 		_PUSH
 1050 1fe4 04F13C06 		ADD	TOS,UP,#CTXT
 1051 1fe8 50E4     		_NEXT
 1052              	
 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 1fea D61F0000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 1ff4 47F8046D 		_PUSH
 1060 1ff8 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 1ffc 46E4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 1ffe EE1F0000 		_HEADER FCP,3,"FCP"
 1068      03464350 
 1068      00BF
 1069 2008 47F8046D 		_PUSH 
 1070 200c 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 2010 3CE4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 2012 02200000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 201c 47F8046D 		_PUSH
 1080 2020 04F14806 		ADD	TOS,UP,#LASTN
 1081 2024 32E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 2026 16200000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
 1092      522D4245 
 1092      47494E00 
ARM GAS  forth.s 			page 91


 1092      00BF
 1093 2038 47F8046D 		_PUSH 
 1094 203c 004E     		ldr TOS,USR_BGN_ADR 
 1095 203e 25E4     		_NEXT 
 1096              	USR_BGN_ADR:
 1097 2040 12050020 	.word  DTOP 
 1098              	
 1099              	/*********************************
 1100              	  USER_END ( -- a )
 1101              	  where user area end in RAM 
 1102              	******************************/
 1103 2044 2A200000 		_HEADER USER_END,8,"USER-END"
 1103      08555345 
 1103      522D454E 
 1103      440000BF 
 1104 2054 47F8046D 		_PUSH 
 1105 2058 004E     		ldr TOS,USER_END_ADR 
 1106 205a 17E4     		_NEXT 
 1107              	USER_END_ADR:
 1108 205c FC800120 		.word DEND 
 1109              	
 1110              	
 1111              	/* *********************
 1112              	  Common functions
 1113              	***********************/
 1114              	
 1115              	/********************************
 1116              	    WITHIN	( u ul uh -- t )
 1117              	 	Return true if u is within 
 1118              		the range of ul and uh.
 1119              	********************************/
 1120 2060 48200000 		_HEADER WITHI,6,"WITHIN"
 1120      06574954 
 1120      48494E00 
 1121 206c 504700BF 		_NEST
 1122 2070 611B0000 		_ADR	OVER
 1123 2074 111C0000 		_ADR	SUBB
 1124 2078 E51A0000 		_ADR	TOR
 1125 207c 111C0000 		_ADR	SUBB
 1126 2080 BD1A0000 		_ADR	RFROM
 1127 2084 091E0000 		_ADR	ULESS
 1128 2088 93180000 		_UNNEST
 1129              	
 1130              	//  Divide
 1131              	
 1132              	/*************************************
 1133              	    UM/MOD	( udl udh u -- ur uq )
 1134              	 	Unsigned divide of a double by a 
 1135              		single. Return mod and quotient.
 1136              	**************************************/
 1137 208c 64200000 		_HEADER UMMOD,6,"UM/MOD"
 1137      06554D2F 
 1137      4D4F4400 
 1138 2098 4FF00103 		MOV	T3,#1
 1139 209c 57F8045B 		LDR	WP,[DSP],#4
 1140 20a0 3A68     		LDR	T2,[DSP]
 1141              	UMMOD0:
ARM GAS  forth.s 			page 92


 1142 20a2 9218     		ADDS	T2,T2,T2
 1143 20a4 6D41     		ADCS	WP,WP,WP
 1144 20a6 04D3     		BCC	UMMOD1
 1145 20a8 A5EB0605 		SUB	WP,WP,TOS
 1146 20ac 02F10102 		ADD	T2,T2,#1
 1147 20b0 04E0     		B UMMOD2
 1148              	UMMOD1:
 1149 20b2 AD1B     		SUBS	WP,WP,TOS 
 1150 20b4 28BF     		IT CS 
 1151 20b6 0132     		ADDCS	T2,T2,#1
 1152 20b8 00D2     		BCS	UMMOD2
 1153 20ba 3544     		ADD	WP,WP,TOS
 1154              	UMMOD2:
 1155 20bc DB18     		ADDS	T3,T3,T3
 1156 20be F0D3     		BCC	UMMOD0
 1157 20c0 1646     		MOV	TOS,T2
 1158 20c2 3D60     		STR	WP,[DSP]
 1159 20c4 FFF7E2BB 		_NEXT
 1160              	
 1161              	/****************************
 1162              	    M/MOD	( d n -- r q )
 1163              	 	Signed floored divide 
 1164              		of double by single. 
 1165              		Return mod and quotient.
 1166              	****************************/
 1167 20c8 90200000 		_HEADER MSMOD,5,"M/MOD"
 1167      054D2F4D 
 1167      4F4400BF 
 1168 20d4 504700BF 		_NEST
 1169 20d8 3D1B0000 		_ADR	DUPP
 1170 20dc 711B0000 		_ADR	ZLESS
 1171 20e0 3D1B0000 		_ADR	DUPP
 1172 20e4 E51A0000 		_ADR	TOR
 1173 20e8 4B1A0000 		_QBRAN MMOD1
 1173      00210000 
 1174 20f0 B91D0000 		_ADR	NEGAT
 1175 20f4 E51A0000 		_ADR	TOR
 1176 20f8 D91E0000 		_ADR	DNEGA
 1177 20fc BD1A0000 		_ADR	RFROM
 1178              	MMOD1:
 1179 2100 E51A0000 		_ADR	TOR
 1180 2104 3D1B0000 		_ADR	DUPP
 1181 2108 711B0000 		_ADR	ZLESS
 1182 210c 4B1A0000 		_QBRAN MMOD2
 1182      1C210000 
 1183 2114 D11A0000 		_ADR	RAT
 1184 2118 011C0000 		_ADR	PLUS
 1185              	MMOD2:
 1186 211c BD1A0000 		_ADR	RFROM
 1187 2120 99200000 		_ADR	UMMOD
 1188 2124 BD1A0000 		_ADR	RFROM
 1189 2128 4B1A0000 		_QBRAN	MMOD3
 1189      3C210000 
 1190 2130 4D1B0000 		_ADR	SWAP
 1191 2134 B91D0000 		_ADR	NEGAT
 1192 2138 4D1B0000 		_ADR	SWAP
 1193              	MMOD3:   
ARM GAS  forth.s 			page 93


 1194 213c 93180000 		_UNNEST
 1195              	
 1196              	/****************************
 1197              	   /MOD	( n n -- r q )
 1198              		Signed divide. Return
 1199              		mod and quotient.
 1200              	****************************/
 1201 2140 CC200000 		_HEADER SLMOD,4,"/MOD"
 1201      042F4D4F 
 1201      440000BF 
 1202 214c 504700BF 		_NEST
 1203 2150 611B0000 		_ADR	OVER
 1204 2154 711B0000 		_ADR	ZLESS
 1205 2158 4D1B0000 		_ADR	SWAP
 1206 215c D5200000 		_ADR	MSMOD
 1207 2160 93180000 		_UNNEST
 1208              	
 1209              	/**************************
 1210              	    MOD	 ( n n -- r )
 1211              	 	Signed divide. Return
 1212              		mod only.
 1213              	**************************/
 1214 2164 44210000 		_HEADER MODD,3,"MOD"
 1214      034D4F44 
 1215 216c 504700BF 		_NEST
 1216 2170 4D210000 		_ADR	SLMOD
 1217 2174 2D1B0000 		_ADR	DROP
 1218 2178 93180000 		_UNNEST
 1219              	
 1220              	/*************************
 1221              	    /	   ( n n -- q )
 1222              	 	Signed divide. Return
 1223              		quotient only.
 1224              	**************************/
 1225 217c 68210000 		_HEADER SLASH,1,"/"
 1225      012F00BF 
 1226 2184 504700BF 		_NEST
 1227 2188 4D210000 		_ADR	SLMOD
 1228 218c 4D1B0000 		_ADR	SWAP
 1229 2190 2D1B0000 		_ADR	DROP
 1230 2194 93180000 		_UNNEST
 1231              	
 1232              	//******************************
 1233              	//  */MOD	( n1 n2 n3 -- r q )
 1234              	/* 	Multiply n1 and n2, then 
 1235              		divide by n3. Return 
 1236              		mod and quotient.
 1237              	******************************/
 1238 2198 80210000 		_HEADER SSMOD,5,"*/MOD"
 1238      052A2F4D 
 1238      4F4400BF 
 1239 21a4 504700BF 		_NEST
 1240 21a8 E51A0000 		_ADR	TOR
 1241 21ac 491C0000 		_ADR	MSTAR
 1242 21b0 BD1A0000 		_ADR	RFROM
 1243 21b4 D5200000 		_ADR	MSMOD
 1244 21b8 93180000 		_UNNEST
ARM GAS  forth.s 			page 94


 1245              	
 1246              	//*******************************
 1247              	//  */ ( n1 n2 n3 -- q )
 1248              	/* 	Multiply n1 by n2, then 
 1249              		divide by n3. Return quotient
 1250              		only.
 1251              	*******************************/
 1252 21bc 9C210000 		_HEADER STASL,2,"*/"
 1252      022A2F00 
 1253 21c4 504700BF 		_NEST
 1254 21c8 A5210000 		_ADR	SSMOD
 1255 21cc 4D1B0000 		_ADR	SWAP
 1256 21d0 2D1B0000 		_ADR	DROP
 1257 21d4 93180000 		_UNNEST
 1258              	
 1259              	/*******************
 1260              	  Miscellaneous
 1261              	*******************/
 1262              	
 1263              	/*************************
 1264              	    ALIGNED	( b -- a )
 1265              	 	Align address to the 
 1266              		cell boundary.
 1267              	**************************/
 1268 21d8 C0210000 		_HEADER ALGND,7,"ALIGNED"
 1268      07414C49 
 1268      474E4544 
 1269 21e4 06F10306 		ADD	TOS,TOS,#3
 1270 21e8 6FF00305 		MVN	WP,#3
 1271 21ec 06EA0506 		AND	TOS,TOS,WP
 1272 21f0 FFF74CBB 		_NEXT
 1273              	
 1274              	/****************************
 1275              	    >CHAR	( c -- c )
 1276              	 	Filter non-printing 
 1277              		characters.
 1278              	****************************/
 1279 21f4 DC210000 		_HEADER TCHAR,5,">CHAR"
 1279      053E4348 
 1279      415200BF 
 1280 2200 504700BF 		_NEST
 1281 2204 0B1A0000 		_DOLIT  0x7F
 1281      7F000000 
 1282 220c 811B0000 		_ADR	ANDD
 1283 2210 3D1B0000 		_ADR	DUPP	// mask msb
 1284 2214 BD1C0000 		_ADR	BLANK
 1285 2218 0B1A0000 		_DOLIT 	127
 1285      7F000000 
 1286 2220 6D200000 		_ADR	WITHI	// check for printable
 1287 2224 A51D0000 		_ADR	INVER
 1288 2228 4B1A0000 		_QBRAN	TCHA1
 1288      3C220000 
 1289 2230 2D1B0000 		_ADR	DROP
 1290 2234 0B1A0000 		_DOLIT 	'_'	// replace non-printables
 1290      5F000000 
 1291              	TCHA1:
 1292 223c 93180000 		  _UNNEST
ARM GAS  forth.s 			page 95


 1293              	
 1294              	/************************
 1295              	    DEPTH	( -- n )
 1296              	 	Return the depth of
 1297              		the data stack.
 1298              	***********************/
 1299 2240 F8210000 		_HEADER DEPTH,5,"DEPTH"
 1299      05444550 
 1299      544800BF 
 1300 224c 4FF47F42 		_MOV32 T2,SPP 
 1300      C2F20102 
 1301 2254 A2EB0702 		SUB	T2,T2,DSP
 1302 2258 47F8046D 		_PUSH
 1303 225c 4FEAA206 		ASR	TOS,T2,#2
 1304 2260 FFF714BB 		_NEXT
 1305              	
 1306              	/*****************************
 1307              	    PICK	( ... +n -- ... w )
 1308              	 	Copy the nth stack item 
 1309              		to tos.
 1310              	******************************/
 1311 2264 44220000 		_HEADER PICK,4,"PICK"
 1311      04504943 
 1311      4B0000BF 
 1312 2270 504700BF 		_NEST
 1313 2274 5D1C0000 		_ADR	ONEP
 1314 2278 D11C0000 		_ADR	CELLS
 1315 227c 191B0000 		_ADR	SPAT
 1316 2280 011C0000 		_ADR	PLUS
 1317 2284 911A0000 		_ADR	AT
 1318 2288 93180000 		_UNNEST
 1319              	
 1320              	/*********************
 1321              	  Memory access
 1322              	*********************/
 1323              	
 1324              	/*************************
 1325              	    HERE	( -- a )
 1326              	 	Return the top of
 1327              		the code dictionary.
 1328              	*************************/
 1329 228c 68220000 		_HEADER HERE,4,"HERE"
 1329      04484552 
 1329      450000BF 
 1330 2298 504700BF 		_NEST
 1331 229c F51F0000 		_ADR	CPP
 1332 22a0 911A0000 		_ADR	AT
 1333 22a4 93180000 		_UNNEST
 1334              	
 1335              	/***************************	
 1336              	    PAD	 ( -- a )
 1337              	 	Return the address of 
 1338              		a temporary buffer.
 1339              	***************************/
 1340 22a8 90220000 		_HEADER PAD,3,"PAD"
 1340      03504144 
 1341 22b0 504700BF 		_NEST
ARM GAS  forth.s 			page 96


 1342 22b4 99220000 		_ADR	HERE
 1343 22b8 0B1A0000 		_DOLIT 80
 1343      50000000 
 1344 22c0 011C0000 		_ADR PLUS 
 1345 22c4 93180000 		_UNNEST
 1346              	
 1347              	/***********************
 1348              	    TIB	 ( -- a )
 1349              	 	Return the address 
 1350              		of the terminal 
 1351              		input buffer.
 1352              	************************/
 1353 22c8 AC220000 		_HEADER TIB,3,"TIB"
 1353      03544942 
 1354 22d0 47F8046D 		_PUSH
 1355 22d4 266B     		ldr TOS,[UP,#TIBUF]
 1356 22d6 FFF7D9BA 		_NEXT
 1357              	
 1358              	/*************************
 1359              	    @EXECUTE	( a -- )
 1360              	 	Execute vector stored
 1361              		in address a.
 1362              	*************************/
 1363 22da CC220000 		_HEADER ATEXE,8,"@EXECUTE"
 1363      08404558 
 1363      45435554 
 1363      4500
 1364 22e8 3500     		MOVS	WP,TOS
 1365 22ea 57F8046B 		_POP
 1366 22ee 2D68     		LDR	WP,[WP]
 1367 22f0 45F00105 		ORR	WP,WP,#1
 1368 22f4 18BF     	    IT NE 
 1369 22f6 2847     		BXNE	WP
 1370 22f8 FFF7C8BA 		_NEXT
 1371              	
 1372              	/*******************************
 1373              	    CMOVE	( b1 b2 u -- )
 1374              	 	Copy u bytes from b1 to b2.
 1375              	********************************/
 1376 22fc DE220000 		_HEADER CMOVE,5,"CMOVE"
 1376      05434D4F 
 1376      564500BF 
 1377 2308 57F8042B 		LDR	T2,[DSP],#4
 1378 230c 57F8043B 		LDR	T3,[DSP],#4
 1379 2310 03E0     		B CMOV1
 1380              	CMOV0:
 1381 2312 13F8015B 		LDRB	WP,[T3],#1
 1382 2316 02F8015B 		STRB	WP,[T2],#1
 1383              	CMOV1:
 1384 231a 3600     		MOVS	TOS,TOS
 1385 231c 02D0     		BEQ	CMOV2
 1386 231e A6F10106 		SUB	TOS,TOS,#1
 1387 2322 F6E7     		B CMOV0
 1388              	CMOV2:
 1389 2324 57F8046B 		_POP
 1390 2328 FFF7B0BA 		_NEXT
 1391              	
ARM GAS  forth.s 			page 97


 1392              	/***************************
 1393              	    MOVE	( a1 a2 u -- )
 1394              	 	Copy u words from a1 to a2.
 1395              	*******************************/
 1396 232c 00230000 		_HEADER MOVE,4,"MOVE"
 1396      044D4F56 
 1396      450000BF 
 1397 2338 4FF00400 		MOV T0,#4 
 1398 233c 06F10306 		ADD TOS,#3 
 1399 2340 26F00306 		BIC TOS,#3
 1400 2344 57F8041B 		LDR	T1,[DSP],#4 // dest
 1401 2348 57F8042B 		LDR	T2,[DSP],#4 // src 
 1402 234c 8A42     		CMP T2,T1 
 1403 234e 08D5     		BPL MOVE1
 1404 2350 6FF00300 		MOV T0,#-4 
 1405 2354 3144     		ADD T1,TOS
 1406 2356 3244     		ADD T2,TOS 
 1407 2358 01E0     		B MOVE3
 1408              	MOVE0:
 1409 235a 1568     		LDR	WP,[T2]
 1410 235c 0D60     		STR	WP,[T1]
 1411              	MOVE3: 
 1412 235e 0144     		ADD T1,T0 
 1413 2360 0244     		ADD T2,T0 
 1414              	MOVE1:
 1415 2362 3600     		MOVS TOS,TOS
 1416 2364 02D0     		BEQ	MOVE2
 1417 2366 A6F10406 		SUB	TOS,TOS,#4
 1418 236a F6E7     		B MOVE0
 1419              	MOVE2:
 1420 236c 57F8046B 		_POP
 1421 2370 FFF78CBA 		_NEXT
 1422              	
 1423              	/**************************
 1424              	    FILL	( b u c -- )
 1425              	 	Fill u bytes of character
 1426              		c to area beginning at b.
 1427              	******************************/
 1428 2374 30230000 		_HEADER FILL,4,"FILL"
 1428      0446494C 
 1428      4C0000BF 
 1429 2380 03CF     		LDMFD DSP!,{T0,T1} 
 1430 2382 0000     		MOVS T0,T0 
 1431 2384 03D0     		BEQ FILL2
 1432              	FILL1:
 1433 2386 01F8016B 		STRB	TOS,[T1],#1
 1434 238a 0138     		SUBS	T0,T0,#1
 1435 238c FBD1     		BNE FILL1
 1436              	FILL2:
 1437 238e 57F8046B 		_POP
 1438 2392 FFF77BBA 		_NEXT
 1439              	
 1440              	/*****************************
 1441              	    PACK$	( b u a -- a )
 1442              	 	Build a counted word with
 1443              		u characters from b. 
 1444              		Null fill.
ARM GAS  forth.s 			page 98


 1445              	*****************************/
 1446 2396 78230000 		_HEADER PACKS,5,"PACK$"
 1446      05504143 
 1446      4B24
 1447 23a0 504700BF 		_NEST
 1448 23a4 E5210000 		_ADR	ALGND
 1449 23a8 3D1B0000 		_ADR	DUPP
 1450 23ac E51A0000 		_ADR	TOR			// strings only on cell boundary
 1451 23b0 611B0000 		_ADR	OVER
 1452 23b4 011C0000 		_ADR	PLUS
 1453 23b8 5D1C0000 		_ADR	ONEP
 1454 23bc 0B1A0000 		_DOLIT 	0xFFFFFFFC
 1454      FCFFFFFF 
 1455 23c4 811B0000 		_ADR	ANDD			// count mod cell
 1456 23c8 0B1A0000 		_DOLIT 	0
 1456      00000000 
 1457 23d0 4D1B0000 		_ADR	SWAP
 1458 23d4 7D1A0000 		_ADR	STORE			// null fill cell
 1459 23d8 D11A0000 		_ADR	RAT
 1460 23dc 751D0000 		_ADR	DDUP
 1461 23e0 9D1A0000 		_ADR	CSTOR
 1462 23e4 5D1C0000 		_ADR	ONEP			// save count
 1463 23e8 4D1B0000 		_ADR	SWAP
 1464 23ec 09230000 		_ADR	CMOVE
 1465 23f0 BD1A0000 		_ADR	RFROM
 1466 23f4 93180000 		_UNNEST   			// move string
 1467              	
 1468              	/***********************************
 1469              	  Numeric output, single precision
 1470              	***********************************/
 1471              	
 1472              	/**************************
 1473              	    DIGIT	( u -- c )
 1474              	 	Convert digit u to 
 1475              		a character.
 1476              	***************************/
 1477 23f8 9A230000 		_HEADER DIGIT,5,"DIGIT"
 1477      05444947 
 1477      495400BF 
 1478 2404 504700BF 		_NEST
 1479 2408 0B1A0000 		_DOLIT 9
 1479      09000000 
 1480 2410 611B0000 		_ADR	OVER
 1481 2414 211E0000 		_ADR	LESS
 1482 2418 0B1A0000 		_DOLIT	7
 1482      07000000 
 1483 2420 811B0000 		_ADR	ANDD
 1484 2424 011C0000 		_ADR	PLUS
 1485 2428 0B1A0000 		_DOLIT	'0'
 1485      30000000 
 1486 2430 011C0000 		_ADR	PLUS 
 1487 2434 93180000 		_UNNEST
 1488              	
 1489              	/*********************************
 1490              	    EXTRACT	( n base -- n c )
 1491              	 	Extract the least significant
 1492              		digit from n.
ARM GAS  forth.s 			page 99


 1493              	**********************************/
 1494 2438 FC230000 		_HEADER EXTRC,7,"EXTRACT"
 1494      07455854 
 1494      52414354 
 1495 2444 504700BF 		_NEST
 1496 2448 0B1A0000 		_DOLIT 0
 1496      00000000 
 1497 2450 4D1B0000 		_ADR	SWAP
 1498 2454 99200000 		_ADR	UMMOD
 1499 2458 4D1B0000 		_ADR	SWAP
 1500 245c 05240000 		_ADR	DIGIT
 1501 2460 93180000 		_UNNEST
 1502              	
 1503              	/***************************
 1504              	    <#	  ( -- )
 1505              	 	Initiate the numeric
 1506              		output process.
 1507              	****************************/
 1508 2464 3C240000 		_HEADER BDIGS,2,"<#"
 1508      023C2300 
 1509 246c 504700BF 		_NEST
 1510 2470 B1220000 		_ADR	PAD
 1511 2474 C91F0000 		_ADR	HLD
 1512 2478 7D1A0000 		_ADR	STORE
 1513 247c 93180000 		_UNNEST
 1514              	
 1515              	/*********************************
 1516              	    HOLD	( c -- )
 1517              	 	Insert a character into the 
 1518              		numeric output string.
 1519              	**********************************/
 1520 2480 68240000 		_HEADER HOLD,4,"HOLD"
 1520      04484F4C 
 1520      440000BF 
 1521 248c 504700BF 		_NEST
 1522 2490 C91F0000 		_ADR	HLD
 1523 2494 911A0000 		_ADR	AT
 1524 2498 6D1C0000 		_ADR	ONEM
 1525 249c 3D1B0000 		_ADR	DUPP
 1526 24a0 C91F0000 		_ADR	HLD
 1527 24a4 7D1A0000 		_ADR	STORE
 1528 24a8 9D1A0000 		_ADR	CSTOR
 1529 24ac 93180000 		_UNNEST
 1530              	
 1531              	/***********************
 1532              	    #	   ( u -- u )
 1533              	 	Extract one digit 
 1534              		from u and append 
 1535              		the digit to output 
 1536              		string.
 1537              	*************************/
 1538 24b0 84240000 		_HEADER DIG,1,"#"
 1538      012300BF 
 1539 24b8 504700BF 		_NEST
 1540 24bc 591F0000 		_ADR	BASE
 1541 24c0 911A0000 		_ADR	AT
 1542 24c4 45240000 		_ADR	EXTRC
ARM GAS  forth.s 			page 100


 1543 24c8 8D240000 		_ADR	HOLD
 1544 24cc 93180000 		_UNNEST
 1545              	
 1546              	/***************************
 1547              	    #S	  ( u -- 0 )
 1548              	 	Convert u until all 
 1549              		digits are added to 
 1550              		the output string.
 1551              	***************************/
 1552 24d0 B4240000 		_HEADER DIGS,2,"#S"
 1552      02235300 
 1553 24d8 504700BF 		_NEST
 1554              	DIGS1:
 1555 24dc B9240000 	    _ADR	DIG
 1556 24e0 3D1B0000 		_ADR	DUPP
 1557 24e4 4B1A0000 		_QBRAN 	DIGS2
 1557      F4240000 
 1558 24ec 5F1A0000 		_BRAN	DIGS1
 1558      DC240000 
 1559              	DIGS2:
 1560 24f4 93180000 		  _UNNEST
 1561              	
 1562              	/*********************
 1563              	    SIGN	( n -- )
 1564              	 	Add a minus sign
 1565              		to the numeric
 1566              		output string.
 1567              	*********************/
 1568 24f8 D4240000 		_HEADER SIGN,4,"SIGN"
 1568      04534947 
 1568      4E0000BF 
 1569 2504 504700BF 		_NEST
 1570 2508 711B0000 		_ADR	ZLESS
 1571 250c 4B1A0000 		_QBRAN	SIGN1
 1571      20250000 
 1572 2514 0B1A0000 		_DOLIT '-'
 1572      2D000000 
 1573 251c 8D240000 		_ADR	HOLD
 1574              	SIGN1:
 1575 2520 93180000 		  _UNNEST
 1576              	
 1577              	/*************************
 1578              	    #>  ( w -- b u )
 1579              	 	Prepare the output 
 1580              		word to be TYPE'd.
 1581              	************************/
 1582 2524 FC240000 		_HEADER EDIGS,2,"#>"
 1582      02233E00 
 1583 252c 504700BF 		_NEST
 1584 2530 2D1B0000 		_ADR	DROP
 1585 2534 C91F0000 		_ADR	HLD
 1586 2538 911A0000 		_ADR	AT
 1587 253c B1220000 		_ADR	PAD
 1588 2540 611B0000 		_ADR	OVER
 1589 2544 111C0000 		_ADR	SUBB
 1590 2548 93180000 		_UNNEST
 1591              	
ARM GAS  forth.s 			page 101


 1592              	/**************************
 1593              	    str	 ( n -- b u )
 1594              	 	Convert a signed 
 1595              		integer to a numeric 
 1596              		string.
 1597              	hidden word used by compiler
 1598              	***************************/
 1599              	STRR:
 1600 254c 504700BF 		_NEST
 1601 2550 3D1B0000 		_ADR	DUPP
 1602 2554 E51A0000 		_ADR	TOR
 1603 2558 C91D0000 		_ADR	ABSS
 1604 255c 6D240000 		_ADR	BDIGS
 1605 2560 D9240000 		_ADR	DIGS
 1606 2564 BD1A0000 		_ADR	RFROM
 1607 2568 05250000 		_ADR	SIGN
 1608 256c 2D250000 		_ADR	EDIGS
 1609 2570 93180000 		_UNNEST
 1610              	
 1611              	/*************************
 1612              	    HEX	 ( -- )
 1613              	 	Use radix 16 as 
 1614              		base for numeric 
 1615              		conversions.
 1616              	*************************/
 1617 2574 28250000 		_HEADER HEX,3,"HEX"
 1617      03484558 
 1618 257c 504700BF 		_NEST
 1619 2580 0B1A0000 		_DOLIT 16
 1619      10000000 
 1620 2588 591F0000 		_ADR	BASE
 1621 258c 7D1A0000 		_ADR	STORE
 1622 2590 93180000 		_UNNEST
 1623              	
 1624              	/************************
 1625              	    DECIMAL	( -- )
 1626              	 	Use radix 10 as base
 1627              		for numeric conversions.
 1628              	*************************/
 1629 2594 78250000 		_HEADER DECIM,7,"DECIMAL"
 1629      07444543 
 1629      494D414C 
 1630 25a0 504700BF 		_NEST
 1631 25a4 0B1A0000 		_DOLIT 10
 1631      0A000000 
 1632 25ac 591F0000 		_ADR	BASE
 1633 25b0 7D1A0000 		_ADR	STORE
 1634 25b4 93180000 		_UNNEST
 1635              	
 1636              	/************************************
 1637              	  Numeric input, single precision
 1638              	***********************************/
 1639              	
 1640              	/***********************************
 1641              	    DIGIT?	( c base -- u t )
 1642              	 	Convert a character to its 
 1643              		numeric value. A flag 
ARM GAS  forth.s 			page 102


 1644              		indicates success.
 1645              	**********************************/
 1646 25b8 98250000 		_HEADER DIGTQ,6,"DIGIT?"
 1646      06444947 
 1646      49543F00 
 1647 25c4 504700BF 		_NEST
 1648 25c8 E51A0000 		_ADR	TOR
 1649 25cc 0B1A0000 		_DOLIT 	'0'
 1649      30000000 
 1650 25d4 111C0000 		_ADR	SUBB
 1651 25d8 0B1A0000 		_DOLIT 9
 1651      09000000 
 1652 25e0 611B0000 		_ADR	OVER
 1653 25e4 211E0000 		_ADR	LESS
 1654 25e8 4B1A0000 		_QBRAN	DGTQ1
 1654      10260000 
 1655 25f0 0B1A0000 		_DOLIT 7
 1655      07000000 
 1656 25f8 111C0000 		_ADR	SUBB
 1657 25fc 3D1B0000 		_ADR	DUPP
 1658 2600 0B1A0000 		_DOLIT	10
 1658      0A000000 
 1659 2608 211E0000 		_ADR	LESS
 1660 260c 951B0000 		_ADR	ORR
 1661              	DGTQ1:
 1662 2610 3D1B0000 		_ADR	DUPP
 1663 2614 BD1A0000 		_ADR	RFROM
 1664 2618 091E0000 		_ADR	ULESS
 1665 261c 93180000 		_UNNEST
 1666              	
 1667              	/**********************************
 1668              	    NUMBER?	( a -- n T | a F )
 1669              	 	Convert a number word to 
 1670              		integer. Push a flag on tos.
 1671              	**********************************/
 1672 2620 BC250000 		_HEADER NUMBQ,7,"NUMBER?"
 1672      074E554D 
 1672      4245523F 
 1673 262c 504700BF 		_NEST
 1674 2630 591F0000 		_ADR	BASE
 1675 2634 911A0000 		_ADR	AT
 1676 2638 E51A0000 		_ADR	TOR
 1677 263c 0B1A0000 		_DOLIT	0
 1677      00000000 
 1678 2644 611B0000 		_ADR	OVER
 1679 2648 C11E0000 		_ADR	COUNT
 1680 264c 611B0000 		_ADR	OVER
 1681 2650 B11A0000 		_ADR	CAT
 1682 2654 0B1A0000 		_DOLIT '$'
 1682      24000000 
 1683 265c F11D0000 		_ADR	EQUAL
 1684 2660 4B1A0000 		_QBRAN	NUMQ1
 1684      7C260000 
 1685 2668 7D250000 		_ADR	HEX
 1686 266c 4D1B0000 		_ADR	SWAP
 1687 2670 5D1C0000 		_ADR	ONEP
 1688 2674 4D1B0000 		_ADR	SWAP
ARM GAS  forth.s 			page 103


 1689 2678 6D1C0000 		_ADR	ONEM
 1690              	NUMQ1:
 1691 267c 611B0000 		_ADR	OVER
 1692 2680 B11A0000 		_ADR	CAT
 1693 2684 0B1A0000 		_DOLIT	'-'
 1693      2D000000 
 1694 268c F11D0000 		_ADR	EQUAL
 1695 2690 E51A0000 		_ADR	TOR
 1696 2694 4D1B0000 		_ADR	SWAP
 1697 2698 D11A0000 		_ADR	RAT
 1698 269c 111C0000 		_ADR	SUBB
 1699 26a0 4D1B0000 		_ADR	SWAP
 1700 26a4 D11A0000 		_ADR	RAT
 1701 26a8 011C0000 		_ADR	PLUS
 1702 26ac 111D0000 		_ADR	QDUP
 1703 26b0 4B1A0000 		_QBRAN	NUMQ6
 1703      44270000 
 1704 26b8 6D1C0000 		_ADR	ONEM
 1705 26bc E51A0000 		_ADR	TOR
 1706              	NUMQ2:
 1707 26c0 3D1B0000 		_ADR	DUPP
 1708 26c4 E51A0000 		_ADR	TOR
 1709 26c8 B11A0000 		_ADR	CAT
 1710 26cc 591F0000 		_ADR	BASE
 1711 26d0 911A0000 		_ADR	AT
 1712 26d4 C5250000 		_ADR	DIGTQ
 1713 26d8 4B1A0000 		_QBRAN	NUMQ4
 1713      28270000 
 1714 26e0 4D1B0000 		_ADR	SWAP
 1715 26e4 591F0000 		_ADR	BASE
 1716 26e8 911A0000 		_ADR	AT
 1717 26ec 211C0000 		_ADR	STAR
 1718 26f0 011C0000 		_ADR	PLUS
 1719 26f4 BD1A0000 		_ADR	RFROM
 1720 26f8 5D1C0000 		_ADR	ONEP
 1721 26fc 2D1A0000 		_DONXT	NUMQ2
 1721      C0260000 
 1722 2704 D11A0000 		_ADR	RAT
 1723 2708 4D1B0000 		_ADR	SWAP
 1724 270c 2D1B0000 		_ADR	DROP
 1725 2710 4B1A0000 		_QBRAN	NUMQ3
 1725      1C270000 
 1726 2718 B91D0000 		_ADR	NEGAT
 1727              	NUMQ3:
 1728 271c 4D1B0000 		_ADR	SWAP
 1729 2720 5F1A0000 		_BRAN	NUMQ5
 1729      40270000 
 1730              	NUMQ4:
 1731 2728 BD1A0000 		_ADR	RFROM
 1732 272c BD1A0000 		_ADR	RFROM
 1733 2730 4D1D0000 		_ADR	DDROP
 1734 2734 4D1D0000 		_ADR	DDROP
 1735 2738 0B1A0000 		_DOLIT	0
 1735      00000000 
 1736              	NUMQ5:
 1737 2740 3D1B0000 		_ADR	DUPP
 1738              	NUMQ6:
ARM GAS  forth.s 			page 104


 1739 2744 BD1A0000 		_ADR	RFROM
 1740 2748 4D1D0000 		_ADR	DDROP
 1741 274c BD1A0000 		_ADR	RFROM
 1742 2750 591F0000 		_ADR	BASE
 1743 2754 7D1A0000 		_ADR	STORE
 1744 2758 93180000 		_UNNEST
 1745              	
 1746              	/********************
 1747              	  console I/O
 1748              	********************/
 1749              	
 1750              	/**********************
 1751              	    SPACE	( -- )
 1752              	 	Send the blank 
 1753              		character to 
 1754              		the output device.
 1755              	************************/
 1756 275c 24260000 		_HEADER SPACE,5,"SPACE"
 1756      05535041 
 1756      434500BF 
 1757 2768 504700BF 		_NEST
 1758 276c BD1C0000 		_ADR	BLANK
 1759 2770 15190000 		_ADR	EMIT
 1760 2774 93180000 		_UNNEST
 1761              	
 1762              	/***************************
 1763              	    SPACES	( +n -- )
 1764              	 	Send n spaces to the 
 1765              		output device.
 1766              	****************************/
 1767 2778 60270000 		_HEADER SPACS,6,"SPACES"
 1767      06535041 
 1767      43455300 
 1768 2784 504700BF 		_NEST
 1769 2788 0B1A0000 		_DOLIT	0
 1769      00000000 
 1770 2790 511E0000 		_ADR	MAX
 1771 2794 E51A0000 		_ADR	TOR
 1772 2798 5F1A0000 		_BRAN	CHAR2
 1772      A4270000 
 1773              	CHAR1:
 1774 27a0 69270000 		_ADR	SPACE
 1775              	CHAR2:
 1776 27a4 2D1A0000 		_DONXT	CHAR1
 1776      A0270000 
 1777 27ac 93180000 		_UNNEST
 1778              	
 1779              	/***********************
 1780              	    TYPE	( b u -- )
 1781              	 	Output u characters 
 1782              		from b.
 1783              	************************/
 1784 27b0 7C270000 		_HEADER TYPEE,4,"TYPE"
 1784      04545950 
 1784      450000BF 
 1785 27bc 504700BF 		_NEST
 1786 27c0 E51A0000 		_ADR  TOR   // ( a+1 -- R: u )
ARM GAS  forth.s 			page 105


 1787 27c4 5F1A0000 		_BRAN	TYPE2
 1787      D8270000 
 1788              	TYPE1:  
 1789 27cc C11E0000 		_ADR  COUNT
 1790 27d0 01220000 		_ADR TCHAR
 1791 27d4 15190000 		_ADR EMIT
 1792              	TYPE2:  
 1793 27d8 2D1A0000 		_DONXT	TYPE1
 1793      CC270000 
 1794 27e0 2D1B0000 		_ADR	DROP
 1795 27e4 93180000 		_UNNEST
 1796              	
 1797              	/***************************
 1798              	    CR	  ( -- )
 1799              	 	Output a carriage return
 1800              		and a line feed.
 1801              	****************************/
 1802 27e8 B4270000 		_HEADER CR,2,"CR"
 1802      02435200 
 1803 27f0 504700BF 		_NEST
 1804 27f4 0B1A0000 		_DOLIT	CRR
 1804      0D000000 
 1805 27fc 15190000 		_ADR	EMIT
 1806 2800 0B1A0000 		_DOLIT	LF
 1806      0A000000 
 1807 2808 15190000 		_ADR	EMIT
 1808 280c 93180000 		_UNNEST
 1809              	
 1810              	/******************************************
 1811              	  do_$	( -- a )
 1812              	  Return the address of a compiled string.
 1813              	  adjust return address to skip over it.
 1814              	hidden word used by compiler. 
 1815              	******************************************/
 1816              	DOSTR:
 1817 2810 504700BF 		_NEST     
 1818              	/* compiled string address is 2 levels deep */
 1819 2814 BD1A0000 		_ADR	RFROM	// { -- a1 }
 1820 2818 BD1A0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1821 281c 3D1B0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1822 2820 C11E0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1823 2824 011C0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1824 2828 E5210000 		_ADR	ALGND	//  end of string
 1825              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1826 282c E51A0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1827 2830 4D1B0000 		_ADR	SWAP	//  count tugged
 1828 2834 E51A0000 		_ADR	TOR     //  ( -- a2) is string address
 1829 2838 93180000 		_UNNEST
 1830              	
 1831              	/******************************************
 1832              	    $"|	( -- a )
 1833              	 	Run time routine compiled by _". 
 1834              		Return address of a compiled string.
 1835              	hidden word used by compiler
 1836              	*****************************************/
 1837              	STRQP:
 1838 283c 504700BF 		_NEST
ARM GAS  forth.s 			page 106


 1839 2840 11280000 		_ADR	DOSTR
 1840 2844 93180000 		_UNNEST			// force a call to dostr
 1841              	
 1842              	/*******************************
 1843              	    .$	( a -- )
 1844              	 	Run time routine of ." 
 1845              		Output a compiled string.
 1846              	hidden word used by compiler
 1847              	*******************************/
 1848              	DOTST:
 1849 2848 504700BF 		_NEST
 1850 284c C11E0000 		_ADR	COUNT // ( -- a+1 c )
 1851 2850 BD270000 		_ADR	TYPEE
 1852 2854 93180000 		_UNNEST
 1853              	
 1854              	/**********************
 1855              	    ."|	( -- )
 1856              	 	Run time routine of ." 
 1857              		Output a compiled string.
 1858              	hidden word used by compiler
 1859              	*****************************/
 1860              	DOTQP:
 1861 2858 504700BF 		_NEST
 1862 285c 11280000 		_ADR	DOSTR
 1863 2860 49280000 		_ADR	DOTST
 1864 2864 93180000 		_UNNEST
 1865              	
 1866              	/******************************
 1867              	    .R	  ( n +n -- )
 1868              	 	Display an integer in a 
 1869              		field of n columns, 
 1870              		right justified.
 1871              	*******************************/
 1872 2868 EC270000 		_HEADER DOTR,2,".R"
 1872      022E5200 
 1873 2870 504700BF 		_NEST
 1874 2874 E51A0000 		_ADR	TOR
 1875 2878 4D250000 		_ADR	STRR
 1876 287c BD1A0000 		_ADR	RFROM
 1877 2880 611B0000 		_ADR	OVER
 1878 2884 111C0000 		_ADR	SUBB
 1879 2888 85270000 		_ADR	SPACS
 1880 288c BD270000 		_ADR	TYPEE
 1881 2890 93180000 		_UNNEST
 1882              	
 1883              	/*************************
 1884              	    U.R	 ( u +n -- )
 1885              	 	Display an unsigned 
 1886              		integer in n column, 
 1887              		right justified.
 1888              	***************************/
 1889 2894 6C280000 		_HEADER UDOTR,3,"U.R"
 1889      03552E52 
 1890 289c 504700BF 		_NEST
 1891 28a0 E51A0000 		_ADR	TOR
 1892 28a4 6D240000 		_ADR	BDIGS
 1893 28a8 D9240000 		_ADR	DIGS
ARM GAS  forth.s 			page 107


 1894 28ac 2D250000 		_ADR	EDIGS
 1895 28b0 BD1A0000 		_ADR	RFROM
 1896 28b4 611B0000 		_ADR	OVER
 1897 28b8 111C0000 		_ADR	SUBB
 1898 28bc 85270000 		_ADR	SPACS
 1899 28c0 BD270000 		_ADR	TYPEE
 1900 28c4 93180000 		_UNNEST
 1901              	
 1902              	/************************
 1903              	    U.	  ( u -- )
 1904              	 	Display an unsigned 
 1905              		integer in free format.
 1906              	***************************/
 1907 28c8 98280000 		_HEADER UDOT,2,"U."
 1907      02552E00 
 1908 28d0 504700BF 		_NEST
 1909 28d4 6D240000 		_ADR	BDIGS
 1910 28d8 D9240000 		_ADR	DIGS
 1911 28dc 2D250000 		_ADR	EDIGS
 1912 28e0 69270000 		_ADR	SPACE
 1913 28e4 BD270000 		_ADR	TYPEE
 1914 28e8 93180000 		_UNNEST
 1915              	
 1916              	/************************
 1917              	    .	   ( w -- )
 1918              	 	Display an integer 
 1919              		in free format, 
 1920              		preceeded by a space.
 1921              	**************************/
 1922 28ec CC280000 		_HEADER DOT,1,"."
 1922      012E00BF 
 1923 28f4 504700BF 		_NEST
 1924 28f8 591F0000 		_ADR	BASE
 1925 28fc 911A0000 		_ADR	AT
 1926 2900 0B1A0000 		_DOLIT 10
 1926      0A000000 
 1927 2908 A91B0000 		_ADR	XORR			// ?decimal
 1928 290c 4B1A0000 		_QBRAN	DOT1
 1928      1C290000 
 1929 2914 D1280000 		_ADR	UDOT
 1930 2918 93180000 		_UNNEST			// no,display unsigned
 1931              	DOT1:
 1932 291c 4D250000 	    _ADR	STRR
 1933 2920 69270000 		_ADR	SPACE
 1934 2924 BD270000 		_ADR	TYPEE
 1935 2928 93180000 		_UNNEST			// yes, display signed
 1936              	
 1937              	/***********************
 1938              	    ?	   ( a -- )
 1939              	 	Display the contents
 1940              		in a memory cell.
 1941              	*************************/
 1942 292c F0280000 		_HEADER QUEST,1,"?"
 1942      013F00BF 
 1943 2934 504700BF 		_NEST
 1944 2938 911A0000 		_ADR	AT
 1945 293c F5280000 		_ADR	DOT
ARM GAS  forth.s 			page 108


 1946 2940 93180000 		_UNNEST
 1947              	
 1948              	/**************
 1949              	  Parsing
 1950              	***************/
 1951              	
 1952              	/*********************************************
 1953              	    parse	( b u c -- b u delta //  string> )
 1954              	 	Scan word delimited by c. 
 1955              		Return found string and its offset.
 1956              	hidden word used by PARSE
 1957              	**********************************************/
 1958              	PARS:
 1959 2944 504700BF 		_NEST
 1960 2948 631F0000 		_ADR	TEMP
 1961 294c 7D1A0000 		_ADR	STORE
 1962 2950 611B0000 		_ADR	OVER
 1963 2954 E51A0000 		_ADR	TOR
 1964 2958 3D1B0000 		_ADR	DUPP
 1965 295c 4B1A0000 		_QBRAN	PARS8
 1965      582A0000 
 1966 2964 6D1C0000 		_ADR	ONEM
 1967 2968 631F0000 		_ADR	TEMP
 1968 296c 911A0000 		_ADR	AT
 1969 2970 BD1C0000 		_ADR	BLANK
 1970 2974 F11D0000 		_ADR	EQUAL
 1971 2978 4B1A0000 		_QBRAN	PARS3
 1971      CC290000 
 1972 2980 E51A0000 		_ADR	TOR
 1973              	PARS1:
 1974 2984 BD1C0000 		_ADR	BLANK
 1975 2988 611B0000 		_ADR	OVER
 1976 298c B11A0000 		_ADR	CAT			// skip leading blanks 
 1977 2990 111C0000 		_ADR	SUBB
 1978 2994 711B0000 		_ADR	ZLESS
 1979 2998 A51D0000 		_ADR	INVER
 1980 299c 4B1A0000 		_QBRAN	PARS2
 1980      C8290000 
 1981 29a4 5D1C0000 		_ADR	ONEP
 1982 29a8 2D1A0000 		_DONXT	PARS1
 1982      84290000 
 1983 29b0 BD1A0000 		_ADR	RFROM
 1984 29b4 2D1B0000 		_ADR	DROP
 1985 29b8 0B1A0000 		_DOLIT	0
 1985      00000000 
 1986 29c0 3D1B0000 		_ADR	DUPP
 1987 29c4 93180000 		_UNNEST
 1988              	PARS2:
 1989 29c8 BD1A0000 		_ADR	RFROM
 1990              	PARS3:
 1991 29cc 611B0000 		_ADR	OVER
 1992 29d0 4D1B0000 		_ADR	SWAP
 1993 29d4 E51A0000 		_ADR	TOR
 1994              	PARS4:
 1995 29d8 631F0000 		_ADR	TEMP
 1996 29dc 911A0000 		_ADR	AT
 1997 29e0 611B0000 		_ADR	OVER
ARM GAS  forth.s 			page 109


 1998 29e4 B11A0000 		_ADR	CAT
 1999 29e8 111C0000 		_ADR	SUBB			// scan for delimiter
 2000 29ec 631F0000 		_ADR	TEMP
 2001 29f0 911A0000 		_ADR	AT
 2002 29f4 BD1C0000 		_ADR	BLANK
 2003 29f8 F11D0000 		_ADR	EQUAL
 2004 29fc 4B1A0000 		_QBRAN	PARS5
 2004      082A0000 
 2005 2a04 711B0000 		_ADR	ZLESS
 2006              	PARS5:
 2007 2a08 4B1A0000 		_QBRAN	PARS6
 2007      2C2A0000 
 2008 2a10 5D1C0000 		_ADR	ONEP
 2009 2a14 2D1A0000 		_DONXT	PARS4
 2009      D8290000 
 2010 2a1c 3D1B0000 		_ADR	DUPP
 2011 2a20 E51A0000 		_ADR	TOR
 2012 2a24 5F1A0000 		_BRAN	PARS7
 2012      402A0000 
 2013              	PARS6:
 2014 2a2c BD1A0000 		_ADR	RFROM
 2015 2a30 2D1B0000 		_ADR	DROP
 2016 2a34 3D1B0000 		_ADR	DUPP
 2017 2a38 5D1C0000 		_ADR	ONEP
 2018 2a3c E51A0000 		_ADR	TOR
 2019              	PARS7:
 2020 2a40 611B0000 		_ADR	OVER
 2021 2a44 111C0000 		_ADR	SUBB
 2022 2a48 BD1A0000 		_ADR	RFROM
 2023 2a4c BD1A0000 		_ADR	RFROM
 2024 2a50 111C0000 		_ADR	SUBB
 2025 2a54 93180000 		_UNNEST
 2026              	PARS8:
 2027 2a58 611B0000 		_ADR	OVER
 2028 2a5c BD1A0000 		_ADR	RFROM
 2029 2a60 111C0000 		_ADR	SUBB
 2030 2a64 93180000 		_UNNEST
 2031              	
 2032              	/************************************
 2033              	    PARSE	( c -- b u //  string> )
 2034              	 	Scan input stream and return 
 2035              		counted string delimited by c.
 2036              	************************************/
 2037 2a68 30290000 		_HEADER PARSE,5,"PARSE"
 2037      05504152 
 2037      534500BF 
 2038 2a74 504700BF 		_NEST
 2039 2a78 E51A0000 		_ADR	TOR
 2040 2a7c D1220000 		_ADR	TIB
 2041 2a80 8D1F0000 		_ADR	INN
 2042 2a84 911A0000 		_ADR	AT
 2043 2a88 011C0000 		_ADR	PLUS			// current input buffer pointer
 2044 2a8c A11F0000 		_ADR	NTIB
 2045 2a90 911A0000 		_ADR	AT
 2046 2a94 8D1F0000 		_ADR	INN
 2047 2a98 911A0000 		_ADR	AT
 2048 2a9c 111C0000 		_ADR	SUBB			// remaining count
ARM GAS  forth.s 			page 110


 2049 2aa0 BD1A0000 		_ADR	RFROM
 2050 2aa4 45290000 		_ADR	PARS
 2051 2aa8 8D1F0000 		_ADR	INN
 2052 2aac 791E0000 		_ADR	PSTOR
 2053 2ab0 93180000 		_UNNEST
 2054              	
 2055              	/*******************************
 2056              	    .(	  ( -- )
 2057              	 	Output following string 
 2058              		up to next ) .
 2059              	******************************/
 2060 2ab4 6C2A0000 		_HEADER DOTPR,2,".("
 2060      022E2800 
 2061 2abc 504700BF 		_NEST
 2062 2ac0 0B1A0000 		_DOLIT	')'
 2062      29000000 
 2063 2ac8 752A0000 		_ADR	PARSE
 2064 2acc BD270000 		_ADR	TYPEE
 2065 2ad0 93180000 		_UNNEST
 2066              	
 2067              	/************************
 2068              	    (	   ( -- )
 2069              	 	Ignore following 
 2070              		string up to next )
 2071              		A comment.
 2072              	************************/
 2073 2ad4 B82A0000 		_HEADER PAREN,1,"("
 2073      012800BF 
 2074 2adc 504700BF 		_NEST
 2075 2ae0 0B1A0000 		_DOLIT	')'
 2075      29000000 
 2076 2ae8 752A0000 		_ADR	PARSE
 2077 2aec 4D1D0000 		_ADR	DDROP
 2078 2af0 93180000 		_UNNEST
 2079              	
 2080              	/*******************
 2081              	    \	   ( -- )
 2082              	 	Ignore following 
 2083              		text till the 
 2084              		end of line.
 2085              	********************/
 2086 2af4 D82A0000 		_HEADER BKSLA,1,"\\"
 2086      015C00BF 
 2087 2afc 504700BF 		_NEST
 2088 2b00 A11F0000 		_ADR	NTIB
 2089 2b04 911A0000 		_ADR	AT
 2090 2b08 8D1F0000 		_ADR	INN
 2091 2b0c 7D1A0000 		_ADR	STORE
 2092 2b10 93180000 		_UNNEST
 2093              	
 2094              	/******************************
 2095              	    CHAR	( -- c )
 2096              	 	Parse next word and
 2097              		return its first character.
 2098              	*******************************/
 2099 2b14 F82A0000 		_HEADER CHAR,4,"CHAR"
 2099      04434841 
ARM GAS  forth.s 			page 111


 2099      520000BF 
 2100 2b20 504700BF 		_NEST
 2101 2b24 BD1C0000 		_ADR	BLANK
 2102 2b28 752A0000 		_ADR	PARSE
 2103 2b2c 2D1B0000 		_ADR	DROP
 2104 2b30 B11A0000 		_ADR	CAT
 2105 2b34 93180000 		_UNNEST
 2106              	
 2107              	/**********************************
 2108              	    WORD	( c -- a //  string> )
 2109              	 	Parse a word from input stream
 2110              		and copy it to code dictionary.
 2111              	***********************************/
 2112 2b38 182B0000 		_HEADER WORDD,4,"WORD"
 2112      04574F52 
 2112      440000BF 
 2113 2b44 504700BF 		_NEST
 2114 2b48 752A0000 		_ADR	PARSE
 2115 2b4c 99220000 		_ADR	HERE
 2116 2b50 9D1C0000 		_ADR	CELLP
 2117 2b54 A1230000 		_ADR	PACKS
 2118 2b58 93180000 		_UNNEST
 2119              	
 2120              	/********************************
 2121              	    TOKEN	( -- a //  string> )
 2122              	 	Parse a word from input 
 2123              		stream and copy it to 
 2124              		name dictionary.
 2125              	*********************************/
 2126 2b5c 3C2B0000 		_HEADER TOKEN,5,"TOKEN"
 2126      05544F4B 
 2126      454E00BF 
 2127 2b68 504700BF 		_NEST
 2128 2b6c BD1C0000 		_ADR	BLANK
 2129 2b70 452B0000 		_ADR	WORDD
 2130 2b74 93180000 		_UNNEST
 2131              	
 2132              	/**********************
 2133              	  Dictionary search
 2134              	***********************/
 2135              	
 2136              	/*************************
 2137              	    NAME>	( na -- ca )
 2138              	 	Return a code address
 2139              		given a name address.
 2140              	**************************/
 2141 2b78 602B0000 		_HEADER NAMET,5,"NAME>"
 2141      054E414D 
 2141      453E00BF 
 2142 2b84 504700BF 		_NEST
 2143 2b88 C11E0000 		_ADR	COUNT
 2144 2b8c 0B1A0000 		_DOLIT	0x1F
 2144      1F000000 
 2145 2b94 811B0000 		_ADR	ANDD
 2146 2b98 011C0000 		_ADR	PLUS
 2147 2b9c E5210000 		_ADR	ALGND
 2148 2ba0 93180000 		_UNNEST
ARM GAS  forth.s 			page 112


 2149              	
 2150              	/***************************************
 2151              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2152              	 	Compare u bytes in two strings. 
 2153              		Return 0 if identical.
 2154              	
 2155              	  Picatout 2020-12-01, 
 2156              	    Because of problem with .align 
 2157              		directive that doesn't fill 
 2158              		with zero's I had to change 
 2159              		the "SAME?" and "FIND" 
 2160              	 	words  to do a byte by byte comparison. 
 2161              	****************************************/
 2162 2ba4 7C2B0000 		_HEADER SAMEQ,5,"SAME?"
 2162      0553414D 
 2162      453F00BF 
 2163 2bb0 504700BF 		_NEST
 2164 2bb4 E51A0000 		_ADR	TOR
 2165 2bb8 5F1A0000 		_BRAN	SAME2
 2165      FC2B0000 
 2166              	SAME1:
 2167 2bc0 611B0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2168 2bc4 D11A0000 		_ADR	RAT   // a1 a2 a1 u 
 2169 2bc8 011C0000 		_ADR	PLUS  // a1 a2 a1+u 
 2170 2bcc B11A0000 		_ADR	CAT	   // a1 a2 c1    		
 2171 2bd0 611B0000 		_ADR	OVER  // a1 a2 c1 a2 
 2172 2bd4 D11A0000 		_ADR	RAT    
 2173 2bd8 011C0000 		_ADR	PLUS    
 2174 2bdc B11A0000 		_ADR	CAT	  // a1 a2 c1 c2
 2175 2be0 111C0000 		_ADR	SUBB  
 2176 2be4 111D0000 		_ADR	QDUP
 2177 2be8 4B1A0000 		_QBRAN	SAME2
 2177      FC2B0000 
 2178 2bf0 BD1A0000 		_ADR	RFROM
 2179 2bf4 2D1B0000 		_ADR	DROP
 2180 2bf8 93180000 		_UNNEST	// strings not equal
 2181              	SAME2:
 2182 2bfc 2D1A0000 		_DONXT	SAME1
 2182      C02B0000 
 2183 2c04 0B1A0000 		_DOLIT	0
 2183      00000000 
 2184 2c0c 93180000 		_UNNEST	// strings equal
 2185              	
 2186              	/***********************************
 2187              	    FIND	( a na -- ca na | a F )
 2188              	 	Search a vocabulary for a string.
 2189              		Return ca and na if succeeded.
 2190              	hidden word used by NAME?
 2191              	
 2192              	  Picatout 2020-12-01,  
 2193              		 Modified from original. 
 2194              	   See comment for word "SAME?" 
 2195              	************************************/
 2196              	FIND:
 2197 2c10 504700BF 		_NEST
 2198 2c14 4D1B0000 		_ADR	SWAP			// na a	
 2199 2c18 C11E0000 		_ADR	COUNT			// na a+1 count
ARM GAS  forth.s 			page 113


 2200 2c1c 3D1B0000 		_ADR	DUPP 
 2201 2c20 631F0000 		_ADR	TEMP
 2202 2c24 7D1A0000 		_ADR	STORE			// na a+1 count 
 2203 2c28 E51A0000 		_ADR  TOR		// na a+1  R: count  
 2204 2c2c 4D1B0000 		_ADR	SWAP			// a+1 na
 2205              	FIND1:
 2206 2c30 3D1B0000 		_ADR	DUPP			// a+1 na na
 2207 2c34 4B1A0000 		_QBRAN	FIND6	// end of vocabulary
 2207      882C0000 
 2208 2c3c 3D1B0000 		_ADR	DUPP			// a+1 na na
 2209 2c40 B11A0000 		_ADR	CAT			// a+1 na name1
 2210 2c44 0B1A0000 		_DOLIT	MASKK
 2210      1FFFFFFF 
 2211 2c4c 811B0000 		_ADR	ANDD
 2212 2c50 D11A0000 		_ADR	RAT			// a+1 na name1 count 
 2213 2c54 A91B0000 		_ADR	XORR			// a+1 na,  same length?
 2214 2c58 4B1A0000 		_QBRAN	FIND2
 2214      702C0000 
 2215 2c60 AD1C0000 		_ADR	CELLM			// a+1 la
 2216 2c64 911A0000 		_ADR	AT			// a+1 next_na
 2217 2c68 5F1A0000 		_BRAN	FIND1			// try next word
 2217      302C0000 
 2218              	FIND2:   
 2219 2c70 5D1C0000 		_ADR	ONEP			// a+1 na+1
 2220 2c74 631F0000 		_ADR	TEMP
 2221 2c78 911A0000 		_ADR	AT			// a+1 na+1 count
 2222 2c7c B12B0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2223              	FIND3:	
 2224 2c80 5F1A0000 		_BRAN	FIND4
 2224      A02C0000 
 2225              	FIND6:	
 2226 2c88 BD1A0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2227 2c8c 2D1B0000 		_ADR	DROP			// a+1 0
 2228 2c90 4D1B0000 		_ADR	SWAP			// 0 a+1
 2229 2c94 6D1C0000 		_ADR	ONEM			// 0 a
 2230 2c98 4D1B0000 		_ADR	SWAP			// a 0 
 2231 2c9c 93180000 		_UNNEST			// return without a match
 2232              	FIND4:	
 2233 2ca0 4B1A0000 		_QBRAN	FIND5			// a+1 na+1
 2233      BC2C0000 
 2234 2ca8 6D1C0000 		_ADR	ONEM			// a+1 na
 2235 2cac AD1C0000 		_ADR	CELLM			// a+4 la
 2236 2cb0 911A0000 		_ADR	AT			// a+1 next_na
 2237 2cb4 5F1A0000 		_BRAN	FIND1			// compare next name
 2237      302C0000 
 2238              	FIND5:	
 2239 2cbc BD1A0000 		_ADR	RFROM			// a+1 na+1 count
 2240 2cc0 2D1B0000 		_ADR	DROP			// a+1 na+1
 2241 2cc4 4D1B0000 		_ADR	SWAP			// na+1 a+1
 2242 2cc8 2D1B0000 		_ADR	DROP			// na+1
 2243 2ccc 6D1C0000 		_ADR	ONEM			// na
 2244 2cd0 3D1B0000 		_ADR	DUPP			// na na
 2245 2cd4 852B0000 		_ADR	NAMET			// na ca
 2246 2cd8 4D1B0000 		_ADR	SWAP			// ca na
 2247 2cdc 93180000 		_UNNEST			//  return with a match
 2248              	
 2249              	/********************************
ARM GAS  forth.s 			page 114


 2250              	    NAME?	( a -- ca na | a F )
 2251              	 	Search all context vocabularies 
 2252              		for a string.
 2253              	***********************************/
 2254 2ce0 A82B0000 		_HEADER NAMEQ,5,"NAME?"
 2254      054E414D 
 2254      453F00BF 
 2255 2cec 504700BF 		_NEST
 2256 2cf0 E11F0000 		_ADR	CNTXT
 2257 2cf4 911A0000 		_ADR	AT
 2258 2cf8 112C0000 		_ADR	FIND
 2259 2cfc 93180000 		_UNNEST
 2260              	
 2261              	/********************
 2262              	  console input
 2263              	********************/
 2264              	
 2265              	/**************************************
 2266              	   BKSP  ( bot eot cur -- bot eot cur )
 2267              	   Move cursor left by one character.
 2268              	hidden word used by KTAP
 2269              	***************************************/
 2270              	BKSP:
 2271 2d00 504700BF 		_NEST
 2272 2d04 E51A0000 		_ADR	TOR
 2273 2d08 611B0000 		_ADR	OVER
 2274 2d0c BD1A0000 		_ADR	RFROM
 2275 2d10 4D1B0000 		_ADR	SWAP
 2276 2d14 611B0000 		_ADR	OVER
 2277 2d18 A91B0000 		_ADR	XORR
 2278 2d1c 4B1A0000 		_QBRAN	BACK1
 2278      482D0000 
 2279 2d24 0B1A0000 		_DOLIT	BKSPP
 2279      08000000 
 2280 2d2c 15190000 		_ADR	TECHO
 2281 2d30 6D1C0000 		_ADR	ONEM
 2282 2d34 BD1C0000 		_ADR	BLANK
 2283 2d38 15190000 		_ADR	TECHO
 2284 2d3c 0B1A0000 		_DOLIT	BKSPP
 2284      08000000 
 2285 2d44 15190000 		_ADR	TECHO
 2286              	BACK1:
 2287 2d48 93180000 		  _UNNEST
 2288              	
 2289              	/****************************************
 2290              	   TAP	 ( bot eot cur c -- bot eot cur )
 2291              	   Accept and echo the key stroke 
 2292              	   and bump the cursor.
 2293              	hidden word used by KTAP 
 2294              	****************************************/
 2295              	TAP:
 2296 2d4c 504700BF 		_NEST
 2297 2d50 3D1B0000 		_ADR	DUPP
 2298 2d54 15190000 		_ADR	TECHO
 2299 2d58 611B0000 		_ADR	OVER
 2300 2d5c 9D1A0000 		_ADR	CSTOR
 2301 2d60 5D1C0000 		_ADR	ONEP
ARM GAS  forth.s 			page 115


 2302 2d64 93180000 		_UNNEST
 2303              	
 2304              	/*******************************************
 2305              	    kTAP	( bot eot cur c -- bot eot cur )
 2306              	 	Process a key stroke, CR or backspace.
 2307              	hidden word used by ACCEPT 
 2308              	*******************************************/
 2309              	KTAP:
 2310              	TTAP:
 2311 2d68 504700BF 		_NEST
 2312 2d6c 3D1B0000 		_ADR	DUPP
 2313 2d70 0B1A0000 		_DOLIT	CRR
 2313      0D000000 
 2314 2d78 A91B0000 		_ADR	XORR
 2315 2d7c 4B1A0000 		_QBRAN  KTAP2
 2315      AC2D0000 
 2316 2d84 0B1A0000 		_DOLIT	BKSPP
 2316      08000000 
 2317 2d8c A91B0000 		_ADR	XORR
 2318 2d90 4B1A0000 		_QBRAN	KTAP1
 2318      A42D0000 
 2319 2d98 BD1C0000 		_ADR	BLANK
 2320 2d9c 4D2D0000 		_ADR	TAP
 2321 2da0 93180000 		_UNNEST
 2322              	//	.word	0			// patch
 2323              	KTAP1:
 2324 2da4 012D0000 		_ADR	BKSP
 2325 2da8 93180000 		_UNNEST
 2326              	KTAP2:
 2327 2dac 2D1B0000 		_ADR	DROP
 2328 2db0 4D1B0000 		_ADR	SWAP
 2329 2db4 2D1B0000 		_ADR	DROP
 2330 2db8 3D1B0000 		_ADR	DUPP
 2331 2dbc 93180000 		_UNNEST
 2332              	
 2333              	/************************************
 2334              	    ACCEPT	( b u -- b u )
 2335              	 	Accept characters to input 
 2336              		buffer. Return with actual count.
 2337              	*************************************/
 2338 2dc0 E42C0000 		_HEADER ACCEP,6,"ACCEPT"
 2338      06414343 
 2338      45505400 
 2339 2dcc 504700BF 		_NEST
 2340 2dd0 611B0000 		_ADR	OVER
 2341 2dd4 011C0000 		_ADR	PLUS
 2342 2dd8 611B0000 		_ADR	OVER
 2343              	ACCP1:
 2344 2ddc 751D0000 		_ADR	DDUP
 2345 2de0 A91B0000 		_ADR	XORR
 2346 2de4 4B1A0000 		_QBRAN	ACCP4
 2346      242E0000 
 2347 2dec F1180000 		_ADR	KEY
 2348 2df0 3D1B0000 		_ADR	DUPP
 2349 2df4 BD1C0000 		_ADR	BLANK
 2350 2df8 0B1A0000 		_DOLIT 127
 2350      7F000000 
ARM GAS  forth.s 			page 116


 2351 2e00 6D200000 		_ADR	WITHI
 2352 2e04 4B1A0000 		_QBRAN	ACCP2
 2352      182E0000 
 2353 2e0c 4D2D0000 		_ADR	TAP
 2354 2e10 5F1A0000 		_BRAN	ACCP3
 2354      1C2E0000 
 2355              	ACCP2:
 2356 2e18 692D0000 		_ADR	KTAP
 2357              	ACCP3:	  
 2358 2e1c 5F1A0000 		_BRAN	ACCP1
 2358      DC2D0000 
 2359              	ACCP4:
 2360 2e24 2D1B0000 		_ADR	DROP
 2361 2e28 611B0000 		_ADR	OVER
 2362 2e2c 111C0000 		_ADR	SUBB
 2363 2e30 93180000 		_UNNEST
 2364              	
 2365              	/*****************************
 2366              	    QUERY	( -- )
 2367              	 	Accept input stream 
 2368              		to terminal input buffer.
 2369              	******************************/
 2370 2e34 C42D0000 		_HEADER QUERY,5,"QUERY"
 2370      05515545 
 2370      525900BF 
 2371 2e40 504700BF 		_NEST
 2372 2e44 D1220000 		_ADR	TIB
 2373 2e48 0B1A0000 		_DOLIT 80
 2373      50000000 
 2374 2e50 CD2D0000 		_ADR	ACCEP
 2375 2e54 A11F0000 		_ADR	NTIB
 2376 2e58 7D1A0000 		_ADR	STORE
 2377 2e5c 2D1B0000 		_ADR	DROP
 2378 2e60 0B1A0000 		_DOLIT	0
 2378      00000000 
 2379 2e68 8D1F0000 		_ADR	INN
 2380 2e6c 7D1A0000 		_ADR	STORE
 2381 2e70 93180000 		_UNNEST
 2382              	
 2383              	/********************
 2384              	  Error handling
 2385              	********************/
 2386              	
 2387              	/*********************
 2388              	    ABORT	( a -- )
 2389              	 	Reset data stack 
 2390              		and jump to QUIT.
 2391              	**********************/
 2392 2e74 382E0000 		_HEADER ABORT,5,"ABORT"
 2392      0541424F 
 2392      525400BF 
 2393 2e80 504700BF 		_NEST
 2394              	ABORT1:
 2395 2e84 69270000 		_ADR	SPACE
 2396 2e88 C11E0000 		_ADR	COUNT
 2397 2e8c BD270000 		_ADR	TYPEE
 2398 2e90 0B1A0000 		_DOLIT	0X3F
ARM GAS  forth.s 			page 117


 2398      3F000000 
 2399 2e98 15190000 		_ADR	EMIT
 2400 2e9c F1270000 		_ADR	CR
 2401 2ea0 09300000 		_ADR	PRESE
 2402 2ea4 5F1A0000 		_BRAN	QUIT
 2402      28300000 
 2403              	
 2404              	/*******************************
 2405              	    _abort"	( f -- )
 2406              	 	Run time routine of ABORT"
 2407              		Abort with a message.
 2408              	hidden used by compiler 
 2409              	********************************/
 2410              	ABORQ:
 2411 2eac 504700BF 		_NEST
 2412 2eb0 11280000 		_ADR	DOSTR
 2413 2eb4 4D1B0000 		_ADR	SWAP 
 2414 2eb8 4B1A0000 		_QBRAN	1f	// text flag
 2414      C82E0000 
 2415 2ec0 5F1A0000 		_BRAN	ABORT1
 2415      842E0000 
 2416              	1:
 2417 2ec8 2D1B0000 		_ADR	DROP
 2418 2ecc 93180000 		_UNNEST			// drop error
 2419              	
 2420              	/************************
 2421              	  The text interpreter
 2422              	************************/
 2423              	
 2424              	/***************************
 2425              	    $INTERPRET  ( a -- )
 2426              	 	Interpret a word. 
 2427              		If failed, try to 
 2428              		convert it to an integer.
 2429              	******************************/
 2430 2ed0 782E0000 		_HEADER INTER,10,"$INTERPRET"
 2430      0A24494E 
 2430      54455250 
 2430      52455400 
 2431 2ee0 504700BF 		_NEST
 2432 2ee4 ED2C0000 		_ADR	NAMEQ
 2433 2ee8 111D0000 		_ADR	QDUP	// ?defined
 2434 2eec 4B1A0000 		_QBRAN	INTE1
 2434      202F0000 
 2435 2ef4 911A0000 		_ADR	AT
 2436 2ef8 0B1A0000 		_DOLIT	COMPO
 2436      40000000 
 2437 2f00 811B0000 		_ADR	ANDD	// ?compile only lexicon bits
 2438 2f04 AD2E0000 		_ABORQ	13," compile only"
 2438      0D20636F 
 2438      6D70696C 
 2438      65206F6E 
 2438      6C7900BF 
 2439 2f18 211A0000 		_ADR	EXECU
 2440 2f1c 93180000 		_UNNEST			// execute defined word
 2441              	INTE1:
 2442 2f20 2D260000 		_ADR	NUMBQ
ARM GAS  forth.s 			page 118


 2443 2f24 4B1A0000 		_QBRAN	INTE2
 2443      302F0000 
 2444 2f2c 93180000 		_UNNEST
 2445              	INTE2:
 2446 2f30 812E0000 		_ADR	ABORT	// error
 2447              	
 2448              	/******************************
 2449              	    [	   ( -- )
 2450              	 	Start the text interpreter.
 2451              	*******************************/
 2452 2f34 D42E0000 		_HEADER LBRAC,1,"["
 2452      015B00BF 
 2453 2f3c 504700BF 		_NEST
 2454 2f40 0B1A0000 		_DOLIT	INTER
 2454      E02E0000 
 2455 2f48 B51F0000 		_ADR	TEVAL
 2456 2f4c 7D1A0000 		_ADR	STORE
 2457 2f50 93180000 		_UNNEST
 2458              	
 2459              	/**********************
 2460              	    .OK	 ( -- )
 2461              	 	Display "ok" only 
 2462              		while interpreting.
 2463              	************************/
 2464 2f54 382F0000 		_HEADER DOTOK,3,".OK"
 2464      032E4F4B 
 2465 2f5c 504700BF 		_NEST
 2466 2f60 0B1A0000 		_DOLIT	INTER
 2466      E02E0000 
 2467 2f68 B51F0000 		_ADR	TEVAL
 2468 2f6c 911A0000 		_ADR	AT
 2469 2f70 F11D0000 		_ADR	EQUAL
 2470 2f74 4B1A0000 		_QBRAN	DOTO1
 2470      842F0000 
 2471 2f7c 59280000 		_DOTQP	3," ok"
 2471      03206F6B 
 2472              	DOTO1:
 2473 2f84 F1270000 		_ADR	CR
 2474 2f88 93180000 		_UNNEST
 2475              	
 2476              	/*************************
 2477              	    ?STACK	( -- )
 2478              	 	Abort if the data 
 2479              		stack underflows.
 2480              	************************/
 2481 2f8c 582F0000 		_HEADER QSTAC,6,"?STACK"
 2481      063F5354 
 2481      41434B00 
 2482 2f98 504700BF 		_NEST
 2483 2f9c 4D220000 		_ADR	DEPTH
 2484 2fa0 711B0000 		_ADR	ZLESS	// check only for underflow
 2485 2fa4 AD2E0000 		_ABORQ	9,"underflow"
 2485      09756E64 
 2485      6572666C 
 2485      6F7700BF 
 2486 2fb4 93180000 		_UNNEST
 2487              	
ARM GAS  forth.s 			page 119


 2488              	/*******************
 2489              	    EVAL	( -- )
 2490              	 	Interpret the 
 2491              		input stream.
 2492              	*******************/
 2493 2fb8 902F0000 		_HEADER EVAL,4,"EVAL"
 2493      04455641 
 2493      4C0000BF 
 2494 2fc4 504700BF 		_NEST
 2495              	EVAL1:
 2496 2fc8 692B0000 	    _ADR	TOKEN
 2497 2fcc 3D1B0000 		_ADR	DUPP
 2498 2fd0 B11A0000 		_ADR	CAT	// ?input stream empty
 2499 2fd4 4B1A0000 		_QBRAN	EVAL2
 2499      F02F0000 
 2500 2fdc B51F0000 		_ADR	TEVAL
 2501 2fe0 E9220000 		_ADR	ATEXE
 2502 2fe4 992F0000 		_ADR	QSTAC	// evaluate input, check stack
 2503 2fe8 5F1A0000 		_BRAN	EVAL1
 2503      C82F0000 
 2504              	EVAL2:
 2505 2ff0 2D1B0000 		_ADR	DROP
 2506 2ff4 5D2F0000 		_ADR	DOTOK
 2507 2ff8 93180000 		_UNNEST	// prompt
 2508              	
 2509              	/**********************************
 2510              	    PRESET	( -- )
 2511              	 	Reset data stack pointer 
 2512              		and the terminal input buffer.
 2513              	**********************************/
 2514 2ffc BC2F0000 		_HEADER PRESE,6,"PRESET"
 2514      06505245 
 2514      53455400 
 2515 3008 504700BF 		_NEST 
 2516 300c 0B1A0000 		_DOLIT SPP 
 2516      00FF0120 
 2517 3014 091B0000 		_ADR SPSTOR 
 2518 3018 93180000 		_UNNEST 
 2519              	
 2520              	/*********************
 2521              	    QUIT	( -- )
 2522              	 	Reset return stack 
 2523              		pointer and start 
 2524              		text interpreter.
 2525              	***********************/
 2526 301c 00300000 		_HEADER QUIT,4,"QUIT"
 2526      04515549 
 2526      540000BF 
 2527 3028 0B1A0000 		_DOLIT RPP 
 2527      80FF0120 
 2528 3030 F91A0000 		_ADR RPSTOR 
 2529              	QUIT1:
 2530 3034 3D2F0000 		_ADR	LBRAC			// start interpretation
 2531              	QUIT2:
 2532 3038 412E0000 		_ADR	QUERY			// get input
 2533 303c C52F0000 		_ADR	EVAL
 2534 3040 5F1A0000 		_BRAN	QUIT2	// continue till error
ARM GAS  forth.s 			page 120


 2534      38300000 
 2535              	
 2536              	/***************************
 2537              		FORGET ( <string> -- )
 2538              		forget all definition 
 2539              		starting at <string>
 2540              	****************************/
 2541 3048 20300000 		_HEADER FORGET,6,"FORGET"
 2541      06464F52 
 2541      47455400 
 2542 3054 504700BF 		_NEST 
 2543 3058 692B0000 		_ADR TOKEN 
 2544 305c 3D1B0000 		_ADR DUPP 
 2545 3060 4B1A0000 		_QBRAN 9f 
 2545      9C300000 
 2546 3068 ED2C0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2547 306c 111D0000 		_ADR QDUP 
 2548 3070 4B1A0000 		_QBRAN 8f
 2548      98300000 
 2549 3078 AD1C0000 		_ADR CELLM // ( ca la )
 2550 307c 3D1B0000 		_ADR DUPP 
 2551 3080 F51F0000 		_ADR CPP   
 2552 3084 7D1A0000 		_ADR STORE
 2553 3088 911A0000 		_ADR AT 
 2554 308c 1D200000 		_ADR LAST 
 2555 3090 7D1A0000 		_ADR STORE
 2556 3094 15350000 		_ADR OVERT 
 2557 3098 2D1B0000 	8:  _ADR DROP 
 2558 309c 93180000 	9:	_UNNEST 
 2559              	
 2560              		.p2align 2 
 2561              	
 2562              	/*****************
 2563              	  The compiler
 2564              	******************/
 2565              	
 2566              	/**************************************
 2567              	    '	   ( -- ca )
 2568              	 	Search context vocabularies 
 2569              		for the next word in input stream.
 2570              	***************************************/
 2571 30a0 4C300000 		_HEADER TICK,1,"'"
 2571      012700BF 
 2572 30a8 504700BF 		_NEST
 2573 30ac 692B0000 		_ADR	TOKEN
 2574 30b0 ED2C0000 		_ADR	NAMEQ	// ?defined
 2575 30b4 4B1A0000 		_QBRAN	TICK1
 2575      C0300000 
 2576 30bc 93180000 		_UNNEST	// yes, push code address
 2577              	TICK1:	
 2578 30c0 812E0000 		_ADR ABORT	// no, error
 2579              	
 2580              	/***********************
 2581              	    ALLOT	( n -- )
 2582              	 	Allocate n bytes to 
 2583              		the ram area.
 2584              	************************/
ARM GAS  forth.s 			page 121


 2585 30c4 A4300000 		_HEADER ALLOT,5,"ALLOT"
 2585      05414C4C 
 2585      4F5400BF 
 2586 30d0 504700BF 		_NEST
 2587 30d4 F51F0000 		_ADR	CPP
 2588 30d8 791E0000 		_ADR	PSTOR
 2589 30dc 93180000 		_UNNEST			// adjust code pointer
 2590              	
 2591              	/******************************
 2592              	    ,	   ( w -- )
 2593              	 	Compile an integer 
 2594              		into the code dictionary.
 2595              	******************************/
 2596 30e0 C8300000 		_HEADER COMMA,1,","
 2596      012C00BF 
 2597 30e8 504700BF 		_NEST
 2598 30ec 99220000 		_ADR	HERE
 2599 30f0 3D1B0000 		_ADR	DUPP
 2600 30f4 9D1C0000 		_ADR	CELLP	// cell boundary
 2601 30f8 F51F0000 		_ADR	CPP
 2602 30fc 7D1A0000 		_ADR	STORE
 2603 3100 7D1A0000 		_ADR	STORE
 2604 3104 93180000 		_UNNEST	// adjust code pointer, compile
 2605              		.p2align 2 
 2606              	
 2607              	/************************************
 2608              	    [COMPILE]   ( -- //  string> )
 2609              	 	Compile the next immediate word 
 2610              		into code dictionary.
 2611              	*************************************/
 2612 3108 E4300000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2612      895B434F 
 2612      4D50494C 
 2612      455D00BF 
 2613 3118 504700BF 		_NEST
 2614 311c A9300000 		_ADR	TICK
 2615 3120 E9300000 		_ADR	COMMA
 2616 3124 93180000 		_UNNEST
 2617              	
 2618              	/****************************
 2619              	    COMPILE	( -- )
 2620              	 	Compile the next address 
 2621              		in colon list to code 
 2622              		dictionary.
 2623              	*******************************/
 2624 3128 0C310000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2624      47434F4D 
 2624      50494C45 
 2625 3134 504700BF 		_NEST
 2626 3138 BD1A0000 		_ADR	RFROM
 2627 313c 3D1B0000 		_ADR	DUPP 
 2628 3140 911A0000 		_ADR	AT
 2629 3144 0B1A0000 		_DOLIT 1 
 2629      01000000 
 2630 314c 951B0000 		_ADR	ORR 
 2631 3150 E9300000 		_ADR	COMMA 
 2632 3154 9D1C0000 		_ADR	CELLP 
ARM GAS  forth.s 			page 122


 2633 3158 E51A0000 		_ADR	TOR 
 2634 315c 93180000 		_UNNEST	// adjust return address
 2635              	
 2636              	/*************************
 2637              	    LITERAL	( w -- )
 2638              	 	Compile tos to code 
 2639              		dictionary as an 
 2640              		integer literal.
 2641              	***************************/
 2642 3160 2C310000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2642      874C4954 
 2642      4552414C 
 2643 316c 504700BF 		_NEST
 2644 3170 0B1A0000 		_COMPI	DOLIT
 2644      0A1A0000 
 2644      71350000 
 2645 317c E9300000 		_ADR	COMMA
 2646 3180 93180000 		_UNNEST
 2647              	
 2648              	/********************
 2649              	    $,"	( -- )
 2650              	 	Compile a literal 
 2651              		string up to next " .
 2652              	hidden word 
 2653              	************************/
 2654              	STRCQ:
 2655 3184 504700BF 		_NEST
 2656 3188 0B1A0000 		_DOLIT -4
 2656      FCFFFFFF 
 2657 3190 F51F0000 		_ADR	CPP
 2658 3194 791E0000 		_ADR	PSTOR
 2659 3198 0B1A0000 		_DOLIT	'\"'
 2659      22000000 
 2660 31a0 452B0000 		_ADR	WORDD			// move word to code dictionary
 2661 31a4 C11E0000 		_ADR	COUNT
 2662 31a8 011C0000 		_ADR	PLUS
 2663 31ac E5210000 		_ADR	ALGND			// calculate aligned end of string
 2664 31b0 F51F0000 		_ADR	CPP
 2665 31b4 7D1A0000 		_ADR	STORE
 2666 31b8 93180000 		_UNNEST 			// adjust the code pointer
 2667              	
 2668              	/*******************
 2669              	//  Structures
 2670              	*******************/
 2671              	
 2672              	/*************************
 2673              	    FOR	 ( -- a )
 2674              	 	Start a FOR-NEXT loop 
 2675              		structure in a colon 
 2676              		definition.
 2677              	**************************/
 2678 31bc 64310000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2678      C3464F52 
 2679 31c4 504700BF 		_NEST
 2680 31c8 0B1A0000 		_COMPI	TOR
 2680      E41A0000 
 2680      71350000 
ARM GAS  forth.s 			page 123


 2681 31d4 99220000 		_ADR	HERE
 2682 31d8 93180000 		_UNNEST
 2683              	
 2684              	/**********************
 2685              	    BEGIN	( -- a )
 2686              	 	Start an infinite 
 2687              		or indefinite 
 2688              		loop structure.
 2689              	************************/
 2690 31dc C0310000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2690      C5424547 
 2690      494E00BF 
 2691 31e8 504700BF 		_NEST
 2692 31ec 99220000 		_ADR	HERE
 2693 31f0 93180000 		_UNNEST
 2694              		.p2align 2 
 2695              	
 2696              	/********************
 2697              	    NEXT	( a -- )
 2698              	 	Terminate a FOR-NEXT
 2699              		loop structure.
 2700              	**************************/
 2701 31f4 E0310000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2701      C44E4558 
 2701      540000BF 
 2702 3200 504700BF 		_NEST
 2703 3204 0B1A0000 		_COMPI	DONXT
 2703      2C1A0000 
 2703      71350000 
 2704 3210 E9300000 		_ADR	COMMA
 2705 3214 93180000 		_UNNEST
 2706              	
 2707              	/***************************
 2708              		I ( -- n )
 2709              		stack for loop counter 
 2710              	***************************/
 2711 3218 F8310000 		_HEADER I,1+COMPO,"I"
 2711      414900BF 
 2712 3220 47F8046D 		_PUSH 
 2713 3224 D8F80060 		ldr TOS,[RSP]
 2714 3228 FEF730BB 		_NEXT 
 2715              	
 2716              	/**********************
 2717              	    UNTIL	( a -- )
 2718              	 	Terminate a BEGIN-UNTIL
 2719              		indefinite loop structure.
 2720              	******************************/
 2721 322c 1C320000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2721      C5554E54 
 2721      494C00BF 
 2722 3238 504700BF 		_NEST
 2723 323c 0B1A0000 		_COMPI	QBRAN
 2723      4A1A0000 
 2723      71350000 
 2724 3248 E9300000 		_ADR	COMMA
 2725 324c 93180000 		_UNNEST
 2726              	
ARM GAS  forth.s 			page 124


 2727              	/**********************
 2728              	    AGAIN	( a -- )
 2729              	 	Terminate a BEGIN-AGAIN
 2730              		infinite loop structure.
 2731              	*****************************/
 2732 3250 30320000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2732      C5414741 
 2732      494E00BF 
 2733 325c 504700BF 		_NEST
 2734 3260 0B1A0000 		_COMPI	BRAN
 2734      5E1A0000 
 2734      71350000 
 2735 326c E9300000 		_ADR	COMMA
 2736 3270 93180000 		_UNNEST
 2737              	
 2738              	/************************
 2739              	    IF	  ( -- A )
 2740              	 	Begin a conditional
 2741              		branch structure.
 2742              	**************************/
 2743 3274 54320000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2743      C2494600 
 2744 327c 504700BF 		_NEST
 2745 3280 0B1A0000 		_COMPI	QBRAN
 2745      4A1A0000 
 2745      71350000 
 2746 328c 99220000 		_ADR	HERE
 2747 3290 0B1A0000 		_DOLIT	4
 2747      04000000 
 2748 3298 F51F0000 		_ADR	CPP
 2749 329c 791E0000 		_ADR	PSTOR
 2750 32a0 93180000 		_UNNEST
 2751              	
 2752              	/*************************
 2753              	    AHEAD	( -- A )
 2754              	 	Compile a forward 
 2755              		branch instruction.
 2756              	*************************/
 2757 32a4 78320000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2757      C5414845 
 2757      414400BF 
 2758 32b0 504700BF 		_NEST
 2759 32b4 0B1A0000 		_COMPI	BRAN
 2759      5E1A0000 
 2759      71350000 
 2760 32c0 99220000 		_ADR	HERE
 2761 32c4 0B1A0000 		_DOLIT	4
 2761      04000000 
 2762 32cc F51F0000 		_ADR	CPP
 2763 32d0 791E0000 		_ADR	PSTOR
 2764 32d4 93180000 		_UNNEST
 2765              	
 2766              	/**************************
 2767              	    REPEAT	( A a -- )
 2768              	 	Terminate a BEGIN-WHILE-REPEAT
 2769              		indefinite loop.
 2770              	**********************************/
ARM GAS  forth.s 			page 125


 2771 32d8 A8320000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2771      C6524550 
 2771      45415400 
 2772 32e4 504700BF 		_NEST
 2773 32e8 5D320000 		_ADR	AGAIN
 2774 32ec 99220000 		_ADR	HERE
 2775 32f0 4D1B0000 		_ADR	SWAP
 2776 32f4 7D1A0000 		_ADR	STORE
 2777 32f8 93180000 		_UNNEST
 2778              	
 2779              	/*********************
 2780              	    THEN	( A -- )
 2781              	 	Terminate a conditional
 2782              		branch structure.
 2783              	*****************************/
 2784 32fc DC320000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2784      C4544845 
 2784      4E0000BF 
 2785 3308 504700BF 		_NEST
 2786 330c 99220000 		_ADR	HERE
 2787 3310 4D1B0000 		_ADR	SWAP
 2788 3314 7D1A0000 		_ADR	STORE
 2789 3318 93180000 		_UNNEST
 2790              	
 2791              	/***************************
 2792              	    AFT	 ( a -- a A )
 2793              	 	Jump to THEN in a 
 2794              		FOR-AFT-THEN-NEXT loop 
 2795              		the first time through.
 2796              	*****************************/
 2797 331c 00330000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2797      C3414654 
 2798 3324 504700BF 		_NEST
 2799 3328 2D1B0000 		_ADR	DROP
 2800 332c B1320000 		_ADR	AHEAD
 2801 3330 E9310000 		_ADR	BEGIN
 2802 3334 4D1B0000 		_ADR	SWAP
 2803 3338 93180000 		_UNNEST
 2804              	
 2805              	/**********************
 2806              	    ELSE	( A -- A )
 2807              	 	Start the false 
 2808              		clause in an 
 2809              		IF-ELSE-THEN structure.
 2810              	****************************/
 2811 333c 20330000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2811      C4454C53 
 2811      450000BF 
 2812 3348 504700BF 		_NEST
 2813 334c B1320000 		_ADR	AHEAD
 2814 3350 4D1B0000 		_ADR	SWAP
 2815 3354 09330000 		_ADR	THENN
 2816 3358 93180000 		_UNNEST
 2817              	
 2818              	/**************************
 2819              	    WHILE	( a -- A a )
 2820              	 	Conditional branch out 
ARM GAS  forth.s 			page 126


 2821              		of a BEGIN-WHILE-REPEAT loop.
 2822              	*********************************/
 2823 335c 40330000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2823      C5574849 
 2823      4C4500BF 
 2824 3368 504700BF 		_NEST
 2825 336c 7D320000 		_ADR	IFF
 2826 3370 4D1B0000 		_ADR	SWAP
 2827 3374 93180000 		_UNNEST
 2828              	
 2829              	/***********************************
 2830              	    ABORT"	( -- //  string> )
 2831              	 	Conditional abort with an 
 2832              		error message.
 2833              	***********************************/
 2834 3378 60330000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2834      8641424F 
 2834      52542200 
 2835 3384 504700BF 		_NEST
 2836 3388 0B1A0000 		_COMPI	ABORQ
 2836      AC2E0000 
 2836      71350000 
 2837 3394 85310000 		_ADR	STRCQ
 2838 3398 93180000 		_UNNEST
 2839              	
 2840              	/******************************
 2841              	    $"	( -- //  string> )
 2842              	 	Compile an inline 
 2843              		word literal.
 2844              	*****************************/
 2845 339c 7C330000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2845      C2242200 
 2846 33a4 504700BF 		_NEST
 2847 33a8 0B1A0000 		_COMPI	STRQP
 2847      3C280000 
 2847      71350000 
 2848 33b4 85310000 		_ADR	STRCQ
 2849 33b8 93180000 		_UNNEST
 2850              	
 2851              	/******************************
 2852              	    ."	( -- //  string> )
 2853              	 	Compile an inline word
 2854              		literal to be typed out 
 2855              		at run time.
 2856              	*******************************/
 2857 33bc A0330000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2857      C22E2200 
 2858 33c4 504700BF 		_NEST
 2859 33c8 0B1A0000 		_COMPI	DOTQP
 2859      58280000 
 2859      71350000 
 2860 33d4 85310000 		_ADR	STRCQ
 2861 33d8 93180000 		_UNNEST
 2862              	
 2863              	/*********************
 2864              	  Name compiler
 2865              	***********************/
ARM GAS  forth.s 			page 127


 2866              	
 2867              	/**************************
 2868              	    ?UNIQUE	( a -- a )
 2869              	 	Display a warning 
 2870              		message if the word 
 2871              		already exists.
 2872              	**************************/
 2873 33dc C0330000 		_HEADER UNIQU,7,"?UNIQUE"
 2873      073F554E 
 2873      49515545 
 2874 33e8 504700BF 		_NEST
 2875 33ec 3D1B0000 		_ADR	DUPP
 2876 33f0 ED2C0000 		_ADR	NAMEQ			// ?name exists
 2877 33f4 4B1A0000 		_QBRAN	UNIQ1	// redefinitions are OK
 2877      14340000 
 2878 33fc 59280000 		_DOTQP	7," reDef "		// but warn the user
 2878      07207265 
 2878      44656620 
 2879 3408 611B0000 		_ADR	OVER
 2880 340c C11E0000 		_ADR	COUNT
 2881 3410 BD270000 		_ADR	TYPEE			// just in case its not planned
 2882              	UNIQ1:
 2883 3414 2D1B0000 		_ADR	DROP
 2884 3418 93180000 		_UNNEST
 2885              	
 2886              	/***********************
 2887              	    $,n	 ( na -- )
 2888              	 	Build a new dictionary 
 2889              		name using the data at na.
 2890              	hidden word 
 2891              	*******************************/
 2892              	SNAME:
 2893 341c 504700BF 		_NEST
 2894 3420 3D1B0000 		_ADR	DUPP			//  na na
 2895 3424 B11A0000 		_ADR	CAT			//  ?null input
 2896 3428 4B1A0000 		_QBRAN	SNAM1
 2896      64340000 
 2897 3430 E9330000 		_ADR	UNIQU			//  na
 2898 3434 1D200000 		_ADR	LAST			//  na last
 2899 3438 911A0000 		_ADR	AT			//  na la
 2900 343c E9300000 		_ADR	COMMA			//  na
 2901 3440 3D1B0000 		_ADR	DUPP			//  na na
 2902 3444 1D200000 		_ADR	LAST			//  na na last
 2903 3448 7D1A0000 		_ADR	STORE			//  na , save na for vocabulary link
 2904 344c C11E0000 		_ADR	COUNT			//  na+1 count
 2905 3450 011C0000 		_ADR	PLUS			//  na+1+count
 2906 3454 E5210000 		_ADR	ALGND			//  word boundary
 2907 3458 F51F0000 		_ADR	CPP
 2908 345c 7D1A0000 		_ADR	STORE			//  top of dictionary now
 2909 3460 93180000 		_UNNEST
 2910              	SNAM1:
 2911 3464 3D280000 		_ADR	STRQP
 2912 3468 07       		.byte	7
 2913 3469 206E616D 		.ascii " name? "
 2913      653F20
 2914 3470 812E0000 		_ADR	ABORT
 2915              	
ARM GAS  forth.s 			page 128


 2916              	/************************
 2917              	    $COMPILE	( a -- )
 2918              	 	Compile next word to 
 2919              		code dictionary as 
 2920              		a token or literal.
 2921              	**************************/
 2922 3474 E0330000 		_HEADER SCOMP,8,"$COMPILE"
 2922      0824434F 
 2922      4D50494C 
 2922      450000BF 
 2923 3484 504700BF 		_NEST
 2924 3488 ED2C0000 		_ADR	NAMEQ
 2925 348c 111D0000 		_ADR	QDUP	// defined?
 2926 3490 4B1A0000 		_QBRAN	SCOM2
 2926      C0340000 
 2927 3498 911A0000 		_ADR	AT
 2928 349c 0B1A0000 		_DOLIT	IMEDD
 2928      80000000 
 2929 34a4 811B0000 		_ADR	ANDD	// immediate?
 2930 34a8 4B1A0000 		_QBRAN	SCOM1
 2930      B8340000 
 2931 34b0 211A0000 		_ADR	EXECU
 2932 34b4 93180000 		_UNNEST			// it's immediate, execute
 2933              	SCOM1:
 2934 34b8 71350000 		_ADR	CALLC			// it's not immediate, compile
 2935 34bc 93180000 		_UNNEST	
 2936              	SCOM2:
 2937 34c0 2D260000 		_ADR	NUMBQ
 2938 34c4 4B1A0000 		_QBRAN	SCOM3
 2938      D4340000 
 2939 34cc 6D310000 		_ADR	LITER
 2940 34d0 93180000 		_UNNEST			// compile number as integer
 2941              	SCOM3: // compilation abort 
 2942 34d4 DD340000 		_ADR COLON_ABORT 
 2943 34d8 812E0000 		_ADR	ABORT			// error
 2944              	
 2945              	/********************************
 2946              	 before aborting a compilation 
 2947              	 reset HERE and LAST
 2948              	 to previous values. 
 2949              	*******************************/
 2950              	COLON_ABORT:
 2951 34dc 504700BF 		_NEST 
 2952 34e0 1D200000 		_ADR LAST 
 2953 34e4 911A0000 		_ADR AT 
 2954 34e8 AD1C0000 		_ADR CELLM 
 2955 34ec 3D1B0000 		_ADR DUPP 
 2956 34f0 F51F0000 		_ADR CPP  
 2957 34f4 7D1A0000 		_ADR STORE 
 2958 34f8 911A0000 		_ADR AT 
 2959 34fc 1D200000 		_ADR LAST 
 2960 3500 7D1A0000 		_ADR STORE 
 2961 3504 93180000 		_UNNEST 
 2962              	
 2963              	/*********************
 2964              	    OVERT	( -- )
 2965              	 	Link a new word 
ARM GAS  forth.s 			page 129


 2966              		into the current 
 2967              		vocabulary.
 2968              	**********************/
 2969 3508 78340000 		_HEADER OVERT,5,"OVERT"
 2969      054F5645 
 2969      525400BF 
 2970 3514 504700BF 		_NEST
 2971 3518 1D200000 		_ADR	LAST
 2972 351c 911A0000 		_ADR	AT
 2973 3520 E11F0000 		_ADR	CNTXT
 2974 3524 7D1A0000 		_ADR	STORE
 2975 3528 93180000 		_UNNEST
 2976              	
 2977              	/**********************
 2978              	    ;  ( -- )
 2979              	 	Terminate a colon
 2980              		definition.
 2981              	***********************/
 2982 352c 0C350000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 2982      C13B00BF 
 2983 3534 504700BF 		_NEST
 2984 3538 0B1A0000 		_DOLIT	UNNEST
 2984      92180000 
 2985 3540 71350000 		_ADR	CALLC
 2986 3544 3D2F0000 		_ADR	LBRAC
 2987 3548 15350000 		_ADR	OVERT
 2988 354c 93180000 		_UNNEST
 2989              	
 2990              	/******************
 2991              	    ]	   ( -- )
 2992              	 	Start compiling 
 2993              		the words in 
 2994              		the input stream.
 2995              	*********************/
 2996 3550 30350000 		_HEADER RBRAC,1,"]"
 2996      015D00BF 
 2997 3558 504700BF 		_NEST
 2998 355c 0B1A0000 		_DOLIT	SCOMP
 2998      84340000 
 2999 3564 B51F0000 		_ADR	TEVAL
 3000 3568 7D1A0000 		_ADR	STORE
 3001 356c 93180000 		_UNNEST
 3002              	
 3003              	/*********************
 3004              	    BL.W	( ca -- )
 3005              	 	compile ca.
 3006              	hidden word used by compiler
 3007              	*****************************/
 3008              	CALLC:
 3009 3570 504700BF 		_NEST
 3010 3574 0B1A0000 		_DOLIT 1 
 3010      01000000 
 3011 357c 951B0000 		_ADR ORR 
 3012 3580 E9300000 		_ADR COMMA  
 3013 3584 93180000 		_UNNEST 
 3014              	
 3015              	
ARM GAS  forth.s 			page 130


 3016              	/*************************
 3017              	 	:	( -- //  string> )
 3018              	 	Start a new colon 
 3019              		definition using 
 3020              		next word as its name.
 3021              	**************************/
 3022 3588 54350000 		_HEADER COLON,1,":"
 3022      013A00BF 
 3023 3590 504700BF 		_NEST
 3024 3594 692B0000 		_ADR	TOKEN
 3025 3598 1D340000 		_ADR	SNAME
 3026 359c 9D180000 		_ADR	COMPI_NEST 
 3027 35a0 59350000 		_ADR	RBRAC
 3028 35a4 93180000 		_UNNEST
 3029              	
 3030              	/*************************
 3031              	    IMMEDIATE   ( -- )
 3032              	 	Make the last compiled 
 3033              		word an immediate word.
 3034              	***************************/
 3035 35a8 8C350000 		_HEADER IMMED,9,"IMMEDIATE"
 3035      09494D4D 
 3035      45444941 
 3035      544500BF 
 3036 35b8 504700BF 		_NEST
 3037 35bc 0B1A0000 		_DOLIT	IMEDD
 3037      80000000 
 3038 35c4 1D200000 		_ADR	LAST
 3039 35c8 911A0000 		_ADR	AT
 3040 35cc 911A0000 		_ADR	AT
 3041 35d0 951B0000 		_ADR	ORR
 3042 35d4 1D200000 		_ADR	LAST
 3043 35d8 911A0000 		_ADR	AT
 3044 35dc 7D1A0000 		_ADR	STORE
 3045 35e0 93180000 		_UNNEST
 3046              	
 3047              	/******************
 3048              	  Defining words
 3049              	******************/
 3050              	
 3051              	/***********************************
 3052              	    CONSTANT	( u -- //  string> )
 3053              	 	Compile a new constant.
 3054              	************************************/
 3055 35e4 AC350000 		_HEADER CONST,8,"CONSTANT"
 3055      08434F4E 
 3055      5354414E 
 3055      540000BF 
 3056 35f4 504700BF 		_NEST 
 3057 35f8 692B0000 		_ADR	TOKEN
 3058 35fc 1D340000 		_ADR	SNAME
 3059 3600 15350000 		_ADR	OVERT
 3060 3604 9D180000 		_ADR	COMPI_NEST
 3061 3608 0B1A0000 		_DOLIT	DOCON
 3061      F41E0000 
 3062 3610 71350000 		_ADR	CALLC
 3063 3614 E9300000 		_ADR	COMMA
ARM GAS  forth.s 			page 131


 3064 3618 0B1A0000 		_DOLIT	UNNEST 
 3064      92180000 
 3065 3620 71350000 		_ADR	CALLC  
 3066 3624 93180000 		_UNNEST
 3067              	
 3068              		.p2align 2 
 3069              	/****************************************
 3070              	 doDOES> ( -- a )
 3071              	 runtime action of DOES> 
 3072              	 leave parameter field address on stack 
 3073              	hidden word used by compiler 
 3074              	***************************************/
 3075              	DODOES:
 3076 3628 504700BF 		_NEST 
 3077 362c BD1A0000 		_ADR	RFROM
 3078 3630 9D1C0000 		_ADR	CELLP 
 3079 3634 5D1C0000 		_ADR	ONEP  
 3080 3638 1D200000 		_ADR LAST 
 3081 363c 911A0000 		_ADR AT
 3082 3640 852B0000 		_ADR NAMET 
 3083 3644 9D1C0000 		_ADR CELLP 
 3084 3648 7D1A0000 		_ADR STORE  
 3085 364c 93180000 		_UNNEST 
 3086              	
 3087              		.p2align 2
 3088              	/**********************
 3089              	  DOES> ( -- )
 3090              	  compile time action
 3091              	*************************/
 3092 3650 E8350000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3092      C5444F45 
 3092      533E00BF 
 3093 365c 504700BF 		_NEST 
 3094 3660 0B1A0000 		_DOLIT DODOES 
 3094      28360000 
 3095 3668 71350000 		_ADR CALLC 
 3096 366c 0B1A0000 		_DOLIT	UNNEST
 3096      92180000 
 3097 3674 71350000 		_ADR	CALLC 
 3098 3678 9D180000 		_ADR COMPI_NEST
 3099 367c 0B1A0000 		_DOLIT RFROM 
 3099      BC1A0000 
 3100 3684 71350000 		_ADR	CALLC
 3101 3688 93180000 		_UNNEST 
 3102              	
 3103              	
 3104              	/****************************
 3105              	  DEFER@ ( "name" -- a )
 3106              	  return value of code field 
 3107              	  of defered function. 
 3108              	******************************/
 3109 368c 54360000 		_HEADER DEFERAT,6,"DEFER@"
 3109      06444546 
 3109      45524000 
 3110 3698 504700BF 		_NEST 
 3111 369c A9300000 		_ADR TICK
 3112 36a0 9D1C0000 		_ADR CELLP 
ARM GAS  forth.s 			page 132


 3113 36a4 911A0000 		_ADR AT 
 3114 36a8 6D1C0000 		_ADR ONEM 
 3115 36ac 93180000 		_UNNEST 
 3116              	
 3117              	/*********************************
 3118              	 DEFER! ( "name1" "name2" -- )
 3119              	 assign an action to a defered word 
 3120              	************************************/
 3121 36b0 90360000 		_HEADER DEFERSTO,6,"DEFER!"
 3121      06444546 
 3121      45522100 
 3122 36bc 504700BF 		_NEST 
 3123 36c0 A9300000 		_ADR TICK 
 3124 36c4 5D1C0000 		_ADR ONEP 
 3125 36c8 A9300000 		_ADR TICK 
 3126 36cc 9D1C0000 		_ADR CELLP 
 3127 36d0 7D1A0000 		_ADR STORE 
 3128 36d4 93180000 		_UNNEST
 3129              	
 3130              	/****************************
 3131              	  DEFER ( "name" -- )
 3132              	  create a defered definition
 3133              	*****************************/
 3134 36d8 B4360000 		_HEADER DEFER,5,"DEFER"
 3134      05444546 
 3134      455200BF 
 3135 36e4 504700BF 		_NEST 
 3136 36e8 35370000 		_ADR CREAT 
 3137 36ec 0B1A0000 		_DOLIT UNNEST 
 3137      92180000 
 3138 36f4 71350000 		_ADR CALLC 
 3139 36f8 0B1A0000 		_DOLIT DEFER_NOP
 3139      1C370000 
 3140 3700 5D1C0000 		_ADR ONEP 
 3141 3704 1D200000 		_ADR LAST 
 3142 3708 911A0000 		_ADR AT 
 3143 370c 852B0000 		_ADR NAMET 
 3144 3710 9D1C0000 		_ADR CELLP 
 3145 3714 7D1A0000 		_ADR STORE 
 3146 3718 93180000 		_UNNEST 
 3147              	DEFER_NOP:
 3148 371c 504700BF 		_NEST  
 3149 3720 091A0000 		_ADR NOP 
 3150 3724 93180000 		_UNNEST 
 3151              	
 3152              	/******************************
 3153              	    CREATE	( -- //  string> )
 3154              	 	Compile a new array entry 
 3155              		without allocating code space.
 3156              	***********************************/
 3157 3728 DC360000 		_HEADER CREAT,6,"CREATE"
 3157      06435245 
 3157      41544500 
 3158 3734 504700BF 		_NEST 
 3159 3738 692B0000 		_ADR	TOKEN
 3160 373c 1D340000 		_ADR	SNAME
 3161 3740 15350000 		_ADR	OVERT
ARM GAS  forth.s 			page 133


 3162 3744 9D180000 		_ADR	COMPI_NEST 
 3163 3748 0B1A0000 		_DOLIT	DOVAR
 3163      E81E0000 
 3164 3750 71350000 		_ADR	CALLC
 3165 3754 93180000 		_UNNEST
 3166              	
 3167              	/*******************************
 3168              	    VARIABLE	( -- //  string> )
 3169              	 	Compile a new variable 
 3170              		initialized to 0.
 3171              	***********************************/
 3172 3758 2C370000 		_HEADER VARIA,8,"VARIABLE"
 3172      08564152 
 3172      4941424C 
 3172      450000BF 
 3173 3768 504700BF 		_NEST
 3174 376c 35370000 		_ADR	CREAT
 3175 3770 0B1A0000 		_DOLIT	0
 3175      00000000 
 3176 3778 E9300000 		_ADR	COMMA
 3177 377c 0B1A0000 		_DOLIT UNNEST
 3177      92180000 
 3178 3784 71350000 		_ADR	CALLC  
 3179 3788 93180000 		_UNNEST
 3180              	
 3181              	/***********
 3182              	  Tools
 3183              	***********/
 3184              	
 3185              	/*************************
 3186              	    dm+	 ( a u -- a )
 3187              	 	Dump u bytes from , 
 3188              		leaving a+u on the stack.
 3189              	hidden word used by DUMP 
 3190              	****************************/
 3191              	DMP:
 3192 378c 504700BF 		_NEST
 3193 3790 611B0000 		_ADR	OVER
 3194 3794 0B1A0000 		_DOLIT	4
 3194      04000000 
 3195 379c 9D280000 		_ADR	UDOTR			// display address
 3196 37a0 69270000 		_ADR	SPACE
 3197 37a4 E51A0000 		_ADR	TOR			// start count down loop
 3198 37a8 5F1A0000 		_BRAN	PDUM2			// skip first pass
 3198      C8370000 
 3199              	PDUM1:
 3200 37b0 3D1B0000 	  _ADR	DUPP
 3201 37b4 B11A0000 		_ADR	CAT
 3202 37b8 0B1A0000 		_DOLIT	3
 3202      03000000 
 3203 37c0 9D280000 		_ADR	UDOTR			// display numeric data
 3204 37c4 5D1C0000 		_ADR	ONEP			// increment address
 3205              	PDUM2:
 3206 37c8 2D1A0000 	  _ADR	DONXT
 3207 37cc B0370000 		.word	PDUM1	// loop till done
 3208 37d0 93180000 		_UNNEST
 3209              		.p2align 2 
ARM GAS  forth.s 			page 134


 3210              	//    DUMP	( a u -- )
 3211              	// 	Dump u bytes from a, in a formatted manner.
 3212              	
 3213              	/**********************
 3214              		DUMP ( a n -- )
 3215              		hex dump memory 
 3216              	*********************/
 3217 37d4 5C370000 		_HEADER DUMP,4,"DUMP"
 3217      0444554D 
 3217      500000BF 
 3218 37e0 504700BF 		_NEST
 3219 37e4 591F0000 		_ADR	BASE
 3220 37e8 911A0000 		_ADR	AT
 3221 37ec E51A0000 		_ADR	TOR
 3222 37f0 7D250000 		_ADR	HEX			// save radix,set hex
 3223 37f4 0B1A0000 		_DOLIT	16
 3223      10000000 
 3224 37fc 85210000 		_ADR	SLASH			// change count to lines
 3225 3800 E51A0000 		_ADR	TOR
 3226 3804 5F1A0000 		_BRAN	DUMP4			// start count down loop
 3226      34380000 
 3227              	DUMP1:
 3228 380c F1270000 	  _ADR	CR
 3229 3810 0B1A0000 		_DOLIT	16
 3229      10000000 
 3230 3818 751D0000 		_ADR	DDUP
 3231 381c 8D370000 		_ADR	DMP			// display numeric
 3232 3820 251D0000 		_ADR	ROT
 3233 3824 251D0000 		_ADR	ROT
 3234 3828 69270000 		_ADR	SPACE
 3235 382c 69270000 		_ADR	SPACE
 3236 3830 BD270000 		_ADR	TYPEE			// display printable characters
 3237              	DUMP4:
 3238 3834 2D1A0000 	  _DONXT	DUMP1	// loop till done
 3238      0C380000 
 3239              	DUMP3:
 3240 383c 2D1B0000 		_ADR	DROP
 3241 3840 BD1A0000 		_ADR	RFROM
 3242 3844 591F0000 		_ADR	BASE
 3243 3848 7D1A0000 		_ADR	STORE			// restore radix
 3244 384c 93180000 		_UNNEST
 3245              	
 3246              	/**********************
 3247              	   .S	  ( ... -- ... )
 3248              	 	Display the contents 
 3249              		of the data stack.
 3250              	*************************/
 3251 3850 D8370000 		_HEADER DOTS,2,".S"
 3251      022E5300 
 3252 3858 504700BF 		_NEST
 3253 385c 69270000 		_ADR	SPACE
 3254 3860 4D220000 		_ADR	DEPTH			// stack depth
 3255 3864 E51A0000 		_ADR	TOR			// start count down loop
 3256 3868 5F1A0000 		_BRAN	DOTS2			// skip first pass
 3256      7C380000 
 3257              	DOTS1:
 3258 3870 D11A0000 		_ADR	RAT
ARM GAS  forth.s 			page 135


 3259 3874 71220000 		_ADR	PICK
 3260 3878 F5280000 		_ADR	DOT			// index stack, display contents
 3261              	DOTS2:
 3262 387c 2D1A0000 		_DONXT	DOTS1	// loop till done
 3262      70380000 
 3263 3884 69270000 		_ADR	SPACE
 3264 3888 93180000 		_UNNEST
 3265              	
 3266              	/*****************************
 3267              	    >NAME	( ca -- na | F )
 3268              	 	Convert code address 
 3269              		to a name address.
 3270              	*****************************/
 3271 388c 54380000 		_HEADER TNAME,5,">NAME"
 3271      053E4E41 
 3271      4D4500BF 
 3272 3898 504700BF 		_NEST
 3273 389c E51A0000 		_ADR	TOR			//  
 3274 38a0 E11F0000 		_ADR	CNTXT			//  va
 3275 38a4 911A0000 		_ADR	AT			//  na
 3276              	TNAM1:
 3277 38a8 3D1B0000 		_ADR	DUPP			//  na na
 3278 38ac 4B1A0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3278      DC380000 
 3279 38b4 3D1B0000 		_ADR	DUPP			//  na na
 3280 38b8 852B0000 		_ADR	NAMET			//  na ca
 3281 38bc D11A0000 		_ADR	RAT			//  na ca code
 3282 38c0 A91B0000 		_ADR	XORR			//  na f --
 3283 38c4 4B1A0000 		_QBRAN	TNAM2
 3283      DC380000 
 3284 38cc AD1C0000 		_ADR	CELLM			//  la 
 3285 38d0 911A0000 		_ADR	AT			//  next_na
 3286 38d4 5F1A0000 		_BRAN	TNAM1
 3286      A8380000 
 3287              	TNAM2:	
 3288 38dc BD1A0000 		_ADR	RFROM
 3289 38e0 2D1B0000 		_ADR	DROP			//  0|na --
 3290 38e4 93180000 		_UNNEST			// 0
 3291              	
 3292              	/********************************
 3293              	    .ID	 ( na -- )
 3294              	 	Display the name at address.
 3295              	********************************/
 3296 38e8 90380000 		_HEADER DOTID,3,".ID"
 3296      032E4944 
 3297 38f0 504700BF 		_NEST
 3298 38f4 111D0000 		_ADR	QDUP			// if zero no name
 3299 38f8 4B1A0000 		_QBRAN	DOTI1
 3299      18390000 
 3300 3900 C11E0000 		_ADR	COUNT
 3301 3904 0B1A0000 		_DOLIT	0x1F
 3301      1F000000 
 3302 390c 811B0000 		_ADR	ANDD			// mask lexicon bits
 3303 3910 BD270000 		_ADR	TYPEE
 3304 3914 93180000 		_UNNEST			// display name string
 3305              	DOTI1:
 3306 3918 59280000 		_DOTQP	9," {noName}"
ARM GAS  forth.s 			page 136


 3306      09207B6E 
 3306      6F4E616D 
 3306      657D00BF 
 3307 3928 93180000 		_UNNEST
 3308              	
 3309              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3310              	.if WANT_SEE 
 3311              	/*******************************
 3312              	    SEE	 ( -- //  string> )
 3313              	 	A simple decompiler.
 3314              	*******************************/
 3315              		_HEADER SEE,3,"SEE"
 3316              		_NEST
 3317              		_ADR	TICK	//  ca --, starting address
 3318              		_ADR	CR	
 3319              		_DOLIT	20
 3320              		_ADR	TOR
 3321              	SEE1:
 3322              		_ADR	CELLP			//  a
 3323              		_ADR	DUPP			//  a a
 3324              		_ADR	DECOMP		//  a
 3325              		_DONXT	SEE1
 3326              		_ADR	DROP
 3327              		_UNNEST
 3328              	
 3329              	/*************************
 3330              	 	DECOMPILE ( a -- )
 3331              	 	Convert code in a.  
 3332              		Display name of command or as data.
 3333              	*************************************/
 3334              		_HEADER DECOMP,9,"DECOMPILE"
 3335              		_NEST
 3336              		_ADR	DUPP			//  a a
 3337              	// 	_ADR	TOR			//  a
 3338              		_ADR	AT			//  a code
 3339              		_ADR	DUPP			//  a code code
 3340              		_DOLIT	0xF800D000 //0xF800F800
 3341              		_ADR	ANDD
 3342              		_DOLIT	0xF000D000 //0xF800F000
 3343              		_ADR	EQUAL			//  a code ?
 3344              		_ADR	INVER 
 3345              		_QBRAN	DECOM2	//  not a command
 3346              		//  a valid_code --, extract address and display name
 3347              		MOVW	IP,#0xFFE
 3348              		MOV	WP,TOS
 3349              		LSL	TOS,TOS,#21		//  get bits 22-12
 3350              		ASR	TOS,TOS,#9		//  with sign extension
 3351              		LSR	WP,WP,#15		//  get bits 11-1
 3352              		AND	WP,WP,IP		//  retain only bits 11-1
 3353              		ORR	TOS,TOS,WP		//  get bits 22-1
 3354              		NOP
 3355              		_ADR	OVER			//  a offset a
 3356              		_ADR	PLUS			//  a target-4
 3357              		_ADR	CELLP			//  a target
 3358              		_ADR	TNAME			//  a na/0 --, is it a name?
 3359              		_ADR	QDUP			//  name address or zero
 3360              		_QBRAN	DECOM1
ARM GAS  forth.s 			page 137


 3361              		_ADR	SPACE			//  a na
 3362              		_ADR	DOTID			//  a --, display name
 3363              	// 	_ADR	RFROM			//  a
 3364              		_ADR	DROP
 3365              		_UNNEST
 3366              	DECOM1:	// _ADR	RFROM		//  a
 3367              		_ADR	AT			//  data
 3368              		_ADR	UDOT			//  display data
 3369              		_UNNEST
 3370              	DECOM2:
 3371              		_ADR	UDOT
 3372              	// 	_ADR	RFROM
 3373              		_ADR	DROP
 3374              		_UNNEST
 3375              	.endif 
 3376              	
 3377              	/*********************
 3378              	    WORDS	( -- )
 3379              	 	Display the names 
 3380              		in the context vocabulary.
 3381              	*******************************/
 3382 392c EC380000 		_HEADER WORDS,5,"WORDS"
 3382      05574F52 
 3382      445300BF 
 3383 3938 504700BF 		_NEST
 3384 393c F1270000 		_ADR	CR
 3385 3940 E11F0000 		_ADR	CNTXT
 3386 3944 911A0000 		_ADR	AT			// only in context
 3387              	WORS1:
 3388 3948 111D0000 		_ADR	QDUP			// ?at end of list
 3389 394c 4B1A0000 		_QBRAN	WORS2
 3389      70390000 
 3390 3954 3D1B0000 		_ADR	DUPP
 3391 3958 69270000 		_ADR	SPACE
 3392 395c F1380000 		_ADR	DOTID			// display a name
 3393 3960 AD1C0000 		_ADR	CELLM
 3394 3964 911A0000 		_ADR	AT
 3395 3968 5F1A0000 		_BRAN	WORS1
 3395      48390000 
 3396              	WORS2:
 3397 3970 93180000 		_UNNEST
 3398              	
 3399              	/****************
 3400              	  cold start
 3401              	*****************/
 3402              	
 3403              	/**********************************
 3404              	    VER	 ( -- n )
 3405              	 	Return the version 
 3406              		number of this implementation.
 3407              	hidden word used by COLD
 3408              	**********************************/
 3409              	VERSN:
 3410 3974 504700BF 		_NEST
 3411 3978 0B1A0000 		_DOLIT	VER*256+EXT
 3411      00010000 
 3412 3980 93180000 		_UNNEST
ARM GAS  forth.s 			page 138


 3413              	
 3414              	/*********************
 3415              	    hi	  ( -- )
 3416              	 	Display the sign-on 
 3417              		message.
 3418              	***********************/
 3419 3984 30390000 		_HEADER HI,2,"HI"
 3419      02484900 
 3420 398c 504700BF 		_NEST
 3421 3990 F1270000 		_ADR	CR	// initialize I/O
 3422 3994 59280000 		_DOTQP	17, "beyond Jupiter, v" 
 3422      11626579 
 3422      6F6E6420 
 3422      4A757069 
 3422      7465722C 
 3423 39ac 591F0000 		_ADR	BASE
 3424 39b0 911A0000 		_ADR	AT
 3425 39b4 7D250000 		_ADR	HEX	// save radix
 3426 39b8 75390000 		_ADR	VERSN
 3427 39bc 6D240000 		_ADR	BDIGS
 3428 39c0 B9240000 		_ADR	DIG
 3429 39c4 B9240000 		_ADR	DIG
 3430 39c8 0B1A0000 		_DOLIT	'.'
 3430      2E000000 
 3431 39d0 8D240000 		_ADR	HOLD
 3432 39d4 D9240000 		_ADR	DIGS
 3433 39d8 2D250000 		_ADR	EDIGS
 3434 39dc BD270000 		_ADR	TYPEE	// format version number
 3435 39e0 591F0000 		_ADR	BASE
 3436 39e4 7D1A0000 		_ADR	STORE
 3437 39e8 F1270000 		_ADR	CR
 3438 39ec 93180000 		_UNNEST			// restore radix
 3439              	
 3440              	/**********************
 3441              	 check if PS2 keyboard 
 3442              	 present.
 3443              	**********************/
 3444              	PS2_QUERY:
 3445 39f0 504700BF 		_NEST 
 3446 39f4 99150000 		_ADR KBD_RST
 3447 39f8 0B1A0000 		_DOLIT BAT_OK 
 3447      AA000000 
 3448 3a00 A91B0000 		_ADR XORR  
 3449 3a04 4B1A0000 		_QBRAN 9f  
 3449      383A0000 
 3450              	// no ps2 keyboard 
 3451              	// swith to serial console
 3452 3a0c F1270000 		_ADR CR 
 3453 3a10 59280000 		_DOTQP 25,"no PS2 keyboard detected."
 3453      196E6F20 
 3453      50533220 
 3453      6B657962 
 3453      6F617264 
 3454 3a30 B9050000 		_ADR SERIAL 
 3455 3a34 D1050000 		_ADR CONSOLE 
 3456 3a38 93180000 	9:	_UNNEST 
 3457              	
ARM GAS  forth.s 			page 139


 3458              	/*************************
 3459              	   check PA8 to 
 3460              	   select console 
 3461              	   PA8 -> low  LOCAL 
 3462              	   PA8 -> high SERIAL 
 3463              	*************************/
 3464              	IF_SENSE:
 3465 3a3c 504700BF 		_NEST 
 3466 3a40 A1050000 		_ADR LOCAL 
 3467 3a44 0B1A0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3467      10000240 
 3468 3a4c 911A0000 		_ADR AT 
 3469 3a50 0B1A0000 		_DOLIT (1<<8)
 3469      00010000 
 3470 3a58 811B0000 		_ADR ANDD 
 3471 3a5c 4B1A0000 		_QBRAN 9f 
 3471      683A0000 
 3472 3a64 5D1C0000 		_ADR ONEP 
 3473 3a68 D1050000 	9:  _ADR CONSOLE 
 3474 3a6c 93180000 		_UNNEST 
 3475              	
 3476              	
 3477              	/********************
 3478              	    COLD	( -- )
 3479              	 	The high level cold 
 3480              		start sequence.
 3481              	**************************/
 3482 3a70 88390000 		.word	LINK 
 3483              		LINK = . 
 3484 3a74 04       	_LASTN:	.byte  4
 3485 3a75 434F4C44 		.ascii "COLD"
 3486 3a79 0000BF   		.p2align 2	
 3487              	COLD:
 3488 3a7c 00B5FCF7 		_CALL forth_init 
 3488      73FB5DF8 
 3488      04EB
 3489 3a86 DFF854C0 		ldr IP,=COLD1 
 3490 3a8a FDF7FFBE 		_NEXT
 3491 3a8e 00BF     		.p2align 2 
 3492              	COLD1:
 3493 3a90 0B1A0000 		_DOLIT  0 
 3493      00000000 
 3494 3a98 E1190000 		_ADR ULED // turn off user LED 
 3495 3a9c 0B1A0000 		_DOLIT	UZERO
 3495      F4030000 
 3496 3aa4 0B1A0000 		_DOLIT	UPP
 3496      00000020 
 3497 3aac 0B1A0000 		_DOLIT	ULAST-UZERO
 3497      A8000000 
 3498 3ab4 39230000 		_ADR	MOVE 			// initialize user area
 3499 3ab8 09300000 		_ADR	PRESE			// initialize stack and TIB
 3500 3abc 3D3A0000 		_ADR	IF_SENSE 
 3501 3ac0 F1390000 		_ADR 	PS2_QUERY  
 3502 3ac4 451F0000 		_ADR	TBOOT
 3503 3ac8 E9220000 		_ADR	ATEXE			// application boot
 3504 3acc 15350000 		_ADR	OVERT
 3505 3ad0 5F1A0000 		_BRAN	QUIT			// start interpretation
ARM GAS  forth.s 			page 140


 3505      28300000 
 3506              	COLD2:
 3507              		.p2align 2 	
 3508              	CTOP:
 3509 3ad8 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3510              	
 3511              	
 3512 3adc 903A0000 	  .end 
ARM GAS  forth.s 			page 141


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 142


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
ARM GAS  forth.s 			page 143


     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:181    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:182    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:183    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:184    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:185    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:186    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:187    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:188    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:189    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:190    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:191    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:192    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:193    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:194    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:195    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:196    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:197    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:198    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:199    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:200    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:201    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:202    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:203    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:204    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:205    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:206    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:207    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:208    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:209    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:210    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:211    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:212    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:213    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:214    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:215    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:216    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:217    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:218    *ABS*:0000000000000314 NVIC_IABR5
ARM GAS  forth.s 			page 144


     stm32f411ce.inc:219    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:220    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:222    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:225    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:226    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:227    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:228    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:229    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:230    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:231    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:232    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:233    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:236    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:237    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:238    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:239    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:240    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:241    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:244    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:245    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:246    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:247    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:248    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:249    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:261    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:272    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:278    *ABS*:000000000000003a DMAS2_IRQ
ARM GAS  forth.s 			page 145


     stm32f411ce.inc:279    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:280    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:281    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:282    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:288    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:289    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:290    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:294    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:295    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:296    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:297    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:299    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:300    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:301    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:302    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:306    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:309    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:310    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:311    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:312    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:313    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:314    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:315    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:316    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:317    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:318    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:319    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:320    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:321    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:322    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:323    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:324    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:325    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:326    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:327    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:328    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:331    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:333    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:334    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:335    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:336    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:337    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:338    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:339    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:342    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:344    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:345    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:346    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:347    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:348    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:349    *ABS*:0000000000000014 EXTI_PR
ARM GAS  forth.s 			page 146


     stm32f411ce.inc:352    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:353    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:355    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:357    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:358    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:359    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:360    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:361    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:362    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:363    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:364    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:365    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2493   .text:0000000000002fc4 EVAL
             forth.s:1520   .text:000000000000248c HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
ARM GAS  forth.s 			page 147


          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:122    .text:00000000000007c8 tv_out_isr
          ser-term.s:35     .text:00000000000004ac uart_rx_handler
           ps2_kbd.s:77     .text:00000000000010a8 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:97     .text:000000000000188c INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2514   .text:0000000000003008 PRESE
             forth.s:280    .text:0000000000001a0a DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:0000000000001ec0 COUNT
             forth.s:1784   .text:00000000000027bc TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:449    .text:0000000000001b3c DUPP
             forth.s:405    .text:0000000000001ae4 TOR
             forth.s:980    .text:0000000000001f58 BASE
             forth.s:351    .text:0000000000001a7c STORE
             forth.s:1922   .text:00000000000028f4 DOT
             forth.s:387    .text:0000000000001abc RFROM
             forth.s:484    .text:0000000000001b80 ANDD
             forth.s:321    .text:0000000000001a4a QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:165    .text:0000000000001914 EMIT
             forth.s:1756   .text:0000000000002768 SPACE
              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1802   .text:00000000000027f0 CR
              init.s:242    .text:0000000000000104 user_reboot_msg
ARM GAS  forth.s 			page 148


              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:384    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004da ser_init
             tvout.s:66     .text:0000000000000718 tv_init
           ps2_kbd.s:306    .text:00000000000012c8 kbd_init
         spi-flash.s:39     .text:00000000000016c0 flash_spi_init
             forth.s:3487   .text:0000000000003a7c COLD
             forth.s:93     .text:0000000000001884 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:474    .text:0000000000000332 gpio_config
              init.s:549    .text:00000000000003de gpio_out
              init.s:409    .text:00000000000002a8 nvic_set_priority
              init.s:564    .text:00000000000003f4 UZERO
              init.s:600    .text:000000000000049c ULAST
              init.s:418    .text:00000000000002c0 negative_irq
              init.s:430    .text:00000000000002da nvic_enable_irq
              init.s:447    .text:0000000000000304 nvic_disable_irq
              init.s:511    .text:000000000000039a input_pull
              init.s:504    .text:0000000000000388 output_type
              init.s:527    .text:00000000000003b0 gpio_speed
              init.s:565    .text:00000000000003f4 $d
             forth.s:3419   .text:000000000000398c HI
           ps2_kbd.s:391    .text:00000000000013b4 PS2_QKEY
             tvout.s:555    .text:0000000000000c8c TV_EMIT
             forth.s:2430   .text:0000000000002ee0 INTER
             forth.s:3484   .text:0000000000003a74 _LASTN
             forth.s:3508   .text:0000000000003ad8 CTOP
             forth.s:3483   .text:0000000000003a74 LINK
              init.s:605    .text:000000000000049c $d
          ser-term.s:33     .text:00000000000004ac $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000532 $d
          ser-term.s:90     .text:0000000000000536 _SER_QKEY
          ser-term.s:90     .text:0000000000000540 SER_QKEY
          ser-term.s:110    .text:000000000000056c $d
          ser-term.s:110    .text:0000000000000570 _SER_EMIT
          ser-term.s:110    .text:000000000000057c SER_EMIT
          ser-term.s:124    .text:0000000000000596 $d
          ser-term.s:124    .text:000000000000059a _LOCAL
          ser-term.s:124    .text:00000000000005a0 $t
          ser-term.s:124    .text:00000000000005a0 LOCAL
          ser-term.s:133    .text:00000000000005ac $d
          ser-term.s:133    .text:00000000000005b0 _SERIAL
          ser-term.s:133    .text:00000000000005b8 SERIAL
          ser-term.s:142    .text:00000000000005c4 $d
          ser-term.s:142    .text:00000000000005c8 _CONSOLE
          ser-term.s:142    .text:00000000000005d0 $t
          ser-term.s:142    .text:00000000000005d0 CONSOLE
          ser-term.s:164    .text:00000000000005f0 $d
          ser-term.s:164    .text:00000000000005f4 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000600 ANSI_PARAM
          ser-term.s:166    .text:0000000000000604 $d
             forth.s:590    .text:0000000000001c5c ONEP
ARM GAS  forth.s 			page 149


             forth.s:1201   .text:000000000000214c SLMOD
             forth.s:679    .text:0000000000001d10 QDUP
             forth.s:336    .text:0000000000001a5e BRAN
             forth.s:541    .text:0000000000001c00 PLUS
             forth.s:598    .text:0000000000001c6c ONEM
             forth.s:100    .text:0000000000001892 UNNEST
          ser-term.s:191    .text:0000000000000670 _ANSI_ESC
          ser-term.s:191    .text:0000000000000678 ANSI_ESC
          ser-term.s:193    .text:000000000000067c $d
          ser-term.s:203    .text:000000000000069c _SER_AT
          ser-term.s:203    .text:00000000000006a4 SER_AT
          ser-term.s:205    .text:00000000000006a8 $d
             forth.s:457    .text:0000000000001b4c SWAP
          ser-term.s:219    .text:00000000000006d8 _SER_CLS
          ser-term.s:219    .text:00000000000006e0 $t
          ser-term.s:219    .text:00000000000006e0 SER_CLS
          ser-term.s:221    .text:00000000000006e4 $d
          ser-term.s:228    .text:0000000000000708 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000047f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:66     .text:0000000000000718 $t
             tvout.s:141    .text:00000000000007f4 state_vsync
             tvout.s:182    .text:0000000000000848 state_pre_video
             tvout.s:193    .text:000000000000085a state_video_out
             tvout.s:228    .text:00000000000008c0 state_post_video
             tvout.s:245    .text:00000000000008e6 tv_isr_exit
             tvout.s:171    .text:000000000000082e sync_end
             tvout.s:237    .text:00000000000008d2 frame_end
             tvout.s:255    .text:00000000000008e8 $d
             tvout.s:255    .text:00000000000008ec _BACKCOLOR
             tvout.s:255    .text:00000000000008f8 BACKCOLOR
             tvout.s:262    .text:0000000000000904 $d
             tvout.s:262    .text:0000000000000908 _PENCOLOR
             tvout.s:262    .text:0000000000000912 $t
ARM GAS  forth.s 			page 150


             tvout.s:262    .text:0000000000000914 PENCOLOR
             tvout.s:269    .text:0000000000000920 $d
             tvout.s:269    .text:0000000000000924 _CURSOR_COL
             tvout.s:269    .text:000000000000092c CURSOR_COL
             tvout.s:276    .text:0000000000000938 $d
             tvout.s:276    .text:000000000000093c _CURSOR_ROW
             tvout.s:276    .text:0000000000000940 $t
             tvout.s:276    .text:0000000000000940 CURSOR_ROW
             tvout.s:283    .text:000000000000094c $d
             tvout.s:283    .text:0000000000000950 _ROWY
             tvout.s:283    .text:0000000000000956 $t
             tvout.s:283    .text:0000000000000958 ROWY
             tvout.s:290    .text:0000000000000964 $d
             tvout.s:290    .text:0000000000000968 _COLX
             tvout.s:290    .text:000000000000096e $t
             tvout.s:290    .text:0000000000000970 COLX
             tvout.s:297    .text:000000000000097c $d
             tvout.s:297    .text:0000000000000980 _FONT
             tvout.s:297    .text:0000000000000988 FONT
             tvout.s:730    .rodata:0000000000000000 font_6x8
             tvout.s:304    .text:0000000000000994 $d
             tvout.s:304    .text:0000000000000998 _VIDBUFF
             tvout.s:304    .text:00000000000009a0 $t
             tvout.s:304    .text:00000000000009a0 VIDBUFF
             tvout.s:316    .text:00000000000009aa $d
             tvout.s:316    .text:00000000000009ae _PLOT
             tvout.s:316    .text:00000000000009b4 PLOT
             tvout.s:364    .text:0000000000000a38 plot_op
             tvout.s:332    .text:00000000000009e0 op_back
             tvout.s:341    .text:00000000000009fa op_pen
             tvout.s:350    .text:0000000000000a14 op_invert
             tvout.s:354    .text:0000000000000a1c op_xor
             tvout.s:364    .text:0000000000000a38 $d
             tvout.s:369    .text:0000000000000a40 _VSYNC
             tvout.s:369    .text:0000000000000a46 $t
             tvout.s:369    .text:0000000000000a48 VSYNC
             tvout.s:377    .text:0000000000000a52 $d
             tvout.s:377    .text:0000000000000a56 _CLS
             tvout.s:377    .text:0000000000000a5a $t
             tvout.s:377    .text:0000000000000a5c CLS
             tvout.s:401    .text:0000000000000a9e $d
             tvout.s:401    .text:0000000000000aa2 _CLRLINE
             tvout.s:401    .text:0000000000000aaa $t
             tvout.s:401    .text:0000000000000aac CLRLINE
             tvout.s:403    .text:0000000000000ab0 $d
             forth.s:559    .text:0000000000001c20 STAR
             forth.s:1428   .text:0000000000002380 FILL
             tvout.s:418    .text:0000000000000ae4 _SCROLLUP
             tvout.s:418    .text:0000000000000af0 SCROLLUP
             tvout.s:420    .text:0000000000000af4 $d
             forth.s:550    .text:0000000000001c10 SUBB
             forth.s:1396   .text:0000000000002338 MOVE
             tvout.s:439    .text:0000000000000b3c _SCROLLDOWN
             tvout.s:439    .text:0000000000000b48 SCROLLDOWN
             tvout.s:441    .text:0000000000000b4c $d
             tvout.s:458    .text:0000000000000b8c _TV_CRLF
             tvout.s:458    .text:0000000000000b94 $t
ARM GAS  forth.s 			page 151


             tvout.s:458    .text:0000000000000b94 TV_CRLF
             tvout.s:473    .text:0000000000000bb6 $d
             tvout.s:473    .text:0000000000000bba _RIGHT
             tvout.s:473    .text:0000000000000bc0 $t
             tvout.s:473    .text:0000000000000bc0 RIGHT
             tvout.s:486    .text:0000000000000bd4 $d
             tvout.s:486    .text:0000000000000bd8 _LEFT
             tvout.s:486    .text:0000000000000be0 LEFT
             tvout.s:501    .text:0000000000000c08 FONT_PIXEL
             tvout.s:508    .text:0000000000000c18 INCR_X
             tvout.s:515    .text:0000000000000c24 NEXT_PIXEL
             tvout.s:524    .text:0000000000000c2c CHAR_ROW
             tvout.s:526    .text:0000000000000c30 $d
             forth.s:729    .text:0000000000001d74 DDUP
             forth.s:396    .text:0000000000001ad0 RAT
             forth.s:302    .text:0000000000001a2c DONXT
             forth.s:720    .text:0000000000001d60 TDROP
             tvout.s:543    .text:0000000000000c6c CHAR_FONT
             tvout.s:544    .text:0000000000000c6c $t
             tvout.s:555    .text:0000000000000c80 $d
             tvout.s:555    .text:0000000000000c84 _TV_EMIT
             tvout.s:555    .text:0000000000000c8c $t
             tvout.s:557    .text:0000000000000c90 $d
             forth.s:801    .text:0000000000001e08 ULESS
             tvout.s:585    .text:0000000000000d14 CTRL_KEY
             forth.s:361    .text:0000000000001a90 AT
             forth.s:689    .text:0000000000001d24 ROT
             forth.s:379    .text:0000000000001ab0 CAT
             tvout.s:652    .text:0000000000000dfc SHOW_CURSOR
             tvout.s:683    .text:0000000000000e84 HIDE_CURSOR
             forth.s:789    .text:0000000000001df0 EQUAL
             tvout.s:642    .text:0000000000000ddc BACK_SPACE
             forth.s:441    .text:0000000000001b2c DROP
             tvout.s:610    .text:0000000000000d84 CAR_RET
             tvout.s:621    .text:0000000000000d9c LN_FEED
             tvout.s:611    .text:0000000000000d84 $t
             tvout.s:612    .text:0000000000000d88 $d
             tvout.s:622    .text:0000000000000d9c $t
             tvout.s:623    .text:0000000000000da0 $d
             forth.s:502    .text:0000000000001ba8 XORR
             tvout.s:643    .text:0000000000000ddc $t
             tvout.s:644    .text:0000000000000de0 $d
             tvout.s:652    .text:0000000000000df0 _SHOW_CURSOR
             tvout.s:652    .text:0000000000000dfc $t
             tvout.s:655    .text:0000000000000e00 $d
             forth.s:671    .text:0000000000001d00 TWOSL
             forth.s:369    .text:0000000000001a9c CSTOR
             forth.s:711    .text:0000000000001d4c DDROP
             tvout.s:683    .text:0000000000000e78 _HIDE_CURSOR
             tvout.s:683    .text:0000000000000e84 $t
             tvout.s:686    .text:0000000000000e88 $d
             forth.s:532    .text:0000000000001bf0 LSHIFT
             forth.s:493    .text:0000000000001b94 ORR
             tvout.s:696    .text:0000000000000eb0 _TV_AT
             tvout.s:696    .text:0000000000000eb6 $t
             tvout.s:696    .text:0000000000000eb8 TV_AT
             tvout.s:711    .text:0000000000000edc $d
ARM GAS  forth.s 			page 152


             tvout.s:711    .text:0000000000000ee0 _INPUT
             tvout.s:711    .text:0000000000000ee6 $t
             tvout.s:711    .text:0000000000000ee8 INPUT
             tvout.s:713    .text:0000000000000eec $d
             forth.s:1340   .text:00000000000022b0 PAD
             forth.s:2338   .text:0000000000002dcc ACCEP
             forth.s:467    .text:0000000000001b60 OVER
             tvout.s:726    .rodata:0000000000000000 $d
             tvout.s:831    .text:0000000000000f18 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
ARM GAS  forth.s 			page 153


       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
ARM GAS  forth.s 			page 154


       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f24 sc_ascii
         mcSaite.inc:100    .text:0000000000000fd8 shifted
         mcSaite.inc:151    .text:0000000000001038 altchar
         mcSaite.inc:167    .text:0000000000001048 extended
         mcSaite.inc:191    .text:0000000000001070 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000c KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000b KBD_CLOCK_PIN
           ps2_kbd.s:77     .text:00000000000010a6 $t
           ps2_kbd.s:178    .text:00000000000011d2 send_bit
           ps2_kbd.s:106    .text:0000000000001108 start_bit
           ps2_kbd.s:117    .text:000000000000112c parity_bit
           ps2_kbd.s:124    .text:0000000000001140 stop_bit
           ps2_kbd.s:151    .text:0000000000001196 store_code
           ps2_kbd.s:252    .text:0000000000001266 do_async_key
           ps2_kbd.s:203    .text:0000000000001216 send_parity
           ps2_kbd.s:210    .text:0000000000001228 send_stop
ARM GAS  forth.s 			page 155


           ps2_kbd.s:217    .text:0000000000001232 rx_ack_bit
           ps2_kbd.s:235    .text:0000000000001252 is_async_key
           ps2_kbd.s:285    .text:00000000000012b6 async_keys
           ps2_kbd.s:373    .text:000000000000138a table_scan
           ps2_kbd.s:259    .text:0000000000001278 set_async_key
           ps2_kbd.s:294    .text:00000000000012c4 async_jump
           ps2_kbd.s:264    .text:0000000000001286 shift_key
           ps2_kbd.s:272    .text:0000000000001296 set_reset
           ps2_kbd.s:267    .text:000000000000128c ctrl_key
           ps2_kbd.s:270    .text:0000000000001292 alt_key
           ps2_kbd.s:286    .text:00000000000012b6 $d
           ps2_kbd.s:335    .text:0000000000001336 $d
           ps2_kbd.s:335    .text:000000000000133a _KEY_ASYNC
           ps2_kbd.s:335    .text:0000000000001344 $t
           ps2_kbd.s:335    .text:0000000000001344 KEY_ASYNC
           ps2_kbd.s:345    .text:0000000000001352 keycode
           ps2_kbd.s:360    .text:000000000000137a wait_code
           ps2_kbd.s:391    .text:00000000000013a4 $d
           ps2_kbd.s:391    .text:00000000000013a8 _PS2_QKEY
           ps2_kbd.s:411    .text:0000000000001400 inkey_exit
           ps2_kbd.s:413    .text:0000000000001402 pause_key
           ps2_kbd.s:422    .text:0000000000001416 do_modifiers
           ps2_kbd.s:431    .text:000000000000142e shift_down
           ps2_kbd.s:435    .text:0000000000001434 altchar_down
           ps2_kbd.s:439    .text:000000000000143a ctrl_down
           ps2_kbd.s:447    .text:0000000000001456 do_capslock
           ps2_kbd.s:473    .text:000000000000147a kbd_send
           ps2_kbd.s:548    .text:000000000000156e kbd_clear_queue
           ps2_kbd.s:562    .text:000000000000158c $d
           ps2_kbd.s:562    .text:0000000000001590 _KBD_RST
           ps2_kbd.s:562    .text:0000000000001598 $t
           ps2_kbd.s:562    .text:0000000000001598 KBD_RST
           ps2_kbd.s:586    .text:00000000000015e0 $d
           ps2_kbd.s:586    .text:00000000000015e4 _KBD_LED
           ps2_kbd.s:586    .text:00000000000015ec $t
           ps2_kbd.s:586    .text:00000000000015ec KBD_LED
           ps2_kbd.s:611    .text:000000000000163e $d
           ps2_kbd.s:611    .text:0000000000001642 _CAPS_LED
           ps2_kbd.s:611    .text:000000000000164c CAPS_LED
           ps2_kbd.s:628    .text:0000000000001674 $d
           ps2_kbd.s:628    .text:0000000000001678 _WKEY
           ps2_kbd.s:628    .text:0000000000001684 WKEY
           ps2_kbd.s:630    .text:0000000000001688 $d
           ps2_kbd.s:635    .text:00000000000016a0 $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016c0 $t
         spi-flash.s:76     .text:0000000000001748 $d
         spi-flash.s:76     .text:000000000000174c _CHIP_SEL
         spi-flash.s:76     .text:0000000000001758 CHIP_SEL
         spi-flash.s:88     .text:0000000000001774 $d
         spi-flash.s:88     .text:0000000000001778 _CHIP_DSEL
         spi-flash.s:88     .text:0000000000001782 $t
         spi-flash.s:88     .text:0000000000001784 CHIP_DSEL
         spi-flash.s:100    .text:00000000000017a0 $d
ARM GAS  forth.s 			page 156


         spi-flash.s:100    .text:00000000000017a4 _READ_BYTE
         spi-flash.s:100    .text:00000000000017ae $t
         spi-flash.s:100    .text:00000000000017b0 READ_BYTE
         spi-flash.s:122    .text:00000000000017de $d
         spi-flash.s:122    .text:00000000000017e2 _WRITE_BYTE
         spi-flash.s:122    .text:00000000000017f0 WRITE_BYTE
         spi-flash.s:139    .text:0000000000001812 $d
         spi-flash.s:139    .text:0000000000001816 _WR_ENBL
         spi-flash.s:139    .text:000000000000181e $t
         spi-flash.s:139    .text:0000000000001820 WR_ENBL
         spi-flash.s:141    .text:0000000000001824 $d
         spi-flash.s:151    .text:0000000000001840 _FLASH_RDSR
         spi-flash.s:151    .text:000000000000184c FLASH_RDSR
         spi-flash.s:153    .text:0000000000001850 $d
         spi-flash.s:161    .text:0000000000001874 sr_cmd
             forth.s:83     .text:0000000000001878 TPUSH
             forth.s:88     .text:000000000000187e TPOP
             forth.s:113    .text:000000000000189c COMPI_NEST
             forth.s:126    .text:00000000000018ba TSTDIN
             forth.s:133    .text:00000000000018c4 TSTDOUT
             forth.s:142    .text:00000000000018ce $d
             forth.s:142    .text:00000000000018d2 _QKEY
             forth.s:142    .text:00000000000018d8 QKEY
             forth.s:143    .text:00000000000018d8 QRX
             forth.s:145    .text:00000000000018dc $d
             forth.s:1363   .text:00000000000022e8 ATEXE
             forth.s:153    .text:00000000000018ec _KEY
             forth.s:153    .text:00000000000018f0 $t
             forth.s:153    .text:00000000000018f0 KEY
             forth.s:155    .text:00000000000018f4 KEY1
             forth.s:156    .text:00000000000018f4 $d
             forth.s:165    .text:000000000000190c _EMIT
             forth.s:166    .text:0000000000001914 TECHO
             forth.s:168    .text:0000000000001918 $d
             forth.s:202    .text:0000000000001928 _RAND
             forth.s:202    .text:0000000000001930 RAND
             forth.s:204    .text:0000000000001934 $d
             forth.s:768    .text:0000000000001dc8 ABSS
             forth.s:944    .text:0000000000001f08 SEED
             forth.s:523    .text:0000000000001bd8 RSHIFT
             forth.s:1214   .text:000000000000216c MODD
             forth.s:233    .text:00000000000019a4 _PAUSE
             forth.s:233    .text:00000000000019aa $t
             forth.s:233    .text:00000000000019ac PAUSE
             forth.s:235    .text:00000000000019b0 $d
             forth.s:962    .text:0000000000001f30 TIMER
             forth.s:237    .text:00000000000019b8 PAUSE_LOOP
             forth.s:242    .text:00000000000019d0 PAUSE_EXIT
             forth.s:249    .text:00000000000019d8 _ULED
             forth.s:249    .text:00000000000019e0 ULED
             forth.s:258    .text:00000000000019fc ULED_OFF
             forth.s:272    .text:0000000000001a00 $d
             forth.s:272    .text:0000000000001a04 _NOP
             forth.s:272    .text:0000000000001a08 $t
             forth.s:272    .text:0000000000001a08 NOP
             forth.s:289    .text:0000000000001a14 $d
             forth.s:289    .text:0000000000001a18 _EXECU
ARM GAS  forth.s 			page 157


             forth.s:289    .text:0000000000001a20 $t
             forth.s:289    .text:0000000000001a20 EXECU
             forth.s:309    .text:0000000000001a3c NEXT1
             forth.s:327    .text:0000000000001a58 QBRAN1
             forth.s:344    .text:0000000000001a64 $d
             forth.s:344    .text:0000000000001a68 _EXIT
             forth.s:344    .text:0000000000001a70 EXIT
             forth.s:345    .text:0000000000001a70 $d
             forth.s:351    .text:0000000000001a78 _STORE
             forth.s:351    .text:0000000000001a7a $t
             forth.s:361    .text:0000000000001a88 $d
             forth.s:361    .text:0000000000001a8c _AT
             forth.s:361    .text:0000000000001a8e $t
             forth.s:369    .text:0000000000001a94 $d
             forth.s:369    .text:0000000000001a98 _CSTOR
             forth.s:379    .text:0000000000001aa8 $d
             forth.s:379    .text:0000000000001aac _CAT
             forth.s:387    .text:0000000000001ab4 $d
             forth.s:387    .text:0000000000001ab8 _RFROM
             forth.s:396    .text:0000000000001ac6 $d
             forth.s:396    .text:0000000000001aca _RAT
             forth.s:405    .text:0000000000001ada $d
             forth.s:405    .text:0000000000001ade _TOR
             forth.s:414    .text:0000000000001aee $d
             forth.s:414    .text:0000000000001af2 _RPSTOR
             forth.s:414    .text:0000000000001af6 $t
             forth.s:414    .text:0000000000001af8 RPSTOR
             forth.s:423    .text:0000000000001b00 $d
             forth.s:423    .text:0000000000001b04 _SPSTOR
             forth.s:423    .text:0000000000001b08 $t
             forth.s:423    .text:0000000000001b08 SPSTOR
             forth.s:432    .text:0000000000001b10 $d
             forth.s:432    .text:0000000000001b14 _SPAT
             forth.s:432    .text:0000000000001b18 $t
             forth.s:432    .text:0000000000001b18 SPAT
             forth.s:441    .text:0000000000001b20 $d
             forth.s:441    .text:0000000000001b24 _DROP
             forth.s:449    .text:0000000000001b32 $d
             forth.s:449    .text:0000000000001b36 _DUPP
             forth.s:449    .text:0000000000001b3a $t
             forth.s:457    .text:0000000000001b42 $d
             forth.s:457    .text:0000000000001b46 _SWAP
             forth.s:467    .text:0000000000001b54 $d
             forth.s:467    .text:0000000000001b58 _OVER
             forth.s:476    .text:0000000000001b68 $d
             forth.s:476    .text:0000000000001b6c _ZLESS
             forth.s:476    .text:0000000000001b70 ZLESS
             forth.s:484    .text:0000000000001b76 $d
             forth.s:484    .text:0000000000001b7a _ANDD
             forth.s:484    .text:0000000000001b7e $t
             forth.s:493    .text:0000000000001b8a $d
             forth.s:493    .text:0000000000001b8e _ORR
             forth.s:502    .text:0000000000001b9e $d
             forth.s:502    .text:0000000000001ba2 _XORR
             forth.s:502    .text:0000000000001ba6 $t
             forth.s:511    .text:0000000000001bb2 $d
             forth.s:511    .text:0000000000001bb6 _UPLUS
ARM GAS  forth.s 			page 158


             forth.s:511    .text:0000000000001bba $t
             forth.s:511    .text:0000000000001bbc UPLUS
             forth.s:523    .text:0000000000001bcc $d
             forth.s:523    .text:0000000000001bd0 _RSHIFT
             forth.s:532    .text:0000000000001be2 $d
             forth.s:532    .text:0000000000001be6 _LSHIFT
             forth.s:541    .text:0000000000001bfa $d
             forth.s:541    .text:0000000000001bfe _PLUS
             forth.s:541    .text:0000000000001c00 $t
             forth.s:550    .text:0000000000001c08 $d
             forth.s:550    .text:0000000000001c0c _SUBB
             forth.s:550    .text:0000000000001c0e $t
             forth.s:559    .text:0000000000001c1a $d
             forth.s:559    .text:0000000000001c1e _STAR
             forth.s:559    .text:0000000000001c20 $t
             forth.s:568    .text:0000000000001c2a $d
             forth.s:568    .text:0000000000001c2e _UMSTA
             forth.s:568    .text:0000000000001c32 $t
             forth.s:568    .text:0000000000001c34 UMSTA
             forth.s:579    .text:0000000000001c40 $d
             forth.s:579    .text:0000000000001c44 _MSTAR
             forth.s:579    .text:0000000000001c48 MSTAR
             forth.s:590    .text:0000000000001c54 $d
             forth.s:590    .text:0000000000001c58 _ONEP
             forth.s:598    .text:0000000000001c62 $d
             forth.s:598    .text:0000000000001c66 _ONEM
             forth.s:606    .text:0000000000001c72 $d
             forth.s:606    .text:0000000000001c76 _TWOP
             forth.s:606    .text:0000000000001c7c TWOP
             forth.s:614    .text:0000000000001c82 $d
             forth.s:614    .text:0000000000001c86 _TWOM
             forth.s:614    .text:0000000000001c8c TWOM
             forth.s:622    .text:0000000000001c92 $d
             forth.s:622    .text:0000000000001c96 _CELLP
             forth.s:622    .text:0000000000001c9c $t
             forth.s:622    .text:0000000000001c9c CELLP
             forth.s:630    .text:0000000000001ca2 $d
             forth.s:630    .text:0000000000001ca6 _CELLM
             forth.s:630    .text:0000000000001cac $t
             forth.s:630    .text:0000000000001cac CELLM
             forth.s:638    .text:0000000000001cb2 $d
             forth.s:638    .text:0000000000001cb6 _BLANK
             forth.s:638    .text:0000000000001cbc BLANK
             forth.s:647    .text:0000000000001cc6 $d
             forth.s:647    .text:0000000000001cca _CELLS
             forth.s:647    .text:0000000000001cd0 $t
             forth.s:647    .text:0000000000001cd0 CELLS
             forth.s:655    .text:0000000000001cd6 $d
             forth.s:655    .text:0000000000001cda _CELLSL
             forth.s:655    .text:0000000000001ce0 $t
             forth.s:655    .text:0000000000001ce0 CELLSL
             forth.s:663    .text:0000000000001ce6 $d
             forth.s:663    .text:0000000000001cea _TWOST
             forth.s:663    .text:0000000000001cf0 TWOST
             forth.s:671    .text:0000000000001cf6 $d
             forth.s:671    .text:0000000000001cfa _TWOSL
             forth.s:679    .text:0000000000001d06 $d
ARM GAS  forth.s 			page 159


             forth.s:679    .text:0000000000001d0a _QDUP
             forth.s:689    .text:0000000000001d1a $d
             forth.s:689    .text:0000000000001d1e _ROT
             forth.s:689    .text:0000000000001d22 $t
             forth.s:700    .text:0000000000001d2e $d
             forth.s:700    .text:0000000000001d32 _NROT
             forth.s:700    .text:0000000000001d38 NROT
             forth.s:711    .text:0000000000001d42 $d
             forth.s:711    .text:0000000000001d46 _DDROP
             forth.s:711    .text:0000000000001d4c $t
             forth.s:720    .text:0000000000001d56 $d
             forth.s:720    .text:0000000000001d5a _TDROP
             forth.s:720    .text:0000000000001d60 $t
             forth.s:729    .text:0000000000001d6a $d
             forth.s:729    .text:0000000000001d6e _DDUP
             forth.s:739    .text:0000000000001d80 $d
             forth.s:739    .text:0000000000001d84 _DPLUS
             forth.s:739    .text:0000000000001d88 DPLUS
             forth.s:752    .text:0000000000001d9c $d
             forth.s:752    .text:0000000000001da0 _INVER
             forth.s:752    .text:0000000000001da4 $t
             forth.s:752    .text:0000000000001da4 INVER
             forth.s:760    .text:0000000000001daa $d
             forth.s:760    .text:0000000000001dae _NEGAT
             forth.s:760    .text:0000000000001db8 NEGAT
             forth.s:768    .text:0000000000001dbe $d
             forth.s:768    .text:0000000000001dc2 _ABSS
             forth.s:768    .text:0000000000001dc6 $t
             forth.s:778    .text:0000000000001dd2 $d
             forth.s:778    .text:0000000000001dd6 _ZEQUAL
             forth.s:778    .text:0000000000001ddc ZEQUAL
             forth.s:789    .text:0000000000001dea $d
             forth.s:789    .text:0000000000001dee _EQUAL
             forth.s:789    .text:0000000000001df0 $t
             forth.s:801    .text:0000000000001e00 $d
             forth.s:801    .text:0000000000001e04 _ULESS
             forth.s:813    .text:0000000000001e18 $d
             forth.s:813    .text:0000000000001e1c _LESS
             forth.s:813    .text:0000000000001e1e $t
             forth.s:813    .text:0000000000001e20 LESS
             forth.s:825    .text:0000000000001e30 $d
             forth.s:825    .text:0000000000001e34 _GREAT
             forth.s:825    .text:0000000000001e36 $t
             forth.s:825    .text:0000000000001e38 GREAT
             forth.s:837    .text:0000000000001e48 $d
             forth.s:837    .text:0000000000001e4c _MAX
             forth.s:837    .text:0000000000001e50 $t
             forth.s:837    .text:0000000000001e50 MAX
             forth.s:848    .text:0000000000001e5c $d
             forth.s:848    .text:0000000000001e60 _MIN
             forth.s:848    .text:0000000000001e64 $t
             forth.s:848    .text:0000000000001e64 MIN
             forth.s:859    .text:0000000000001e70 $d
             forth.s:859    .text:0000000000001e74 _PSTOR
             forth.s:859    .text:0000000000001e78 PSTOR
             forth.s:871    .text:0000000000001e88 $d
             forth.s:871    .text:0000000000001e8c _DSTOR
ARM GAS  forth.s 			page 160


             forth.s:871    .text:0000000000001e90 DSTOR
             forth.s:883    .text:0000000000001ea4 $d
             forth.s:883    .text:0000000000001ea8 _DAT
             forth.s:883    .text:0000000000001eac DAT
             forth.s:893    .text:0000000000001eb6 $d
             forth.s:893    .text:0000000000001eba _COUNT
             forth.s:893    .text:0000000000001ec0 $t
             forth.s:903    .text:0000000000001ecc $d
             forth.s:903    .text:0000000000001ed0 _DNEGA
             forth.s:903    .text:0000000000001ed8 $t
             forth.s:903    .text:0000000000001ed8 DNEGA
             forth.s:920    .text:0000000000001ee8 DOVAR
             forth.s:931    .text:0000000000001ef4 DOCON
             forth.s:944    .text:0000000000001efe $d
             forth.s:944    .text:0000000000001f02 _SEED
             forth.s:953    .text:0000000000001f12 $d
             forth.s:953    .text:0000000000001f16 _MSEC
             forth.s:953    .text:0000000000001f1c MSEC
             forth.s:962    .text:0000000000001f26 $d
             forth.s:962    .text:0000000000001f2a _TIMER
             forth.s:962    .text:0000000000001f30 $t
             forth.s:971    .text:0000000000001f3a $d
             forth.s:971    .text:0000000000001f3e _TBOOT
             forth.s:971    .text:0000000000001f44 $t
             forth.s:971    .text:0000000000001f44 TBOOT
             forth.s:980    .text:0000000000001f4e $d
             forth.s:980    .text:0000000000001f52 _BASE
             forth.s:990    .text:0000000000001f62 TEMP
             forth.s:999    .text:0000000000001f6c $d
             forth.s:999    .text:0000000000001f70 _SPAN
             forth.s:999    .text:0000000000001f78 SPAN
             forth.s:1008   .text:0000000000001f82 $d
             forth.s:1008   .text:0000000000001f86 _INN
             forth.s:1008   .text:0000000000001f8a $t
             forth.s:1008   .text:0000000000001f8c INN
             forth.s:1018   .text:0000000000001f96 $d
             forth.s:1018   .text:0000000000001f9a _NTIB
             forth.s:1018   .text:0000000000001fa0 NTIB
             forth.s:1027   .text:0000000000001faa $d
             forth.s:1027   .text:0000000000001fae _TEVAL
             forth.s:1027   .text:0000000000001fb4 $t
             forth.s:1027   .text:0000000000001fb4 TEVAL
             forth.s:1037   .text:0000000000001fbe $d
             forth.s:1037   .text:0000000000001fc2 _HLD
             forth.s:1037   .text:0000000000001fc6 $t
             forth.s:1037   .text:0000000000001fc8 HLD
             forth.s:1047   .text:0000000000001fd2 $d
             forth.s:1047   .text:0000000000001fd6 _CNTXT
             forth.s:1047   .text:0000000000001fde $t
             forth.s:1047   .text:0000000000001fe0 CNTXT
             forth.s:1048   .text:0000000000001fe0 CRRNT
             forth.s:1058   .text:0000000000001fea $d
             forth.s:1058   .text:0000000000001fee _CPP
             forth.s:1058   .text:0000000000001ff4 CPP
             forth.s:1068   .text:0000000000001ffe $d
             forth.s:1068   .text:0000000000002002 _FCP
             forth.s:1068   .text:0000000000002006 $t
ARM GAS  forth.s 			page 161


             forth.s:1068   .text:0000000000002008 FCP
             forth.s:1078   .text:0000000000002012 $d
             forth.s:1078   .text:0000000000002016 _LAST
             forth.s:1078   .text:000000000000201c LAST
             forth.s:1092   .text:0000000000002026 $d
             forth.s:1092   .text:000000000000202a _USER_BEGIN
             forth.s:1092   .text:0000000000002038 USER_BEGIN
             forth.s:1096   .text:0000000000002040 USR_BGN_ADR
             forth.s:1097   .text:0000000000002040 $d
             forth.s:1103   .text:0000000000002048 _USER_END
             forth.s:1103   .text:0000000000002054 USER_END
             forth.s:1107   .text:000000000000205c USER_END_ADR
             forth.s:1108   .text:000000000000205c $d
             forth.s:1120   .text:0000000000002064 _WITHI
             forth.s:1120   .text:000000000000206c WITHI
             forth.s:1122   .text:0000000000002070 $d
             forth.s:1137   .text:0000000000002090 _UMMOD
             forth.s:1137   .text:0000000000002098 UMMOD
             forth.s:1141   .text:00000000000020a2 UMMOD0
             forth.s:1148   .text:00000000000020b2 UMMOD1
             forth.s:1154   .text:00000000000020bc UMMOD2
             forth.s:1167   .text:00000000000020c8 $d
             forth.s:1167   .text:00000000000020cc _MSMOD
             forth.s:1167   .text:00000000000020d2 $t
             forth.s:1167   .text:00000000000020d4 MSMOD
             forth.s:1169   .text:00000000000020d8 $d
             forth.s:1178   .text:0000000000002100 MMOD1
             forth.s:1185   .text:000000000000211c MMOD2
             forth.s:1193   .text:000000000000213c MMOD3
             forth.s:1201   .text:0000000000002144 _SLMOD
             forth.s:1203   .text:0000000000002150 $d
             forth.s:1214   .text:0000000000002168 _MODD
             forth.s:1214   .text:000000000000216c $t
             forth.s:1216   .text:0000000000002170 $d
             forth.s:1225   .text:0000000000002180 _SLASH
             forth.s:1225   .text:0000000000002182 $t
             forth.s:1225   .text:0000000000002184 SLASH
             forth.s:1227   .text:0000000000002188 $d
             forth.s:1238   .text:000000000000219c _SSMOD
             forth.s:1238   .text:00000000000021a2 $t
             forth.s:1238   .text:00000000000021a4 SSMOD
             forth.s:1240   .text:00000000000021a8 $d
             forth.s:1252   .text:00000000000021c0 _STASL
             forth.s:1252   .text:00000000000021c4 STASL
             forth.s:1254   .text:00000000000021c8 $d
             forth.s:1268   .text:00000000000021dc _ALGND
             forth.s:1268   .text:00000000000021e4 $t
             forth.s:1268   .text:00000000000021e4 ALGND
             forth.s:1279   .text:00000000000021f4 $d
             forth.s:1279   .text:00000000000021f8 _TCHAR
             forth.s:1279   .text:00000000000021fe $t
             forth.s:1279   .text:0000000000002200 TCHAR
             forth.s:1281   .text:0000000000002204 $d
             forth.s:1291   .text:000000000000223c TCHA1
             forth.s:1299   .text:0000000000002244 _DEPTH
             forth.s:1299   .text:000000000000224a $t
             forth.s:1299   .text:000000000000224c DEPTH
ARM GAS  forth.s 			page 162


             forth.s:1311   .text:0000000000002264 $d
             forth.s:1311   .text:0000000000002268 _PICK
             forth.s:1311   .text:0000000000002270 PICK
             forth.s:1313   .text:0000000000002274 $d
             forth.s:1329   .text:0000000000002290 _HERE
             forth.s:1329   .text:0000000000002298 HERE
             forth.s:1331   .text:000000000000229c $d
             forth.s:1340   .text:00000000000022ac _PAD
             forth.s:1340   .text:00000000000022b0 $t
             forth.s:1342   .text:00000000000022b4 $d
             forth.s:1353   .text:00000000000022cc _TIB
             forth.s:1353   .text:00000000000022d0 $t
             forth.s:1353   .text:00000000000022d0 TIB
             forth.s:1363   .text:00000000000022da $d
             forth.s:1363   .text:00000000000022de _ATEXE
             forth.s:1376   .text:00000000000022fc $d
             forth.s:1376   .text:0000000000002300 _CMOVE
             forth.s:1376   .text:0000000000002306 $t
             forth.s:1376   .text:0000000000002308 CMOVE
             forth.s:1383   .text:000000000000231a CMOV1
             forth.s:1380   .text:0000000000002312 CMOV0
             forth.s:1388   .text:0000000000002324 CMOV2
             forth.s:1396   .text:000000000000232c $d
             forth.s:1396   .text:0000000000002330 _MOVE
             forth.s:1414   .text:0000000000002362 MOVE1
             forth.s:1411   .text:000000000000235e MOVE3
             forth.s:1408   .text:000000000000235a MOVE0
             forth.s:1419   .text:000000000000236c MOVE2
             forth.s:1428   .text:0000000000002374 $d
             forth.s:1428   .text:0000000000002378 _FILL
             forth.s:1436   .text:000000000000238e FILL2
             forth.s:1432   .text:0000000000002386 FILL1
             forth.s:1446   .text:0000000000002396 $d
             forth.s:1446   .text:000000000000239a _PACKS
             forth.s:1446   .text:00000000000023a0 $t
             forth.s:1446   .text:00000000000023a0 PACKS
             forth.s:1448   .text:00000000000023a4 $d
             forth.s:1477   .text:00000000000023fc _DIGIT
             forth.s:1477   .text:0000000000002402 $t
             forth.s:1477   .text:0000000000002404 DIGIT
             forth.s:1479   .text:0000000000002408 $d
             forth.s:1494   .text:000000000000243c _EXTRC
             forth.s:1494   .text:0000000000002444 $t
             forth.s:1494   .text:0000000000002444 EXTRC
             forth.s:1496   .text:0000000000002448 $d
             forth.s:1508   .text:0000000000002468 _BDIGS
             forth.s:1508   .text:000000000000246c BDIGS
             forth.s:1510   .text:0000000000002470 $d
             forth.s:1520   .text:0000000000002484 _HOLD
             forth.s:1522   .text:0000000000002490 $d
             forth.s:1538   .text:00000000000024b4 _DIG
             forth.s:1538   .text:00000000000024b6 $t
             forth.s:1538   .text:00000000000024b8 DIG
             forth.s:1540   .text:00000000000024bc $d
             forth.s:1552   .text:00000000000024d4 _DIGS
             forth.s:1552   .text:00000000000024d8 DIGS
             forth.s:1554   .text:00000000000024dc DIGS1
ARM GAS  forth.s 			page 163


             forth.s:1555   .text:00000000000024dc $d
             forth.s:1559   .text:00000000000024f4 DIGS2
             forth.s:1568   .text:00000000000024fc _SIGN
             forth.s:1568   .text:0000000000002504 SIGN
             forth.s:1570   .text:0000000000002508 $d
             forth.s:1574   .text:0000000000002520 SIGN1
             forth.s:1582   .text:0000000000002528 _EDIGS
             forth.s:1582   .text:000000000000252c EDIGS
             forth.s:1584   .text:0000000000002530 $d
             forth.s:1599   .text:000000000000254c STRR
             forth.s:1600   .text:000000000000254c $t
             forth.s:1601   .text:0000000000002550 $d
             forth.s:1617   .text:0000000000002578 _HEX
             forth.s:1617   .text:000000000000257c $t
             forth.s:1617   .text:000000000000257c HEX
             forth.s:1619   .text:0000000000002580 $d
             forth.s:1629   .text:0000000000002598 _DECIM
             forth.s:1629   .text:00000000000025a0 $t
             forth.s:1629   .text:00000000000025a0 DECIM
             forth.s:1631   .text:00000000000025a4 $d
             forth.s:1646   .text:00000000000025bc _DIGTQ
             forth.s:1646   .text:00000000000025c4 DIGTQ
             forth.s:1648   .text:00000000000025c8 $d
             forth.s:1661   .text:0000000000002610 DGTQ1
             forth.s:1672   .text:0000000000002624 _NUMBQ
             forth.s:1672   .text:000000000000262c $t
             forth.s:1672   .text:000000000000262c NUMBQ
             forth.s:1674   .text:0000000000002630 $d
             forth.s:1690   .text:000000000000267c NUMQ1
             forth.s:1738   .text:0000000000002744 NUMQ6
             forth.s:1706   .text:00000000000026c0 NUMQ2
             forth.s:1730   .text:0000000000002728 NUMQ4
             forth.s:1727   .text:000000000000271c NUMQ3
             forth.s:1736   .text:0000000000002740 NUMQ5
             forth.s:1756   .text:0000000000002760 _SPACE
             forth.s:1756   .text:0000000000002766 $t
             forth.s:1758   .text:000000000000276c $d
             forth.s:1767   .text:000000000000277c _SPACS
             forth.s:1767   .text:0000000000002784 SPACS
             forth.s:1769   .text:0000000000002788 $d
             forth.s:1775   .text:00000000000027a4 CHAR2
             forth.s:1773   .text:00000000000027a0 CHAR1
             forth.s:1784   .text:00000000000027b4 _TYPEE
             forth.s:1786   .text:00000000000027c0 $d
             forth.s:1792   .text:00000000000027d8 TYPE2
             forth.s:1788   .text:00000000000027cc TYPE1
             forth.s:1802   .text:00000000000027ec _CR
             forth.s:1804   .text:00000000000027f4 $d
             forth.s:1816   .text:0000000000002810 DOSTR
             forth.s:1817   .text:0000000000002810 $t
             forth.s:1819   .text:0000000000002814 $d
             forth.s:1837   .text:000000000000283c STRQP
             forth.s:1838   .text:000000000000283c $t
             forth.s:1839   .text:0000000000002840 $d
             forth.s:1848   .text:0000000000002848 DOTST
             forth.s:1849   .text:0000000000002848 $t
             forth.s:1850   .text:000000000000284c $d
ARM GAS  forth.s 			page 164


             forth.s:1860   .text:0000000000002858 DOTQP
             forth.s:1861   .text:0000000000002858 $t
             forth.s:1862   .text:000000000000285c $d
             forth.s:1872   .text:000000000000286c _DOTR
             forth.s:1872   .text:0000000000002870 DOTR
             forth.s:1874   .text:0000000000002874 $d
             forth.s:1889   .text:0000000000002898 _UDOTR
             forth.s:1889   .text:000000000000289c $t
             forth.s:1889   .text:000000000000289c UDOTR
             forth.s:1891   .text:00000000000028a0 $d
             forth.s:1907   .text:00000000000028cc _UDOT
             forth.s:1907   .text:00000000000028d0 UDOT
             forth.s:1909   .text:00000000000028d4 $d
             forth.s:1922   .text:00000000000028f0 _DOT
             forth.s:1922   .text:00000000000028f2 $t
             forth.s:1924   .text:00000000000028f8 $d
             forth.s:1931   .text:000000000000291c DOT1
             forth.s:1942   .text:0000000000002930 _QUEST
             forth.s:1942   .text:0000000000002932 $t
             forth.s:1942   .text:0000000000002934 QUEST
             forth.s:1944   .text:0000000000002938 $d
             forth.s:1958   .text:0000000000002944 PARS
             forth.s:1959   .text:0000000000002944 $t
             forth.s:1960   .text:0000000000002948 $d
             forth.s:2026   .text:0000000000002a58 PARS8
             forth.s:1990   .text:00000000000029cc PARS3
             forth.s:1973   .text:0000000000002984 PARS1
             forth.s:1988   .text:00000000000029c8 PARS2
             forth.s:1994   .text:00000000000029d8 PARS4
             forth.s:2006   .text:0000000000002a08 PARS5
             forth.s:2013   .text:0000000000002a2c PARS6
             forth.s:2019   .text:0000000000002a40 PARS7
             forth.s:2037   .text:0000000000002a6c _PARSE
             forth.s:2037   .text:0000000000002a72 $t
             forth.s:2037   .text:0000000000002a74 PARSE
             forth.s:2039   .text:0000000000002a78 $d
             forth.s:2060   .text:0000000000002ab8 _DOTPR
             forth.s:2060   .text:0000000000002abc DOTPR
             forth.s:2062   .text:0000000000002ac0 $d
             forth.s:2073   .text:0000000000002ad8 _PAREN
             forth.s:2073   .text:0000000000002ada $t
             forth.s:2073   .text:0000000000002adc PAREN
             forth.s:2075   .text:0000000000002ae0 $d
             forth.s:2086   .text:0000000000002af8 _BKSLA
             forth.s:2086   .text:0000000000002afa $t
             forth.s:2086   .text:0000000000002afc BKSLA
             forth.s:2088   .text:0000000000002b00 $d
             forth.s:2099   .text:0000000000002b18 _CHAR
             forth.s:2099   .text:0000000000002b20 CHAR
             forth.s:2101   .text:0000000000002b24 $d
             forth.s:2112   .text:0000000000002b3c _WORDD
             forth.s:2112   .text:0000000000002b44 WORDD
             forth.s:2114   .text:0000000000002b48 $d
             forth.s:2126   .text:0000000000002b60 _TOKEN
             forth.s:2126   .text:0000000000002b66 $t
             forth.s:2126   .text:0000000000002b68 TOKEN
             forth.s:2128   .text:0000000000002b6c $d
ARM GAS  forth.s 			page 165


             forth.s:2141   .text:0000000000002b7c _NAMET
             forth.s:2141   .text:0000000000002b82 $t
             forth.s:2141   .text:0000000000002b84 NAMET
             forth.s:2143   .text:0000000000002b88 $d
             forth.s:2162   .text:0000000000002ba8 _SAMEQ
             forth.s:2162   .text:0000000000002bae $t
             forth.s:2162   .text:0000000000002bb0 SAMEQ
             forth.s:2164   .text:0000000000002bb4 $d
             forth.s:2181   .text:0000000000002bfc SAME2
             forth.s:2166   .text:0000000000002bc0 SAME1
             forth.s:2196   .text:0000000000002c10 FIND
             forth.s:2197   .text:0000000000002c10 $t
             forth.s:2198   .text:0000000000002c14 $d
             forth.s:2205   .text:0000000000002c30 FIND1
             forth.s:2225   .text:0000000000002c88 FIND6
             forth.s:2218   .text:0000000000002c70 FIND2
             forth.s:2223   .text:0000000000002c80 FIND3
             forth.s:2232   .text:0000000000002ca0 FIND4
             forth.s:2238   .text:0000000000002cbc FIND5
             forth.s:2254   .text:0000000000002ce4 _NAMEQ
             forth.s:2254   .text:0000000000002cea $t
             forth.s:2254   .text:0000000000002cec NAMEQ
             forth.s:2256   .text:0000000000002cf0 $d
             forth.s:2270   .text:0000000000002d00 BKSP
             forth.s:2271   .text:0000000000002d00 $t
             forth.s:2272   .text:0000000000002d04 $d
             forth.s:2286   .text:0000000000002d48 BACK1
             forth.s:2295   .text:0000000000002d4c TAP
             forth.s:2296   .text:0000000000002d4c $t
             forth.s:2297   .text:0000000000002d50 $d
             forth.s:2309   .text:0000000000002d68 KTAP
             forth.s:2310   .text:0000000000002d68 TTAP
             forth.s:2311   .text:0000000000002d68 $t
             forth.s:2312   .text:0000000000002d6c $d
             forth.s:2326   .text:0000000000002dac KTAP2
             forth.s:2323   .text:0000000000002da4 KTAP1
             forth.s:2338   .text:0000000000002dc4 _ACCEP
             forth.s:2340   .text:0000000000002dd0 $d
             forth.s:2343   .text:0000000000002ddc ACCP1
             forth.s:2359   .text:0000000000002e24 ACCP4
             forth.s:2355   .text:0000000000002e18 ACCP2
             forth.s:2357   .text:0000000000002e1c ACCP3
             forth.s:2370   .text:0000000000002e38 _QUERY
             forth.s:2370   .text:0000000000002e3e $t
             forth.s:2370   .text:0000000000002e40 QUERY
             forth.s:2372   .text:0000000000002e44 $d
             forth.s:2392   .text:0000000000002e78 _ABORT
             forth.s:2392   .text:0000000000002e7e $t
             forth.s:2392   .text:0000000000002e80 ABORT
             forth.s:2394   .text:0000000000002e84 ABORT1
             forth.s:2395   .text:0000000000002e84 $d
             forth.s:2526   .text:0000000000003028 QUIT
             forth.s:2410   .text:0000000000002eac ABORQ
             forth.s:2411   .text:0000000000002eac $t
             forth.s:2412   .text:0000000000002eb0 $d
             forth.s:2430   .text:0000000000002ed4 _INTER
             forth.s:2432   .text:0000000000002ee4 $d
ARM GAS  forth.s 			page 166


             forth.s:2441   .text:0000000000002f20 INTE1
             forth.s:2438   .text:0000000000002f16 $t
             forth.s:2439   .text:0000000000002f18 $d
             forth.s:2445   .text:0000000000002f30 INTE2
             forth.s:2452   .text:0000000000002f38 _LBRAC
             forth.s:2452   .text:0000000000002f3a $t
             forth.s:2452   .text:0000000000002f3c LBRAC
             forth.s:2454   .text:0000000000002f40 $d
             forth.s:2464   .text:0000000000002f58 _DOTOK
             forth.s:2464   .text:0000000000002f5c $t
             forth.s:2464   .text:0000000000002f5c DOTOK
             forth.s:2466   .text:0000000000002f60 $d
             forth.s:2472   .text:0000000000002f84 DOTO1
             forth.s:2473   .text:0000000000002f84 $d
             forth.s:2481   .text:0000000000002f90 _QSTAC
             forth.s:2481   .text:0000000000002f98 QSTAC
             forth.s:2483   .text:0000000000002f9c $d
             forth.s:2485   .text:0000000000002fb2 $t
             forth.s:2486   .text:0000000000002fb4 $d
             forth.s:2493   .text:0000000000002fbc _EVAL
             forth.s:2495   .text:0000000000002fc8 EVAL1
             forth.s:2496   .text:0000000000002fc8 $d
             forth.s:2504   .text:0000000000002ff0 EVAL2
             forth.s:2514   .text:0000000000003000 _PRESE
             forth.s:2516   .text:000000000000300c $d
             forth.s:2526   .text:0000000000003020 _QUIT
             forth.s:2527   .text:0000000000003028 $d
             forth.s:2529   .text:0000000000003034 QUIT1
             forth.s:2531   .text:0000000000003038 QUIT2
             forth.s:2541   .text:000000000000304c _FORGET
             forth.s:2541   .text:0000000000003054 FORGET
             forth.s:2543   .text:0000000000003058 $d
             forth.s:2969   .text:0000000000003514 OVERT
             forth.s:2571   .text:00000000000030a0 $d
             forth.s:2571   .text:00000000000030a4 _TICK
             forth.s:2571   .text:00000000000030a6 $t
             forth.s:2571   .text:00000000000030a8 TICK
             forth.s:2573   .text:00000000000030ac $d
             forth.s:2577   .text:00000000000030c0 TICK1
             forth.s:2585   .text:00000000000030c8 _ALLOT
             forth.s:2585   .text:00000000000030ce $t
             forth.s:2585   .text:00000000000030d0 ALLOT
             forth.s:2587   .text:00000000000030d4 $d
             forth.s:2596   .text:00000000000030e4 _COMMA
             forth.s:2596   .text:00000000000030e6 $t
             forth.s:2596   .text:00000000000030e8 COMMA
             forth.s:2598   .text:00000000000030ec $d
             forth.s:2612   .text:0000000000003108 $d
             forth.s:2612   .text:000000000000310c _BCOMP
             forth.s:2612   .text:0000000000003116 $t
             forth.s:2612   .text:0000000000003118 BCOMP
             forth.s:2614   .text:000000000000311c $d
             forth.s:2624   .text:000000000000312c _COMPI
             forth.s:2624   .text:0000000000003134 $t
             forth.s:2624   .text:0000000000003134 COMPI
             forth.s:2626   .text:0000000000003138 $d
             forth.s:2642   .text:0000000000003164 _LITER
ARM GAS  forth.s 			page 167


             forth.s:2642   .text:000000000000316c $t
             forth.s:2642   .text:000000000000316c LITER
             forth.s:2644   .text:0000000000003170 $d
             forth.s:3008   .text:0000000000003570 CALLC
             forth.s:2654   .text:0000000000003184 STRCQ
             forth.s:2655   .text:0000000000003184 $t
             forth.s:2656   .text:0000000000003188 $d
             forth.s:2678   .text:00000000000031c0 _FOR
             forth.s:2678   .text:00000000000031c4 $t
             forth.s:2678   .text:00000000000031c4 FOR
             forth.s:2680   .text:00000000000031c8 $d
             forth.s:2690   .text:00000000000031e0 _BEGIN
             forth.s:2690   .text:00000000000031e6 $t
             forth.s:2690   .text:00000000000031e8 BEGIN
             forth.s:2692   .text:00000000000031ec $d
             forth.s:2701   .text:00000000000031f4 $d
             forth.s:2701   .text:00000000000031f8 _FNEXT
             forth.s:2701   .text:0000000000003200 FNEXT
             forth.s:2703   .text:0000000000003204 $d
             forth.s:2711   .text:000000000000321c _I
             forth.s:2711   .text:000000000000321e $t
             forth.s:2711   .text:0000000000003220 I
             forth.s:2721   .text:000000000000322c $d
             forth.s:2721   .text:0000000000003230 _UNTIL
             forth.s:2721   .text:0000000000003236 $t
             forth.s:2721   .text:0000000000003238 UNTIL
             forth.s:2723   .text:000000000000323c $d
             forth.s:2732   .text:0000000000003254 _AGAIN
             forth.s:2732   .text:000000000000325a $t
             forth.s:2732   .text:000000000000325c AGAIN
             forth.s:2734   .text:0000000000003260 $d
             forth.s:2743   .text:0000000000003278 _IFF
             forth.s:2743   .text:000000000000327c IFF
             forth.s:2745   .text:0000000000003280 $d
             forth.s:2757   .text:00000000000032a8 _AHEAD
             forth.s:2757   .text:00000000000032ae $t
             forth.s:2757   .text:00000000000032b0 AHEAD
             forth.s:2759   .text:00000000000032b4 $d
             forth.s:2771   .text:00000000000032dc _REPEA
             forth.s:2771   .text:00000000000032e4 REPEA
             forth.s:2773   .text:00000000000032e8 $d
             forth.s:2784   .text:0000000000003300 _THENN
             forth.s:2784   .text:0000000000003308 THENN
             forth.s:2786   .text:000000000000330c $d
             forth.s:2797   .text:0000000000003320 _AFT
             forth.s:2797   .text:0000000000003324 $t
             forth.s:2797   .text:0000000000003324 AFT
             forth.s:2799   .text:0000000000003328 $d
             forth.s:2811   .text:0000000000003340 _ELSEE
             forth.s:2811   .text:0000000000003348 ELSEE
             forth.s:2813   .text:000000000000334c $d
             forth.s:2823   .text:0000000000003360 _WHILE
             forth.s:2823   .text:0000000000003366 $t
             forth.s:2823   .text:0000000000003368 WHILE
             forth.s:2825   .text:000000000000336c $d
             forth.s:2834   .text:000000000000337c _ABRTQ
             forth.s:2834   .text:0000000000003384 ABRTQ
ARM GAS  forth.s 			page 168


             forth.s:2836   .text:0000000000003388 $d
             forth.s:2845   .text:00000000000033a0 _STRQ
             forth.s:2845   .text:00000000000033a4 STRQ
             forth.s:2847   .text:00000000000033a8 $d
             forth.s:2857   .text:00000000000033c0 _DOTQ
             forth.s:2857   .text:00000000000033c4 DOTQ
             forth.s:2859   .text:00000000000033c8 $d
             forth.s:2873   .text:00000000000033e0 _UNIQU
             forth.s:2873   .text:00000000000033e8 $t
             forth.s:2873   .text:00000000000033e8 UNIQU
             forth.s:2875   .text:00000000000033ec $d
             forth.s:2882   .text:0000000000003414 UNIQ1
             forth.s:2879   .text:0000000000003408 $d
             forth.s:2892   .text:000000000000341c SNAME
             forth.s:2893   .text:000000000000341c $t
             forth.s:2894   .text:0000000000003420 $d
             forth.s:2910   .text:0000000000003464 SNAM1
             forth.s:2922   .text:0000000000003478 _SCOMP
             forth.s:2922   .text:0000000000003484 SCOMP
             forth.s:2924   .text:0000000000003488 $d
             forth.s:2936   .text:00000000000034c0 SCOM2
             forth.s:2933   .text:00000000000034b8 SCOM1
             forth.s:2941   .text:00000000000034d4 SCOM3
             forth.s:2950   .text:00000000000034dc COLON_ABORT
             forth.s:2951   .text:00000000000034dc $t
             forth.s:2952   .text:00000000000034e0 $d
             forth.s:2969   .text:000000000000350c _OVERT
             forth.s:2969   .text:0000000000003512 $t
             forth.s:2971   .text:0000000000003518 $d
             forth.s:2982   .text:0000000000003530 _SEMIS
             forth.s:2982   .text:0000000000003532 $t
             forth.s:2982   .text:0000000000003534 SEMIS
             forth.s:2984   .text:0000000000003538 $d
             forth.s:2996   .text:0000000000003554 _RBRAC
             forth.s:2996   .text:0000000000003556 $t
             forth.s:2996   .text:0000000000003558 RBRAC
             forth.s:2998   .text:000000000000355c $d
             forth.s:3009   .text:0000000000003570 $t
             forth.s:3010   .text:0000000000003574 $d
             forth.s:3022   .text:000000000000358c _COLON
             forth.s:3022   .text:000000000000358e $t
             forth.s:3022   .text:0000000000003590 COLON
             forth.s:3024   .text:0000000000003594 $d
             forth.s:3035   .text:00000000000035ac _IMMED
             forth.s:3035   .text:00000000000035b6 $t
             forth.s:3035   .text:00000000000035b8 IMMED
             forth.s:3037   .text:00000000000035bc $d
             forth.s:3055   .text:00000000000035e8 _CONST
             forth.s:3055   .text:00000000000035f4 CONST
             forth.s:3057   .text:00000000000035f8 $d
             forth.s:3068   .text:0000000000003628 $t
             forth.s:3075   .text:0000000000003628 DODOES
             forth.s:3077   .text:000000000000362c $d
             forth.s:3092   .text:0000000000003650 $d
             forth.s:3092   .text:0000000000003654 _DOES
             forth.s:3092   .text:000000000000365a $t
             forth.s:3092   .text:000000000000365c DOES
ARM GAS  forth.s 			page 169


             forth.s:3094   .text:0000000000003660 $d
             forth.s:3109   .text:0000000000003690 _DEFERAT
             forth.s:3109   .text:0000000000003698 DEFERAT
             forth.s:3111   .text:000000000000369c $d
             forth.s:3121   .text:00000000000036b4 _DEFERSTO
             forth.s:3121   .text:00000000000036bc DEFERSTO
             forth.s:3123   .text:00000000000036c0 $d
             forth.s:3134   .text:00000000000036dc _DEFER
             forth.s:3134   .text:00000000000036e2 $t
             forth.s:3134   .text:00000000000036e4 DEFER
             forth.s:3136   .text:00000000000036e8 $d
             forth.s:3157   .text:0000000000003734 CREAT
             forth.s:3147   .text:000000000000371c DEFER_NOP
             forth.s:3148   .text:000000000000371c $t
             forth.s:3149   .text:0000000000003720 $d
             forth.s:3157   .text:000000000000372c _CREAT
             forth.s:3159   .text:0000000000003738 $d
             forth.s:3172   .text:000000000000375c _VARIA
             forth.s:3172   .text:0000000000003768 VARIA
             forth.s:3174   .text:000000000000376c $d
             forth.s:3191   .text:000000000000378c DMP
             forth.s:3192   .text:000000000000378c $t
             forth.s:3193   .text:0000000000003790 $d
             forth.s:3205   .text:00000000000037c8 PDUM2
             forth.s:3199   .text:00000000000037b0 PDUM1
             forth.s:3217   .text:00000000000037d4 $d
             forth.s:3217   .text:00000000000037d8 _DUMP
             forth.s:3217   .text:00000000000037e0 DUMP
             forth.s:3219   .text:00000000000037e4 $d
             forth.s:3237   .text:0000000000003834 DUMP4
             forth.s:3227   .text:000000000000380c DUMP1
             forth.s:3239   .text:000000000000383c DUMP3
             forth.s:3251   .text:0000000000003854 _DOTS
             forth.s:3251   .text:0000000000003858 DOTS
             forth.s:3253   .text:000000000000385c $d
             forth.s:3261   .text:000000000000387c DOTS2
             forth.s:3257   .text:0000000000003870 DOTS1
             forth.s:3271   .text:0000000000003890 _TNAME
             forth.s:3271   .text:0000000000003896 $t
             forth.s:3271   .text:0000000000003898 TNAME
             forth.s:3273   .text:000000000000389c $d
             forth.s:3276   .text:00000000000038a8 TNAM1
             forth.s:3287   .text:00000000000038dc TNAM2
             forth.s:3296   .text:00000000000038ec _DOTID
             forth.s:3296   .text:00000000000038f0 $t
             forth.s:3296   .text:00000000000038f0 DOTID
             forth.s:3298   .text:00000000000038f4 $d
             forth.s:3305   .text:0000000000003918 DOTI1
             forth.s:3306   .text:0000000000003926 $t
             forth.s:3307   .text:0000000000003928 $d
             forth.s:3309   *ABS*:0000000000000000 WANT_SEE
             forth.s:3382   .text:0000000000003930 _WORDS
             forth.s:3382   .text:0000000000003936 $t
             forth.s:3382   .text:0000000000003938 WORDS
             forth.s:3384   .text:000000000000393c $d
             forth.s:3387   .text:0000000000003948 WORS1
             forth.s:3396   .text:0000000000003970 WORS2
ARM GAS  forth.s 			page 170


             forth.s:3409   .text:0000000000003974 VERSN
             forth.s:3410   .text:0000000000003974 $t
             forth.s:3411   .text:0000000000003978 $d
             forth.s:3419   .text:0000000000003988 _HI
             forth.s:3421   .text:0000000000003990 $d
             forth.s:3422   .text:00000000000039aa $t
             forth.s:3423   .text:00000000000039ac $d
             forth.s:3444   .text:00000000000039f0 PS2_QUERY
             forth.s:3445   .text:00000000000039f0 $t
             forth.s:3446   .text:00000000000039f4 $d
             forth.s:3453   .text:0000000000003a2e $t
             forth.s:3454   .text:0000000000003a30 $d
             forth.s:3464   .text:0000000000003a3c IF_SENSE
             forth.s:3465   .text:0000000000003a3c $t
             forth.s:3466   .text:0000000000003a40 $d
             forth.s:3492   .text:0000000000003a90 COLD1
             forth.s:3493   .text:0000000000003a90 $d
             forth.s:3506   .text:0000000000003ad8 COLD2
             forth.s:3509   .text:0000000000003ad8 $d
             forth.s:3512   .text:0000000000003adc $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:000000000000053f $d
          ser-term.s:90     .text:0000000000000540 $t
          ser-term.s:110    .text:0000000000000579 $d
          ser-term.s:110    .text:000000000000057a $t
          ser-term.s:133    .text:00000000000005b7 $d
          ser-term.s:133    .text:00000000000005b8 $t
          ser-term.s:164    .text:00000000000005ff $d
          ser-term.s:164    .text:0000000000000600 $t
          ser-term.s:191    .text:0000000000000675 $d
          ser-term.s:191    .text:0000000000000676 $t
          ser-term.s:203    .text:00000000000006a3 $d
          ser-term.s:203    .text:00000000000006a4 $t
             tvout.s:255    .text:00000000000008f7 $d
             tvout.s:255    .text:00000000000008f8 $t
             tvout.s:269    .text:000000000000092b $d
             tvout.s:269    .text:000000000000092c $t
             tvout.s:297    .text:0000000000000985 $d
             tvout.s:297    .text:0000000000000986 $t
             tvout.s:316    .text:00000000000009b3 $d
             tvout.s:316    .text:00000000000009b4 $t
             tvout.s:418    .text:0000000000000aed $d
             tvout.s:418    .text:0000000000000aee $t
             tvout.s:439    .text:0000000000000b47 $d
             tvout.s:439    .text:0000000000000b48 $t
             tvout.s:486    .text:0000000000000bdd $d
             tvout.s:486    .text:0000000000000bde $t
           ps2_kbd.s:306    .text:00000000000012c7 $d
           ps2_kbd.s:306    .text:00000000000012c8 $t
           ps2_kbd.s:391    .text:00000000000013b1 $d
           ps2_kbd.s:391    .text:00000000000013b2 $t
           ps2_kbd.s:611    .text:000000000000164b $d
           ps2_kbd.s:611    .text:000000000000164c $t
           ps2_kbd.s:628    .text:0000000000001681 $d
           ps2_kbd.s:628    .text:0000000000001682 $t
         spi-flash.s:76     .text:0000000000001755 $d
ARM GAS  forth.s 			page 171


         spi-flash.s:76     .text:0000000000001756 $t
         spi-flash.s:122    .text:00000000000017ed $d
         spi-flash.s:122    .text:00000000000017ee $t
         spi-flash.s:151    .text:000000000000184b $d
         spi-flash.s:151    .text:000000000000184c $t
             forth.s:80     .text:0000000000001877 $d
             forth.s:80     .text:0000000000001878 $t
             forth.s:142    .text:00000000000018d7 $d
             forth.s:142    .text:00000000000018d8 $t
             forth.s:165    .text:0000000000001911 $d
             forth.s:165    .text:0000000000001912 $t
             forth.s:202    .text:000000000000192f $d
             forth.s:202    .text:0000000000001930 $t
             forth.s:249    .text:00000000000019dd $d
             forth.s:249    .text:00000000000019de $t
             forth.s:344    .text:0000000000001a6d $d
             forth.s:344    .text:0000000000001a6e $t
             forth.s:369    .text:0000000000001a9b $d
             forth.s:369    .text:0000000000001a9c $t
             forth.s:379    .text:0000000000001aaf $d
             forth.s:379    .text:0000000000001ab0 $t
             forth.s:387    .text:0000000000001abb $d
             forth.s:387    .text:0000000000001abc $t
             forth.s:396    .text:0000000000001acd $d
             forth.s:396    .text:0000000000001ace $t
             forth.s:405    .text:0000000000001ae1 $d
             forth.s:405    .text:0000000000001ae2 $t
             forth.s:441    .text:0000000000001b29 $d
             forth.s:441    .text:0000000000001b2a $t
             forth.s:457    .text:0000000000001b4b $d
             forth.s:457    .text:0000000000001b4c $t
             forth.s:467    .text:0000000000001b5d $d
             forth.s:467    .text:0000000000001b5e $t
             forth.s:476    .text:0000000000001b6f $d
             forth.s:476    .text:0000000000001b70 $t
             forth.s:493    .text:0000000000001b91 $d
             forth.s:493    .text:0000000000001b92 $t
             forth.s:523    .text:0000000000001bd7 $d
             forth.s:523    .text:0000000000001bd8 $t
             forth.s:532    .text:0000000000001bed $d
             forth.s:532    .text:0000000000001bee $t
             forth.s:579    .text:0000000000001c47 $d
             forth.s:579    .text:0000000000001c48 $t
             forth.s:590    .text:0000000000001c5b $d
             forth.s:590    .text:0000000000001c5c $t
             forth.s:598    .text:0000000000001c69 $d
             forth.s:598    .text:0000000000001c6a $t
             forth.s:606    .text:0000000000001c79 $d
             forth.s:606    .text:0000000000001c7a $t
             forth.s:614    .text:0000000000001c89 $d
             forth.s:614    .text:0000000000001c8a $t
             forth.s:638    .text:0000000000001cb9 $d
             forth.s:638    .text:0000000000001cba $t
             forth.s:663    .text:0000000000001ced $d
             forth.s:663    .text:0000000000001cee $t
             forth.s:671    .text:0000000000001cfd $d
             forth.s:671    .text:0000000000001cfe $t
ARM GAS  forth.s 			page 172


             forth.s:679    .text:0000000000001d0f $d
             forth.s:679    .text:0000000000001d10 $t
             forth.s:700    .text:0000000000001d37 $d
             forth.s:700    .text:0000000000001d38 $t
             forth.s:729    .text:0000000000001d73 $d
             forth.s:729    .text:0000000000001d74 $t
             forth.s:739    .text:0000000000001d87 $d
             forth.s:739    .text:0000000000001d88 $t
             forth.s:760    .text:0000000000001db5 $d
             forth.s:760    .text:0000000000001db6 $t
             forth.s:778    .text:0000000000001dd9 $d
             forth.s:778    .text:0000000000001dda $t
             forth.s:801    .text:0000000000001e07 $d
             forth.s:801    .text:0000000000001e08 $t
             forth.s:859    .text:0000000000001e77 $d
             forth.s:859    .text:0000000000001e78 $t
             forth.s:871    .text:0000000000001e8f $d
             forth.s:871    .text:0000000000001e90 $t
             forth.s:883    .text:0000000000001eab $d
             forth.s:883    .text:0000000000001eac $t
             forth.s:944    .text:0000000000001f07 $d
             forth.s:944    .text:0000000000001f08 $t
             forth.s:953    .text:0000000000001f1b $d
             forth.s:953    .text:0000000000001f1c $t
             forth.s:980    .text:0000000000001f57 $d
             forth.s:980    .text:0000000000001f58 $t
             forth.s:999    .text:0000000000001f75 $d
             forth.s:999    .text:0000000000001f76 $t
             forth.s:1018   .text:0000000000001f9f $d
             forth.s:1018   .text:0000000000001fa0 $t
             forth.s:1058   .text:0000000000001ff1 $d
             forth.s:1058   .text:0000000000001ff2 $t
             forth.s:1078   .text:000000000000201b $d
             forth.s:1078   .text:000000000000201c $t
             forth.s:1092   .text:0000000000002035 $d
             forth.s:1092   .text:0000000000002036 $t
             forth.s:1103   .text:0000000000002051 $d
             forth.s:1103   .text:0000000000002052 $t
             forth.s:1120   .text:000000000000206b $d
             forth.s:1120   .text:000000000000206c $t
             forth.s:1137   .text:0000000000002097 $d
             forth.s:1137   .text:0000000000002098 $t
             forth.s:1201   .text:0000000000002149 $d
             forth.s:1201   .text:000000000000214a $t
             forth.s:1252   .text:00000000000021c3 $d
             forth.s:1252   .text:00000000000021c4 $t
             forth.s:1311   .text:000000000000226d $d
             forth.s:1311   .text:000000000000226e $t
             forth.s:1329   .text:0000000000002295 $d
             forth.s:1329   .text:0000000000002296 $t
             forth.s:1363   .text:00000000000022e7 $d
             forth.s:1363   .text:00000000000022e8 $t
             forth.s:1396   .text:0000000000002335 $d
             forth.s:1396   .text:0000000000002336 $t
             forth.s:1428   .text:000000000000237d $d
             forth.s:1428   .text:000000000000237e $t
             forth.s:1508   .text:000000000000246b $d
ARM GAS  forth.s 			page 173


             forth.s:1508   .text:000000000000246c $t
             forth.s:1520   .text:0000000000002489 $d
             forth.s:1520   .text:000000000000248a $t
             forth.s:1552   .text:00000000000024d7 $d
             forth.s:1552   .text:00000000000024d8 $t
             forth.s:1568   .text:0000000000002501 $d
             forth.s:1568   .text:0000000000002502 $t
             forth.s:1582   .text:000000000000252b $d
             forth.s:1582   .text:000000000000252c $t
             forth.s:1646   .text:00000000000025c3 $d
             forth.s:1646   .text:00000000000025c4 $t
             forth.s:1767   .text:0000000000002783 $d
             forth.s:1767   .text:0000000000002784 $t
             forth.s:1784   .text:00000000000027b9 $d
             forth.s:1784   .text:00000000000027ba $t
             forth.s:1802   .text:00000000000027ef $d
             forth.s:1802   .text:00000000000027f0 $t
             forth.s:1872   .text:000000000000286f $d
             forth.s:1872   .text:0000000000002870 $t
             forth.s:1907   .text:00000000000028cf $d
             forth.s:1907   .text:00000000000028d0 $t
             forth.s:2060   .text:0000000000002abb $d
             forth.s:2060   .text:0000000000002abc $t
             forth.s:2099   .text:0000000000002b1d $d
             forth.s:2099   .text:0000000000002b1e $t
             forth.s:2112   .text:0000000000002b41 $d
             forth.s:2112   .text:0000000000002b42 $t
             forth.s:2338   .text:0000000000002dcb $d
             forth.s:2338   .text:0000000000002dcc $t
             forth.s:2430   .text:0000000000002edf $d
             forth.s:2430   .text:0000000000002ee0 $t
             forth.s:2481   .text:0000000000002f97 $d
             forth.s:2481   .text:0000000000002f98 $t
             forth.s:2493   .text:0000000000002fc1 $d
             forth.s:2493   .text:0000000000002fc2 $t
             forth.s:2514   .text:0000000000003007 $d
             forth.s:2514   .text:0000000000003008 $t
             forth.s:2526   .text:0000000000003025 $d
             forth.s:2526   .text:0000000000003026 $t
             forth.s:2541   .text:0000000000003053 $d
             forth.s:2541   .text:0000000000003054 $t
             forth.s:2701   .text:00000000000031fd $d
             forth.s:2701   .text:00000000000031fe $t
             forth.s:2743   .text:000000000000327b $d
             forth.s:2743   .text:000000000000327c $t
             forth.s:2771   .text:00000000000032e3 $d
             forth.s:2771   .text:00000000000032e4 $t
             forth.s:2784   .text:0000000000003305 $d
             forth.s:2784   .text:0000000000003306 $t
             forth.s:2811   .text:0000000000003345 $d
             forth.s:2811   .text:0000000000003346 $t
             forth.s:2834   .text:0000000000003383 $d
             forth.s:2834   .text:0000000000003384 $t
             forth.s:2845   .text:00000000000033a3 $d
             forth.s:2845   .text:00000000000033a4 $t
             forth.s:2857   .text:00000000000033c3 $d
             forth.s:2857   .text:00000000000033c4 $t
ARM GAS  forth.s 			page 174


             forth.s:2922   .text:0000000000003481 $d
             forth.s:2922   .text:0000000000003482 $t
             forth.s:3055   .text:00000000000035f1 $d
             forth.s:3055   .text:00000000000035f2 $t
             forth.s:3109   .text:0000000000003697 $d
             forth.s:3109   .text:0000000000003698 $t
             forth.s:3121   .text:00000000000036bb $d
             forth.s:3121   .text:00000000000036bc $t
             forth.s:3157   .text:0000000000003733 $d
             forth.s:3157   .text:0000000000003734 $t
             forth.s:3172   .text:0000000000003765 $d
             forth.s:3172   .text:0000000000003766 $t
             forth.s:3217   .text:00000000000037dd $d
             forth.s:3217   .text:00000000000037de $t
             forth.s:3251   .text:0000000000003857 $d
             forth.s:3251   .text:0000000000003858 $t
             forth.s:3419   .text:000000000000398b $d
             forth.s:3419   .text:000000000000398c $t
             forth.s:3486   .text:0000000000003a79 $d
             forth.s:3486   .text:0000000000003a7a $t

UNDEFINED SYMBOLS
_mstack
