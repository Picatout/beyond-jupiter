ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	  .equ VFPSW, PEN_COLOR+4 
ARM GAS  forth.s 			page 10


 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
 165              	
ARM GAS  forth.s 			page 11


 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
 222              		// from a code word   
ARM GAS  forth.s 			page 12


 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 13


  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 14


 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF898C4 	  ldr IP,=dh
 159 000e 02F0F5B9 	  b INEXT  
 160              	dh:
 161 0012 393F0000 	  _ADR PRESE    
 162 0016 7B250000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e D12A0000 	  _ADR COUNT 
 164 0022 79350000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a AD260000 	  _ADR DUPP
 167 002e 55260000 	  _ADR TOR 
 168 0032 7B250000 	  _DOLIT 16 
 168      10000000 
 169 003a 692B0000 	  _ADR BASE 
 170 003e ED250000 	  _ADR STORE 
 171 0042 C1360000 	  _ADR DOT 
 172 0046 2D260000 	  _ADR RFROM
 173 004a 7B250000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 F1260000 	  _ADR ANDD
 175 0056 BB250000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 7B250000 	  _DOLIT ','
 177      2C000000 
 178 006a 85240000 	  _ADR EMIT 
 179 006e 25350000 	  _ADR SPACE 
 180 0072 C1360000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
ARM GAS  forth.s 			page 15


 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 02F0B8B9 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 02F0AFB9 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C8C3 	  ldr IP,=ur
 232 00e2 02F08BB9 	  b INEXT  
 233              	ur:
ARM GAS  forth.s 			page 16


 234 00e6 393F0000 	  _ADR PRESE
 235 00ea AD350000 	  _ADR CR   
 236 00ee 7B250000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 D12A0000 		_ADR COUNT 
 238 00fa 79350000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C8F9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0C1FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 04F0B1BD 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 17


 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF828A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
ARM GAS  forth.s 			page 18


 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	
 347              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 348 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 349 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 350 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 351 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 352              	/* configure GPIOC:13 as output for user LED */
 353 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 353      C4F20200 
 354 0206 4FF00D01 	  mov r1,#LED_PIN
 355 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 356 020e 00B500F0 	  _CALL gpio_config 
 356      8FF85DF8 
 356      04EB
 357 0218 4FF00102 	  mov r2,#1
 358 021c 00B500F0 	  _CALL gpio_out 
 358      DEF85DF8 
 358      04EB
 359              	/* enable compensation CELL for fast I/O */
 360 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 360      C4F20101 
 361 022e 4FF00100 		mov r0,#1 
 362 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 363              	/* wait for ready bit */ 
 364 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 365 0236 10F4807F 	    tst r0,#(1<<8)
 366 023a FBD0     		beq 1b 	
 367              	
 368              	
 369              	/* configure systicks for 1msec ticks */
 370              	// set priority to 15 (lowest)
 371 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 372 0240 4FF00F01 	  mov r1,#15 
 373 0244 00B500F0 	  _CALL nvic_set_priority
 373      2FF85DF8 
 373      04EB
 374 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 374      CEF20000 
 375 0256 47F2FF61 	  _MOV32 r1,95999 
 375      C0F20101 
 376 025e 4160     	  str r1,[r0,#STK_LOAD]
 377 0260 4FF00701 	  mov r1,#7
 378 0264 0160     	  str r1,[r0,STK_CTL]
 379 0266 7047     	  _RET  
 380              	
ARM GAS  forth.s 			page 19


 381              	
 382              	/* copy system variables to RAM */ 
 383              		.type remap, %function 
 384              	    .global remap 
 385              	remap:
 386              	// copy system to RAM 	
 387 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 387      C2F20000 
 388 0270 8F49     		ldr r1,=UZERO 
 389 0272 4FF0B002 		mov r2,#ULAST-UZERO 
 390 0276 02F10302 		add r2,r2,#3
 391 027a 22F00302 		and r2,r2,#~3 
 392 027e 51F8043B 	1:	ldr r3,[r1],#4 
 393 0282 40F8043B 		str r3,[r0],#4 
 394 0286 043A     		subs R2,#4 
 395 0288 F9D1     		bne 1b
 396              	// zero end of RAM 
 397 028a 4FF00002 		_MOV32 r2,RAM_END 
 397      C2F20202 
 398 0292 83EA0303 		eor r3,r3,r3 
 399 0296 40F8043B 	2:  str r3,[r0],#4
 400 029a 9042     		cmp r0,r2 
 401 029c FBDB     		blt 2b 
 402 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 402      C2F20004 
 403 02a6 7047     		_RET 
 404              	
 405              	// set irq priority 
 406              	// 0 highest 
 407              	// 15 lowest
 408              	// input: r0 IRQn  
 409              	//        r1  ipr 
 410              	nvic_set_priority:
 411 02a8 08B4     	    push {r3}
 412 02aa 0028     	    cmp r0,#0 
 413 02ac 08D4     	    bmi negative_irq 
 414 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 414      CEF20003 
 415 02b6 4FEA0111 	    lsl r1,#4 
 416 02ba 1954     	    strb r1,[r3,r0]
 417 02bc 08BC     	    pop {r3}
 418 02be 7047     	    _RET 
 419              	negative_irq:
 420 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 420      CEF20003 
 421 02c8 00F00F00 	    and r0,#0XF 
 422 02cc A0F10400 	    sub r0,#4 
 423 02d0 4FEA0111 	    lsl r1,#4 
 424 02d4 1954     	    strb r1,[r3,r0]
 425 02d6 08BC     	    pop {r3}
 426 02d8 7047     	    _RET 
 427              	
 428              	
 429              	// enable interrupt in nvic 
 430              	// input: r0 = IRQn 
 431              	nvic_enable_irq: 
 432 02da 0EB4     	    push {r1,r2,r3}
ARM GAS  forth.s 			page 20


 433 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 433      CEF20003 
 434 02e4 0146     	    mov r1,r0 
 435 02e6 4FEA5111 	    lsr r1,#5  
 436 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 437 02ee 00F01F00 	    and r0,#31 // bit#
 438 02f2 4FF00102 	    mov r2,#1 
 439 02f6 02FA00F2 	    lsl r2,r0
 440 02fa 72B6     	    cpsid I
 441 02fc 5A50     	    str r2,[r3,r1]
 442 02fe 62B6     	    cpsie I 
 443 0300 0EBC     	    pop {r1,r2,r3}
 444 0302 7047     	    _RET 
 445              	
 446              	// disable interrupt in nvic
 447              	// input: r0 = IRQn
 448              	nvic_disable_irq:
 449 0304 0EB4     	    push {r1,r2,r3}
 450 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 450      CEF20003 
 451 030e 0146     	    mov r1,r0 
 452 0310 4FEA5111 	    lsr r1,#5  
 453 0314 4FEA8101 	    lsl r1,#2  // ISERn
 454 0318 00F01F00 	    and r0,#31 // bit#
 455 031c 4FF00102 	    mov r2,#1 
 456 0320 02FA00F2 	    lsl r2,r0
 457 0324 5A50     	    str r2,[r3,r1]
 458 0326 BFF34F8F 	    dsb 
 459 032a BFF36F8F 	    isb 
 460 032e 0EBC     	    pop {r1,r2,r3}
 461 0330 7047     	    _RET 
 462              	
 463              	/**********************************
 464              	  gpio_config 
 465              	  Configure gpio mode 
 466              	  input:
 467              	    r0   GPIOx 
 468              	    r1   pin 
 469              	    r2   mode 
 470              	  output:
 471              	    none 
 472              	  use:
 473              	    r3,r5,r11  
 474              	**********************************/
 475              	gpio_config:
 476 0332 2DE92808 	    push {r3,r5,r11}
 477              	//  clear registers field 
 478 0336 4FF00105 	    mov r5,#1
 479 033a 05FA01F5 	    lsl r5,r1
 480 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 481 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 482 0344 03EA0503 	    and r3,r5 
 483 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 484 034a 4FF00305 	    mov r5,#3 
 485 034e 4FF0020B 	    mov r11,#2 
 486 0352 01FB0BFB 	    mul r11,r1 
 487 0356 05FA0BF5 	    lsl r5,r11 
ARM GAS  forth.s 			page 21


 488 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 489 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 490 0360 03EA0503 	    and r3,r5 
 491 0364 0360     	    str r3,[r0,#GPIO_MODER]
 492 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 493 0368 03EA0503 	    and r3,r5 
 494 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 495              	// set mode register, r2 low nibble  
 496 036e 02F00305 	    and r5,r2,#3    
 497 0372 05FA0BF5 	    lsl r5,r11 // mode 
 498 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 499 0378 43EA0503 	    orr r3,r5 
 500 037c 0360     	    str r3,[r0,#GPIO_MODER]
 501 037e 032A     	    cmp r2,#3
 502 0380 13D0     	    beq 9f // analog input 
 503 0382 12F00305 	    ands r5,r2,#3 
 504 0386 08D0     	    beq input_pull 
 505              	output_type:
 506 0388 4FEA1212 	    lsr r2,#4 
 507 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 508 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 509 0392 43EA0203 	    orr r3,r2 
 510 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 511 0398 07E0     	    b 9f 
 512              	input_pull:
 513 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 514 039c 4FEA1212 	    lsr r2,#4 
 515 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 516 03a4 43EA0203 	    orr r3,r2 
 517 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 518 03aa BDE82808 	9:  pop {r3,r5,r11}
 519 03ae 7047     	    _RET 
 520              	
 521              	// configure gpio speed 
 522              	// input:
 523              	//    r0   GPIO_BASE_ADR 
 524              	//    r1   pin 
 525              	//    r2   speed
 526              	// use:
 527              	//  r3,r5,r11 
 528              	gpio_speed:
 529 03b0 2DE92808 	    push {r3,r5,r11}
 530 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 531 03b6 4FF00305 	    mov r5,#3
 532 03ba 4FF0020B 	    mov r11,#2 
 533 03be 01FB0BFB 	    mul r11,r1 
 534 03c2 05FA0BF5 	    lsl r5,r11
 535 03c6 6FEA0505 	    mvn r5,r5 
 536 03ca 03EA0503 	    and r3,r5   
 537 03ce 02FA0BF2 	    lsl r2,r11  
 538 03d2 43EA0203 	    orr r3,r2 
 539 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 540 03d8 BDE82808 	    pop {r3,r5,r11}
 541 03dc 7047     	    _RET
 542              	
 543              	/**************************** 
 544              	  gpio_out port,pin,0|1
ARM GAS  forth.s 			page 22


 545              	  input:
 546              	    r0   gpio_base_adr 
 547              	    r1   pin 
 548              	    r2   data 0|1 
 549              	**************************/
 550              	gpio_out:
 551 03de 08B4     	    push {r3}
 552 03e0 4FF00103 	    mov r3,#1 
 553 03e4 03FA01F3 	    lsl r3,r1 
 554 03e8 0AB9     	    cbnz r2, 1f 
 555 03ea 4FEA0343 	    lsl r3,#16 
 556 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 557 03f0 08BC     	    pop {r3}
 558 03f2 7047     	    _RET 
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564              		.p2align 2
 565              	UZERO:
 566 03f4 00000000 		.word 0  			/*Reserved */
 567 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 568 03fc 00000000 		.word 0      /* TICKS */
 569 0400 00000000 	    .word 0     /* CD_TIMER */
 570 0404 A44B0000 		.word HI  /*'BOOT */
 571 0408 C8130000 		.word PS2_QKEY /* query for character */
 572 040c 900C0000 	  .word TV_EMIT  /* char output device */
 573 0410 0A000000 	  .word BASEE 	/*BASE */
 574 0414 00000000 		.word 0			/*tmp */
 575 0418 00000000 		.word 0			/*SPAN */
 576 041c 00000000 		.word 0			/*>IN */
 577 0420 00000000 		.word 0			/*#TIB */
 578 0424 00FF0120 		.word TIBB	/*TIBU */
 579 0428 103E0000 		.word INTER	/*'EVAL */
 580 042c 00000000 		.word 0			/*HLD */
 581 0430 C04C0000 		.word _LASTN	/*CONTEXT */
 582 0434 2C4D0000 		.word CTOP  	/* FCP end of system dictionnary */
 583 0438 38490020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 584 043c C04C0000 		.word _LASTN	/*LAST word in dictionary */
 585 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 585      00000000 
 585      00000000 
 585      00000000 
 586 0450 00000000 		.word 0  /* RX_HEAD */
 587 0454 00000000 		.word 0  /* RX_TAIL */ 
 588 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 589 045c 00000000 		.word 0  /* VID_STATE, video state */  
 590 0460 00000000 	    .word 0  /* VID_FIELD, field */
 591 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 592 0468 00000000 	    .word 0 /* kbd struct */
 593 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 593      00000000 
 593      00000000 
 593      00000000 
 594 047c 00000000 		.word 0  /* kbd queue head */
 595 0480 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 23


 596 0484 00000000 	    .word 0 /* tv cursor row */
 597 0488 00000000 	    .word 0 /* tv cursor column */ 
 598 048c 00000000 	    .word 0 /* tv back color */
 599 0490 07000000 	    .word 7 /* tv font color */
 600 0494 00000000 	    .word 0 /* FPSW */
 601 0498 00000000 	    .word 0 /* FBASE */ 
 602 049c 00000000 	    .word 0,0 
 602      00000000 
 603              	ULAST:
 604              	
 605              	// used by _HEADER macro 
 606              	// to link names field
 607              	// in dictionary  
 608 04a4 12000000 	    .equ LINK, 0 
 608      E6000000 
 608      F4230000 
 608      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04b4 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04bc 1868     		ldr r0,[r3,#USART_SR]
  38 04be 5968     		ldr r1,[r3,#USART_DR]
  39 04c0 10F0200F 		tst r0,#(1<<5) // RXNE 
ARM GAS  forth.s 			page 24


  40 04c4 0CD0     		beq 2f // no char received 
  41 04c6 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04ca 3FF403AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04ce 04F14C00 		add r0,UP,#RX_QUEUE
  44 04d2 226E     		ldr r2,[UP,#RX_TAIL]
  45 04d4 8154     		strb r1,[r0,r2]
  46 04d6 02F10102 		add r2,#1 
  47 04da 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04de 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04e0 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04e2 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04ea 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04ec 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04f0 01EA0201 	  and r1,r1,r2
  62 04f4 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f8 41EA0201 	  orr r1,r1,r2 
  64 04fc 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04fe 4FF4EE61 	  mov r1,#0x77<<4 
  67 0502 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0504 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 050c 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0510 8160     	  str r1,[r0,#USART_BRR]
  73 0512 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0516 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0518 4FF02500 	  mov r0,#USART1_IRQ 
  77 051c 4FF00701 	  mov r1,#7
  78 0520 00B5FFF7 	  _CALL nvic_set_priority
  78      C1FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 052a 4FF02500 	  mov r0,#USART1_IRQ 
  81 052e 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D3FE5DF8 
  81      04EB
  82 0538 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 053a 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
ARM GAS  forth.s 			page 25


  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0548 47F8046D 		_PUSH
  92 054c 206E     		ldr T0,[UP,#RX_TAIL] 
  93 054e E16D     		ldr T1,[UP,#RX_HEAD]
  94 0550 90EA0106 		eors TOS,T0,T1 
  95 0554 0CD0     		beq 1f
  96 0556 04F14C00 		add T0,UP,#RX_QUEUE 
  97 055a 0844     		add T0,T1 
  98 055c 0678     		ldrb TOS,[T0]
  99 055e 01F10101 		add T1,#1 
 100 0562 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0566 E165     		str T1,[UP,#RX_HEAD]
 102 0568 47F8046D 		_PUSH 
 103 056c 4FF0FF36 		mov TOS,#-1
 104 0570 01F044BF 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0574 3E050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0584 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 058c 2868     	1:  ldr T0,[WP,#USART_SR]
 113 058e 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0592 FBD0     		beq 1b 
 115 0594 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0596 57F8046B 		_POP
 117 059a 01F02FBF 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 059e 78050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a8 47F8046D 	        _PUSH 
 126 05ac 4FF00006 	        mov TOS,#0
 127 05b0 01F024BF 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05b4 A2050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05c0 47F8046D 	        _PUSH 
 135 05c4 4FF00106 	        mov TOS,#1
 136 05c8 01F018BF 	        _NEXT 
ARM GAS  forth.s 			page 26


 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05cc B8050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d8 3046     	        mov T0,TOS
 144 05da 57F8046B 	        _POP 
 145 05de 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05e0 4B48     	        ldr T0,=SER_QKEY 
 148 05e2 6061     	        str T0,[UP,#STDIN]
 149 05e4 4B48     	        ldr T0,=SER_EMIT
 150 05e6 A061     	        str T0,[UP,#STDOUT]
 151 05e8 01F008BF 	        _NEXT 
 152              	4: // local console 
 153 05ec 4A48     	        ldr T0,=PS2_QKEY
 154 05ee 6061     	        str T0,[UP,#STDIN]
 155 05f0 4A48     	        ldr T0,=TV_EMIT
 156 05f2 A061     	        str T0,[UP,#STDOUT]
 157 05f4 01F002BF 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f8 D0050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0608 504700BF 	      _NEST 
 166 060c 7B250000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0614 CD270000 	1:    _ADR ONEP  // c+1
 168 0618 55260000 	      _ADR TOR   
 169 061c 7B250000 	      _DOLIT 10 
 169      0A000000 
 170 0624 8D2E0000 	      _ADR SLMOD // r q  
 171 0628 81280000 	      _ADR QDUP  // r q q | r 0  
 172 062c BB250000 	      _QBRAN 2f  // r 0 
 172      40060000 
 173 0634 2D260000 	      _ADR RFROM // r q c 
 174 0638 CF250000 	      _BRAN 1b
 174      14060000 
 175 0640 7B250000 	2:    _DOLIT '0'  
 175      30000000 
 176 0648 71270000 	      _ADR PLUS 
 177 064c 85240000 	      _ADR EMIT 
 178 0650 2D260000 	      _ADR RFROM 
 179 0654 81280000 	      _ADR QDUP 
 180 0658 BB250000 	      _QBRAN 3f
 180      70060000 
 181 0660 DD270000 	      _ADR ONEM 
 182 0664 55260000 	      _ADR TOR 
ARM GAS  forth.s 			page 27


 183 0668 CF250000 	      _BRAN 2b 
 183      40060000 
 184              	3:    
 185 0670 03240000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0674 FC050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0680 504700BF 	      _NEST 
 193 0684 7B250000 	      _DOLIT 27 
 193      1B000000 
 194 068c 85240000 	      _ADR EMIT 
 195 0690 7B250000 	      _DOLIT '['
 195      5B000000 
 196 0698 85240000 	      _ADR EMIT 
 197 069c 03240000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 06a0 78060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06ac 504700BF 	      _NEST
 205 06b0 81060000 	      _ADR ANSI_ESC
 206 06b4 BD260000 	      _ADR SWAP 
 207 06b8 09060000 	      _ADR ANSI_PARAM 
 208 06bc 7B250000 	      _DOLIT ';'
 208      3B000000 
 209 06c4 85240000 	      _ADR EMIT
 210 06c8 09060000 	      _ADR ANSI_PARAM
 211 06cc 7B250000 	      _DOLIT 'H'
 211      48000000 
 212 06d4 85240000 	      _ADR EMIT 
 213 06d8 03240000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06dc A4060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e8 504700BF 	    _NEST
 221 06ec 7B250000 	    _DOLIT 1 
 221      01000000 
 222 06f4 AD260000 	    _ADR DUPP 
 223 06f8 AD060000 	    _ADR SER_AT  
 224 06fc 81060000 	    _ADR ANSI_ESC
 225 0700 7B250000 	    _DOLIT 'J'
 225      4A000000 
 226 0708 85240000 	    _ADR EMIT 
ARM GAS  forth.s 			page 28


 227 070c 03240000 	    _UNNEST 
 228 0710 48050000 	
 228      84050000 
 228      C8130000 
 228      900C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
ARM GAS  forth.s 			page 29


  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0720 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0728 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 072a 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
ARM GAS  forth.s 			page 30


  80              	//  movt r2,#0x55<<8 
  81 0732 41EA0201 	  orr r1,r2
  82 0736 0160     	  str r1,[r0,#GPIO_MODER]
  83 0738 81EA0101 	  eor r1,r1 
  84 073c 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 073e 4FF00101 	  mov r1,#1 // pin 1 
  88 0742 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0746 00B5FFF7 	  _CALL gpio_config 
  89      F3FD5DF8 
  89      04EB
  90 0750 4FF00101 	  mov r1,#1 
  91 0754 4FF00202 	  mov r2,#2
  92 0758 00B5FFF7 	  _CALL gpio_speed 
  92      29FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0762 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0764 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0768 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 076a 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0772 4FF00200 	  mov r0,#2 
 100 0776 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0778 41EA0001 	  orr r1,r0 
 102 077c 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 077e 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0786 41F2D470 	  mov r0,#HPER
 106 078a D062     	  str r0,[r2,#TIM_ARR]
 107 078c 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0790 D063     	  str r0,[r2,#TIM_CCR3]
 109 0792 4FF4E170 	  mov r0,#HPULSE 
 110 0796 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0798 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 079c D061     	  str r0,[r2,#TIM_CCMR2]
 113 079e 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 07a2 1062     	  str r0,[r2,#TIM_CCER]
 115 07a4 4FF00100 	  mov r0,#1 
 116 07a8 D060     	  str r0,[r2,#TIM_DIER]
 117 07aa 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07ac 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07b0 4FF00201 	  mov r1,#2
 121 07b4 00B5FFF7 	  _CALL nvic_set_priority
 121      77FD5DF8 
 121      04EB
 122 07be 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07c2 00B5FFF7 	  _CALL nvic_enable_irq
 123      89FD5DF8 
 123      04EB
 124 07cc 7047     	  _RET
 125              	
 126              	/*************************************
ARM GAS  forth.s 			page 31


 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07ce 00BF     	  _GBL_FUNC tv_out_isr
 132 07d0 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07d8 81EA0101 	  eor T1,T1
 134 07dc 0161     	  str T1,[T0,#TIM_SR]
 135 07de 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07e0 01F10101 	  add T1,#1 
 137 07e4 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07e6 A26E     	  ldr T2,[UP,#VID_STATE]
 140 07e8 002A     	  cmp T2,#ST_VSYNC 
 141 07ea 07D0     	  beq state_vsync
 142 07ec 012A     	  cmp T2,#ST_PREVID 
 143 07ee 2FD0     	  beq state_pre_video 
 144 07f0 022A     	  cmp T2,#ST_VIDEO 
 145 07f2 36D0     	  beq state_video_out 
 146 07f4 032A     	  cmp T2,#ST_POSTVID 
 147 07f6 63D0     	  beq state_post_video
 148 07f8 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 07fc 0129     	  cmp T1,#1
 152 07fe 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0800 4FF0DB01 	  mov T1,#SERRATION
 155 0804 0164     	  str T1,[T0,#TIM_CCR4]
 156 0806 40F6E931 	  mov T1,#SYNC_LINE 
 157 080a C162     	  str T1,[T0,#TIM_ARR]
 158 080c 6BE0     	  b tv_isr_exit 
 159 080e 0729     	1: cmp T1,#7
 160 0810 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0812 40F62821 	  mov T1,#VSYNC_PULSE
 163 0816 0164     	  str T1,[T0,#TIM_CCR4]
 164 0818 65E0     	  b tv_isr_exit
 165 081a 0D29     	2: cmp T1,#13
 166 081c 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 081e 4FF0DB01 	   mov T1,#SERRATION 
 169 0822 0164     	   str T1,[T0,#TIM_CCR4]
 170 0824 5FE0     	   b tv_isr_exit   
 171 0826 1229     	3: cmp T1,#18
 172 0828 03D1     	   bne 4f 
 173              	// if even field full line  
 174 082a E16E     	   ldr T1,[UP,#VID_FIELD]
 175 082c 0029     	   cmp T1,#ODD_FIELD  
 176 082e 5AD0     	   beq tv_isr_exit 
 177 0830 01E0     	   b sync_end 
 178 0832 1329     	4: cmp T1,#19 
 179 0834 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0836 4FF00901 	   mov T1,#9
 182 083a 6166     	   str T1,[UP,#VID_CNTR]
ARM GAS  forth.s 			page 32


 183 083c 4FF4E171 	   mov T1,#HPULSE 
 184 0840 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0842 41F2D471 	   mov T1,#HPER 
 186 0846 C162     	   str T1,[T0,#TIM_ARR] 
 187 0848 4FF00101 	   mov T1,#ST_PREVID 
 188 084c A166     	   str T1,[UP,#VID_STATE]
 189 084e 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0850 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0852 48D4     	   bmi tv_isr_exit 
 194 0854 4FF00201 	   mov T1,#ST_VIDEO 
 195 0858 A166     	   str T1,[UP,#VID_STATE]
 196 085a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 085e C160     	   str T1,[T0,#TIM_DIER]
 198 0860 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0862 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0864 06D9     	   bls 1f 
 205 0866 4FF00301 	   mov T1,#ST_POSTVID 
 206 086a A166     	   str T1,[UP,#VID_STATE]
 207 086c 4FF00101 	   mov T1,#1 
 208 0870 C160     	   str T1,[T0,#TIM_DIER]
 209 0872 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0874 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0876 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 087a 4FF0A003 	   mov T3,#160
 214 087e 03FB01F1 	   mul T1,T3 
 215 0882 0844     	   add T0,T1  
 216 0884 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 088c 10F8012B 	2: ldrb T2,[T0],#1 
 222 0890 4FEA0222 	   lsl T2,#8 
 223 0894 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0896 AFF30080 	   nop.w 
 225 089a AFF30080 	   nop.w
 226 089e AFF30080 	   nop.w 
 227 08a2 AFF30080 	   nop.w 
 228 08a6 4FEA0212 	   lsl T2,#4  
 229 08aa 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08ac AFF30080 	   nop.w
 231 08b0 AFF30080 	   nop.w  
 232 08b4 013B     	   subs T3,#1
 233 08b6 E9D1     	   bne 2b  
 234 08b8 4FF47022 	   mov T2,#(15<<16) 
 235 08bc 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08be 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08c0 4FF48372 	   mov T2,#262
ARM GAS  forth.s 			page 33


 239 08c4 9142     	   cmp T1,T2
 240 08c6 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08c8 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08ca 11B9     	   cbnz T1, frame_end 
 244 08cc 40F6E931 	   mov T1,#SYNC_LINE
 245 08d0 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08d2 4FF00001 	   mov T1,#ST_VSYNC 
 248 08d6 A166     	   str T1,[UP,#VID_STATE]
 249 08d8 81EA0101 	   eor T1,T1 
 250 08dc 6166     	   str T1,[UP,#VID_CNTR]
 251 08de E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08e0 6FEA0101 	   mvn T1,T1  
 253 08e4 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08e6 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08e8 E0060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 08f8 47F8046D 		_PUSH 
 266 08fc 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0900 01F07CBD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0904 EC080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0914 47F8046D 		_PUSH 
 273 0918 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 091c 01F06EBD 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0920 08090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 092c 47F8046D 	  _PUSH 
 280 0930 04F19406 	  ADD TOS,UP,#COL 
 281 0934 01F062BD 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0938 24090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0940 47F8046D 	  _PUSH 
ARM GAS  forth.s 			page 34


 287 0944 04F19006 	  ADD TOS,UP,#ROW 
 288 0948 01F058BD 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 094c 3C090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0958 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 095c 00FB06F6 	  mul TOS,T0 
 295 0960 01F04CBD 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0964 50090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0970 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0974 00FB06F6 	  mul TOS,T0 
 302 0978 01F040BD 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 097c 68090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0988 47F8046D 	  _PUSH 
 308 098c DFF88C65 	  ldr TOS,=font_6x8 
 309 0990 01F034BD 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0994 80090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 09a0 47F8046D 	  _PUSH 
 315 09a4 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 09a6 01F029BD 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09aa 98090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09b4 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09b6 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09ba 02FB00F0 	    mul T0,T2 
 330 09be 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09c2 1044     	    add T0,T2 
 332 09c4 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09c6 0344     	    add T3,T0 // T3 -> byte address 
ARM GAS  forth.s 			page 35


 334 09c8 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09ca 4FF00F02 	    mov T2,#15 // AND mask 
 336 09ce 11F0010F 	    tst T1,#1 
 337 09d2 01D0     	    beq 1f 
 338 09d4 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09d8 DFF84405 	1:  ldr T0,=plot_op 
 340 09dc D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09e0 05EA0205 	    and WP,T2 // mask out nibble 
 343 09e4 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09e8 11F0010F 	    tst T1,#1 
 345 09ec 01D1     	    bne 1f 
 346 09ee 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09f2 45EA0005 	1:  orr WP,T0  
 348 09f6 1D70     	    strb WP,[T3]
 349 09f8 1AE0     	    b 9f 
 350              	op_pen: 
 351 09fa 05EA0205 	    and WP,T2 
 352 09fe 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0a02 11F0010F 	    tst T1,#1
 354 0a06 01D1     	    bne 1f 
 355 0a08 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a0c 45EA0005 	1:	orr WP,T0 
 357 0a10 1D70     	    strb WP,[T3]
 358 0a12 0DE0     	    b 9f 
 359              	op_invert:
 360 0a14 85EA0205 	    eor WP,T2 
 361 0a18 1D70     	    strb WP,[T3]
 362 0a1a 09E0     	    b 9f 
 363              	op_xor:
 364 0a1c D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a20 11F0010F 	    tst T1,#1 
 366 0a24 01D1     	    bne 1f 
 367 0a26 4FEA0010 	    lsl T0,#4 
 368 0a2a 85EA0005 	1:  eor WP,T0 
 369 0a2e 1D70     	    strb WP,[T3]
 370 0a30 57F8046B 	9:  _POP 
 371 0a34 01F0E2BC 	    _NEXT 
 372              	
 373 0a38 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a3c AE090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a48 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a4a 0028     	    cmp T0,#0
 381 0a4c FCD1     	    bne 1b
 382 0a4e 01F0D5BC 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0a52 400A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
ARM GAS  forth.s 			page 36


 387 0a5c 80EA0000 	    eor T0,T0 
 388 0a60 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a64 40EA0100 	    orr T0,T1 
 390 0a68 4FEA0111 	    lsl T1,#4 
 391 0a6c 40EA0100 	    orr T0,T1 
 392 0a70 4FEA0021 	    lsl T1,T0,#8 
 393 0a74 40EA0100 	    orr T0,T1 
 394 0a78 4FEA0041 	    lsl T1,T0,#16
 395 0a7c 40EA0100 	    orr T0,T1 
 396 0a80 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a84 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a86 5050     	1:	str T0,[T2,T1]
 399 0a88 0439     	    subs T1,#4
 400 0a8a FCD1     	    bne 1b
 401 0a8c 1060     	    str T0,[T2]
 402 0a8e 80EA0000 	    eor T0,T0 
 403 0a92 C4F89000 	    str T0,[UP,#ROW]
 404 0a96 C4F89400 	    str T0,[UP,#COL]
 405 0a9a 01F0AFBC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0a9e 560A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0aac 504700BF 	  _NEST
 412 0ab0 7B250000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ab8 AD260000 	  _ADR DUPP  
 414 0abc 55260000 	  _ADR TOR 
 415 0ac0 91270000 	  _ADR STAR
 416 0ac4 A1090000 	  _ADR VIDBUFF
 417 0ac8 71270000 	  _ADR PLUS
 418 0acc 2D260000 	  _ADR RFROM   
 419 0ad0 7B250000 	  _DOLIT 0 
 419      00000000 
 420 0ad8 C1300000 	  _ADR FILL 
 421 0adc 03240000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ae0 A20A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0af0 504700BF 	    _NEST 
 429 0af4 A1090000 	    _ADR VIDBUFF 
 430 0af8 AD260000 	    _ADR DUPP 
 431 0afc 7B250000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0b04 AD260000 	    _ADR DUPP 
 433 0b08 55260000 	    _ADR TOR 
 434 0b0c 71270000 	    _ADR PLUS 
ARM GAS  forth.s 			page 37


 435 0b10 BD260000 	    _ADR SWAP 
 436 0b14 7B250000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b1c 2D260000 	    _ADR RFROM  
 438 0b20 81270000 	    _ADR SUBB 
 439 0b24 79300000 	    _ADR MOVE
 440 0b28 7B250000 	    _DOLIT 24 
 440      18000000 
 441 0b30 AD0A0000 	    _ADR CLRLINE 
 442 0b34 03240000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b38 E40A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b48 504700BF 	    _NEST 
 450 0b4c A1090000 	    _ADR VIDBUFF
 451 0b50 AD260000 	    _ADR DUPP 
 452 0b54 7B250000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b5c 71270000 	    _ADR PLUS 
 454 0b60 7B250000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b68 7B250000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b70 81270000 	    _ADR SUBB  
 457 0b74 79300000 	    _ADR MOVE
 458 0b78 7B250000 	    _DOLIT 0 
 458      00000000 
 459 0b80 AD0A0000 	    _ADR CLRLINE
 460 0b84 03240000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b88 3C0B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0b94 E34D     	    ldr WP,=SCROLLUP 
 469 0b96 45F00105 	    orr WP,#1
 470 0b9a 80EA0000 	    eor T0,T0 
 471 0b9e C4F89400 	    str T0,[UP,#COL]
 472 0ba2 D4F89000 	    ldr T0,[UP,#ROW]
 473 0ba6 1828     	    cmp T0,#24 
 474 0ba8 A2D0     	    beq SCROLLUP  
 475 0baa 00F10100 	    add T0,#1 
 476 0bae C4F89000 	    str T0,[UP,#ROW]
 477 0bb2 01F023BC 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
ARM GAS  forth.s 			page 38


 481              	// move cursor 1 char. right 
 482 0bb6 8C0B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bc0 D4F89400 	  ldr T0,[UP,#COL]
 484 0bc4 00F10100 	  add T0,#1
 485 0bc8 3528     	  cmp T0,#53
 486 0bca E3D5     	  bpl TV_CRLF  
 487 0bcc C4F89400 	  str T0,[UP,#COL]
 488 0bd0 01F014BC 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0bd4 BA0B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0be0 D4F89400 	    ldr T0,[UP,#COL]
 497 0be4 28B1     	    cbz T0,1f 
 498 0be6 A0F10100 	    sub T0,#1 
 499 0bea C4F89400 	    str T0,[UP,#COL]
 500 0bee 01F005BC 	    _NEXT 
 501 0bf2 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0bf6 38B1     	    cbz T0,9f
 503 0bf8 A0F10100 	    sub T0,#1
 504 0bfc C4F89000 	    str T0,[UP,#ROW]
 505 0c00 4FF03400 	    mov T0,#52 
 506 0c04 C4F89400 	    str T0,[UP,#COL]
 507 0c08 01F0F8BB 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c0c 4FF08000 	    mov T0,#128 
 513 0c10 06EA0006 	    and TOS,T0 
 514 0c14 4FEAD616 	    lsr TOS,#7
 515 0c18 01F0F0BB 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c1c 3868     	  ldr T0,[DSP]
 520 0c1e 00F10100 	  add T0,#1 
 521 0c22 3860     	  str T0,[DSP]
 522 0c24 01F0EABB 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c28 4FEA4606 	    lsl TOS,#1
 527 0c2c 01F0E6BB 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
ARM GAS  forth.s 			page 39


 534              	CHAR_ROW:  
 535 0c30 504700BF 	    _NEST 
 536 0c34 7B250000 	    _DOLIT 5 
 536      05000000 
 537 0c3c 55260000 	    _ADR TOR 
 538 0c40 55260000 	1:  _ADR TOR 
 539 0c44 E5280000 	    _ADR DDUP 
 540 0c48 41260000 	    _ADR RAT
 541 0c4c 0D0C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c50 B5090000 	    _ADR PLOT 
 543 0c54 1D0C0000 	    _ADR INCR_X 
 544 0c58 2D260000 	    _ADR RFROM 
 545 0c5c 290C0000 	    _ADR NEXT_PIXEL
 546 0c60 9D250000 	    _DONXT 1b
 546      400C0000 
 547 0c68 D1280000 	    _ADR TDROP 
 548 0c6c 03240000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0c70 A6F12006 	   sub TOS,#32
 553 0c74 4FF00800 	   mov T0,#8 
 554 0c78 00FB06F6 	   mul TOS,T0 
 555 0c7c A748     	   ldr T0,=font_6x8
 556 0c7e 0644     	   add TOS,T0 
 557 0c80 01F0BCBB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0c84 D80B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0c90 504700BF 	    _NEST
 565 0c94 AD260000 	    _ADR DUPP 
 566 0c98 7B250000 	    _DOLIT 32 
 566      20000000 
 567 0ca0 012A0000 	    _ADR ULESS
 568 0ca4 BB250000 	    _QBRAN 1f
 568      B40C0000 
 569 0cac CF250000 	    _BRAN CTRL_KEY
 569      180D0000 
 570 0cb4 710C0000 	1:  _ADR CHAR_FONT 
 571 0cb8 2D090000 	    _ADR CURSOR_COL 
 572 0cbc 01260000 	    _ADR AT
 573 0cc0 71090000 	    _ADR COLX  // x coord 
 574 0cc4 41090000 	    _ADR CURSOR_ROW 
 575 0cc8 01260000 	    _ADR AT    
 576 0ccc 59090000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0cd0 95280000 	    _ADR ROT  // TEST 
 578 0cd4 7B250000 	    _DOLIT 7   
 578      07000000 
 579 0cdc 55260000 	    _ADR TOR  
 580 0ce0 55260000 	1:  _ADR TOR  // { x y }
 581 0ce4 E5280000 	    _ADR DDUP  // { x y x y }
 582 0ce8 41260000 	    _ADR RAT 
ARM GAS  forth.s 			page 40


 583 0cec 21260000 	    _ADR CAT   // { x y x y r }
 584 0cf0 310C0000 	    _ADR CHAR_ROW 
 585 0cf4 CD270000 	    _ADR ONEP // {x y' }
 586 0cf8 2D260000 	    _ADR RFROM 
 587 0cfc CD270000 	    _ADR ONEP // {x y' c-adr' }
 588 0d00 9D250000 	    _DONXT 1b
 588      E00C0000 
 589 0d08 D1280000 	    _ADR TDROP  
 590 0d0c C10B0000 	    _ADR RIGHT
 591 0d10 010E0000 	9:  _ADR SHOW_CURSOR 
 592 0d14 03240000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0d18 890E0000 	    _ADR HIDE_CURSOR
 595 0d1c AD260000 	    _ADR DUPP 
 596 0d20 7B250000 	    _DOLIT BKSPP  
 596      08000000 
 597 0d28 C9290000 	    _ADR EQUAL 
 598 0d2c BB250000 	    _QBRAN 1f 
 598      440D0000 
 599 0d34 E10D0000 	    _ADR BACK_SPACE 
 600 0d38 9D260000 	8:  _ADR DROP 
 601 0d3c CF250000 	    _BRAN 9b 
 601      100D0000 
 602 0d44 AD260000 	1:  _ADR DUPP 
 603 0d48 7B250000 	    _DOLIT CRR 
 603      0D000000 
 604 0d50 C9290000 	    _ADR EQUAL 
 605 0d54 BB250000 	    _QBRAN 1f 
 605      680D0000 
 606 0d5c 890D0000 	    _ADR CAR_RET
 607 0d60 CF250000 	    _BRAN 8b
 607      380D0000 
 608 0d68 7B250000 	1:  _DOLIT LF 
 608      0A000000 
 609 0d70 C9290000 	    _ADR EQUAL 
 610 0d74 BB250000 	    _QBRAN 9b 
 610      100D0000 
 611 0d7c A10D0000 	    _ADR LN_FEED
 612 0d80 CF250000 	    _BRAN 9b  
 612      100D0000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0d88 504700BF 	   _NEST
 620 0d8c 7B250000 	   _DOLIT 0 
 620      00000000 
 621 0d94 2D090000 	   _ADR CURSOR_COL 
 622 0d98 ED250000 	   _ADR STORE 
 623 0d9c 03240000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
ARM GAS  forth.s 			page 41


 629              	LN_FEED:
 630 0da0 504700BF 	    _NEST 
 631 0da4 41090000 	    _ADR CURSOR_ROW 
 632 0da8 01260000 	    _ADR AT 
 633 0dac AD260000 	    _ADR DUPP 
 634 0db0 7B250000 	    _DOLIT 24 
 634      18000000 
 635 0db8 19270000 	    _ADR XORR 
 636 0dbc BB250000 	    _QBRAN 1f
 636      D40D0000 
 637 0dc4 CD270000 	    _ADR ONEP 
 638 0dc8 41090000 	    _ADR CURSOR_ROW 
 639 0dcc ED250000 	    _ADR STORE 
 640 0dd0 03240000 	    _UNNEST    
 641 0dd4 9D260000 	1:  _ADR DROP 
 642 0dd8 F10A0000 	    _ADR SCROLLUP 
 643 0ddc 03240000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 0de0 504700BF 	  _NEST 
 652 0de4 E10B0000 	  _ADR LEFT 
 653 0de8 010E0000 	  _ADR SHOW_CURSOR
 654 0dec 03240000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 0df0 880C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 0e00 504700BF 	    _NEST 
 663 0e04 7B250000 	    _DOLIT 0xFF
 663      FF000000 
 664 0e0c 41090000 	0:  _ADR CURSOR_ROW
 665 0e10 01260000 	    _ADR AT  
 666 0e14 CD270000 	    _ADR ONEP 
 667 0e18 59090000 	    _ADR ROWY 
 668 0e1c 7B250000 	    _DOLIT BPR
 668      A0000000 
 669 0e24 91270000 	    _ADR STAR
 670 0e28 7B250000 	    _DOLIT BPR  
 670      A0000000 
 671 0e30 81270000 	    _ADR SUBB 
 672 0e34 2D090000 	    _ADR CURSOR_COL
 673 0e38 01260000 	    _ADR AT 
 674 0e3c 71090000 	    _ADR COLX 
 675 0e40 71280000 	    _ADR TWOSL  
 676 0e44 71270000 	    _ADR PLUS
 677 0e48 A1090000 	    _ADR VIDBUFF
ARM GAS  forth.s 			page 42


 678 0e4c 71270000 	    _ADR PLUS
 679 0e50 7B250000 	    _DOLIT 2
 679      02000000 
 680 0e58 55260000 	    _ADR TOR  
 681 0e5c E5280000 	1:  _ADR DDUP 
 682 0e60 0D260000 	    _ADR CSTOR 
 683 0e64 CD270000 	    _ADR ONEP 
 684 0e68 9D250000 	    _DONXT 1b
 684      5C0E0000 
 685 0e70 BD280000 	2:  _ADR DDROP // drop 3 elements 
 686 0e74 03240000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 0e78 F40D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 0e88 504700BF 	    _NEST 
 694 0e8c F9080000 	    _ADR BACKCOLOR 
 695 0e90 01260000 	    _ADR AT 
 696 0e94 AD260000 	    _ADR DUPP  
 697 0e98 7B250000 	    _DOLIT 4 
 697      04000000 
 698 0ea0 61270000 	    _ADR LSHIFT 
 699 0ea4 05270000 	    _ADR ORR 
 700 0ea8 CF250000 	    _BRAN 0b
 700      0C0E0000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 0eb0 7C0E0000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 0ebc 352E     	    cmp TOS,#53
 706 0ebe 01D4     	    bmi 1f 
 707 0ec0 4FF03406 	    mov TOS,#52
 708 0ec4 C4F89460 	1:  str TOS,[UP,#COL]
 709 0ec8 57F8046B 	    _POP
 710 0ecc 192E     	    cmp TOS,#25
 711 0ece 01D4     	    bmi 1f 
 712 0ed0 4FF01806 	    mov TOS,#24 
 713 0ed4 C4F89060 	1:  str TOS,[UP,#ROW]
 714 0ed8 57F8046B 	    _POP 
 715 0edc 01F08EBA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 0ee0 B40E0000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 0eec 504700BF 	    _NEST 
 721 0ef0 F12F0000 	    _ADR PAD 
 722 0ef4 AD260000 	    _ADR DUPP 
 723 0ef8 CD270000 	    _ADR ONEP 
ARM GAS  forth.s 			page 43


 724 0efc 7B250000 	    _DOLIT 53
 724      35000000 
 725 0f04 FD3C0000 	    _ADR ACCEP
 726 0f08 BD260000 	    _ADR SWAP 
 727 0f0c 9D260000 	    _ADR DROP 
 728 0f10 D1260000 	    _ADR OVER 
 729 0f14 0D260000 	    _ADR CSTOR  
 730 0f18 03240000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
ARM GAS  forth.s 			page 44


 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
ARM GAS  forth.s 			page 45


 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
ARM GAS  forth.s 			page 46


 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
ARM GAS  forth.s 			page 47


  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
ARM GAS  forth.s 			page 48


  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
ARM GAS  forth.s 			page 49


  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
ARM GAS  forth.s 			page 50


 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f28 1C61     	   .byte 0x1c,'a' 
   9 0f2a 3262     	   .byte 0x32,'b'
  10 0f2c 2163     	   .byte 0x21,'c'
  11 0f2e 2364     	   .byte 0x23,'d'
  12 0f30 2465     	   .byte 0x24,'e'
  13 0f32 2B66     	   .byte 0x2b,'f'
  14 0f34 3467     	   .byte 0x34,'g'
  15 0f36 3368     	   .byte 0x33,'h'
  16 0f38 4369     	   .byte 0x43,'i'
  17 0f3a 3B6A     	   .byte 0x3B,'j'
  18 0f3c 426B     	   .byte 0x42,'k'
  19 0f3e 4B6C     	   .byte 0x4b,'l'
  20 0f40 3A6D     	   .byte 0x3a,'m'
  21 0f42 316E     	   .byte 0x31,'n'
  22 0f44 446F     	   .byte 0x44,'o'
  23 0f46 4D70     	   .byte 0x4d,'p'
  24 0f48 1571     	   .byte 0x15,'q'
  25 0f4a 2D72     	   .byte 0x2d,'r'
  26 0f4c 1B73     	   .byte 0x1b,'s'
  27 0f4e 2C74     	   .byte 0x2c,'t'
  28 0f50 3C75     	   .byte 0x3c,'u'
  29 0f52 2A76     	   .byte 0x2a,'v'
  30 0f54 1D77     	   .byte 0x1d,'w'
  31 0f56 2278     	   .byte 0x22,'x'
  32 0f58 3579     	   .byte 0x35,'y'
  33 0f5a 1A7A     	   .byte 0x1a,'z'
  34 0f5c 4530     	   .byte 0x45,'0'
  35 0f5e 1631     	   .byte 0x16,'1'
  36 0f60 1E32     	   .byte 0x1e,'2'
  37 0f62 2633     	   .byte 0x26,'3'
  38 0f64 2534     	   .byte 0x25,'4'
  39 0f66 2E35     	   .byte 0x2e,'5'
  40 0f68 3636     	   .byte 0x36,'6'
  41 0f6a 3D37     	   .byte 0x3d,'7'
  42 0f6c 3E38     	   .byte 0x3e,'8'
  43 0f6e 4639     	   .byte 0x46,'9'
  44 0f70 0E60     	   .byte 0x0e,'`'
  45 0f72 4E2D     	   .byte 0x4e,'-'
  46 0f74 553D     	   .byte 0x55,'='
  47 0f76 5D5C     	   .byte 0x5d,'\\'
  48 0f78 545B     	   .byte 0x54,'['
  49 0f7a 5B5D     	   .byte 0x5b,']'
ARM GAS  forth.s 			page 51


  50 0f7c 4C3B     	   .byte 0x4c,';'
  51 0f7e 5227     	   .byte 0x52,'\''
  52 0f80 412C     	   .byte 0x41,','
  53 0f82 492E     	   .byte 0x49,'.'
  54 0f84 7C2A     	   .byte 0x7c,'*'
  55 0f86 792B     	   .byte 0x79,'+'
  56 0f88 2920     	   .byte 0x29,' '
  57 0f8a 5A0D     	   .byte SC_ENTER,CRR 
  58 0f8c 6608     	   .byte SC_BKSP,BKSPP 
  59 0f8e 0D09     	   .byte SC_TAB,9
  60 0f90 761B     	   .byte SC_ESC,27
  61 0f92 119E     	   .byte SC_LALT,VK_LALT 
  62 0f94 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f96 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f98 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f9a 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f9c 5800     	   .byte SC_CAPS,0
  67 0f9e 0580     	   .byte SC_F1,VK_F1
  68 0fa0 0681     	   .byte SC_F2,VK_F2
  69 0fa2 0482     	   .byte SC_F3,VK_F3
  70 0fa4 0C83     	   .byte SC_F4,VK_F4
  71 0fa6 0384     	   .byte SC_F5,VK_F5
  72 0fa8 0B85     	   .byte SC_F6,VK_F6
  73 0faa 8386     	   .byte SC_F7,VK_F7
  74 0fac 0A87     	   .byte SC_F8,VK_F8
  75 0fae 0188     	   .byte SC_F9,VK_F9
  76 0fb0 098A     	   .byte SC_F10,VK_F10
  77 0fb2 788B     	   .byte SC_F11,VK_F11
  78 0fb4 078C     	   .byte SC_F12,VK_F12
  79 0fb6 7030     	   .byte SC_KP0,'0'
  80 0fb8 6931     	   .byte SC_KP1,'1'
  81 0fba 7232     	   .byte SC_KP2,'2'
  82 0fbc 7A33     	   .byte SC_KP3,'3'
  83 0fbe 6B34     	   .byte SC_KP4,'4'
  84 0fc0 7335     	   .byte SC_KP5,'5'
  85 0fc2 7436     	   .byte SC_KP6,'6'
  86 0fc4 6C37     	   .byte SC_KP7,'7'
  87 0fc6 7538     	   .byte SC_KP8,'8'
  88 0fc8 7D39     	   .byte SC_KP9,'9'
  89 0fca 7C2A     	   .byte SC_KPMUL,'*'
  90 0fcc 4A2F     	   .byte SC_KPDIV,'/'
  91 0fce 792B     	   .byte SC_KPPLUS,'+'
  92 0fd0 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fd2 712E     	   .byte SC_KPDOT,'.'
  94 0fd4 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fd6 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fd8 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fda 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fdc 6141     	   .byte 'a','A'
 102 0fde 6242     	   .byte 'b','B'
 103 0fe0 6343     	   .byte 'c','C'
 104 0fe2 6444     	   .byte 'd','D'
 105 0fe4 6545     	   .byte 'e','E'
 106 0fe6 6646     	   .byte 'f','F'
ARM GAS  forth.s 			page 52


 107 0fe8 6747     	   .byte 'g','G'
 108 0fea 6848     	   .byte 'h','H'
 109 0fec 6949     	   .byte 'i','I'
 110 0fee 6A4A     	   .byte 'j','J'
 111 0ff0 6B4B     	   .byte 'k','K'
 112 0ff2 6C4C     	   .byte 'l','L'
 113 0ff4 6D4D     	   .byte 'm','M'
 114 0ff6 6E4E     	   .byte 'n','N'
 115 0ff8 6F4F     	   .byte 'o','O'
 116 0ffa 7050     	   .byte 'p','P'
 117 0ffc 7151     	   .byte 'q','Q'
 118 0ffe 7252     	   .byte 'r','R'
 119 1000 7353     	   .byte 's','S'
 120 1002 7454     	   .byte 't','T'
 121 1004 7555     	   .byte 'u','U'
 122 1006 7656     	   .byte 'v','V'
 123 1008 7757     	   .byte 'w','W'
 124 100a 7858     	   .byte 'x','X'
 125 100c 7959     	   .byte 'y','Y'
 126 100e 7A5A     	   .byte 'z','Z'
 127 1010 3121     	   .byte '1','!'
 128 1012 3240     	   .byte '2','@'
 129 1014 3323     	   .byte '3','#'
 130 1016 3424     	   .byte '4','$'
 131 1018 3525     	   .byte '5','%'
 132 101a 365E     	   .byte '6','^'
 133 101c 3726     	   .byte '7','&'
 134 101e 382A     	   .byte '8','*'
 135 1020 3928     	   .byte '9','('
 136 1022 3029     	   .byte '0',')'
 137 1024 2D5F     	   .byte '-','_'
 138 1026 3D2B     	   .byte '=','+'
 139 1028 607E     	   .byte '`','~'
 140 102a 2722     	   .byte '\'','"'
 141 102c 2C3C     	   .byte ',','<'
 142 102e 2E3E     	   .byte '.','>'
 143 1030 2F3F     	   .byte '/','?'
 144 1032 5C7C     	   .byte '\\','|'
 145 1034 3B3A     	   .byte ';',':'
 146 1036 5B7B     	   .byte '[','{'
 147 1038 5D7D     	   .byte ']','}'
 148 103a 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 103c 315C     	   .byte '1','\\'
 153 103e 3240     	   .byte '2','@'
 154 1040 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 1042 363F     	   .byte '6','?'
 158 1044 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 1046 397B     	   .byte '9','{'
 161 1048 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
ARM GAS  forth.s 			page 53


 164 104a 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 104c 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 104e 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1050 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1052 11A3     	    .byte SC_RALT,VK_RALT
 172 1054 2F97     	    .byte SC_APPS,VK_APPS
 173 1056 758D     	    .byte SC_UP,VK_UP
 174 1058 728E     	    .byte SC_DOWN,VK_DOWN
 175 105a 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 105c 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 105e 7095     	    .byte SC_INSERT,VK_INSERT
 178 1060 6C91     	    .byte SC_HOME,VK_HOME
 179 1062 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1064 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1066 717F     	    .byte SC_DEL,VK_DELETE
 182 1068 6992     	    .byte SC_END,VK_END
 183 106a 4A2F     	    .byte SC_KPDIV,'/'
 184 106c 5A0D     	    .byte SC_KPENTER,'\r'
 185 106e 1200     	    .byte 0x12,0
 186 1070 7C00     	    .byte 0x7c,0
 187 1072 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1074 6303     	   .byte 'c', VK_CTRL_C 
 193 1076 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1078 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 107a 27A2     	   .byte SC_RGUI,VK_RGUI
 196 107c 11A3     	   .byte SC_RALT,VK_RALT
 197 107e 2F97     	   .byte SC_APPS,VK_APPS
 198 1080 7095     	   .byte SC_INSERT,VK_INSERT
 199 1082 6C91     	   .byte SC_HOME,VK_HOME
 200 1084 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1086 717F     	   .byte SC_DEL,VK_DELETE
 202 1088 6992     	   .byte SC_END,VK_END
 203 108a 7A94     	   .byte SC_PGDN,VK_PGDN
 204 108c 758D     	   .byte SC_UP,VK_UP
 205 108e 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1090 728E     	   .byte SC_DOWN,VK_DOWN
 207 1092 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1094 4A2F     	   .byte SC_KPDIV,'/'
 209 1096 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1098 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 109a 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 109c 119E     	   .byte SC_LALT,VK_LALT
 213 109e 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 10a0 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 10a2 761B     	   .byte SC_ESC,VK_ESC
 216 10a4 779A     	   .byte SC_NUM,VK_NLOCK
 217 10a6 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10a8 0000     	   .byte 0,0
 219              	
 220              	
ARM GAS  forth.s 			page 54


  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10aa 00BF     	    _GBL_FUNC kbd_isr 
  79 10ac 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10b4 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10b8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10ba 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10c2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10c6 10F0020F 	    tst r0,#KBD_TX 
  85 10ca 40F08480 	    bne send_bit  
  86 10ce 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10d0 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10d4 01F10102 	    add r2,r1,#1
  89 10d8 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10dc 0029     	    cmp r1,#0
  91 10de 15D0     	    beq start_bit 
  92 10e0 0929     	    cmp r1,#9 
ARM GAS  forth.s 			page 55


  93 10e2 25D0     	    beq parity_bit 
  94 10e4 0A29     	    cmp r1,#10 
  95 10e6 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10e8 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10ec 4FEA5202 	    lsr r2,#1 
  99 10f0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 10f4 07D0     	    beq 1f 
 101 10f6 42F08002 	    orr r2,#(1<<7)
 102 10fa 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 10fe 00F10100 	    add r0,#1 
 104 1102 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 1106 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 110a 63E0     	    b 9f         
 107              	start_bit:
 108 110c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1110 60D1     	    bne 9f // not a start bit 
 110 1112 80EA0000 	    eor r0,r0 
 111 1116 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 111a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 111e 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1122 6FF00101 	    mvn r1,#1
 115 1126 00EA0100 	    and r0,r1 // clear error flag 
 116 112a 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 112e 51E0     	    b 9f 
 118              	parity_bit:
 119 1130 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1134 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1138 4CD0     	    beq 9f  
 122 113a 01F10101 	    add r1,#1 
 123 113e 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 1142 47E0     	    b 9f      
 125              	stop_bit:
 126 1144 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1148 40D0     	    beq 8f // error stop bit expected 
 128 114a 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 114e 11F0010F 	    tst r1,#1 
 130 1152 3BD0     	    beq 8f // error parity
 131 1154 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1158 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 115c E028     	    cmp r0,#XT_KEY
 134 115e 04D1     	    bne 1f
 135 1160 41F04001 	    orr r1,#KBD_F_XT
 136 1164 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1168 30E0     	    b 8f  
 138 116a 11F0800F 	1:  tst r1,#KBD_F_REL
 139 116e 14D0     	    beq store_code
 140 1170 5828     	    cmp r0,#SC_CAPS
 141 1172 04D1     	    bne 1f
 142 1174 81F00401 	    eor r1,#KBD_F_CAPS
 143 1178 41F00101 	    orr r1,#KBD_F_CTGL 
 144 117c 06E0     	    b 2f 
 145 117e 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1188 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 118c 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
ARM GAS  forth.s 			page 56


 148 1190 01EA0201 	    and r1,r2
 149 1194 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 1198 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 119a F028     	    cmp r0,#KEY_REL
 154 119c 04D1     	    bne 1f
 155              	// set release flags 
 156 119e 41F08001 	    orr r1,#KBD_F_REL 
 157 11a2 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 11a6 11E0     	    b 8f     
 159 11a8 0146     	1:  mov r1,r0 
 160 11aa 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11b4 0AD1     	    bne 8f // was async key 
 162 11b6 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11ba 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11be 1154     	    strb r1,[r2,r0]
 165 11c0 00F10100 	    add r0,#1
 166 11c4 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11c8 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11cc 80EA0000 	8:  eor r0,r0 
 169 11d0 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11d4 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11d6 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11da 01F10100 	    add r0,r1,#1
 182 11de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11e2 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11e6 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11ea 0829     	1:  cmp r1,#8 
 187 11ec 15D0     	    beq send_parity 
 188 11ee 0929     	    cmp r1,#9 
 189 11f0 1CD0     	    beq send_stop
 190 11f2 0A29     	    cmp r1,#10
 191 11f4 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 11f6 10F0010F 	    tst r0,#1
 194 11fa 4FEA5000 	    lsr r0,#1
 195 11fe 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1202 02D1     	    bne 1f 
 197 1204 4FEA0242 	    lsl r2,#16
 198 1208 05E0     	    b 2f  
 199 120a 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 120e 00F10100 	    add r0,#1 
 201 1212 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 1216 9A61     	2:  str r2,[R3,#GPIO_BSRR]
ARM GAS  forth.s 			page 57


 203 1218 1CE0     	    b 9f 
 204              	send_parity:
 205 121a 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 121e 10F0010F 	    tst r0,#1
 207 1222 01D0     	    beq 1f 
 208 1224 4FEA0242 	    lsl r2,#16
 209 1228 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 122a 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 122c 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 122e 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1232 1960     	    str r1,[r3,#GPIO_MODER]
 217 1234 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1236 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 123a 6FF00201 	    mvn r1,#KBD_TX 
 221 123e 00EA0100 	    and r0,r1 
 222 1242 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1244 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1248 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 124c 80EA0000 	    eor r0,r0 
 226 1250 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1254 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1256 02B4     	    push {r1}
 238 1258 DFF86414 	    ldr r1,=async_keys
 239 125c 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1266 02BC     	    pop {r1}
 241 1268 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 126a 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1274 FF28     	    cmp r0,#255
ARM GAS  forth.s 			page 58


 256 1276 01D1     	    bne set_async_key 
 257 1278 0020     	    movs r0,#0 
 258 127a 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 127c 06B4     	    push {r1,r2}
 262 127e 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1282 DFF84014 	    ldr r1,=async_jump 
 264 1286 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 128a 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 128e 04E0     	    b set_reset
 268              	ctrl_key:
 269 1290 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1294 01E0     	    b set_reset 
 271              	alt_key:
 272 1296 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 129a 12F0800F 	    tst r2,#KBD_F_REL 
 275 129e 04D0     	    beq 1f 
 276 12a0 6FEA0000 	    mvn r0,r0
 277 12a4 02EA0002 	    and r2,r0
 278 12a8 01E0     	    b 2f
 279 12aa 42EA0002 	1:  orr r2,r0 
 280 12ae 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12b2 5FF0FF30 	    movs r0,#-1
 282 12b6 06BC     	9:  pop {r1,r2}
 283 12b8 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12ba 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12bc 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12be 1401     	    .byte SC_LCTRL,1  // left control 
 290 12c0 1401     	    .byte SC_RCTRL,1  // right control 
 291 12c2 1102     	    .byte SC_LALT,2  // left alt 
 292 12c4 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12c6 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12c8 00       	    .byte 0 // shift  key 
 297 12c9 03       	    .byte (ctrl_key-shift_key)/2
 298 12ca 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12cb 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 12cc 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12d4 1846     	    mov r0,r3 
 311 12d6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
ARM GAS  forth.s 			page 59


 312 12da 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12de 00B5FFF7 	    _CALL gpio_config
 313      27F85DF8 
 313      04EB
 314 12e8 1846     	    mov r0,r3 
 315 12ea 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12ee 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12f2 00B5FFF7 	    _CALL gpio_config
 317      1DF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 12fc 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1304 4FF40050 	    mov r0,#(2<<12)
 321 1308 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 130a 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1312 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1316 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1318 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 131a 80EA0000 	   eor r0,r0 
 328 131e C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1322 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1326 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 132a 4FF00101 	   mov r1,#1 
 333 132e 00B5FEF7 	   _CALL nvic_set_priority
 333      BAFF5DF8 
 333      04EB
 334 1338 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 133c 00B5FEF7 	   _CALL nvic_enable_irq 
 335      CCFF5DF8 
 335      04EB
 336 1346 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1348 E40E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1358 47F8046D 	    _PUSH 
 342 135c 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1360 06F0FC06 	    and TOS,#0xFC  
 344 1364 01F04AB8 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1368 0EB4     	    push {T1,T2,T3}
 352 136a 80EA0000 	    eor T0,T0  
 353 136e 04F17803 	    add T3,UP,#KBD_QUEUE
 354 1372 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1376 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
ARM GAS  forth.s 			page 60


 356 137a 9142     	    cmp T1,T2 
 357 137c 06D0     	    beq 2f  
 358 137e 585C     	    ldrb T0,[T3,T1]
 359 1380 01F10101 	    add T1,#1 
 360 1384 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1388 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 138c 0EBC     	2:  pop {T1,T2,T3}
 363 138e 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1390 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 139a 0000     	    movs T0,T0
 368 139c F8D0     	    beq wait_code  
 369 139e 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 13a0 04B4     	    push {T2}
 380 13a2 11F8012B 	1:  ldrb T2,[T1],#1
 381 13a6 22B1     	    cbz T2,2f 
 382 13a8 8242     	    cmp T2,T0
 383 13aa 02D0     	    beq 2f 
 384 13ac 01F10101 	    add T1,#1 
 385 13b0 F7E7     	    b 1b 
 386 13b2 0878     	2:  ldrb T0,[T1]
 387 13b4 0000     	    movs T0,T0 // set/reset zero flag 
 388 13b6 04BC     	9:  pop {T2}
 389 13b8 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13ba 4C130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 13c8 47F8046D 	    _PUSH 
 398 13cc 86EA0606 	    eor TOS,TOS 
 399 13d0 BD49     	    ldr T1,=sc_ascii // translation table
 400 13d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13d6 4FF04002 	    mov T2,#KBD_F_XT 
 402 13da 1042     	    tst T0,T2
 403 13dc 00D0     	    beq 1f
 404 13de BB49     	    ldr T1,=extended // extended code translation
 405 13e0 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
ARM GAS  forth.s 			page 61


 406 13ea 98B1     	    cbz T0,inkey_exit
 407 13ec E128     	    cmp T0,#XT2_KEY // pause 
 408 13ee 13D0     	    beq pause_key
 409 13f0 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 13fa 0646     	    mov TOS,T0
 411 13fc 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1406 032E     	    cmp TOS,#VK_CTRL_C 
 413 1408 3EF464AE 	    beq user_reboot 
 414 140c 47F8046D 	    _PUSH 
 415 1410 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1414 00F0F2BF 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1418 4FF00701 	    mov T1,#7 
 420 141c 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1426 0139     	    subs T1,#1
 422 1428 F8D1     	    bne 1b 
 423 142a 00F0E7BF 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 142e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1432 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1436 06D1     	    bne shift_down 
 431 1438 10F0200F 	    tst T0,#KBD_F_ALT  
 432 143c 06D1     	    bne altchar_down 
 433 143e 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1442 06D1     	    bne ctrl_down 
 435 1444 0DE0     	    b 9f 
 436              	shift_down:
 437 1446 3046     	    mov T0,TOS 
 438 1448 A149     	    ldr T1,=shifted 
 439 144a 04E0     	    b 8f 
 440              	altchar_down:
 441 144c 3046     	    mov T0,TOS 
 442 144e A149     	    ldr T1,=altchar
 443 1450 01E0     	    b 8f
 444              	ctrl_down:
 445 1452 3046     	    mov T0,TOS 
 446 1454 A049     	    ldr T1,=controls 
 447 1456 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1460 0646     	    mov TOS,T0
 449 1462 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 146c 7047     	    _RET 
 451              	
 452              	do_capslock:
ARM GAS  forth.s 			page 62


 453 146e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1472 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1476 0BD0     	    beq 9f 
 456 1478 412E     	    cmp TOS,#'A'
 457 147a 09D4     	    bmi 9f 
 458 147c 5B2E     	    cmp TOS,#'Z'+1 
 459 147e 03D4     	    bmi 3f 
 460 1480 612E     	    cmp TOS,#'a'
 461 1482 05D4     	    bmi 9f 
 462 1484 7B2E     	    cmp TOS,#'z'+1
 463 1486 03D5     	    bpl 9f 
 464 1488 4FF02000 	3:  mov T0,#(1<<5)
 465 148c 86EA0006 	    eor TOS,T0 
 466 1490 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1492 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1494 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 1496 0128     	    cmp r0,ST_PREVID 
 484 1498 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 149a 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 149e 00B5FEF7 	    _CALL nvic_disable_irq
 487      30FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 14a8 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14b0 1846     	    mov r0,r3 
 491 14b2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14b6 4FF01102 	    mov r2,#OUTPUT_OD
 493 14ba 00B5FEF7 	    _CALL gpio_config 
 493      39FF5DF8 
 493      04EB
 494 14c4 1846     	    mov r0,r3 
 495 14c6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14ca 82EA0202 	    eor r2,r2 
 497 14ce 00B5FEF7 	    _CALL gpio_out 
 497      85FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 14d8 4FF4E150 	    mov r0,#150*48
 500 14dc 0138     	1:  subs r0,#1 
 501 14de FDD1     	    bne 1b
 502 14e0 01BC     	    pop {r0}
ARM GAS  forth.s 			page 63


 503 14e2 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14e6 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14ea 40F00200 	    orr r0,#KBD_TX 
 506 14ee 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14f2 80EA0000 	    eor r0,r0 
 508 14f6 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 14fa 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 14fe 1846     	    mov r0,r3 
 513 1500 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1504 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1508 00B5FEF7 	    _CALL gpio_config 
 515      12FF5DF8 
 515      04EB
 516 1512 1846     	    mov r0,r3 
 517 1514 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1518 82EA0202 	    eor r2,r2 
 519 151c 00B5FEF7 	    _CALL gpio_out
 519      5EFF5DF8 
 519      04EB
 520              	// release clock line 
 521 1526 1846     	    mov r0,r3 
 522 1528 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 152c 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1530 00B5FEF7 	    _CALL gpio_config
 524      FEFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 153a 4FF00A00 	    mov r0,#10
 528 153e E060     	    str r0,[UP,#CD_TIMER]
 529 1540 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1542 20B1     	    cbz r0, 4f 
 531 1544 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1548 10F0020F 	    tst r0,#KBD_TX
 533 154c F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 154e 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1552 00B5FEF7 	    _CALL nvic_enable_irq
 536      C1FE5DF8 
 536      04EB
 537 155c 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1560 20F00201 	    bic r1,r0,#KBD_TX
 539 1564 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1568 00F00200 	    and r0,#KBD_TX
 541 156c 48B1     	    cbz r0, 5f
 542 156e 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1570 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1574 1960     	    str r1,[r3,#GPIO_MODER]
 545 1576 80EA0000 	    eor r0,r0 
 546 157a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 157e 6FEA0000 	    mvn r0,r0   
 548 1582 0EBC     	5:  pop {r1,r2,r3}
 549 1584 7047     	    _RET 
 550              	
 551              	 
ARM GAS  forth.s 			page 64


 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1586 80EA0000 	    eor T0,T0 
 555 158a C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 158e C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1592 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1596 6FF00301 	    mvn T1,#3
 559 159a 00EA0100 	    and T0,T1 
 560 159e 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 15a2 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 15a4 BE130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15b0 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15b4 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15be B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15c0 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15ca 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 15d4 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15d6 EBD0     	    beq 1b 
 575 15d8 4FF4FA70 	    mov T0,#500 
 576 15dc E060     	    str T0,[UP,#CD_TIMER]
 577 15de 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 15e8 10B9     	    cbnz T0,3f
 579 15ea E068     	    ldr T0,[UP,#CD_TIMER]
 580 15ec 0028     	    cmp T0,#0 
 581 15ee F6D1     	    bne 2b 
 582 15f0 47F8046D 	3:  _PUSH 
 583 15f4 0646     	    mov TOS,T0  
 584 15f6 00F001BF 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 15fa A8150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1608 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1612 4FF0ED00 	     mov T0,#KBD_CMD_LED 
ARM GAS  forth.s 			page 65


 594 1616 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1620 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 162a FE28     	    cmp T0,#KBD_CMD_RESEND
 597 162c ECD0     	    beq 1b
 598 162e FA28     	    cmp T0,#KBD_ACK  
 599 1630 F6D1     	    bne 2b 
 600 1632 3046     	2:  mov T0,TOS 
 601 1634 00F00700 	    and T0,#7 
 602 1638 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1642 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 164c FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 164e F0D0     	    beq 2b
 606 1650 FA28     	    cmp T0,#KBD_ACK 
 607 1652 F6D1     	    bne 3b  
 608 1654 57F8046B 	    _POP 
 609 1658 00F0D0BE 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 165c FE150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 166c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1670 10F0010F 	    tst T0,#1
 619 1674 01D1     	    bne 1f 
 620 1676 00F0C1BE 	    _NEXT 
 621 167a 47F8046D 	1: _PUSH 
 622 167e 6FF00101 	    mvn T1,#1 
 623 1682 00EA0100 	    and T0,T1 
 624 1686 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 168a 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 168e 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1696 60160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 16a4 504700BF 	    _NEST
 635 16a8 6D160000 	1:  _ADR CAPS_LED  
ARM GAS  forth.s 			page 66


 636 16ac C9130000 	    _ADR PS2_QKEY 
 637 16b0 81280000 	    _ADR QDUP 
 638 16b4 BB250000 	    _QBRAN 1b  
 638      A8160000 
 639 16bc 03240000 	    _UNNEST 
 640 16c0 BA120000 	
 640      C8120000 
 640      280F0000 
 640      4C100000 
 640      DC0F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16e0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16e8 0346     	    mov r3,r0 
  42 16ea 4FF00401 	    mov r1,#PIN_F_SC 
  43 16ee 4FF00102 	    mov r2,#OUTPUT_PP
  44 16f2 00B5FEF7 	    _CALL gpio_config 
  44      1DFE5DF8 
  44      04EB
ARM GAS  forth.s 			page 67


  45 16fc 1846     	    mov r0,r3 
  46 16fe 4FF00401 	    mov r1,#PIN_F_SC  
  47 1702 4FF00102 	    MOV r2,#1
  48 1706 00B5FEF7 	    _CALL gpio_out 
  48      69FE5DF8 
  48      04EB
  49 1710 1846     	    mov r0,r3 
  50 1712 4FF00501 	    mov r1,#PIN_SCK  
  51 1716 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 171a 00B5FEF7 	    _CALL gpio_config 
  52      09FE5DF8 
  52      04EB
  53 1724 1846     	    mov r0,r3 
  54 1726 4FF00701 	    mov r1,#PIN_MOSI 
  55 172a 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 172e 00B5FEF7 	    _CALL gpio_config 
  56      FFFD5DF8 
  56      04EB
  57 1738 1846     	    mov r0,r3
  58 173a 4FF00601 	    mov r1,#PIN_MISO
  59 173e 4FF00202 	    mov r2,#INPUT_AFO  
  60 1742 00B5FEF7 	    _CALL gpio_config
  60      F5FD5DF8 
  60      04EB
  61              	// PA5:7 at max speed 
  62 174c 4CF6AA40 	    mov r0,#0xCCAA
  63 1750 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  64 1752 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  64      C4F20200 
  65 175a 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  66 175c 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  67 1760 4164     	    str r1,[r0,#RCC_APB2ENR]
  68 1762 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  68      C4F20100 
  69 176a 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  70 176e 0180     	    strh r1,[r0,#SPI_CR1]
  71 1770 196A     	    ldr r1,[r3,#GPIO_AFRL]
  72 1772 80EA0000 	    eor r0,r0 
  73 1776 C5F25050 	    movt r0,#0x5550 
  74 177a 40EA0100 	    orr r0,r1 
  75 177e 1862     	    str r0,[r3,#GPIO_AFRL]
  76 1780 7047     	    _RET 
  77              	
  78              	
  79              	/**********************
  80              	    CHIP-SEL ( -- )
  81              	    drive F_SC low 
  82              	*********************/
  83 1782 9A160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  83      08434849 
  83      502D5345 
  83      4C00
  84 1790 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  84      C4F20200 
  85 1798 4FF00401 	    mov r1,#PIN_F_SC 
  86 179c 4FF00002 	    mov r2,#0 
  87 17a0 00B5FEF7 	    _CALL gpio_out 
ARM GAS  forth.s 			page 68


  87      1CFE5DF8 
  87      04EB
  88 17aa 00F027BE 	    _NEXT 
  89              	
  90              	
  91              	/*********************
  92              	    CHIP-DSEL 
  93              	    drive F_SC high 
  94              	*********************/
  95 17ae 86170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  95      09434849 
  95      502D4453 
  95      454C
  96 17bc 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  96      C4F20100 
  97 17c4 0189     	1:  ldrh T1,[T0,#SPI_SR]
  98 17c6 11F0800F 	    tst T1,(1<<7) // BSY 
  99 17ca FBD1     	    bne 1b 
 100 17cc 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 100      C4F20200 
 101 17d4 4FF00401 	    mov r1,#PIN_F_SC 
 102 17d8 4FF00102 	    mov r2,#1 
 103 17dc 00B5FEF7 	    _CALL gpio_out 
 103      FEFD5DF8 
 103      04EB
 104 17e6 00F009BE 	    _NEXT 
 105              	
 106              	
 107              	/****************************
 108              	    RD-BYTE ( -- )
 109              	    read flash byte 
 110              	***************************/
 111 17ea B2170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 111      0752442D 
 111      42595445 
 111      00BF
 112 17f8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 112      C4F20100 
 113 1800 0189     	0:  ldrh T1,[T0,#SPI_SR]
 114 1802 11F0020F 	    tst T1,#(1<<1) //TXE
 115 1806 FBD0     	    beq 0b 
 116 1808 6FF00001 	    mvn T1,#0 
 117 180c 0173     	    strb T1,[T0,#SPI_DR]
 118 180e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 119 1810 11F0010F 	    tst T1,#(1<<0) // RXNE  
 120 1814 FBD0     	    beq 1b     
 121              	2:  
 122 1816 47F8046D 	    _PUSH 
 123 181a 067B     	    ldrb TOS,[T0,#SPI_DR]
 124 181c 00F0EEBD 	    _NEXT 
 125              	
 126              	
 127              	/*********************************
 128              	    WR-BYTE  ( c -- )
 129              	    write flash byte 
 130              	*************************/
 131 1820 EE170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
ARM GAS  forth.s 			page 69


 131      0757522D 
 131      42595445 
 132 182c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 132      C4F20100 
 133 1834 0189     	0:  ldrh T1,[T0,#SPI_SR]
 134 1836 11F0020F 	    tst T1,#(1<<1) //TXE
 135 183a FBD0     	    beq 0b 
 136 183c 0673     	    strb TOS,[T0,#SPI_DR]
 137 183e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 138 1840 11F0010F 	    tst T1,#(1<<0) // RXNE  
 139 1844 FBD0     	    beq 1b 
 140 1846 8189     	    ldrh T1,[T0,#SPI_DR]
 141 1848 57F8046B 	    _POP 
 142 184c 00F0D6BD 	    _NEXT 
 143              	
 144              	/*************************
 145              	    WR-DIS ( -- )
 146              	    write disable 
 147              	    reset WEL bit 
 148              	*************************/
 149 1850 24180000 	    _HEADER WR_DIS,6,"WR-DIS"
 149      0657522D 
 149      44495300 
 150 185c 504700BF 	    _NEST 
 151 1860 91170000 	    _ADR CHIP_SEL 
 152 1864 7B250000 	    _DOLIT 4
 152      04000000 
 153 186c 2D180000 	    _ADR WR_BYTE
 154 1870 BD170000 	    _ADR CHIP_DSEL
 155 1874 03240000 	    _UNNEST
 156              	
 157              	/*************************
 158              	    WR-ENBL ( -- )
 159              	    set WEL flag in SR0 
 160              	************************/
 161 1878 54180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 161      0757522D 
 161      454E424C 
 162 1884 504700BF 	    _NEST 
 163 1888 91170000 	    _ADR CHIP_SEL 
 164 188c 7B250000 	    _DOLIT 6 
 164      06000000 
 165 1894 2D180000 	    _ADR WR_BYTE 
 166 1898 BD170000 	    _ADR CHIP_DSEL 
 167 189c 03240000 	    _UNNEST 
 168              	
 169              	/********************************
 170              	    RD-SR ( n -- c )
 171              	    read status register  
 172              	********************************/
 173 18a0 7C180000 	    _HEADER RD_SR,5,"RD-SR"
 173      0552442D 
 173      535200BF 
 174 18ac 504700BF 	    _NEST
 175 18b0 91170000 	    _ADR CHIP_SEL  
 176 18b4 7B250000 	    _DOLIT sr_cmd 
 176      D4180000 
ARM GAS  forth.s 			page 70


 177 18bc 71270000 	    _ADR PLUS 
 178 18c0 21260000 	    _ADR CAT
 179 18c4 2D180000 	    _ADR WR_BYTE
 180 18c8 F9170000 	    _ADR RD_BYTE
 181 18cc BD170000 	    _ADR CHIP_DSEL  
 182 18d0 03240000 	    _UNNEST 
 183 18d4 053515   	sr_cmd: .byte 5,0x35,0x15      
 184              	
 185              	/*********************************
 186              	    SEND-ADR ( a -- )
 187              	    send 24 bits address 
 188              	*******************************/
 189 18d7 A4180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 189      0853454E 
 189      442D4144 
 189      52
 190 18e4 504700BF 	    _NEST 
 191 18e8 AD260000 	    _ADR DUPP 
 192 18ec 7B250000 	    _DOLIT 16
 192      10000000 
 193 18f4 49270000 	    _ADR RSHIFT 
 194 18f8 2D180000 	    _ADR WR_BYTE 
 195 18fc AD260000 	    _ADR DUPP
 196 1900 7B250000 	    _DOLIT 8 
 196      08000000 
 197 1908 49270000 	    _ADR RSHIFT 
 198 190c 2D180000 	    _ADR WR_BYTE 
 199 1910 2D180000 	    _ADR WR_BYTE 
 200 1914 03240000 	    _UNNEST 
 201              	
 202              	/**********************************
 203              	    WAIT-DONE ( -- )
 204              	    wait write operation completed 
 205              	**********************************/
 206 1918 DB180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 206      09574149 
 206      542D444F 
 206      4E4500BF 
 207 1928 504700BF 	    _NEST 
 208 192c 7B250000 	1:  _DOLIT 0 
 208      00000000 
 209 1934 AD180000 	    _ADR RD_SR 
 210 1938 7B250000 	    _DOLIT 3 
 210      03000000 
 211 1940 F1260000 	    _ADR ANDD 
 212 1944 BB250000 	    _QBRAN 2f
 212      54190000 
 213 194c CF250000 	    _BRAN 1b
 213      2C190000 
 214 1954 03240000 	2:  _UNNEST 
 215              	
 216              	
 217              	/****************************
 218              	   ERASE-BLK ( a -- )
 219              	   erase 4Ko block  
 220              	***************************/
 221 1958 1C190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
ARM GAS  forth.s 			page 71


 221      09455241 
 221      53452D42 
 221      4C4B00BF 
 222 1968 504700BF 	    _NEST 
 223 196c 85180000 	    _ADR WR_ENBL
 224 1970 91170000 	    _ADR CHIP_SEL 
 225 1974 7B250000 	    _DOLIT 0x20 
 225      20000000 
 226 197c 2D180000 	    _ADR WR_BYTE 
 227 1980 E5180000 	    _ADR SEND_ADR
 228 1984 BD170000 	    _ADR CHIP_DSEL 
 229 1988 29190000 	    _ADR WAIT_DONE 
 230 198c 03240000 	    _UNNEST 
 231              	
 232              	/******************************
 233              	    ERASE-CHIP ( -- )
 234              	    erase all data 
 235              	******************************/
 236 1990 5C190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 236      0A455241 
 236      53452D43 
 236      48495000 
 237 19a0 504700BF 	    _NEST 
 238 19a4 85180000 	    _ADR WR_ENBL 
 239 19a8 91170000 	    _ADR CHIP_SEL
 240 19ac 7B250000 	    _DOLIT 0x60
 240      60000000 
 241 19b4 7B250000 	    _DOLIT 0xC7 
 241      C7000000 
 242 19bc 2D180000 	    _ADR WR_BYTE 
 243 19c0 2D180000 	    _ADR WR_BYTE 
 244 19c4 BD170000 	    _ADR CHIP_DSEL 
 245 19c8 29190000 	    _ADR WAIT_DONE
 246 19cc 03240000 	    _UNNEST 
 247              	
 248              	
 249              	/******************************
 250              	    RD-BLK ( buff n a --  )
 251              	    read n bytes in buff 
 252              	    starting at address a  
 253              	******************************/
 254 19d0 94190000 	    _HEADER RD_BLK,6,"RD-BLK"
 254      0652442D 
 254      424C4B00 
 255 19dc 504700BF 	    _NEST
 256 19e0 91170000 	    _ADR CHIP_SEL 
 257 19e4 7B250000 	    _DOLIT 3 
 257      03000000 
 258 19ec 2D180000 	    _ADR WR_BYTE 
 259 19f0 E5180000 	    _ADR SEND_ADR
 260 19f4 55260000 	    _ADR TOR   
 261 19f8 CF250000 	    _BRAN 2f
 261      101A0000 
 262 1a00 F9170000 	1:  _ADR RD_BYTE
 263 1a04 D1260000 	    _ADR OVER 
 264 1a08 0D260000 	    _ADR CSTOR
 265 1a0c CD270000 	    _ADR ONEP 
ARM GAS  forth.s 			page 72


 266 1a10 9D250000 	2:  _DONXT 1b
 266      001A0000 
 267 1a18 9D260000 	    _ADR DROP 
 268 1a1c BD170000 	    _ADR CHIP_DSEL 
 269 1a20 03240000 	    _UNNEST 
 270              	
 271              	/*****************************
 272              	    WR-BLK ( buff n a -- )
 273              	    write up to 256 bytes 
 274              	    in erased flash
 275              	****************************/
 276 1a24 D4190000 	    _HEADER WR_BLK,6,"WR-BLK"
 276      0657522D 
 276      424C4B00 
 277 1a30 504700BF 	    _NEST 
 278 1a34 85180000 	    _ADR WR_ENBL
 279 1a38 91170000 	    _ADR CHIP_SEL
 280 1a3c 7B250000 	    _DOLIT 2 
 280      02000000 
 281 1a44 2D180000 	    _ADR WR_BYTE 
 282 1a48 E5180000 	    _ADR SEND_ADR
 283 1a4c 55260000 	    _ADR TOR
 284 1a50 CF250000 	    _BRAN 2f 
 284      701A0000 
 285 1a58 AD260000 	1:  _ADR DUPP 
 286 1a5c 21260000 	    _ADR CAT 
 287 1a60 AD260000 	    _ADR DUPP 
 288 1a64 39370000 	    _ADR HDOT
 289 1a68 2D180000 	    _ADR WR_BYTE 
 290 1a6c CD270000 	    _ADR ONEP
 291 1a70 9D250000 	2:  _DONXT 1b 
 291      581A0000 
 292 1a78 9D260000 	    _ADR DROP
 293 1a7c BD170000 	    _ADR CHIP_DSEL
 294 1a80 29190000 	    _ADR WAIT_DONE 
 295 1a84 03240000 	    _UNNEST
 296              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*==========================================================
ARM GAS  forth.s 			page 73


  21              	    THE 'FLOATING POINT ARITHMETIC' ROUTINES
  22              	==========================================================*/
  23              	
  24              	/******************************************************
  25              	    Parsing float32 to IEEE-754 format is quite Complex
  26              	    so I rather adapted  Forth dimensions Volume IV, #1
  27              	    library proposed by Michael Jesch 
  28              	    REF: docs/FD-V04N1.pdf ,  page 23
  29              	
  30              	Format:
  31              	    bit 23:0  6 digits signed mantissa
  32              	    bit 31:24 signed exponent 
  33              	
  34              	*******************************************************/    
  35              	
  36              	    MANTISSA_MASK = 0xffffff // biggest mantissa 
  37              	    MANTISSA_SIGN = 0x800000 
  38              	    MANTISSA_MAX = 0x7fffff 
  39              	
  40              	/*******************************
  41              	    FPSW  variable  ( -- a )
  42              	    floating point state flags 
  43              	    bit 0  zero flag 
  44              	    bit 1  negative flag 
  45              	    bit 2  overflow error 
  46              	*******************************/
  47 1a88 281A0000 	    _HEADER FPSW,4,"FPSW"
  47      04465053 
  47      570000BF 
  48 1a94 47F8046D 	    _PUSH 
  49 1a98 04F1A006 	    add TOS,UP,#VFPSW
  50 1a9c 00F0AEBC 	    _NEXT  
  51              	
  52              	/*******************************
  53              	    FBASE variable ( -- a )
  54              	    floating point numerical base
  55              	**********************************/
  56 1aa0 8C1A0000 	    _HEADER FBASE,5,"FBASE"
  56      05464241 
  56      534500BF 
  57 1aac 47F8046D 	    _PUSH  
  58 1ab0 04F1A406 	    add TOS,UP,#VFBASE 
  59 1ab4 00F0A2BC 	    _NEXT  
  60              	
  61              	/*****************************
  62              	    FRESET ( -- )
  63              	    reset state 
  64              	******************************/
  65 1ab8 A41A0000 	    _HEADER FRESET,6,"FRESET"
  65      06465245 
  65      53455400 
  66 1ac4 80EA0000 	    eor T0,T0 
  67 1ac8 C4F8A000 	    str T0,[UP,#VFPSW]
  68 1acc 00F096BC 	    _NEXT 
  69              	
  70              	/******************************
  71              	    FINIT ( -- )
ARM GAS  forth.s 			page 74


  72              	    initialise floating point 
  73              	******************************/
  74 1ad0 BC1A0000 	    _HEADER FINIT,5,"FINIT"
  74      0546494E 
  74      495400BF 
  75 1adc 504700BF 	    _NEST 
  76 1ae0 C51A0000 	    _ADR FRESET 
  77 1ae4 692B0000 	    _ADR BASE 
  78 1ae8 01260000 	    _ADR AT 
  79 1aec AD1A0000 	    _ADR FBASE 
  80 1af0 ED250000 	    _ADR STORE 
  81 1af4 03240000 	    _UNNEST 
  82              	
  83              	
  84              	/*******************************
  85              	    FER ( -- n )
  86              	    return FPSW value 
  87              	********************************/
  88 1af8 D41A0000 	    _HEADER FER,3,"FER"
  88      03464552 
  89 1b00 47F8046D 	    _PUSH 
  90 1b04 D4F8A060 	    ldr TOS,[UP,#VFPSW]
  91 1b08 00F078BC 	    _NEXT 
  92              	
  93              	/*******************************
  94              	    FZE ( -- flag )
  95              	    return zero flag 
  96              	*******************************/
  97 1b0c FC1A0000 	    _HEADER FZE,3,"FZE"
  97      03465A45 
  98 1b14 47F8046D 	    _PUSH 
  99 1b18 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 100 1b1c 06F00106 	    and TOS,#1
 101 1b20 00F06CBC 	    _NEXT 
 102              	
 103              	/*********************************
 104              	    FNE ( -- flag )
 105              	    return negative flag 
 106              	**********************************/
 107 1b24 101B0000 	    _HEADER FNE,3,"FNE"
 107      03464E45 
 108 1b2c 47F8046D 	    _PUSH 
 109 1b30 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 110 1b34 06F00206 	    and TOS,#2 
 111 1b38 00F060BC 	    _NEXT     
 112              	
 113              	/**********************************
 114              	    FOV ( -- flag )
 115              	    return overflow flag 
 116              	***********************************/
 117 1b3c 281B0000 	    _HEADER FOV,3,"FOV"
 117      03464F56 
 118 1b44 47F8046D 	    _PUSH 
 119 1b48 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 120 1b4c 06F00406 	    and TOS,#4 
 121 1b50 00F054BC 	    _NEXT 
 122              	
ARM GAS  forth.s 			page 75


 123              	/************************************
 124              	    SFZ ( F# -- f# ; z )
 125              	    set zero flag 
 126              	*************************************/
 127 1b54 401B0000 	    _HEADER SFZ,3,"SFZ"
 127      0353465A 
 128 1b5c D4F8A000 	    ldr T0,[UP,#VFPSW]
 129 1b60 20F00100 	    and T0,#-2
 130 1b64 26F07F41 	    and T1,TOS,#MANTISSA_MASK 
 131 1b68 09B1     	    cbz T1, 1f 
 132 1b6a 40F00100 	    orr T0,#1 
 133 1b6e C4F8A000 	1:  str T0,[UP,#VFPSW]
 134 1b72 00F043BC 	    _NEXT 
 135              	
 136              	/************************************
 137              	    SFN ( f# -- f# ; neg )
 138              	    set negative flag 
 139              	*************************************/
 140 1b76 581B0000 	    _HEADER SFN,3,"SFN"
 140      0353464E 
 140      00BF
 141 1b80 D4F8A000 	    ldr T0,[UP,#VFPSW]
 142 1b84 20F00200 	    and T0,#-3
 143 1b88 06F40001 	    and T1,TOS,#(1<<23)
 144 1b8c 4FEA9151 	    lsr T1,#22
 145 1b90 40EA0100 	    orr T0,T1
 146 1b94 C4F8A000 	    str T0,[UP,#VFPSW]
 147 1b98 00F030BC 	    _NEXT 
 148              	
 149              	
 150              	/************************
 151              	    SFV (  -- )
 152              	    set overflow flag 
 153              	************************/
 154 1b9c 7A1B0000 	    _HEADER SFV,3,"SFV"
 154      03534656 
 155 1ba4 D4F8A000 	    ldr T0,[UP,#VFPSW]
 156 1ba8 40F00400 	    orr T0,#4 
 157 1bac C4F8A000 	    str T0,[UP,#VFPSW]
 158 1bb0 00F024BC 	    _NEXT 
 159              	
 160              	/*************************************
 161              	    @EXPONENT ( f# -- m e ; z n )    
 162              	    split exponent and mantissa 
 163              	    update FPSW flags 
 164              	*************************************/
 165 1bb4 A01B0000 	    _HEADER AT_EXPONENT,9,"@EXPONENT"
 165      09404558 
 165      504F4E45 
 165      4E5400BF 
 166 1bc4 504700BF 	    _NEST 
 167 1bc8 C51A0000 	    _ADR FRESET 
 168 1bcc 5D1B0000 	    _ADR SFZ 
 169 1bd0 811B0000 	    _ADR SFN 
 170 1bd4 AD260000 	    _ADR DUPP 
 171 1bd8 2D1B0000 	    _ADR FNE 
 172 1bdc BB250000 	    _QBRAN 1f 
ARM GAS  forth.s 			page 76


 172      F81B0000 
 173 1be4 7B250000 	    _DOLIT 0xFF000000 
 173      000000FF 
 174 1bec 05270000 	    _ADR ORR  
 175 1bf0 CF250000 	    _BRAN 2f 
 175      041C0000 
 176 1bf8 7B250000 	1:  _DOLIT MANTISSA_MASK 
 176      FFFFFF00 
 177 1c00 F1260000 	    _ADR ANDD 
 178 1c04 BD260000 	2:  _ADR SWAP 
 179 1c08 7B250000 	    _DOLIT 24 
 179      18000000 
 180 1c10 49270000 	    _ADR RSHIFT 
 181 1c14 03240000 	    _UNNEST 
 182              	
 183              	/*************************************
 184              	    !EXPONENT ( m e -- f# ; z n )
 185              	    format float from mantissa and
 186              	    exponent. Set flags 
 187              	**************************************/
 188 1c18 B81B0000 	    _HEADER STOR_EXPONENT,9,"!EXPONENT"
 188      09214558 
 188      504F4E45 
 188      4E5400BF 
 189 1c28 504700BF 	    _NEST
 190              	// exponent overflow?    
 191 1c2c AD260000 	    _ADR DUPP 
 192 1c30 A1290000 	    _ADR ABSS 
 193 1c34 7B250000 	    _DOLIT 255 
 193      FF000000 
 194 1c3c 492A0000 	    _ADR GREAT 
 195 1c40 BB250000 	    _QBRAN 1f 
 195      4C1C0000 
 196 1c48 A51B0000 	    _ADR SFV 
 197              	// mantissa overflow?     
 198 1c4c D1260000 	1:  _ADR OVER 
 199 1c50 A1290000 	    _ADR ABSS 
 200 1c54 7B250000 	    _DOLIT 0x7ffffff 
 200      FFFFFF07 
 201 1c5c 492A0000 	    _ADR GREAT 
 202 1c60 BB250000 	    _QBRAN 2f
 202      6C1C0000 
 203 1c68 A51B0000 	    _ADR SFV 
 204 1c6c 7B250000 	2:  _DOLIT 24 
 204      18000000 
 205 1c74 61270000 	    _ADR LSHIFT 
 206 1c78 BD260000 	    _ADR SWAP 
 207 1c7c 7B250000 	    _DOLIT MANTISSA_MASK
 207      FFFFFF00 
 208 1c84 F1260000 	    _ADR ANDD  
 209 1c88 05270000 	    _ADR ORR 
 210 1c8c 811B0000 	    _ADR SFN 
 211 1c90 5D1B0000 	    _ADR SFZ 
 212 1c94 03240000 	    _UNNEST 
 213              	    
 214              	/******************************
 215              	    E. ( f# -- )
ARM GAS  forth.s 			page 77


 216              	    print float in scientific 
 217              	    notation.
 218              	*******************************/
 219 1c98 1C1C0000 	    _HEADER EDOT,2,"E."
 219      02452E00 
 220 1ca0 504700BF 	    _NEST 
 221 1ca4 25350000 	    _ADR SPACE 
 222 1ca8 AD260000 	    _ADR DUPP
 223 1cac 7B250000 	    _DOLIT MANTISSA_MASK 
 223      FFFFFF00 
 224 1cb4 F1260000 	    _ADR ANDD  
 225 1cb8 B5290000 	    _ADR ZEQUAL 
 226 1cbc BB250000 	    _QBRAN 1f 
 226      D81C0000 
 227 1cc4 9D260000 	    _ADR DROP 
 228 1cc8 15360000 	    _DOTQP 3,"0.0"
 228      03302E30 
 229 1cd0 CF250000 	    _BRAN 9f
 229      B81D0000 
 230 1cd8 692B0000 	1:  _ADR BASE 
 231 1cdc 01260000 	    _ADR AT 
 232 1ce0 55260000 	    _ADR TOR 
 233 1ce4 AD1A0000 	    _ADR FBASE 
 234 1ce8 01260000 	    _ADR AT 
 235 1cec 692B0000 	    _ADR BASE 
 236 1cf0 ED250000 	    _ADR STORE
 237 1cf4 C51B0000 	    _ADR AT_EXPONENT
 238 1cf8 BD260000 	    _ADR SWAP 
 239 1cfc A1290000 	    _ADR ABSS 
 240 1d00 652D0000 	2:  _ADR STOD 
 241 1d04 A1310000 	    _ADR BDIGS
 242 1d08 ED310000 	3:  _ADR DIG 
 243 1d0c 95280000 	    _ADR ROT 
 244 1d10 CD270000 	    _ADR ONEP 
 245 1d14 A9280000 	    _ADR NROT 
 246 1d18 D1260000 	    _ADR OVER 
 247 1d1c 692B0000 	    _ADR BASE 
 248 1d20 01260000 	    _ADR AT 
 249 1d24 012A0000 	    _ADR ULESS 
 250 1d28 BB250000 	    _QBRAN 3b
 250      081D0000 
 251 1d30 7B250000 	    _DOLIT '.' 
 251      2E000000 
 252 1d38 C1310000 	    _ADR HOLD 
 253 1d3c 0D320000 	    _ADR DIGS
 254 1d40 2D1B0000 	    _ADR FNE 
 255 1d44 BB250000 	    _QBRAN 4f 
 255      581D0000 
 256 1d4c 7B250000 	    _DOLIT '-'
 256      2D000000 
 257 1d54 C1310000 	    _ADR HOLD 
 258 1d58 69320000 	4:  _ADR EDIGS
 259 1d5c 79350000 	    _ADR TYPEE 
 260 1d60 81280000 	    _ADR QDUP 
 261 1d64 BB250000 	    _QBRAN 8f
 261      AC1D0000 
 262 1d6c 7B250000 	    _DOLIT 'E'
ARM GAS  forth.s 			page 78


 262      45000000 
 263 1d74 85240000 	    _ADR EMIT 
 264 1d78 AD260000 	    _ADR DUPP 
 265 1d7c E1260000 	    _ADR ZLESS 
 266 1d80 BB250000 	    _QBRAN 4f 
 266      981D0000 
 267 1d88 A1290000 	    _ADR ABSS 
 268 1d8c 7B250000 	    _DOLIT '-' 
 268      2D000000 
 269 1d94 85240000 	    _ADR EMIT 
 270 1d98 652D0000 	4:  _ADR STOD
 271 1d9c A1310000 	    _ADR BDIGS 
 272 1da0 0D320000 	    _ADR DIGS 
 273 1da4 69320000 	    _ADR EDIGS 
 274 1da8 79350000 	    _ADR TYPEE     
 275 1dac 2D260000 	8:  _ADR RFROM 
 276 1db0 692B0000 	    _ADR BASE 
 277 1db4 ED250000 	    _ADR STORE 
 278 1db8 03240000 	9:  _UNNEST 
 279              	
 280              	
 281              	/*****************************
 282              	  format integer part 
 283              	/******************************
 284              	    F. ( f# -- )
 285              	    print float in fixed point 
 286              	    format 
 287              	*******************************/
 288 1dbc 9C1C0000 	    _HEADER FDOT,2,"F."
 288      02462E00 
 289 1dc4 504700BF 	    _NEST
 290 1dc8 692B0000 	    _ADR BASE 
 291 1dcc 01260000 	    _ADR AT 
 292 1dd0 55260000 	    _ADR TOR 
 293 1dd4 AD1A0000 	    _ADR FBASE
 294 1dd8 01260000 	    _ADR AT  
 295 1ddc 692B0000 	    _ADR BASE 
 296 1de0 ED250000 	    _ADR STORE 
 297 1de4 25350000 	    _ADR SPACE 
 298 1de8 A1310000 	    _ADR BDIGS
 299 1dec 7B250000 	    _DOLIT '0'
 299      30000000 
 300 1df4 C1310000 	    _ADR HOLD   
 301 1df8 C51B0000 	    _ADR AT_EXPONENT 
 302 1dfc BD260000 	    _ADR SWAP  
 303 1e00 A1290000 	    _ADR ABSS
 304 1e04 652D0000 	    _ADR STOD 
 305 1e08 95280000 	    _ADR ROT  
 306 1e0c AD260000 	    _ADR DUPP 
 307 1e10 E1260000 	    _ADR ZLESS 
 308 1e14 BB250000 	    _QBRAN POS_E // positive exponent   
 308      401E0000 
 309              	// negative exponent
 310 1e1c AD260000 	1:  _ADR DUPP 
 311 1e20 BB250000 	    _QBRAN POS_E   
 311      401E0000 
 312 1e28 A9280000 	    _ADR NROT  
ARM GAS  forth.s 			page 79


 313 1e2c ED310000 	    _ADR DIG  
 314 1e30 95280000 	    _ADR ROT   
 315 1e34 CD270000 	    _ADR ONEP 
 316 1e38 CF250000 	    _BRAN 1b  
 316      1C1E0000 
 317              	POS_E:
 318 1e40 7B250000 	    _DOLIT '.'
 318      2E000000 
 319 1e48 C1310000 	    _ADR HOLD 
 320 1e4c AD260000 	1:  _ADR DUPP 
 321 1e50 BB250000 	    _QBRAN 8f 
 321      701E0000 
 322 1e58 7B250000 	    _DOLIT '0'
 322      30000000 
 323 1e60 C1310000 	    _ADR HOLD 
 324 1e64 DD270000 	    _ADR ONEM 
 325 1e68 CF250000 	    _BRAN 1b
 325      4C1E0000 
 326 1e70 9D260000 	8:  _ADR DROP 
 327 1e74 0D320000 	    _ADR DIGS 
 328 1e78 2D1B0000 	    _ADR FNE
 329 1e7c BB250000 	    _QBRAN 9f 
 329      901E0000 
 330 1e84 7B250000 	    _DOLIT '-'
 330      2D000000 
 331 1e8c C1310000 	    _ADR HOLD 
 332 1e90 69320000 	9:  _ADR EDIGS 
 333 1e94 79350000 	    _ADR TYPEE 
 334 1e98 2D260000 	    _ADR RFROM 
 335 1e9c 692B0000 	    _ADR BASE 
 336 1ea0 ED250000 	    _ADR STORE 
 337 1ea4 03240000 	    _UNNEST 
 338              	
 339              	
 340              	/*******************************
 341              	    F* ( f1 f2 -- f1*f2 )
 342              	    multiply 2 float 
 343              	******************************/
 344 1ea8 C01D0000 	    _HEADER FSTAR,2,"F*"
 344      02462A00 
 345 1eb0 504700BF 	    _NEST 
 346 1eb4 C51B0000 	    _ADR AT_EXPONENT 
 347 1eb8 55260000 	    _ADR TOR 
 348 1ebc BD260000 	    _ADR SWAP 
 349 1ec0 C51B0000 	    _ADR AT_EXPONENT 
 350 1ec4 2D260000 	    _ADR RFROM 
 351 1ec8 71270000 	    _ADR PLUS  // e1+e2
 352 1ecc 55260000 	    _ADR TOR 
 353 1ed0 B9270000 	    _ADR MSTAR // m1*m2 
 354 1ed4 AD260000 	    _ADR DUPP 
 355 1ed8 7B250000 	    _DOLIT 31 
 355      1F000000 
 356 1ee0 49270000 	    _ADR RSHIFT // product sign  
 357 1ee4 A9280000 	    _ADR NROT  // put it on back burner
 358 1ee8 19290000 	    _ADR DABS 
 359 1eec E5280000 	1:  _ADR DDUP 
 360 1ef0 7B250000 	    _DOLIT MANTISSA_MAX     
ARM GAS  forth.s 			page 80


 360      FFFF7F00 
 361 1ef8 7B250000 	    _DOLIT 0 
 361      00000000 
 362 1f00 3D290000 	    _ADR UDGREAT 
 363 1f04 BB250000 	    _QBRAN 2f 
 363      341F0000 
 364 1f0c AD1A0000 	    _ADR FBASE 
 365 1f10 01260000 	    _ADR AT 
 366 1f14 AD2D0000 	    _ADR DSLMOD 
 367 1f18 95280000 	    _ADR ROT 
 368 1f1c 9D260000 	    _ADR DROP
 369 1f20 2D260000 	    _ADR RFROM 
 370 1f24 CD270000 	    _ADR ONEP 
 371 1f28 55260000 	    _ADR TOR 
 372 1f2c CF250000 	    _BRAN 1b 
 372      EC1E0000 
 373 1f34 95280000 	2:  _ADR ROT  // product sign 
 374 1f38 BB250000 	    _QBRAN 3f 
 374      441F0000 
 375 1f40 E92A0000 	    _ADR DNEGA 
 376 1f44 2D260000 	3:  _ADR RFROM 
 377 1f48 291C0000 	    _ADR STOR_EXPONENT
 378 1f4c 03240000 	    _UNNEST  
 379              	
 380              	
 381              	/*******************************
 382              	    F/ ( f1 f2 -- f1/f2 )
 383              	    divide f1 by f2 
 384              	*******************************/
 385 1f50 AC1E0000 	    _HEADER FSLH,2,"F/"
 385      02462F00 
 386 1f58 504700BF 	    _NEST 
 387 1f5c C51B0000 	    _ADR AT_EXPONENT 
 388 1f60 55260000 	    _ADR TOR 
 389 1f64 BD260000 	    _ADR SWAP 
 390 1f68 C51B0000 	    _ADR AT_EXPONENT 
 391 1f6c 2D260000 	    _ADR RFROM
 392 1f70 71270000 	    _ADR PLUS 
 393 1f74 55260000 	    _ADR TOR  
 394 1f78 BD260000 	    _ADR SWAP 
 395 1f7c C52E0000 	    _ADR SLASH 
 396 1f80 2D260000 	    _ADR RFROM 
 397 1f84 291C0000 	    _ADR STOR_EXPONENT
 398 1f88 03240000 	    _UNNEST 
 399              	
 400              	
 401              	/******************************
 402              	    F-ALIGN ( f#1 f#2 -- m1 m2 e )
 403              	    align 2 floats for f+ or f- 
 404              	    operation 
 405              	*********************************/
 406 1f8c 541F0000 	    _HEADER FALIGN,7,"F-ALIGN" 
 406      07462D41 
 406      4C49474E 
 407 1f98 504700BF 	    _NEST 
 408 1f9c C51B0000 	    _ADR AT_EXPONENT 
 409 1fa0 55260000 	    _ADR TOR 
ARM GAS  forth.s 			page 81


 410 1fa4 BD260000 	    _ADR SWAP 
 411 1fa8 C51B0000 	    _ADR AT_EXPONENT
 412 1fac 2D260000 	    _ADR RFROM 
 413 1fb0 E5280000 	    _ADR DDUP 
 414 1fb4 192A0000 	    _ADR LESS 
 415 1fb8 BB250000 	    _QBRAN 4f 
 415      08200000 
 416 1fc0 BD260000 	    _ADR SWAP 
 417 1fc4 55260000 	    _ADR TOR 
 418 1fc8 95280000 	    _ADR ROT // M1 E2 M2 R: E1         
 419 1fcc D1260000 	1:  _ADR OVER 
 420 1fd0 41260000 	    _ADR RAT 
 421 1fd4 E1290000 	    _ADR DIFF 
 422 1fd8 BB250000 	    _QBRAN 2f 
 422      FC1F0000 
 423 1fe0 AD1A0000 	    _ADR FBASE 
 424 1fe4 91270000 	    _ADR STAR 
 425 1fe8 BD260000 	    _ADR SWAP 
 426 1fec DD270000 	    _ADR ONEM 
 427 1ff0 BD260000 	    _ADR SWAP
 428 1ff4 CF250000 	    _BRAN 1b 
 428      CC1F0000 
 429 1ffc BD260000 	2:  _ADR SWAP  
 430 2000 CF250000 	    _BRAN 8f 
 430      44200000 
 431 2008 55260000 	4:  _ADR TOR 
 432 200c BD260000 	    _ADR SWAP // M2 E1 M1 R: E2 
 433 2010 D1260000 	5:  _ADR OVER 
 434 2014 41260000 	    _ADR RAT 
 435 2018 E1290000 	    _ADR DIFF 
 436 201c BB250000 	    _QBRAN 6f 
 436      40200000 
 437 2024 AD1A0000 	    _ADR FBASE 
 438 2028 91270000 	    _ADR STAR 
 439 202c BD260000 	    _ADR SWAP 
 440 2030 DD270000 	    _ADR ONEM 
 441 2034 BD260000 	    _ADR SWAP 
 442 2038 CF250000 	    _BRAN 5b 
 442      10200000 
 443 2040 A9280000 	6:  _ADR NROT 
 444 2044 2D260000 	8:  _ADR RFROM 
 445 2048 9D260000 	    _ADR DROP  // M1 M2 E     
 446 204c 03240000 	    _UNNEST 
 447              	
 448              	/*******************************
 449              	    F+ ( f1 f2 -- f1+f2 )
 450              	    add 2 floats 
 451              	*******************************/
 452 2050 901F0000 	    _HEADER FPLUS,2,"F+"
 452      02462B00 
 453 2058 504700BF 	    _NEST 
 454 205c 991F0000 	    _ADR FALIGN 
 455 2060 55260000 	    _ADR TOR 
 456 2064 71270000 	    _ADR PLUS 
 457 2068 2D260000 	    _ADR RFROM 
 458 206c 291C0000 	    _ADR STOR_EXPONENT
 459 2070 03240000 	    _UNNEST 
ARM GAS  forth.s 			page 82


 460              	
 461              	/*******************************
 462              	    F- ( f1 f2 -- f1-f2 )
 463              	    substract 2 float 
 464              	*******************************/
 465 2074 54200000 	    _HEADER FMINUS,2,"F-"
 465      02462D00 
 466 207c 504700BF 	    _NEST 
 467 2080 991F0000 	    _ADR FALIGN 
 468 2084 55260000 	    _ADR TOR 
 469 2088 81270000 	    _ADR SUBB 
 470 208c 2D260000 	    _ADR RFROM 
 471 2090 291C0000 	    _ADR STOR_EXPONENT
 472 2094 03240000 	    _UNNEST 
 473              	
 474              	
 475              	/********************************
 476              	    FNEGATE ( f -- -f )
 477              	    negate floating point 
 478              	********************************/
 479 2098 78200000 	    _HEADER FNEG,7,"FNEGATE"
 479      07464E45 
 479      47415445 
 480 20a4 3046     	    mov T0,TOS 
 481 20a6 4FF6FF71 	    _MOV32 T1,MANTISSA_MASK 
 481      C0F2FF01 
 482 20ae 00EA0100 	    and T0,T1 
 483 20b2 4FEA0020 	    lsl T0,#8 
 484 20b6 4FEA2020 	    asr T0,#8 
 485 20ba C0F10000 	    rsb T0,#0 
 486 20be 00EA0100 	    and T0,T1 
 487 20c2 6FEA0101 	    mvn T1,T1 
 488 20c6 06EA0106 	    and TOS,T1 
 489 20ca 46EA0006 	    orr TOS,T0 
 490 20ce 95E1     	    _NEXT 
 491              	
 492              	/**********************************
 493              	    FABS ( f -- f )
 494              	    return absolute value 
 495              	******************************/
 496 20d0 9C200000 	    _HEADER FABS,4,"FABS"
 496      04464142 
 496      530000BF 
 497 20dc 3046     	    mov T0,TOS 
 498 20de 4FF6FF71 	    _MOV32 T1,MANTISSA_MASK 
 498      C0F2FF01 
 499 20e6 00EA0100 	    and T0,T1 
 500 20ea 6FEA0101 	    mvn T1,T1 
 501 20ee 10F4000F 	    tst T0,#(1<<23)
 502 20f2 03D0     	    beq 1f
 503 20f4 6FEA0101 	    mvn T1,T1  
 504 20f8 80EA0100 	    eor T0,T1 
 505 20fc 06EA0106 	1:  and TOS,T1 
 506 2100 46EA0006 	    orr TOS,T0 
 507 2104 7AE1     	    _NEXT 
 508              	
 509              	/*******************************
ARM GAS  forth.s 			page 83


 510              	    FMIN ( f#1 f#2 -- smallest )
 511              	********************************/
 512 2106 D4200000 	    _HEADER FMIN,4,"FMIN"
 512      04464D49 
 512      4E00
 513 2110 504700BF 	    _NEST 
 514 2114 E5280000 	    _ADR DDUP 
 515 2118 991F0000 	    _ADR FALIGN 
 516 211c 9D260000 	    _ADR DROP 
 517 2120 492A0000 	    _ADR GREAT   
 518 2124 BB250000 	    _QBRAN 1f 
 518      30210000 
 519 212c BD260000 	    _ADR SWAP 
 520 2130 9D260000 	1:  _ADR DROP 
 521 2134 03240000 	    _UNNEST 
 522              	
 523              	/*******************************
 524              	    FMAX (f#1 f#2 -- largest )
 525              	*******************************/
 526 2138 0A210000 	    _HEADER FMAX,4,"FMAX"
 526      04464D41 
 526      580000BF 
 527 2144 504700BF 	    _NEST 
 528 2148 E5280000 	    _ADR DDUP 
 529 214c 991F0000 	    _ADR FALIGN 
 530 2150 9D260000 	    _ADR DROP 
 531 2154 192A0000 	    _ADR LESS 
 532 2158 BB250000 	    _QBRAN 1f 
 532      64210000 
 533 2160 BD260000 	    _ADR SWAP 
 534 2164 9D260000 	1:  _ADR DROP 
 535 2168 03240000 	    _UNNEST 
 536              	
 537              	/*****************************
 538              	    F> ( f#1 f#2 -- flag )
 539              	    f#1>f#2 ? 
 540              	*****************************/
 541 216c 3C210000 	    _HEADER FGREAT,2,"F>"
 541      02463E00 
 542 2174 504700BF 	    _NEST 
 543 2178 991F0000 	    _ADR FALIGN
 544 217c 9D260000 	    _ADR DROP 
 545 2180 492A0000 	    _ADR GREAT  
 546 2184 03240000 	    _UNNEST 
 547              	
 548              	/*****************************
 549              	    F< ( f#1 f#2 -- flag )
 550              	    f#1<f#2 ? 
 551              	*****************************/
 552 2188 70210000 	    _HEADER FLESS,2,"F<"
 552      02463C00 
 553 2190 504700BF 	    _NEST 
 554 2194 991F0000 	    _ADR FALIGN
 555 2198 9D260000 	    _ADR DROP 
 556 219c 192A0000 	    _ADR LESS   
 557 21a0 03240000 	    _UNNEST 
 558              	
ARM GAS  forth.s 			page 84


 559              	/*******************************
 560              	    F>S ( f -- n )
 561              	    convert float to integer 
 562              	*******************************/
 563 21a4 8C210000 	    _HEADER FTOS,3,"F>S"
 563      03463E53 
 564 21ac 3046     	    mov T0,TOS
 565 21ae 4FF6FF71 	    _MOV32 T1,MANTISSA_MASK  
 565      C0F2FF01 
 566 21b6 00EA0100 	    and T0,T1
 567 21ba 4FEA0020 	    lsl T0,#8 
 568 21be 4FEA2020 	    asr T0,#8
 569 21c2 4FEA2666 	0:  asr TOS,#24 // exponent 
 570 21c6 D4F8A420 	    ldr T2,[UP,#VFBASE]
 571 21ca 16F0004F 	    tst TOS,#(1<<31)
 572 21ce 06D1     	    bne 2f 
 573              	// positive exponent 
 574 21d0 66B1     	1:  cbz TOS,8f 
 575 21d2 58B1     	    cbz T0,8f 
 576 21d4 02FB00F0 	    mul T0,T2 
 577 21d8 A6F10106 	    sub TOS,#1 
 578 21dc F8E7     	    b 1b 
 579              	// negative exponent 
 580 21de 2EB1     	2:  cbz TOS,8f 
 581 21e0 20B1     	    cbz T0,8f 
 582 21e2 90FBF2F0 	    sdiv T0,T2 
 583 21e6 06F10106 	    add TOS,#1
 584 21ea F8E7     	    b 2b 
 585 21ec 0646     	8:  mov TOS,T0 
 586 21ee 05E1     	    _NEXT 
 587              	    
 588              	
 589              	/*******************************
 590              	    S>F ( s -- f )
 591              	    convert integer to float 
 592              	*******************************/
 593 21f0 A8210000 	    _HEADER STOF,3,"S>F" 
 593      03533E46 
 594 21f8 80EA0000 	    eor T0,T0 // exponent 
 595 21fc 82EA0202 	    eor T2,T2 // sign 
 596 2200 D4F8A410 	    ldr T1,[UP,#VFBASE]
 597 2204 4FF6FF73 	    _MOV32 T3,MANTISSA_MAX 
 597      C0F27F03 
 598 220c 16F0004F 	    tst TOS,#(1<<31)
 599 2210 03D0     	    beq 1f 
 600 2212 C6F10006 	    rsb TOS,#0 
 601 2216 6FEA0202 	    mvn T2,T2 // - integer  
 602 221a 9E42     	1:  cmp TOS,T3 
 603 221c 04D4     	    bmi 2f 
 604 221e B6FBF1F6 	    udiv TOS,TOS,T1 
 605 2222 00F10100 	    add T0,#1 
 606 2226 F8E7     	    b 1b
 607 2228 3AB1     	2:  cbz T2,3f 
 608 222a C6F10006 	    rsb TOS,#0 
 609 222e 4FF6FF73 	    _MOV32 T3,MANTISSA_MASK 
 609      C0F2FF03 
 610 2236 06EA0306 	    and TOS,T3
ARM GAS  forth.s 			page 85


 611 223a 4FEA0060 	3:  lsl T0,#24 
 612 223e 46EA0006 	    orr TOS,T0 
 613 2242 DBE0     	    _NEXT 
 614              	
 615              	
 616              	/********************************
 617              	 check for exponent 
 618              	********************************/
 619              	EXPONENT: // ( a -- e a+ )
 620 2244 504700BF 	    _NEST 
 621 2248 7B250000 	    _DOLIT 'E'
 621      45000000 
 622 2250 E1330000 	    _ADR CHARQ 
 623 2254 BB250000 	    _QBRAN 2f 
 623      A8220000 
 624 225c 7B250000 	    _DOLIT '-'
 624      2D000000 
 625 2264 E1330000 	    _ADR CHARQ
 626 2268 55260000 	    _ADR TOR
 627 226c 7B250000 	    _DOLIT 0 
 627      00000000 
 628 2274 AD260000 	    _ADR DUPP  
 629 2278 95280000 	    _ADR ROT 
 630 227c 81330000 	    _ADR PARSE_DIGITS
 631 2280 95280000 	    _ADR ROT
 632 2284 9D260000 	    _ADR DROP // discard digits count  
 633 2288 2D260000 	    _ADR RFROM 
 634 228c BB250000 	    _QBRAN 8f 
 634      B4220000 
 635 2294 BD260000 	    _ADR SWAP
 636 2298 91290000 	    _ADR NEGAT
 637 229c BD260000 	    _ADR SWAP
 638 22a0 CF250000 	    _BRAN 8f    
 638      B4220000 
 639 22a8 7B250000 	2:  _DOLIT 0 
 639      00000000 
 640 22b0 BD260000 	    _ADR SWAP     
 641 22b4 03240000 	8:  _UNNEST 
 642              	
 643              	
 644              	/**********************************
 645              	    FLOAT? ( a -- f# -2 | a 0 )
 646              	    parse float number
 647              	**********************************/
 648 22b8 F4210000 	    _HEADER FLOATQ,6,"FLOAT?"
 648      06464C4F 
 648      41543F00 
 649 22c4 504700BF 	    _NEST
 650 22c8 692B0000 	    _ADR BASE 
 651 22cc 01260000 	    _ADR AT 
 652 22d0 55260000 	    _ADR TOR 
 653 22d4 AD1A0000 	    _ADR FBASE 
 654 22d8 01260000 	    _ADR AT 
 655 22dc 692B0000 	    _ADR BASE 
 656 22e0 ED250000 	    _ADR STORE 
 657 22e4 AD260000 	    _ADR DUPP
 658 22e8 D12A0000 	    _ADR COUNT 
ARM GAS  forth.s 			page 86


 659 22ec 9D260000 	    _ADR DROP  // count not used  
 660 22f0 7B250000 	    _DOLIT 0 
 660      00000000 
 661 22f8 AD260000 	    _ADR DUPP 
 662 22fc 95280000 	    _ADR ROT   // -- a 0 0 a+  
 663              	// check for sign  
 664 2300 7B250000 	    _DOLIT '-'
 664      2D000000 
 665 2308 E1330000 	    _ADR  CHARQ 
 666 230c 55260000 	    _ADR  TOR  
 667 2310 81330000 	    _ADR PARSE_DIGITS 
 668 2314 95280000 	    _ADR ROT 
 669 2318 9D260000 	    _ADR DROP // d not used 
 670 231c 7B250000 	    _DOLIT 0 
 670      00000000 
 671 2324 A9280000 	    _ADR NROT   // reset it ( -- a 0 n a+ ) R: base sign  
 672              	// check for '.'
 673 2328 7B250000 	    _DOLIT '.'
 673      2E000000 
 674 2330 E1330000 	    _ADR  CHARQ
 675 2334 BB250000 	    _QBRAN 1f 
 675      4C230000 
 676 233c 81330000 	    _ADR PARSE_DIGITS 
 677 2340 95280000 	    _ADR ROT 
 678 2344 91290000 	    _ADR NEGAT
 679 2348 A9280000 	    _ADR  NROT // negate digit count ( -- a d n a+ )
 680 234c 45220000 	1:  _ADR EXPONENT // a d n e a+  
 681 2350 D12A0000 	    _ADR COUNT 
 682 2354 B5290000 	    _ADR ZEQUAL 
 683 2358 BB250000 	    _QBRAN 4f   
 683      A0230000 
 684 2360 9D260000 	    _ADR  DROP  // a d n e 
 685 2364 95280000 	    _ADR  ROT 
 686 2368 71270000 	    _ADR  PLUS  // a n e- 
 687 236c 95280000 	    _ADR  ROT
 688 2370 9D260000 	    _ADR  DROP 
 689 2374 BD260000 	    _ADR  SWAP 
 690 2378 2D260000 	    _ADR  RFROM
 691 237c BB250000 	    _QBRAN 3f
 691      88230000 
 692 2384 91290000 	    _ADR NEGAT 
 693 2388 BD260000 	3:  _ADR SWAP
 694 238c 291C0000 	    _ADR STOR_EXPONENT 
 695 2390 7B250000 	    _DOLIT -2
 695      FEFFFFFF 
 696 2398 CF250000 	    _BRAN 8f  
 696      B8230000 
 697 23a0 2D260000 	4:  _ADR RFROM 
 698 23a4 9D260000 	    _ADR DROP 
 699 23a8 BD280000 	    _ADR  DDROP
 700 23ac BD280000 	    _ADR  DDROP  
 701 23b0 7B250000 	    _DOLIT 0 
 701      00000000 
 702              	8:
 703 23b8 2D260000 	    _ADR RFROM 
 704 23bc 692B0000 	    _ADR BASE 
 705 23c0 ED250000 	    _ADR STORE 
ARM GAS  forth.s 			page 87


 706 23c4 03240000 	    _UNNEST 
 707              	
 708              	
 709              	
 710              	/********************************
 711              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 712              	    parse number, integer or float 
 713              	    if not a number return ( a 0 ) 
 714              	    if integer return ( int -1 ) 
 715              	    if float return ( float -2 )
 716              	**********************************/
 717 23c8 BC220000 	    _HEADER NUMBER,6,"NUMBER"
 717      064E554D 
 717      42455200 
 718 23d4 504700BF 	    _NEST 
 719 23d8 05340000 	    _ADR INTQ
 720 23dc 81280000 	    _ADR QDUP 
 721 23e0 BB250000 	    _QBRAN 2f 
 721      EC230000 
 722 23e8 03240000 	    _UNNEST 
 723 23ec C5220000 	2:  _ADR FLOATQ
 724 23f0 03240000 	    _UNNEST 
 725              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
ARM GAS  forth.s 			page 88


  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 23f4 48F804CD 		STMFD	RSP!,{IP}
  85 23f8 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 23fc 5CF8045B 		LDR WP,[IP],#4 
  89 2400 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2402 58F804CB 		LDMFD RSP!,{IP}
ARM GAS  forth.s 			page 89


  92 2406 5CF8045B 		LDR WP,[IP],#4 
  93 240a 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 240c 04F14401 		add T1,UP,#USER_CTOP 
 105 2410 0968     		ldr T1,[T1]
 106 2412 44F25072 		mov T2,#0x4700+(10<<3)
 107 2416 21F8022B 		strh T2,[T1],#2
 108 241a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 241e 21F8022B 		strh T2,[T1],#2 
 110 2422 04F14402 		add T2,UP,#USER_CTOP 
 111 2426 1160     		str T1,[T2]
 112 2428 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 242a 47F8046D 		_PUSH 
 118 242e 04F11406 		ADD TOS,UP,#STDIN 
 119 2432 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2434 47F8046D 		_PUSH 
 125 2438 04F11806 		ADD TOS,UP,#STDOUT
 126 243c DEE7     		_NEXT 
 127              		
 128              	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132 243e CC230000 		_HEADER QKEY,4,"KEY?" 
 132      044B4559 
 132      3F00
 133 2448 504700BF 		_NEST 
 134 244c 2B240000 		_ADR TSTDIN // ' STDIN 
 135 2450 29300000 		_ADR ATEXE
 136 2454 03240000 		_UNNEST 
 137              	
 138              	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142 2458 42240000 		_HEADER KEY,3,"KEY"
 142      034B4559 
 143 2460 504700BF 		_NEST
 144              	KEY1:
 145 2464 6D160000 		_ADR CAPS_LED 
ARM GAS  forth.s 			page 90


 146 2468 49240000 		_ADR	QKEY 
 147 246c BB250000 		_QBRAN	KEY1
 147      64240000 
 148 2474 03240000 		_UNNEST
 149              	
 150              	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154 2478 5C240000 		_HEADER EMIT,4,"EMIT"
 154      04454D49 
 154      540000BF 
 155 2484 504700BF 		_NEST 
 156 2488 35240000 		_ADR TSTDOUT 
 157 248c 29300000 		_ADR ATEXE 
 158 2490 03240000 		_UNNEST 
 159              	
 160              	
 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190 2494 7C240000 		_HEADER RAND,6,"RANDOM"
 190      0652414E 
 190      444F4D00 
 191 24a0 504700BF 		_NEST
 192 24a4 A1290000 		_ADR ABSS   
 193 24a8 192B0000 		_ADR SEED 
 194 24ac 01260000 		_ADR AT 
 195 24b0 AD260000 		_ADR DUPP 
 196 24b4 7B250000 		_DOLIT 13
 196      0D000000 
ARM GAS  forth.s 			page 91


 197 24bc 61270000 		_ADR LSHIFT 
 198 24c0 19270000 		_ADR XORR  
 199 24c4 AD260000 		_ADR DUPP 
 200 24c8 7B250000 		_DOLIT 17 
 200      11000000 
 201 24d0 49270000 		_ADR RSHIFT 
 202 24d4 19270000 		_ADR XORR 
 203 24d8 AD260000 		_ADR DUPP
 204 24dc 7B250000 		_DOLIT 5 
 204      05000000 
 205 24e4 61270000 		_ADR LSHIFT 
 206 24e8 19270000 		_ADR XORR  
 207 24ec AD260000 		_ADR DUPP 
 208 24f0 192B0000 		_ADR SEED 
 209 24f4 ED250000 		_ADR STORE 
 210 24f8 7B250000 		_DOLIT 0x7FFFFFFF
 210      FFFFFF7F 
 211 2500 F1260000 		_ADR ANDD 
 212 2504 BD260000 		_ADR SWAP 
 213 2508 AD2E0000 		_ADR MODD 
 214 250c 03240000 		_UNNEST 
 215              	
 216              	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221 2510 98240000 		_HEADER PAUSE,5,"PAUSE"
 221      05504155 
 221      534500BF 
 222 251c 504700BF 		_NEST 
 223 2520 412B0000 		_ADR TIMER 
 224 2524 ED250000 		_ADR STORE 
 225              	PAUSE_LOOP:
 226 2528 412B0000 		_ADR TIMER 
 227 252c 01260000 		_ADR AT 
 228 2530 BB250000 		_QBRAN PAUSE_EXIT 
 228      40250000 
 229 2538 CF250000 		_BRAN PAUSE_LOOP 
 229      28250000 
 230              	PAUSE_EXIT: 		
 231 2540 03240000 		_UNNEST 
 232              	
 233              	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237 2544 14250000 		_HEADER ULED,4,"ULED"
 237      04554C45 
 237      440000BF 
 238 2550 4FF40050 		mov T0,#(1<<LED_PIN)
 239 2554 4FF40061 		_MOV32 T1,LED_GPIO 
 239      C4F20201 
 240 255c 3600     		movs TOS,TOS 
 241 255e 57F8046B 		_POP
 242 2562 03D0     		beq ULED_OFF
 243 2564 4FEA0040 		lsl T0,#16 
ARM GAS  forth.s 			page 92


 244 2568 8861     		str T0,[T1,#GPIO_BSRR]
 245 256a 47E7     		_NEXT 
 246              	ULED_OFF:
 247 256c 8861     		str T0,[T1,#GPIO_BSRR]
 248 256e 45E7     		_NEXT    
 249              	
 250              	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
 259              	*********************/
 260 2570 48250000 		_HEADER NOP,3,"NOP"
 260      034E4F50 
 261 2578 40E7     		_NEXT 
 262              	 
 263              	/********************
 264              	    doLIT	( -- w )
 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269 257a 47F8046D 		_PUSH				//  store TOS on data stack
 270 257e 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 2582 3BE7     		_NEXT 
 272              	
 273              	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
 277 2584 74250000 		_HEADER EXECU,7,"EXECUTE"
 277      07455845 
 277      43555445 
 278 2590 46F00105 		ORR	WP,TOS,#1 
 279 2594 57F8046B 		_POP
 280 2598 2847     		BX WP 
 281 259a 2FE7     		_NEXT 
 282              	
 283              	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291 259c D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 292 25a0 22B9     		CBNZ T2,NEXT1 
 293              		/* loop done */
 294 25a2 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 295 25a6 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 296 25aa 27E7     		_NEXT
 297              	NEXT1:
ARM GAS  forth.s 			page 93


 298              		/* decrement loop counter */
 299 25ac A2F10102 		SUB	T2,T2,#1
 300 25b0 C8F80020 		STR	T2,[RSP]
 301 25b4 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 302 25b8 20E7     		_NEXT 
 303              	
 304              	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310 25ba 3600     		MOVS	TOS,TOS
 311 25bc 57F8046B 		_POP
 312 25c0 02D1     		BNE	QBRAN1
 313 25c2 DCF800C0 		LDR	IP,[IP]
 314 25c6 19E7     		_NEXT
 315              	QBRAN1:
 316 25c8 0CF1040C 	 	ADD	IP,IP,#4
 317 25cc 16E7     		_NEXT
 318              	
 319              	/***********************************
 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325 25ce DCF800C0 		LDR	IP,[IP]
 326 25d2 13E7     		_NEXT
 327              	
 328              	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
 332 25d4 88250000 		_HEADER EXIT,4,"EXIT"
 332      04455849 
 332      540000BF 
 333 25e0 03240000 		_UNNEST
 334              	
 335              	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339 25e4 D8250000 		_HEADER STORE,1,"!"
 339      012100BF 
 340 25ec 57F8045B 		LDR	WP,[DSP],#4
 341 25f0 3560     		STR	WP,[TOS]
 342 25f2 57F8046B 		_POP
 343 25f6 01E7     		_NEXT 
 344              	
 345              	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349 25f8 E8250000 		_HEADER AT,1,"@"
 349      014000BF 
 350 2600 3668     		LDR	TOS,[TOS]
ARM GAS  forth.s 			page 94


 351 2602 FBE6     		_NEXT 
 352              	
 353              	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357 2604 FC250000 		_HEADER CSTOR,2,"C!"
 357      02432100 
 358 260c 57F8045B 		LDR	WP,[DSP],#4
 359 2610 3570     		STRB WP,[TOS]
 360 2612 57F8046B 		_POP
 361 2616 F1E6     		_NEXT
 362              	
 363              	/*********************************************
 364              	    C@	  ( b -- c )
 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367 2618 08260000 		_HEADER CAT,2,"C@"
 367      02434000 
 368 2620 3678     		LDRB	TOS,[TOS]
 369 2622 EBE6     		_NEXT 
 370              	
 371              	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375 2624 1C260000 		_HEADER RFROM,2,"R>"
 375      02523E00 
 376 262c 47F8046D 		_PUSH
 377 2630 58F8046B 		LDR	TOS,[RSP],#4
 378 2634 E2E6     		_NEXT 
 379              	
 380              	/************************************************
 381              	    R@	  ( -- w )
 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384 2636 28260000 		_HEADER RAT,2,"R@"
 384      02524000 
 384      00BF
 385 2640 47F8046D 		_PUSH
 386 2644 D8F80060 		LDR	TOS,[RSP]
 387 2648 D8E6     		_NEXT 
 388              	
 389              	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393 264a 3A260000 		_HEADER TOR,2,">R"
 393      023E5200 
 393      00BF
 394 2654 48F8046D 		STR	TOS,[RSP,#-4]!
 395 2658 57F8046B 		_POP
 396 265c CEE6     		_NEXT
 397              	
 398              	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
ARM GAS  forth.s 			page 95


 401              	*******************************/
 402 265e 4E260000 		_HEADER RPSTOR,3,"RP!"
 402      03525021 
 402      00BF
 403 2668 B046     		MOV RSP,TOS 
 404 266a 57F8046B 		_POP  
 405 266e C5E6     		_NEXT 
 406              	
 407              	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411 2670 62260000 		_HEADER SPSTOR,3,"SP!"
 411      03535021 
 412 2678 3746     		MOV DSP,TOS 
 413 267a 86EA0606 		EOR TOS,TOS,TOS 
 414 267e BDE6     		_NEXT 
 415              	
 416              	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
 420 2680 74260000 		_HEADER SPAT,3,"SP@"
 420      03535040 
 421 2688 47F8046D 		_PUSH
 422 268c 3E46     		MOV	TOS,DSP
 423 268e B5E6     		_NEXT
 424              	
 425              	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429 2690 84260000 		_HEADER DROP,4,"DROP"
 429      0444524F 
 429      500000BF 
 430 269c 57F8046B 		_POP
 431 26a0 ACE6     		_NEXT 
 432              	
 433              	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437 26a2 94260000 		_HEADER DUPP,3,"DUP"
 437      03445550 
 437      00BF
 438 26ac 47F8046D 		_PUSH
 439 26b0 A4E6     		_NEXT 
 440              	
 441              	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445 26b2 A6260000 		_HEADER SWAP,4,"SWAP"
 445      04535741 
 445      5000
 446 26bc 3D68     		LDR	WP,[DSP]
 447 26be 3E60     		STR	TOS,[DSP]
ARM GAS  forth.s 			page 96


 448 26c0 2E46     		MOV	TOS,WP
 449 26c2 9BE6     		_NEXT 
 450              	
 451              	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455 26c4 B6260000 		_HEADER OVER,4,"OVER"
 455      044F5645 
 455      520000BF 
 456 26d0 47F8046D 		_PUSH
 457 26d4 7E68     		LDR	TOS,[DSP,#4]
 458 26d6 91E6     		_NEXT 
 459              	
 460              	/***********************************
 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
 464 26d8 C8260000 		_HEADER ZLESS,2,"0<"
 464      02303C00 
 465 26e0 4FEAE676 		ASR TOS,#31
 466 26e4 8AE6     		_NEXT 
 467              	
 468              	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472 26e6 DC260000 		_HEADER ANDD,3,"AND"
 472      03414E44 
 472      00BF
 473 26f0 57F8045B 		LDR	WP,[DSP],#4
 474 26f4 06EA0506 		AND	TOS,TOS,WP
 475 26f8 80E6     		_NEXT 
 476              	
 477              	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481 26fa EA260000 		_HEADER ORR,2,"OR"
 481      024F5200 
 481      00BF
 482 2704 57F8045B 		LDR	WP,[DSP],#4
 483 2708 46EA0506 		ORR	TOS,TOS,WP
 484 270c 76E6     		_NEXT 
 485              	
 486              	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490 270e FE260000 		_HEADER XORR,3,"XOR"
 490      03584F52 
 490      00BF
 491 2718 57F8045B 		LDR	WP,[DSP],#4
 492 271c 86EA0506 		EOR	TOS,TOS,WP
 493 2720 6CE6     		_NEXT 
 494              	
 495              	/**************************************************
ARM GAS  forth.s 			page 97


 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499 2722 12270000 		_HEADER UPLUS,3,"UM+"
 499      03554D2B 
 499      00BF
 500 272c 3D68     		LDR	WP,[DSP]
 501 272e AD19     		ADDS	WP,WP,TOS
 502 2730 4FF00006 		MOV	TOS,#0
 503 2734 46F10006 		ADC	TOS,TOS,#0
 504 2738 3D60     		STR	WP,[DSP]
 505 273a 5FE6     		_NEXT 
 506              	
 507              	/*********************************
 508              	    RSHIFT	 ( w # -- w )
 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511 273c 26270000 		_HEADER RSHIFT,6,"RSHIFT"
 511      06525348 
 511      49465400 
 512 2748 57F8045B 		LDR	WP,[DSP],#4
 513 274c 45FA06F6 		MOV	TOS,WP,ASR TOS
 514 2750 54E6     		_NEXT 
 515              	
 516              	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520 2752 40270000 		_HEADER LSHIFT,6,"LSHIFT"
 520      064C5348 
 520      49465400 
 520      00BF
 521 2760 57F8045B 		LDR	WP,[DSP],#4
 522 2764 05FA06F6 		MOV	TOS,WP,LSL TOS
 523 2768 48E6     		_NEXT
 524              	
 525              	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529 276a 56270000 		_HEADER PLUS,1,"+"
 529      012B
 530 2770 57F8045B 		LDR	WP,[DSP],#4
 531 2774 2E44     		ADD	TOS,TOS,WP
 532 2776 41E6     		_NEXT 
 533              	
 534              	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538 2778 6E270000 		_HEADER SUBB,1,"-"
 538      012D00BF 
 539 2780 57F8045B 		LDR	WP,[DSP],#4
 540 2784 C6EB0506 		RSB	TOS,TOS,WP
 541 2788 38E6     		_NEXT 
 542              	
 543              	/************************
ARM GAS  forth.s 			page 98


 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547 278a 7C270000 		_HEADER STAR,1,"*"
 547      012A
 548 2790 57F8045B 		LDR	WP,[DSP],#4
 549 2794 05FB06F6 		MUL	TOS,WP,TOS
 550 2798 30E6     		_NEXT 
 551              	
 552              	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556 279a 8E270000 		_HEADER UMSTA,3,"UM*"
 556      03554D2A 
 556      00BF
 557 27a4 3D68     		LDR	WP,[DSP]
 558 27a6 A6FB0523 		UMULL	T2,T3,TOS,WP
 559 27aa 3A60     		STR	T2,[DSP]
 560 27ac 1E46     		MOV	TOS,T3
 561 27ae 25E6     		_NEXT 
 562              	
 563              	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              		hold double result
 567              	***************************/
 568 27b0 9E270000 		_HEADER MSTAR,2,"M*"
 568      024D2A00 
 569 27b8 3D68     		LDR	WP,[DSP]
 570 27ba 86FB0523 		SMULL	T2,T3,TOS,WP
 571 27be 3A60     		STR	T2,[DSP]
 572 27c0 1E46     		MOV	TOS,T3
 573 27c2 1BE6     		_NEXT 
 574              	
 575              	/***************************
 576              	    1+	 ( w -- w+1 )
 577              	 	Add 1.
 578              	***************************/
 579 27c4 B4270000 		_HEADER ONEP,2,"1+"
 579      02312B00 
 580 27cc 06F10106 		ADD	TOS,TOS,#1
 581 27d0 14E6     		_NEXT 
 582              	
 583              	/***************************
 584              	    1-	 ( w -- w-1 )
 585              	 	Subtract 1.
 586              	***************************/
 587 27d2 C8270000 		_HEADER ONEM,2,"1-"
 587      02312D00 
 587      00BF
 588 27dc A6F10106 		SUB	TOS,TOS,#1
 589 27e0 0CE6     		_NEXT 
 590              	
 591              	/***************************
 592              	    2+	 ( w -- w+2 )
 593              	 	Add 2.
ARM GAS  forth.s 			page 99


 594              	**************************/
 595 27e2 D6270000 		_HEADER TWOP,2,"2+"
 595      02322B00 
 595      00BF
 596 27ec 06F10206 		ADD	TOS,TOS,#2
 597 27f0 04E6     		_NEXT
 598              	
 599              	/**************************
 600              	    2-	 ( w -- w-2 )
 601              	 	Subtract 2.
 602              	**************************/
 603 27f2 E6270000 		_HEADER TWOM,2,"2-"
 603      02322D00 
 603      00BF
 604 27fc A6F10206 		SUB	TOS,TOS,#2
 605 2800 FCE5     		_NEXT
 606              	
 607              	/***************************
 608              	    CELL+	( w -- w+4 )
 609              	 	Add CELLL.
 610              	***************************/
 611 2802 F6270000 		_HEADER CELLP,5,"CELL+"
 611      0543454C 
 611      4C2B
 612 280c 06F10406 		ADD	TOS,TOS,#CELLL
 613 2810 F4E5     		_NEXT
 614              	
 615              	/***************************
 616              	    CELL-	( w -- w-4 )
 617              	 	Subtract CELLL.
 618              	**************************/
 619 2812 06280000 		_HEADER CELLM,5,"CELL-"
 619      0543454C 
 619      4C2D
 620 281c A6F10406 		SUB	TOS,TOS,#CELLL
 621 2820 ECE5     		_NEXT
 622              	
 623              	/**************************** 
 624              	    BL	( -- 32 )
 625              	 	Blank (ASCII space).
 626              	*****************************/
 627 2822 16280000 		_HEADER BLANK,2,"BL"
 627      02424C00 
 627      00BF
 628 282c 47F8046D 		_PUSH
 629 2830 4FF02006 		MOV	TOS,#32
 630 2834 E2E5     		_NEXT 
 631              	
 632              	/**************************
 633              	    CELLS	( w -- w*4 )
 634              	 	Multiply CELLL 
 635              	***************************/
 636 2836 26280000 		_HEADER CELLS,5,"CELLS"
 636      0543454C 
 636      4C53
 637 2840 4FEA8606 		LSL TOS,#2
 638 2844 DAE5     		_NEXT
ARM GAS  forth.s 			page 100


 639              	
 640              	/***************************
 641              	    CELL/	( w -- w/4 )
 642              	 	Divide by CELLL.
 643              	***************************/
 644 2846 3A280000 		_HEADER CELLSL,5,"CELL/"
 644      0543454C 
 644      4C2F
 645 2850 4FEAA606 		ASR TOS,#2
 646 2854 D2E5     		_NEXT
 647              	
 648              	/*************************
 649              	    2*	( w -- w*2 )
 650              	 	Multiply 2.
 651              	*************************/
 652 2856 4A280000 		_HEADER TWOST,2,"2*"
 652      02322A00 
 652      00BF
 653 2860 4FEA4606 		MOV	TOS,TOS,LSL#1
 654 2864 CAE5     		_NEXT
 655              	
 656              	/*************************
 657              	    2/	( w -- w/2 )
 658              	 	Divide by 2.
 659              	***********************/
 660 2866 5A280000 		_HEADER TWOSL,2,"2/"
 660      02322F00 
 660      00BF
 661 2870 4FEA6606 		MOV	TOS,TOS,ASR#1
 662 2874 C2E5     		_NEXT
 663              	
 664              	/****************************
 665              	    ?DUP	( w -- w w | 0 )
 666              	 	Conditional duplicate.
 667              	*****************************/
 668 2876 6A280000 		_HEADER QDUP,4,"?DUP"
 668      043F4455 
 668      5000
 669 2880 3500     		MOVS	WP,TOS
 670 2882 18BF     		IT NE 
 671 2884 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 672 2888 B8E5     		_NEXT
 673              	
 674              	/***********************************
 675              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 676              	 	Rotate top 3 items.
 677              	*************************************/
 678 288a 7A280000 		_HEADER ROT,3,"ROT"
 678      03524F54 
 678      00BF
 679 2894 3868     		LDR	T0,[DSP]  // w2 
 680 2896 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 681 2898 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 682 289a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 683 289c AEE5     		_NEXT
 684              	
 685              	/*********************************
ARM GAS  forth.s 			page 101


 686              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 687              	 left rotate top 3 elements 
 688              	********************************/
 689 289e 8E280000 		_HEADER NROT,4,"-ROT"
 689      042D524F 
 689      5400
 690 28a8 7868     		LDR T0,[DSP,#4]
 691 28aa 7E60     		STR TOS,[DSP,#4]	
 692 28ac 3E68     		LDR TOS,[DSP]
 693 28ae 3860     		STR T0,[DSP]
 694 28b0 A4E5     		_NEXT 
 695              	
 696              	/*********************************
 697              	    2DROP	( w1 w2 -- )
 698              	 	Drop top 2 items.
 699              	*********************************/
 700 28b2 A2280000 		_HEADER DDROP,5,"2DROP"
 700      05324452 
 700      4F50
 701 28bc 57F8046B 		_POP
 702 28c0 57F8046B 		_POP
 703 28c4 9AE5     		_NEXT 
 704              	
 705              	/********************************
 706              		3DROP ( w1 w2 w3 -- )
 707              		drop top 3 items 
 708              	********************************/
 709 28c6 B6280000 		_HEADER TDROP,5,"3DROP"
 709      05334452 
 709      4F50
 710 28d0 07F10807 	    add DSP,#8 
 711 28d4 57F8046B 	    _POP 
 712 28d8 90E5     	    _NEXT 
 713              	
 714              	/***********************************
 715              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 716              	 	Duplicate top 2 items.
 717              	************************************/
 718 28da CA280000 		_HEADER DDUP,4,"2DUP"
 718      04324455 
 718      5000
 719 28e4 3868     		LDR	T0,[DSP] // w1
 720 28e6 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 721 28ea 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 722 28ee 85E5     		_NEXT
 723              	
 724              	/******************************
 725              	    D+	( d1 d2 -- d3 )
 726              	 	Add top 2 double numbers.
 727              	******************************/
 728 28f0 DE280000 		_HEADER DPLUS,2,"D+"
 728      02442B00 
 729 28f8 57F8045B 		LDR	WP,[DSP],#4
 730 28fc 57F8042B 		LDR	T2,[DSP],#4
 731 2900 3B68     		LDR	T3,[DSP]
 732 2902 ED18     		ADDS	WP,WP,T3
 733 2904 3D60     		STR	WP,[DSP]
ARM GAS  forth.s 			page 102


 734 2906 46EB0206 		ADC	TOS,TOS,T2
 735 290a 77E5     		_NEXT
 736              	
 737              	/******************************
 738              		DABS ( d -- ud )
 739              		absolute value double 
 740              	*****************************/
 741 290c F4280000 		_HEADER DABS,4,"DABS"
 741      04444142 
 741      530000BF 
 742 2918 16F0004F 		tst TOS,#(1<<31)
 743 291c 09D0     		beq 9f 
 744 291e 6FEA0606 		mvn TOS,TOS 
 745 2922 3D68     		ldr WP,[DSP]
 746 2924 6FEA0505 		mvn WP,WP 
 747 2928 0135     		adds WP,#1
 748 292a 3D60     		str WP,[DSP]
 749 292c 01D3     		bcc 9f 
 750 292e 06F10106 		add TOS,#1 
 751 2932 63E5     	9:	_NEXT 
 752              	
 753              	/*****************************
 754              	  UD> ( d1 d2 -- f )
 755              	  unsigned compare double d1 > d2 
 756              	******************************/
 757 2934 10290000 		_HEADER UDGREAT,3,"UD>"
 757      0355443E 
 758 293c 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 759 2940 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 760 2942 B042     		cmp T0,TOS 
 761 2944 02D8     		bhi 1f
 762 2946 04D4     		bmi 2f  
 763 2948 A942     		cmp T1,WP 
 764 294a 02D9     		bls 2f 
 765 294c 4FF0FF36 	1:	mov TOS,#-1 
 766 2950 54E5     		_NEXT 
 767 2952 4FF00006 	2:  mov TOS,#0 
 768 2956 51E5     		_NEXT 
 769              	
 770              	/******************************
 771              		D0= ( d -- f )
 772              		double 0= 
 773              	*****************************/
 774 2958 38290000 		_HEADER DZEQUAL,3,"D0="
 774      0344303D 
 775 2960 3046     		mov T0,TOS
 776 2962 57F8046B 		_POP 
 777 2966 46EA0006 		orr TOS,T0 
 778 296a 01D0     		beq 9f
 779 296c 6FF00006 		mvn TOS,#0 
 780 2970 44E5     	9:	_NEXT 
 781              	
 782              	/*****************************
 783              	    NOT	 ( w -- !w )
 784              	 	1"s complement.
 785              	*****************************/
 786 2972 5C290000 		_HEADER INVER,3,"NOT"
ARM GAS  forth.s 			page 103


 786      034E4F54 
 786      00BF
 787 297c 6FEA0606 		MVN	TOS,TOS
 788 2980 3CE5     		_NEXT
 789              	
 790              	/*****************************
 791              	    NEGATE	( w -- -w )
 792              	 	2's complement.
 793              	***************************/
 794 2982 76290000 		_HEADER NEGAT,6,"NEGATE"
 794      064E4547 
 794      41544500 
 794      00BF
 795 2990 C6F10006 		RSB	TOS,TOS,#0
 796 2994 32E5     		_NEXT
 797              	
 798              	/***************************
 799              	    ABS	 ( w -- |w| )
 800              	 	Absolute.
 801              	**************************/
 802 2996 86290000 		_HEADER ABSS,3,"ABS"
 802      03414253 
 802      00BF
 803 29a0 16F0004F 		TST	TOS,#0x80000000
 804 29a4 18BF     		IT NE
 805 29a6 7642     	    RSBNE   TOS,TOS,#0
 806 29a8 28E5     		_NEXT
 807              	
 808              	/*******************
 809              	  0= ( w -- f )
 810              	 TOS==0?
 811              	*******************/
 812 29aa 9A290000 		_HEADER ZEQUAL,2,"0="
 812      02303D00 
 812      00BF
 813 29b4 16B9     		cbnz TOS,1f
 814 29b6 4FF0FF36 		mov TOS,#-1
 815 29ba 1FE5     		_NEXT 
 816 29bc 86EA0606 	1:  eor TOS,TOS,TOS  
 817 29c0 1CE5     		_NEXT 	
 818              	
 819              	/*********************
 820              	    =	 ( w w -- t )
 821              	 	Equal?
 822              	*********************/
 823 29c2 AE290000 		_HEADER EQUAL,1,"="
 823      013D
 824 29c8 57F8045B 		LDR	WP,[DSP],#4
 825 29cc AE42     		CMP	TOS,WP
 826 29ce 0CBF     		ITE EQ 
 827 29d0 6FF00006 	    MVNEQ	TOS,#0
 828 29d4 0026     		MOVNE	TOS,#0
 829 29d6 11E5     		_NEXT
 830              	
 831              	/************************
 832              		<> ( w w -- f )
 833              		different?
ARM GAS  forth.s 			page 104


 834              	************************/
 835 29d8 C6290000 		_HEADER DIFF,2,"<>"
 835      023C3E00 
 836 29e0 3046     		mov T0,TOS 
 837 29e2 57F8046B 		_POP 
 838 29e6 86EA0006 		eor TOS,T0
 839 29ea B6FA86F0 		clz T0,TOS 
 840 29ee 06FA00F6 		lsl TOS,T0 
 841 29f2 4FEAE676 		asr TOS,#31 
 842 29f6 01E5     		_NEXT 
 843              	
 844              	/************************
 845              	    U<	 ( w w -- t )
 846              	 	Unsigned less?
 847              	*************************/
 848 29f8 DC290000 		_HEADER ULESS,2,"U<"
 848      02553C00 
 849 2a00 57F8045B 		LDR	WP,[DSP],#4
 850 2a04 B542     		CMP	WP,TOS
 851 2a06 34BF     		ITE CC 
 852 2a08 6FF00006 		MVNCC	TOS,#0
 853 2a0c 0026     		MOVCS	TOS,#0
 854 2a0e F5E4     		_NEXT
 855              	
 856              	/**********************
 857              	    <	( w w -- t )
 858              	 	Less?
 859              	**********************/
 860 2a10 FC290000 		_HEADER LESS,1,"<"
 860      013C00BF 
 861 2a18 57F8045B 		LDR	WP,[DSP],#4
 862 2a1c B542     		CMP	WP,TOS
 863 2a1e B4BF     	    ITE LT
 864 2a20 6FF00006 		MVNLT	TOS,#0
 865 2a24 0026     		MOVGE	TOS,#0
 866 2a26 E9E4     		_NEXT 
 867              	
 868              	/**********************
 869              		U> ( u u -- t|f )
 870              	    unsigned greater 
 871              	**********************/
 872 2a28 142A0000 		_HEADER UGREAT,2,"U>"
 872      02553E00 
 873 2a30 57F8045B 		LDR WP,[DSP],#4 
 874 2a34 AE42     		CMP TOS,WP 
 875 2a36 34BF     		ITE CC  
 876 2a38 6FF00006 		MVNCC TOS,#0 
 877 2a3c 0026     		MOVCS TOS,#0
 878 2a3e DDE4     		_NEXT 
 879              	
 880              	/***********************
 881              	    >	( w w -- t )
 882              	 	greater?
 883              	***********************/
 884 2a40 2C2A0000 		_HEADER GREAT,1,">"
 884      013E00BF 
 885 2a48 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 105


 886 2a4c B542     		CMP	WP,TOS
 887 2a4e CCBF     		ITE GT
 888 2a50 6FF00006 	    MVNGT	TOS,#0
 889 2a54 0026     		MOVLE	TOS,#0
 890 2a56 D1E4     		_NEXT
 891              	
 892              	/***************************
 893              	    MAX	 ( w w -- max )
 894              	 	Leave maximum.
 895              	***************************/
 896 2a58 442A0000 		_HEADER MAX,3,"MAX"
 896      034D4158 
 897 2a60 57F8045B 		LDR	WP,[DSP],#4
 898 2a64 B542     		CMP	WP,TOS
 899 2a66 C8BF     		IT GT 
 900 2a68 2E46     		MOVGT	TOS,WP
 901 2a6a C7E4     		_NEXT 
 902              	
 903              	/**************************
 904              	    MIN	 ( w w -- min )
 905              	 	Leave minimum.
 906              	**************************/
 907 2a6c 5C2A0000 		_HEADER MIN,3,"MIN"
 907      034D494E 
 908 2a74 57F8045B 		LDR	WP,[DSP],#4
 909 2a78 B542     		CMP	WP,TOS
 910 2a7a B8BF     		IT LT
 911 2a7c 2E46     		MOVLT	TOS,WP
 912 2a7e BDE4     		_NEXT
 913              	
 914              	/***********************
 915              	    +!	 ( w a -- )
 916              	 	Add to memory.
 917              	***********************/
 918 2a80 702A0000 		_HEADER PSTOR,2,"+!"
 918      022B2100 
 919 2a88 57F8045B 		LDR	WP,[DSP],#4
 920 2a8c 3268     		LDR	T2,[TOS]
 921 2a8e 2A44     		ADD	T2,T2,WP
 922 2a90 3260     		STR	T2,[TOS]
 923 2a92 57F8046B 		_POP
 924 2a96 B1E4     		_NEXT
 925              	
 926              	/************************
 927              	    2!	 ( d a -- )
 928              	 	Store double number.
 929              	*************************/
 930 2a98 842A0000 		_HEADER DSTOR,2,"2!"
 930      02322100 
 931 2aa0 57F8045B 		LDR	WP,[DSP],#4
 932 2aa4 57F8042B 		LDR	T2,[DSP],#4
 933 2aa8 46F8045B 		STR	WP,[TOS],#4
 934 2aac 3260     		STR	T2,[TOS]
 935 2aae 57F8046B 		_POP
 936 2ab2 A3E4     		_NEXT
 937              	
 938              	/************************
ARM GAS  forth.s 			page 106


 939              	    2@	 ( a -- d )
 940              	 	Fetch double number.
 941              	************************/
 942 2ab4 9C2A0000 		_HEADER DAT,2,"D@"
 942      02444000 
 943 2abc 7568     		LDR	WP,[TOS,#4]
 944 2abe 47F8045D 		STR	WP,[DSP,#-4]!
 945 2ac2 3668     		LDR	TOS,[TOS]
 946 2ac4 9AE4     		_NEXT
 947              	
 948              	/***************************
 949              	    COUNT	( b -- b+1 c )
 950              	 	Fetch length of string.
 951              	****************************/
 952 2ac6 B82A0000 		_HEADER COUNT,5,"COUNT"
 952      05434F55 
 952      4E54
 953 2ad0 16F8015B 		LDRB	WP,[TOS],#1
 954 2ad4 47F8046D 		_PUSH
 955 2ad8 2E46     		MOV	TOS,WP
 956 2ada 8FE4     		_NEXT
 957              	
 958              	/******************************
 959              	    DNEGATE	( d -- -d )
 960              	 	Negate double number.
 961              	**************************/
 962 2adc CA2A0000 		_HEADER DNEGA,7,"DNEGATE"
 962      07444E45 
 962      47415445 
 963 2ae8 3D68     		LDR	WP,[DSP]
 964 2aea A2EB0202 		SUB	T2,T2,T2
 965 2aee 551B     		SUBS WP,T2,WP
 966 2af0 62EB0606 		SBC	TOS,T2,TOS
 967 2af4 3D60     		STR	WP,[DSP]
 968 2af6 81E4     		_NEXT
 969              	
 970              	/******************************
 971              	  System and user variables
 972              	******************************/
 973              	
 974              	/*******************************
 975              	  doVAR	( -- a )
 976              	  Run time routine for VARIABLE and CREATE.
 977              	hidden word used by compiler
 978              	********************************/
 979              	DOVAR:
 980 2af8 47F8046D 		_PUSH
 981 2afc 6646     		MOV TOS,IP
 982 2afe 0CF1040C 		ADD IP,IP,#4 
 983 2b02 7EE4     		B UNNEST 
 984              	
 985              	/**********************************
 986              	    doCON	( -- a ) 
 987              	 	Run time routine for CONSTANT.
 988              	hidden word used by compiler 
 989              	***********************************/
 990              	DOCON:
ARM GAS  forth.s 			page 107


 991 2b04 47F8046D 		_PUSH
 992 2b08 5CF8046B 		LDR.W TOS,[IP],#4 
 993 2b0c 79E4     		B UNNEST 
 994              	
 995              	/***********************
 996              	  system variables 
 997              	***********************/
 998              	
 999              	/**************************
 1000              	 SEED ( -- a)
 1001              	 return PRNG seed address 
 1002              	**************************/
 1003 2b0e E02A0000 		_HEADER SEED,4,"SEED"
 1003      04534545 
 1003      4400
 1004 2b18 47F8046D 		_PUSH 
 1005 2b1c 04F10406 		ADD TOS,UP,#RNDSEED
 1006 2b20 6CE4     		_NEXT 	
 1007              	
 1008              	/****************************************
 1009              	  MSEC ( -- a)
 1010              	 return address of milliseconds counter
 1011              	****************************************/
 1012 2b22 122B0000 		_HEADER MSEC,4,"MSEC"
 1012      044D5345 
 1012      4300
 1013 2b2c 47F8046D 	    _PUSH
 1014 2b30 04F10806 	    ADD TOS,UP,#TICKS
 1015 2b34 62E4     	    _NEXT 
 1016              	
 1017              	/*************************
 1018              	 TIMER ( -- a )
 1019              	 count down timer 
 1020              	**********************/
 1021 2b36 262B0000 		_HEADER TIMER,5,"TIMER"
 1021      0554494D 
 1021      4552
 1022 2b40 47F8046D 		 _PUSH 
 1023 2b44 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1024 2b48 58E4     	    _NEXT
 1025              	
 1026              	/*****************************
 1027              	    'BOOT	 ( -- a )
 1028              	 	boot up application vector 
 1029              	*****************************/
 1030 2b4a 3A2B0000 		_HEADER TBOOT,5,"'BOOT"
 1030      0527424F 
 1030      4F54
 1031 2b54 47F8046D 		_PUSH
 1032 2b58 04F11006 		ADD	TOS,UP,#BOOT 
 1033 2b5c 4EE4     		_NEXT
 1034              		
 1035              	/********************************************	
 1036              	    BASE	( -- a )
 1037              	 	Storage of the radix base for numeric I/O.
 1038              	**********************************************/
 1039 2b5e 4E2B0000 		_HEADER BASE,4,"BASE"
ARM GAS  forth.s 			page 108


 1039      04424153 
 1039      4500
 1040 2b68 47F8046D 		_PUSH
 1041 2b6c 04F11C06 		ADD	TOS,UP,#NBASE
 1042 2b70 44E4     		_NEXT
 1043              	
 1044              	/*****************************************************
 1045              	    temp	 ( -- a )
 1046              	 	A temporary storage location used in parse and find.
 1047              	hidden word for internal use
 1048              	********************************************************/
 1049              	TEMP:
 1050 2b72 47F8046D 		_PUSH
 1051 2b76 04F12006 		ADD	TOS,UP,#TMP
 1052 2b7a 3FE4     		_NEXT
 1053              	
 1054              	/*******************************************
 1055              	    SPAN	( -- a )
 1056              	 	Hold character count received by EXPECT.
 1057              	********************************************/
 1058 2b7c 622B0000 		_HEADER SPAN,4,"SPAN"
 1058      04535041 
 1058      4E0000BF 
 1059 2b88 47F8046D 		_PUSH
 1060 2b8c 04F12406 		ADD	TOS,UP,#CSPAN
 1061 2b90 34E4     		_NEXT
 1062              	
 1063              	/***********************************************************
 1064              	    >IN	 ( -- a )
 1065              	 	Hold the character pointer while parsing input stream.
 1066              	***********************************************************/
 1067 2b92 802B0000 		_HEADER INN,3,">IN"
 1067      033E494E 
 1067      00BF
 1068 2b9c 47F8046D 		_PUSH
 1069 2ba0 04F12806 		ADD	TOS,UP,#TOIN
 1070 2ba4 2AE4     		_NEXT
 1071              	
 1072              	/**************************************
 1073              	    #TIB	( -- a )
 1074              	 	Hold the current count and address 
 1075              		of the terminal input buffer.
 1076              	**************************************/
 1077 2ba6 962B0000 		_HEADER NTIB,4,"#TIB"
 1077      04235449 
 1077      4200
 1078 2bb0 47F8046D 		_PUSH
 1079 2bb4 04F12C06 		ADD	TOS,UP,#NTIBB
 1080 2bb8 20E4     		_NEXT
 1081              	
 1082              	/******************************
 1083              	    'EVAL	( -- a )
 1084              	 	Execution vector of EVAL.
 1085              	*******************************/
 1086 2bba AA2B0000 		_HEADER TEVAL,5,"'EVAL"
 1086      05274556 
 1086      414C
ARM GAS  forth.s 			page 109


 1087 2bc4 47F8046D 		_PUSH
 1088 2bc8 04F13406 		ADD	TOS,UP,#EVAL
 1089 2bcc 16E4     		_NEXT
 1090              	
 1091              	/*********************************
 1092              	    HLD	 ( -- a )
 1093              	 	Hold a pointer in building a 
 1094              		numeric output string.
 1095              	*********************************/
 1096 2bce BE2B0000 		_HEADER HLD,3,"HLD"
 1096      03484C44 
 1096      00BF
 1097 2bd8 47F8046D 		_PUSH
 1098 2bdc 04F13806 		ADD	TOS,UP,#VHOLD
 1099 2be0 0CE4     		_NEXT
 1100              	
 1101              	/**********************************
 1102              	    CONTEXT	( -- a )
 1103              	 	A area to specify vocabulary 
 1104              		search order.
 1105              	**********************************/
 1106 2be2 D22B0000 		_HEADER CNTXT,7,"CONTEXT"
 1106      07434F4E 
 1106      54455854 
 1106      00BF
 1107              	CRRNT:
 1108 2bf0 47F8046D 		_PUSH
 1109 2bf4 04F13C06 		ADD	TOS,UP,#CTXT
 1110 2bf8 00E4     		_NEXT
 1111              	
 1112              	/******************************
 1113              	    CP	( -- a )
 1114              	 	Point to top name in RAM 
 1115              		vocabulary.
 1116              	******************************/
 1117 2bfa E62B0000 		_HEADER CPP,2,"CP"
 1117      02435000 
 1117      00BF
 1118 2c04 47F8046D 		_PUSH
 1119 2c08 04F14406 		ADD	TOS,UP,#USER_CTOP
 1120 2c0c FFF7F6BB 		_NEXT
 1121              	
 1122              	/****************************
 1123              	   FCP ( -- a )
 1124              	  Point ot top of Forth 
 1125              	  system dictionary
 1126              	****************************/
 1127 2c10 FE2B0000 		_HEADER FCP,3,"FCP"
 1127      03464350 
 1128 2c18 47F8046D 		_PUSH 
 1129 2c1c 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1130 2c20 FFF7ECBB 		_NEXT 
 1131              	
 1132              	/***************************
 1133              	    LAST	( -- a )
 1134              	 	Point to the last name 
 1135              		in the name dictionary.
ARM GAS  forth.s 			page 110


 1136              	***************************/
 1137 2c24 142C0000 		_HEADER LAST,4,"LAST"
 1137      044C4153 
 1137      540000BF 
 1138 2c30 47F8046D 		_PUSH
 1139 2c34 04F14806 		ADD	TOS,UP,#LASTN
 1140 2c38 FFF7E0BB 		_NEXT
 1141              	
 1142              	
 1143              	/***********************
 1144              		system constants 
 1145              	***********************/
 1146              	
 1147              	/********************************
 1148              		USER-BEGIN ( -- a )
 1149              	  where user area begin in RAM
 1150              	********************************/
 1151 2c3c 282C0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1151      0A555345 
 1151      522D4245 
 1151      47494E00 
 1152 2c4c 47F8046D 		_PUSH 
 1153 2c50 DFF80460 		ldr TOS,USR_BGN_ADR 
 1154 2c54 FFF7D2BB 		_NEXT 
 1155              	USR_BGN_ADR:
 1156 2c58 12050020 	.word  DTOP 
 1157              	
 1158              	/*********************************
 1159              	  USER_END ( -- a )
 1160              	  where user area end in RAM 
 1161              	******************************/
 1162 2c5c 402C0000 		_HEADER USER_END,8,"USER-END"
 1162      08555345 
 1162      522D454E 
 1162      440000BF 
 1163 2c6c 47F8046D 		_PUSH 
 1164 2c70 DFF80460 		ldr TOS,USER_END_ADR 
 1165 2c74 FFF7C2BB 		_NEXT 
 1166              	USER_END_ADR:
 1167 2c78 FC800120 		.word DEND 
 1168              	
 1169              	
 1170              	/* *********************
 1171              	  Common functions
 1172              	***********************/
 1173              	
 1174              	/********************************
 1175              	    WITHIN	( u ul uh -- t )
 1176              	 	Return true if u is within 
 1177              		the range of ul and uh.
 1178              	********************************/
 1179 2c7c 602C0000 		_HEADER WITHI,6,"WITHIN"
 1179      06574954 
 1179      48494E00 
 1180 2c88 504700BF 		_NEST
 1181 2c8c D1260000 		_ADR	OVER
 1182 2c90 81270000 		_ADR	SUBB
ARM GAS  forth.s 			page 111


 1183 2c94 55260000 		_ADR	TOR
 1184 2c98 81270000 		_ADR	SUBB
 1185 2c9c 2D260000 		_ADR	RFROM
 1186 2ca0 012A0000 		_ADR	ULESS
 1187 2ca4 03240000 		_UNNEST
 1188              	
 1189              	//  Divide
 1190              	
 1191              	/*************************************
 1192              	    UM/MOD	( udl udh u -- ur uq )
 1193              	 	Unsigned divide of a double by a 
 1194              		single. Return mod and quotient.
 1195              	**************************************/
 1196 2ca8 802C0000 		_HEADER UMMOD,6,"UM/MOD"
 1196      06554D2F 
 1196      4D4F4400 
 1197 2cb4 4FF00103 		MOV	T3,#1
 1198 2cb8 57F8045B 		LDR	WP,[DSP],#4
 1199 2cbc 3A68     		LDR	T2,[DSP]
 1200              	UMMOD0:
 1201 2cbe 9218     		ADDS	T2,T2,T2
 1202 2cc0 6D41     		ADCS	WP,WP,WP
 1203 2cc2 04D3     		BCC	UMMOD1
 1204 2cc4 A5EB0605 		SUB	WP,WP,TOS
 1205 2cc8 02F10102 		ADD	T2,T2,#1
 1206 2ccc 04E0     		B UMMOD2
 1207              	UMMOD1:
 1208 2cce AD1B     		SUBS	WP,WP,TOS 
 1209 2cd0 28BF     		IT CS 
 1210 2cd2 0132     		ADDCS	T2,T2,#1
 1211 2cd4 00D2     		BCS	UMMOD2
 1212 2cd6 3544     		ADD	WP,WP,TOS
 1213              	UMMOD2:
 1214 2cd8 DB18     		ADDS	T3,T3,T3
 1215 2cda F0D3     		BCC	UMMOD0
 1216 2cdc 1646     		MOV	TOS,T2
 1217 2cde 3D60     		STR	WP,[DSP]
 1218 2ce0 FFF78CBB 		_NEXT
 1219              	
 1220              	/****************************
 1221              	    M/MOD	( d n -- r q )
 1222              	 	Signed floored divide 
 1223              		of double by single. 
 1224              		Return mod and quotient.
 1225              	****************************/
 1226 2ce4 AC2C0000 		_HEADER MSMOD,5,"M/MOD"
 1226      054D2F4D 
 1226      4F4400BF 
 1227 2cf0 504700BF 		_NEST
 1228 2cf4 AD260000 		_ADR	DUPP
 1229 2cf8 E1260000 		_ADR	ZLESS
 1230 2cfc AD260000 		_ADR	DUPP
 1231 2d00 55260000 		_ADR	TOR
 1232 2d04 BB250000 		_QBRAN MMOD1
 1232      1C2D0000 
 1233 2d0c 91290000 		_ADR	NEGAT
 1234 2d10 55260000 		_ADR	TOR
ARM GAS  forth.s 			page 112


 1235 2d14 E92A0000 		_ADR	DNEGA
 1236 2d18 2D260000 		_ADR	RFROM
 1237              	MMOD1:
 1238 2d1c 55260000 		_ADR	TOR
 1239 2d20 AD260000 		_ADR	DUPP
 1240 2d24 E1260000 		_ADR	ZLESS
 1241 2d28 BB250000 		_QBRAN MMOD2
 1241      382D0000 
 1242 2d30 41260000 		_ADR	RAT
 1243 2d34 71270000 		_ADR	PLUS
 1244              	MMOD2:
 1245 2d38 2D260000 		_ADR	RFROM
 1246 2d3c B52C0000 		_ADR	UMMOD
 1247 2d40 2D260000 		_ADR	RFROM
 1248 2d44 BB250000 		_QBRAN	MMOD3
 1248      582D0000 
 1249 2d4c BD260000 		_ADR	SWAP
 1250 2d50 91290000 		_ADR	NEGAT
 1251 2d54 BD260000 		_ADR	SWAP
 1252              	MMOD3:   
 1253 2d58 03240000 		_UNNEST
 1254              	
 1255              	/****************************
 1256              		S>D ( n -- d )
 1257              		convert single to double 
 1258              	*****************************/
 1259 2d5c E82C0000 		_HEADER STOD,3,"S>D"
 1259      03533E44 
 1260 2d64 47F8046D 		_PUSH 
 1261 2d68 4FEAE676 		ASR TOS,#31
 1262 2d6c FFF746BB 		_NEXT 
 1263              	
 1264              	/****************************
 1265              		D2* ( d -- d<<1 )
 1266              		double * 2 
 1267              	***************************/
 1268 2d70 602D0000 		_HEADER D2STAR,3,"D2*"
 1268      0344322A 
 1269 2d78 3868     		ldr T0,[DSP]
 1270 2d7a 4000     		lsls T0,#1
 1271 2d7c 3860     		str T0,[DSP]
 1272 2d7e 4FEA4606 		lsl TOS,#1
 1273 2d82 46F10006 		adc TOS,#0
 1274 2d86 FFF739BB 		_NEXT 
 1275              	
 1276              	/****************************
 1277              		D2/  ( d -- d>>1 )
 1278              		double signed divide by 2 
 1279              	*****************************/
 1280 2d8a 742D0000 		_HEADER D2SL,3,"D2/"
 1280      0344322F 
 1280      00BF
 1281 2d94 3868     		ldr T0,[DSP]
 1282 2d96 7610     		asrs TOS,#1
 1283 2d98 4FEA3000 		rrx T0,T0 
 1284 2d9c 3860     		str T0,[DSP]
 1285 2d9e FFF72DBB 		_NEXT 
ARM GAS  forth.s 			page 113


 1286              	
 1287              	/***************************
 1288              		D/MOD  ( d+ n+ - r+ qd+ )
 1289              		unsigned double division
 1290              		and modulo 
 1291              		output:
 1292              			qd+ = d+ / n+
 1293              			r+ = qd+ - (d+ * n+ )
 1294              	***************************/
 1295 2da2 8E2D0000 		_HEADER DSLMOD,5,"D/MOD"
 1295      05442F4D 
 1295      4F44
 1296 2dac 3D68     		ldr WP,[DSP]  // d+ high 
 1297 2dae 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1298 2db0 4FF02002 		mov T2,#32 // shift counter  
 1299 2db4 81EA0101 		eor T1,T1 // quotient T0:T1  
 1300 2db8 25B9     		cbnz WP,1f    
 1301 2dba 82EA0202 		eor T2,T2 // nos shifting required 
 1302 2dbe 0546     		mov WP,T0 
 1303 2dc0 80EA0000 		eor T0,T0 
 1304 2dc4 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1305 2dc6 15F0004F 	    tst WP,#(1<<31) 
 1306 2dca 06D1     		bne 2f
 1307 2dcc 4918     		adds T1,T1,T1 
 1308 2dce 4041     		adcs T0,T0,T0 
 1309 2dd0 45EB0505 		adc WP,WP,WP 
 1310 2dd4 A2F10102 		sub T2,#1 
 1311 2dd8 F4E7     		b 1b 
 1312 2dda B5FBF6F3 	2:  udiv T3,WP,TOS
 1313 2dde 41EA0301 		orr T1,T3   // append partial quotient 
 1314 2de2 06FB03F3 		mul T3,TOS
 1315 2de6 A5EB0305 		sub WP,T3 //remainder 
 1316 2dea 02B1     		cbz T2,8f 
 1317 2dec EAE7     		b 1b 
 1318 2dee 7D60     	8:	str WP,[DSP,#4] // remainder 
 1319 2df0 3960     		str T1,[DSP]  // q lo 
 1320 2df2 0646     		mov TOS,T0  // q hi 		
 1321 2df4 FFF702BB 		_NEXT 
 1322              	
 1323              	
 1324              	/****************************
 1325              		D/  ( ud u -- udq )
 1326              		divide unsigned double 
 1327              		by unsigned single 
 1328              		return double quotient
 1329              		rounded to nearest integer 
 1330              	****************************/
 1331 2df8 A62D0000 		_HEADER DSLASH,2,"D/"
 1331      02442F00 
 1332 2e00 504700BF 		_NEST 
 1333 2e04 AD260000 		_ADR DUPP 
 1334 2e08 7B250000 		_DOLIT 1 
 1334      01000000 
 1335 2e10 49270000 		_ADR RSHIFT 
 1336 2e14 55260000 		_ADR TOR 
 1337 2e18 AD2D0000 		_ADR DSLMOD 
 1338 2e1c 95280000 		_ADR ROT 
ARM GAS  forth.s 			page 114


 1339 2e20 2D260000 		_ADR RFROM 
 1340 2e24 492A0000 		_ADR GREAT 
 1341 2e28 BB250000 		_QBRAN 9f
 1341      402E0000 
 1342 2e30 7B250000 		_DOLIT 1 
 1342      01000000 
 1343 2e38 652D0000 		_ADR STOD 
 1344 2e3c F9280000 		_ADR DPLUS 
 1345 2e40 03240000 	9:	_UNNEST 
 1346              	
 1347              	
 1348              	/****************************
 1349              		D* ( d s -- d )
 1350              	    multiply a double 
 1351              		by a single 
 1352              	****************************/
 1353 2e44 FC2D0000 		_HEADER DSTAR,2,"D*"
 1353      02442A00 
 1354              	/*
 1355              		_NEST 
 1356              		_ADR NROT 
 1357              		_ADR DUPP 
 1358              		_ADR TOR 
 1359              		_ADR DABS
 1360              		_ADR SWAP  
 1361              		_ADR ROT   
 1362              		_ADR DUPP
 1363              		_ADR TOR
 1364              		_ADR MSTAR
 1365              		_ADR ROT
 1366              		_ADR RFROM 
 1367              		_ADR STAR 
 1368              		_ADR PLUS
 1369              		_ADR RFROM 
 1370              		_ADR ZLESS 
 1371              		_QBRAN 9f
 1372              		_ADR DNEGA   
 1373              	9:	_UNNEST 
 1374              	*/
 1375 2e4c 57F8040B 		ldr T0,[DSP],#4
 1376 2e50 3968     		ldr T1,[DSP]
 1377 2e52 3860     		str T0,[DSP] 
 1378 2e54 83EA0303 		eor T3,T3 
 1379 2e58 10F0004F 		tst T0,#(1<<31)
 1380 2e5c 02D0     		beq 1f 
 1381              		// DNEGATE 
 1382 2e5e 591A     		subs T1,T3,T1  
 1383 2e60 63EB0000 		sbc T0,T3,T0 
 1384 2e64 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1385 2e68 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1386 2e6c 0E44     		add TOS,T1  // TOS:T2 product  
 1387 2e6e 3868     		ldr r0,[DSP]
 1388 2e70 10F0004F 		tst T0,#(1<<31)
 1389 2e74 02D0     		beq 2f 
 1390              		// DNEGATE product 
 1391 2e76 9A1A     		subs T2,T3,T2  
 1392 2e78 63EB0606 		sbc TOS,T3,TOS 
ARM GAS  forth.s 			page 115


 1393 2e7c 3A60     	2:  str T2,[DSP]
 1394 2e7e FFF7BDBA 		_NEXT 
 1395              	
 1396              	
 1397              	/****************************
 1398              	   /MOD	( n n -- r q )
 1399              		Signed divide. Return
 1400              		mod and quotient.
 1401              	****************************/
 1402 2e82 482E0000 		_HEADER SLMOD,4,"/MOD"
 1402      042F4D4F 
 1402      4400
 1403 2e8c 504700BF 		_NEST
 1404 2e90 D1260000 		_ADR	OVER
 1405 2e94 E1260000 		_ADR	ZLESS
 1406 2e98 BD260000 		_ADR	SWAP
 1407 2e9c F12C0000 		_ADR	MSMOD
 1408 2ea0 03240000 		_UNNEST
 1409              	
 1410              	/**************************
 1411              	    MOD	 ( n n -- r )
 1412              	 	Signed divide. Return
 1413              		mod only.
 1414              	**************************/
 1415 2ea4 862E0000 		_HEADER MODD,3,"MOD"
 1415      034D4F44 
 1416 2eac 504700BF 		_NEST
 1417 2eb0 8D2E0000 		_ADR	SLMOD
 1418 2eb4 9D260000 		_ADR	DROP
 1419 2eb8 03240000 		_UNNEST
 1420              	
 1421              	/*************************
 1422              	    /	   ( n n -- q )
 1423              	 	Signed divide. Return
 1424              		quotient only.
 1425              	**************************/
 1426 2ebc A82E0000 		_HEADER SLASH,1,"/"
 1426      012F00BF 
 1427 2ec4 504700BF 		_NEST
 1428 2ec8 8D2E0000 		_ADR	SLMOD
 1429 2ecc BD260000 		_ADR	SWAP
 1430 2ed0 9D260000 		_ADR	DROP
 1431 2ed4 03240000 		_UNNEST
 1432              	
 1433              	//******************************
 1434              	//  */MOD	( n1 n2 n3 -- r q )
 1435              	/* 	Multiply n1 and n2, then 
 1436              		divide by n3. Return 
 1437              		mod and quotient.
 1438              	******************************/
 1439 2ed8 C02E0000 		_HEADER SSMOD,5,"*/MOD"
 1439      052A2F4D 
 1439      4F4400BF 
 1440 2ee4 504700BF 		_NEST
 1441 2ee8 55260000 		_ADR	TOR
 1442 2eec B9270000 		_ADR	MSTAR
 1443 2ef0 2D260000 		_ADR	RFROM
ARM GAS  forth.s 			page 116


 1444 2ef4 F12C0000 		_ADR	MSMOD
 1445 2ef8 03240000 		_UNNEST
 1446              	
 1447              	//*******************************
 1448              	//  */ ( n1 n2 n3 -- q )
 1449              	/* 	Multiply n1 by n2, then 
 1450              		divide by n3. Return quotient
 1451              		only.
 1452              	*******************************/
 1453 2efc DC2E0000 		_HEADER STASL,2,"*/"
 1453      022A2F00 
 1454 2f04 504700BF 		_NEST
 1455 2f08 E52E0000 		_ADR	SSMOD
 1456 2f0c BD260000 		_ADR	SWAP
 1457 2f10 9D260000 		_ADR	DROP
 1458 2f14 03240000 		_UNNEST
 1459              	
 1460              	/*******************
 1461              	  Miscellaneous
 1462              	*******************/
 1463              	
 1464              	/*************************
 1465              	    ALIGNED	( b -- a )
 1466              	 	Align address to the 
 1467              		cell boundary.
 1468              	**************************/
 1469 2f18 002F0000 		_HEADER ALGND,7,"ALIGNED"
 1469      07414C49 
 1469      474E4544 
 1470 2f24 06F10306 		ADD	TOS,TOS,#3
 1471 2f28 6FF00305 		MVN	WP,#3
 1472 2f2c 06EA0506 		AND	TOS,TOS,WP
 1473 2f30 FFF764BA 		_NEXT
 1474              	
 1475              	/****************************
 1476              	    >CHAR	( c -- c )
 1477              	 	Filter non-printing 
 1478              		characters.
 1479              	****************************/
 1480 2f34 1C2F0000 		_HEADER TCHAR,5,">CHAR"
 1480      053E4348 
 1480      415200BF 
 1481 2f40 504700BF 		_NEST
 1482 2f44 7B250000 		_DOLIT  0x7F
 1482      7F000000 
 1483 2f4c F1260000 		_ADR	ANDD
 1484 2f50 AD260000 		_ADR	DUPP	// mask msb
 1485 2f54 2D280000 		_ADR	BLANK
 1486 2f58 7B250000 		_DOLIT 	127
 1486      7F000000 
 1487 2f60 892C0000 		_ADR	WITHI	// check for printable
 1488 2f64 7D290000 		_ADR	INVER
 1489 2f68 BB250000 		_QBRAN	TCHA1
 1489      7C2F0000 
 1490 2f70 9D260000 		_ADR	DROP
 1491 2f74 7B250000 		_DOLIT 	'_'	// replace non-printables
 1491      5F000000 
ARM GAS  forth.s 			page 117


 1492              	TCHA1:
 1493 2f7c 03240000 		  _UNNEST
 1494              	
 1495              	/************************
 1496              	    DEPTH	( -- n )
 1497              	 	Return the depth of
 1498              		the data stack.
 1499              	***********************/
 1500 2f80 382F0000 		_HEADER DEPTH,5,"DEPTH"
 1500      05444550 
 1500      544800BF 
 1501 2f8c 4FF47F42 		_MOV32 T2,SPP 
 1501      C2F20102 
 1502 2f94 A2EB0702 		SUB	T2,T2,DSP
 1503 2f98 47F8046D 		_PUSH
 1504 2f9c 4FEAA206 		ASR	TOS,T2,#2
 1505 2fa0 FFF72CBA 		_NEXT
 1506              	
 1507              	/*****************************
 1508              	    PICK	( ... +n -- ... w )
 1509              	 	Copy the nth stack item 
 1510              		to tos.
 1511              	******************************/
 1512 2fa4 842F0000 		_HEADER PICK,4,"PICK"
 1512      04504943 
 1512      4B0000BF 
 1513 2fb0 504700BF 		_NEST
 1514 2fb4 CD270000 		_ADR	ONEP
 1515 2fb8 41280000 		_ADR	CELLS
 1516 2fbc 89260000 		_ADR	SPAT
 1517 2fc0 71270000 		_ADR	PLUS
 1518 2fc4 01260000 		_ADR	AT
 1519 2fc8 03240000 		_UNNEST
 1520              	
 1521              	/*********************
 1522              	  Memory access
 1523              	*********************/
 1524              	
 1525              	/*************************
 1526              	    HERE	( -- a )
 1527              	 	Return the top of
 1528              		the code dictionary.
 1529              	*************************/
 1530 2fcc A82F0000 		_HEADER HERE,4,"HERE"
 1530      04484552 
 1530      450000BF 
 1531 2fd8 504700BF 		_NEST
 1532 2fdc 052C0000 		_ADR	CPP
 1533 2fe0 01260000 		_ADR	AT
 1534 2fe4 03240000 		_UNNEST
 1535              	
 1536              	/***************************	
 1537              	    PAD	 ( -- a )
 1538              	 	Return the address of 
 1539              		a temporary buffer.
 1540              	***************************/
 1541 2fe8 D02F0000 		_HEADER PAD,3,"PAD"
ARM GAS  forth.s 			page 118


 1541      03504144 
 1542 2ff0 504700BF 		_NEST
 1543 2ff4 D92F0000 		_ADR	HERE
 1544 2ff8 7B250000 		_DOLIT 80
 1544      50000000 
 1545 3000 71270000 		_ADR PLUS 
 1546 3004 03240000 		_UNNEST
 1547              	
 1548              	/***********************
 1549              	    TIB	 ( -- a )
 1550              	 	Return the address 
 1551              		of the terminal 
 1552              		input buffer.
 1553              	************************/
 1554 3008 EC2F0000 		_HEADER TIB,3,"TIB"
 1554      03544942 
 1555 3010 47F8046D 		_PUSH
 1556 3014 266B     		ldr TOS,[UP,#TIBUF]
 1557 3016 FFF7F1B9 		_NEXT
 1558              	
 1559              	/*************************
 1560              	    @EXECUTE	( a -- )
 1561              	 	Execute vector stored
 1562              		in address a.
 1563              	*************************/
 1564 301a 0C300000 		_HEADER ATEXE,8,"@EXECUTE"
 1564      08404558 
 1564      45435554 
 1564      4500
 1565 3028 3500     		MOVS	WP,TOS
 1566 302a 57F8046B 		_POP
 1567 302e 2D68     		LDR	WP,[WP]
 1568 3030 45F00105 		ORR	WP,WP,#1
 1569 3034 18BF     	    IT NE 
 1570 3036 2847     		BXNE	WP
 1571 3038 FFF7E0B9 		_NEXT
 1572              	
 1573              	/*******************************
 1574              	    CMOVE	( b1 b2 u -- )
 1575              	 	Copy u bytes from b1 to b2.
 1576              	********************************/
 1577 303c 1E300000 		_HEADER CMOVE,5,"CMOVE"
 1577      05434D4F 
 1577      564500BF 
 1578 3048 57F8042B 		LDR	T2,[DSP],#4
 1579 304c 57F8043B 		LDR	T3,[DSP],#4
 1580 3050 03E0     		B CMOV1
 1581              	CMOV0:
 1582 3052 13F8015B 		LDRB	WP,[T3],#1
 1583 3056 02F8015B 		STRB	WP,[T2],#1
 1584              	CMOV1:
 1585 305a 3600     		MOVS	TOS,TOS
 1586 305c 02D0     		BEQ	CMOV2
 1587 305e A6F10106 		SUB	TOS,TOS,#1
 1588 3062 F6E7     		B CMOV0
 1589              	CMOV2:
 1590 3064 57F8046B 		_POP
ARM GAS  forth.s 			page 119


 1591 3068 FFF7C8B9 		_NEXT
 1592              	
 1593              	/***************************
 1594              	    MOVE	( a1 a2 u -- )
 1595              	 	Copy u words from a1 to a2.
 1596              	*******************************/
 1597 306c 40300000 		_HEADER MOVE,4,"MOVE"
 1597      044D4F56 
 1597      450000BF 
 1598 3078 4FF00400 		MOV T0,#4 
 1599 307c 06F10306 		ADD TOS,#3 
 1600 3080 26F00306 		BIC TOS,#3
 1601 3084 57F8041B 		LDR	T1,[DSP],#4 // dest
 1602 3088 57F8042B 		LDR	T2,[DSP],#4 // src 
 1603 308c 8A42     		CMP T2,T1 
 1604 308e 08D5     		BPL MOVE1
 1605 3090 6FF00300 		MOV T0,#-4 
 1606 3094 3144     		ADD T1,TOS
 1607 3096 3244     		ADD T2,TOS 
 1608 3098 01E0     		B MOVE3
 1609              	MOVE0:
 1610 309a 1568     		LDR	WP,[T2]
 1611 309c 0D60     		STR	WP,[T1]
 1612              	MOVE3: 
 1613 309e 0144     		ADD T1,T0 
 1614 30a0 0244     		ADD T2,T0 
 1615              	MOVE1:
 1616 30a2 3600     		MOVS TOS,TOS
 1617 30a4 02D0     		BEQ	MOVE2
 1618 30a6 A6F10406 		SUB	TOS,TOS,#4
 1619 30aa F6E7     		B MOVE0
 1620              	MOVE2:
 1621 30ac 57F8046B 		_POP
 1622 30b0 FFF7A4B9 		_NEXT
 1623              	
 1624              	/**************************
 1625              	    FILL	( b u c -- )
 1626              	 	Fill u bytes of character
 1627              		c to area beginning at b.
 1628              	******************************/
 1629 30b4 70300000 		_HEADER FILL,4,"FILL"
 1629      0446494C 
 1629      4C0000BF 
 1630 30c0 03CF     		LDMFD DSP!,{T0,T1} 
 1631 30c2 0000     		MOVS T0,T0 
 1632 30c4 03D0     		BEQ FILL2
 1633              	FILL1:
 1634 30c6 01F8016B 		STRB	TOS,[T1],#1
 1635 30ca 0138     		SUBS	T0,T0,#1
 1636 30cc FBD1     		BNE FILL1
 1637              	FILL2:
 1638 30ce 57F8046B 		_POP
 1639 30d2 FFF793B9 		_NEXT
 1640              	
 1641              	/*****************************
 1642              	    PACK$	( b u a -- a )
 1643              	 	Build a counted word with
ARM GAS  forth.s 			page 120


 1644              		u characters from b. 
 1645              		Null fill.
 1646              	*****************************/
 1647 30d6 B8300000 		_HEADER PACKS,5,"PACK$"
 1647      05504143 
 1647      4B24
 1648 30e0 504700BF 		_NEST
 1649 30e4 252F0000 		_ADR	ALGND
 1650 30e8 AD260000 		_ADR	DUPP
 1651 30ec 55260000 		_ADR	TOR		// strings only on cell boundary
 1652 30f0 D1260000 		_ADR	OVER
 1653 30f4 71270000 		_ADR	PLUS
 1654 30f8 CD270000 		_ADR	ONEP 
 1655 30fc 7B250000 		_DOLIT 	0xFFFFFFFC
 1655      FCFFFFFF 
 1656 3104 F1260000 		_ADR	ANDD			// count mod cell
 1657 3108 7B250000 		_DOLIT 	0
 1657      00000000 
 1658 3110 BD260000 		_ADR	SWAP
 1659 3114 ED250000 		_ADR	STORE			// null fill cell
 1660 3118 41260000 		_ADR	RAT
 1661 311c E5280000 		_ADR	DDUP
 1662 3120 0D260000 		_ADR	CSTOR
 1663 3124 CD270000 		_ADR	ONEP			// save count
 1664 3128 BD260000 		_ADR	SWAP
 1665 312c 49300000 		_ADR	CMOVE
 1666 3130 2D260000 		_ADR	RFROM
 1667 3134 03240000 		_UNNEST   			// move string
 1668              	
 1669              	/***********************************
 1670              	  Numeric output, single precision
 1671              	***********************************/
 1672              	
 1673              	/**************************
 1674              	    DIGIT	( u -- c )
 1675              	 	Convert digit u to 
 1676              		a character.
 1677              	***************************/
 1678 3138 DA300000 		_HEADER DIGIT,5,"DIGIT"
 1678      05444947 
 1678      495400BF 
 1679 3144 504700BF 		_NEST
 1680 3148 7B250000 		_DOLIT 9
 1680      09000000 
 1681 3150 D1260000 		_ADR	OVER
 1682 3154 192A0000 		_ADR	LESS
 1683 3158 7B250000 		_DOLIT	7
 1683      07000000 
 1684 3160 F1260000 		_ADR	ANDD
 1685 3164 71270000 		_ADR	PLUS
 1686 3168 7B250000 		_DOLIT	'0'
 1686      30000000 
 1687 3170 71270000 		_ADR	PLUS 
 1688 3174 03240000 		_UNNEST
 1689              	
 1690              	/*********************************
 1691              	    EXTRACT	( ud base -- ud c )
ARM GAS  forth.s 			page 121


 1692              	 	Extract the least significant
 1693              		digit from positive double.
 1694              	**********************************/
 1695 3178 3C310000 		_HEADER EXTRC,7,"EXTRACT"
 1695      07455854 
 1695      52414354 
 1696 3184 504700BF 		_NEST
 1697 3188 AD2D0000 		_ADR	DSLMOD
 1698 318c 95280000 		_ADR	ROT
 1699 3190 45310000 		_ADR	DIGIT
 1700 3194 03240000 		_UNNEST
 1701              	
 1702              	/***************************
 1703              	    <#	  ( -- )
 1704              	 	Initiate the numeric
 1705              		output process.
 1706              	****************************/
 1707 3198 7C310000 		_HEADER BDIGS,2,"<#"
 1707      023C2300 
 1708 31a0 504700BF 		_NEST
 1709 31a4 F12F0000 		_ADR	PAD
 1710 31a8 D92B0000 		_ADR	HLD
 1711 31ac ED250000 		_ADR	STORE
 1712 31b0 03240000 		_UNNEST
 1713              	
 1714              	/*********************************
 1715              	    HOLD	( c -- )
 1716              	 	Insert a character into the 
 1717              		numeric output string.
 1718              	**********************************/
 1719 31b4 9C310000 		_HEADER HOLD,4,"HOLD"
 1719      04484F4C 
 1719      440000BF 
 1720 31c0 504700BF 		_NEST
 1721 31c4 D92B0000 		_ADR	HLD
 1722 31c8 01260000 		_ADR	AT
 1723 31cc DD270000 		_ADR	ONEM
 1724 31d0 AD260000 		_ADR	DUPP
 1725 31d4 D92B0000 		_ADR	HLD
 1726 31d8 ED250000 		_ADR	STORE
 1727 31dc 0D260000 		_ADR	CSTOR
 1728 31e0 03240000 		_UNNEST
 1729              	
 1730              	/***********************
 1731              	    #	   ( ud -- ud )
 1732              	 	Extract one digit 
 1733              		from ud and append 
 1734              		the digit to output 
 1735              		string.
 1736              	*************************/
 1737 31e4 B8310000 		_HEADER DIG,1,"#"
 1737      012300BF 
 1738 31ec 504700BF 		_NEST
 1739 31f0 692B0000 		_ADR	BASE
 1740 31f4 01260000 		_ADR	AT
 1741 31f8 85310000 		_ADR	EXTRC
 1742 31fc C1310000 		_ADR	HOLD
ARM GAS  forth.s 			page 122


 1743 3200 03240000 		_UNNEST
 1744              	
 1745              	/***************************
 1746              	    #S	  ( ud -- 0 )
 1747              	 	Convert ud until all 
 1748              		digits are added to 
 1749              		the output string.
 1750              	***************************/
 1751 3204 E8310000 		_HEADER DIGS,2,"#S"
 1751      02235300 
 1752 320c 504700BF 		_NEST
 1753              	DIGS1:
 1754 3210 ED310000 	    _ADR	DIG
 1755 3214 E5280000 		_ADR	DDUP
 1756 3218 05270000 		_ADR    ORR 
 1757 321c BB250000 		_QBRAN 	DIGS2
 1757      2C320000 
 1758 3224 CF250000 		_BRAN	DIGS1
 1758      10320000 
 1759              	DIGS2:
 1760 322c 9D260000 		 _ADR DROP 
 1761 3230 03240000 		 _UNNEST
 1762              	
 1763              	/*********************
 1764              	    SIGN	( n -- )
 1765              	 	Add a minus sign
 1766              		to the numeric
 1767              		output string.
 1768              	*********************/
 1769 3234 08320000 		_HEADER SIGN,4,"SIGN"
 1769      04534947 
 1769      4E0000BF 
 1770 3240 504700BF 		_NEST
 1771 3244 E1260000 		_ADR	ZLESS
 1772 3248 BB250000 		_QBRAN	SIGN1
 1772      5C320000 
 1773 3250 7B250000 		_DOLIT '-'
 1773      2D000000 
 1774 3258 C1310000 		_ADR	HOLD
 1775              	SIGN1:
 1776 325c 03240000 		  _UNNEST
 1777              	
 1778              	/*************************
 1779              	    #>  ( w -- b u )
 1780              	 	Prepare the output 
 1781              		word to be TYPE'd.
 1782              	************************/
 1783 3260 38320000 		_HEADER EDIGS,2,"#>"
 1783      02233E00 
 1784 3268 504700BF 		_NEST
 1785 326c 9D260000 		_ADR	DROP
 1786 3270 D92B0000 		_ADR	HLD
 1787 3274 01260000 		_ADR	AT
 1788 3278 F12F0000 		_ADR	PAD
 1789 327c D1260000 		_ADR	OVER
 1790 3280 81270000 		_ADR	SUBB
 1791 3284 03240000 		_UNNEST
ARM GAS  forth.s 			page 123


 1792              	
 1793              	/**************************
 1794              	    str	 ( n -- b u )
 1795              	 	Convert a signed 
 1796              		integer to a numeric 
 1797              		string.
 1798              	hidden word used by compiler
 1799              	***************************/
 1800              	STRR:
 1801 3288 504700BF 		_NEST
 1802 328c 652D0000 		_ADR 	STOD 
 1803 3290 AD260000 		_ADR	DUPP
 1804 3294 55260000 		_ADR	TOR
 1805 3298 19290000 		_ADR	DABS
 1806 329c A1310000 		_ADR	BDIGS
 1807 32a0 0D320000 		_ADR	DIGS
 1808 32a4 2D260000 		_ADR	RFROM
 1809 32a8 41320000 		_ADR	SIGN
 1810 32ac 69320000 		_ADR	EDIGS
 1811 32b0 03240000 		_UNNEST
 1812              	
 1813              	/*************************
 1814              	    HEX	 ( -- )
 1815              	 	Use radix 16 as 
 1816              		base for numeric 
 1817              		conversions.
 1818              	*************************/
 1819 32b4 64320000 		_HEADER HEX,3,"HEX"
 1819      03484558 
 1820 32bc 504700BF 		_NEST
 1821 32c0 7B250000 		_DOLIT 16
 1821      10000000 
 1822 32c8 692B0000 		_ADR	BASE
 1823 32cc ED250000 		_ADR	STORE
 1824 32d0 03240000 		_UNNEST
 1825              	
 1826              	/**************************
 1827              		BIN ( -- )
 1828              		Use radix 2 as 
 1829              		base for numeric 
 1830              		conversion 
 1831              	**************************/
 1832 32d4 B8320000 		_HEADER BIN,3,"BIN"
 1832      0342494E 
 1833 32dc 504700BF 		_NEST 
 1834 32e0 7B250000 		_DOLIT 2 
 1834      02000000 
 1835 32e8 692B0000 		_ADR BASE 
 1836 32ec ED250000 		_ADR STORE
 1837 32f0 03240000 		_UNNEST 
 1838              	
 1839              	/************************
 1840              	    DECIMAL	( -- )
 1841              	 	Use radix 10 as base
 1842              		for numeric conversions.
 1843              	*************************/
 1844 32f4 D8320000 		_HEADER DECIM,7,"DECIMAL"
ARM GAS  forth.s 			page 124


 1844      07444543 
 1844      494D414C 
 1845 3300 504700BF 		_NEST
 1846 3304 7B250000 		_DOLIT 10
 1846      0A000000 
 1847 330c 692B0000 		_ADR	BASE
 1848 3310 ED250000 		_ADR	STORE
 1849 3314 03240000 		_UNNEST
 1850              	
 1851              	/************************************
 1852              	  Numeric input, single precision
 1853              	***********************************/
 1854              	
 1855              	/***********************************
 1856              	    DIGIT?	( c base -- u t )
 1857              	 	Convert a character to its 
 1858              		numeric value. A flag 
 1859              		indicates success.
 1860              	**********************************/
 1861 3318 F8320000 		_HEADER DIGTQ,6,"DIGIT?"
 1861      06444947 
 1861      49543F00 
 1862 3324 504700BF 		_NEST
 1863 3328 55260000 		_ADR	TOR
 1864 332c 7B250000 		_DOLIT 	'0'
 1864      30000000 
 1865 3334 81270000 		_ADR	SUBB
 1866 3338 7B250000 		_DOLIT 9
 1866      09000000 
 1867 3340 D1260000 		_ADR	OVER
 1868 3344 192A0000 		_ADR	LESS
 1869 3348 BB250000 		_QBRAN	DGTQ1
 1869      70330000 
 1870 3350 7B250000 		_DOLIT 7
 1870      07000000 
 1871 3358 81270000 		_ADR	SUBB
 1872 335c AD260000 		_ADR	DUPP
 1873 3360 7B250000 		_DOLIT	10
 1873      0A000000 
 1874 3368 192A0000 		_ADR	LESS
 1875 336c 05270000 		_ADR	ORR
 1876              	DGTQ1:
 1877 3370 AD260000 		_ADR	DUPP
 1878 3374 2D260000 		_ADR	RFROM
 1879 3378 012A0000 		_ADR	ULESS
 1880 337c 03240000 		_UNNEST
 1881              	
 1882              	/***********************************
 1883              	 parse digits 
 1884              	  d digits count 
 1885              	  n parsed integer
 1886              	  a+ updated pointer  
 1887              	************************************/
 1888              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1889 3380 504700BF 	    _NEST
 1890 3384 692B0000 	    _ADR BASE 
 1891 3388 01260000 	    _ADR AT 
ARM GAS  forth.s 			page 125


 1892 338c 55260000 	    _ADR TOR  
 1893 3390 D12A0000 	1:  _ADR COUNT 
 1894 3394 41260000 	    _ADR RAT 
 1895 3398 25330000 	    _ADR DIGTQ
 1896 339c BB250000 	    _QBRAN 2f
 1896      CC330000 
 1897 33a4 95280000 	    _ADR ROT 
 1898 33a8 41260000 	    _ADR RAT 
 1899 33ac 91270000 	    _ADR STAR 
 1900 33b0 71270000 	    _ADR PLUS
 1901 33b4 BD260000 	    _ADR SWAP 
 1902 33b8 95280000 	    _ADR ROT 
 1903 33bc CD270000 	    _ADR ONEP 
 1904 33c0 A9280000 	    _ADR NROT
 1905 33c4 CF250000 	    _BRAN 1b 
 1905      90330000 
 1906 33cc 9D260000 	2:  _ADR DROP 
 1907 33d0 DD270000 	    _ADR ONEM  // decrement a 
 1908 33d4 2D260000 	    _ADR RFROM 
 1909 33d8 9D260000 	    _ADR DROP 
 1910 33dc 03240000 	    _UNNEST 
 1911              	
 1912              	/**************************
 1913              	 CHAR? 
 1914              	 check for charcter c 
 1915              	 move pointer if true 
 1916              	**************************/
 1917              	CHARQ: // ( a c -- a+ t | a f )
 1918 33e0 3868     	    ldr T0,[DSP]
 1919 33e2 10F8011B 	    ldrb T1,[T0],#1 
 1920 33e6 3246     	    mov T2,TOS 
 1921 33e8 86EA0606 	    eor TOS,TOS
 1922 33ec 9142     	    cmp T1,T2
 1923 33ee 02D1     	    bne 1f 
 1924 33f0 3860     	    str T0,[DSP]
 1925 33f2 6FEA0606 	    mvn TOS,TOS  
 1926 33f6 FFF701B8 	1:  _NEXT
 1927              	
 1928              	
 1929              	/**********************************
 1930              	    INT?	( a -- n T | a F )
 1931              	 	parse string for at 'a' for 
 1932              		integer. Push a flag on TOS.
 1933              		integer form:
 1934              			[-]hex_digit+  | 
 1935              			$[-]hex_digit+ |
 1936              			%[-]bin_digit+ | 
 1937              			[-]dec_digit+ 
 1938              	**********************************/
 1939 33fa 1C330000 		_HEADER INTQ,4,"INT?"
 1939      04494E54 
 1939      3F00
 1940 3404 504700BF 		_NEST
 1941 3408 692B0000 		_ADR	BASE
 1942 340c 01260000 		_ADR	AT
 1943 3410 55260000 		_ADR	TOR
 1944 3414 7B250000 		_DOLIT	0      // a 0 
ARM GAS  forth.s 			page 126


 1944      00000000 
 1945 341c D1260000 		_ADR	OVER   // a 0 a 
 1946 3420 D12A0000 		_ADR	COUNT  // a 0 a+ cnt 
 1947 3424 D1260000 		_ADR	OVER   // a 0 a+ cnt a+
 1948 3428 21260000 		_ADR	CAT    // a 0 a+ cnt char 
 1949 342c 7B250000 		_DOLIT '$'     // a 0 a+ cnt char '$'
 1949      24000000 
 1950 3434 C9290000 		_ADR	EQUAL  // a 0 a+ cnt f 
 1951 3438 BB250000 		_QBRAN	0f    
 1951      4C340000 
 1952 3440 BD320000 		_ADR	HEX
 1953 3444 CF250000 		_BRAN   1f 
 1953      6C340000 
 1954 344c D1260000 	0:  _ADR    OVER  // a 0 a+ cnt a+
 1955 3450 21260000 		_ADR    CAT   // a 0 a+ cnt char 
 1956 3454 7B250000 		_DOLIT  '%'   // a 0 a+ cnt char '%'
 1956      25000000 
 1957 345c C9290000 		_ADR	EQUAL  // a 0 a+ cnt f 
 1958 3460 BB250000 		_QBRAN  2f
 1958      7C340000 
 1959 3468 DD320000 		_ADR	BIN 
 1960 346c BD260000 	1:	_ADR	SWAP 
 1961 3470 CD270000 		_ADR	ONEP 
 1962 3474 BD260000 		_ADR	SWAP 
 1963 3478 DD270000 		_ADR	ONEM // a 0 a+ cnt-  
 1964              	2: // check for '-'
 1965 347c BD260000 		_ADR 	SWAP // a 0 cnt a+ 
 1966 3480 7B250000 		_DOLIT  '-' 
 1966      2D000000 
 1967 3488 E1330000 		_ADR	CHARQ
 1968 348c 95280000 		_ADR	ROT 
 1969 3490 D1260000 		_ADR	OVER 
 1970 3494 55260000 		_ADR    TOR   // a 0 a+ f cnt R: sign  
 1971 3498 BD260000 		_ADR	SWAP   // a 0 a+ cnt f 
 1972 349c BB250000 		_QBRAN  2f 
 1972      A8340000 
 1973 34a4 DD270000 		_ADR	ONEM 
 1974 34a8 55260000 	2:	_ADR 	TOR  // a 0 a+  R: sign cnt 
 1975 34ac 7B250000 		_DOLIT  0
 1975      00000000 
 1976 34b4 AD260000 		_ADR	DUPP 
 1977 34b8 95280000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 1978 34bc 81330000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 1979 34c0 9D260000 		_ADR	DROP // a 0 d n 
 1980 34c4 BD260000 		_ADR	SWAP  // a 0 n d 
 1981 34c8 2D260000 		_ADR	RFROM // a 0 n d cnt  
 1982 34cc C9290000 		_ADR	EQUAL // d == cnt ? 
 1983 34d0 BB250000 		_QBRAN  5f // digits left, not an integer 
 1983      00350000 
 1984 34d8 2D260000 	2:	_ADR	RFROM  // sign 
 1985 34dc BB250000 		_QBRAN  3f   // positive integer 
 1985      E8340000 
 1986 34e4 91290000 		_ADR	NEGAT
 1987              	3:	
 1988 34e8 A9280000 		_ADR	NROT  // n a 0 
 1989 34ec BD280000 		_ADR	DDROP // n  
 1990 34f0 7B250000 		_DOLIT  -1    // n -1 
ARM GAS  forth.s 			page 127


 1990      FFFFFFFF 
 1991 34f8 CF250000 		_BRAN   7f  
 1991      08350000 
 1992 3500 2D260000 	5:  _ADR	RFROM //  a 0 n sign      	 
 1993 3504 BD280000 	    _ADR	DDROP 
 1994 3508 2D260000 	7:	_ADR	RFROM
 1995 350c 692B0000 		_ADR	BASE
 1996 3510 ED250000 		_ADR	STORE
 1997 3514 03240000 		_UNNEST
 1998              	
 1999              	
 2000              	/********************
 2001              	  console I/O
 2002              	********************/
 2003              	
 2004              	/**********************
 2005              	    SPACE	( -- )
 2006              	 	Send the blank 
 2007              		character to 
 2008              		the output device.
 2009              	************************/
 2010 3518 FE330000 		_HEADER SPACE,5,"SPACE"
 2010      05535041 
 2010      434500BF 
 2011 3524 504700BF 		_NEST
 2012 3528 2D280000 		_ADR	BLANK
 2013 352c 85240000 		_ADR	EMIT
 2014 3530 03240000 		_UNNEST
 2015              	
 2016              	/***************************
 2017              	    SPACES	( +n -- )
 2018              	 	Send n spaces to the 
 2019              		output device.
 2020              	****************************/
 2021 3534 1C350000 		_HEADER SPACS,6,"SPACES"
 2021      06535041 
 2021      43455300 
 2022 3540 504700BF 		_NEST
 2023 3544 7B250000 		_DOLIT	0
 2023      00000000 
 2024 354c 612A0000 		_ADR	MAX
 2025 3550 55260000 		_ADR	TOR
 2026 3554 CF250000 		_BRAN	CHAR2
 2026      60350000 
 2027              	CHAR1:
 2028 355c 25350000 		_ADR	SPACE
 2029              	CHAR2:
 2030 3560 9D250000 		_DONXT	CHAR1
 2030      5C350000 
 2031 3568 03240000 		_UNNEST
 2032              	
 2033              	/***********************
 2034              	    TYPE	( b u -- )
 2035              	 	Output u characters 
 2036              		from b.
 2037              	************************/
 2038 356c 38350000 		_HEADER TYPEE,4,"TYPE"
ARM GAS  forth.s 			page 128


 2038      04545950 
 2038      450000BF 
 2039 3578 504700BF 		_NEST
 2040 357c 55260000 		_ADR  TOR   // ( a+1 -- R: u )
 2041 3580 CF250000 		_BRAN	TYPE2
 2041      94350000 
 2042              	TYPE1:  
 2043 3588 D12A0000 		_ADR  COUNT
 2044 358c 412F0000 		_ADR TCHAR
 2045 3590 85240000 		_ADR EMIT
 2046              	TYPE2:  
 2047 3594 9D250000 		_DONXT	TYPE1
 2047      88350000 
 2048 359c 9D260000 		_ADR	DROP
 2049 35a0 03240000 		_UNNEST
 2050              	
 2051              	/***************************
 2052              	    CR	  ( -- )
 2053              	 	Output a carriage return
 2054              		and a line feed.
 2055              	****************************/
 2056 35a4 70350000 		_HEADER CR,2,"CR"
 2056      02435200 
 2057 35ac 504700BF 		_NEST
 2058 35b0 7B250000 		_DOLIT	CRR
 2058      0D000000 
 2059 35b8 85240000 		_ADR	EMIT
 2060 35bc 7B250000 		_DOLIT	LF
 2060      0A000000 
 2061 35c4 85240000 		_ADR	EMIT
 2062 35c8 03240000 		_UNNEST
 2063              	
 2064              	/******************************************
 2065              	  do_$	( -- a )
 2066              	  Return the address of a compiled string.
 2067              	  adjust return address to skip over it.
 2068              	hidden word used by compiler. 
 2069              	******************************************/
 2070              	DOSTR:
 2071 35cc 504700BF 		_NEST     
 2072              	/* compiled string address is 2 levels deep */
 2073 35d0 2D260000 		_ADR	RFROM	// { -- a1 }
 2074 35d4 2D260000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2075 35d8 AD260000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2076 35dc D12A0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2077 35e0 71270000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2078 35e4 252F0000 		_ADR	ALGND	//  end of string
 2079              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2080 35e8 55260000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2081 35ec BD260000 		_ADR	SWAP	//  count tugged
 2082 35f0 55260000 		_ADR	TOR     //  ( -- a2) is string address
 2083 35f4 03240000 		_UNNEST
 2084              	
 2085              	/******************************************
 2086              	    $"|	( -- a )
 2087              	 	Run time routine compiled by _". 
 2088              		Return address of a compiled string.
ARM GAS  forth.s 			page 129


 2089              	hidden word used by compiler
 2090              	*****************************************/
 2091              	STRQP:
 2092 35f8 504700BF 		_NEST
 2093 35fc CD350000 		_ADR	DOSTR
 2094 3600 03240000 		_UNNEST			// force a call to dostr
 2095              	
 2096              	/*******************************
 2097              	    .$	( a -- )
 2098              	 	Run time routine of ." 
 2099              		Output a compiled string.
 2100              	hidden word used by compiler
 2101              	*******************************/
 2102              	DOTST:
 2103 3604 504700BF 		_NEST
 2104 3608 D12A0000 		_ADR	COUNT // ( -- a+1 c )
 2105 360c 79350000 		_ADR	TYPEE
 2106 3610 03240000 		_UNNEST
 2107              	
 2108              	/**********************
 2109              	    ."|	( -- )
 2110              	 	Run time routine of ." 
 2111              		Output a compiled string.
 2112              	hidden word used by compiler
 2113              	*****************************/
 2114              	DOTQP:
 2115 3614 504700BF 		_NEST
 2116 3618 CD350000 		_ADR	DOSTR
 2117 361c 05360000 		_ADR	DOTST
 2118 3620 03240000 		_UNNEST
 2119              	
 2120              	/******************************
 2121              	    .R	  ( n +n -- )
 2122              	 	Display an integer in a 
 2123              		field of n columns, 
 2124              		right justified.
 2125              	*******************************/
 2126 3624 A8350000 		_HEADER DOTR,2,".R"
 2126      022E5200 
 2127 362c 504700BF 		_NEST
 2128 3630 55260000 		_ADR	TOR
 2129 3634 89320000 		_ADR	STRR
 2130 3638 2D260000 		_ADR	RFROM
 2131 363c D1260000 		_ADR	OVER
 2132 3640 81270000 		_ADR	SUBB
 2133 3644 41350000 		_ADR	SPACS
 2134 3648 79350000 		_ADR	TYPEE
 2135 364c 03240000 		_UNNEST
 2136              	
 2137              	/*************************
 2138              	    U.R	 ( u +n -- )
 2139              	 	Display an unsigned 
 2140              		integer in n column, 
 2141              		right justified.
 2142              	***************************/
 2143 3650 28360000 		_HEADER UDOTR,3,"U.R"
 2143      03552E52 
ARM GAS  forth.s 			page 130


 2144 3658 504700BF 		_NEST
 2145 365c BD260000 		_ADR	SWAP 
 2146 3660 652D0000 		_ADR 	STOD 
 2147 3664 95280000 		_ADR	ROT 
 2148 3668 55260000 		_ADR	TOR
 2149 366c A1310000 		_ADR	BDIGS
 2150 3670 0D320000 		_ADR	DIGS
 2151 3674 69320000 		_ADR	EDIGS
 2152 3678 2D260000 		_ADR	RFROM
 2153 367c D1260000 		_ADR	OVER
 2154 3680 81270000 		_ADR	SUBB
 2155 3684 41350000 		_ADR	SPACS
 2156 3688 79350000 		_ADR	TYPEE
 2157 368c 03240000 		_UNNEST
 2158              	
 2159              	/************************
 2160              	    U.	  ( u -- )
 2161              	 	Display an unsigned 
 2162              		integer in free format.
 2163              	***************************/
 2164 3690 54360000 		_HEADER UDOT,2,"U."
 2164      02552E00 
 2165 3698 504700BF 		_NEST
 2166 369c 652D0000 		_ADR 	STOD 
 2167 36a0 A1310000 		_ADR	BDIGS
 2168 36a4 0D320000 		_ADR	DIGS
 2169 36a8 69320000 		_ADR	EDIGS
 2170 36ac 25350000 		_ADR	SPACE
 2171 36b0 79350000 		_ADR	TYPEE
 2172 36b4 03240000 		_UNNEST
 2173              	
 2174              	/************************
 2175              	    .	   ( w -- )
 2176              	 	Display an integer 
 2177              		in free format, 
 2178              		preceeded by a space.
 2179              	**************************/
 2180 36b8 94360000 		_HEADER DOT,1,"."
 2180      012E00BF 
 2181 36c0 504700BF 		_NEST
 2182 36c4 692B0000 		_ADR	BASE
 2183 36c8 01260000 		_ADR	AT
 2184 36cc 7B250000 		_DOLIT 10
 2184      0A000000 
 2185 36d4 19270000 		_ADR	XORR			// ?decimal
 2186 36d8 BB250000 		_QBRAN	DOT1
 2186      E8360000 
 2187 36e0 99360000 		_ADR	UDOT
 2188 36e4 03240000 		_UNNEST			// no,display unsigned
 2189              	DOT1:
 2190 36e8 89320000 	    _ADR	STRR
 2191 36ec 25350000 		_ADR	SPACE
 2192 36f0 79350000 		_ADR	TYPEE
 2193 36f4 03240000 		_UNNEST			// yes, display signed
 2194              	
 2195              	/*************************
 2196              	   D. ( d -- )
ARM GAS  forth.s 			page 131


 2197              	   display double integer 
 2198              	**************************/
 2199 36f8 BC360000 		_HEADER DDOT,2,"D."
 2199      02442E00 
 2200 3700 504700BF 		_NEST 
 2201 3704 AD260000 		_ADR DUPP 
 2202 3708 55260000 		_ADR TOR 
 2203 370c 19290000 		_ADR DABS 
 2204 3710 A1310000 		_ADR BDIGS
 2205 3714 0D320000 		_ADR DIGS 
 2206 3718 2D260000 		_ADR RFROM
 2207 371c 41320000 		_ADR SIGN 
 2208 3720 69320000 		_ADR EDIGS
 2209 3724 25350000 		_ADR SPACE 
 2210 3728 79350000 		_ADR TYPEE 
 2211 372c 03240000 		_UNNEST 
 2212              	
 2213              	
 2214              	/***********************
 2215              		H. ( w -- )
 2216              		display integer 
 2217              		in hexadecimal 
 2218              	*********************/
 2219 3730 FC360000 		_HEADER HDOT,2,"H."
 2219      02482E00 
 2220 3738 504700BF 		_NEST 
 2221 373c 692B0000 		_ADR BASE
 2222 3740 01260000 		_ADR AT 
 2223 3744 BD260000 		_ADR SWAP
 2224 3748 BD320000 		_ADR HEX
 2225 374c 99360000 		_ADR UDOT 
 2226 3750 692B0000 		_ADR BASE
 2227 3754 ED250000 		_ADR STORE  
 2228 3758 03240000 		_UNNEST 
 2229              	
 2230              	
 2231              	/***********************
 2232              	    ?	   ( a -- )
 2233              	 	Display the contents
 2234              		in a memory cell.
 2235              	*************************/
 2236 375c 34370000 		_HEADER QUEST,1,"?"
 2236      013F00BF 
 2237 3764 504700BF 		_NEST
 2238 3768 01260000 		_ADR	AT
 2239 376c C1360000 		_ADR	DOT
 2240 3770 03240000 		_UNNEST
 2241              	
 2242              	/**************
 2243              	  Parsing
 2244              	***************/
 2245              	
 2246              	/*********************************************
 2247              	    parse	( b u c -- b u delta //  string> )
 2248              	 	Scan word delimited by c. 
 2249              		Return found string and its offset.
 2250              	hidden word used by PARSE
ARM GAS  forth.s 			page 132


 2251              	**********************************************/
 2252              	PARS:
 2253 3774 504700BF 		_NEST
 2254 3778 732B0000 		_ADR	TEMP
 2255 377c ED250000 		_ADR	STORE
 2256 3780 D1260000 		_ADR	OVER
 2257 3784 55260000 		_ADR	TOR
 2258 3788 AD260000 		_ADR	DUPP
 2259 378c BB250000 		_QBRAN	PARS8
 2259      88380000 
 2260 3794 DD270000 		_ADR	ONEM
 2261 3798 732B0000 		_ADR	TEMP
 2262 379c 01260000 		_ADR	AT
 2263 37a0 2D280000 		_ADR	BLANK
 2264 37a4 C9290000 		_ADR	EQUAL
 2265 37a8 BB250000 		_QBRAN	PARS3
 2265      FC370000 
 2266 37b0 55260000 		_ADR	TOR
 2267              	PARS1:
 2268 37b4 2D280000 		_ADR	BLANK
 2269 37b8 D1260000 		_ADR	OVER
 2270 37bc 21260000 		_ADR	CAT	 // skip leading blanks 
 2271 37c0 81270000 		_ADR	SUBB
 2272 37c4 E1260000 		_ADR	ZLESS
 2273 37c8 7D290000 		_ADR	INVER
 2274 37cc BB250000 		_QBRAN	PARS2
 2274      F8370000 
 2275 37d4 CD270000 		_ADR	ONEP
 2276 37d8 9D250000 		_DONXT	PARS1
 2276      B4370000 
 2277 37e0 2D260000 		_ADR	RFROM
 2278 37e4 9D260000 		_ADR	DROP
 2279 37e8 7B250000 		_DOLIT	0
 2279      00000000 
 2280 37f0 AD260000 		_ADR	DUPP
 2281 37f4 03240000 		_UNNEST
 2282              	PARS2:
 2283 37f8 2D260000 		_ADR	RFROM
 2284              	PARS3:
 2285 37fc D1260000 		_ADR	OVER
 2286 3800 BD260000 		_ADR	SWAP
 2287 3804 55260000 		_ADR	TOR
 2288              	PARS4:
 2289 3808 732B0000 		_ADR	TEMP
 2290 380c 01260000 		_ADR	AT
 2291 3810 D1260000 		_ADR	OVER
 2292 3814 21260000 		_ADR	CAT
 2293 3818 81270000 		_ADR	SUBB // scan for delimiter
 2294 381c 732B0000 		_ADR	TEMP
 2295 3820 01260000 		_ADR	AT
 2296 3824 2D280000 		_ADR	BLANK
 2297 3828 C9290000 		_ADR	EQUAL
 2298 382c BB250000 		_QBRAN	PARS5
 2298      38380000 
 2299 3834 E1260000 		_ADR	ZLESS
 2300              	PARS5:
 2301 3838 BB250000 		_QBRAN	PARS6
ARM GAS  forth.s 			page 133


 2301      5C380000 
 2302 3840 CD270000 		_ADR	ONEP
 2303 3844 9D250000 		_DONXT	PARS4
 2303      08380000 
 2304 384c AD260000 		_ADR	DUPP
 2305 3850 55260000 		_ADR	TOR
 2306 3854 CF250000 		_BRAN	PARS7
 2306      70380000 
 2307              	PARS6:
 2308 385c 2D260000 		_ADR	RFROM
 2309 3860 9D260000 		_ADR	DROP
 2310 3864 AD260000 		_ADR	DUPP
 2311 3868 CD270000 		_ADR	ONEP
 2312 386c 55260000 		_ADR	TOR
 2313              	PARS7:
 2314 3870 D1260000 		_ADR	OVER
 2315 3874 81270000 		_ADR	SUBB
 2316 3878 2D260000 		_ADR	RFROM
 2317 387c 2D260000 		_ADR	RFROM
 2318 3880 81270000 		_ADR	SUBB
 2319 3884 03240000 		_UNNEST
 2320              	PARS8:
 2321 3888 D1260000 		_ADR	OVER
 2322 388c 2D260000 		_ADR	RFROM
 2323 3890 81270000 		_ADR	SUBB
 2324 3894 03240000 		_UNNEST
 2325              	
 2326              	/************************************
 2327              	    PARSE	( c -- b u //  string> )
 2328              	 	Scan input stream and return 
 2329              		counted string delimited by c.
 2330              	************************************/
 2331 3898 60370000 		_HEADER PARSE,5,"PARSE"
 2331      05504152 
 2331      534500BF 
 2332 38a4 504700BF 		_NEST
 2333 38a8 55260000 		_ADR	TOR
 2334 38ac 11300000 		_ADR	TIB
 2335 38b0 9D2B0000 		_ADR	INN
 2336 38b4 01260000 		_ADR	AT
 2337 38b8 71270000 		_ADR	PLUS			// current input buffer pointer
 2338 38bc B12B0000 		_ADR	NTIB
 2339 38c0 01260000 		_ADR	AT
 2340 38c4 9D2B0000 		_ADR	INN
 2341 38c8 01260000 		_ADR	AT
 2342 38cc 81270000 		_ADR	SUBB			// remaining count
 2343 38d0 2D260000 		_ADR	RFROM
 2344 38d4 75370000 		_ADR	PARS
 2345 38d8 9D2B0000 		_ADR	INN
 2346 38dc 892A0000 		_ADR	PSTOR
 2347 38e0 03240000 		_UNNEST
 2348              	
 2349              	/*******************************
 2350              	    .(	  ( -- )
 2351              	 	Output following string 
 2352              		up to next ) .
 2353              	******************************/
ARM GAS  forth.s 			page 134


 2354 38e4 9C380000 		_HEADER DOTPR,2,".("
 2354      022E2800 
 2355 38ec 504700BF 		_NEST
 2356 38f0 7B250000 		_DOLIT	')'
 2356      29000000 
 2357 38f8 A5380000 		_ADR	PARSE
 2358 38fc 79350000 		_ADR	TYPEE
 2359 3900 03240000 		_UNNEST
 2360              	
 2361              	/************************
 2362              	    (	   ( -- )
 2363              	 	Ignore following 
 2364              		string up to next )
 2365              		A comment.
 2366              	************************/
 2367 3904 E8380000 		_HEADER PAREN,IMEDD+1,"("
 2367      812800BF 
 2368 390c 504700BF 		_NEST
 2369 3910 7B250000 		_DOLIT	')'
 2369      29000000 
 2370 3918 A5380000 		_ADR	PARSE
 2371 391c BD280000 		_ADR	DDROP
 2372 3920 03240000 		_UNNEST
 2373              	
 2374              	/*******************
 2375              	    \	   ( -- )
 2376              	 	Ignore following 
 2377              		text till the 
 2378              		end of line.
 2379              	********************/
 2380 3924 08390000 		_HEADER BKSLA,IMEDD+1,"\\"
 2380      815C00BF 
 2381 392c 504700BF 		_NEST
 2382 3930 B12B0000 		_ADR	NTIB
 2383 3934 01260000 		_ADR	AT
 2384 3938 9D2B0000 		_ADR	INN
 2385 393c ED250000 		_ADR	STORE
 2386 3940 03240000 		_UNNEST
 2387              	
 2388              	/******************************
 2389              	    CHAR	( -- c )
 2390              	 	Parse next word and
 2391              		return its first character.
 2392              	*******************************/
 2393 3944 28390000 		_HEADER CHAR,4,"CHAR"
 2393      04434841 
 2393      520000BF 
 2394 3950 504700BF 		_NEST
 2395 3954 2D280000 		_ADR	BLANK
 2396 3958 A5380000 		_ADR	PARSE
 2397 395c 9D260000 		_ADR	DROP
 2398 3960 21260000 		_ADR	CAT
 2399 3964 03240000 		_UNNEST
 2400              	
 2401              	/**********************************
 2402              		[CHAR] ( -- c )
 2403              		immediate version of CHAR 
ARM GAS  forth.s 			page 135


 2404              	**********************************/
 2405 3968 48390000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2405      C65B4348 
 2405      41525D00 
 2406 3974 504700BF 		_NEST 
 2407 3978 51390000 		_ADR CHAR
 2408 397c 9D400000 		_ADR LITER 
 2409 3980 03240000 		_UNNEST 
 2410              	
 2411              	/**********************************
 2412              	    WORD	( c -- a //  string> )
 2413              	 	Parse a word from input stream
 2414              		and copy it to code dictionary.
 2415              	***********************************/
 2416 3984 6C390000 		_HEADER WORDD,4,"WORD"
 2416      04574F52 
 2416      440000BF 
 2417 3990 504700BF 		_NEST
 2418 3994 A5380000 		_ADR	PARSE
 2419 3998 D92F0000 		_ADR	HERE
 2420 399c 0D280000 		_ADR	CELLP
 2421 39a0 E1300000 		_ADR	PACKS
 2422 39a4 03240000 		_UNNEST
 2423              	
 2424              	/********************************
 2425              	    TOKEN	( -- a //  string> )
 2426              	 	Parse a word from input 
 2427              		stream and copy it to 
 2428              		name dictionary.
 2429              	*********************************/
 2430 39a8 88390000 		_HEADER TOKEN,5,"TOKEN"
 2430      05544F4B 
 2430      454E00BF 
 2431 39b4 504700BF 		_NEST
 2432 39b8 2D280000 		_ADR	BLANK
 2433 39bc 91390000 		_ADR	WORDD
 2434 39c0 A93B0000 		_ADR	UPPER 
 2435 39c4 03240000 		_UNNEST
 2436              	
 2437              	/**********************
 2438              	  Dictionary search
 2439              	***********************/
 2440              	
 2441              	/*************************
 2442              	    NAME>	( na -- ca )
 2443              	 	Return a code address
 2444              		given a name address.
 2445              	**************************/
 2446 39c8 AC390000 		_HEADER NAMET,5,"NAME>"
 2446      054E414D 
 2446      453E00BF 
 2447 39d4 504700BF 		_NEST
 2448 39d8 D12A0000 		_ADR	COUNT
 2449 39dc 7B250000 		_DOLIT	0x1F
 2449      1F000000 
 2450 39e4 F1260000 		_ADR	ANDD
 2451 39e8 71270000 		_ADR	PLUS
ARM GAS  forth.s 			page 136


 2452 39ec 252F0000 		_ADR	ALGND
 2453 39f0 03240000 		_UNNEST
 2454              	
 2455              	/***************************************
 2456              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2457              	 	Compare u bytes in two strings. 
 2458              		Return 0 if identical.
 2459              	
 2460              	  Picatout 2020-12-01, 
 2461              	    Because of problem with .align 
 2462              		directive that doesn't fill 
 2463              		with zero's I had to change 
 2464              		the "SAME?" and "FIND" 
 2465              	 	words  to do a byte by byte comparison. 
 2466              	****************************************/
 2467 39f4 CC390000 		_HEADER SAMEQ,5,"SAME?"
 2467      0553414D 
 2467      453F00BF 
 2468 3a00 504700BF 		_NEST
 2469 3a04 55260000 		_ADR	TOR
 2470 3a08 CF250000 		_BRAN	SAME2
 2470      4C3A0000 
 2471              	SAME1:
 2472 3a10 D1260000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2473 3a14 41260000 		_ADR	RAT   // a1 a2 a1 u 
 2474 3a18 71270000 		_ADR	PLUS  // a1 a2 a1+u 
 2475 3a1c 21260000 		_ADR	CAT	   // a1 a2 c1    		
 2476 3a20 D1260000 		_ADR	OVER  // a1 a2 c1 a2 
 2477 3a24 41260000 		_ADR	RAT    
 2478 3a28 71270000 		_ADR	PLUS    
 2479 3a2c 21260000 		_ADR	CAT	  // a1 a2 c1 c2
 2480 3a30 81270000 		_ADR	SUBB  
 2481 3a34 81280000 		_ADR	QDUP
 2482 3a38 BB250000 		_QBRAN	SAME2
 2482      4C3A0000 
 2483 3a40 2D260000 		_ADR	RFROM
 2484 3a44 9D260000 		_ADR	DROP
 2485 3a48 03240000 		_UNNEST	// strings not equal
 2486              	SAME2:
 2487 3a4c 9D250000 		_DONXT	SAME1
 2487      103A0000 
 2488 3a54 7B250000 		_DOLIT	0
 2488      00000000 
 2489 3a5c 03240000 		_UNNEST	// strings equal
 2490              	
 2491              	/***********************************
 2492              	    FIND	( a na -- ca na | a F )
 2493              	 	Search a vocabulary for a string.
 2494              		Return ca and na if succeeded.
 2495              	hidden word used by NAME?
 2496              	
 2497              	  Picatout 2020-12-01,  
 2498              		 Modified from original. 
 2499              	   See comment for word "SAME?" 
 2500              	************************************/
 2501              	FIND:
 2502 3a60 504700BF 		_NEST
ARM GAS  forth.s 			page 137


 2503 3a64 BD260000 		_ADR	SWAP			// na a	
 2504 3a68 D12A0000 		_ADR	COUNT			// na a+1 count
 2505 3a6c AD260000 		_ADR	DUPP 
 2506 3a70 732B0000 		_ADR	TEMP
 2507 3a74 ED250000 		_ADR	STORE			// na a+1 count 
 2508 3a78 55260000 		_ADR  TOR		// na a+1  R: count  
 2509 3a7c BD260000 		_ADR	SWAP			// a+1 na
 2510              	FIND1:
 2511 3a80 AD260000 		_ADR	DUPP			// a+1 na na
 2512 3a84 BB250000 		_QBRAN	FIND6	// end of vocabulary
 2512      D83A0000 
 2513 3a8c AD260000 		_ADR	DUPP			// a+1 na na
 2514 3a90 21260000 		_ADR	CAT			// a+1 na name1
 2515 3a94 7B250000 		_DOLIT	MASKK
 2515      1FFFFFFF 
 2516 3a9c F1260000 		_ADR	ANDD
 2517 3aa0 41260000 		_ADR	RAT			// a+1 na name1 count 
 2518 3aa4 19270000 		_ADR	XORR			// a+1 na,  same length?
 2519 3aa8 BB250000 		_QBRAN	FIND2
 2519      C03A0000 
 2520 3ab0 1D280000 		_ADR	CELLM			// a+1 la
 2521 3ab4 01260000 		_ADR	AT			// a+1 next_na
 2522 3ab8 CF250000 		_BRAN	FIND1			// try next word
 2522      803A0000 
 2523              	FIND2:   
 2524 3ac0 CD270000 		_ADR	ONEP			// a+1 na+1
 2525 3ac4 732B0000 		_ADR	TEMP
 2526 3ac8 01260000 		_ADR	AT			// a+1 na+1 count
 2527 3acc 013A0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2528              	FIND3:	
 2529 3ad0 CF250000 		_BRAN	FIND4
 2529      F03A0000 
 2530              	FIND6:	
 2531 3ad8 2D260000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2532 3adc 9D260000 		_ADR	DROP			// a+1 0
 2533 3ae0 BD260000 		_ADR	SWAP			// 0 a+1
 2534 3ae4 DD270000 		_ADR	ONEM			// 0 a
 2535 3ae8 BD260000 		_ADR	SWAP			// a 0 
 2536 3aec 03240000 		_UNNEST			// return without a match
 2537              	FIND4:	
 2538 3af0 BB250000 		_QBRAN	FIND5			// a+1 na+1
 2538      0C3B0000 
 2539 3af8 DD270000 		_ADR	ONEM			// a+1 na
 2540 3afc 1D280000 		_ADR	CELLM			// a+4 la
 2541 3b00 01260000 		_ADR	AT			// a+1 next_na
 2542 3b04 CF250000 		_BRAN	FIND1			// compare next name
 2542      803A0000 
 2543              	FIND5:	
 2544 3b0c 2D260000 		_ADR	RFROM			// a+1 na+1 count
 2545 3b10 9D260000 		_ADR	DROP			// a+1 na+1
 2546 3b14 BD260000 		_ADR	SWAP			// na+1 a+1
 2547 3b18 9D260000 		_ADR	DROP			// na+1
 2548 3b1c DD270000 		_ADR	ONEM			// na
 2549 3b20 AD260000 		_ADR	DUPP			// na na
 2550 3b24 D5390000 		_ADR	NAMET			// na ca
 2551 3b28 BD260000 		_ADR	SWAP			// ca na
 2552 3b2c 03240000 		_UNNEST			//  return with a match
ARM GAS  forth.s 			page 138


 2553              	
 2554              	/********************************
 2555              	    NAME?	( a -- ca na | a F )
 2556              	 	Search all context vocabularies 
 2557              		for a string.
 2558              	***********************************/
 2559 3b30 F8390000 		_HEADER NAMEQ,5,"NAME?"
 2559      054E414D 
 2559      453F00BF 
 2560 3b3c 504700BF 		_NEST
 2561 3b40 F12B0000 		_ADR	CNTXT
 2562 3b44 01260000 		_ADR	AT
 2563 3b48 613A0000 		_ADR	FIND
 2564 3b4c 03240000 		_UNNEST
 2565              	
 2566              	/********************
 2567              	  console input
 2568              	********************/
 2569              	
 2570              	/****************************
 2571              		ASCIZ ( a -- a+ )
 2572              		convert counted string to 
 2573              		null terminated string 
 2574              		in pad.
 2575              	*****************************/
 2576 3b50 343B0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2576      05415343 
 2576      495A00BF 
 2577 3b5c 504700BF 		_NEST 
 2578 3b60 D12A0000 		_ADR COUNT
 2579 3b64 AD260000 		_ADR DUPP
 2580 3b68 55260000 		_ADR TOR 
 2581 3b6c F12F0000 		_ADR PAD 
 2582 3b70 BD260000 		_ADR SWAP
 2583 3b74 79300000 		_ADR MOVE  
 2584 3b78 F12F0000 		_ADR PAD 
 2585 3b7c 2D260000 		_ADR RFROM
 2586 3b80 71270000 		_ADR PLUS 
 2587 3b84 7B250000 		_DOLIT 0 
 2587      00000000 
 2588 3b8c BD260000 		_ADR SWAP  
 2589 3b90 0D260000 		_ADR CSTOR
 2590 3b94 F12F0000 		_ADR PAD   
 2591 3b98 03240000 		_UNNEST 
 2592              	
 2593              	/***********************
 2594              		UPPER (cstring -- cstring )
 2595              		convert to upper case in situ
 2596              	*******************************/
 2597 3b9c 543B0000 		_HEADER UPPER,5,"UPPER"
 2597      05555050 
 2597      455200BF 
 2598 3ba8 504700BF 		_NEST 
 2599 3bac AD260000 		_ADR DUPP 
 2600 3bb0 55260000 		_ADR TOR 
 2601 3bb4 D12A0000 		_ADR COUNT
 2602 3bb8 7B250000 		_DOLIT 0x1f
ARM GAS  forth.s 			page 139


 2602      1F000000 
 2603 3bc0 F1260000 		_ADR ANDD
 2604 3bc4 55260000 		_ADR TOR 
 2605 3bc8 CF250000 		_BRAN 3f
 2605      1C3C0000 
 2606 3bd0 AD260000 	1:  _ADR DUPP 
 2607 3bd4 D12A0000 		_ADR COUNT 
 2608 3bd8 AD260000 		_ADR DUPP 
 2609 3bdc 7B250000 		_DOLIT 'a'-1
 2609      60000000 
 2610 3be4 492A0000 		_ADR GREAT
 2611 3be8 BB250000 		_QBRAN 2f 
 2611      143C0000 
 2612 3bf0 AD260000 		_ADR DUPP 
 2613 3bf4 7B250000 		_DOLIT 'z'+1 
 2613      7B000000 
 2614 3bfc 192A0000 		_ADR LESS 
 2615 3c00 BB250000 		_QBRAN 2f 
 2615      143C0000 
 2616 3c08 7B250000 		_DOLIT 0x5f  
 2616      5F000000 
 2617 3c10 F1260000 		_ADR ANDD
 2618 3c14 95280000 	2:	_ADR ROT
 2619 3c18 0D260000 		_ADR CSTOR
 2620 3c1c 9D250000 	3:  _DONXT 1b
 2620      D03B0000 
 2621 3c24 9D260000 		_ADR DROP 
 2622 3c28 2D260000 		_ADR RFROM
 2623 3c2c 03240000 		_UNNEST 
 2624              	
 2625              	/**************************************
 2626              	   BKSP  ( bot eot cur -- bot eot cur )
 2627              	   Move cursor left by one character.
 2628              	hidden word used by KTAP
 2629              	***************************************/
 2630              	BKSP:
 2631 3c30 504700BF 		_NEST
 2632 3c34 55260000 		_ADR	TOR
 2633 3c38 D1260000 		_ADR	OVER
 2634 3c3c 2D260000 		_ADR	RFROM
 2635 3c40 BD260000 		_ADR	SWAP
 2636 3c44 D1260000 		_ADR	OVER
 2637 3c48 19270000 		_ADR	XORR
 2638 3c4c BB250000 		_QBRAN	BACK1
 2638      783C0000 
 2639 3c54 7B250000 		_DOLIT	BKSPP
 2639      08000000 
 2640 3c5c 85240000 		_ADR	EMIT
 2641 3c60 DD270000 		_ADR	ONEM
 2642 3c64 2D280000 		_ADR	BLANK
 2643 3c68 85240000 		_ADR	EMIT
 2644 3c6c 7B250000 		_DOLIT	BKSPP
 2644      08000000 
 2645 3c74 85240000 		_ADR	EMIT
 2646              	BACK1:
 2647 3c78 03240000 		  _UNNEST
 2648              	
ARM GAS  forth.s 			page 140


 2649              	/****************************************
 2650              	   TAP	 ( bot eot cur c -- bot eot cur )
 2651              	   Accept and echo the key stroke 
 2652              	   and bump the cursor.
 2653              	hidden word used by KTAP 
 2654              	****************************************/
 2655              	TAP:
 2656 3c7c 504700BF 		_NEST
 2657 3c80 AD260000 		_ADR	DUPP
 2658 3c84 85240000 		_ADR	EMIT
 2659 3c88 D1260000 		_ADR	OVER
 2660 3c8c 0D260000 		_ADR	CSTOR
 2661 3c90 CD270000 		_ADR	ONEP
 2662 3c94 03240000 		_UNNEST
 2663              	
 2664              	
 2665              	/*******************************************
 2666              	    kTAP	( bot eot cur c -- bot eot cur )
 2667              	 	Process a key stroke, CR or backspace.
 2668              	hidden word used by ACCEPT 
 2669              	*******************************************/
 2670              	KTAP:
 2671              	TTAP:
 2672 3c98 504700BF 		_NEST
 2673 3c9c AD260000 		_ADR	DUPP
 2674 3ca0 7B250000 		_DOLIT	CRR
 2674      0D000000 
 2675 3ca8 19270000 		_ADR	XORR
 2676 3cac BB250000 		_QBRAN  KTAP2
 2676      DC3C0000 
 2677 3cb4 7B250000 		_DOLIT	BKSPP
 2677      08000000 
 2678 3cbc 19270000 		_ADR	XORR
 2679 3cc0 BB250000 		_QBRAN	KTAP1
 2679      D43C0000 
 2680 3cc8 2D280000 		_ADR	BLANK
 2681 3ccc 7D3C0000 		_ADR	TAP
 2682 3cd0 03240000 		_UNNEST
 2683              	//	.word	0			// patch
 2684              	KTAP1:
 2685 3cd4 313C0000 		_ADR	BKSP
 2686 3cd8 03240000 		_UNNEST
 2687              	KTAP2:
 2688 3cdc 9D260000 		_ADR	DROP
 2689 3ce0 BD260000 		_ADR	SWAP
 2690 3ce4 9D260000 		_ADR	DROP
 2691 3ce8 AD260000 		_ADR	DUPP
 2692 3cec 03240000 		_UNNEST
 2693              	
 2694              	/************************************
 2695              	    ACCEPT	( b u -- b u )
 2696              	 	Accept characters to input 
 2697              		buffer. Return with actual count.
 2698              	*************************************/
 2699 3cf0 A03B0000 		_HEADER ACCEP,6,"ACCEPT"
 2699      06414343 
 2699      45505400 
ARM GAS  forth.s 			page 141


 2700 3cfc 504700BF 		_NEST
 2701 3d00 D1260000 		_ADR	OVER
 2702 3d04 71270000 		_ADR	PLUS
 2703 3d08 D1260000 		_ADR	OVER
 2704              	ACCP1:
 2705 3d0c E5280000 		_ADR	DDUP
 2706 3d10 19270000 		_ADR	XORR
 2707 3d14 BB250000 		_QBRAN	ACCP4
 2707      543D0000 
 2708 3d1c 61240000 		_ADR	KEY
 2709 3d20 AD260000 		_ADR	DUPP
 2710 3d24 2D280000 		_ADR	BLANK
 2711 3d28 7B250000 		_DOLIT 127
 2711      7F000000 
 2712 3d30 892C0000 		_ADR	WITHI
 2713 3d34 BB250000 		_QBRAN	ACCP2
 2713      483D0000 
 2714 3d3c 7D3C0000 		_ADR	TAP
 2715 3d40 CF250000 		_BRAN	ACCP3
 2715      4C3D0000 
 2716              	ACCP2:
 2717 3d48 993C0000 		_ADR	KTAP
 2718              	ACCP3:	  
 2719 3d4c CF250000 		_BRAN	ACCP1
 2719      0C3D0000 
 2720              	ACCP4:
 2721 3d54 9D260000 		_ADR	DROP
 2722 3d58 D1260000 		_ADR	OVER
 2723 3d5c 81270000 		_ADR	SUBB
 2724 3d60 03240000 		_UNNEST
 2725              	
 2726              	/*****************************
 2727              	    QUERY	( -- )
 2728              	 	Accept input stream 
 2729              		to terminal input buffer.
 2730              	******************************/
 2731 3d64 F43C0000 		_HEADER QUERY,5,"QUERY"
 2731      05515545 
 2731      525900BF 
 2732 3d70 504700BF 		_NEST
 2733 3d74 11300000 		_ADR	TIB
 2734 3d78 7B250000 		_DOLIT 80
 2734      50000000 
 2735 3d80 FD3C0000 		_ADR	ACCEP
 2736 3d84 B12B0000 		_ADR	NTIB
 2737 3d88 ED250000 		_ADR	STORE
 2738 3d8c 9D260000 		_ADR	DROP
 2739 3d90 7B250000 		_DOLIT	0
 2739      00000000 
 2740 3d98 9D2B0000 		_ADR	INN
 2741 3d9c ED250000 		_ADR	STORE
 2742 3da0 03240000 		_UNNEST
 2743              	
 2744              	/********************
 2745              	  Error handling
 2746              	********************/
 2747              	
ARM GAS  forth.s 			page 142


 2748              	/*********************
 2749              	    ABORT	( a -- )
 2750              	 	Reset data stack 
 2751              		and jump to QUIT.
 2752              	**********************/
 2753 3da4 683D0000 		_HEADER ABORT,5,"ABORT"
 2753      0541424F 
 2753      525400BF 
 2754 3db0 504700BF 		_NEST
 2755              	ABORT1:
 2756 3db4 25350000 		_ADR	SPACE
 2757 3db8 D12A0000 		_ADR	COUNT
 2758 3dbc 79350000 		_ADR	TYPEE
 2759 3dc0 7B250000 		_DOLIT	0X3F
 2759      3F000000 
 2760 3dc8 85240000 		_ADR	EMIT
 2761 3dcc AD350000 		_ADR	CR
 2762 3dd0 393F0000 		_ADR	PRESE
 2763 3dd4 CF250000 		_BRAN	QUIT
 2763      583F0000 
 2764              	
 2765              	/*******************************
 2766              	    _abort"	( f -- )
 2767              	 	Run time routine of ABORT"
 2768              		Abort with a message.
 2769              	hidden used by compiler 
 2770              	********************************/
 2771              	ABORQ:
 2772 3ddc 504700BF 		_NEST
 2773 3de0 CD350000 		_ADR	DOSTR
 2774 3de4 BD260000 		_ADR	SWAP 
 2775 3de8 BB250000 		_QBRAN	1f	// text flag
 2775      F83D0000 
 2776 3df0 CF250000 		_BRAN	ABORT1
 2776      B43D0000 
 2777              	1:
 2778 3df8 9D260000 		_ADR	DROP
 2779 3dfc 03240000 		_UNNEST			// drop error
 2780              	
 2781              	/************************
 2782              	  The text interpreter
 2783              	************************/
 2784              	
 2785              	/***************************
 2786              	    $INTERPRET  ( a -- )
 2787              	 	Interpret a word. 
 2788              		If failed, try to 
 2789              		convert it to an integer.
 2790              	******************************/
 2791 3e00 A83D0000 		_HEADER INTER,10,"$INTERPRET"
 2791      0A24494E 
 2791      54455250 
 2791      52455400 
 2792 3e10 504700BF 		_NEST
 2793 3e14 3D3B0000 		_ADR	NAMEQ
 2794 3e18 81280000 		_ADR	QDUP	// ?defined
 2795 3e1c BB250000 		_QBRAN	INTE1
ARM GAS  forth.s 			page 143


 2795      503E0000 
 2796 3e24 01260000 		_ADR	AT
 2797 3e28 7B250000 		_DOLIT	COMPO
 2797      40000000 
 2798 3e30 F1260000 		_ADR	ANDD	// ?compile only lexicon bits
 2799 3e34 DD3D0000 		_ABORQ	13," compile only"
 2799      0D20636F 
 2799      6D70696C 
 2799      65206F6E 
 2799      6C7900BF 
 2800 3e48 91250000 		_ADR	EXECU
 2801 3e4c 03240000 		_UNNEST			// execute defined word
 2802              	INTE1:
 2803 3e50 D5230000 		_ADR	NUMBER 
 2804 3e54 BB250000 		_QBRAN	INTE2
 2804      603E0000 
 2805 3e5c 03240000 		_UNNEST
 2806              	INTE2:
 2807 3e60 B13D0000 		_ADR	ABORT	// error
 2808              	
 2809              	/******************************
 2810              	    [	   ( -- )
 2811              	 	Start the text interpreter.
 2812              	*******************************/
 2813 3e64 043E0000 		_HEADER LBRAC,IMEDD+1,"["
 2813      815B00BF 
 2814 3e6c 504700BF 		_NEST
 2815 3e70 7B250000 		_DOLIT	INTER
 2815      103E0000 
 2816 3e78 C52B0000 		_ADR	TEVAL
 2817 3e7c ED250000 		_ADR	STORE
 2818 3e80 03240000 		_UNNEST
 2819              	
 2820              	/**********************
 2821              	    .OK	 ( -- )
 2822              	 	Display "ok" only 
 2823              		while interpreting.
 2824              	************************/
 2825 3e84 683E0000 		_HEADER DOTOK,3,".OK"
 2825      032E4F4B 
 2826 3e8c 504700BF 		_NEST
 2827 3e90 7B250000 		_DOLIT	INTER
 2827      103E0000 
 2828 3e98 C52B0000 		_ADR	TEVAL
 2829 3e9c 01260000 		_ADR	AT
 2830 3ea0 C9290000 		_ADR	EQUAL
 2831 3ea4 BB250000 		_QBRAN	DOTO1
 2831      B43E0000 
 2832 3eac 15360000 		_DOTQP	3," ok"
 2832      03206F6B 
 2833              	DOTO1:
 2834 3eb4 AD350000 		_ADR	CR
 2835 3eb8 03240000 		_UNNEST
 2836              	
 2837              	/*************************
 2838              	    ?STACK	( -- )
 2839              	 	Abort if the data 
ARM GAS  forth.s 			page 144


 2840              		stack underflows.
 2841              	************************/
 2842 3ebc 883E0000 		_HEADER QSTAC,6,"?STACK"
 2842      063F5354 
 2842      41434B00 
 2843 3ec8 504700BF 		_NEST
 2844 3ecc 8D2F0000 		_ADR	DEPTH
 2845 3ed0 E1260000 		_ADR	ZLESS	// check only for underflow
 2846 3ed4 DD3D0000 		_ABORQ	9,"underflow"
 2846      09756E64 
 2846      6572666C 
 2846      6F7700BF 
 2847 3ee4 03240000 		_UNNEST
 2848              	
 2849              	/*******************
 2850              	    EVAL	( -- )
 2851              	 	Interpret the 
 2852              		input stream.
 2853              	*******************/
 2854 3ee8 C03E0000 		_HEADER EVAL,4,"EVAL"
 2854      04455641 
 2854      4C0000BF 
 2855 3ef4 504700BF 		_NEST
 2856              	EVAL1:
 2857 3ef8 B5390000 	    _ADR	TOKEN
 2858 3efc AD260000 		_ADR	DUPP
 2859 3f00 21260000 		_ADR	CAT	// ?input stream empty
 2860 3f04 BB250000 		_QBRAN	EVAL2
 2860      203F0000 
 2861 3f0c C52B0000 		_ADR	TEVAL
 2862 3f10 29300000 		_ADR	ATEXE
 2863 3f14 C93E0000 		_ADR	QSTAC	// evaluate input, check stack
 2864 3f18 CF250000 		_BRAN	EVAL1
 2864      F83E0000 
 2865              	EVAL2:
 2866 3f20 9D260000 		_ADR	DROP
 2867 3f24 8D3E0000 		_ADR	DOTOK
 2868 3f28 03240000 		_UNNEST	// prompt
 2869              	
 2870              	/**********************************
 2871              	    PRESET	( -- )
 2872              	 	Reset data stack pointer 
 2873              		and the terminal input buffer.
 2874              	**********************************/
 2875 3f2c EC3E0000 		_HEADER PRESE,6,"PRESET"
 2875      06505245 
 2875      53455400 
 2876 3f38 504700BF 		_NEST 
 2877 3f3c 7B250000 		_DOLIT SPP 
 2877      00FF0120 
 2878 3f44 79260000 		_ADR SPSTOR 
 2879 3f48 03240000 		_UNNEST 
 2880              	
 2881              	/*********************
 2882              	    QUIT	( -- )
 2883              	 	Reset return stack 
 2884              		pointer and start 
ARM GAS  forth.s 			page 145


 2885              		text interpreter.
 2886              	***********************/
 2887 3f4c 303F0000 		_HEADER QUIT,4,"QUIT"
 2887      04515549 
 2887      540000BF 
 2888 3f58 7B250000 		_DOLIT RPP 
 2888      80FF0120 
 2889 3f60 69260000 		_ADR RPSTOR 
 2890              	QUIT1:
 2891 3f64 6D3E0000 		_ADR	LBRAC			// start interpretation
 2892              	QUIT2:
 2893 3f68 713D0000 		_ADR	QUERY			// get input
 2894 3f6c F53E0000 		_ADR	EVAL
 2895 3f70 CF250000 		_BRAN	QUIT2	// continue till error
 2895      683F0000 
 2896              	
 2897              	/***************************
 2898              		FORGET ( <string> -- )
 2899              		forget all definition 
 2900              		starting at <string>
 2901              	****************************/
 2902 3f78 503F0000 		_HEADER FORGET,6,"FORGET"
 2902      06464F52 
 2902      47455400 
 2903 3f84 504700BF 		_NEST 
 2904 3f88 B5390000 		_ADR TOKEN 
 2905 3f8c AD260000 		_ADR DUPP 
 2906 3f90 BB250000 		_QBRAN 9f 
 2906      CC3F0000 
 2907 3f98 3D3B0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2908 3f9c 81280000 		_ADR QDUP 
 2909 3fa0 BB250000 		_QBRAN 8f
 2909      C83F0000 
 2910 3fa8 1D280000 		_ADR CELLM // ( ca la )
 2911 3fac AD260000 		_ADR DUPP 
 2912 3fb0 052C0000 		_ADR CPP   
 2913 3fb4 ED250000 		_ADR STORE
 2914 3fb8 01260000 		_ADR AT 
 2915 3fbc 312C0000 		_ADR LAST 
 2916 3fc0 ED250000 		_ADR STORE
 2917 3fc4 21450000 		_ADR OVERT 
 2918 3fc8 9D260000 	8:  _ADR DROP 
 2919 3fcc 03240000 	9:	_UNNEST 
 2920              	
 2921              		.p2align 2 
 2922              	
 2923              	/*****************
 2924              	  The compiler
 2925              	******************/
 2926              	
 2927              	/**************************************
 2928              	    '	   ( -- ca )
 2929              	 	Search context vocabularies 
 2930              		for the next word in input stream.
 2931              	***************************************/
 2932 3fd0 7C3F0000 		_HEADER TICK,1,"'"
 2932      012700BF 
ARM GAS  forth.s 			page 146


 2933 3fd8 504700BF 		_NEST
 2934 3fdc B5390000 		_ADR	TOKEN
 2935 3fe0 3D3B0000 		_ADR	NAMEQ	// ?defined
 2936 3fe4 BB250000 		_QBRAN	TICK1
 2936      F03F0000 
 2937 3fec 03240000 		_UNNEST	// yes, push code address
 2938              	TICK1:	
 2939 3ff0 B13D0000 		_ADR ABORT	// no, error
 2940              	
 2941              	/***********************
 2942              	    ALLOT	( n -- )
 2943              	 	Allocate n bytes to 
 2944              		the ram area.
 2945              	************************/
 2946 3ff4 D43F0000 		_HEADER ALLOT,5,"ALLOT"
 2946      05414C4C 
 2946      4F5400BF 
 2947 4000 504700BF 		_NEST
 2948 4004 052C0000 		_ADR	CPP
 2949 4008 892A0000 		_ADR	PSTOR
 2950 400c 03240000 		_UNNEST			// adjust code pointer
 2951              	
 2952              	/******************************
 2953              	    ,	   ( w -- )
 2954              	 	Compile an integer 
 2955              		into the code dictionary.
 2956              	******************************/
 2957 4010 F83F0000 		_HEADER COMMA,1,","
 2957      012C00BF 
 2958 4018 504700BF 		_NEST
 2959 401c D92F0000 		_ADR	HERE
 2960 4020 AD260000 		_ADR	DUPP
 2961 4024 0D280000 		_ADR	CELLP	// cell boundary
 2962 4028 052C0000 		_ADR	CPP
 2963 402c ED250000 		_ADR	STORE
 2964 4030 ED250000 		_ADR	STORE
 2965 4034 03240000 		_UNNEST	// adjust code pointer, compile
 2966              		.p2align 2 
 2967              	
 2968              	/************************************
 2969              	    [COMPILE]   ( -- //  string> )
 2970              	 	Compile the next immediate word 
 2971              		into code dictionary.
 2972              	*************************************/
 2973 4038 14400000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2973      895B434F 
 2973      4D50494C 
 2973      455D00BF 
 2974 4048 504700BF 		_NEST
 2975 404c D93F0000 		_ADR	TICK
 2976 4050 19400000 		_ADR	COMMA
 2977 4054 03240000 		_UNNEST
 2978              	
 2979              	/****************************
 2980              	    COMPILE	( -- )
 2981              	 	Compile the next address 
 2982              		in colon list to code 
ARM GAS  forth.s 			page 147


 2983              		dictionary.
 2984              	*******************************/
 2985 4058 3C400000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2985      47434F4D 
 2985      50494C45 
 2986 4064 504700BF 		_NEST
 2987 4068 2D260000 		_ADR	RFROM
 2988 406c AD260000 		_ADR	DUPP 
 2989 4070 01260000 		_ADR	AT
 2990 4074 7B250000 		_DOLIT 1 
 2990      01000000 
 2991 407c 05270000 		_ADR	ORR 
 2992 4080 19400000 		_ADR	COMMA 
 2993 4084 0D280000 		_ADR	CELLP 
 2994 4088 55260000 		_ADR	TOR 
 2995 408c 03240000 		_UNNEST	// adjust return address
 2996              	
 2997              	/*************************
 2998              	    LITERAL	( w -- )
 2999              	 	Compile tos to code 
 3000              		dictionary as an 
 3001              		integer literal.
 3002              	***************************/
 3003 4090 5C400000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3003      874C4954 
 3003      4552414C 
 3004 409c 504700BF 		_NEST
 3005 40a0 7B250000 		_COMPI	DOLIT
 3005      7A250000 
 3005      7D450000 
 3006 40ac 19400000 		_ADR	COMMA
 3007 40b0 03240000 		_UNNEST
 3008              	
 3009              	/********************
 3010              	    $,"	( -- )
 3011              	 	Compile a literal 
 3012              		string up to next " .
 3013              	hidden word 
 3014              	************************/
 3015              	STRCQ:
 3016 40b4 504700BF 		_NEST
 3017 40b8 7B250000 		_DOLIT -4
 3017      FCFFFFFF 
 3018 40c0 052C0000 		_ADR	CPP
 3019 40c4 892A0000 		_ADR	PSTOR
 3020 40c8 7B250000 		_DOLIT	'\"'
 3020      22000000 
 3021 40d0 91390000 		_ADR	WORDD			// move word to code dictionary
 3022 40d4 D12A0000 		_ADR	COUNT
 3023 40d8 71270000 		_ADR	PLUS
 3024 40dc 252F0000 		_ADR	ALGND			// calculate aligned end of string
 3025 40e0 052C0000 		_ADR	CPP
 3026 40e4 ED250000 		_ADR	STORE
 3027 40e8 03240000 		_UNNEST 			// adjust the code pointer
 3028              	
 3029              	/*******************
 3030              	   Structures
ARM GAS  forth.s 			page 148


 3031              	*******************/
 3032              	
 3033              	/*************************
 3034              	    FOR	 ( -- a )
 3035              	 	Start a FOR-NEXT loop 
 3036              		structure in a colon 
 3037              		definition.
 3038              	**************************/
 3039 40ec 94400000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3039      C3464F52 
 3040 40f4 504700BF 		_NEST
 3041 40f8 7B250000 		_COMPI	TOR
 3041      54260000 
 3041      7D450000 
 3042 4104 D92F0000 		_ADR	HERE
 3043 4108 03240000 		_UNNEST
 3044              	
 3045              	/********************************
 3046              		DO ( limit start -- )
 3047              		initialise a DO...LOOP 
 3048              		or DO...+LOOP 
 3049              	********************************/
 3050 410c F0400000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3050      C2444F00 
 3051 4114 504700BF 		_NEST
 3052 4118 7B250000 		_COMPI SWAP
 3052      BC260000 
 3052      7D450000 
 3053 4124 7B250000 		_COMPI TOR 
 3053      54260000 
 3053      7D450000 
 3054 4130 7B250000 		_COMPI TOR 
 3054      54260000 
 3054      7D450000 
 3055 413c D92F0000 		_ADR HERE 
 3056 4140 03240000 		_UNNEST 
 3057              	
 3058              	DOPLOOP: // ( n -- R: counter limit )
 3059 4144 B8E80300 		ldmfd RSP!,{T0,T1}
 3060 4148 3044     		add T0,TOS 
 3061 414a 28E90300 		stmfd RSP!,{T0,T1}
 3062 414e 8842     		cmp T0,T1 
 3063 4150 05D4     		bmi 9f 
 3064 4152 08F10808 		add RSP,#8
 3065 4156 0CF1040C 		add IP,#4
 3066 415a FEF74FB9 		_NEXT 
 3067 415e DCF800C0 	9:  ldr IP,[IP]
 3068 4162 FEF74BB9 		_NEXT 
 3069              		
 3070              	/***************************
 3071              		+LOOP ( a -- )
 3072              		increment counter 
 3073              		end loop if countr>limit
 3074              	****************************/
 3075 4166 10410000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3075      C52B4C4F 
 3075      4F50
ARM GAS  forth.s 			page 149


 3076 4170 504700BF 		_NEST 
 3077 4174 7B250000 		_COMPI DOPLOOP 
 3077      44410000 
 3077      7D450000 
 3078 4180 19400000 		_ADR COMMA
 3079 4184 03240000 		_UNNEST 
 3080              	
 3081              	DOLOOP: // ( -- R: counter limit )
 3082 4188 D8F80000 		ldr T0,[RSP]
 3083 418c 00F10100 		add T0,#1
 3084 4190 C8F80000 		str T0,[RSP]
 3085 4194 D8F80410 		ldr T1,[RSP,#4]
 3086 4198 8842     		cmp T0,T1 
 3087 419a 05D4     		bmi 9f
 3088 419c 08F10808 		add RSP,#8  // counter and limit  
 3089 41a0 0CF1040C 		add IP,IP,#4 // skip loop address 
 3090 41a4 FEF72AB9 		_NEXT 
 3091 41a8 DCF800C0 	9:  ldr IP,[IP]
 3092 41ac FEF726B9 		_NEXT 
 3093              	
 3094              	
 3095              	/********************************
 3096              		LOOP ( a -- )
 3097              		increment counter 
 3098              		end loop if >= limit 
 3099              	*********************************/
 3100 41b0 6A410000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3100      C44C4F4F 
 3100      500000BF 
 3101 41bc 504700BF 		_NEST 
 3102 41c0 7B250000 		_COMPI DOLOOP
 3102      88410000 
 3102      7D450000 
 3103 41cc 19400000 		_ADR COMMA 
 3104 41d0 03240000 		_UNNEST 
 3105              	
 3106              	
 3107              	/**********************
 3108              	    BEGIN	( -- a )
 3109              	 	Start an infinite 
 3110              		or indefinite 
 3111              		loop structure.
 3112              	************************/
 3113 41d4 B4410000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3113      C5424547 
 3113      494E00BF 
 3114 41e0 504700BF 		_NEST
 3115 41e4 D92F0000 		_ADR	HERE
 3116 41e8 03240000 		_UNNEST
 3117              		.p2align 2 
 3118              	
 3119              	/********************
 3120              	    NEXT	( a -- )
 3121              	 	Terminate a FOR-NEXT
 3122              		loop structure.
 3123              	**************************/
 3124 41ec D8410000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
ARM GAS  forth.s 			page 150


 3124      C44E4558 
 3124      540000BF 
 3125 41f8 504700BF 		_NEST
 3126 41fc 7B250000 		_COMPI	DONXT
 3126      9C250000 
 3126      7D450000 
 3127 4208 19400000 		_ADR	COMMA
 3128 420c 03240000 		_UNNEST
 3129              	
 3130              	/***************************
 3131              		I ( -- n )
 3132              		stack for loop counter 
 3133              	***************************/
 3134 4210 F0410000 		_HEADER I,1+COMPO,"I"
 3134      414900BF 
 3135 4218 47F8046D 		_PUSH 
 3136 421c D8F80060 		ldr TOS,[RSP]
 3137 4220 FEF7ECB8 		_NEXT 
 3138              	
 3139              	/****************************
 3140              		J ( -- n )
 3141              		stack outer loop counter 
 3142              	****************************/
 3143 4224 14420000 		_HEADER J,1,"J"
 3143      014A00BF 
 3144 422c 47F8046D 		_PUSH 
 3145 4230 D8F80460 		ldr TOS,[RSP,#4]
 3146 4234 FEF7E2B8 		_NEXT 
 3147              	
 3148              	/**********************
 3149              	    UNTIL	( a -- )
 3150              	 	Terminate a BEGIN-UNTIL
 3151              		indefinite loop structure.
 3152              	******************************/
 3153 4238 28420000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3153      C5554E54 
 3153      494C00BF 
 3154 4244 504700BF 		_NEST
 3155 4248 7B250000 		_COMPI	QBRAN
 3155      BA250000 
 3155      7D450000 
 3156 4254 19400000 		_ADR	COMMA
 3157 4258 03240000 		_UNNEST
 3158              	
 3159              	/**********************
 3160              	    AGAIN	( a -- )
 3161              	 	Terminate a BEGIN-AGAIN
 3162              		infinite loop structure.
 3163              	*****************************/
 3164 425c 3C420000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3164      C5414741 
 3164      494E00BF 
 3165 4268 504700BF 		_NEST
 3166 426c 7B250000 		_COMPI	BRAN
 3166      CE250000 
 3166      7D450000 
 3167 4278 19400000 		_ADR	COMMA
ARM GAS  forth.s 			page 151


 3168 427c 03240000 		_UNNEST
 3169              	
 3170              	/************************
 3171              	    IF	  ( -- A )
 3172              	 	Begin a conditional
 3173              		branch structure.
 3174              	**************************/
 3175 4280 60420000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3175      C2494600 
 3176 4288 504700BF 		_NEST
 3177 428c 7B250000 		_COMPI	QBRAN
 3177      BA250000 
 3177      7D450000 
 3178 4298 D92F0000 		_ADR	HERE
 3179 429c 7B250000 		_DOLIT	4
 3179      04000000 
 3180 42a4 052C0000 		_ADR	CPP
 3181 42a8 892A0000 		_ADR	PSTOR
 3182 42ac 03240000 		_UNNEST
 3183              	
 3184              	/*************************
 3185              	    AHEAD	( -- A )
 3186              	 	Compile a forward 
 3187              		branch instruction.
 3188              	*************************/
 3189 42b0 84420000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3189      C5414845 
 3189      414400BF 
 3190 42bc 504700BF 		_NEST
 3191 42c0 7B250000 		_COMPI	BRAN
 3191      CE250000 
 3191      7D450000 
 3192 42cc D92F0000 		_ADR	HERE
 3193 42d0 7B250000 		_DOLIT	4
 3193      04000000 
 3194 42d8 052C0000 		_ADR	CPP
 3195 42dc 892A0000 		_ADR	PSTOR
 3196 42e0 03240000 		_UNNEST
 3197              	
 3198              	/**************************
 3199              	    REPEAT	( A a -- )
 3200              	 	Terminate a BEGIN-WHILE-REPEAT
 3201              		indefinite loop.
 3202              	**********************************/
 3203 42e4 B4420000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3203      C6524550 
 3203      45415400 
 3204 42f0 504700BF 		_NEST
 3205 42f4 69420000 		_ADR	AGAIN
 3206 42f8 D92F0000 		_ADR	HERE
 3207 42fc BD260000 		_ADR	SWAP
 3208 4300 ED250000 		_ADR	STORE
 3209 4304 03240000 		_UNNEST
 3210              	
 3211              	/*********************
 3212              	    THEN	( A -- )
 3213              	 	Terminate a conditional
ARM GAS  forth.s 			page 152


 3214              		branch structure.
 3215              	*****************************/
 3216 4308 E8420000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3216      C4544845 
 3216      4E0000BF 
 3217 4314 504700BF 		_NEST
 3218 4318 D92F0000 		_ADR	HERE
 3219 431c BD260000 		_ADR	SWAP
 3220 4320 ED250000 		_ADR	STORE
 3221 4324 03240000 		_UNNEST
 3222              	
 3223              	/***************************
 3224              	    AFT	 ( a -- a A )
 3225              	 	Jump to THEN in a 
 3226              		FOR-AFT-THEN-NEXT loop 
 3227              		the first time through.
 3228              	*****************************/
 3229 4328 0C430000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3229      C3414654 
 3230 4330 504700BF 		_NEST
 3231 4334 9D260000 		_ADR	DROP
 3232 4338 BD420000 		_ADR	AHEAD
 3233 433c E1410000 		_ADR	BEGIN
 3234 4340 BD260000 		_ADR	SWAP
 3235 4344 03240000 		_UNNEST
 3236              	
 3237              	/**********************
 3238              	    ELSE	( A -- A )
 3239              	 	Start the false 
 3240              		clause in an 
 3241              		IF-ELSE-THEN structure.
 3242              	****************************/
 3243 4348 2C430000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3243      C4454C53 
 3243      450000BF 
 3244 4354 504700BF 		_NEST
 3245 4358 BD420000 		_ADR	AHEAD
 3246 435c BD260000 		_ADR	SWAP
 3247 4360 15430000 		_ADR	THENN
 3248 4364 03240000 		_UNNEST
 3249              	
 3250              	/**************************
 3251              	    WHILE	( a -- A a )
 3252              	 	Conditional branch out 
 3253              		of a BEGIN-WHILE-REPEAT loop.
 3254              	*********************************/
 3255 4368 4C430000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3255      C5574849 
 3255      4C4500BF 
 3256 4374 504700BF 		_NEST
 3257 4378 89420000 		_ADR	IFF
 3258 437c BD260000 		_ADR	SWAP
 3259 4380 03240000 		_UNNEST
 3260              	
 3261              	/***********************************
 3262              	    ABORT"	( -- //  string> )
 3263              	 	Conditional abort with an 
ARM GAS  forth.s 			page 153


 3264              		error message.
 3265              	***********************************/
 3266 4384 6C430000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3266      8641424F 
 3266      52542200 
 3267 4390 504700BF 		_NEST
 3268 4394 7B250000 		_COMPI	ABORQ
 3268      DC3D0000 
 3268      7D450000 
 3269 43a0 B5400000 		_ADR	STRCQ
 3270 43a4 03240000 		_UNNEST
 3271              	
 3272              	/******************************
 3273              	    $"	( -- //  string> )
 3274              	 	Compile an inline 
 3275              		word literal.
 3276              	*****************************/
 3277 43a8 88430000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3277      C2242200 
 3278 43b0 504700BF 		_NEST
 3279 43b4 7B250000 		_COMPI	STRQP
 3279      F8350000 
 3279      7D450000 
 3280 43c0 B5400000 		_ADR	STRCQ
 3281 43c4 03240000 		_UNNEST
 3282              	
 3283              	/******************************
 3284              	    ."	( -- //  string> )
 3285              	 	Compile an inline word
 3286              		literal to be typed out 
 3287              		at run time.
 3288              	*******************************/
 3289 43c8 AC430000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3289      C22E2200 
 3290 43d0 504700BF 		_NEST
 3291 43d4 7B250000 		_COMPI	DOTQP
 3291      14360000 
 3291      7D450000 
 3292 43e0 B5400000 		_ADR	STRCQ
 3293 43e4 03240000 		_UNNEST
 3294              	
 3295              	/*********************
 3296              	  Name compiler
 3297              	***********************/
 3298              	
 3299              	/**************************
 3300              	    ?UNIQUE	( a -- a )
 3301              	 	Display a warning 
 3302              		message if the word 
 3303              		already exists.
 3304              	**************************/
 3305 43e8 CC430000 		_HEADER UNIQU,7,"?UNIQUE"
 3305      073F554E 
 3305      49515545 
 3306 43f4 504700BF 		_NEST
 3307 43f8 AD260000 		_ADR	DUPP
 3308 43fc 3D3B0000 		_ADR	NAMEQ			// ?name exists
ARM GAS  forth.s 			page 154


 3309 4400 BB250000 		_QBRAN	UNIQ1	// redefinitions are OK
 3309      20440000 
 3310 4408 15360000 		_DOTQP	7," reDef "		// but warn the user
 3310      07207265 
 3310      44656620 
 3311 4414 D1260000 		_ADR	OVER
 3312 4418 D12A0000 		_ADR	COUNT
 3313 441c 79350000 		_ADR	TYPEE			// just in case its not planned
 3314              	UNIQ1:
 3315 4420 9D260000 		_ADR	DROP
 3316 4424 03240000 		_UNNEST
 3317              	
 3318              	/***********************
 3319              	    $,n	 ( na -- )
 3320              	 	Build a new dictionary 
 3321              		name using the data at na.
 3322              	hidden word 
 3323              	*******************************/
 3324              	SNAME:
 3325 4428 504700BF 		_NEST
 3326 442c AD260000 		_ADR	DUPP			//  na na
 3327 4430 21260000 		_ADR	CAT			//  ?null input
 3328 4434 BB250000 		_QBRAN	SNAM1
 3328      70440000 
 3329 443c F5430000 		_ADR	UNIQU			//  na
 3330 4440 312C0000 		_ADR	LAST			//  na last
 3331 4444 01260000 		_ADR	AT			//  na la
 3332 4448 19400000 		_ADR	COMMA			//  na
 3333 444c AD260000 		_ADR	DUPP			//  na na
 3334 4450 312C0000 		_ADR	LAST			//  na na last
 3335 4454 ED250000 		_ADR	STORE			//  na , save na for vocabulary link
 3336 4458 D12A0000 		_ADR	COUNT			//  na+1 count
 3337 445c 71270000 		_ADR	PLUS			//  na+1+count
 3338 4460 252F0000 		_ADR	ALGND			//  word boundary
 3339 4464 052C0000 		_ADR	CPP
 3340 4468 ED250000 		_ADR	STORE			//  top of dictionary now
 3341 446c 03240000 		_UNNEST
 3342              	SNAM1:
 3343 4470 F9350000 		_ADR	STRQP
 3344 4474 07       		.byte	7
 3345 4475 206E616D 		.ascii " name? "
 3345      653F20
 3346 447c B13D0000 		_ADR	ABORT
 3347              	
 3348              	/************************
 3349              	    $COMPILE	( a -- )
 3350              	 	Compile next word to 
 3351              		code dictionary as 
 3352              		a token or literal.
 3353              	**************************/
 3354 4480 EC430000 		_HEADER SCOMP,8,"$COMPILE"
 3354      0824434F 
 3354      4D50494C 
 3354      450000BF 
 3355 4490 504700BF 		_NEST
 3356 4494 3D3B0000 		_ADR	NAMEQ
 3357 4498 81280000 		_ADR	QDUP	// defined?
ARM GAS  forth.s 			page 155


 3358 449c BB250000 		_QBRAN	SCOM2
 3358      CC440000 
 3359 44a4 01260000 		_ADR	AT
 3360 44a8 7B250000 		_DOLIT	IMEDD
 3360      80000000 
 3361 44b0 F1260000 		_ADR	ANDD	// immediate?
 3362 44b4 BB250000 		_QBRAN	SCOM1
 3362      C4440000 
 3363 44bc 91250000 		_ADR	EXECU
 3364 44c0 03240000 		_UNNEST			// it's immediate, execute
 3365              	SCOM1:
 3366 44c4 7D450000 		_ADR	CALLC			// it's not immediate, compile
 3367 44c8 03240000 		_UNNEST	
 3368              	SCOM2:
 3369 44cc D5230000 		_ADR	NUMBER 
 3370 44d0 BB250000 		_QBRAN	SCOM3
 3370      E0440000 
 3371 44d8 9D400000 		_ADR	LITER
 3372 44dc 03240000 		_UNNEST			// compile number as integer
 3373              	SCOM3: // compilation abort 
 3374 44e0 E9440000 		_ADR COLON_ABORT 
 3375 44e4 B13D0000 		_ADR	ABORT			// error
 3376              	
 3377              	/********************************
 3378              	 before aborting a compilation 
 3379              	 reset HERE and LAST
 3380              	 to previous values. 
 3381              	*******************************/
 3382              	COLON_ABORT:
 3383 44e8 504700BF 		_NEST 
 3384 44ec 312C0000 		_ADR LAST 
 3385 44f0 01260000 		_ADR AT 
 3386 44f4 1D280000 		_ADR CELLM 
 3387 44f8 AD260000 		_ADR DUPP 
 3388 44fc 052C0000 		_ADR CPP  
 3389 4500 ED250000 		_ADR STORE 
 3390 4504 01260000 		_ADR AT 
 3391 4508 312C0000 		_ADR LAST 
 3392 450c ED250000 		_ADR STORE 
 3393 4510 03240000 		_UNNEST 
 3394              	
 3395              	/*********************
 3396              	    OVERT	( -- )
 3397              	 	Link a new word 
 3398              		into the current 
 3399              		vocabulary.
 3400              	**********************/
 3401 4514 84440000 		_HEADER OVERT,5,"OVERT"
 3401      054F5645 
 3401      525400BF 
 3402 4520 504700BF 		_NEST
 3403 4524 312C0000 		_ADR	LAST
 3404 4528 01260000 		_ADR	AT
 3405 452c F12B0000 		_ADR	CNTXT
 3406 4530 ED250000 		_ADR	STORE
 3407 4534 03240000 		_UNNEST
 3408              	
ARM GAS  forth.s 			page 156


 3409              	/**********************
 3410              	    ;  ( -- )
 3411              	 	Terminate a colon
 3412              		definition.
 3413              	***********************/
 3414 4538 18450000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3414      C13B00BF 
 3415 4540 504700BF 		_NEST
 3416 4544 7B250000 		_DOLIT	UNNEST
 3416      02240000 
 3417 454c 7D450000 		_ADR	CALLC
 3418 4550 6D3E0000 		_ADR	LBRAC
 3419 4554 21450000 		_ADR	OVERT
 3420 4558 03240000 		_UNNEST
 3421              	
 3422              	/******************
 3423              	    ]	   ( -- )
 3424              	 	Start compiling 
 3425              		the words in 
 3426              		the input stream.
 3427              	*********************/
 3428 455c 3C450000 		_HEADER RBRAC,1,"]"
 3428      015D00BF 
 3429 4564 504700BF 		_NEST
 3430 4568 7B250000 		_DOLIT	SCOMP
 3430      90440000 
 3431 4570 C52B0000 		_ADR	TEVAL
 3432 4574 ED250000 		_ADR	STORE
 3433 4578 03240000 		_UNNEST
 3434              	
 3435              	/*********************
 3436              	    BL.W	( ca -- )
 3437              	 	compile ca.
 3438              	hidden word used by compiler
 3439              	*****************************/
 3440              	CALLC:
 3441 457c 504700BF 		_NEST
 3442 4580 7B250000 		_DOLIT 1 
 3442      01000000 
 3443 4588 05270000 		_ADR ORR 
 3444 458c 19400000 		_ADR COMMA  
 3445 4590 03240000 		_UNNEST 
 3446              	
 3447              	
 3448              	/*************************
 3449              	 	:	( -- //  string> )
 3450              	 	Start a new colon 
 3451              		definition using 
 3452              		next word as its name.
 3453              	**************************/
 3454 4594 60450000 		_HEADER COLON,1,":"
 3454      013A00BF 
 3455 459c 504700BF 		_NEST
 3456 45a0 B5390000 		_ADR	TOKEN
 3457 45a4 29440000 		_ADR	SNAME
 3458 45a8 0D240000 		_ADR	COMPI_NEST 
 3459 45ac 65450000 		_ADR	RBRAC
ARM GAS  forth.s 			page 157


 3460 45b0 03240000 		_UNNEST
 3461              	
 3462              	/*************************
 3463              	    IMMEDIATE   ( -- )
 3464              	 	Make the last compiled 
 3465              		word an immediate word.
 3466              	***************************/
 3467 45b4 98450000 		_HEADER IMMED,9,"IMMEDIATE"
 3467      09494D4D 
 3467      45444941 
 3467      544500BF 
 3468 45c4 504700BF 		_NEST
 3469 45c8 7B250000 		_DOLIT	IMEDD
 3469      80000000 
 3470 45d0 312C0000 		_ADR	LAST
 3471 45d4 01260000 		_ADR	AT
 3472 45d8 01260000 		_ADR	AT
 3473 45dc 05270000 		_ADR	ORR
 3474 45e0 312C0000 		_ADR	LAST
 3475 45e4 01260000 		_ADR	AT
 3476 45e8 ED250000 		_ADR	STORE
 3477 45ec 03240000 		_UNNEST
 3478              	
 3479              	/******************
 3480              	  Defining words
 3481              	******************/
 3482              	
 3483              	/***********************************
 3484              	    CONSTANT	( u -- //  string> )
 3485              	 	Compile a new constant.
 3486              	************************************/
 3487 45f0 B8450000 		_HEADER CONST,8,"CONSTANT"
 3487      08434F4E 
 3487      5354414E 
 3487      540000BF 
 3488 4600 504700BF 		_NEST 
 3489 4604 B5390000 		_ADR	TOKEN
 3490 4608 29440000 		_ADR	SNAME
 3491 460c 21450000 		_ADR	OVERT
 3492 4610 0D240000 		_ADR	COMPI_NEST
 3493 4614 7B250000 		_DOLIT	DOCON
 3493      042B0000 
 3494 461c 7D450000 		_ADR	CALLC
 3495 4620 19400000 		_ADR	COMMA
 3496 4624 7B250000 		_DOLIT	UNNEST 
 3496      02240000 
 3497 462c 7D450000 		_ADR	CALLC  
 3498 4630 03240000 		_UNNEST
 3499              	
 3500              		.p2align 2 
 3501              	/****************************************
 3502              	 doDOES> ( -- a )
 3503              	 runtime action of DOES> 
 3504              	 leave parameter field address on stack 
 3505              	hidden word used by compiler 
 3506              	***************************************/
 3507              	DODOES:
ARM GAS  forth.s 			page 158


 3508 4634 504700BF 		_NEST 
 3509 4638 2D260000 		_ADR	RFROM
 3510 463c 0D280000 		_ADR	CELLP 
 3511 4640 CD270000 		_ADR	ONEP  
 3512 4644 312C0000 		_ADR LAST 
 3513 4648 01260000 		_ADR AT
 3514 464c D5390000 		_ADR NAMET 
 3515 4650 0D280000 		_ADR CELLP 
 3516 4654 ED250000 		_ADR STORE  
 3517 4658 03240000 		_UNNEST 
 3518              	
 3519              		.p2align 2
 3520              	/**********************
 3521              	  DOES> ( -- )
 3522              	  compile time action
 3523              	*************************/
 3524 465c F4450000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3524      C5444F45 
 3524      533E00BF 
 3525 4668 504700BF 		_NEST 
 3526 466c 7B250000 		_DOLIT DODOES 
 3526      34460000 
 3527 4674 7D450000 		_ADR CALLC 
 3528 4678 7B250000 		_DOLIT	UNNEST
 3528      02240000 
 3529 4680 7D450000 		_ADR	CALLC 
 3530 4684 0D240000 		_ADR COMPI_NEST
 3531 4688 7B250000 		_DOLIT RFROM 
 3531      2C260000 
 3532 4690 7D450000 		_ADR	CALLC
 3533 4694 03240000 		_UNNEST 
 3534              	
 3535              	
 3536              	/****************************
 3537              	  DEFER@ ( "name" -- a )
 3538              	  return value of code field 
 3539              	  of defered function. 
 3540              	******************************/
 3541 4698 60460000 		_HEADER DEFERAT,6,"DEFER@"
 3541      06444546 
 3541      45524000 
 3542 46a4 504700BF 		_NEST 
 3543 46a8 D93F0000 		_ADR TICK
 3544 46ac 0D280000 		_ADR CELLP 
 3545 46b0 01260000 		_ADR AT 
 3546 46b4 DD270000 		_ADR ONEM 
 3547 46b8 03240000 		_UNNEST 
 3548              	
 3549              	/*********************************
 3550              	 DEFER! ( "name1" "name2" -- )
 3551              	 assign an action to a defered word 
 3552              	************************************/
 3553 46bc 9C460000 		_HEADER DEFERSTO,6,"DEFER!"
 3553      06444546 
 3553      45522100 
 3554 46c8 504700BF 		_NEST 
 3555 46cc D93F0000 		_ADR TICK 
ARM GAS  forth.s 			page 159


 3556 46d0 CD270000 		_ADR ONEP 
 3557 46d4 D93F0000 		_ADR TICK 
 3558 46d8 0D280000 		_ADR CELLP 
 3559 46dc ED250000 		_ADR STORE 
 3560 46e0 03240000 		_UNNEST
 3561              	
 3562              	/****************************
 3563              	  DEFER ( "name" -- )
 3564              	  create a defered definition
 3565              	*****************************/
 3566 46e4 C0460000 		_HEADER DEFER,5,"DEFER"
 3566      05444546 
 3566      455200BF 
 3567 46f0 504700BF 		_NEST 
 3568 46f4 41470000 		_ADR CREAT 
 3569 46f8 7B250000 		_DOLIT UNNEST 
 3569      02240000 
 3570 4700 7D450000 		_ADR CALLC 
 3571 4704 7B250000 		_DOLIT DEFER_NOP
 3571      28470000 
 3572 470c CD270000 		_ADR ONEP 
 3573 4710 312C0000 		_ADR LAST 
 3574 4714 01260000 		_ADR AT 
 3575 4718 D5390000 		_ADR NAMET 
 3576 471c 0D280000 		_ADR CELLP 
 3577 4720 ED250000 		_ADR STORE 
 3578 4724 03240000 		_UNNEST 
 3579              	DEFER_NOP:
 3580 4728 504700BF 		_NEST  
 3581 472c 79250000 		_ADR NOP 
 3582 4730 03240000 		_UNNEST 
 3583              	
 3584              	/******************************
 3585              	    CREATE	( -- //  string> )
 3586              	 	Compile a new array entry 
 3587              		without allocating code space.
 3588              	***********************************/
 3589 4734 E8460000 		_HEADER CREAT,6,"CREATE"
 3589      06435245 
 3589      41544500 
 3590 4740 504700BF 		_NEST 
 3591 4744 B5390000 		_ADR	TOKEN
 3592 4748 29440000 		_ADR	SNAME
 3593 474c 21450000 		_ADR	OVERT
 3594 4750 0D240000 		_ADR	COMPI_NEST 
 3595 4754 7B250000 		_DOLIT	DOVAR
 3595      F82A0000 
 3596 475c 7D450000 		_ADR	CALLC
 3597 4760 03240000 		_UNNEST
 3598              	
 3599              	/*******************************
 3600              	    VARIABLE	( -- //  string> )
 3601              	 	Compile a new variable 
 3602              		initialized to 0.
 3603              	***********************************/
 3604 4764 38470000 		_HEADER VARIA,8,"VARIABLE"
 3604      08564152 
ARM GAS  forth.s 			page 160


 3604      4941424C 
 3604      450000BF 
 3605 4774 504700BF 		_NEST
 3606 4778 41470000 		_ADR	CREAT
 3607 477c 7B250000 		_DOLIT	0
 3607      00000000 
 3608 4784 19400000 		_ADR	COMMA
 3609 4788 7B250000 		_DOLIT UNNEST
 3609      02240000 
 3610 4790 7D450000 		_ADR	CALLC  
 3611 4794 03240000 		_UNNEST
 3612              	
 3613              	/***********
 3614              	  Tools
 3615              	***********/
 3616              	
 3617              	/*************************
 3618              	    dm+	 ( a u -- a )
 3619              	 	Dump u bytes from , 
 3620              		leaving a+u on the stack.
 3621              	hidden word used by DUMP 
 3622              	****************************/
 3623              	DMP:
 3624 4798 504700BF 		_NEST
 3625 479c D1260000 		_ADR	OVER
 3626 47a0 7B250000 		_DOLIT	4
 3626      04000000 
 3627 47a8 59360000 		_ADR	UDOTR			// display address
 3628 47ac 25350000 		_ADR	SPACE
 3629 47b0 55260000 		_ADR	TOR			// start count down loop
 3630 47b4 CF250000 		_BRAN	PDUM2			// skip first pass
 3630      D4470000 
 3631              	PDUM1:
 3632 47bc AD260000 	  _ADR	DUPP
 3633 47c0 21260000 		_ADR	CAT
 3634 47c4 7B250000 		_DOLIT	3
 3634      03000000 
 3635 47cc 59360000 		_ADR	UDOTR			// display numeric data
 3636 47d0 CD270000 		_ADR	ONEP			// increment address
 3637              	PDUM2:
 3638 47d4 9D250000 	  _ADR	DONXT
 3639 47d8 BC470000 		.word	PDUM1	// loop till done
 3640 47dc 03240000 		_UNNEST
 3641              		.p2align 2 
 3642              	//    DUMP	( a u -- )
 3643              	// 	Dump u bytes from a, in a formatted manner.
 3644              	
 3645              	/**********************
 3646              		DUMP ( a n -- )
 3647              		hex dump memory 
 3648              	*********************/
 3649 47e0 68470000 		_HEADER DUMP,4,"DUMP"
 3649      0444554D 
 3649      500000BF 
 3650 47ec 504700BF 		_NEST
 3651 47f0 692B0000 		_ADR	BASE
 3652 47f4 01260000 		_ADR	AT
ARM GAS  forth.s 			page 161


 3653 47f8 55260000 		_ADR	TOR
 3654 47fc BD320000 		_ADR	HEX			// save radix,set hex
 3655 4800 7B250000 		_DOLIT	16
 3655      10000000 
 3656 4808 C52E0000 		_ADR	SLASH			// change count to lines
 3657 480c 55260000 		_ADR	TOR
 3658 4810 CF250000 		_BRAN	DUMP4			// start count down loop
 3658      40480000 
 3659              	DUMP1:
 3660 4818 AD350000 	  _ADR	CR
 3661 481c 7B250000 		_DOLIT	16
 3661      10000000 
 3662 4824 E5280000 		_ADR	DDUP
 3663 4828 99470000 		_ADR	DMP			// display numeric
 3664 482c 95280000 		_ADR	ROT
 3665 4830 95280000 		_ADR	ROT
 3666 4834 25350000 		_ADR	SPACE
 3667 4838 25350000 		_ADR	SPACE
 3668 483c 79350000 		_ADR	TYPEE			// display printable characters
 3669              	DUMP4:
 3670 4840 9D250000 	  _DONXT	DUMP1	// loop till done
 3670      18480000 
 3671              	DUMP3:
 3672 4848 9D260000 		_ADR	DROP
 3673 484c 2D260000 		_ADR	RFROM
 3674 4850 692B0000 		_ADR	BASE
 3675 4854 ED250000 		_ADR	STORE			// restore radix
 3676 4858 03240000 		_UNNEST
 3677              	
 3678              	/*******************************
 3679              	   TRACE. display in hexadecimal
 3680              	   TRACE. use a different buffer 
 3681              	   than DOT  to avoid current 
 3682              	   display overwrite.
 3683              	*******************************/ 
 3684              	TDOT: // ( u -- )
 3685 485c 504700BF 		_NEST 
 3686 4860 692B0000 		_ADR BASE 
 3687 4864 01260000 		_ADR AT 
 3688 4868 55260000 		_ADR TOR
 3689 486c BD320000 		_ADR HEX  
 3690 4870 D92B0000 		_ADR HLD 
 3691 4874 01260000 		_ADR AT 
 3692 4878 55260000 		_ADR TOR   // R: base *hold 
 3693 487c D92F0000 		_ADR HERE 
 3694 4880 7B250000 		_DOLIT 160 
 3694      A0000000 
 3695 4888 71270000 		_ADR PLUS
 3696 488c AD260000 		_ADR DUPP 
 3697 4890 55260000 		_ADR TOR  
 3698 4894 D92B0000 		_ADR HLD 
 3699 4898 ED250000 		_ADR STORE
 3700 489c 652D0000 		_ADR STOD 
 3701 48a0 0D320000 		_ADR DIGS  
 3702 48a4 9D260000 		_ADR DROP
 3703 48a8 7B250000 		_DOLIT '$'
 3703      24000000 
ARM GAS  forth.s 			page 162


 3704 48b0 C1310000 		_ADR HOLD 
 3705 48b4 D92B0000 		_ADR HLD 
 3706 48b8 01260000 		_ADR AT
 3707 48bc 2D260000 		_ADR RFROM   
 3708 48c0 D1260000 		_ADR OVER 
 3709 48c4 81270000 		_ADR SUBB 
 3710 48c8 25350000 		_ADR SPACE 
 3711 48cc 79350000 		_ADR TYPEE 
 3712 48d0 2D260000 		_ADR RFROM 
 3713 48d4 D92B0000 		_ADR HLD 
 3714 48d8 ED250000 		_ADR STORE 
 3715 48dc 2D260000 		_ADR RFROM 
 3716 48e0 692B0000 		_ADR BASE 
 3717 48e4 ED250000 		_ADR STORE 
 3718 48e8 03240000 		_UNNEST 
 3719              	
 3720              	/**********************
 3721              	   .S	  ( ... -- ... )
 3722              	 	Display the contents 
 3723              		of the data stack.
 3724              	*************************/
 3725 48ec E4470000 		_HEADER DOTS,2,".S"
 3725      022E5300 
 3726 48f4 504700BF 		_NEST
 3727 48f8 8D2F0000 		_ADR	DEPTH	// stack depth
 3728 48fc 55260000 		_ADR	TOR		// start count down loop
 3729 4900 CF250000 		_BRAN	DOTS2  // skip first pass
 3729      14490000 
 3730              	DOTS1:
 3731 4908 41260000 		_ADR	RAT
 3732 490c B12F0000 		_ADR	PICK
 3733 4910 5D480000 		_ADR	TDOT // index stack, display contents
 3734              	DOTS2:
 3735 4914 9D250000 		_DONXT	DOTS1 // loop till done
 3735      08490000 
 3736 491c AD350000 		_ADR	CR 
 3737 4920 03240000 		_UNNEST
 3738              	
 3739              	RPAT: 
 3740 4924 47F8046D 		_PUSH 
 3741 4928 4646     		mov TOS,RSP 
 3742 492a FDF767BD 		_NEXT 
 3743              	
 3744              	RBASE: 
 3745 492e 47F8046D 		_PUSH 
 3746 4932 4FF68076 		_MOV32 TOS,RPP 
 3746      C2F20106 
 3747 493a FDF75FBD 		_NEXT 
 3748              	
 3749              	
 3750              	/**************************
 3751              	  R.  display return stack 
 3752              	**************************/
 3753              	RDOT: 
 3754 493e 504700BF 		_NEST 
 3755 4942 2F490000 		_ADR RBASE
 3756 4946 25490000 		_ADR RPAT 
ARM GAS  forth.s 			page 163


 3757 494a 81270000 		_ADR SUBB
 3758 494e 51280000 		_ADR CELLSL   
 3759 4952 7B250000 		_DOLIT 2
 3759      02000000 
 3760 495a 81270000 		_ADR SUBB 
 3761 495e 55260000 		_ADR TOR
 3762 4962 2F490000 		_ADR RBASE 
 3763 4966 1D280000 	1:	_ADR CELLM 
 3764 496a AD260000 		_ADR DUPP 
 3765 496e 01260000 		_ADR AT 
 3766 4972 5D480000 		_ADR TDOT 
 3767 4976 2D260000 		_ADR RFROM   
 3768 497a DD270000 		_ADR ONEM 
 3769 497e AD260000 		_ADR DUPP
 3770 4982 55260000 		_ADR TOR 
 3771 4986 B5290000 		_ADR ZEQUAL   
 3772 498a BB250000 		_QBRAN 1b
 3772      66490000 
 3773 4992 2D260000 		_ADR RFROM  
 3774 4996 9D260000 		_ADR DROP
 3775 499a AD350000 		_ADR CR   
 3776 499e 03240000 		_UNNEST 
 3777              	
 3778              	/**************************
 3779              		TRACE ( -- )
 3780              		display stacks content 
 3781              	**************************/
 3782 49a2 F0480000 		_HEADER TRACE,5,"TRACE"
 3782      05545241 
 3782      4345
 3783 49ac 504700BF 		_NEST
 3784 49b0 AD350000 		_ADR CR 
 3785 49b4 7B250000 		_DOLIT '>' 
 3785      3E000000 
 3786 49bc 7B250000 		_DOLIT 'S'
 3786      53000000 
 3787 49c4 85240000 		_ADR EMIT 
 3788 49c8 85240000 		_ADR EMIT  
 3789 49cc F5480000 		_ADR DOTS
 3790 49d0 7B250000 		_DOLIT '>'
 3790      3E000000 
 3791 49d8 7B250000 		_DOLIT 'R'
 3791      52000000 
 3792 49e0 85240000 		_ADR EMIT 
 3793 49e4 85240000 		_ADR EMIT 
 3794 49e8 3F490000 		_ADR RDOT 
 3795 49ec 03240000 		_UNNEST 
 3796              	
 3797              	
 3798              	/*****************************
 3799              	    >NAME	( ca -- na | F )
 3800              	 	Convert code address 
 3801              		to a name address.
 3802              	*****************************/
 3803 49f0 A6490000 		_HEADER TNAME,5,">NAME"
 3803      053E4E41 
 3803      4D4500BF 
ARM GAS  forth.s 			page 164


 3804 49fc 504700BF 		_NEST
 3805 4a00 55260000 		_ADR	TOR			//  
 3806 4a04 F12B0000 		_ADR	CNTXT			//  va
 3807 4a08 01260000 		_ADR	AT			//  na
 3808              	TNAM1:
 3809 4a0c AD260000 		_ADR	DUPP			//  na na
 3810 4a10 BB250000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3810      404A0000 
 3811 4a18 AD260000 		_ADR	DUPP			//  na na
 3812 4a1c D5390000 		_ADR	NAMET			//  na ca
 3813 4a20 41260000 		_ADR	RAT			//  na ca code
 3814 4a24 19270000 		_ADR	XORR			//  na f --
 3815 4a28 BB250000 		_QBRAN	TNAM2
 3815      404A0000 
 3816 4a30 1D280000 		_ADR	CELLM			//  la 
 3817 4a34 01260000 		_ADR	AT			//  next_na
 3818 4a38 CF250000 		_BRAN	TNAM1
 3818      0C4A0000 
 3819              	TNAM2:	
 3820 4a40 2D260000 		_ADR	RFROM
 3821 4a44 9D260000 		_ADR	DROP			//  0|na --
 3822 4a48 03240000 		_UNNEST			// 0
 3823              	
 3824              	/********************************
 3825              	    .ID	 ( na -- )
 3826              	 	Display the name at address.
 3827              	********************************/
 3828 4a4c F4490000 		_HEADER DOTID,3,".ID"
 3828      032E4944 
 3829 4a54 504700BF 		_NEST
 3830 4a58 81280000 		_ADR	QDUP			// if zero no name
 3831 4a5c BB250000 		_QBRAN	DOTI1
 3831      7C4A0000 
 3832 4a64 D12A0000 		_ADR	COUNT
 3833 4a68 7B250000 		_DOLIT	0x1F
 3833      1F000000 
 3834 4a70 F1260000 		_ADR	ANDD			// mask lexicon bits
 3835 4a74 79350000 		_ADR	TYPEE
 3836 4a78 03240000 		_UNNEST			// display name string
 3837              	DOTI1:
 3838 4a7c 15360000 		_DOTQP	9," {noName}"
 3838      09207B6E 
 3838      6F4E616D 
 3838      657D00BF 
 3839 4a8c 03240000 		_UNNEST
 3840              	
 3841              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3842              	.if WANT_SEE 
 3843              	/*******************************
 3844              	    SEE	 ( -- //  string> )
 3845              	 	A simple decompiler.
 3846              	*******************************/
 3847              		_HEADER SEE,3,"SEE"
 3848              		_NEST
 3849              		_ADR	TICK	//  ca --, starting address
 3850              		_ADR	CR	
 3851              		_DOLIT	20
ARM GAS  forth.s 			page 165


 3852              		_ADR	TOR
 3853              	SEE1:
 3854              		_ADR	CELLP			//  a
 3855              		_ADR	DUPP			//  a a
 3856              		_ADR	DECOMP		//  a
 3857              		_DONXT	SEE1
 3858              		_ADR	DROP
 3859              		_UNNEST
 3860              	
 3861              	/*************************
 3862              	 	DECOMPILE ( a -- )
 3863              	 	Convert code in a.  
 3864              		Display name of command or as data.
 3865              	*************************************/
 3866              		_HEADER DECOMP,9,"DECOMPILE"
 3867              		_NEST
 3868              		_ADR	DUPP			//  a a
 3869              	// 	_ADR	TOR			//  a
 3870              		_ADR	AT			//  a code
 3871              		_ADR	DUPP			//  a code code
 3872              		_DOLIT	0xF800D000 //0xF800F800
 3873              		_ADR	ANDD
 3874              		_DOLIT	0xF000D000 //0xF800F000
 3875              		_ADR	EQUAL			//  a code ?
 3876              		_ADR	INVER 
 3877              		_QBRAN	DECOM2	//  not a command
 3878              		//  a valid_code --, extract address and display name
 3879              		MOVW	IP,#0xFFE
 3880              		MOV	WP,TOS
 3881              		LSL	TOS,TOS,#21		//  get bits 22-12
 3882              		ASR	TOS,TOS,#9		//  with sign extension
 3883              		LSR	WP,WP,#15		//  get bits 11-1
 3884              		AND	WP,WP,IP		//  retain only bits 11-1
 3885              		ORR	TOS,TOS,WP		//  get bits 22-1
 3886              		NOP
 3887              		_ADR	OVER			//  a offset a
 3888              		_ADR	PLUS			//  a target-4
 3889              		_ADR	CELLP			//  a target
 3890              		_ADR	TNAME			//  a na/0 --, is it a name?
 3891              		_ADR	QDUP			//  name address or zero
 3892              		_QBRAN	DECOM1
 3893              		_ADR	SPACE			//  a na
 3894              		_ADR	DOTID			//  a --, display name
 3895              	// 	_ADR	RFROM			//  a
 3896              		_ADR	DROP
 3897              		_UNNEST
 3898              	DECOM1:	// _ADR	RFROM		//  a
 3899              		_ADR	AT			//  data
 3900              		_ADR	UDOT			//  display data
 3901              		_UNNEST
 3902              	DECOM2:
 3903              		_ADR	UDOT
 3904              	// 	_ADR	RFROM
 3905              		_ADR	DROP
 3906              		_UNNEST
 3907              	.endif 
 3908              	
ARM GAS  forth.s 			page 166


 3909              	/**********************
 3910              		VLIST ( -- )
 3911              		WORDS alias 
 3912              		+ display words count 
 3913              	**********************/
 3914 4a90 504A0000 		_HEADER VLIST,5,"VLIST"
 3914      05564C49 
 3914      535400BF 
 3915 4a9c 504700BF 		_NEST 
 3916 4aa0 C14A0000 		_ADR WORDS
 3917 4aa4 AD350000 		_ADR CR 
 3918 4aa8 054B0000 		_ADR WC
 3919 4aac C1360000 		_ADR DOT    
 3920 4ab0 03240000 		_UNNEST 
 3921              	
 3922              	/*********************
 3923              	    WORDS	( -- )
 3924              	 	Display the names 
 3925              		in the context vocabulary.
 3926              	*******************************/
 3927 4ab4 944A0000 		_HEADER WORDS,5,"WORDS"
 3927      05574F52 
 3927      445300BF 
 3928 4ac0 504700BF 		_NEST
 3929 4ac4 AD350000 		_ADR	CR
 3930 4ac8 F12B0000 		_ADR	CNTXT
 3931 4acc 01260000 		_ADR	AT			// only in context
 3932              	WORS1:
 3933 4ad0 81280000 		_ADR	QDUP			// ?at end of list
 3934 4ad4 BB250000 		_QBRAN	WORS2
 3934      F84A0000 
 3935 4adc AD260000 		_ADR	DUPP
 3936 4ae0 25350000 		_ADR	SPACE
 3937 4ae4 554A0000 		_ADR	DOTID			// display a name
 3938 4ae8 1D280000 		_ADR	CELLM
 3939 4aec 01260000 		_ADR	AT
 3940 4af0 CF250000 		_BRAN	WORS1
 3940      D04A0000 
 3941              	WORS2:
 3942 4af8 03240000 		_UNNEST
 3943              	
 3944              	/*****************************
 3945              		WC ( - n )
 3946              		count words in dictionary 
 3947              	******************************/
 3948 4afc B84A0000 		_HEADER WC,2,"WC"
 3948      02574300 
 3949 4b04 504700BF 		_NEST 
 3950 4b08 7B250000 		_DOLIT 0 
 3950      00000000 
 3951 4b10 312C0000 		_ADR LAST
 3952 4b14 01260000 	1:	_ADR AT
 3953 4b18 81280000 		_ADR QDUP
 3954 4b1c BB250000 		_QBRAN 9f
 3954      3C4B0000 
 3955 4b24 BD260000 		_ADR SWAP
 3956 4b28 CD270000 		_ADR ONEP
ARM GAS  forth.s 			page 167


 3957 4b2c BD260000 		_ADR SWAP
 3958 4b30 1D280000 		_ADR CELLM
 3959 4b34 CF250000 		_BRAN 1b
 3959      144B0000 
 3960 4b3c 03240000 	9:	_UNNEST 
 3961              	
 3962              	/*************************
 3963              		MARK <string> ( -- )
 3964              	    create forget point 
 3965              		in dictionary 
 3966              	*************************/	
 3967 4b40 004B0000 		_HEADER MARK,4,"MARK"
 3967      044D4152 
 3967      4B0000BF 
 3968 4b4c 504700BF 		_NEST
 3969 4b50 41470000 		_ADR CREAT 
 3970 4b54 35460000 		_ADR DODOES 
 3971 4b58 03240000 		_UNNEST
 3972 4b5c 504700BF 		_NEST  
 3973 4b60 2D260000 		_ADR RFROM 
 3974 4b64 7B250000 		_DOLIT 8
 3974      08000000 
 3975 4b6c 81270000 		_ADR SUBB
 3976 4b70 FD490000 		_ADR TNAME
 3977 4b74 1D280000 		_ADR CELLM
 3978 4b78 01260000 		_ADR AT  
 3979 4b7c 312C0000 		_ADR LAST 
 3980 4b80 ED250000 		_ADR STORE 
 3981 4b84 21450000 		_ADR OVERT
 3982 4b88 03240000 		_UNNEST 
 3983              	
 3984              	/****************
 3985              	  cold start
 3986              	*****************/
 3987              	
 3988              	/**********************************
 3989              	    VER	 ( -- n )
 3990              	 	Return the version 
 3991              		number of this implementation.
 3992              	hidden word used by COLD
 3993              	**********************************/
 3994              	VERSN:
 3995 4b8c 504700BF 		_NEST
 3996 4b90 7B250000 		_DOLIT	VER*256+EXT
 3996      00010000 
 3997 4b98 03240000 		_UNNEST
 3998              	
 3999              	/*********************
 4000              	    hi	  ( -- )
 4001              	 	Display the sign-on 
 4002              		message.
 4003              	***********************/
 4004 4b9c 444B0000 		_HEADER HI,2,"HI"
 4004      02484900 
 4005 4ba4 504700BF 		_NEST
 4006 4ba8 AD350000 		_ADR	CR	// initialize I/O
 4007 4bac 15360000 		_DOTQP	17, "beyond Jupiter, v" 
ARM GAS  forth.s 			page 168


 4007      11626579 
 4007      6F6E6420 
 4007      4A757069 
 4007      7465722C 
 4008 4bc4 692B0000 		_ADR	BASE
 4009 4bc8 01260000 		_ADR	AT
 4010 4bcc BD320000 		_ADR	HEX	// save radix
 4011 4bd0 8D4B0000 		_ADR	VERSN
 4012 4bd4 A1310000 		_ADR	BDIGS
 4013 4bd8 7B250000 		_DOLIT  0 
 4013      00000000 
 4014 4be0 ED310000 		_ADR	DIG
 4015 4be4 ED310000 		_ADR	DIG
 4016 4be8 7B250000 		_DOLIT	'.'
 4016      2E000000 
 4017 4bf0 C1310000 		_ADR	HOLD
 4018 4bf4 0D320000 		_ADR	DIGS
 4019 4bf8 69320000 		_ADR	EDIGS
 4020 4bfc 79350000 		_ADR	TYPEE	// format version number
 4021 4c00 692B0000 		_ADR	BASE
 4022 4c04 ED250000 		_ADR	STORE
 4023 4c08 AD350000 		_ADR	CR
 4024 4c0c 03240000 		_UNNEST			// restore radix
 4025              	
 4026              	/**********************
 4027              	 check if PS2 keyboard 
 4028              	 present.
 4029              	**********************/
 4030              	PS2_QUERY: 
 4031 4c10 504700BF 		_NEST 
 4032 4c14 7B250000 		_DOLIT 400 
 4032      90010000 
 4033 4c1c 1D250000 		_ADR PAUSE
 4034 4c20 C9130000 		_ADR PS2_QKEY
 4035 4c24 BB250000 		_QBRAN 1f
 4035      404C0000 
 4036 4c2c 7B250000 		_DOLIT BAT_OK 
 4036      AA000000 
 4037 4c34 19270000 		_ADR XORR 
 4038 4c38 BB250000 		_QBRAN 9f 
 4038      844C0000 
 4039 4c40 B1150000 	1:	_ADR KBD_RST
 4040 4c44 7B250000 		_DOLIT BAT_OK 
 4040      AA000000 
 4041 4c4c 19270000 		_ADR XORR  
 4042 4c50 BB250000 		_QBRAN 9f  
 4042      844C0000 
 4043              	// no ps2 keyboard 
 4044              	// swith to serial console
 4045 4c58 AD350000 		_ADR CR 
 4046 4c5c 15360000 		_DOTQP 25,"no PS2 keyboard detected."
 4046      196E6F20 
 4046      50533220 
 4046      6B657962 
 4046      6F617264 
 4047 4c7c C1050000 		_ADR SERIAL 
 4048 4c80 D9050000 		_ADR CONSOLE 
ARM GAS  forth.s 			page 169


 4049 4c84 03240000 	9:	_UNNEST 
 4050              	
 4051              	/*************************
 4052              	   check PA8 to 
 4053              	   select console 
 4054              	   PA8 -> low  LOCAL 
 4055              	   PA8 -> high SERIAL 
 4056              	*************************/
 4057              	IF_SENSE:
 4058 4c88 504700BF 		_NEST 
 4059 4c8c A9050000 		_ADR LOCAL 
 4060 4c90 7B250000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4060      10000240 
 4061 4c98 01260000 		_ADR AT 
 4062 4c9c 7B250000 		_DOLIT (1<<8)
 4062      00010000 
 4063 4ca4 F1260000 		_ADR ANDD 
 4064 4ca8 BB250000 		_QBRAN 9f 
 4064      B44C0000 
 4065 4cb0 CD270000 		_ADR ONEP 
 4066 4cb4 D9050000 	9:  _ADR CONSOLE 
 4067 4cb8 03240000 		_UNNEST 
 4068              	
 4069              	
 4070              	/********************
 4071              	    COLD	( -- )
 4072              	 	The high level cold 
 4073              		start sequence.
 4074              	**************************/
 4075 4cbc A04B0000 		.word	LINK 
 4076              		LINK = . 
 4077 4cc0 04       	_LASTN:	.byte  4
 4078 4cc1 434F4C44 		.ascii "COLD"
 4079 4cc5 0000BF   		.p2align 2	
 4080              	COLD:
 4081 4cc8 00B5FBF7 		_CALL forth_init 
 4081      4DFA5DF8 
 4081      04EB
 4082 4cd2 DFF85CC0 		ldr IP,=COLD1 
 4083 4cd6 FDF791BB 		_NEXT
 4084 4cda 00BF     		.p2align 2 
 4085              	COLD1:
 4086 4cdc 7B250000 		_DOLIT  0 
 4086      00000000 
 4087 4ce4 51250000 		_ADR ULED // turn off user LED 
 4088 4ce8 7B250000 		_DOLIT	UZERO
 4088      F4030000 
 4089 4cf0 7B250000 		_DOLIT	UPP
 4089      00000020 
 4090 4cf8 7B250000 		_DOLIT	ULAST-UZERO
 4090      B0000000 
 4091 4d00 79300000 		_ADR	MOVE 			// initialize user area
 4092 4d04 393F0000 		_ADR	PRESE			// initialize stack and TIB
 4093 4d08 894C0000 		_ADR	IF_SENSE
 4094 4d0c 5D180000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4095 4d10 114C0000 		_ADR 	PS2_QUERY  
 4096 4d14 DD1A0000 		_ADR    FINIT 
ARM GAS  forth.s 			page 170


 4097 4d18 552B0000 		_ADR	TBOOT
 4098 4d1c 29300000 		_ADR	ATEXE			// application boot
 4099 4d20 21450000 		_ADR	OVERT
 4100 4d24 CF250000 		_BRAN	QUIT			// start interpretation
 4100      583F0000 
 4101              	COLD2:
 4102              		.p2align 2 	
 4103              	CTOP:
 4104 4d2c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4105              	
 4106              	
 4107 4d30 DC4C0000 	  .end 
ARM GAS  forth.s 			page 171


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 172


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 173


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 174


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 175


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 176


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 177


             forth.s:2854   .text:0000000000003ef4 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007d0 tv_out_isr
          ser-term.s:35     .text:00000000000004b4 uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010ac kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:00000000000023fc INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2875   .text:0000000000003f38 PRESE
             forth.s:268    .text:000000000000257a DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:952    .text:0000000000002ad0 COUNT
             forth.s:2038   .text:0000000000003578 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:437    .text:00000000000026ac DUPP
             forth.s:393    .text:0000000000002654 TOR
             forth.s:1039   .text:0000000000002b68 BASE
             forth.s:339    .text:00000000000025ec STORE
             forth.s:2180   .text:00000000000036c0 DOT
             forth.s:375    .text:000000000000262c RFROM
             forth.s:472    .text:00000000000026f0 ANDD
             forth.s:309    .text:00000000000025ba QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:154    .text:0000000000002484 EMIT
             forth.s:2010   .text:0000000000003524 SPACE
ARM GAS  forth.s 			page 178


              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:2056   .text:00000000000035ac CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:385    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004e2 ser_init
             tvout.s:74     .text:0000000000000720 tv_init
           ps2_kbd.s:307    .text:00000000000012cc kbd_init
         spi-flash.s:39     .text:00000000000016e0 flash_spi_init
             forth.s:4080   .text:0000000000004cc8 COLD
             forth.s:83     .text:00000000000023f4 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:475    .text:0000000000000332 gpio_config
              init.s:550    .text:00000000000003de gpio_out
              init.s:410    .text:00000000000002a8 nvic_set_priority
              init.s:565    .text:00000000000003f4 UZERO
              init.s:603    .text:00000000000004a4 ULAST
              init.s:419    .text:00000000000002c0 negative_irq
              init.s:431    .text:00000000000002da nvic_enable_irq
              init.s:448    .text:0000000000000304 nvic_disable_irq
              init.s:512    .text:000000000000039a input_pull
              init.s:505    .text:0000000000000388 output_type
              init.s:528    .text:00000000000003b0 gpio_speed
              init.s:566    .text:00000000000003f4 $d
             forth.s:4004   .text:0000000000004ba4 HI
           ps2_kbd.s:396    .text:00000000000013c8 PS2_QKEY
             tvout.s:563    .text:0000000000000c90 TV_EMIT
             forth.s:2791   .text:0000000000003e10 INTER
             forth.s:4077   .text:0000000000004cc0 _LASTN
             forth.s:4103   .text:0000000000004d2c CTOP
             forth.s:4076   .text:0000000000004cc0 LINK
              init.s:608    .text:00000000000004a4 $d
          ser-term.s:33     .text:00000000000004b4 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:000000000000053a $d
          ser-term.s:90     .text:000000000000053e _SER_QKEY
          ser-term.s:90     .text:0000000000000548 SER_QKEY
          ser-term.s:110    .text:0000000000000574 $d
          ser-term.s:110    .text:0000000000000578 _SER_EMIT
          ser-term.s:110    .text:0000000000000584 SER_EMIT
          ser-term.s:124    .text:000000000000059e $d
          ser-term.s:124    .text:00000000000005a2 _LOCAL
          ser-term.s:124    .text:00000000000005a8 $t
          ser-term.s:124    .text:00000000000005a8 LOCAL
          ser-term.s:133    .text:00000000000005b4 $d
          ser-term.s:133    .text:00000000000005b8 _SERIAL
ARM GAS  forth.s 			page 179


          ser-term.s:133    .text:00000000000005c0 SERIAL
          ser-term.s:142    .text:00000000000005cc $d
          ser-term.s:142    .text:00000000000005d0 _CONSOLE
          ser-term.s:142    .text:00000000000005d8 $t
          ser-term.s:142    .text:00000000000005d8 CONSOLE
          ser-term.s:164    .text:00000000000005f8 $d
          ser-term.s:164    .text:00000000000005fc _ANSI_PARAM
          ser-term.s:164    .text:0000000000000608 ANSI_PARAM
          ser-term.s:166    .text:000000000000060c $d
             forth.s:579    .text:00000000000027cc ONEP
             forth.s:1402   .text:0000000000002e8c SLMOD
             forth.s:668    .text:0000000000002880 QDUP
             forth.s:324    .text:00000000000025ce BRAN
             forth.s:529    .text:0000000000002770 PLUS
             forth.s:587    .text:00000000000027dc ONEM
             forth.s:90     .text:0000000000002402 UNNEST
          ser-term.s:191    .text:0000000000000678 _ANSI_ESC
          ser-term.s:191    .text:0000000000000680 ANSI_ESC
          ser-term.s:193    .text:0000000000000684 $d
          ser-term.s:203    .text:00000000000006a4 _SER_AT
          ser-term.s:203    .text:00000000000006ac SER_AT
          ser-term.s:205    .text:00000000000006b0 $d
             forth.s:445    .text:00000000000026bc SWAP
          ser-term.s:219    .text:00000000000006e0 _SER_CLS
          ser-term.s:219    .text:00000000000006e8 $t
          ser-term.s:219    .text:00000000000006e8 SER_CLS
          ser-term.s:221    .text:00000000000006ec $d
          ser-term.s:228    .text:0000000000000710 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
ARM GAS  forth.s 			page 180


             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000720 $t
             tvout.s:150    .text:00000000000007fc state_vsync
             tvout.s:191    .text:0000000000000850 state_pre_video
             tvout.s:202    .text:0000000000000862 state_video_out
             tvout.s:237    .text:00000000000008c0 state_post_video
             tvout.s:254    .text:00000000000008e6 tv_isr_exit
             tvout.s:180    .text:0000000000000836 sync_end
             tvout.s:246    .text:00000000000008d2 frame_end
             tvout.s:264    .text:00000000000008e8 $d
             tvout.s:264    .text:00000000000008ec _BACKCOLOR
             tvout.s:264    .text:00000000000008f8 BACKCOLOR
             tvout.s:271    .text:0000000000000904 $d
             tvout.s:271    .text:0000000000000908 _PENCOLOR
             tvout.s:271    .text:0000000000000912 $t
             tvout.s:271    .text:0000000000000914 PENCOLOR
             tvout.s:278    .text:0000000000000920 $d
             tvout.s:278    .text:0000000000000924 _CURSOR_COL
             tvout.s:278    .text:000000000000092c CURSOR_COL
             tvout.s:285    .text:0000000000000938 $d
             tvout.s:285    .text:000000000000093c _CURSOR_ROW
             tvout.s:285    .text:0000000000000940 $t
             tvout.s:285    .text:0000000000000940 CURSOR_ROW
             tvout.s:292    .text:000000000000094c $d
             tvout.s:292    .text:0000000000000950 _ROWY
             tvout.s:292    .text:0000000000000956 $t
             tvout.s:292    .text:0000000000000958 ROWY
             tvout.s:299    .text:0000000000000964 $d
             tvout.s:299    .text:0000000000000968 _COLX
             tvout.s:299    .text:000000000000096e $t
             tvout.s:299    .text:0000000000000970 COLX
             tvout.s:306    .text:000000000000097c $d
             tvout.s:306    .text:0000000000000980 _FONT
             tvout.s:306    .text:0000000000000988 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000994 $d
             tvout.s:313    .text:0000000000000998 _VIDBUFF
             tvout.s:313    .text:00000000000009a0 $t
             tvout.s:313    .text:00000000000009a0 VIDBUFF
             tvout.s:325    .text:00000000000009aa $d
             tvout.s:325    .text:00000000000009ae _PLOT
             tvout.s:325    .text:00000000000009b4 PLOT
             tvout.s:373    .text:0000000000000a38 plot_op
             tvout.s:341    .text:00000000000009e0 op_back
             tvout.s:350    .text:00000000000009fa op_pen
             tvout.s:359    .text:0000000000000a14 op_invert
             tvout.s:363    .text:0000000000000a1c op_xor
             tvout.s:373    .text:0000000000000a38 $d
             tvout.s:378    .text:0000000000000a40 _VSYNC
             tvout.s:378    .text:0000000000000a46 $t
             tvout.s:378    .text:0000000000000a48 VSYNC
             tvout.s:386    .text:0000000000000a52 $d
             tvout.s:386    .text:0000000000000a56 _CLS
             tvout.s:386    .text:0000000000000a5a $t
             tvout.s:386    .text:0000000000000a5c CLS
             tvout.s:410    .text:0000000000000a9e $d
             tvout.s:410    .text:0000000000000aa2 _CLRLINE
ARM GAS  forth.s 			page 181


             tvout.s:410    .text:0000000000000aaa $t
             tvout.s:410    .text:0000000000000aac CLRLINE
             tvout.s:412    .text:0000000000000ab0 $d
             forth.s:547    .text:0000000000002790 STAR
             forth.s:1629   .text:00000000000030c0 FILL
             tvout.s:427    .text:0000000000000ae4 _SCROLLUP
             tvout.s:427    .text:0000000000000af0 SCROLLUP
             tvout.s:429    .text:0000000000000af4 $d
             forth.s:538    .text:0000000000002780 SUBB
             forth.s:1597   .text:0000000000003078 MOVE
             tvout.s:448    .text:0000000000000b3c _SCROLLDOWN
             tvout.s:448    .text:0000000000000b48 SCROLLDOWN
             tvout.s:450    .text:0000000000000b4c $d
             tvout.s:467    .text:0000000000000b8c _TV_CRLF
             tvout.s:467    .text:0000000000000b94 $t
             tvout.s:467    .text:0000000000000b94 TV_CRLF
             tvout.s:482    .text:0000000000000bb6 $d
             tvout.s:482    .text:0000000000000bba _RIGHT
             tvout.s:482    .text:0000000000000bc0 $t
             tvout.s:482    .text:0000000000000bc0 RIGHT
             tvout.s:495    .text:0000000000000bd4 $d
             tvout.s:495    .text:0000000000000bd8 _LEFT
             tvout.s:495    .text:0000000000000be0 LEFT
             tvout.s:511    .text:0000000000000c0c FONT_PIXEL
             tvout.s:518    .text:0000000000000c1c INCR_X
             tvout.s:525    .text:0000000000000c28 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c30 CHAR_ROW
             tvout.s:536    .text:0000000000000c34 $d
             forth.s:718    .text:00000000000028e4 DDUP
             forth.s:384    .text:0000000000002640 RAT
             forth.s:290    .text:000000000000259c DONXT
             forth.s:709    .text:00000000000028d0 TDROP
             tvout.s:551    .text:0000000000000c70 CHAR_FONT
             tvout.s:552    .text:0000000000000c70 $t
             tvout.s:563    .text:0000000000000c84 $d
             tvout.s:563    .text:0000000000000c88 _TV_EMIT
             tvout.s:563    .text:0000000000000c90 $t
             tvout.s:565    .text:0000000000000c94 $d
             forth.s:848    .text:0000000000002a00 ULESS
             tvout.s:593    .text:0000000000000d18 CTRL_KEY
             forth.s:349    .text:0000000000002600 AT
             forth.s:678    .text:0000000000002894 ROT
             forth.s:367    .text:0000000000002620 CAT
             tvout.s:660    .text:0000000000000e00 SHOW_CURSOR
             tvout.s:691    .text:0000000000000e88 HIDE_CURSOR
             forth.s:823    .text:00000000000029c8 EQUAL
             tvout.s:650    .text:0000000000000de0 BACK_SPACE
             forth.s:429    .text:000000000000269c DROP
             tvout.s:618    .text:0000000000000d88 CAR_RET
             tvout.s:629    .text:0000000000000da0 LN_FEED
             tvout.s:619    .text:0000000000000d88 $t
             tvout.s:620    .text:0000000000000d8c $d
             tvout.s:630    .text:0000000000000da0 $t
             tvout.s:631    .text:0000000000000da4 $d
             forth.s:490    .text:0000000000002718 XORR
             tvout.s:651    .text:0000000000000de0 $t
             tvout.s:652    .text:0000000000000de4 $d
ARM GAS  forth.s 			page 182


             tvout.s:660    .text:0000000000000df4 _SHOW_CURSOR
             tvout.s:660    .text:0000000000000e00 $t
             tvout.s:663    .text:0000000000000e04 $d
             forth.s:660    .text:0000000000002870 TWOSL
             forth.s:357    .text:000000000000260c CSTOR
             forth.s:700    .text:00000000000028bc DDROP
             tvout.s:691    .text:0000000000000e7c _HIDE_CURSOR
             tvout.s:691    .text:0000000000000e88 $t
             tvout.s:694    .text:0000000000000e8c $d
             forth.s:520    .text:0000000000002760 LSHIFT
             forth.s:481    .text:0000000000002704 ORR
             tvout.s:704    .text:0000000000000eb4 _TV_AT
             tvout.s:704    .text:0000000000000eba $t
             tvout.s:704    .text:0000000000000ebc TV_AT
             tvout.s:719    .text:0000000000000ee0 $d
             tvout.s:719    .text:0000000000000ee4 _INPUT
             tvout.s:719    .text:0000000000000eea $t
             tvout.s:719    .text:0000000000000eec INPUT
             tvout.s:721    .text:0000000000000ef0 $d
             forth.s:1541   .text:0000000000002ff0 PAD
             forth.s:2699   .text:0000000000003cfc ACCEP
             forth.s:455    .text:00000000000026d0 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000000f1c $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 183


       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 184


       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f28 sc_ascii
         mcSaite.inc:100    .text:0000000000000fdc shifted
         mcSaite.inc:151    .text:000000000000103c altchar
         mcSaite.inc:167    .text:000000000000104c extended
         mcSaite.inc:191    .text:0000000000001074 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
ARM GAS  forth.s 			page 185


           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010aa $t
           ps2_kbd.s:179    .text:00000000000011d6 send_bit
           ps2_kbd.s:107    .text:000000000000110c start_bit
           ps2_kbd.s:118    .text:0000000000001130 parity_bit
           ps2_kbd.s:125    .text:0000000000001144 stop_bit
           ps2_kbd.s:152    .text:000000000000119a store_code
           ps2_kbd.s:253    .text:000000000000126a do_async_key
           ps2_kbd.s:204    .text:000000000000121a send_parity
           ps2_kbd.s:211    .text:000000000000122c send_stop
           ps2_kbd.s:218    .text:0000000000001236 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001256 is_async_key
           ps2_kbd.s:286    .text:00000000000012ba async_keys
           ps2_kbd.s:378    .text:00000000000013a0 table_scan
           ps2_kbd.s:260    .text:000000000000127c set_async_key
           ps2_kbd.s:295    .text:00000000000012c8 async_jump
           ps2_kbd.s:265    .text:000000000000128a shift_key
           ps2_kbd.s:273    .text:000000000000129a set_reset
           ps2_kbd.s:268    .text:0000000000001290 ctrl_key
           ps2_kbd.s:271    .text:0000000000001296 alt_key
           ps2_kbd.s:287    .text:00000000000012ba $d
           ps2_kbd.s:340    .text:0000000000001348 $d
           ps2_kbd.s:340    .text:000000000000134c _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001356 $t
           ps2_kbd.s:340    .text:0000000000001358 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001368 keycode
           ps2_kbd.s:365    .text:0000000000001390 wait_code
           ps2_kbd.s:396    .text:00000000000013ba $d
           ps2_kbd.s:396    .text:00000000000013be _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001414 inkey_exit
           ps2_kbd.s:418    .text:0000000000001418 pause_key
           ps2_kbd.s:427    .text:000000000000142e do_modifiers
           ps2_kbd.s:436    .text:0000000000001446 shift_down
           ps2_kbd.s:440    .text:000000000000144c altchar_down
           ps2_kbd.s:444    .text:0000000000001452 ctrl_down
           ps2_kbd.s:452    .text:000000000000146e do_capslock
           ps2_kbd.s:478    .text:0000000000001492 kbd_send
           ps2_kbd.s:553    .text:0000000000001586 kbd_clear_queue
           ps2_kbd.s:567    .text:00000000000015a4 $d
           ps2_kbd.s:567    .text:00000000000015a8 _KBD_RST
           ps2_kbd.s:567    .text:00000000000015b0 $t
           ps2_kbd.s:567    .text:00000000000015b0 KBD_RST
           ps2_kbd.s:591    .text:00000000000015fa $d
           ps2_kbd.s:591    .text:00000000000015fe _KBD_LED
           ps2_kbd.s:591    .text:0000000000001606 $t
           ps2_kbd.s:591    .text:0000000000001608 KBD_LED
           ps2_kbd.s:616    .text:000000000000165c $d
           ps2_kbd.s:616    .text:0000000000001660 _CAPS_LED
           ps2_kbd.s:616    .text:000000000000166c CAPS_LED
           ps2_kbd.s:633    .text:0000000000001696 $d
           ps2_kbd.s:633    .text:000000000000169a _WKEY
ARM GAS  forth.s 			page 186


           ps2_kbd.s:633    .text:00000000000016a4 WKEY
           ps2_kbd.s:635    .text:00000000000016a8 $d
           ps2_kbd.s:640    .text:00000000000016c0 $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016e0 $t
         spi-flash.s:83     .text:0000000000001782 $d
         spi-flash.s:83     .text:0000000000001786 _CHIP_SEL
         spi-flash.s:83     .text:0000000000001790 CHIP_SEL
         spi-flash.s:95     .text:00000000000017ae $d
         spi-flash.s:95     .text:00000000000017b2 _CHIP_DSEL
         spi-flash.s:95     .text:00000000000017bc $t
         spi-flash.s:95     .text:00000000000017bc CHIP_DSEL
         spi-flash.s:111    .text:00000000000017ea $d
         spi-flash.s:111    .text:00000000000017ee _RD_BYTE
         spi-flash.s:111    .text:00000000000017f6 $t
         spi-flash.s:111    .text:00000000000017f8 RD_BYTE
         spi-flash.s:131    .text:0000000000001820 $d
         spi-flash.s:131    .text:0000000000001824 _WR_BYTE
         spi-flash.s:131    .text:000000000000182c $t
         spi-flash.s:131    .text:000000000000182c WR_BYTE
         spi-flash.s:149    .text:0000000000001850 $d
         spi-flash.s:149    .text:0000000000001854 _WR_DIS
         spi-flash.s:149    .text:000000000000185c WR_DIS
         spi-flash.s:151    .text:0000000000001860 $d
         spi-flash.s:161    .text:000000000000187c _WR_ENBL
         spi-flash.s:161    .text:0000000000001884 $t
         spi-flash.s:161    .text:0000000000001884 WR_ENBL
         spi-flash.s:163    .text:0000000000001888 $d
         spi-flash.s:173    .text:00000000000018a4 _RD_SR
         spi-flash.s:173    .text:00000000000018aa $t
         spi-flash.s:173    .text:00000000000018ac RD_SR
         spi-flash.s:175    .text:00000000000018b0 $d
         spi-flash.s:183    .text:00000000000018d4 sr_cmd
         spi-flash.s:189    .text:00000000000018db _SEND_ADR
         spi-flash.s:189    .text:00000000000018e4 $t
         spi-flash.s:189    .text:00000000000018e4 SEND_ADR
         spi-flash.s:191    .text:00000000000018e8 $d
             forth.s:511    .text:0000000000002748 RSHIFT
         spi-flash.s:206    .text:000000000000191c _WAIT_DONE
         spi-flash.s:206    .text:0000000000001926 $t
         spi-flash.s:206    .text:0000000000001928 WAIT_DONE
         spi-flash.s:208    .text:000000000000192c $d
         spi-flash.s:221    .text:000000000000195c _ERASE_BLK
         spi-flash.s:221    .text:0000000000001966 $t
         spi-flash.s:221    .text:0000000000001968 ERASE_BLK
         spi-flash.s:223    .text:000000000000196c $d
         spi-flash.s:236    .text:0000000000001994 _ERASE_CHIP
         spi-flash.s:236    .text:00000000000019a0 ERASE_CHIP
         spi-flash.s:238    .text:00000000000019a4 $d
         spi-flash.s:254    .text:00000000000019d4 _RD_BLK
         spi-flash.s:254    .text:00000000000019dc RD_BLK
         spi-flash.s:256    .text:00000000000019e0 $d
         spi-flash.s:276    .text:0000000000001a28 _WR_BLK
         spi-flash.s:276    .text:0000000000001a30 WR_BLK
ARM GAS  forth.s 			page 187


         spi-flash.s:278    .text:0000000000001a34 $d
             forth.s:2219   .text:0000000000003738 HDOT
             float.s:36     *ABS*:0000000000ffffff MANTISSA_MASK
             float.s:37     *ABS*:0000000000800000 MANTISSA_SIGN
             float.s:38     *ABS*:00000000007fffff MANTISSA_MAX
             float.s:47     .text:0000000000001a8c _FPSW
             float.s:47     .text:0000000000001a94 FPSW
             float.s:56     .text:0000000000001aa0 $d
             float.s:56     .text:0000000000001aa4 _FBASE
             float.s:56     .text:0000000000001aaa $t
             float.s:56     .text:0000000000001aac FBASE
             float.s:65     .text:0000000000001ab8 $d
             float.s:65     .text:0000000000001abc _FRESET
             float.s:65     .text:0000000000001ac4 FRESET
             float.s:74     .text:0000000000001ad0 $d
             float.s:74     .text:0000000000001ad4 _FINIT
             float.s:74     .text:0000000000001ada $t
             float.s:74     .text:0000000000001adc FINIT
             float.s:76     .text:0000000000001ae0 $d
             float.s:88     .text:0000000000001afc _FER
             float.s:88     .text:0000000000001b00 $t
             float.s:88     .text:0000000000001b00 FER
             float.s:97     .text:0000000000001b0c $d
             float.s:97     .text:0000000000001b10 _FZE
             float.s:97     .text:0000000000001b14 $t
             float.s:97     .text:0000000000001b14 FZE
             float.s:107    .text:0000000000001b24 $d
             float.s:107    .text:0000000000001b28 _FNE
             float.s:107    .text:0000000000001b2c $t
             float.s:107    .text:0000000000001b2c FNE
             float.s:117    .text:0000000000001b3c $d
             float.s:117    .text:0000000000001b40 _FOV
             float.s:117    .text:0000000000001b44 $t
             float.s:117    .text:0000000000001b44 FOV
             float.s:127    .text:0000000000001b54 $d
             float.s:127    .text:0000000000001b58 _SFZ
             float.s:127    .text:0000000000001b5c $t
             float.s:127    .text:0000000000001b5c SFZ
             float.s:140    .text:0000000000001b76 $d
             float.s:140    .text:0000000000001b7a _SFN
             float.s:140    .text:0000000000001b7e $t
             float.s:140    .text:0000000000001b80 SFN
             float.s:154    .text:0000000000001b9c $d
             float.s:154    .text:0000000000001ba0 _SFV
             float.s:154    .text:0000000000001ba4 $t
             float.s:154    .text:0000000000001ba4 SFV
             float.s:165    .text:0000000000001bb4 $d
             float.s:165    .text:0000000000001bb8 _AT_EXPONENT
             float.s:165    .text:0000000000001bc2 $t
             float.s:165    .text:0000000000001bc4 AT_EXPONENT
             float.s:167    .text:0000000000001bc8 $d
             float.s:188    .text:0000000000001c1c _STOR_EXPONENT
             float.s:188    .text:0000000000001c26 $t
             float.s:188    .text:0000000000001c28 STOR_EXPONENT
             float.s:191    .text:0000000000001c2c $d
             forth.s:802    .text:00000000000029a0 ABSS
             forth.s:884    .text:0000000000002a48 GREAT
ARM GAS  forth.s 			page 188


             float.s:219    .text:0000000000001c9c _EDOT
             float.s:219    .text:0000000000001ca0 EDOT
             float.s:221    .text:0000000000001ca4 $d
             forth.s:812    .text:00000000000029b4 ZEQUAL
             forth.s:2114   .text:0000000000003614 DOTQP
             float.s:229    .text:0000000000001cd0 $d
             forth.s:1259   .text:0000000000002d64 STOD
             forth.s:1707   .text:00000000000031a0 BDIGS
             forth.s:1737   .text:00000000000031ec DIG
             forth.s:689    .text:00000000000028a8 NROT
             forth.s:1719   .text:00000000000031c0 HOLD
             forth.s:1751   .text:000000000000320c DIGS
             forth.s:1783   .text:0000000000003268 EDIGS
             forth.s:464    .text:00000000000026e0 ZLESS
             float.s:288    .text:0000000000001dc0 _FDOT
             float.s:288    .text:0000000000001dc4 FDOT
             float.s:290    .text:0000000000001dc8 $d
             float.s:317    .text:0000000000001e40 POS_E
             float.s:344    .text:0000000000001eac _FSTAR
             float.s:344    .text:0000000000001eb0 FSTAR
             float.s:346    .text:0000000000001eb4 $d
             forth.s:568    .text:00000000000027b8 MSTAR
             forth.s:741    .text:0000000000002918 DABS
             forth.s:757    .text:000000000000293c UDGREAT
             forth.s:1295   .text:0000000000002dac DSLMOD
             forth.s:962    .text:0000000000002ae8 DNEGA
             float.s:385    .text:0000000000001f54 _FSLH
             float.s:385    .text:0000000000001f58 FSLH
             float.s:387    .text:0000000000001f5c $d
             forth.s:1426   .text:0000000000002ec4 SLASH
             float.s:406    .text:0000000000001f90 _FALIGN
             float.s:406    .text:0000000000001f98 $t
             float.s:406    .text:0000000000001f98 FALIGN
             float.s:408    .text:0000000000001f9c $d
             forth.s:860    .text:0000000000002a18 LESS
             forth.s:835    .text:00000000000029e0 DIFF
             float.s:452    .text:0000000000002054 _FPLUS
             float.s:452    .text:0000000000002058 FPLUS
             float.s:454    .text:000000000000205c $d
             float.s:465    .text:0000000000002078 _FMINUS
             float.s:465    .text:000000000000207c FMINUS
             float.s:467    .text:0000000000002080 $d
             float.s:479    .text:000000000000209c _FNEG
             float.s:479    .text:00000000000020a4 $t
             float.s:479    .text:00000000000020a4 FNEG
             float.s:496    .text:00000000000020d0 $d
             float.s:496    .text:00000000000020d4 _FABS
             float.s:496    .text:00000000000020dc FABS
             float.s:512    .text:0000000000002106 $d
             float.s:512    .text:000000000000210a _FMIN
             float.s:512    .text:0000000000002110 FMIN
             float.s:514    .text:0000000000002114 $d
             float.s:526    .text:000000000000213c _FMAX
             float.s:526    .text:0000000000002144 FMAX
             float.s:528    .text:0000000000002148 $d
             float.s:541    .text:0000000000002170 _FGREAT
             float.s:541    .text:0000000000002174 FGREAT
ARM GAS  forth.s 			page 189


             float.s:543    .text:0000000000002178 $d
             float.s:552    .text:000000000000218c _FLESS
             float.s:552    .text:0000000000002190 FLESS
             float.s:554    .text:0000000000002194 $d
             float.s:563    .text:00000000000021a8 _FTOS
             float.s:563    .text:00000000000021ac $t
             float.s:563    .text:00000000000021ac FTOS
             float.s:593    .text:00000000000021f0 $d
             float.s:593    .text:00000000000021f4 _STOF
             float.s:593    .text:00000000000021f8 $t
             float.s:593    .text:00000000000021f8 STOF
             float.s:619    .text:0000000000002244 EXPONENT
             float.s:621    .text:0000000000002248 $d
             forth.s:1917   .text:00000000000033e0 CHARQ
             forth.s:1888   .text:0000000000003380 PARSE_DIGITS
             forth.s:794    .text:0000000000002990 NEGAT
             float.s:648    .text:00000000000022bc _FLOATQ
             float.s:648    .text:00000000000022c4 FLOATQ
             float.s:650    .text:00000000000022c8 $d
             float.s:717    .text:00000000000023cc _NUMBER
             float.s:717    .text:00000000000023d4 NUMBER
             float.s:719    .text:00000000000023d8 $d
             forth.s:1939   .text:0000000000003404 INTQ
             forth.s:80     .text:00000000000023f4 $t
             forth.s:103    .text:000000000000240c COMPI_NEST
             forth.s:116    .text:000000000000242a TSTDIN
             forth.s:123    .text:0000000000002434 TSTDOUT
             forth.s:132    .text:000000000000243e $d
             forth.s:132    .text:0000000000002442 _QKEY
             forth.s:132    .text:0000000000002448 QKEY
             forth.s:134    .text:000000000000244c $d
             forth.s:1564   .text:0000000000003028 ATEXE
             forth.s:142    .text:000000000000245c _KEY
             forth.s:142    .text:0000000000002460 $t
             forth.s:142    .text:0000000000002460 KEY
             forth.s:144    .text:0000000000002464 KEY1
             forth.s:145    .text:0000000000002464 $d
             forth.s:154    .text:000000000000247c _EMIT
             forth.s:156    .text:0000000000002488 $d
             forth.s:190    .text:0000000000002498 _RAND
             forth.s:190    .text:00000000000024a0 RAND
             forth.s:192    .text:00000000000024a4 $d
             forth.s:1003   .text:0000000000002b18 SEED
             forth.s:1415   .text:0000000000002eac MODD
             forth.s:221    .text:0000000000002514 _PAUSE
             forth.s:221    .text:000000000000251a $t
             forth.s:221    .text:000000000000251c PAUSE
             forth.s:223    .text:0000000000002520 $d
             forth.s:1021   .text:0000000000002b40 TIMER
             forth.s:225    .text:0000000000002528 PAUSE_LOOP
             forth.s:230    .text:0000000000002540 PAUSE_EXIT
             forth.s:237    .text:0000000000002548 _ULED
             forth.s:237    .text:0000000000002550 ULED
             forth.s:246    .text:000000000000256c ULED_OFF
             forth.s:260    .text:0000000000002570 $d
             forth.s:260    .text:0000000000002574 _NOP
             forth.s:260    .text:0000000000002578 $t
ARM GAS  forth.s 			page 190


             forth.s:260    .text:0000000000002578 NOP
             forth.s:277    .text:0000000000002584 $d
             forth.s:277    .text:0000000000002588 _EXECU
             forth.s:277    .text:0000000000002590 $t
             forth.s:277    .text:0000000000002590 EXECU
             forth.s:297    .text:00000000000025ac NEXT1
             forth.s:315    .text:00000000000025c8 QBRAN1
             forth.s:332    .text:00000000000025d4 $d
             forth.s:332    .text:00000000000025d8 _EXIT
             forth.s:332    .text:00000000000025e0 EXIT
             forth.s:333    .text:00000000000025e0 $d
             forth.s:339    .text:00000000000025e8 _STORE
             forth.s:339    .text:00000000000025ea $t
             forth.s:349    .text:00000000000025f8 $d
             forth.s:349    .text:00000000000025fc _AT
             forth.s:349    .text:00000000000025fe $t
             forth.s:357    .text:0000000000002604 $d
             forth.s:357    .text:0000000000002608 _CSTOR
             forth.s:367    .text:0000000000002618 $d
             forth.s:367    .text:000000000000261c _CAT
             forth.s:375    .text:0000000000002624 $d
             forth.s:375    .text:0000000000002628 _RFROM
             forth.s:384    .text:0000000000002636 $d
             forth.s:384    .text:000000000000263a _RAT
             forth.s:393    .text:000000000000264a $d
             forth.s:393    .text:000000000000264e _TOR
             forth.s:402    .text:000000000000265e $d
             forth.s:402    .text:0000000000002662 _RPSTOR
             forth.s:402    .text:0000000000002666 $t
             forth.s:402    .text:0000000000002668 RPSTOR
             forth.s:411    .text:0000000000002670 $d
             forth.s:411    .text:0000000000002674 _SPSTOR
             forth.s:411    .text:0000000000002678 $t
             forth.s:411    .text:0000000000002678 SPSTOR
             forth.s:420    .text:0000000000002680 $d
             forth.s:420    .text:0000000000002684 _SPAT
             forth.s:420    .text:0000000000002688 $t
             forth.s:420    .text:0000000000002688 SPAT
             forth.s:429    .text:0000000000002690 $d
             forth.s:429    .text:0000000000002694 _DROP
             forth.s:437    .text:00000000000026a2 $d
             forth.s:437    .text:00000000000026a6 _DUPP
             forth.s:437    .text:00000000000026aa $t
             forth.s:445    .text:00000000000026b2 $d
             forth.s:445    .text:00000000000026b6 _SWAP
             forth.s:455    .text:00000000000026c4 $d
             forth.s:455    .text:00000000000026c8 _OVER
             forth.s:464    .text:00000000000026d8 $d
             forth.s:464    .text:00000000000026dc _ZLESS
             forth.s:472    .text:00000000000026e6 $d
             forth.s:472    .text:00000000000026ea _ANDD
             forth.s:472    .text:00000000000026ee $t
             forth.s:481    .text:00000000000026fa $d
             forth.s:481    .text:00000000000026fe _ORR
             forth.s:490    .text:000000000000270e $d
             forth.s:490    .text:0000000000002712 _XORR
             forth.s:490    .text:0000000000002716 $t
ARM GAS  forth.s 			page 191


             forth.s:499    .text:0000000000002722 $d
             forth.s:499    .text:0000000000002726 _UPLUS
             forth.s:499    .text:000000000000272a $t
             forth.s:499    .text:000000000000272c UPLUS
             forth.s:511    .text:000000000000273c $d
             forth.s:511    .text:0000000000002740 _RSHIFT
             forth.s:520    .text:0000000000002752 $d
             forth.s:520    .text:0000000000002756 _LSHIFT
             forth.s:529    .text:000000000000276a $d
             forth.s:529    .text:000000000000276e _PLUS
             forth.s:529    .text:0000000000002770 $t
             forth.s:538    .text:0000000000002778 $d
             forth.s:538    .text:000000000000277c _SUBB
             forth.s:538    .text:000000000000277e $t
             forth.s:547    .text:000000000000278a $d
             forth.s:547    .text:000000000000278e _STAR
             forth.s:547    .text:0000000000002790 $t
             forth.s:556    .text:000000000000279a $d
             forth.s:556    .text:000000000000279e _UMSTA
             forth.s:556    .text:00000000000027a2 $t
             forth.s:556    .text:00000000000027a4 UMSTA
             forth.s:568    .text:00000000000027b0 $d
             forth.s:568    .text:00000000000027b4 _MSTAR
             forth.s:579    .text:00000000000027c4 $d
             forth.s:579    .text:00000000000027c8 _ONEP
             forth.s:587    .text:00000000000027d2 $d
             forth.s:587    .text:00000000000027d6 _ONEM
             forth.s:595    .text:00000000000027e2 $d
             forth.s:595    .text:00000000000027e6 _TWOP
             forth.s:595    .text:00000000000027ec TWOP
             forth.s:603    .text:00000000000027f2 $d
             forth.s:603    .text:00000000000027f6 _TWOM
             forth.s:603    .text:00000000000027fc TWOM
             forth.s:611    .text:0000000000002802 $d
             forth.s:611    .text:0000000000002806 _CELLP
             forth.s:611    .text:000000000000280c $t
             forth.s:611    .text:000000000000280c CELLP
             forth.s:619    .text:0000000000002812 $d
             forth.s:619    .text:0000000000002816 _CELLM
             forth.s:619    .text:000000000000281c $t
             forth.s:619    .text:000000000000281c CELLM
             forth.s:627    .text:0000000000002822 $d
             forth.s:627    .text:0000000000002826 _BLANK
             forth.s:627    .text:000000000000282c BLANK
             forth.s:636    .text:0000000000002836 $d
             forth.s:636    .text:000000000000283a _CELLS
             forth.s:636    .text:0000000000002840 $t
             forth.s:636    .text:0000000000002840 CELLS
             forth.s:644    .text:0000000000002846 $d
             forth.s:644    .text:000000000000284a _CELLSL
             forth.s:644    .text:0000000000002850 $t
             forth.s:644    .text:0000000000002850 CELLSL
             forth.s:652    .text:0000000000002856 $d
             forth.s:652    .text:000000000000285a _TWOST
             forth.s:652    .text:0000000000002860 TWOST
             forth.s:660    .text:0000000000002866 $d
             forth.s:660    .text:000000000000286a _TWOSL
ARM GAS  forth.s 			page 192


             forth.s:668    .text:0000000000002876 $d
             forth.s:668    .text:000000000000287a _QDUP
             forth.s:678    .text:000000000000288a $d
             forth.s:678    .text:000000000000288e _ROT
             forth.s:678    .text:0000000000002892 $t
             forth.s:689    .text:000000000000289e $d
             forth.s:689    .text:00000000000028a2 _NROT
             forth.s:700    .text:00000000000028b2 $d
             forth.s:700    .text:00000000000028b6 _DDROP
             forth.s:700    .text:00000000000028bc $t
             forth.s:709    .text:00000000000028c6 $d
             forth.s:709    .text:00000000000028ca _TDROP
             forth.s:709    .text:00000000000028d0 $t
             forth.s:718    .text:00000000000028da $d
             forth.s:718    .text:00000000000028de _DDUP
             forth.s:728    .text:00000000000028f0 $d
             forth.s:728    .text:00000000000028f4 _DPLUS
             forth.s:728    .text:00000000000028f8 DPLUS
             forth.s:741    .text:000000000000290c $d
             forth.s:741    .text:0000000000002910 _DABS
             forth.s:757    .text:0000000000002934 $d
             forth.s:757    .text:0000000000002938 _UDGREAT
             forth.s:757    .text:000000000000293c $t
             forth.s:774    .text:0000000000002958 $d
             forth.s:774    .text:000000000000295c _DZEQUAL
             forth.s:774    .text:0000000000002960 $t
             forth.s:774    .text:0000000000002960 DZEQUAL
             forth.s:786    .text:0000000000002972 $d
             forth.s:786    .text:0000000000002976 _INVER
             forth.s:786    .text:000000000000297a $t
             forth.s:786    .text:000000000000297c INVER
             forth.s:794    .text:0000000000002982 $d
             forth.s:794    .text:0000000000002986 _NEGAT
             forth.s:802    .text:0000000000002996 $d
             forth.s:802    .text:000000000000299a _ABSS
             forth.s:802    .text:000000000000299e $t
             forth.s:812    .text:00000000000029aa $d
             forth.s:812    .text:00000000000029ae _ZEQUAL
             forth.s:823    .text:00000000000029c2 $d
             forth.s:823    .text:00000000000029c6 _EQUAL
             forth.s:823    .text:00000000000029c8 $t
             forth.s:835    .text:00000000000029d8 $d
             forth.s:835    .text:00000000000029dc _DIFF
             forth.s:848    .text:00000000000029f8 $d
             forth.s:848    .text:00000000000029fc _ULESS
             forth.s:860    .text:0000000000002a10 $d
             forth.s:860    .text:0000000000002a14 _LESS
             forth.s:860    .text:0000000000002a16 $t
             forth.s:872    .text:0000000000002a28 $d
             forth.s:872    .text:0000000000002a2c _UGREAT
             forth.s:872    .text:0000000000002a30 UGREAT
             forth.s:884    .text:0000000000002a40 $d
             forth.s:884    .text:0000000000002a44 _GREAT
             forth.s:884    .text:0000000000002a46 $t
             forth.s:896    .text:0000000000002a58 $d
             forth.s:896    .text:0000000000002a5c _MAX
             forth.s:896    .text:0000000000002a60 $t
ARM GAS  forth.s 			page 193


             forth.s:896    .text:0000000000002a60 MAX
             forth.s:907    .text:0000000000002a6c $d
             forth.s:907    .text:0000000000002a70 _MIN
             forth.s:907    .text:0000000000002a74 $t
             forth.s:907    .text:0000000000002a74 MIN
             forth.s:918    .text:0000000000002a80 $d
             forth.s:918    .text:0000000000002a84 _PSTOR
             forth.s:918    .text:0000000000002a88 PSTOR
             forth.s:930    .text:0000000000002a98 $d
             forth.s:930    .text:0000000000002a9c _DSTOR
             forth.s:930    .text:0000000000002aa0 DSTOR
             forth.s:942    .text:0000000000002ab4 $d
             forth.s:942    .text:0000000000002ab8 _DAT
             forth.s:942    .text:0000000000002abc DAT
             forth.s:952    .text:0000000000002ac6 $d
             forth.s:952    .text:0000000000002aca _COUNT
             forth.s:952    .text:0000000000002ad0 $t
             forth.s:962    .text:0000000000002adc $d
             forth.s:962    .text:0000000000002ae0 _DNEGA
             forth.s:962    .text:0000000000002ae8 $t
             forth.s:979    .text:0000000000002af8 DOVAR
             forth.s:990    .text:0000000000002b04 DOCON
             forth.s:1003   .text:0000000000002b0e $d
             forth.s:1003   .text:0000000000002b12 _SEED
             forth.s:1012   .text:0000000000002b22 $d
             forth.s:1012   .text:0000000000002b26 _MSEC
             forth.s:1012   .text:0000000000002b2c MSEC
             forth.s:1021   .text:0000000000002b36 $d
             forth.s:1021   .text:0000000000002b3a _TIMER
             forth.s:1021   .text:0000000000002b40 $t
             forth.s:1030   .text:0000000000002b4a $d
             forth.s:1030   .text:0000000000002b4e _TBOOT
             forth.s:1030   .text:0000000000002b54 $t
             forth.s:1030   .text:0000000000002b54 TBOOT
             forth.s:1039   .text:0000000000002b5e $d
             forth.s:1039   .text:0000000000002b62 _BASE
             forth.s:1049   .text:0000000000002b72 TEMP
             forth.s:1058   .text:0000000000002b7c $d
             forth.s:1058   .text:0000000000002b80 _SPAN
             forth.s:1058   .text:0000000000002b88 SPAN
             forth.s:1067   .text:0000000000002b92 $d
             forth.s:1067   .text:0000000000002b96 _INN
             forth.s:1067   .text:0000000000002b9a $t
             forth.s:1067   .text:0000000000002b9c INN
             forth.s:1077   .text:0000000000002ba6 $d
             forth.s:1077   .text:0000000000002baa _NTIB
             forth.s:1077   .text:0000000000002bb0 NTIB
             forth.s:1086   .text:0000000000002bba $d
             forth.s:1086   .text:0000000000002bbe _TEVAL
             forth.s:1086   .text:0000000000002bc4 $t
             forth.s:1086   .text:0000000000002bc4 TEVAL
             forth.s:1096   .text:0000000000002bce $d
             forth.s:1096   .text:0000000000002bd2 _HLD
             forth.s:1096   .text:0000000000002bd6 $t
             forth.s:1096   .text:0000000000002bd8 HLD
             forth.s:1106   .text:0000000000002be2 $d
             forth.s:1106   .text:0000000000002be6 _CNTXT
ARM GAS  forth.s 			page 194


             forth.s:1106   .text:0000000000002bee $t
             forth.s:1106   .text:0000000000002bf0 CNTXT
             forth.s:1107   .text:0000000000002bf0 CRRNT
             forth.s:1117   .text:0000000000002bfa $d
             forth.s:1117   .text:0000000000002bfe _CPP
             forth.s:1117   .text:0000000000002c04 CPP
             forth.s:1127   .text:0000000000002c10 $d
             forth.s:1127   .text:0000000000002c14 _FCP
             forth.s:1127   .text:0000000000002c18 $t
             forth.s:1127   .text:0000000000002c18 FCP
             forth.s:1137   .text:0000000000002c24 $d
             forth.s:1137   .text:0000000000002c28 _LAST
             forth.s:1137   .text:0000000000002c30 LAST
             forth.s:1151   .text:0000000000002c3c $d
             forth.s:1151   .text:0000000000002c40 _USER_BEGIN
             forth.s:1151   .text:0000000000002c4c USER_BEGIN
             forth.s:1155   .text:0000000000002c58 USR_BGN_ADR
             forth.s:1156   .text:0000000000002c58 $d
             forth.s:1162   .text:0000000000002c60 _USER_END
             forth.s:1162   .text:0000000000002c6c USER_END
             forth.s:1166   .text:0000000000002c78 USER_END_ADR
             forth.s:1167   .text:0000000000002c78 $d
             forth.s:1179   .text:0000000000002c80 _WITHI
             forth.s:1179   .text:0000000000002c88 WITHI
             forth.s:1181   .text:0000000000002c8c $d
             forth.s:1196   .text:0000000000002cac _UMMOD
             forth.s:1196   .text:0000000000002cb4 UMMOD
             forth.s:1200   .text:0000000000002cbe UMMOD0
             forth.s:1207   .text:0000000000002cce UMMOD1
             forth.s:1213   .text:0000000000002cd8 UMMOD2
             forth.s:1226   .text:0000000000002ce4 $d
             forth.s:1226   .text:0000000000002ce8 _MSMOD
             forth.s:1226   .text:0000000000002cee $t
             forth.s:1226   .text:0000000000002cf0 MSMOD
             forth.s:1228   .text:0000000000002cf4 $d
             forth.s:1237   .text:0000000000002d1c MMOD1
             forth.s:1244   .text:0000000000002d38 MMOD2
             forth.s:1252   .text:0000000000002d58 MMOD3
             forth.s:1259   .text:0000000000002d60 _STOD
             forth.s:1259   .text:0000000000002d64 $t
             forth.s:1268   .text:0000000000002d70 $d
             forth.s:1268   .text:0000000000002d74 _D2STAR
             forth.s:1268   .text:0000000000002d78 $t
             forth.s:1268   .text:0000000000002d78 D2STAR
             forth.s:1280   .text:0000000000002d8a $d
             forth.s:1280   .text:0000000000002d8e _D2SL
             forth.s:1280   .text:0000000000002d92 $t
             forth.s:1280   .text:0000000000002d94 D2SL
             forth.s:1295   .text:0000000000002da2 $d
             forth.s:1295   .text:0000000000002da6 _DSLMOD
             forth.s:1295   .text:0000000000002dac $t
             forth.s:1331   .text:0000000000002df8 $d
             forth.s:1331   .text:0000000000002dfc _DSLASH
             forth.s:1331   .text:0000000000002e00 DSLASH
             forth.s:1333   .text:0000000000002e04 $d
             forth.s:1353   .text:0000000000002e48 _DSTAR
             forth.s:1353   .text:0000000000002e4c DSTAR
ARM GAS  forth.s 			page 195


             forth.s:1402   .text:0000000000002e82 $d
             forth.s:1402   .text:0000000000002e86 _SLMOD
             forth.s:1404   .text:0000000000002e90 $d
             forth.s:1415   .text:0000000000002ea8 _MODD
             forth.s:1415   .text:0000000000002eac $t
             forth.s:1417   .text:0000000000002eb0 $d
             forth.s:1426   .text:0000000000002ec0 _SLASH
             forth.s:1426   .text:0000000000002ec2 $t
             forth.s:1428   .text:0000000000002ec8 $d
             forth.s:1439   .text:0000000000002edc _SSMOD
             forth.s:1439   .text:0000000000002ee2 $t
             forth.s:1439   .text:0000000000002ee4 SSMOD
             forth.s:1441   .text:0000000000002ee8 $d
             forth.s:1453   .text:0000000000002f00 _STASL
             forth.s:1453   .text:0000000000002f04 STASL
             forth.s:1455   .text:0000000000002f08 $d
             forth.s:1469   .text:0000000000002f1c _ALGND
             forth.s:1469   .text:0000000000002f24 $t
             forth.s:1469   .text:0000000000002f24 ALGND
             forth.s:1480   .text:0000000000002f34 $d
             forth.s:1480   .text:0000000000002f38 _TCHAR
             forth.s:1480   .text:0000000000002f3e $t
             forth.s:1480   .text:0000000000002f40 TCHAR
             forth.s:1482   .text:0000000000002f44 $d
             forth.s:1492   .text:0000000000002f7c TCHA1
             forth.s:1500   .text:0000000000002f84 _DEPTH
             forth.s:1500   .text:0000000000002f8a $t
             forth.s:1500   .text:0000000000002f8c DEPTH
             forth.s:1512   .text:0000000000002fa4 $d
             forth.s:1512   .text:0000000000002fa8 _PICK
             forth.s:1512   .text:0000000000002fb0 PICK
             forth.s:1514   .text:0000000000002fb4 $d
             forth.s:1530   .text:0000000000002fd0 _HERE
             forth.s:1530   .text:0000000000002fd8 HERE
             forth.s:1532   .text:0000000000002fdc $d
             forth.s:1541   .text:0000000000002fec _PAD
             forth.s:1541   .text:0000000000002ff0 $t
             forth.s:1543   .text:0000000000002ff4 $d
             forth.s:1554   .text:000000000000300c _TIB
             forth.s:1554   .text:0000000000003010 $t
             forth.s:1554   .text:0000000000003010 TIB
             forth.s:1564   .text:000000000000301a $d
             forth.s:1564   .text:000000000000301e _ATEXE
             forth.s:1577   .text:000000000000303c $d
             forth.s:1577   .text:0000000000003040 _CMOVE
             forth.s:1577   .text:0000000000003046 $t
             forth.s:1577   .text:0000000000003048 CMOVE
             forth.s:1584   .text:000000000000305a CMOV1
             forth.s:1581   .text:0000000000003052 CMOV0
             forth.s:1589   .text:0000000000003064 CMOV2
             forth.s:1597   .text:000000000000306c $d
             forth.s:1597   .text:0000000000003070 _MOVE
             forth.s:1615   .text:00000000000030a2 MOVE1
             forth.s:1612   .text:000000000000309e MOVE3
             forth.s:1609   .text:000000000000309a MOVE0
             forth.s:1620   .text:00000000000030ac MOVE2
             forth.s:1629   .text:00000000000030b4 $d
ARM GAS  forth.s 			page 196


             forth.s:1629   .text:00000000000030b8 _FILL
             forth.s:1637   .text:00000000000030ce FILL2
             forth.s:1633   .text:00000000000030c6 FILL1
             forth.s:1647   .text:00000000000030d6 $d
             forth.s:1647   .text:00000000000030da _PACKS
             forth.s:1647   .text:00000000000030e0 $t
             forth.s:1647   .text:00000000000030e0 PACKS
             forth.s:1649   .text:00000000000030e4 $d
             forth.s:1678   .text:000000000000313c _DIGIT
             forth.s:1678   .text:0000000000003142 $t
             forth.s:1678   .text:0000000000003144 DIGIT
             forth.s:1680   .text:0000000000003148 $d
             forth.s:1695   .text:000000000000317c _EXTRC
             forth.s:1695   .text:0000000000003184 $t
             forth.s:1695   .text:0000000000003184 EXTRC
             forth.s:1697   .text:0000000000003188 $d
             forth.s:1707   .text:000000000000319c _BDIGS
             forth.s:1709   .text:00000000000031a4 $d
             forth.s:1719   .text:00000000000031b8 _HOLD
             forth.s:1721   .text:00000000000031c4 $d
             forth.s:1737   .text:00000000000031e8 _DIG
             forth.s:1737   .text:00000000000031ea $t
             forth.s:1739   .text:00000000000031f0 $d
             forth.s:1751   .text:0000000000003208 _DIGS
             forth.s:1753   .text:0000000000003210 DIGS1
             forth.s:1754   .text:0000000000003210 $d
             forth.s:1759   .text:000000000000322c DIGS2
             forth.s:1769   .text:0000000000003238 _SIGN
             forth.s:1769   .text:0000000000003240 SIGN
             forth.s:1771   .text:0000000000003244 $d
             forth.s:1775   .text:000000000000325c SIGN1
             forth.s:1783   .text:0000000000003264 _EDIGS
             forth.s:1785   .text:000000000000326c $d
             forth.s:1800   .text:0000000000003288 STRR
             forth.s:1801   .text:0000000000003288 $t
             forth.s:1802   .text:000000000000328c $d
             forth.s:1819   .text:00000000000032b8 _HEX
             forth.s:1819   .text:00000000000032bc $t
             forth.s:1819   .text:00000000000032bc HEX
             forth.s:1821   .text:00000000000032c0 $d
             forth.s:1832   .text:00000000000032d8 _BIN
             forth.s:1832   .text:00000000000032dc $t
             forth.s:1832   .text:00000000000032dc BIN
             forth.s:1834   .text:00000000000032e0 $d
             forth.s:1844   .text:00000000000032f8 _DECIM
             forth.s:1844   .text:0000000000003300 $t
             forth.s:1844   .text:0000000000003300 DECIM
             forth.s:1846   .text:0000000000003304 $d
             forth.s:1861   .text:000000000000331c _DIGTQ
             forth.s:1861   .text:0000000000003324 DIGTQ
             forth.s:1863   .text:0000000000003328 $d
             forth.s:1876   .text:0000000000003370 DGTQ1
             forth.s:1889   .text:0000000000003380 $t
             forth.s:1890   .text:0000000000003384 $d
             forth.s:1918   .text:00000000000033e0 $t
             forth.s:1939   .text:00000000000033fa $d
             forth.s:1939   .text:00000000000033fe _INTQ
ARM GAS  forth.s 			page 197


             forth.s:1941   .text:0000000000003408 $d
             forth.s:2010   .text:000000000000351c _SPACE
             forth.s:2010   .text:0000000000003522 $t
             forth.s:2012   .text:0000000000003528 $d
             forth.s:2021   .text:0000000000003538 _SPACS
             forth.s:2021   .text:0000000000003540 SPACS
             forth.s:2023   .text:0000000000003544 $d
             forth.s:2029   .text:0000000000003560 CHAR2
             forth.s:2027   .text:000000000000355c CHAR1
             forth.s:2038   .text:0000000000003570 _TYPEE
             forth.s:2040   .text:000000000000357c $d
             forth.s:2046   .text:0000000000003594 TYPE2
             forth.s:2042   .text:0000000000003588 TYPE1
             forth.s:2056   .text:00000000000035a8 _CR
             forth.s:2058   .text:00000000000035b0 $d
             forth.s:2070   .text:00000000000035cc DOSTR
             forth.s:2071   .text:00000000000035cc $t
             forth.s:2073   .text:00000000000035d0 $d
             forth.s:2091   .text:00000000000035f8 STRQP
             forth.s:2092   .text:00000000000035f8 $t
             forth.s:2093   .text:00000000000035fc $d
             forth.s:2102   .text:0000000000003604 DOTST
             forth.s:2103   .text:0000000000003604 $t
             forth.s:2104   .text:0000000000003608 $d
             forth.s:2115   .text:0000000000003614 $t
             forth.s:2116   .text:0000000000003618 $d
             forth.s:2126   .text:0000000000003628 _DOTR
             forth.s:2126   .text:000000000000362c DOTR
             forth.s:2128   .text:0000000000003630 $d
             forth.s:2143   .text:0000000000003654 _UDOTR
             forth.s:2143   .text:0000000000003658 $t
             forth.s:2143   .text:0000000000003658 UDOTR
             forth.s:2145   .text:000000000000365c $d
             forth.s:2164   .text:0000000000003694 _UDOT
             forth.s:2164   .text:0000000000003698 UDOT
             forth.s:2166   .text:000000000000369c $d
             forth.s:2180   .text:00000000000036bc _DOT
             forth.s:2180   .text:00000000000036be $t
             forth.s:2182   .text:00000000000036c4 $d
             forth.s:2189   .text:00000000000036e8 DOT1
             forth.s:2199   .text:00000000000036fc _DDOT
             forth.s:2199   .text:0000000000003700 DDOT
             forth.s:2201   .text:0000000000003704 $d
             forth.s:2219   .text:0000000000003734 _HDOT
             forth.s:2221   .text:000000000000373c $d
             forth.s:2236   .text:0000000000003760 _QUEST
             forth.s:2236   .text:0000000000003762 $t
             forth.s:2236   .text:0000000000003764 QUEST
             forth.s:2238   .text:0000000000003768 $d
             forth.s:2252   .text:0000000000003774 PARS
             forth.s:2253   .text:0000000000003774 $t
             forth.s:2254   .text:0000000000003778 $d
             forth.s:2320   .text:0000000000003888 PARS8
             forth.s:2284   .text:00000000000037fc PARS3
             forth.s:2267   .text:00000000000037b4 PARS1
             forth.s:2282   .text:00000000000037f8 PARS2
             forth.s:2288   .text:0000000000003808 PARS4
ARM GAS  forth.s 			page 198


             forth.s:2300   .text:0000000000003838 PARS5
             forth.s:2307   .text:000000000000385c PARS6
             forth.s:2313   .text:0000000000003870 PARS7
             forth.s:2331   .text:000000000000389c _PARSE
             forth.s:2331   .text:00000000000038a2 $t
             forth.s:2331   .text:00000000000038a4 PARSE
             forth.s:2333   .text:00000000000038a8 $d
             forth.s:2354   .text:00000000000038e8 _DOTPR
             forth.s:2354   .text:00000000000038ec DOTPR
             forth.s:2356   .text:00000000000038f0 $d
             forth.s:2367   .text:0000000000003908 _PAREN
             forth.s:2367   .text:000000000000390a $t
             forth.s:2367   .text:000000000000390c PAREN
             forth.s:2369   .text:0000000000003910 $d
             forth.s:2380   .text:0000000000003928 _BKSLA
             forth.s:2380   .text:000000000000392a $t
             forth.s:2380   .text:000000000000392c BKSLA
             forth.s:2382   .text:0000000000003930 $d
             forth.s:2393   .text:0000000000003948 _CHAR
             forth.s:2393   .text:0000000000003950 CHAR
             forth.s:2395   .text:0000000000003954 $d
             forth.s:2405   .text:000000000000396c _IMCHAR
             forth.s:2405   .text:0000000000003974 IMCHAR
             forth.s:2407   .text:0000000000003978 $d
             forth.s:3003   .text:000000000000409c LITER
             forth.s:2416   .text:0000000000003988 _WORDD
             forth.s:2416   .text:0000000000003990 WORDD
             forth.s:2418   .text:0000000000003994 $d
             forth.s:2430   .text:00000000000039ac _TOKEN
             forth.s:2430   .text:00000000000039b2 $t
             forth.s:2430   .text:00000000000039b4 TOKEN
             forth.s:2432   .text:00000000000039b8 $d
             forth.s:2597   .text:0000000000003ba8 UPPER
             forth.s:2446   .text:00000000000039cc _NAMET
             forth.s:2446   .text:00000000000039d2 $t
             forth.s:2446   .text:00000000000039d4 NAMET
             forth.s:2448   .text:00000000000039d8 $d
             forth.s:2467   .text:00000000000039f8 _SAMEQ
             forth.s:2467   .text:00000000000039fe $t
             forth.s:2467   .text:0000000000003a00 SAMEQ
             forth.s:2469   .text:0000000000003a04 $d
             forth.s:2486   .text:0000000000003a4c SAME2
             forth.s:2471   .text:0000000000003a10 SAME1
             forth.s:2501   .text:0000000000003a60 FIND
             forth.s:2502   .text:0000000000003a60 $t
             forth.s:2503   .text:0000000000003a64 $d
             forth.s:2510   .text:0000000000003a80 FIND1
             forth.s:2530   .text:0000000000003ad8 FIND6
             forth.s:2523   .text:0000000000003ac0 FIND2
             forth.s:2528   .text:0000000000003ad0 FIND3
             forth.s:2537   .text:0000000000003af0 FIND4
             forth.s:2543   .text:0000000000003b0c FIND5
             forth.s:2559   .text:0000000000003b34 _NAMEQ
             forth.s:2559   .text:0000000000003b3a $t
             forth.s:2559   .text:0000000000003b3c NAMEQ
             forth.s:2561   .text:0000000000003b40 $d
             forth.s:2576   .text:0000000000003b54 _ASCIZ
ARM GAS  forth.s 			page 199


             forth.s:2576   .text:0000000000003b5a $t
             forth.s:2576   .text:0000000000003b5c ASCIZ
             forth.s:2578   .text:0000000000003b60 $d
             forth.s:2597   .text:0000000000003ba0 _UPPER
             forth.s:2597   .text:0000000000003ba6 $t
             forth.s:2599   .text:0000000000003bac $d
             forth.s:2630   .text:0000000000003c30 BKSP
             forth.s:2631   .text:0000000000003c30 $t
             forth.s:2632   .text:0000000000003c34 $d
             forth.s:2646   .text:0000000000003c78 BACK1
             forth.s:2655   .text:0000000000003c7c TAP
             forth.s:2656   .text:0000000000003c7c $t
             forth.s:2657   .text:0000000000003c80 $d
             forth.s:2670   .text:0000000000003c98 KTAP
             forth.s:2671   .text:0000000000003c98 TTAP
             forth.s:2672   .text:0000000000003c98 $t
             forth.s:2673   .text:0000000000003c9c $d
             forth.s:2687   .text:0000000000003cdc KTAP2
             forth.s:2684   .text:0000000000003cd4 KTAP1
             forth.s:2699   .text:0000000000003cf4 _ACCEP
             forth.s:2701   .text:0000000000003d00 $d
             forth.s:2704   .text:0000000000003d0c ACCP1
             forth.s:2720   .text:0000000000003d54 ACCP4
             forth.s:2716   .text:0000000000003d48 ACCP2
             forth.s:2718   .text:0000000000003d4c ACCP3
             forth.s:2731   .text:0000000000003d68 _QUERY
             forth.s:2731   .text:0000000000003d6e $t
             forth.s:2731   .text:0000000000003d70 QUERY
             forth.s:2733   .text:0000000000003d74 $d
             forth.s:2753   .text:0000000000003da8 _ABORT
             forth.s:2753   .text:0000000000003dae $t
             forth.s:2753   .text:0000000000003db0 ABORT
             forth.s:2755   .text:0000000000003db4 ABORT1
             forth.s:2756   .text:0000000000003db4 $d
             forth.s:2887   .text:0000000000003f58 QUIT
             forth.s:2771   .text:0000000000003ddc ABORQ
             forth.s:2772   .text:0000000000003ddc $t
             forth.s:2773   .text:0000000000003de0 $d
             forth.s:2791   .text:0000000000003e04 _INTER
             forth.s:2793   .text:0000000000003e14 $d
             forth.s:2802   .text:0000000000003e50 INTE1
             forth.s:2799   .text:0000000000003e46 $t
             forth.s:2800   .text:0000000000003e48 $d
             forth.s:2806   .text:0000000000003e60 INTE2
             forth.s:2813   .text:0000000000003e68 _LBRAC
             forth.s:2813   .text:0000000000003e6a $t
             forth.s:2813   .text:0000000000003e6c LBRAC
             forth.s:2815   .text:0000000000003e70 $d
             forth.s:2825   .text:0000000000003e88 _DOTOK
             forth.s:2825   .text:0000000000003e8c $t
             forth.s:2825   .text:0000000000003e8c DOTOK
             forth.s:2827   .text:0000000000003e90 $d
             forth.s:2833   .text:0000000000003eb4 DOTO1
             forth.s:2834   .text:0000000000003eb4 $d
             forth.s:2842   .text:0000000000003ec0 _QSTAC
             forth.s:2842   .text:0000000000003ec8 QSTAC
             forth.s:2844   .text:0000000000003ecc $d
ARM GAS  forth.s 			page 200


             forth.s:2846   .text:0000000000003ee2 $t
             forth.s:2847   .text:0000000000003ee4 $d
             forth.s:2854   .text:0000000000003eec _EVAL
             forth.s:2856   .text:0000000000003ef8 EVAL1
             forth.s:2857   .text:0000000000003ef8 $d
             forth.s:2865   .text:0000000000003f20 EVAL2
             forth.s:2875   .text:0000000000003f30 _PRESE
             forth.s:2877   .text:0000000000003f3c $d
             forth.s:2887   .text:0000000000003f50 _QUIT
             forth.s:2888   .text:0000000000003f58 $d
             forth.s:2890   .text:0000000000003f64 QUIT1
             forth.s:2892   .text:0000000000003f68 QUIT2
             forth.s:2902   .text:0000000000003f7c _FORGET
             forth.s:2902   .text:0000000000003f84 FORGET
             forth.s:2904   .text:0000000000003f88 $d
             forth.s:3401   .text:0000000000004520 OVERT
             forth.s:2932   .text:0000000000003fd0 $d
             forth.s:2932   .text:0000000000003fd4 _TICK
             forth.s:2932   .text:0000000000003fd6 $t
             forth.s:2932   .text:0000000000003fd8 TICK
             forth.s:2934   .text:0000000000003fdc $d
             forth.s:2938   .text:0000000000003ff0 TICK1
             forth.s:2946   .text:0000000000003ff8 _ALLOT
             forth.s:2946   .text:0000000000003ffe $t
             forth.s:2946   .text:0000000000004000 ALLOT
             forth.s:2948   .text:0000000000004004 $d
             forth.s:2957   .text:0000000000004014 _COMMA
             forth.s:2957   .text:0000000000004016 $t
             forth.s:2957   .text:0000000000004018 COMMA
             forth.s:2959   .text:000000000000401c $d
             forth.s:2973   .text:0000000000004038 $d
             forth.s:2973   .text:000000000000403c _BCOMP
             forth.s:2973   .text:0000000000004046 $t
             forth.s:2973   .text:0000000000004048 BCOMP
             forth.s:2975   .text:000000000000404c $d
             forth.s:2985   .text:000000000000405c _COMPI
             forth.s:2985   .text:0000000000004064 $t
             forth.s:2985   .text:0000000000004064 COMPI
             forth.s:2987   .text:0000000000004068 $d
             forth.s:3003   .text:0000000000004094 _LITER
             forth.s:3003   .text:000000000000409c $t
             forth.s:3005   .text:00000000000040a0 $d
             forth.s:3440   .text:000000000000457c CALLC
             forth.s:3015   .text:00000000000040b4 STRCQ
             forth.s:3016   .text:00000000000040b4 $t
             forth.s:3017   .text:00000000000040b8 $d
             forth.s:3039   .text:00000000000040f0 _FOR
             forth.s:3039   .text:00000000000040f4 $t
             forth.s:3039   .text:00000000000040f4 FOR
             forth.s:3041   .text:00000000000040f8 $d
             forth.s:3050   .text:0000000000004110 _DO
             forth.s:3050   .text:0000000000004114 DO
             forth.s:3052   .text:0000000000004118 $d
             forth.s:3058   .text:0000000000004144 DOPLOOP
             forth.s:3059   .text:0000000000004144 $t
             forth.s:3075   .text:0000000000004166 $d
             forth.s:3075   .text:000000000000416a _PLOOP
ARM GAS  forth.s 			page 201


             forth.s:3075   .text:0000000000004170 $t
             forth.s:3075   .text:0000000000004170 PLOOP
             forth.s:3077   .text:0000000000004174 $d
             forth.s:3081   .text:0000000000004188 DOLOOP
             forth.s:3082   .text:0000000000004188 $t
             forth.s:3100   .text:00000000000041b0 $d
             forth.s:3100   .text:00000000000041b4 _LOOP
             forth.s:3100   .text:00000000000041bc LOOP
             forth.s:3102   .text:00000000000041c0 $d
             forth.s:3113   .text:00000000000041d8 _BEGIN
             forth.s:3113   .text:00000000000041de $t
             forth.s:3113   .text:00000000000041e0 BEGIN
             forth.s:3115   .text:00000000000041e4 $d
             forth.s:3124   .text:00000000000041ec $d
             forth.s:3124   .text:00000000000041f0 _FNEXT
             forth.s:3124   .text:00000000000041f8 FNEXT
             forth.s:3126   .text:00000000000041fc $d
             forth.s:3134   .text:0000000000004214 _I
             forth.s:3134   .text:0000000000004216 $t
             forth.s:3134   .text:0000000000004218 I
             forth.s:3143   .text:0000000000004224 $d
             forth.s:3143   .text:0000000000004228 _J
             forth.s:3143   .text:000000000000422a $t
             forth.s:3143   .text:000000000000422c J
             forth.s:3153   .text:0000000000004238 $d
             forth.s:3153   .text:000000000000423c _UNTIL
             forth.s:3153   .text:0000000000004242 $t
             forth.s:3153   .text:0000000000004244 UNTIL
             forth.s:3155   .text:0000000000004248 $d
             forth.s:3164   .text:0000000000004260 _AGAIN
             forth.s:3164   .text:0000000000004266 $t
             forth.s:3164   .text:0000000000004268 AGAIN
             forth.s:3166   .text:000000000000426c $d
             forth.s:3175   .text:0000000000004284 _IFF
             forth.s:3175   .text:0000000000004288 IFF
             forth.s:3177   .text:000000000000428c $d
             forth.s:3189   .text:00000000000042b4 _AHEAD
             forth.s:3189   .text:00000000000042ba $t
             forth.s:3189   .text:00000000000042bc AHEAD
             forth.s:3191   .text:00000000000042c0 $d
             forth.s:3203   .text:00000000000042e8 _REPEA
             forth.s:3203   .text:00000000000042f0 REPEA
             forth.s:3205   .text:00000000000042f4 $d
             forth.s:3216   .text:000000000000430c _THENN
             forth.s:3216   .text:0000000000004314 THENN
             forth.s:3218   .text:0000000000004318 $d
             forth.s:3229   .text:000000000000432c _AFT
             forth.s:3229   .text:0000000000004330 $t
             forth.s:3229   .text:0000000000004330 AFT
             forth.s:3231   .text:0000000000004334 $d
             forth.s:3243   .text:000000000000434c _ELSEE
             forth.s:3243   .text:0000000000004354 ELSEE
             forth.s:3245   .text:0000000000004358 $d
             forth.s:3255   .text:000000000000436c _WHILE
             forth.s:3255   .text:0000000000004372 $t
             forth.s:3255   .text:0000000000004374 WHILE
             forth.s:3257   .text:0000000000004378 $d
ARM GAS  forth.s 			page 202


             forth.s:3266   .text:0000000000004388 _ABRTQ
             forth.s:3266   .text:0000000000004390 ABRTQ
             forth.s:3268   .text:0000000000004394 $d
             forth.s:3277   .text:00000000000043ac _STRQ
             forth.s:3277   .text:00000000000043b0 STRQ
             forth.s:3279   .text:00000000000043b4 $d
             forth.s:3289   .text:00000000000043cc _DOTQ
             forth.s:3289   .text:00000000000043d0 DOTQ
             forth.s:3291   .text:00000000000043d4 $d
             forth.s:3305   .text:00000000000043ec _UNIQU
             forth.s:3305   .text:00000000000043f4 $t
             forth.s:3305   .text:00000000000043f4 UNIQU
             forth.s:3307   .text:00000000000043f8 $d
             forth.s:3314   .text:0000000000004420 UNIQ1
             forth.s:3311   .text:0000000000004414 $d
             forth.s:3324   .text:0000000000004428 SNAME
             forth.s:3325   .text:0000000000004428 $t
             forth.s:3326   .text:000000000000442c $d
             forth.s:3342   .text:0000000000004470 SNAM1
             forth.s:3354   .text:0000000000004484 _SCOMP
             forth.s:3354   .text:0000000000004490 SCOMP
             forth.s:3356   .text:0000000000004494 $d
             forth.s:3368   .text:00000000000044cc SCOM2
             forth.s:3365   .text:00000000000044c4 SCOM1
             forth.s:3373   .text:00000000000044e0 SCOM3
             forth.s:3382   .text:00000000000044e8 COLON_ABORT
             forth.s:3383   .text:00000000000044e8 $t
             forth.s:3384   .text:00000000000044ec $d
             forth.s:3401   .text:0000000000004518 _OVERT
             forth.s:3401   .text:000000000000451e $t
             forth.s:3403   .text:0000000000004524 $d
             forth.s:3414   .text:000000000000453c _SEMIS
             forth.s:3414   .text:000000000000453e $t
             forth.s:3414   .text:0000000000004540 SEMIS
             forth.s:3416   .text:0000000000004544 $d
             forth.s:3428   .text:0000000000004560 _RBRAC
             forth.s:3428   .text:0000000000004562 $t
             forth.s:3428   .text:0000000000004564 RBRAC
             forth.s:3430   .text:0000000000004568 $d
             forth.s:3441   .text:000000000000457c $t
             forth.s:3442   .text:0000000000004580 $d
             forth.s:3454   .text:0000000000004598 _COLON
             forth.s:3454   .text:000000000000459a $t
             forth.s:3454   .text:000000000000459c COLON
             forth.s:3456   .text:00000000000045a0 $d
             forth.s:3467   .text:00000000000045b8 _IMMED
             forth.s:3467   .text:00000000000045c2 $t
             forth.s:3467   .text:00000000000045c4 IMMED
             forth.s:3469   .text:00000000000045c8 $d
             forth.s:3487   .text:00000000000045f4 _CONST
             forth.s:3487   .text:0000000000004600 CONST
             forth.s:3489   .text:0000000000004604 $d
             forth.s:3500   .text:0000000000004634 $t
             forth.s:3507   .text:0000000000004634 DODOES
             forth.s:3509   .text:0000000000004638 $d
             forth.s:3524   .text:000000000000465c $d
             forth.s:3524   .text:0000000000004660 _DOES
ARM GAS  forth.s 			page 203


             forth.s:3524   .text:0000000000004666 $t
             forth.s:3524   .text:0000000000004668 DOES
             forth.s:3526   .text:000000000000466c $d
             forth.s:3541   .text:000000000000469c _DEFERAT
             forth.s:3541   .text:00000000000046a4 DEFERAT
             forth.s:3543   .text:00000000000046a8 $d
             forth.s:3553   .text:00000000000046c0 _DEFERSTO
             forth.s:3553   .text:00000000000046c8 DEFERSTO
             forth.s:3555   .text:00000000000046cc $d
             forth.s:3566   .text:00000000000046e8 _DEFER
             forth.s:3566   .text:00000000000046ee $t
             forth.s:3566   .text:00000000000046f0 DEFER
             forth.s:3568   .text:00000000000046f4 $d
             forth.s:3589   .text:0000000000004740 CREAT
             forth.s:3579   .text:0000000000004728 DEFER_NOP
             forth.s:3580   .text:0000000000004728 $t
             forth.s:3581   .text:000000000000472c $d
             forth.s:3589   .text:0000000000004738 _CREAT
             forth.s:3591   .text:0000000000004744 $d
             forth.s:3604   .text:0000000000004768 _VARIA
             forth.s:3604   .text:0000000000004774 VARIA
             forth.s:3606   .text:0000000000004778 $d
             forth.s:3623   .text:0000000000004798 DMP
             forth.s:3624   .text:0000000000004798 $t
             forth.s:3625   .text:000000000000479c $d
             forth.s:3637   .text:00000000000047d4 PDUM2
             forth.s:3631   .text:00000000000047bc PDUM1
             forth.s:3649   .text:00000000000047e0 $d
             forth.s:3649   .text:00000000000047e4 _DUMP
             forth.s:3649   .text:00000000000047ec DUMP
             forth.s:3651   .text:00000000000047f0 $d
             forth.s:3669   .text:0000000000004840 DUMP4
             forth.s:3659   .text:0000000000004818 DUMP1
             forth.s:3671   .text:0000000000004848 DUMP3
             forth.s:3684   .text:000000000000485c TDOT
             forth.s:3685   .text:000000000000485c $t
             forth.s:3686   .text:0000000000004860 $d
             forth.s:3725   .text:00000000000048f0 _DOTS
             forth.s:3725   .text:00000000000048f4 DOTS
             forth.s:3727   .text:00000000000048f8 $d
             forth.s:3734   .text:0000000000004914 DOTS2
             forth.s:3730   .text:0000000000004908 DOTS1
             forth.s:3739   .text:0000000000004924 RPAT
             forth.s:3740   .text:0000000000004924 $t
             forth.s:3744   .text:000000000000492e RBASE
             forth.s:3753   .text:000000000000493e RDOT
             forth.s:3755   .text:0000000000004942 $d
             forth.s:3782   .text:00000000000049a6 _TRACE
             forth.s:3782   .text:00000000000049ac $t
             forth.s:3782   .text:00000000000049ac TRACE
             forth.s:3784   .text:00000000000049b0 $d
             forth.s:3803   .text:00000000000049f4 _TNAME
             forth.s:3803   .text:00000000000049fa $t
             forth.s:3803   .text:00000000000049fc TNAME
             forth.s:3805   .text:0000000000004a00 $d
             forth.s:3808   .text:0000000000004a0c TNAM1
             forth.s:3819   .text:0000000000004a40 TNAM2
ARM GAS  forth.s 			page 204


             forth.s:3828   .text:0000000000004a50 _DOTID
             forth.s:3828   .text:0000000000004a54 $t
             forth.s:3828   .text:0000000000004a54 DOTID
             forth.s:3830   .text:0000000000004a58 $d
             forth.s:3837   .text:0000000000004a7c DOTI1
             forth.s:3838   .text:0000000000004a8a $t
             forth.s:3839   .text:0000000000004a8c $d
             forth.s:3841   *ABS*:0000000000000000 WANT_SEE
             forth.s:3914   .text:0000000000004a94 _VLIST
             forth.s:3914   .text:0000000000004a9a $t
             forth.s:3914   .text:0000000000004a9c VLIST
             forth.s:3916   .text:0000000000004aa0 $d
             forth.s:3927   .text:0000000000004ac0 WORDS
             forth.s:3948   .text:0000000000004b04 WC
             forth.s:3927   .text:0000000000004ab8 _WORDS
             forth.s:3927   .text:0000000000004abe $t
             forth.s:3929   .text:0000000000004ac4 $d
             forth.s:3932   .text:0000000000004ad0 WORS1
             forth.s:3941   .text:0000000000004af8 WORS2
             forth.s:3948   .text:0000000000004b00 _WC
             forth.s:3950   .text:0000000000004b08 $d
             forth.s:3967   .text:0000000000004b44 _MARK
             forth.s:3967   .text:0000000000004b4c MARK
             forth.s:3969   .text:0000000000004b50 $d
             forth.s:3972   .text:0000000000004b5c $t
             forth.s:3973   .text:0000000000004b60 $d
             forth.s:3994   .text:0000000000004b8c VERSN
             forth.s:3995   .text:0000000000004b8c $t
             forth.s:3996   .text:0000000000004b90 $d
             forth.s:4004   .text:0000000000004ba0 _HI
             forth.s:4006   .text:0000000000004ba8 $d
             forth.s:4007   .text:0000000000004bc2 $t
             forth.s:4008   .text:0000000000004bc4 $d
             forth.s:4030   .text:0000000000004c10 PS2_QUERY
             forth.s:4031   .text:0000000000004c10 $t
             forth.s:4032   .text:0000000000004c14 $d
             forth.s:4046   .text:0000000000004c7a $t
             forth.s:4047   .text:0000000000004c7c $d
             forth.s:4057   .text:0000000000004c88 IF_SENSE
             forth.s:4058   .text:0000000000004c88 $t
             forth.s:4059   .text:0000000000004c8c $d
             forth.s:4085   .text:0000000000004cdc COLD1
             forth.s:4086   .text:0000000000004cdc $d
             forth.s:4101   .text:0000000000004d2c COLD2
             forth.s:4104   .text:0000000000004d2c $d
             forth.s:4107   .text:0000000000004d30 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:0000000000000547 $d
          ser-term.s:90     .text:0000000000000548 $t
          ser-term.s:110    .text:0000000000000581 $d
          ser-term.s:110    .text:0000000000000582 $t
          ser-term.s:133    .text:00000000000005bf $d
          ser-term.s:133    .text:00000000000005c0 $t
          ser-term.s:164    .text:0000000000000607 $d
          ser-term.s:164    .text:0000000000000608 $t
          ser-term.s:191    .text:000000000000067d $d
ARM GAS  forth.s 			page 205


          ser-term.s:191    .text:000000000000067e $t
          ser-term.s:203    .text:00000000000006ab $d
          ser-term.s:203    .text:00000000000006ac $t
             tvout.s:264    .text:00000000000008f7 $d
             tvout.s:264    .text:00000000000008f8 $t
             tvout.s:278    .text:000000000000092b $d
             tvout.s:278    .text:000000000000092c $t
             tvout.s:306    .text:0000000000000985 $d
             tvout.s:306    .text:0000000000000986 $t
             tvout.s:325    .text:00000000000009b3 $d
             tvout.s:325    .text:00000000000009b4 $t
             tvout.s:427    .text:0000000000000aed $d
             tvout.s:427    .text:0000000000000aee $t
             tvout.s:448    .text:0000000000000b47 $d
             tvout.s:448    .text:0000000000000b48 $t
             tvout.s:495    .text:0000000000000bdd $d
             tvout.s:495    .text:0000000000000bde $t
           ps2_kbd.s:307    .text:00000000000012cb $d
           ps2_kbd.s:307    .text:00000000000012cc $t
           ps2_kbd.s:396    .text:00000000000013c7 $d
           ps2_kbd.s:396    .text:00000000000013c8 $t
           ps2_kbd.s:616    .text:0000000000001669 $d
           ps2_kbd.s:616    .text:000000000000166a $t
           ps2_kbd.s:633    .text:00000000000016a3 $d
           ps2_kbd.s:633    .text:00000000000016a4 $t
         spi-flash.s:83     .text:000000000000178f $d
         spi-flash.s:83     .text:0000000000001790 $t
         spi-flash.s:149    .text:000000000000185b $d
         spi-flash.s:149    .text:000000000000185c $t
         spi-flash.s:236    .text:000000000000199f $d
         spi-flash.s:236    .text:00000000000019a0 $t
         spi-flash.s:254    .text:00000000000019db $d
         spi-flash.s:254    .text:00000000000019dc $t
         spi-flash.s:276    .text:0000000000001a2f $d
         spi-flash.s:276    .text:0000000000001a30 $t
             float.s:47     .text:0000000000001a91 $d
             float.s:47     .text:0000000000001a92 $t
             float.s:65     .text:0000000000001ac3 $d
             float.s:65     .text:0000000000001ac4 $t
             float.s:219    .text:0000000000001c9f $d
             float.s:219    .text:0000000000001ca0 $t
             float.s:288    .text:0000000000001dc3 $d
             float.s:288    .text:0000000000001dc4 $t
             float.s:344    .text:0000000000001eaf $d
             float.s:344    .text:0000000000001eb0 $t
             float.s:385    .text:0000000000001f57 $d
             float.s:385    .text:0000000000001f58 $t
             float.s:452    .text:0000000000002057 $d
             float.s:452    .text:0000000000002058 $t
             float.s:465    .text:000000000000207b $d
             float.s:465    .text:000000000000207c $t
             float.s:496    .text:00000000000020d9 $d
             float.s:496    .text:00000000000020da $t
             float.s:512    .text:000000000000210f $d
             float.s:512    .text:0000000000002110 $t
             float.s:526    .text:0000000000002141 $d
             float.s:526    .text:0000000000002142 $t
ARM GAS  forth.s 			page 206


             float.s:541    .text:0000000000002173 $d
             float.s:541    .text:0000000000002174 $t
             float.s:552    .text:000000000000218f $d
             float.s:552    .text:0000000000002190 $t
             float.s:648    .text:00000000000022c3 $d
             float.s:648    .text:00000000000022c4 $t
             float.s:717    .text:00000000000023d3 $d
             float.s:717    .text:00000000000023d4 $t
             forth.s:132    .text:0000000000002447 $d
             forth.s:132    .text:0000000000002448 $t
             forth.s:154    .text:0000000000002481 $d
             forth.s:154    .text:0000000000002482 $t
             forth.s:190    .text:000000000000249f $d
             forth.s:190    .text:00000000000024a0 $t
             forth.s:237    .text:000000000000254d $d
             forth.s:237    .text:000000000000254e $t
             forth.s:332    .text:00000000000025dd $d
             forth.s:332    .text:00000000000025de $t
             forth.s:357    .text:000000000000260b $d
             forth.s:357    .text:000000000000260c $t
             forth.s:367    .text:000000000000261f $d
             forth.s:367    .text:0000000000002620 $t
             forth.s:375    .text:000000000000262b $d
             forth.s:375    .text:000000000000262c $t
             forth.s:384    .text:000000000000263d $d
             forth.s:384    .text:000000000000263e $t
             forth.s:393    .text:0000000000002651 $d
             forth.s:393    .text:0000000000002652 $t
             forth.s:429    .text:0000000000002699 $d
             forth.s:429    .text:000000000000269a $t
             forth.s:445    .text:00000000000026bb $d
             forth.s:445    .text:00000000000026bc $t
             forth.s:455    .text:00000000000026cd $d
             forth.s:455    .text:00000000000026ce $t
             forth.s:464    .text:00000000000026df $d
             forth.s:464    .text:00000000000026e0 $t
             forth.s:481    .text:0000000000002701 $d
             forth.s:481    .text:0000000000002702 $t
             forth.s:511    .text:0000000000002747 $d
             forth.s:511    .text:0000000000002748 $t
             forth.s:520    .text:000000000000275d $d
             forth.s:520    .text:000000000000275e $t
             forth.s:568    .text:00000000000027b7 $d
             forth.s:568    .text:00000000000027b8 $t
             forth.s:579    .text:00000000000027cb $d
             forth.s:579    .text:00000000000027cc $t
             forth.s:587    .text:00000000000027d9 $d
             forth.s:587    .text:00000000000027da $t
             forth.s:595    .text:00000000000027e9 $d
             forth.s:595    .text:00000000000027ea $t
             forth.s:603    .text:00000000000027f9 $d
             forth.s:603    .text:00000000000027fa $t
             forth.s:627    .text:0000000000002829 $d
             forth.s:627    .text:000000000000282a $t
             forth.s:652    .text:000000000000285d $d
             forth.s:652    .text:000000000000285e $t
             forth.s:660    .text:000000000000286d $d
ARM GAS  forth.s 			page 207


             forth.s:660    .text:000000000000286e $t
             forth.s:668    .text:000000000000287f $d
             forth.s:668    .text:0000000000002880 $t
             forth.s:689    .text:00000000000028a7 $d
             forth.s:689    .text:00000000000028a8 $t
             forth.s:718    .text:00000000000028e3 $d
             forth.s:718    .text:00000000000028e4 $t
             forth.s:728    .text:00000000000028f7 $d
             forth.s:728    .text:00000000000028f8 $t
             forth.s:741    .text:0000000000002915 $d
             forth.s:741    .text:0000000000002916 $t
             forth.s:794    .text:000000000000298d $d
             forth.s:794    .text:000000000000298e $t
             forth.s:812    .text:00000000000029b1 $d
             forth.s:812    .text:00000000000029b2 $t
             forth.s:835    .text:00000000000029df $d
             forth.s:835    .text:00000000000029e0 $t
             forth.s:848    .text:00000000000029ff $d
             forth.s:848    .text:0000000000002a00 $t
             forth.s:872    .text:0000000000002a2f $d
             forth.s:872    .text:0000000000002a30 $t
             forth.s:918    .text:0000000000002a87 $d
             forth.s:918    .text:0000000000002a88 $t
             forth.s:930    .text:0000000000002a9f $d
             forth.s:930    .text:0000000000002aa0 $t
             forth.s:942    .text:0000000000002abb $d
             forth.s:942    .text:0000000000002abc $t
             forth.s:1003   .text:0000000000002b17 $d
             forth.s:1003   .text:0000000000002b18 $t
             forth.s:1012   .text:0000000000002b2b $d
             forth.s:1012   .text:0000000000002b2c $t
             forth.s:1039   .text:0000000000002b67 $d
             forth.s:1039   .text:0000000000002b68 $t
             forth.s:1058   .text:0000000000002b85 $d
             forth.s:1058   .text:0000000000002b86 $t
             forth.s:1077   .text:0000000000002baf $d
             forth.s:1077   .text:0000000000002bb0 $t
             forth.s:1117   .text:0000000000002c01 $d
             forth.s:1117   .text:0000000000002c02 $t
             forth.s:1137   .text:0000000000002c2d $d
             forth.s:1137   .text:0000000000002c2e $t
             forth.s:1151   .text:0000000000002c4b $d
             forth.s:1151   .text:0000000000002c4c $t
             forth.s:1162   .text:0000000000002c69 $d
             forth.s:1162   .text:0000000000002c6a $t
             forth.s:1179   .text:0000000000002c87 $d
             forth.s:1179   .text:0000000000002c88 $t
             forth.s:1196   .text:0000000000002cb3 $d
             forth.s:1196   .text:0000000000002cb4 $t
             forth.s:1331   .text:0000000000002dff $d
             forth.s:1331   .text:0000000000002e00 $t
             forth.s:1353   .text:0000000000002e4b $d
             forth.s:1353   .text:0000000000002e4c $t
             forth.s:1402   .text:0000000000002e8b $d
             forth.s:1402   .text:0000000000002e8c $t
             forth.s:1453   .text:0000000000002f03 $d
             forth.s:1453   .text:0000000000002f04 $t
ARM GAS  forth.s 			page 208


             forth.s:1512   .text:0000000000002fad $d
             forth.s:1512   .text:0000000000002fae $t
             forth.s:1530   .text:0000000000002fd5 $d
             forth.s:1530   .text:0000000000002fd6 $t
             forth.s:1564   .text:0000000000003027 $d
             forth.s:1564   .text:0000000000003028 $t
             forth.s:1597   .text:0000000000003075 $d
             forth.s:1597   .text:0000000000003076 $t
             forth.s:1629   .text:00000000000030bd $d
             forth.s:1629   .text:00000000000030be $t
             forth.s:1707   .text:000000000000319f $d
             forth.s:1707   .text:00000000000031a0 $t
             forth.s:1719   .text:00000000000031bd $d
             forth.s:1719   .text:00000000000031be $t
             forth.s:1751   .text:000000000000320b $d
             forth.s:1751   .text:000000000000320c $t
             forth.s:1769   .text:000000000000323d $d
             forth.s:1769   .text:000000000000323e $t
             forth.s:1783   .text:0000000000003267 $d
             forth.s:1783   .text:0000000000003268 $t
             forth.s:1861   .text:0000000000003323 $d
             forth.s:1861   .text:0000000000003324 $t
             forth.s:1939   .text:0000000000003403 $d
             forth.s:1939   .text:0000000000003404 $t
             forth.s:2021   .text:000000000000353f $d
             forth.s:2021   .text:0000000000003540 $t
             forth.s:2038   .text:0000000000003575 $d
             forth.s:2038   .text:0000000000003576 $t
             forth.s:2056   .text:00000000000035ab $d
             forth.s:2056   .text:00000000000035ac $t
             forth.s:2126   .text:000000000000362b $d
             forth.s:2126   .text:000000000000362c $t
             forth.s:2164   .text:0000000000003697 $d
             forth.s:2164   .text:0000000000003698 $t
             forth.s:2199   .text:00000000000036ff $d
             forth.s:2199   .text:0000000000003700 $t
             forth.s:2219   .text:0000000000003737 $d
             forth.s:2219   .text:0000000000003738 $t
             forth.s:2354   .text:00000000000038eb $d
             forth.s:2354   .text:00000000000038ec $t
             forth.s:2393   .text:000000000000394d $d
             forth.s:2393   .text:000000000000394e $t
             forth.s:2405   .text:0000000000003973 $d
             forth.s:2405   .text:0000000000003974 $t
             forth.s:2416   .text:000000000000398d $d
             forth.s:2416   .text:000000000000398e $t
             forth.s:2699   .text:0000000000003cfb $d
             forth.s:2699   .text:0000000000003cfc $t
             forth.s:2791   .text:0000000000003e0f $d
             forth.s:2791   .text:0000000000003e10 $t
             forth.s:2842   .text:0000000000003ec7 $d
             forth.s:2842   .text:0000000000003ec8 $t
             forth.s:2854   .text:0000000000003ef1 $d
             forth.s:2854   .text:0000000000003ef2 $t
             forth.s:2875   .text:0000000000003f37 $d
             forth.s:2875   .text:0000000000003f38 $t
             forth.s:2887   .text:0000000000003f55 $d
ARM GAS  forth.s 			page 209


             forth.s:2887   .text:0000000000003f56 $t
             forth.s:2902   .text:0000000000003f83 $d
             forth.s:2902   .text:0000000000003f84 $t
             forth.s:3050   .text:0000000000004113 $d
             forth.s:3050   .text:0000000000004114 $t
             forth.s:3100   .text:00000000000041b9 $d
             forth.s:3100   .text:00000000000041ba $t
             forth.s:3124   .text:00000000000041f5 $d
             forth.s:3124   .text:00000000000041f6 $t
             forth.s:3175   .text:0000000000004287 $d
             forth.s:3175   .text:0000000000004288 $t
             forth.s:3203   .text:00000000000042ef $d
             forth.s:3203   .text:00000000000042f0 $t
             forth.s:3216   .text:0000000000004311 $d
             forth.s:3216   .text:0000000000004312 $t
             forth.s:3243   .text:0000000000004351 $d
             forth.s:3243   .text:0000000000004352 $t
             forth.s:3266   .text:000000000000438f $d
             forth.s:3266   .text:0000000000004390 $t
             forth.s:3277   .text:00000000000043af $d
             forth.s:3277   .text:00000000000043b0 $t
             forth.s:3289   .text:00000000000043cf $d
             forth.s:3289   .text:00000000000043d0 $t
             forth.s:3354   .text:000000000000448d $d
             forth.s:3354   .text:000000000000448e $t
             forth.s:3487   .text:00000000000045fd $d
             forth.s:3487   .text:00000000000045fe $t
             forth.s:3541   .text:00000000000046a3 $d
             forth.s:3541   .text:00000000000046a4 $t
             forth.s:3553   .text:00000000000046c7 $d
             forth.s:3553   .text:00000000000046c8 $t
             forth.s:3589   .text:000000000000473f $d
             forth.s:3589   .text:0000000000004740 $t
             forth.s:3604   .text:0000000000004771 $d
             forth.s:3604   .text:0000000000004772 $t
             forth.s:3649   .text:00000000000047e9 $d
             forth.s:3649   .text:00000000000047ea $t
             forth.s:3725   .text:00000000000048f3 $d
             forth.s:3725   .text:00000000000048f4 $t
             forth.s:3948   .text:0000000000004b03 $d
             forth.s:3948   .text:0000000000004b04 $t
             forth.s:3967   .text:0000000000004b49 $d
             forth.s:3967   .text:0000000000004b4a $t
             forth.s:4004   .text:0000000000004ba3 $d
             forth.s:4004   .text:0000000000004ba4 $t
             forth.s:4079   .text:0000000000004cc5 $d
             forth.s:4079   .text:0000000000004cc6 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
