ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      6BFA5DF8 
 157      04EB
 158 000a DFF83CC8 	  ldr IP,=dh
 159 000e 02F0F5BC 	  b INEXT  
 160              	dh:
 161 0012 F1470000 	  _ADR PRESE
 162 0016 893D0000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 4D2A0000 	  _ADR CFSR 
 164 0038 3D2D0000 	  _ADR DUPP
 165 003c B92C0000 	  _ADR TOR 
 166 0040 C32B0000 	  _DOLIT 16 
 166      10000000 
 167 0048 31320000 	  _ADR BASE 
 168 004c 352C0000 	  _ADR STORE 
 169 0050 113E0000 	  _ADR UDOT 
 170 0054 893D0000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 752C0000 	  _ADR RFROM
 172 0068 C32B0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 812D0000 	  _ADR ANDD
 174 0074 032C0000 	  _QBRAN 1f
 174      94000000 
 175 007c 712A0000 	  _ADR BFAR
 176 0080 C32B0000 	  _DOLIT ','
 176      2C000000 
 177 0088 CD2A0000 	  _ADR EMIT 
 178 008c 993C0000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 113E0000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 893D0000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 4D1F0000 	  _ADR FPSCR
 184 00a8 113E0000 	  _ADR UDOT 
 185              	1:
 186 00ac 79040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F0DFFA 	  bl nvic_disable_irq 
 199 00ba DFF890C7 	  ldr IP,=fpu_except
 200 00be 02F09DBC 	  b INEXT 
 201              	fpu_except:  
 202 00c2 F1470000 	  _ADR PRESE
 203 00c6 213D0000 	  _ADR CR 
 204 00ca 31320000 	  _ADR BASE 
 205 00ce 492C0000 	  _ADR AT 
 206 00d2 B92C0000 	  _ADR TOR  
 207 00d6 C32B0000 	  _DOLIT 16 
 207      10000000 
 208 00de 31320000 	  _ADR BASE 
 209 00e2 352C0000 	  _ADR STORE 
 210 00e6 893D0000 	  _DOTQP 21 , "fpu exception FPSCR: "
 210      15667075 
 210      20657863 
 210      65707469 
 210      6F6E2046 
 211 0100 4D1F0000 	  _ADR FPSCR 
 212 0104 3D2D0000 	  _ADR DUPP 
 213 0108 393E0000 	  _ADR DOT
 214 010c 112F0000 	  _ADR QDUP 
 215 0110 032C0000 	  _QBRAN 2f 
 215      A8010000 
 216 0118 C32B0000 	  _DOLIT ',' 
 216      2C000000 
 217 0120 CD2A0000 	  _ADR EMIT 
 218 0124 C32B0000 	  _DOLIT ' ' 
 218      20000000 
 219 012c CD2A0000 	  _ADR EMIT
 220 0130 3D2D0000 	  _ADR DUPP 
 221 0134 C32B0000 	  _DOLIT 0x10 
 221      10000000 
 222 013c 812D0000 	  _ADR ANDD
 223 0140 112F0000 	  _ADR QDUP  
ARM GAS  forth.s 			page 16


 224 0144 032C0000 	  _QBRAN 1f 
 224      64010000 
 225 014c C32B0000 	  _DOLIT fpu_exceptions
 225      E8010000 
 226 0154 012E0000 	  _ADR PLUS 
 227 0158 492C0000 	  _ADR AT 
 228 015c 91310000 	  _ADR COUNT 
 229 0160 ED3C0000 	  _ADR TYPEE
 230 0164 C32B0000 	1: _DOLIT 15 
 230      0F000000 
 231 016c 812D0000 	  _ADR ANDD
 232 0170 45300000 	  _ADR CLZ 
 233 0174 C32B0000 	  _DOLIT 31 
 233      1F000000 
 234 017c 4D2D0000 	  _ADR SWAP 
 235 0180 112E0000 	  _ADR SUBB 
 236 0184 C32B0000 	  _DOLIT 2 
 236      02000000 
 237 018c F12D0000 	  _ADR LSHIFT 
 238 0190 C32B0000 	  _DOLIT fpu_exceptions 
 238      E8010000 
 239 0198 012E0000 	  _ADR PLUS 
 240 019c 492C0000 	  _ADR AT 
 241 01a0 91310000 	  _ADR COUNT 
 242 01a4 ED3C0000 	  _ADR TYPEE 
 243 01a8 213D0000 	2: _ADR CR 
 244 01ac C32B0000 	  _DOLIT 0
 244      00000000 
 245 01b4 6D1F0000 	  _ADR CLR_FPSCR 
 246 01b8 752C0000 	  _ADR RFROM  
 247 01bc 31320000 	  _ADR BASE 
 248 01c0 352C0000 	  _ADR STORE 
 249 01c4 C9010000 	  _ADR exit_fpu_isr // reset_mcu 
 250              	
 251              	exit_fpu_isr:
 252 01c8 DFF884C6 	   ldr IP,=QUIT  
 253 01cc 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 253      CEF20000 
 254 01d4 81EA0101 	   eor r1,r1 
 255 01d8 4160     	   str r1,[r0,#SCB_ICSR]
 256 01da 4FF05100 	   mov r0,#FPU_IRQ 
 257 01de 00F036FA 	   bl nvic_enable_irq 
 258 01e2 5DF804EB 	   pop {lr}
 259 01e6 7047     	   bx lr 
 260              	
 261              	
 262              	  .p2align 2 
 263              	// fpu exception 
 264 01e8 FC010000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 264      10020000 
 264      20020000 
 264      2C020000 
 264      38020000 
 265              	
 266              	  .p2align 2 
 267              	fpu_except_invalid_op: // bit 0  
 268 01fc 12       	  .byte 18
ARM GAS  forth.s 			page 17


 269 01fd 20696E76 	  .ascii " invalid operation" 
 269      616C6964 
 269      206F7065 
 269      72617469 
 269      6F6E
 270              	                      
 271 020f 00       	  .p2align 2 
 272              	fpu_except_div0: // bit 1 
 273 0210 0E       	  .byte 14 
 274 0211 20646976 	  .ascii " division by 0" 
 274      6973696F 
 274      6E206279 
 274      2030
 275              	
 276 021f 00       	  .p2align 2 
 277              	fpu_except_overflow: // bit 2
 278 0220 09       	  .byte 9 
 279 0221 206F7665 	  .ascii " overflow"
 279      72666C6F 
 279      77
 280              	
 281 022a 00BF     	  .p2align 2 
 282              	fpu_except_underflow:  // bit 3 
 283 022c 0A       	  .byte 10
 284 022d 20756E64 	  .ascii " underflow"
 284      6572666C 
 284      6F77
 285              	
 286 0237 00       	  .p2align 2 
 287              	fpu_except_inexact: // bit 4 
 288 0238 0A       	  .byte 10 
 289 0239 20696E65 	  .ascii " inexact, "
 289      78616374 
 289      2C20
 290              	
 291              	
 292              	/*********************************
 293              	  non maskable interrupt handler
 294              	  irq -14 
 295              	*********************************/
 296              	  .type nmi_handler, %function
 297 0243 00       	  .p2align 2
 298              	  .global nmi_handler 
 299              	nmi_handler:
 300 0244 DFF80CC6 	  ldr IP,=nmi_hl 
 301 0248 02F0D8BB 	  b  INEXT
 302              	nmi_hl:
 303 024c F1470000 	  _ADR PRESE 
 304 0250 213D0000 	  _ADR CR 
 305 0254 893D0000 	  _DOTQP  25 , "not managed nmi exception"
 305      196E6F74 
 305      206D616E 
 305      61676564 
 305      206E6D69 
 306 0274 213D0000 	  _ADR CR 
 307 0278 69460000 	  _ADR ABORT 
 308              	   
ARM GAS  forth.s 			page 18


 309              	
 310              	/***********************************
 311              	   hard fault handler
 312              	   irq -13
 313              	***********************************/
 314              	  .type hardfault_handler, %function
 315              	  .p2align 2
 316              	  .global hardfault_handler 
 317              	hardfault_handler:
 318 027c 4FF00000 	  _MOV32 r0,RAM_END 
 318      C2F20200 
 319 0284 8546     	  mov sp,r0 
 320 0286 DFF8D0C5 	  ldr IP,=hardfault_hl 
 321 028a 02F0B7BB 	  b INEXT
 322              	hardfault_hl:
 323 028e F1470000 	  _ADR PRESE
 324 0292 213D0000 	  _ADR CR  
 325 0296 893D0000 	  _DOTQP  20 , "hard fault exception"
 325      14686172 
 325      64206661 
 325      756C7420 
 325      65786365 
 326 02b0 213D0000 	  _ADR CR 
 327 02b4 79040000 	  _ADR reset_mcu
 328              	
 329              	/***********************************
 330              	   memory manager fault 
 331              	   irq -12 
 332              	************************************/
 333              	  .type memfault_handler, %function
 334              	  .p2align 2
 335              	  .global memfault_handler 
 336              	memfault_handler:
 337 02b8 4FF00000 	  _MOV32 r0,RAM_END 
 337      C2F20200 
 338 02c0 8546     	  mov sp,r0 
 339 02c2 DFF898C5 	  ldr IP,=memfault_hl 
 340 02c6 02F099BB 	  b INEXT 
 341              	memfault_hl: 
 342 02ca F1470000 	  _ADR PRESE
 343 02ce 213D0000 	  _ADR CR  
 344 02d2 893D0000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 344      216D656D 
 344      6F727920 
 344      6D616E61 
 344      67657220 
 345 02f8 C32B0000 	  _DOLIT 16 
 345      10000000 
 346 0300 31320000 	  _ADR BASE 
 347 0304 352C0000 	  _ADR STORE   
 348 0308 4D2A0000 	  _ADR CFSR
 349 030c C32B0000 	  _DOLIT 255 
 349      FF000000 
 350 0314 812D0000 	  _ADR ANDD 
 351 0318 113E0000 	  _ADR UDOT 
 352 031c 213D0000 	  _ADR CR 
 353 0320 79040000 	  _ADR reset_mcu 
ARM GAS  forth.s 			page 19


 354              	
 355              	
 356              	/************************************
 357              	   bus fault 
 358              	   irq -11 
 359              	***********************************/
 360              	  .type busfault_handler, %function
 361              	  .p2align 2
 362              	  .global busfault_handler 
 363              	busfault_handler:
 364 0324 4FF00000 	  _MOV32 r0,RAM_END 
 364      C2F20200 
 365 032c 8546     	  mov sp,r0 
 366 032e DFF830C5 	  ldr IP,=busfault_hl 
 367 0332 02F063BB 	  b INEXT 
 368              	busfault_hl:
 369 0336 F1470000 	  _ADR PRESE
 370 033a C32B0000 	  _DOLIT 1 
 370      01000000 
 371 0342 992B0000 	  _ADR ULED 
 372 0346 C32B0000 	  _DOLIT  100 
 372      64000000 
 373 034e ED310000 	  _ADR MSEC 
 374 0352 712A0000 	  _ADR BFAR 
 375 0356 4D2A0000 	  _ADR CFSR 
 376 035a 213D0000 	  _ADR CR  
 377 035e 893D0000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 377      1B627573 
 377      20666175 
 377      6C742065 
 377      78636570 
 378 0380 C32B0000 	  _DOLIT 16 
 378      10000000 
 379 0388 31320000 	  _ADR BASE 
 380 038c 352C0000 	  _ADR STORE   
 381 0390 C32B0000 	  _DOLIT 0XFF00 
 381      00FF0000 
 382 0398 812D0000 	  _ADR ANDD   
 383 039c 113E0000 	  _ADR UDOT 
 384 03a0 893D0000 	  _DOTQP 7 , " BFAR: "
 384      07204246 
 384      41523A20 
 385 03ac 113E0000 	  _ADR UDOT 
 386 03b0 213D0000 	  _ADR CR 
 387 03b4 79040000 	  _ADR reset_mcu  
 388              	
 389              	/************************************
 390              	    usage fault
 391              	    irq -10 
 392              	************************************/
 393              	  .type usagefault_handler, %function
 394              	  .p2align 2
 395              	  .global usagefault_handler 
 396              	usagefault_handler:
 397 03b8 4FF00000 	  _MOV32 r0,RAM_END 
 397      C2F20200 
 398 03c0 8546     	  mov sp,r0 
ARM GAS  forth.s 			page 20


 399 03c2 DFF8A0C4 	  ldr IP,=usagefault_hl
 400 03c6 02F019BB 	  b INEXT 
 401              	usagefault_hl:
 402 03ca F1470000 	  _ADR PRESE
 403 03ce 213D0000 	  _ADR CR  
 404 03d2 893D0000 	  _DOTQP  23 , "usage exception, UFSR: "
 404      17757361 
 404      67652065 
 404      78636570 
 404      74696F6E 
 405 03f0 C32B0000 	  _DOLIT 16 
 405      10000000 
 406 03f8 31320000 	  _ADR BASE 
 407 03fc 352C0000 	  _ADR STORE   
 408 0400 4D2A0000 	  _ADR CFSR
 409 0404 C32B0000 	  _DOLIT 16 
 409      10000000 
 410 040c D92D0000 	  _ADR RSHIFT 
 411 0410 113E0000 	  _ADR UDOT 
 412 0414 213D0000 	  _ADR CR 
 413 0418 79040000 	  _ADR reset_mcu  
 414              	
 415              	
 416              	/*********************************
 417              		system milliseconds counter
 418              	*********************************/	
 419              	  .type systick_handler, %function
 420              	  .p2align 2 
 421              	  .global systick_handler
 422              	systick_handler:
 423 041c 4FF00003 	  _MOV32 r3,UPP
 423      C2F20003 
 424 0424 9868     	  ldr r0,[r3,#TICKS]  
 425 0426 00F10100 	  add r0,#1
 426 042a 9860     	  str r0,[r3,#TICKS]
 427 042c D868     	  ldr r0,[r3,#CD_TIMER]
 428 042e 10B1     	  cbz r0, systick_exit
 429 0430 A0F10100 	  sub r0,#1
 430 0434 D860     	  str r0,[r3,#CD_TIMER]
 431              	systick_exit:
 432 0436 7047     	  bx lr
 433              	
 434              	user_reboot:
 435 0438 00B500F0 	   _CALL forth_init 
 435      4FF85DF8 
 435      04EB
 436 0442 DFF824C4 	  ldr IP,=ur
 437 0446 02F0D9BA 	  b INEXT  
 438              	ur:
 439 044a F1470000 	  _ADR PRESE
 440 044e 213D0000 	  _ADR CR   
 441 0452 C32B0000 		_DOLIT user_reboot_msg
 441      68040000 
 442 045a 91310000 		_ADR COUNT 
 443 045e ED3C0000 	  _ADR TYPEE 
 444 0462 79040000 	  _ADR reset_mcu 
 445              	
ARM GAS  forth.s 			page 21


 446 0466 00BF     		.p2align 2 
 447              	user_reboot_msg:
 448 0468 0C       		.byte 12
 449 0469 75736572 		.ascii "user reboot!"
 449      20726562 
 449      6F6F7421 
 450 0475 0000BF   		.p2align 2 
 451              	
 452              	reset_mcu:
 453 0478 4FF48050 	  _MOV32 r0,UART 
 453      C4F20100 
 454 0480 0168     	1: ldr r1,[r0,#USART_SR]
 455 0482 11F0400F 	  tst r1,#(1<<6)
 456 0486 FBD0     	  beq 1b
 457 0488 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 457      CEF20000 
 458 0490 C168     		ldr r1,[r0,#SCB_AIRCR]
 459 0492 41F00401 		orr r1,#(1<<2)
 460 0496 C0F2FA51 		movt r1,#SCB_VECTKEY
 461 049a C160     		str r1,[r0,#SCB_AIRCR]
 462 049c FEE7     		b . 
 463              	
 464              	/**************************************
 465              	  reset_handler execute at MCU reset
 466              	***************************************/
 467              	  .type  reset_handler, %function
 468 049e 00BF     	  .p2align 2 
 469              	  .global reset_handler
 470              	reset_handler:
 471 04a0 4FF00000 		_MOV32 r0,RAM_END
 471      C2F20200 
 472 04a8 8546     		mov sp,r0 
 473              	// enable memory, bus and usage exceptions  
 474 04aa 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 474      CEF20000 
 475 04b2 81EA0101 	  eor r1,r1 
 476 04b6 C0F20701 	  movt r1,#7 
 477 04ba 4162     	  str r1,[r0,#SCB_SHCSR]
 478 04bc FFF7FEFF 		bl	remap 
 479 04c0 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 480 04c4 01F027FD 	  bl  fpu_init 
 481 04c8 00F0EBF9 		bl  ser_init
 482 04cc FFF7FEFF 	 	bl	tv_init
 483 04d0 FFF7FEFF 	  bl  kbd_init
 484 04d4 01F0E4FA 	  bl  flash_spi_init   
 485 04d8 05F0BCB8 		b COLD 
 486              	
 487              	
 488              	
 489              		.type forth_init, %function 
 490              	  .p2align 2 
 491              	forth_init:
 492 04dc 4FF00004 		_MOV32 UP,UPP 
 492      C2F20004 
 493 04e4 4FF68067 		_MOV32 DSP,SPP
 493      C2F20107 
 494 04ec 4FF47F48 		_MOV32 RSP,RPP
ARM GAS  forth.s 			page 22


 494      C2F20108 
 495 04f4 DFF874A3 	  ldr INX,=NEST
 496 04f8 4AF0010A 	  orr INX,#1 
 497 04fc 86EA0606 		EOR TOS,TOS  
 498 0500 7047     		_RET 
 499              	
 500              	
 501              	
 502              	  .type init_devices, %function
 503 0502 00BF     	  .p2align 2 
 504              	init_devices:
 505              	/* init clock to HSE 96 Mhz */
 506              	/* set 3 wait states in FLASH_ACR_LATENCY */
 507 0504 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 507      C4F20200 
 508 050c 4FF00301 	  mov r1,#3 
 509 0510 0160     	  str r1,[r0,#FLASH_ACR]
 510              	/* configure clock for HSE, 25 Mhz crystal */
 511              	/* enable HSE in RCC_CR */
 512 0512 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 512      C4F20200 
 513 051a 0168     	  ldr r1,[r0,#RCC_CR]
 514 051c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 515 0520 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 516              	/* wait HSERDY loop */
 517              	wait_hserdy:
 518 0522 0168     	  ldr r1,[r0,#RCC_CR]
 519 0524 11F4003F 	  tst r1,#(1<<17)
 520 0528 FBD0     	  beq wait_hserdy
 521              	
 522              	/************************************************* 
 523              	   configure PLL  and source 
 524              	   SYSCLOCK=96 Mhz
 525              	   select HSE as  PLL source clock
 526              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 527              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 528              	****************************************************/
 529              	  /* set RCC_PLLCFGR */
 530 052a 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 530      C4F20200 
 531 0532 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 531      C0F24041 
 532 053a 4160     	  str r1,[r0,#RCC_PLLCFGR]
 533              	  /* enable PLL */
 534 053c 0168     	  ldr r1,[r0,#RCC_CR]
 535 053e 41F08071 	  orr r1, #(1<<24)
 536 0542 0160     	  str r1,[r0,#RCC_CR]
 537              	/* wait for PLLRDY */
 538              	wait_pllrdy:
 539 0544 0168     	  ldr r1,[r0,#RCC_CR]
 540 0546 11F0007F 	  tst r1,#(1<<25)
 541 054a FBD1     	  bne wait_pllrdy 
 542              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 543 054c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 543      C0F21901 
 544 0554 8160     	  str r1,[r0,#RCC_CFGR]
 545              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
ARM GAS  forth.s 			page 23


 546 0556 8168     	  ldr r1,[r0,#RCC_CFGR]
 547 0558 41F00201 	  orr r1,#2
 548 055c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 549              	/* wait for SWS==2 */
 550              	wait_sws:
 551 055e 8168     	  ldr r1,[r0,#RCC_CFGR]
 552 0560 11F0080F 	  tst r1,#(2<<2)
 553 0564 FBD0     	  beq wait_sws
 554              	/* now sysclock is 96 Mhz */
 555              	
 556              	
 557              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 558 0566 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 559 056a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 560 056c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 561 0570 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 562              	/* configure GPIOC:13 as output for user LED */
 563 0572 4FF40060 	  _MOV32 r0,LED_GPIO 
 563      C4F20200 
 564 057a 4FF00D01 	  mov r1,#LED_PIN
 565 057e 4FF01102 	  mov r2,#OUTPUT_OD 
 566 0582 00B500F0 	  _CALL gpio_config 
 566      A6F85DF8 
 566      04EB
 567 058c 4FF00102 	  mov r2,#1
 568 0590 00B500F0 	  _CALL gpio_out 
 568      F5F85DF8 
 568      04EB
 569              	/* enable compensation CELL for fast I/O */
 570 059a 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 570      C4F20101 
 571 05a2 4FF00100 		mov r0,#1 
 572 05a6 0862     		str r0,[R1,#SYSCFG_CMPCR]
 573              	/* wait for ready bit */ 
 574 05a8 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 575 05aa 10F4807F 	    tst r0,#(1<<8)
 576 05ae FBD0     		beq 1b 	
 577              	
 578              	
 579              	/* configure systicks for 1msec ticks */
 580              	// set priority to 15 (lowest)
 581 05b0 4FF0FF30 	  mov r0,#STCK_IRQ
 582 05b4 4FF00F01 	  mov r1,#15 
 583 05b8 00B500F0 	  _CALL nvic_set_priority
 583      2FF85DF8 
 583      04EB
 584 05c2 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 584      CEF20000 
 585 05ca 47F2FF61 	  _MOV32 r1,95999 
 585      C0F20101 
 586 05d2 4160     	  str r1,[r0,#STK_LOAD]
 587 05d4 4FF00701 	  mov r1,#7
 588 05d8 0160     	  str r1,[r0,STK_CTL]
 589 05da 7047     	  _RET  
 590              	
 591              	
 592              	/* copy system variables to RAM */ 
ARM GAS  forth.s 			page 24


 593              		.type remap, %function 
 594              	    .global remap 
 595              	remap:
 596              	// copy system to RAM 	
 597 05dc 4FF00000 		_MOV32 r0,RAM_ADR 
 597      C2F20000 
 598 05e4 A249     		ldr r1,=UZERO 
 599 05e6 4FF0B002 		mov r2,#ULAST-UZERO 
 600 05ea 02F10302 		add r2,r2,#3
 601 05ee 22F00302 		and r2,r2,#~3 
 602 05f2 51F8043B 	1:	ldr r3,[r1],#4 
 603 05f6 40F8043B 		str r3,[r0],#4 
 604 05fa 043A     		subs R2,#4 
 605 05fc F9D1     		bne 1b
 606              	// zero end of RAM 
 607 05fe 4FF00002 		_MOV32 r2,RAM_END 
 607      C2F20202 
 608 0606 83EA0303 		eor r3,r3,r3 
 609 060a 40F8043B 	2:  str r3,[r0],#4
 610 060e 9042     		cmp r0,r2 
 611 0610 FBDB     		blt 2b 
 612 0612 4FF00004 		_MOV32 UP,RAM_ADR  
 612      C2F20004 
 613 061a 7047     		_RET 
 614              	
 615              	// set irq priority 
 616              	// 0 highest 
 617              	// 15 lowest
 618              	// input: r0 IRQn  
 619              	//        r1  ipr 
 620              	nvic_set_priority:
 621 061c 08B4     	    push {r3}
 622 061e 0028     	    cmp r0,#0 
 623 0620 08D4     	    bmi negative_irq 
 624 0622 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 624      CEF20003 
 625 062a 4FEA0111 	    lsl r1,#4 
 626 062e 1954     	    strb r1,[r3,r0]
 627 0630 08BC     	    pop {r3}
 628 0632 7047     	    _RET 
 629              	negative_irq:
 630 0634 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 630      CEF20003 
 631 063c 00F00F00 	    and r0,#0XF 
 632 0640 A0F10400 	    sub r0,#4 
 633 0644 4FEA0111 	    lsl r1,#4 
 634 0648 1954     	    strb r1,[r3,r0]
 635 064a 08BC     	    pop {r3}
 636 064c 7047     	    _RET 
 637              	
 638              	
 639              	// enable interrupt in nvic 
 640              	// input: r0 = IRQn 
 641              	nvic_enable_irq: 
 642 064e 0EB4     	    push {r1,r2,r3}
 643 0650 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 643      CEF20003 
ARM GAS  forth.s 			page 25


 644 0658 0146     	    mov r1,r0 
 645 065a 4FEA5111 	    lsr r1,#5  
 646 065e 4FEA8101 	    lsl r1,#2  // ISERn  
 647 0662 00F01F00 	    and r0,#31 // bit#
 648 0666 4FF00102 	    mov r2,#1 
 649 066a 02FA00F2 	    lsl r2,r0
 650 066e 72B6     	    cpsid I
 651 0670 5A50     	    str r2,[r3,r1]
 652 0672 62B6     	    cpsie I 
 653 0674 0EBC     	    pop {r1,r2,r3}
 654 0676 7047     	    _RET 
 655              	
 656              	// disable interrupt in nvic
 657              	// input: r0 = IRQn
 658              	nvic_disable_irq:
 659 0678 0EB4     	    push {r1,r2,r3}
 660 067a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 660      CEF20003 
 661 0682 0146     	    mov r1,r0 
 662 0684 4FEA5111 	    lsr r1,#5  
 663 0688 4FEA8101 	    lsl r1,#2  // ISERn
 664 068c 00F01F00 	    and r0,#31 // bit#
 665 0690 4FF00102 	    mov r2,#1 
 666 0694 02FA00F2 	    lsl r2,r0
 667 0698 5A50     	    str r2,[r3,r1]
 668 069a BFF34F8F 	    dsb 
 669 069e BFF36F8F 	    isb 
 670 06a2 0EBC     	    pop {r1,r2,r3}
 671 06a4 7047     	    _RET 
 672              	
 673              	// clear interrupt pending flag 
 674              	// input: r0 = IRQn
 675              	nvic_clear_irq_pending:
 676 06a6 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 676      CEF20003 
 677 06ae 0EB4     	    push {r1,r2,r3}
 678 06b0 0146     	    mov r1,r0 
 679 06b2 4FEA5111 	    lsr r1,#5 
 680 06b6 4FEA8101 	    lsl r1,#2  // IABRn
 681 06ba 00F01F00 	    and r0,#31 // bit#
 682 06be 4FF00102 	    mov r2,#1 
 683 06c2 02FA00F2 	    lsl r2,r0
 684 06c6 5A50     	    str r2,[r3,r1]
 685 06c8 BFF34F8F 	    dsb 
 686 06cc BFF36F8F 	    isb 
 687 06d0 0EBC     	    pop {r1,r2,r3}
 688 06d2 7047     	    _RET 
 689              	
 690              	
 691              	/**********************************
 692              	  gpio_config 
 693              	  Configure gpio mode 
 694              	  input:
 695              	    r0   GPIOx 
 696              	    r1   pin 
 697              	    r2   mode 
 698              	  output:
ARM GAS  forth.s 			page 26


 699              	    none 
 700              	  use:
 701              	    r3,r5,r11  
 702              	**********************************/
 703              	gpio_config:
 704 06d4 2DE92808 	    push {r3,r5,r11}
 705              	//  clear registers field 
 706 06d8 4FF00105 	    mov r5,#1
 707 06dc 05FA01F5 	    lsl r5,r1
 708 06e0 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 709 06e4 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 710 06e6 03EA0503 	    and r3,r5 
 711 06ea 4360     	    str r3,[r0,#GPIO_OTYPER]
 712 06ec 4FF00305 	    mov r5,#3 
 713 06f0 4FF0020B 	    mov r11,#2 
 714 06f4 01FB0BFB 	    mul r11,r1 
 715 06f8 05FA0BF5 	    lsl r5,r11 
 716 06fc 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 717 0700 0368     	    ldr r3,[r0,#GPIO_MODER]
 718 0702 03EA0503 	    and r3,r5 
 719 0706 0360     	    str r3,[r0,#GPIO_MODER]
 720 0708 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 721 070a 03EA0503 	    and r3,r5 
 722 070e C360     	    str r3,[r0,#GPIO_PUPDR]
 723              	// set mode register, r2 low nibble  
 724 0710 02F00305 	    and r5,r2,#3    
 725 0714 05FA0BF5 	    lsl r5,r11 // mode 
 726 0718 0368     	    ldr r3,[r0,#GPIO_MODER]
 727 071a 43EA0503 	    orr r3,r5 
 728 071e 0360     	    str r3,[r0,#GPIO_MODER]
 729 0720 032A     	    cmp r2,#3
 730 0722 13D0     	    beq 9f // analog input 
 731 0724 12F00305 	    ands r5,r2,#3 
 732 0728 08D0     	    beq input_pull 
 733              	output_type:
 734 072a 4FEA1212 	    lsr r2,#4 
 735 072e 02FA01F2 	    lsl r2,r1 // 1 bit field 
 736 0732 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 737 0734 43EA0203 	    orr r3,r2 
 738 0738 4360     	    str r3,[r0,#GPIO_OTYPER]
 739 073a 07E0     	    b 9f 
 740              	input_pull:
 741 073c C368     	    ldr r3,[r0,#GPIO_PUPDR]
 742 073e 4FEA1212 	    lsr r2,#4 
 743 0742 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 744 0746 43EA0203 	    orr r3,r2 
 745 074a C360     	    str r3,[r0,#GPIO_PUPDR]
 746 074c BDE82808 	9:  pop {r3,r5,r11}
 747 0750 7047     	    _RET 
 748              	
 749              	// configure gpio speed 
 750              	// input:
 751              	//    r0   GPIO_BASE_ADR 
 752              	//    r1   pin 
 753              	//    r2   speed
 754              	// use:
 755              	//  r3,r5,r11 
ARM GAS  forth.s 			page 27


 756              	gpio_speed:
 757 0752 2DE92808 	    push {r3,r5,r11}
 758 0756 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 759 0758 4FF00305 	    mov r5,#3
 760 075c 4FF0020B 	    mov r11,#2 
 761 0760 01FB0BFB 	    mul r11,r1 
 762 0764 05FA0BF5 	    lsl r5,r11
 763 0768 6FEA0505 	    mvn r5,r5 
 764 076c 03EA0503 	    and r3,r5   
 765 0770 02FA0BF2 	    lsl r2,r11  
 766 0774 43EA0203 	    orr r3,r2 
 767 0778 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 768 077a BDE82808 	    pop {r3,r5,r11}
 769 077e 7047     	    _RET
 770              	
 771              	/**************************** 
 772              	  gpio_out port,pin,0|1
 773              	  input:
 774              	    r0   gpio_base_adr 
 775              	    r1   pin 
 776              	    r2   data 0|1 
 777              	**************************/
 778              	gpio_out:
 779 0780 08B4     	    push {r3}
 780 0782 4FF00103 	    mov r3,#1 
 781 0786 03FA01F3 	    lsl r3,r1 
 782 078a 0AB9     	    cbnz r2, 1f 
 783 078c 4FEA0343 	    lsl r3,#16 
 784 0790 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 785 0792 08BC     	    pop {r3}
 786 0794 7047     	    _RET 
 787              	
 788              	/******************************************************
 789              	*  COLD start moves the following to USER variables.
 790              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 791              	******************************************************/
 792 0796 00BF     		.p2align 2
 793              	UZERO:
 794 0798 00000000 		.word 0  			/*Reserved */
 795 079c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 796 07a0 00000000 		.word 0      /* TICKS */
 797 07a4 00000000 	    .word 0     /* CD_TIMER */
 798 07a8 64550000 		.word HI_BOTH  /*'BOOT */
 799 07ac 88170000 		.word PS2_QKEY /* query for character */
 800 07b0 50100000 	  .word TV_EMIT  /* char output device */
 801 07b4 0A000000 	  .word BASEE 	/*BASE */
 802 07b8 00000000 		.word 0			/*tmp */
 803 07bc 00000000 		.word 0			/*SPAN */
 804 07c0 00000000 		.word 0			/*>IN */
 805 07c4 00000000 		.word 0			/*#TIB */
 806 07c8 80FE0120 		.word TIBB	/*TIBU */
 807 07cc C8460000 		.word INTER	/*'EVAL */
 808 07d0 00000000 		.word 0			/*HLD */
 809 07d4 4C560000 		.word _LASTN	/*CONTEXT */
 810 07d8 B8560000 		.word CTOP  	/* FCP end of system dictionnary */
 811 07dc 204F0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 812 07e0 4C560000 		.word _LASTN	/*LAST word in dictionary */
ARM GAS  forth.s 			page 28


 813 07e4 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 813      00000000 
 813      00000000 
 813      00000000 
 814 07f4 00000000 		.word 0  /* RX_HEAD */
 815 07f8 00000000 		.word 0  /* RX_TAIL */ 
 816 07fc 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 817 0800 00000000 		.word 0  /* VID_STATE, video state */  
 818 0804 00000000 	    .word 0  /* VID_FIELD, field */
 819 0808 80800120 		.word VID_BUFF /* video_buffer address */ 
 820 080c 00000000 	    .word 0 /* kbd struct */
 821 0810 00000000 		.space KBD_QUEUE_SIZE,0  
 821      00000000 
 821      00000000 
 821      00000000 
 822 0820 00000000 		.word 0  /* kbd queue head */
 823 0824 00000000 		.word 0 /* kbd queue tail */ 
 824 0828 00000000 	    .word 0 /* tv cursor row */
 825 082c 00000000 	    .word 0 /* tv cursor column */ 
 826 0830 00000000 	    .word 0 /* tv back color */
 827 0834 07000000 	    .word 7 /* tv font color */
 828 0838 00000000 	    .word 0 /* FPSW */
 829 083c 00000000 	    .word 0 /* FBASE */ 
 830 0840 00000000 	    .word 0,0 
 830      00000000 
 831              	ULAST:
 832              	
 833              	// used by _HEADER macro 
 834              	// to link names field
 835              	// in dictionary  
 836 0848 12000000 	    .equ LINK, 0 
 836      C2000000 
 836      10480000 
 836      4C020000 
 836      8E020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
ARM GAS  forth.s 			page 29


  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0874 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 087c 1868     		ldr r0,[r3,#USART_SR]
  38 087e 5968     		ldr r1,[r3,#USART_DR]
  39 0880 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0884 0CD0     		beq 2f // no char received 
  41 0886 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 088a 3FF4D5AD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 088e 04F14C00 		add r0,UP,#RX_QUEUE
  44 0892 226E     		ldr r2,[UP,#RX_TAIL]
  45 0894 8154     		strb r1,[r0,r2]
  46 0896 02F10102 		add r2,#1 
  47 089a 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 089e 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 08a0 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 08a2 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 08aa 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 08ac 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 08b0 01EA0201 	  and r1,r1,r2
  62 08b4 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 08b8 41EA0201 	  orr r1,r1,r2 
  64 08bc 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 08be 4FF4EE61 	  mov r1,#0x77<<4 
  67 08c2 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 08c4 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 08cc 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 08d0 8160     	  str r1,[r0,#USART_BRR]
  73 08d2 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 08d6 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 08d8 4FF02500 	  mov r0,#USART1_IRQ 
ARM GAS  forth.s 			page 30


  77 08dc 4FF00701 	  mov r1,#7
  78 08e0 00B5FFF7 	  _CALL nvic_set_priority
  78      9BFE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 08ea 4FF02500 	  mov r0,#USART1_IRQ 
  81 08ee 00B5FFF7 	  _CALL nvic_enable_irq  
  81      ADFE5DF8 
  81      04EB
  82 08f8 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 08fa 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0908 47F8046D 		_PUSH
  92 090c 206E     		ldr T0,[UP,#RX_TAIL] 
  93 090e E16D     		ldr T1,[UP,#RX_HEAD]
  94 0910 90EA0106 		eors TOS,T0,T1 
  95 0914 0CD0     		beq 1f
  96 0916 04F14C00 		add T0,UP,#RX_QUEUE 
  97 091a 0844     		add T0,T1 
  98 091c 0678     		ldrb TOS,[T0]
  99 091e 01F10101 		add T1,#1 
 100 0922 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0926 E165     		str T1,[UP,#RX_HEAD]
 102 0928 47F8046D 		_PUSH 
 103 092c 4FF0FF36 		mov TOS,#-1
 104 0930 02F064B8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0934 FE080000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0944 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 094c 2868     	1:  ldr T0,[WP,#USART_SR]
 113 094e 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0952 FBD0     		beq 1b 
 115 0954 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0956 57F8046B 		_POP
 117 095a 02F04FB8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
ARM GAS  forth.s 			page 31


 123              	****************************************/
 124 095e 38090000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0968 47F8046D 	        _PUSH 
 126 096c 4FF00006 	        mov TOS,#0
 127 0970 02F044B8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0974 62090000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0980 47F8046D 	        _PUSH 
 135 0984 4FF00106 	        mov TOS,#1
 136 0988 02F038B8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 098c 78090000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0998 3046     	        mov T0,TOS
 144 099a 57F8046B 	        _POP 
 145 099e 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 09a0 4B48     	        ldr T0,=SER_QKEY 
 148 09a2 6061     	        str T0,[UP,#STDIN]
 149 09a4 4B48     	        ldr T0,=SER_EMIT
 150 09a6 A061     	        str T0,[UP,#STDOUT]
 151 09a8 02F028B8 	        _NEXT 
 152              	4: // local console 
 153 09ac 4A48     	        ldr T0,=PS2_QKEY
 154 09ae 6061     	        str T0,[UP,#STDIN]
 155 09b0 4A48     	        ldr T0,=TV_EMIT
 156 09b2 A061     	        str T0,[UP,#STDOUT]
 157 09b4 02F022B8 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 09b8 90090000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 09c8 504700BF 	      _NEST 
 166 09cc C32B0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 09d4 5D2E0000 	1:    _ADR ONEP  // c+1
 168 09d8 B92C0000 	      _ADR TOR   
 169 09dc C32B0000 	      _DOLIT 10 
ARM GAS  forth.s 			page 32


 169      0A000000 
 170 09e4 61350000 	      _ADR SLMOD // r q  
 171 09e8 112F0000 	      _ADR QDUP  // r q q | r 0  
 172 09ec 032C0000 	      _QBRAN 2f  // r 0 
 172      000A0000 
 173 09f4 752C0000 	      _ADR RFROM // r q c 
 174 09f8 172C0000 	      _BRAN 1b
 174      D4090000 
 175 0a00 C32B0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0a08 012E0000 	      _ADR PLUS 
 177 0a0c CD2A0000 	      _ADR EMIT 
 178 0a10 752C0000 	      _ADR RFROM 
 179 0a14 112F0000 	      _ADR QDUP 
 180 0a18 032C0000 	      _QBRAN 3f
 180      300A0000 
 181 0a20 6D2E0000 	      _ADR ONEM 
 182 0a24 B92C0000 	      _ADR TOR 
 183 0a28 172C0000 	      _BRAN 2b 
 183      000A0000 
 184              	3:    
 185 0a30 032A0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0a34 BC090000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0a40 504700BF 	      _NEST 
 193 0a44 C32B0000 	      _DOLIT 27 
 193      1B000000 
 194 0a4c CD2A0000 	      _ADR EMIT 
 195 0a50 C32B0000 	      _DOLIT '['
 195      5B000000 
 196 0a58 CD2A0000 	      _ADR EMIT 
 197 0a5c 032A0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0a60 380A0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0a6c 504700BF 	      _NEST
 205 0a70 410A0000 	      _ADR ANSI_ESC
 206 0a74 4D2D0000 	      _ADR SWAP 
 207 0a78 C9090000 	      _ADR ANSI_PARAM 
 208 0a7c C32B0000 	      _DOLIT ';'
 208      3B000000 
 209 0a84 CD2A0000 	      _ADR EMIT
 210 0a88 C9090000 	      _ADR ANSI_PARAM
 211 0a8c C32B0000 	      _DOLIT 'H'
 211      48000000 
 212 0a94 CD2A0000 	      _ADR EMIT 
ARM GAS  forth.s 			page 33


 213 0a98 032A0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0a9c 640A0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0aa8 504700BF 	    _NEST
 221 0aac C32B0000 	    _DOLIT 1 
 221      01000000 
 222 0ab4 3D2D0000 	    _ADR DUPP 
 223 0ab8 6D0A0000 	    _ADR SER_AT  
 224 0abc 410A0000 	    _ADR ANSI_ESC
 225 0ac0 C32B0000 	    _DOLIT 'J'
 225      4A000000 
 226 0ac8 CD2A0000 	    _ADR EMIT 
 227 0acc 032A0000 	    _UNNEST 
 228 0ad0 08090000 	
 228      44090000 
 228      88170000 
 228      50100000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
ARM GAS  forth.s 			page 34


   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
ARM GAS  forth.s 			page 35


  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0ae0 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0ae8 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0aea 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0af2 41EA0201 	  orr r1,r2
  82 0af6 0160     	  str r1,[r0,#GPIO_MODER]
  83 0af8 81EA0101 	  eor r1,r1 
  84 0afc 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0afe 4FF00101 	  mov r1,#1 // pin 1 
  88 0b02 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0b06 00B5FFF7 	  _CALL gpio_config 
  89      E4FD5DF8 
  89      04EB
  90 0b10 4FF00101 	  mov r1,#1 
  91 0b14 4FF00202 	  mov r2,#2
  92 0b18 00B5FFF7 	  _CALL gpio_speed 
  92      1AFE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0b22 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0b24 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0b28 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0b2a 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0b32 4FF00200 	  mov r0,#2 
 100 0b36 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0b38 41EA0001 	  orr r1,r0 
 102 0b3c 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0b3e 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0b46 41F2D470 	  mov r0,#HPER
 106 0b4a D062     	  str r0,[r2,#TIM_ARR]
 107 0b4c 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0b50 D063     	  str r0,[r2,#TIM_CCR3]
 109 0b52 4FF4E170 	  mov r0,#HPULSE 
 110 0b56 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0b58 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0b5c D061     	  str r0,[r2,#TIM_CCMR2]
ARM GAS  forth.s 			page 36


 113 0b5e 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0b62 1062     	  str r0,[r2,#TIM_CCER]
 115 0b64 4FF00100 	  mov r0,#1 
 116 0b68 D060     	  str r0,[r2,#TIM_DIER]
 117 0b6a 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0b6c 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0b70 4FF00201 	  mov r1,#2
 121 0b74 00B5FFF7 	  _CALL nvic_set_priority
 121      51FD5DF8 
 121      04EB
 122 0b7e 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0b82 00B5FFF7 	  _CALL nvic_enable_irq
 123      63FD5DF8 
 123      04EB
 124 0b8c 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0b8e 00BF     	  _GBL_FUNC tv_out_isr
 132 0b90 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0b98 81EA0101 	  eor T1,T1
 134 0b9c 0161     	  str T1,[T0,#TIM_SR]
 135 0b9e 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0ba0 01F10101 	  add T1,#1 
 137 0ba4 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0ba6 A26E     	  ldr T2,[UP,#VID_STATE]
 140 0ba8 002A     	  cmp T2,#ST_VSYNC 
 141 0baa 07D0     	  beq state_vsync
 142 0bac 012A     	  cmp T2,#ST_PREVID 
 143 0bae 2FD0     	  beq state_pre_video 
 144 0bb0 022A     	  cmp T2,#ST_VIDEO 
 145 0bb2 36D0     	  beq state_video_out 
 146 0bb4 032A     	  cmp T2,#ST_POSTVID 
 147 0bb6 63D0     	  beq state_post_video
 148 0bb8 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0bbc 0129     	  cmp T1,#1
 152 0bbe 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0bc0 4FF0DB01 	  mov T1,#SERRATION
 155 0bc4 0164     	  str T1,[T0,#TIM_CCR4]
 156 0bc6 40F6E931 	  mov T1,#SYNC_LINE 
 157 0bca C162     	  str T1,[T0,#TIM_ARR]
 158 0bcc 6BE0     	  b tv_isr_exit 
 159 0bce 0729     	1: cmp T1,#7
 160 0bd0 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0bd2 40F62821 	  mov T1,#VSYNC_PULSE
 163 0bd6 0164     	  str T1,[T0,#TIM_CCR4]
 164 0bd8 65E0     	  b tv_isr_exit
ARM GAS  forth.s 			page 37


 165 0bda 0D29     	2: cmp T1,#13
 166 0bdc 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0bde 4FF0DB01 	   mov T1,#SERRATION 
 169 0be2 0164     	   str T1,[T0,#TIM_CCR4]
 170 0be4 5FE0     	   b tv_isr_exit   
 171 0be6 1229     	3: cmp T1,#18
 172 0be8 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0bea E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0bec 0029     	   cmp T1,#ODD_FIELD  
 176 0bee 5AD0     	   beq tv_isr_exit 
 177 0bf0 01E0     	   b sync_end 
 178 0bf2 1329     	4: cmp T1,#19 
 179 0bf4 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0bf6 4FF00901 	   mov T1,#9
 182 0bfa 6166     	   str T1,[UP,#VID_CNTR]
 183 0bfc 4FF4E171 	   mov T1,#HPULSE 
 184 0c00 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0c02 41F2D471 	   mov T1,#HPER 
 186 0c06 C162     	   str T1,[T0,#TIM_ARR] 
 187 0c08 4FF00101 	   mov T1,#ST_PREVID 
 188 0c0c A166     	   str T1,[UP,#VID_STATE]
 189 0c0e 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0c10 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0c12 48D4     	   bmi tv_isr_exit 
 194 0c14 4FF00201 	   mov T1,#ST_VIDEO 
 195 0c18 A166     	   str T1,[UP,#VID_STATE]
 196 0c1a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0c1e C160     	   str T1,[T0,#TIM_DIER]
 198 0c20 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0c22 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0c24 06D9     	   bls 1f 
 205 0c26 4FF00301 	   mov T1,#ST_POSTVID 
 206 0c2a A166     	   str T1,[UP,#VID_STATE]
 207 0c2c 4FF00101 	   mov T1,#1 
 208 0c30 C160     	   str T1,[T0,#TIM_DIER]
 209 0c32 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0c34 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0c36 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0c3a 4FF0A003 	   mov T3,#160
 214 0c3e 03FB01F1 	   mul T1,T3 
 215 0c42 0844     	   add T0,T1  
 216 0c44 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
ARM GAS  forth.s 			page 38


 221 0c4c 10F8012B 	2: ldrb T2,[T0],#1 
 222 0c50 4FEA0222 	   lsl T2,#8 
 223 0c54 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0c56 AFF30080 	   nop.w 
 225 0c5a AFF30080 	   nop.w
 226 0c5e AFF30080 	   nop.w 
 227 0c62 AFF30080 	   nop.w 
 228 0c66 4FEA0212 	   lsl T2,#4  
 229 0c6a 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0c6c AFF30080 	   nop.w
 231 0c70 AFF30080 	   nop.w  
 232 0c74 013B     	   subs T3,#1
 233 0c76 E9D1     	   bne 2b  
 234 0c78 4FF47022 	   mov T2,#(15<<16) 
 235 0c7c 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0c7e 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0c80 4FF48372 	   mov T2,#262
 239 0c84 9142     	   cmp T1,T2
 240 0c86 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0c88 E16E     	   ldr T1,[UP,VID_FIELD]
 243 0c8a 11B9     	   cbnz T1, frame_end 
 244 0c8c 40F6E931 	   mov T1,#SYNC_LINE
 245 0c90 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0c92 4FF00001 	   mov T1,#ST_VSYNC 
 248 0c96 A166     	   str T1,[UP,#VID_STATE]
 249 0c98 81EA0101 	   eor T1,T1 
 250 0c9c 6166     	   str T1,[UP,#VID_CNTR]
 251 0c9e E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0ca0 6FEA0101 	   mvn T1,T1  
 253 0ca4 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0ca6 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0ca8 A00A0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0cb8 47F8046D 		_PUSH 
 266 0cbc 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0cc0 01F09CBE 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0cc4 AC0C0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
ARM GAS  forth.s 			page 39


 272 0cd4 47F8046D 		_PUSH 
 273 0cd8 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0cdc 01F08EBE 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0ce0 C80C0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0cec 47F8046D 	  _PUSH 
 280 0cf0 04F19406 	  ADD TOS,UP,#COL 
 281 0cf4 01F082BE 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0cf8 E40C0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0d00 47F8046D 	  _PUSH 
 287 0d04 04F19006 	  ADD TOS,UP,#ROW 
 288 0d08 01F078BE 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0d0c FC0C0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0d18 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0d1c 00FB06F6 	  mul TOS,T0 
 295 0d20 01F06CBE 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0d24 100D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0d30 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0d34 00FB06F6 	  mul TOS,T0 
 302 0d38 01F060BE 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0d3c 280D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0d48 47F8046D 	  _PUSH 
 308 0d4c DFF88C65 	  ldr TOS,=font_6x8 
 309 0d50 01F054BE 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0d54 400D0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0d60 47F8046D 	  _PUSH 
 315 0d64 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0d66 01F049BE 	  _NEXT 
 317              	
ARM GAS  forth.s 			page 40


 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0d6a 580D0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0d74 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0d76 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0d7a 02FB00F0 	    mul T0,T2 
 330 0d7e 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0d82 1044     	    add T0,T2 
 332 0d84 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0d86 0344     	    add T3,T0 // T3 -> byte address 
 334 0d88 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0d8a 4FF00F02 	    mov T2,#15 // AND mask 
 336 0d8e 11F0010F 	    tst T1,#1 
 337 0d92 01D0     	    beq 1f 
 338 0d94 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0d98 DFF84405 	1:  ldr T0,=plot_op 
 340 0d9c D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0da0 05EA0205 	    and WP,T2 // mask out nibble 
 343 0da4 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0da8 11F0010F 	    tst T1,#1 
 345 0dac 01D1     	    bne 1f 
 346 0dae 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0db2 45EA0005 	1:  orr WP,T0  
 348 0db6 1D70     	    strb WP,[T3]
 349 0db8 1AE0     	    b 9f 
 350              	op_pen: 
 351 0dba 05EA0205 	    and WP,T2 
 352 0dbe 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0dc2 11F0010F 	    tst T1,#1
 354 0dc6 01D1     	    bne 1f 
 355 0dc8 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0dcc 45EA0005 	1:	orr WP,T0 
 357 0dd0 1D70     	    strb WP,[T3]
 358 0dd2 0DE0     	    b 9f 
 359              	op_invert:
 360 0dd4 85EA0205 	    eor WP,T2 
 361 0dd8 1D70     	    strb WP,[T3]
 362 0dda 09E0     	    b 9f 
 363              	op_xor:
 364 0ddc D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0de0 11F0010F 	    tst T1,#1 
 366 0de4 01D1     	    bne 1f 
 367 0de6 4FEA0010 	    lsl T0,#4 
 368 0dea 85EA0005 	1:  eor WP,T0 
 369 0dee 1D70     	    strb WP,[T3]
 370 0df0 57F8046B 	9:  _POP 
 371 0df4 01F002BE 	    _NEXT 
 372              	
ARM GAS  forth.s 			page 41


 373 0df8 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0dfc 6E0D0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0e08 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0e0a 0028     	    cmp T0,#0
 381 0e0c FCD1     	    bne 1b
 382 0e0e 01F0F5BD 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0e12 000E0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0e1c 80EA0000 	    eor T0,T0 
 388 0e20 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0e24 40EA0100 	    orr T0,T1 
 390 0e28 4FEA0111 	    lsl T1,#4 
 391 0e2c 40EA0100 	    orr T0,T1 
 392 0e30 4FEA0021 	    lsl T1,T0,#8 
 393 0e34 40EA0100 	    orr T0,T1 
 394 0e38 4FEA0041 	    lsl T1,T0,#16
 395 0e3c 40EA0100 	    orr T0,T1 
 396 0e40 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0e44 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0e46 5050     	1:	str T0,[T2,T1]
 399 0e48 0439     	    subs T1,#4
 400 0e4a FCD1     	    bne 1b
 401 0e4c 1060     	    str T0,[T2]
 402 0e4e 80EA0000 	    eor T0,T0 
 403 0e52 C4F89000 	    str T0,[UP,#ROW]
 404 0e56 C4F89400 	    str T0,[UP,#COL]
 405 0e5a 01F0CFBD 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0e5e 160E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0e6c 504700BF 	  _NEST
 412 0e70 C32B0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0e78 3D2D0000 	  _ADR DUPP  
 414 0e7c B92C0000 	  _ADR TOR 
 415 0e80 212E0000 	  _ADR STAR
 416 0e84 610D0000 	  _ADR VIDBUFF
 417 0e88 012E0000 	  _ADR PLUS
 418 0e8c 752C0000 	  _ADR RFROM   
 419 0e90 C32B0000 	  _DOLIT 0 
 419      00000000 
 420 0e98 95370000 	  _ADR FILL 
ARM GAS  forth.s 			page 42


 421 0e9c 032A0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ea0 620E0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0eb0 504700BF 	    _NEST 
 429 0eb4 610D0000 	    _ADR VIDBUFF 
 430 0eb8 3D2D0000 	    _ADR DUPP 
 431 0ebc C32B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0ec4 3D2D0000 	    _ADR DUPP 
 433 0ec8 B92C0000 	    _ADR TOR 
 434 0ecc 012E0000 	    _ADR PLUS 
 435 0ed0 4D2D0000 	    _ADR SWAP 
 436 0ed4 C32B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0edc 752C0000 	    _ADR RFROM  
 438 0ee0 112E0000 	    _ADR SUBB 
 439 0ee4 4D370000 	    _ADR MOVE
 440 0ee8 C32B0000 	    _DOLIT 24 
 440      18000000 
 441 0ef0 6D0E0000 	    _ADR CLRLINE 
 442 0ef4 032A0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0ef8 A40E0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0f08 504700BF 	    _NEST 
 450 0f0c 610D0000 	    _ADR VIDBUFF
 451 0f10 3D2D0000 	    _ADR DUPP 
 452 0f14 C32B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0f1c 012E0000 	    _ADR PLUS 
 454 0f20 C32B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0f28 C32B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0f30 112E0000 	    _ADR SUBB  
 457 0f34 4D370000 	    _ADR MOVE
 458 0f38 C32B0000 	    _DOLIT 0 
 458      00000000 
 459 0f40 6D0E0000 	    _ADR CLRLINE
 460 0f44 032A0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
ARM GAS  forth.s 			page 43


 465              	    carriage return line feed 
 466              	*****************************/
 467 0f48 FC0E0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0f54 E34D     	    ldr WP,=SCROLLUP 
 469 0f56 45F00105 	    orr WP,#1
 470 0f5a 80EA0000 	    eor T0,T0 
 471 0f5e C4F89400 	    str T0,[UP,#COL]
 472 0f62 D4F89000 	    ldr T0,[UP,#ROW]
 473 0f66 1828     	    cmp T0,#24 
 474 0f68 A2D0     	    beq SCROLLUP  
 475 0f6a 00F10100 	    add T0,#1 
 476 0f6e C4F89000 	    str T0,[UP,#ROW]
 477 0f72 01F043BD 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0f76 4C0F0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0f80 D4F89400 	  ldr T0,[UP,#COL]
 484 0f84 00F10100 	  add T0,#1
 485 0f88 3528     	  cmp T0,#53
 486 0f8a E3D5     	  bpl TV_CRLF  
 487 0f8c C4F89400 	  str T0,[UP,#COL]
 488 0f90 01F034BD 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0f94 7A0F0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0fa0 D4F89400 	    ldr T0,[UP,#COL]
 497 0fa4 28B1     	    cbz T0,1f 
 498 0fa6 A0F10100 	    sub T0,#1 
 499 0faa C4F89400 	    str T0,[UP,#COL]
 500 0fae 01F025BD 	    _NEXT 
 501 0fb2 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0fb6 38B1     	    cbz T0,9f
 503 0fb8 A0F10100 	    sub T0,#1
 504 0fbc C4F89000 	    str T0,[UP,#ROW]
 505 0fc0 4FF03400 	    mov T0,#52 
 506 0fc4 C4F89400 	    str T0,[UP,#COL]
 507 0fc8 01F018BD 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0fcc 4FF08000 	    mov T0,#128 
 513 0fd0 06EA0006 	    and TOS,T0 
 514 0fd4 4FEAD616 	    lsr TOS,#7
 515 0fd8 01F010BD 	    _NEXT 
ARM GAS  forth.s 			page 44


 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0fdc 3868     	  ldr T0,[DSP]
 520 0fde 00F10100 	  add T0,#1 
 521 0fe2 3860     	  str T0,[DSP]
 522 0fe4 01F00ABD 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0fe8 4FEA4606 	    lsl TOS,#1
 527 0fec 01F006BD 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0ff0 504700BF 	    _NEST 
 536 0ff4 C32B0000 	    _DOLIT 5 
 536      05000000 
 537 0ffc B92C0000 	    _ADR TOR 
 538 1000 B92C0000 	1:  _ADR TOR 
 539 1004 752F0000 	    _ADR DDUP 
 540 1008 A52C0000 	    _ADR RAT
 541 100c CD0F0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 1010 750D0000 	    _ADR PLOT 
 543 1014 DD0F0000 	    _ADR INCR_X 
 544 1018 752C0000 	    _ADR RFROM 
 545 101c E90F0000 	    _ADR NEXT_PIXEL
 546 1020 E52B0000 	    _DONXT 1b
 546      00100000 
 547 1028 612F0000 	    _ADR TDROP 
 548 102c 032A0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1030 A6F12006 	   sub TOS,#32
 553 1034 4FF00800 	   mov T0,#8 
 554 1038 00FB06F6 	   mul TOS,T0 
 555 103c A748     	   ldr T0,=font_6x8
 556 103e 0644     	   add TOS,T0 
 557 1040 01F0DCBC 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1044 980F0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1050 504700BF 	    _NEST
 565 1054 3D2D0000 	    _ADR DUPP 
 566 1058 C32B0000 	    _DOLIT 32 
 566      20000000 
 567 1060 C1300000 	    _ADR ULESS
ARM GAS  forth.s 			page 45


 568 1064 032C0000 	    _QBRAN 1f
 568      74100000 
 569 106c 172C0000 	    _BRAN CTRL_KEY
 569      D8100000 
 570 1074 31100000 	1:  _ADR CHAR_FONT 
 571 1078 ED0C0000 	    _ADR CURSOR_COL 
 572 107c 492C0000 	    _ADR AT
 573 1080 310D0000 	    _ADR COLX  // x coord 
 574 1084 010D0000 	    _ADR CURSOR_ROW 
 575 1088 492C0000 	    _ADR AT    
 576 108c 190D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1090 252F0000 	    _ADR ROT  // TEST 
 578 1094 C32B0000 	    _DOLIT 7   
 578      07000000 
 579 109c B92C0000 	    _ADR TOR  
 580 10a0 B92C0000 	1:  _ADR TOR  // { x y }
 581 10a4 752F0000 	    _ADR DDUP  // { x y x y }
 582 10a8 A52C0000 	    _ADR RAT 
 583 10ac 692C0000 	    _ADR CAT   // { x y x y r }
 584 10b0 F10F0000 	    _ADR CHAR_ROW 
 585 10b4 5D2E0000 	    _ADR ONEP // {x y' }
 586 10b8 752C0000 	    _ADR RFROM 
 587 10bc 5D2E0000 	    _ADR ONEP // {x y' c-adr' }
 588 10c0 E52B0000 	    _DONXT 1b
 588      A0100000 
 589 10c8 612F0000 	    _ADR TDROP  
 590 10cc 810F0000 	    _ADR RIGHT
 591 10d0 C1110000 	9:  _ADR SHOW_CURSOR 
 592 10d4 032A0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 10d8 49120000 	    _ADR HIDE_CURSOR
 595 10dc 3D2D0000 	    _ADR DUPP 
 596 10e0 C32B0000 	    _DOLIT BKSPP  
 596      08000000 
 597 10e8 89300000 	    _ADR EQUAL 
 598 10ec 032C0000 	    _QBRAN 1f 
 598      04110000 
 599 10f4 A1110000 	    _ADR BACK_SPACE 
 600 10f8 2D2D0000 	8:  _ADR DROP 
 601 10fc 172C0000 	    _BRAN 9b 
 601      D0100000 
 602 1104 3D2D0000 	1:  _ADR DUPP 
 603 1108 C32B0000 	    _DOLIT CRR 
 603      0D000000 
 604 1110 89300000 	    _ADR EQUAL 
 605 1114 032C0000 	    _QBRAN 1f 
 605      28110000 
 606 111c 49110000 	    _ADR CAR_RET
 607 1120 172C0000 	    _BRAN 8b
 607      F8100000 
 608 1128 C32B0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1130 89300000 	    _ADR EQUAL 
 610 1134 032C0000 	    _QBRAN 9b 
 610      D0100000 
 611 113c 61110000 	    _ADR LN_FEED
 612 1140 172C0000 	    _BRAN 9b  
ARM GAS  forth.s 			page 46


 612      D0100000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 1148 504700BF 	   _NEST
 620 114c C32B0000 	   _DOLIT 0 
 620      00000000 
 621 1154 ED0C0000 	   _ADR CURSOR_COL 
 622 1158 352C0000 	   _ADR STORE 
 623 115c 032A0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1160 504700BF 	    _NEST 
 631 1164 010D0000 	    _ADR CURSOR_ROW 
 632 1168 492C0000 	    _ADR AT 
 633 116c 3D2D0000 	    _ADR DUPP 
 634 1170 C32B0000 	    _DOLIT 24 
 634      18000000 
 635 1178 A92D0000 	    _ADR XORR 
 636 117c 032C0000 	    _QBRAN 1f
 636      94110000 
 637 1184 5D2E0000 	    _ADR ONEP 
 638 1188 010D0000 	    _ADR CURSOR_ROW 
 639 118c 352C0000 	    _ADR STORE 
 640 1190 032A0000 	    _UNNEST    
 641 1194 2D2D0000 	1:  _ADR DROP 
 642 1198 B10E0000 	    _ADR SCROLLUP 
 643 119c 032A0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 11a0 504700BF 	  _NEST 
 652 11a4 A10F0000 	  _ADR LEFT 
 653 11a8 C1110000 	  _ADR SHOW_CURSOR
 654 11ac 032A0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 11b0 48100000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 11c0 504700BF 	    _NEST 
ARM GAS  forth.s 			page 47


 663 11c4 C32B0000 	    _DOLIT 0xFF
 663      FF000000 
 664 11cc 010D0000 	0:  _ADR CURSOR_ROW
 665 11d0 492C0000 	    _ADR AT  
 666 11d4 5D2E0000 	    _ADR ONEP 
 667 11d8 190D0000 	    _ADR ROWY 
 668 11dc C32B0000 	    _DOLIT BPR
 668      A0000000 
 669 11e4 212E0000 	    _ADR STAR
 670 11e8 C32B0000 	    _DOLIT BPR  
 670      A0000000 
 671 11f0 112E0000 	    _ADR SUBB 
 672 11f4 ED0C0000 	    _ADR CURSOR_COL
 673 11f8 492C0000 	    _ADR AT 
 674 11fc 310D0000 	    _ADR COLX 
 675 1200 012F0000 	    _ADR TWOSL  
 676 1204 012E0000 	    _ADR PLUS
 677 1208 610D0000 	    _ADR VIDBUFF
 678 120c 012E0000 	    _ADR PLUS
 679 1210 C32B0000 	    _DOLIT 2
 679      02000000 
 680 1218 B92C0000 	    _ADR TOR  
 681 121c 752F0000 	1:  _ADR DDUP 
 682 1220 552C0000 	    _ADR CSTOR 
 683 1224 5D2E0000 	    _ADR ONEP 
 684 1228 E52B0000 	    _DONXT 1b
 684      1C120000 
 685 1230 4D2F0000 	2:  _ADR DDROP // drop 3 elements 
 686 1234 032A0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 1238 B4110000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 1248 504700BF 	    _NEST 
 694 124c B90C0000 	    _ADR BACKCOLOR 
 695 1250 492C0000 	    _ADR AT 
 696 1254 3D2D0000 	    _ADR DUPP  
 697 1258 C32B0000 	    _DOLIT 4 
 697      04000000 
 698 1260 F12D0000 	    _ADR LSHIFT 
 699 1264 952D0000 	    _ADR ORR 
 700 1268 172C0000 	    _BRAN 0b
 700      CC110000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1270 3C120000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 127c 352E     	    cmp TOS,#53
 706 127e 01D4     	    bmi 1f 
 707 1280 4FF03406 	    mov TOS,#52
ARM GAS  forth.s 			page 48


 708 1284 C4F89460 	1:  str TOS,[UP,#COL]
 709 1288 57F8046B 	    _POP
 710 128c 192E     	    cmp TOS,#25
 711 128e 01D4     	    bmi 1f 
 712 1290 4FF01806 	    mov TOS,#24 
 713 1294 C4F89060 	1:  str TOS,[UP,#ROW]
 714 1298 57F8046B 	    _POP 
 715 129c 01F0AEBB 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 12a0 74120000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 12ac 504700BF 	    _NEST 
 721 12b0 C5360000 	    _ADR PAD 
 722 12b4 3D2D0000 	    _ADR DUPP 
 723 12b8 5D2E0000 	    _ADR ONEP 
 724 12bc C32B0000 	    _DOLIT 53
 724      35000000 
 725 12c4 B5450000 	    _ADR ACCEP
 726 12c8 4D2D0000 	    _ADR SWAP 
 727 12cc 2D2D0000 	    _ADR DROP 
 728 12d0 612D0000 	    _ADR OVER 
 729 12d4 552C0000 	    _ADR CSTOR  
 730 12d8 032A0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
ARM GAS  forth.s 			page 49


 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
ARM GAS  forth.s 			page 50


 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
ARM GAS  forth.s 			page 51


 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
ARM GAS  forth.s 			page 52


 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
ARM GAS  forth.s 			page 53


  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
ARM GAS  forth.s 			page 54


  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
ARM GAS  forth.s 			page 55


 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 12e8 1C61     	   .byte 0x1c,'a' 
   9 12ea 3262     	   .byte 0x32,'b'
  10 12ec 2163     	   .byte 0x21,'c'
  11 12ee 2364     	   .byte 0x23,'d'
  12 12f0 2465     	   .byte 0x24,'e'
  13 12f2 2B66     	   .byte 0x2b,'f'
  14 12f4 3467     	   .byte 0x34,'g'
  15 12f6 3368     	   .byte 0x33,'h'
  16 12f8 4369     	   .byte 0x43,'i'
  17 12fa 3B6A     	   .byte 0x3B,'j'
  18 12fc 426B     	   .byte 0x42,'k'
  19 12fe 4B6C     	   .byte 0x4b,'l'
  20 1300 3A6D     	   .byte 0x3a,'m'
  21 1302 316E     	   .byte 0x31,'n'
  22 1304 446F     	   .byte 0x44,'o'
  23 1306 4D70     	   .byte 0x4d,'p'
  24 1308 1571     	   .byte 0x15,'q'
  25 130a 2D72     	   .byte 0x2d,'r'
  26 130c 1B73     	   .byte 0x1b,'s'
  27 130e 2C74     	   .byte 0x2c,'t'
  28 1310 3C75     	   .byte 0x3c,'u'
  29 1312 2A76     	   .byte 0x2a,'v'
  30 1314 1D77     	   .byte 0x1d,'w'
  31 1316 2278     	   .byte 0x22,'x'
ARM GAS  forth.s 			page 56


  32 1318 3579     	   .byte 0x35,'y'
  33 131a 1A7A     	   .byte 0x1a,'z'
  34 131c 4530     	   .byte 0x45,'0'
  35 131e 1631     	   .byte 0x16,'1'
  36 1320 1E32     	   .byte 0x1e,'2'
  37 1322 2633     	   .byte 0x26,'3'
  38 1324 2534     	   .byte 0x25,'4'
  39 1326 2E35     	   .byte 0x2e,'5'
  40 1328 3636     	   .byte 0x36,'6'
  41 132a 3D37     	   .byte 0x3d,'7'
  42 132c 3E38     	   .byte 0x3e,'8'
  43 132e 4639     	   .byte 0x46,'9'
  44 1330 0E60     	   .byte 0x0e,'`'
  45 1332 4E2D     	   .byte 0x4e,'-'
  46 1334 553D     	   .byte 0x55,'='
  47 1336 5D5C     	   .byte 0x5d,'\\'
  48 1338 545B     	   .byte 0x54,'['
  49 133a 5B5D     	   .byte 0x5b,']'
  50 133c 4C3B     	   .byte 0x4c,';'
  51 133e 5227     	   .byte 0x52,'\''
  52 1340 412C     	   .byte 0x41,','
  53 1342 492E     	   .byte 0x49,'.'
  54 1344 7C2A     	   .byte 0x7c,'*'
  55 1346 792B     	   .byte 0x79,'+'
  56 1348 2920     	   .byte 0x29,' '
  57 134a 5A0D     	   .byte SC_ENTER,CRR 
  58 134c 6608     	   .byte SC_BKSP,BKSPP 
  59 134e 0D09     	   .byte SC_TAB,9
  60 1350 761B     	   .byte SC_ESC,27
  61 1352 119E     	   .byte SC_LALT,VK_LALT 
  62 1354 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 1356 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 1358 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 135a 779A     	   .byte SC_NUM,VK_NLOCK 
  66 135c 5800     	   .byte SC_CAPS,0
  67 135e 0580     	   .byte SC_F1,VK_F1
  68 1360 0681     	   .byte SC_F2,VK_F2
  69 1362 0482     	   .byte SC_F3,VK_F3
  70 1364 0C83     	   .byte SC_F4,VK_F4
  71 1366 0384     	   .byte SC_F5,VK_F5
  72 1368 0B85     	   .byte SC_F6,VK_F6
  73 136a 8386     	   .byte SC_F7,VK_F7
  74 136c 0A87     	   .byte SC_F8,VK_F8
  75 136e 0188     	   .byte SC_F9,VK_F9
  76 1370 098A     	   .byte SC_F10,VK_F10
  77 1372 788B     	   .byte SC_F11,VK_F11
  78 1374 078C     	   .byte SC_F12,VK_F12
  79 1376 7030     	   .byte SC_KP0,'0'
  80 1378 6931     	   .byte SC_KP1,'1'
  81 137a 7232     	   .byte SC_KP2,'2'
  82 137c 7A33     	   .byte SC_KP3,'3'
  83 137e 6B34     	   .byte SC_KP4,'4'
  84 1380 7335     	   .byte SC_KP5,'5'
  85 1382 7436     	   .byte SC_KP6,'6'
  86 1384 6C37     	   .byte SC_KP7,'7'
  87 1386 7538     	   .byte SC_KP8,'8'
  88 1388 7D39     	   .byte SC_KP9,'9'
ARM GAS  forth.s 			page 57


  89 138a 7C2A     	   .byte SC_KPMUL,'*'
  90 138c 4A2F     	   .byte SC_KPDIV,'/'
  91 138e 792B     	   .byte SC_KPPLUS,'+'
  92 1390 7B2D     	   .byte SC_KPMINUS,'-'
  93 1392 712E     	   .byte SC_KPDOT,'.'
  94 1394 5A0D     	   .byte SC_KPENTER,'\r'
  95 1396 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1398 AAAA     	   .byte BAT_OK,BAT_OK  
  97 139a 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 139c 6141     	   .byte 'a','A'
 102 139e 6242     	   .byte 'b','B'
 103 13a0 6343     	   .byte 'c','C'
 104 13a2 6444     	   .byte 'd','D'
 105 13a4 6545     	   .byte 'e','E'
 106 13a6 6646     	   .byte 'f','F'
 107 13a8 6747     	   .byte 'g','G'
 108 13aa 6848     	   .byte 'h','H'
 109 13ac 6949     	   .byte 'i','I'
 110 13ae 6A4A     	   .byte 'j','J'
 111 13b0 6B4B     	   .byte 'k','K'
 112 13b2 6C4C     	   .byte 'l','L'
 113 13b4 6D4D     	   .byte 'm','M'
 114 13b6 6E4E     	   .byte 'n','N'
 115 13b8 6F4F     	   .byte 'o','O'
 116 13ba 7050     	   .byte 'p','P'
 117 13bc 7151     	   .byte 'q','Q'
 118 13be 7252     	   .byte 'r','R'
 119 13c0 7353     	   .byte 's','S'
 120 13c2 7454     	   .byte 't','T'
 121 13c4 7555     	   .byte 'u','U'
 122 13c6 7656     	   .byte 'v','V'
 123 13c8 7757     	   .byte 'w','W'
 124 13ca 7858     	   .byte 'x','X'
 125 13cc 7959     	   .byte 'y','Y'
 126 13ce 7A5A     	   .byte 'z','Z'
 127 13d0 3121     	   .byte '1','!'
 128 13d2 3240     	   .byte '2','@'
 129 13d4 3323     	   .byte '3','#'
 130 13d6 3424     	   .byte '4','$'
 131 13d8 3525     	   .byte '5','%'
 132 13da 365E     	   .byte '6','^'
 133 13dc 3726     	   .byte '7','&'
 134 13de 382A     	   .byte '8','*'
 135 13e0 3928     	   .byte '9','('
 136 13e2 3029     	   .byte '0',')'
 137 13e4 2D5F     	   .byte '-','_'
 138 13e6 3D2B     	   .byte '=','+'
 139 13e8 607E     	   .byte '`','~'
 140 13ea 2722     	   .byte '\'','"'
 141 13ec 2C3C     	   .byte ',','<'
 142 13ee 2E3E     	   .byte '.','>'
 143 13f0 2F3F     	   .byte '/','?'
 144 13f2 5C7C     	   .byte '\\','|'
 145 13f4 3B3A     	   .byte ';',':'
ARM GAS  forth.s 			page 58


 146 13f6 5B7B     	   .byte '[','{'
 147 13f8 5D7D     	   .byte ']','}'
 148 13fa 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 13fc 315C     	   .byte '1','\\'
 153 13fe 3240     	   .byte '2','@'
 154 1400 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 1402 363F     	   .byte '6','?'
 158 1404 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 1406 397B     	   .byte '9','{'
 161 1408 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 140a 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 140c 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 140e 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1410 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1412 11A3     	    .byte SC_RALT,VK_RALT
 172 1414 2F97     	    .byte SC_APPS,VK_APPS
 173 1416 758D     	    .byte SC_UP,VK_UP
 174 1418 728E     	    .byte SC_DOWN,VK_DOWN
 175 141a 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 141c 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 141e 7095     	    .byte SC_INSERT,VK_INSERT
 178 1420 6C91     	    .byte SC_HOME,VK_HOME
 179 1422 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1424 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1426 717F     	    .byte SC_DEL,VK_DELETE
 182 1428 6992     	    .byte SC_END,VK_END
 183 142a 4A2F     	    .byte SC_KPDIV,'/'
 184 142c 5A0D     	    .byte SC_KPENTER,'\r'
 185 142e 1200     	    .byte 0x12,0
 186 1430 7C00     	    .byte 0x7c,0
 187 1432 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1434 6303     	   .byte 'c', VK_CTRL_C 
 193 1436 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1438 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 143a 27A2     	   .byte SC_RGUI,VK_RGUI
 196 143c 11A3     	   .byte SC_RALT,VK_RALT
 197 143e 2F97     	   .byte SC_APPS,VK_APPS
 198 1440 7095     	   .byte SC_INSERT,VK_INSERT
 199 1442 6C91     	   .byte SC_HOME,VK_HOME
 200 1444 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1446 717F     	   .byte SC_DEL,VK_DELETE
 202 1448 6992     	   .byte SC_END,VK_END
ARM GAS  forth.s 			page 59


 203 144a 7A94     	   .byte SC_PGDN,VK_PGDN
 204 144c 758D     	   .byte SC_UP,VK_UP
 205 144e 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1450 728E     	   .byte SC_DOWN,VK_DOWN
 207 1452 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1454 4A2F     	   .byte SC_KPDIV,'/'
 209 1456 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1458 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 145a 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 145c 119E     	   .byte SC_LALT,VK_LALT
 213 145e 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1460 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1462 761B     	   .byte SC_ESC,VK_ESC
 216 1464 779A     	   .byte SC_NUM,VK_NLOCK
 217 1466 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1468 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
ARM GAS  forth.s 			page 60


  77              	**********************************/
  78 146a 00BF     	    _GBL_FUNC kbd_isr 
  79 146c 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1474 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1478 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 147a 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1482 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 1486 10F0020F 	    tst r0,#KBD_TX 
  85 148a 40F08480 	    bne send_bit  
  86 148e 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1490 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1494 01F10102 	    add r2,r1,#1
  89 1498 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 149c 0029     	    cmp r1,#0
  91 149e 15D0     	    beq start_bit 
  92 14a0 0929     	    cmp r1,#9 
  93 14a2 25D0     	    beq parity_bit 
  94 14a4 0A29     	    cmp r1,#10 
  95 14a6 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 14a8 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 14ac 4FEA5202 	    lsr r2,#1 
  99 14b0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 14b4 07D0     	    beq 1f 
 101 14b6 42F08002 	    orr r2,#(1<<7)
 102 14ba 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 14be 00F10100 	    add r0,#1 
 104 14c2 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 14c6 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 14ca 63E0     	    b 9f         
 107              	start_bit:
 108 14cc 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 14d0 60D1     	    bne 9f // not a start bit 
 110 14d2 80EA0000 	    eor r0,r0 
 111 14d6 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 14da 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 14de 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 14e2 6FF00101 	    mvn r1,#1
 115 14e6 00EA0100 	    and r0,r1 // clear error flag 
 116 14ea 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 14ee 51E0     	    b 9f 
 118              	parity_bit:
 119 14f0 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 14f4 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 14f8 4CD0     	    beq 9f  
 122 14fa 01F10101 	    add r1,#1 
 123 14fe 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 1502 47E0     	    b 9f      
 125              	stop_bit:
 126 1504 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1508 40D0     	    beq 8f // error stop bit expected 
 128 150a 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 150e 11F0010F 	    tst r1,#1 
 130 1512 3BD0     	    beq 8f // error parity
 131 1514 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
ARM GAS  forth.s 			page 61


 132 1518 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 151c E028     	    cmp r0,#XT_KEY
 134 151e 04D1     	    bne 1f
 135 1520 41F04001 	    orr r1,#KBD_F_XT
 136 1524 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1528 30E0     	    b 8f  
 138 152a 11F0800F 	1:  tst r1,#KBD_F_REL
 139 152e 14D0     	    beq store_code
 140 1530 5828     	    cmp r0,#SC_CAPS
 141 1532 04D1     	    bne 1f
 142 1534 81F00401 	    eor r1,#KBD_F_CAPS
 143 1538 41F00101 	    orr r1,#KBD_F_CTGL 
 144 153c 06E0     	    b 2f 
 145 153e 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1548 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 154c 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1550 01EA0201 	    and r1,r2
 149 1554 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 1558 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 155a F028     	    cmp r0,#KEY_REL
 154 155c 04D1     	    bne 1f
 155              	// set release flags 
 156 155e 41F08001 	    orr r1,#KBD_F_REL 
 157 1562 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 1566 11E0     	    b 8f     
 159 1568 0146     	1:  mov r1,r0 
 160 156a 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1574 0AD1     	    bne 8f // was async key 
 162 1576 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 157a 04F17802 	    add r2,UP,#KBD_QUEUE
 164 157e 1154     	    strb r1,[r2,r0]
 165 1580 00F10100 	    add r0,#1
 166 1584 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1588 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 158c 80EA0000 	8:  eor r0,r0 
 169 1590 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1594 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 1596 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 159a 01F10100 	    add r0,r1,#1
 182 159e 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 15a2 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 15a6 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
ARM GAS  forth.s 			page 62


 185              	//    cbz r1,9f 
 186 15aa 0829     	1:  cmp r1,#8 
 187 15ac 15D0     	    beq send_parity 
 188 15ae 0929     	    cmp r1,#9 
 189 15b0 1CD0     	    beq send_stop
 190 15b2 0A29     	    cmp r1,#10
 191 15b4 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 15b6 10F0010F 	    tst r0,#1
 194 15ba 4FEA5000 	    lsr r0,#1
 195 15be 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 15c2 02D1     	    bne 1f 
 197 15c4 4FEA0242 	    lsl r2,#16
 198 15c8 05E0     	    b 2f  
 199 15ca 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 15ce 00F10100 	    add r0,#1 
 201 15d2 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 15d6 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 15d8 1CE0     	    b 9f 
 204              	send_parity:
 205 15da 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 15de 10F0010F 	    tst r0,#1
 207 15e2 01D0     	    beq 1f 
 208 15e4 4FEA0242 	    lsl r2,#16
 209 15e8 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 15ea 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 15ec 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 15ee 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 15f2 1960     	    str r1,[r3,#GPIO_MODER]
 217 15f4 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 15f6 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 15fa 6FF00201 	    mvn r1,#KBD_TX 
 221 15fe 00EA0100 	    and r0,r1 
 222 1602 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1604 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1608 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 160c 80EA0000 	    eor r0,r0 
 226 1610 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1614 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1616 02B4     	    push {r1}
 238 1618 DFF86414 	    ldr r1,=async_keys
 239 161c 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
ARM GAS  forth.s 			page 63


 240 1626 02BC     	    pop {r1}
 241 1628 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 162a 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1634 FF28     	    cmp r0,#255
 256 1636 01D1     	    bne set_async_key 
 257 1638 0020     	    movs r0,#0 
 258 163a 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 163c 06B4     	    push {r1,r2}
 262 163e 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1642 DFF84014 	    ldr r1,=async_jump 
 264 1646 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 164a 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 164e 04E0     	    b set_reset
 268              	ctrl_key:
 269 1650 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1654 01E0     	    b set_reset 
 271              	alt_key:
 272 1656 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 165a 12F0800F 	    tst r2,#KBD_F_REL 
 275 165e 04D0     	    beq 1f 
 276 1660 6FEA0000 	    mvn r0,r0
 277 1664 02EA0002 	    and r2,r0
 278 1668 01E0     	    b 2f
 279 166a 42EA0002 	1:  orr r2,r0 
 280 166e 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1672 5FF0FF30 	    movs r0,#-1
 282 1676 06BC     	9:  pop {r1,r2}
 283 1678 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 167a 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 167c 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 167e 1401     	    .byte SC_LCTRL,1  // left control 
 290 1680 1401     	    .byte SC_RCTRL,1  // right control 
 291 1682 1102     	    .byte SC_LALT,2  // left alt 
 292 1684 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 1686 00FF     	    .byte 0,255 
 294              	
ARM GAS  forth.s 			page 64


 295              	async_jump: // tbb table for async keys 
 296 1688 00       	    .byte 0 // shift  key 
 297 1689 03       	    .byte (ctrl_key-shift_key)/2
 298 168a 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 168b 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 168c 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1694 1846     	    mov r0,r3 
 311 1696 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 169a 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 169e 00B5FFF7 	    _CALL gpio_config
 313      18F85DF8 
 313      04EB
 314 16a8 1846     	    mov r0,r3 
 315 16aa 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 16ae 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 16b2 00B5FFF7 	    _CALL gpio_config
 317      0EF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 16bc 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 16c4 4FF40050 	    mov r0,#(2<<12)
 321 16c8 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 16ca 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 16d2 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 16d6 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 16d8 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 16da 80EA0000 	   eor r0,r0 
 328 16de C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 16e2 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 16e6 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 16ea 4FF00101 	   mov r1,#1 
 333 16ee 00B5FEF7 	   _CALL nvic_set_priority
 333      94FF5DF8 
 333      04EB
 334 16f8 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 16fc 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A6FF5DF8 
 335      04EB
 336 1706 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1708 A4120000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
ARM GAS  forth.s 			page 65


 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1718 47F8046D 	    _PUSH 
 342 171c 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1720 06F0FC06 	    and TOS,#0xFC  
 344 1724 01F06AB9 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1728 0EB4     	    push {T1,T2,T3}
 352 172a 80EA0000 	    eor T0,T0  
 353 172e 04F17803 	    add T3,UP,#KBD_QUEUE
 354 1732 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1736 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 173a 9142     	    cmp T1,T2 
 357 173c 06D0     	    beq 2f  
 358 173e 585C     	    ldrb T0,[T3,T1]
 359 1740 01F10101 	    add T1,#1 
 360 1744 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1748 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 174c 0EBC     	2:  pop {T1,T2,T3}
 363 174e 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1750 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 175a 0000     	    movs T0,T0
 368 175c F8D0     	    beq wait_code  
 369 175e 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1760 04B4     	    push {T2}
 380 1762 11F8012B 	1:  ldrb T2,[T1],#1
 381 1766 22B1     	    cbz T2,2f 
 382 1768 8242     	    cmp T2,T0
 383 176a 02D0     	    beq 2f 
 384 176c 01F10101 	    add T1,#1 
 385 1770 F7E7     	    b 1b 
 386 1772 0878     	2:  ldrb T0,[T1]
 387 1774 0000     	    movs T0,T0 // set/reset zero flag 
 388 1776 04BC     	9:  pop {T2}
 389 1778 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
ARM GAS  forth.s 			page 66


 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 177a 0C170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1788 47F8046D 	    _PUSH 
 398 178c 86EA0606 	    eor TOS,TOS 
 399 1790 BD49     	    ldr T1,=sc_ascii // translation table
 400 1792 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1796 4FF04002 	    mov T2,#KBD_F_XT 
 402 179a 1042     	    tst T0,T2
 403 179c 00D0     	    beq 1f
 404 179e BB49     	    ldr T1,=extended // extended code translation
 405 17a0 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 17aa 98B1     	    cbz T0,inkey_exit
 407 17ac E128     	    cmp T0,#XT2_KEY // pause 
 408 17ae 13D0     	    beq pause_key
 409 17b0 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 17ba 0646     	    mov TOS,T0
 411 17bc 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 17c6 032E     	    cmp TOS,#VK_CTRL_C 
 413 17c8 3EF436AE 	    beq user_reboot 
 414 17cc 47F8046D 	    _PUSH 
 415 17d0 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 17d4 01F012B9 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 17d8 4FF00701 	    mov T1,#7 
 420 17dc 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 17e6 0139     	    subs T1,#1
 422 17e8 F8D1     	    bne 1b 
 423 17ea 01F007B9 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 17ee 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 17f2 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 17f6 06D1     	    bne shift_down 
 431 17f8 10F0200F 	    tst T0,#KBD_F_ALT  
 432 17fc 06D1     	    bne altchar_down 
 433 17fe 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1802 06D1     	    bne ctrl_down 
 435 1804 0DE0     	    b 9f 
 436              	shift_down:
 437 1806 3046     	    mov T0,TOS 
 438 1808 A149     	    ldr T1,=shifted 
ARM GAS  forth.s 			page 67


 439 180a 04E0     	    b 8f 
 440              	altchar_down:
 441 180c 3046     	    mov T0,TOS 
 442 180e A149     	    ldr T1,=altchar
 443 1810 01E0     	    b 8f
 444              	ctrl_down:
 445 1812 3046     	    mov T0,TOS 
 446 1814 A049     	    ldr T1,=controls 
 447 1816 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1820 0646     	    mov TOS,T0
 449 1822 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 182c 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 182e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1832 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1836 0BD0     	    beq 9f 
 456 1838 412E     	    cmp TOS,#'A'
 457 183a 09D4     	    bmi 9f 
 458 183c 5B2E     	    cmp TOS,#'Z'+1 
 459 183e 03D4     	    bmi 3f 
 460 1840 612E     	    cmp TOS,#'a'
 461 1842 05D4     	    bmi 9f 
 462 1844 7B2E     	    cmp TOS,#'z'+1
 463 1846 03D5     	    bpl 9f 
 464 1848 4FF02000 	3:  mov T0,#(1<<5)
 465 184c 86EA0006 	    eor TOS,T0 
 466 1850 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1852 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1854 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 1856 0128     	    cmp r0,ST_PREVID 
 484 1858 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 185a 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 185e 00B5FEF7 	    _CALL nvic_disable_irq
 487      0AFF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1868 4FF40063 	    _MOV32 r3,KBD_GPIO
ARM GAS  forth.s 			page 68


 489      C4F20203 
 490 1870 1846     	    mov r0,r3 
 491 1872 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1876 4FF01102 	    mov r2,#OUTPUT_OD
 493 187a 00B5FEF7 	    _CALL gpio_config 
 493      2AFF5DF8 
 493      04EB
 494 1884 1846     	    mov r0,r3 
 495 1886 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 188a 82EA0202 	    eor r2,r2 
 497 188e 00B5FEF7 	    _CALL gpio_out 
 497      76FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1898 4FF4E150 	    mov r0,#150*48
 500 189c 0138     	1:  subs r0,#1 
 501 189e FDD1     	    bne 1b
 502 18a0 01BC     	    pop {r0}
 503 18a2 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 18a6 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 18aa 40F00200 	    orr r0,#KBD_TX 
 506 18ae 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 18b2 80EA0000 	    eor r0,r0 
 508 18b6 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 18ba 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 18be 1846     	    mov r0,r3 
 513 18c0 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 18c4 4FF01102 	    mov r2,#OUTPUT_OD 
 515 18c8 00B5FEF7 	    _CALL gpio_config 
 515      03FF5DF8 
 515      04EB
 516 18d2 1846     	    mov r0,r3 
 517 18d4 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 18d8 82EA0202 	    eor r2,r2 
 519 18dc 00B5FEF7 	    _CALL gpio_out
 519      4FFF5DF8 
 519      04EB
 520              	// release clock line 
 521 18e6 1846     	    mov r0,r3 
 522 18e8 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 18ec 4FF00002 	    mov r2,#INPUT_FLOAT
 524 18f0 00B5FEF7 	    _CALL gpio_config
 524      EFFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 18fa 4FF00A00 	    mov r0,#10
 528 18fe E060     	    str r0,[UP,#CD_TIMER]
 529 1900 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1902 20B1     	    cbz r0, 4f 
 531 1904 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1908 10F0020F 	    tst r0,#KBD_TX
 533 190c F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 190e 4FF01D00 	4:  mov r0,#TIM3_IRQ
ARM GAS  forth.s 			page 69


 536 1912 00B5FEF7 	    _CALL nvic_enable_irq
 536      9BFE5DF8 
 536      04EB
 537 191c 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1920 20F00201 	    bic r1,r0,#KBD_TX
 539 1924 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1928 00F00200 	    and r0,#KBD_TX
 541 192c 48B1     	    cbz r0, 5f
 542 192e 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1930 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1934 1960     	    str r1,[r3,#GPIO_MODER]
 545 1936 80EA0000 	    eor r0,r0 
 546 193a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 193e 6FEA0000 	    mvn r0,r0   
 548 1942 0EBC     	5:  pop {r1,r2,r3}
 549 1944 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1946 80EA0000 	    eor T0,T0 
 555 194a C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 194e C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1952 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1956 6FF00301 	    mvn T1,#3
 559 195a 00EA0100 	    and T0,T1 
 560 195e 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1962 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1964 7E170000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1970 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1974 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 197e B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1980 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 198a 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1994 FE28     	    cmp r0,KBD_CMD_RESEND
 574 1996 EBD0     	    beq 1b 
 575 1998 4FF4FA70 	    mov T0,#500 
 576 199c E060     	    str T0,[UP,#CD_TIMER]
 577 199e 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 19a8 10B9     	    cbnz T0,3f
 579 19aa E068     	    ldr T0,[UP,#CD_TIMER]
 580 19ac 0028     	    cmp T0,#0 
ARM GAS  forth.s 			page 70


 581 19ae F6D1     	    bne 2b 
 582 19b0 47F8046D 	3:  _PUSH 
 583 19b4 0646     	    mov TOS,T0  
 584 19b6 01F021B8 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 19ba 68190000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 19c8 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 19d2 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 19d6 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 19e0 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 19ea FE28     	    cmp T0,#KBD_CMD_RESEND
 597 19ec ECD0     	    beq 1b
 598 19ee FA28     	    cmp T0,#KBD_ACK  
 599 19f0 F6D1     	    bne 2b 
 600 19f2 3046     	2:  mov T0,TOS 
 601 19f4 00F00700 	    and T0,#7 
 602 19f8 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1a02 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1a0c FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1a0e F0D0     	    beq 2b
 606 1a10 FA28     	    cmp T0,#KBD_ACK 
 607 1a12 F6D1     	    bne 3b  
 608 1a14 57F8046B 	    _POP 
 609 1a18 00F0F0BF 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1a1c BE190000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1a2c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1a30 10F0010F 	    tst T0,#1
 619 1a34 01D1     	    bne 1f 
 620 1a36 00F0E1BF 	    _NEXT 
 621 1a3a 47F8046D 	1: _PUSH 
ARM GAS  forth.s 			page 71


 622 1a3e 6FF00101 	    mvn T1,#1 
 623 1a42 00EA0100 	    and T0,T1 
 624 1a46 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 1a4a 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1a4e 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1a56 201A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1a64 504700BF 	    _NEST
 635 1a68 2D1A0000 	1:  _ADR CAPS_LED  
 636 1a6c 89170000 	    _ADR PS2_QKEY 
 637 1a70 112F0000 	    _ADR QDUP 
 638 1a74 032C0000 	    _QBRAN 1b  
 638      681A0000 
 639 1a7c 032A0000 	    _UNNEST 
 640 1a80 7A160000 	
 640      88160000 
 640      E8120000 
 640      0C140000 
 640      9C130000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
ARM GAS  forth.s 			page 72


  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1aa0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1aa8 0346     	    mov r3,r0 
  44 1aaa 4FF00401 	    mov r1,#PIN_F_SC 
  45 1aae 4FF00102 	    mov r2,#OUTPUT_PP
  46 1ab2 00B5FEF7 	    _CALL gpio_config 
  46      0EFE5DF8 
  46      04EB
  47 1abc 1846     	    mov r0,r3 
  48 1abe 4FF00401 	    mov r1,#PIN_F_SC  
  49 1ac2 4FF00102 	    MOV r2,#1
  50 1ac6 00B5FEF7 	    _CALL gpio_out 
  50      5AFE5DF8 
  50      04EB
  51 1ad0 1846     	    mov r0,r3 
  52 1ad2 4FF00501 	    mov r1,#PIN_SCK  
  53 1ad6 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1ada 00B5FEF7 	    _CALL gpio_config 
  54      FAFD5DF8 
  54      04EB
  55 1ae4 1846     	    mov r0,r3 
  56 1ae6 4FF00701 	    mov r1,#PIN_MOSI 
  57 1aea 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1aee 00B5FEF7 	    _CALL gpio_config 
  58      F0FD5DF8 
  58      04EB
  59 1af8 1846     	    mov r0,r3
  60 1afa 4FF00601 	    mov r1,#PIN_MISO
  61 1afe 4FF00202 	    mov r2,#INPUT_AFO  
  62 1b02 00B5FEF7 	    _CALL gpio_config
  62      E6FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1b0c 4CF6AA40 	    mov r0,#0xCCAA
  65 1b10 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1b12 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1b1a 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1b1c 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1b20 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1b22 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1b2a 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1b2e 0180     	    strh r1,[r0,#SPI_CR1]
  73 1b30 196A     	    ldr r1,[r3,#GPIO_AFRL]
ARM GAS  forth.s 			page 73


  74 1b32 80EA0000 	    eor r0,r0 
  75 1b36 C5F25050 	    movt r0,#0x5550 
  76 1b3a 40EA0100 	    orr r0,r1 
  77 1b3e 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1b40 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1b42 5A1A0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1b50 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1b58 4FF00401 	    mov r1,#PIN_F_SC 
  88 1b5c 4FF00002 	    mov r2,#0 
  89 1b60 00B5FEF7 	    _CALL gpio_out 
  89      0DFE5DF8 
  89      04EB
  90 1b6a 00F047BF 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1b6e 461B0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1b7c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1b84 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1b86 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1b8a FBD1     	    bne 1b 
 102 1b8c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1b94 4FF00401 	    mov r1,#PIN_F_SC 
 104 1b98 4FF00102 	    mov r2,#1 
 105 1b9c 00B5FEF7 	    _CALL gpio_out 
 105      EFFD5DF8 
 105      04EB
 106 1ba6 00F029BF 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1baa 721B0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1bb8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
ARM GAS  forth.s 			page 74


 114      C4F20100 
 115 1bc0 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1bc2 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1bc6 FBD0     	    beq 0b 
 118 1bc8 6FF00001 	    mvn T1,#0 
 119 1bcc 0173     	    strb T1,[T0,#SPI_DR]
 120 1bce 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1bd0 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1bd4 FBD0     	    beq 1b     
 123              	2:  
 124 1bd6 47F8046D 	    _PUSH 
 125 1bda 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1bdc 00F00EBF 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1be0 AE1B0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1bec 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1bf4 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1bf6 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1bfa FBD0     	    beq 0b 
 138 1bfc 0673     	    strb TOS,[T0,#SPI_DR]
 139 1bfe 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1c00 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1c04 FBD0     	    beq 1b 
 142 1c06 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1c08 57F8046B 	    _POP 
 144 1c0c 00F0F6BE 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1c10 E41B0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1c1c 504700BF 	    _NEST 
 153 1c20 511B0000 	    _ADR CHIP_SEL 
 154 1c24 C32B0000 	    _DOLIT 4
 154      04000000 
 155 1c2c ED1B0000 	    _ADR WR_BYTE
 156 1c30 7D1B0000 	    _ADR CHIP_DSEL
 157 1c34 032A0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1c38 141C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
ARM GAS  forth.s 			page 75


 163      454E424C 
 164 1c44 504700BF 	    _NEST 
 165 1c48 511B0000 	    _ADR CHIP_SEL 
 166 1c4c C32B0000 	    _DOLIT 6 
 166      06000000 
 167 1c54 ED1B0000 	    _ADR WR_BYTE 
 168 1c58 7D1B0000 	    _ADR CHIP_DSEL 
 169 1c5c 032A0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1c60 3C1C0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1c6c 504700BF 	    _NEST
 177 1c70 511B0000 	    _ADR CHIP_SEL  
 178 1c74 C32B0000 	    _DOLIT sr_cmd 
 178      941C0000 
 179 1c7c 012E0000 	    _ADR PLUS 
 180 1c80 692C0000 	    _ADR CAT
 181 1c84 ED1B0000 	    _ADR WR_BYTE
 182 1c88 B91B0000 	    _ADR RD_BYTE
 183 1c8c 7D1B0000 	    _ADR CHIP_DSEL  
 184 1c90 032A0000 	    _UNNEST 
 185 1c94 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1c97 641C0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1ca4 504700BF 	    _NEST 
 193 1ca8 3D2D0000 	    _ADR DUPP 
 194 1cac C32B0000 	    _DOLIT 16
 194      10000000 
 195 1cb4 D92D0000 	    _ADR RSHIFT 
 196 1cb8 ED1B0000 	    _ADR WR_BYTE 
 197 1cbc 3D2D0000 	    _ADR DUPP
 198 1cc0 C32B0000 	    _DOLIT 8 
 198      08000000 
 199 1cc8 D92D0000 	    _ADR RSHIFT 
 200 1ccc ED1B0000 	    _ADR WR_BYTE 
 201 1cd0 ED1B0000 	    _ADR WR_BYTE 
 202 1cd4 032A0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1cd8 9B1C0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
ARM GAS  forth.s 			page 76


 208      4E4500BF 
 209 1ce8 504700BF 	    _NEST 
 210 1cec C32B0000 	1:  _DOLIT 0 
 210      00000000 
 211 1cf4 6D1C0000 	    _ADR RD_SR 
 212 1cf8 C32B0000 	    _DOLIT 3 
 212      03000000 
 213 1d00 812D0000 	    _ADR ANDD 
 214 1d04 032C0000 	    _QBRAN 2f
 214      141D0000 
 215 1d0c 172C0000 	    _BRAN 1b
 215      EC1C0000 
 216 1d14 032A0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1d18 DC1C0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1d28 504700BF 	    _NEST 
 225 1d2c 451C0000 	    _ADR WR_ENBL
 226 1d30 511B0000 	    _ADR CHIP_SEL 
 227 1d34 C32B0000 	    _DOLIT 0x20 
 227      20000000 
 228 1d3c ED1B0000 	    _ADR WR_BYTE 
 229 1d40 A51C0000 	    _ADR SEND_ADR
 230 1d44 7D1B0000 	    _ADR CHIP_DSEL 
 231 1d48 E91C0000 	    _ADR WAIT_DONE 
 232 1d4c 032A0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1d50 1C1D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1d60 504700BF 	    _NEST 
 240 1d64 451C0000 	    _ADR WR_ENBL 
 241 1d68 511B0000 	    _ADR CHIP_SEL
 242 1d6c C32B0000 	    _DOLIT 0x60
 242      60000000 
 243 1d74 C32B0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1d7c ED1B0000 	    _ADR WR_BYTE 
 245 1d80 ED1B0000 	    _ADR WR_BYTE 
 246 1d84 7D1B0000 	    _ADR CHIP_DSEL 
 247 1d88 E91C0000 	    _ADR WAIT_DONE
 248 1d8c 032A0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
ARM GAS  forth.s 			page 77


 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1d90 541D0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1d9c 504700BF 	    _NEST
 258 1da0 511B0000 	    _ADR CHIP_SEL 
 259 1da4 C32B0000 	    _DOLIT 3 
 259      03000000 
 260 1dac ED1B0000 	    _ADR WR_BYTE 
 261 1db0 A51C0000 	    _ADR SEND_ADR
 262 1db4 B92C0000 	    _ADR TOR   
 263 1db8 172C0000 	    _BRAN 2f
 263      D01D0000 
 264 1dc0 B91B0000 	1:  _ADR RD_BYTE
 265 1dc4 612D0000 	    _ADR OVER 
 266 1dc8 552C0000 	    _ADR CSTOR
 267 1dcc 5D2E0000 	    _ADR ONEP 
 268 1dd0 E52B0000 	2:  _DONXT 1b
 268      C01D0000 
 269 1dd8 2D2D0000 	    _ADR DROP 
 270 1ddc 7D1B0000 	    _ADR CHIP_DSEL 
 271 1de0 032A0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1de4 941D0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1df0 504700BF 	    _NEST 
 280 1df4 451C0000 	    _ADR WR_ENBL
 281 1df8 511B0000 	    _ADR CHIP_SEL
 282 1dfc C32B0000 	    _DOLIT 2 
 282      02000000 
 283 1e04 ED1B0000 	    _ADR WR_BYTE 
 284 1e08 A51C0000 	    _ADR SEND_ADR
 285 1e0c B92C0000 	    _ADR TOR
 286 1e10 172C0000 	    _BRAN 2f 
 286      301E0000 
 287 1e18 3D2D0000 	1:  _ADR DUPP 
 288 1e1c 692C0000 	    _ADR CAT 
 289 1e20 3D2D0000 	    _ADR DUPP 
 290 1e24 CD3F0000 	    _ADR HDOT
 291 1e28 ED1B0000 	    _ADR WR_BYTE 
 292 1e2c 5D2E0000 	    _ADR ONEP
 293 1e30 E52B0000 	2:  _DONXT 1b 
 293      181E0000 
 294 1e38 2D2D0000 	    _ADR DROP
 295 1e3c 7D1B0000 	    _ADR CHIP_DSEL
 296 1e40 E91C0000 	    _ADR WAIT_DONE 
 297 1e44 032A0000 	    _UNNEST
 298              	
ARM GAS  forth.s 			page 78


 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1e48 E81D0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1e58 504700BF 	    _NEST 
 318              	    
 319 1e5c 032A0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1e60 4C1E0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1e70 504700BF 	    _NEST 
 327              	
 328 1e74 032A0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1e78 641E0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1e80 504700BF 	    _NEST 
 336              	
 337 1e84 032A0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1e88 7C1E0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1e94 504700BF 	    _NEST 
 345              	
 346 1e98 032A0000 	    _UNNEST 
ARM GAS  forth.s 			page 79


 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1e9c 8C1E0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1ea8 504700BF 	    _NEST 
 354              	
 355 1eac 032A0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1eb0 5F708930 	     .word  0x3089705F // 1e-9
  34 1eb4 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1eb8 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1ebc BD378635 	     .word  0x358637BD // 1e-6 
  37 1ec0 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1ec4 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1ec8 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1ecc 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1ed0 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1ed4 0000803F 	     .word  0x3F800000 // 1.0 
ARM GAS  forth.s 			page 80


  44 1ed8 00002041 	     .word  0x41200000 // 1e1 
  45 1edc 0000C842 	     .word  0x42C80000 // 1e2 
  46 1ee0 00007A44 	     .word  0x447A0000 // 1e3 
  47 1ee4 00401C46 	     .word  0x461C4000 // 1e4 
  48 1ee8 0050C347 	     .word  0x47C35000 // 1e5 
  49 1eec 00247449 	     .word  0x49742400 // 1e6 
  50 1ef0 8096184B 	     .word  0x4B189680 // 1e7
  51 1ef4 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1ef8 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10 
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1efc A01E0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1f08 4FEA8606 	    lsl TOS,#2  
  61 1f0c E648     	    ldr t0, =p10 
  62 1f0e 0644     	    add TOS,TOS,T0
  63 1f10 3668     	    ldr TOS,[TOS]  
  64 1f12 00F073BD 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1f16 DFF89403 	   ldr.w r0,=CPACR 
  73 1f1a 0168     	   ldr R1,[R0]
  74 1f1c 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1f20 0160     	   str r1,[r0]
  76 1f22 BFF34F8F 	   dsb 
  77 1f26 E248     	   ldr r0,=FPC_BASE_ADR
  78 1f28 81EA0101 	   eor r1,r1 
  79 1f2c 0160     	   str r1,[r0,FPCCR]
  80 1f2e BFF34F8F 	   dsb
  81 1f32 4FF05100 	   mov r0,#FPU_IRQ 
  82 1f36 00B5FEF7 	   _CALL nvic_enable_irq
  82      89FB5DF8 
  82      04EB
  83 1f40 7047     	   _RET
  84              	
  85              	/***************************
  86              	   FPSCR ( -- u )
  87              	   stack fpu SCR register 
  88              	***************************/
  89 1f42 001F0000 	   _HEADER FPSCR,5,"FPSCR"
  89      05465053 
  89      4352
  90 1f4c 47F8046D 	   _PUSH 
  91 1f50 F1EE106A 	   vmrs TOS,FPSCR
  92 1f54 BFF34F8F 	   dsb  
  93 1f58 00F050BD 	   _NEXT 
  94              	
ARM GAS  forth.s 			page 81


  95              	
  96              	/**************************
  97              	   CLR_FPSCR ( mask -- )
  98              	   clear FPSCR bits 
  99              	input:
 100              	    mask  and mask 
 101              	************************/
 102 1f5c 461F0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
 102      09434C52 
 102      5F465053 
 102      435200BF 
 103 1f6c F1EE100A 	   vmrs T0,FPSCR 
 104 1f70 BFF34F8F 	   dsb 
 105 1f74 06EA0006 	   and TOS,T0  
 106 1f78 E1EE106A 	   vmsr FPSCR,TOS 
 107 1f7c BFF34F8F 	   dsb 
 108 1f80 00F03CBD 	   _NEXT 
 109              	
 110              	
 111              	/*******************************
 112              	    >S0 variable ( f# --  )
 113              	    send float to fpu S0 
 114              	**********************************/
 115 1f84 601F0000 	    _HEADER TOS0,3,">S0"
 115      033E5330 
 116 1f8c 00EE106A 	    vmov.f32 S0,TOS 
 117 1f90 57F8046B 	    _POP 
 118 1f94 00F032BD 	    _NEXT  
 119              	
 120              	/*******************************
 121              	    >S1 variable ( f# --  )
 122              	    send float to fpu S1 
 123              	**********************************/
 124 1f98 881F0000 	    _HEADER TOS1,3,">S1"
 124      033E5331 
 125 1fa0 00EE906A 	    vmov.f32 S1,TOS 
 126 1fa4 57F8046B 	    _POP 
 127 1fa8 00F028BD 	    _NEXT  
 128              	
 129              	/*******************************
 130              	    >S2 variable ( f# --  )
 131              	    send float to fpu S2 
 132              	**********************************/
 133 1fac 9C1F0000 	    _HEADER TOS2,3,">S2"
 133      033E5332 
 134 1fb4 01EE106A 	    vmov.f32 S2,TOS 
 135 1fb8 57F8046B 	    _POP 
 136 1fbc 00F01EBD 	    _NEXT  
 137              	
 138              	/*******************************
 139              	    S0>  ( -- f )
 140              	    push fpu S0 
 141              	*******************************/
 142 1fc0 B01F0000 	    _HEADER S0FROM,3,"S0>"
 142      0353303E 
 143 1fc8 47F8046D 	    _PUSH 
 144 1fcc 10EE106A 	    vmov.f32 TOS,S0 
ARM GAS  forth.s 			page 82


 145 1fd0 00F014BD 	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S1>  ( -- f )
 149              	    push fpu S1 
 150              	*******************************/
 151 1fd4 C41F0000 	    _HEADER S1FROM,3,"S1>"
 151      0353313E 
 152 1fdc 47F8046D 	    _PUSH 
 153 1fe0 10EE906A 	    vmov.f32 TOS,S1 
 154 1fe4 00F00ABD 	    _NEXT 
 155              	
 156              	/*******************************
 157              	    S2>  ( -- f )
 158              	    push fpu S2 
 159              	*******************************/
 160 1fe8 D81F0000 	    _HEADER S2FROM,3,"S2>"
 160      0353323E 
 161 1ff0 47F8046D 	    _PUSH 
 162 1ff4 11EE106A 	    vmov.f32 TOS,S2 
 163 1ff8 00F000BD 	    _NEXT 
 164              	
 165              	
 166              	/*******************************
 167              	    F>S ( f -- n )
 168              	    convert float to integer 
 169              	    round to nearest integer 
 170              	*******************************/
 171 1ffc EC1F0000 	    _HEADER FTOS,3,"F>S"
 171      03463E53 
 172 2004 00EE106A 	    vmov.f32 S0,TOS
 173 2008 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 174 200c 10EE106A 	    vmov.f32 TOS,s0 
 175 2010 00F0F4BC 	    _NEXT 
 176              	    
 177              	/*******************************
 178              	    TRUNC (f - n )
 179              	    truncate float to integer 
 180              	*******************************/
 181 2014 00200000 	    _HEADER TRUNC,5,"TRUNC"
 181      05545255 
 181      4E4300BF 
 182 2020 00EE106A 	    vmov.f32 S0,TOS 
 183 2024 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 184 2028 10EE106A 	    vmov.f32 TOS,S0 
 185 202c 00F0E6BC 	    _NEXT 
 186              	
 187              	/*******************************
 188              	    S>F ( s -- f )
 189              	    convert integer to float 
 190              	*******************************/
 191 2030 18200000 	    _HEADER STOF,3,"S>F" 
 191      03533E46 
 192 2038 00EE106A 	    vmov.f32 S0,TOS
 193 203c B8EEC00A 	    vcvt.f32.s32 s0,s0 
 194 2040 10EE106A 	    vmov.f32 TOS,s0 
 195 2044 00F0DABC 	   _NEXT 
ARM GAS  forth.s 			page 83


 196              	
 197              	/*******************************
 198              	    F+ ( f1 f2 -- f1+f2 )
 199              	    add 2 floats 
 200              	*******************************/
 201 2048 34200000 	    _HEADER FPLUS,2,"F+"
 201      02462B00 
 202 2050 00EE106A 	   vmov.f32 s0,TOS 
 203 2054 57F8046B 	   _POP 
 204 2058 00EE906A 	   vmov.f32 s1,TOS 
 205 205c 30EE200A 	   vadd.f32 s0,s0,s1 
 206 2060 10EE106A 	   vmov.f32 TOS,s0
 207 2064 00F0CABC 	   _NEXT 
 208              	
 209              	   
 210              	/*******************************
 211              	    F- ( f1 f2 -- f1-f2 )
 212              	    substract 2 float 
 213              	*******************************/
 214 2068 4C200000 	    _HEADER FSUBB,2,"F-"
 214      02462D00 
 215 2070 00EE106A 	   vmov.f32 s0,TOS 
 216 2074 57F8046B 	   _POP 
 217 2078 00EE906A 	   vmov.f32 s1,TOS 
 218 207c 30EEC00A 	   vsub.f32 s0,s1,s0 
 219 2080 10EE106A 	   vmov.f32 TOS,s0
 220 2084 00F0BABC 	   _NEXT 
 221              	
 222              	
 223              	
 224              	/*******************************
 225              	    F* ( f1 f2 -- f1*f2 )
 226              	    multiply 2 float 
 227              	******************************/
 228 2088 6C200000 	   _HEADER FSTAR,2,"F*"
 228      02462A00 
 229 2090 00EE106A 	   vmov.f32 s0,TOS 
 230 2094 57F8046B 	   _POP 
 231 2098 00EE906A 	   vmov.f32 s1,TOS 
 232 209c 20EE800A 	   vmul.f32 s0,s1,s0 
 233 20a0 10EE106A 	   vmov.f32 TOS,s0
 234 20a4 00F0AABC 	   _NEXT 
 235              	
 236              	
 237              	/*******************************
 238              	    F/ ( f1 f2 -- f1/f2 )
 239              	    divide f1 by f2 
 240              	*******************************/
 241 20a8 8C200000 	    _HEADER FSLH,2,"F/"
 241      02462F00 
 242 20b0 00EE106A 	   vmov.f32 s0,TOS 
 243 20b4 57F8046B 	   _POP 
 244 20b8 00EE906A 	   vmov.f32 s1,TOS 
 245 20bc 80EE800A 	   vdiv.f32 s0,s1,s0 
 246 20c0 10EE106A 	   vmov.f32 TOS,s0
 247 20c4 00F09ABC 	   _NEXT 
 248              	
ARM GAS  forth.s 			page 84


 249              	
 250              	/********************************
 251              	    FNEGATE ( f -- -f )
 252              	    negate floating point 
 253              	********************************/
 254 20c8 AC200000 	    _HEADER FNEG,7,"FNEGATE"
 254      07464E45 
 254      47415445 
 255 20d4 00EE106A 	    vmov.f32 s0,TOS 
 256 20d8 B1EE400A 	    vneg.f32 S0,S0 
 257 20dc 10EE106A 	    vmov.f32 TOS,S0    
 258 20e0 00F08CBC 	    _NEXT 
 259              	
 260              	/**********************************
 261              	    FABS ( f -- f )
 262              	    return absolute value 
 263              	******************************/
 264 20e4 CC200000 	    _HEADER FABS,4,"FABS"
 264      04464142 
 264      530000BF 
 265 20f0 80EA0000 	    eor T0,T0 
 266 20f4 6FEA0000 	    mvn T0,T0 
 267 20f8 4FEA5000 	    lsr T0,#1 
 268 20fc 06EA0006 	    and TOS,T0 
 269 2100 00F07CBC 	    _NEXT 
 270              	
 271              	
 272              	/*****************************
 273              	     SQRT  ( f -- f )
 274              	     compute square root 
 275              	*****************************/
 276 2104 E8200000 	     _HEADER SQRT,4,"SQRT"
 276      04535152 
 276      540000BF 
 277 2110 00EE106A 	     vmov.f32 s0,TOS 
 278 2114 B1EEC00A 	     vsqrt.f32 s0,s0 
 279 2118 10EE106A 	     vmov.f32 TOS,s0 
 280 211c 00F06EBC 	     _NEXT 
 281              	
 282              	
 283              	/*****************************
 284              	   F0<   ( f -- flag )
 285              	*****************************/
 286 2120 08210000 	    _HEADER FZLESS,3,"F0<"
 286      0346303C 
 287 2128 00EE106A 	    vmov.f32 s0,TOS 
 288 212c B5EE400A 	    vcmp.f32 s0, #0.0 
 289 2130 F1EE106A 	    vmrs TOS,FPSCR
 290 2134 BFF34F8F 	    dsb  
 291 2138 4FEAE676 	    asr TOS,#31   
 292 213c 00F05EBC 	    _NEXT 
 293              	
 294              	/*****************************
 295              	    F> ( f#1 f#2 -- flag )
 296              	    f#1>f#2 ? 
 297              	*****************************/
 298 2140 24210000 	    _HEADER FGREAT,2,"F>"
ARM GAS  forth.s 			page 85


 298      02463E00 
 299 2148 504700BF 	    _NEST 
 300 214c 71200000 	    _ADR FSUBB
 301 2150 29210000 	    _ADR FZLESS
 302 2154 0D300000 	    _ADR INVER     
 303 2158 032A0000 	    _UNNEST 
 304              	
 305              	/*****************************
 306              	    F< ( f#1 f#2 -- flag )
 307              	    f#1<f#2 ? 
 308              	*****************************/
 309 215c 44210000 	    _HEADER FLESS,2,"F<"
 309      02463C00 
 310 2164 504700BF 	    _NEST 
 311 2168 71200000 	    _ADR FSUBB 
 312 216c 29210000 	    _ADR FZLESS
 313 2170 032A0000 	    _UNNEST 
 314              	
 315              	
 316              	/*******************************
 317              	    FMIN ( f#1 f#2 -- smallest )
 318              	********************************/
 319 2174 60210000 	    _HEADER FMIN,4,"FMIN"
 319      04464D49 
 319      4E0000BF 
 320 2180 504700BF 	    _NEST 
 321 2184 612D0000 	   _ADR OVER 
 322 2188 612D0000 	   _ADR OVER 
 323 218c 49210000 	   _ADR FGREAT 
 324 2190 032C0000 	   _QBRAN 1f 
 324      9C210000 
 325 2198 4D2D0000 	   _ADR SWAP  
 326 219c 2D2D0000 	1: _ADR DROP 
 327 21a0 032A0000 	    _UNNEST 
 328              	
 329              	/*******************************
 330              	    FMAX (f#1 f#2 -- largest )
 331              	*******************************/
 332 21a4 78210000 	    _HEADER FMAX,4,"FMAX"
 332      04464D41 
 332      580000BF 
 333 21b0 504700BF 	    _NEST 
 334 21b4 612D0000 	    _ADR OVER 
 335 21b8 612D0000 	    _ADR OVER 
 336 21bc 65210000 	    _ADR FLESS 
 337 21c0 032C0000 	    _QBRAN 1f
 337      CC210000 
 338 21c8 4D2D0000 	    _ADR SWAP   
 339 21cc 2D2D0000 	1:  _ADR DROP 
 340 21d0 032A0000 	    _UNNEST 
 341              	
 342              	
 343              	/*******************************
 344              	    FSIGN ( f -- n )
 345              	    return float sign 
 346              	*******************************/
 347 21d4 A8210000 	    _HEADER FSIGN,5,"FSIGN"
ARM GAS  forth.s 			page 86


 347      05465349 
 347      474E00BF 
 348 21e0 80EA0000 	    eor T0,T0 
 349 21e4 C8F20000 	    movt T0,#0X8000
 350 21e8 06EA0006 	    and TOS,T0
 351 21ec 4FEAE676 	    asr TOS,#31  
 352 21f0 00F004BC 	    _NEXT 
 353              	
 354              	/*******************************
 355              	    FEXP ( f --  n )
 356              	    return binary exponent of f 
 357              	*******************************/
 358 21f4 D8210000 	    _HEADER FEXP,4,"FEXP"
 358      04464558 
 358      500000BF 
 359 2200 4FF00000 	    _MOV32 T0,0X7F800000
 359      C7F68070 
 360 2208 06EA0006 	    and TOS,T0 
 361 220c 4FEAD656 	    lsr TOS,#23
 362 2210 A6F17F06 	    sub TOS,#127 
 363 2214 F2E3     	    _NEXT  
 364              	
 365              	/*******************************
 366              	   FMANT ( f -- n )
 367              	   return float mantisssa 
 368              	********************************/
 369 2216 F8210000 	    _HEADER FMANT,5,"FMANT"
 369      05464D41 
 369      4E54
 370 2220 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 370      C0F27F00 
 371 2228 06EA0006 	    AND TOS,T0 
 372 222c 80EA0000 	    EOR T0,T0 
 373 2230 C0F28000 	    MOVT T0,0x80
 374 2234 46EA0006 	    ORR TOS,T0 
 375 2238 E0E3     	    _NEXT 
 376              	
 377              	
 378              	/*******************************
 379              	    PI  ( -- f )
 380              	    return 3.14159265
 381              	*******************************/
 382 223a 1A220000 	    _HEADER PI,2,"PI"
 382      02504900 
 382      00BF
 383 2244 47F8046D 	    _PUSH 
 384 2248 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 384      C4F24906 
 385 2250 D4E3     	    _NEXT
 386              	 
 387              	/********************************
 388              	    LOG2 ( -- f)
 389              	    return log10(2)
 390              	*******************************/
 391 2252 3E220000 	    _HEADER LOG2,4,"LOG2"
 391      044C4F47 
 391      3200
ARM GAS  forth.s 			page 87


 392 225c 47F8046D 	    _PUSH 
 393 2260 42F29A06 	    _MOV32 TOS,0x3E9A209A
 393      C3F69A66 
 394 2268 C8E3     	    _NEXT 
 395              	
 396              	/********************************
 397              	    LOG2>10 ( f -- exp )
 398              	    convert float base2 exponent 
 399              	    to base10
 400              	********************************/
 401 226a 56220000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 401      074C4F47 
 401      323E3130 
 401      00BF
 402 2278 504700BF 	    _NEST
 403 227c 01220000 	    _ADR FEXP 
 404 2280 39200000 	    _ADR STOF 
 405 2284 5D220000 	    _ADR LOG2
 406 2288 91200000 	    _ADR FSTAR 
 407 228c 21200000 	    _ADR TRUNC  
 408 2290 3D2D0000 	    _ADR DUPP 
 409 2294 712D0000 	    _ADR ZLESS 
 410 2298 032C0000 	    _QBRAN 1f 
 410      A4220000 
 411 22a0 6D2E0000 	    _ADR ONEM
 412 22a4 032A0000 	1:  _UNNEST 
 413 22a8 D41E0000 	
 413      88ED00E0 
 413      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
ARM GAS  forth.s 			page 88


  29 22b4 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 22b8 0000C842 	            .word  0x42C80000  // 100.0
  31 22bc 00401C46 	            .word  0x461C4000  // 10000.0 
  32 22c0 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 22c4 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 22c8 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 22cc 504700BF 	    _NEST 
  45 22d0 C32B0000 	    _DOLIT 2 
  45      02000000 
  46 22d8 F12D0000 	    _ADR LSHIFT 
  47 22dc C32B0000 	    _DOLIT p10p2n 
  47      B4220000 
  48 22e4 012E0000 	    _ADR PLUS 
  49 22e8 492C0000 	    _ADR AT 
  50 22ec 032A0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 22f0 504700BF 	    _NEST 
  59 22f4 C32B0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 22fc C32B0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2304 85360000 	    _ADR PICK  // idx f e 1 idx 
  62 2308 F12D0000 	    _ADR LSHIFT // idx f e bit_mask 
  63 230c 812D0000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2310 032A0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2314 504700BF 	    _NEST 
  78 2318 B92C0000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 231c A52C0000 	    _ADR RAT   // idx f e R: e 
  81 2320 F1220000 	    _ADR bit_state // idx f state 
ARM GAS  forth.s 			page 89


  82 2324 032C0000 	    _QBRAN 1f   // bit reset 
  82      38230000 
  83 232c 612D0000 	    _ADR OVER 
  84 2330 CD220000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2334 B1200000 	    _ADR FSLH  // idx f R: e 
  86 2338 4D2D0000 	1:  _ADR SWAP  // f idx R: e 
  87 233c 5D2E0000 	    _ADR ONEP   // F idx++ R: e 
  88 2340 4D2D0000 	    _ADR SWAP   // idx f  
  89 2344 612D0000 	    _ADR OVER   // idx f idx 
  90 2348 C32B0000 	    _DOLIT 5 
  90      05000000 
  91 2350 09310000 	    _ADR GREAT  // idx > 5
  92 2354 032C0000 	    _QBRAN div_loop 
  92      1C230000 
  93 235c 752C0000 	    _ADR RFROM 
  94 2360 2D2D0000 	    _ADR DROP 
  95 2364 032A0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2368 504700BF 	    _NEST 
 109 236c B92C0000 	    _ADR TOR 
 110              	mult_loop:
 111 2370 A52C0000 	    _ADR RAT   // idx f e R: e 
 112 2374 F1220000 	    _ADR bit_state // idx f state 
 113 2378 032C0000 	    _QBRAN 1f   // bit reset 
 113      8C230000 
 114 2380 612D0000 	    _ADR OVER  
 115 2384 CD220000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2388 91200000 	    _ADR FSTAR  // idx f R: e 
 117 238c 4D2D0000 	1:  _ADR SWAP  // f idx R: e 
 118 2390 5D2E0000 	    _ADR ONEP   // F idx++ R: e 
 119 2394 4D2D0000 	    _ADR SWAP   // idx f  
 120 2398 612D0000 	    _ADR OVER   // idx f idx 
 121 239c C32B0000 	    _DOLIT 5 
 121      05000000 
 122 23a4 09310000 	    _ADR GREAT  // idx > 5
 123 23a8 032C0000 	    _QBRAN mult_loop 
 123      70230000 
 124 23b0 752C0000 	    _ADR RFROM 
 125 23b4 2D2D0000 	    _ADR DROP 
 126 23b8 032A0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
ARM GAS  forth.s 			page 90


 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 23bc 504700BF 	    _NEST 
 136 23c0 612D0000 	    _ADR OVER  // e f e 
 137 23c4 032C0000 	    _QBRAN 3f // exp==0,  done 
 137      00240000 
 138 23cc C32B0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 23d4 392F0000 	    _ADR NROT // idx e f
 140 23d8 4D2D0000 	    _ADR SWAP // idx f e   
 141 23dc 3D2D0000 	    _ADR DUPP  // idx f e e 
 142 23e0 712D0000 	    _ADR ZLESS
 143 23e4 032C0000 	    _QBRAN pos_exp 
 143      FC230000 
 144              	// negative exponent 
 145 23ec 31300000 	    _ADR ABSS 
 146 23f0 15230000 	    _ADR mant_div 
 147 23f4 172C0000 	    _BRAN 3f 
 147      00240000 
 148              	pos_exp: // positive exponent 
 149 23fc 69230000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2400 4D2D0000 	3:  _ADR SWAP 
 152 2404 2D2D0000 	    _ADR DROP 
 153 2408 032A0000 	    _UNNEST 
 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 240c 504700BF 	    _NEST 
 163 2410 C32B0000 	    _DOLIT 0
 163      00000000 
 164 2418 3D2D0000 	    _ADR DUPP
 165 241c 252F0000 	    _ADR ROT
 166 2420 553A0000 	    _ADR PARSE_DIGITS // d n a+ 
 167 2424 392F0000 	    _ADR NROT  // a d n 
 168 2428 39200000 	    _ADR STOF  // convert integer n to float 
 169 242c 4D2D0000 	    _ADR SWAP
 170 2430 C32B0000 	    _DOLIT 9 
 170      09000000 
 171 2438 35310000 	    _ADR MIN 
 172 243c 091F0000 	    _ADR PWR10 
 173 2440 B1200000 	    _ADR FSLH 
 174 2444 032A0000 	    _UNNEST 
 175              	
 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 2448 504700BF 	    _NEST 
 183 244c 0F3B0000 	    _ADR NEGQ 
ARM GAS  forth.s 			page 91


 184 2450 B92C0000 	    _ADR TOR 
 185 2454 C32B0000 	    _DOLIT 0 
 185      00000000 
 186 245c 3D2D0000 	    _ADR DUPP 
 187 2460 252F0000 	    _ADR ROT 
 188 2464 553A0000 	    _ADR PARSE_DIGITS // d n a  
 189 2468 392F0000 	    _ADR NROT 
 190 246c 4D2D0000 	    _ADR SWAP 
 191 2470 2D2D0000 	    _ADR DROP 
 192 2474 752C0000 	    _ADR RFROM 
 193 2478 032C0000 	    _QBRAN 1f 
 193      84240000 
 194 2480 21300000 	    _ADR NEGAT 
 195 2484 4D2D0000 	1:  _ADR SWAP 
 196 2488 032A0000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
 203              	**********************************/
 204 248c 6E220000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
 205 2498 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 249c 31320000 	    _ADR BASE 
 209 24a0 492C0000 	    _ADR AT 
 210 24a4 B92C0000 	    _ADR TOR 
 211              	    // use decimal base  
 212 24a8 D5390000 	    _ADR DECIM 
 213 24ac C32B0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 24b4 612D0000 		_ADR	OVER   // a 0 a     R: base
 215 24b8 91310000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 24bc 2D2D0000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 24c0 0F3B0000 	    _ADR NEGQ 
 219 24c4 B92C0000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
 221 24c8 3D2D0000 	    _ADR DUPP 
 222 24cc 692C0000 	    _ADR CAT 
 223 24d0 C32B0000 	    _DOLIT 10 
 223      0A000000 
 224 24d8 F9390000 	    _ADR DIGTQ // u t|f 
 225 24dc 4D2D0000 	    _ADR SWAP 
 226 24e0 2D2D0000 	    _ADR DROP  // drop u 
 227 24e4 032C0000 	    _QBRAN must_be_dot 
 227      38250000 
 228              	// get integer part     
 229 24ec C32B0000 	    _DOLIT 0 
 229      00000000 
 230 24f4 3D2D0000 	    _ADR DUPP
 231 24f8 252F0000 	    _ADR ROT // a 0 0 0 a  
 232 24fc 553A0000 	    _ADR PARSE_DIGITS // a 0 d n a 
ARM GAS  forth.s 			page 92


 233 2500 392F0000 	    _ADR NROT // ... a d n 
 234 2504 39200000 	    _ADR STOF  // convert n to float 
 235 2508 B92C0000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 250c 2D2D0000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 2510 C32B0000 	    _DOLIT 'E' 
 238      45000000 
 239 2518 F53A0000 	    _ADR CHARQ 
 240 251c 032C0000 	    _QBRAN 1f // next is decimal fraction  
 240      44250000 
 241 2524 C32B0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 252c B92C0000 	    _ADR TOR  // R: base sign fint 0.0
 243 2530 172C0000 	    _BRAN 3f // get exponent   
 243      A0250000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 2538 C32B0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2540 B92C0000 	    _ADR TOR  // R: base sign fint 
 248 2544 C32B0000 	1:  _DOLIT '.' 
 248      2E000000 
 249 254c F53A0000 	    _ADR CHARQ 
 250 2550 032C0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      10260000 
 251 2558 0D240000 	    _ADR decimals // -- a 0 a fdec 
 252 255c B92C0000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2560 C32B0000 	    _DOLIT 'E' 
 255      45000000 
 256 2568 F53A0000 	    _ADR CHARQ 
 257 256c 032C0000 	    _QBRAN 1f
 257      7C250000 
 258 2574 172C0000 	    _BRAN 3f 
 258      A0250000 
 259              	// no exponent, must be end of string 
 260 257c 692C0000 	1:   _ADR CAT 
 261 2580 032C0000 	    _QBRAN 1f 
 261      90250000 
 262 2588 172C0000 	    _BRAN error2 // error not end of string 
 262      24260000 
 263 2590 B92C0000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 2594 2D2D0000 	    _ADR DROP 
 265 2598 172C0000 	    _BRAN build_float 
 265      D8250000 
 266              	3: // get exponent 
 267 25a0 49240000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
 269 25a4 692C0000 	    _ADR CAT 
 270 25a8 032C0000 	    _QBRAN 4f
 270      B8250000 
 271 25b0 172C0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      24260000 
 272 25b8 B92C0000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 25bc 4D2F0000 	    _ADR DDROP 
 274 25c0 172C0000 	    _BRAN build_float     
ARM GAS  forth.s 			page 93


 274      D8250000 
 275              	5: // no exponent 
 276 25c8 C32B0000 	    _DOLIT 0 
 276      00000000 
 277 25d0 B92C0000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 25d4 2D2D0000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 25d8 752C0000 	    _ADR RFROM 
 281 25dc 892C0000 	    _ADR DRFROM 
 282 25e0 51200000 	    _ADR FPLUS 
 283 25e4 BD230000 	    _ADR exp_adjust
 284 25e8 752C0000 	    _ADR RFROM 
 285 25ec 032C0000 	    _QBRAN 1f 
 285      00260000 
 286 25f4 C32B0000 	    _DOLIT fminus1
 286      000080BF 
 287 25fc 91200000 	    _ADR FSTAR 
 288 2600 C32B0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 2608 172C0000 	    _BRAN restore_base  
 289      34260000 
 290              	error1: // a 0 a R: base sign fint 
 291 2610 892C0000 	    _ADR DRFROM 
 292 2614 4D2F0000 	    _ADR DDROP
 293 2618 2D2D0000 	    _ADR DROP  
 294 261c 172C0000 	    _BRAN restore_base  
 294      34260000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 2624 892C0000 	    _ADR DRFROM 
 297 2628 4D2F0000 	    _ADR DDROP  // a 0 a R: base sign
 298 262c 752C0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2630 4D2F0000 	    _ADR DDROP  
 300              	restore_base: 
 301 2634 752C0000 	    _ADR RFROM 
 302 2638 31320000 	    _ADR BASE 
 303 263c 352C0000 	    _ADR STORE 
 304 2640 032A0000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
ARM GAS  forth.s 			page 94


  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2644 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2648 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 264c 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2650 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2654 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2658 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 265c BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2660 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2664 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2668 90240000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2674 504700BF 	    _NEST
  50 2678 C32B0000 	    _DOLIT 1  
  50      01000000 
  51 2680 21310000 	    _ADR MAX  
  52 2684 C32B0000 	    _DOLIT 8
  52      08000000 
  53 268c 35310000 	    _ADR MIN 
  54 2690 C32B0000 	    _DOLIT 2 
  54      02000000 
  55 2698 F12D0000 	    _ADR LSHIFT 
  56 269c C32B0000 	    _DOLIT rounding 
  56      44260000 
  57 26a4 012E0000 	    _ADR PLUS 
  58 26a8 492C0000 	    _ADR AT   
  59 26ac 51200000 	    _ADR FPLUS 
  60 26b0 032A0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 26b4 6C260000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 26bc 57F8040B 	    ldr T0,[DSP],#4
  69 26c0 3070     	    strb T0,[TOS]  
ARM GAS  forth.s 			page 95


  70 26c2 06F10106 	    add TOS,#1
  71 26c6 99E1     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 26c8 504700BF 	    _NEST 
  81 26cc B92C0000 	    _ADR TOR  // >R ( i r: b )
  82 26d0 39340000 	    _ADR STOD // ( dbl r: b )
  83 26d4 3D2D0000 	    _ADR DUPP // ( dbl i r: b )
  84 26d8 B92C0000 	    _ADR TOR  // ( dbl r: b sign )
  85 26dc A92F0000 	    _ADR DABS 
  86 26e0 75380000 	    _ADR BDIGS 
  87 26e4 E1380000 	    _ADR DIGS 
  88 26e8 752C0000 	    _ADR RFROM 
  89 26ec 15390000 	    _ADR SIGN 
  90 26f0 3D390000 	    _ADR EDIGS // ( -- p u )
  91 26f4 3D2D0000 	    _ADR DUPP  
  92 26f8 392F0000 	    _ADR NROT // -rot ( -- u p u )
  93 26fc A52C0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2700 4D2D0000 	    _ADR SWAP // ( -- u p b u )
  95 2704 1D370000 	    _ADR CMOVE // ( -- u ) 
  96 2708 3D2D0000 	    _ADR DUPP  // ( -- u u )
  97 270c 752C0000 	    _ADR RFROM // ( -- u u b )
  98 2710 012E0000 	    _ADR PLUS  // ( -- u b+ )
  99 2714 4D2D0000 	    _ADR SWAP  // ( -- b+ u )
 100 2718 032A0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	\ SCALEUP ( f1 -- m f2 ) 
 105              	\ multiply fraction until 
 106              	\ f1 >= 0.1
 107              	\ input: 
 108              	\   f1  float
 109              	\ output:
 110              	\   m  log10 exponent 
 111              	\   f2  >= 0.1 
 112              	*************************/
 113              	//    _HEADER SCALEUP,7,"SCALEUP" 
 114              	SCALEUP:
 115 271c 504700BF 	    _NEST 
 116 2720 C32B0000 	    _DOLIT 0   // m 
 116      00000000 
 117 2728 4D2D0000 	    _ADR SWAP  // m f1 
 118 272c 3D2D0000 	1:  _ADR DUPP 
 119 2730 C32B0000 	    _DOLIT onetenth 
 119      CDCCCC3D 
 120 2738 65210000 	    _ADR FLESS
 121 273c 032C0000 	    _QBRAN 2f
 121      64270000 
 122 2744 C32B0000 	    _DOLIT ten 
 122      00002041 
ARM GAS  forth.s 			page 96


 123 274c 91200000 	    _ADR FSTAR
 124              	    // decrement m   
 125 2750 4D2D0000 	    _ADR SWAP
 126 2754 6D2E0000 	    _ADR ONEM 
 127 2758 4D2D0000 	    _ADR SWAP 
 128 275c 172C0000 	    _BRAN 1b
 128      2C270000 
 129 2764 032A0000 	2:  _UNNEST 
 130              	
 131              	/******************************
 132              	\ SCALEDOWN ( d f1 -- m d f2 )
 133              	\ divide by 10.0 until 
 134              	\ f < 10^d 
 135              	******************************/
 136              	//    _HEADER SCALEDOWN,9,"SCALEDOWN"
 137              	SCALEDOWN: // ( d f1 -- m d f2 )
 138 2768 504700BF 	    _NEST 
 139 276c 612D0000 	    _ADR OVER 
 140 2770 091F0000 	    _ADR PWR10
 141 2774 C32B0000 	    _DOLIT 0x31ABCC77 // 0.5e-8
 141      77CCAB31 
 142 277c 71200000 	    _ADR FSUBB 
 143 2780 B92C0000 	    _ADR TOR
 144 2784 C32B0000 	    _DOLIT 0 
 144      00000000 
 145 278c 4D2D0000 	    _ADR SWAP // d 0 f1 r: pwr10  
 146 2790 3D2D0000 	1:  _ADR DUPP
 147 2794 A52C0000 	    _ADR RAT 
 148 2798 49210000 	    _ADR FGREAT 
 149 279c 032C0000 	    _QBRAN 2f
 149      C4270000 
 150 27a4 C32B0000 	    _DOLIT ten 
 150      00002041 
 151 27ac B1200000 	    _ADR FSLH 
 152              	    // increment m 
 153 27b0 4D2D0000 	    _ADR SWAP 
 154 27b4 5D2E0000 	    _ADR ONEP 
 155 27b8 4D2D0000 	    _ADR SWAP 
 156 27bc 172C0000 	    _BRAN 1b   
 156      90270000 
 157 27c4 752C0000 	2:  _ADR RFROM 
 158 27c8 2D2D0000 	    _ADR DROP
 159 27cc 4D2D0000 	    _ADR SWAP // ( -- d f m ) 
 160 27d0 392F0000 	    _ADR NROT // ( -- m d f )
 161 27d4 032A0000 	    _UNNEST 
 162              	
 163              	
 164              	/***************************
 165              	convert exponant of float 
 166              	    EPART ( m b -- b+ )
 167              	input: 
 168              	    m   decimal exponent 
 169              	    b   string buffer 
 170              	output:
 171              	    b+   adjusted pointer 
 172              	****************************/
 173              	//    _HEADER EPART,5,"EPART"
ARM GAS  forth.s 			page 97


 174              	EPART:
 175 27d8 504700BF 	    _NEST
 176 27dc 4D2D0000 	    _ADR SWAP
 177 27e0 112F0000 	    _ADR QDUP    
 178 27e4 032C0000 	    _QBRAN 2f 
 178      08280000 
 179 27ec 4D2D0000 	    _ADR SWAP 
 180 27f0 C32B0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 180      45000000 
 181 27f8 4D2D0000 	    _ADR SWAP  
 182 27fc BD260000 	    _ADR CSTOP // c!+ ( -- m b ) 
 183 2800 C9260000 	    _ADR ITOA // ( i b -- b u )
 184 2804 2D2D0000 	    _ADR DROP // ( -- b+ )     
 185 2808 032A0000 	2:  _UNNEST 
 186              	
 187              	
 188              	/***************************
 189              	conver fraction part of float 
 190              	    FPART ( d f b -- b+ )
 191              	input:
 192              	    d   digit left to display 
 193              	    f   float to convert
 194              	    b   string* buffer  
 195              	output:
 196              	    b+  updated string* 
 197              	****************************/
 198              	//    _HEADER FPART,5,"FPART"
 199              	FPART:
 200 280c 504700BF 	    _NEST
 201 2810 C32B0000 	    _DOLIT '.' 
 201      2E000000 
 202 2818 4D2D0000 	    _ADR SWAP 
 203 281c BD260000 	    _ADR CSTOP 
 204 2820 B92C0000 	    _ADR TOR // >r ( d f r: b ) 
 205              	    // round to next digit 
 206 2824 612D0000 	    _ADR OVER 
 207 2828 75260000 	    _ADR ROUND 
 208 282c 4D2D0000 	1:  _ADR SWAP  
 209 2830 112F0000 	    _ADR QDUP 
 210 2834 032C0000 	    _QBRAN 2f
 210      84280000 
 211 283c 6D2E0000 	    _ADR ONEM // 1- ( -- f d- r: b )
 212 2840 4D2D0000 	    _ADR SWAP // swap ( -- d f r: b )
 213 2844 C32B0000 	    _DOLIT ten // ( d f 10.0 ) 
 213      00002041 
 214 284c 91200000 	    _ADR FSTAR // f*
 215 2850 3D2D0000 	    _ADR DUPP  
 216 2854 21200000 	    _ADR TRUNC // d f i
 217 2858 3D2D0000 	    _ADR DUPP  // d f i i  
 218 285c C32B0000 	    _DOLIT '0' 
 218      30000000 
 219 2864 012E0000 	    _ADR PLUS 
 220 2868 752C0000 	    _ADR RFROM // R> ( d f c b )
 221 286c BD260000 	    _ADR CSTOP // ( d f i b+ )
 222 2870 B92C0000 	    _ADR TOR  // >r ( -- d f i r: b )
 223 2874 39200000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 224 2878 71200000 	    _ADR FSUBB 
ARM GAS  forth.s 			page 98


 225 287c 172C0000 	    _BRAN 1b 
 225      2C280000 
 226 2884 2D2D0000 	2:  _ADR DROP 
 227 2888 752C0000 	    _ADR RFROM 
 228 288c 032A0000 	    _UNNEST 
 229              	
 230              	/***************************
 231              	 convert integer part of float 
 232              	    IPART ( d f b -- m d f b )
 233              	input:
 234              	    d   digit# to display 
 235              	    f   float to convert 
 236              	    b   string* buffer 
 237              	output:
 238              	    m   decimal exponent 
 239              	    d   digit# to display left 
 240              	    f   float fraction 
 241              	    b   update str* 
 242              	****************************/
 243              	//    _HEADER IPART,5,"IPART"
 244              	IPART: 
 245 2890 504700BF 	    _NEST 
 246 2894 B92C0000 	    _ADR TOR // ( -- d f r: b )
 247 2898 3D2D0000 	    _ADR DUPP 
 248 289c C32B0000 	    _DOLIT fone 
 248      0000803F 
 249 28a4 65210000 	    _ADR FLESS 
 250 28a8 032C0000 	    _QBRAN 1f 
 250      E4280000 
 251 28b0 C32B0000 	    _DOLIT '0' 
 251      30000000 
 252 28b8 752C0000 	    _ADR RFROM 
 253 28bc BD260000 	    _ADR CSTOP 
 254 28c0 B92C0000 	    _ADR TOR 
 255 28c4 1D270000 	    _ADR SCALEUP 
 256 28c8 4D2D0000 	    _ADR SWAP 
 257 28cc 392F0000 	    _ADR NROT 
 258              	    // decrement d 
 259 28d0 4D2D0000 	    _ADR SWAP 
 260 28d4 6D2E0000 	    _ADR ONEM 
 261 28d8 4D2D0000 	    _ADR SWAP 
 262 28dc 752C0000 	    _ADR RFROM // r> ( -- m d f b )  
 263 28e0 032A0000 	    _UNNEST 
 264 28e4 69270000 	1:  _ADR SCALEDOWN // ( -- m d f r: b)
 265 28e8 3D2D0000 	    _ADR DUPP  // ( -- m d f f r: b )
 266 28ec 21200000 	    _ADR TRUNC // ( -- m d f i r: b )
 267 28f0 3D2D0000 	    _ADR DUPP  // ( -- m d f i i r: b )
 268 28f4 B92C0000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 269 28f8 39200000 	    _ADR STOF  // ( -- m d f f )
 270 28fc 71200000 	    _ADR FSUBB // ( -- m d f r: b i )
 271 2900 752C0000 	    _ADR RFROM // ( -- m d f i r: b )
 272 2904 752C0000 	    _ADR RFROM  // ( -- m d f i b )  
 273 2908 C9260000 	    _ADR ITOA // -- m d f b u )
 274 290c B92C0000 	    _ADR TOR  // >r ( -- m d f b r: u )
 275 2910 252F0000 	    _ADR ROT
 276 2914 752C0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 277 2918 112E0000 	    _ADR SUBB // ( -- m f b d- )
ARM GAS  forth.s 			page 99


 278 291c 392F0000 	    _ADR NROT // ( -- m d f b )
 279 2920 032A0000 	    _UNNEST
 280              	
 281              	
 282              	/***************************************
 283              	\  f>a ( d f b -- b u )
 284              	\ convert float to string
 285              	\ input: 
 286              	\   b  output buffer  
 287              	\   d n# of digits [1..7] to convert 
 288              	\   f float to convert 
 289              	\  output: 
 290              	\   b output buffer 
 291              	\    u length of string 
 292              	****************************************/
 293 2924 B8260000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 293      03463E41 
 294 292c 504700BF 	    _NEST 
 295 2930 3D2D0000 	    _ADR DUPP // dup ( -- d f b b )
 296 2934 B92C0000 	    _ADR TOR // >r   ( d f b r: b )  
 297              	    // store space first buffer char. 
 298 2938 BD2E0000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 299 293c 4D2D0000 	    _ADR SWAP 
 300 2940 BD260000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 301              	    // check float sign 
 302 2944 612D0000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 303 2948 E1210000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 304 294c 032C0000 	    _QBRAN 1f  // 0branch 1f 
 304      64290000 
 305              	    // negative number add '-' to buffer 
 306 2954 C32B0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 306      2D000000 
 307 295c 4D2D0000 	    _ADR SWAP 
 308 2960 BD260000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 309 2964 91280000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 310 2968 0D280000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 311 296c D9270000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 312 2970 A52C0000 	    _ADR RAT 
 313 2974 112E0000 	    _ADR SUBB 
 314 2978 752C0000 	    _ADR RFROM 
 315 297c 4D2D0000 	    _ADR SWAP 
 316 2980 032A0000 	    _UNNEST 
 317              	
 318              	
 319              	/***********************************
 320              	    F. (  f d -- )
 321              	    print float32 number  
 322              	    f -> float to print 
 323              	    d -> string digits# 
 324              	***********************************/
 325 2984 28290000 	    _HEADER FDOT,2,"F."
 325      02462E00 
 326 298c 504700BF 	    _NEST 
 327              	    // limit digits range [1..7]
 328 2990 C32B0000 	    _DOLIT 1 
 328      01000000 
 329 2998 21310000 	    _ADR MAX 
ARM GAS  forth.s 			page 100


 330 299c C32B0000 	    _DOLIT 7 
 330      07000000 
 331 29a4 35310000 	    _ADR MIN
 332 29a8 4D2D0000 	    _ADR SWAP // ( -- d f )
 333              	    // allocate convertion buffer 
 334 29ac AD360000 	    _ADR HERE
 335 29b0 B92C0000 	    _ADR TOR  
 336 29b4 C32B0000 	    _DOLIT 16 
 336      10000000 
 337 29bc B9480000 	    _ADR ALLOT 
 338              	    // fill it with zero's 
 339 29c0 A52C0000 	    _ADR RAT 
 340 29c4 C32B0000 	    _DOLIT 16 
 340      10000000 
 341 29cc C32B0000 	    _DOLIT 0 
 341      00000000 
 342 29d4 95370000 	    _ADR FILL 
 343 29d8 752C0000 	    _ADR RFROM // ( d f b )
 344 29dc 2D290000 	    _ADR FTOA 
 345 29e0 ED3C0000 	    _ADR TYPEE 
 346              	    // free buffer 
 347 29e4 C32B0000 	    _DOLIT -16 
 347      F0FFFFFF 
 348 29ec B9480000 	    _ADR ALLOT
 349 29f0 032A0000 	    _UNNEST 
 350              	
 351              	
 352              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
ARM GAS  forth.s 			page 101


  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 29f4 48F804CD 		STMFD	RSP!,{IP}
  85 29f8 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
ARM GAS  forth.s 			page 102


  87              	INEXT: 
  88 29fc 5CF8045B 		LDR WP,[IP],#4 
  89 2a00 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2a02 58F804CB 		LDMFD RSP!,{IP}
  92 2a06 5CF8045B 		LDR WP,[IP],#4 
  93 2a0a 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2a0c 04F14401 		add T1,UP,#USER_CTOP 
 105 2a10 0968     		ldr T1,[T1]
 106 2a12 44F25072 		mov T2,#0x4700+(10<<3)
 107 2a16 21F8022B 		strh T2,[T1],#2
 108 2a1a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2a1e 21F8022B 		strh T2,[T1],#2 
 110 2a22 04F14402 		add T2,UP,#USER_CTOP 
 111 2a26 1160     		str T1,[T2]
 112 2a28 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2a2a 47F8046D 		_PUSH 
 118 2a2e 04F11406 		ADD TOS,UP,#STDIN 
 119 2a32 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2a34 47F8046D 		_PUSH 
 125 2a38 04F11806 		ADD TOS,UP,#STDOUT
 126 2a3c DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2a3e 88290000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2a4c 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2a54 47F8046D 	    _PUSH 
 135 2a58 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2a5a 81EA0101 	    eor T1,T1 
 137 2a5e 8162     	    str T1,[T0,#SCB_CFSR]
 138 2a60 CCE7     	    _NEXT 
 139              	
ARM GAS  forth.s 			page 103


 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2a62 422A0000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2a70 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2a78 47F8046D 		_PUSH 
 147 2a7c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2a7e 81EA0101 	    eor T1,T1 
 149 2a82 8163     	    str T1,[T0,#SCB_BFAR]
 150 2a84 BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 2a86 662A0000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 2a90 504700BF 		_NEST 
 158 2a94 2B2A0000 		_ADR TSTDIN // ' STDIN 
 159 2a98 FD360000 		_ADR ATEXE
 160 2a9c 032A0000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2aa0 8A2A0000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2aa8 504700BF 		_NEST
 168              	KEY1:
 169 2aac 2D1A0000 		_ADR CAPS_LED 
 170 2ab0 912A0000 		_ADR	QKEY 
 171 2ab4 032C0000 		_QBRAN	KEY1
 171      AC2A0000 
 172 2abc 032A0000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2ac0 A42A0000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 2acc 504700BF 		_NEST 
 180 2ad0 352A0000 		_ADR TSTDOUT 
 181 2ad4 FD360000 		_ADR ATEXE 
 182 2ad8 032A0000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
ARM GAS  forth.s 			page 104


 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 2adc C42A0000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2ae8 504700BF 		_NEST
 216 2aec 31300000 		_ADR ABSS   
 217 2af0 D9310000 		_ADR SEED 
 218 2af4 492C0000 		_ADR AT 
 219 2af8 3D2D0000 		_ADR DUPP 
 220 2afc C32B0000 		_DOLIT 13
 220      0D000000 
 221 2b04 F12D0000 		_ADR LSHIFT 
 222 2b08 A92D0000 		_ADR XORR  
 223 2b0c 3D2D0000 		_ADR DUPP 
 224 2b10 C32B0000 		_DOLIT 17 
 224      11000000 
 225 2b18 D92D0000 		_ADR RSHIFT 
 226 2b1c A92D0000 		_ADR XORR 
 227 2b20 3D2D0000 		_ADR DUPP
 228 2b24 C32B0000 		_DOLIT 5 
 228      05000000 
 229 2b2c F12D0000 		_ADR LSHIFT 
 230 2b30 A92D0000 		_ADR XORR  
 231 2b34 3D2D0000 		_ADR DUPP 
 232 2b38 D9310000 		_ADR SEED 
 233 2b3c 352C0000 		_ADR STORE 
 234 2b40 C32B0000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2b48 812D0000 		_ADR ANDD 
 236 2b4c 4D2D0000 		_ADR SWAP 
 237 2b50 81350000 		_ADR MODD 
ARM GAS  forth.s 			page 105


 238 2b54 032A0000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2b58 E02A0000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2b64 504700BF 		_NEST 
 247 2b68 01320000 		_ADR TIMER 
 248 2b6c 352C0000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2b70 01320000 		_ADR TIMER 
 251 2b74 492C0000 		_ADR AT 
 252 2b78 032C0000 		_QBRAN PAUSE_EXIT 
 252      882B0000 
 253 2b80 172C0000 		_BRAN PAUSE_LOOP 
 253      702B0000 
 254              	PAUSE_EXIT: 		
 255 2b88 032A0000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2b8c 5C2B0000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2b98 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2b9c 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2ba4 3600     		movs TOS,TOS 
 265 2ba6 57F8046B 		_POP
 266 2baa 03D0     		beq ULED_OFF
 267 2bac 4FEA0040 		lsl T0,#16 
 268 2bb0 8861     		str T0,[T1,#GPIO_BSRR]
 269 2bb2 23E7     		_NEXT 
 270              	ULED_OFF:
 271 2bb4 8861     		str T0,[T1,#GPIO_BSRR]
 272 2bb6 21E7     		_NEXT    
 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 2bb8 902B0000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 2bc0 1CE7     		_NEXT 
 286              	 
ARM GAS  forth.s 			page 106


 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 2bc2 47F8046D 		_PUSH				//  store TOS on data stack
 294 2bc6 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 2bca 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 2bcc BC2B0000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 2bd8 46F00105 		ORR	WP,TOS,#1 
 303 2bdc 57F8046B 		_POP
 304 2be0 2847     		BX WP 
 305 2be2 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 2be4 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 2be8 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 2bea 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 2bee 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 2bf2 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 2bf4 A2F10102 		SUB	T2,T2,#1
 324 2bf8 C8F80020 		STR	T2,[RSP]
 325 2bfc DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 2c00 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 2c02 3600     		MOVS	TOS,TOS
 335 2c04 57F8046B 		_POP
 336 2c08 02D1     		BNE	QBRAN1
 337 2c0a DCF800C0 		LDR	IP,[IP]
 338 2c0e F5E6     		_NEXT
 339              	QBRAN1:
 340 2c10 0CF1040C 	 	ADD	IP,IP,#4
 341 2c14 F2E6     		_NEXT
ARM GAS  forth.s 			page 107


 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 2c16 DCF800C0 		LDR	IP,[IP]
 350 2c1a EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 2c1c D02B0000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 2c28 032A0000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 2c2c 202C0000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 2c34 57F8045B 		LDR	WP,[DSP],#4
 365 2c38 3560     		STR	WP,[TOS]
 366 2c3a 57F8046B 		_POP
 367 2c3e DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2c40 302C0000 		_HEADER AT,1,"@"
 373      014000BF 
 374 2c48 3668     		LDR	TOS,[TOS]
 375 2c4a D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 2c4c 442C0000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 2c54 57F8045B 		LDR	WP,[DSP],#4
 383 2c58 3570     		STRB WP,[TOS]
 384 2c5a 57F8046B 		_POP
 385 2c5e CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2c60 502C0000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 2c68 3678     		LDRB	TOS,[TOS]
ARM GAS  forth.s 			page 108


 393 2c6a C7E6     		_NEXT 
 394              	
 395              	
 396              	/*********************************************
 397              	    R>	  ( -- w  R: w -- ) 
 398              	 	push from rstack.
 399              	**********************************************/
 400 2c6c 642C0000 		_HEADER RFROM,2,"R>"
 400      02523E00 
 401 2c74 47F8046D 		_PUSH
 402 2c78 58F8046B 		LDR	TOS,[RSP],#4
 403 2c7c BEE6     		_NEXT 
 404              	
 405              	/***********************************************
 406              		2R> (  -- D ) R: D --  
 407              	    push a double from rstack 
 408              	***********************************************/
 409 2c7e 702C0000 		_HEADER DRFROM,3,"2R>"
 409      0332523E 
 409      00BF
 410 2c88 47F8046D 		_PUSH 
 411 2c8c 58F8046B 		LDR TOS,[RSP],#4 
 412 2c90 47F8046D 		_PUSH 
 413 2c94 58F8046B 		LDR TOS,[RSP],#4
 414 2c98 B0E6     		_NEXT 
 415              	
 416              	/************************************************
 417              	    R@	  ( -- w )
 418              	 	Copy top of return stack to the data stack.
 419              	************************************************/
 420 2c9a 822C0000 		_HEADER RAT,2,"R@"
 420      02524000 
 420      00BF
 421 2ca4 47F8046D 		_PUSH
 422 2ca8 D8F80060 		LDR	TOS,[RSP]
 423 2cac A6E6     		_NEXT 
 424              	
 425              	/***********************************************
 426              	    >R	  ( w -- ) R: -- w 
 427              	 	pop to rstack.
 428              	************************************************/
 429 2cae 9E2C0000 		_HEADER TOR,2,">R"
 429      023E5200 
 429      00BF
 430 2cb8 48F8046D 		STR	TOS,[RSP,#-4]!
 431 2cbc 57F8046B 		_POP
 432 2cc0 9CE6     		_NEXT
 433              	
 434              	/*********************************************
 435              		2>R ( d -- ) R: -- d 
 436              		pop a double to rstack 
 437              	*********************************************/
 438 2cc2 B22C0000 		_HEADER DTOR,3,"2>R"
 438      03323E52 
 438      00BF
 439 2ccc 48F8046D 		STR TOS,[RSP,#-4]!
 440 2cd0 57F8046B 	    _POP 
ARM GAS  forth.s 			page 109


 441 2cd4 48F8046D 		STR TOS,[RSP,#-4]!
 442 2cd8 57F8046B 		_POP  
 443 2cdc 8EE6     		_NEXT 	
 444              	
 445              	
 446              	/*******************************
 447              	//	RP! ( u -- )
 448              	// initialize RPP with u 
 449              	*******************************/
 450 2cde C62C0000 		_HEADER RPSTOR,3,"RP!"
 450      03525021 
 450      00BF
 451 2ce8 B046     		MOV RSP,TOS 
 452 2cea 57F8046B 		_POP  
 453 2cee 85E6     		_NEXT 
 454              	
 455              	/********************************
 456              		SP! ( u -- )
 457              	 initialize SPP with u 
 458              	********************************/
 459 2cf0 E22C0000 		_HEADER SPSTOR,3,"SP!"
 459      03535021 
 460 2cf8 3746     		MOV DSP,TOS 
 461 2cfa 86EA0606 		EOR TOS,TOS,TOS 
 462 2cfe 7DE6     		_NEXT 
 463              	
 464              	/**************************************
 465              	    SP@	 ( -- a )
 466              	 	Push the current data stack pointer.
 467              	***************************************/
 468 2d00 F42C0000 		_HEADER SPAT,3,"SP@"
 468      03535040 
 469 2d08 47F8046D 		_PUSH
 470 2d0c 3E46     		MOV	TOS,DSP
 471 2d0e 75E6     		_NEXT
 472              	
 473              	/**************************************
 474              	   RP@ ( -- a )
 475              	   push current rstack pointer 
 476              	**************************************/
 477 2d10 042D0000 		_HEADER RPAT,3,"RP@"
 477      03525040 
 478 2d18 47F8046D 		_PUSH 
 479 2d1c 4646     		MOV TOS,RSP 
 480 2d1e 6DE6     		_NEXT 
 481              	
 482              	/********************************
 483              	    DROP	( w -- )
 484              	 	Discard top stack item.
 485              	********************************/
 486 2d20 142D0000 		_HEADER DROP,4,"DROP"
 486      0444524F 
 486      500000BF 
 487 2d2c 57F8046B 		_POP
 488 2d30 64E6     		_NEXT 
 489              	
 490              	/*********************************
ARM GAS  forth.s 			page 110


 491              	    DUP	 ( w -- w w )
 492              	 	Duplicate the top stack item.
 493              	*********************************/
 494 2d32 242D0000 		_HEADER DUPP,3,"DUP"
 494      03445550 
 494      00BF
 495 2d3c 47F8046D 		_PUSH
 496 2d40 5CE6     		_NEXT 
 497              	
 498              	/**********************************
 499              	    SWAP	( w1 w2 -- w2 w1 )
 500              	 	Exchange top two stack items.
 501              	**********************************/
 502 2d42 362D0000 		_HEADER SWAP,4,"SWAP"
 502      04535741 
 502      5000
 503 2d4c 3D68     		LDR	WP,[DSP]
 504 2d4e 3E60     		STR	TOS,[DSP]
 505 2d50 2E46     		MOV	TOS,WP
 506 2d52 53E6     		_NEXT 
 507              	
 508              	/***********************************
 509              	    OVER	( w1 w2 -- w1 w2 w1 )
 510              	 	Copy second stack item to top.
 511              	***********************************/
 512 2d54 462D0000 		_HEADER OVER,4,"OVER"
 512      044F5645 
 512      520000BF 
 513 2d60 47F8046D 		_PUSH
 514 2d64 7E68     		LDR	TOS,[DSP,#4]
 515 2d66 49E6     		_NEXT 
 516              	
 517              	/***********************************
 518              	    0<	  ( n -- t )
 519              	 	Return true if n is negative.
 520              	***********************************/
 521 2d68 582D0000 		_HEADER ZLESS,2,"0<"
 521      02303C00 
 522 2d70 4FEAE676 		ASR TOS,#31
 523 2d74 42E6     		_NEXT 
 524              	
 525              	/********************************
 526              	    AND	 ( w w -- w )
 527              	 	Bitwise AND.
 528              	********************************/
 529 2d76 6C2D0000 		_HEADER ANDD,3,"AND"
 529      03414E44 
 529      00BF
 530 2d80 57F8045B 		LDR	WP,[DSP],#4
 531 2d84 06EA0506 		AND	TOS,TOS,WP
 532 2d88 38E6     		_NEXT 
 533              	
 534              	/******************************
 535              	    OR	  ( w w -- w )
 536              	 	Bitwise inclusive OR.
 537              	******************************/
 538 2d8a 7A2D0000 		_HEADER ORR,2,"OR"
ARM GAS  forth.s 			page 111


 538      024F5200 
 538      00BF
 539 2d94 57F8045B 		LDR	WP,[DSP],#4
 540 2d98 46EA0506 		ORR	TOS,TOS,WP
 541 2d9c 2EE6     		_NEXT 
 542              	
 543              	/*****************************
 544              	    XOR	 ( w w -- w )
 545              	 	Bitwise exclusive OR.
 546              	*****************************/
 547 2d9e 8E2D0000 		_HEADER XORR,3,"XOR"
 547      03584F52 
 547      00BF
 548 2da8 57F8045B 		LDR	WP,[DSP],#4
 549 2dac 86EA0506 		EOR	TOS,TOS,WP
 550 2db0 24E6     		_NEXT 
 551              	
 552              	/**************************************************
 553              	    UM+	 ( w w -- w cy )
 554              	 	Add two numbers, return the sum and carry flag.
 555              	***************************************************/
 556 2db2 A22D0000 		_HEADER UPLUS,3,"UM+"
 556      03554D2B 
 556      00BF
 557 2dbc 3D68     		LDR	WP,[DSP]
 558 2dbe AD19     		ADDS	WP,WP,TOS
 559 2dc0 4FF00006 		MOV	TOS,#0
 560 2dc4 46F10006 		ADC	TOS,TOS,#0
 561 2dc8 3D60     		STR	WP,[DSP]
 562 2dca 17E6     		_NEXT 
 563              	
 564              	/*********************************
 565              	    RSHIFT	 ( w # -- w )
 566              	 	arithmetic Right shift # bits.
 567              	**********************************/
 568 2dcc B62D0000 		_HEADER RSHIFT,6,"RSHIFT"
 568      06525348 
 568      49465400 
 569 2dd8 57F8045B 		LDR	WP,[DSP],#4
 570 2ddc 45FA06F6 		MOV	TOS,WP,ASR TOS
 571 2de0 0CE6     		_NEXT 
 572              	
 573              	/****************************
 574              	    LSHIFT	 ( w # -- w )
 575              	 	Right shift # bits.
 576              	****************************/
 577 2de2 D02D0000 		_HEADER LSHIFT,6,"LSHIFT"
 577      064C5348 
 577      49465400 
 577      00BF
 578 2df0 57F8045B 		LDR	WP,[DSP],#4
 579 2df4 05FA06F6 		MOV	TOS,WP,LSL TOS
 580 2df8 00E6     		_NEXT
 581              	
 582              	/*************************
 583              	    +	 ( w w -- w )
 584              	 	Add.
ARM GAS  forth.s 			page 112


 585              	*************************/
 586 2dfa E62D0000 		_HEADER PLUS,1,"+"
 586      012B
 587 2e00 57F8045B 		LDR	WP,[DSP],#4
 588 2e04 2E44     		ADD	TOS,TOS,WP
 589 2e06 F9E5     		_NEXT 
 590              	
 591              	/************************
 592              	    -	 ( w w -- w )
 593              	 	Subtract.
 594              	************************/
 595 2e08 FE2D0000 		_HEADER SUBB,1,"-"
 595      012D00BF 
 596 2e10 57F8045B 		LDR	WP,[DSP],#4
 597 2e14 C6EB0506 		RSB	TOS,TOS,WP
 598 2e18 F0E5     		_NEXT 
 599              	
 600              	/************************
 601              	    *	 ( w w -- w )
 602              	 	Multiply.
 603              	***********************/
 604 2e1a 0C2E0000 		_HEADER STAR,1,"*"
 604      012A
 605 2e20 57F8045B 		LDR	WP,[DSP],#4
 606 2e24 05FB06F6 		MUL	TOS,WP,TOS
 607 2e28 E8E5     		_NEXT 
 608              	
 609              	/***************************
 610              	    UM*	 ( w w -- ud )
 611              	 	Unsigned multiply.
 612              	****************************/
 613 2e2a 1E2E0000 		_HEADER UMSTA,3,"UM*"
 613      03554D2A 
 613      00BF
 614 2e34 3D68     		LDR	WP,[DSP]
 615 2e36 A6FB0523 		UMULL	T2,T3,TOS,WP
 616 2e3a 3A60     		STR	T2,[DSP]
 617 2e3c 1E46     		MOV	TOS,T3
 618 2e3e DDE5     		_NEXT 
 619              	
 620              	/***************************
 621              	    M*	 ( w w -- d )
 622              	 	signed multiply.
 623              		hold double result
 624              	***************************/
 625 2e40 2E2E0000 		_HEADER MSTAR,2,"M*"
 625      024D2A00 
 626 2e48 3D68     		LDR	WP,[DSP]
 627 2e4a 86FB0523 		SMULL	T2,T3,TOS,WP
 628 2e4e 3A60     		STR	T2,[DSP]
 629 2e50 1E46     		MOV	TOS,T3
 630 2e52 D3E5     		_NEXT 
 631              	
 632              	/***************************
 633              	    1+	 ( w -- w+1 )
 634              	 	Add 1.
 635              	***************************/
ARM GAS  forth.s 			page 113


 636 2e54 442E0000 		_HEADER ONEP,2,"1+"
 636      02312B00 
 637 2e5c 06F10106 		ADD	TOS,TOS,#1
 638 2e60 CCE5     		_NEXT 
 639              	
 640              	/***************************
 641              	    1-	 ( w -- w-1 )
 642              	 	Subtract 1.
 643              	***************************/
 644 2e62 582E0000 		_HEADER ONEM,2,"1-"
 644      02312D00 
 644      00BF
 645 2e6c A6F10106 		SUB	TOS,TOS,#1
 646 2e70 C4E5     		_NEXT 
 647              	
 648              	/***************************
 649              	    2+	 ( w -- w+2 )
 650              	 	Add 2.
 651              	**************************/
 652 2e72 662E0000 		_HEADER TWOP,2,"2+"
 652      02322B00 
 652      00BF
 653 2e7c 06F10206 		ADD	TOS,TOS,#2
 654 2e80 BCE5     		_NEXT
 655              	
 656              	/**************************
 657              	    2-	 ( w -- w-2 )
 658              	 	Subtract 2.
 659              	**************************/
 660 2e82 762E0000 		_HEADER TWOM,2,"2-"
 660      02322D00 
 660      00BF
 661 2e8c A6F10206 		SUB	TOS,TOS,#2
 662 2e90 B4E5     		_NEXT
 663              	
 664              	/***************************
 665              	    CELL+	( w -- w+4 )
 666              	 	Add CELLL.
 667              	***************************/
 668 2e92 862E0000 		_HEADER CELLP,5,"CELL+"
 668      0543454C 
 668      4C2B
 669 2e9c 06F10406 		ADD	TOS,TOS,#CELLL
 670 2ea0 ACE5     		_NEXT
 671              	
 672              	/***************************
 673              	    CELL-	( w -- w-4 )
 674              	 	Subtract CELLL.
 675              	**************************/
 676 2ea2 962E0000 		_HEADER CELLM,5,"CELL-"
 676      0543454C 
 676      4C2D
 677 2eac A6F10406 		SUB	TOS,TOS,#CELLL
 678 2eb0 A4E5     		_NEXT
 679              	
 680              	/**************************** 
 681              	    BL	( -- 32 )
ARM GAS  forth.s 			page 114


 682              	 	Blank (ASCII space).
 683              	*****************************/
 684 2eb2 A62E0000 		_HEADER BLANK,2,"BL"
 684      02424C00 
 684      00BF
 685 2ebc 47F8046D 		_PUSH
 686 2ec0 4FF02006 		MOV	TOS,#32
 687 2ec4 9AE5     		_NEXT 
 688              	
 689              	/**************************
 690              	    CELLS	( w -- w*4 )
 691              	 	Multiply CELLL 
 692              	***************************/
 693 2ec6 B62E0000 		_HEADER CELLS,5,"CELLS"
 693      0543454C 
 693      4C53
 694 2ed0 4FEA8606 		LSL TOS,#2
 695 2ed4 92E5     		_NEXT
 696              	
 697              	/***************************
 698              	    CELL/	( w -- w/4 )
 699              	 	Divide by CELLL.
 700              	***************************/
 701 2ed6 CA2E0000 		_HEADER CELLSL,5,"CELL/"
 701      0543454C 
 701      4C2F
 702 2ee0 4FEAA606 		ASR TOS,#2
 703 2ee4 8AE5     		_NEXT
 704              	
 705              	/*************************
 706              	    2*	( w -- w*2 )
 707              	 	Multiply 2.
 708              	*************************/
 709 2ee6 DA2E0000 		_HEADER TWOST,2,"2*"
 709      02322A00 
 709      00BF
 710 2ef0 4FEA4606 		MOV	TOS,TOS,LSL#1
 711 2ef4 82E5     		_NEXT
 712              	
 713              	/*************************
 714              	    2/	( w -- w/2 )
 715              	 	Divide by 2.
 716              	***********************/
 717 2ef6 EA2E0000 		_HEADER TWOSL,2,"2/"
 717      02322F00 
 717      00BF
 718 2f00 4FEA6606 		MOV	TOS,TOS,ASR#1
 719 2f04 7AE5     		_NEXT
 720              	
 721              	/****************************
 722              	    ?DUP	( w -- w w | 0 )
 723              	 	Conditional duplicate.
 724              	*****************************/
 725 2f06 FA2E0000 		_HEADER QDUP,4,"?DUP"
 725      043F4455 
 725      5000
 726 2f10 3500     		MOVS	WP,TOS
ARM GAS  forth.s 			page 115


 727 2f12 18BF     		IT NE 
 728 2f14 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 729 2f18 70E5     		_NEXT
 730              	
 731              	/***********************************
 732              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 733              	 	Rotate top 3 items.
 734              	*************************************/
 735 2f1a 0A2F0000 		_HEADER ROT,3,"ROT"
 735      03524F54 
 735      00BF
 736 2f24 3868     		LDR	T0,[DSP]  // w2 
 737 2f26 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 738 2f28 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 739 2f2a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 740 2f2c 66E5     		_NEXT
 741              	
 742              	/*********************************
 743              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 744              	 left rotate top 3 elements 
 745              	********************************/
 746 2f2e 1E2F0000 		_HEADER NROT,4,"-ROT"
 746      042D524F 
 746      5400
 747 2f38 7868     		LDR T0,[DSP,#4]
 748 2f3a 7E60     		STR TOS,[DSP,#4]	
 749 2f3c 3E68     		LDR TOS,[DSP]
 750 2f3e 3860     		STR T0,[DSP]
 751 2f40 5CE5     		_NEXT 
 752              	
 753              	/*********************************
 754              	    2DROP	( w1 w2 -- )
 755              	 	Drop top 2 items.
 756              	*********************************/
 757 2f42 322F0000 		_HEADER DDROP,5,"2DROP"
 757      05324452 
 757      4F50
 758 2f4c 57F8046B 		_POP
 759 2f50 57F8046B 		_POP
 760 2f54 52E5     		_NEXT 
 761              	
 762              	/********************************
 763              		3DROP ( w1 w2 w3 -- )
 764              		drop top 3 items 
 765              	********************************/
 766 2f56 462F0000 		_HEADER TDROP,5,"3DROP"
 766      05334452 
 766      4F50
 767 2f60 07F10807 	    add DSP,#8 
 768 2f64 57F8046B 	    _POP 
 769 2f68 48E5     	    _NEXT 
 770              	
 771              	/***********************************
 772              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 773              	 	Duplicate top 2 items.
 774              	************************************/
 775 2f6a 5A2F0000 		_HEADER DDUP,4,"2DUP"
ARM GAS  forth.s 			page 116


 775      04324455 
 775      5000
 776 2f74 3868     		LDR	T0,[DSP] // w1
 777 2f76 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 778 2f7a 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 779 2f7e 3DE5     		_NEXT
 780              	
 781              	/******************************
 782              	    D+	( d1 d2 -- d3 )
 783              	 	Add top 2 double numbers.
 784              	******************************/
 785 2f80 6E2F0000 		_HEADER DPLUS,2,"D+"
 785      02442B00 
 786 2f88 57F8045B 		LDR	WP,[DSP],#4
 787 2f8c 57F8042B 		LDR	T2,[DSP],#4
 788 2f90 3B68     		LDR	T3,[DSP]
 789 2f92 ED18     		ADDS	WP,WP,T3
 790 2f94 3D60     		STR	WP,[DSP]
 791 2f96 46EB0206 		ADC	TOS,TOS,T2
 792 2f9a 2FE5     		_NEXT
 793              	
 794              	/******************************
 795              		DABS ( d -- ud )
 796              		absolute value double 
 797              	*****************************/
 798 2f9c 842F0000 		_HEADER DABS,4,"DABS"
 798      04444142 
 798      530000BF 
 799 2fa8 16F0004F 		tst TOS,#(1<<31)
 800 2fac 09D0     		beq 9f 
 801 2fae 6FEA0606 		mvn TOS,TOS 
 802 2fb2 3D68     		ldr WP,[DSP]
 803 2fb4 6FEA0505 		mvn WP,WP 
 804 2fb8 0135     		adds WP,#1
 805 2fba 3D60     		str WP,[DSP]
 806 2fbc 01D3     		bcc 9f 
 807 2fbe 06F10106 		add TOS,#1 
 808 2fc2 1BE5     	9:	_NEXT 
 809              	
 810              	/*****************************
 811              	  UD> ( d1 d2 -- f )
 812              	  unsigned compare double d1 > d2 
 813              	******************************/
 814 2fc4 A02F0000 		_HEADER UDGREAT,3,"UD>"
 814      0355443E 
 815 2fcc 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 816 2fd0 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 817 2fd2 B042     		cmp T0,TOS 
 818 2fd4 02D8     		bhi 1f
 819 2fd6 04D4     		bmi 2f  
 820 2fd8 A942     		cmp T1,WP 
 821 2fda 02D9     		bls 2f 
 822 2fdc 4FF0FF36 	1:	mov TOS,#-1 
 823 2fe0 0CE5     		_NEXT 
 824 2fe2 4FF00006 	2:  mov TOS,#0 
 825 2fe6 09E5     		_NEXT 
 826              	
ARM GAS  forth.s 			page 117


 827              	/******************************
 828              		D0= ( d -- f )
 829              		double 0= 
 830              	*****************************/
 831 2fe8 C82F0000 		_HEADER DZEQUAL,3,"D0="
 831      0344303D 
 832 2ff0 3046     		mov T0,TOS
 833 2ff2 57F8046B 		_POP 
 834 2ff6 46EA0006 		orr TOS,T0 
 835 2ffa 01D0     		beq 9f
 836 2ffc 6FF00006 		mvn TOS,#0 
 837 3000 FCE4     	9:	_NEXT 
 838              	
 839              	/*****************************
 840              	    NOT	 ( w -- !w )
 841              	 	1"s complement.
 842              	*****************************/
 843 3002 EC2F0000 		_HEADER INVER,3,"NOT"
 843      034E4F54 
 843      00BF
 844 300c 6FEA0606 		MVN	TOS,TOS
 845 3010 F4E4     		_NEXT
 846              	
 847              	/*****************************
 848              	    NEGATE	( w -- -w )
 849              	 	2's complement.
 850              	***************************/
 851 3012 06300000 		_HEADER NEGAT,6,"NEGATE"
 851      064E4547 
 851      41544500 
 851      00BF
 852 3020 C6F10006 		RSB	TOS,TOS,#0
 853 3024 EAE4     		_NEXT
 854              	
 855              	/***************************
 856              	    ABS	 ( w -- |w| )
 857              	 	Absolute.
 858              	**************************/
 859 3026 16300000 		_HEADER ABSS,3,"ABS"
 859      03414253 
 859      00BF
 860 3030 16F0004F 		TST	TOS,#0x80000000
 861 3034 18BF     		IT NE
 862 3036 7642     	    RSBNE   TOS,TOS,#0
 863 3038 E0E4     		_NEXT
 864              	
 865              	/**************************
 866              		CLZ ( n - n )
 867              		count leading zeros 
 868              	**************************/
 869 303a 2A300000 		_HEADER CLZ,3,"CLZ"
 869      03434C5A 
 869      00BF
 870 3044 B6FA86F6 		clz TOS,TOS 
 871 3048 D8E4     		_NEXT 
 872              	
 873              	/*************************
ARM GAS  forth.s 			page 118


 874              		CTZ ( n -- n )
 875              		count trailing zeros 
 876              	************************/
 877 304a 3E300000 		_HEADER CTZ,3,"CTZ"
 877      0343545A 
 877      00BF
 878 3054 80EA0000 		eor T0,T0 
 879 3058 16F0010F 	1:  tst TOS,#1 
 880 305c 04D1     		bne 2f 
 881 305e 4FEA5606 		lsr TOS,#1 
 882 3062 00F10100 		add T0,#1 
 883 3066 F7E7     		b 1b 
 884 3068 0646     	2:  mov TOS,T0 
 885 306a C7E4     		_NEXT 
 886              	
 887              	
 888              	/*******************
 889              	  0= ( w -- f )
 890              	 TOS==0?
 891              	*******************/
 892 306c 4E300000 		_HEADER ZEQUAL,2,"0="
 892      02303D00 
 893 3074 16B9     		cbnz TOS,1f
 894 3076 4FF0FF36 		mov TOS,#-1
 895 307a BFE4     		_NEXT 
 896 307c 86EA0606 	1:  eor TOS,TOS,TOS  
 897 3080 BCE4     		_NEXT 	
 898              	
 899              	/*********************
 900              	    =	 ( w w -- t )
 901              	 	Equal?
 902              	*********************/
 903 3082 70300000 		_HEADER EQUAL,1,"="
 903      013D
 904 3088 57F8045B 		LDR	WP,[DSP],#4
 905 308c AE42     		CMP	TOS,WP
 906 308e 0CBF     		ITE EQ 
 907 3090 6FF00006 	    MVNEQ	TOS,#0
 908 3094 0026     		MOVNE	TOS,#0
 909 3096 B1E4     		_NEXT
 910              	
 911              	/************************
 912              		<> ( w w -- f )
 913              		different?
 914              	************************/
 915 3098 86300000 		_HEADER DIFF,2,"<>"
 915      023C3E00 
 916 30a0 3046     		mov T0,TOS 
 917 30a2 57F8046B 		_POP 
 918 30a6 86EA0006 		eor TOS,T0
 919 30aa B6FA86F0 		clz T0,TOS 
 920 30ae 06FA00F6 		lsl TOS,T0 
 921 30b2 4FEAE676 		asr TOS,#31 
 922 30b6 A1E4     		_NEXT 
 923              	
 924              	/************************
 925              	    U<	 ( w w -- t )
ARM GAS  forth.s 			page 119


 926              	 	Unsigned less?
 927              	*************************/
 928 30b8 9C300000 		_HEADER ULESS,2,"U<"
 928      02553C00 
 929 30c0 57F8045B 		LDR	WP,[DSP],#4
 930 30c4 B542     		CMP	WP,TOS
 931 30c6 34BF     		ITE CC 
 932 30c8 6FF00006 		MVNCC	TOS,#0
 933 30cc 0026     		MOVCS	TOS,#0
 934 30ce 95E4     		_NEXT
 935              	
 936              	/**********************
 937              	    <	( w w -- t )
 938              	 	Less?
 939              	**********************/
 940 30d0 BC300000 		_HEADER LESS,1,"<"
 940      013C00BF 
 941 30d8 57F8045B 		LDR	WP,[DSP],#4
 942 30dc B542     		CMP	WP,TOS
 943 30de B4BF     	    ITE LT
 944 30e0 6FF00006 		MVNLT	TOS,#0
 945 30e4 0026     		MOVGE	TOS,#0
 946 30e6 89E4     		_NEXT 
 947              	
 948              	/**********************
 949              		U> ( u u -- t|f )
 950              	    unsigned greater 
 951              	**********************/
 952 30e8 D4300000 		_HEADER UGREAT,2,"U>"
 952      02553E00 
 953 30f0 57F8045B 		LDR WP,[DSP],#4 
 954 30f4 AE42     		CMP TOS,WP 
 955 30f6 34BF     		ITE CC  
 956 30f8 6FF00006 		MVNCC TOS,#0 
 957 30fc 0026     		MOVCS TOS,#0
 958 30fe 7DE4     		_NEXT 
 959              	
 960              	/***********************
 961              	    >	( w w -- t )
 962              	 	greater?
 963              	***********************/
 964 3100 EC300000 		_HEADER GREAT,1,">"
 964      013E00BF 
 965 3108 57F8045B 		LDR	WP,[DSP],#4
 966 310c B542     		CMP	WP,TOS
 967 310e CCBF     		ITE GT
 968 3110 6FF00006 	    MVNGT	TOS,#0
 969 3114 0026     		MOVLE	TOS,#0
 970 3116 71E4     		_NEXT
 971              	
 972              	/***************************
 973              	    MAX	 ( w w -- max )
 974              	 	Leave maximum.
 975              	***************************/
 976 3118 04310000 		_HEADER MAX,3,"MAX"
 976      034D4158 
 977 3120 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 120


 978 3124 B542     		CMP	WP,TOS
 979 3126 C8BF     		IT GT 
 980 3128 2E46     		MOVGT	TOS,WP
 981 312a 67E4     		_NEXT 
 982              	
 983              	/**************************
 984              	    MIN	 ( w w -- min )
 985              	 	Leave minimum.
 986              	**************************/
 987 312c 1C310000 		_HEADER MIN,3,"MIN"
 987      034D494E 
 988 3134 57F8045B 		LDR	WP,[DSP],#4
 989 3138 B542     		CMP	WP,TOS
 990 313a B8BF     		IT LT
 991 313c 2E46     		MOVLT	TOS,WP
 992 313e 5DE4     		_NEXT
 993              	
 994              	/***********************
 995              	    +!	 ( w a -- )
 996              	 	Add to memory.
 997              	***********************/
 998 3140 30310000 		_HEADER PSTOR,2,"+!"
 998      022B2100 
 999 3148 57F8045B 		LDR	WP,[DSP],#4
 1000 314c 3268     		LDR	T2,[TOS]
 1001 314e 2A44     		ADD	T2,T2,WP
 1002 3150 3260     		STR	T2,[TOS]
 1003 3152 57F8046B 		_POP
 1004 3156 51E4     		_NEXT
 1005              	
 1006              	/************************
 1007              	    2!	 ( d a -- )
 1008              	 	Store double number.
 1009              	*************************/
 1010 3158 44310000 		_HEADER DSTOR,2,"2!"
 1010      02322100 
 1011 3160 57F8045B 		LDR	WP,[DSP],#4
 1012 3164 57F8042B 		LDR	T2,[DSP],#4
 1013 3168 46F8045B 		STR	WP,[TOS],#4
 1014 316c 3260     		STR	T2,[TOS]
 1015 316e 57F8046B 		_POP
 1016 3172 43E4     		_NEXT
 1017              	
 1018              	/************************
 1019              	    2@	 ( a -- d )
 1020              	 	Fetch double number.
 1021              	************************/
 1022 3174 5C310000 		_HEADER DAT,2,"D@"
 1022      02444000 
 1023 317c 7568     		LDR	WP,[TOS,#4]
 1024 317e 47F8045D 		STR	WP,[DSP,#-4]!
 1025 3182 3668     		LDR	TOS,[TOS]
 1026 3184 3AE4     		_NEXT
 1027              	
 1028              	/***************************
 1029              	    COUNT	( b -- b+1 c )
 1030              	 	Fetch length of string.
ARM GAS  forth.s 			page 121


 1031              	****************************/
 1032 3186 78310000 		_HEADER COUNT,5,"COUNT"
 1032      05434F55 
 1032      4E54
 1033 3190 16F8015B 		LDRB	WP,[TOS],#1
 1034 3194 47F8046D 		_PUSH
 1035 3198 2E46     		MOV	TOS,WP
 1036 319a 2FE4     		_NEXT
 1037              	
 1038              	/******************************
 1039              	    DNEGATE	( d -- -d )
 1040              	 	Negate double number.
 1041              	**************************/
 1042 319c 8A310000 		_HEADER DNEGA,7,"DNEGATE"
 1042      07444E45 
 1042      47415445 
 1043 31a8 3D68     		LDR	WP,[DSP]
 1044 31aa A2EB0202 		SUB	T2,T2,T2
 1045 31ae 551B     		SUBS WP,T2,WP
 1046 31b0 62EB0606 		SBC	TOS,T2,TOS
 1047 31b4 3D60     		STR	WP,[DSP]
 1048 31b6 21E4     		_NEXT
 1049              	
 1050              	/******************************
 1051              	  System and user variables
 1052              	******************************/
 1053              	
 1054              	/*******************************
 1055              	  doVAR	( -- a )
 1056              	  Run time routine for VARIABLE and CREATE.
 1057              	hidden word used by compiler
 1058              	********************************/
 1059              	DOVAR:
 1060 31b8 47F8046D 		_PUSH
 1061 31bc 6646     		MOV TOS,IP
 1062 31be 0CF1040C 		ADD IP,IP,#4 
 1063 31c2 1EE4     		B UNNEST 
 1064              	
 1065              	/**********************************
 1066              	    doCON	( -- a ) 
 1067              	 	Run time routine for CONSTANT.
 1068              	hidden word used by compiler 
 1069              	***********************************/
 1070              	DOCON:
 1071 31c4 47F8046D 		_PUSH
 1072 31c8 5CF8046B 		LDR.W TOS,[IP],#4 
 1073 31cc 19E4     		B UNNEST 
 1074              	
 1075              	/***********************
 1076              	  system variables 
 1077              	***********************/
 1078              	
 1079              	/**************************
 1080              	 SEED ( -- a)
 1081              	 return PRNG seed address 
 1082              	**************************/
 1083 31ce A0310000 		_HEADER SEED,4,"SEED"
ARM GAS  forth.s 			page 122


 1083      04534545 
 1083      4400
 1084 31d8 47F8046D 		_PUSH 
 1085 31dc 04F10406 		ADD TOS,UP,#RNDSEED
 1086 31e0 0CE4     		_NEXT 	
 1087              	
 1088              	/****************************************
 1089              	  MSEC ( -- a)
 1090              	 return address of milliseconds counter
 1091              	****************************************/
 1092 31e2 D2310000 		_HEADER MSEC,4,"MSEC"
 1092      044D5345 
 1092      4300
 1093 31ec 47F8046D 	    _PUSH
 1094 31f0 04F10806 	    ADD TOS,UP,#TICKS
 1095 31f4 02E4     	    _NEXT 
 1096              	
 1097              	/*************************
 1098              	 TIMER ( -- a )
 1099              	 count down timer 
 1100              	**********************/
 1101 31f6 E6310000 		_HEADER TIMER,5,"TIMER"
 1101      0554494D 
 1101      4552
 1102 3200 47F8046D 		 _PUSH 
 1103 3204 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1104 3208 FFF7F8BB 	    _NEXT
 1105              	
 1106              	/*****************************
 1107              	    'BOOT	 ( -- a )
 1108              	 	boot up application vector 
 1109              	*****************************/
 1110 320c FA310000 		_HEADER TBOOT,5,"'BOOT"
 1110      0527424F 
 1110      4F5400BF 
 1111 3218 47F8046D 		_PUSH
 1112 321c 04F11006 		ADD	TOS,UP,#BOOT 
 1113 3220 FFF7ECBB 		_NEXT
 1114              		
 1115              	/********************************************	
 1116              	    BASE	( -- a )
 1117              	 	Storage of the radix base for numeric I/O.
 1118              	**********************************************/
 1119 3224 10320000 		_HEADER BASE,4,"BASE"
 1119      04424153 
 1119      450000BF 
 1120 3230 47F8046D 		_PUSH
 1121 3234 04F11C06 		ADD	TOS,UP,#NBASE
 1122 3238 FFF7E0BB 		_NEXT
 1123              	
 1124              	/*****************************************************
 1125              	    temp	 ( -- a )
 1126              	 	A temporary storage location used in parse and find.
 1127              	hidden word for internal use
 1128              	********************************************************/
 1129              	TEMP:
 1130 323c 47F8046D 		_PUSH
ARM GAS  forth.s 			page 123


 1131 3240 04F12006 		ADD	TOS,UP,#TMP
 1132 3244 FFF7DABB 		_NEXT
 1133              	
 1134              	/*******************************************
 1135              	    SPAN	( -- a )
 1136              	 	Hold character count received by EXPECT.
 1137              	********************************************/
 1138 3248 28320000 		_HEADER SPAN,4,"SPAN"
 1138      04535041 
 1138      4E0000BF 
 1139 3254 47F8046D 		_PUSH
 1140 3258 04F12406 		ADD	TOS,UP,#CSPAN
 1141 325c FFF7CEBB 		_NEXT
 1142              	
 1143              	/***********************************************************
 1144              	    >IN	 ( -- a )
 1145              	 	Hold the character pointer while parsing input stream.
 1146              	***********************************************************/
 1147 3260 4C320000 		_HEADER INN,3,">IN"
 1147      033E494E 
 1148 3268 47F8046D 		_PUSH
 1149 326c 04F12806 		ADD	TOS,UP,#TOIN
 1150 3270 FFF7C4BB 		_NEXT
 1151              	
 1152              	/**************************************
 1153              	    #TIB	( -- a )
 1154              	 	Hold the current count and address 
 1155              		of the terminal input buffer.
 1156              	**************************************/
 1157 3274 64320000 		_HEADER NTIB,4,"#TIB"
 1157      04235449 
 1157      420000BF 
 1158 3280 47F8046D 		_PUSH
 1159 3284 04F12C06 		ADD	TOS,UP,#NTIBB
 1160 3288 FFF7B8BB 		_NEXT
 1161              	
 1162              	/******************************
 1163              	    'EVAL	( -- a )
 1164              	 	Execution vector of EVAL.
 1165              	*******************************/
 1166 328c 78320000 		_HEADER TEVAL,5,"'EVAL"
 1166      05274556 
 1166      414C00BF 
 1167 3298 47F8046D 		_PUSH
 1168 329c 04F13406 		ADD	TOS,UP,#EVAL
 1169 32a0 FFF7ACBB 		_NEXT
 1170              	
 1171              	/*********************************
 1172              	    HLD	 ( -- a )
 1173              	 	Hold a pointer in building a 
 1174              		numeric output string.
 1175              	*********************************/
 1176 32a4 90320000 		_HEADER HLD,3,"HLD"
 1176      03484C44 
 1177 32ac 47F8046D 		_PUSH
 1178 32b0 04F13806 		ADD	TOS,UP,#VHOLD
 1179 32b4 FFF7A2BB 		_NEXT
ARM GAS  forth.s 			page 124


 1180              	
 1181              	/**********************************
 1182              	    CONTEXT	( -- a )
 1183              	 	A area to specify vocabulary 
 1184              		search order.
 1185              	**********************************/
 1186 32b8 A8320000 		_HEADER CNTXT,7,"CONTEXT"
 1186      07434F4E 
 1186      54455854 
 1187              	CRRNT:
 1188 32c4 47F8046D 		_PUSH
 1189 32c8 04F13C06 		ADD	TOS,UP,#CTXT
 1190 32cc FFF796BB 		_NEXT
 1191              	
 1192              	/******************************
 1193              	    CP	( -- a )
 1194              	 	Point to top name in RAM 
 1195              		vocabulary.
 1196              	******************************/
 1197 32d0 BC320000 		_HEADER CPP,2,"CP"
 1197      02435000 
 1198 32d8 47F8046D 		_PUSH
 1199 32dc 04F14406 		ADD	TOS,UP,#USER_CTOP
 1200 32e0 FFF78CBB 		_NEXT
 1201              	
 1202              	/****************************
 1203              	   FCP ( -- a )
 1204              	  Point ot top of Forth 
 1205              	  system dictionary
 1206              	****************************/
 1207 32e4 D4320000 		_HEADER FCP,3,"FCP"
 1207      03464350 
 1208 32ec 47F8046D 		_PUSH 
 1209 32f0 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1210 32f4 FFF782BB 		_NEXT 
 1211              	
 1212              	/***************************
 1213              	    LAST	( -- a )
 1214              	 	Point to the last name 
 1215              		in the name dictionary.
 1216              	***************************/
 1217 32f8 E8320000 		_HEADER LAST,4,"LAST"
 1217      044C4153 
 1217      540000BF 
 1218 3304 47F8046D 		_PUSH
 1219 3308 04F14806 		ADD	TOS,UP,#LASTN
 1220 330c FFF776BB 		_NEXT
 1221              	
 1222              	
 1223              	/***********************
 1224              		system constants 
 1225              	***********************/
 1226              	
 1227              	/********************************
 1228              		USER-BEGIN ( -- a )
 1229              	  where user area begin in RAM
 1230              	********************************/
ARM GAS  forth.s 			page 125


 1231 3310 FC320000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1231      0A555345 
 1231      522D4245 
 1231      47494E00 
 1232 3320 47F8046D 		_PUSH 
 1233 3324 DFF80460 		ldr TOS,USR_BGN_ADR 
 1234 3328 FFF768BB 		_NEXT 
 1235              	USR_BGN_ADR:
 1236 332c 12050020 	.word  DTOP 
 1237              	
 1238              	/*********************************
 1239              	  USER_END ( -- a )
 1240              	  where user area end in RAM 
 1241              	******************************/
 1242 3330 14330000 		_HEADER USER_END,8,"USER-END"
 1242      08555345 
 1242      522D454E 
 1242      440000BF 
 1243 3340 47F8046D 		_PUSH 
 1244 3344 DFF80460 		ldr TOS,USER_END_ADR 
 1245 3348 FFF758BB 		_NEXT 
 1246              	USER_END_ADR:
 1247 334c 7C800120 		.word DEND 
 1248              	
 1249              	
 1250              	/* *********************
 1251              	  Common functions
 1252              	***********************/
 1253              	
 1254              	/********************************
 1255              	    WITHIN	( u ul uh -- t )
 1256              	 	Return true if u is within 
 1257              		the range of ul and uh.
 1258              	********************************/
 1259 3350 34330000 		_HEADER WITHI,6,"WITHIN"
 1259      06574954 
 1259      48494E00 
 1260 335c 504700BF 		_NEST
 1261 3360 612D0000 		_ADR	OVER
 1262 3364 112E0000 		_ADR	SUBB
 1263 3368 B92C0000 		_ADR	TOR
 1264 336c 112E0000 		_ADR	SUBB
 1265 3370 752C0000 		_ADR	RFROM
 1266 3374 C1300000 		_ADR	ULESS
 1267 3378 032A0000 		_UNNEST
 1268              	
 1269              	//  Divide
 1270              	
 1271              	/*************************************
 1272              	    UM/MOD	( udl udh u -- ur uq )
 1273              	 	Unsigned divide of a double by a 
 1274              		single. Return mod and quotient.
 1275              	**************************************/
 1276 337c 54330000 		_HEADER UMMOD,6,"UM/MOD"
 1276      06554D2F 
 1276      4D4F4400 
 1277 3388 4FF00103 		MOV	T3,#1
ARM GAS  forth.s 			page 126


 1278 338c 57F8045B 		LDR	WP,[DSP],#4
 1279 3390 3A68     		LDR	T2,[DSP]
 1280              	UMMOD0:
 1281 3392 9218     		ADDS	T2,T2,T2
 1282 3394 6D41     		ADCS	WP,WP,WP
 1283 3396 04D3     		BCC	UMMOD1
 1284 3398 A5EB0605 		SUB	WP,WP,TOS
 1285 339c 02F10102 		ADD	T2,T2,#1
 1286 33a0 04E0     		B UMMOD2
 1287              	UMMOD1:
 1288 33a2 AD1B     		SUBS	WP,WP,TOS 
 1289 33a4 28BF     		IT CS 
 1290 33a6 0132     		ADDCS	T2,T2,#1
 1291 33a8 00D2     		BCS	UMMOD2
 1292 33aa 3544     		ADD	WP,WP,TOS
 1293              	UMMOD2:
 1294 33ac DB18     		ADDS	T3,T3,T3
 1295 33ae F0D3     		BCC	UMMOD0
 1296 33b0 1646     		MOV	TOS,T2
 1297 33b2 3D60     		STR	WP,[DSP]
 1298 33b4 FFF722BB 		_NEXT
 1299              	
 1300              	/****************************
 1301              	    M/MOD	( d n -- r q )
 1302              	 	Signed floored divide 
 1303              		of double by single. 
 1304              		Return mod and quotient.
 1305              	****************************/
 1306 33b8 80330000 		_HEADER MSMOD,5,"M/MOD"
 1306      054D2F4D 
 1306      4F4400BF 
 1307 33c4 504700BF 		_NEST
 1308 33c8 3D2D0000 		_ADR	DUPP
 1309 33cc 712D0000 		_ADR	ZLESS
 1310 33d0 3D2D0000 		_ADR	DUPP
 1311 33d4 B92C0000 		_ADR	TOR
 1312 33d8 032C0000 		_QBRAN MMOD1
 1312      F0330000 
 1313 33e0 21300000 		_ADR	NEGAT
 1314 33e4 B92C0000 		_ADR	TOR
 1315 33e8 A9310000 		_ADR	DNEGA
 1316 33ec 752C0000 		_ADR	RFROM
 1317              	MMOD1:
 1318 33f0 B92C0000 		_ADR	TOR
 1319 33f4 3D2D0000 		_ADR	DUPP
 1320 33f8 712D0000 		_ADR	ZLESS
 1321 33fc 032C0000 		_QBRAN MMOD2
 1321      0C340000 
 1322 3404 A52C0000 		_ADR	RAT
 1323 3408 012E0000 		_ADR	PLUS
 1324              	MMOD2:
 1325 340c 752C0000 		_ADR	RFROM
 1326 3410 89330000 		_ADR	UMMOD
 1327 3414 752C0000 		_ADR	RFROM
 1328 3418 032C0000 		_QBRAN	MMOD3
 1328      2C340000 
 1329 3420 4D2D0000 		_ADR	SWAP
ARM GAS  forth.s 			page 127


 1330 3424 21300000 		_ADR	NEGAT
 1331 3428 4D2D0000 		_ADR	SWAP
 1332              	MMOD3:   
 1333 342c 032A0000 		_UNNEST
 1334              	
 1335              	/****************************
 1336              		S>D ( n -- d )
 1337              		convert single to double 
 1338              	*****************************/
 1339 3430 BC330000 		_HEADER STOD,3,"S>D"
 1339      03533E44 
 1340 3438 47F8046D 		_PUSH 
 1341 343c 4FEAE676 		ASR TOS,#31
 1342 3440 FFF7DCBA 		_NEXT 
 1343              	
 1344              	/****************************
 1345              		D2* ( d -- d<<1 )
 1346              		double * 2 
 1347              	***************************/
 1348 3444 34340000 		_HEADER D2STAR,3,"D2*"
 1348      0344322A 
 1349 344c 3868     		ldr T0,[DSP]
 1350 344e 4000     		lsls T0,#1
 1351 3450 3860     		str T0,[DSP]
 1352 3452 4FEA4606 		lsl TOS,#1
 1353 3456 46F10006 		adc TOS,#0
 1354 345a FFF7CFBA 		_NEXT 
 1355              	
 1356              	/****************************
 1357              		D2/  ( d -- d>>1 )
 1358              		double signed divide by 2 
 1359              	*****************************/
 1360 345e 48340000 		_HEADER D2SL,3,"D2/"
 1360      0344322F 
 1360      00BF
 1361 3468 3868     		ldr T0,[DSP]
 1362 346a 7610     		asrs TOS,#1
 1363 346c 4FEA3000 		rrx T0,T0 
 1364 3470 3860     		str T0,[DSP]
 1365 3472 FFF7C3BA 		_NEXT 
 1366              	
 1367              	/***************************
 1368              		D/MOD  ( d+ n+ - r+ qd+ )
 1369              		unsigned double division
 1370              		and modulo 
 1371              		output:
 1372              			qd+ = d+ / n+
 1373              			r+ = qd+ - (d+ * n+ )
 1374              	***************************/
 1375 3476 62340000 		_HEADER DSLMOD,5,"D/MOD"
 1375      05442F4D 
 1375      4F44
 1376 3480 3D68     		ldr WP,[DSP]  // d+ high 
 1377 3482 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1378 3484 4FF02002 		mov T2,#32 // shift counter  
 1379 3488 81EA0101 		eor T1,T1 // quotient T0:T1  
 1380 348c 25B9     		cbnz WP,1f    
ARM GAS  forth.s 			page 128


 1381 348e 82EA0202 		eor T2,T2 // nos shifting required 
 1382 3492 0546     		mov WP,T0 
 1383 3494 80EA0000 		eor T0,T0 
 1384 3498 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1385 349a 15F0004F 	    tst WP,#(1<<31) 
 1386 349e 06D1     		bne 2f
 1387 34a0 4918     		adds T1,T1,T1 
 1388 34a2 4041     		adcs T0,T0,T0 
 1389 34a4 45EB0505 		adc WP,WP,WP 
 1390 34a8 A2F10102 		sub T2,#1 
 1391 34ac F4E7     		b 1b 
 1392 34ae B5FBF6F3 	2:  udiv T3,WP,TOS
 1393 34b2 41EA0301 		orr T1,T3   // append partial quotient 
 1394 34b6 06FB03F3 		mul T3,TOS
 1395 34ba A5EB0305 		sub WP,T3 //remainder 
 1396 34be 02B1     		cbz T2,8f 
 1397 34c0 EAE7     		b 1b 
 1398 34c2 7D60     	8:	str WP,[DSP,#4] // remainder 
 1399 34c4 3960     		str T1,[DSP]  // q lo 
 1400 34c6 0646     		mov TOS,T0  // q hi 		
 1401 34c8 FFF798BA 		_NEXT 
 1402              	
 1403              	
 1404              	/****************************
 1405              		D/  ( ud u -- udq )
 1406              		divide unsigned double 
 1407              		by unsigned single 
 1408              		return double quotient
 1409              		rounded to nearest integer 
 1410              	****************************/
 1411 34cc 7A340000 		_HEADER DSLASH,2,"D/"
 1411      02442F00 
 1412 34d4 504700BF 		_NEST 
 1413 34d8 3D2D0000 		_ADR DUPP 
 1414 34dc C32B0000 		_DOLIT 1 
 1414      01000000 
 1415 34e4 D92D0000 		_ADR RSHIFT 
 1416 34e8 B92C0000 		_ADR TOR 
 1417 34ec 81340000 		_ADR DSLMOD 
 1418 34f0 252F0000 		_ADR ROT 
 1419 34f4 752C0000 		_ADR RFROM 
 1420 34f8 09310000 		_ADR GREAT 
 1421 34fc 032C0000 		_QBRAN 9f
 1421      14350000 
 1422 3504 C32B0000 		_DOLIT 1 
 1422      01000000 
 1423 350c 39340000 		_ADR STOD 
 1424 3510 892F0000 		_ADR DPLUS 
 1425 3514 032A0000 	9:	_UNNEST 
 1426              	
 1427              	
 1428              	/****************************
 1429              		D* ( d s -- d )
 1430              	    multiply a double 
 1431              		by a single 
 1432              	****************************/
 1433 3518 D0340000 		_HEADER DSTAR,2,"D*"
ARM GAS  forth.s 			page 129


 1433      02442A00 
 1434              	/*
 1435              		_NEST 
 1436              		_ADR NROT 
 1437              		_ADR DUPP 
 1438              		_ADR TOR 
 1439              		_ADR DABS
 1440              		_ADR SWAP  
 1441              		_ADR ROT   
 1442              		_ADR DUPP
 1443              		_ADR TOR
 1444              		_ADR MSTAR
 1445              		_ADR ROT
 1446              		_ADR RFROM 
 1447              		_ADR STAR 
 1448              		_ADR PLUS
 1449              		_ADR RFROM 
 1450              		_ADR ZLESS 
 1451              		_QBRAN 9f
 1452              		_ADR DNEGA   
 1453              	9:	_UNNEST 
 1454              	*/
 1455 3520 57F8040B 		ldr T0,[DSP],#4
 1456 3524 3968     		ldr T1,[DSP]
 1457 3526 3860     		str T0,[DSP] 
 1458 3528 83EA0303 		eor T3,T3 
 1459 352c 10F0004F 		tst T0,#(1<<31)
 1460 3530 02D0     		beq 1f 
 1461              		// DNEGATE 
 1462 3532 591A     		subs T1,T3,T1  
 1463 3534 63EB0000 		sbc T0,T3,T0 
 1464 3538 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1465 353c 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1466 3540 0E44     		add TOS,T1  // TOS:T2 product  
 1467 3542 3868     		ldr r0,[DSP]
 1468 3544 10F0004F 		tst T0,#(1<<31)
 1469 3548 02D0     		beq 2f 
 1470              		// DNEGATE product 
 1471 354a 9A1A     		subs T2,T3,T2  
 1472 354c 63EB0606 		sbc TOS,T3,TOS 
 1473 3550 3A60     	2:  str T2,[DSP]
 1474 3552 FFF753BA 		_NEXT 
 1475              	
 1476              	
 1477              	/****************************
 1478              	   /MOD	( n n -- r q )
 1479              		Signed divide. Return
 1480              		mod and quotient.
 1481              	****************************/
 1482 3556 1C350000 		_HEADER SLMOD,4,"/MOD"
 1482      042F4D4F 
 1482      4400
 1483 3560 504700BF 		_NEST
 1484 3564 612D0000 		_ADR	OVER
 1485 3568 712D0000 		_ADR	ZLESS
 1486 356c 4D2D0000 		_ADR	SWAP
 1487 3570 C5330000 		_ADR	MSMOD
ARM GAS  forth.s 			page 130


 1488 3574 032A0000 		_UNNEST
 1489              	
 1490              	/**************************
 1491              	    MOD	 ( n n -- r )
 1492              	 	Signed divide. Return
 1493              		mod only.
 1494              	**************************/
 1495 3578 5A350000 		_HEADER MODD,3,"MOD"
 1495      034D4F44 
 1496 3580 504700BF 		_NEST
 1497 3584 61350000 		_ADR	SLMOD
 1498 3588 2D2D0000 		_ADR	DROP
 1499 358c 032A0000 		_UNNEST
 1500              	
 1501              	/*************************
 1502              	    /	   ( n n -- q )
 1503              	 	Signed divide. Return
 1504              		quotient only.
 1505              	**************************/
 1506 3590 7C350000 		_HEADER SLASH,1,"/"
 1506      012F00BF 
 1507 3598 504700BF 		_NEST
 1508 359c 61350000 		_ADR	SLMOD
 1509 35a0 4D2D0000 		_ADR	SWAP
 1510 35a4 2D2D0000 		_ADR	DROP
 1511 35a8 032A0000 		_UNNEST
 1512              	
 1513              	//******************************
 1514              	//  */MOD	( n1 n2 n3 -- r q )
 1515              	/* 	Multiply n1 and n2, then 
 1516              		divide by n3. Return 
 1517              		mod and quotient.
 1518              	******************************/
 1519 35ac 94350000 		_HEADER SSMOD,5,"*/MOD"
 1519      052A2F4D 
 1519      4F4400BF 
 1520 35b8 504700BF 		_NEST
 1521 35bc B92C0000 		_ADR	TOR
 1522 35c0 492E0000 		_ADR	MSTAR
 1523 35c4 752C0000 		_ADR	RFROM
 1524 35c8 C5330000 		_ADR	MSMOD
 1525 35cc 032A0000 		_UNNEST
 1526              	
 1527              	//*******************************
 1528              	//  */ ( n1 n2 n3 -- q )
 1529              	/* 	Multiply n1 by n2, then 
 1530              		divide by n3. Return quotient
 1531              		only.
 1532              	*******************************/
 1533 35d0 B0350000 		_HEADER STASL,2,"*/"
 1533      022A2F00 
 1534 35d8 504700BF 		_NEST
 1535 35dc B9350000 		_ADR	SSMOD
 1536 35e0 4D2D0000 		_ADR	SWAP
 1537 35e4 2D2D0000 		_ADR	DROP
 1538 35e8 032A0000 		_UNNEST
 1539              	
ARM GAS  forth.s 			page 131


 1540              	/*******************
 1541              	  Miscellaneous
 1542              	*******************/
 1543              	
 1544              	/*************************
 1545              	    ALIGNED	( b -- a )
 1546              	 	Align address to the 
 1547              		cell boundary.
 1548              	**************************/
 1549 35ec D4350000 		_HEADER ALGND,7,"ALIGNED"
 1549      07414C49 
 1549      474E4544 
 1550 35f8 06F10306 		ADD	TOS,TOS,#3
 1551 35fc 6FF00305 		MVN	WP,#3
 1552 3600 06EA0506 		AND	TOS,TOS,WP
 1553 3604 FFF7FAB9 		_NEXT
 1554              	
 1555              	/****************************
 1556              	    >CHAR	( c -- c )
 1557              	 	Filter non-printing 
 1558              		characters.
 1559              	****************************/
 1560 3608 F0350000 		_HEADER TCHAR,5,">CHAR"
 1560      053E4348 
 1560      415200BF 
 1561 3614 504700BF 		_NEST
 1562 3618 C32B0000 		_DOLIT  0x7F
 1562      7F000000 
 1563 3620 812D0000 		_ADR	ANDD
 1564 3624 3D2D0000 		_ADR	DUPP	// mask msb
 1565 3628 BD2E0000 		_ADR	BLANK
 1566 362c C32B0000 		_DOLIT 	127
 1566      7F000000 
 1567 3634 5D330000 		_ADR	WITHI	// check for printable
 1568 3638 0D300000 		_ADR	INVER
 1569 363c 032C0000 		_QBRAN	TCHA1
 1569      50360000 
 1570 3644 2D2D0000 		_ADR	DROP
 1571 3648 C32B0000 		_DOLIT 	'_'	// replace non-printables
 1571      5F000000 
 1572              	TCHA1:
 1573 3650 032A0000 		  _UNNEST
 1574              	
 1575              	/************************
 1576              	    DEPTH	( -- n )
 1577              	 	Return the depth of
 1578              		the data stack.
 1579              	***********************/
 1580 3654 0C360000 		_HEADER DEPTH,5,"DEPTH"
 1580      05444550 
 1580      544800BF 
 1581 3660 4FF68062 		_MOV32 T2,SPP 
 1581      C2F20102 
 1582 3668 A2EB0702 		SUB	T2,T2,DSP
 1583 366c 47F8046D 		_PUSH
 1584 3670 4FEAA206 		ASR	TOS,T2,#2
 1585 3674 FFF7C2B9 		_NEXT
ARM GAS  forth.s 			page 132


 1586              	
 1587              	/*****************************
 1588              	    PICK	( ... +n -- ... w )
 1589              	 	Copy the nth stack item 
 1590              		to tos.
 1591              	******************************/
 1592 3678 58360000 		_HEADER PICK,4,"PICK"
 1592      04504943 
 1592      4B0000BF 
 1593 3684 504700BF 		_NEST
 1594 3688 5D2E0000 		_ADR	ONEP
 1595 368c D12E0000 		_ADR	CELLS
 1596 3690 092D0000 		_ADR	SPAT
 1597 3694 012E0000 		_ADR	PLUS
 1598 3698 492C0000 		_ADR	AT
 1599 369c 032A0000 		_UNNEST
 1600              	
 1601              	/*********************
 1602              	  Memory access
 1603              	*********************/
 1604              	
 1605              	/*************************
 1606              	    HERE	( -- a )
 1607              	 	Return the top of
 1608              		the code dictionary.
 1609              	*************************/
 1610 36a0 7C360000 		_HEADER HERE,4,"HERE"
 1610      04484552 
 1610      450000BF 
 1611 36ac 504700BF 		_NEST
 1612 36b0 D9320000 		_ADR	CPP
 1613 36b4 492C0000 		_ADR	AT
 1614 36b8 032A0000 		_UNNEST
 1615              	
 1616              	/***************************	
 1617              	    PAD	 ( -- a )
 1618              	 	Return the address of 
 1619              		a temporary buffer.
 1620              	***************************/
 1621 36bc A4360000 		_HEADER PAD,3,"PAD"
 1621      03504144 
 1622 36c4 504700BF 		_NEST
 1623 36c8 AD360000 		_ADR	HERE
 1624 36cc C32B0000 		_DOLIT 80
 1624      50000000 
 1625 36d4 012E0000 		_ADR PLUS 
 1626 36d8 032A0000 		_UNNEST
 1627              	
 1628              	/***********************
 1629              	    TIB	 ( -- a )
 1630              	 	Return the address 
 1631              		of the terminal 
 1632              		input buffer.
 1633              	************************/
 1634 36dc C0360000 		_HEADER TIB,3,"TIB"
 1634      03544942 
 1635 36e4 47F8046D 		_PUSH
ARM GAS  forth.s 			page 133


 1636 36e8 266B     		ldr TOS,[UP,#TIBUF]
 1637 36ea FFF787B9 		_NEXT
 1638              	
 1639              	/*************************
 1640              	    @EXECUTE	( a -- )
 1641              	 	Execute vector stored
 1642              		in address a.
 1643              	*************************/
 1644 36ee E0360000 		_HEADER ATEXE,8,"@EXECUTE"
 1644      08404558 
 1644      45435554 
 1644      4500
 1645 36fc 3500     		MOVS	WP,TOS
 1646 36fe 57F8046B 		_POP
 1647 3702 2D68     		LDR	WP,[WP]
 1648 3704 45F00105 		ORR	WP,WP,#1
 1649 3708 18BF     	    IT NE 
 1650 370a 2847     		BXNE	WP
 1651 370c FFF776B9 		_NEXT
 1652              	
 1653              	/*******************************
 1654              	    CMOVE	( b1 b2 u -- )
 1655              	 	Copy u bytes from b1 to b2.
 1656              	********************************/
 1657 3710 F2360000 		_HEADER CMOVE,5,"CMOVE"
 1657      05434D4F 
 1657      564500BF 
 1658 371c 57F8042B 		LDR	T2,[DSP],#4
 1659 3720 57F8043B 		LDR	T3,[DSP],#4
 1660 3724 03E0     		B CMOV1
 1661              	CMOV0:
 1662 3726 13F8015B 		LDRB	WP,[T3],#1
 1663 372a 02F8015B 		STRB	WP,[T2],#1
 1664              	CMOV1:
 1665 372e 3600     		MOVS	TOS,TOS
 1666 3730 02D0     		BEQ	CMOV2
 1667 3732 A6F10106 		SUB	TOS,TOS,#1
 1668 3736 F6E7     		B CMOV0
 1669              	CMOV2:
 1670 3738 57F8046B 		_POP
 1671 373c FFF75EB9 		_NEXT
 1672              	
 1673              	/***************************
 1674              	    MOVE	( a1 a2 u -- )
 1675              	 	Copy u words from a1 to a2.
 1676              	*******************************/
 1677 3740 14370000 		_HEADER MOVE,4,"MOVE"
 1677      044D4F56 
 1677      450000BF 
 1678 374c 4FF00400 		MOV T0,#4 
 1679 3750 06F10306 		ADD TOS,#3 
 1680 3754 26F00306 		BIC TOS,#3
 1681 3758 57F8041B 		LDR	T1,[DSP],#4 // dest
 1682 375c 57F8042B 		LDR	T2,[DSP],#4 // src 
 1683 3760 8A42     		CMP T2,T1 
 1684 3762 08D5     		BPL MOVE1
 1685 3764 6FF00300 		MOV T0,#-4 
ARM GAS  forth.s 			page 134


 1686 3768 3144     		ADD T1,TOS
 1687 376a 3244     		ADD T2,TOS 
 1688 376c 01E0     		B MOVE3
 1689              	MOVE0:
 1690 376e 1568     		LDR	WP,[T2]
 1691 3770 0D60     		STR	WP,[T1]
 1692              	MOVE3: 
 1693 3772 0144     		ADD T1,T0 
 1694 3774 0244     		ADD T2,T0 
 1695              	MOVE1:
 1696 3776 3600     		MOVS TOS,TOS
 1697 3778 02D0     		BEQ	MOVE2
 1698 377a A6F10406 		SUB	TOS,TOS,#4
 1699 377e F6E7     		B MOVE0
 1700              	MOVE2:
 1701 3780 57F8046B 		_POP
 1702 3784 FFF73AB9 		_NEXT
 1703              	
 1704              	/**************************
 1705              	    FILL	( b u c -- )
 1706              	 	Fill u bytes of character
 1707              		c to area beginning at b.
 1708              	******************************/
 1709 3788 44370000 		_HEADER FILL,4,"FILL"
 1709      0446494C 
 1709      4C0000BF 
 1710 3794 03CF     		LDMFD DSP!,{T0,T1} 
 1711 3796 0000     		MOVS T0,T0 
 1712 3798 03D0     		BEQ FILL2
 1713              	FILL1:
 1714 379a 01F8016B 		STRB	TOS,[T1],#1
 1715 379e 0138     		SUBS	T0,T0,#1
 1716 37a0 FBD1     		BNE FILL1
 1717              	FILL2:
 1718 37a2 57F8046B 		_POP
 1719 37a6 FFF729B9 		_NEXT
 1720              	
 1721              	/*****************************
 1722              	    PACK$	( b u a -- a )
 1723              	 	Build a counted word with
 1724              		u characters from b. 
 1725              		Null fill.
 1726              	*****************************/
 1727 37aa 8C370000 		_HEADER PACKS,5,"PACK$"
 1727      05504143 
 1727      4B24
 1728 37b4 504700BF 		_NEST
 1729 37b8 F9350000 		_ADR	ALGND
 1730 37bc 3D2D0000 		_ADR	DUPP
 1731 37c0 B92C0000 		_ADR	TOR		// strings only on cell boundary
 1732 37c4 612D0000 		_ADR	OVER
 1733 37c8 012E0000 		_ADR	PLUS
 1734 37cc 5D2E0000 		_ADR	ONEP 
 1735 37d0 C32B0000 		_DOLIT 	0xFFFFFFFC
 1735      FCFFFFFF 
 1736 37d8 812D0000 		_ADR	ANDD			// count mod cell
 1737 37dc C32B0000 		_DOLIT 	0
ARM GAS  forth.s 			page 135


 1737      00000000 
 1738 37e4 4D2D0000 		_ADR	SWAP
 1739 37e8 352C0000 		_ADR	STORE			// null fill cell
 1740 37ec A52C0000 		_ADR	RAT
 1741 37f0 752F0000 		_ADR	DDUP
 1742 37f4 552C0000 		_ADR	CSTOR
 1743 37f8 5D2E0000 		_ADR	ONEP			// save count
 1744 37fc 4D2D0000 		_ADR	SWAP
 1745 3800 1D370000 		_ADR	CMOVE
 1746 3804 752C0000 		_ADR	RFROM
 1747 3808 032A0000 		_UNNEST   			// move string
 1748              	
 1749              	/***********************************
 1750              	  Numeric output, single precision
 1751              	***********************************/
 1752              	
 1753              	/**************************
 1754              	    DIGIT	( u -- c )
 1755              	 	Convert digit u to 
 1756              		a character.
 1757              	***************************/
 1758 380c AE370000 		_HEADER DIGIT,5,"DIGIT"
 1758      05444947 
 1758      495400BF 
 1759 3818 504700BF 		_NEST
 1760 381c C32B0000 		_DOLIT 9
 1760      09000000 
 1761 3824 612D0000 		_ADR	OVER
 1762 3828 D9300000 		_ADR	LESS
 1763 382c C32B0000 		_DOLIT	7
 1763      07000000 
 1764 3834 812D0000 		_ADR	ANDD
 1765 3838 012E0000 		_ADR	PLUS
 1766 383c C32B0000 		_DOLIT	'0'
 1766      30000000 
 1767 3844 012E0000 		_ADR	PLUS 
 1768 3848 032A0000 		_UNNEST
 1769              	
 1770              	/*********************************
 1771              	    EXTRACT	( ud base -- ud c )
 1772              	 	Extract the least significant
 1773              		digit from positive double.
 1774              	**********************************/
 1775 384c 10380000 		_HEADER EXTRC,7,"EXTRACT"
 1775      07455854 
 1775      52414354 
 1776 3858 504700BF 		_NEST
 1777 385c 81340000 		_ADR	DSLMOD
 1778 3860 252F0000 		_ADR	ROT
 1779 3864 19380000 		_ADR	DIGIT
 1780 3868 032A0000 		_UNNEST
 1781              	
 1782              	/***************************
 1783              	    <#	  ( -- )
 1784              	 	Initiate the numeric
 1785              		output process.
 1786              	****************************/
ARM GAS  forth.s 			page 136


 1787 386c 50380000 		_HEADER BDIGS,2,"<#"
 1787      023C2300 
 1788 3874 504700BF 		_NEST
 1789 3878 C5360000 		_ADR	PAD
 1790 387c AD320000 		_ADR	HLD
 1791 3880 352C0000 		_ADR	STORE
 1792 3884 032A0000 		_UNNEST
 1793              	
 1794              	/*********************************
 1795              	    HOLD	( c -- )
 1796              	 	Insert a character into the 
 1797              		numeric output string.
 1798              	**********************************/
 1799 3888 70380000 		_HEADER HOLD,4,"HOLD"
 1799      04484F4C 
 1799      440000BF 
 1800 3894 504700BF 		_NEST
 1801 3898 AD320000 		_ADR	HLD
 1802 389c 492C0000 		_ADR	AT
 1803 38a0 6D2E0000 		_ADR	ONEM
 1804 38a4 3D2D0000 		_ADR	DUPP
 1805 38a8 AD320000 		_ADR	HLD
 1806 38ac 352C0000 		_ADR	STORE
 1807 38b0 552C0000 		_ADR	CSTOR
 1808 38b4 032A0000 		_UNNEST
 1809              	
 1810              	/***********************
 1811              	    #	   ( ud -- ud )
 1812              	 	Extract one digit 
 1813              		from ud and append 
 1814              		the digit to output 
 1815              		string.
 1816              	*************************/
 1817 38b8 8C380000 		_HEADER DIG,1,"#"
 1817      012300BF 
 1818 38c0 504700BF 		_NEST
 1819 38c4 31320000 		_ADR	BASE
 1820 38c8 492C0000 		_ADR	AT
 1821 38cc 59380000 		_ADR	EXTRC
 1822 38d0 95380000 		_ADR	HOLD
 1823 38d4 032A0000 		_UNNEST
 1824              	
 1825              	/***************************
 1826              	    #S	  ( ud -- 0 )
 1827              	 	Convert ud until all 
 1828              		digits are added to 
 1829              		the output string.
 1830              	***************************/
 1831 38d8 BC380000 		_HEADER DIGS,2,"#S"
 1831      02235300 
 1832 38e0 504700BF 		_NEST
 1833              	DIGS1:
 1834 38e4 C1380000 	    _ADR	DIG
 1835 38e8 752F0000 		_ADR	DDUP
 1836 38ec 952D0000 		_ADR    ORR 
 1837 38f0 032C0000 		_QBRAN 	DIGS2
 1837      00390000 
ARM GAS  forth.s 			page 137


 1838 38f8 172C0000 		_BRAN	DIGS1
 1838      E4380000 
 1839              	DIGS2:
 1840 3900 2D2D0000 		 _ADR DROP 
 1841 3904 032A0000 		 _UNNEST
 1842              	
 1843              	/*********************
 1844              	    SIGN	( n -- )
 1845              	 	Add a minus sign
 1846              		to the numeric
 1847              		output string.
 1848              	*********************/
 1849 3908 DC380000 		_HEADER SIGN,4,"SIGN"
 1849      04534947 
 1849      4E0000BF 
 1850 3914 504700BF 		_NEST
 1851 3918 712D0000 		_ADR	ZLESS
 1852 391c 032C0000 		_QBRAN	SIGN1
 1852      30390000 
 1853 3924 C32B0000 		_DOLIT '-'
 1853      2D000000 
 1854 392c 95380000 		_ADR	HOLD
 1855              	SIGN1:
 1856 3930 032A0000 		  _UNNEST
 1857              	
 1858              	/*************************
 1859              	    #>  ( w -- b u )
 1860              	 	Prepare the output 
 1861              		word to be TYPE'd.
 1862              	************************/
 1863 3934 0C390000 		_HEADER EDIGS,2,"#>"
 1863      02233E00 
 1864 393c 504700BF 		_NEST
 1865 3940 2D2D0000 		_ADR	DROP
 1866 3944 AD320000 		_ADR	HLD
 1867 3948 492C0000 		_ADR	AT
 1868 394c C5360000 		_ADR	PAD
 1869 3950 612D0000 		_ADR	OVER
 1870 3954 112E0000 		_ADR	SUBB
 1871 3958 032A0000 		_UNNEST
 1872              	
 1873              	/**************************
 1874              	    str	 ( n -- b u )
 1875              	 	Convert a signed 
 1876              		integer to a numeric 
 1877              		string.
 1878              	hidden word used by compiler
 1879              	***************************/
 1880              	STRR:
 1881 395c 504700BF 		_NEST
 1882 3960 39340000 		_ADR 	STOD 
 1883 3964 3D2D0000 		_ADR	DUPP
 1884 3968 B92C0000 		_ADR	TOR
 1885 396c A92F0000 		_ADR	DABS
 1886 3970 75380000 		_ADR	BDIGS
 1887 3974 E1380000 		_ADR	DIGS
 1888 3978 752C0000 		_ADR	RFROM
ARM GAS  forth.s 			page 138


 1889 397c 15390000 		_ADR	SIGN
 1890 3980 3D390000 		_ADR	EDIGS
 1891 3984 032A0000 		_UNNEST
 1892              	
 1893              	/*************************
 1894              	    HEX	 ( -- )
 1895              	 	Use radix 16 as 
 1896              		base for numeric 
 1897              		conversions.
 1898              	*************************/
 1899 3988 38390000 		_HEADER HEX,3,"HEX"
 1899      03484558 
 1900 3990 504700BF 		_NEST
 1901 3994 C32B0000 		_DOLIT 16
 1901      10000000 
 1902 399c 31320000 		_ADR	BASE
 1903 39a0 352C0000 		_ADR	STORE
 1904 39a4 032A0000 		_UNNEST
 1905              	
 1906              	/**************************
 1907              		BIN ( -- )
 1908              		Use radix 2 as 
 1909              		base for numeric 
 1910              		conversion 
 1911              	**************************/
 1912 39a8 8C390000 		_HEADER BIN,3,"BIN"
 1912      0342494E 
 1913 39b0 504700BF 		_NEST 
 1914 39b4 C32B0000 		_DOLIT 2 
 1914      02000000 
 1915 39bc 31320000 		_ADR BASE 
 1916 39c0 352C0000 		_ADR STORE
 1917 39c4 032A0000 		_UNNEST 
 1918              	
 1919              	/************************
 1920              	    DECIMAL	( -- )
 1921              	 	Use radix 10 as base
 1922              		for numeric conversions.
 1923              	*************************/
 1924 39c8 AC390000 		_HEADER DECIM,7,"DECIMAL"
 1924      07444543 
 1924      494D414C 
 1925 39d4 504700BF 		_NEST
 1926 39d8 C32B0000 		_DOLIT 10
 1926      0A000000 
 1927 39e0 31320000 		_ADR	BASE
 1928 39e4 352C0000 		_ADR	STORE
 1929 39e8 032A0000 		_UNNEST
 1930              	
 1931              	/************************************
 1932              	  Numeric input, single precision
 1933              	***********************************/
 1934              	
 1935              	/***********************************
 1936              	    DIGIT?	( c base -- u t )
 1937              	 	Convert a character to its 
 1938              		numeric value. A flag 
ARM GAS  forth.s 			page 139


 1939              		indicates success.
 1940              	**********************************/
 1941 39ec CC390000 		_HEADER DIGTQ,6,"DIGIT?"
 1941      06444947 
 1941      49543F00 
 1942 39f8 504700BF 		_NEST
 1943 39fc B92C0000 		_ADR	TOR
 1944 3a00 C32B0000 		_DOLIT 	'0'
 1944      30000000 
 1945 3a08 112E0000 		_ADR	SUBB
 1946 3a0c C32B0000 		_DOLIT 9
 1946      09000000 
 1947 3a14 612D0000 		_ADR	OVER
 1948 3a18 D9300000 		_ADR	LESS
 1949 3a1c 032C0000 		_QBRAN	DGTQ1
 1949      443A0000 
 1950 3a24 C32B0000 		_DOLIT 7
 1950      07000000 
 1951 3a2c 112E0000 		_ADR	SUBB
 1952 3a30 3D2D0000 		_ADR	DUPP
 1953 3a34 C32B0000 		_DOLIT	10
 1953      0A000000 
 1954 3a3c D9300000 		_ADR	LESS
 1955 3a40 952D0000 		_ADR	ORR
 1956              	DGTQ1:
 1957 3a44 3D2D0000 		_ADR	DUPP
 1958 3a48 752C0000 		_ADR	RFROM
 1959 3a4c C1300000 		_ADR	ULESS
 1960 3a50 032A0000 		_UNNEST
 1961              	
 1962              	/***********************************
 1963              	 parse digits of positive integer 
 1964              	  d digits count 
 1965              	  n parsed integer
 1966              	  a+ updated pointer  
 1967              	************************************/
 1968              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1969 3a54 504700BF 	    _NEST
 1970 3a58 31320000 	    _ADR BASE 
 1971 3a5c 492C0000 	    _ADR AT 
 1972 3a60 B92C0000 	    _ADR TOR
 1973 3a64 91310000 	1:  _ADR COUNT 
 1974 3a68 A52C0000 	    _ADR RAT 
 1975 3a6c F9390000 	    _ADR DIGTQ // d n a c f 
 1976 3a70 032C0000 	    _QBRAN 4f
 1976      E03A0000 
 1977 3a78 252F0000 	    _ADR ROT 
 1978 3a7c A52C0000 		_ADR RAT 
 1979 3a80 352E0000 	    _ADR UMSTA 
 1980 3a84 032C0000 		_QBRAN 2f // overflow control
 1980      943A0000 
 1981 3a8c 172C0000 		_BRAN 3f 
 1981      C83A0000 
 1982 3a94 3D2D0000 	2:	_ADR DUPP 
 1983 3a98 712D0000 		_ADR ZLESS // if 0< is overflow 
 1984 3a9c 032C0000 		_QBRAN 2f 
 1984      AC3A0000 
ARM GAS  forth.s 			page 140


 1985 3aa4 172C0000 		_BRAN 3f 
 1985      C83A0000 
 1986 3aac 012E0000 	2:  _ADR PLUS // d a n 
 1987 3ab0 4D2D0000 	    _ADR SWAP // d n a  
 1988 3ab4 252F0000 	    _ADR ROT 
 1989 3ab8 5D2E0000 	    _ADR ONEP 
 1990 3abc 392F0000 	    _ADR NROT
 1991 3ac0 172C0000 	    _BRAN 1b 
 1991      643A0000 
 1992 3ac8 95460000 	3:  _ABORQ 16, " number too big "
 1992      10206E75 
 1992      6D626572 
 1992      20746F6F 
 1992      20626967 
 1993 3ae0 2D2D0000 	4:  _ADR DROP 
 1994 3ae4 6D2E0000 	    _ADR ONEM  // decrement a 
 1995 3ae8 752C0000 	    _ADR RFROM 
 1996 3aec 2D2D0000 	    _ADR DROP 
 1997 3af0 032A0000 	    _UNNEST 
 1998              	
 1999              	/**************************
 2000              	 CHAR? 
 2001              	 check for charcter c 
 2002              	 move pointer if *a==c  
 2003              	**************************/
 2004              	CHARQ: // ( a c -- a+ t | a f )
 2005 3af4 3868     	    ldr T0,[DSP]
 2006 3af6 10F8011B 	    ldrb T1,[T0],#1 
 2007 3afa 3246     	    mov T2,TOS 
 2008 3afc 86EA0606 	    eor TOS,TOS
 2009 3b00 9142     	    cmp T1,T2
 2010 3b02 02D1     	    bne 1f 
 2011 3b04 3860     	    str T0,[DSP]
 2012 3b06 6FEA0606 	    mvn TOS,TOS  
 2013 3b0a FEF777BF 	1:  _NEXT
 2014              	
 2015              	/*********************************
 2016              	   NEG? ( a -- a|a+  f|t )
 2017              	   skip '-'|'+' return -1 if '-' 
 2018              	   else return 0 
 2019              	*********************************/
 2020              	NEGQ: 
 2021 3b0e 504700BF 	    _NEST 
 2022 3b12 C32B0000 	    _DOLIT '-' 
 2022      2D000000 
 2023 3b1a F53A0000 	    _ADR CHARQ
 2024 3b1e 3D2D0000 	    _ADR DUPP  
 2025 3b22 032C0000 	    _QBRAN 1f
 2025      323B0000 
 2026 3b2a 172C0000 	    _BRAN 2f
 2026      4A3B0000 
 2027 3b32 4D2D0000 	1:  _ADR SWAP 
 2028 3b36 C32B0000 	    _DOLIT '+'
 2028      2B000000 
 2029 3b3e F53A0000 	    _ADR CHARQ
 2030 3b42 2D2D0000 	    _ADR DROP  
 2031 3b46 4D2D0000 		_ADR SWAP 
ARM GAS  forth.s 			page 141


 2032 3b4a 032A0000 	2:  _UNNEST 
 2033              	
 2034              	
 2035              	/**********************************
 2036              	    INT?	( a -- n T | a F )
 2037              	 	parse string  at 'a' for 
 2038              		integer. Push a flag on TOS.
 2039              		integer form:
 2040              			[-]hex_digit+  | 
 2041              			$[-]hex_digit+ |
 2042              			%[-]bin_digit+ | 
 2043              			[-]dec_digit+ 
 2044              	**********************************/
 2045 3b4e F0390000 		_HEADER INTQ,4,"INT?"
 2045      04494E54 
 2045      3F00
 2046 3b58 504700BF 		_NEST
 2047              	// save BASE 	
 2048 3b5c 31320000 		_ADR	BASE
 2049 3b60 492C0000 		_ADR	AT
 2050 3b64 B92C0000 		_ADR	TOR
 2051 3b68 C32B0000 		_DOLIT	0      // a 0 
 2051      00000000 
 2052 3b70 612D0000 		_ADR	OVER   // a 0 a 
 2053 3b74 91310000 		_ADR	COUNT  // a 0 a+ cnt 
 2054 3b78 4D2D0000 		_ADR    SWAP   
 2055 3b7c C32B0000 		_DOLIT  '$' 
 2055      24000000 
 2056 3b84 F53A0000 		_ADR    CHARQ 
 2057 3b88 032C0000 		_QBRAN  0f 
 2057      9C3B0000 
 2058              	// hexadecimal number 
 2059 3b90 91390000 		_ADR    HEX
 2060 3b94 172C0000 		_BRAN   1f 
 2060      B43B0000 
 2061 3b9c C32B0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2061      25000000 
 2062 3ba4 F53A0000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2063 3ba8 032C0000 		_QBRAN  2f
 2063      C03B0000 
 2064 3bb0 B1390000 		_ADR	BIN 
 2065              	1:	// decrement cnt 
 2066 3bb4 4D2D0000 	    _ADR	SWAP 
 2067 3bb8 6D2E0000 		_ADR	ONEM 
 2068 3bbc 4D2D0000 		_ADR	SWAP  // -- a 0 cnt- a  
 2069              	2: // check if negative number 
 2070 3bc0 3D2D0000 		_ADR    DUPP 
 2071 3bc4 0F3B0000 		_ADR    NEGQ 
 2072 3bc8 B92C0000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2073 3bcc 3D2D0000 		_ADR    DUPP 
 2074 3bd0 252F0000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2075 3bd4 112E0000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2076 3bd8 032C0000 		_QBRAN  2f  
 2076      EC3B0000 
 2077 3be0 4D2D0000 		_ADR    SWAP  // -- a 0 a cnt 
 2078 3be4 6D2E0000 		_ADR    ONEM  // -- a 0 a cnt--
 2079 3be8 4D2D0000 		_ADR    SWAP   
ARM GAS  forth.s 			page 142


 2080 3bec 4D2D0000 	2:  _ADR    SWAP 
 2081 3bf0 B92C0000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2082 3bf4 C32B0000 		_DOLIT  0
 2082      00000000 
 2083 3bfc 3D2D0000 		_ADR	DUPP 
 2084 3c00 252F0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2085 3c04 553A0000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2086 3c08 2D2D0000 		_ADR	DROP // a 0 d n 
 2087 3c0c 4D2D0000 		_ADR	SWAP  // a 0 n d 
 2088 3c10 752C0000 		_ADR	RFROM // a 0 n d cnt  
 2089 3c14 89300000 		_ADR	EQUAL // d == cnt ? 
 2090 3c18 032C0000 		_QBRAN  5f // digits left, not an integer 
 2090      483C0000 
 2091 3c20 752C0000 	2:	_ADR	RFROM  // sign 
 2092 3c24 032C0000 		_QBRAN  3f   // positive integer 
 2092      303C0000 
 2093 3c2c 21300000 		_ADR	NEGAT
 2094              	3:	
 2095 3c30 392F0000 		_ADR	NROT  // n a 0 
 2096 3c34 4D2F0000 		_ADR	DDROP // n  
 2097 3c38 C32B0000 		_DOLIT  -1    // n -1 
 2097      FFFFFFFF 
 2098 3c40 172C0000 		_BRAN   7f  
 2098      503C0000 
 2099 3c48 752C0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2100 3c4c 4D2F0000 	    _ADR	DDROP 
 2101              	7: // restore BASE 
 2102 3c50 752C0000 		_ADR	RFROM
 2103 3c54 31320000 		_ADR	BASE
 2104 3c58 352C0000 		_ADR	STORE
 2105 3c5c 032A0000 		_UNNEST
 2106              	
 2107              	/********************************
 2108              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 2109              	    parse number, integer or float 
 2110              	    if not a number return ( a 0 ) 
 2111              	    if integer return ( int -1 ) 
 2112              	    if float return ( float -2 )
 2113              	**********************************/
 2114 3c60 523B0000 	    _HEADER NUMBER,6,"NUMBER"
 2114      064E554D 
 2114      42455200 
 2115 3c6c 504700BF 	    _NEST 
 2116 3c70 593B0000 	    _ADR INTQ
 2117 3c74 112F0000 	    _ADR QDUP 
 2118 3c78 032C0000 	    _QBRAN 2f 
 2118      843C0000 
 2119 3c80 032A0000 	    _UNNEST 
 2120 3c84 99240000 	2:  _ADR FLOATQ
 2121 3c88 032A0000 	    _UNNEST 
 2122              	
 2123              	
 2124              	/********************
 2125              	  console I/O
 2126              	********************/
 2127              	
 2128              	/**********************
ARM GAS  forth.s 			page 143


 2129              	    SPACE	( -- )
 2130              	 	Send the blank 
 2131              		character to 
 2132              		the output device.
 2133              	************************/
 2134 3c8c 643C0000 		_HEADER SPACE,5,"SPACE"
 2134      05535041 
 2134      434500BF 
 2135 3c98 504700BF 		_NEST
 2136 3c9c BD2E0000 		_ADR	BLANK
 2137 3ca0 CD2A0000 		_ADR	EMIT
 2138 3ca4 032A0000 		_UNNEST
 2139              	
 2140              	/***************************
 2141              	    SPACES	( +n -- )
 2142              	 	Send n spaces to the 
 2143              		output device.
 2144              	****************************/
 2145 3ca8 903C0000 		_HEADER SPACS,6,"SPACES"
 2145      06535041 
 2145      43455300 
 2146 3cb4 504700BF 		_NEST
 2147 3cb8 C32B0000 		_DOLIT	0
 2147      00000000 
 2148 3cc0 21310000 		_ADR	MAX
 2149 3cc4 B92C0000 		_ADR	TOR
 2150 3cc8 172C0000 		_BRAN	CHAR2
 2150      D43C0000 
 2151              	CHAR1:
 2152 3cd0 993C0000 		_ADR	SPACE
 2153              	CHAR2:
 2154 3cd4 E52B0000 		_DONXT	CHAR1
 2154      D03C0000 
 2155 3cdc 032A0000 		_UNNEST
 2156              	
 2157              	/***********************
 2158              	    TYPE	( b u -- )
 2159              	 	Output u characters 
 2160              		from b.
 2161              	************************/
 2162 3ce0 AC3C0000 		_HEADER TYPEE,4,"TYPE"
 2162      04545950 
 2162      450000BF 
 2163 3cec 504700BF 		_NEST
 2164 3cf0 B92C0000 		_ADR  TOR   // ( a+1 -- R: u )
 2165 3cf4 172C0000 		_BRAN	TYPE2
 2165      083D0000 
 2166              	TYPE1:  
 2167 3cfc 91310000 		_ADR  COUNT
 2168 3d00 15360000 		_ADR TCHAR
 2169 3d04 CD2A0000 		_ADR EMIT
 2170              	TYPE2:  
 2171 3d08 E52B0000 		_DONXT	TYPE1
 2171      FC3C0000 
 2172 3d10 2D2D0000 		_ADR	DROP
 2173 3d14 032A0000 		_UNNEST
 2174              	
ARM GAS  forth.s 			page 144


 2175              	/***************************
 2176              	    CR	  ( -- )
 2177              	 	Output a carriage return
 2178              		and a line feed.
 2179              	****************************/
 2180 3d18 E43C0000 		_HEADER CR,2,"CR"
 2180      02435200 
 2181 3d20 504700BF 		_NEST
 2182 3d24 C32B0000 		_DOLIT	CRR
 2182      0D000000 
 2183 3d2c CD2A0000 		_ADR	EMIT
 2184 3d30 C32B0000 		_DOLIT	LF
 2184      0A000000 
 2185 3d38 CD2A0000 		_ADR	EMIT
 2186 3d3c 032A0000 		_UNNEST
 2187              	
 2188              	/******************************************
 2189              	  do_$	( -- a )
 2190              	  Return the address of a compiled string.
 2191              	  adjust return address to skip over it.
 2192              	hidden word used by compiler. 
 2193              	******************************************/
 2194              	DOSTR:
 2195 3d40 504700BF 		_NEST     
 2196              	/* compiled string address is 2 levels deep */
 2197 3d44 752C0000 		_ADR	RFROM	// { -- a1 }
 2198 3d48 752C0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2199 3d4c 3D2D0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2200 3d50 91310000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2201 3d54 012E0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2202 3d58 F9350000 		_ADR	ALGND	//  end of string
 2203              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2204 3d5c B92C0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2205 3d60 4D2D0000 		_ADR	SWAP	//  count tugged
 2206 3d64 B92C0000 		_ADR	TOR     //  ( -- a2) is string address
 2207 3d68 032A0000 		_UNNEST
 2208              	
 2209              	/******************************************
 2210              	    $"|	( -- a )
 2211              	 	Run time routine compiled by _". 
 2212              		Return address of a compiled string.
 2213              	hidden word used by compiler
 2214              	*****************************************/
 2215              	STRQP:
 2216 3d6c 504700BF 		_NEST
 2217 3d70 413D0000 		_ADR	DOSTR
 2218 3d74 032A0000 		_UNNEST			// force a call to dostr
 2219              	
 2220              	/*******************************
 2221              	    .$	( a -- )
 2222              	 	Run time routine of ." 
 2223              		Output a compiled string.
 2224              	hidden word used by compiler
 2225              	*******************************/
 2226              	DOTST:
 2227 3d78 504700BF 		_NEST
 2228 3d7c 91310000 		_ADR	COUNT // ( -- a+1 c )
ARM GAS  forth.s 			page 145


 2229 3d80 ED3C0000 		_ADR	TYPEE
 2230 3d84 032A0000 		_UNNEST
 2231              	
 2232              	/**********************
 2233              	    ."|	( -- )
 2234              	 	Run time routine of ." 
 2235              		Output a compiled string.
 2236              	hidden word used by compiler
 2237              	*****************************/
 2238              	DOTQP:
 2239 3d88 504700BF 		_NEST
 2240 3d8c 413D0000 		_ADR	DOSTR
 2241 3d90 793D0000 		_ADR	DOTST
 2242 3d94 032A0000 		_UNNEST
 2243              	
 2244              	/******************************
 2245              	    .R	  ( n +n -- )
 2246              	 	Display an integer in a 
 2247              		field of n columns, 
 2248              		right justified.
 2249              	*******************************/
 2250 3d98 1C3D0000 		_HEADER DOTR,2,".R"
 2250      022E5200 
 2251 3da0 504700BF 		_NEST
 2252 3da4 B92C0000 		_ADR	TOR
 2253 3da8 5D390000 		_ADR	STRR
 2254 3dac 752C0000 		_ADR	RFROM
 2255 3db0 612D0000 		_ADR	OVER
 2256 3db4 112E0000 		_ADR	SUBB
 2257 3db8 B53C0000 		_ADR	SPACS
 2258 3dbc ED3C0000 		_ADR	TYPEE
 2259 3dc0 032A0000 		_UNNEST
 2260              	
 2261              	/*************************
 2262              	    U.R	 ( u +n -- )
 2263              	 	Display an unsigned 
 2264              		integer in n column, 
 2265              		right justified.
 2266              	***************************/
 2267 3dc4 9C3D0000 		_HEADER UDOTR,3,"U.R"
 2267      03552E52 
 2268 3dcc 504700BF 		_NEST
 2269 3dd0 4D2D0000 		_ADR	SWAP 
 2270 3dd4 C32B0000 		_DOLIT 	0 
 2270      00000000 
 2271 3ddc 252F0000 		_ADR	ROT 
 2272 3de0 B92C0000 		_ADR	TOR
 2273 3de4 75380000 		_ADR	BDIGS
 2274 3de8 E1380000 		_ADR	DIGS
 2275 3dec 3D390000 		_ADR	EDIGS
 2276 3df0 752C0000 		_ADR	RFROM
 2277 3df4 612D0000 		_ADR	OVER
 2278 3df8 112E0000 		_ADR	SUBB
 2279 3dfc B53C0000 		_ADR	SPACS
 2280 3e00 ED3C0000 		_ADR	TYPEE
 2281 3e04 032A0000 		_UNNEST
 2282              	
ARM GAS  forth.s 			page 146


 2283              	/************************
 2284              	    U.	  ( u -- )
 2285              	 	Display an unsigned 
 2286              		integer in free format.
 2287              	***************************/
 2288 3e08 C83D0000 		_HEADER UDOT,2,"U."
 2288      02552E00 
 2289 3e10 504700BF 		_NEST
 2290 3e14 C32B0000 		_DOLIT  0 
 2290      00000000 
 2291 3e1c 75380000 		_ADR	BDIGS
 2292 3e20 E1380000 		_ADR	DIGS
 2293 3e24 3D390000 		_ADR	EDIGS
 2294 3e28 ED3C0000 		_ADR	TYPEE
 2295 3e2c 032A0000 		_UNNEST
 2296              	
 2297              	/************************
 2298              	    .	   ( w -- )
 2299              	 	Display an integer 
 2300              		in free format, 
 2301              		preceeded by a space.
 2302              	**************************/
 2303 3e30 0C3E0000 		_HEADER DOT,1,"."
 2303      012E00BF 
 2304 3e38 504700BF 		_NEST
 2305 3e3c 993C0000 		_ADR    SPACE 
 2306 3e40 31320000 		_ADR	BASE
 2307 3e44 492C0000 		_ADR	AT
 2308 3e48 3D2D0000 		_ADR    DUPP 
 2309 3e4c C32B0000 		_DOLIT  16 
 2309      10000000 
 2310 3e54 89300000 		_ADR    EQUAL 
 2311 3e58 032C0000 		_QBRAN  1f 
 2311      6C3E0000 
 2312 3e60 C32B0000 		_DOLIT '$'
 2312      24000000 
 2313 3e68 CD2A0000 		_ADR    EMIT
 2314 3e6c 3D2D0000 	1:  _ADR    DUPP 
 2315 3e70 C32B0000 		_DOLIT  2 
 2315      02000000 
 2316 3e78 89300000 		_ADR    EQUAL 
 2317 3e7c 032C0000 		_QBRAN  1f 
 2317      903E0000 
 2318 3e84 C32B0000 		_DOLIT  '%'
 2318      25000000 
 2319 3e8c CD2A0000 		_ADR    EMIT 	 
 2320 3e90 C32B0000 	1:	_DOLIT  10
 2320      0A000000 
 2321 3e98 A92D0000 		_ADR	XORR			// ?decimal
 2322 3e9c 032C0000 		_QBRAN	DOT1
 2322      AC3E0000 
 2323 3ea4 113E0000 		_ADR	UDOT
 2324 3ea8 032A0000 		_UNNEST			// no,display unsigned
 2325              	DOT1:
 2326 3eac 5D390000 	    _ADR	STRR
 2327 3eb0 ED3C0000 		_ADR	TYPEE
 2328 3eb4 032A0000 		_UNNEST			// yes, display signed
ARM GAS  forth.s 			page 147


 2329              	
 2330              	/*************************
 2331              	  D>A ( buf size d -- p u)
 2332              	  convert double integer to 
 2333              	  ASCII string  
 2334              	input:
 2335              		buf  pointer to buffer 
 2336              		size length of buffer 
 2337              		d    int64 to convert 
 2338              	output:
 2339              		p     pointer to string  
 2340              		u     string length 
 2341              	**************************/
 2342 3eb8 343E0000 		_HEADER DTOA,3,"D>A" 
 2342      03443E41 
 2343 3ec0 504700BF 		_NEST 
 2344 3ec4 CD2C0000 		_ADR DTOR  // ( buf size r: d )
 2345 3ec8 012E0000 		_ADR PLUS   
 2346 3ecc 3D2D0000 		_ADR DUPP  // ( bend bend r: d )
 2347 3ed0 AD320000 		_ADR HLD 
 2348 3ed4 352C0000 		_ADR STORE 
 2349 3ed8 892C0000 		_ADR DRFROM 
 2350 3edc 3D2D0000 	    _ADR DUPP 
 2351 3ee0 B92C0000 		_ADR TOR 
 2352 3ee4 A92F0000 		_ADR DABS 
 2353 3ee8 E1380000 		_ADR DIGS 
 2354 3eec 752C0000 		_ADR RFROM 
 2355 3ef0 15390000 		_ADR SIGN  
 2356 3ef4 2D2D0000 		_ADR DROP  // ( buf -- )
 2357 3ef8 31320000 		_ADR BASE 
 2358 3efc 492C0000 		_ADR AT 
 2359 3f00 C32B0000 		_DOLIT 16 
 2359      10000000 
 2360 3f08 89300000 		_ADR EQUAL 
 2361 3f0c 032C0000 		_QBRAN 1f 
 2361      203F0000 
 2362 3f14 C32B0000 		_DOLIT '$'
 2362      24000000 
 2363 3f1c 95380000 		_ADR HOLD 
 2364 3f20 AD320000 	1:  _ADR HLD
 2365 3f24 492C0000 		_ADR AT
 2366 3f28 4D2D0000 		_ADR SWAP 
 2367 3f2c 612D0000 		_ADR OVER 
 2368 3f30 112E0000 		_ADR SUBB 
 2369 3f34 032A0000 		_UNNEST 
 2370              	
 2371              	
 2372              	/*************************
 2373              	   D. ( d -- )
 2374              	   display double integer 
 2375              	**************************/
 2376 3f38 BC3E0000 		_HEADER DDOT,2,"D."
 2376      02442E00 
 2377 3f40 504700BF 		_NEST
 2378 3f44 31320000 		_ADR BASE 
 2379 3f48 492C0000 		_ADR AT 
 2380 3f4c 3D2D0000 		_ADR DUPP 
ARM GAS  forth.s 			page 148


 2381 3f50 B92C0000 		_ADR TOR 
 2382 3f54 C32B0000 		_DOLIT 10 
 2382      0A000000 
 2383 3f5c D9300000 		_ADR LESS 
 2384 3f60 032C0000 		_QBRAN 1f 
 2384      783F0000 
 2385 3f68 C32B0000 		_DOLIT 10 
 2385      0A000000 
 2386 3f70 31320000 		_ADR BASE 
 2387 3f74 352C0000 		_ADR STORE 
 2388 3f78 31320000 	1:  _ADR BASE 
 2389 3f7c 492C0000 		_ADR AT 
 2390 3f80 C32B0000 		_DOLIT 16 
 2390      10000000 
 2391 3f88 89300000 		_ADR EQUAL 	
 2392 3f8c 3D2D0000 		_ADR DUPP 
 2393 3f90 B92C0000 		_ADR TOR 
 2394 3f94 A92F0000 		_ADR DABS 
 2395 3f98 75380000 		_ADR BDIGS
 2396 3f9c E1380000 		_ADR DIGS 
 2397 3fa0 752C0000 		_ADR RFROM
 2398 3fa4 15390000 		_ADR SIGN 
 2399 3fa8 3D390000 		_ADR EDIGS
 2400 3fac 993C0000 		_ADR SPACE 
 2401 3fb0 ED3C0000 		_ADR TYPEE
 2402 3fb4 752C0000 		_ADR RFROM 
 2403 3fb8 31320000 		_ADR BASE 
 2404 3fbc 352C0000 		_ADR STORE  
 2405 3fc0 032A0000 		_UNNEST 
 2406              	
 2407              	
 2408              	/***********************
 2409              		H. ( w -- )
 2410              		display integer 
 2411              		in hexadecimal 
 2412              	*********************/
 2413 3fc4 3C3F0000 		_HEADER HDOT,2,"H."
 2413      02482E00 
 2414 3fcc 504700BF 		_NEST 
 2415 3fd0 31320000 		_ADR BASE
 2416 3fd4 492C0000 		_ADR AT 
 2417 3fd8 4D2D0000 		_ADR SWAP
 2418 3fdc 91390000 		_ADR HEX
 2419 3fe0 C32B0000 		_DOLIT 0 
 2419      00000000 
 2420 3fe8 75380000 		_ADR BDIGS
 2421 3fec E1380000 		_ADR DIGS
 2422 3ff0 3D390000 		_ADR EDIGS
 2423 3ff4 993C0000 		_ADR SPACE
 2424 3ff8 C32B0000 		_DOLIT '$'
 2424      24000000 
 2425 4000 CD2A0000 		_ADR EMIT 
 2426 4004 ED3C0000 		_ADR TYPEE
 2427 4008 31320000 		_ADR BASE
 2428 400c 352C0000 		_ADR STORE  
 2429 4010 032A0000 		_UNNEST 
 2430              	
ARM GAS  forth.s 			page 149


 2431              	
 2432              	/***********************
 2433              	    ?	   ( a -- )
 2434              	 	Display the contents
 2435              		in a memory cell.
 2436              	*************************/
 2437 4014 C83F0000 		_HEADER QUEST,1,"?"
 2437      013F00BF 
 2438 401c 504700BF 		_NEST
 2439 4020 492C0000 		_ADR	AT
 2440 4024 393E0000 		_ADR	DOT
 2441 4028 032A0000 		_UNNEST
 2442              	
 2443              	/**************
 2444              	  Parsing
 2445              	***************/
 2446              	
 2447              	/*********************************************
 2448              	    parse	( b u c -- b u delta //  string> )
 2449              	 	Scan word delimited by c. 
 2450              		Return found string and its offset.
 2451              	hidden word used by PARSE
 2452              	**********************************************/
 2453              	PARS:
 2454 402c 504700BF 		_NEST
 2455 4030 3D320000 		_ADR	TEMP
 2456 4034 352C0000 		_ADR	STORE
 2457 4038 612D0000 		_ADR	OVER
 2458 403c B92C0000 		_ADR	TOR
 2459 4040 3D2D0000 		_ADR	DUPP
 2460 4044 032C0000 		_QBRAN	PARS8
 2460      40410000 
 2461 404c 6D2E0000 		_ADR	ONEM
 2462 4050 3D320000 		_ADR	TEMP
 2463 4054 492C0000 		_ADR	AT
 2464 4058 BD2E0000 		_ADR	BLANK
 2465 405c 89300000 		_ADR	EQUAL
 2466 4060 032C0000 		_QBRAN	PARS3
 2466      B4400000 
 2467 4068 B92C0000 		_ADR	TOR
 2468              	PARS1:
 2469 406c BD2E0000 		_ADR	BLANK
 2470 4070 612D0000 		_ADR	OVER
 2471 4074 692C0000 		_ADR	CAT	 // skip leading blanks 
 2472 4078 112E0000 		_ADR	SUBB
 2473 407c 712D0000 		_ADR	ZLESS
 2474 4080 0D300000 		_ADR	INVER
 2475 4084 032C0000 		_QBRAN	PARS2
 2475      B0400000 
 2476 408c 5D2E0000 		_ADR	ONEP
 2477 4090 E52B0000 		_DONXT	PARS1
 2477      6C400000 
 2478 4098 752C0000 		_ADR	RFROM
 2479 409c 2D2D0000 		_ADR	DROP
 2480 40a0 C32B0000 		_DOLIT	0
 2480      00000000 
 2481 40a8 3D2D0000 		_ADR	DUPP
ARM GAS  forth.s 			page 150


 2482 40ac 032A0000 		_UNNEST
 2483              	PARS2:
 2484 40b0 752C0000 		_ADR	RFROM
 2485              	PARS3:
 2486 40b4 612D0000 		_ADR	OVER
 2487 40b8 4D2D0000 		_ADR	SWAP
 2488 40bc B92C0000 		_ADR	TOR
 2489              	PARS4:
 2490 40c0 3D320000 		_ADR	TEMP
 2491 40c4 492C0000 		_ADR	AT
 2492 40c8 612D0000 		_ADR	OVER
 2493 40cc 692C0000 		_ADR	CAT
 2494 40d0 112E0000 		_ADR	SUBB // scan for delimiter
 2495 40d4 3D320000 		_ADR	TEMP
 2496 40d8 492C0000 		_ADR	AT
 2497 40dc BD2E0000 		_ADR	BLANK
 2498 40e0 89300000 		_ADR	EQUAL
 2499 40e4 032C0000 		_QBRAN	PARS5
 2499      F0400000 
 2500 40ec 712D0000 		_ADR	ZLESS
 2501              	PARS5:
 2502 40f0 032C0000 		_QBRAN	PARS6
 2502      14410000 
 2503 40f8 5D2E0000 		_ADR	ONEP
 2504 40fc E52B0000 		_DONXT	PARS4
 2504      C0400000 
 2505 4104 3D2D0000 		_ADR	DUPP
 2506 4108 B92C0000 		_ADR	TOR
 2507 410c 172C0000 		_BRAN	PARS7
 2507      28410000 
 2508              	PARS6:
 2509 4114 752C0000 		_ADR	RFROM
 2510 4118 2D2D0000 		_ADR	DROP
 2511 411c 3D2D0000 		_ADR	DUPP
 2512 4120 5D2E0000 		_ADR	ONEP
 2513 4124 B92C0000 		_ADR	TOR
 2514              	PARS7:
 2515 4128 612D0000 		_ADR	OVER
 2516 412c 112E0000 		_ADR	SUBB
 2517 4130 752C0000 		_ADR	RFROM
 2518 4134 752C0000 		_ADR	RFROM
 2519 4138 112E0000 		_ADR	SUBB
 2520 413c 032A0000 		_UNNEST
 2521              	PARS8:
 2522 4140 612D0000 		_ADR	OVER
 2523 4144 752C0000 		_ADR	RFROM
 2524 4148 112E0000 		_ADR	SUBB
 2525 414c 032A0000 		_UNNEST
 2526              	
 2527              	/************************************
 2528              	    PARSE	( c -- b u //  string> )
 2529              	 	Scan input stream and return 
 2530              		counted string delimited by c.
 2531              	************************************/
 2532 4150 18400000 		_HEADER PARSE,5,"PARSE"
 2532      05504152 
 2532      534500BF 
ARM GAS  forth.s 			page 151


 2533 415c 504700BF 		_NEST
 2534 4160 B92C0000 		_ADR	TOR
 2535 4164 E5360000 		_ADR	TIB
 2536 4168 69320000 		_ADR	INN
 2537 416c 492C0000 		_ADR	AT
 2538 4170 012E0000 		_ADR	PLUS			// current input buffer pointer
 2539 4174 81320000 		_ADR	NTIB
 2540 4178 492C0000 		_ADR	AT
 2541 417c 69320000 		_ADR	INN
 2542 4180 492C0000 		_ADR	AT
 2543 4184 112E0000 		_ADR	SUBB			// remaining count
 2544 4188 752C0000 		_ADR	RFROM
 2545 418c 2D400000 		_ADR	PARS
 2546 4190 69320000 		_ADR	INN
 2547 4194 49310000 		_ADR	PSTOR
 2548 4198 032A0000 		_UNNEST
 2549              	
 2550              	/*******************************
 2551              	    .(	  ( -- )
 2552              	 	Output following string 
 2553              		up to next ) .
 2554              	******************************/
 2555 419c 54410000 		_HEADER DOTPR,2,".("
 2555      022E2800 
 2556 41a4 504700BF 		_NEST
 2557 41a8 C32B0000 		_DOLIT	')'
 2557      29000000 
 2558 41b0 5D410000 		_ADR	PARSE
 2559 41b4 ED3C0000 		_ADR	TYPEE
 2560 41b8 032A0000 		_UNNEST
 2561              	
 2562              	/************************
 2563              	    (	   ( -- )
 2564              	 	Ignore following 
 2565              		string up to next )
 2566              		A comment.
 2567              	************************/
 2568 41bc A0410000 		_HEADER PAREN,IMEDD+1,"("
 2568      812800BF 
 2569 41c4 504700BF 		_NEST
 2570 41c8 C32B0000 		_DOLIT	')'
 2570      29000000 
 2571 41d0 5D410000 		_ADR	PARSE
 2572 41d4 4D2F0000 		_ADR	DDROP
 2573 41d8 032A0000 		_UNNEST
 2574              	
 2575              	/*******************
 2576              	    \	   ( -- )
 2577              	 	Ignore following 
 2578              		text till the 
 2579              		end of line.
 2580              	********************/
 2581 41dc C0410000 		_HEADER BKSLA,IMEDD+1,"\\"
 2581      815C00BF 
 2582 41e4 504700BF 		_NEST
 2583 41e8 81320000 		_ADR	NTIB
 2584 41ec 492C0000 		_ADR	AT
ARM GAS  forth.s 			page 152


 2585 41f0 69320000 		_ADR	INN
 2586 41f4 352C0000 		_ADR	STORE
 2587 41f8 032A0000 		_UNNEST
 2588              	
 2589              	/******************************
 2590              	    CHAR	( -- c )
 2591              	 	Parse next word and
 2592              		return its first character.
 2593              	*******************************/
 2594 41fc E0410000 		_HEADER CHAR,4,"CHAR"
 2594      04434841 
 2594      520000BF 
 2595 4208 504700BF 		_NEST
 2596 420c BD2E0000 		_ADR	BLANK
 2597 4210 5D410000 		_ADR	PARSE
 2598 4214 2D2D0000 		_ADR	DROP
 2599 4218 692C0000 		_ADR	CAT
 2600 421c 032A0000 		_UNNEST
 2601              	
 2602              	/**********************************
 2603              		[CHAR] ( -- c )
 2604              		immediate version of CHAR 
 2605              	**********************************/
 2606 4220 00420000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2606      C65B4348 
 2606      41525D00 
 2607 422c 504700BF 		_NEST 
 2608 4230 09420000 		_ADR CHAR
 2609 4234 55490000 		_ADR LITER 
 2610 4238 032A0000 		_UNNEST 
 2611              	
 2612              	/**********************************
 2613              	    WORD	( c -- a //  string> )
 2614              	 	Parse a word from input stream
 2615              		and copy it to code dictionary.
 2616              	***********************************/
 2617 423c 24420000 		_HEADER WORDD,4,"WORD"
 2617      04574F52 
 2617      440000BF 
 2618 4248 504700BF 		_NEST
 2619 424c 5D410000 		_ADR	PARSE
 2620 4250 AD360000 		_ADR	HERE
 2621 4254 9D2E0000 		_ADR	CELLP
 2622 4258 B5370000 		_ADR	PACKS
 2623 425c 032A0000 		_UNNEST
 2624              	
 2625              	/********************************
 2626              	    TOKEN	( -- a //  string> )
 2627              	 	Parse a word from input 
 2628              		stream and copy it to 
 2629              		name dictionary.
 2630              	*********************************/
 2631 4260 40420000 		_HEADER TOKEN,5,"TOKEN"
 2631      05544F4B 
 2631      454E00BF 
 2632 426c 504700BF 		_NEST
 2633 4270 BD2E0000 		_ADR	BLANK
ARM GAS  forth.s 			page 153


 2634 4274 49420000 		_ADR	WORDD
 2635 4278 61440000 		_ADR	UPPER 
 2636 427c 032A0000 		_UNNEST
 2637              	
 2638              	/**********************
 2639              	  Dictionary search
 2640              	***********************/
 2641              	
 2642              	/*************************
 2643              	    NAME>	( na -- ca )
 2644              	 	Return a code address
 2645              		given a name address.
 2646              	**************************/
 2647 4280 64420000 		_HEADER NAMET,5,"NAME>"
 2647      054E414D 
 2647      453E00BF 
 2648 428c 504700BF 		_NEST
 2649 4290 91310000 		_ADR	COUNT
 2650 4294 C32B0000 		_DOLIT	0x1F
 2650      1F000000 
 2651 429c 812D0000 		_ADR	ANDD
 2652 42a0 012E0000 		_ADR	PLUS
 2653 42a4 F9350000 		_ADR	ALGND
 2654 42a8 032A0000 		_UNNEST
 2655              	
 2656              	/***************************************
 2657              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2658              	 	Compare u bytes in two strings. 
 2659              		Return 0 if identical.
 2660              	
 2661              	  Picatout 2020-12-01, 
 2662              	    Because of problem with .align 
 2663              		directive that doesn't fill 
 2664              		with zero's I had to change 
 2665              		the "SAME?" and "FIND" 
 2666              	 	words  to do a byte by byte comparison. 
 2667              	****************************************/
 2668 42ac 84420000 		_HEADER SAMEQ,5,"SAME?"
 2668      0553414D 
 2668      453F00BF 
 2669 42b8 504700BF 		_NEST
 2670 42bc B92C0000 		_ADR	TOR
 2671 42c0 172C0000 		_BRAN	SAME2
 2671      04430000 
 2672              	SAME1:
 2673 42c8 612D0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2674 42cc A52C0000 		_ADR	RAT   // a1 a2 a1 u 
 2675 42d0 012E0000 		_ADR	PLUS  // a1 a2 a1+u 
 2676 42d4 692C0000 		_ADR	CAT	   // a1 a2 c1    		
 2677 42d8 612D0000 		_ADR	OVER  // a1 a2 c1 a2 
 2678 42dc A52C0000 		_ADR	RAT    
 2679 42e0 012E0000 		_ADR	PLUS    
 2680 42e4 692C0000 		_ADR	CAT	  // a1 a2 c1 c2
 2681 42e8 112E0000 		_ADR	SUBB  
 2682 42ec 112F0000 		_ADR	QDUP
 2683 42f0 032C0000 		_QBRAN	SAME2
 2683      04430000 
ARM GAS  forth.s 			page 154


 2684 42f8 752C0000 		_ADR	RFROM
 2685 42fc 2D2D0000 		_ADR	DROP
 2686 4300 032A0000 		_UNNEST	// strings not equal
 2687              	SAME2:
 2688 4304 E52B0000 		_DONXT	SAME1
 2688      C8420000 
 2689 430c C32B0000 		_DOLIT	0
 2689      00000000 
 2690 4314 032A0000 		_UNNEST	// strings equal
 2691              	
 2692              	/***********************************
 2693              	    FIND	( a na -- ca na | a F )
 2694              	 	Search a vocabulary for a string.
 2695              		Return ca and na if succeeded.
 2696              	hidden word used by NAME?
 2697              	
 2698              	  Picatout 2020-12-01,  
 2699              		 Modified from original. 
 2700              	   See comment for word "SAME?" 
 2701              	************************************/
 2702              	FIND:
 2703 4318 504700BF 		_NEST
 2704 431c 4D2D0000 		_ADR	SWAP			// na a	
 2705 4320 91310000 		_ADR	COUNT			// na a+1 count
 2706 4324 3D2D0000 		_ADR	DUPP 
 2707 4328 3D320000 		_ADR	TEMP
 2708 432c 352C0000 		_ADR	STORE			// na a+1 count 
 2709 4330 B92C0000 		_ADR  TOR		// na a+1  R: count  
 2710 4334 4D2D0000 		_ADR	SWAP			// a+1 na
 2711              	FIND1:
 2712 4338 3D2D0000 		_ADR	DUPP			// a+1 na na
 2713 433c 032C0000 		_QBRAN	FIND6	// end of vocabulary
 2713      90430000 
 2714 4344 3D2D0000 		_ADR	DUPP			// a+1 na na
 2715 4348 692C0000 		_ADR	CAT			// a+1 na name1
 2716 434c C32B0000 		_DOLIT	MASKK
 2716      1FFFFFFF 
 2717 4354 812D0000 		_ADR	ANDD
 2718 4358 A52C0000 		_ADR	RAT			// a+1 na name1 count 
 2719 435c A92D0000 		_ADR	XORR			// a+1 na,  same length?
 2720 4360 032C0000 		_QBRAN	FIND2
 2720      78430000 
 2721 4368 AD2E0000 		_ADR	CELLM			// a+1 la
 2722 436c 492C0000 		_ADR	AT			// a+1 next_na
 2723 4370 172C0000 		_BRAN	FIND1			// try next word
 2723      38430000 
 2724              	FIND2:   
 2725 4378 5D2E0000 		_ADR	ONEP			// a+1 na+1
 2726 437c 3D320000 		_ADR	TEMP
 2727 4380 492C0000 		_ADR	AT			// a+1 na+1 count
 2728 4384 B9420000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2729              	FIND3:	
 2730 4388 172C0000 		_BRAN	FIND4
 2730      A8430000 
 2731              	FIND6:	
 2732 4390 752C0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2733 4394 2D2D0000 		_ADR	DROP			// a+1 0
ARM GAS  forth.s 			page 155


 2734 4398 4D2D0000 		_ADR	SWAP			// 0 a+1
 2735 439c 6D2E0000 		_ADR	ONEM			// 0 a
 2736 43a0 4D2D0000 		_ADR	SWAP			// a 0 
 2737 43a4 032A0000 		_UNNEST			// return without a match
 2738              	FIND4:	
 2739 43a8 032C0000 		_QBRAN	FIND5			// a+1 na+1
 2739      C4430000 
 2740 43b0 6D2E0000 		_ADR	ONEM			// a+1 na
 2741 43b4 AD2E0000 		_ADR	CELLM			// a+4 la
 2742 43b8 492C0000 		_ADR	AT			// a+1 next_na
 2743 43bc 172C0000 		_BRAN	FIND1			// compare next name
 2743      38430000 
 2744              	FIND5:	
 2745 43c4 752C0000 		_ADR	RFROM			// a+1 na+1 count
 2746 43c8 2D2D0000 		_ADR	DROP			// a+1 na+1
 2747 43cc 4D2D0000 		_ADR	SWAP			// na+1 a+1
 2748 43d0 2D2D0000 		_ADR	DROP			// na+1
 2749 43d4 6D2E0000 		_ADR	ONEM			// na
 2750 43d8 3D2D0000 		_ADR	DUPP			// na na
 2751 43dc 8D420000 		_ADR	NAMET			// na ca
 2752 43e0 4D2D0000 		_ADR	SWAP			// ca na
 2753 43e4 032A0000 		_UNNEST			//  return with a match
 2754              	
 2755              	/********************************
 2756              	    NAME?	( a -- ca na | a F )
 2757              	 	Search all context vocabularies 
 2758              		for a string.
 2759              	***********************************/
 2760 43e8 B0420000 		_HEADER NAMEQ,5,"NAME?"
 2760      054E414D 
 2760      453F00BF 
 2761 43f4 504700BF 		_NEST
 2762 43f8 C5320000 		_ADR	CNTXT
 2763 43fc 492C0000 		_ADR	AT
 2764 4400 19430000 		_ADR	FIND
 2765 4404 032A0000 		_UNNEST
 2766              	
 2767              	/********************
 2768              	  console input
 2769              	********************/
 2770              	
 2771              	/****************************
 2772              		ASCIZ ( a -- a+ )
 2773              		convert counted string to 
 2774              		null terminated string 
 2775              		in pad.
 2776              	*****************************/
 2777 4408 EC430000 		_HEADER ASCIZ,5,"ASCIZ" 
 2777      05415343 
 2777      495A00BF 
 2778 4414 504700BF 		_NEST 
 2779 4418 91310000 		_ADR COUNT
 2780 441c 3D2D0000 		_ADR DUPP
 2781 4420 B92C0000 		_ADR TOR 
 2782 4424 C5360000 		_ADR PAD 
 2783 4428 4D2D0000 		_ADR SWAP
 2784 442c 4D370000 		_ADR MOVE  
ARM GAS  forth.s 			page 156


 2785 4430 C5360000 		_ADR PAD 
 2786 4434 752C0000 		_ADR RFROM
 2787 4438 012E0000 		_ADR PLUS 
 2788 443c C32B0000 		_DOLIT 0 
 2788      00000000 
 2789 4444 4D2D0000 		_ADR SWAP  
 2790 4448 552C0000 		_ADR CSTOR
 2791 444c C5360000 		_ADR PAD   
 2792 4450 032A0000 		_UNNEST 
 2793              	
 2794              	/***********************
 2795              		UPPER (cstring -- cstring )
 2796              		convert to upper case in situ
 2797              	*******************************/
 2798 4454 0C440000 		_HEADER UPPER,5,"UPPER"
 2798      05555050 
 2798      455200BF 
 2799 4460 504700BF 		_NEST 
 2800 4464 3D2D0000 		_ADR DUPP 
 2801 4468 B92C0000 		_ADR TOR 
 2802 446c 91310000 		_ADR COUNT
 2803 4470 C32B0000 		_DOLIT 0x1f
 2803      1F000000 
 2804 4478 812D0000 		_ADR ANDD
 2805 447c B92C0000 		_ADR TOR 
 2806 4480 172C0000 		_BRAN 3f
 2806      D4440000 
 2807 4488 3D2D0000 	1:  _ADR DUPP 
 2808 448c 91310000 		_ADR COUNT 
 2809 4490 3D2D0000 		_ADR DUPP 
 2810 4494 C32B0000 		_DOLIT 'a'-1
 2810      60000000 
 2811 449c 09310000 		_ADR GREAT
 2812 44a0 032C0000 		_QBRAN 2f 
 2812      CC440000 
 2813 44a8 3D2D0000 		_ADR DUPP 
 2814 44ac C32B0000 		_DOLIT 'z'+1 
 2814      7B000000 
 2815 44b4 D9300000 		_ADR LESS 
 2816 44b8 032C0000 		_QBRAN 2f 
 2816      CC440000 
 2817 44c0 C32B0000 		_DOLIT 0x5f  
 2817      5F000000 
 2818 44c8 812D0000 		_ADR ANDD
 2819 44cc 252F0000 	2:	_ADR ROT
 2820 44d0 552C0000 		_ADR CSTOR
 2821 44d4 E52B0000 	3:  _DONXT 1b
 2821      88440000 
 2822 44dc 2D2D0000 		_ADR DROP 
 2823 44e0 752C0000 		_ADR RFROM
 2824 44e4 032A0000 		_UNNEST 
 2825              	
 2826              	/**************************************
 2827              	   BKSP  ( bot eot cur -- bot eot cur )
 2828              	   Move cursor left by one character.
 2829              	hidden word used by KTAP
 2830              	***************************************/
ARM GAS  forth.s 			page 157


 2831              	BKSP:
 2832 44e8 504700BF 		_NEST
 2833 44ec B92C0000 		_ADR	TOR
 2834 44f0 612D0000 		_ADR	OVER
 2835 44f4 752C0000 		_ADR	RFROM
 2836 44f8 4D2D0000 		_ADR	SWAP
 2837 44fc 612D0000 		_ADR	OVER
 2838 4500 A92D0000 		_ADR	XORR
 2839 4504 032C0000 		_QBRAN	BACK1
 2839      30450000 
 2840 450c C32B0000 		_DOLIT	BKSPP
 2840      08000000 
 2841 4514 CD2A0000 		_ADR	EMIT
 2842 4518 6D2E0000 		_ADR	ONEM
 2843 451c BD2E0000 		_ADR	BLANK
 2844 4520 CD2A0000 		_ADR	EMIT
 2845 4524 C32B0000 		_DOLIT	BKSPP
 2845      08000000 
 2846 452c CD2A0000 		_ADR	EMIT
 2847              	BACK1:
 2848 4530 032A0000 		  _UNNEST
 2849              	
 2850              	/****************************************
 2851              	   TAP	 ( bot eot cur c -- bot eot cur )
 2852              	   Accept and echo the key stroke 
 2853              	   and bump the cursor.
 2854              	hidden word used by KTAP 
 2855              	****************************************/
 2856              	TAP:
 2857 4534 504700BF 		_NEST
 2858 4538 3D2D0000 		_ADR	DUPP
 2859 453c CD2A0000 		_ADR	EMIT
 2860 4540 612D0000 		_ADR	OVER
 2861 4544 552C0000 		_ADR	CSTOR
 2862 4548 5D2E0000 		_ADR	ONEP
 2863 454c 032A0000 		_UNNEST
 2864              	
 2865              	
 2866              	/*******************************************
 2867              	    kTAP	( bot eot cur c -- bot eot cur )
 2868              	 	Process a key stroke, CR or backspace.
 2869              	hidden word used by ACCEPT 
 2870              	*******************************************/
 2871              	KTAP:
 2872              	TTAP:
 2873 4550 504700BF 		_NEST
 2874 4554 3D2D0000 		_ADR	DUPP
 2875 4558 C32B0000 		_DOLIT	CRR
 2875      0D000000 
 2876 4560 A92D0000 		_ADR	XORR
 2877 4564 032C0000 		_QBRAN  KTAP2
 2877      94450000 
 2878 456c C32B0000 		_DOLIT	BKSPP
 2878      08000000 
 2879 4574 A92D0000 		_ADR	XORR
 2880 4578 032C0000 		_QBRAN	KTAP1
 2880      8C450000 
ARM GAS  forth.s 			page 158


 2881 4580 BD2E0000 		_ADR	BLANK
 2882 4584 35450000 		_ADR	TAP
 2883 4588 032A0000 		_UNNEST
 2884              	//	.word	0			// patch
 2885              	KTAP1:
 2886 458c E9440000 		_ADR	BKSP
 2887 4590 032A0000 		_UNNEST
 2888              	KTAP2:
 2889 4594 2D2D0000 		_ADR	DROP
 2890 4598 4D2D0000 		_ADR	SWAP
 2891 459c 2D2D0000 		_ADR	DROP
 2892 45a0 3D2D0000 		_ADR	DUPP
 2893 45a4 032A0000 		_UNNEST
 2894              	
 2895              	/************************************
 2896              	    ACCEPT	( b u -- b u )
 2897              	 	Accept characters to input 
 2898              		buffer. Return with actual count.
 2899              	*************************************/
 2900 45a8 58440000 		_HEADER ACCEP,6,"ACCEPT"
 2900      06414343 
 2900      45505400 
 2901 45b4 504700BF 		_NEST
 2902 45b8 612D0000 		_ADR	OVER
 2903 45bc 012E0000 		_ADR	PLUS
 2904 45c0 612D0000 		_ADR	OVER
 2905              	ACCP1:
 2906 45c4 752F0000 		_ADR	DDUP
 2907 45c8 A92D0000 		_ADR	XORR
 2908 45cc 032C0000 		_QBRAN	ACCP4
 2908      0C460000 
 2909 45d4 A92A0000 		_ADR	KEY
 2910 45d8 3D2D0000 		_ADR	DUPP
 2911 45dc BD2E0000 		_ADR	BLANK
 2912 45e0 C32B0000 		_DOLIT 127
 2912      7F000000 
 2913 45e8 5D330000 		_ADR	WITHI
 2914 45ec 032C0000 		_QBRAN	ACCP2
 2914      00460000 
 2915 45f4 35450000 		_ADR	TAP
 2916 45f8 172C0000 		_BRAN	ACCP3
 2916      04460000 
 2917              	ACCP2:
 2918 4600 51450000 		_ADR	KTAP
 2919              	ACCP3:	  
 2920 4604 172C0000 		_BRAN	ACCP1
 2920      C4450000 
 2921              	ACCP4:
 2922 460c 2D2D0000 		_ADR	DROP
 2923 4610 612D0000 		_ADR	OVER
 2924 4614 112E0000 		_ADR	SUBB
 2925 4618 032A0000 		_UNNEST
 2926              	
 2927              	/*****************************
 2928              	    QUERY	( -- )
 2929              	 	Accept input stream 
 2930              		to terminal input buffer.
ARM GAS  forth.s 			page 159


 2931              	******************************/
 2932 461c AC450000 		_HEADER QUERY,5,"QUERY"
 2932      05515545 
 2932      525900BF 
 2933 4628 504700BF 		_NEST
 2934 462c E5360000 		_ADR	TIB
 2935 4630 C32B0000 		_DOLIT 80
 2935      50000000 
 2936 4638 B5450000 		_ADR	ACCEP
 2937 463c 81320000 		_ADR	NTIB
 2938 4640 352C0000 		_ADR	STORE
 2939 4644 2D2D0000 		_ADR	DROP
 2940 4648 C32B0000 		_DOLIT	0
 2940      00000000 
 2941 4650 69320000 		_ADR	INN
 2942 4654 352C0000 		_ADR	STORE
 2943 4658 032A0000 		_UNNEST
 2944              	
 2945              	/********************
 2946              	  Error handling
 2947              	********************/
 2948              	
 2949              	/*********************
 2950              	    ABORT	( a -- )
 2951              	 	Reset data stack 
 2952              		and jump to QUIT.
 2953              	**********************/
 2954 465c 20460000 		_HEADER ABORT,5,"ABORT"
 2954      0541424F 
 2954      525400BF 
 2955 4668 504700BF 		_NEST
 2956              	ABORT1:
 2957 466c 993C0000 		_ADR	SPACE
 2958 4670 91310000 		_ADR	COUNT
 2959 4674 ED3C0000 		_ADR	TYPEE
 2960 4678 C32B0000 		_DOLIT	0X3F
 2960      3F000000 
 2961 4680 CD2A0000 		_ADR	EMIT
 2962 4684 213D0000 		_ADR	CR
 2963 4688 F1470000 		_ADR	PRESE
 2964 468c 172C0000 		_BRAN	QUIT
 2964      10480000 
 2965              	
 2966              	/*******************************
 2967              	    _abort"	( f -- )
 2968              	 	Run time routine of ABORT"
 2969              		Abort with a message.
 2970              	hidden used by compiler 
 2971              	********************************/
 2972              	ABORQ:
 2973 4694 504700BF 		_NEST
 2974 4698 413D0000 		_ADR	DOSTR
 2975 469c 4D2D0000 		_ADR	SWAP 
 2976 46a0 032C0000 		_QBRAN	1f	// text flag
 2976      B0460000 
 2977 46a8 172C0000 		_BRAN	ABORT1
 2977      6C460000 
ARM GAS  forth.s 			page 160


 2978              	1:
 2979 46b0 2D2D0000 		_ADR	DROP
 2980 46b4 032A0000 		_UNNEST			// drop error
 2981              	
 2982              	/************************
 2983              	  The text interpreter
 2984              	************************/
 2985              	
 2986              	/***************************
 2987              	    $INTERPRET  ( a -- )
 2988              	 	Interpret a word. 
 2989              		If failed, try to 
 2990              		convert it to an integer.
 2991              	******************************/
 2992 46b8 60460000 		_HEADER INTER,10,"$INTERPRET"
 2992      0A24494E 
 2992      54455250 
 2992      52455400 
 2993 46c8 504700BF 		_NEST
 2994 46cc F5430000 		_ADR	NAMEQ
 2995 46d0 112F0000 		_ADR	QDUP	// ?defined
 2996 46d4 032C0000 		_QBRAN	INTE1
 2996      08470000 
 2997 46dc 492C0000 		_ADR	AT
 2998 46e0 C32B0000 		_DOLIT	COMPO
 2998      40000000 
 2999 46e8 812D0000 		_ADR	ANDD	// ?compile only lexicon bits
 3000 46ec 95460000 		_ABORQ	13," compile only"
 3000      0D20636F 
 3000      6D70696C 
 3000      65206F6E 
 3000      6C7900BF 
 3001 4700 D92B0000 		_ADR	EXECU
 3002 4704 032A0000 		_UNNEST			// execute defined word
 3003              	INTE1:
 3004 4708 6D3C0000 		_ADR	NUMBER 
 3005 470c 032C0000 		_QBRAN	INTE2
 3005      18470000 
 3006 4714 032A0000 		_UNNEST
 3007              	INTE2:
 3008 4718 69460000 		_ADR	ABORT	// error
 3009              	
 3010              	/******************************
 3011              	    [	   ( -- )
 3012              	 	Start the text interpreter.
 3013              	*******************************/
 3014 471c BC460000 		_HEADER LBRAC,IMEDD+1,"["
 3014      815B00BF 
 3015 4724 504700BF 		_NEST
 3016 4728 C32B0000 		_DOLIT	INTER
 3016      C8460000 
 3017 4730 99320000 		_ADR	TEVAL
 3018 4734 352C0000 		_ADR	STORE
 3019 4738 032A0000 		_UNNEST
 3020              	
 3021              	/**********************
 3022              	    .OK	 ( -- )
ARM GAS  forth.s 			page 161


 3023              	 	Display "ok" only 
 3024              		while interpreting.
 3025              	************************/
 3026 473c 20470000 		_HEADER DOTOK,3,".OK"
 3026      032E4F4B 
 3027 4744 504700BF 		_NEST
 3028 4748 C32B0000 		_DOLIT	INTER
 3028      C8460000 
 3029 4750 99320000 		_ADR	TEVAL
 3030 4754 492C0000 		_ADR	AT
 3031 4758 89300000 		_ADR	EQUAL
 3032 475c 032C0000 		_QBRAN	DOTO1
 3032      6C470000 
 3033 4764 893D0000 		_DOTQP	3," ok"
 3033      03206F6B 
 3034              	DOTO1:
 3035 476c 213D0000 		_ADR	CR
 3036 4770 032A0000 		_UNNEST
 3037              	
 3038              	/*************************
 3039              	    ?STACK	( -- )
 3040              	 	Abort if the data 
 3041              		stack underflows.
 3042              	************************/
 3043 4774 40470000 		_HEADER QSTAC,6,"?STACK"
 3043      063F5354 
 3043      41434B00 
 3044 4780 504700BF 		_NEST
 3045 4784 61360000 		_ADR	DEPTH
 3046 4788 712D0000 		_ADR	ZLESS	// check only for underflow
 3047 478c 95460000 		_ABORQ	9,"underflow"
 3047      09756E64 
 3047      6572666C 
 3047      6F7700BF 
 3048 479c 032A0000 		_UNNEST
 3049              	
 3050              	/*******************
 3051              	    EVAL	( -- )
 3052              	 	Interpret the 
 3053              		input stream.
 3054              	*******************/
 3055 47a0 78470000 		_HEADER EVAL,4,"EVAL"
 3055      04455641 
 3055      4C0000BF 
 3056 47ac 504700BF 		_NEST
 3057              	EVAL1:
 3058 47b0 6D420000 	    _ADR	TOKEN
 3059 47b4 3D2D0000 		_ADR	DUPP
 3060 47b8 692C0000 		_ADR	CAT	// ?input stream empty
 3061 47bc 032C0000 		_QBRAN	EVAL2
 3061      D8470000 
 3062 47c4 99320000 		_ADR	TEVAL
 3063 47c8 FD360000 		_ADR	ATEXE
 3064 47cc 81470000 		_ADR	QSTAC	// evaluate input, check stack
 3065 47d0 172C0000 		_BRAN	EVAL1
 3065      B0470000 
 3066              	EVAL2:
ARM GAS  forth.s 			page 162


 3067 47d8 2D2D0000 		_ADR	DROP
 3068 47dc 45470000 		_ADR	DOTOK
 3069 47e0 032A0000 		_UNNEST	// prompt
 3070              	
 3071              	/**********************************
 3072              	    PRESET	( -- )
 3073              	 	Reset data stack pointer 
 3074              		and the terminal input buffer.
 3075              	**********************************/
 3076 47e4 A4470000 		_HEADER PRESE,6,"PRESET"
 3076      06505245 
 3076      53455400 
 3077 47f0 504700BF 		_NEST 
 3078 47f4 C32B0000 		_DOLIT SPP 
 3078      80FE0120 
 3079 47fc F92C0000 		_ADR SPSTOR 
 3080 4800 032A0000 		_UNNEST 
 3081              	
 3082              	/*********************
 3083              	    QUIT	( -- )
 3084              	 	Reset return stack 
 3085              		pointer and start 
 3086              		text interpreter.
 3087              	***********************/
 3088 4804 E8470000 		_HEADER QUIT,4,"QUIT"
 3088      04515549 
 3088      540000BF 
 3089 4810 C32B0000 		_DOLIT RPP 
 3089      00FF0120 
 3090 4818 E92C0000 		_ADR RPSTOR 
 3091              	QUIT1:
 3092 481c 25470000 		_ADR	LBRAC			// start interpretation
 3093              	QUIT2:
 3094 4820 29460000 		_ADR	QUERY			// get input
 3095 4824 AD470000 		_ADR	EVAL
 3096 4828 172C0000 		_BRAN	QUIT2	// continue till error
 3096      20480000 
 3097              	
 3098              	/***************************
 3099              		FORGET ( <string> -- )
 3100              		forget all definition 
 3101              		starting at <string>
 3102              	****************************/
 3103 4830 08480000 		_HEADER FORGET,6,"FORGET"
 3103      06464F52 
 3103      47455400 
 3104 483c 504700BF 		_NEST 
 3105 4840 6D420000 		_ADR TOKEN 
 3106 4844 3D2D0000 		_ADR DUPP 
 3107 4848 032C0000 		_QBRAN 9f 
 3107      84480000 
 3108 4850 F5430000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3109 4854 112F0000 		_ADR QDUP 
 3110 4858 032C0000 		_QBRAN 8f
 3110      80480000 
 3111 4860 AD2E0000 		_ADR CELLM // ( ca la )
 3112 4864 3D2D0000 		_ADR DUPP 
ARM GAS  forth.s 			page 163


 3113 4868 D9320000 		_ADR CPP   
 3114 486c 352C0000 		_ADR STORE
 3115 4870 492C0000 		_ADR AT 
 3116 4874 05330000 		_ADR LAST 
 3117 4878 352C0000 		_ADR STORE
 3118 487c DD4D0000 		_ADR OVERT 
 3119 4880 2D2D0000 	8:  _ADR DROP 
 3120 4884 032A0000 	9:	_UNNEST 
 3121              	
 3122              		.p2align 2 
 3123              	
 3124              	/*****************
 3125              	  The compiler
 3126              	******************/
 3127              	
 3128              	/**************************************
 3129              	    '	   ( -- ca )
 3130              	 	Search context vocabularies 
 3131              		for the next word in input stream.
 3132              	***************************************/
 3133 4888 34480000 		_HEADER TICK,1,"'"
 3133      012700BF 
 3134 4890 504700BF 		_NEST
 3135 4894 6D420000 		_ADR	TOKEN
 3136 4898 F5430000 		_ADR	NAMEQ	// ?defined
 3137 489c 032C0000 		_QBRAN	TICK1
 3137      A8480000 
 3138 48a4 032A0000 		_UNNEST	// yes, push code address
 3139              	TICK1:	
 3140 48a8 69460000 		_ADR ABORT	// no, error
 3141              	
 3142              	/***********************
 3143              	    ALLOT	( n -- )
 3144              	 	Allocate n bytes to 
 3145              		the ram area.
 3146              	************************/
 3147 48ac 8C480000 		_HEADER ALLOT,5,"ALLOT"
 3147      05414C4C 
 3147      4F5400BF 
 3148 48b8 504700BF 		_NEST
 3149 48bc D9320000 		_ADR	CPP
 3150 48c0 49310000 		_ADR	PSTOR
 3151 48c4 032A0000 		_UNNEST			// adjust code pointer
 3152              	
 3153              	/******************************
 3154              	    ,	   ( w -- )
 3155              	 	Compile an integer 
 3156              		into the code dictionary.
 3157              	******************************/
 3158 48c8 B0480000 		_HEADER COMMA,1,","
 3158      012C00BF 
 3159 48d0 504700BF 		_NEST
 3160 48d4 AD360000 		_ADR	HERE
 3161 48d8 3D2D0000 		_ADR	DUPP
 3162 48dc 9D2E0000 		_ADR	CELLP	// cell boundary
 3163 48e0 D9320000 		_ADR	CPP
 3164 48e4 352C0000 		_ADR	STORE
ARM GAS  forth.s 			page 164


 3165 48e8 352C0000 		_ADR	STORE
 3166 48ec 032A0000 		_UNNEST	// adjust code pointer, compile
 3167              		.p2align 2 
 3168              	
 3169              	/************************************
 3170              	    [COMPILE]   ( -- //  string> )
 3171              	 	Compile the next immediate word 
 3172              		into code dictionary.
 3173              	*************************************/
 3174 48f0 CC480000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3174      895B434F 
 3174      4D50494C 
 3174      455D00BF 
 3175 4900 504700BF 		_NEST
 3176 4904 91480000 		_ADR	TICK
 3177 4908 D1480000 		_ADR	COMMA
 3178 490c 032A0000 		_UNNEST
 3179              	
 3180              	/****************************
 3181              	    COMPILE	( -- )
 3182              	 	Compile the next address 
 3183              		in colon list to code 
 3184              		dictionary.
 3185              	*******************************/
 3186 4910 F4480000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3186      47434F4D 
 3186      50494C45 
 3187 491c 504700BF 		_NEST
 3188 4920 752C0000 		_ADR	RFROM
 3189 4924 3D2D0000 		_ADR	DUPP 
 3190 4928 492C0000 		_ADR	AT
 3191 492c C32B0000 		_DOLIT 1 
 3191      01000000 
 3192 4934 952D0000 		_ADR	ORR 
 3193 4938 D1480000 		_ADR	COMMA 
 3194 493c 9D2E0000 		_ADR	CELLP 
 3195 4940 B92C0000 		_ADR	TOR 
 3196 4944 032A0000 		_UNNEST	// adjust return address
 3197              	
 3198              	/*************************
 3199              	    LITERAL	( w -- )
 3200              	 	Compile tos to code 
 3201              		dictionary as an 
 3202              		integer literal.
 3203              	***************************/
 3204 4948 14490000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3204      874C4954 
 3204      4552414C 
 3205 4954 504700BF 		_NEST
 3206 4958 C32B0000 		_COMPI	DOLIT
 3206      C22B0000 
 3206      394E0000 
 3207 4964 D1480000 		_ADR	COMMA
 3208 4968 032A0000 		_UNNEST
 3209              	
 3210              	/********************
 3211              	    $,"	( -- )
ARM GAS  forth.s 			page 165


 3212              	 	Compile a literal 
 3213              		string up to next " .
 3214              	hidden word 
 3215              	************************/
 3216              	STRCQ:
 3217 496c 504700BF 		_NEST
 3218 4970 C32B0000 		_DOLIT -4
 3218      FCFFFFFF 
 3219 4978 D9320000 		_ADR	CPP
 3220 497c 49310000 		_ADR	PSTOR
 3221 4980 C32B0000 		_DOLIT	'\"'
 3221      22000000 
 3222 4988 49420000 		_ADR	WORDD			// move word to code dictionary
 3223 498c 91310000 		_ADR	COUNT
 3224 4990 012E0000 		_ADR	PLUS
 3225 4994 F9350000 		_ADR	ALGND			// calculate aligned end of string
 3226 4998 D9320000 		_ADR	CPP
 3227 499c 352C0000 		_ADR	STORE
 3228 49a0 032A0000 		_UNNEST 			// adjust the code pointer
 3229              	
 3230              	/*******************
 3231              	   Structures
 3232              	*******************/
 3233              	
 3234              	/*************************
 3235              	    FOR	 ( -- a )
 3236              	 	Start a FOR-NEXT loop 
 3237              		structure in a colon 
 3238              		definition.
 3239              	**************************/
 3240 49a4 4C490000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3240      C3464F52 
 3241 49ac 504700BF 		_NEST
 3242 49b0 C32B0000 		_COMPI	TOR
 3242      B82C0000 
 3242      394E0000 
 3243 49bc AD360000 		_ADR	HERE
 3244 49c0 032A0000 		_UNNEST
 3245              	
 3246              	/********************************
 3247              		DO ( limit start -- )
 3248              		initialise a DO...LOOP 
 3249              		or DO...+LOOP 
 3250              	********************************/
 3251 49c4 A8490000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3251      C2444F00 
 3252 49cc 504700BF 		_NEST
 3253 49d0 C32B0000 		_COMPI SWAP
 3253      4C2D0000 
 3253      394E0000 
 3254 49dc C32B0000 		_COMPI TOR 
 3254      B82C0000 
 3254      394E0000 
 3255 49e8 C32B0000 		_COMPI TOR 
 3255      B82C0000 
 3255      394E0000 
 3256 49f4 AD360000 		_ADR HERE 
ARM GAS  forth.s 			page 166


 3257 49f8 032A0000 		_UNNEST 
 3258              	
 3259              	DOPLOOP: // ( n -- R: counter limit )
 3260 49fc B8E80300 		ldmfd RSP!,{T0,T1}
 3261 4a00 3044     		add T0,TOS 
 3262 4a02 28E90300 		stmfd RSP!,{T0,T1}
 3263 4a06 8842     		cmp T0,T1 
 3264 4a08 05D4     		bmi 9f 
 3265 4a0a 08F10808 		add RSP,#8
 3266 4a0e 0CF1040C 		add IP,#4
 3267 4a12 FDF7F3BF 		_NEXT 
 3268 4a16 DCF800C0 	9:  ldr IP,[IP]
 3269 4a1a FDF7EFBF 		_NEXT 
 3270              		
 3271              	/***************************
 3272              		+LOOP ( a -- )
 3273              		increment counter 
 3274              		end loop if countr>limit
 3275              	****************************/
 3276 4a1e C8490000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3276      C52B4C4F 
 3276      4F50
 3277 4a28 504700BF 		_NEST 
 3278 4a2c C32B0000 		_COMPI DOPLOOP 
 3278      FC490000 
 3278      394E0000 
 3279 4a38 D1480000 		_ADR COMMA
 3280 4a3c 032A0000 		_UNNEST 
 3281              	
 3282              	DOLOOP: // ( -- R: counter limit )
 3283 4a40 D8F80000 		ldr T0,[RSP]
 3284 4a44 00F10100 		add T0,#1
 3285 4a48 C8F80000 		str T0,[RSP]
 3286 4a4c D8F80410 		ldr T1,[RSP,#4]
 3287 4a50 8842     		cmp T0,T1 
 3288 4a52 05D4     		bmi 9f
 3289 4a54 08F10808 		add RSP,#8  // counter and limit  
 3290 4a58 0CF1040C 		add IP,IP,#4 // skip loop address 
 3291 4a5c FDF7CEBF 		_NEXT 
 3292 4a60 DCF800C0 	9:  ldr IP,[IP]
 3293 4a64 FDF7CABF 		_NEXT 
 3294              	
 3295              	
 3296              	/********************************
 3297              		LOOP ( a -- )
 3298              		increment counter 
 3299              		end loop if >= limit 
 3300              	*********************************/
 3301 4a68 224A0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3301      C44C4F4F 
 3301      500000BF 
 3302 4a74 504700BF 		_NEST 
 3303 4a78 C32B0000 		_COMPI DOLOOP
 3303      404A0000 
 3303      394E0000 
 3304 4a84 D1480000 		_ADR COMMA 
 3305 4a88 032A0000 		_UNNEST 
ARM GAS  forth.s 			page 167


 3306              	
 3307              	
 3308              	/**********************
 3309              	    BEGIN	( -- a )
 3310              	 	Start an infinite 
 3311              		or indefinite 
 3312              		loop structure.
 3313              	************************/
 3314 4a8c 6C4A0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3314      C5424547 
 3314      494E00BF 
 3315 4a98 504700BF 		_NEST
 3316 4a9c AD360000 		_ADR	HERE
 3317 4aa0 032A0000 		_UNNEST
 3318              		.p2align 2 
 3319              	
 3320              	/********************
 3321              	    NEXT	( a -- )
 3322              	 	Terminate a FOR-NEXT
 3323              		loop structure.
 3324              	**************************/
 3325 4aa4 904A0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3325      C44E4558 
 3325      540000BF 
 3326 4ab0 504700BF 		_NEST
 3327 4ab4 C32B0000 		_COMPI	DONXT
 3327      E42B0000 
 3327      394E0000 
 3328 4ac0 D1480000 		_ADR	COMMA
 3329 4ac4 032A0000 		_UNNEST
 3330              	
 3331              	/***************************
 3332              		I ( -- n )
 3333              		stack for loop counter 
 3334              	***************************/
 3335 4ac8 A84A0000 		_HEADER I,1+COMPO,"I"
 3335      414900BF 
 3336 4ad0 47F8046D 		_PUSH 
 3337 4ad4 D8F80060 		ldr TOS,[RSP]
 3338 4ad8 FDF790BF 		_NEXT 
 3339              	
 3340              	/****************************
 3341              		J ( -- n )
 3342              		stack outer loop counter 
 3343              	****************************/
 3344 4adc CC4A0000 		_HEADER J,1,"J"
 3344      014A00BF 
 3345 4ae4 47F8046D 		_PUSH 
 3346 4ae8 D8F80460 		ldr TOS,[RSP,#4]
 3347 4aec FDF786BF 		_NEXT 
 3348              	
 3349              	/**********************
 3350              	    UNTIL	( a -- )
 3351              	 	Terminate a BEGIN-UNTIL
 3352              		indefinite loop structure.
 3353              	******************************/
 3354 4af0 E04A0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
ARM GAS  forth.s 			page 168


 3354      C5554E54 
 3354      494C00BF 
 3355 4afc 504700BF 		_NEST
 3356 4b00 C32B0000 		_COMPI	QBRAN
 3356      022C0000 
 3356      394E0000 
 3357 4b0c D1480000 		_ADR	COMMA
 3358 4b10 032A0000 		_UNNEST
 3359              	
 3360              	/**********************
 3361              	    AGAIN	( a -- )
 3362              	 	Terminate a BEGIN-AGAIN
 3363              		infinite loop structure.
 3364              	*****************************/
 3365 4b14 F44A0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3365      C5414741 
 3365      494E00BF 
 3366 4b20 504700BF 		_NEST
 3367 4b24 C32B0000 		_COMPI	BRAN
 3367      162C0000 
 3367      394E0000 
 3368 4b30 D1480000 		_ADR	COMMA
 3369 4b34 032A0000 		_UNNEST
 3370              	
 3371              	/************************
 3372              	    IF	  ( -- A )
 3373              	 	Begin a conditional
 3374              		branch structure.
 3375              	**************************/
 3376 4b38 184B0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3376      C2494600 
 3377 4b40 504700BF 		_NEST
 3378 4b44 C32B0000 		_COMPI	QBRAN
 3378      022C0000 
 3378      394E0000 
 3379 4b50 AD360000 		_ADR	HERE
 3380 4b54 C32B0000 		_DOLIT	4
 3380      04000000 
 3381 4b5c D9320000 		_ADR	CPP
 3382 4b60 49310000 		_ADR	PSTOR
 3383 4b64 032A0000 		_UNNEST
 3384              	
 3385              	/*************************
 3386              	    AHEAD	( -- A )
 3387              	 	Compile a forward 
 3388              		branch instruction.
 3389              	*************************/
 3390 4b68 3C4B0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3390      C5414845 
 3390      414400BF 
 3391 4b74 504700BF 		_NEST
 3392 4b78 C32B0000 		_COMPI	BRAN
 3392      162C0000 
 3392      394E0000 
 3393 4b84 AD360000 		_ADR	HERE
 3394 4b88 C32B0000 		_DOLIT	4
 3394      04000000 
ARM GAS  forth.s 			page 169


 3395 4b90 D9320000 		_ADR	CPP
 3396 4b94 49310000 		_ADR	PSTOR
 3397 4b98 032A0000 		_UNNEST
 3398              	
 3399              	/**************************
 3400              	    REPEAT	( A a -- )
 3401              	 	Terminate a BEGIN-WHILE-REPEAT
 3402              		indefinite loop.
 3403              	**********************************/
 3404 4b9c 6C4B0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3404      C6524550 
 3404      45415400 
 3405 4ba8 504700BF 		_NEST
 3406 4bac 214B0000 		_ADR	AGAIN
 3407 4bb0 AD360000 		_ADR	HERE
 3408 4bb4 4D2D0000 		_ADR	SWAP
 3409 4bb8 352C0000 		_ADR	STORE
 3410 4bbc 032A0000 		_UNNEST
 3411              	
 3412              	/*********************
 3413              	    THEN	( A -- )
 3414              	 	Terminate a conditional
 3415              		branch structure.
 3416              	*****************************/
 3417 4bc0 A04B0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3417      C4544845 
 3417      4E0000BF 
 3418 4bcc 504700BF 		_NEST
 3419 4bd0 AD360000 		_ADR	HERE
 3420 4bd4 4D2D0000 		_ADR	SWAP
 3421 4bd8 352C0000 		_ADR	STORE
 3422 4bdc 032A0000 		_UNNEST
 3423              	
 3424              	/***************************
 3425              	    AFT	 ( a -- a A )
 3426              	 	Jump to THEN in a 
 3427              		FOR-AFT-THEN-NEXT loop 
 3428              		the first time through.
 3429              	*****************************/
 3430 4be0 C44B0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3430      C3414654 
 3431 4be8 504700BF 		_NEST
 3432 4bec 2D2D0000 		_ADR	DROP
 3433 4bf0 754B0000 		_ADR	AHEAD
 3434 4bf4 994A0000 		_ADR	BEGIN
 3435 4bf8 4D2D0000 		_ADR	SWAP
 3436 4bfc 032A0000 		_UNNEST
 3437              	
 3438              	/**********************
 3439              	    ELSE	( A -- A )
 3440              	 	Start the false 
 3441              		clause in an 
 3442              		IF-ELSE-THEN structure.
 3443              	****************************/
 3444 4c00 E44B0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3444      C4454C53 
 3444      450000BF 
ARM GAS  forth.s 			page 170


 3445 4c0c 504700BF 		_NEST
 3446 4c10 754B0000 		_ADR	AHEAD
 3447 4c14 4D2D0000 		_ADR	SWAP
 3448 4c18 CD4B0000 		_ADR	THENN
 3449 4c1c 032A0000 		_UNNEST
 3450              	
 3451              	/**************************
 3452              	    WHILE	( a -- A a )
 3453              	 	Conditional branch out 
 3454              		of a BEGIN-WHILE-REPEAT loop.
 3455              	*********************************/
 3456 4c20 044C0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3456      C5574849 
 3456      4C4500BF 
 3457 4c2c 504700BF 		_NEST
 3458 4c30 414B0000 		_ADR	IFF
 3459 4c34 4D2D0000 		_ADR	SWAP
 3460 4c38 032A0000 		_UNNEST
 3461              	
 3462              	/***********************************
 3463              	    ABORT"	( -- //  string> )
 3464              	 	Conditional abort with an 
 3465              		error message.
 3466              	***********************************/
 3467 4c3c 244C0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3467      8641424F 
 3467      52542200 
 3468 4c48 504700BF 		_NEST
 3469 4c4c C32B0000 		_COMPI	ABORQ
 3469      94460000 
 3469      394E0000 
 3470 4c58 6D490000 		_ADR	STRCQ
 3471 4c5c 032A0000 		_UNNEST
 3472              	
 3473              	/******************************
 3474              	    $"	( -- //  string> )
 3475              	 	Compile an inline 
 3476              		word literal.
 3477              	*****************************/
 3478 4c60 404C0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3478      C2242200 
 3479 4c68 504700BF 		_NEST
 3480 4c6c C32B0000 		_COMPI	STRQP
 3480      6C3D0000 
 3480      394E0000 
 3481 4c78 6D490000 		_ADR	STRCQ
 3482 4c7c 032A0000 		_UNNEST
 3483              	
 3484              	/******************************
 3485              	    ."	( -- //  string> )
 3486              	 	Compile an inline word
 3487              		literal to be typed out 
 3488              		at run time.
 3489              	*******************************/
 3490 4c80 644C0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3490      C22E2200 
 3491 4c88 504700BF 		_NEST
ARM GAS  forth.s 			page 171


 3492 4c8c C32B0000 		_COMPI	DOTQP
 3492      883D0000 
 3492      394E0000 
 3493 4c98 6D490000 		_ADR	STRCQ
 3494 4c9c 032A0000 		_UNNEST
 3495              	
 3496              	/*********************
 3497              	  Name compiler
 3498              	***********************/
 3499              	
 3500              	/**************************
 3501              	    ?UNIQUE	( a -- a )
 3502              	 	Display a warning 
 3503              		message if the word 
 3504              		already exists.
 3505              	**************************/
 3506 4ca0 844C0000 		_HEADER UNIQU,7,"?UNIQUE"
 3506      073F554E 
 3506      49515545 
 3507 4cac 504700BF 		_NEST
 3508 4cb0 3D2D0000 		_ADR	DUPP
 3509 4cb4 F5430000 		_ADR	NAMEQ			// ?name exists
 3510 4cb8 032C0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3510      D84C0000 
 3511 4cc0 893D0000 		_DOTQP	7," reDef "		// but warn the user
 3511      07207265 
 3511      44656620 
 3512 4ccc 612D0000 		_ADR	OVER
 3513 4cd0 91310000 		_ADR	COUNT
 3514 4cd4 ED3C0000 		_ADR	TYPEE			// just in case its not planned
 3515              	UNIQ1:
 3516 4cd8 2D2D0000 		_ADR	DROP
 3517 4cdc 032A0000 		_UNNEST
 3518              	
 3519              	/***********************
 3520              	    $,n	 ( na -- )
 3521              	 	Build a new dictionary 
 3522              		name using the data at na.
 3523              	hidden word 
 3524              	*******************************/
 3525              	SNAME:
 3526 4ce0 504700BF 		_NEST
 3527 4ce4 3D2D0000 		_ADR	DUPP			//  na na
 3528 4ce8 692C0000 		_ADR	CAT			//  ?null input
 3529 4cec 032C0000 		_QBRAN	SNAM1
 3529      284D0000 
 3530 4cf4 AD4C0000 		_ADR	UNIQU			//  na
 3531 4cf8 05330000 		_ADR	LAST			//  na last
 3532 4cfc 492C0000 		_ADR	AT			//  na la
 3533 4d00 D1480000 		_ADR	COMMA			//  na
 3534 4d04 3D2D0000 		_ADR	DUPP			//  na na
 3535 4d08 05330000 		_ADR	LAST			//  na na last
 3536 4d0c 352C0000 		_ADR	STORE			//  na , save na for vocabulary link
 3537 4d10 91310000 		_ADR	COUNT			//  na+1 count
 3538 4d14 012E0000 		_ADR	PLUS			//  na+1+count
 3539 4d18 F9350000 		_ADR	ALGND			//  word boundary
 3540 4d1c D9320000 		_ADR	CPP
ARM GAS  forth.s 			page 172


 3541 4d20 352C0000 		_ADR	STORE			//  top of dictionary now
 3542 4d24 032A0000 		_UNNEST
 3543              	SNAM1:
 3544 4d28 6D3D0000 		_ADR	STRQP
 3545 4d2c 07       		.byte	7
 3546 4d2d 206E616D 		.ascii " name? "
 3546      653F20
 3547 4d34 69460000 		_ADR	ABORT
 3548              	
 3549              	/************************
 3550              	    $COMPILE	( a -- )
 3551              	 	Compile next word to 
 3552              		code dictionary as 
 3553              		a token or literal.
 3554              	**************************/
 3555 4d38 A44C0000 		_HEADER SCOMP,8,"$COMPILE"
 3555      0824434F 
 3555      4D50494C 
 3555      450000BF 
 3556 4d48 504700BF 		_NEST
 3557 4d4c F5430000 		_ADR	NAMEQ
 3558 4d50 112F0000 		_ADR	QDUP	// defined?
 3559 4d54 032C0000 		_QBRAN	SCOM2
 3559      844D0000 
 3560 4d5c 492C0000 		_ADR	AT
 3561 4d60 C32B0000 		_DOLIT	IMEDD
 3561      80000000 
 3562 4d68 812D0000 		_ADR	ANDD	// immediate?
 3563 4d6c 032C0000 		_QBRAN	SCOM1
 3563      7C4D0000 
 3564 4d74 D92B0000 		_ADR	EXECU
 3565 4d78 032A0000 		_UNNEST			// it's immediate, execute
 3566              	SCOM1:
 3567 4d7c 394E0000 		_ADR	CALLC			// it's not immediate, compile
 3568 4d80 032A0000 		_UNNEST	
 3569              	SCOM2:
 3570 4d84 6D3C0000 		_ADR	NUMBER 
 3571 4d88 032C0000 		_QBRAN	SCOM3
 3571      984D0000 
 3572 4d90 55490000 		_ADR	LITER
 3573 4d94 032A0000 		_UNNEST			// compile number as integer
 3574              	SCOM3: // compilation abort 
 3575 4d98 A14D0000 		_ADR COLON_ABORT 
 3576 4d9c 69460000 		_ADR	ABORT			// error
 3577              	
 3578              	/********************************
 3579              	 before aborting a compilation 
 3580              	 reset HERE and LAST
 3581              	 to previous values. 
 3582              	*******************************/
 3583              	COLON_ABORT:
 3584 4da0 504700BF 		_NEST 
 3585 4da4 05330000 		_ADR LAST 
 3586 4da8 492C0000 		_ADR AT 
 3587 4dac AD2E0000 		_ADR CELLM 
 3588 4db0 3D2D0000 		_ADR DUPP 
 3589 4db4 D9320000 		_ADR CPP  
ARM GAS  forth.s 			page 173


 3590 4db8 352C0000 		_ADR STORE 
 3591 4dbc 492C0000 		_ADR AT 
 3592 4dc0 05330000 		_ADR LAST 
 3593 4dc4 352C0000 		_ADR STORE 
 3594 4dc8 DD4D0000 		_ADR OVERT 
 3595 4dcc 032A0000 		_UNNEST 
 3596              	
 3597              	/*********************
 3598              	    OVERT	( -- )
 3599              	 	Link a new word 
 3600              		into the current 
 3601              		vocabulary.
 3602              	**********************/
 3603 4dd0 3C4D0000 		_HEADER OVERT,5,"OVERT"
 3603      054F5645 
 3603      525400BF 
 3604 4ddc 504700BF 		_NEST
 3605 4de0 05330000 		_ADR	LAST
 3606 4de4 492C0000 		_ADR	AT
 3607 4de8 C5320000 		_ADR	CNTXT
 3608 4dec 352C0000 		_ADR	STORE
 3609 4df0 032A0000 		_UNNEST
 3610              	
 3611              	/**********************
 3612              	    ;  ( -- )
 3613              	 	Terminate a colon
 3614              		definition.
 3615              	***********************/
 3616 4df4 D44D0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3616      C13B00BF 
 3617 4dfc 504700BF 		_NEST
 3618 4e00 C32B0000 		_DOLIT	UNNEST
 3618      022A0000 
 3619 4e08 394E0000 		_ADR	CALLC
 3620 4e0c 25470000 		_ADR	LBRAC
 3621 4e10 DD4D0000 		_ADR	OVERT
 3622 4e14 032A0000 		_UNNEST
 3623              	
 3624              	/******************
 3625              	    ]	   ( -- )
 3626              	 	Start compiling 
 3627              		the words in 
 3628              		the input stream.
 3629              	*********************/
 3630 4e18 F84D0000 		_HEADER RBRAC,1,"]"
 3630      015D00BF 
 3631 4e20 504700BF 		_NEST
 3632 4e24 C32B0000 		_DOLIT	SCOMP
 3632      484D0000 
 3633 4e2c 99320000 		_ADR	TEVAL
 3634 4e30 352C0000 		_ADR	STORE
 3635 4e34 032A0000 		_UNNEST
 3636              	
 3637              	/*********************
 3638              	    BL.W	( ca -- )
 3639              	 	compile ca.
 3640              	hidden word used by compiler
ARM GAS  forth.s 			page 174


 3641              	*****************************/
 3642              	CALLC:
 3643 4e38 504700BF 		_NEST
 3644 4e3c C32B0000 		_DOLIT 1 
 3644      01000000 
 3645 4e44 952D0000 		_ADR ORR 
 3646 4e48 D1480000 		_ADR COMMA  
 3647 4e4c 032A0000 		_UNNEST 
 3648              	
 3649              	
 3650              	/*************************
 3651              	 	:	( -- //  string> )
 3652              	 	Start a new colon 
 3653              		definition using 
 3654              		next word as its name.
 3655              	**************************/
 3656 4e50 1C4E0000 		_HEADER COLON,1,":"
 3656      013A00BF 
 3657 4e58 504700BF 		_NEST
 3658 4e5c 6D420000 		_ADR	TOKEN
 3659 4e60 E14C0000 		_ADR	SNAME
 3660 4e64 DD4D0000 		_ADR    OVERT 
 3661 4e68 0D2A0000 		_ADR	COMPI_NEST 
 3662 4e6c 214E0000 		_ADR	RBRAC
 3663 4e70 032A0000 		_UNNEST
 3664              	
 3665              	/*************************
 3666              	    IMMEDIATE   ( -- )
 3667              	 	Make the last compiled 
 3668              		word an immediate word.
 3669              	***************************/
 3670 4e74 544E0000 		_HEADER IMMED,9,"IMMEDIATE"
 3670      09494D4D 
 3670      45444941 
 3670      544500BF 
 3671 4e84 504700BF 		_NEST
 3672 4e88 C32B0000 		_DOLIT	IMEDD
 3672      80000000 
 3673 4e90 05330000 		_ADR	LAST
 3674 4e94 492C0000 		_ADR	AT
 3675 4e98 492C0000 		_ADR	AT
 3676 4e9c 952D0000 		_ADR	ORR
 3677 4ea0 05330000 		_ADR	LAST
 3678 4ea4 492C0000 		_ADR	AT
 3679 4ea8 352C0000 		_ADR	STORE
 3680 4eac 032A0000 		_UNNEST
 3681              	
 3682              	/******************
 3683              	  Defining words
 3684              	******************/
 3685              	
 3686              	/***********************************
 3687              	    CONSTANT	( u -- //  string> )
 3688              	 	Compile a new constant.
 3689              	************************************/
 3690 4eb0 784E0000 		_HEADER CONST,8,"CONSTANT"
 3690      08434F4E 
ARM GAS  forth.s 			page 175


 3690      5354414E 
 3690      540000BF 
 3691 4ec0 504700BF 		_NEST 
 3692 4ec4 6D420000 		_ADR	TOKEN
 3693 4ec8 E14C0000 		_ADR	SNAME
 3694 4ecc DD4D0000 		_ADR	OVERT
 3695 4ed0 0D2A0000 		_ADR	COMPI_NEST
 3696 4ed4 C32B0000 		_DOLIT	DOCON
 3696      C4310000 
 3697 4edc 394E0000 		_ADR	CALLC
 3698 4ee0 D1480000 		_ADR	COMMA
 3699 4ee4 C32B0000 		_DOLIT	UNNEST 
 3699      022A0000 
 3700 4eec 394E0000 		_ADR	CALLC  
 3701 4ef0 032A0000 		_UNNEST
 3702              	
 3703              		.p2align 2 
 3704              	/****************************************
 3705              	 doDOES> ( -- a )
 3706              	 runtime action of 		 
 3707              	 leave parameter field address on stack 
 3708              	hidden word used by compiler 
 3709              	***************************************/
 3710              	DODOES:
 3711 4ef4 504700BF 		_NEST 
 3712 4ef8 752C0000 		_ADR	RFROM
 3713 4efc 9D2E0000 		_ADR	CELLP 
 3714 4f00 5D2E0000 		_ADR	ONEP  
 3715 4f04 05330000 		_ADR LAST 
 3716 4f08 492C0000 		_ADR AT
 3717 4f0c 8D420000 		_ADR NAMET 
 3718 4f10 9D2E0000 		_ADR CELLP 
 3719 4f14 352C0000 		_ADR STORE  
 3720 4f18 032A0000 		_UNNEST 
 3721              	
 3722              		.p2align 2
 3723              	/**********************
 3724              	  DOES> ( -- )
 3725              	  compile time action
 3726              	*************************/
 3727 4f1c B44E0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3727      C5444F45 
 3727      533E00BF 
 3728 4f28 504700BF 		_NEST 
 3729 4f2c C32B0000 		_DOLIT DODOES 
 3729      F44E0000 
 3730 4f34 394E0000 		_ADR CALLC 
 3731 4f38 C32B0000 		_DOLIT	UNNEST
 3731      022A0000 
 3732 4f40 394E0000 		_ADR	CALLC 
 3733 4f44 0D2A0000 		_ADR COMPI_NEST
 3734 4f48 C32B0000 		_DOLIT RFROM 
 3734      742C0000 
 3735 4f50 394E0000 		_ADR	CALLC
 3736 4f54 032A0000 		_UNNEST 
 3737              	
 3738              	
ARM GAS  forth.s 			page 176


 3739              	/****************************
 3740              	  DEFER@ ( "name" -- a )
 3741              	  return value of code field 
 3742              	  of defered function. 
 3743              	******************************/
 3744 4f58 204F0000 		_HEADER DEFERAT,6,"DEFER@"
 3744      06444546 
 3744      45524000 
 3745 4f64 504700BF 		_NEST 
 3746 4f68 91480000 		_ADR TICK
 3747 4f6c 9D2E0000 		_ADR CELLP 
 3748 4f70 492C0000 		_ADR AT 
 3749 4f74 6D2E0000 		_ADR ONEM 
 3750 4f78 032A0000 		_UNNEST 
 3751              	
 3752              	/*********************************
 3753              	 DEFER! ( "name1" "name2" -- )
 3754              	 assign an action to a defered word 
 3755              	************************************/
 3756 4f7c 5C4F0000 		_HEADER DEFERSTO,6,"DEFER!"
 3756      06444546 
 3756      45522100 
 3757 4f88 504700BF 		_NEST 
 3758 4f8c 91480000 		_ADR TICK 
 3759 4f90 5D2E0000 		_ADR ONEP 
 3760 4f94 91480000 		_ADR TICK 
 3761 4f98 9D2E0000 		_ADR CELLP 
 3762 4f9c 352C0000 		_ADR STORE 
 3763 4fa0 032A0000 		_UNNEST
 3764              	
 3765              	/****************************
 3766              	  DEFER ( "name" -- )
 3767              	  create a defered definition
 3768              	*****************************/
 3769 4fa4 804F0000 		_HEADER DEFER,5,"DEFER"
 3769      05444546 
 3769      455200BF 
 3770 4fb0 504700BF 		_NEST 
 3771 4fb4 01500000 		_ADR CREAT 
 3772 4fb8 C32B0000 		_DOLIT UNNEST 
 3772      022A0000 
 3773 4fc0 394E0000 		_ADR CALLC 
 3774 4fc4 C32B0000 		_DOLIT DEFER_NOP
 3774      E84F0000 
 3775 4fcc 5D2E0000 		_ADR ONEP 
 3776 4fd0 05330000 		_ADR LAST 
 3777 4fd4 492C0000 		_ADR AT 
 3778 4fd8 8D420000 		_ADR NAMET 
 3779 4fdc 9D2E0000 		_ADR CELLP 
 3780 4fe0 352C0000 		_ADR STORE 
 3781 4fe4 032A0000 		_UNNEST 
 3782              	DEFER_NOP:
 3783 4fe8 504700BF 		_NEST  
 3784 4fec C12B0000 		_ADR NOP 
 3785 4ff0 032A0000 		_UNNEST 
 3786              	
 3787              	/******************************
ARM GAS  forth.s 			page 177


 3788              	    CREATE	( -- //  string> )
 3789              	 	Compile a new array entry 
 3790              		without allocating code space.
 3791              	***********************************/
 3792 4ff4 A84F0000 		_HEADER CREAT,6,"CREATE"
 3792      06435245 
 3792      41544500 
 3793 5000 504700BF 		_NEST 
 3794 5004 6D420000 		_ADR	TOKEN
 3795 5008 E14C0000 		_ADR	SNAME
 3796 500c DD4D0000 		_ADR	OVERT
 3797 5010 0D2A0000 		_ADR	COMPI_NEST 
 3798 5014 C32B0000 		_DOLIT	DOVAR
 3798      B8310000 
 3799 501c 394E0000 		_ADR	CALLC
 3800 5020 032A0000 		_UNNEST
 3801              	
 3802              	/*******************************
 3803              	    VARIABLE	( -- //  string> )
 3804              	 	Compile a new variable 
 3805              		initialized to 0.
 3806              	***********************************/
 3807 5024 F84F0000 		_HEADER VARIA,8,"VARIABLE"
 3807      08564152 
 3807      4941424C 
 3807      450000BF 
 3808 5034 504700BF 		_NEST
 3809 5038 01500000 		_ADR	CREAT
 3810 503c C32B0000 		_DOLIT	0
 3810      00000000 
 3811 5044 D1480000 		_ADR	COMMA
 3812 5048 C32B0000 		_DOLIT UNNEST
 3812      022A0000 
 3813 5050 394E0000 		_ADR	CALLC  
 3814 5054 032A0000 		_UNNEST
 3815              	
 3816              	
 3817              	/***********
 3818              	  Tools
 3819              	***********/
 3820              	
 3821              	/*************************
 3822              	    dm+	 ( a u -- a )
 3823              	 	Dump u bytes from , 
 3824              		leaving a+u on the stack.
 3825              	hidden word used by DUMP 
 3826              	****************************/
 3827              	DMP:
 3828 5058 504700BF 		_NEST
 3829 505c 612D0000 		_ADR	OVER
 3830 5060 C32B0000 		_DOLIT	4
 3830      04000000 
 3831 5068 CD3D0000 		_ADR	UDOTR			// display address
 3832 506c 993C0000 		_ADR	SPACE
 3833 5070 B92C0000 		_ADR	TOR			// start count down loop
 3834 5074 172C0000 		_BRAN	PDUM2			// skip first pass
 3834      94500000 
ARM GAS  forth.s 			page 178


 3835              	PDUM1:
 3836 507c 3D2D0000 	  _ADR	DUPP
 3837 5080 692C0000 		_ADR	CAT
 3838 5084 C32B0000 		_DOLIT	3
 3838      03000000 
 3839 508c CD3D0000 		_ADR	UDOTR			// display numeric data
 3840 5090 5D2E0000 		_ADR	ONEP			// increment address
 3841              	PDUM2:
 3842 5094 E52B0000 	  _ADR	DONXT
 3843 5098 7C500000 		.word	PDUM1	// loop till done
 3844 509c 032A0000 		_UNNEST
 3845              		.p2align 2 
 3846              	//    DUMP	( a u -- )
 3847              	// 	Dump u bytes from a, in a formatted manner.
 3848              	
 3849              	/**********************
 3850              		DUMP ( a n -- )
 3851              		hex dump memory 
 3852              	*********************/
 3853 50a0 28500000 		_HEADER DUMP,4,"DUMP"
 3853      0444554D 
 3853      500000BF 
 3854 50ac 504700BF 		_NEST
 3855 50b0 C32B0000 		_DOLIT  15 
 3855      0F000000 
 3856 50b8 012E0000 		_ADR    PLUS 
 3857 50bc C32B0000 		_DOLIT  0xFFFFFFF0 
 3857      F0FFFFFF 
 3858 50c4 812D0000 		_ADR    ANDD 
 3859 50c8 4D2D0000 		_ADR    SWAP 
 3860 50cc C32B0000 		_DOLIT  0xFFFFFFFC
 3860      FCFFFFFF 
 3861 50d4 812D0000 		_ADR    ANDD 
 3862 50d8 4D2D0000 		_ADR    SWAP 
 3863 50dc 31320000 		_ADR	BASE
 3864 50e0 492C0000 		_ADR	AT
 3865 50e4 B92C0000 		_ADR	TOR
 3866 50e8 91390000 		_ADR	HEX			// save radix,set hex
 3867 50ec C32B0000 		_DOLIT	16
 3867      10000000 
 3868 50f4 99350000 		_ADR	SLASH			// change count to lines
 3869 50f8 B92C0000 		_ADR	TOR
 3870 50fc 172C0000 		_BRAN	DUMP4			// start count down loop
 3870      2C510000 
 3871              	DUMP1:
 3872 5104 213D0000 	    _ADR	CR
 3873 5108 C32B0000 		_DOLIT	16
 3873      10000000 
 3874 5110 752F0000 		_ADR	DDUP
 3875 5114 59500000 		_ADR	DMP			// display numeric
 3876 5118 252F0000 		_ADR	ROT
 3877 511c 252F0000 		_ADR	ROT
 3878 5120 993C0000 		_ADR	SPACE
 3879 5124 993C0000 		_ADR	SPACE
 3880 5128 ED3C0000 		_ADR	TYPEE			// display printable characters
 3881              	DUMP4:
 3882 512c E52B0000 	  _DONXT	DUMP1	// loop till done
ARM GAS  forth.s 			page 179


 3882      04510000 
 3883              	DUMP3:
 3884 5134 2D2D0000 		_ADR	DROP
 3885 5138 752C0000 		_ADR	RFROM
 3886 513c 31320000 		_ADR	BASE
 3887 5140 352C0000 		_ADR	STORE			// restore radix
 3888 5144 032A0000 		_UNNEST
 3889              	
 3890              	/*******************************
 3891              	   TRACE. display in hexadecimal
 3892              	   TRACE. use a different buffer 
 3893              	   than DOT  to avoid current 
 3894              	   display overwrite.
 3895              	*******************************/ 
 3896              	TDOT: // ( u -- )
 3897 5148 504700BF 		_NEST 
 3898 514c 31320000 		_ADR BASE 
 3899 5150 492C0000 		_ADR AT 
 3900 5154 B92C0000 		_ADR TOR
 3901 5158 91390000 		_ADR HEX  
 3902 515c AD320000 		_ADR HLD 
 3903 5160 492C0000 		_ADR AT 
 3904 5164 B92C0000 		_ADR TOR   // R: base *hold 
 3905 5168 AD360000 		_ADR HERE 
 3906 516c C32B0000 		_DOLIT 160 
 3906      A0000000 
 3907 5174 012E0000 		_ADR PLUS
 3908 5178 3D2D0000 		_ADR DUPP 
 3909 517c B92C0000 		_ADR TOR  
 3910 5180 AD320000 		_ADR HLD 
 3911 5184 352C0000 		_ADR STORE
 3912 5188 C32B0000 		_DOLIT 0  
 3912      00000000 
 3913 5190 E1380000 		_ADR DIGS  
 3914 5194 2D2D0000 		_ADR DROP
 3915 5198 C32B0000 		_DOLIT '$'
 3915      24000000 
 3916 51a0 95380000 		_ADR HOLD 
 3917 51a4 AD320000 		_ADR HLD 
 3918 51a8 492C0000 		_ADR AT
 3919 51ac 752C0000 		_ADR RFROM   
 3920 51b0 612D0000 		_ADR OVER 
 3921 51b4 112E0000 		_ADR SUBB 
 3922 51b8 993C0000 		_ADR SPACE 
 3923 51bc ED3C0000 		_ADR TYPEE 
 3924 51c0 752C0000 		_ADR RFROM 
 3925 51c4 AD320000 		_ADR HLD 
 3926 51c8 352C0000 		_ADR STORE 
 3927 51cc 752C0000 		_ADR RFROM 
 3928 51d0 31320000 		_ADR BASE 
 3929 51d4 352C0000 		_ADR STORE 
 3930 51d8 032A0000 		_UNNEST 
 3931              	
 3932              	/**********************
 3933              	   .S	  ( ... -- ... )
 3934              	 	Display the contents 
 3935              		of the data stack.
ARM GAS  forth.s 			page 180


 3936              	*************************/
 3937 51dc A4500000 		_HEADER DOTS,2,".S"
 3937      022E5300 
 3938 51e4 504700BF 		_NEST
 3939 51e8 61360000 		_ADR	DEPTH	// stack depth
 3940 51ec B92C0000 		_ADR	TOR		// start count down loop
 3941 51f0 172C0000 		_BRAN	DOTS2  // skip first pass
 3941      04520000 
 3942              	DOTS1:
 3943 51f8 A52C0000 		_ADR	RAT
 3944 51fc 85360000 		_ADR	PICK
 3945 5200 49510000 		_ADR	TDOT // index stack, display contents
 3946              	DOTS2:
 3947 5204 E52B0000 		_DONXT	DOTS1 // loop till done
 3947      F8510000 
 3948 520c 213D0000 		_ADR	CR 
 3949 5210 032A0000 		_UNNEST
 3950              	
 3951              	RBASE: 
 3952 5214 47F8046D 		_PUSH 
 3953 5218 4FF47F46 		_MOV32 TOS,RPP 
 3953      C2F20106 
 3954 5220 FDF7ECBB 		_NEXT 
 3955              	
 3956              	
 3957              	/**************************
 3958              	  R.  display return stack 
 3959              	**************************/
 3960              	RDOT: 
 3961 5224 504700BF 		_NEST 
 3962 5228 15520000 		_ADR RBASE
 3963 522c 192D0000 		_ADR RPAT 
 3964 5230 112E0000 		_ADR SUBB
 3965 5234 E12E0000 		_ADR CELLSL   
 3966 5238 C32B0000 		_DOLIT 2
 3966      02000000 
 3967 5240 112E0000 		_ADR SUBB 
 3968 5244 B92C0000 		_ADR TOR
 3969 5248 15520000 		_ADR RBASE 
 3970 524c AD2E0000 	1:	_ADR CELLM 
 3971 5250 3D2D0000 		_ADR DUPP 
 3972 5254 492C0000 		_ADR AT 
 3973 5258 49510000 		_ADR TDOT 
 3974 525c 752C0000 		_ADR RFROM   
 3975 5260 6D2E0000 		_ADR ONEM 
 3976 5264 3D2D0000 		_ADR DUPP
 3977 5268 B92C0000 		_ADR TOR 
 3978 526c 75300000 		_ADR ZEQUAL   
 3979 5270 032C0000 		_QBRAN 1b
 3979      4C520000 
 3980 5278 752C0000 		_ADR RFROM  
 3981 527c 4D2F0000 		_ADR DDROP
 3982 5280 213D0000 		_ADR CR   
 3983 5284 032A0000 		_UNNEST 
 3984              	
 3985              	/**************************
 3986              		TRACE ( -- )
ARM GAS  forth.s 			page 181


 3987              		display stacks content 
 3988              	**************************/
 3989 5288 E0510000 		_HEADER TRACE,5,"TRACE"
 3989      05545241 
 3989      434500BF 
 3990 5294 504700BF 		_NEST
 3991 5298 213D0000 		_ADR CR 
 3992 529c C32B0000 		_DOLIT '>' 
 3992      3E000000 
 3993 52a4 C32B0000 		_DOLIT 'S'
 3993      53000000 
 3994 52ac CD2A0000 		_ADR EMIT 
 3995 52b0 CD2A0000 		_ADR EMIT  
 3996 52b4 E5510000 		_ADR DOTS
 3997 52b8 C32B0000 		_DOLIT '>'
 3997      3E000000 
 3998 52c0 C32B0000 		_DOLIT 'R'
 3998      52000000 
 3999 52c8 CD2A0000 		_ADR EMIT 
 4000 52cc CD2A0000 		_ADR EMIT 
 4001 52d0 25520000 		_ADR RDOT 
 4002 52d4 032A0000 		_UNNEST 
 4003              	
 4004              	
 4005              	/*****************************
 4006              	    >NAME	( ca -- na | F )
 4007              	 	Convert code address 
 4008              		to a name address.
 4009              	*****************************/
 4010 52d8 8C520000 		_HEADER TNAME,5,">NAME"
 4010      053E4E41 
 4010      4D4500BF 
 4011 52e4 504700BF 		_NEST
 4012 52e8 B92C0000 		_ADR	TOR			//  
 4013 52ec C5320000 		_ADR	CNTXT			//  va
 4014 52f0 492C0000 		_ADR	AT			//  na
 4015              	TNAM1:
 4016 52f4 3D2D0000 		_ADR	DUPP			//  na na
 4017 52f8 032C0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4017      28530000 
 4018 5300 3D2D0000 		_ADR	DUPP			//  na na
 4019 5304 8D420000 		_ADR	NAMET			//  na ca
 4020 5308 A52C0000 		_ADR	RAT			//  na ca code
 4021 530c A92D0000 		_ADR	XORR			//  na f --
 4022 5310 032C0000 		_QBRAN	TNAM2
 4022      28530000 
 4023 5318 AD2E0000 		_ADR	CELLM			//  la 
 4024 531c 492C0000 		_ADR	AT			//  next_na
 4025 5320 172C0000 		_BRAN	TNAM1
 4025      F4520000 
 4026              	TNAM2:	
 4027 5328 752C0000 		_ADR	RFROM
 4028 532c 2D2D0000 		_ADR	DROP			//  0|na --
 4029 5330 032A0000 		_UNNEST			// 0
 4030              	
 4031              	/********************************
 4032              	    .ID	 ( na -- )
ARM GAS  forth.s 			page 182


 4033              	 	Display the name at address.
 4034              	********************************/
 4035 5334 DC520000 		_HEADER DOTID,3,".ID"
 4035      032E4944 
 4036 533c 504700BF 		_NEST
 4037 5340 112F0000 		_ADR	QDUP			// if zero no name
 4038 5344 032C0000 		_QBRAN	DOTI1
 4038      64530000 
 4039 534c 91310000 		_ADR	COUNT
 4040 5350 C32B0000 		_DOLIT	0x1F
 4040      1F000000 
 4041 5358 812D0000 		_ADR	ANDD			// mask lexicon bits
 4042 535c ED3C0000 		_ADR	TYPEE
 4043 5360 032A0000 		_UNNEST			// display name string
 4044              	DOTI1:
 4045 5364 893D0000 		_DOTQP	9," {noName}"
 4045      09207B6E 
 4045      6F4E616D 
 4045      657D00BF 
 4046 5374 032A0000 		_UNNEST
 4047              	
 4048              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4049              	.if WANT_SEE 
 4050              	/*******************************
 4051              	    SEE	 ( -- //  string> )
 4052              	 	A simple decompiler.
 4053              	*******************************/
 4054              		_HEADER SEE,3,"SEE"
 4055              		_NEST
 4056              		_ADR	TICK	//  ca --, starting address
 4057              		_ADR	CR	
 4058              		_DOLIT	20
 4059              		_ADR	TOR
 4060              	SEE1:
 4061              		_ADR	CELLP			//  a
 4062              		_ADR	DUPP			//  a a
 4063              		_ADR	DECOMP		//  a
 4064              		_DONXT	SEE1
 4065              		_ADR	DROP
 4066              		_UNNEST
 4067              	
 4068              	/*************************
 4069              	 	DECOMPILE ( a -- )
 4070              	 	Convert code in a.  
 4071              		Display name of command or as data.
 4072              	*************************************/
 4073              		_HEADER DECOMP,9,"DECOMPILE"
 4074              		_NEST
 4075              		_ADR	DUPP			//  a a
 4076              	// 	_ADR	TOR			//  a
 4077              		_ADR	AT			//  a code
 4078              		_ADR	DUPP			//  a code code
 4079              		_DOLIT	0xF800D000 //0xF800F800
 4080              		_ADR	ANDD
 4081              		_DOLIT	0xF000D000 //0xF800F000
 4082              		_ADR	EQUAL			//  a code ?
 4083              		_ADR	INVER 
ARM GAS  forth.s 			page 183


 4084              		_QBRAN	DECOM2	//  not a command
 4085              		//  a valid_code --, extract address and display name
 4086              		MOVW	IP,#0xFFE
 4087              		MOV	WP,TOS
 4088              		LSL	TOS,TOS,#21		//  get bits 22-12
 4089              		ASR	TOS,TOS,#9		//  with sign extension
 4090              		LSR	WP,WP,#15		//  get bits 11-1
 4091              		AND	WP,WP,IP		//  retain only bits 11-1
 4092              		ORR	TOS,TOS,WP		//  get bits 22-1
 4093              		NOP
 4094              		_ADR	OVER			//  a offset a
 4095              		_ADR	PLUS			//  a target-4
 4096              		_ADR	CELLP			//  a target
 4097              		_ADR	TNAME			//  a na/0 --, is it a name?
 4098              		_ADR	QDUP			//  name address or zero
 4099              		_QBRAN	DECOM1
 4100              		_ADR	SPACE			//  a na
 4101              		_ADR	DOTID			//  a --, display name
 4102              	// 	_ADR	RFROM			//  a
 4103              		_ADR	DROP
 4104              		_UNNEST
 4105              	DECOM1:	// _ADR	RFROM		//  a
 4106              		_ADR	AT			//  data
 4107              		_ADR	UDOT			//  display data
 4108              		_UNNEST
 4109              	DECOM2:
 4110              		_ADR	UDOT
 4111              	// 	_ADR	RFROM
 4112              		_ADR	DROP
 4113              		_UNNEST
 4114              	.endif 
 4115              	
 4116              	/**********************
 4117              		VLIST ( -- )
 4118              		WORDS alias 
 4119              		+ display words count 
 4120              	**********************/
 4121 5378 38530000 		_HEADER VLIST,5,"VLIST"
 4121      05564C49 
 4121      535400BF 
 4122 5384 504700BF 		_NEST 
 4123 5388 A9530000 		_ADR WORDS
 4124 538c 213D0000 		_ADR CR 
 4125 5390 ED530000 		_ADR WC
 4126 5394 393E0000 		_ADR DOT    
 4127 5398 032A0000 		_UNNEST 
 4128              	
 4129              	/*********************
 4130              	    WORDS	( -- )
 4131              	 	Display the names 
 4132              		in the context vocabulary.
 4133              	*******************************/
 4134 539c 7C530000 		_HEADER WORDS,5,"WORDS"
 4134      05574F52 
 4134      445300BF 
 4135 53a8 504700BF 		_NEST
 4136 53ac 213D0000 		_ADR	CR
ARM GAS  forth.s 			page 184


 4137 53b0 C5320000 		_ADR	CNTXT
 4138 53b4 492C0000 		_ADR	AT			// only in context
 4139              	WORS1:
 4140 53b8 112F0000 		_ADR	QDUP			// ?at end of list
 4141 53bc 032C0000 		_QBRAN	WORS2
 4141      E0530000 
 4142 53c4 3D2D0000 		_ADR	DUPP
 4143 53c8 993C0000 		_ADR	SPACE
 4144 53cc 3D530000 		_ADR	DOTID			// display a name
 4145 53d0 AD2E0000 		_ADR	CELLM
 4146 53d4 492C0000 		_ADR	AT
 4147 53d8 172C0000 		_BRAN	WORS1
 4147      B8530000 
 4148              	WORS2:
 4149 53e0 032A0000 		_UNNEST
 4150              	
 4151              	/*****************************
 4152              		WC ( - n )
 4153              		count words in dictionary 
 4154              	******************************/
 4155 53e4 A0530000 		_HEADER WC,2,"WC"
 4155      02574300 
 4156 53ec 504700BF 		_NEST 
 4157 53f0 C32B0000 		_DOLIT 0 
 4157      00000000 
 4158 53f8 05330000 		_ADR LAST
 4159 53fc 492C0000 	1:	_ADR AT
 4160 5400 112F0000 		_ADR QDUP
 4161 5404 032C0000 		_QBRAN 9f
 4161      24540000 
 4162 540c 4D2D0000 		_ADR SWAP
 4163 5410 5D2E0000 		_ADR ONEP
 4164 5414 4D2D0000 		_ADR SWAP
 4165 5418 AD2E0000 		_ADR CELLM
 4166 541c 172C0000 		_BRAN 1b
 4166      FC530000 
 4167 5424 032A0000 	9:	_UNNEST 
 4168              	
 4169              	/*************************
 4170              		MARK <string> ( -- )
 4171              	    create forget point 
 4172              		in dictionary 
 4173              	*************************/	
 4174 5428 E8530000 		_HEADER MARK,4,"MARK"
 4174      044D4152 
 4174      4B0000BF 
 4175 5434 504700BF 		_NEST
 4176 5438 01500000 		_ADR CREAT 
 4177 543c F54E0000 		_ADR DODOES 
 4178 5440 032A0000 		_UNNEST
 4179 5444 504700BF 		_NEST  
 4180 5448 752C0000 		_ADR RFROM 
 4181 544c C32B0000 		_DOLIT 8
 4181      08000000 
 4182 5454 112E0000 		_ADR SUBB
 4183 5458 E5520000 		_ADR TNAME
 4184 545c AD2E0000 		_ADR CELLM
ARM GAS  forth.s 			page 185


 4185 5460 492C0000 		_ADR AT  
 4186 5464 05330000 		_ADR LAST 
 4187 5468 352C0000 		_ADR STORE 
 4188 546c DD4D0000 		_ADR OVERT
 4189 5470 032A0000 		_UNNEST 
 4190              	
 4191              	/*********************************
 4192              		ARRAY "name" ( n -- )
 4193              	    create an array of n elements 
 4194              	*********************************/
 4195 5474 2C540000 		_HEADER ARRAY,5,"ARRAY"
 4195      05415252 
 4195      415900BF 
 4196 5480 504700BF 		_NEST 
 4197 5484 6D420000 		_ADR	TOKEN
 4198 5488 E14C0000 		_ADR	SNAME
 4199 548c DD4D0000 		_ADR	OVERT
 4200 5490 0D2A0000 		_ADR	COMPI_NEST
 4201 5494 C32B0000 		_DOLIT	DO_ARRAY
 4201      C0540000 
 4202 549c 394E0000 		_ADR	CALLC
 4203 54a0 C32B0000 		_DOLIT	UNNEST 
 4203      022A0000 
 4204 54a8 394E0000 		_ADR	CALLC  
 4205 54ac C32B0000 		_DOLIT  4 
 4205      04000000 
 4206 54b4 212E0000 		_ADR    STAR 
 4207 54b8 B9480000 		_ADR    ALLOT 
 4208 54bc 032A0000 		_UNNEST 	
 4209              	
 4210              	// does> du array
 4211              	DO_ARRAY:
 4212 54c0 504700BF 		_NEST  
 4213 54c4 C32B0000 		_DOLIT 4 
 4213      04000000 
 4214 54cc 212E0000 		_ADR STAR  
 4215 54d0 A52C0000 		_ADR RAT  
 4216 54d4 9D2E0000 		_ADR CELLP 
 4217 54d8 012E0000 		_ADR PLUS  
 4218 54dc 032A0000 		_UNNEST 
 4219              	
 4220              	
 4221              	/****************
 4222              	  cold start
 4223              	*****************/
 4224              	
 4225              	/**********************************
 4226              	    VER	 ( -- n )
 4227              	 	Return the version 
 4228              		number of this implementation.
 4229              	hidden word used by COLD
 4230              	**********************************/
 4231              	VERSN:
 4232 54e0 504700BF 		_NEST
 4233 54e4 C32B0000 		_DOLIT	VER*256+EXT
 4233      00010000 
 4234 54ec 032A0000 		_UNNEST
ARM GAS  forth.s 			page 186


 4235              	
 4236              	/*********************
 4237              	    hi	  ( -- )
 4238              	 	Display the sign-on 
 4239              		message.
 4240              	***********************/
 4241 54f0 78540000 		_HEADER HI,2,"HI"
 4241      02484900 
 4242 54f8 504700BF 		_NEST
 4243 54fc 213D0000 		_ADR	CR	// initialize I/O
 4244 5500 893D0000 		_DOTQP	17, "beyond Jupiter, v" 
 4244      11626579 
 4244      6F6E6420 
 4244      4A757069 
 4244      7465722C 
 4245 5518 31320000 		_ADR	BASE
 4246 551c 492C0000 		_ADR	AT
 4247 5520 91390000 		_ADR	HEX	// save radix
 4248 5524 E1540000 		_ADR	VERSN
 4249 5528 75380000 		_ADR	BDIGS
 4250 552c C32B0000 		_DOLIT  0 
 4250      00000000 
 4251 5534 C1380000 		_ADR	DIG
 4252 5538 C1380000 		_ADR	DIG
 4253 553c C32B0000 		_DOLIT	'.'
 4253      2E000000 
 4254 5544 95380000 		_ADR	HOLD
 4255 5548 E1380000 		_ADR	DIGS
 4256 554c 3D390000 		_ADR	EDIGS
 4257 5550 ED3C0000 		_ADR	TYPEE	// format version number
 4258 5554 31320000 		_ADR	BASE
 4259 5558 352C0000 		_ADR	STORE
 4260 555c 213D0000 		_ADR	CR
 4261 5560 032A0000 		_UNNEST			// restore radix
 4262              	
 4263              	/***********************
 4264              	   HI_BOTH ( -- )
 4265              	   display sign-on 
 4266              	   on both CONSOLE
 4267              	***********************/
 4268              	HI_BOTH:
 4269 5564 504700BF 	    _NEST 
 4270 5568 69090000 		_ADR LOCAL 
 4271 556c 99090000 		_ADR CONSOLE 
 4272 5570 F9540000 		_ADR HI 
 4273 5574 81090000 		_ADR SERIAL 
 4274 5578 99090000 		_ADR CONSOLE 
 4275 557c F9540000 		_ADR HI
 4276 5580 032A0000 		_UNNEST 
 4277              	
 4278              	/**********************
 4279              	 check if PS2 keyboard 
 4280              	 present.
 4281              	**********************/
 4282              	PS2_QUERY: 
 4283 5584 504700BF 		_NEST 
 4284 5588 C32B0000 		_DOLIT 400 
ARM GAS  forth.s 			page 187


 4284      90010000 
 4285 5590 652B0000 		_ADR PAUSE
 4286 5594 89170000 		_ADR PS2_QKEY
 4287 5598 032C0000 		_QBRAN 1f
 4287      B4550000 
 4288 55a0 C32B0000 		_DOLIT BAT_OK 
 4288      AA000000 
 4289 55a8 A92D0000 		_ADR XORR 
 4290 55ac 032C0000 		_QBRAN 9f 
 4290      F8550000 
 4291 55b4 71190000 	1:	_ADR KBD_RST
 4292 55b8 C32B0000 		_DOLIT BAT_OK 
 4292      AA000000 
 4293 55c0 A92D0000 		_ADR XORR  
 4294 55c4 032C0000 		_QBRAN 9f  
 4294      F8550000 
 4295              	// no ps2 keyboard 
 4296              	// swith to serial console
 4297 55cc 213D0000 		_ADR CR 
 4298 55d0 893D0000 		_DOTQP 25,"no PS2 keyboard detected."
 4298      196E6F20 
 4298      50533220 
 4298      6B657962 
 4298      6F617264 
 4299 55f0 81090000 		_ADR SERIAL 
 4300 55f4 99090000 		_ADR CONSOLE 
 4301 55f8 032A0000 	9:	_UNNEST 
 4302              	
 4303              	/*************************
 4304              	   check PA8 to 
 4305              	   select console 
 4306              	   PA8 -> low  LOCAL 
 4307              	   PA8 -> high SERIAL 
 4308              	*************************/
 4309              	IF_SENSE:
 4310 55fc 504700BF 		_NEST 
 4311 5600 69090000 		_ADR LOCAL 
 4312 5604 C32B0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4312      10000240 
 4313 560c 492C0000 		_ADR AT 
 4314 5610 C32B0000 		_DOLIT (1<<8)
 4314      00010000 
 4315 5618 812D0000 		_ADR ANDD 
 4316 561c 032C0000 		_QBRAN 9f 
 4316      28560000 
 4317 5624 5D2E0000 		_ADR ONEP 
 4318 5628 99090000 	9:  _ADR CONSOLE 
 4319 562c 032A0000 		_UNNEST 
 4320              	
 4321              	/****************************
 4322              	   display READY on active
 4323              	   console
 4324              	***************************/
 4325              	READY:
 4326 5630 504700BF 	    _NEST 
 4327 5634 893D0000 		_DOTQP 5,"READY"
 4327      05524541 
ARM GAS  forth.s 			page 188


 4327      445900BF 
 4328 5640 213D0000 		_ADR  CR 
 4329 5644 032A0000 	    _UNNEST 
 4330              	
 4331              	/********************
 4332              	    COLD	( -- )
 4333              	 	The high level cold 
 4334              		start sequence.
 4335              	**************************/
 4336 5648 F4540000 		.word	LINK 
 4337              		LINK = . 
 4338 564c 04       	_LASTN:	.byte  4
 4339 564d 434F4C44 		.ascii "COLD"
 4340 5651 0000BF   		.p2align 2	
 4341              	COLD:
 4342 5654 00B5FAF7 		_CALL forth_init 
 4342      41FF5DF8 
 4342      04EB
 4343 565e DFF85CC0 		ldr IP,=COLD1 
 4344 5662 FDF7CBB9 		_NEXT
 4345 5666 00BF     		.p2align 2 
 4346              	COLD1:
 4347 5668 C32B0000 		_DOLIT  0 
 4347      00000000 
 4348 5670 992B0000 		_ADR ULED // turn off user LED 
 4349 5674 C32B0000 		_DOLIT	UZERO
 4349      98070000 
 4350 567c C32B0000 		_DOLIT	UPP
 4350      00000020 
 4351 5684 C32B0000 		_DOLIT	ULAST-UZERO
 4351      B0000000 
 4352 568c 4D370000 		_ADR	MOVE 			// initialize user area
 4353 5690 F1470000 		_ADR	PRESE			// initialize stack and TIB
 4354 5694 1D1C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4355 5698 85550000 		_ADR 	PS2_QUERY  
 4356 569c 19320000 		_ADR	TBOOT
 4357 56a0 FD360000 		_ADR	ATEXE			// application boot
 4358 56a4 DD4D0000 		_ADR	OVERT
 4359 56a8 FD550000 		_ADR	IF_SENSE
 4360 56ac 31560000 		_ADR    READY 
 4361 56b0 172C0000 		_BRAN	QUIT			// start interpretation
 4361      10480000 
 4362              	COLD2:
 4363              		.p2align 2 	
 4364              	CTOP:
 4365 56b8 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4366              	
 4367              	
 4368 56bc 68560000 	  .end 
ARM GAS  forth.s 			page 189


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 190


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 191


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 192


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 193


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 194


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
ARM GAS  forth.s 			page 195


          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:3055   .text:00000000000047ac EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:470    .text:00000000000004a0 reset_handler
              init.s:299    .text:0000000000000244 nmi_handler
              init.s:317    .text:000000000000027c hardfault_handler
              init.s:336    .text:00000000000002b8 memfault_handler
              init.s:363    .text:0000000000000324 busfault_handler
              init.s:396    .text:00000000000003b8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:422    .text:000000000000041c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000b90 tv_out_isr
          ser-term.s:35     .text:0000000000000874 uart_rx_handler
           ps2_kbd.s:78     .text:000000000000146c kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:491    .text:00000000000004dc forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:00000000000029fc INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3076   .text:00000000000047f0 PRESE
             forth.s:2238   .text:0000000000003d88 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002a4c CFSR
             forth.s:494    .text:0000000000002d3c DUPP
             forth.s:429    .text:0000000000002cb8 TOR
             forth.s:292    .text:0000000000002bc2 DOLIT
             forth.s:1119   .text:0000000000003230 BASE
             forth.s:363    .text:0000000000002c34 STORE
ARM GAS  forth.s 			page 196


             forth.s:2288   .text:0000000000003e10 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:400    .text:0000000000002c74 RFROM
             forth.s:529    .text:0000000000002d80 ANDD
             forth.s:333    .text:0000000000002c02 QBRAN
             forth.s:144    .text:0000000000002a70 BFAR
             forth.s:178    .text:0000000000002acc EMIT
             forth.s:2134   .text:0000000000003c98 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:89     .text:0000000000001f4c FPSCR
              init.s:452    .text:0000000000000478 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:658    .text:0000000000000678 nvic_disable_irq
              init.s:201    .text:00000000000000c2 fpu_except
              init.s:202    .text:00000000000000c2 $d
             forth.s:2180   .text:0000000000003d20 CR
             forth.s:373    .text:0000000000002c48 AT
              init.s:211    .text:0000000000000100 $d
             forth.s:2303   .text:0000000000003e38 DOT
             forth.s:725    .text:0000000000002f10 QDUP
              init.s:264    .text:00000000000001e8 fpu_exceptions
             forth.s:586    .text:0000000000002e00 PLUS
             forth.s:1032   .text:0000000000003190 COUNT
             forth.s:2162   .text:0000000000003cec TYPEE
             forth.s:869    .text:0000000000003044 CLZ
             forth.s:502    .text:0000000000002d4c SWAP
             forth.s:595    .text:0000000000002e10 SUBB
             forth.s:577    .text:0000000000002df0 LSHIFT
               fpu.s:102    .text:0000000000001f6c CLR_FPSCR
              init.s:251    .text:00000000000001c8 exit_fpu_isr
             forth.s:3088   .text:0000000000004810 QUIT
              init.s:252    .text:00000000000001c8 $t
              init.s:641    .text:000000000000064e nvic_enable_irq
              init.s:264    .text:00000000000001e8 $d
              init.s:267    .text:00000000000001fc fpu_except_invalid_op
              init.s:272    .text:0000000000000210 fpu_except_div0
              init.s:277    .text:0000000000000220 fpu_except_overflow
              init.s:282    .text:000000000000022c fpu_except_underflow
              init.s:287    .text:0000000000000238 fpu_except_inexact
              init.s:268    .text:00000000000001fc $d
              init.s:273    .text:0000000000000210 $d
              init.s:278    .text:0000000000000220 $d
              init.s:281    .text:000000000000022a $t
              init.s:283    .text:000000000000022c $d
              init.s:288    .text:0000000000000238 $d
              init.s:302    .text:000000000000024c nmi_hl
              init.s:303    .text:000000000000024c $d
              init.s:305    .text:0000000000000272 $t
              init.s:306    .text:0000000000000274 $d
             forth.s:2954   .text:0000000000004668 ABORT
              init.s:315    .text:000000000000027c $t
              init.s:322    .text:000000000000028e hardfault_hl
              init.s:323    .text:000000000000028e $d
              init.s:326    .text:00000000000002b0 $d
              init.s:334    .text:00000000000002b8 $t
              init.s:341    .text:00000000000002ca memfault_hl
ARM GAS  forth.s 			page 197


              init.s:342    .text:00000000000002ca $d
              init.s:345    .text:00000000000002f8 $d
              init.s:361    .text:0000000000000324 $t
              init.s:368    .text:0000000000000336 busfault_hl
              init.s:369    .text:0000000000000336 $d
             forth.s:261    .text:0000000000002b98 ULED
             forth.s:1092   .text:00000000000031ec MSEC
              init.s:377    .text:000000000000037e $t
              init.s:378    .text:0000000000000380 $d
              init.s:385    .text:00000000000003ac $d
              init.s:394    .text:00000000000003b8 $t
              init.s:401    .text:00000000000003ca usagefault_hl
              init.s:402    .text:00000000000003ca $d
              init.s:404    .text:00000000000003ee $t
              init.s:405    .text:00000000000003f0 $d
             forth.s:568    .text:0000000000002dd8 RSHIFT
              init.s:420    .text:000000000000041c $t
              init.s:431    .text:0000000000000436 systick_exit
              init.s:434    .text:0000000000000438 user_reboot
              init.s:438    .text:000000000000044a ur
              init.s:439    .text:000000000000044a $d
              init.s:447    .text:0000000000000468 user_reboot_msg
              init.s:446    .text:0000000000000466 $t
              init.s:448    .text:0000000000000468 $d
              init.s:595    .text:00000000000005dc remap
              init.s:504    .text:0000000000000504 init_devices
               fpu.s:71     .text:0000000000001f16 fpu_init
          ser-term.s:56     .text:00000000000008a2 ser_init
             tvout.s:74     .text:0000000000000ae0 tv_init
           ps2_kbd.s:307    .text:000000000000168c kbd_init
         spi-flash.s:41     .text:0000000000001aa0 flash_spi_init
             forth.s:4341   .text:0000000000005654 COLD
             forth.s:83     .text:00000000000029f4 NEST
              init.s:517    .text:0000000000000522 wait_hserdy
              init.s:538    .text:0000000000000544 wait_pllrdy
              init.s:550    .text:000000000000055e wait_sws
              init.s:703    .text:00000000000006d4 gpio_config
              init.s:778    .text:0000000000000780 gpio_out
              init.s:620    .text:000000000000061c nvic_set_priority
              init.s:793    .text:0000000000000798 UZERO
              init.s:831    .text:0000000000000848 ULAST
              init.s:629    .text:0000000000000634 negative_irq
              init.s:675    .text:00000000000006a6 nvic_clear_irq_pending
              init.s:740    .text:000000000000073c input_pull
              init.s:733    .text:000000000000072a output_type
              init.s:756    .text:0000000000000752 gpio_speed
              init.s:794    .text:0000000000000798 $d
             forth.s:4268   .text:0000000000005564 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001788 PS2_QKEY
             tvout.s:563    .text:0000000000001050 TV_EMIT
             forth.s:2992   .text:00000000000046c8 INTER
             forth.s:4338   .text:000000000000564c _LASTN
             forth.s:4364   .text:00000000000056b8 CTOP
             forth.s:4337   .text:000000000000564c LINK
              init.s:836    .text:0000000000000848 $d
          ser-term.s:33     .text:0000000000000874 $t
                            *ABS*:0000000000000003 VK_CTRL_C
ARM GAS  forth.s 			page 198


          ser-term.s:90     .text:00000000000008fa $d
          ser-term.s:90     .text:00000000000008fe _SER_QKEY
          ser-term.s:90     .text:0000000000000908 SER_QKEY
          ser-term.s:110    .text:0000000000000934 $d
          ser-term.s:110    .text:0000000000000938 _SER_EMIT
          ser-term.s:110    .text:0000000000000944 SER_EMIT
          ser-term.s:124    .text:000000000000095e $d
          ser-term.s:124    .text:0000000000000962 _LOCAL
          ser-term.s:124    .text:0000000000000968 $t
          ser-term.s:124    .text:0000000000000968 LOCAL
          ser-term.s:133    .text:0000000000000974 $d
          ser-term.s:133    .text:0000000000000978 _SERIAL
          ser-term.s:133    .text:0000000000000980 SERIAL
          ser-term.s:142    .text:000000000000098c $d
          ser-term.s:142    .text:0000000000000990 _CONSOLE
          ser-term.s:142    .text:0000000000000998 $t
          ser-term.s:142    .text:0000000000000998 CONSOLE
          ser-term.s:164    .text:00000000000009b8 $d
          ser-term.s:164    .text:00000000000009bc _ANSI_PARAM
          ser-term.s:164    .text:00000000000009c8 ANSI_PARAM
          ser-term.s:166    .text:00000000000009cc $d
             forth.s:636    .text:0000000000002e5c ONEP
             forth.s:1482   .text:0000000000003560 SLMOD
             forth.s:348    .text:0000000000002c16 BRAN
             forth.s:644    .text:0000000000002e6c ONEM
             forth.s:90     .text:0000000000002a02 UNNEST
          ser-term.s:191    .text:0000000000000a38 _ANSI_ESC
          ser-term.s:191    .text:0000000000000a40 ANSI_ESC
          ser-term.s:193    .text:0000000000000a44 $d
          ser-term.s:203    .text:0000000000000a64 _SER_AT
          ser-term.s:203    .text:0000000000000a6c SER_AT
          ser-term.s:205    .text:0000000000000a70 $d
          ser-term.s:219    .text:0000000000000aa0 _SER_CLS
          ser-term.s:219    .text:0000000000000aa8 $t
          ser-term.s:219    .text:0000000000000aa8 SER_CLS
          ser-term.s:221    .text:0000000000000aac $d
          ser-term.s:228    .text:0000000000000ad0 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
ARM GAS  forth.s 			page 199


             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000ae0 $t
             tvout.s:150    .text:0000000000000bbc state_vsync
             tvout.s:191    .text:0000000000000c10 state_pre_video
             tvout.s:202    .text:0000000000000c22 state_video_out
             tvout.s:237    .text:0000000000000c80 state_post_video
             tvout.s:254    .text:0000000000000ca6 tv_isr_exit
             tvout.s:180    .text:0000000000000bf6 sync_end
             tvout.s:246    .text:0000000000000c92 frame_end
             tvout.s:264    .text:0000000000000ca8 $d
             tvout.s:264    .text:0000000000000cac _BACKCOLOR
             tvout.s:264    .text:0000000000000cb8 BACKCOLOR
             tvout.s:271    .text:0000000000000cc4 $d
             tvout.s:271    .text:0000000000000cc8 _PENCOLOR
             tvout.s:271    .text:0000000000000cd2 $t
             tvout.s:271    .text:0000000000000cd4 PENCOLOR
             tvout.s:278    .text:0000000000000ce0 $d
             tvout.s:278    .text:0000000000000ce4 _CURSOR_COL
             tvout.s:278    .text:0000000000000cec CURSOR_COL
             tvout.s:285    .text:0000000000000cf8 $d
             tvout.s:285    .text:0000000000000cfc _CURSOR_ROW
             tvout.s:285    .text:0000000000000d00 $t
             tvout.s:285    .text:0000000000000d00 CURSOR_ROW
             tvout.s:292    .text:0000000000000d0c $d
             tvout.s:292    .text:0000000000000d10 _ROWY
             tvout.s:292    .text:0000000000000d16 $t
             tvout.s:292    .text:0000000000000d18 ROWY
             tvout.s:299    .text:0000000000000d24 $d
             tvout.s:299    .text:0000000000000d28 _COLX
             tvout.s:299    .text:0000000000000d2e $t
             tvout.s:299    .text:0000000000000d30 COLX
             tvout.s:306    .text:0000000000000d3c $d
             tvout.s:306    .text:0000000000000d40 _FONT
             tvout.s:306    .text:0000000000000d48 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000d54 $d
             tvout.s:313    .text:0000000000000d58 _VIDBUFF
             tvout.s:313    .text:0000000000000d60 $t
             tvout.s:313    .text:0000000000000d60 VIDBUFF
             tvout.s:325    .text:0000000000000d6a $d
             tvout.s:325    .text:0000000000000d6e _PLOT
             tvout.s:325    .text:0000000000000d74 PLOT
             tvout.s:373    .text:0000000000000df8 plot_op
             tvout.s:341    .text:0000000000000da0 op_back
             tvout.s:350    .text:0000000000000dba op_pen
             tvout.s:359    .text:0000000000000dd4 op_invert
             tvout.s:363    .text:0000000000000ddc op_xor
             tvout.s:373    .text:0000000000000df8 $d
ARM GAS  forth.s 			page 200


             tvout.s:378    .text:0000000000000e00 _VSYNC
             tvout.s:378    .text:0000000000000e06 $t
             tvout.s:378    .text:0000000000000e08 VSYNC
             tvout.s:386    .text:0000000000000e12 $d
             tvout.s:386    .text:0000000000000e16 _CLS
             tvout.s:386    .text:0000000000000e1a $t
             tvout.s:386    .text:0000000000000e1c CLS
             tvout.s:410    .text:0000000000000e5e $d
             tvout.s:410    .text:0000000000000e62 _CLRLINE
             tvout.s:410    .text:0000000000000e6a $t
             tvout.s:410    .text:0000000000000e6c CLRLINE
             tvout.s:412    .text:0000000000000e70 $d
             forth.s:604    .text:0000000000002e20 STAR
             forth.s:1709   .text:0000000000003794 FILL
             tvout.s:427    .text:0000000000000ea4 _SCROLLUP
             tvout.s:427    .text:0000000000000eb0 SCROLLUP
             tvout.s:429    .text:0000000000000eb4 $d
             forth.s:1677   .text:000000000000374c MOVE
             tvout.s:448    .text:0000000000000efc _SCROLLDOWN
             tvout.s:448    .text:0000000000000f08 SCROLLDOWN
             tvout.s:450    .text:0000000000000f0c $d
             tvout.s:467    .text:0000000000000f4c _TV_CRLF
             tvout.s:467    .text:0000000000000f54 $t
             tvout.s:467    .text:0000000000000f54 TV_CRLF
             tvout.s:482    .text:0000000000000f76 $d
             tvout.s:482    .text:0000000000000f7a _RIGHT
             tvout.s:482    .text:0000000000000f80 $t
             tvout.s:482    .text:0000000000000f80 RIGHT
             tvout.s:495    .text:0000000000000f94 $d
             tvout.s:495    .text:0000000000000f98 _LEFT
             tvout.s:495    .text:0000000000000fa0 LEFT
             tvout.s:511    .text:0000000000000fcc FONT_PIXEL
             tvout.s:518    .text:0000000000000fdc INCR_X
             tvout.s:525    .text:0000000000000fe8 NEXT_PIXEL
             tvout.s:534    .text:0000000000000ff0 CHAR_ROW
             tvout.s:536    .text:0000000000000ff4 $d
             forth.s:775    .text:0000000000002f74 DDUP
             forth.s:420    .text:0000000000002ca4 RAT
             forth.s:314    .text:0000000000002be4 DONXT
             forth.s:766    .text:0000000000002f60 TDROP
             tvout.s:551    .text:0000000000001030 CHAR_FONT
             tvout.s:552    .text:0000000000001030 $t
             tvout.s:563    .text:0000000000001044 $d
             tvout.s:563    .text:0000000000001048 _TV_EMIT
             tvout.s:563    .text:0000000000001050 $t
             tvout.s:565    .text:0000000000001054 $d
             forth.s:928    .text:00000000000030c0 ULESS
             tvout.s:593    .text:00000000000010d8 CTRL_KEY
             forth.s:735    .text:0000000000002f24 ROT
             forth.s:391    .text:0000000000002c68 CAT
             tvout.s:660    .text:00000000000011c0 SHOW_CURSOR
             tvout.s:691    .text:0000000000001248 HIDE_CURSOR
             forth.s:903    .text:0000000000003088 EQUAL
             tvout.s:650    .text:00000000000011a0 BACK_SPACE
             forth.s:486    .text:0000000000002d2c DROP
             tvout.s:618    .text:0000000000001148 CAR_RET
             tvout.s:629    .text:0000000000001160 LN_FEED
ARM GAS  forth.s 			page 201


             tvout.s:619    .text:0000000000001148 $t
             tvout.s:620    .text:000000000000114c $d
             tvout.s:630    .text:0000000000001160 $t
             tvout.s:631    .text:0000000000001164 $d
             forth.s:547    .text:0000000000002da8 XORR
             tvout.s:651    .text:00000000000011a0 $t
             tvout.s:652    .text:00000000000011a4 $d
             tvout.s:660    .text:00000000000011b4 _SHOW_CURSOR
             tvout.s:660    .text:00000000000011c0 $t
             tvout.s:663    .text:00000000000011c4 $d
             forth.s:717    .text:0000000000002f00 TWOSL
             forth.s:381    .text:0000000000002c54 CSTOR
             forth.s:757    .text:0000000000002f4c DDROP
             tvout.s:691    .text:000000000000123c _HIDE_CURSOR
             tvout.s:691    .text:0000000000001248 $t
             tvout.s:694    .text:000000000000124c $d
             forth.s:538    .text:0000000000002d94 ORR
             tvout.s:704    .text:0000000000001274 _TV_AT
             tvout.s:704    .text:000000000000127a $t
             tvout.s:704    .text:000000000000127c TV_AT
             tvout.s:719    .text:00000000000012a0 $d
             tvout.s:719    .text:00000000000012a4 _INPUT
             tvout.s:719    .text:00000000000012aa $t
             tvout.s:719    .text:00000000000012ac INPUT
             tvout.s:721    .text:00000000000012b0 $d
             forth.s:1621   .text:00000000000036c4 PAD
             forth.s:2900   .text:00000000000045b4 ACCEP
             forth.s:512    .text:0000000000002d60 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000012dc $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
ARM GAS  forth.s 			page 202


       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
ARM GAS  forth.s 			page 203


       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000012e8 sc_ascii
         mcSaite.inc:100    .text:000000000000139c shifted
         mcSaite.inc:151    .text:00000000000013fc altchar
         mcSaite.inc:167    .text:000000000000140c extended
         mcSaite.inc:191    .text:0000000000001434 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
ARM GAS  forth.s 			page 204


           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000146a $t
           ps2_kbd.s:179    .text:0000000000001596 send_bit
           ps2_kbd.s:107    .text:00000000000014cc start_bit
           ps2_kbd.s:118    .text:00000000000014f0 parity_bit
           ps2_kbd.s:125    .text:0000000000001504 stop_bit
           ps2_kbd.s:152    .text:000000000000155a store_code
           ps2_kbd.s:253    .text:000000000000162a do_async_key
           ps2_kbd.s:204    .text:00000000000015da send_parity
           ps2_kbd.s:211    .text:00000000000015ec send_stop
           ps2_kbd.s:218    .text:00000000000015f6 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001616 is_async_key
           ps2_kbd.s:286    .text:000000000000167a async_keys
           ps2_kbd.s:378    .text:0000000000001760 table_scan
           ps2_kbd.s:260    .text:000000000000163c set_async_key
           ps2_kbd.s:295    .text:0000000000001688 async_jump
           ps2_kbd.s:265    .text:000000000000164a shift_key
           ps2_kbd.s:273    .text:000000000000165a set_reset
           ps2_kbd.s:268    .text:0000000000001650 ctrl_key
           ps2_kbd.s:271    .text:0000000000001656 alt_key
           ps2_kbd.s:287    .text:000000000000167a $d
           ps2_kbd.s:340    .text:0000000000001708 $d
           ps2_kbd.s:340    .text:000000000000170c _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001716 $t
           ps2_kbd.s:340    .text:0000000000001718 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001728 keycode
           ps2_kbd.s:365    .text:0000000000001750 wait_code
           ps2_kbd.s:396    .text:000000000000177a $d
           ps2_kbd.s:396    .text:000000000000177e _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000017d4 inkey_exit
           ps2_kbd.s:418    .text:00000000000017d8 pause_key
           ps2_kbd.s:427    .text:00000000000017ee do_modifiers
           ps2_kbd.s:436    .text:0000000000001806 shift_down
           ps2_kbd.s:440    .text:000000000000180c altchar_down
           ps2_kbd.s:444    .text:0000000000001812 ctrl_down
           ps2_kbd.s:452    .text:000000000000182e do_capslock
           ps2_kbd.s:478    .text:0000000000001852 kbd_send
           ps2_kbd.s:553    .text:0000000000001946 kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001964 $d
           ps2_kbd.s:567    .text:0000000000001968 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001970 $t
           ps2_kbd.s:567    .text:0000000000001970 KBD_RST
           ps2_kbd.s:591    .text:00000000000019ba $d
           ps2_kbd.s:591    .text:00000000000019be _KBD_LED
           ps2_kbd.s:591    .text:00000000000019c6 $t
ARM GAS  forth.s 			page 205


           ps2_kbd.s:591    .text:00000000000019c8 KBD_LED
           ps2_kbd.s:616    .text:0000000000001a1c $d
           ps2_kbd.s:616    .text:0000000000001a20 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001a2c CAPS_LED
           ps2_kbd.s:633    .text:0000000000001a56 $d
           ps2_kbd.s:633    .text:0000000000001a5a _WKEY
           ps2_kbd.s:633    .text:0000000000001a64 WKEY
           ps2_kbd.s:635    .text:0000000000001a68 $d
           ps2_kbd.s:640    .text:0000000000001a80 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001aa0 $t
         spi-flash.s:85     .text:0000000000001b42 $d
         spi-flash.s:85     .text:0000000000001b46 _CHIP_SEL
         spi-flash.s:85     .text:0000000000001b50 CHIP_SEL
         spi-flash.s:97     .text:0000000000001b6e $d
         spi-flash.s:97     .text:0000000000001b72 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001b7c $t
         spi-flash.s:97     .text:0000000000001b7c CHIP_DSEL
         spi-flash.s:113    .text:0000000000001baa $d
         spi-flash.s:113    .text:0000000000001bae _RD_BYTE
         spi-flash.s:113    .text:0000000000001bb6 $t
         spi-flash.s:113    .text:0000000000001bb8 RD_BYTE
         spi-flash.s:133    .text:0000000000001be0 $d
         spi-flash.s:133    .text:0000000000001be4 _WR_BYTE
         spi-flash.s:133    .text:0000000000001bec $t
         spi-flash.s:133    .text:0000000000001bec WR_BYTE
         spi-flash.s:151    .text:0000000000001c10 $d
         spi-flash.s:151    .text:0000000000001c14 _WR_DIS
         spi-flash.s:151    .text:0000000000001c1c WR_DIS
         spi-flash.s:153    .text:0000000000001c20 $d
         spi-flash.s:163    .text:0000000000001c3c _WR_ENBL
         spi-flash.s:163    .text:0000000000001c44 $t
         spi-flash.s:163    .text:0000000000001c44 WR_ENBL
         spi-flash.s:165    .text:0000000000001c48 $d
         spi-flash.s:175    .text:0000000000001c64 _RD_SR
         spi-flash.s:175    .text:0000000000001c6a $t
         spi-flash.s:175    .text:0000000000001c6c RD_SR
         spi-flash.s:177    .text:0000000000001c70 $d
         spi-flash.s:185    .text:0000000000001c94 sr_cmd
         spi-flash.s:191    .text:0000000000001c9b _SEND_ADR
         spi-flash.s:191    .text:0000000000001ca4 $t
         spi-flash.s:191    .text:0000000000001ca4 SEND_ADR
         spi-flash.s:193    .text:0000000000001ca8 $d
         spi-flash.s:208    .text:0000000000001cdc _WAIT_DONE
         spi-flash.s:208    .text:0000000000001ce6 $t
         spi-flash.s:208    .text:0000000000001ce8 WAIT_DONE
         spi-flash.s:210    .text:0000000000001cec $d
         spi-flash.s:223    .text:0000000000001d1c _ERASE_BLK
         spi-flash.s:223    .text:0000000000001d26 $t
         spi-flash.s:223    .text:0000000000001d28 ERASE_BLK
         spi-flash.s:225    .text:0000000000001d2c $d
         spi-flash.s:238    .text:0000000000001d54 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001d60 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001d64 $d
ARM GAS  forth.s 			page 206


         spi-flash.s:256    .text:0000000000001d94 _RD_BLK
         spi-flash.s:256    .text:0000000000001d9c RD_BLK
         spi-flash.s:258    .text:0000000000001da0 $d
         spi-flash.s:278    .text:0000000000001de8 _WR_BLK
         spi-flash.s:278    .text:0000000000001df0 WR_BLK
         spi-flash.s:280    .text:0000000000001df4 $d
             forth.s:2413   .text:0000000000003fcc HDOT
         spi-flash.s:316    .text:0000000000001e4c _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001e58 $t
         spi-flash.s:316    .text:0000000000001e58 SEARCH_FILE
         spi-flash.s:319    .text:0000000000001e5c $d
         spi-flash.s:325    .text:0000000000001e64 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001e70 ERASE_FILE
         spi-flash.s:328    .text:0000000000001e74 $d
         spi-flash.s:334    .text:0000000000001e7c _DIR
         spi-flash.s:334    .text:0000000000001e80 $t
         spi-flash.s:334    .text:0000000000001e80 DIR
         spi-flash.s:337    .text:0000000000001e84 $d
         spi-flash.s:343    .text:0000000000001e8c _SAVE
         spi-flash.s:343    .text:0000000000001e94 SAVE
         spi-flash.s:346    .text:0000000000001e98 $d
         spi-flash.s:352    .text:0000000000001ea0 _LOAD
         spi-flash.s:352    .text:0000000000001ea8 LOAD
         spi-flash.s:355    .text:0000000000001eac $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001ed4 p10
               fpu.s:59     .text:0000000000001f00 _PWR10
               fpu.s:59     .text:0000000000001f06 $t
               fpu.s:59     .text:0000000000001f08 PWR10
               fpu.s:89     .text:0000000000001f42 $d
               fpu.s:89     .text:0000000000001f46 _FPSCR
               fpu.s:89     .text:0000000000001f4c $t
               fpu.s:102    .text:0000000000001f5c $d
               fpu.s:102    .text:0000000000001f60 _CLR_FPSCR
               fpu.s:102    .text:0000000000001f6a $t
               fpu.s:115    .text:0000000000001f84 $d
               fpu.s:115    .text:0000000000001f88 _TOS0
               fpu.s:115    .text:0000000000001f8c $t
               fpu.s:115    .text:0000000000001f8c TOS0
               fpu.s:124    .text:0000000000001f98 $d
               fpu.s:124    .text:0000000000001f9c _TOS1
               fpu.s:124    .text:0000000000001fa0 $t
               fpu.s:124    .text:0000000000001fa0 TOS1
               fpu.s:133    .text:0000000000001fac $d
               fpu.s:133    .text:0000000000001fb0 _TOS2
               fpu.s:133    .text:0000000000001fb4 $t
               fpu.s:133    .text:0000000000001fb4 TOS2
               fpu.s:142    .text:0000000000001fc0 $d
               fpu.s:142    .text:0000000000001fc4 _S0FROM
               fpu.s:142    .text:0000000000001fc8 $t
               fpu.s:142    .text:0000000000001fc8 S0FROM
               fpu.s:151    .text:0000000000001fd4 $d
               fpu.s:151    .text:0000000000001fd8 _S1FROM
               fpu.s:151    .text:0000000000001fdc $t
ARM GAS  forth.s 			page 207


               fpu.s:151    .text:0000000000001fdc S1FROM
               fpu.s:160    .text:0000000000001fe8 $d
               fpu.s:160    .text:0000000000001fec _S2FROM
               fpu.s:160    .text:0000000000001ff0 $t
               fpu.s:160    .text:0000000000001ff0 S2FROM
               fpu.s:171    .text:0000000000001ffc $d
               fpu.s:171    .text:0000000000002000 _FTOS
               fpu.s:171    .text:0000000000002004 $t
               fpu.s:171    .text:0000000000002004 FTOS
               fpu.s:181    .text:0000000000002014 $d
               fpu.s:181    .text:0000000000002018 _TRUNC
               fpu.s:181    .text:000000000000201e $t
               fpu.s:181    .text:0000000000002020 TRUNC
               fpu.s:191    .text:0000000000002030 $d
               fpu.s:191    .text:0000000000002034 _STOF
               fpu.s:191    .text:0000000000002038 $t
               fpu.s:191    .text:0000000000002038 STOF
               fpu.s:201    .text:0000000000002048 $d
               fpu.s:201    .text:000000000000204c _FPLUS
               fpu.s:201    .text:0000000000002050 FPLUS
               fpu.s:214    .text:0000000000002068 $d
               fpu.s:214    .text:000000000000206c _FSUBB
               fpu.s:214    .text:0000000000002070 FSUBB
               fpu.s:228    .text:0000000000002088 $d
               fpu.s:228    .text:000000000000208c _FSTAR
               fpu.s:228    .text:0000000000002090 FSTAR
               fpu.s:241    .text:00000000000020a8 $d
               fpu.s:241    .text:00000000000020ac _FSLH
               fpu.s:241    .text:00000000000020b0 FSLH
               fpu.s:254    .text:00000000000020c8 $d
               fpu.s:254    .text:00000000000020cc _FNEG
               fpu.s:254    .text:00000000000020d4 $t
               fpu.s:254    .text:00000000000020d4 FNEG
               fpu.s:264    .text:00000000000020e4 $d
               fpu.s:264    .text:00000000000020e8 _FABS
               fpu.s:264    .text:00000000000020f0 FABS
               fpu.s:276    .text:0000000000002104 $d
               fpu.s:276    .text:0000000000002108 _SQRT
               fpu.s:276    .text:0000000000002110 SQRT
               fpu.s:286    .text:0000000000002120 $d
               fpu.s:286    .text:0000000000002124 _FZLESS
               fpu.s:286    .text:0000000000002128 $t
               fpu.s:286    .text:0000000000002128 FZLESS
               fpu.s:298    .text:0000000000002140 $d
               fpu.s:298    .text:0000000000002144 _FGREAT
               fpu.s:298    .text:0000000000002148 FGREAT
               fpu.s:300    .text:000000000000214c $d
             forth.s:843    .text:000000000000300c INVER
               fpu.s:309    .text:0000000000002160 _FLESS
               fpu.s:309    .text:0000000000002164 FLESS
               fpu.s:311    .text:0000000000002168 $d
               fpu.s:319    .text:0000000000002178 _FMIN
               fpu.s:319    .text:0000000000002180 FMIN
               fpu.s:321    .text:0000000000002184 $d
               fpu.s:332    .text:00000000000021a8 _FMAX
               fpu.s:332    .text:00000000000021b0 FMAX
               fpu.s:334    .text:00000000000021b4 $d
ARM GAS  forth.s 			page 208


               fpu.s:347    .text:00000000000021d8 _FSIGN
               fpu.s:347    .text:00000000000021de $t
               fpu.s:347    .text:00000000000021e0 FSIGN
               fpu.s:358    .text:00000000000021f4 $d
               fpu.s:358    .text:00000000000021f8 _FEXP
               fpu.s:358    .text:0000000000002200 FEXP
               fpu.s:369    .text:0000000000002216 $d
               fpu.s:369    .text:000000000000221a _FMANT
               fpu.s:369    .text:0000000000002220 $t
               fpu.s:369    .text:0000000000002220 FMANT
               fpu.s:382    .text:000000000000223a $d
               fpu.s:382    .text:000000000000223e _PI
               fpu.s:382    .text:0000000000002244 PI
               fpu.s:391    .text:0000000000002252 $d
               fpu.s:391    .text:0000000000002256 _LOG2
               fpu.s:391    .text:000000000000225c LOG2
               fpu.s:401    .text:000000000000226a $d
               fpu.s:401    .text:000000000000226e _LOG2TO10
               fpu.s:401    .text:0000000000002276 $t
               fpu.s:401    .text:0000000000002278 LOG2TO10
               fpu.s:403    .text:000000000000227c $d
             forth.s:521    .text:0000000000002d70 ZLESS
               fpu.s:413    .text:00000000000022a8 $d
            strtof.s:29     .text:00000000000022b4 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000022cc p10p2at
            strtof.s:44     .text:00000000000022cc $t
            strtof.s:45     .text:00000000000022d0 $d
            strtof.s:57     .text:00000000000022f0 bit_state
            strtof.s:58     .text:00000000000022f0 $t
            strtof.s:59     .text:00000000000022f4 $d
             forth.s:1592   .text:0000000000003684 PICK
            strtof.s:76     .text:0000000000002314 mant_div
            strtof.s:77     .text:0000000000002314 $t
            strtof.s:78     .text:0000000000002318 $d
            strtof.s:79     .text:000000000000231c div_loop
             forth.s:964    .text:0000000000003108 GREAT
            strtof.s:107    .text:0000000000002368 mant_mult
            strtof.s:108    .text:0000000000002368 $t
            strtof.s:109    .text:000000000000236c $d
            strtof.s:110    .text:0000000000002370 mult_loop
            strtof.s:134    .text:00000000000023bc exp_adjust
            strtof.s:135    .text:00000000000023bc $t
            strtof.s:136    .text:00000000000023c0 $d
             forth.s:746    .text:0000000000002f38 NROT
            strtof.s:148    .text:00000000000023fc pos_exp
             forth.s:859    .text:0000000000003030 ABSS
            strtof.s:161    .text:000000000000240c decimals
            strtof.s:162    .text:000000000000240c $t
            strtof.s:163    .text:0000000000002410 $d
             forth.s:1968   .text:0000000000003a54 PARSE_DIGITS
             forth.s:987    .text:0000000000003134 MIN
            strtof.s:181    .text:0000000000002448 exponent
            strtof.s:182    .text:0000000000002448 $t
ARM GAS  forth.s 			page 209


            strtof.s:183    .text:000000000000244c $d
             forth.s:2020   .text:0000000000003b0e NEGQ
             forth.s:851    .text:0000000000003020 NEGAT
            strtof.s:204    .text:0000000000002490 _FLOATQ
            strtof.s:204    .text:0000000000002498 FLOATQ
            strtof.s:208    .text:000000000000249c $d
             forth.s:1924   .text:00000000000039d4 DECIM
             forth.s:1941   .text:00000000000039f8 DIGTQ
            strtof.s:245    .text:0000000000002538 must_be_dot
             forth.s:2004   .text:0000000000003af4 CHARQ
            strtof.s:290    .text:0000000000002610 error1
            strtof.s:295    .text:0000000000002624 error2
            strtof.s:279    .text:00000000000025d8 build_float
             forth.s:409    .text:0000000000002c88 DRFROM
            strtof.s:300    .text:0000000000002634 restore_base
              ftoa.s:28     .text:0000000000002644 rounding
              ftoa.s:48     .text:000000000000266c _ROUND
              ftoa.s:48     .text:0000000000002672 $t
              ftoa.s:48     .text:0000000000002674 ROUND
              ftoa.s:50     .text:0000000000002678 $d
             forth.s:976    .text:0000000000003120 MAX
              ftoa.s:67     .text:00000000000026b8 _CSTOP
              ftoa.s:67     .text:00000000000026bc $t
              ftoa.s:67     .text:00000000000026bc CSTOP
              ftoa.s:79     .text:00000000000026c8 ITOA
              ftoa.s:81     .text:00000000000026cc $d
             forth.s:1339   .text:0000000000003438 STOD
             forth.s:798    .text:0000000000002fa8 DABS
             forth.s:1787   .text:0000000000003874 BDIGS
             forth.s:1831   .text:00000000000038e0 DIGS
             forth.s:1849   .text:0000000000003914 SIGN
             forth.s:1863   .text:000000000000393c EDIGS
             forth.s:1657   .text:000000000000371c CMOVE
              ftoa.s:114    .text:000000000000271c SCALEUP
              ftoa.s:115    .text:000000000000271c $t
              ftoa.s:116    .text:0000000000002720 $d
              ftoa.s:137    .text:0000000000002768 SCALEDOWN
              ftoa.s:138    .text:0000000000002768 $t
              ftoa.s:139    .text:000000000000276c $d
              ftoa.s:174    .text:00000000000027d8 EPART
              ftoa.s:175    .text:00000000000027d8 $t
              ftoa.s:176    .text:00000000000027dc $d
              ftoa.s:199    .text:000000000000280c FPART
              ftoa.s:200    .text:000000000000280c $t
              ftoa.s:201    .text:0000000000002810 $d
              ftoa.s:244    .text:0000000000002890 IPART
              ftoa.s:245    .text:0000000000002890 $t
              ftoa.s:246    .text:0000000000002894 $d
              ftoa.s:293    .text:0000000000002928 _FTOA
              ftoa.s:293    .text:000000000000292c $t
              ftoa.s:293    .text:000000000000292c FTOA
              ftoa.s:295    .text:0000000000002930 $d
             forth.s:684    .text:0000000000002ebc BLANK
              ftoa.s:325    .text:0000000000002988 _FDOT
              ftoa.s:325    .text:000000000000298c FDOT
              ftoa.s:328    .text:0000000000002990 $d
             forth.s:1610   .text:00000000000036ac HERE
ARM GAS  forth.s 			page 210


             forth.s:3147   .text:00000000000048b8 ALLOT
             forth.s:80     .text:00000000000029f4 $t
             forth.s:103    .text:0000000000002a0c COMPI_NEST
             forth.s:116    .text:0000000000002a2a TSTDIN
             forth.s:123    .text:0000000000002a34 TSTDOUT
             forth.s:132    .text:0000000000002a3e $d
             forth.s:132    .text:0000000000002a42 _CFSR
             forth.s:144    .text:0000000000002a62 $d
             forth.s:144    .text:0000000000002a66 _BFAR
             forth.s:156    .text:0000000000002a86 $d
             forth.s:156    .text:0000000000002a8a _QKEY
             forth.s:156    .text:0000000000002a90 QKEY
             forth.s:158    .text:0000000000002a94 $d
             forth.s:1644   .text:00000000000036fc ATEXE
             forth.s:166    .text:0000000000002aa4 _KEY
             forth.s:166    .text:0000000000002aa8 $t
             forth.s:166    .text:0000000000002aa8 KEY
             forth.s:168    .text:0000000000002aac KEY1
             forth.s:169    .text:0000000000002aac $d
             forth.s:178    .text:0000000000002ac4 _EMIT
             forth.s:180    .text:0000000000002ad0 $d
             forth.s:214    .text:0000000000002ae0 _RAND
             forth.s:214    .text:0000000000002ae8 RAND
             forth.s:216    .text:0000000000002aec $d
             forth.s:1083   .text:00000000000031d8 SEED
             forth.s:1495   .text:0000000000003580 MODD
             forth.s:245    .text:0000000000002b5c _PAUSE
             forth.s:245    .text:0000000000002b62 $t
             forth.s:245    .text:0000000000002b64 PAUSE
             forth.s:247    .text:0000000000002b68 $d
             forth.s:1101   .text:0000000000003200 TIMER
             forth.s:249    .text:0000000000002b70 PAUSE_LOOP
             forth.s:254    .text:0000000000002b88 PAUSE_EXIT
             forth.s:261    .text:0000000000002b90 _ULED
             forth.s:270    .text:0000000000002bb4 ULED_OFF
             forth.s:284    .text:0000000000002bb8 $d
             forth.s:284    .text:0000000000002bbc _NOP
             forth.s:284    .text:0000000000002bc0 $t
             forth.s:284    .text:0000000000002bc0 NOP
             forth.s:301    .text:0000000000002bcc $d
             forth.s:301    .text:0000000000002bd0 _EXECU
             forth.s:301    .text:0000000000002bd8 $t
             forth.s:301    .text:0000000000002bd8 EXECU
             forth.s:321    .text:0000000000002bf4 NEXT1
             forth.s:339    .text:0000000000002c10 QBRAN1
             forth.s:356    .text:0000000000002c1c $d
             forth.s:356    .text:0000000000002c20 _EXIT
             forth.s:356    .text:0000000000002c28 EXIT
             forth.s:357    .text:0000000000002c28 $d
             forth.s:363    .text:0000000000002c30 _STORE
             forth.s:363    .text:0000000000002c32 $t
             forth.s:373    .text:0000000000002c40 $d
             forth.s:373    .text:0000000000002c44 _AT
             forth.s:373    .text:0000000000002c46 $t
             forth.s:381    .text:0000000000002c4c $d
             forth.s:381    .text:0000000000002c50 _CSTOR
             forth.s:391    .text:0000000000002c60 $d
ARM GAS  forth.s 			page 211


             forth.s:391    .text:0000000000002c64 _CAT
             forth.s:400    .text:0000000000002c6c $d
             forth.s:400    .text:0000000000002c70 _RFROM
             forth.s:409    .text:0000000000002c7e $d
             forth.s:409    .text:0000000000002c82 _DRFROM
             forth.s:409    .text:0000000000002c86 $t
             forth.s:420    .text:0000000000002c9a $d
             forth.s:420    .text:0000000000002c9e _RAT
             forth.s:429    .text:0000000000002cae $d
             forth.s:429    .text:0000000000002cb2 _TOR
             forth.s:438    .text:0000000000002cc2 $d
             forth.s:438    .text:0000000000002cc6 _DTOR
             forth.s:438    .text:0000000000002cca $t
             forth.s:438    .text:0000000000002ccc DTOR
             forth.s:450    .text:0000000000002cde $d
             forth.s:450    .text:0000000000002ce2 _RPSTOR
             forth.s:450    .text:0000000000002ce6 $t
             forth.s:450    .text:0000000000002ce8 RPSTOR
             forth.s:459    .text:0000000000002cf0 $d
             forth.s:459    .text:0000000000002cf4 _SPSTOR
             forth.s:459    .text:0000000000002cf8 $t
             forth.s:459    .text:0000000000002cf8 SPSTOR
             forth.s:468    .text:0000000000002d00 $d
             forth.s:468    .text:0000000000002d04 _SPAT
             forth.s:468    .text:0000000000002d08 $t
             forth.s:468    .text:0000000000002d08 SPAT
             forth.s:477    .text:0000000000002d10 $d
             forth.s:477    .text:0000000000002d14 _RPAT
             forth.s:477    .text:0000000000002d18 $t
             forth.s:477    .text:0000000000002d18 RPAT
             forth.s:486    .text:0000000000002d20 $d
             forth.s:486    .text:0000000000002d24 _DROP
             forth.s:494    .text:0000000000002d32 $d
             forth.s:494    .text:0000000000002d36 _DUPP
             forth.s:494    .text:0000000000002d3a $t
             forth.s:502    .text:0000000000002d42 $d
             forth.s:502    .text:0000000000002d46 _SWAP
             forth.s:512    .text:0000000000002d54 $d
             forth.s:512    .text:0000000000002d58 _OVER
             forth.s:521    .text:0000000000002d68 $d
             forth.s:521    .text:0000000000002d6c _ZLESS
             forth.s:529    .text:0000000000002d76 $d
             forth.s:529    .text:0000000000002d7a _ANDD
             forth.s:529    .text:0000000000002d7e $t
             forth.s:538    .text:0000000000002d8a $d
             forth.s:538    .text:0000000000002d8e _ORR
             forth.s:547    .text:0000000000002d9e $d
             forth.s:547    .text:0000000000002da2 _XORR
             forth.s:547    .text:0000000000002da6 $t
             forth.s:556    .text:0000000000002db2 $d
             forth.s:556    .text:0000000000002db6 _UPLUS
             forth.s:556    .text:0000000000002dba $t
             forth.s:556    .text:0000000000002dbc UPLUS
             forth.s:568    .text:0000000000002dcc $d
             forth.s:568    .text:0000000000002dd0 _RSHIFT
             forth.s:577    .text:0000000000002de2 $d
             forth.s:577    .text:0000000000002de6 _LSHIFT
ARM GAS  forth.s 			page 212


             forth.s:586    .text:0000000000002dfa $d
             forth.s:586    .text:0000000000002dfe _PLUS
             forth.s:586    .text:0000000000002e00 $t
             forth.s:595    .text:0000000000002e08 $d
             forth.s:595    .text:0000000000002e0c _SUBB
             forth.s:595    .text:0000000000002e0e $t
             forth.s:604    .text:0000000000002e1a $d
             forth.s:604    .text:0000000000002e1e _STAR
             forth.s:604    .text:0000000000002e20 $t
             forth.s:613    .text:0000000000002e2a $d
             forth.s:613    .text:0000000000002e2e _UMSTA
             forth.s:613    .text:0000000000002e32 $t
             forth.s:613    .text:0000000000002e34 UMSTA
             forth.s:625    .text:0000000000002e40 $d
             forth.s:625    .text:0000000000002e44 _MSTAR
             forth.s:625    .text:0000000000002e48 MSTAR
             forth.s:636    .text:0000000000002e54 $d
             forth.s:636    .text:0000000000002e58 _ONEP
             forth.s:644    .text:0000000000002e62 $d
             forth.s:644    .text:0000000000002e66 _ONEM
             forth.s:652    .text:0000000000002e72 $d
             forth.s:652    .text:0000000000002e76 _TWOP
             forth.s:652    .text:0000000000002e7c TWOP
             forth.s:660    .text:0000000000002e82 $d
             forth.s:660    .text:0000000000002e86 _TWOM
             forth.s:660    .text:0000000000002e8c TWOM
             forth.s:668    .text:0000000000002e92 $d
             forth.s:668    .text:0000000000002e96 _CELLP
             forth.s:668    .text:0000000000002e9c $t
             forth.s:668    .text:0000000000002e9c CELLP
             forth.s:676    .text:0000000000002ea2 $d
             forth.s:676    .text:0000000000002ea6 _CELLM
             forth.s:676    .text:0000000000002eac $t
             forth.s:676    .text:0000000000002eac CELLM
             forth.s:684    .text:0000000000002eb2 $d
             forth.s:684    .text:0000000000002eb6 _BLANK
             forth.s:693    .text:0000000000002ec6 $d
             forth.s:693    .text:0000000000002eca _CELLS
             forth.s:693    .text:0000000000002ed0 $t
             forth.s:693    .text:0000000000002ed0 CELLS
             forth.s:701    .text:0000000000002ed6 $d
             forth.s:701    .text:0000000000002eda _CELLSL
             forth.s:701    .text:0000000000002ee0 $t
             forth.s:701    .text:0000000000002ee0 CELLSL
             forth.s:709    .text:0000000000002ee6 $d
             forth.s:709    .text:0000000000002eea _TWOST
             forth.s:709    .text:0000000000002ef0 TWOST
             forth.s:717    .text:0000000000002ef6 $d
             forth.s:717    .text:0000000000002efa _TWOSL
             forth.s:725    .text:0000000000002f06 $d
             forth.s:725    .text:0000000000002f0a _QDUP
             forth.s:735    .text:0000000000002f1a $d
             forth.s:735    .text:0000000000002f1e _ROT
             forth.s:735    .text:0000000000002f22 $t
             forth.s:746    .text:0000000000002f2e $d
             forth.s:746    .text:0000000000002f32 _NROT
             forth.s:757    .text:0000000000002f42 $d
ARM GAS  forth.s 			page 213


             forth.s:757    .text:0000000000002f46 _DDROP
             forth.s:757    .text:0000000000002f4c $t
             forth.s:766    .text:0000000000002f56 $d
             forth.s:766    .text:0000000000002f5a _TDROP
             forth.s:766    .text:0000000000002f60 $t
             forth.s:775    .text:0000000000002f6a $d
             forth.s:775    .text:0000000000002f6e _DDUP
             forth.s:785    .text:0000000000002f80 $d
             forth.s:785    .text:0000000000002f84 _DPLUS
             forth.s:785    .text:0000000000002f88 DPLUS
             forth.s:798    .text:0000000000002f9c $d
             forth.s:798    .text:0000000000002fa0 _DABS
             forth.s:814    .text:0000000000002fc4 $d
             forth.s:814    .text:0000000000002fc8 _UDGREAT
             forth.s:814    .text:0000000000002fcc $t
             forth.s:814    .text:0000000000002fcc UDGREAT
             forth.s:831    .text:0000000000002fe8 $d
             forth.s:831    .text:0000000000002fec _DZEQUAL
             forth.s:831    .text:0000000000002ff0 $t
             forth.s:831    .text:0000000000002ff0 DZEQUAL
             forth.s:843    .text:0000000000003002 $d
             forth.s:843    .text:0000000000003006 _INVER
             forth.s:843    .text:000000000000300a $t
             forth.s:851    .text:0000000000003012 $d
             forth.s:851    .text:0000000000003016 _NEGAT
             forth.s:859    .text:0000000000003026 $d
             forth.s:859    .text:000000000000302a _ABSS
             forth.s:859    .text:000000000000302e $t
             forth.s:869    .text:000000000000303a $d
             forth.s:869    .text:000000000000303e _CLZ
             forth.s:869    .text:0000000000003042 $t
             forth.s:877    .text:000000000000304a $d
             forth.s:877    .text:000000000000304e _CTZ
             forth.s:877    .text:0000000000003052 $t
             forth.s:877    .text:0000000000003054 CTZ
             forth.s:892    .text:000000000000306c $d
             forth.s:892    .text:0000000000003070 _ZEQUAL
             forth.s:892    .text:0000000000003074 ZEQUAL
             forth.s:903    .text:0000000000003082 $d
             forth.s:903    .text:0000000000003086 _EQUAL
             forth.s:903    .text:0000000000003088 $t
             forth.s:915    .text:0000000000003098 $d
             forth.s:915    .text:000000000000309c _DIFF
             forth.s:915    .text:00000000000030a0 DIFF
             forth.s:928    .text:00000000000030b8 $d
             forth.s:928    .text:00000000000030bc _ULESS
             forth.s:940    .text:00000000000030d0 $d
             forth.s:940    .text:00000000000030d4 _LESS
             forth.s:940    .text:00000000000030d6 $t
             forth.s:940    .text:00000000000030d8 LESS
             forth.s:952    .text:00000000000030e8 $d
             forth.s:952    .text:00000000000030ec _UGREAT
             forth.s:952    .text:00000000000030f0 UGREAT
             forth.s:964    .text:0000000000003100 $d
             forth.s:964    .text:0000000000003104 _GREAT
             forth.s:964    .text:0000000000003106 $t
             forth.s:976    .text:0000000000003118 $d
ARM GAS  forth.s 			page 214


             forth.s:976    .text:000000000000311c _MAX
             forth.s:976    .text:0000000000003120 $t
             forth.s:987    .text:000000000000312c $d
             forth.s:987    .text:0000000000003130 _MIN
             forth.s:987    .text:0000000000003134 $t
             forth.s:998    .text:0000000000003140 $d
             forth.s:998    .text:0000000000003144 _PSTOR
             forth.s:998    .text:0000000000003148 PSTOR
             forth.s:1010   .text:0000000000003158 $d
             forth.s:1010   .text:000000000000315c _DSTOR
             forth.s:1010   .text:0000000000003160 DSTOR
             forth.s:1022   .text:0000000000003174 $d
             forth.s:1022   .text:0000000000003178 _DAT
             forth.s:1022   .text:000000000000317c DAT
             forth.s:1032   .text:0000000000003186 $d
             forth.s:1032   .text:000000000000318a _COUNT
             forth.s:1032   .text:0000000000003190 $t
             forth.s:1042   .text:000000000000319c $d
             forth.s:1042   .text:00000000000031a0 _DNEGA
             forth.s:1042   .text:00000000000031a8 $t
             forth.s:1042   .text:00000000000031a8 DNEGA
             forth.s:1059   .text:00000000000031b8 DOVAR
             forth.s:1070   .text:00000000000031c4 DOCON
             forth.s:1083   .text:00000000000031ce $d
             forth.s:1083   .text:00000000000031d2 _SEED
             forth.s:1092   .text:00000000000031e2 $d
             forth.s:1092   .text:00000000000031e6 _MSEC
             forth.s:1101   .text:00000000000031f6 $d
             forth.s:1101   .text:00000000000031fa _TIMER
             forth.s:1101   .text:0000000000003200 $t
             forth.s:1110   .text:000000000000320c $d
             forth.s:1110   .text:0000000000003210 _TBOOT
             forth.s:1110   .text:0000000000003216 $t
             forth.s:1110   .text:0000000000003218 TBOOT
             forth.s:1119   .text:0000000000003224 $d
             forth.s:1119   .text:0000000000003228 _BASE
             forth.s:1129   .text:000000000000323c TEMP
             forth.s:1138   .text:0000000000003248 $d
             forth.s:1138   .text:000000000000324c _SPAN
             forth.s:1138   .text:0000000000003254 SPAN
             forth.s:1147   .text:0000000000003260 $d
             forth.s:1147   .text:0000000000003264 _INN
             forth.s:1147   .text:0000000000003268 $t
             forth.s:1147   .text:0000000000003268 INN
             forth.s:1157   .text:0000000000003274 $d
             forth.s:1157   .text:0000000000003278 _NTIB
             forth.s:1157   .text:0000000000003280 NTIB
             forth.s:1166   .text:000000000000328c $d
             forth.s:1166   .text:0000000000003290 _TEVAL
             forth.s:1166   .text:0000000000003296 $t
             forth.s:1166   .text:0000000000003298 TEVAL
             forth.s:1176   .text:00000000000032a4 $d
             forth.s:1176   .text:00000000000032a8 _HLD
             forth.s:1176   .text:00000000000032ac $t
             forth.s:1176   .text:00000000000032ac HLD
             forth.s:1186   .text:00000000000032b8 $d
             forth.s:1186   .text:00000000000032bc _CNTXT
ARM GAS  forth.s 			page 215


             forth.s:1186   .text:00000000000032c4 $t
             forth.s:1186   .text:00000000000032c4 CNTXT
             forth.s:1187   .text:00000000000032c4 CRRNT
             forth.s:1197   .text:00000000000032d0 $d
             forth.s:1197   .text:00000000000032d4 _CPP
             forth.s:1197   .text:00000000000032d8 CPP
             forth.s:1207   .text:00000000000032e4 $d
             forth.s:1207   .text:00000000000032e8 _FCP
             forth.s:1207   .text:00000000000032ec $t
             forth.s:1207   .text:00000000000032ec FCP
             forth.s:1217   .text:00000000000032f8 $d
             forth.s:1217   .text:00000000000032fc _LAST
             forth.s:1217   .text:0000000000003304 LAST
             forth.s:1231   .text:0000000000003310 $d
             forth.s:1231   .text:0000000000003314 _USER_BEGIN
             forth.s:1231   .text:0000000000003320 USER_BEGIN
             forth.s:1235   .text:000000000000332c USR_BGN_ADR
             forth.s:1236   .text:000000000000332c $d
             forth.s:1242   .text:0000000000003334 _USER_END
             forth.s:1242   .text:0000000000003340 USER_END
             forth.s:1246   .text:000000000000334c USER_END_ADR
             forth.s:1247   .text:000000000000334c $d
             forth.s:1259   .text:0000000000003354 _WITHI
             forth.s:1259   .text:000000000000335c WITHI
             forth.s:1261   .text:0000000000003360 $d
             forth.s:1276   .text:0000000000003380 _UMMOD
             forth.s:1276   .text:0000000000003388 UMMOD
             forth.s:1280   .text:0000000000003392 UMMOD0
             forth.s:1287   .text:00000000000033a2 UMMOD1
             forth.s:1293   .text:00000000000033ac UMMOD2
             forth.s:1306   .text:00000000000033b8 $d
             forth.s:1306   .text:00000000000033bc _MSMOD
             forth.s:1306   .text:00000000000033c2 $t
             forth.s:1306   .text:00000000000033c4 MSMOD
             forth.s:1308   .text:00000000000033c8 $d
             forth.s:1317   .text:00000000000033f0 MMOD1
             forth.s:1324   .text:000000000000340c MMOD2
             forth.s:1332   .text:000000000000342c MMOD3
             forth.s:1339   .text:0000000000003434 _STOD
             forth.s:1339   .text:0000000000003438 $t
             forth.s:1348   .text:0000000000003444 $d
             forth.s:1348   .text:0000000000003448 _D2STAR
             forth.s:1348   .text:000000000000344c $t
             forth.s:1348   .text:000000000000344c D2STAR
             forth.s:1360   .text:000000000000345e $d
             forth.s:1360   .text:0000000000003462 _D2SL
             forth.s:1360   .text:0000000000003466 $t
             forth.s:1360   .text:0000000000003468 D2SL
             forth.s:1375   .text:0000000000003476 $d
             forth.s:1375   .text:000000000000347a _DSLMOD
             forth.s:1375   .text:0000000000003480 $t
             forth.s:1375   .text:0000000000003480 DSLMOD
             forth.s:1411   .text:00000000000034cc $d
             forth.s:1411   .text:00000000000034d0 _DSLASH
             forth.s:1411   .text:00000000000034d4 DSLASH
             forth.s:1413   .text:00000000000034d8 $d
             forth.s:1433   .text:000000000000351c _DSTAR
ARM GAS  forth.s 			page 216


             forth.s:1433   .text:0000000000003520 DSTAR
             forth.s:1482   .text:0000000000003556 $d
             forth.s:1482   .text:000000000000355a _SLMOD
             forth.s:1484   .text:0000000000003564 $d
             forth.s:1495   .text:000000000000357c _MODD
             forth.s:1495   .text:0000000000003580 $t
             forth.s:1497   .text:0000000000003584 $d
             forth.s:1506   .text:0000000000003594 _SLASH
             forth.s:1506   .text:0000000000003596 $t
             forth.s:1506   .text:0000000000003598 SLASH
             forth.s:1508   .text:000000000000359c $d
             forth.s:1519   .text:00000000000035b0 _SSMOD
             forth.s:1519   .text:00000000000035b6 $t
             forth.s:1519   .text:00000000000035b8 SSMOD
             forth.s:1521   .text:00000000000035bc $d
             forth.s:1533   .text:00000000000035d4 _STASL
             forth.s:1533   .text:00000000000035d8 STASL
             forth.s:1535   .text:00000000000035dc $d
             forth.s:1549   .text:00000000000035f0 _ALGND
             forth.s:1549   .text:00000000000035f8 $t
             forth.s:1549   .text:00000000000035f8 ALGND
             forth.s:1560   .text:0000000000003608 $d
             forth.s:1560   .text:000000000000360c _TCHAR
             forth.s:1560   .text:0000000000003612 $t
             forth.s:1560   .text:0000000000003614 TCHAR
             forth.s:1562   .text:0000000000003618 $d
             forth.s:1572   .text:0000000000003650 TCHA1
             forth.s:1580   .text:0000000000003658 _DEPTH
             forth.s:1580   .text:000000000000365e $t
             forth.s:1580   .text:0000000000003660 DEPTH
             forth.s:1592   .text:0000000000003678 $d
             forth.s:1592   .text:000000000000367c _PICK
             forth.s:1594   .text:0000000000003688 $d
             forth.s:1610   .text:00000000000036a4 _HERE
             forth.s:1612   .text:00000000000036b0 $d
             forth.s:1621   .text:00000000000036c0 _PAD
             forth.s:1621   .text:00000000000036c4 $t
             forth.s:1623   .text:00000000000036c8 $d
             forth.s:1634   .text:00000000000036e0 _TIB
             forth.s:1634   .text:00000000000036e4 $t
             forth.s:1634   .text:00000000000036e4 TIB
             forth.s:1644   .text:00000000000036ee $d
             forth.s:1644   .text:00000000000036f2 _ATEXE
             forth.s:1657   .text:0000000000003710 $d
             forth.s:1657   .text:0000000000003714 _CMOVE
             forth.s:1657   .text:000000000000371a $t
             forth.s:1664   .text:000000000000372e CMOV1
             forth.s:1661   .text:0000000000003726 CMOV0
             forth.s:1669   .text:0000000000003738 CMOV2
             forth.s:1677   .text:0000000000003740 $d
             forth.s:1677   .text:0000000000003744 _MOVE
             forth.s:1695   .text:0000000000003776 MOVE1
             forth.s:1692   .text:0000000000003772 MOVE3
             forth.s:1689   .text:000000000000376e MOVE0
             forth.s:1700   .text:0000000000003780 MOVE2
             forth.s:1709   .text:0000000000003788 $d
             forth.s:1709   .text:000000000000378c _FILL
ARM GAS  forth.s 			page 217


             forth.s:1717   .text:00000000000037a2 FILL2
             forth.s:1713   .text:000000000000379a FILL1
             forth.s:1727   .text:00000000000037aa $d
             forth.s:1727   .text:00000000000037ae _PACKS
             forth.s:1727   .text:00000000000037b4 $t
             forth.s:1727   .text:00000000000037b4 PACKS
             forth.s:1729   .text:00000000000037b8 $d
             forth.s:1758   .text:0000000000003810 _DIGIT
             forth.s:1758   .text:0000000000003816 $t
             forth.s:1758   .text:0000000000003818 DIGIT
             forth.s:1760   .text:000000000000381c $d
             forth.s:1775   .text:0000000000003850 _EXTRC
             forth.s:1775   .text:0000000000003858 $t
             forth.s:1775   .text:0000000000003858 EXTRC
             forth.s:1777   .text:000000000000385c $d
             forth.s:1787   .text:0000000000003870 _BDIGS
             forth.s:1789   .text:0000000000003878 $d
             forth.s:1799   .text:000000000000388c _HOLD
             forth.s:1799   .text:0000000000003894 HOLD
             forth.s:1801   .text:0000000000003898 $d
             forth.s:1817   .text:00000000000038bc _DIG
             forth.s:1817   .text:00000000000038be $t
             forth.s:1817   .text:00000000000038c0 DIG
             forth.s:1819   .text:00000000000038c4 $d
             forth.s:1831   .text:00000000000038dc _DIGS
             forth.s:1833   .text:00000000000038e4 DIGS1
             forth.s:1834   .text:00000000000038e4 $d
             forth.s:1839   .text:0000000000003900 DIGS2
             forth.s:1849   .text:000000000000390c _SIGN
             forth.s:1851   .text:0000000000003918 $d
             forth.s:1855   .text:0000000000003930 SIGN1
             forth.s:1863   .text:0000000000003938 _EDIGS
             forth.s:1865   .text:0000000000003940 $d
             forth.s:1880   .text:000000000000395c STRR
             forth.s:1881   .text:000000000000395c $t
             forth.s:1882   .text:0000000000003960 $d
             forth.s:1899   .text:000000000000398c _HEX
             forth.s:1899   .text:0000000000003990 $t
             forth.s:1899   .text:0000000000003990 HEX
             forth.s:1901   .text:0000000000003994 $d
             forth.s:1912   .text:00000000000039ac _BIN
             forth.s:1912   .text:00000000000039b0 $t
             forth.s:1912   .text:00000000000039b0 BIN
             forth.s:1914   .text:00000000000039b4 $d
             forth.s:1924   .text:00000000000039cc _DECIM
             forth.s:1924   .text:00000000000039d4 $t
             forth.s:1926   .text:00000000000039d8 $d
             forth.s:1941   .text:00000000000039f0 _DIGTQ
             forth.s:1943   .text:00000000000039fc $d
             forth.s:1956   .text:0000000000003a44 DGTQ1
             forth.s:1969   .text:0000000000003a54 $t
             forth.s:1970   .text:0000000000003a58 $d
             forth.s:2972   .text:0000000000004694 ABORQ
             forth.s:1993   .text:0000000000003ae0 $d
             forth.s:2005   .text:0000000000003af4 $t
             forth.s:2022   .text:0000000000003b12 $d
             forth.s:2045   .text:0000000000003b52 _INTQ
ARM GAS  forth.s 			page 218


             forth.s:2045   .text:0000000000003b58 INTQ
             forth.s:2048   .text:0000000000003b5c $d
             forth.s:2114   .text:0000000000003c64 _NUMBER
             forth.s:2114   .text:0000000000003c6c NUMBER
             forth.s:2116   .text:0000000000003c70 $d
             forth.s:2134   .text:0000000000003c90 _SPACE
             forth.s:2134   .text:0000000000003c96 $t
             forth.s:2136   .text:0000000000003c9c $d
             forth.s:2145   .text:0000000000003cac _SPACS
             forth.s:2145   .text:0000000000003cb4 SPACS
             forth.s:2147   .text:0000000000003cb8 $d
             forth.s:2153   .text:0000000000003cd4 CHAR2
             forth.s:2151   .text:0000000000003cd0 CHAR1
             forth.s:2162   .text:0000000000003ce4 _TYPEE
             forth.s:2164   .text:0000000000003cf0 $d
             forth.s:2170   .text:0000000000003d08 TYPE2
             forth.s:2166   .text:0000000000003cfc TYPE1
             forth.s:2180   .text:0000000000003d1c _CR
             forth.s:2182   .text:0000000000003d24 $d
             forth.s:2194   .text:0000000000003d40 DOSTR
             forth.s:2195   .text:0000000000003d40 $t
             forth.s:2197   .text:0000000000003d44 $d
             forth.s:2215   .text:0000000000003d6c STRQP
             forth.s:2216   .text:0000000000003d6c $t
             forth.s:2217   .text:0000000000003d70 $d
             forth.s:2226   .text:0000000000003d78 DOTST
             forth.s:2227   .text:0000000000003d78 $t
             forth.s:2228   .text:0000000000003d7c $d
             forth.s:2239   .text:0000000000003d88 $t
             forth.s:2240   .text:0000000000003d8c $d
             forth.s:2250   .text:0000000000003d9c _DOTR
             forth.s:2250   .text:0000000000003da0 DOTR
             forth.s:2252   .text:0000000000003da4 $d
             forth.s:2267   .text:0000000000003dc8 _UDOTR
             forth.s:2267   .text:0000000000003dcc $t
             forth.s:2267   .text:0000000000003dcc UDOTR
             forth.s:2269   .text:0000000000003dd0 $d
             forth.s:2288   .text:0000000000003e0c _UDOT
             forth.s:2290   .text:0000000000003e14 $d
             forth.s:2303   .text:0000000000003e34 _DOT
             forth.s:2303   .text:0000000000003e36 $t
             forth.s:2305   .text:0000000000003e3c $d
             forth.s:2325   .text:0000000000003eac DOT1
             forth.s:2342   .text:0000000000003ebc _DTOA
             forth.s:2342   .text:0000000000003ec0 $t
             forth.s:2342   .text:0000000000003ec0 DTOA
             forth.s:2344   .text:0000000000003ec4 $d
             forth.s:2376   .text:0000000000003f3c _DDOT
             forth.s:2376   .text:0000000000003f40 DDOT
             forth.s:2378   .text:0000000000003f44 $d
             forth.s:2413   .text:0000000000003fc8 _HDOT
             forth.s:2415   .text:0000000000003fd0 $d
             forth.s:2437   .text:0000000000004018 _QUEST
             forth.s:2437   .text:000000000000401a $t
             forth.s:2437   .text:000000000000401c QUEST
             forth.s:2439   .text:0000000000004020 $d
             forth.s:2453   .text:000000000000402c PARS
ARM GAS  forth.s 			page 219


             forth.s:2454   .text:000000000000402c $t
             forth.s:2455   .text:0000000000004030 $d
             forth.s:2521   .text:0000000000004140 PARS8
             forth.s:2485   .text:00000000000040b4 PARS3
             forth.s:2468   .text:000000000000406c PARS1
             forth.s:2483   .text:00000000000040b0 PARS2
             forth.s:2489   .text:00000000000040c0 PARS4
             forth.s:2501   .text:00000000000040f0 PARS5
             forth.s:2508   .text:0000000000004114 PARS6
             forth.s:2514   .text:0000000000004128 PARS7
             forth.s:2532   .text:0000000000004154 _PARSE
             forth.s:2532   .text:000000000000415a $t
             forth.s:2532   .text:000000000000415c PARSE
             forth.s:2534   .text:0000000000004160 $d
             forth.s:2555   .text:00000000000041a0 _DOTPR
             forth.s:2555   .text:00000000000041a4 DOTPR
             forth.s:2557   .text:00000000000041a8 $d
             forth.s:2568   .text:00000000000041c0 _PAREN
             forth.s:2568   .text:00000000000041c2 $t
             forth.s:2568   .text:00000000000041c4 PAREN
             forth.s:2570   .text:00000000000041c8 $d
             forth.s:2581   .text:00000000000041e0 _BKSLA
             forth.s:2581   .text:00000000000041e2 $t
             forth.s:2581   .text:00000000000041e4 BKSLA
             forth.s:2583   .text:00000000000041e8 $d
             forth.s:2594   .text:0000000000004200 _CHAR
             forth.s:2594   .text:0000000000004208 CHAR
             forth.s:2596   .text:000000000000420c $d
             forth.s:2606   .text:0000000000004224 _IMCHAR
             forth.s:2606   .text:000000000000422c IMCHAR
             forth.s:2608   .text:0000000000004230 $d
             forth.s:3204   .text:0000000000004954 LITER
             forth.s:2617   .text:0000000000004240 _WORDD
             forth.s:2617   .text:0000000000004248 WORDD
             forth.s:2619   .text:000000000000424c $d
             forth.s:2631   .text:0000000000004264 _TOKEN
             forth.s:2631   .text:000000000000426a $t
             forth.s:2631   .text:000000000000426c TOKEN
             forth.s:2633   .text:0000000000004270 $d
             forth.s:2798   .text:0000000000004460 UPPER
             forth.s:2647   .text:0000000000004284 _NAMET
             forth.s:2647   .text:000000000000428a $t
             forth.s:2647   .text:000000000000428c NAMET
             forth.s:2649   .text:0000000000004290 $d
             forth.s:2668   .text:00000000000042b0 _SAMEQ
             forth.s:2668   .text:00000000000042b6 $t
             forth.s:2668   .text:00000000000042b8 SAMEQ
             forth.s:2670   .text:00000000000042bc $d
             forth.s:2687   .text:0000000000004304 SAME2
             forth.s:2672   .text:00000000000042c8 SAME1
             forth.s:2702   .text:0000000000004318 FIND
             forth.s:2703   .text:0000000000004318 $t
             forth.s:2704   .text:000000000000431c $d
             forth.s:2711   .text:0000000000004338 FIND1
             forth.s:2731   .text:0000000000004390 FIND6
             forth.s:2724   .text:0000000000004378 FIND2
             forth.s:2729   .text:0000000000004388 FIND3
ARM GAS  forth.s 			page 220


             forth.s:2738   .text:00000000000043a8 FIND4
             forth.s:2744   .text:00000000000043c4 FIND5
             forth.s:2760   .text:00000000000043ec _NAMEQ
             forth.s:2760   .text:00000000000043f2 $t
             forth.s:2760   .text:00000000000043f4 NAMEQ
             forth.s:2762   .text:00000000000043f8 $d
             forth.s:2777   .text:000000000000440c _ASCIZ
             forth.s:2777   .text:0000000000004412 $t
             forth.s:2777   .text:0000000000004414 ASCIZ
             forth.s:2779   .text:0000000000004418 $d
             forth.s:2798   .text:0000000000004458 _UPPER
             forth.s:2798   .text:000000000000445e $t
             forth.s:2800   .text:0000000000004464 $d
             forth.s:2831   .text:00000000000044e8 BKSP
             forth.s:2832   .text:00000000000044e8 $t
             forth.s:2833   .text:00000000000044ec $d
             forth.s:2847   .text:0000000000004530 BACK1
             forth.s:2856   .text:0000000000004534 TAP
             forth.s:2857   .text:0000000000004534 $t
             forth.s:2858   .text:0000000000004538 $d
             forth.s:2871   .text:0000000000004550 KTAP
             forth.s:2872   .text:0000000000004550 TTAP
             forth.s:2873   .text:0000000000004550 $t
             forth.s:2874   .text:0000000000004554 $d
             forth.s:2888   .text:0000000000004594 KTAP2
             forth.s:2885   .text:000000000000458c KTAP1
             forth.s:2900   .text:00000000000045ac _ACCEP
             forth.s:2902   .text:00000000000045b8 $d
             forth.s:2905   .text:00000000000045c4 ACCP1
             forth.s:2921   .text:000000000000460c ACCP4
             forth.s:2917   .text:0000000000004600 ACCP2
             forth.s:2919   .text:0000000000004604 ACCP3
             forth.s:2932   .text:0000000000004620 _QUERY
             forth.s:2932   .text:0000000000004626 $t
             forth.s:2932   .text:0000000000004628 QUERY
             forth.s:2934   .text:000000000000462c $d
             forth.s:2954   .text:0000000000004660 _ABORT
             forth.s:2954   .text:0000000000004666 $t
             forth.s:2956   .text:000000000000466c ABORT1
             forth.s:2957   .text:000000000000466c $d
             forth.s:2973   .text:0000000000004694 $t
             forth.s:2974   .text:0000000000004698 $d
             forth.s:2992   .text:00000000000046bc _INTER
             forth.s:2994   .text:00000000000046cc $d
             forth.s:3003   .text:0000000000004708 INTE1
             forth.s:3000   .text:00000000000046fe $t
             forth.s:3001   .text:0000000000004700 $d
             forth.s:3007   .text:0000000000004718 INTE2
             forth.s:3014   .text:0000000000004720 _LBRAC
             forth.s:3014   .text:0000000000004722 $t
             forth.s:3014   .text:0000000000004724 LBRAC
             forth.s:3016   .text:0000000000004728 $d
             forth.s:3026   .text:0000000000004740 _DOTOK
             forth.s:3026   .text:0000000000004744 $t
             forth.s:3026   .text:0000000000004744 DOTOK
             forth.s:3028   .text:0000000000004748 $d
             forth.s:3034   .text:000000000000476c DOTO1
ARM GAS  forth.s 			page 221


             forth.s:3035   .text:000000000000476c $d
             forth.s:3043   .text:0000000000004778 _QSTAC
             forth.s:3043   .text:0000000000004780 QSTAC
             forth.s:3045   .text:0000000000004784 $d
             forth.s:3047   .text:000000000000479a $t
             forth.s:3048   .text:000000000000479c $d
             forth.s:3055   .text:00000000000047a4 _EVAL
             forth.s:3057   .text:00000000000047b0 EVAL1
             forth.s:3058   .text:00000000000047b0 $d
             forth.s:3066   .text:00000000000047d8 EVAL2
             forth.s:3076   .text:00000000000047e8 _PRESE
             forth.s:3078   .text:00000000000047f4 $d
             forth.s:3088   .text:0000000000004808 _QUIT
             forth.s:3089   .text:0000000000004810 $d
             forth.s:3091   .text:000000000000481c QUIT1
             forth.s:3093   .text:0000000000004820 QUIT2
             forth.s:3103   .text:0000000000004834 _FORGET
             forth.s:3103   .text:000000000000483c FORGET
             forth.s:3105   .text:0000000000004840 $d
             forth.s:3603   .text:0000000000004ddc OVERT
             forth.s:3133   .text:0000000000004888 $d
             forth.s:3133   .text:000000000000488c _TICK
             forth.s:3133   .text:000000000000488e $t
             forth.s:3133   .text:0000000000004890 TICK
             forth.s:3135   .text:0000000000004894 $d
             forth.s:3139   .text:00000000000048a8 TICK1
             forth.s:3147   .text:00000000000048b0 _ALLOT
             forth.s:3147   .text:00000000000048b6 $t
             forth.s:3149   .text:00000000000048bc $d
             forth.s:3158   .text:00000000000048cc _COMMA
             forth.s:3158   .text:00000000000048ce $t
             forth.s:3158   .text:00000000000048d0 COMMA
             forth.s:3160   .text:00000000000048d4 $d
             forth.s:3174   .text:00000000000048f0 $d
             forth.s:3174   .text:00000000000048f4 _BCOMP
             forth.s:3174   .text:00000000000048fe $t
             forth.s:3174   .text:0000000000004900 BCOMP
             forth.s:3176   .text:0000000000004904 $d
             forth.s:3186   .text:0000000000004914 _COMPI
             forth.s:3186   .text:000000000000491c $t
             forth.s:3186   .text:000000000000491c COMPI
             forth.s:3188   .text:0000000000004920 $d
             forth.s:3204   .text:000000000000494c _LITER
             forth.s:3204   .text:0000000000004954 $t
             forth.s:3206   .text:0000000000004958 $d
             forth.s:3642   .text:0000000000004e38 CALLC
             forth.s:3216   .text:000000000000496c STRCQ
             forth.s:3217   .text:000000000000496c $t
             forth.s:3218   .text:0000000000004970 $d
             forth.s:3240   .text:00000000000049a8 _FOR
             forth.s:3240   .text:00000000000049ac $t
             forth.s:3240   .text:00000000000049ac FOR
             forth.s:3242   .text:00000000000049b0 $d
             forth.s:3251   .text:00000000000049c8 _DO
             forth.s:3251   .text:00000000000049cc DO
             forth.s:3253   .text:00000000000049d0 $d
             forth.s:3259   .text:00000000000049fc DOPLOOP
ARM GAS  forth.s 			page 222


             forth.s:3260   .text:00000000000049fc $t
             forth.s:3276   .text:0000000000004a1e $d
             forth.s:3276   .text:0000000000004a22 _PLOOP
             forth.s:3276   .text:0000000000004a28 $t
             forth.s:3276   .text:0000000000004a28 PLOOP
             forth.s:3278   .text:0000000000004a2c $d
             forth.s:3282   .text:0000000000004a40 DOLOOP
             forth.s:3283   .text:0000000000004a40 $t
             forth.s:3301   .text:0000000000004a68 $d
             forth.s:3301   .text:0000000000004a6c _LOOP
             forth.s:3301   .text:0000000000004a74 LOOP
             forth.s:3303   .text:0000000000004a78 $d
             forth.s:3314   .text:0000000000004a90 _BEGIN
             forth.s:3314   .text:0000000000004a96 $t
             forth.s:3314   .text:0000000000004a98 BEGIN
             forth.s:3316   .text:0000000000004a9c $d
             forth.s:3325   .text:0000000000004aa4 $d
             forth.s:3325   .text:0000000000004aa8 _FNEXT
             forth.s:3325   .text:0000000000004ab0 FNEXT
             forth.s:3327   .text:0000000000004ab4 $d
             forth.s:3335   .text:0000000000004acc _I
             forth.s:3335   .text:0000000000004ace $t
             forth.s:3335   .text:0000000000004ad0 I
             forth.s:3344   .text:0000000000004adc $d
             forth.s:3344   .text:0000000000004ae0 _J
             forth.s:3344   .text:0000000000004ae2 $t
             forth.s:3344   .text:0000000000004ae4 J
             forth.s:3354   .text:0000000000004af0 $d
             forth.s:3354   .text:0000000000004af4 _UNTIL
             forth.s:3354   .text:0000000000004afa $t
             forth.s:3354   .text:0000000000004afc UNTIL
             forth.s:3356   .text:0000000000004b00 $d
             forth.s:3365   .text:0000000000004b18 _AGAIN
             forth.s:3365   .text:0000000000004b1e $t
             forth.s:3365   .text:0000000000004b20 AGAIN
             forth.s:3367   .text:0000000000004b24 $d
             forth.s:3376   .text:0000000000004b3c _IFF
             forth.s:3376   .text:0000000000004b40 IFF
             forth.s:3378   .text:0000000000004b44 $d
             forth.s:3390   .text:0000000000004b6c _AHEAD
             forth.s:3390   .text:0000000000004b72 $t
             forth.s:3390   .text:0000000000004b74 AHEAD
             forth.s:3392   .text:0000000000004b78 $d
             forth.s:3404   .text:0000000000004ba0 _REPEA
             forth.s:3404   .text:0000000000004ba8 REPEA
             forth.s:3406   .text:0000000000004bac $d
             forth.s:3417   .text:0000000000004bc4 _THENN
             forth.s:3417   .text:0000000000004bcc THENN
             forth.s:3419   .text:0000000000004bd0 $d
             forth.s:3430   .text:0000000000004be4 _AFT
             forth.s:3430   .text:0000000000004be8 $t
             forth.s:3430   .text:0000000000004be8 AFT
             forth.s:3432   .text:0000000000004bec $d
             forth.s:3444   .text:0000000000004c04 _ELSEE
             forth.s:3444   .text:0000000000004c0c ELSEE
             forth.s:3446   .text:0000000000004c10 $d
             forth.s:3456   .text:0000000000004c24 _WHILE
ARM GAS  forth.s 			page 223


             forth.s:3456   .text:0000000000004c2a $t
             forth.s:3456   .text:0000000000004c2c WHILE
             forth.s:3458   .text:0000000000004c30 $d
             forth.s:3467   .text:0000000000004c40 _ABRTQ
             forth.s:3467   .text:0000000000004c48 ABRTQ
             forth.s:3469   .text:0000000000004c4c $d
             forth.s:3478   .text:0000000000004c64 _STRQ
             forth.s:3478   .text:0000000000004c68 STRQ
             forth.s:3480   .text:0000000000004c6c $d
             forth.s:3490   .text:0000000000004c84 _DOTQ
             forth.s:3490   .text:0000000000004c88 DOTQ
             forth.s:3492   .text:0000000000004c8c $d
             forth.s:3506   .text:0000000000004ca4 _UNIQU
             forth.s:3506   .text:0000000000004cac $t
             forth.s:3506   .text:0000000000004cac UNIQU
             forth.s:3508   .text:0000000000004cb0 $d
             forth.s:3515   .text:0000000000004cd8 UNIQ1
             forth.s:3512   .text:0000000000004ccc $d
             forth.s:3525   .text:0000000000004ce0 SNAME
             forth.s:3526   .text:0000000000004ce0 $t
             forth.s:3527   .text:0000000000004ce4 $d
             forth.s:3543   .text:0000000000004d28 SNAM1
             forth.s:3555   .text:0000000000004d3c _SCOMP
             forth.s:3555   .text:0000000000004d48 SCOMP
             forth.s:3557   .text:0000000000004d4c $d
             forth.s:3569   .text:0000000000004d84 SCOM2
             forth.s:3566   .text:0000000000004d7c SCOM1
             forth.s:3574   .text:0000000000004d98 SCOM3
             forth.s:3583   .text:0000000000004da0 COLON_ABORT
             forth.s:3584   .text:0000000000004da0 $t
             forth.s:3585   .text:0000000000004da4 $d
             forth.s:3603   .text:0000000000004dd4 _OVERT
             forth.s:3603   .text:0000000000004dda $t
             forth.s:3605   .text:0000000000004de0 $d
             forth.s:3616   .text:0000000000004df8 _SEMIS
             forth.s:3616   .text:0000000000004dfa $t
             forth.s:3616   .text:0000000000004dfc SEMIS
             forth.s:3618   .text:0000000000004e00 $d
             forth.s:3630   .text:0000000000004e1c _RBRAC
             forth.s:3630   .text:0000000000004e1e $t
             forth.s:3630   .text:0000000000004e20 RBRAC
             forth.s:3632   .text:0000000000004e24 $d
             forth.s:3643   .text:0000000000004e38 $t
             forth.s:3644   .text:0000000000004e3c $d
             forth.s:3656   .text:0000000000004e54 _COLON
             forth.s:3656   .text:0000000000004e56 $t
             forth.s:3656   .text:0000000000004e58 COLON
             forth.s:3658   .text:0000000000004e5c $d
             forth.s:3670   .text:0000000000004e78 _IMMED
             forth.s:3670   .text:0000000000004e82 $t
             forth.s:3670   .text:0000000000004e84 IMMED
             forth.s:3672   .text:0000000000004e88 $d
             forth.s:3690   .text:0000000000004eb4 _CONST
             forth.s:3690   .text:0000000000004ec0 CONST
             forth.s:3692   .text:0000000000004ec4 $d
             forth.s:3703   .text:0000000000004ef4 $t
             forth.s:3710   .text:0000000000004ef4 DODOES
ARM GAS  forth.s 			page 224


             forth.s:3712   .text:0000000000004ef8 $d
             forth.s:3727   .text:0000000000004f1c $d
             forth.s:3727   .text:0000000000004f20 _DOES
             forth.s:3727   .text:0000000000004f26 $t
             forth.s:3727   .text:0000000000004f28 DOES
             forth.s:3729   .text:0000000000004f2c $d
             forth.s:3744   .text:0000000000004f5c _DEFERAT
             forth.s:3744   .text:0000000000004f64 DEFERAT
             forth.s:3746   .text:0000000000004f68 $d
             forth.s:3756   .text:0000000000004f80 _DEFERSTO
             forth.s:3756   .text:0000000000004f88 DEFERSTO
             forth.s:3758   .text:0000000000004f8c $d
             forth.s:3769   .text:0000000000004fa8 _DEFER
             forth.s:3769   .text:0000000000004fae $t
             forth.s:3769   .text:0000000000004fb0 DEFER
             forth.s:3771   .text:0000000000004fb4 $d
             forth.s:3792   .text:0000000000005000 CREAT
             forth.s:3782   .text:0000000000004fe8 DEFER_NOP
             forth.s:3783   .text:0000000000004fe8 $t
             forth.s:3784   .text:0000000000004fec $d
             forth.s:3792   .text:0000000000004ff8 _CREAT
             forth.s:3794   .text:0000000000005004 $d
             forth.s:3807   .text:0000000000005028 _VARIA
             forth.s:3807   .text:0000000000005034 VARIA
             forth.s:3809   .text:0000000000005038 $d
             forth.s:3827   .text:0000000000005058 DMP
             forth.s:3828   .text:0000000000005058 $t
             forth.s:3829   .text:000000000000505c $d
             forth.s:3841   .text:0000000000005094 PDUM2
             forth.s:3835   .text:000000000000507c PDUM1
             forth.s:3853   .text:00000000000050a0 $d
             forth.s:3853   .text:00000000000050a4 _DUMP
             forth.s:3853   .text:00000000000050ac DUMP
             forth.s:3855   .text:00000000000050b0 $d
             forth.s:3881   .text:000000000000512c DUMP4
             forth.s:3871   .text:0000000000005104 DUMP1
             forth.s:3883   .text:0000000000005134 DUMP3
             forth.s:3896   .text:0000000000005148 TDOT
             forth.s:3897   .text:0000000000005148 $t
             forth.s:3898   .text:000000000000514c $d
             forth.s:3937   .text:00000000000051e0 _DOTS
             forth.s:3937   .text:00000000000051e4 DOTS
             forth.s:3939   .text:00000000000051e8 $d
             forth.s:3946   .text:0000000000005204 DOTS2
             forth.s:3942   .text:00000000000051f8 DOTS1
             forth.s:3951   .text:0000000000005214 RBASE
             forth.s:3952   .text:0000000000005214 $t
             forth.s:3960   .text:0000000000005224 RDOT
             forth.s:3962   .text:0000000000005228 $d
             forth.s:3989   .text:000000000000528c _TRACE
             forth.s:3989   .text:0000000000005292 $t
             forth.s:3989   .text:0000000000005294 TRACE
             forth.s:3991   .text:0000000000005298 $d
             forth.s:4010   .text:00000000000052dc _TNAME
             forth.s:4010   .text:00000000000052e2 $t
             forth.s:4010   .text:00000000000052e4 TNAME
             forth.s:4012   .text:00000000000052e8 $d
ARM GAS  forth.s 			page 225


             forth.s:4015   .text:00000000000052f4 TNAM1
             forth.s:4026   .text:0000000000005328 TNAM2
             forth.s:4035   .text:0000000000005338 _DOTID
             forth.s:4035   .text:000000000000533c $t
             forth.s:4035   .text:000000000000533c DOTID
             forth.s:4037   .text:0000000000005340 $d
             forth.s:4044   .text:0000000000005364 DOTI1
             forth.s:4045   .text:0000000000005372 $t
             forth.s:4046   .text:0000000000005374 $d
             forth.s:4048   *ABS*:0000000000000000 WANT_SEE
             forth.s:4121   .text:000000000000537c _VLIST
             forth.s:4121   .text:0000000000005382 $t
             forth.s:4121   .text:0000000000005384 VLIST
             forth.s:4123   .text:0000000000005388 $d
             forth.s:4134   .text:00000000000053a8 WORDS
             forth.s:4155   .text:00000000000053ec WC
             forth.s:4134   .text:00000000000053a0 _WORDS
             forth.s:4134   .text:00000000000053a6 $t
             forth.s:4136   .text:00000000000053ac $d
             forth.s:4139   .text:00000000000053b8 WORS1
             forth.s:4148   .text:00000000000053e0 WORS2
             forth.s:4155   .text:00000000000053e8 _WC
             forth.s:4157   .text:00000000000053f0 $d
             forth.s:4174   .text:000000000000542c _MARK
             forth.s:4174   .text:0000000000005434 MARK
             forth.s:4176   .text:0000000000005438 $d
             forth.s:4179   .text:0000000000005444 $t
             forth.s:4180   .text:0000000000005448 $d
             forth.s:4195   .text:0000000000005478 _ARRAY
             forth.s:4195   .text:000000000000547e $t
             forth.s:4195   .text:0000000000005480 ARRAY
             forth.s:4197   .text:0000000000005484 $d
             forth.s:4211   .text:00000000000054c0 DO_ARRAY
             forth.s:4212   .text:00000000000054c0 $t
             forth.s:4213   .text:00000000000054c4 $d
             forth.s:4231   .text:00000000000054e0 VERSN
             forth.s:4232   .text:00000000000054e0 $t
             forth.s:4233   .text:00000000000054e4 $d
             forth.s:4241   .text:00000000000054f4 _HI
             forth.s:4241   .text:00000000000054f8 HI
             forth.s:4243   .text:00000000000054fc $d
             forth.s:4244   .text:0000000000005516 $t
             forth.s:4245   .text:0000000000005518 $d
             forth.s:4269   .text:0000000000005564 $t
             forth.s:4270   .text:0000000000005568 $d
             forth.s:4282   .text:0000000000005584 PS2_QUERY
             forth.s:4283   .text:0000000000005584 $t
             forth.s:4284   .text:0000000000005588 $d
             forth.s:4298   .text:00000000000055ee $t
             forth.s:4299   .text:00000000000055f0 $d
             forth.s:4309   .text:00000000000055fc IF_SENSE
             forth.s:4310   .text:00000000000055fc $t
             forth.s:4311   .text:0000000000005600 $d
             forth.s:4325   .text:0000000000005630 READY
             forth.s:4326   .text:0000000000005630 $t
             forth.s:4327   .text:0000000000005634 $d
             forth.s:4327   .text:000000000000563e $t
ARM GAS  forth.s 			page 226


             forth.s:4328   .text:0000000000005640 $d
             forth.s:4346   .text:0000000000005668 COLD1
             forth.s:4347   .text:0000000000005668 $d
             forth.s:4362   .text:00000000000056b8 COLD2
             forth.s:4365   .text:00000000000056b8 $d
             forth.s:4368   .text:00000000000056bc $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:271    .text:000000000000020f $d
              init.s:276    .text:000000000000021f $d
              init.s:286    .text:0000000000000237 $d
              init.s:297    .text:0000000000000243 $d
              init.s:297    .text:0000000000000244 $t
              init.s:325    .text:00000000000002af $d
              init.s:450    .text:0000000000000475 $d
              init.s:450    .text:0000000000000476 $t
          ser-term.s:90     .text:0000000000000907 $d
          ser-term.s:90     .text:0000000000000908 $t
          ser-term.s:110    .text:0000000000000941 $d
          ser-term.s:110    .text:0000000000000942 $t
          ser-term.s:133    .text:000000000000097f $d
          ser-term.s:133    .text:0000000000000980 $t
          ser-term.s:164    .text:00000000000009c7 $d
          ser-term.s:164    .text:00000000000009c8 $t
          ser-term.s:191    .text:0000000000000a3d $d
          ser-term.s:191    .text:0000000000000a3e $t
          ser-term.s:203    .text:0000000000000a6b $d
          ser-term.s:203    .text:0000000000000a6c $t
             tvout.s:264    .text:0000000000000cb7 $d
             tvout.s:264    .text:0000000000000cb8 $t
             tvout.s:278    .text:0000000000000ceb $d
             tvout.s:278    .text:0000000000000cec $t
             tvout.s:306    .text:0000000000000d45 $d
             tvout.s:306    .text:0000000000000d46 $t
             tvout.s:325    .text:0000000000000d73 $d
             tvout.s:325    .text:0000000000000d74 $t
             tvout.s:427    .text:0000000000000ead $d
             tvout.s:427    .text:0000000000000eae $t
             tvout.s:448    .text:0000000000000f07 $d
             tvout.s:448    .text:0000000000000f08 $t
             tvout.s:495    .text:0000000000000f9d $d
             tvout.s:495    .text:0000000000000f9e $t
           ps2_kbd.s:307    .text:000000000000168b $d
           ps2_kbd.s:307    .text:000000000000168c $t
           ps2_kbd.s:396    .text:0000000000001787 $d
           ps2_kbd.s:396    .text:0000000000001788 $t
           ps2_kbd.s:616    .text:0000000000001a29 $d
           ps2_kbd.s:616    .text:0000000000001a2a $t
           ps2_kbd.s:633    .text:0000000000001a63 $d
           ps2_kbd.s:633    .text:0000000000001a64 $t
         spi-flash.s:85     .text:0000000000001b4f $d
         spi-flash.s:85     .text:0000000000001b50 $t
         spi-flash.s:151    .text:0000000000001c1b $d
         spi-flash.s:151    .text:0000000000001c1c $t
         spi-flash.s:238    .text:0000000000001d5f $d
         spi-flash.s:238    .text:0000000000001d60 $t
         spi-flash.s:256    .text:0000000000001d9b $d
ARM GAS  forth.s 			page 227


         spi-flash.s:256    .text:0000000000001d9c $t
         spi-flash.s:278    .text:0000000000001def $d
         spi-flash.s:278    .text:0000000000001df0 $t
         spi-flash.s:325    .text:0000000000001e6f $d
         spi-flash.s:325    .text:0000000000001e70 $t
         spi-flash.s:343    .text:0000000000001e91 $d
         spi-flash.s:343    .text:0000000000001e92 $t
         spi-flash.s:352    .text:0000000000001ea5 $d
         spi-flash.s:352    .text:0000000000001ea6 $t
               fpu.s:201    .text:000000000000204f $d
               fpu.s:201    .text:0000000000002050 $t
               fpu.s:214    .text:000000000000206f $d
               fpu.s:214    .text:0000000000002070 $t
               fpu.s:228    .text:000000000000208f $d
               fpu.s:228    .text:0000000000002090 $t
               fpu.s:241    .text:00000000000020af $d
               fpu.s:241    .text:00000000000020b0 $t
               fpu.s:264    .text:00000000000020ed $d
               fpu.s:264    .text:00000000000020ee $t
               fpu.s:276    .text:000000000000210d $d
               fpu.s:276    .text:000000000000210e $t
               fpu.s:298    .text:0000000000002147 $d
               fpu.s:298    .text:0000000000002148 $t
               fpu.s:309    .text:0000000000002163 $d
               fpu.s:309    .text:0000000000002164 $t
               fpu.s:319    .text:000000000000217d $d
               fpu.s:319    .text:000000000000217e $t
               fpu.s:332    .text:00000000000021ad $d
               fpu.s:332    .text:00000000000021ae $t
               fpu.s:358    .text:00000000000021fd $d
               fpu.s:358    .text:00000000000021fe $t
               fpu.s:382    .text:0000000000002241 $d
               fpu.s:382    .text:0000000000002242 $t
               fpu.s:391    .text:000000000000225b $d
               fpu.s:391    .text:000000000000225c $t
            strtof.s:204    .text:0000000000002497 $d
            strtof.s:204    .text:0000000000002498 $t
              ftoa.s:325    .text:000000000000298b $d
              ftoa.s:325    .text:000000000000298c $t
             forth.s:132    .text:0000000000002a49 $d
             forth.s:132    .text:0000000000002a4a $t
             forth.s:144    .text:0000000000002a6d $d
             forth.s:144    .text:0000000000002a6e $t
             forth.s:156    .text:0000000000002a8f $d
             forth.s:156    .text:0000000000002a90 $t
             forth.s:178    .text:0000000000002ac9 $d
             forth.s:178    .text:0000000000002aca $t
             forth.s:214    .text:0000000000002ae7 $d
             forth.s:214    .text:0000000000002ae8 $t
             forth.s:261    .text:0000000000002b95 $d
             forth.s:261    .text:0000000000002b96 $t
             forth.s:356    .text:0000000000002c25 $d
             forth.s:356    .text:0000000000002c26 $t
             forth.s:381    .text:0000000000002c53 $d
             forth.s:381    .text:0000000000002c54 $t
             forth.s:391    .text:0000000000002c67 $d
             forth.s:391    .text:0000000000002c68 $t
ARM GAS  forth.s 			page 228


             forth.s:400    .text:0000000000002c73 $d
             forth.s:400    .text:0000000000002c74 $t
             forth.s:420    .text:0000000000002ca1 $d
             forth.s:420    .text:0000000000002ca2 $t
             forth.s:429    .text:0000000000002cb5 $d
             forth.s:429    .text:0000000000002cb6 $t
             forth.s:486    .text:0000000000002d29 $d
             forth.s:486    .text:0000000000002d2a $t
             forth.s:502    .text:0000000000002d4b $d
             forth.s:502    .text:0000000000002d4c $t
             forth.s:512    .text:0000000000002d5d $d
             forth.s:512    .text:0000000000002d5e $t
             forth.s:521    .text:0000000000002d6f $d
             forth.s:521    .text:0000000000002d70 $t
             forth.s:538    .text:0000000000002d91 $d
             forth.s:538    .text:0000000000002d92 $t
             forth.s:568    .text:0000000000002dd7 $d
             forth.s:568    .text:0000000000002dd8 $t
             forth.s:577    .text:0000000000002ded $d
             forth.s:577    .text:0000000000002dee $t
             forth.s:625    .text:0000000000002e47 $d
             forth.s:625    .text:0000000000002e48 $t
             forth.s:636    .text:0000000000002e5b $d
             forth.s:636    .text:0000000000002e5c $t
             forth.s:644    .text:0000000000002e69 $d
             forth.s:644    .text:0000000000002e6a $t
             forth.s:652    .text:0000000000002e79 $d
             forth.s:652    .text:0000000000002e7a $t
             forth.s:660    .text:0000000000002e89 $d
             forth.s:660    .text:0000000000002e8a $t
             forth.s:684    .text:0000000000002eb9 $d
             forth.s:684    .text:0000000000002eba $t
             forth.s:709    .text:0000000000002eed $d
             forth.s:709    .text:0000000000002eee $t
             forth.s:717    .text:0000000000002efd $d
             forth.s:717    .text:0000000000002efe $t
             forth.s:725    .text:0000000000002f0f $d
             forth.s:725    .text:0000000000002f10 $t
             forth.s:746    .text:0000000000002f37 $d
             forth.s:746    .text:0000000000002f38 $t
             forth.s:775    .text:0000000000002f73 $d
             forth.s:775    .text:0000000000002f74 $t
             forth.s:785    .text:0000000000002f87 $d
             forth.s:785    .text:0000000000002f88 $t
             forth.s:798    .text:0000000000002fa5 $d
             forth.s:798    .text:0000000000002fa6 $t
             forth.s:851    .text:000000000000301d $d
             forth.s:851    .text:000000000000301e $t
             forth.s:892    .text:0000000000003073 $d
             forth.s:892    .text:0000000000003074 $t
             forth.s:915    .text:000000000000309f $d
             forth.s:915    .text:00000000000030a0 $t
             forth.s:928    .text:00000000000030bf $d
             forth.s:928    .text:00000000000030c0 $t
             forth.s:952    .text:00000000000030ef $d
             forth.s:952    .text:00000000000030f0 $t
             forth.s:998    .text:0000000000003147 $d
ARM GAS  forth.s 			page 229


             forth.s:998    .text:0000000000003148 $t
             forth.s:1010   .text:000000000000315f $d
             forth.s:1010   .text:0000000000003160 $t
             forth.s:1022   .text:000000000000317b $d
             forth.s:1022   .text:000000000000317c $t
             forth.s:1083   .text:00000000000031d7 $d
             forth.s:1083   .text:00000000000031d8 $t
             forth.s:1092   .text:00000000000031eb $d
             forth.s:1092   .text:00000000000031ec $t
             forth.s:1119   .text:000000000000322d $d
             forth.s:1119   .text:000000000000322e $t
             forth.s:1138   .text:0000000000003251 $d
             forth.s:1138   .text:0000000000003252 $t
             forth.s:1157   .text:000000000000327d $d
             forth.s:1157   .text:000000000000327e $t
             forth.s:1197   .text:00000000000032d7 $d
             forth.s:1197   .text:00000000000032d8 $t
             forth.s:1217   .text:0000000000003301 $d
             forth.s:1217   .text:0000000000003302 $t
             forth.s:1231   .text:000000000000331f $d
             forth.s:1231   .text:0000000000003320 $t
             forth.s:1242   .text:000000000000333d $d
             forth.s:1242   .text:000000000000333e $t
             forth.s:1259   .text:000000000000335b $d
             forth.s:1259   .text:000000000000335c $t
             forth.s:1276   .text:0000000000003387 $d
             forth.s:1276   .text:0000000000003388 $t
             forth.s:1411   .text:00000000000034d3 $d
             forth.s:1411   .text:00000000000034d4 $t
             forth.s:1433   .text:000000000000351f $d
             forth.s:1433   .text:0000000000003520 $t
             forth.s:1482   .text:000000000000355f $d
             forth.s:1482   .text:0000000000003560 $t
             forth.s:1533   .text:00000000000035d7 $d
             forth.s:1533   .text:00000000000035d8 $t
             forth.s:1592   .text:0000000000003681 $d
             forth.s:1592   .text:0000000000003682 $t
             forth.s:1610   .text:00000000000036a9 $d
             forth.s:1610   .text:00000000000036aa $t
             forth.s:1644   .text:00000000000036fb $d
             forth.s:1644   .text:00000000000036fc $t
             forth.s:1677   .text:0000000000003749 $d
             forth.s:1677   .text:000000000000374a $t
             forth.s:1709   .text:0000000000003791 $d
             forth.s:1709   .text:0000000000003792 $t
             forth.s:1787   .text:0000000000003873 $d
             forth.s:1787   .text:0000000000003874 $t
             forth.s:1799   .text:0000000000003891 $d
             forth.s:1799   .text:0000000000003892 $t
             forth.s:1831   .text:00000000000038df $d
             forth.s:1831   .text:00000000000038e0 $t
             forth.s:1849   .text:0000000000003911 $d
             forth.s:1849   .text:0000000000003912 $t
             forth.s:1863   .text:000000000000393b $d
             forth.s:1863   .text:000000000000393c $t
             forth.s:1941   .text:00000000000039f7 $d
             forth.s:1941   .text:00000000000039f8 $t
ARM GAS  forth.s 			page 230


             forth.s:1992   .text:0000000000003add $d
             forth.s:1992   .text:0000000000003ade $t
             forth.s:2045   .text:0000000000003b57 $d
             forth.s:2045   .text:0000000000003b58 $t
             forth.s:2114   .text:0000000000003c6b $d
             forth.s:2114   .text:0000000000003c6c $t
             forth.s:2145   .text:0000000000003cb3 $d
             forth.s:2145   .text:0000000000003cb4 $t
             forth.s:2162   .text:0000000000003ce9 $d
             forth.s:2162   .text:0000000000003cea $t
             forth.s:2180   .text:0000000000003d1f $d
             forth.s:2180   .text:0000000000003d20 $t
             forth.s:2250   .text:0000000000003d9f $d
             forth.s:2250   .text:0000000000003da0 $t
             forth.s:2288   .text:0000000000003e0f $d
             forth.s:2288   .text:0000000000003e10 $t
             forth.s:2376   .text:0000000000003f3f $d
             forth.s:2376   .text:0000000000003f40 $t
             forth.s:2413   .text:0000000000003fcb $d
             forth.s:2413   .text:0000000000003fcc $t
             forth.s:2555   .text:00000000000041a3 $d
             forth.s:2555   .text:00000000000041a4 $t
             forth.s:2594   .text:0000000000004205 $d
             forth.s:2594   .text:0000000000004206 $t
             forth.s:2606   .text:000000000000422b $d
             forth.s:2606   .text:000000000000422c $t
             forth.s:2617   .text:0000000000004245 $d
             forth.s:2617   .text:0000000000004246 $t
             forth.s:2900   .text:00000000000045b3 $d
             forth.s:2900   .text:00000000000045b4 $t
             forth.s:2992   .text:00000000000046c7 $d
             forth.s:2992   .text:00000000000046c8 $t
             forth.s:3043   .text:000000000000477f $d
             forth.s:3043   .text:0000000000004780 $t
             forth.s:3055   .text:00000000000047a9 $d
             forth.s:3055   .text:00000000000047aa $t
             forth.s:3076   .text:00000000000047ef $d
             forth.s:3076   .text:00000000000047f0 $t
             forth.s:3088   .text:000000000000480d $d
             forth.s:3088   .text:000000000000480e $t
             forth.s:3103   .text:000000000000483b $d
             forth.s:3103   .text:000000000000483c $t
             forth.s:3251   .text:00000000000049cb $d
             forth.s:3251   .text:00000000000049cc $t
             forth.s:3301   .text:0000000000004a71 $d
             forth.s:3301   .text:0000000000004a72 $t
             forth.s:3325   .text:0000000000004aad $d
             forth.s:3325   .text:0000000000004aae $t
             forth.s:3376   .text:0000000000004b3f $d
             forth.s:3376   .text:0000000000004b40 $t
             forth.s:3404   .text:0000000000004ba7 $d
             forth.s:3404   .text:0000000000004ba8 $t
             forth.s:3417   .text:0000000000004bc9 $d
             forth.s:3417   .text:0000000000004bca $t
             forth.s:3444   .text:0000000000004c09 $d
             forth.s:3444   .text:0000000000004c0a $t
             forth.s:3467   .text:0000000000004c47 $d
ARM GAS  forth.s 			page 231


             forth.s:3467   .text:0000000000004c48 $t
             forth.s:3478   .text:0000000000004c67 $d
             forth.s:3478   .text:0000000000004c68 $t
             forth.s:3490   .text:0000000000004c87 $d
             forth.s:3490   .text:0000000000004c88 $t
             forth.s:3555   .text:0000000000004d45 $d
             forth.s:3555   .text:0000000000004d46 $t
             forth.s:3690   .text:0000000000004ebd $d
             forth.s:3690   .text:0000000000004ebe $t
             forth.s:3744   .text:0000000000004f63 $d
             forth.s:3744   .text:0000000000004f64 $t
             forth.s:3756   .text:0000000000004f87 $d
             forth.s:3756   .text:0000000000004f88 $t
             forth.s:3792   .text:0000000000004fff $d
             forth.s:3792   .text:0000000000005000 $t
             forth.s:3807   .text:0000000000005031 $d
             forth.s:3807   .text:0000000000005032 $t
             forth.s:3853   .text:00000000000050a9 $d
             forth.s:3853   .text:00000000000050aa $t
             forth.s:3937   .text:00000000000051e3 $d
             forth.s:3937   .text:00000000000051e4 $t
             forth.s:4155   .text:00000000000053eb $d
             forth.s:4155   .text:00000000000053ec $t
             forth.s:4174   .text:0000000000005431 $d
             forth.s:4174   .text:0000000000005432 $t
             forth.s:4241   .text:00000000000054f7 $d
             forth.s:4241   .text:00000000000054f8 $t
             forth.s:4340   .text:0000000000005651 $d
             forth.s:4340   .text:0000000000005652 $t

UNDEFINED SYMBOLS
_mstack
