ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  54              		.equ DTOP,  RAM_ADR+0x512 
  55              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  56              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  57              	
  58              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  59              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  60              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  61              	
  62              		.equ CELLL ,	4	/*size of a cell */
  63              		.equ BASEE ,	10	/*default radix */
  64              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  65              	
  66              		.equ BKSPP ,	8	/*backspace */
  67              		.equ LF ,	10	  /*line feed */
  68              		.equ CRR ,	13	/*carriage return */
  69              		.equ ERR ,	27	/*error escape */
  70              		.equ TIC ,	39	/*tick */
  71              	
  72              	/*************************************
  73              	   system variables offset from UPP
  74              	*************************************/
  75              	  .equ RNDSEED, 4    // prng seed 
  76              	  .equ TICKS, RNDSEED+4  // millseconds counter
  77              	  .equ CD_TIMER, TICKS+4  // count down timer
  78              	  .equ BOOT, CD_TIMER+4  // boot program address
  79              	  .equ STDIN, BOOT+4   //character ouput device 
  80              	  .equ STDOUT, STDIN+4 // character input device 
  81              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  82              	  .equ BCHAR, NBASE+4   // display base character flag 
  83              	  .equ TMP, BCHAR+4   // temporary variable
  84              	  .equ CSPAN, TMP+4  // character count received by expect  
  85              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  86              	  .equ SRC, TOIN+4    // SOURCE 
  87              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  88              	  .equ TIBUF, SRC+4   // TIB buffer address 
  89              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  90              	  .equ EVAL, SRCID+4  // eval|compile vector 
  91              	  .equ VHOLD, EVAL+4   // hold pointer 
  92              	  .equ CTXT, VHOLD+4  // context pointer 
  93              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  94              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  95              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  96              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  97              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  98              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  99              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 100              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 101              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 102              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 103              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 104              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 105              	  .equ KBD_QUEUE_SIZE, 16 
 106              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 107              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QTAIL,KBD_QHEAD+4
 109              	  .equ ROW,KBD_QTAIL+4 
 110              	  .equ COL,ROW+4 
 111              	  .equ BK_COLOR,COL+4 
 112              	  .equ PEN_COLOR,BK_COLOR+4
 113              	  .equ VFPSW, PEN_COLOR+4 
 114              	  .equ VFBASE, VFPSW+4 
 115              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 116              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 117              	
 118              	/***********************************************
 119              	* MACROS
 120              	*	Assemble inline direct threaded code ending.
 121              	***********************************************/
 122              		.macro _CALL fn /* low level routine call */ 
 123              	 	PUSH {LR}
 124              		BL \fn  
 125              		POP {LR}
 126              		.endm
 127              		
 128              		.macro _RET /* exit sub-routine */ 
 129              		BX LR 
 130              		.endm 
 131              	
 132              		// dictionary header  
 133              		.macro _HEADER  label, nlen, name
 134              			.word LINK 
 135              			.equ LINK , . 
 136              		_\label: .byte \nlen    // name field
 137              			.ascii "\name"
 138              			.p2align 2 
 139              		\label:   // code field 
 140              		.endm 
 141              		
 142              	
 143              	// local function header 
 144              		.macro _FUNC label 
 145              		.section .text, "ax", %progbits 
 146              		.p2align 2 
 147              		.type \label, %function  
 148              		\label:
 149              		.endm 
 150              	
 151              	// global function header 
 152              		.macro _GBL_FUNC label 
 153              		.global \label 
 154              		_FUNC \label 
 155              		.endm 
 156              	
 157              	
 158              	// load large constant to register 
 159              		.macro _MOV32 r, value 
 160              		mov \r,#(\value&0xffff)
 161              		movt \r,#(\value>>16)
 162              		.endm 
 163              	
 164              		.macro _NEXT /* direct jump INEXT */ 
ARM GAS  forth.s 			page 11


 165              		B INEXT   
 166              		.endm 
 167              	
 168              	 	.macro	_NEST /*start high level word */
 169              		BX INX  
 170              		NOP.N 
 171              		.endm
 172              	
 173              		.macro _ADR label 
 174              		.word 1+\label  
 175              		.endm 
 176              	
 177              	 	.macro	_UNNEST	/*end high level word */
 178              		_ADR UNNEST 
 179              		.endm
 180              	
 181              	 	.macro	_DOLIT u /*long literals */
 182              		_ADR	DOLIT
 183              		.word	\u 
 184              		.endm
 185              	
 186              		.macro _DOTQP len, text 
 187              		_ADR DOTQP 
 188              		.byte \len 
 189              		.ascii "\text" 
 190              		.p2align 2 
 191              		.endm
 192              	
 193              		.macro _COMPI name 
 194              		_DOLIT \name 
 195              		_ADR CALLC 
 196              		.endm 
 197              	
 198              		.macro _ABORQ len,name 
 199              		_ADR ABORQ 
 200              		.byte \len 
 201              		.ascii "\name"
 202              		.p2align 2 
 203              		.endm
 204              	
 205              		.macro _BRAN label 
 206              		_ADR BRAN 
 207              		.word \label 
 208              		.endm 
 209              	
 210              		.macro _QBRAN label 
 211              		_ADR QBRAN 
 212              		.word \label
 213              		.endm 
 214              	
 215              		.macro _TBRAN label 
 216              		_ADR TBRAN 
 217              		.word \label 
 218              		.endm 
 219              	
 220              		.macro _DONXT label 
 221              		_ADR DONXT
ARM GAS  forth.s 			page 12


 222              		.word \label 
 223              		.endm 
 224              	
 225              	 	.macro	_PUSH	/*push TOS on data stack*/
 226              		STR	TOS,[DSP,#-4]!
 227              		.endm
 228              	
 229              	 	.macro	_POP /*pop data stack to TOS */
 230              		LDR	TOS,[DSP],#4
 231              		.endm
 232              	
 233              		// calling a colon word 
 234              		// from a code word   
 235              		.macro _CALL_COLWORD target 
 236              	    ldr WP,=\target 
 237              		orr WP,#1
 238              		b \target  
 239              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
ARM GAS  forth.s 			page 13


  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
ARM GAS  forth.s 			page 14


 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF818C9 	  ldr IP,=dh
 159 000e 02F051BF 	  b INEXT  
 160              	dh:
 161 0012 414F0000 	  _ADR PRESE
 162 0016 41440000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 012F0000 	  _ADR CFSR 
 164 0038 69320000 	  _ADR DUPP
 165 003c E5310000 	  _ADR TOR 
 166 0040 DF300000 	  _DOLIT 16 
 166      10000000 
 167 0048 D5370000 	  _ADR BASE 
 168 004c 61310000 	  _ADR STORE 
 169 0050 3D450000 	  _ADR UDOT 
 170 0054 41440000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
ARM GAS  forth.s 			page 15


 170      200000BF 
 171 0064 A1310000 	  _ADR RFROM
 172 0068 DF300000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 E9320000 	  _ADR ANDD
 174 0074 1F310000 	  _QBRAN 1f
 174      94000000 
 175 007c 212F0000 	  _ADR BFAR
 176 0080 DF300000 	  _DOLIT ','
 176      2C000000 
 177 0088 7D2F0000 	  _ADR EMIT 
 178 008c 5D430000 	  _ADR SPACE 
 179 0090 3D450000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 41440000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 0D220000 	  _ADR FPSCR
 184 00a8 3D450000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF864C8 	  ldr IP,=fpu_except
 202 00c4 02F0F6BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 E5430000 	  _ADR CR 
 205 00cc D5370000 	  _ADR BASE 
 206 00d0 75310000 	  _ADR AT 
 207 00d4 E5310000 	  _ADR TOR  
 208 00d8 DF300000 	  _DOLIT 16 
 208      10000000 
 209 00e0 D5370000 	  _ADR BASE 
 210 00e4 61310000 	  _ADR STORE
 211 00e8 DF300000 	  _DOLIT 4 
 211      04000000 
 212 00f0 79330000 	  _ADR SUBB  
 213 00f4 41440000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 71450000 	  _ADR DOT 
 215 0104 41440000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
ARM GAS  forth.s 			page 16


 215      70752065 
 215      78636570 
 215      74696F6E 
 216 0120 0D220000 	  _ADR FPSCR 
 217 0124 69320000 	  _ADR DUPP 
 218 0128 71450000 	  _ADR DOT
 219 012c 79340000 	  _ADR QDUP 
 220 0130 1F310000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 DF300000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 7D2F0000 	  _ADR EMIT 
 223 0144 DF300000 	  _DOLIT ' ' 
 223      20000000 
 224 014c 7D2F0000 	  _ADR EMIT
 225 0150 69320000 	  _ADR DUPP 
 226 0154 DF300000 	  _DOLIT 0x10 
 226      10000000 
 227 015c E9320000 	  _ADR ANDD
 228 0160 79340000 	  _ADR QDUP  
 229 0164 1F310000 	  _QBRAN 1f 
 229      84010000 
 230 016c DF300000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 69330000 	  _ADR PLUS 
 232 0178 75310000 	  _ADR AT 
 233 017c 09370000 	  _ADR COUNT 
 234 0180 B1430000 	  _ADR TYPEE
 235 0184 DF300000 	1: _DOLIT 15 
 235      0F000000 
 236 018c E9320000 	  _ADR ANDD
 237 0190 B1350000 	  _ADR CLZ 
 238 0194 DF300000 	  _DOLIT 31 
 238      1F000000 
 239 019c 79320000 	  _ADR SWAP 
 240 01a0 79330000 	  _ADR SUBB 
 241 01a4 DF300000 	  _DOLIT 2 
 241      02000000 
 242 01ac 59330000 	  _ADR LSHIFT 
 243 01b0 DF300000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 69330000 	  _ADR PLUS 
 245 01bc 75310000 	  _ADR AT 
 246 01c0 09370000 	  _ADR COUNT 
 247 01c4 B1430000 	  _ADR TYPEE 
 248 01c8 E5430000 	2: _ADR CR 
 249 01cc DF300000 	  _DOLIT 0
 249      00000000 
 250 01d4 2D220000 	  _ADR CLR_FPSCR 
 251 01d8 A1310000 	  _ADR RFROM  
 252 01dc D5370000 	  _ADR BASE 
 253 01e0 61310000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF840C7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
ARM GAS  forth.s 			page 17


 258      CEF20000 
 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
ARM GAS  forth.s 			page 18


 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C8C6 	  ldr IP,=nmi_hl 
 306 0268 02F024BE 	  b  INEXT
 307              	nmi_hl:
 308 026c 414F0000 	  _ADR PRESE 
 309 0270 E5430000 	  _ADR CR 
 310 0274 41440000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 E5430000 	  _ADR CR 
 312 0298 E54C0000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF88CC6 	  ldr IP,=hardfault_hl 
 326 02aa 02F003BE 	  b INEXT
 327              	hardfault_hl:
 328 02ae 414F0000 	  _ADR PRESE
 329 02b2 E5430000 	  _ADR CR  
 330 02b6 41440000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 E5430000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF854C6 	  ldr IP,=memfault_hl 
ARM GAS  forth.s 			page 19


 345 02e6 02F0E5BD 	  b INEXT 
 346              	memfault_hl: 
 347 02ea 414F0000 	  _ADR PRESE
 348 02ee E5430000 	  _ADR CR  
 349 02f2 41440000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 DF300000 	  _DOLIT 16 
 350      10000000 
 351 0320 D5370000 	  _ADR BASE 
 352 0324 61310000 	  _ADR STORE   
 353 0328 012F0000 	  _ADR CFSR
 354 032c DF300000 	  _DOLIT 255 
 354      FF000000 
 355 0334 E9320000 	  _ADR ANDD 
 356 0338 3D450000 	  _ADR UDOT 
 357 033c E5430000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8ECC5 	  ldr IP,=busfault_hl 
 372 0352 02F0AFBD 	  b INEXT 
 373              	busfault_hl:
 374 0356 414F0000 	  _ADR PRESE
 375 035a DF300000 	  _DOLIT 1 
 375      01000000 
 376 0362 49300000 	  _ADR ULED 
 377 0366 DF300000 	  _DOLIT  100 
 377      64000000 
 378 036e 8D370000 	  _ADR MSEC 
 379 0372 212F0000 	  _ADR BFAR 
 380 0376 012F0000 	  _ADR CFSR 
 381 037a E5430000 	  _ADR CR  
 382 037e 41440000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 DF300000 	  _DOLIT 16 
 383      10000000 
 384 03a8 D5370000 	  _ADR BASE 
 385 03ac 61310000 	  _ADR STORE   
 386 03b0 DF300000 	  _DOLIT 0XFF00 
 386      00FF0000 
ARM GAS  forth.s 			page 20


 387 03b8 E9320000 	  _ADR ANDD   
 388 03bc 3D450000 	  _ADR UDOT 
 389 03c0 41440000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc 3D450000 	  _ADR UDOT 
 391 03d0 E5430000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF85CC5 	  ldr IP,=usagefault_hl
 405 03e6 02F065BD 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 414F0000 	  _ADR PRESE
 408 03ee E5430000 	  _ADR CR  
 409 03f2 41440000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 DF300000 	  _DOLIT 16 
 410      10000000 
 411 0418 D5370000 	  _ADR BASE 
 412 041c 61310000 	  _ADR STORE   
 413 0420 012F0000 	  _ADR CFSR
 414 0424 DF300000 	  _DOLIT 16 
 414      10000000 
 415 042c 41330000 	  _ADR RSHIFT 
 416 0430 3D450000 	  _ADR UDOT 
 417 0434 E5430000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
ARM GAS  forth.s 			page 21


 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF8A0C4 	  ldr IP,=ur
 474 04a4 02F006BD 	  b INEXT  
 475              	ur:
 476 04a8 414F0000 	  _ADR PRESE
 477 04ac E5430000 	  _ADR CR   
 478 04b0 DF300000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 09370000 		_ADR COUNT 
 480 04bc B1430000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
ARM GAS  forth.s 			page 22


 485 04c4 0C       		.byte 12
 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F045FE 	  bl  fpu_init 
 518 0524 00F009FB 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F002FC 	  bl  flash_spi_init   
 522 0534 05F0DCBC 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8F4A3 	  ldr INX,=NEST
ARM GAS  forth.s 			page 23


 533 0554 4AF0010A 	  orr INX,#1 
 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
ARM GAS  forth.s 			page 24


 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
ARM GAS  forth.s 			page 25


 632 063c 41EA0001 	  orr r1,r0 
 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A649     		ldr r1,=UZERO 
 674 06b2 4FF0C002 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
ARM GAS  forth.s 			page 26


 680 06c8 F9D1     		bne 1b
 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
ARM GAS  forth.s 			page 27


 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
ARM GAS  forth.s 			page 28


 787 07b8 4FF00305 	    mov r5,#3 
 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
ARM GAS  forth.s 			page 29


 844 084a 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 005E0000 		.word HI_BOTH  /*'BOOT */
 874 0878 201A0000 		.word PS2_QKEY /* query for character */
 875 087c E8120000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 00000000 	  .word 0     // SRCID 
 884 08a0 644D0000 		.word INTER	/*'EVAL */
 885 08a4 00000000 		.word 0			/*HLD */
 886 08a8 E85E0000 		.word _LASTN	/*CONTEXT */
 887 08ac 545F0000 		.word CTOP  	/* FCP end of system dictionnary */
 888 08b0 F0560020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 08b4 E85E0000 		.word _LASTN	/*LAST word in dictionary */
 890 08b8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
 890      00000000 
 891 08c8 00000000 		.word 0  /* RX_HEAD */
 892 08cc 00000000 		.word 0  /* RX_TAIL */ 
 893 08d0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 894 08d4 00000000 		.word 0  /* VID_STATE, video state */  
 895 08d8 00000000 	    .word 0  /* VID_FIELD, field */
 896 08dc 30810120 		.word VID_BUFF /* video_buffer address */ 
 897 08e0 00000000 	    .word 0 /* kbd struct */
ARM GAS  forth.s 			page 30


 898 08e4 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 08f4 00000000 		.word 0  /* kbd queue head */
 900 08f8 00000000 		.word 0 /* kbd queue tail */ 
 901 08fc 00000000 	    .word 0 /* tv cursor row */
 902 0900 00000000 	    .word 0 /* tv cursor column */ 
 903 0904 00000000 	    .word 0 /* tv back color */
 904 0908 07000000 	    .word 7 /* tv font color */
 905 090c 00000000 	    .word 0 /* FPSW */
 906 0910 00000000 	    .word 0 /* FBASE */ 
 907 0914 00000000 	    .word 0 /* BEEP_DTMR */
 908 0918 00000000 	    .word 0 /* CSTATE */ 
 909 091c 00000000 	    .word 0,0 
 909      00000000 
 910              	ULAST:
 911              	
 912              	// used by _HEADER macro 
 913              	// to link names field
 914              	// in dictionary  
 915 0924 12000000 	    .equ LINK, 0 
 915      C8000000 
 915      7C4F0000 
 915      6C020000 
 915      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
  27              	
  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
  31              	********************************/
ARM GAS  forth.s 			page 31


  32 0950 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 0964 504700BF 	    _NEST 
  34              	    // save normal context 
  35 0968 81380000 	    _ADR CNTXT 
  36 096c 75310000 	    _ADR AT 
  37 0970 E5310000 	    _ADR TOR 
  38              	    // set environment context 
  39 0974 DF300000 	    _DOLIT _ENVLASTN  
  39      EA0A0000 
  40 097c 81380000 	    _ADR   CNTXT 
  41 0980 61310000 	    _ADR   STORE 
  42              	    // search string 
  43 0984 59320000 	    _ADR   DROP 
  44 0988 D5330000 	    _ADR   ONEM 
  45 098c 714A0000 	    _ADR   NAMEQ
  46 0990 69320000 	    _ADR   DUPP 
  47 0994 1F310000 	    _QBRAN  1f
  47      AC090000 
  48 099c 59320000 	    _ADR   DROP 
  49 09a0 F5300000 	    _ADR   EXECU 
  50 09a4 47310000 	    _BRAN  2f
  50      B4090000 
  51 09ac 79320000 	1:  _ADR  SWAP 
  52 09b0 59320000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 09b4 A1310000 	    _ADR RFROM
  55 09b8 81380000 	    _ADR CNTXT 
  56 09bc 61310000 	    _ADR STORE 
  57 09c0 BB2E0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
  66              		_\label: .byte \nlen    // name field
  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
  77              	/**********************************
  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
  81              	*************************************/
ARM GAS  forth.s 			page 32


  82 09c4 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 09d8 47F8046D 	    _PUSH 
  84 09dc 4FF0FF06 	    MOV  TOS,#255
  85 09e0 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 09e2 C8090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 09ec 47F8046D 	    _PUSH
  97 09f0 4FF05006 	    MOV TOS,#80
  98 09f4 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 09f6 E6090000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 0a00 47F8046D 	    _PUSH 
 109 0a04 4FF05006 	    MOV TOS,#80
 110 0a08 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
 115              	constant:
 116              	    32 bits
 117              	**************************************/
 118 0a0a FA090000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 0a20 47F8046D 	    _PUSH 
 120 0a24 4FF02006 	    MOV TOS,#32
 121 0a28 6AE0     	    B flag_true
 122              	
 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
 126              	    is the default
ARM GAS  forth.s 			page 33


 127              	constant:
 128              	    true 
 129              	***************************************/
 130 0a2a 0E0A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 0a38 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 0a3a 2E0A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 0a48 47F8046D 	    _PUSH 
 143 0a4c 4FF07F06 	    MOV TOS,#127 
 144 0a50 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 0a52 3E0A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 0a5c 47F8046D 	    _PUSH 
 154 0a60 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 0a68 47F8046D 	    _PUSH
 156 0a6c 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 0a74 44E0     	    B flag_true
 158              	
 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 0a76 560A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 0a80 47F8046D 	    _PUSH 
 167 0a84 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 167      C7F6FF76 
 168 0a8c 38E0     	    B flag_true 
 169              	
 170              	/************************************
ARM GAS  forth.s 			page 34


 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 0a8e 7A0A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 0a98 47F8046D 	    _PUSH 
 178 0a9c 4FF0FF36 	    MOV TOS,#-1 
 179 0aa0 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 0aa2 920A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 0ab0 47F8046D 	    _PUSH 
 189 0ab4 4FF0FF36 	    MOV  TOS,#-1 
 190 0ab8 47F8046D 	    _PUSH 
 191 0abc 4FF0FF36 	    MOV TOS,#-1 
 192 0ac0 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 0ac2 A60A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 0adc 47F8046D 	    _PUSH 
 203 0ae0 4FF02006 	    MOV TOS,#32 
 204 0ae4 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 0ae6 C60A0000 		.word	ENVLNK 
 214              		ENVLINK = . 
 215 0aea 0B       	_ENVLASTN:	.byte 11
 216 0aeb 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
 216      4C4C53
ARM GAS  forth.s 			page 35


 217 0af6 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 0af8 47F8046D 	    _PUSH 
 220 0afc 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 0b00 47F8046D 	    _PUSH 
 225 0b04 4FF0FF36 	    MOV TOS,#-1 
 226 0b08 02F0D4B9 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0b0c 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0b14 1868     		ldr r0,[r3,#USART_SR]
  38 0b16 5968     		ldr r1,[r3,#USART_DR]
  39 0b18 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0b1c 0CD0     		beq 2f // no char received 
  41 0b1e B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0b22 3FF4B8AC 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0b26 04F15400 		add r0,UP,#RX_QUEUE
ARM GAS  forth.s 			page 36


  44 0b2a A26E     		ldr r2,[UP,#RX_TAIL]
  45 0b2c 8154     		strb r1,[r0,r2]
  46 0b2e 02F10102 		add r2,#1 
  47 0b32 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0b36 A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0b38 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0b3a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0b42 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0b44 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0b48 01EA0201 	  and r1,r1,r2
  62 0b4c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0b50 41EA0201 	  orr r1,r1,r2 
  64 0b54 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0b56 4FF4EE61 	  mov r1,#0x77<<4 
  67 0b5a 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0b5c 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0b64 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0b68 8160     	  str r1,[r0,#USART_BRR]
  73 0b6a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0b6e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0b70 4FF02500 	  mov r0,#USART1_IRQ 
  77 0b74 4FF00701 	  mov r1,#7
  78 0b78 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0b82 4FF02500 	  mov r0,#USART1_IRQ 
  81 0b86 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FD5DF8 
  81      04EB
  82 0b90 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0b92 54090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0ba0 47F8046D 		_PUSH
ARM GAS  forth.s 			page 37


  92 0ba4 A06E     		ldr T0,[UP,#RX_TAIL] 
  93 0ba6 616E     		ldr T1,[UP,#RX_HEAD]
  94 0ba8 90EA0106 		eors TOS,T0,T1 
  95 0bac 0CD0     		beq 1f
  96 0bae 04F15400 		add T0,UP,#RX_QUEUE 
  97 0bb2 0844     		add T0,T1 
  98 0bb4 0678     		ldrb TOS,[T0]
  99 0bb6 01F10101 		add T1,#1 
 100 0bba 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0bbe 6166     		str T1,[UP,#RX_HEAD]
 102 0bc0 47F8046D 		_PUSH 
 103 0bc4 4FF0FF36 		mov TOS,#-1
 104 0bc8 02F074B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0bcc 960B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0bdc 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0be4 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0be6 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0bea FBD0     		beq 1b 
 115 0bec 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0bee 57F8046B 		_POP
 117 0bf2 02F05FB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0bf6 D00B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0c00 47F8046D 	        _PUSH 
 126 0c04 4FF00006 	        mov TOS,#0
 127 0c08 02F054B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0c0c FA0B0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0c18 47F8046D 	        _PUSH 
 135 0c1c 4FF00106 	        mov TOS,#1
 136 0c20 02F048B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
ARM GAS  forth.s 			page 38


 141              	****************************************/
 142 0c24 100C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0c30 3046     	        mov T0,TOS
 144 0c32 57F8046B 	        _POP 
 145 0c36 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0c38 4B48     	        ldr T0,=SER_QKEY 
 148 0c3a 6061     	        str T0,[UP,#STDIN]
 149 0c3c 4B48     	        ldr T0,=SER_EMIT
 150 0c3e A061     	        str T0,[UP,#STDOUT]
 151 0c40 02F038B9 	        _NEXT 
 152              	4: // local console 
 153 0c44 4A48     	        ldr T0,=PS2_QKEY
 154 0c46 6061     	        str T0,[UP,#STDIN]
 155 0c48 4A48     	        ldr T0,=TV_EMIT
 156 0c4a A061     	        str T0,[UP,#STDOUT]
 157 0c4c 02F032B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0c50 280C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0c60 504700BF 	      _NEST 
 166 0c64 DF300000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0c6c C5330000 	1:    _ADR ONEP  // c+1
 168 0c70 E5310000 	      _ADR TOR   
 169 0c74 DF300000 	      _DOLIT 10 
 169      0A000000 
 170 0c7c 093C0000 	      _ADR SLMOD // r q  
 171 0c80 79340000 	      _ADR QDUP  // r q q | r 0  
 172 0c84 1F310000 	      _QBRAN 2f  // r 0 
 172      980C0000 
 173 0c8c A1310000 	      _ADR RFROM // r q c 
 174 0c90 47310000 	      _BRAN 1b
 174      6C0C0000 
 175 0c98 DF300000 	2:    _DOLIT '0'  
 175      30000000 
 176 0ca0 69330000 	      _ADR PLUS 
 177 0ca4 7D2F0000 	      _ADR EMIT 
 178 0ca8 A1310000 	      _ADR RFROM 
 179 0cac 79340000 	      _ADR QDUP 
 180 0cb0 1F310000 	      _QBRAN 3f
 180      C80C0000 
 181 0cb8 D5330000 	      _ADR ONEM 
 182 0cbc E5310000 	      _ADR TOR 
 183 0cc0 47310000 	      _BRAN 2b 
 183      980C0000 
 184              	3:    
 185 0cc8 BB2E0000 	      _UNNEST 
ARM GAS  forth.s 			page 39


 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0ccc 540C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0cd8 504700BF 	      _NEST 
 193 0cdc DF300000 	      _DOLIT 27 
 193      1B000000 
 194 0ce4 7D2F0000 	      _ADR EMIT 
 195 0ce8 DF300000 	      _DOLIT '['
 195      5B000000 
 196 0cf0 7D2F0000 	      _ADR EMIT 
 197 0cf4 BB2E0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0cf8 D00C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0d04 504700BF 	      _NEST
 205 0d08 D90C0000 	      _ADR ANSI_ESC
 206 0d0c 79320000 	      _ADR SWAP 
 207 0d10 610C0000 	      _ADR ANSI_PARAM 
 208 0d14 DF300000 	      _DOLIT ';'
 208      3B000000 
 209 0d1c 7D2F0000 	      _ADR EMIT
 210 0d20 610C0000 	      _ADR ANSI_PARAM
 211 0d24 DF300000 	      _DOLIT 'H'
 211      48000000 
 212 0d2c 7D2F0000 	      _ADR EMIT 
 213 0d30 BB2E0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0d34 FC0C0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0d40 504700BF 	    _NEST
 221 0d44 DF300000 	    _DOLIT 1 
 221      01000000 
 222 0d4c 69320000 	    _ADR DUPP 
 223 0d50 050D0000 	    _ADR SER_AT  
 224 0d54 D90C0000 	    _ADR ANSI_ESC
 225 0d58 DF300000 	    _DOLIT 'J'
 225      4A000000 
 226 0d60 7D2F0000 	    _ADR EMIT 
 227 0d64 BB2E0000 	    _UNNEST 
 228 0d68 A00B0000 	
 228      DC0B0000 
 228      201A0000 
ARM GAS  forth.s 			page 40


 228      E8120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
ARM GAS  forth.s 			page 41


  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0d78 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0d80 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0d82 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0d8a 41EA0201 	  orr r1,r2
  82 0d8e 0160     	  str r1,[r0,#GPIO_MODER]
  83 0d90 81EA0101 	  eor r1,r1 
ARM GAS  forth.s 			page 42


  84 0d94 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0d96 4FF00101 	  mov r1,#1 // pin 1 
  88 0d9a 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0d9e 00B5FFF7 	  _CALL gpio_config 
  89      FEFC5DF8 
  89      04EB
  90 0da8 4FF00101 	  mov r1,#1 
  91 0dac 4FF00202 	  mov r2,#2
  92 0db0 00B5FFF7 	  _CALL gpio_speed 
  92      34FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0dba 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0dbc 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0dc0 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0dc2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0dca 4FF00200 	  mov r0,#2 
 100 0dce 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0dd0 41EA0001 	  orr r1,r0 
 102 0dd4 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0dd6 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0dde 41F2D470 	  mov r0,#HPER
 106 0de2 D062     	  str r0,[r2,#TIM_ARR]
 107 0de4 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0de8 D063     	  str r0,[r2,#TIM_CCR3]
 109 0dea 4FF4E170 	  mov r0,#HPULSE 
 110 0dee 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0df0 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0df4 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0df6 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0dfa 1062     	  str r0,[r2,#TIM_CCER]
 115 0dfc 4FF00100 	  mov r0,#1 
 116 0e00 D060     	  str r0,[r2,#TIM_DIER]
 117 0e02 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0e04 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0e08 4FF00201 	  mov r1,#2
 121 0e0c 00B5FFF7 	  _CALL nvic_set_priority
 121      6BFC5DF8 
 121      04EB
 122 0e16 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0e1a 00B5FFF7 	  _CALL nvic_enable_irq
 123      7DFC5DF8 
 123      04EB
 124 0e24 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
ARM GAS  forth.s 			page 43


 131 0e26 00BF     	  _GBL_FUNC tv_out_isr
 132 0e28 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0e30 81EA0101 	  eor T1,T1
 134 0e34 0161     	  str T1,[T0,#TIM_SR]
 135 0e36 E16E     	  ldr T1,[UP,#VID_CNTR]
 136 0e38 01F10101 	  add T1,#1 
 137 0e3c E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0e3e 226F     	  ldr T2,[UP,#VID_STATE]
 140 0e40 002A     	  cmp T2,#ST_VSYNC 
 141 0e42 07D0     	  beq state_vsync
 142 0e44 012A     	  cmp T2,#ST_PREVID 
 143 0e46 2FD0     	  beq state_pre_video 
 144 0e48 022A     	  cmp T2,#ST_VIDEO 
 145 0e4a 36D0     	  beq state_video_out 
 146 0e4c 032A     	  cmp T2,#ST_POSTVID 
 147 0e4e 63D0     	  beq state_post_video
 148 0e50 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0e54 0129     	  cmp T1,#1
 152 0e56 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0e58 4FF0DB01 	  mov T1,#SERRATION
 155 0e5c 0164     	  str T1,[T0,#TIM_CCR4]
 156 0e5e 40F6E931 	  mov T1,#SYNC_LINE 
 157 0e62 C162     	  str T1,[T0,#TIM_ARR]
 158 0e64 6BE0     	  b tv_isr_exit 
 159 0e66 0729     	1: cmp T1,#7
 160 0e68 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0e6a 40F62821 	  mov T1,#VSYNC_PULSE
 163 0e6e 0164     	  str T1,[T0,#TIM_CCR4]
 164 0e70 65E0     	  b tv_isr_exit
 165 0e72 0D29     	2: cmp T1,#13
 166 0e74 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0e76 4FF0DB01 	   mov T1,#SERRATION 
 169 0e7a 0164     	   str T1,[T0,#TIM_CCR4]
 170 0e7c 5FE0     	   b tv_isr_exit   
 171 0e7e 1229     	3: cmp T1,#18
 172 0e80 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0e82 616F     	   ldr T1,[UP,#VID_FIELD]
 175 0e84 0029     	   cmp T1,#ODD_FIELD  
 176 0e86 5AD0     	   beq tv_isr_exit 
 177 0e88 01E0     	   b sync_end 
 178 0e8a 1329     	4: cmp T1,#19 
 179 0e8c 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0e8e 4FF00901 	   mov T1,#9
 182 0e92 E166     	   str T1,[UP,#VID_CNTR]
 183 0e94 4FF4E171 	   mov T1,#HPULSE 
 184 0e98 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0e9a 41F2D471 	   mov T1,#HPER 
 186 0e9e C162     	   str T1,[T0,#TIM_ARR] 
ARM GAS  forth.s 			page 44


 187 0ea0 4FF00101 	   mov T1,#ST_PREVID 
 188 0ea4 2167     	   str T1,[UP,#VID_STATE]
 189 0ea6 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ea8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0eaa 48D4     	   bmi tv_isr_exit 
 194 0eac 4FF00201 	   mov T1,#ST_VIDEO 
 195 0eb0 2167     	   str T1,[UP,#VID_STATE]
 196 0eb2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0eb6 C160     	   str T1,[T0,#TIM_DIER]
 198 0eb8 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0eba F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ebc 06D9     	   bls 1f 
 205 0ebe 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ec2 2167     	   str T1,[UP,#VID_STATE]
 207 0ec4 4FF00101 	   mov T1,#1 
 208 0ec8 C160     	   str T1,[T0,#TIM_DIER]
 209 0eca 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ecc A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ece A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ed2 4FF0A003 	   mov T3,#160
 214 0ed6 03FB01F1 	   mul T1,T3 
 215 0eda 0844     	   add T0,T1  
 216 0edc 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0ee4 10F8012B 	2: ldrb T2,[T0],#1 
 222 0ee8 4FEA0222 	   lsl T2,#8 
 223 0eec 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0eee AFF30080 	   nop.w 
 225 0ef2 AFF30080 	   nop.w
 226 0ef6 AFF30080 	   nop.w 
 227 0efa AFF30080 	   nop.w 
 228 0efe 4FEA0212 	   lsl T2,#4  
 229 0f02 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0f04 AFF30080 	   nop.w
 231 0f08 AFF30080 	   nop.w  
 232 0f0c 013B     	   subs T3,#1
 233 0f0e E9D1     	   bne 2b  
 234 0f10 4FF47022 	   mov T2,#(15<<16) 
 235 0f14 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0f16 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0f18 4FF48372 	   mov T2,#262
 239 0f1c 9142     	   cmp T1,T2
 240 0f1e 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0f20 616F     	   ldr T1,[UP,VID_FIELD]
ARM GAS  forth.s 			page 45


 243 0f22 11B9     	   cbnz T1, frame_end 
 244 0f24 40F6E931 	   mov T1,#SYNC_LINE
 245 0f28 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0f2a 4FF00001 	   mov T1,#ST_VSYNC 
 248 0f2e 2167     	   str T1,[UP,#VID_STATE]
 249 0f30 81EA0101 	   eor T1,T1 
 250 0f34 E166     	   str T1,[UP,#VID_CNTR]
 251 0f36 616F     	   ldr T1,[UP,#VID_FIELD]
 252 0f38 6FEA0101 	   mvn T1,T1  
 253 0f3c 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0f3e 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0f40 380D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0f50 47F8046D 		_PUSH 
 266 0f54 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 0f58 01F0ACBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0f5c 440F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0f6c 47F8046D 		_PUSH 
 273 0f70 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 0f74 01F09EBF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0f78 600F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0f84 47F8046D 	  _PUSH 
 280 0f88 04F19C06 	  ADD TOS,UP,#COL 
 281 0f8c 01F092BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0f90 7C0F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0f98 47F8046D 	  _PUSH 
 287 0f9c 04F19806 	  ADD TOS,UP,#ROW 
 288 0fa0 01F088BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
ARM GAS  forth.s 			page 46


 291              	// convert cursor row to y coord 
 292 0fa4 940F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0fb0 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0fb4 00FB06F6 	  mul TOS,T0 
 295 0fb8 01F07CBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0fbc A80F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0fc8 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0fcc 00FB06F6 	  mul TOS,T0 
 302 0fd0 01F070BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0fd4 C00F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0fe0 47F8046D 	  _PUSH 
 308 0fe4 DFF88C65 	  ldr TOS,=font_6x8 
 309 0fe8 01F064BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0fec D80F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0ff8 47F8046D 	  _PUSH 
 315 0ffc A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0ffe 01F059BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 1002 F00F0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 100c 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 100e 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 1012 02FB00F0 	    mul T0,T2 
 330 1016 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 101a 1044     	    add T0,T2 
 332 101c A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 101e 0344     	    add T3,T0 // T3 -> byte address 
 334 1020 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 1022 4FF00F02 	    mov T2,#15 // AND mask 
 336 1026 11F0010F 	    tst T1,#1 
 337 102a 01D0     	    beq 1f 
ARM GAS  forth.s 			page 47


 338 102c 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 1030 DFF84405 	1:  ldr T0,=plot_op 
 340 1034 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 1038 05EA0205 	    and WP,T2 // mask out nibble 
 343 103c 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 1040 11F0010F 	    tst T1,#1 
 345 1044 01D1     	    bne 1f 
 346 1046 4FEA0010 	    lsl T0,#4 // high nibble  
 347 104a 45EA0005 	1:  orr WP,T0  
 348 104e 1D70     	    strb WP,[T3]
 349 1050 1AE0     	    b 9f 
 350              	op_pen: 
 351 1052 05EA0205 	    and WP,T2 
 352 1056 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 105a 11F0010F 	    tst T1,#1
 354 105e 01D1     	    bne 1f 
 355 1060 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 1064 45EA0005 	1:	orr WP,T0 
 357 1068 1D70     	    strb WP,[T3]
 358 106a 0DE0     	    b 9f 
 359              	op_invert:
 360 106c 85EA0205 	    eor WP,T2 
 361 1070 1D70     	    strb WP,[T3]
 362 1072 09E0     	    b 9f 
 363              	op_xor:
 364 1074 D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 1078 11F0010F 	    tst T1,#1 
 366 107c 01D1     	    bne 1f 
 367 107e 4FEA0010 	    lsl T0,#4 
 368 1082 85EA0005 	1:  eor WP,T0 
 369 1086 1D70     	    strb WP,[T3]
 370 1088 57F8046B 	9:  _POP 
 371 108c 01F012BF 	    _NEXT 
 372              	
 373 1090 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 1094 06100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 10a0 E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 10a2 0028     	    cmp T0,#0
 381 10a4 FCD1     	    bne 1b
 382 10a6 01F005BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 10aa 98100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 10b4 80EA0000 	    eor T0,T0 
 388 10b8 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 10bc 40EA0100 	    orr T0,T1 
 390 10c0 4FEA0111 	    lsl T1,#4 
ARM GAS  forth.s 			page 48


 391 10c4 40EA0100 	    orr T0,T1 
 392 10c8 4FEA0021 	    lsl T1,T0,#8 
 393 10cc 40EA0100 	    orr T0,T1 
 394 10d0 4FEA0041 	    lsl T1,T0,#16
 395 10d4 40EA0100 	    orr T0,T1 
 396 10d8 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 10dc A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 10de 5050     	1:	str T0,[T2,T1]
 399 10e0 0439     	    subs T1,#4
 400 10e2 FCD1     	    bne 1b
 401 10e4 1060     	    str T0,[T2]
 402 10e6 80EA0000 	    eor T0,T0 
 403 10ea C4F89800 	    str T0,[UP,#ROW]
 404 10ee C4F89C00 	    str T0,[UP,#COL]
 405 10f2 01F0DFBE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 10f6 AE100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 1104 504700BF 	  _NEST
 412 1108 DF300000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 1110 69320000 	  _ADR DUPP  
 414 1114 E5310000 	  _ADR TOR 
 415 1118 89330000 	  _ADR STAR
 416 111c F90F0000 	  _ADR VIDBUFF
 417 1120 69330000 	  _ADR PLUS
 418 1124 A1310000 	  _ADR RFROM   
 419 1128 DF300000 	  _DOLIT 0 
 419      00000000 
 420 1130 C53E0000 	  _ADR FILL 
 421 1134 BB2E0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 1138 FA100000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 1148 504700BF 	    _NEST 
 429 114c F90F0000 	    _ADR VIDBUFF 
 430 1150 69320000 	    _ADR DUPP 
 431 1154 DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 115c 69320000 	    _ADR DUPP 
 433 1160 E5310000 	    _ADR TOR 
 434 1164 69330000 	    _ADR PLUS 
 435 1168 79320000 	    _ADR SWAP 
 436 116c DF300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 1174 A1310000 	    _ADR RFROM  
ARM GAS  forth.s 			page 49


 438 1178 79330000 	    _ADR SUBB 
 439 117c 7D3E0000 	    _ADR MOVE
 440 1180 DF300000 	    _DOLIT 24 
 440      18000000 
 441 1188 05110000 	    _ADR CLRLINE 
 442 118c BB2E0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 1190 3C110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 11a0 504700BF 	    _NEST 
 450 11a4 F90F0000 	    _ADR VIDBUFF
 451 11a8 69320000 	    _ADR DUPP 
 452 11ac DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 11b4 69330000 	    _ADR PLUS 
 454 11b8 DF300000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 11c0 DF300000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 11c8 79330000 	    _ADR SUBB  
 457 11cc 7D3E0000 	    _ADR MOVE
 458 11d0 DF300000 	    _DOLIT 0 
 458      00000000 
 459 11d8 05110000 	    _ADR CLRLINE
 460 11dc BB2E0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 11e0 94110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 11ec E34D     	    ldr WP,=SCROLLUP 
 469 11ee 45F00105 	    orr WP,#1
 470 11f2 80EA0000 	    eor T0,T0 
 471 11f6 C4F89C00 	    str T0,[UP,#COL]
 472 11fa D4F89800 	    ldr T0,[UP,#ROW]
 473 11fe 1828     	    cmp T0,#24 
 474 1200 A2D0     	    beq SCROLLUP  
 475 1202 00F10100 	    add T0,#1 
 476 1206 C4F89800 	    str T0,[UP,#ROW]
 477 120a 01F053BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 120e E4110000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
ARM GAS  forth.s 			page 50


 483 1218 D4F89C00 	  ldr T0,[UP,#COL]
 484 121c 00F10100 	  add T0,#1
 485 1220 3528     	  cmp T0,#53
 486 1222 E3D5     	  bpl TV_CRLF  
 487 1224 C4F89C00 	  str T0,[UP,#COL]
 488 1228 01F044BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 122c 12120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1238 D4F89C00 	    ldr T0,[UP,#COL]
 497 123c 28B1     	    cbz T0,1f 
 498 123e A0F10100 	    sub T0,#1 
 499 1242 C4F89C00 	    str T0,[UP,#COL]
 500 1246 01F035BE 	    _NEXT 
 501 124a D4F89800 	1:  ldr T0,[UP,#ROW]
 502 124e 38B1     	    cbz T0,9f
 503 1250 A0F10100 	    sub T0,#1
 504 1254 C4F89800 	    str T0,[UP,#ROW]
 505 1258 4FF03400 	    mov T0,#52 
 506 125c C4F89C00 	    str T0,[UP,#COL]
 507 1260 01F028BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 1264 4FF08000 	    mov T0,#128 
 513 1268 06EA0006 	    and TOS,T0 
 514 126c 4FEAD616 	    lsr TOS,#7
 515 1270 01F020BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 1274 3868     	  ldr T0,[DSP]
 520 1276 00F10100 	  add T0,#1 
 521 127a 3860     	  str T0,[DSP]
 522 127c 01F01ABE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 1280 4FEA4606 	    lsl TOS,#1
 527 1284 01F016BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 1288 504700BF 	    _NEST 
 536 128c DF300000 	    _DOLIT 5 
 536      05000000 
ARM GAS  forth.s 			page 51


 537 1294 E5310000 	    _ADR TOR 
 538 1298 E5310000 	1:  _ADR TOR 
 539 129c DD340000 	    _ADR DDUP 
 540 12a0 D1310000 	    _ADR RAT
 541 12a4 65120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 12a8 0D100000 	    _ADR PLOT 
 543 12ac 75120000 	    _ADR INCR_X 
 544 12b0 A1310000 	    _ADR RFROM 
 545 12b4 81120000 	    _ADR NEXT_PIXEL
 546 12b8 01310000 	    _DONXT 1b
 546      98120000 
 547 12c0 C9340000 	    _ADR TDROP 
 548 12c4 BB2E0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 12c8 A6F12006 	   sub TOS,#32
 553 12cc 4FF00800 	   mov T0,#8 
 554 12d0 00FB06F6 	   mul TOS,T0 
 555 12d4 A748     	   ldr T0,=font_6x8
 556 12d6 0644     	   add TOS,T0 
 557 12d8 01F0ECBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 12dc 30120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 12e8 504700BF 	    _NEST
 565 12ec 69320000 	    _ADR DUPP 
 566 12f0 DF300000 	    _DOLIT 32 
 566      20000000 
 567 12f8 2D360000 	    _ADR ULESS
 568 12fc 1F310000 	    _QBRAN 1f
 568      0C130000 
 569 1304 47310000 	    _BRAN CTRL_KEY
 569      70130000 
 570 130c C9120000 	1:  _ADR CHAR_FONT 
 571 1310 850F0000 	    _ADR CURSOR_COL 
 572 1314 75310000 	    _ADR AT
 573 1318 C90F0000 	    _ADR COLX  // x coord 
 574 131c 990F0000 	    _ADR CURSOR_ROW 
 575 1320 75310000 	    _ADR AT    
 576 1324 B10F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1328 8D340000 	    _ADR ROT  // TEST 
 578 132c DF300000 	    _DOLIT 7   
 578      07000000 
 579 1334 E5310000 	    _ADR TOR  
 580 1338 E5310000 	1:  _ADR TOR  // { x y }
 581 133c DD340000 	    _ADR DDUP  // { x y x y }
 582 1340 D1310000 	    _ADR RAT 
 583 1344 95310000 	    _ADR CAT   // { x y x y r }
 584 1348 89120000 	    _ADR CHAR_ROW 
 585 134c C5330000 	    _ADR ONEP // {x y' }
 586 1350 A1310000 	    _ADR RFROM 
ARM GAS  forth.s 			page 52


 587 1354 C5330000 	    _ADR ONEP // {x y' c-adr' }
 588 1358 01310000 	    _DONXT 1b
 588      38130000 
 589 1360 C9340000 	    _ADR TDROP  
 590 1364 19120000 	    _ADR RIGHT
 591 1368 59140000 	9:  _ADR SHOW_CURSOR 
 592 136c BB2E0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 1370 E1140000 	    _ADR HIDE_CURSOR
 595 1374 69320000 	    _ADR DUPP 
 596 1378 DF300000 	    _DOLIT BKSPP  
 596      08000000 
 597 1380 F5350000 	    _ADR EQUAL 
 598 1384 1F310000 	    _QBRAN 1f 
 598      9C130000 
 599 138c 39140000 	    _ADR BACK_SPACE 
 600 1390 59320000 	8:  _ADR DROP 
 601 1394 47310000 	    _BRAN 9b 
 601      68130000 
 602 139c 69320000 	1:  _ADR DUPP 
 603 13a0 DF300000 	    _DOLIT CRR 
 603      0D000000 
 604 13a8 F5350000 	    _ADR EQUAL 
 605 13ac 1F310000 	    _QBRAN 1f 
 605      C0130000 
 606 13b4 E1130000 	    _ADR CAR_RET
 607 13b8 47310000 	    _BRAN 8b
 607      90130000 
 608 13c0 DF300000 	1:  _DOLIT LF 
 608      0A000000 
 609 13c8 F5350000 	    _ADR EQUAL 
 610 13cc 1F310000 	    _QBRAN 9b 
 610      68130000 
 611 13d4 F9130000 	    _ADR LN_FEED
 612 13d8 47310000 	    _BRAN 9b  
 612      68130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 13e0 504700BF 	   _NEST
 620 13e4 DF300000 	   _DOLIT 0 
 620      00000000 
 621 13ec 850F0000 	   _ADR CURSOR_COL 
 622 13f0 61310000 	   _ADR STORE 
 623 13f4 BB2E0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 13f8 504700BF 	    _NEST 
 631 13fc 990F0000 	    _ADR CURSOR_ROW 
 632 1400 75310000 	    _ADR AT 
ARM GAS  forth.s 			page 53


 633 1404 69320000 	    _ADR DUPP 
 634 1408 DF300000 	    _DOLIT 24 
 634      18000000 
 635 1410 11330000 	    _ADR XORR 
 636 1414 1F310000 	    _QBRAN 1f
 636      2C140000 
 637 141c C5330000 	    _ADR ONEP 
 638 1420 990F0000 	    _ADR CURSOR_ROW 
 639 1424 61310000 	    _ADR STORE 
 640 1428 BB2E0000 	    _UNNEST    
 641 142c 59320000 	1:  _ADR DROP 
 642 1430 49110000 	    _ADR SCROLLUP 
 643 1434 BB2E0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1438 504700BF 	  _NEST 
 652 143c 39120000 	  _ADR LEFT 
 653 1440 59140000 	  _ADR SHOW_CURSOR
 654 1444 BB2E0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1448 E0120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1458 504700BF 	    _NEST 
 663 145c DF300000 	    _DOLIT 0xFF
 663      FF000000 
 664 1464 990F0000 	0:  _ADR CURSOR_ROW
 665 1468 75310000 	    _ADR AT  
 666 146c C5330000 	    _ADR ONEP 
 667 1470 B10F0000 	    _ADR ROWY 
 668 1474 DF300000 	    _DOLIT BPR
 668      A0000000 
 669 147c 89330000 	    _ADR STAR
 670 1480 DF300000 	    _DOLIT BPR  
 670      A0000000 
 671 1488 79330000 	    _ADR SUBB 
 672 148c 850F0000 	    _ADR CURSOR_COL
 673 1490 75310000 	    _ADR AT 
 674 1494 C90F0000 	    _ADR COLX 
 675 1498 69340000 	    _ADR TWOSL  
 676 149c 69330000 	    _ADR PLUS
 677 14a0 F90F0000 	    _ADR VIDBUFF
 678 14a4 69330000 	    _ADR PLUS
 679 14a8 DF300000 	    _DOLIT 2
 679      02000000 
 680 14b0 E5310000 	    _ADR TOR  
ARM GAS  forth.s 			page 54


 681 14b4 DD340000 	1:  _ADR DDUP 
 682 14b8 81310000 	    _ADR CSTOR 
 683 14bc C5330000 	    _ADR ONEP 
 684 14c0 01310000 	    _DONXT 1b
 684      B4140000 
 685 14c8 B5340000 	2:  _ADR DDROP // drop 3 elements 
 686 14cc BB2E0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 14d0 4C140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 14e0 504700BF 	    _NEST 
 694 14e4 510F0000 	    _ADR BACKCOLOR 
 695 14e8 75310000 	    _ADR AT 
 696 14ec 69320000 	    _ADR DUPP  
 697 14f0 DF300000 	    _DOLIT 4 
 697      04000000 
 698 14f8 59330000 	    _ADR LSHIFT 
 699 14fc FD320000 	    _ADR ORR 
 700 1500 47310000 	    _BRAN 0b
 700      64140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1508 D4140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1514 352E     	    cmp TOS,#53
 706 1516 01D4     	    bmi 1f 
 707 1518 4FF03406 	    mov TOS,#52
 708 151c C4F89C60 	1:  str TOS,[UP,#COL]
 709 1520 57F8046B 	    _POP
 710 1524 192E     	    cmp TOS,#25
 711 1526 01D4     	    bmi 1f 
 712 1528 4FF01806 	    mov TOS,#24 
 713 152c C4F89860 	1:  str TOS,[UP,#ROW]
 714 1530 57F8046B 	    _POP 
 715 1534 01F0BEBC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1538 0C150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1544 504700BF 	    _NEST 
 721 1548 B93D0000 	    _ADR PAD 
 722 154c 69320000 	    _ADR DUPP 
 723 1550 C5330000 	    _ADR ONEP 
 724 1554 DF300000 	    _DOLIT 53
 724      35000000 
 725 155c 314C0000 	    _ADR ACCEP
 726 1560 79320000 	    _ADR SWAP 
ARM GAS  forth.s 			page 55


 727 1564 59320000 	    _ADR DROP 
 728 1568 A9320000 	    _ADR OVER 
 729 156c 81310000 	    _ADR CSTOR  
 730 1570 BB2E0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
ARM GAS  forth.s 			page 56


 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
ARM GAS  forth.s 			page 57


 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
ARM GAS  forth.s 			page 58


 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
ARM GAS  forth.s 			page 59


  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
ARM GAS  forth.s 			page 60


  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
ARM GAS  forth.s 			page 61


  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
ARM GAS  forth.s 			page 62


 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 1580 1C61     	   .byte 0x1c,'a' 
   9 1582 3262     	   .byte 0x32,'b'
  10 1584 2163     	   .byte 0x21,'c'
  11 1586 2364     	   .byte 0x23,'d'
  12 1588 2465     	   .byte 0x24,'e'
  13 158a 2B66     	   .byte 0x2b,'f'
  14 158c 3467     	   .byte 0x34,'g'
  15 158e 3368     	   .byte 0x33,'h'
  16 1590 4369     	   .byte 0x43,'i'
  17 1592 3B6A     	   .byte 0x3B,'j'
  18 1594 426B     	   .byte 0x42,'k'
  19 1596 4B6C     	   .byte 0x4b,'l'
  20 1598 3A6D     	   .byte 0x3a,'m'
  21 159a 316E     	   .byte 0x31,'n'
  22 159c 446F     	   .byte 0x44,'o'
  23 159e 4D70     	   .byte 0x4d,'p'
  24 15a0 1571     	   .byte 0x15,'q'
  25 15a2 2D72     	   .byte 0x2d,'r'
  26 15a4 1B73     	   .byte 0x1b,'s'
  27 15a6 2C74     	   .byte 0x2c,'t'
  28 15a8 3C75     	   .byte 0x3c,'u'
  29 15aa 2A76     	   .byte 0x2a,'v'
  30 15ac 1D77     	   .byte 0x1d,'w'
  31 15ae 2278     	   .byte 0x22,'x'
  32 15b0 3579     	   .byte 0x35,'y'
  33 15b2 1A7A     	   .byte 0x1a,'z'
  34 15b4 4530     	   .byte 0x45,'0'
  35 15b6 1631     	   .byte 0x16,'1'
  36 15b8 1E32     	   .byte 0x1e,'2'
  37 15ba 2633     	   .byte 0x26,'3'
  38 15bc 2534     	   .byte 0x25,'4'
  39 15be 2E35     	   .byte 0x2e,'5'
  40 15c0 3636     	   .byte 0x36,'6'
  41 15c2 3D37     	   .byte 0x3d,'7'
  42 15c4 3E38     	   .byte 0x3e,'8'
  43 15c6 4639     	   .byte 0x46,'9'
  44 15c8 0E60     	   .byte 0x0e,'`'
  45 15ca 4E2D     	   .byte 0x4e,'-'
  46 15cc 553D     	   .byte 0x55,'='
  47 15ce 5D5C     	   .byte 0x5d,'\\'
  48 15d0 545B     	   .byte 0x54,'['
  49 15d2 5B5D     	   .byte 0x5b,']'
  50 15d4 4C3B     	   .byte 0x4c,';'
  51 15d6 5227     	   .byte 0x52,'\''
  52 15d8 412C     	   .byte 0x41,','
  53 15da 492E     	   .byte 0x49,'.'
ARM GAS  forth.s 			page 63


  54 15dc 7C2A     	   .byte 0x7c,'*'
  55 15de 792B     	   .byte 0x79,'+'
  56 15e0 2920     	   .byte 0x29,' '
  57 15e2 5A0D     	   .byte SC_ENTER,CRR 
  58 15e4 6608     	   .byte SC_BKSP,BKSPP 
  59 15e6 0D09     	   .byte SC_TAB,9
  60 15e8 761B     	   .byte SC_ESC,27
  61 15ea 119E     	   .byte SC_LALT,VK_LALT 
  62 15ec 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 15ee 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 15f0 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 15f2 779A     	   .byte SC_NUM,VK_NLOCK 
  66 15f4 5800     	   .byte SC_CAPS,0
  67 15f6 0580     	   .byte SC_F1,VK_F1
  68 15f8 0681     	   .byte SC_F2,VK_F2
  69 15fa 0482     	   .byte SC_F3,VK_F3
  70 15fc 0C83     	   .byte SC_F4,VK_F4
  71 15fe 0384     	   .byte SC_F5,VK_F5
  72 1600 0B85     	   .byte SC_F6,VK_F6
  73 1602 8386     	   .byte SC_F7,VK_F7
  74 1604 0A87     	   .byte SC_F8,VK_F8
  75 1606 0188     	   .byte SC_F9,VK_F9
  76 1608 098A     	   .byte SC_F10,VK_F10
  77 160a 788B     	   .byte SC_F11,VK_F11
  78 160c 078C     	   .byte SC_F12,VK_F12
  79 160e 7030     	   .byte SC_KP0,'0'
  80 1610 6931     	   .byte SC_KP1,'1'
  81 1612 7232     	   .byte SC_KP2,'2'
  82 1614 7A33     	   .byte SC_KP3,'3'
  83 1616 6B34     	   .byte SC_KP4,'4'
  84 1618 7335     	   .byte SC_KP5,'5'
  85 161a 7436     	   .byte SC_KP6,'6'
  86 161c 6C37     	   .byte SC_KP7,'7'
  87 161e 7538     	   .byte SC_KP8,'8'
  88 1620 7D39     	   .byte SC_KP9,'9'
  89 1622 7C2A     	   .byte SC_KPMUL,'*'
  90 1624 4A2F     	   .byte SC_KPDIV,'/'
  91 1626 792B     	   .byte SC_KPPLUS,'+'
  92 1628 7B2D     	   .byte SC_KPMINUS,'-'
  93 162a 712E     	   .byte SC_KPDOT,'.'
  94 162c 5A0D     	   .byte SC_KPENTER,'\r'
  95 162e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1630 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1632 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1634 6141     	   .byte 'a','A'
 102 1636 6242     	   .byte 'b','B'
 103 1638 6343     	   .byte 'c','C'
 104 163a 6444     	   .byte 'd','D'
 105 163c 6545     	   .byte 'e','E'
 106 163e 6646     	   .byte 'f','F'
 107 1640 6747     	   .byte 'g','G'
 108 1642 6848     	   .byte 'h','H'
 109 1644 6949     	   .byte 'i','I'
 110 1646 6A4A     	   .byte 'j','J'
ARM GAS  forth.s 			page 64


 111 1648 6B4B     	   .byte 'k','K'
 112 164a 6C4C     	   .byte 'l','L'
 113 164c 6D4D     	   .byte 'm','M'
 114 164e 6E4E     	   .byte 'n','N'
 115 1650 6F4F     	   .byte 'o','O'
 116 1652 7050     	   .byte 'p','P'
 117 1654 7151     	   .byte 'q','Q'
 118 1656 7252     	   .byte 'r','R'
 119 1658 7353     	   .byte 's','S'
 120 165a 7454     	   .byte 't','T'
 121 165c 7555     	   .byte 'u','U'
 122 165e 7656     	   .byte 'v','V'
 123 1660 7757     	   .byte 'w','W'
 124 1662 7858     	   .byte 'x','X'
 125 1664 7959     	   .byte 'y','Y'
 126 1666 7A5A     	   .byte 'z','Z'
 127 1668 3121     	   .byte '1','!'
 128 166a 3240     	   .byte '2','@'
 129 166c 3323     	   .byte '3','#'
 130 166e 3424     	   .byte '4','$'
 131 1670 3525     	   .byte '5','%'
 132 1672 365E     	   .byte '6','^'
 133 1674 3726     	   .byte '7','&'
 134 1676 382A     	   .byte '8','*'
 135 1678 3928     	   .byte '9','('
 136 167a 3029     	   .byte '0',')'
 137 167c 2D5F     	   .byte '-','_'
 138 167e 3D2B     	   .byte '=','+'
 139 1680 607E     	   .byte '`','~'
 140 1682 2722     	   .byte '\'','"'
 141 1684 2C3C     	   .byte ',','<'
 142 1686 2E3E     	   .byte '.','>'
 143 1688 2F3F     	   .byte '/','?'
 144 168a 5C7C     	   .byte '\\','|'
 145 168c 3B3A     	   .byte ';',':'
 146 168e 5B7B     	   .byte '[','{'
 147 1690 5D7D     	   .byte ']','}'
 148 1692 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1694 315C     	   .byte '1','\\'
 153 1696 3240     	   .byte '2','@'
 154 1698 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 169a 363F     	   .byte '6','?'
 158 169c 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 169e 397B     	   .byte '9','{'
 161 16a0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 16a2 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
ARM GAS  forth.s 			page 65


 168 16a4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 16a6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 16a8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 16aa 11A3     	    .byte SC_RALT,VK_RALT
 172 16ac 2F97     	    .byte SC_APPS,VK_APPS
 173 16ae 758D     	    .byte SC_UP,VK_UP
 174 16b0 728E     	    .byte SC_DOWN,VK_DOWN
 175 16b2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 16b4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 16b6 7095     	    .byte SC_INSERT,VK_INSERT
 178 16b8 6C91     	    .byte SC_HOME,VK_HOME
 179 16ba 7D93     	    .byte SC_PGUP,VK_PGUP
 180 16bc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 16be 717F     	    .byte SC_DEL,VK_DELETE
 182 16c0 6992     	    .byte SC_END,VK_END
 183 16c2 4A2F     	    .byte SC_KPDIV,'/'
 184 16c4 5A0D     	    .byte SC_KPENTER,'\r'
 185 16c6 1200     	    .byte 0x12,0
 186 16c8 7C00     	    .byte 0x7c,0
 187 16ca 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 16cc 6303     	   .byte 'c', VK_CTRL_C 
 193 16ce 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 16d0 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 16d2 27A2     	   .byte SC_RGUI,VK_RGUI
 196 16d4 11A3     	   .byte SC_RALT,VK_RALT
 197 16d6 2F97     	   .byte SC_APPS,VK_APPS
 198 16d8 7095     	   .byte SC_INSERT,VK_INSERT
 199 16da 6C91     	   .byte SC_HOME,VK_HOME
 200 16dc 7D93     	   .byte SC_PGUP,VK_PGUP
 201 16de 717F     	   .byte SC_DEL,VK_DELETE
 202 16e0 6992     	   .byte SC_END,VK_END
 203 16e2 7A94     	   .byte SC_PGDN,VK_PGDN
 204 16e4 758D     	   .byte SC_UP,VK_UP
 205 16e6 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 16e8 728E     	   .byte SC_DOWN,VK_DOWN
 207 16ea 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 16ec 4A2F     	   .byte SC_KPDIV,'/'
 209 16ee 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 16f0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 16f2 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 16f4 119E     	   .byte SC_LALT,VK_LALT
 213 16f6 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 16f8 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 16fa 761B     	   .byte SC_ESC,VK_ESC
 216 16fc 779A     	   .byte SC_NUM,VK_NLOCK
 217 16fe 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1700 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
ARM GAS  forth.s 			page 66


  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1702 00BF     	    _GBL_FUNC kbd_isr 
  79 1704 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 170c 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1710 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1712 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 171a D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 171e 10F0020F 	    tst r0,#KBD_TX 
  85 1722 40F08480 	    bne send_bit  
  86 1726 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1728 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 172c 01F10102 	    add r2,r1,#1
  89 1730 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 1734 0029     	    cmp r1,#0
  91 1736 15D0     	    beq start_bit 
  92 1738 0929     	    cmp r1,#9 
  93 173a 25D0     	    beq parity_bit 
  94 173c 0A29     	    cmp r1,#10 
  95 173e 2DD0     	    beq stop_bit 
  96              	    // data bit 
ARM GAS  forth.s 			page 67


  97 1740 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1744 4FEA5202 	    lsr r2,#1 
  99 1748 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 174c 07D0     	    beq 1f 
 101 174e 42F08002 	    orr r2,#(1<<7)
 102 1752 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1756 00F10100 	    add r0,#1 
 104 175a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 175e 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1762 63E0     	    b 9f         
 107              	start_bit:
 108 1764 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1768 60D1     	    bne 9f // not a start bit 
 110 176a 80EA0000 	    eor r0,r0 
 111 176e 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 1772 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 1776 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 177a 6FF00101 	    mvn r1,#1
 115 177e 00EA0100 	    and r0,r1 // clear error flag 
 116 1782 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 1786 51E0     	    b 9f 
 118              	parity_bit:
 119 1788 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 178c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1790 4CD0     	    beq 9f  
 122 1792 01F10101 	    add r1,#1 
 123 1796 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 179a 47E0     	    b 9f      
 125              	stop_bit:
 126 179c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 17a0 40D0     	    beq 8f // error stop bit expected 
 128 17a2 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 17a6 11F0010F 	    tst r1,#1 
 130 17aa 3BD0     	    beq 8f // error parity
 131 17ac 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 17b0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 17b4 E028     	    cmp r0,#XT_KEY
 134 17b6 04D1     	    bne 1f
 135 17b8 41F04001 	    orr r1,#KBD_F_XT
 136 17bc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 17c0 30E0     	    b 8f  
 138 17c2 11F0800F 	1:  tst r1,#KBD_F_REL
 139 17c6 14D0     	    beq store_code
 140 17c8 5828     	    cmp r0,#SC_CAPS
 141 17ca 04D1     	    bne 1f
 142 17cc 81F00401 	    eor r1,#KBD_F_CAPS
 143 17d0 41F00101 	    orr r1,#KBD_F_CTGL 
 144 17d4 06E0     	    b 2f 
 145 17d6 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 17e0 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 17e4 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 17e8 01EA0201 	    and r1,r2
 149 17ec 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 17f0 18E0     	    b 8f
 151              	// store code in queue 
ARM GAS  forth.s 			page 68


 152              	store_code:
 153 17f2 F028     	    cmp r0,#KEY_REL
 154 17f4 04D1     	    bne 1f
 155              	// set release flags 
 156 17f6 41F08001 	    orr r1,#KBD_F_REL 
 157 17fa 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 17fe 11E0     	    b 8f     
 159 1800 0146     	1:  mov r1,r0 
 160 1802 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 180c 0AD1     	    bne 8f // was async key 
 162 180e D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 1812 04F18002 	    add r2,UP,#KBD_QUEUE
 164 1816 1154     	    strb r1,[r2,r0]
 165 1818 00F10100 	    add r0,#1
 166 181c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1820 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 1824 80EA0000 	8:  eor r0,r0 
 169 1828 A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 182c 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 182e 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1832 01F10100 	    add r0,r1,#1
 182 1836 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 183a 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 183e 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1842 0829     	1:  cmp r1,#8 
 187 1844 15D0     	    beq send_parity 
 188 1846 0929     	    cmp r1,#9 
 189 1848 1CD0     	    beq send_stop
 190 184a 0A29     	    cmp r1,#10
 191 184c 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 184e 10F0010F 	    tst r0,#1
 194 1852 4FEA5000 	    lsr r0,#1
 195 1856 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 185a 02D1     	    bne 1f 
 197 185c 4FEA0242 	    lsl r2,#16
 198 1860 05E0     	    b 2f  
 199 1862 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1866 00F10100 	    add r0,#1 
 201 186a 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 186e 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1870 1CE0     	    b 9f 
 204              	send_parity:
 205 1872 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 1876 10F0010F 	    tst r0,#1
ARM GAS  forth.s 			page 69


 207 187a 01D0     	    beq 1f 
 208 187c 4FEA0242 	    lsl r2,#16
 209 1880 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1882 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1884 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1886 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 188a 1960     	    str r1,[r3,#GPIO_MODER]
 217 188c 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 188e 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1892 6FF00201 	    mvn r1,#KBD_TX 
 221 1896 00EA0100 	    and r0,r1 
 222 189a 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 189c 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 18a0 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 18a4 80EA0000 	    eor r0,r0 
 226 18a8 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 18ac 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 18ae 02B4     	    push {r1}
 238 18b0 DFF86414 	    ldr r1,=async_keys
 239 18b4 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 18be 02BC     	    pop {r1}
 241 18c0 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 18c2 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 18cc FF28     	    cmp r0,#255
 256 18ce 01D1     	    bne set_async_key 
 257 18d0 0020     	    movs r0,#0 
 258 18d2 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
ARM GAS  forth.s 			page 70


 260              	set_async_key:
 261 18d4 06B4     	    push {r1,r2}
 262 18d6 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 18da DFF84014 	    ldr r1,=async_jump 
 264 18de D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 18e2 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 18e6 04E0     	    b set_reset
 268              	ctrl_key:
 269 18e8 4FF01000 	    mov r0,#KBD_F_CTRL
 270 18ec 01E0     	    b set_reset 
 271              	alt_key:
 272 18ee 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 18f2 12F0800F 	    tst r2,#KBD_F_REL 
 275 18f6 04D0     	    beq 1f 
 276 18f8 6FEA0000 	    mvn r0,r0
 277 18fc 02EA0002 	    and r2,r0
 278 1900 01E0     	    b 2f
 279 1902 42EA0002 	1:  orr r2,r0 
 280 1906 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 190a 5FF0FF30 	    movs r0,#-1
 282 190e 06BC     	9:  pop {r1,r2}
 283 1910 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1912 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1914 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1916 1401     	    .byte SC_LCTRL,1  // left control 
 290 1918 1401     	    .byte SC_RCTRL,1  // right control 
 291 191a 1102     	    .byte SC_LALT,2  // left alt 
 292 191c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 191e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1920 00       	    .byte 0 // shift  key 
 297 1921 03       	    .byte (ctrl_key-shift_key)/2
 298 1922 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 1923 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1924 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 192c 1846     	    mov r0,r3 
 311 192e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1932 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1936 00B5FEF7 	    _CALL gpio_config
 313      32FF5DF8 
 313      04EB
ARM GAS  forth.s 			page 71


 314 1940 1846     	    mov r0,r3 
 315 1942 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1946 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 194a 00B5FEF7 	    _CALL gpio_config
 317      28FF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1954 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 195c 4FF40050 	    mov r0,#(2<<12)
 321 1960 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1962 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 196a 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 196e 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1970 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1972 80EA0000 	   eor r0,r0 
 328 1976 C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 197a C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 197e 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1982 4FF00101 	   mov r1,#1 
 333 1986 00B5FEF7 	   _CALL nvic_set_priority
 333      AEFE5DF8 
 333      04EB
 334 1990 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1994 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C0FE5DF8 
 335      04EB
 336 199e 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 19a0 3C150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 19b0 47F8046D 	    _PUSH 
 342 19b4 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 19b8 06F0FC06 	    and TOS,#0xFC  
 344 19bc 01F07ABA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 19c0 0EB4     	    push {T1,T2,T3}
 352 19c2 80EA0000 	    eor T0,T0  
 353 19c6 04F18003 	    add T3,UP,#KBD_QUEUE
 354 19ca D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 19ce D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 19d2 9142     	    cmp T1,T2 
 357 19d4 06D0     	    beq 2f  
 358 19d6 585C     	    ldrb T0,[T3,T1]
 359 19d8 01F10101 	    add T1,#1 
ARM GAS  forth.s 			page 72


 360 19dc 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 19e0 C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 19e4 0EBC     	2:  pop {T1,T2,T3}
 363 19e6 7047     	    _RET 
 364              	
 365              	wait_code:
 366 19e8 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 19f2 0000     	    movs T0,T0
 368 19f4 F8D0     	    beq wait_code  
 369 19f6 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 19f8 04B4     	    push {T2}
 380 19fa 11F8012B 	1:  ldrb T2,[T1],#1
 381 19fe 22B1     	    cbz T2,2f 
 382 1a00 8242     	    cmp T2,T0
 383 1a02 02D0     	    beq 2f 
 384 1a04 01F10101 	    add T1,#1 
 385 1a08 F7E7     	    b 1b 
 386 1a0a 0878     	2:  ldrb T0,[T1]
 387 1a0c 0000     	    movs T0,T0 // set/reset zero flag 
 388 1a0e 04BC     	9:  pop {T2}
 389 1a10 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1a12 A4190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1a20 47F8046D 	    _PUSH 
 398 1a24 86EA0606 	    eor TOS,TOS 
 399 1a28 BD49     	    ldr T1,=sc_ascii // translation table
 400 1a2a 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 1a2e 4FF04002 	    mov T2,#KBD_F_XT 
 402 1a32 1042     	    tst T0,T2
 403 1a34 00D0     	    beq 1f
 404 1a36 BB49     	    ldr T1,=extended // extended code translation
 405 1a38 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1a42 98B1     	    cbz T0,inkey_exit
 407 1a44 E128     	    cmp T0,#XT2_KEY // pause 
 408 1a46 13D0     	    beq pause_key
 409 1a48 00B5FFF7 	    _CALL table_scan 
ARM GAS  forth.s 			page 73


 409      D5FF5DF8 
 409      04EB
 410 1a52 0646     	    mov TOS,T0
 411 1a54 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1a5e 032E     	    cmp TOS,#VK_CTRL_C 
 413 1a60 3EF419AD 	    beq user_reboot 
 414 1a64 47F8046D 	    _PUSH 
 415 1a68 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1a6c 01F022BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1a70 4FF00701 	    mov T1,#7 
 420 1a74 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1a7e 0139     	    subs T1,#1
 422 1a80 F8D1     	    bne 1b 
 423 1a82 01F017BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1a86 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1a8a 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1a8e 06D1     	    bne shift_down 
 431 1a90 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1a94 06D1     	    bne altchar_down 
 433 1a96 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1a9a 06D1     	    bne ctrl_down 
 435 1a9c 0DE0     	    b 9f 
 436              	shift_down:
 437 1a9e 3046     	    mov T0,TOS 
 438 1aa0 A149     	    ldr T1,=shifted 
 439 1aa2 04E0     	    b 8f 
 440              	altchar_down:
 441 1aa4 3046     	    mov T0,TOS 
 442 1aa6 A149     	    ldr T1,=altchar
 443 1aa8 01E0     	    b 8f
 444              	ctrl_down:
 445 1aaa 3046     	    mov T0,TOS 
 446 1aac A049     	    ldr T1,=controls 
 447 1aae 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1ab8 0646     	    mov TOS,T0
 449 1aba 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1ac4 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1ac6 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1aca 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1ace 0BD0     	    beq 9f 
 456 1ad0 412E     	    cmp TOS,#'A'
ARM GAS  forth.s 			page 74


 457 1ad2 09D4     	    bmi 9f 
 458 1ad4 5B2E     	    cmp TOS,#'Z'+1 
 459 1ad6 03D4     	    bmi 3f 
 460 1ad8 612E     	    cmp TOS,#'a'
 461 1ada 05D4     	    bmi 9f 
 462 1adc 7B2E     	    cmp TOS,#'z'+1
 463 1ade 03D5     	    bpl 9f 
 464 1ae0 4FF02000 	3:  mov T0,#(1<<5)
 465 1ae4 86EA0006 	    eor TOS,T0 
 466 1ae8 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1aea 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1aec 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 1aee 0128     	    cmp r0,ST_PREVID 
 484 1af0 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1af2 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1af6 00B5FEF7 	    _CALL nvic_disable_irq
 487      24FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1b00 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1b08 1846     	    mov r0,r3 
 491 1b0a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 1b0e 4FF01102 	    mov r2,#OUTPUT_OD
 493 1b12 00B5FEF7 	    _CALL gpio_config 
 493      44FE5DF8 
 493      04EB
 494 1b1c 1846     	    mov r0,r3 
 495 1b1e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1b22 82EA0202 	    eor r2,r2 
 497 1b26 00B5FEF7 	    _CALL gpio_out 
 497      90FE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1b30 4FF4E150 	    mov r0,#150*48
 500 1b34 0138     	1:  subs r0,#1 
 501 1b36 FDD1     	    bne 1b
 502 1b38 01BC     	    pop {r0}
 503 1b3a 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 1b3e D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1b42 40F00200 	    orr r0,#KBD_TX 
 506 1b46 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 75


 507 1b4a 80EA0000 	    eor r0,r0 
 508 1b4e 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 1b52 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1b56 1846     	    mov r0,r3 
 513 1b58 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1b5c 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1b60 00B5FEF7 	    _CALL gpio_config 
 515      1DFE5DF8 
 515      04EB
 516 1b6a 1846     	    mov r0,r3 
 517 1b6c 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1b70 82EA0202 	    eor r2,r2 
 519 1b74 00B5FEF7 	    _CALL gpio_out
 519      69FE5DF8 
 519      04EB
 520              	// release clock line 
 521 1b7e 1846     	    mov r0,r3 
 522 1b80 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1b84 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1b88 00B5FEF7 	    _CALL gpio_config
 524      09FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1b92 4FF00A00 	    mov r0,#10
 528 1b96 E060     	    str r0,[UP,#CD_TIMER]
 529 1b98 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1b9a 20B1     	    cbz r0, 4f 
 531 1b9c 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1ba0 10F0020F 	    tst r0,#KBD_TX
 533 1ba4 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1ba6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1baa 00B5FEF7 	    _CALL nvic_enable_irq
 536      B5FD5DF8 
 536      04EB
 537 1bb4 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1bb8 20F00201 	    bic r1,r0,#KBD_TX
 539 1bbc 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 1bc0 00F00200 	    and r0,#KBD_TX
 541 1bc4 48B1     	    cbz r0, 5f
 542 1bc6 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1bc8 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1bcc 1960     	    str r1,[r3,#GPIO_MODER]
 545 1bce 80EA0000 	    eor r0,r0 
 546 1bd2 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1bd6 6FEA0000 	    mvn r0,r0   
 548 1bda 0EBC     	5:  pop {r1,r2,r3}
 549 1bdc 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1bde 80EA0000 	    eor T0,T0 
 555 1be2 C4F89000 	    str T0,[UP,#KBD_QHEAD]
ARM GAS  forth.s 			page 76


 556 1be6 C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 1bea 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1bee 6FF00301 	    mvn T1,#3
 559 1bf2 00EA0100 	    and T0,T1 
 560 1bf6 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 1bfa 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1bfc 161A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1c08 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1c0c 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1c16 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1c18 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1c22 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1c2c FE28     	    cmp r0,KBD_CMD_RESEND
 574 1c2e EBD0     	    beq 1b 
 575 1c30 4FF4FA70 	    mov T0,#500 
 576 1c34 E060     	    str T0,[UP,#CD_TIMER]
 577 1c36 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1c40 10B9     	    cbnz T0,3f
 579 1c42 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1c44 0028     	    cmp T0,#0 
 581 1c46 F6D1     	    bne 2b 
 582 1c48 47F8046D 	3:  _PUSH 
 583 1c4c 0646     	    mov TOS,T0  
 584 1c4e 01F031B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1c52 001C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1c60 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1c6a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1c6e 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1c78 00B5FFF7 	2:  _CALL wait_code 
ARM GAS  forth.s 			page 77


 595      B5FE5DF8 
 595      04EB
 596 1c82 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1c84 ECD0     	    beq 1b
 598 1c86 FA28     	    cmp T0,#KBD_ACK  
 599 1c88 F6D1     	    bne 2b 
 600 1c8a 3046     	2:  mov T0,TOS 
 601 1c8c 00F00700 	    and T0,#7 
 602 1c90 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1c9a 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ca4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ca6 F0D0     	    beq 2b
 606 1ca8 FA28     	    cmp T0,#KBD_ACK 
 607 1caa F6D1     	    bne 3b  
 608 1cac 57F8046B 	    _POP 
 609 1cb0 01F000B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1cb4 561C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1cc4 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1cc8 10F0010F 	    tst T0,#1
 619 1ccc 01D1     	    bne 1f 
 620 1cce 01F0F1B8 	    _NEXT 
 621 1cd2 47F8046D 	1: _PUSH 
 622 1cd6 6FF00101 	    mvn T1,#1 
 623 1cda 00EA0100 	    and T0,T1 
 624 1cde 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 1ce2 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1ce6 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1cee B81C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1cfc 504700BF 	    _NEST
 635 1d00 C51C0000 	1:  _ADR CAPS_LED  
 636 1d04 211A0000 	    _ADR PS2_QKEY 
 637 1d08 79340000 	    _ADR QDUP 
 638 1d0c 1F310000 	    _QBRAN 1b  
 638      001D0000 
ARM GAS  forth.s 			page 78


 639 1d14 BB2E0000 	    _UNNEST 
 640 1d18 12190000 	
 640      20190000 
 640      80150000 
 640      A4160000 
 640      34160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1d38 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1d40 0346     	    mov r3,r0 
  44 1d42 4FF00401 	    mov r1,#PIN_F_SC 
  45 1d46 4FF00102 	    mov r2,#OUTPUT_PP
  46 1d4a 00B5FEF7 	    _CALL gpio_config 
  46      28FD5DF8 
  46      04EB
  47 1d54 1846     	    mov r0,r3 
  48 1d56 4FF00401 	    mov r1,#PIN_F_SC  
ARM GAS  forth.s 			page 79


  49 1d5a 4FF00102 	    MOV r2,#1
  50 1d5e 00B5FEF7 	    _CALL gpio_out 
  50      74FD5DF8 
  50      04EB
  51 1d68 1846     	    mov r0,r3 
  52 1d6a 4FF00501 	    mov r1,#PIN_SCK  
  53 1d6e 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1d72 00B5FEF7 	    _CALL gpio_config 
  54      14FD5DF8 
  54      04EB
  55 1d7c 1846     	    mov r0,r3 
  56 1d7e 4FF00701 	    mov r1,#PIN_MOSI 
  57 1d82 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1d86 00B5FEF7 	    _CALL gpio_config 
  58      0AFD5DF8 
  58      04EB
  59 1d90 1846     	    mov r0,r3
  60 1d92 4FF00601 	    mov r1,#PIN_MISO
  61 1d96 4FF00202 	    mov r2,#INPUT_AFO  
  62 1d9a 00B5FEF7 	    _CALL gpio_config
  62      00FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1da4 4CF6AA40 	    mov r0,#0xCCAA
  65 1da8 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1daa 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1db2 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1db4 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1db8 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1dba 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1dc2 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1dc6 0180     	    strh r1,[r0,#SPI_CR1]
  73 1dc8 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1dca 80EA0000 	    eor r0,r0 
  75 1dce C5F25050 	    movt r0,#0x5550 
  76 1dd2 40EA0100 	    orr r0,r1 
  77 1dd6 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1dd8 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1dda F21C0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1de8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1df0 4FF00401 	    mov r1,#PIN_F_SC 
  88 1df4 4FF00002 	    mov r2,#0 
  89 1df8 00B5FEF7 	    _CALL gpio_out 
  89      27FD5DF8 
  89      04EB
ARM GAS  forth.s 			page 80


  90 1e02 01F057B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1e06 DE1D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1e14 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1e1c 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1e1e 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1e22 FBD1     	    bne 1b 
 102 1e24 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1e2c 4FF00401 	    mov r1,#PIN_F_SC 
 104 1e30 4FF00102 	    mov r2,#1 
 105 1e34 00B5FEF7 	    _CALL gpio_out 
 105      09FD5DF8 
 105      04EB
 106 1e3e 01F039B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1e42 0A1E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1e50 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1e58 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1e5a 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1e5e FBD0     	    beq 0b 
 118 1e60 6FF00001 	    mvn T1,#0 
 119 1e64 0173     	    strb T1,[T0,#SPI_DR]
 120 1e66 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1e68 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1e6c FBD0     	    beq 1b     
 123              	2:  
 124 1e6e 47F8046D 	    _PUSH 
 125 1e72 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1e74 01F01EB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1e78 461E0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
ARM GAS  forth.s 			page 81


 134 1e84 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1e8c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1e8e 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1e92 FBD0     	    beq 0b 
 138 1e94 0673     	    strb TOS,[T0,#SPI_DR]
 139 1e96 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1e98 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1e9c FBD0     	    beq 1b 
 142 1e9e 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1ea0 57F8046B 	    _POP 
 144 1ea4 01F006B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ea8 7C1E0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1eb4 504700BF 	    _NEST 
 153 1eb8 E91D0000 	    _ADR CHIP_SEL 
 154 1ebc DF300000 	    _DOLIT 4
 154      04000000 
 155 1ec4 851E0000 	    _ADR WR_BYTE
 156 1ec8 151E0000 	    _ADR CHIP_DSEL
 157 1ecc BB2E0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1ed0 AC1E0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1edc 504700BF 	    _NEST 
 165 1ee0 E91D0000 	    _ADR CHIP_SEL 
 166 1ee4 DF300000 	    _DOLIT 6 
 166      06000000 
 167 1eec 851E0000 	    _ADR WR_BYTE 
 168 1ef0 151E0000 	    _ADR CHIP_DSEL 
 169 1ef4 BB2E0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1ef8 D41E0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1f04 504700BF 	    _NEST
 177 1f08 E91D0000 	    _ADR CHIP_SEL  
 178 1f0c DF300000 	    _DOLIT sr_cmd 
 178      2C1F0000 
 179 1f14 69330000 	    _ADR PLUS 
 180 1f18 95310000 	    _ADR CAT
ARM GAS  forth.s 			page 82


 181 1f1c 851E0000 	    _ADR WR_BYTE
 182 1f20 511E0000 	    _ADR RD_BYTE
 183 1f24 151E0000 	    _ADR CHIP_DSEL  
 184 1f28 BB2E0000 	    _UNNEST 
 185 1f2c 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1f2f FC1E0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1f3c 504700BF 	    _NEST 
 193 1f40 69320000 	    _ADR DUPP 
 194 1f44 DF300000 	    _DOLIT 16
 194      10000000 
 195 1f4c 41330000 	    _ADR RSHIFT 
 196 1f50 851E0000 	    _ADR WR_BYTE 
 197 1f54 69320000 	    _ADR DUPP
 198 1f58 DF300000 	    _DOLIT 8 
 198      08000000 
 199 1f60 41330000 	    _ADR RSHIFT 
 200 1f64 851E0000 	    _ADR WR_BYTE 
 201 1f68 851E0000 	    _ADR WR_BYTE 
 202 1f6c BB2E0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1f70 331F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1f80 504700BF 	    _NEST 
 210 1f84 DF300000 	1:  _DOLIT 0 
 210      00000000 
 211 1f8c 051F0000 	    _ADR RD_SR 
 212 1f90 DF300000 	    _DOLIT 3 
 212      03000000 
 213 1f98 E9320000 	    _ADR ANDD 
 214 1f9c 1F310000 	    _QBRAN 2f
 214      AC1F0000 
 215 1fa4 47310000 	    _BRAN 1b
 215      841F0000 
 216 1fac BB2E0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1fb0 741F0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
ARM GAS  forth.s 			page 83


 223      4C4B00BF 
 224 1fc0 504700BF 	    _NEST 
 225 1fc4 DD1E0000 	    _ADR WR_ENBL
 226 1fc8 E91D0000 	    _ADR CHIP_SEL 
 227 1fcc DF300000 	    _DOLIT 0x20 
 227      20000000 
 228 1fd4 851E0000 	    _ADR WR_BYTE 
 229 1fd8 3D1F0000 	    _ADR SEND_ADR
 230 1fdc 151E0000 	    _ADR CHIP_DSEL 
 231 1fe0 811F0000 	    _ADR WAIT_DONE 
 232 1fe4 BB2E0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1fe8 B41F0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1ff8 504700BF 	    _NEST 
 240 1ffc DD1E0000 	    _ADR WR_ENBL 
 241 2000 E91D0000 	    _ADR CHIP_SEL
 242 2004 DF300000 	    _DOLIT 0x60
 242      60000000 
 243 200c DF300000 	    _DOLIT 0xC7 
 243      C7000000 
 244 2014 851E0000 	    _ADR WR_BYTE 
 245 2018 851E0000 	    _ADR WR_BYTE 
 246 201c 151E0000 	    _ADR CHIP_DSEL 
 247 2020 811F0000 	    _ADR WAIT_DONE
 248 2024 BB2E0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 2028 EC1F0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 2034 504700BF 	    _NEST
 258 2038 E91D0000 	    _ADR CHIP_SEL 
 259 203c DF300000 	    _DOLIT 3 
 259      03000000 
 260 2044 851E0000 	    _ADR WR_BYTE 
 261 2048 3D1F0000 	    _ADR SEND_ADR
 262 204c E5310000 	    _ADR TOR   
 263 2050 47310000 	    _BRAN 2f
 263      68200000 
 264 2058 511E0000 	1:  _ADR RD_BYTE
 265 205c A9320000 	    _ADR OVER 
 266 2060 81310000 	    _ADR CSTOR
 267 2064 C5330000 	    _ADR ONEP 
 268 2068 01310000 	2:  _DONXT 1b
 268      58200000 
ARM GAS  forth.s 			page 84


 269 2070 59320000 	    _ADR DROP 
 270 2074 151E0000 	    _ADR CHIP_DSEL 
 271 2078 BB2E0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 207c 2C200000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 2088 504700BF 	    _NEST 
 280 208c DD1E0000 	    _ADR WR_ENBL
 281 2090 E91D0000 	    _ADR CHIP_SEL
 282 2094 DF300000 	    _DOLIT 2 
 282      02000000 
 283 209c 851E0000 	    _ADR WR_BYTE 
 284 20a0 3D1F0000 	    _ADR SEND_ADR
 285 20a4 E5310000 	    _ADR TOR
 286 20a8 47310000 	    _BRAN 2f 
 286      C8200000 
 287 20b0 69320000 	1:  _ADR DUPP 
 288 20b4 95310000 	    _ADR CAT 
 289 20b8 69320000 	    _ADR DUPP 
 290 20bc 49460000 	    _ADR HDOT
 291 20c0 851E0000 	    _ADR WR_BYTE 
 292 20c4 C5330000 	    _ADR ONEP
 293 20c8 01310000 	2:  _DONXT 1b 
 293      B0200000 
 294 20d0 59320000 	    _ADR DROP
 295 20d4 151E0000 	    _ADR CHIP_DSEL
 296 20d8 811F0000 	    _ADR WAIT_DONE 
 297 20dc BB2E0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 20e0 80200000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 20f0 504700BF 	    _NEST 
ARM GAS  forth.s 			page 85


 318              	    
 319 20f4 BB2E0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 20f8 E4200000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 2108 504700BF 	    _NEST 
 327              	
 328 210c BB2E0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 2110 FC200000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 2118 504700BF 	    _NEST 
 336              	
 337 211c BB2E0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 2120 14210000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 212c 504700BF 	    _NEST 
 345              	
 346 2130 BB2E0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 2134 24210000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 2140 504700BF 	    _NEST 
 354              	
 355 2144 BB2E0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
ARM GAS  forth.s 			page 86


   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 2148 5F708930 	     .word  0x3089705F // 1e-9
  34 214c 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 2150 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 2154 BD378635 	     .word  0x358637BD // 1e-6 
  37 2158 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 215c 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 2160 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 2164 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 2168 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 216c 0000803F 	     .word  0x3F800000 // 1.0 
  44 2170 00002041 	     .word  0x41200000 // 1e1 
  45 2174 0000C842 	     .word  0x42C80000 // 1e2 
  46 2178 00007A44 	     .word  0x447A0000 // 1e3 
  47 217c 00401C46 	     .word  0x461C4000 // 1e4 
  48 2180 0050C347 	     .word  0x47C35000 // 1e5 
  49 2184 00247449 	     .word  0x49742400 // 1e6 
  50 2188 8096184B 	     .word  0x4B189680 // 1e7
  51 218c 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 2190 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 2194 38210000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 21a0 4FEA8606 	    lsl TOS,#2  
  61 21a4 FF48     	    ldr t0, =p10 
  62 21a6 0644     	    add TOS,TOS,T0
  63 21a8 3668     	    ldr TOS,[TOS]  
ARM GAS  forth.s 			page 87


  64 21aa 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 21ae DFF8F803 	   ldr.w r0,=CPACR 
  73 21b2 0168     	   ldr R1,[R0]
  74 21b4 41F47001 	   orr r1,r1,#(0xf<<20)
  75 21b8 0160     	   str r1,[r0]
  76 21ba BFF34F8F 	   dsb 
  77 21be FB48     	   ldr r0,=FPC_BASE_ADR
  78 21c0 81EA0101 	   eor r1,r1 
  79 21c4 0160     	   str r1,[r0,FPCCR]
  80 21c6 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 21ca 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 21cc 98210000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 21d4 4FF05100 	    mov r0,#FPU_IRQ 
  92 21d8 00B5FEF7 	    _CALL nvic_disable_irq
  92      B3FA5DF8 
  92      04EB
  93 21e2 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 21e6 D0210000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 21f0 4FF05100 	    mov r0,#FPU_IRQ
 102 21f4 00B5FEF7 	    _CALL nvic_enable_irq
 102      90FA5DF8 
 102      04EB
 103 21fe 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 2202 EA210000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 220c 47F8046D 	   _PUSH 
ARM GAS  forth.s 			page 88


 112 2210 F1EE106A 	   vmrs TOS,FPSCR
 113 2214 BFF34F8F 	   dsb  
 114 2218 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 221c 06220000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 222c F1EE100A 	   vmrs T0,FPSCR 
 125 2230 BFF34F8F 	   dsb 
 126 2234 06EA0006 	   and TOS,T0  
 127 2238 E1EE106A 	   vmsr FPSCR,TOS 
 128 223c BFF34F8F 	   dsb 
 129 2240 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2244 20220000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 224c 00EE106A 	    vmov.f32 S0,TOS 
 138 2250 57F8046B 	    _POP 
 139 2254 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2258 48220000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 2260 00EE906A 	    vmov.f32 S1,TOS 
 147 2264 57F8046B 	    _POP 
 148 2268 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 226c 5C220000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 2274 01EE106A 	    vmov.f32 S2,TOS 
 156 2278 57F8046B 	    _POP 
 157 227c 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
ARM GAS  forth.s 			page 89


 163 2280 70220000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 2288 47F8046D 	    _PUSH 
 165 228c 10EE106A 	    vmov.f32 TOS,S0 
 166 2290 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 2294 84220000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 229c 47F8046D 	    _PUSH 
 174 22a0 10EE906A 	    vmov.f32 TOS,S1 
 175 22a4 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 22a8 98220000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 22b0 47F8046D 	    _PUSH 
 183 22b4 11EE106A 	    vmov.f32 TOS,S2 
 184 22b8 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 22bc AC220000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 22c4 00EE106A 	    vmov.f32 S0,TOS
 194 22c8 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 22cc 10EE106A 	    vmov.f32 TOS,s0 
 196 22d0 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 22d4 C0220000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 22e0 00EE106A 	    vmov.f32 S0,TOS 
 204 22e4 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 22e8 10EE106A 	    vmov.f32 TOS,S0 
 206 22ec 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 22f0 D8220000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
ARM GAS  forth.s 			page 90


 213 22f8 00EE106A 	    vmov.f32 S0,TOS
 214 22fc B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2300 10EE106A 	    vmov.f32 TOS,s0 
 216 2304 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2308 F4220000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2310 00EE106A 	   vmov.f32 s0,TOS 
 224 2314 57F8046B 	   _POP 
 225 2318 00EE906A 	   vmov.f32 s1,TOS 
 226 231c 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2320 10EE106A 	   vmov.f32 TOS,s0
 228 2324 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2328 0C230000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2330 00EE106A 	   vmov.f32 s0,TOS 
 237 2334 57F8046B 	   _POP 
 238 2338 00EE906A 	   vmov.f32 s1,TOS 
 239 233c 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2340 10EE106A 	   vmov.f32 TOS,s0
 241 2344 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2348 2C230000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2350 00EE106A 	   vmov.f32 s0,TOS 
 251 2354 57F8046B 	   _POP 
 252 2358 00EE906A 	   vmov.f32 s1,TOS 
 253 235c 20EE800A 	   vmul.f32 s0,s1,s0 
 254 2360 10EE106A 	   vmov.f32 TOS,s0
 255 2364 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 2368 4C230000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 2370 00EE106A 	   vmov.f32 s0,TOS 
 264 2374 57F8046B 	   _POP 
 265 2378 00EE906A 	   vmov.f32 s1,TOS 
ARM GAS  forth.s 			page 91


 266 237c 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 2380 10EE106A 	   vmov.f32 TOS,s0
 268 2384 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 2388 6C230000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 2394 00EE106A 	    vmov.f32 s0,TOS 
 277 2398 B1EE400A 	    vneg.f32 S0,S0 
 278 239c 10EE106A 	    vmov.f32 TOS,S0    
 279 23a0 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 23a4 8C230000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 23b0 80EA0000 	    eor T0,T0 
 287 23b4 6FEA0000 	    mvn T0,T0 
 288 23b8 4FEA5000 	    lsr T0,#1 
 289 23bc 06EA0006 	    and TOS,T0 
 290 23c0 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 23c4 A8230000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 23d0 00EE106A 	     vmov.f32 s0,TOS 
 299 23d4 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 23d8 10EE106A 	     vmov.f32 TOS,s0 
 301 23dc 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 23e0 C8230000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 23e8 00EE106A 	    vmov.f32 s0,TOS 
 309 23ec B5EE400A 	    vcmp.f32 s0, #0.0 
 310 23f0 F1EE106A 	    vmrs TOS,FPSCR
 311 23f4 BFF34F8F 	    dsb  
 312 23f8 4FEAE676 	    asr TOS,#31   
 313 23fc 00F05ABD 	    _NEXT 
 314              	
 315              	/*****************************
ARM GAS  forth.s 			page 92


 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2400 E4230000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2408 504700BF 	    _NEST 
 321 240c 31230000 	    _ADR FSUBB
 322 2410 E9230000 	    _ADR FZLESS
 323 2414 79350000 	    _ADR INVER     
 324 2418 BB2E0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 241c 04240000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2424 504700BF 	    _NEST 
 332 2428 31230000 	    _ADR FSUBB 
 333 242c E9230000 	    _ADR FZLESS
 334 2430 BB2E0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2434 20240000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2440 504700BF 	    _NEST 
 342 2444 A9320000 	   _ADR OVER 
 343 2448 A9320000 	   _ADR OVER 
 344 244c 09240000 	   _ADR FGREAT 
 345 2450 1F310000 	   _QBRAN 1f 
 345      5C240000 
 346 2458 79320000 	   _ADR SWAP  
 347 245c 59320000 	1: _ADR DROP 
 348 2460 BB2E0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 2464 38240000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 2470 504700BF 	    _NEST 
 355 2474 A9320000 	    _ADR OVER 
 356 2478 A9320000 	    _ADR OVER 
 357 247c 25240000 	    _ADR FLESS 
 358 2480 1F310000 	    _QBRAN 1f
 358      8C240000 
 359 2488 79320000 	    _ADR SWAP   
 360 248c 59320000 	1:  _ADR DROP 
 361 2490 BB2E0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
ARM GAS  forth.s 			page 93


 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 2494 68240000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 24a0 80EA0000 	    eor T0,T0 
 370 24a4 C8F20000 	    movt T0,#0X8000
 371 24a8 06EA0006 	    and TOS,T0
 372 24ac 4FEAE676 	    asr TOS,#31  
 373 24b0 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 24b4 98240000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 24c0 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 24c8 06EA0006 	    and TOS,T0 
 382 24cc 4FEAD656 	    lsr TOS,#23
 383 24d0 A6F17F06 	    sub TOS,#127 
 384 24d4 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 24d8 B8240000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 24e4 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 24ec 06EA0006 	    AND TOS,T0 
 393 24f0 80EA0000 	    EOR T0,T0 
 394 24f4 C0F28000 	    MOVT T0,0x80
 395 24f8 46EA0006 	    ORR TOS,T0 
 396 24fc 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 2500 DC240000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2508 47F8046D 	    _PUSH 
 405 250c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 2514 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
ARM GAS  forth.s 			page 94


 412 2518 04250000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2520 47F8046D 	    _PUSH 
 414 2524 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 252c 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2530 1C250000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 253c 47F8046D 	    _PUSH 
 423 2540 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2548 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 254c 34250000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2558 47F8046D 	    _PUSH 
 433 255c 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 2564 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 2568 50250000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 2574 504700BF 	    _NEST
 443 2578 C1240000 	    _ADR FEXP 
 444 257c F9220000 	    _ADR STOF 
 445 2580 59250000 	    _ADR LOG2
 446 2584 51230000 	    _ADR FSTAR 
 447 2588 E1220000 	    _ADR TRUNC  
 448 258c 69320000 	    _ADR DUPP 
 449 2590 D9320000 	    _ADR ZLESS 
 450 2594 1F310000 	    _QBRAN 1f 
 450      A0250000 
 451 259c D5330000 	    _ADR ONEM
 452 25a0 BB2E0000 	1:  _UNNEST 
 453 25a4 6C210000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
ARM GAS  forth.s 			page 95


   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 25b0 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 25b4 0000C842 	            .word  0x42C80000  // 100.0
  31 25b8 00401C46 	            .word  0x461C4000  // 10000.0 
  32 25bc 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 25c0 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 25c4 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 25c8 504700BF 	    _NEST 
  45 25cc DF300000 	    _DOLIT 2 
  45      02000000 
  46 25d4 59330000 	    _ADR LSHIFT 
  47 25d8 DF300000 	    _DOLIT p10p2n 
  47      B0250000 
  48 25e0 69330000 	    _ADR PLUS 
  49 25e4 75310000 	    _ADR AT 
  50 25e8 BB2E0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
ARM GAS  forth.s 			page 96


  58 25ec 504700BF 	    _NEST 
  59 25f0 DF300000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 25f8 DF300000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2600 6D3D0000 	    _ADR PICK  // idx f e 1 idx 
  62 2604 59330000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2608 E9320000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 260c BB2E0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2610 504700BF 	    _NEST 
  78 2614 E5310000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2618 D1310000 	    _ADR RAT   // idx f e R: e 
  81 261c ED250000 	    _ADR bit_state // idx f state 
  82 2620 1F310000 	    _QBRAN 1f   // bit reset 
  82      34260000 
  83 2628 A9320000 	    _ADR OVER 
  84 262c C9250000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2630 71230000 	    _ADR FSLH  // idx f R: e 
  86 2634 79320000 	1:  _ADR SWAP  // f idx R: e 
  87 2638 C5330000 	    _ADR ONEP   // F idx++ R: e 
  88 263c 79320000 	    _ADR SWAP   // idx f  
  89 2640 A9320000 	    _ADR OVER   // idx f idx 
  90 2644 DF300000 	    _DOLIT 5 
  90      05000000 
  91 264c 75360000 	    _ADR GREAT  // idx > 5
  92 2650 1F310000 	    _QBRAN div_loop 
  92      18260000 
  93 2658 A1310000 	    _ADR RFROM 
  94 265c 59320000 	    _ADR DROP 
  95 2660 BB2E0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 2664 504700BF 	    _NEST 
 109 2668 E5310000 	    _ADR TOR 
ARM GAS  forth.s 			page 97


 110              	mult_loop:
 111 266c D1310000 	    _ADR RAT   // idx f e R: e 
 112 2670 ED250000 	    _ADR bit_state // idx f state 
 113 2674 1F310000 	    _QBRAN 1f   // bit reset 
 113      88260000 
 114 267c A9320000 	    _ADR OVER  
 115 2680 C9250000 	    _ADR p10p2at // idx f pwr10 R: e
 116 2684 51230000 	    _ADR FSTAR  // idx f R: e 
 117 2688 79320000 	1:  _ADR SWAP  // f idx R: e 
 118 268c C5330000 	    _ADR ONEP   // F idx++ R: e 
 119 2690 79320000 	    _ADR SWAP   // idx f  
 120 2694 A9320000 	    _ADR OVER   // idx f idx 
 121 2698 DF300000 	    _DOLIT 5 
 121      05000000 
 122 26a0 75360000 	    _ADR GREAT  // idx > 5
 123 26a4 1F310000 	    _QBRAN mult_loop 
 123      6C260000 
 124 26ac A1310000 	    _ADR RFROM 
 125 26b0 59320000 	    _ADR DROP 
 126 26b4 BB2E0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 26b8 504700BF 	    _NEST 
 136 26bc A9320000 	    _ADR OVER  // e f e 
 137 26c0 1F310000 	    _QBRAN 3f // exp==0,  done 
 137      FC260000 
 138 26c8 DF300000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 26d0 A1340000 	    _ADR NROT // idx e f
 140 26d4 79320000 	    _ADR SWAP // idx f e   
 141 26d8 69320000 	    _ADR DUPP  // idx f e e 
 142 26dc D9320000 	    _ADR ZLESS
 143 26e0 1F310000 	    _QBRAN pos_exp 
 143      F8260000 
 144              	// negative exponent 
 145 26e8 9D350000 	    _ADR ABSS 
 146 26ec 11260000 	    _ADR mant_div 
 147 26f0 47310000 	    _BRAN 3f 
 147      FC260000 
 148              	pos_exp: // positive exponent 
 149 26f8 65260000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 26fc 79320000 	3:  _ADR SWAP 
 152 2700 59320000 	    _ADR DROP 
 153 2704 BB2E0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
ARM GAS  forth.s 			page 98


 160 2708 504700BF 	    _NEST 
 161 270c DF300000 	    _DOLIT 0 
 161      00000000 
 162 2714 69320000 	    _ADR DUPP 
 163 2718 8D320000 	    _ADR DSWAP // 0 0 a cnt 
 164 271c 91410000 	    _ADR TONBR // d a+ cnt- 
 165 2720 F9310000 	    _ADR DTOR 
 166 2724 59320000 	    _ADR DROP // drop hi word 
 167 2728 B5310000 	    _ADR DRFROM // i a+ cnt-  
 168 272c 8D340000 	    _ADR ROT  // a+ cnt- i
 169 2730 F9220000 	    _ADR STOF 
 170 2734 BB2E0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 2738 504700BF 	    _NEST 
 180 273c 69320000 	    _ADR DUPP 
 181 2740 E5310000 	    _ADR TOR 
 182 2744 DF300000 	    _DOLIT 0
 182      00000000 
 183 274c 69320000 	    _ADR DUPP
 184 2750 8D320000 	    _ADR DSWAP 
 185 2754 91410000 	    _ADR TONBR // -- d a+ cnt-  
 186 2758 8D320000 	    _ADR DSWAP  // a+ cnt- d
 187 275c 59320000 	    _ADR DROP   // a+ cnt- i 
 188 2760 F9220000 	    _ADR STOF  // convert integer to float 
 189 2764 A1310000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 2768 DF300000 	    _DOLIT 2 
 190      02000000 
 191 2770 6D3D0000 	    _ADR  PICK  
 192 2774 79330000 	    _ADR SUBB 
 193 2778 DF300000 	    _DOLIT 9 
 193      09000000 
 194 2780 A1360000 	    _ADR MIN 
 195 2784 A1210000 	    _ADR PWR10
 196 2788 71230000 	    _ADR FSLH  // a+ cnt- fdec 
 197 278c BB2E0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 2790 504700BF 	    _NEST 
 206 2794 27420000 	    _ADR NEGQ 
 207 2798 E5310000 	    _ADR TOR 
 208 279c DF300000 	    _DOLIT 0 
 208      00000000 
 209 27a4 69320000 	    _ADR DUPP 
 210 27a8 8D320000 	    _ADR DSWAP // 0 0 a cnt  
 211 27ac 91410000 	    _ADR TONBR // d a cnt   
ARM GAS  forth.s 			page 99


 212 27b0 8D320000 	    _ADR DSWAP
 213 27b4 59320000 	    _ADR DROP  // hi word 
 214 27b8 A1310000 	    _ADR RFROM 
 215 27bc 1F310000 	    _QBRAN 1f 
 215      C8270000 
 216 27c4 8D350000 	    _ADR NEGAT 
 217              	1:  
 218 27c8 BB2E0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 27cc 6C250000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 27d8 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 27dc D5370000 	    _ADR BASE 
 231 27e0 75310000 	    _ADR AT 
 232 27e4 E5310000 	    _ADR TOR 
 233              	    // use decimal base  
 234 27e8 05410000 	    _ADR DECIM 
 235 27ec DF300000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 27f4 A9320000 		_ADR	OVER   // a 0 a     R: base
 237 27f8 09370000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 27fc 27420000 	    _ADR   NEGQ
 240 2800 E5310000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 2804 69320000 	    _ADR   DUPP 
 242 2808 E5310000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 280c 09270000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 2810 A9320000 	    _ADR  OVER  
 245 2814 A1310000 	    _ADR  RFROM  
 246 2818 F5350000 	    _ADR  EQUAL
 247 281c 79320000 	    _ADR  SWAP
 248 2820 E5310000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 2824 33310000 	    _TBRAN expect_dot  
 249      5C280000 
 250              	// must be '.' or 'E'     
 251 282c DF300000 	    _DOLIT '.' 
 251      2E000000 
 252 2834 05420000 	    _ADR CHARQ
 253 2838 33310000 	    _TBRAN get_fraction  
 253      70280000 
 254 2840 DF300000 	    _DOLIT 'E'
 254      45000000 
 255 2848 05420000 	    _ADR  CHARQ 
 256 284c 33310000 	    _TBRAN get_exponent 
 256      C4280000 
 257 2854 47310000 	    _BRAN error2
 257      18290000 
 258              	expect_dot:
ARM GAS  forth.s 			page 100


 259 285c DF300000 	    _DOLIT '.' 
 259      2E000000 
 260 2864 05420000 	    _ADR CHARQ 
 261 2868 1F310000 	    _QBRAN error2
 261      18290000 
 262              	get_fraction:
 263 2870 A9320000 	    _ADR OVER 
 264 2874 95310000 	    _ADR CAT 
 265 2878 DF300000 	    _DOLIT 10
 265      0A000000 
 266 2880 29410000 	    _ADR DIGTQ 
 267 2884 79320000 	    _ADR SWAP 
 268 2888 59320000 	    _ADR DROP 
 269 288c 1F310000 	    _QBRAN error2       
 269      18290000 
 270 2894 39270000 	    _ADR decimals 
 271 2898 E5310000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 289c DF300000 	    _DOLIT 'E' 
 273      45000000 
 274 28a4 05420000 	    _ADR CHARQ
 275 28a8 33310000 	    _TBRAN get_exponent 
 275      C4280000 
 276 28b0 DF300000 	    _DOLIT fzero 
 276      00000000 
 277 28b8 E5310000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 28bc 47310000 	    _BRAN build_float
 278      D8280000 
 279              	get_exponent: 
 280 28c4 91270000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 28c8 E5310000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 28cc 69320000 	    _ADR DUPP 
 283 28d0 33310000 	    _TBRAN error4   // count must be 0 
 283      38290000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 28d8 B5340000 	    _ADR DDROP 
 286 28dc B5340000 	    _ADR DDROP 
 287 28e0 A1310000 	    _ADR RFROM 
 288 28e4 B5310000 	    _ADR DRFROM 
 289 28e8 11230000 	    _ADR FPLUS 
 290 28ec B9260000 	    _ADR exp_adjust
 291 28f0 A1310000 	    _ADR RFROM 
 292 28f4 1F310000 	    _QBRAN 1f 
 292      08290000 
 293 28fc DF300000 	    _DOLIT fminus1
 293      000080BF 
 294 2904 51230000 	    _ADR FSTAR 
 295 2908 DF300000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 2910 47310000 	    _BRAN restore_base  
 296      4C290000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 2918 B5340000 	    _ADR DDROP  
 299 291c 47310000 	    _BRAN e4  
 299      44290000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 2924 B5340000 	    _ADR DDROP  // a 0 a R: base sign
ARM GAS  forth.s 			page 101


 302 2928 A1310000 	    _ADR RFROM 
 303 292c 59320000 	    _ADR DROP 
 304 2930 47310000 	    _BRAN e4  
 304      44290000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 2938 B5340000 	    _ADR DDROP 
 307 293c B5310000 	    _ADR DRFROM 
 308 2940 B5340000 	    _ADR DDROP 
 309 2944 B5310000 	e4: _ADR DRFROM 
 310 2948 B5340000 	    _ADR DDROP 
 311              	restore_base: 
 312 294c A1310000 	    _ADR RFROM 
 313 2950 D5370000 	    _ADR BASE 
 314 2954 61310000 	    _ADR STORE 
 315 2958 BB2E0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 295c 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 2960 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2964 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2968 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 296c 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 2970 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2974 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2978 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 297c 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
ARM GAS  forth.s 			page 102


  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 2980 D0270000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 298c 504700BF 	    _NEST
  50 2990 DF300000 	    _DOLIT 1  
  50      01000000 
  51 2998 8D360000 	    _ADR MAX  
  52 299c DF300000 	    _DOLIT 8
  52      08000000 
  53 29a4 A1360000 	    _ADR MIN 
  54 29a8 DF300000 	    _DOLIT 2 
  54      02000000 
  55 29b0 59330000 	    _ADR LSHIFT 
  56 29b4 DF300000 	    _DOLIT rounding 
  56      5C290000 
  57 29bc 69330000 	    _ADR PLUS 
  58 29c0 75310000 	    _ADR AT   
  59 29c4 11230000 	    _ADR FPLUS 
  60 29c8 BB2E0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 29cc 84290000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 29d4 57F8040B 	    ldr T0,[DSP],#4
  69 29d8 3070     	    strb T0,[TOS]  
  70 29da 06F10106 	    add TOS,#1
  71 29de 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 29e0 504700BF 	    _NEST 
  81 29e4 E5310000 	    _ADR TOR  // >R ( i r: b )
  82 29e8 E13A0000 	    _ADR STOD // ( dbl r: b )
  83 29ec 69320000 	    _ADR DUPP // ( dbl i r: b )
  84 29f0 E5310000 	    _ADR TOR  // ( dbl r: b sign )
  85 29f4 11350000 	    _ADR DABS 
  86 29f8 A53F0000 	    _ADR BDIGS 
  87 29fc 11400000 	    _ADR DIGS 
  88 2a00 A1310000 	    _ADR RFROM 
  89 2a04 45400000 	    _ADR SIGN 
  90 2a08 6D400000 	    _ADR EDIGS // ( -- p u )
  91 2a0c 69320000 	    _ADR DUPP  
ARM GAS  forth.s 			page 103


  92 2a10 A1340000 	    _ADR NROT // -rot ( -- u p u )
  93 2a14 D1310000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2a18 79320000 	    _ADR SWAP // ( -- u p b u )
  95 2a1c 4D3E0000 	    _ADR CMOVE // ( -- u ) 
  96 2a20 69320000 	    _ADR DUPP  // ( -- u u )
  97 2a24 A1310000 	    _ADR RFROM // ( -- u u b )
  98 2a28 69330000 	    _ADR PLUS  // ( -- u b+ )
  99 2a2c 79320000 	    _ADR SWAP  // ( -- b+ u )
 100 2a30 BB2E0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2a34 D0290000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2a40 504700BF 	    _NEST 
 116 2a44 A1210000 	    _ADR PWR10 
 117 2a48 E5310000 	    _ADR TOR  // f2 r: f1 
 118 2a4c DF300000 	    _DOLIT 0   // m 
 118      00000000 
 119 2a54 79320000 	    _ADR SWAP  // m f2 
 120 2a58 69320000 	1:  _ADR DUPP 
 121 2a5c D1310000 	    _ADR RAT 
 122 2a60 25240000 	    _ADR FLESS
 123 2a64 1F310000 	    _QBRAN 2f
 123      8C2A0000 
 124 2a6c DF300000 	    _DOLIT ten 
 124      00002041 
 125 2a74 51230000 	    _ADR FSTAR
 126              	    // decrement m   
 127 2a78 79320000 	    _ADR SWAP
 128 2a7c D5330000 	    _ADR ONEM 
 129 2a80 79320000 	    _ADR SWAP 
 130 2a84 47310000 	    _BRAN 1b
 130      582A0000 
 131 2a8c A1310000 	2:  _ADR RFROM 
 132 2a90 59320000 	    _ADR DROP 
 133 2a94 79320000 	    _ADR SWAP 
 134 2a98 BB2E0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
ARM GAS  forth.s 			page 104


 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 2a9c 382A0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 2aac 504700BF 	    _NEST 
 150 2ab0 A1210000 	    _ADR PWR10
 151 2ab4 E5310000 	    _ADR TOR
 152 2ab8 DF300000 	    _DOLIT 0 
 152      00000000 
 153 2ac0 79320000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2ac4 D1310000 	1:  _ADR RAT   
 155 2ac8 A9320000 	    _ADR OVER 
 156 2acc 09240000 	    _ADR FGREAT 
 157 2ad0 33310000 	    _TBRAN 2f 
 157      F82A0000 
 158 2ad8 DF300000 	    _DOLIT ten 
 158      00002041 
 159 2ae0 71230000 	    _ADR FSLH 
 160              	    // increment m 
 161 2ae4 79320000 	    _ADR SWAP 
 162 2ae8 C5330000 	    _ADR ONEP 
 163 2aec 79320000 	    _ADR SWAP 
 164 2af0 47310000 	    _BRAN 1b   
 164      C42A0000 
 165 2af8 A1310000 	2:  _ADR RFROM 
 166 2afc 59320000 	    _ADR DROP
 167 2b00 79320000 	    _ADR SWAP 
 168 2b04 BB2E0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 2b08 504700BF 	    _NEST
 183 2b0c 79320000 	    _ADR SWAP
 184 2b10 79340000 	    _ADR QDUP    
 185 2b14 1F310000 	    _QBRAN 2f 
 185      382B0000 
 186 2b1c 79320000 	    _ADR SWAP 
 187 2b20 DF300000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2b28 79320000 	    _ADR SWAP  
 189 2b2c D5290000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2b30 E1290000 	    _ADR ITOA // ( i b -- b u )
ARM GAS  forth.s 			page 105


 191 2b34 59320000 	    _ADR DROP // ( -- b+ )     
 192 2b38 BB2E0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 2b3c 504700BF 	    _NEST
 208 2b40 DF300000 	    _DOLIT 2 
 208      02000000 
 209 2b48 6D3D0000 	    _ADR PICK 
 210 2b4c D9320000 	    _ADR ZLESS 
 211 2b50 1F310000 	    _QBRAN 1f 
 211      682B0000 
 212 2b58 E5310000 	    _ADR TOR 
 213 2b5c 59320000 	    _ADR DROP 
 214 2b60 47310000 	    _BRAN 2f 
 214      D42B0000 
 215 2b68 DF300000 	1:   _DOLIT '.' 
 215      2E000000 
 216 2b70 79320000 	    _ADR SWAP 
 217 2b74 D5290000 	    _ADR CSTOP 
 218 2b78 E5310000 	    _ADR TOR // >r ( d f r: b ) 
 219 2b7c 79320000 	1:  _ADR SWAP  
 220 2b80 79340000 	    _ADR QDUP 
 221 2b84 1F310000 	    _QBRAN 2f
 221      D42B0000 
 222 2b8c D5330000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 2b90 79320000 	    _ADR SWAP // swap ( -- d f r: b )
 224 2b94 DF300000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 2b9c 51230000 	    _ADR FSTAR // f*
 226 2ba0 69320000 	    _ADR DUPP  
 227 2ba4 E1220000 	    _ADR TRUNC // d f i
 228 2ba8 69320000 	    _ADR DUPP  // d f i i  
 229 2bac DF300000 	    _DOLIT '0' 
 229      30000000 
 230 2bb4 69330000 	    _ADR PLUS 
 231 2bb8 A1310000 	    _ADR RFROM // R> ( d f c b )
 232 2bbc D5290000 	    _ADR CSTOP // ( d f i b+ )
 233 2bc0 E5310000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2bc4 F9220000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2bc8 31230000 	    _ADR FSUBB 
 236 2bcc 47310000 	    _BRAN 1b 
 236      7C2B0000 
 237 2bd4 59320000 	2:  _ADR DROP 
 238 2bd8 A1310000 	    _ADR RFROM 
 239 2bdc BB2E0000 	    _UNNEST 
ARM GAS  forth.s 			page 106


 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2be0 504700BF 	    _NEST 
 257 2be4 E5310000 	    _ADR TOR // ( -- d f r: b )
 258 2be8 69320000 	    _ADR DUPP 
 259 2bec DF300000 	    _DOLIT fone 
 259      0000803F 
 260 2bf4 25240000 	    _ADR FLESS 
 261 2bf8 1F310000 	    _QBRAN 1f
 261      582C0000 
 262 2c00 DF300000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2c08 412A0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2c0c A1340000 	    _ADR NROT
 265 2c10 A9320000 	    _ADR OVER 
 266 2c14 8D290000 	    _ADR ROUND
 267 2c18 69320000 	    _ADR DUPP 
 268 2c1c DF300000 	    _DOLIT fone 
 268      0000803F 
 269 2c24 25240000 	    _ADR FLESS 
 270 2c28 1F310000 	    _QBRAN 2f 
 270      642C0000 
 271              	    // first digit '0' 
 272 2c30 DF300000 	    _DOLIT '0' 
 272      30000000 
 273 2c38 A1310000 	    _ADR RFROM 
 274 2c3c D5290000 	    _ADR CSTOP 
 275 2c40 E5310000 	    _ADR TOR 
 276              	    // decrement d 
 277 2c44 79320000 	    _ADR SWAP 
 278 2c48 D5330000 	    _ADR ONEM 
 279 2c4c 79320000 	    _ADR SWAP 
 280 2c50 A1310000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2c54 BB2E0000 	    _UNNEST 
 282 2c58 A9320000 	1:  _ADR OVER 
 283 2c5c AD2A0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2c60 A1340000 	    _ADR NROT   // m d f r: b 
 285 2c64 69320000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2c68 E1220000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2c6c 69320000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2c70 E5310000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2c74 F9220000 	    _ADR STOF  // ( -- m d f f )
 290 2c78 31230000 	    _ADR FSUBB // ( -- m d f r: b i )
ARM GAS  forth.s 			page 107


 291 2c7c A1310000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2c80 A1310000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2c84 E1290000 	    _ADR ITOA // -- m d f b u )
 294 2c88 E5310000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2c8c 8D340000 	    _ADR ROT
 296 2c90 A1310000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2c94 79330000 	    _ADR SUBB // ( -- m f b d- )
 298 2c98 A1340000 	    _ADR NROT // ( -- m d f b )
 299 2c9c BB2E0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ca0 A02A0000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ca8 504700BF 	    _NEST 
 315 2cac A9320000 	    _ADR OVER  
 316 2cb0 C1240000 	    _ADR FEXP 
 317 2cb4 DF300000 	    _DOLIT 128 
 317      80000000 
 318 2cbc F5350000 	    _ADR EQUAL 
 319 2cc0 1F310000 	    _QBRAN 1f
 319      D02C0000 
 320 2cc8 47310000 	    _BRAN nan 
 320      8C2D0000 
 321 2cd0 69320000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2cd4 E5310000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2cd8 25340000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2cdc 79320000 	    _ADR SWAP 
 326 2ce0 D5290000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2ce4 A9320000 	    _ADR OVER 
 328 2ce8 1F310000 	    _QBRAN zdz // 0.0 
 328      3C2D0000 
 329              	    // check float sign 
 330 2cf0 A9320000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2cf4 A1240000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 2cf8 1F310000 	    _QBRAN 1f  // 0branch 1f 
 332      1C2D0000 
 333              	    // negative number add '-' to buffer 
 334 2d00 79320000 	    _ADR SWAP 
 335 2d04 B1230000 	    _ADR FABS 
 336 2d08 79320000 	    _ADR SWAP 
 337 2d0c DF300000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2d14 79320000 	    _ADR SWAP 
 339 2d18 D5290000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2d1c E12B0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
ARM GAS  forth.s 			page 108


 341 2d20 3D2B0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2d24 092B0000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2d28 D1310000 	    _ADR RAT 
 344 2d2c 79330000 	    _ADR SUBB 
 345 2d30 A1310000 	    _ADR RFROM 
 346 2d34 79320000 	    _ADR SWAP 
 347 2d38 BB2E0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2d3c E5310000 	     _ADR TOR 
 350 2d40 B5340000 	     _ADR DDROP
 351 2d44 A1310000 	     _ADR RFROM
 352 2d48 DF300000 	     _DOLIT '0'
 352      30000000 
 353 2d50 79320000 	     _ADR SWAP 
 354 2d54 D5290000 	     _ADR CSTOP 
 355 2d58 DF300000 	     _DOLIT '.'
 355      2E000000 
 356 2d60 79320000 	     _ADR SWAP 
 357 2d64 D5290000 	     _ADR CSTOP 
 358 2d68 DF300000 	     _DOLIT '0'
 358      30000000 
 359 2d70 79320000 	     _ADR SWAP 
 360 2d74 D5290000 	     _ADR CSTOP 
 361 2d78 59320000 	     _ADR DROP  
 362 2d7c A1310000 	     _ADR RFROM 
 363 2d80 DF300000 	     _DOLIT 4 
 363      04000000 
 364 2d88 BB2E0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2d8c E5310000 	    _ADR TOR   // ( d f r: b )
 367 2d90 79320000 	    _ADR SWAP  // f d  
 368 2d94 59320000 	    _ADR DROP  // f 
 369 2d98 25340000 	    _ADR BLANK  // f c 
 370 2d9c D1310000 	    _ADR RAT    // f c b 
 371 2da0 D5290000 	    _ADR CSTOP  // f b+ 
 372 2da4 79320000 	    _ADR SWAP   // b+ f 
 373 2da8 E5240000 	    _ADR FMANT  // b+ mant
 374 2dac DF300000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2db4 E9320000 	    _ADR ANDD   
 376 2db8 1F310000 	    _QBRAN infinity 
 376      F82D0000 
 377 2dc0 DF300000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2dc8 79320000 	    _ADR SWAP   // c b+
 379 2dcc D5290000 	    _ADR CSTOP  // b+
 380 2dd0 DF300000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2dd8 79320000 	    _ADR SWAP   // c b+ 
 382 2ddc D5290000 	    _ADR CSTOP  // b+
 383 2de0 DF300000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2de8 79320000 	    _ADR SWAP   // c b+ 
 385 2dec D5290000 	    _ADR CSTOP  // b+
 386 2df0 47310000 	    _BRAN 1f 
 386      282E0000 
 387              	infinity:
ARM GAS  forth.s 			page 109


 388 2df8 DF300000 	    _DOLIT 'I'
 388      49000000 
 389 2e00 79320000 	    _ADR SWAP 
 390 2e04 D5290000 	    _ADR CSTOP 
 391 2e08 DF300000 	    _DOLIT 'N'
 391      4E000000 
 392 2e10 79320000 	    _ADR SWAP 
 393 2e14 D5290000 	    _ADR CSTOP 
 394 2e18 DF300000 	    _DOLIT 'F'
 394      46000000 
 395 2e20 79320000 	    _ADR SWAP 
 396 2e24 D5290000 	    _ADR CSTOP 
 397              	1:
 398 2e28 59320000 	    _ADR DROP 
 399 2e2c A1310000 	    _ADR RFROM 
 400 2e30 DF300000 	    _DOLIT 4 
 400      04000000 
 401 2e38 BB2E0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2e3c A42C0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2e44 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2e48 DF300000 	    _DOLIT 1 
 415      01000000 
 416 2e50 8D360000 	    _ADR MAX 
 417 2e54 DF300000 	    _DOLIT 7 
 417      07000000 
 418 2e5c A1360000 	    _ADR MIN
 419 2e60 79320000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2e64 A13D0000 	    _ADR HERE
 422 2e68 E5310000 	    _ADR TOR  
 423 2e6c DF300000 	    _DOLIT 16 
 423      10000000 
 424 2e74 A9500000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 2e78 D1310000 	    _ADR RAT 
 427 2e7c DF300000 	    _DOLIT 16 
 427      10000000 
 428 2e84 DF300000 	    _DOLIT 0 
 428      00000000 
 429 2e8c C53E0000 	    _ADR FILL 
 430 2e90 A1310000 	    _ADR RFROM // ( d f b )
 431 2e94 A92C0000 	    _ADR FTOA 
 432 2e98 B1430000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2e9c DF300000 	    _DOLIT -16 
ARM GAS  forth.s 			page 110


 434      F0FFFFFF 
 435 2ea4 A9500000 	    _ADR ALLOT
 436 2ea8 BB2E0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
ARM GAS  forth.s 			page 111


  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2eac 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2eb0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2eb4 5CF8045B 		LDR WP,[IP],#4 
  89 2eb8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2eba 58F804CB 		LDMFD RSP!,{IP}
  92 2ebe 5CF8045B 		LDR WP,[IP],#4 
  93 2ec2 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2ec4 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2ec8 0968     		ldr T1,[T1]     // address in here   
 107 2eca 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
ARM GAS  forth.s 			page 112


 108 2ece 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2ed2 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2ed6 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2eda 04F14C02 		add T2,UP,#USER_CTOP 
 112 2ede 1160     		str T1,[T2]  // save update HERE value 
 113 2ee0 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2ee2 47F8046D 		_PUSH 
 119 2ee6 04F11406 		ADD TOS,UP,#STDIN 
 120 2eea E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2eec 47F8046D 		_PUSH 
 126 2ef0 04F11806 		ADD TOS,UP,#STDOUT
 127 2ef4 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2ef6 402E0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2f00 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2f08 47F8046D 	    _PUSH 
 136 2f0c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2f0e 81EA0101 	    eor T1,T1 
 138 2f12 8162     	    str T1,[T0,#SCB_CFSR]
 139 2f14 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2f16 FA2E0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2f20 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2f28 47F8046D 		_PUSH 
 148 2f2c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2f2e 81EA0101 	    eor T1,T1 
 150 2f32 8163     	    str T1,[T0,#SCB_BFAR]
 151 2f34 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2f36 1A2F0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
ARM GAS  forth.s 			page 113


 157      3F00
 158 2f40 504700BF 		_NEST 
 159 2f44 E32E0000 		_ADR TSTDIN // ' STDIN 
 160 2f48 2D3E0000 		_ADR ATEXE
 161 2f4c BB2E0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2f50 3A2F0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2f58 504700BF 		_NEST
 169              	KEY1:
 170 2f5c C51C0000 		_ADR CAPS_LED 
 171 2f60 412F0000 		_ADR	QKEY 
 172 2f64 1F310000 		_QBRAN	KEY1
 172      5C2F0000 
 173 2f6c BB2E0000 		_UNNEST
 174              	
 175              	/**********************************************
 176              		EMIT ( c -- )
 177              		transmit a character to console 
 178              	**********************************************/
 179 2f70 542F0000 		_HEADER EMIT,4,"EMIT"
 179      04454D49 
 179      540000BF 
 180 2f7c 504700BF 		_NEST 
 181 2f80 ED2E0000 		_ADR TSTDOUT 
 182 2f84 2D3E0000 		_ADR ATEXE 
 183 2f88 BB2E0000 		_UNNEST 
 184              	
 185              	
 186              	/************************************************
 187              	 GET-IP ( n - c )
 188              	 return interrupt priority of IRQn 
 189              	************************************************/
 190              	/*
 191              		_HEADER GETIP,6,"GET-IP" 
 192              		_NEST 
 193              		_ADR DUPP 
 194              		_ADR ZLESS
 195              		_QBRAN 1f 
 196              		_DOLIT 15
 197              		_ADR ANDD
 198              		_DOLIT 4
 199              		_ADR SUBB  
 200              		_DOLIT 0xE000ED18 
 201              		_BRAN 2f 
 202              	1:	_DOLIT 0xE000E400 
 203              	2:	_ADR PLUS 
 204              		_ADR CAT
 205              		_DOLIT 4 
 206              		_ADR RSHIFT 
 207              		_UNNEST 
 208              	*/
 209              	
ARM GAS  forth.s 			page 114


 210              	/***********************************************
 211              	 RANDOM ( n+ -- {0..n+ - 1} )
 212              	 return pseudo random number 
 213              	 REF: https://en.wikipedia.org/wiki/Xorshift
 214              	************************************************/
 215 2f8c 742F0000 		_HEADER RAND,6,"RANDOM"
 215      0652414E 
 215      444F4D00 
 216 2f98 504700BF 		_NEST
 217 2f9c 9D350000 		_ADR ABSS   
 218 2fa0 75370000 		_ADR SEED 
 219 2fa4 75310000 		_ADR AT 
 220 2fa8 69320000 		_ADR DUPP 
 221 2fac DF300000 		_DOLIT 13
 221      0D000000 
 222 2fb4 59330000 		_ADR LSHIFT 
 223 2fb8 11330000 		_ADR XORR  
 224 2fbc 69320000 		_ADR DUPP 
 225 2fc0 DF300000 		_DOLIT 17 
 225      11000000 
 226 2fc8 41330000 		_ADR RSHIFT 
 227 2fcc 11330000 		_ADR XORR 
 228 2fd0 69320000 		_ADR DUPP
 229 2fd4 DF300000 		_DOLIT 5 
 229      05000000 
 230 2fdc 59330000 		_ADR LSHIFT 
 231 2fe0 11330000 		_ADR XORR  
 232 2fe4 69320000 		_ADR DUPP 
 233 2fe8 75370000 		_ADR SEED 
 234 2fec 61310000 		_ADR STORE 
 235 2ff0 DF300000 		_DOLIT 0x7FFFFFFF
 235      FFFFFF7F 
 236 2ff8 E9320000 		_ADR ANDD 
 237 2ffc 79320000 		_ADR SWAP 
 238 3000 293C0000 		_ADR MODD 
 239 3004 BB2E0000 		_UNNEST 
 240              	
 241              	
 242              	/****************************************
 243              	 PAUSE ( u -- ) 
 244              	 suspend execution for u milliseconds
 245              	****************************************/
 246 3008 902F0000 		_HEADER PAUSE,5,"PAUSE"
 246      05504155 
 246      534500BF 
 247 3014 504700BF 		_NEST 
 248 3018 A5370000 		_ADR TIMER 
 249 301c 61310000 		_ADR STORE 
 250              	PAUSE_LOOP:
 251 3020 A5370000 		_ADR TIMER 
 252 3024 75310000 		_ADR AT 
 253 3028 1F310000 		_QBRAN PAUSE_EXIT 
 253      38300000 
 254 3030 47310000 		_BRAN PAUSE_LOOP 
 254      20300000 
 255              	PAUSE_EXIT: 		
 256 3038 BB2E0000 		_UNNEST 
ARM GAS  forth.s 			page 115


 257              	
 258              	/******************************************
 259              	  ULED ( T|F -- )
 260              	  control user LED, -1 ON, 0 OFF 
 261              	*******************************************/
 262 303c 0C300000 		_HEADER ULED,4,"ULED"
 262      04554C45 
 262      440000BF 
 263 3048 4FF40050 		mov T0,#(1<<LED_PIN)
 264 304c 4FF40061 		_MOV32 T1,LED_GPIO 
 264      C4F20201 
 265 3054 3600     		movs TOS,TOS 
 266 3056 57F8046B 		_POP
 267 305a 03D0     		beq ULED_OFF
 268 305c 4FEA0040 		lsl T0,#16 
 269 3060 8861     		str T0,[T1,#GPIO_BSRR]
 270 3062 27E7     		_NEXT 
 271              	ULED_OFF:
 272 3064 8861     		str T0,[T1,#GPIO_BSRR]
 273 3066 25E7     		_NEXT    
 274              	
 275              	/**************************
 276              	   JOYSTK  ( -- u )
 277              	   read joystick port 
 278              	**************************/
 279 3068 40300000 		_HEADER JOYSTK,6,"JOYSTK"
 279      064A4F59 
 279      53544B00 
 280 3074 504700BF 		_NEST 
 281 3078 DF300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 281      10000240 
 282 3080 75310000 		_ADR AT 
 283 3084 DF300000 		_DOLIT 0x100f 
 283      0F100000 
 284 308c E9320000 		_ADR ANDD 
 285 3090 BB2E0000 		_UNNEST 
 286              	
 287              	/****************************
 288              		BEEP ( msec freq -- )
 289              	input:
 290              		freq  frequence hertz 
 291              		msec  durration in msec 
 292              	*****************************/
 293 3094 6C300000 		_HEADER BEEP,4,"BEEP"
 293      04424545 
 293      500000BF 
 294 30a0 48F68050 		_MOV32 r0,6000000 // Fclk 
 294      C0F25B00 
 295 30a8 B0FBF6F0 		udiv r0,r0,TOS
 296 30ac 57F8046B 		_POP  
 297 30b0 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 297      C4F20001 
 298 30b8 C862     		str r0,[r1,#TIM_ARR]
 299 30ba 4FEA5000 		lsr r0,#1
 300 30be 4863     		str r0,[r1,#TIM_CCR1]
 301 30c0 4FF00100 		mov r0,#1 
 302 30c4 0862     		str r0,[r1,#TIM_CCER]
ARM GAS  forth.s 			page 116


 303 30c6 0860     		str r0,[r1,#TIM_CR1]
 304 30c8 C868     		ldr r0,[r1,#TIM_DIER]
 305 30ca C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 306 30ce 57F8046B 		_POP
 307 30d2 EFE6     		_NEXT 
 308              	
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 30d4 98300000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 30dc EAE6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 30de 47F8046D 		_PUSH				//  store TOS on data stack
 328 30e2 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 30e6 E5E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 30e8 D8300000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 30f4 46F00105 		ORR	WP,TOS,#1 
 337 30f8 57F8046B 		_POP
 338 30fc 2847     		BX WP 
 339 30fe D9E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 3100 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 3104 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 3106 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 310a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 310e D1E6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
ARM GAS  forth.s 			page 117


 357 3110 A2F10102 		SUB	T2,T2,#1
 358 3114 C8F80020 		STR	T2,[RSP]
 359 3118 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 360 311c CAE6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 311e 3600     		MOVS	TOS,TOS
 369 3120 57F8046B 		_POP
 370 3124 02D1     		BNE	QBRAN1
 371 3126 DCF800C0 		LDR	IP,[IP]
 372 312a C3E6     		_NEXT
 373              	QBRAN1:
 374 312c 0CF1040C 	 	ADD	IP,IP,#4
 375 3130 C0E6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 3132 3600     		MOVS TOS,TOS 
 383 3134 57F8046B 		_POP 
 384 3138 02D0     		BEQ 1f 
 385 313a DCF800C0 		LDR IP,[IP]
 386 313e B9E6     		_NEXT 
 387 3140 0CF1040C 	1:  ADD IP,IP,#4
 388 3144 B6E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 3146 DCF800C0 		LDR	IP,[IP]
 398 314a B3E6     		_NEXT
 399              	
 400              	/******************************************
 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
 403              	******************************************/
 404 314c EC300000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 3158 AFE6     		b UNNEST 
 406              	
 407              	
 408              	/***********************************
 409              	    !	   ( w a -- )
 410              	 	Pop the data stack to memory.
 411              	************************************/
ARM GAS  forth.s 			page 118


 412 315a 50310000 		_HEADER STORE,1,"!"
 412      0121
 413 3160 57F8045B 		LDR	WP,[DSP],#4
 414 3164 3560     		STR	WP,[TOS]
 415 3166 57F8046B 		_POP
 416 316a A3E6     		_NEXT 
 417              	
 418              	/********************************************
 419              	    @	   ( a -- w )
 420              	 	Push memory location to the data stack.
 421              	*********************************************/
 422 316c 5E310000 		_HEADER AT,1,"@"
 422      014000BF 
 423 3174 3668     		LDR	TOS,[TOS]
 424 3176 9DE6     		_NEXT 
 425              	
 426              	/*******************************************
 427              	    C!	  ( c b -- )
 428              	 	Pop the data stack to byte memory.
 429              	*******************************************/
 430 3178 70310000 		_HEADER CSTOR,2,"C!"
 430      02432100 
 431 3180 57F8045B 		LDR	WP,[DSP],#4
 432 3184 3570     		STRB WP,[TOS]
 433 3186 57F8046B 		_POP
 434 318a 93E6     		_NEXT
 435              	
 436              	/*********************************************
 437              	    C@	  ( b -- c )
 438              	 	Push byte memory location to the data stack.
 439              	**********************************************/
 440 318c 7C310000 		_HEADER CAT,2,"C@"
 440      02434000 
 441 3194 3678     		LDRB	TOS,[TOS]
 442 3196 8DE6     		_NEXT 
 443              	
 444              	
 445              	/*********************************************
 446              	    R>	  ( -- w  R: w -- ) 
 447              	 	push from rstack.
 448              	**********************************************/
 449 3198 90310000 		_HEADER RFROM,2,"R>"
 449      02523E00 
 450 31a0 47F8046D 		_PUSH
 451 31a4 58F8046B 		LDR	TOS,[RSP],#4
 452 31a8 84E6     		_NEXT 
 453              	
 454              	/***********************************************
 455              		2R> (  -- D ) R: D --  
 456              	    push a double from rstack 
 457              	***********************************************/
 458 31aa 9C310000 		_HEADER DRFROM,3,"2R>"
 458      0332523E 
 458      00BF
 459 31b4 47F8046D 		_PUSH 
 460 31b8 58F8046B 		LDR TOS,[RSP],#4 
 461 31bc 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 119


 462 31c0 58F8046B 		LDR TOS,[RSP],#4
 463 31c4 76E6     		_NEXT 
 464              	
 465              	/************************************************
 466              	    R@	  ( -- w )
 467              	 	Copy top of return stack to the data stack.
 468              	************************************************/
 469 31c6 AE310000 		_HEADER RAT,2,"R@"
 469      02524000 
 469      00BF
 470 31d0 47F8046D 		_PUSH
 471 31d4 D8F80060 		LDR	TOS,[RSP]
 472 31d8 6CE6     		_NEXT 
 473              	
 474              	/***********************************************
 475              	    >R	  ( w -- ) R: -- w 
 476              	 	pop to rstack.
 477              	************************************************/
 478 31da CA310000 		_HEADER TOR,2,">R"
 478      023E5200 
 478      00BF
 479 31e4 48F8046D 		STR	TOS,[RSP,#-4]!
 480 31e8 57F8046B 		_POP
 481 31ec 62E6     		_NEXT
 482              	
 483              	/*********************************************
 484              		2>R ( d -- ) R: -- d 
 485              		pop a double to rstack 
 486              	*********************************************/
 487 31ee DE310000 		_HEADER DTOR,3,"2>R"
 487      03323E52 
 487      00BF
 488 31f8 48F8046D 		STR TOS,[RSP,#-4]!
 489 31fc 57F8046B 	    _POP 
 490 3200 48F8046D 		STR TOS,[RSP,#-4]!
 491 3204 57F8046B 		_POP  
 492 3208 54E6     		_NEXT 	
 493              	
 494              	
 495              	/*******************************
 496              	//	RP! ( u -- )
 497              	// initialize RPP with u 
 498              	*******************************/
 499 320a F2310000 		_HEADER RPSTOR,3,"RP!"
 499      03525021 
 499      00BF
 500 3214 B046     		MOV RSP,TOS 
 501 3216 57F8046B 		_POP  
 502 321a 4BE6     		_NEXT 
 503              	
 504              	/********************************
 505              		SP! ( u -- )
 506              	 initialize SPP with u 
 507              	********************************/
 508 321c 0E320000 		_HEADER SPSTOR,3,"SP!"
 508      03535021 
 509 3224 3746     		MOV DSP,TOS 
ARM GAS  forth.s 			page 120


 510 3226 86EA0606 		EOR TOS,TOS,TOS 
 511 322a 43E6     		_NEXT 
 512              	
 513              	/**************************************
 514              	    SP@	 ( -- a )
 515              	 	Push the current data stack pointer.
 516              	***************************************/
 517 322c 20320000 		_HEADER SPAT,3,"SP@"
 517      03535040 
 518 3234 47F8046D 		_PUSH
 519 3238 3E46     		MOV	TOS,DSP
 520 323a 3BE6     		_NEXT
 521              	
 522              	/**************************************
 523              	   RP@ ( -- a )
 524              	   push current rstack pointer 
 525              	**************************************/
 526 323c 30320000 		_HEADER RPAT,3,"RP@"
 526      03525040 
 527 3244 47F8046D 		_PUSH 
 528 3248 4646     		MOV TOS,RSP 
 529 324a 33E6     		_NEXT 
 530              	
 531              	/********************************
 532              	    DROP	( w -- )
 533              	 	Discard top stack item.
 534              	********************************/
 535 324c 40320000 		_HEADER DROP,4,"DROP"
 535      0444524F 
 535      500000BF 
 536 3258 57F8046B 		_POP
 537 325c 2AE6     		_NEXT 
 538              	
 539              	/*********************************
 540              	    DUP	 ( w -- w w )
 541              	 	Duplicate the top stack item.
 542              	*********************************/
 543 325e 50320000 		_HEADER DUPP,3,"DUP"
 543      03445550 
 543      00BF
 544 3268 47F8046D 		_PUSH
 545 326c 22E6     		_NEXT 
 546              	
 547              	/**********************************
 548              	    SWAP	( w1 w2 -- w2 w1 )
 549              	 	Exchange top two stack items.
 550              	**********************************/
 551 326e 62320000 		_HEADER SWAP,4,"SWAP"
 551      04535741 
 551      5000
 552 3278 3D68     		LDR	WP,[DSP]
 553 327a 3E60     		STR	TOS,[DSP]
 554 327c 2E46     		MOV	TOS,WP
 555 327e 19E6     		_NEXT 
 556              	
 557              	/***********************************
 558              		2SWAP ( d2 d1 -- d1 d2 )
ARM GAS  forth.s 			page 121


 559              		swap double integer 
 560              	***************************************/
 561 3280 72320000 		_HEADER DSWAP,5,"2SWAP"
 561      05325357 
 561      415000BF 
 562 328c 3046     		mov T0,TOS 
 563 328e 3968     		ldr T1,[DSP]
 564 3290 7E68     		ldr TOS,[DSP,#4]
 565 3292 BD68     		ldr WP,[DSP,#8]
 566 3294 3D60     		str WP,[DSP]
 567 3296 7860     		str T0,[DSP,#4]
 568 3298 B960     		str T1,[DSP,#8]
 569 329a 0BE6     		_NEXT 
 570              	
 571              	
 572              	/***********************************
 573              	    OVER	( w1 w2 -- w1 w2 w1 )
 574              	 	Copy second stack item to top.
 575              	***********************************/
 576 329c 84320000 		_HEADER OVER,4,"OVER"
 576      044F5645 
 576      520000BF 
 577 32a8 47F8046D 		_PUSH
 578 32ac 7E68     		LDR	TOS,[DSP,#4]
 579 32ae 01E6     		_NEXT 
 580              	
 581              	/***********************************
 582              		2OVER ( d2 d1 -- d2 d1 d2 )
 583              		copy a double integer to TOS 
 584              	**********************************************/
 585 32b0 A0320000 		_HEADER DOVER,5,"2OVER"
 585      05324F56 
 585      455200BF 
 586 32bc 7868     		ldr T0,[DSP,#4]
 587 32be BD68     		ldr WP,[DSP,#8]
 588 32c0 47F8046D 		_PUSH 
 589 32c4 2E46     		mov TOS,WP 
 590 32c6 47F8046D 		_PUSH
 591 32ca 0646     		mov TOS,T0 
 592 32cc F2E5     		_NEXT 
 593              	
 594              	
 595              	/***********************************
 596              	    0<	  ( n -- t )
 597              	 	Return true if n is negative.
 598              	***********************************/
 599 32ce B4320000 		_HEADER ZLESS,2,"0<"
 599      02303C00 
 599      00BF
 600 32d8 4FEAE676 		ASR TOS,#31
 601 32dc EAE5     		_NEXT 
 602              	
 603              	/********************************
 604              	    AND	 ( w w -- w )
 605              	 	Bitwise AND.
 606              	********************************/
 607 32de D2320000 		_HEADER ANDD,3,"AND"
ARM GAS  forth.s 			page 122


 607      03414E44 
 607      00BF
 608 32e8 57F8045B 		LDR	WP,[DSP],#4
 609 32ec 06EA0506 		AND	TOS,TOS,WP
 610 32f0 E0E5     		_NEXT 
 611              	
 612              	/******************************
 613              	    OR	  ( w w -- w )
 614              	 	Bitwise inclusive OR.
 615              	******************************/
 616 32f2 E2320000 		_HEADER ORR,2,"OR"
 616      024F5200 
 616      00BF
 617 32fc 57F8045B 		LDR	WP,[DSP],#4
 618 3300 46EA0506 		ORR	TOS,TOS,WP
 619 3304 D6E5     		_NEXT 
 620              	
 621              	/*****************************
 622              	    XOR	 ( w w -- w )
 623              	 	Bitwise exclusive OR.
 624              	*****************************/
 625 3306 F6320000 		_HEADER XORR,3,"XOR"
 625      03584F52 
 625      00BF
 626 3310 57F8045B 		LDR	WP,[DSP],#4
 627 3314 86EA0506 		EOR	TOS,TOS,WP
 628 3318 CCE5     		_NEXT 
 629              	
 630              	/**************************************************
 631              	    UM+	 ( w w -- w cy )
 632              	 	Add two numbers, return the sum and carry flag.
 633              	***************************************************/
 634 331a 0A330000 		_HEADER UPLUS,3,"UM+"
 634      03554D2B 
 634      00BF
 635 3324 3D68     		LDR	WP,[DSP]
 636 3326 AD19     		ADDS	WP,WP,TOS
 637 3328 4FF00006 		MOV	TOS,#0
 638 332c 46F10006 		ADC	TOS,TOS,#0
 639 3330 3D60     		STR	WP,[DSP]
 640 3332 BFE5     		_NEXT 
 641              	
 642              	/*********************************
 643              	    RSHIFT	 ( w # -- w )
 644              	 	logical Right shift # bits.
 645              	**********************************/
 646 3334 1E330000 		_HEADER RSHIFT,6,"RSHIFT"
 646      06525348 
 646      49465400 
 647 3340 57F8045B 		LDR	WP,[DSP],#4
 648 3344 25FA06F6 		MOV	TOS,WP,LSR TOS
 649 3348 B4E5     		_NEXT 
 650              	
 651              	/****************************
 652              	    LSHIFT	 ( w # -- w )
 653              	 	left shift # bits.
 654              	****************************/
ARM GAS  forth.s 			page 123


 655 334a 38330000 		_HEADER LSHIFT,6,"LSHIFT"
 655      064C5348 
 655      49465400 
 655      00BF
 656 3358 57F8045B 		LDR	WP,[DSP],#4
 657 335c 05FA06F6 		MOV	TOS,WP,LSL TOS
 658 3360 A8E5     		_NEXT
 659              	
 660              	/*************************
 661              	    +	 ( w w -- w )
 662              	 	Add.
 663              	*************************/
 664 3362 4E330000 		_HEADER PLUS,1,"+"
 664      012B
 665 3368 57F8045B 		LDR	WP,[DSP],#4
 666 336c 2E44     		ADD	TOS,TOS,WP
 667 336e A1E5     		_NEXT 
 668              	
 669              	/************************
 670              	    -	 ( w w -- w )
 671              	 	Subtract.
 672              	************************/
 673 3370 66330000 		_HEADER SUBB,1,"-"
 673      012D00BF 
 674 3378 57F8045B 		LDR	WP,[DSP],#4
 675 337c C6EB0506 		RSB	TOS,TOS,WP
 676 3380 98E5     		_NEXT 
 677              	
 678              	/************************
 679              	    *	 ( w w -- w )
 680              	 	Multiply.
 681              	***********************/
 682 3382 74330000 		_HEADER STAR,1,"*"
 682      012A
 683 3388 57F8045B 		LDR	WP,[DSP],#4
 684 338c 05FB06F6 		MUL	TOS,WP,TOS
 685 3390 90E5     		_NEXT 
 686              	
 687              	/***************************
 688              	    UM*	 ( w w -- ud )
 689              	 	Unsigned multiply.
 690              	****************************/
 691 3392 86330000 		_HEADER UMSTA,3,"UM*"
 691      03554D2A 
 691      00BF
 692 339c 3D68     		LDR	WP,[DSP]
 693 339e A6FB0523 		UMULL	T2,T3,TOS,WP
 694 33a2 3A60     		STR	T2,[DSP]
 695 33a4 1E46     		MOV	TOS,T3
 696 33a6 85E5     		_NEXT 
 697              	
 698              	/***************************
 699              	    M*	 ( w w -- d )
 700              	 	signed multiply.
 701              		hold double result
 702              	***************************/
 703 33a8 96330000 		_HEADER MSTAR,2,"M*"
ARM GAS  forth.s 			page 124


 703      024D2A00 
 704 33b0 3D68     		LDR	WP,[DSP]
 705 33b2 86FB0523 		SMULL	T2,T3,TOS,WP
 706 33b6 3A60     		STR	T2,[DSP]
 707 33b8 1E46     		MOV	TOS,T3
 708 33ba 7BE5     		_NEXT 
 709              	
 710              	/***************************
 711              	    1+	 ( w -- w+1 )
 712              	 	Add 1.
 713              	***************************/
 714 33bc AC330000 		_HEADER ONEP,2,"1+"
 714      02312B00 
 715 33c4 06F10106 		ADD	TOS,TOS,#1
 716 33c8 74E5     		_NEXT 
 717              	
 718              	/***************************
 719              	    1-	 ( w -- w-1 )
 720              	 	Subtract 1.
 721              	***************************/
 722 33ca C0330000 		_HEADER ONEM,2,"1-"
 722      02312D00 
 722      00BF
 723 33d4 A6F10106 		SUB	TOS,TOS,#1
 724 33d8 6CE5     		_NEXT 
 725              	
 726              	/***************************
 727              	    2+	 ( w -- w+2 )
 728              	 	Add 2.
 729              	**************************/
 730 33da CE330000 		_HEADER TWOP,2,"2+"
 730      02322B00 
 730      00BF
 731 33e4 06F10206 		ADD	TOS,TOS,#2
 732 33e8 64E5     		_NEXT
 733              	
 734              	/**************************
 735              	    2-	 ( w -- w-2 )
 736              	 	Subtract 2.
 737              	**************************/
 738 33ea DE330000 		_HEADER TWOM,2,"2-"
 738      02322D00 
 738      00BF
 739 33f4 A6F10206 		SUB	TOS,TOS,#2
 740 33f8 5CE5     		_NEXT
 741              	
 742              	/***************************
 743              	    CELL+	( w -- w+4 )
 744              	 	Add CELLL.
 745              	***************************/
 746 33fa EE330000 		_HEADER CELLP,5,"CELL+"
 746      0543454C 
 746      4C2B
 747 3404 06F10406 		ADD	TOS,TOS,#CELLL
 748 3408 54E5     		_NEXT
 749              	
 750              	/***************************
ARM GAS  forth.s 			page 125


 751              	    CELL-	( w -- w-4 )
 752              	 	Subtract CELLL.
 753              	**************************/
 754 340a FE330000 		_HEADER CELLM,5,"CELL-"
 754      0543454C 
 754      4C2D
 755 3414 A6F10406 		SUB	TOS,TOS,#CELLL
 756 3418 4CE5     		_NEXT
 757              	
 758              	/**************************** 
 759              	    BL	( -- 32 )
 760              	 	Blank (ASCII space).
 761              	*****************************/
 762 341a 0E340000 		_HEADER BLANK,2,"BL"
 762      02424C00 
 762      00BF
 763 3424 47F8046D 		_PUSH
 764 3428 4FF02006 		MOV	TOS,#32
 765 342c 42E5     		_NEXT 
 766              	
 767              	/**************************
 768              	    CELLS	( w -- w*4 )
 769              	 	Multiply CELLL 
 770              	***************************/
 771 342e 1E340000 		_HEADER CELLS,5,"CELLS"
 771      0543454C 
 771      4C53
 772 3438 4FEA8606 		LSL TOS,#2
 773 343c 3AE5     		_NEXT
 774              	
 775              	/***************************
 776              	    CELL/	( w -- w/4 )
 777              	 	Divide by CELLL.
 778              	***************************/
 779 343e 32340000 		_HEADER CELLSL,5,"CELL/"
 779      0543454C 
 779      4C2F
 780 3448 4FEAA606 		ASR TOS,#2
 781 344c 32E5     		_NEXT
 782              	
 783              	/*************************
 784              	    2*	( w -- w*2 )
 785              	 	Multiply 2.
 786              	*************************/
 787 344e 42340000 		_HEADER TWOST,2,"2*"
 787      02322A00 
 787      00BF
 788 3458 4FEA4606 		MOV	TOS,TOS,LSL#1
 789 345c 2AE5     		_NEXT
 790              	
 791              	/*************************
 792              	    2/	( w -- w/2 )
 793              	 	Divide by 2.
 794              	***********************/
 795 345e 52340000 		_HEADER TWOSL,2,"2/"
 795      02322F00 
 795      00BF
ARM GAS  forth.s 			page 126


 796 3468 4FEA6606 		MOV	TOS,TOS,ASR#1
 797 346c 22E5     		_NEXT
 798              	
 799              	/****************************
 800              	    ?DUP	( w -- w w | 0 )
 801              	 	Conditional duplicate.
 802              	*****************************/
 803 346e 62340000 		_HEADER QDUP,4,"?DUP"
 803      043F4455 
 803      5000
 804 3478 3500     		MOVS	WP,TOS
 805 347a 18BF     		IT NE 
 806 347c 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 807 3480 18E5     		_NEXT
 808              	
 809              	/***********************************
 810              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 811              	 	Rotate top 3 items.
 812              	*************************************/
 813 3482 72340000 		_HEADER ROT,3,"ROT"
 813      03524F54 
 813      00BF
 814 348c 3868     		LDR	T0,[DSP]  // w2 
 815 348e 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 816 3490 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 817 3492 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 818 3494 0EE5     		_NEXT
 819              	
 820              	/*********************************
 821              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 822              	 left rotate top 3 elements 
 823              	********************************/
 824 3496 86340000 		_HEADER NROT,4,"-ROT"
 824      042D524F 
 824      5400
 825 34a0 7868     		LDR T0,[DSP,#4]
 826 34a2 7E60     		STR TOS,[DSP,#4]	
 827 34a4 3E68     		LDR TOS,[DSP]
 828 34a6 3860     		STR T0,[DSP]
 829 34a8 04E5     		_NEXT 
 830              	
 831              	/*********************************
 832              	    2DROP	( w1 w2 -- )
 833              	 	Drop top 2 items.
 834              	*********************************/
 835 34aa 9A340000 		_HEADER DDROP,5,"2DROP"
 835      05324452 
 835      4F50
 836 34b4 57F8046B 		_POP
 837 34b8 57F8046B 		_POP
 838 34bc FAE4     		_NEXT 
 839              	
 840              	/********************************
 841              		3DROP ( w1 w2 w3 -- )
 842              		drop top 3 items 
 843              	********************************/
 844 34be AE340000 		_HEADER TDROP,5,"3DROP"
ARM GAS  forth.s 			page 127


 844      05334452 
 844      4F50
 845 34c8 07F10807 	    add DSP,#8 
 846 34cc 57F8046B 	    _POP 
 847 34d0 F0E4     	    _NEXT 
 848              	
 849              	/***********************************
 850              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 851              	 	Duplicate top 2 items.
 852              	************************************/
 853 34d2 C2340000 		_HEADER DDUP,4,"2DUP"
 853      04324455 
 853      5000
 854 34dc 3868     		LDR	T0,[DSP] // w1
 855 34de 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 856 34e2 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 857 34e6 E5E4     		_NEXT
 858              	
 859              	/******************************
 860              	    D+	( d1 d2 -- d3 )
 861              	 	Add top 2 double numbers.
 862              	******************************/
 863 34e8 D6340000 		_HEADER DPLUS,2,"D+"
 863      02442B00 
 864 34f0 57F8045B 		LDR	WP,[DSP],#4
 865 34f4 57F8042B 		LDR	T2,[DSP],#4
 866 34f8 3B68     		LDR	T3,[DSP]
 867 34fa ED18     		ADDS	WP,WP,T3
 868 34fc 3D60     		STR	WP,[DSP]
 869 34fe 46EB0206 		ADC	TOS,TOS,T2
 870 3502 D7E4     		_NEXT
 871              	
 872              	/******************************
 873              		DABS ( d -- ud )
 874              		absolute value double 
 875              	*****************************/
 876 3504 EC340000 		_HEADER DABS,4,"DABS"
 876      04444142 
 876      530000BF 
 877 3510 16F0004F 		tst TOS,#(1<<31)
 878 3514 09D0     		beq 9f 
 879 3516 6FEA0606 		mvn TOS,TOS 
 880 351a 3D68     		ldr WP,[DSP]
 881 351c 6FEA0505 		mvn WP,WP 
 882 3520 0135     		adds WP,#1
 883 3522 3D60     		str WP,[DSP]
 884 3524 01D3     		bcc 9f 
 885 3526 06F10106 		add TOS,#1 
 886 352a C3E4     	9:	_NEXT 
 887              	
 888              	/*****************************
 889              	  UD> ( d1 d2 -- f )
 890              	  unsigned compare double d1 > d2 
 891              	******************************/
 892 352c 08350000 		_HEADER UDGREAT,3,"UD>"
 892      0355443E 
 893 3534 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
ARM GAS  forth.s 			page 128


 894 3538 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 895 353a B042     		cmp T0,TOS 
 896 353c 02D8     		bhi 1f
 897 353e 04D4     		bmi 2f  
 898 3540 A942     		cmp T1,WP 
 899 3542 02D9     		bls 2f 
 900 3544 4FF0FF36 	1:	mov TOS,#-1 
 901 3548 B4E4     		_NEXT 
 902 354a 4FF00006 	2:  mov TOS,#0 
 903 354e B1E4     		_NEXT 
 904              	
 905              	/******************************
 906              		D0= ( d -- f )
 907              		double 0= 
 908              	*****************************/
 909 3550 30350000 		_HEADER DZEQUAL,3,"D0="
 909      0344303D 
 910 3558 3046     		mov T0,TOS
 911 355a 57F8046B 		_POP 
 912 355e 46EA0006 		orr TOS,T0 
 913 3562 01D0     		beq 9f
 914 3564 6FF00006 		mvn TOS,#0 
 915 3568 A4E4     	9:	_NEXT 
 916              	
 917              	/*****************************
 918              	    INVERT	 ( w -- !w )
 919              	 	1"s complement.
 920              	*****************************/
 921 356a 54350000 		_HEADER INVER,6,"INVERT"
 921      06494E56 
 921      45525400 
 921      00BF
 922 3578 6FEA0606 		MVN	TOS,TOS
 923 357c 9AE4     		_NEXT
 924              	
 925              	/*****************************
 926              	    NEGATE	( w -- -w )
 927              	 	2's complement.
 928              	***************************/
 929 357e 6E350000 		_HEADER NEGAT,6,"NEGATE"
 929      064E4547 
 929      41544500 
 929      00BF
 930 358c C6F10006 		RSB	TOS,TOS,#0
 931 3590 90E4     		_NEXT
 932              	
 933              	/***************************
 934              	    ABS	 ( w -- |w| )
 935              	 	Absolute.
 936              	**************************/
 937 3592 82350000 		_HEADER ABSS,3,"ABS"
 937      03414253 
 937      00BF
 938 359c 16F0004F 		TST	TOS,#0x80000000
 939 35a0 18BF     		IT NE
 940 35a2 7642     	    RSBNE   TOS,TOS,#0
 941 35a4 86E4     		_NEXT
ARM GAS  forth.s 			page 129


 942              	
 943              	/**************************
 944              		CLZ ( n - n )
 945              		count leading zeros 
 946              	**************************/
 947 35a6 96350000 		_HEADER CLZ,3,"CLZ"
 947      03434C5A 
 947      00BF
 948 35b0 B6FA86F6 		clz TOS,TOS 
 949 35b4 7EE4     		_NEXT 
 950              	
 951              	/*************************
 952              		CTZ ( n -- n )
 953              		count trailing zeros 
 954              	************************/
 955 35b6 AA350000 		_HEADER CTZ,3,"CTZ"
 955      0343545A 
 955      00BF
 956 35c0 80EA0000 		eor T0,T0 
 957 35c4 16F0010F 	1:  tst TOS,#1 
 958 35c8 04D1     		bne 2f 
 959 35ca 4FEA5606 		lsr TOS,#1 
 960 35ce 00F10100 		add T0,#1 
 961 35d2 F7E7     		b 1b 
 962 35d4 0646     	2:  mov TOS,T0 
 963 35d6 6DE4     		_NEXT 
 964              	
 965              	
 966              	/*******************
 967              	  0= ( w -- f )
 968              	 TOS==0?
 969              	*******************/
 970 35d8 BA350000 		_HEADER ZEQUAL,2,"0="
 970      02303D00 
 971 35e0 16B9     		cbnz TOS,1f
 972 35e2 4FF0FF36 		mov TOS,#-1
 973 35e6 65E4     		_NEXT 
 974 35e8 86EA0606 	1:  eor TOS,TOS,TOS  
 975 35ec 62E4     		_NEXT 	
 976              	
 977              	/*********************
 978              	    =	 ( w w -- t )
 979              	 	Equal?
 980              	*********************/
 981 35ee DC350000 		_HEADER EQUAL,1,"="
 981      013D
 982 35f4 57F8045B 		LDR	WP,[DSP],#4
 983 35f8 AE42     		CMP	TOS,WP
 984 35fa 0CBF     		ITE EQ 
 985 35fc 6FF00006 	    MVNEQ	TOS,#0
 986 3600 0026     		MOVNE	TOS,#0
 987 3602 57E4     		_NEXT
 988              	
 989              	/************************
 990              		<> ( w w -- f )
 991              		different?
 992              	************************/
ARM GAS  forth.s 			page 130


 993 3604 F2350000 		_HEADER DIFF,2,"<>"
 993      023C3E00 
 994 360c 3046     		mov T0,TOS 
 995 360e 57F8046B 		_POP 
 996 3612 86EA0006 		eor TOS,T0
 997 3616 B6FA86F0 		clz T0,TOS 
 998 361a 06FA00F6 		lsl TOS,T0 
 999 361e 4FEAE676 		asr TOS,#31 
 1000 3622 47E4     		_NEXT 
 1001              	
 1002              	/************************
 1003              	    U<	 ( w w -- t )
 1004              	 	Unsigned less?
 1005              	*************************/
 1006 3624 08360000 		_HEADER ULESS,2,"U<"
 1006      02553C00 
 1007 362c 57F8045B 		LDR	WP,[DSP],#4
 1008 3630 B542     		CMP	WP,TOS
 1009 3632 34BF     		ITE CC 
 1010 3634 6FF00006 		MVNCC	TOS,#0
 1011 3638 0026     		MOVCS	TOS,#0
 1012 363a 3BE4     		_NEXT
 1013              	
 1014              	/**********************
 1015              	    <	( w w -- t )
 1016              	 	Less?
 1017              	**********************/
 1018 363c 28360000 		_HEADER LESS,1,"<"
 1018      013C00BF 
 1019 3644 57F8045B 		LDR	WP,[DSP],#4
 1020 3648 B542     		CMP	WP,TOS
 1021 364a B4BF     	    ITE LT
 1022 364c 6FF00006 		MVNLT	TOS,#0
 1023 3650 0026     		MOVGE	TOS,#0
 1024 3652 2FE4     		_NEXT 
 1025              	
 1026              	/**********************
 1027              		U> ( u u -- t|f )
 1028              	    unsigned greater 
 1029              	**********************/
 1030 3654 40360000 		_HEADER UGREAT,2,"U>"
 1030      02553E00 
 1031 365c 57F8045B 		LDR WP,[DSP],#4 
 1032 3660 AE42     		CMP TOS,WP 
 1033 3662 34BF     		ITE CC  
 1034 3664 6FF00006 		MVNCC TOS,#0 
 1035 3668 0026     		MOVCS TOS,#0
 1036 366a 23E4     		_NEXT 
 1037              	
 1038              	/***********************
 1039              	    >	( w w -- t )
 1040              	 	greater?
 1041              	***********************/
 1042 366c 58360000 		_HEADER GREAT,1,">"
 1042      013E00BF 
 1043 3674 57F8045B 		LDR	WP,[DSP],#4
 1044 3678 B542     		CMP	WP,TOS
ARM GAS  forth.s 			page 131


 1045 367a CCBF     		ITE GT
 1046 367c 6FF00006 	    MVNGT	TOS,#0
 1047 3680 0026     		MOVLE	TOS,#0
 1048 3682 17E4     		_NEXT
 1049              	
 1050              	/***************************
 1051              	    MAX	 ( w w -- max )
 1052              	 	Leave maximum.
 1053              	***************************/
 1054 3684 70360000 		_HEADER MAX,3,"MAX"
 1054      034D4158 
 1055 368c 57F8045B 		LDR	WP,[DSP],#4
 1056 3690 B542     		CMP	WP,TOS
 1057 3692 C8BF     		IT GT 
 1058 3694 2E46     		MOVGT	TOS,WP
 1059 3696 0DE4     		_NEXT 
 1060              	
 1061              	/**************************
 1062              	    MIN	 ( w w -- min )
 1063              	 	Leave minimum.
 1064              	**************************/
 1065 3698 88360000 		_HEADER MIN,3,"MIN"
 1065      034D494E 
 1066 36a0 57F8045B 		LDR	WP,[DSP],#4
 1067 36a4 B542     		CMP	WP,TOS
 1068 36a6 B8BF     		IT LT
 1069 36a8 2E46     		MOVLT	TOS,WP
 1070 36aa 03E4     		_NEXT
 1071              	
 1072              	/***********************
 1073              	    +!	 ( w a -- )
 1074              	 	Add to memory.
 1075              	***********************/
 1076 36ac 9C360000 		_HEADER PSTOR,2,"+!"
 1076      022B2100 
 1077 36b4 57F8045B 		LDR	WP,[DSP],#4
 1078 36b8 3268     		LDR	T2,[TOS]
 1079 36ba 2A44     		ADD	T2,T2,WP
 1080 36bc 3260     		STR	T2,[TOS]
 1081 36be 57F8046B 		_POP
 1082 36c2 FFF7F7BB 		_NEXT
 1083              	
 1084              	/************************
 1085              	    2!	 ( d a -- )
 1086              	 	Store double number.
 1087              	*************************/
 1088 36c6 B0360000 		_HEADER DSTOR,2,"2!"
 1088      02322100 
 1088      00BF
 1089 36d0 57F8045B 		LDR	WP,[DSP],#4
 1090 36d4 57F8042B 		LDR	T2,[DSP],#4
 1091 36d8 46F8045B 		STR	WP,[TOS],#4
 1092 36dc 3260     		STR	T2,[TOS]
 1093 36de 57F8046B 		_POP
 1094 36e2 FFF7E7BB 		_NEXT
 1095              	
 1096              	/************************
ARM GAS  forth.s 			page 132


 1097              	    2@	 ( a -- d )
 1098              	 	Fetch double number.
 1099              	************************/
 1100 36e6 CA360000 		_HEADER DAT,2,"2@"
 1100      02324000 
 1100      00BF
 1101 36f0 7568     		LDR	WP,[TOS,#4]
 1102 36f2 47F8045D 		STR	WP,[DSP,#-4]!
 1103 36f6 3668     		LDR	TOS,[TOS]
 1104 36f8 FFF7DCBB 		_NEXT
 1105              	
 1106              	/***************************
 1107              	    COUNT	( b -- b+1 c )
 1108              	 	Fetch length of string.
 1109              	****************************/
 1110 36fc EA360000 		_HEADER COUNT,5,"COUNT"
 1110      05434F55 
 1110      4E5400BF 
 1111 3708 16F8015B 		LDRB	WP,[TOS],#1
 1112 370c 47F8046D 		_PUSH
 1113 3710 2E46     		MOV	TOS,WP
 1114 3712 FFF7CFBB 		_NEXT
 1115              	
 1116              	/******************************
 1117              	    DNEGATE	( d -- -d )
 1118              	 	Negate double number.
 1119              	**************************/
 1120 3716 00370000 		_HEADER DNEGA,7,"DNEGATE"
 1120      07444E45 
 1120      47415445 
 1120      00BF
 1121 3724 3D68     		LDR	WP,[DSP]
 1122 3726 A2EB0202 		SUB	T2,T2,T2
 1123 372a 551B     		SUBS WP,T2,WP
 1124 372c 62EB0606 		SBC	TOS,T2,TOS
 1125 3730 3D60     		STR	WP,[DSP]
 1126 3732 FFF7BFBB 		_NEXT
 1127              	
 1128              	/******************************
 1129              	  System and user variables
 1130              	******************************/
 1131              	
 1132              	/*******************************
 1133              	  doVAR	( -- a )
 1134              	  Run time routine for VARIABLE and CREATE.
 1135              	hidden word used by compiler
 1136              	********************************/
 1137              	DOVAR:
 1138 3736 47F8046D 		_PUSH
 1139 373a 6646     		MOV TOS,IP
 1140 373c 0CF1040C 		ADD IP,IP,#4 
 1141 3740 FFF7BBBB 		B UNNEST 
 1142              	
 1143              	/**********************************
 1144              	    doCON	( -- a ) 
 1145              	 	Run time routine for CONSTANT.
 1146              	hidden word used by compiler 
ARM GAS  forth.s 			page 133


 1147              	***********************************/
 1148              	DOCON:
 1149 3744 47F8046D 		_PUSH
 1150 3748 5CF8046B 		LDR.W TOS,[IP],#4 
 1151 374c FFF7B5BB 		B UNNEST 
 1152              	
 1153              	/***********************
 1154              	  system variables 
 1155              	***********************/
 1156              	
 1157              	/***********************
 1158              		STATE ( -- a )
 1159              		compilation state 
 1160              		0 -> interpret
 1161              		-1 -> compile 
 1162              	************************/
 1163 3750 1A370000 		_HEADER STATE,5,"STATE"
 1163      05535441 
 1163      544500BF 
 1164 375c 47F8046D 		_PUSH 
 1165 3760 04F1B406 		ADD TOS,UP,#CSTATE 
 1166 3764 FFF7A6BB 		_NEXT 
 1167              	
 1168              	/**************************
 1169              	 SEED ( -- a)
 1170              	 return PRNG seed address 
 1171              	**************************/
 1172 3768 54370000 		_HEADER SEED,4,"SEED"
 1172      04534545 
 1172      440000BF 
 1173 3774 47F8046D 		_PUSH 
 1174 3778 04F10406 		ADD TOS,UP,#RNDSEED
 1175 377c FFF79ABB 		_NEXT 	
 1176              	
 1177              	/****************************************
 1178              	  MSEC ( -- a)
 1179              	 return address of milliseconds counter
 1180              	****************************************/
 1181 3780 6C370000 		_HEADER MSEC,4,"MSEC"
 1181      044D5345 
 1181      430000BF 
 1182 378c 47F8046D 	    _PUSH
 1183 3790 04F10806 	    ADD TOS,UP,#TICKS
 1184 3794 FFF78EBB 	    _NEXT 
 1185              	
 1186              	/*************************
 1187              	 TIMER ( -- a )
 1188              	 count down timer 
 1189              	**********************/
 1190 3798 84370000 		_HEADER TIMER,5,"TIMER"
 1190      0554494D 
 1190      455200BF 
 1191 37a4 47F8046D 		 _PUSH 
 1192 37a8 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1193 37ac FFF782BB 	    _NEXT
 1194              	
 1195              	/*****************************
ARM GAS  forth.s 			page 134


 1196              	    'BOOT	 ( -- a )
 1197              	 	boot up application vector 
 1198              	*****************************/
 1199 37b0 9C370000 		_HEADER TBOOT,5,"'BOOT"
 1199      0527424F 
 1199      4F5400BF 
 1200 37bc 47F8046D 		_PUSH
 1201 37c0 04F11006 		ADD	TOS,UP,#BOOT 
 1202 37c4 FFF776BB 		_NEXT
 1203              		
 1204              	/********************************************	
 1205              	    BASE	( -- a )
 1206              	 	Storage of the radix base for numeric I/O.
 1207              	**********************************************/
 1208 37c8 B4370000 		_HEADER BASE,4,"BASE"
 1208      04424153 
 1208      450000BF 
 1209 37d4 47F8046D 		_PUSH
 1210 37d8 04F11C06 		ADD	TOS,UP,#NBASE
 1211 37dc FFF76ABB 		_NEXT
 1212              	
 1213              	/***********************************************
 1214              		BCHAR ( -- flag )
 1215              		boolean variable
 1216              		if set base char include in convertion 
 1217              		of integer to string.  
 1218              	************************************************/
 1219 37e0 CC370000 			_HEADER BCHR,5,"BCHAR"
 1219      05424348 
 1219      415200BF 
 1220 37ec 47F8046D 			_PUSH 
 1221 37f0 04F12006 			ADD TOS,UP,#BCHAR 
 1222 37f4 FFF75EBB 			_NEXT 
 1223              	
 1224              	/*****************************************************
 1225              	    temp	 ( -- a )
 1226              	 	A temporary storage location used in parse and find.
 1227              	hidden word for internal use
 1228              	********************************************************/
 1229              	TEMP:
 1230 37f8 47F8046D 		_PUSH
 1231 37fc 04F12406 		ADD	TOS,UP,#TMP
 1232 3800 FFF758BB 		_NEXT
 1233              	
 1234              	/*******************************************
 1235              	    SPAN	( -- a )
 1236              	 	Hold character count received by EXPECT.
 1237              	********************************************/
 1238 3804 E4370000 		_HEADER SPAN,4,"SPAN"
 1238      04535041 
 1238      4E0000BF 
 1239 3810 47F8046D 		_PUSH
 1240 3814 04F12806 		ADD	TOS,UP,#CSPAN
 1241 3818 FFF74CBB 		_NEXT
 1242              	
 1243              	/***********************************************************
 1244              	    >IN	 ( -- a )
ARM GAS  forth.s 			page 135


 1245              	 	Hold the character pointer while parsing input stream.
 1246              	***********************************************************/
 1247 381c 08380000 		_HEADER INN,3,">IN"
 1247      033E494E 
 1248 3824 47F8046D 		_PUSH
 1249 3828 04F12C06 		ADD	TOS,UP,#TOIN
 1250 382c FFF742BB 		_NEXT
 1251              	
 1252              	/**************************************
 1253              	    #TIB	( -- a )
 1254              	 	Hold the current count and address 
 1255              		of the terminal input buffer.
 1256              	**************************************/
 1257 3830 20380000 		_HEADER NTIB,4,"#TIB"
 1257      04235449 
 1257      420000BF 
 1258 383c 47F8046D 		_PUSH
 1259 3840 04F13006 		ADD	TOS,UP,#NTIBB
 1260 3844 FFF736BB 		_NEXT
 1261              	
 1262              	/******************************
 1263              	    'EVAL	( -- a )
 1264              	 	Execution vector of EVAL.
 1265              	*******************************/
 1266 3848 34380000 		_HEADER TEVAL,5,"'EVAL"
 1266      05274556 
 1266      414C00BF 
 1267 3854 47F8046D 		_PUSH
 1268 3858 04F13C06 		ADD	TOS,UP,#EVAL
 1269 385c FFF72ABB 		_NEXT
 1270              	
 1271              	/*********************************
 1272              	    HLD	 ( -- a )
 1273              	 	Hold a pointer in building a 
 1274              		numeric output string.
 1275              	*********************************/
 1276 3860 4C380000 		_HEADER HLD,3,"HLD"
 1276      03484C44 
 1277 3868 47F8046D 		_PUSH
 1278 386c 04F14006 		ADD	TOS,UP,#VHOLD
 1279 3870 FFF720BB 		_NEXT
 1280              	
 1281              	/**********************************
 1282              	    CONTEXT	( -- a )
 1283              	 	A area to specify vocabulary 
 1284              		search order.
 1285              	**********************************/
 1286 3874 64380000 		_HEADER CNTXT,7,"CONTEXT"
 1286      07434F4E 
 1286      54455854 
 1287              	CRRNT:
 1288 3880 47F8046D 		_PUSH
 1289 3884 04F14406 		ADD	TOS,UP,#CTXT
 1290 3888 FFF714BB 		_NEXT
 1291              	
 1292              	/******************************
 1293              	    CP	( -- a )
ARM GAS  forth.s 			page 136


 1294              	 	Point to top free area  
 1295              		in user RAM. 
 1296              	******************************/
 1297 388c 78380000 		_HEADER CPP,2,"CP"
 1297      02435000 
 1298 3894 47F8046D 		_PUSH
 1299 3898 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1300 389c FFF70ABB 		_NEXT
 1301              	
 1302              	/****************************
 1303              	   FCP ( -- a )
 1304              	  Point ot top of Forth 
 1305              	  system dictionary
 1306              	****************************/
 1307 38a0 90380000 		_HEADER FCP,3,"FCP"
 1307      03464350 
 1308 38a8 47F8046D 		_PUSH 
 1309 38ac 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1310 38b0 FFF700BB 		_NEXT 
 1311              	
 1312              	/***************************
 1313              	    LAST	( -- a )
 1314              	 	Point to the last name 
 1315              		in the dictionary.
 1316              	***************************/
 1317 38b4 A4380000 		_HEADER LAST,4,"LAST"
 1317      044C4153 
 1317      540000BF 
 1318 38c0 47F8046D 		_PUSH
 1319 38c4 04F15006 		ADD	TOS,UP,#LASTN
 1320 38c8 FFF7F4BA 		_NEXT
 1321              	
 1322              	
 1323              	/***********************
 1324              		system constants 
 1325              	***********************/
 1326              	
 1327              	/********************************
 1328              		USER-BEGIN ( -- a )
 1329              	  where user area begin in RAM
 1330              	********************************/
 1331 38cc B8380000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1331      0A555345 
 1331      522D4245 
 1331      47494E00 
 1332 38dc 47F8046D 		_PUSH 
 1333 38e0 DFF80460 		ldr TOS,USR_BGN_ADR 
 1334 38e4 FFF7E6BA 		_NEXT 
 1335              	USR_BGN_ADR:
 1336 38e8 12050020 	.word  DTOP 
 1337              	
 1338              	/*********************************
 1339              	  USER_END ( -- a )
 1340              	  where user area end in RAM 
 1341              	******************************/
 1342 38ec D0380000 		_HEADER USER_END,8,"USER-END"
 1342      08555345 
ARM GAS  forth.s 			page 137


 1342      522D454E 
 1342      440000BF 
 1343 38fc 47F8046D 		_PUSH 
 1344 3900 DFF80460 		ldr TOS,USER_END_ADR 
 1345 3904 FFF7D6BA 		_NEXT 
 1346              	USER_END_ADR:
 1347 3908 2C810120 		.word DEND 
 1348              	
 1349              	/********************************
 1350              		MAX-INT ( -- n+ )
 1351              		maximum integer 
 1352              	*******************************/
 1353 390c F0380000 		_HEADER MAXINT,7,"MAX-INT"
 1353      074D4158 
 1353      2D494E54 
 1354 3918 47F8046D 		_PUSH 
 1355 391c 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1355      C7F6FF76 
 1356 3924 FFF7C6BA 		_NEXT 
 1357              	
 1358              	/******************************
 1359              		MIN-INT ( -- n- )
 1360              		minimum integer 
 1361              	******************************/
 1362 3928 10390000 		_HEADER MININT,7,"MIN-INT"
 1362      074D494E 
 1362      2D494E54 
 1363 3934 47F8046D 		_PUSH 
 1364 3938 4FF00006 		_MOV32 TOS, 0x80000000
 1364      C8F20006 
 1365 3940 FFF7B8BA 		_NEXT 
 1366              	
 1367              	/******************************
 1368              		MAX-UINT ( -- u )
 1369              		maximum unsigned integer 
 1370              	******************************/
 1371 3944 2C390000 		_HEADER MAXUINT,8,"MAX-UINT"
 1371      084D4158 
 1371      2D55494E 
 1371      540000BF 
 1372 3954 47F8046D 		_PUSH
 1373 3958 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1373      CFF6FF76 
 1374 3960 FFF7A8BA 		_NEXT 
 1375              	
 1376              	
 1377              	/* *********************
 1378              	  Common functions
 1379              	***********************/
 1380              	
 1381              	/********************************
 1382              	    WITHIN	( u ul uh -- t )
 1383              	 	Return true if u is within 
 1384              		the range of ul and uh.
 1385              	********************************/
 1386 3964 48390000 		_HEADER WITHI,6,"WITHIN"
 1386      06574954 
ARM GAS  forth.s 			page 138


 1386      48494E00 
 1387 3970 504700BF 		_NEST
 1388 3974 A9320000 		_ADR	OVER
 1389 3978 79330000 		_ADR	SUBB
 1390 397c E5310000 		_ADR	TOR
 1391 3980 79330000 		_ADR	SUBB
 1392 3984 A1310000 		_ADR	RFROM
 1393 3988 2D360000 		_ADR	ULESS
 1394 398c BB2E0000 		_UNNEST
 1395              	
 1396              	//  Divide
 1397              	
 1398              	/*************************************
 1399              	    UM/MOD	( udl udh u -- ur uq )
 1400              	 	Unsigned divide of a double by a 
 1401              		single. Return mod and quotient.
 1402              	**************************************/
 1403 3990 68390000 		_HEADER UMMOD,6,"UM/MOD"
 1403      06554D2F 
 1403      4D4F4400 
 1404 399c 4FF00103 		MOV	T3,#1
 1405 39a0 57F8045B 		LDR	WP,[DSP],#4
 1406 39a4 3A68     		LDR	T2,[DSP]
 1407              	UMMOD0:
 1408 39a6 9218     		ADDS	T2,T2,T2
 1409 39a8 6D41     		ADCS	WP,WP,WP
 1410 39aa 04D3     		BCC	UMMOD1
 1411 39ac A5EB0605 		SUB	WP,WP,TOS
 1412 39b0 02F10102 		ADD	T2,T2,#1
 1413 39b4 04E0     		B UMMOD2
 1414              	UMMOD1:
 1415 39b6 AD1B     		SUBS	WP,WP,TOS 
 1416 39b8 28BF     		IT CS 
 1417 39ba 0132     		ADDCS	T2,T2,#1
 1418 39bc 00D2     		BCS	UMMOD2
 1419 39be 3544     		ADD	WP,WP,TOS
 1420              	UMMOD2:
 1421 39c0 DB18     		ADDS	T3,T3,T3
 1422 39c2 F0D3     		BCC	UMMOD0
 1423 39c4 1646     		MOV	TOS,T2
 1424 39c6 3D60     		STR	WP,[DSP]
 1425 39c8 FFF774BA 		_NEXT
 1426              	
 1427              	/****************************
 1428              	    FM/MOD	( d n -- r q )
 1429              	 	Signed floored divide 
 1430              		of double by single. 
 1431              		Return mod and quotient.
 1432              	****************************/
 1433 39cc 94390000 		_HEADER MSMOD,6,"FM/MOD"
 1433      06464D2F 
 1433      4D4F4400 
 1434 39d8 504700BF 		_NEST
 1435 39dc 69320000 		_ADR	DUPP
 1436 39e0 D9320000 		_ADR	ZLESS
 1437 39e4 69320000 		_ADR	DUPP
 1438 39e8 E5310000 		_ADR	TOR
ARM GAS  forth.s 			page 139


 1439 39ec 1F310000 		_QBRAN MMOD1
 1439      043A0000 
 1440 39f4 8D350000 		_ADR	NEGAT
 1441 39f8 E5310000 		_ADR	TOR
 1442 39fc 25370000 		_ADR	DNEGA
 1443 3a00 A1310000 		_ADR	RFROM
 1444              	MMOD1:
 1445 3a04 E5310000 		_ADR	TOR
 1446 3a08 69320000 		_ADR	DUPP
 1447 3a0c D9320000 		_ADR	ZLESS
 1448 3a10 1F310000 		_QBRAN MMOD2
 1448      203A0000 
 1449 3a18 D1310000 		_ADR	RAT
 1450 3a1c 69330000 		_ADR	PLUS
 1451              	MMOD2:
 1452 3a20 A1310000 		_ADR	RFROM
 1453 3a24 9D390000 		_ADR	UMMOD
 1454 3a28 A1310000 		_ADR	RFROM
 1455 3a2c 1F310000 		_QBRAN	MMOD3
 1455      403A0000 
 1456 3a34 79320000 		_ADR	SWAP
 1457 3a38 8D350000 		_ADR	NEGAT
 1458 3a3c 79320000 		_ADR	SWAP
 1459              	MMOD3:   
 1460 3a40 BB2E0000 		_UNNEST
 1461              	
 1462              	/****************************
 1463              		SM/REM (d n1 -- n2 n3 )
 1464              	    symetric signed division 
 1465              		double by single 
 1466              	input:
 1467              		d   signed double 
 1468              		n1  signed single 
 1469              	output: 
 1470              		n2  signed remainder 
 1471              		n3  signed quotient 
 1472              	****************************/
 1473 3a44 D0390000 		_HEADER SMSLSHREM,6,"SM/REM"
 1473      06534D2F 
 1473      52454D00 
 1474 3a50 504700BF 		_NEST 
 1475 3a54 69320000 		_ADR DUPP 
 1476 3a58 D9320000 		_ADR ZLESS 
 1477 3a5c 69320000 		_ADR DUPP 
 1478 3a60 E5310000 		_ADR TOR   // divisor sign 
 1479 3a64 1F310000 		_QBRAN 1f 
 1479      703A0000 
 1480 3a6c 8D350000 		_ADR NEGAT 
 1481 3a70 A9320000 	1:  _ADR OVER 
 1482 3a74 D9320000 		_ADR ZLESS 
 1483 3a78 69320000 		_ADR DUPP 
 1484 3a7c E5310000 		_ADR TOR  // divident sign 
 1485 3a80 1F310000 		_QBRAN  1f 
 1485      943A0000 
 1486 3a88 E5310000 		_ADR TOR 
 1487 3a8c 25370000 		_ADR DNEGA
 1488 3a90 A1310000 		_ADR RFROM 
ARM GAS  forth.s 			page 140


 1489 3a94 9D390000 	1:  _ADR UMMOD  // rem quot  
 1490 3a98 A1310000 		_ADR RFROM 
 1491 3a9c D1310000 		_ADR RAT 
 1492 3aa0 11330000 		_ADR XORR
 1493 3aa4 1F310000 		_QBRAN 1f
 1493      B03A0000 
 1494 3aac 8D350000 		_ADR NEGAT 
 1495 3ab0 69320000 	1:  _ADR DUPP 
 1496 3ab4 D9320000 		_ADR ZLESS 
 1497 3ab8 A1310000 		_ADR RFROM 
 1498 3abc 11330000 		_ADR XORR 
 1499 3ac0 1F310000 		_QBRAN 1f 
 1499      D43A0000 
 1500 3ac8 79320000 		_ADR SWAP 
 1501 3acc 8D350000 		_ADR NEGAT 
 1502 3ad0 79320000 	    _ADR SWAP 
 1503 3ad4 BB2E0000 	1:  _UNNEST 
 1504              	
 1505              	
 1506              	/****************************
 1507              		S>D ( n -- d )
 1508              		convert single to double 
 1509              	*****************************/
 1510 3ad8 483A0000 		_HEADER STOD,3,"S>D"
 1510      03533E44 
 1511 3ae0 47F8046D 		_PUSH 
 1512 3ae4 4FEAE676 		ASR TOS,#31
 1513 3ae8 FFF7E4B9 		_NEXT 
 1514              	
 1515              	/****************************
 1516              		D2* ( d -- d<<1 )
 1517              		double * 2 
 1518              	***************************/
 1519 3aec DC3A0000 		_HEADER D2STAR,3,"D2*"
 1519      0344322A 
 1520 3af4 3868     		ldr T0,[DSP]
 1521 3af6 4000     		lsls T0,#1
 1522 3af8 3860     		str T0,[DSP]
 1523 3afa 4FEA4606 		lsl TOS,#1
 1524 3afe 46F10006 		adc TOS,#0
 1525 3b02 FFF7D7B9 		_NEXT 
 1526              	
 1527              	/****************************
 1528              		D2/  ( d -- d>>1 )
 1529              		double signed divide by 2 
 1530              	*****************************/
 1531 3b06 F03A0000 		_HEADER D2SL,3,"D2/"
 1531      0344322F 
 1531      00BF
 1532 3b10 3868     		ldr T0,[DSP]
 1533 3b12 7610     		asrs TOS,#1
 1534 3b14 4FEA3000 		rrx T0,T0 
 1535 3b18 3860     		str T0,[DSP]
 1536 3b1a FFF7CBB9 		_NEXT 
 1537              	
 1538              	/***************************
 1539              		D/MOD  ( d+ n+ - r+ qd+ )
ARM GAS  forth.s 			page 141


 1540              		unsigned double division
 1541              		and modulo 
 1542              		output:
 1543              			qd+ = d+ / n+
 1544              			r+ = qd+ - (d+ * n+ )
 1545              	***************************/
 1546 3b1e 0A3B0000 		_HEADER DSLMOD,5,"D/MOD"
 1546      05442F4D 
 1546      4F44
 1547 3b28 3D68     		ldr WP,[DSP]  // d+ high 
 1548 3b2a 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1549 3b2c 4FF02002 		mov T2,#32 // shift counter  
 1550 3b30 81EA0101 		eor T1,T1 // quotient T0:T1  
 1551 3b34 25B9     		cbnz WP,1f    
 1552 3b36 82EA0202 		eor T2,T2 // nos shifting required 
 1553 3b3a 0546     		mov WP,T0 
 1554 3b3c 80EA0000 		eor T0,T0 
 1555 3b40 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1556 3b42 15F0004F 	    tst WP,#(1<<31) 
 1557 3b46 06D1     		bne 2f
 1558 3b48 4918     		adds T1,T1,T1 
 1559 3b4a 4041     		adcs T0,T0,T0 
 1560 3b4c 45EB0505 		adc WP,WP,WP 
 1561 3b50 A2F10102 		sub T2,#1 
 1562 3b54 F4E7     		b 1b 
 1563 3b56 B5FBF6F3 	2:  udiv T3,WP,TOS
 1564 3b5a 41EA0301 		orr T1,T3   // append partial quotient 
 1565 3b5e 06FB03F3 		mul T3,TOS
 1566 3b62 A5EB0305 		sub WP,T3 //remainder 
 1567 3b66 02B1     		cbz T2,8f 
 1568 3b68 EAE7     		b 1b 
 1569 3b6a 7D60     	8:	str WP,[DSP,#4] // remainder 
 1570 3b6c 3960     		str T1,[DSP]  // q lo 
 1571 3b6e 0646     		mov TOS,T0  // q hi 		
 1572 3b70 FFF7A0B9 		_NEXT 
 1573              	
 1574              	
 1575              	/****************************
 1576              		D/  ( ud u -- udq )
 1577              		divide unsigned double 
 1578              		by unsigned single 
 1579              		return double quotient
 1580              		rounded to nearest integer 
 1581              	****************************/
 1582 3b74 223B0000 		_HEADER DSLASH,2,"D/"
 1582      02442F00 
 1583 3b7c 504700BF 		_NEST 
 1584 3b80 69320000 		_ADR DUPP 
 1585 3b84 DF300000 		_DOLIT 1 
 1585      01000000 
 1586 3b8c 41330000 		_ADR RSHIFT 
 1587 3b90 E5310000 		_ADR TOR 
 1588 3b94 293B0000 		_ADR DSLMOD 
 1589 3b98 8D340000 		_ADR ROT 
 1590 3b9c A1310000 		_ADR RFROM 
 1591 3ba0 75360000 		_ADR GREAT 
 1592 3ba4 1F310000 		_QBRAN 9f
ARM GAS  forth.s 			page 142


 1592      BC3B0000 
 1593 3bac DF300000 		_DOLIT 1 
 1593      01000000 
 1594 3bb4 E13A0000 		_ADR STOD 
 1595 3bb8 F1340000 		_ADR DPLUS 
 1596 3bbc BB2E0000 	9:	_UNNEST 
 1597              	
 1598              	
 1599              	/****************************
 1600              		D* ( d s -- d )
 1601              	    multiply a double 
 1602              		by a single 
 1603              	****************************/
 1604 3bc0 783B0000 		_HEADER DSTAR,2,"D*"
 1604      02442A00 
 1605              	/*
 1606              		_NEST 
 1607              		_ADR NROT 
 1608              		_ADR DUPP 
 1609              		_ADR TOR 
 1610              		_ADR DABS
 1611              		_ADR SWAP  
 1612              		_ADR ROT   
 1613              		_ADR DUPP
 1614              		_ADR TOR
 1615              		_ADR MSTAR
 1616              		_ADR ROT
 1617              		_ADR RFROM 
 1618              		_ADR STAR 
 1619              		_ADR PLUS
 1620              		_ADR RFROM 
 1621              		_ADR ZLESS 
 1622              		_QBRAN 9f
 1623              		_ADR DNEGA   
 1624              	9:	_UNNEST 
 1625              	*/
 1626 3bc8 57F8040B 		ldr T0,[DSP],#4
 1627 3bcc 3968     		ldr T1,[DSP]
 1628 3bce 3860     		str T0,[DSP] 
 1629 3bd0 83EA0303 		eor T3,T3 
 1630 3bd4 10F0004F 		tst T0,#(1<<31)
 1631 3bd8 02D0     		beq 1f 
 1632              		// DNEGATE 
 1633 3bda 591A     		subs T1,T3,T1  
 1634 3bdc 63EB0000 		sbc T0,T3,T0 
 1635 3be0 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1636 3be4 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1637 3be8 0E44     		add TOS,T1  // TOS:T2 product  
 1638 3bea 3868     		ldr r0,[DSP]
 1639 3bec 10F0004F 		tst T0,#(1<<31)
 1640 3bf0 02D0     		beq 2f 
 1641              		// DNEGATE product 
 1642 3bf2 9A1A     		subs T2,T3,T2  
 1643 3bf4 63EB0606 		sbc TOS,T3,TOS 
 1644 3bf8 3A60     	2:  str T2,[DSP]
 1645 3bfa FFF75BB9 		_NEXT 
 1646              	
ARM GAS  forth.s 			page 143


 1647              	
 1648              	/****************************
 1649              	   /MOD	( n n -- r q )
 1650              		Signed divide. Return
 1651              		mod and quotient.
 1652              	****************************/
 1653 3bfe C43B0000 		_HEADER SLMOD,4,"/MOD"
 1653      042F4D4F 
 1653      4400
 1654 3c08 504700BF 		_NEST
 1655 3c0c A9320000 		_ADR	OVER
 1656 3c10 D9320000 		_ADR	ZLESS
 1657 3c14 79320000 		_ADR	SWAP
 1658 3c18 D9390000 		_ADR	MSMOD
 1659 3c1c BB2E0000 		_UNNEST
 1660              	
 1661              	/**************************
 1662              	    MOD	 ( n n -- r )
 1663              	 	Signed divide. Return
 1664              		mod only.
 1665              	**************************/
 1666 3c20 023C0000 		_HEADER MODD,3,"MOD"
 1666      034D4F44 
 1667 3c28 504700BF 		_NEST
 1668 3c2c 093C0000 		_ADR	SLMOD
 1669 3c30 59320000 		_ADR	DROP
 1670 3c34 BB2E0000 		_UNNEST
 1671              	
 1672              	/*************************
 1673              	    /	   ( n n -- q )
 1674              	 	Signed divide. Return
 1675              		quotient only.
 1676              	**************************/
 1677 3c38 243C0000 		_HEADER SLASH,1,"/"
 1677      012F00BF 
 1678 3c40 504700BF 		_NEST
 1679 3c44 093C0000 		_ADR	SLMOD
 1680 3c48 79320000 		_ADR	SWAP
 1681 3c4c 59320000 		_ADR	DROP
 1682 3c50 BB2E0000 		_UNNEST
 1683              	
 1684              	//******************************
 1685              	//   */MOD	( n1 n2 n3 -- r q )
 1686              	/*   Multiply n1 and n2, then 
 1687              	   divide by n3. Return 
 1688              	   mod and quotient.
 1689              	******************************/
 1690 3c54 3C3C0000 		_HEADER SSMOD,5,"*/MOD"
 1690      052A2F4D 
 1690      4F4400BF 
 1691 3c60 504700BF 		_NEST
 1692 3c64 E5310000 		_ADR	TOR
 1693 3c68 B1330000 		_ADR	MSTAR
 1694 3c6c A1310000 		_ADR	RFROM
 1695 3c70 D9390000 		_ADR	MSMOD
 1696 3c74 BB2E0000 		_UNNEST
 1697              	
ARM GAS  forth.s 			page 144


 1698              	//*******************************
 1699              	//  */ ( n1 n2 n3 -- q )
 1700              	/* 	Multiply n1 by n2, then 
 1701              		divide by n3. Return quotient
 1702              		only.
 1703              	*******************************/
 1704 3c78 583C0000 		_HEADER STASL,2,"*/"
 1704      022A2F00 
 1705 3c80 504700BF 		_NEST
 1706 3c84 613C0000 		_ADR	SSMOD
 1707 3c88 79320000 		_ADR	SWAP
 1708 3c8c 59320000 		_ADR	DROP
 1709 3c90 BB2E0000 		_UNNEST
 1710              	
 1711              	/*******************
 1712              	  Miscellaneous
 1713              	*******************/
 1714              	
 1715              	/*************************
 1716              		CHAR+ ( a -- a+ )
 1717              		increment a by one 
 1718              		char size unit. 
 1719              	*************************/
 1720 3c94 7C3C0000 		_HEADER CHARP,5,"CHAR+"
 1720      05434841 
 1720      522B00BF 
 1721 3ca0 06F10106 		add TOS,#1
 1722 3ca4 FFF706B9 		_NEXT 
 1723              	
 1724              	/*************************
 1725              		CHARS ( n1 -- n1 )
 1726              		address size of 
 1727              		n1 character
 1728              		same on this system 
 1729              	*************************/
 1730 3ca8 983C0000 		_HEADER CHARS,5,"CHARS"
 1730      05434841 
 1730      525300BF 
 1731 3cb4 FFF7FEB8 		_NEXT 
 1732              	
 1733              	
 1734              	
 1735              	/*************************
 1736              		ALIGN ( -- )
 1737              		align data pointer 
 1738              		to cell boundary 
 1739              	************************/
 1740 3cb8 AC3C0000 		_HEADER ALIGN,5,"ALIGN"
 1740      05414C49 
 1740      474E00BF 
 1741 3cc4 E06C     		ldr T0,[UP,#USER_CTOP]
 1742 3cc6 00F10300 		add T0,#(CELLL-1)
 1743 3cca 20F00300 		and T0,#0xFFFFFFFC 
 1744 3cce E064     		str T0,[UP,#USER_CTOP]
 1745 3cd0 FFF7F0B8 		_NEXT 
 1746              	
 1747              	
ARM GAS  forth.s 			page 145


 1748              	/*************************
 1749              	    ALIGNED	( b -- a )
 1750              	 	Align address to the 
 1751              		cell boundary.
 1752              	**************************/
 1753 3cd4 BC3C0000 		_HEADER ALGND,7,"ALIGNED"
 1753      07414C49 
 1753      474E4544 
 1754 3ce0 06F10306 		ADD	TOS,TOS,#3
 1755 3ce4 6FF00305 		MVN	WP,#3
 1756 3ce8 06EA0506 		AND	TOS,TOS,WP
 1757 3cec FFF7E2B8 		_NEXT
 1758              	
 1759              	/****************************
 1760              	    >CHAR	( c -- c )
 1761              	 	Filter non-printing 
 1762              		characters.
 1763              	****************************/
 1764 3cf0 D83C0000 		_HEADER TCHAR,5,">CHAR"
 1764      053E4348 
 1764      415200BF 
 1765 3cfc 504700BF 		_NEST
 1766 3d00 DF300000 		_DOLIT  0x7F
 1766      7F000000 
 1767 3d08 E9320000 		_ADR	ANDD
 1768 3d0c 69320000 		_ADR	DUPP	// mask msb
 1769 3d10 25340000 		_ADR	BLANK
 1770 3d14 DF300000 		_DOLIT 	127
 1770      7F000000 
 1771 3d1c 71390000 		_ADR	WITHI	// check for printable
 1772 3d20 79350000 		_ADR	INVER
 1773 3d24 1F310000 		_QBRAN	TCHA1
 1773      383D0000 
 1774 3d2c 59320000 		_ADR	DROP
 1775 3d30 DF300000 		_DOLIT 	'_'	// replace non-printables
 1775      5F000000 
 1776              	TCHA1:
 1777 3d38 BB2E0000 		  _UNNEST
 1778              	
 1779              	/************************
 1780              	    DEPTH	( -- n )
 1781              	 	Return the depth of
 1782              		the data stack.
 1783              	***********************/
 1784 3d3c F43C0000 		_HEADER DEPTH,5,"DEPTH"
 1784      05444550 
 1784      544800BF 
 1785 3d48 4FF6B062 		_MOV32 T2,SPP 
 1785      C2F20102 
 1786 3d50 A2EB0702 		SUB	T2,T2,DSP
 1787 3d54 47F8046D 		_PUSH
 1788 3d58 4FEAA206 		ASR	TOS,T2,#2
 1789 3d5c FFF7AAB8 		_NEXT
 1790              	
 1791              	/*****************************
 1792              	    PICK	( ... +n -- ... w )
 1793              	 	Copy the nth stack item 
ARM GAS  forth.s 			page 146


 1794              		to tos.
 1795              	******************************/
 1796 3d60 403D0000 		_HEADER PICK,4,"PICK"
 1796      04504943 
 1796      4B0000BF 
 1797 3d6c 4FEA8606 		lsl TOS,#2 
 1798 3d70 BE59     		ldr TOS,[DSP,TOS]
 1799 3d72 FFF79FB8 		_NEXT 
 1800              	
 1801              	/*****************************
 1802              		PUT ( xn..x0 w i -- xi...x0 )
 1803              		put value w at position 
 1804              		xi on stack 
 1805              		i in range [0..n] 
 1806              	*****************************/
 1807 3d76 643D0000 		_HEADER PUT,3,"PUT"
 1807      03505554 
 1807      00BF
 1808 3d80 3546     		mov WP,TOS 
 1809 3d82 57F8046B 		_POP 
 1810 3d86 4FEA8505 		lsl WP,#2 
 1811 3d8a 7E51     		str TOS,[DSP,WP]
 1812 3d8c 57F8046B 		_POP 
 1813 3d90 FFF790B8 		_NEXT 
 1814              	
 1815              	/*********************
 1816              	  Memory access
 1817              	*********************/
 1818              	
 1819              	/*************************
 1820              	    HERE	( -- a )
 1821              	 	Return the top of
 1822              		the code dictionary.
 1823              	*************************/
 1824 3d94 7A3D0000 		_HEADER HERE,4,"HERE"
 1824      04484552 
 1824      450000BF 
 1825 3da0 504700BF 		_NEST
 1826 3da4 95380000 		_ADR	CPP
 1827 3da8 75310000 		_ADR	AT
 1828 3dac BB2E0000 		_UNNEST
 1829              	
 1830              	/***************************	
 1831              	    PAD	 ( -- a )
 1832              	 	Return the address of 
 1833              		a temporary buffer.
 1834              	***************************/
 1835 3db0 983D0000 		_HEADER PAD,3,"PAD"
 1835      03504144 
 1836 3db8 504700BF 		_NEST
 1837 3dbc A13D0000 		_ADR	HERE
 1838 3dc0 DF300000 		_DOLIT 80
 1838      50000000 
 1839 3dc8 69330000 		_ADR PLUS 
 1840 3dcc BB2E0000 		_UNNEST
 1841              	
 1842              	/***********************
ARM GAS  forth.s 			page 147


 1843              	    TIB	 ( -- a )
 1844              	 	Return the address 
 1845              		of the terminal 
 1846              		input buffer.
 1847              	************************/
 1848 3dd0 B43D0000 		_HEADER TIB,3,"TIB"
 1848      03544942 
 1849 3dd8 47F8046D 		_PUSH
 1850 3ddc 666B     		ldr TOS,[UP,#TIBUF]
 1851 3dde FFF769B8 		_NEXT
 1852              	
 1853              	/*************************
 1854              		SOURCE-ID, ( -- 0 | -1 )
 1855              	output:
 1856              		-1 	String (via EVALUATE)	
 1857              		0 	User input device
 1858              	*****************************/
 1859 3de2 D43D0000 		_HEADER SOURCID,9,"SOURCE-ID"
 1859      09534F55 
 1859      5243452D 
 1859      4944
 1860 3df0 47F8046D 		_PUSH 
 1861 3df4 A66B     		ldr TOS,[UP,#SRCID]
 1862 3df6 FFF75DB8 		_NEXT 
 1863              	
 1864              	
 1865              	/***********************************
 1866              		SOURCE ( -- a u )
 1867              	output:
 1868              		a  address of transaction buffer 
 1869              		u  # char in buffer 
 1870              	***********************************/
 1871 3dfa E63D0000 		_HEADER SOURCE,6,"SOURCE"
 1871      06534F55 
 1871      52434500 
 1871      00BF
 1872 3e08 504700BF 		_NEST 
 1873 3e0c DF300000 		_DOLIT  UPP+SRC 
 1873      30000020 
 1874 3e14 F1360000 		_ADR   DAT 
 1875 3e18 BB2E0000 		_UNNEST 
 1876              	
 1877              	/*************************
 1878              	    @EXECUTE	( a -- )
 1879              	 	Execute vector stored
 1880              		in address a.
 1881              	*************************/
 1882 3e1c FE3D0000 		_HEADER ATEXE,8,"@EXECUTE"
 1882      08404558 
 1882      45435554 
 1882      450000BF 
 1883 3e2c 3500     		MOVS	WP,TOS
 1884 3e2e 57F8046B 		_POP
 1885 3e32 2D68     		LDR	WP,[WP]
 1886 3e34 45F00105 		ORR	WP,WP,#1
 1887 3e38 18BF     	    IT NE 
 1888 3e3a 2847     		BXNE	WP
ARM GAS  forth.s 			page 148


 1889 3e3c FFF73AB8 		_NEXT
 1890              	
 1891              	/*******************************
 1892              	    CMOVE	( b1 b2 u -- )
 1893              	 	Copy u bytes from b1 to b2.
 1894              	********************************/
 1895 3e40 203E0000 		_HEADER CMOVE,5,"CMOVE"
 1895      05434D4F 
 1895      564500BF 
 1896 3e4c 57F8042B 		LDR	T2,[DSP],#4
 1897 3e50 57F8043B 		LDR	T3,[DSP],#4
 1898 3e54 03E0     		B CMOV1
 1899              	CMOV0:
 1900 3e56 13F8015B 		LDRB	WP,[T3],#1
 1901 3e5a 02F8015B 		STRB	WP,[T2],#1
 1902              	CMOV1:
 1903 3e5e 3600     		MOVS	TOS,TOS
 1904 3e60 02D0     		BEQ	CMOV2
 1905 3e62 A6F10106 		SUB	TOS,TOS,#1
 1906 3e66 F6E7     		B CMOV0
 1907              	CMOV2:
 1908 3e68 57F8046B 		_POP
 1909 3e6c FFF722B8 		_NEXT
 1910              	
 1911              	/***************************
 1912              	    MOVE	( a1 a2 u -- )
 1913              	 	Copy u words from a1 to a2.
 1914              	*******************************/
 1915 3e70 443E0000 		_HEADER MOVE,4,"MOVE"
 1915      044D4F56 
 1915      450000BF 
 1916 3e7c 4FF00400 		MOV T0,#4 
 1917 3e80 06F10306 		ADD TOS,#3 
 1918 3e84 26F00306 		BIC TOS,#3
 1919 3e88 57F8041B 		LDR	T1,[DSP],#4 // dest
 1920 3e8c 57F8042B 		LDR	T2,[DSP],#4 // src 
 1921 3e90 8A42     		CMP T2,T1 
 1922 3e92 08D5     		BPL MOVE1
 1923 3e94 6FF00300 		MOV T0,#-4 
 1924 3e98 3144     		ADD T1,TOS
 1925 3e9a 3244     		ADD T2,TOS 
 1926 3e9c 01E0     		B MOVE3
 1927              	MOVE0:
 1928 3e9e 1568     		LDR	WP,[T2]
 1929 3ea0 0D60     		STR	WP,[T1]
 1930              	MOVE3: 
 1931 3ea2 0144     		ADD T1,T0 
 1932 3ea4 0244     		ADD T2,T0 
 1933              	MOVE1:
 1934 3ea6 3600     		MOVS TOS,TOS
 1935 3ea8 02D0     		BEQ	MOVE2
 1936 3eaa A6F10406 		SUB	TOS,TOS,#4
 1937 3eae F6E7     		B MOVE0
 1938              	MOVE2:
 1939 3eb0 57F8046B 		_POP
 1940 3eb4 FEF7FEBF 		_NEXT
 1941              	
ARM GAS  forth.s 			page 149


 1942              	/**************************
 1943              	    FILL	( b u c -- )
 1944              	 	Fill u bytes of character
 1945              		c to area beginning at b.
 1946              	******************************/
 1947 3eb8 743E0000 		_HEADER FILL,4,"FILL"
 1947      0446494C 
 1947      4C0000BF 
 1948 3ec4 03CF     		LDMFD DSP!,{T0,T1} 
 1949 3ec6 0000     		MOVS T0,T0 
 1950 3ec8 03D0     		BEQ FILL2
 1951              	FILL1:
 1952 3eca 01F8016B 		STRB	TOS,[T1],#1
 1953 3ece 0138     		SUBS	T0,T0,#1
 1954 3ed0 FBD1     		BNE FILL1
 1955              	FILL2:
 1956 3ed2 57F8046B 		_POP
 1957 3ed6 FEF7EDBF 		_NEXT
 1958              	
 1959              	/*****************************
 1960              	    PACK$	( b u a -- a )
 1961              	 	Build a counted word with
 1962              		u characters from b. 
 1963              		Null fill.
 1964              	*****************************/
 1965 3eda BC3E0000 		_HEADER PACKS,5,"PACK$"
 1965      05504143 
 1965      4B24
 1966 3ee4 504700BF 		_NEST
 1967 3ee8 E13C0000 		_ADR	ALGND
 1968 3eec 69320000 		_ADR	DUPP
 1969 3ef0 E5310000 		_ADR	TOR		// strings only on cell boundary
 1970 3ef4 A9320000 		_ADR	OVER
 1971 3ef8 69330000 		_ADR	PLUS
 1972 3efc C5330000 		_ADR	ONEP 
 1973 3f00 DF300000 		_DOLIT 	0xFFFFFFFC
 1973      FCFFFFFF 
 1974 3f08 E9320000 		_ADR	ANDD			// count mod cell
 1975 3f0c DF300000 		_DOLIT 	0
 1975      00000000 
 1976 3f14 79320000 		_ADR	SWAP
 1977 3f18 61310000 		_ADR	STORE			// null fill cell
 1978 3f1c D1310000 		_ADR	RAT
 1979 3f20 DD340000 		_ADR	DDUP
 1980 3f24 81310000 		_ADR	CSTOR
 1981 3f28 C5330000 		_ADR	ONEP			// save count
 1982 3f2c 79320000 		_ADR	SWAP
 1983 3f30 4D3E0000 		_ADR	CMOVE
 1984 3f34 A1310000 		_ADR	RFROM
 1985 3f38 BB2E0000 		_UNNEST   			// move string
 1986              	
 1987              	/***********************************
 1988              	  Numeric output, single precision
 1989              	***********************************/
 1990              	
 1991              	/**************************
 1992              	    DIGIT	( u -- c )
ARM GAS  forth.s 			page 150


 1993              	 	Convert digit u to 
 1994              		a character.
 1995              	***************************/
 1996 3f3c DE3E0000 		_HEADER DIGIT,5,"DIGIT"
 1996      05444947 
 1996      495400BF 
 1997 3f48 504700BF 		_NEST
 1998 3f4c DF300000 		_DOLIT 9
 1998      09000000 
 1999 3f54 A9320000 		_ADR	OVER
 2000 3f58 45360000 		_ADR	LESS
 2001 3f5c DF300000 		_DOLIT	7
 2001      07000000 
 2002 3f64 E9320000 		_ADR	ANDD
 2003 3f68 69330000 		_ADR	PLUS
 2004 3f6c DF300000 		_DOLIT	'0'
 2004      30000000 
 2005 3f74 69330000 		_ADR	PLUS 
 2006 3f78 BB2E0000 		_UNNEST
 2007              	
 2008              	/*********************************
 2009              	    EXTRACT	( ud base -- ud c )
 2010              	 	Extract the least significant
 2011              		digit from positive double.
 2012              	**********************************/
 2013 3f7c 403F0000 		_HEADER EXTRC,7,"EXTRACT"
 2013      07455854 
 2013      52414354 
 2014 3f88 504700BF 		_NEST
 2015 3f8c 293B0000 		_ADR	DSLMOD
 2016 3f90 8D340000 		_ADR	ROT
 2017 3f94 493F0000 		_ADR	DIGIT
 2018 3f98 BB2E0000 		_UNNEST
 2019              	
 2020              	/***************************
 2021              	    <#	  ( -- )
 2022              	 	Initiate the numeric
 2023              		output process.
 2024              	****************************/
 2025 3f9c 803F0000 		_HEADER BDIGS,2,"<#"
 2025      023C2300 
 2026 3fa4 504700BF 		_NEST
 2027 3fa8 B93D0000 		_ADR	PAD
 2028 3fac 69380000 		_ADR	HLD
 2029 3fb0 61310000 		_ADR	STORE
 2030 3fb4 BB2E0000 		_UNNEST
 2031              	
 2032              	/*********************************
 2033              	    HOLD	( c -- )
 2034              	 	Insert a character into the 
 2035              		numeric output string.
 2036              	**********************************/
 2037 3fb8 A03F0000 		_HEADER HOLD,4,"HOLD"
 2037      04484F4C 
 2037      440000BF 
 2038 3fc4 504700BF 		_NEST
 2039 3fc8 69380000 		_ADR	HLD
ARM GAS  forth.s 			page 151


 2040 3fcc 75310000 		_ADR	AT
 2041 3fd0 D5330000 		_ADR	ONEM
 2042 3fd4 69320000 		_ADR	DUPP
 2043 3fd8 69380000 		_ADR	HLD
 2044 3fdc 61310000 		_ADR	STORE
 2045 3fe0 81310000 		_ADR	CSTOR
 2046 3fe4 BB2E0000 		_UNNEST
 2047              	
 2048              	/***********************
 2049              	    #	   ( ud -- ud )
 2050              	 	Extract one digit 
 2051              		from ud and append 
 2052              		the digit to output 
 2053              		string.
 2054              	*************************/
 2055 3fe8 BC3F0000 		_HEADER DIG,1,"#"
 2055      012300BF 
 2056 3ff0 504700BF 		_NEST
 2057 3ff4 D5370000 		_ADR	BASE
 2058 3ff8 75310000 		_ADR	AT
 2059 3ffc 893F0000 		_ADR	EXTRC
 2060 4000 C53F0000 		_ADR	HOLD
 2061 4004 BB2E0000 		_UNNEST
 2062              	
 2063              	/***************************
 2064              	    #S	  ( ud -- 0 )
 2065              	 	Convert ud until all 
 2066              		digits are added to 
 2067              		the output string.
 2068              	***************************/
 2069 4008 EC3F0000 		_HEADER DIGS,2,"#S"
 2069      02235300 
 2070 4010 504700BF 		_NEST
 2071              	DIGS1:
 2072 4014 F13F0000 	    _ADR	DIG
 2073 4018 DD340000 		_ADR	DDUP
 2074 401c FD320000 		_ADR    ORR 
 2075 4020 1F310000 		_QBRAN 	DIGS2
 2075      30400000 
 2076 4028 47310000 		_BRAN	DIGS1
 2076      14400000 
 2077              	DIGS2:
 2078 4030 59320000 		 _ADR DROP 
 2079 4034 BB2E0000 		 _UNNEST
 2080              	
 2081              	/*********************
 2082              	    SIGN	( n -- )
 2083              	 	Add a minus sign
 2084              		to the numeric
 2085              		output string.
 2086              	*********************/
 2087 4038 0C400000 		_HEADER SIGN,4,"SIGN"
 2087      04534947 
 2087      4E0000BF 
 2088 4044 504700BF 		_NEST
 2089 4048 D9320000 		_ADR	ZLESS
 2090 404c 1F310000 		_QBRAN	SIGN1
ARM GAS  forth.s 			page 152


 2090      60400000 
 2091 4054 DF300000 		_DOLIT '-'
 2091      2D000000 
 2092 405c C53F0000 		_ADR	HOLD
 2093              	SIGN1:
 2094 4060 BB2E0000 		  _UNNEST
 2095              	
 2096              	/*************************
 2097              	    #>  ( w -- b u )
 2098              	 	Prepare the output 
 2099              		word to be TYPE'd.
 2100              	************************/
 2101 4064 3C400000 		_HEADER EDIGS,2,"#>"
 2101      02233E00 
 2102 406c 504700BF 		_NEST
 2103 4070 59320000 		_ADR	DROP
 2104 4074 69380000 		_ADR	HLD
 2105 4078 75310000 		_ADR	AT
 2106 407c B93D0000 		_ADR	PAD
 2107 4080 A9320000 		_ADR	OVER
 2108 4084 79330000 		_ADR	SUBB
 2109 4088 BB2E0000 		_UNNEST
 2110              	
 2111              	/**************************
 2112              	    str	 ( n -- b u )
 2113              	 	Convert a signed 
 2114              		integer to a numeric 
 2115              		string.
 2116              	hidden word used by compiler
 2117              	***************************/
 2118              	STRR:
 2119 408c 504700BF 		_NEST
 2120 4090 E13A0000 		_ADR 	STOD 
 2121 4094 69320000 		_ADR	DUPP
 2122 4098 E5310000 		_ADR	TOR
 2123 409c 11350000 		_ADR	DABS
 2124 40a0 A53F0000 		_ADR	BDIGS
 2125 40a4 11400000 		_ADR	DIGS
 2126 40a8 A1310000 		_ADR	RFROM
 2127 40ac 45400000 		_ADR	SIGN
 2128 40b0 6D400000 		_ADR	EDIGS
 2129 40b4 BB2E0000 		_UNNEST
 2130              	
 2131              	/*************************
 2132              	    HEX	 ( -- )
 2133              	 	Use radix 16 as 
 2134              		base for numeric 
 2135              		conversions.
 2136              	*************************/
 2137 40b8 68400000 		_HEADER HEX,3,"HEX"
 2137      03484558 
 2138 40c0 504700BF 		_NEST
 2139 40c4 DF300000 		_DOLIT 16
 2139      10000000 
 2140 40cc D5370000 		_ADR	BASE
 2141 40d0 61310000 		_ADR	STORE
 2142 40d4 BB2E0000 		_UNNEST
ARM GAS  forth.s 			page 153


 2143              	
 2144              	/**************************
 2145              		BIN ( -- )
 2146              		Use radix 2 as 
 2147              		base for numeric 
 2148              		conversion 
 2149              	**************************/
 2150 40d8 BC400000 		_HEADER BIN,3,"BIN"
 2150      0342494E 
 2151 40e0 504700BF 		_NEST 
 2152 40e4 DF300000 		_DOLIT 2 
 2152      02000000 
 2153 40ec D5370000 		_ADR BASE 
 2154 40f0 61310000 		_ADR STORE
 2155 40f4 BB2E0000 		_UNNEST 
 2156              	
 2157              	/************************
 2158              	    DECIMAL	( -- )
 2159              	 	Use radix 10 as base
 2160              		for numeric conversions.
 2161              	*************************/
 2162 40f8 DC400000 		_HEADER DECIM,7,"DECIMAL"
 2162      07444543 
 2162      494D414C 
 2163 4104 504700BF 		_NEST
 2164 4108 DF300000 		_DOLIT 10
 2164      0A000000 
 2165 4110 D5370000 		_ADR	BASE
 2166 4114 61310000 		_ADR	STORE
 2167 4118 BB2E0000 		_UNNEST
 2168              	
 2169              	/************************************
 2170              	  Numeric input
 2171              	***********************************/
 2172              	
 2173              	/***********************************
 2174              	    DIGIT?	( c base -- u t )
 2175              	 	Convert a character to its 
 2176              		numeric value. A flag 
 2177              		indicates success.
 2178              	**********************************/
 2179 411c FC400000 		_HEADER DIGTQ,6,"DIGIT?"
 2179      06444947 
 2179      49543F00 
 2180 4128 504700BF 		_NEST
 2181 412c E5310000 		_ADR	TOR
 2182 4130 DF300000 		_DOLIT 	'0'
 2182      30000000 
 2183 4138 79330000 		_ADR	SUBB
 2184 413c DF300000 		_DOLIT 9
 2184      09000000 
 2185 4144 A9320000 		_ADR	OVER
 2186 4148 45360000 		_ADR	LESS
 2187 414c 1F310000 		_QBRAN	DGTQ1
 2187      74410000 
 2188 4154 DF300000 		_DOLIT 7
 2188      07000000 
ARM GAS  forth.s 			page 154


 2189 415c 79330000 		_ADR	SUBB
 2190 4160 69320000 		_ADR	DUPP
 2191 4164 DF300000 		_DOLIT	10
 2191      0A000000 
 2192 416c 45360000 		_ADR	LESS
 2193 4170 FD320000 		_ADR	ORR
 2194              	DGTQ1:
 2195 4174 69320000 		_ADR	DUPP
 2196 4178 A1310000 		_ADR	RFROM
 2197 417c 2D360000 		_ADR	ULESS
 2198 4180 BB2E0000 		_UNNEST
 2199              	
 2200              	
 2201              	/*****************************************
 2202              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2203              	  convert unsigned double string 
 2204              	  to double integer adding to ud1 
 2205              	input:
 2206              		ud1  unsiged double 
 2207              		adr1  string address 
 2208              		u1    string length 
 2209              	outpout:
 2210              		ud2   modifield ud1 
 2211              		adr2  point to char not converted 
 2212              		u2    char left in string 
 2213              	**************************************/
 2214 4184 20410000 		_HEADER TONBR,7,">NUMBER"
 2214      073E4E55 
 2214      4D424552 
 2215 4190 504700BF 		_NEST 
 2216 4194 69320000 		_ADR DUPP 
 2217 4198 1F310000 		_QBRAN 9f 
 2217      00420000 
 2218 41a0 A9320000 	1: 	_ADR OVER  // d a u a 
 2219 41a4 95310000 		_ADR CAT   // d  a u c 
 2220 41a8 D5370000 		_ADR BASE   
 2221 41ac 75310000 		_ADR AT      // d a u c base
 2222 41b0 29410000 		_ADR DIGTQ   // d a u n flag 
 2223 41b4 1F310000 		_QBRAN 8f
 2223      FC410000 
 2224 41bc E5310000 		_ADR TOR   	 
 2225 41c0 D5330000 		_ADR ONEM 
 2226 41c4 8D320000 		_ADR DSWAP // a u d 
 2227 41c8 D5370000 		_ADR BASE 
 2228 41cc 75310000 		_ADR AT 
 2229 41d0 C93B0000 		_ADR DSTAR 
 2230 41d4 A1310000 		_ADR RFROM 
 2231 41d8 DF300000 		_DOLIT 0    
 2231      00000000 
 2232 41e0 F1340000 		_ADR DPLUS 
 2233 41e4 8D320000 		_ADR DSWAP 
 2234 41e8 79320000 		_ADR SWAP 
 2235 41ec C5330000 		_ADR ONEP
 2236 41f0 79320000 		_ADR SWAP  
 2237 41f4 47310000 		_BRAN 1b 
 2237      A0410000 
 2238 41fc 59320000 	8:  _ADR DROP
ARM GAS  forth.s 			page 155


 2239 4200 BB2E0000 	9:	_UNNEST 
 2240              	
 2241              	
 2242              	/**************************
 2243              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2244              	 check for charcter c 
 2245              	 move pointer if *a==c  
 2246              	**************************/
 2247              	CHARQ:
 2248 4204 7868     	    ldr T0,[DSP,#4]
 2249 4206 10F8011B 	    ldrb T1,[T0],#1 
 2250 420a 3246     	    mov T2,TOS 
 2251 420c 86EA0606 	    eor TOS,TOS
 2252 4210 9142     	    cmp T1,T2
 2253 4212 06D1     	    bne 1f 
 2254 4214 7860     	    str T0,[DSP,#4]
 2255 4216 3868     		ldr T0,[DSP]
 2256 4218 A0F10100 		sub T0,#1 
 2257 421c 3860     		str T0,[DSP]
 2258 421e 6FEA0606 	    mvn TOS,TOS  
 2259 4222 FEF747BE 	1:  _NEXT
 2260              	
 2261              	
 2262              	/*********************************
 2263              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2264              	   skip '-'|'+' return -1 if '-' 
 2265              	   else return 0 
 2266              	*********************************/
 2267              	NEGQ: 
 2268 4226 47F8046D 		_PUSH 
 2269 422a 86EA0606 		eor TOS,TOS // false flag 
 2270 422e 7868     		ldr T0,[DSP,#4]
 2271 4230 10F8011B 		ldrb T1,[T0],#1
 2272 4234 2D29     		cmp T1,#'-' 
 2273 4236 02D0     		beq 1f
 2274 4238 2B29     		cmp T1,#'+'
 2275 423a 07D1     		bne 3f 
 2276 423c 01E0     		b 2f 
 2277 423e 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2278 4242 7860     	2:	str T0,[DSP,#4]
 2279 4244 3868     		ldr T0,[DSP]
 2280 4246 A0F10100 		sub T0,#1 
 2281 424a 3860     		str T0,[DSP]
 2282 424c FEF732BE 	3:	_NEXT 
 2283              	
 2284              	
 2285              	
 2286              	/**********************************
 2287              	    INT?	( a -- n T | a F )
 2288              	 	parse string  at 'a' for 
 2289              		integer. Push a flag on TOS.
 2290              		integer form:
 2291              			[-]hex_digit+  | 
 2292              			$[-]hex_digit+ |
 2293              			%[-]bin_digit+ | 
 2294              			[-]dec_digit+ 
 2295              	**********************************/
ARM GAS  forth.s 			page 156


 2296 4250 88410000 		_HEADER INTQ,4,"INT?"
 2296      04494E54 
 2296      3F0000BF 
 2297 425c 504700BF 		_NEST
 2298              	// save BASE 	
 2299 4260 D5370000 		_ADR	BASE
 2300 4264 75310000 		_ADR	AT
 2301 4268 E5310000 		_ADR	TOR
 2302 426c DF300000 		_DOLIT	0      // a 0 
 2302      00000000 
 2303 4274 A9320000 		_ADR	OVER   // a 0 a 
 2304 4278 09370000 		_ADR	COUNT  // a 0 a+ cnt 
 2305 427c DF300000 		_DOLIT  '$' 
 2305      24000000 
 2306 4284 05420000 		_ADR    CHARQ 
 2307 4288 1F310000 		_QBRAN  0f 
 2307      9C420000 
 2308              	// hexadecimal number 
 2309 4290 C1400000 		_ADR    HEX
 2310 4294 47310000 		_BRAN   2f 
 2310      B4420000 
 2311 429c DF300000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2311      25000000 
 2312 42a4 05420000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2313 42a8 1F310000 		_QBRAN  2f
 2313      B4420000 
 2314 42b0 E1400000 		_ADR	BIN 
 2315              	2: // check if negative number 
 2316 42b4 27420000 		_ADR    NEGQ 
 2317 42b8 E5310000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2318 42bc DF300000 		_DOLIT  0
 2318      00000000 
 2319 42c4 69320000 		_ADR	DUPP 
 2320 42c8 8D320000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2321 42cc 91410000 		_ADR    TONBR // a 0 d a+ cnt 
 2322 42d0 1F310000 		_QBRAN  2f
 2322      EC420000 
 2323              	    // not an integer 
 2324 42d8 A1310000 		_ADR RFROM // a 0 d a sign  
 2325 42dc B5340000 		_ADR DDROP 
 2326 42e0 B5340000 		_ADR DDROP 
 2327 42e4 47310000 		_BRAN 7f 
 2327      14430000 
 2328              	2: // valid integer 
 2329 42ec 59320000 		_ADR	DROP // a 0 d
 2330 42f0 8D320000 		_ADR    DSWAP 
 2331 42f4 B5340000 		_ADR    DDROP 
 2332 42f8 59320000 		_ADR    DROP  // d>s 
 2333 42fc A1310000 		_ADR    RFROM // n sign 
 2334 4300 1F310000 		_QBRAN  2f
 2334      0C430000 
 2335 4308 8D350000 		_ADR    NEGAT   
 2336 430c DF300000 	2:	_DOLIT  -1 
 2336      FFFFFFFF 
 2337              	7: // restore BASE 
 2338 4314 A1310000 		_ADR	RFROM
 2339 4318 D5370000 		_ADR	BASE
ARM GAS  forth.s 			page 157


 2340 431c 61310000 		_ADR	STORE
 2341 4320 BB2E0000 		_UNNEST
 2342              	
 2343              	
 2344              	/********************************
 2345              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2346              	    parse number, integer or float 
 2347              	    if not a number return ( a 0 ) 
 2348              	    if integer return ( int -1 ) 
 2349              	    if float return ( float -2 )
 2350              	**********************************/
 2351 4324 54420000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2351      074E554D 
 2351      4245523F 
 2352 4330 504700BF 	    _NEST 
 2353 4334 5D420000 	    _ADR INTQ
 2354 4338 79340000 	    _ADR QDUP 
 2355 433c 1F310000 	    _QBRAN 2f 
 2355      48430000 
 2356 4344 BB2E0000 	    _UNNEST 
 2357 4348 D9270000 	2:  _ADR FLOATQ
 2358 434c BB2E0000 	    _UNNEST 
 2359              	
 2360              	
 2361              	/********************
 2362              	  console I/O
 2363              	********************/
 2364              	
 2365              	/**********************
 2366              	    SPACE	( -- )
 2367              	 	Send the blank 
 2368              		character to 
 2369              		the output device.
 2370              	************************/
 2371 4350 28430000 		_HEADER SPACE,5,"SPACE"
 2371      05535041 
 2371      434500BF 
 2372 435c 504700BF 		_NEST
 2373 4360 25340000 		_ADR	BLANK
 2374 4364 7D2F0000 		_ADR	EMIT
 2375 4368 BB2E0000 		_UNNEST
 2376              	
 2377              	/***************************
 2378              	    SPACES	( +n -- )
 2379              	 	Send n spaces to the 
 2380              		output device.
 2381              	****************************/
 2382 436c 54430000 		_HEADER SPACS,6,"SPACES"
 2382      06535041 
 2382      43455300 
 2383 4378 504700BF 		_NEST
 2384 437c DF300000 		_DOLIT	0
 2384      00000000 
 2385 4384 8D360000 		_ADR	MAX
 2386 4388 E5310000 		_ADR	TOR
 2387 438c 47310000 		_BRAN	CHAR2
 2387      98430000 
ARM GAS  forth.s 			page 158


 2388              	CHAR1:
 2389 4394 5D430000 		_ADR	SPACE
 2390              	CHAR2:
 2391 4398 01310000 		_DONXT	CHAR1
 2391      94430000 
 2392 43a0 BB2E0000 		_UNNEST
 2393              	
 2394              	/***********************
 2395              	    TYPE	( b u -- )
 2396              	 	Output u characters 
 2397              		from b.
 2398              	************************/
 2399 43a4 70430000 		_HEADER TYPEE,4,"TYPE"
 2399      04545950 
 2399      450000BF 
 2400 43b0 504700BF 		_NEST
 2401 43b4 E5310000 		_ADR  TOR   // ( a+1 -- R: u )
 2402 43b8 47310000 		_BRAN	TYPE2
 2402      CC430000 
 2403              	TYPE1:  
 2404 43c0 09370000 		_ADR  COUNT
 2405 43c4 FD3C0000 		_ADR TCHAR
 2406 43c8 7D2F0000 		_ADR EMIT
 2407              	TYPE2:  
 2408 43cc 01310000 		_DONXT	TYPE1
 2408      C0430000 
 2409 43d4 59320000 		_ADR	DROP
 2410 43d8 BB2E0000 		_UNNEST
 2411              	
 2412              	/***************************
 2413              	    CR	  ( -- )
 2414              	 	Output a carriage return
 2415              		and a line feed.
 2416              	****************************/
 2417 43dc A8430000 		_HEADER CR,2,"CR"
 2417      02435200 
 2418 43e4 504700BF 		_NEST
 2419 43e8 DF300000 		_DOLIT	CRR
 2419      0D000000 
 2420 43f0 7D2F0000 		_ADR	EMIT
 2421 43f4 DF300000 		_DOLIT	LF
 2421      0A000000 
 2422 43fc 7D2F0000 		_ADR	EMIT
 2423 4400 BB2E0000 		_UNNEST
 2424              	
 2425              	/******************************************
 2426              	  do_$	( -- a u )
 2427              	  Return the address of a compiled string.
 2428              	  adjust return address to skip over it.
 2429              	hidden word used by compiler. 
 2430              	******************************************/
 2431              	DOSTR:
 2432 4404 504700BF 		_NEST     
 2433              	/* compiled string address is 2 levels deep */
 2434 4408 A1310000 		_ADR	RFROM	// { -- a1 }
 2435 440c A1310000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2436 4410 69320000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
ARM GAS  forth.s 			page 159


 2437 4414 09370000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2438 4418 69330000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2439 441c E13C0000 		_ADR	ALGND	//  end of string
 2440              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2441 4420 E5310000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2442 4424 79320000 		_ADR	SWAP	//  count tugged
 2443 4428 E5310000 		_ADR	TOR     //  ( -- a2) is string address
 2444 442c 09370000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2445 4430 BB2E0000 		_UNNEST
 2446              	
 2447              	/******************************************
 2448              	    $"|	( -- a u )
 2449              	 	Run time routine compiled by _". 
 2450              		Return address of a compiled string.
 2451              	hidden word used by compiler
 2452              	*****************************************/
 2453              	STRQP:
 2454 4434 504700BF 		_NEST
 2455 4438 05440000 		_ADR	DOSTR
 2456 443c BB2E0000 		_UNNEST			// force a call to dostr
 2457              	
 2458              	
 2459              	/**********************
 2460              	    ."|	( -- )
 2461              	 	Run time routine of ." 
 2462              		Output a compiled string.
 2463              	hidden word used by compiler
 2464              	*****************************/
 2465              	DOTQP:
 2466 4440 504700BF 		_NEST
 2467 4444 05440000 		_ADR	DOSTR
 2468 4448 B1430000 		_ADR	TYPEE 
 2469 444c BB2E0000 		_UNNEST
 2470              	
 2471              	/*************************
 2472              		LPAD  ( n+ -- )
 2473              		emit n spaceS + 
 2474              		base character  
 2475              		16 -> $
 2476              		 2 -> %
 2477              		 other -> none 
 2478              	*************************/
 2479              	LPAD:
 2480 4450 504700BF 		_NEST 
 2481 4454 ED370000 		_ADR BCHR 
 2482 4458 75310000 		_ADR  AT 
 2483 445c 1F310000 		_QBRAN 3f 
 2483      C8440000 
 2484 4464 D5370000 		_ADR BASE 
 2485 4468 75310000 		_ADR AT 
 2486 446c 69320000 		_ADR DUPP 
 2487 4470 DF300000 		_DOLIT 16
 2487      10000000 
 2488 4478 F5350000 		_ADR EQUAL 
 2489 447c 1F310000 		_QBRAN 1f
 2489      A4440000 
 2490 4484 59320000 		_ADR DROP 
ARM GAS  forth.s 			page 160


 2491 4488 DF300000 		_DOLIT '$'
 2491      24000000 
 2492 4490 79320000 	0:	_ADR  SWAP 
 2493 4494 D5330000 		_ADR  ONEM 
 2494 4498 79430000 		_ADR  SPACS 
 2495 449c 7D2F0000 		_ADR  EMIT 
 2496 44a0 BB2E0000 		_UNNEST 
 2497 44a4 DF300000 	1:  _DOLIT 2 
 2497      02000000 
 2498 44ac F5350000 		_ADR EQUAL 
 2499 44b0 1F310000 		_QBRAN 3f
 2499      C8440000 
 2500 44b8 DF300000 		_DOLIT '%'
 2500      25000000 
 2501 44c0 47310000 		_BRAN 0b   	
 2501      90440000 
 2502 44c8 79430000 	3:	_ADR  SPACS 
 2503 44cc BB2E0000 		_UNNEST 
 2504              	
 2505              	
 2506              	/******************************
 2507              	    .R	  ( n +n -- )
 2508              	 	Display an integer in a 
 2509              		field of n columns, 
 2510              		right justified.
 2511              	*******************************/
 2512 44d0 E0430000 		_HEADER DOTR,2,".R"
 2512      022E5200 
 2513 44d8 504700BF 		_NEST
 2514 44dc E5310000 		_ADR	TOR
 2515 44e0 E13A0000 		_ADR    STOD 
 2516 44e4 C1450000 		_ADR	DTOA 
 2517 44e8 A1310000 		_ADR	RFROM
 2518 44ec A9320000 		_ADR	OVER
 2519 44f0 79330000 		_ADR	SUBB
 2520 44f4 51440000 		_ADR    LPAD  
 2521 44f8 B1430000 		_ADR	TYPEE
 2522 44fc BB2E0000 		_UNNEST
 2523              	
 2524              	
 2525              	/*************************
 2526              	    U.R	 ( u +n -- )
 2527              	 	Display an unsigned 
 2528              		integer in n column, 
 2529              		right justified.
 2530              	***************************/
 2531 4500 D4440000 		_HEADER UDOTR,3,"U.R"
 2531      03552E52 
 2532 4508 504700BF 		_NEST
 2533 450c E5310000 		_ADR    TOR 
 2534 4510 DF300000 		_DOLIT  0
 2534      00000000 
 2535 4518 C1450000 		_ADR    DTOA 
 2536 451c A1310000 		_ADR	RFROM
 2537 4520 A9320000 		_ADR	OVER
 2538 4524 79330000 		_ADR	SUBB
 2539 4528 51440000 		_ADR    LPAD  
ARM GAS  forth.s 			page 161


 2540 452c B1430000 		_ADR	TYPEE
 2541 4530 BB2E0000 		_UNNEST
 2542              	
 2543              	
 2544              	/************************
 2545              	    U.	  ( u -- )
 2546              	 	Display an unsigned 
 2547              		integer in free format.
 2548              	***************************/
 2549 4534 04450000 		_HEADER UDOT,2,"U."
 2549      02552E00 
 2550 453c 504700BF 		_NEST
 2551 4540 DF300000 		_DOLIT  0 
 2551      00000000 
 2552 4548 A53F0000 		_ADR	BDIGS
 2553 454c 11400000 		_ADR	DIGS
 2554 4550 6D400000 		_ADR	EDIGS
 2555 4554 DF300000 		_DOLIT  1 
 2555      01000000 
 2556 455c 51440000 		_ADR	LPAD  
 2557 4560 B1430000 		_ADR	TYPEE
 2558 4564 BB2E0000 		_UNNEST
 2559              	
 2560              	
 2561              	/************************
 2562              	    .	   ( w -- )
 2563              	 	Display an integer 
 2564              		in free format, 
 2565              		preceeded by a space.
 2566              	**************************/
 2567 4568 38450000 		_HEADER DOT,1,"."
 2567      012E00BF 
 2568 4570 504700BF 		_NEST
 2569 4574 5D430000 		_ADR    SPACE 
 2570 4578 D5370000 		_ADR	BASE
 2571 457c 75310000 		_ADR	AT
 2572 4580 DF300000 	1:	_DOLIT  10
 2572      0A000000 
 2573 4588 11330000 		_ADR	XORR	// decimal base?
 2574 458c 1F310000 		_QBRAN	DOT1
 2574      9C450000 
 2575 4594 3D450000 		_ADR	UDOT    // no,display unsigned
 2576 4598 BB2E0000 		_UNNEST			
 2577              	DOT1:
 2578 459c E13A0000 		_ADR    STOD 
 2579 45a0 C1450000 	    _ADR	DTOA
 2580 45a4 DF300000 		_DOLIT  1 
 2580      01000000 
 2581 45ac 51440000 		_ADR	LPAD  
 2582 45b0 B1430000 	1:	_ADR	TYPEE
 2583 45b4 BB2E0000 		_UNNEST			// yes, display signed
 2584              	
 2585              	
 2586              	/*************************
 2587              	  D>A ( d -- p u )
 2588              	  convert double integer to 
 2589              	  ASCII string in pad  
ARM GAS  forth.s 			page 162


 2590              	input:
 2591              		d    int64 to convert 
 2592              	output:
 2593              		p     pointer to string  
 2594              		u     string length 
 2595              	**************************/
 2596 45b8 6C450000 		_HEADER DTOA,3,"D>A" 
 2596      03443E41 
 2597 45c0 504700BF 		_NEST
 2598 45c4 69320000 	    _ADR DUPP 
 2599 45c8 E5310000 		_ADR TOR 
 2600 45cc 11350000 		_ADR DABS 
 2601 45d0 A53F0000 		_ADR BDIGS
 2602 45d4 11400000 		_ADR DIGS 
 2603 45d8 A1310000 		_ADR RFROM 
 2604 45dc 45400000 		_ADR SIGN  
 2605 45e0 6D400000 		_ADR EDIGS 
 2606 45e4 BB2E0000 		_UNNEST 
 2607              	
 2608              	
 2609              	/*************************
 2610              	   D. ( d -- )
 2611              	   display double integer 
 2612              	**************************/
 2613 45e8 BC450000 		_HEADER DDOT,2,"D."
 2613      02442E00 
 2614 45f0 504700BF 		_NEST
 2615 45f4 5D430000 		_ADR SPACE 
 2616 45f8 C1450000 		_ADR DTOA 
 2617 45fc DF300000 		_DOLIT 1
 2617      01000000 
 2618 4604 51440000 		_ADR LPAD 
 2619 4608 B1430000 		_ADR TYPEE
 2620 460c BB2E0000 		_UNNEST 
 2621              	
 2622              	/**************************
 2623              		UD. ( d -- )
 2624              		display unsigned double
 2625              	**************************/
 2626 4610 EC450000 		_HEADER UDDOT,3,"UD."
 2626      0355442E 
 2627 4618 504700BF 		_NEST
 2628 461c 5D430000 		_ADR SPACE 
 2629 4620 A53F0000 		_ADR BDIGS
 2630 4624 11400000 		_ADR DIGS 
 2631 4628 6D400000 		_ADR EDIGS 
 2632 462c DF300000 		_DOLIT 1
 2632      01000000 
 2633 4634 51440000 		_ADR LPAD 
 2634 4638 B1430000 		_ADR TYPEE
 2635 463c BB2E0000 		_UNNEST 
 2636              	
 2637              	
 2638              	
 2639              	/***********************
 2640              		H. ( w -- )
 2641              		display integer 
ARM GAS  forth.s 			page 163


 2642              		in hexadecimal 
 2643              	*********************/
 2644 4640 14460000 		_HEADER HDOT,2,"H."
 2644      02482E00 
 2645 4648 504700BF 		_NEST 
 2646 464c D5370000 		_ADR BASE
 2647 4650 75310000 		_ADR AT 
 2648 4654 79320000 		_ADR SWAP
 2649 4658 C1400000 		_ADR HEX
 2650 465c DF300000 		_DOLIT 0 
 2650      00000000 
 2651 4664 A53F0000 		_ADR BDIGS
 2652 4668 11400000 		_ADR DIGS
 2653 466c 6D400000 		_ADR EDIGS
 2654 4670 5D430000 		_ADR SPACE
 2655 4674 DF300000 		_DOLIT '$'
 2655      24000000 
 2656 467c 7D2F0000 		_ADR EMIT 
 2657 4680 B1430000 		_ADR TYPEE
 2658 4684 D5370000 		_ADR BASE
 2659 4688 61310000 		_ADR STORE  
 2660 468c BB2E0000 		_UNNEST 
 2661              	
 2662              	
 2663              	/***********************
 2664              	    ?	   ( a -- )
 2665              	 	Display the contents
 2666              		in a memory cell.
 2667              	*************************/
 2668 4690 44460000 		_HEADER QUEST,1,"?"
 2668      013F00BF 
 2669 4698 504700BF 		_NEST
 2670 469c 75310000 		_ADR	AT
 2671 46a0 71450000 		_ADR	DOT
 2672 46a4 BB2E0000 		_UNNEST
 2673              	
 2674              	/**************
 2675              	  Parsing
 2676              	***************/
 2677              	
 2678              	/*********************************************
 2679              	    parse	( b u c -- b u delta //  string> )
 2680              	 	Scan word delimited by c. 
 2681              		Return found string and its offset.
 2682              	hidden word used by PARSE
 2683              	**********************************************/
 2684              	PARS:
 2685 46a8 504700BF 		_NEST
 2686 46ac F9370000 		_ADR	TEMP
 2687 46b0 61310000 		_ADR	STORE
 2688 46b4 A9320000 		_ADR	OVER
 2689 46b8 E5310000 		_ADR	TOR
 2690 46bc 69320000 		_ADR	DUPP
 2691 46c0 1F310000 		_QBRAN	PARS8
 2691      BC470000 
 2692 46c8 D5330000 		_ADR	ONEM
 2693 46cc F9370000 		_ADR	TEMP
ARM GAS  forth.s 			page 164


 2694 46d0 75310000 		_ADR	AT
 2695 46d4 25340000 		_ADR	BLANK
 2696 46d8 F5350000 		_ADR	EQUAL
 2697 46dc 1F310000 		_QBRAN	PARS3
 2697      30470000 
 2698 46e4 E5310000 		_ADR	TOR
 2699              	PARS1:
 2700 46e8 25340000 		_ADR	BLANK
 2701 46ec A9320000 		_ADR	OVER
 2702 46f0 95310000 		_ADR	CAT	 // skip leading blanks 
 2703 46f4 79330000 		_ADR	SUBB
 2704 46f8 D9320000 		_ADR	ZLESS
 2705 46fc 79350000 		_ADR	INVER
 2706 4700 1F310000 		_QBRAN	PARS2
 2706      2C470000 
 2707 4708 C5330000 		_ADR	ONEP
 2708 470c 01310000 		_DONXT	PARS1
 2708      E8460000 
 2709 4714 A1310000 		_ADR	RFROM
 2710 4718 59320000 		_ADR	DROP
 2711 471c DF300000 		_DOLIT	0
 2711      00000000 
 2712 4724 69320000 		_ADR	DUPP
 2713 4728 BB2E0000 		_UNNEST
 2714              	PARS2:
 2715 472c A1310000 		_ADR	RFROM
 2716              	PARS3:
 2717 4730 A9320000 		_ADR	OVER
 2718 4734 79320000 		_ADR	SWAP
 2719 4738 E5310000 		_ADR	TOR
 2720              	PARS4:
 2721 473c F9370000 		_ADR	TEMP
 2722 4740 75310000 		_ADR	AT
 2723 4744 A9320000 		_ADR	OVER
 2724 4748 95310000 		_ADR	CAT
 2725 474c 79330000 		_ADR	SUBB // scan for delimiter
 2726 4750 F9370000 		_ADR	TEMP
 2727 4754 75310000 		_ADR	AT
 2728 4758 25340000 		_ADR	BLANK
 2729 475c F5350000 		_ADR	EQUAL
 2730 4760 1F310000 		_QBRAN	PARS5
 2730      6C470000 
 2731 4768 D9320000 		_ADR	ZLESS
 2732              	PARS5:
 2733 476c 1F310000 		_QBRAN	PARS6
 2733      90470000 
 2734 4774 C5330000 		_ADR	ONEP
 2735 4778 01310000 		_DONXT	PARS4
 2735      3C470000 
 2736 4780 69320000 		_ADR	DUPP
 2737 4784 E5310000 		_ADR	TOR
 2738 4788 47310000 		_BRAN	PARS7
 2738      A4470000 
 2739              	PARS6:
 2740 4790 A1310000 		_ADR	RFROM
 2741 4794 59320000 		_ADR	DROP
 2742 4798 69320000 		_ADR	DUPP
ARM GAS  forth.s 			page 165


 2743 479c C5330000 		_ADR	ONEP
 2744 47a0 E5310000 		_ADR	TOR
 2745              	PARS7:
 2746 47a4 A9320000 		_ADR	OVER
 2747 47a8 79330000 		_ADR	SUBB
 2748 47ac A1310000 		_ADR	RFROM
 2749 47b0 A1310000 		_ADR	RFROM
 2750 47b4 79330000 		_ADR	SUBB
 2751 47b8 BB2E0000 		_UNNEST
 2752              	PARS8:
 2753 47bc A9320000 		_ADR	OVER
 2754 47c0 A1310000 		_ADR	RFROM
 2755 47c4 79330000 		_ADR	SUBB
 2756 47c8 BB2E0000 		_UNNEST
 2757              	
 2758              	/************************************
 2759              	    PARSE	( c -- b u //  string> )
 2760              	 	Scan input stream and return 
 2761              		counted string delimited by c.
 2762              	************************************/
 2763 47cc 94460000 		_HEADER PARSE,5,"PARSE"
 2763      05504152 
 2763      534500BF 
 2764 47d8 504700BF 		_NEST
 2765 47dc E5310000 		_ADR	TOR
 2766 47e0 D93D0000 		_ADR	TIB
 2767 47e4 25380000 		_ADR	INN
 2768 47e8 75310000 		_ADR	AT
 2769 47ec 69330000 		_ADR	PLUS			// current input buffer pointer
 2770 47f0 3D380000 		_ADR	NTIB
 2771 47f4 75310000 		_ADR	AT
 2772 47f8 25380000 		_ADR	INN
 2773 47fc 75310000 		_ADR	AT
 2774 4800 79330000 		_ADR	SUBB			// remaining count
 2775 4804 A1310000 		_ADR	RFROM
 2776 4808 A9460000 		_ADR	PARS
 2777 480c 25380000 		_ADR	INN
 2778 4810 B5360000 		_ADR	PSTOR
 2779 4814 BB2E0000 		_UNNEST
 2780              	
 2781              	/*******************************
 2782              	    .(	  ( -- )
 2783              	 	Output following string 
 2784              		up to next ) .
 2785              	******************************/
 2786 4818 D0470000 		_HEADER DOTPR,IMEDD+2,".("
 2786      822E2800 
 2787 4820 504700BF 		_NEST
 2788 4824 DF300000 		_DOLIT	')'
 2788      29000000 
 2789 482c D9470000 		_ADR	PARSE
 2790 4830 B1430000 		_ADR	TYPEE
 2791 4834 BB2E0000 		_UNNEST
 2792              	
 2793              	/************************
 2794              	    (	   ( -- )
 2795              	 	Ignore following 
ARM GAS  forth.s 			page 166


 2796              		string up to next )
 2797              		A comment.
 2798              	************************/
 2799 4838 1C480000 		_HEADER PAREN,IMEDD+1,"("
 2799      812800BF 
 2800 4840 504700BF 		_NEST
 2801 4844 DF300000 		_DOLIT	')'
 2801      29000000 
 2802 484c D9470000 		_ADR	PARSE
 2803 4850 B5340000 		_ADR	DDROP
 2804 4854 BB2E0000 		_UNNEST
 2805              	
 2806              	/*******************
 2807              	    \	   ( -- )
 2808              	 	Ignore following 
 2809              		text till the 
 2810              		end of line.
 2811              	********************/
 2812 4858 3C480000 		_HEADER BKSLA,IMEDD+1,"\\"
 2812      815C00BF 
 2813 4860 504700BF 		_NEST
 2814 4864 3D380000 		_ADR	NTIB
 2815 4868 75310000 		_ADR	AT
 2816 486c 25380000 		_ADR	INN
 2817 4870 61310000 		_ADR	STORE
 2818 4874 BB2E0000 		_UNNEST
 2819              	
 2820              	/******************************
 2821              	    CHAR	( -- c )
 2822              	 	Parse next word and
 2823              		return its first character.
 2824              	*******************************/
 2825 4878 5C480000 		_HEADER CHAR,4,"CHAR"
 2825      04434841 
 2825      520000BF 
 2826 4884 504700BF 		_NEST
 2827 4888 25340000 		_ADR	BLANK
 2828 488c D9470000 		_ADR	PARSE
 2829 4890 59320000 		_ADR	DROP
 2830 4894 95310000 		_ADR	CAT
 2831 4898 BB2E0000 		_UNNEST
 2832              	
 2833              	/**********************************
 2834              		[CHAR] ( -- c )
 2835              		immediate version of CHAR 
 2836              	**********************************/
 2837 489c 7C480000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2837      C65B4348 
 2837      41525D00 
 2838 48a8 504700BF 		_NEST 
 2839 48ac 85480000 		_ADR CHAR
 2840 48b0 45510000 		_ADR LITER 
 2841 48b4 BB2E0000 		_UNNEST 
 2842              	
 2843              	/**********************************
 2844              	    WORD	( c -- a //  string> )
 2845              	 	Parse a word from input stream
ARM GAS  forth.s 			page 167


 2846              		and copy it to code dictionary.
 2847              	***********************************/
 2848 48b8 A0480000 		_HEADER WORDD,4,"WORD"
 2848      04574F52 
 2848      440000BF 
 2849 48c4 504700BF 		_NEST
 2850 48c8 D9470000 		_ADR	PARSE
 2851 48cc A13D0000 		_ADR	HERE
 2852 48d0 05340000 		_ADR	CELLP
 2853 48d4 E53E0000 		_ADR	PACKS
 2854 48d8 BB2E0000 		_UNNEST
 2855              	
 2856              	/********************************
 2857              	    TOKEN	( -- a //  string> )
 2858              	 	Parse a word from input 
 2859              		stream and copy it to 
 2860              		name dictionary.
 2861              	*********************************/
 2862 48dc BC480000 		_HEADER TOKEN,5,"TOKEN"
 2862      05544F4B 
 2862      454E00BF 
 2863 48e8 504700BF 		_NEST
 2864 48ec 25340000 		_ADR	BLANK
 2865 48f0 C5480000 		_ADR	WORDD
 2866 48f4 DD4A0000 		_ADR	UPPER 
 2867 48f8 BB2E0000 		_UNNEST
 2868              	
 2869              	/**********************
 2870              	  Dictionary search
 2871              	***********************/
 2872              	
 2873              	/*************************
 2874              	    NAME>	( na -- ca )
 2875              	 	Return a code address
 2876              		given a name address.
 2877              	**************************/
 2878 48fc E0480000 		_HEADER NAMET,5,"NAME>"
 2878      054E414D 
 2878      453E00BF 
 2879 4908 504700BF 		_NEST
 2880 490c 09370000 		_ADR	COUNT
 2881 4910 DF300000 		_DOLIT	0x1F
 2881      1F000000 
 2882 4918 E9320000 		_ADR	ANDD
 2883 491c 69330000 		_ADR	PLUS
 2884 4920 E13C0000 		_ADR	ALGND
 2885 4924 BB2E0000 		_UNNEST
 2886              	
 2887              	/***************************************
 2888              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2889              	 	Compare u bytes in two strings. 
 2890              		Return 0 if identical.
 2891              	
 2892              	  Picatout 2020-12-01, 
 2893              	    Because of problem with .align 
 2894              		directive that doesn't fill 
 2895              		with zero's I had to change 
ARM GAS  forth.s 			page 168


 2896              		the "SAME?" and "SEARCH" 
 2897              	 	words  to do a byte by byte comparison. 
 2898              	****************************************/
 2899 4928 00490000 		_HEADER SAMEQ,5,"SAME?"
 2899      0553414D 
 2899      453F00BF 
 2900 4934 504700BF 		_NEST
 2901 4938 E5310000 		_ADR	TOR
 2902 493c 47310000 		_BRAN	SAME2
 2902      80490000 
 2903              	SAME1:
 2904 4944 A9320000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2905 4948 D1310000 		_ADR	RAT   // a1 a2 a1 u 
 2906 494c 69330000 		_ADR	PLUS  // a1 a2 a1+u 
 2907 4950 95310000 		_ADR	CAT	   // a1 a2 c1    		
 2908 4954 A9320000 		_ADR	OVER  // a1 a2 c1 a2 
 2909 4958 D1310000 		_ADR	RAT    
 2910 495c 69330000 		_ADR	PLUS    
 2911 4960 95310000 		_ADR	CAT	  // a1 a2 c1 c2
 2912 4964 79330000 		_ADR	SUBB  
 2913 4968 79340000 		_ADR	QDUP
 2914 496c 1F310000 		_QBRAN	SAME2
 2914      80490000 
 2915 4974 A1310000 		_ADR	RFROM
 2916 4978 59320000 		_ADR	DROP
 2917 497c BB2E0000 		_UNNEST	// strings not equal
 2918              	SAME2:
 2919 4980 01310000 		_DONXT	SAME1
 2919      44490000 
 2920 4988 DF300000 		_DOLIT	0
 2920      00000000 
 2921 4990 BB2E0000 		_UNNEST	// strings equal
 2922              	
 2923              	/***********************************
 2924              	    SEARCH	( a na -- ca na | a F )
 2925              	 	Search a vocabulary for a string.
 2926              		Return ca and na if succeeded.
 2927              	hidden word used by NAME?
 2928              	
 2929              	  Picatout 2020-12-01,  
 2930              		 Modified from original. 
 2931              	   See comment for word "SAME?" 
 2932              	************************************/
 2933              	SEARCH:
 2934 4994 504700BF 		_NEST
 2935 4998 79320000 		_ADR	SWAP			// na a	
 2936 499c 09370000 		_ADR	COUNT			// na a+1 count
 2937 49a0 69320000 		_ADR	DUPP 
 2938 49a4 F9370000 		_ADR	TEMP
 2939 49a8 61310000 		_ADR	STORE			// na a+1 count 
 2940 49ac E5310000 		_ADR  TOR		// na a+1  R: count  
 2941 49b0 79320000 		_ADR	SWAP			// a+1 na
 2942              	SEARCH1:
 2943 49b4 69320000 		_ADR	DUPP			// a+1 na na
 2944 49b8 1F310000 		_QBRAN	SEARCH6	// end of vocabulary
 2944      0C4A0000 
 2945 49c0 69320000 		_ADR	DUPP			// a+1 na na
ARM GAS  forth.s 			page 169


 2946 49c4 95310000 		_ADR	CAT			// a+1 na name1
 2947 49c8 DF300000 		_DOLIT	MASKK
 2947      1FFFFFFF 
 2948 49d0 E9320000 		_ADR	ANDD
 2949 49d4 D1310000 		_ADR	RAT			// a+1 na name1 count 
 2950 49d8 11330000 		_ADR	XORR			// a+1 na,  same length?
 2951 49dc 1F310000 		_QBRAN	SEARCH2
 2951      F4490000 
 2952 49e4 15340000 		_ADR	CELLM			// a+1 la
 2953 49e8 75310000 		_ADR	AT			// a+1 next_na
 2954 49ec 47310000 		_BRAN	SEARCH1			// try next word
 2954      B4490000 
 2955              	SEARCH2:   
 2956 49f4 C5330000 		_ADR	ONEP			// a+1 na+1
 2957 49f8 F9370000 		_ADR	TEMP
 2958 49fc 75310000 		_ADR	AT			// a+1 na+1 count
 2959 4a00 35490000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2960              	SEARCH3:	
 2961 4a04 47310000 		_BRAN	SEARCH4
 2961      244A0000 
 2962              	SEARCH6:	
 2963 4a0c A1310000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2964 4a10 59320000 		_ADR	DROP			// a+1 0
 2965 4a14 79320000 		_ADR	SWAP			// 0 a+1
 2966 4a18 D5330000 		_ADR	ONEM			// 0 a
 2967 4a1c 79320000 		_ADR	SWAP			// a 0 
 2968 4a20 BB2E0000 		_UNNEST			// return without a match
 2969              	SEARCH4:	
 2970 4a24 1F310000 		_QBRAN	SEARCH5			// a+1 na+1
 2970      404A0000 
 2971 4a2c D5330000 		_ADR	ONEM			// a+1 na
 2972 4a30 15340000 		_ADR	CELLM			// a+4 la
 2973 4a34 75310000 		_ADR	AT			// a+1 next_na
 2974 4a38 47310000 		_BRAN	SEARCH1			// compare next name
 2974      B4490000 
 2975              	SEARCH5:	
 2976 4a40 A1310000 		_ADR	RFROM			// a+1 na+1 count
 2977 4a44 59320000 		_ADR	DROP			// a+1 na+1
 2978 4a48 79320000 		_ADR	SWAP			// na+1 a+1
 2979 4a4c 59320000 		_ADR	DROP			// na+1
 2980 4a50 D5330000 		_ADR	ONEM			// na
 2981 4a54 69320000 		_ADR	DUPP			// na na
 2982 4a58 09490000 		_ADR	NAMET			// na ca
 2983 4a5c 79320000 		_ADR	SWAP			// ca na
 2984 4a60 BB2E0000 		_UNNEST			//  return with a match
 2985              	
 2986              	/********************************
 2987              	    NAME?	( a -- ca na | a F )
 2988              	 	Search all context vocabularies 
 2989              		for a string.
 2990              	***********************************/
 2991 4a64 2C490000 		_HEADER NAMEQ,5,"NAME?"
 2991      054E414D 
 2991      453F00BF 
 2992 4a70 504700BF 		_NEST
 2993 4a74 81380000 		_ADR	CNTXT
 2994 4a78 75310000 		_ADR	AT
ARM GAS  forth.s 			page 170


 2995 4a7c 95490000 		_ADR	SEARCH
 2996 4a80 BB2E0000 		_UNNEST
 2997              	
 2998              	/********************
 2999              	  console input
 3000              	********************/
 3001              	
 3002              	/****************************
 3003              		ASCIZ ( a -- a+ )
 3004              		convert counted string to 
 3005              		null terminated string 
 3006              		in pad.
 3007              	*****************************/
 3008 4a84 684A0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3008      05415343 
 3008      495A00BF 
 3009 4a90 504700BF 		_NEST 
 3010 4a94 09370000 		_ADR COUNT
 3011 4a98 69320000 		_ADR DUPP
 3012 4a9c E5310000 		_ADR TOR 
 3013 4aa0 B93D0000 		_ADR PAD 
 3014 4aa4 79320000 		_ADR SWAP
 3015 4aa8 7D3E0000 		_ADR MOVE  
 3016 4aac B93D0000 		_ADR PAD 
 3017 4ab0 A1310000 		_ADR RFROM
 3018 4ab4 69330000 		_ADR PLUS 
 3019 4ab8 DF300000 		_DOLIT 0 
 3019      00000000 
 3020 4ac0 79320000 		_ADR SWAP  
 3021 4ac4 81310000 		_ADR CSTOR
 3022 4ac8 B93D0000 		_ADR PAD   
 3023 4acc BB2E0000 		_UNNEST 
 3024              	
 3025              	/***********************
 3026              		UPPER (cstring -- cstring )
 3027              		convert to upper case in situ
 3028              	*******************************/
 3029 4ad0 884A0000 		_HEADER UPPER,5,"UPPER"
 3029      05555050 
 3029      455200BF 
 3030 4adc 504700BF 		_NEST 
 3031 4ae0 69320000 		_ADR DUPP 
 3032 4ae4 E5310000 		_ADR TOR 
 3033 4ae8 09370000 		_ADR COUNT
 3034 4aec DF300000 		_DOLIT 0x1f
 3034      1F000000 
 3035 4af4 E9320000 		_ADR ANDD
 3036 4af8 E5310000 		_ADR TOR 
 3037 4afc 47310000 		_BRAN 3f
 3037      504B0000 
 3038 4b04 69320000 	1:  _ADR DUPP 
 3039 4b08 09370000 		_ADR COUNT 
 3040 4b0c 69320000 		_ADR DUPP 
 3041 4b10 DF300000 		_DOLIT 'a'-1
 3041      60000000 
 3042 4b18 75360000 		_ADR GREAT
 3043 4b1c 1F310000 		_QBRAN 2f 
ARM GAS  forth.s 			page 171


 3043      484B0000 
 3044 4b24 69320000 		_ADR DUPP 
 3045 4b28 DF300000 		_DOLIT 'z'+1 
 3045      7B000000 
 3046 4b30 45360000 		_ADR LESS 
 3047 4b34 1F310000 		_QBRAN 2f 
 3047      484B0000 
 3048 4b3c DF300000 		_DOLIT 0x5f  
 3048      5F000000 
 3049 4b44 E9320000 		_ADR ANDD
 3050 4b48 8D340000 	2:	_ADR ROT
 3051 4b4c 81310000 		_ADR CSTOR
 3052 4b50 01310000 	3:  _DONXT 1b
 3052      044B0000 
 3053 4b58 59320000 		_ADR DROP 
 3054 4b5c A1310000 		_ADR RFROM
 3055 4b60 BB2E0000 		_UNNEST 
 3056              	
 3057              	/**************************************
 3058              	   BKSP  ( bot eot cur -- bot eot cur )
 3059              	   Move cursor left by one character.
 3060              	hidden word used by KTAP
 3061              	***************************************/
 3062              	BKSP:
 3063 4b64 504700BF 		_NEST
 3064 4b68 E5310000 		_ADR	TOR
 3065 4b6c A9320000 		_ADR	OVER
 3066 4b70 A1310000 		_ADR	RFROM
 3067 4b74 79320000 		_ADR	SWAP
 3068 4b78 A9320000 		_ADR	OVER
 3069 4b7c 11330000 		_ADR	XORR
 3070 4b80 1F310000 		_QBRAN	BACK1
 3070      AC4B0000 
 3071 4b88 DF300000 		_DOLIT	BKSPP
 3071      08000000 
 3072 4b90 7D2F0000 		_ADR	EMIT
 3073 4b94 D5330000 		_ADR	ONEM
 3074 4b98 25340000 		_ADR	BLANK
 3075 4b9c 7D2F0000 		_ADR	EMIT
 3076 4ba0 DF300000 		_DOLIT	BKSPP
 3076      08000000 
 3077 4ba8 7D2F0000 		_ADR	EMIT
 3078              	BACK1:
 3079 4bac BB2E0000 		  _UNNEST
 3080              	
 3081              	/****************************************
 3082              	   TAP	 ( bot eot cur c -- bot eot cur )
 3083              	   Accept and echo the key stroke 
 3084              	   and bump the cursor.
 3085              	hidden word used by KTAP 
 3086              	****************************************/
 3087              	TAP:
 3088 4bb0 504700BF 		_NEST
 3089 4bb4 69320000 		_ADR	DUPP
 3090 4bb8 7D2F0000 		_ADR	EMIT
 3091 4bbc A9320000 		_ADR	OVER
 3092 4bc0 81310000 		_ADR	CSTOR
ARM GAS  forth.s 			page 172


 3093 4bc4 C5330000 		_ADR	ONEP
 3094 4bc8 BB2E0000 		_UNNEST
 3095              	
 3096              	
 3097              	/*******************************************
 3098              	    kTAP	( bot eot cur c -- bot eot cur )
 3099              	 	Process a key stroke, CR or backspace.
 3100              	hidden word used by ACCEPT 
 3101              	*******************************************/
 3102              	KTAP:
 3103              	TTAP:
 3104 4bcc 504700BF 		_NEST
 3105 4bd0 69320000 		_ADR	DUPP
 3106 4bd4 DF300000 		_DOLIT	CRR
 3106      0D000000 
 3107 4bdc 11330000 		_ADR	XORR
 3108 4be0 1F310000 		_QBRAN  KTAP2
 3108      104C0000 
 3109 4be8 DF300000 		_DOLIT	BKSPP
 3109      08000000 
 3110 4bf0 11330000 		_ADR	XORR
 3111 4bf4 1F310000 		_QBRAN	KTAP1
 3111      084C0000 
 3112 4bfc 25340000 		_ADR	BLANK
 3113 4c00 B14B0000 		_ADR	TAP
 3114 4c04 BB2E0000 		_UNNEST
 3115              	//	.word	0			// patch
 3116              	KTAP1:
 3117 4c08 654B0000 		_ADR	BKSP
 3118 4c0c BB2E0000 		_UNNEST
 3119              	KTAP2:
 3120 4c10 59320000 		_ADR	DROP
 3121 4c14 79320000 		_ADR	SWAP
 3122 4c18 59320000 		_ADR	DROP
 3123 4c1c 69320000 		_ADR	DUPP
 3124 4c20 BB2E0000 		_UNNEST
 3125              	
 3126              	/************************************
 3127              	    ACCEPT	( b u -- b u )
 3128              	 	Accept characters to input 
 3129              		buffer. Return with actual count.
 3130              	*************************************/
 3131 4c24 D44A0000 		_HEADER ACCEP,6,"ACCEPT"
 3131      06414343 
 3131      45505400 
 3132 4c30 504700BF 		_NEST
 3133 4c34 A9320000 		_ADR	OVER
 3134 4c38 69330000 		_ADR	PLUS
 3135 4c3c A9320000 		_ADR	OVER
 3136              	ACCP1:
 3137 4c40 DD340000 		_ADR	DDUP
 3138 4c44 11330000 		_ADR	XORR
 3139 4c48 1F310000 		_QBRAN	ACCP4
 3139      884C0000 
 3140 4c50 592F0000 		_ADR	KEY
 3141 4c54 69320000 		_ADR	DUPP
 3142 4c58 25340000 		_ADR	BLANK
ARM GAS  forth.s 			page 173


 3143 4c5c DF300000 		_DOLIT 127
 3143      7F000000 
 3144 4c64 71390000 		_ADR	WITHI
 3145 4c68 1F310000 		_QBRAN	ACCP2
 3145      7C4C0000 
 3146 4c70 B14B0000 		_ADR	TAP
 3147 4c74 47310000 		_BRAN	ACCP3
 3147      804C0000 
 3148              	ACCP2:
 3149 4c7c CD4B0000 		_ADR	KTAP
 3150              	ACCP3:	  
 3151 4c80 47310000 		_BRAN	ACCP1
 3151      404C0000 
 3152              	ACCP4:
 3153 4c88 59320000 		_ADR	DROP
 3154 4c8c A9320000 		_ADR	OVER
 3155 4c90 79330000 		_ADR	SUBB
 3156 4c94 BB2E0000 		_UNNEST
 3157              	
 3158              	/*****************************
 3159              	    QUERY	( -- )
 3160              	 	Accept input stream 
 3161              		to terminal input buffer.
 3162              	******************************/
 3163 4c98 284C0000 		_HEADER QUERY,5,"QUERY"
 3163      05515545 
 3163      525900BF 
 3164 4ca4 504700BF 		_NEST
 3165 4ca8 D93D0000 		_ADR	TIB
 3166 4cac DF300000 		_DOLIT 80
 3166      50000000 
 3167 4cb4 314C0000 		_ADR	ACCEP
 3168 4cb8 3D380000 		_ADR	NTIB
 3169 4cbc 61310000 		_ADR	STORE
 3170 4cc0 59320000 		_ADR	DROP
 3171 4cc4 DF300000 		_DOLIT	0
 3171      00000000 
 3172 4ccc 25380000 		_ADR	INN
 3173 4cd0 61310000 		_ADR	STORE
 3174 4cd4 BB2E0000 		_UNNEST
 3175              	
 3176              	/********************
 3177              	  Error handling
 3178              	********************/
 3179              	
 3180              	/*********************
 3181              	    ABORT	( a -- )
 3182              	 	Reset data stack 
 3183              		and jump to QUIT.
 3184              	**********************/
 3185 4cd8 9C4C0000 		_HEADER ABORT,5,"ABORT"
 3185      0541424F 
 3185      525400BF 
 3186 4ce4 504700BF 		_NEST
 3187              	ABORT1: 
 3188 4ce8 C14D0000 		_ADR    LBRAC  
 3189 4cec 414F0000 		_ADR	PRESE
ARM GAS  forth.s 			page 174


 3190 4cf0 47310000 		_BRAN	QUIT
 3190      7C4F0000 
 3191              	
 3192              	
 3193              	/*******************************
 3194              		PRT_ABORT ( a -- )
 3195              	    print message and abort 
 3196              	input:
 3197              		a   address of counted string 	
 3198              	
 3199              	hidden word 
 3200              	*******************************/
 3201              	PRT_ABORT:
 3202 4cf8 504700BF 		_NEST 
 3203 4cfc 5D430000 		_ADR SPACE 
 3204 4d00 09370000 		_ADR COUNT 
 3205 4d04 B1430000 		_ADR TYPEE 
 3206 4d08 5D430000 		_ADR  SPACE 
 3207 4d0c DF300000 		_DOLIT '?'
 3207      3F000000 
 3208 4d14 7D2F0000 		_ADR    EMIT 
 3209 4d18 E5430000 		_ADR    CR 
 3210 4d1c 47310000 		_BRAN   ABORT1 
 3210      E84C0000 
 3211              	
 3212              	
 3213              	
 3214              	
 3215              	/*******************************
 3216              	    _abort"	( f -- )
 3217              	 	Run time routine of ABORT"
 3218              		Abort with a message.
 3219              	hidden used by compiler 
 3220              	********************************/
 3221              	ABORQ:
 3222 4d24 504700BF 		_NEST
 3223 4d28 05440000 		_ADR	DOSTR
 3224 4d2c 8D340000 		_ADR	ROT  
 3225 4d30 1F310000 		_QBRAN	1f	// error flag
 3225      4C4D0000 
 3226 4d38 5D430000 		_ADR    SPACE 
 3227 4d3c B1430000 		_ADR    TYPEE
 3228 4d40 E5430000 		_ADR    CR  
 3229 4d44 47310000 		_BRAN   ABORT1
 3229      E84C0000 
 3230              	1:
 3231 4d4c B5340000 		_ADR	DDROP
 3232 4d50 BB2E0000 		_UNNEST			// drop message
 3233              	
 3234              	
 3235              	/************************
 3236              	  The text interpreter
 3237              	************************/
 3238              	
 3239              	/***************************
 3240              	    $INTERPRET  ( a -- )
 3241              	 	Interpret a word. 
ARM GAS  forth.s 			page 175


 3242              		If failed, try to 
 3243              		convert it to an integer.
 3244              	******************************/
 3245 4d54 DC4C0000 		_HEADER INTER,10,"$INTERPRET"
 3245      0A24494E 
 3245      54455250 
 3245      52455400 
 3246 4d64 504700BF 		_NEST
 3247 4d68 714A0000 		_ADR	NAMEQ
 3248 4d6c 79340000 		_ADR	QDUP	// ?defined
 3249 4d70 1F310000 		_QBRAN	INTE1
 3249      A44D0000 
 3250 4d78 75310000 		_ADR	AT
 3251 4d7c DF300000 		_DOLIT	COMPO
 3251      40000000 
 3252 4d84 E9320000 		_ADR	ANDD	// ?compile only lexicon bits
 3253 4d88 254D0000 		_ABORQ	13," compile only"
 3253      0D20636F 
 3253      6D70696C 
 3253      65206F6E 
 3253      6C7900BF 
 3254 4d9c F5300000 		_ADR	EXECU
 3255 4da0 BB2E0000 		_UNNEST			// execute defined word
 3256              	INTE1:
 3257 4da4 31430000 		_ADR	NUMBERQ
 3258 4da8 1F310000 		_QBRAN	INTE2
 3258      B44D0000 
 3259 4db0 BB2E0000 		_UNNEST
 3260              	INTE2:
 3261 4db4 F94C0000 		_ADR	PRT_ABORT	// error
 3262              	
 3263              	/******************************
 3264              	    [	   ( -- )
 3265              	 	Start the text interpreter.
 3266              	*******************************/
 3267 4db8 584D0000 		_HEADER LBRAC,IMEDD+1,"["
 3267      815B00BF 
 3268 4dc0 504700BF 		_NEST
 3269 4dc4 DF300000 		_DOLIT	INTER
 3269      644D0000 
 3270 4dcc 55380000 		_ADR	TEVAL
 3271 4dd0 61310000 		_ADR	STORE
 3272 4dd4 DF300000 		_DOLIT  0 
 3272      00000000 
 3273 4ddc 5D370000 		_ADR    STATE 
 3274 4de0 61310000 		_ADR    STORE 
 3275 4de4 BB2E0000 		_UNNEST
 3276              	
 3277              	/**********************
 3278              	    .OK	 ( -- )
 3279              	 	Display "ok" only 
 3280              		while interpreting.
 3281              	************************/
 3282 4de8 BC4D0000 		_HEADER DOTOK,3,".OK"
 3282      032E4F4B 
 3283 4df0 504700BF 		_NEST
 3284 4df4 DF300000 		_DOLIT	INTER
ARM GAS  forth.s 			page 176


 3284      644D0000 
 3285 4dfc 55380000 		_ADR	TEVAL
 3286 4e00 75310000 		_ADR	AT
 3287 4e04 F5350000 		_ADR	EQUAL
 3288 4e08 1F310000 		_QBRAN	DOTO1
 3288      184E0000 
 3289 4e10 41440000 		_DOTQP	3," ok"
 3289      03206F6B 
 3290              	DOTO1:
 3291 4e18 E5430000 		_ADR	CR
 3292 4e1c BB2E0000 		_UNNEST
 3293              	
 3294              	/*************************
 3295              	    ?STACK	( -- )
 3296              	 	Abort if the data 
 3297              		stack underflows.
 3298              	************************/
 3299 4e20 EC4D0000 		_HEADER QSTAC,6,"?STACK"
 3299      063F5354 
 3299      41434B00 
 3300 4e2c 504700BF 		_NEST
 3301 4e30 493D0000 		_ADR	DEPTH
 3302 4e34 D9320000 		_ADR	ZLESS	// check only for underflow
 3303 4e38 254D0000 		_ABORQ	9,"underflow"
 3303      09756E64 
 3303      6572666C 
 3303      6F7700BF 
 3304 4e48 BB2E0000 		_UNNEST
 3305              	
 3306              	/*******************
 3307              	    EVAL	( -- )
 3308              	 	Interpret the 
 3309              		input stream.
 3310              	*******************/
 3311 4e4c 244E0000 		_HEADER EVAL,4,"EVAL"
 3311      04455641 
 3311      4C0000BF 
 3312 4e58 504700BF 		_NEST
 3313              	EVAL1:
 3314 4e5c E9480000 	    _ADR	TOKEN
 3315 4e60 69320000 		_ADR	DUPP
 3316 4e64 95310000 		_ADR	CAT	// ?input stream empty
 3317 4e68 1F310000 		_QBRAN	EVAL2
 3317      844E0000 
 3318 4e70 55380000 		_ADR	TEVAL
 3319 4e74 2D3E0000 		_ADR	ATEXE
 3320 4e78 2D4E0000 		_ADR	QSTAC	// evaluate input, check stack
 3321 4e7c 47310000 		_BRAN	EVAL1
 3321      5C4E0000 
 3322              	EVAL2:
 3323 4e84 59320000 		_ADR	DROP
 3324 4e88 F14D0000 		_ADR	DOTOK
 3325 4e8c BB2E0000 		_UNNEST	// prompt
 3326              	
 3327              	
 3328              	/******************************
 3329              		EVALUATE ( ix* a u -- jx* )
ARM GAS  forth.s 			page 177


 3330              	    interpret string 
 3331              	input:
 3332              	    ix*  argument required 
 3333              		a   address string to interpret 
 3334              		u   str length 
 3335              	output:
 3336              		jx*  evalution results 
 3337              	***********************************/
 3338 4e90 504E0000 		_HEADER EVALUATE,8,"EVALUATE"
 3338      08455641 
 3338      4C554154 
 3338      450000BF 
 3339 4ea0 504700BF 		_NEST 
 3340              		// save original source specs
 3341 4ea4 DF300000 		_DOLIT UPP+TOIN 
 3341      2C000020 
 3342 4eac 69320000 		_ADR   DUPP 
 3343 4eb0 75310000 		_ADR  AT 
 3344 4eb4 E5310000 		_ADR   TOR 
 3345 4eb8 DF300000 		_DOLIT  0
 3345      00000000 
 3346 4ec0 79320000 		_ADR  SWAP
 3347 4ec4 61310000 		_ADR   STORE 
 3348 4ec8 DF300000 		_DOLIT UPP+SRC 
 3348      30000020 
 3349 4ed0 F1360000 		_ADR   DAT 
 3350 4ed4 F9310000 		_ADR   DTOR 
 3351 4ed8 DF300000 		_DOLIT -1
 3351      FFFFFFFF 
 3352 4ee0 DF300000 		_DOLIT UPP+SRCID 
 3352      38000020 
 3353 4ee8 61310000 		_ADR   STORE 
 3354 4eec DF300000 		_DOLIT UPP+SRC 
 3354      30000020 
 3355 4ef4 D1360000 		_ADR   DSTOR
 3356 4ef8 594E0000 		_ADR   EVAL 
 3357              	    // restore original source specs 
 3358 4efc B5310000 		_ADR   DRFROM 
 3359 4f00 DF300000 		_DOLIT UPP+SRC 
 3359      30000020 
 3360 4f08 D1360000 		_ADR   DSTOR 
 3361 4f0c A1310000 		_ADR   RFROM 
 3362 4f10 DF300000 		_DOLIT UPP+TOIN 
 3362      2C000020 
 3363 4f18 61310000 		_ADR   STORE 
 3364 4f1c DF300000 		_DOLIT 0 
 3364      00000000 
 3365 4f24 DF300000 		_DOLIT UPP+SRCID 
 3365      38000020 
 3366 4f2c 61310000 		_ADR   STORE 
 3367 4f30 BB2E0000 		_UNNEST 
 3368              	
 3369              	
 3370              	/**********************************
 3371              	    PRESET	( -- )
 3372              	 	Reset data stack pointer 
 3373              		and the terminal input buffer.
ARM GAS  forth.s 			page 178


 3374              	**********************************/
 3375 4f34 944E0000 		_HEADER PRESE,6,"PRESET"
 3375      06505245 
 3375      53455400 
 3376 4f40 504700BF 		_NEST 
 3377 4f44 DF300000 		_DOLIT SPP 
 3377      B0FE0120 
 3378 4f4c 25320000 		_ADR SPSTOR
 3379 4f50 DF300000 		_DOLIT TIBB        
 3379      B0FE0120 
 3380 4f58 DF300000 		_DOLIT 0   
 3380      00000000 
 3381 4f60 DF300000 		_DOLIT UPP+SRC  
 3381      30000020 
 3382 4f68 D1360000 		_ADR   DSTOR    
 3383 4f6c BB2E0000 		_UNNEST 
 3384              	
 3385              	/*********************
 3386              	    QUIT	( -- )
 3387              	 	Reset return stack 
 3388              		pointer and start 
 3389              		text interpreter.
 3390              	***********************/
 3391 4f70 384F0000 		_HEADER QUIT,4,"QUIT"
 3391      04515549 
 3391      540000BF 
 3392 4f7c DF300000 		_DOLIT RPP 
 3392      80FF0120 
 3393 4f84 15320000 		_ADR RPSTOR 
 3394              	QUIT1:
 3395 4f88 C14D0000 		_ADR	LBRAC			// start interpretation
 3396              	QUIT2:
 3397 4f8c A54C0000 		_ADR	QUERY			// get input
 3398 4f90 594E0000 		_ADR	EVAL
 3399 4f94 47310000 		_BRAN	QUIT2	// continue till error
 3399      8C4F0000 
 3400              	
 3401              	/***************************
 3402              		FORGET ( <string> -- )
 3403              		forget all definition 
 3404              		starting at <string>
 3405              	****************************/
 3406 4f9c 744F0000 		_HEADER FORGET,6,"FORGET"
 3406      06464F52 
 3406      47455400 
 3407 4fa8 504700BF 		_NEST 
 3408 4fac E9480000 		_ADR TOKEN 
 3409 4fb0 69320000 		_ADR DUPP 
 3410 4fb4 1F310000 		_QBRAN 9f 
 3410      F04F0000 
 3411 4fbc 714A0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3412 4fc0 79340000 		_ADR QDUP 
 3413 4fc4 1F310000 		_QBRAN 8f
 3413      EC4F0000 
 3414 4fcc 15340000 		_ADR CELLM // ( ca la )
 3415 4fd0 69320000 		_ADR DUPP 
 3416 4fd4 95380000 		_ADR CPP   
ARM GAS  forth.s 			page 179


 3417 4fd8 61310000 		_ADR STORE
 3418 4fdc 75310000 		_ADR AT 
 3419 4fe0 C1380000 		_ADR LAST 
 3420 4fe4 61310000 		_ADR STORE
 3421 4fe8 95560000 		_ADR OVERT 
 3422 4fec 59320000 	8:  _ADR DROP 
 3423 4ff0 BB2E0000 	9:	_UNNEST 
 3424              	
 3425              		.p2align 2 
 3426              	
 3427              	/*****************
 3428              	  The compiler
 3429              	******************/
 3430              	
 3431              	/**************************************
 3432              		POSTPONE <name> ( -- )
 3433              		use to compile immediate word 
 3434              	**************************************/
 3435 4ff4 A04F0000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3435      C8504F53 
 3435      54504F4E 
 3435      450000BF 
 3436 5004 504700BF 		_NEST 
 3437 5008 41500000 		_ADR ITICK
 3438 500c 01570000 		_ADR CALLC  
 3439 5010 BB2E0000 		_UNNEST 
 3440              	
 3441              	
 3442              	/**************************************
 3443              	    '	   ( -- ca )
 3444              	 	Search context vocabularies 
 3445              		for the next word in input stream.
 3446              	***************************************/
 3447 5014 F84F0000 		_HEADER TICK,1,"'"
 3447      012700BF 
 3448 501c 504700BF 		_NEST
 3449 5020 E9480000 		_ADR	TOKEN
 3450 5024 714A0000 		_ADR	NAMEQ	// ?defined
 3451 5028 1F310000 		_QBRAN	TICK1
 3451      34500000 
 3452 5030 BB2E0000 		_UNNEST	// yes, push code address
 3453              	TICK1:
 3454 5034 F94C0000 		_ADR PRT_ABORT	// error
 3455              	
 3456              	/*****************************************
 3457              		['] ( -- ca )
 3458              		immediate version of ' 
 3459              	****************************************/
 3460 5038 18500000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3460      C35B275D 
 3461 5040 504700BF 		_NEST 
 3462 5044 1D500000 		_ADR TICK  
 3463 5048 BB2E0000 		_UNNEST 
 3464              	
 3465              	
 3466              	/***********************************
 3467              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
ARM GAS  forth.s 			page 180


 3468              		search all context for name at 
 3469              		c-adr 
 3470              	input:
 3471              		c-adr   name 
 3472              	output:
 3473              		c-adr  0   not found 
 3474              		xt 1   found word immediate 
 3475              		xt -1  found normal word 
 3476              	***********************************/
 3477 504c 3C500000 		_HEADER FIND,4,"FIND"
 3477      0446494E 
 3477      440000BF 
 3478 5058 504700BF 		_NEST 
 3479 505c 714A0000 		_ADR NAMEQ 
 3480 5060 69320000 		_ADR DUPP 
 3481 5064 1F310000 		_QBRAN 9f
 3481      98500000 
 3482 506c 95310000 		_ADR CAT 
 3483 5070 DF300000 		_DOLIT IMEDD
 3483      80000000 
 3484 5078 E9320000 		_ADR ANDD 
 3485 507c DF300000 		_DOLIT 7 
 3485      07000000 
 3486 5084 41330000 		_ADR RSHIFT  
 3487 5088 69320000 		_ADR DUPP 
 3488 508c 33310000 		_TBRAN 9f 
 3488      98500000 
 3489 5094 79350000 		_ADR INVER 
 3490 5098 BB2E0000 	9:	_UNNEST 
 3491              	
 3492              	
 3493              	
 3494              	/***********************
 3495              	    ALLOT	( n -- )
 3496              	 	Allocate n bytes to 
 3497              		the ram area.
 3498              	************************/
 3499 509c 50500000 		_HEADER ALLOT,5,"ALLOT"
 3499      05414C4C 
 3499      4F5400BF 
 3500 50a8 504700BF 		_NEST
 3501 50ac 95380000 		_ADR	CPP
 3502 50b0 B5360000 		_ADR	PSTOR
 3503 50b4 BB2E0000 		_UNNEST			// adjust code pointer
 3504              	
 3505              	/******************************
 3506              	    ,	   ( w -- )
 3507              	 	Compile an integer 
 3508              		into the code dictionary.
 3509              	******************************/
 3510 50b8 A0500000 		_HEADER COMMA,1,","
 3510      012C00BF 
 3511 50c0 504700BF 		_NEST
 3512 50c4 A13D0000 		_ADR	HERE
 3513 50c8 69320000 		_ADR	DUPP
 3514 50cc 05340000 		_ADR	CELLP	// cell boundary
 3515 50d0 95380000 		_ADR	CPP
ARM GAS  forth.s 			page 181


 3516 50d4 61310000 		_ADR	STORE
 3517 50d8 61310000 		_ADR	STORE
 3518 50dc BB2E0000 		_UNNEST	// adjust code pointer, compile
 3519              		.p2align 2 
 3520              	
 3521              	/************************************
 3522              	    [COMPILE]   ( -- //  string> )
 3523              	 	Compile the next immediate word 
 3524              		into code dictionary.
 3525              	*************************************/
 3526 50e0 BC500000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3526      895B434F 
 3526      4D50494C 
 3526      455D00BF 
 3527 50f0 504700BF 		_NEST
 3528 50f4 1D500000 		_ADR	TICK
 3529 50f8 C1500000 		_ADR	COMMA
 3530 50fc BB2E0000 		_UNNEST
 3531              	
 3532              	/****************************
 3533              	    COMPILE	( -- )
 3534              	 	Compile the next address 
 3535              		in colon list to code 
 3536              		dictionary.
 3537              	*******************************/
 3538 5100 E4500000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3538      47434F4D 
 3538      50494C45 
 3539 510c 504700BF 		_NEST
 3540 5110 A1310000 		_ADR	RFROM
 3541 5114 69320000 		_ADR	DUPP 
 3542 5118 75310000 		_ADR	AT
 3543 511c DF300000 		_DOLIT 1 
 3543      01000000 
 3544 5124 FD320000 		_ADR	ORR 
 3545 5128 C1500000 		_ADR	COMMA 
 3546 512c 05340000 		_ADR	CELLP 
 3547 5130 E5310000 		_ADR	TOR 
 3548 5134 BB2E0000 		_UNNEST	// adjust return address
 3549              	
 3550              	/*************************
 3551              	    LITERAL	( w -- )
 3552              	 	Compile tos to code 
 3553              		dictionary as an 
 3554              		integer literal.
 3555              	***************************/
 3556 5138 04510000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3556      874C4954 
 3556      4552414C 
 3557 5144 504700BF 		_NEST
 3558 5148 DF300000 		_COMPI	DOLIT
 3558      DE300000 
 3558      01570000 
 3559 5154 C1500000 		_ADR	COMMA
 3560 5158 BB2E0000 		_UNNEST
 3561              	
 3562              	/********************
ARM GAS  forth.s 			page 182


 3563              	    $,"	( -- )
 3564              	 	Compile a literal 
 3565              		string up to next " .
 3566              	hidden word 
 3567              	************************/
 3568              	STRCQ:
 3569 515c 504700BF 		_NEST
 3570 5160 DF300000 		_DOLIT -4
 3570      FCFFFFFF 
 3571 5168 95380000 		_ADR	CPP
 3572 516c B5360000 		_ADR	PSTOR
 3573 5170 DF300000 		_DOLIT	'\"'
 3573      22000000 
 3574 5178 C5480000 		_ADR	WORDD	// move word to code dictionary
 3575 517c 09370000 		_ADR	COUNT
 3576 5180 69330000 		_ADR	PLUS
 3577 5184 E13C0000 		_ADR	ALGND	// calculate aligned end of string
 3578 5188 95380000 		_ADR	CPP
 3579 518c 61310000 		_ADR	STORE   // adjust the code pointer
 3580 5190 BB2E0000 		_UNNEST 			
 3581              	
 3582              	/*******************
 3583              	   Structures
 3584              	*******************/
 3585              	
 3586              	/*************************
 3587              	    FOR	 ( -- a )
 3588              	 	Start a FOR-NEXT loop 
 3589              		structure in a colon 
 3590              		definition.
 3591              	**************************/
 3592 5194 3C510000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3592      C3464F52 
 3593 519c 504700BF 		_NEST
 3594 51a0 DF300000 		_COMPI	TOR
 3594      E4310000 
 3594      01570000 
 3595 51ac A13D0000 		_ADR	HERE
 3596 51b0 BB2E0000 		_UNNEST
 3597              	
 3598              	/********************************
 3599              		DO ( limit start -- )
 3600              		initialise a DO...LOOP 
 3601              		or DO...+LOOP 
 3602              	********************************/
 3603 51b4 98510000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3603      C2444F00 
 3604 51bc 504700BF 		_NEST
 3605 51c0 DF300000 		_COMPI SWAP
 3605      78320000 
 3605      01570000 
 3606 51cc DF300000 		_COMPI TOR 
 3606      E4310000 
 3606      01570000 
 3607 51d8 DF300000 		_COMPI TOR 
 3607      E4310000 
 3607      01570000 
ARM GAS  forth.s 			page 183


 3608 51e4 A13D0000 		_ADR HERE 
 3609 51e8 DF300000 		_DOLIT 0  // end marker used by resolve_leave 
 3609      00000000 
 3610 51f0 BB2E0000 		_UNNEST 
 3611              	
 3612              	DOPLOOP: // ( n -- R: limit counter )
 3613 51f4 3246     		mov T2,TOS 
 3614 51f6 57F8046B 		_POP 
 3615 51fa B8E80300 		ldmfd RSP!,{T0,T1}
 3616 51fe 1044     		add T0,T2 
 3617 5200 28E90300 		stmfd RSP!,{T0,T1}
 3618 5204 8842     		cmp T0,T1 
 3619 5206 05D4     		bmi 9f 
 3620 5208 08F10808 		add RSP,#8
 3621 520c 0CF1040C 		add IP,#4
 3622 5210 FDF750BE 		_NEXT 
 3623 5214 DCF800C0 	9:  ldr IP,[IP]
 3624 5218 FDF74CBE 		_NEXT 
 3625              		
 3626              	/***************************
 3627              		+LOOP ( a -- )
 3628              		increment counter 
 3629              		end loop if countr>limit
 3630              	****************************/
 3631 521c B8510000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3631      C52B4C4F 
 3631      4F5000BF 
 3632 5228 504700BF 		_NEST 
 3633 522c DF300000 		_COMPI DOPLOOP 
 3633      F4510000 
 3633      01570000 
 3634 5238 6D520000 		_ADR resolve_leave 
 3635 523c C1500000 		_ADR COMMA
 3636 5240 BB2E0000 		_UNNEST 
 3637              	
 3638              	DOLOOP: // ( -- R: limit counter )
 3639 5244 D8F80000 		ldr T0,[RSP]
 3640 5248 00F10100 		add T0,#1
 3641 524c C8F80000 		str T0,[RSP]
 3642 5250 D8F80410 		ldr T1,[RSP,#4]
 3643 5254 8842     		cmp T0,T1 
 3644 5256 05D4     		bmi 9f
 3645 5258 08F10808 		add RSP,#8  // drop counter and limit  
 3646 525c 0CF1040C 		add IP,IP,#4 // skip loop address 
 3647 5260 FDF728BE 		_NEXT 
 3648 5264 DCF800C0 	9:  ldr IP,[IP]
 3649 5268 FDF724BE 		_NEXT 
 3650              	
 3651              	
 3652              	resolve_leave:
 3653 526c 504700BF 		_NEST
 3654 5270 79340000 	1:	_ADR QDUP 
 3655 5274 1F310000 		_QBRAN 2f 
 3655      94520000 
 3656 527c A13D0000 		_ADR HERE 
 3657 5280 05340000 		_ADR CELLP 
 3658 5284 79320000 		_ADR SWAP 
ARM GAS  forth.s 			page 184


 3659 5288 61310000 		_ADR STORE 
 3660 528c 47310000 		_BRAN 1b 
 3660      70520000 
 3661              	2:
 3662 5294 BB2E0000 		_UNNEST 
 3663              	
 3664              	/********************************
 3665              		LOOP ( a -- )
 3666              		increment counter 
 3667              		end loop if >= limit 
 3668              	*********************************/
 3669 5298 20520000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3669      C44C4F4F 
 3669      500000BF 
 3670 52a4 504700BF 		_NEST 
 3671 52a8 DF300000 		_COMPI DOLOOP
 3671      44520000 
 3671      01570000 
 3672 52b4 6D520000 		_ADR resolve_leave 
 3673 52b8 C1500000 		_ADR COMMA  // resolve loop branch 
 3674 52bc BB2E0000 		_UNNEST 
 3675              	
 3676              	/************************************
 3677              		UNLOOP ( -- ) ( R: limit count -- )
 3678              		remove loop parameters from rstack 
 3679              	****************************************/
 3680 52c0 9C520000 		_HEADER UNLOOP,6,"UNLOOP"
 3680      06554E4C 
 3680      4F4F5000 
 3681 52cc 08F10808 		add RSP,#2*CELLL 
 3682 52d0 FDF7F0BD 		_NEXT 
 3683              	
 3684              	
 3685              	/*********************************
 3686              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3687              		exit inner DO...LOOP 
 3688              	**********************************/
 3689 52d4 C4520000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3689      C54C4541 
 3689      564500BF 
 3690 52e0 504700BF 		_NEST 
 3691 52e4 DF300000 		_COMPI DOLEAVE
 3691      14530000 
 3691      01570000 
 3692 52f0 A13D0000 		_ADR HERE
 3693 52f4 A9320000 		_ADR OVER 
 3694 52f8 1F310000 		_QBRAN 1f
 3694      04530000 
 3695 5300 79320000 		_ADR SWAP 
 3696 5304 DF300000 	1:	_DOLIT 0 
 3696      00000000 
 3697 530c C1500000 		_ADR COMMA   
 3698 5310 BB2E0000 		_UNNEST 
 3699              	
 3700              	// LEAVE runtime
 3701              	// remove limit and counter from rstack  
 3702              	DOLEAVE:
ARM GAS  forth.s 			page 185


 3703 5314 08F10808 		add RSP,#2*CELLL
 3704 5318 DCF800C0 		ldr IP,[IP] 
 3705 531c FDF7CABD 		_NEXT 
 3706              	
 3707              	
 3708              	/**********************
 3709              	    BEGIN	( -- a )
 3710              	 	Start an infinite 
 3711              		or indefinite 
 3712              		loop structure.
 3713              	************************/
 3714 5320 D8520000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3714      C5424547 
 3714      494E00BF 
 3715 532c 504700BF 		_NEST
 3716 5330 A13D0000 		_ADR	HERE
 3717 5334 BB2E0000 		_UNNEST
 3718              		.p2align 2 
 3719              	
 3720              	/********************
 3721              	    NEXT	( a -- )
 3722              	 	Terminate a FOR-NEXT
 3723              		loop structure.
 3724              	**************************/
 3725 5338 24530000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3725      C44E4558 
 3725      540000BF 
 3726 5344 504700BF 		_NEST
 3727 5348 DF300000 		_COMPI	DONXT
 3727      00310000 
 3727      01570000 
 3728 5354 C1500000 		_ADR	COMMA
 3729 5358 BB2E0000 		_UNNEST
 3730              	
 3731              	/***************************
 3732              		I ( -- n )
 3733              		stack for loop counter 
 3734              	***************************/
 3735 535c 3C530000 		_HEADER I,1+COMPO,"I"
 3735      414900BF 
 3736 5364 47F8046D 		_PUSH 
 3737 5368 D8F80060 		ldr TOS,[RSP]
 3738 536c FDF7A2BD 		_NEXT 
 3739              	
 3740              	/****************************
 3741              		J ( -- n )
 3742              		stack outer loop counter 
 3743              	****************************/
 3744 5370 60530000 		_HEADER J,1,"J"
 3744      014A00BF 
 3745 5378 47F8046D 		_PUSH 
 3746 537c D8F80460 		ldr TOS,[RSP,#4]
 3747 5380 FDF798BD 		_NEXT 
 3748              	
 3749              	/**********************
 3750              	    UNTIL	( a -- )
 3751              	 	Terminate a BEGIN-UNTIL
ARM GAS  forth.s 			page 186


 3752              		indefinite loop structure.
 3753              	******************************/
 3754 5384 74530000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3754      C5554E54 
 3754      494C00BF 
 3755 5390 504700BF 		_NEST
 3756 5394 DF300000 		_COMPI	QBRAN
 3756      1E310000 
 3756      01570000 
 3757 53a0 C1500000 		_ADR	COMMA
 3758 53a4 BB2E0000 		_UNNEST
 3759              	
 3760              	/**********************
 3761              	    AGAIN	( a -- )
 3762              	 	Terminate a BEGIN-AGAIN
 3763              		infinite loop structure.
 3764              	*****************************/
 3765 53a8 88530000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3765      C5414741 
 3765      494E00BF 
 3766 53b4 504700BF 		_NEST
 3767 53b8 DF300000 		_COMPI	BRAN
 3767      46310000 
 3767      01570000 
 3768 53c4 C1500000 		_ADR	COMMA
 3769 53c8 BB2E0000 		_UNNEST
 3770              	
 3771              	/************************
 3772              	    IF	  ( -- A )
 3773              	 	Begin a conditional
 3774              		branch structure.
 3775              	**************************/
 3776 53cc AC530000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3776      C2494600 
 3777 53d4 504700BF 		_NEST
 3778 53d8 DF300000 		_COMPI	QBRAN
 3778      1E310000 
 3778      01570000 
 3779 53e4 A13D0000 		_ADR	HERE
 3780 53e8 DF300000 		_DOLIT	4
 3780      04000000 
 3781 53f0 95380000 		_ADR	CPP
 3782 53f4 B5360000 		_ADR	PSTOR
 3783 53f8 BB2E0000 		_UNNEST
 3784              	
 3785              	/*************************
 3786              	    AHEAD	( -- A )
 3787              	 	Compile a forward 
 3788              		branch instruction.
 3789              	*************************/
 3790 53fc D0530000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3790      C5414845 
 3790      414400BF 
 3791 5408 504700BF 		_NEST
 3792 540c DF300000 		_COMPI	BRAN
 3792      46310000 
 3792      01570000 
ARM GAS  forth.s 			page 187


 3793 5418 A13D0000 		_ADR	HERE
 3794 541c DF300000 		_DOLIT	4
 3794      04000000 
 3795 5424 95380000 		_ADR	CPP
 3796 5428 B5360000 		_ADR	PSTOR
 3797 542c BB2E0000 		_UNNEST
 3798              	
 3799              	/**************************
 3800              	    REPEAT	( A a -- )
 3801              	 	Terminate a BEGIN-WHILE-REPEAT
 3802              		indefinite loop.
 3803              	**********************************/
 3804 5430 00540000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3804      C6524550 
 3804      45415400 
 3805 543c 504700BF 		_NEST
 3806 5440 B5530000 		_ADR	AGAIN
 3807 5444 A13D0000 		_ADR	HERE
 3808 5448 79320000 		_ADR	SWAP
 3809 544c 61310000 		_ADR	STORE
 3810 5450 BB2E0000 		_UNNEST
 3811              	
 3812              	/*********************
 3813              	    THEN	( A -- )
 3814              	 	Terminate a conditional
 3815              		branch structure.
 3816              	*****************************/
 3817 5454 34540000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3817      C4544845 
 3817      4E0000BF 
 3818 5460 504700BF 		_NEST
 3819 5464 A13D0000 		_ADR	HERE
 3820 5468 79320000 		_ADR	SWAP
 3821 546c 61310000 		_ADR	STORE
 3822 5470 BB2E0000 		_UNNEST
 3823              	
 3824              	/***************************
 3825              	    AFT	 ( a -- a A )
 3826              	 	Jump to THEN in a 
 3827              		FOR-AFT-THEN-NEXT loop 
 3828              		the first time through.
 3829              	*****************************/
 3830 5474 58540000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3830      C3414654 
 3831 547c 504700BF 		_NEST
 3832 5480 59320000 		_ADR	DROP
 3833 5484 09540000 		_ADR	AHEAD
 3834 5488 2D530000 		_ADR	BEGIN
 3835 548c 79320000 		_ADR	SWAP
 3836 5490 BB2E0000 		_UNNEST
 3837              	
 3838              	/**********************
 3839              	    ELSE	( A -- A )
 3840              	 	Start the false 
 3841              		clause in an 
 3842              		IF-ELSE-THEN structure.
 3843              	****************************/
ARM GAS  forth.s 			page 188


 3844 5494 78540000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3844      C4454C53 
 3844      450000BF 
 3845 54a0 504700BF 		_NEST
 3846 54a4 09540000 		_ADR	AHEAD
 3847 54a8 79320000 		_ADR	SWAP
 3848 54ac 61540000 		_ADR	THENN
 3849 54b0 BB2E0000 		_UNNEST
 3850              	
 3851              	/**************************
 3852              	    WHILE	( a -- A a )
 3853              	 	Conditional branch out 
 3854              		of a BEGIN-WHILE-REPEAT loop.
 3855              	*********************************/
 3856 54b4 98540000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3856      C5574849 
 3856      4C4500BF 
 3857 54c0 504700BF 		_NEST
 3858 54c4 D5530000 		_ADR	IFF
 3859 54c8 79320000 		_ADR	SWAP
 3860 54cc BB2E0000 		_UNNEST
 3861              	
 3862              	/**********************************
 3863              		RECURSE ( -- )
 3864              		compile recursive call to 
 3865              		actual defined word 
 3866              	***********************************/
 3867 54d0 B8540000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 3867      C7524543 
 3867      55525345 
 3868 54dc 504700BF 		_NEST 
 3869 54e0 C1380000 		_ADR LAST
 3870 54e4 75310000 		_ADR AT  
 3871 54e8 09490000 		_ADR NAMET 
 3872 54ec 01570000 		_ADR CALLC  
 3873 54f0 BB2E0000 		_UNNEST 
 3874              	
 3875              	
 3876              	/***********************************
 3877              	    ABORT"	( -- //  string> )
 3878              	 	Conditional abort with an 
 3879              		error message.
 3880              	***********************************/
 3881 54f4 D4540000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 3881      C641424F 
 3881      52542200 
 3882 5500 504700BF 		_NEST
 3883 5504 DF300000 		_COMPI	ABORQ
 3883      244D0000 
 3883      01570000 
 3884 5510 5D510000 		_ADR	STRCQ
 3885 5514 BB2E0000 		_UNNEST
 3886              	
 3887              	/******************************
 3888              	    S"	( -- //  string> )
 3889              	 	Compile an inline 
 3890              		word literal.
ARM GAS  forth.s 			page 189


 3891              	*****************************/
 3892 5518 F8540000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 3892      C2532200 
 3893 5520 504700BF 		_NEST
 3894 5524 DF300000 		_COMPI	STRQP
 3894      34440000 
 3894      01570000 
 3895 5530 5D510000 		_ADR	STRCQ
 3896 5534 BB2E0000 		_UNNEST
 3897              	
 3898              	/******************************
 3899              	    ."	( -- //  string> )
 3900              	 	Compile an inline word
 3901              		literal to be typed out 
 3902              		at run time.
 3903              	*******************************/
 3904 5538 1C550000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3904      C22E2200 
 3905 5540 504700BF 		_NEST
 3906 5544 DF300000 		_COMPI	DOTQP
 3906      40440000 
 3906      01570000 
 3907 5550 5D510000 		_ADR	STRCQ
 3908 5554 BB2E0000 		_UNNEST
 3909              	
 3910              	/*********************
 3911              	  Name compiler
 3912              	***********************/
 3913              	
 3914              	/**************************
 3915              	    ?UNIQUE	( a -- a )
 3916              	 	Display a warning 
 3917              		message if the word 
 3918              		already exists.
 3919              	**************************/
 3920 5558 3C550000 		_HEADER UNIQU,7,"?UNIQUE"
 3920      073F554E 
 3920      49515545 
 3921 5564 504700BF 		_NEST
 3922 5568 69320000 		_ADR	DUPP
 3923 556c 714A0000 		_ADR	NAMEQ			// ?name exists
 3924 5570 1F310000 		_QBRAN	UNIQ1	// redefinitions are OK
 3924      90550000 
 3925 5578 41440000 		_DOTQP	7," reDef "		// but warn the user
 3925      07207265 
 3925      44656620 
 3926 5584 A9320000 		_ADR	OVER
 3927 5588 09370000 		_ADR	COUNT
 3928 558c B1430000 		_ADR	TYPEE			// just in case its not planned
 3929              	UNIQ1:
 3930 5590 59320000 		_ADR	DROP
 3931 5594 BB2E0000 		_UNNEST
 3932              	
 3933              	/***********************
 3934              	    $,n	 ( na -- )
 3935              	 	Build a new dictionary 
 3936              		name using the data at na.
ARM GAS  forth.s 			page 190


 3937              	hidden word 
 3938              	*******************************/
 3939              	SNAME:
 3940 5598 504700BF 		_NEST
 3941 559c 69320000 		_ADR	DUPP			//  na na
 3942 55a0 95310000 		_ADR	CAT			//  ?null input
 3943 55a4 1F310000 		_QBRAN	SNAM1
 3943      E0550000 
 3944 55ac 65550000 		_ADR	UNIQU			//  na
 3945 55b0 C1380000 		_ADR	LAST			//  na last
 3946 55b4 75310000 		_ADR	AT			//  na la
 3947 55b8 C1500000 		_ADR	COMMA			//  na
 3948 55bc 69320000 		_ADR	DUPP			//  na na
 3949 55c0 C1380000 		_ADR	LAST			//  na na last
 3950 55c4 61310000 		_ADR	STORE			//  na , save na for vocabulary link
 3951 55c8 09370000 		_ADR	COUNT			//  na+1 count
 3952 55cc 69330000 		_ADR	PLUS			//  na+1+count
 3953 55d0 E13C0000 		_ADR	ALGND			//  word boundary
 3954 55d4 95380000 		_ADR	CPP
 3955 55d8 61310000 		_ADR	STORE			//  top of dictionary now
 3956 55dc BB2E0000 		_UNNEST
 3957              	SNAM1:
 3958 55e0 35440000 		_ADR	STRQP
 3959 55e4 07       		.byte	7
 3960 55e5 206E616D 		.ascii " name? "
 3960      653F20
 3961 55ec F94C0000 		_ADR	PRT_ABORT
 3962              	
 3963              	/************************
 3964              	    $COMPILE	( a -- )
 3965              	 	Compile next word to 
 3966              		code dictionary as 
 3967              		a token or literal.
 3968              	**************************/
 3969 55f0 5C550000 		_HEADER SCOMP,8,"$COMPILE"
 3969      0824434F 
 3969      4D50494C 
 3969      450000BF 
 3970 5600 504700BF 		_NEST
 3971 5604 714A0000 		_ADR	NAMEQ
 3972 5608 79340000 		_ADR	QDUP	// defined?
 3973 560c 1F310000 		_QBRAN	SCOM2
 3973      3C560000 
 3974 5614 75310000 		_ADR	AT
 3975 5618 DF300000 		_DOLIT	IMEDD
 3975      80000000 
 3976 5620 E9320000 		_ADR	ANDD	// immediate?
 3977 5624 1F310000 		_QBRAN	SCOM1
 3977      34560000 
 3978 562c F5300000 		_ADR	EXECU
 3979 5630 BB2E0000 		_UNNEST			// it's immediate, execute
 3980              	SCOM1:
 3981 5634 01570000 		_ADR	CALLC			// it's not immediate, compile
 3982 5638 BB2E0000 		_UNNEST	
 3983              	SCOM2:
 3984 563c 31430000 		_ADR	NUMBERQ 
 3985 5640 1F310000 		_QBRAN	SCOM3
ARM GAS  forth.s 			page 191


 3985      50560000 
 3986 5648 45510000 		_ADR	LITER
 3987 564c BB2E0000 		_UNNEST			// compile number as integer
 3988              	SCOM3: // compilation abort 
 3989 5650 59560000 		_ADR COLON_ABORT 
 3990 5654 F94C0000 		_ADR	PRT_ABORT			// error
 3991              	
 3992              	/********************************
 3993              	 before aborting a compilation 
 3994              	 reset HERE and LAST
 3995              	 to previous values. 
 3996              	*******************************/
 3997              	COLON_ABORT:
 3998 5658 504700BF 		_NEST 
 3999 565c C1380000 		_ADR LAST 
 4000 5660 75310000 		_ADR AT 
 4001 5664 15340000 		_ADR CELLM 
 4002 5668 69320000 		_ADR DUPP 
 4003 566c 95380000 		_ADR CPP  
 4004 5670 61310000 		_ADR STORE 
 4005 5674 75310000 		_ADR AT 
 4006 5678 C1380000 		_ADR LAST 
 4007 567c 61310000 		_ADR STORE 
 4008 5680 95560000 		_ADR OVERT 
 4009 5684 BB2E0000 		_UNNEST 
 4010              	
 4011              	/*********************
 4012              	    OVERT	( -- )
 4013              	 	Link a new word 
 4014              		into the current 
 4015              		vocabulary.
 4016              	**********************/
 4017 5688 F4550000 		_HEADER OVERT,5,"OVERT"
 4017      054F5645 
 4017      525400BF 
 4018 5694 504700BF 		_NEST
 4019 5698 C1380000 		_ADR	LAST
 4020 569c 75310000 		_ADR	AT
 4021 56a0 81380000 		_ADR	CNTXT
 4022 56a4 61310000 		_ADR	STORE
 4023 56a8 BB2E0000 		_UNNEST
 4024              	
 4025              	/**********************
 4026              	    ;  ( -- )
 4027              	 	Terminate a colon
 4028              		definition.
 4029              	***********************/
 4030 56ac 8C560000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4030      C13B00BF 
 4031 56b4 504700BF 		_NEST
 4032 56b8 DF300000 		_DOLIT	UNNEST
 4032      BA2E0000 
 4033 56c0 01570000 		_ADR	CALLC
 4034 56c4 C14D0000 		_ADR	LBRAC
 4035 56c8 95560000 		_ADR	OVERT
 4036 56cc BB2E0000 		_UNNEST
 4037              	
ARM GAS  forth.s 			page 192


 4038              	/******************
 4039              	    ]	   ( -- )
 4040              	 	Start compiling 
 4041              		the words in 
 4042              		the input stream.
 4043              	*********************/
 4044 56d0 B0560000 		_HEADER RBRAC,1,"]"
 4044      015D00BF 
 4045 56d8 504700BF 		_NEST
 4046 56dc DF300000 		_DOLIT	SCOMP
 4046      00560000 
 4047 56e4 55380000 		_ADR	TEVAL
 4048 56e8 61310000 		_ADR	STORE
 4049 56ec DF300000 		_DOLIT  -1
 4049      FFFFFFFF 
 4050 56f4 5D370000 		_ADR    STATE 
 4051 56f8 61310000 		_ADR    STORE 
 4052 56fc BB2E0000 		_UNNEST
 4053              	
 4054              	/****************************
 4055              	    CALLC	( ca -- )
 4056              	 	compile ca.
 4057              	hidden word used by compiler
 4058              	*****************************/
 4059              	CALLC:
 4060 5700 504700BF 		_NEST
 4061 5704 DF300000 		_DOLIT 1 
 4061      01000000 
 4062 570c FD320000 		_ADR ORR 
 4063 5710 C1500000 		_ADR COMMA  
 4064 5714 BB2E0000 		_UNNEST 
 4065              	
 4066              	
 4067              	/*************************
 4068              	 	:	( -- //  string> )
 4069              	 	Start a new colon 
 4070              		definition using 
 4071              		next word as its name.
 4072              	**************************/
 4073 5718 D4560000 		_HEADER COLON,1,":"
 4073      013A00BF 
 4074 5720 504700BF 		_NEST
 4075 5724 E9480000 		_ADR	TOKEN
 4076 5728 99550000 		_ADR	SNAME
 4077 572c 95560000 		_ADR    OVERT 
 4078 5730 C52E0000 		_ADR	COMPI_NEST 
 4079 5734 D9560000 		_ADR	RBRAC
 4080 5738 BB2E0000 		_UNNEST
 4081              	
 4082              	/*************************
 4083              	    IMMEDIATE   ( -- )
 4084              	 	Make the last compiled 
 4085              		word an immediate word.
 4086              	***************************/
 4087 573c 1C570000 		_HEADER IMMED,9,"IMMEDIATE"
 4087      09494D4D 
 4087      45444941 
ARM GAS  forth.s 			page 193


 4087      544500BF 
 4088 574c 504700BF 		_NEST
 4089 5750 DF300000 		_DOLIT	IMEDD
 4089      80000000 
 4090 5758 C1380000 		_ADR	LAST
 4091 575c 75310000 		_ADR	AT
 4092 5760 75310000 		_ADR	AT
 4093 5764 FD320000 		_ADR	ORR
 4094 5768 C1380000 		_ADR	LAST
 4095 576c 75310000 		_ADR	AT
 4096 5770 61310000 		_ADR	STORE
 4097 5774 BB2E0000 		_UNNEST
 4098              	
 4099              	/******************
 4100              	  Defining words
 4101              	******************/
 4102              	
 4103              	/***********************************
 4104              	    CONSTANT	( u -- //  string> )
 4105              	 	Compile a new constant.
 4106              	************************************/
 4107 5778 40570000 		_HEADER CONST,8,"CONSTANT"
 4107      08434F4E 
 4107      5354414E 
 4107      540000BF 
 4108 5788 504700BF 		_NEST 
 4109 578c E9480000 		_ADR	TOKEN
 4110 5790 99550000 		_ADR	SNAME
 4111 5794 95560000 		_ADR	OVERT
 4112 5798 C52E0000 		_ADR	COMPI_NEST
 4113 579c DF300000 		_DOLIT	DOCON
 4113      44370000 
 4114 57a4 01570000 		_ADR	CALLC
 4115 57a8 C1500000 		_ADR	COMMA
 4116 57ac DF300000 		_DOLIT	UNNEST 
 4116      BA2E0000 
 4117 57b4 01570000 		_ADR	CALLC  
 4118 57b8 BB2E0000 		_UNNEST
 4119              	
 4120              		.p2align 2 
 4121              	/****************************************
 4122              	 doDOES> ( -- a )
 4123              	 runtime action of 		 
 4124              	 leave parameter field address on stack 
 4125              	hidden word used by compiler 
 4126              	***************************************/
 4127              	DODOES:
 4128 57bc 504700BF 		_NEST 
 4129 57c0 A1310000 		_ADR	RFROM
 4130 57c4 05340000 		_ADR	CELLP 
 4131 57c8 C5330000 		_ADR	ONEP  
 4132 57cc C1380000 		_ADR LAST 
 4133 57d0 75310000 		_ADR AT
 4134 57d4 09490000 		_ADR NAMET 
 4135 57d8 05340000 		_ADR CELLP 
 4136 57dc 61310000 		_ADR STORE  
 4137 57e0 BB2E0000 		_UNNEST 
ARM GAS  forth.s 			page 194


 4138              	
 4139              		.p2align 2
 4140              	/**********************
 4141              	  DOES> ( -- )
 4142              	  compile time action
 4143              	*************************/
 4144 57e4 7C570000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4144      C5444F45 
 4144      533E00BF 
 4145 57f0 504700BF 		_NEST 
 4146 57f4 DF300000 		_DOLIT DODOES 
 4146      BC570000 
 4147 57fc 01570000 		_ADR CALLC 
 4148 5800 DF300000 		_DOLIT	UNNEST
 4148      BA2E0000 
 4149 5808 01570000 		_ADR	CALLC 
 4150 580c C52E0000 		_ADR COMPI_NEST
 4151 5810 DF300000 		_DOLIT RFROM 
 4151      A0310000 
 4152 5818 01570000 		_ADR	CALLC
 4153 581c BB2E0000 		_UNNEST 
 4154              	
 4155              	
 4156              	/****************************
 4157              	  DEFER@ ( "name" -- a )
 4158              	  return value of code field 
 4159              	  of defered function. 
 4160              	******************************/
 4161 5820 E8570000 		_HEADER DEFERAT,6,"DEFER@"
 4161      06444546 
 4161      45524000 
 4162 582c 504700BF 		_NEST 
 4163 5830 1D500000 		_ADR TICK
 4164 5834 05340000 		_ADR CELLP 
 4165 5838 75310000 		_ADR AT 
 4166 583c D5330000 		_ADR ONEM 
 4167 5840 BB2E0000 		_UNNEST 
 4168              	
 4169              	/*********************************
 4170              	 DEFER! ( "name1" "name2" -- )
 4171              	 assign an action to a defered word 
 4172              	************************************/
 4173 5844 24580000 		_HEADER DEFERSTO,6,"DEFER!"
 4173      06444546 
 4173      45522100 
 4174 5850 504700BF 		_NEST 
 4175 5854 1D500000 		_ADR TICK 
 4176 5858 C5330000 		_ADR ONEP 
 4177 585c 1D500000 		_ADR TICK 
 4178 5860 05340000 		_ADR CELLP 
 4179 5864 61310000 		_ADR STORE 
 4180 5868 BB2E0000 		_UNNEST
 4181              	
 4182              	/****************************
 4183              	  DEFER ( "name" -- )
 4184              	  create a defered definition
 4185              	*****************************/
ARM GAS  forth.s 			page 195


 4186 586c 48580000 		_HEADER DEFER,5,"DEFER"
 4186      05444546 
 4186      455200BF 
 4187 5878 504700BF 		_NEST 
 4188 587c C9580000 		_ADR CREAT 
 4189 5880 DF300000 		_DOLIT UNNEST 
 4189      BA2E0000 
 4190 5888 01570000 		_ADR CALLC 
 4191 588c DF300000 		_DOLIT DEFER_NOP
 4191      B0580000 
 4192 5894 C5330000 		_ADR ONEP 
 4193 5898 C1380000 		_ADR LAST 
 4194 589c 75310000 		_ADR AT 
 4195 58a0 09490000 		_ADR NAMET 
 4196 58a4 05340000 		_ADR CELLP 
 4197 58a8 61310000 		_ADR STORE 
 4198 58ac BB2E0000 		_UNNEST 
 4199              	DEFER_NOP:
 4200 58b0 504700BF 		_NEST  
 4201 58b4 DD300000 		_ADR NOP 
 4202 58b8 BB2E0000 		_UNNEST 
 4203              	
 4204              	/*********************************
 4205              		:NONAME  
 4206              	*********************************/
 4207              	
 4208              	
 4209              	/******************************
 4210              	    CREATE	( -- //  string> )
 4211              	 	Compile a new array entry 
 4212              		without allocating code space.
 4213              	***********************************/
 4214 58bc 70580000 		_HEADER CREAT,6,"CREATE"
 4214      06435245 
 4214      41544500 
 4215 58c8 504700BF 		_NEST 
 4216 58cc E9480000 		_ADR	TOKEN
 4217 58d0 99550000 		_ADR	SNAME
 4218 58d4 95560000 		_ADR	OVERT
 4219 58d8 C52E0000 		_ADR	COMPI_NEST 
 4220 58dc DF300000 		_DOLIT	DOVAR
 4220      36370000 
 4221 58e4 01570000 		_ADR	CALLC
 4222 58e8 BB2E0000 		_UNNEST
 4223              	
 4224              	/*******************************
 4225              	    VARIABLE	( -- //  string> )
 4226              	 	Compile a new variable 
 4227              		initialized to 0.
 4228              	***********************************/
 4229 58ec C0580000 		_HEADER VARIA,8,"VARIABLE"
 4229      08564152 
 4229      4941424C 
 4229      450000BF 
 4230 58fc 504700BF 		_NEST
 4231 5900 C9580000 		_ADR	CREAT
 4232 5904 DF300000 		_DOLIT	0
ARM GAS  forth.s 			page 196


 4232      00000000 
 4233 590c C1500000 		_ADR	COMMA
 4234 5910 DF300000 		_DOLIT UNNEST
 4234      BA2E0000 
 4235 5918 01570000 		_ADR	CALLC  
 4236 591c BB2E0000 		_UNNEST
 4237              	
 4238              	
 4239              	/***********
 4240              	  Tools
 4241              	***********/
 4242              	
 4243              	/*************************
 4244              	    dm+	 ( a u -- a )
 4245              	 	Dump u bytes from a , 
 4246              		leaving a+u on the stack.
 4247              		hidden word used by DUMP 
 4248              	****************************/
 4249              	DMP:
 4250 5920 504700BF 		_NEST
 4251 5924 A9320000 		_ADR	OVER
 4252 5928 DF300000 		_DOLIT	4
 4252      04000000 
 4253 5930 09450000 		_ADR	UDOTR			// display address
 4254 5934 DF300000 		_DOLIT  0         // don't show base char 
 4254      00000000 
 4255 593c ED370000 		_ADR    BCHR
 4256 5940 69320000 		_ADR    DUPP
 4257 5944 75310000 		_ADR    AT 
 4258 5948 E5310000 		_ADR    TOR      // save original value of BCHAR 
 4259 594c 61310000 		_ADR    STORE 
 4260 5950 5D430000 		_ADR	SPACE
 4261 5954 E5310000 		_ADR	TOR			// start count down loop
 4262 5958 47310000 		_BRAN	PDUM2			// skip first pass
 4262      78590000 
 4263              	PDUM1:
 4264 5960 69320000 	    _ADR	DUPP
 4265 5964 95310000 		_ADR	CAT
 4266 5968 DF300000 		_DOLIT	3
 4266      03000000 
 4267 5970 09450000 		_ADR	UDOTR			// display numeric data
 4268 5974 C5330000 		_ADR	ONEP			// increment address
 4269              	PDUM2:
 4270 5978 01310000 	    _ADR	DONXT
 4271 597c 60590000 		.word	PDUM1	// loop till done
 4272 5980 A1310000 		_ADR    RFROM   // restore BCHAR value 
 4273 5984 ED370000 		_ADR    BCHR 
 4274 5988 61310000 		_ADR    STORE 
 4275 598c BB2E0000 		_UNNEST
 4276              		.p2align 2 
 4277              	//    DUMP	( a u -- )
 4278              	// 	Dump u bytes from a, in a formatted manner.
 4279              	
 4280              	/**********************
 4281              		DUMP ( a n -- )
 4282              		hex dump memory 
 4283              	*********************/
ARM GAS  forth.s 			page 197


 4284 5990 F0580000 		_HEADER DUMP,4,"DUMP"
 4284      0444554D 
 4284      500000BF 
 4285 599c 504700BF 		_NEST
 4286 59a0 DF300000 		_DOLIT  15 
 4286      0F000000 
 4287 59a8 69330000 		_ADR    PLUS 
 4288 59ac DF300000 		_DOLIT  0xFFFFFFF0 
 4288      F0FFFFFF 
 4289 59b4 E9320000 		_ADR    ANDD 
 4290 59b8 79320000 		_ADR    SWAP 
 4291 59bc DF300000 		_DOLIT  0xFFFFFFFC
 4291      FCFFFFFF 
 4292 59c4 E9320000 		_ADR    ANDD 
 4293 59c8 79320000 		_ADR    SWAP 
 4294 59cc D5370000 		_ADR	BASE
 4295 59d0 75310000 		_ADR	AT
 4296 59d4 E5310000 		_ADR	TOR
 4297 59d8 C1400000 		_ADR	HEX			// save radix,set hex
 4298 59dc DF300000 		_DOLIT	16
 4298      10000000 
 4299 59e4 413C0000 		_ADR	SLASH			// change count to lines
 4300 59e8 E5310000 		_ADR	TOR
 4301 59ec 47310000 		_BRAN	DUMP4			// start count down loop
 4301      1C5A0000 
 4302              	DUMP1:
 4303 59f4 E5430000 	    _ADR	CR
 4304 59f8 DF300000 		_DOLIT	16
 4304      10000000 
 4305 5a00 DD340000 		_ADR	DDUP
 4306 5a04 21590000 		_ADR	DMP			// display numeric
 4307 5a08 8D340000 		_ADR	ROT
 4308 5a0c 8D340000 		_ADR	ROT
 4309 5a10 5D430000 		_ADR	SPACE
 4310 5a14 5D430000 		_ADR	SPACE
 4311 5a18 B1430000 		_ADR	TYPEE			// display printable characters
 4312              	DUMP4:
 4313 5a1c 01310000 	  _DONXT	DUMP1	// loop till done
 4313      F4590000 
 4314              	DUMP3:
 4315 5a24 59320000 		_ADR	DROP
 4316 5a28 A1310000 		_ADR	RFROM
 4317 5a2c D5370000 		_ADR	BASE
 4318 5a30 61310000 		_ADR	STORE			// restore radix
 4319 5a34 BB2E0000 		_UNNEST
 4320              	
 4321              	/*******************************
 4322              	   TRACE. display in hexadecimal
 4323              	   TRACE. use a different buffer 
 4324              	   than DOT  to avoid current 
 4325              	   display overwrite.
 4326              	*******************************/ 
 4327              	TDOT: // ( u -- )
 4328 5a38 504700BF 		_NEST 
 4329 5a3c D5370000 		_ADR BASE 
 4330 5a40 75310000 		_ADR AT 
 4331 5a44 E5310000 		_ADR TOR
ARM GAS  forth.s 			page 198


 4332 5a48 C1400000 		_ADR HEX  
 4333 5a4c 69380000 		_ADR HLD 
 4334 5a50 75310000 		_ADR AT 
 4335 5a54 E5310000 		_ADR TOR   // R: base *hold 
 4336 5a58 A13D0000 		_ADR HERE 
 4337 5a5c DF300000 		_DOLIT 160 
 4337      A0000000 
 4338 5a64 69330000 		_ADR PLUS
 4339 5a68 69320000 		_ADR DUPP 
 4340 5a6c E5310000 		_ADR TOR  
 4341 5a70 69380000 		_ADR HLD 
 4342 5a74 61310000 		_ADR STORE
 4343 5a78 DF300000 		_DOLIT 0  
 4343      00000000 
 4344 5a80 11400000 		_ADR DIGS  
 4345 5a84 59320000 		_ADR DROP
 4346 5a88 DF300000 		_DOLIT '$'
 4346      24000000 
 4347 5a90 C53F0000 		_ADR HOLD 
 4348 5a94 69380000 		_ADR HLD 
 4349 5a98 75310000 		_ADR AT
 4350 5a9c A1310000 		_ADR RFROM   
 4351 5aa0 A9320000 		_ADR OVER 
 4352 5aa4 79330000 		_ADR SUBB 
 4353 5aa8 5D430000 		_ADR SPACE 
 4354 5aac B1430000 		_ADR TYPEE 
 4355 5ab0 A1310000 		_ADR RFROM 
 4356 5ab4 69380000 		_ADR HLD 
 4357 5ab8 61310000 		_ADR STORE 
 4358 5abc A1310000 		_ADR RFROM 
 4359 5ac0 D5370000 		_ADR BASE 
 4360 5ac4 61310000 		_ADR STORE 
 4361 5ac8 BB2E0000 		_UNNEST 
 4362              	
 4363              	/**********************
 4364              	   .S	  ( ... -- ... )
 4365              	 	Display the contents 
 4366              		of the data stack.
 4367              	*************************/
 4368 5acc 94590000 		_HEADER DOTS,2,".S"
 4368      022E5300 
 4369 5ad4 504700BF 		_NEST
 4370 5ad8 493D0000 		_ADR	DEPTH	// stack depth
 4371 5adc E5310000 		_ADR	TOR		// start count down loop
 4372 5ae0 47310000 		_BRAN	DOTS2  // skip first pass
 4372      F45A0000 
 4373              	DOTS1:
 4374 5ae8 D1310000 		_ADR	RAT
 4375 5aec 6D3D0000 		_ADR	PICK
 4376 5af0 395A0000 		_ADR	TDOT // index stack, display contents
 4377              	DOTS2:
 4378 5af4 01310000 		_DONXT	DOTS1 // loop till done
 4378      E85A0000 
 4379 5afc E5430000 		_ADR	CR 
 4380 5b00 BB2E0000 		_UNNEST
 4381              	
 4382              	RBASE: 
ARM GAS  forth.s 			page 199


 4383 5b04 47F8046D 		_PUSH 
 4384 5b08 4FF68076 		_MOV32 TOS,RPP 
 4384      C2F20106 
 4385 5b10 FDF7D0B9 		_NEXT 
 4386              	
 4387              	
 4388              	/**************************
 4389              	  R.  display return stack 
 4390              	**************************/
 4391              	RDOT: 
 4392 5b14 504700BF 		_NEST 
 4393 5b18 055B0000 		_ADR RBASE
 4394 5b1c 45320000 		_ADR RPAT 
 4395 5b20 79330000 		_ADR SUBB
 4396 5b24 49340000 		_ADR CELLSL   
 4397 5b28 DF300000 		_DOLIT 2
 4397      02000000 
 4398 5b30 79330000 		_ADR SUBB 
 4399 5b34 E5310000 		_ADR TOR
 4400 5b38 055B0000 		_ADR RBASE 
 4401 5b3c 15340000 	1:	_ADR CELLM 
 4402 5b40 69320000 		_ADR DUPP 
 4403 5b44 75310000 		_ADR AT 
 4404 5b48 395A0000 		_ADR TDOT 
 4405 5b4c A1310000 		_ADR RFROM   
 4406 5b50 D5330000 		_ADR ONEM 
 4407 5b54 69320000 		_ADR DUPP
 4408 5b58 E5310000 		_ADR TOR 
 4409 5b5c E1350000 		_ADR ZEQUAL   
 4410 5b60 1F310000 		_QBRAN 1b
 4410      3C5B0000 
 4411 5b68 A1310000 		_ADR RFROM  
 4412 5b6c B5340000 		_ADR DDROP
 4413 5b70 E5430000 		_ADR CR   
 4414 5b74 BB2E0000 		_UNNEST 
 4415              	
 4416              	/**************************
 4417              		TRACE ( -- )
 4418              		display stacks content 
 4419              	**************************/
 4420 5b78 D05A0000 		_HEADER TRACE,5,"TRACE"
 4420      05545241 
 4420      434500BF 
 4421 5b84 504700BF 		_NEST
 4422 5b88 E5430000 		_ADR CR 
 4423 5b8c DF300000 		_DOLIT '>' 
 4423      3E000000 
 4424 5b94 DF300000 		_DOLIT 'S'
 4424      53000000 
 4425 5b9c 7D2F0000 		_ADR EMIT 
 4426 5ba0 7D2F0000 		_ADR EMIT  
 4427 5ba4 D55A0000 		_ADR DOTS
 4428 5ba8 DF300000 		_DOLIT '>'
 4428      3E000000 
 4429 5bb0 DF300000 		_DOLIT 'R'
 4429      52000000 
 4430 5bb8 7D2F0000 		_ADR EMIT 
ARM GAS  forth.s 			page 200


 4431 5bbc 7D2F0000 		_ADR EMIT 
 4432 5bc0 155B0000 		_ADR RDOT 
 4433 5bc4 BB2E0000 		_UNNEST 
 4434              	
 4435              	
 4436              	/****************************
 4437              	  >BODY  ( xt -- adr )
 4438              	  get parameter field address
 4439              	  from code field address 
 4440              	****************************/
 4441 5bc8 7C5B0000 		_HEADER TOBODY,5,">BODY"
 4441      053E424F 
 4441      445900BF 
 4442 5bd4 06F10806 		add TOS,#8 
 4443 5bd8 FDF76CB9 		_NEXT 		
 4444              	
 4445              	/*****************************
 4446              	    >NAME	( ca -- na | F )
 4447              	 	Convert code address 
 4448              		to a name address.
 4449              	*****************************/
 4450 5bdc CC5B0000 		_HEADER TNAME,5,">NAME"
 4450      053E4E41 
 4450      4D4500BF 
 4451 5be8 504700BF 		_NEST
 4452 5bec E5310000 		_ADR	TOR			//  
 4453 5bf0 81380000 		_ADR	CNTXT			//  va
 4454 5bf4 75310000 		_ADR	AT			//  na
 4455              	TNAM1:
 4456 5bf8 69320000 		_ADR	DUPP			//  na na
 4457 5bfc 1F310000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4457      2C5C0000 
 4458 5c04 69320000 		_ADR	DUPP			//  na na
 4459 5c08 09490000 		_ADR	NAMET			//  na ca
 4460 5c0c D1310000 		_ADR	RAT			//  na ca code
 4461 5c10 11330000 		_ADR	XORR			//  na f --
 4462 5c14 1F310000 		_QBRAN	TNAM2
 4462      2C5C0000 
 4463 5c1c 15340000 		_ADR	CELLM			//  la 
 4464 5c20 75310000 		_ADR	AT			//  next_na
 4465 5c24 47310000 		_BRAN	TNAM1
 4465      F85B0000 
 4466              	TNAM2:	
 4467 5c2c A1310000 		_ADR	RFROM
 4468 5c30 59320000 		_ADR	DROP			//  0|na --
 4469 5c34 BB2E0000 		_UNNEST			// 0
 4470              	
 4471              	/********************************
 4472              	    .ID	 ( na -- )
 4473              	 	Display the name at address.
 4474              	********************************/
 4475 5c38 E05B0000 		_HEADER DOTID,3,".ID"
 4475      032E4944 
 4476 5c40 504700BF 		_NEST
 4477 5c44 79340000 		_ADR	QDUP			// if zero no name
 4478 5c48 1F310000 		_QBRAN	DOTI1
 4478      685C0000 
ARM GAS  forth.s 			page 201


 4479 5c50 09370000 		_ADR	COUNT
 4480 5c54 DF300000 		_DOLIT	0x1F
 4480      1F000000 
 4481 5c5c E9320000 		_ADR	ANDD			// mask lexicon bits
 4482 5c60 B1430000 		_ADR	TYPEE
 4483 5c64 BB2E0000 		_UNNEST			// display name string
 4484              	DOTI1:
 4485 5c68 41440000 		_DOTQP	9," {noName}"
 4485      09207B6E 
 4485      6F4E616D 
 4485      657D00BF 
 4486 5c78 BB2E0000 		_UNNEST
 4487              	
 4488              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4489              	.if WANT_SEE 
 4490              	/*******************************
 4491              	    SEE	 ( -- //  string> )
 4492              	 	A simple decompiler.
 4493              	*******************************/
 4494              		_HEADER SEE,3,"SEE"
 4495              		_NEST
 4496              		_ADR	TICK	//  ca --, starting address
 4497              		_ADR	CR	
 4498              		_DOLIT	20
 4499              		_ADR	TOR
 4500              	SEE1:
 4501              		_ADR	CELLP			//  a
 4502              		_ADR	DUPP			//  a a
 4503              		_ADR	DECOMP		//  a
 4504              		_DONXT	SEE1
 4505              		_ADR	DROP
 4506              		_UNNEST
 4507              	
 4508              	/*************************
 4509              	 	DECOMPILE ( a -- )
 4510              	 	Convert code in a.  
 4511              		Display name of command or as data.
 4512              	*************************************/
 4513              		_HEADER DECOMP,9,"DECOMPILE"
 4514              		_NEST
 4515              		_ADR	DUPP			//  a a
 4516              	// 	_ADR	TOR			//  a
 4517              		_ADR	AT			//  a code
 4518              		_ADR	DUPP			//  a code code
 4519              		_DOLIT	0xF800D000 //0xF800F800
 4520              		_ADR	ANDD
 4521              		_DOLIT	0xF000D000 //0xF800F000
 4522              		_ADR	EQUAL			//  a code ?
 4523              		_ADR	INVER 
 4524              		_QBRAN	DECOM2	//  not a command
 4525              		//  a valid_code --, extract address and display name
 4526              		MOVW	IP,#0xFFE
 4527              		MOV	WP,TOS
 4528              		LSL	TOS,TOS,#21		//  get bits 22-12
 4529              		ASR	TOS,TOS,#9		//  with sign extension
 4530              		LSR	WP,WP,#15		//  get bits 11-1
 4531              		AND	WP,WP,IP		//  retain only bits 11-1
ARM GAS  forth.s 			page 202


 4532              		ORR	TOS,TOS,WP		//  get bits 22-1
 4533              		NOP
 4534              		_ADR	OVER			//  a offset a
 4535              		_ADR	PLUS			//  a target-4
 4536              		_ADR	CELLP			//  a target
 4537              		_ADR	TNAME			//  a na/0 --, is it a name?
 4538              		_ADR	QDUP			//  name address or zero
 4539              		_QBRAN	DECOM1
 4540              		_ADR	SPACE			//  a na
 4541              		_ADR	DOTID			//  a --, display name
 4542              	// 	_ADR	RFROM			//  a
 4543              		_ADR	DROP
 4544              		_UNNEST
 4545              	DECOM1:	// _ADR	RFROM		//  a
 4546              		_ADR	AT			//  data
 4547              		_ADR	UDOT			//  display data
 4548              		_UNNEST
 4549              	DECOM2:
 4550              		_ADR	UDOT
 4551              	// 	_ADR	RFROM
 4552              		_ADR	DROP
 4553              		_UNNEST
 4554              	.endif 
 4555              	
 4556              	
 4557              	/*********************
 4558              	    WORDS	( -- )
 4559              	 	Display the names 
 4560              		in the context vocabulary.
 4561              	*******************************/
 4562 5c7c 3C5C0000 		_HEADER WORDS,5,"WORDS"
 4562      05574F52 
 4562      445300BF 
 4563 5c88 504700BF 		_NEST
 4564 5c8c E5430000 		_ADR	CR
 4565 5c90 81380000 		_ADR	CNTXT
 4566 5c94 75310000 		_ADR	AT			// only in context
 4567              	WORS1:
 4568 5c98 79340000 		_ADR	QDUP			// ?at end of list
 4569 5c9c 1F310000 		_QBRAN	WORS2
 4569      C05C0000 
 4570 5ca4 69320000 		_ADR	DUPP
 4571 5ca8 5D430000 		_ADR	SPACE
 4572 5cac 415C0000 		_ADR	DOTID			// display a name
 4573 5cb0 15340000 		_ADR	CELLM
 4574 5cb4 75310000 		_ADR	AT
 4575 5cb8 47310000 		_BRAN	WORS1
 4575      985C0000 
 4576              	WORS2:
 4577 5cc0 BB2E0000 		_UNNEST
 4578              	
 4579              	
 4580              	/*************************
 4581              		MARK <string> ( -- )
 4582              	    create forget point 
 4583              		in dictionary 
 4584              	*************************/	
ARM GAS  forth.s 			page 203


 4585 5cc4 805C0000 		_HEADER MARK,4,"MARK"
 4585      044D4152 
 4585      4B0000BF 
 4586 5cd0 504700BF 		_NEST
 4587 5cd4 C9580000 		_ADR CREAT 
 4588 5cd8 BD570000 		_ADR DODOES 
 4589 5cdc BB2E0000 		_UNNEST
 4590 5ce0 504700BF 		_NEST  
 4591 5ce4 A1310000 		_ADR RFROM 
 4592 5ce8 DF300000 		_DOLIT 8
 4592      08000000 
 4593 5cf0 79330000 		_ADR SUBB
 4594 5cf4 E95B0000 		_ADR TNAME
 4595 5cf8 15340000 		_ADR CELLM
 4596 5cfc 75310000 		_ADR AT  
 4597 5d00 C1380000 		_ADR LAST 
 4598 5d04 61310000 		_ADR STORE 
 4599 5d08 95560000 		_ADR OVERT
 4600 5d0c BB2E0000 		_UNNEST 
 4601              	
 4602              	/*********************************
 4603              		ARRAY "name" ( n -- )
 4604              	    create an array of n elements 
 4605              	*********************************/
 4606 5d10 C85C0000 		_HEADER ARRAY,5,"ARRAY"
 4606      05415252 
 4606      415900BF 
 4607 5d1c 504700BF 		_NEST 
 4608 5d20 E9480000 		_ADR	TOKEN
 4609 5d24 99550000 		_ADR	SNAME
 4610 5d28 95560000 		_ADR	OVERT
 4611 5d2c C52E0000 		_ADR	COMPI_NEST
 4612 5d30 DF300000 		_DOLIT	DO_ARRAY
 4612      5C5D0000 
 4613 5d38 01570000 		_ADR	CALLC
 4614 5d3c DF300000 		_DOLIT	UNNEST 
 4614      BA2E0000 
 4615 5d44 01570000 		_ADR	CALLC  
 4616 5d48 DF300000 		_DOLIT  4 
 4616      04000000 
 4617 5d50 89330000 		_ADR    STAR 
 4618 5d54 A9500000 		_ADR    ALLOT 
 4619 5d58 BB2E0000 		_UNNEST 	
 4620              	
 4621              	// does> du array
 4622              	DO_ARRAY:
 4623 5d5c 504700BF 		_NEST  
 4624 5d60 DF300000 		_DOLIT 4 
 4624      04000000 
 4625 5d68 89330000 		_ADR STAR  
 4626 5d6c D1310000 		_ADR RAT  
 4627 5d70 05340000 		_ADR CELLP 
 4628 5d74 69330000 		_ADR PLUS  
 4629 5d78 BB2E0000 		_UNNEST 
 4630              	
 4631              	
 4632              	/****************
ARM GAS  forth.s 			page 204


 4633              	  cold start
 4634              	*****************/
 4635              	
 4636              	/**********************************
 4637              	    VER	 ( -- n )
 4638              	 	Return the version 
 4639              		number of this implementation.
 4640              	hidden word used by COLD
 4641              	**********************************/
 4642              	VERSN:
 4643 5d7c 504700BF 		_NEST
 4644 5d80 DF300000 		_DOLIT	VER*256+EXT
 4644      00010000 
 4645 5d88 BB2E0000 		_UNNEST
 4646              	
 4647              	/*********************
 4648              	    hi	  ( -- )
 4649              	 	Display the sign-on 
 4650              		message.
 4651              	***********************/
 4652 5d8c 145D0000 		_HEADER HI,2,"HI"
 4652      02484900 
 4653 5d94 504700BF 		_NEST
 4654 5d98 E5430000 		_ADR	CR	// initialize I/O
 4655 5d9c 41440000 		_DOTQP	17, "beyond Jupiter, v" 
 4655      11626579 
 4655      6F6E6420 
 4655      4A757069 
 4655      7465722C 
 4656 5db4 D5370000 		_ADR	BASE
 4657 5db8 75310000 		_ADR	AT
 4658 5dbc C1400000 		_ADR	HEX	// save radix
 4659 5dc0 7D5D0000 		_ADR	VERSN
 4660 5dc4 A53F0000 		_ADR	BDIGS
 4661 5dc8 DF300000 		_DOLIT  0 
 4661      00000000 
 4662 5dd0 F13F0000 		_ADR	DIG
 4663 5dd4 F13F0000 		_ADR	DIG
 4664 5dd8 DF300000 		_DOLIT	'.'
 4664      2E000000 
 4665 5de0 C53F0000 		_ADR	HOLD
 4666 5de4 11400000 		_ADR	DIGS
 4667 5de8 6D400000 		_ADR	EDIGS
 4668 5dec B1430000 		_ADR	TYPEE	// format version number
 4669 5df0 D5370000 		_ADR	BASE
 4670 5df4 61310000 		_ADR	STORE
 4671 5df8 E5430000 		_ADR	CR
 4672 5dfc BB2E0000 		_UNNEST			// restore radix
 4673              	
 4674              	/***********************
 4675              	   HI_BOTH ( -- )
 4676              	   display sign-on 
 4677              	   on both CONSOLE
 4678              	***********************/
 4679              	HI_BOTH:
 4680 5e00 504700BF 	    _NEST 
 4681 5e04 010C0000 		_ADR LOCAL 
ARM GAS  forth.s 			page 205


 4682 5e08 310C0000 		_ADR CONSOLE 
 4683 5e0c 955D0000 		_ADR HI 
 4684 5e10 190C0000 		_ADR SERIAL 
 4685 5e14 310C0000 		_ADR CONSOLE 
 4686 5e18 955D0000 		_ADR HI
 4687 5e1c BB2E0000 		_UNNEST 
 4688              	
 4689              	/**********************
 4690              	 check if PS2 keyboard 
 4691              	 present.
 4692              	**********************/
 4693              	PS2_QUERY: 
 4694 5e20 504700BF 		_NEST 
 4695 5e24 DF300000 		_DOLIT 400 
 4695      90010000 
 4696 5e2c 15300000 		_ADR PAUSE
 4697 5e30 211A0000 		_ADR PS2_QKEY
 4698 5e34 1F310000 		_QBRAN 1f
 4698      505E0000 
 4699 5e3c DF300000 		_DOLIT BAT_OK 
 4699      AA000000 
 4700 5e44 11330000 		_ADR XORR 
 4701 5e48 1F310000 		_QBRAN 9f 
 4701      945E0000 
 4702 5e50 091C0000 	1:	_ADR KBD_RST
 4703 5e54 DF300000 		_DOLIT BAT_OK 
 4703      AA000000 
 4704 5e5c 11330000 		_ADR XORR  
 4705 5e60 1F310000 		_QBRAN 9f  
 4705      945E0000 
 4706              	// no ps2 keyboard 
 4707              	// swith to serial console
 4708 5e68 E5430000 		_ADR CR 
 4709 5e6c 41440000 		_DOTQP 25,"no PS2 keyboard detected."
 4709      196E6F20 
 4709      50533220 
 4709      6B657962 
 4709      6F617264 
 4710 5e8c 190C0000 		_ADR SERIAL 
 4711 5e90 310C0000 		_ADR CONSOLE 
 4712 5e94 BB2E0000 	9:	_UNNEST 
 4713              	
 4714              	/*************************
 4715              	   check PA8 to 
 4716              	   select console 
 4717              	   PA8 -> low  LOCAL 
 4718              	   PA8 -> high SERIAL 
 4719              	*************************/
 4720              	IF_SENSE:
 4721 5e98 504700BF 		_NEST 
 4722 5e9c 010C0000 		_ADR LOCAL 
 4723 5ea0 DF300000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4723      10000240 
 4724 5ea8 75310000 		_ADR AT 
 4725 5eac DF300000 		_DOLIT (1<<8)
 4725      00010000 
 4726 5eb4 E9320000 		_ADR ANDD 
ARM GAS  forth.s 			page 206


 4727 5eb8 1F310000 		_QBRAN 9f 
 4727      C45E0000 
 4728 5ec0 C5330000 		_ADR ONEP 
 4729 5ec4 310C0000 	9:  _ADR CONSOLE 
 4730 5ec8 BB2E0000 		_UNNEST 
 4731              	
 4732              	/****************************
 4733              	   display READY on active
 4734              	   console
 4735              	***************************/
 4736              	READY:
 4737 5ecc 504700BF 	    _NEST 
 4738 5ed0 41440000 		_DOTQP 5,"READY"
 4738      05524541 
 4738      445900BF 
 4739 5edc E5430000 		_ADR  CR 
 4740 5ee0 BB2E0000 	    _UNNEST 
 4741              	
 4742              	/********************
 4743              	    COLD	( -- )
 4744              	 	The high level cold 
 4745              		start sequence.
 4746              	**************************/
 4747 5ee4 905D0000 		.word	LINK 
 4748              		LINK = . 
 4749 5ee8 04       	_LASTN:	.byte  4
 4750 5ee9 434F4C44 		.ascii "COLD"
 4751 5eed 0000BF   		.p2align 2	
 4752              	COLD:
 4753 5ef0 00B5FAF7 		_CALL forth_init 
 4753      21FB5DF8 
 4753      04EB
 4754 5efa DFF85CC0 		ldr IP,=COLD1 
 4755 5efe FCF7D9BF 		_NEXT
 4756 5f02 00BF     		.p2align 2 
 4757              	COLD1:
 4758 5f04 DF300000 		_DOLIT  0 
 4758      00000000 
 4759 5f0c 49300000 		_ADR ULED // turn off user LED 
 4760 5f10 DF300000 		_DOLIT	UZERO
 4760      64080000 
 4761 5f18 DF300000 		_DOLIT	UPP
 4761      00000020 
 4762 5f20 DF300000 		_DOLIT	ULAST-UZERO
 4762      C0000000 
 4763 5f28 7D3E0000 		_ADR	MOVE 			// initialize user area
 4764 5f2c 414F0000 		_ADR	PRESE			// initialize stack and TIB
 4765 5f30 B51E0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4766 5f34 215E0000 		_ADR 	PS2_QUERY  
 4767 5f38 BD370000 		_ADR	TBOOT
 4768 5f3c 2D3E0000 		_ADR	ATEXE			// application boot
 4769 5f40 95560000 		_ADR	OVERT
 4770 5f44 995E0000 		_ADR	IF_SENSE
 4771 5f48 CD5E0000 		_ADR    READY 
 4772 5f4c 47310000 		_BRAN	QUIT			// start interpretation
 4772      7C4F0000 
 4773              	COLD2:
ARM GAS  forth.s 			page 207


 4774              		.p2align 2 	
 4775              	CTOP:
 4776 5f54 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4777              	
 4778              	
 4779 5f58 045F0000 	  .end 
ARM GAS  forth.s 			page 208


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 209


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 210


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 211


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 212


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 213


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020000000 UPP
          macros.inc:54     *ABS*:0000000020000512 DTOP
          macros.inc:55     *ABS*:000000002001812c DEND
          macros.inc:56     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:58     *ABS*:0000000000000040 COMPO
          macros.inc:59     *ABS*:0000000000000080 IMEDD
          macros.inc:60     *ABS*:00000000ffffff1f MASKK
          macros.inc:62     *ABS*:0000000000000004 CELLL
          macros.inc:63     *ABS*:000000000000000a BASEE
          macros.inc:64     *ABS*:0000000000000008 VOCSS
          macros.inc:66     *ABS*:0000000000000008 BKSPP
          macros.inc:67     *ABS*:000000000000000a LF
          macros.inc:68     *ABS*:000000000000000d CRR
          macros.inc:69     *ABS*:000000000000001b ERR
          macros.inc:70     *ABS*:0000000000000027 TIC
          macros.inc:75     *ABS*:0000000000000004 RNDSEED
          macros.inc:76     *ABS*:0000000000000008 TICKS
          macros.inc:77     *ABS*:000000000000000c CD_TIMER
          macros.inc:78     *ABS*:0000000000000010 BOOT
          macros.inc:79     *ABS*:0000000000000014 STDIN
          macros.inc:80     *ABS*:0000000000000018 STDOUT
          macros.inc:81     *ABS*:000000000000001c NBASE
          macros.inc:82     *ABS*:0000000000000020 BCHAR
          macros.inc:83     *ABS*:0000000000000024 TMP
          macros.inc:84     *ABS*:0000000000000028 CSPAN
ARM GAS  forth.s 			page 214


          macros.inc:85     *ABS*:000000000000002c TOIN
          macros.inc:86     *ABS*:0000000000000030 SRC
          macros.inc:87     *ABS*:0000000000000030 NTIBB
          macros.inc:88     *ABS*:0000000000000034 TIBUF
          macros.inc:89     *ABS*:0000000000000038 SRCID
             forth.s:3311   .text:0000000000004e58 EVAL
          macros.inc:91     *ABS*:0000000000000040 VHOLD
          macros.inc:92     *ABS*:0000000000000044 CTXT
          macros.inc:93     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:94     *ABS*:000000000000004c USER_CTOP
          macros.inc:95     *ABS*:0000000000000050 LASTN
          macros.inc:96     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:97     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:98     *ABS*:0000000000000064 RX_HEAD
          macros.inc:99     *ABS*:0000000000000068 RX_TAIL
          macros.inc:100    *ABS*:000000000000006c VID_CNTR
          macros.inc:101    *ABS*:0000000000000070 VID_STATE
          macros.inc:102    *ABS*:0000000000000074 VID_FIELD
          macros.inc:103    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:104    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:105    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:106    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:107    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:108    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:109    *ABS*:0000000000000098 ROW
          macros.inc:110    *ABS*:000000000000009c COL
          macros.inc:111    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:112    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:113    *ABS*:00000000000000a8 VFPSW
          macros.inc:114    *ABS*:00000000000000ac VFBASE
          macros.inc:115    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:116    *ABS*:00000000000000b4 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e28 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b0c uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001704 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002eb4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3375   .text:0000000000004f40 PRESE
             forth.s:2465   .text:0000000000004440 DOTQP
              init.s:162    .text:0000000000000032 $t
ARM GAS  forth.s 			page 215


              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002f00 CFSR
             forth.s:543    .text:0000000000003268 DUPP
             forth.s:478    .text:00000000000031e4 TOR
             forth.s:326    .text:00000000000030de DOLIT
             forth.s:1208   .text:00000000000037d4 BASE
             forth.s:412    .text:0000000000003160 STORE
             forth.s:2549   .text:000000000000453c UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:449    .text:00000000000031a0 RFROM
             forth.s:607    .text:00000000000032e8 ANDD
             forth.s:367    .text:000000000000311e QBRAN
             forth.s:145    .text:0000000000002f20 BFAR
             forth.s:179    .text:0000000000002f7c EMIT
             forth.s:2371   .text:000000000000435c SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:000000000000220c FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2417   .text:00000000000043e4 CR
             forth.s:422    .text:0000000000003174 AT
             forth.s:673    .text:0000000000003378 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2567   .text:0000000000004570 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:803    .text:0000000000003478 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:664    .text:0000000000003368 PLUS
             forth.s:1110   .text:0000000000003708 COUNT
             forth.s:2399   .text:00000000000043b0 TYPEE
             forth.s:947    .text:00000000000035b0 CLZ
             forth.s:551    .text:0000000000003278 SWAP
             forth.s:655    .text:0000000000003358 LSHIFT
               fpu.s:123    .text:000000000000222c CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3391   .text:0000000000004f7c QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
ARM GAS  forth.s 			page 216


              init.s:311    .text:0000000000000294 $d
             forth.s:3185   .text:0000000000004ce4 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:262    .text:0000000000003048 ULED
             forth.s:1181   .text:000000000000378c MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:646    .text:0000000000003340 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:00000000000021ae fpu_init
          ser-term.s:56     .text:0000000000000b3a ser_init
             tvout.s:74     .text:0000000000000d78 tv_init
           ps2_kbd.s:307    .text:0000000000001924 kbd_init
         spi-flash.s:41     .text:0000000000001d38 flash_spi_init
             forth.s:4752   .text:0000000000005ef0 COLD
             forth.s:83     .text:0000000000002eac NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:910    .text:0000000000000924 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4679   .text:0000000000005e00 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a20 PS2_QKEY
             tvout.s:563    .text:00000000000012e8 TV_EMIT
ARM GAS  forth.s 			page 217


             forth.s:3245   .text:0000000000004d64 INTER
             forth.s:4749   .text:0000000000005ee8 _LASTN
             forth.s:4775   .text:0000000000005f54 CTOP
             forth.s:4748   .text:0000000000005ee8 LINK
              init.s:915    .text:0000000000000924 $d
       environment.s:32     .text:0000000000000954 _ENVQ
       environment.s:32     .text:0000000000000964 ENVQ
       environment.s:35     .text:0000000000000968 $d
             forth.s:1286   .text:0000000000003880 CNTXT
       environment.s:215    .text:0000000000000aea _ENVLASTN
             forth.s:535    .text:0000000000003258 DROP
             forth.s:722    .text:00000000000033d4 ONEM
             forth.s:2991   .text:0000000000004a70 NAMEQ
             forth.s:335    .text:00000000000030f4 EXECU
             forth.s:396    .text:0000000000003146 BRAN
             forth.s:90     .text:0000000000002eba UNNEST
       environment.s:201    .text:0000000000000ac6 ENVLNK
       environment.s:82     .text:00000000000009c8 _CNTDSTR
       environment.s:82     .text:00000000000009d8 $t
       environment.s:82     .text:00000000000009d8 CNTDSTR
       environment.s:223    .text:0000000000000b00 flag_true
       environment.s:95     .text:00000000000009e2 $d
       environment.s:95     .text:00000000000009e6 _SLHOLD
       environment.s:95     .text:00000000000009ec $t
       environment.s:95     .text:00000000000009ec SLHOLD
       environment.s:107    .text:00000000000009f6 $d
       environment.s:107    .text:00000000000009fa _SLPAD
       environment.s:107    .text:0000000000000a00 SLPAD
       environment.s:118    .text:0000000000000a0a $d
       environment.s:118    .text:0000000000000a0e _ADRBITS
       environment.s:118    .text:0000000000000a20 $t
       environment.s:118    .text:0000000000000a20 ADRBITS
       environment.s:130    .text:0000000000000a2a $d
       environment.s:130    .text:0000000000000a2e _FLOORED
       environment.s:130    .text:0000000000000a36 $t
       environment.s:130    .text:0000000000000a38 FLOORED
       environment.s:141    .text:0000000000000a3a $d
       environment.s:141    .text:0000000000000a3e _MAXCHAR
       environment.s:141    .text:0000000000000a48 MAXCHAR
       environment.s:152    .text:0000000000000a52 $d
       environment.s:152    .text:0000000000000a56 _MAXD
       environment.s:152    .text:0000000000000a5c $t
       environment.s:152    .text:0000000000000a5c MAXD
       environment.s:165    .text:0000000000000a76 $d
       environment.s:165    .text:0000000000000a7a _MAXN
       environment.s:165    .text:0000000000000a80 $t
       environment.s:165    .text:0000000000000a80 MAXN
       environment.s:176    .text:0000000000000a8e $d
       environment.s:176    .text:0000000000000a92 _MAXU
       environment.s:176    .text:0000000000000a98 $t
       environment.s:176    .text:0000000000000a98 MAXU
       environment.s:187    .text:0000000000000aa2 $d
       environment.s:187    .text:0000000000000aa6 _MAXUD
       environment.s:187    .text:0000000000000ab0 MAXUD
       environment.s:201    .text:0000000000000ac2 $d
       environment.s:201    .text:0000000000000ac6 _RSTKCELLS
       environment.s:201    .text:0000000000000adc RSTKCELLS
ARM GAS  forth.s 			page 218


       environment.s:213    .text:0000000000000ae6 $d
       environment.s:214    .text:0000000000000aea ENVLINK
       environment.s:217    .text:0000000000000af6 $t
       environment.s:218    .text:0000000000000af8 STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000b92 $d
          ser-term.s:90     .text:0000000000000b96 _SER_QKEY
          ser-term.s:90     .text:0000000000000ba0 SER_QKEY
          ser-term.s:110    .text:0000000000000bcc $d
          ser-term.s:110    .text:0000000000000bd0 _SER_EMIT
          ser-term.s:110    .text:0000000000000bdc SER_EMIT
          ser-term.s:124    .text:0000000000000bf6 $d
          ser-term.s:124    .text:0000000000000bfa _LOCAL
          ser-term.s:124    .text:0000000000000c00 $t
          ser-term.s:124    .text:0000000000000c00 LOCAL
          ser-term.s:133    .text:0000000000000c0c $d
          ser-term.s:133    .text:0000000000000c10 _SERIAL
          ser-term.s:133    .text:0000000000000c18 SERIAL
          ser-term.s:142    .text:0000000000000c24 $d
          ser-term.s:142    .text:0000000000000c28 _CONSOLE
          ser-term.s:142    .text:0000000000000c30 $t
          ser-term.s:142    .text:0000000000000c30 CONSOLE
          ser-term.s:164    .text:0000000000000c50 $d
          ser-term.s:164    .text:0000000000000c54 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c60 ANSI_PARAM
          ser-term.s:166    .text:0000000000000c64 $d
             forth.s:714    .text:00000000000033c4 ONEP
             forth.s:1653   .text:0000000000003c08 SLMOD
          ser-term.s:191    .text:0000000000000cd0 _ANSI_ESC
          ser-term.s:191    .text:0000000000000cd8 ANSI_ESC
          ser-term.s:193    .text:0000000000000cdc $d
          ser-term.s:203    .text:0000000000000cfc _SER_AT
          ser-term.s:203    .text:0000000000000d04 SER_AT
          ser-term.s:205    .text:0000000000000d08 $d
          ser-term.s:219    .text:0000000000000d38 _SER_CLS
          ser-term.s:219    .text:0000000000000d40 $t
          ser-term.s:219    .text:0000000000000d40 SER_CLS
          ser-term.s:221    .text:0000000000000d44 $d
          ser-term.s:228    .text:0000000000000d68 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
ARM GAS  forth.s 			page 219


             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d78 $t
             tvout.s:150    .text:0000000000000e54 state_vsync
             tvout.s:191    .text:0000000000000ea8 state_pre_video
             tvout.s:202    .text:0000000000000eba state_video_out
             tvout.s:237    .text:0000000000000f18 state_post_video
             tvout.s:254    .text:0000000000000f3e tv_isr_exit
             tvout.s:180    .text:0000000000000e8e sync_end
             tvout.s:246    .text:0000000000000f2a frame_end
             tvout.s:264    .text:0000000000000f40 $d
             tvout.s:264    .text:0000000000000f44 _BACKCOLOR
             tvout.s:264    .text:0000000000000f50 BACKCOLOR
             tvout.s:271    .text:0000000000000f5c $d
             tvout.s:271    .text:0000000000000f60 _PENCOLOR
             tvout.s:271    .text:0000000000000f6a $t
             tvout.s:271    .text:0000000000000f6c PENCOLOR
             tvout.s:278    .text:0000000000000f78 $d
             tvout.s:278    .text:0000000000000f7c _CURSOR_COL
             tvout.s:278    .text:0000000000000f84 CURSOR_COL
             tvout.s:285    .text:0000000000000f90 $d
             tvout.s:285    .text:0000000000000f94 _CURSOR_ROW
             tvout.s:285    .text:0000000000000f98 $t
             tvout.s:285    .text:0000000000000f98 CURSOR_ROW
             tvout.s:292    .text:0000000000000fa4 $d
             tvout.s:292    .text:0000000000000fa8 _ROWY
             tvout.s:292    .text:0000000000000fae $t
             tvout.s:292    .text:0000000000000fb0 ROWY
             tvout.s:299    .text:0000000000000fbc $d
             tvout.s:299    .text:0000000000000fc0 _COLX
             tvout.s:299    .text:0000000000000fc6 $t
             tvout.s:299    .text:0000000000000fc8 COLX
             tvout.s:306    .text:0000000000000fd4 $d
             tvout.s:306    .text:0000000000000fd8 _FONT
             tvout.s:306    .text:0000000000000fe0 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000fec $d
             tvout.s:313    .text:0000000000000ff0 _VIDBUFF
             tvout.s:313    .text:0000000000000ff8 $t
             tvout.s:313    .text:0000000000000ff8 VIDBUFF
             tvout.s:325    .text:0000000000001002 $d
             tvout.s:325    .text:0000000000001006 _PLOT
             tvout.s:325    .text:000000000000100c PLOT
             tvout.s:373    .text:0000000000001090 plot_op
             tvout.s:341    .text:0000000000001038 op_back
             tvout.s:350    .text:0000000000001052 op_pen
             tvout.s:359    .text:000000000000106c op_invert
ARM GAS  forth.s 			page 220


             tvout.s:363    .text:0000000000001074 op_xor
             tvout.s:373    .text:0000000000001090 $d
             tvout.s:378    .text:0000000000001098 _VSYNC
             tvout.s:378    .text:000000000000109e $t
             tvout.s:378    .text:00000000000010a0 VSYNC
             tvout.s:386    .text:00000000000010aa $d
             tvout.s:386    .text:00000000000010ae _CLS
             tvout.s:386    .text:00000000000010b2 $t
             tvout.s:386    .text:00000000000010b4 CLS
             tvout.s:410    .text:00000000000010f6 $d
             tvout.s:410    .text:00000000000010fa _CLRLINE
             tvout.s:410    .text:0000000000001102 $t
             tvout.s:410    .text:0000000000001104 CLRLINE
             tvout.s:412    .text:0000000000001108 $d
             forth.s:682    .text:0000000000003388 STAR
             forth.s:1947   .text:0000000000003ec4 FILL
             tvout.s:427    .text:000000000000113c _SCROLLUP
             tvout.s:427    .text:0000000000001148 SCROLLUP
             tvout.s:429    .text:000000000000114c $d
             forth.s:1915   .text:0000000000003e7c MOVE
             tvout.s:448    .text:0000000000001194 _SCROLLDOWN
             tvout.s:448    .text:00000000000011a0 SCROLLDOWN
             tvout.s:450    .text:00000000000011a4 $d
             tvout.s:467    .text:00000000000011e4 _TV_CRLF
             tvout.s:467    .text:00000000000011ec $t
             tvout.s:467    .text:00000000000011ec TV_CRLF
             tvout.s:482    .text:000000000000120e $d
             tvout.s:482    .text:0000000000001212 _RIGHT
             tvout.s:482    .text:0000000000001218 $t
             tvout.s:482    .text:0000000000001218 RIGHT
             tvout.s:495    .text:000000000000122c $d
             tvout.s:495    .text:0000000000001230 _LEFT
             tvout.s:495    .text:0000000000001238 LEFT
             tvout.s:511    .text:0000000000001264 FONT_PIXEL
             tvout.s:518    .text:0000000000001274 INCR_X
             tvout.s:525    .text:0000000000001280 NEXT_PIXEL
             tvout.s:534    .text:0000000000001288 CHAR_ROW
             tvout.s:536    .text:000000000000128c $d
             forth.s:853    .text:00000000000034dc DDUP
             forth.s:469    .text:00000000000031d0 RAT
             forth.s:348    .text:0000000000003100 DONXT
             forth.s:844    .text:00000000000034c8 TDROP
             tvout.s:551    .text:00000000000012c8 CHAR_FONT
             tvout.s:552    .text:00000000000012c8 $t
             tvout.s:563    .text:00000000000012dc $d
             tvout.s:563    .text:00000000000012e0 _TV_EMIT
             tvout.s:563    .text:00000000000012e8 $t
             tvout.s:565    .text:00000000000012ec $d
             forth.s:1006   .text:000000000000362c ULESS
             tvout.s:593    .text:0000000000001370 CTRL_KEY
             forth.s:813    .text:000000000000348c ROT
             forth.s:440    .text:0000000000003194 CAT
             tvout.s:660    .text:0000000000001458 SHOW_CURSOR
             tvout.s:691    .text:00000000000014e0 HIDE_CURSOR
             forth.s:981    .text:00000000000035f4 EQUAL
             tvout.s:650    .text:0000000000001438 BACK_SPACE
             tvout.s:618    .text:00000000000013e0 CAR_RET
ARM GAS  forth.s 			page 221


             tvout.s:629    .text:00000000000013f8 LN_FEED
             tvout.s:619    .text:00000000000013e0 $t
             tvout.s:620    .text:00000000000013e4 $d
             tvout.s:630    .text:00000000000013f8 $t
             tvout.s:631    .text:00000000000013fc $d
             forth.s:625    .text:0000000000003310 XORR
             tvout.s:651    .text:0000000000001438 $t
             tvout.s:652    .text:000000000000143c $d
             tvout.s:660    .text:000000000000144c _SHOW_CURSOR
             tvout.s:660    .text:0000000000001458 $t
             tvout.s:663    .text:000000000000145c $d
             forth.s:795    .text:0000000000003468 TWOSL
             forth.s:430    .text:0000000000003180 CSTOR
             forth.s:835    .text:00000000000034b4 DDROP
             tvout.s:691    .text:00000000000014d4 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014e0 $t
             tvout.s:694    .text:00000000000014e4 $d
             forth.s:616    .text:00000000000032fc ORR
             tvout.s:704    .text:000000000000150c _TV_AT
             tvout.s:704    .text:0000000000001512 $t
             tvout.s:704    .text:0000000000001514 TV_AT
             tvout.s:719    .text:0000000000001538 $d
             tvout.s:719    .text:000000000000153c _INPUT
             tvout.s:719    .text:0000000000001542 $t
             tvout.s:719    .text:0000000000001544 INPUT
             tvout.s:721    .text:0000000000001548 $d
             forth.s:1835   .text:0000000000003db8 PAD
             forth.s:3131   .text:0000000000004c30 ACCEP
             forth.s:576    .text:00000000000032a8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001574 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
ARM GAS  forth.s 			page 222


       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
ARM GAS  forth.s 			page 223


       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000001580 sc_ascii
         mcSaite.inc:100    .text:0000000000001634 shifted
         mcSaite.inc:151    .text:0000000000001694 altchar
         mcSaite.inc:167    .text:00000000000016a4 extended
         mcSaite.inc:191    .text:00000000000016cc controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
ARM GAS  forth.s 			page 224


           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001702 $t
           ps2_kbd.s:179    .text:000000000000182e send_bit
           ps2_kbd.s:107    .text:0000000000001764 start_bit
           ps2_kbd.s:118    .text:0000000000001788 parity_bit
           ps2_kbd.s:125    .text:000000000000179c stop_bit
           ps2_kbd.s:152    .text:00000000000017f2 store_code
           ps2_kbd.s:253    .text:00000000000018c2 do_async_key
           ps2_kbd.s:204    .text:0000000000001872 send_parity
           ps2_kbd.s:211    .text:0000000000001884 send_stop
           ps2_kbd.s:218    .text:000000000000188e rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018ae is_async_key
           ps2_kbd.s:286    .text:0000000000001912 async_keys
           ps2_kbd.s:378    .text:00000000000019f8 table_scan
           ps2_kbd.s:260    .text:00000000000018d4 set_async_key
           ps2_kbd.s:295    .text:0000000000001920 async_jump
           ps2_kbd.s:265    .text:00000000000018e2 shift_key
           ps2_kbd.s:273    .text:00000000000018f2 set_reset
           ps2_kbd.s:268    .text:00000000000018e8 ctrl_key
           ps2_kbd.s:271    .text:00000000000018ee alt_key
           ps2_kbd.s:287    .text:0000000000001912 $d
           ps2_kbd.s:340    .text:00000000000019a0 $d
           ps2_kbd.s:340    .text:00000000000019a4 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019ae $t
           ps2_kbd.s:340    .text:00000000000019b0 KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019c0 keycode
           ps2_kbd.s:365    .text:00000000000019e8 wait_code
           ps2_kbd.s:396    .text:0000000000001a12 $d
           ps2_kbd.s:396    .text:0000000000001a16 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a6c inkey_exit
           ps2_kbd.s:418    .text:0000000000001a70 pause_key
           ps2_kbd.s:427    .text:0000000000001a86 do_modifiers
           ps2_kbd.s:436    .text:0000000000001a9e shift_down
           ps2_kbd.s:440    .text:0000000000001aa4 altchar_down
           ps2_kbd.s:444    .text:0000000000001aaa ctrl_down
           ps2_kbd.s:452    .text:0000000000001ac6 do_capslock
           ps2_kbd.s:478    .text:0000000000001aea kbd_send
           ps2_kbd.s:553    .text:0000000000001bde kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001bfc $d
           ps2_kbd.s:567    .text:0000000000001c00 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001c08 $t
           ps2_kbd.s:567    .text:0000000000001c08 KBD_RST
           ps2_kbd.s:591    .text:0000000000001c52 $d
           ps2_kbd.s:591    .text:0000000000001c56 _KBD_LED
ARM GAS  forth.s 			page 225


           ps2_kbd.s:591    .text:0000000000001c5e $t
           ps2_kbd.s:591    .text:0000000000001c60 KBD_LED
           ps2_kbd.s:616    .text:0000000000001cb4 $d
           ps2_kbd.s:616    .text:0000000000001cb8 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001cc4 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001cee $d
           ps2_kbd.s:633    .text:0000000000001cf2 _WKEY
           ps2_kbd.s:633    .text:0000000000001cfc WKEY
           ps2_kbd.s:635    .text:0000000000001d00 $d
           ps2_kbd.s:640    .text:0000000000001d18 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001d38 $t
         spi-flash.s:85     .text:0000000000001dda $d
         spi-flash.s:85     .text:0000000000001dde _CHIP_SEL
         spi-flash.s:85     .text:0000000000001de8 CHIP_SEL
         spi-flash.s:97     .text:0000000000001e06 $d
         spi-flash.s:97     .text:0000000000001e0a _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001e14 $t
         spi-flash.s:97     .text:0000000000001e14 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001e42 $d
         spi-flash.s:113    .text:0000000000001e46 _RD_BYTE
         spi-flash.s:113    .text:0000000000001e4e $t
         spi-flash.s:113    .text:0000000000001e50 RD_BYTE
         spi-flash.s:133    .text:0000000000001e78 $d
         spi-flash.s:133    .text:0000000000001e7c _WR_BYTE
         spi-flash.s:133    .text:0000000000001e84 $t
         spi-flash.s:133    .text:0000000000001e84 WR_BYTE
         spi-flash.s:151    .text:0000000000001ea8 $d
         spi-flash.s:151    .text:0000000000001eac _WR_DIS
         spi-flash.s:151    .text:0000000000001eb4 WR_DIS
         spi-flash.s:153    .text:0000000000001eb8 $d
         spi-flash.s:163    .text:0000000000001ed4 _WR_ENBL
         spi-flash.s:163    .text:0000000000001edc $t
         spi-flash.s:163    .text:0000000000001edc WR_ENBL
         spi-flash.s:165    .text:0000000000001ee0 $d
         spi-flash.s:175    .text:0000000000001efc _RD_SR
         spi-flash.s:175    .text:0000000000001f02 $t
         spi-flash.s:175    .text:0000000000001f04 RD_SR
         spi-flash.s:177    .text:0000000000001f08 $d
         spi-flash.s:185    .text:0000000000001f2c sr_cmd
         spi-flash.s:191    .text:0000000000001f33 _SEND_ADR
         spi-flash.s:191    .text:0000000000001f3c $t
         spi-flash.s:191    .text:0000000000001f3c SEND_ADR
         spi-flash.s:193    .text:0000000000001f40 $d
         spi-flash.s:208    .text:0000000000001f74 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001f7e $t
         spi-flash.s:208    .text:0000000000001f80 WAIT_DONE
         spi-flash.s:210    .text:0000000000001f84 $d
         spi-flash.s:223    .text:0000000000001fb4 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001fbe $t
         spi-flash.s:223    .text:0000000000001fc0 ERASE_BLK
         spi-flash.s:225    .text:0000000000001fc4 $d
         spi-flash.s:238    .text:0000000000001fec _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001ff8 ERASE_CHIP
ARM GAS  forth.s 			page 226


         spi-flash.s:240    .text:0000000000001ffc $d
         spi-flash.s:256    .text:000000000000202c _RD_BLK
         spi-flash.s:256    .text:0000000000002034 RD_BLK
         spi-flash.s:258    .text:0000000000002038 $d
         spi-flash.s:278    .text:0000000000002080 _WR_BLK
         spi-flash.s:278    .text:0000000000002088 WR_BLK
         spi-flash.s:280    .text:000000000000208c $d
             forth.s:2644   .text:0000000000004648 HDOT
         spi-flash.s:316    .text:00000000000020e4 _SEARCH_FILE
         spi-flash.s:316    .text:00000000000020f0 $t
         spi-flash.s:316    .text:00000000000020f0 SEARCH_FILE
         spi-flash.s:319    .text:00000000000020f4 $d
         spi-flash.s:325    .text:00000000000020fc _ERASE_FILE
         spi-flash.s:325    .text:0000000000002108 ERASE_FILE
         spi-flash.s:328    .text:000000000000210c $d
         spi-flash.s:334    .text:0000000000002114 _DIR
         spi-flash.s:334    .text:0000000000002118 $t
         spi-flash.s:334    .text:0000000000002118 DIR
         spi-flash.s:337    .text:000000000000211c $d
         spi-flash.s:343    .text:0000000000002124 _SAVE
         spi-flash.s:343    .text:000000000000212c SAVE
         spi-flash.s:346    .text:0000000000002130 $d
         spi-flash.s:352    .text:0000000000002138 _LOAD
         spi-flash.s:352    .text:0000000000002140 LOAD
         spi-flash.s:355    .text:0000000000002144 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:000000000000216c p10
               fpu.s:59     .text:0000000000002198 _PWR10
               fpu.s:59     .text:000000000000219e $t
               fpu.s:59     .text:00000000000021a0 PWR10
               fpu.s:90     .text:00000000000021cc $d
               fpu.s:90     .text:00000000000021d0 _FDI
               fpu.s:90     .text:00000000000021d4 $t
               fpu.s:90     .text:00000000000021d4 FDI
               fpu.s:100    .text:00000000000021e6 $d
               fpu.s:100    .text:00000000000021ea _FEI
               fpu.s:100    .text:00000000000021ee $t
               fpu.s:100    .text:00000000000021f0 FEI
               fpu.s:110    .text:0000000000002202 $d
               fpu.s:110    .text:0000000000002206 _FPSCR
               fpu.s:110    .text:000000000000220c $t
               fpu.s:123    .text:000000000000221c $d
               fpu.s:123    .text:0000000000002220 _CLR_FPSCR
               fpu.s:123    .text:000000000000222a $t
               fpu.s:136    .text:0000000000002244 $d
               fpu.s:136    .text:0000000000002248 _TOS0
               fpu.s:136    .text:000000000000224c $t
               fpu.s:136    .text:000000000000224c TOS0
               fpu.s:145    .text:0000000000002258 $d
               fpu.s:145    .text:000000000000225c _TOS1
               fpu.s:145    .text:0000000000002260 $t
               fpu.s:145    .text:0000000000002260 TOS1
               fpu.s:154    .text:000000000000226c $d
               fpu.s:154    .text:0000000000002270 _TOS2
ARM GAS  forth.s 			page 227


               fpu.s:154    .text:0000000000002274 $t
               fpu.s:154    .text:0000000000002274 TOS2
               fpu.s:163    .text:0000000000002280 $d
               fpu.s:163    .text:0000000000002284 _S0FROM
               fpu.s:163    .text:0000000000002288 $t
               fpu.s:163    .text:0000000000002288 S0FROM
               fpu.s:172    .text:0000000000002294 $d
               fpu.s:172    .text:0000000000002298 _S1FROM
               fpu.s:172    .text:000000000000229c $t
               fpu.s:172    .text:000000000000229c S1FROM
               fpu.s:181    .text:00000000000022a8 $d
               fpu.s:181    .text:00000000000022ac _S2FROM
               fpu.s:181    .text:00000000000022b0 $t
               fpu.s:181    .text:00000000000022b0 S2FROM
               fpu.s:192    .text:00000000000022bc $d
               fpu.s:192    .text:00000000000022c0 _FTOS
               fpu.s:192    .text:00000000000022c4 $t
               fpu.s:192    .text:00000000000022c4 FTOS
               fpu.s:202    .text:00000000000022d4 $d
               fpu.s:202    .text:00000000000022d8 _TRUNC
               fpu.s:202    .text:00000000000022de $t
               fpu.s:202    .text:00000000000022e0 TRUNC
               fpu.s:212    .text:00000000000022f0 $d
               fpu.s:212    .text:00000000000022f4 _STOF
               fpu.s:212    .text:00000000000022f8 $t
               fpu.s:212    .text:00000000000022f8 STOF
               fpu.s:222    .text:0000000000002308 $d
               fpu.s:222    .text:000000000000230c _FPLUS
               fpu.s:222    .text:0000000000002310 FPLUS
               fpu.s:235    .text:0000000000002328 $d
               fpu.s:235    .text:000000000000232c _FSUBB
               fpu.s:235    .text:0000000000002330 FSUBB
               fpu.s:249    .text:0000000000002348 $d
               fpu.s:249    .text:000000000000234c _FSTAR
               fpu.s:249    .text:0000000000002350 FSTAR
               fpu.s:262    .text:0000000000002368 $d
               fpu.s:262    .text:000000000000236c _FSLH
               fpu.s:262    .text:0000000000002370 FSLH
               fpu.s:275    .text:0000000000002388 $d
               fpu.s:275    .text:000000000000238c _FNEG
               fpu.s:275    .text:0000000000002394 $t
               fpu.s:275    .text:0000000000002394 FNEG
               fpu.s:285    .text:00000000000023a4 $d
               fpu.s:285    .text:00000000000023a8 _FABS
               fpu.s:285    .text:00000000000023b0 FABS
               fpu.s:297    .text:00000000000023c4 $d
               fpu.s:297    .text:00000000000023c8 _SQRT
               fpu.s:297    .text:00000000000023d0 SQRT
               fpu.s:307    .text:00000000000023e0 $d
               fpu.s:307    .text:00000000000023e4 _FZLESS
               fpu.s:307    .text:00000000000023e8 $t
               fpu.s:307    .text:00000000000023e8 FZLESS
               fpu.s:319    .text:0000000000002400 $d
               fpu.s:319    .text:0000000000002404 _FGREAT
               fpu.s:319    .text:0000000000002408 FGREAT
               fpu.s:321    .text:000000000000240c $d
             forth.s:921    .text:0000000000003578 INVER
ARM GAS  forth.s 			page 228


               fpu.s:330    .text:0000000000002420 _FLESS
               fpu.s:330    .text:0000000000002424 FLESS
               fpu.s:332    .text:0000000000002428 $d
               fpu.s:340    .text:0000000000002438 _FMIN
               fpu.s:340    .text:0000000000002440 FMIN
               fpu.s:342    .text:0000000000002444 $d
               fpu.s:353    .text:0000000000002468 _FMAX
               fpu.s:353    .text:0000000000002470 FMAX
               fpu.s:355    .text:0000000000002474 $d
               fpu.s:368    .text:0000000000002498 _FSIGN
               fpu.s:368    .text:000000000000249e $t
               fpu.s:368    .text:00000000000024a0 FSIGN
               fpu.s:379    .text:00000000000024b4 $d
               fpu.s:379    .text:00000000000024b8 _FEXP
               fpu.s:379    .text:00000000000024c0 FEXP
               fpu.s:390    .text:00000000000024d8 $d
               fpu.s:390    .text:00000000000024dc _FMANT
               fpu.s:390    .text:00000000000024e2 $t
               fpu.s:390    .text:00000000000024e4 FMANT
               fpu.s:403    .text:0000000000002500 $d
               fpu.s:403    .text:0000000000002504 _PI
               fpu.s:403    .text:0000000000002508 PI
               fpu.s:412    .text:0000000000002518 $d
               fpu.s:412    .text:000000000000251c _LN2
               fpu.s:412    .text:0000000000002520 $t
               fpu.s:412    .text:0000000000002520 LN2
               fpu.s:421    .text:0000000000002530 $d
               fpu.s:421    .text:0000000000002534 _LN10
               fpu.s:421    .text:000000000000253c LN10
               fpu.s:431    .text:000000000000254c $d
               fpu.s:431    .text:0000000000002550 _LOG2
               fpu.s:431    .text:0000000000002558 LOG2
               fpu.s:441    .text:0000000000002568 $d
               fpu.s:441    .text:000000000000256c _LOG2TO10
               fpu.s:441    .text:0000000000002574 $t
               fpu.s:441    .text:0000000000002574 LOG2TO10
               fpu.s:443    .text:0000000000002578 $d
             forth.s:599    .text:00000000000032d8 ZLESS
               fpu.s:453    .text:00000000000025a4 $d
            strtof.s:29     .text:00000000000025b0 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000025c8 p10p2at
            strtof.s:44     .text:00000000000025c8 $t
            strtof.s:45     .text:00000000000025cc $d
            strtof.s:57     .text:00000000000025ec bit_state
            strtof.s:58     .text:00000000000025ec $t
            strtof.s:59     .text:00000000000025f0 $d
             forth.s:1796   .text:0000000000003d6c PICK
            strtof.s:76     .text:0000000000002610 mant_div
            strtof.s:77     .text:0000000000002610 $t
            strtof.s:78     .text:0000000000002614 $d
            strtof.s:79     .text:0000000000002618 div_loop
             forth.s:1042   .text:0000000000003674 GREAT
            strtof.s:107    .text:0000000000002664 mant_mult
ARM GAS  forth.s 			page 229


            strtof.s:108    .text:0000000000002664 $t
            strtof.s:109    .text:0000000000002668 $d
            strtof.s:110    .text:000000000000266c mult_loop
            strtof.s:134    .text:00000000000026b8 exp_adjust
            strtof.s:135    .text:00000000000026b8 $t
            strtof.s:136    .text:00000000000026bc $d
             forth.s:824    .text:00000000000034a0 NROT
            strtof.s:148    .text:00000000000026f8 pos_exp
             forth.s:937    .text:000000000000359c ABSS
            strtof.s:159    .text:0000000000002708 integer
            strtof.s:160    .text:0000000000002708 $t
            strtof.s:161    .text:000000000000270c $d
             forth.s:561    .text:000000000000328c DSWAP
             forth.s:2214   .text:0000000000004190 TONBR
             forth.s:487    .text:00000000000031f8 DTOR
             forth.s:458    .text:00000000000031b4 DRFROM
            strtof.s:178    .text:0000000000002738 decimals
            strtof.s:179    .text:0000000000002738 $t
            strtof.s:180    .text:000000000000273c $d
             forth.s:1065   .text:00000000000036a0 MIN
            strtof.s:204    .text:0000000000002790 exponent
            strtof.s:205    .text:0000000000002790 $t
            strtof.s:206    .text:0000000000002794 $d
             forth.s:2267   .text:0000000000004226 NEGQ
             forth.s:929    .text:000000000000358c NEGAT
            strtof.s:226    .text:00000000000027d0 _FLOATQ
            strtof.s:226    .text:00000000000027d8 FLOATQ
            strtof.s:230    .text:00000000000027dc $d
             forth.s:2162   .text:0000000000004104 DECIM
             forth.s:381    .text:0000000000003132 TBRAN
            strtof.s:258    .text:000000000000285c expect_dot
             forth.s:2247   .text:0000000000004204 CHARQ
            strtof.s:262    .text:0000000000002870 get_fraction
            strtof.s:279    .text:00000000000028c4 get_exponent
            strtof.s:297    .text:0000000000002918 error2
             forth.s:2179   .text:0000000000004128 DIGTQ
            strtof.s:284    .text:00000000000028d8 build_float
            strtof.s:305    .text:0000000000002938 error4
            strtof.s:311    .text:000000000000294c restore_base
            strtof.s:309    .text:0000000000002944 e4
            strtof.s:300    .text:0000000000002924 error3
              ftoa.s:28     .text:000000000000295c rounding
              ftoa.s:48     .text:0000000000002984 _ROUND
              ftoa.s:48     .text:000000000000298a $t
              ftoa.s:48     .text:000000000000298c ROUND
              ftoa.s:50     .text:0000000000002990 $d
             forth.s:1054   .text:000000000000368c MAX
              ftoa.s:67     .text:00000000000029d0 _CSTOP
              ftoa.s:67     .text:00000000000029d4 $t
              ftoa.s:67     .text:00000000000029d4 CSTOP
              ftoa.s:79     .text:00000000000029e0 ITOA
              ftoa.s:81     .text:00000000000029e4 $d
             forth.s:1510   .text:0000000000003ae0 STOD
             forth.s:876    .text:0000000000003510 DABS
             forth.s:2025   .text:0000000000003fa4 BDIGS
             forth.s:2069   .text:0000000000004010 DIGS
             forth.s:2087   .text:0000000000004044 SIGN
ARM GAS  forth.s 			page 230


             forth.s:2101   .text:000000000000406c EDIGS
             forth.s:1895   .text:0000000000003e4c CMOVE
              ftoa.s:114    .text:0000000000002a38 _SCALEUP
              ftoa.s:114    .text:0000000000002a40 $t
              ftoa.s:114    .text:0000000000002a40 SCALEUP
              ftoa.s:116    .text:0000000000002a44 $d
              ftoa.s:148    .text:0000000000002aa0 _SCALEDOWN
              ftoa.s:148    .text:0000000000002aaa $t
              ftoa.s:148    .text:0000000000002aac SCALEDOWN
              ftoa.s:150    .text:0000000000002ab0 $d
              ftoa.s:181    .text:0000000000002b08 EPART
              ftoa.s:182    .text:0000000000002b08 $t
              ftoa.s:183    .text:0000000000002b0c $d
              ftoa.s:206    .text:0000000000002b3c FPART
              ftoa.s:207    .text:0000000000002b3c $t
              ftoa.s:208    .text:0000000000002b40 $d
              ftoa.s:255    .text:0000000000002be0 IPART
              ftoa.s:256    .text:0000000000002be0 $t
              ftoa.s:257    .text:0000000000002be4 $d
              ftoa.s:313    .text:0000000000002ca4 _FTOA
              ftoa.s:313    .text:0000000000002ca8 $t
              ftoa.s:313    .text:0000000000002ca8 FTOA
              ftoa.s:315    .text:0000000000002cac $d
              ftoa.s:365    .text:0000000000002d8c nan
             forth.s:762    .text:0000000000003424 BLANK
              ftoa.s:348    .text:0000000000002d3c zdz
              ftoa.s:387    .text:0000000000002df8 infinity
              ftoa.s:412    .text:0000000000002e40 _FDOT
              ftoa.s:412    .text:0000000000002e44 FDOT
              ftoa.s:415    .text:0000000000002e48 $d
             forth.s:1824   .text:0000000000003da0 HERE
             forth.s:3499   .text:00000000000050a8 ALLOT
             forth.s:80     .text:0000000000002eac $t
             forth.s:104    .text:0000000000002ec4 COMPI_NEST
             forth.s:117    .text:0000000000002ee2 TSTDIN
             forth.s:124    .text:0000000000002eec TSTDOUT
             forth.s:133    .text:0000000000002ef6 $d
             forth.s:133    .text:0000000000002efa _CFSR
             forth.s:145    .text:0000000000002f16 $d
             forth.s:145    .text:0000000000002f1a _BFAR
             forth.s:157    .text:0000000000002f36 $d
             forth.s:157    .text:0000000000002f3a _QKEY
             forth.s:157    .text:0000000000002f40 QKEY
             forth.s:159    .text:0000000000002f44 $d
             forth.s:1882   .text:0000000000003e2c ATEXE
             forth.s:167    .text:0000000000002f54 _KEY
             forth.s:167    .text:0000000000002f58 $t
             forth.s:167    .text:0000000000002f58 KEY
             forth.s:169    .text:0000000000002f5c KEY1
             forth.s:170    .text:0000000000002f5c $d
             forth.s:179    .text:0000000000002f74 _EMIT
             forth.s:181    .text:0000000000002f80 $d
             forth.s:215    .text:0000000000002f90 _RAND
             forth.s:215    .text:0000000000002f98 RAND
             forth.s:217    .text:0000000000002f9c $d
             forth.s:1172   .text:0000000000003774 SEED
             forth.s:1666   .text:0000000000003c28 MODD
ARM GAS  forth.s 			page 231


             forth.s:246    .text:000000000000300c _PAUSE
             forth.s:246    .text:0000000000003012 $t
             forth.s:246    .text:0000000000003014 PAUSE
             forth.s:248    .text:0000000000003018 $d
             forth.s:1190   .text:00000000000037a4 TIMER
             forth.s:250    .text:0000000000003020 PAUSE_LOOP
             forth.s:255    .text:0000000000003038 PAUSE_EXIT
             forth.s:262    .text:0000000000003040 _ULED
             forth.s:271    .text:0000000000003064 ULED_OFF
             forth.s:279    .text:0000000000003068 $d
             forth.s:279    .text:000000000000306c _JOYSTK
             forth.s:279    .text:0000000000003074 JOYSTK
             forth.s:281    .text:0000000000003078 $d
             forth.s:293    .text:0000000000003098 _BEEP
             forth.s:293    .text:00000000000030a0 BEEP
             forth.s:318    .text:00000000000030d4 $d
             forth.s:318    .text:00000000000030d8 _NOP
             forth.s:318    .text:00000000000030dc $t
             forth.s:318    .text:00000000000030dc NOP
             forth.s:335    .text:00000000000030e8 $d
             forth.s:335    .text:00000000000030ec _EXECU
             forth.s:335    .text:00000000000030f4 $t
             forth.s:355    .text:0000000000003110 NEXT1
             forth.s:373    .text:000000000000312c QBRAN1
             forth.s:404    .text:000000000000314c $d
             forth.s:404    .text:0000000000003150 _EXIT
             forth.s:404    .text:0000000000003158 EXIT
             forth.s:412    .text:000000000000315a $d
             forth.s:412    .text:000000000000315e _STORE
             forth.s:412    .text:0000000000003160 $t
             forth.s:422    .text:000000000000316c $d
             forth.s:422    .text:0000000000003170 _AT
             forth.s:422    .text:0000000000003172 $t
             forth.s:430    .text:0000000000003178 $d
             forth.s:430    .text:000000000000317c _CSTOR
             forth.s:440    .text:000000000000318c $d
             forth.s:440    .text:0000000000003190 _CAT
             forth.s:449    .text:0000000000003198 $d
             forth.s:449    .text:000000000000319c _RFROM
             forth.s:458    .text:00000000000031aa $d
             forth.s:458    .text:00000000000031ae _DRFROM
             forth.s:458    .text:00000000000031b2 $t
             forth.s:469    .text:00000000000031c6 $d
             forth.s:469    .text:00000000000031ca _RAT
             forth.s:478    .text:00000000000031da $d
             forth.s:478    .text:00000000000031de _TOR
             forth.s:487    .text:00000000000031ee $d
             forth.s:487    .text:00000000000031f2 _DTOR
             forth.s:487    .text:00000000000031f6 $t
             forth.s:499    .text:000000000000320a $d
             forth.s:499    .text:000000000000320e _RPSTOR
             forth.s:499    .text:0000000000003212 $t
             forth.s:499    .text:0000000000003214 RPSTOR
             forth.s:508    .text:000000000000321c $d
             forth.s:508    .text:0000000000003220 _SPSTOR
             forth.s:508    .text:0000000000003224 $t
             forth.s:508    .text:0000000000003224 SPSTOR
ARM GAS  forth.s 			page 232


             forth.s:517    .text:000000000000322c $d
             forth.s:517    .text:0000000000003230 _SPAT
             forth.s:517    .text:0000000000003234 $t
             forth.s:517    .text:0000000000003234 SPAT
             forth.s:526    .text:000000000000323c $d
             forth.s:526    .text:0000000000003240 _RPAT
             forth.s:526    .text:0000000000003244 $t
             forth.s:526    .text:0000000000003244 RPAT
             forth.s:535    .text:000000000000324c $d
             forth.s:535    .text:0000000000003250 _DROP
             forth.s:543    .text:000000000000325e $d
             forth.s:543    .text:0000000000003262 _DUPP
             forth.s:543    .text:0000000000003266 $t
             forth.s:551    .text:000000000000326e $d
             forth.s:551    .text:0000000000003272 _SWAP
             forth.s:561    .text:0000000000003280 $d
             forth.s:561    .text:0000000000003284 _DSWAP
             forth.s:561    .text:000000000000328a $t
             forth.s:576    .text:000000000000329c $d
             forth.s:576    .text:00000000000032a0 _OVER
             forth.s:585    .text:00000000000032b0 $d
             forth.s:585    .text:00000000000032b4 _DOVER
             forth.s:585    .text:00000000000032ba $t
             forth.s:585    .text:00000000000032bc DOVER
             forth.s:599    .text:00000000000032ce $d
             forth.s:599    .text:00000000000032d2 _ZLESS
             forth.s:607    .text:00000000000032de $d
             forth.s:607    .text:00000000000032e2 _ANDD
             forth.s:607    .text:00000000000032e6 $t
             forth.s:616    .text:00000000000032f2 $d
             forth.s:616    .text:00000000000032f6 _ORR
             forth.s:625    .text:0000000000003306 $d
             forth.s:625    .text:000000000000330a _XORR
             forth.s:625    .text:000000000000330e $t
             forth.s:634    .text:000000000000331a $d
             forth.s:634    .text:000000000000331e _UPLUS
             forth.s:634    .text:0000000000003322 $t
             forth.s:634    .text:0000000000003324 UPLUS
             forth.s:646    .text:0000000000003334 $d
             forth.s:646    .text:0000000000003338 _RSHIFT
             forth.s:655    .text:000000000000334a $d
             forth.s:655    .text:000000000000334e _LSHIFT
             forth.s:664    .text:0000000000003362 $d
             forth.s:664    .text:0000000000003366 _PLUS
             forth.s:664    .text:0000000000003368 $t
             forth.s:673    .text:0000000000003370 $d
             forth.s:673    .text:0000000000003374 _SUBB
             forth.s:673    .text:0000000000003376 $t
             forth.s:682    .text:0000000000003382 $d
             forth.s:682    .text:0000000000003386 _STAR
             forth.s:682    .text:0000000000003388 $t
             forth.s:691    .text:0000000000003392 $d
             forth.s:691    .text:0000000000003396 _UMSTA
             forth.s:691    .text:000000000000339a $t
             forth.s:691    .text:000000000000339c UMSTA
             forth.s:703    .text:00000000000033a8 $d
             forth.s:703    .text:00000000000033ac _MSTAR
ARM GAS  forth.s 			page 233


             forth.s:703    .text:00000000000033b0 MSTAR
             forth.s:714    .text:00000000000033bc $d
             forth.s:714    .text:00000000000033c0 _ONEP
             forth.s:722    .text:00000000000033ca $d
             forth.s:722    .text:00000000000033ce _ONEM
             forth.s:730    .text:00000000000033da $d
             forth.s:730    .text:00000000000033de _TWOP
             forth.s:730    .text:00000000000033e4 TWOP
             forth.s:738    .text:00000000000033ea $d
             forth.s:738    .text:00000000000033ee _TWOM
             forth.s:738    .text:00000000000033f4 TWOM
             forth.s:746    .text:00000000000033fa $d
             forth.s:746    .text:00000000000033fe _CELLP
             forth.s:746    .text:0000000000003404 $t
             forth.s:746    .text:0000000000003404 CELLP
             forth.s:754    .text:000000000000340a $d
             forth.s:754    .text:000000000000340e _CELLM
             forth.s:754    .text:0000000000003414 $t
             forth.s:754    .text:0000000000003414 CELLM
             forth.s:762    .text:000000000000341a $d
             forth.s:762    .text:000000000000341e _BLANK
             forth.s:771    .text:000000000000342e $d
             forth.s:771    .text:0000000000003432 _CELLS
             forth.s:771    .text:0000000000003438 $t
             forth.s:771    .text:0000000000003438 CELLS
             forth.s:779    .text:000000000000343e $d
             forth.s:779    .text:0000000000003442 _CELLSL
             forth.s:779    .text:0000000000003448 $t
             forth.s:779    .text:0000000000003448 CELLSL
             forth.s:787    .text:000000000000344e $d
             forth.s:787    .text:0000000000003452 _TWOST
             forth.s:787    .text:0000000000003458 TWOST
             forth.s:795    .text:000000000000345e $d
             forth.s:795    .text:0000000000003462 _TWOSL
             forth.s:803    .text:000000000000346e $d
             forth.s:803    .text:0000000000003472 _QDUP
             forth.s:813    .text:0000000000003482 $d
             forth.s:813    .text:0000000000003486 _ROT
             forth.s:813    .text:000000000000348a $t
             forth.s:824    .text:0000000000003496 $d
             forth.s:824    .text:000000000000349a _NROT
             forth.s:835    .text:00000000000034aa $d
             forth.s:835    .text:00000000000034ae _DDROP
             forth.s:835    .text:00000000000034b4 $t
             forth.s:844    .text:00000000000034be $d
             forth.s:844    .text:00000000000034c2 _TDROP
             forth.s:844    .text:00000000000034c8 $t
             forth.s:853    .text:00000000000034d2 $d
             forth.s:853    .text:00000000000034d6 _DDUP
             forth.s:863    .text:00000000000034e8 $d
             forth.s:863    .text:00000000000034ec _DPLUS
             forth.s:863    .text:00000000000034f0 DPLUS
             forth.s:876    .text:0000000000003504 $d
             forth.s:876    .text:0000000000003508 _DABS
             forth.s:892    .text:000000000000352c $d
             forth.s:892    .text:0000000000003530 _UDGREAT
             forth.s:892    .text:0000000000003534 $t
ARM GAS  forth.s 			page 234


             forth.s:892    .text:0000000000003534 UDGREAT
             forth.s:909    .text:0000000000003550 $d
             forth.s:909    .text:0000000000003554 _DZEQUAL
             forth.s:909    .text:0000000000003558 $t
             forth.s:909    .text:0000000000003558 DZEQUAL
             forth.s:921    .text:000000000000356a $d
             forth.s:921    .text:000000000000356e _INVER
             forth.s:929    .text:000000000000357e $d
             forth.s:929    .text:0000000000003582 _NEGAT
             forth.s:937    .text:0000000000003592 $d
             forth.s:937    .text:0000000000003596 _ABSS
             forth.s:937    .text:000000000000359a $t
             forth.s:947    .text:00000000000035a6 $d
             forth.s:947    .text:00000000000035aa _CLZ
             forth.s:947    .text:00000000000035ae $t
             forth.s:955    .text:00000000000035b6 $d
             forth.s:955    .text:00000000000035ba _CTZ
             forth.s:955    .text:00000000000035be $t
             forth.s:955    .text:00000000000035c0 CTZ
             forth.s:970    .text:00000000000035d8 $d
             forth.s:970    .text:00000000000035dc _ZEQUAL
             forth.s:970    .text:00000000000035e0 ZEQUAL
             forth.s:981    .text:00000000000035ee $d
             forth.s:981    .text:00000000000035f2 _EQUAL
             forth.s:981    .text:00000000000035f4 $t
             forth.s:993    .text:0000000000003604 $d
             forth.s:993    .text:0000000000003608 _DIFF
             forth.s:993    .text:000000000000360c DIFF
             forth.s:1006   .text:0000000000003624 $d
             forth.s:1006   .text:0000000000003628 _ULESS
             forth.s:1018   .text:000000000000363c $d
             forth.s:1018   .text:0000000000003640 _LESS
             forth.s:1018   .text:0000000000003642 $t
             forth.s:1018   .text:0000000000003644 LESS
             forth.s:1030   .text:0000000000003654 $d
             forth.s:1030   .text:0000000000003658 _UGREAT
             forth.s:1030   .text:000000000000365c UGREAT
             forth.s:1042   .text:000000000000366c $d
             forth.s:1042   .text:0000000000003670 _GREAT
             forth.s:1042   .text:0000000000003672 $t
             forth.s:1054   .text:0000000000003684 $d
             forth.s:1054   .text:0000000000003688 _MAX
             forth.s:1054   .text:000000000000368c $t
             forth.s:1065   .text:0000000000003698 $d
             forth.s:1065   .text:000000000000369c _MIN
             forth.s:1065   .text:00000000000036a0 $t
             forth.s:1076   .text:00000000000036ac $d
             forth.s:1076   .text:00000000000036b0 _PSTOR
             forth.s:1076   .text:00000000000036b4 PSTOR
             forth.s:1088   .text:00000000000036c6 $d
             forth.s:1088   .text:00000000000036ca _DSTOR
             forth.s:1088   .text:00000000000036d0 DSTOR
             forth.s:1100   .text:00000000000036e6 $d
             forth.s:1100   .text:00000000000036ea _DAT
             forth.s:1100   .text:00000000000036f0 DAT
             forth.s:1110   .text:00000000000036fc $d
             forth.s:1110   .text:0000000000003700 _COUNT
ARM GAS  forth.s 			page 235


             forth.s:1110   .text:0000000000003706 $t
             forth.s:1120   .text:0000000000003716 $d
             forth.s:1120   .text:000000000000371a _DNEGA
             forth.s:1120   .text:0000000000003722 $t
             forth.s:1120   .text:0000000000003724 DNEGA
             forth.s:1137   .text:0000000000003736 DOVAR
             forth.s:1148   .text:0000000000003744 DOCON
             forth.s:1163   .text:0000000000003750 $d
             forth.s:1163   .text:0000000000003754 _STATE
             forth.s:1163   .text:000000000000375a $t
             forth.s:1163   .text:000000000000375c STATE
             forth.s:1172   .text:0000000000003768 $d
             forth.s:1172   .text:000000000000376c _SEED
             forth.s:1181   .text:0000000000003780 $d
             forth.s:1181   .text:0000000000003784 _MSEC
             forth.s:1190   .text:0000000000003798 $d
             forth.s:1190   .text:000000000000379c _TIMER
             forth.s:1190   .text:00000000000037a2 $t
             forth.s:1199   .text:00000000000037b0 $d
             forth.s:1199   .text:00000000000037b4 _TBOOT
             forth.s:1199   .text:00000000000037ba $t
             forth.s:1199   .text:00000000000037bc TBOOT
             forth.s:1208   .text:00000000000037c8 $d
             forth.s:1208   .text:00000000000037cc _BASE
             forth.s:1219   .text:00000000000037e0 $d
             forth.s:1219   .text:00000000000037e4 _BCHR
             forth.s:1219   .text:00000000000037ea $t
             forth.s:1219   .text:00000000000037ec BCHR
             forth.s:1229   .text:00000000000037f8 TEMP
             forth.s:1238   .text:0000000000003804 $d
             forth.s:1238   .text:0000000000003808 _SPAN
             forth.s:1238   .text:0000000000003810 SPAN
             forth.s:1247   .text:000000000000381c $d
             forth.s:1247   .text:0000000000003820 _INN
             forth.s:1247   .text:0000000000003824 $t
             forth.s:1247   .text:0000000000003824 INN
             forth.s:1257   .text:0000000000003830 $d
             forth.s:1257   .text:0000000000003834 _NTIB
             forth.s:1257   .text:000000000000383c NTIB
             forth.s:1266   .text:0000000000003848 $d
             forth.s:1266   .text:000000000000384c _TEVAL
             forth.s:1266   .text:0000000000003852 $t
             forth.s:1266   .text:0000000000003854 TEVAL
             forth.s:1276   .text:0000000000003860 $d
             forth.s:1276   .text:0000000000003864 _HLD
             forth.s:1276   .text:0000000000003868 $t
             forth.s:1276   .text:0000000000003868 HLD
             forth.s:1286   .text:0000000000003874 $d
             forth.s:1286   .text:0000000000003878 _CNTXT
             forth.s:1286   .text:0000000000003880 $t
             forth.s:1287   .text:0000000000003880 CRRNT
             forth.s:1297   .text:000000000000388c $d
             forth.s:1297   .text:0000000000003890 _CPP
             forth.s:1297   .text:0000000000003894 CPP
             forth.s:1307   .text:00000000000038a0 $d
             forth.s:1307   .text:00000000000038a4 _FCP
             forth.s:1307   .text:00000000000038a8 $t
ARM GAS  forth.s 			page 236


             forth.s:1307   .text:00000000000038a8 FCP
             forth.s:1317   .text:00000000000038b4 $d
             forth.s:1317   .text:00000000000038b8 _LAST
             forth.s:1317   .text:00000000000038c0 LAST
             forth.s:1331   .text:00000000000038cc $d
             forth.s:1331   .text:00000000000038d0 _USER_BEGIN
             forth.s:1331   .text:00000000000038dc USER_BEGIN
             forth.s:1335   .text:00000000000038e8 USR_BGN_ADR
             forth.s:1336   .text:00000000000038e8 $d
             forth.s:1342   .text:00000000000038f0 _USER_END
             forth.s:1342   .text:00000000000038fc USER_END
             forth.s:1346   .text:0000000000003908 USER_END_ADR
             forth.s:1347   .text:0000000000003908 $d
             forth.s:1353   .text:0000000000003910 _MAXINT
             forth.s:1353   .text:0000000000003918 $t
             forth.s:1353   .text:0000000000003918 MAXINT
             forth.s:1362   .text:0000000000003928 $d
             forth.s:1362   .text:000000000000392c _MININT
             forth.s:1362   .text:0000000000003934 $t
             forth.s:1362   .text:0000000000003934 MININT
             forth.s:1371   .text:0000000000003944 $d
             forth.s:1371   .text:0000000000003948 _MAXUINT
             forth.s:1371   .text:0000000000003954 MAXUINT
             forth.s:1386   .text:0000000000003964 $d
             forth.s:1386   .text:0000000000003968 _WITHI
             forth.s:1386   .text:0000000000003970 WITHI
             forth.s:1388   .text:0000000000003974 $d
             forth.s:1403   .text:0000000000003994 _UMMOD
             forth.s:1403   .text:000000000000399c UMMOD
             forth.s:1407   .text:00000000000039a6 UMMOD0
             forth.s:1414   .text:00000000000039b6 UMMOD1
             forth.s:1420   .text:00000000000039c0 UMMOD2
             forth.s:1433   .text:00000000000039cc $d
             forth.s:1433   .text:00000000000039d0 _MSMOD
             forth.s:1433   .text:00000000000039d8 MSMOD
             forth.s:1435   .text:00000000000039dc $d
             forth.s:1444   .text:0000000000003a04 MMOD1
             forth.s:1451   .text:0000000000003a20 MMOD2
             forth.s:1459   .text:0000000000003a40 MMOD3
             forth.s:1473   .text:0000000000003a48 _SMSLSHREM
             forth.s:1473   .text:0000000000003a50 SMSLSHREM
             forth.s:1475   .text:0000000000003a54 $d
             forth.s:1510   .text:0000000000003adc _STOD
             forth.s:1510   .text:0000000000003ae0 $t
             forth.s:1519   .text:0000000000003aec $d
             forth.s:1519   .text:0000000000003af0 _D2STAR
             forth.s:1519   .text:0000000000003af4 $t
             forth.s:1519   .text:0000000000003af4 D2STAR
             forth.s:1531   .text:0000000000003b06 $d
             forth.s:1531   .text:0000000000003b0a _D2SL
             forth.s:1531   .text:0000000000003b0e $t
             forth.s:1531   .text:0000000000003b10 D2SL
             forth.s:1546   .text:0000000000003b1e $d
             forth.s:1546   .text:0000000000003b22 _DSLMOD
             forth.s:1546   .text:0000000000003b28 $t
             forth.s:1546   .text:0000000000003b28 DSLMOD
             forth.s:1582   .text:0000000000003b74 $d
ARM GAS  forth.s 			page 237


             forth.s:1582   .text:0000000000003b78 _DSLASH
             forth.s:1582   .text:0000000000003b7c DSLASH
             forth.s:1584   .text:0000000000003b80 $d
             forth.s:1604   .text:0000000000003bc4 _DSTAR
             forth.s:1604   .text:0000000000003bc8 DSTAR
             forth.s:1653   .text:0000000000003bfe $d
             forth.s:1653   .text:0000000000003c02 _SLMOD
             forth.s:1655   .text:0000000000003c0c $d
             forth.s:1666   .text:0000000000003c24 _MODD
             forth.s:1666   .text:0000000000003c28 $t
             forth.s:1668   .text:0000000000003c2c $d
             forth.s:1677   .text:0000000000003c3c _SLASH
             forth.s:1677   .text:0000000000003c3e $t
             forth.s:1677   .text:0000000000003c40 SLASH
             forth.s:1679   .text:0000000000003c44 $d
             forth.s:1690   .text:0000000000003c58 _SSMOD
             forth.s:1690   .text:0000000000003c5e $t
             forth.s:1690   .text:0000000000003c60 SSMOD
             forth.s:1692   .text:0000000000003c64 $d
             forth.s:1704   .text:0000000000003c7c _STASL
             forth.s:1704   .text:0000000000003c80 STASL
             forth.s:1706   .text:0000000000003c84 $d
             forth.s:1720   .text:0000000000003c98 _CHARP
             forth.s:1720   .text:0000000000003c9e $t
             forth.s:1720   .text:0000000000003ca0 CHARP
             forth.s:1730   .text:0000000000003ca8 $d
             forth.s:1730   .text:0000000000003cac _CHARS
             forth.s:1730   .text:0000000000003cb2 $t
             forth.s:1730   .text:0000000000003cb4 CHARS
             forth.s:1740   .text:0000000000003cb8 $d
             forth.s:1740   .text:0000000000003cbc _ALIGN
             forth.s:1740   .text:0000000000003cc2 $t
             forth.s:1740   .text:0000000000003cc4 ALIGN
             forth.s:1753   .text:0000000000003cd4 $d
             forth.s:1753   .text:0000000000003cd8 _ALGND
             forth.s:1753   .text:0000000000003ce0 $t
             forth.s:1753   .text:0000000000003ce0 ALGND
             forth.s:1764   .text:0000000000003cf0 $d
             forth.s:1764   .text:0000000000003cf4 _TCHAR
             forth.s:1764   .text:0000000000003cfa $t
             forth.s:1764   .text:0000000000003cfc TCHAR
             forth.s:1766   .text:0000000000003d00 $d
             forth.s:1776   .text:0000000000003d38 TCHA1
             forth.s:1784   .text:0000000000003d40 _DEPTH
             forth.s:1784   .text:0000000000003d46 $t
             forth.s:1784   .text:0000000000003d48 DEPTH
             forth.s:1796   .text:0000000000003d60 $d
             forth.s:1796   .text:0000000000003d64 _PICK
             forth.s:1807   .text:0000000000003d76 $d
             forth.s:1807   .text:0000000000003d7a _PUT
             forth.s:1807   .text:0000000000003d7e $t
             forth.s:1807   .text:0000000000003d80 PUT
             forth.s:1824   .text:0000000000003d94 $d
             forth.s:1824   .text:0000000000003d98 _HERE
             forth.s:1826   .text:0000000000003da4 $d
             forth.s:1835   .text:0000000000003db4 _PAD
             forth.s:1835   .text:0000000000003db8 $t
ARM GAS  forth.s 			page 238


             forth.s:1837   .text:0000000000003dbc $d
             forth.s:1848   .text:0000000000003dd4 _TIB
             forth.s:1848   .text:0000000000003dd8 $t
             forth.s:1848   .text:0000000000003dd8 TIB
             forth.s:1859   .text:0000000000003de2 $d
             forth.s:1859   .text:0000000000003de6 _SOURCID
             forth.s:1859   .text:0000000000003df0 $t
             forth.s:1859   .text:0000000000003df0 SOURCID
             forth.s:1871   .text:0000000000003dfa $d
             forth.s:1871   .text:0000000000003dfe _SOURCE
             forth.s:1871   .text:0000000000003e08 SOURCE
             forth.s:1873   .text:0000000000003e0c $d
             forth.s:1882   .text:0000000000003e20 _ATEXE
             forth.s:1895   .text:0000000000003e40 $d
             forth.s:1895   .text:0000000000003e44 _CMOVE
             forth.s:1895   .text:0000000000003e4a $t
             forth.s:1902   .text:0000000000003e5e CMOV1
             forth.s:1899   .text:0000000000003e56 CMOV0
             forth.s:1907   .text:0000000000003e68 CMOV2
             forth.s:1915   .text:0000000000003e70 $d
             forth.s:1915   .text:0000000000003e74 _MOVE
             forth.s:1933   .text:0000000000003ea6 MOVE1
             forth.s:1930   .text:0000000000003ea2 MOVE3
             forth.s:1927   .text:0000000000003e9e MOVE0
             forth.s:1938   .text:0000000000003eb0 MOVE2
             forth.s:1947   .text:0000000000003eb8 $d
             forth.s:1947   .text:0000000000003ebc _FILL
             forth.s:1955   .text:0000000000003ed2 FILL2
             forth.s:1951   .text:0000000000003eca FILL1
             forth.s:1965   .text:0000000000003eda $d
             forth.s:1965   .text:0000000000003ede _PACKS
             forth.s:1965   .text:0000000000003ee4 $t
             forth.s:1965   .text:0000000000003ee4 PACKS
             forth.s:1967   .text:0000000000003ee8 $d
             forth.s:1996   .text:0000000000003f40 _DIGIT
             forth.s:1996   .text:0000000000003f46 $t
             forth.s:1996   .text:0000000000003f48 DIGIT
             forth.s:1998   .text:0000000000003f4c $d
             forth.s:2013   .text:0000000000003f80 _EXTRC
             forth.s:2013   .text:0000000000003f88 $t
             forth.s:2013   .text:0000000000003f88 EXTRC
             forth.s:2015   .text:0000000000003f8c $d
             forth.s:2025   .text:0000000000003fa0 _BDIGS
             forth.s:2027   .text:0000000000003fa8 $d
             forth.s:2037   .text:0000000000003fbc _HOLD
             forth.s:2037   .text:0000000000003fc4 HOLD
             forth.s:2039   .text:0000000000003fc8 $d
             forth.s:2055   .text:0000000000003fec _DIG
             forth.s:2055   .text:0000000000003fee $t
             forth.s:2055   .text:0000000000003ff0 DIG
             forth.s:2057   .text:0000000000003ff4 $d
             forth.s:2069   .text:000000000000400c _DIGS
             forth.s:2071   .text:0000000000004014 DIGS1
             forth.s:2072   .text:0000000000004014 $d
             forth.s:2077   .text:0000000000004030 DIGS2
             forth.s:2087   .text:000000000000403c _SIGN
             forth.s:2089   .text:0000000000004048 $d
ARM GAS  forth.s 			page 239


             forth.s:2093   .text:0000000000004060 SIGN1
             forth.s:2101   .text:0000000000004068 _EDIGS
             forth.s:2103   .text:0000000000004070 $d
             forth.s:2118   .text:000000000000408c STRR
             forth.s:2119   .text:000000000000408c $t
             forth.s:2120   .text:0000000000004090 $d
             forth.s:2137   .text:00000000000040bc _HEX
             forth.s:2137   .text:00000000000040c0 $t
             forth.s:2137   .text:00000000000040c0 HEX
             forth.s:2139   .text:00000000000040c4 $d
             forth.s:2150   .text:00000000000040dc _BIN
             forth.s:2150   .text:00000000000040e0 $t
             forth.s:2150   .text:00000000000040e0 BIN
             forth.s:2152   .text:00000000000040e4 $d
             forth.s:2162   .text:00000000000040fc _DECIM
             forth.s:2162   .text:0000000000004104 $t
             forth.s:2164   .text:0000000000004108 $d
             forth.s:2179   .text:0000000000004120 _DIGTQ
             forth.s:2181   .text:000000000000412c $d
             forth.s:2194   .text:0000000000004174 DGTQ1
             forth.s:2214   .text:0000000000004188 _TONBR
             forth.s:2214   .text:0000000000004190 $t
             forth.s:2216   .text:0000000000004194 $d
             forth.s:2248   .text:0000000000004204 $t
             forth.s:2296   .text:0000000000004250 $d
             forth.s:2296   .text:0000000000004254 _INTQ
             forth.s:2296   .text:000000000000425c INTQ
             forth.s:2299   .text:0000000000004260 $d
             forth.s:2351   .text:0000000000004328 _NUMBERQ
             forth.s:2351   .text:0000000000004330 $t
             forth.s:2351   .text:0000000000004330 NUMBERQ
             forth.s:2353   .text:0000000000004334 $d
             forth.s:2371   .text:0000000000004354 _SPACE
             forth.s:2371   .text:000000000000435a $t
             forth.s:2373   .text:0000000000004360 $d
             forth.s:2382   .text:0000000000004370 _SPACS
             forth.s:2382   .text:0000000000004378 SPACS
             forth.s:2384   .text:000000000000437c $d
             forth.s:2390   .text:0000000000004398 CHAR2
             forth.s:2388   .text:0000000000004394 CHAR1
             forth.s:2399   .text:00000000000043a8 _TYPEE
             forth.s:2401   .text:00000000000043b4 $d
             forth.s:2407   .text:00000000000043cc TYPE2
             forth.s:2403   .text:00000000000043c0 TYPE1
             forth.s:2417   .text:00000000000043e0 _CR
             forth.s:2419   .text:00000000000043e8 $d
             forth.s:2431   .text:0000000000004404 DOSTR
             forth.s:2432   .text:0000000000004404 $t
             forth.s:2434   .text:0000000000004408 $d
             forth.s:2453   .text:0000000000004434 STRQP
             forth.s:2454   .text:0000000000004434 $t
             forth.s:2455   .text:0000000000004438 $d
             forth.s:2466   .text:0000000000004440 $t
             forth.s:2467   .text:0000000000004444 $d
             forth.s:2479   .text:0000000000004450 LPAD
             forth.s:2480   .text:0000000000004450 $t
             forth.s:2481   .text:0000000000004454 $d
ARM GAS  forth.s 			page 240


             forth.s:2512   .text:00000000000044d4 _DOTR
             forth.s:2512   .text:00000000000044d8 DOTR
             forth.s:2514   .text:00000000000044dc $d
             forth.s:2596   .text:00000000000045c0 DTOA
             forth.s:2531   .text:0000000000004504 _UDOTR
             forth.s:2531   .text:0000000000004508 $t
             forth.s:2531   .text:0000000000004508 UDOTR
             forth.s:2533   .text:000000000000450c $d
             forth.s:2549   .text:0000000000004538 _UDOT
             forth.s:2551   .text:0000000000004540 $d
             forth.s:2567   .text:000000000000456c _DOT
             forth.s:2567   .text:000000000000456e $t
             forth.s:2569   .text:0000000000004574 $d
             forth.s:2577   .text:000000000000459c DOT1
             forth.s:2596   .text:00000000000045bc _DTOA
             forth.s:2596   .text:00000000000045c0 $t
             forth.s:2598   .text:00000000000045c4 $d
             forth.s:2613   .text:00000000000045ec _DDOT
             forth.s:2613   .text:00000000000045f0 DDOT
             forth.s:2615   .text:00000000000045f4 $d
             forth.s:2626   .text:0000000000004614 _UDDOT
             forth.s:2626   .text:0000000000004618 $t
             forth.s:2626   .text:0000000000004618 UDDOT
             forth.s:2628   .text:000000000000461c $d
             forth.s:2644   .text:0000000000004644 _HDOT
             forth.s:2646   .text:000000000000464c $d
             forth.s:2668   .text:0000000000004694 _QUEST
             forth.s:2668   .text:0000000000004696 $t
             forth.s:2668   .text:0000000000004698 QUEST
             forth.s:2670   .text:000000000000469c $d
             forth.s:2684   .text:00000000000046a8 PARS
             forth.s:2685   .text:00000000000046a8 $t
             forth.s:2686   .text:00000000000046ac $d
             forth.s:2752   .text:00000000000047bc PARS8
             forth.s:2716   .text:0000000000004730 PARS3
             forth.s:2699   .text:00000000000046e8 PARS1
             forth.s:2714   .text:000000000000472c PARS2
             forth.s:2720   .text:000000000000473c PARS4
             forth.s:2732   .text:000000000000476c PARS5
             forth.s:2739   .text:0000000000004790 PARS6
             forth.s:2745   .text:00000000000047a4 PARS7
             forth.s:2763   .text:00000000000047d0 _PARSE
             forth.s:2763   .text:00000000000047d6 $t
             forth.s:2763   .text:00000000000047d8 PARSE
             forth.s:2765   .text:00000000000047dc $d
             forth.s:2786   .text:000000000000481c _DOTPR
             forth.s:2786   .text:0000000000004820 DOTPR
             forth.s:2788   .text:0000000000004824 $d
             forth.s:2799   .text:000000000000483c _PAREN
             forth.s:2799   .text:000000000000483e $t
             forth.s:2799   .text:0000000000004840 PAREN
             forth.s:2801   .text:0000000000004844 $d
             forth.s:2812   .text:000000000000485c _BKSLA
             forth.s:2812   .text:000000000000485e $t
             forth.s:2812   .text:0000000000004860 BKSLA
             forth.s:2814   .text:0000000000004864 $d
             forth.s:2825   .text:000000000000487c _CHAR
ARM GAS  forth.s 			page 241


             forth.s:2825   .text:0000000000004884 CHAR
             forth.s:2827   .text:0000000000004888 $d
             forth.s:2837   .text:00000000000048a0 _IMCHAR
             forth.s:2837   .text:00000000000048a8 IMCHAR
             forth.s:2839   .text:00000000000048ac $d
             forth.s:3556   .text:0000000000005144 LITER
             forth.s:2848   .text:00000000000048bc _WORDD
             forth.s:2848   .text:00000000000048c4 WORDD
             forth.s:2850   .text:00000000000048c8 $d
             forth.s:2862   .text:00000000000048e0 _TOKEN
             forth.s:2862   .text:00000000000048e6 $t
             forth.s:2862   .text:00000000000048e8 TOKEN
             forth.s:2864   .text:00000000000048ec $d
             forth.s:3029   .text:0000000000004adc UPPER
             forth.s:2878   .text:0000000000004900 _NAMET
             forth.s:2878   .text:0000000000004906 $t
             forth.s:2878   .text:0000000000004908 NAMET
             forth.s:2880   .text:000000000000490c $d
             forth.s:2899   .text:000000000000492c _SAMEQ
             forth.s:2899   .text:0000000000004932 $t
             forth.s:2899   .text:0000000000004934 SAMEQ
             forth.s:2901   .text:0000000000004938 $d
             forth.s:2918   .text:0000000000004980 SAME2
             forth.s:2903   .text:0000000000004944 SAME1
             forth.s:2933   .text:0000000000004994 SEARCH
             forth.s:2934   .text:0000000000004994 $t
             forth.s:2935   .text:0000000000004998 $d
             forth.s:2942   .text:00000000000049b4 SEARCH1
             forth.s:2962   .text:0000000000004a0c SEARCH6
             forth.s:2955   .text:00000000000049f4 SEARCH2
             forth.s:2960   .text:0000000000004a04 SEARCH3
             forth.s:2969   .text:0000000000004a24 SEARCH4
             forth.s:2975   .text:0000000000004a40 SEARCH5
             forth.s:2991   .text:0000000000004a68 _NAMEQ
             forth.s:2991   .text:0000000000004a6e $t
             forth.s:2993   .text:0000000000004a74 $d
             forth.s:3008   .text:0000000000004a88 _ASCIZ
             forth.s:3008   .text:0000000000004a8e $t
             forth.s:3008   .text:0000000000004a90 ASCIZ
             forth.s:3010   .text:0000000000004a94 $d
             forth.s:3029   .text:0000000000004ad4 _UPPER
             forth.s:3029   .text:0000000000004ada $t
             forth.s:3031   .text:0000000000004ae0 $d
             forth.s:3062   .text:0000000000004b64 BKSP
             forth.s:3063   .text:0000000000004b64 $t
             forth.s:3064   .text:0000000000004b68 $d
             forth.s:3078   .text:0000000000004bac BACK1
             forth.s:3087   .text:0000000000004bb0 TAP
             forth.s:3088   .text:0000000000004bb0 $t
             forth.s:3089   .text:0000000000004bb4 $d
             forth.s:3102   .text:0000000000004bcc KTAP
             forth.s:3103   .text:0000000000004bcc TTAP
             forth.s:3104   .text:0000000000004bcc $t
             forth.s:3105   .text:0000000000004bd0 $d
             forth.s:3119   .text:0000000000004c10 KTAP2
             forth.s:3116   .text:0000000000004c08 KTAP1
             forth.s:3131   .text:0000000000004c28 _ACCEP
ARM GAS  forth.s 			page 242


             forth.s:3133   .text:0000000000004c34 $d
             forth.s:3136   .text:0000000000004c40 ACCP1
             forth.s:3152   .text:0000000000004c88 ACCP4
             forth.s:3148   .text:0000000000004c7c ACCP2
             forth.s:3150   .text:0000000000004c80 ACCP3
             forth.s:3163   .text:0000000000004c9c _QUERY
             forth.s:3163   .text:0000000000004ca2 $t
             forth.s:3163   .text:0000000000004ca4 QUERY
             forth.s:3165   .text:0000000000004ca8 $d
             forth.s:3185   .text:0000000000004cdc _ABORT
             forth.s:3185   .text:0000000000004ce2 $t
             forth.s:3187   .text:0000000000004ce8 ABORT1
             forth.s:3188   .text:0000000000004ce8 $d
             forth.s:3267   .text:0000000000004dc0 LBRAC
             forth.s:3201   .text:0000000000004cf8 PRT_ABORT
             forth.s:3202   .text:0000000000004cf8 $t
             forth.s:3203   .text:0000000000004cfc $d
             forth.s:3221   .text:0000000000004d24 ABORQ
             forth.s:3222   .text:0000000000004d24 $t
             forth.s:3223   .text:0000000000004d28 $d
             forth.s:3245   .text:0000000000004d58 _INTER
             forth.s:3247   .text:0000000000004d68 $d
             forth.s:3256   .text:0000000000004da4 INTE1
             forth.s:3253   .text:0000000000004d9a $t
             forth.s:3254   .text:0000000000004d9c $d
             forth.s:3260   .text:0000000000004db4 INTE2
             forth.s:3267   .text:0000000000004dbc _LBRAC
             forth.s:3267   .text:0000000000004dbe $t
             forth.s:3269   .text:0000000000004dc4 $d
             forth.s:3282   .text:0000000000004dec _DOTOK
             forth.s:3282   .text:0000000000004df0 $t
             forth.s:3282   .text:0000000000004df0 DOTOK
             forth.s:3284   .text:0000000000004df4 $d
             forth.s:3290   .text:0000000000004e18 DOTO1
             forth.s:3291   .text:0000000000004e18 $d
             forth.s:3299   .text:0000000000004e24 _QSTAC
             forth.s:3299   .text:0000000000004e2c QSTAC
             forth.s:3301   .text:0000000000004e30 $d
             forth.s:3303   .text:0000000000004e46 $t
             forth.s:3304   .text:0000000000004e48 $d
             forth.s:3311   .text:0000000000004e50 _EVAL
             forth.s:3313   .text:0000000000004e5c EVAL1
             forth.s:3314   .text:0000000000004e5c $d
             forth.s:3322   .text:0000000000004e84 EVAL2
             forth.s:3338   .text:0000000000004e94 _EVALUATE
             forth.s:3338   .text:0000000000004ea0 EVALUATE
             forth.s:3341   .text:0000000000004ea4 $d
             forth.s:3375   .text:0000000000004f38 _PRESE
             forth.s:3377   .text:0000000000004f44 $d
             forth.s:3391   .text:0000000000004f74 _QUIT
             forth.s:3392   .text:0000000000004f7c $d
             forth.s:3394   .text:0000000000004f88 QUIT1
             forth.s:3396   .text:0000000000004f8c QUIT2
             forth.s:3406   .text:0000000000004fa0 _FORGET
             forth.s:3406   .text:0000000000004fa8 FORGET
             forth.s:3408   .text:0000000000004fac $d
             forth.s:4017   .text:0000000000005694 OVERT
ARM GAS  forth.s 			page 243


             forth.s:3435   .text:0000000000004ff4 $d
             forth.s:3435   .text:0000000000004ff8 _POSTPONE
             forth.s:3435   .text:0000000000005004 POSTPONE
             forth.s:3437   .text:0000000000005008 $d
             forth.s:3460   .text:0000000000005040 ITICK
             forth.s:4059   .text:0000000000005700 CALLC
             forth.s:3447   .text:0000000000005018 _TICK
             forth.s:3447   .text:000000000000501a $t
             forth.s:3447   .text:000000000000501c TICK
             forth.s:3449   .text:0000000000005020 $d
             forth.s:3453   .text:0000000000005034 TICK1
             forth.s:3460   .text:000000000000503c _ITICK
             forth.s:3460   .text:0000000000005040 $t
             forth.s:3462   .text:0000000000005044 $d
             forth.s:3477   .text:0000000000005050 _FIND
             forth.s:3477   .text:0000000000005058 FIND
             forth.s:3479   .text:000000000000505c $d
             forth.s:3499   .text:00000000000050a0 _ALLOT
             forth.s:3499   .text:00000000000050a6 $t
             forth.s:3501   .text:00000000000050ac $d
             forth.s:3510   .text:00000000000050bc _COMMA
             forth.s:3510   .text:00000000000050be $t
             forth.s:3510   .text:00000000000050c0 COMMA
             forth.s:3512   .text:00000000000050c4 $d
             forth.s:3526   .text:00000000000050e0 $d
             forth.s:3526   .text:00000000000050e4 _BCOMP
             forth.s:3526   .text:00000000000050ee $t
             forth.s:3526   .text:00000000000050f0 BCOMP
             forth.s:3528   .text:00000000000050f4 $d
             forth.s:3538   .text:0000000000005104 _COMPI
             forth.s:3538   .text:000000000000510c $t
             forth.s:3538   .text:000000000000510c COMPI
             forth.s:3540   .text:0000000000005110 $d
             forth.s:3556   .text:000000000000513c _LITER
             forth.s:3556   .text:0000000000005144 $t
             forth.s:3558   .text:0000000000005148 $d
             forth.s:3568   .text:000000000000515c STRCQ
             forth.s:3569   .text:000000000000515c $t
             forth.s:3570   .text:0000000000005160 $d
             forth.s:3592   .text:0000000000005198 _FOR
             forth.s:3592   .text:000000000000519c $t
             forth.s:3592   .text:000000000000519c FOR
             forth.s:3594   .text:00000000000051a0 $d
             forth.s:3603   .text:00000000000051b8 _DO
             forth.s:3603   .text:00000000000051bc DO
             forth.s:3605   .text:00000000000051c0 $d
             forth.s:3612   .text:00000000000051f4 DOPLOOP
             forth.s:3613   .text:00000000000051f4 $t
             forth.s:3631   .text:000000000000521c $d
             forth.s:3631   .text:0000000000005220 _PLOOP
             forth.s:3631   .text:0000000000005226 $t
             forth.s:3631   .text:0000000000005228 PLOOP
             forth.s:3633   .text:000000000000522c $d
             forth.s:3652   .text:000000000000526c resolve_leave
             forth.s:3638   .text:0000000000005244 DOLOOP
             forth.s:3639   .text:0000000000005244 $t
             forth.s:3654   .text:0000000000005270 $d
ARM GAS  forth.s 			page 244


             forth.s:3669   .text:000000000000529c _LOOP
             forth.s:3669   .text:00000000000052a4 LOOP
             forth.s:3671   .text:00000000000052a8 $d
             forth.s:3680   .text:00000000000052c4 _UNLOOP
             forth.s:3680   .text:00000000000052cc UNLOOP
             forth.s:3689   .text:00000000000052d4 $d
             forth.s:3689   .text:00000000000052d8 _LEAVE
             forth.s:3689   .text:00000000000052de $t
             forth.s:3689   .text:00000000000052e0 LEAVE
             forth.s:3691   .text:00000000000052e4 $d
             forth.s:3702   .text:0000000000005314 DOLEAVE
             forth.s:3703   .text:0000000000005314 $t
             forth.s:3714   .text:0000000000005320 $d
             forth.s:3714   .text:0000000000005324 _BEGIN
             forth.s:3714   .text:000000000000532a $t
             forth.s:3714   .text:000000000000532c BEGIN
             forth.s:3716   .text:0000000000005330 $d
             forth.s:3725   .text:0000000000005338 $d
             forth.s:3725   .text:000000000000533c _FNEXT
             forth.s:3725   .text:0000000000005344 FNEXT
             forth.s:3727   .text:0000000000005348 $d
             forth.s:3735   .text:0000000000005360 _I
             forth.s:3735   .text:0000000000005362 $t
             forth.s:3735   .text:0000000000005364 I
             forth.s:3744   .text:0000000000005370 $d
             forth.s:3744   .text:0000000000005374 _J
             forth.s:3744   .text:0000000000005376 $t
             forth.s:3744   .text:0000000000005378 J
             forth.s:3754   .text:0000000000005384 $d
             forth.s:3754   .text:0000000000005388 _UNTIL
             forth.s:3754   .text:000000000000538e $t
             forth.s:3754   .text:0000000000005390 UNTIL
             forth.s:3756   .text:0000000000005394 $d
             forth.s:3765   .text:00000000000053ac _AGAIN
             forth.s:3765   .text:00000000000053b2 $t
             forth.s:3765   .text:00000000000053b4 AGAIN
             forth.s:3767   .text:00000000000053b8 $d
             forth.s:3776   .text:00000000000053d0 _IFF
             forth.s:3776   .text:00000000000053d4 IFF
             forth.s:3778   .text:00000000000053d8 $d
             forth.s:3790   .text:0000000000005400 _AHEAD
             forth.s:3790   .text:0000000000005406 $t
             forth.s:3790   .text:0000000000005408 AHEAD
             forth.s:3792   .text:000000000000540c $d
             forth.s:3804   .text:0000000000005434 _REPEA
             forth.s:3804   .text:000000000000543c REPEA
             forth.s:3806   .text:0000000000005440 $d
             forth.s:3817   .text:0000000000005458 _THENN
             forth.s:3817   .text:0000000000005460 THENN
             forth.s:3819   .text:0000000000005464 $d
             forth.s:3830   .text:0000000000005478 _AFT
             forth.s:3830   .text:000000000000547c $t
             forth.s:3830   .text:000000000000547c AFT
             forth.s:3832   .text:0000000000005480 $d
             forth.s:3844   .text:0000000000005498 _ELSEE
             forth.s:3844   .text:00000000000054a0 ELSEE
             forth.s:3846   .text:00000000000054a4 $d
ARM GAS  forth.s 			page 245


             forth.s:3856   .text:00000000000054b8 _WHILE
             forth.s:3856   .text:00000000000054be $t
             forth.s:3856   .text:00000000000054c0 WHILE
             forth.s:3858   .text:00000000000054c4 $d
             forth.s:3867   .text:00000000000054d4 _RECURSE
             forth.s:3867   .text:00000000000054dc $t
             forth.s:3867   .text:00000000000054dc RECURSE
             forth.s:3869   .text:00000000000054e0 $d
             forth.s:3881   .text:00000000000054f8 _ABRTQ
             forth.s:3881   .text:0000000000005500 ABRTQ
             forth.s:3883   .text:0000000000005504 $d
             forth.s:3892   .text:000000000000551c _STRQ
             forth.s:3892   .text:0000000000005520 STRQ
             forth.s:3894   .text:0000000000005524 $d
             forth.s:3904   .text:000000000000553c _DOTQ
             forth.s:3904   .text:0000000000005540 DOTQ
             forth.s:3906   .text:0000000000005544 $d
             forth.s:3920   .text:000000000000555c _UNIQU
             forth.s:3920   .text:0000000000005564 $t
             forth.s:3920   .text:0000000000005564 UNIQU
             forth.s:3922   .text:0000000000005568 $d
             forth.s:3929   .text:0000000000005590 UNIQ1
             forth.s:3926   .text:0000000000005584 $d
             forth.s:3939   .text:0000000000005598 SNAME
             forth.s:3940   .text:0000000000005598 $t
             forth.s:3941   .text:000000000000559c $d
             forth.s:3957   .text:00000000000055e0 SNAM1
             forth.s:3969   .text:00000000000055f4 _SCOMP
             forth.s:3969   .text:0000000000005600 SCOMP
             forth.s:3971   .text:0000000000005604 $d
             forth.s:3983   .text:000000000000563c SCOM2
             forth.s:3980   .text:0000000000005634 SCOM1
             forth.s:3988   .text:0000000000005650 SCOM3
             forth.s:3997   .text:0000000000005658 COLON_ABORT
             forth.s:3998   .text:0000000000005658 $t
             forth.s:3999   .text:000000000000565c $d
             forth.s:4017   .text:000000000000568c _OVERT
             forth.s:4017   .text:0000000000005692 $t
             forth.s:4019   .text:0000000000005698 $d
             forth.s:4030   .text:00000000000056b0 _SEMIS
             forth.s:4030   .text:00000000000056b2 $t
             forth.s:4030   .text:00000000000056b4 SEMIS
             forth.s:4032   .text:00000000000056b8 $d
             forth.s:4044   .text:00000000000056d4 _RBRAC
             forth.s:4044   .text:00000000000056d6 $t
             forth.s:4044   .text:00000000000056d8 RBRAC
             forth.s:4046   .text:00000000000056dc $d
             forth.s:4060   .text:0000000000005700 $t
             forth.s:4061   .text:0000000000005704 $d
             forth.s:4073   .text:000000000000571c _COLON
             forth.s:4073   .text:000000000000571e $t
             forth.s:4073   .text:0000000000005720 COLON
             forth.s:4075   .text:0000000000005724 $d
             forth.s:4087   .text:0000000000005740 _IMMED
             forth.s:4087   .text:000000000000574a $t
             forth.s:4087   .text:000000000000574c IMMED
             forth.s:4089   .text:0000000000005750 $d
ARM GAS  forth.s 			page 246


             forth.s:4107   .text:000000000000577c _CONST
             forth.s:4107   .text:0000000000005788 CONST
             forth.s:4109   .text:000000000000578c $d
             forth.s:4120   .text:00000000000057bc $t
             forth.s:4127   .text:00000000000057bc DODOES
             forth.s:4129   .text:00000000000057c0 $d
             forth.s:4144   .text:00000000000057e4 $d
             forth.s:4144   .text:00000000000057e8 _DOES
             forth.s:4144   .text:00000000000057ee $t
             forth.s:4144   .text:00000000000057f0 DOES
             forth.s:4146   .text:00000000000057f4 $d
             forth.s:4161   .text:0000000000005824 _DEFERAT
             forth.s:4161   .text:000000000000582c DEFERAT
             forth.s:4163   .text:0000000000005830 $d
             forth.s:4173   .text:0000000000005848 _DEFERSTO
             forth.s:4173   .text:0000000000005850 DEFERSTO
             forth.s:4175   .text:0000000000005854 $d
             forth.s:4186   .text:0000000000005870 _DEFER
             forth.s:4186   .text:0000000000005876 $t
             forth.s:4186   .text:0000000000005878 DEFER
             forth.s:4188   .text:000000000000587c $d
             forth.s:4214   .text:00000000000058c8 CREAT
             forth.s:4199   .text:00000000000058b0 DEFER_NOP
             forth.s:4200   .text:00000000000058b0 $t
             forth.s:4201   .text:00000000000058b4 $d
             forth.s:4214   .text:00000000000058c0 _CREAT
             forth.s:4216   .text:00000000000058cc $d
             forth.s:4229   .text:00000000000058f0 _VARIA
             forth.s:4229   .text:00000000000058fc VARIA
             forth.s:4231   .text:0000000000005900 $d
             forth.s:4249   .text:0000000000005920 DMP
             forth.s:4250   .text:0000000000005920 $t
             forth.s:4251   .text:0000000000005924 $d
             forth.s:4269   .text:0000000000005978 PDUM2
             forth.s:4263   .text:0000000000005960 PDUM1
             forth.s:4284   .text:0000000000005990 $d
             forth.s:4284   .text:0000000000005994 _DUMP
             forth.s:4284   .text:000000000000599c DUMP
             forth.s:4286   .text:00000000000059a0 $d
             forth.s:4312   .text:0000000000005a1c DUMP4
             forth.s:4302   .text:00000000000059f4 DUMP1
             forth.s:4314   .text:0000000000005a24 DUMP3
             forth.s:4327   .text:0000000000005a38 TDOT
             forth.s:4328   .text:0000000000005a38 $t
             forth.s:4329   .text:0000000000005a3c $d
             forth.s:4368   .text:0000000000005ad0 _DOTS
             forth.s:4368   .text:0000000000005ad4 DOTS
             forth.s:4370   .text:0000000000005ad8 $d
             forth.s:4377   .text:0000000000005af4 DOTS2
             forth.s:4373   .text:0000000000005ae8 DOTS1
             forth.s:4382   .text:0000000000005b04 RBASE
             forth.s:4383   .text:0000000000005b04 $t
             forth.s:4391   .text:0000000000005b14 RDOT
             forth.s:4393   .text:0000000000005b18 $d
             forth.s:4420   .text:0000000000005b7c _TRACE
             forth.s:4420   .text:0000000000005b82 $t
             forth.s:4420   .text:0000000000005b84 TRACE
ARM GAS  forth.s 			page 247


             forth.s:4422   .text:0000000000005b88 $d
             forth.s:4441   .text:0000000000005bcc _TOBODY
             forth.s:4441   .text:0000000000005bd2 $t
             forth.s:4441   .text:0000000000005bd4 TOBODY
             forth.s:4450   .text:0000000000005bdc $d
             forth.s:4450   .text:0000000000005be0 _TNAME
             forth.s:4450   .text:0000000000005be6 $t
             forth.s:4450   .text:0000000000005be8 TNAME
             forth.s:4452   .text:0000000000005bec $d
             forth.s:4455   .text:0000000000005bf8 TNAM1
             forth.s:4466   .text:0000000000005c2c TNAM2
             forth.s:4475   .text:0000000000005c3c _DOTID
             forth.s:4475   .text:0000000000005c40 $t
             forth.s:4475   .text:0000000000005c40 DOTID
             forth.s:4477   .text:0000000000005c44 $d
             forth.s:4484   .text:0000000000005c68 DOTI1
             forth.s:4485   .text:0000000000005c76 $t
             forth.s:4486   .text:0000000000005c78 $d
             forth.s:4488   *ABS*:0000000000000000 WANT_SEE
             forth.s:4562   .text:0000000000005c80 _WORDS
             forth.s:4562   .text:0000000000005c86 $t
             forth.s:4562   .text:0000000000005c88 WORDS
             forth.s:4564   .text:0000000000005c8c $d
             forth.s:4567   .text:0000000000005c98 WORS1
             forth.s:4576   .text:0000000000005cc0 WORS2
             forth.s:4585   .text:0000000000005cc8 _MARK
             forth.s:4585   .text:0000000000005cd0 MARK
             forth.s:4587   .text:0000000000005cd4 $d
             forth.s:4590   .text:0000000000005ce0 $t
             forth.s:4591   .text:0000000000005ce4 $d
             forth.s:4606   .text:0000000000005d14 _ARRAY
             forth.s:4606   .text:0000000000005d1a $t
             forth.s:4606   .text:0000000000005d1c ARRAY
             forth.s:4608   .text:0000000000005d20 $d
             forth.s:4622   .text:0000000000005d5c DO_ARRAY
             forth.s:4623   .text:0000000000005d5c $t
             forth.s:4624   .text:0000000000005d60 $d
             forth.s:4642   .text:0000000000005d7c VERSN
             forth.s:4643   .text:0000000000005d7c $t
             forth.s:4644   .text:0000000000005d80 $d
             forth.s:4652   .text:0000000000005d90 _HI
             forth.s:4652   .text:0000000000005d94 HI
             forth.s:4654   .text:0000000000005d98 $d
             forth.s:4655   .text:0000000000005db2 $t
             forth.s:4656   .text:0000000000005db4 $d
             forth.s:4680   .text:0000000000005e00 $t
             forth.s:4681   .text:0000000000005e04 $d
             forth.s:4693   .text:0000000000005e20 PS2_QUERY
             forth.s:4694   .text:0000000000005e20 $t
             forth.s:4695   .text:0000000000005e24 $d
             forth.s:4709   .text:0000000000005e8a $t
             forth.s:4710   .text:0000000000005e8c $d
             forth.s:4720   .text:0000000000005e98 IF_SENSE
             forth.s:4721   .text:0000000000005e98 $t
             forth.s:4722   .text:0000000000005e9c $d
             forth.s:4736   .text:0000000000005ecc READY
             forth.s:4737   .text:0000000000005ecc $t
ARM GAS  forth.s 			page 248


             forth.s:4738   .text:0000000000005ed0 $d
             forth.s:4738   .text:0000000000005eda $t
             forth.s:4739   .text:0000000000005edc $d
             forth.s:4757   .text:0000000000005f04 COLD1
             forth.s:4758   .text:0000000000005f04 $d
             forth.s:4773   .text:0000000000005f54 COLD2
             forth.s:4776   .text:0000000000005f54 $d
             forth.s:4779   .text:0000000000005f58 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:0000000000000961 $d
       environment.s:32     .text:0000000000000962 $t
       environment.s:107    .text:00000000000009ff $d
       environment.s:107    .text:0000000000000a00 $t
       environment.s:141    .text:0000000000000a47 $d
       environment.s:141    .text:0000000000000a48 $t
       environment.s:187    .text:0000000000000aad $d
       environment.s:187    .text:0000000000000aae $t
       environment.s:201    .text:0000000000000ad9 $d
       environment.s:201    .text:0000000000000ada $t
          ser-term.s:90     .text:0000000000000b9f $d
          ser-term.s:90     .text:0000000000000ba0 $t
          ser-term.s:110    .text:0000000000000bd9 $d
          ser-term.s:110    .text:0000000000000bda $t
          ser-term.s:133    .text:0000000000000c17 $d
          ser-term.s:133    .text:0000000000000c18 $t
          ser-term.s:164    .text:0000000000000c5f $d
          ser-term.s:164    .text:0000000000000c60 $t
          ser-term.s:191    .text:0000000000000cd5 $d
          ser-term.s:191    .text:0000000000000cd6 $t
          ser-term.s:203    .text:0000000000000d03 $d
          ser-term.s:203    .text:0000000000000d04 $t
             tvout.s:264    .text:0000000000000f4f $d
             tvout.s:264    .text:0000000000000f50 $t
             tvout.s:278    .text:0000000000000f83 $d
             tvout.s:278    .text:0000000000000f84 $t
             tvout.s:306    .text:0000000000000fdd $d
             tvout.s:306    .text:0000000000000fde $t
             tvout.s:325    .text:000000000000100b $d
             tvout.s:325    .text:000000000000100c $t
             tvout.s:427    .text:0000000000001145 $d
             tvout.s:427    .text:0000000000001146 $t
             tvout.s:448    .text:000000000000119f $d
             tvout.s:448    .text:00000000000011a0 $t
             tvout.s:495    .text:0000000000001235 $d
             tvout.s:495    .text:0000000000001236 $t
           ps2_kbd.s:307    .text:0000000000001923 $d
ARM GAS  forth.s 			page 249


           ps2_kbd.s:307    .text:0000000000001924 $t
           ps2_kbd.s:396    .text:0000000000001a1f $d
           ps2_kbd.s:396    .text:0000000000001a20 $t
           ps2_kbd.s:616    .text:0000000000001cc1 $d
           ps2_kbd.s:616    .text:0000000000001cc2 $t
           ps2_kbd.s:633    .text:0000000000001cfb $d
           ps2_kbd.s:633    .text:0000000000001cfc $t
         spi-flash.s:85     .text:0000000000001de7 $d
         spi-flash.s:85     .text:0000000000001de8 $t
         spi-flash.s:151    .text:0000000000001eb3 $d
         spi-flash.s:151    .text:0000000000001eb4 $t
         spi-flash.s:238    .text:0000000000001ff7 $d
         spi-flash.s:238    .text:0000000000001ff8 $t
         spi-flash.s:256    .text:0000000000002033 $d
         spi-flash.s:256    .text:0000000000002034 $t
         spi-flash.s:278    .text:0000000000002087 $d
         spi-flash.s:278    .text:0000000000002088 $t
         spi-flash.s:325    .text:0000000000002107 $d
         spi-flash.s:325    .text:0000000000002108 $t
         spi-flash.s:343    .text:0000000000002129 $d
         spi-flash.s:343    .text:000000000000212a $t
         spi-flash.s:352    .text:000000000000213d $d
         spi-flash.s:352    .text:000000000000213e $t
               fpu.s:222    .text:000000000000230f $d
               fpu.s:222    .text:0000000000002310 $t
               fpu.s:235    .text:000000000000232f $d
               fpu.s:235    .text:0000000000002330 $t
               fpu.s:249    .text:000000000000234f $d
               fpu.s:249    .text:0000000000002350 $t
               fpu.s:262    .text:000000000000236f $d
               fpu.s:262    .text:0000000000002370 $t
               fpu.s:285    .text:00000000000023ad $d
               fpu.s:285    .text:00000000000023ae $t
               fpu.s:297    .text:00000000000023cd $d
               fpu.s:297    .text:00000000000023ce $t
               fpu.s:319    .text:0000000000002407 $d
               fpu.s:319    .text:0000000000002408 $t
               fpu.s:330    .text:0000000000002423 $d
               fpu.s:330    .text:0000000000002424 $t
               fpu.s:340    .text:000000000000243d $d
               fpu.s:340    .text:000000000000243e $t
               fpu.s:353    .text:000000000000246d $d
               fpu.s:353    .text:000000000000246e $t
               fpu.s:379    .text:00000000000024bd $d
               fpu.s:379    .text:00000000000024be $t
               fpu.s:403    .text:0000000000002507 $d
               fpu.s:403    .text:0000000000002508 $t
               fpu.s:421    .text:0000000000002539 $d
               fpu.s:421    .text:000000000000253a $t
               fpu.s:431    .text:0000000000002555 $d
               fpu.s:431    .text:0000000000002556 $t
            strtof.s:226    .text:00000000000027d7 $d
            strtof.s:226    .text:00000000000027d8 $t
              ftoa.s:412    .text:0000000000002e43 $d
              ftoa.s:412    .text:0000000000002e44 $t
             forth.s:133    .text:0000000000002eff $d
             forth.s:133    .text:0000000000002f00 $t
ARM GAS  forth.s 			page 250


             forth.s:145    .text:0000000000002f1f $d
             forth.s:145    .text:0000000000002f20 $t
             forth.s:157    .text:0000000000002f3f $d
             forth.s:157    .text:0000000000002f40 $t
             forth.s:179    .text:0000000000002f79 $d
             forth.s:179    .text:0000000000002f7a $t
             forth.s:215    .text:0000000000002f97 $d
             forth.s:215    .text:0000000000002f98 $t
             forth.s:262    .text:0000000000003045 $d
             forth.s:262    .text:0000000000003046 $t
             forth.s:279    .text:0000000000003073 $d
             forth.s:279    .text:0000000000003074 $t
             forth.s:293    .text:000000000000309d $d
             forth.s:293    .text:000000000000309e $t
             forth.s:404    .text:0000000000003155 $d
             forth.s:404    .text:0000000000003156 $t
             forth.s:430    .text:000000000000317f $d
             forth.s:430    .text:0000000000003180 $t
             forth.s:440    .text:0000000000003193 $d
             forth.s:440    .text:0000000000003194 $t
             forth.s:449    .text:000000000000319f $d
             forth.s:449    .text:00000000000031a0 $t
             forth.s:469    .text:00000000000031cd $d
             forth.s:469    .text:00000000000031ce $t
             forth.s:478    .text:00000000000031e1 $d
             forth.s:478    .text:00000000000031e2 $t
             forth.s:535    .text:0000000000003255 $d
             forth.s:535    .text:0000000000003256 $t
             forth.s:551    .text:0000000000003277 $d
             forth.s:551    .text:0000000000003278 $t
             forth.s:576    .text:00000000000032a5 $d
             forth.s:576    .text:00000000000032a6 $t
             forth.s:599    .text:00000000000032d5 $d
             forth.s:599    .text:00000000000032d6 $t
             forth.s:616    .text:00000000000032f9 $d
             forth.s:616    .text:00000000000032fa $t
             forth.s:646    .text:000000000000333f $d
             forth.s:646    .text:0000000000003340 $t
             forth.s:655    .text:0000000000003355 $d
             forth.s:655    .text:0000000000003356 $t
             forth.s:703    .text:00000000000033af $d
             forth.s:703    .text:00000000000033b0 $t
             forth.s:714    .text:00000000000033c3 $d
             forth.s:714    .text:00000000000033c4 $t
             forth.s:722    .text:00000000000033d1 $d
             forth.s:722    .text:00000000000033d2 $t
             forth.s:730    .text:00000000000033e1 $d
             forth.s:730    .text:00000000000033e2 $t
             forth.s:738    .text:00000000000033f1 $d
             forth.s:738    .text:00000000000033f2 $t
             forth.s:762    .text:0000000000003421 $d
             forth.s:762    .text:0000000000003422 $t
             forth.s:787    .text:0000000000003455 $d
             forth.s:787    .text:0000000000003456 $t
             forth.s:795    .text:0000000000003465 $d
             forth.s:795    .text:0000000000003466 $t
             forth.s:803    .text:0000000000003477 $d
ARM GAS  forth.s 			page 251


             forth.s:803    .text:0000000000003478 $t
             forth.s:824    .text:000000000000349f $d
             forth.s:824    .text:00000000000034a0 $t
             forth.s:853    .text:00000000000034db $d
             forth.s:853    .text:00000000000034dc $t
             forth.s:863    .text:00000000000034ef $d
             forth.s:863    .text:00000000000034f0 $t
             forth.s:876    .text:000000000000350d $d
             forth.s:876    .text:000000000000350e $t
             forth.s:921    .text:0000000000003575 $d
             forth.s:921    .text:0000000000003576 $t
             forth.s:929    .text:0000000000003589 $d
             forth.s:929    .text:000000000000358a $t
             forth.s:970    .text:00000000000035df $d
             forth.s:970    .text:00000000000035e0 $t
             forth.s:993    .text:000000000000360b $d
             forth.s:993    .text:000000000000360c $t
             forth.s:1006   .text:000000000000362b $d
             forth.s:1006   .text:000000000000362c $t
             forth.s:1030   .text:000000000000365b $d
             forth.s:1030   .text:000000000000365c $t
             forth.s:1076   .text:00000000000036b3 $d
             forth.s:1076   .text:00000000000036b4 $t
             forth.s:1088   .text:00000000000036cd $d
             forth.s:1088   .text:00000000000036ce $t
             forth.s:1100   .text:00000000000036ed $d
             forth.s:1100   .text:00000000000036ee $t
             forth.s:1172   .text:0000000000003771 $d
             forth.s:1172   .text:0000000000003772 $t
             forth.s:1181   .text:0000000000003789 $d
             forth.s:1181   .text:000000000000378a $t
             forth.s:1208   .text:00000000000037d1 $d
             forth.s:1208   .text:00000000000037d2 $t
             forth.s:1238   .text:000000000000380d $d
             forth.s:1238   .text:000000000000380e $t
             forth.s:1257   .text:0000000000003839 $d
             forth.s:1257   .text:000000000000383a $t
             forth.s:1297   .text:0000000000003893 $d
             forth.s:1297   .text:0000000000003894 $t
             forth.s:1317   .text:00000000000038bd $d
             forth.s:1317   .text:00000000000038be $t
             forth.s:1331   .text:00000000000038db $d
             forth.s:1331   .text:00000000000038dc $t
             forth.s:1342   .text:00000000000038f9 $d
             forth.s:1342   .text:00000000000038fa $t
             forth.s:1371   .text:0000000000003951 $d
             forth.s:1371   .text:0000000000003952 $t
             forth.s:1386   .text:000000000000396f $d
             forth.s:1386   .text:0000000000003970 $t
             forth.s:1403   .text:000000000000399b $d
             forth.s:1403   .text:000000000000399c $t
             forth.s:1433   .text:00000000000039d7 $d
             forth.s:1433   .text:00000000000039d8 $t
             forth.s:1473   .text:0000000000003a4f $d
             forth.s:1473   .text:0000000000003a50 $t
             forth.s:1582   .text:0000000000003b7b $d
             forth.s:1582   .text:0000000000003b7c $t
ARM GAS  forth.s 			page 252


             forth.s:1604   .text:0000000000003bc7 $d
             forth.s:1604   .text:0000000000003bc8 $t
             forth.s:1653   .text:0000000000003c07 $d
             forth.s:1653   .text:0000000000003c08 $t
             forth.s:1704   .text:0000000000003c7f $d
             forth.s:1704   .text:0000000000003c80 $t
             forth.s:1796   .text:0000000000003d69 $d
             forth.s:1796   .text:0000000000003d6a $t
             forth.s:1824   .text:0000000000003d9d $d
             forth.s:1824   .text:0000000000003d9e $t
             forth.s:1871   .text:0000000000003e05 $d
             forth.s:1871   .text:0000000000003e06 $t
             forth.s:1882   .text:0000000000003e29 $d
             forth.s:1882   .text:0000000000003e2a $t
             forth.s:1915   .text:0000000000003e79 $d
             forth.s:1915   .text:0000000000003e7a $t
             forth.s:1947   .text:0000000000003ec1 $d
             forth.s:1947   .text:0000000000003ec2 $t
             forth.s:2025   .text:0000000000003fa3 $d
             forth.s:2025   .text:0000000000003fa4 $t
             forth.s:2037   .text:0000000000003fc1 $d
             forth.s:2037   .text:0000000000003fc2 $t
             forth.s:2069   .text:000000000000400f $d
             forth.s:2069   .text:0000000000004010 $t
             forth.s:2087   .text:0000000000004041 $d
             forth.s:2087   .text:0000000000004042 $t
             forth.s:2101   .text:000000000000406b $d
             forth.s:2101   .text:000000000000406c $t
             forth.s:2179   .text:0000000000004127 $d
             forth.s:2179   .text:0000000000004128 $t
             forth.s:2296   .text:0000000000004259 $d
             forth.s:2296   .text:000000000000425a $t
             forth.s:2382   .text:0000000000004377 $d
             forth.s:2382   .text:0000000000004378 $t
             forth.s:2399   .text:00000000000043ad $d
             forth.s:2399   .text:00000000000043ae $t
             forth.s:2417   .text:00000000000043e3 $d
             forth.s:2417   .text:00000000000043e4 $t
             forth.s:2512   .text:00000000000044d7 $d
             forth.s:2512   .text:00000000000044d8 $t
             forth.s:2549   .text:000000000000453b $d
             forth.s:2549   .text:000000000000453c $t
             forth.s:2613   .text:00000000000045ef $d
             forth.s:2613   .text:00000000000045f0 $t
             forth.s:2644   .text:0000000000004647 $d
             forth.s:2644   .text:0000000000004648 $t
             forth.s:2786   .text:000000000000481f $d
             forth.s:2786   .text:0000000000004820 $t
             forth.s:2825   .text:0000000000004881 $d
             forth.s:2825   .text:0000000000004882 $t
             forth.s:2837   .text:00000000000048a7 $d
             forth.s:2837   .text:00000000000048a8 $t
             forth.s:2848   .text:00000000000048c1 $d
             forth.s:2848   .text:00000000000048c2 $t
             forth.s:3131   .text:0000000000004c2f $d
             forth.s:3131   .text:0000000000004c30 $t
             forth.s:3245   .text:0000000000004d63 $d
ARM GAS  forth.s 			page 253


             forth.s:3245   .text:0000000000004d64 $t
             forth.s:3299   .text:0000000000004e2b $d
             forth.s:3299   .text:0000000000004e2c $t
             forth.s:3311   .text:0000000000004e55 $d
             forth.s:3311   .text:0000000000004e56 $t
             forth.s:3338   .text:0000000000004e9d $d
             forth.s:3338   .text:0000000000004e9e $t
             forth.s:3375   .text:0000000000004f3f $d
             forth.s:3375   .text:0000000000004f40 $t
             forth.s:3391   .text:0000000000004f79 $d
             forth.s:3391   .text:0000000000004f7a $t
             forth.s:3406   .text:0000000000004fa7 $d
             forth.s:3406   .text:0000000000004fa8 $t
             forth.s:3435   .text:0000000000005001 $d
             forth.s:3435   .text:0000000000005002 $t
             forth.s:3477   .text:0000000000005055 $d
             forth.s:3477   .text:0000000000005056 $t
             forth.s:3603   .text:00000000000051bb $d
             forth.s:3603   .text:00000000000051bc $t
             forth.s:3669   .text:00000000000052a1 $d
             forth.s:3669   .text:00000000000052a2 $t
             forth.s:3680   .text:00000000000052cb $d
             forth.s:3680   .text:00000000000052cc $t
             forth.s:3725   .text:0000000000005341 $d
             forth.s:3725   .text:0000000000005342 $t
             forth.s:3776   .text:00000000000053d3 $d
             forth.s:3776   .text:00000000000053d4 $t
             forth.s:3804   .text:000000000000543b $d
             forth.s:3804   .text:000000000000543c $t
             forth.s:3817   .text:000000000000545d $d
             forth.s:3817   .text:000000000000545e $t
             forth.s:3844   .text:000000000000549d $d
             forth.s:3844   .text:000000000000549e $t
             forth.s:3881   .text:00000000000054ff $d
             forth.s:3881   .text:0000000000005500 $t
             forth.s:3892   .text:000000000000551f $d
             forth.s:3892   .text:0000000000005520 $t
             forth.s:3904   .text:000000000000553f $d
             forth.s:3904   .text:0000000000005540 $t
             forth.s:3969   .text:00000000000055fd $d
             forth.s:3969   .text:00000000000055fe $t
             forth.s:4107   .text:0000000000005785 $d
             forth.s:4107   .text:0000000000005786 $t
             forth.s:4161   .text:000000000000582b $d
             forth.s:4161   .text:000000000000582c $t
             forth.s:4173   .text:000000000000584f $d
             forth.s:4173   .text:0000000000005850 $t
             forth.s:4214   .text:00000000000058c7 $d
             forth.s:4214   .text:00000000000058c8 $t
             forth.s:4229   .text:00000000000058f9 $d
             forth.s:4229   .text:00000000000058fa $t
             forth.s:4284   .text:0000000000005999 $d
             forth.s:4284   .text:000000000000599a $t
             forth.s:4368   .text:0000000000005ad3 $d
             forth.s:4368   .text:0000000000005ad4 $t
             forth.s:4585   .text:0000000000005ccd $d
             forth.s:4585   .text:0000000000005cce $t
ARM GAS  forth.s 			page 254


             forth.s:4652   .text:0000000000005d93 $d
             forth.s:4652   .text:0000000000005d94 $t
             forth.s:4751   .text:0000000000005eed $d
             forth.s:4751   .text:0000000000005eee $t

UNDEFINED SYMBOLS
_mstack
