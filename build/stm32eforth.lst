ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	  .equ VFPSW, PEN_COLOR+4 
ARM GAS  forth.s 			page 10


 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
 165              	
ARM GAS  forth.s 			page 11


 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
 222              		// from a code word   
ARM GAS  forth.s 			page 12


 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 13


  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 14


 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF898C4 	  ldr IP,=dh
 159 000e 02F083B9 	  b INEXT  
 160              	dh:
 161 0012 353E0000 	  _ADR PRESE    
 162 0016 97240000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e ED290000 	  _ADR COUNT 
 164 0022 75340000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a C9250000 	  _ADR DUPP
 167 002e 71250000 	  _ADR TOR 
 168 0032 97240000 	  _DOLIT 16 
 168      10000000 
 169 003a 852A0000 	  _ADR BASE 
 170 003e 09250000 	  _ADR STORE 
 171 0042 BD350000 	  _ADR DOT 
 172 0046 49250000 	  _ADR RFROM
 173 004a 97240000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 0D260000 	  _ADR ANDD
 175 0056 D7240000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 97240000 	  _DOLIT ','
 177      2C000000 
 178 006a A1230000 	  _ADR EMIT 
 179 006e 21340000 	  _ADR SPACE 
 180 0072 BD350000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
ARM GAS  forth.s 			page 15


 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 02F046B9 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 02F03DB9 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8C8C3 	  ldr IP,=ur
 232 00e2 02F019B9 	  b INEXT  
 233              	ur:
ARM GAS  forth.s 			page 16


 234 00e6 353E0000 	  _ADR PRESE
 235 00ea A9340000 	  _ADR CR   
 236 00ee 97240000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 ED290000 		_ADR COUNT 
 238 00fa 75340000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0C8F9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0C1FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 04F0B9BC 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 17


 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF828A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
ARM GAS  forth.s 			page 18


 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	
 347              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 348 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 349 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 350 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 351 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 352              	/* configure GPIOC:13 as output for user LED */
 353 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 353      C4F20200 
 354 0206 4FF00D01 	  mov r1,#LED_PIN
 355 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 356 020e 00B500F0 	  _CALL gpio_config 
 356      8FF85DF8 
 356      04EB
 357 0218 4FF00102 	  mov r2,#1
 358 021c 00B500F0 	  _CALL gpio_out 
 358      DEF85DF8 
 358      04EB
 359              	/* enable compensation CELL for fast I/O */
 360 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 360      C4F20101 
 361 022e 4FF00100 		mov r0,#1 
 362 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 363              	/* wait for ready bit */ 
 364 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 365 0236 10F4807F 	    tst r0,#(1<<8)
 366 023a FBD0     		beq 1b 	
 367              	
 368              	
 369              	/* configure systicks for 1msec ticks */
 370              	// set priority to 15 (lowest)
 371 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 372 0240 4FF00F01 	  mov r1,#15 
 373 0244 00B500F0 	  _CALL nvic_set_priority
 373      2FF85DF8 
 373      04EB
 374 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 374      CEF20000 
 375 0256 47F2FF61 	  _MOV32 r1,95999 
 375      C0F20101 
 376 025e 4160     	  str r1,[r0,#STK_LOAD]
 377 0260 4FF00701 	  mov r1,#7
 378 0264 0160     	  str r1,[r0,STK_CTL]
 379 0266 7047     	  _RET  
 380              	
ARM GAS  forth.s 			page 19


 381              	
 382              	/* copy system variables to RAM */ 
 383              		.type remap, %function 
 384              	    .global remap 
 385              	remap:
 386              	// copy system to RAM 	
 387 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 387      C2F20000 
 388 0270 8F49     		ldr r1,=UZERO 
 389 0272 4FF0B002 		mov r2,#ULAST-UZERO 
 390 0276 02F10302 		add r2,r2,#3
 391 027a 22F00302 		and r2,r2,#~3 
 392 027e 51F8043B 	1:	ldr r3,[r1],#4 
 393 0282 40F8043B 		str r3,[r0],#4 
 394 0286 043A     		subs R2,#4 
 395 0288 F9D1     		bne 1b
 396              	// zero end of RAM 
 397 028a 4FF00002 		_MOV32 r2,RAM_END 
 397      C2F20202 
 398 0292 83EA0303 		eor r3,r3,r3 
 399 0296 40F8043B 	2:  str r3,[r0],#4
 400 029a 9042     		cmp r0,r2 
 401 029c FBDB     		blt 2b 
 402 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 402      C2F20004 
 403 02a6 7047     		_RET 
 404              	
 405              	// set irq priority 
 406              	// 0 highest 
 407              	// 15 lowest
 408              	// input: r0 IRQn  
 409              	//        r1  ipr 
 410              	nvic_set_priority:
 411 02a8 08B4     	    push {r3}
 412 02aa 0028     	    cmp r0,#0 
 413 02ac 08D4     	    bmi negative_irq 
 414 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 414      CEF20003 
 415 02b6 4FEA0111 	    lsl r1,#4 
 416 02ba 1954     	    strb r1,[r3,r0]
 417 02bc 08BC     	    pop {r3}
 418 02be 7047     	    _RET 
 419              	negative_irq:
 420 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 420      CEF20003 
 421 02c8 00F00F00 	    and r0,#0XF 
 422 02cc A0F10400 	    sub r0,#4 
 423 02d0 4FEA0111 	    lsl r1,#4 
 424 02d4 1954     	    strb r1,[r3,r0]
 425 02d6 08BC     	    pop {r3}
 426 02d8 7047     	    _RET 
 427              	
 428              	
 429              	// enable interrupt in nvic 
 430              	// input: r0 = IRQn 
 431              	nvic_enable_irq: 
 432 02da 0EB4     	    push {r1,r2,r3}
ARM GAS  forth.s 			page 20


 433 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 433      CEF20003 
 434 02e4 0146     	    mov r1,r0 
 435 02e6 4FEA5111 	    lsr r1,#5  
 436 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 437 02ee 00F01F00 	    and r0,#31 // bit#
 438 02f2 4FF00102 	    mov r2,#1 
 439 02f6 02FA00F2 	    lsl r2,r0
 440 02fa 72B6     	    cpsid I
 441 02fc 5A50     	    str r2,[r3,r1]
 442 02fe 62B6     	    cpsie I 
 443 0300 0EBC     	    pop {r1,r2,r3}
 444 0302 7047     	    _RET 
 445              	
 446              	// disable interrupt in nvic
 447              	// input: r0 = IRQn
 448              	nvic_disable_irq:
 449 0304 0EB4     	    push {r1,r2,r3}
 450 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 450      CEF20003 
 451 030e 0146     	    mov r1,r0 
 452 0310 4FEA5111 	    lsr r1,#5  
 453 0314 4FEA8101 	    lsl r1,#2  // ISERn
 454 0318 00F01F00 	    and r0,#31 // bit#
 455 031c 4FF00102 	    mov r2,#1 
 456 0320 02FA00F2 	    lsl r2,r0
 457 0324 5A50     	    str r2,[r3,r1]
 458 0326 BFF34F8F 	    dsb 
 459 032a BFF36F8F 	    isb 
 460 032e 0EBC     	    pop {r1,r2,r3}
 461 0330 7047     	    _RET 
 462              	
 463              	/**********************************
 464              	  gpio_config 
 465              	  Configure gpio mode 
 466              	  input:
 467              	    r0   GPIOx 
 468              	    r1   pin 
 469              	    r2   mode 
 470              	  output:
 471              	    none 
 472              	  use:
 473              	    r3,r5,r11  
 474              	**********************************/
 475              	gpio_config:
 476 0332 2DE92808 	    push {r3,r5,r11}
 477              	//  clear registers field 
 478 0336 4FF00105 	    mov r5,#1
 479 033a 05FA01F5 	    lsl r5,r1
 480 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 481 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 482 0344 03EA0503 	    and r3,r5 
 483 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 484 034a 4FF00305 	    mov r5,#3 
 485 034e 4FF0020B 	    mov r11,#2 
 486 0352 01FB0BFB 	    mul r11,r1 
 487 0356 05FA0BF5 	    lsl r5,r11 
ARM GAS  forth.s 			page 21


 488 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 489 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 490 0360 03EA0503 	    and r3,r5 
 491 0364 0360     	    str r3,[r0,#GPIO_MODER]
 492 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 493 0368 03EA0503 	    and r3,r5 
 494 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 495              	// set mode register, r2 low nibble  
 496 036e 02F00305 	    and r5,r2,#3    
 497 0372 05FA0BF5 	    lsl r5,r11 // mode 
 498 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 499 0378 43EA0503 	    orr r3,r5 
 500 037c 0360     	    str r3,[r0,#GPIO_MODER]
 501 037e 032A     	    cmp r2,#3
 502 0380 13D0     	    beq 9f // analog input 
 503 0382 12F00305 	    ands r5,r2,#3 
 504 0386 08D0     	    beq input_pull 
 505              	output_type:
 506 0388 4FEA1212 	    lsr r2,#4 
 507 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 508 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 509 0392 43EA0203 	    orr r3,r2 
 510 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 511 0398 07E0     	    b 9f 
 512              	input_pull:
 513 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 514 039c 4FEA1212 	    lsr r2,#4 
 515 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 516 03a4 43EA0203 	    orr r3,r2 
 517 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 518 03aa BDE82808 	9:  pop {r3,r5,r11}
 519 03ae 7047     	    _RET 
 520              	
 521              	// configure gpio speed 
 522              	// input:
 523              	//    r0   GPIO_BASE_ADR 
 524              	//    r1   pin 
 525              	//    r2   speed
 526              	// use:
 527              	//  r3,r5,r11 
 528              	gpio_speed:
 529 03b0 2DE92808 	    push {r3,r5,r11}
 530 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 531 03b6 4FF00305 	    mov r5,#3
 532 03ba 4FF0020B 	    mov r11,#2 
 533 03be 01FB0BFB 	    mul r11,r1 
 534 03c2 05FA0BF5 	    lsl r5,r11
 535 03c6 6FEA0505 	    mvn r5,r5 
 536 03ca 03EA0503 	    and r3,r5   
 537 03ce 02FA0BF2 	    lsl r2,r11  
 538 03d2 43EA0203 	    orr r3,r2 
 539 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 540 03d8 BDE82808 	    pop {r3,r5,r11}
 541 03dc 7047     	    _RET
 542              	
 543              	/**************************** 
 544              	  gpio_out port,pin,0|1
ARM GAS  forth.s 			page 22


 545              	  input:
 546              	    r0   gpio_base_adr 
 547              	    r1   pin 
 548              	    r2   data 0|1 
 549              	**************************/
 550              	gpio_out:
 551 03de 08B4     	    push {r3}
 552 03e0 4FF00103 	    mov r3,#1 
 553 03e4 03FA01F3 	    lsl r3,r1 
 554 03e8 0AB9     	    cbnz r2, 1f 
 555 03ea 4FEA0343 	    lsl r3,#16 
 556 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 557 03f0 08BC     	    pop {r3}
 558 03f2 7047     	    _RET 
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564              		.p2align 2
 565              	UZERO:
 566 03f4 00000000 		.word 0  			/*Reserved */
 567 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 568 03fc 00000000 		.word 0      /* TICKS */
 569 0400 00000000 	    .word 0     /* CD_TIMER */
 570 0404 B4490000 		.word HI  /*'BOOT */
 571 0408 C8130000 		.word PS2_QKEY /* query for character */
 572 040c 900C0000 	  .word TV_EMIT  /* char output device */
 573 0410 0A000000 	  .word BASEE 	/*BASE */
 574 0414 00000000 		.word 0			/*tmp */
 575 0418 00000000 		.word 0			/*SPAN */
 576 041c 00000000 		.word 0			/*>IN */
 577 0420 00000000 		.word 0			/*#TIB */
 578 0424 00FF0120 		.word TIBB	/*TIBU */
 579 0428 0C3D0000 		.word INTER	/*'EVAL */
 580 042c 00000000 		.word 0			/*HLD */
 581 0430 D04A0000 		.word _LASTN	/*CONTEXT */
 582 0434 384B0000 		.word CTOP  	/* FCP end of system dictionnary */
 583 0438 44470020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 584 043c D04A0000 		.word _LASTN	/*LAST word in dictionary */
 585 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 585      00000000 
 585      00000000 
 585      00000000 
 586 0450 00000000 		.word 0  /* RX_HEAD */
 587 0454 00000000 		.word 0  /* RX_TAIL */ 
 588 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 589 045c 00000000 		.word 0  /* VID_STATE, video state */  
 590 0460 00000000 	    .word 0  /* VID_FIELD, field */
 591 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 592 0468 00000000 	    .word 0 /* kbd struct */
 593 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 593      00000000 
 593      00000000 
 593      00000000 
 594 047c 00000000 		.word 0  /* kbd queue head */
 595 0480 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 23


 596 0484 00000000 	    .word 0 /* tv cursor row */
 597 0488 00000000 	    .word 0 /* tv cursor column */ 
 598 048c 00000000 	    .word 0 /* tv back color */
 599 0490 07000000 	    .word 7 /* tv font color */
 600 0494 00000000 	    .word 0 /* FPSW */
 601 0498 00000000 	    .word 0 /* FBASE */ 
 602 049c 00000000 	    .word 0,0 
 602      00000000 
 603              	ULAST:
 604              	
 605              	// used by _HEADER macro 
 606              	// to link names field
 607              	// in dictionary  
 608 04a4 12000000 	    .equ LINK, 0 
 608      E6000000 
 608      10230000 
 608      F4030000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04b4 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 04bc 1868     		ldr r0,[r3,#USART_SR]
  38 04be 5968     		ldr r1,[r3,#USART_DR]
  39 04c0 10F0200F 		tst r0,#(1<<5) // RXNE 
ARM GAS  forth.s 			page 24


  40 04c4 0CD0     		beq 2f // no char received 
  41 04c6 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04ca 3FF403AE 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04ce 04F14C00 		add r0,UP,#RX_QUEUE
  44 04d2 226E     		ldr r2,[UP,#RX_TAIL]
  45 04d4 8154     		strb r1,[r0,r2]
  46 04d6 02F10102 		add r2,#1 
  47 04da 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04de 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04e0 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04e2 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04ea 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04ec 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04f0 01EA0201 	  and r1,r1,r2
  62 04f4 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 04f8 41EA0201 	  orr r1,r1,r2 
  64 04fc 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 04fe 4FF4EE61 	  mov r1,#0x77<<4 
  67 0502 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0504 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 050c 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 0510 8160     	  str r1,[r0,#USART_BRR]
  73 0512 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0516 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0518 4FF02500 	  mov r0,#USART1_IRQ 
  77 051c 4FF00701 	  mov r1,#7
  78 0520 00B5FFF7 	  _CALL nvic_set_priority
  78      C1FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 052a 4FF02500 	  mov r0,#USART1_IRQ 
  81 052e 00B5FFF7 	  _CALL nvic_enable_irq  
  81      D3FE5DF8 
  81      04EB
  82 0538 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 053a 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
ARM GAS  forth.s 			page 25


  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0548 47F8046D 		_PUSH
  92 054c 206E     		ldr T0,[UP,#RX_TAIL] 
  93 054e E16D     		ldr T1,[UP,#RX_HEAD]
  94 0550 90EA0106 		eors TOS,T0,T1 
  95 0554 0CD0     		beq 1f
  96 0556 04F14C00 		add T0,UP,#RX_QUEUE 
  97 055a 0844     		add T0,T1 
  98 055c 0678     		ldrb TOS,[T0]
  99 055e 01F10101 		add T1,#1 
 100 0562 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0566 E165     		str T1,[UP,#RX_HEAD]
 102 0568 47F8046D 		_PUSH 
 103 056c 4FF0FF36 		mov TOS,#-1
 104 0570 01F0D2BE 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0574 3E050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0584 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 058c 2868     	1:  ldr T0,[WP,#USART_SR]
 113 058e 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0592 FBD0     		beq 1b 
 115 0594 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0596 57F8046B 		_POP
 117 059a 01F0BDBE 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 059e 78050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05a8 47F8046D 	        _PUSH 
 126 05ac 4FF00006 	        mov TOS,#0
 127 05b0 01F0B2BE 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05b4 A2050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 05c0 47F8046D 	        _PUSH 
 135 05c4 4FF00106 	        mov TOS,#1
 136 05c8 01F0A6BE 	        _NEXT 
ARM GAS  forth.s 			page 26


 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05cc B8050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05d8 3046     	        mov T0,TOS
 144 05da 57F8046B 	        _POP 
 145 05de 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05e0 4B48     	        ldr T0,=SER_QKEY 
 148 05e2 6061     	        str T0,[UP,#STDIN]
 149 05e4 4B48     	        ldr T0,=SER_EMIT
 150 05e6 A061     	        str T0,[UP,#STDOUT]
 151 05e8 01F096BE 	        _NEXT 
 152              	4: // local console 
 153 05ec 4A48     	        ldr T0,=PS2_QKEY
 154 05ee 6061     	        str T0,[UP,#STDIN]
 155 05f0 4A48     	        ldr T0,=TV_EMIT
 156 05f2 A061     	        str T0,[UP,#STDOUT]
 157 05f4 01F090BE 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 05f8 D0050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0608 504700BF 	      _NEST 
 166 060c 97240000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0614 E9260000 	1:    _ADR ONEP  // c+1
 168 0618 71250000 	      _ADR TOR   
 169 061c 97240000 	      _DOLIT 10 
 169      0A000000 
 170 0624 A92D0000 	      _ADR SLMOD // r q  
 171 0628 9D270000 	      _ADR QDUP  // r q q | r 0  
 172 062c D7240000 	      _QBRAN 2f  // r 0 
 172      40060000 
 173 0634 49250000 	      _ADR RFROM // r q c 
 174 0638 EB240000 	      _BRAN 1b
 174      14060000 
 175 0640 97240000 	2:    _DOLIT '0'  
 175      30000000 
 176 0648 8D260000 	      _ADR PLUS 
 177 064c A1230000 	      _ADR EMIT 
 178 0650 49250000 	      _ADR RFROM 
 179 0654 9D270000 	      _ADR QDUP 
 180 0658 D7240000 	      _QBRAN 3f
 180      70060000 
 181 0660 F9260000 	      _ADR ONEM 
 182 0664 71250000 	      _ADR TOR 
ARM GAS  forth.s 			page 27


 183 0668 EB240000 	      _BRAN 2b 
 183      40060000 
 184              	3:    
 185 0670 1F230000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0674 FC050000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0680 504700BF 	      _NEST 
 193 0684 97240000 	      _DOLIT 27 
 193      1B000000 
 194 068c A1230000 	      _ADR EMIT 
 195 0690 97240000 	      _DOLIT '['
 195      5B000000 
 196 0698 A1230000 	      _ADR EMIT 
 197 069c 1F230000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 06a0 78060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06ac 504700BF 	      _NEST
 205 06b0 81060000 	      _ADR ANSI_ESC
 206 06b4 D9250000 	      _ADR SWAP 
 207 06b8 09060000 	      _ADR ANSI_PARAM 
 208 06bc 97240000 	      _DOLIT ';'
 208      3B000000 
 209 06c4 A1230000 	      _ADR EMIT
 210 06c8 09060000 	      _ADR ANSI_PARAM
 211 06cc 97240000 	      _DOLIT 'H'
 211      48000000 
 212 06d4 A1230000 	      _ADR EMIT 
 213 06d8 1F230000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06dc A4060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06e8 504700BF 	    _NEST
 221 06ec 97240000 	    _DOLIT 1 
 221      01000000 
 222 06f4 C9250000 	    _ADR DUPP 
 223 06f8 AD060000 	    _ADR SER_AT  
 224 06fc 81060000 	    _ADR ANSI_ESC
 225 0700 97240000 	    _DOLIT 'J'
 225      4A000000 
 226 0708 A1230000 	    _ADR EMIT 
ARM GAS  forth.s 			page 28


 227 070c 1F230000 	    _UNNEST 
 228 0710 48050000 	
 228      84050000 
 228      C8130000 
 228      900C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
ARM GAS  forth.s 			page 29


  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0720 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0728 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 072a 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
ARM GAS  forth.s 			page 30


  80              	//  movt r2,#0x55<<8 
  81 0732 41EA0201 	  orr r1,r2
  82 0736 0160     	  str r1,[r0,#GPIO_MODER]
  83 0738 81EA0101 	  eor r1,r1 
  84 073c 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 073e 4FF00101 	  mov r1,#1 // pin 1 
  88 0742 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0746 00B5FFF7 	  _CALL gpio_config 
  89      F3FD5DF8 
  89      04EB
  90 0750 4FF00101 	  mov r1,#1 
  91 0754 4FF00202 	  mov r2,#2
  92 0758 00B5FFF7 	  _CALL gpio_speed 
  92      29FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0762 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0764 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0768 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 076a 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0772 4FF00200 	  mov r0,#2 
 100 0776 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0778 41EA0001 	  orr r1,r0 
 102 077c 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 077e 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0786 41F2D470 	  mov r0,#HPER
 106 078a D062     	  str r0,[r2,#TIM_ARR]
 107 078c 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0790 D063     	  str r0,[r2,#TIM_CCR3]
 109 0792 4FF4E170 	  mov r0,#HPULSE 
 110 0796 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0798 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 079c D061     	  str r0,[r2,#TIM_CCMR2]
 113 079e 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 07a2 1062     	  str r0,[r2,#TIM_CCER]
 115 07a4 4FF00100 	  mov r0,#1 
 116 07a8 D060     	  str r0,[r2,#TIM_DIER]
 117 07aa 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07ac 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07b0 4FF00201 	  mov r1,#2
 121 07b4 00B5FFF7 	  _CALL nvic_set_priority
 121      77FD5DF8 
 121      04EB
 122 07be 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07c2 00B5FFF7 	  _CALL nvic_enable_irq
 123      89FD5DF8 
 123      04EB
 124 07cc 7047     	  _RET
 125              	
 126              	/*************************************
ARM GAS  forth.s 			page 31


 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07ce 00BF     	  _GBL_FUNC tv_out_isr
 132 07d0 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07d8 81EA0101 	  eor T1,T1
 134 07dc 0161     	  str T1,[T0,#TIM_SR]
 135 07de 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07e0 01F10101 	  add T1,#1 
 137 07e4 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07e6 A26E     	  ldr T2,[UP,#VID_STATE]
 140 07e8 002A     	  cmp T2,#ST_VSYNC 
 141 07ea 07D0     	  beq state_vsync
 142 07ec 012A     	  cmp T2,#ST_PREVID 
 143 07ee 2FD0     	  beq state_pre_video 
 144 07f0 022A     	  cmp T2,#ST_VIDEO 
 145 07f2 36D0     	  beq state_video_out 
 146 07f4 032A     	  cmp T2,#ST_POSTVID 
 147 07f6 63D0     	  beq state_post_video
 148 07f8 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 07fc 0129     	  cmp T1,#1
 152 07fe 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0800 4FF0DB01 	  mov T1,#SERRATION
 155 0804 0164     	  str T1,[T0,#TIM_CCR4]
 156 0806 40F6E931 	  mov T1,#SYNC_LINE 
 157 080a C162     	  str T1,[T0,#TIM_ARR]
 158 080c 6BE0     	  b tv_isr_exit 
 159 080e 0729     	1: cmp T1,#7
 160 0810 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0812 40F62821 	  mov T1,#VSYNC_PULSE
 163 0816 0164     	  str T1,[T0,#TIM_CCR4]
 164 0818 65E0     	  b tv_isr_exit
 165 081a 0D29     	2: cmp T1,#13
 166 081c 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 081e 4FF0DB01 	   mov T1,#SERRATION 
 169 0822 0164     	   str T1,[T0,#TIM_CCR4]
 170 0824 5FE0     	   b tv_isr_exit   
 171 0826 1229     	3: cmp T1,#18
 172 0828 03D1     	   bne 4f 
 173              	// if even field full line  
 174 082a E16E     	   ldr T1,[UP,#VID_FIELD]
 175 082c 0029     	   cmp T1,#ODD_FIELD  
 176 082e 5AD0     	   beq tv_isr_exit 
 177 0830 01E0     	   b sync_end 
 178 0832 1329     	4: cmp T1,#19 
 179 0834 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0836 4FF00901 	   mov T1,#9
 182 083a 6166     	   str T1,[UP,#VID_CNTR]
ARM GAS  forth.s 			page 32


 183 083c 4FF4E171 	   mov T1,#HPULSE 
 184 0840 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0842 41F2D471 	   mov T1,#HPER 
 186 0846 C162     	   str T1,[T0,#TIM_ARR] 
 187 0848 4FF00101 	   mov T1,#ST_PREVID 
 188 084c A166     	   str T1,[UP,#VID_STATE]
 189 084e 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0850 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0852 48D4     	   bmi tv_isr_exit 
 194 0854 4FF00201 	   mov T1,#ST_VIDEO 
 195 0858 A166     	   str T1,[UP,#VID_STATE]
 196 085a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 085e C160     	   str T1,[T0,#TIM_DIER]
 198 0860 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0862 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0864 06D9     	   bls 1f 
 205 0866 4FF00301 	   mov T1,#ST_POSTVID 
 206 086a A166     	   str T1,[UP,#VID_STATE]
 207 086c 4FF00101 	   mov T1,#1 
 208 0870 C160     	   str T1,[T0,#TIM_DIER]
 209 0872 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0874 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0876 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 087a 4FF0A003 	   mov T3,#160
 214 087e 03FB01F1 	   mul T1,T3 
 215 0882 0844     	   add T0,T1  
 216 0884 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 088c 10F8012B 	2: ldrb T2,[T0],#1 
 222 0890 4FEA0222 	   lsl T2,#8 
 223 0894 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0896 AFF30080 	   nop.w 
 225 089a AFF30080 	   nop.w
 226 089e AFF30080 	   nop.w 
 227 08a2 AFF30080 	   nop.w 
 228 08a6 4FEA0212 	   lsl T2,#4  
 229 08aa 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08ac AFF30080 	   nop.w
 231 08b0 AFF30080 	   nop.w  
 232 08b4 013B     	   subs T3,#1
 233 08b6 E9D1     	   bne 2b  
 234 08b8 4FF47022 	   mov T2,#(15<<16) 
 235 08bc 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08be 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08c0 4FF48372 	   mov T2,#262
ARM GAS  forth.s 			page 33


 239 08c4 9142     	   cmp T1,T2
 240 08c6 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08c8 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08ca 11B9     	   cbnz T1, frame_end 
 244 08cc 40F6E931 	   mov T1,#SYNC_LINE
 245 08d0 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08d2 4FF00001 	   mov T1,#ST_VSYNC 
 248 08d6 A166     	   str T1,[UP,#VID_STATE]
 249 08d8 81EA0101 	   eor T1,T1 
 250 08dc 6166     	   str T1,[UP,#VID_CNTR]
 251 08de E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08e0 6FEA0101 	   mvn T1,T1  
 253 08e4 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08e6 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08e8 E0060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 08f8 47F8046D 		_PUSH 
 266 08fc 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0900 01F00ABD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0904 EC080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0914 47F8046D 		_PUSH 
 273 0918 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 091c 01F0FCBC 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0920 08090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 092c 47F8046D 	  _PUSH 
 280 0930 04F19406 	  ADD TOS,UP,#COL 
 281 0934 01F0F0BC 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0938 24090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0940 47F8046D 	  _PUSH 
ARM GAS  forth.s 			page 34


 287 0944 04F19006 	  ADD TOS,UP,#ROW 
 288 0948 01F0E6BC 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 094c 3C090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0958 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 095c 00FB06F6 	  mul TOS,T0 
 295 0960 01F0DABC 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0964 50090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0970 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0974 00FB06F6 	  mul TOS,T0 
 302 0978 01F0CEBC 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 097c 68090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0988 47F8046D 	  _PUSH 
 308 098c DFF88C65 	  ldr TOS,=font_6x8 
 309 0990 01F0C2BC 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0994 80090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 09a0 47F8046D 	  _PUSH 
 315 09a4 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 09a6 01F0B7BC 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09aa 98090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09b4 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09b6 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09ba 02FB00F0 	    mul T0,T2 
 330 09be 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09c2 1044     	    add T0,T2 
 332 09c4 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09c6 0344     	    add T3,T0 // T3 -> byte address 
ARM GAS  forth.s 			page 35


 334 09c8 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09ca 4FF00F02 	    mov T2,#15 // AND mask 
 336 09ce 11F0010F 	    tst T1,#1 
 337 09d2 01D0     	    beq 1f 
 338 09d4 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09d8 DFF84405 	1:  ldr T0,=plot_op 
 340 09dc D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09e0 05EA0205 	    and WP,T2 // mask out nibble 
 343 09e4 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09e8 11F0010F 	    tst T1,#1 
 345 09ec 01D1     	    bne 1f 
 346 09ee 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09f2 45EA0005 	1:  orr WP,T0  
 348 09f6 1D70     	    strb WP,[T3]
 349 09f8 1AE0     	    b 9f 
 350              	op_pen: 
 351 09fa 05EA0205 	    and WP,T2 
 352 09fe 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0a02 11F0010F 	    tst T1,#1
 354 0a06 01D1     	    bne 1f 
 355 0a08 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a0c 45EA0005 	1:	orr WP,T0 
 357 0a10 1D70     	    strb WP,[T3]
 358 0a12 0DE0     	    b 9f 
 359              	op_invert:
 360 0a14 85EA0205 	    eor WP,T2 
 361 0a18 1D70     	    strb WP,[T3]
 362 0a1a 09E0     	    b 9f 
 363              	op_xor:
 364 0a1c D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a20 11F0010F 	    tst T1,#1 
 366 0a24 01D1     	    bne 1f 
 367 0a26 4FEA0010 	    lsl T0,#4 
 368 0a2a 85EA0005 	1:  eor WP,T0 
 369 0a2e 1D70     	    strb WP,[T3]
 370 0a30 57F8046B 	9:  _POP 
 371 0a34 01F070BC 	    _NEXT 
 372              	
 373 0a38 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a3c AE090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a48 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a4a 0028     	    cmp T0,#0
 381 0a4c FCD1     	    bne 1b
 382 0a4e 01F063BC 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0a52 400A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
ARM GAS  forth.s 			page 36


 387 0a5c 80EA0000 	    eor T0,T0 
 388 0a60 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a64 40EA0100 	    orr T0,T1 
 390 0a68 4FEA0111 	    lsl T1,#4 
 391 0a6c 40EA0100 	    orr T0,T1 
 392 0a70 4FEA0021 	    lsl T1,T0,#8 
 393 0a74 40EA0100 	    orr T0,T1 
 394 0a78 4FEA0041 	    lsl T1,T0,#16
 395 0a7c 40EA0100 	    orr T0,T1 
 396 0a80 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a84 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a86 5050     	1:	str T0,[T2,T1]
 399 0a88 0439     	    subs T1,#4
 400 0a8a FCD1     	    bne 1b
 401 0a8c 1060     	    str T0,[T2]
 402 0a8e 80EA0000 	    eor T0,T0 
 403 0a92 C4F89000 	    str T0,[UP,#ROW]
 404 0a96 C4F89400 	    str T0,[UP,#COL]
 405 0a9a 01F03DBC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0a9e 560A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0aac 504700BF 	  _NEST
 412 0ab0 97240000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ab8 C9250000 	  _ADR DUPP  
 414 0abc 71250000 	  _ADR TOR 
 415 0ac0 AD260000 	  _ADR STAR
 416 0ac4 A1090000 	  _ADR VIDBUFF
 417 0ac8 8D260000 	  _ADR PLUS
 418 0acc 49250000 	  _ADR RFROM   
 419 0ad0 97240000 	  _DOLIT 0 
 419      00000000 
 420 0ad8 DD2F0000 	  _ADR FILL 
 421 0adc 1F230000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0ae0 A20A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0af0 504700BF 	    _NEST 
 429 0af4 A1090000 	    _ADR VIDBUFF 
 430 0af8 C9250000 	    _ADR DUPP 
 431 0afc 97240000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0b04 C9250000 	    _ADR DUPP 
 433 0b08 71250000 	    _ADR TOR 
 434 0b0c 8D260000 	    _ADR PLUS 
ARM GAS  forth.s 			page 37


 435 0b10 D9250000 	    _ADR SWAP 
 436 0b14 97240000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b1c 49250000 	    _ADR RFROM  
 438 0b20 9D260000 	    _ADR SUBB 
 439 0b24 952F0000 	    _ADR MOVE
 440 0b28 97240000 	    _DOLIT 24 
 440      18000000 
 441 0b30 AD0A0000 	    _ADR CLRLINE 
 442 0b34 1F230000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b38 E40A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b48 504700BF 	    _NEST 
 450 0b4c A1090000 	    _ADR VIDBUFF
 451 0b50 C9250000 	    _ADR DUPP 
 452 0b54 97240000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b5c 8D260000 	    _ADR PLUS 
 454 0b60 97240000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b68 97240000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b70 9D260000 	    _ADR SUBB  
 457 0b74 952F0000 	    _ADR MOVE
 458 0b78 97240000 	    _DOLIT 0 
 458      00000000 
 459 0b80 AD0A0000 	    _ADR CLRLINE
 460 0b84 1F230000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b88 3C0B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0b94 E34D     	    ldr WP,=SCROLLUP 
 469 0b96 45F00105 	    orr WP,#1
 470 0b9a 80EA0000 	    eor T0,T0 
 471 0b9e C4F89400 	    str T0,[UP,#COL]
 472 0ba2 D4F89000 	    ldr T0,[UP,#ROW]
 473 0ba6 1828     	    cmp T0,#24 
 474 0ba8 A2D0     	    beq SCROLLUP  
 475 0baa 00F10100 	    add T0,#1 
 476 0bae C4F89000 	    str T0,[UP,#ROW]
 477 0bb2 01F0B1BB 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
ARM GAS  forth.s 			page 38


 481              	// move cursor 1 char. right 
 482 0bb6 8C0B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bc0 D4F89400 	  ldr T0,[UP,#COL]
 484 0bc4 00F10100 	  add T0,#1
 485 0bc8 3528     	  cmp T0,#53
 486 0bca E3D5     	  bpl TV_CRLF  
 487 0bcc C4F89400 	  str T0,[UP,#COL]
 488 0bd0 01F0A2BB 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0bd4 BA0B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0be0 D4F89400 	    ldr T0,[UP,#COL]
 497 0be4 28B1     	    cbz T0,1f 
 498 0be6 A0F10100 	    sub T0,#1 
 499 0bea C4F89400 	    str T0,[UP,#COL]
 500 0bee 01F093BB 	    _NEXT 
 501 0bf2 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0bf6 38B1     	    cbz T0,9f
 503 0bf8 A0F10100 	    sub T0,#1
 504 0bfc C4F89000 	    str T0,[UP,#ROW]
 505 0c00 4FF03400 	    mov T0,#52 
 506 0c04 C4F89400 	    str T0,[UP,#COL]
 507 0c08 01F086BB 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c0c 4FF08000 	    mov T0,#128 
 513 0c10 06EA0006 	    and TOS,T0 
 514 0c14 4FEAD616 	    lsr TOS,#7
 515 0c18 01F07EBB 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c1c 3868     	  ldr T0,[DSP]
 520 0c1e 00F10100 	  add T0,#1 
 521 0c22 3860     	  str T0,[DSP]
 522 0c24 01F078BB 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c28 4FEA4606 	    lsl TOS,#1
 527 0c2c 01F074BB 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
ARM GAS  forth.s 			page 39


 534              	CHAR_ROW:  
 535 0c30 504700BF 	    _NEST 
 536 0c34 97240000 	    _DOLIT 5 
 536      05000000 
 537 0c3c 71250000 	    _ADR TOR 
 538 0c40 71250000 	1:  _ADR TOR 
 539 0c44 01280000 	    _ADR DDUP 
 540 0c48 5D250000 	    _ADR RAT
 541 0c4c 0D0C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c50 B5090000 	    _ADR PLOT 
 543 0c54 1D0C0000 	    _ADR INCR_X 
 544 0c58 49250000 	    _ADR RFROM 
 545 0c5c 290C0000 	    _ADR NEXT_PIXEL
 546 0c60 B9240000 	    _DONXT 1b
 546      400C0000 
 547 0c68 ED270000 	    _ADR TDROP 
 548 0c6c 1F230000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0c70 A6F12006 	   sub TOS,#32
 553 0c74 4FF00800 	   mov T0,#8 
 554 0c78 00FB06F6 	   mul TOS,T0 
 555 0c7c A748     	   ldr T0,=font_6x8
 556 0c7e 0644     	   add TOS,T0 
 557 0c80 01F04ABB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0c84 D80B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0c90 504700BF 	    _NEST
 565 0c94 C9250000 	    _ADR DUPP 
 566 0c98 97240000 	    _DOLIT 32 
 566      20000000 
 567 0ca0 1D290000 	    _ADR ULESS
 568 0ca4 D7240000 	    _QBRAN 1f
 568      B40C0000 
 569 0cac EB240000 	    _BRAN CTRL_KEY
 569      180D0000 
 570 0cb4 710C0000 	1:  _ADR CHAR_FONT 
 571 0cb8 2D090000 	    _ADR CURSOR_COL 
 572 0cbc 1D250000 	    _ADR AT
 573 0cc0 71090000 	    _ADR COLX  // x coord 
 574 0cc4 41090000 	    _ADR CURSOR_ROW 
 575 0cc8 1D250000 	    _ADR AT    
 576 0ccc 59090000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0cd0 B1270000 	    _ADR ROT  // TEST 
 578 0cd4 97240000 	    _DOLIT 7   
 578      07000000 
 579 0cdc 71250000 	    _ADR TOR  
 580 0ce0 71250000 	1:  _ADR TOR  // { x y }
 581 0ce4 01280000 	    _ADR DDUP  // { x y x y }
 582 0ce8 5D250000 	    _ADR RAT 
ARM GAS  forth.s 			page 40


 583 0cec 3D250000 	    _ADR CAT   // { x y x y r }
 584 0cf0 310C0000 	    _ADR CHAR_ROW 
 585 0cf4 E9260000 	    _ADR ONEP // {x y' }
 586 0cf8 49250000 	    _ADR RFROM 
 587 0cfc E9260000 	    _ADR ONEP // {x y' c-adr' }
 588 0d00 B9240000 	    _DONXT 1b
 588      E00C0000 
 589 0d08 ED270000 	    _ADR TDROP  
 590 0d0c C10B0000 	    _ADR RIGHT
 591 0d10 010E0000 	9:  _ADR SHOW_CURSOR 
 592 0d14 1F230000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0d18 890E0000 	    _ADR HIDE_CURSOR
 595 0d1c C9250000 	    _ADR DUPP 
 596 0d20 97240000 	    _DOLIT BKSPP  
 596      08000000 
 597 0d28 E5280000 	    _ADR EQUAL 
 598 0d2c D7240000 	    _QBRAN 1f 
 598      440D0000 
 599 0d34 E10D0000 	    _ADR BACK_SPACE 
 600 0d38 B9250000 	8:  _ADR DROP 
 601 0d3c EB240000 	    _BRAN 9b 
 601      100D0000 
 602 0d44 C9250000 	1:  _ADR DUPP 
 603 0d48 97240000 	    _DOLIT CRR 
 603      0D000000 
 604 0d50 E5280000 	    _ADR EQUAL 
 605 0d54 D7240000 	    _QBRAN 1f 
 605      680D0000 
 606 0d5c 890D0000 	    _ADR CAR_RET
 607 0d60 EB240000 	    _BRAN 8b
 607      380D0000 
 608 0d68 97240000 	1:  _DOLIT LF 
 608      0A000000 
 609 0d70 E5280000 	    _ADR EQUAL 
 610 0d74 D7240000 	    _QBRAN 9b 
 610      100D0000 
 611 0d7c A10D0000 	    _ADR LN_FEED
 612 0d80 EB240000 	    _BRAN 9b  
 612      100D0000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0d88 504700BF 	   _NEST
 620 0d8c 97240000 	   _DOLIT 0 
 620      00000000 
 621 0d94 2D090000 	   _ADR CURSOR_COL 
 622 0d98 09250000 	   _ADR STORE 
 623 0d9c 1F230000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
ARM GAS  forth.s 			page 41


 629              	LN_FEED:
 630 0da0 504700BF 	    _NEST 
 631 0da4 41090000 	    _ADR CURSOR_ROW 
 632 0da8 1D250000 	    _ADR AT 
 633 0dac C9250000 	    _ADR DUPP 
 634 0db0 97240000 	    _DOLIT 24 
 634      18000000 
 635 0db8 35260000 	    _ADR XORR 
 636 0dbc D7240000 	    _QBRAN 1f
 636      D40D0000 
 637 0dc4 E9260000 	    _ADR ONEP 
 638 0dc8 41090000 	    _ADR CURSOR_ROW 
 639 0dcc 09250000 	    _ADR STORE 
 640 0dd0 1F230000 	    _UNNEST    
 641 0dd4 B9250000 	1:  _ADR DROP 
 642 0dd8 F10A0000 	    _ADR SCROLLUP 
 643 0ddc 1F230000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 0de0 504700BF 	  _NEST 
 652 0de4 E10B0000 	  _ADR LEFT 
 653 0de8 010E0000 	  _ADR SHOW_CURSOR
 654 0dec 1F230000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 0df0 880C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 0e00 504700BF 	    _NEST 
 663 0e04 97240000 	    _DOLIT 0xFF
 663      FF000000 
 664 0e0c 41090000 	0:  _ADR CURSOR_ROW
 665 0e10 1D250000 	    _ADR AT  
 666 0e14 E9260000 	    _ADR ONEP 
 667 0e18 59090000 	    _ADR ROWY 
 668 0e1c 97240000 	    _DOLIT BPR
 668      A0000000 
 669 0e24 AD260000 	    _ADR STAR
 670 0e28 97240000 	    _DOLIT BPR  
 670      A0000000 
 671 0e30 9D260000 	    _ADR SUBB 
 672 0e34 2D090000 	    _ADR CURSOR_COL
 673 0e38 1D250000 	    _ADR AT 
 674 0e3c 71090000 	    _ADR COLX 
 675 0e40 8D270000 	    _ADR TWOSL  
 676 0e44 8D260000 	    _ADR PLUS
 677 0e48 A1090000 	    _ADR VIDBUFF
ARM GAS  forth.s 			page 42


 678 0e4c 8D260000 	    _ADR PLUS
 679 0e50 97240000 	    _DOLIT 2
 679      02000000 
 680 0e58 71250000 	    _ADR TOR  
 681 0e5c 01280000 	1:  _ADR DDUP 
 682 0e60 29250000 	    _ADR CSTOR 
 683 0e64 E9260000 	    _ADR ONEP 
 684 0e68 B9240000 	    _DONXT 1b
 684      5C0E0000 
 685 0e70 D9270000 	2:  _ADR DDROP // drop 3 elements 
 686 0e74 1F230000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 0e78 F40D0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 0e88 504700BF 	    _NEST 
 694 0e8c F9080000 	    _ADR BACKCOLOR 
 695 0e90 1D250000 	    _ADR AT 
 696 0e94 C9250000 	    _ADR DUPP  
 697 0e98 97240000 	    _DOLIT 4 
 697      04000000 
 698 0ea0 7D260000 	    _ADR LSHIFT 
 699 0ea4 21260000 	    _ADR ORR 
 700 0ea8 EB240000 	    _BRAN 0b
 700      0C0E0000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 0eb0 7C0E0000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 0ebc 352E     	    cmp TOS,#53
 706 0ebe 01D4     	    bmi 1f 
 707 0ec0 4FF03406 	    mov TOS,#52
 708 0ec4 C4F89460 	1:  str TOS,[UP,#COL]
 709 0ec8 57F8046B 	    _POP
 710 0ecc 192E     	    cmp TOS,#25
 711 0ece 01D4     	    bmi 1f 
 712 0ed0 4FF01806 	    mov TOS,#24 
 713 0ed4 C4F89060 	1:  str TOS,[UP,#ROW]
 714 0ed8 57F8046B 	    _POP 
 715 0edc 01F01CBA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 0ee0 B40E0000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 0eec 504700BF 	    _NEST 
 721 0ef0 0D2F0000 	    _ADR PAD 
 722 0ef4 C9250000 	    _ADR DUPP 
 723 0ef8 E9260000 	    _ADR ONEP 
ARM GAS  forth.s 			page 43


 724 0efc 97240000 	    _DOLIT 53
 724      35000000 
 725 0f04 F93B0000 	    _ADR ACCEP
 726 0f08 D9250000 	    _ADR SWAP 
 727 0f0c B9250000 	    _ADR DROP 
 728 0f10 ED250000 	    _ADR OVER 
 729 0f14 29250000 	    _ADR CSTOR  
 730 0f18 1F230000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
ARM GAS  forth.s 			page 44


 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
ARM GAS  forth.s 			page 45


 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
ARM GAS  forth.s 			page 46


 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
ARM GAS  forth.s 			page 47


  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
ARM GAS  forth.s 			page 48


  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
ARM GAS  forth.s 			page 49


  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
ARM GAS  forth.s 			page 50


 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f28 1C61     	   .byte 0x1c,'a' 
   9 0f2a 3262     	   .byte 0x32,'b'
  10 0f2c 2163     	   .byte 0x21,'c'
  11 0f2e 2364     	   .byte 0x23,'d'
  12 0f30 2465     	   .byte 0x24,'e'
  13 0f32 2B66     	   .byte 0x2b,'f'
  14 0f34 3467     	   .byte 0x34,'g'
  15 0f36 3368     	   .byte 0x33,'h'
  16 0f38 4369     	   .byte 0x43,'i'
  17 0f3a 3B6A     	   .byte 0x3B,'j'
  18 0f3c 426B     	   .byte 0x42,'k'
  19 0f3e 4B6C     	   .byte 0x4b,'l'
  20 0f40 3A6D     	   .byte 0x3a,'m'
  21 0f42 316E     	   .byte 0x31,'n'
  22 0f44 446F     	   .byte 0x44,'o'
  23 0f46 4D70     	   .byte 0x4d,'p'
  24 0f48 1571     	   .byte 0x15,'q'
  25 0f4a 2D72     	   .byte 0x2d,'r'
  26 0f4c 1B73     	   .byte 0x1b,'s'
  27 0f4e 2C74     	   .byte 0x2c,'t'
  28 0f50 3C75     	   .byte 0x3c,'u'
  29 0f52 2A76     	   .byte 0x2a,'v'
  30 0f54 1D77     	   .byte 0x1d,'w'
  31 0f56 2278     	   .byte 0x22,'x'
  32 0f58 3579     	   .byte 0x35,'y'
  33 0f5a 1A7A     	   .byte 0x1a,'z'
  34 0f5c 4530     	   .byte 0x45,'0'
  35 0f5e 1631     	   .byte 0x16,'1'
  36 0f60 1E32     	   .byte 0x1e,'2'
  37 0f62 2633     	   .byte 0x26,'3'
  38 0f64 2534     	   .byte 0x25,'4'
  39 0f66 2E35     	   .byte 0x2e,'5'
  40 0f68 3636     	   .byte 0x36,'6'
  41 0f6a 3D37     	   .byte 0x3d,'7'
  42 0f6c 3E38     	   .byte 0x3e,'8'
  43 0f6e 4639     	   .byte 0x46,'9'
  44 0f70 0E60     	   .byte 0x0e,'`'
  45 0f72 4E2D     	   .byte 0x4e,'-'
  46 0f74 553D     	   .byte 0x55,'='
  47 0f76 5D5C     	   .byte 0x5d,'\\'
  48 0f78 545B     	   .byte 0x54,'['
  49 0f7a 5B5D     	   .byte 0x5b,']'
ARM GAS  forth.s 			page 51


  50 0f7c 4C3B     	   .byte 0x4c,';'
  51 0f7e 5227     	   .byte 0x52,'\''
  52 0f80 412C     	   .byte 0x41,','
  53 0f82 492E     	   .byte 0x49,'.'
  54 0f84 7C2A     	   .byte 0x7c,'*'
  55 0f86 792B     	   .byte 0x79,'+'
  56 0f88 2920     	   .byte 0x29,' '
  57 0f8a 5A0D     	   .byte SC_ENTER,CRR 
  58 0f8c 6608     	   .byte SC_BKSP,BKSPP 
  59 0f8e 0D09     	   .byte SC_TAB,9
  60 0f90 761B     	   .byte SC_ESC,27
  61 0f92 119E     	   .byte SC_LALT,VK_LALT 
  62 0f94 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0f96 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0f98 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0f9a 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0f9c 5800     	   .byte SC_CAPS,0
  67 0f9e 0580     	   .byte SC_F1,VK_F1
  68 0fa0 0681     	   .byte SC_F2,VK_F2
  69 0fa2 0482     	   .byte SC_F3,VK_F3
  70 0fa4 0C83     	   .byte SC_F4,VK_F4
  71 0fa6 0384     	   .byte SC_F5,VK_F5
  72 0fa8 0B85     	   .byte SC_F6,VK_F6
  73 0faa 8386     	   .byte SC_F7,VK_F7
  74 0fac 0A87     	   .byte SC_F8,VK_F8
  75 0fae 0188     	   .byte SC_F9,VK_F9
  76 0fb0 098A     	   .byte SC_F10,VK_F10
  77 0fb2 788B     	   .byte SC_F11,VK_F11
  78 0fb4 078C     	   .byte SC_F12,VK_F12
  79 0fb6 7030     	   .byte SC_KP0,'0'
  80 0fb8 6931     	   .byte SC_KP1,'1'
  81 0fba 7232     	   .byte SC_KP2,'2'
  82 0fbc 7A33     	   .byte SC_KP3,'3'
  83 0fbe 6B34     	   .byte SC_KP4,'4'
  84 0fc0 7335     	   .byte SC_KP5,'5'
  85 0fc2 7436     	   .byte SC_KP6,'6'
  86 0fc4 6C37     	   .byte SC_KP7,'7'
  87 0fc6 7538     	   .byte SC_KP8,'8'
  88 0fc8 7D39     	   .byte SC_KP9,'9'
  89 0fca 7C2A     	   .byte SC_KPMUL,'*'
  90 0fcc 4A2F     	   .byte SC_KPDIV,'/'
  91 0fce 792B     	   .byte SC_KPPLUS,'+'
  92 0fd0 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fd2 712E     	   .byte SC_KPDOT,'.'
  94 0fd4 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fd6 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fd8 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fda 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fdc 6141     	   .byte 'a','A'
 102 0fde 6242     	   .byte 'b','B'
 103 0fe0 6343     	   .byte 'c','C'
 104 0fe2 6444     	   .byte 'd','D'
 105 0fe4 6545     	   .byte 'e','E'
 106 0fe6 6646     	   .byte 'f','F'
ARM GAS  forth.s 			page 52


 107 0fe8 6747     	   .byte 'g','G'
 108 0fea 6848     	   .byte 'h','H'
 109 0fec 6949     	   .byte 'i','I'
 110 0fee 6A4A     	   .byte 'j','J'
 111 0ff0 6B4B     	   .byte 'k','K'
 112 0ff2 6C4C     	   .byte 'l','L'
 113 0ff4 6D4D     	   .byte 'm','M'
 114 0ff6 6E4E     	   .byte 'n','N'
 115 0ff8 6F4F     	   .byte 'o','O'
 116 0ffa 7050     	   .byte 'p','P'
 117 0ffc 7151     	   .byte 'q','Q'
 118 0ffe 7252     	   .byte 'r','R'
 119 1000 7353     	   .byte 's','S'
 120 1002 7454     	   .byte 't','T'
 121 1004 7555     	   .byte 'u','U'
 122 1006 7656     	   .byte 'v','V'
 123 1008 7757     	   .byte 'w','W'
 124 100a 7858     	   .byte 'x','X'
 125 100c 7959     	   .byte 'y','Y'
 126 100e 7A5A     	   .byte 'z','Z'
 127 1010 3121     	   .byte '1','!'
 128 1012 3240     	   .byte '2','@'
 129 1014 3323     	   .byte '3','#'
 130 1016 3424     	   .byte '4','$'
 131 1018 3525     	   .byte '5','%'
 132 101a 365E     	   .byte '6','^'
 133 101c 3726     	   .byte '7','&'
 134 101e 382A     	   .byte '8','*'
 135 1020 3928     	   .byte '9','('
 136 1022 3029     	   .byte '0',')'
 137 1024 2D5F     	   .byte '-','_'
 138 1026 3D2B     	   .byte '=','+'
 139 1028 607E     	   .byte '`','~'
 140 102a 2722     	   .byte '\'','"'
 141 102c 2C3C     	   .byte ',','<'
 142 102e 2E3E     	   .byte '.','>'
 143 1030 2F3F     	   .byte '/','?'
 144 1032 5C7C     	   .byte '\\','|'
 145 1034 3B3A     	   .byte ';',':'
 146 1036 5B7B     	   .byte '[','{'
 147 1038 5D7D     	   .byte ']','}'
 148 103a 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 103c 315C     	   .byte '1','\\'
 153 103e 3240     	   .byte '2','@'
 154 1040 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 1042 363F     	   .byte '6','?'
 158 1044 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 1046 397B     	   .byte '9','{'
 161 1048 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
ARM GAS  forth.s 			page 53


 164 104a 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 104c 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 104e 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1050 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1052 11A3     	    .byte SC_RALT,VK_RALT
 172 1054 2F97     	    .byte SC_APPS,VK_APPS
 173 1056 758D     	    .byte SC_UP,VK_UP
 174 1058 728E     	    .byte SC_DOWN,VK_DOWN
 175 105a 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 105c 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 105e 7095     	    .byte SC_INSERT,VK_INSERT
 178 1060 6C91     	    .byte SC_HOME,VK_HOME
 179 1062 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1064 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1066 717F     	    .byte SC_DEL,VK_DELETE
 182 1068 6992     	    .byte SC_END,VK_END
 183 106a 4A2F     	    .byte SC_KPDIV,'/'
 184 106c 5A0D     	    .byte SC_KPENTER,'\r'
 185 106e 1200     	    .byte 0x12,0
 186 1070 7C00     	    .byte 0x7c,0
 187 1072 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1074 6303     	   .byte 'c', VK_CTRL_C 
 193 1076 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1078 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 107a 27A2     	   .byte SC_RGUI,VK_RGUI
 196 107c 11A3     	   .byte SC_RALT,VK_RALT
 197 107e 2F97     	   .byte SC_APPS,VK_APPS
 198 1080 7095     	   .byte SC_INSERT,VK_INSERT
 199 1082 6C91     	   .byte SC_HOME,VK_HOME
 200 1084 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1086 717F     	   .byte SC_DEL,VK_DELETE
 202 1088 6992     	   .byte SC_END,VK_END
 203 108a 7A94     	   .byte SC_PGDN,VK_PGDN
 204 108c 758D     	   .byte SC_UP,VK_UP
 205 108e 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1090 728E     	   .byte SC_DOWN,VK_DOWN
 207 1092 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1094 4A2F     	   .byte SC_KPDIV,'/'
 209 1096 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1098 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 109a 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 109c 119E     	   .byte SC_LALT,VK_LALT
 213 109e 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 10a0 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 10a2 761B     	   .byte SC_ESC,VK_ESC
 216 10a4 779A     	   .byte SC_NUM,VK_NLOCK
 217 10a6 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10a8 0000     	   .byte 0,0
 219              	
 220              	
ARM GAS  forth.s 			page 54


  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10aa 00BF     	    _GBL_FUNC kbd_isr 
  79 10ac 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10b4 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10b8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10ba 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10c2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10c6 10F0020F 	    tst r0,#KBD_TX 
  85 10ca 40F08480 	    bne send_bit  
  86 10ce 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10d0 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10d4 01F10102 	    add r2,r1,#1
  89 10d8 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10dc 0029     	    cmp r1,#0
  91 10de 15D0     	    beq start_bit 
  92 10e0 0929     	    cmp r1,#9 
ARM GAS  forth.s 			page 55


  93 10e2 25D0     	    beq parity_bit 
  94 10e4 0A29     	    cmp r1,#10 
  95 10e6 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10e8 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10ec 4FEA5202 	    lsr r2,#1 
  99 10f0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 10f4 07D0     	    beq 1f 
 101 10f6 42F08002 	    orr r2,#(1<<7)
 102 10fa 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 10fe 00F10100 	    add r0,#1 
 104 1102 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 1106 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 110a 63E0     	    b 9f         
 107              	start_bit:
 108 110c 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1110 60D1     	    bne 9f // not a start bit 
 110 1112 80EA0000 	    eor r0,r0 
 111 1116 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 111a 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 111e 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1122 6FF00101 	    mvn r1,#1
 115 1126 00EA0100 	    and r0,r1 // clear error flag 
 116 112a 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 112e 51E0     	    b 9f 
 118              	parity_bit:
 119 1130 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1134 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1138 4CD0     	    beq 9f  
 122 113a 01F10101 	    add r1,#1 
 123 113e 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 1142 47E0     	    b 9f      
 125              	stop_bit:
 126 1144 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1148 40D0     	    beq 8f // error stop bit expected 
 128 114a 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 114e 11F0010F 	    tst r1,#1 
 130 1152 3BD0     	    beq 8f // error parity
 131 1154 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1158 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 115c E028     	    cmp r0,#XT_KEY
 134 115e 04D1     	    bne 1f
 135 1160 41F04001 	    orr r1,#KBD_F_XT
 136 1164 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1168 30E0     	    b 8f  
 138 116a 11F0800F 	1:  tst r1,#KBD_F_REL
 139 116e 14D0     	    beq store_code
 140 1170 5828     	    cmp r0,#SC_CAPS
 141 1172 04D1     	    bne 1f
 142 1174 81F00401 	    eor r1,#KBD_F_CAPS
 143 1178 41F00101 	    orr r1,#KBD_F_CTGL 
 144 117c 06E0     	    b 2f 
 145 117e 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1188 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 118c 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
ARM GAS  forth.s 			page 56


 148 1190 01EA0201 	    and r1,r2
 149 1194 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 1198 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 119a F028     	    cmp r0,#KEY_REL
 154 119c 04D1     	    bne 1f
 155              	// set release flags 
 156 119e 41F08001 	    orr r1,#KBD_F_REL 
 157 11a2 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 11a6 11E0     	    b 8f     
 159 11a8 0146     	1:  mov r1,r0 
 160 11aa 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11b4 0AD1     	    bne 8f // was async key 
 162 11b6 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11ba 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11be 1154     	    strb r1,[r2,r0]
 165 11c0 00F10100 	    add r0,#1
 166 11c4 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11c8 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11cc 80EA0000 	8:  eor r0,r0 
 169 11d0 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11d4 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11d6 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11da 01F10100 	    add r0,r1,#1
 182 11de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11e2 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11e6 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11ea 0829     	1:  cmp r1,#8 
 187 11ec 15D0     	    beq send_parity 
 188 11ee 0929     	    cmp r1,#9 
 189 11f0 1CD0     	    beq send_stop
 190 11f2 0A29     	    cmp r1,#10
 191 11f4 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 11f6 10F0010F 	    tst r0,#1
 194 11fa 4FEA5000 	    lsr r0,#1
 195 11fe 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1202 02D1     	    bne 1f 
 197 1204 4FEA0242 	    lsl r2,#16
 198 1208 05E0     	    b 2f  
 199 120a 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 120e 00F10100 	    add r0,#1 
 201 1212 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 1216 9A61     	2:  str r2,[R3,#GPIO_BSRR]
ARM GAS  forth.s 			page 57


 203 1218 1CE0     	    b 9f 
 204              	send_parity:
 205 121a 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 121e 10F0010F 	    tst r0,#1
 207 1222 01D0     	    beq 1f 
 208 1224 4FEA0242 	    lsl r2,#16
 209 1228 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 122a 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 122c 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 122e 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1232 1960     	    str r1,[r3,#GPIO_MODER]
 217 1234 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1236 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 123a 6FF00201 	    mvn r1,#KBD_TX 
 221 123e 00EA0100 	    and r0,r1 
 222 1242 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1244 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1248 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 124c 80EA0000 	    eor r0,r0 
 226 1250 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1254 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1256 02B4     	    push {r1}
 238 1258 DFF86414 	    ldr r1,=async_keys
 239 125c 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1266 02BC     	    pop {r1}
 241 1268 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 126a 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1274 FF28     	    cmp r0,#255
ARM GAS  forth.s 			page 58


 256 1276 01D1     	    bne set_async_key 
 257 1278 0020     	    movs r0,#0 
 258 127a 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 127c 06B4     	    push {r1,r2}
 262 127e 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1282 DFF84014 	    ldr r1,=async_jump 
 264 1286 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 128a 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 128e 04E0     	    b set_reset
 268              	ctrl_key:
 269 1290 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1294 01E0     	    b set_reset 
 271              	alt_key:
 272 1296 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 129a 12F0800F 	    tst r2,#KBD_F_REL 
 275 129e 04D0     	    beq 1f 
 276 12a0 6FEA0000 	    mvn r0,r0
 277 12a4 02EA0002 	    and r2,r0
 278 12a8 01E0     	    b 2f
 279 12aa 42EA0002 	1:  orr r2,r0 
 280 12ae 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12b2 5FF0FF30 	    movs r0,#-1
 282 12b6 06BC     	9:  pop {r1,r2}
 283 12b8 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12ba 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12bc 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12be 1401     	    .byte SC_LCTRL,1  // left control 
 290 12c0 1401     	    .byte SC_RCTRL,1  // right control 
 291 12c2 1102     	    .byte SC_LALT,2  // left alt 
 292 12c4 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12c6 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12c8 00       	    .byte 0 // shift  key 
 297 12c9 03       	    .byte (ctrl_key-shift_key)/2
 298 12ca 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12cb 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 12cc 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12d4 1846     	    mov r0,r3 
 311 12d6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
ARM GAS  forth.s 			page 59


 312 12da 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12de 00B5FFF7 	    _CALL gpio_config
 313      27F85DF8 
 313      04EB
 314 12e8 1846     	    mov r0,r3 
 315 12ea 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12ee 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12f2 00B5FFF7 	    _CALL gpio_config
 317      1DF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 12fc 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1304 4FF40050 	    mov r0,#(2<<12)
 321 1308 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 130a 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1312 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1316 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1318 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 131a 80EA0000 	   eor r0,r0 
 328 131e C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1322 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1326 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 132a 4FF00101 	   mov r1,#1 
 333 132e 00B5FEF7 	   _CALL nvic_set_priority
 333      BAFF5DF8 
 333      04EB
 334 1338 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 133c 00B5FEF7 	   _CALL nvic_enable_irq 
 335      CCFF5DF8 
 335      04EB
 336 1346 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1348 E40E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1358 47F8046D 	    _PUSH 
 342 135c 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1360 06F0FC06 	    and TOS,#0xFC  
 344 1364 00F0D8BF 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1368 0EB4     	    push {T1,T2,T3}
 352 136a 80EA0000 	    eor T0,T0  
 353 136e 04F17803 	    add T3,UP,#KBD_QUEUE
 354 1372 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1376 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
ARM GAS  forth.s 			page 60


 356 137a 9142     	    cmp T1,T2 
 357 137c 06D0     	    beq 2f  
 358 137e 585C     	    ldrb T0,[T3,T1]
 359 1380 01F10101 	    add T1,#1 
 360 1384 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1388 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 138c 0EBC     	2:  pop {T1,T2,T3}
 363 138e 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1390 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 139a 0000     	    movs T0,T0
 368 139c F8D0     	    beq wait_code  
 369 139e 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 13a0 04B4     	    push {T2}
 380 13a2 11F8012B 	1:  ldrb T2,[T1],#1
 381 13a6 22B1     	    cbz T2,2f 
 382 13a8 8242     	    cmp T2,T0
 383 13aa 02D0     	    beq 2f 
 384 13ac 01F10101 	    add T1,#1 
 385 13b0 F7E7     	    b 1b 
 386 13b2 0878     	2:  ldrb T0,[T1]
 387 13b4 0000     	    movs T0,T0 // set/reset zero flag 
 388 13b6 04BC     	9:  pop {T2}
 389 13b8 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13ba 4C130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 13c8 47F8046D 	    _PUSH 
 398 13cc 86EA0606 	    eor TOS,TOS 
 399 13d0 BD49     	    ldr T1,=sc_ascii // translation table
 400 13d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13d6 4FF04002 	    mov T2,#KBD_F_XT 
 402 13da 1042     	    tst T0,T2
 403 13dc 00D0     	    beq 1f
 404 13de BB49     	    ldr T1,=extended // extended code translation
 405 13e0 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
ARM GAS  forth.s 			page 61


 406 13ea 98B1     	    cbz T0,inkey_exit
 407 13ec E128     	    cmp T0,#XT2_KEY // pause 
 408 13ee 13D0     	    beq pause_key
 409 13f0 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 13fa 0646     	    mov TOS,T0
 411 13fc 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1406 032E     	    cmp TOS,#VK_CTRL_C 
 413 1408 3EF464AE 	    beq user_reboot 
 414 140c 47F8046D 	    _PUSH 
 415 1410 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1414 00F080BF 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1418 4FF00701 	    mov T1,#7 
 420 141c 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1426 0139     	    subs T1,#1
 422 1428 F8D1     	    bne 1b 
 423 142a 00F075BF 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 142e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1432 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1436 06D1     	    bne shift_down 
 431 1438 10F0200F 	    tst T0,#KBD_F_ALT  
 432 143c 06D1     	    bne altchar_down 
 433 143e 10F0100F 	    tst T0,#KBD_F_CTRL
 434 1442 06D1     	    bne ctrl_down 
 435 1444 0DE0     	    b 9f 
 436              	shift_down:
 437 1446 3046     	    mov T0,TOS 
 438 1448 A149     	    ldr T1,=shifted 
 439 144a 04E0     	    b 8f 
 440              	altchar_down:
 441 144c 3046     	    mov T0,TOS 
 442 144e A149     	    ldr T1,=altchar
 443 1450 01E0     	    b 8f
 444              	ctrl_down:
 445 1452 3046     	    mov T0,TOS 
 446 1454 A049     	    ldr T1,=controls 
 447 1456 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1460 0646     	    mov TOS,T0
 449 1462 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 146c 7047     	    _RET 
 451              	
 452              	do_capslock:
ARM GAS  forth.s 			page 62


 453 146e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1472 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1476 0BD0     	    beq 9f 
 456 1478 412E     	    cmp TOS,#'A'
 457 147a 09D4     	    bmi 9f 
 458 147c 5B2E     	    cmp TOS,#'Z'+1 
 459 147e 03D4     	    bmi 3f 
 460 1480 612E     	    cmp TOS,#'a'
 461 1482 05D4     	    bmi 9f 
 462 1484 7B2E     	    cmp TOS,#'z'+1
 463 1486 03D5     	    bpl 9f 
 464 1488 4FF02000 	3:  mov T0,#(1<<5)
 465 148c 86EA0006 	    eor TOS,T0 
 466 1490 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1492 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1494 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 1496 0128     	    cmp r0,ST_PREVID 
 484 1498 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 149a 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 149e 00B5FEF7 	    _CALL nvic_disable_irq
 487      30FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 14a8 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14b0 1846     	    mov r0,r3 
 491 14b2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14b6 4FF01102 	    mov r2,#OUTPUT_OD
 493 14ba 00B5FEF7 	    _CALL gpio_config 
 493      39FF5DF8 
 493      04EB
 494 14c4 1846     	    mov r0,r3 
 495 14c6 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14ca 82EA0202 	    eor r2,r2 
 497 14ce 00B5FEF7 	    _CALL gpio_out 
 497      85FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 14d8 4FF4E150 	    mov r0,#150*48
 500 14dc 0138     	1:  subs r0,#1 
 501 14de FDD1     	    bne 1b
 502 14e0 01BC     	    pop {r0}
ARM GAS  forth.s 			page 63


 503 14e2 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14e6 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14ea 40F00200 	    orr r0,#KBD_TX 
 506 14ee 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14f2 80EA0000 	    eor r0,r0 
 508 14f6 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 14fa 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 14fe 1846     	    mov r0,r3 
 513 1500 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1504 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1508 00B5FEF7 	    _CALL gpio_config 
 515      12FF5DF8 
 515      04EB
 516 1512 1846     	    mov r0,r3 
 517 1514 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1518 82EA0202 	    eor r2,r2 
 519 151c 00B5FEF7 	    _CALL gpio_out
 519      5EFF5DF8 
 519      04EB
 520              	// release clock line 
 521 1526 1846     	    mov r0,r3 
 522 1528 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 152c 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1530 00B5FEF7 	    _CALL gpio_config
 524      FEFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 153a 4FF00A00 	    mov r0,#10
 528 153e E060     	    str r0,[UP,#CD_TIMER]
 529 1540 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 1542 20B1     	    cbz r0, 4f 
 531 1544 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1548 10F0020F 	    tst r0,#KBD_TX
 533 154c F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 154e 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1552 00B5FEF7 	    _CALL nvic_enable_irq
 536      C1FE5DF8 
 536      04EB
 537 155c 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 1560 20F00201 	    bic r1,r0,#KBD_TX
 539 1564 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1568 00F00200 	    and r0,#KBD_TX
 541 156c 48B1     	    cbz r0, 5f
 542 156e 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1570 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1574 1960     	    str r1,[r3,#GPIO_MODER]
 545 1576 80EA0000 	    eor r0,r0 
 546 157a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 157e 6FEA0000 	    mvn r0,r0   
 548 1582 0EBC     	5:  pop {r1,r2,r3}
 549 1584 7047     	    _RET 
 550              	
 551              	 
ARM GAS  forth.s 			page 64


 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1586 80EA0000 	    eor T0,T0 
 555 158a C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 158e C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1592 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1596 6FF00301 	    mvn T1,#3
 559 159a 00EA0100 	    and T0,T1 
 560 159e 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 15a2 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 15a4 BE130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15b0 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15b4 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15be B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15c0 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15ca 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 15d4 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15d6 EBD0     	    beq 1b 
 575 15d8 4FF4FA70 	    mov T0,#500 
 576 15dc E060     	    str T0,[UP,#CD_TIMER]
 577 15de 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 15e8 10B9     	    cbnz T0,3f
 579 15ea E068     	    ldr T0,[UP,#CD_TIMER]
 580 15ec 0028     	    cmp T0,#0 
 581 15ee F6D1     	    bne 2b 
 582 15f0 47F8046D 	3:  _PUSH 
 583 15f4 0646     	    mov TOS,T0  
 584 15f6 00F08FBE 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 15fa A8150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1608 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1612 4FF0ED00 	     mov T0,#KBD_CMD_LED 
ARM GAS  forth.s 			page 65


 594 1616 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1620 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 162a FE28     	    cmp T0,#KBD_CMD_RESEND
 597 162c ECD0     	    beq 1b
 598 162e FA28     	    cmp T0,#KBD_ACK  
 599 1630 F6D1     	    bne 2b 
 600 1632 3046     	2:  mov T0,TOS 
 601 1634 00F00700 	    and T0,#7 
 602 1638 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1642 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 164c FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 164e F0D0     	    beq 2b
 606 1650 FA28     	    cmp T0,#KBD_ACK 
 607 1652 F6D1     	    bne 3b  
 608 1654 57F8046B 	    _POP 
 609 1658 00F05EBE 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 165c FE150000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 166c 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1670 10F0010F 	    tst T0,#1
 619 1674 01D1     	    bne 1f 
 620 1676 00F04FBE 	    _NEXT 
 621 167a 47F8046D 	1: _PUSH 
 622 167e 6FF00101 	    mvn T1,#1 
 623 1682 00EA0100 	    and T0,T1 
 624 1686 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 168a 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 168e 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1696 60160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 16a4 504700BF 	    _NEST
 635 16a8 6D160000 	1:  _ADR CAPS_LED  
ARM GAS  forth.s 			page 66


 636 16ac C9130000 	    _ADR PS2_QKEY 
 637 16b0 9D270000 	    _ADR QDUP 
 638 16b4 D7240000 	    _QBRAN 1b  
 638      A8160000 
 639 16bc 1F230000 	    _UNNEST 
 640 16c0 BA120000 	
 640      C8120000 
 640      280F0000 
 640      4C100000 
 640      DC0F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16e0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16e8 0346     	    mov r3,r0 
  42 16ea 4FF00401 	    mov r1,#PIN_F_SC 
  43 16ee 4FF00102 	    mov r2,#OUTPUT_PP
  44 16f2 00B5FEF7 	    _CALL gpio_config 
  44      1DFE5DF8 
  44      04EB
ARM GAS  forth.s 			page 67


  45 16fc 1846     	    mov r0,r3 
  46 16fe 4FF00401 	    mov r1,#PIN_F_SC  
  47 1702 4FF00102 	    MOV r2,#1
  48 1706 00B5FEF7 	    _CALL gpio_out 
  48      69FE5DF8 
  48      04EB
  49 1710 1846     	    mov r0,r3 
  50 1712 4FF00501 	    mov r1,#PIN_SCK  
  51 1716 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 171a 00B5FEF7 	    _CALL gpio_config 
  52      09FE5DF8 
  52      04EB
  53 1724 1846     	    mov r0,r3 
  54 1726 4FF00701 	    mov r1,#PIN_MOSI 
  55 172a 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 172e 00B5FEF7 	    _CALL gpio_config 
  56      FFFD5DF8 
  56      04EB
  57 1738 1846     	    mov r0,r3
  58 173a 4FF00601 	    mov r1,#PIN_MISO
  59 173e 4FF00202 	    mov r2,#INPUT_AFO  
  60 1742 00B5FEF7 	    _CALL gpio_config
  60      F5FD5DF8 
  60      04EB
  61              	// PA5:7 at max speed 
  62 174c 4CF6AA40 	    mov r0,#0xCCAA
  63 1750 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  64 1752 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  64      C4F20200 
  65 175a 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  66 175c 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  67 1760 4164     	    str r1,[r0,#RCC_APB2ENR]
  68 1762 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  68      C4F20100 
  69 176a 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  70 176e 0180     	    strh r1,[r0,#SPI_CR1]
  71 1770 196A     	    ldr r1,[r3,#GPIO_AFRL]
  72 1772 80EA0000 	    eor r0,r0 
  73 1776 C5F25050 	    movt r0,#0x5550 
  74 177a 40EA0100 	    orr r0,r1 
  75 177e 1862     	    str r0,[r3,#GPIO_AFRL]
  76 1780 7047     	    _RET 
  77              	
  78              	
  79              	/**********************
  80              	    CHIP-SEL ( -- )
  81              	    drive F_SC low 
  82              	*********************/
  83 1782 9A160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  83      08434849 
  83      502D5345 
  83      4C00
  84 1790 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  84      C4F20200 
  85 1798 4FF00401 	    mov r1,#PIN_F_SC 
  86 179c 4FF00002 	    mov r2,#0 
  87 17a0 00B5FEF7 	    _CALL gpio_out 
ARM GAS  forth.s 			page 68


  87      1CFE5DF8 
  87      04EB
  88 17aa 00F0B5BD 	    _NEXT 
  89              	
  90              	
  91              	/*********************
  92              	    CHIP-DSEL 
  93              	    drive F_SC high 
  94              	*********************/
  95 17ae 86170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  95      09434849 
  95      502D4453 
  95      454C
  96 17bc 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  96      C4F20100 
  97 17c4 0189     	1:  ldrh T1,[T0,#SPI_SR]
  98 17c6 11F0800F 	    tst T1,(1<<7) // BSY 
  99 17ca FBD1     	    bne 1b 
 100 17cc 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 100      C4F20200 
 101 17d4 4FF00401 	    mov r1,#PIN_F_SC 
 102 17d8 4FF00102 	    mov r2,#1 
 103 17dc 00B5FEF7 	    _CALL gpio_out 
 103      FEFD5DF8 
 103      04EB
 104 17e6 00F097BD 	    _NEXT 
 105              	
 106              	
 107              	/****************************
 108              	    RD-BYTE ( -- )
 109              	    read flash byte 
 110              	***************************/
 111 17ea B2170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 111      0752442D 
 111      42595445 
 111      00BF
 112 17f8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 112      C4F20100 
 113 1800 0189     	0:  ldrh T1,[T0,#SPI_SR]
 114 1802 11F0020F 	    tst T1,#(1<<1) //TXE
 115 1806 FBD0     	    beq 0b 
 116 1808 6FF00001 	    mvn T1,#0 
 117 180c 0173     	    strb T1,[T0,#SPI_DR]
 118 180e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 119 1810 11F0010F 	    tst T1,#(1<<0) // RXNE  
 120 1814 FBD0     	    beq 1b     
 121              	2:  
 122 1816 47F8046D 	    _PUSH 
 123 181a 067B     	    ldrb TOS,[T0,#SPI_DR]
 124 181c 00F07CBD 	    _NEXT 
 125              	
 126              	
 127              	/*********************************
 128              	    WR-BYTE  ( c -- )
 129              	    write flash byte 
 130              	*************************/
 131 1820 EE170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
ARM GAS  forth.s 			page 69


 131      0757522D 
 131      42595445 
 132 182c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 132      C4F20100 
 133 1834 0189     	0:  ldrh T1,[T0,#SPI_SR]
 134 1836 11F0020F 	    tst T1,#(1<<1) //TXE
 135 183a FBD0     	    beq 0b 
 136 183c 0673     	    strb TOS,[T0,#SPI_DR]
 137 183e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 138 1840 11F0010F 	    tst T1,#(1<<0) // RXNE  
 139 1844 FBD0     	    beq 1b 
 140 1846 8189     	    ldrh T1,[T0,#SPI_DR]
 141 1848 57F8046B 	    _POP 
 142 184c 00F064BD 	    _NEXT 
 143              	
 144              	/*************************
 145              	    WR-DIS ( -- )
 146              	    write disable 
 147              	    reset WEL bit 
 148              	*************************/
 149 1850 24180000 	    _HEADER WR_DIS,6,"WR-DIS"
 149      0657522D 
 149      44495300 
 150 185c 504700BF 	    _NEST 
 151 1860 91170000 	    _ADR CHIP_SEL 
 152 1864 97240000 	    _DOLIT 4
 152      04000000 
 153 186c 2D180000 	    _ADR WR_BYTE
 154 1870 BD170000 	    _ADR CHIP_DSEL
 155 1874 1F230000 	    _UNNEST
 156              	
 157              	/*************************
 158              	    WR-ENBL ( -- )
 159              	    set WEL flag in SR0 
 160              	************************/
 161 1878 54180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 161      0757522D 
 161      454E424C 
 162 1884 504700BF 	    _NEST 
 163 1888 91170000 	    _ADR CHIP_SEL 
 164 188c 97240000 	    _DOLIT 6 
 164      06000000 
 165 1894 2D180000 	    _ADR WR_BYTE 
 166 1898 BD170000 	    _ADR CHIP_DSEL 
 167 189c 1F230000 	    _UNNEST 
 168              	
 169              	/********************************
 170              	    RD-SR ( n -- c )
 171              	    read status register  
 172              	********************************/
 173 18a0 7C180000 	    _HEADER RD_SR,5,"RD-SR"
 173      0552442D 
 173      535200BF 
 174 18ac 504700BF 	    _NEST
 175 18b0 91170000 	    _ADR CHIP_SEL  
 176 18b4 97240000 	    _DOLIT sr_cmd 
 176      D4180000 
ARM GAS  forth.s 			page 70


 177 18bc 8D260000 	    _ADR PLUS 
 178 18c0 3D250000 	    _ADR CAT
 179 18c4 2D180000 	    _ADR WR_BYTE
 180 18c8 F9170000 	    _ADR RD_BYTE
 181 18cc BD170000 	    _ADR CHIP_DSEL  
 182 18d0 1F230000 	    _UNNEST 
 183 18d4 053515   	sr_cmd: .byte 5,0x35,0x15      
 184              	
 185              	/*********************************
 186              	    SEND-ADR ( a -- )
 187              	    send 24 bits address 
 188              	*******************************/
 189 18d7 A4180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 189      0853454E 
 189      442D4144 
 189      52
 190 18e4 504700BF 	    _NEST 
 191 18e8 C9250000 	    _ADR DUPP 
 192 18ec 97240000 	    _DOLIT 16
 192      10000000 
 193 18f4 65260000 	    _ADR RSHIFT 
 194 18f8 2D180000 	    _ADR WR_BYTE 
 195 18fc C9250000 	    _ADR DUPP
 196 1900 97240000 	    _DOLIT 8 
 196      08000000 
 197 1908 65260000 	    _ADR RSHIFT 
 198 190c 2D180000 	    _ADR WR_BYTE 
 199 1910 2D180000 	    _ADR WR_BYTE 
 200 1914 1F230000 	    _UNNEST 
 201              	
 202              	/**********************************
 203              	    WAIT-DONE ( -- )
 204              	    wait write operation completed 
 205              	**********************************/
 206 1918 DB180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 206      09574149 
 206      542D444F 
 206      4E4500BF 
 207 1928 504700BF 	    _NEST 
 208 192c 97240000 	1:  _DOLIT 0 
 208      00000000 
 209 1934 AD180000 	    _ADR RD_SR 
 210 1938 97240000 	    _DOLIT 3 
 210      03000000 
 211 1940 0D260000 	    _ADR ANDD 
 212 1944 D7240000 	    _QBRAN 2f
 212      54190000 
 213 194c EB240000 	    _BRAN 1b
 213      2C190000 
 214 1954 1F230000 	2:  _UNNEST 
 215              	
 216              	
 217              	/****************************
 218              	   ERASE-BLK ( a -- )
 219              	   erase 4Ko block  
 220              	***************************/
 221 1958 1C190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
ARM GAS  forth.s 			page 71


 221      09455241 
 221      53452D42 
 221      4C4B00BF 
 222 1968 504700BF 	    _NEST 
 223 196c 85180000 	    _ADR WR_ENBL
 224 1970 91170000 	    _ADR CHIP_SEL 
 225 1974 97240000 	    _DOLIT 0x20 
 225      20000000 
 226 197c 2D180000 	    _ADR WR_BYTE 
 227 1980 E5180000 	    _ADR SEND_ADR
 228 1984 BD170000 	    _ADR CHIP_DSEL 
 229 1988 29190000 	    _ADR WAIT_DONE 
 230 198c 1F230000 	    _UNNEST 
 231              	
 232              	/******************************
 233              	    ERASE-CHIP ( -- )
 234              	    erase all data 
 235              	******************************/
 236 1990 5C190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 236      0A455241 
 236      53452D43 
 236      48495000 
 237 19a0 504700BF 	    _NEST 
 238 19a4 85180000 	    _ADR WR_ENBL 
 239 19a8 91170000 	    _ADR CHIP_SEL
 240 19ac 97240000 	    _DOLIT 0x60
 240      60000000 
 241 19b4 97240000 	    _DOLIT 0xC7 
 241      C7000000 
 242 19bc 2D180000 	    _ADR WR_BYTE 
 243 19c0 2D180000 	    _ADR WR_BYTE 
 244 19c4 BD170000 	    _ADR CHIP_DSEL 
 245 19c8 29190000 	    _ADR WAIT_DONE
 246 19cc 1F230000 	    _UNNEST 
 247              	
 248              	
 249              	/******************************
 250              	    RD-BLK ( buff n a --  )
 251              	    read n bytes in buff 
 252              	    starting at address a  
 253              	******************************/
 254 19d0 94190000 	    _HEADER RD_BLK,6,"RD-BLK"
 254      0652442D 
 254      424C4B00 
 255 19dc 504700BF 	    _NEST
 256 19e0 91170000 	    _ADR CHIP_SEL 
 257 19e4 97240000 	    _DOLIT 3 
 257      03000000 
 258 19ec 2D180000 	    _ADR WR_BYTE 
 259 19f0 E5180000 	    _ADR SEND_ADR
 260 19f4 71250000 	    _ADR TOR   
 261 19f8 EB240000 	    _BRAN 2f
 261      101A0000 
 262 1a00 F9170000 	1:  _ADR RD_BYTE
 263 1a04 ED250000 	    _ADR OVER 
 264 1a08 29250000 	    _ADR CSTOR
 265 1a0c E9260000 	    _ADR ONEP 
ARM GAS  forth.s 			page 72


 266 1a10 B9240000 	2:  _DONXT 1b
 266      001A0000 
 267 1a18 B9250000 	    _ADR DROP 
 268 1a1c BD170000 	    _ADR CHIP_DSEL 
 269 1a20 1F230000 	    _UNNEST 
 270              	
 271              	/*****************************
 272              	    WR-BLK ( buff n a -- )
 273              	    write up to 256 bytes 
 274              	    in erased flash
 275              	****************************/
 276 1a24 D4190000 	    _HEADER WR_BLK,6,"WR-BLK"
 276      0657522D 
 276      424C4B00 
 277 1a30 504700BF 	    _NEST 
 278 1a34 85180000 	    _ADR WR_ENBL
 279 1a38 91170000 	    _ADR CHIP_SEL
 280 1a3c 97240000 	    _DOLIT 2 
 280      02000000 
 281 1a44 2D180000 	    _ADR WR_BYTE 
 282 1a48 E5180000 	    _ADR SEND_ADR
 283 1a4c 71250000 	    _ADR TOR
 284 1a50 EB240000 	    _BRAN 2f 
 284      701A0000 
 285 1a58 C9250000 	1:  _ADR DUPP 
 286 1a5c 3D250000 	    _ADR CAT 
 287 1a60 C9250000 	    _ADR DUPP 
 288 1a64 35360000 	    _ADR HDOT
 289 1a68 2D180000 	    _ADR WR_BYTE 
 290 1a6c E9260000 	    _ADR ONEP
 291 1a70 B9240000 	2:  _DONXT 1b 
 291      581A0000 
 292 1a78 B9250000 	    _ADR DROP
 293 1a7c BD170000 	    _ADR CHIP_DSEL
 294 1a80 29190000 	    _ADR WAIT_DONE 
 295 1a84 1F230000 	    _UNNEST
 296              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*==========================================================
ARM GAS  forth.s 			page 73


  21              	    THE 'FLOATING POINT ARITHMETIC' ROUTINES
  22              	==========================================================*/
  23              	
  24              	/******************************************************
  25              	    Parsing float32 to IEEE-754 format is quite Complex
  26              	    so I rather adapted  Forth dimensions Volume IV, #1
  27              	    library proposed by Michael Jesch 
  28              	    adapted to this ARM-7M architecture.
  29              	    REF: docs/FD-V04N1.pdf 
  30              	
  31              	Format:
  32              	    bit 23:0  6 digits signed mantissa
  33              	    bit 31:24 signed exponent 
  34              	
  35              	*******************************************************/    
  36              	
  37              	    MANTISSA_MASK = 0xffffff // biggest mantissa 
  38              	    MANTISSA_SIGN = 0x800000 
  39              	
  40              	/*******************************
  41              	    FPSW  variable  ( -- a )
  42              	    floating point state flags 
  43              	    bit 0  zero flag 
  44              	    bit 1  negative flag 
  45              	    bit 2  overflow error 
  46              	*******************************/
  47 1a88 281A0000 	    _HEADER FPSW,4,"FPSW"
  47      04465053 
  47      570000BF 
  48 1a94 47F8046D 	    _PUSH 
  49 1a98 04F1A006 	    add TOS,UP,#VFPSW
  50 1a9c 00F03CBC 	    _NEXT  
  51              	
  52              	/*******************************
  53              	    FBASE variable ( -- a )
  54              	    floating point numerical base
  55              	**********************************/
  56 1aa0 8C1A0000 	    _HEADER FBASE,5,"FBASE"
  56      05464241 
  56      534500BF 
  57 1aac 47F8046D 	    _PUSH  
  58 1ab0 04F1A406 	    add TOS,UP,#VFBASE 
  59 1ab4 00F030BC 	    _NEXT  
  60              	
  61              	/*****************************
  62              	    FRESET ( -- )
  63              	    reset state 
  64              	******************************/
  65 1ab8 A41A0000 	    _HEADER FRESET,6,"FRESET"
  65      06465245 
  65      53455400 
  66 1ac4 80EA0000 	    eor T0,T0 
  67 1ac8 C4F8A000 	    str T0,[UP,#VFPSW]
  68 1acc 00F024BC 	    _NEXT 
  69              	
  70              	/******************************
  71              	    FINIT ( -- )
ARM GAS  forth.s 			page 74


  72              	    initialise floating point 
  73              	******************************/
  74 1ad0 BC1A0000 	    _HEADER FINIT,5,"FINIT"
  74      0546494E 
  74      495400BF 
  75 1adc 504700BF 	    _NEST 
  76 1ae0 C51A0000 	    _ADR FRESET 
  77 1ae4 852A0000 	    _ADR BASE 
  78 1ae8 1D250000 	    _ADR AT 
  79 1aec AD1A0000 	    _ADR FBASE 
  80 1af0 09250000 	    _ADR STORE 
  81 1af4 1F230000 	    _UNNEST 
  82              	
  83              	
  84              	/*******************************
  85              	    FER ( -- n )
  86              	    return FPSW value 
  87              	********************************/
  88 1af8 D41A0000 	    _HEADER FER,3,"FER"
  88      03464552 
  89 1b00 47F8046D 	    _PUSH 
  90 1b04 D4F8A060 	    ldr TOS,[UP,#VFPSW]
  91 1b08 00F006BC 	    _NEXT 
  92              	
  93              	/*******************************
  94              	    FZE ( -- flag )
  95              	    return zero flag 
  96              	*******************************/
  97 1b0c FC1A0000 	    _HEADER FZE,3,"FZE"
  97      03465A45 
  98 1b14 47F8046D 	    _PUSH 
  99 1b18 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 100 1b1c 06F00106 	    and TOS,#1
 101 1b20 FAE3     	    _NEXT 
 102              	
 103              	/*********************************
 104              	    FNE ( -- flag )
 105              	    return negative flag 
 106              	**********************************/
 107 1b22 101B0000 	    _HEADER FNE,3,"FNE"
 107      03464E45 
 107      00BF
 108 1b2c 47F8046D 	    _PUSH 
 109 1b30 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 110 1b34 06F00206 	    and TOS,#2 
 111 1b38 EEE3     	    _NEXT     
 112              	
 113              	/**********************************
 114              	    FOV ( -- flag )
 115              	    return overflow flag 
 116              	***********************************/
 117 1b3a 261B0000 	    _HEADER FOV,3,"FOV"
 117      03464F56 
 117      00BF
 118 1b44 47F8046D 	    _PUSH 
 119 1b48 D4F8A060 	    ldr TOS,[UP,#VFPSW]
 120 1b4c 06F00406 	    and TOS,#4 
ARM GAS  forth.s 			page 75


 121 1b50 E2E3     	    _NEXT 
 122              	
 123              	/************************************
 124              	    SFZ ( F# -- f# ; z )
 125              	    set zero flag 
 126              	*************************************/
 127 1b52 3E1B0000 	    _HEADER SFZ,3,"SFZ"
 127      0353465A 
 127      00BF
 128 1b5c D4F8A000 	    ldr T0,[UP,#VFPSW]
 129 1b60 20F00100 	    and T0,#-2
 130 1b64 26F07F41 	    and T1,TOS,#MANTISSA_MASK 
 131 1b68 09B1     	    cbz T1, 1f 
 132 1b6a 40F00100 	    orr T0,#1 
 133 1b6e C4F8A000 	1:  str T0,[UP,#VFPSW]
 134 1b72 D1E3     	    _NEXT 
 135              	
 136              	/************************************
 137              	    SFN ( f# -- f# ; neg )
 138              	    set negative flag 
 139              	*************************************/
 140 1b74 561B0000 	    _HEADER SFN,3,"SFN"
 140      0353464E 
 141 1b7c D4F8A000 	    ldr T0,[UP,#VFPSW]
 142 1b80 20F00200 	    and T0,#-3
 143 1b84 06F40001 	    and T1,TOS,#(1<<23)
 144 1b88 4FEA9151 	    lsr T1,#22
 145 1b8c 40EA0100 	    orr T0,T1
 146 1b90 C4F8A000 	    str T0,[UP,#VFPSW]
 147 1b94 C0E3     	    _NEXT 
 148              	
 149              	
 150              	/************************
 151              	    SFV (  -- )
 152              	    set overflow flag 
 153              	************************/
 154 1b96 781B0000 	    _HEADER SFV,3,"SFV"
 154      03534656 
 154      00BF
 155 1ba0 D4F8A000 	    ldr T0,[UP,#VFPSW]
 156 1ba4 40F00400 	    orr T0,#4 
 157 1ba8 C4F8A000 	    str T0,[UP,#VFPSW]
 158 1bac B4E3     	    _NEXT 
 159              	
 160              	/*************************************
 161              	    @EXPONENT ( f# -- m e ; z n )    
 162              	    split exponent and mantissa 
 163              	    update FPSW flags 
 164              	*************************************/
 165 1bae 9A1B0000 	    _HEADER AT_EXPONENT,9,"@EXPONENT"
 165      09404558 
 165      504F4E45 
 165      4E54
 166 1bbc 504700BF 	    _NEST 
 167 1bc0 C51A0000 	    _ADR FRESET 
 168 1bc4 5D1B0000 	    _ADR SFZ 
 169 1bc8 7D1B0000 	    _ADR SFN 
ARM GAS  forth.s 			page 76


 170 1bcc C9250000 	    _ADR DUPP 
 171 1bd0 2D1B0000 	    _ADR FNE 
 172 1bd4 D7240000 	    _QBRAN 1f 
 172      F01B0000 
 173 1bdc 97240000 	    _DOLIT 0xFF000000 
 173      000000FF 
 174 1be4 21260000 	    _ADR ORR  
 175 1be8 EB240000 	    _BRAN 2f 
 175      FC1B0000 
 176 1bf0 97240000 	1:  _DOLIT MANTISSA_MASK 
 176      FFFFFF00 
 177 1bf8 0D260000 	    _ADR ANDD 
 178 1bfc D9250000 	2:  _ADR SWAP 
 179 1c00 97240000 	    _DOLIT 24 
 179      18000000 
 180 1c08 65260000 	    _ADR RSHIFT 
 181 1c0c 1F230000 	    _UNNEST 
 182              	
 183              	/*************************************
 184              	    !EXPONENT ( m e -- f# ; z n )
 185              	    format float from mantissa and
 186              	    exponent. Set flags 
 187              	**************************************/
 188 1c10 B21B0000 	    _HEADER STOR_EXPONENT,9,"!EXPONENT"
 188      09214558 
 188      504F4E45 
 188      4E5400BF 
 189 1c20 504700BF 	    _NEST
 190              	// exponent overflow?    
 191 1c24 C9250000 	    _ADR DUPP 
 192 1c28 BD280000 	    _ADR ABSS 
 193 1c2c 97240000 	    _DOLIT 255 
 193      FF000000 
 194 1c34 65290000 	    _ADR GREAT 
 195 1c38 D7240000 	    _QBRAN 1f 
 195      441C0000 
 196 1c40 A11B0000 	    _ADR SFV 
 197              	// mantissa overflow?     
 198 1c44 ED250000 	1:  _ADR OVER 
 199 1c48 BD280000 	    _ADR ABSS 
 200 1c4c 97240000 	    _DOLIT 0x7ffffff 
 200      FFFFFF07 
 201 1c54 65290000 	    _ADR GREAT 
 202 1c58 D7240000 	    _QBRAN 2f
 202      641C0000 
 203 1c60 A11B0000 	    _ADR SFV 
 204 1c64 97240000 	2:  _DOLIT 24 
 204      18000000 
 205 1c6c 7D260000 	    _ADR LSHIFT 
 206 1c70 D9250000 	    _ADR SWAP 
 207 1c74 97240000 	    _DOLIT MANTISSA_MASK
 207      FFFFFF00 
 208 1c7c 0D260000 	    _ADR ANDD  
 209 1c80 21260000 	    _ADR ORR 
 210 1c84 1F230000 	    _UNNEST 
 211              	    
 212              	/******************************
ARM GAS  forth.s 			page 77


 213              	    E. ( f# -- )
 214              	    print float in scientific 
 215              	    notation.
 216              	*******************************/
 217 1c88 141C0000 	    _HEADER EDOT,2,"E."
 217      02452E00 
 218 1c90 504700BF 	    _NEST 
 219 1c94 21340000 	    _ADR SPACE 
 220 1c98 C9250000 	    _ADR DUPP 
 221 1c9c D1280000 	    _ADR ZEQUAL 
 222 1ca0 D7240000 	    _QBRAN 1f 
 222      BC1C0000 
 223 1ca8 11350000 	    _DOTQP 3,"0.0"
 223      03302E30 
 224 1cb0 B9250000 	    _ADR DROP 
 225 1cb4 EB240000 	    _BRAN 9f
 225      A01D0000 
 226 1cbc 852A0000 	1:  _ADR BASE 
 227 1cc0 1D250000 	    _ADR AT 
 228 1cc4 71250000 	    _ADR TOR 
 229 1cc8 AD1A0000 	    _ADR FBASE 
 230 1ccc 1D250000 	    _ADR AT 
 231 1cd0 852A0000 	    _ADR BASE 
 232 1cd4 09250000 	    _ADR STORE
 233 1cd8 BD1B0000 	    _ADR AT_EXPONENT
 234 1cdc D9250000 	    _ADR SWAP 
 235 1ce0 C9250000 	    _ADR DUPP 
 236 1ce4 71250000 	    _ADR TOR // mantissa copy 
 237 1ce8 2D1B0000 	    _ADR FNE 
 238 1cec D7240000 	    _QBRAN 2f 
 238      F81C0000 
 239 1cf4 BD280000 	    _ADR ABSS 
 240 1cf8 812C0000 	2:  _ADR STOD 
 241 1cfc BD300000 	    _ADR BDIGS
 242 1d00 09310000 	3:  _ADR DIG 
 243 1d04 B1270000 	    _ADR ROT 
 244 1d08 E9260000 	    _ADR ONEP 
 245 1d0c C5270000 	    _ADR NROT 
 246 1d10 ED250000 	    _ADR OVER 
 247 1d14 852A0000 	    _ADR BASE 
 248 1d18 1D250000 	    _ADR AT 
 249 1d1c 1D290000 	    _ADR ULESS 
 250 1d20 D7240000 	    _QBRAN 3b
 250      001D0000 
 251 1d28 97240000 	    _DOLIT '.' 
 251      2E000000 
 252 1d30 DD300000 	    _ADR HOLD 
 253 1d34 29310000 	    _ADR DIGS
 254 1d38 49250000 	    _ADR RFROM 
 255 1d3c 5D310000 	    _ADR SIGN 
 256 1d40 85310000 	    _ADR EDIGS
 257 1d44 75340000 	    _ADR TYPEE 
 258 1d48 9D270000 	    _ADR QDUP 
 259 1d4c D7240000 	    _QBRAN 8f
 259      941D0000 
 260 1d54 97240000 	    _DOLIT 'E'
 260      45000000 
ARM GAS  forth.s 			page 78


 261 1d5c A1230000 	    _ADR EMIT 
 262 1d60 C9250000 	    _ADR DUPP 
 263 1d64 FD250000 	    _ADR ZLESS 
 264 1d68 D7240000 	    _QBRAN 4f 
 264      801D0000 
 265 1d70 BD280000 	    _ADR ABSS 
 266 1d74 97240000 	    _DOLIT '-' 
 266      2D000000 
 267 1d7c A1230000 	    _ADR EMIT 
 268 1d80 812C0000 	4:  _ADR STOD
 269 1d84 BD300000 	    _ADR BDIGS 
 270 1d88 29310000 	    _ADR DIGS 
 271 1d8c 85310000 	    _ADR EDIGS 
 272 1d90 75340000 	    _ADR TYPEE     
 273 1d94 49250000 	8:  _ADR RFROM 
 274 1d98 852A0000 	    _ADR BASE 
 275 1d9c 09250000 	    _ADR STORE 
 276 1da0 1F230000 	9:  _UNNEST 
 277              	
 278              	/******************************
 279              	    F. ( f# -- )
 280              	    print float in fixed point 
 281              	    format 
 282              	*******************************/
 283 1da4 8C1C0000 	    _HEADER FDOT,2,"F."
 283      02462E00 
 284 1dac 504700BF 	    _NEST 
 285 1db0 C9250000 	    _ADR DUPP 
 286 1db4 BD1B0000 	    _ADR AT_EXPONENT 
 287 1db8 71250000 	    _ADR TOR 
 288 1dbc 15410000 	    _ADR I 
 289 1dc0 BD280000 	    _ADR ABSS 
 290 1dc4 97240000 	    _DOLIT 32 
 290      20000000 
 291 1dcc 4D290000 	    _ADR UGREAT 
 292 1dd0 D7240000 	    _QBRAN 1f
 292      EC1D0000 
 293 1dd8 49250000 	    _ADR RFROM 
 294 1ddc B9250000 	    _ADR DROP 
 295 1de0 911C0000 	    _ADR EDOT 
 296 1de4 EB240000 	    _BRAN 9f 
 296      101F0000 
 297 1dec 21340000 	1:  _ADR SPACE 
 298 1df0 2D1B0000 	    _ADR FNE 
 299 1df4 D7240000 	    _QBRAN 2f
 299      001E0000 
 300 1dfc BD280000 	    _ADR ABSS 
 301 1e00 812C0000 	2:  _ADR STOD 
 302 1e04 BD300000 	    _ADR BDIGS 
 303 1e08 15410000 	    _ADR I 
 304 1e0c FD250000 	    _ADR ZLESS 
 305 1e10 D7240000 	    _QBRAN 4f 
 305      7C1E0000 
 306 1e18 15410000 	    _ADR I 
 307 1e1c BD280000 	    _ADR ABSS 
 308 1e20 97240000 	    _DOLIT 0 
 308      00000000 
ARM GAS  forth.s 			page 79


 309 1e28 71250000 	    _ADR TOR 
 310 1e2c 71250000 	    _ADR TOR 
 311 1e30 09310000 	3:  _ADR DIG 
 312 1e34 49250000 	    _ADR RFROM 
 313 1e38 E9260000 	    _ADR ONEP
 314 1e3c C9250000 	    _ADR DUPP
 315 1e40 71250000 	    _ADR TOR  
 316 1e44 29410000 	    _ADR J 
 317 1e48 35290000 	    _ADR LESS 
 318 1e4c D7240000 	    _QBRAN 3f
 318      5C1E0000 
 319 1e54 EB240000 	    _BRAN 3b 
 319      301E0000 
 320 1e5c 49250000 	3:  _ADR RFROM
 321 1e60 49250000 	    _ADR RFROM 
 322 1e64 D9270000 	    _ADR DDROP 
 323 1e68 97240000 	    _DOLIT '.' 
 323      2E000000 
 324 1e70 DD300000 	    _ADR HOLD 
 325 1e74 EB240000 	    _BRAN 6f 
 325      E81E0000 
 326 1e7c 97240000 	4:  _DOLIT '.' 
 326      2E000000 
 327 1e84 DD300000 	    _ADR HOLD 
 328 1e88 15410000 	    _ADR I 
 329 1e8c D7240000 	    _QBRAN 6f 
 329      E81E0000 
 330 1e94 15410000 	    _ADR I 
 331 1e98 97240000 	    _DOLIT 0 
 331      00000000 
 332 1ea0 71250000 	    _ADR TOR 
 333 1ea4 71250000 	    _ADR TOR 
 334 1ea8 97240000 	5:  _DOLIT '0' 
 334      30000000 
 335 1eb0 DD300000 	    _ADR HOLD
 336 1eb4 49250000 	    _ADR RFROM 
 337 1eb8 E9260000 	    _ADR ONEP 
 338 1ebc C9250000 	    _ADR DUPP 
 339 1ec0 71250000 	    _ADR TOR 
 340 1ec4 29410000 	    _ADR J 
 341 1ec8 35290000 	    _ADR LESS 
 342 1ecc D7240000 	    _QBRAN 5f 
 342      DC1E0000 
 343 1ed4 EB240000 	    _BRAN 5b
 343      A81E0000 
 344 1edc 49250000 	5:  _ADR RFROM 
 345 1ee0 49250000 	    _ADR RFROM 
 346 1ee4 D9270000 	    _ADR DDROP 
 347 1ee8 49250000 	6:  _ADR RFROM 
 348 1eec B9250000 	    _ADR DROP 
 349 1ef0 29310000 	    _ADR DIGS 
 350 1ef4 D9250000 	    _ADR SWAP 
 351 1ef8 97240000 	    _DOLIT 8
 351      08000000 
 352 1f00 7D260000 	    _ADR LSHIFT 
 353 1f04 5D310000 	    _ADR SIGN 
 354 1f08 85310000 	    _ADR EDIGS 
ARM GAS  forth.s 			page 80


 355 1f0c 75340000 	    _ADR TYPEE 
 356 1f10 1F230000 	9:  _UNNEST 
 357              	
 358              	
 359              	/*******************************
 360              	    F+ ( f1 f2 -- f1+f2 )
 361              	    add 2 float 
 362              	*******************************/
 363 1f14 A81D0000 	    _HEADER FPLUS,2,"F+"
 363      02462B00 
 364 1f1c 504700BF 	    _NEST 
 365              	
 366 1f20 1F230000 	    _UNNEST 
 367              	
 368              	/*******************************
 369              	    F- ( f1 f2 -- f1-f2 )
 370              	    substract 2 float 
 371              	*******************************/
 372 1f24 181F0000 	    _HEADER FMINUS,2,"F-"
 372      02462D00 
 373 1f2c 504700BF 	    _NEST 
 374              	
 375 1f30 1F230000 	    _UNNEST 
 376              	
 377              	/*******************************
 378              	    F* ( f1 f2 -- f1*f2 )
 379              	    multiply 2 float 
 380              	******************************/
 381              	
 382              	/*******************************
 383              	    F/ ( f1 f2 -- f1/f2 )
 384              	    divide f1 by f2 
 385              	*******************************/
 386 1f34 281F0000 	    _HEADER FSLH,2,"F/"
 386      02462F00 
 387 1f3c 504700BF 	    _NEST 
 388              	
 389 1f40 1F230000 	    _UNNEST 
 390              	
 391              	
 392              	/********************************
 393              	    FNEGATE ( f -- -f )
 394              	    negate floating point 
 395              	********************************/
 396 1f44 381F0000 	    _HEADER FNEG,7,"FNEGATE"
 396      07464E45 
 396      47415445 
 397 1f50 504700BF 	    _NEST 
 398              	
 399 1f54 1F230000 	    _UNNEST 
 400              	
 401              	/*******************************
 402              	    F>S ( f -- n )
 403              	    convert float to integer 
 404              	*******************************/
 405 1f58 481F0000 	    _HEADER FTOS,3,"F>S"
 405      03463E53 
ARM GAS  forth.s 			page 81


 406 1f60 504700BF 	    _NEST 
 407              	
 408 1f64 1F230000 	    _UNNEST 
 409              	
 410              	/*******************************
 411              	    S>F ( s -- f )
 412              	    convert integer to float 
 413              	*******************************/
 414 1f68 5C1F0000 	    _HEADER STOF,3,"S>F"
 414      03533E46 
 415 1f70 504700BF 	    _NEST 
 416              	
 417 1f74 1F230000 	    _UNNEST 
 418              	
 419              	/*******************************
 420              	    D>F ( d -- f)
 421              	    convert double to float 
 422              	*******************************/
 423 1f78 6C1F0000 	    _HEADER DTOF,3,"D>F"
 423      03443E46 
 424 1f80 504700BF 	    _NEST 
 425              	
 426 1f84 1F230000 	    _UNNEST 
 427              	
 428              	
 429              	// accumulate digits 
 430              	// ( n a+ c -- n+ a+ c- )
 431              	ACCUM_DIGITS:
 432 1f88 504700BF 	    _NEST 
 433 1f8c 71250000 	    _ADR TOR 
 434 1f90 EB240000 	    _BRAN 4f 
 434      C81F0000 
 435 1f98 ED290000 	1:  _ADR COUNT 
 436 1f9c 97240000 	    _DOLIT 10  // n a+ char 10 
 436      0A000000 
 437 1fa4 41320000 	    _ADR DIGTQ
 438 1fa8 D7240000 	    _QBRAN 6f
 438      E81F0000 
 439 1fb0 B1270000 	    _ADR ROT 
 440 1fb4 97240000 	    _DOLIT 10 
 440      0A000000 
 441 1fbc AD260000 	    _ADR STAR 
 442 1fc0 8D260000 	    _ADR PLUS 
 443 1fc4 D9250000 	    _ADR SWAP // n a+  
 444 1fc8 49250000 	4:  _ADR RFROM  
 445 1fcc C9250000 	    _ADR DUPP 
 446 1fd0 D7240000 	    _QBRAN 9f 
 446      04200000 
 447 1fd8 F9260000 	    _ADR ONEM 
 448 1fdc 71250000 	    _ADR TOR
 449 1fe0 EB240000 	    _BRAN 1b 
 449      981F0000 
 450 1fe8 B9250000 	6:  _ADR DROP 
 451 1fec F9260000 	    _ADR ONEM
 452 1ff0 49250000 	    _ADR RFROM
 453 1ff4 C9250000 	    _ADR DUPP  
 454 1ff8 D7240000 	    _QBRAN 9f 
ARM GAS  forth.s 			page 82


 454      04200000 
 455 2000 E9260000 	    _ADR ONEP      
 456 2004 1F230000 	9:  _UNNEST 
 457              	
 458              	// parse mantissa
 459              	//  ( a c -- dcnt m a+ c- ) 
 460              	MANTISSA:
 461 2008 504700BF 	    _NEST
 462 200c ED250000 	    _ADR OVER 
 463 2010 71250000 	    _ADR TOR  
 464 2014 97240000 	    _DOLIT 0 
 464      00000000 
 465 201c C5270000 	    _ADR NROT 
 466 2020 891F0000 	    _ADR ACCUM_DIGITS
 467 2024 D9250000 	    _ADR SWAP  // m c- a+ 
 468 2028 C9250000 	    _ADR DUPP  
 469 202c 49250000 	    _ADR RFROM // m c- a+ a+ a 
 470 2030 9D260000 	    _ADR  SUBB // m c- a+ dcnt 
 471 2034 C5270000 	    _ADR NROT // m dcnt c- a+ 
 472 2038 D9250000 	    _ADR SWAP // m dcnt a+ c-
 473 203c 71250000 	    _ADR TOR  // m dcnt a+ R: c- 
 474 2040 D9250000 	    _ADR SWAP // m a+ dcnt 
 475 2044 C5270000 	    _ADR NROT // dcnt m a+ 
 476 2048 49250000 	    _ADR RFROM // dcnt m a+ c-  
 477 204c 1F230000 	    _UNNEST 
 478              	
 479              	//parse exponent
 480              	// ( a c -- e esign a+ c- ) 
 481              	EXPONENT:
 482 2050 504700BF 	    _NEST 
 483 2054 ED320000 	    _ADR DASHQ 
 484 2058 71250000 	    _ADR TOR  // a c R: esign 
 485 205c 97240000 	    _DOLIT 0 
 485      00000000 
 486 2064 C5270000 	    _ADR NROT 
 487 2068 891F0000 	    _ADR ACCUM_DIGITS 
 488 206c 49250000 	    _ADR RFROM 
 489 2070 C5270000 	    _ADR NROT // e esign a+ c- 
 490 2074 1F230000 	    _UNNEST 
 491              	
 492              	// build float
 493              	//  ( dcnt m e esign msign -- float ) 
 494              	FORMAT_FLOAT:
 495 2078 504700BF 	    _NEST 
 496 207c 97240000 	    _DOLIT (1<<31)
 496      00000080 
 497 2084 0D260000 	    _ADR ANDD 
 498 2088 D9250000 	    _ADR SWAP 
 499 208c 97240000 	    _DOLIT (1<<30)
 499      00000040 
 500 2094 35260000 	    _ADR XORR  
 501 2098 21260000 	    _ADR ORR  // dcnt m e sign 
 502 209c B1270000 	    _ADR ROT  // dcnt e sign m 
 503 20a0 C9250000 	    _ADR DUPP 
 504 20a4 D7240000 	    _QBRAN 2f // mantissa = 0 
 504      E4200000 
 505 20ac 71250000 	    _ADR TOR // dcnt e sign R:  mantissa 
ARM GAS  forth.s 			page 83


 506 20b0 C5270000 	    _ADR NROT 
 507 20b4 8D260000 	    _ADR PLUS // sign e R: mantissa  
 508 20b8 97240000 	    _DOLIT 64 
 508      40000000 
 509 20c0 8D260000 	    _ADR PLUS 
 510 20c4 97240000 	    _DOLIT 24 
 510      18000000 
 511 20cc 7D260000 	    _ADR LSHIFT 
 512 20d0 49250000 	    _ADR RFROM 
 513 20d4 F9200000 	    _ADR BOUND_MANTISSA
 514 20d8 21260000 	    _ADR ORR 
 515 20dc EB240000 	    _BRAN 9f
 515      F4200000 
 516 20e4 71250000 	2:  _ADR TOR // 
 517 20e8 D9270000 	    _ADR DDROP 
 518 20ec B9250000 	    _ADR DROP 
 519 20f0 49250000 	    _ADR RFROM 
 520 20f4 1F230000 	9:  _UNNEST 
 521              	
 522              	
 523              	// bound mantissa
 524              	//  0xfffff < m <= MANTISSA_MASK
 525              	//  ( e m1 -- e m2 )
 526              	BOUND_MANTISSA:
 527 20f8 504700BF 	    _NEST
 528 20fc C9250000 	    _ADR DUPP 
 529 2100 97240000 	    _DOLIT MANTISSA_MASK
 529      FFFFFF00 
 530 2108 4D290000 	    _ADR UGREAT  
 531 210c D7240000 	    _QBRAN SCALE_UP
 531      44210000 
 532              	// to much digits 
 533              	// scale down  
 534 2114 C9250000 	1:  _ADR DUPP 
 535 2118 97240000 	    _DOLIT MANTISSA_MASK 
 535      FFFFFF00 
 536 2120 4D290000 	    _ADR UGREAT 
 537 2124 D7240000 	    _QBRAN 2f 
 537      40210000 
 538 212c 97240000 	    _DOLIT 10 
 538      0A000000 
 539 2134 E12D0000 	    _ADR SLASH 
 540 2138 EB240000 	    _BRAN 1b
 540      14210000 
 541 2140 1F230000 	2:  _UNNEST 
 542              	SCALE_UP:
 543 2144 C9250000 	    _ADR DUPP 
 544 2148 97240000 	    _DOLIT 0xff0000
 544      0000FF00 
 545 2150 0D260000 	    _ADR ANDD 
 546 2154 99280000 	    _ADR INVER
 547 2158 D7240000 	    _QBRAN 9f
 547      7C210000 
 548 2160 97240000 	    _DOLIT 10 
 548      0A000000 
 549 2168 AD260000 	    _ADR STAR 
 550 216c D9250000 	    _ADR SWAP 
ARM GAS  forth.s 			page 84


 551 2170 F9260000 	    _ADR ONEM
 552 2174 EB240000 	    _BRAN 1b 
 552      14210000 
 553 217c 1F230000 	9:  _UNNEST 
 554              	
 555              	
 556              	/*******************************
 557              	    FLOAT? ( a -- f -1 | a 0 )
 558              	    parse floating point 
 559              	    float ::=  [-]digit*'.'[digit]*[E[-]digit+]
 560              	    digit ::= '0'..'9' 
 561              	*******************************/
 562 2180 7C1F0000 	    _HEADER FLOATQ,6,"FLOAT?"
 562      06464C4F 
 562      41543F00 
 563 218c 504700BF 	    _NEST
 564 2190 852A0000 	    _ADR BASE 
 565 2194 1D250000 	    _ADR AT 
 566 2198 71250000 	    _ADR TOR
 567 219c 1D320000 	    _ADR DECIM 
 568 21a0 97240000 	    _DOLIT 0
 568      00000000 
 569 21a8 ED250000 	    _ADR OVER   // a 0 a  
 570 21ac ED290000 	    _ADR COUNT  // a 0 a+ c 
 571 21b0 ED320000 	    _ADR DASHQ  // negative sign? 
 572 21b4 71250000 	    _ADR TOR   // a 0 a+ c- R: base msign   
 573 21b8 09200000 	    _ADR MANTISSA // a 0 dcnt m a+ c- 
 574 21bc ED250000 	    _ADR OVER 
 575 21c0 3D250000 	    _ADR CAT
 576 21c4 C9250000 	    _ADR DUPP  
 577 21c8 97240000 	    _DOLIT '.' 
 577      2E000000 
 578 21d0 35260000 	    _ADR XORR 
 579 21d4 D7240000 	    _QBRAN 1f 
 579      08220000 
 580 21dc 97240000 	    _DOLIT 'E' 
 580      45000000 
 581 21e4 35260000 	    _ADR XORR 
 582 21e8 D7240000 	    _QBRAN 2f
 582      5C220000 
 583              	// format error 
 584 21f0 D3270000 	0:  _ADR _DDROP // -- a 0 dcnt m 
 585 21f4 D3270000 	    _ADR _DDROP // -- a 0
 586 21f8 49250000 	    _ADR RFROM 
 587 21fc B9250000 	    _ADR DROP 
 588 2200 EB240000 	    _BRAN 9f  
 588      D4220000 
 589 2208 B9250000 	1:  _ADR DROP
 590 220c F9260000 	    _ADR ONEM
 591 2210 D9250000 	    _ADR SWAP 
 592 2214 E9260000 	    _ADR ONEP 
 593 2218 D9250000 	    _ADR SWAP
 594 221c 65470000 	_ADR TRACE 
 595 2220 891F0000 	    _ADR ACCUM_DIGITS // a 0 dcnt m a+ c-
 596 2224 65470000 	_ADR TRACE 
 597 2228 ED250000 	    _ADR OVER 
 598 222c 3D250000 	    _ADR CAT 
ARM GAS  forth.s 			page 85


 599 2230 C9250000 	    _ADR DUPP 
 600 2234 97240000 	    _DOLIT '.' 
 600      2E000000 
 601 223c E5280000 	    _ADR EQUAL 
 602 2240 D7240000 	    _QBRAN 2f
 602      5C220000 
 603 2248 B9250000 	    _ADR DROP 
 604 224c 97240000 	    _DOLIT 0 
 604      00000000 
 605 2254 EB240000 	    _BRAN 3f 
 605      AC220000 
 606 225c 97240000 	2:  _DOLIT 'E'
 606      45000000 
 607 2264 35260000 	    _ADR XORR 
 608 2268 D7240000 	    _QBRAN 2f
 608      94220000 
 609 2270 C9250000 	    _ADR DUPP 
 610 2274 D1280000 	    _ADR ZEQUAL 
 611 2278 D7240000 	    _QBRAN 0b 
 611      F0210000 
 612 2280 97240000 	    _DOLIT 0
 612      00000000 
 613 2288 B1270000 	    _ADR ROT 
 614 228c EB240000 	    _BRAN 3f  
 614      AC220000 
 615 2294 51200000 	2:  _ADR EXPONENT // a 0 dcnt m e esign a+ c- 
 616 2298 D7240000 	    _QBRAN 3f   // if not char left ok 
 616      AC220000 
 617 22a0 D9270000 	    _ADR DDROP 
 618 22a4 EB240000 	    _BRAN 0b
 618      F0210000 
 619 22ac 65470000 	3: _ADR TRACE   
 620 22b0 B9250000 	    _ADR DROP // a 0 dcnt m e esign 
 621 22b4 49250000 	    _ADR RFROM // a 0 dcnt m e esign msign 
 622 22b8 65470000 	_ADR TRACE 
 623 22bc 79200000 	    _ADR FORMAT_FLOAT
 624 22c0 65470000 	_ADR TRACE 
 625 22c4 C5270000 	    _ADR NROT 
 626 22c8 D9270000 	    _ADR DDROP 
 627 22cc 97240000 	    _DOLIT -2 
 627      FEFFFFFF 
 628 22d4 49250000 	9:  _ADR RFROM 
 629 22d8 852A0000 	    _ADR BASE 
 630 22dc 09250000 	    _ADR STORE     
 631 22e0 1F230000 	    _UNNEST    
 632              	
 633              	/********************************
 634              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 635              	    parse number, integer or float 
 636              	    if not a number return ( a 0 ) 
 637              	    if integer return ( int -1 ) 
 638              	    if float return ( float -2 )
 639              	**********************************/
 640 22e4 84210000 	    _HEADER NUMBER,6,"NUMBER"
 640      064E554D 
 640      42455200 
 641 22f0 504700BF 	    _NEST 
ARM GAS  forth.s 			page 86


 642 22f4 1D330000 	    _ADR INTQ
 643 22f8 9D270000 	    _ADR QDUP 
 644 22fc D7240000 	    _QBRAN 2f 
 644      08230000 
 645 2304 1F230000 	    _UNNEST 
 646 2308 8D210000 	2:  _ADR FLOATQ
 647 230c 1F230000 	    _UNNEST 
 648              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
ARM GAS  forth.s 			page 87


  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2310 48F804CD 		STMFD	RSP!,{IP}
  85 2314 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2318 5CF8045B 		LDR WP,[IP],#4 
  89 231c 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 231e 58F804CB 		LDMFD RSP!,{IP}
  92 2322 5CF8045B 		LDR WP,[IP],#4 
  93 2326 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2328 04F14401 		add T1,UP,#USER_CTOP 
 105 232c 0968     		ldr T1,[T1]
 106 232e 44F25072 		mov T2,#0x4700+(10<<3)
ARM GAS  forth.s 			page 88


 107 2332 21F8022B 		strh T2,[T1],#2
 108 2336 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 233a 21F8022B 		strh T2,[T1],#2 
 110 233e 04F14402 		add T2,UP,#USER_CTOP 
 111 2342 1160     		str T1,[T2]
 112 2344 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2346 47F8046D 		_PUSH 
 118 234a 04F11406 		ADD TOS,UP,#STDIN 
 119 234e E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2350 47F8046D 		_PUSH 
 125 2354 04F11806 		ADD TOS,UP,#STDOUT
 126 2358 DEE7     		_NEXT 
 127              		
 128              	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132 235a E8220000 		_HEADER QKEY,4,"KEY?" 
 132      044B4559 
 132      3F00
 133 2364 504700BF 		_NEST 
 134 2368 47230000 		_ADR TSTDIN // ' STDIN 
 135 236c 452F0000 		_ADR ATEXE
 136 2370 1F230000 		_UNNEST 
 137              	
 138              	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142 2374 5E230000 		_HEADER KEY,3,"KEY"
 142      034B4559 
 143 237c 504700BF 		_NEST
 144              	KEY1:
 145 2380 6D160000 		_ADR CAPS_LED 
 146 2384 65230000 		_ADR	QKEY 
 147 2388 D7240000 		_QBRAN	KEY1
 147      80230000 
 148 2390 1F230000 		_UNNEST
 149              	
 150              	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154 2394 78230000 		_HEADER EMIT,4,"EMIT"
 154      04454D49 
 154      540000BF 
 155 23a0 504700BF 		_NEST 
 156 23a4 51230000 		_ADR TSTDOUT 
 157 23a8 452F0000 		_ADR ATEXE 
ARM GAS  forth.s 			page 89


 158 23ac 1F230000 		_UNNEST 
 159              	
 160              	
 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190 23b0 98230000 		_HEADER RAND,6,"RANDOM"
 190      0652414E 
 190      444F4D00 
 191 23bc 504700BF 		_NEST
 192 23c0 BD280000 		_ADR ABSS   
 193 23c4 352A0000 		_ADR SEED 
 194 23c8 1D250000 		_ADR AT 
 195 23cc C9250000 		_ADR DUPP 
 196 23d0 97240000 		_DOLIT 13
 196      0D000000 
 197 23d8 7D260000 		_ADR LSHIFT 
 198 23dc 35260000 		_ADR XORR  
 199 23e0 C9250000 		_ADR DUPP 
 200 23e4 97240000 		_DOLIT 17 
 200      11000000 
 201 23ec 65260000 		_ADR RSHIFT 
 202 23f0 35260000 		_ADR XORR 
 203 23f4 C9250000 		_ADR DUPP
 204 23f8 97240000 		_DOLIT 5 
 204      05000000 
 205 2400 7D260000 		_ADR LSHIFT 
 206 2404 35260000 		_ADR XORR  
 207 2408 C9250000 		_ADR DUPP 
 208 240c 352A0000 		_ADR SEED 
 209 2410 09250000 		_ADR STORE 
ARM GAS  forth.s 			page 90


 210 2414 97240000 		_DOLIT 0x7FFFFFFF
 210      FFFFFF7F 
 211 241c 0D260000 		_ADR ANDD 
 212 2420 D9250000 		_ADR SWAP 
 213 2424 C92D0000 		_ADR MODD 
 214 2428 1F230000 		_UNNEST 
 215              	
 216              	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221 242c B4230000 		_HEADER PAUSE,5,"PAUSE"
 221      05504155 
 221      534500BF 
 222 2438 504700BF 		_NEST 
 223 243c 5D2A0000 		_ADR TIMER 
 224 2440 09250000 		_ADR STORE 
 225              	PAUSE_LOOP:
 226 2444 5D2A0000 		_ADR TIMER 
 227 2448 1D250000 		_ADR AT 
 228 244c D7240000 		_QBRAN PAUSE_EXIT 
 228      5C240000 
 229 2454 EB240000 		_BRAN PAUSE_LOOP 
 229      44240000 
 230              	PAUSE_EXIT: 		
 231 245c 1F230000 		_UNNEST 
 232              	
 233              	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237 2460 30240000 		_HEADER ULED,4,"ULED"
 237      04554C45 
 237      440000BF 
 238 246c 4FF40050 		mov T0,#(1<<LED_PIN)
 239 2470 4FF40061 		_MOV32 T1,LED_GPIO 
 239      C4F20201 
 240 2478 3600     		movs TOS,TOS 
 241 247a 57F8046B 		_POP
 242 247e 03D0     		beq ULED_OFF
 243 2480 4FEA0040 		lsl T0,#16 
 244 2484 8861     		str T0,[T1,#GPIO_BSRR]
 245 2486 47E7     		_NEXT 
 246              	ULED_OFF:
 247 2488 8861     		str T0,[T1,#GPIO_BSRR]
 248 248a 45E7     		_NEXT    
 249              	
 250              	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
ARM GAS  forth.s 			page 91


 259              	*********************/
 260 248c 64240000 		_HEADER NOP,3,"NOP"
 260      034E4F50 
 261 2494 40E7     		_NEXT 
 262              	 
 263              	/********************
 264              	    doLIT	( -- w )
 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269 2496 47F8046D 		_PUSH				//  store TOS on data stack
 270 249a 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 249e 3BE7     		_NEXT 
 272              	
 273              	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
 277 24a0 90240000 		_HEADER EXECU,7,"EXECUTE"
 277      07455845 
 277      43555445 
 278 24ac 46F00105 		ORR	WP,TOS,#1 
 279 24b0 57F8046B 		_POP
 280 24b4 2847     		BX WP 
 281 24b6 2FE7     		_NEXT 
 282              	
 283              	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291 24b8 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 292 24bc 22B9     		CBNZ T2,NEXT1 
 293              		/* loop done */
 294 24be 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 295 24c2 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 296 24c6 27E7     		_NEXT
 297              	NEXT1:
 298              		/* decrement loop counter */
 299 24c8 A2F10102 		SUB	T2,T2,#1
 300 24cc C8F80020 		STR	T2,[RSP]
 301 24d0 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 302 24d4 20E7     		_NEXT 
 303              	
 304              	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310 24d6 3600     		MOVS	TOS,TOS
 311 24d8 57F8046B 		_POP
 312 24dc 02D1     		BNE	QBRAN1
ARM GAS  forth.s 			page 92


 313 24de DCF800C0 		LDR	IP,[IP]
 314 24e2 19E7     		_NEXT
 315              	QBRAN1:
 316 24e4 0CF1040C 	 	ADD	IP,IP,#4
 317 24e8 16E7     		_NEXT
 318              	
 319              	/***********************************
 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325 24ea DCF800C0 		LDR	IP,[IP]
 326 24ee 13E7     		_NEXT
 327              	
 328              	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
 332 24f0 A4240000 		_HEADER EXIT,4,"EXIT"
 332      04455849 
 332      540000BF 
 333 24fc 1F230000 		_UNNEST
 334              	
 335              	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339 2500 F4240000 		_HEADER STORE,1,"!"
 339      012100BF 
 340 2508 57F8045B 		LDR	WP,[DSP],#4
 341 250c 3560     		STR	WP,[TOS]
 342 250e 57F8046B 		_POP
 343 2512 01E7     		_NEXT 
 344              	
 345              	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349 2514 04250000 		_HEADER AT,1,"@"
 349      014000BF 
 350 251c 3668     		LDR	TOS,[TOS]
 351 251e FBE6     		_NEXT 
 352              	
 353              	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357 2520 18250000 		_HEADER CSTOR,2,"C!"
 357      02432100 
 358 2528 57F8045B 		LDR	WP,[DSP],#4
 359 252c 3570     		STRB WP,[TOS]
 360 252e 57F8046B 		_POP
 361 2532 F1E6     		_NEXT
 362              	
 363              	/*********************************************
 364              	    C@	  ( b -- c )
ARM GAS  forth.s 			page 93


 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367 2534 24250000 		_HEADER CAT,2,"C@"
 367      02434000 
 368 253c 3678     		LDRB	TOS,[TOS]
 369 253e EBE6     		_NEXT 
 370              	
 371              	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375 2540 38250000 		_HEADER RFROM,2,"R>"
 375      02523E00 
 376 2548 47F8046D 		_PUSH
 377 254c 58F8046B 		LDR	TOS,[RSP],#4
 378 2550 E2E6     		_NEXT 
 379              	
 380              	/************************************************
 381              	    R@	  ( -- w )
 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384 2552 44250000 		_HEADER RAT,2,"R@"
 384      02524000 
 384      00BF
 385 255c 47F8046D 		_PUSH
 386 2560 D8F80060 		LDR	TOS,[RSP]
 387 2564 D8E6     		_NEXT 
 388              	
 389              	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393 2566 56250000 		_HEADER TOR,2,">R"
 393      023E5200 
 393      00BF
 394 2570 48F8046D 		STR	TOS,[RSP,#-4]!
 395 2574 57F8046B 		_POP
 396 2578 CEE6     		_NEXT
 397              	
 398              	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
 401              	*******************************/
 402 257a 6A250000 		_HEADER RPSTOR,3,"RP!"
 402      03525021 
 402      00BF
 403 2584 B046     		MOV RSP,TOS 
 404 2586 57F8046B 		_POP  
 405 258a C5E6     		_NEXT 
 406              	
 407              	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411 258c 7E250000 		_HEADER SPSTOR,3,"SP!"
 411      03535021 
 412 2594 3746     		MOV DSP,TOS 
ARM GAS  forth.s 			page 94


 413 2596 86EA0606 		EOR TOS,TOS,TOS 
 414 259a BDE6     		_NEXT 
 415              	
 416              	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
 420 259c 90250000 		_HEADER SPAT,3,"SP@"
 420      03535040 
 421 25a4 47F8046D 		_PUSH
 422 25a8 3E46     		MOV	TOS,DSP
 423 25aa B5E6     		_NEXT
 424              	
 425              	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429 25ac A0250000 		_HEADER DROP,4,"DROP"
 429      0444524F 
 429      500000BF 
 430 25b8 57F8046B 		_POP
 431 25bc ACE6     		_NEXT 
 432              	
 433              	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437 25be B0250000 		_HEADER DUPP,3,"DUP"
 437      03445550 
 437      00BF
 438 25c8 47F8046D 		_PUSH
 439 25cc A4E6     		_NEXT 
 440              	
 441              	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445 25ce C2250000 		_HEADER SWAP,4,"SWAP"
 445      04535741 
 445      5000
 446 25d8 3D68     		LDR	WP,[DSP]
 447 25da 3E60     		STR	TOS,[DSP]
 448 25dc 2E46     		MOV	TOS,WP
 449 25de 9BE6     		_NEXT 
 450              	
 451              	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455 25e0 D2250000 		_HEADER OVER,4,"OVER"
 455      044F5645 
 455      520000BF 
 456 25ec 47F8046D 		_PUSH
 457 25f0 7E68     		LDR	TOS,[DSP,#4]
 458 25f2 91E6     		_NEXT 
 459              	
 460              	/***********************************
ARM GAS  forth.s 			page 95


 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
 464 25f4 E4250000 		_HEADER ZLESS,2,"0<"
 464      02303C00 
 465 25fc 4FEAE676 		ASR TOS,#31
 466 2600 8AE6     		_NEXT 
 467              	
 468              	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472 2602 F8250000 		_HEADER ANDD,3,"AND"
 472      03414E44 
 472      00BF
 473 260c 57F8045B 		LDR	WP,[DSP],#4
 474 2610 06EA0506 		AND	TOS,TOS,WP
 475 2614 80E6     		_NEXT 
 476              	
 477              	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481 2616 06260000 		_HEADER ORR,2,"OR"
 481      024F5200 
 481      00BF
 482 2620 57F8045B 		LDR	WP,[DSP],#4
 483 2624 46EA0506 		ORR	TOS,TOS,WP
 484 2628 76E6     		_NEXT 
 485              	
 486              	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490 262a 1A260000 		_HEADER XORR,3,"XOR"
 490      03584F52 
 490      00BF
 491 2634 57F8045B 		LDR	WP,[DSP],#4
 492 2638 86EA0506 		EOR	TOS,TOS,WP
 493 263c 6CE6     		_NEXT 
 494              	
 495              	/**************************************************
 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499 263e 2E260000 		_HEADER UPLUS,3,"UM+"
 499      03554D2B 
 499      00BF
 500 2648 3D68     		LDR	WP,[DSP]
 501 264a AD19     		ADDS	WP,WP,TOS
 502 264c 4FF00006 		MOV	TOS,#0
 503 2650 46F10006 		ADC	TOS,TOS,#0
 504 2654 3D60     		STR	WP,[DSP]
 505 2656 5FE6     		_NEXT 
 506              	
 507              	/*********************************
 508              	    RSHIFT	 ( w # -- w )
ARM GAS  forth.s 			page 96


 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511 2658 42260000 		_HEADER RSHIFT,6,"RSHIFT"
 511      06525348 
 511      49465400 
 512 2664 57F8045B 		LDR	WP,[DSP],#4
 513 2668 45FA06F6 		MOV	TOS,WP,ASR TOS
 514 266c 54E6     		_NEXT 
 515              	
 516              	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520 266e 5C260000 		_HEADER LSHIFT,6,"LSHIFT"
 520      064C5348 
 520      49465400 
 520      00BF
 521 267c 57F8045B 		LDR	WP,[DSP],#4
 522 2680 05FA06F6 		MOV	TOS,WP,LSL TOS
 523 2684 48E6     		_NEXT
 524              	
 525              	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529 2686 72260000 		_HEADER PLUS,1,"+"
 529      012B
 530 268c 57F8045B 		LDR	WP,[DSP],#4
 531 2690 2E44     		ADD	TOS,TOS,WP
 532 2692 41E6     		_NEXT 
 533              	
 534              	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538 2694 8A260000 		_HEADER SUBB,1,"-"
 538      012D00BF 
 539 269c 57F8045B 		LDR	WP,[DSP],#4
 540 26a0 C6EB0506 		RSB	TOS,TOS,WP
 541 26a4 38E6     		_NEXT 
 542              	
 543              	/************************
 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547 26a6 98260000 		_HEADER STAR,1,"*"
 547      012A
 548 26ac 57F8045B 		LDR	WP,[DSP],#4
 549 26b0 05FB06F6 		MUL	TOS,WP,TOS
 550 26b4 30E6     		_NEXT 
 551              	
 552              	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556 26b6 AA260000 		_HEADER UMSTA,3,"UM*"
 556      03554D2A 
ARM GAS  forth.s 			page 97


 556      00BF
 557 26c0 3D68     		LDR	WP,[DSP]
 558 26c2 A6FB0523 		UMULL	T2,T3,TOS,WP
 559 26c6 3A60     		STR	T2,[DSP]
 560 26c8 1E46     		MOV	TOS,T3
 561 26ca 25E6     		_NEXT 
 562              	
 563              	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              		hold double result
 567              	***************************/
 568 26cc BA260000 		_HEADER MSTAR,2,"M*"
 568      024D2A00 
 569 26d4 3D68     		LDR	WP,[DSP]
 570 26d6 86FB0523 		SMULL	T2,T3,TOS,WP
 571 26da 3A60     		STR	T2,[DSP]
 572 26dc 1E46     		MOV	TOS,T3
 573 26de 1BE6     		_NEXT 
 574              	
 575              	/***************************
 576              	    1+	 ( w -- w+1 )
 577              	 	Add 1.
 578              	***************************/
 579 26e0 D0260000 		_HEADER ONEP,2,"1+"
 579      02312B00 
 580 26e8 06F10106 		ADD	TOS,TOS,#1
 581 26ec 14E6     		_NEXT 
 582              	
 583              	/***************************
 584              	    1-	 ( w -- w-1 )
 585              	 	Subtract 1.
 586              	***************************/
 587 26ee E4260000 		_HEADER ONEM,2,"1-"
 587      02312D00 
 587      00BF
 588 26f8 A6F10106 		SUB	TOS,TOS,#1
 589 26fc 0CE6     		_NEXT 
 590              	
 591              	/***************************
 592              	    2+	 ( w -- w+2 )
 593              	 	Add 2.
 594              	**************************/
 595 26fe F2260000 		_HEADER TWOP,2,"2+"
 595      02322B00 
 595      00BF
 596 2708 06F10206 		ADD	TOS,TOS,#2
 597 270c 04E6     		_NEXT
 598              	
 599              	/**************************
 600              	    2-	 ( w -- w-2 )
 601              	 	Subtract 2.
 602              	**************************/
 603 270e 02270000 		_HEADER TWOM,2,"2-"
 603      02322D00 
 603      00BF
 604 2718 A6F10206 		SUB	TOS,TOS,#2
ARM GAS  forth.s 			page 98


 605 271c FCE5     		_NEXT
 606              	
 607              	/***************************
 608              	    CELL+	( w -- w+4 )
 609              	 	Add CELLL.
 610              	***************************/
 611 271e 12270000 		_HEADER CELLP,5,"CELL+"
 611      0543454C 
 611      4C2B
 612 2728 06F10406 		ADD	TOS,TOS,#CELLL
 613 272c F4E5     		_NEXT
 614              	
 615              	/***************************
 616              	    CELL-	( w -- w-4 )
 617              	 	Subtract CELLL.
 618              	**************************/
 619 272e 22270000 		_HEADER CELLM,5,"CELL-"
 619      0543454C 
 619      4C2D
 620 2738 A6F10406 		SUB	TOS,TOS,#CELLL
 621 273c ECE5     		_NEXT
 622              	
 623              	/**************************** 
 624              	    BL	( -- 32 )
 625              	 	Blank (ASCII space).
 626              	*****************************/
 627 273e 32270000 		_HEADER BLANK,2,"BL"
 627      02424C00 
 627      00BF
 628 2748 47F8046D 		_PUSH
 629 274c 4FF02006 		MOV	TOS,#32
 630 2750 E2E5     		_NEXT 
 631              	
 632              	/**************************
 633              	    CELLS	( w -- w*4 )
 634              	 	Multiply CELLL 
 635              	***************************/
 636 2752 42270000 		_HEADER CELLS,5,"CELLS"
 636      0543454C 
 636      4C53
 637 275c 4FEA8606 		LSL TOS,#2
 638 2760 DAE5     		_NEXT
 639              	
 640              	/***************************
 641              	    CELL/	( w -- w/4 )
 642              	 	Divide by CELLL.
 643              	***************************/
 644 2762 56270000 		_HEADER CELLSL,5,"CELL/"
 644      0543454C 
 644      4C2F
 645 276c 4FEAA606 		ASR TOS,#2
 646 2770 D2E5     		_NEXT
 647              	
 648              	/*************************
 649              	    2*	( w -- w*2 )
 650              	 	Multiply 2.
 651              	*************************/
ARM GAS  forth.s 			page 99


 652 2772 66270000 		_HEADER TWOST,2,"2*"
 652      02322A00 
 652      00BF
 653 277c 4FEA4606 		MOV	TOS,TOS,LSL#1
 654 2780 CAE5     		_NEXT
 655              	
 656              	/*************************
 657              	    2/	( w -- w/2 )
 658              	 	Divide by 2.
 659              	***********************/
 660 2782 76270000 		_HEADER TWOSL,2,"2/"
 660      02322F00 
 660      00BF
 661 278c 4FEA6606 		MOV	TOS,TOS,ASR#1
 662 2790 C2E5     		_NEXT
 663              	
 664              	/****************************
 665              	    ?DUP	( w -- w w | 0 )
 666              	 	Conditional duplicate.
 667              	*****************************/
 668 2792 86270000 		_HEADER QDUP,4,"?DUP"
 668      043F4455 
 668      5000
 669 279c 3500     		MOVS	WP,TOS
 670 279e 18BF     		IT NE 
 671 27a0 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 672 27a4 B8E5     		_NEXT
 673              	
 674              	/***********************************
 675              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 676              	 	Rotate top 3 items.
 677              	*************************************/
 678 27a6 96270000 		_HEADER ROT,3,"ROT"
 678      03524F54 
 678      00BF
 679 27b0 3868     		LDR	T0,[DSP]  // w2 
 680 27b2 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 681 27b4 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 682 27b6 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 683 27b8 AEE5     		_NEXT
 684              	
 685              	/*********************************
 686              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 687              	 left rotate top 3 elements 
 688              	********************************/
 689 27ba AA270000 		_HEADER NROT,4,"-ROT"
 689      042D524F 
 689      5400
 690 27c4 7868     		LDR T0,[DSP,#4]
 691 27c6 7E60     		STR TOS,[DSP,#4]	
 692 27c8 3E68     		LDR TOS,[DSP]
 693 27ca 3860     		STR T0,[DSP]
 694 27cc A4E5     		_NEXT 
 695              	
 696              	/*********************************
 697              	    2DROP	( w1 w2 -- )
 698              	 	Drop top 2 items.
ARM GAS  forth.s 			page 100


 699              	*********************************/
 700 27ce BE270000 		_HEADER DDROP,5,"2DROP"
 700      05324452 
 700      4F50
 701 27d8 57F8046B 		_POP
 702 27dc 57F8046B 		_POP
 703 27e0 9AE5     		_NEXT 
 704              	
 705              	/********************************
 706              		3DROP ( w1 w2 w3 -- )
 707              		drop top 3 items 
 708              	********************************/
 709 27e2 D2270000 		_HEADER TDROP,5,"3DROP"
 709      05334452 
 709      4F50
 710 27ec 07F10807 	    add DSP,#8 
 711 27f0 57F8046B 	    _POP 
 712 27f4 90E5     	    _NEXT 
 713              	
 714              	/***********************************
 715              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 716              	 	Duplicate top 2 items.
 717              	************************************/
 718 27f6 E6270000 		_HEADER DDUP,4,"2DUP"
 718      04324455 
 718      5000
 719 2800 3868     		LDR	T0,[DSP] // w1
 720 2802 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 721 2806 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 722 280a 85E5     		_NEXT
 723              	
 724              	/******************************
 725              	    D+	( d1 d2 -- d3 )
 726              	 	Add top 2 double numbers.
 727              	******************************/
 728 280c FA270000 		_HEADER DPLUS,2,"D+"
 728      02442B00 
 729 2814 57F8045B 		LDR	WP,[DSP],#4
 730 2818 57F8042B 		LDR	T2,[DSP],#4
 731 281c 3B68     		LDR	T3,[DSP]
 732 281e ED18     		ADDS	WP,WP,T3
 733 2820 3D60     		STR	WP,[DSP]
 734 2822 46EB0206 		ADC	TOS,TOS,T2
 735 2826 77E5     		_NEXT
 736              	
 737              	/******************************
 738              		DABS ( d -- ud )
 739              		absolute value double 
 740              	*****************************/
 741 2828 10280000 		_HEADER DABS,4,"DABS"
 741      04444142 
 741      530000BF 
 742 2834 16F0004F 		tst TOS,#(1<<31)
 743 2838 09D0     		beq 9f 
 744 283a 6FEA0606 		mvn TOS,TOS 
 745 283e 3D68     		ldr WP,[DSP]
 746 2840 6FEA0505 		mvn WP,WP 
ARM GAS  forth.s 			page 101


 747 2844 0135     		adds WP,#1
 748 2846 3D60     		str WP,[DSP]
 749 2848 01D3     		bcc 9f 
 750 284a 06F10106 		add TOS,#1 
 751 284e 63E5     	9:	_NEXT 
 752              	
 753              	/*****************************
 754              	  UD> ( d1 d2 -- f )
 755              	  unsigned compare double d1 > d2 
 756              	******************************/
 757 2850 2C280000 		_HEADER UDGREAT,3,"UD>"
 757      0355443E 
 758 2858 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 759 285c 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 760 285e B042     		cmp T0,TOS 
 761 2860 02D8     		bhi 1f
 762 2862 04D4     		bmi 2f  
 763 2864 A942     		cmp T1,WP 
 764 2866 02D9     		bls 2f 
 765 2868 4FF0FF36 	1:	mov TOS,#-1 
 766 286c 54E5     		_NEXT 
 767 286e 4FF00006 	2:  mov TOS,#0 
 768 2872 51E5     		_NEXT 
 769              	
 770              	/******************************
 771              		D0= ( d -- f )
 772              		double 0= 
 773              	*****************************/
 774 2874 54280000 		_HEADER DZEQUAL,3,"D0="
 774      0344303D 
 775 287c 3046     		mov T0,TOS
 776 287e 57F8046B 		_POP 
 777 2882 46EA0006 		orr TOS,T0 
 778 2886 01D0     		beq 9f
 779 2888 6FF00006 		mvn TOS,#0 
 780 288c 44E5     	9:	_NEXT 
 781              	
 782              	/*****************************
 783              	    NOT	 ( w -- !w )
 784              	 	1"s complement.
 785              	*****************************/
 786 288e 78280000 		_HEADER INVER,3,"NOT"
 786      034E4F54 
 786      00BF
 787 2898 6FEA0606 		MVN	TOS,TOS
 788 289c 3CE5     		_NEXT
 789              	
 790              	/*****************************
 791              	    NEGATE	( w -- -w )
 792              	 	2's complement.
 793              	***************************/
 794 289e 92280000 		_HEADER NEGAT,6,"NEGATE"
 794      064E4547 
 794      41544500 
 794      00BF
 795 28ac C6F10006 		RSB	TOS,TOS,#0
 796 28b0 32E5     		_NEXT
ARM GAS  forth.s 			page 102


 797              	
 798              	/***************************
 799              	    ABS	 ( w -- |w| )
 800              	 	Absolute.
 801              	**************************/
 802 28b2 A2280000 		_HEADER ABSS,3,"ABS"
 802      03414253 
 802      00BF
 803 28bc 16F0004F 		TST	TOS,#0x80000000
 804 28c0 18BF     		IT NE
 805 28c2 7642     	    RSBNE   TOS,TOS,#0
 806 28c4 28E5     		_NEXT
 807              	
 808              	/*******************
 809              	  0= ( w -- f )
 810              	 TOS==0?
 811              	*******************/
 812 28c6 B6280000 		_HEADER ZEQUAL,2,"0="
 812      02303D00 
 812      00BF
 813 28d0 16B9     		cbnz TOS,1f
 814 28d2 4FF0FF36 		mov TOS,#-1
 815 28d6 1FE5     		_NEXT 
 816 28d8 86EA0606 	1:  eor TOS,TOS,TOS  
 817 28dc 1CE5     		_NEXT 	
 818              	
 819              	/*********************
 820              	    =	 ( w w -- t )
 821              	 	Equal?
 822              	*********************/
 823 28de CA280000 		_HEADER EQUAL,1,"="
 823      013D
 824 28e4 57F8045B 		LDR	WP,[DSP],#4
 825 28e8 AE42     		CMP	TOS,WP
 826 28ea 0CBF     		ITE EQ 
 827 28ec 6FF00006 	    MVNEQ	TOS,#0
 828 28f0 0026     		MOVNE	TOS,#0
 829 28f2 11E5     		_NEXT
 830              	
 831              	/************************
 832              		<> ( w w -- f )
 833              		different?
 834              	************************/
 835 28f4 E2280000 		_HEADER DIFF,2,"<>"
 835      023C3E00 
 836 28fc 3046     		mov T0,TOS 
 837 28fe 57F8046B 		_POP 
 838 2902 86EA0006 		eor TOS,T0
 839 2906 B6FA86F0 		clz T0,TOS 
 840 290a 06FA00F6 		lsl TOS,T0 
 841 290e 4FEAE676 		asr TOS,#31 
 842 2912 01E5     		_NEXT 
 843              	
 844              	/************************
 845              	    U<	 ( w w -- t )
 846              	 	Unsigned less?
 847              	*************************/
ARM GAS  forth.s 			page 103


 848 2914 F8280000 		_HEADER ULESS,2,"U<"
 848      02553C00 
 849 291c 57F8045B 		LDR	WP,[DSP],#4
 850 2920 B542     		CMP	WP,TOS
 851 2922 34BF     		ITE CC 
 852 2924 6FF00006 		MVNCC	TOS,#0
 853 2928 0026     		MOVCS	TOS,#0
 854 292a F5E4     		_NEXT
 855              	
 856              	/**********************
 857              	    <	( w w -- t )
 858              	 	Less?
 859              	**********************/
 860 292c 18290000 		_HEADER LESS,1,"<"
 860      013C00BF 
 861 2934 57F8045B 		LDR	WP,[DSP],#4
 862 2938 B542     		CMP	WP,TOS
 863 293a B4BF     	    ITE LT
 864 293c 6FF00006 		MVNLT	TOS,#0
 865 2940 0026     		MOVGE	TOS,#0
 866 2942 E9E4     		_NEXT 
 867              	
 868              	/**********************
 869              		U> ( u u -- t|f )
 870              	    unsigned greater 
 871              	**********************/
 872 2944 30290000 		_HEADER UGREAT,2,"U>"
 872      02553E00 
 873 294c 57F8045B 		LDR WP,[DSP],#4 
 874 2950 AE42     		CMP TOS,WP 
 875 2952 34BF     		ITE CC  
 876 2954 6FF00006 		MVNCC TOS,#0 
 877 2958 0026     		MOVCS TOS,#0
 878 295a DDE4     		_NEXT 
 879              	
 880              	/***********************
 881              	    >	( w w -- t )
 882              	 	greater?
 883              	***********************/
 884 295c 48290000 		_HEADER GREAT,1,">"
 884      013E00BF 
 885 2964 57F8045B 		LDR	WP,[DSP],#4
 886 2968 B542     		CMP	WP,TOS
 887 296a CCBF     		ITE GT
 888 296c 6FF00006 	    MVNGT	TOS,#0
 889 2970 0026     		MOVLE	TOS,#0
 890 2972 D1E4     		_NEXT
 891              	
 892              	/***************************
 893              	    MAX	 ( w w -- max )
 894              	 	Leave maximum.
 895              	***************************/
 896 2974 60290000 		_HEADER MAX,3,"MAX"
 896      034D4158 
 897 297c 57F8045B 		LDR	WP,[DSP],#4
 898 2980 B542     		CMP	WP,TOS
 899 2982 C8BF     		IT GT 
ARM GAS  forth.s 			page 104


 900 2984 2E46     		MOVGT	TOS,WP
 901 2986 C7E4     		_NEXT 
 902              	
 903              	/**************************
 904              	    MIN	 ( w w -- min )
 905              	 	Leave minimum.
 906              	**************************/
 907 2988 78290000 		_HEADER MIN,3,"MIN"
 907      034D494E 
 908 2990 57F8045B 		LDR	WP,[DSP],#4
 909 2994 B542     		CMP	WP,TOS
 910 2996 B8BF     		IT LT
 911 2998 2E46     		MOVLT	TOS,WP
 912 299a BDE4     		_NEXT
 913              	
 914              	/***********************
 915              	    +!	 ( w a -- )
 916              	 	Add to memory.
 917              	***********************/
 918 299c 8C290000 		_HEADER PSTOR,2,"+!"
 918      022B2100 
 919 29a4 57F8045B 		LDR	WP,[DSP],#4
 920 29a8 3268     		LDR	T2,[TOS]
 921 29aa 2A44     		ADD	T2,T2,WP
 922 29ac 3260     		STR	T2,[TOS]
 923 29ae 57F8046B 		_POP
 924 29b2 B1E4     		_NEXT
 925              	
 926              	/************************
 927              	    2!	 ( d a -- )
 928              	 	Store double number.
 929              	*************************/
 930 29b4 A0290000 		_HEADER DSTOR,2,"2!"
 930      02322100 
 931 29bc 57F8045B 		LDR	WP,[DSP],#4
 932 29c0 57F8042B 		LDR	T2,[DSP],#4
 933 29c4 46F8045B 		STR	WP,[TOS],#4
 934 29c8 3260     		STR	T2,[TOS]
 935 29ca 57F8046B 		_POP
 936 29ce A3E4     		_NEXT
 937              	
 938              	/************************
 939              	    2@	 ( a -- d )
 940              	 	Fetch double number.
 941              	************************/
 942 29d0 B8290000 		_HEADER DAT,2,"D@"
 942      02444000 
 943 29d8 7568     		LDR	WP,[TOS,#4]
 944 29da 47F8045D 		STR	WP,[DSP,#-4]!
 945 29de 3668     		LDR	TOS,[TOS]
 946 29e0 9AE4     		_NEXT
 947              	
 948              	/***************************
 949              	    COUNT	( b -- b+1 c )
 950              	 	Fetch length of string.
 951              	****************************/
 952 29e2 D4290000 		_HEADER COUNT,5,"COUNT"
ARM GAS  forth.s 			page 105


 952      05434F55 
 952      4E54
 953 29ec 16F8015B 		LDRB	WP,[TOS],#1
 954 29f0 47F8046D 		_PUSH
 955 29f4 2E46     		MOV	TOS,WP
 956 29f6 8FE4     		_NEXT
 957              	
 958              	/******************************
 959              	    DNEGATE	( d -- -d )
 960              	 	Negate double number.
 961              	**************************/
 962 29f8 E6290000 		_HEADER DNEGA,7,"DNEGATE"
 962      07444E45 
 962      47415445 
 963 2a04 3D68     		LDR	WP,[DSP]
 964 2a06 A2EB0202 		SUB	T2,T2,T2
 965 2a0a 551B     		SUBS WP,T2,WP
 966 2a0c 62EB0606 		SBC	TOS,T2,TOS
 967 2a10 3D60     		STR	WP,[DSP]
 968 2a12 81E4     		_NEXT
 969              	
 970              	/******************************
 971              	  System and user variables
 972              	******************************/
 973              	
 974              	/*******************************
 975              	  doVAR	( -- a )
 976              	  Run time routine for VARIABLE and CREATE.
 977              	hidden word used by compiler
 978              	********************************/
 979              	DOVAR:
 980 2a14 47F8046D 		_PUSH
 981 2a18 6646     		MOV TOS,IP
 982 2a1a 0CF1040C 		ADD IP,IP,#4 
 983 2a1e 7EE4     		B UNNEST 
 984              	
 985              	/**********************************
 986              	    doCON	( -- a ) 
 987              	 	Run time routine for CONSTANT.
 988              	hidden word used by compiler 
 989              	***********************************/
 990              	DOCON:
 991 2a20 47F8046D 		_PUSH
 992 2a24 5CF8046B 		LDR.W TOS,[IP],#4 
 993 2a28 79E4     		B UNNEST 
 994              	
 995              	/***********************
 996              	  system variables 
 997              	***********************/
 998              	
 999              	/**************************
 1000              	 SEED ( -- a)
 1001              	 return PRNG seed address 
 1002              	**************************/
 1003 2a2a FC290000 		_HEADER SEED,4,"SEED"
 1003      04534545 
 1003      4400
ARM GAS  forth.s 			page 106


 1004 2a34 47F8046D 		_PUSH 
 1005 2a38 04F10406 		ADD TOS,UP,#RNDSEED
 1006 2a3c 6CE4     		_NEXT 	
 1007              	
 1008              	/****************************************
 1009              	  MSEC ( -- a)
 1010              	 return address of milliseconds counter
 1011              	****************************************/
 1012 2a3e 2E2A0000 		_HEADER MSEC,4,"MSEC"
 1012      044D5345 
 1012      4300
 1013 2a48 47F8046D 	    _PUSH
 1014 2a4c 04F10806 	    ADD TOS,UP,#TICKS
 1015 2a50 62E4     	    _NEXT 
 1016              	
 1017              	/*************************
 1018              	 TIMER ( -- a )
 1019              	 count down timer 
 1020              	**********************/
 1021 2a52 422A0000 		_HEADER TIMER,5,"TIMER"
 1021      0554494D 
 1021      4552
 1022 2a5c 47F8046D 		 _PUSH 
 1023 2a60 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1024 2a64 58E4     	    _NEXT
 1025              	
 1026              	/*****************************
 1027              	    'BOOT	 ( -- a )
 1028              	 	boot up application vector 
 1029              	*****************************/
 1030 2a66 562A0000 		_HEADER TBOOT,5,"'BOOT"
 1030      0527424F 
 1030      4F54
 1031 2a70 47F8046D 		_PUSH
 1032 2a74 04F11006 		ADD	TOS,UP,#BOOT 
 1033 2a78 4EE4     		_NEXT
 1034              		
 1035              	/********************************************	
 1036              	    BASE	( -- a )
 1037              	 	Storage of the radix base for numeric I/O.
 1038              	**********************************************/
 1039 2a7a 6A2A0000 		_HEADER BASE,4,"BASE"
 1039      04424153 
 1039      4500
 1040 2a84 47F8046D 		_PUSH
 1041 2a88 04F11C06 		ADD	TOS,UP,#NBASE
 1042 2a8c 44E4     		_NEXT
 1043              	
 1044              	/*****************************************************
 1045              	    temp	 ( -- a )
 1046              	 	A temporary storage location used in parse and find.
 1047              	hidden word for internal use
 1048              	********************************************************/
 1049              	TEMP:
 1050 2a8e 47F8046D 		_PUSH
 1051 2a92 04F12006 		ADD	TOS,UP,#TMP
 1052 2a96 3FE4     		_NEXT
ARM GAS  forth.s 			page 107


 1053              	
 1054              	/*******************************************
 1055              	    SPAN	( -- a )
 1056              	 	Hold character count received by EXPECT.
 1057              	********************************************/
 1058 2a98 7E2A0000 		_HEADER SPAN,4,"SPAN"
 1058      04535041 
 1058      4E0000BF 
 1059 2aa4 47F8046D 		_PUSH
 1060 2aa8 04F12406 		ADD	TOS,UP,#CSPAN
 1061 2aac 34E4     		_NEXT
 1062              	
 1063              	/***********************************************************
 1064              	    >IN	 ( -- a )
 1065              	 	Hold the character pointer while parsing input stream.
 1066              	***********************************************************/
 1067 2aae 9C2A0000 		_HEADER INN,3,">IN"
 1067      033E494E 
 1067      00BF
 1068 2ab8 47F8046D 		_PUSH
 1069 2abc 04F12806 		ADD	TOS,UP,#TOIN
 1070 2ac0 2AE4     		_NEXT
 1071              	
 1072              	/**************************************
 1073              	    #TIB	( -- a )
 1074              	 	Hold the current count and address 
 1075              		of the terminal input buffer.
 1076              	**************************************/
 1077 2ac2 B22A0000 		_HEADER NTIB,4,"#TIB"
 1077      04235449 
 1077      4200
 1078 2acc 47F8046D 		_PUSH
 1079 2ad0 04F12C06 		ADD	TOS,UP,#NTIBB
 1080 2ad4 20E4     		_NEXT
 1081              	
 1082              	/******************************
 1083              	    'EVAL	( -- a )
 1084              	 	Execution vector of EVAL.
 1085              	*******************************/
 1086 2ad6 C62A0000 		_HEADER TEVAL,5,"'EVAL"
 1086      05274556 
 1086      414C
 1087 2ae0 47F8046D 		_PUSH
 1088 2ae4 04F13406 		ADD	TOS,UP,#EVAL
 1089 2ae8 16E4     		_NEXT
 1090              	
 1091              	/*********************************
 1092              	    HLD	 ( -- a )
 1093              	 	Hold a pointer in building a 
 1094              		numeric output string.
 1095              	*********************************/
 1096 2aea DA2A0000 		_HEADER HLD,3,"HLD"
 1096      03484C44 
 1096      00BF
 1097 2af4 47F8046D 		_PUSH
 1098 2af8 04F13806 		ADD	TOS,UP,#VHOLD
 1099 2afc 0CE4     		_NEXT
ARM GAS  forth.s 			page 108


 1100              	
 1101              	/**********************************
 1102              	    CONTEXT	( -- a )
 1103              	 	A area to specify vocabulary 
 1104              		search order.
 1105              	**********************************/
 1106 2afe EE2A0000 		_HEADER CNTXT,7,"CONTEXT"
 1106      07434F4E 
 1106      54455854 
 1106      00BF
 1107              	CRRNT:
 1108 2b0c 47F8046D 		_PUSH
 1109 2b10 04F13C06 		ADD	TOS,UP,#CTXT
 1110 2b14 00E4     		_NEXT
 1111              	
 1112              	/******************************
 1113              	    CP	( -- a )
 1114              	 	Point to top name in RAM 
 1115              		vocabulary.
 1116              	******************************/
 1117 2b16 022B0000 		_HEADER CPP,2,"CP"
 1117      02435000 
 1117      00BF
 1118 2b20 47F8046D 		_PUSH
 1119 2b24 04F14406 		ADD	TOS,UP,#USER_CTOP
 1120 2b28 FFF7F6BB 		_NEXT
 1121              	
 1122              	/****************************
 1123              	   FCP ( -- a )
 1124              	  Point ot top of Forth 
 1125              	  system dictionary
 1126              	****************************/
 1127 2b2c 1A2B0000 		_HEADER FCP,3,"FCP"
 1127      03464350 
 1128 2b34 47F8046D 		_PUSH 
 1129 2b38 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1130 2b3c FFF7ECBB 		_NEXT 
 1131              	
 1132              	/***************************
 1133              	    LAST	( -- a )
 1134              	 	Point to the last name 
 1135              		in the name dictionary.
 1136              	***************************/
 1137 2b40 302B0000 		_HEADER LAST,4,"LAST"
 1137      044C4153 
 1137      540000BF 
 1138 2b4c 47F8046D 		_PUSH
 1139 2b50 04F14806 		ADD	TOS,UP,#LASTN
 1140 2b54 FFF7E0BB 		_NEXT
 1141              	
 1142              	
 1143              	/***********************
 1144              		system constants 
 1145              	***********************/
 1146              	
 1147              	/********************************
 1148              		USER-BEGIN ( -- a )
ARM GAS  forth.s 			page 109


 1149              	  where user area begin in RAM
 1150              	********************************/
 1151 2b58 442B0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1151      0A555345 
 1151      522D4245 
 1151      47494E00 
 1152 2b68 47F8046D 		_PUSH 
 1153 2b6c DFF80460 		ldr TOS,USR_BGN_ADR 
 1154 2b70 FFF7D2BB 		_NEXT 
 1155              	USR_BGN_ADR:
 1156 2b74 12050020 	.word  DTOP 
 1157              	
 1158              	/*********************************
 1159              	  USER_END ( -- a )
 1160              	  where user area end in RAM 
 1161              	******************************/
 1162 2b78 5C2B0000 		_HEADER USER_END,8,"USER-END"
 1162      08555345 
 1162      522D454E 
 1162      440000BF 
 1163 2b88 47F8046D 		_PUSH 
 1164 2b8c DFF80460 		ldr TOS,USER_END_ADR 
 1165 2b90 FFF7C2BB 		_NEXT 
 1166              	USER_END_ADR:
 1167 2b94 FC800120 		.word DEND 
 1168              	
 1169              	
 1170              	/* *********************
 1171              	  Common functions
 1172              	***********************/
 1173              	
 1174              	/********************************
 1175              	    WITHIN	( u ul uh -- t )
 1176              	 	Return true if u is within 
 1177              		the range of ul and uh.
 1178              	********************************/
 1179 2b98 7C2B0000 		_HEADER WITHI,6,"WITHIN"
 1179      06574954 
 1179      48494E00 
 1180 2ba4 504700BF 		_NEST
 1181 2ba8 ED250000 		_ADR	OVER
 1182 2bac 9D260000 		_ADR	SUBB
 1183 2bb0 71250000 		_ADR	TOR
 1184 2bb4 9D260000 		_ADR	SUBB
 1185 2bb8 49250000 		_ADR	RFROM
 1186 2bbc 1D290000 		_ADR	ULESS
 1187 2bc0 1F230000 		_UNNEST
 1188              	
 1189              	//  Divide
 1190              	
 1191              	/*************************************
 1192              	    UM/MOD	( udl udh u -- ur uq )
 1193              	 	Unsigned divide of a double by a 
 1194              		single. Return mod and quotient.
 1195              	**************************************/
 1196 2bc4 9C2B0000 		_HEADER UMMOD,6,"UM/MOD"
 1196      06554D2F 
ARM GAS  forth.s 			page 110


 1196      4D4F4400 
 1197 2bd0 4FF00103 		MOV	T3,#1
 1198 2bd4 57F8045B 		LDR	WP,[DSP],#4
 1199 2bd8 3A68     		LDR	T2,[DSP]
 1200              	UMMOD0:
 1201 2bda 9218     		ADDS	T2,T2,T2
 1202 2bdc 6D41     		ADCS	WP,WP,WP
 1203 2bde 04D3     		BCC	UMMOD1
 1204 2be0 A5EB0605 		SUB	WP,WP,TOS
 1205 2be4 02F10102 		ADD	T2,T2,#1
 1206 2be8 04E0     		B UMMOD2
 1207              	UMMOD1:
 1208 2bea AD1B     		SUBS	WP,WP,TOS 
 1209 2bec 28BF     		IT CS 
 1210 2bee 0132     		ADDCS	T2,T2,#1
 1211 2bf0 00D2     		BCS	UMMOD2
 1212 2bf2 3544     		ADD	WP,WP,TOS
 1213              	UMMOD2:
 1214 2bf4 DB18     		ADDS	T3,T3,T3
 1215 2bf6 F0D3     		BCC	UMMOD0
 1216 2bf8 1646     		MOV	TOS,T2
 1217 2bfa 3D60     		STR	WP,[DSP]
 1218 2bfc FFF78CBB 		_NEXT
 1219              	
 1220              	/****************************
 1221              	    M/MOD	( d n -- r q )
 1222              	 	Signed floored divide 
 1223              		of double by single. 
 1224              		Return mod and quotient.
 1225              	****************************/
 1226 2c00 C82B0000 		_HEADER MSMOD,5,"M/MOD"
 1226      054D2F4D 
 1226      4F4400BF 
 1227 2c0c 504700BF 		_NEST
 1228 2c10 C9250000 		_ADR	DUPP
 1229 2c14 FD250000 		_ADR	ZLESS
 1230 2c18 C9250000 		_ADR	DUPP
 1231 2c1c 71250000 		_ADR	TOR
 1232 2c20 D7240000 		_QBRAN MMOD1
 1232      382C0000 
 1233 2c28 AD280000 		_ADR	NEGAT
 1234 2c2c 71250000 		_ADR	TOR
 1235 2c30 052A0000 		_ADR	DNEGA
 1236 2c34 49250000 		_ADR	RFROM
 1237              	MMOD1:
 1238 2c38 71250000 		_ADR	TOR
 1239 2c3c C9250000 		_ADR	DUPP
 1240 2c40 FD250000 		_ADR	ZLESS
 1241 2c44 D7240000 		_QBRAN MMOD2
 1241      542C0000 
 1242 2c4c 5D250000 		_ADR	RAT
 1243 2c50 8D260000 		_ADR	PLUS
 1244              	MMOD2:
 1245 2c54 49250000 		_ADR	RFROM
 1246 2c58 D12B0000 		_ADR	UMMOD
 1247 2c5c 49250000 		_ADR	RFROM
 1248 2c60 D7240000 		_QBRAN	MMOD3
ARM GAS  forth.s 			page 111


 1248      742C0000 
 1249 2c68 D9250000 		_ADR	SWAP
 1250 2c6c AD280000 		_ADR	NEGAT
 1251 2c70 D9250000 		_ADR	SWAP
 1252              	MMOD3:   
 1253 2c74 1F230000 		_UNNEST
 1254              	
 1255              	/****************************
 1256              		S>D ( n -- d )
 1257              		convert single to double 
 1258              	*****************************/
 1259 2c78 042C0000 		_HEADER STOD,3,"S>D"
 1259      03533E44 
 1260 2c80 47F8046D 		_PUSH 
 1261 2c84 4FEAE676 		ASR TOS,#31
 1262 2c88 FFF746BB 		_NEXT 
 1263              	
 1264              	/****************************
 1265              		D2* ( d -- d<<1 )
 1266              		double * 2 
 1267              	***************************/
 1268 2c8c 7C2C0000 		_HEADER D2STAR,3,"D2*"
 1268      0344322A 
 1269 2c94 3868     		ldr T0,[DSP]
 1270 2c96 4000     		lsls T0,#1
 1271 2c98 3860     		str T0,[DSP]
 1272 2c9a 4FEA4606 		lsl TOS,#1
 1273 2c9e 46F10006 		adc TOS,#0
 1274 2ca2 FFF739BB 		_NEXT 
 1275              	
 1276              	/****************************
 1277              		D2/  ( d -- d>>1 )
 1278              		double signed divide by 2 
 1279              	*****************************/
 1280 2ca6 902C0000 		_HEADER D2SL,3,"D2/"
 1280      0344322F 
 1280      00BF
 1281 2cb0 3868     		ldr T0,[DSP]
 1282 2cb2 7610     		asrs TOS,#1
 1283 2cb4 4FEA3000 		rrx T0,T0 
 1284 2cb8 3860     		str T0,[DSP]
 1285 2cba FFF72DBB 		_NEXT 
 1286              	
 1287              	/***************************
 1288              		D/MOD  ( d+ n+ - r+ qd+ )
 1289              		unsigned double division
 1290              		and modulo 
 1291              		output:
 1292              			qd+ = d+ / n+
 1293              			r+ = qd+ - (d+ * n+ )
 1294              	***************************/
 1295 2cbe AA2C0000 		_HEADER DSLMOD,5,"D/MOD"
 1295      05442F4D 
 1295      4F44
 1296 2cc8 3D68     		ldr WP,[DSP]  // d+ high 
 1297 2cca 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1298 2ccc 4FF02002 		mov T2,#32 // shift counter  
ARM GAS  forth.s 			page 112


 1299 2cd0 81EA0101 		eor T1,T1 // quotient T0:T1  
 1300 2cd4 25B9     		cbnz WP,1f    
 1301 2cd6 82EA0202 		eor T2,T2 // nos shifting required 
 1302 2cda 0546     		mov WP,T0 
 1303 2cdc 80EA0000 		eor T0,T0 
 1304 2ce0 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1305 2ce2 15F0004F 	    tst WP,#(1<<31) 
 1306 2ce6 06D1     		bne 2f
 1307 2ce8 4918     		adds T1,T1,T1 
 1308 2cea 4041     		adcs T0,T0,T0 
 1309 2cec 45EB0505 		adc WP,WP,WP 
 1310 2cf0 A2F10102 		sub T2,#1 
 1311 2cf4 F4E7     		b 1b 
 1312 2cf6 B5FBF6F3 	2:  udiv T3,WP,TOS
 1313 2cfa 41EA0301 		orr T1,T3   // append partial quotient 
 1314 2cfe 06FB03F3 		mul T3,TOS
 1315 2d02 A5EB0305 		sub WP,T3 //remainder 
 1316 2d06 02B1     		cbz T2,8f 
 1317 2d08 EAE7     		b 1b 
 1318 2d0a 7D60     	8:	str WP,[DSP,#4] // remainder 
 1319 2d0c 3960     		str T1,[DSP]  // q lo 
 1320 2d0e 0646     		mov TOS,T0  // q hi 		
 1321 2d10 FFF702BB 		_NEXT 
 1322              	
 1323              	
 1324              	/****************************
 1325              		D/  ( ud u -- udq )
 1326              		divide unsigned double 
 1327              		by unsigned single 
 1328              		return double quotient
 1329              		rounded to nearest integer 
 1330              	****************************/
 1331 2d14 C22C0000 		_HEADER DSLASH,2,"D/"
 1331      02442F00 
 1332 2d1c 504700BF 		_NEST 
 1333 2d20 C9250000 		_ADR DUPP 
 1334 2d24 97240000 		_DOLIT 1 
 1334      01000000 
 1335 2d2c 65260000 		_ADR RSHIFT 
 1336 2d30 71250000 		_ADR TOR 
 1337 2d34 C92C0000 		_ADR DSLMOD 
 1338 2d38 B1270000 		_ADR ROT 
 1339 2d3c 49250000 		_ADR RFROM 
 1340 2d40 65290000 		_ADR GREAT 
 1341 2d44 D7240000 		_QBRAN 9f
 1341      5C2D0000 
 1342 2d4c 97240000 		_DOLIT 1 
 1342      01000000 
 1343 2d54 812C0000 		_ADR STOD 
 1344 2d58 15280000 		_ADR DPLUS 
 1345 2d5c 1F230000 	9:	_UNNEST 
 1346              	
 1347              	
 1348              	/****************************
 1349              		D* ( d s -- d )
 1350              	    multiply a double 
 1351              		by a single 
ARM GAS  forth.s 			page 113


 1352              	****************************/
 1353 2d60 182D0000 		_HEADER DSTAR,2,"D*"
 1353      02442A00 
 1354              	/*
 1355              		_NEST 
 1356              		_ADR NROT 
 1357              		_ADR DUPP 
 1358              		_ADR TOR 
 1359              		_ADR DABS
 1360              		_ADR SWAP  
 1361              		_ADR ROT   
 1362              		_ADR DUPP
 1363              		_ADR TOR
 1364              		_ADR MSTAR
 1365              		_ADR ROT
 1366              		_ADR RFROM 
 1367              		_ADR STAR 
 1368              		_ADR PLUS
 1369              		_ADR RFROM 
 1370              		_ADR ZLESS 
 1371              		_QBRAN 9f
 1372              		_ADR DNEGA   
 1373              	9:	_UNNEST 
 1374              	*/
 1375 2d68 57F8040B 		ldr T0,[DSP],#4
 1376 2d6c 3968     		ldr T1,[DSP]
 1377 2d6e 3860     		str T0,[DSP] 
 1378 2d70 83EA0303 		eor T3,T3 
 1379 2d74 10F0004F 		tst T0,#(1<<31)
 1380 2d78 02D0     		beq 1f 
 1381              		// DNEGATE 
 1382 2d7a 591A     		subs T1,T3,T1  
 1383 2d7c 63EB0000 		sbc T0,T3,T0 
 1384 2d80 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1385 2d84 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1386 2d88 0E44     		add TOS,T1  // TOS:T2 product  
 1387 2d8a 3868     		ldr r0,[DSP]
 1388 2d8c 10F0004F 		tst T0,#(1<<31)
 1389 2d90 02D0     		beq 2f 
 1390              		// DNEGATE product 
 1391 2d92 9A1A     		subs T2,T3,T2  
 1392 2d94 63EB0606 		sbc TOS,T3,TOS 
 1393 2d98 3A60     	2:  str T2,[DSP]
 1394 2d9a FFF7BDBA 		_NEXT 
 1395              	
 1396              	
 1397              	/****************************
 1398              	   /MOD	( n n -- r q )
 1399              		Signed divide. Return
 1400              		mod and quotient.
 1401              	****************************/
 1402 2d9e 642D0000 		_HEADER SLMOD,4,"/MOD"
 1402      042F4D4F 
 1402      4400
 1403 2da8 504700BF 		_NEST
 1404 2dac ED250000 		_ADR	OVER
 1405 2db0 FD250000 		_ADR	ZLESS
ARM GAS  forth.s 			page 114


 1406 2db4 D9250000 		_ADR	SWAP
 1407 2db8 0D2C0000 		_ADR	MSMOD
 1408 2dbc 1F230000 		_UNNEST
 1409              	
 1410              	/**************************
 1411              	    MOD	 ( n n -- r )
 1412              	 	Signed divide. Return
 1413              		mod only.
 1414              	**************************/
 1415 2dc0 A22D0000 		_HEADER MODD,3,"MOD"
 1415      034D4F44 
 1416 2dc8 504700BF 		_NEST
 1417 2dcc A92D0000 		_ADR	SLMOD
 1418 2dd0 B9250000 		_ADR	DROP
 1419 2dd4 1F230000 		_UNNEST
 1420              	
 1421              	/*************************
 1422              	    /	   ( n n -- q )
 1423              	 	Signed divide. Return
 1424              		quotient only.
 1425              	**************************/
 1426 2dd8 C42D0000 		_HEADER SLASH,1,"/"
 1426      012F00BF 
 1427 2de0 504700BF 		_NEST
 1428 2de4 A92D0000 		_ADR	SLMOD
 1429 2de8 D9250000 		_ADR	SWAP
 1430 2dec B9250000 		_ADR	DROP
 1431 2df0 1F230000 		_UNNEST
 1432              	
 1433              	//******************************
 1434              	//  */MOD	( n1 n2 n3 -- r q )
 1435              	/* 	Multiply n1 and n2, then 
 1436              		divide by n3. Return 
 1437              		mod and quotient.
 1438              	******************************/
 1439 2df4 DC2D0000 		_HEADER SSMOD,5,"*/MOD"
 1439      052A2F4D 
 1439      4F4400BF 
 1440 2e00 504700BF 		_NEST
 1441 2e04 71250000 		_ADR	TOR
 1442 2e08 D5260000 		_ADR	MSTAR
 1443 2e0c 49250000 		_ADR	RFROM
 1444 2e10 0D2C0000 		_ADR	MSMOD
 1445 2e14 1F230000 		_UNNEST
 1446              	
 1447              	//*******************************
 1448              	//  */ ( n1 n2 n3 -- q )
 1449              	/* 	Multiply n1 by n2, then 
 1450              		divide by n3. Return quotient
 1451              		only.
 1452              	*******************************/
 1453 2e18 F82D0000 		_HEADER STASL,2,"*/"
 1453      022A2F00 
 1454 2e20 504700BF 		_NEST
 1455 2e24 012E0000 		_ADR	SSMOD
 1456 2e28 D9250000 		_ADR	SWAP
 1457 2e2c B9250000 		_ADR	DROP
ARM GAS  forth.s 			page 115


 1458 2e30 1F230000 		_UNNEST
 1459              	
 1460              	/*******************
 1461              	  Miscellaneous
 1462              	*******************/
 1463              	
 1464              	/*************************
 1465              	    ALIGNED	( b -- a )
 1466              	 	Align address to the 
 1467              		cell boundary.
 1468              	**************************/
 1469 2e34 1C2E0000 		_HEADER ALGND,7,"ALIGNED"
 1469      07414C49 
 1469      474E4544 
 1470 2e40 06F10306 		ADD	TOS,TOS,#3
 1471 2e44 6FF00305 		MVN	WP,#3
 1472 2e48 06EA0506 		AND	TOS,TOS,WP
 1473 2e4c FFF764BA 		_NEXT
 1474              	
 1475              	/****************************
 1476              	    >CHAR	( c -- c )
 1477              	 	Filter non-printing 
 1478              		characters.
 1479              	****************************/
 1480 2e50 382E0000 		_HEADER TCHAR,5,">CHAR"
 1480      053E4348 
 1480      415200BF 
 1481 2e5c 504700BF 		_NEST
 1482 2e60 97240000 		_DOLIT  0x7F
 1482      7F000000 
 1483 2e68 0D260000 		_ADR	ANDD
 1484 2e6c C9250000 		_ADR	DUPP	// mask msb
 1485 2e70 49270000 		_ADR	BLANK
 1486 2e74 97240000 		_DOLIT 	127
 1486      7F000000 
 1487 2e7c A52B0000 		_ADR	WITHI	// check for printable
 1488 2e80 99280000 		_ADR	INVER
 1489 2e84 D7240000 		_QBRAN	TCHA1
 1489      982E0000 
 1490 2e8c B9250000 		_ADR	DROP
 1491 2e90 97240000 		_DOLIT 	'_'	// replace non-printables
 1491      5F000000 
 1492              	TCHA1:
 1493 2e98 1F230000 		  _UNNEST
 1494              	
 1495              	/************************
 1496              	    DEPTH	( -- n )
 1497              	 	Return the depth of
 1498              		the data stack.
 1499              	***********************/
 1500 2e9c 542E0000 		_HEADER DEPTH,5,"DEPTH"
 1500      05444550 
 1500      544800BF 
 1501 2ea8 4FF47F42 		_MOV32 T2,SPP 
 1501      C2F20102 
 1502 2eb0 A2EB0702 		SUB	T2,T2,DSP
 1503 2eb4 47F8046D 		_PUSH
ARM GAS  forth.s 			page 116


 1504 2eb8 4FEAA206 		ASR	TOS,T2,#2
 1505 2ebc FFF72CBA 		_NEXT
 1506              	
 1507              	/*****************************
 1508              	    PICK	( ... +n -- ... w )
 1509              	 	Copy the nth stack item 
 1510              		to tos.
 1511              	******************************/
 1512 2ec0 A02E0000 		_HEADER PICK,4,"PICK"
 1512      04504943 
 1512      4B0000BF 
 1513 2ecc 504700BF 		_NEST
 1514 2ed0 E9260000 		_ADR	ONEP
 1515 2ed4 5D270000 		_ADR	CELLS
 1516 2ed8 A5250000 		_ADR	SPAT
 1517 2edc 8D260000 		_ADR	PLUS
 1518 2ee0 1D250000 		_ADR	AT
 1519 2ee4 1F230000 		_UNNEST
 1520              	
 1521              	/*********************
 1522              	  Memory access
 1523              	*********************/
 1524              	
 1525              	/*************************
 1526              	    HERE	( -- a )
 1527              	 	Return the top of
 1528              		the code dictionary.
 1529              	*************************/
 1530 2ee8 C42E0000 		_HEADER HERE,4,"HERE"
 1530      04484552 
 1530      450000BF 
 1531 2ef4 504700BF 		_NEST
 1532 2ef8 212B0000 		_ADR	CPP
 1533 2efc 1D250000 		_ADR	AT
 1534 2f00 1F230000 		_UNNEST
 1535              	
 1536              	/***************************	
 1537              	    PAD	 ( -- a )
 1538              	 	Return the address of 
 1539              		a temporary buffer.
 1540              	***************************/
 1541 2f04 EC2E0000 		_HEADER PAD,3,"PAD"
 1541      03504144 
 1542 2f0c 504700BF 		_NEST
 1543 2f10 F52E0000 		_ADR	HERE
 1544 2f14 97240000 		_DOLIT 80
 1544      50000000 
 1545 2f1c 8D260000 		_ADR PLUS 
 1546 2f20 1F230000 		_UNNEST
 1547              	
 1548              	/***********************
 1549              	    TIB	 ( -- a )
 1550              	 	Return the address 
 1551              		of the terminal 
 1552              		input buffer.
 1553              	************************/
 1554 2f24 082F0000 		_HEADER TIB,3,"TIB"
ARM GAS  forth.s 			page 117


 1554      03544942 
 1555 2f2c 47F8046D 		_PUSH
 1556 2f30 266B     		ldr TOS,[UP,#TIBUF]
 1557 2f32 FFF7F1B9 		_NEXT
 1558              	
 1559              	/*************************
 1560              	    @EXECUTE	( a -- )
 1561              	 	Execute vector stored
 1562              		in address a.
 1563              	*************************/
 1564 2f36 282F0000 		_HEADER ATEXE,8,"@EXECUTE"
 1564      08404558 
 1564      45435554 
 1564      4500
 1565 2f44 3500     		MOVS	WP,TOS
 1566 2f46 57F8046B 		_POP
 1567 2f4a 2D68     		LDR	WP,[WP]
 1568 2f4c 45F00105 		ORR	WP,WP,#1
 1569 2f50 18BF     	    IT NE 
 1570 2f52 2847     		BXNE	WP
 1571 2f54 FFF7E0B9 		_NEXT
 1572              	
 1573              	/*******************************
 1574              	    CMOVE	( b1 b2 u -- )
 1575              	 	Copy u bytes from b1 to b2.
 1576              	********************************/
 1577 2f58 3A2F0000 		_HEADER CMOVE,5,"CMOVE"
 1577      05434D4F 
 1577      564500BF 
 1578 2f64 57F8042B 		LDR	T2,[DSP],#4
 1579 2f68 57F8043B 		LDR	T3,[DSP],#4
 1580 2f6c 03E0     		B CMOV1
 1581              	CMOV0:
 1582 2f6e 13F8015B 		LDRB	WP,[T3],#1
 1583 2f72 02F8015B 		STRB	WP,[T2],#1
 1584              	CMOV1:
 1585 2f76 3600     		MOVS	TOS,TOS
 1586 2f78 02D0     		BEQ	CMOV2
 1587 2f7a A6F10106 		SUB	TOS,TOS,#1
 1588 2f7e F6E7     		B CMOV0
 1589              	CMOV2:
 1590 2f80 57F8046B 		_POP
 1591 2f84 FFF7C8B9 		_NEXT
 1592              	
 1593              	/***************************
 1594              	    MOVE	( a1 a2 u -- )
 1595              	 	Copy u words from a1 to a2.
 1596              	*******************************/
 1597 2f88 5C2F0000 		_HEADER MOVE,4,"MOVE"
 1597      044D4F56 
 1597      450000BF 
 1598 2f94 4FF00400 		MOV T0,#4 
 1599 2f98 06F10306 		ADD TOS,#3 
 1600 2f9c 26F00306 		BIC TOS,#3
 1601 2fa0 57F8041B 		LDR	T1,[DSP],#4 // dest
 1602 2fa4 57F8042B 		LDR	T2,[DSP],#4 // src 
 1603 2fa8 8A42     		CMP T2,T1 
ARM GAS  forth.s 			page 118


 1604 2faa 08D5     		BPL MOVE1
 1605 2fac 6FF00300 		MOV T0,#-4 
 1606 2fb0 3144     		ADD T1,TOS
 1607 2fb2 3244     		ADD T2,TOS 
 1608 2fb4 01E0     		B MOVE3
 1609              	MOVE0:
 1610 2fb6 1568     		LDR	WP,[T2]
 1611 2fb8 0D60     		STR	WP,[T1]
 1612              	MOVE3: 
 1613 2fba 0144     		ADD T1,T0 
 1614 2fbc 0244     		ADD T2,T0 
 1615              	MOVE1:
 1616 2fbe 3600     		MOVS TOS,TOS
 1617 2fc0 02D0     		BEQ	MOVE2
 1618 2fc2 A6F10406 		SUB	TOS,TOS,#4
 1619 2fc6 F6E7     		B MOVE0
 1620              	MOVE2:
 1621 2fc8 57F8046B 		_POP
 1622 2fcc FFF7A4B9 		_NEXT
 1623              	
 1624              	/**************************
 1625              	    FILL	( b u c -- )
 1626              	 	Fill u bytes of character
 1627              		c to area beginning at b.
 1628              	******************************/
 1629 2fd0 8C2F0000 		_HEADER FILL,4,"FILL"
 1629      0446494C 
 1629      4C0000BF 
 1630 2fdc 03CF     		LDMFD DSP!,{T0,T1} 
 1631 2fde 0000     		MOVS T0,T0 
 1632 2fe0 03D0     		BEQ FILL2
 1633              	FILL1:
 1634 2fe2 01F8016B 		STRB	TOS,[T1],#1
 1635 2fe6 0138     		SUBS	T0,T0,#1
 1636 2fe8 FBD1     		BNE FILL1
 1637              	FILL2:
 1638 2fea 57F8046B 		_POP
 1639 2fee FFF793B9 		_NEXT
 1640              	
 1641              	/*****************************
 1642              	    PACK$	( b u a -- a )
 1643              	 	Build a counted word with
 1644              		u characters from b. 
 1645              		Null fill.
 1646              	*****************************/
 1647 2ff2 D42F0000 		_HEADER PACKS,5,"PACK$"
 1647      05504143 
 1647      4B24
 1648 2ffc 504700BF 		_NEST
 1649 3000 412E0000 		_ADR	ALGND
 1650 3004 C9250000 		_ADR	DUPP
 1651 3008 71250000 		_ADR	TOR			// strings only on cell boundary
 1652 300c ED250000 		_ADR	OVER
 1653 3010 8D260000 		_ADR	PLUS
 1654 3014 E9260000 		_ADR	ONEP
 1655 3018 97240000 		_DOLIT 	0xFFFFFFFC
 1655      FCFFFFFF 
ARM GAS  forth.s 			page 119


 1656 3020 0D260000 		_ADR	ANDD			// count mod cell
 1657 3024 97240000 		_DOLIT 	0
 1657      00000000 
 1658 302c D9250000 		_ADR	SWAP
 1659 3030 09250000 		_ADR	STORE			// null fill cell
 1660 3034 5D250000 		_ADR	RAT
 1661 3038 01280000 		_ADR	DDUP
 1662 303c 29250000 		_ADR	CSTOR
 1663 3040 E9260000 		_ADR	ONEP			// save count
 1664 3044 D9250000 		_ADR	SWAP
 1665 3048 652F0000 		_ADR	CMOVE
 1666 304c 49250000 		_ADR	RFROM
 1667 3050 1F230000 		_UNNEST   			// move string
 1668              	
 1669              	/***********************************
 1670              	  Numeric output, single precision
 1671              	***********************************/
 1672              	
 1673              	/**************************
 1674              	    DIGIT	( u -- c )
 1675              	 	Convert digit u to 
 1676              		a character.
 1677              	***************************/
 1678 3054 F62F0000 		_HEADER DIGIT,5,"DIGIT"
 1678      05444947 
 1678      495400BF 
 1679 3060 504700BF 		_NEST
 1680 3064 97240000 		_DOLIT 9
 1680      09000000 
 1681 306c ED250000 		_ADR	OVER
 1682 3070 35290000 		_ADR	LESS
 1683 3074 97240000 		_DOLIT	7
 1683      07000000 
 1684 307c 0D260000 		_ADR	ANDD
 1685 3080 8D260000 		_ADR	PLUS
 1686 3084 97240000 		_DOLIT	'0'
 1686      30000000 
 1687 308c 8D260000 		_ADR	PLUS 
 1688 3090 1F230000 		_UNNEST
 1689              	
 1690              	/*********************************
 1691              	    EXTRACT	( ud base -- ud c )
 1692              	 	Extract the least significant
 1693              		digit from positive double.
 1694              	**********************************/
 1695 3094 58300000 		_HEADER EXTRC,7,"EXTRACT"
 1695      07455854 
 1695      52414354 
 1696 30a0 504700BF 		_NEST
 1697 30a4 C92C0000 		_ADR	DSLMOD
 1698 30a8 B1270000 		_ADR	ROT
 1699 30ac 61300000 		_ADR	DIGIT
 1700 30b0 1F230000 		_UNNEST
 1701              	
 1702              	/***************************
 1703              	    <#	  ( -- )
 1704              	 	Initiate the numeric
ARM GAS  forth.s 			page 120


 1705              		output process.
 1706              	****************************/
 1707 30b4 98300000 		_HEADER BDIGS,2,"<#"
 1707      023C2300 
 1708 30bc 504700BF 		_NEST
 1709 30c0 0D2F0000 		_ADR	PAD
 1710 30c4 F52A0000 		_ADR	HLD
 1711 30c8 09250000 		_ADR	STORE
 1712 30cc 1F230000 		_UNNEST
 1713              	
 1714              	/*********************************
 1715              	    HOLD	( c -- )
 1716              	 	Insert a character into the 
 1717              		numeric output string.
 1718              	**********************************/
 1719 30d0 B8300000 		_HEADER HOLD,4,"HOLD"
 1719      04484F4C 
 1719      440000BF 
 1720 30dc 504700BF 		_NEST
 1721 30e0 F52A0000 		_ADR	HLD
 1722 30e4 1D250000 		_ADR	AT
 1723 30e8 F9260000 		_ADR	ONEM
 1724 30ec C9250000 		_ADR	DUPP
 1725 30f0 F52A0000 		_ADR	HLD
 1726 30f4 09250000 		_ADR	STORE
 1727 30f8 29250000 		_ADR	CSTOR
 1728 30fc 1F230000 		_UNNEST
 1729              	
 1730              	/***********************
 1731              	    #	   ( ud -- ud )
 1732              	 	Extract one digit 
 1733              		from ud and append 
 1734              		the digit to output 
 1735              		string.
 1736              	*************************/
 1737 3100 D4300000 		_HEADER DIG,1,"#"
 1737      012300BF 
 1738 3108 504700BF 		_NEST
 1739 310c 852A0000 		_ADR	BASE
 1740 3110 1D250000 		_ADR	AT
 1741 3114 A1300000 		_ADR	EXTRC
 1742 3118 DD300000 		_ADR	HOLD
 1743 311c 1F230000 		_UNNEST
 1744              	
 1745              	/***************************
 1746              	    #S	  ( ud -- 0 )
 1747              	 	Convert ud until all 
 1748              		digits are added to 
 1749              		the output string.
 1750              	***************************/
 1751 3120 04310000 		_HEADER DIGS,2,"#S"
 1751      02235300 
 1752 3128 504700BF 		_NEST
 1753              	DIGS1:
 1754 312c 09310000 	    _ADR	DIG
 1755 3130 01280000 		_ADR	DDUP
 1756 3134 21260000 		_ADR    ORR 
ARM GAS  forth.s 			page 121


 1757 3138 D7240000 		_QBRAN 	DIGS2
 1757      48310000 
 1758 3140 EB240000 		_BRAN	DIGS1
 1758      2C310000 
 1759              	DIGS2:
 1760 3148 B9250000 		 _ADR DROP 
 1761 314c 1F230000 		 _UNNEST
 1762              	
 1763              	/*********************
 1764              	    SIGN	( n -- )
 1765              	 	Add a minus sign
 1766              		to the numeric
 1767              		output string.
 1768              	*********************/
 1769 3150 24310000 		_HEADER SIGN,4,"SIGN"
 1769      04534947 
 1769      4E0000BF 
 1770 315c 504700BF 		_NEST
 1771 3160 FD250000 		_ADR	ZLESS
 1772 3164 D7240000 		_QBRAN	SIGN1
 1772      78310000 
 1773 316c 97240000 		_DOLIT '-'
 1773      2D000000 
 1774 3174 DD300000 		_ADR	HOLD
 1775              	SIGN1:
 1776 3178 1F230000 		  _UNNEST
 1777              	
 1778              	/*************************
 1779              	    #>  ( w -- b u )
 1780              	 	Prepare the output 
 1781              		word to be TYPE'd.
 1782              	************************/
 1783 317c 54310000 		_HEADER EDIGS,2,"#>"
 1783      02233E00 
 1784 3184 504700BF 		_NEST
 1785 3188 B9250000 		_ADR	DROP
 1786 318c F52A0000 		_ADR	HLD
 1787 3190 1D250000 		_ADR	AT
 1788 3194 0D2F0000 		_ADR	PAD
 1789 3198 ED250000 		_ADR	OVER
 1790 319c 9D260000 		_ADR	SUBB
 1791 31a0 1F230000 		_UNNEST
 1792              	
 1793              	/**************************
 1794              	    str	 ( n -- b u )
 1795              	 	Convert a signed 
 1796              		integer to a numeric 
 1797              		string.
 1798              	hidden word used by compiler
 1799              	***************************/
 1800              	STRR:
 1801 31a4 504700BF 		_NEST
 1802 31a8 812C0000 		_ADR 	STOD 
 1803 31ac C9250000 		_ADR	DUPP
 1804 31b0 71250000 		_ADR	TOR
 1805 31b4 35280000 		_ADR	DABS
 1806 31b8 BD300000 		_ADR	BDIGS
ARM GAS  forth.s 			page 122


 1807 31bc 29310000 		_ADR	DIGS
 1808 31c0 49250000 		_ADR	RFROM
 1809 31c4 5D310000 		_ADR	SIGN
 1810 31c8 85310000 		_ADR	EDIGS
 1811 31cc 1F230000 		_UNNEST
 1812              	
 1813              	/*************************
 1814              	    HEX	 ( -- )
 1815              	 	Use radix 16 as 
 1816              		base for numeric 
 1817              		conversions.
 1818              	*************************/
 1819 31d0 80310000 		_HEADER HEX,3,"HEX"
 1819      03484558 
 1820 31d8 504700BF 		_NEST
 1821 31dc 97240000 		_DOLIT 16
 1821      10000000 
 1822 31e4 852A0000 		_ADR	BASE
 1823 31e8 09250000 		_ADR	STORE
 1824 31ec 1F230000 		_UNNEST
 1825              	
 1826              	/**************************
 1827              		BIN ( -- )
 1828              		Use radix 2 as 
 1829              		base for numeric 
 1830              		conversion 
 1831              	**************************/
 1832 31f0 D4310000 		_HEADER BIN,3,"BIN"
 1832      0342494E 
 1833 31f8 504700BF 		_NEST 
 1834 31fc 97240000 		_DOLIT 2 
 1834      02000000 
 1835 3204 852A0000 		_ADR BASE 
 1836 3208 09250000 		_ADR STORE
 1837 320c 1F230000 		_UNNEST 
 1838              	
 1839              	/************************
 1840              	    DECIMAL	( -- )
 1841              	 	Use radix 10 as base
 1842              		for numeric conversions.
 1843              	*************************/
 1844 3210 F4310000 		_HEADER DECIM,7,"DECIMAL"
 1844      07444543 
 1844      494D414C 
 1845 321c 504700BF 		_NEST
 1846 3220 97240000 		_DOLIT 10
 1846      0A000000 
 1847 3228 852A0000 		_ADR	BASE
 1848 322c 09250000 		_ADR	STORE
 1849 3230 1F230000 		_UNNEST
 1850              	
 1851              	/************************************
 1852              	  Numeric input, single precision
 1853              	***********************************/
 1854              	
 1855              	/***********************************
 1856              	    DIGIT?	( c base -- u t )
ARM GAS  forth.s 			page 123


 1857              	 	Convert a character to its 
 1858              		numeric value. A flag 
 1859              		indicates success.
 1860              	**********************************/
 1861 3234 14320000 		_HEADER DIGTQ,6,"DIGIT?"
 1861      06444947 
 1861      49543F00 
 1862 3240 504700BF 		_NEST
 1863 3244 71250000 		_ADR	TOR
 1864 3248 97240000 		_DOLIT 	'0'
 1864      30000000 
 1865 3250 9D260000 		_ADR	SUBB
 1866 3254 97240000 		_DOLIT 9
 1866      09000000 
 1867 325c ED250000 		_ADR	OVER
 1868 3260 35290000 		_ADR	LESS
 1869 3264 D7240000 		_QBRAN	DGTQ1
 1869      8C320000 
 1870 326c 97240000 		_DOLIT 7
 1870      07000000 
 1871 3274 9D260000 		_ADR	SUBB
 1872 3278 C9250000 		_ADR	DUPP
 1873 327c 97240000 		_DOLIT	10
 1873      0A000000 
 1874 3284 35290000 		_ADR	LESS
 1875 3288 21260000 		_ADR	ORR
 1876              	DGTQ1:
 1877 328c C9250000 		_ADR	DUPP
 1878 3290 49250000 		_ADR	RFROM
 1879 3294 1D290000 		_ADR	ULESS
 1880 3298 1F230000 		_UNNEST
 1881              	
 1882              	/*****************************
 1883              		( a c -- a+ n c- )
 1884              		a  string pointer 
 1885              		c string length 
 1886              		a+ updated pointer 
 1887              		n  parsed integer 
 1888              		c- character left in string   
 1889              	****************************/
 1890              		.type PARSE_DIGITS, %function 
 1891              	PARSE_DIGITS:
 1892 329c 3046     		mov T0,TOS // string length 
 1893 329e 57F8046B 		_POP // TOS <- a 
 1894 32a2 85EA0505 		eor WP,WP  // integer accumulator  
 1895 32a6 E269     		ldr T2,[UP,#NBASE] // conversion base 
 1896 32a8 98B1     	1:	cbz T0, 8f 
 1897 32aa 16F8011B 		ldrb T1,[TOS],#1
 1898 32ae A1F13001 		sub T1,#'0'
 1899 32b2 0A29     		cmp T1,#10 
 1900 32b4 01D4     		bmi 2f 
 1901 32b6 A1F10701 		sub T1,#7
 1902 32ba 9142     	2:  cmp T1,T2
 1903 32bc 05D2     		bcs 7f 
 1904 32be 02FB05F5 		mul WP,T2 
 1905 32c2 0D44     		add WP,T1
 1906 32c4 A0F10100 		sub T0,#1 
ARM GAS  forth.s 			page 124


 1907 32c8 EEE7     		b 1b 
 1908              	7:  // not a valid character 
 1909 32ca A6F10106 		sub TOS,#1
 1910 32ce 00F10100 		add T0,#1 
 1911 32d2 47F8046D 	8:	_PUSH // -- a+
 1912 32d6 47F8045D 		str WP,[DSP,#-4]! // -- a+ n 
 1913 32da 0646     		mov TOS,T0  // -- a+ n c- 
 1914 32dc FFF71CB8 		_NEXT 
 1915              	
 1916              	/************************************
 1917              		DASH? ( a c -- a+ t | a c f )
 1918              		check if *a is '-' 
 1919              	*************************************/
 1920 32e0 38320000 		_HEADER DASHQ,5,"DASH?"
 1920      05444153 
 1920      483F00BF 
 1921 32ec 82EA0202 		eor T2,T2  // flag 
 1922 32f0 3868     		ldr T0,[DSP] // T0 <- a 
 1923 32f2 47F8046D 		str TOS,[DSP,#-4]! // a c c 
 1924 32f6 10F8011B 		ldrb T1,[T0],#1
 1925 32fa 2D29     		cmp T1,#'-'
 1926 32fc 05D1     		bne 9f 
 1927 32fe 7860     		str T0,[DSP,#4] // a+ 
 1928 3300 A6F10106 		sub TOS,#1 
 1929 3304 3E60     		str TOS,[DSP] // a+ c- 
 1930 3306 6FEA0202 		mvn T2,T2 // -1 
 1931 330a 1646     	9:	mov TOS,T2 // a+ c- -1 | a c 0 
 1932 330c FFF704B8 		_NEXT
 1933              	
 1934              	
 1935              	/**********************************
 1936              	    INT?	( a -- n T | a F )
 1937              	 	parse string for at 'a' for 
 1938              		integer. Push a flag on TOS.
 1939              		integer form:
 1940              			[-]hex_digit+  | 
 1941              			$[-]hex_digit+ |
 1942              			%[-]bin_digit+ | 
 1943              			[-]dec_digit+ 
 1944              	**********************************/
 1945 3310 E4320000 		_HEADER INTQ,4,"INT?"
 1945      04494E54 
 1945      3F0000BF 
 1946 331c 504700BF 		_NEST
 1947 3320 852A0000 		_ADR	BASE
 1948 3324 1D250000 		_ADR	AT
 1949 3328 71250000 		_ADR	TOR
 1950 332c 97240000 		_DOLIT	0      // a 0 
 1950      00000000 
 1951 3334 ED250000 		_ADR	OVER   // a 0 a 
 1952 3338 ED290000 		_ADR	COUNT  // a 0 a+ c 
 1953 333c ED250000 		_ADR	OVER   // a 0 a+ c a+
 1954 3340 3D250000 		_ADR	CAT    // a 0 a+ c char 
 1955 3344 97240000 		_DOLIT '$'     // a 0 a+ c char '$'
 1955      24000000 
 1956 334c E5280000 		_ADR	EQUAL  // a 0 a+ c f 
 1957 3350 D7240000 		_QBRAN	0f    
ARM GAS  forth.s 			page 125


 1957      74330000 
 1958 3358 D9310000 		_ADR	HEX
 1959 335c D9250000 		_ADR	SWAP  // a 0 c a+ 
 1960 3360 E9260000 		_ADR	ONEP
 1961 3364 D9250000 		_ADR	SWAP
 1962 3368 F9260000 		_ADR	ONEM // a 0 a+ c 
 1963 336c EB240000 		_BRAN   1f
 1963      A4330000 
 1964 3374 ED250000 	0:  _ADR    OVER  // a 0 a+ c a+
 1965 3378 3D250000 		_ADR    CAT   // a 0 a+ c char 
 1966 337c 97240000 		_DOLIT  '%'   // a 0 a+ c char '%'
 1966      25000000 
 1967 3384 E5280000 		_ADR	EQUAL  // a 0 a+ c f 
 1968 3388 D7240000 		_QBRAN  1f
 1968      A4330000 
 1969 3390 F9310000 		_ADR	BIN 
 1970 3394 D9250000 		_ADR	SWAP 
 1971 3398 E9260000 		_ADR	ONEP 
 1972 339c D9250000 		_ADR	SWAP 
 1973 33a0 F9260000 		_ADR	ONEM
 1974              	1:  // a 0 a+ c 
 1975 33a4 ED320000 		_ADR	DASHQ
 1976 33a8 71250000 		_ADR	TOR   // save sign -- a 0 a+ c- 
 1977 33ac 9D270000 		_ADR	QDUP
 1978 33b0 D7240000 		_QBRAN	6f
 1978      FC330000 
 1979 33b8 01000000 		_ADR	PARSE_DIGITS  // a 0 a+ c -- a 0 a+ n c- 
 1980 33bc D1280000 		_ADR	ZEQUAL
 1981 33c0 D7240000 		_QBRAN  5f // digits left, not an integer 
 1981      F8330000 
 1982 33c8 49250000 	2:	_ADR	RFROM  // sign 
 1983 33cc D7240000 		_QBRAN  3f   // positive integer 
 1983      D8330000 
 1984 33d4 AD280000 		_ADR	NEGAT
 1985              	3:	
 1986 33d8 C5270000 		_ADR	NROT  // a n 0 a+
 1987 33dc D9270000 		_ADR	DDROP // a n 
 1988 33e0 97240000 		_DOLIT  -1    // a n -1 
 1988      FFFFFFFF 
 1989 33e8 B1270000 		_ADR	ROT   // n -1 a 
 1990 33ec B9250000 		_ADR	DROP 
 1991 33f0 EB240000 		_BRAN   7f  
 1991      04340000 
 1992 33f8 B9250000 	5:  _ADR    DROP  // -- a 0 a+   	 
 1993 33fc 49250000 	6:  _ADR	RFROM
 1994 3400 D9270000 		_ADR	DDROP
 1995 3404 49250000 	7:	_ADR	RFROM
 1996 3408 852A0000 		_ADR	BASE
 1997 340c 09250000 		_ADR	STORE
 1998 3410 1F230000 		_UNNEST
 1999              	
 2000              	
 2001              	/********************
 2002              	  console I/O
 2003              	********************/
 2004              	
 2005              	/**********************
ARM GAS  forth.s 			page 126


 2006              	    SPACE	( -- )
 2007              	 	Send the blank 
 2008              		character to 
 2009              		the output device.
 2010              	************************/
 2011 3414 14330000 		_HEADER SPACE,5,"SPACE"
 2011      05535041 
 2011      434500BF 
 2012 3420 504700BF 		_NEST
 2013 3424 49270000 		_ADR	BLANK
 2014 3428 A1230000 		_ADR	EMIT
 2015 342c 1F230000 		_UNNEST
 2016              	
 2017              	/***************************
 2018              	    SPACES	( +n -- )
 2019              	 	Send n spaces to the 
 2020              		output device.
 2021              	****************************/
 2022 3430 18340000 		_HEADER SPACS,6,"SPACES"
 2022      06535041 
 2022      43455300 
 2023 343c 504700BF 		_NEST
 2024 3440 97240000 		_DOLIT	0
 2024      00000000 
 2025 3448 7D290000 		_ADR	MAX
 2026 344c 71250000 		_ADR	TOR
 2027 3450 EB240000 		_BRAN	CHAR2
 2027      5C340000 
 2028              	CHAR1:
 2029 3458 21340000 		_ADR	SPACE
 2030              	CHAR2:
 2031 345c B9240000 		_DONXT	CHAR1
 2031      58340000 
 2032 3464 1F230000 		_UNNEST
 2033              	
 2034              	/***********************
 2035              	    TYPE	( b u -- )
 2036              	 	Output u characters 
 2037              		from b.
 2038              	************************/
 2039 3468 34340000 		_HEADER TYPEE,4,"TYPE"
 2039      04545950 
 2039      450000BF 
 2040 3474 504700BF 		_NEST
 2041 3478 71250000 		_ADR  TOR   // ( a+1 -- R: u )
 2042 347c EB240000 		_BRAN	TYPE2
 2042      90340000 
 2043              	TYPE1:  
 2044 3484 ED290000 		_ADR  COUNT
 2045 3488 5D2E0000 		_ADR TCHAR
 2046 348c A1230000 		_ADR EMIT
 2047              	TYPE2:  
 2048 3490 B9240000 		_DONXT	TYPE1
 2048      84340000 
 2049 3498 B9250000 		_ADR	DROP
 2050 349c 1F230000 		_UNNEST
 2051              	
ARM GAS  forth.s 			page 127


 2052              	/***************************
 2053              	    CR	  ( -- )
 2054              	 	Output a carriage return
 2055              		and a line feed.
 2056              	****************************/
 2057 34a0 6C340000 		_HEADER CR,2,"CR"
 2057      02435200 
 2058 34a8 504700BF 		_NEST
 2059 34ac 97240000 		_DOLIT	CRR
 2059      0D000000 
 2060 34b4 A1230000 		_ADR	EMIT
 2061 34b8 97240000 		_DOLIT	LF
 2061      0A000000 
 2062 34c0 A1230000 		_ADR	EMIT
 2063 34c4 1F230000 		_UNNEST
 2064              	
 2065              	/******************************************
 2066              	  do_$	( -- a )
 2067              	  Return the address of a compiled string.
 2068              	  adjust return address to skip over it.
 2069              	hidden word used by compiler. 
 2070              	******************************************/
 2071              	DOSTR:
 2072 34c8 504700BF 		_NEST     
 2073              	/* compiled string address is 2 levels deep */
 2074 34cc 49250000 		_ADR	RFROM	// { -- a1 }
 2075 34d0 49250000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2076 34d4 C9250000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2077 34d8 ED290000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2078 34dc 8D260000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2079 34e0 412E0000 		_ADR	ALGND	//  end of string
 2080              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2081 34e4 71250000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2082 34e8 D9250000 		_ADR	SWAP	//  count tugged
 2083 34ec 71250000 		_ADR	TOR     //  ( -- a2) is string address
 2084 34f0 1F230000 		_UNNEST
 2085              	
 2086              	/******************************************
 2087              	    $"|	( -- a )
 2088              	 	Run time routine compiled by _". 
 2089              		Return address of a compiled string.
 2090              	hidden word used by compiler
 2091              	*****************************************/
 2092              	STRQP:
 2093 34f4 504700BF 		_NEST
 2094 34f8 C9340000 		_ADR	DOSTR
 2095 34fc 1F230000 		_UNNEST			// force a call to dostr
 2096              	
 2097              	/*******************************
 2098              	    .$	( a -- )
 2099              	 	Run time routine of ." 
 2100              		Output a compiled string.
 2101              	hidden word used by compiler
 2102              	*******************************/
 2103              	DOTST:
 2104 3500 504700BF 		_NEST
 2105 3504 ED290000 		_ADR	COUNT // ( -- a+1 c )
ARM GAS  forth.s 			page 128


 2106 3508 75340000 		_ADR	TYPEE
 2107 350c 1F230000 		_UNNEST
 2108              	
 2109              	/**********************
 2110              	    ."|	( -- )
 2111              	 	Run time routine of ." 
 2112              		Output a compiled string.
 2113              	hidden word used by compiler
 2114              	*****************************/
 2115              	DOTQP:
 2116 3510 504700BF 		_NEST
 2117 3514 C9340000 		_ADR	DOSTR
 2118 3518 01350000 		_ADR	DOTST
 2119 351c 1F230000 		_UNNEST
 2120              	
 2121              	/******************************
 2122              	    .R	  ( n +n -- )
 2123              	 	Display an integer in a 
 2124              		field of n columns, 
 2125              		right justified.
 2126              	*******************************/
 2127 3520 A4340000 		_HEADER DOTR,2,".R"
 2127      022E5200 
 2128 3528 504700BF 		_NEST
 2129 352c 71250000 		_ADR	TOR
 2130 3530 A5310000 		_ADR	STRR
 2131 3534 49250000 		_ADR	RFROM
 2132 3538 ED250000 		_ADR	OVER
 2133 353c 9D260000 		_ADR	SUBB
 2134 3540 3D340000 		_ADR	SPACS
 2135 3544 75340000 		_ADR	TYPEE
 2136 3548 1F230000 		_UNNEST
 2137              	
 2138              	/*************************
 2139              	    U.R	 ( u +n -- )
 2140              	 	Display an unsigned 
 2141              		integer in n column, 
 2142              		right justified.
 2143              	***************************/
 2144 354c 24350000 		_HEADER UDOTR,3,"U.R"
 2144      03552E52 
 2145 3554 504700BF 		_NEST
 2146 3558 D9250000 		_ADR	SWAP 
 2147 355c 812C0000 		_ADR 	STOD 
 2148 3560 B1270000 		_ADR	ROT 
 2149 3564 71250000 		_ADR	TOR
 2150 3568 BD300000 		_ADR	BDIGS
 2151 356c 29310000 		_ADR	DIGS
 2152 3570 85310000 		_ADR	EDIGS
 2153 3574 49250000 		_ADR	RFROM
 2154 3578 ED250000 		_ADR	OVER
 2155 357c 9D260000 		_ADR	SUBB
 2156 3580 3D340000 		_ADR	SPACS
 2157 3584 75340000 		_ADR	TYPEE
 2158 3588 1F230000 		_UNNEST
 2159              	
 2160              	/************************
ARM GAS  forth.s 			page 129


 2161              	    U.	  ( u -- )
 2162              	 	Display an unsigned 
 2163              		integer in free format.
 2164              	***************************/
 2165 358c 50350000 		_HEADER UDOT,2,"U."
 2165      02552E00 
 2166 3594 504700BF 		_NEST
 2167 3598 812C0000 		_ADR 	STOD 
 2168 359c BD300000 		_ADR	BDIGS
 2169 35a0 29310000 		_ADR	DIGS
 2170 35a4 85310000 		_ADR	EDIGS
 2171 35a8 21340000 		_ADR	SPACE
 2172 35ac 75340000 		_ADR	TYPEE
 2173 35b0 1F230000 		_UNNEST
 2174              	
 2175              	/************************
 2176              	    .	   ( w -- )
 2177              	 	Display an integer 
 2178              		in free format, 
 2179              		preceeded by a space.
 2180              	**************************/
 2181 35b4 90350000 		_HEADER DOT,1,"."
 2181      012E00BF 
 2182 35bc 504700BF 		_NEST
 2183 35c0 852A0000 		_ADR	BASE
 2184 35c4 1D250000 		_ADR	AT
 2185 35c8 97240000 		_DOLIT 10
 2185      0A000000 
 2186 35d0 35260000 		_ADR	XORR			// ?decimal
 2187 35d4 D7240000 		_QBRAN	DOT1
 2187      E4350000 
 2188 35dc 95350000 		_ADR	UDOT
 2189 35e0 1F230000 		_UNNEST			// no,display unsigned
 2190              	DOT1:
 2191 35e4 A5310000 	    _ADR	STRR
 2192 35e8 21340000 		_ADR	SPACE
 2193 35ec 75340000 		_ADR	TYPEE
 2194 35f0 1F230000 		_UNNEST			// yes, display signed
 2195              	
 2196              	/*************************
 2197              	   D. ( d -- )
 2198              	   display double integer 
 2199              	**************************/
 2200 35f4 B8350000 		_HEADER DDOT,2,"D."
 2200      02442E00 
 2201 35fc 504700BF 		_NEST 
 2202 3600 C9250000 		_ADR DUPP 
 2203 3604 71250000 		_ADR TOR 
 2204 3608 35280000 		_ADR DABS 
 2205 360c BD300000 		_ADR BDIGS
 2206 3610 29310000 		_ADR DIGS 
 2207 3614 49250000 		_ADR RFROM
 2208 3618 5D310000 		_ADR SIGN 
 2209 361c 85310000 		_ADR EDIGS
 2210 3620 21340000 		_ADR SPACE 
 2211 3624 75340000 		_ADR TYPEE 
 2212 3628 1F230000 		_UNNEST 
ARM GAS  forth.s 			page 130


 2213              	
 2214              	
 2215              	/***********************
 2216              		H. ( w -- )
 2217              		display integer 
 2218              		in hexadecimal 
 2219              	*********************/
 2220 362c F8350000 		_HEADER HDOT,2,"H."
 2220      02482E00 
 2221 3634 504700BF 		_NEST 
 2222 3638 852A0000 		_ADR BASE
 2223 363c 1D250000 		_ADR AT 
 2224 3640 D9250000 		_ADR SWAP
 2225 3644 D9310000 		_ADR HEX
 2226 3648 95350000 		_ADR UDOT 
 2227 364c 852A0000 		_ADR BASE
 2228 3650 09250000 		_ADR STORE  
 2229 3654 1F230000 		_UNNEST 
 2230              	
 2231              	
 2232              	/***********************
 2233              	    ?	   ( a -- )
 2234              	 	Display the contents
 2235              		in a memory cell.
 2236              	*************************/
 2237 3658 30360000 		_HEADER QUEST,1,"?"
 2237      013F00BF 
 2238 3660 504700BF 		_NEST
 2239 3664 1D250000 		_ADR	AT
 2240 3668 BD350000 		_ADR	DOT
 2241 366c 1F230000 		_UNNEST
 2242              	
 2243              	/**************
 2244              	  Parsing
 2245              	***************/
 2246              	
 2247              	/*********************************************
 2248              	    parse	( b u c -- b u delta //  string> )
 2249              	 	Scan word delimited by c. 
 2250              		Return found string and its offset.
 2251              	hidden word used by PARSE
 2252              	**********************************************/
 2253              	PARS:
 2254 3670 504700BF 		_NEST
 2255 3674 8F2A0000 		_ADR	TEMP
 2256 3678 09250000 		_ADR	STORE
 2257 367c ED250000 		_ADR	OVER
 2258 3680 71250000 		_ADR	TOR
 2259 3684 C9250000 		_ADR	DUPP
 2260 3688 D7240000 		_QBRAN	PARS8
 2260      84370000 
 2261 3690 F9260000 		_ADR	ONEM
 2262 3694 8F2A0000 		_ADR	TEMP
 2263 3698 1D250000 		_ADR	AT
 2264 369c 49270000 		_ADR	BLANK
 2265 36a0 E5280000 		_ADR	EQUAL
 2266 36a4 D7240000 		_QBRAN	PARS3
ARM GAS  forth.s 			page 131


 2266      F8360000 
 2267 36ac 71250000 		_ADR	TOR
 2268              	PARS1:
 2269 36b0 49270000 		_ADR	BLANK
 2270 36b4 ED250000 		_ADR	OVER
 2271 36b8 3D250000 		_ADR	CAT			// skip leading blanks 
 2272 36bc 9D260000 		_ADR	SUBB
 2273 36c0 FD250000 		_ADR	ZLESS
 2274 36c4 99280000 		_ADR	INVER
 2275 36c8 D7240000 		_QBRAN	PARS2
 2275      F4360000 
 2276 36d0 E9260000 		_ADR	ONEP
 2277 36d4 B9240000 		_DONXT	PARS1
 2277      B0360000 
 2278 36dc 49250000 		_ADR	RFROM
 2279 36e0 B9250000 		_ADR	DROP
 2280 36e4 97240000 		_DOLIT	0
 2280      00000000 
 2281 36ec C9250000 		_ADR	DUPP
 2282 36f0 1F230000 		_UNNEST
 2283              	PARS2:
 2284 36f4 49250000 		_ADR	RFROM
 2285              	PARS3:
 2286 36f8 ED250000 		_ADR	OVER
 2287 36fc D9250000 		_ADR	SWAP
 2288 3700 71250000 		_ADR	TOR
 2289              	PARS4:
 2290 3704 8F2A0000 		_ADR	TEMP
 2291 3708 1D250000 		_ADR	AT
 2292 370c ED250000 		_ADR	OVER
 2293 3710 3D250000 		_ADR	CAT
 2294 3714 9D260000 		_ADR	SUBB			// scan for delimiter
 2295 3718 8F2A0000 		_ADR	TEMP
 2296 371c 1D250000 		_ADR	AT
 2297 3720 49270000 		_ADR	BLANK
 2298 3724 E5280000 		_ADR	EQUAL
 2299 3728 D7240000 		_QBRAN	PARS5
 2299      34370000 
 2300 3730 FD250000 		_ADR	ZLESS
 2301              	PARS5:
 2302 3734 D7240000 		_QBRAN	PARS6
 2302      58370000 
 2303 373c E9260000 		_ADR	ONEP
 2304 3740 B9240000 		_DONXT	PARS4
 2304      04370000 
 2305 3748 C9250000 		_ADR	DUPP
 2306 374c 71250000 		_ADR	TOR
 2307 3750 EB240000 		_BRAN	PARS7
 2307      6C370000 
 2308              	PARS6:
 2309 3758 49250000 		_ADR	RFROM
 2310 375c B9250000 		_ADR	DROP
 2311 3760 C9250000 		_ADR	DUPP
 2312 3764 E9260000 		_ADR	ONEP
 2313 3768 71250000 		_ADR	TOR
 2314              	PARS7:
 2315 376c ED250000 		_ADR	OVER
ARM GAS  forth.s 			page 132


 2316 3770 9D260000 		_ADR	SUBB
 2317 3774 49250000 		_ADR	RFROM
 2318 3778 49250000 		_ADR	RFROM
 2319 377c 9D260000 		_ADR	SUBB
 2320 3780 1F230000 		_UNNEST
 2321              	PARS8:
 2322 3784 ED250000 		_ADR	OVER
 2323 3788 49250000 		_ADR	RFROM
 2324 378c 9D260000 		_ADR	SUBB
 2325 3790 1F230000 		_UNNEST
 2326              	
 2327              	/************************************
 2328              	    PARSE	( c -- b u //  string> )
 2329              	 	Scan input stream and return 
 2330              		counted string delimited by c.
 2331              	************************************/
 2332 3794 5C360000 		_HEADER PARSE,5,"PARSE"
 2332      05504152 
 2332      534500BF 
 2333 37a0 504700BF 		_NEST
 2334 37a4 71250000 		_ADR	TOR
 2335 37a8 2D2F0000 		_ADR	TIB
 2336 37ac B92A0000 		_ADR	INN
 2337 37b0 1D250000 		_ADR	AT
 2338 37b4 8D260000 		_ADR	PLUS			// current input buffer pointer
 2339 37b8 CD2A0000 		_ADR	NTIB
 2340 37bc 1D250000 		_ADR	AT
 2341 37c0 B92A0000 		_ADR	INN
 2342 37c4 1D250000 		_ADR	AT
 2343 37c8 9D260000 		_ADR	SUBB			// remaining count
 2344 37cc 49250000 		_ADR	RFROM
 2345 37d0 71360000 		_ADR	PARS
 2346 37d4 B92A0000 		_ADR	INN
 2347 37d8 A5290000 		_ADR	PSTOR
 2348 37dc 1F230000 		_UNNEST
 2349              	
 2350              	/*******************************
 2351              	    .(	  ( -- )
 2352              	 	Output following string 
 2353              		up to next ) .
 2354              	******************************/
 2355 37e0 98370000 		_HEADER DOTPR,2,".("
 2355      022E2800 
 2356 37e8 504700BF 		_NEST
 2357 37ec 97240000 		_DOLIT	')'
 2357      29000000 
 2358 37f4 A1370000 		_ADR	PARSE
 2359 37f8 75340000 		_ADR	TYPEE
 2360 37fc 1F230000 		_UNNEST
 2361              	
 2362              	/************************
 2363              	    (	   ( -- )
 2364              	 	Ignore following 
 2365              		string up to next )
 2366              		A comment.
 2367              	************************/
 2368 3800 E4370000 		_HEADER PAREN,IMEDD+1,"("
ARM GAS  forth.s 			page 133


 2368      812800BF 
 2369 3808 504700BF 		_NEST
 2370 380c 97240000 		_DOLIT	')'
 2370      29000000 
 2371 3814 A1370000 		_ADR	PARSE
 2372 3818 D9270000 		_ADR	DDROP
 2373 381c 1F230000 		_UNNEST
 2374              	
 2375              	/*******************
 2376              	    \	   ( -- )
 2377              	 	Ignore following 
 2378              		text till the 
 2379              		end of line.
 2380              	********************/
 2381 3820 04380000 		_HEADER BKSLA,IMEDD+1,"\\"
 2381      815C00BF 
 2382 3828 504700BF 		_NEST
 2383 382c CD2A0000 		_ADR	NTIB
 2384 3830 1D250000 		_ADR	AT
 2385 3834 B92A0000 		_ADR	INN
 2386 3838 09250000 		_ADR	STORE
 2387 383c 1F230000 		_UNNEST
 2388              	
 2389              	/******************************
 2390              	    CHAR	( -- c )
 2391              	 	Parse next word and
 2392              		return its first character.
 2393              	*******************************/
 2394 3840 24380000 		_HEADER CHAR,4,"CHAR"
 2394      04434841 
 2394      520000BF 
 2395 384c 504700BF 		_NEST
 2396 3850 49270000 		_ADR	BLANK
 2397 3854 A1370000 		_ADR	PARSE
 2398 3858 B9250000 		_ADR	DROP
 2399 385c 3D250000 		_ADR	CAT
 2400 3860 1F230000 		_UNNEST
 2401              	
 2402              	/**********************************
 2403              		[CHAR] ( -- c )
 2404              		immediate version of CHAR 
 2405              	**********************************/
 2406 3864 44380000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2406      C65B4348 
 2406      41525D00 
 2407 3870 504700BF 		_NEST 
 2408 3874 4D380000 		_ADR CHAR
 2409 3878 993F0000 		_ADR LITER 
 2410 387c 1F230000 		_UNNEST 
 2411              	
 2412              	/**********************************
 2413              	    WORD	( c -- a //  string> )
 2414              	 	Parse a word from input stream
 2415              		and copy it to code dictionary.
 2416              	***********************************/
 2417 3880 68380000 		_HEADER WORDD,4,"WORD"
 2417      04574F52 
ARM GAS  forth.s 			page 134


 2417      440000BF 
 2418 388c 504700BF 		_NEST
 2419 3890 A1370000 		_ADR	PARSE
 2420 3894 F52E0000 		_ADR	HERE
 2421 3898 29270000 		_ADR	CELLP
 2422 389c FD2F0000 		_ADR	PACKS
 2423 38a0 1F230000 		_UNNEST
 2424              	
 2425              	/********************************
 2426              	    TOKEN	( -- a //  string> )
 2427              	 	Parse a word from input 
 2428              		stream and copy it to 
 2429              		name dictionary.
 2430              	*********************************/
 2431 38a4 84380000 		_HEADER TOKEN,5,"TOKEN"
 2431      05544F4B 
 2431      454E00BF 
 2432 38b0 504700BF 		_NEST
 2433 38b4 49270000 		_ADR	BLANK
 2434 38b8 8D380000 		_ADR	WORDD
 2435 38bc A53A0000 		_ADR	UPPER 
 2436 38c0 1F230000 		_UNNEST
 2437              	
 2438              	/**********************
 2439              	  Dictionary search
 2440              	***********************/
 2441              	
 2442              	/*************************
 2443              	    NAME>	( na -- ca )
 2444              	 	Return a code address
 2445              		given a name address.
 2446              	**************************/
 2447 38c4 A8380000 		_HEADER NAMET,5,"NAME>"
 2447      054E414D 
 2447      453E00BF 
 2448 38d0 504700BF 		_NEST
 2449 38d4 ED290000 		_ADR	COUNT
 2450 38d8 97240000 		_DOLIT	0x1F
 2450      1F000000 
 2451 38e0 0D260000 		_ADR	ANDD
 2452 38e4 8D260000 		_ADR	PLUS
 2453 38e8 412E0000 		_ADR	ALGND
 2454 38ec 1F230000 		_UNNEST
 2455              	
 2456              	/***************************************
 2457              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2458              	 	Compare u bytes in two strings. 
 2459              		Return 0 if identical.
 2460              	
 2461              	  Picatout 2020-12-01, 
 2462              	    Because of problem with .align 
 2463              		directive that doesn't fill 
 2464              		with zero's I had to change 
 2465              		the "SAME?" and "FIND" 
 2466              	 	words  to do a byte by byte comparison. 
 2467              	****************************************/
 2468 38f0 C8380000 		_HEADER SAMEQ,5,"SAME?"
ARM GAS  forth.s 			page 135


 2468      0553414D 
 2468      453F00BF 
 2469 38fc 504700BF 		_NEST
 2470 3900 71250000 		_ADR	TOR
 2471 3904 EB240000 		_BRAN	SAME2
 2471      48390000 
 2472              	SAME1:
 2473 390c ED250000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2474 3910 5D250000 		_ADR	RAT   // a1 a2 a1 u 
 2475 3914 8D260000 		_ADR	PLUS  // a1 a2 a1+u 
 2476 3918 3D250000 		_ADR	CAT	   // a1 a2 c1    		
 2477 391c ED250000 		_ADR	OVER  // a1 a2 c1 a2 
 2478 3920 5D250000 		_ADR	RAT    
 2479 3924 8D260000 		_ADR	PLUS    
 2480 3928 3D250000 		_ADR	CAT	  // a1 a2 c1 c2
 2481 392c 9D260000 		_ADR	SUBB  
 2482 3930 9D270000 		_ADR	QDUP
 2483 3934 D7240000 		_QBRAN	SAME2
 2483      48390000 
 2484 393c 49250000 		_ADR	RFROM
 2485 3940 B9250000 		_ADR	DROP
 2486 3944 1F230000 		_UNNEST	// strings not equal
 2487              	SAME2:
 2488 3948 B9240000 		_DONXT	SAME1
 2488      0C390000 
 2489 3950 97240000 		_DOLIT	0
 2489      00000000 
 2490 3958 1F230000 		_UNNEST	// strings equal
 2491              	
 2492              	/***********************************
 2493              	    FIND	( a na -- ca na | a F )
 2494              	 	Search a vocabulary for a string.
 2495              		Return ca and na if succeeded.
 2496              	hidden word used by NAME?
 2497              	
 2498              	  Picatout 2020-12-01,  
 2499              		 Modified from original. 
 2500              	   See comment for word "SAME?" 
 2501              	************************************/
 2502              	FIND:
 2503 395c 504700BF 		_NEST
 2504 3960 D9250000 		_ADR	SWAP			// na a	
 2505 3964 ED290000 		_ADR	COUNT			// na a+1 count
 2506 3968 C9250000 		_ADR	DUPP 
 2507 396c 8F2A0000 		_ADR	TEMP
 2508 3970 09250000 		_ADR	STORE			// na a+1 count 
 2509 3974 71250000 		_ADR  TOR		// na a+1  R: count  
 2510 3978 D9250000 		_ADR	SWAP			// a+1 na
 2511              	FIND1:
 2512 397c C9250000 		_ADR	DUPP			// a+1 na na
 2513 3980 D7240000 		_QBRAN	FIND6	// end of vocabulary
 2513      D4390000 
 2514 3988 C9250000 		_ADR	DUPP			// a+1 na na
 2515 398c 3D250000 		_ADR	CAT			// a+1 na name1
 2516 3990 97240000 		_DOLIT	MASKK
 2516      1FFFFFFF 
 2517 3998 0D260000 		_ADR	ANDD
ARM GAS  forth.s 			page 136


 2518 399c 5D250000 		_ADR	RAT			// a+1 na name1 count 
 2519 39a0 35260000 		_ADR	XORR			// a+1 na,  same length?
 2520 39a4 D7240000 		_QBRAN	FIND2
 2520      BC390000 
 2521 39ac 39270000 		_ADR	CELLM			// a+1 la
 2522 39b0 1D250000 		_ADR	AT			// a+1 next_na
 2523 39b4 EB240000 		_BRAN	FIND1			// try next word
 2523      7C390000 
 2524              	FIND2:   
 2525 39bc E9260000 		_ADR	ONEP			// a+1 na+1
 2526 39c0 8F2A0000 		_ADR	TEMP
 2527 39c4 1D250000 		_ADR	AT			// a+1 na+1 count
 2528 39c8 FD380000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2529              	FIND3:	
 2530 39cc EB240000 		_BRAN	FIND4
 2530      EC390000 
 2531              	FIND6:	
 2532 39d4 49250000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2533 39d8 B9250000 		_ADR	DROP			// a+1 0
 2534 39dc D9250000 		_ADR	SWAP			// 0 a+1
 2535 39e0 F9260000 		_ADR	ONEM			// 0 a
 2536 39e4 D9250000 		_ADR	SWAP			// a 0 
 2537 39e8 1F230000 		_UNNEST			// return without a match
 2538              	FIND4:	
 2539 39ec D7240000 		_QBRAN	FIND5			// a+1 na+1
 2539      083A0000 
 2540 39f4 F9260000 		_ADR	ONEM			// a+1 na
 2541 39f8 39270000 		_ADR	CELLM			// a+4 la
 2542 39fc 1D250000 		_ADR	AT			// a+1 next_na
 2543 3a00 EB240000 		_BRAN	FIND1			// compare next name
 2543      7C390000 
 2544              	FIND5:	
 2545 3a08 49250000 		_ADR	RFROM			// a+1 na+1 count
 2546 3a0c B9250000 		_ADR	DROP			// a+1 na+1
 2547 3a10 D9250000 		_ADR	SWAP			// na+1 a+1
 2548 3a14 B9250000 		_ADR	DROP			// na+1
 2549 3a18 F9260000 		_ADR	ONEM			// na
 2550 3a1c C9250000 		_ADR	DUPP			// na na
 2551 3a20 D1380000 		_ADR	NAMET			// na ca
 2552 3a24 D9250000 		_ADR	SWAP			// ca na
 2553 3a28 1F230000 		_UNNEST			//  return with a match
 2554              	
 2555              	/********************************
 2556              	    NAME?	( a -- ca na | a F )
 2557              	 	Search all context vocabularies 
 2558              		for a string.
 2559              	***********************************/
 2560 3a2c F4380000 		_HEADER NAMEQ,5,"NAME?"
 2560      054E414D 
 2560      453F00BF 
 2561 3a38 504700BF 		_NEST
 2562 3a3c 0D2B0000 		_ADR	CNTXT
 2563 3a40 1D250000 		_ADR	AT
 2564 3a44 5D390000 		_ADR	FIND
 2565 3a48 1F230000 		_UNNEST
 2566              	
 2567              	/********************
ARM GAS  forth.s 			page 137


 2568              	  console input
 2569              	********************/
 2570              	
 2571              	/****************************
 2572              		ASCIZ ( a -- a+ )
 2573              		convert counted string to 
 2574              		null terminated string 
 2575              		in pad.
 2576              	*****************************/
 2577 3a4c 303A0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2577      05415343 
 2577      495A00BF 
 2578 3a58 504700BF 		_NEST 
 2579 3a5c ED290000 		_ADR COUNT
 2580 3a60 C9250000 		_ADR DUPP
 2581 3a64 71250000 		_ADR TOR 
 2582 3a68 0D2F0000 		_ADR PAD 
 2583 3a6c D9250000 		_ADR SWAP
 2584 3a70 952F0000 		_ADR MOVE  
 2585 3a74 0D2F0000 		_ADR PAD 
 2586 3a78 49250000 		_ADR RFROM
 2587 3a7c 8D260000 		_ADR PLUS 
 2588 3a80 97240000 		_DOLIT 0 
 2588      00000000 
 2589 3a88 D9250000 		_ADR SWAP  
 2590 3a8c 29250000 		_ADR CSTOR
 2591 3a90 0D2F0000 		_ADR PAD   
 2592 3a94 1F230000 		_UNNEST 
 2593              	
 2594              	/***********************
 2595              		UPPER (cstring -- cstring )
 2596              		convert to upper case in situ
 2597              	*******************************/
 2598 3a98 503A0000 		_HEADER UPPER,5,"UPPER"
 2598      05555050 
 2598      455200BF 
 2599 3aa4 504700BF 		_NEST 
 2600 3aa8 C9250000 		_ADR DUPP 
 2601 3aac 71250000 		_ADR TOR 
 2602 3ab0 ED290000 		_ADR COUNT
 2603 3ab4 97240000 		_DOLIT 0x1f
 2603      1F000000 
 2604 3abc 0D260000 		_ADR ANDD
 2605 3ac0 71250000 		_ADR TOR 
 2606 3ac4 EB240000 		_BRAN 3f
 2606      183B0000 
 2607 3acc C9250000 	1:  _ADR DUPP 
 2608 3ad0 ED290000 		_ADR COUNT 
 2609 3ad4 C9250000 		_ADR DUPP 
 2610 3ad8 97240000 		_DOLIT 'a'-1
 2610      60000000 
 2611 3ae0 65290000 		_ADR GREAT
 2612 3ae4 D7240000 		_QBRAN 2f 
 2612      103B0000 
 2613 3aec C9250000 		_ADR DUPP 
 2614 3af0 97240000 		_DOLIT 'z'+1 
 2614      7B000000 
ARM GAS  forth.s 			page 138


 2615 3af8 35290000 		_ADR LESS 
 2616 3afc D7240000 		_QBRAN 2f 
 2616      103B0000 
 2617 3b04 97240000 		_DOLIT 0x5f  
 2617      5F000000 
 2618 3b0c 0D260000 		_ADR ANDD
 2619 3b10 B1270000 	2:	_ADR ROT
 2620 3b14 29250000 		_ADR CSTOR
 2621 3b18 B9240000 	3:  _DONXT 1b
 2621      CC3A0000 
 2622 3b20 B9250000 		_ADR DROP 
 2623 3b24 49250000 		_ADR RFROM
 2624 3b28 1F230000 		_UNNEST 
 2625              	
 2626              	/**************************************
 2627              	   BKSP  ( bot eot cur -- bot eot cur )
 2628              	   Move cursor left by one character.
 2629              	hidden word used by KTAP
 2630              	***************************************/
 2631              	BKSP:
 2632 3b2c 504700BF 		_NEST
 2633 3b30 71250000 		_ADR	TOR
 2634 3b34 ED250000 		_ADR	OVER
 2635 3b38 49250000 		_ADR	RFROM
 2636 3b3c D9250000 		_ADR	SWAP
 2637 3b40 ED250000 		_ADR	OVER
 2638 3b44 35260000 		_ADR	XORR
 2639 3b48 D7240000 		_QBRAN	BACK1
 2639      743B0000 
 2640 3b50 97240000 		_DOLIT	BKSPP
 2640      08000000 
 2641 3b58 A1230000 		_ADR	EMIT
 2642 3b5c F9260000 		_ADR	ONEM
 2643 3b60 49270000 		_ADR	BLANK
 2644 3b64 A1230000 		_ADR	EMIT
 2645 3b68 97240000 		_DOLIT	BKSPP
 2645      08000000 
 2646 3b70 A1230000 		_ADR	EMIT
 2647              	BACK1:
 2648 3b74 1F230000 		  _UNNEST
 2649              	
 2650              	/****************************************
 2651              	   TAP	 ( bot eot cur c -- bot eot cur )
 2652              	   Accept and echo the key stroke 
 2653              	   and bump the cursor.
 2654              	hidden word used by KTAP 
 2655              	****************************************/
 2656              	TAP:
 2657 3b78 504700BF 		_NEST
 2658 3b7c C9250000 		_ADR	DUPP
 2659 3b80 A1230000 		_ADR	EMIT
 2660 3b84 ED250000 		_ADR	OVER
 2661 3b88 29250000 		_ADR	CSTOR
 2662 3b8c E9260000 		_ADR	ONEP
 2663 3b90 1F230000 		_UNNEST
 2664              	
 2665              	
ARM GAS  forth.s 			page 139


 2666              	/*******************************************
 2667              	    kTAP	( bot eot cur c -- bot eot cur )
 2668              	 	Process a key stroke, CR or backspace.
 2669              	hidden word used by ACCEPT 
 2670              	*******************************************/
 2671              	KTAP:
 2672              	TTAP:
 2673 3b94 504700BF 		_NEST
 2674 3b98 C9250000 		_ADR	DUPP
 2675 3b9c 97240000 		_DOLIT	CRR
 2675      0D000000 
 2676 3ba4 35260000 		_ADR	XORR
 2677 3ba8 D7240000 		_QBRAN  KTAP2
 2677      D83B0000 
 2678 3bb0 97240000 		_DOLIT	BKSPP
 2678      08000000 
 2679 3bb8 35260000 		_ADR	XORR
 2680 3bbc D7240000 		_QBRAN	KTAP1
 2680      D03B0000 
 2681 3bc4 49270000 		_ADR	BLANK
 2682 3bc8 793B0000 		_ADR	TAP
 2683 3bcc 1F230000 		_UNNEST
 2684              	//	.word	0			// patch
 2685              	KTAP1:
 2686 3bd0 2D3B0000 		_ADR	BKSP
 2687 3bd4 1F230000 		_UNNEST
 2688              	KTAP2:
 2689 3bd8 B9250000 		_ADR	DROP
 2690 3bdc D9250000 		_ADR	SWAP
 2691 3be0 B9250000 		_ADR	DROP
 2692 3be4 C9250000 		_ADR	DUPP
 2693 3be8 1F230000 		_UNNEST
 2694              	
 2695              	/************************************
 2696              	    ACCEPT	( b u -- b u )
 2697              	 	Accept characters to input 
 2698              		buffer. Return with actual count.
 2699              	*************************************/
 2700 3bec 9C3A0000 		_HEADER ACCEP,6,"ACCEPT"
 2700      06414343 
 2700      45505400 
 2701 3bf8 504700BF 		_NEST
 2702 3bfc ED250000 		_ADR	OVER
 2703 3c00 8D260000 		_ADR	PLUS
 2704 3c04 ED250000 		_ADR	OVER
 2705              	ACCP1:
 2706 3c08 01280000 		_ADR	DDUP
 2707 3c0c 35260000 		_ADR	XORR
 2708 3c10 D7240000 		_QBRAN	ACCP4
 2708      503C0000 
 2709 3c18 7D230000 		_ADR	KEY
 2710 3c1c C9250000 		_ADR	DUPP
 2711 3c20 49270000 		_ADR	BLANK
 2712 3c24 97240000 		_DOLIT 127
 2712      7F000000 
 2713 3c2c A52B0000 		_ADR	WITHI
 2714 3c30 D7240000 		_QBRAN	ACCP2
ARM GAS  forth.s 			page 140


 2714      443C0000 
 2715 3c38 793B0000 		_ADR	TAP
 2716 3c3c EB240000 		_BRAN	ACCP3
 2716      483C0000 
 2717              	ACCP2:
 2718 3c44 953B0000 		_ADR	KTAP
 2719              	ACCP3:	  
 2720 3c48 EB240000 		_BRAN	ACCP1
 2720      083C0000 
 2721              	ACCP4:
 2722 3c50 B9250000 		_ADR	DROP
 2723 3c54 ED250000 		_ADR	OVER
 2724 3c58 9D260000 		_ADR	SUBB
 2725 3c5c 1F230000 		_UNNEST
 2726              	
 2727              	/*****************************
 2728              	    QUERY	( -- )
 2729              	 	Accept input stream 
 2730              		to terminal input buffer.
 2731              	******************************/
 2732 3c60 F03B0000 		_HEADER QUERY,5,"QUERY"
 2732      05515545 
 2732      525900BF 
 2733 3c6c 504700BF 		_NEST
 2734 3c70 2D2F0000 		_ADR	TIB
 2735 3c74 97240000 		_DOLIT 80
 2735      50000000 
 2736 3c7c F93B0000 		_ADR	ACCEP
 2737 3c80 CD2A0000 		_ADR	NTIB
 2738 3c84 09250000 		_ADR	STORE
 2739 3c88 B9250000 		_ADR	DROP
 2740 3c8c 97240000 		_DOLIT	0
 2740      00000000 
 2741 3c94 B92A0000 		_ADR	INN
 2742 3c98 09250000 		_ADR	STORE
 2743 3c9c 1F230000 		_UNNEST
 2744              	
 2745              	/********************
 2746              	  Error handling
 2747              	********************/
 2748              	
 2749              	/*********************
 2750              	    ABORT	( a -- )
 2751              	 	Reset data stack 
 2752              		and jump to QUIT.
 2753              	**********************/
 2754 3ca0 643C0000 		_HEADER ABORT,5,"ABORT"
 2754      0541424F 
 2754      525400BF 
 2755 3cac 504700BF 		_NEST
 2756              	ABORT1:
 2757 3cb0 21340000 		_ADR	SPACE
 2758 3cb4 ED290000 		_ADR	COUNT
 2759 3cb8 75340000 		_ADR	TYPEE
 2760 3cbc 97240000 		_DOLIT	0X3F
 2760      3F000000 
 2761 3cc4 A1230000 		_ADR	EMIT
ARM GAS  forth.s 			page 141


 2762 3cc8 A9340000 		_ADR	CR
 2763 3ccc 353E0000 		_ADR	PRESE
 2764 3cd0 EB240000 		_BRAN	QUIT
 2764      543E0000 
 2765              	
 2766              	/*******************************
 2767              	    _abort"	( f -- )
 2768              	 	Run time routine of ABORT"
 2769              		Abort with a message.
 2770              	hidden used by compiler 
 2771              	********************************/
 2772              	ABORQ:
 2773 3cd8 504700BF 		_NEST
 2774 3cdc C9340000 		_ADR	DOSTR
 2775 3ce0 D9250000 		_ADR	SWAP 
 2776 3ce4 D7240000 		_QBRAN	1f	// text flag
 2776      F43C0000 
 2777 3cec EB240000 		_BRAN	ABORT1
 2777      B03C0000 
 2778              	1:
 2779 3cf4 B9250000 		_ADR	DROP
 2780 3cf8 1F230000 		_UNNEST			// drop error
 2781              	
 2782              	/************************
 2783              	  The text interpreter
 2784              	************************/
 2785              	
 2786              	/***************************
 2787              	    $INTERPRET  ( a -- )
 2788              	 	Interpret a word. 
 2789              		If failed, try to 
 2790              		convert it to an integer.
 2791              	******************************/
 2792 3cfc A43C0000 		_HEADER INTER,10,"$INTERPRET"
 2792      0A24494E 
 2792      54455250 
 2792      52455400 
 2793 3d0c 504700BF 		_NEST
 2794 3d10 393A0000 		_ADR	NAMEQ
 2795 3d14 9D270000 		_ADR	QDUP	// ?defined
 2796 3d18 D7240000 		_QBRAN	INTE1
 2796      4C3D0000 
 2797 3d20 1D250000 		_ADR	AT
 2798 3d24 97240000 		_DOLIT	COMPO
 2798      40000000 
 2799 3d2c 0D260000 		_ADR	ANDD	// ?compile only lexicon bits
 2800 3d30 D93C0000 		_ABORQ	13," compile only"
 2800      0D20636F 
 2800      6D70696C 
 2800      65206F6E 
 2800      6C7900BF 
 2801 3d44 AD240000 		_ADR	EXECU
 2802 3d48 1F230000 		_UNNEST			// execute defined word
 2803              	INTE1:
 2804 3d4c F1220000 		_ADR	NUMBER 
 2805 3d50 D7240000 		_QBRAN	INTE2
 2805      5C3D0000 
ARM GAS  forth.s 			page 142


 2806 3d58 1F230000 		_UNNEST
 2807              	INTE2:
 2808 3d5c AD3C0000 		_ADR	ABORT	// error
 2809              	
 2810              	/******************************
 2811              	    [	   ( -- )
 2812              	 	Start the text interpreter.
 2813              	*******************************/
 2814 3d60 003D0000 		_HEADER LBRAC,IMEDD+1,"["
 2814      815B00BF 
 2815 3d68 504700BF 		_NEST
 2816 3d6c 97240000 		_DOLIT	INTER
 2816      0C3D0000 
 2817 3d74 E12A0000 		_ADR	TEVAL
 2818 3d78 09250000 		_ADR	STORE
 2819 3d7c 1F230000 		_UNNEST
 2820              	
 2821              	/**********************
 2822              	    .OK	 ( -- )
 2823              	 	Display "ok" only 
 2824              		while interpreting.
 2825              	************************/
 2826 3d80 643D0000 		_HEADER DOTOK,3,".OK"
 2826      032E4F4B 
 2827 3d88 504700BF 		_NEST
 2828 3d8c 97240000 		_DOLIT	INTER
 2828      0C3D0000 
 2829 3d94 E12A0000 		_ADR	TEVAL
 2830 3d98 1D250000 		_ADR	AT
 2831 3d9c E5280000 		_ADR	EQUAL
 2832 3da0 D7240000 		_QBRAN	DOTO1
 2832      B03D0000 
 2833 3da8 11350000 		_DOTQP	3," ok"
 2833      03206F6B 
 2834              	DOTO1:
 2835 3db0 A9340000 		_ADR	CR
 2836 3db4 1F230000 		_UNNEST
 2837              	
 2838              	/*************************
 2839              	    ?STACK	( -- )
 2840              	 	Abort if the data 
 2841              		stack underflows.
 2842              	************************/
 2843 3db8 843D0000 		_HEADER QSTAC,6,"?STACK"
 2843      063F5354 
 2843      41434B00 
 2844 3dc4 504700BF 		_NEST
 2845 3dc8 A92E0000 		_ADR	DEPTH
 2846 3dcc FD250000 		_ADR	ZLESS	// check only for underflow
 2847 3dd0 D93C0000 		_ABORQ	9,"underflow"
 2847      09756E64 
 2847      6572666C 
 2847      6F7700BF 
 2848 3de0 1F230000 		_UNNEST
 2849              	
 2850              	/*******************
 2851              	    EVAL	( -- )
ARM GAS  forth.s 			page 143


 2852              	 	Interpret the 
 2853              		input stream.
 2854              	*******************/
 2855 3de4 BC3D0000 		_HEADER EVAL,4,"EVAL"
 2855      04455641 
 2855      4C0000BF 
 2856 3df0 504700BF 		_NEST
 2857              	EVAL1:
 2858 3df4 B1380000 	    _ADR	TOKEN
 2859 3df8 C9250000 		_ADR	DUPP
 2860 3dfc 3D250000 		_ADR	CAT	// ?input stream empty
 2861 3e00 D7240000 		_QBRAN	EVAL2
 2861      1C3E0000 
 2862 3e08 E12A0000 		_ADR	TEVAL
 2863 3e0c 452F0000 		_ADR	ATEXE
 2864 3e10 C53D0000 		_ADR	QSTAC	// evaluate input, check stack
 2865 3e14 EB240000 		_BRAN	EVAL1
 2865      F43D0000 
 2866              	EVAL2:
 2867 3e1c B9250000 		_ADR	DROP
 2868 3e20 893D0000 		_ADR	DOTOK
 2869 3e24 1F230000 		_UNNEST	// prompt
 2870              	
 2871              	/**********************************
 2872              	    PRESET	( -- )
 2873              	 	Reset data stack pointer 
 2874              		and the terminal input buffer.
 2875              	**********************************/
 2876 3e28 E83D0000 		_HEADER PRESE,6,"PRESET"
 2876      06505245 
 2876      53455400 
 2877 3e34 504700BF 		_NEST 
 2878 3e38 97240000 		_DOLIT SPP 
 2878      00FF0120 
 2879 3e40 95250000 		_ADR SPSTOR 
 2880 3e44 1F230000 		_UNNEST 
 2881              	
 2882              	/*********************
 2883              	    QUIT	( -- )
 2884              	 	Reset return stack 
 2885              		pointer and start 
 2886              		text interpreter.
 2887              	***********************/
 2888 3e48 2C3E0000 		_HEADER QUIT,4,"QUIT"
 2888      04515549 
 2888      540000BF 
 2889 3e54 97240000 		_DOLIT RPP 
 2889      80FF0120 
 2890 3e5c 85250000 		_ADR RPSTOR 
 2891              	QUIT1:
 2892 3e60 693D0000 		_ADR	LBRAC			// start interpretation
 2893              	QUIT2:
 2894 3e64 6D3C0000 		_ADR	QUERY			// get input
 2895 3e68 F13D0000 		_ADR	EVAL
 2896 3e6c EB240000 		_BRAN	QUIT2	// continue till error
 2896      643E0000 
 2897              	
ARM GAS  forth.s 			page 144


 2898              	/***************************
 2899              		FORGET ( <string> -- )
 2900              		forget all definition 
 2901              		starting at <string>
 2902              	****************************/
 2903 3e74 4C3E0000 		_HEADER FORGET,6,"FORGET"
 2903      06464F52 
 2903      47455400 
 2904 3e80 504700BF 		_NEST 
 2905 3e84 B1380000 		_ADR TOKEN 
 2906 3e88 C9250000 		_ADR DUPP 
 2907 3e8c D7240000 		_QBRAN 9f 
 2907      C83E0000 
 2908 3e94 393A0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2909 3e98 9D270000 		_ADR QDUP 
 2910 3e9c D7240000 		_QBRAN 8f
 2910      C43E0000 
 2911 3ea4 39270000 		_ADR CELLM // ( ca la )
 2912 3ea8 C9250000 		_ADR DUPP 
 2913 3eac 212B0000 		_ADR CPP   
 2914 3eb0 09250000 		_ADR STORE
 2915 3eb4 1D250000 		_ADR AT 
 2916 3eb8 4D2B0000 		_ADR LAST 
 2917 3ebc 09250000 		_ADR STORE
 2918 3ec0 1D440000 		_ADR OVERT 
 2919 3ec4 B9250000 	8:  _ADR DROP 
 2920 3ec8 1F230000 	9:	_UNNEST 
 2921              	
 2922              		.p2align 2 
 2923              	
 2924              	/*****************
 2925              	  The compiler
 2926              	******************/
 2927              	
 2928              	/**************************************
 2929              	    '	   ( -- ca )
 2930              	 	Search context vocabularies 
 2931              		for the next word in input stream.
 2932              	***************************************/
 2933 3ecc 783E0000 		_HEADER TICK,1,"'"
 2933      012700BF 
 2934 3ed4 504700BF 		_NEST
 2935 3ed8 B1380000 		_ADR	TOKEN
 2936 3edc 393A0000 		_ADR	NAMEQ	// ?defined
 2937 3ee0 D7240000 		_QBRAN	TICK1
 2937      EC3E0000 
 2938 3ee8 1F230000 		_UNNEST	// yes, push code address
 2939              	TICK1:	
 2940 3eec AD3C0000 		_ADR ABORT	// no, error
 2941              	
 2942              	/***********************
 2943              	    ALLOT	( n -- )
 2944              	 	Allocate n bytes to 
 2945              		the ram area.
 2946              	************************/
 2947 3ef0 D03E0000 		_HEADER ALLOT,5,"ALLOT"
 2947      05414C4C 
ARM GAS  forth.s 			page 145


 2947      4F5400BF 
 2948 3efc 504700BF 		_NEST
 2949 3f00 212B0000 		_ADR	CPP
 2950 3f04 A5290000 		_ADR	PSTOR
 2951 3f08 1F230000 		_UNNEST			// adjust code pointer
 2952              	
 2953              	/******************************
 2954              	    ,	   ( w -- )
 2955              	 	Compile an integer 
 2956              		into the code dictionary.
 2957              	******************************/
 2958 3f0c F43E0000 		_HEADER COMMA,1,","
 2958      012C00BF 
 2959 3f14 504700BF 		_NEST
 2960 3f18 F52E0000 		_ADR	HERE
 2961 3f1c C9250000 		_ADR	DUPP
 2962 3f20 29270000 		_ADR	CELLP	// cell boundary
 2963 3f24 212B0000 		_ADR	CPP
 2964 3f28 09250000 		_ADR	STORE
 2965 3f2c 09250000 		_ADR	STORE
 2966 3f30 1F230000 		_UNNEST	// adjust code pointer, compile
 2967              		.p2align 2 
 2968              	
 2969              	/************************************
 2970              	    [COMPILE]   ( -- //  string> )
 2971              	 	Compile the next immediate word 
 2972              		into code dictionary.
 2973              	*************************************/
 2974 3f34 103F0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2974      895B434F 
 2974      4D50494C 
 2974      455D00BF 
 2975 3f44 504700BF 		_NEST
 2976 3f48 D53E0000 		_ADR	TICK
 2977 3f4c 153F0000 		_ADR	COMMA
 2978 3f50 1F230000 		_UNNEST
 2979              	
 2980              	/****************************
 2981              	    COMPILE	( -- )
 2982              	 	Compile the next address 
 2983              		in colon list to code 
 2984              		dictionary.
 2985              	*******************************/
 2986 3f54 383F0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2986      47434F4D 
 2986      50494C45 
 2987 3f60 504700BF 		_NEST
 2988 3f64 49250000 		_ADR	RFROM
 2989 3f68 C9250000 		_ADR	DUPP 
 2990 3f6c 1D250000 		_ADR	AT
 2991 3f70 97240000 		_DOLIT 1 
 2991      01000000 
 2992 3f78 21260000 		_ADR	ORR 
 2993 3f7c 153F0000 		_ADR	COMMA 
 2994 3f80 29270000 		_ADR	CELLP 
 2995 3f84 71250000 		_ADR	TOR 
 2996 3f88 1F230000 		_UNNEST	// adjust return address
ARM GAS  forth.s 			page 146


 2997              	
 2998              	/*************************
 2999              	    LITERAL	( w -- )
 3000              	 	Compile tos to code 
 3001              		dictionary as an 
 3002              		integer literal.
 3003              	***************************/
 3004 3f8c 583F0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3004      874C4954 
 3004      4552414C 
 3005 3f98 504700BF 		_NEST
 3006 3f9c 97240000 		_COMPI	DOLIT
 3006      96240000 
 3006      79440000 
 3007 3fa8 153F0000 		_ADR	COMMA
 3008 3fac 1F230000 		_UNNEST
 3009              	
 3010              	/********************
 3011              	    $,"	( -- )
 3012              	 	Compile a literal 
 3013              		string up to next " .
 3014              	hidden word 
 3015              	************************/
 3016              	STRCQ:
 3017 3fb0 504700BF 		_NEST
 3018 3fb4 97240000 		_DOLIT -4
 3018      FCFFFFFF 
 3019 3fbc 212B0000 		_ADR	CPP
 3020 3fc0 A5290000 		_ADR	PSTOR
 3021 3fc4 97240000 		_DOLIT	'\"'
 3021      22000000 
 3022 3fcc 8D380000 		_ADR	WORDD			// move word to code dictionary
 3023 3fd0 ED290000 		_ADR	COUNT
 3024 3fd4 8D260000 		_ADR	PLUS
 3025 3fd8 412E0000 		_ADR	ALGND			// calculate aligned end of string
 3026 3fdc 212B0000 		_ADR	CPP
 3027 3fe0 09250000 		_ADR	STORE
 3028 3fe4 1F230000 		_UNNEST 			// adjust the code pointer
 3029              	
 3030              	/*******************
 3031              	   Structures
 3032              	*******************/
 3033              	
 3034              	/*************************
 3035              	    FOR	 ( -- a )
 3036              	 	Start a FOR-NEXT loop 
 3037              		structure in a colon 
 3038              		definition.
 3039              	**************************/
 3040 3fe8 903F0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3040      C3464F52 
 3041 3ff0 504700BF 		_NEST
 3042 3ff4 97240000 		_COMPI	TOR
 3042      70250000 
 3042      79440000 
 3043 4000 F52E0000 		_ADR	HERE
 3044 4004 1F230000 		_UNNEST
ARM GAS  forth.s 			page 147


 3045              	
 3046              	/********************************
 3047              		DO ( limit start -- )
 3048              		initialise a DO...LOOP 
 3049              		or DO...+LOOP 
 3050              	********************************/
 3051 4008 EC3F0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3051      C2444F00 
 3052 4010 504700BF 		_NEST
 3053 4014 97240000 		_COMPI SWAP
 3053      D8250000 
 3053      79440000 
 3054 4020 97240000 		_COMPI TOR 
 3054      70250000 
 3054      79440000 
 3055 402c 97240000 		_COMPI TOR 
 3055      70250000 
 3055      79440000 
 3056 4038 F52E0000 		_ADR HERE 
 3057 403c 1F230000 		_UNNEST 
 3058              	
 3059              	DOPLOOP: // ( n -- R: counter limit )
 3060 4040 B8E80300 		ldmfd RSP!,{T0,T1}
 3061 4044 3044     		add T0,TOS 
 3062 4046 28E90300 		stmfd RSP!,{T0,T1}
 3063 404a 8842     		cmp T0,T1 
 3064 404c 05D4     		bmi 9f 
 3065 404e 08F10808 		add RSP,#8
 3066 4052 0CF1040C 		add IP,#4
 3067 4056 FEF75FB9 		_NEXT 
 3068 405a DCF800C0 	9:  ldr IP,[IP]
 3069 405e FEF75BB9 		_NEXT 
 3070              		
 3071              	/***************************
 3072              		+LOOP ( a -- )
 3073              		increment counter 
 3074              		end loop if countr>limit
 3075              	****************************/
 3076 4062 0C400000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3076      C52B4C4F 
 3076      4F50
 3077 406c 504700BF 		_NEST 
 3078 4070 97240000 		_COMPI DOPLOOP 
 3078      40400000 
 3078      79440000 
 3079 407c 153F0000 		_ADR COMMA
 3080 4080 1F230000 		_UNNEST 
 3081              	
 3082              	DOLOOP: // ( -- R: counter limit )
 3083 4084 D8F80000 		ldr T0,[RSP]
 3084 4088 00F10100 		add T0,#1
 3085 408c C8F80000 		str T0,[RSP]
 3086 4090 D8F80410 		ldr T1,[RSP,#4]
 3087 4094 8842     		cmp T0,T1 
 3088 4096 05D4     		bmi 9f
 3089 4098 08F10808 		add RSP,#8  // counter and limit  
 3090 409c 0CF1040C 		add IP,IP,#4 // skip loop address 
ARM GAS  forth.s 			page 148


 3091 40a0 FEF73AB9 		_NEXT 
 3092 40a4 DCF800C0 	9:  ldr IP,[IP]
 3093 40a8 FEF736B9 		_NEXT 
 3094              	
 3095              	
 3096              	/********************************
 3097              		LOOP ( a -- )
 3098              		increment counter 
 3099              		end loop if >= limit 
 3100              	*********************************/
 3101 40ac 66400000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3101      C44C4F4F 
 3101      500000BF 
 3102 40b8 504700BF 		_NEST 
 3103 40bc 97240000 		_COMPI DOLOOP
 3103      84400000 
 3103      79440000 
 3104 40c8 153F0000 		_ADR COMMA 
 3105 40cc 1F230000 		_UNNEST 
 3106              	
 3107              	
 3108              	/**********************
 3109              	    BEGIN	( -- a )
 3110              	 	Start an infinite 
 3111              		or indefinite 
 3112              		loop structure.
 3113              	************************/
 3114 40d0 B0400000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3114      C5424547 
 3114      494E00BF 
 3115 40dc 504700BF 		_NEST
 3116 40e0 F52E0000 		_ADR	HERE
 3117 40e4 1F230000 		_UNNEST
 3118              		.p2align 2 
 3119              	
 3120              	/********************
 3121              	    NEXT	( a -- )
 3122              	 	Terminate a FOR-NEXT
 3123              		loop structure.
 3124              	**************************/
 3125 40e8 D4400000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3125      C44E4558 
 3125      540000BF 
 3126 40f4 504700BF 		_NEST
 3127 40f8 97240000 		_COMPI	DONXT
 3127      B8240000 
 3127      79440000 
 3128 4104 153F0000 		_ADR	COMMA
 3129 4108 1F230000 		_UNNEST
 3130              	
 3131              	/***************************
 3132              		I ( -- n )
 3133              		stack for loop counter 
 3134              	***************************/
 3135 410c EC400000 		_HEADER I,1+COMPO,"I"
 3135      414900BF 
 3136 4114 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 149


 3137 4118 D8F80060 		ldr TOS,[RSP]
 3138 411c FEF7FCB8 		_NEXT 
 3139              	
 3140              	/****************************
 3141              		J ( -- n )
 3142              		stack outer loop counter 
 3143              	****************************/
 3144 4120 10410000 		_HEADER J,1,"J"
 3144      014A00BF 
 3145 4128 47F8046D 		_PUSH 
 3146 412c D8F80460 		ldr TOS,[RSP,#4]
 3147 4130 FEF7F2B8 		_NEXT 
 3148              	
 3149              	/**********************
 3150              	    UNTIL	( a -- )
 3151              	 	Terminate a BEGIN-UNTIL
 3152              		indefinite loop structure.
 3153              	******************************/
 3154 4134 24410000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3154      C5554E54 
 3154      494C00BF 
 3155 4140 504700BF 		_NEST
 3156 4144 97240000 		_COMPI	QBRAN
 3156      D6240000 
 3156      79440000 
 3157 4150 153F0000 		_ADR	COMMA
 3158 4154 1F230000 		_UNNEST
 3159              	
 3160              	/**********************
 3161              	    AGAIN	( a -- )
 3162              	 	Terminate a BEGIN-AGAIN
 3163              		infinite loop structure.
 3164              	*****************************/
 3165 4158 38410000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3165      C5414741 
 3165      494E00BF 
 3166 4164 504700BF 		_NEST
 3167 4168 97240000 		_COMPI	BRAN
 3167      EA240000 
 3167      79440000 
 3168 4174 153F0000 		_ADR	COMMA
 3169 4178 1F230000 		_UNNEST
 3170              	
 3171              	/************************
 3172              	    IF	  ( -- A )
 3173              	 	Begin a conditional
 3174              		branch structure.
 3175              	**************************/
 3176 417c 5C410000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3176      C2494600 
 3177 4184 504700BF 		_NEST
 3178 4188 97240000 		_COMPI	QBRAN
 3178      D6240000 
 3178      79440000 
 3179 4194 F52E0000 		_ADR	HERE
 3180 4198 97240000 		_DOLIT	4
 3180      04000000 
ARM GAS  forth.s 			page 150


 3181 41a0 212B0000 		_ADR	CPP
 3182 41a4 A5290000 		_ADR	PSTOR
 3183 41a8 1F230000 		_UNNEST
 3184              	
 3185              	/*************************
 3186              	    AHEAD	( -- A )
 3187              	 	Compile a forward 
 3188              		branch instruction.
 3189              	*************************/
 3190 41ac 80410000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3190      C5414845 
 3190      414400BF 
 3191 41b8 504700BF 		_NEST
 3192 41bc 97240000 		_COMPI	BRAN
 3192      EA240000 
 3192      79440000 
 3193 41c8 F52E0000 		_ADR	HERE
 3194 41cc 97240000 		_DOLIT	4
 3194      04000000 
 3195 41d4 212B0000 		_ADR	CPP
 3196 41d8 A5290000 		_ADR	PSTOR
 3197 41dc 1F230000 		_UNNEST
 3198              	
 3199              	/**************************
 3200              	    REPEAT	( A a -- )
 3201              	 	Terminate a BEGIN-WHILE-REPEAT
 3202              		indefinite loop.
 3203              	**********************************/
 3204 41e0 B0410000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3204      C6524550 
 3204      45415400 
 3205 41ec 504700BF 		_NEST
 3206 41f0 65410000 		_ADR	AGAIN
 3207 41f4 F52E0000 		_ADR	HERE
 3208 41f8 D9250000 		_ADR	SWAP
 3209 41fc 09250000 		_ADR	STORE
 3210 4200 1F230000 		_UNNEST
 3211              	
 3212              	/*********************
 3213              	    THEN	( A -- )
 3214              	 	Terminate a conditional
 3215              		branch structure.
 3216              	*****************************/
 3217 4204 E4410000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3217      C4544845 
 3217      4E0000BF 
 3218 4210 504700BF 		_NEST
 3219 4214 F52E0000 		_ADR	HERE
 3220 4218 D9250000 		_ADR	SWAP
 3221 421c 09250000 		_ADR	STORE
 3222 4220 1F230000 		_UNNEST
 3223              	
 3224              	/***************************
 3225              	    AFT	 ( a -- a A )
 3226              	 	Jump to THEN in a 
 3227              		FOR-AFT-THEN-NEXT loop 
 3228              		the first time through.
ARM GAS  forth.s 			page 151


 3229              	*****************************/
 3230 4224 08420000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3230      C3414654 
 3231 422c 504700BF 		_NEST
 3232 4230 B9250000 		_ADR	DROP
 3233 4234 B9410000 		_ADR	AHEAD
 3234 4238 DD400000 		_ADR	BEGIN
 3235 423c D9250000 		_ADR	SWAP
 3236 4240 1F230000 		_UNNEST
 3237              	
 3238              	/**********************
 3239              	    ELSE	( A -- A )
 3240              	 	Start the false 
 3241              		clause in an 
 3242              		IF-ELSE-THEN structure.
 3243              	****************************/
 3244 4244 28420000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3244      C4454C53 
 3244      450000BF 
 3245 4250 504700BF 		_NEST
 3246 4254 B9410000 		_ADR	AHEAD
 3247 4258 D9250000 		_ADR	SWAP
 3248 425c 11420000 		_ADR	THENN
 3249 4260 1F230000 		_UNNEST
 3250              	
 3251              	/**************************
 3252              	    WHILE	( a -- A a )
 3253              	 	Conditional branch out 
 3254              		of a BEGIN-WHILE-REPEAT loop.
 3255              	*********************************/
 3256 4264 48420000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3256      C5574849 
 3256      4C4500BF 
 3257 4270 504700BF 		_NEST
 3258 4274 85410000 		_ADR	IFF
 3259 4278 D9250000 		_ADR	SWAP
 3260 427c 1F230000 		_UNNEST
 3261              	
 3262              	/***********************************
 3263              	    ABORT"	( -- //  string> )
 3264              	 	Conditional abort with an 
 3265              		error message.
 3266              	***********************************/
 3267 4280 68420000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3267      8641424F 
 3267      52542200 
 3268 428c 504700BF 		_NEST
 3269 4290 97240000 		_COMPI	ABORQ
 3269      D83C0000 
 3269      79440000 
 3270 429c B13F0000 		_ADR	STRCQ
 3271 42a0 1F230000 		_UNNEST
 3272              	
 3273              	/******************************
 3274              	    $"	( -- //  string> )
 3275              	 	Compile an inline 
 3276              		word literal.
ARM GAS  forth.s 			page 152


 3277              	*****************************/
 3278 42a4 84420000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3278      C2242200 
 3279 42ac 504700BF 		_NEST
 3280 42b0 97240000 		_COMPI	STRQP
 3280      F4340000 
 3280      79440000 
 3281 42bc B13F0000 		_ADR	STRCQ
 3282 42c0 1F230000 		_UNNEST
 3283              	
 3284              	/******************************
 3285              	    ."	( -- //  string> )
 3286              	 	Compile an inline word
 3287              		literal to be typed out 
 3288              		at run time.
 3289              	*******************************/
 3290 42c4 A8420000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3290      C22E2200 
 3291 42cc 504700BF 		_NEST
 3292 42d0 97240000 		_COMPI	DOTQP
 3292      10350000 
 3292      79440000 
 3293 42dc B13F0000 		_ADR	STRCQ
 3294 42e0 1F230000 		_UNNEST
 3295              	
 3296              	/*********************
 3297              	  Name compiler
 3298              	***********************/
 3299              	
 3300              	/**************************
 3301              	    ?UNIQUE	( a -- a )
 3302              	 	Display a warning 
 3303              		message if the word 
 3304              		already exists.
 3305              	**************************/
 3306 42e4 C8420000 		_HEADER UNIQU,7,"?UNIQUE"
 3306      073F554E 
 3306      49515545 
 3307 42f0 504700BF 		_NEST
 3308 42f4 C9250000 		_ADR	DUPP
 3309 42f8 393A0000 		_ADR	NAMEQ			// ?name exists
 3310 42fc D7240000 		_QBRAN	UNIQ1	// redefinitions are OK
 3310      1C430000 
 3311 4304 11350000 		_DOTQP	7," reDef "		// but warn the user
 3311      07207265 
 3311      44656620 
 3312 4310 ED250000 		_ADR	OVER
 3313 4314 ED290000 		_ADR	COUNT
 3314 4318 75340000 		_ADR	TYPEE			// just in case its not planned
 3315              	UNIQ1:
 3316 431c B9250000 		_ADR	DROP
 3317 4320 1F230000 		_UNNEST
 3318              	
 3319              	/***********************
 3320              	    $,n	 ( na -- )
 3321              	 	Build a new dictionary 
 3322              		name using the data at na.
ARM GAS  forth.s 			page 153


 3323              	hidden word 
 3324              	*******************************/
 3325              	SNAME:
 3326 4324 504700BF 		_NEST
 3327 4328 C9250000 		_ADR	DUPP			//  na na
 3328 432c 3D250000 		_ADR	CAT			//  ?null input
 3329 4330 D7240000 		_QBRAN	SNAM1
 3329      6C430000 
 3330 4338 F1420000 		_ADR	UNIQU			//  na
 3331 433c 4D2B0000 		_ADR	LAST			//  na last
 3332 4340 1D250000 		_ADR	AT			//  na la
 3333 4344 153F0000 		_ADR	COMMA			//  na
 3334 4348 C9250000 		_ADR	DUPP			//  na na
 3335 434c 4D2B0000 		_ADR	LAST			//  na na last
 3336 4350 09250000 		_ADR	STORE			//  na , save na for vocabulary link
 3337 4354 ED290000 		_ADR	COUNT			//  na+1 count
 3338 4358 8D260000 		_ADR	PLUS			//  na+1+count
 3339 435c 412E0000 		_ADR	ALGND			//  word boundary
 3340 4360 212B0000 		_ADR	CPP
 3341 4364 09250000 		_ADR	STORE			//  top of dictionary now
 3342 4368 1F230000 		_UNNEST
 3343              	SNAM1:
 3344 436c F5340000 		_ADR	STRQP
 3345 4370 07       		.byte	7
 3346 4371 206E616D 		.ascii " name? "
 3346      653F20
 3347 4378 AD3C0000 		_ADR	ABORT
 3348              	
 3349              	/************************
 3350              	    $COMPILE	( a -- )
 3351              	 	Compile next word to 
 3352              		code dictionary as 
 3353              		a token or literal.
 3354              	**************************/
 3355 437c E8420000 		_HEADER SCOMP,8,"$COMPILE"
 3355      0824434F 
 3355      4D50494C 
 3355      450000BF 
 3356 438c 504700BF 		_NEST
 3357 4390 393A0000 		_ADR	NAMEQ
 3358 4394 9D270000 		_ADR	QDUP	// defined?
 3359 4398 D7240000 		_QBRAN	SCOM2
 3359      C8430000 
 3360 43a0 1D250000 		_ADR	AT
 3361 43a4 97240000 		_DOLIT	IMEDD
 3361      80000000 
 3362 43ac 0D260000 		_ADR	ANDD	// immediate?
 3363 43b0 D7240000 		_QBRAN	SCOM1
 3363      C0430000 
 3364 43b8 AD240000 		_ADR	EXECU
 3365 43bc 1F230000 		_UNNEST			// it's immediate, execute
 3366              	SCOM1:
 3367 43c0 79440000 		_ADR	CALLC			// it's not immediate, compile
 3368 43c4 1F230000 		_UNNEST	
 3369              	SCOM2:
 3370 43c8 F1220000 		_ADR	NUMBER 
 3371 43cc D7240000 		_QBRAN	SCOM3
ARM GAS  forth.s 			page 154


 3371      DC430000 
 3372 43d4 993F0000 		_ADR	LITER
 3373 43d8 1F230000 		_UNNEST			// compile number as integer
 3374              	SCOM3: // compilation abort 
 3375 43dc E5430000 		_ADR COLON_ABORT 
 3376 43e0 AD3C0000 		_ADR	ABORT			// error
 3377              	
 3378              	/********************************
 3379              	 before aborting a compilation 
 3380              	 reset HERE and LAST
 3381              	 to previous values. 
 3382              	*******************************/
 3383              	COLON_ABORT:
 3384 43e4 504700BF 		_NEST 
 3385 43e8 4D2B0000 		_ADR LAST 
 3386 43ec 1D250000 		_ADR AT 
 3387 43f0 39270000 		_ADR CELLM 
 3388 43f4 C9250000 		_ADR DUPP 
 3389 43f8 212B0000 		_ADR CPP  
 3390 43fc 09250000 		_ADR STORE 
 3391 4400 1D250000 		_ADR AT 
 3392 4404 4D2B0000 		_ADR LAST 
 3393 4408 09250000 		_ADR STORE 
 3394 440c 1F230000 		_UNNEST 
 3395              	
 3396              	/*********************
 3397              	    OVERT	( -- )
 3398              	 	Link a new word 
 3399              		into the current 
 3400              		vocabulary.
 3401              	**********************/
 3402 4410 80430000 		_HEADER OVERT,5,"OVERT"
 3402      054F5645 
 3402      525400BF 
 3403 441c 504700BF 		_NEST
 3404 4420 4D2B0000 		_ADR	LAST
 3405 4424 1D250000 		_ADR	AT
 3406 4428 0D2B0000 		_ADR	CNTXT
 3407 442c 09250000 		_ADR	STORE
 3408 4430 1F230000 		_UNNEST
 3409              	
 3410              	/**********************
 3411              	    ;  ( -- )
 3412              	 	Terminate a colon
 3413              		definition.
 3414              	***********************/
 3415 4434 14440000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3415      C13B00BF 
 3416 443c 504700BF 		_NEST
 3417 4440 97240000 		_DOLIT	UNNEST
 3417      1E230000 
 3418 4448 79440000 		_ADR	CALLC
 3419 444c 693D0000 		_ADR	LBRAC
 3420 4450 1D440000 		_ADR	OVERT
 3421 4454 1F230000 		_UNNEST
 3422              	
 3423              	/******************
ARM GAS  forth.s 			page 155


 3424              	    ]	   ( -- )
 3425              	 	Start compiling 
 3426              		the words in 
 3427              		the input stream.
 3428              	*********************/
 3429 4458 38440000 		_HEADER RBRAC,1,"]"
 3429      015D00BF 
 3430 4460 504700BF 		_NEST
 3431 4464 97240000 		_DOLIT	SCOMP
 3431      8C430000 
 3432 446c E12A0000 		_ADR	TEVAL
 3433 4470 09250000 		_ADR	STORE
 3434 4474 1F230000 		_UNNEST
 3435              	
 3436              	/*********************
 3437              	    BL.W	( ca -- )
 3438              	 	compile ca.
 3439              	hidden word used by compiler
 3440              	*****************************/
 3441              	CALLC:
 3442 4478 504700BF 		_NEST
 3443 447c 97240000 		_DOLIT 1 
 3443      01000000 
 3444 4484 21260000 		_ADR ORR 
 3445 4488 153F0000 		_ADR COMMA  
 3446 448c 1F230000 		_UNNEST 
 3447              	
 3448              	
 3449              	/*************************
 3450              	 	:	( -- //  string> )
 3451              	 	Start a new colon 
 3452              		definition using 
 3453              		next word as its name.
 3454              	**************************/
 3455 4490 5C440000 		_HEADER COLON,1,":"
 3455      013A00BF 
 3456 4498 504700BF 		_NEST
 3457 449c B1380000 		_ADR	TOKEN
 3458 44a0 25430000 		_ADR	SNAME
 3459 44a4 29230000 		_ADR	COMPI_NEST 
 3460 44a8 61440000 		_ADR	RBRAC
 3461 44ac 1F230000 		_UNNEST
 3462              	
 3463              	/*************************
 3464              	    IMMEDIATE   ( -- )
 3465              	 	Make the last compiled 
 3466              		word an immediate word.
 3467              	***************************/
 3468 44b0 94440000 		_HEADER IMMED,9,"IMMEDIATE"
 3468      09494D4D 
 3468      45444941 
 3468      544500BF 
 3469 44c0 504700BF 		_NEST
 3470 44c4 97240000 		_DOLIT	IMEDD
 3470      80000000 
 3471 44cc 4D2B0000 		_ADR	LAST
 3472 44d0 1D250000 		_ADR	AT
ARM GAS  forth.s 			page 156


 3473 44d4 1D250000 		_ADR	AT
 3474 44d8 21260000 		_ADR	ORR
 3475 44dc 4D2B0000 		_ADR	LAST
 3476 44e0 1D250000 		_ADR	AT
 3477 44e4 09250000 		_ADR	STORE
 3478 44e8 1F230000 		_UNNEST
 3479              	
 3480              	/******************
 3481              	  Defining words
 3482              	******************/
 3483              	
 3484              	/***********************************
 3485              	    CONSTANT	( u -- //  string> )
 3486              	 	Compile a new constant.
 3487              	************************************/
 3488 44ec B4440000 		_HEADER CONST,8,"CONSTANT"
 3488      08434F4E 
 3488      5354414E 
 3488      540000BF 
 3489 44fc 504700BF 		_NEST 
 3490 4500 B1380000 		_ADR	TOKEN
 3491 4504 25430000 		_ADR	SNAME
 3492 4508 1D440000 		_ADR	OVERT
 3493 450c 29230000 		_ADR	COMPI_NEST
 3494 4510 97240000 		_DOLIT	DOCON
 3494      202A0000 
 3495 4518 79440000 		_ADR	CALLC
 3496 451c 153F0000 		_ADR	COMMA
 3497 4520 97240000 		_DOLIT	UNNEST 
 3497      1E230000 
 3498 4528 79440000 		_ADR	CALLC  
 3499 452c 1F230000 		_UNNEST
 3500              	
 3501              		.p2align 2 
 3502              	/****************************************
 3503              	 doDOES> ( -- a )
 3504              	 runtime action of DOES> 
 3505              	 leave parameter field address on stack 
 3506              	hidden word used by compiler 
 3507              	***************************************/
 3508              	DODOES:
 3509 4530 504700BF 		_NEST 
 3510 4534 49250000 		_ADR	RFROM
 3511 4538 29270000 		_ADR	CELLP 
 3512 453c E9260000 		_ADR	ONEP  
 3513 4540 4D2B0000 		_ADR LAST 
 3514 4544 1D250000 		_ADR AT
 3515 4548 D1380000 		_ADR NAMET 
 3516 454c 29270000 		_ADR CELLP 
 3517 4550 09250000 		_ADR STORE  
 3518 4554 1F230000 		_UNNEST 
 3519              	
 3520              		.p2align 2
 3521              	/**********************
 3522              	  DOES> ( -- )
 3523              	  compile time action
 3524              	*************************/
ARM GAS  forth.s 			page 157


 3525 4558 F0440000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3525      C5444F45 
 3525      533E00BF 
 3526 4564 504700BF 		_NEST 
 3527 4568 97240000 		_DOLIT DODOES 
 3527      30450000 
 3528 4570 79440000 		_ADR CALLC 
 3529 4574 97240000 		_DOLIT	UNNEST
 3529      1E230000 
 3530 457c 79440000 		_ADR	CALLC 
 3531 4580 29230000 		_ADR COMPI_NEST
 3532 4584 97240000 		_DOLIT RFROM 
 3532      48250000 
 3533 458c 79440000 		_ADR	CALLC
 3534 4590 1F230000 		_UNNEST 
 3535              	
 3536              	
 3537              	/****************************
 3538              	  DEFER@ ( "name" -- a )
 3539              	  return value of code field 
 3540              	  of defered function. 
 3541              	******************************/
 3542 4594 5C450000 		_HEADER DEFERAT,6,"DEFER@"
 3542      06444546 
 3542      45524000 
 3543 45a0 504700BF 		_NEST 
 3544 45a4 D53E0000 		_ADR TICK
 3545 45a8 29270000 		_ADR CELLP 
 3546 45ac 1D250000 		_ADR AT 
 3547 45b0 F9260000 		_ADR ONEM 
 3548 45b4 1F230000 		_UNNEST 
 3549              	
 3550              	/*********************************
 3551              	 DEFER! ( "name1" "name2" -- )
 3552              	 assign an action to a defered word 
 3553              	************************************/
 3554 45b8 98450000 		_HEADER DEFERSTO,6,"DEFER!"
 3554      06444546 
 3554      45522100 
 3555 45c4 504700BF 		_NEST 
 3556 45c8 D53E0000 		_ADR TICK 
 3557 45cc E9260000 		_ADR ONEP 
 3558 45d0 D53E0000 		_ADR TICK 
 3559 45d4 29270000 		_ADR CELLP 
 3560 45d8 09250000 		_ADR STORE 
 3561 45dc 1F230000 		_UNNEST
 3562              	
 3563              	/****************************
 3564              	  DEFER ( "name" -- )
 3565              	  create a defered definition
 3566              	*****************************/
 3567 45e0 BC450000 		_HEADER DEFER,5,"DEFER"
 3567      05444546 
 3567      455200BF 
 3568 45ec 504700BF 		_NEST 
 3569 45f0 3D460000 		_ADR CREAT 
 3570 45f4 97240000 		_DOLIT UNNEST 
ARM GAS  forth.s 			page 158


 3570      1E230000 
 3571 45fc 79440000 		_ADR CALLC 
 3572 4600 97240000 		_DOLIT DEFER_NOP
 3572      24460000 
 3573 4608 E9260000 		_ADR ONEP 
 3574 460c 4D2B0000 		_ADR LAST 
 3575 4610 1D250000 		_ADR AT 
 3576 4614 D1380000 		_ADR NAMET 
 3577 4618 29270000 		_ADR CELLP 
 3578 461c 09250000 		_ADR STORE 
 3579 4620 1F230000 		_UNNEST 
 3580              	DEFER_NOP:
 3581 4624 504700BF 		_NEST  
 3582 4628 95240000 		_ADR NOP 
 3583 462c 1F230000 		_UNNEST 
 3584              	
 3585              	/******************************
 3586              	    CREATE	( -- //  string> )
 3587              	 	Compile a new array entry 
 3588              		without allocating code space.
 3589              	***********************************/
 3590 4630 E4450000 		_HEADER CREAT,6,"CREATE"
 3590      06435245 
 3590      41544500 
 3591 463c 504700BF 		_NEST 
 3592 4640 B1380000 		_ADR	TOKEN
 3593 4644 25430000 		_ADR	SNAME
 3594 4648 1D440000 		_ADR	OVERT
 3595 464c 29230000 		_ADR	COMPI_NEST 
 3596 4650 97240000 		_DOLIT	DOVAR
 3596      142A0000 
 3597 4658 79440000 		_ADR	CALLC
 3598 465c 1F230000 		_UNNEST
 3599              	
 3600              	/*******************************
 3601              	    VARIABLE	( -- //  string> )
 3602              	 	Compile a new variable 
 3603              		initialized to 0.
 3604              	***********************************/
 3605 4660 34460000 		_HEADER VARIA,8,"VARIABLE"
 3605      08564152 
 3605      4941424C 
 3605      450000BF 
 3606 4670 504700BF 		_NEST
 3607 4674 3D460000 		_ADR	CREAT
 3608 4678 97240000 		_DOLIT	0
 3608      00000000 
 3609 4680 153F0000 		_ADR	COMMA
 3610 4684 97240000 		_DOLIT UNNEST
 3610      1E230000 
 3611 468c 79440000 		_ADR	CALLC  
 3612 4690 1F230000 		_UNNEST
 3613              	
 3614              	/***********
 3615              	  Tools
 3616              	***********/
 3617              	
ARM GAS  forth.s 			page 159


 3618              	/*************************
 3619              	    dm+	 ( a u -- a )
 3620              	 	Dump u bytes from , 
 3621              		leaving a+u on the stack.
 3622              	hidden word used by DUMP 
 3623              	****************************/
 3624              	DMP:
 3625 4694 504700BF 		_NEST
 3626 4698 ED250000 		_ADR	OVER
 3627 469c 97240000 		_DOLIT	4
 3627      04000000 
 3628 46a4 55350000 		_ADR	UDOTR			// display address
 3629 46a8 21340000 		_ADR	SPACE
 3630 46ac 71250000 		_ADR	TOR			// start count down loop
 3631 46b0 EB240000 		_BRAN	PDUM2			// skip first pass
 3631      D0460000 
 3632              	PDUM1:
 3633 46b8 C9250000 	  _ADR	DUPP
 3634 46bc 3D250000 		_ADR	CAT
 3635 46c0 97240000 		_DOLIT	3
 3635      03000000 
 3636 46c8 55350000 		_ADR	UDOTR			// display numeric data
 3637 46cc E9260000 		_ADR	ONEP			// increment address
 3638              	PDUM2:
 3639 46d0 B9240000 	  _ADR	DONXT
 3640 46d4 B8460000 		.word	PDUM1	// loop till done
 3641 46d8 1F230000 		_UNNEST
 3642              		.p2align 2 
 3643              	//    DUMP	( a u -- )
 3644              	// 	Dump u bytes from a, in a formatted manner.
 3645              	
 3646              	/**********************
 3647              		DUMP ( a n -- )
 3648              		hex dump memory 
 3649              	*********************/
 3650 46dc 64460000 		_HEADER DUMP,4,"DUMP"
 3650      0444554D 
 3650      500000BF 
 3651 46e8 504700BF 		_NEST
 3652 46ec 852A0000 		_ADR	BASE
 3653 46f0 1D250000 		_ADR	AT
 3654 46f4 71250000 		_ADR	TOR
 3655 46f8 D9310000 		_ADR	HEX			// save radix,set hex
 3656 46fc 97240000 		_DOLIT	16
 3656      10000000 
 3657 4704 E12D0000 		_ADR	SLASH			// change count to lines
 3658 4708 71250000 		_ADR	TOR
 3659 470c EB240000 		_BRAN	DUMP4			// start count down loop
 3659      3C470000 
 3660              	DUMP1:
 3661 4714 A9340000 	  _ADR	CR
 3662 4718 97240000 		_DOLIT	16
 3662      10000000 
 3663 4720 01280000 		_ADR	DDUP
 3664 4724 95460000 		_ADR	DMP			// display numeric
 3665 4728 B1270000 		_ADR	ROT
 3666 472c B1270000 		_ADR	ROT
ARM GAS  forth.s 			page 160


 3667 4730 21340000 		_ADR	SPACE
 3668 4734 21340000 		_ADR	SPACE
 3669 4738 75340000 		_ADR	TYPEE			// display printable characters
 3670              	DUMP4:
 3671 473c B9240000 	  _DONXT	DUMP1	// loop till done
 3671      14470000 
 3672              	DUMP3:
 3673 4744 B9250000 		_ADR	DROP
 3674 4748 49250000 		_ADR	RFROM
 3675 474c 852A0000 		_ADR	BASE
 3676 4750 09250000 		_ADR	STORE			// restore radix
 3677 4754 1F230000 		_UNNEST
 3678              	
 3679              	/***********************
 3680              		TRACE ( -- )
 3681              	**********************/
 3682 4758 E0460000 		_HEADER TRACE,5,"TRACE"
 3682      05545241 
 3682      434500BF 
 3683 4764 504700BF 		_NEST
 3684 4768 F52A0000 		_ADR HLD
 3685 476c 1D250000 		_ADR AT 
 3686 4770 71250000 		_ADR TOR  
 3687 4774 A9340000 		_ADR CR 
 3688 4778 852A0000 		_ADR BASE 
 3689 477c 1D250000 		_ADR AT 
 3690 4780 71250000 		_ADR TOR
 3691 4784 1D320000 		_ADR DECIM
 3692 4788 97240000 		_DOLIT '>' 
 3692      3E000000 
 3693 4790 97240000 		_DOLIT 'S'
 3693      53000000 
 3694 4798 A1230000 		_ADR EMIT 
 3695 479c A1230000 		_ADR EMIT  
 3696 47a0 CD470000 		_ADR DOTS
 3697 47a4 A9340000 		_ADR CR
 3698 47a8 49250000 		_ADR RFROM 
 3699 47ac 852A0000 		_ADR BASE 
 3700 47b0 09250000 		_ADR STORE  
 3701 47b4 49250000 		_ADR RFROM 
 3702 47b8 F52A0000 		_ADR HLD 
 3703 47bc 09250000 		_ADR STORE  
 3704 47c0 1F230000 		_UNNEST 
 3705              	
 3706              	
 3707              	/**********************
 3708              	   .S	  ( ... -- ... )
 3709              	 	Display the contents 
 3710              		of the data stack.
 3711              	*************************/
 3712 47c4 5C470000 		_HEADER DOTS,2,".S"
 3712      022E5300 
 3713 47cc 504700BF 		_NEST
 3714 47d0 21340000 		_ADR	SPACE
 3715 47d4 A92E0000 		_ADR	DEPTH			// stack depth
 3716 47d8 71250000 		_ADR	TOR			// start count down loop
 3717 47dc EB240000 		_BRAN	DOTS2			// skip first pass
ARM GAS  forth.s 			page 161


 3717      F0470000 
 3718              	DOTS1:
 3719 47e4 5D250000 		_ADR	RAT
 3720 47e8 CD2E0000 		_ADR	PICK
 3721 47ec BD350000 		_ADR	DOT			// index stack, display contents
 3722              	DOTS2:
 3723 47f0 B9240000 		_DONXT	DOTS1	// loop till done
 3723      E4470000 
 3724 47f8 21340000 		_ADR	SPACE
 3725 47fc 1F230000 		_UNNEST
 3726              	
 3727              	/*****************************
 3728              	    >NAME	( ca -- na | F )
 3729              	 	Convert code address 
 3730              		to a name address.
 3731              	*****************************/
 3732 4800 C8470000 		_HEADER TNAME,5,">NAME"
 3732      053E4E41 
 3732      4D4500BF 
 3733 480c 504700BF 		_NEST
 3734 4810 71250000 		_ADR	TOR			//  
 3735 4814 0D2B0000 		_ADR	CNTXT			//  va
 3736 4818 1D250000 		_ADR	AT			//  na
 3737              	TNAM1:
 3738 481c C9250000 		_ADR	DUPP			//  na na
 3739 4820 D7240000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3739      50480000 
 3740 4828 C9250000 		_ADR	DUPP			//  na na
 3741 482c D1380000 		_ADR	NAMET			//  na ca
 3742 4830 5D250000 		_ADR	RAT			//  na ca code
 3743 4834 35260000 		_ADR	XORR			//  na f --
 3744 4838 D7240000 		_QBRAN	TNAM2
 3744      50480000 
 3745 4840 39270000 		_ADR	CELLM			//  la 
 3746 4844 1D250000 		_ADR	AT			//  next_na
 3747 4848 EB240000 		_BRAN	TNAM1
 3747      1C480000 
 3748              	TNAM2:	
 3749 4850 49250000 		_ADR	RFROM
 3750 4854 B9250000 		_ADR	DROP			//  0|na --
 3751 4858 1F230000 		_UNNEST			// 0
 3752              	
 3753              	/********************************
 3754              	    .ID	 ( na -- )
 3755              	 	Display the name at address.
 3756              	********************************/
 3757 485c 04480000 		_HEADER DOTID,3,".ID"
 3757      032E4944 
 3758 4864 504700BF 		_NEST
 3759 4868 9D270000 		_ADR	QDUP			// if zero no name
 3760 486c D7240000 		_QBRAN	DOTI1
 3760      8C480000 
 3761 4874 ED290000 		_ADR	COUNT
 3762 4878 97240000 		_DOLIT	0x1F
 3762      1F000000 
 3763 4880 0D260000 		_ADR	ANDD			// mask lexicon bits
 3764 4884 75340000 		_ADR	TYPEE
ARM GAS  forth.s 			page 162


 3765 4888 1F230000 		_UNNEST			// display name string
 3766              	DOTI1:
 3767 488c 11350000 		_DOTQP	9," {noName}"
 3767      09207B6E 
 3767      6F4E616D 
 3767      657D00BF 
 3768 489c 1F230000 		_UNNEST
 3769              	
 3770              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3771              	.if WANT_SEE 
 3772              	/*******************************
 3773              	    SEE	 ( -- //  string> )
 3774              	 	A simple decompiler.
 3775              	*******************************/
 3776              		_HEADER SEE,3,"SEE"
 3777              		_NEST
 3778              		_ADR	TICK	//  ca --, starting address
 3779              		_ADR	CR	
 3780              		_DOLIT	20
 3781              		_ADR	TOR
 3782              	SEE1:
 3783              		_ADR	CELLP			//  a
 3784              		_ADR	DUPP			//  a a
 3785              		_ADR	DECOMP		//  a
 3786              		_DONXT	SEE1
 3787              		_ADR	DROP
 3788              		_UNNEST
 3789              	
 3790              	/*************************
 3791              	 	DECOMPILE ( a -- )
 3792              	 	Convert code in a.  
 3793              		Display name of command or as data.
 3794              	*************************************/
 3795              		_HEADER DECOMP,9,"DECOMPILE"
 3796              		_NEST
 3797              		_ADR	DUPP			//  a a
 3798              	// 	_ADR	TOR			//  a
 3799              		_ADR	AT			//  a code
 3800              		_ADR	DUPP			//  a code code
 3801              		_DOLIT	0xF800D000 //0xF800F800
 3802              		_ADR	ANDD
 3803              		_DOLIT	0xF000D000 //0xF800F000
 3804              		_ADR	EQUAL			//  a code ?
 3805              		_ADR	INVER 
 3806              		_QBRAN	DECOM2	//  not a command
 3807              		//  a valid_code --, extract address and display name
 3808              		MOVW	IP,#0xFFE
 3809              		MOV	WP,TOS
 3810              		LSL	TOS,TOS,#21		//  get bits 22-12
 3811              		ASR	TOS,TOS,#9		//  with sign extension
 3812              		LSR	WP,WP,#15		//  get bits 11-1
 3813              		AND	WP,WP,IP		//  retain only bits 11-1
 3814              		ORR	TOS,TOS,WP		//  get bits 22-1
 3815              		NOP
 3816              		_ADR	OVER			//  a offset a
 3817              		_ADR	PLUS			//  a target-4
 3818              		_ADR	CELLP			//  a target
ARM GAS  forth.s 			page 163


 3819              		_ADR	TNAME			//  a na/0 --, is it a name?
 3820              		_ADR	QDUP			//  name address or zero
 3821              		_QBRAN	DECOM1
 3822              		_ADR	SPACE			//  a na
 3823              		_ADR	DOTID			//  a --, display name
 3824              	// 	_ADR	RFROM			//  a
 3825              		_ADR	DROP
 3826              		_UNNEST
 3827              	DECOM1:	// _ADR	RFROM		//  a
 3828              		_ADR	AT			//  data
 3829              		_ADR	UDOT			//  display data
 3830              		_UNNEST
 3831              	DECOM2:
 3832              		_ADR	UDOT
 3833              	// 	_ADR	RFROM
 3834              		_ADR	DROP
 3835              		_UNNEST
 3836              	.endif 
 3837              	
 3838              	/**********************
 3839              		VLIST ( -- )
 3840              		WORDS alias 
 3841              		+ display words count 
 3842              	**********************/
 3843 48a0 60480000 		_HEADER VLIST,5,"VLIST"
 3843      05564C49 
 3843      535400BF 
 3844 48ac 504700BF 		_NEST 
 3845 48b0 D1480000 		_ADR WORDS
 3846 48b4 A9340000 		_ADR CR 
 3847 48b8 15490000 		_ADR WC
 3848 48bc BD350000 		_ADR DOT    
 3849 48c0 1F230000 		_UNNEST 
 3850              	
 3851              	/*********************
 3852              	    WORDS	( -- )
 3853              	 	Display the names 
 3854              		in the context vocabulary.
 3855              	*******************************/
 3856 48c4 A4480000 		_HEADER WORDS,5,"WORDS"
 3856      05574F52 
 3856      445300BF 
 3857 48d0 504700BF 		_NEST
 3858 48d4 A9340000 		_ADR	CR
 3859 48d8 0D2B0000 		_ADR	CNTXT
 3860 48dc 1D250000 		_ADR	AT			// only in context
 3861              	WORS1:
 3862 48e0 9D270000 		_ADR	QDUP			// ?at end of list
 3863 48e4 D7240000 		_QBRAN	WORS2
 3863      08490000 
 3864 48ec C9250000 		_ADR	DUPP
 3865 48f0 21340000 		_ADR	SPACE
 3866 48f4 65480000 		_ADR	DOTID			// display a name
 3867 48f8 39270000 		_ADR	CELLM
 3868 48fc 1D250000 		_ADR	AT
 3869 4900 EB240000 		_BRAN	WORS1
 3869      E0480000 
ARM GAS  forth.s 			page 164


 3870              	WORS2:
 3871 4908 1F230000 		_UNNEST
 3872              	
 3873              	/*****************************
 3874              		WC ( - n )
 3875              		count words in dictionary 
 3876              	******************************/
 3877 490c C8480000 		_HEADER WC,2,"WC"
 3877      02574300 
 3878 4914 504700BF 		_NEST 
 3879 4918 97240000 		_DOLIT 0 
 3879      00000000 
 3880 4920 4D2B0000 		_ADR LAST
 3881 4924 1D250000 	1:	_ADR AT
 3882 4928 9D270000 		_ADR QDUP
 3883 492c D7240000 		_QBRAN 9f
 3883      4C490000 
 3884 4934 D9250000 		_ADR SWAP
 3885 4938 E9260000 		_ADR ONEP
 3886 493c D9250000 		_ADR SWAP
 3887 4940 39270000 		_ADR CELLM
 3888 4944 EB240000 		_BRAN 1b
 3888      24490000 
 3889 494c 1F230000 	9:	_UNNEST 
 3890              	
 3891              	/*************************
 3892              		MARK <string> ( -- )
 3893              	    create forget point 
 3894              		in dictionary 
 3895              	*************************/	
 3896 4950 10490000 		_HEADER MARK,4,"MARK"
 3896      044D4152 
 3896      4B0000BF 
 3897 495c 504700BF 		_NEST
 3898 4960 3D460000 		_ADR CREAT 
 3899 4964 31450000 		_ADR DODOES 
 3900 4968 1F230000 		_UNNEST
 3901 496c 504700BF 		_NEST  
 3902 4970 49250000 		_ADR RFROM 
 3903 4974 97240000 		_DOLIT 8
 3903      08000000 
 3904 497c 9D260000 		_ADR SUBB
 3905 4980 0D480000 		_ADR TNAME
 3906 4984 39270000 		_ADR CELLM
 3907 4988 1D250000 		_ADR AT  
 3908 498c 4D2B0000 		_ADR LAST 
 3909 4990 09250000 		_ADR STORE 
 3910 4994 1D440000 		_ADR OVERT
 3911 4998 1F230000 		_UNNEST 
 3912              	
 3913              	/****************
 3914              	  cold start
 3915              	*****************/
 3916              	
 3917              	/**********************************
 3918              	    VER	 ( -- n )
 3919              	 	Return the version 
ARM GAS  forth.s 			page 165


 3920              		number of this implementation.
 3921              	hidden word used by COLD
 3922              	**********************************/
 3923              	VERSN:
 3924 499c 504700BF 		_NEST
 3925 49a0 97240000 		_DOLIT	VER*256+EXT
 3925      00010000 
 3926 49a8 1F230000 		_UNNEST
 3927              	
 3928              	/*********************
 3929              	    hi	  ( -- )
 3930              	 	Display the sign-on 
 3931              		message.
 3932              	***********************/
 3933 49ac 54490000 		_HEADER HI,2,"HI"
 3933      02484900 
 3934 49b4 504700BF 		_NEST
 3935 49b8 A9340000 		_ADR	CR	// initialize I/O
 3936 49bc 11350000 		_DOTQP	17, "beyond Jupiter, v" 
 3936      11626579 
 3936      6F6E6420 
 3936      4A757069 
 3936      7465722C 
 3937 49d4 852A0000 		_ADR	BASE
 3938 49d8 1D250000 		_ADR	AT
 3939 49dc D9310000 		_ADR	HEX	// save radix
 3940 49e0 9D490000 		_ADR	VERSN
 3941 49e4 BD300000 		_ADR	BDIGS
 3942 49e8 97240000 		_DOLIT  0 
 3942      00000000 
 3943 49f0 09310000 		_ADR	DIG
 3944 49f4 09310000 		_ADR	DIG
 3945 49f8 97240000 		_DOLIT	'.'
 3945      2E000000 
 3946 4a00 DD300000 		_ADR	HOLD
 3947 4a04 29310000 		_ADR	DIGS
 3948 4a08 85310000 		_ADR	EDIGS
 3949 4a0c 75340000 		_ADR	TYPEE	// format version number
 3950 4a10 852A0000 		_ADR	BASE
 3951 4a14 09250000 		_ADR	STORE
 3952 4a18 A9340000 		_ADR	CR
 3953 4a1c 1F230000 		_UNNEST			// restore radix
 3954              	
 3955              	/**********************
 3956              	 check if PS2 keyboard 
 3957              	 present.
 3958              	**********************/
 3959              	PS2_QUERY: 
 3960 4a20 504700BF 		_NEST 
 3961 4a24 97240000 		_DOLIT 400 
 3961      90010000 
 3962 4a2c 39240000 		_ADR PAUSE
 3963 4a30 C9130000 		_ADR PS2_QKEY
 3964 4a34 D7240000 		_QBRAN 1f
 3964      504A0000 
 3965 4a3c 97240000 		_DOLIT BAT_OK 
 3965      AA000000 
ARM GAS  forth.s 			page 166


 3966 4a44 35260000 		_ADR XORR 
 3967 4a48 D7240000 		_QBRAN 9f 
 3967      944A0000 
 3968 4a50 B1150000 	1:	_ADR KBD_RST
 3969 4a54 97240000 		_DOLIT BAT_OK 
 3969      AA000000 
 3970 4a5c 35260000 		_ADR XORR  
 3971 4a60 D7240000 		_QBRAN 9f  
 3971      944A0000 
 3972              	// no ps2 keyboard 
 3973              	// swith to serial console
 3974 4a68 A9340000 		_ADR CR 
 3975 4a6c 11350000 		_DOTQP 25,"no PS2 keyboard detected."
 3975      196E6F20 
 3975      50533220 
 3975      6B657962 
 3975      6F617264 
 3976 4a8c C1050000 		_ADR SERIAL 
 3977 4a90 D9050000 		_ADR CONSOLE 
 3978 4a94 1F230000 	9:	_UNNEST 
 3979              	
 3980              	/*************************
 3981              	   check PA8 to 
 3982              	   select console 
 3983              	   PA8 -> low  LOCAL 
 3984              	   PA8 -> high SERIAL 
 3985              	*************************/
 3986              	IF_SENSE:
 3987 4a98 504700BF 		_NEST 
 3988 4a9c A9050000 		_ADR LOCAL 
 3989 4aa0 97240000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3989      10000240 
 3990 4aa8 1D250000 		_ADR AT 
 3991 4aac 97240000 		_DOLIT (1<<8)
 3991      00010000 
 3992 4ab4 0D260000 		_ADR ANDD 
 3993 4ab8 D7240000 		_QBRAN 9f 
 3993      C44A0000 
 3994 4ac0 E9260000 		_ADR ONEP 
 3995 4ac4 D9050000 	9:  _ADR CONSOLE 
 3996 4ac8 1F230000 		_UNNEST 
 3997              	
 3998              	
 3999              	/********************
 4000              	    COLD	( -- )
 4001              	 	The high level cold 
 4002              		start sequence.
 4003              	**************************/
 4004 4acc B0490000 		.word	LINK 
 4005              		LINK = . 
 4006 4ad0 04       	_LASTN:	.byte  4
 4007 4ad1 434F4C44 		.ascii "COLD"
 4008 4ad5 0000BF   		.p2align 2	
 4009              	COLD:
 4010 4ad8 00B5FBF7 		_CALL forth_init 
 4010      45FB5DF8 
 4010      04EB
ARM GAS  forth.s 			page 167


 4011 4ae2 DFF858C0 		ldr IP,=COLD1 
 4012 4ae6 FDF717BC 		_NEXT
 4013 4aea 00BF     		.p2align 2 
 4014              	COLD1:
 4015 4aec 97240000 		_DOLIT  0 
 4015      00000000 
 4016 4af4 6D240000 		_ADR ULED // turn off user LED 
 4017 4af8 97240000 		_DOLIT	UZERO
 4017      F4030000 
 4018 4b00 97240000 		_DOLIT	UPP
 4018      00000020 
 4019 4b08 97240000 		_DOLIT	ULAST-UZERO
 4019      B0000000 
 4020 4b10 952F0000 		_ADR	MOVE 			// initialize user area
 4021 4b14 353E0000 		_ADR	PRESE			// initialize stack and TIB
 4022 4b18 994A0000 		_ADR	IF_SENSE
 4023 4b1c 5D180000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4024 4b20 214A0000 		_ADR 	PS2_QUERY  
 4025 4b24 712A0000 		_ADR	TBOOT
 4026 4b28 452F0000 		_ADR	ATEXE			// application boot
 4027 4b2c 1D440000 		_ADR	OVERT
 4028 4b30 EB240000 		_BRAN	QUIT			// start interpretation
 4028      543E0000 
 4029              	COLD2:
 4030              		.p2align 2 	
 4031              	CTOP:
 4032 4b38 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4033              	
 4034              	
 4035 4b3c EC4A0000 	  .end 
ARM GAS  forth.s 			page 168


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 169


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 170


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 171


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 172


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 173


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 174


             forth.s:2855   .text:0000000000003df0 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007d0 tv_out_isr
          ser-term.s:35     .text:00000000000004b4 uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010ac kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002318 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2876   .text:0000000000003e34 PRESE
             forth.s:268    .text:0000000000002496 DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:952    .text:00000000000029ec COUNT
             forth.s:2039   .text:0000000000003474 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:437    .text:00000000000025c8 DUPP
             forth.s:393    .text:0000000000002570 TOR
             forth.s:1039   .text:0000000000002a84 BASE
             forth.s:339    .text:0000000000002508 STORE
             forth.s:2181   .text:00000000000035bc DOT
             forth.s:375    .text:0000000000002548 RFROM
             forth.s:472    .text:000000000000260c ANDD
             forth.s:309    .text:00000000000024d6 QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:154    .text:00000000000023a0 EMIT
             forth.s:2011   .text:0000000000003420 SPACE
ARM GAS  forth.s 			page 175


              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:2057   .text:00000000000034a8 CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:385    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004e2 ser_init
             tvout.s:74     .text:0000000000000720 tv_init
           ps2_kbd.s:307    .text:00000000000012cc kbd_init
         spi-flash.s:39     .text:00000000000016e0 flash_spi_init
             forth.s:4009   .text:0000000000004ad8 COLD
             forth.s:83     .text:0000000000002310 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:475    .text:0000000000000332 gpio_config
              init.s:550    .text:00000000000003de gpio_out
              init.s:410    .text:00000000000002a8 nvic_set_priority
              init.s:565    .text:00000000000003f4 UZERO
              init.s:603    .text:00000000000004a4 ULAST
              init.s:419    .text:00000000000002c0 negative_irq
              init.s:431    .text:00000000000002da nvic_enable_irq
              init.s:448    .text:0000000000000304 nvic_disable_irq
              init.s:512    .text:000000000000039a input_pull
              init.s:505    .text:0000000000000388 output_type
              init.s:528    .text:00000000000003b0 gpio_speed
              init.s:566    .text:00000000000003f4 $d
             forth.s:3933   .text:00000000000049b4 HI
           ps2_kbd.s:396    .text:00000000000013c8 PS2_QKEY
             tvout.s:563    .text:0000000000000c90 TV_EMIT
             forth.s:2792   .text:0000000000003d0c INTER
             forth.s:4006   .text:0000000000004ad0 _LASTN
             forth.s:4031   .text:0000000000004b38 CTOP
             forth.s:4005   .text:0000000000004ad0 LINK
              init.s:608    .text:00000000000004a4 $d
          ser-term.s:33     .text:00000000000004b4 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:000000000000053a $d
          ser-term.s:90     .text:000000000000053e _SER_QKEY
          ser-term.s:90     .text:0000000000000548 SER_QKEY
          ser-term.s:110    .text:0000000000000574 $d
          ser-term.s:110    .text:0000000000000578 _SER_EMIT
          ser-term.s:110    .text:0000000000000584 SER_EMIT
          ser-term.s:124    .text:000000000000059e $d
          ser-term.s:124    .text:00000000000005a2 _LOCAL
          ser-term.s:124    .text:00000000000005a8 $t
          ser-term.s:124    .text:00000000000005a8 LOCAL
          ser-term.s:133    .text:00000000000005b4 $d
          ser-term.s:133    .text:00000000000005b8 _SERIAL
ARM GAS  forth.s 			page 176


          ser-term.s:133    .text:00000000000005c0 SERIAL
          ser-term.s:142    .text:00000000000005cc $d
          ser-term.s:142    .text:00000000000005d0 _CONSOLE
          ser-term.s:142    .text:00000000000005d8 $t
          ser-term.s:142    .text:00000000000005d8 CONSOLE
          ser-term.s:164    .text:00000000000005f8 $d
          ser-term.s:164    .text:00000000000005fc _ANSI_PARAM
          ser-term.s:164    .text:0000000000000608 ANSI_PARAM
          ser-term.s:166    .text:000000000000060c $d
             forth.s:579    .text:00000000000026e8 ONEP
             forth.s:1402   .text:0000000000002da8 SLMOD
             forth.s:668    .text:000000000000279c QDUP
             forth.s:324    .text:00000000000024ea BRAN
             forth.s:529    .text:000000000000268c PLUS
             forth.s:587    .text:00000000000026f8 ONEM
             forth.s:90     .text:000000000000231e UNNEST
          ser-term.s:191    .text:0000000000000678 _ANSI_ESC
          ser-term.s:191    .text:0000000000000680 ANSI_ESC
          ser-term.s:193    .text:0000000000000684 $d
          ser-term.s:203    .text:00000000000006a4 _SER_AT
          ser-term.s:203    .text:00000000000006ac SER_AT
          ser-term.s:205    .text:00000000000006b0 $d
             forth.s:445    .text:00000000000025d8 SWAP
          ser-term.s:219    .text:00000000000006e0 _SER_CLS
          ser-term.s:219    .text:00000000000006e8 $t
          ser-term.s:219    .text:00000000000006e8 SER_CLS
          ser-term.s:221    .text:00000000000006ec $d
          ser-term.s:228    .text:0000000000000710 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
ARM GAS  forth.s 			page 177


             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000720 $t
             tvout.s:150    .text:00000000000007fc state_vsync
             tvout.s:191    .text:0000000000000850 state_pre_video
             tvout.s:202    .text:0000000000000862 state_video_out
             tvout.s:237    .text:00000000000008c0 state_post_video
             tvout.s:254    .text:00000000000008e6 tv_isr_exit
             tvout.s:180    .text:0000000000000836 sync_end
             tvout.s:246    .text:00000000000008d2 frame_end
             tvout.s:264    .text:00000000000008e8 $d
             tvout.s:264    .text:00000000000008ec _BACKCOLOR
             tvout.s:264    .text:00000000000008f8 BACKCOLOR
             tvout.s:271    .text:0000000000000904 $d
             tvout.s:271    .text:0000000000000908 _PENCOLOR
             tvout.s:271    .text:0000000000000912 $t
             tvout.s:271    .text:0000000000000914 PENCOLOR
             tvout.s:278    .text:0000000000000920 $d
             tvout.s:278    .text:0000000000000924 _CURSOR_COL
             tvout.s:278    .text:000000000000092c CURSOR_COL
             tvout.s:285    .text:0000000000000938 $d
             tvout.s:285    .text:000000000000093c _CURSOR_ROW
             tvout.s:285    .text:0000000000000940 $t
             tvout.s:285    .text:0000000000000940 CURSOR_ROW
             tvout.s:292    .text:000000000000094c $d
             tvout.s:292    .text:0000000000000950 _ROWY
             tvout.s:292    .text:0000000000000956 $t
             tvout.s:292    .text:0000000000000958 ROWY
             tvout.s:299    .text:0000000000000964 $d
             tvout.s:299    .text:0000000000000968 _COLX
             tvout.s:299    .text:000000000000096e $t
             tvout.s:299    .text:0000000000000970 COLX
             tvout.s:306    .text:000000000000097c $d
             tvout.s:306    .text:0000000000000980 _FONT
             tvout.s:306    .text:0000000000000988 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000994 $d
             tvout.s:313    .text:0000000000000998 _VIDBUFF
             tvout.s:313    .text:00000000000009a0 $t
             tvout.s:313    .text:00000000000009a0 VIDBUFF
             tvout.s:325    .text:00000000000009aa $d
             tvout.s:325    .text:00000000000009ae _PLOT
             tvout.s:325    .text:00000000000009b4 PLOT
             tvout.s:373    .text:0000000000000a38 plot_op
             tvout.s:341    .text:00000000000009e0 op_back
             tvout.s:350    .text:00000000000009fa op_pen
             tvout.s:359    .text:0000000000000a14 op_invert
             tvout.s:363    .text:0000000000000a1c op_xor
             tvout.s:373    .text:0000000000000a38 $d
             tvout.s:378    .text:0000000000000a40 _VSYNC
             tvout.s:378    .text:0000000000000a46 $t
             tvout.s:378    .text:0000000000000a48 VSYNC
             tvout.s:386    .text:0000000000000a52 $d
             tvout.s:386    .text:0000000000000a56 _CLS
             tvout.s:386    .text:0000000000000a5a $t
             tvout.s:386    .text:0000000000000a5c CLS
             tvout.s:410    .text:0000000000000a9e $d
             tvout.s:410    .text:0000000000000aa2 _CLRLINE
ARM GAS  forth.s 			page 178


             tvout.s:410    .text:0000000000000aaa $t
             tvout.s:410    .text:0000000000000aac CLRLINE
             tvout.s:412    .text:0000000000000ab0 $d
             forth.s:547    .text:00000000000026ac STAR
             forth.s:1629   .text:0000000000002fdc FILL
             tvout.s:427    .text:0000000000000ae4 _SCROLLUP
             tvout.s:427    .text:0000000000000af0 SCROLLUP
             tvout.s:429    .text:0000000000000af4 $d
             forth.s:538    .text:000000000000269c SUBB
             forth.s:1597   .text:0000000000002f94 MOVE
             tvout.s:448    .text:0000000000000b3c _SCROLLDOWN
             tvout.s:448    .text:0000000000000b48 SCROLLDOWN
             tvout.s:450    .text:0000000000000b4c $d
             tvout.s:467    .text:0000000000000b8c _TV_CRLF
             tvout.s:467    .text:0000000000000b94 $t
             tvout.s:467    .text:0000000000000b94 TV_CRLF
             tvout.s:482    .text:0000000000000bb6 $d
             tvout.s:482    .text:0000000000000bba _RIGHT
             tvout.s:482    .text:0000000000000bc0 $t
             tvout.s:482    .text:0000000000000bc0 RIGHT
             tvout.s:495    .text:0000000000000bd4 $d
             tvout.s:495    .text:0000000000000bd8 _LEFT
             tvout.s:495    .text:0000000000000be0 LEFT
             tvout.s:511    .text:0000000000000c0c FONT_PIXEL
             tvout.s:518    .text:0000000000000c1c INCR_X
             tvout.s:525    .text:0000000000000c28 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c30 CHAR_ROW
             tvout.s:536    .text:0000000000000c34 $d
             forth.s:718    .text:0000000000002800 DDUP
             forth.s:384    .text:000000000000255c RAT
             forth.s:290    .text:00000000000024b8 DONXT
             forth.s:709    .text:00000000000027ec TDROP
             tvout.s:551    .text:0000000000000c70 CHAR_FONT
             tvout.s:552    .text:0000000000000c70 $t
             tvout.s:563    .text:0000000000000c84 $d
             tvout.s:563    .text:0000000000000c88 _TV_EMIT
             tvout.s:563    .text:0000000000000c90 $t
             tvout.s:565    .text:0000000000000c94 $d
             forth.s:848    .text:000000000000291c ULESS
             tvout.s:593    .text:0000000000000d18 CTRL_KEY
             forth.s:349    .text:000000000000251c AT
             forth.s:678    .text:00000000000027b0 ROT
             forth.s:367    .text:000000000000253c CAT
             tvout.s:660    .text:0000000000000e00 SHOW_CURSOR
             tvout.s:691    .text:0000000000000e88 HIDE_CURSOR
             forth.s:823    .text:00000000000028e4 EQUAL
             tvout.s:650    .text:0000000000000de0 BACK_SPACE
             forth.s:429    .text:00000000000025b8 DROP
             tvout.s:618    .text:0000000000000d88 CAR_RET
             tvout.s:629    .text:0000000000000da0 LN_FEED
             tvout.s:619    .text:0000000000000d88 $t
             tvout.s:620    .text:0000000000000d8c $d
             tvout.s:630    .text:0000000000000da0 $t
             tvout.s:631    .text:0000000000000da4 $d
             forth.s:490    .text:0000000000002634 XORR
             tvout.s:651    .text:0000000000000de0 $t
             tvout.s:652    .text:0000000000000de4 $d
ARM GAS  forth.s 			page 179


             tvout.s:660    .text:0000000000000df4 _SHOW_CURSOR
             tvout.s:660    .text:0000000000000e00 $t
             tvout.s:663    .text:0000000000000e04 $d
             forth.s:660    .text:000000000000278c TWOSL
             forth.s:357    .text:0000000000002528 CSTOR
             forth.s:700    .text:00000000000027d8 DDROP
             tvout.s:691    .text:0000000000000e7c _HIDE_CURSOR
             tvout.s:691    .text:0000000000000e88 $t
             tvout.s:694    .text:0000000000000e8c $d
             forth.s:520    .text:000000000000267c LSHIFT
             forth.s:481    .text:0000000000002620 ORR
             tvout.s:704    .text:0000000000000eb4 _TV_AT
             tvout.s:704    .text:0000000000000eba $t
             tvout.s:704    .text:0000000000000ebc TV_AT
             tvout.s:719    .text:0000000000000ee0 $d
             tvout.s:719    .text:0000000000000ee4 _INPUT
             tvout.s:719    .text:0000000000000eea $t
             tvout.s:719    .text:0000000000000eec INPUT
             tvout.s:721    .text:0000000000000ef0 $d
             forth.s:1541   .text:0000000000002f0c PAD
             forth.s:2700   .text:0000000000003bf8 ACCEP
             forth.s:455    .text:00000000000025ec OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000000f1c $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 180


       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 181


       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f28 sc_ascii
         mcSaite.inc:100    .text:0000000000000fdc shifted
         mcSaite.inc:151    .text:000000000000103c altchar
         mcSaite.inc:167    .text:000000000000104c extended
         mcSaite.inc:191    .text:0000000000001074 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
ARM GAS  forth.s 			page 182


           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010aa $t
           ps2_kbd.s:179    .text:00000000000011d6 send_bit
           ps2_kbd.s:107    .text:000000000000110c start_bit
           ps2_kbd.s:118    .text:0000000000001130 parity_bit
           ps2_kbd.s:125    .text:0000000000001144 stop_bit
           ps2_kbd.s:152    .text:000000000000119a store_code
           ps2_kbd.s:253    .text:000000000000126a do_async_key
           ps2_kbd.s:204    .text:000000000000121a send_parity
           ps2_kbd.s:211    .text:000000000000122c send_stop
           ps2_kbd.s:218    .text:0000000000001236 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001256 is_async_key
           ps2_kbd.s:286    .text:00000000000012ba async_keys
           ps2_kbd.s:378    .text:00000000000013a0 table_scan
           ps2_kbd.s:260    .text:000000000000127c set_async_key
           ps2_kbd.s:295    .text:00000000000012c8 async_jump
           ps2_kbd.s:265    .text:000000000000128a shift_key
           ps2_kbd.s:273    .text:000000000000129a set_reset
           ps2_kbd.s:268    .text:0000000000001290 ctrl_key
           ps2_kbd.s:271    .text:0000000000001296 alt_key
           ps2_kbd.s:287    .text:00000000000012ba $d
           ps2_kbd.s:340    .text:0000000000001348 $d
           ps2_kbd.s:340    .text:000000000000134c _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001356 $t
           ps2_kbd.s:340    .text:0000000000001358 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001368 keycode
           ps2_kbd.s:365    .text:0000000000001390 wait_code
           ps2_kbd.s:396    .text:00000000000013ba $d
           ps2_kbd.s:396    .text:00000000000013be _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001414 inkey_exit
           ps2_kbd.s:418    .text:0000000000001418 pause_key
           ps2_kbd.s:427    .text:000000000000142e do_modifiers
           ps2_kbd.s:436    .text:0000000000001446 shift_down
           ps2_kbd.s:440    .text:000000000000144c altchar_down
           ps2_kbd.s:444    .text:0000000000001452 ctrl_down
           ps2_kbd.s:452    .text:000000000000146e do_capslock
           ps2_kbd.s:478    .text:0000000000001492 kbd_send
           ps2_kbd.s:553    .text:0000000000001586 kbd_clear_queue
           ps2_kbd.s:567    .text:00000000000015a4 $d
           ps2_kbd.s:567    .text:00000000000015a8 _KBD_RST
           ps2_kbd.s:567    .text:00000000000015b0 $t
           ps2_kbd.s:567    .text:00000000000015b0 KBD_RST
           ps2_kbd.s:591    .text:00000000000015fa $d
           ps2_kbd.s:591    .text:00000000000015fe _KBD_LED
           ps2_kbd.s:591    .text:0000000000001606 $t
           ps2_kbd.s:591    .text:0000000000001608 KBD_LED
           ps2_kbd.s:616    .text:000000000000165c $d
           ps2_kbd.s:616    .text:0000000000001660 _CAPS_LED
           ps2_kbd.s:616    .text:000000000000166c CAPS_LED
           ps2_kbd.s:633    .text:0000000000001696 $d
           ps2_kbd.s:633    .text:000000000000169a _WKEY
ARM GAS  forth.s 			page 183


           ps2_kbd.s:633    .text:00000000000016a4 WKEY
           ps2_kbd.s:635    .text:00000000000016a8 $d
           ps2_kbd.s:640    .text:00000000000016c0 $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016e0 $t
         spi-flash.s:83     .text:0000000000001782 $d
         spi-flash.s:83     .text:0000000000001786 _CHIP_SEL
         spi-flash.s:83     .text:0000000000001790 CHIP_SEL
         spi-flash.s:95     .text:00000000000017ae $d
         spi-flash.s:95     .text:00000000000017b2 _CHIP_DSEL
         spi-flash.s:95     .text:00000000000017bc $t
         spi-flash.s:95     .text:00000000000017bc CHIP_DSEL
         spi-flash.s:111    .text:00000000000017ea $d
         spi-flash.s:111    .text:00000000000017ee _RD_BYTE
         spi-flash.s:111    .text:00000000000017f6 $t
         spi-flash.s:111    .text:00000000000017f8 RD_BYTE
         spi-flash.s:131    .text:0000000000001820 $d
         spi-flash.s:131    .text:0000000000001824 _WR_BYTE
         spi-flash.s:131    .text:000000000000182c $t
         spi-flash.s:131    .text:000000000000182c WR_BYTE
         spi-flash.s:149    .text:0000000000001850 $d
         spi-flash.s:149    .text:0000000000001854 _WR_DIS
         spi-flash.s:149    .text:000000000000185c WR_DIS
         spi-flash.s:151    .text:0000000000001860 $d
         spi-flash.s:161    .text:000000000000187c _WR_ENBL
         spi-flash.s:161    .text:0000000000001884 $t
         spi-flash.s:161    .text:0000000000001884 WR_ENBL
         spi-flash.s:163    .text:0000000000001888 $d
         spi-flash.s:173    .text:00000000000018a4 _RD_SR
         spi-flash.s:173    .text:00000000000018aa $t
         spi-flash.s:173    .text:00000000000018ac RD_SR
         spi-flash.s:175    .text:00000000000018b0 $d
         spi-flash.s:183    .text:00000000000018d4 sr_cmd
         spi-flash.s:189    .text:00000000000018db _SEND_ADR
         spi-flash.s:189    .text:00000000000018e4 $t
         spi-flash.s:189    .text:00000000000018e4 SEND_ADR
         spi-flash.s:191    .text:00000000000018e8 $d
             forth.s:511    .text:0000000000002664 RSHIFT
         spi-flash.s:206    .text:000000000000191c _WAIT_DONE
         spi-flash.s:206    .text:0000000000001926 $t
         spi-flash.s:206    .text:0000000000001928 WAIT_DONE
         spi-flash.s:208    .text:000000000000192c $d
         spi-flash.s:221    .text:000000000000195c _ERASE_BLK
         spi-flash.s:221    .text:0000000000001966 $t
         spi-flash.s:221    .text:0000000000001968 ERASE_BLK
         spi-flash.s:223    .text:000000000000196c $d
         spi-flash.s:236    .text:0000000000001994 _ERASE_CHIP
         spi-flash.s:236    .text:00000000000019a0 ERASE_CHIP
         spi-flash.s:238    .text:00000000000019a4 $d
         spi-flash.s:254    .text:00000000000019d4 _RD_BLK
         spi-flash.s:254    .text:00000000000019dc RD_BLK
         spi-flash.s:256    .text:00000000000019e0 $d
         spi-flash.s:276    .text:0000000000001a28 _WR_BLK
         spi-flash.s:276    .text:0000000000001a30 WR_BLK
ARM GAS  forth.s 			page 184


         spi-flash.s:278    .text:0000000000001a34 $d
             forth.s:2220   .text:0000000000003634 HDOT
             float.s:37     *ABS*:0000000000ffffff MANTISSA_MASK
             float.s:38     *ABS*:0000000000800000 MANTISSA_SIGN
             float.s:47     .text:0000000000001a8c _FPSW
             float.s:47     .text:0000000000001a94 FPSW
             float.s:56     .text:0000000000001aa0 $d
             float.s:56     .text:0000000000001aa4 _FBASE
             float.s:56     .text:0000000000001aaa $t
             float.s:56     .text:0000000000001aac FBASE
             float.s:65     .text:0000000000001ab8 $d
             float.s:65     .text:0000000000001abc _FRESET
             float.s:65     .text:0000000000001ac4 FRESET
             float.s:74     .text:0000000000001ad0 $d
             float.s:74     .text:0000000000001ad4 _FINIT
             float.s:74     .text:0000000000001ada $t
             float.s:74     .text:0000000000001adc FINIT
             float.s:76     .text:0000000000001ae0 $d
             float.s:88     .text:0000000000001afc _FER
             float.s:88     .text:0000000000001b00 $t
             float.s:88     .text:0000000000001b00 FER
             float.s:97     .text:0000000000001b0c $d
             float.s:97     .text:0000000000001b10 _FZE
             float.s:97     .text:0000000000001b14 $t
             float.s:97     .text:0000000000001b14 FZE
             float.s:107    .text:0000000000001b22 $d
             float.s:107    .text:0000000000001b26 _FNE
             float.s:107    .text:0000000000001b2a $t
             float.s:107    .text:0000000000001b2c FNE
             float.s:117    .text:0000000000001b3a $d
             float.s:117    .text:0000000000001b3e _FOV
             float.s:117    .text:0000000000001b42 $t
             float.s:117    .text:0000000000001b44 FOV
             float.s:127    .text:0000000000001b52 $d
             float.s:127    .text:0000000000001b56 _SFZ
             float.s:127    .text:0000000000001b5a $t
             float.s:127    .text:0000000000001b5c SFZ
             float.s:140    .text:0000000000001b74 $d
             float.s:140    .text:0000000000001b78 _SFN
             float.s:140    .text:0000000000001b7c $t
             float.s:140    .text:0000000000001b7c SFN
             float.s:154    .text:0000000000001b96 $d
             float.s:154    .text:0000000000001b9a _SFV
             float.s:154    .text:0000000000001b9e $t
             float.s:154    .text:0000000000001ba0 SFV
             float.s:165    .text:0000000000001bae $d
             float.s:165    .text:0000000000001bb2 _AT_EXPONENT
             float.s:165    .text:0000000000001bbc $t
             float.s:165    .text:0000000000001bbc AT_EXPONENT
             float.s:167    .text:0000000000001bc0 $d
             float.s:188    .text:0000000000001c14 _STOR_EXPONENT
             float.s:188    .text:0000000000001c1e $t
             float.s:188    .text:0000000000001c20 STOR_EXPONENT
             float.s:191    .text:0000000000001c24 $d
             forth.s:802    .text:00000000000028bc ABSS
             forth.s:884    .text:0000000000002964 GREAT
             float.s:217    .text:0000000000001c8c _EDOT
ARM GAS  forth.s 			page 185


             float.s:217    .text:0000000000001c90 EDOT
             float.s:219    .text:0000000000001c94 $d
             forth.s:812    .text:00000000000028d0 ZEQUAL
             forth.s:2115   .text:0000000000003510 DOTQP
             float.s:224    .text:0000000000001cb0 $d
             forth.s:1259   .text:0000000000002c80 STOD
             forth.s:1707   .text:00000000000030bc BDIGS
             forth.s:1737   .text:0000000000003108 DIG
             forth.s:689    .text:00000000000027c4 NROT
             forth.s:1719   .text:00000000000030dc HOLD
             forth.s:1751   .text:0000000000003128 DIGS
             forth.s:1769   .text:000000000000315c SIGN
             forth.s:1783   .text:0000000000003184 EDIGS
             forth.s:464    .text:00000000000025fc ZLESS
             float.s:283    .text:0000000000001da8 _FDOT
             float.s:283    .text:0000000000001dac FDOT
             float.s:285    .text:0000000000001db0 $d
             forth.s:3135   .text:0000000000004114 I
             forth.s:872    .text:000000000000294c UGREAT
             forth.s:3144   .text:0000000000004128 J
             forth.s:860    .text:0000000000002934 LESS
             float.s:363    .text:0000000000001f18 _FPLUS
             float.s:363    .text:0000000000001f1c FPLUS
             float.s:366    .text:0000000000001f20 $d
             float.s:372    .text:0000000000001f28 _FMINUS
             float.s:372    .text:0000000000001f2c FMINUS
             float.s:375    .text:0000000000001f30 $d
             float.s:386    .text:0000000000001f38 _FSLH
             float.s:386    .text:0000000000001f3c FSLH
             float.s:389    .text:0000000000001f40 $d
             float.s:396    .text:0000000000001f48 _FNEG
             float.s:396    .text:0000000000001f50 $t
             float.s:396    .text:0000000000001f50 FNEG
             float.s:399    .text:0000000000001f54 $d
             float.s:405    .text:0000000000001f5c _FTOS
             float.s:405    .text:0000000000001f60 $t
             float.s:405    .text:0000000000001f60 FTOS
             float.s:408    .text:0000000000001f64 $d
             float.s:414    .text:0000000000001f6c _STOF
             float.s:414    .text:0000000000001f70 $t
             float.s:414    .text:0000000000001f70 STOF
             float.s:417    .text:0000000000001f74 $d
             float.s:423    .text:0000000000001f7c _DTOF
             float.s:423    .text:0000000000001f80 $t
             float.s:423    .text:0000000000001f80 DTOF
             float.s:426    .text:0000000000001f84 $d
             float.s:431    .text:0000000000001f88 ACCUM_DIGITS
             float.s:432    .text:0000000000001f88 $t
             float.s:433    .text:0000000000001f8c $d
             forth.s:1861   .text:0000000000003240 DIGTQ
             float.s:460    .text:0000000000002008 MANTISSA
             float.s:461    .text:0000000000002008 $t
             float.s:462    .text:000000000000200c $d
             float.s:481    .text:0000000000002050 EXPONENT
             float.s:482    .text:0000000000002050 $t
             float.s:483    .text:0000000000002054 $d
             forth.s:1920   .text:00000000000032ec DASHQ
ARM GAS  forth.s 			page 186


             float.s:494    .text:0000000000002078 FORMAT_FLOAT
             float.s:495    .text:0000000000002078 $t
             float.s:496    .text:000000000000207c $d
             float.s:526    .text:00000000000020f8 BOUND_MANTISSA
             float.s:527    .text:00000000000020f8 $t
             float.s:528    .text:00000000000020fc $d
             float.s:542    .text:0000000000002144 SCALE_UP
             forth.s:1426   .text:0000000000002de0 SLASH
             forth.s:786    .text:0000000000002898 INVER
             float.s:562    .text:0000000000002184 _FLOATQ
             float.s:562    .text:000000000000218c FLOATQ
             float.s:564    .text:0000000000002190 $d
             forth.s:1844   .text:000000000000321c DECIM
             forth.s:700    .text:00000000000027d2 _DDROP
             forth.s:3682   .text:0000000000004764 TRACE
             float.s:640    .text:00000000000022e8 _NUMBER
             float.s:640    .text:00000000000022f0 NUMBER
             float.s:642    .text:00000000000022f4 $d
             forth.s:1945   .text:000000000000331c INTQ
             forth.s:80     .text:0000000000002310 $t
             forth.s:103    .text:0000000000002328 COMPI_NEST
             forth.s:116    .text:0000000000002346 TSTDIN
             forth.s:123    .text:0000000000002350 TSTDOUT
             forth.s:132    .text:000000000000235a $d
             forth.s:132    .text:000000000000235e _QKEY
             forth.s:132    .text:0000000000002364 QKEY
             forth.s:134    .text:0000000000002368 $d
             forth.s:1564   .text:0000000000002f44 ATEXE
             forth.s:142    .text:0000000000002378 _KEY
             forth.s:142    .text:000000000000237c $t
             forth.s:142    .text:000000000000237c KEY
             forth.s:144    .text:0000000000002380 KEY1
             forth.s:145    .text:0000000000002380 $d
             forth.s:154    .text:0000000000002398 _EMIT
             forth.s:156    .text:00000000000023a4 $d
             forth.s:190    .text:00000000000023b4 _RAND
             forth.s:190    .text:00000000000023bc RAND
             forth.s:192    .text:00000000000023c0 $d
             forth.s:1003   .text:0000000000002a34 SEED
             forth.s:1415   .text:0000000000002dc8 MODD
             forth.s:221    .text:0000000000002430 _PAUSE
             forth.s:221    .text:0000000000002436 $t
             forth.s:221    .text:0000000000002438 PAUSE
             forth.s:223    .text:000000000000243c $d
             forth.s:1021   .text:0000000000002a5c TIMER
             forth.s:225    .text:0000000000002444 PAUSE_LOOP
             forth.s:230    .text:000000000000245c PAUSE_EXIT
             forth.s:237    .text:0000000000002464 _ULED
             forth.s:237    .text:000000000000246c ULED
             forth.s:246    .text:0000000000002488 ULED_OFF
             forth.s:260    .text:000000000000248c $d
             forth.s:260    .text:0000000000002490 _NOP
             forth.s:260    .text:0000000000002494 $t
             forth.s:260    .text:0000000000002494 NOP
             forth.s:277    .text:00000000000024a0 $d
             forth.s:277    .text:00000000000024a4 _EXECU
             forth.s:277    .text:00000000000024ac $t
ARM GAS  forth.s 			page 187


             forth.s:277    .text:00000000000024ac EXECU
             forth.s:297    .text:00000000000024c8 NEXT1
             forth.s:315    .text:00000000000024e4 QBRAN1
             forth.s:332    .text:00000000000024f0 $d
             forth.s:332    .text:00000000000024f4 _EXIT
             forth.s:332    .text:00000000000024fc EXIT
             forth.s:333    .text:00000000000024fc $d
             forth.s:339    .text:0000000000002504 _STORE
             forth.s:339    .text:0000000000002506 $t
             forth.s:349    .text:0000000000002514 $d
             forth.s:349    .text:0000000000002518 _AT
             forth.s:349    .text:000000000000251a $t
             forth.s:357    .text:0000000000002520 $d
             forth.s:357    .text:0000000000002524 _CSTOR
             forth.s:367    .text:0000000000002534 $d
             forth.s:367    .text:0000000000002538 _CAT
             forth.s:375    .text:0000000000002540 $d
             forth.s:375    .text:0000000000002544 _RFROM
             forth.s:384    .text:0000000000002552 $d
             forth.s:384    .text:0000000000002556 _RAT
             forth.s:393    .text:0000000000002566 $d
             forth.s:393    .text:000000000000256a _TOR
             forth.s:402    .text:000000000000257a $d
             forth.s:402    .text:000000000000257e _RPSTOR
             forth.s:402    .text:0000000000002582 $t
             forth.s:402    .text:0000000000002584 RPSTOR
             forth.s:411    .text:000000000000258c $d
             forth.s:411    .text:0000000000002590 _SPSTOR
             forth.s:411    .text:0000000000002594 $t
             forth.s:411    .text:0000000000002594 SPSTOR
             forth.s:420    .text:000000000000259c $d
             forth.s:420    .text:00000000000025a0 _SPAT
             forth.s:420    .text:00000000000025a4 $t
             forth.s:420    .text:00000000000025a4 SPAT
             forth.s:429    .text:00000000000025ac $d
             forth.s:429    .text:00000000000025b0 _DROP
             forth.s:437    .text:00000000000025be $d
             forth.s:437    .text:00000000000025c2 _DUPP
             forth.s:437    .text:00000000000025c6 $t
             forth.s:445    .text:00000000000025ce $d
             forth.s:445    .text:00000000000025d2 _SWAP
             forth.s:455    .text:00000000000025e0 $d
             forth.s:455    .text:00000000000025e4 _OVER
             forth.s:464    .text:00000000000025f4 $d
             forth.s:464    .text:00000000000025f8 _ZLESS
             forth.s:472    .text:0000000000002602 $d
             forth.s:472    .text:0000000000002606 _ANDD
             forth.s:472    .text:000000000000260a $t
             forth.s:481    .text:0000000000002616 $d
             forth.s:481    .text:000000000000261a _ORR
             forth.s:490    .text:000000000000262a $d
             forth.s:490    .text:000000000000262e _XORR
             forth.s:490    .text:0000000000002632 $t
             forth.s:499    .text:000000000000263e $d
             forth.s:499    .text:0000000000002642 _UPLUS
             forth.s:499    .text:0000000000002646 $t
             forth.s:499    .text:0000000000002648 UPLUS
ARM GAS  forth.s 			page 188


             forth.s:511    .text:0000000000002658 $d
             forth.s:511    .text:000000000000265c _RSHIFT
             forth.s:520    .text:000000000000266e $d
             forth.s:520    .text:0000000000002672 _LSHIFT
             forth.s:529    .text:0000000000002686 $d
             forth.s:529    .text:000000000000268a _PLUS
             forth.s:529    .text:000000000000268c $t
             forth.s:538    .text:0000000000002694 $d
             forth.s:538    .text:0000000000002698 _SUBB
             forth.s:538    .text:000000000000269a $t
             forth.s:547    .text:00000000000026a6 $d
             forth.s:547    .text:00000000000026aa _STAR
             forth.s:547    .text:00000000000026ac $t
             forth.s:556    .text:00000000000026b6 $d
             forth.s:556    .text:00000000000026ba _UMSTA
             forth.s:556    .text:00000000000026be $t
             forth.s:556    .text:00000000000026c0 UMSTA
             forth.s:568    .text:00000000000026cc $d
             forth.s:568    .text:00000000000026d0 _MSTAR
             forth.s:568    .text:00000000000026d4 MSTAR
             forth.s:579    .text:00000000000026e0 $d
             forth.s:579    .text:00000000000026e4 _ONEP
             forth.s:587    .text:00000000000026ee $d
             forth.s:587    .text:00000000000026f2 _ONEM
             forth.s:595    .text:00000000000026fe $d
             forth.s:595    .text:0000000000002702 _TWOP
             forth.s:595    .text:0000000000002708 TWOP
             forth.s:603    .text:000000000000270e $d
             forth.s:603    .text:0000000000002712 _TWOM
             forth.s:603    .text:0000000000002718 TWOM
             forth.s:611    .text:000000000000271e $d
             forth.s:611    .text:0000000000002722 _CELLP
             forth.s:611    .text:0000000000002728 $t
             forth.s:611    .text:0000000000002728 CELLP
             forth.s:619    .text:000000000000272e $d
             forth.s:619    .text:0000000000002732 _CELLM
             forth.s:619    .text:0000000000002738 $t
             forth.s:619    .text:0000000000002738 CELLM
             forth.s:627    .text:000000000000273e $d
             forth.s:627    .text:0000000000002742 _BLANK
             forth.s:627    .text:0000000000002748 BLANK
             forth.s:636    .text:0000000000002752 $d
             forth.s:636    .text:0000000000002756 _CELLS
             forth.s:636    .text:000000000000275c $t
             forth.s:636    .text:000000000000275c CELLS
             forth.s:644    .text:0000000000002762 $d
             forth.s:644    .text:0000000000002766 _CELLSL
             forth.s:644    .text:000000000000276c $t
             forth.s:644    .text:000000000000276c CELLSL
             forth.s:652    .text:0000000000002772 $d
             forth.s:652    .text:0000000000002776 _TWOST
             forth.s:652    .text:000000000000277c TWOST
             forth.s:660    .text:0000000000002782 $d
             forth.s:660    .text:0000000000002786 _TWOSL
             forth.s:668    .text:0000000000002792 $d
             forth.s:668    .text:0000000000002796 _QDUP
             forth.s:678    .text:00000000000027a6 $d
ARM GAS  forth.s 			page 189


             forth.s:678    .text:00000000000027aa _ROT
             forth.s:678    .text:00000000000027ae $t
             forth.s:689    .text:00000000000027ba $d
             forth.s:689    .text:00000000000027be _NROT
             forth.s:700    .text:00000000000027ce $d
             forth.s:700    .text:00000000000027d8 $t
             forth.s:709    .text:00000000000027e2 $d
             forth.s:709    .text:00000000000027e6 _TDROP
             forth.s:709    .text:00000000000027ec $t
             forth.s:718    .text:00000000000027f6 $d
             forth.s:718    .text:00000000000027fa _DDUP
             forth.s:728    .text:000000000000280c $d
             forth.s:728    .text:0000000000002810 _DPLUS
             forth.s:728    .text:0000000000002814 DPLUS
             forth.s:741    .text:0000000000002828 $d
             forth.s:741    .text:000000000000282c _DABS
             forth.s:741    .text:0000000000002834 DABS
             forth.s:757    .text:0000000000002850 $d
             forth.s:757    .text:0000000000002854 _UDGREAT
             forth.s:757    .text:0000000000002858 $t
             forth.s:757    .text:0000000000002858 UDGREAT
             forth.s:774    .text:0000000000002874 $d
             forth.s:774    .text:0000000000002878 _DZEQUAL
             forth.s:774    .text:000000000000287c $t
             forth.s:774    .text:000000000000287c DZEQUAL
             forth.s:786    .text:000000000000288e $d
             forth.s:786    .text:0000000000002892 _INVER
             forth.s:786    .text:0000000000002896 $t
             forth.s:794    .text:000000000000289e $d
             forth.s:794    .text:00000000000028a2 _NEGAT
             forth.s:794    .text:00000000000028ac NEGAT
             forth.s:802    .text:00000000000028b2 $d
             forth.s:802    .text:00000000000028b6 _ABSS
             forth.s:802    .text:00000000000028ba $t
             forth.s:812    .text:00000000000028c6 $d
             forth.s:812    .text:00000000000028ca _ZEQUAL
             forth.s:823    .text:00000000000028de $d
             forth.s:823    .text:00000000000028e2 _EQUAL
             forth.s:823    .text:00000000000028e4 $t
             forth.s:835    .text:00000000000028f4 $d
             forth.s:835    .text:00000000000028f8 _DIFF
             forth.s:835    .text:00000000000028fc DIFF
             forth.s:848    .text:0000000000002914 $d
             forth.s:848    .text:0000000000002918 _ULESS
             forth.s:860    .text:000000000000292c $d
             forth.s:860    .text:0000000000002930 _LESS
             forth.s:860    .text:0000000000002932 $t
             forth.s:872    .text:0000000000002944 $d
             forth.s:872    .text:0000000000002948 _UGREAT
             forth.s:884    .text:000000000000295c $d
             forth.s:884    .text:0000000000002960 _GREAT
             forth.s:884    .text:0000000000002962 $t
             forth.s:896    .text:0000000000002974 $d
             forth.s:896    .text:0000000000002978 _MAX
             forth.s:896    .text:000000000000297c $t
             forth.s:896    .text:000000000000297c MAX
             forth.s:907    .text:0000000000002988 $d
ARM GAS  forth.s 			page 190


             forth.s:907    .text:000000000000298c _MIN
             forth.s:907    .text:0000000000002990 $t
             forth.s:907    .text:0000000000002990 MIN
             forth.s:918    .text:000000000000299c $d
             forth.s:918    .text:00000000000029a0 _PSTOR
             forth.s:918    .text:00000000000029a4 PSTOR
             forth.s:930    .text:00000000000029b4 $d
             forth.s:930    .text:00000000000029b8 _DSTOR
             forth.s:930    .text:00000000000029bc DSTOR
             forth.s:942    .text:00000000000029d0 $d
             forth.s:942    .text:00000000000029d4 _DAT
             forth.s:942    .text:00000000000029d8 DAT
             forth.s:952    .text:00000000000029e2 $d
             forth.s:952    .text:00000000000029e6 _COUNT
             forth.s:952    .text:00000000000029ec $t
             forth.s:962    .text:00000000000029f8 $d
             forth.s:962    .text:00000000000029fc _DNEGA
             forth.s:962    .text:0000000000002a04 $t
             forth.s:962    .text:0000000000002a04 DNEGA
             forth.s:979    .text:0000000000002a14 DOVAR
             forth.s:990    .text:0000000000002a20 DOCON
             forth.s:1003   .text:0000000000002a2a $d
             forth.s:1003   .text:0000000000002a2e _SEED
             forth.s:1012   .text:0000000000002a3e $d
             forth.s:1012   .text:0000000000002a42 _MSEC
             forth.s:1012   .text:0000000000002a48 MSEC
             forth.s:1021   .text:0000000000002a52 $d
             forth.s:1021   .text:0000000000002a56 _TIMER
             forth.s:1021   .text:0000000000002a5c $t
             forth.s:1030   .text:0000000000002a66 $d
             forth.s:1030   .text:0000000000002a6a _TBOOT
             forth.s:1030   .text:0000000000002a70 $t
             forth.s:1030   .text:0000000000002a70 TBOOT
             forth.s:1039   .text:0000000000002a7a $d
             forth.s:1039   .text:0000000000002a7e _BASE
             forth.s:1049   .text:0000000000002a8e TEMP
             forth.s:1058   .text:0000000000002a98 $d
             forth.s:1058   .text:0000000000002a9c _SPAN
             forth.s:1058   .text:0000000000002aa4 SPAN
             forth.s:1067   .text:0000000000002aae $d
             forth.s:1067   .text:0000000000002ab2 _INN
             forth.s:1067   .text:0000000000002ab6 $t
             forth.s:1067   .text:0000000000002ab8 INN
             forth.s:1077   .text:0000000000002ac2 $d
             forth.s:1077   .text:0000000000002ac6 _NTIB
             forth.s:1077   .text:0000000000002acc NTIB
             forth.s:1086   .text:0000000000002ad6 $d
             forth.s:1086   .text:0000000000002ada _TEVAL
             forth.s:1086   .text:0000000000002ae0 $t
             forth.s:1086   .text:0000000000002ae0 TEVAL
             forth.s:1096   .text:0000000000002aea $d
             forth.s:1096   .text:0000000000002aee _HLD
             forth.s:1096   .text:0000000000002af2 $t
             forth.s:1096   .text:0000000000002af4 HLD
             forth.s:1106   .text:0000000000002afe $d
             forth.s:1106   .text:0000000000002b02 _CNTXT
             forth.s:1106   .text:0000000000002b0a $t
ARM GAS  forth.s 			page 191


             forth.s:1106   .text:0000000000002b0c CNTXT
             forth.s:1107   .text:0000000000002b0c CRRNT
             forth.s:1117   .text:0000000000002b16 $d
             forth.s:1117   .text:0000000000002b1a _CPP
             forth.s:1117   .text:0000000000002b20 CPP
             forth.s:1127   .text:0000000000002b2c $d
             forth.s:1127   .text:0000000000002b30 _FCP
             forth.s:1127   .text:0000000000002b34 $t
             forth.s:1127   .text:0000000000002b34 FCP
             forth.s:1137   .text:0000000000002b40 $d
             forth.s:1137   .text:0000000000002b44 _LAST
             forth.s:1137   .text:0000000000002b4c LAST
             forth.s:1151   .text:0000000000002b58 $d
             forth.s:1151   .text:0000000000002b5c _USER_BEGIN
             forth.s:1151   .text:0000000000002b68 USER_BEGIN
             forth.s:1155   .text:0000000000002b74 USR_BGN_ADR
             forth.s:1156   .text:0000000000002b74 $d
             forth.s:1162   .text:0000000000002b7c _USER_END
             forth.s:1162   .text:0000000000002b88 USER_END
             forth.s:1166   .text:0000000000002b94 USER_END_ADR
             forth.s:1167   .text:0000000000002b94 $d
             forth.s:1179   .text:0000000000002b9c _WITHI
             forth.s:1179   .text:0000000000002ba4 WITHI
             forth.s:1181   .text:0000000000002ba8 $d
             forth.s:1196   .text:0000000000002bc8 _UMMOD
             forth.s:1196   .text:0000000000002bd0 UMMOD
             forth.s:1200   .text:0000000000002bda UMMOD0
             forth.s:1207   .text:0000000000002bea UMMOD1
             forth.s:1213   .text:0000000000002bf4 UMMOD2
             forth.s:1226   .text:0000000000002c00 $d
             forth.s:1226   .text:0000000000002c04 _MSMOD
             forth.s:1226   .text:0000000000002c0a $t
             forth.s:1226   .text:0000000000002c0c MSMOD
             forth.s:1228   .text:0000000000002c10 $d
             forth.s:1237   .text:0000000000002c38 MMOD1
             forth.s:1244   .text:0000000000002c54 MMOD2
             forth.s:1252   .text:0000000000002c74 MMOD3
             forth.s:1259   .text:0000000000002c7c _STOD
             forth.s:1259   .text:0000000000002c80 $t
             forth.s:1268   .text:0000000000002c8c $d
             forth.s:1268   .text:0000000000002c90 _D2STAR
             forth.s:1268   .text:0000000000002c94 $t
             forth.s:1268   .text:0000000000002c94 D2STAR
             forth.s:1280   .text:0000000000002ca6 $d
             forth.s:1280   .text:0000000000002caa _D2SL
             forth.s:1280   .text:0000000000002cae $t
             forth.s:1280   .text:0000000000002cb0 D2SL
             forth.s:1295   .text:0000000000002cbe $d
             forth.s:1295   .text:0000000000002cc2 _DSLMOD
             forth.s:1295   .text:0000000000002cc8 $t
             forth.s:1295   .text:0000000000002cc8 DSLMOD
             forth.s:1331   .text:0000000000002d14 $d
             forth.s:1331   .text:0000000000002d18 _DSLASH
             forth.s:1331   .text:0000000000002d1c DSLASH
             forth.s:1333   .text:0000000000002d20 $d
             forth.s:1353   .text:0000000000002d64 _DSTAR
             forth.s:1353   .text:0000000000002d68 DSTAR
ARM GAS  forth.s 			page 192


             forth.s:1402   .text:0000000000002d9e $d
             forth.s:1402   .text:0000000000002da2 _SLMOD
             forth.s:1404   .text:0000000000002dac $d
             forth.s:1415   .text:0000000000002dc4 _MODD
             forth.s:1415   .text:0000000000002dc8 $t
             forth.s:1417   .text:0000000000002dcc $d
             forth.s:1426   .text:0000000000002ddc _SLASH
             forth.s:1426   .text:0000000000002dde $t
             forth.s:1428   .text:0000000000002de4 $d
             forth.s:1439   .text:0000000000002df8 _SSMOD
             forth.s:1439   .text:0000000000002dfe $t
             forth.s:1439   .text:0000000000002e00 SSMOD
             forth.s:1441   .text:0000000000002e04 $d
             forth.s:1453   .text:0000000000002e1c _STASL
             forth.s:1453   .text:0000000000002e20 STASL
             forth.s:1455   .text:0000000000002e24 $d
             forth.s:1469   .text:0000000000002e38 _ALGND
             forth.s:1469   .text:0000000000002e40 $t
             forth.s:1469   .text:0000000000002e40 ALGND
             forth.s:1480   .text:0000000000002e50 $d
             forth.s:1480   .text:0000000000002e54 _TCHAR
             forth.s:1480   .text:0000000000002e5a $t
             forth.s:1480   .text:0000000000002e5c TCHAR
             forth.s:1482   .text:0000000000002e60 $d
             forth.s:1492   .text:0000000000002e98 TCHA1
             forth.s:1500   .text:0000000000002ea0 _DEPTH
             forth.s:1500   .text:0000000000002ea6 $t
             forth.s:1500   .text:0000000000002ea8 DEPTH
             forth.s:1512   .text:0000000000002ec0 $d
             forth.s:1512   .text:0000000000002ec4 _PICK
             forth.s:1512   .text:0000000000002ecc PICK
             forth.s:1514   .text:0000000000002ed0 $d
             forth.s:1530   .text:0000000000002eec _HERE
             forth.s:1530   .text:0000000000002ef4 HERE
             forth.s:1532   .text:0000000000002ef8 $d
             forth.s:1541   .text:0000000000002f08 _PAD
             forth.s:1541   .text:0000000000002f0c $t
             forth.s:1543   .text:0000000000002f10 $d
             forth.s:1554   .text:0000000000002f28 _TIB
             forth.s:1554   .text:0000000000002f2c $t
             forth.s:1554   .text:0000000000002f2c TIB
             forth.s:1564   .text:0000000000002f36 $d
             forth.s:1564   .text:0000000000002f3a _ATEXE
             forth.s:1577   .text:0000000000002f58 $d
             forth.s:1577   .text:0000000000002f5c _CMOVE
             forth.s:1577   .text:0000000000002f62 $t
             forth.s:1577   .text:0000000000002f64 CMOVE
             forth.s:1584   .text:0000000000002f76 CMOV1
             forth.s:1581   .text:0000000000002f6e CMOV0
             forth.s:1589   .text:0000000000002f80 CMOV2
             forth.s:1597   .text:0000000000002f88 $d
             forth.s:1597   .text:0000000000002f8c _MOVE
             forth.s:1615   .text:0000000000002fbe MOVE1
             forth.s:1612   .text:0000000000002fba MOVE3
             forth.s:1609   .text:0000000000002fb6 MOVE0
             forth.s:1620   .text:0000000000002fc8 MOVE2
             forth.s:1629   .text:0000000000002fd0 $d
ARM GAS  forth.s 			page 193


             forth.s:1629   .text:0000000000002fd4 _FILL
             forth.s:1637   .text:0000000000002fea FILL2
             forth.s:1633   .text:0000000000002fe2 FILL1
             forth.s:1647   .text:0000000000002ff2 $d
             forth.s:1647   .text:0000000000002ff6 _PACKS
             forth.s:1647   .text:0000000000002ffc $t
             forth.s:1647   .text:0000000000002ffc PACKS
             forth.s:1649   .text:0000000000003000 $d
             forth.s:1678   .text:0000000000003058 _DIGIT
             forth.s:1678   .text:000000000000305e $t
             forth.s:1678   .text:0000000000003060 DIGIT
             forth.s:1680   .text:0000000000003064 $d
             forth.s:1695   .text:0000000000003098 _EXTRC
             forth.s:1695   .text:00000000000030a0 $t
             forth.s:1695   .text:00000000000030a0 EXTRC
             forth.s:1697   .text:00000000000030a4 $d
             forth.s:1707   .text:00000000000030b8 _BDIGS
             forth.s:1709   .text:00000000000030c0 $d
             forth.s:1719   .text:00000000000030d4 _HOLD
             forth.s:1721   .text:00000000000030e0 $d
             forth.s:1737   .text:0000000000003104 _DIG
             forth.s:1737   .text:0000000000003106 $t
             forth.s:1739   .text:000000000000310c $d
             forth.s:1751   .text:0000000000003124 _DIGS
             forth.s:1753   .text:000000000000312c DIGS1
             forth.s:1754   .text:000000000000312c $d
             forth.s:1759   .text:0000000000003148 DIGS2
             forth.s:1769   .text:0000000000003154 _SIGN
             forth.s:1771   .text:0000000000003160 $d
             forth.s:1775   .text:0000000000003178 SIGN1
             forth.s:1783   .text:0000000000003180 _EDIGS
             forth.s:1785   .text:0000000000003188 $d
             forth.s:1800   .text:00000000000031a4 STRR
             forth.s:1801   .text:00000000000031a4 $t
             forth.s:1802   .text:00000000000031a8 $d
             forth.s:1819   .text:00000000000031d4 _HEX
             forth.s:1819   .text:00000000000031d8 $t
             forth.s:1819   .text:00000000000031d8 HEX
             forth.s:1821   .text:00000000000031dc $d
             forth.s:1832   .text:00000000000031f4 _BIN
             forth.s:1832   .text:00000000000031f8 $t
             forth.s:1832   .text:00000000000031f8 BIN
             forth.s:1834   .text:00000000000031fc $d
             forth.s:1844   .text:0000000000003214 _DECIM
             forth.s:1844   .text:000000000000321c $t
             forth.s:1846   .text:0000000000003220 $d
             forth.s:1861   .text:0000000000003238 _DIGTQ
             forth.s:1863   .text:0000000000003244 $d
             forth.s:1876   .text:000000000000328c DGTQ1
             forth.s:1891   .text:000000000000329c PARSE_DIGITS
             forth.s:1892   .text:000000000000329c $t
             forth.s:1920   .text:00000000000032e0 $d
             forth.s:1920   .text:00000000000032e4 _DASHQ
             forth.s:1920   .text:00000000000032ea $t
             forth.s:1945   .text:0000000000003310 $d
             forth.s:1945   .text:0000000000003314 _INTQ
             forth.s:1947   .text:0000000000003320 $d
ARM GAS  forth.s 			page 194


             forth.s:2011   .text:0000000000003418 _SPACE
             forth.s:2011   .text:000000000000341e $t
             forth.s:2013   .text:0000000000003424 $d
             forth.s:2022   .text:0000000000003434 _SPACS
             forth.s:2022   .text:000000000000343c SPACS
             forth.s:2024   .text:0000000000003440 $d
             forth.s:2030   .text:000000000000345c CHAR2
             forth.s:2028   .text:0000000000003458 CHAR1
             forth.s:2039   .text:000000000000346c _TYPEE
             forth.s:2041   .text:0000000000003478 $d
             forth.s:2047   .text:0000000000003490 TYPE2
             forth.s:2043   .text:0000000000003484 TYPE1
             forth.s:2057   .text:00000000000034a4 _CR
             forth.s:2059   .text:00000000000034ac $d
             forth.s:2071   .text:00000000000034c8 DOSTR
             forth.s:2072   .text:00000000000034c8 $t
             forth.s:2074   .text:00000000000034cc $d
             forth.s:2092   .text:00000000000034f4 STRQP
             forth.s:2093   .text:00000000000034f4 $t
             forth.s:2094   .text:00000000000034f8 $d
             forth.s:2103   .text:0000000000003500 DOTST
             forth.s:2104   .text:0000000000003500 $t
             forth.s:2105   .text:0000000000003504 $d
             forth.s:2116   .text:0000000000003510 $t
             forth.s:2117   .text:0000000000003514 $d
             forth.s:2127   .text:0000000000003524 _DOTR
             forth.s:2127   .text:0000000000003528 DOTR
             forth.s:2129   .text:000000000000352c $d
             forth.s:2144   .text:0000000000003550 _UDOTR
             forth.s:2144   .text:0000000000003554 $t
             forth.s:2144   .text:0000000000003554 UDOTR
             forth.s:2146   .text:0000000000003558 $d
             forth.s:2165   .text:0000000000003590 _UDOT
             forth.s:2165   .text:0000000000003594 UDOT
             forth.s:2167   .text:0000000000003598 $d
             forth.s:2181   .text:00000000000035b8 _DOT
             forth.s:2181   .text:00000000000035ba $t
             forth.s:2183   .text:00000000000035c0 $d
             forth.s:2190   .text:00000000000035e4 DOT1
             forth.s:2200   .text:00000000000035f8 _DDOT
             forth.s:2200   .text:00000000000035fc DDOT
             forth.s:2202   .text:0000000000003600 $d
             forth.s:2220   .text:0000000000003630 _HDOT
             forth.s:2222   .text:0000000000003638 $d
             forth.s:2237   .text:000000000000365c _QUEST
             forth.s:2237   .text:000000000000365e $t
             forth.s:2237   .text:0000000000003660 QUEST
             forth.s:2239   .text:0000000000003664 $d
             forth.s:2253   .text:0000000000003670 PARS
             forth.s:2254   .text:0000000000003670 $t
             forth.s:2255   .text:0000000000003674 $d
             forth.s:2321   .text:0000000000003784 PARS8
             forth.s:2285   .text:00000000000036f8 PARS3
             forth.s:2268   .text:00000000000036b0 PARS1
             forth.s:2283   .text:00000000000036f4 PARS2
             forth.s:2289   .text:0000000000003704 PARS4
             forth.s:2301   .text:0000000000003734 PARS5
ARM GAS  forth.s 			page 195


             forth.s:2308   .text:0000000000003758 PARS6
             forth.s:2314   .text:000000000000376c PARS7
             forth.s:2332   .text:0000000000003798 _PARSE
             forth.s:2332   .text:000000000000379e $t
             forth.s:2332   .text:00000000000037a0 PARSE
             forth.s:2334   .text:00000000000037a4 $d
             forth.s:2355   .text:00000000000037e4 _DOTPR
             forth.s:2355   .text:00000000000037e8 DOTPR
             forth.s:2357   .text:00000000000037ec $d
             forth.s:2368   .text:0000000000003804 _PAREN
             forth.s:2368   .text:0000000000003806 $t
             forth.s:2368   .text:0000000000003808 PAREN
             forth.s:2370   .text:000000000000380c $d
             forth.s:2381   .text:0000000000003824 _BKSLA
             forth.s:2381   .text:0000000000003826 $t
             forth.s:2381   .text:0000000000003828 BKSLA
             forth.s:2383   .text:000000000000382c $d
             forth.s:2394   .text:0000000000003844 _CHAR
             forth.s:2394   .text:000000000000384c CHAR
             forth.s:2396   .text:0000000000003850 $d
             forth.s:2406   .text:0000000000003868 _IMCHAR
             forth.s:2406   .text:0000000000003870 IMCHAR
             forth.s:2408   .text:0000000000003874 $d
             forth.s:3004   .text:0000000000003f98 LITER
             forth.s:2417   .text:0000000000003884 _WORDD
             forth.s:2417   .text:000000000000388c WORDD
             forth.s:2419   .text:0000000000003890 $d
             forth.s:2431   .text:00000000000038a8 _TOKEN
             forth.s:2431   .text:00000000000038ae $t
             forth.s:2431   .text:00000000000038b0 TOKEN
             forth.s:2433   .text:00000000000038b4 $d
             forth.s:2598   .text:0000000000003aa4 UPPER
             forth.s:2447   .text:00000000000038c8 _NAMET
             forth.s:2447   .text:00000000000038ce $t
             forth.s:2447   .text:00000000000038d0 NAMET
             forth.s:2449   .text:00000000000038d4 $d
             forth.s:2468   .text:00000000000038f4 _SAMEQ
             forth.s:2468   .text:00000000000038fa $t
             forth.s:2468   .text:00000000000038fc SAMEQ
             forth.s:2470   .text:0000000000003900 $d
             forth.s:2487   .text:0000000000003948 SAME2
             forth.s:2472   .text:000000000000390c SAME1
             forth.s:2502   .text:000000000000395c FIND
             forth.s:2503   .text:000000000000395c $t
             forth.s:2504   .text:0000000000003960 $d
             forth.s:2511   .text:000000000000397c FIND1
             forth.s:2531   .text:00000000000039d4 FIND6
             forth.s:2524   .text:00000000000039bc FIND2
             forth.s:2529   .text:00000000000039cc FIND3
             forth.s:2538   .text:00000000000039ec FIND4
             forth.s:2544   .text:0000000000003a08 FIND5
             forth.s:2560   .text:0000000000003a30 _NAMEQ
             forth.s:2560   .text:0000000000003a36 $t
             forth.s:2560   .text:0000000000003a38 NAMEQ
             forth.s:2562   .text:0000000000003a3c $d
             forth.s:2577   .text:0000000000003a50 _ASCIZ
             forth.s:2577   .text:0000000000003a56 $t
ARM GAS  forth.s 			page 196


             forth.s:2577   .text:0000000000003a58 ASCIZ
             forth.s:2579   .text:0000000000003a5c $d
             forth.s:2598   .text:0000000000003a9c _UPPER
             forth.s:2598   .text:0000000000003aa2 $t
             forth.s:2600   .text:0000000000003aa8 $d
             forth.s:2631   .text:0000000000003b2c BKSP
             forth.s:2632   .text:0000000000003b2c $t
             forth.s:2633   .text:0000000000003b30 $d
             forth.s:2647   .text:0000000000003b74 BACK1
             forth.s:2656   .text:0000000000003b78 TAP
             forth.s:2657   .text:0000000000003b78 $t
             forth.s:2658   .text:0000000000003b7c $d
             forth.s:2671   .text:0000000000003b94 KTAP
             forth.s:2672   .text:0000000000003b94 TTAP
             forth.s:2673   .text:0000000000003b94 $t
             forth.s:2674   .text:0000000000003b98 $d
             forth.s:2688   .text:0000000000003bd8 KTAP2
             forth.s:2685   .text:0000000000003bd0 KTAP1
             forth.s:2700   .text:0000000000003bf0 _ACCEP
             forth.s:2702   .text:0000000000003bfc $d
             forth.s:2705   .text:0000000000003c08 ACCP1
             forth.s:2721   .text:0000000000003c50 ACCP4
             forth.s:2717   .text:0000000000003c44 ACCP2
             forth.s:2719   .text:0000000000003c48 ACCP3
             forth.s:2732   .text:0000000000003c64 _QUERY
             forth.s:2732   .text:0000000000003c6a $t
             forth.s:2732   .text:0000000000003c6c QUERY
             forth.s:2734   .text:0000000000003c70 $d
             forth.s:2754   .text:0000000000003ca4 _ABORT
             forth.s:2754   .text:0000000000003caa $t
             forth.s:2754   .text:0000000000003cac ABORT
             forth.s:2756   .text:0000000000003cb0 ABORT1
             forth.s:2757   .text:0000000000003cb0 $d
             forth.s:2888   .text:0000000000003e54 QUIT
             forth.s:2772   .text:0000000000003cd8 ABORQ
             forth.s:2773   .text:0000000000003cd8 $t
             forth.s:2774   .text:0000000000003cdc $d
             forth.s:2792   .text:0000000000003d00 _INTER
             forth.s:2794   .text:0000000000003d10 $d
             forth.s:2803   .text:0000000000003d4c INTE1
             forth.s:2800   .text:0000000000003d42 $t
             forth.s:2801   .text:0000000000003d44 $d
             forth.s:2807   .text:0000000000003d5c INTE2
             forth.s:2814   .text:0000000000003d64 _LBRAC
             forth.s:2814   .text:0000000000003d66 $t
             forth.s:2814   .text:0000000000003d68 LBRAC
             forth.s:2816   .text:0000000000003d6c $d
             forth.s:2826   .text:0000000000003d84 _DOTOK
             forth.s:2826   .text:0000000000003d88 $t
             forth.s:2826   .text:0000000000003d88 DOTOK
             forth.s:2828   .text:0000000000003d8c $d
             forth.s:2834   .text:0000000000003db0 DOTO1
             forth.s:2835   .text:0000000000003db0 $d
             forth.s:2843   .text:0000000000003dbc _QSTAC
             forth.s:2843   .text:0000000000003dc4 QSTAC
             forth.s:2845   .text:0000000000003dc8 $d
             forth.s:2847   .text:0000000000003dde $t
ARM GAS  forth.s 			page 197


             forth.s:2848   .text:0000000000003de0 $d
             forth.s:2855   .text:0000000000003de8 _EVAL
             forth.s:2857   .text:0000000000003df4 EVAL1
             forth.s:2858   .text:0000000000003df4 $d
             forth.s:2866   .text:0000000000003e1c EVAL2
             forth.s:2876   .text:0000000000003e2c _PRESE
             forth.s:2878   .text:0000000000003e38 $d
             forth.s:2888   .text:0000000000003e4c _QUIT
             forth.s:2889   .text:0000000000003e54 $d
             forth.s:2891   .text:0000000000003e60 QUIT1
             forth.s:2893   .text:0000000000003e64 QUIT2
             forth.s:2903   .text:0000000000003e78 _FORGET
             forth.s:2903   .text:0000000000003e80 FORGET
             forth.s:2905   .text:0000000000003e84 $d
             forth.s:3402   .text:000000000000441c OVERT
             forth.s:2933   .text:0000000000003ecc $d
             forth.s:2933   .text:0000000000003ed0 _TICK
             forth.s:2933   .text:0000000000003ed2 $t
             forth.s:2933   .text:0000000000003ed4 TICK
             forth.s:2935   .text:0000000000003ed8 $d
             forth.s:2939   .text:0000000000003eec TICK1
             forth.s:2947   .text:0000000000003ef4 _ALLOT
             forth.s:2947   .text:0000000000003efa $t
             forth.s:2947   .text:0000000000003efc ALLOT
             forth.s:2949   .text:0000000000003f00 $d
             forth.s:2958   .text:0000000000003f10 _COMMA
             forth.s:2958   .text:0000000000003f12 $t
             forth.s:2958   .text:0000000000003f14 COMMA
             forth.s:2960   .text:0000000000003f18 $d
             forth.s:2974   .text:0000000000003f34 $d
             forth.s:2974   .text:0000000000003f38 _BCOMP
             forth.s:2974   .text:0000000000003f42 $t
             forth.s:2974   .text:0000000000003f44 BCOMP
             forth.s:2976   .text:0000000000003f48 $d
             forth.s:2986   .text:0000000000003f58 _COMPI
             forth.s:2986   .text:0000000000003f60 $t
             forth.s:2986   .text:0000000000003f60 COMPI
             forth.s:2988   .text:0000000000003f64 $d
             forth.s:3004   .text:0000000000003f90 _LITER
             forth.s:3004   .text:0000000000003f98 $t
             forth.s:3006   .text:0000000000003f9c $d
             forth.s:3441   .text:0000000000004478 CALLC
             forth.s:3016   .text:0000000000003fb0 STRCQ
             forth.s:3017   .text:0000000000003fb0 $t
             forth.s:3018   .text:0000000000003fb4 $d
             forth.s:3040   .text:0000000000003fec _FOR
             forth.s:3040   .text:0000000000003ff0 $t
             forth.s:3040   .text:0000000000003ff0 FOR
             forth.s:3042   .text:0000000000003ff4 $d
             forth.s:3051   .text:000000000000400c _DO
             forth.s:3051   .text:0000000000004010 DO
             forth.s:3053   .text:0000000000004014 $d
             forth.s:3059   .text:0000000000004040 DOPLOOP
             forth.s:3060   .text:0000000000004040 $t
             forth.s:3076   .text:0000000000004062 $d
             forth.s:3076   .text:0000000000004066 _PLOOP
             forth.s:3076   .text:000000000000406c $t
ARM GAS  forth.s 			page 198


             forth.s:3076   .text:000000000000406c PLOOP
             forth.s:3078   .text:0000000000004070 $d
             forth.s:3082   .text:0000000000004084 DOLOOP
             forth.s:3083   .text:0000000000004084 $t
             forth.s:3101   .text:00000000000040ac $d
             forth.s:3101   .text:00000000000040b0 _LOOP
             forth.s:3101   .text:00000000000040b8 LOOP
             forth.s:3103   .text:00000000000040bc $d
             forth.s:3114   .text:00000000000040d4 _BEGIN
             forth.s:3114   .text:00000000000040da $t
             forth.s:3114   .text:00000000000040dc BEGIN
             forth.s:3116   .text:00000000000040e0 $d
             forth.s:3125   .text:00000000000040e8 $d
             forth.s:3125   .text:00000000000040ec _FNEXT
             forth.s:3125   .text:00000000000040f4 FNEXT
             forth.s:3127   .text:00000000000040f8 $d
             forth.s:3135   .text:0000000000004110 _I
             forth.s:3135   .text:0000000000004112 $t
             forth.s:3144   .text:0000000000004120 $d
             forth.s:3144   .text:0000000000004124 _J
             forth.s:3144   .text:0000000000004126 $t
             forth.s:3154   .text:0000000000004134 $d
             forth.s:3154   .text:0000000000004138 _UNTIL
             forth.s:3154   .text:000000000000413e $t
             forth.s:3154   .text:0000000000004140 UNTIL
             forth.s:3156   .text:0000000000004144 $d
             forth.s:3165   .text:000000000000415c _AGAIN
             forth.s:3165   .text:0000000000004162 $t
             forth.s:3165   .text:0000000000004164 AGAIN
             forth.s:3167   .text:0000000000004168 $d
             forth.s:3176   .text:0000000000004180 _IFF
             forth.s:3176   .text:0000000000004184 IFF
             forth.s:3178   .text:0000000000004188 $d
             forth.s:3190   .text:00000000000041b0 _AHEAD
             forth.s:3190   .text:00000000000041b6 $t
             forth.s:3190   .text:00000000000041b8 AHEAD
             forth.s:3192   .text:00000000000041bc $d
             forth.s:3204   .text:00000000000041e4 _REPEA
             forth.s:3204   .text:00000000000041ec REPEA
             forth.s:3206   .text:00000000000041f0 $d
             forth.s:3217   .text:0000000000004208 _THENN
             forth.s:3217   .text:0000000000004210 THENN
             forth.s:3219   .text:0000000000004214 $d
             forth.s:3230   .text:0000000000004228 _AFT
             forth.s:3230   .text:000000000000422c $t
             forth.s:3230   .text:000000000000422c AFT
             forth.s:3232   .text:0000000000004230 $d
             forth.s:3244   .text:0000000000004248 _ELSEE
             forth.s:3244   .text:0000000000004250 ELSEE
             forth.s:3246   .text:0000000000004254 $d
             forth.s:3256   .text:0000000000004268 _WHILE
             forth.s:3256   .text:000000000000426e $t
             forth.s:3256   .text:0000000000004270 WHILE
             forth.s:3258   .text:0000000000004274 $d
             forth.s:3267   .text:0000000000004284 _ABRTQ
             forth.s:3267   .text:000000000000428c ABRTQ
             forth.s:3269   .text:0000000000004290 $d
ARM GAS  forth.s 			page 199


             forth.s:3278   .text:00000000000042a8 _STRQ
             forth.s:3278   .text:00000000000042ac STRQ
             forth.s:3280   .text:00000000000042b0 $d
             forth.s:3290   .text:00000000000042c8 _DOTQ
             forth.s:3290   .text:00000000000042cc DOTQ
             forth.s:3292   .text:00000000000042d0 $d
             forth.s:3306   .text:00000000000042e8 _UNIQU
             forth.s:3306   .text:00000000000042f0 $t
             forth.s:3306   .text:00000000000042f0 UNIQU
             forth.s:3308   .text:00000000000042f4 $d
             forth.s:3315   .text:000000000000431c UNIQ1
             forth.s:3312   .text:0000000000004310 $d
             forth.s:3325   .text:0000000000004324 SNAME
             forth.s:3326   .text:0000000000004324 $t
             forth.s:3327   .text:0000000000004328 $d
             forth.s:3343   .text:000000000000436c SNAM1
             forth.s:3355   .text:0000000000004380 _SCOMP
             forth.s:3355   .text:000000000000438c SCOMP
             forth.s:3357   .text:0000000000004390 $d
             forth.s:3369   .text:00000000000043c8 SCOM2
             forth.s:3366   .text:00000000000043c0 SCOM1
             forth.s:3374   .text:00000000000043dc SCOM3
             forth.s:3383   .text:00000000000043e4 COLON_ABORT
             forth.s:3384   .text:00000000000043e4 $t
             forth.s:3385   .text:00000000000043e8 $d
             forth.s:3402   .text:0000000000004414 _OVERT
             forth.s:3402   .text:000000000000441a $t
             forth.s:3404   .text:0000000000004420 $d
             forth.s:3415   .text:0000000000004438 _SEMIS
             forth.s:3415   .text:000000000000443a $t
             forth.s:3415   .text:000000000000443c SEMIS
             forth.s:3417   .text:0000000000004440 $d
             forth.s:3429   .text:000000000000445c _RBRAC
             forth.s:3429   .text:000000000000445e $t
             forth.s:3429   .text:0000000000004460 RBRAC
             forth.s:3431   .text:0000000000004464 $d
             forth.s:3442   .text:0000000000004478 $t
             forth.s:3443   .text:000000000000447c $d
             forth.s:3455   .text:0000000000004494 _COLON
             forth.s:3455   .text:0000000000004496 $t
             forth.s:3455   .text:0000000000004498 COLON
             forth.s:3457   .text:000000000000449c $d
             forth.s:3468   .text:00000000000044b4 _IMMED
             forth.s:3468   .text:00000000000044be $t
             forth.s:3468   .text:00000000000044c0 IMMED
             forth.s:3470   .text:00000000000044c4 $d
             forth.s:3488   .text:00000000000044f0 _CONST
             forth.s:3488   .text:00000000000044fc CONST
             forth.s:3490   .text:0000000000004500 $d
             forth.s:3501   .text:0000000000004530 $t
             forth.s:3508   .text:0000000000004530 DODOES
             forth.s:3510   .text:0000000000004534 $d
             forth.s:3525   .text:0000000000004558 $d
             forth.s:3525   .text:000000000000455c _DOES
             forth.s:3525   .text:0000000000004562 $t
             forth.s:3525   .text:0000000000004564 DOES
             forth.s:3527   .text:0000000000004568 $d
ARM GAS  forth.s 			page 200


             forth.s:3542   .text:0000000000004598 _DEFERAT
             forth.s:3542   .text:00000000000045a0 DEFERAT
             forth.s:3544   .text:00000000000045a4 $d
             forth.s:3554   .text:00000000000045bc _DEFERSTO
             forth.s:3554   .text:00000000000045c4 DEFERSTO
             forth.s:3556   .text:00000000000045c8 $d
             forth.s:3567   .text:00000000000045e4 _DEFER
             forth.s:3567   .text:00000000000045ea $t
             forth.s:3567   .text:00000000000045ec DEFER
             forth.s:3569   .text:00000000000045f0 $d
             forth.s:3590   .text:000000000000463c CREAT
             forth.s:3580   .text:0000000000004624 DEFER_NOP
             forth.s:3581   .text:0000000000004624 $t
             forth.s:3582   .text:0000000000004628 $d
             forth.s:3590   .text:0000000000004634 _CREAT
             forth.s:3592   .text:0000000000004640 $d
             forth.s:3605   .text:0000000000004664 _VARIA
             forth.s:3605   .text:0000000000004670 VARIA
             forth.s:3607   .text:0000000000004674 $d
             forth.s:3624   .text:0000000000004694 DMP
             forth.s:3625   .text:0000000000004694 $t
             forth.s:3626   .text:0000000000004698 $d
             forth.s:3638   .text:00000000000046d0 PDUM2
             forth.s:3632   .text:00000000000046b8 PDUM1
             forth.s:3650   .text:00000000000046dc $d
             forth.s:3650   .text:00000000000046e0 _DUMP
             forth.s:3650   .text:00000000000046e8 DUMP
             forth.s:3652   .text:00000000000046ec $d
             forth.s:3670   .text:000000000000473c DUMP4
             forth.s:3660   .text:0000000000004714 DUMP1
             forth.s:3672   .text:0000000000004744 DUMP3
             forth.s:3682   .text:000000000000475c _TRACE
             forth.s:3682   .text:0000000000004762 $t
             forth.s:3684   .text:0000000000004768 $d
             forth.s:3712   .text:00000000000047cc DOTS
             forth.s:3712   .text:00000000000047c8 _DOTS
             forth.s:3714   .text:00000000000047d0 $d
             forth.s:3722   .text:00000000000047f0 DOTS2
             forth.s:3718   .text:00000000000047e4 DOTS1
             forth.s:3732   .text:0000000000004804 _TNAME
             forth.s:3732   .text:000000000000480a $t
             forth.s:3732   .text:000000000000480c TNAME
             forth.s:3734   .text:0000000000004810 $d
             forth.s:3737   .text:000000000000481c TNAM1
             forth.s:3748   .text:0000000000004850 TNAM2
             forth.s:3757   .text:0000000000004860 _DOTID
             forth.s:3757   .text:0000000000004864 $t
             forth.s:3757   .text:0000000000004864 DOTID
             forth.s:3759   .text:0000000000004868 $d
             forth.s:3766   .text:000000000000488c DOTI1
             forth.s:3767   .text:000000000000489a $t
             forth.s:3768   .text:000000000000489c $d
             forth.s:3770   *ABS*:0000000000000000 WANT_SEE
             forth.s:3843   .text:00000000000048a4 _VLIST
             forth.s:3843   .text:00000000000048aa $t
             forth.s:3843   .text:00000000000048ac VLIST
             forth.s:3845   .text:00000000000048b0 $d
ARM GAS  forth.s 			page 201


             forth.s:3856   .text:00000000000048d0 WORDS
             forth.s:3877   .text:0000000000004914 WC
             forth.s:3856   .text:00000000000048c8 _WORDS
             forth.s:3856   .text:00000000000048ce $t
             forth.s:3858   .text:00000000000048d4 $d
             forth.s:3861   .text:00000000000048e0 WORS1
             forth.s:3870   .text:0000000000004908 WORS2
             forth.s:3877   .text:0000000000004910 _WC
             forth.s:3879   .text:0000000000004918 $d
             forth.s:3896   .text:0000000000004954 _MARK
             forth.s:3896   .text:000000000000495c MARK
             forth.s:3898   .text:0000000000004960 $d
             forth.s:3901   .text:000000000000496c $t
             forth.s:3902   .text:0000000000004970 $d
             forth.s:3923   .text:000000000000499c VERSN
             forth.s:3924   .text:000000000000499c $t
             forth.s:3925   .text:00000000000049a0 $d
             forth.s:3933   .text:00000000000049b0 _HI
             forth.s:3935   .text:00000000000049b8 $d
             forth.s:3936   .text:00000000000049d2 $t
             forth.s:3937   .text:00000000000049d4 $d
             forth.s:3959   .text:0000000000004a20 PS2_QUERY
             forth.s:3960   .text:0000000000004a20 $t
             forth.s:3961   .text:0000000000004a24 $d
             forth.s:3975   .text:0000000000004a8a $t
             forth.s:3976   .text:0000000000004a8c $d
             forth.s:3986   .text:0000000000004a98 IF_SENSE
             forth.s:3987   .text:0000000000004a98 $t
             forth.s:3988   .text:0000000000004a9c $d
             forth.s:4014   .text:0000000000004aec COLD1
             forth.s:4015   .text:0000000000004aec $d
             forth.s:4029   .text:0000000000004b38 COLD2
             forth.s:4032   .text:0000000000004b38 $d
             forth.s:4035   .text:0000000000004b3c $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:0000000000000547 $d
          ser-term.s:90     .text:0000000000000548 $t
          ser-term.s:110    .text:0000000000000581 $d
          ser-term.s:110    .text:0000000000000582 $t
          ser-term.s:133    .text:00000000000005bf $d
          ser-term.s:133    .text:00000000000005c0 $t
          ser-term.s:164    .text:0000000000000607 $d
          ser-term.s:164    .text:0000000000000608 $t
          ser-term.s:191    .text:000000000000067d $d
          ser-term.s:191    .text:000000000000067e $t
          ser-term.s:203    .text:00000000000006ab $d
          ser-term.s:203    .text:00000000000006ac $t
             tvout.s:264    .text:00000000000008f7 $d
             tvout.s:264    .text:00000000000008f8 $t
             tvout.s:278    .text:000000000000092b $d
             tvout.s:278    .text:000000000000092c $t
             tvout.s:306    .text:0000000000000985 $d
             tvout.s:306    .text:0000000000000986 $t
             tvout.s:325    .text:00000000000009b3 $d
             tvout.s:325    .text:00000000000009b4 $t
             tvout.s:427    .text:0000000000000aed $d
ARM GAS  forth.s 			page 202


             tvout.s:427    .text:0000000000000aee $t
             tvout.s:448    .text:0000000000000b47 $d
             tvout.s:448    .text:0000000000000b48 $t
             tvout.s:495    .text:0000000000000bdd $d
             tvout.s:495    .text:0000000000000bde $t
           ps2_kbd.s:307    .text:00000000000012cb $d
           ps2_kbd.s:307    .text:00000000000012cc $t
           ps2_kbd.s:396    .text:00000000000013c7 $d
           ps2_kbd.s:396    .text:00000000000013c8 $t
           ps2_kbd.s:616    .text:0000000000001669 $d
           ps2_kbd.s:616    .text:000000000000166a $t
           ps2_kbd.s:633    .text:00000000000016a3 $d
           ps2_kbd.s:633    .text:00000000000016a4 $t
         spi-flash.s:83     .text:000000000000178f $d
         spi-flash.s:83     .text:0000000000001790 $t
         spi-flash.s:149    .text:000000000000185b $d
         spi-flash.s:149    .text:000000000000185c $t
         spi-flash.s:236    .text:000000000000199f $d
         spi-flash.s:236    .text:00000000000019a0 $t
         spi-flash.s:254    .text:00000000000019db $d
         spi-flash.s:254    .text:00000000000019dc $t
         spi-flash.s:276    .text:0000000000001a2f $d
         spi-flash.s:276    .text:0000000000001a30 $t
             float.s:47     .text:0000000000001a91 $d
             float.s:47     .text:0000000000001a92 $t
             float.s:65     .text:0000000000001ac3 $d
             float.s:65     .text:0000000000001ac4 $t
             float.s:217    .text:0000000000001c8f $d
             float.s:217    .text:0000000000001c90 $t
             float.s:283    .text:0000000000001dab $d
             float.s:283    .text:0000000000001dac $t
             float.s:363    .text:0000000000001f1b $d
             float.s:363    .text:0000000000001f1c $t
             float.s:372    .text:0000000000001f2b $d
             float.s:372    .text:0000000000001f2c $t
             float.s:386    .text:0000000000001f3b $d
             float.s:386    .text:0000000000001f3c $t
             float.s:562    .text:000000000000218b $d
             float.s:562    .text:000000000000218c $t
             float.s:640    .text:00000000000022ef $d
             float.s:640    .text:00000000000022f0 $t
             forth.s:132    .text:0000000000002363 $d
             forth.s:132    .text:0000000000002364 $t
             forth.s:154    .text:000000000000239d $d
             forth.s:154    .text:000000000000239e $t
             forth.s:190    .text:00000000000023bb $d
             forth.s:190    .text:00000000000023bc $t
             forth.s:237    .text:0000000000002469 $d
             forth.s:237    .text:000000000000246a $t
             forth.s:332    .text:00000000000024f9 $d
             forth.s:332    .text:00000000000024fa $t
             forth.s:357    .text:0000000000002527 $d
             forth.s:357    .text:0000000000002528 $t
             forth.s:367    .text:000000000000253b $d
             forth.s:367    .text:000000000000253c $t
             forth.s:375    .text:0000000000002547 $d
             forth.s:375    .text:0000000000002548 $t
ARM GAS  forth.s 			page 203


             forth.s:384    .text:0000000000002559 $d
             forth.s:384    .text:000000000000255a $t
             forth.s:393    .text:000000000000256d $d
             forth.s:393    .text:000000000000256e $t
             forth.s:429    .text:00000000000025b5 $d
             forth.s:429    .text:00000000000025b6 $t
             forth.s:445    .text:00000000000025d7 $d
             forth.s:445    .text:00000000000025d8 $t
             forth.s:455    .text:00000000000025e9 $d
             forth.s:455    .text:00000000000025ea $t
             forth.s:464    .text:00000000000025fb $d
             forth.s:464    .text:00000000000025fc $t
             forth.s:481    .text:000000000000261d $d
             forth.s:481    .text:000000000000261e $t
             forth.s:511    .text:0000000000002663 $d
             forth.s:511    .text:0000000000002664 $t
             forth.s:520    .text:0000000000002679 $d
             forth.s:520    .text:000000000000267a $t
             forth.s:568    .text:00000000000026d3 $d
             forth.s:568    .text:00000000000026d4 $t
             forth.s:579    .text:00000000000026e7 $d
             forth.s:579    .text:00000000000026e8 $t
             forth.s:587    .text:00000000000026f5 $d
             forth.s:587    .text:00000000000026f6 $t
             forth.s:595    .text:0000000000002705 $d
             forth.s:595    .text:0000000000002706 $t
             forth.s:603    .text:0000000000002715 $d
             forth.s:603    .text:0000000000002716 $t
             forth.s:627    .text:0000000000002745 $d
             forth.s:627    .text:0000000000002746 $t
             forth.s:652    .text:0000000000002779 $d
             forth.s:652    .text:000000000000277a $t
             forth.s:660    .text:0000000000002789 $d
             forth.s:660    .text:000000000000278a $t
             forth.s:668    .text:000000000000279b $d
             forth.s:668    .text:000000000000279c $t
             forth.s:689    .text:00000000000027c3 $d
             forth.s:689    .text:00000000000027c4 $t
             forth.s:718    .text:00000000000027ff $d
             forth.s:718    .text:0000000000002800 $t
             forth.s:728    .text:0000000000002813 $d
             forth.s:728    .text:0000000000002814 $t
             forth.s:741    .text:0000000000002831 $d
             forth.s:741    .text:0000000000002832 $t
             forth.s:794    .text:00000000000028a9 $d
             forth.s:794    .text:00000000000028aa $t
             forth.s:812    .text:00000000000028cd $d
             forth.s:812    .text:00000000000028ce $t
             forth.s:835    .text:00000000000028fb $d
             forth.s:835    .text:00000000000028fc $t
             forth.s:848    .text:000000000000291b $d
             forth.s:848    .text:000000000000291c $t
             forth.s:872    .text:000000000000294b $d
             forth.s:872    .text:000000000000294c $t
             forth.s:918    .text:00000000000029a3 $d
             forth.s:918    .text:00000000000029a4 $t
             forth.s:930    .text:00000000000029bb $d
ARM GAS  forth.s 			page 204


             forth.s:930    .text:00000000000029bc $t
             forth.s:942    .text:00000000000029d7 $d
             forth.s:942    .text:00000000000029d8 $t
             forth.s:1003   .text:0000000000002a33 $d
             forth.s:1003   .text:0000000000002a34 $t
             forth.s:1012   .text:0000000000002a47 $d
             forth.s:1012   .text:0000000000002a48 $t
             forth.s:1039   .text:0000000000002a83 $d
             forth.s:1039   .text:0000000000002a84 $t
             forth.s:1058   .text:0000000000002aa1 $d
             forth.s:1058   .text:0000000000002aa2 $t
             forth.s:1077   .text:0000000000002acb $d
             forth.s:1077   .text:0000000000002acc $t
             forth.s:1117   .text:0000000000002b1d $d
             forth.s:1117   .text:0000000000002b1e $t
             forth.s:1137   .text:0000000000002b49 $d
             forth.s:1137   .text:0000000000002b4a $t
             forth.s:1151   .text:0000000000002b67 $d
             forth.s:1151   .text:0000000000002b68 $t
             forth.s:1162   .text:0000000000002b85 $d
             forth.s:1162   .text:0000000000002b86 $t
             forth.s:1179   .text:0000000000002ba3 $d
             forth.s:1179   .text:0000000000002ba4 $t
             forth.s:1196   .text:0000000000002bcf $d
             forth.s:1196   .text:0000000000002bd0 $t
             forth.s:1331   .text:0000000000002d1b $d
             forth.s:1331   .text:0000000000002d1c $t
             forth.s:1353   .text:0000000000002d67 $d
             forth.s:1353   .text:0000000000002d68 $t
             forth.s:1402   .text:0000000000002da7 $d
             forth.s:1402   .text:0000000000002da8 $t
             forth.s:1453   .text:0000000000002e1f $d
             forth.s:1453   .text:0000000000002e20 $t
             forth.s:1512   .text:0000000000002ec9 $d
             forth.s:1512   .text:0000000000002eca $t
             forth.s:1530   .text:0000000000002ef1 $d
             forth.s:1530   .text:0000000000002ef2 $t
             forth.s:1564   .text:0000000000002f43 $d
             forth.s:1564   .text:0000000000002f44 $t
             forth.s:1597   .text:0000000000002f91 $d
             forth.s:1597   .text:0000000000002f92 $t
             forth.s:1629   .text:0000000000002fd9 $d
             forth.s:1629   .text:0000000000002fda $t
             forth.s:1707   .text:00000000000030bb $d
             forth.s:1707   .text:00000000000030bc $t
             forth.s:1719   .text:00000000000030d9 $d
             forth.s:1719   .text:00000000000030da $t
             forth.s:1751   .text:0000000000003127 $d
             forth.s:1751   .text:0000000000003128 $t
             forth.s:1769   .text:0000000000003159 $d
             forth.s:1769   .text:000000000000315a $t
             forth.s:1783   .text:0000000000003183 $d
             forth.s:1783   .text:0000000000003184 $t
             forth.s:1861   .text:000000000000323f $d
             forth.s:1861   .text:0000000000003240 $t
             forth.s:1945   .text:0000000000003319 $d
             forth.s:1945   .text:000000000000331a $t
ARM GAS  forth.s 			page 205


             forth.s:2022   .text:000000000000343b $d
             forth.s:2022   .text:000000000000343c $t
             forth.s:2039   .text:0000000000003471 $d
             forth.s:2039   .text:0000000000003472 $t
             forth.s:2057   .text:00000000000034a7 $d
             forth.s:2057   .text:00000000000034a8 $t
             forth.s:2127   .text:0000000000003527 $d
             forth.s:2127   .text:0000000000003528 $t
             forth.s:2165   .text:0000000000003593 $d
             forth.s:2165   .text:0000000000003594 $t
             forth.s:2200   .text:00000000000035fb $d
             forth.s:2200   .text:00000000000035fc $t
             forth.s:2220   .text:0000000000003633 $d
             forth.s:2220   .text:0000000000003634 $t
             forth.s:2355   .text:00000000000037e7 $d
             forth.s:2355   .text:00000000000037e8 $t
             forth.s:2394   .text:0000000000003849 $d
             forth.s:2394   .text:000000000000384a $t
             forth.s:2406   .text:000000000000386f $d
             forth.s:2406   .text:0000000000003870 $t
             forth.s:2417   .text:0000000000003889 $d
             forth.s:2417   .text:000000000000388a $t
             forth.s:2700   .text:0000000000003bf7 $d
             forth.s:2700   .text:0000000000003bf8 $t
             forth.s:2792   .text:0000000000003d0b $d
             forth.s:2792   .text:0000000000003d0c $t
             forth.s:2843   .text:0000000000003dc3 $d
             forth.s:2843   .text:0000000000003dc4 $t
             forth.s:2855   .text:0000000000003ded $d
             forth.s:2855   .text:0000000000003dee $t
             forth.s:2876   .text:0000000000003e33 $d
             forth.s:2876   .text:0000000000003e34 $t
             forth.s:2888   .text:0000000000003e51 $d
             forth.s:2888   .text:0000000000003e52 $t
             forth.s:2903   .text:0000000000003e7f $d
             forth.s:2903   .text:0000000000003e80 $t
             forth.s:3051   .text:000000000000400f $d
             forth.s:3051   .text:0000000000004010 $t
             forth.s:3101   .text:00000000000040b5 $d
             forth.s:3101   .text:00000000000040b6 $t
             forth.s:3125   .text:00000000000040f1 $d
             forth.s:3125   .text:00000000000040f2 $t
             forth.s:3176   .text:0000000000004183 $d
             forth.s:3176   .text:0000000000004184 $t
             forth.s:3204   .text:00000000000041eb $d
             forth.s:3204   .text:00000000000041ec $t
             forth.s:3217   .text:000000000000420d $d
             forth.s:3217   .text:000000000000420e $t
             forth.s:3244   .text:000000000000424d $d
             forth.s:3244   .text:000000000000424e $t
             forth.s:3267   .text:000000000000428b $d
             forth.s:3267   .text:000000000000428c $t
             forth.s:3278   .text:00000000000042ab $d
             forth.s:3278   .text:00000000000042ac $t
             forth.s:3290   .text:00000000000042cb $d
             forth.s:3290   .text:00000000000042cc $t
             forth.s:3355   .text:0000000000004389 $d
ARM GAS  forth.s 			page 206


             forth.s:3355   .text:000000000000438a $t
             forth.s:3488   .text:00000000000044f9 $d
             forth.s:3488   .text:00000000000044fa $t
             forth.s:3542   .text:000000000000459f $d
             forth.s:3542   .text:00000000000045a0 $t
             forth.s:3554   .text:00000000000045c3 $d
             forth.s:3554   .text:00000000000045c4 $t
             forth.s:3590   .text:000000000000463b $d
             forth.s:3590   .text:000000000000463c $t
             forth.s:3605   .text:000000000000466d $d
             forth.s:3605   .text:000000000000466e $t
             forth.s:3650   .text:00000000000046e5 $d
             forth.s:3650   .text:00000000000046e6 $t
             forth.s:3712   .text:00000000000047cb $d
             forth.s:3712   .text:00000000000047cc $t
             forth.s:3877   .text:0000000000004913 $d
             forth.s:3877   .text:0000000000004914 $t
             forth.s:3896   .text:0000000000004959 $d
             forth.s:3896   .text:000000000000495a $t
             forth.s:3933   .text:00000000000049b3 $d
             forth.s:3933   .text:00000000000049b4 $t
             forth.s:4008   .text:0000000000004ad5 $d
             forth.s:4008   .text:0000000000004ad6 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
