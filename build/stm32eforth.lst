ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0x400 
 203              	   .equ NVIC_STIR, 0xE00 
 204              	
 205              	/* TIMERS registers */
 206              	.equ TIM1_BASE_ADR,0x40010000
 207              	.equ TIM9_BASE_ADR,0x40010400
 208              	.equ TIM10_BASE_ADR,0x40010800
 209              	.equ TIM11_BASE_ADR,0x40010C00
 210              	
 211              	.equ TIM2_BASE_ADR,0x40000000
 212              	.equ TIM3_BASE_ADR,0x40000400
 213              	.equ TIM4_BASE_ADR,0x40000800
 214              	.equ TIM5_BASE_ADR,0x40000C00
 215              	
 216              	/* TIMER1 */
 217              	.equ TIM1_RCR,48 
 218              	.equ TIM1_BDTR,68 
 219              	
 220              	/* TIMER2..TIMER5 */
 221              	.equ TIM_CR1,0
 222              	.equ TIM_CR2,4
 223              	.equ TIM_SMCR,8
 224              	.equ TIM_DIER,12
 225              	.equ TIM_SR,16
 226              	.equ TIM_EGR,20
 227              	.equ TIM_CCMR1,24
 228              	.equ TIM_CCMR2,28
 229              	.equ TIM_CCER,32
 230              	.equ TIM_CNT,36
 231              	.equ TIM_PSC,40
 232              	.equ TIM_ARR,44
 233              	.equ TIM_CCR1,52
 234              	.equ TIM_CCR2,56
 235              	.equ TIM_CCR3,60
 236              	.equ TIM_CCR4,64
 237              	.equ TIM_DCR,72
 238              	.equ TIM_DMAR,76
 239              	.equ TIM2_OR,80
 240              	.equ TIM5_OR,80 
 241              	
 242              	/* SYSCFG registers */
 243              	.equ SYSCFG_BASE_ADR, 0x40013800
 244              	
 245              	.equ SYSCFG_MEMRMP,0
 246              	.equ SYSCFG_PMC,4
 247              	.equ SYSCFG_EXTICR1,8
 248              	.equ SYSCFG_EXTICR2,12
 249              	.equ SYSCFG_EXTICR3,16
 250              	.equ SYSCFG_EXTICR4,20
 251              	.equ SYSCFG_CMPCR,32
 252              	
 253              	/* EXTI registers */
 254              	.equ EXTI_BASE_ADR, 0x40013C00
 255              	
ARM GAS  forth.s 			page 6


 256              	.equ EXTI_IMR,0
 257              	.equ EXTI_EMR,4
 258              	.equ EXTI_RTSR,8
 259              	.equ EXTI_FTSR,12
 260              	.equ EXTI_SWIER,16
 261              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 7


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ SEED, 4    // prng seed 
  74              	  .equ TICKS, SEED+4  // millseconds counter
  75              	  .equ TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, TIMER+4  // boot program address
  77              	  .equ BASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, BASE+4   // temporary variable
  79              	  .equ SPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, SPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ FT_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
ARM GAS  forth.s 			page 8


 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.section .text, "ax", %progbits 
 124              		LF_\label:   // link field
 125              			.word link 
 126              			.equ link , . 
 127              		_\label: .byte \nlen    // name field
 128              			.ascii "\name"
 129              			.p2align 2 
 130              		CA_\label:   // code field address 
 131              			.word \label
 132              		\label:  // code
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 9


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
  32              	
  33              	/*************************************
ARM GAS  forth.s 			page 10


  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      kbd_isr         /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
ARM GAS  forth.s 			page 11


  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
ARM GAS  forth.s 			page 12


 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F047F8 		bl uart_puts 
 160 0006 31E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
ARM GAS  forth.s 			page 13


 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 199 0052 04F14400 		add r0,UP,#RX_QUEUE
 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 064D     		ldr r5,user_reboot_msg
 210 0068 00F014F8 		bl uart_puts 
 211              	reset_mcu: 
 212 006c 0348     		ldr r0,scb_adr 
 213 006e C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0070 41F00401 		orr r1,#(1<<2)
 215 0074 C0F2FA51 		movt r1,#SCB_VECTKEY
 216 0078 C160     		str r1,[r0,#SCB_AIRCR]
 217 007a FEE7     		b . 
 218              		.p2align 2 
 219              	scb_adr:
 220 007c 00ED00E0 		.word SCB_BASE_ADR 
 221              	user_reboot_msg:
 222 0080 84000000 		.word .+4
 223 0084 0D       		.byte 13 
 224 0085 0D757365 		.ascii "\ruser reboot!"
 224      72207265 
 224      626F6F74 
 224      21
 225 0092 00BF     		.p2align 2 
 226              	
 227              	   
 228              	// send counted string to uart 
 229              	// input: r5 string* 
 230              		.type uart_puts,%function 
 231              	uart_puts:
 232 0094 4FF48050 		_MOV32 r0,UART 
 232      C4F20100 
 233 009c 15F8011B 		ldrb r1,[r5],#1 // string length
 234 00a0 0940     		ands r1,r1
 235 00a2 0CD0     	1:	beq 9f 
 236 00a4 0268     	2:  ldr r2,[r0,#USART_SR]
 237 00a6 12F08002 		ands r2,#0x80 
 238 00aa FBD0     		beq 2b 	
 239 00ac 15F8012B 		ldrb r2,[r5],#1
 240 00b0 0271     		strb r2,[r0,#USART_DR]
 241 00b2 0139     		subs r1,r1,#1 
 242 00b4 F6D1     		bne 2b 
 243 00b6 0268     	3:	ldr r2,[r0,#USART_SR]
 244 00b8 12F04002 		ands r2,#(1<<6)
 245 00bc FBD0     		beq 3b 
 246 00be 7047     	9:  bx lr 
 247              	
ARM GAS  forth.s 			page 14


 248              	
 249              	/**************************************
 250              	  reset_handler execute at MCU reset
 251              	***************************************/
 252              	  .type  reset_handler, %function
 253              	  .p2align 2 
 254              	  .global reset_handler
 255              	reset_handler:
 256 00c0 4FF00000 		_MOV32 r0,RAM_END
 256      C2F20200 
 257 00c8 8546     		mov sp,r0  
 258 00ca FFF7FEFF 		bl	remap 
 259 00ce 00F033F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 260 00d2 00F093F8 		bl  uart_init
 261 00d6 FFF7FEFF 		bl	tv_init 
 262 00da 00F019F8 		bl forth_init 
 263              	/****** test code ******/
 264 00de 4FF40143 		_MOV32 T3,VID_BUFF 
 264      C2F20103 
 265 00e6 4FF4FA42 		mov T2,#32000
 266 00ea 80EA0000 		eor T0,T0 
 267 00ee 4FF00A01 	1:  mov T1,#10
 268 00f2 03F8010B 	2:	strb T0,[T3],#1
 269 00f6 0139     		subs T1,#1 
 270 00f8 FBD1     		bne 2b  
 271 00fa 00F11100 		add T0,#0x11
 272 00fe 10F00F0F 		tst T0,#15
 273 0102 01D1     		bne 3f
 274 0104 80EA0000 		eor T0,T0
 275 0108 0A3A     	3:  subs T2,#10 
 276 010a F0D1     		bne 1b 
 277              	/***** end test code ****/
 278 010c 02F040BB 		b COLD 
 279              	
 280              	
 281              	
 282              		.type forth_init, %function 
 283              	forth_init:
 284 0110 4FF00004 		_MOV32 UP,UPP 
 284      C2F20004 
 285 0118 4FF47F47 		_MOV32 DSP,SPP
 285      C2F20107 
 286 0120 4FF68078 		_MOV32 RSP,RPP
 286      C2F20108 
 287 0128 DFF8FCA1 	  ldr INX,=NEST
 288 012c 4AF0010A 	  orr INX,#1 
 289 0130 86EA0606 		EOR TOS,TOS  
 290 0134 7047     		_RET 
 291              	
 292              	/************
 293              	// test code 
 294              		.type echo, %function 
 295              	ECHO:
 296              		.word KEY,EMIT,BRANCH,echo  
 297              	
 298              		.type blink, %function 
 299              	blink:
ARM GAS  forth.s 			page 15


 300              		_MOV32 r0,GPIOC_BASE_ADR
 301              	0:	mov r4,#1<<LED_PIN 
 302              		str r4,[r0,GPIO_BSRR]
 303              		mov	r4,#500
 304              		str r4,[R3,#TIMER] 
 305              		_CALL timeout
 306              		mov r4,#1<<(LED_PIN+16)
 307              		str r4,[r0,#GPIO_BSRR]
 308              		mov	r4,#500
 309              		str r4,[R3,#TIMER] 
 310              		_CALL timeout 
 311              		b 0b 
 312              	
 313              		.type timeout, %function 
 314              	timeout:
 315              		ldr r4,[r3,#TIMER]
 316              		orrs r4,r4
 317              		bne timeout 
 318              		bx lr 
 319              	***** end test code *****/
 320              	
 321              	  .type init_devices, %function
 322 0136 00BF     	  .p2align 2 
 323              	init_devices:
 324              	/* init clock to HSE 96 Mhz */
 325              	/* set 3 wait states in FLASH_ACR_LATENCY */
 326 0138 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 326      C4F20200 
 327 0140 4FF00301 	  mov r1,#3 
 328 0144 0160     	  str r1,[r0,#FLASH_ACR]
 329              	/* configure clock for HSE, 25 Mhz crystal */
 330              	/* enable HSE in RCC_CR */
 331 0146 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 331      C4F20200 
 332 014e 0168     	  ldr r1,[r0,#RCC_CR]
 333 0150 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 334 0154 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 335              	/* wait HSERDY loop */
 336              	wait_hserdy:
 337 0156 0168     	  ldr r1,[r0,#RCC_CR]
 338 0158 11F4003F 	  tst r1,#(1<<17)
 339 015c FBD0     	  beq wait_hserdy
 340              	
 341              	/************************************************* 
 342              	   configure PLL  and source 
 343              	   SYSCLOCK=96 Mhz
 344              	   select HSE as  PLL source clock
 345              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 346              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 347              	****************************************************/
 348              	  /* set RCC_PLLCFGR */
 349 015e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 349      C4F20200 
 350 0166 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 350      C0F24041 
 351 016e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 352              	  /* enable PLL */
ARM GAS  forth.s 			page 16


 353 0170 0168     	  ldr r1,[r0,#RCC_CR]
 354 0172 41F08071 	  orr r1, #(1<<24)
 355 0176 0160     	  str r1,[r0,#RCC_CR]
 356              	/* wait for PLLRDY */
 357              	wait_pllrdy:
 358 0178 0168     	  ldr r1,[r0,#RCC_CR]
 359 017a 11F0007F 	  tst r1,#(1<<25)
 360 017e FBD1     	  bne wait_pllrdy 
 361              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 362 0180 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 362      C0F21901 
 363 0188 8160     	  str r1,[r0,#RCC_CFGR]
 364              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 365 018a 8168     	  ldr r1,[r0,#RCC_CFGR]
 366 018c 41F00201 	  orr r1,#2
 367 0190 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 368              	/* wait for SWS==2 */
 369              	wait_sws:
 370 0192 8168     	  ldr r1,[r0,#RCC_CFGR]
 371 0194 11F0080F 	  tst r1,#(2<<2)
 372 0198 FBD0     	  beq wait_sws
 373              	/* now sysclock is 96 Mhz */
 374              	
 375              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 376 019a 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 377 019e 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 378 01a0 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 379 01a4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 380              	/* configure GPIOC:13 as output for user LED */
 381 01a6 4FF40060 	  _MOV32 r0,LED_GPIO 
 381      C4F20200 
 382 01ae 0168     	  ldr r1,[r0,#GPIO_MODER]
 383 01b0 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 384 01b4 01EA0201 	  and r1,r1,r2
 385 01b8 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 386 01bc 0160     	  str r1,[r0,#GPIO_MODER]
 387 01be 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 388 01c0 41F40051 	  orr r1,#(1<<LED_PIN)
 389 01c4 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 390 01c6 81EA0101 	  eor r1,r1 
 391 01ca 8182     	  strh r1,[r0,#GPIO_ODR]	
 392              	/* enable compensation CELL for fast I/O */
 393 01cc 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 393      C4F20101 
 394 01d4 4FF00100 		mov r0,#1 
 395 01d8 0862     		str r0,[R1,#SYSCFG_CMPCR]
 396              	/* wait for ready bit */ 
 397 01da 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 398 01dc 10F4807F 	    tst r0,#(1<<8)
 399 01e0 FBD0     		beq 1b 	
 400              	
 401              	
 402              	/* configure systicks for 1msec ticks */
 403 01e2 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 403      CEF20000 
 404 01ea 47F2FF61 	  _MOV32 r1,95999 
 404      C0F20101 
ARM GAS  forth.s 			page 17


 405 01f2 4160     	  str r1,[r0,#STK_LOAD]
 406 01f4 4FF00701 	  mov r1,#7
 407 01f8 0160     	  str r1,[r0,STK_CTL]
 408 01fa 7047     	  _RET  
 409              	
 410              	/*******************************
 411              	  initialize UART peripheral 
 412              	********************************/
 413              		.type uart_init, %function
 414              	uart_init:
 415              	/* set GPIOA PIN 9, uart TX  */
 416 01fc 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 416      C4F20200 
 417 0204 0168     	  ldr r1,[r0,#GPIO_MODER]
 418 0206 6FF47012 	  mvn r2,#0xf<<(2*9)
 419 020a 01EA0201 	  and r1,r1,r2
 420 020e 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 421 0212 41EA0201 	  orr r1,r1,r2 
 422 0216 0160     	  str r1,[r0,#GPIO_MODER]
 423              	/* select alternate functions USART1==AF07 */ 
 424 0218 4FF4EE61 	  mov r1,#0x77<<4 
 425 021c 4162     	  str r1,[r0,#GPIO_AFRH]
 426              	/* configure USART1 registers */
 427 021e 4FF48050 	  _MOV32 r0,UART 
 427      C4F20100 
 428              	/* BAUD rate */
 429 0226 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 430 022a 8160     	  str r1,[r0,#USART_BRR]
 431 022c 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 432 0230 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 433              	/* enable interrupt in NVIC */
 434 0232 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 434      CEF20000 
 435 023a D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 436 023e 41F02001 	  orr r1,#32   
 437 0242 C0F80411 	  str r1,[r0,#NVIC_ISER1]
 438 0246 7047     	  bx lr 
 439              	
 440              	/* copy system variables to RAM */ 
 441              		.type remap, %function 
 442              	    .global remap 
 443              	remap:
 444              	// copy system to RAM 	
 445 0248 4FF00000 		_MOV32 r0,RAM_ADR 
 445      C2F20000 
 446 0250 3649     		ldr r1,=UZERO 
 447 0252 4FF0A002 		mov r2,#ULAST-UZERO 
 448 0256 02F10302 		add r2,r2,#3
 449 025a 22F00302 		and r2,r2,#~3 
 450 025e 51F8043B 	1:	ldr r3,[r1],#4 
 451 0262 40F8043B 		str r3,[r0],#4 
 452 0266 043A     		subs R2,#4 
 453 0268 F9D1     		bne 1b
 454              	// zero end of RAM 
 455 026a 4FF00002 		_MOV32 r2,RAM_END 
 455      C2F20202 
 456 0272 83EA0303 		eor r3,r3,r3 
ARM GAS  forth.s 			page 18


 457 0276 40F8043B 	2:  str r3,[r0],#4
 458 027a 9042     		cmp r0,r2 
 459 027c FBDB     		blt 2b 
 460 027e 4FF00004 		_MOV32 UP,RAM_ADR  
 460      C2F20004 
 461 0286 7047     		_RET 
 462              	
 463              	/******************************************************
 464              	*  COLD start moves the following to USER variables.
 465              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 466              	******************************************************/
 467              		.p2align 2
 468              	UZERO:
 469 0288 00000000 		.word 0  			/*Reserved */
 470 028c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 471 0290 00000000 		.word 0      /* TICKS */
 472 0294 00000000 	    .word 0     /* TIMER */
 473 0298 20270000 		.word HI  /*'BOOT */
 474 029c 0A000000 		.word BASEE 	/*BASE */
 475 02a0 00000000 		.word 0			/*tmp */
 476 02a4 00000000 		.word 0			/*SPAN */
 477 02a8 00000000 		.word 0			/*>IN */
 478 02ac 00000000 		.word 0			/*#TIB */
 479 02b0 00FF0120 		.word TIBB	/*TIBU */
 480 02b4 3C1C0000 		.word INTER	/*'EVAL */
 481 02b8 00000000 		.word 0			/*HLD */
 482 02bc 88270000 		.word _LASTN	/*CONTEXT */
 483 02c0 E4270000 		.word CTOP  	/* FCP end of system dictionnary */
 484 02c4 5C250020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 485 02c8 88270000 		.word _LASTN	/*LAST word in dictionary */
 486 02cc 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 486      00000000 
 486      00000000 
 486      00000000 
 487 02dc 00000000 		.word 0  /* RX_HEAD */
 488 02e0 00000000 		.word 0  /* RX_TAIL */ 
 489 02e4 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 490 02e8 00000000 		.word 0  /* VID_STATE, video state */  
 491 02ec 00000000 	    .word 0  /* VID_FIELD, field */
 492 02f0 00810120 		.word VID_BUFF /* video_buffer address */ 
 493 02f4 00000000 	    .word 0 /* kbd struct */
 494 02f8 00000000 		.space KBD_QUEUE_SIZE,0  
 494      00000000 
 494      00000000 
 494      00000000 
 495 0308 00000000 		.word 0  /* kbd queue head */
 496 030c 00000000 		.word 0 /* kbd queue tail */ 
 497 0310 00000000 	    .word 0 /* tv cursor row */
 498 0314 00000000 	    .word 0 /* tv cursor column */ 
 499 0318 00000000 	    .word 0 /* tv back color */
 500 031c 07000000 	    .word 7 /* tv font color */
 501 0320 00000000 	    .word 0,0 
 501      00000000 
 502              	ULAST:
 503 0328 E4050000 	
 503      88020000 
   1              	/*****************************************************
ARM GAS  forth.s 			page 19


   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	//  .include "macros.inc"
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ HRES, 320  // horizontal resolution
  37              	  .equ VRES, 200   // vertical resolution
  38              	  .equ BPP, 4     // bits per pixel
  39              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  40              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  41              	  .equ LEFT_MARGIN, (750) 
  42              	  .equ VIDEO_FIRST_LINE, 40
  43              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  44              	  .equ VIDEO_DELAY,(FCLK/1000000*10-1) // 10µSec
  45              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  46              	
  47              	// video state 
  48              	  .equ ST_VSYNC, 0 
  49              	  .equ ST_PREVID,1 
  50              	  .equ ST_VIDEO,2 
  51              	  .equ ST_POSTVID,3    
  52              	// field 
  53              	   .equ ODD_FIELD,0 
  54              	   .equ EVEN_FIELD,-1
  55              	
  56              	/*******************************************************
  57              	NOTES:
  58              	 1) Values computed for a 96Mhz sysclock 
ARM GAS  forth.s 			page 20


  59              	 2) Video sync output on PB1 use T3_CH4
  60              	 3) video out trigger TIMER3 CH3 
  61              	********************************************************/
  62              	
  63              	/**************************************
  64              	  initialize TIMER3 CH4 to generate tv_out
  65              	  synchronization signal.
  66              	**************************************/ 
  67              	  _GBL_FUNC tv_init
  68              	// configure PA0:3 as OUTPUT_OD 
  69 0330 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  69      C4F20202 
  70 0338 1168     	  ldr r1,[r2,#GPIO_MODER]
  71 033a 4FF05500 	  mov r0,#0x55
  72 033e 41EA0001 	  orr r1,r0
  73 0342 1160     	  str r1,[r2,#GPIO_MODER]
  74              	//  mov r0,#15 
  75              	//  ldr r1,[r2,#GPIO_OTYPER]
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OTYPER]
  78              	//  str r1,[r2,#GPIO_BSRR]
  79              	//  ldr r1,[r2,GPIO_OSPEEDR]
  80              	//  lsl r0,#1 // fast speed  
  81              	//  orr r1,r0 
  82              	//  str r1,[r2,#GPIO_OSPEEDR]
  83 0344 80EA0000 	  eor r0,r0 
  84 0348 5061     	  str r0,[r2,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 034a 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  88 034e 4FF00800 	  mov r0,(2<<2) // alternate function output 
  89 0352 1168     	  ldr r1,[r2,#GPIO_MODER]
  90 0354 41EA0001 	  orr r1,r0 
  91 0358 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  92 035a 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  93 035c 41EA0001 	  orr r1,r0 
  94 0360 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  95 0362 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  96 0366 116A     	  ldr r1,[r2,#GPIO_AFRL]
  97 0368 41EA0001 	  orr r1,r0 
  98 036c 1162     	  str r1,[r2,#GPIO_AFRL]
  99              	// enable peripheral clock 
 100 036e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 100      C4F20202 
 101 0376 4FF00200 	  mov r0,#2 
 102 037a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 103 037c 41EA0001 	  orr r1,r0 
 104 0380 1164     	  str r1,[r2,#RCC_APB1ENR]
 105              	// configure TIMER3   
 106 0382 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 106      C4F20002 
 107 038a 41F2D470 	  mov r0,#HPER
 108 038e D062     	  str r0,[r2,#TIM_ARR]
 109 0390 40F2BF30 	  mov r0,#VIDEO_DELAY 
 110 0394 D063     	  str r0,[r2,#TIM_CCR3]
 111 0396 4FF4E170 	  mov r0,#HPULSE 
 112 039a 1064     	  str r0,[r2,#TIM_CCR4]  
ARM GAS  forth.s 			page 21


 113 039c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 114 03a0 D061     	  str r0,[r2,#TIM_CCMR2]
 115 03a2 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 116 03a6 1062     	  str r0,[r2,#TIM_CCER]
 117 03a8 4FF00100 	  mov r0,#1 
 118 03ac D060     	  str r0,[r2,#TIM_DIER]
 119 03ae 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 120              	// enable interrupt in NVIC controller 
 121 03b0 4FEA4070 	  lsl r0,#29 // IRQ29
 122 03b4 4FF46042 	  _MOV32 r2,NVIC_BASE_ADR
 122      CEF20002 
 123 03bc D2F80011 	  ldr r1,[r2,#NVIC_ISER0]
 124 03c0 41EA0001 	  orr r1,r0 
 125 03c4 C2F80011 	  str r1,[r2,#NVIC_ISER0]
 126 03c8 7047     	  _RET
 127              	
 128              	/*************************************
 129              	  TIMER3 interrupt for tv_out
 130              	  T1 line # 
 131              	  T0 TIM3_BASE_ADR 
 132              	*************************************/
 133 03ca 00BF     	  _GBL_FUNC tv_out_isr
 134 03cc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 134      C4F20000 
 135 03d4 81EA0101 	  eor T1,T1
 136 03d8 0161     	  str T1,[T0,#TIM_SR]
 137 03da E16D     	  ldr T1,[UP,#VID_CNTR]
 138 03dc 01F10101 	  add T1,#1 
 139 03e0 E165     	  str T1,[UP,#VID_CNTR]
 140              	/** machine state cases **/
 141 03e2 226E     	  ldr T2,[UP,#VID_STATE]
 142 03e4 002A     	  cmp T2,#ST_VSYNC 
 143 03e6 07D0     	  beq state_vsync
 144 03e8 012A     	  cmp T2,#ST_PREVID 
 145 03ea 2FD0     	  beq state_pre_video 
 146 03ec 022A     	  cmp T2,#ST_VIDEO 
 147 03ee 36D0     	  beq state_video_out 
 148 03f0 032A     	  cmp T2,#ST_POSTVID 
 149 03f2 60D0     	  beq state_post_video
 150 03f4 FFF7FEBF 	  b default_handler // invalid state 
 151              	/*** vertical sync state **/
 152              	state_vsync:
 153 03f8 0129     	  cmp T1,#1
 154 03fa 06D1     	  bne 1f 
 155              	/****** set vertical pre-sync  *****/
 156 03fc 4FF0DB01 	  mov T1,#SERRATION
 157 0400 0164     	  str T1,[T0,#TIM_CCR4]
 158 0402 40F6E931 	  mov T1,#SYNC_LINE 
 159 0406 C162     	  str T1,[T0,#TIM_ARR]
 160 0408 68E0     	  b tv_isr_exit 
 161 040a 0729     	1: cmp T1,#7
 162 040c 03D1     	  bne 2f 
 163              	// vertical sync pulse   
 164 040e 40F62821 	  mov T1,#VSYNC_PULSE
 165 0412 0164     	  str T1,[T0,#TIM_CCR4]
 166 0414 62E0     	  b tv_isr_exit
 167 0416 0D29     	2: cmp T1,#13
ARM GAS  forth.s 			page 22


 168 0418 03D1     	   bne 3f  
 169              	// set vertical post-sync    
 170 041a 4FF0DB01 	   mov T1,#SERRATION 
 171 041e 0164     	   str T1,[T0,#TIM_CCR4]
 172 0420 5CE0     	   b tv_isr_exit   
 173 0422 1229     	3: cmp T1,#18
 174 0424 03D1     	   bne 4f 
 175              	// if even field full line  
 176 0426 616E     	   ldr T1,[UP,#VID_FIELD]
 177 0428 0029     	   cmp T1,#ODD_FIELD  
 178 042a 57D0     	   beq tv_isr_exit 
 179 042c 01E0     	   b sync_end 
 180 042e 1329     	4: cmp T1,#19 
 181 0430 54D1     	   bne tv_isr_exit
 182              	sync_end: 
 183 0432 4FF00901 	   mov T1,#9
 184 0436 E165     	   str T1,[UP,#VID_CNTR]
 185 0438 4FF4E171 	   mov T1,#HPULSE 
 186 043c 0164     	   str T1,[T0,#TIM_CCR4] 
 187 043e 41F2D471 	   mov T1,#HPER 
 188 0442 C162     	   str T1,[T0,#TIM_ARR] 
 189 0444 4FF00101 	   mov T1,#ST_PREVID 
 190 0448 2166     	   str T1,[UP,#VID_STATE]
 191 044a 47E0     	   b tv_isr_exit 
 192              	/*****************************/
 193              	state_pre_video:
 194 044c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 195 044e 45D4     	   bmi tv_isr_exit 
 196 0450 4FF00201 	   mov T1,#ST_VIDEO 
 197 0454 2166     	   str T1,[UP,#VID_STATE]
 198 0456 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 199 045a C160     	   str T1,[T0,#TIM_DIER]
 200 045c 3EE0     	   b tv_isr_exit 
 201              	/**************************
 202              	    VIDEO OUTPUT 
 203              	**************************/   
 204              	state_video_out:
 205 045e F029     	   cmp T1,#VIDEO_LAST_LINE 
 206 0460 06D4     	   bmi 1f 
 207 0462 4FF00301 	   mov T1,#ST_POSTVID 
 208 0466 2166     	   str T1,[UP,#VID_STATE]
 209 0468 4FF00101 	   mov T1,#1 
 210 046c C160     	   str T1,[T0,#TIM_DIER]
 211 046e 35E0     	   b tv_isr_exit 
 212              	1: // video output
 213 0470 A06E     	   ldr T0,[UP,#VID_BUFFER]
 214 0472 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 215 0476 4FF0A003 	   mov T3,#160
 216 047a 03FB01F1 	   mul T1,T3 
 217 047e 0844     	   add T0,T1  
 218 0480 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 218      C4F20201 
 219 0488 0278     	2: ldrb T2,[T0]
 220 048a 4FEA1212 	   lsr T2,#4 
 221 048e 4A61     	   str T2,[T1,#GPIO_ODR]
 222 0490 AFF30080 	   nop.w
 223 0494 AFF30080 	   nop.w 
ARM GAS  forth.s 			page 23


 224 0498 10F8012B 	   ldrb T2,[T0],#1
 225 049c 02F00F02 	   and T2,#15 
 226 04a0 4A61     	   str T2,[T1,#GPIO_ODR]
 227 04a2 AFF30080 	   nop.w
 228 04a6 AFF30080 	   nop.w  
 229 04aa 013B     	   subs T3,#1
 230 04ac ECD1     	   bne 2b  
 231 04ae 4FF47022 	   mov T2,#(15<<16) 
 232 04b2 8A61     	   str T2,[T1,#GPIO_BSRR]
 233 04b4 12E0     	   b tv_isr_exit 
 234              	state_post_video:
 235 04b6 4FF48372 	   mov T2,#262
 236 04ba 9142     	   cmp T1,T2
 237 04bc 0ED4     	   bmi tv_isr_exit     
 238              	// odd field line 262 half line 
 239 04be 616E     	   ldr T1,[UP,VID_FIELD]
 240 04c0 11B9     	   cbnz T1, frame_end 
 241 04c2 40F6E931 	   mov T1,#SYNC_LINE
 242 04c6 C162     	   str T1,[T0,#TIM_ARR]      
 243              	frame_end: 
 244 04c8 4FF00001 	   mov T1,#ST_VSYNC 
 245 04cc 2166     	   str T1,[UP,#VID_STATE]
 246 04ce 81EA0101 	   eor T1,T1 
 247 04d2 E165     	   str T1,[UP,#VID_CNTR]
 248 04d4 616E     	   ldr T1,[UP,#VID_FIELD]
 249 04d6 6FEA0101 	   mvn T1,T1  
 250 04da 6166     	   str T1,[UP,#VID_FIELD]
 251              	tv_isr_exit: 
 252 04dc 7047     	   _RET   
 253              	
 254              	/**********************************
 255              	   put_char 
 256              	   draw character in video buffer
 257              	   input:
 258              	      r0 character 
 259              	
 260              	**********************************/
 261 04de 00BF     	      _FUNC put_char 
 262              	
 263 04e0 7047     	      _RET 
 264              	
 265              	
 266              		.section .rodata 
 267              		.p2align 2
 268              	/********************************************
 269              	    TV font  ASCII 6 pixels x 8 pixels 
 270              	********************************************/
 271              	  .equ CHAR_WIDTH, 6 
 272              	  .equ CHAR_HEIGHT, 8
 273              	  
 274              	font_6x8:
 275 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 275      00000000 
 276 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 276      20002000 
 277 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 277      00000000 
ARM GAS  forth.s 			page 24


 278 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 278      F8505000 
 279 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 279      28F02000 
 280 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 280      40981800 
 281 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 281      A8906800 
 282 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 282      00000000 
 283 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 283      40201000 
 284 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 284      10204000 
 285 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 285      A8200000 
 286 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 286      20200000 
 287 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 287      60204000 
 288 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 288      00000000 
 289 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 289      00606000 
 290 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 290      40800000 
 291 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 291      C8887000 
 292 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 292      2020F800 
 293 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 293      4080F800 
 294 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 294      0808F000 
 295 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 295      F8101000 
 296 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 296      0808F000 
 297 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 297      88887000 
 298 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 298      40404000 
 299 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 299      88887000 
 300 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 300      08087000 
 301 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 301      60600000 
 302 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 302      60204000 
 303 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 303      40201000 
 304 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 304      F8000000 
 305 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 305      10204000 
 306 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
ARM GAS  forth.s 			page 25


 306      20002000 
 307 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 307      A8A87000 
 308 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 308      88888800 
 309 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 309      8888F000 
 310 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 310      80807800 
 311 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 311      8888F000 
 312 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 312      8080F800 
 313 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 313      80808000 
 314 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 314      88887000 
 315 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 315      88888800 
 316 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 316      20207000 
 317 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 317      08906000 
 318 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 318      A0908800 
 319 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 319      8080F800 
 320 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 320      88888800 
 321 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 321      98888800 
 322 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 322      88887000 
 323 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 323      80808000 
 324 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 324      A8987800 
 325 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 325      A0908800 
 326 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 326      0808F000 
 327 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 327      20202000 
 328 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 328      88887000 
 329 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 329      88502000 
 330 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 330      A8D88800 
 331 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 331      50888800 
 332 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 332      20202000 
 333 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 333      8080F800 
 334 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 334      40406000 
ARM GAS  forth.s 			page 26


 335 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 335      10080000 
 336 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 336      08081800 
 337 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 337      00000000 
 338 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 338      0000F800 
 339 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 339      00000000 
 340 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 340      78887800 
 341 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 341      C888F000 
 342 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 342      80887000 
 343 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 343      98887800 
 344 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 344      F8807000 
 345 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 345      40404000 
 346 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 346      88780870 
 347 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 347      88888800 
 348 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 348      20202000 
 349 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 349      10906000 
 350 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 350      C0A09000 
 351 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 351      20207000 
 352 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 352      A8888800 
 353 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 353      88888800 
 354 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 354      88887000 
 355 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 355      88F08080 
 356 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 356      90B05018 
 357 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 357      80808000 
 358 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 358      7008F000 
 359 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 359      40483000 
 360 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 360      88986800 
 361 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 361      88502000 
 362 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 362      A8A85000 
 363 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
ARM GAS  forth.s 			page 27


 363      20508800 
 364 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 364      88780870 
 365 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 365      2040F800 
 366 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 366      40402000 
 367 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 367      20202000 
 368 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 368      20204000 
 369 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 369      10000000 
 370 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 370      FCFCFCFC 
 371 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 371      10204000 
 372 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 372      40201000 
 373 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 373      20200000 
 374 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 374      A8702000 
 375 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 375      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
ARM GAS  forth.s 			page 28


  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte ones; count bits to 1 
  44              	    }
  45              	
  46              	flags 
  47              	   :0 -> parity error flags 
  48              	**********************************/
  49              	    .equ KBD_F_PAR_ERR,1
  50              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  51              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  52              	    .equ KBD_BITCNTR,KBD_STRUCT 
  53              	    .equ KBD_ONES,KBD_STRUCT+3 
  54              	
  55              	/**********************************
  56              	    kbd_isr
  57              	    interrupt service routine 
  58              	    EXTI0 connected to keyboard 
  59              	    clock signal and triggered 
  60              	    on falling edge 
  61              	**********************************/
  62 04e2 00BF     	    _GBL_FUNC kbd_isr 
  63 04e4 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  63      C4F20102 
  64 04ec 4FF00100 	    mov r0,#1 
  65 04f0 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  66 04f2 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  66      C4F20202 
  67 04fa 108A     	    ldrh r0,[r2,#GPIO_IDR]
  68 04fc 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  69 0500 0029     	    cmp r1,#0 
  70 0502 19D0     	    beq start_bit 
  71 0504 0929     	    cmp r1,#9 
  72 0506 22D0     	    beq parity_bit 
  73 0508 0A29     	    cmp r1,#10 
  74 050a 31D0     	    beq stop_bit 
  75 050c 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  76 0510 4FEA5202 	    lsr r2,#1 
  77 0514 10F4805F 	    tst r0,#(1<<12) // data bit 
  78 0518 07D0     	    beq 1f 
  79 051a 42F08002 	    orr r2,#(1<<7)
  80 051e 94F86F00 	    ldrb r0,[UP,#KBD_ONES]
  81 0522 00F10100 	    add r0,#1 
  82 0526 84F86F00 	    strb r0,[UP,#KBD_ONES]
  83 052a 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  84 052e 01F10101 	    add r1,#1 
  85 0532 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  86 0536 31E0     	    b 9f         
  87              	start_bit:
ARM GAS  forth.s 			page 29


  88 0538 01F10101 	    add r1,#1 
  89 053c 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  90 0540 81EA0101 	    eor r1,r1 
  91 0544 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  92 0548 84F86F10 	    strb r1,[UP,#KBD_ONES]
  93 054c 26E0     	    b 9f 
  94              	parity_bit:
  95 054e D4F86F10 	    ldr r1,[UP,#KBD_ONES]
  96 0552 10F4805F 	    tst r0,#(1<<12)
  97 0556 01D0     	    beq 1f 
  98 0558 01F10101 	    add r1,#1 
  99 055c 11F0010F 	1:  tst r1,#1 
 100 0560 1CD1     	    bne 9f      
 101              	2: // parity error
 102 0562 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 103 0566 41F00101 	    orr r1,#KBD_F_PAR_ERR // parity error flags 
 104 056a 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 105 056e 15E0     	    b 9f      
 106              	stop_bit:
 107 0570 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 108 0574 11F0010F 	    tst r1,#KBD_F_PAR_ERR 
 109 0578 10D1     	    bne 9f // drop this code 
 110              	// store code in queue 
 111 057a D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 112 057e 04F17002 	    add r2,UP,#KBD_QUEUE
 113 0582 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 114 0586 5054     	    strb r0,[r2,r1]
 115 0588 01F10101 	    add r1,#1
 116 058c 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 117 0590 84F88410 	    strb r1,[UP,#KBD_QTAIL]
 118 0594 80EA0000 	    eor r0,r0 
 119 0598 A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 120 059c 7047     	9:  _RET 
 121              	    
 122              	/**********************************
 123              	    kbd_init 
 124              	    initialize keyboard 
 125              	    PS2 clock on PA11 
 126              	    PS2 data on PA12 
 127              	**********************************/
 128 059e 00BF     	    _GBL_FUNC kbd_init 
 129              	// configure EXTI0 on pin PA11 
 130 05a0 4FF46052 	   _MOV32 r2,SYSCFG_BASE_ADR
 130      C4F20102 
 131 05a8 4FF00B00 	   mov r0,#11 
 132 05ac 9060     	   str r0,[R2,#SYSCFG_EXTICR1]
 133              	// interrupt triggered on falling edge 
 134 05ae 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 134      C4F20102 
 135 05b6 4FF00100 	   mov r0,#(1<<0)
 136 05ba 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI0 
 137 05bc D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 138              	// enable interrupt EXIT0 in NVIC 
 139 05be 4FF04000 	   mov r0,#(1<<6) // IRQ6
 140 05c2 4FF46042 	   _MOV32 r2,NVIC_BASE_ADR
 140      CEF20002 
 141 05ca D2F80011 	   ldr r1,[r2,#NVIC_ISER0]
ARM GAS  forth.s 			page 30


 142 05ce 41EA0001 	   orr r1,r0 
 143 05d2 C2F80011 	   str r1,[r2,#NVIC_ISER0]
 144 05d6 7047     	   _RET 
 145              	
 146              	
 147              	
 148              	
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
ARM GAS  forth.s 			page 31


  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
  64              		.include "stm32f411ce.inc"
  65              	 
  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 05d8 47F8046D 		_PUSH
  77 05dc 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 05de 57F8046B 		_POP 
  82 05e2 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 05e4 48F804CD 		STMFD	RSP!,{IP}
  87 05e8 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 05ec 5CF8045B 		LDR WP,[IP],#4 
  91 05f0 2847     		BX WP  
  92              	UNNEST:
  93 05f2 58F804CB 		LDMFD RSP!,{IP}
  94 05f6 5CF8045B 		LDR WP,[IP],#4 
  95 05fa 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 05fc 04F13C01 		add T1,UP,#USER_CTOP 
 107 0600 0968     		ldr T1,[T1]
ARM GAS  forth.s 			page 32


 108 0602 44F24072 		mov T2,#0x4700+(8<<3)
 109 0606 21F8022B 		strh T2,[T1],#2
 110 060a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 060e 21F8022B 		strh T2,[T1],#2 
 112 0612 04F13C02 		add T2,UP,#USER_CTOP 
 113 0616 1160     		str T1,[T2]
 114 0618 E8E7     		_NEXT  
 115              	
 116              	// RANDOM ( n+ -- {0..n+ - 1} )
 117              	// return pseudo random number 
 118              	// REF: https://en.wikipedia.org/wiki/Xorshift
 119              	
 120 061a 00000000 		.word 0
 121 061e 06       	_RAND: .byte 6
 122 061f 52414E44 		.ascii "RANDOM"
 122      4F4D
 123 0625 0000BF   		.p2align 2 
 124              	RAND:
 125 0628 504700BF 		_NEST
 126 062c F50A0000 		_ADR ABSS   
 127 0630 05000000 		_ADR SEED 
 128 0634 E5070000 		_ADR AT 
 129 0638 91080000 		_ADR DUPP 
 130 063c 5D070000 		_DOLIT 13
 130      0D000000 
 131 0644 45090000 		_ADR LSHIFT 
 132 0648 FD080000 		_ADR XORR  
 133 064c 91080000 		_ADR DUPP 
 134 0650 5D070000 		_DOLIT 17 
 134      11000000 
 135 0658 2D090000 		_ADR RSHIFT 
 136 065c FD080000 		_ADR XORR 
 137 0660 91080000 		_ADR DUPP
 138 0664 5D070000 		_DOLIT 5 
 138      05000000 
 139 066c 45090000 		_ADR LSHIFT 
 140 0670 FD080000 		_ADR XORR  
 141 0674 91080000 		_ADR DUPP 
 142 0678 05000000 		_ADR SEED 
 143 067c D1070000 		_ADR STORE 
 144 0680 5D070000 		_DOLIT 0x7FFFFFFF
 144      FFFFFF7F 
 145 0688 D5080000 		_ADR ANDD 
 146 068c A1080000 		_ADR SWAP 
 147 0690 B10E0000 		_ADR MODD 
 148 0694 F3050000 		_UNNEST 
 149              	
 150              	
 151              	// PAUSE ( u -- ) 
 152              	// suspend execution for u milliseconds
 153 0698 1E060000 		.word _RAND
 154 069c 05       	_PAUSE: .byte 5
 155 069d 50415553 		.ascii "PAUSE"
 155      45
 156 06a2 00BF     		.p2align 2
 157              	PAUSE:
 158 06a4 504700BF 		_NEST 
ARM GAS  forth.s 			page 33


 159 06a8 0D000000 		_ADR TIMER 
 160 06ac D1070000 		_ADR STORE 
 161              	PAUSE_LOOP:
 162 06b0 0D000000 		_ADR TIMER 
 163 06b4 E5070000 		_ADR AT 
 164 06b8 9F070000 		_QBRAN PAUSE_EXIT 
 164      C8060000 
 165 06c0 B3070000 		_BRAN PAUSE_LOOP 
 165      B0060000 
 166              	PAUSE_EXIT: 		
 167 06c8 F3050000 		_UNNEST 
 168              	
 169              	//  ULED ( T|F -- )
 170              	// control user LED, -1 ON, 0 OFF  
 171 06cc 9C060000 		.word _PAUSE
 172 06d0 04       	_ULED: .byte 4
 173 06d1 554C4544 		.ascii "ULED"
 174 06d5 0000BF   		.p2align 2
 175              		.type ULED, %function 
 176              	ULED:
 177 06d8 4FF40050 		mov T0,#(1<<LED_PIN)
 178 06dc 4FF40061 		_MOV32 T1,LED_GPIO 
 178      C4F20201 
 179 06e4 3600     		movs TOS,TOS 
 180 06e6 57F8046B 		_POP
 181 06ea 03D0     		beq ULED_OFF
 182 06ec 4FEA0040 		lsl T0,#16 
 183 06f0 8861     		str T0,[T1,#GPIO_BSRR]
 184 06f2 7BE7     		_NEXT 
 185              	ULED_OFF:
 186 06f4 8861     		str T0,[T1,#GPIO_BSRR]
 187 06f6 79E7     		_NEXT    
 188              	
 189              	//    ?KEY	 ( -- c T | F )
 190              	// 	Return input character and true, or a false if no input.
 191 06f8 D0060000 		.word	_ULED
 192 06fc 04       	_QRX:	.byte   4
 193 06fd 3F4B4559 		.ascii "?KEY"
 194 0701 0000BF   		.p2align 2 
 195              	QKEY:
 196              	QRX: 
 197 0704 47F8046D 		_PUSH
 198 0708 A06D     		ldr T0,[UP,#RX_TAIL] 
 199 070a 616D     		ldr T1,[UP,#RX_HEAD]
 200 070c 90EA0106 		eors TOS,T0,T1 
 201 0710 0CD0     		beq 1f
 202 0712 04F14400 		add T0,UP,#RX_QUEUE 
 203 0716 0844     		add T0,T1 
 204 0718 0678     		ldrb TOS,[T0]
 205 071a 01F10101 		add T1,#1 
 206 071e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 207 0722 6165     		str T1,[UP,#RX_HEAD]
 208 0724 47F8046D 		_PUSH 
 209 0728 4FF0FF36 		mov TOS,#-1
 210 072c 5EE7     	1:	_NEXT 
 211              	
 212              	//    TX!	 ( c -- )
ARM GAS  forth.s 			page 34


 213              	// 	Send character c to the output device.
 214              	
 215 072e FC060000 		.word	_QRX
 216 0732 04       	_TXSTO:	.byte 4
 217 0733 454D4954 		.ascii "EMIT"
 218 0737 00       		.p2align 2 	
 219              	TXSTO:
 220              	EMIT:
 221              	TECHO:
 222 0738 4FF48055 		_MOV32 WP,UART 
 222      C4F20105 
 223 0740 2868     	1:  ldr T0,[WP,#USART_SR]
 224 0742 10F0800F 	    tst T0,#0x80 // TXE flag 
 225 0746 FBD0     		beq 1b 
 226 0748 2E71     		strb TOS,[WP,#USART_DR]	 
 227 074a 57F8046B 		_POP
 228 074e 4DE7     		_NEXT 
 229              		
 230              	/***************
 231              	//  The kernel
 232              	***************/
 233              	
 234              	//    NOP	( -- )
 235              	// 	do nothing.
 236              	
 237 0750 32070000 		.word	_TXSTO
 238 0754 03       	_NOP:	.byte   3
 239 0755 4E4F50   		.ascii "NOP"
 240              		.p2align 2 	
 241              	NOP:
 242 0758 48E7     		_NEXT 
 243              	 
 244              	
 245              	//    doLIT	( -- w )
 246              	// 	Push an inline literal.
 247              	
 248              	// 	.word	_NOP
 249              	// _LIT	.byte   COMPO+5
 250              	// 	.ascii "doLIT"
 251 075a 00BF     	 	.p2align 2 	
 252              	DOLIT:
 253 075c 47F8046D 		_PUSH				//  store TOS on data stack
 254 0760 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 255 0764 42E7     		_NEXT 
 256              	
 257              	//    EXECUTE	( ca -- )
 258              	// 	Execute the word at ca.
 259              	
 260 0766 54070000 		.word	_NOP
 261 076a 07       	_EXECU:	.byte   7
 262 076b 45584543 		.ascii "EXECUTE"
 262      555445
 263 0772 00BF     		.p2align 2 	
 264              	EXECU: 
 265 0774 46F00105 		ORR	WP,TOS,#1 
 266 0778 57F8046B 		_POP
 267 077c 2847     		BX WP 
ARM GAS  forth.s 			page 35


 268 077e 35E7     		_NEXT 
 269              	
 270              	//    next	( -- ) counter on R:
 271              	// 	Run time code for the single index loop.
 272              	// 	: next ( -- ) \ hilevel model
 273              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 274              	
 275              	// 	.word	_EXECU
 276              	// _DONXT	.byte   COMPO+4
 277              	// 	.ascii "next"
 278              	// 	.p2align 2 	
 279              	DONXT:
 280 0780 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 281 0784 22B9     		CBNZ T2,NEXT1 
 282              		/* loop done */
 283 0786 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 284 078a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 285 078e 2DE7     		_NEXT
 286              	NEXT1:
 287              		/* decrement loop counter */
 288 0790 A2F10102 		SUB	T2,T2,#1
 289 0794 C8F80020 		STR	T2,[RSP]
 290 0798 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 291 079c 26E7     		_NEXT 
 292              	
 293              	//    ?branch	( f -- )
 294              	// 	Branch if flag is zero.
 295              	
 296              	// 	.word	_DONXT
 297              	// _QBRAN	.byte   COMPO+7
 298              	// 	.ascii "?branch"
 299              	// 	.p2align 2 	
 300              	QBRAN:
 301 079e 3600     		MOVS	TOS,TOS
 302 07a0 57F8046B 		_POP
 303 07a4 02D1     		BNE	QBRAN1
 304 07a6 DCF800C0 		LDR	IP,[IP]
 305 07aa 1FE7     		_NEXT
 306              	QBRAN1:
 307 07ac 0CF1040C 	 	ADD	IP,IP,#4
 308 07b0 1CE7     		_NEXT
 309              	
 310              	//    branch	( -- )
 311              	// 	Branch to an inline address.
 312              	
 313              	// 	.word	_QBRAN
 314              	// _BRAN	.byte   COMPO+6
 315              	// 	.ascii "branch"
 316              	// 	.p2align 2 	
 317              	BRAN:
 318 07b2 DCF800C0 		LDR	IP,[IP]
 319 07b6 19E7     		_NEXT
 320              	
 321              	//    EXIT	(  -- )
 322              	// 	Exit the currently executing command.
 323              	
 324 07b8 6A070000 		.word	_EXECU
ARM GAS  forth.s 			page 36


 325 07bc 04       	_EXIT:	.byte   4
 326 07bd 45584954 		.ascii "EXIT"
 327 07c1 0000BF   		.p2align 2 	
 328              	EXIT:
 329 07c4 F3050000 		_UNNEST
 330              	
 331              	//    !	   ( w a -- )
 332              	// 	Pop the data stack to memory.
 333              	
 334 07c8 BC070000 		.word	_EXIT
 335 07cc 01       	_STORE:	.byte   1
 336 07cd 21       		.ascii "!"
 337 07ce 00BF     		.p2align 2 	
 338              	STORE:
 339 07d0 57F8045B 		LDR	WP,[DSP],#4
 340 07d4 3560     		STR	WP,[TOS]
 341 07d6 57F8046B 		_POP
 342 07da 07E7     		_NEXT 
 343              	
 344              	//    @	   ( a -- w )
 345              	// 	Push memory location to the data stack.
 346              	
 347 07dc CC070000 		.word	_STORE
 348 07e0 01       	_AT:	.byte   1
 349 07e1 40       		.ascii "@"
 350 07e2 00BF     		.p2align 2 	
 351              	AT:
 352 07e4 3668     		LDR	TOS,[TOS]
 353 07e6 01E7     		_NEXT 
 354              	
 355              	//    C!	  ( c b -- )
 356              	// 	Pop the data stack to byte memory.
 357              	
 358 07e8 E0070000 		.word	_AT
 359 07ec 02       	_CSTOR:	.byte   2
 360 07ed 4321     		.ascii "C!"
 361 07ef 00       		.p2align 2 	
 362              	CSTOR:
 363 07f0 57F8045B 		LDR	WP,[DSP],#4
 364 07f4 3570     		STRB WP,[TOS]
 365 07f6 57F8046B 		_POP
 366 07fa F7E6     		_NEXT
 367              	
 368              	//    C@	  ( b -- c )
 369              	// 	Push byte memory location to the data stack.
 370              	
 371 07fc EC070000 		.word	_CSTOR
 372 0800 02       	_CAT:	.byte   2
 373 0801 4340     		.ascii "C@"
 374 0803 00       		.p2align 2 	
 375              	CAT:
 376 0804 3678     		LDRB	TOS,[TOS]
 377 0806 F1E6     		_NEXT 
 378              	
 379              	//    R>	  ( -- w )
 380              	// 	Pop the return stack to the data stack.
 381              	
ARM GAS  forth.s 			page 37


 382 0808 00080000 		.word	_CAT
 383 080c 02       	_RFROM:	.byte   2
 384 080d 523E     		.ascii "R>"
 385 080f 00       		.p2align 2 	
 386              	RFROM:
 387 0810 47F8046D 		_PUSH
 388 0814 58F8046B 		LDR	TOS,[RSP],#4
 389 0818 E8E6     		_NEXT 
 390              	
 391              	//    R@	  ( -- w )
 392              	// 	Copy top of return stack to the data stack.
 393              	
 394 081a 0C080000 		.word	_RFROM
 395 081e 02       	_RAT:	.byte   2
 396 081f 5240     		.ascii "R@"
 397 0821 0000BF   		.p2align 2 	
 398              	RAT:
 399 0824 47F8046D 		_PUSH
 400 0828 D8F80060 		LDR	TOS,[RSP]
 401 082c DEE6     		_NEXT 
 402              	
 403              	//    >R	  ( w -- )
 404              	// 	Push the data stack to the return stack.
 405              	
 406 082e 1E080000 		.word	_RAT
 407 0832 42       	_TOR:	.byte   COMPO+2
 408 0833 3E52     		.ascii ">R"
 409 0835 0000BF   		.p2align 2 	
 410              	TOR:
 411 0838 48F8046D 		STR	TOS,[RSP,#-4]!
 412 083c 57F8046B 		_POP
 413 0840 D4E6     		_NEXT
 414              	
 415              	//	RP! ( u -- )
 416              	// initialize RPP with u 
 417 0842 32080000 		.word _TOR 
 418 0846 03       	_RPSTOR: .byte 3 
 419 0847 525021   		.ascii "RP!" 
 420 084a 00BF     		.p2align 2 
 421              	RPSTOR:
 422 084c B046     		MOV RSP,TOS 
 423 084e 57F8046B 		_POP  
 424 0852 CBE6     		_NEXT 
 425              	
 426              	
 427              	//	SP! ( u -- )
 428              	// initialize SPP with u 
 429 0854 46080000 		.word _RPSTOR  
 430 0858 03       	_SPSTOR: .byte 3 
 431 0859 535021   		.ascii "SP!" 
 432              		.p2align 2 
 433              	SPSTOR:
 434 085c 3746     		MOV DSP,TOS 
 435 085e 86EA0606 		EOR TOS,TOS,TOS 
 436 0862 C3E6     		_NEXT 
 437              	
 438              	//    SP@	 ( -- a )
ARM GAS  forth.s 			page 38


 439              	// 	Push the current data stack pointer.
 440              	
 441 0864 58080000 		.word	_SPSTOR
 442 0868 03       	_SPAT:	.byte   3
 443 0869 535040   		.ascii "SP@"
 444              		.p2align 2 	
 445              	SPAT:
 446 086c 47F8046D 		_PUSH
 447 0870 3E46     		MOV	TOS,DSP
 448 0872 BBE6     		_NEXT
 449              	
 450              	//    DROP	( w -- )
 451              	// 	Discard top stack item.
 452              	
 453 0874 68080000 		.word	_SPAT
 454 0878 04       	_DROP:	.byte   4
 455 0879 44524F50 		.ascii "DROP"
 456 087d 0000BF   		.p2align 2 	
 457              	DROP:
 458 0880 57F8046B 		_POP
 459 0884 B2E6     		_NEXT 
 460              	
 461              	//    DUP	 ( w -- w w )
 462              	// 	Duplicate the top stack item.
 463              	
 464 0886 78080000 		.word	_DROP
 465 088a 03       	_DUPP:	.byte   3
 466 088b 445550   		.ascii "DUP"
 467 088e 00BF     		.p2align 2 	
 468              	DUPP:
 469 0890 47F8046D 		_PUSH
 470 0894 AAE6     		_NEXT 
 471              	
 472              	//    SWAP	( w1 w2 -- w2 w1 )
 473              	// 	Exchange top two stack items.
 474              	
 475 0896 8A080000 		.word	_DUPP
 476 089a 04       	_SWAP:	.byte   4
 477 089b 53574150 		.ascii "SWAP"
 478 089f 00       		.p2align 2 	
 479              	SWAP:
 480 08a0 3D68     		LDR	WP,[DSP]
 481 08a2 3E60     		STR	TOS,[DSP]
 482 08a4 2E46     		MOV	TOS,WP
 483 08a6 A1E6     		_NEXT 
 484              	
 485              	//    OVER	( w1 w2 -- w1 w2 w1 )
 486              	// 	Copy second stack item to top.
 487              	
 488 08a8 9A080000 		.word	_SWAP
 489 08ac 04       	_OVER:	.byte   4
 490 08ad 4F564552 		.ascii "OVER"
 491 08b1 0000BF   		.p2align 2 	
 492              	OVER:
 493 08b4 47F8046D 		_PUSH
 494 08b8 7E68     		LDR	TOS,[DSP,#4]
 495 08ba 97E6     		_NEXT 
ARM GAS  forth.s 			page 39


 496              	
 497              	//    0<	  ( n -- t )
 498              	// 	Return true if n is negative.
 499              	
 500 08bc AC080000 		.word	_OVER
 501 08c0 02       	_ZLESS:	.byte   2
 502 08c1 303C     		.ascii "0<"
 503 08c3 00       		.p2align 2 	
 504              	ZLESS:
 505              	//	MOV	WP,#0
 506              	//	ADD	TOS,WP,TOS,ASR #32
 507 08c4 4FEAE676 		ASR TOS,#31
 508 08c8 90E6     		_NEXT 
 509              	
 510              	//    AND	 ( w w -- w )
 511              	// 	Bitwise AND.
 512              	
 513 08ca C0080000 		.word	_ZLESS
 514 08ce 03       	_ANDD:	.byte   3
 515 08cf 414E44   		.ascii "AND"
 516 08d2 00BF     		.p2align 2 	
 517              	ANDD:
 518 08d4 57F8045B 		LDR	WP,[DSP],#4
 519 08d8 06EA0506 		AND	TOS,TOS,WP
 520 08dc 86E6     		_NEXT 
 521              	
 522              	//    OR	  ( w w -- w )
 523              	// 	Bitwise inclusive OR.
 524              	
 525 08de CE080000 		.word	_ANDD
 526 08e2 02       	_ORR:	.byte   2
 527 08e3 4F52     		.ascii "OR"
 528 08e5 0000BF   		.p2align 2 	
 529              	ORR:
 530 08e8 57F8045B 		LDR	WP,[DSP],#4
 531 08ec 46EA0506 		ORR	TOS,TOS,WP
 532 08f0 7CE6     		_NEXT 
 533              	
 534              	//    XOR	 ( w w -- w )
 535              	// 	Bitwise exclusive OR.
 536              	
 537 08f2 E2080000 		.word	_ORR
 538 08f6 03       	_XORR:	.byte   3
 539 08f7 584F52   		.ascii "XOR"
 540 08fa 00BF     		.p2align 2 	
 541              	XORR:
 542 08fc 57F8045B 		LDR	WP,[DSP],#4
 543 0900 86EA0506 		EOR	TOS,TOS,WP
 544 0904 72E6     		_NEXT 
 545              	
 546              	//    UM+	 ( w w -- w cy )
 547              	// 	Add two numbers, return the sum and carry flag.
 548              	
 549 0906 F6080000 		.word	_XORR
 550 090a 03       	_UPLUS:	.byte   3
 551 090b 554D2B   		.ascii "UM+"
 552 090e 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 40


 553              	UPLUS:
 554 0910 3D68     		LDR	WP,[DSP]
 555 0912 AD19     		ADDS	WP,WP,TOS
 556 0914 4FF00006 		MOV	TOS,#0
 557 0918 46F10006 		ADC	TOS,TOS,#0
 558 091c 3D60     		STR	WP,[DSP]
 559 091e 65E6     		_NEXT 
 560              	
 561              	//    RSHIFT	 ( w # -- w )
 562              	// 	arithmetic Right shift # bits.
 563              	
 564 0920 0A090000 		.word	_UPLUS
 565 0924 06       	_RSHIFT:	.byte   6
 566 0925 52534849 		.ascii "RSHIFT"
 566      4654
 567 092b 00       		.p2align 2 	
 568              	RSHIFT:
 569 092c 57F8045B 		LDR	WP,[DSP],#4
 570 0930 45FA06F6 		MOV	TOS,WP,ASR TOS
 571 0934 5AE6     		_NEXT 
 572              	
 573              	//    LSHIFT	 ( w # -- w )
 574              	// 	Right shift # bits.
 575              	
 576 0936 24090000 		.word	_RSHIFT
 577 093a 06       	_LSHIFT:	.byte   6
 578 093b 4C534849 		.ascii "LSHIFT"
 578      4654
 579 0941 0000BF   		.p2align 2 	
 580              	LSHIFT:
 581 0944 57F8045B 		LDR	WP,[DSP],#4
 582 0948 05FA06F6 		MOV	TOS,WP,LSL TOS
 583 094c 4EE6     		_NEXT
 584              	
 585              	//    +	 ( w w -- w )
 586              	// 	Add.
 587              	
 588 094e 3A090000 		.word	_LSHIFT
 589 0952 01       	_PLUS:	.byte   1
 590 0953 2B       		.ascii "+"
 591              		.p2align 2 	
 592              	PLUS:
 593 0954 57F8045B 		LDR	WP,[DSP],#4
 594 0958 2E44     		ADD	TOS,TOS,WP
 595 095a 47E6     		_NEXT 
 596              	
 597              	//    -	 ( w w -- w )
 598              	// 	Subtract.
 599              	
 600 095c 52090000 		.word	_PLUS
 601 0960 01       	_SUBB:	.byte   1
 602 0961 2D       		.ascii "-"
 603 0962 00BF     		.p2align 2 	
 604              	SUBB:
 605 0964 57F8045B 		LDR	WP,[DSP],#4
 606 0968 C6EB0506 		RSB	TOS,TOS,WP
 607 096c 3EE6     		_NEXT 
ARM GAS  forth.s 			page 41


 608              	
 609              	//    *	 ( w w -- w )
 610              	// 	Multiply.
 611              	
 612 096e 60090000 		.word	_SUBB
 613 0972 01       	_STAR:	.byte   1
 614 0973 2A       		.ascii "*"
 615              		.p2align 2 	
 616              	STAR:
 617 0974 57F8045B 		LDR	WP,[DSP],#4
 618 0978 05FB06F6 		MUL	TOS,WP,TOS
 619 097c 36E6     		_NEXT 
 620              	
 621              	//    UM*	 ( w w -- ud )
 622              	// 	Unsigned multiply.
 623              	
 624 097e 72090000 		.word	_STAR
 625 0982 03       	_UMSTA:	.byte   3
 626 0983 554D2A   		.ascii "UM*"
 627 0986 00BF     		.p2align 2 	
 628              	UMSTA:
 629 0988 3D68     		LDR	WP,[DSP]
 630 098a A6FB0523 		UMULL	T2,T3,TOS,WP
 631 098e 3A60     		STR	T2,[DSP]
 632 0990 1E46     		MOV	TOS,T3
 633 0992 2BE6     		_NEXT 
 634              	
 635              	//    M*	 ( w w -- d )
 636              	// 	signed multiply.
 637              	
 638 0994 82090000 		.word	_UMSTA
 639 0998 02       	_MSTAR:	.byte   2
 640 0999 4D2A     		.ascii "M*"
 641 099b 00       		.p2align 2 	
 642              	MSTAR:
 643 099c 3D68     		LDR	WP,[DSP]
 644 099e 86FB0523 		SMULL	T2,T3,TOS,WP
 645 09a2 3A60     		STR	T2,[DSP]
 646 09a4 1E46     		MOV	TOS,T3
 647 09a6 21E6     		_NEXT 
 648              	
 649              	//    1+	 ( w -- w+1 )
 650              	// 	Add 1.
 651              	
 652 09a8 98090000 		.word	_MSTAR
 653 09ac 02       	_ONEP:	.byte   2
 654 09ad 312B     		.ascii "1+"
 655 09af 00       		.p2align 2 	
 656              	ONEP:
 657 09b0 06F10106 		ADD	TOS,TOS,#1
 658 09b4 1AE6     		_NEXT 
 659              	
 660              	//    1-	 ( w -- w-1 )
 661              	// 	Subtract 1.
 662              	
 663 09b6 AC090000 		.word	_ONEP
 664 09ba 02       	_ONEM:	.byte   2
ARM GAS  forth.s 			page 42


 665 09bb 312D     		.ascii "1-"
 666 09bd 0000BF   		.p2align 2 	
 667              	ONEM:
 668 09c0 A6F10106 		SUB	TOS,TOS,#1
 669 09c4 12E6     		_NEXT 
 670              	
 671              	//    2+	 ( w -- w+2 )
 672              	// 	Add 1.
 673              	
 674 09c6 BA090000 		.word	_ONEM
 675 09ca 02       	_TWOP:	.byte   2
 676 09cb 322B     		.ascii "2+"
 677 09cd 0000BF   		.p2align 2 	
 678              	TWOP:
 679 09d0 06F10206 		ADD	TOS,TOS,#2
 680 09d4 0AE6     		_NEXT
 681              	
 682              	//    2-	 ( w -- w-2 )
 683              	// 	Subtract 2.
 684              	
 685 09d6 CA090000 		.word	_TWOP
 686 09da 02       	_TWOM:	.byte   2
 687 09db 322D     		.ascii "2-"
 688 09dd 0000BF   		.p2align 2 	
 689              	TWOM:
 690 09e0 A6F10206 		SUB	TOS,TOS,#2
 691 09e4 02E6     		_NEXT
 692              	
 693              	//    CELL+	( w -- w+4 )
 694              	// 	Add CELLL.
 695              	
 696 09e6 DA090000 		.word	_TWOM
 697 09ea 05       	_CELLP:	.byte   5
 698 09eb 43454C4C 		.ascii "CELL+"
 698      2B
 699              		.p2align 2 	
 700              	CELLP:
 701 09f0 06F10406 		ADD	TOS,TOS,#CELLL
 702 09f4 FAE5     		_NEXT
 703              	
 704              	//    CELL-	( w -- w-4 )
 705              	// 	Subtract CELLL.
 706              	
 707 09f6 EA090000 		.word	_CELLP
 708 09fa 05       	_CELLM:	.byte   5
 709 09fb 43454C4C 		.ascii "CELL-"
 709      2D
 710              		.p2align 2 	
 711              	CELLM:
 712 0a00 A6F10406 		SUB	TOS,TOS,#CELLL
 713 0a04 F2E5     		_NEXT
 714              	 
 715              	//    BL	( -- 32 )
 716              	// 	Blank (ASCII space).
 717              	
 718 0a06 FA090000 		.word	_CELLM
 719 0a0a 02       	_BLANK:	.byte   2
ARM GAS  forth.s 			page 43


 720 0a0b 424C     		.ascii "BL"
 721 0a0d 0000BF   		.p2align 2 	
 722              	BLANK:
 723 0a10 47F8046D 		_PUSH
 724 0a14 4FF02006 		MOV	TOS,#32
 725 0a18 E8E5     		_NEXT 
 726              	
 727              	//    CELLS	( w -- w*4 )
 728              	// 	Multiply 4.
 729              	
 730 0a1a 0A0A0000 		.word	_BLANK
 731 0a1e 05       	_CELLS:	.byte   5
 732 0a1f 43454C4C 		.ascii "CELLS"
 732      53
 733              		.p2align 2 	
 734              	CELLS:
 735 0a24 4FEA8606 		MOV	TOS,TOS,LSL#2
 736 0a28 E0E5     		_NEXT
 737              	
 738              	//    CELL/	( w -- w/4 )
 739              	// 	Divide by 4.
 740              	
 741 0a2a 1E0A0000 		.word	_CELLS
 742 0a2e 05       	_CELLSL:	.byte   5
 743 0a2f 43454C4C 		.ascii "CELL/"
 743      2F
 744              		.p2align 2 	
 745              	CELLSL:
 746 0a34 4FEAA606 		MOV	TOS,TOS,ASR#2
 747 0a38 D8E5     		_NEXT
 748              	
 749              	//    2*	( w -- w*2 )
 750              	// 	Multiply 2.
 751              	
 752 0a3a 2E0A0000 		.word	_CELLSL
 753 0a3e 02       	_TWOST:	.byte   2
 754 0a3f 322A     		.ascii "2*"
 755 0a41 0000BF   		.p2align 2 	
 756              	TWOST:
 757 0a44 4FEA4606 		MOV	TOS,TOS,LSL#1
 758 0a48 D0E5     		_NEXT
 759              	
 760              	//    2/	( w -- w/2 )
 761              	// 	Divide by 2.
 762              	
 763 0a4a 3E0A0000 		.word	_TWOST
 764 0a4e 02       	_TWOSL:	.byte   2
 765 0a4f 322F     		.ascii "2/"
 766 0a51 0000BF   		.p2align 2 	
 767              	TWOSL:
 768 0a54 4FEA6606 		MOV	TOS,TOS,ASR#1
 769 0a58 C8E5     		_NEXT
 770              	
 771              	//    ?DUP	( w -- w w | 0 )
 772              	// 	Conditional duplicate.
 773              	
 774 0a5a 4E0A0000 		.word	_TWOSL
ARM GAS  forth.s 			page 44


 775 0a5e 04       	_QDUP:	.byte   4
 776 0a5f 3F445550 		.ascii "?DUP"
 777 0a63 00       		.p2align 2 	
 778              	QDUP:
 779 0a64 3500     		MOVS	WP,TOS
 780 0a66 18BF     		IT NE 
 781 0a68 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 782 0a6c BEE5     		_NEXT
 783              	
 784              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 785              	// 	Rotate top 3 items.
 786              	
 787 0a6e 5E0A0000 		.word	_QDUP
 788 0a72 03       	_ROT:	.byte   3
 789 0a73 524F54   		.ascii "ROT"
 790 0a76 00BF     		.p2align 2 	
 791              	ROT:
 792 0a78 3868     		LDR	T0,[DSP]  // w2 
 793 0a7a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 794 0a7c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 795 0a7e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 796 0a80 B4E5     		_NEXT
 797              	
 798              	//    2DROP	( w1 w2 -- )
 799              	// 	Drop top 2 items.
 800              	
 801 0a82 720A0000 		.word	_ROT
 802 0a86 05       	_DDROP:	.byte   5
 803 0a87 3244524F 		.ascii "2DROP"
 803      50
 804              		.p2align 2 	
 805              	DDROP:
 806 0a8c 57F8046B 		_POP
 807 0a90 57F8046B 		_POP
 808 0a94 AAE5     		_NEXT 
 809              	
 810              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 811              	// 	Duplicate top 2 items.
 812              	
 813 0a96 860A0000 		.word	_DDROP
 814 0a9a 04       	_DDUP:	.byte   4
 815 0a9b 32445550 		.ascii "2DUP"
 816 0a9f 00       		.p2align 2 	
 817              	DDUP:
 818 0aa0 3868     		LDR	T0,[DSP] // w1
 819 0aa2 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 820 0aa6 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 821 0aaa 9FE5     		_NEXT
 822              	
 823              	//    D+	( d1 d2 -- d3 )
 824              	// 	Add top 2 double numbers.
 825              	
 826 0aac 9A0A0000 		.word	_DDUP
 827 0ab0 02       	_DPLUS:	.byte   2
 828 0ab1 442B     		.ascii "D+"
 829 0ab3 00       		.p2align 2 	
 830              	DPLUS:
ARM GAS  forth.s 			page 45


 831 0ab4 57F8045B 		LDR	WP,[DSP],#4
 832 0ab8 57F8042B 		LDR	T2,[DSP],#4
 833 0abc 3B68     		LDR	T3,[DSP]
 834 0abe ED18     		ADDS	WP,WP,T3
 835 0ac0 3D60     		STR	WP,[DSP]
 836 0ac2 46EB0206 		ADC	TOS,TOS,T2
 837 0ac6 91E5     		_NEXT
 838              	
 839              	//    NOT	 ( w -- !w )
 840              	// 	1"s complement.
 841              	
 842 0ac8 B00A0000 		.word	_DPLUS
 843 0acc 03       	_INVER:	.byte   3
 844 0acd 4E4F54   		.ascii "NOT"
 845              		.p2align 2 	
 846              	INVER:
 847 0ad0 6FEA0606 		MVN	TOS,TOS
 848 0ad4 8AE5     		_NEXT
 849              	
 850              	//    NEGATE	( w -- -w )
 851              	// 	2's complement.
 852              	
 853 0ad6 CC0A0000 		.word	_INVER
 854 0ada 06       	_NEGAT:	.byte   6
 855 0adb 4E454741 		.ascii "NEGATE"
 855      5445
 856 0ae1 0000BF   		.p2align 2 	
 857              	NEGAT:
 858 0ae4 C6F10006 		RSB	TOS,TOS,#0
 859 0ae8 80E5     		_NEXT
 860              	
 861              	//    ABS	 ( w -- |w| )
 862              	// 	Absolute.
 863              	
 864 0aea DA0A0000 		.word	_NEGAT
 865 0aee 03       	_ABSS:	.byte   3
 866 0aef 414253   		.ascii "ABS"
 867 0af2 00BF     		.p2align 2 	
 868              	ABSS:
 869 0af4 16F0004F 		TST	TOS,#0x80000000
 870 0af8 18BF     		IT NE
 871 0afa 7642     	    RSBNE   TOS,TOS,#0
 872 0afc 76E5     		_NEXT
 873              	
 874              	//  0= ( w -- f )
 875              	// TOS==0?
 876              	
 877 0afe EE0A0000 		.word _ABSS
 878 0b02 02       	_ZEQUAL: .byte 2
 879 0b03 303D     		.ascii "0="
 880 0b05 0000BF   		.p2align 2
 881              	ZEQUAL:
 882 0b08 16B9     		cbnz TOS,1f
 883 0b0a 4FF0FF36 		mov TOS,#-1
 884 0b0e 6DE5     		_NEXT 
 885 0b10 86EA0606 	1:  eor TOS,TOS,TOS  
 886 0b14 6AE5     		_NEXT 	
ARM GAS  forth.s 			page 46


 887              	
 888              	//    =	 ( w w -- t )
 889              	// 	Equal?
 890              	
 891 0b16 020B0000 		.word	_ZEQUAL
 892 0b1a 01       	_EQUAL:	.byte   1
 893 0b1b 3D       		.ascii "="
 894              		.p2align 2 	
 895              	EQUAL:
 896 0b1c 57F8045B 		LDR	WP,[DSP],#4
 897 0b20 AE42     		CMP	TOS,WP
 898 0b22 0CBF     		ITE EQ 
 899 0b24 6FF00006 	    MVNEQ	TOS,#0
 900 0b28 0026     		MOVNE	TOS,#0
 901 0b2a 5FE5     		_NEXT
 902              	
 903              	//    U<	 ( w w -- t )
 904              	// 	Unsigned less?
 905              	
 906 0b2c 1A0B0000 		.word	_EQUAL
 907 0b30 02       	_ULESS:	.byte   2
 908 0b31 553C     		.ascii "U<"
 909 0b33 00       		.p2align 2 	
 910              	ULESS:
 911 0b34 57F8045B 		LDR	WP,[DSP],#4
 912 0b38 B542     		CMP	WP,TOS
 913 0b3a 34BF     		ITE CC 
 914 0b3c 6FF00006 		MVNCC	TOS,#0
 915 0b40 0026     		MOVCS	TOS,#0
 916 0b42 53E5     		_NEXT
 917              	
 918              	//    <	( w w -- t )
 919              	// 	Less?
 920              	
 921 0b44 300B0000 		.word	_ULESS
 922 0b48 01       	_LESS:	.byte   1
 923 0b49 3C       		.ascii "<"
 924 0b4a 00BF     		.p2align 2 	
 925              	LESS:
 926 0b4c 57F8045B 		LDR	WP,[DSP],#4
 927 0b50 B542     		CMP	WP,TOS
 928 0b52 B4BF     	    ITE LT
 929 0b54 6FF00006 		MVNLT	TOS,#0
 930 0b58 0026     		MOVGE	TOS,#0
 931 0b5a 47E5     		_NEXT 
 932              	
 933              	//    >	( w w -- t )
 934              	// 	greater?
 935              	
 936 0b5c 480B0000 		.word	_LESS
 937 0b60 01       	_GREAT:	.byte   1
 938 0b61 3E       		.ascii ">"
 939 0b62 00BF     		.p2align 2 	
 940              	GREAT:
 941 0b64 57F8045B 		LDR	WP,[DSP],#4
 942 0b68 B542     		CMP	WP,TOS
 943 0b6a CCBF     		ITE GT
ARM GAS  forth.s 			page 47


 944 0b6c 6FF00006 	    MVNGT	TOS,#0
 945 0b70 0026     		MOVLE	TOS,#0
 946 0b72 3BE5     		_NEXT
 947              	
 948              	//    MAX	 ( w w -- max )
 949              	// 	Leave maximum.
 950              	
 951 0b74 600B0000 		.word	_GREAT
 952 0b78 03       	_MAX:	.byte   3
 953 0b79 4D4158   		.ascii "MAX"
 954              		.p2align 2 	
 955              	MAX:
 956 0b7c 57F8045B 		LDR	WP,[DSP],#4
 957 0b80 B542     		CMP	WP,TOS
 958 0b82 C8BF     		IT GT 
 959 0b84 2E46     		MOVGT	TOS,WP
 960 0b86 31E5     		_NEXT 
 961              	
 962              	//    MIN	 ( w w -- min )
 963              	// 	Leave minimum.
 964              	
 965 0b88 780B0000 		.word	_MAX
 966 0b8c 03       	_MIN:	.byte   3
 967 0b8d 4D494E   		.ascii "MIN"
 968              		.p2align 2 	
 969              	MIN:
 970 0b90 57F8045B 		LDR	WP,[DSP],#4
 971 0b94 B542     		CMP	WP,TOS
 972 0b96 B8BF     		IT LT
 973 0b98 2E46     		MOVLT	TOS,WP
 974 0b9a 27E5     		_NEXT
 975              	
 976              	//    +!	 ( w a -- )
 977              	// 	Add to memory.
 978              	
 979 0b9c 8C0B0000 		.word	_MIN
 980 0ba0 02       	_PSTOR:	.byte   2
 981 0ba1 2B21     		.ascii "+!"
 982 0ba3 00       		.p2align 2 	
 983              	PSTOR:
 984 0ba4 57F8045B 		LDR	WP,[DSP],#4
 985 0ba8 3268     		LDR	T2,[TOS]
 986 0baa 2A44     		ADD	T2,T2,WP
 987 0bac 3260     		STR	T2,[TOS]
 988 0bae 57F8046B 		_POP
 989 0bb2 1BE5     		_NEXT
 990              	
 991              	//    2!	 ( d a -- )
 992              	// 	Store double number.
 993              	
 994 0bb4 A00B0000 		.word	_PSTOR
 995 0bb8 02       	_DSTOR:	.byte   2
 996 0bb9 3221     		.ascii "2!"
 997 0bbb 00       		.p2align 2 	
 998              	DSTOR:
 999 0bbc 57F8045B 		LDR	WP,[DSP],#4
 1000 0bc0 57F8042B 		LDR	T2,[DSP],#4
ARM GAS  forth.s 			page 48


 1001 0bc4 46F8045B 		STR	WP,[TOS],#4
 1002 0bc8 3260     		STR	T2,[TOS]
 1003 0bca 57F8046B 		_POP
 1004 0bce 0DE5     		_NEXT
 1005              	
 1006              	//    2@	 ( a -- d )
 1007              	// 	Fetch double number.
 1008              	
 1009 0bd0 B80B0000 		.word	_DSTOR
 1010 0bd4 02       	_DAT:	.byte   2
 1011 0bd5 3240     		.ascii "2@"
 1012 0bd7 00       		.p2align 2 	
 1013              	DAT:
 1014 0bd8 7568     		LDR	WP,[TOS,#4]
 1015 0bda 47F8045D 		STR	WP,[DSP,#-4]!
 1016 0bde 3668     		LDR	TOS,[TOS]
 1017 0be0 04E5     		_NEXT
 1018              	
 1019              	//    COUNT	( b -- b+1 c )
 1020              	// 	Fetch length of string.
 1021              	
 1022 0be2 D40B0000 		.word	_DAT
 1023 0be6 05       	_COUNT:	.byte   5
 1024 0be7 434F554E 		.ascii "COUNT"
 1024      54
 1025              		.p2align 2 	
 1026              	COUNT:
 1027 0bec 16F8015B 		LDRB	WP,[TOS],#1
 1028 0bf0 47F8046D 		_PUSH
 1029 0bf4 2E46     		MOV	TOS,WP
 1030 0bf6 F9E4     		_NEXT
 1031              	
 1032              	//    DNEGATE	( d -- -d )
 1033              	// 	Negate double number.
 1034              	
 1035 0bf8 E60B0000 		.word	_COUNT
 1036 0bfc 07       	_DNEGA:	.byte   7
 1037 0bfd 444E4547 		.ascii "DNEGATE"
 1037      415445
 1038              		.p2align 2 	
 1039              	DNEGA:
 1040 0c04 3D68     		LDR	WP,[DSP]
 1041 0c06 A2EB0202 		SUB	T2,T2,T2
 1042 0c0a 551B     		SUBS WP,T2,WP
 1043 0c0c 62EB0606 		SBC	TOS,T2,TOS
 1044 0c10 3D60     		STR	WP,[DSP]
 1045 0c12 EBE4     		_NEXT
 1046              	
 1047              	// **************************************************************************
 1048              	//  System and user variables
 1049              	
 1050              	//    doVAR	( -- a )
 1051              	// 	Run time routine for VARIABLE and CREATE.
 1052              	
 1053              	// 	.word	_DNEGA
 1054              	// _DOVAR	.byte  COMPO+5
 1055              	// 	.ascii "doVAR"
ARM GAS  forth.s 			page 49


 1056              	// 	.p2align 2 	
 1057              	DOVAR:
 1058 0c14 47F8046D 		_PUSH
 1059 0c18 6646     		MOV TOS,IP
 1060 0c1a 0CF1040C 		ADD IP,IP,#4 
 1061 0c1e E8E4     		B UNNEST 
 1062              	
 1063              	//    doCON	( -- a ) 
 1064              	// 	Run time routine for CONSTANT.
 1065              	
 1066              	// 	.word	_DOVAR
 1067              	// _DOCON	.byte  COMPO+5
 1068              	// 	.ascii "doCON"
 1069              	// 	.p2align 2 	
 1070              	DOCON:
 1071 0c20 47F8046D 		_PUSH
 1072 0c24 5CF8046B 		LDR.W TOS,[IP],#4 
 1073 0c28 E3E4     		B UNNEST 
 1074              	
 1075              	/***********************
 1076              	  system variables 
 1077              	***********************/
 1078              	
 1079              	 // SEED ( -- a)
 1080              	 // return PRNG seed address 
 1081              	
 1082 0c2a FC0B0000 		.word _DNEGA
 1083 0c2e 04       	_SEED: .byte 4
 1084 0c2f 53454544 		.ascii "SEED"
 1085 0c33 00       		.p2align 2
 1086              	SEED:
 1087 0c34 47F8046D 		_PUSH 
 1088 0c38 04F63446 		ADD TOS,UP,#SEED
 1089 0c3c D6E4     		_NEXT 	
 1090              	
 1091              	//  MSEC ( -- a)
 1092              	// return address of milliseconds counter
 1093 0c3e 2E0C0000 	  .word _SEED 
 1094 0c42 04       	_MSEC: .byte 4
 1095 0c43 4D534543 	  .ascii "MSEC"
 1096 0c47 00       	  .p2align 2 
 1097              	MSEC:
 1098 0c48 47F8046D 	  _PUSH
 1099 0c4c 04F10806 	  ADD TOS,UP,#TICKS
 1100 0c50 CCE4     	  _NEXT 
 1101              	
 1102              	// TIMER ( -- a )
 1103              	// count down timer 
 1104 0c52 420C0000 	  .word _MSEC
 1105 0c56 05       	_TIMER:  .byte 5
 1106 0c57 54494D45 	  .ascii "TIMER"
 1106      52
 1107              	  .p2align 2 
 1108              	TIMER:
 1109 0c5c 47F8046D 	  _PUSH 
 1110 0c60 04F65C46 	  ADD TOS,UP,#TIMER
 1111 0c64 C2E4     	  _NEXT
ARM GAS  forth.s 			page 50


 1112              	
 1113              	//    'BOOT	 ( -- a )
 1114              	// 	Application.
 1115              	
 1116 0c66 560C0000 		.word	_TIMER
 1117 0c6a 05       	_TBOOT:	.byte   5
 1118 0c6b 27424F4F 		.ascii "'BOOT"
 1118      54
 1119              		.p2align 2 	
 1120              	TBOOT:
 1121 0c70 47F8046D 		_PUSH
 1122 0c74 04F11006 		ADD	TOS,UP,#BOOT 
 1123 0c78 B8E4     		_NEXT
 1124              		
 1125              	//    BASE	( -- a )
 1126              	// 	Storage of the radix base for numeric I/O.
 1127              	
 1128 0c7a 6A0C0000 		.word	_TBOOT
 1129 0c7e 04       	_BASE:	.byte   4
 1130 0c7f 42415345 		.ascii "BASE"
 1131 0c83 00       		.p2align 2 	
 1132              	BASE:
 1133 0c84 47F8046D 		_PUSH
 1134 0c88 04F68446 		ADD	TOS,UP,#BASE
 1135 0c8c AEE4     		_NEXT
 1136              	
 1137              	//    tmp	 ( -- a )
 1138              	// 	A temporary storage location used in parse and find.
 1139              	
 1140              	// 	.word	_BASE
 1141              	// _TEMP	.byte   COMPO+3
 1142              	// 	.ascii "tmp"
 1143              	// 	.p2align 2 	
 1144              	TEMP:
 1145 0c8e 47F8046D 		_PUSH
 1146 0c92 04F11806 		ADD	TOS,UP,#TMP
 1147 0c96 A9E4     		_NEXT
 1148              	
 1149              	//    SPAN	( -- a )
 1150              	// 	Hold character count received by EXPECT.
 1151              	
 1152 0c98 7E0C0000 		.word	_BASE
 1153 0c9c 04       	_SPAN:	.byte   4
 1154 0c9d 5350414E 		.ascii "SPAN"
 1155 0ca1 0000BF   		.p2align 2 	
 1156              	SPAN:
 1157 0ca4 47F8046D 		_PUSH
 1158 0ca8 04F6A446 		ADD	TOS,UP,#SPAN
 1159 0cac 9EE4     		_NEXT
 1160              	
 1161              	//    >IN	 ( -- a )
 1162              	// 	Hold the character pointer while parsing input stream.
 1163              	
 1164 0cae 9C0C0000 		.word	_SPAN
 1165 0cb2 03       	_INN:	.byte   3
 1166 0cb3 3E494E   		.ascii ">IN"
 1167 0cb6 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 51


 1168              	INN:
 1169 0cb8 47F8046D 		_PUSH
 1170 0cbc 04F12006 		ADD	TOS,UP,#TOIN
 1171 0cc0 94E4     		_NEXT
 1172              	
 1173              	//    #TIB	( -- a )
 1174              	// 	Hold the current count and address of the terminal input buffer.
 1175              	
 1176 0cc2 B20C0000 		.word	_INN
 1177 0cc6 04       	_NTIB:	.byte   4
 1178 0cc7 23544942 		.ascii "#TIB"
 1179 0ccb 00       		.p2align 2 	
 1180              	NTIB:
 1181 0ccc 47F8046D 		_PUSH
 1182 0cd0 04F6CC46 		ADD	TOS,UP,#NTIB
 1183 0cd4 8AE4     		_NEXT
 1184              	
 1185              	//    'EVAL	( -- a )
 1186              	// 	Execution vector of EVAL.
 1187              	
 1188 0cd6 C60C0000 		.word	_NTIB
 1189 0cda 05       	_TEVAL:	.byte   5
 1190 0cdb 27455641 		.ascii "'EVAL"
 1190      4C
 1191              		.p2align 2 	
 1192              	TEVAL:
 1193 0ce0 47F8046D 		_PUSH
 1194 0ce4 04F12C06 		ADD	TOS,UP,#EVAL
 1195 0ce8 80E4     		_NEXT
 1196              	
 1197              	//    HLD	 ( -- a )
 1198              	// 	Hold a pointer in building a numeric output string.
 1199              	
 1200 0cea DA0C0000 		.word	_TEVAL
 1201 0cee 03       	_HLD:	.byte   3
 1202 0cef 484C44   		.ascii "HLD"
 1203 0cf2 00BF     		.p2align 2 	
 1204              	HLD:
 1205 0cf4 47F8046D 		_PUSH
 1206 0cf8 04F6F446 		ADD	TOS,UP,#HLD
 1207 0cfc 76E4     		_NEXT
 1208              	
 1209              	//    CONTEXT	( -- a )
 1210              	// 	A area to specify vocabulary search order.
 1211              	
 1212 0cfe EE0C0000 		.word	_HLD
 1213 0d02 07       	_CNTXT:	.byte   7
 1214 0d03 434F4E54 		.ascii "CONTEXT"
 1214      455854
 1215 0d0a 00BF     		.p2align 2 	
 1216              	CNTXT:
 1217              	CRRNT:
 1218 0d0c 47F8046D 		_PUSH
 1219 0d10 04F13406 		ADD	TOS,UP,#CTXT
 1220 0d14 6AE4     		_NEXT
 1221              	
 1222              	//    CP	( -- a )
ARM GAS  forth.s 			page 52


 1223              	// 	Point to top name in RAM vocabulary.
 1224              	
 1225 0d16 020D0000 		.word	_CNTXT
 1226 0d1a 02       	_CP:	.byte   2
 1227 0d1b 4350     		.ascii "CP"
 1228 0d1d 0000BF   		.p2align 2 	
 1229              	CPP:
 1230 0d20 47F8046D 		_PUSH
 1231 0d24 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1232 0d28 60E4     		_NEXT
 1233              	
 1234              	//   FCP ( -- a )
 1235              	//  Point ot top of Forth system dictionary
 1236 0d2a 1A0D0000 		.word _CP
 1237 0d2e 03       	_FCP: .byte 3            
 1238 0d2f 464350   		.ascii "FCP"
 1239 0d32 00BF     		.p2align 2 
 1240              	FCP: 
 1241 0d34 47F8046D 		_PUSH 
 1242 0d38 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1243 0d3c 56E4     		_NEXT 
 1244              	
 1245              	//    LAST	( -- a )
 1246              	// 	Point to the last name in the name dictionary.
 1247              	
 1248 0d3e 2E0D0000 		.word	_FCP
 1249 0d42 04       	_LAST:	.byte   4
 1250 0d43 4C415354 		.ascii "LAST"
 1251 0d47 00       		.p2align 2 	
 1252              	LAST:
 1253 0d48 47F8046D 		_PUSH
 1254 0d4c 04F14006 		ADD	TOS,UP,#LASTN
 1255 0d50 4CE4     		_NEXT
 1256              	
 1257              	//	FTRACE ( -- a )
 1258              	// return trace flag address 
 1259 0d52 420D0000 		.word _LAST  
 1260 0d56 06       	_FTRACE: .byte 6
 1261 0d57 46545241 		.ascii "FTRACE"
 1261      4345
 1262 0d5d 0000BF   		.p2align 2 
 1263              	FTRACE:	
 1264 0d60 47F8046D 		_PUSH 
 1265 0d64 04F55666 		ADD TOS,UP,#FTRACE 
 1266 0d68 40E4     		_NEXT 
 1267              	
 1268              	/***********************
 1269              		system constants 
 1270              	***********************/
 1271              	
 1272              	//	USER_BEGIN ( -- a )
 1273              	//  where user area begin in RAM
 1274 0d6a 560D0000 		.word _FTRACE
 1275 0d6e 0A       	_USER_BGN: .byte 10
 1276 0d6f 55534552 		.ascii "USER_BEGIN"
 1276      5F424547 
 1276      494E
ARM GAS  forth.s 			page 53


 1277 0d79 0000BF   		.p2align 2
 1278              	USER_BEGIN:
 1279 0d7c 47F8046D 		_PUSH 
 1280 0d80 004E     		ldr TOS,USR_BGN_ADR 
 1281 0d82 33E4     		_NEXT 
 1282              	USR_BGN_ADR:
 1283 0d84 12050020 	.word  DTOP 
 1284              	
 1285              	//  USER_END ( -- a )
 1286              	//  where user area end in RAM 
 1287 0d88 6E0D0000 		.word _USER_BGN
 1288 0d8c 08       	_USER_END: .byte 8 
 1289 0d8d 55534552 		.ascii "USER_END" 
 1289      5F454E44 
 1290 0d95 0000BF   		.p2align 2 
 1291              	USER_END:
 1292 0d98 47F8046D 		_PUSH 
 1293 0d9c 004E     		ldr TOS,USER_END_ADR 
 1294 0d9e 25E4     		_NEXT 
 1295              	USER_END_ADR:
 1296 0da0 FC800120 		.word DEND 
 1297              	
 1298              	
 1299              	/* *********************
 1300              	  Common functions
 1301              	***********************/
 1302              	
 1303              	//    WITHIN	( u ul uh -- t )
 1304              	// 	Return true if u is within the range of ul and uh.
 1305              	
 1306 0da4 8C0D0000 		.word	_USER_END 
 1307 0da8 06       	_WITHI:	.byte   6
 1308 0da9 57495448 		.ascii "WITHIN"
 1308      494E
 1309 0daf 00       		.p2align 2 	
 1310              	WITHI:
 1311 0db0 504700BF 		_NEST
 1312 0db4 B5080000 		_ADR	OVER
 1313 0db8 65090000 		_ADR	SUBB
 1314 0dbc 39080000 		_ADR	TOR
 1315 0dc0 65090000 		_ADR	SUBB
 1316 0dc4 11080000 		_ADR	RFROM
 1317 0dc8 350B0000 		_ADR	ULESS
 1318 0dcc F3050000 		_UNNEST
 1319              	
 1320              	//  Divide
 1321              	
 1322              	//    UM/MOD	( udl udh u -- ur uq )
 1323              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1324              	
 1325 0dd0 A80D0000 		.word	_WITHI
 1326 0dd4 06       	_UMMOD:	.byte   6
 1327 0dd5 554D2F4D 		.ascii "UM/MOD"
 1327      4F44
 1328 0ddb 00       		.p2align 2 	
 1329              	UMMOD:
 1330 0ddc 4FF00103 		MOV	T3,#1
ARM GAS  forth.s 			page 54


 1331 0de0 57F8045B 		LDR	WP,[DSP],#4
 1332 0de4 3A68     		LDR	T2,[DSP]
 1333              	UMMOD0:
 1334 0de6 9218     		ADDS	T2,T2,T2
 1335 0de8 6D41     		ADCS	WP,WP,WP
 1336 0dea 04D3     		BCC	UMMOD1
 1337 0dec A5EB0605 		SUB	WP,WP,TOS
 1338 0df0 02F10102 		ADD	T2,T2,#1
 1339 0df4 04E0     		B UMMOD2
 1340              	UMMOD1:
 1341 0df6 AD1B     		SUBS	WP,WP,TOS 
 1342 0df8 28BF     		IT CS 
 1343 0dfa 0132     		ADDCS	T2,T2,#1
 1344 0dfc 00D2     		BCS	UMMOD2
 1345 0dfe 3544     		ADD	WP,WP,TOS
 1346              	UMMOD2:
 1347 0e00 DB18     		ADDS	T3,T3,T3
 1348 0e02 F0D3     		BCC	UMMOD0
 1349 0e04 1646     		MOV	TOS,T2
 1350 0e06 3D60     		STR	WP,[DSP]
 1351 0e08 FFF7F0BB 		_NEXT
 1352              	
 1353              	//    M/MOD	( d n -- r q )
 1354              	// 	Signed floored divide of double by single. Return mod and quotient.
 1355              	
 1356 0e0c D40D0000 		.word	_UMMOD
 1357 0e10 05       	_MSMOD:	.byte  5
 1358 0e11 4D2F4D4F 		.ascii "M/MOD"
 1358      44
 1359 0e16 00BF     		.p2align 2 	
 1360              	MSMOD:	
 1361 0e18 504700BF 		_NEST
 1362 0e1c 91080000 		_ADR	DUPP
 1363 0e20 C5080000 		_ADR	ZLESS
 1364 0e24 91080000 		_ADR	DUPP
 1365 0e28 39080000 		_ADR	TOR
 1366 0e2c 9F070000 		_QBRAN MMOD1
 1366      440E0000 
 1367 0e34 E50A0000 		_ADR	NEGAT
 1368 0e38 39080000 		_ADR	TOR
 1369 0e3c 050C0000 		_ADR	DNEGA
 1370 0e40 11080000 		_ADR	RFROM
 1371              	MMOD1:
 1372 0e44 39080000 		_ADR	TOR
 1373 0e48 91080000 		_ADR	DUPP
 1374 0e4c C5080000 		_ADR	ZLESS
 1375 0e50 9F070000 		_QBRAN MMOD2
 1375      600E0000 
 1376 0e58 25080000 		_ADR	RAT
 1377 0e5c 55090000 		_ADR	PLUS
 1378              	MMOD2:
 1379 0e60 11080000 		_ADR	RFROM
 1380 0e64 DD0D0000 		_ADR	UMMOD
 1381 0e68 11080000 		_ADR	RFROM
 1382 0e6c 9F070000 		_QBRAN	MMOD3
 1382      800E0000 
 1383 0e74 A1080000 		_ADR	SWAP
ARM GAS  forth.s 			page 55


 1384 0e78 E50A0000 		_ADR	NEGAT
 1385 0e7c A1080000 		_ADR	SWAP
 1386              	MMOD3:   
 1387 0e80 F3050000 		_UNNEST
 1388              	
 1389              	//    /MOD	( n n -- r q )
 1390              	// 	Signed divide. Return mod and quotient.
 1391              	
 1392 0e84 100E0000 		.word	_MSMOD
 1393 0e88 04       	_SLMOD:	.byte   4
 1394 0e89 2F4D4F44 		.ascii "/MOD"
 1395 0e8d 0000BF   		.p2align 2 	
 1396              	SLMOD:
 1397 0e90 504700BF 		_NEST
 1398 0e94 B5080000 		_ADR	OVER
 1399 0e98 C5080000 		_ADR	ZLESS
 1400 0e9c A1080000 		_ADR	SWAP
 1401 0ea0 190E0000 		_ADR	MSMOD
 1402 0ea4 F3050000 		_UNNEST
 1403              	
 1404              	//    MOD	 ( n n -- r )
 1405              	// 	Signed divide. Return mod only.
 1406              	
 1407 0ea8 880E0000 		.word	_SLMOD
 1408 0eac 03       	_MODD:	.byte  3
 1409 0ead 4D4F44   		.ascii "MOD"
 1410              		.p2align 2 	
 1411              	MODD:
 1412 0eb0 504700BF 		_NEST
 1413 0eb4 910E0000 		_ADR	SLMOD
 1414 0eb8 81080000 		_ADR	DROP
 1415 0ebc F3050000 		_UNNEST
 1416              	
 1417              	//    /	   ( n n -- q )
 1418              	// 	Signed divide. Return quotient only.
 1419              	
 1420 0ec0 AC0E0000 		.word	_MODD
 1421 0ec4 01       	_SLASH:	.byte  1
 1422 0ec5 2F       		.ascii "/"
 1423 0ec6 00BF     		.p2align 2 	
 1424              	SLASH:
 1425 0ec8 504700BF 		_NEST
 1426 0ecc 910E0000 		_ADR	SLMOD
 1427 0ed0 A1080000 		_ADR	SWAP
 1428 0ed4 81080000 		_ADR	DROP
 1429 0ed8 F3050000 		_UNNEST
 1430              	
 1431              	//    */MOD	( n1 n2 n3 -- r q )
 1432              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1433              	
 1434 0edc C40E0000 		.word	_SLASH
 1435 0ee0 05       	_SSMOD:	.byte  5
 1436 0ee1 2A2F4D4F 		.ascii "*/MOD"
 1436      44
 1437 0ee6 00BF     		.p2align 2 	
 1438              	SSMOD:
 1439 0ee8 504700BF 		_NEST
ARM GAS  forth.s 			page 56


 1440 0eec 39080000 		_ADR	TOR
 1441 0ef0 9D090000 		_ADR	MSTAR
 1442 0ef4 11080000 		_ADR	RFROM
 1443 0ef8 190E0000 		_ADR	MSMOD
 1444 0efc F3050000 		_UNNEST
 1445              	
 1446              	//    */	  ( n1 n2 n3 -- q )
 1447              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1448              	
 1449 0f00 E00E0000 		.word	_SSMOD
 1450 0f04 02       	_STASL:	.byte  2
 1451 0f05 2A2F     		.ascii "*/"
 1452 0f07 00       		.p2align 2 	
 1453              	STASL:
 1454 0f08 504700BF 		_NEST
 1455 0f0c E90E0000 		_ADR	SSMOD
 1456 0f10 A1080000 		_ADR	SWAP
 1457 0f14 81080000 		_ADR	DROP
 1458 0f18 F3050000 		_UNNEST
 1459              	
 1460              	// **************************************************************************
 1461              	//  Miscellaneous
 1462              	
 1463              	//    ALIGNED	( b -- a )
 1464              	// 	Align address to the cell boundary.
 1465              	
 1466 0f1c 040F0000 		.word	_STASL
 1467 0f20 07       	_ALGND:	.byte   7
 1468 0f21 414C4947 		.ascii "ALIGNED"
 1468      4E4544
 1469              		.p2align 2 	
 1470              	ALGND:
 1471 0f28 06F10306 		ADD	TOS,TOS,#3
 1472 0f2c 6FF00305 		MVN	WP,#3
 1473 0f30 06EA0506 		AND	TOS,TOS,WP
 1474 0f34 FFF75ABB 		_NEXT
 1475              	
 1476              	//    >CHAR	( c -- c )
 1477              	// 	Filter non-printing characters.
 1478              	
 1479 0f38 200F0000 		.word	_ALGND
 1480 0f3c 05       	_TCHAR:	.byte  5
 1481 0f3d 3E434841 		.ascii ">CHAR"
 1481      52
 1482 0f42 00BF     		.p2align 2 	
 1483              	TCHAR:
 1484 0f44 504700BF 		_NEST
 1485 0f48 5D070000 		_DOLIT  0x7F
 1485      7F000000 
 1486 0f50 D5080000 		_ADR	ANDD
 1487 0f54 91080000 		_ADR	DUPP	// mask msb
 1488 0f58 110A0000 		_ADR	BLANK
 1489 0f5c 5D070000 		_DOLIT 	127
 1489      7F000000 
 1490 0f64 B10D0000 		_ADR	WITHI	// check for printable
 1491 0f68 D10A0000 		_ADR	INVER
 1492 0f6c 9F070000 		_QBRAN	TCHA1
ARM GAS  forth.s 			page 57


 1492      800F0000 
 1493 0f74 81080000 		_ADR	DROP
 1494 0f78 5D070000 		_DOLIT 	'_'	// replace non-printables
 1494      5F000000 
 1495              	TCHA1:
 1496 0f80 F3050000 		  _UNNEST
 1497              	
 1498              	//    DEPTH	( -- n )
 1499              	// 	Return the depth of the data stack.
 1500              	
 1501 0f84 3C0F0000 		.word	_TCHAR
 1502 0f88 05       	_DEPTH:	.byte  5
 1503 0f89 44455054 		.ascii "DEPTH"
 1503      48
 1504 0f8e 00BF     		.p2align 2 	
 1505              	DEPTH:
 1506 0f90 4FF47F42 		_MOV32 T2,SPP 
 1506      C2F20102 
 1507 0f98 A2EB0702 		SUB	T2,T2,DSP
 1508 0f9c 47F8046D 		_PUSH
 1509 0fa0 4FEAA206 		ASR	TOS,T2,#2
 1510 0fa4 FFF722BB 		_NEXT
 1511              	
 1512              	//    PICK	( ... +n -- ... w )
 1513              	// 	Copy the nth stack item to tos.
 1514              	
 1515 0fa8 880F0000 		.word	_DEPTH
 1516 0fac 04       	_PICK:	.byte  4
 1517 0fad 5049434B 		.ascii "PICK"
 1518 0fb1 0000BF   		.p2align 2 	
 1519              	PICK:
 1520 0fb4 504700BF 		_NEST
 1521 0fb8 B1090000 		_ADR	ONEP
 1522 0fbc 250A0000 		_ADR	CELLS
 1523 0fc0 6D080000 		_ADR	SPAT
 1524 0fc4 55090000 		_ADR	PLUS
 1525 0fc8 E5070000 		_ADR	AT
 1526 0fcc F3050000 		_UNNEST
 1527              	
 1528              	// **************************************************************************
 1529              	//  Memory access
 1530              	
 1531              	//    HERE	( -- a )
 1532              	// 	Return the top of the code dictionary.
 1533              	
 1534 0fd0 AC0F0000 		.word	_PICK
 1535 0fd4 04       	_HERE:	.byte  4
 1536 0fd5 48455245 		.ascii "HERE"
 1537 0fd9 0000BF   		.p2align 2 	
 1538              	HERE:
 1539 0fdc 504700BF 		_NEST
 1540 0fe0 210D0000 		_ADR	CPP
 1541 0fe4 E5070000 		_ADR	AT
 1542 0fe8 F3050000 		_UNNEST
 1543              		
 1544              	//    PAD	 ( -- a )
 1545              	// 	Return the address of a temporary buffer.
ARM GAS  forth.s 			page 58


 1546              	
 1547 0fec D40F0000 		.word	_HERE
 1548 0ff0 03       	_PAD:	.byte  3
 1549 0ff1 504144   		.ascii "PAD"
 1550              		.p2align 2 	
 1551              	PAD:
 1552 0ff4 504700BF 		_NEST
 1553 0ff8 DD0F0000 		_ADR	HERE
 1554 0ffc 5D070000 		_DOLIT 80
 1554      50000000 
 1555 1004 55090000 		_ADR PLUS 
 1556 1008 F3050000 		_UNNEST
 1557              	
 1558              	//    TIB	 ( -- a )
 1559              	// 	Return the address of the terminal input buffer.
 1560              	
 1561 100c F00F0000 		.word	_PAD
 1562 1010 03       	_TIB:	.byte  3
 1563 1011 544942   		.ascii "TIB"
 1564              		.p2align 2 	
 1565              	TIB:
 1566 1014 47F8046D 		_PUSH
 1567 1018 A66A     		ldr TOS,[UP,#TIBUF]
 1568 101a FFF7E7BA 		_NEXT
 1569              	
 1570              	//    @EXECUTE	( a -- )
 1571              	// 	Execute vector stored in address a.
 1572              	
 1573 101e 10100000 		.word	_TIB
 1574 1022 08       	_ATEXE:	.byte   8
 1575 1023 40455845 		.ascii "@EXECUTE"
 1575      43555445 
 1576 102b 00       		.p2align 2 	
 1577              	ATEXE: 
 1578 102c 3500     		MOVS	WP,TOS
 1579 102e 57F8046B 		_POP
 1580 1032 2D68     		LDR	WP,[WP]
 1581 1034 45F00105 		ORR	WP,WP,#1
 1582 1038 18BF     	    IT NE 
 1583 103a 2847     		BXNE	WP
 1584 103c FFF7D6BA 		_NEXT
 1585              	
 1586              	//    CMOVE	( b1 b2 u -- )
 1587              	// 	Copy u bytes from b1 to b2.
 1588              	
 1589 1040 22100000 		.word	_ATEXE
 1590 1044 05       	_CMOVE:	.byte   5
 1591 1045 434D4F56 		.ascii "CMOVE"
 1591      45
 1592 104a 00BF     		.p2align 2 	
 1593              	CMOVE:
 1594 104c 57F8042B 		LDR	T2,[DSP],#4
 1595 1050 57F8043B 		LDR	T3,[DSP],#4
 1596 1054 03E0     		B CMOV1
 1597              	CMOV0:
 1598 1056 13F8015B 		LDRB	WP,[T3],#1
 1599 105a 02F8015B 		STRB	WP,[T2],#1
ARM GAS  forth.s 			page 59


 1600              	CMOV1:
 1601 105e 3600     		MOVS	TOS,TOS
 1602 1060 02D0     		BEQ	CMOV2
 1603 1062 A6F10106 		SUB	TOS,TOS,#1
 1604 1066 F6E7     		B CMOV0
 1605              	CMOV2:
 1606 1068 57F8046B 		_POP
 1607 106c FFF7BEBA 		_NEXT
 1608              	
 1609              	//    MOVE	( a1 a2 u -- )
 1610              	// 	Copy u words from a1 to a2.
 1611              	
 1612 1070 44100000 		.word	_CMOVE
 1613 1074 04       	_MOVE:	.byte   4
 1614 1075 4D4F5645 		.ascii "MOVE"
 1615 1079 0000BF   		.p2align 2 	
 1616              	MOVE:
 1617 107c 26F00306 		AND	TOS,TOS,#-4
 1618 1080 57F8042B 		LDR	T2,[DSP],#4
 1619 1084 57F8043B 		LDR	T3,[DSP],#4
 1620 1088 03E0     		B MOVE1
 1621              	MOVE0:
 1622 108a 53F8045B 		LDR	WP,[T3],#4
 1623 108e 42F8045B 		STR	WP,[T2],#4
 1624              	MOVE1:
 1625 1092 3600     		MOVS	TOS,TOS
 1626 1094 02D0     		BEQ	MOVE2
 1627 1096 A6F10406 		SUB	TOS,TOS,#4
 1628 109a F6E7     		B MOVE0
 1629              	MOVE2:
 1630 109c 57F8046B 		_POP
 1631 10a0 FFF7A4BA 		_NEXT
 1632              	
 1633              	//    FILL	( b u c -- )
 1634              	// 	Fill u bytes of character c to area beginning at b.
 1635              	
 1636 10a4 74100000 		.word	_MOVE
 1637 10a8 04       	_FILL:	.byte   4
 1638 10a9 46494C4C 		.ascii "FILL"
 1639 10ad 0000BF   		.p2align 2 	
 1640              	FILL:
 1641 10b0 57F8042B 		LDR	T2,[DSP],#4
 1642 10b4 57F8043B 		LDR	T3,[DSP],#4
 1643              	FILL0:
 1644 10b8 00E0     		B FILL1
 1645 10ba 3646     		MOV	TOS,TOS
 1646              	FILL1:
 1647 10bc 03F8016B 		STRB	TOS,[T3],#1
 1648 10c0 1200     		MOVS	T2,T2
 1649 10c2 02D0     		BEQ	FILL2
 1650 10c4 A2F10102 		SUB	T2,T2,#1
 1651 10c8 F6E7     		B FILL0
 1652              	FILL2:
 1653 10ca 57F8046B 		_POP
 1654 10ce FFF78DBA 		_NEXT
 1655              	
 1656              	//    PACK$	( b u a -- a )
ARM GAS  forth.s 			page 60


 1657              	// 	Build a counted word with u characters from b. Null fill.
 1658              	
 1659 10d2 A8100000 		.word	_FILL
 1660 10d6 05       	_PACKS:	.byte  5
 1661 10d7 5041434B 		.ascii "PACK$$"
 1661      2424
 1662 10dd 0000BF   		.p2align 2 	
 1663              	PACKS:
 1664 10e0 504700BF 		_NEST
 1665 10e4 290F0000 		_ADR	ALGND
 1666 10e8 91080000 		_ADR	DUPP
 1667 10ec 39080000 		_ADR	TOR			// strings only on cell boundary
 1668 10f0 B5080000 		_ADR	OVER
 1669 10f4 55090000 		_ADR	PLUS
 1670 10f8 B1090000 		_ADR	ONEP
 1671 10fc 5D070000 		_DOLIT 	0xFFFFFFFC
 1671      FCFFFFFF 
 1672 1104 D5080000 		_ADR	ANDD			// count mod cell
 1673 1108 5D070000 		_DOLIT 	0
 1673      00000000 
 1674 1110 A1080000 		_ADR	SWAP
 1675 1114 D1070000 		_ADR	STORE			// null fill cell
 1676 1118 25080000 		_ADR	RAT
 1677 111c A10A0000 		_ADR	DDUP
 1678 1120 F1070000 		_ADR	CSTOR
 1679 1124 B1090000 		_ADR	ONEP			// save count
 1680 1128 A1080000 		_ADR	SWAP
 1681 112c 4D100000 		_ADR	CMOVE
 1682 1130 11080000 		_ADR	RFROM
 1683 1134 F3050000 		_UNNEST   			// move string
 1684              	
 1685              	// **************************************************************************
 1686              	//  Numeric output, single precision
 1687              	
 1688              	//    DIGIT	( u -- c )
 1689              	// 	Convert digit u to a character.
 1690              	
 1691 1138 D6100000 		.word	_PACKS
 1692 113c 05       	_DIGIT:	.byte  5
 1693 113d 44494749 		.ascii "DIGIT"
 1693      54
 1694 1142 00BF     		.p2align 2 	
 1695              	DIGIT:
 1696 1144 504700BF 		_NEST
 1697 1148 5D070000 		_DOLIT 9
 1697      09000000 
 1698 1150 B5080000 		_ADR	OVER
 1699 1154 4D0B0000 		_ADR	LESS
 1700 1158 5D070000 		_DOLIT	7
 1700      07000000 
 1701 1160 D5080000 		_ADR	ANDD
 1702 1164 55090000 		_ADR	PLUS
 1703 1168 5D070000 		_DOLIT	'0'
 1703      30000000 
 1704 1170 55090000 		_ADR	PLUS 
 1705 1174 F3050000 		_UNNEST
 1706              	
ARM GAS  forth.s 			page 61


 1707              	//    EXTRACT	( n base -- n c )
 1708              	// 	Extract the least significant digit from n.
 1709              	
 1710 1178 3C110000 		.word	_DIGIT
 1711 117c 07       	_EXTRC:	.byte  7
 1712 117d 45585452 		.ascii "EXTRACT"
 1712      414354
 1713              		.p2align 2 	
 1714              	EXTRC:
 1715 1184 504700BF 		_NEST
 1716 1188 5D070000 		_DOLIT 0
 1716      00000000 
 1717 1190 A1080000 		_ADR	SWAP
 1718 1194 DD0D0000 		_ADR	UMMOD
 1719 1198 A1080000 		_ADR	SWAP
 1720 119c 45110000 		_ADR	DIGIT
 1721 11a0 F3050000 		_UNNEST
 1722              	
 1723              	//    <#	  ( -- )
 1724              	// 	Initiate the numeric output process.
 1725              	
 1726 11a4 7C110000 		.word	_EXTRC
 1727 11a8 02       	_BDIGS:	.byte  2
 1728 11a9 3C23     		.ascii "<#"
 1729 11ab 00       		.p2align 2 	
 1730              	BDIGS:
 1731 11ac 504700BF 		_NEST
 1732 11b0 F50F0000 		_ADR	PAD
 1733 11b4 F50C0000 		_ADR	HLD
 1734 11b8 D1070000 		_ADR	STORE
 1735 11bc F3050000 		_UNNEST
 1736              	
 1737              	//    HOLD	( c -- )
 1738              	// 	Insert a character into the numeric output string.
 1739              	
 1740 11c0 A8110000 		.word	_BDIGS
 1741 11c4 04       	_HOLD:	.byte  4
 1742 11c5 484F4C44 		.ascii "HOLD"
 1743 11c9 0000BF   		.p2align 2 	
 1744              	HOLD:
 1745 11cc 504700BF 		_NEST
 1746 11d0 F50C0000 		_ADR	HLD
 1747 11d4 E5070000 		_ADR	AT
 1748 11d8 C1090000 		_ADR	ONEM
 1749 11dc 91080000 		_ADR	DUPP
 1750 11e0 F50C0000 		_ADR	HLD
 1751 11e4 D1070000 		_ADR	STORE
 1752 11e8 F1070000 		_ADR	CSTOR
 1753 11ec F3050000 		_UNNEST
 1754              	
 1755              	//    #	   ( u -- u )
 1756              	// 	Extract one digit from u and append the digit to output string.
 1757              	
 1758 11f0 C4110000 		.word	_HOLD
 1759 11f4 01       	_DIG:	.byte  1
 1760 11f5 23       		.ascii "#"
 1761 11f6 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 62


 1762              	DIG:
 1763 11f8 504700BF 		_NEST
 1764 11fc 850C0000 		_ADR	BASE
 1765 1200 E5070000 		_ADR	AT
 1766 1204 85110000 		_ADR	EXTRC
 1767 1208 CD110000 		_ADR	HOLD
 1768 120c F3050000 		_UNNEST
 1769              	
 1770              	//    #S	  ( u -- 0 )
 1771              	// 	Convert u until all digits are added to the output string.
 1772              	
 1773 1210 F4110000 		.word	_DIG
 1774 1214 02       	_DIGS:	.byte  2
 1775 1215 2353     		.ascii "#S"
 1776 1217 00       		.p2align 2 	
 1777              	DIGS:
 1778 1218 504700BF 		_NEST
 1779              	DIGS1:
 1780 121c F9110000 	    _ADR	DIG
 1781 1220 91080000 		_ADR	DUPP
 1782 1224 9F070000 		_QBRAN 	DIGS2
 1782      34120000 
 1783 122c B3070000 		_BRAN	DIGS1
 1783      1C120000 
 1784              	DIGS2:
 1785 1234 F3050000 		  _UNNEST
 1786              	
 1787              	//    SIGN	( n -- )
 1788              	// 	Add a minus sign to the numeric output string.
 1789              	
 1790 1238 14120000 		.word	_DIGS
 1791 123c 04       	_SIGN:	.byte  4
 1792 123d 5349474E 		.ascii "SIGN"
 1793 1241 0000BF   		.p2align 2 	
 1794              	SIGN:
 1795 1244 504700BF 		_NEST
 1796 1248 C5080000 		_ADR	ZLESS
 1797 124c 9F070000 		_QBRAN	SIGN1
 1797      60120000 
 1798 1254 5D070000 		_DOLIT '-'
 1798      2D000000 
 1799 125c CD110000 		_ADR	HOLD
 1800              	SIGN1:
 1801 1260 F3050000 		  _UNNEST
 1802              	
 1803              	//    #>	  ( w -- b u )
 1804              	// 	Prepare the output word to be TYPE'd.
 1805              	
 1806 1264 3C120000 		.word	_SIGN
 1807 1268 02       	_EDIGS:	.byte  2
 1808 1269 233E     		.ascii "#>"
 1809 126b 00       		.p2align 2 	
 1810              	EDIGS:
 1811 126c 504700BF 		_NEST
 1812 1270 81080000 		_ADR	DROP
 1813 1274 F50C0000 		_ADR	HLD
 1814 1278 E5070000 		_ADR	AT
ARM GAS  forth.s 			page 63


 1815 127c F50F0000 		_ADR	PAD
 1816 1280 B5080000 		_ADR	OVER
 1817 1284 65090000 		_ADR	SUBB
 1818 1288 F3050000 		_UNNEST
 1819              	
 1820              	//    str	 ( n -- b u )
 1821              	// 	Convert a signed integer to a numeric string.
 1822              	
 1823              	// 	.word	_EDIGS
 1824              	// _STRR	.byte  3
 1825              	// 	.ascii "str"
 1826              	// 	.p2align 2 	
 1827              	STRR:
 1828 128c 504700BF 		_NEST
 1829 1290 91080000 		_ADR	DUPP
 1830 1294 39080000 		_ADR	TOR
 1831 1298 F50A0000 		_ADR	ABSS
 1832 129c AD110000 		_ADR	BDIGS
 1833 12a0 19120000 		_ADR	DIGS
 1834 12a4 11080000 		_ADR	RFROM
 1835 12a8 45120000 		_ADR	SIGN
 1836 12ac 6D120000 		_ADR	EDIGS
 1837 12b0 F3050000 		_UNNEST
 1838              	
 1839              	//    HEX	 ( -- )
 1840              	// 	Use radix 16 as base for numeric conversions.
 1841              	
 1842 12b4 68120000 		.word	_EDIGS
 1843 12b8 03       	_HEX:	.byte  3
 1844 12b9 484558   		.ascii "HEX"
 1845              		.p2align 2 	
 1846              	HEX:
 1847 12bc 504700BF 		_NEST
 1848 12c0 5D070000 		_DOLIT 16
 1848      10000000 
 1849 12c8 850C0000 		_ADR	BASE
 1850 12cc D1070000 		_ADR	STORE
 1851 12d0 F3050000 		_UNNEST
 1852              	
 1853              	//    DECIMAL	( -- )
 1854              	// 	Use radix 10 as base for numeric conversions.
 1855              	
 1856 12d4 B8120000 		.word	_HEX
 1857 12d8 07       	_DECIM:	.byte  7
 1858 12d9 44454349 		.ascii "DECIMAL"
 1858      4D414C
 1859              		.p2align 2 	
 1860              	DECIM:
 1861 12e0 504700BF 		_NEST
 1862 12e4 5D070000 		_DOLIT 10
 1862      0A000000 
 1863 12ec 850C0000 		_ADR	BASE
 1864 12f0 D1070000 		_ADR	STORE
 1865 12f4 F3050000 		_UNNEST
 1866              	
 1867              	// **************************************************************************
 1868              	//  Numeric input, single precision
ARM GAS  forth.s 			page 64


 1869              	
 1870              	//    DIGIT?	( c base -- u t )
 1871              	// 	Convert a character to its numeric value. A flag indicates success.
 1872              	
 1873 12f8 D8120000 		.word	_DECIM
 1874 12fc 06       	_DIGTQ:	.byte  6
 1875 12fd 44494749 		.ascii "DIGIT?"
 1875      543F
 1876 1303 00       		.p2align 2 	
 1877              	DIGTQ:
 1878 1304 504700BF 		_NEST
 1879 1308 39080000 		_ADR	TOR
 1880 130c 5D070000 		_DOLIT 	'0'
 1880      30000000 
 1881 1314 65090000 		_ADR	SUBB
 1882 1318 5D070000 		_DOLIT 9
 1882      09000000 
 1883 1320 B5080000 		_ADR	OVER
 1884 1324 4D0B0000 		_ADR	LESS
 1885 1328 9F070000 		_QBRAN	DGTQ1
 1885      50130000 
 1886 1330 5D070000 		_DOLIT 7
 1886      07000000 
 1887 1338 65090000 		_ADR	SUBB
 1888 133c 91080000 		_ADR	DUPP
 1889 1340 5D070000 		_DOLIT	10
 1889      0A000000 
 1890 1348 4D0B0000 		_ADR	LESS
 1891 134c E9080000 		_ADR	ORR
 1892              	DGTQ1:
 1893 1350 91080000 		_ADR	DUPP
 1894 1354 11080000 		_ADR	RFROM
 1895 1358 350B0000 		_ADR	ULESS
 1896 135c F3050000 		_UNNEST
 1897              	
 1898              	//    NUMBER?	( a -- n T | a F )
 1899              	// 	Convert a number word to integer. Push a flag on tos.
 1900              	
 1901 1360 FC120000 		.word	_DIGTQ
 1902 1364 07       	_NUMBQ:	.byte  7
 1903 1365 4E554D42 		.ascii "NUMBER?"
 1903      45523F
 1904              		.p2align 2 	
 1905              	NUMBQ:
 1906 136c 504700BF 		_NEST
 1907 1370 850C0000 		_ADR	BASE
 1908 1374 E5070000 		_ADR	AT
 1909 1378 39080000 		_ADR	TOR
 1910 137c 5D070000 		_DOLIT	0
 1910      00000000 
 1911 1384 B5080000 		_ADR	OVER
 1912 1388 ED0B0000 		_ADR	COUNT
 1913 138c B5080000 		_ADR	OVER
 1914 1390 05080000 		_ADR	CAT
 1915 1394 5D070000 		_DOLIT '$'
 1915      24000000 
 1916 139c 1D0B0000 		_ADR	EQUAL
ARM GAS  forth.s 			page 65


 1917 13a0 9F070000 		_QBRAN	NUMQ1
 1917      BC130000 
 1918 13a8 BD120000 		_ADR	HEX
 1919 13ac A1080000 		_ADR	SWAP
 1920 13b0 B1090000 		_ADR	ONEP
 1921 13b4 A1080000 		_ADR	SWAP
 1922 13b8 C1090000 		_ADR	ONEM
 1923              	NUMQ1:
 1924 13bc B5080000 		_ADR	OVER
 1925 13c0 05080000 		_ADR	CAT
 1926 13c4 5D070000 		_DOLIT	'-'
 1926      2D000000 
 1927 13cc 1D0B0000 		_ADR	EQUAL
 1928 13d0 39080000 		_ADR	TOR
 1929 13d4 A1080000 		_ADR	SWAP
 1930 13d8 25080000 		_ADR	RAT
 1931 13dc 65090000 		_ADR	SUBB
 1932 13e0 A1080000 		_ADR	SWAP
 1933 13e4 25080000 		_ADR	RAT
 1934 13e8 55090000 		_ADR	PLUS
 1935 13ec 650A0000 		_ADR	QDUP
 1936 13f0 9F070000 		_QBRAN	NUMQ6
 1936      84140000 
 1937 13f8 C1090000 		_ADR	ONEM
 1938 13fc 39080000 		_ADR	TOR
 1939              	NUMQ2:
 1940 1400 91080000 		_ADR	DUPP
 1941 1404 39080000 		_ADR	TOR
 1942 1408 05080000 		_ADR	CAT
 1943 140c 850C0000 		_ADR	BASE
 1944 1410 E5070000 		_ADR	AT
 1945 1414 05130000 		_ADR	DIGTQ
 1946 1418 9F070000 		_QBRAN	NUMQ4
 1946      68140000 
 1947 1420 A1080000 		_ADR	SWAP
 1948 1424 850C0000 		_ADR	BASE
 1949 1428 E5070000 		_ADR	AT
 1950 142c 75090000 		_ADR	STAR
 1951 1430 55090000 		_ADR	PLUS
 1952 1434 11080000 		_ADR	RFROM
 1953 1438 B1090000 		_ADR	ONEP
 1954 143c 81070000 		_DONXT	NUMQ2
 1954      00140000 
 1955 1444 25080000 		_ADR	RAT
 1956 1448 A1080000 		_ADR	SWAP
 1957 144c 81080000 		_ADR	DROP
 1958 1450 9F070000 		_QBRAN	NUMQ3
 1958      5C140000 
 1959 1458 E50A0000 		_ADR	NEGAT
 1960              	NUMQ3:
 1961 145c A1080000 		_ADR	SWAP
 1962 1460 B3070000 		_BRAN	NUMQ5
 1962      80140000 
 1963              	NUMQ4:
 1964 1468 11080000 		_ADR	RFROM
 1965 146c 11080000 		_ADR	RFROM
 1966 1470 8D0A0000 		_ADR	DDROP
ARM GAS  forth.s 			page 66


 1967 1474 8D0A0000 		_ADR	DDROP
 1968 1478 5D070000 		_DOLIT	0
 1968      00000000 
 1969              	NUMQ5:
 1970 1480 91080000 		_ADR	DUPP
 1971              	NUMQ6:
 1972 1484 11080000 		_ADR	RFROM
 1973 1488 8D0A0000 		_ADR	DDROP
 1974 148c 11080000 		_ADR	RFROM
 1975 1490 850C0000 		_ADR	BASE
 1976 1494 D1070000 		_ADR	STORE
 1977 1498 F3050000 		_UNNEST
 1978              	
 1979              	// **************************************************************************
 1980              	//  Basic I/O
 1981              	
 1982              	//    KEY	 ( -- c )
 1983              	// 	Wait for and return an input character.
 1984              	
 1985 149c 64130000 		.word	_NUMBQ
 1986 14a0 03       	_KEY:	.byte  3
 1987 14a1 4B4559   		.ascii "KEY"
 1988              		.p2align 2 	
 1989              	KEY:
 1990 14a4 504700BF 		_NEST
 1991              	KEY1:
 1992 14a8 05070000 		_ADR	QRX
 1993 14ac 9F070000 		_QBRAN	KEY1
 1993      A8140000 
 1994 14b4 F3050000 		_UNNEST
 1995              	
 1996              	//    SPACE	( -- )
 1997              	// 	Send the blank character to the output device.
 1998              	
 1999 14b8 A0140000 		.word	_KEY
 2000 14bc 05       	_SPACE:	.byte  5
 2001 14bd 53504143 		.ascii "SPACE"
 2001      45
 2002 14c2 00BF     		.p2align 2 	
 2003              	SPACE:
 2004 14c4 504700BF 		_NEST
 2005 14c8 110A0000 		_ADR	BLANK
 2006 14cc 39070000 		_ADR	EMIT
 2007 14d0 F3050000 		_UNNEST
 2008              	
 2009              	//    SPACES	( +n -- )
 2010              	// 	Send n spaces to the output device.
 2011              	
 2012 14d4 BC140000 		.word	_SPACE
 2013 14d8 06       	_SPACS:	.byte  6
 2014 14d9 53504143 		.ascii "SPACES"
 2014      4553
 2015 14df 00       		.p2align 2 	
 2016              	SPACS:
 2017 14e0 504700BF 		_NEST
 2018 14e4 5D070000 		_DOLIT	0
 2018      00000000 
ARM GAS  forth.s 			page 67


 2019 14ec 7D0B0000 		_ADR	MAX
 2020 14f0 39080000 		_ADR	TOR
 2021 14f4 B3070000 		_BRAN	CHAR2
 2021      00150000 
 2022              	CHAR1:
 2023 14fc C5140000 		_ADR	SPACE
 2024              	CHAR2:
 2025 1500 81070000 		_DONXT	CHAR1
 2025      FC140000 
 2026 1508 F3050000 		_UNNEST
 2027              	
 2028              	//    TYPE	( b u -- )
 2029              	// 	Output u characters from b.
 2030              	
 2031 150c D8140000 		.word	_SPACS
 2032 1510 04       	_TYPEE:	.byte	4
 2033 1511 54595045 		.ascii "TYPE"
 2034 1515 0000BF   		.p2align 2 	
 2035              	TYPEE:
 2036 1518 504700BF 		_NEST
 2037 151c 39080000 		_ADR  TOR   // ( a+1 -- R: u )
 2038 1520 B3070000 		_BRAN	TYPE2
 2038      34150000 
 2039              	TYPE1:  
 2040 1528 ED0B0000 		_ADR  COUNT
 2041 152c 450F0000 		_ADR TCHAR
 2042 1530 39070000 		_ADR EMIT
 2043              	TYPE2:  
 2044 1534 81070000 		_DONXT	TYPE1
 2044      28150000 
 2045 153c 81080000 		_ADR	DROP
 2046 1540 F3050000 		_UNNEST
 2047              	
 2048              	//    CR	  ( -- )
 2049              	// 	Output a carriage return and a line feed.
 2050              	
 2051 1544 10150000 		.word	_TYPEE
 2052 1548 02       	_CR:	.byte  2
 2053 1549 4352     		.ascii "CR"
 2054 154b 00       		.p2align 2 	
 2055              	CR:
 2056 154c 504700BF 		_NEST
 2057 1550 5D070000 		_DOLIT	CRR
 2057      0D000000 
 2058 1558 39070000 		_ADR	EMIT
 2059 155c 5D070000 		_DOLIT	LF
 2059      0A000000 
 2060 1564 39070000 		_ADR	EMIT
 2061 1568 F3050000 		_UNNEST
 2062              	
 2063              	//    do_$	( -- a )
 2064              	// 	Return the address of a compiled string.
 2065              	//  adjust return address to skip over it.
 2066              	
 2067              	// 	.word	_CR
 2068              	// _DOSTR	.byte  COMPO+3
 2069              	// 	.ascii "do$$"
ARM GAS  forth.s 			page 68


 2070              	// 	.p2align 2 	
 2071              	DOSTR:
 2072 156c 504700BF 		_NEST     
 2073              	/* compiled string address is 2 levels deep */
 2074 1570 11080000 		_ADR	RFROM	// { -- a1 }
 2075 1574 11080000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2076 1578 91080000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2077 157c ED0B0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2078 1580 55090000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2079 1584 290F0000 		_ADR	ALGND	//  end of string
 2080              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2081 1588 39080000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2082 158c A1080000 		_ADR	SWAP	//  count tugged
 2083 1590 39080000 		_ADR	TOR     //  ( -- a2) is string address
 2084 1594 F3050000 		_UNNEST
 2085              	
 2086              	//    $"|	( -- a )
 2087              	// 	Run time routine compiled by _". Return address of a compiled string.
 2088              	
 2089              	// 	.word	_DOSTR
 2090              	// _STRQP	.byte  COMPO+3
 2091              	// 	.ascii "$\"|"
 2092              	// 	.p2align 2 	
 2093              	STRQP:
 2094 1598 504700BF 		_NEST
 2095 159c 6D150000 		_ADR	DOSTR
 2096 15a0 F3050000 		_UNNEST			// force a call to dostr
 2097              	
 2098              	//    .$	( a -- )
 2099              	// 	Run time routine of ." . Output a compiled string.
 2100              	
 2101              	// 	.word	_STRQP
 2102              	// _DOTST	.byte  COMPO+2
 2103              	// 	.ascii ".$$"
 2104              	// 	.p2align 2 	
 2105              	DOTST:
 2106 15a4 504700BF 		_NEST
 2107 15a8 ED0B0000 		_ADR	COUNT // ( -- a+1 c )
 2108 15ac 19150000 		_ADR	TYPEE
 2109 15b0 F3050000 		_UNNEST
 2110              	
 2111              	//    ."|	( -- )
 2112              	// 	Run time routine of ." . Output a compiled string.
 2113              	
 2114              	// 	.word	_DOTST
 2115              	// _DOTQP	.byte  COMPO+3
 2116              	// 	.ascii ".""|"
 2117              	// 	.p2align 2 	
 2118              	DOTQP:
 2119 15b4 504700BF 		_NEST
 2120 15b8 6D150000 		_ADR	DOSTR
 2121 15bc A5150000 		_ADR	DOTST
 2122 15c0 F3050000 		_UNNEST
 2123              	
 2124              	//    .R	  ( n +n -- )
 2125              	// 	Display an integer in a field of n columns, right justified.
 2126              	
ARM GAS  forth.s 			page 69


 2127 15c4 48150000 		.word	_CR
 2128 15c8 02       	_DOTR:	.byte  2
 2129 15c9 2E52     		.ascii ".R"
 2130 15cb 00       		.p2align 2 	
 2131              	DOTR:
 2132 15cc 504700BF 		_NEST
 2133 15d0 39080000 		_ADR	TOR
 2134 15d4 8D120000 		_ADR	STRR
 2135 15d8 11080000 		_ADR	RFROM
 2136 15dc B5080000 		_ADR	OVER
 2137 15e0 65090000 		_ADR	SUBB
 2138 15e4 E1140000 		_ADR	SPACS
 2139 15e8 19150000 		_ADR	TYPEE
 2140 15ec F3050000 		_UNNEST
 2141              	
 2142              	//    U.R	 ( u +n -- )
 2143              	// 	Display an unsigned integer in n column, right justified.
 2144              	
 2145 15f0 C8150000 		.word	_DOTR
 2146 15f4 03       	_UDOTR:	.byte  3
 2147 15f5 552E52   		.ascii "U.R"
 2148              		.p2align 2 	
 2149              	UDOTR:
 2150 15f8 504700BF 		_NEST
 2151 15fc 39080000 		_ADR	TOR
 2152 1600 AD110000 		_ADR	BDIGS
 2153 1604 19120000 		_ADR	DIGS
 2154 1608 6D120000 		_ADR	EDIGS
 2155 160c 11080000 		_ADR	RFROM
 2156 1610 B5080000 		_ADR	OVER
 2157 1614 65090000 		_ADR	SUBB
 2158 1618 E1140000 		_ADR	SPACS
 2159 161c 19150000 		_ADR	TYPEE
 2160 1620 F3050000 		_UNNEST
 2161              	
 2162              	//    U.	  ( u -- )
 2163              	// 	Display an unsigned integer in free format.
 2164              	
 2165 1624 F4150000 		.word	_UDOTR
 2166 1628 02       	_UDOT:	.byte  2
 2167 1629 552E     		.ascii "U."
 2168 162b 00       		.p2align 2 	
 2169              	UDOT:
 2170 162c 504700BF 		_NEST
 2171 1630 AD110000 		_ADR	BDIGS
 2172 1634 19120000 		_ADR	DIGS
 2173 1638 6D120000 		_ADR	EDIGS
 2174 163c C5140000 		_ADR	SPACE
 2175 1640 19150000 		_ADR	TYPEE
 2176 1644 F3050000 		_UNNEST
 2177              	
 2178              	//    .	   ( w -- )
 2179              	// 	Display an integer in free format, preceeded by a space.
 2180              	
 2181 1648 28160000 		.word	_UDOT
 2182 164c 01       	_DOT:	.byte  1
 2183 164d 2E       		.ascii "."
ARM GAS  forth.s 			page 70


 2184 164e 00BF     		.p2align 2 	
 2185              	DOT:
 2186 1650 504700BF 		_NEST
 2187 1654 850C0000 		_ADR	BASE
 2188 1658 E5070000 		_ADR	AT
 2189 165c 5D070000 		_DOLIT 10
 2189      0A000000 
 2190 1664 FD080000 		_ADR	XORR			// ?decimal
 2191 1668 9F070000 		_QBRAN	DOT1
 2191      78160000 
 2192 1670 2D160000 		_ADR	UDOT
 2193 1674 F3050000 		_UNNEST			// no,display unsigned
 2194              	DOT1:
 2195 1678 8D120000 	    _ADR	STRR
 2196 167c C5140000 		_ADR	SPACE
 2197 1680 19150000 		_ADR	TYPEE
 2198 1684 F3050000 		_UNNEST			// yes, display signed
 2199              	
 2200              	//    ?	   ( a -- )
 2201              	// 	Display the contents in a memory cell.
 2202              	
 2203 1688 4C160000 		.word	_DOT
 2204 168c 01       	_QUEST:	.byte  1
 2205 168d 3F       		.ascii "?"
 2206 168e 00BF     		.p2align 2 	
 2207              	QUEST:
 2208 1690 504700BF 		_NEST
 2209 1694 E5070000 		_ADR	AT
 2210 1698 51160000 		_ADR	DOT
 2211 169c F3050000 		_UNNEST
 2212              	
 2213              	// **************************************************************************
 2214              	//  Parsing
 2215              	
 2216              	//    parse	( b u c -- b u delta //  string> )
 2217              	// 	Scan word delimited by c. Return found string and its offset.
 2218              	
 2219              	// 	.word	_QUEST
 2220              	// _PARS	.byte  5
 2221              	// 	.ascii "parse"
 2222              	// 	.p2align 2 	
 2223              	PARS:
 2224 16a0 504700BF 		_NEST
 2225 16a4 8F0C0000 		_ADR	TEMP
 2226 16a8 D1070000 		_ADR	STORE
 2227 16ac B5080000 		_ADR	OVER
 2228 16b0 39080000 		_ADR	TOR
 2229 16b4 91080000 		_ADR	DUPP
 2230 16b8 9F070000 		_QBRAN	PARS8
 2230      B4170000 
 2231 16c0 C1090000 		_ADR	ONEM
 2232 16c4 8F0C0000 		_ADR	TEMP
 2233 16c8 E5070000 		_ADR	AT
 2234 16cc 110A0000 		_ADR	BLANK
 2235 16d0 1D0B0000 		_ADR	EQUAL
 2236 16d4 9F070000 		_QBRAN	PARS3
 2236      28170000 
ARM GAS  forth.s 			page 71


 2237 16dc 39080000 		_ADR	TOR
 2238              	PARS1:
 2239 16e0 110A0000 		_ADR	BLANK
 2240 16e4 B5080000 		_ADR	OVER
 2241 16e8 05080000 		_ADR	CAT			// skip leading blanks 
 2242 16ec 65090000 		_ADR	SUBB
 2243 16f0 C5080000 		_ADR	ZLESS
 2244 16f4 D10A0000 		_ADR	INVER
 2245 16f8 9F070000 		_QBRAN	PARS2
 2245      24170000 
 2246 1700 B1090000 		_ADR	ONEP
 2247 1704 81070000 		_DONXT	PARS1
 2247      E0160000 
 2248 170c 11080000 		_ADR	RFROM
 2249 1710 81080000 		_ADR	DROP
 2250 1714 5D070000 		_DOLIT	0
 2250      00000000 
 2251 171c 91080000 		_ADR	DUPP
 2252 1720 F3050000 		_UNNEST
 2253              	PARS2:
 2254 1724 11080000 		_ADR	RFROM
 2255              	PARS3:
 2256 1728 B5080000 		_ADR	OVER
 2257 172c A1080000 		_ADR	SWAP
 2258 1730 39080000 		_ADR	TOR
 2259              	PARS4:
 2260 1734 8F0C0000 		_ADR	TEMP
 2261 1738 E5070000 		_ADR	AT
 2262 173c B5080000 		_ADR	OVER
 2263 1740 05080000 		_ADR	CAT
 2264 1744 65090000 		_ADR	SUBB			// scan for delimiter
 2265 1748 8F0C0000 		_ADR	TEMP
 2266 174c E5070000 		_ADR	AT
 2267 1750 110A0000 		_ADR	BLANK
 2268 1754 1D0B0000 		_ADR	EQUAL
 2269 1758 9F070000 		_QBRAN	PARS5
 2269      64170000 
 2270 1760 C5080000 		_ADR	ZLESS
 2271              	PARS5:
 2272 1764 9F070000 		_QBRAN	PARS6
 2272      88170000 
 2273 176c B1090000 		_ADR	ONEP
 2274 1770 81070000 		_DONXT	PARS4
 2274      34170000 
 2275 1778 91080000 		_ADR	DUPP
 2276 177c 39080000 		_ADR	TOR
 2277 1780 B3070000 		_BRAN	PARS7
 2277      9C170000 
 2278              	PARS6:
 2279 1788 11080000 		_ADR	RFROM
 2280 178c 81080000 		_ADR	DROP
 2281 1790 91080000 		_ADR	DUPP
 2282 1794 B1090000 		_ADR	ONEP
 2283 1798 39080000 		_ADR	TOR
 2284              	PARS7:
 2285 179c B5080000 		_ADR	OVER
 2286 17a0 65090000 		_ADR	SUBB
ARM GAS  forth.s 			page 72


 2287 17a4 11080000 		_ADR	RFROM
 2288 17a8 11080000 		_ADR	RFROM
 2289 17ac 65090000 		_ADR	SUBB
 2290 17b0 F3050000 		_UNNEST
 2291              	PARS8:
 2292 17b4 B5080000 		_ADR	OVER
 2293 17b8 11080000 		_ADR	RFROM
 2294 17bc 65090000 		_ADR	SUBB
 2295 17c0 F3050000 		_UNNEST
 2296              	
 2297              	//    PARSE	( c -- b u //  string> )
 2298              	// 	Scan input stream and return counted string delimited by c.
 2299              	
 2300 17c4 8C160000 		.word	_QUEST
 2301 17c8 05       	_PARSE:	.byte  5
 2302 17c9 50415253 		.ascii "PARSE"
 2302      45
 2303 17ce 00BF     		.p2align 2 	
 2304              	PARSE:
 2305 17d0 504700BF 		_NEST
 2306 17d4 39080000 		_ADR	TOR
 2307 17d8 15100000 		_ADR	TIB
 2308 17dc B90C0000 		_ADR	INN
 2309 17e0 E5070000 		_ADR	AT
 2310 17e4 55090000 		_ADR	PLUS			// current input buffer pointer
 2311 17e8 CD0C0000 		_ADR	NTIB
 2312 17ec E5070000 		_ADR	AT
 2313 17f0 B90C0000 		_ADR	INN
 2314 17f4 E5070000 		_ADR	AT
 2315 17f8 65090000 		_ADR	SUBB			// remaining count
 2316 17fc 11080000 		_ADR	RFROM
 2317 1800 A1160000 		_ADR	PARS
 2318 1804 B90C0000 		_ADR	INN
 2319 1808 A50B0000 		_ADR	PSTOR
 2320 180c F3050000 		_UNNEST
 2321              	
 2322              	//    .(	  ( -- )
 2323              	// 	Output following string up to next ) .
 2324              	
 2325 1810 C8170000 		.word	_PARSE
 2326 1814 82       	_DOTPR:	.byte  IMEDD+2
 2327 1815 2E28     		.ascii ".("
 2328 1817 00       		.p2align 2 	
 2329              	DOTPR:
 2330 1818 504700BF 		_NEST
 2331 181c 5D070000 		_DOLIT	')'
 2331      29000000 
 2332 1824 D1170000 		_ADR	PARSE
 2333 1828 19150000 		_ADR	TYPEE
 2334 182c F3050000 		_UNNEST
 2335              	
 2336              	//    (	   ( -- )
 2337              	// 	Ignore following string up to next ) . A comment.
 2338              	
 2339 1830 14180000 		.word	_DOTPR
 2340 1834 81       	_PAREN:	.byte  IMEDD+1
 2341 1835 28       		.ascii "("
ARM GAS  forth.s 			page 73


 2342 1836 00BF     		.p2align 2 	
 2343              	PAREN:
 2344 1838 504700BF 		_NEST
 2345 183c 5D070000 		_DOLIT	')'
 2345      29000000 
 2346 1844 D1170000 		_ADR	PARSE
 2347 1848 8D0A0000 		_ADR	DDROP
 2348 184c F3050000 		_UNNEST
 2349              	
 2350              	//    \	   ( -- )
 2351              	// 	Ignore following text till the end of line.
 2352              	
 2353 1850 34180000 		.word	_PAREN
 2354 1854 81       	_BKSLA:	.byte  IMEDD+1
 2355 1855 5C       		.byte	'\\'
 2356 1856 00BF     		.p2align 2 	
 2357              	BKSLA:
 2358 1858 504700BF 		_NEST
 2359 185c CD0C0000 		_ADR	NTIB
 2360 1860 E5070000 		_ADR	AT
 2361 1864 B90C0000 		_ADR	INN
 2362 1868 D1070000 		_ADR	STORE
 2363 186c F3050000 		_UNNEST
 2364              	
 2365              	//    CHAR	( -- c )
 2366              	// 	Parse next word and return its first character.
 2367              	
 2368 1870 54180000 		.word	_BKSLA
 2369 1874 04       	_CHAR:	.byte  4
 2370 1875 43484152 		.ascii "CHAR"
 2371 1879 0000BF   		.p2align 2 	
 2372              	CHAR:
 2373 187c 504700BF 		_NEST
 2374 1880 110A0000 		_ADR	BLANK
 2375 1884 D1170000 		_ADR	PARSE
 2376 1888 81080000 		_ADR	DROP
 2377 188c 05080000 		_ADR	CAT
 2378 1890 F3050000 		_UNNEST
 2379              	
 2380              	//    WORD	( c -- a //  string> )
 2381              	// 	Parse a word from input stream and copy it to code dictionary.
 2382              	
 2383 1894 74180000 		.word	_CHAR
 2384 1898 04       	_WORDD:	.byte  4
 2385 1899 574F5244 		.ascii "WORD"
 2386 189d 0000BF   		.p2align 2 	
 2387              	WORDD:
 2388 18a0 504700BF 		_NEST
 2389 18a4 D1170000 		_ADR	PARSE
 2390 18a8 DD0F0000 		_ADR	HERE
 2391 18ac F1090000 		_ADR	CELLP
 2392 18b0 E1100000 		_ADR	PACKS
 2393 18b4 F3050000 		_UNNEST
 2394              	
 2395              	//    TOKEN	( -- a //  string> )
 2396              	// 	Parse a word from input stream and copy it to name dictionary.
 2397              	
ARM GAS  forth.s 			page 74


 2398 18b8 98180000 		.word	_WORDD
 2399 18bc 05       	_TOKEN:	.byte  5
 2400 18bd 544F4B45 		.ascii "TOKEN"
 2400      4E
 2401 18c2 00BF     		.p2align 2 	
 2402              	TOKEN:
 2403 18c4 504700BF 		_NEST
 2404 18c8 110A0000 		_ADR	BLANK
 2405 18cc A1180000 		_ADR	WORDD
 2406 18d0 F3050000 		_UNNEST
 2407              	
 2408              	// **************************************************************************
 2409              	//  Dictionary search
 2410              	
 2411              	//    NAME>	( na -- ca )
 2412              	// 	Return a code address given a name address.
 2413              	
 2414 18d4 BC180000 		.word	_TOKEN
 2415 18d8 05       	_NAMET:	.byte  5
 2416 18d9 4E414D45 		.ascii "NAME>"
 2416      3E
 2417 18de 00BF     		.p2align 2 	
 2418              	NAMET:
 2419 18e0 504700BF 		_NEST
 2420 18e4 ED0B0000 		_ADR	COUNT
 2421 18e8 5D070000 		_DOLIT	0x1F
 2421      1F000000 
 2422 18f0 D5080000 		_ADR	ANDD
 2423 18f4 55090000 		_ADR	PLUS
 2424 18f8 290F0000 		_ADR	ALGND
 2425 18fc F3050000 		_UNNEST
 2426              	
 2427              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2428              	// 	Compare u bytes in two strings. Return 0 if identical.
 2429              	//
 2430              	//  Picatout 2020-12-01, 
 2431              	//      Because of problem with .align directive that
 2432              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2433              	// 		words  to do a byte by byte comparison. 
 2434              	//
 2435 1900 D8180000 		.word	_NAMET
 2436 1904 05       	_SAMEQ:	.byte  5
 2437 1905 53414D45 		.ascii "SAME?"
 2437      3F
 2438 190a 00BF     		.p2align 2	
 2439              	SAMEQ:
 2440 190c 504700BF 		_NEST
 2441 1910 39080000 		_ADR	TOR
 2442 1914 B3070000 		_BRAN	SAME2
 2442      58190000 
 2443              	SAME1:
 2444 191c B5080000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2445 1920 25080000 		_ADR	RAT   // a1 a2 a1 u 
 2446 1924 55090000 		_ADR	PLUS  // a1 a2 a1+u 
 2447 1928 05080000 		_ADR	CAT	   // a1 a2 c1    		
 2448 192c B5080000 		_ADR	OVER  // a1 a2 c1 a2 
 2449 1930 25080000 		_ADR	RAT    
ARM GAS  forth.s 			page 75


 2450 1934 55090000 		_ADR	PLUS    
 2451 1938 05080000 		_ADR	CAT	  // a1 a2 c1 c2
 2452 193c 65090000 		_ADR	SUBB  
 2453 1940 650A0000 		_ADR	QDUP
 2454 1944 9F070000 		_QBRAN	SAME2
 2454      58190000 
 2455 194c 11080000 		_ADR	RFROM
 2456 1950 81080000 		_ADR	DROP
 2457 1954 F3050000 		_UNNEST	// strings not equal
 2458              	SAME2:
 2459 1958 81070000 		_DONXT	SAME1
 2459      1C190000 
 2460 1960 5D070000 		_DOLIT	0
 2460      00000000 
 2461 1968 F3050000 		_UNNEST	// strings equal
 2462              	
 2463              	//    find	( a na -- ca na | a F )
 2464              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2465              	
 2466              	//  Picatout 2020-12-01,  
 2467              	//		Modified from original. See comment for word "SAME?" 
 2468              	
 2469              	// 	.word	_SAMEQ
 2470              	// _FIND	.byte  4
 2471              	// 	.ascii "find"
 2472              	// 	.p2align 2 	
 2473              	FIND:
 2474 196c 504700BF 		_NEST
 2475 1970 A1080000 		_ADR	SWAP			// na a	
 2476 1974 ED0B0000 		_ADR	COUNT			// na a+1 count
 2477 1978 91080000 		_ADR	DUPP 
 2478 197c 8F0C0000 		_ADR	TEMP
 2479 1980 D1070000 		_ADR	STORE			// na a+1 count 
 2480 1984 39080000 		_ADR  TOR		// na a+1  R: count  
 2481 1988 A1080000 		_ADR	SWAP			// a+1 na
 2482              	FIND1:
 2483 198c 91080000 		_ADR	DUPP			// a+1 na na
 2484 1990 9F070000 		_QBRAN	FIND6	// end of vocabulary
 2484      E4190000 
 2485 1998 91080000 		_ADR	DUPP			// a+1 na na
 2486 199c 05080000 		_ADR	CAT			// a+1 na name1
 2487 19a0 5D070000 		_DOLIT	MASKK
 2487      1FFFFFFF 
 2488 19a8 D5080000 		_ADR	ANDD
 2489 19ac 25080000 		_ADR	RAT			// a+1 na name1 count 
 2490 19b0 FD080000 		_ADR	XORR			// a+1 na,  same length?
 2491 19b4 9F070000 		_QBRAN	FIND2
 2491      CC190000 
 2492 19bc 010A0000 		_ADR	CELLM			// a+1 la
 2493 19c0 E5070000 		_ADR	AT			// a+1 next_na
 2494 19c4 B3070000 		_BRAN	FIND1			// try next word
 2494      8C190000 
 2495              	FIND2:   
 2496 19cc B1090000 		_ADR	ONEP			// a+1 na+1
 2497 19d0 8F0C0000 		_ADR	TEMP
 2498 19d4 E5070000 		_ADR	AT			// a+1 na+1 count
 2499 19d8 0D190000 		_ADR	SAMEQ		// a+1 na+1 ? 
ARM GAS  forth.s 			page 76


 2500              	FIND3:	
 2501 19dc B3070000 		_BRAN	FIND4
 2501      FC190000 
 2502              	FIND6:	
 2503 19e4 11080000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2504 19e8 81080000 		_ADR	DROP			// a+1 0
 2505 19ec A1080000 		_ADR	SWAP			// 0 a+1
 2506 19f0 C1090000 		_ADR	ONEM			// 0 a
 2507 19f4 A1080000 		_ADR	SWAP			// a 0 
 2508 19f8 F3050000 		_UNNEST			// return without a match
 2509              	FIND4:	
 2510 19fc 9F070000 		_QBRAN	FIND5			// a+1 na+1
 2510      181A0000 
 2511 1a04 C1090000 		_ADR	ONEM			// a+1 na
 2512 1a08 010A0000 		_ADR	CELLM			// a+4 la
 2513 1a0c E5070000 		_ADR	AT			// a+1 next_na
 2514 1a10 B3070000 		_BRAN	FIND1			// compare next name
 2514      8C190000 
 2515              	FIND5:	
 2516 1a18 11080000 		_ADR	RFROM			// a+1 na+1 count
 2517 1a1c 81080000 		_ADR	DROP			// a+1 na+1
 2518 1a20 A1080000 		_ADR	SWAP			// na+1 a+1
 2519 1a24 81080000 		_ADR	DROP			// na+1
 2520 1a28 C1090000 		_ADR	ONEM			// na
 2521 1a2c 91080000 		_ADR	DUPP			// na na
 2522 1a30 E1180000 		_ADR	NAMET			// na ca
 2523 1a34 A1080000 		_ADR	SWAP			// ca na
 2524 1a38 F3050000 		_UNNEST			//  return with a match
 2525              	
 2526              	//    NAME?	( a -- ca na | a F )
 2527              	// 	Search all context vocabularies for a string.
 2528              	
 2529 1a3c 04190000 		.word	_SAMEQ
 2530 1a40 05       	_NAMEQ:	.byte  5
 2531 1a41 4E414D45 		.ascii "NAME?"
 2531      3F
 2532 1a46 00BF     		.p2align 2 	
 2533              	NAMEQ:
 2534 1a48 504700BF 		_NEST
 2535 1a4c 0D0D0000 		_ADR	CNTXT
 2536 1a50 E5070000 		_ADR	AT
 2537 1a54 6D190000 		_ADR	FIND
 2538 1a58 F3050000 		_UNNEST
 2539              	
 2540              	// **************************************************************************
 2541              	//  Terminal input
 2542              	
 2543              	//    	  ( bot eot cur -- bot eot cur )
 2544              	// 	Backup the cursor by one character.
 2545              	
 2546              	// 	.word	_NAMEQ
 2547              	// _BKSP	.byte  2
 2548              	// 	.ascii "^H"
 2549              	// 	.p2align 2 	
 2550              	BKSP:
 2551 1a5c 504700BF 		_NEST
 2552 1a60 39080000 		_ADR	TOR
ARM GAS  forth.s 			page 77


 2553 1a64 B5080000 		_ADR	OVER
 2554 1a68 11080000 		_ADR	RFROM
 2555 1a6c A1080000 		_ADR	SWAP
 2556 1a70 B5080000 		_ADR	OVER
 2557 1a74 FD080000 		_ADR	XORR
 2558 1a78 9F070000 		_QBRAN	BACK1
 2558      A41A0000 
 2559 1a80 5D070000 		_DOLIT	BKSPP
 2559      08000000 
 2560 1a88 39070000 		_ADR	TECHO
 2561 1a8c C1090000 		_ADR	ONEM
 2562 1a90 110A0000 		_ADR	BLANK
 2563 1a94 39070000 		_ADR	TECHO
 2564 1a98 5D070000 		_DOLIT	BKSPP
 2564      08000000 
 2565 1aa0 39070000 		_ADR	TECHO
 2566              	BACK1:
 2567 1aa4 F3050000 		  _UNNEST
 2568              	
 2569              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2570              	// 	Accept and echo the key stroke and bump the cursor.
 2571              	
 2572              	// 	.word	_BKSP
 2573              	// _TAP	.byte  3
 2574              	// 	.ascii "TAP"
 2575              	// 	.p2align 2 	
 2576              	TAP:
 2577 1aa8 504700BF 		_NEST
 2578 1aac 91080000 		_ADR	DUPP
 2579 1ab0 39070000 		_ADR	TECHO
 2580 1ab4 B5080000 		_ADR	OVER
 2581 1ab8 F1070000 		_ADR	CSTOR
 2582 1abc B1090000 		_ADR	ONEP
 2583 1ac0 F3050000 		_UNNEST
 2584              	
 2585              	//    kTAP	( bot eot cur c -- bot eot cur )
 2586              	// 	Process a key stroke, CR or backspace.
 2587              	
 2588              	// 	.word	_TAP
 2589              	// _KTAP	.byte  4
 2590              	// 	.ascii "kTAP"
 2591              	// 	.p2align 2 	
 2592              	KTAP:
 2593              	TTAP:
 2594 1ac4 504700BF 		_NEST
 2595 1ac8 91080000 		_ADR	DUPP
 2596 1acc 5D070000 		_DOLIT	CRR
 2596      0D000000 
 2597 1ad4 FD080000 		_ADR	XORR
 2598 1ad8 9F070000 		_QBRAN  KTAP2
 2598      081B0000 
 2599 1ae0 5D070000 		_DOLIT	BKSPP
 2599      08000000 
 2600 1ae8 FD080000 		_ADR	XORR
 2601 1aec 9F070000 		_QBRAN	KTAP1
 2601      001B0000 
 2602 1af4 110A0000 		_ADR	BLANK
ARM GAS  forth.s 			page 78


 2603 1af8 A91A0000 		_ADR	TAP
 2604 1afc F3050000 		_UNNEST
 2605              	//	.word	0			// patch
 2606              	KTAP1:
 2607 1b00 5D1A0000 		_ADR	BKSP
 2608 1b04 F3050000 		_UNNEST
 2609              	KTAP2:
 2610 1b08 81080000 		_ADR	DROP
 2611 1b0c A1080000 		_ADR	SWAP
 2612 1b10 81080000 		_ADR	DROP
 2613 1b14 91080000 		_ADR	DUPP
 2614 1b18 F3050000 		_UNNEST
 2615              	
 2616              	//    ACCEPT	( b u -- b u )
 2617              	// 	Accept characters to input buffer. Return with actual count.
 2618              	
 2619 1b1c 401A0000 		.word	_NAMEQ
 2620 1b20 06       	_ACCEP:	.byte  6
 2621 1b21 41434345 		.ascii "ACCEPT"
 2621      5054
 2622 1b27 00       		.p2align 2 	
 2623              	ACCEP:
 2624 1b28 504700BF 		_NEST
 2625 1b2c B5080000 		_ADR	OVER
 2626 1b30 55090000 		_ADR	PLUS
 2627 1b34 B5080000 		_ADR	OVER
 2628              	ACCP1:
 2629 1b38 A10A0000 		_ADR	DDUP
 2630 1b3c FD080000 		_ADR	XORR
 2631 1b40 9F070000 		_QBRAN	ACCP4
 2631      801B0000 
 2632 1b48 A5140000 		_ADR	KEY
 2633 1b4c 91080000 		_ADR	DUPP
 2634 1b50 110A0000 		_ADR	BLANK
 2635 1b54 5D070000 		_DOLIT 127
 2635      7F000000 
 2636 1b5c B10D0000 		_ADR	WITHI
 2637 1b60 9F070000 		_QBRAN	ACCP2
 2637      741B0000 
 2638 1b68 A91A0000 		_ADR	TAP
 2639 1b6c B3070000 		_BRAN	ACCP3
 2639      781B0000 
 2640              	ACCP2:
 2641 1b74 C51A0000 		_ADR	KTAP
 2642              	ACCP3:	  
 2643 1b78 B3070000 		_BRAN	ACCP1
 2643      381B0000 
 2644              	ACCP4:
 2645 1b80 81080000 		_ADR	DROP
 2646 1b84 B5080000 		_ADR	OVER
 2647 1b88 65090000 		_ADR	SUBB
 2648 1b8c F3050000 		_UNNEST
 2649              	
 2650              	//    QUERY	( -- )
 2651              	// 	Accept input stream to terminal input buffer.
 2652              	
 2653 1b90 201B0000 		.word	_ACCEP
ARM GAS  forth.s 			page 79


 2654 1b94 05       	_QUERY:	.byte  5
 2655 1b95 51554552 		.ascii "QUERY"
 2655      59
 2656 1b9a 00BF     		.p2align 2 	
 2657              	QUERY:
 2658 1b9c 504700BF 		_NEST
 2659 1ba0 15100000 		_ADR	TIB
 2660 1ba4 5D070000 		_DOLIT 80
 2660      50000000 
 2661 1bac 291B0000 		_ADR	ACCEP
 2662 1bb0 CD0C0000 		_ADR	NTIB
 2663 1bb4 D1070000 		_ADR	STORE
 2664 1bb8 81080000 		_ADR	DROP
 2665 1bbc 5D070000 		_DOLIT	0
 2665      00000000 
 2666 1bc4 B90C0000 		_ADR	INN
 2667 1bc8 D1070000 		_ADR	STORE
 2668 1bcc F3050000 		_UNNEST
 2669              	
 2670              	// **************************************************************************
 2671              	//  Error handling
 2672              	
 2673              	//    ABORT	( a -- )
 2674              	// 	Reset data stack and jump to QUIT.
 2675              	
 2676 1bd0 941B0000 		.word	_QUERY
 2677 1bd4 05       	_ABORT:	.byte  5
 2678 1bd5 41424F52 		.ascii "ABORT"
 2678      54
 2679 1bda 00BF     		.p2align 2 	
 2680              	ABORT:
 2681 1bdc 504700BF 		_NEST
 2682              	ABORT1:
 2683 1be0 C5140000 		_ADR	SPACE
 2684 1be4 ED0B0000 		_ADR	COUNT
 2685 1be8 19150000 		_ADR	TYPEE
 2686 1bec 5D070000 		_DOLIT	0X3F
 2686      3F000000 
 2687 1bf4 39070000 		_ADR	EMIT
 2688 1bf8 4D150000 		_ADR	CR
 2689 1bfc 651D0000 		_ADR	PRESE
 2690 1c00 B3070000 		_BRAN	QUIT
 2690      841D0000 
 2691              	
 2692              	//    _abort"	( f -- )
 2693              	// 	Run time routine of ABORT" . Abort with a message.
 2694              	
 2695              	// 	.word	_ABORT
 2696              	// _ABORQ	.byte  COMPO+6
 2697              	// 	.ascii "abort\""
 2698              	// 	.p2align 2 	
 2699              	ABORQ:
 2700 1c08 504700BF 		_NEST
 2701 1c0c 6D150000 		_ADR	DOSTR
 2702 1c10 A1080000 		_ADR	SWAP 
 2703 1c14 9F070000 		_QBRAN	1f	// text flag
 2703      241C0000 
ARM GAS  forth.s 			page 80


 2704 1c1c B3070000 		_BRAN	ABORT1
 2704      E01B0000 
 2705              	1:
 2706 1c24 81080000 		_ADR	DROP
 2707 1c28 F3050000 		_UNNEST			// drop error
 2708              	
 2709              	// **************************************************************************
 2710              	//  The text interpreter
 2711              	
 2712              	//    $INTERPRET  ( a -- )
 2713              	// 	Interpret a word. If failed, try to convert it to an integer.
 2714              	
 2715 1c2c D41B0000 		.word	_ABORT
 2716 1c30 0A       	_INTER:	.byte  10
 2717 1c31 2424494E 		.ascii "$$INTERPRET"
 2717      54455250 
 2717      524554
 2718              		.p2align 2 	
 2719              	INTER:
 2720 1c3c 504700BF 		_NEST
 2721 1c40 491A0000 		_ADR	NAMEQ
 2722 1c44 650A0000 		_ADR	QDUP	// ?defined
 2723 1c48 9F070000 		_QBRAN	INTE1
 2723      7C1C0000 
 2724 1c50 E5070000 		_ADR	AT
 2725 1c54 5D070000 		_DOLIT	COMPO
 2725      40000000 
 2726 1c5c D5080000 		_ADR	ANDD	// ?compile only lexicon bits
 2727 1c60 091C0000 		_ABORQ	13," compile only"
 2727      0D20636F 
 2727      6D70696C 
 2727      65206F6E 
 2727      6C7900BF 
 2728 1c74 75070000 		_ADR	EXECU
 2729 1c78 F3050000 		_UNNEST			// execute defined word
 2730              	INTE1:
 2731 1c7c 6D130000 		_ADR	NUMBQ
 2732 1c80 9F070000 		_QBRAN	INTE2
 2732      8C1C0000 
 2733 1c88 F3050000 		_UNNEST
 2734              	INTE2:
 2735 1c8c DD1B0000 		_ADR	ABORT	// error
 2736              	
 2737              	//    [	   ( -- )
 2738              	// 	Start the text interpreter.
 2739              	
 2740 1c90 301C0000 		.word	_INTER
 2741 1c94 81       	_LBRAC:	.byte  IMEDD+1
 2742 1c95 5B       		.ascii "["
 2743 1c96 00BF     		.p2align 2 	
 2744              	LBRAC:
 2745 1c98 504700BF 		_NEST
 2746 1c9c 5D070000 		_DOLIT	INTER
 2746      3C1C0000 
 2747 1ca4 E10C0000 		_ADR	TEVAL
 2748 1ca8 D1070000 		_ADR	STORE
 2749 1cac F3050000 		_UNNEST
ARM GAS  forth.s 			page 81


 2750              	
 2751              	//    .OK	 ( -- )
 2752              	// 	Display "ok" only while interpreting.
 2753              	
 2754 1cb0 941C0000 		.word	_LBRAC
 2755 1cb4 03       	_DOTOK:	.byte  3
 2756 1cb5 2E4F4B   		.ascii ".OK"
 2757              		.p2align 2 	
 2758              	DOTOK:
 2759 1cb8 504700BF 		_NEST
 2760 1cbc 5D070000 		_DOLIT	INTER
 2760      3C1C0000 
 2761 1cc4 E10C0000 		_ADR	TEVAL
 2762 1cc8 E5070000 		_ADR	AT
 2763 1ccc 1D0B0000 		_ADR	EQUAL
 2764 1cd0 9F070000 		_QBRAN	DOTO1
 2764      E01C0000 
 2765 1cd8 B5150000 		_DOTQP	3," ok"
 2765      03206F6B 
 2766              	DOTO1:
 2767 1ce0 4D150000 		_ADR	CR
 2768 1ce4 F3050000 		_UNNEST
 2769              	
 2770              	//    ?STACK	( -- )
 2771              	// 	Abort if the data stack underflows.
 2772              	
 2773 1ce8 B41C0000 		.word	_DOTOK
 2774 1cec 06       	_QSTAC:	.byte  6
 2775 1ced 3F535441 		.ascii "?STACK"
 2775      434B
 2776 1cf3 00       		.p2align 2 	
 2777              	QSTAC:
 2778 1cf4 504700BF 		_NEST
 2779 1cf8 910F0000 		_ADR	DEPTH
 2780 1cfc C5080000 		_ADR	ZLESS	// check only for underflow
 2781 1d00 091C0000 		_ABORQ	9,"underflow"
 2781      09756E64 
 2781      6572666C 
 2781      6F7700BF 
 2782 1d10 F3050000 		_UNNEST
 2783              	
 2784              	//    EVAL	( -- )
 2785              	// 	Interpret the input stream.
 2786              	
 2787 1d14 EC1C0000 		.word	_QSTAC
 2788 1d18 04       	_EVAL:	.byte  4
 2789 1d19 4556414C 		.ascii "EVAL"
 2790 1d1d 0000BF   		.p2align 2 	
 2791              	EVAL:
 2792 1d20 504700BF 		_NEST
 2793              	EVAL1:
 2794 1d24 C5180000 	    _ADR	TOKEN
 2795 1d28 91080000 		_ADR	DUPP
 2796 1d2c 05080000 		_ADR	CAT	// ?input stream empty
 2797 1d30 9F070000 		_QBRAN	EVAL2
 2797      4C1D0000 
 2798 1d38 E10C0000 		_ADR	TEVAL
ARM GAS  forth.s 			page 82


 2799 1d3c 2D100000 		_ADR	ATEXE
 2800 1d40 F51C0000 		_ADR	QSTAC	// evaluate input, check stack
 2801 1d44 B3070000 		_BRAN	EVAL1
 2801      241D0000 
 2802              	EVAL2:
 2803 1d4c 81080000 		_ADR	DROP
 2804 1d50 B91C0000 		_ADR	DOTOK
 2805 1d54 F3050000 		_UNNEST	// prompt
 2806              	
 2807              	//    PRESET	( -- )
 2808              	// 	Reset data stack pointer and the terminal input buffer.
 2809              	
 2810 1d58 181D0000 		.word	_EVAL
 2811 1d5c 06       	_PRESE:	.byte  6
 2812 1d5d 50524553 		.ascii "PRESET"
 2812      4554
 2813 1d63 00       		.p2align 2 	
 2814              	PRESE:
 2815 1d64 504700BF 		_NEST 
 2816 1d68 5D070000 		_DOLIT SPP 
 2816      00FF0120 
 2817 1d70 5D080000 		_ADR SPSTOR 
 2818 1d74 F3050000 		_UNNEST 
 2819              	
 2820              	//    QUIT	( -- )
 2821              	// 	Reset return stack pointer and start text interpreter.
 2822              	
 2823 1d78 5C1D0000 		.word	_PRESE
 2824 1d7c 04       	_QUIT:	.byte  4
 2825 1d7d 51554954 		.ascii "QUIT"
 2826 1d81 0000BF   		.p2align 2 	
 2827              	QUIT:
 2828 1d84 5D070000 		_DOLIT RPP 
 2828      80FF0120 
 2829 1d8c 4D080000 		_ADR RPSTOR 
 2830              	QUIT1:
 2831 1d90 991C0000 		_ADR	LBRAC			// start interpretation
 2832              	QUIT2:
 2833 1d94 9D1B0000 		_ADR	QUERY			// get input
 2834 1d98 211D0000 		_ADR	EVAL
 2835 1d9c B3070000 		_BRAN	QUIT2	// continue till error
 2835      941D0000 
 2836              	
 2837 1da4 7C1D0000 		.word _QUIT
 2838 1da8 06       	_FORGET: .byte 6 
 2839 1da9 464F5247 		.ascii "FORGET"
 2839      4554
 2840 1daf 00       		.p2align 2
 2841              	FORGET:
 2842 1db0 504700BF 		_NEST 
 2843 1db4 C5180000 		_ADR TOKEN 
 2844 1db8 91080000 		_ADR DUPP 
 2845 1dbc 9F070000 		_QBRAN 9f 
 2845      F81D0000 
 2846 1dc4 491A0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2847 1dc8 650A0000 		_ADR QDUP 
 2848 1dcc 9F070000 		_QBRAN 8f
ARM GAS  forth.s 			page 83


 2848      F41D0000 
 2849 1dd4 010A0000 		_ADR CELLM // ( ca la )
 2850 1dd8 91080000 		_ADR DUPP 
 2851 1ddc 210D0000 		_ADR CPP   
 2852 1de0 D1070000 		_ADR STORE
 2853 1de4 E5070000 		_ADR AT 
 2854 1de8 490D0000 		_ADR LAST 
 2855 1dec D1070000 		_ADR STORE
 2856 1df0 5D220000 		_ADR OVERT 
 2857 1df4 81080000 	8:  _ADR DROP 
 2858 1df8 F3050000 	9:	_UNNEST 
 2859              	
 2860              		.p2align 2 
 2861              	
 2862              	// **************************************************************************
 2863              	//  The compiler
 2864              	
 2865              	//    '	   ( -- ca )
 2866              	// 	Search context vocabularies for the next word in input stream.
 2867              	
 2868 1dfc A81D0000 		.word	_FORGET
 2869 1e00 01       	_TICK:	.byte  1
 2870 1e01 27       		.ascii "'"
 2871 1e02 00BF     		.p2align 2 	
 2872              	TICK:
 2873 1e04 504700BF 		_NEST
 2874 1e08 C5180000 		_ADR	TOKEN
 2875 1e0c 491A0000 		_ADR	NAMEQ	// ?defined
 2876 1e10 9F070000 		_QBRAN	TICK1
 2876      1C1E0000 
 2877 1e18 F3050000 		_UNNEST	// yes, push code address
 2878              	TICK1:	
 2879 1e1c DD1B0000 		_ADR ABORT	// no, error
 2880              	
 2881              	//    ALLOT	( n -- )
 2882              	// 	Allocate n bytes to the ram area.
 2883              	
 2884 1e20 001E0000 		.word	_TICK
 2885 1e24 05       	_ALLOT:	.byte  5
 2886 1e25 414C4C4F 		.ascii "ALLOT"
 2886      54
 2887 1e2a 00BF     		.p2align 2 	
 2888              	ALLOT:
 2889 1e2c 504700BF 		_NEST
 2890 1e30 210D0000 		_ADR	CPP
 2891 1e34 A50B0000 		_ADR	PSTOR
 2892 1e38 F3050000 		_UNNEST			// adjust code pointer
 2893              	
 2894              	//    ,	   ( w -- )
 2895              	// 	Compile an integer into the code dictionary.
 2896              	
 2897 1e3c 241E0000 		.word	_ALLOT
 2898 1e40 012C     	_COMMA:	.byte  1,','
 2899 1e42 00BF     		.p2align 2 	
 2900              	COMMA:
 2901 1e44 504700BF 		_NEST
 2902 1e48 DD0F0000 		_ADR	HERE
ARM GAS  forth.s 			page 84


 2903 1e4c 91080000 		_ADR	DUPP
 2904 1e50 F1090000 		_ADR	CELLP	// cell boundary
 2905 1e54 210D0000 		_ADR	CPP
 2906 1e58 D1070000 		_ADR	STORE
 2907 1e5c D1070000 		_ADR	STORE
 2908 1e60 F3050000 		_UNNEST	// adjust code pointer, compile
 2909              		.p2align 2 
 2910              	//    [COMPILE]   ( -- //  string> )
 2911              	// 	Compile the next immediate word into code dictionary.
 2912              	
 2913 1e64 401E0000 		.word	_COMMA
 2914 1e68 89       	_BCOMP:	.byte  IMEDD+9
 2915 1e69 5B434F4D 		.ascii "[COMPILE]"
 2915      50494C45 
 2915      5D
 2916 1e72 00BF     		.p2align 2 	
 2917              	BCOMP:
 2918 1e74 504700BF 		_NEST
 2919 1e78 051E0000 		_ADR	TICK
 2920 1e7c 451E0000 		_ADR	COMMA
 2921 1e80 F3050000 		_UNNEST
 2922              	
 2923              	//    COMPILE	( -- )
 2924              	// 	Compile the next address in colon list to code dictionary.
 2925              	
 2926 1e84 681E0000 		.word	_BCOMP
 2927 1e88 47       	_COMPI:	.byte  COMPO+7
 2928 1e89 434F4D50 		.ascii "COMPILE"
 2928      494C45
 2929              		.p2align 2 	
 2930              	COMPI:
 2931 1e90 504700BF 		_NEST
 2932 1e94 11080000 		_ADR	RFROM
 2933 1e98 91080000 		_ADR	DUPP 
 2934 1e9c E5070000 		_ADR	AT
 2935 1ea0 5D070000 		_DOLIT 1 
 2935      01000000 
 2936 1ea8 E9080000 		_ADR	ORR 
 2937 1eac 451E0000 		_ADR	COMMA 
 2938 1eb0 F1090000 		_ADR	CELLP 
 2939 1eb4 39080000 		_ADR	TOR 
 2940 1eb8 F3050000 		_UNNEST			// adjust return address
 2941              	
 2942              	//    LITERAL	( w -- )
 2943              	// 	Compile tos to code dictionary as an integer literal.
 2944              	
 2945 1ebc 881E0000 		.word	_COMPI
 2946 1ec0 87       	_LITER:	.byte  IMEDD+7
 2947 1ec1 4C495445 		.ascii "LITERAL"
 2947      52414C
 2948              		.p2align 2 	
 2949              	LITER:
 2950 1ec8 504700BF 		_NEST
 2951 1ecc 5D070000 		_COMPI	DOLIT
 2951      5C070000 
 2951      B9220000 
 2952 1ed8 451E0000 		_ADR	COMMA
ARM GAS  forth.s 			page 85


 2953 1edc F3050000 		_UNNEST
 2954              	
 2955              	//    $,"	( -- )
 2956              	// 	Compile a literal string up to next " .
 2957              	
 2958              	// 	.word	_LITER
 2959              	// _STRCQ	.byte  3
 2960              	// 	.ascii "$,\""
 2961              	// 	.p2align 2 	
 2962              	STRCQ:
 2963 1ee0 504700BF 		_NEST
 2964 1ee4 5D070000 		_DOLIT -4
 2964      FCFFFFFF 
 2965 1eec 210D0000 		_ADR	CPP
 2966 1ef0 A50B0000 		_ADR	PSTOR
 2967 1ef4 5D070000 		_DOLIT	'\"'
 2967      22000000 
 2968 1efc A1180000 		_ADR	WORDD			// move word to code dictionary
 2969 1f00 ED0B0000 		_ADR	COUNT
 2970 1f04 55090000 		_ADR	PLUS
 2971 1f08 290F0000 		_ADR	ALGND			// calculate aligned end of string
 2972 1f0c 210D0000 		_ADR	CPP
 2973 1f10 D1070000 		_ADR	STORE
 2974 1f14 F3050000 		_UNNEST 			// adjust the code pointer
 2975              	
 2976              	/*******************
 2977              	//  Structures
 2978              	*******************/
 2979              	//    FOR	 ( -- a )
 2980              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2981              	
 2982 1f18 C01E0000 		.word	_LITER
 2983 1f1c C3       	_FOR:	.byte  COMPO+IMEDD+3
 2984 1f1d 464F52   		.ascii "FOR"
 2985              		.p2align 2 	
 2986              	FOR:
 2987 1f20 504700BF 		_NEST
 2988 1f24 5D070000 		_COMPI	TOR
 2988      38080000 
 2988      B9220000 
 2989 1f30 DD0F0000 		_ADR	HERE
 2990 1f34 F3050000 		_UNNEST
 2991              	
 2992              	//    BEGIN	( -- a )
 2993              	// 	Start an infinite or indefinite loop structure.
 2994              	
 2995 1f38 1C1F0000 		.word	_FOR
 2996 1f3c C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 2997 1f3d 42454749 		.ascii "BEGIN"
 2997      4E
 2998 1f42 00BF     		.p2align 2 	
 2999              	BEGIN:
 3000 1f44 504700BF 		_NEST
 3001 1f48 DD0F0000 		_ADR	HERE
 3002 1f4c F3050000 		_UNNEST
 3003              		.p2align 2 
 3004              	
ARM GAS  forth.s 			page 86


 3005              	//    NEXT	( a -- )
 3006              	// 	Terminate a FOR-NEXT loop structure.
 3007 1f50 3C1F0000 		.word	_BEGIN
 3008 1f54 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3009 1f55 4E455854 		.ascii "NEXT"
 3010 1f59 0000BF   		.p2align 2 	
 3011              	FNEXT:
 3012 1f5c 504700BF 		_NEST
 3013 1f60 5D070000 		_COMPI	DONXT
 3013      80070000 
 3013      B9220000 
 3014 1f6c 451E0000 		_ADR	COMMA
 3015 1f70 F3050000 		_UNNEST
 3016              	
 3017              	//    UNTIL	( a -- )
 3018              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3019              	
 3020 1f74 541F0000 		.word	_FNEXT
 3021 1f78 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3022 1f79 554E5449 		.ascii "UNTIL"
 3022      4C
 3023 1f7e 00BF     		.p2align 2 	
 3024              	UNTIL:
 3025 1f80 504700BF 		_NEST
 3026 1f84 5D070000 		_COMPI	QBRAN
 3026      9E070000 
 3026      B9220000 
 3027 1f90 451E0000 		_ADR	COMMA
 3028 1f94 F3050000 		_UNNEST
 3029              	
 3030              	//    AGAIN	( a -- )
 3031              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3032              	
 3033 1f98 781F0000 		.word	_UNTIL
 3034 1f9c C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3035 1f9d 41474149 		.ascii "AGAIN"
 3035      4E
 3036 1fa2 00BF     		.p2align 2 	
 3037              	AGAIN:
 3038 1fa4 504700BF 		_NEST
 3039 1fa8 5D070000 		_COMPI	BRAN
 3039      B2070000 
 3039      B9220000 
 3040 1fb4 451E0000 		_ADR	COMMA
 3041 1fb8 F3050000 		_UNNEST
 3042              	
 3043              	//    IF	  ( -- A )
 3044              	// 	Begin a conditional branch structure.
 3045              	
 3046 1fbc 9C1F0000 		.word	_AGAIN
 3047 1fc0 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3048 1fc1 4946     		.ascii "IF"
 3049 1fc3 00       		.p2align 2 	
 3050              	IFF:
 3051 1fc4 504700BF 		_NEST
 3052 1fc8 5D070000 		_COMPI	QBRAN
 3052      9E070000 
ARM GAS  forth.s 			page 87


 3052      B9220000 
 3053 1fd4 DD0F0000 		_ADR	HERE
 3054 1fd8 5D070000 		_DOLIT	4
 3054      04000000 
 3055 1fe0 210D0000 		_ADR	CPP
 3056 1fe4 A50B0000 		_ADR	PSTOR
 3057 1fe8 F3050000 		_UNNEST
 3058              	
 3059              	//    AHEAD	( -- A )
 3060              	// 	Compile a forward branch instruction.
 3061              	
 3062 1fec C01F0000 		.word	_IFF
 3063 1ff0 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3064 1ff1 41484541 		.ascii "AHEAD"
 3064      44
 3065 1ff6 00BF     		.p2align 2 	
 3066              	AHEAD:
 3067 1ff8 504700BF 		_NEST
 3068 1ffc 5D070000 		_COMPI	BRAN
 3068      B2070000 
 3068      B9220000 
 3069 2008 DD0F0000 		_ADR	HERE
 3070 200c 5D070000 		_DOLIT	4
 3070      04000000 
 3071 2014 210D0000 		_ADR	CPP
 3072 2018 A50B0000 		_ADR	PSTOR
 3073 201c F3050000 		_UNNEST
 3074              	
 3075              	//    REPEAT	( A a -- )
 3076              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3077              	
 3078 2020 F01F0000 		.word	_AHEAD
 3079 2024 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3080 2025 52455045 		.ascii "REPEAT"
 3080      4154
 3081 202b 00       		.p2align 2 	
 3082              	REPEA:
 3083 202c 504700BF 		_NEST
 3084 2030 A51F0000 		_ADR	AGAIN
 3085 2034 DD0F0000 		_ADR	HERE
 3086 2038 A1080000 		_ADR	SWAP
 3087 203c D1070000 		_ADR	STORE
 3088 2040 F3050000 		_UNNEST
 3089              	
 3090              	//    THEN	( A -- )
 3091              	// 	Terminate a conditional branch structure.
 3092              	
 3093 2044 24200000 		.word	_REPEA
 3094 2048 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3095 2049 5448454E 		.ascii "THEN"
 3096 204d 0000BF   		.p2align 2 	
 3097              	THENN:
 3098 2050 504700BF 		_NEST
 3099 2054 DD0F0000 		_ADR	HERE
 3100 2058 A1080000 		_ADR	SWAP
 3101 205c D1070000 		_ADR	STORE
 3102 2060 F3050000 		_UNNEST
ARM GAS  forth.s 			page 88


 3103              	
 3104              	//    AFT	 ( a -- a A )
 3105              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3106              	
 3107 2064 48200000 		.word	_THENN
 3108 2068 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3109 2069 414654   		.ascii "AFT"
 3110              		.p2align 2 	
 3111              	AFT:
 3112 206c 504700BF 		_NEST
 3113 2070 81080000 		_ADR	DROP
 3114 2074 F91F0000 		_ADR	AHEAD
 3115 2078 451F0000 		_ADR	BEGIN
 3116 207c A1080000 		_ADR	SWAP
 3117 2080 F3050000 		_UNNEST
 3118              	
 3119              	//    ELSE	( A -- A )
 3120              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3121              	
 3122 2084 68200000 		.word	_AFT
 3123 2088 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3124 2089 454C5345 		.ascii "ELSE"
 3125 208d 0000BF   		.p2align 2 	
 3126              	ELSEE:
 3127 2090 504700BF 		_NEST
 3128 2094 F91F0000 		_ADR	AHEAD
 3129 2098 A1080000 		_ADR	SWAP
 3130 209c 51200000 		_ADR	THENN
 3131 20a0 F3050000 		_UNNEST
 3132              	
 3133              	//    WHILE	( a -- A a )
 3134              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3135              	
 3136 20a4 88200000 		.word	_ELSEE
 3137 20a8 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3138 20a9 5748494C 		.ascii "WHILE"
 3138      45
 3139 20ae 00BF     		.p2align 2 	
 3140              	WHILE:
 3141 20b0 504700BF 		_NEST
 3142 20b4 C51F0000 		_ADR	IFF
 3143 20b8 A1080000 		_ADR	SWAP
 3144 20bc F3050000 		_UNNEST
 3145              	
 3146              	//    ABORT"	( -- //  string> )
 3147              	// 	Conditional abort with an error message.
 3148              	
 3149 20c0 A8200000 		.word	_WHILE
 3150 20c4 86       	_ABRTQ:	.byte  IMEDD+6
 3151 20c5 41424F52 		.ascii "ABORT\""
 3151      5422
 3152 20cb 00       		.p2align 2 	
 3153              	ABRTQ:
 3154 20cc 504700BF 		_NEST
 3155 20d0 5D070000 		_COMPI	ABORQ
 3155      081C0000 
 3155      B9220000 
ARM GAS  forth.s 			page 89


 3156 20dc E11E0000 		_ADR	STRCQ
 3157 20e0 F3050000 		_UNNEST
 3158              	
 3159              	//    $"	( -- //  string> )
 3160              	// 	Compile an inline word literal.
 3161              	
 3162 20e4 C4200000 		.word	_ABRTQ
 3163 20e8 82       	_STRQ:	.byte  IMEDD+2
 3164 20e9 2422     		.ascii	"$\""
 3165 20eb 00       		.p2align 2 	
 3166              	STRQ:
 3167 20ec 504700BF 		_NEST
 3168 20f0 5D070000 		_COMPI	STRQP
 3168      98150000 
 3168      B9220000 
 3169 20fc E11E0000 		_ADR	STRCQ
 3170 2100 F3050000 		_UNNEST
 3171              	
 3172              	//    ."	( -- //  string> )
 3173              	// 	Compile an inline word  literal to be typed out at run time.
 3174              	
 3175 2104 E8200000 		.word	_STRQ
 3176 2108 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3177 2109 2E22     		.ascii	".\""
 3178 210b 00       		.p2align 2 	
 3179              	DOTQ:
 3180 210c 504700BF 		_NEST
 3181 2110 5D070000 		_COMPI	DOTQP
 3181      B4150000 
 3181      B9220000 
 3182 211c E11E0000 		_ADR	STRCQ
 3183 2120 F3050000 		_UNNEST
 3184              	
 3185              	// **************************************************************************
 3186              	//  Name compiler
 3187              	
 3188              	//    ?UNIQUE	( a -- a )
 3189              	// 	Display a warning message if the word already exists.
 3190              	
 3191 2124 08210000 		.word	_DOTQ
 3192 2128 07       	_UNIQU:	.byte  7
 3193 2129 3F554E49 		.ascii "?UNIQUE"
 3193      515545
 3194              		.p2align 2 	
 3195              	UNIQU:
 3196 2130 504700BF 		_NEST
 3197 2134 91080000 		_ADR	DUPP
 3198 2138 491A0000 		_ADR	NAMEQ			// ?name exists
 3199 213c 9F070000 		_QBRAN	UNIQ1	// redefinitions are OK
 3199      5C210000 
 3200 2144 B5150000 		_DOTQP	7," reDef "		// but warn the user
 3200      07207265 
 3200      44656620 
 3201 2150 B5080000 		_ADR	OVER
 3202 2154 ED0B0000 		_ADR	COUNT
 3203 2158 19150000 		_ADR	TYPEE			// just in case its not planned
 3204              	UNIQ1:
ARM GAS  forth.s 			page 90


 3205 215c 81080000 		_ADR	DROP
 3206 2160 F3050000 		_UNNEST
 3207              	
 3208              	//    $,n	 ( na -- )
 3209              	// 	Build a new dictionary name using the data at na.
 3210              	
 3211              	// 	.word	_UNIQU
 3212              	// _SNAME	.byte  3
 3213              	// 	.ascii "$,n"
 3214              	// 	.p2align 2 	
 3215              	SNAME:
 3216 2164 504700BF 		_NEST
 3217 2168 91080000 		_ADR	DUPP			//  na na
 3218 216c 05080000 		_ADR	CAT			//  ?null input
 3219 2170 9F070000 		_QBRAN	SNAM1
 3219      AC210000 
 3220 2178 31210000 		_ADR	UNIQU			//  na
 3221 217c 490D0000 		_ADR	LAST			//  na last
 3222 2180 E5070000 		_ADR	AT			//  na la
 3223 2184 451E0000 		_ADR	COMMA			//  na
 3224 2188 91080000 		_ADR	DUPP			//  na na
 3225 218c 490D0000 		_ADR	LAST			//  na na last
 3226 2190 D1070000 		_ADR	STORE			//  na , save na for vocabulary link
 3227 2194 ED0B0000 		_ADR	COUNT			//  na+1 count
 3228 2198 55090000 		_ADR	PLUS			//  na+1+count
 3229 219c 290F0000 		_ADR	ALGND			//  word boundary
 3230 21a0 210D0000 		_ADR	CPP
 3231 21a4 D1070000 		_ADR	STORE			//  top of dictionary now
 3232 21a8 F3050000 		_UNNEST
 3233              	SNAM1:
 3234 21ac 99150000 		_ADR	STRQP
 3235 21b0 07       		.byte	7
 3236 21b1 206E616D 		.ascii " name? "
 3236      653F20
 3237 21b8 DD1B0000 		_ADR	ABORT
 3238              	
 3239              	//    $COMPILE	( a -- )
 3240              	// 	Compile next word to code dictionary as a token or literal.
 3241              	
 3242 21bc 28210000 		.word	_UNIQU
 3243 21c0 08       	_SCOMP:	.byte  8
 3244 21c1 24434F4D 		.ascii "$COMPILE"
 3244      50494C45 
 3245 21c9 0000BF   		.p2align 2 	
 3246              	SCOMP:
 3247 21cc 504700BF 		_NEST
 3248 21d0 491A0000 		_ADR	NAMEQ
 3249 21d4 650A0000 		_ADR	QDUP	// defined?
 3250 21d8 9F070000 		_QBRAN	SCOM2
 3250      08220000 
 3251 21e0 E5070000 		_ADR	AT
 3252 21e4 5D070000 		_DOLIT	IMEDD
 3252      80000000 
 3253 21ec D5080000 		_ADR	ANDD	// immediate?
 3254 21f0 9F070000 		_QBRAN	SCOM1
 3254      00220000 
 3255 21f8 75070000 		_ADR	EXECU
ARM GAS  forth.s 			page 91


 3256 21fc F3050000 		_UNNEST			// it's immediate, execute
 3257              	SCOM1:
 3258 2200 B9220000 		_ADR	CALLC			// it's not immediate, compile
 3259 2204 F3050000 		_UNNEST	
 3260              	SCOM2:
 3261 2208 6D130000 		_ADR	NUMBQ
 3262 220c 9F070000 		_QBRAN	SCOM3
 3262      1C220000 
 3263 2214 C91E0000 		_ADR	LITER
 3264 2218 F3050000 		_UNNEST			// compile number as integer
 3265              	SCOM3: // compilation abort 
 3266 221c 25220000 		_ADR COLON_ABORT 
 3267 2220 DD1B0000 		_ADR	ABORT			// error
 3268              	
 3269              	// before aborting a compilation 
 3270              	// reset HERE and LAST
 3271              	// to previous values. 
 3272              	COLON_ABORT:
 3273 2224 504700BF 		_NEST 
 3274 2228 490D0000 		_ADR LAST 
 3275 222c E5070000 		_ADR AT 
 3276 2230 010A0000 		_ADR CELLM 
 3277 2234 91080000 		_ADR DUPP 
 3278 2238 210D0000 		_ADR CPP  
 3279 223c D1070000 		_ADR STORE 
 3280 2240 E5070000 		_ADR AT 
 3281 2244 490D0000 		_ADR LAST 
 3282 2248 D1070000 		_ADR STORE 
 3283 224c F3050000 		_UNNEST 
 3284              	
 3285              	//    OVERT	( -- )
 3286              	// 	Link a new word into the current vocabulary.
 3287              	
 3288 2250 C0210000 		.word	_SCOMP
 3289 2254 05       	_OVERT:	.byte  5
 3290 2255 4F564552 		.ascii "OVERT"
 3290      54
 3291 225a 00BF     		.p2align 2 	
 3292              	OVERT:
 3293 225c 504700BF 		_NEST
 3294 2260 490D0000 		_ADR	LAST
 3295 2264 E5070000 		_ADR	AT
 3296 2268 0D0D0000 		_ADR	CNTXT
 3297 226c D1070000 		_ADR	STORE
 3298 2270 F3050000 		_UNNEST
 3299              	
 3300              	//    ; 	   ( -- )
 3301              	// 	Terminate a colon definition.
 3302              	
 3303 2274 54220000 		.word	_OVERT
 3304 2278 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3305 2279 3B       		.ascii ";"
 3306 227a 00BF     		.p2align 2 	
 3307              	SEMIS:
 3308 227c 504700BF 		_NEST
 3309 2280 5D070000 		_DOLIT	UNNEST
 3309      F2050000 
ARM GAS  forth.s 			page 92


 3310 2288 B9220000 		_ADR	CALLC
 3311 228c 991C0000 		_ADR	LBRAC
 3312 2290 5D220000 		_ADR	OVERT
 3313 2294 F3050000 		_UNNEST
 3314              	
 3315              	//    ]	   ( -- )
 3316              	// 	Start compiling the words in the input stream.
 3317              	
 3318 2298 78220000 		.word	_SEMIS
 3319 229c 01       	_RBRAC:	.byte  1
 3320 229d 5D       		.ascii "]"
 3321 229e 00BF     		.p2align 2 	
 3322              	RBRAC:
 3323 22a0 504700BF 		_NEST
 3324 22a4 5D070000 		_DOLIT	SCOMP
 3324      CC210000 
 3325 22ac E10C0000 		_ADR	TEVAL
 3326 22b0 D1070000 		_ADR	STORE
 3327 22b4 F3050000 		_UNNEST
 3328              	
 3329              	//    BL.W	( ca -- )
 3330              	// 	compile ca.
 3331              	
 3332              	// 	.word	_RBRAC
 3333              	// _CALLC	.byte  5
 3334              	// 	.ascii "call,"
 3335              	// 	.p2align 2 	
 3336              	CALLC:
 3337 22b8 504700BF 		_NEST
 3338 22bc 5D070000 		_DOLIT 1 
 3338      01000000 
 3339 22c4 E9080000 		_ADR ORR 
 3340 22c8 451E0000 		_ADR COMMA  
 3341 22cc F3050000 		_UNNEST 
 3342              	
 3343              	
 3344              	// 	:	( -- //  string> )
 3345              	// 	Start a new colon definition using next word as its name.
 3346              	
 3347 22d0 9C220000 		.word	_RBRAC
 3348 22d4 01       	_COLON:	.byte  1
 3349 22d5 3A       		.ascii ":"
 3350 22d6 00BF     		.p2align 2 	
 3351              	COLON:
 3352 22d8 504700BF 		_NEST
 3353 22dc C5180000 		_ADR	TOKEN
 3354 22e0 65210000 		_ADR	SNAME
 3355 22e4 FD050000 		_ADR	COMPI_NEST 
 3356 22e8 A1220000 		_ADR	RBRAC
 3357 22ec F3050000 		_UNNEST
 3358              	
 3359              	//    IMMEDIATE   ( -- )
 3360              	// 	Make the last compiled word an immediate word.
 3361              	
 3362 22f0 D4220000 		.word	_COLON
 3363 22f4 09       	_IMMED:	.byte  9
 3364 22f5 494D4D45 		.ascii "IMMEDIATE"
ARM GAS  forth.s 			page 93


 3364      44494154 
 3364      45
 3365 22fe 00BF     		.p2align 2 	
 3366              	IMMED:
 3367 2300 504700BF 		_NEST
 3368 2304 5D070000 		_DOLIT	IMEDD
 3368      80000000 
 3369 230c 490D0000 		_ADR	LAST
 3370 2310 E5070000 		_ADR	AT
 3371 2314 E5070000 		_ADR	AT
 3372 2318 E9080000 		_ADR	ORR
 3373 231c 490D0000 		_ADR	LAST
 3374 2320 E5070000 		_ADR	AT
 3375 2324 D1070000 		_ADR	STORE
 3376 2328 F3050000 		_UNNEST
 3377              	
 3378              	// **************************************************************************
 3379              	//  Defining words
 3380              	
 3381              	//    CONSTANT	( u -- //  string> )
 3382              	// 	Compile a new constant.
 3383              	
 3384 232c F4220000 		.word	_IMMED
 3385 2330 08       	_CONST:	.byte  8
 3386 2331 434F4E53 		.ascii "CONSTANT"
 3386      54414E54 
 3387 2339 0000BF   		.p2align 2 	
 3388              	CONST:
 3389 233c 504700BF 		_NEST 
 3390 2340 C5180000 		_ADR	TOKEN
 3391 2344 65210000 		_ADR	SNAME
 3392 2348 5D220000 		_ADR	OVERT
 3393 234c FD050000 		_ADR	COMPI_NEST
 3394 2350 5D070000 		_DOLIT	DOCON
 3394      200C0000 
 3395 2358 B9220000 		_ADR	CALLC
 3396 235c 451E0000 		_ADR	COMMA
 3397 2360 5D070000 		_DOLIT	UNNEST 
 3397      F2050000 
 3398 2368 B9220000 		_ADR	CALLC  
 3399 236c F3050000 		_UNNEST
 3400              	
 3401              		.p2align 2 
 3402              	// doDOES> ( -- a )
 3403              	// runtime action of DOES> 
 3404              	// leave parameter field address on stack 
 3405              	DODOES:
 3406 2370 504700BF 		_NEST 
 3407 2374 11080000 		_ADR	RFROM
 3408 2378 F1090000 		_ADR	CELLP 
 3409 237c B1090000 		_ADR	ONEP  
 3410 2380 490D0000 		_ADR LAST 
 3411 2384 E5070000 		_ADR AT
 3412 2388 E1180000 		_ADR NAMET 
 3413 238c F1090000 		_ADR CELLP 
 3414 2390 D1070000 		_ADR STORE  
 3415 2394 F3050000 		_UNNEST 
ARM GAS  forth.s 			page 94


 3416              	
 3417              		.p2align 2
 3418              	//  DOES> ( -- )
 3419              	//  compile time action 
 3420 2398 30230000 		.word _CONST   
 3421 239c C5       	_DOES: .byte IMEDD+COMPO+5 
 3422 239d 444F4553 		.ascii "DOES>"
 3422      3E
 3423 23a2 00BF     		.p2align 2
 3424              	DOES: 
 3425 23a4 504700BF 		_NEST 
 3426 23a8 5D070000 		_DOLIT DODOES 
 3426      70230000 
 3427 23b0 B9220000 		_ADR CALLC 
 3428 23b4 5D070000 		_DOLIT	UNNEST
 3428      F2050000 
 3429 23bc B9220000 		_ADR	CALLC 
 3430 23c0 FD050000 		_ADR COMPI_NEST
 3431 23c4 5D070000 		_DOLIT RFROM 
 3431      10080000 
 3432 23cc B9220000 		_ADR	CALLC
 3433 23d0 F3050000 		_UNNEST 
 3434              	
 3435              	
 3436              	
 3437              	//  DEFER@ ( "name" -- a )
 3438              	//  return value of code field of defered function. 
 3439 23d4 9C230000 		.word _DOES 
 3440 23d8 06       	_DEFERAT: .byte 6 
 3441 23d9 44454645 		.ascii "DEFER@"
 3441      5240
 3442 23df 00       		.p2align 2 
 3443              	DEFERAT: 
 3444 23e0 504700BF 		_NEST 
 3445 23e4 051E0000 		_ADR TICK
 3446 23e8 F1090000 		_ADR CELLP 
 3447 23ec E5070000 		_ADR AT 
 3448 23f0 C1090000 		_ADR ONEM 
 3449 23f4 F3050000 		_UNNEST 
 3450              	
 3451              	// DEFER! ( "name1" "name2" -- )
 3452              	// assign an action to a defered word 
 3453 23f8 D8230000 		.word _DEFERAT 
 3454 23fc 06       	_DEFERSTO: .byte 6 
 3455 23fd 44454645 		.ascii "DEFER!" 
 3455      5221
 3456 2403 00       		.p2align 2 
 3457              	DEFERSTO:
 3458 2404 504700BF 		_NEST 
 3459 2408 051E0000 		_ADR TICK 
 3460 240c B1090000 		_ADR ONEP 
 3461 2410 051E0000 		_ADR TICK 
 3462 2414 F1090000 		_ADR CELLP 
 3463 2418 D1070000 		_ADR STORE 
 3464 241c F3050000 		_UNNEST
 3465              	
 3466              	//  DEFER ( "name" -- )
ARM GAS  forth.s 			page 95


 3467              	//  create a defered definition
 3468 2420 FC230000 		.word _DEFERSTO  
 3469 2424 05       	_DEFER: .byte 5 
 3470 2425 44454645 		.ascii "DEFER"
 3470      52
 3471 242a 00BF     		.p2align 2
 3472              	DEFER:
 3473 242c 504700BF 		_NEST 
 3474 2430 7D240000 		_ADR CREAT 
 3475 2434 5D070000 		_DOLIT UNNEST 
 3475      F2050000 
 3476 243c B9220000 		_ADR CALLC 
 3477 2440 5D070000 		_DOLIT DEFER_NOP
 3477      64240000 
 3478 2448 B1090000 		_ADR ONEP 
 3479 244c 490D0000 		_ADR LAST 
 3480 2450 E5070000 		_ADR AT 
 3481 2454 E1180000 		_ADR NAMET 
 3482 2458 F1090000 		_ADR CELLP 
 3483 245c D1070000 		_ADR STORE 
 3484 2460 F3050000 		_UNNEST 
 3485              	DEFER_NOP:
 3486 2464 504700BF 		_NEST  
 3487 2468 59070000 		_ADR NOP 
 3488 246c F3050000 		_UNNEST 
 3489              	
 3490              	//    CREATE	( -- //  string> )
 3491              	// 	Compile a new array entry without allocating code space.
 3492              	
 3493 2470 24240000 		.word	_DEFER 
 3494 2474 06       	_CREAT:	.byte  6
 3495 2475 43524541 		.ascii "CREATE"
 3495      5445
 3496 247b 00       		.p2align 2 	
 3497              	CREAT:
 3498 247c 504700BF 		_NEST 
 3499 2480 C5180000 		_ADR	TOKEN
 3500 2484 65210000 		_ADR	SNAME
 3501 2488 5D220000 		_ADR	OVERT
 3502 248c FD050000 		_ADR	COMPI_NEST 
 3503 2490 5D070000 		_DOLIT	DOVAR
 3503      140C0000 
 3504 2498 B9220000 		_ADR	CALLC
 3505 249c F3050000 		_UNNEST
 3506              	
 3507              	//    VARIABLE	( -- //  string> )
 3508              	// 	Compile a new variable initialized to 0.
 3509              	
 3510 24a0 74240000 		.word	_CREAT
 3511 24a4 08       	_VARIA:	.byte  8
 3512 24a5 56415249 		.ascii "VARIABLE"
 3512      41424C45 
 3513 24ad 0000BF   		.p2align 2 	
 3514              	VARIA:
 3515 24b0 504700BF 		_NEST
 3516 24b4 7D240000 		_ADR	CREAT
 3517 24b8 5D070000 		_DOLIT	0
ARM GAS  forth.s 			page 96


 3517      00000000 
 3518 24c0 451E0000 		_ADR	COMMA
 3519 24c4 5D070000 		_DOLIT UNNEST
 3519      F2050000 
 3520 24cc B9220000 		_ADR	CALLC  
 3521 24d0 F3050000 		_UNNEST
 3522              	
 3523              	// **************************************************************************
 3524              	//  Tools
 3525              	
 3526              	//  TRACE ( f -- )
 3527              	// enable or disable tracing 
 3528 24d4 A4240000 		.word _VARIA 
 3529 24d8 05       	_TRACE: .byte 5
 3530 24d9 54524143 		.ascii "TRACE"
 3530      45
 3531 24de 00BF     		.p2align 2
 3532              	TRACE: 
 3533 24e0 504700BF 		_NEST 
 3534 24e4 610D0000 		_ADR FTRACE 
 3535 24e8 D1070000 		_ADR STORE 
 3536 24ec F3050000 		_UNNEST 
 3537              	
 3538              	// TR_PRINT ( ca -- )
 3539              	// print name from ca  
 3540 24f0 D8240000 		.word _TRACE 
 3541 24f4 07       	_DBG_PRT: .byte 7 
 3542 24f5 4442475F 		.ascii "DBG_PRT"
 3542      505254
 3543              	DBG_PRT:
 3544 24fc 504700BF 		_NEST 
 3545 2500 2D260000 		_ADR TNAME 
 3546 2504 650A0000 		_ADR QDUP 
 3547 2508 9F070000 		_QBRAN 1f 
 3547      1C250000 
 3548 2510 ED0B0000 		_ADR COUNT 
 3549 2514 19150000 		_ADR TYPEE 
 3550 2518 4D150000 		_ADR CR
 3551              	1:  	
 3552 251c F3050000 		_UNNEST 
 3553              	
 3554              	//    dm+	 ( a u -- a )
 3555              	// 	Dump u bytes from , leaving a+u on the stack.
 3556              	
 3557              	// 	.word	_TRACE
 3558              	// _DMP	.byte  3
 3559              	// 	.ascii "dm+"
 3560              	// 	.p2align 2 	
 3561              	DMP:
 3562 2520 504700BF 		_NEST
 3563 2524 B5080000 		_ADR	OVER
 3564 2528 5D070000 		_DOLIT	4
 3564      04000000 
 3565 2530 F9150000 		_ADR	UDOTR			// display address
 3566 2534 C5140000 		_ADR	SPACE
 3567 2538 39080000 		_ADR	TOR			// start count down loop
 3568 253c B3070000 		_BRAN	PDUM2			// skip first pass
ARM GAS  forth.s 			page 97


 3568      5C250000 
 3569              	PDUM1:
 3570 2544 91080000 	  _ADR	DUPP
 3571 2548 05080000 		_ADR	CAT
 3572 254c 5D070000 		_DOLIT	3
 3572      03000000 
 3573 2554 F9150000 		_ADR	UDOTR			// display numeric data
 3574 2558 B1090000 		_ADR	ONEP			// increment address
 3575              	PDUM2:
 3576 255c 81070000 	  _ADR	DONXT
 3577 2560 44250000 		.word	PDUM1	// loop till done
 3578 2564 F3050000 		_UNNEST
 3579              		.p2align 2 
 3580              	//    DUMP	( a u -- )
 3581              	// 	Dump u bytes from a, in a formatted manner.
 3582              	
 3583 2568 A4240000 		.word	_VARIA
 3584 256c 04       	_DUMP:	.byte  4
 3585 256d 44554D50 		.ascii "DUMP"
 3586 2571 0000BF   		.p2align 2 	
 3587              	DUMP:
 3588 2574 504700BF 		_NEST
 3589 2578 850C0000 		_ADR	BASE
 3590 257c E5070000 		_ADR	AT
 3591 2580 39080000 		_ADR	TOR
 3592 2584 BD120000 		_ADR	HEX			// save radix,set hex
 3593 2588 5D070000 		_DOLIT	16
 3593      10000000 
 3594 2590 C90E0000 		_ADR	SLASH			// change count to lines
 3595 2594 39080000 		_ADR	TOR
 3596 2598 B3070000 		_BRAN	DUMP4			// start count down loop
 3596      C8250000 
 3597              	DUMP1:
 3598 25a0 4D150000 	  _ADR	CR
 3599 25a4 5D070000 		_DOLIT	16
 3599      10000000 
 3600 25ac A10A0000 		_ADR	DDUP
 3601 25b0 21250000 		_ADR	DMP			// display numeric
 3602 25b4 790A0000 		_ADR	ROT
 3603 25b8 790A0000 		_ADR	ROT
 3604 25bc C5140000 		_ADR	SPACE
 3605 25c0 C5140000 		_ADR	SPACE
 3606 25c4 19150000 		_ADR	TYPEE			// display printable characters
 3607              	DUMP4:
 3608 25c8 81070000 	  _DONXT	DUMP1	// loop till done
 3608      A0250000 
 3609              	DUMP3:
 3610 25d0 81080000 		_ADR	DROP
 3611 25d4 11080000 		_ADR	RFROM
 3612 25d8 850C0000 		_ADR	BASE
 3613 25dc D1070000 		_ADR	STORE			// restore radix
 3614 25e0 F3050000 		_UNNEST
 3615              	
 3616              	//    .S	  ( ... -- ... )
 3617              	// 	Display the contents of the data stack.
 3618              	
 3619 25e4 6C250000 		.word	_DUMP
ARM GAS  forth.s 			page 98


 3620              	_DOTS:
 3621 25e8 02       		.byte  2
 3622 25e9 2E53     		.ascii ".S"
 3623 25eb 00       		.p2align 2 	
 3624              	DOTS:
 3625 25ec 504700BF 		_NEST
 3626 25f0 C5140000 		_ADR	SPACE
 3627 25f4 910F0000 		_ADR	DEPTH			// stack depth
 3628 25f8 39080000 		_ADR	TOR			// start count down loop
 3629 25fc B3070000 		_BRAN	DOTS2			// skip first pass
 3629      10260000 
 3630              	DOTS1:
 3631 2604 25080000 		_ADR	RAT
 3632 2608 B50F0000 		_ADR	PICK
 3633 260c 51160000 		_ADR	DOT			// index stack, display contents
 3634              	DOTS2:
 3635 2610 81070000 		_DONXT	DOTS1	// loop till done
 3635      04260000 
 3636 2618 C5140000 		_ADR	SPACE
 3637 261c F3050000 		_UNNEST
 3638              	
 3639              	//    >NAME	( ca -- na | F )
 3640              	// 	Convert code address to a name address.
 3641              	
 3642 2620 E8250000 		.word	_DOTS
 3643 2624 05       	_TNAME:	.byte  5
 3644 2625 3E4E414D 		.ascii ">NAME"
 3644      45
 3645 262a 00BF     		.p2align 2 	
 3646              	TNAME:
 3647 262c 504700BF 		_NEST
 3648 2630 39080000 		_ADR	TOR			//  
 3649 2634 0D0D0000 		_ADR	CNTXT			//  va
 3650 2638 E5070000 		_ADR	AT			//  na
 3651              	TNAM1:
 3652 263c 91080000 		_ADR	DUPP			//  na na
 3653 2640 9F070000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3653      70260000 
 3654 2648 91080000 		_ADR	DUPP			//  na na
 3655 264c E1180000 		_ADR	NAMET			//  na ca
 3656 2650 25080000 		_ADR	RAT			//  na ca code
 3657 2654 FD080000 		_ADR	XORR			//  na f --
 3658 2658 9F070000 		_QBRAN	TNAM2
 3658      70260000 
 3659 2660 010A0000 		_ADR	CELLM			//  la 
 3660 2664 E5070000 		_ADR	AT			//  next_na
 3661 2668 B3070000 		_BRAN	TNAM1
 3661      3C260000 
 3662              	TNAM2:	
 3663 2670 11080000 		_ADR	RFROM
 3664 2674 81080000 		_ADR	DROP			//  0|na --
 3665 2678 F3050000 		_UNNEST			// 0
 3666              	
 3667              	//    .ID	 ( na -- )
 3668              	// 	Display the name at address.
 3669              	
 3670 267c 24260000 		.word	_TNAME
ARM GAS  forth.s 			page 99


 3671 2680 03       	_DOTID:	.byte  3
 3672 2681 2E4944   		.ascii ".ID"
 3673              		.p2align 2 	
 3674              	DOTID:
 3675 2684 504700BF 		_NEST
 3676 2688 650A0000 		_ADR	QDUP			// if zero no name
 3677 268c 9F070000 		_QBRAN	DOTI1
 3677      AC260000 
 3678 2694 ED0B0000 		_ADR	COUNT
 3679 2698 5D070000 		_DOLIT	0x1F
 3679      1F000000 
 3680 26a0 D5080000 		_ADR	ANDD			// mask lexicon bits
 3681 26a4 19150000 		_ADR	TYPEE
 3682 26a8 F3050000 		_UNNEST			// display name string
 3683              	DOTI1:
 3684 26ac B5150000 		_DOTQP	9," {noName}"
 3684      09207B6E 
 3684      6F4E616D 
 3684      657D00BF 
 3685 26bc F3050000 		_UNNEST
 3686              	
 3687              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3688              	.if WANT_SEE 
 3689              	//    SEE	 ( -- //  string> )
 3690              	// 	A simple decompiler.
 3691              	
 3692              		.word	_DOTID
 3693              	_SEE:	.byte  3
 3694              		.ascii "SEE"
 3695              		.p2align 2 	
 3696              	SEE:
 3697              		_NEST
 3698              		_ADR	TICK	//  ca --, starting address
 3699              		_ADR	CR	
 3700              		_DOLIT	20
 3701              		_ADR	TOR
 3702              	SEE1:
 3703              		_ADR	CELLP			//  a
 3704              		_ADR	DUPP			//  a a
 3705              		_ADR	DECOMP		//  a
 3706              		_DONXT	SEE1
 3707              		_ADR	DROP
 3708              		_UNNEST
 3709              	
 3710              	// 	DECOMPILE ( a -- )
 3711              	// 	Convert code in a.  Display name of command or as data.
 3712              	
 3713              		.word	_SEE
 3714              	_DECOM:	.byte  9
 3715              		.ascii "DECOMPILE"
 3716              		.p2align 2 
 3717              		
 3718              	DECOMP:	
 3719              		_NEST
 3720              		_ADR	DUPP			//  a a
 3721              	// 	_ADR	TOR			//  a
 3722              		_ADR	AT			//  a code
ARM GAS  forth.s 			page 100


 3723              		_ADR	DUPP			//  a code code
 3724              		_DOLIT	0xF800D000 //0xF800F800
 3725              		_ADR	ANDD
 3726              		_DOLIT	0xF000D000 //0xF800F000
 3727              		_ADR	EQUAL			//  a code ?
 3728              		_ADR	INVER 
 3729              		_QBRAN	DECOM2	//  not a command
 3730              		//  a valid_code --, extract address and display name
 3731              		MOVW	IP,#0xFFE
 3732              		MOV	WP,TOS
 3733              		LSL	TOS,TOS,#21		//  get bits 22-12
 3734              		ASR	TOS,TOS,#9		//  with sign extension
 3735              		LSR	WP,WP,#15		//  get bits 11-1
 3736              		AND	WP,WP,IP		//  retain only bits 11-1
 3737              		ORR	TOS,TOS,WP		//  get bits 22-1
 3738              		NOP
 3739              		_ADR	OVER			//  a offset a
 3740              		_ADR	PLUS			//  a target-4
 3741              		_ADR	CELLP			//  a target
 3742              		_ADR	TNAME			//  a na/0 --, is it a name?
 3743              		_ADR	QDUP			//  name address or zero
 3744              		_QBRAN	DECOM1
 3745              		_ADR	SPACE			//  a na
 3746              		_ADR	DOTID			//  a --, display name
 3747              	// 	_ADR	RFROM			//  a
 3748              		_ADR	DROP
 3749              		_UNNEST
 3750              	DECOM1:	// _ADR	RFROM		//  a
 3751              		_ADR	AT			//  data
 3752              		_ADR	UDOT			//  display data
 3753              		_UNNEST
 3754              	DECOM2:
 3755              		_ADR	UDOT
 3756              	// 	_ADR	RFROM
 3757              		_ADR	DROP
 3758              		_UNNEST
 3759              	
 3760              	//    WORDS	( -- )
 3761              	// 	Display the names in the context vocabulary.
 3762              	
 3763              		.word	_DECOM
 3764              	.else 
 3765 26c0 80260000 		.word _DOTID 
 3766              	.endif 
 3767 26c4 05       	_WORDS:	.byte  5
 3768 26c5 574F5244 		.ascii "WORDS"
 3768      53
 3769 26ca 00BF     		.p2align 2 	
 3770              	WORDS:
 3771 26cc 504700BF 		_NEST
 3772 26d0 4D150000 		_ADR	CR
 3773 26d4 0D0D0000 		_ADR	CNTXT
 3774 26d8 E5070000 		_ADR	AT			// only in context
 3775              	WORS1:
 3776 26dc 650A0000 		_ADR	QDUP			// ?at end of list
 3777 26e0 9F070000 		_QBRAN	WORS2
 3777      04270000 
ARM GAS  forth.s 			page 101


 3778 26e8 91080000 		_ADR	DUPP
 3779 26ec C5140000 		_ADR	SPACE
 3780 26f0 85260000 		_ADR	DOTID			// display a name
 3781 26f4 010A0000 		_ADR	CELLM
 3782 26f8 E5070000 		_ADR	AT
 3783 26fc B3070000 		_BRAN	WORS1
 3783      DC260000 
 3784              	WORS2:
 3785 2704 F3050000 		_UNNEST
 3786              	
 3787              	// **************************************************************************
 3788              	//  cold start
 3789              	
 3790              	//    VER	 ( -- n )
 3791              	// 	Return the version number of this implementation.
 3792              	
 3793              	// 	.word	_WORDS
 3794              	// _VERSN	.byte  3
 3795              	// 	.ascii "VER"
 3796              	// 	.p2align 2 	
 3797              	VERSN:
 3798 2708 504700BF 		_NEST
 3799 270c 5D070000 		_DOLIT	VER*256+EXT
 3799      00010000 
 3800 2714 F3050000 		_UNNEST
 3801              	
 3802              	//    hi	  ( -- )
 3803              	// 	Display the sign-on message of eForth.
 3804              	
 3805 2718 C4260000 		.word	_WORDS
 3806 271c 02       	_HI:	.byte  2
 3807 271d 4849     		.ascii "HI"
 3808 271f 00       		.p2align 2
 3809              	
 3810              	HI:
 3811 2720 504700BF 		_NEST
 3812 2724 4D150000 		_ADR	CR	// initialize I/O
 3813 2728 B5150000 		_DOTQP	17, "beyond Jupiter, v" 
 3813      11626579 
 3813      6F6E6420 
 3813      4A757069 
 3813      7465722C 
 3814 2740 850C0000 		_ADR	BASE
 3815 2744 E5070000 		_ADR	AT
 3816 2748 BD120000 		_ADR	HEX	// save radix
 3817 274c 09270000 		_ADR	VERSN
 3818 2750 AD110000 		_ADR	BDIGS
 3819 2754 F9110000 		_ADR	DIG
 3820 2758 F9110000 		_ADR	DIG
 3821 275c 5D070000 		_DOLIT	'.'
 3821      2E000000 
 3822 2764 CD110000 		_ADR	HOLD
 3823 2768 19120000 		_ADR	DIGS
 3824 276c 6D120000 		_ADR	EDIGS
 3825 2770 19150000 		_ADR	TYPEE	// format version number
 3826 2774 850C0000 		_ADR	BASE
 3827 2778 D1070000 		_ADR	STORE
ARM GAS  forth.s 			page 102


 3828 277c 4D150000 		_ADR	CR
 3829 2780 F3050000 		_UNNEST			// restore radix
 3830              	
 3831              	//    COLD	( -- )
 3832              	// 	The high level cold start sequence.
 3833              	
 3834 2784 1C270000 		.word	_HI
 3835 2788 04       	_LASTN:	.byte  4
 3836 2789 434F4C44 		.ascii "COLD"
 3837 278d 0000BF   		.p2align 2	
 3838              	COLD:
 3839 2790 00B5FDF7 		_CALL forth_init 
 3839      BDFC5DF8 
 3839      04EB
 3840 279a DFF84CC0 		ldr IP,=COLD1 
 3841 279e FDF725BF 		_NEXT
 3842 27a2 00BF     		.p2align 2 
 3843              	COLD1:
 3844 27a4 5D070000 		_DOLIT  0 
 3844      00000000 
 3845 27ac 01000000 		_ADR ULED // turn off user LED 
 3846 27b0 5D070000 		_DOLIT	UZERO
 3846      88020000 
 3847 27b8 5D070000 		_DOLIT	UPP
 3847      00000020 
 3848 27c0 5D070000 		_DOLIT	ULAST-UZERO
 3848      A0000000 
 3849 27c8 7D100000 		_ADR	MOVE 			// initialize user area
 3850 27cc 651D0000 		_ADR	PRESE			// initialize stack and TIB
 3851 27d0 710C0000 		_ADR	TBOOT
 3852 27d4 2D100000 		_ADR	ATEXE			// application boot
 3853 27d8 5D220000 		_ADR	OVERT
 3854 27dc B3070000 		_BRAN	QUIT			// start interpretation
 3854      841D0000 
 3855              	COLD2:
 3856              		.p2align 2 	
 3857              	CTOP:
 3858 27e4 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3859              	
 3860              	
 3861 27e8 A4270000 	  .end 
ARM GAS  forth.s 			page 103


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 104


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 105


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:203    *ABS*:0000000000000e00 NVIC_STIR
     stm32f411ce.inc:206    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:207    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:208    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:209    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:211    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:212    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:213    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:214    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:217    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:218    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:221    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:222    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:223    *ABS*:0000000000000008 TIM_SMCR
ARM GAS  forth.s 			page 106


     stm32f411ce.inc:224    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:225    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:226    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:227    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:228    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:229    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:230    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:231    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:232    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:233    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:234    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:235    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:236    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:237    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:238    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:239    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:240    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:243    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:245    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:246    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:247    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:248    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:249    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:250    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:251    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:254    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:256    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:257    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:258    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:259    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:260    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:261    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
             forth.s:1086   .text:0000000000000c34 SEED
ARM GAS  forth.s 			page 107


          macros.inc:74     *ABS*:0000000000000008 TICKS
             forth.s:1108   .text:0000000000000c5c TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
             forth.s:1132   .text:0000000000000c84 BASE
          macros.inc:78     *ABS*:0000000000000018 TMP
             forth.s:1156   .text:0000000000000ca4 SPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
             forth.s:1180   .text:0000000000000ccc NTIB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2791   .text:0000000000001d20 EVAL
             forth.s:1204   .text:0000000000000cf4 HLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 FT_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:255    .text:00000000000000c0 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
           ps2_kbd.s:62     .text:00000000000004e4 kbd_isr
             tvout.s:133    .text:00000000000003cc tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:231    .text:0000000000000094 uart_puts
              init.s:211    .text:000000000000006c reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
              init.s:221    .text:0000000000000080 user_reboot_msg
              init.s:219    .text:000000000000007c scb_adr
              init.s:220    .text:000000000000007c $d
              init.s:225    .text:0000000000000092 $t
              init.s:443    .text:0000000000000248 remap
              init.s:323    .text:0000000000000138 init_devices
              init.s:414    .text:00000000000001fc uart_init
             tvout.s:67     .text:0000000000000330 tv_init
ARM GAS  forth.s 			page 108


              init.s:283    .text:0000000000000110 forth_init
             forth.s:3838   .text:0000000000002790 COLD
             forth.s:85     .text:00000000000005e4 NEST
              init.s:336    .text:0000000000000156 wait_hserdy
              init.s:357    .text:0000000000000178 wait_pllrdy
              init.s:369    .text:0000000000000192 wait_sws
              init.s:468    .text:0000000000000288 UZERO
              init.s:502    .text:0000000000000328 ULAST
              init.s:469    .text:0000000000000288 $d
             forth.s:3810   .text:0000000000002720 HI
             forth.s:2719   .text:0000000000001c3c INTER
             forth.s:3835   .text:0000000000002788 _LASTN
             forth.s:3857   .text:00000000000027e4 CTOP
              init.s:503    .text:0000000000000328 $d
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:0000000000000140 HRES
             tvout.s:37     *ABS*:00000000000000c8 VRES
             tvout.s:38     *ABS*:0000000000000004 BPP
             tvout.s:39     *ABS*:00000000000000a0 BPR
             tvout.s:40     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
             tvout.s:41     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:42     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:43     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:44     *ABS*:00000000000003bf VIDEO_DELAY
             tvout.s:45     *ABS*:000000000000173f VIDEO_END
             tvout.s:48     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:49     *ABS*:0000000000000001 ST_PREVID
             tvout.s:50     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:51     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:53     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:54     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:67     .text:0000000000000330 $t
             tvout.s:152    .text:00000000000003f8 state_vsync
             tvout.s:193    .text:000000000000044c state_pre_video
             tvout.s:204    .text:000000000000045e state_video_out
             tvout.s:234    .text:00000000000004b6 state_post_video
             tvout.s:251    .text:00000000000004dc tv_isr_exit
             tvout.s:182    .text:0000000000000432 sync_end
             tvout.s:243    .text:00000000000004c8 frame_end
             tvout.s:261    .text:00000000000004e0 put_char
             tvout.s:267    .rodata:0000000000000000 $d
             tvout.s:271    *ABS*:0000000000000006 CHAR_WIDTH
             tvout.s:272    *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:274    .rodata:0000000000000000 font_6x8
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_F_PAR_ERR
           ps2_kbd.s:50     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:51     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:52     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:53     *ABS*:000000000000006f KBD_ONES
           ps2_kbd.s:87     .text:0000000000000538 start_bit
           ps2_kbd.s:94     .text:000000000000054e parity_bit
ARM GAS  forth.s 			page 109


           ps2_kbd.s:106    .text:0000000000000570 stop_bit
           ps2_kbd.s:128    .text:00000000000005a0 kbd_init
             forth.s:75     .text:00000000000005d8 TPUSH
             forth.s:89     .text:00000000000005ec INEXT
             forth.s:80     .text:00000000000005de TPOP
             forth.s:92     .text:00000000000005f2 UNNEST
             forth.s:105    .text:00000000000005fc COMPI_NEST
             forth.s:120    .text:000000000000061a $d
             forth.s:121    .text:000000000000061e _RAND
             forth.s:124    .text:0000000000000628 RAND
             forth.s:126    .text:000000000000062c $d
             forth.s:868    .text:0000000000000af4 ABSS
             forth.s:351    .text:00000000000007e4 AT
             forth.s:468    .text:0000000000000890 DUPP
             forth.s:252    .text:000000000000075c DOLIT
             forth.s:580    .text:0000000000000944 LSHIFT
             forth.s:541    .text:00000000000008fc XORR
             forth.s:568    .text:000000000000092c RSHIFT
             forth.s:338    .text:00000000000007d0 STORE
             forth.s:517    .text:00000000000008d4 ANDD
             forth.s:479    .text:00000000000008a0 SWAP
             forth.s:1411   .text:0000000000000eb0 MODD
             forth.s:154    .text:000000000000069c _PAUSE
             forth.s:156    .text:00000000000006a2 $t
             forth.s:157    .text:00000000000006a4 PAUSE
             forth.s:159    .text:00000000000006a8 $d
             forth.s:161    .text:00000000000006b0 PAUSE_LOOP
             forth.s:300    .text:000000000000079e QBRAN
             forth.s:166    .text:00000000000006c8 PAUSE_EXIT
             forth.s:317    .text:00000000000007b2 BRAN
             forth.s:172    .text:00000000000006d0 _ULED
             forth.s:176    .text:00000000000006d8 ULED
             forth.s:185    .text:00000000000006f4 ULED_OFF
             forth.s:191    .text:00000000000006f8 $d
             forth.s:192    .text:00000000000006fc _QRX
             forth.s:195    .text:0000000000000704 QKEY
             forth.s:196    .text:0000000000000704 QRX
             forth.s:215    .text:000000000000072e $d
             forth.s:216    .text:0000000000000732 _TXSTO
             forth.s:219    .text:0000000000000738 TXSTO
             forth.s:220    .text:0000000000000738 EMIT
             forth.s:221    .text:0000000000000738 TECHO
             forth.s:237    .text:0000000000000750 $d
             forth.s:238    .text:0000000000000754 _NOP
             forth.s:240    .text:0000000000000758 $t
             forth.s:241    .text:0000000000000758 NOP
             forth.s:260    .text:0000000000000766 $d
             forth.s:261    .text:000000000000076a _EXECU
             forth.s:263    .text:0000000000000772 $t
             forth.s:264    .text:0000000000000774 EXECU
             forth.s:279    .text:0000000000000780 DONXT
             forth.s:286    .text:0000000000000790 NEXT1
             forth.s:306    .text:00000000000007ac QBRAN1
             forth.s:324    .text:00000000000007b8 $d
             forth.s:325    .text:00000000000007bc _EXIT
             forth.s:328    .text:00000000000007c4 EXIT
             forth.s:329    .text:00000000000007c4 $d
ARM GAS  forth.s 			page 110


             forth.s:335    .text:00000000000007cc _STORE
             forth.s:337    .text:00000000000007ce $t
             forth.s:347    .text:00000000000007dc $d
             forth.s:348    .text:00000000000007e0 _AT
             forth.s:350    .text:00000000000007e2 $t
             forth.s:358    .text:00000000000007e8 $d
             forth.s:359    .text:00000000000007ec _CSTOR
             forth.s:362    .text:00000000000007f0 CSTOR
             forth.s:371    .text:00000000000007fc $d
             forth.s:372    .text:0000000000000800 _CAT
             forth.s:375    .text:0000000000000804 CAT
             forth.s:382    .text:0000000000000808 $d
             forth.s:383    .text:000000000000080c _RFROM
             forth.s:386    .text:0000000000000810 RFROM
             forth.s:394    .text:000000000000081a $d
             forth.s:395    .text:000000000000081e _RAT
             forth.s:398    .text:0000000000000824 RAT
             forth.s:406    .text:000000000000082e $d
             forth.s:407    .text:0000000000000832 _TOR
             forth.s:410    .text:0000000000000838 TOR
             forth.s:417    .text:0000000000000842 $d
             forth.s:418    .text:0000000000000846 _RPSTOR
             forth.s:420    .text:000000000000084a $t
             forth.s:421    .text:000000000000084c RPSTOR
             forth.s:429    .text:0000000000000854 $d
             forth.s:430    .text:0000000000000858 _SPSTOR
             forth.s:432    .text:000000000000085c $t
             forth.s:433    .text:000000000000085c SPSTOR
             forth.s:441    .text:0000000000000864 $d
             forth.s:442    .text:0000000000000868 _SPAT
             forth.s:444    .text:000000000000086c $t
             forth.s:445    .text:000000000000086c SPAT
             forth.s:453    .text:0000000000000874 $d
             forth.s:454    .text:0000000000000878 _DROP
             forth.s:457    .text:0000000000000880 DROP
             forth.s:464    .text:0000000000000886 $d
             forth.s:465    .text:000000000000088a _DUPP
             forth.s:467    .text:000000000000088e $t
             forth.s:475    .text:0000000000000896 $d
             forth.s:476    .text:000000000000089a _SWAP
             forth.s:488    .text:00000000000008a8 $d
             forth.s:489    .text:00000000000008ac _OVER
             forth.s:492    .text:00000000000008b4 OVER
             forth.s:500    .text:00000000000008bc $d
             forth.s:501    .text:00000000000008c0 _ZLESS
             forth.s:504    .text:00000000000008c4 ZLESS
             forth.s:513    .text:00000000000008ca $d
             forth.s:514    .text:00000000000008ce _ANDD
             forth.s:516    .text:00000000000008d2 $t
             forth.s:525    .text:00000000000008de $d
             forth.s:526    .text:00000000000008e2 _ORR
             forth.s:529    .text:00000000000008e8 ORR
             forth.s:537    .text:00000000000008f2 $d
             forth.s:538    .text:00000000000008f6 _XORR
             forth.s:540    .text:00000000000008fa $t
             forth.s:549    .text:0000000000000906 $d
             forth.s:550    .text:000000000000090a _UPLUS
ARM GAS  forth.s 			page 111


             forth.s:552    .text:000000000000090e $t
             forth.s:553    .text:0000000000000910 UPLUS
             forth.s:564    .text:0000000000000920 $d
             forth.s:565    .text:0000000000000924 _RSHIFT
             forth.s:576    .text:0000000000000936 $d
             forth.s:577    .text:000000000000093a _LSHIFT
             forth.s:588    .text:000000000000094e $d
             forth.s:589    .text:0000000000000952 _PLUS
             forth.s:591    .text:0000000000000954 $t
             forth.s:592    .text:0000000000000954 PLUS
             forth.s:600    .text:000000000000095c $d
             forth.s:601    .text:0000000000000960 _SUBB
             forth.s:603    .text:0000000000000962 $t
             forth.s:604    .text:0000000000000964 SUBB
             forth.s:612    .text:000000000000096e $d
             forth.s:613    .text:0000000000000972 _STAR
             forth.s:615    .text:0000000000000974 $t
             forth.s:616    .text:0000000000000974 STAR
             forth.s:624    .text:000000000000097e $d
             forth.s:625    .text:0000000000000982 _UMSTA
             forth.s:627    .text:0000000000000986 $t
             forth.s:628    .text:0000000000000988 UMSTA
             forth.s:638    .text:0000000000000994 $d
             forth.s:639    .text:0000000000000998 _MSTAR
             forth.s:642    .text:000000000000099c MSTAR
             forth.s:652    .text:00000000000009a8 $d
             forth.s:653    .text:00000000000009ac _ONEP
             forth.s:656    .text:00000000000009b0 ONEP
             forth.s:663    .text:00000000000009b6 $d
             forth.s:664    .text:00000000000009ba _ONEM
             forth.s:667    .text:00000000000009c0 ONEM
             forth.s:674    .text:00000000000009c6 $d
             forth.s:675    .text:00000000000009ca _TWOP
             forth.s:678    .text:00000000000009d0 TWOP
             forth.s:685    .text:00000000000009d6 $d
             forth.s:686    .text:00000000000009da _TWOM
             forth.s:689    .text:00000000000009e0 TWOM
             forth.s:696    .text:00000000000009e6 $d
             forth.s:697    .text:00000000000009ea _CELLP
             forth.s:699    .text:00000000000009f0 $t
             forth.s:700    .text:00000000000009f0 CELLP
             forth.s:707    .text:00000000000009f6 $d
             forth.s:708    .text:00000000000009fa _CELLM
             forth.s:710    .text:0000000000000a00 $t
             forth.s:711    .text:0000000000000a00 CELLM
             forth.s:718    .text:0000000000000a06 $d
             forth.s:719    .text:0000000000000a0a _BLANK
             forth.s:722    .text:0000000000000a10 BLANK
             forth.s:730    .text:0000000000000a1a $d
             forth.s:731    .text:0000000000000a1e _CELLS
             forth.s:733    .text:0000000000000a24 $t
             forth.s:734    .text:0000000000000a24 CELLS
             forth.s:741    .text:0000000000000a2a $d
             forth.s:742    .text:0000000000000a2e _CELLSL
             forth.s:744    .text:0000000000000a34 $t
             forth.s:745    .text:0000000000000a34 CELLSL
             forth.s:752    .text:0000000000000a3a $d
ARM GAS  forth.s 			page 112


             forth.s:753    .text:0000000000000a3e _TWOST
             forth.s:756    .text:0000000000000a44 TWOST
             forth.s:763    .text:0000000000000a4a $d
             forth.s:764    .text:0000000000000a4e _TWOSL
             forth.s:767    .text:0000000000000a54 TWOSL
             forth.s:774    .text:0000000000000a5a $d
             forth.s:775    .text:0000000000000a5e _QDUP
             forth.s:778    .text:0000000000000a64 QDUP
             forth.s:787    .text:0000000000000a6e $d
             forth.s:788    .text:0000000000000a72 _ROT
             forth.s:790    .text:0000000000000a76 $t
             forth.s:791    .text:0000000000000a78 ROT
             forth.s:801    .text:0000000000000a82 $d
             forth.s:802    .text:0000000000000a86 _DDROP
             forth.s:804    .text:0000000000000a8c $t
             forth.s:805    .text:0000000000000a8c DDROP
             forth.s:813    .text:0000000000000a96 $d
             forth.s:814    .text:0000000000000a9a _DDUP
             forth.s:817    .text:0000000000000aa0 DDUP
             forth.s:826    .text:0000000000000aac $d
             forth.s:827    .text:0000000000000ab0 _DPLUS
             forth.s:830    .text:0000000000000ab4 DPLUS
             forth.s:842    .text:0000000000000ac8 $d
             forth.s:843    .text:0000000000000acc _INVER
             forth.s:845    .text:0000000000000ad0 $t
             forth.s:846    .text:0000000000000ad0 INVER
             forth.s:853    .text:0000000000000ad6 $d
             forth.s:854    .text:0000000000000ada _NEGAT
             forth.s:857    .text:0000000000000ae4 NEGAT
             forth.s:864    .text:0000000000000aea $d
             forth.s:865    .text:0000000000000aee _ABSS
             forth.s:867    .text:0000000000000af2 $t
             forth.s:877    .text:0000000000000afe $d
             forth.s:878    .text:0000000000000b02 _ZEQUAL
             forth.s:881    .text:0000000000000b08 ZEQUAL
             forth.s:891    .text:0000000000000b16 $d
             forth.s:892    .text:0000000000000b1a _EQUAL
             forth.s:894    .text:0000000000000b1c $t
             forth.s:895    .text:0000000000000b1c EQUAL
             forth.s:906    .text:0000000000000b2c $d
             forth.s:907    .text:0000000000000b30 _ULESS
             forth.s:910    .text:0000000000000b34 ULESS
             forth.s:921    .text:0000000000000b44 $d
             forth.s:922    .text:0000000000000b48 _LESS
             forth.s:924    .text:0000000000000b4a $t
             forth.s:925    .text:0000000000000b4c LESS
             forth.s:936    .text:0000000000000b5c $d
             forth.s:937    .text:0000000000000b60 _GREAT
             forth.s:939    .text:0000000000000b62 $t
             forth.s:940    .text:0000000000000b64 GREAT
             forth.s:951    .text:0000000000000b74 $d
             forth.s:952    .text:0000000000000b78 _MAX
             forth.s:954    .text:0000000000000b7c $t
             forth.s:955    .text:0000000000000b7c MAX
             forth.s:965    .text:0000000000000b88 $d
             forth.s:966    .text:0000000000000b8c _MIN
             forth.s:968    .text:0000000000000b90 $t
ARM GAS  forth.s 			page 113


             forth.s:969    .text:0000000000000b90 MIN
             forth.s:979    .text:0000000000000b9c $d
             forth.s:980    .text:0000000000000ba0 _PSTOR
             forth.s:983    .text:0000000000000ba4 PSTOR
             forth.s:994    .text:0000000000000bb4 $d
             forth.s:995    .text:0000000000000bb8 _DSTOR
             forth.s:998    .text:0000000000000bbc DSTOR
             forth.s:1009   .text:0000000000000bd0 $d
             forth.s:1010   .text:0000000000000bd4 _DAT
             forth.s:1013   .text:0000000000000bd8 DAT
             forth.s:1022   .text:0000000000000be2 $d
             forth.s:1023   .text:0000000000000be6 _COUNT
             forth.s:1025   .text:0000000000000bec $t
             forth.s:1026   .text:0000000000000bec COUNT
             forth.s:1035   .text:0000000000000bf8 $d
             forth.s:1036   .text:0000000000000bfc _DNEGA
             forth.s:1038   .text:0000000000000c04 $t
             forth.s:1039   .text:0000000000000c04 DNEGA
             forth.s:1057   .text:0000000000000c14 DOVAR
             forth.s:1070   .text:0000000000000c20 DOCON
             forth.s:1082   .text:0000000000000c2a $d
             forth.s:1083   .text:0000000000000c2e _SEED
             forth.s:1093   .text:0000000000000c3e $d
             forth.s:1094   .text:0000000000000c42 _MSEC
             forth.s:1097   .text:0000000000000c48 MSEC
             forth.s:1104   .text:0000000000000c52 $d
             forth.s:1105   .text:0000000000000c56 _TIMER
             forth.s:1107   .text:0000000000000c5c $t
             forth.s:1116   .text:0000000000000c66 $d
             forth.s:1117   .text:0000000000000c6a _TBOOT
             forth.s:1119   .text:0000000000000c70 $t
             forth.s:1120   .text:0000000000000c70 TBOOT
             forth.s:1128   .text:0000000000000c7a $d
             forth.s:1129   .text:0000000000000c7e _BASE
             forth.s:1144   .text:0000000000000c8e TEMP
             forth.s:1152   .text:0000000000000c98 $d
             forth.s:1153   .text:0000000000000c9c _SPAN
             forth.s:1164   .text:0000000000000cae $d
             forth.s:1165   .text:0000000000000cb2 _INN
             forth.s:1167   .text:0000000000000cb6 $t
             forth.s:1168   .text:0000000000000cb8 INN
             forth.s:1176   .text:0000000000000cc2 $d
             forth.s:1177   .text:0000000000000cc6 _NTIB
             forth.s:1188   .text:0000000000000cd6 $d
             forth.s:1189   .text:0000000000000cda _TEVAL
             forth.s:1191   .text:0000000000000ce0 $t
             forth.s:1192   .text:0000000000000ce0 TEVAL
             forth.s:1200   .text:0000000000000cea $d
             forth.s:1201   .text:0000000000000cee _HLD
             forth.s:1203   .text:0000000000000cf2 $t
             forth.s:1212   .text:0000000000000cfe $d
             forth.s:1213   .text:0000000000000d02 _CNTXT
             forth.s:1215   .text:0000000000000d0a $t
             forth.s:1216   .text:0000000000000d0c CNTXT
             forth.s:1217   .text:0000000000000d0c CRRNT
             forth.s:1225   .text:0000000000000d16 $d
             forth.s:1226   .text:0000000000000d1a _CP
ARM GAS  forth.s 			page 114


             forth.s:1229   .text:0000000000000d20 CPP
             forth.s:1236   .text:0000000000000d2a $d
             forth.s:1237   .text:0000000000000d2e _FCP
             forth.s:1239   .text:0000000000000d32 $t
             forth.s:1240   .text:0000000000000d34 FCP
             forth.s:1248   .text:0000000000000d3e $d
             forth.s:1249   .text:0000000000000d42 _LAST
             forth.s:1252   .text:0000000000000d48 LAST
             forth.s:1259   .text:0000000000000d52 $d
             forth.s:1260   .text:0000000000000d56 _FTRACE
             forth.s:1263   .text:0000000000000d60 FTRACE
             forth.s:1274   .text:0000000000000d6a $d
             forth.s:1275   .text:0000000000000d6e _USER_BGN
             forth.s:1278   .text:0000000000000d7c USER_BEGIN
             forth.s:1282   .text:0000000000000d84 USR_BGN_ADR
             forth.s:1283   .text:0000000000000d84 $d
             forth.s:1288   .text:0000000000000d8c _USER_END
             forth.s:1291   .text:0000000000000d98 USER_END
             forth.s:1295   .text:0000000000000da0 USER_END_ADR
             forth.s:1296   .text:0000000000000da0 $d
             forth.s:1307   .text:0000000000000da8 _WITHI
             forth.s:1310   .text:0000000000000db0 WITHI
             forth.s:1312   .text:0000000000000db4 $d
             forth.s:1326   .text:0000000000000dd4 _UMMOD
             forth.s:1329   .text:0000000000000ddc UMMOD
             forth.s:1333   .text:0000000000000de6 UMMOD0
             forth.s:1340   .text:0000000000000df6 UMMOD1
             forth.s:1346   .text:0000000000000e00 UMMOD2
             forth.s:1356   .text:0000000000000e0c $d
             forth.s:1357   .text:0000000000000e10 _MSMOD
             forth.s:1359   .text:0000000000000e16 $t
             forth.s:1360   .text:0000000000000e18 MSMOD
             forth.s:1362   .text:0000000000000e1c $d
             forth.s:1371   .text:0000000000000e44 MMOD1
             forth.s:1378   .text:0000000000000e60 MMOD2
             forth.s:1386   .text:0000000000000e80 MMOD3
             forth.s:1393   .text:0000000000000e88 _SLMOD
             forth.s:1396   .text:0000000000000e90 SLMOD
             forth.s:1398   .text:0000000000000e94 $d
             forth.s:1408   .text:0000000000000eac _MODD
             forth.s:1410   .text:0000000000000eb0 $t
             forth.s:1413   .text:0000000000000eb4 $d
             forth.s:1421   .text:0000000000000ec4 _SLASH
             forth.s:1423   .text:0000000000000ec6 $t
             forth.s:1424   .text:0000000000000ec8 SLASH
             forth.s:1426   .text:0000000000000ecc $d
             forth.s:1435   .text:0000000000000ee0 _SSMOD
             forth.s:1437   .text:0000000000000ee6 $t
             forth.s:1438   .text:0000000000000ee8 SSMOD
             forth.s:1440   .text:0000000000000eec $d
             forth.s:1450   .text:0000000000000f04 _STASL
             forth.s:1453   .text:0000000000000f08 STASL
             forth.s:1455   .text:0000000000000f0c $d
             forth.s:1467   .text:0000000000000f20 _ALGND
             forth.s:1469   .text:0000000000000f28 $t
             forth.s:1470   .text:0000000000000f28 ALGND
             forth.s:1479   .text:0000000000000f38 $d
ARM GAS  forth.s 			page 115


             forth.s:1480   .text:0000000000000f3c _TCHAR
             forth.s:1482   .text:0000000000000f42 $t
             forth.s:1483   .text:0000000000000f44 TCHAR
             forth.s:1485   .text:0000000000000f48 $d
             forth.s:1495   .text:0000000000000f80 TCHA1
             forth.s:1502   .text:0000000000000f88 _DEPTH
             forth.s:1504   .text:0000000000000f8e $t
             forth.s:1505   .text:0000000000000f90 DEPTH
             forth.s:1515   .text:0000000000000fa8 $d
             forth.s:1516   .text:0000000000000fac _PICK
             forth.s:1519   .text:0000000000000fb4 PICK
             forth.s:1521   .text:0000000000000fb8 $d
             forth.s:1535   .text:0000000000000fd4 _HERE
             forth.s:1538   .text:0000000000000fdc HERE
             forth.s:1540   .text:0000000000000fe0 $d
             forth.s:1548   .text:0000000000000ff0 _PAD
             forth.s:1550   .text:0000000000000ff4 $t
             forth.s:1551   .text:0000000000000ff4 PAD
             forth.s:1553   .text:0000000000000ff8 $d
             forth.s:1562   .text:0000000000001010 _TIB
             forth.s:1564   .text:0000000000001014 $t
             forth.s:1565   .text:0000000000001014 TIB
             forth.s:1573   .text:000000000000101e $d
             forth.s:1574   .text:0000000000001022 _ATEXE
             forth.s:1577   .text:000000000000102c ATEXE
             forth.s:1589   .text:0000000000001040 $d
             forth.s:1590   .text:0000000000001044 _CMOVE
             forth.s:1592   .text:000000000000104a $t
             forth.s:1593   .text:000000000000104c CMOVE
             forth.s:1600   .text:000000000000105e CMOV1
             forth.s:1597   .text:0000000000001056 CMOV0
             forth.s:1605   .text:0000000000001068 CMOV2
             forth.s:1612   .text:0000000000001070 $d
             forth.s:1613   .text:0000000000001074 _MOVE
             forth.s:1616   .text:000000000000107c MOVE
             forth.s:1624   .text:0000000000001092 MOVE1
             forth.s:1621   .text:000000000000108a MOVE0
             forth.s:1629   .text:000000000000109c MOVE2
             forth.s:1636   .text:00000000000010a4 $d
             forth.s:1637   .text:00000000000010a8 _FILL
             forth.s:1640   .text:00000000000010b0 FILL
             forth.s:1643   .text:00000000000010b8 FILL0
             forth.s:1646   .text:00000000000010bc FILL1
             forth.s:1652   .text:00000000000010ca FILL2
             forth.s:1659   .text:00000000000010d2 $d
             forth.s:1660   .text:00000000000010d6 _PACKS
             forth.s:1663   .text:00000000000010e0 PACKS
             forth.s:1665   .text:00000000000010e4 $d
             forth.s:1692   .text:000000000000113c _DIGIT
             forth.s:1694   .text:0000000000001142 $t
             forth.s:1695   .text:0000000000001144 DIGIT
             forth.s:1697   .text:0000000000001148 $d
             forth.s:1711   .text:000000000000117c _EXTRC
             forth.s:1713   .text:0000000000001184 $t
             forth.s:1714   .text:0000000000001184 EXTRC
             forth.s:1716   .text:0000000000001188 $d
             forth.s:1727   .text:00000000000011a8 _BDIGS
ARM GAS  forth.s 			page 116


             forth.s:1730   .text:00000000000011ac BDIGS
             forth.s:1732   .text:00000000000011b0 $d
             forth.s:1741   .text:00000000000011c4 _HOLD
             forth.s:1744   .text:00000000000011cc HOLD
             forth.s:1746   .text:00000000000011d0 $d
             forth.s:1759   .text:00000000000011f4 _DIG
             forth.s:1761   .text:00000000000011f6 $t
             forth.s:1762   .text:00000000000011f8 DIG
             forth.s:1764   .text:00000000000011fc $d
             forth.s:1774   .text:0000000000001214 _DIGS
             forth.s:1777   .text:0000000000001218 DIGS
             forth.s:1779   .text:000000000000121c DIGS1
             forth.s:1780   .text:000000000000121c $d
             forth.s:1784   .text:0000000000001234 DIGS2
             forth.s:1791   .text:000000000000123c _SIGN
             forth.s:1794   .text:0000000000001244 SIGN
             forth.s:1796   .text:0000000000001248 $d
             forth.s:1800   .text:0000000000001260 SIGN1
             forth.s:1807   .text:0000000000001268 _EDIGS
             forth.s:1810   .text:000000000000126c EDIGS
             forth.s:1812   .text:0000000000001270 $d
             forth.s:1827   .text:000000000000128c STRR
             forth.s:1828   .text:000000000000128c $t
             forth.s:1829   .text:0000000000001290 $d
             forth.s:1843   .text:00000000000012b8 _HEX
             forth.s:1845   .text:00000000000012bc $t
             forth.s:1846   .text:00000000000012bc HEX
             forth.s:1848   .text:00000000000012c0 $d
             forth.s:1857   .text:00000000000012d8 _DECIM
             forth.s:1859   .text:00000000000012e0 $t
             forth.s:1860   .text:00000000000012e0 DECIM
             forth.s:1862   .text:00000000000012e4 $d
             forth.s:1874   .text:00000000000012fc _DIGTQ
             forth.s:1877   .text:0000000000001304 DIGTQ
             forth.s:1879   .text:0000000000001308 $d
             forth.s:1892   .text:0000000000001350 DGTQ1
             forth.s:1902   .text:0000000000001364 _NUMBQ
             forth.s:1904   .text:000000000000136c $t
             forth.s:1905   .text:000000000000136c NUMBQ
             forth.s:1907   .text:0000000000001370 $d
             forth.s:1923   .text:00000000000013bc NUMQ1
             forth.s:1971   .text:0000000000001484 NUMQ6
             forth.s:1939   .text:0000000000001400 NUMQ2
             forth.s:1963   .text:0000000000001468 NUMQ4
             forth.s:1960   .text:000000000000145c NUMQ3
             forth.s:1969   .text:0000000000001480 NUMQ5
             forth.s:1986   .text:00000000000014a0 _KEY
             forth.s:1988   .text:00000000000014a4 $t
             forth.s:1989   .text:00000000000014a4 KEY
             forth.s:1991   .text:00000000000014a8 KEY1
             forth.s:1992   .text:00000000000014a8 $d
             forth.s:2000   .text:00000000000014bc _SPACE
             forth.s:2002   .text:00000000000014c2 $t
             forth.s:2003   .text:00000000000014c4 SPACE
             forth.s:2005   .text:00000000000014c8 $d
             forth.s:2013   .text:00000000000014d8 _SPACS
             forth.s:2016   .text:00000000000014e0 SPACS
ARM GAS  forth.s 			page 117


             forth.s:2018   .text:00000000000014e4 $d
             forth.s:2024   .text:0000000000001500 CHAR2
             forth.s:2022   .text:00000000000014fc CHAR1
             forth.s:2032   .text:0000000000001510 _TYPEE
             forth.s:2035   .text:0000000000001518 TYPEE
             forth.s:2037   .text:000000000000151c $d
             forth.s:2043   .text:0000000000001534 TYPE2
             forth.s:2039   .text:0000000000001528 TYPE1
             forth.s:2052   .text:0000000000001548 _CR
             forth.s:2055   .text:000000000000154c CR
             forth.s:2057   .text:0000000000001550 $d
             forth.s:2071   .text:000000000000156c DOSTR
             forth.s:2072   .text:000000000000156c $t
             forth.s:2074   .text:0000000000001570 $d
             forth.s:2093   .text:0000000000001598 STRQP
             forth.s:2094   .text:0000000000001598 $t
             forth.s:2095   .text:000000000000159c $d
             forth.s:2105   .text:00000000000015a4 DOTST
             forth.s:2106   .text:00000000000015a4 $t
             forth.s:2107   .text:00000000000015a8 $d
             forth.s:2118   .text:00000000000015b4 DOTQP
             forth.s:2119   .text:00000000000015b4 $t
             forth.s:2120   .text:00000000000015b8 $d
             forth.s:2128   .text:00000000000015c8 _DOTR
             forth.s:2131   .text:00000000000015cc DOTR
             forth.s:2133   .text:00000000000015d0 $d
             forth.s:2146   .text:00000000000015f4 _UDOTR
             forth.s:2148   .text:00000000000015f8 $t
             forth.s:2149   .text:00000000000015f8 UDOTR
             forth.s:2151   .text:00000000000015fc $d
             forth.s:2166   .text:0000000000001628 _UDOT
             forth.s:2169   .text:000000000000162c UDOT
             forth.s:2171   .text:0000000000001630 $d
             forth.s:2182   .text:000000000000164c _DOT
             forth.s:2184   .text:000000000000164e $t
             forth.s:2185   .text:0000000000001650 DOT
             forth.s:2187   .text:0000000000001654 $d
             forth.s:2194   .text:0000000000001678 DOT1
             forth.s:2204   .text:000000000000168c _QUEST
             forth.s:2206   .text:000000000000168e $t
             forth.s:2207   .text:0000000000001690 QUEST
             forth.s:2209   .text:0000000000001694 $d
             forth.s:2223   .text:00000000000016a0 PARS
             forth.s:2224   .text:00000000000016a0 $t
             forth.s:2225   .text:00000000000016a4 $d
             forth.s:2291   .text:00000000000017b4 PARS8
             forth.s:2255   .text:0000000000001728 PARS3
             forth.s:2238   .text:00000000000016e0 PARS1
             forth.s:2253   .text:0000000000001724 PARS2
             forth.s:2259   .text:0000000000001734 PARS4
             forth.s:2271   .text:0000000000001764 PARS5
             forth.s:2278   .text:0000000000001788 PARS6
             forth.s:2284   .text:000000000000179c PARS7
             forth.s:2301   .text:00000000000017c8 _PARSE
             forth.s:2303   .text:00000000000017ce $t
             forth.s:2304   .text:00000000000017d0 PARSE
             forth.s:2306   .text:00000000000017d4 $d
ARM GAS  forth.s 			page 118


             forth.s:2326   .text:0000000000001814 _DOTPR
             forth.s:2329   .text:0000000000001818 DOTPR
             forth.s:2331   .text:000000000000181c $d
             forth.s:2340   .text:0000000000001834 _PAREN
             forth.s:2342   .text:0000000000001836 $t
             forth.s:2343   .text:0000000000001838 PAREN
             forth.s:2345   .text:000000000000183c $d
             forth.s:2354   .text:0000000000001854 _BKSLA
             forth.s:2356   .text:0000000000001856 $t
             forth.s:2357   .text:0000000000001858 BKSLA
             forth.s:2359   .text:000000000000185c $d
             forth.s:2369   .text:0000000000001874 _CHAR
             forth.s:2372   .text:000000000000187c CHAR
             forth.s:2374   .text:0000000000001880 $d
             forth.s:2384   .text:0000000000001898 _WORDD
             forth.s:2387   .text:00000000000018a0 WORDD
             forth.s:2389   .text:00000000000018a4 $d
             forth.s:2399   .text:00000000000018bc _TOKEN
             forth.s:2401   .text:00000000000018c2 $t
             forth.s:2402   .text:00000000000018c4 TOKEN
             forth.s:2404   .text:00000000000018c8 $d
             forth.s:2415   .text:00000000000018d8 _NAMET
             forth.s:2417   .text:00000000000018de $t
             forth.s:2418   .text:00000000000018e0 NAMET
             forth.s:2420   .text:00000000000018e4 $d
             forth.s:2436   .text:0000000000001904 _SAMEQ
             forth.s:2438   .text:000000000000190a $t
             forth.s:2439   .text:000000000000190c SAMEQ
             forth.s:2441   .text:0000000000001910 $d
             forth.s:2458   .text:0000000000001958 SAME2
             forth.s:2443   .text:000000000000191c SAME1
             forth.s:2473   .text:000000000000196c FIND
             forth.s:2474   .text:000000000000196c $t
             forth.s:2475   .text:0000000000001970 $d
             forth.s:2482   .text:000000000000198c FIND1
             forth.s:2502   .text:00000000000019e4 FIND6
             forth.s:2495   .text:00000000000019cc FIND2
             forth.s:2500   .text:00000000000019dc FIND3
             forth.s:2509   .text:00000000000019fc FIND4
             forth.s:2515   .text:0000000000001a18 FIND5
             forth.s:2530   .text:0000000000001a40 _NAMEQ
             forth.s:2532   .text:0000000000001a46 $t
             forth.s:2533   .text:0000000000001a48 NAMEQ
             forth.s:2535   .text:0000000000001a4c $d
             forth.s:2550   .text:0000000000001a5c BKSP
             forth.s:2551   .text:0000000000001a5c $t
             forth.s:2552   .text:0000000000001a60 $d
             forth.s:2566   .text:0000000000001aa4 BACK1
             forth.s:2576   .text:0000000000001aa8 TAP
             forth.s:2577   .text:0000000000001aa8 $t
             forth.s:2578   .text:0000000000001aac $d
             forth.s:2592   .text:0000000000001ac4 KTAP
             forth.s:2593   .text:0000000000001ac4 TTAP
             forth.s:2594   .text:0000000000001ac4 $t
             forth.s:2595   .text:0000000000001ac8 $d
             forth.s:2609   .text:0000000000001b08 KTAP2
             forth.s:2606   .text:0000000000001b00 KTAP1
ARM GAS  forth.s 			page 119


             forth.s:2620   .text:0000000000001b20 _ACCEP
             forth.s:2623   .text:0000000000001b28 ACCEP
             forth.s:2625   .text:0000000000001b2c $d
             forth.s:2628   .text:0000000000001b38 ACCP1
             forth.s:2644   .text:0000000000001b80 ACCP4
             forth.s:2640   .text:0000000000001b74 ACCP2
             forth.s:2642   .text:0000000000001b78 ACCP3
             forth.s:2654   .text:0000000000001b94 _QUERY
             forth.s:2656   .text:0000000000001b9a $t
             forth.s:2657   .text:0000000000001b9c QUERY
             forth.s:2659   .text:0000000000001ba0 $d
             forth.s:2677   .text:0000000000001bd4 _ABORT
             forth.s:2679   .text:0000000000001bda $t
             forth.s:2680   .text:0000000000001bdc ABORT
             forth.s:2682   .text:0000000000001be0 ABORT1
             forth.s:2683   .text:0000000000001be0 $d
             forth.s:2814   .text:0000000000001d64 PRESE
             forth.s:2827   .text:0000000000001d84 QUIT
             forth.s:2699   .text:0000000000001c08 ABORQ
             forth.s:2700   .text:0000000000001c08 $t
             forth.s:2701   .text:0000000000001c0c $d
             forth.s:2716   .text:0000000000001c30 _INTER
             forth.s:2718   .text:0000000000001c3c $t
             forth.s:2721   .text:0000000000001c40 $d
             forth.s:2730   .text:0000000000001c7c INTE1
             forth.s:2727   .text:0000000000001c72 $t
             forth.s:2728   .text:0000000000001c74 $d
             forth.s:2734   .text:0000000000001c8c INTE2
             forth.s:2741   .text:0000000000001c94 _LBRAC
             forth.s:2743   .text:0000000000001c96 $t
             forth.s:2744   .text:0000000000001c98 LBRAC
             forth.s:2746   .text:0000000000001c9c $d
             forth.s:2755   .text:0000000000001cb4 _DOTOK
             forth.s:2757   .text:0000000000001cb8 $t
             forth.s:2758   .text:0000000000001cb8 DOTOK
             forth.s:2760   .text:0000000000001cbc $d
             forth.s:2766   .text:0000000000001ce0 DOTO1
             forth.s:2767   .text:0000000000001ce0 $d
             forth.s:2774   .text:0000000000001cec _QSTAC
             forth.s:2777   .text:0000000000001cf4 QSTAC
             forth.s:2779   .text:0000000000001cf8 $d
             forth.s:2781   .text:0000000000001d0e $t
             forth.s:2782   .text:0000000000001d10 $d
             forth.s:2788   .text:0000000000001d18 _EVAL
             forth.s:2793   .text:0000000000001d24 EVAL1
             forth.s:2794   .text:0000000000001d24 $d
             forth.s:2802   .text:0000000000001d4c EVAL2
             forth.s:2811   .text:0000000000001d5c _PRESE
             forth.s:2816   .text:0000000000001d68 $d
             forth.s:2824   .text:0000000000001d7c _QUIT
             forth.s:2828   .text:0000000000001d84 $d
             forth.s:2830   .text:0000000000001d90 QUIT1
             forth.s:2832   .text:0000000000001d94 QUIT2
             forth.s:2838   .text:0000000000001da8 _FORGET
             forth.s:2841   .text:0000000000001db0 FORGET
             forth.s:2843   .text:0000000000001db4 $d
             forth.s:3292   .text:000000000000225c OVERT
ARM GAS  forth.s 			page 120


             forth.s:2868   .text:0000000000001dfc $d
             forth.s:2869   .text:0000000000001e00 _TICK
             forth.s:2871   .text:0000000000001e02 $t
             forth.s:2872   .text:0000000000001e04 TICK
             forth.s:2874   .text:0000000000001e08 $d
             forth.s:2878   .text:0000000000001e1c TICK1
             forth.s:2885   .text:0000000000001e24 _ALLOT
             forth.s:2887   .text:0000000000001e2a $t
             forth.s:2888   .text:0000000000001e2c ALLOT
             forth.s:2890   .text:0000000000001e30 $d
             forth.s:2898   .text:0000000000001e40 _COMMA
             forth.s:2899   .text:0000000000001e42 $t
             forth.s:2900   .text:0000000000001e44 COMMA
             forth.s:2902   .text:0000000000001e48 $d
             forth.s:2913   .text:0000000000001e64 $d
             forth.s:2914   .text:0000000000001e68 _BCOMP
             forth.s:2916   .text:0000000000001e72 $t
             forth.s:2917   .text:0000000000001e74 BCOMP
             forth.s:2919   .text:0000000000001e78 $d
             forth.s:2927   .text:0000000000001e88 _COMPI
             forth.s:2929   .text:0000000000001e90 $t
             forth.s:2930   .text:0000000000001e90 COMPI
             forth.s:2932   .text:0000000000001e94 $d
             forth.s:2946   .text:0000000000001ec0 _LITER
             forth.s:2948   .text:0000000000001ec8 $t
             forth.s:2949   .text:0000000000001ec8 LITER
             forth.s:2951   .text:0000000000001ecc $d
             forth.s:3336   .text:00000000000022b8 CALLC
             forth.s:2962   .text:0000000000001ee0 STRCQ
             forth.s:2963   .text:0000000000001ee0 $t
             forth.s:2964   .text:0000000000001ee4 $d
             forth.s:2983   .text:0000000000001f1c _FOR
             forth.s:2985   .text:0000000000001f20 $t
             forth.s:2986   .text:0000000000001f20 FOR
             forth.s:2988   .text:0000000000001f24 $d
             forth.s:2996   .text:0000000000001f3c _BEGIN
             forth.s:2998   .text:0000000000001f42 $t
             forth.s:2999   .text:0000000000001f44 BEGIN
             forth.s:3001   .text:0000000000001f48 $d
             forth.s:3007   .text:0000000000001f50 $d
             forth.s:3008   .text:0000000000001f54 _FNEXT
             forth.s:3011   .text:0000000000001f5c FNEXT
             forth.s:3013   .text:0000000000001f60 $d
             forth.s:3021   .text:0000000000001f78 _UNTIL
             forth.s:3023   .text:0000000000001f7e $t
             forth.s:3024   .text:0000000000001f80 UNTIL
             forth.s:3026   .text:0000000000001f84 $d
             forth.s:3034   .text:0000000000001f9c _AGAIN
             forth.s:3036   .text:0000000000001fa2 $t
             forth.s:3037   .text:0000000000001fa4 AGAIN
             forth.s:3039   .text:0000000000001fa8 $d
             forth.s:3047   .text:0000000000001fc0 _IFF
             forth.s:3050   .text:0000000000001fc4 IFF
             forth.s:3052   .text:0000000000001fc8 $d
             forth.s:3063   .text:0000000000001ff0 _AHEAD
             forth.s:3065   .text:0000000000001ff6 $t
             forth.s:3066   .text:0000000000001ff8 AHEAD
ARM GAS  forth.s 			page 121


             forth.s:3068   .text:0000000000001ffc $d
             forth.s:3079   .text:0000000000002024 _REPEA
             forth.s:3082   .text:000000000000202c REPEA
             forth.s:3084   .text:0000000000002030 $d
             forth.s:3094   .text:0000000000002048 _THENN
             forth.s:3097   .text:0000000000002050 THENN
             forth.s:3099   .text:0000000000002054 $d
             forth.s:3108   .text:0000000000002068 _AFT
             forth.s:3110   .text:000000000000206c $t
             forth.s:3111   .text:000000000000206c AFT
             forth.s:3113   .text:0000000000002070 $d
             forth.s:3123   .text:0000000000002088 _ELSEE
             forth.s:3126   .text:0000000000002090 ELSEE
             forth.s:3128   .text:0000000000002094 $d
             forth.s:3137   .text:00000000000020a8 _WHILE
             forth.s:3139   .text:00000000000020ae $t
             forth.s:3140   .text:00000000000020b0 WHILE
             forth.s:3142   .text:00000000000020b4 $d
             forth.s:3150   .text:00000000000020c4 _ABRTQ
             forth.s:3153   .text:00000000000020cc ABRTQ
             forth.s:3155   .text:00000000000020d0 $d
             forth.s:3163   .text:00000000000020e8 _STRQ
             forth.s:3166   .text:00000000000020ec STRQ
             forth.s:3168   .text:00000000000020f0 $d
             forth.s:3176   .text:0000000000002108 _DOTQ
             forth.s:3179   .text:000000000000210c DOTQ
             forth.s:3181   .text:0000000000002110 $d
             forth.s:3192   .text:0000000000002128 _UNIQU
             forth.s:3194   .text:0000000000002130 $t
             forth.s:3195   .text:0000000000002130 UNIQU
             forth.s:3197   .text:0000000000002134 $d
             forth.s:3204   .text:000000000000215c UNIQ1
             forth.s:3201   .text:0000000000002150 $d
             forth.s:3215   .text:0000000000002164 SNAME
             forth.s:3216   .text:0000000000002164 $t
             forth.s:3217   .text:0000000000002168 $d
             forth.s:3233   .text:00000000000021ac SNAM1
             forth.s:3243   .text:00000000000021c0 _SCOMP
             forth.s:3246   .text:00000000000021cc SCOMP
             forth.s:3248   .text:00000000000021d0 $d
             forth.s:3260   .text:0000000000002208 SCOM2
             forth.s:3257   .text:0000000000002200 SCOM1
             forth.s:3265   .text:000000000000221c SCOM3
             forth.s:3272   .text:0000000000002224 COLON_ABORT
             forth.s:3273   .text:0000000000002224 $t
             forth.s:3274   .text:0000000000002228 $d
             forth.s:3289   .text:0000000000002254 _OVERT
             forth.s:3291   .text:000000000000225a $t
             forth.s:3294   .text:0000000000002260 $d
             forth.s:3304   .text:0000000000002278 _SEMIS
             forth.s:3306   .text:000000000000227a $t
             forth.s:3307   .text:000000000000227c SEMIS
             forth.s:3309   .text:0000000000002280 $d
             forth.s:3319   .text:000000000000229c _RBRAC
             forth.s:3321   .text:000000000000229e $t
             forth.s:3322   .text:00000000000022a0 RBRAC
             forth.s:3324   .text:00000000000022a4 $d
ARM GAS  forth.s 			page 122


             forth.s:3337   .text:00000000000022b8 $t
             forth.s:3338   .text:00000000000022bc $d
             forth.s:3348   .text:00000000000022d4 _COLON
             forth.s:3350   .text:00000000000022d6 $t
             forth.s:3351   .text:00000000000022d8 COLON
             forth.s:3353   .text:00000000000022dc $d
             forth.s:3363   .text:00000000000022f4 _IMMED
             forth.s:3365   .text:00000000000022fe $t
             forth.s:3366   .text:0000000000002300 IMMED
             forth.s:3368   .text:0000000000002304 $d
             forth.s:3385   .text:0000000000002330 _CONST
             forth.s:3388   .text:000000000000233c CONST
             forth.s:3390   .text:0000000000002340 $d
             forth.s:3401   .text:0000000000002370 $t
             forth.s:3405   .text:0000000000002370 DODOES
             forth.s:3407   .text:0000000000002374 $d
             forth.s:3420   .text:0000000000002398 $d
             forth.s:3421   .text:000000000000239c _DOES
             forth.s:3423   .text:00000000000023a2 $t
             forth.s:3424   .text:00000000000023a4 DOES
             forth.s:3426   .text:00000000000023a8 $d
             forth.s:3440   .text:00000000000023d8 _DEFERAT
             forth.s:3443   .text:00000000000023e0 DEFERAT
             forth.s:3445   .text:00000000000023e4 $d
             forth.s:3454   .text:00000000000023fc _DEFERSTO
             forth.s:3457   .text:0000000000002404 DEFERSTO
             forth.s:3459   .text:0000000000002408 $d
             forth.s:3469   .text:0000000000002424 _DEFER
             forth.s:3471   .text:000000000000242a $t
             forth.s:3472   .text:000000000000242c DEFER
             forth.s:3474   .text:0000000000002430 $d
             forth.s:3497   .text:000000000000247c CREAT
             forth.s:3485   .text:0000000000002464 DEFER_NOP
             forth.s:3486   .text:0000000000002464 $t
             forth.s:3487   .text:0000000000002468 $d
             forth.s:3494   .text:0000000000002474 _CREAT
             forth.s:3499   .text:0000000000002480 $d
             forth.s:3511   .text:00000000000024a4 _VARIA
             forth.s:3514   .text:00000000000024b0 VARIA
             forth.s:3516   .text:00000000000024b4 $d
             forth.s:3529   .text:00000000000024d8 _TRACE
             forth.s:3531   .text:00000000000024de $t
             forth.s:3532   .text:00000000000024e0 TRACE
             forth.s:3534   .text:00000000000024e4 $d
             forth.s:3541   .text:00000000000024f4 _DBG_PRT
             forth.s:3543   .text:00000000000024fc DBG_PRT
             forth.s:3544   .text:00000000000024fc $t
             forth.s:3545   .text:0000000000002500 $d
             forth.s:3646   .text:000000000000262c TNAME
             forth.s:3561   .text:0000000000002520 DMP
             forth.s:3562   .text:0000000000002520 $t
             forth.s:3563   .text:0000000000002524 $d
             forth.s:3575   .text:000000000000255c PDUM2
             forth.s:3569   .text:0000000000002544 PDUM1
             forth.s:3583   .text:0000000000002568 $d
             forth.s:3584   .text:000000000000256c _DUMP
             forth.s:3587   .text:0000000000002574 DUMP
ARM GAS  forth.s 			page 123


             forth.s:3589   .text:0000000000002578 $d
             forth.s:3607   .text:00000000000025c8 DUMP4
             forth.s:3597   .text:00000000000025a0 DUMP1
             forth.s:3609   .text:00000000000025d0 DUMP3
             forth.s:3620   .text:00000000000025e8 _DOTS
             forth.s:3624   .text:00000000000025ec DOTS
             forth.s:3626   .text:00000000000025f0 $d
             forth.s:3634   .text:0000000000002610 DOTS2
             forth.s:3630   .text:0000000000002604 DOTS1
             forth.s:3643   .text:0000000000002624 _TNAME
             forth.s:3645   .text:000000000000262a $t
             forth.s:3648   .text:0000000000002630 $d
             forth.s:3651   .text:000000000000263c TNAM1
             forth.s:3662   .text:0000000000002670 TNAM2
             forth.s:3671   .text:0000000000002680 _DOTID
             forth.s:3673   .text:0000000000002684 $t
             forth.s:3674   .text:0000000000002684 DOTID
             forth.s:3676   .text:0000000000002688 $d
             forth.s:3683   .text:00000000000026ac DOTI1
             forth.s:3684   .text:00000000000026ba $t
             forth.s:3685   .text:00000000000026bc $d
             forth.s:3687   *ABS*:0000000000000000 WANT_SEE
             forth.s:3767   .text:00000000000026c4 _WORDS
             forth.s:3769   .text:00000000000026ca $t
             forth.s:3770   .text:00000000000026cc WORDS
             forth.s:3772   .text:00000000000026d0 $d
             forth.s:3775   .text:00000000000026dc WORS1
             forth.s:3784   .text:0000000000002704 WORS2
             forth.s:3797   .text:0000000000002708 VERSN
             forth.s:3798   .text:0000000000002708 $t
             forth.s:3799   .text:000000000000270c $d
             forth.s:3806   .text:000000000000271c _HI
             forth.s:3812   .text:0000000000002724 $d
             forth.s:3813   .text:000000000000273e $t
             forth.s:3814   .text:0000000000002740 $d
             forth.s:3843   .text:00000000000027a4 COLD1
             forth.s:3844   .text:00000000000027a4 $d
             forth.s:3855   .text:00000000000027e4 COLD2
             forth.s:3858   .text:00000000000027e4 $d
             forth.s:3861   .text:00000000000027e8 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             forth.s:123    .text:0000000000000625 $d
             forth.s:123    .text:0000000000000626 $t
             forth.s:174    .text:00000000000006d5 $d
             forth.s:174    .text:00000000000006d6 $t
             forth.s:194    .text:0000000000000701 $d
             forth.s:194    .text:0000000000000702 $t
             forth.s:218    .text:0000000000000737 $d
             forth.s:218    .text:0000000000000738 $t
             forth.s:327    .text:00000000000007c1 $d
             forth.s:327    .text:00000000000007c2 $t
             forth.s:361    .text:00000000000007ef $d
             forth.s:361    .text:00000000000007f0 $t
             forth.s:374    .text:0000000000000803 $d
             forth.s:374    .text:0000000000000804 $t
             forth.s:385    .text:000000000000080f $d
ARM GAS  forth.s 			page 124


             forth.s:385    .text:0000000000000810 $t
             forth.s:397    .text:0000000000000821 $d
             forth.s:397    .text:0000000000000822 $t
             forth.s:409    .text:0000000000000835 $d
             forth.s:409    .text:0000000000000836 $t
             forth.s:456    .text:000000000000087d $d
             forth.s:456    .text:000000000000087e $t
             forth.s:478    .text:000000000000089f $d
             forth.s:478    .text:00000000000008a0 $t
             forth.s:491    .text:00000000000008b1 $d
             forth.s:491    .text:00000000000008b2 $t
             forth.s:503    .text:00000000000008c3 $d
             forth.s:503    .text:00000000000008c4 $t
             forth.s:528    .text:00000000000008e5 $d
             forth.s:528    .text:00000000000008e6 $t
             forth.s:567    .text:000000000000092b $d
             forth.s:567    .text:000000000000092c $t
             forth.s:579    .text:0000000000000941 $d
             forth.s:579    .text:0000000000000942 $t
             forth.s:641    .text:000000000000099b $d
             forth.s:641    .text:000000000000099c $t
             forth.s:655    .text:00000000000009af $d
             forth.s:655    .text:00000000000009b0 $t
             forth.s:666    .text:00000000000009bd $d
             forth.s:666    .text:00000000000009be $t
             forth.s:677    .text:00000000000009cd $d
             forth.s:677    .text:00000000000009ce $t
             forth.s:688    .text:00000000000009dd $d
             forth.s:688    .text:00000000000009de $t
             forth.s:721    .text:0000000000000a0d $d
             forth.s:721    .text:0000000000000a0e $t
             forth.s:755    .text:0000000000000a41 $d
             forth.s:755    .text:0000000000000a42 $t
             forth.s:766    .text:0000000000000a51 $d
             forth.s:766    .text:0000000000000a52 $t
             forth.s:777    .text:0000000000000a63 $d
             forth.s:777    .text:0000000000000a64 $t
             forth.s:816    .text:0000000000000a9f $d
             forth.s:816    .text:0000000000000aa0 $t
             forth.s:829    .text:0000000000000ab3 $d
             forth.s:829    .text:0000000000000ab4 $t
             forth.s:856    .text:0000000000000ae1 $d
             forth.s:856    .text:0000000000000ae2 $t
             forth.s:880    .text:0000000000000b05 $d
             forth.s:880    .text:0000000000000b06 $t
             forth.s:909    .text:0000000000000b33 $d
             forth.s:909    .text:0000000000000b34 $t
             forth.s:982    .text:0000000000000ba3 $d
             forth.s:982    .text:0000000000000ba4 $t
             forth.s:997    .text:0000000000000bbb $d
             forth.s:997    .text:0000000000000bbc $t
             forth.s:1012   .text:0000000000000bd7 $d
             forth.s:1012   .text:0000000000000bd8 $t
             forth.s:1085   .text:0000000000000c33 $d
             forth.s:1085   .text:0000000000000c34 $t
             forth.s:1096   .text:0000000000000c47 $d
             forth.s:1096   .text:0000000000000c48 $t
ARM GAS  forth.s 			page 125


             forth.s:1131   .text:0000000000000c83 $d
             forth.s:1131   .text:0000000000000c84 $t
             forth.s:1155   .text:0000000000000ca1 $d
             forth.s:1155   .text:0000000000000ca2 $t
             forth.s:1179   .text:0000000000000ccb $d
             forth.s:1179   .text:0000000000000ccc $t
             forth.s:1228   .text:0000000000000d1d $d
             forth.s:1228   .text:0000000000000d1e $t
             forth.s:1251   .text:0000000000000d47 $d
             forth.s:1251   .text:0000000000000d48 $t
             forth.s:1262   .text:0000000000000d5d $d
             forth.s:1262   .text:0000000000000d5e $t
             forth.s:1277   .text:0000000000000d79 $d
             forth.s:1277   .text:0000000000000d7a $t
             forth.s:1290   .text:0000000000000d95 $d
             forth.s:1290   .text:0000000000000d96 $t
             forth.s:1309   .text:0000000000000daf $d
             forth.s:1309   .text:0000000000000db0 $t
             forth.s:1328   .text:0000000000000ddb $d
             forth.s:1328   .text:0000000000000ddc $t
             forth.s:1395   .text:0000000000000e8d $d
             forth.s:1395   .text:0000000000000e8e $t
             forth.s:1452   .text:0000000000000f07 $d
             forth.s:1452   .text:0000000000000f08 $t
             forth.s:1518   .text:0000000000000fb1 $d
             forth.s:1518   .text:0000000000000fb2 $t
             forth.s:1537   .text:0000000000000fd9 $d
             forth.s:1537   .text:0000000000000fda $t
             forth.s:1576   .text:000000000000102b $d
             forth.s:1576   .text:000000000000102c $t
             forth.s:1615   .text:0000000000001079 $d
             forth.s:1615   .text:000000000000107a $t
             forth.s:1639   .text:00000000000010ad $d
             forth.s:1639   .text:00000000000010ae $t
             forth.s:1662   .text:00000000000010dd $d
             forth.s:1662   .text:00000000000010de $t
             forth.s:1729   .text:00000000000011ab $d
             forth.s:1729   .text:00000000000011ac $t
             forth.s:1743   .text:00000000000011c9 $d
             forth.s:1743   .text:00000000000011ca $t
             forth.s:1776   .text:0000000000001217 $d
             forth.s:1776   .text:0000000000001218 $t
             forth.s:1793   .text:0000000000001241 $d
             forth.s:1793   .text:0000000000001242 $t
             forth.s:1809   .text:000000000000126b $d
             forth.s:1809   .text:000000000000126c $t
             forth.s:1876   .text:0000000000001303 $d
             forth.s:1876   .text:0000000000001304 $t
             forth.s:2015   .text:00000000000014df $d
             forth.s:2015   .text:00000000000014e0 $t
             forth.s:2034   .text:0000000000001515 $d
             forth.s:2034   .text:0000000000001516 $t
             forth.s:2054   .text:000000000000154b $d
             forth.s:2054   .text:000000000000154c $t
             forth.s:2130   .text:00000000000015cb $d
             forth.s:2130   .text:00000000000015cc $t
             forth.s:2168   .text:000000000000162b $d
ARM GAS  forth.s 			page 126


             forth.s:2168   .text:000000000000162c $t
             forth.s:2328   .text:0000000000001817 $d
             forth.s:2328   .text:0000000000001818 $t
             forth.s:2371   .text:0000000000001879 $d
             forth.s:2371   .text:000000000000187a $t
             forth.s:2386   .text:000000000000189d $d
             forth.s:2386   .text:000000000000189e $t
             forth.s:2622   .text:0000000000001b27 $d
             forth.s:2622   .text:0000000000001b28 $t
             forth.s:2776   .text:0000000000001cf3 $d
             forth.s:2776   .text:0000000000001cf4 $t
             forth.s:2790   .text:0000000000001d1d $d
             forth.s:2790   .text:0000000000001d1e $t
             forth.s:2813   .text:0000000000001d63 $d
             forth.s:2813   .text:0000000000001d64 $t
             forth.s:2826   .text:0000000000001d81 $d
             forth.s:2826   .text:0000000000001d82 $t
             forth.s:2840   .text:0000000000001daf $d
             forth.s:2840   .text:0000000000001db0 $t
             forth.s:3010   .text:0000000000001f59 $d
             forth.s:3010   .text:0000000000001f5a $t
             forth.s:3049   .text:0000000000001fc3 $d
             forth.s:3049   .text:0000000000001fc4 $t
             forth.s:3081   .text:000000000000202b $d
             forth.s:3081   .text:000000000000202c $t
             forth.s:3096   .text:000000000000204d $d
             forth.s:3096   .text:000000000000204e $t
             forth.s:3125   .text:000000000000208d $d
             forth.s:3125   .text:000000000000208e $t
             forth.s:3152   .text:00000000000020cb $d
             forth.s:3152   .text:00000000000020cc $t
             forth.s:3165   .text:00000000000020eb $d
             forth.s:3165   .text:00000000000020ec $t
             forth.s:3178   .text:000000000000210b $d
             forth.s:3178   .text:000000000000210c $t
             forth.s:3245   .text:00000000000021c9 $d
             forth.s:3245   .text:00000000000021ca $t
             forth.s:3387   .text:0000000000002339 $d
             forth.s:3387   .text:000000000000233a $t
             forth.s:3442   .text:00000000000023df $d
             forth.s:3442   .text:00000000000023e0 $t
             forth.s:3456   .text:0000000000002403 $d
             forth.s:3456   .text:0000000000002404 $t
             forth.s:3496   .text:000000000000247b $d
             forth.s:3496   .text:000000000000247c $t
             forth.s:3513   .text:00000000000024ad $d
             forth.s:3513   .text:00000000000024ae $t
             forth.s:3586   .text:0000000000002571 $d
             forth.s:3586   .text:0000000000002572 $t
             forth.s:3623   .text:00000000000025eb $d
             forth.s:3623   .text:00000000000025ec $t
             forth.s:3808   .text:000000000000271f $d
             forth.s:3808   .text:0000000000002720 $t
             forth.s:3837   .text:000000000000278d $d
             forth.s:3837   .text:000000000000278e $t

UNDEFINED SYMBOLS
ARM GAS  forth.s 			page 127


_mstack
