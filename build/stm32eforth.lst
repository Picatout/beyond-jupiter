ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0xE000E400 
 203              	
 204              	/*  IRQ number */
 205              	   .equ NMI_IRQ, (-14) // non maskable
 206              	   .equ HF_IRQ, (-13)  // hard fault
 207              	   .equ MM_IRQ, (-12)  // memory Management
 208              	   .equ BF_IRQ, (-11)  // bus fault 
 209              	   .equ UF_IRQ, (-10)  // usage fault 
 210              	   .equ SVC_IRQ, (-5)  // service call 
 211              	   .equ DM_IRQ, (-4)  // debug monitor
 212              	   .equ PSV_IRQ, (-2) // pending service 
 213              	   .equ STCK_IRQ, (-1) // systick 
 214              	   .equ WWDG_IRQ, (0) // window watchdog 
 215              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 216              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 217              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 218              	   .equ FLASH_IRQ, (4) // flash global 
 219              	   .equ RCC_IRQ, (5)  // real time clock 
 220              	   .equ EXTI0_IRQ, (6) // 
 221              	   .equ EXTI1_IRQ, (7)
 222              	   .equ EXTI2_IRQ, (8)
 223              	   .equ EXTI3_IRQ, (9)
 224              	   .equ EXTI4_IRQ, (10)
 225              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 226              	   .equ DMA1S1_IRQ, (12)
 227              	   .equ DMA1S2_IRQ, (13)
 228              	   .equ DMA1S3_IRQ, (14)
 229              	   .equ DMA1S4_IRQ, (15)
 230              	   .equ DMA1S5_IRQ, (16)
 231              	   .equ DMA1S6_IRQ, (17)
 232              	   .equ ADC_IRQ, (18)
 233              	   .equ EXIT9_5_IRQ, (23)
 234              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 235              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 236              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 237              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 238              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 239              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 240              	   .equ TIM4_IRQ, (30) // TIMER4 global
 241              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 242              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 243              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 244              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 245              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 246              	   .equ SPI2_IRQ, (36)  // SPI2 global
 247              	   .equ USART1_IRQ, (37) // USART1 global
 248              	   .equ USART2_IRQ, (38) // USART2 global
 249              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 250              	   .equ EXTI17_IRQ, (41)
 251              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 252              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 253              	   .equ SDIO_IRQ, (49) // SDIO global
 254              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 255              	   .equ SPI3_IRQ, (51)
ARM GAS  forth.s 			page 6


 256              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 257              	   .equ DMA2S1_IRQ, (57) 
 258              	   .equ DMAS2_IRQ, (58)
 259              	   .equ DMAS3_IRQ, (59)
 260              	   .equ DMAS4_IRQ, (60)
 261              	   .equ OTG_FS_IRQ, (67)
 262              	   .equ DMA2S5_IRQ, (68)
 263              	   .equ DMA2S6_IRQ, (69)
 264              	   .equ DMA2S7_IRQ, (70)
 265              	   .equ USART6_IRQ, (71)
 266              	   .equ I2C3EV_IRQ, (72)
 267              	   .equ I2C3ER_IRQ, (73)
 268              	   .equ FPU_IRQ, (81) // FPU global
 269              	   .equ SPI4_IRQ, (84)
 270              	   .equ SPI5_IRQ, (85)
 271              	   
 272              	
 273              	/* TIMERS registers */
 274              	.equ TIM1_BASE_ADR,0x40010000
 275              	.equ TIM9_BASE_ADR,0x40010400
 276              	.equ TIM10_BASE_ADR,0x40010800
 277              	.equ TIM11_BASE_ADR,0x40010C00
 278              	
 279              	.equ TIM2_BASE_ADR,0x40000000
 280              	.equ TIM3_BASE_ADR,0x40000400
 281              	.equ TIM4_BASE_ADR,0x40000800
 282              	.equ TIM5_BASE_ADR,0x40000C00
 283              	
 284              	/* TIMER1 */
 285              	.equ TIM1_RCR,48 
 286              	.equ TIM1_BDTR,68 
 287              	
 288              	/* TIMER2..TIMER5 */
 289              	.equ TIM_CR1,0
 290              	.equ TIM_CR2,4
 291              	.equ TIM_SMCR,8
 292              	.equ TIM_DIER,12
 293              	.equ TIM_SR,16
 294              	.equ TIM_EGR,20
 295              	.equ TIM_CCMR1,24
 296              	.equ TIM_CCMR2,28
 297              	.equ TIM_CCER,32
 298              	.equ TIM_CNT,36
 299              	.equ TIM_PSC,40
 300              	.equ TIM_ARR,44
 301              	.equ TIM_CCR1,52
 302              	.equ TIM_CCR2,56
 303              	.equ TIM_CCR3,60
 304              	.equ TIM_CCR4,64
 305              	.equ TIM_DCR,72
 306              	.equ TIM_DMAR,76
 307              	.equ TIM2_OR,80
 308              	.equ TIM5_OR,80 
 309              	
 310              	/* SYSCFG registers */
 311              	.equ SYSCFG_BASE_ADR, 0x40013800
 312              	
ARM GAS  forth.s 			page 7


 313              	.equ SYSCFG_MEMRMP,0
 314              	.equ SYSCFG_PMC,4
 315              	.equ SYSCFG_EXTICR1,8
 316              	.equ SYSCFG_EXTICR2,12
 317              	.equ SYSCFG_EXTICR3,16
 318              	.equ SYSCFG_EXTICR4,20
 319              	.equ SYSCFG_CMPCR,32
 320              	
 321              	/* EXTI registers */
 322              	.equ EXTI_BASE_ADR, 0x40013C00
 323              	
 324              	.equ EXTI_IMR,0
 325              	.equ EXTI_EMR,4
 326              	.equ EXTI_RTSR,8
 327              	.equ EXTI_FTSR,12
 328              	.equ EXTI_SWIER,16
 329              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
ARM GAS  forth.s 			page 8


  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ NBASE, BOOT+4  // numeric conversion base 
  78              	  .equ TMP, NBASE+4   // temporary variable
  79              	  .equ CSPAN, TMP+4  // character count received by expect  
  80              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  81              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  82              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  83              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  84              	  .equ HOLD, EVAL+4   // hold pointer 
  85              	  .equ CTXT, HOLD+4  // context pointer 
  86              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  87              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  88              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  89              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  90              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  91              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  92              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  93              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  94              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  95              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  96              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
ARM GAS  forth.s 			page 9


  97              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  98              	  .equ KBD_QUEUE_SIZE, 16 
  99              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 100              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 101              	  .equ KBD_QTAIL,KBD_QHEAD+4
 102              	  .equ ROW,KBD_QTAIL+4 
 103              	  .equ COL,ROW+4 
 104              	  .equ BK_COLOR,COL+4 
 105              	  .equ PEN_COLOR,BK_COLOR+4
 106              	
 107              	/***********************************************
 108              	* MACROS
 109              	*	Assemble inline direct threaded code ending.
 110              	***********************************************/
 111              		.macro _CALL fn /* low level routine call */ 
 112              	 	PUSH {LR}
 113              		BL \fn  
 114              		POP {LR}
 115              		.endm
 116              		
 117              		.macro _RET /* exit sub-routine */ 
 118              		BX LR 
 119              		.endm 
 120              	
 121              		/* dictionary header  */
 122              		.macro _HEADER  label, nlen, name
 123              			.word LINK 
 124              			.equ LINK , . 
 125              		_\label: .byte \nlen    // name field
 126              			.ascii "\name"
 127              			.p2align 2 
 128              		\label:   // code field 
 129              		.endm 
 130              		
 131              	
 132              	// local function header 
 133              		.macro _FUNC label 
 134              		.section .text, "ax", %progbits 
 135              		.p2align 2 
 136              		.type \label, %function  
 137              		\label:
 138              		.endm 
 139              	
 140              	// global function header 
 141              		.macro _GBL_FUNC label 
 142              		.global \label 
 143              		_FUNC \label 
 144              		.endm 
 145              	
 146              	
 147              	// load large constant to register 
 148              		.macro _MOV32 r, value 
 149              		mov \r,#(\value&0xffff)
 150              		movt \r,#(\value>>16)
 151              		.endm 
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
ARM GAS  forth.s 			page 10


 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX INX  
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push TOS on data stack*/
 210              		STR	TOS,[DSP,#-4]!
ARM GAS  forth.s 			page 11


 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to TOS */
 214              		LDR	TOS,[DSP],#4
 215              		.endm
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 12


  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 13


 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .text, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F049F8 		bl uart_puts 
 160 0006 31E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#CD_TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#CD_TIMER]
 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
ARM GAS  forth.s 			page 14


 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 4FF48053 		_MOV32 r3,UART 
 192      C4F20103 
 193 0044 1868     		ldr r0,[r3,#USART_SR]
 194 0046 5968     		ldr r1,[r3,#USART_DR]
 195 0048 10F0200F 		tst r0,#(1<<5) // RXNE 
 196 004c 0AD0     		beq 2f // no char received 
 197 004e 0329     		cmp r1,#3
 198 0050 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 199 0052 04F14400 		add r0,UP,#RX_QUEUE
 200 0056 A26D     		ldr r2,[UP,#RX_TAIL]
 201 0058 8154     		strb r1,[r0,r2]
 202 005a 02F10102 		add r2,#1 
 203 005e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
 204 0062 A265     		str r2,[UP,#RX_TAIL]
 205              	2:	
 206 0064 7047     		bx lr 
 207              	
 208              	user_reboot:
 209 0066 074D     		ldr r5,user_reboot_msg
 210 0068 00F016F8 		bl uart_puts 
 211              	reset_mcu:
 212 006c 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 212      CEF20000 
 213 0074 C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0076 41F00401 		orr r1,#(1<<2)
 215 007a C0F2FA51 		movt r1,#SCB_VECTKEY
 216 007e C160     		str r1,[r0,#SCB_AIRCR]
 217 0080 FEE7     		b . 
 218 0082 00BF     		.p2align 2 
 219              	user_reboot_msg:
 220 0084 88000000 		.word .+4
 221 0088 0D       		.byte 13 
 222 0089 0D757365 		.ascii "\ruser reboot!"
 222      72207265 
 222      626F6F74 
 222      21
 223 0096 00BF     		.p2align 2 
 224              	
 225              	   
 226              	// send counted string to uart 
 227              	// input: r5 string* 
 228              		.type uart_puts,%function 
 229              	uart_puts:
 230 0098 4FF48050 		_MOV32 r0,UART 
 230      C4F20100 
 231 00a0 15F8011B 		ldrb r1,[r5],#1 // string length
 232 00a4 0940     		ands r1,r1
 233 00a6 0CD0     	1:	beq 9f 
 234 00a8 0268     	2:  ldr r2,[r0,#USART_SR]
 235 00aa 12F08002 		ands r2,#0x80 
 236 00ae FBD0     		beq 2b 	
 237 00b0 15F8012B 		ldrb r2,[r5],#1
 238 00b4 0271     		strb r2,[r0,#USART_DR]
 239 00b6 0139     		subs r1,r1,#1 
ARM GAS  forth.s 			page 15


 240 00b8 F6D1     		bne 2b 
 241 00ba 0268     	3:	ldr r2,[r0,#USART_SR]
 242 00bc 12F04002 		ands r2,#(1<<6)
 243 00c0 FBD0     		beq 3b 
 244 00c2 7047     	9:  bx lr 
 245              	
 246              	
 247              	/**************************************
 248              	  reset_handler execute at MCU reset
 249              	***************************************/
 250              	  .type  reset_handler, %function
 251              	  .p2align 2 
 252              	  .global reset_handler
 253              	reset_handler:
 254 00c4 4FF00000 		_MOV32 r0,RAM_END
 254      C2F20200 
 255 00cc 8546     		mov sp,r0  
 256 00ce FFF7FEFF 		bl	remap 
 257 00d2 00F01FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 258 00d6 00F088F8 		bl  uart_init
 259 00da FFF7FEFF 		bl	tv_init
 260 00de FFF7FEFF 	  bl  kbd_init  
 261 00e2 00F003F8 		bl forth_init 
 262 00e6 02F071BF 		b COLD 
 263              	
 264              	
 265              	
 266              		.type forth_init, %function 
 267 00ea 00BF     	  .p2align 2 
 268              	forth_init:
 269 00ec 4FF00004 		_MOV32 UP,UPP 
 269      C2F20004 
 270 00f4 4FF47F47 		_MOV32 DSP,SPP
 270      C2F20107 
 271 00fc 4FF68078 		_MOV32 RSP,RPP
 271      C2F20108 
 272 0104 DFF8A4A2 	  ldr INX,=NEST
 273 0108 4AF0010A 	  orr INX,#1 
 274 010c 86EA0606 		EOR TOS,TOS  
 275 0110 7047     		_RET 
 276              	
 277              	
 278              	
 279              	  .type init_devices, %function
 280 0112 00BF     	  .p2align 2 
 281              	init_devices:
 282              	/* init clock to HSE 96 Mhz */
 283              	/* set 3 wait states in FLASH_ACR_LATENCY */
 284 0114 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 284      C4F20200 
 285 011c 4FF00301 	  mov r1,#3 
 286 0120 0160     	  str r1,[r0,#FLASH_ACR]
 287              	/* configure clock for HSE, 25 Mhz crystal */
 288              	/* enable HSE in RCC_CR */
 289 0122 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 289      C4F20200 
 290 012a 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  forth.s 			page 16


 291 012c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 292 0130 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 293              	/* wait HSERDY loop */
 294              	wait_hserdy:
 295 0132 0168     	  ldr r1,[r0,#RCC_CR]
 296 0134 11F4003F 	  tst r1,#(1<<17)
 297 0138 FBD0     	  beq wait_hserdy
 298              	
 299              	/************************************************* 
 300              	   configure PLL  and source 
 301              	   SYSCLOCK=96 Mhz
 302              	   select HSE as  PLL source clock
 303              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 304              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 305              	****************************************************/
 306              	  /* set RCC_PLLCFGR */
 307 013a 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 307      C4F20200 
 308 0142 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 308      C0F24041 
 309 014a 4160     	  str r1,[r0,#RCC_PLLCFGR]
 310              	  /* enable PLL */
 311 014c 0168     	  ldr r1,[r0,#RCC_CR]
 312 014e 41F08071 	  orr r1, #(1<<24)
 313 0152 0160     	  str r1,[r0,#RCC_CR]
 314              	/* wait for PLLRDY */
 315              	wait_pllrdy:
 316 0154 0168     	  ldr r1,[r0,#RCC_CR]
 317 0156 11F0007F 	  tst r1,#(1<<25)
 318 015a FBD1     	  bne wait_pllrdy 
 319              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 320 015c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 320      C0F21901 
 321 0164 8160     	  str r1,[r0,#RCC_CFGR]
 322              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 323 0166 8168     	  ldr r1,[r0,#RCC_CFGR]
 324 0168 41F00201 	  orr r1,#2
 325 016c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 326              	/* wait for SWS==2 */
 327              	wait_sws:
 328 016e 8168     	  ldr r1,[r0,#RCC_CFGR]
 329 0170 11F0080F 	  tst r1,#(2<<2)
 330 0174 FBD0     	  beq wait_sws
 331              	/* now sysclock is 96 Mhz */
 332              	
 333              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 334 0176 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 335 017a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 336 017c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 337 0180 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 338              	/* configure GPIOC:13 as output for user LED */
 339 0182 4FF40060 	  _MOV32 r0,LED_GPIO 
 339      C4F20200 
 340 018a 0168     	  ldr r1,[r0,#GPIO_MODER]
 341 018c 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 342 0190 01EA0201 	  and r1,r1,r2
 343 0194 41F08061 	  orr r1,#(1<<(2*LED_PIN))
ARM GAS  forth.s 			page 17


 344 0198 0160     	  str r1,[r0,#GPIO_MODER]
 345 019a 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 346 019c 41F40051 	  orr r1,#(1<<LED_PIN)
 347 01a0 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 348 01a2 81EA0101 	  eor r1,r1 
 349 01a6 8182     	  strh r1,[r0,#GPIO_ODR]	
 350              	/* enable compensation CELL for fast I/O */
 351 01a8 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 351      C4F20101 
 352 01b0 4FF00100 		mov r0,#1 
 353 01b4 0862     		str r0,[R1,#SYSCFG_CMPCR]
 354              	/* wait for ready bit */ 
 355 01b6 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 356 01b8 10F4807F 	    tst r0,#(1<<8)
 357 01bc FBD0     		beq 1b 	
 358              	
 359              	
 360              	/* configure systicks for 1msec ticks */
 361              	// set priority to 15 (lowest)
 362 01be 4FF0FF30 	  mov r0,#STCK_IRQ
 363 01c2 4FF00F01 	  mov r1,#15 
 364 01c6 00B500F0 	  _CALL nvic_set_priority
 364      5BF85DF8 
 364      04EB
 365 01d0 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 365      CEF20000 
 366 01d8 47F2FF61 	  _MOV32 r1,95999 
 366      C0F20101 
 367 01e0 4160     	  str r1,[r0,#STK_LOAD]
 368 01e2 4FF00701 	  mov r1,#7
 369 01e6 0160     	  str r1,[r0,STK_CTL]
 370 01e8 7047     	  _RET  
 371              	
 372              	/*******************************
 373              	  initialize UART peripheral 
 374              	********************************/
 375              		.type uart_init, %function
 376              	uart_init:
 377              	/* set GPIOA PIN 9, uart TX  */
 378 01ea 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 378      C4F20200 
 379 01f2 0168     	  ldr r1,[r0,#GPIO_MODER]
 380 01f4 6FF47012 	  mvn r2,#0xf<<(2*9)
 381 01f8 01EA0201 	  and r1,r1,r2
 382 01fc 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 383 0200 41EA0201 	  orr r1,r1,r2 
 384 0204 0160     	  str r1,[r0,#GPIO_MODER]
 385              	/* select alternate functions USART1==AF07 */ 
 386 0206 4FF4EE61 	  mov r1,#0x77<<4 
 387 020a 4162     	  str r1,[r0,#GPIO_AFRH]
 388              	/* configure USART1 registers */
 389 020c 4FF48050 	  _MOV32 r0,UART 
 389      C4F20100 
 390              	/* BAUD rate */
 391 0214 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 392 0218 8160     	  str r1,[r0,#USART_BRR]
 393 021a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
ARM GAS  forth.s 			page 18


 394 021e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 395              	/* set interrupt priority */
 396 0220 4FF02500 	  mov r0,#USART1_IRQ 
 397 0224 4FF00101 	  mov r1,#1 
 398 0228 00B500F0 	  _CALL nvic_set_priority
 398      2AF85DF8 
 398      04EB
 399              	/* enable interrupt in NVIC */
 400 0232 4FF02500 	  mov r0,#USART1_IRQ 
 401 0236 00B500F0 	  _CALL nvic_enable_irq  
 401      3CF85DF8 
 401      04EB
 402 0240 7047     	  _RET  
 403              	
 404              	/* copy system variables to RAM */ 
 405              		.type remap, %function 
 406              	    .global remap 
 407              	remap:
 408              	// copy system to RAM 	
 409 0242 4FF00000 		_MOV32 r0,RAM_ADR 
 409      C2F20000 
 410 024a 5949     		ldr r1,=UZERO 
 411 024c 4FF0A002 		mov r2,#ULAST-UZERO 
 412 0250 02F10302 		add r2,r2,#3
 413 0254 22F00302 		and r2,r2,#~3 
 414 0258 51F8043B 	1:	ldr r3,[r1],#4 
 415 025c 40F8043B 		str r3,[r0],#4 
 416 0260 043A     		subs R2,#4 
 417 0262 F9D1     		bne 1b
 418              	// zero end of RAM 
 419 0264 4FF00002 		_MOV32 r2,RAM_END 
 419      C2F20202 
 420 026c 83EA0303 		eor r3,r3,r3 
 421 0270 40F8043B 	2:  str r3,[r0],#4
 422 0274 9042     		cmp r0,r2 
 423 0276 FBDB     		blt 2b 
 424 0278 4FF00004 		_MOV32 UP,RAM_ADR  
 424      C2F20004 
 425 0280 7047     		_RET 
 426              	
 427              	// set irq priority 
 428              	// 0 highest 
 429              	// 15 lowest
 430              	// input: r0 IRQn  
 431              	//        r1  ipr 
 432              	nvic_set_priority:
 433 0282 08B4     	    push {r3}
 434 0284 0028     	    cmp r0,#0 
 435 0286 08D4     	    bmi negative_irq 
 436 0288 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 436      CEF20003 
 437 0290 4FEA0111 	    lsl r1,#4 
 438 0294 1954     	    strb r1,[r3,r0]
 439 0296 08BC     	    pop {r3}
 440 0298 7047     	    _RET 
 441              	negative_irq:
 442 029a 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
ARM GAS  forth.s 			page 19


 442      CEF20003 
 443 02a2 00F00F00 	    and r0,#0XF 
 444 02a6 A0F10400 	    sub r0,#4 
 445 02aa 4FEA0111 	    lsl r1,#4 
 446 02ae 1954     	    strb r1,[r3,r0]
 447 02b0 08BC     	    pop {r3}
 448 02b2 7047     	    _RET 
 449              	
 450              	
 451              	// enable interrupt in nvic 
 452              	// input: r0 = IRQn 
 453              	nvic_enable_irq: 
 454 02b4 0EB4     	    push {r1,r2,r3}
 455 02b6 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 455      CEF20003 
 456 02be 0146     	    mov r1,r0 
 457 02c0 4FEA5111 	    lsr r1,#5  
 458 02c4 4FEA8101 	    lsl r1,#2  // ISERn  
 459 02c8 00F01F00 	    and r0,#31 // bit#
 460 02cc 4FF00102 	    mov r2,#1 
 461 02d0 02FA00F2 	    lsl r2,r0
 462 02d4 5858     	    ldr r0,[r3,r1]
 463 02d6 40EA0200 	    orr r0,r2  
 464 02da 5850     	    str r0,[r3,r1]
 465 02dc 0EBC     	    pop {r1,r2,r3}
 466 02de 7047     	    _RET 
 467              	
 468              	// disable interrupt in nvic
 469              	// input: r0 = IRQn
 470              	nvic_disable_irq:
 471 02e0 0EB4     	    push {r1,r2,r3}
 472 02e2 4EF28010 	    _MOV32 T0,(NVIC_BASE_ADR+NVIC_ICER0)
 472      CEF20000 
 473 02ea 0146     	    mov r1,r0 
 474 02ec 4FEA5111 	    lsr r1,#5  
 475 02f0 4FEA8101 	    lsl r1,#2  // ISERn
 476 02f4 00F01F00 	    and r0,#31 // bit#
 477 02f8 4FF00102 	    mov r2,#1 
 478 02fc 02FA00F2 	    lsl r2,r0
 479 0300 5858     	    ldr r0,[r3,r1]
 480 0302 40EA0200 	    orr r0,r2  
 481 0306 5850     	    str r0,[r3,r1]
 482 0308 0EBC     	    pop {r1,r2,r3}
 483 030a 7047     	    _RET 
 484              	
 485              	
 486              	/******************************************************
 487              	*  COLD start moves the following to USER variables.
 488              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 489              	******************************************************/
 490              		.p2align 2
 491              	UZERO:
 492 030c 00000000 		.word 0  			/*Reserved */
 493 0310 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 494 0314 00000000 		.word 0      /* TICKS */
 495 0318 00000000 	    .word 0     /* CD_TIMER */
 496 031c 5C2F0000 		.word HI  /*'BOOT */
ARM GAS  forth.s 			page 20


 497 0320 0A000000 		.word BASEE 	/*BASE */
 498 0324 00000000 		.word 0			/*tmp */
 499 0328 00000000 		.word 0			/*SPAN */
 500 032c 00000000 		.word 0			/*>IN */
 501 0330 00000000 		.word 0			/*#TIB */
 502 0334 00FF0120 		.word TIBB	/*TIBU */
 503 0338 C4240000 		.word INTER	/*'EVAL */
 504 033c 00000000 		.word 0			/*HLD */
 505 0340 C42F0000 		.word _LASTN	/*CONTEXT */
 506 0344 20300000 		.word CTOP  	/* FCP end of system dictionnary */
 507 0348 142D0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 508 034c C42F0000 		.word _LASTN	/*LAST word in dictionary */
 509 0350 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 509      00000000 
 509      00000000 
 509      00000000 
 510 0360 00000000 		.word 0  /* RX_HEAD */
 511 0364 00000000 		.word 0  /* RX_TAIL */ 
 512 0368 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 513 036c 00000000 		.word 0  /* VID_STATE, video state */  
 514 0370 00000000 	    .word 0  /* VID_FIELD, field */
 515 0374 00810120 		.word VID_BUFF /* video_buffer address */ 
 516 0378 00000000 	    .word 0 /* kbd struct */
 517 037c 00000000 		.space KBD_QUEUE_SIZE,0  
 517      00000000 
 517      00000000 
 517      00000000 
 518 038c 00000000 		.word 0  /* kbd queue head */
 519 0390 00000000 		.word 0 /* kbd queue tail */ 
 520 0394 00000000 	    .word 0 /* tv cursor row */
 521 0398 00000000 	    .word 0 /* tv cursor column */ 
 522 039c 00000000 	    .word 0 /* tv back color */
 523 03a0 07000000 	    .word 7 /* tv font color */
 524 03a4 00000000 	    .word 0,0 
 524      00000000 
 525              	ULAST:
 526 03ac 680E0000 	
 526      0C030000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
ARM GAS  forth.s 			page 21


  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp 
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	  .include "tvout.inc"
   1              	
   2              	  .equ HRES, 320  // horizontal resolution
   3              	  .equ VRES, 200   // vertical resolution
   4              	  .equ BPP, 4     // bits per pixel
   5              	  .equ BPR, (HRES*BPP/8)  // bytes per row
   6              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
   7              	
   8              	  .equ CHAR_WIDTH, 6 
   9              	  .equ CHAR_HEIGHT, 8
  10              	  
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ LEFT_MARGIN, (750) 
  37              	  .equ VIDEO_FIRST_LINE, 40
  38              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  39              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14µSec
  40              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  41              	
  42              	// video state 
  43              	  .equ ST_VSYNC, 0 
  44              	  .equ ST_PREVID,1 
  45              	  .equ ST_VIDEO,2 
  46              	  .equ ST_POSTVID,3    
  47              	// field 
  48              	   .equ ODD_FIELD,0 
  49              	   .equ EVEN_FIELD,-1
  50              	
  51              	/*******************************************************
  52              	NOTES:
  53              	 1) Values computed for a 96Mhz sysclock 
  54              	 2) Video sync output on PB1 use T3_CH4
  55              	 3) video out trigger TIMER3 CH3 
  56              	********************************************************/
  57              	
  58              	/**************************************
  59              	  initialize TIMER3 CH4 to generate tv_out
  60              	  synchronization signal.
  61              	**************************************/ 
  62              	  _GBL_FUNC tv_init
  63              	// configure PA0:3 as OUTPUT_OD 
  64 03b4 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  64      C4F20202 
  65 03bc 1168     	  ldr r1,[r2,#GPIO_MODER]
ARM GAS  forth.s 			page 22


  66 03be 4FF05500 	  mov r0,#0x55
  67 03c2 41EA0001 	  orr r1,r0
  68 03c6 1160     	  str r1,[r2,#GPIO_MODER]
  69              	//  mov r0,#15 
  70              	//  ldr r1,[r2,#GPIO_OTYPER]
  71              	//  orr r1,r0 
  72              	//  str r1,[r2,#GPIO_OTYPER]
  73              	//  str r1,[r2,#GPIO_BSRR]
  74              	//  ldr r1,[r2,GPIO_OSPEEDR]
  75              	//  lsl r0,#1 // fast speed  
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OSPEEDR]
  78 03c8 80EA0000 	  eor r0,r0 
  79 03cc 5061     	  str r0,[r2,#GPIO_ODR]  
  80              	// configure PB1 as OUTPUT_AFPP 
  81              	// this is TIM3_CC4 output compare 
  82 03ce 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  83 03d2 4FF00800 	  mov r0,(2<<2) // alternate function output 
  84 03d6 1168     	  ldr r1,[r2,#GPIO_MODER]
  85 03d8 41EA0001 	  orr r1,r0 
  86 03dc 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  87 03de 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  88 03e0 41EA0001 	  orr r1,r0 
  89 03e4 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  90 03e6 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  91 03ea 116A     	  ldr r1,[r2,#GPIO_AFRL]
  92 03ec 41EA0001 	  orr r1,r0 
  93 03f0 1162     	  str r1,[r2,#GPIO_AFRL]
  94              	// enable peripheral clock 
  95 03f2 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  95      C4F20202 
  96 03fa 4FF00200 	  mov r0,#2 
  97 03fe 116C     	  ldr r1,[r2,#RCC_APB1ENR]
  98 0400 41EA0001 	  orr r1,r0 
  99 0404 1164     	  str r1,[r2,#RCC_APB1ENR]
 100              	// configure TIMER3   
 101 0406 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 101      C4F20002 
 102 040e 41F2D470 	  mov r0,#HPER
 103 0412 D062     	  str r0,[r2,#TIM_ARR]
 104 0414 40F23F50 	  mov r0,#VIDEO_DELAY 
 105 0418 D063     	  str r0,[r2,#TIM_CCR3]
 106 041a 4FF4E170 	  mov r0,#HPULSE 
 107 041e 1064     	  str r0,[r2,#TIM_CCR4]  
 108 0420 47F27000 	  mov r0,#(7<<12)+(7<<4)
 109 0424 D061     	  str r0,[r2,#TIM_CCMR2]
 110 0426 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 111 042a 1062     	  str r0,[r2,#TIM_CCER]
 112 042c 4FF00100 	  mov r0,#1 
 113 0430 D060     	  str r0,[r2,#TIM_DIER]
 114 0432 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 115              	// enable interrupt in NVIC controller 
 116 0434 4FF01D00 	  mov r0,#TIM3_IRQ 
 117 0438 4FF00101 	  mov r1,#1
 118 043c 00B5FFF7 	  _CALL nvic_set_priority
 118      20FF5DF8 
 118      04EB
ARM GAS  forth.s 			page 23


 119 0446 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 044a 00B5FFF7 	  _CALL nvic_enable_irq
 120      32FF5DF8 
 120      04EB
 121 0454 7047     	  _RET
 122              	
 123              	/*************************************
 124              	  TIMER3 interrupt for tv_out
 125              	  T1 line # 
 126              	  T0 TIM3_BASE_ADR 
 127              	*************************************/
 128 0456 00BF     	  _GBL_FUNC tv_out_isr
 129 0458 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 129      C4F20000 
 130 0460 81EA0101 	  eor T1,T1
 131 0464 0161     	  str T1,[T0,#TIM_SR]
 132 0466 E16D     	  ldr T1,[UP,#VID_CNTR]
 133 0468 01F10101 	  add T1,#1 
 134 046c E165     	  str T1,[UP,#VID_CNTR]
 135              	/** machine state cases **/
 136 046e 226E     	  ldr T2,[UP,#VID_STATE]
 137 0470 002A     	  cmp T2,#ST_VSYNC 
 138 0472 07D0     	  beq state_vsync
 139 0474 012A     	  cmp T2,#ST_PREVID 
 140 0476 2FD0     	  beq state_pre_video 
 141 0478 022A     	  cmp T2,#ST_VIDEO 
 142 047a 36D0     	  beq state_video_out 
 143 047c 032A     	  cmp T2,#ST_POSTVID 
 144 047e 60D0     	  beq state_post_video
 145 0480 FFF7FEBF 	  b default_handler // invalid state 
 146              	/*** vertical sync state **/
 147              	state_vsync:
 148 0484 0129     	  cmp T1,#1
 149 0486 06D1     	  bne 1f 
 150              	/****** set vertical pre-sync  *****/
 151 0488 4FF0DB01 	  mov T1,#SERRATION
 152 048c 0164     	  str T1,[T0,#TIM_CCR4]
 153 048e 40F6E931 	  mov T1,#SYNC_LINE 
 154 0492 C162     	  str T1,[T0,#TIM_ARR]
 155 0494 68E0     	  b tv_isr_exit 
 156 0496 0729     	1: cmp T1,#7
 157 0498 03D1     	  bne 2f 
 158              	// vertical sync pulse   
 159 049a 40F62821 	  mov T1,#VSYNC_PULSE
 160 049e 0164     	  str T1,[T0,#TIM_CCR4]
 161 04a0 62E0     	  b tv_isr_exit
 162 04a2 0D29     	2: cmp T1,#13
 163 04a4 03D1     	   bne 3f  
 164              	// set vertical post-sync    
 165 04a6 4FF0DB01 	   mov T1,#SERRATION 
 166 04aa 0164     	   str T1,[T0,#TIM_CCR4]
 167 04ac 5CE0     	   b tv_isr_exit   
 168 04ae 1229     	3: cmp T1,#18
 169 04b0 03D1     	   bne 4f 
 170              	// if even field full line  
 171 04b2 616E     	   ldr T1,[UP,#VID_FIELD]
 172 04b4 0029     	   cmp T1,#ODD_FIELD  
ARM GAS  forth.s 			page 24


 173 04b6 57D0     	   beq tv_isr_exit 
 174 04b8 01E0     	   b sync_end 
 175 04ba 1329     	4: cmp T1,#19 
 176 04bc 54D1     	   bne tv_isr_exit
 177              	sync_end: 
 178 04be 4FF00901 	   mov T1,#9
 179 04c2 E165     	   str T1,[UP,#VID_CNTR]
 180 04c4 4FF4E171 	   mov T1,#HPULSE 
 181 04c8 0164     	   str T1,[T0,#TIM_CCR4] 
 182 04ca 41F2D471 	   mov T1,#HPER 
 183 04ce C162     	   str T1,[T0,#TIM_ARR] 
 184 04d0 4FF00101 	   mov T1,#ST_PREVID 
 185 04d4 2166     	   str T1,[UP,#VID_STATE]
 186 04d6 47E0     	   b tv_isr_exit 
 187              	/*****************************/
 188              	state_pre_video:
 189 04d8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 190 04da 45D4     	   bmi tv_isr_exit 
 191 04dc 4FF00201 	   mov T1,#ST_VIDEO 
 192 04e0 2166     	   str T1,[UP,#VID_STATE]
 193 04e2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 194 04e6 C160     	   str T1,[T0,#TIM_DIER]
 195 04e8 3EE0     	   b tv_isr_exit 
 196              	/**************************
 197              	    VIDEO OUTPUT 
 198              	**************************/   
 199              	state_video_out:
 200 04ea F029     	   cmp T1,#VIDEO_LAST_LINE 
 201 04ec 06D9     	   bls 1f 
 202 04ee 4FF00301 	   mov T1,#ST_POSTVID 
 203 04f2 2166     	   str T1,[UP,#VID_STATE]
 204 04f4 4FF00101 	   mov T1,#1 
 205 04f8 C160     	   str T1,[T0,#TIM_DIER]
 206 04fa 35E0     	   b tv_isr_exit 
 207              	1: // video output
 208 04fc A06E     	   ldr T0,[UP,#VID_BUFFER]
 209 04fe A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 210 0502 4FF0A003 	   mov T3,#160
 211 0506 03FB01F1 	   mul T1,T3 
 212 050a 0844     	   add T0,T1  
 213 050c 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 213      C4F20201 
 214 0514 0278     	2: ldrb T2,[T0]
 215 0516 4FEA1212 	   lsr T2,#4 
 216 051a 4A61     	   str T2,[T1,#GPIO_ODR]
 217 051c AFF30080 	   nop.w
 218 0520 AFF30080 	   nop.w 
 219 0524 10F8012B 	   ldrb T2,[T0],#1
 220 0528 02F00F02 	   and T2,#15 
 221 052c 4A61     	   str T2,[T1,#GPIO_ODR]
 222 052e AFF30080 	   nop.w
 223 0532 AFF30080 	   nop.w  
 224 0536 013B     	   subs T3,#1
 225 0538 ECD1     	   bne 2b  
 226 053a 4FF47022 	   mov T2,#(15<<16) 
 227 053e 8A61     	   str T2,[T1,#GPIO_BSRR]
 228 0540 12E0     	   b tv_isr_exit 
ARM GAS  forth.s 			page 25


 229              	state_post_video:
 230 0542 4FF48372 	   mov T2,#262
 231 0546 9142     	   cmp T1,T2
 232 0548 0ED4     	   bmi tv_isr_exit     
 233              	// odd field line 262 half line 
 234 054a 616E     	   ldr T1,[UP,VID_FIELD]
 235 054c 11B9     	   cbnz T1, frame_end 
 236 054e 40F6E931 	   mov T1,#SYNC_LINE
 237 0552 C162     	   str T1,[T0,#TIM_ARR]      
 238              	frame_end: 
 239 0554 4FF00001 	   mov T1,#ST_VSYNC 
 240 0558 2166     	   str T1,[UP,#VID_STATE]
 241 055a 81EA0101 	   eor T1,T1 
 242 055e E165     	   str T1,[UP,#VID_CNTR]
 243 0560 616E     	   ldr T1,[UP,#VID_FIELD]
 244 0562 6FEA0101 	   mvn T1,T1  
 245 0566 6166     	   str T1,[UP,#VID_FIELD]
 246              	tv_isr_exit: 
 247 0568 7047     	   _RET   
 248              	
 249              	
 250              	/***************************
 251              	    FORTH WORDS 
 252              	***************************/
 253              	    .equ LINK, 0 
 254              	
 255              	// BACK-COLOR ( -- a )
 256              	//   back color variable 
 257 056a 00000000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 257      0A424143 
 257      4B2D434F 
 257      4C4F5200 
 257      00BF
 258 057c 47F8046D 		_PUSH 
 259 0580 04F19006 		ADD TOS,UP,#BK_COLOR
 260 0584 00F074BC 		_NEXT
 261              	
 262              	// PEN-COLOR ( -- a )
 263              	// pen color variable 
 264 0588 6E050000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 264      0950454E 
 264      2D434F4C 
 264      4F5200BF 
 265 0598 47F8046D 		_PUSH 
 266 059c 04F19406 		ADD TOS,UP,#PEN_COLOR
 267 05a0 00F066BC 		_NEXT 
 268              	
 269              	// COLUMN ( -- a )
 270              	// cursor column variable 
 271 05a4 8C050000 	  _HEADER COLUMN,6,"COLUMN"
 271      06434F4C 
 271      554D4E00 
 272 05b0 47F8046D 	  _PUSH 
 273 05b4 04F18C06 	  ADD TOS,UP,#COL 
 274 05b8 00F05ABC 	  _NEXT 
 275              	
 276              	// ROW ( -- a )
ARM GAS  forth.s 			page 26


 277              	// cursor row 
 278 05bc A8050000 	  _HEADER CURSOR_ROW,3,"ROW"
 278      03524F57 
 279 05c4 47F8046D 	  _PUSH 
 280 05c8 04F18806 	  ADD TOS,UP,#ROW 
 281 05cc 00F050BC 	  _NEXT 
 282              	
 283              	// ROW>Y ( n1 - n2 )
 284              	// convert cursor row to y coord 
 285 05d0 C0050000 	  _HEADER ROWY,5,"ROW>Y"
 285      05524F57 
 285      3E5900BF 
 286 05dc 4FF00800 	  mov T0,#CHAR_HEIGHT
 287 05e0 00FB06F6 	  mul TOS,T0 
 288 05e4 00F044BC 	  _NEXT 
 289              	
 290              	// COL>X ( n1 -- n2 )
 291              	// convert cursor column to x coord 
 292 05e8 D4050000 	  _HEADER COLX,5,"COL>X" 
 292      05434F4C 
 292      3E5800BF 
 293 05f4 4FF00600 	  mov T0,#CHAR_WIDTH 
 294 05f8 00FB06F6 	  mul TOS,T0 
 295 05fc 00F038BC 	  _NEXT 
 296              	
 297              	// FONT ( -- a )
 298              	// return address of font table
 299 0600 EC050000 	  _HEADER FONT,4,"FONT" 
 299      04464F4E 
 299      540000BF 
 300 060c 47F8046D 	  _PUSH 
 301 0610 DD4E     	  ldr TOS,=font_6x8 
 302 0612 00F02DBC 	  _NEXT 
 303              	
 304              	// VIDBUFF ( -- a )
 305              	// address of video buffer 
 306 0616 04060000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 306      07564944 
 306      42554646 
 306      00BF
 307 0624 47F8046D 	  _PUSH 
 308 0628 A66E     	  LDR TOS,[UP,#VID_BUFFER]
 309 062a 00F021BC 	  _NEXT 
 310              	
 311              	
 312              	// PLOT ( x y op -- )
 313              	// draw a pixel 
 314              	//    0 back color 
 315              	//    1 pen color 
 316              	//    2 invert (invert color pixels )
 317              	//    3 xor pen color  
 318 062e 1A060000 	    _HEADER PLOT,4,"PLOT"
 318      04504C4F 
 318      5400
 319              	// compute video buffer byte address from coords
 320 0638 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 321 063a 4FF0A002 	    mov T2,#BPR // bytes per row  
ARM GAS  forth.s 			page 27


 322 063e 02FB00F0 	    mul T0,T2 
 323 0642 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 324 0646 1044     	    add T0,T2 
 325 0648 A36E     	    ldr T3,[UP,#VID_BUFFER] 
 326 064a 0344     	    add T3,T0 // T3 -> byte address 
 327 064c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 328 064e 4FF00F02 	    mov T2,#15 // AND mask 
 329 0652 11F0010F 	    tst T1,#1 
 330 0656 01D0     	    beq 1f 
 331 0658 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 332 065c CB48     	1:  ldr T0,=plot_op 
 333 065e D0E806F0 	    tbb [T0,TOS]
 334              	op_back:
 335 0662 05EA0205 	    and WP,T2 // mask out nibble 
 336 0666 94F89000 	    ldrb T0,[UP,#BK_COLOR]
 337 066a 11F0010F 	    tst T1,#1 
 338 066e 01D1     	    bne 1f 
 339 0670 4FEA0010 	    lsl T0,#4 // high nibble  
 340 0674 45EA0005 	1:  orr WP,T0  
 341 0678 1D70     	    strb WP,[T3]
 342 067a 1AE0     	    b 9f 
 343              	op_pen: 
 344 067c 05EA0205 	    and WP,T2 
 345 0680 94F89400 	    ldrb T0,[UP,#PEN_COLOR]
 346 0684 11F0010F 	    tst T1,#1
 347 0688 01D1     	    bne 1f 
 348 068a 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 349 068e 45EA0005 	1:	orr WP,T0 
 350 0692 1D70     	    strb WP,[T3]
 351 0694 0DE0     	    b 9f 
 352              	op_invert:
 353 0696 85EA0205 	    eor WP,T2 
 354 069a 1D70     	    strb WP,[T3]
 355 069c 09E0     	    b 9f 
 356              	op_xor:
 357 069e D4F89400 	    ldr T0,[UP,#PEN_COLOR]
 358 06a2 11F0010F 	    tst T1,#1 
 359 06a6 01D1     	    bne 1f 
 360 06a8 4FEA0010 	    lsl T0,#4 
 361 06ac 85EA0005 	1:  eor WP,T0 
 362 06b0 1D70     	    strb WP,[T3]
 363 06b2 57F8046B 	9:  _POP 
 364 06b6 DBE3     	    _NEXT 
 365              	
 366 06b8 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 367              	
 368              	
 369              	// VSYNC ( -- )
 370              	// wait vertical sync phase 
 371 06bc 32060000 	    _HEADER VSYNC,5,"VSYNC"
 371      05565359 
 371      4E4300BF 
 372 06c8 E06D     	1:  ldr T0,[UP,#VID_CNTR]
 373 06ca 0028     	    cmp T0,#0
 374 06cc FCD1     	    bne 1b
 375 06ce CFE3     	    _NEXT 
 376              	
ARM GAS  forth.s 			page 28


 377              	// CLS ( -- )
 378              	// clear TV screen 
 379 06d0 C0060000 	    _HEADER CLS,3,"CLS"
 379      03434C53 
 380 06d8 80EA0000 	    eor T0,T0 
 381 06dc 94F89010 	    ldrb T1,[UP,#BK_COLOR]
 382 06e0 40EA0100 	    orr T0,T1 
 383 06e4 4FEA0111 	    lsl T1,#4 
 384 06e8 40EA0100 	    orr T0,T1 
 385 06ec 4FEA0021 	    lsl T1,T0,#8 
 386 06f0 40EA0100 	    orr T0,T1 
 387 06f4 4FEA0041 	    lsl T1,T0,#16
 388 06f8 40EA0100 	    orr T0,T1 
 389 06fc 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 390 0700 A26E     	    ldr T2,[UP,#VID_BUFFER]
 391 0702 5050     	1:	str T0,[T2,T1]
 392 0704 0439     	    subs T1,#4
 393 0706 FCD1     	    bne 1b
 394 0708 1060     	    str T0,[T2]
 395 070a 80EA0000 	    eor T0,T0 
 396 070e C4F88800 	    str T0,[UP,#ROW]
 397 0712 C4F88C00 	    str T0,[UP,#COL]
 398 0716 ABE3     	    _NEXT 
 399              	
 400              	
 401              	// CLRLINE ( n -- )
 402              	// clear text line 
 403 0718 D4060000 	  _HEADER CLRLINE,7,"CLRLINE"
 403      07434C52 
 403      4C494E45 
 404 0724 504700BF 	  _NEST
 405 0728 E10F0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 405      00050000 
 406 0730 15110000 	  _ADR DUPP  
 407 0734 BD100000 	  _ADR TOR 
 408 0738 F9110000 	  _ADR STAR
 409 073c 25060000 	  _ADR VIDBUFF
 410 0740 D9110000 	  _ADR PLUS
 411 0744 95100000 	  _ADR RFROM   
 412 0748 E10F0000 	  _DOLIT 0 
 412      00000000 
 413 0750 45190000 	  _ADR FILL 
 414 0754 770E0000 	  _UNNEST 
 415              	
 416              	// SCROLLUP ( -- )
 417              	// scroll up tv screen 1 char height 
 418 0758 1C070000 	  _HEADER SCROLLUP,8,"SCROLLUP"
 418      08534352 
 418      4F4C4C55 
 418      500000BF 
 419 0768 504700BF 	  _NEST 
 420 076c 25060000 	  _ADR VIDBUFF 
 421 0770 15110000 	  _ADR DUPP 
 422 0774 E10F0000 	  _DOLIT BPR*CHAR_HEIGHT 
 422      00050000 
 423 077c 15110000 	  _ADR DUPP 
 424 0780 BD100000 	  _ADR TOR 
ARM GAS  forth.s 			page 29


 425 0784 D9110000 	  _ADR PLUS 
 426 0788 25110000 	  _ADR SWAP 
 427 078c E10F0000 	  _DOLIT VIDEO_BUFFER_SIZE 
 427      007D0000 
 428 0794 95100000 	  _ADR RFROM  
 429 0798 E9110000 	  _ADR SUBB 
 430 079c 11190000 	  _ADR MOVE
 431 07a0 E10F0000 	  _DOLIT 24 
 431      18000000 
 432 07a8 25070000 	  _ADR CLRLINE 
 433 07ac 770E0000 	  _UNNEST 
 434              	
 435              	//  RIGHT ( -- )
 436              	// move cursor 1 char. right 
 437 07b0 5C070000 	  _HEADER RIGHT,5,"RIGHT"
 437      05524947 
 437      485400BF 
 438 07bc D4F88C00 	  ldr T0,[UP,#COL]
 439 07c0 00F10100 	  add T0,#1
 440 07c4 3528     	  cmp T0,#53
 441 07c6 07D5     	  bpl TVCR  
 442 07c8 C4F88C00 	  str T0,[UP,#COL]
 443 07cc 50E3     	  _NEXT 
 444              	
 445              	
 446              	// TV-CR 
 447              	// carriage return line feed 
 448 07ce B4070000 	  _HEADER TVCR,5,"TV-CR"
 448      0554562D 
 448      4352
 449 07d8 80EA0000 	  eor T0,T0 
 450 07dc C4F88C00 	  str T0,[UP,#COL]
 451 07e0 D4F88800 	  ldr T0,[UP,#ROW]
 452 07e4 1828     	  cmp T0,#24
 453 07e6 04D0     	  beq 2f 
 454 07e8 00F10100 	  add T0,#1 
 455 07ec C4F88800 	  str T0,[UP,#ROW]
 456 07f0 3EE3     	  _NEXT 
 457              	// calling a colon word 
 458              	// from a code word   
 459 07f2 48F804CD 	2: STMFD	RSP!,{IP}
 460 07f6 DFF898C1 	   ldr IP,=3f 
 461 07fa 39E3     	   b INEXT 
 462              	3: 
 463 07fc 69070000 	  _ADR SCROLLUP 
 464 0800 770E0000 	  _UNNEST  
 465              	
 466              	
 467              	// extract font pixel 
 468              	FONT_PIXEL: // ( r -- 0|1 )
 469 0804 4FF08000 	    mov T0,#128 
 470 0808 06EA0006 	    and TOS,T0 
 471 080c 4FEAD616 	    lsr TOS,#7
 472 0810 2EE3     	    _NEXT 
 473              	
 474              	// increment x coord 
 475              	INCR_X: // ( x y -- x' y )
ARM GAS  forth.s 			page 30


 476 0812 3868     	  ldr T0,[DSP]
 477 0814 00F10100 	  add T0,#1 
 478 0818 3860     	  str T0,[DSP]
 479 081a 29E3     	  _NEXT 
 480              	
 481              	// shift font row data
 482              	NEXT_PIXEL:
 483 081c 4FEA4606 	    lsl TOS,#1
 484 0820 26E3     	    _NEXT 
 485              	
 486              	
 487              	// CHAR_ROW 
 488              	// plot character row 
 489              	// {x y r -- }
 490              	//  _HEADER CHAR_ROW,7,"CHARROW"
 491              	CHAR_ROW:  
 492 0822 504700BF 	    _NEST 
 493 0826 E10F0000 	    _DOLIT 5 
 493      05000000 
 494 082e BD100000 	    _ADR TOR 
 495 0832 BD100000 	1:  _ADR TOR 
 496 0836 4D130000 	    _ADR DDUP 
 497 083a A9100000 	    _ADR RAT
 498 083e 05080000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 499 0842 39060000 	    _ADR PLOT 
 500 0846 13080000 	    _ADR INCR_X 
 501 084a 95100000 	    _ADR RFROM 
 502 084e 1D080000 	    _ADR NEXT_PIXEL
 503              	    //_DOLIT 1 
 504              	    //_ADR LSHIFT 
 505 0852 05100000 	    _DONXT 1b
 505      32080000 
 506 085a 39130000 	    _ADR TDROP 
 507 085e 770E0000 	    _UNNEST 
 508              	
 509              	
 510              	CHAR_FONT: // ( c -- c-adr )
 511 0862 A6F12006 	   sub TOS,#32
 512 0866 4FF00800 	   mov T0,#8 
 513 086a 00FB06F6 	   mul TOS,T0 
 514 086e 4648     	   ldr T0,=font_6x8
 515 0870 0644     	   add TOS,T0 
 516 0872 FDE2     	   _NEXT 
 517              	
 518              	/**********************************
 519              	   TV-PUTC ( c -- )
 520              	   draw character in video buffer
 521              	**********************************/
 522 0874 D2070000 	    _HEADER TVPUTC,7,"TV-PUTC"
 522      0754562D 
 522      50555443 
 523 0880 504700BF 	    _NEST 
 524 0884 63080000 	    _ADR CHAR_FONT 
 525 0888 B1050000 	    _ADR COLUMN 
 526 088c 69100000 	    _ADR AT
 527 0890 F5050000 	    _ADR COLX  // x coord 
 528 0894 C5050000 	    _ADR CURSOR_ROW 
ARM GAS  forth.s 			page 31


 529 0898 69100000 	    _ADR AT    
 530 089c DD050000 	    _ADR ROWY  // {c-adr x y -- } 
 531 08a0 FD120000 	    _ADR ROT  // TEST 
 532 08a4 E10F0000 	    _DOLIT 7   
 532      07000000 
 533 08ac BD100000 	    _ADR TOR  
 534 08b0 BD100000 	1:  _ADR TOR  // { x y }
 535 08b4 4D130000 	    _ADR DDUP  // { x y x y }
 536 08b8 A9100000 	    _ADR RAT 
 537 08bc 89100000 	    _ADR CAT   // { x y x y r }
 538 08c0 23080000 	    _ADR CHAR_ROW 
 539 08c4 35120000 	    _ADR ONEP // {x y' }
 540 08c8 95100000 	    _ADR RFROM 
 541 08cc 35120000 	    _ADR ONEP // {x y' c-adr' }
 542 08d0 05100000 	    _DONXT 1b
 542      B0080000 
 543 08d8 39130000 	    _ADR TDROP  
 544 08dc BD070000 	    _ADR RIGHT
 545 08e0 770E0000 	    _UNNEST  
 546              	
 547              	// PRINT ( cstr -- )
 548              	// print counted string 
 549 08e4 78080000 	    _HEADER PRINT,5,"PRINT"
 549      05505249 
 549      4E5400BF 
 550 08f0 504700BF 	    _NEST 
 551 08f4 99140000 	    _ADR COUNT 
 552 08f8 45120000 	    _ADR ONEM 
 553 08fc BD100000 	    _ADR TOR 
 554 0900 15110000 	1:  _ADR DUPP 
 555 0904 89100000 	    _ADR CAT 
 556 0908 81080000 	    _ADR TVPUTC 
 557 090c 35120000 	    _ADR ONEP 
 558 0910 05100000 	    _DONXT 1b 
 558      00090000 
 559 0918 05110000 	    _ADR DROP 
 560 091c 770E0000 	    _UNNEST 
 561              	
 562              	// CURPOS ( line col -- )
 563              	// set text cursor position 
 564 0920 E8080000 	    _HEADER CURPOS,6,"CURPOS"
 564      06435552 
 564      504F5300 
 565 092c 352E     	    cmp TOS,#53
 566 092e 01D4     	    bmi 1f 
 567 0930 4FF03406 	    mov TOS,#52
 568 0934 C4F88C60 	1:  str TOS,[UP,#COL]
 569 0938 57F8046B 	    _POP
 570 093c 192E     	    cmp TOS,#25
 571 093e 01D4     	    bmi 1f 
 572 0940 4FF01806 	    mov TOS,#24 
 573 0944 C4F88860 	1:  str TOS,[UP,#ROW]
 574 0948 57F8046B 	    _POP 
 575 094c 90E2     	    _NEXT 
 576              	
 577              	// INPUT ( -- c-adr )
 578              	// input a string in pad 
ARM GAS  forth.s 			page 32


 579 094e 24090000 	    _HEADER INPUT,5,"INPUT"
 579      05494E50 
 579      5554
 580 0958 504700BF 	    _NEST 
 581 095c 89180000 	    _ADR PAD 
 582 0960 15110000 	    _ADR DUPP 
 583 0964 35120000 	    _ADR ONEP 
 584 0968 E10F0000 	    _DOLIT 53
 584      35000000 
 585 0970 B1230000 	    _ADR ACCEP
 586 0974 25110000 	    _ADR SWAP 
 587 0978 05110000 	    _ADR DROP 
 588 097c 39110000 	    _ADR OVER 
 589 0980 75100000 	    _ADR CSTOR  
 590 0984 770E0000 	    _UNNEST 
 591              	
 592              	
 593              		.section .rodata 
 594              		.p2align 2
 595              	/********************************************
 596              	    TV font  ASCII 6 pixels x 8 pixels 
 597              	********************************************/
 598              	font_6x8:
 599 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 599      00000000 
 600 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 600      20002000 
 601 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 601      00000000 
 602 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 602      F8505000 
 603 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 603      28F02000 
 604 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 604      40981800 
 605 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 605      A8906800 
 606 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 606      00000000 
 607 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 607      40201000 
 608 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 608      10204000 
 609 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 609      A8200000 
 610 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 610      20200000 
 611 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 611      60204000 
 612 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 612      00000000 
 613 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 613      00606000 
 614 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 614      40800000 
 615 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 615      C8887000 
ARM GAS  forth.s 			page 33


 616 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 616      2020F800 
 617 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 617      4080F800 
 618 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 618      0808F000 
 619 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 619      F8101000 
 620 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 620      0808F000 
 621 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 621      88887000 
 622 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 622      40404000 
 623 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 623      88887000 
 624 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 624      08087000 
 625 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 625      60600000 
 626 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 626      60204000 
 627 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 627      40201000 
 628 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 628      F8000000 
 629 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 629      10204000 
 630 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 630      20002000 
 631 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 631      A8A87000 
 632 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 632      88888800 
 633 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 633      8888F000 
 634 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 634      80807800 
 635 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 635      8888F000 
 636 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 636      8080F800 
 637 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 637      80808000 
 638 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 638      88887000 
 639 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 639      88888800 
 640 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 640      20207000 
 641 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 641      08906000 
 642 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 642      A0908800 
 643 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 643      8080F800 
 644 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
ARM GAS  forth.s 			page 34


 644      88888800 
 645 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 645      98888800 
 646 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 646      88887000 
 647 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 647      80808000 
 648 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 648      A8987800 
 649 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 649      A0908800 
 650 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 650      0808F000 
 651 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 651      20202000 
 652 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 652      88887000 
 653 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 653      88502000 
 654 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 654      A8D88800 
 655 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 655      50888800 
 656 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 656      20202000 
 657 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 657      8080F800 
 658 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 658      40406000 
 659 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 659      10080000 
 660 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 660      08081800 
 661 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 661      00000000 
 662 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 662      0000F800 
 663 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 663      00000000 
 664 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 664      78887800 
 665 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 665      C888F000 
 666 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 666      80887000 
 667 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 667      98887800 
 668 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 668      F8807000 
 669 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 669      40404000 
 670 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 670      88780870 
 671 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 671      88888800 
 672 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 672      20202000 
ARM GAS  forth.s 			page 35


 673 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 673      10906000 
 674 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 674      C0A09000 
 675 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 675      20207000 
 676 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 676      A8888800 
 677 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 677      88888800 
 678 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 678      88887000 
 679 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 679      88F08080 
 680 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 680      90B05018 
 681 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 681      80808000 
 682 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 682      7008F000 
 683 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 683      40483000 
 684 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 684      88986800 
 685 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 685      88502000 
 686 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 686      A8A85000 
 687 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 687      20508800 
 688 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 688      88780870 
 689 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 689      2040F800 
 690 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 690      40402000 
 691 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 691      20202000 
 692 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 692      20204000 
 693 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 693      10000000 
 694 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 694      FCFCFCFC 
 695 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 695      10204000 
 696 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 696      40201000 
 697 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 697      20200000 
 698 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 698      A8702000 
 699 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 699      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
ARM GAS  forth.s 			page 36


   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	 
  15              	// control keys 
  16              	SC_TAB =	    0x0D    //standard
  17              	SC_ENTER =	    0x5A    //standard
  18              	SC_CAPS =	    0x58    //standard
  19              	SC_NUM =	    0x77    //standard
  20              	SC_SCROLL   =	    0x7E    //standard
ARM GAS  forth.s 			page 37


  21              	SC_LSHIFT =	    0x12    //standard
  22              	SC_RSHIFT =	    0x59    //standard
  23              	SC_LCTRL =	    0x14    //standard
  24              	SC_LALT =	    0x11    //standard
  25              	SC_BKSP =	    0x66    //standard
  26              	SC_ESC =	    0x76    //standard
  27              	SC_F1 =	    0x05    //standard
  28              	SC_F2 =	    0x06    //standard
  29              	SC_F3 =	    0x04    //standard
  30              	SC_F4 =	    0x0c    //standard
  31              	SC_F5 =	    0x03    //standard
  32              	SC_F6 =	    0x0b    //standard
  33              	SC_F7 =	    0x83    //standard
  34              	SC_F8 =	    0x0a    //standard
  35              	SC_F9 =	    0x01    //standard
  36              	SC_F10 =	    0x09    //standard
  37              	SC_F11 =	    0x78    //standard
  38              	SC_F12 =	    0x07    //standard
  39              	SC_KPMUL =	    0x7c    //standard
  40              	SC_KPMINUS =	    0x7b    //standard
  41              	SC_KPPLUS =	    0x79    //standard
  42              	SC_KPDOT =	    0x71    //standard
  43              	SC_KP0 =	    0x70    //standard
  44              	SC_KP1 =	    0x69    //standard
  45              	SC_KP2 =	    0x72    //standard
  46              	SC_KP3 =	    0x7a    //standard
  47              	SC_KP4 =	    0x6b    //standard
  48              	SC_KP5 =	    0x73    //standard
  49              	SC_KP6 =	    0x74    //standard
  50              	SC_KP7 =	    0x6c    //standard
  51              	SC_KP8 =	    0x75    //standard
  52              	SC_KP9 =	    0x7d    //standard
  53              	
  54              	// extended keycode, i.e. preceded by 0xe0
  55              	SC_RCTRL =   0x14
  56              	SC_LGUI =    0x1f
  57              	SC_RGUI =    0x27 
  58              	SC_RALT =    0x11
  59              	SC_APPS =    0x2f
  60              	SC_UP	 =    0x75
  61              	SC_DOWN =    0x72
  62              	SC_LEFT =    0x6B
  63              	SC_RIGHT =   0x74
  64              	SC_INSERT =  0x70
  65              	SC_HOME =    0x6c
  66              	SC_PGUP =    0x7d
  67              	SC_PGDN =    0x7a
  68              	SC_DEL	 =    0x71
  69              	SC_END	 =    0x69
  70              	SC_KPDIV =   0x4a
  71              	SC_KPENTER = 0x5a
  72              	SC_LWINDOW = 0x1f
  73              	SC_RWINDOW = 0x27
  74              	SC_MENU = 0x5d 
  75              	 
  76              	 
  77              	//virtual key codes   
ARM GAS  forth.s 			page 38


  78              	VK_BACK =	8
  79              	VK_TAB =	9
  80              	VK_ESC =	27
  81              	VK_ENTER =	'\r'
  82              	VK_SPACE =	' ' 
  83              	VK_DELETE =	127 
  84              	VK_F1 =	128
  85              	VK_F2 =	129
  86              	VK_F3 =	130
  87              	VK_F4 =	131
  88              	VK_F5 =	132
  89              	VK_F6 =	133
  90              	VK_F7 =	134
  91              	VK_F8 =	135
  92              	VK_F9 =	136
  93              	VK_F10 =	138
  94              	VK_F11 =	139
  95              	VK_F12 =	140
  96              	VK_UP =	141
  97              	VK_DOWN =	142
  98              	VK_LEFT =	143
  99              	VK_RIGHT =	144
 100              	VK_HOME =	145
 101              	VK_END =	146
 102              	VK_PGUP =	147
 103              	VK_PGDN =	148
 104              	VK_INSERT =	149
 105              	VK_APPS =	151
 106              	VK_PRN	=	152
 107              	VK_PAUSE =	153
 108              	VK_NLOCK =    154 // numlock
 109              	VK_CLOCK =	155 // capslock
 110              	VK_LSHIFT =	156
 111              	VK_LCTRL =	157
 112              	VK_LALT =	158
 113              	VK_RSHIFT =	159
 114              	VK_LGUI =	160
 115              	VK_RCTRL =	161
 116              	VK_RGUI =	162
 117              	VK_RALT =	163
 118              	VK_SCROLL =	164
 119              	VK_NUM	=	165 
 120              	VK_CAPS =	168
 121              	//<SHIFT>-<KEY> 
 122              	VK_SUP	=	169
 123              	VK_SDOWN =	170
 124              	VK_SLEFT =	171
 125              	VK_SRIGHT =	172
 126              	VK_SHOME =	173
 127              	VK_SEND	=	174
 128              	VK_SPGUP =	175
 129              	VK_SPGDN =	176
 130              	VK_SDEL  =    191
 131              	//<CTRL>-<KEY>
 132              	VK_CUP	=	177
 133              	VK_CDOWN =	178	
 134              	VK_CLEFT =	179
ARM GAS  forth.s 			page 39


 135              	VK_CRIGHT =	180
 136              	VK_CHOME =	181
 137              	VK_CEND =	182
 138              	VK_CPGUP =	183
 139              	VK_CPGDN =	184
 140              	VK_CDEL  =    185
 141              	VK_CBACK =    186
 142              	VK_LWINDOW =  187
 143              	VK_RWINDOW =  188
 144              	VK_MENU	=   189
 145              	VK_SLEEP =	190
 146              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0994 1C61     	   .byte 0x1c,'a' 
   9 0996 3262     	   .byte 0x32,'b'
  10 0998 2163     	   .byte 0x21,'c'
  11 099a 2364     	   .byte 0x23,'d'
  12 099c 2465     	   .byte 0x24,'e'
  13 099e 2B66     	   .byte 0x2b,'f'
  14 09a0 3467     	   .byte 0x34,'g'
  15 09a2 3368     	   .byte 0x33,'h'
  16 09a4 4369     	   .byte 0x43,'i'
  17 09a6 3B6A     	   .byte 0x3B,'j'
  18 09a8 426B     	   .byte 0x42,'k'
  19 09aa 4B6C     	   .byte 0x4b,'l'
  20 09ac 3A6D     	   .byte 0x3a,'m'
  21 09ae 316E     	   .byte 0x31,'n'
  22 09b0 446F     	   .byte 0x44,'o'
  23 09b2 4D70     	   .byte 0x4d,'p'
  24 09b4 1571     	   .byte 0x15,'q'
  25 09b6 2D72     	   .byte 0x2d,'r'
  26 09b8 1B73     	   .byte 0x1b,'s'
  27 09ba 2C74     	   .byte 0x2c,'t'
  28 09bc 3C75     	   .byte 0x3c,'u'
  29 09be 2A76     	   .byte 0x2a,'v'
  30 09c0 1D77     	   .byte 0x1d,'w'
  31 09c2 2278     	   .byte 0x22,'x'
  32 09c4 3579     	   .byte 0x35,'y'
  33 09c6 1A7A     	   .byte 0x1a,'z'
  34 09c8 4530     	   .byte 0x45,'0'
  35 09ca 1631     	   .byte 0x16,'1'
  36 09cc 1E32     	   .byte 0x1e,'2'
  37 09ce 2633     	   .byte 0x26,'3'
  38 09d0 2534     	   .byte 0x25,'4'
  39 09d2 2E35     	   .byte 0x2e,'5'
  40 09d4 3636     	   .byte 0x36,'6'
  41 09d6 3D37     	   .byte 0x3d,'7'
  42 09d8 3E38     	   .byte 0x3e,'8'
  43 09da 4639     	   .byte 0x46,'9'
  44 09dc 0E60     	   .byte 0x0e,'`'
  45 09de 4E2D     	   .byte 0x4e,'-'
  46 09e0 553D     	   .byte 0x55,'='
  47 09e2 5D5C     	   .byte 0x5d,'\\'
  48 09e4 545B     	   .byte 0x54,'['
ARM GAS  forth.s 			page 40


  49 09e6 5B5D     	   .byte 0x5b,']'
  50 09e8 4C3B     	   .byte 0x4c,';'
  51 09ea 5227     	   .byte 0x52,'\''
  52 09ec 412C     	   .byte 0x41,','
  53 09ee 492E     	   .byte 0x49,'.'
  54 09f0 7C2A     	   .byte 0x7c,'*'
  55 09f2 792B     	   .byte 0x79,'+'
  56 09f4 2920     	   .byte 0x29,' '
  57 09f6 5A0D     	   .byte SC_ENTER,'\r'
  58 09f8 6608     	   .byte SC_BKSP,8
  59 09fa 0D09     	   .byte SC_TAB,9
  60 09fc 761B     	   .byte SC_ESC,27
  61 09fe 119E     	   .byte SC_LALT,VK_LALT 
  62 0a00 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0a02 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0a04 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0a06 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0a08 589B     	   .byte SC_CAPS,VK_CLOCK 
  67 0a0a 0580     	   .byte SC_F1,VK_F1
  68 0a0c 0681     	   .byte SC_F2,VK_F2
  69 0a0e 0482     	   .byte SC_F3,VK_F3
  70 0a10 0C83     	   .byte SC_F4,VK_F4
  71 0a12 0384     	   .byte SC_F5,VK_F5
  72 0a14 0B85     	   .byte SC_F6,VK_F6
  73 0a16 8386     	   .byte SC_F7,VK_F7
  74 0a18 0A87     	   .byte SC_F8,VK_F8
  75 0a1a 0188     	   .byte SC_F9,VK_F9
  76 0a1c 098A     	   .byte SC_F10,VK_F10
  77 0a1e 788B     	   .byte SC_F11,VK_F11
  78 0a20 078C     	   .byte SC_F12,VK_F12
  79 0a22 7030     	   .byte SC_KP0,'0'
  80 0a24 6931     	   .byte SC_KP1,'1'
  81 0a26 7232     	   .byte SC_KP2,'2'
  82 0a28 7A33     	   .byte SC_KP3,'3'
  83 0a2a 6B34     	   .byte SC_KP4,'4'
  84 0a2c 7335     	   .byte SC_KP5,'5'
  85 0a2e 7436     	   .byte SC_KP6,'6'
  86 0a30 6C37     	   .byte SC_KP7,'7'
  87 0a32 7538     	   .byte SC_KP8,'8'
  88 0a34 7D39     	   .byte SC_KP9,'9'
  89 0a36 7C2A     	   .byte SC_KPMUL,'*'
  90 0a38 4A2F     	   .byte SC_KPDIV,'/'
  91 0a3a 792B     	   .byte SC_KPPLUS,'+'
  92 0a3c 7B2D     	   .byte SC_KPMINUS,'-'
  93 0a3e 712E     	   .byte SC_KPDOT,'.'
  94 0a40 5A0D     	   .byte SC_KPENTER,'\r'
  95 0a42 0000     	   .byte 0,0
  96              	   
  97              	// shifted key 
  98              	shifted:
  99 0a44 6141     	   .byte 'a','A'
 100 0a46 6242     	   .byte 'b','B'
 101 0a48 6343     	   .byte 'c','C'
 102 0a4a 6444     	   .byte 'd','D'
 103 0a4c 6545     	   .byte 'e','E'
 104 0a4e 6646     	   .byte 'f','F'
 105 0a50 6747     	   .byte 'g','G'
ARM GAS  forth.s 			page 41


 106 0a52 6848     	   .byte 'h','H'
 107 0a54 6949     	   .byte 'i','I'
 108 0a56 6A4A     	   .byte 'j','J'
 109 0a58 6B4B     	   .byte 'k','K'
 110 0a5a 6C4C     	   .byte 'l','L'
 111 0a5c 6D4D     	   .byte 'm','M'
 112 0a5e 6E4E     	   .byte 'n','N'
 113 0a60 6F4F     	   .byte 'o','O'
 114 0a62 7050     	   .byte 'p','P'
 115 0a64 7151     	   .byte 'q','Q'
 116 0a66 7252     	   .byte 'r','R'
 117 0a68 7353     	   .byte 's','S'
 118 0a6a 7454     	   .byte 't','T'
 119 0a6c 7555     	   .byte 'u','U'
 120 0a6e 7656     	   .byte 'v','V'
 121 0a70 7757     	   .byte 'w','W'
 122 0a72 7858     	   .byte 'x','X'
 123 0a74 7959     	   .byte 'y','Y'
 124 0a76 7A5A     	   .byte 'z','Z'
 125 0a78 3121     	   .byte '1','!'
 126 0a7a 3240     	   .byte '2','@'
 127 0a7c 3323     	   .byte '3','#'
 128 0a7e 3424     	   .byte '4','$'
 129 0a80 3525     	   .byte '5','%'
 130 0a82 365E     	   .byte '6','^'
 131 0a84 3726     	   .byte '7','&'
 132 0a86 382A     	   .byte '8','*'
 133 0a88 3928     	   .byte '9','('
 134 0a8a 3029     	   .byte '0',')'
 135 0a8c 2D5F     	   .byte '-','_'
 136 0a8e 3D2B     	   .byte '=','+'
 137 0a90 607E     	   .byte '`','~'
 138 0a92 2722     	   .byte '\'','"'
 139 0a94 2C3C     	   .byte ',','<'
 140 0a96 2E3E     	   .byte '.','>'
 141 0a98 2F3F     	   .byte '/','?'
 142 0a9a 5C7C     	   .byte '\\','|'
 143 0a9c 3B3A     	   .byte ';',':'
 144 0a9e 5B7B     	   .byte '[','{'
 145 0aa0 5D7D     	   .byte ']','}'
 146 0aa2 0000     	   .byte 0,0
 147              	   
 148              	//alt char keys 
 149              	altchar:
 150 0aa4 315C     	   .byte '1','\\'
 151 0aa6 3240     	   .byte '2','@'
 152 0aa8 332F     	   .byte '3','/'
 153              	//   .byte '4','�'
 154              	//   .byte '5','�'
 155 0aaa 363F     	   .byte '6','?'
 156 0aac 377C     	   .byte '7','|'
 157              	//   .byte '8','�'
 158 0aae 397B     	   .byte '9','{'
 159 0ab0 307D     	   .byte '0','}'
 160              	//   .byte '-','�'
 161              	//   .byte '=','�'
 162 0ab2 0000     	   .byte 0,0
ARM GAS  forth.s 			page 42


 163              	   
 164              	// extended keycodes 
 165              	extended:
 166 0ab4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 167 0ab6 1FA0     	    .byte SC_LGUI,VK_LGUI
 168 0ab8 27A2     	    .byte SC_RGUI,VK_RGUI 
 169 0aba 11A3     	    .byte SC_RALT,VK_RALT
 170 0abc 2F97     	    .byte SC_APPS,VK_APPS
 171 0abe 758D     	    .byte SC_UP,VK_UP
 172 0ac0 728E     	    .byte SC_DOWN,VK_DOWN
 173 0ac2 6B8F     	    .byte SC_LEFT,VK_LEFT
 174 0ac4 7490     	    .byte SC_RIGHT,VK_RIGHT
 175 0ac6 7095     	    .byte SC_INSERT,VK_INSERT
 176 0ac8 6C91     	    .byte SC_HOME,VK_HOME
 177 0aca 7D93     	    .byte SC_PGUP,VK_PGUP
 178 0acc 7A94     	    .byte SC_PGDN,VK_PGDN
 179 0ace 717F     	    .byte SC_DEL,VK_DELETE
 180 0ad0 6992     	    .byte SC_END,VK_END
 181 0ad2 4A2F     	    .byte SC_KPDIV,'/'
 182 0ad4 5A0D     	    .byte SC_KPENTER,'\r'
 183 0ad6 1200     	    .byte 0x12,0
 184 0ad8 7C00     	    .byte 0x7c,0
 185 0ada 0000     	    .byte 0,0
 186              	    
 187              	   
 188              	// CTRL-n  keycodes 
 189              	controls:
 190 0adc 1FA0     	   .byte SC_LGUI,VK_LGUI
 191 0ade 14A1     	   .byte SC_RCTRL,VK_RCTRL
 192 0ae0 27A2     	   .byte SC_RGUI,VK_RGUI
 193 0ae2 11A3     	   .byte SC_RALT,VK_RALT
 194 0ae4 2F97     	   .byte SC_APPS,VK_APPS
 195 0ae6 7095     	   .byte SC_INSERT,VK_INSERT
 196 0ae8 6C91     	   .byte SC_HOME,VK_HOME
 197 0aea 7D93     	   .byte SC_PGUP,VK_PGUP
 198 0aec 717F     	   .byte SC_DEL,VK_DELETE
 199 0aee 6992     	   .byte SC_END,VK_END
 200 0af0 7A94     	   .byte SC_PGDN,VK_PGDN
 201 0af2 758D     	   .byte SC_UP,VK_UP
 202 0af4 6B8F     	   .byte SC_LEFT,VK_LEFT
 203 0af6 728E     	   .byte SC_DOWN,VK_DOWN
 204 0af8 7490     	   .byte SC_RIGHT,VK_RIGHT
 205 0afa 4A2F     	   .byte SC_KPDIV,'/'
 206 0afc 5A0D     	   .byte SC_ENTER,VK_ENTER
 207 0afe 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 208 0b00 149D     	   .byte SC_LCTRL,VK_LCTRL
 209 0b02 119E     	   .byte SC_LALT,VK_LALT
 210 0b04 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 211 0b06 5A0D     	   .byte SC_KPENTER,VK_ENTER
 212 0b08 761B     	   .byte SC_ESC,VK_ESC
 213 0b0a 779A     	   .byte SC_NUM,VK_NLOCK
 214 0b0c 589B     	   .byte SC_CAPS,VK_CLOCK
 215 0b0e 0000     	   .byte 0,0
 216              	
 217              	
  38              	
  39              	/**********************************
ARM GAS  forth.s 			page 43


  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_PAR_ERR,(1<<0)     // parity error 
  54              	    .equ KBD_FRAME_ERR,(1<<1)   // frame error 
  55              	    .equ KBD_CAPSLK,(1<<2) // capslock 
  56              	    .equ KBD_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_ALT,(1<<5)    // alt down
  59              	    .equ KBD_ALTCHAR,(1<<6) // altchar down 
  60              	    .equ KBD_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	/**********************************
  68              	    kbd_isr
  69              	    interrupt service routine 
  70              	    EXTI0 connected to keyboard 
  71              	    clock signal and triggered 
  72              	    on falling edge 
  73              	**********************************/
  74              	    _GBL_FUNC kbd_isr 
  75 0b10 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  75      C4F20102 
  76 0b18 4FF40060 	    mov r0,#(1<<11) 
  77 0b1c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  78 0b1e 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  78      C4F20202 
  79 0b26 108A     	    ldrh r0,[r2,#GPIO_IDR]
  80 0b28 94F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  81 0b2c 0029     	    cmp r1,#0 
  82 0b2e 19D0     	    beq start_bit 
  83 0b30 0929     	    cmp r1,#9 
  84 0b32 25D0     	    beq parity_bit 
  85 0b34 0A29     	    cmp r1,#10 
  86 0b36 33D0     	    beq stop_bit 
  87              	    // data bit 
  88 0b38 94F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  89 0b3c 4FEA5202 	    lsr r2,#1 
  90 0b40 10F4805F 	    tst r0,#(1<<12) // data bit 
  91 0b44 07D0     	    beq 1f 
  92 0b46 42F08002 	    orr r2,#(1<<7)
  93 0b4a 94F86F00 	    ldrb r0,[UP,#KBD_PARITY]
  94 0b4e 00F10100 	    add r0,#1 
ARM GAS  forth.s 			page 44


  95 0b52 84F86F00 	    strb r0,[UP,#KBD_PARITY]
  96 0b56 84F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  97 0b5a 01F10101 	    add r1,#1 
  98 0b5e 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  99 0b62 3EE0     	    b 9f         
 100              	start_bit:
 101 0b64 10F4805F 	    tst r0,#(1<<12) 
 102 0b68 3BD1     	    bne 9f // not a start bit 
 103 0b6a 01F10101 	    add r1,#1 
 104 0b6e 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]
 105 0b72 81EA0101 	    eor r1,r1 
 106 0b76 84F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
 107 0b7a 84F86F10 	    strb r1,[UP,#KBD_PARITY]
 108 0b7e 30E0     	    b 9f 
 109              	parity_bit:
 110 0b80 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 111 0b84 10F4805F 	    tst r0,#(1<<12)
 112 0b88 03D0     	    beq 1f  
 113 0b8a 01F10101 	    add r1,#1 
 114 0b8e 84F86F10 	    strb r1,[UP,#KBD_PARITY]  
 115 0b92 94F86C10 	1:  ldrb r1,[UP,#KBD_BITCNTR]
 116 0b96 01F10101 	    add r1,#1
 117 0b9a 84F86C10 	    strb r1,[UP,#KBD_BITCNTR]    
 118 0b9e 20E0     	    b 9f      
 119              	stop_bit:
 120 0ba0 94F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 121 0ba4 10F4805F 	    tst r0,#(1<<12)
 122 0ba8 12D0     	    beq 2f
 123 0baa 94F86F10 	    ldrb r1,[UP,#KBD_PARITY]
 124 0bae 11F0010F 	    tst r1,#1 
 125 0bb2 12D0     	    beq 8f // parity error 
 126              	// store code in queue 
 127 0bb4 D4F88410 	    ldr r1,[UP,#KBD_QTAIL]
 128 0bb8 04F17002 	    add r2,UP,#KBD_QUEUE
 129 0bbc 94F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 130 0bc0 5054     	    strb r0,[r2,r1]
 131 0bc2 01F10101 	    add r1,#1
 132 0bc6 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 133 0bca 84F88410 	    strb r1,[UP,#KBD_QTAIL]
 134 0bce 04E0     	    b 8f 
 135              	2:  // framing error 
 136 0bd0 41F00201 	    orr r1,#KBD_FRAME_ERR   
 137 0bd4 84F86E10 	    strb r1,[UP,#KBD_FLAGS]
 138 0bd8 FFE7     	    b 8f 
 139 0bda 80EA0000 	8:  eor r0,r0 
 140 0bde A4F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 141 0be2 7047     	9:  _RET 
 142              	    
 143              	/**********************************
 144              	    kbd_init 
 145              	    initialize keyboard 
 146              	    PS2 clock on PA11 
 147              	    PS2 data on PA12 
 148              	**********************************/
 149              	    _GBL_FUNC kbd_init 
 150              	// interrupt triggered on falling edge 
 151 0be4 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
ARM GAS  forth.s 			page 45


 151      C4F20102 
 152 0bec 4FF40060 	   mov r0,#(1<<11)
 153 0bf0 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI11 
 154 0bf2 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 155              	// enable interrupt EXTI15_10_IRQ in NVIC 
 156 0bf4 4FF02800 	   mov r0,#EXTI15_10_IRQ
 157 0bf8 00B5FFF7 	   _CALL nvic_enable_irq 
 157      5BFB5DF8 
 157      04EB
 158 0c02 7047     	   _RET 
 159              	
 160              	
 161              	// ASYNC-KEY ( -- n )
 162              	// return async key flags 
 163 0c04 52090000 	    _HEADER ASYNC_KEY,9,"ASYNC-KEY"
 163      09415359 
 163      4E432D4B 
 163      455900BF 
 164 0c14 47F8046D 	    _PUSH 
 165 0c18 94F86E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 166 0c1c 06F0FC06 	    and TOS,#0xFC  
 167 0c20 26E1     	    _NEXT 
 168              	
 169              	// KEY-ERR? ( -- 0|1|2)
 170              	// report keyboard error 
 171 0c22 080C0000 	    _HEADER KEYERRQ,8,"KEY-ERR?"
 171      084B4559 
 171      2D455252 
 171      3F00
 172 0c30 47F8046D 	    _PUSH 
 173 0c34 94F86E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 174 0c38 06F00306 	    and TOS,#3 
 175 0c3c 18E1     	    _NEXT     
 176              	
 177              	// KEY-RST-ERR ( -- )
 178              	// reset keyboard error flags 
 179 0c3e 260C0000 	    _HEADER KEY_RST_ERR,11,"KEY-RST-ERR"
 179      0B4B4559 
 179      2D525354 
 179      2D455252 
 179      00BF
 180 0c50 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 181 0c54 00F0FC00 	    and T0,#0xFC 
 182 0c58 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 183 0c5c 08E1     	    _NEXT 
 184              	
 185              	// KEYCODE 
 186              	// extract keyboard scancode from queue.
 187              	// output:
 188              	//        T0  keycode | 0 
 189              	keycode: 
 190 0c5e 0EB4     	    push {T1,T2,T3}
 191 0c60 80EA0000 	    eor T0,T0  
 192 0c64 04F17003 	    add T3,UP,#KBD_QUEUE
 193 0c68 D4F88010 	    ldr T1,[UP,#KBD_QHEAD]
 194 0c6c D4F88420 	    ldr T2,[UP,#KBD_QTAIL]
 195 0c70 9142     	    cmp T1,T2 
ARM GAS  forth.s 			page 46


 196 0c72 06D0     	    beq 2f  
 197 0c74 585C     	    ldrb T0,[T3,T1]
 198 0c76 01F10101 	    add T1,#1 
 199 0c7a 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 200 0c7e C4F88010 	    str T1,[UP,#KBD_QHEAD]
 201 0c82 0EBC     	2:  pop {T1,T2,T3}
 202 0c84 7047     	    _RET 
 203              	
 204              	wait_code:
 205 0c86 00B5FFF7 	    _CALL keycode 
 205      E9FF5DF8 
 205      04EB
 206 0c90 0000     	    movs T0,T0
 207 0c92 F8D0     	    beq wait_code  
 208 0c94 7047     	    _RET 
 209              	
 210              	// translation table scan 
 211              	// input:
 212              	//      T0   target code 
 213              	//      T1   table pointer 
 214              	// output: 
 215              	//        T0   0 | code 
 216              	table_scan:
 217 0c96 04B4     	    push {T2}
 218 0c98 11F8012B 	1:  ldrb T2,[T1],#1
 219 0c9c 22B1     	    cbz T2,2f 
 220 0c9e 8242     	    cmp T2,T0
 221 0ca0 02D0     	    beq 2f 
 222 0ca2 01F10101 	    add T1,#1 
 223 0ca6 F7E7     	    b 1b 
 224 0ca8 0878     	2:  ldrb T0,[T1] 
 225 0caa 04BC     	9:  pop {T2}
 226 0cac 7047     	    _RET 
 227              	
 228              	// INKEY ( -- 0|key )
 229              	// get a character from keyboard
 230              	// don't wait for it.
 231 0cae 420C0000 	    _HEADER INKEY,5,"INKEY"
 231      05494E4B 
 231      4559
 232 0cb8 47F8046D 	    _PUSH 
 233 0cbc 86EA0606 	    eor TOS,TOS 
 234 0cc0 5F49     	    ldr T1,=sc_ascii // translation table
 235 0cc2 00B5FFF7 	    _CALL keycode
 235      CBFF5DF8 
 235      04EB
 236 0ccc C8B1     	    cbz T0,inkey_exit  
 237 0cce E028     	    cmp T0,#XT_KEY // extended keycode 
 238 0cd0 2AD0     	    beq xcode
 239 0cd2 E128     	    cmp T0,#XT2_KEY // pause 
 240 0cd4 1ED0     	    beq pause_key 
 241 0cd6 F028     	    cmp T0,#KEY_REL // key released
 242 0cd8 2ED0     	    beq released 
 243 0cda 00B5FFF7 	7:  _CALL table_scan 
 243      DBFF5DF8 
 243      04EB
 244 0ce4 9B28     	    cmp T0,#VK_CLOCK
ARM GAS  forth.s 			page 47


 245 0ce6 0CD0     	    beq inkey_exit 
 246 0ce8 0646     	    mov TOS,T0
 247 0cea 00B500F0 	8:  _CALL do_async_key 
 247      45F85DF8 
 247      04EB
 248 0cf4 FF28     	    cmp T0,#255
 249 0cf6 04D1     	    bne inkey_exit 
 250 0cf8 00B500F0 	    _CALL do_modifiers
 250      64F85DF8 
 250      04EB
 251              	inkey_exit:     
 252 0d02 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 253 0d06 6FF08001 	    mvn T1,#KBD_REL 
 254 0d0a 00EA0100 	    and T0,T1 
 255 0d0e 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 256 0d12 ADE0     	    _NEXT
 257              	pause_key: // discard next 7 codes 
 258 0d14 4FF00701 	    mov T1,#7 
 259 0d18 00B5FFF7 	1:  _CALL wait_code 
 259      B4FF5DF8 
 259      04EB
 260 0d22 0139     	    subs T1,#1
 261 0d24 F8D1     	    bne 1b 
 262 0d26 A3E0     	    _NEXT 
 263              	xcode: // extended scancode 
 264 0d28 4649     	    ldr T1,=extended // extended code translation table 
 265 0d2a 00B5FFF7 	    _CALL wait_code
 265      ABFF5DF8 
 265      04EB
 266 0d34 F028     	    cmp T0,#KEY_REL
 267 0d36 D0D1     	    bne 7b 
 268              	released: // key released
 269 0d38 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 270 0d3c 40F08000 	    orr T0,#KBD_REL 
 271 0d40 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 272 0d44 00B5FFF7 	    _CALL wait_code 
 272      9EFF5DF8 
 272      04EB
 273 0d4e 00B5FFF7 	    _CALL table_scan
 273      A1FF5DF8 
 273      04EB
 274 0d58 9B28     	    cmp T0,#VK_CLOCK
 275 0d5a 05D0     	    beq toggle_capslock 
 276 0d5c 00B500F0 	    _CALL do_async_key 
 276      0CF85DF8 
 276      04EB
 277 0d66 CCE7     	    b inkey_exit  
 278              	toggle_capslock:
 279              	// when capslock is released toggle its flag
 280 0d68 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 281 0d6c 4FF00401 	    mov T1,#KBD_CAPSLK 
 282 0d70 80EA0100 	    eor T0,T1 
 283 0d74 84F86E00 	    strb T0,[UP,#KBD_FLAGS]
 284 0d78 C3E7     	    b inkey_exit 
 285              	
 286              	// check if async key 
 287              	// and process it
ARM GAS  forth.s 			page 48


 288              	do_async_key:
 289 0d7a 00B500F0 	    _CALL is_async_key  
 289      54F85DF8 
 289      04EB
 290 0d84 FF28     	    cmp T0,#255
 291 0d86 1DD0     	    beq 9f 
 292              	// asynchornous key, set/reset flag 
 293              	set_async_key: 
 294 0d88 86EA0606 	    eor TOS,TOS // no key to return 
 295 0d8c 94F86E20 	    ldrb T2,[UP,#KBD_FLAGS] 
 296 0d90 2D49     	    ldr T1,=async_jump 
 297 0d92 D1E800F0 	    tbb [T1,T0]
 298              	shift_key:
 299 0d96 4FF00800 	    mov T0,#KBD_SHIFT 
 300 0d9a 07E0     	    b set_reset
 301              	ctrl_key:
 302 0d9c 4FF01000 	    mov T0,#KBD_CTRL
 303 0da0 04E0     	    b set_reset 
 304              	alt_key:
 305 0da2 4FF02000 	    mov T0,#KBD_ALT 
 306 0da6 01E0     	    b set_reset 
 307              	altchar_key:
 308 0da8 4FF04000 	    mov T0,#KBD_ALTCHAR 
 309              	set_reset:
 310 0dac 12F0800F 	    tst T2,#KBD_REL 
 311 0db0 04D0     	    beq 1f 
 312 0db2 6FEA0000 	    mvn T0,T0
 313 0db6 02EA0002 	    and T2,T0
 314 0dba 01E0     	    b 2f
 315 0dbc 42EA0002 	1:  orr T2,T0 
 316 0dc0 84F86E20 	2:  strb T2,[UP,#KBD_FLAGS]
 317 0dc4 7047     	9:  _RET 
 318              	
 319              	// check for modifiers flags 
 320              	// and process it.
 321              	do_modifiers:
 322 0dc6 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 323 0dca 10F0080F 	    tst T0,#KBD_SHIFT 
 324 0dce 05D1     	    bne shift_down 
 325 0dd0 10F0400F 	    tst T0,#KBD_ALTCHAR 
 326 0dd4 05D1     	    bne altchar_down 
 327 0dd6 10F0100F 	    tst T0,#KBD_CTRL
 328 0dda 0DE0     	    b 9f 
 329              	shift_down:
 330 0ddc 3046     	    mov T0,TOS 
 331 0dde 1B49     	    ldr T1,=shifted 
 332 0de0 04E0     	    b 8f 
 333              	altchar_down:
 334 0de2 3046     	    mov T0,TOS 
 335 0de4 1A49     	    ldr T1,=altchar
 336 0de6 01E0     	    b 8f
 337              	ctrl_down:
 338 0de8 3046     	    mov T0,TOS 
 339 0dea 1A49     	    ldr T1,=controls 
 340 0dec 00B5FFF7 	8:  _CALL table_scan
 340      52FF5DF8 
 340      04EB
ARM GAS  forth.s 			page 49


 341 0df6 0646     	    mov TOS,T0
 342 0df8 00B500F0 	9:  _CALL do_capslock 
 342      03F85DF8 
 342      04EB
 343 0e02 7047     	    _RET 
 344              	
 345              	do_capslock:
 346 0e04 94F86E00 	    ldrb T0,[UP,#KBD_FLAGS]
 347 0e08 10F0040F 	    tst T0,#KBD_CAPSLK 
 348 0e0c 0BD0     	    beq 9f 
 349 0e0e 412E     	    cmp TOS,#'A'
 350 0e10 09D4     	    bmi 9f 
 351 0e12 5B2E     	    cmp TOS,#'Z'+1 
 352 0e14 03D4     	    bmi 3f 
 353 0e16 612E     	    cmp TOS,#'a'
 354 0e18 05D4     	    bmi 9f 
 355 0e1a 7B2E     	    cmp TOS,#'z'+1
 356 0e1c 03D5     	    bpl 9f 
 357 0e1e 4FF02000 	3:  mov T0,#(1<<5)
 358 0e22 86EA0006 	    eor TOS,T0 
 359 0e26 7047     	9:  _RET 
 360              	
 361              	// check if it is an asynchronous key 
 362              	// input:
 363              	//        T0  virtual code
 364              	// output:
 365              	//        T0 code order | -1 
 366              	is_async_key:
 367 0e28 0B49     	    ldr T1,=async_keys
 368 0e2a 34E7     	    b table_scan
 369              	
 370              	// asynchronous key table 
 371              	async_keys:
 372 0e2c 9C00     	    .byte VK_LSHIFT,0 // left shift 
 373 0e2e 9F00     	    .byte VK_RSHIFT,0 // right shift 
 374 0e30 9D01     	    .byte VK_LCTRL,1  // left control 
 375 0e32 A101     	    .byte VK_RCTRL,1  // right control 
 376 0e34 9E02     	    .byte VK_LALT,2  // left alt 
 377 0e36 A303     	    .byte VK_RALT,3   // right alt (alt char)
 378 0e38 00FF     	    .byte 0,255 
 379              	
 380              	async_jump: // tbb table for async keys 
 381 0e3a 00       	    .byte 0 // shift  key 
 382 0e3b 03       	    .byte (ctrl_key-shift_key)/2
 383 0e3c 06       	    .byte (alt_key-shift_key)/2
 384 0e3d 09       	    .byte (altchar_key-shift_key)/2
 385 0e3e 00009409 	
 385      0000B40A 
 385      00003A0E 
 385      0000440A 
 385      0000A40A 
   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
ARM GAS  forth.s 			page 50


   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R12	is used as IP , inner interpreter address pointer 
  12              	*   UP  IS used AS WP 
  13              	*	WP 	is used as UP , working register 
  14              	*	R8 	is used as link register by _NEST macro it is initialized 
  15              	*  		NEST address and MUST BE PRESERVED.
  16              	*
  17              	*     Use USART1 for console I/O
  18              	*     port config: 115200 8N1 
  19              	*     TX on  PA9,  RX on PA10  
  20              	*
  21              	*     eForth is executed from flash, not copied to RAM
  22              	*     eForth use main stack R13 as return stack (thread stack not used) 
  23              	*
  24              	*     Forth return stack is at end of RAM (addr=0x200020000) and reserve 512 bytes
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Version 5.02, 09oct04cht
  42              	*	fOR ADuC702x from Analog Devices
  43              	*	Version 6.01, 10apr08cht a
  44              	*	.p2align 2 to at91sam7x256
  45              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  46              	*	Running under uVision3 RealView from Keil
  47              	*	Version 7.01, 29jun14cht
  48              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  49              	*	.p2aligned to eForth 2 Model
  50              	*	Assembled to flash memory and executed therefrom.
  51              	*	Version 7.10, 30jun14cht
  52              	*	Flash memory mapped to Page 0 where codes are executed
  53              	*	Version 7.20, 02jul14cht
  54              	*	Irreducible Complexity
  55              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  56              	*	TURNKEY saves current application from RAM to flash.
  57              	*********************************************************/
  58              	
  59              		.syntax unified
  60              		.cpu cortex-m4
  61              		.fpu softvfp  
  62              		.thumb
  63              	
ARM GAS  forth.s 			page 51


  64              		.include "stm32f411ce.inc"
  65              		
  66              		.section .text, "ax", %progbits
  67              	
  68              	/***********************************
  69              	//  Start of eForth system 
  70              	***********************************/
  71              	
  72              		.p2align 2 
  73              	
  74              	// PUSH TOS, to be used in colon definition 
  75              	TPUSH:
  76 0e5c 47F8046D 		_PUSH
  77 0e60 06E0     		_NEXT
  78              	
  79              	// POP TOS, to be used in colon defintion  
  80              	TPOP:
  81 0e62 57F8046B 		_POP 
  82 0e66 03E0     		_NEXT
  83              	
  84              	// hi level word enter 
  85              	NEST: 
  86 0e68 48F804CD 		STMFD	RSP!,{IP}
  87 0e6c 05F1030C 		ADD IP,WP,#3
  88              	// inner interprer
  89              	INEXT: 
  90 0e70 5CF8045B 		LDR WP,[IP],#4 
  91 0e74 2847     		BX WP  
  92              	UNNEST:
  93 0e76 58F804CB 		LDMFD RSP!,{IP}
  94 0e7a 5CF8045B 		LDR WP,[IP],#4 
  95 0e7e 2847     		BX WP  
  96              	
  97              		.p2align 2 
  98              	
  99              	// compile "BX 	R8" 
 100              	// this is the only way 
 101              	// a colon defintion in RAM 
 102              	// can jump to NEST
 103              	// R8 is initialized to NEST address 
 104              	// and must be preserved   
 105              	COMPI_NEST:
 106 0e80 04F13C01 		add T1,UP,#USER_CTOP 
 107 0e84 0968     		ldr T1,[T1]
 108 0e86 44F25072 		mov T2,#0x4700+(10<<3)
 109 0e8a 21F8022B 		strh T2,[T1],#2
 110 0e8e 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 111 0e92 21F8022B 		strh T2,[T1],#2 
 112 0e96 04F13C02 		add T2,UP,#USER_CTOP 
 113 0e9a 1160     		str T1,[T2]
 114 0e9c E8E7     		_NEXT  
 115              	
 116              	
 117              	// RANDOM ( n+ -- {0..n+ - 1} )
 118              	// return pseudo random number 
 119              	// REF: https://en.wikipedia.org/wiki/Xorshift
 120              	
ARM GAS  forth.s 			page 52


 121 0e9e B20C0000 		.word LINK 
 122 0ea2 06       	_RAND: .byte 6
 123 0ea3 52414E44 		.ascii "RANDOM"
 123      4F4D
 124 0ea9 0000BF   		.p2align 2 
 125              	RAND:
 126 0eac 504700BF 		_NEST
 127 0eb0 A1130000 		_ADR ABSS   
 128 0eb4 E1140000 		_ADR SEED 
 129 0eb8 69100000 		_ADR AT 
 130 0ebc 15110000 		_ADR DUPP 
 131 0ec0 E10F0000 		_DOLIT 13
 131      0D000000 
 132 0ec8 C9110000 		_ADR LSHIFT 
 133 0ecc 81110000 		_ADR XORR  
 134 0ed0 15110000 		_ADR DUPP 
 135 0ed4 E10F0000 		_DOLIT 17 
 135      11000000 
 136 0edc B1110000 		_ADR RSHIFT 
 137 0ee0 81110000 		_ADR XORR 
 138 0ee4 15110000 		_ADR DUPP
 139 0ee8 E10F0000 		_DOLIT 5 
 139      05000000 
 140 0ef0 C9110000 		_ADR LSHIFT 
 141 0ef4 81110000 		_ADR XORR  
 142 0ef8 15110000 		_ADR DUPP 
 143 0efc E1140000 		_ADR SEED 
 144 0f00 55100000 		_ADR STORE 
 145 0f04 E10F0000 		_DOLIT 0x7FFFFFFF
 145      FFFFFF7F 
 146 0f0c 59110000 		_ADR ANDD 
 147 0f10 25110000 		_ADR SWAP 
 148 0f14 45170000 		_ADR MODD 
 149 0f18 770E0000 		_UNNEST 
 150              	
 151              	
 152              	// PAUSE ( u -- ) 
 153              	// suspend execution for u milliseconds
 154 0f1c A20E0000 		.word _RAND
 155 0f20 05       	_PAUSE: .byte 5
 156 0f21 50415553 		.ascii "PAUSE"
 156      45
 157 0f26 00BF     		.p2align 2
 158              	PAUSE:
 159 0f28 504700BF 		_NEST 
 160 0f2c 09150000 		_ADR TIMER 
 161 0f30 55100000 		_ADR STORE 
 162              	PAUSE_LOOP:
 163 0f34 09150000 		_ADR TIMER 
 164 0f38 69100000 		_ADR AT 
 165 0f3c 23100000 		_QBRAN PAUSE_EXIT 
 165      4C0F0000 
 166 0f44 37100000 		_BRAN PAUSE_LOOP 
 166      340F0000 
 167              	PAUSE_EXIT: 		
 168 0f4c 770E0000 		_UNNEST 
 169              	
ARM GAS  forth.s 			page 53


 170              	//  ULED ( T|F -- )
 171              	// control user LED, -1 ON, 0 OFF  
 172 0f50 200F0000 		.word _PAUSE
 173 0f54 04       	_ULED: .byte 4
 174 0f55 554C4544 		.ascii "ULED"
 175 0f59 0000BF   		.p2align 2
 176              		.type ULED, %function 
 177              	ULED:
 178 0f5c 4FF40050 		mov T0,#(1<<LED_PIN)
 179 0f60 4FF40061 		_MOV32 T1,LED_GPIO 
 179      C4F20201 
 180 0f68 3600     		movs TOS,TOS 
 181 0f6a 57F8046B 		_POP
 182 0f6e 03D0     		beq ULED_OFF
 183 0f70 4FEA0040 		lsl T0,#16 
 184 0f74 8861     		str T0,[T1,#GPIO_BSRR]
 185 0f76 7BE7     		_NEXT 
 186              	ULED_OFF:
 187 0f78 8861     		str T0,[T1,#GPIO_BSRR]
 188 0f7a 79E7     		_NEXT    
 189              	
 190              	//    ?KEY	 ( -- c T | F )
 191              	// 	Return input character and true, or a false if no input.
 192 0f7c 540F0000 		.word	_ULED
 193 0f80 04       	_QRX:	.byte   4
 194 0f81 3F4B4559 		.ascii "?KEY"
 195 0f85 0000BF   		.p2align 2 
 196              	QKEY:
 197              	QRX: 
 198 0f88 47F8046D 		_PUSH
 199 0f8c A06D     		ldr T0,[UP,#RX_TAIL] 
 200 0f8e 616D     		ldr T1,[UP,#RX_HEAD]
 201 0f90 90EA0106 		eors TOS,T0,T1 
 202 0f94 0CD0     		beq 1f
 203 0f96 04F14400 		add T0,UP,#RX_QUEUE 
 204 0f9a 0844     		add T0,T1 
 205 0f9c 0678     		ldrb TOS,[T0]
 206 0f9e 01F10101 		add T1,#1 
 207 0fa2 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 208 0fa6 6165     		str T1,[UP,#RX_HEAD]
 209 0fa8 47F8046D 		_PUSH 
 210 0fac 4FF0FF36 		mov TOS,#-1
 211 0fb0 5EE7     	1:	_NEXT 
 212              	
 213              	//    TX!	 ( c -- )
 214              	// 	Send character c to the output device.
 215              	
 216 0fb2 800F0000 		.word	_QRX
 217 0fb6 04       	_TXSTO:	.byte 4
 218 0fb7 454D4954 		.ascii "EMIT"
 219 0fbb 00       		.p2align 2 	
 220              	TXSTO:
 221              	EMIT:
 222              	TECHO:
 223 0fbc 4FF48055 		_MOV32 WP,UART 
 223      C4F20105 
 224 0fc4 2868     	1:  ldr T0,[WP,#USART_SR]
ARM GAS  forth.s 			page 54


 225 0fc6 10F0800F 	    tst T0,#0x80 // TXE flag 
 226 0fca FBD0     		beq 1b 
 227 0fcc 2E71     		strb TOS,[WP,#USART_DR]	 
 228 0fce 57F8046B 		_POP
 229 0fd2 4DE7     		_NEXT 
 230              		
 231              	/***************
 232              	//  The kernel
 233              	***************/
 234              	
 235              	//    NOP	( -- )
 236              	// 	do nothing.
 237              	
 238 0fd4 B60F0000 		.word	_TXSTO
 239 0fd8 03       	_NOP:	.byte   3
 240 0fd9 4E4F50   		.ascii "NOP"
 241              		.p2align 2 	
 242              	NOP:
 243 0fdc 48E7     		_NEXT 
 244              	 
 245              	
 246              	//    doLIT	( -- w )
 247              	// 	Push an inline literal.
 248              	
 249              	// 	.word	_NOP
 250              	// _LIT	.byte   COMPO+5
 251              	// 	.ascii "doLIT"
 252 0fde 00BF     	 	.p2align 2 	
 253              	DOLIT:
 254 0fe0 47F8046D 		_PUSH				//  store TOS on data stack
 255 0fe4 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 256 0fe8 42E7     		_NEXT 
 257              	
 258              	//    EXECUTE	( ca -- )
 259              	// 	Execute the word at ca.
 260              	
 261 0fea D80F0000 		.word	_NOP
 262 0fee 07       	_EXECU:	.byte   7
 263 0fef 45584543 		.ascii "EXECUTE"
 263      555445
 264 0ff6 00BF     		.p2align 2 	
 265              	EXECU: 
 266 0ff8 46F00105 		ORR	WP,TOS,#1 
 267 0ffc 57F8046B 		_POP
 268 1000 2847     		BX WP 
 269 1002 35E7     		_NEXT 
 270              	
 271              	//    next	( -- ) counter on R:
 272              	// 	Run time code for the single index loop.
 273              	// 	: next ( -- ) \ hilevel model
 274              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 275              	
 276              	// 	.word	_EXECU
 277              	// _DONXT	.byte   COMPO+4
 278              	// 	.ascii "next"
 279              	// 	.p2align 2 	
 280              	DONXT:
ARM GAS  forth.s 			page 55


 281 1004 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 282 1008 22B9     		CBNZ T2,NEXT1 
 283              		/* loop done */
 284 100a 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 285 100e 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 286 1012 2DE7     		_NEXT
 287              	NEXT1:
 288              		/* decrement loop counter */
 289 1014 A2F10102 		SUB	T2,T2,#1
 290 1018 C8F80020 		STR	T2,[RSP]
 291 101c DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 292 1020 26E7     		_NEXT 
 293              	
 294              	//    ?branch	( f -- )
 295              	// 	Branch if flag is zero.
 296              	
 297              	// 	.word	_DONXT
 298              	// _QBRAN	.byte   COMPO+7
 299              	// 	.ascii "?branch"
 300              	// 	.p2align 2 	
 301              	QBRAN:
 302 1022 3600     		MOVS	TOS,TOS
 303 1024 57F8046B 		_POP
 304 1028 02D1     		BNE	QBRAN1
 305 102a DCF800C0 		LDR	IP,[IP]
 306 102e 1FE7     		_NEXT
 307              	QBRAN1:
 308 1030 0CF1040C 	 	ADD	IP,IP,#4
 309 1034 1CE7     		_NEXT
 310              	
 311              	//    branch	( -- )
 312              	// 	Branch to an inline address.
 313              	
 314              	// 	.word	_QBRAN
 315              	// _BRAN	.byte   COMPO+6
 316              	// 	.ascii "branch"
 317              	// 	.p2align 2 	
 318              	BRAN:
 319 1036 DCF800C0 		LDR	IP,[IP]
 320 103a 19E7     		_NEXT
 321              	
 322              	//    EXIT	(  -- )
 323              	// 	Exit the currently executing command.
 324              	
 325 103c EE0F0000 		.word	_EXECU
 326 1040 04       	_EXIT:	.byte   4
 327 1041 45584954 		.ascii "EXIT"
 328 1045 0000BF   		.p2align 2 	
 329              	EXIT:
 330 1048 770E0000 		_UNNEST
 331              	
 332              	//    !	   ( w a -- )
 333              	// 	Pop the data stack to memory.
 334              	
 335 104c 40100000 		.word	_EXIT
 336 1050 01       	_STORE:	.byte   1
 337 1051 21       		.ascii "!"
ARM GAS  forth.s 			page 56


 338 1052 00BF     		.p2align 2 	
 339              	STORE:
 340 1054 57F8045B 		LDR	WP,[DSP],#4
 341 1058 3560     		STR	WP,[TOS]
 342 105a 57F8046B 		_POP
 343 105e 07E7     		_NEXT 
 344              	
 345              	//    @	   ( a -- w )
 346              	// 	Push memory location to the data stack.
 347              	
 348 1060 50100000 		.word	_STORE
 349 1064 01       	_AT:	.byte   1
 350 1065 40       		.ascii "@"
 351 1066 00BF     		.p2align 2 	
 352              	AT:
 353 1068 3668     		LDR	TOS,[TOS]
 354 106a 01E7     		_NEXT 
 355              	
 356              	//    C!	  ( c b -- )
 357              	// 	Pop the data stack to byte memory.
 358              	
 359 106c 64100000 		.word	_AT
 360 1070 02       	_CSTOR:	.byte   2
 361 1071 4321     		.ascii "C!"
 362 1073 00       		.p2align 2 	
 363              	CSTOR:
 364 1074 57F8045B 		LDR	WP,[DSP],#4
 365 1078 3570     		STRB WP,[TOS]
 366 107a 57F8046B 		_POP
 367 107e F7E6     		_NEXT
 368              	
 369              	//    C@	  ( b -- c )
 370              	// 	Push byte memory location to the data stack.
 371              	
 372 1080 70100000 		.word	_CSTOR
 373 1084 02       	_CAT:	.byte   2
 374 1085 4340     		.ascii "C@"
 375 1087 00       		.p2align 2 	
 376              	CAT:
 377 1088 3678     		LDRB	TOS,[TOS]
 378 108a F1E6     		_NEXT 
 379              	
 380              	//    R>	  ( -- w )
 381              	// 	Pop the return stack to the data stack.
 382              	
 383 108c 84100000 		.word	_CAT
 384 1090 02       	_RFROM:	.byte   2
 385 1091 523E     		.ascii "R>"
 386 1093 00       		.p2align 2 	
 387              	RFROM:
 388 1094 47F8046D 		_PUSH
 389 1098 58F8046B 		LDR	TOS,[RSP],#4
 390 109c E8E6     		_NEXT 
 391              	
 392              	//    R@	  ( -- w )
 393              	// 	Copy top of return stack to the data stack.
 394              	
ARM GAS  forth.s 			page 57


 395 109e 90100000 		.word	_RFROM
 396 10a2 02       	_RAT:	.byte   2
 397 10a3 5240     		.ascii "R@"
 398 10a5 0000BF   		.p2align 2 	
 399              	RAT:
 400 10a8 47F8046D 		_PUSH
 401 10ac D8F80060 		LDR	TOS,[RSP]
 402 10b0 DEE6     		_NEXT 
 403              	
 404              	//    >R	  ( w -- )
 405              	// 	Push the data stack to the return stack.
 406              	
 407 10b2 A2100000 		.word	_RAT
 408 10b6 42       	_TOR:	.byte   COMPO+2
 409 10b7 3E52     		.ascii ">R"
 410 10b9 0000BF   		.p2align 2 	
 411              	TOR:
 412 10bc 48F8046D 		STR	TOS,[RSP,#-4]!
 413 10c0 57F8046B 		_POP
 414 10c4 D4E6     		_NEXT
 415              	
 416              	//	RP! ( u -- )
 417              	// initialize RPP with u 
 418 10c6 B6100000 		.word _TOR 
 419 10ca 03       	_RPSTOR: .byte 3 
 420 10cb 525021   		.ascii "RP!" 
 421 10ce 00BF     		.p2align 2 
 422              	RPSTOR:
 423 10d0 B046     		MOV RSP,TOS 
 424 10d2 57F8046B 		_POP  
 425 10d6 CBE6     		_NEXT 
 426              	
 427              	
 428              	//	SP! ( u -- )
 429              	// initialize SPP with u 
 430 10d8 CA100000 		.word _RPSTOR  
 431 10dc 03       	_SPSTOR: .byte 3 
 432 10dd 535021   		.ascii "SP!" 
 433              		.p2align 2 
 434              	SPSTOR:
 435 10e0 3746     		MOV DSP,TOS 
 436 10e2 86EA0606 		EOR TOS,TOS,TOS 
 437 10e6 C3E6     		_NEXT 
 438              	
 439              	//    SP@	 ( -- a )
 440              	// 	Push the current data stack pointer.
 441              	
 442 10e8 DC100000 		.word	_SPSTOR
 443 10ec 03       	_SPAT:	.byte   3
 444 10ed 535040   		.ascii "SP@"
 445              		.p2align 2 	
 446              	SPAT:
 447 10f0 47F8046D 		_PUSH
 448 10f4 3E46     		MOV	TOS,DSP
 449 10f6 BBE6     		_NEXT
 450              	
 451              	//    DROP	( w -- )
ARM GAS  forth.s 			page 58


 452              	// 	Discard top stack item.
 453              	
 454 10f8 EC100000 		.word	_SPAT
 455 10fc 04       	_DROP:	.byte   4
 456 10fd 44524F50 		.ascii "DROP"
 457 1101 0000BF   		.p2align 2 	
 458              	DROP:
 459 1104 57F8046B 		_POP
 460 1108 B2E6     		_NEXT 
 461              	
 462              	//    DUP	 ( w -- w w )
 463              	// 	Duplicate the top stack item.
 464              	
 465 110a FC100000 		.word	_DROP
 466 110e 03       	_DUPP:	.byte   3
 467 110f 445550   		.ascii "DUP"
 468 1112 00BF     		.p2align 2 	
 469              	DUPP:
 470 1114 47F8046D 		_PUSH
 471 1118 AAE6     		_NEXT 
 472              	
 473              	//    SWAP	( w1 w2 -- w2 w1 )
 474              	// 	Exchange top two stack items.
 475              	
 476 111a 0E110000 		.word	_DUPP
 477 111e 04       	_SWAP:	.byte   4
 478 111f 53574150 		.ascii "SWAP"
 479 1123 00       		.p2align 2 	
 480              	SWAP:
 481 1124 3D68     		LDR	WP,[DSP]
 482 1126 3E60     		STR	TOS,[DSP]
 483 1128 2E46     		MOV	TOS,WP
 484 112a A1E6     		_NEXT 
 485              	
 486              	//    OVER	( w1 w2 -- w1 w2 w1 )
 487              	// 	Copy second stack item to top.
 488              	
 489 112c 1E110000 		.word	_SWAP
 490 1130 04       	_OVER:	.byte   4
 491 1131 4F564552 		.ascii "OVER"
 492 1135 0000BF   		.p2align 2 	
 493              	OVER:
 494 1138 47F8046D 		_PUSH
 495 113c 7E68     		LDR	TOS,[DSP,#4]
 496 113e 97E6     		_NEXT 
 497              	
 498              	//    0<	  ( n -- t )
 499              	// 	Return true if n is negative.
 500              	
 501 1140 30110000 		.word	_OVER
 502 1144 02       	_ZLESS:	.byte   2
 503 1145 303C     		.ascii "0<"
 504 1147 00       		.p2align 2 	
 505              	ZLESS:
 506              	//	MOV	WP,#0
 507              	//	ADD	TOS,WP,TOS,ASR #32
 508 1148 4FEAE676 		ASR TOS,#31
ARM GAS  forth.s 			page 59


 509 114c 90E6     		_NEXT 
 510              	
 511              	//    AND	 ( w w -- w )
 512              	// 	Bitwise AND.
 513              	
 514 114e 44110000 		.word	_ZLESS
 515 1152 03       	_ANDD:	.byte   3
 516 1153 414E44   		.ascii "AND"
 517 1156 00BF     		.p2align 2 	
 518              	ANDD:
 519 1158 57F8045B 		LDR	WP,[DSP],#4
 520 115c 06EA0506 		AND	TOS,TOS,WP
 521 1160 86E6     		_NEXT 
 522              	
 523              	//    OR	  ( w w -- w )
 524              	// 	Bitwise inclusive OR.
 525              	
 526 1162 52110000 		.word	_ANDD
 527 1166 02       	_ORR:	.byte   2
 528 1167 4F52     		.ascii "OR"
 529 1169 0000BF   		.p2align 2 	
 530              	ORR:
 531 116c 57F8045B 		LDR	WP,[DSP],#4
 532 1170 46EA0506 		ORR	TOS,TOS,WP
 533 1174 7CE6     		_NEXT 
 534              	
 535              	//    XOR	 ( w w -- w )
 536              	// 	Bitwise exclusive OR.
 537              	
 538 1176 66110000 		.word	_ORR
 539 117a 03       	_XORR:	.byte   3
 540 117b 584F52   		.ascii "XOR"
 541 117e 00BF     		.p2align 2 	
 542              	XORR:
 543 1180 57F8045B 		LDR	WP,[DSP],#4
 544 1184 86EA0506 		EOR	TOS,TOS,WP
 545 1188 72E6     		_NEXT 
 546              	
 547              	//    UM+	 ( w w -- w cy )
 548              	// 	Add two numbers, return the sum and carry flag.
 549              	
 550 118a 7A110000 		.word	_XORR
 551 118e 03       	_UPLUS:	.byte   3
 552 118f 554D2B   		.ascii "UM+"
 553 1192 00BF     		.p2align 2 	
 554              	UPLUS:
 555 1194 3D68     		LDR	WP,[DSP]
 556 1196 AD19     		ADDS	WP,WP,TOS
 557 1198 4FF00006 		MOV	TOS,#0
 558 119c 46F10006 		ADC	TOS,TOS,#0
 559 11a0 3D60     		STR	WP,[DSP]
 560 11a2 65E6     		_NEXT 
 561              	
 562              	//    RSHIFT	 ( w # -- w )
 563              	// 	arithmetic Right shift # bits.
 564              	
 565 11a4 8E110000 		.word	_UPLUS
ARM GAS  forth.s 			page 60


 566 11a8 06       	_RSHIFT:	.byte   6
 567 11a9 52534849 		.ascii "RSHIFT"
 567      4654
 568 11af 00       		.p2align 2 	
 569              	RSHIFT:
 570 11b0 57F8045B 		LDR	WP,[DSP],#4
 571 11b4 45FA06F6 		MOV	TOS,WP,ASR TOS
 572 11b8 5AE6     		_NEXT 
 573              	
 574              	//    LSHIFT	 ( w # -- w )
 575              	// 	Right shift # bits.
 576              	
 577 11ba A8110000 		.word	_RSHIFT
 578 11be 06       	_LSHIFT:	.byte   6
 579 11bf 4C534849 		.ascii "LSHIFT"
 579      4654
 580 11c5 0000BF   		.p2align 2 	
 581              	LSHIFT:
 582 11c8 57F8045B 		LDR	WP,[DSP],#4
 583 11cc 05FA06F6 		MOV	TOS,WP,LSL TOS
 584 11d0 4EE6     		_NEXT
 585              	
 586              	//    +	 ( w w -- w )
 587              	// 	Add.
 588              	
 589 11d2 BE110000 		.word	_LSHIFT
 590 11d6 01       	_PLUS:	.byte   1
 591 11d7 2B       		.ascii "+"
 592              		.p2align 2 	
 593              	PLUS:
 594 11d8 57F8045B 		LDR	WP,[DSP],#4
 595 11dc 2E44     		ADD	TOS,TOS,WP
 596 11de 47E6     		_NEXT 
 597              	
 598              	//    -	 ( w w -- w )
 599              	// 	Subtract.
 600              	
 601 11e0 D6110000 		.word	_PLUS
 602 11e4 01       	_SUBB:	.byte   1
 603 11e5 2D       		.ascii "-"
 604 11e6 00BF     		.p2align 2 	
 605              	SUBB:
 606 11e8 57F8045B 		LDR	WP,[DSP],#4
 607 11ec C6EB0506 		RSB	TOS,TOS,WP
 608 11f0 3EE6     		_NEXT 
 609              	
 610              	//    *	 ( w w -- w )
 611              	// 	Multiply.
 612              	
 613 11f2 E4110000 		.word	_SUBB
 614 11f6 01       	_STAR:	.byte   1
 615 11f7 2A       		.ascii "*"
 616              		.p2align 2 	
 617              	STAR:
 618 11f8 57F8045B 		LDR	WP,[DSP],#4
 619 11fc 05FB06F6 		MUL	TOS,WP,TOS
 620 1200 36E6     		_NEXT 
ARM GAS  forth.s 			page 61


 621              	
 622              	//    UM*	 ( w w -- ud )
 623              	// 	Unsigned multiply.
 624              	
 625 1202 F6110000 		.word	_STAR
 626 1206 03       	_UMSTA:	.byte   3
 627 1207 554D2A   		.ascii "UM*"
 628 120a 00BF     		.p2align 2 	
 629              	UMSTA:
 630 120c 3D68     		LDR	WP,[DSP]
 631 120e A6FB0523 		UMULL	T2,T3,TOS,WP
 632 1212 3A60     		STR	T2,[DSP]
 633 1214 1E46     		MOV	TOS,T3
 634 1216 2BE6     		_NEXT 
 635              	
 636              	//    M*	 ( w w -- d )
 637              	// 	signed multiply.
 638              	
 639 1218 06120000 		.word	_UMSTA
 640 121c 02       	_MSTAR:	.byte   2
 641 121d 4D2A     		.ascii "M*"
 642 121f 00       		.p2align 2 	
 643              	MSTAR:
 644 1220 3D68     		LDR	WP,[DSP]
 645 1222 86FB0523 		SMULL	T2,T3,TOS,WP
 646 1226 3A60     		STR	T2,[DSP]
 647 1228 1E46     		MOV	TOS,T3
 648 122a 21E6     		_NEXT 
 649              	
 650              	//    1+	 ( w -- w+1 )
 651              	// 	Add 1.
 652              	
 653 122c 1C120000 		.word	_MSTAR
 654 1230 02       	_ONEP:	.byte   2
 655 1231 312B     		.ascii "1+"
 656 1233 00       		.p2align 2 	
 657              	ONEP:
 658 1234 06F10106 		ADD	TOS,TOS,#1
 659 1238 1AE6     		_NEXT 
 660              	
 661              	//    1-	 ( w -- w-1 )
 662              	// 	Subtract 1.
 663              	
 664 123a 30120000 		.word	_ONEP
 665 123e 02       	_ONEM:	.byte   2
 666 123f 312D     		.ascii "1-"
 667 1241 0000BF   		.p2align 2 	
 668              	ONEM:
 669 1244 A6F10106 		SUB	TOS,TOS,#1
 670 1248 12E6     		_NEXT 
 671              	
 672              	//    2+	 ( w -- w+2 )
 673              	// 	Add 1.
 674              	
 675 124a 3E120000 		.word	_ONEM
 676 124e 02       	_TWOP:	.byte   2
 677 124f 322B     		.ascii "2+"
ARM GAS  forth.s 			page 62


 678 1251 0000BF   		.p2align 2 	
 679              	TWOP:
 680 1254 06F10206 		ADD	TOS,TOS,#2
 681 1258 0AE6     		_NEXT
 682              	
 683              	//    2-	 ( w -- w-2 )
 684              	// 	Subtract 2.
 685              	
 686 125a 4E120000 		.word	_TWOP
 687 125e 02       	_TWOM:	.byte   2
 688 125f 322D     		.ascii "2-"
 689 1261 0000BF   		.p2align 2 	
 690              	TWOM:
 691 1264 A6F10206 		SUB	TOS,TOS,#2
 692 1268 02E6     		_NEXT
 693              	
 694              	//    CELL+	( w -- w+4 )
 695              	// 	Add CELLL.
 696              	
 697 126a 5E120000 		.word	_TWOM
 698 126e 05       	_CELLP:	.byte   5
 699 126f 43454C4C 		.ascii "CELL+"
 699      2B
 700              		.p2align 2 	
 701              	CELLP:
 702 1274 06F10406 		ADD	TOS,TOS,#CELLL
 703 1278 FAE5     		_NEXT
 704              	
 705              	//    CELL-	( w -- w-4 )
 706              	// 	Subtract CELLL.
 707              	
 708 127a 6E120000 		.word	_CELLP
 709 127e 05       	_CELLM:	.byte   5
 710 127f 43454C4C 		.ascii "CELL-"
 710      2D
 711              		.p2align 2 	
 712              	CELLM:
 713 1284 A6F10406 		SUB	TOS,TOS,#CELLL
 714 1288 F2E5     		_NEXT
 715              	 
 716              	//    BL	( -- 32 )
 717              	// 	Blank (ASCII space).
 718              	
 719 128a 7E120000 		.word	_CELLM
 720 128e 02       	_BLANK:	.byte   2
 721 128f 424C     		.ascii "BL"
 722 1291 0000BF   		.p2align 2 	
 723              	BLANK:
 724 1294 47F8046D 		_PUSH
 725 1298 4FF02006 		MOV	TOS,#32
 726 129c E8E5     		_NEXT 
 727              	
 728              	//    CELLS	( w -- w*4 )
 729              	// 	Multiply 4.
 730              	
 731 129e 8E120000 		.word	_BLANK
 732 12a2 05       	_CELLS:	.byte   5
ARM GAS  forth.s 			page 63


 733 12a3 43454C4C 		.ascii "CELLS"
 733      53
 734              		.p2align 2 	
 735              	CELLS:
 736 12a8 4FEA8606 		MOV	TOS,TOS,LSL#2
 737 12ac E0E5     		_NEXT
 738              	
 739              	//    CELL/	( w -- w/4 )
 740              	// 	Divide by 4.
 741              	
 742 12ae A2120000 		.word	_CELLS
 743 12b2 05       	_CELLSL:	.byte   5
 744 12b3 43454C4C 		.ascii "CELL/"
 744      2F
 745              		.p2align 2 	
 746              	CELLSL:
 747 12b8 4FEAA606 		MOV	TOS,TOS,ASR#2
 748 12bc D8E5     		_NEXT
 749              	
 750              	//    2*	( w -- w*2 )
 751              	// 	Multiply 2.
 752              	
 753 12be B2120000 		.word	_CELLSL
 754 12c2 02       	_TWOST:	.byte   2
 755 12c3 322A     		.ascii "2*"
 756 12c5 0000BF   		.p2align 2 	
 757              	TWOST:
 758 12c8 4FEA4606 		MOV	TOS,TOS,LSL#1
 759 12cc D0E5     		_NEXT
 760              	
 761              	//    2/	( w -- w/2 )
 762              	// 	Divide by 2.
 763              	
 764 12ce C2120000 		.word	_TWOST
 765 12d2 02       	_TWOSL:	.byte   2
 766 12d3 322F     		.ascii "2/"
 767 12d5 0000BF   		.p2align 2 	
 768              	TWOSL:
 769 12d8 4FEA6606 		MOV	TOS,TOS,ASR#1
 770 12dc C8E5     		_NEXT
 771              	
 772              	//    ?DUP	( w -- w w | 0 )
 773              	// 	Conditional duplicate.
 774              	
 775 12de D2120000 		.word	_TWOSL
 776 12e2 04       	_QDUP:	.byte   4
 777 12e3 3F445550 		.ascii "?DUP"
 778 12e7 00       		.p2align 2 	
 779              	QDUP:
 780 12e8 3500     		MOVS	WP,TOS
 781 12ea 18BF     		IT NE 
 782 12ec 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 783 12f0 BEE5     		_NEXT
 784              	
 785              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 786              	// 	Rotate top 3 items.
 787              	
ARM GAS  forth.s 			page 64


 788 12f2 E2120000 		.word	_QDUP
 789 12f6 03       	_ROT:	.byte   3
 790 12f7 524F54   		.ascii "ROT"
 791 12fa 00BF     		.p2align 2 	
 792              	ROT:
 793 12fc 3868     		LDR	T0,[DSP]  // w2 
 794 12fe 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 795 1300 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 796 1302 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 797 1304 B4E5     		_NEXT
 798              	
 799              	// -ROT ( w1 w2 w3 -- w3 w1 w2 )
 800              	// left rotate top 3 elements 
 801 1306 F6120000 		.word _ROT 
 802 130a 04       	_NROT: .byte 4 
 803 130b 2D524F54 		.ascii "-ROT"
 804 130f 00       		.p2align 2 
 805              	NROT:
 806 1310 7868     		LDR T0,[DSP,#4]
 807 1312 7E60     		STR TOS,[DSP,#4]	
 808 1314 3E68     		LDR TOS,[DSP]
 809 1316 3860     		STR T0,[DSP]
 810 1318 AAE5     		_NEXT 
 811              	
 812              	//    2DROP	( w1 w2 -- )
 813              	// 	Drop top 2 items.
 814              	
 815 131a 0A130000 		.word	_NROT
 816 131e 05       	_DDROP:	.byte   5
 817 131f 3244524F 		.ascii "2DROP"
 817      50
 818              		.p2align 2 	
 819              	DDROP:
 820 1324 57F8046B 		_POP
 821 1328 57F8046B 		_POP
 822 132c A0E5     		_NEXT 
 823              	
 824 132e 1E130000 		.word _DDROP 
 825 1332 05       	_TDROP: .byte 5 
 826 1333 3344524F 		.ascii "3DROP"
 826      50
 827              		.p2align 2
 828              	TDROP:
 829 1338 07F10807 	    add DSP,#8 
 830 133c 57F8046B 	    _POP 
 831 1340 96E5     	    _NEXT 
 832              	
 833              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 834              	// 	Duplicate top 2 items.
 835              	
 836 1342 32130000 		.word	_TDROP
 837 1346 04       	_DDUP:	.byte   4
 838 1347 32445550 		.ascii "2DUP"
 839 134b 00       		.p2align 2 	
 840              	DDUP:
 841 134c 3868     		LDR	T0,[DSP] // w1
 842 134e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
ARM GAS  forth.s 			page 65


 843 1352 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 844 1356 8BE5     		_NEXT
 845              	
 846              	//    D+	( d1 d2 -- d3 )
 847              	// 	Add top 2 double numbers.
 848              	
 849 1358 46130000 		.word	_DDUP
 850 135c 02       	_DPLUS:	.byte   2
 851 135d 442B     		.ascii "D+"
 852 135f 00       		.p2align 2 	
 853              	DPLUS:
 854 1360 57F8045B 		LDR	WP,[DSP],#4
 855 1364 57F8042B 		LDR	T2,[DSP],#4
 856 1368 3B68     		LDR	T3,[DSP]
 857 136a ED18     		ADDS	WP,WP,T3
 858 136c 3D60     		STR	WP,[DSP]
 859 136e 46EB0206 		ADC	TOS,TOS,T2
 860 1372 7DE5     		_NEXT
 861              	
 862              	//    NOT	 ( w -- !w )
 863              	// 	1"s complement.
 864              	
 865 1374 5C130000 		.word	_DPLUS
 866 1378 03       	_INVER:	.byte   3
 867 1379 4E4F54   		.ascii "NOT"
 868              		.p2align 2 	
 869              	INVER:
 870 137c 6FEA0606 		MVN	TOS,TOS
 871 1380 76E5     		_NEXT
 872              	
 873              	//    NEGATE	( w -- -w )
 874              	// 	2's complement.
 875              	
 876 1382 78130000 		.word	_INVER
 877 1386 06       	_NEGAT:	.byte   6
 878 1387 4E454741 		.ascii "NEGATE"
 878      5445
 879 138d 0000BF   		.p2align 2 	
 880              	NEGAT:
 881 1390 C6F10006 		RSB	TOS,TOS,#0
 882 1394 6CE5     		_NEXT
 883              	
 884              	//    ABS	 ( w -- |w| )
 885              	// 	Absolute.
 886              	
 887 1396 86130000 		.word	_NEGAT
 888 139a 03       	_ABSS:	.byte   3
 889 139b 414253   		.ascii "ABS"
 890 139e 00BF     		.p2align 2 	
 891              	ABSS:
 892 13a0 16F0004F 		TST	TOS,#0x80000000
 893 13a4 18BF     		IT NE
 894 13a6 7642     	    RSBNE   TOS,TOS,#0
 895 13a8 62E5     		_NEXT
 896              	
 897              	//  0= ( w -- f )
 898              	// TOS==0?
ARM GAS  forth.s 			page 66


 899              	
 900 13aa 9A130000 		.word _ABSS
 901 13ae 02       	_ZEQUAL: .byte 2
 902 13af 303D     		.ascii "0="
 903 13b1 0000BF   		.p2align 2
 904              	ZEQUAL:
 905 13b4 16B9     		cbnz TOS,1f
 906 13b6 4FF0FF36 		mov TOS,#-1
 907 13ba 59E5     		_NEXT 
 908 13bc 86EA0606 	1:  eor TOS,TOS,TOS  
 909 13c0 56E5     		_NEXT 	
 910              	
 911              	//    =	 ( w w -- t )
 912              	// 	Equal?
 913              	
 914 13c2 AE130000 		.word	_ZEQUAL
 915 13c6 01       	_EQUAL:	.byte   1
 916 13c7 3D       		.ascii "="
 917              		.p2align 2 	
 918              	EQUAL:
 919 13c8 57F8045B 		LDR	WP,[DSP],#4
 920 13cc AE42     		CMP	TOS,WP
 921 13ce 0CBF     		ITE EQ 
 922 13d0 6FF00006 	    MVNEQ	TOS,#0
 923 13d4 0026     		MOVNE	TOS,#0
 924 13d6 4BE5     		_NEXT
 925              	
 926              	//    U<	 ( w w -- t )
 927              	// 	Unsigned less?
 928              	
 929 13d8 C6130000 		.word	_EQUAL
 930 13dc 02       	_ULESS:	.byte   2
 931 13dd 553C     		.ascii "U<"
 932 13df 00       		.p2align 2 	
 933              	ULESS:
 934 13e0 57F8045B 		LDR	WP,[DSP],#4
 935 13e4 B542     		CMP	WP,TOS
 936 13e6 34BF     		ITE CC 
 937 13e8 6FF00006 		MVNCC	TOS,#0
 938 13ec 0026     		MOVCS	TOS,#0
 939 13ee 3FE5     		_NEXT
 940              	
 941              	//    <	( w w -- t )
 942              	// 	Less?
 943              	
 944 13f0 DC130000 		.word	_ULESS
 945 13f4 01       	_LESS:	.byte   1
 946 13f5 3C       		.ascii "<"
 947 13f6 00BF     		.p2align 2 	
 948              	LESS:
 949 13f8 57F8045B 		LDR	WP,[DSP],#4
 950 13fc B542     		CMP	WP,TOS
 951 13fe B4BF     	    ITE LT
 952 1400 6FF00006 		MVNLT	TOS,#0
 953 1404 0026     		MOVGE	TOS,#0
 954 1406 33E5     		_NEXT 
 955              	
ARM GAS  forth.s 			page 67


 956              	//    >	( w w -- t )
 957              	// 	greater?
 958              	
 959 1408 F4130000 		.word	_LESS
 960 140c 01       	_GREAT:	.byte   1
 961 140d 3E       		.ascii ">"
 962 140e 00BF     		.p2align 2 	
 963              	GREAT:
 964 1410 57F8045B 		LDR	WP,[DSP],#4
 965 1414 B542     		CMP	WP,TOS
 966 1416 CCBF     		ITE GT
 967 1418 6FF00006 	    MVNGT	TOS,#0
 968 141c 0026     		MOVLE	TOS,#0
 969 141e 27E5     		_NEXT
 970              	
 971              	//    MAX	 ( w w -- max )
 972              	// 	Leave maximum.
 973              	
 974 1420 0C140000 		.word	_GREAT
 975 1424 03       	_MAX:	.byte   3
 976 1425 4D4158   		.ascii "MAX"
 977              		.p2align 2 	
 978              	MAX:
 979 1428 57F8045B 		LDR	WP,[DSP],#4
 980 142c B542     		CMP	WP,TOS
 981 142e C8BF     		IT GT 
 982 1430 2E46     		MOVGT	TOS,WP
 983 1432 1DE5     		_NEXT 
 984              	
 985              	//    MIN	 ( w w -- min )
 986              	// 	Leave minimum.
 987              	
 988 1434 24140000 		.word	_MAX
 989 1438 03       	_MIN:	.byte   3
 990 1439 4D494E   		.ascii "MIN"
 991              		.p2align 2 	
 992              	MIN:
 993 143c 57F8045B 		LDR	WP,[DSP],#4
 994 1440 B542     		CMP	WP,TOS
 995 1442 B8BF     		IT LT
 996 1444 2E46     		MOVLT	TOS,WP
 997 1446 13E5     		_NEXT
 998              	
 999              	//    +!	 ( w a -- )
 1000              	// 	Add to memory.
 1001              	
 1002 1448 38140000 		.word	_MIN
 1003 144c 02       	_PSTOR:	.byte   2
 1004 144d 2B21     		.ascii "+!"
 1005 144f 00       		.p2align 2 	
 1006              	PSTOR:
 1007 1450 57F8045B 		LDR	WP,[DSP],#4
 1008 1454 3268     		LDR	T2,[TOS]
 1009 1456 2A44     		ADD	T2,T2,WP
 1010 1458 3260     		STR	T2,[TOS]
 1011 145a 57F8046B 		_POP
 1012 145e 07E5     		_NEXT
ARM GAS  forth.s 			page 68


 1013              	
 1014              	//    2!	 ( d a -- )
 1015              	// 	Store double number.
 1016              	
 1017 1460 4C140000 		.word	_PSTOR
 1018 1464 02       	_DSTOR:	.byte   2
 1019 1465 3221     		.ascii "2!"
 1020 1467 00       		.p2align 2 	
 1021              	DSTOR:
 1022 1468 57F8045B 		LDR	WP,[DSP],#4
 1023 146c 57F8042B 		LDR	T2,[DSP],#4
 1024 1470 46F8045B 		STR	WP,[TOS],#4
 1025 1474 3260     		STR	T2,[TOS]
 1026 1476 57F8046B 		_POP
 1027 147a F9E4     		_NEXT
 1028              	
 1029              	//    2@	 ( a -- d )
 1030              	// 	Fetch double number.
 1031              	
 1032 147c 64140000 		.word	_DSTOR
 1033 1480 02       	_DAT:	.byte   2
 1034 1481 3240     		.ascii "2@"
 1035 1483 00       		.p2align 2 	
 1036              	DAT:
 1037 1484 7568     		LDR	WP,[TOS,#4]
 1038 1486 47F8045D 		STR	WP,[DSP,#-4]!
 1039 148a 3668     		LDR	TOS,[TOS]
 1040 148c F0E4     		_NEXT
 1041              	
 1042              	//    COUNT	( b -- b+1 c )
 1043              	// 	Fetch length of string.
 1044              	
 1045 148e 80140000 		.word	_DAT
 1046 1492 05       	_COUNT:	.byte   5
 1047 1493 434F554E 		.ascii "COUNT"
 1047      54
 1048              		.p2align 2 	
 1049              	COUNT:
 1050 1498 16F8015B 		LDRB	WP,[TOS],#1
 1051 149c 47F8046D 		_PUSH
 1052 14a0 2E46     		MOV	TOS,WP
 1053 14a2 E5E4     		_NEXT
 1054              	
 1055              	//    DNEGATE	( d -- -d )
 1056              	// 	Negate double number.
 1057              	
 1058 14a4 92140000 		.word	_COUNT
 1059 14a8 07       	_DNEGA:	.byte   7
 1060 14a9 444E4547 		.ascii "DNEGATE"
 1060      415445
 1061              		.p2align 2 	
 1062              	DNEGA:
 1063 14b0 3D68     		LDR	WP,[DSP]
 1064 14b2 A2EB0202 		SUB	T2,T2,T2
 1065 14b6 551B     		SUBS WP,T2,WP
 1066 14b8 62EB0606 		SBC	TOS,T2,TOS
 1067 14bc 3D60     		STR	WP,[DSP]
ARM GAS  forth.s 			page 69


 1068 14be D7E4     		_NEXT
 1069              	
 1070              	// **************************************************************************
 1071              	//  System and user variables
 1072              	
 1073              	//    doVAR	( -- a )
 1074              	// 	Run time routine for VARIABLE and CREATE.
 1075              	
 1076              	// 	.word	_DNEGA
 1077              	// _DOVAR	.byte  COMPO+5
 1078              	// 	.ascii "doVAR"
 1079              	// 	.p2align 2 	
 1080              	DOVAR:
 1081 14c0 47F8046D 		_PUSH
 1082 14c4 6646     		MOV TOS,IP
 1083 14c6 0CF1040C 		ADD IP,IP,#4 
 1084 14ca D4E4     		B UNNEST 
 1085              	
 1086              	//    doCON	( -- a ) 
 1087              	// 	Run time routine for CONSTANT.
 1088              	
 1089              	// 	.word	_DOVAR
 1090              	// _DOCON	.byte  COMPO+5
 1091              	// 	.ascii "doCON"
 1092              	// 	.p2align 2 	
 1093              	DOCON:
 1094 14cc 47F8046D 		_PUSH
 1095 14d0 5CF8046B 		LDR.W TOS,[IP],#4 
 1096 14d4 CFE4     		B UNNEST 
 1097              	
 1098              	/***********************
 1099              	  system variables 
 1100              	***********************/
 1101              	
 1102              	 // SEED ( -- a)
 1103              	 // return PRNG seed address 
 1104              	
 1105 14d6 A8140000 		.word _DNEGA
 1106 14da 04       	_SEED: .byte 4
 1107 14db 53454544 		.ascii "SEED"
 1108 14df 00       		.p2align 2
 1109              	SEED:
 1110 14e0 47F8046D 		_PUSH 
 1111 14e4 04F10406 		ADD TOS,UP,#RNDSEED
 1112 14e8 C2E4     		_NEXT 	
 1113              	
 1114              	//  MSEC ( -- a)
 1115              	// return address of milliseconds counter
 1116 14ea DA140000 	  .word _SEED 
 1117 14ee 04       	_MSEC: .byte 4
 1118 14ef 4D534543 	  .ascii "MSEC"
 1119 14f3 00       	  .p2align 2 
 1120              	MSEC:
 1121 14f4 47F8046D 	  _PUSH
 1122 14f8 04F10806 	  ADD TOS,UP,#TICKS
 1123 14fc B8E4     	  _NEXT 
 1124              	
ARM GAS  forth.s 			page 70


 1125              	// TIMER ( -- a )
 1126              	// count down timer 
 1127 14fe EE140000 	  .word _MSEC
 1128 1502 05       	_TIMER:  .byte 5
 1129 1503 54494D45 	  .ascii "TIMER"
 1129      52
 1130              	  .p2align 2 
 1131              	TIMER:
 1132 1508 47F8046D 	  _PUSH 
 1133 150c 04F10C06 	  ADD TOS,UP,#CD_TIMER
 1134 1510 AEE4     	  _NEXT
 1135              	
 1136              	//    'BOOT	 ( -- a )
 1137              	// 	Application.
 1138              	
 1139 1512 02150000 		.word	_TIMER
 1140 1516 05       	_TBOOT:	.byte   5
 1141 1517 27424F4F 		.ascii "'BOOT"
 1141      54
 1142              		.p2align 2 	
 1143              	TBOOT:
 1144 151c 47F8046D 		_PUSH
 1145 1520 04F11006 		ADD	TOS,UP,#BOOT 
 1146 1524 A4E4     		_NEXT
 1147              		
 1148              	//    BASE	( -- a )
 1149              	// 	Storage of the radix base for numeric I/O.
 1150              	
 1151 1526 16150000 		.word	_TBOOT
 1152 152a 04       	_BASE:	.byte   4
 1153 152b 42415345 		.ascii "BASE"
 1154 152f 00       		.p2align 2 	
 1155              	BASE:
 1156 1530 47F8046D 		_PUSH
 1157 1534 04F11406 		ADD	TOS,UP,#NBASE
 1158 1538 9AE4     		_NEXT
 1159              	
 1160              	//    tmp	 ( -- a )
 1161              	// 	A temporary storage location used in parse and find.
 1162              	
 1163              	// 	.word	_BASE
 1164              	// _TEMP	.byte   COMPO+3
 1165              	// 	.ascii "tmp"
 1166              	// 	.p2align 2 	
 1167              	TEMP:
 1168 153a 47F8046D 		_PUSH
 1169 153e 04F11806 		ADD	TOS,UP,#TMP
 1170 1542 95E4     		_NEXT
 1171              	
 1172              	//    SPAN	( -- a )
 1173              	// 	Hold character count received by EXPECT.
 1174              	
 1175 1544 2A150000 		.word	_BASE
 1176 1548 04       	_SPAN:	.byte   4
 1177 1549 5350414E 		.ascii "SPAN"
 1178 154d 0000BF   		.p2align 2 	
 1179              	SPAN:
ARM GAS  forth.s 			page 71


 1180 1550 47F8046D 		_PUSH
 1181 1554 04F11C06 		ADD	TOS,UP,#CSPAN
 1182 1558 8AE4     		_NEXT
 1183              	
 1184              	//    >IN	 ( -- a )
 1185              	// 	Hold the character pointer while parsing input stream.
 1186              	
 1187 155a 48150000 		.word	_SPAN
 1188 155e 03       	_INN:	.byte   3
 1189 155f 3E494E   		.ascii ">IN"
 1190 1562 00BF     		.p2align 2 	
 1191              	INN:
 1192 1564 47F8046D 		_PUSH
 1193 1568 04F12006 		ADD	TOS,UP,#TOIN
 1194 156c 80E4     		_NEXT
 1195              	
 1196              	//    #TIB	( -- a )
 1197              	// 	Hold the current count and address of the terminal input buffer.
 1198              	
 1199 156e 5E150000 		.word	_INN
 1200 1572 04       	_NTIB:	.byte   4
 1201 1573 23544942 		.ascii "#TIB"
 1202 1577 00       		.p2align 2 	
 1203              	NTIB:
 1204 1578 47F8046D 		_PUSH
 1205 157c 04F12406 		ADD	TOS,UP,#NTIBB
 1206 1580 76E4     		_NEXT
 1207              	
 1208              	//    'EVAL	( -- a )
 1209              	// 	Execution vector of EVAL.
 1210              	
 1211 1582 72150000 		.word	_NTIB
 1212 1586 05       	_TEVAL:	.byte   5
 1213 1587 27455641 		.ascii "'EVAL"
 1213      4C
 1214              		.p2align 2 	
 1215              	TEVAL:
 1216 158c 47F8046D 		_PUSH
 1217 1590 04F12C06 		ADD	TOS,UP,#EVAL
 1218 1594 6CE4     		_NEXT
 1219              	
 1220              	//    HLD	 ( -- a )
 1221              	// 	Hold a pointer in building a numeric output string.
 1222              	
 1223 1596 86150000 		.word	_TEVAL
 1224 159a 03       	_HLD:	.byte   3
 1225 159b 484C44   		.ascii "HLD"
 1226 159e 00BF     		.p2align 2 	
 1227              	HLD:
 1228 15a0 47F8046D 		_PUSH
 1229 15a4 04F13006 		ADD	TOS,UP,#HOLD
 1230 15a8 62E4     		_NEXT
 1231              	
 1232              	//    CONTEXT	( -- a )
 1233              	// 	A area to specify vocabulary search order.
 1234              	
 1235 15aa 9A150000 		.word	_HLD
ARM GAS  forth.s 			page 72


 1236 15ae 07       	_CNTXT:	.byte   7
 1237 15af 434F4E54 		.ascii "CONTEXT"
 1237      455854
 1238 15b6 00BF     		.p2align 2 	
 1239              	CNTXT:
 1240              	CRRNT:
 1241 15b8 47F8046D 		_PUSH
 1242 15bc 04F13406 		ADD	TOS,UP,#CTXT
 1243 15c0 56E4     		_NEXT
 1244              	
 1245              	//    CP	( -- a )
 1246              	// 	Point to top name in RAM vocabulary.
 1247              	
 1248 15c2 AE150000 		.word	_CNTXT
 1249 15c6 02       	_CP:	.byte   2
 1250 15c7 4350     		.ascii "CP"
 1251 15c9 0000BF   		.p2align 2 	
 1252              	CPP:
 1253 15cc 47F8046D 		_PUSH
 1254 15d0 04F13C06 		ADD	TOS,UP,#USER_CTOP
 1255 15d4 4CE4     		_NEXT
 1256              	
 1257              	//   FCP ( -- a )
 1258              	//  Point ot top of Forth system dictionary
 1259 15d6 C6150000 		.word _CP
 1260 15da 03       	_FCP: .byte 3            
 1261 15db 464350   		.ascii "FCP"
 1262 15de 00BF     		.p2align 2 
 1263              	FCP: 
 1264 15e0 47F8046D 		_PUSH 
 1265 15e4 04F13806 		ADD TOS,UP,#FORTH_CTOP 
 1266 15e8 42E4     		_NEXT 
 1267              	
 1268              	//    LAST	( -- a )
 1269              	// 	Point to the last name in the name dictionary.
 1270              	
 1271 15ea DA150000 		.word	_FCP
 1272 15ee 04       	_LAST:	.byte   4
 1273 15ef 4C415354 		.ascii "LAST"
 1274 15f3 00       		.p2align 2 	
 1275              	LAST:
 1276 15f4 47F8046D 		_PUSH
 1277 15f8 04F14006 		ADD	TOS,UP,#LASTN
 1278 15fc 38E4     		_NEXT
 1279              	
 1280              	
 1281              	/***********************
 1282              		system constants 
 1283              	***********************/
 1284              	
 1285              	//	USER_BEGIN ( -- a )
 1286              	//  where user area begin in RAM
 1287 15fe EE150000 		.word _LAST
 1288 1602 0A       	_USER_BGN: .byte 10
 1289 1603 55534552 		.ascii "USER_BEGIN"
 1289      5F424547 
 1289      494E
ARM GAS  forth.s 			page 73


 1290 160d 0000BF   		.p2align 2
 1291              	USER_BEGIN:
 1292 1610 47F8046D 		_PUSH 
 1293 1614 004E     		ldr TOS,USR_BGN_ADR 
 1294 1616 2BE4     		_NEXT 
 1295              	USR_BGN_ADR:
 1296 1618 12050020 	.word  DTOP 
 1297              	
 1298              	//  USER_END ( -- a )
 1299              	//  where user area end in RAM 
 1300 161c 02160000 		.word _USER_BGN
 1301 1620 08       	_USER_END: .byte 8 
 1302 1621 55534552 		.ascii "USER_END" 
 1302      5F454E44 
 1303 1629 0000BF   		.p2align 2 
 1304              	USER_END:
 1305 162c 47F8046D 		_PUSH 
 1306 1630 004E     		ldr TOS,USER_END_ADR 
 1307 1632 1DE4     		_NEXT 
 1308              	USER_END_ADR:
 1309 1634 FC800120 		.word DEND 
 1310              	
 1311              	
 1312              	/* *********************
 1313              	  Common functions
 1314              	***********************/
 1315              	
 1316              	//    WITHIN	( u ul uh -- t )
 1317              	// 	Return true if u is within the range of ul and uh.
 1318              	
 1319 1638 20160000 		.word	_USER_END 
 1320 163c 06       	_WITHI:	.byte   6
 1321 163d 57495448 		.ascii "WITHIN"
 1321      494E
 1322 1643 00       		.p2align 2 	
 1323              	WITHI:
 1324 1644 504700BF 		_NEST
 1325 1648 39110000 		_ADR	OVER
 1326 164c E9110000 		_ADR	SUBB
 1327 1650 BD100000 		_ADR	TOR
 1328 1654 E9110000 		_ADR	SUBB
 1329 1658 95100000 		_ADR	RFROM
 1330 165c E1130000 		_ADR	ULESS
 1331 1660 770E0000 		_UNNEST
 1332              	
 1333              	//  Divide
 1334              	
 1335              	//    UM/MOD	( udl udh u -- ur uq )
 1336              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1337              	
 1338 1664 3C160000 		.word	_WITHI
 1339 1668 06       	_UMMOD:	.byte   6
 1340 1669 554D2F4D 		.ascii "UM/MOD"
 1340      4F44
 1341 166f 00       		.p2align 2 	
 1342              	UMMOD:
 1343 1670 4FF00103 		MOV	T3,#1
ARM GAS  forth.s 			page 74


 1344 1674 57F8045B 		LDR	WP,[DSP],#4
 1345 1678 3A68     		LDR	T2,[DSP]
 1346              	UMMOD0:
 1347 167a 9218     		ADDS	T2,T2,T2
 1348 167c 6D41     		ADCS	WP,WP,WP
 1349 167e 04D3     		BCC	UMMOD1
 1350 1680 A5EB0605 		SUB	WP,WP,TOS
 1351 1684 02F10102 		ADD	T2,T2,#1
 1352 1688 04E0     		B UMMOD2
 1353              	UMMOD1:
 1354 168a AD1B     		SUBS	WP,WP,TOS 
 1355 168c 28BF     		IT CS 
 1356 168e 0132     		ADDCS	T2,T2,#1
 1357 1690 00D2     		BCS	UMMOD2
 1358 1692 3544     		ADD	WP,WP,TOS
 1359              	UMMOD2:
 1360 1694 DB18     		ADDS	T3,T3,T3
 1361 1696 F0D3     		BCC	UMMOD0
 1362 1698 1646     		MOV	TOS,T2
 1363 169a 3D60     		STR	WP,[DSP]
 1364 169c FFF7E8BB 		_NEXT
 1365              	
 1366              	//    M/MOD	( d n -- r q )
 1367              	// 	Signed floored divide of double by single. Return mod and quotient.
 1368              	
 1369 16a0 68160000 		.word	_UMMOD
 1370 16a4 05       	_MSMOD:	.byte  5
 1371 16a5 4D2F4D4F 		.ascii "M/MOD"
 1371      44
 1372 16aa 00BF     		.p2align 2 	
 1373              	MSMOD:	
 1374 16ac 504700BF 		_NEST
 1375 16b0 15110000 		_ADR	DUPP
 1376 16b4 49110000 		_ADR	ZLESS
 1377 16b8 15110000 		_ADR	DUPP
 1378 16bc BD100000 		_ADR	TOR
 1379 16c0 23100000 		_QBRAN MMOD1
 1379      D8160000 
 1380 16c8 91130000 		_ADR	NEGAT
 1381 16cc BD100000 		_ADR	TOR
 1382 16d0 B1140000 		_ADR	DNEGA
 1383 16d4 95100000 		_ADR	RFROM
 1384              	MMOD1:
 1385 16d8 BD100000 		_ADR	TOR
 1386 16dc 15110000 		_ADR	DUPP
 1387 16e0 49110000 		_ADR	ZLESS
 1388 16e4 23100000 		_QBRAN MMOD2
 1388      F4160000 
 1389 16ec A9100000 		_ADR	RAT
 1390 16f0 D9110000 		_ADR	PLUS
 1391              	MMOD2:
 1392 16f4 95100000 		_ADR	RFROM
 1393 16f8 71160000 		_ADR	UMMOD
 1394 16fc 95100000 		_ADR	RFROM
 1395 1700 23100000 		_QBRAN	MMOD3
 1395      14170000 
 1396 1708 25110000 		_ADR	SWAP
ARM GAS  forth.s 			page 75


 1397 170c 91130000 		_ADR	NEGAT
 1398 1710 25110000 		_ADR	SWAP
 1399              	MMOD3:   
 1400 1714 770E0000 		_UNNEST
 1401              	
 1402              	//    /MOD	( n n -- r q )
 1403              	// 	Signed divide. Return mod and quotient.
 1404              	
 1405 1718 A4160000 		.word	_MSMOD
 1406 171c 04       	_SLMOD:	.byte   4
 1407 171d 2F4D4F44 		.ascii "/MOD"
 1408 1721 0000BF   		.p2align 2 	
 1409              	SLMOD:
 1410 1724 504700BF 		_NEST
 1411 1728 39110000 		_ADR	OVER
 1412 172c 49110000 		_ADR	ZLESS
 1413 1730 25110000 		_ADR	SWAP
 1414 1734 AD160000 		_ADR	MSMOD
 1415 1738 770E0000 		_UNNEST
 1416              	
 1417              	//    MOD	 ( n n -- r )
 1418              	// 	Signed divide. Return mod only.
 1419              	
 1420 173c 1C170000 		.word	_SLMOD
 1421 1740 03       	_MODD:	.byte  3
 1422 1741 4D4F44   		.ascii "MOD"
 1423              		.p2align 2 	
 1424              	MODD:
 1425 1744 504700BF 		_NEST
 1426 1748 25170000 		_ADR	SLMOD
 1427 174c 05110000 		_ADR	DROP
 1428 1750 770E0000 		_UNNEST
 1429              	
 1430              	//    /	   ( n n -- q )
 1431              	// 	Signed divide. Return quotient only.
 1432              	
 1433 1754 40170000 		.word	_MODD
 1434 1758 01       	_SLASH:	.byte  1
 1435 1759 2F       		.ascii "/"
 1436 175a 00BF     		.p2align 2 	
 1437              	SLASH:
 1438 175c 504700BF 		_NEST
 1439 1760 25170000 		_ADR	SLMOD
 1440 1764 25110000 		_ADR	SWAP
 1441 1768 05110000 		_ADR	DROP
 1442 176c 770E0000 		_UNNEST
 1443              	
 1444              	//    */MOD	( n1 n2 n3 -- r q )
 1445              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1446              	
 1447 1770 58170000 		.word	_SLASH
 1448 1774 05       	_SSMOD:	.byte  5
 1449 1775 2A2F4D4F 		.ascii "*/MOD"
 1449      44
 1450 177a 00BF     		.p2align 2 	
 1451              	SSMOD:
 1452 177c 504700BF 		_NEST
ARM GAS  forth.s 			page 76


 1453 1780 BD100000 		_ADR	TOR
 1454 1784 21120000 		_ADR	MSTAR
 1455 1788 95100000 		_ADR	RFROM
 1456 178c AD160000 		_ADR	MSMOD
 1457 1790 770E0000 		_UNNEST
 1458              	
 1459              	//    */	  ( n1 n2 n3 -- q )
 1460              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1461              	
 1462 1794 74170000 		.word	_SSMOD
 1463 1798 02       	_STASL:	.byte  2
 1464 1799 2A2F     		.ascii "*/"
 1465 179b 00       		.p2align 2 	
 1466              	STASL:
 1467 179c 504700BF 		_NEST
 1468 17a0 7D170000 		_ADR	SSMOD
 1469 17a4 25110000 		_ADR	SWAP
 1470 17a8 05110000 		_ADR	DROP
 1471 17ac 770E0000 		_UNNEST
 1472              	
 1473              	// **************************************************************************
 1474              	//  Miscellaneous
 1475              	
 1476              	//    ALIGNED	( b -- a )
 1477              	// 	Align address to the cell boundary.
 1478              	
 1479 17b0 98170000 		.word	_STASL
 1480 17b4 07       	_ALGND:	.byte   7
 1481 17b5 414C4947 		.ascii "ALIGNED"
 1481      4E4544
 1482              		.p2align 2 	
 1483              	ALGND:
 1484 17bc 06F10306 		ADD	TOS,TOS,#3
 1485 17c0 6FF00305 		MVN	WP,#3
 1486 17c4 06EA0506 		AND	TOS,TOS,WP
 1487 17c8 FFF752BB 		_NEXT
 1488              	
 1489              	//    >CHAR	( c -- c )
 1490              	// 	Filter non-printing characters.
 1491              	
 1492 17cc B4170000 		.word	_ALGND
 1493 17d0 05       	_TCHAR:	.byte  5
 1494 17d1 3E434841 		.ascii ">CHAR"
 1494      52
 1495 17d6 00BF     		.p2align 2 	
 1496              	TCHAR:
 1497 17d8 504700BF 		_NEST
 1498 17dc E10F0000 		_DOLIT  0x7F
 1498      7F000000 
 1499 17e4 59110000 		_ADR	ANDD
 1500 17e8 15110000 		_ADR	DUPP	// mask msb
 1501 17ec 95120000 		_ADR	BLANK
 1502 17f0 E10F0000 		_DOLIT 	127
 1502      7F000000 
 1503 17f8 45160000 		_ADR	WITHI	// check for printable
 1504 17fc 7D130000 		_ADR	INVER
 1505 1800 23100000 		_QBRAN	TCHA1
ARM GAS  forth.s 			page 77


 1505      14180000 
 1506 1808 05110000 		_ADR	DROP
 1507 180c E10F0000 		_DOLIT 	'_'	// replace non-printables
 1507      5F000000 
 1508              	TCHA1:
 1509 1814 770E0000 		  _UNNEST
 1510              	
 1511              	//    DEPTH	( -- n )
 1512              	// 	Return the depth of the data stack.
 1513              	
 1514 1818 D0170000 		.word	_TCHAR
 1515 181c 05       	_DEPTH:	.byte  5
 1516 181d 44455054 		.ascii "DEPTH"
 1516      48
 1517 1822 00BF     		.p2align 2 	
 1518              	DEPTH:
 1519 1824 4FF47F42 		_MOV32 T2,SPP 
 1519      C2F20102 
 1520 182c A2EB0702 		SUB	T2,T2,DSP
 1521 1830 47F8046D 		_PUSH
 1522 1834 4FEAA206 		ASR	TOS,T2,#2
 1523 1838 FFF71ABB 		_NEXT
 1524              	
 1525              	//    PICK	( ... +n -- ... w )
 1526              	// 	Copy the nth stack item to tos.
 1527              	
 1528 183c 1C180000 		.word	_DEPTH
 1529 1840 04       	_PICK:	.byte  4
 1530 1841 5049434B 		.ascii "PICK"
 1531 1845 0000BF   		.p2align 2 	
 1532              	PICK:
 1533 1848 504700BF 		_NEST
 1534 184c 35120000 		_ADR	ONEP
 1535 1850 A9120000 		_ADR	CELLS
 1536 1854 F1100000 		_ADR	SPAT
 1537 1858 D9110000 		_ADR	PLUS
 1538 185c 69100000 		_ADR	AT
 1539 1860 770E0000 		_UNNEST
 1540              	
 1541              	// **************************************************************************
 1542              	//  Memory access
 1543              	
 1544              	//    HERE	( -- a )
 1545              	// 	Return the top of the code dictionary.
 1546              	
 1547 1864 40180000 		.word	_PICK
 1548 1868 04       	_HERE:	.byte  4
 1549 1869 48455245 		.ascii "HERE"
 1550 186d 0000BF   		.p2align 2 	
 1551              	HERE:
 1552 1870 504700BF 		_NEST
 1553 1874 CD150000 		_ADR	CPP
 1554 1878 69100000 		_ADR	AT
 1555 187c 770E0000 		_UNNEST
 1556              		
 1557              	//    PAD	 ( -- a )
 1558              	// 	Return the address of a temporary buffer.
ARM GAS  forth.s 			page 78


 1559              	
 1560 1880 68180000 		.word	_HERE
 1561 1884 03       	_PAD:	.byte  3
 1562 1885 504144   		.ascii "PAD"
 1563              		.p2align 2 	
 1564              	PAD:
 1565 1888 504700BF 		_NEST
 1566 188c 71180000 		_ADR	HERE
 1567 1890 E10F0000 		_DOLIT 80
 1567      50000000 
 1568 1898 D9110000 		_ADR PLUS 
 1569 189c 770E0000 		_UNNEST
 1570              	
 1571              	//    TIB	 ( -- a )
 1572              	// 	Return the address of the terminal input buffer.
 1573              	
 1574 18a0 84180000 		.word	_PAD
 1575 18a4 03       	_TIB:	.byte  3
 1576 18a5 544942   		.ascii "TIB"
 1577              		.p2align 2 	
 1578              	TIB:
 1579 18a8 47F8046D 		_PUSH
 1580 18ac A66A     		ldr TOS,[UP,#TIBUF]
 1581 18ae FFF7DFBA 		_NEXT
 1582              	
 1583              	//    @EXECUTE	( a -- )
 1584              	// 	Execute vector stored in address a.
 1585              	
 1586 18b2 A4180000 		.word	_TIB
 1587 18b6 08       	_ATEXE:	.byte   8
 1588 18b7 40455845 		.ascii "@EXECUTE"
 1588      43555445 
 1589 18bf 00       		.p2align 2 	
 1590              	ATEXE: 
 1591 18c0 3500     		MOVS	WP,TOS
 1592 18c2 57F8046B 		_POP
 1593 18c6 2D68     		LDR	WP,[WP]
 1594 18c8 45F00105 		ORR	WP,WP,#1
 1595 18cc 18BF     	    IT NE 
 1596 18ce 2847     		BXNE	WP
 1597 18d0 FFF7CEBA 		_NEXT
 1598              	
 1599              	//    CMOVE	( b1 b2 u -- )
 1600              	// 	Copy u bytes from b1 to b2.
 1601              	
 1602 18d4 B6180000 		.word	_ATEXE
 1603 18d8 05       	_CMOVE:	.byte   5
 1604 18d9 434D4F56 		.ascii "CMOVE"
 1604      45
 1605 18de 00BF     		.p2align 2 	
 1606              	CMOVE:
 1607 18e0 57F8042B 		LDR	T2,[DSP],#4
 1608 18e4 57F8043B 		LDR	T3,[DSP],#4
 1609 18e8 03E0     		B CMOV1
 1610              	CMOV0:
 1611 18ea 13F8015B 		LDRB	WP,[T3],#1
 1612 18ee 02F8015B 		STRB	WP,[T2],#1
ARM GAS  forth.s 			page 79


 1613              	CMOV1:
 1614 18f2 3600     		MOVS	TOS,TOS
 1615 18f4 02D0     		BEQ	CMOV2
 1616 18f6 A6F10106 		SUB	TOS,TOS,#1
 1617 18fa F6E7     		B CMOV0
 1618              	CMOV2:
 1619 18fc 57F8046B 		_POP
 1620 1900 FFF7B6BA 		_NEXT
 1621              	
 1622              	//    MOVE	( a1 a2 u -- )
 1623              	// 	Copy u words from a1 to a2.
 1624              	
 1625 1904 D8180000 		.word	_CMOVE
 1626 1908 04       	_MOVE:	.byte   4
 1627 1909 4D4F5645 		.ascii "MOVE"
 1628 190d 0000BF   		.p2align 2 	
 1629              	MOVE:
 1630 1910 26F00306 		AND	TOS,TOS,#-4
 1631 1914 57F8042B 		LDR	T2,[DSP],#4
 1632 1918 57F8043B 		LDR	T3,[DSP],#4
 1633 191c 03E0     		B MOVE1
 1634              	MOVE0:
 1635 191e 53F8045B 		LDR	WP,[T3],#4
 1636 1922 42F8045B 		STR	WP,[T2],#4
 1637              	MOVE1:
 1638 1926 3600     		MOVS	TOS,TOS
 1639 1928 02D0     		BEQ	MOVE2
 1640 192a A6F10406 		SUB	TOS,TOS,#4
 1641 192e F6E7     		B MOVE0
 1642              	MOVE2:
 1643 1930 57F8046B 		_POP
 1644 1934 FFF79CBA 		_NEXT
 1645              	
 1646              	//    FILL	( b u c -- )
 1647              	// 	Fill u bytes of character c to area beginning at b.
 1648              	
 1649 1938 08190000 		.word	_MOVE
 1650 193c 04       	_FILL:	.byte   4
 1651 193d 46494C4C 		.ascii "FILL"
 1652 1941 0000BF   		.p2align 2 	
 1653              	FILL:
 1654 1944 03CF     		LDMFD DSP!,{T0,T1} 
 1655 1946 0000     		MOVS T0,T0 
 1656 1948 03D0     		BEQ FILL2
 1657              	FILL1:
 1658 194a 01F8016B 		STRB	TOS,[T1],#1
 1659 194e 0138     		SUBS	T0,T0,#1
 1660 1950 FBD1     		BNE FILL1
 1661              	FILL2:
 1662 1952 57F8046B 		_POP
 1663 1956 FFF78BBA 		_NEXT
 1664              	
 1665              	//    PACK$	( b u a -- a )
 1666              	// 	Build a counted word with u characters from b. Null fill.
 1667              	
 1668 195a 3C190000 		.word	_FILL
 1669 195e 05       	_PACKS:	.byte  5
ARM GAS  forth.s 			page 80


 1670 195f 5041434B 		.ascii "PACK$$"
 1670      2424
 1671 1965 0000BF   		.p2align 2 	
 1672              	PACKS:
 1673 1968 504700BF 		_NEST
 1674 196c BD170000 		_ADR	ALGND
 1675 1970 15110000 		_ADR	DUPP
 1676 1974 BD100000 		_ADR	TOR			// strings only on cell boundary
 1677 1978 39110000 		_ADR	OVER
 1678 197c D9110000 		_ADR	PLUS
 1679 1980 35120000 		_ADR	ONEP
 1680 1984 E10F0000 		_DOLIT 	0xFFFFFFFC
 1680      FCFFFFFF 
 1681 198c 59110000 		_ADR	ANDD			// count mod cell
 1682 1990 E10F0000 		_DOLIT 	0
 1682      00000000 
 1683 1998 25110000 		_ADR	SWAP
 1684 199c 55100000 		_ADR	STORE			// null fill cell
 1685 19a0 A9100000 		_ADR	RAT
 1686 19a4 4D130000 		_ADR	DDUP
 1687 19a8 75100000 		_ADR	CSTOR
 1688 19ac 35120000 		_ADR	ONEP			// save count
 1689 19b0 25110000 		_ADR	SWAP
 1690 19b4 E1180000 		_ADR	CMOVE
 1691 19b8 95100000 		_ADR	RFROM
 1692 19bc 770E0000 		_UNNEST   			// move string
 1693              	
 1694              	// **************************************************************************
 1695              	//  Numeric output, single precision
 1696              	
 1697              	//    DIGIT	( u -- c )
 1698              	// 	Convert digit u to a character.
 1699              	
 1700 19c0 5E190000 		.word	_PACKS
 1701 19c4 05       	_DIGIT:	.byte  5
 1702 19c5 44494749 		.ascii "DIGIT"
 1702      54
 1703 19ca 00BF     		.p2align 2 	
 1704              	DIGIT:
 1705 19cc 504700BF 		_NEST
 1706 19d0 E10F0000 		_DOLIT 9
 1706      09000000 
 1707 19d8 39110000 		_ADR	OVER
 1708 19dc F9130000 		_ADR	LESS
 1709 19e0 E10F0000 		_DOLIT	7
 1709      07000000 
 1710 19e8 59110000 		_ADR	ANDD
 1711 19ec D9110000 		_ADR	PLUS
 1712 19f0 E10F0000 		_DOLIT	'0'
 1712      30000000 
 1713 19f8 D9110000 		_ADR	PLUS 
 1714 19fc 770E0000 		_UNNEST
 1715              	
 1716              	//    EXTRACT	( n base -- n c )
 1717              	// 	Extract the least significant digit from n.
 1718              	
 1719 1a00 C4190000 		.word	_DIGIT
ARM GAS  forth.s 			page 81


 1720 1a04 07       	_EXTRC:	.byte  7
 1721 1a05 45585452 		.ascii "EXTRACT"
 1721      414354
 1722              		.p2align 2 	
 1723              	EXTRC:
 1724 1a0c 504700BF 		_NEST
 1725 1a10 E10F0000 		_DOLIT 0
 1725      00000000 
 1726 1a18 25110000 		_ADR	SWAP
 1727 1a1c 71160000 		_ADR	UMMOD
 1728 1a20 25110000 		_ADR	SWAP
 1729 1a24 CD190000 		_ADR	DIGIT
 1730 1a28 770E0000 		_UNNEST
 1731              	
 1732              	//    <#	  ( -- )
 1733              	// 	Initiate the numeric output process.
 1734              	
 1735 1a2c 041A0000 		.word	_EXTRC
 1736 1a30 02       	_BDIGS:	.byte  2
 1737 1a31 3C23     		.ascii "<#"
 1738 1a33 00       		.p2align 2 	
 1739              	BDIGS:
 1740 1a34 504700BF 		_NEST
 1741 1a38 89180000 		_ADR	PAD
 1742 1a3c A1150000 		_ADR	HLD
 1743 1a40 55100000 		_ADR	STORE
 1744 1a44 770E0000 		_UNNEST
 1745              	
 1746              	//    HOLD	( c -- )
 1747              	// 	Insert a character into the numeric output string.
 1748              	
 1749 1a48 301A0000 		.word	_BDIGS
 1750 1a4c 04       	_HOLD:	.byte  4
 1751 1a4d 484F4C44 		.ascii "HOLD"
 1752 1a51 0000BF   		.p2align 2 	
 1753              	HOLD:
 1754 1a54 504700BF 		_NEST
 1755 1a58 A1150000 		_ADR	HLD
 1756 1a5c 69100000 		_ADR	AT
 1757 1a60 45120000 		_ADR	ONEM
 1758 1a64 15110000 		_ADR	DUPP
 1759 1a68 A1150000 		_ADR	HLD
 1760 1a6c 55100000 		_ADR	STORE
 1761 1a70 75100000 		_ADR	CSTOR
 1762 1a74 770E0000 		_UNNEST
 1763              	
 1764              	//    #	   ( u -- u )
 1765              	// 	Extract one digit from u and append the digit to output string.
 1766              	
 1767 1a78 4C1A0000 		.word	_HOLD
 1768 1a7c 01       	_DIG:	.byte  1
 1769 1a7d 23       		.ascii "#"
 1770 1a7e 00BF     		.p2align 2 	
 1771              	DIG:
 1772 1a80 504700BF 		_NEST
 1773 1a84 31150000 		_ADR	BASE
 1774 1a88 69100000 		_ADR	AT
ARM GAS  forth.s 			page 82


 1775 1a8c 0D1A0000 		_ADR	EXTRC
 1776 1a90 551A0000 		_ADR	HOLD
 1777 1a94 770E0000 		_UNNEST
 1778              	
 1779              	//    #S	  ( u -- 0 )
 1780              	// 	Convert u until all digits are added to the output string.
 1781              	
 1782 1a98 7C1A0000 		.word	_DIG
 1783 1a9c 02       	_DIGS:	.byte  2
 1784 1a9d 2353     		.ascii "#S"
 1785 1a9f 00       		.p2align 2 	
 1786              	DIGS:
 1787 1aa0 504700BF 		_NEST
 1788              	DIGS1:
 1789 1aa4 811A0000 	    _ADR	DIG
 1790 1aa8 15110000 		_ADR	DUPP
 1791 1aac 23100000 		_QBRAN 	DIGS2
 1791      BC1A0000 
 1792 1ab4 37100000 		_BRAN	DIGS1
 1792      A41A0000 
 1793              	DIGS2:
 1794 1abc 770E0000 		  _UNNEST
 1795              	
 1796              	//    SIGN	( n -- )
 1797              	// 	Add a minus sign to the numeric output string.
 1798              	
 1799 1ac0 9C1A0000 		.word	_DIGS
 1800 1ac4 04       	_SIGN:	.byte  4
 1801 1ac5 5349474E 		.ascii "SIGN"
 1802 1ac9 0000BF   		.p2align 2 	
 1803              	SIGN:
 1804 1acc 504700BF 		_NEST
 1805 1ad0 49110000 		_ADR	ZLESS
 1806 1ad4 23100000 		_QBRAN	SIGN1
 1806      E81A0000 
 1807 1adc E10F0000 		_DOLIT '-'
 1807      2D000000 
 1808 1ae4 551A0000 		_ADR	HOLD
 1809              	SIGN1:
 1810 1ae8 770E0000 		  _UNNEST
 1811              	
 1812              	//    #>	  ( w -- b u )
 1813              	// 	Prepare the output word to be TYPE'd.
 1814              	
 1815 1aec C41A0000 		.word	_SIGN
 1816 1af0 02       	_EDIGS:	.byte  2
 1817 1af1 233E     		.ascii "#>"
 1818 1af3 00       		.p2align 2 	
 1819              	EDIGS:
 1820 1af4 504700BF 		_NEST
 1821 1af8 05110000 		_ADR	DROP
 1822 1afc A1150000 		_ADR	HLD
 1823 1b00 69100000 		_ADR	AT
 1824 1b04 89180000 		_ADR	PAD
 1825 1b08 39110000 		_ADR	OVER
 1826 1b0c E9110000 		_ADR	SUBB
 1827 1b10 770E0000 		_UNNEST
ARM GAS  forth.s 			page 83


 1828              	
 1829              	//    str	 ( n -- b u )
 1830              	// 	Convert a signed integer to a numeric string.
 1831              	
 1832              	// 	.word	_EDIGS
 1833              	// _STRR	.byte  3
 1834              	// 	.ascii "str"
 1835              	// 	.p2align 2 	
 1836              	STRR:
 1837 1b14 504700BF 		_NEST
 1838 1b18 15110000 		_ADR	DUPP
 1839 1b1c BD100000 		_ADR	TOR
 1840 1b20 A1130000 		_ADR	ABSS
 1841 1b24 351A0000 		_ADR	BDIGS
 1842 1b28 A11A0000 		_ADR	DIGS
 1843 1b2c 95100000 		_ADR	RFROM
 1844 1b30 CD1A0000 		_ADR	SIGN
 1845 1b34 F51A0000 		_ADR	EDIGS
 1846 1b38 770E0000 		_UNNEST
 1847              	
 1848              	//    HEX	 ( -- )
 1849              	// 	Use radix 16 as base for numeric conversions.
 1850              	
 1851 1b3c F01A0000 		.word	_EDIGS
 1852 1b40 03       	_HEX:	.byte  3
 1853 1b41 484558   		.ascii "HEX"
 1854              		.p2align 2 	
 1855              	HEX:
 1856 1b44 504700BF 		_NEST
 1857 1b48 E10F0000 		_DOLIT 16
 1857      10000000 
 1858 1b50 31150000 		_ADR	BASE
 1859 1b54 55100000 		_ADR	STORE
 1860 1b58 770E0000 		_UNNEST
 1861              	
 1862              	//    DECIMAL	( -- )
 1863              	// 	Use radix 10 as base for numeric conversions.
 1864              	
 1865 1b5c 401B0000 		.word	_HEX
 1866 1b60 07       	_DECIM:	.byte  7
 1867 1b61 44454349 		.ascii "DECIMAL"
 1867      4D414C
 1868              		.p2align 2 	
 1869              	DECIM:
 1870 1b68 504700BF 		_NEST
 1871 1b6c E10F0000 		_DOLIT 10
 1871      0A000000 
 1872 1b74 31150000 		_ADR	BASE
 1873 1b78 55100000 		_ADR	STORE
 1874 1b7c 770E0000 		_UNNEST
 1875              	
 1876              	// **************************************************************************
 1877              	//  Numeric input, single precision
 1878              	
 1879              	//    DIGIT?	( c base -- u t )
 1880              	// 	Convert a character to its numeric value. A flag indicates success.
 1881              	
ARM GAS  forth.s 			page 84


 1882 1b80 601B0000 		.word	_DECIM
 1883 1b84 06       	_DIGTQ:	.byte  6
 1884 1b85 44494749 		.ascii "DIGIT?"
 1884      543F
 1885 1b8b 00       		.p2align 2 	
 1886              	DIGTQ:
 1887 1b8c 504700BF 		_NEST
 1888 1b90 BD100000 		_ADR	TOR
 1889 1b94 E10F0000 		_DOLIT 	'0'
 1889      30000000 
 1890 1b9c E9110000 		_ADR	SUBB
 1891 1ba0 E10F0000 		_DOLIT 9
 1891      09000000 
 1892 1ba8 39110000 		_ADR	OVER
 1893 1bac F9130000 		_ADR	LESS
 1894 1bb0 23100000 		_QBRAN	DGTQ1
 1894      D81B0000 
 1895 1bb8 E10F0000 		_DOLIT 7
 1895      07000000 
 1896 1bc0 E9110000 		_ADR	SUBB
 1897 1bc4 15110000 		_ADR	DUPP
 1898 1bc8 E10F0000 		_DOLIT	10
 1898      0A000000 
 1899 1bd0 F9130000 		_ADR	LESS
 1900 1bd4 6D110000 		_ADR	ORR
 1901              	DGTQ1:
 1902 1bd8 15110000 		_ADR	DUPP
 1903 1bdc 95100000 		_ADR	RFROM
 1904 1be0 E1130000 		_ADR	ULESS
 1905 1be4 770E0000 		_UNNEST
 1906              	
 1907              	//    NUMBER?	( a -- n T | a F )
 1908              	// 	Convert a number word to integer. Push a flag on tos.
 1909              	
 1910 1be8 841B0000 		.word	_DIGTQ
 1911 1bec 07       	_NUMBQ:	.byte  7
 1912 1bed 4E554D42 		.ascii "NUMBER?"
 1912      45523F
 1913              		.p2align 2 	
 1914              	NUMBQ:
 1915 1bf4 504700BF 		_NEST
 1916 1bf8 31150000 		_ADR	BASE
 1917 1bfc 69100000 		_ADR	AT
 1918 1c00 BD100000 		_ADR	TOR
 1919 1c04 E10F0000 		_DOLIT	0
 1919      00000000 
 1920 1c0c 39110000 		_ADR	OVER
 1921 1c10 99140000 		_ADR	COUNT
 1922 1c14 39110000 		_ADR	OVER
 1923 1c18 89100000 		_ADR	CAT
 1924 1c1c E10F0000 		_DOLIT '$'
 1924      24000000 
 1925 1c24 C9130000 		_ADR	EQUAL
 1926 1c28 23100000 		_QBRAN	NUMQ1
 1926      441C0000 
 1927 1c30 451B0000 		_ADR	HEX
 1928 1c34 25110000 		_ADR	SWAP
ARM GAS  forth.s 			page 85


 1929 1c38 35120000 		_ADR	ONEP
 1930 1c3c 25110000 		_ADR	SWAP
 1931 1c40 45120000 		_ADR	ONEM
 1932              	NUMQ1:
 1933 1c44 39110000 		_ADR	OVER
 1934 1c48 89100000 		_ADR	CAT
 1935 1c4c E10F0000 		_DOLIT	'-'
 1935      2D000000 
 1936 1c54 C9130000 		_ADR	EQUAL
 1937 1c58 BD100000 		_ADR	TOR
 1938 1c5c 25110000 		_ADR	SWAP
 1939 1c60 A9100000 		_ADR	RAT
 1940 1c64 E9110000 		_ADR	SUBB
 1941 1c68 25110000 		_ADR	SWAP
 1942 1c6c A9100000 		_ADR	RAT
 1943 1c70 D9110000 		_ADR	PLUS
 1944 1c74 E9120000 		_ADR	QDUP
 1945 1c78 23100000 		_QBRAN	NUMQ6
 1945      0C1D0000 
 1946 1c80 45120000 		_ADR	ONEM
 1947 1c84 BD100000 		_ADR	TOR
 1948              	NUMQ2:
 1949 1c88 15110000 		_ADR	DUPP
 1950 1c8c BD100000 		_ADR	TOR
 1951 1c90 89100000 		_ADR	CAT
 1952 1c94 31150000 		_ADR	BASE
 1953 1c98 69100000 		_ADR	AT
 1954 1c9c 8D1B0000 		_ADR	DIGTQ
 1955 1ca0 23100000 		_QBRAN	NUMQ4
 1955      F01C0000 
 1956 1ca8 25110000 		_ADR	SWAP
 1957 1cac 31150000 		_ADR	BASE
 1958 1cb0 69100000 		_ADR	AT
 1959 1cb4 F9110000 		_ADR	STAR
 1960 1cb8 D9110000 		_ADR	PLUS
 1961 1cbc 95100000 		_ADR	RFROM
 1962 1cc0 35120000 		_ADR	ONEP
 1963 1cc4 05100000 		_DONXT	NUMQ2
 1963      881C0000 
 1964 1ccc A9100000 		_ADR	RAT
 1965 1cd0 25110000 		_ADR	SWAP
 1966 1cd4 05110000 		_ADR	DROP
 1967 1cd8 23100000 		_QBRAN	NUMQ3
 1967      E41C0000 
 1968 1ce0 91130000 		_ADR	NEGAT
 1969              	NUMQ3:
 1970 1ce4 25110000 		_ADR	SWAP
 1971 1ce8 37100000 		_BRAN	NUMQ5
 1971      081D0000 
 1972              	NUMQ4:
 1973 1cf0 95100000 		_ADR	RFROM
 1974 1cf4 95100000 		_ADR	RFROM
 1975 1cf8 25130000 		_ADR	DDROP
 1976 1cfc 25130000 		_ADR	DDROP
 1977 1d00 E10F0000 		_DOLIT	0
 1977      00000000 
 1978              	NUMQ5:
ARM GAS  forth.s 			page 86


 1979 1d08 15110000 		_ADR	DUPP
 1980              	NUMQ6:
 1981 1d0c 95100000 		_ADR	RFROM
 1982 1d10 25130000 		_ADR	DDROP
 1983 1d14 95100000 		_ADR	RFROM
 1984 1d18 31150000 		_ADR	BASE
 1985 1d1c 55100000 		_ADR	STORE
 1986 1d20 770E0000 		_UNNEST
 1987              	
 1988              	// **************************************************************************
 1989              	//  Basic I/O
 1990              	
 1991              	//    KEY	 ( -- c )
 1992              	// 	Wait for and return an input character.
 1993              	
 1994 1d24 EC1B0000 		.word	_NUMBQ
 1995 1d28 03       	_KEY:	.byte  3
 1996 1d29 4B4559   		.ascii "KEY"
 1997              		.p2align 2 	
 1998              	KEY:
 1999 1d2c 504700BF 		_NEST
 2000              	KEY1:
 2001 1d30 890F0000 		_ADR	QRX
 2002 1d34 23100000 		_QBRAN	KEY1
 2002      301D0000 
 2003 1d3c 770E0000 		_UNNEST
 2004              	
 2005              	//    SPACE	( -- )
 2006              	// 	Send the blank character to the output device.
 2007              	
 2008 1d40 281D0000 		.word	_KEY
 2009 1d44 05       	_SPACE:	.byte  5
 2010 1d45 53504143 		.ascii "SPACE"
 2010      45
 2011 1d4a 00BF     		.p2align 2 	
 2012              	SPACE:
 2013 1d4c 504700BF 		_NEST
 2014 1d50 95120000 		_ADR	BLANK
 2015 1d54 BD0F0000 		_ADR	EMIT
 2016 1d58 770E0000 		_UNNEST
 2017              	
 2018              	//    SPACES	( +n -- )
 2019              	// 	Send n spaces to the output device.
 2020              	
 2021 1d5c 441D0000 		.word	_SPACE
 2022 1d60 06       	_SPACS:	.byte  6
 2023 1d61 53504143 		.ascii "SPACES"
 2023      4553
 2024 1d67 00       		.p2align 2 	
 2025              	SPACS:
 2026 1d68 504700BF 		_NEST
 2027 1d6c E10F0000 		_DOLIT	0
 2027      00000000 
 2028 1d74 29140000 		_ADR	MAX
 2029 1d78 BD100000 		_ADR	TOR
 2030 1d7c 37100000 		_BRAN	CHAR2
 2030      881D0000 
ARM GAS  forth.s 			page 87


 2031              	CHAR1:
 2032 1d84 4D1D0000 		_ADR	SPACE
 2033              	CHAR2:
 2034 1d88 05100000 		_DONXT	CHAR1
 2034      841D0000 
 2035 1d90 770E0000 		_UNNEST
 2036              	
 2037              	//    TYPE	( b u -- )
 2038              	// 	Output u characters from b.
 2039              	
 2040 1d94 601D0000 		.word	_SPACS
 2041 1d98 04       	_TYPEE:	.byte	4
 2042 1d99 54595045 		.ascii "TYPE"
 2043 1d9d 0000BF   		.p2align 2 	
 2044              	TYPEE:
 2045 1da0 504700BF 		_NEST
 2046 1da4 BD100000 		_ADR  TOR   // ( a+1 -- R: u )
 2047 1da8 37100000 		_BRAN	TYPE2
 2047      BC1D0000 
 2048              	TYPE1:  
 2049 1db0 99140000 		_ADR  COUNT
 2050 1db4 D9170000 		_ADR TCHAR
 2051 1db8 BD0F0000 		_ADR EMIT
 2052              	TYPE2:  
 2053 1dbc 05100000 		_DONXT	TYPE1
 2053      B01D0000 
 2054 1dc4 05110000 		_ADR	DROP
 2055 1dc8 770E0000 		_UNNEST
 2056              	
 2057              	//    CR	  ( -- )
 2058              	// 	Output a carriage return and a line feed.
 2059              	
 2060 1dcc 981D0000 		.word	_TYPEE
 2061 1dd0 02       	_CR:	.byte  2
 2062 1dd1 4352     		.ascii "CR"
 2063 1dd3 00       		.p2align 2 	
 2064              	CR:
 2065 1dd4 504700BF 		_NEST
 2066 1dd8 E10F0000 		_DOLIT	CRR
 2066      0D000000 
 2067 1de0 BD0F0000 		_ADR	EMIT
 2068 1de4 E10F0000 		_DOLIT	LF
 2068      0A000000 
 2069 1dec BD0F0000 		_ADR	EMIT
 2070 1df0 770E0000 		_UNNEST
 2071              	
 2072              	//    do_$	( -- a )
 2073              	// 	Return the address of a compiled string.
 2074              	//  adjust return address to skip over it.
 2075              	
 2076              	// 	.word	_CR
 2077              	// _DOSTR	.byte  COMPO+3
 2078              	// 	.ascii "do$$"
 2079              	// 	.p2align 2 	
 2080              	DOSTR:
 2081 1df4 504700BF 		_NEST     
 2082              	/* compiled string address is 2 levels deep */
ARM GAS  forth.s 			page 88


 2083 1df8 95100000 		_ADR	RFROM	// { -- a1 }
 2084 1dfc 95100000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2085 1e00 15110000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2086 1e04 99140000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2087 1e08 D9110000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2088 1e0c BD170000 		_ADR	ALGND	//  end of string
 2089              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2090 1e10 BD100000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2091 1e14 25110000 		_ADR	SWAP	//  count tugged
 2092 1e18 BD100000 		_ADR	TOR     //  ( -- a2) is string address
 2093 1e1c 770E0000 		_UNNEST
 2094              	
 2095              	//    $"|	( -- a )
 2096              	// 	Run time routine compiled by _". Return address of a compiled string.
 2097              	
 2098              	// 	.word	_DOSTR
 2099              	// _STRQP	.byte  COMPO+3
 2100              	// 	.ascii "$\"|"
 2101              	// 	.p2align 2 	
 2102              	STRQP:
 2103 1e20 504700BF 		_NEST
 2104 1e24 F51D0000 		_ADR	DOSTR
 2105 1e28 770E0000 		_UNNEST			// force a call to dostr
 2106              	
 2107              	//    .$	( a -- )
 2108              	// 	Run time routine of ." . Output a compiled string.
 2109              	
 2110              	// 	.word	_STRQP
 2111              	// _DOTST	.byte  COMPO+2
 2112              	// 	.ascii ".$$"
 2113              	// 	.p2align 2 	
 2114              	DOTST:
 2115 1e2c 504700BF 		_NEST
 2116 1e30 99140000 		_ADR	COUNT // ( -- a+1 c )
 2117 1e34 A11D0000 		_ADR	TYPEE
 2118 1e38 770E0000 		_UNNEST
 2119              	
 2120              	//    ."|	( -- )
 2121              	// 	Run time routine of ." . Output a compiled string.
 2122              	
 2123              	// 	.word	_DOTST
 2124              	// _DOTQP	.byte  COMPO+3
 2125              	// 	.ascii ".""|"
 2126              	// 	.p2align 2 	
 2127              	DOTQP:
 2128 1e3c 504700BF 		_NEST
 2129 1e40 F51D0000 		_ADR	DOSTR
 2130 1e44 2D1E0000 		_ADR	DOTST
 2131 1e48 770E0000 		_UNNEST
 2132              	
 2133              	//    .R	  ( n +n -- )
 2134              	// 	Display an integer in a field of n columns, right justified.
 2135              	
 2136 1e4c D01D0000 		.word	_CR
 2137 1e50 02       	_DOTR:	.byte  2
 2138 1e51 2E52     		.ascii ".R"
 2139 1e53 00       		.p2align 2 	
ARM GAS  forth.s 			page 89


 2140              	DOTR:
 2141 1e54 504700BF 		_NEST
 2142 1e58 BD100000 		_ADR	TOR
 2143 1e5c 151B0000 		_ADR	STRR
 2144 1e60 95100000 		_ADR	RFROM
 2145 1e64 39110000 		_ADR	OVER
 2146 1e68 E9110000 		_ADR	SUBB
 2147 1e6c 691D0000 		_ADR	SPACS
 2148 1e70 A11D0000 		_ADR	TYPEE
 2149 1e74 770E0000 		_UNNEST
 2150              	
 2151              	//    U.R	 ( u +n -- )
 2152              	// 	Display an unsigned integer in n column, right justified.
 2153              	
 2154 1e78 501E0000 		.word	_DOTR
 2155 1e7c 03       	_UDOTR:	.byte  3
 2156 1e7d 552E52   		.ascii "U.R"
 2157              		.p2align 2 	
 2158              	UDOTR:
 2159 1e80 504700BF 		_NEST
 2160 1e84 BD100000 		_ADR	TOR
 2161 1e88 351A0000 		_ADR	BDIGS
 2162 1e8c A11A0000 		_ADR	DIGS
 2163 1e90 F51A0000 		_ADR	EDIGS
 2164 1e94 95100000 		_ADR	RFROM
 2165 1e98 39110000 		_ADR	OVER
 2166 1e9c E9110000 		_ADR	SUBB
 2167 1ea0 691D0000 		_ADR	SPACS
 2168 1ea4 A11D0000 		_ADR	TYPEE
 2169 1ea8 770E0000 		_UNNEST
 2170              	
 2171              	//    U.	  ( u -- )
 2172              	// 	Display an unsigned integer in free format.
 2173              	
 2174 1eac 7C1E0000 		.word	_UDOTR
 2175 1eb0 02       	_UDOT:	.byte  2
 2176 1eb1 552E     		.ascii "U."
 2177 1eb3 00       		.p2align 2 	
 2178              	UDOT:
 2179 1eb4 504700BF 		_NEST
 2180 1eb8 351A0000 		_ADR	BDIGS
 2181 1ebc A11A0000 		_ADR	DIGS
 2182 1ec0 F51A0000 		_ADR	EDIGS
 2183 1ec4 4D1D0000 		_ADR	SPACE
 2184 1ec8 A11D0000 		_ADR	TYPEE
 2185 1ecc 770E0000 		_UNNEST
 2186              	
 2187              	//    .	   ( w -- )
 2188              	// 	Display an integer in free format, preceeded by a space.
 2189              	
 2190 1ed0 B01E0000 		.word	_UDOT
 2191 1ed4 01       	_DOT:	.byte  1
 2192 1ed5 2E       		.ascii "."
 2193 1ed6 00BF     		.p2align 2 	
 2194              	DOT:
 2195 1ed8 504700BF 		_NEST
 2196 1edc 31150000 		_ADR	BASE
ARM GAS  forth.s 			page 90


 2197 1ee0 69100000 		_ADR	AT
 2198 1ee4 E10F0000 		_DOLIT 10
 2198      0A000000 
 2199 1eec 81110000 		_ADR	XORR			// ?decimal
 2200 1ef0 23100000 		_QBRAN	DOT1
 2200      001F0000 
 2201 1ef8 B51E0000 		_ADR	UDOT
 2202 1efc 770E0000 		_UNNEST			// no,display unsigned
 2203              	DOT1:
 2204 1f00 151B0000 	    _ADR	STRR
 2205 1f04 4D1D0000 		_ADR	SPACE
 2206 1f08 A11D0000 		_ADR	TYPEE
 2207 1f0c 770E0000 		_UNNEST			// yes, display signed
 2208              	
 2209              	//    ?	   ( a -- )
 2210              	// 	Display the contents in a memory cell.
 2211              	
 2212 1f10 D41E0000 		.word	_DOT
 2213 1f14 01       	_QUEST:	.byte  1
 2214 1f15 3F       		.ascii "?"
 2215 1f16 00BF     		.p2align 2 	
 2216              	QUEST:
 2217 1f18 504700BF 		_NEST
 2218 1f1c 69100000 		_ADR	AT
 2219 1f20 D91E0000 		_ADR	DOT
 2220 1f24 770E0000 		_UNNEST
 2221              	
 2222              	// **************************************************************************
 2223              	//  Parsing
 2224              	
 2225              	//    parse	( b u c -- b u delta //  string> )
 2226              	// 	Scan word delimited by c. Return found string and its offset.
 2227              	
 2228              	// 	.word	_QUEST
 2229              	// _PARS	.byte  5
 2230              	// 	.ascii "parse"
 2231              	// 	.p2align 2 	
 2232              	PARS:
 2233 1f28 504700BF 		_NEST
 2234 1f2c 3B150000 		_ADR	TEMP
 2235 1f30 55100000 		_ADR	STORE
 2236 1f34 39110000 		_ADR	OVER
 2237 1f38 BD100000 		_ADR	TOR
 2238 1f3c 15110000 		_ADR	DUPP
 2239 1f40 23100000 		_QBRAN	PARS8
 2239      3C200000 
 2240 1f48 45120000 		_ADR	ONEM
 2241 1f4c 3B150000 		_ADR	TEMP
 2242 1f50 69100000 		_ADR	AT
 2243 1f54 95120000 		_ADR	BLANK
 2244 1f58 C9130000 		_ADR	EQUAL
 2245 1f5c 23100000 		_QBRAN	PARS3
 2245      B01F0000 
 2246 1f64 BD100000 		_ADR	TOR
 2247              	PARS1:
 2248 1f68 95120000 		_ADR	BLANK
 2249 1f6c 39110000 		_ADR	OVER
ARM GAS  forth.s 			page 91


 2250 1f70 89100000 		_ADR	CAT			// skip leading blanks 
 2251 1f74 E9110000 		_ADR	SUBB
 2252 1f78 49110000 		_ADR	ZLESS
 2253 1f7c 7D130000 		_ADR	INVER
 2254 1f80 23100000 		_QBRAN	PARS2
 2254      AC1F0000 
 2255 1f88 35120000 		_ADR	ONEP
 2256 1f8c 05100000 		_DONXT	PARS1
 2256      681F0000 
 2257 1f94 95100000 		_ADR	RFROM
 2258 1f98 05110000 		_ADR	DROP
 2259 1f9c E10F0000 		_DOLIT	0
 2259      00000000 
 2260 1fa4 15110000 		_ADR	DUPP
 2261 1fa8 770E0000 		_UNNEST
 2262              	PARS2:
 2263 1fac 95100000 		_ADR	RFROM
 2264              	PARS3:
 2265 1fb0 39110000 		_ADR	OVER
 2266 1fb4 25110000 		_ADR	SWAP
 2267 1fb8 BD100000 		_ADR	TOR
 2268              	PARS4:
 2269 1fbc 3B150000 		_ADR	TEMP
 2270 1fc0 69100000 		_ADR	AT
 2271 1fc4 39110000 		_ADR	OVER
 2272 1fc8 89100000 		_ADR	CAT
 2273 1fcc E9110000 		_ADR	SUBB			// scan for delimiter
 2274 1fd0 3B150000 		_ADR	TEMP
 2275 1fd4 69100000 		_ADR	AT
 2276 1fd8 95120000 		_ADR	BLANK
 2277 1fdc C9130000 		_ADR	EQUAL
 2278 1fe0 23100000 		_QBRAN	PARS5
 2278      EC1F0000 
 2279 1fe8 49110000 		_ADR	ZLESS
 2280              	PARS5:
 2281 1fec 23100000 		_QBRAN	PARS6
 2281      10200000 
 2282 1ff4 35120000 		_ADR	ONEP
 2283 1ff8 05100000 		_DONXT	PARS4
 2283      BC1F0000 
 2284 2000 15110000 		_ADR	DUPP
 2285 2004 BD100000 		_ADR	TOR
 2286 2008 37100000 		_BRAN	PARS7
 2286      24200000 
 2287              	PARS6:
 2288 2010 95100000 		_ADR	RFROM
 2289 2014 05110000 		_ADR	DROP
 2290 2018 15110000 		_ADR	DUPP
 2291 201c 35120000 		_ADR	ONEP
 2292 2020 BD100000 		_ADR	TOR
 2293              	PARS7:
 2294 2024 39110000 		_ADR	OVER
 2295 2028 E9110000 		_ADR	SUBB
 2296 202c 95100000 		_ADR	RFROM
 2297 2030 95100000 		_ADR	RFROM
 2298 2034 E9110000 		_ADR	SUBB
 2299 2038 770E0000 		_UNNEST
ARM GAS  forth.s 			page 92


 2300              	PARS8:
 2301 203c 39110000 		_ADR	OVER
 2302 2040 95100000 		_ADR	RFROM
 2303 2044 E9110000 		_ADR	SUBB
 2304 2048 770E0000 		_UNNEST
 2305              	
 2306              	//    PARSE	( c -- b u //  string> )
 2307              	// 	Scan input stream and return counted string delimited by c.
 2308              	
 2309 204c 141F0000 		.word	_QUEST
 2310 2050 05       	_PARSE:	.byte  5
 2311 2051 50415253 		.ascii "PARSE"
 2311      45
 2312 2056 00BF     		.p2align 2 	
 2313              	PARSE:
 2314 2058 504700BF 		_NEST
 2315 205c BD100000 		_ADR	TOR
 2316 2060 A9180000 		_ADR	TIB
 2317 2064 65150000 		_ADR	INN
 2318 2068 69100000 		_ADR	AT
 2319 206c D9110000 		_ADR	PLUS			// current input buffer pointer
 2320 2070 79150000 		_ADR	NTIB
 2321 2074 69100000 		_ADR	AT
 2322 2078 65150000 		_ADR	INN
 2323 207c 69100000 		_ADR	AT
 2324 2080 E9110000 		_ADR	SUBB			// remaining count
 2325 2084 95100000 		_ADR	RFROM
 2326 2088 291F0000 		_ADR	PARS
 2327 208c 65150000 		_ADR	INN
 2328 2090 51140000 		_ADR	PSTOR
 2329 2094 770E0000 		_UNNEST
 2330              	
 2331              	//    .(	  ( -- )
 2332              	// 	Output following string up to next ) .
 2333              	
 2334 2098 50200000 		.word	_PARSE
 2335 209c 82       	_DOTPR:	.byte  IMEDD+2
 2336 209d 2E28     		.ascii ".("
 2337 209f 00       		.p2align 2 	
 2338              	DOTPR:
 2339 20a0 504700BF 		_NEST
 2340 20a4 E10F0000 		_DOLIT	')'
 2340      29000000 
 2341 20ac 59200000 		_ADR	PARSE
 2342 20b0 A11D0000 		_ADR	TYPEE
 2343 20b4 770E0000 		_UNNEST
 2344              	
 2345              	//    (	   ( -- )
 2346              	// 	Ignore following string up to next ) . A comment.
 2347              	
 2348 20b8 9C200000 		.word	_DOTPR
 2349 20bc 81       	_PAREN:	.byte  IMEDD+1
 2350 20bd 28       		.ascii "("
 2351 20be 00BF     		.p2align 2 	
 2352              	PAREN:
 2353 20c0 504700BF 		_NEST
 2354 20c4 E10F0000 		_DOLIT	')'
ARM GAS  forth.s 			page 93


 2354      29000000 
 2355 20cc 59200000 		_ADR	PARSE
 2356 20d0 25130000 		_ADR	DDROP
 2357 20d4 770E0000 		_UNNEST
 2358              	
 2359              	//    \	   ( -- )
 2360              	// 	Ignore following text till the end of line.
 2361              	
 2362 20d8 BC200000 		.word	_PAREN
 2363 20dc 81       	_BKSLA:	.byte  IMEDD+1
 2364 20dd 5C       		.byte	'\\'
 2365 20de 00BF     		.p2align 2 	
 2366              	BKSLA:
 2367 20e0 504700BF 		_NEST
 2368 20e4 79150000 		_ADR	NTIB
 2369 20e8 69100000 		_ADR	AT
 2370 20ec 65150000 		_ADR	INN
 2371 20f0 55100000 		_ADR	STORE
 2372 20f4 770E0000 		_UNNEST
 2373              	
 2374              	//    CHAR	( -- c )
 2375              	// 	Parse next word and return its first character.
 2376              	
 2377 20f8 DC200000 		.word	_BKSLA
 2378 20fc 04       	_CHAR:	.byte  4
 2379 20fd 43484152 		.ascii "CHAR"
 2380 2101 0000BF   		.p2align 2 	
 2381              	CHAR:
 2382 2104 504700BF 		_NEST
 2383 2108 95120000 		_ADR	BLANK
 2384 210c 59200000 		_ADR	PARSE
 2385 2110 05110000 		_ADR	DROP
 2386 2114 89100000 		_ADR	CAT
 2387 2118 770E0000 		_UNNEST
 2388              	
 2389              	//    WORD	( c -- a //  string> )
 2390              	// 	Parse a word from input stream and copy it to code dictionary.
 2391              	
 2392 211c FC200000 		.word	_CHAR
 2393 2120 04       	_WORDD:	.byte  4
 2394 2121 574F5244 		.ascii "WORD"
 2395 2125 0000BF   		.p2align 2 	
 2396              	WORDD:
 2397 2128 504700BF 		_NEST
 2398 212c 59200000 		_ADR	PARSE
 2399 2130 71180000 		_ADR	HERE
 2400 2134 75120000 		_ADR	CELLP
 2401 2138 69190000 		_ADR	PACKS
 2402 213c 770E0000 		_UNNEST
 2403              	
 2404              	//    TOKEN	( -- a //  string> )
 2405              	// 	Parse a word from input stream and copy it to name dictionary.
 2406              	
 2407 2140 20210000 		.word	_WORDD
 2408 2144 05       	_TOKEN:	.byte  5
 2409 2145 544F4B45 		.ascii "TOKEN"
 2409      4E
ARM GAS  forth.s 			page 94


 2410 214a 00BF     		.p2align 2 	
 2411              	TOKEN:
 2412 214c 504700BF 		_NEST
 2413 2150 95120000 		_ADR	BLANK
 2414 2154 29210000 		_ADR	WORDD
 2415 2158 770E0000 		_UNNEST
 2416              	
 2417              	// **************************************************************************
 2418              	//  Dictionary search
 2419              	
 2420              	//    NAME>	( na -- ca )
 2421              	// 	Return a code address given a name address.
 2422              	
 2423 215c 44210000 		.word	_TOKEN
 2424 2160 05       	_NAMET:	.byte  5
 2425 2161 4E414D45 		.ascii "NAME>"
 2425      3E
 2426 2166 00BF     		.p2align 2 	
 2427              	NAMET:
 2428 2168 504700BF 		_NEST
 2429 216c 99140000 		_ADR	COUNT
 2430 2170 E10F0000 		_DOLIT	0x1F
 2430      1F000000 
 2431 2178 59110000 		_ADR	ANDD
 2432 217c D9110000 		_ADR	PLUS
 2433 2180 BD170000 		_ADR	ALGND
 2434 2184 770E0000 		_UNNEST
 2435              	
 2436              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2437              	// 	Compare u bytes in two strings. Return 0 if identical.
 2438              	//
 2439              	//  Picatout 2020-12-01, 
 2440              	//      Because of problem with .align directive that
 2441              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2442              	// 		words  to do a byte by byte comparison. 
 2443              	//
 2444 2188 60210000 		.word	_NAMET
 2445 218c 05       	_SAMEQ:	.byte  5
 2446 218d 53414D45 		.ascii "SAME?"
 2446      3F
 2447 2192 00BF     		.p2align 2	
 2448              	SAMEQ:
 2449 2194 504700BF 		_NEST
 2450 2198 BD100000 		_ADR	TOR
 2451 219c 37100000 		_BRAN	SAME2
 2451      E0210000 
 2452              	SAME1:
 2453 21a4 39110000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2454 21a8 A9100000 		_ADR	RAT   // a1 a2 a1 u 
 2455 21ac D9110000 		_ADR	PLUS  // a1 a2 a1+u 
 2456 21b0 89100000 		_ADR	CAT	   // a1 a2 c1    		
 2457 21b4 39110000 		_ADR	OVER  // a1 a2 c1 a2 
 2458 21b8 A9100000 		_ADR	RAT    
 2459 21bc D9110000 		_ADR	PLUS    
 2460 21c0 89100000 		_ADR	CAT	  // a1 a2 c1 c2
 2461 21c4 E9110000 		_ADR	SUBB  
 2462 21c8 E9120000 		_ADR	QDUP
ARM GAS  forth.s 			page 95


 2463 21cc 23100000 		_QBRAN	SAME2
 2463      E0210000 
 2464 21d4 95100000 		_ADR	RFROM
 2465 21d8 05110000 		_ADR	DROP
 2466 21dc 770E0000 		_UNNEST	// strings not equal
 2467              	SAME2:
 2468 21e0 05100000 		_DONXT	SAME1
 2468      A4210000 
 2469 21e8 E10F0000 		_DOLIT	0
 2469      00000000 
 2470 21f0 770E0000 		_UNNEST	// strings equal
 2471              	
 2472              	//    find	( a na -- ca na | a F )
 2473              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2474              	
 2475              	//  Picatout 2020-12-01,  
 2476              	//		Modified from original. See comment for word "SAME?" 
 2477              	
 2478              	// 	.word	_SAMEQ
 2479              	// _FIND	.byte  4
 2480              	// 	.ascii "find"
 2481              	// 	.p2align 2 	
 2482              	FIND:
 2483 21f4 504700BF 		_NEST
 2484 21f8 25110000 		_ADR	SWAP			// na a	
 2485 21fc 99140000 		_ADR	COUNT			// na a+1 count
 2486 2200 15110000 		_ADR	DUPP 
 2487 2204 3B150000 		_ADR	TEMP
 2488 2208 55100000 		_ADR	STORE			// na a+1 count 
 2489 220c BD100000 		_ADR  TOR		// na a+1  R: count  
 2490 2210 25110000 		_ADR	SWAP			// a+1 na
 2491              	FIND1:
 2492 2214 15110000 		_ADR	DUPP			// a+1 na na
 2493 2218 23100000 		_QBRAN	FIND6	// end of vocabulary
 2493      6C220000 
 2494 2220 15110000 		_ADR	DUPP			// a+1 na na
 2495 2224 89100000 		_ADR	CAT			// a+1 na name1
 2496 2228 E10F0000 		_DOLIT	MASKK
 2496      1FFFFFFF 
 2497 2230 59110000 		_ADR	ANDD
 2498 2234 A9100000 		_ADR	RAT			// a+1 na name1 count 
 2499 2238 81110000 		_ADR	XORR			// a+1 na,  same length?
 2500 223c 23100000 		_QBRAN	FIND2
 2500      54220000 
 2501 2244 85120000 		_ADR	CELLM			// a+1 la
 2502 2248 69100000 		_ADR	AT			// a+1 next_na
 2503 224c 37100000 		_BRAN	FIND1			// try next word
 2503      14220000 
 2504              	FIND2:   
 2505 2254 35120000 		_ADR	ONEP			// a+1 na+1
 2506 2258 3B150000 		_ADR	TEMP
 2507 225c 69100000 		_ADR	AT			// a+1 na+1 count
 2508 2260 95210000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2509              	FIND3:	
 2510 2264 37100000 		_BRAN	FIND4
 2510      84220000 
 2511              	FIND6:	
ARM GAS  forth.s 			page 96


 2512 226c 95100000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2513 2270 05110000 		_ADR	DROP			// a+1 0
 2514 2274 25110000 		_ADR	SWAP			// 0 a+1
 2515 2278 45120000 		_ADR	ONEM			// 0 a
 2516 227c 25110000 		_ADR	SWAP			// a 0 
 2517 2280 770E0000 		_UNNEST			// return without a match
 2518              	FIND4:	
 2519 2284 23100000 		_QBRAN	FIND5			// a+1 na+1
 2519      A0220000 
 2520 228c 45120000 		_ADR	ONEM			// a+1 na
 2521 2290 85120000 		_ADR	CELLM			// a+4 la
 2522 2294 69100000 		_ADR	AT			// a+1 next_na
 2523 2298 37100000 		_BRAN	FIND1			// compare next name
 2523      14220000 
 2524              	FIND5:	
 2525 22a0 95100000 		_ADR	RFROM			// a+1 na+1 count
 2526 22a4 05110000 		_ADR	DROP			// a+1 na+1
 2527 22a8 25110000 		_ADR	SWAP			// na+1 a+1
 2528 22ac 05110000 		_ADR	DROP			// na+1
 2529 22b0 45120000 		_ADR	ONEM			// na
 2530 22b4 15110000 		_ADR	DUPP			// na na
 2531 22b8 69210000 		_ADR	NAMET			// na ca
 2532 22bc 25110000 		_ADR	SWAP			// ca na
 2533 22c0 770E0000 		_UNNEST			//  return with a match
 2534              	
 2535              	//    NAME?	( a -- ca na | a F )
 2536              	// 	Search all context vocabularies for a string.
 2537              	
 2538 22c4 8C210000 		.word	_SAMEQ
 2539 22c8 05       	_NAMEQ:	.byte  5
 2540 22c9 4E414D45 		.ascii "NAME?"
 2540      3F
 2541 22ce 00BF     		.p2align 2 	
 2542              	NAMEQ:
 2543 22d0 504700BF 		_NEST
 2544 22d4 B9150000 		_ADR	CNTXT
 2545 22d8 69100000 		_ADR	AT
 2546 22dc F5210000 		_ADR	FIND
 2547 22e0 770E0000 		_UNNEST
 2548              	
 2549              	// **************************************************************************
 2550              	//  Terminal input
 2551              	
 2552              	//    	  ( bot eot cur -- bot eot cur )
 2553              	// 	Backup the cursor by one character.
 2554              	
 2555              	// 	.word	_NAMEQ
 2556              	// _BKSP	.byte  2
 2557              	// 	.ascii "^H"
 2558              	// 	.p2align 2 	
 2559              	BKSP:
 2560 22e4 504700BF 		_NEST
 2561 22e8 BD100000 		_ADR	TOR
 2562 22ec 39110000 		_ADR	OVER
 2563 22f0 95100000 		_ADR	RFROM
 2564 22f4 25110000 		_ADR	SWAP
 2565 22f8 39110000 		_ADR	OVER
ARM GAS  forth.s 			page 97


 2566 22fc 81110000 		_ADR	XORR
 2567 2300 23100000 		_QBRAN	BACK1
 2567      2C230000 
 2568 2308 E10F0000 		_DOLIT	BKSPP
 2568      08000000 
 2569 2310 BD0F0000 		_ADR	TECHO
 2570 2314 45120000 		_ADR	ONEM
 2571 2318 95120000 		_ADR	BLANK
 2572 231c BD0F0000 		_ADR	TECHO
 2573 2320 E10F0000 		_DOLIT	BKSPP
 2573      08000000 
 2574 2328 BD0F0000 		_ADR	TECHO
 2575              	BACK1:
 2576 232c 770E0000 		  _UNNEST
 2577              	
 2578              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2579              	// 	Accept and echo the key stroke and bump the cursor.
 2580              	
 2581              	// 	.word	_BKSP
 2582              	// _TAP	.byte  3
 2583              	// 	.ascii "TAP"
 2584              	// 	.p2align 2 	
 2585              	TAP:
 2586 2330 504700BF 		_NEST
 2587 2334 15110000 		_ADR	DUPP
 2588 2338 BD0F0000 		_ADR	TECHO
 2589 233c 39110000 		_ADR	OVER
 2590 2340 75100000 		_ADR	CSTOR
 2591 2344 35120000 		_ADR	ONEP
 2592 2348 770E0000 		_UNNEST
 2593              	
 2594              	//    kTAP	( bot eot cur c -- bot eot cur )
 2595              	// 	Process a key stroke, CR or backspace.
 2596              	
 2597              	// 	.word	_TAP
 2598              	// _KTAP	.byte  4
 2599              	// 	.ascii "kTAP"
 2600              	// 	.p2align 2 	
 2601              	KTAP:
 2602              	TTAP:
 2603 234c 504700BF 		_NEST
 2604 2350 15110000 		_ADR	DUPP
 2605 2354 E10F0000 		_DOLIT	CRR
 2605      0D000000 
 2606 235c 81110000 		_ADR	XORR
 2607 2360 23100000 		_QBRAN  KTAP2
 2607      90230000 
 2608 2368 E10F0000 		_DOLIT	BKSPP
 2608      08000000 
 2609 2370 81110000 		_ADR	XORR
 2610 2374 23100000 		_QBRAN	KTAP1
 2610      88230000 
 2611 237c 95120000 		_ADR	BLANK
 2612 2380 31230000 		_ADR	TAP
 2613 2384 770E0000 		_UNNEST
 2614              	//	.word	0			// patch
 2615              	KTAP1:
ARM GAS  forth.s 			page 98


 2616 2388 E5220000 		_ADR	BKSP
 2617 238c 770E0000 		_UNNEST
 2618              	KTAP2:
 2619 2390 05110000 		_ADR	DROP
 2620 2394 25110000 		_ADR	SWAP
 2621 2398 05110000 		_ADR	DROP
 2622 239c 15110000 		_ADR	DUPP
 2623 23a0 770E0000 		_UNNEST
 2624              	
 2625              	//    ACCEPT	( b u -- b u )
 2626              	// 	Accept characters to input buffer. Return with actual count.
 2627              	
 2628 23a4 C8220000 		.word	_NAMEQ
 2629 23a8 06       	_ACCEP:	.byte  6
 2630 23a9 41434345 		.ascii "ACCEPT"
 2630      5054
 2631 23af 00       		.p2align 2 	
 2632              	ACCEP:
 2633 23b0 504700BF 		_NEST
 2634 23b4 39110000 		_ADR	OVER
 2635 23b8 D9110000 		_ADR	PLUS
 2636 23bc 39110000 		_ADR	OVER
 2637              	ACCP1:
 2638 23c0 4D130000 		_ADR	DDUP
 2639 23c4 81110000 		_ADR	XORR
 2640 23c8 23100000 		_QBRAN	ACCP4
 2640      08240000 
 2641 23d0 2D1D0000 		_ADR	KEY
 2642 23d4 15110000 		_ADR	DUPP
 2643 23d8 95120000 		_ADR	BLANK
 2644 23dc E10F0000 		_DOLIT 127
 2644      7F000000 
 2645 23e4 45160000 		_ADR	WITHI
 2646 23e8 23100000 		_QBRAN	ACCP2
 2646      FC230000 
 2647 23f0 31230000 		_ADR	TAP
 2648 23f4 37100000 		_BRAN	ACCP3
 2648      00240000 
 2649              	ACCP2:
 2650 23fc 4D230000 		_ADR	KTAP
 2651              	ACCP3:	  
 2652 2400 37100000 		_BRAN	ACCP1
 2652      C0230000 
 2653              	ACCP4:
 2654 2408 05110000 		_ADR	DROP
 2655 240c 39110000 		_ADR	OVER
 2656 2410 E9110000 		_ADR	SUBB
 2657 2414 770E0000 		_UNNEST
 2658              	
 2659              	//    QUERY	( -- )
 2660              	// 	Accept input stream to terminal input buffer.
 2661              	
 2662 2418 A8230000 		.word	_ACCEP
 2663 241c 05       	_QUERY:	.byte  5
 2664 241d 51554552 		.ascii "QUERY"
 2664      59
 2665 2422 00BF     		.p2align 2 	
ARM GAS  forth.s 			page 99


 2666              	QUERY:
 2667 2424 504700BF 		_NEST
 2668 2428 A9180000 		_ADR	TIB
 2669 242c E10F0000 		_DOLIT 80
 2669      50000000 
 2670 2434 B1230000 		_ADR	ACCEP
 2671 2438 79150000 		_ADR	NTIB
 2672 243c 55100000 		_ADR	STORE
 2673 2440 05110000 		_ADR	DROP
 2674 2444 E10F0000 		_DOLIT	0
 2674      00000000 
 2675 244c 65150000 		_ADR	INN
 2676 2450 55100000 		_ADR	STORE
 2677 2454 770E0000 		_UNNEST
 2678              	
 2679              	// **************************************************************************
 2680              	//  Error handling
 2681              	
 2682              	//    ABORT	( a -- )
 2683              	// 	Reset data stack and jump to QUIT.
 2684              	
 2685 2458 1C240000 		.word	_QUERY
 2686 245c 05       	_ABORT:	.byte  5
 2687 245d 41424F52 		.ascii "ABORT"
 2687      54
 2688 2462 00BF     		.p2align 2 	
 2689              	ABORT:
 2690 2464 504700BF 		_NEST
 2691              	ABORT1:
 2692 2468 4D1D0000 		_ADR	SPACE
 2693 246c 99140000 		_ADR	COUNT
 2694 2470 A11D0000 		_ADR	TYPEE
 2695 2474 E10F0000 		_DOLIT	0X3F
 2695      3F000000 
 2696 247c BD0F0000 		_ADR	EMIT
 2697 2480 D51D0000 		_ADR	CR
 2698 2484 ED250000 		_ADR	PRESE
 2699 2488 37100000 		_BRAN	QUIT
 2699      0C260000 
 2700              	
 2701              	//    _abort"	( f -- )
 2702              	// 	Run time routine of ABORT" . Abort with a message.
 2703              	
 2704              	// 	.word	_ABORT
 2705              	// _ABORQ	.byte  COMPO+6
 2706              	// 	.ascii "abort\""
 2707              	// 	.p2align 2 	
 2708              	ABORQ:
 2709 2490 504700BF 		_NEST
 2710 2494 F51D0000 		_ADR	DOSTR
 2711 2498 25110000 		_ADR	SWAP 
 2712 249c 23100000 		_QBRAN	1f	// text flag
 2712      AC240000 
 2713 24a4 37100000 		_BRAN	ABORT1
 2713      68240000 
 2714              	1:
 2715 24ac 05110000 		_ADR	DROP
ARM GAS  forth.s 			page 100


 2716 24b0 770E0000 		_UNNEST			// drop error
 2717              	
 2718              	// **************************************************************************
 2719              	//  The text interpreter
 2720              	
 2721              	//    $INTERPRET  ( a -- )
 2722              	// 	Interpret a word. If failed, try to convert it to an integer.
 2723              	
 2724 24b4 5C240000 		.word	_ABORT
 2725 24b8 0A       	_INTER:	.byte  10
 2726 24b9 2424494E 		.ascii "$$INTERPRET"
 2726      54455250 
 2726      524554
 2727              		.p2align 2 	
 2728              	INTER:
 2729 24c4 504700BF 		_NEST
 2730 24c8 D1220000 		_ADR	NAMEQ
 2731 24cc E9120000 		_ADR	QDUP	// ?defined
 2732 24d0 23100000 		_QBRAN	INTE1
 2732      04250000 
 2733 24d8 69100000 		_ADR	AT
 2734 24dc E10F0000 		_DOLIT	COMPO
 2734      40000000 
 2735 24e4 59110000 		_ADR	ANDD	// ?compile only lexicon bits
 2736 24e8 91240000 		_ABORQ	13," compile only"
 2736      0D20636F 
 2736      6D70696C 
 2736      65206F6E 
 2736      6C7900BF 
 2737 24fc F90F0000 		_ADR	EXECU
 2738 2500 770E0000 		_UNNEST			// execute defined word
 2739              	INTE1:
 2740 2504 F51B0000 		_ADR	NUMBQ
 2741 2508 23100000 		_QBRAN	INTE2
 2741      14250000 
 2742 2510 770E0000 		_UNNEST
 2743              	INTE2:
 2744 2514 65240000 		_ADR	ABORT	// error
 2745              	
 2746              	//    [	   ( -- )
 2747              	// 	Start the text interpreter.
 2748              	
 2749 2518 B8240000 		.word	_INTER
 2750 251c 81       	_LBRAC:	.byte  IMEDD+1
 2751 251d 5B       		.ascii "["
 2752 251e 00BF     		.p2align 2 	
 2753              	LBRAC:
 2754 2520 504700BF 		_NEST
 2755 2524 E10F0000 		_DOLIT	INTER
 2755      C4240000 
 2756 252c 8D150000 		_ADR	TEVAL
 2757 2530 55100000 		_ADR	STORE
 2758 2534 770E0000 		_UNNEST
 2759              	
 2760              	//    .OK	 ( -- )
 2761              	// 	Display "ok" only while interpreting.
 2762              	
ARM GAS  forth.s 			page 101


 2763 2538 1C250000 		.word	_LBRAC
 2764 253c 03       	_DOTOK:	.byte  3
 2765 253d 2E4F4B   		.ascii ".OK"
 2766              		.p2align 2 	
 2767              	DOTOK:
 2768 2540 504700BF 		_NEST
 2769 2544 E10F0000 		_DOLIT	INTER
 2769      C4240000 
 2770 254c 8D150000 		_ADR	TEVAL
 2771 2550 69100000 		_ADR	AT
 2772 2554 C9130000 		_ADR	EQUAL
 2773 2558 23100000 		_QBRAN	DOTO1
 2773      68250000 
 2774 2560 3D1E0000 		_DOTQP	3," ok"
 2774      03206F6B 
 2775              	DOTO1:
 2776 2568 D51D0000 		_ADR	CR
 2777 256c 770E0000 		_UNNEST
 2778              	
 2779              	//    ?STACK	( -- )
 2780              	// 	Abort if the data stack underflows.
 2781              	
 2782 2570 3C250000 		.word	_DOTOK
 2783 2574 06       	_QSTAC:	.byte  6
 2784 2575 3F535441 		.ascii "?STACK"
 2784      434B
 2785 257b 00       		.p2align 2 	
 2786              	QSTAC:
 2787 257c 504700BF 		_NEST
 2788 2580 25180000 		_ADR	DEPTH
 2789 2584 49110000 		_ADR	ZLESS	// check only for underflow
 2790 2588 91240000 		_ABORQ	9,"underflow"
 2790      09756E64 
 2790      6572666C 
 2790      6F7700BF 
 2791 2598 770E0000 		_UNNEST
 2792              	
 2793              	//    EVAL	( -- )
 2794              	// 	Interpret the input stream.
 2795              	
 2796 259c 74250000 		.word	_QSTAC
 2797 25a0 04       	_EVAL:	.byte  4
 2798 25a1 4556414C 		.ascii "EVAL"
 2799 25a5 0000BF   		.p2align 2 	
 2800              	EVAL:
 2801 25a8 504700BF 		_NEST
 2802              	EVAL1:
 2803 25ac 4D210000 	    _ADR	TOKEN
 2804 25b0 15110000 		_ADR	DUPP
 2805 25b4 89100000 		_ADR	CAT	// ?input stream empty
 2806 25b8 23100000 		_QBRAN	EVAL2
 2806      D4250000 
 2807 25c0 8D150000 		_ADR	TEVAL
 2808 25c4 C1180000 		_ADR	ATEXE
 2809 25c8 7D250000 		_ADR	QSTAC	// evaluate input, check stack
 2810 25cc 37100000 		_BRAN	EVAL1
 2810      AC250000 
ARM GAS  forth.s 			page 102


 2811              	EVAL2:
 2812 25d4 05110000 		_ADR	DROP
 2813 25d8 41250000 		_ADR	DOTOK
 2814 25dc 770E0000 		_UNNEST	// prompt
 2815              	
 2816              	//    PRESET	( -- )
 2817              	// 	Reset data stack pointer and the terminal input buffer.
 2818              	
 2819 25e0 A0250000 		.word	_EVAL
 2820 25e4 06       	_PRESE:	.byte  6
 2821 25e5 50524553 		.ascii "PRESET"
 2821      4554
 2822 25eb 00       		.p2align 2 	
 2823              	PRESE:
 2824 25ec 504700BF 		_NEST 
 2825 25f0 E10F0000 		_DOLIT SPP 
 2825      00FF0120 
 2826 25f8 E1100000 		_ADR SPSTOR 
 2827 25fc 770E0000 		_UNNEST 
 2828              	
 2829              	//    QUIT	( -- )
 2830              	// 	Reset return stack pointer and start text interpreter.
 2831              	
 2832 2600 E4250000 		.word	_PRESE
 2833 2604 04       	_QUIT:	.byte  4
 2834 2605 51554954 		.ascii "QUIT"
 2835 2609 0000BF   		.p2align 2 	
 2836              	QUIT:
 2837 260c E10F0000 		_DOLIT RPP 
 2837      80FF0120 
 2838 2614 D1100000 		_ADR RPSTOR 
 2839              	QUIT1:
 2840 2618 21250000 		_ADR	LBRAC			// start interpretation
 2841              	QUIT2:
 2842 261c 25240000 		_ADR	QUERY			// get input
 2843 2620 A9250000 		_ADR	EVAL
 2844 2624 37100000 		_BRAN	QUIT2	// continue till error
 2844      1C260000 
 2845              	
 2846 262c 04260000 		.word _QUIT
 2847 2630 06       	_FORGET: .byte 6 
 2848 2631 464F5247 		.ascii "FORGET"
 2848      4554
 2849 2637 00       		.p2align 2
 2850              	FORGET:
 2851 2638 504700BF 		_NEST 
 2852 263c 4D210000 		_ADR TOKEN 
 2853 2640 15110000 		_ADR DUPP 
 2854 2644 23100000 		_QBRAN 9f 
 2854      80260000 
 2855 264c D1220000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2856 2650 E9120000 		_ADR QDUP 
 2857 2654 23100000 		_QBRAN 8f
 2857      7C260000 
 2858 265c 85120000 		_ADR CELLM // ( ca la )
 2859 2660 15110000 		_ADR DUPP 
 2860 2664 CD150000 		_ADR CPP   
ARM GAS  forth.s 			page 103


 2861 2668 55100000 		_ADR STORE
 2862 266c 69100000 		_ADR AT 
 2863 2670 F5150000 		_ADR LAST 
 2864 2674 55100000 		_ADR STORE
 2865 2678 E52A0000 		_ADR OVERT 
 2866 267c 05110000 	8:  _ADR DROP 
 2867 2680 770E0000 	9:	_UNNEST 
 2868              	
 2869              		.p2align 2 
 2870              	
 2871              	// **************************************************************************
 2872              	//  The compiler
 2873              	
 2874              	//    '	   ( -- ca )
 2875              	// 	Search context vocabularies for the next word in input stream.
 2876              	
 2877 2684 30260000 		.word	_FORGET
 2878 2688 01       	_TICK:	.byte  1
 2879 2689 27       		.ascii "'"
 2880 268a 00BF     		.p2align 2 	
 2881              	TICK:
 2882 268c 504700BF 		_NEST
 2883 2690 4D210000 		_ADR	TOKEN
 2884 2694 D1220000 		_ADR	NAMEQ	// ?defined
 2885 2698 23100000 		_QBRAN	TICK1
 2885      A4260000 
 2886 26a0 770E0000 		_UNNEST	// yes, push code address
 2887              	TICK1:	
 2888 26a4 65240000 		_ADR ABORT	// no, error
 2889              	
 2890              	//    ALLOT	( n -- )
 2891              	// 	Allocate n bytes to the ram area.
 2892              	
 2893 26a8 88260000 		.word	_TICK
 2894 26ac 05       	_ALLOT:	.byte  5
 2895 26ad 414C4C4F 		.ascii "ALLOT"
 2895      54
 2896 26b2 00BF     		.p2align 2 	
 2897              	ALLOT:
 2898 26b4 504700BF 		_NEST
 2899 26b8 CD150000 		_ADR	CPP
 2900 26bc 51140000 		_ADR	PSTOR
 2901 26c0 770E0000 		_UNNEST			// adjust code pointer
 2902              	
 2903              	//    ,	   ( w -- )
 2904              	// 	Compile an integer into the code dictionary.
 2905              	
 2906 26c4 AC260000 		.word	_ALLOT
 2907 26c8 012C     	_COMMA:	.byte  1,','
 2908 26ca 00BF     		.p2align 2 	
 2909              	COMMA:
 2910 26cc 504700BF 		_NEST
 2911 26d0 71180000 		_ADR	HERE
 2912 26d4 15110000 		_ADR	DUPP
 2913 26d8 75120000 		_ADR	CELLP	// cell boundary
 2914 26dc CD150000 		_ADR	CPP
 2915 26e0 55100000 		_ADR	STORE
ARM GAS  forth.s 			page 104


 2916 26e4 55100000 		_ADR	STORE
 2917 26e8 770E0000 		_UNNEST	// adjust code pointer, compile
 2918              		.p2align 2 
 2919              	//    [COMPILE]   ( -- //  string> )
 2920              	// 	Compile the next immediate word into code dictionary.
 2921              	
 2922 26ec C8260000 		.word	_COMMA
 2923 26f0 89       	_BCOMP:	.byte  IMEDD+9
 2924 26f1 5B434F4D 		.ascii "[COMPILE]"
 2924      50494C45 
 2924      5D
 2925 26fa 00BF     		.p2align 2 	
 2926              	BCOMP:
 2927 26fc 504700BF 		_NEST
 2928 2700 8D260000 		_ADR	TICK
 2929 2704 CD260000 		_ADR	COMMA
 2930 2708 770E0000 		_UNNEST
 2931              	
 2932              	//    COMPILE	( -- )
 2933              	// 	Compile the next address in colon list to code dictionary.
 2934              	
 2935 270c F0260000 		.word	_BCOMP
 2936 2710 47       	_COMPI:	.byte  COMPO+7
 2937 2711 434F4D50 		.ascii "COMPILE"
 2937      494C45
 2938              		.p2align 2 	
 2939              	COMPI:
 2940 2718 504700BF 		_NEST
 2941 271c 95100000 		_ADR	RFROM
 2942 2720 15110000 		_ADR	DUPP 
 2943 2724 69100000 		_ADR	AT
 2944 2728 E10F0000 		_DOLIT 1 
 2944      01000000 
 2945 2730 6D110000 		_ADR	ORR 
 2946 2734 CD260000 		_ADR	COMMA 
 2947 2738 75120000 		_ADR	CELLP 
 2948 273c BD100000 		_ADR	TOR 
 2949 2740 770E0000 		_UNNEST			// adjust return address
 2950              	
 2951              	//    LITERAL	( w -- )
 2952              	// 	Compile tos to code dictionary as an integer literal.
 2953              	
 2954 2744 10270000 		.word	_COMPI
 2955 2748 87       	_LITER:	.byte  IMEDD+7
 2956 2749 4C495445 		.ascii "LITERAL"
 2956      52414C
 2957              		.p2align 2 	
 2958              	LITER:
 2959 2750 504700BF 		_NEST
 2960 2754 E10F0000 		_COMPI	DOLIT
 2960      E00F0000 
 2960      412B0000 
 2961 2760 CD260000 		_ADR	COMMA
 2962 2764 770E0000 		_UNNEST
 2963              	
 2964              	//    $,"	( -- )
 2965              	// 	Compile a literal string up to next " .
ARM GAS  forth.s 			page 105


 2966              	
 2967              	// 	.word	_LITER
 2968              	// _STRCQ	.byte  3
 2969              	// 	.ascii "$,\""
 2970              	// 	.p2align 2 	
 2971              	STRCQ:
 2972 2768 504700BF 		_NEST
 2973 276c E10F0000 		_DOLIT -4
 2973      FCFFFFFF 
 2974 2774 CD150000 		_ADR	CPP
 2975 2778 51140000 		_ADR	PSTOR
 2976 277c E10F0000 		_DOLIT	'\"'
 2976      22000000 
 2977 2784 29210000 		_ADR	WORDD			// move word to code dictionary
 2978 2788 99140000 		_ADR	COUNT
 2979 278c D9110000 		_ADR	PLUS
 2980 2790 BD170000 		_ADR	ALGND			// calculate aligned end of string
 2981 2794 CD150000 		_ADR	CPP
 2982 2798 55100000 		_ADR	STORE
 2983 279c 770E0000 		_UNNEST 			// adjust the code pointer
 2984              	
 2985              	/*******************
 2986              	//  Structures
 2987              	*******************/
 2988              	//    FOR	 ( -- a )
 2989              	// 	Start a FOR-NEXT loop structure in a colon definition.
 2990              	
 2991 27a0 48270000 		.word	_LITER
 2992 27a4 C3       	_FOR:	.byte  COMPO+IMEDD+3
 2993 27a5 464F52   		.ascii "FOR"
 2994              		.p2align 2 	
 2995              	FOR:
 2996 27a8 504700BF 		_NEST
 2997 27ac E10F0000 		_COMPI	TOR
 2997      BC100000 
 2997      412B0000 
 2998 27b8 71180000 		_ADR	HERE
 2999 27bc 770E0000 		_UNNEST
 3000              	
 3001              	//    BEGIN	( -- a )
 3002              	// 	Start an infinite or indefinite loop structure.
 3003              	
 3004 27c0 A4270000 		.word	_FOR
 3005 27c4 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3006 27c5 42454749 		.ascii "BEGIN"
 3006      4E
 3007 27ca 00BF     		.p2align 2 	
 3008              	BEGIN:
 3009 27cc 504700BF 		_NEST
 3010 27d0 71180000 		_ADR	HERE
 3011 27d4 770E0000 		_UNNEST
 3012              		.p2align 2 
 3013              	
 3014              	//    NEXT	( a -- )
 3015              	// 	Terminate a FOR-NEXT loop structure.
 3016 27d8 C4270000 		.word	_BEGIN
 3017 27dc C4       	_FNEXT:	.byte  COMPO+IMEDD+4
ARM GAS  forth.s 			page 106


 3018 27dd 4E455854 		.ascii "NEXT"
 3019 27e1 0000BF   		.p2align 2 	
 3020              	FNEXT:
 3021 27e4 504700BF 		_NEST
 3022 27e8 E10F0000 		_COMPI	DONXT
 3022      04100000 
 3022      412B0000 
 3023 27f4 CD260000 		_ADR	COMMA
 3024 27f8 770E0000 		_UNNEST
 3025              	
 3026              	//    UNTIL	( a -- )
 3027              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3028              	
 3029 27fc DC270000 		.word	_FNEXT
 3030 2800 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3031 2801 554E5449 		.ascii "UNTIL"
 3031      4C
 3032 2806 00BF     		.p2align 2 	
 3033              	UNTIL:
 3034 2808 504700BF 		_NEST
 3035 280c E10F0000 		_COMPI	QBRAN
 3035      22100000 
 3035      412B0000 
 3036 2818 CD260000 		_ADR	COMMA
 3037 281c 770E0000 		_UNNEST
 3038              	
 3039              	//    AGAIN	( a -- )
 3040              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3041              	
 3042 2820 00280000 		.word	_UNTIL
 3043 2824 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3044 2825 41474149 		.ascii "AGAIN"
 3044      4E
 3045 282a 00BF     		.p2align 2 	
 3046              	AGAIN:
 3047 282c 504700BF 		_NEST
 3048 2830 E10F0000 		_COMPI	BRAN
 3048      36100000 
 3048      412B0000 
 3049 283c CD260000 		_ADR	COMMA
 3050 2840 770E0000 		_UNNEST
 3051              	
 3052              	//    IF	  ( -- A )
 3053              	// 	Begin a conditional branch structure.
 3054              	
 3055 2844 24280000 		.word	_AGAIN
 3056 2848 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3057 2849 4946     		.ascii "IF"
 3058 284b 00       		.p2align 2 	
 3059              	IFF:
 3060 284c 504700BF 		_NEST
 3061 2850 E10F0000 		_COMPI	QBRAN
 3061      22100000 
 3061      412B0000 
 3062 285c 71180000 		_ADR	HERE
 3063 2860 E10F0000 		_DOLIT	4
 3063      04000000 
ARM GAS  forth.s 			page 107


 3064 2868 CD150000 		_ADR	CPP
 3065 286c 51140000 		_ADR	PSTOR
 3066 2870 770E0000 		_UNNEST
 3067              	
 3068              	//    AHEAD	( -- A )
 3069              	// 	Compile a forward branch instruction.
 3070              	
 3071 2874 48280000 		.word	_IFF
 3072 2878 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3073 2879 41484541 		.ascii "AHEAD"
 3073      44
 3074 287e 00BF     		.p2align 2 	
 3075              	AHEAD:
 3076 2880 504700BF 		_NEST
 3077 2884 E10F0000 		_COMPI	BRAN
 3077      36100000 
 3077      412B0000 
 3078 2890 71180000 		_ADR	HERE
 3079 2894 E10F0000 		_DOLIT	4
 3079      04000000 
 3080 289c CD150000 		_ADR	CPP
 3081 28a0 51140000 		_ADR	PSTOR
 3082 28a4 770E0000 		_UNNEST
 3083              	
 3084              	//    REPEAT	( A a -- )
 3085              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3086              	
 3087 28a8 78280000 		.word	_AHEAD
 3088 28ac C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3089 28ad 52455045 		.ascii "REPEAT"
 3089      4154
 3090 28b3 00       		.p2align 2 	
 3091              	REPEA:
 3092 28b4 504700BF 		_NEST
 3093 28b8 2D280000 		_ADR	AGAIN
 3094 28bc 71180000 		_ADR	HERE
 3095 28c0 25110000 		_ADR	SWAP
 3096 28c4 55100000 		_ADR	STORE
 3097 28c8 770E0000 		_UNNEST
 3098              	
 3099              	//    THEN	( A -- )
 3100              	// 	Terminate a conditional branch structure.
 3101              	
 3102 28cc AC280000 		.word	_REPEA
 3103 28d0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3104 28d1 5448454E 		.ascii "THEN"
 3105 28d5 0000BF   		.p2align 2 	
 3106              	THENN:
 3107 28d8 504700BF 		_NEST
 3108 28dc 71180000 		_ADR	HERE
 3109 28e0 25110000 		_ADR	SWAP
 3110 28e4 55100000 		_ADR	STORE
 3111 28e8 770E0000 		_UNNEST
 3112              	
 3113              	//    AFT	 ( a -- a A )
 3114              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3115              	
ARM GAS  forth.s 			page 108


 3116 28ec D0280000 		.word	_THENN
 3117 28f0 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3118 28f1 414654   		.ascii "AFT"
 3119              		.p2align 2 	
 3120              	AFT:
 3121 28f4 504700BF 		_NEST
 3122 28f8 05110000 		_ADR	DROP
 3123 28fc 81280000 		_ADR	AHEAD
 3124 2900 CD270000 		_ADR	BEGIN
 3125 2904 25110000 		_ADR	SWAP
 3126 2908 770E0000 		_UNNEST
 3127              	
 3128              	//    ELSE	( A -- A )
 3129              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3130              	
 3131 290c F0280000 		.word	_AFT
 3132 2910 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3133 2911 454C5345 		.ascii "ELSE"
 3134 2915 0000BF   		.p2align 2 	
 3135              	ELSEE:
 3136 2918 504700BF 		_NEST
 3137 291c 81280000 		_ADR	AHEAD
 3138 2920 25110000 		_ADR	SWAP
 3139 2924 D9280000 		_ADR	THENN
 3140 2928 770E0000 		_UNNEST
 3141              	
 3142              	//    WHILE	( a -- A a )
 3143              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3144              	
 3145 292c 10290000 		.word	_ELSEE
 3146 2930 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3147 2931 5748494C 		.ascii "WHILE"
 3147      45
 3148 2936 00BF     		.p2align 2 	
 3149              	WHILE:
 3150 2938 504700BF 		_NEST
 3151 293c 4D280000 		_ADR	IFF
 3152 2940 25110000 		_ADR	SWAP
 3153 2944 770E0000 		_UNNEST
 3154              	
 3155              	//    ABORT"	( -- //  string> )
 3156              	// 	Conditional abort with an error message.
 3157              	
 3158 2948 30290000 		.word	_WHILE
 3159 294c 86       	_ABRTQ:	.byte  IMEDD+6
 3160 294d 41424F52 		.ascii "ABORT\""
 3160      5422
 3161 2953 00       		.p2align 2 	
 3162              	ABRTQ:
 3163 2954 504700BF 		_NEST
 3164 2958 E10F0000 		_COMPI	ABORQ
 3164      90240000 
 3164      412B0000 
 3165 2964 69270000 		_ADR	STRCQ
 3166 2968 770E0000 		_UNNEST
 3167              	
 3168              	//    $"	( -- //  string> )
ARM GAS  forth.s 			page 109


 3169              	// 	Compile an inline word literal.
 3170              	
 3171 296c 4C290000 		.word	_ABRTQ
 3172 2970 C2       	_STRQ:	.byte  IMEDD+COMPO+2
 3173 2971 2422     		.ascii	"$\""
 3174 2973 00       		.p2align 2 	
 3175              	STRQ:
 3176 2974 504700BF 		_NEST
 3177 2978 E10F0000 		_COMPI	STRQP
 3177      201E0000 
 3177      412B0000 
 3178 2984 69270000 		_ADR	STRCQ
 3179 2988 770E0000 		_UNNEST
 3180              	
 3181              	//    ."	( -- //  string> )
 3182              	// 	Compile an inline word  literal to be typed out at run time.
 3183              	
 3184 298c 70290000 		.word	_STRQ
 3185 2990 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3186 2991 2E22     		.ascii	".\""
 3187 2993 00       		.p2align 2 	
 3188              	DOTQ:
 3189 2994 504700BF 		_NEST
 3190 2998 E10F0000 		_COMPI	DOTQP
 3190      3C1E0000 
 3190      412B0000 
 3191 29a4 69270000 		_ADR	STRCQ
 3192 29a8 770E0000 		_UNNEST
 3193              	
 3194              	// **************************************************************************
 3195              	//  Name compiler
 3196              	
 3197              	//    ?UNIQUE	( a -- a )
 3198              	// 	Display a warning message if the word already exists.
 3199              	
 3200 29ac 90290000 		.word	_DOTQ
 3201 29b0 07       	_UNIQU:	.byte  7
 3202 29b1 3F554E49 		.ascii "?UNIQUE"
 3202      515545
 3203              		.p2align 2 	
 3204              	UNIQU:
 3205 29b8 504700BF 		_NEST
 3206 29bc 15110000 		_ADR	DUPP
 3207 29c0 D1220000 		_ADR	NAMEQ			// ?name exists
 3208 29c4 23100000 		_QBRAN	UNIQ1	// redefinitions are OK
 3208      E4290000 
 3209 29cc 3D1E0000 		_DOTQP	7," reDef "		// but warn the user
 3209      07207265 
 3209      44656620 
 3210 29d8 39110000 		_ADR	OVER
 3211 29dc 99140000 		_ADR	COUNT
 3212 29e0 A11D0000 		_ADR	TYPEE			// just in case its not planned
 3213              	UNIQ1:
 3214 29e4 05110000 		_ADR	DROP
 3215 29e8 770E0000 		_UNNEST
 3216              	
 3217              	//    $,n	 ( na -- )
ARM GAS  forth.s 			page 110


 3218              	// 	Build a new dictionary name using the data at na.
 3219              	
 3220              	// 	.word	_UNIQU
 3221              	// _SNAME	.byte  3
 3222              	// 	.ascii "$,n"
 3223              	// 	.p2align 2 	
 3224              	SNAME:
 3225 29ec 504700BF 		_NEST
 3226 29f0 15110000 		_ADR	DUPP			//  na na
 3227 29f4 89100000 		_ADR	CAT			//  ?null input
 3228 29f8 23100000 		_QBRAN	SNAM1
 3228      342A0000 
 3229 2a00 B9290000 		_ADR	UNIQU			//  na
 3230 2a04 F5150000 		_ADR	LAST			//  na last
 3231 2a08 69100000 		_ADR	AT			//  na la
 3232 2a0c CD260000 		_ADR	COMMA			//  na
 3233 2a10 15110000 		_ADR	DUPP			//  na na
 3234 2a14 F5150000 		_ADR	LAST			//  na na last
 3235 2a18 55100000 		_ADR	STORE			//  na , save na for vocabulary link
 3236 2a1c 99140000 		_ADR	COUNT			//  na+1 count
 3237 2a20 D9110000 		_ADR	PLUS			//  na+1+count
 3238 2a24 BD170000 		_ADR	ALGND			//  word boundary
 3239 2a28 CD150000 		_ADR	CPP
 3240 2a2c 55100000 		_ADR	STORE			//  top of dictionary now
 3241 2a30 770E0000 		_UNNEST
 3242              	SNAM1:
 3243 2a34 211E0000 		_ADR	STRQP
 3244 2a38 07       		.byte	7
 3245 2a39 206E616D 		.ascii " name? "
 3245      653F20
 3246 2a40 65240000 		_ADR	ABORT
 3247              	
 3248              	//    $COMPILE	( a -- )
 3249              	// 	Compile next word to code dictionary as a token or literal.
 3250              	
 3251 2a44 B0290000 		.word	_UNIQU
 3252 2a48 08       	_SCOMP:	.byte  8
 3253 2a49 24434F4D 		.ascii "$COMPILE"
 3253      50494C45 
 3254 2a51 0000BF   		.p2align 2 	
 3255              	SCOMP:
 3256 2a54 504700BF 		_NEST
 3257 2a58 D1220000 		_ADR	NAMEQ
 3258 2a5c E9120000 		_ADR	QDUP	// defined?
 3259 2a60 23100000 		_QBRAN	SCOM2
 3259      902A0000 
 3260 2a68 69100000 		_ADR	AT
 3261 2a6c E10F0000 		_DOLIT	IMEDD
 3261      80000000 
 3262 2a74 59110000 		_ADR	ANDD	// immediate?
 3263 2a78 23100000 		_QBRAN	SCOM1
 3263      882A0000 
 3264 2a80 F90F0000 		_ADR	EXECU
 3265 2a84 770E0000 		_UNNEST			// it's immediate, execute
 3266              	SCOM1:
 3267 2a88 412B0000 		_ADR	CALLC			// it's not immediate, compile
 3268 2a8c 770E0000 		_UNNEST	
ARM GAS  forth.s 			page 111


 3269              	SCOM2:
 3270 2a90 F51B0000 		_ADR	NUMBQ
 3271 2a94 23100000 		_QBRAN	SCOM3
 3271      A42A0000 
 3272 2a9c 51270000 		_ADR	LITER
 3273 2aa0 770E0000 		_UNNEST			// compile number as integer
 3274              	SCOM3: // compilation abort 
 3275 2aa4 AD2A0000 		_ADR COLON_ABORT 
 3276 2aa8 65240000 		_ADR	ABORT			// error
 3277              	
 3278              	// before aborting a compilation 
 3279              	// reset HERE and LAST
 3280              	// to previous values. 
 3281              	COLON_ABORT:
 3282 2aac 504700BF 		_NEST 
 3283 2ab0 F5150000 		_ADR LAST 
 3284 2ab4 69100000 		_ADR AT 
 3285 2ab8 85120000 		_ADR CELLM 
 3286 2abc 15110000 		_ADR DUPP 
 3287 2ac0 CD150000 		_ADR CPP  
 3288 2ac4 55100000 		_ADR STORE 
 3289 2ac8 69100000 		_ADR AT 
 3290 2acc F5150000 		_ADR LAST 
 3291 2ad0 55100000 		_ADR STORE 
 3292 2ad4 770E0000 		_UNNEST 
 3293              	
 3294              	//    OVERT	( -- )
 3295              	// 	Link a new word into the current vocabulary.
 3296              	
 3297 2ad8 482A0000 		.word	_SCOMP
 3298 2adc 05       	_OVERT:	.byte  5
 3299 2add 4F564552 		.ascii "OVERT"
 3299      54
 3300 2ae2 00BF     		.p2align 2 	
 3301              	OVERT:
 3302 2ae4 504700BF 		_NEST
 3303 2ae8 F5150000 		_ADR	LAST
 3304 2aec 69100000 		_ADR	AT
 3305 2af0 B9150000 		_ADR	CNTXT
 3306 2af4 55100000 		_ADR	STORE
 3307 2af8 770E0000 		_UNNEST
 3308              	
 3309              	//    ; 	   ( -- )
 3310              	// 	Terminate a colon definition.
 3311              	
 3312 2afc DC2A0000 		.word	_OVERT
 3313 2b00 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3314 2b01 3B       		.ascii ";"
 3315 2b02 00BF     		.p2align 2 	
 3316              	SEMIS:
 3317 2b04 504700BF 		_NEST
 3318 2b08 E10F0000 		_DOLIT	UNNEST
 3318      760E0000 
 3319 2b10 412B0000 		_ADR	CALLC
 3320 2b14 21250000 		_ADR	LBRAC
 3321 2b18 E52A0000 		_ADR	OVERT
 3322 2b1c 770E0000 		_UNNEST
ARM GAS  forth.s 			page 112


 3323              	
 3324              	//    ]	   ( -- )
 3325              	// 	Start compiling the words in the input stream.
 3326              	
 3327 2b20 002B0000 		.word	_SEMIS
 3328 2b24 01       	_RBRAC:	.byte  1
 3329 2b25 5D       		.ascii "]"
 3330 2b26 00BF     		.p2align 2 	
 3331              	RBRAC:
 3332 2b28 504700BF 		_NEST
 3333 2b2c E10F0000 		_DOLIT	SCOMP
 3333      542A0000 
 3334 2b34 8D150000 		_ADR	TEVAL
 3335 2b38 55100000 		_ADR	STORE
 3336 2b3c 770E0000 		_UNNEST
 3337              	
 3338              	//    BL.W	( ca -- )
 3339              	// 	compile ca.
 3340              	
 3341              	// 	.word	_RBRAC
 3342              	// _CALLC	.byte  5
 3343              	// 	.ascii "call,"
 3344              	// 	.p2align 2 	
 3345              	CALLC:
 3346 2b40 504700BF 		_NEST
 3347 2b44 E10F0000 		_DOLIT 1 
 3347      01000000 
 3348 2b4c 6D110000 		_ADR ORR 
 3349 2b50 CD260000 		_ADR COMMA  
 3350 2b54 770E0000 		_UNNEST 
 3351              	
 3352              	
 3353              	// 	:	( -- //  string> )
 3354              	// 	Start a new colon definition using next word as its name.
 3355              	
 3356 2b58 242B0000 		.word	_RBRAC
 3357 2b5c 01       	_COLON:	.byte  1
 3358 2b5d 3A       		.ascii ":"
 3359 2b5e 00BF     		.p2align 2 	
 3360              	COLON:
 3361 2b60 504700BF 		_NEST
 3362 2b64 4D210000 		_ADR	TOKEN
 3363 2b68 ED290000 		_ADR	SNAME
 3364 2b6c 810E0000 		_ADR	COMPI_NEST 
 3365 2b70 292B0000 		_ADR	RBRAC
 3366 2b74 770E0000 		_UNNEST
 3367              	
 3368              	//    IMMEDIATE   ( -- )
 3369              	// 	Make the last compiled word an immediate word.
 3370              	
 3371 2b78 5C2B0000 		.word	_COLON
 3372 2b7c 09       	_IMMED:	.byte  9
 3373 2b7d 494D4D45 		.ascii "IMMEDIATE"
 3373      44494154 
 3373      45
 3374 2b86 00BF     		.p2align 2 	
 3375              	IMMED:
ARM GAS  forth.s 			page 113


 3376 2b88 504700BF 		_NEST
 3377 2b8c E10F0000 		_DOLIT	IMEDD
 3377      80000000 
 3378 2b94 F5150000 		_ADR	LAST
 3379 2b98 69100000 		_ADR	AT
 3380 2b9c 69100000 		_ADR	AT
 3381 2ba0 6D110000 		_ADR	ORR
 3382 2ba4 F5150000 		_ADR	LAST
 3383 2ba8 69100000 		_ADR	AT
 3384 2bac 55100000 		_ADR	STORE
 3385 2bb0 770E0000 		_UNNEST
 3386              	
 3387              	// **************************************************************************
 3388              	//  Defining words
 3389              	
 3390              	//    CONSTANT	( u -- //  string> )
 3391              	// 	Compile a new constant.
 3392              	
 3393 2bb4 7C2B0000 		.word	_IMMED
 3394 2bb8 08       	_CONST:	.byte  8
 3395 2bb9 434F4E53 		.ascii "CONSTANT"
 3395      54414E54 
 3396 2bc1 0000BF   		.p2align 2 	
 3397              	CONST:
 3398 2bc4 504700BF 		_NEST 
 3399 2bc8 4D210000 		_ADR	TOKEN
 3400 2bcc ED290000 		_ADR	SNAME
 3401 2bd0 E52A0000 		_ADR	OVERT
 3402 2bd4 810E0000 		_ADR	COMPI_NEST
 3403 2bd8 E10F0000 		_DOLIT	DOCON
 3403      CC140000 
 3404 2be0 412B0000 		_ADR	CALLC
 3405 2be4 CD260000 		_ADR	COMMA
 3406 2be8 E10F0000 		_DOLIT	UNNEST 
 3406      760E0000 
 3407 2bf0 412B0000 		_ADR	CALLC  
 3408 2bf4 770E0000 		_UNNEST
 3409              	
 3410              		.p2align 2 
 3411              	// doDOES> ( -- a )
 3412              	// runtime action of DOES> 
 3413              	// leave parameter field address on stack 
 3414              	DODOES:
 3415 2bf8 504700BF 		_NEST 
 3416 2bfc 95100000 		_ADR	RFROM
 3417 2c00 75120000 		_ADR	CELLP 
 3418 2c04 35120000 		_ADR	ONEP  
 3419 2c08 F5150000 		_ADR LAST 
 3420 2c0c 69100000 		_ADR AT
 3421 2c10 69210000 		_ADR NAMET 
 3422 2c14 75120000 		_ADR CELLP 
 3423 2c18 55100000 		_ADR STORE  
 3424 2c1c 770E0000 		_UNNEST 
 3425              	
 3426              		.p2align 2
 3427              	//  DOES> ( -- )
 3428              	//  compile time action 
ARM GAS  forth.s 			page 114


 3429 2c20 B82B0000 		.word _CONST   
 3430 2c24 C5       	_DOES: .byte IMEDD+COMPO+5 
 3431 2c25 444F4553 		.ascii "DOES>"
 3431      3E
 3432 2c2a 00BF     		.p2align 2
 3433              	DOES: 
 3434 2c2c 504700BF 		_NEST 
 3435 2c30 E10F0000 		_DOLIT DODOES 
 3435      F82B0000 
 3436 2c38 412B0000 		_ADR CALLC 
 3437 2c3c E10F0000 		_DOLIT	UNNEST
 3437      760E0000 
 3438 2c44 412B0000 		_ADR	CALLC 
 3439 2c48 810E0000 		_ADR COMPI_NEST
 3440 2c4c E10F0000 		_DOLIT RFROM 
 3440      94100000 
 3441 2c54 412B0000 		_ADR	CALLC
 3442 2c58 770E0000 		_UNNEST 
 3443              	
 3444              	
 3445              	
 3446              	//  DEFER@ ( "name" -- a )
 3447              	//  return value of code field of defered function. 
 3448 2c5c 242C0000 		.word _DOES 
 3449 2c60 06       	_DEFERAT: .byte 6 
 3450 2c61 44454645 		.ascii "DEFER@"
 3450      5240
 3451 2c67 00       		.p2align 2 
 3452              	DEFERAT: 
 3453 2c68 504700BF 		_NEST 
 3454 2c6c 8D260000 		_ADR TICK
 3455 2c70 75120000 		_ADR CELLP 
 3456 2c74 69100000 		_ADR AT 
 3457 2c78 45120000 		_ADR ONEM 
 3458 2c7c 770E0000 		_UNNEST 
 3459              	
 3460              	// DEFER! ( "name1" "name2" -- )
 3461              	// assign an action to a defered word 
 3462 2c80 602C0000 		.word _DEFERAT 
 3463 2c84 06       	_DEFERSTO: .byte 6 
 3464 2c85 44454645 		.ascii "DEFER!" 
 3464      5221
 3465 2c8b 00       		.p2align 2 
 3466              	DEFERSTO:
 3467 2c8c 504700BF 		_NEST 
 3468 2c90 8D260000 		_ADR TICK 
 3469 2c94 35120000 		_ADR ONEP 
 3470 2c98 8D260000 		_ADR TICK 
 3471 2c9c 75120000 		_ADR CELLP 
 3472 2ca0 55100000 		_ADR STORE 
 3473 2ca4 770E0000 		_UNNEST
 3474              	
 3475              	//  DEFER ( "name" -- )
 3476              	//  create a defered definition
 3477 2ca8 842C0000 		.word _DEFERSTO  
 3478 2cac 05       	_DEFER: .byte 5 
 3479 2cad 44454645 		.ascii "DEFER"
ARM GAS  forth.s 			page 115


 3479      52
 3480 2cb2 00BF     		.p2align 2
 3481              	DEFER:
 3482 2cb4 504700BF 		_NEST 
 3483 2cb8 052D0000 		_ADR CREAT 
 3484 2cbc E10F0000 		_DOLIT UNNEST 
 3484      760E0000 
 3485 2cc4 412B0000 		_ADR CALLC 
 3486 2cc8 E10F0000 		_DOLIT DEFER_NOP
 3486      EC2C0000 
 3487 2cd0 35120000 		_ADR ONEP 
 3488 2cd4 F5150000 		_ADR LAST 
 3489 2cd8 69100000 		_ADR AT 
 3490 2cdc 69210000 		_ADR NAMET 
 3491 2ce0 75120000 		_ADR CELLP 
 3492 2ce4 55100000 		_ADR STORE 
 3493 2ce8 770E0000 		_UNNEST 
 3494              	DEFER_NOP:
 3495 2cec 504700BF 		_NEST  
 3496 2cf0 DD0F0000 		_ADR NOP 
 3497 2cf4 770E0000 		_UNNEST 
 3498              	
 3499              	//    CREATE	( -- //  string> )
 3500              	// 	Compile a new array entry without allocating code space.
 3501              	
 3502 2cf8 AC2C0000 		.word	_DEFER 
 3503 2cfc 06       	_CREAT:	.byte  6
 3504 2cfd 43524541 		.ascii "CREATE"
 3504      5445
 3505 2d03 00       		.p2align 2 	
 3506              	CREAT:
 3507 2d04 504700BF 		_NEST 
 3508 2d08 4D210000 		_ADR	TOKEN
 3509 2d0c ED290000 		_ADR	SNAME
 3510 2d10 E52A0000 		_ADR	OVERT
 3511 2d14 810E0000 		_ADR	COMPI_NEST 
 3512 2d18 E10F0000 		_DOLIT	DOVAR
 3512      C0140000 
 3513 2d20 412B0000 		_ADR	CALLC
 3514 2d24 770E0000 		_UNNEST
 3515              	
 3516              	//    VARIABLE	( -- //  string> )
 3517              	// 	Compile a new variable initialized to 0.
 3518              	
 3519 2d28 FC2C0000 		.word	_CREAT
 3520 2d2c 08       	_VARIA:	.byte  8
 3521 2d2d 56415249 		.ascii "VARIABLE"
 3521      41424C45 
 3522 2d35 0000BF   		.p2align 2 	
 3523              	VARIA:
 3524 2d38 504700BF 		_NEST
 3525 2d3c 052D0000 		_ADR	CREAT
 3526 2d40 E10F0000 		_DOLIT	0
 3526      00000000 
 3527 2d48 CD260000 		_ADR	COMMA
 3528 2d4c E10F0000 		_DOLIT UNNEST
 3528      760E0000 
ARM GAS  forth.s 			page 116


 3529 2d54 412B0000 		_ADR	CALLC  
 3530 2d58 770E0000 		_UNNEST
 3531              	
 3532              	// **************************************************************************
 3533              	//  Tools
 3534              	
 3535              	//    dm+	 ( a u -- a )
 3536              	// 	Dump u bytes from , leaving a+u on the stack.
 3537              	
 3538              	// 	.word	_VARIA 
 3539              	// _DMP	.byte  3
 3540              	// 	.ascii "dm+"
 3541              	// 	.p2align 2 	
 3542              	DMP:
 3543 2d5c 504700BF 		_NEST
 3544 2d60 39110000 		_ADR	OVER
 3545 2d64 E10F0000 		_DOLIT	4
 3545      04000000 
 3546 2d6c 811E0000 		_ADR	UDOTR			// display address
 3547 2d70 4D1D0000 		_ADR	SPACE
 3548 2d74 BD100000 		_ADR	TOR			// start count down loop
 3549 2d78 37100000 		_BRAN	PDUM2			// skip first pass
 3549      982D0000 
 3550              	PDUM1:
 3551 2d80 15110000 	  _ADR	DUPP
 3552 2d84 89100000 		_ADR	CAT
 3553 2d88 E10F0000 		_DOLIT	3
 3553      03000000 
 3554 2d90 811E0000 		_ADR	UDOTR			// display numeric data
 3555 2d94 35120000 		_ADR	ONEP			// increment address
 3556              	PDUM2:
 3557 2d98 05100000 	  _ADR	DONXT
 3558 2d9c 802D0000 		.word	PDUM1	// loop till done
 3559 2da0 770E0000 		_UNNEST
 3560              		.p2align 2 
 3561              	//    DUMP	( a u -- )
 3562              	// 	Dump u bytes from a, in a formatted manner.
 3563              	
 3564 2da4 2C2D0000 		.word	_VARIA
 3565 2da8 04       	_DUMP:	.byte  4
 3566 2da9 44554D50 		.ascii "DUMP"
 3567 2dad 0000BF   		.p2align 2 	
 3568              	DUMP:
 3569 2db0 504700BF 		_NEST
 3570 2db4 31150000 		_ADR	BASE
 3571 2db8 69100000 		_ADR	AT
 3572 2dbc BD100000 		_ADR	TOR
 3573 2dc0 451B0000 		_ADR	HEX			// save radix,set hex
 3574 2dc4 E10F0000 		_DOLIT	16
 3574      10000000 
 3575 2dcc 5D170000 		_ADR	SLASH			// change count to lines
 3576 2dd0 BD100000 		_ADR	TOR
 3577 2dd4 37100000 		_BRAN	DUMP4			// start count down loop
 3577      042E0000 
 3578              	DUMP1:
 3579 2ddc D51D0000 	  _ADR	CR
 3580 2de0 E10F0000 		_DOLIT	16
ARM GAS  forth.s 			page 117


 3580      10000000 
 3581 2de8 4D130000 		_ADR	DDUP
 3582 2dec 5D2D0000 		_ADR	DMP			// display numeric
 3583 2df0 FD120000 		_ADR	ROT
 3584 2df4 FD120000 		_ADR	ROT
 3585 2df8 4D1D0000 		_ADR	SPACE
 3586 2dfc 4D1D0000 		_ADR	SPACE
 3587 2e00 A11D0000 		_ADR	TYPEE			// display printable characters
 3588              	DUMP4:
 3589 2e04 05100000 	  _DONXT	DUMP1	// loop till done
 3589      DC2D0000 
 3590              	DUMP3:
 3591 2e0c 05110000 		_ADR	DROP
 3592 2e10 95100000 		_ADR	RFROM
 3593 2e14 31150000 		_ADR	BASE
 3594 2e18 55100000 		_ADR	STORE			// restore radix
 3595 2e1c 770E0000 		_UNNEST
 3596              	
 3597              	//    .S	  ( ... -- ... )
 3598              	// 	Display the contents of the data stack.
 3599              	
 3600 2e20 A82D0000 		.word	_DUMP
 3601              	_DOTS:
 3602 2e24 02       		.byte  2
 3603 2e25 2E53     		.ascii ".S"
 3604 2e27 00       		.p2align 2 	
 3605              	DOTS:
 3606 2e28 504700BF 		_NEST
 3607 2e2c 4D1D0000 		_ADR	SPACE
 3608 2e30 25180000 		_ADR	DEPTH			// stack depth
 3609 2e34 BD100000 		_ADR	TOR			// start count down loop
 3610 2e38 37100000 		_BRAN	DOTS2			// skip first pass
 3610      4C2E0000 
 3611              	DOTS1:
 3612 2e40 A9100000 		_ADR	RAT
 3613 2e44 49180000 		_ADR	PICK
 3614 2e48 D91E0000 		_ADR	DOT			// index stack, display contents
 3615              	DOTS2:
 3616 2e4c 05100000 		_DONXT	DOTS1	// loop till done
 3616      402E0000 
 3617 2e54 4D1D0000 		_ADR	SPACE
 3618 2e58 770E0000 		_UNNEST
 3619              	
 3620              	//    >NAME	( ca -- na | F )
 3621              	// 	Convert code address to a name address.
 3622              	
 3623 2e5c 242E0000 		.word	_DOTS
 3624 2e60 05       	_TNAME:	.byte  5
 3625 2e61 3E4E414D 		.ascii ">NAME"
 3625      45
 3626 2e66 00BF     		.p2align 2 	
 3627              	TNAME:
 3628 2e68 504700BF 		_NEST
 3629 2e6c BD100000 		_ADR	TOR			//  
 3630 2e70 B9150000 		_ADR	CNTXT			//  va
 3631 2e74 69100000 		_ADR	AT			//  na
 3632              	TNAM1:
ARM GAS  forth.s 			page 118


 3633 2e78 15110000 		_ADR	DUPP			//  na na
 3634 2e7c 23100000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3634      AC2E0000 
 3635 2e84 15110000 		_ADR	DUPP			//  na na
 3636 2e88 69210000 		_ADR	NAMET			//  na ca
 3637 2e8c A9100000 		_ADR	RAT			//  na ca code
 3638 2e90 81110000 		_ADR	XORR			//  na f --
 3639 2e94 23100000 		_QBRAN	TNAM2
 3639      AC2E0000 
 3640 2e9c 85120000 		_ADR	CELLM			//  la 
 3641 2ea0 69100000 		_ADR	AT			//  next_na
 3642 2ea4 37100000 		_BRAN	TNAM1
 3642      782E0000 
 3643              	TNAM2:	
 3644 2eac 95100000 		_ADR	RFROM
 3645 2eb0 05110000 		_ADR	DROP			//  0|na --
 3646 2eb4 770E0000 		_UNNEST			// 0
 3647              	
 3648              	//    .ID	 ( na -- )
 3649              	// 	Display the name at address.
 3650              	
 3651 2eb8 602E0000 		.word	_TNAME
 3652 2ebc 03       	_DOTID:	.byte  3
 3653 2ebd 2E4944   		.ascii ".ID"
 3654              		.p2align 2 	
 3655              	DOTID:
 3656 2ec0 504700BF 		_NEST
 3657 2ec4 E9120000 		_ADR	QDUP			// if zero no name
 3658 2ec8 23100000 		_QBRAN	DOTI1
 3658      E82E0000 
 3659 2ed0 99140000 		_ADR	COUNT
 3660 2ed4 E10F0000 		_DOLIT	0x1F
 3660      1F000000 
 3661 2edc 59110000 		_ADR	ANDD			// mask lexicon bits
 3662 2ee0 A11D0000 		_ADR	TYPEE
 3663 2ee4 770E0000 		_UNNEST			// display name string
 3664              	DOTI1:
 3665 2ee8 3D1E0000 		_DOTQP	9," {noName}"
 3665      09207B6E 
 3665      6F4E616D 
 3665      657D00BF 
 3666 2ef8 770E0000 		_UNNEST
 3667              	
 3668              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3669              	.if WANT_SEE 
 3670              	//    SEE	 ( -- //  string> )
 3671              	// 	A simple decompiler.
 3672              	
 3673              		.word	_DOTID
 3674              	_SEE:	.byte  3
 3675              		.ascii "SEE"
 3676              		.p2align 2 	
 3677              	SEE:
 3678              		_NEST
 3679              		_ADR	TICK	//  ca --, starting address
 3680              		_ADR	CR	
 3681              		_DOLIT	20
ARM GAS  forth.s 			page 119


 3682              		_ADR	TOR
 3683              	SEE1:
 3684              		_ADR	CELLP			//  a
 3685              		_ADR	DUPP			//  a a
 3686              		_ADR	DECOMP		//  a
 3687              		_DONXT	SEE1
 3688              		_ADR	DROP
 3689              		_UNNEST
 3690              	
 3691              	// 	DECOMPILE ( a -- )
 3692              	// 	Convert code in a.  Display name of command or as data.
 3693              	
 3694              		.word	_SEE
 3695              	_DECOM:	.byte  9
 3696              		.ascii "DECOMPILE"
 3697              		.p2align 2 
 3698              		
 3699              	DECOMP:	
 3700              		_NEST
 3701              		_ADR	DUPP			//  a a
 3702              	// 	_ADR	TOR			//  a
 3703              		_ADR	AT			//  a code
 3704              		_ADR	DUPP			//  a code code
 3705              		_DOLIT	0xF800D000 //0xF800F800
 3706              		_ADR	ANDD
 3707              		_DOLIT	0xF000D000 //0xF800F000
 3708              		_ADR	EQUAL			//  a code ?
 3709              		_ADR	INVER 
 3710              		_QBRAN	DECOM2	//  not a command
 3711              		//  a valid_code --, extract address and display name
 3712              		MOVW	IP,#0xFFE
 3713              		MOV	WP,TOS
 3714              		LSL	TOS,TOS,#21		//  get bits 22-12
 3715              		ASR	TOS,TOS,#9		//  with sign extension
 3716              		LSR	WP,WP,#15		//  get bits 11-1
 3717              		AND	WP,WP,IP		//  retain only bits 11-1
 3718              		ORR	TOS,TOS,WP		//  get bits 22-1
 3719              		NOP
 3720              		_ADR	OVER			//  a offset a
 3721              		_ADR	PLUS			//  a target-4
 3722              		_ADR	CELLP			//  a target
 3723              		_ADR	TNAME			//  a na/0 --, is it a name?
 3724              		_ADR	QDUP			//  name address or zero
 3725              		_QBRAN	DECOM1
 3726              		_ADR	SPACE			//  a na
 3727              		_ADR	DOTID			//  a --, display name
 3728              	// 	_ADR	RFROM			//  a
 3729              		_ADR	DROP
 3730              		_UNNEST
 3731              	DECOM1:	// _ADR	RFROM		//  a
 3732              		_ADR	AT			//  data
 3733              		_ADR	UDOT			//  display data
 3734              		_UNNEST
 3735              	DECOM2:
 3736              		_ADR	UDOT
 3737              	// 	_ADR	RFROM
 3738              		_ADR	DROP
ARM GAS  forth.s 			page 120


 3739              		_UNNEST
 3740              	
 3741              	//    WORDS	( -- )
 3742              	// 	Display the names in the context vocabulary.
 3743              	
 3744              		.word	_DECOM
 3745              	.else 
 3746 2efc BC2E0000 		.word _DOTID 
 3747              	.endif 
 3748 2f00 05       	_WORDS:	.byte  5
 3749 2f01 574F5244 		.ascii "WORDS"
 3749      53
 3750 2f06 00BF     		.p2align 2 	
 3751              	WORDS:
 3752 2f08 504700BF 		_NEST
 3753 2f0c D51D0000 		_ADR	CR
 3754 2f10 B9150000 		_ADR	CNTXT
 3755 2f14 69100000 		_ADR	AT			// only in context
 3756              	WORS1:
 3757 2f18 E9120000 		_ADR	QDUP			// ?at end of list
 3758 2f1c 23100000 		_QBRAN	WORS2
 3758      402F0000 
 3759 2f24 15110000 		_ADR	DUPP
 3760 2f28 4D1D0000 		_ADR	SPACE
 3761 2f2c C12E0000 		_ADR	DOTID			// display a name
 3762 2f30 85120000 		_ADR	CELLM
 3763 2f34 69100000 		_ADR	AT
 3764 2f38 37100000 		_BRAN	WORS1
 3764      182F0000 
 3765              	WORS2:
 3766 2f40 770E0000 		_UNNEST
 3767              	
 3768              	// **************************************************************************
 3769              	//  cold start
 3770              	
 3771              	//    VER	 ( -- n )
 3772              	// 	Return the version number of this implementation.
 3773              	
 3774              	// 	.word	_WORDS
 3775              	// _VERSN	.byte  3
 3776              	// 	.ascii "VER"
 3777              	// 	.p2align 2 	
 3778              	VERSN:
 3779 2f44 504700BF 		_NEST
 3780 2f48 E10F0000 		_DOLIT	VER*256+EXT
 3780      00010000 
 3781 2f50 770E0000 		_UNNEST
 3782              	
 3783              	//    hi	  ( -- )
 3784              	// 	Display the sign-on message of eForth.
 3785              	
 3786 2f54 002F0000 		.word	_WORDS
 3787 2f58 02       	_HI:	.byte  2
 3788 2f59 4849     		.ascii "HI"
 3789 2f5b 00       		.p2align 2
 3790              	
 3791              	HI:
ARM GAS  forth.s 			page 121


 3792 2f5c 504700BF 		_NEST
 3793 2f60 D51D0000 		_ADR	CR	// initialize I/O
 3794 2f64 3D1E0000 		_DOTQP	17, "beyond Jupiter, v" 
 3794      11626579 
 3794      6F6E6420 
 3794      4A757069 
 3794      7465722C 
 3795 2f7c 31150000 		_ADR	BASE
 3796 2f80 69100000 		_ADR	AT
 3797 2f84 451B0000 		_ADR	HEX	// save radix
 3798 2f88 452F0000 		_ADR	VERSN
 3799 2f8c 351A0000 		_ADR	BDIGS
 3800 2f90 811A0000 		_ADR	DIG
 3801 2f94 811A0000 		_ADR	DIG
 3802 2f98 E10F0000 		_DOLIT	'.'
 3802      2E000000 
 3803 2fa0 551A0000 		_ADR	HOLD
 3804 2fa4 A11A0000 		_ADR	DIGS
 3805 2fa8 F51A0000 		_ADR	EDIGS
 3806 2fac A11D0000 		_ADR	TYPEE	// format version number
 3807 2fb0 31150000 		_ADR	BASE
 3808 2fb4 55100000 		_ADR	STORE
 3809 2fb8 D51D0000 		_ADR	CR
 3810 2fbc 770E0000 		_UNNEST			// restore radix
 3811              	
 3812              	//    COLD	( -- )
 3813              	// 	The high level cold start sequence.
 3814              	
 3815 2fc0 582F0000 		.word	_HI
 3816 2fc4 04       	_LASTN:	.byte  4
 3817 2fc5 434F4C44 		.ascii "COLD"
 3818 2fc9 0000BF   		.p2align 2	
 3819              	COLD:
 3820 2fcc 00B5FDF7 		_CALL forth_init 
 3820      8DF85DF8 
 3820      04EB
 3821 2fd6 DFF84CC0 		ldr IP,=COLD1 
 3822 2fda FDF749BF 		_NEXT
 3823 2fde 00BF     		.p2align 2 
 3824              	COLD1:
 3825 2fe0 E10F0000 		_DOLIT  0 
 3825      00000000 
 3826 2fe8 01000000 		_ADR ULED // turn off user LED 
 3827 2fec E10F0000 		_DOLIT	UZERO
 3827      0C030000 
 3828 2ff4 E10F0000 		_DOLIT	UPP
 3828      00000020 
 3829 2ffc E10F0000 		_DOLIT	ULAST-UZERO
 3829      A0000000 
 3830 3004 11190000 		_ADR	MOVE 			// initialize user area
 3831 3008 ED250000 		_ADR	PRESE			// initialize stack and TIB
 3832 300c 1D150000 		_ADR	TBOOT
 3833 3010 C1180000 		_ADR	ATEXE			// application boot
 3834 3014 E52A0000 		_ADR	OVERT
 3835 3018 37100000 		_BRAN	QUIT			// start interpretation
 3835      0C260000 
 3836              	COLD2:
ARM GAS  forth.s 			page 122


 3837              		.p2align 2 	
 3838              	CTOP:
 3839 3020 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3840              	
 3841              	
 3842 3024 E02F0000 	  .end 
ARM GAS  forth.s 			page 123


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 124


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 125


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:205    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:206    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:207    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:208    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:209    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:210    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:211    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:212    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:213    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:214    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:215    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:216    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:217    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:218    *ABS*:0000000000000004 FLASH_IRQ
ARM GAS  forth.s 			page 126


     stm32f411ce.inc:219    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:220    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:221    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:222    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:223    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:224    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:225    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:226    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:227    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:228    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:229    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:230    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:231    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:232    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:233    *ABS*:0000000000000017 EXIT9_5_IRQ
     stm32f411ce.inc:234    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:235    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:236    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:237    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:238    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:239    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:240    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:241    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:242    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:243    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:251    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:252    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:254    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:255    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:256    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:257    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:260    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:266    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:267    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:268    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:269    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:270    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:274    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:275    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:276    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:277    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:279    *ABS*:0000000040000000 TIM2_BASE_ADR
ARM GAS  forth.s 			page 127


     stm32f411ce.inc:280    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:281    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:282    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:285    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:286    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:289    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:290    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:291    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:292    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:293    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:294    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:295    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:296    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:297    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:298    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:299    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:300    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:301    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:302    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:303    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:304    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:305    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:306    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:307    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:308    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:311    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:313    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:314    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:315    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:316    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:317    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:318    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:319    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:322    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:324    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:325    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:326    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:327    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:328    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:329    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
ARM GAS  forth.s 			page 128


          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 NBASE
          macros.inc:78     *ABS*:0000000000000018 TMP
          macros.inc:79     *ABS*:000000000000001c CSPAN
          macros.inc:80     *ABS*:0000000000000020 TOIN
          macros.inc:81     *ABS*:0000000000000024 NTIBB
          macros.inc:82     *ABS*:0000000000000028 TIBUF
             forth.s:2800   .text:00000000000025a8 EVAL
             forth.s:1753   .text:0000000000001a54 HOLD
          macros.inc:85     *ABS*:0000000000000034 CTXT
          macros.inc:86     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:87     *ABS*:000000000000003c USER_CTOP
          macros.inc:88     *ABS*:0000000000000040 LASTN
          macros.inc:89     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:90     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:91     *ABS*:0000000000000054 RX_HEAD
          macros.inc:92     *ABS*:0000000000000058 RX_TAIL
          macros.inc:93     *ABS*:000000000000005c VID_CNTR
          macros.inc:94     *ABS*:0000000000000060 VID_STATE
          macros.inc:95     *ABS*:0000000000000064 VID_FIELD
          macros.inc:96     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:97     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:98     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:99     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:100    *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:101    *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:102    *ABS*:0000000000000088 ROW
          macros.inc:103    *ABS*:000000000000008c COL
          macros.inc:104    *ABS*:0000000000000090 BK_COLOR
          macros.inc:105    *ABS*:0000000000000094 PEN_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:253    .text:00000000000000c4 reset_handler
              init.s:157    .text:0000000000000000 default_handler
              init.s:174    .text:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
             tvout.s:128    .text:0000000000000458 tv_out_isr
              init.s:191    .text:000000000000003c uart_rx_handler
           ps2_kbd.s:74     .text:0000000000000b10 kbd_isr
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .text:0000000000000000 $t
              init.s:162    .text:0000000000000008 exception_msg
              init.s:229    .text:0000000000000098 uart_puts
              init.s:211    .text:000000000000006c reset_mcu
              init.s:163    .text:0000000000000008 $d
              init.s:183    .text:000000000000003a systick_exit
              init.s:208    .text:0000000000000066 user_reboot
ARM GAS  forth.s 			page 129


              init.s:219    .text:0000000000000084 user_reboot_msg
              init.s:220    .text:0000000000000084 $d
              init.s:223    .text:0000000000000096 $t
              init.s:407    .text:0000000000000242 remap
              init.s:281    .text:0000000000000114 init_devices
              init.s:376    .text:00000000000001ea uart_init
             tvout.s:62     .text:00000000000003b4 tv_init
           ps2_kbd.s:149    .text:0000000000000be4 kbd_init
              init.s:268    .text:00000000000000ec forth_init
             forth.s:3819   .text:0000000000002fcc COLD
             forth.s:85     .text:0000000000000e68 NEST
              init.s:294    .text:0000000000000132 wait_hserdy
              init.s:315    .text:0000000000000154 wait_pllrdy
              init.s:327    .text:000000000000016e wait_sws
              init.s:432    .text:0000000000000282 nvic_set_priority
              init.s:453    .text:00000000000002b4 nvic_enable_irq
              init.s:491    .text:000000000000030c UZERO
              init.s:525    .text:00000000000003ac ULAST
              init.s:441    .text:000000000000029a negative_irq
              init.s:470    .text:00000000000002e0 nvic_disable_irq
              init.s:492    .text:000000000000030c $d
             forth.s:3791   .text:0000000000002f5c HI
             forth.s:2728   .text:00000000000024c4 INTER
             forth.s:3816   .text:0000000000002fc4 _LASTN
             forth.s:3838   .text:0000000000003020 CTOP
              init.s:526    .text:00000000000003ac $d
           tvout.inc:2      *ABS*:0000000000000140 HRES
           tvout.inc:3      *ABS*:00000000000000c8 VRES
           tvout.inc:4      *ABS*:0000000000000004 BPP
           tvout.inc:5      *ABS*:00000000000000a0 BPR
           tvout.inc:6      *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:8      *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:9      *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:37     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:38     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:39     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:40     *ABS*:000000000000173f VIDEO_END
             tvout.s:43     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:44     *ABS*:0000000000000001 ST_PREVID
             tvout.s:45     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:46     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:48     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:49     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:62     .text:00000000000003b4 $t
             tvout.s:147    .text:0000000000000484 state_vsync
             tvout.s:188    .text:00000000000004d8 state_pre_video
             tvout.s:199    .text:00000000000004ea state_video_out
             tvout.s:229    .text:0000000000000542 state_post_video
             tvout.s:246    .text:0000000000000568 tv_isr_exit
ARM GAS  forth.s 			page 130


             tvout.s:177    .text:00000000000004be sync_end
             tvout.s:238    .text:0000000000000554 frame_end
           ps2_kbd.s:231    .text:0000000000000cb2 LINK
             tvout.s:257    .text:000000000000056a $d
             tvout.s:257    .text:000000000000056e _BACKCOLOR
             tvout.s:257    .text:000000000000057c BACKCOLOR
             forth.s:89     .text:0000000000000e70 INEXT
             tvout.s:264    .text:0000000000000588 $d
             tvout.s:264    .text:000000000000058c _PENCOLOR
             tvout.s:264    .text:0000000000000596 $t
             tvout.s:264    .text:0000000000000598 PENCOLOR
             tvout.s:271    .text:00000000000005a4 $d
             tvout.s:271    .text:00000000000005a8 _COLUMN
             tvout.s:271    .text:00000000000005b0 COLUMN
             tvout.s:278    .text:00000000000005bc $d
             tvout.s:278    .text:00000000000005c0 _CURSOR_ROW
             tvout.s:278    .text:00000000000005c4 $t
             tvout.s:278    .text:00000000000005c4 CURSOR_ROW
             tvout.s:285    .text:00000000000005d0 $d
             tvout.s:285    .text:00000000000005d4 _ROWY
             tvout.s:285    .text:00000000000005da $t
             tvout.s:285    .text:00000000000005dc ROWY
             tvout.s:292    .text:00000000000005e8 $d
             tvout.s:292    .text:00000000000005ec _COLX
             tvout.s:292    .text:00000000000005f2 $t
             tvout.s:292    .text:00000000000005f4 COLX
             tvout.s:299    .text:0000000000000600 $d
             tvout.s:299    .text:0000000000000604 _FONT
             tvout.s:299    .text:000000000000060c FONT
             tvout.s:598    .rodata:0000000000000000 font_6x8
             tvout.s:306    .text:0000000000000616 $d
             tvout.s:306    .text:000000000000061a _VIDBUFF
             tvout.s:306    .text:0000000000000622 $t
             tvout.s:306    .text:0000000000000624 VIDBUFF
             tvout.s:318    .text:000000000000062e $d
             tvout.s:318    .text:0000000000000632 _PLOT
             tvout.s:318    .text:0000000000000638 PLOT
             tvout.s:366    .text:00000000000006b8 plot_op
             tvout.s:334    .text:0000000000000662 op_back
             tvout.s:343    .text:000000000000067c op_pen
             tvout.s:352    .text:0000000000000696 op_invert
             tvout.s:356    .text:000000000000069e op_xor
             tvout.s:366    .text:00000000000006b8 $d
             tvout.s:371    .text:00000000000006c0 _VSYNC
             tvout.s:371    .text:00000000000006c6 $t
             tvout.s:371    .text:00000000000006c8 VSYNC
             tvout.s:379    .text:00000000000006d0 $d
             tvout.s:379    .text:00000000000006d4 _CLS
             tvout.s:379    .text:00000000000006d8 $t
             tvout.s:379    .text:00000000000006d8 CLS
             tvout.s:403    .text:0000000000000718 $d
             tvout.s:403    .text:000000000000071c _CLRLINE
             tvout.s:403    .text:0000000000000724 $t
             tvout.s:403    .text:0000000000000724 CLRLINE
             tvout.s:405    .text:0000000000000728 $d
             forth.s:253    .text:0000000000000fe0 DOLIT
             forth.s:469    .text:0000000000001114 DUPP
ARM GAS  forth.s 			page 131


             forth.s:411    .text:00000000000010bc TOR
             forth.s:617    .text:00000000000011f8 STAR
             forth.s:593    .text:00000000000011d8 PLUS
             forth.s:387    .text:0000000000001094 RFROM
             forth.s:1653   .text:0000000000001944 FILL
             forth.s:92     .text:0000000000000e76 UNNEST
             tvout.s:418    .text:000000000000075c _SCROLLUP
             tvout.s:418    .text:0000000000000768 SCROLLUP
             tvout.s:420    .text:000000000000076c $d
             forth.s:480    .text:0000000000001124 SWAP
             forth.s:605    .text:00000000000011e8 SUBB
             forth.s:1629   .text:0000000000001910 MOVE
             tvout.s:437    .text:00000000000007b4 _RIGHT
             tvout.s:437    .text:00000000000007ba $t
             tvout.s:437    .text:00000000000007bc RIGHT
             tvout.s:448    .text:00000000000007d8 TVCR
             tvout.s:448    .text:00000000000007ce $d
             tvout.s:448    .text:00000000000007d2 _TVCR
             tvout.s:448    .text:00000000000007d8 $t
             tvout.s:463    .text:00000000000007fc $d
             tvout.s:468    .text:0000000000000804 FONT_PIXEL
             tvout.s:469    .text:0000000000000804 $t
             tvout.s:475    .text:0000000000000812 INCR_X
             tvout.s:482    .text:000000000000081c NEXT_PIXEL
             tvout.s:491    .text:0000000000000822 CHAR_ROW
             tvout.s:493    .text:0000000000000826 $d
             forth.s:840    .text:000000000000134c DDUP
             forth.s:399    .text:00000000000010a8 RAT
             forth.s:280    .text:0000000000001004 DONXT
             forth.s:828    .text:0000000000001338 TDROP
             tvout.s:510    .text:0000000000000862 CHAR_FONT
             tvout.s:511    .text:0000000000000862 $t
             tvout.s:522    .text:0000000000000874 $d
             tvout.s:522    .text:0000000000000878 _TVPUTC
             tvout.s:522    .text:0000000000000880 $t
             tvout.s:522    .text:0000000000000880 TVPUTC
             tvout.s:524    .text:0000000000000884 $d
             forth.s:352    .text:0000000000001068 AT
             forth.s:792    .text:00000000000012fc ROT
             forth.s:376    .text:0000000000001088 CAT
             forth.s:657    .text:0000000000001234 ONEP
             tvout.s:549    .text:00000000000008e8 _PRINT
             tvout.s:549    .text:00000000000008ee $t
             tvout.s:549    .text:00000000000008f0 PRINT
             tvout.s:551    .text:00000000000008f4 $d
             forth.s:1049   .text:0000000000001498 COUNT
             forth.s:668    .text:0000000000001244 ONEM
             forth.s:458    .text:0000000000001104 DROP
             tvout.s:564    .text:0000000000000924 _CURPOS
             tvout.s:564    .text:000000000000092c CURPOS
             tvout.s:579    .text:000000000000094e $d
             tvout.s:579    .text:0000000000000952 _INPUT
             tvout.s:579    .text:0000000000000958 $t
             tvout.s:579    .text:0000000000000958 INPUT
             tvout.s:581    .text:000000000000095c $d
             forth.s:1564   .text:0000000000001888 PAD
             forth.s:2632   .text:00000000000023b0 ACCEP
ARM GAS  forth.s 			page 132


             forth.s:493    .text:0000000000001138 OVER
             forth.s:363    .text:0000000000001074 CSTOR
             tvout.s:594    .rodata:0000000000000000 $d
             tvout.s:699    .text:0000000000000988 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:17     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:18     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:19     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:20     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:21     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:22     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:23     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:24     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:25     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:26     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:27     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:28     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:29     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:30     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:31     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:32     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:33     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:34     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:35     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:36     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:37     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:38     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:39     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:40     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:41     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:42     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:43     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:44     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:45     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:46     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:47     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:48     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:49     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:50     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:51     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:52     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:55     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:56     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:57     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:58     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:59     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:60     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:61     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:62     *ABS*:000000000000006b SC_LEFT
ARM GAS  forth.s 			page 133


       ps2_codes.inc:63     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:64     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:65     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:66     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:67     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:68     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:69     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:70     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:71     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:72     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:73     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:74     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:78     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:79     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:80     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:81     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:82     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:83     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:84     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:85     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:86     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:87     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:88     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:89     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:90     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:91     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:92     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:93     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:94     *ABS*:000000000000008b VK_F11
       ps2_codes.inc:95     *ABS*:000000000000008c VK_F12
       ps2_codes.inc:96     *ABS*:000000000000008d VK_UP
       ps2_codes.inc:97     *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:98     *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:99     *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:100    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:101    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:102    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:103    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:104    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:105    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:106    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:107    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:108    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:109    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:110    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:111    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:112    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:113    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:114    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:115    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:116    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:117    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:118    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:119    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:120    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:122    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:123    *ABS*:00000000000000aa VK_SDOWN
ARM GAS  forth.s 			page 134


       ps2_codes.inc:124    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:125    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:126    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:127    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:128    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:129    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:130    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:132    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:133    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:134    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:135    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:136    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:137    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:138    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:139    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:140    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:141    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:142    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:143    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:144    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:145    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000994 sc_ascii
         mcSaite.inc:98     .text:0000000000000a44 shifted
         mcSaite.inc:149    .text:0000000000000aa4 altchar
         mcSaite.inc:165    .text:0000000000000ab4 extended
         mcSaite.inc:189    .text:0000000000000adc controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_PAR_ERR
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_FRAME_ERR
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_CAPSLK
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_ALTCHAR
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_REL
           ps2_kbd.s:62     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:64     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000006f KBD_PARITY
           ps2_kbd.s:74     .text:0000000000000b10 $t
           ps2_kbd.s:100    .text:0000000000000b64 start_bit
           ps2_kbd.s:109    .text:0000000000000b80 parity_bit
           ps2_kbd.s:119    .text:0000000000000ba0 stop_bit
           ps2_kbd.s:163    .text:0000000000000c04 $d
           ps2_kbd.s:163    .text:0000000000000c08 _ASYNC_KEY
           ps2_kbd.s:163    .text:0000000000000c12 $t
           ps2_kbd.s:163    .text:0000000000000c14 ASYNC_KEY
           ps2_kbd.s:171    .text:0000000000000c22 $d
           ps2_kbd.s:171    .text:0000000000000c26 _KEYERRQ
           ps2_kbd.s:171    .text:0000000000000c30 KEYERRQ
           ps2_kbd.s:179    .text:0000000000000c3e $d
           ps2_kbd.s:179    .text:0000000000000c42 _KEY_RST_ERR
           ps2_kbd.s:179    .text:0000000000000c4e $t
           ps2_kbd.s:179    .text:0000000000000c50 KEY_RST_ERR
           ps2_kbd.s:189    .text:0000000000000c5e keycode
           ps2_kbd.s:204    .text:0000000000000c86 wait_code
           ps2_kbd.s:216    .text:0000000000000c96 table_scan
           ps2_kbd.s:231    .text:0000000000000cae $d
ARM GAS  forth.s 			page 135


           ps2_kbd.s:231    .text:0000000000000cb2 _INKEY
           ps2_kbd.s:231    .text:0000000000000cb8 $t
           ps2_kbd.s:231    .text:0000000000000cb8 INKEY
           ps2_kbd.s:251    .text:0000000000000d02 inkey_exit
           ps2_kbd.s:263    .text:0000000000000d28 xcode
           ps2_kbd.s:257    .text:0000000000000d14 pause_key
           ps2_kbd.s:268    .text:0000000000000d38 released
           ps2_kbd.s:288    .text:0000000000000d7a do_async_key
           ps2_kbd.s:321    .text:0000000000000dc6 do_modifiers
           ps2_kbd.s:278    .text:0000000000000d68 toggle_capslock
           ps2_kbd.s:366    .text:0000000000000e28 is_async_key
           ps2_kbd.s:293    .text:0000000000000d88 set_async_key
           ps2_kbd.s:380    .text:0000000000000e3a async_jump
           ps2_kbd.s:298    .text:0000000000000d96 shift_key
           ps2_kbd.s:309    .text:0000000000000dac set_reset
           ps2_kbd.s:301    .text:0000000000000d9c ctrl_key
           ps2_kbd.s:304    .text:0000000000000da2 alt_key
           ps2_kbd.s:307    .text:0000000000000da8 altchar_key
           ps2_kbd.s:329    .text:0000000000000ddc shift_down
           ps2_kbd.s:333    .text:0000000000000de2 altchar_down
           ps2_kbd.s:337    .text:0000000000000de8 ctrl_down
           ps2_kbd.s:345    .text:0000000000000e04 do_capslock
           ps2_kbd.s:371    .text:0000000000000e2c async_keys
           ps2_kbd.s:372    .text:0000000000000e2c $d
           ps2_kbd.s:385    .text:0000000000000e40 $d
             forth.s:72     .text:0000000000000e5c $t
             forth.s:75     .text:0000000000000e5c TPUSH
             forth.s:80     .text:0000000000000e62 TPOP
             forth.s:105    .text:0000000000000e80 COMPI_NEST
             forth.s:121    .text:0000000000000e9e $d
             forth.s:122    .text:0000000000000ea2 _RAND
             forth.s:125    .text:0000000000000eac RAND
             forth.s:127    .text:0000000000000eb0 $d
             forth.s:891    .text:00000000000013a0 ABSS
             forth.s:1109   .text:00000000000014e0 SEED
             forth.s:581    .text:00000000000011c8 LSHIFT
             forth.s:542    .text:0000000000001180 XORR
             forth.s:569    .text:00000000000011b0 RSHIFT
             forth.s:339    .text:0000000000001054 STORE
             forth.s:518    .text:0000000000001158 ANDD
             forth.s:1424   .text:0000000000001744 MODD
             forth.s:155    .text:0000000000000f20 _PAUSE
             forth.s:157    .text:0000000000000f26 $t
             forth.s:158    .text:0000000000000f28 PAUSE
             forth.s:160    .text:0000000000000f2c $d
             forth.s:1131   .text:0000000000001508 TIMER
             forth.s:162    .text:0000000000000f34 PAUSE_LOOP
             forth.s:301    .text:0000000000001022 QBRAN
             forth.s:167    .text:0000000000000f4c PAUSE_EXIT
             forth.s:318    .text:0000000000001036 BRAN
             forth.s:173    .text:0000000000000f54 _ULED
             forth.s:177    .text:0000000000000f5c ULED
             forth.s:186    .text:0000000000000f78 ULED_OFF
             forth.s:192    .text:0000000000000f7c $d
             forth.s:193    .text:0000000000000f80 _QRX
             forth.s:196    .text:0000000000000f88 QKEY
             forth.s:197    .text:0000000000000f88 QRX
ARM GAS  forth.s 			page 136


             forth.s:216    .text:0000000000000fb2 $d
             forth.s:217    .text:0000000000000fb6 _TXSTO
             forth.s:220    .text:0000000000000fbc TXSTO
             forth.s:221    .text:0000000000000fbc EMIT
             forth.s:222    .text:0000000000000fbc TECHO
             forth.s:238    .text:0000000000000fd4 $d
             forth.s:239    .text:0000000000000fd8 _NOP
             forth.s:241    .text:0000000000000fdc $t
             forth.s:242    .text:0000000000000fdc NOP
             forth.s:261    .text:0000000000000fea $d
             forth.s:262    .text:0000000000000fee _EXECU
             forth.s:264    .text:0000000000000ff6 $t
             forth.s:265    .text:0000000000000ff8 EXECU
             forth.s:287    .text:0000000000001014 NEXT1
             forth.s:307    .text:0000000000001030 QBRAN1
             forth.s:325    .text:000000000000103c $d
             forth.s:326    .text:0000000000001040 _EXIT
             forth.s:329    .text:0000000000001048 EXIT
             forth.s:330    .text:0000000000001048 $d
             forth.s:336    .text:0000000000001050 _STORE
             forth.s:338    .text:0000000000001052 $t
             forth.s:348    .text:0000000000001060 $d
             forth.s:349    .text:0000000000001064 _AT
             forth.s:351    .text:0000000000001066 $t
             forth.s:359    .text:000000000000106c $d
             forth.s:360    .text:0000000000001070 _CSTOR
             forth.s:372    .text:0000000000001080 $d
             forth.s:373    .text:0000000000001084 _CAT
             forth.s:383    .text:000000000000108c $d
             forth.s:384    .text:0000000000001090 _RFROM
             forth.s:395    .text:000000000000109e $d
             forth.s:396    .text:00000000000010a2 _RAT
             forth.s:407    .text:00000000000010b2 $d
             forth.s:408    .text:00000000000010b6 _TOR
             forth.s:418    .text:00000000000010c6 $d
             forth.s:419    .text:00000000000010ca _RPSTOR
             forth.s:421    .text:00000000000010ce $t
             forth.s:422    .text:00000000000010d0 RPSTOR
             forth.s:430    .text:00000000000010d8 $d
             forth.s:431    .text:00000000000010dc _SPSTOR
             forth.s:433    .text:00000000000010e0 $t
             forth.s:434    .text:00000000000010e0 SPSTOR
             forth.s:442    .text:00000000000010e8 $d
             forth.s:443    .text:00000000000010ec _SPAT
             forth.s:445    .text:00000000000010f0 $t
             forth.s:446    .text:00000000000010f0 SPAT
             forth.s:454    .text:00000000000010f8 $d
             forth.s:455    .text:00000000000010fc _DROP
             forth.s:465    .text:000000000000110a $d
             forth.s:466    .text:000000000000110e _DUPP
             forth.s:468    .text:0000000000001112 $t
             forth.s:476    .text:000000000000111a $d
             forth.s:477    .text:000000000000111e _SWAP
             forth.s:489    .text:000000000000112c $d
             forth.s:490    .text:0000000000001130 _OVER
             forth.s:501    .text:0000000000001140 $d
             forth.s:502    .text:0000000000001144 _ZLESS
ARM GAS  forth.s 			page 137


             forth.s:505    .text:0000000000001148 ZLESS
             forth.s:514    .text:000000000000114e $d
             forth.s:515    .text:0000000000001152 _ANDD
             forth.s:517    .text:0000000000001156 $t
             forth.s:526    .text:0000000000001162 $d
             forth.s:527    .text:0000000000001166 _ORR
             forth.s:530    .text:000000000000116c ORR
             forth.s:538    .text:0000000000001176 $d
             forth.s:539    .text:000000000000117a _XORR
             forth.s:541    .text:000000000000117e $t
             forth.s:550    .text:000000000000118a $d
             forth.s:551    .text:000000000000118e _UPLUS
             forth.s:553    .text:0000000000001192 $t
             forth.s:554    .text:0000000000001194 UPLUS
             forth.s:565    .text:00000000000011a4 $d
             forth.s:566    .text:00000000000011a8 _RSHIFT
             forth.s:577    .text:00000000000011ba $d
             forth.s:578    .text:00000000000011be _LSHIFT
             forth.s:589    .text:00000000000011d2 $d
             forth.s:590    .text:00000000000011d6 _PLUS
             forth.s:592    .text:00000000000011d8 $t
             forth.s:601    .text:00000000000011e0 $d
             forth.s:602    .text:00000000000011e4 _SUBB
             forth.s:604    .text:00000000000011e6 $t
             forth.s:613    .text:00000000000011f2 $d
             forth.s:614    .text:00000000000011f6 _STAR
             forth.s:616    .text:00000000000011f8 $t
             forth.s:625    .text:0000000000001202 $d
             forth.s:626    .text:0000000000001206 _UMSTA
             forth.s:628    .text:000000000000120a $t
             forth.s:629    .text:000000000000120c UMSTA
             forth.s:639    .text:0000000000001218 $d
             forth.s:640    .text:000000000000121c _MSTAR
             forth.s:643    .text:0000000000001220 MSTAR
             forth.s:653    .text:000000000000122c $d
             forth.s:654    .text:0000000000001230 _ONEP
             forth.s:664    .text:000000000000123a $d
             forth.s:665    .text:000000000000123e _ONEM
             forth.s:675    .text:000000000000124a $d
             forth.s:676    .text:000000000000124e _TWOP
             forth.s:679    .text:0000000000001254 TWOP
             forth.s:686    .text:000000000000125a $d
             forth.s:687    .text:000000000000125e _TWOM
             forth.s:690    .text:0000000000001264 TWOM
             forth.s:697    .text:000000000000126a $d
             forth.s:698    .text:000000000000126e _CELLP
             forth.s:700    .text:0000000000001274 $t
             forth.s:701    .text:0000000000001274 CELLP
             forth.s:708    .text:000000000000127a $d
             forth.s:709    .text:000000000000127e _CELLM
             forth.s:711    .text:0000000000001284 $t
             forth.s:712    .text:0000000000001284 CELLM
             forth.s:719    .text:000000000000128a $d
             forth.s:720    .text:000000000000128e _BLANK
             forth.s:723    .text:0000000000001294 BLANK
             forth.s:731    .text:000000000000129e $d
             forth.s:732    .text:00000000000012a2 _CELLS
ARM GAS  forth.s 			page 138


             forth.s:734    .text:00000000000012a8 $t
             forth.s:735    .text:00000000000012a8 CELLS
             forth.s:742    .text:00000000000012ae $d
             forth.s:743    .text:00000000000012b2 _CELLSL
             forth.s:745    .text:00000000000012b8 $t
             forth.s:746    .text:00000000000012b8 CELLSL
             forth.s:753    .text:00000000000012be $d
             forth.s:754    .text:00000000000012c2 _TWOST
             forth.s:757    .text:00000000000012c8 TWOST
             forth.s:764    .text:00000000000012ce $d
             forth.s:765    .text:00000000000012d2 _TWOSL
             forth.s:768    .text:00000000000012d8 TWOSL
             forth.s:775    .text:00000000000012de $d
             forth.s:776    .text:00000000000012e2 _QDUP
             forth.s:779    .text:00000000000012e8 QDUP
             forth.s:788    .text:00000000000012f2 $d
             forth.s:789    .text:00000000000012f6 _ROT
             forth.s:791    .text:00000000000012fa $t
             forth.s:801    .text:0000000000001306 $d
             forth.s:802    .text:000000000000130a _NROT
             forth.s:805    .text:0000000000001310 NROT
             forth.s:815    .text:000000000000131a $d
             forth.s:816    .text:000000000000131e _DDROP
             forth.s:818    .text:0000000000001324 $t
             forth.s:819    .text:0000000000001324 DDROP
             forth.s:824    .text:000000000000132e $d
             forth.s:825    .text:0000000000001332 _TDROP
             forth.s:827    .text:0000000000001338 $t
             forth.s:836    .text:0000000000001342 $d
             forth.s:837    .text:0000000000001346 _DDUP
             forth.s:849    .text:0000000000001358 $d
             forth.s:850    .text:000000000000135c _DPLUS
             forth.s:853    .text:0000000000001360 DPLUS
             forth.s:865    .text:0000000000001374 $d
             forth.s:866    .text:0000000000001378 _INVER
             forth.s:868    .text:000000000000137c $t
             forth.s:869    .text:000000000000137c INVER
             forth.s:876    .text:0000000000001382 $d
             forth.s:877    .text:0000000000001386 _NEGAT
             forth.s:880    .text:0000000000001390 NEGAT
             forth.s:887    .text:0000000000001396 $d
             forth.s:888    .text:000000000000139a _ABSS
             forth.s:890    .text:000000000000139e $t
             forth.s:900    .text:00000000000013aa $d
             forth.s:901    .text:00000000000013ae _ZEQUAL
             forth.s:904    .text:00000000000013b4 ZEQUAL
             forth.s:914    .text:00000000000013c2 $d
             forth.s:915    .text:00000000000013c6 _EQUAL
             forth.s:917    .text:00000000000013c8 $t
             forth.s:918    .text:00000000000013c8 EQUAL
             forth.s:929    .text:00000000000013d8 $d
             forth.s:930    .text:00000000000013dc _ULESS
             forth.s:933    .text:00000000000013e0 ULESS
             forth.s:944    .text:00000000000013f0 $d
             forth.s:945    .text:00000000000013f4 _LESS
             forth.s:947    .text:00000000000013f6 $t
             forth.s:948    .text:00000000000013f8 LESS
ARM GAS  forth.s 			page 139


             forth.s:959    .text:0000000000001408 $d
             forth.s:960    .text:000000000000140c _GREAT
             forth.s:962    .text:000000000000140e $t
             forth.s:963    .text:0000000000001410 GREAT
             forth.s:974    .text:0000000000001420 $d
             forth.s:975    .text:0000000000001424 _MAX
             forth.s:977    .text:0000000000001428 $t
             forth.s:978    .text:0000000000001428 MAX
             forth.s:988    .text:0000000000001434 $d
             forth.s:989    .text:0000000000001438 _MIN
             forth.s:991    .text:000000000000143c $t
             forth.s:992    .text:000000000000143c MIN
             forth.s:1002   .text:0000000000001448 $d
             forth.s:1003   .text:000000000000144c _PSTOR
             forth.s:1006   .text:0000000000001450 PSTOR
             forth.s:1017   .text:0000000000001460 $d
             forth.s:1018   .text:0000000000001464 _DSTOR
             forth.s:1021   .text:0000000000001468 DSTOR
             forth.s:1032   .text:000000000000147c $d
             forth.s:1033   .text:0000000000001480 _DAT
             forth.s:1036   .text:0000000000001484 DAT
             forth.s:1045   .text:000000000000148e $d
             forth.s:1046   .text:0000000000001492 _COUNT
             forth.s:1048   .text:0000000000001498 $t
             forth.s:1058   .text:00000000000014a4 $d
             forth.s:1059   .text:00000000000014a8 _DNEGA
             forth.s:1061   .text:00000000000014b0 $t
             forth.s:1062   .text:00000000000014b0 DNEGA
             forth.s:1080   .text:00000000000014c0 DOVAR
             forth.s:1093   .text:00000000000014cc DOCON
             forth.s:1105   .text:00000000000014d6 $d
             forth.s:1106   .text:00000000000014da _SEED
             forth.s:1116   .text:00000000000014ea $d
             forth.s:1117   .text:00000000000014ee _MSEC
             forth.s:1120   .text:00000000000014f4 MSEC
             forth.s:1127   .text:00000000000014fe $d
             forth.s:1128   .text:0000000000001502 _TIMER
             forth.s:1130   .text:0000000000001508 $t
             forth.s:1139   .text:0000000000001512 $d
             forth.s:1140   .text:0000000000001516 _TBOOT
             forth.s:1142   .text:000000000000151c $t
             forth.s:1143   .text:000000000000151c TBOOT
             forth.s:1151   .text:0000000000001526 $d
             forth.s:1152   .text:000000000000152a _BASE
             forth.s:1155   .text:0000000000001530 BASE
             forth.s:1167   .text:000000000000153a TEMP
             forth.s:1175   .text:0000000000001544 $d
             forth.s:1176   .text:0000000000001548 _SPAN
             forth.s:1179   .text:0000000000001550 SPAN
             forth.s:1187   .text:000000000000155a $d
             forth.s:1188   .text:000000000000155e _INN
             forth.s:1190   .text:0000000000001562 $t
             forth.s:1191   .text:0000000000001564 INN
             forth.s:1199   .text:000000000000156e $d
             forth.s:1200   .text:0000000000001572 _NTIB
             forth.s:1203   .text:0000000000001578 NTIB
             forth.s:1211   .text:0000000000001582 $d
ARM GAS  forth.s 			page 140


             forth.s:1212   .text:0000000000001586 _TEVAL
             forth.s:1214   .text:000000000000158c $t
             forth.s:1215   .text:000000000000158c TEVAL
             forth.s:1223   .text:0000000000001596 $d
             forth.s:1224   .text:000000000000159a _HLD
             forth.s:1226   .text:000000000000159e $t
             forth.s:1227   .text:00000000000015a0 HLD
             forth.s:1235   .text:00000000000015aa $d
             forth.s:1236   .text:00000000000015ae _CNTXT
             forth.s:1238   .text:00000000000015b6 $t
             forth.s:1239   .text:00000000000015b8 CNTXT
             forth.s:1240   .text:00000000000015b8 CRRNT
             forth.s:1248   .text:00000000000015c2 $d
             forth.s:1249   .text:00000000000015c6 _CP
             forth.s:1252   .text:00000000000015cc CPP
             forth.s:1259   .text:00000000000015d6 $d
             forth.s:1260   .text:00000000000015da _FCP
             forth.s:1262   .text:00000000000015de $t
             forth.s:1263   .text:00000000000015e0 FCP
             forth.s:1271   .text:00000000000015ea $d
             forth.s:1272   .text:00000000000015ee _LAST
             forth.s:1275   .text:00000000000015f4 LAST
             forth.s:1287   .text:00000000000015fe $d
             forth.s:1288   .text:0000000000001602 _USER_BGN
             forth.s:1291   .text:0000000000001610 USER_BEGIN
             forth.s:1295   .text:0000000000001618 USR_BGN_ADR
             forth.s:1296   .text:0000000000001618 $d
             forth.s:1301   .text:0000000000001620 _USER_END
             forth.s:1304   .text:000000000000162c USER_END
             forth.s:1308   .text:0000000000001634 USER_END_ADR
             forth.s:1309   .text:0000000000001634 $d
             forth.s:1320   .text:000000000000163c _WITHI
             forth.s:1323   .text:0000000000001644 WITHI
             forth.s:1325   .text:0000000000001648 $d
             forth.s:1339   .text:0000000000001668 _UMMOD
             forth.s:1342   .text:0000000000001670 UMMOD
             forth.s:1346   .text:000000000000167a UMMOD0
             forth.s:1353   .text:000000000000168a UMMOD1
             forth.s:1359   .text:0000000000001694 UMMOD2
             forth.s:1369   .text:00000000000016a0 $d
             forth.s:1370   .text:00000000000016a4 _MSMOD
             forth.s:1372   .text:00000000000016aa $t
             forth.s:1373   .text:00000000000016ac MSMOD
             forth.s:1375   .text:00000000000016b0 $d
             forth.s:1384   .text:00000000000016d8 MMOD1
             forth.s:1391   .text:00000000000016f4 MMOD2
             forth.s:1399   .text:0000000000001714 MMOD3
             forth.s:1406   .text:000000000000171c _SLMOD
             forth.s:1409   .text:0000000000001724 SLMOD
             forth.s:1411   .text:0000000000001728 $d
             forth.s:1421   .text:0000000000001740 _MODD
             forth.s:1423   .text:0000000000001744 $t
             forth.s:1426   .text:0000000000001748 $d
             forth.s:1434   .text:0000000000001758 _SLASH
             forth.s:1436   .text:000000000000175a $t
             forth.s:1437   .text:000000000000175c SLASH
             forth.s:1439   .text:0000000000001760 $d
ARM GAS  forth.s 			page 141


             forth.s:1448   .text:0000000000001774 _SSMOD
             forth.s:1450   .text:000000000000177a $t
             forth.s:1451   .text:000000000000177c SSMOD
             forth.s:1453   .text:0000000000001780 $d
             forth.s:1463   .text:0000000000001798 _STASL
             forth.s:1466   .text:000000000000179c STASL
             forth.s:1468   .text:00000000000017a0 $d
             forth.s:1480   .text:00000000000017b4 _ALGND
             forth.s:1482   .text:00000000000017bc $t
             forth.s:1483   .text:00000000000017bc ALGND
             forth.s:1492   .text:00000000000017cc $d
             forth.s:1493   .text:00000000000017d0 _TCHAR
             forth.s:1495   .text:00000000000017d6 $t
             forth.s:1496   .text:00000000000017d8 TCHAR
             forth.s:1498   .text:00000000000017dc $d
             forth.s:1508   .text:0000000000001814 TCHA1
             forth.s:1515   .text:000000000000181c _DEPTH
             forth.s:1517   .text:0000000000001822 $t
             forth.s:1518   .text:0000000000001824 DEPTH
             forth.s:1528   .text:000000000000183c $d
             forth.s:1529   .text:0000000000001840 _PICK
             forth.s:1532   .text:0000000000001848 PICK
             forth.s:1534   .text:000000000000184c $d
             forth.s:1548   .text:0000000000001868 _HERE
             forth.s:1551   .text:0000000000001870 HERE
             forth.s:1553   .text:0000000000001874 $d
             forth.s:1561   .text:0000000000001884 _PAD
             forth.s:1563   .text:0000000000001888 $t
             forth.s:1566   .text:000000000000188c $d
             forth.s:1575   .text:00000000000018a4 _TIB
             forth.s:1577   .text:00000000000018a8 $t
             forth.s:1578   .text:00000000000018a8 TIB
             forth.s:1586   .text:00000000000018b2 $d
             forth.s:1587   .text:00000000000018b6 _ATEXE
             forth.s:1590   .text:00000000000018c0 ATEXE
             forth.s:1602   .text:00000000000018d4 $d
             forth.s:1603   .text:00000000000018d8 _CMOVE
             forth.s:1605   .text:00000000000018de $t
             forth.s:1606   .text:00000000000018e0 CMOVE
             forth.s:1613   .text:00000000000018f2 CMOV1
             forth.s:1610   .text:00000000000018ea CMOV0
             forth.s:1618   .text:00000000000018fc CMOV2
             forth.s:1625   .text:0000000000001904 $d
             forth.s:1626   .text:0000000000001908 _MOVE
             forth.s:1637   .text:0000000000001926 MOVE1
             forth.s:1634   .text:000000000000191e MOVE0
             forth.s:1642   .text:0000000000001930 MOVE2
             forth.s:1649   .text:0000000000001938 $d
             forth.s:1650   .text:000000000000193c _FILL
             forth.s:1661   .text:0000000000001952 FILL2
             forth.s:1657   .text:000000000000194a FILL1
             forth.s:1668   .text:000000000000195a $d
             forth.s:1669   .text:000000000000195e _PACKS
             forth.s:1672   .text:0000000000001968 PACKS
             forth.s:1674   .text:000000000000196c $d
             forth.s:1701   .text:00000000000019c4 _DIGIT
             forth.s:1703   .text:00000000000019ca $t
ARM GAS  forth.s 			page 142


             forth.s:1704   .text:00000000000019cc DIGIT
             forth.s:1706   .text:00000000000019d0 $d
             forth.s:1720   .text:0000000000001a04 _EXTRC
             forth.s:1722   .text:0000000000001a0c $t
             forth.s:1723   .text:0000000000001a0c EXTRC
             forth.s:1725   .text:0000000000001a10 $d
             forth.s:1736   .text:0000000000001a30 _BDIGS
             forth.s:1739   .text:0000000000001a34 BDIGS
             forth.s:1741   .text:0000000000001a38 $d
             forth.s:1750   .text:0000000000001a4c _HOLD
             forth.s:1755   .text:0000000000001a58 $d
             forth.s:1768   .text:0000000000001a7c _DIG
             forth.s:1770   .text:0000000000001a7e $t
             forth.s:1771   .text:0000000000001a80 DIG
             forth.s:1773   .text:0000000000001a84 $d
             forth.s:1783   .text:0000000000001a9c _DIGS
             forth.s:1786   .text:0000000000001aa0 DIGS
             forth.s:1788   .text:0000000000001aa4 DIGS1
             forth.s:1789   .text:0000000000001aa4 $d
             forth.s:1793   .text:0000000000001abc DIGS2
             forth.s:1800   .text:0000000000001ac4 _SIGN
             forth.s:1803   .text:0000000000001acc SIGN
             forth.s:1805   .text:0000000000001ad0 $d
             forth.s:1809   .text:0000000000001ae8 SIGN1
             forth.s:1816   .text:0000000000001af0 _EDIGS
             forth.s:1819   .text:0000000000001af4 EDIGS
             forth.s:1821   .text:0000000000001af8 $d
             forth.s:1836   .text:0000000000001b14 STRR
             forth.s:1837   .text:0000000000001b14 $t
             forth.s:1838   .text:0000000000001b18 $d
             forth.s:1852   .text:0000000000001b40 _HEX
             forth.s:1854   .text:0000000000001b44 $t
             forth.s:1855   .text:0000000000001b44 HEX
             forth.s:1857   .text:0000000000001b48 $d
             forth.s:1866   .text:0000000000001b60 _DECIM
             forth.s:1868   .text:0000000000001b68 $t
             forth.s:1869   .text:0000000000001b68 DECIM
             forth.s:1871   .text:0000000000001b6c $d
             forth.s:1883   .text:0000000000001b84 _DIGTQ
             forth.s:1886   .text:0000000000001b8c DIGTQ
             forth.s:1888   .text:0000000000001b90 $d
             forth.s:1901   .text:0000000000001bd8 DGTQ1
             forth.s:1911   .text:0000000000001bec _NUMBQ
             forth.s:1913   .text:0000000000001bf4 $t
             forth.s:1914   .text:0000000000001bf4 NUMBQ
             forth.s:1916   .text:0000000000001bf8 $d
             forth.s:1932   .text:0000000000001c44 NUMQ1
             forth.s:1980   .text:0000000000001d0c NUMQ6
             forth.s:1948   .text:0000000000001c88 NUMQ2
             forth.s:1972   .text:0000000000001cf0 NUMQ4
             forth.s:1969   .text:0000000000001ce4 NUMQ3
             forth.s:1978   .text:0000000000001d08 NUMQ5
             forth.s:1995   .text:0000000000001d28 _KEY
             forth.s:1997   .text:0000000000001d2c $t
             forth.s:1998   .text:0000000000001d2c KEY
             forth.s:2000   .text:0000000000001d30 KEY1
             forth.s:2001   .text:0000000000001d30 $d
ARM GAS  forth.s 			page 143


             forth.s:2009   .text:0000000000001d44 _SPACE
             forth.s:2011   .text:0000000000001d4a $t
             forth.s:2012   .text:0000000000001d4c SPACE
             forth.s:2014   .text:0000000000001d50 $d
             forth.s:2022   .text:0000000000001d60 _SPACS
             forth.s:2025   .text:0000000000001d68 SPACS
             forth.s:2027   .text:0000000000001d6c $d
             forth.s:2033   .text:0000000000001d88 CHAR2
             forth.s:2031   .text:0000000000001d84 CHAR1
             forth.s:2041   .text:0000000000001d98 _TYPEE
             forth.s:2044   .text:0000000000001da0 TYPEE
             forth.s:2046   .text:0000000000001da4 $d
             forth.s:2052   .text:0000000000001dbc TYPE2
             forth.s:2048   .text:0000000000001db0 TYPE1
             forth.s:2061   .text:0000000000001dd0 _CR
             forth.s:2064   .text:0000000000001dd4 CR
             forth.s:2066   .text:0000000000001dd8 $d
             forth.s:2080   .text:0000000000001df4 DOSTR
             forth.s:2081   .text:0000000000001df4 $t
             forth.s:2083   .text:0000000000001df8 $d
             forth.s:2102   .text:0000000000001e20 STRQP
             forth.s:2103   .text:0000000000001e20 $t
             forth.s:2104   .text:0000000000001e24 $d
             forth.s:2114   .text:0000000000001e2c DOTST
             forth.s:2115   .text:0000000000001e2c $t
             forth.s:2116   .text:0000000000001e30 $d
             forth.s:2127   .text:0000000000001e3c DOTQP
             forth.s:2128   .text:0000000000001e3c $t
             forth.s:2129   .text:0000000000001e40 $d
             forth.s:2137   .text:0000000000001e50 _DOTR
             forth.s:2140   .text:0000000000001e54 DOTR
             forth.s:2142   .text:0000000000001e58 $d
             forth.s:2155   .text:0000000000001e7c _UDOTR
             forth.s:2157   .text:0000000000001e80 $t
             forth.s:2158   .text:0000000000001e80 UDOTR
             forth.s:2160   .text:0000000000001e84 $d
             forth.s:2175   .text:0000000000001eb0 _UDOT
             forth.s:2178   .text:0000000000001eb4 UDOT
             forth.s:2180   .text:0000000000001eb8 $d
             forth.s:2191   .text:0000000000001ed4 _DOT
             forth.s:2193   .text:0000000000001ed6 $t
             forth.s:2194   .text:0000000000001ed8 DOT
             forth.s:2196   .text:0000000000001edc $d
             forth.s:2203   .text:0000000000001f00 DOT1
             forth.s:2213   .text:0000000000001f14 _QUEST
             forth.s:2215   .text:0000000000001f16 $t
             forth.s:2216   .text:0000000000001f18 QUEST
             forth.s:2218   .text:0000000000001f1c $d
             forth.s:2232   .text:0000000000001f28 PARS
             forth.s:2233   .text:0000000000001f28 $t
             forth.s:2234   .text:0000000000001f2c $d
             forth.s:2300   .text:000000000000203c PARS8
             forth.s:2264   .text:0000000000001fb0 PARS3
             forth.s:2247   .text:0000000000001f68 PARS1
             forth.s:2262   .text:0000000000001fac PARS2
             forth.s:2268   .text:0000000000001fbc PARS4
             forth.s:2280   .text:0000000000001fec PARS5
ARM GAS  forth.s 			page 144


             forth.s:2287   .text:0000000000002010 PARS6
             forth.s:2293   .text:0000000000002024 PARS7
             forth.s:2310   .text:0000000000002050 _PARSE
             forth.s:2312   .text:0000000000002056 $t
             forth.s:2313   .text:0000000000002058 PARSE
             forth.s:2315   .text:000000000000205c $d
             forth.s:2335   .text:000000000000209c _DOTPR
             forth.s:2338   .text:00000000000020a0 DOTPR
             forth.s:2340   .text:00000000000020a4 $d
             forth.s:2349   .text:00000000000020bc _PAREN
             forth.s:2351   .text:00000000000020be $t
             forth.s:2352   .text:00000000000020c0 PAREN
             forth.s:2354   .text:00000000000020c4 $d
             forth.s:2363   .text:00000000000020dc _BKSLA
             forth.s:2365   .text:00000000000020de $t
             forth.s:2366   .text:00000000000020e0 BKSLA
             forth.s:2368   .text:00000000000020e4 $d
             forth.s:2378   .text:00000000000020fc _CHAR
             forth.s:2381   .text:0000000000002104 CHAR
             forth.s:2383   .text:0000000000002108 $d
             forth.s:2393   .text:0000000000002120 _WORDD
             forth.s:2396   .text:0000000000002128 WORDD
             forth.s:2398   .text:000000000000212c $d
             forth.s:2408   .text:0000000000002144 _TOKEN
             forth.s:2410   .text:000000000000214a $t
             forth.s:2411   .text:000000000000214c TOKEN
             forth.s:2413   .text:0000000000002150 $d
             forth.s:2424   .text:0000000000002160 _NAMET
             forth.s:2426   .text:0000000000002166 $t
             forth.s:2427   .text:0000000000002168 NAMET
             forth.s:2429   .text:000000000000216c $d
             forth.s:2445   .text:000000000000218c _SAMEQ
             forth.s:2447   .text:0000000000002192 $t
             forth.s:2448   .text:0000000000002194 SAMEQ
             forth.s:2450   .text:0000000000002198 $d
             forth.s:2467   .text:00000000000021e0 SAME2
             forth.s:2452   .text:00000000000021a4 SAME1
             forth.s:2482   .text:00000000000021f4 FIND
             forth.s:2483   .text:00000000000021f4 $t
             forth.s:2484   .text:00000000000021f8 $d
             forth.s:2491   .text:0000000000002214 FIND1
             forth.s:2511   .text:000000000000226c FIND6
             forth.s:2504   .text:0000000000002254 FIND2
             forth.s:2509   .text:0000000000002264 FIND3
             forth.s:2518   .text:0000000000002284 FIND4
             forth.s:2524   .text:00000000000022a0 FIND5
             forth.s:2539   .text:00000000000022c8 _NAMEQ
             forth.s:2541   .text:00000000000022ce $t
             forth.s:2542   .text:00000000000022d0 NAMEQ
             forth.s:2544   .text:00000000000022d4 $d
             forth.s:2559   .text:00000000000022e4 BKSP
             forth.s:2560   .text:00000000000022e4 $t
             forth.s:2561   .text:00000000000022e8 $d
             forth.s:2575   .text:000000000000232c BACK1
             forth.s:2585   .text:0000000000002330 TAP
             forth.s:2586   .text:0000000000002330 $t
             forth.s:2587   .text:0000000000002334 $d
ARM GAS  forth.s 			page 145


             forth.s:2601   .text:000000000000234c KTAP
             forth.s:2602   .text:000000000000234c TTAP
             forth.s:2603   .text:000000000000234c $t
             forth.s:2604   .text:0000000000002350 $d
             forth.s:2618   .text:0000000000002390 KTAP2
             forth.s:2615   .text:0000000000002388 KTAP1
             forth.s:2629   .text:00000000000023a8 _ACCEP
             forth.s:2634   .text:00000000000023b4 $d
             forth.s:2637   .text:00000000000023c0 ACCP1
             forth.s:2653   .text:0000000000002408 ACCP4
             forth.s:2649   .text:00000000000023fc ACCP2
             forth.s:2651   .text:0000000000002400 ACCP3
             forth.s:2663   .text:000000000000241c _QUERY
             forth.s:2665   .text:0000000000002422 $t
             forth.s:2666   .text:0000000000002424 QUERY
             forth.s:2668   .text:0000000000002428 $d
             forth.s:2686   .text:000000000000245c _ABORT
             forth.s:2688   .text:0000000000002462 $t
             forth.s:2689   .text:0000000000002464 ABORT
             forth.s:2691   .text:0000000000002468 ABORT1
             forth.s:2692   .text:0000000000002468 $d
             forth.s:2823   .text:00000000000025ec PRESE
             forth.s:2836   .text:000000000000260c QUIT
             forth.s:2708   .text:0000000000002490 ABORQ
             forth.s:2709   .text:0000000000002490 $t
             forth.s:2710   .text:0000000000002494 $d
             forth.s:2725   .text:00000000000024b8 _INTER
             forth.s:2727   .text:00000000000024c4 $t
             forth.s:2730   .text:00000000000024c8 $d
             forth.s:2739   .text:0000000000002504 INTE1
             forth.s:2736   .text:00000000000024fa $t
             forth.s:2737   .text:00000000000024fc $d
             forth.s:2743   .text:0000000000002514 INTE2
             forth.s:2750   .text:000000000000251c _LBRAC
             forth.s:2752   .text:000000000000251e $t
             forth.s:2753   .text:0000000000002520 LBRAC
             forth.s:2755   .text:0000000000002524 $d
             forth.s:2764   .text:000000000000253c _DOTOK
             forth.s:2766   .text:0000000000002540 $t
             forth.s:2767   .text:0000000000002540 DOTOK
             forth.s:2769   .text:0000000000002544 $d
             forth.s:2775   .text:0000000000002568 DOTO1
             forth.s:2776   .text:0000000000002568 $d
             forth.s:2783   .text:0000000000002574 _QSTAC
             forth.s:2786   .text:000000000000257c QSTAC
             forth.s:2788   .text:0000000000002580 $d
             forth.s:2790   .text:0000000000002596 $t
             forth.s:2791   .text:0000000000002598 $d
             forth.s:2797   .text:00000000000025a0 _EVAL
             forth.s:2802   .text:00000000000025ac EVAL1
             forth.s:2803   .text:00000000000025ac $d
             forth.s:2811   .text:00000000000025d4 EVAL2
             forth.s:2820   .text:00000000000025e4 _PRESE
             forth.s:2825   .text:00000000000025f0 $d
             forth.s:2833   .text:0000000000002604 _QUIT
             forth.s:2837   .text:000000000000260c $d
             forth.s:2839   .text:0000000000002618 QUIT1
ARM GAS  forth.s 			page 146


             forth.s:2841   .text:000000000000261c QUIT2
             forth.s:2847   .text:0000000000002630 _FORGET
             forth.s:2850   .text:0000000000002638 FORGET
             forth.s:2852   .text:000000000000263c $d
             forth.s:3301   .text:0000000000002ae4 OVERT
             forth.s:2877   .text:0000000000002684 $d
             forth.s:2878   .text:0000000000002688 _TICK
             forth.s:2880   .text:000000000000268a $t
             forth.s:2881   .text:000000000000268c TICK
             forth.s:2883   .text:0000000000002690 $d
             forth.s:2887   .text:00000000000026a4 TICK1
             forth.s:2894   .text:00000000000026ac _ALLOT
             forth.s:2896   .text:00000000000026b2 $t
             forth.s:2897   .text:00000000000026b4 ALLOT
             forth.s:2899   .text:00000000000026b8 $d
             forth.s:2907   .text:00000000000026c8 _COMMA
             forth.s:2908   .text:00000000000026ca $t
             forth.s:2909   .text:00000000000026cc COMMA
             forth.s:2911   .text:00000000000026d0 $d
             forth.s:2922   .text:00000000000026ec $d
             forth.s:2923   .text:00000000000026f0 _BCOMP
             forth.s:2925   .text:00000000000026fa $t
             forth.s:2926   .text:00000000000026fc BCOMP
             forth.s:2928   .text:0000000000002700 $d
             forth.s:2936   .text:0000000000002710 _COMPI
             forth.s:2938   .text:0000000000002718 $t
             forth.s:2939   .text:0000000000002718 COMPI
             forth.s:2941   .text:000000000000271c $d
             forth.s:2955   .text:0000000000002748 _LITER
             forth.s:2957   .text:0000000000002750 $t
             forth.s:2958   .text:0000000000002750 LITER
             forth.s:2960   .text:0000000000002754 $d
             forth.s:3345   .text:0000000000002b40 CALLC
             forth.s:2971   .text:0000000000002768 STRCQ
             forth.s:2972   .text:0000000000002768 $t
             forth.s:2973   .text:000000000000276c $d
             forth.s:2992   .text:00000000000027a4 _FOR
             forth.s:2994   .text:00000000000027a8 $t
             forth.s:2995   .text:00000000000027a8 FOR
             forth.s:2997   .text:00000000000027ac $d
             forth.s:3005   .text:00000000000027c4 _BEGIN
             forth.s:3007   .text:00000000000027ca $t
             forth.s:3008   .text:00000000000027cc BEGIN
             forth.s:3010   .text:00000000000027d0 $d
             forth.s:3016   .text:00000000000027d8 $d
             forth.s:3017   .text:00000000000027dc _FNEXT
             forth.s:3020   .text:00000000000027e4 FNEXT
             forth.s:3022   .text:00000000000027e8 $d
             forth.s:3030   .text:0000000000002800 _UNTIL
             forth.s:3032   .text:0000000000002806 $t
             forth.s:3033   .text:0000000000002808 UNTIL
             forth.s:3035   .text:000000000000280c $d
             forth.s:3043   .text:0000000000002824 _AGAIN
             forth.s:3045   .text:000000000000282a $t
             forth.s:3046   .text:000000000000282c AGAIN
             forth.s:3048   .text:0000000000002830 $d
             forth.s:3056   .text:0000000000002848 _IFF
ARM GAS  forth.s 			page 147


             forth.s:3059   .text:000000000000284c IFF
             forth.s:3061   .text:0000000000002850 $d
             forth.s:3072   .text:0000000000002878 _AHEAD
             forth.s:3074   .text:000000000000287e $t
             forth.s:3075   .text:0000000000002880 AHEAD
             forth.s:3077   .text:0000000000002884 $d
             forth.s:3088   .text:00000000000028ac _REPEA
             forth.s:3091   .text:00000000000028b4 REPEA
             forth.s:3093   .text:00000000000028b8 $d
             forth.s:3103   .text:00000000000028d0 _THENN
             forth.s:3106   .text:00000000000028d8 THENN
             forth.s:3108   .text:00000000000028dc $d
             forth.s:3117   .text:00000000000028f0 _AFT
             forth.s:3119   .text:00000000000028f4 $t
             forth.s:3120   .text:00000000000028f4 AFT
             forth.s:3122   .text:00000000000028f8 $d
             forth.s:3132   .text:0000000000002910 _ELSEE
             forth.s:3135   .text:0000000000002918 ELSEE
             forth.s:3137   .text:000000000000291c $d
             forth.s:3146   .text:0000000000002930 _WHILE
             forth.s:3148   .text:0000000000002936 $t
             forth.s:3149   .text:0000000000002938 WHILE
             forth.s:3151   .text:000000000000293c $d
             forth.s:3159   .text:000000000000294c _ABRTQ
             forth.s:3162   .text:0000000000002954 ABRTQ
             forth.s:3164   .text:0000000000002958 $d
             forth.s:3172   .text:0000000000002970 _STRQ
             forth.s:3175   .text:0000000000002974 STRQ
             forth.s:3177   .text:0000000000002978 $d
             forth.s:3185   .text:0000000000002990 _DOTQ
             forth.s:3188   .text:0000000000002994 DOTQ
             forth.s:3190   .text:0000000000002998 $d
             forth.s:3201   .text:00000000000029b0 _UNIQU
             forth.s:3203   .text:00000000000029b8 $t
             forth.s:3204   .text:00000000000029b8 UNIQU
             forth.s:3206   .text:00000000000029bc $d
             forth.s:3213   .text:00000000000029e4 UNIQ1
             forth.s:3210   .text:00000000000029d8 $d
             forth.s:3224   .text:00000000000029ec SNAME
             forth.s:3225   .text:00000000000029ec $t
             forth.s:3226   .text:00000000000029f0 $d
             forth.s:3242   .text:0000000000002a34 SNAM1
             forth.s:3252   .text:0000000000002a48 _SCOMP
             forth.s:3255   .text:0000000000002a54 SCOMP
             forth.s:3257   .text:0000000000002a58 $d
             forth.s:3269   .text:0000000000002a90 SCOM2
             forth.s:3266   .text:0000000000002a88 SCOM1
             forth.s:3274   .text:0000000000002aa4 SCOM3
             forth.s:3281   .text:0000000000002aac COLON_ABORT
             forth.s:3282   .text:0000000000002aac $t
             forth.s:3283   .text:0000000000002ab0 $d
             forth.s:3298   .text:0000000000002adc _OVERT
             forth.s:3300   .text:0000000000002ae2 $t
             forth.s:3303   .text:0000000000002ae8 $d
             forth.s:3313   .text:0000000000002b00 _SEMIS
             forth.s:3315   .text:0000000000002b02 $t
             forth.s:3316   .text:0000000000002b04 SEMIS
ARM GAS  forth.s 			page 148


             forth.s:3318   .text:0000000000002b08 $d
             forth.s:3328   .text:0000000000002b24 _RBRAC
             forth.s:3330   .text:0000000000002b26 $t
             forth.s:3331   .text:0000000000002b28 RBRAC
             forth.s:3333   .text:0000000000002b2c $d
             forth.s:3346   .text:0000000000002b40 $t
             forth.s:3347   .text:0000000000002b44 $d
             forth.s:3357   .text:0000000000002b5c _COLON
             forth.s:3359   .text:0000000000002b5e $t
             forth.s:3360   .text:0000000000002b60 COLON
             forth.s:3362   .text:0000000000002b64 $d
             forth.s:3372   .text:0000000000002b7c _IMMED
             forth.s:3374   .text:0000000000002b86 $t
             forth.s:3375   .text:0000000000002b88 IMMED
             forth.s:3377   .text:0000000000002b8c $d
             forth.s:3394   .text:0000000000002bb8 _CONST
             forth.s:3397   .text:0000000000002bc4 CONST
             forth.s:3399   .text:0000000000002bc8 $d
             forth.s:3410   .text:0000000000002bf8 $t
             forth.s:3414   .text:0000000000002bf8 DODOES
             forth.s:3416   .text:0000000000002bfc $d
             forth.s:3429   .text:0000000000002c20 $d
             forth.s:3430   .text:0000000000002c24 _DOES
             forth.s:3432   .text:0000000000002c2a $t
             forth.s:3433   .text:0000000000002c2c DOES
             forth.s:3435   .text:0000000000002c30 $d
             forth.s:3449   .text:0000000000002c60 _DEFERAT
             forth.s:3452   .text:0000000000002c68 DEFERAT
             forth.s:3454   .text:0000000000002c6c $d
             forth.s:3463   .text:0000000000002c84 _DEFERSTO
             forth.s:3466   .text:0000000000002c8c DEFERSTO
             forth.s:3468   .text:0000000000002c90 $d
             forth.s:3478   .text:0000000000002cac _DEFER
             forth.s:3480   .text:0000000000002cb2 $t
             forth.s:3481   .text:0000000000002cb4 DEFER
             forth.s:3483   .text:0000000000002cb8 $d
             forth.s:3506   .text:0000000000002d04 CREAT
             forth.s:3494   .text:0000000000002cec DEFER_NOP
             forth.s:3495   .text:0000000000002cec $t
             forth.s:3496   .text:0000000000002cf0 $d
             forth.s:3503   .text:0000000000002cfc _CREAT
             forth.s:3508   .text:0000000000002d08 $d
             forth.s:3520   .text:0000000000002d2c _VARIA
             forth.s:3523   .text:0000000000002d38 VARIA
             forth.s:3525   .text:0000000000002d3c $d
             forth.s:3542   .text:0000000000002d5c DMP
             forth.s:3543   .text:0000000000002d5c $t
             forth.s:3544   .text:0000000000002d60 $d
             forth.s:3556   .text:0000000000002d98 PDUM2
             forth.s:3550   .text:0000000000002d80 PDUM1
             forth.s:3564   .text:0000000000002da4 $d
             forth.s:3565   .text:0000000000002da8 _DUMP
             forth.s:3568   .text:0000000000002db0 DUMP
             forth.s:3570   .text:0000000000002db4 $d
             forth.s:3588   .text:0000000000002e04 DUMP4
             forth.s:3578   .text:0000000000002ddc DUMP1
             forth.s:3590   .text:0000000000002e0c DUMP3
ARM GAS  forth.s 			page 149


             forth.s:3601   .text:0000000000002e24 _DOTS
             forth.s:3605   .text:0000000000002e28 DOTS
             forth.s:3607   .text:0000000000002e2c $d
             forth.s:3615   .text:0000000000002e4c DOTS2
             forth.s:3611   .text:0000000000002e40 DOTS1
             forth.s:3624   .text:0000000000002e60 _TNAME
             forth.s:3626   .text:0000000000002e66 $t
             forth.s:3627   .text:0000000000002e68 TNAME
             forth.s:3629   .text:0000000000002e6c $d
             forth.s:3632   .text:0000000000002e78 TNAM1
             forth.s:3643   .text:0000000000002eac TNAM2
             forth.s:3652   .text:0000000000002ebc _DOTID
             forth.s:3654   .text:0000000000002ec0 $t
             forth.s:3655   .text:0000000000002ec0 DOTID
             forth.s:3657   .text:0000000000002ec4 $d
             forth.s:3664   .text:0000000000002ee8 DOTI1
             forth.s:3665   .text:0000000000002ef6 $t
             forth.s:3666   .text:0000000000002ef8 $d
             forth.s:3668   *ABS*:0000000000000000 WANT_SEE
             forth.s:3748   .text:0000000000002f00 _WORDS
             forth.s:3750   .text:0000000000002f06 $t
             forth.s:3751   .text:0000000000002f08 WORDS
             forth.s:3753   .text:0000000000002f0c $d
             forth.s:3756   .text:0000000000002f18 WORS1
             forth.s:3765   .text:0000000000002f40 WORS2
             forth.s:3778   .text:0000000000002f44 VERSN
             forth.s:3779   .text:0000000000002f44 $t
             forth.s:3780   .text:0000000000002f48 $d
             forth.s:3787   .text:0000000000002f58 _HI
             forth.s:3793   .text:0000000000002f60 $d
             forth.s:3794   .text:0000000000002f7a $t
             forth.s:3795   .text:0000000000002f7c $d
             forth.s:3824   .text:0000000000002fe0 COLD1
             forth.s:3825   .text:0000000000002fe0 $d
             forth.s:3836   .text:0000000000003020 COLD2
             forth.s:3839   .text:0000000000003020 $d
             forth.s:3842   .text:0000000000003024 $d
              init.s:166    .text:000000000000001f $d
              init.s:166    .text:0000000000000020 $t
             tvout.s:257    .text:0000000000000579 $d
             tvout.s:257    .text:000000000000057a $t
             tvout.s:271    .text:00000000000005af $d
             tvout.s:271    .text:00000000000005b0 $t
             tvout.s:299    .text:0000000000000609 $d
             tvout.s:299    .text:000000000000060a $t
             tvout.s:318    .text:0000000000000637 $d
             tvout.s:318    .text:0000000000000638 $t
             tvout.s:418    .text:0000000000000765 $d
             tvout.s:418    .text:0000000000000766 $t
             tvout.s:564    .text:000000000000092b $d
             tvout.s:564    .text:000000000000092c $t
           ps2_kbd.s:171    .text:0000000000000c2f $d
           ps2_kbd.s:171    .text:0000000000000c30 $t
             forth.s:124    .text:0000000000000ea9 $d
             forth.s:124    .text:0000000000000eaa $t
             forth.s:175    .text:0000000000000f59 $d
             forth.s:175    .text:0000000000000f5a $t
ARM GAS  forth.s 			page 150


             forth.s:195    .text:0000000000000f85 $d
             forth.s:195    .text:0000000000000f86 $t
             forth.s:219    .text:0000000000000fbb $d
             forth.s:219    .text:0000000000000fbc $t
             forth.s:328    .text:0000000000001045 $d
             forth.s:328    .text:0000000000001046 $t
             forth.s:362    .text:0000000000001073 $d
             forth.s:362    .text:0000000000001074 $t
             forth.s:375    .text:0000000000001087 $d
             forth.s:375    .text:0000000000001088 $t
             forth.s:386    .text:0000000000001093 $d
             forth.s:386    .text:0000000000001094 $t
             forth.s:398    .text:00000000000010a5 $d
             forth.s:398    .text:00000000000010a6 $t
             forth.s:410    .text:00000000000010b9 $d
             forth.s:410    .text:00000000000010ba $t
             forth.s:457    .text:0000000000001101 $d
             forth.s:457    .text:0000000000001102 $t
             forth.s:479    .text:0000000000001123 $d
             forth.s:479    .text:0000000000001124 $t
             forth.s:492    .text:0000000000001135 $d
             forth.s:492    .text:0000000000001136 $t
             forth.s:504    .text:0000000000001147 $d
             forth.s:504    .text:0000000000001148 $t
             forth.s:529    .text:0000000000001169 $d
             forth.s:529    .text:000000000000116a $t
             forth.s:568    .text:00000000000011af $d
             forth.s:568    .text:00000000000011b0 $t
             forth.s:580    .text:00000000000011c5 $d
             forth.s:580    .text:00000000000011c6 $t
             forth.s:642    .text:000000000000121f $d
             forth.s:642    .text:0000000000001220 $t
             forth.s:656    .text:0000000000001233 $d
             forth.s:656    .text:0000000000001234 $t
             forth.s:667    .text:0000000000001241 $d
             forth.s:667    .text:0000000000001242 $t
             forth.s:678    .text:0000000000001251 $d
             forth.s:678    .text:0000000000001252 $t
             forth.s:689    .text:0000000000001261 $d
             forth.s:689    .text:0000000000001262 $t
             forth.s:722    .text:0000000000001291 $d
             forth.s:722    .text:0000000000001292 $t
             forth.s:756    .text:00000000000012c5 $d
             forth.s:756    .text:00000000000012c6 $t
             forth.s:767    .text:00000000000012d5 $d
             forth.s:767    .text:00000000000012d6 $t
             forth.s:778    .text:00000000000012e7 $d
             forth.s:778    .text:00000000000012e8 $t
             forth.s:804    .text:000000000000130f $d
             forth.s:804    .text:0000000000001310 $t
             forth.s:839    .text:000000000000134b $d
             forth.s:839    .text:000000000000134c $t
             forth.s:852    .text:000000000000135f $d
             forth.s:852    .text:0000000000001360 $t
             forth.s:879    .text:000000000000138d $d
             forth.s:879    .text:000000000000138e $t
             forth.s:903    .text:00000000000013b1 $d
ARM GAS  forth.s 			page 151


             forth.s:903    .text:00000000000013b2 $t
             forth.s:932    .text:00000000000013df $d
             forth.s:932    .text:00000000000013e0 $t
             forth.s:1005   .text:000000000000144f $d
             forth.s:1005   .text:0000000000001450 $t
             forth.s:1020   .text:0000000000001467 $d
             forth.s:1020   .text:0000000000001468 $t
             forth.s:1035   .text:0000000000001483 $d
             forth.s:1035   .text:0000000000001484 $t
             forth.s:1108   .text:00000000000014df $d
             forth.s:1108   .text:00000000000014e0 $t
             forth.s:1119   .text:00000000000014f3 $d
             forth.s:1119   .text:00000000000014f4 $t
             forth.s:1154   .text:000000000000152f $d
             forth.s:1154   .text:0000000000001530 $t
             forth.s:1178   .text:000000000000154d $d
             forth.s:1178   .text:000000000000154e $t
             forth.s:1202   .text:0000000000001577 $d
             forth.s:1202   .text:0000000000001578 $t
             forth.s:1251   .text:00000000000015c9 $d
             forth.s:1251   .text:00000000000015ca $t
             forth.s:1274   .text:00000000000015f3 $d
             forth.s:1274   .text:00000000000015f4 $t
             forth.s:1290   .text:000000000000160d $d
             forth.s:1290   .text:000000000000160e $t
             forth.s:1303   .text:0000000000001629 $d
             forth.s:1303   .text:000000000000162a $t
             forth.s:1322   .text:0000000000001643 $d
             forth.s:1322   .text:0000000000001644 $t
             forth.s:1341   .text:000000000000166f $d
             forth.s:1341   .text:0000000000001670 $t
             forth.s:1408   .text:0000000000001721 $d
             forth.s:1408   .text:0000000000001722 $t
             forth.s:1465   .text:000000000000179b $d
             forth.s:1465   .text:000000000000179c $t
             forth.s:1531   .text:0000000000001845 $d
             forth.s:1531   .text:0000000000001846 $t
             forth.s:1550   .text:000000000000186d $d
             forth.s:1550   .text:000000000000186e $t
             forth.s:1589   .text:00000000000018bf $d
             forth.s:1589   .text:00000000000018c0 $t
             forth.s:1628   .text:000000000000190d $d
             forth.s:1628   .text:000000000000190e $t
             forth.s:1652   .text:0000000000001941 $d
             forth.s:1652   .text:0000000000001942 $t
             forth.s:1671   .text:0000000000001965 $d
             forth.s:1671   .text:0000000000001966 $t
             forth.s:1738   .text:0000000000001a33 $d
             forth.s:1738   .text:0000000000001a34 $t
             forth.s:1752   .text:0000000000001a51 $d
             forth.s:1752   .text:0000000000001a52 $t
             forth.s:1785   .text:0000000000001a9f $d
             forth.s:1785   .text:0000000000001aa0 $t
             forth.s:1802   .text:0000000000001ac9 $d
             forth.s:1802   .text:0000000000001aca $t
             forth.s:1818   .text:0000000000001af3 $d
             forth.s:1818   .text:0000000000001af4 $t
ARM GAS  forth.s 			page 152


             forth.s:1885   .text:0000000000001b8b $d
             forth.s:1885   .text:0000000000001b8c $t
             forth.s:2024   .text:0000000000001d67 $d
             forth.s:2024   .text:0000000000001d68 $t
             forth.s:2043   .text:0000000000001d9d $d
             forth.s:2043   .text:0000000000001d9e $t
             forth.s:2063   .text:0000000000001dd3 $d
             forth.s:2063   .text:0000000000001dd4 $t
             forth.s:2139   .text:0000000000001e53 $d
             forth.s:2139   .text:0000000000001e54 $t
             forth.s:2177   .text:0000000000001eb3 $d
             forth.s:2177   .text:0000000000001eb4 $t
             forth.s:2337   .text:000000000000209f $d
             forth.s:2337   .text:00000000000020a0 $t
             forth.s:2380   .text:0000000000002101 $d
             forth.s:2380   .text:0000000000002102 $t
             forth.s:2395   .text:0000000000002125 $d
             forth.s:2395   .text:0000000000002126 $t
             forth.s:2631   .text:00000000000023af $d
             forth.s:2631   .text:00000000000023b0 $t
             forth.s:2785   .text:000000000000257b $d
             forth.s:2785   .text:000000000000257c $t
             forth.s:2799   .text:00000000000025a5 $d
             forth.s:2799   .text:00000000000025a6 $t
             forth.s:2822   .text:00000000000025eb $d
             forth.s:2822   .text:00000000000025ec $t
             forth.s:2835   .text:0000000000002609 $d
             forth.s:2835   .text:000000000000260a $t
             forth.s:2849   .text:0000000000002637 $d
             forth.s:2849   .text:0000000000002638 $t
             forth.s:3019   .text:00000000000027e1 $d
             forth.s:3019   .text:00000000000027e2 $t
             forth.s:3058   .text:000000000000284b $d
             forth.s:3058   .text:000000000000284c $t
             forth.s:3090   .text:00000000000028b3 $d
             forth.s:3090   .text:00000000000028b4 $t
             forth.s:3105   .text:00000000000028d5 $d
             forth.s:3105   .text:00000000000028d6 $t
             forth.s:3134   .text:0000000000002915 $d
             forth.s:3134   .text:0000000000002916 $t
             forth.s:3161   .text:0000000000002953 $d
             forth.s:3161   .text:0000000000002954 $t
             forth.s:3174   .text:0000000000002973 $d
             forth.s:3174   .text:0000000000002974 $t
             forth.s:3187   .text:0000000000002993 $d
             forth.s:3187   .text:0000000000002994 $t
             forth.s:3254   .text:0000000000002a51 $d
             forth.s:3254   .text:0000000000002a52 $t
             forth.s:3396   .text:0000000000002bc1 $d
             forth.s:3396   .text:0000000000002bc2 $t
             forth.s:3451   .text:0000000000002c67 $d
             forth.s:3451   .text:0000000000002c68 $t
             forth.s:3465   .text:0000000000002c8b $d
             forth.s:3465   .text:0000000000002c8c $t
             forth.s:3505   .text:0000000000002d03 $d
             forth.s:3505   .text:0000000000002d04 $t
             forth.s:3522   .text:0000000000002d35 $d
ARM GAS  forth.s 			page 153


             forth.s:3522   .text:0000000000002d36 $t
             forth.s:3567   .text:0000000000002dad $d
             forth.s:3567   .text:0000000000002dae $t
             forth.s:3604   .text:0000000000002e27 $d
             forth.s:3604   .text:0000000000002e28 $t
             forth.s:3789   .text:0000000000002f5b $d
             forth.s:3789   .text:0000000000002f5c $t
             forth.s:3818   .text:0000000000002fc9 $d
             forth.s:3818   .text:0000000000002fca $t

UNDEFINED SYMBOLS
_mstack
