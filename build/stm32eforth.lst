ARM GAS  forth.s 			page 1


   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**********************************
  22              	   Hardware initialization
  23              	**********************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
ARM GAS  forth.s 			page 2


  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
ARM GAS  forth.s 			page 3


  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
ARM GAS  forth.s 			page 4


 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
ARM GAS  forth.s 			page 5


 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0x400 
 203              	   .equ NVIC_STIR, 0xE00 
 204              	
 205              	/* TIMERS registers */
 206              	.equ TIM1_BASE_ADR,0x40010000
 207              	.equ TIM9_BASE_ADR,0x40010400
 208              	.equ TIM10_BASE_ADR,0x40010800
 209              	.equ TIM11_BASE_ADR,0x40010C00
 210              	
 211              	.equ TIM2_BASE_ADR,0x40000000
 212              	.equ TIM3_BASE_ADR,0x40000400
 213              	.equ TIM4_BASE_ADR,0x40000800
 214              	.equ TIM5_BASE_ADR,0x40000C00
 215              	
 216              	/* TIMER1 */
 217              	.equ TIM1_RCR,48 
 218              	.equ TIM1_BDTR,68 
 219              	
 220              	/* TIMER2..TIMER5 */
 221              	.equ TIM_CR1,0
 222              	.equ TIM_CR2,4
 223              	.equ TIM_SMCR,8
 224              	.equ TIM_DIER,12
 225              	.equ TIM_SR,16
 226              	.equ TIM_EGR,20
 227              	.equ TIM_CCMR1,24
 228              	.equ TIM_CCMR2,28
 229              	.equ TIM_CCER,32
 230              	.equ TIM_CNT,36
 231              	.equ TIM_PSC,40
 232              	.equ TIM_ARR,44
 233              	.equ TIM_CCR1,52
 234              	.equ TIM_CCR2,56
 235              	.equ TIM_CCR3,60
 236              	.equ TIM_CCR4,64
 237              	.equ TIM_DCR,72
 238              	.equ TIM_DMAR,76
 239              	.equ TIM2_OR,80
 240              	.equ TIM5_OR,80 
 241              	
 242              	/* SYSCFG registers */
 243              	.equ SYSCFG_BASE_ADR, 0x40013800
 244              	
 245              	.equ SYSCFG_MEMRMP,0
 246              	.equ SYSCFG_PMC,4
 247              	.equ SYSCFG_EXTICR1,8
 248              	.equ SYSCFG_EXTICR2,12
 249              	.equ SYSCFG_EXTICR3,16
 250              	.equ SYSCFG_EXTICR4,20
 251              	.equ SYSCFG_CMPCR,32
 252              	
 253              	/* EXTI registers */
 254              	.equ EXTI_BASE_ADR, 0x40013C00
 255              	
ARM GAS  forth.s 			page 6


 256              	.equ EXTI_IMR,0
 257              	.equ EXTI_EMR,4
 258              	.equ EXTI_RTSR,8
 259              	.equ EXTI_FTSR,12
 260              	.equ EXTI_SWIER,16
 261              	.equ EXTI_PR,20
  31              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              	/* registers alias */
  28              		T0 .req R0  // temporary
  29              		T1 .req R1  // temporary
  30              		T2 .req R2  // temporary
  31              		UP .req R3   // system variables pointer 
  32              		IPP .req R4   // scratch 
  33              		TOS .req R5  // top of data stack 
  34              		DSP .req R6   // scratch 
  35              		RSP .req R7   // scratch 
  36              		T3  .req R8   // temporary
  37              		T4  .req R9   // temporary 
  38              	
  39              	/* beyond Jupiter specific constants */ 
  40              	  .equ LED_GPIO, GPIOC_BASE_ADR
  41              	  .equ LED_PIN, 13
  42              	  .equ UART, USART1_BASE_ADR 
  43              	
  44              	/* Forth specific constants */
  45              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  46              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  47              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  48              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  49              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  50              		.equ DEND , VID_BUFF-4  /*usable RAM end */
ARM GAS  forth.s 			page 7


  51              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  52              	
  53              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  54              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  55              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  56              	
  57              		.equ CELLL ,	4	/*size of a cell */
  58              		.equ BASEE ,	10	/*default radix */
  59              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  60              	
  61              		.equ BKSPP ,	8	/*backspace */
  62              		.equ LF ,	10	  /*line feed */
  63              		.equ CRR ,	13	/*carriage return */
  64              		.equ ERR ,	27	/*error escape */
  65              		.equ TIC ,	39	/*tick */
  66              	
  67              	/*************************************
  68              	   system variables offset from UPP
  69              	*************************************/
  70              	  .equ SEED, 4    // prng seed 
  71              	  .equ TICKS, SEED+4  // millseconds counter
  72              	  .equ TIMER, TICKS+4  // count down timer
  73              	  .equ BOOT, TIMER+4  // boot program address
  74              	  .equ BASE, BOOT+4  // numeric conversion base 
  75              	  .equ TMP, BASE+4   // temporary variable
  76              	  .equ SPAN, TMP+4  // character count received by expect  
  77              	  .equ TOIN, SPAN+4  // >IN  parse pointer in TIB
  78              	  .equ NTIB, TOIN+4  // #TIB  characters in TIB 
  79              	  .equ TIB, NTIB+4   // TIB buffer address 
  80              	  .equ EVAL, TIB+4  // eval|compile vector 
  81              	  .equ HLD, EVAL+4   // hold pointer 
  82              	  .equ CTXT, HLD+4  // context pointer 
  83              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  84              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  85              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  86              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  87              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  88              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  89              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  90              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  91              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  92              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  93              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  94              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
  95              	  .equ KBD_QUEUE_SIZE, 16 
  96              	  .equ KBD_QUEUE, KBD_STRUCT+4 
  97              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
  98              	  .equ KBD_QTAIL,KBD_QHEAD+4
  99              	  .equ ROW,KBD_QTAIL+4 
 100              	  .equ COL,ROW+4 
 101              	  .equ BK_COLOR,COL+4 
 102              	  .equ FT_COLOR,BK_COLOR+4
 103              	
 104              	/***********************************************
 105              	* MACROS
 106              	*	Assemble inline direct threaded code ending.
 107              	***********************************************/
ARM GAS  forth.s 			page 8


 108              		.macro _CALL fn /* low level routine call */ 
 109              	 	PUSH {LR}
 110              		BL \fn  
 111              		POP {LR}
 112              		.endm
 113              		
 114              		.macro _RET /* exit sub-routine */ 
 115              		BX LR 
 116              		.endm 
 117              	
 118              	 	.macro	_NEST /*start high level word */
 119              		STMFD	RSP!,{LR}
 120              		.endm
 121              	
 122              	 	.macro	_UNNEST	/*end high level word */
 123              		LDMFD	RSP!,{PC}
 124              		.endm
 125              	
 126              		.macro _MOV32 R V 
 127              		MOV \R, #\V&0xffff
 128              		MOVT \R, #\V>>16
 129              		.endm
 130              	
 131              	 	.macro	_DOLIT  value /*long literals */
 132              		BL	DOLIT
 133              		.word \value 
 134              		.endm
 135              	
 136              	 	.macro	_DPUSH	/*push R5 on data stack*/
 137              		STR	R5,[R1,#-4]!
 138              		.endm
 139              	
 140              	 	.macro	_DPOP /*pop data stack to R5 */
 141              		LDR	R5,[R1],#4
 142              		.endm
 143              	
 144              		/* dictionary header  */
 145              		.macro _HEADER  label, nlen, name
 146              			.section .inflash.dictinary 
 147              		LF_\label:   // link field
 148              			.word link 
 149              			.equ link , . 
 150              		_\label: .byte \nlen    // name field
 151              			.ascii "\name"
 152              			.p2align 2 
 153              		CA_\label:   // code field address 
 154              			.word \label + MAPOFFSET 
 155              			.section .text, "ax", %progbits 
 156              			.p2align 2 
 157              		\label:  // code address in .section .text 
 158              		.endm 
 159              		
 160              	
 161              	// local function header 
 162              		.macro _FUNC label 
 163              		.section .text, "ax", %progbits 
 164              		.p2align 2 
ARM GAS  forth.s 			page 9


 165              		.type \label, %function  
 166              		\label:
 167              		.endm 
 168              	
 169              	// global function header 
 170              		.macro _GBL_FUNC label 
 171              		.global \label 
 172              		_FUNC \label 
 173              		.endm 
 174              	
 175              	
  32              	
  33              	/*************************************
  34              	*   interrupt service vectors table 
  35              	**************************************/
  36              	   .section  .isr_vector,"a",%progbits
  37              	  .type  isr_vectors, %object
  38              	
  39              	isr_vectors:
  40 0000 00000000 	  .word   _mstack          /* main return stack address */
  41 0004 00000000 	  .word   reset_handler    /* startup address */
  42              	/* core interrupts || exceptions */
  43 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  44 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  45 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  46 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  47 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  48 001c 00000000 	  .word   0 /* -9 */
  49 0020 00000000 	  .word   0 /* -8 */ 
  50 0024 00000000 	  .word   0 /* -7 */
  51 0028 00000000 	  .word   0	/* -6 */
  52 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  53 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  54 0034 00000000 	  .word   0 /* -3 */
  55 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  56 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  57              	 irq0:  
  58              	  /* External Interrupts */
  59 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  60 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  61 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  62 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  63 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  64 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  65 0058 00000000 	  .word      kbd_isr         /* IRQ6, EXTI Line0 */                        
  66 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  67 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  68 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  69 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  70 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  71 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  72 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  73 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  74 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  75 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  76 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  77 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
ARM GAS  forth.s 			page 10


  78 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  79 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  80 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  81 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  82 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  83 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  84 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  85 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  86 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  87 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  88 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  89 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  90 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  91 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  92 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  93 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  94 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  95 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  96 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  97 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  98 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  99 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 100 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 101 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 102 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 103 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 104 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 105 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 106 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 107 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 108 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 109 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 110 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 111 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 112 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 113 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 114 011c 00000000 	  .word      0 /* IRQ55, not used  */
 115 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 116 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 117 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 118 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 119 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 120 0134 00000000 	  .word		 0 /* IRQ61, not used */
 121 0138 00000000 	  .word		 0 /* IRQ62, not used */
 122 013c 00000000 	  .word		 0 /* IRQ63, not used */
 123 0140 00000000 	  .word		 0 /* IRQ64, not used */
 124 0144 00000000 	  .word		 0 /* IRQ65, not used */
 125 0148 00000000 	  .word		 0 /* IRQ66, not used */
 126 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 127 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 128 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 129 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 130 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 131 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 132 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 133 0168 00000000 	  .word		 0 /* IRQ74, not used */
 134 016c 00000000 	  .word		 0 /* IRQ75, not used */
ARM GAS  forth.s 			page 11


 135 0170 00000000 	  .word		 0 /* IRQ76, not used */
 136 0174 00000000 	  .word		 0 /* IRQ77, not used */
 137 0178 00000000 	  .word		 0 /* IRQ78, not used */
 138 017c 00000000 	  .word		 0 /* IRQ79, not used */
 139 0180 00000000 	  .word		 0 /* IRQ80, not used */
 140 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 141 0188 00000000 	  .word		 0 /* IRQ82, not used */
 142 018c 00000000 	  .word		 0 /* IRQ83, not used */
 143 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 144 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 145              	isr_end:
 146              	  .size  isr_vectors, .-isr_vectors
 147 0198 00000000 	  .p2align 9
 147      00000000 
 147      00000000 
 147      00000000 
 147      00000000 
 148              	
 149              	/*****************************************************
 150              	* default isr handler called on unexpected interrupt
 151              	*****************************************************/
 152              	   .section  .inflash, "ax", %progbits 
 153              	   
 154              	  .type default_handler, %function
 155              	  .p2align 2 
 156              	  .global default_handler
 157              	default_handler:
 158 0000 014D     		ldr r5,exception_msg 
 159 0002 00F04FF8 		bl uart_puts 
 160 0006 39E0     		b reset_mcu    
 161              	  .size  default_handler, .-default_handler
 162              	exception_msg:
 163 0008 0C000000 		.word .+4 
 164 000c 12       		.byte 18
 165 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 165      65707469 
 165      6F6E2072 
 165      65626F6F 
 165      7421
 166 001f 00       		.p2align 2
 167              	
 168              	/*********************************
 169              		system milliseconds counter
 170              	*********************************/	
 171              	  .type systick_handler, %function
 172              	  .p2align 2 
 173              	  .global systick_handler
 174              	systick_handler:
 175 0020 4FF00003 	  _MOV32 r3,UPP
 175      C2F20003 
 176 0028 9868     	  ldr r0,[r3,#TICKS]  
 177 002a 00F10100 	  add r0,#1
 178 002e 9860     	  str r0,[r3,#TICKS]
 179 0030 D868     	  ldr r0,[r3,#TIMER]
 180 0032 10B1     	  cbz r0, systick_exit
 181 0034 A0F10100 	  sub r0,#1
 182 0038 D860     	  str r0,[r3,#TIMER]
ARM GAS  forth.s 			page 12


 183              	systick_exit:
 184 003a 7047     	  bx lr
 185              	
 186              	/**************************
 187              		UART RX handler
 188              	**************************/
 189              		.p2align 2
 190              		.type uart_rx_handler, %function
 191              	uart_rx_handler:
 192 003c 2DE9D002 		push {r4,r6,r7,r9}
 193 0040 4FF48054 		_MOV32 r4,UART 
 193      C4F20104 
 194 0048 2668     		ldr r6,[r4,#USART_SR]
 195 004a D4F80490 		ldr r9,[r4,#USART_DR]
 196 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 197 0052 0DD0     		beq 2f // no char received 
 198 0054 B9F1030F 		cmp r9,#3
 199 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 200 005a 03F14407 		add r7,r3,#RX_QUEUE
 201 005e 9C6D     		ldr r4,[r3,#RX_TAIL]
 202 0060 2744     		add r7,r7,r4 
 203 0062 87F80090 		strb r9,[r7]
 204 0066 04F10104 		add r4,#1 
 205 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 206 006e 9C65     		str r4,[r3,#RX_TAIL]
 207              	2:	
 208 0070 BDE8D002 		pop {r4,r6,r7,r9}
 209 0074 7047     		bx lr 
 210              	
 211              	user_reboot:
 212 0076 064D     		ldr r5,user_reboot_msg
 213 0078 00F014F8 		bl uart_puts 
 214              	reset_mcu: 
 215 007c 0348     		ldr r0,scb_adr 
 216 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 217 0080 41F00401 		orr r1,#(1<<2)
 218 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 219 0088 C160     		str r1,[r0,#SCB_AIRCR]
 220 008a FEE7     		b . 
 221              		.p2align 2 
 222              	scb_adr:
 223 008c 00ED00E0 		.word SCB_BASE_ADR 
 224              	user_reboot_msg:
 225 0090 94000000 		.word .+4
 226 0094 0D       		.byte 13 
 227 0095 0D757365 		.ascii "\ruser reboot!"
 227      72207265 
 227      626F6F74 
 227      21
 228 00a2 00BF     		.p2align 2 
 229              	
 230              	// send counted string to uart 
 231              	// input: r5 string* 
 232              		.type uart_puts,%function 
 233              	uart_puts:
 234 00a4 4FF48050 		_MOV32 r0,UART 
 234      C4F20100 
ARM GAS  forth.s 			page 13


 235 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 236 00b0 0940     		ands r1,r1
 237 00b2 0CD0     	1:	beq 9f 
 238 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 239 00b6 12F08002 		ands r2,#0x80 
 240 00ba FBD0     		beq 2b 	
 241 00bc 15F8012B 		ldrb r2,[r5],#1
 242 00c0 0271     		strb r2,[r0,#USART_DR]
 243 00c2 0139     		subs r1,r1,#1 
 244 00c4 F6D1     		bne 2b 
 245 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 246 00c8 12F04002 		ands r2,#(1<<6)
 247 00cc FBD0     		beq 3b 
 248 00ce 7047     	9:  bx lr 
 249              	
 250              	
 251              	/**************************************
 252              	  reset_handler execute at MCU reset
 253              	***************************************/
 254              	  .type  reset_handler, %function
 255              	  .p2align 2 
 256              	  .global reset_handler
 257              	reset_handler:
 258 00d0 4FF00000 		_MOV32 r0,RAM_END
 258      C2F20200 
 259 00d8 8546     		mov sp,r0  
 260 00da FFF7FEFF 		bl	remap 
 261 00de 00F031F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 262 00e2 00F091F8 		bl  uart_init
 263 00e6 FFF7FEFF 		bl	tv_init 
 264 00ea 00F01BF8 		bl forth_init 
 265              	   // test code 
 266 00ee 4FF40148 		_MOV32 T3,VID_BUFF 
 266      C2F20108 
 267 00f6 4FF4FA42 		mov T2,#32000
 268 00fa 80EA0000 		eor T0,T0 
 269 00fe 4FF00A01 	1:  mov T1,#10
 270 0102 08F8010B 	2:	strb T0,[T3],#1
 271 0106 0139     		subs T1,#1 
 272 0108 FBD1     		bne 2b  
 273 010a 00F11100 		add T0,#0x11
 274 010e 10F00F0F 		tst T0,#15
 275 0112 01D1     		bne 3f
 276 0114 80EA0000 		eor T0,T0
 277 0118 0A3A     	3:  subs T2,#10 
 278 011a F0D1     		bne 1b 
 279 011c FEE7     		b . 
 280              	// end test code */
 281              	//	ldr r0,forth_entry
 282 011e 40F00100 		orr r0,#1
 283 0122 0047     		bx r0
 284              	  
 285              		.p2align 2 
 286              	forth_entry:
 287              	//	.word COLD  
 288              	
 289              		.type forth_init, %function 
ARM GAS  forth.s 			page 14


 290              	forth_init:
 291 0124 4FF00003 		_MOV32 UP,UPP 
 291      C2F20003 
 292 012c 4FF47F46 		_MOV32 DSP,SPP
 292      C2F20106 
 293 0134 4FF68077 		_MOV32 RSP,RPP
 293      C2F20107 
 294 013c 85EA0505 		EOR TOS,TOS  
 295 0140 7047     		BX LR 
 296              	
 297              	/************
 298              	// test code 
 299              		.type echo, %function 
 300              	ECHO:
 301              		.word KEY,EMIT,BRANCH,echo  
 302              	
 303              		.type blink, %function 
 304              	blink:
 305              		_MOV32 r0,GPIOC_BASE_ADR
 306              	0:	mov r4,#1<<LED_PIN 
 307              		str r4,[r0,GPIO_BSRR]
 308              		mov	r4,#500
 309              		str r4,[R3,#TIMER] 
 310              		_CALL timeout
 311              		mov r4,#1<<(LED_PIN+16)
 312              		str r4,[r0,#GPIO_BSRR]
 313              		mov	r4,#500
 314              		str r4,[R3,#TIMER] 
 315              		_CALL timeout 
 316              		b 0b 
 317              	
 318              		.type timeout, %function 
 319              	timeout:
 320              		ldr r4,[r3,#TIMER]
 321              		orrs r4,r4
 322              		bne timeout 
 323              		bx lr 
 324              	**********/
 325              	
 326              	  .type init_devices, %function
 327 0142 00BF     	  .p2align 2 
 328              	init_devices:
 329              	/* init clock to HSE 96 Mhz */
 330              	/* set 3 wait states in FLASH_ACR_LATENCY */
 331 0144 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 331      C4F20200 
 332 014c 4FF00301 	  mov r1,#3 
 333 0150 0160     	  str r1,[r0,#FLASH_ACR]
 334              	/* configure clock for HSE, 25 Mhz crystal */
 335              	/* enable HSE in RCC_CR */
 336 0152 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 336      C4F20200 
 337 015a 0168     	  ldr r1,[r0,#RCC_CR]
 338 015c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 339 0160 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 340              	/* wait HSERDY loop */
 341              	wait_hserdy:
ARM GAS  forth.s 			page 15


 342 0162 0168     	  ldr r1,[r0,#RCC_CR]
 343 0164 11F4003F 	  tst r1,#(1<<17)
 344 0168 FBD0     	  beq wait_hserdy
 345              	
 346              	/************************************************* 
 347              	   configure PLL  and source 
 348              	   SYSCLOCK=96 Mhz
 349              	   select HSE as  PLL source clock
 350              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 351              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 352              	****************************************************/
 353              	  /* set RCC_PLLCFGR */
 354 016a 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 354      C4F20200 
 355 0172 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 355      C0F24041 
 356 017a 4160     	  str r1,[r0,#RCC_PLLCFGR]
 357              	  /* enable PLL */
 358 017c 0168     	  ldr r1,[r0,#RCC_CR]
 359 017e 41F08071 	  orr r1, #(1<<24)
 360 0182 0160     	  str r1,[r0,#RCC_CR]
 361              	/* wait for PLLRDY */
 362              	wait_pllrdy:
 363 0184 0168     	  ldr r1,[r0,#RCC_CR]
 364 0186 11F0007F 	  tst r1,#(1<<25)
 365 018a FBD1     	  bne wait_pllrdy 
 366              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 367 018c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 367      C0F21901 
 368 0194 8160     	  str r1,[r0,#RCC_CFGR]
 369              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 370 0196 8168     	  ldr r1,[r0,#RCC_CFGR]
 371 0198 41F00201 	  orr r1,#2
 372 019c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 373              	/* wait for SWS==2 */
 374              	wait_sws:
 375 019e 8168     	  ldr r1,[r0,#RCC_CFGR]
 376 01a0 11F0080F 	  tst r1,#(2<<2)
 377 01a4 FBD0     	  beq wait_sws
 378              	/* now sysclock is 96 Mhz */
 379              	
 380              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 381 01a6 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 382 01aa 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 383 01ac 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 384 01b0 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 385              	/* configure GPIOC:13 as output for user LED */
 386 01b2 4FF40060 	  _MOV32 r0,LED_GPIO 
 386      C4F20200 
 387 01ba 0168     	  ldr r1,[r0,#GPIO_MODER]
 388 01bc 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 389 01c0 01EA0201 	  and r1,r1,r2
 390 01c4 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 391 01c8 0160     	  str r1,[r0,#GPIO_MODER]
 392 01ca 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 393 01cc 41F40051 	  orr r1,#(1<<LED_PIN)
 394 01d0 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
ARM GAS  forth.s 			page 16


 395 01d2 81EA0101 	  eor r1,r1 
 396 01d6 8182     	  strh r1,[r0,#GPIO_ODR]	
 397              	/* enable compensation CELL for fast I/O */
 398 01d8 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 398      C4F20101 
 399 01e0 4FF00100 		mov r0,#1 
 400 01e4 0862     		str r0,[R1,#SYSCFG_CMPCR]
 401              	/* wait for ready bit */ 
 402 01e6 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 403 01e8 10F4807F 	    tst r0,#(1<<8)
 404 01ec FBD0     		beq 1b 	
 405              	
 406              	
 407              	/* configure systicks for 1msec ticks */
 408 01ee 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 408      CEF20000 
 409 01f6 47F2FF61 	  _MOV32 r1,95999 
 409      C0F20101 
 410 01fe 4160     	  str r1,[r0,#STK_LOAD]
 411 0200 4FF00701 	  mov r1,#7
 412 0204 0160     	  str r1,[r0,STK_CTL]
 413 0206 7047     	  _RET  
 414              	
 415              	/*******************************
 416              	  initialize UART peripheral 
 417              	********************************/
 418              		.type uart_init, %function
 419              	uart_init:
 420              	/* set GPIOA PIN 9, uart TX  */
 421 0208 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 421      C4F20200 
 422 0210 0168     	  ldr r1,[r0,#GPIO_MODER]
 423 0212 6FF47012 	  mvn r2,#0xf<<(2*9)
 424 0216 01EA0201 	  and r1,r1,r2
 425 021a 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 426 021e 41EA0201 	  orr r1,r1,r2 
 427 0222 0160     	  str r1,[r0,#GPIO_MODER]
 428              	/* select alternate functions USART1==AF07 */ 
 429 0224 4FF4EE61 	  mov r1,#0x77<<4 
 430 0228 4162     	  str r1,[r0,#GPIO_AFRH]
 431              	/* configure USART1 registers */
 432 022a 4FF48050 	  _MOV32 r0,UART 
 432      C4F20100 
 433              	/* BAUD rate */
 434 0232 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 435 0236 8160     	  str r1,[r0,#USART_BRR]
 436 0238 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 437 023c C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 438              	/* enable interrupt in NVIC */
 439 023e 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 439      CEF20000 
 440 0246 D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 441 024a 41F02001 	  orr r1,#32   
 442 024e C0F80411 	  str r1,[r0,#NVIC_ISER1]
 443 0252 7047     	  bx lr 
 444              	
 445              	/* copy system variables to RAM */ 
ARM GAS  forth.s 			page 17


 446              		.type remap, %function 
 447              	    .global remap 
 448              	remap:
 449              	// copy system to RAM 	
 450 0254 4FF00000 		_MOV32 r0,RAM_ADR 
 450      C2F20000 
 451 025c 3549     		ldr r1,=UZERO 
 452 025e 4FF0A002 		mov r2,#ULAST-UZERO 
 453 0262 02F10302 		add r2,r2,#3
 454 0266 22F00302 		and r2,r2,#~3 
 455 026a 51F8043B 	1:	ldr r3,[r1],#4 
 456 026e 40F8043B 		str r3,[r0],#4 
 457 0272 043A     		subs R2,#4 
 458 0274 F9D1     		bne 1b
 459              	// zero end of RAM 
 460 0276 4FF00002 		_MOV32 r2,RAM_END 
 460      C2F20202 
 461 027e 83EA0303 		eor r3,r3,r3 
 462 0282 40F8043B 	2:  str r3,[r0],#4
 463 0286 9042     		cmp r0,r2 
 464 0288 FBDB     		blt 2b 
 465 028a 4FF00003 		_MOV32 UP,RAM_ADR  
 465      C2F20003 
 466 0292 7047     		_RET 
 467              	
 468              	/******************************************************
 469              	*  COLD start moves the following to USER variables.
 470              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 471              	******************************************************/
 472              		.p2align 2
 473              	UZERO:
 474 0294 00000000 		.word 0  			/*Reserved */
 475 0298 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 476 029c 00000000 		.word 0      /* TICKS */
 477 02a0 00000000 	    .word 0     /* TIMER */
 478 02a4 34030000 		.word HI  /*'BOOT */
 479 02a8 0A000000 		.word BASEE 	/*BASE */
 480 02ac 00000000 		.word 0			/*tmp */
 481 02b0 00000000 		.word 0			/*SPAN */
 482 02b4 00000000 		.word 0			/*>IN */
 483 02b8 00000000 		.word 0			/*#TIB */
 484 02bc 00FF0120 		.word TIBB	/*TIB */
 485 02c0 34030000 		.word INTER	/*'EVAL */
 486 02c4 00000000 		.word 0			/*HLD */
 487 02c8 34030000 		.word _LASTN	/*CONTEXT */
 488 02cc 34030000 		.word CTOP  	/* FCP end of system dictionnary */
 489 02d0 A0000020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 490 02d4 34030000 		.word _LASTN	/*LAST word in dictionary */
 491 02d8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 491      00000000 
 491      00000000 
 491      00000000 
 492 02e8 00000000 		.word 0  /* RX_HEAD */
 493 02ec 00000000 		.word 0  /* RX_TAIL */ 
 494 02f0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 495 02f4 00000000 		.word 0  /* VID_STATE, video state */  
 496 02f8 00000000 	    .word 0  /* VID_FIELD, field */
ARM GAS  forth.s 			page 18


 497 02fc 00810120 		.word VID_BUFF /* video_buffer address */ 
 498 0300 00000000 	    .word 0 /* kbd struct */
 499 0304 00000000 		.space KBD_QUEUE_SIZE,0  
 499      00000000 
 499      00000000 
 499      00000000 
 500 0314 00000000 		.word 0  /* kbd queue head */
 501 0318 00000000 		.word 0 /* kbd queue tail */ 
 502 031c 00000000 	    .word 0 /* tv cursor row */
 503 0320 00000000 	    .word 0 /* tv cursor column */ 
 504 0324 00000000 	    .word 0 /* tv back color */
 505 0328 07000000 	    .word 7 /* tv font color */
 506 032c 00000000 	    .word 0,0 
 506      00000000 
 507              	ULAST:
 508              	
 509              	INTER:
 510              	
 511              	_LASTN:
 512              	
 513              	CTOP:
 514              	
 515 0334 94020000 	HI:
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	  .syntax unified
  22              	  .cpu cortex-m4
  23              	  .fpu softvfp
  24              	  .thumb
  25              	
  26              	  .include "stm32f411ce.inc"
  27              	//  .include "macros.inc"
  28              	
  29              	  .equ FCLK, 96000000
  30              	  .equ FHORZ, 15734 
  31              	  .equ HPER,(FCLK/FHORZ-1)
  32              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  33              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7µS
  34              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3µS
ARM GAS  forth.s 			page 19


  35              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1µs
  36              	  .equ HRES, 320  // horizontal resolution
  37              	  .equ VRES, 200   // vertical resolution
  38              	  .equ BPP, 4     // bits per pixel
  39              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  40              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  41              	  .equ LEFT_MARGIN, (750) 
  42              	  .equ VIDEO_FIRST_LINE, 40
  43              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  44              	  .equ VIDEO_DELAY,(FCLK/1000000*10-1) // 10µSec
  45              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62µSec
  46              	
  47              	// video state 
  48              	  .equ ST_VSYNC, 0 
  49              	  .equ ST_PREVID,1 
  50              	  .equ ST_VIDEO,2 
  51              	  .equ ST_POSTVID,3    
  52              	// field 
  53              	   .equ ODD_FIELD,0 
  54              	   .equ EVEN_FIELD,-1
  55              	
  56              	/*******************************************************
  57              	NOTES:
  58              	 1) Values computed for a 96Mhz sysclock 
  59              	 2) Video sync output on PB1 use T3_CH4
  60              	 3) video out trigger TIMER3 CH3 
  61              	********************************************************/
  62              	
  63              	/**************************************
  64              	  initialize TIMER3 CH4 to generate tv_out
  65              	  synchronization signal.
  66              	**************************************/ 
  67              	  _GBL_FUNC tv_init
  68              	// configure PA0:3 as OUTPUT_OD 
  69 0000 4FF00002 	  _MOV32 r2,GPIOA_BASE_ADR 
  69      C4F20202 
  70 0008 1168     	  ldr r1,[r2,#GPIO_MODER]
  71 000a 4FF05500 	  mov r0,#0x55
  72 000e 41EA0001 	  orr r1,r0
  73 0012 1160     	  str r1,[r2,#GPIO_MODER]
  74              	//  mov r0,#15 
  75              	//  ldr r1,[r2,#GPIO_OTYPER]
  76              	//  orr r1,r0 
  77              	//  str r1,[r2,#GPIO_OTYPER]
  78              	//  str r1,[r2,#GPIO_BSRR]
  79              	//  ldr r1,[r2,GPIO_OSPEEDR]
  80              	//  lsl r0,#1 // fast speed  
  81              	//  orr r1,r0 
  82              	//  str r1,[r2,#GPIO_OSPEEDR]
  83 0014 80EA0000 	  eor r0,r0 
  84 0018 5061     	  str r0,[r2,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 001a 02F58062 	  add r2,#0x400 // GPIOB_BASE_ADR
  88 001e 4FF00800 	  mov r0,(2<<2) // alternate function output 
  89 0022 1168     	  ldr r1,[r2,#GPIO_MODER]
  90 0024 41EA0001 	  orr r1,r0 
ARM GAS  forth.s 			page 20


  91 0028 1060     	  str r0,[r2,#GPIO_MODER] // output AFPP
  92 002a 9168     	  ldr r1,[r2,#GPIO_OSPEEDR]
  93 002c 41EA0001 	  orr r1,r0 
  94 0030 9160     	  str r1,[r2,#GPIO_OSPEEDR] // 2= fast speed 
  95 0032 4FEA8000 	  lsl r0,#2 // alternate function 2 on BP1==TIM3_CH4 
  96 0036 116A     	  ldr r1,[r2,#GPIO_AFRL]
  97 0038 41EA0001 	  orr r1,r0 
  98 003c 1162     	  str r1,[r2,#GPIO_AFRL]
  99              	// enable peripheral clock 
 100 003e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 100      C4F20202 
 101 0046 4FF00200 	  mov r0,#2 
 102 004a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 103 004c 41EA0001 	  orr r1,r0 
 104 0050 1164     	  str r1,[r2,#RCC_APB1ENR]
 105              	// configure TIMER3   
 106 0052 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 106      C4F20002 
 107 005a 41F2D470 	  mov r0,#HPER
 108 005e D062     	  str r0,[r2,#TIM_ARR]
 109 0060 40F2BF30 	  mov r0,#VIDEO_DELAY 
 110 0064 D063     	  str r0,[r2,#TIM_CCR3]
 111 0066 4FF4E170 	  mov r0,#HPULSE 
 112 006a 1064     	  str r0,[r2,#TIM_CCR4]  
 113 006c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 114 0070 D061     	  str r0,[r2,#TIM_CCMR2]
 115 0072 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 116 0076 1062     	  str r0,[r2,#TIM_CCER]
 117 0078 4FF00100 	  mov r0,#1 
 118 007c D060     	  str r0,[r2,#TIM_DIER]
 119 007e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 120              	// enable interrupt in NVIC controller 
 121 0080 4FEA4070 	  lsl r0,#29 // IRQ29
 122 0084 4FF46042 	  _MOV32 r2,NVIC_BASE_ADR
 122      CEF20002 
 123 008c D2F80011 	  ldr r1,[r2,#NVIC_ISER0]
 124 0090 41EA0001 	  orr r1,r0 
 125 0094 C2F80011 	  str r1,[r2,#NVIC_ISER0]
 126 0098 7047     	  _RET
 127              	
 128              	/*************************************
 129              	  TIMER3 interrupt for tv_out
 130              	  T1 line # 
 131              	  T0 TIM3_BASE_ADR 
 132              	*************************************/
 133 009a 00BF     	  _GBL_FUNC tv_out_isr
 134 009c 2DE90701 	  push {T0,T1,T2,T3}
 135 00a0 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 135      C4F20000 
 136 00a8 81EA0101 	  eor T1,T1
 137 00ac 0161     	  str T1,[T0,#TIM_SR]
 138 00ae D96D     	  ldr T1,[UP,#VID_CNTR]
 139 00b0 01F10101 	  add T1,#1 
 140 00b4 D965     	  str T1,[UP,#VID_CNTR]
 141              	/** machine state cases **/
 142 00b6 1A6E     	  ldr T2,[UP,#VID_STATE]
 143 00b8 002A     	  cmp T2,#ST_VSYNC 
ARM GAS  forth.s 			page 21


 144 00ba 07D0     	  beq state_vsync
 145 00bc 012A     	  cmp T2,#ST_PREVID 
 146 00be 2FD0     	  beq state_pre_video 
 147 00c0 022A     	  cmp T2,#ST_VIDEO 
 148 00c2 36D0     	  beq state_video_out 
 149 00c4 032A     	  cmp T2,#ST_POSTVID 
 150 00c6 61D0     	  beq state_post_video
 151 00c8 FFF7FEBF 	  b default_handler // invalid state 
 152              	/*** vertical sync state **/
 153              	state_vsync:
 154 00cc 0129     	  cmp T1,#1
 155 00ce 06D1     	  bne 1f 
 156              	/****** set vertical pre-sync  *****/
 157 00d0 4FF0DB01 	  mov T1,#SERRATION
 158 00d4 0164     	  str T1,[T0,#TIM_CCR4]
 159 00d6 40F6E931 	  mov T1,#SYNC_LINE 
 160 00da C162     	  str T1,[T0,#TIM_ARR]
 161 00dc 69E0     	  b tv_isr_exit 
 162 00de 0729     	1: cmp T1,#7
 163 00e0 03D1     	  bne 2f 
 164              	// vertical sync pulse   
 165 00e2 40F62821 	  mov T1,#VSYNC_PULSE
 166 00e6 0164     	  str T1,[T0,#TIM_CCR4]
 167 00e8 63E0     	  b tv_isr_exit
 168 00ea 0D29     	2: cmp T1,#13
 169 00ec 03D1     	   bne 3f  
 170              	// set vertical post-sync    
 171 00ee 4FF0DB01 	   mov T1,#SERRATION 
 172 00f2 0164     	   str T1,[T0,#TIM_CCR4]
 173 00f4 5DE0     	   b tv_isr_exit   
 174 00f6 1229     	3: cmp T1,#18
 175 00f8 03D1     	   bne 4f 
 176              	// if even field full line  
 177 00fa 596E     	   ldr T1,[UP,#VID_FIELD]
 178 00fc 0029     	   cmp T1,#ODD_FIELD  
 179 00fe 58D0     	   beq tv_isr_exit 
 180 0100 01E0     	   b sync_end 
 181 0102 1329     	4: cmp T1,#19 
 182 0104 55D1     	   bne tv_isr_exit
 183              	sync_end: 
 184 0106 4FF00901 	   mov T1,#9
 185 010a D965     	   str T1,[UP,#VID_CNTR]
 186 010c 4FF4E171 	   mov T1,#HPULSE 
 187 0110 0164     	   str T1,[T0,#TIM_CCR4] 
 188 0112 41F2D471 	   mov T1,#HPER 
 189 0116 C162     	   str T1,[T0,#TIM_ARR] 
 190 0118 4FF00101 	   mov T1,#ST_PREVID 
 191 011c 1966     	   str T1,[UP,#VID_STATE]
 192 011e 48E0     	   b tv_isr_exit 
 193              	/*****************************/
 194              	state_pre_video:
 195 0120 2829     	   cmp T1,#VIDEO_FIRST_LINE
 196 0122 46D4     	   bmi tv_isr_exit 
 197 0124 4FF00201 	   mov T1,#ST_VIDEO 
 198 0128 1966     	   str T1,[UP,#VID_STATE]
 199 012a 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 200 012e C160     	   str T1,[T0,#TIM_DIER]
ARM GAS  forth.s 			page 22


 201 0130 3FE0     	   b tv_isr_exit 
 202              	/**************************
 203              	    VIDEO OUTPUT 
 204              	**************************/   
 205              	state_video_out:
 206 0132 F029     	   cmp T1,#VIDEO_LAST_LINE 
 207 0134 06D4     	   bmi 1f 
 208 0136 4FF00301 	   mov T1,#ST_POSTVID 
 209 013a 1966     	   str T1,[UP,#VID_STATE]
 210 013c 4FF00101 	   mov T1,#1 
 211 0140 C160     	   str T1,[T0,#TIM_DIER]
 212 0142 36E0     	   b tv_isr_exit 
 213              	1: // video output
 214 0144 986E     	   ldr T0,[UP,#VID_BUFFER]
 215 0146 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 216 014a 4FF0A008 	   mov T3,#160
 217 014e 08FB01F1 	   mul T1,T3 
 218 0152 0844     	   add T0,T1  
 219 0154 4FF00001 	   _MOV32 T1,GPIOA_BASE_ADR 
 219      C4F20201 
 220 015c 0278     	2: ldrb T2,[T0]
 221 015e 4FEA1212 	   lsr T2,#4 
 222 0162 4A61     	   str T2,[T1,#GPIO_ODR]
 223 0164 AFF30080 	   nop.w
 224 0168 AFF30080 	   nop.w 
 225 016c 10F8012B 	   ldrb T2,[T0],#1
 226 0170 02F00F02 	   and T2,#15 
 227 0174 4A61     	   str T2,[T1,#GPIO_ODR]
 228 0176 AFF30080 	   nop.w
 229 017a AFF30080 	   nop.w  
 230 017e B8F10108 	   subs T3,#1
 231 0182 EBD1     	   bne 2b  
 232 0184 4FF47022 	   mov T2,#(15<<16) 
 233 0188 8A61     	   str T2,[T1,#GPIO_BSRR]
 234 018a 12E0     	   b tv_isr_exit 
 235              	state_post_video:
 236 018c 4FF48372 	   mov T2,#262
 237 0190 9142     	   cmp T1,T2
 238 0192 0ED4     	   bmi tv_isr_exit     
 239              	// odd field line 262 half line 
 240 0194 596E     	   ldr T1,[UP,VID_FIELD]
 241 0196 11B9     	   cbnz T1, frame_end 
 242 0198 40F6E931 	   mov T1,#SYNC_LINE
 243 019c C162     	   str T1,[T0,#TIM_ARR]      
 244              	frame_end: 
 245 019e 4FF00001 	   mov T1,#ST_VSYNC 
 246 01a2 1966     	   str T1,[UP,#VID_STATE]
 247 01a4 81EA0101 	   eor T1,T1 
 248 01a8 D965     	   str T1,[UP,#VID_CNTR]
 249 01aa 596E     	   ldr T1,[UP,#VID_FIELD]
 250 01ac 6FEA0101 	   mvn T1,T1  
 251 01b0 5966     	   str T1,[UP,#VID_FIELD]
 252              	tv_isr_exit: 
 253 01b2 BDE80701 	   pop {T0,T1,T2,T3}
 254 01b6 7047     	   _RET   
 255              	
 256              	/**********************************
ARM GAS  forth.s 			page 23


 257              	   put_char 
 258              	   draw character in video buffer
 259              	   input:
 260              	      r0 character 
 261              	
 262              	**********************************/
 263              	      _FUNC put_char 
 264              	
 265 01b8 7047     	      _RET 
 266              	
 267              	
 268 01ba 00BF     		.section .rodata 
 269              		.p2align 2
 270              	/********************************************
 271              	    TV font  ASCII 6 pixels x 8 pixels 
 272              	********************************************/
 273              	  .equ CHAR_WIDTH, 6 
 274              	  .equ CHAR_HEIGHT, 8
 275              	  
 276              	font_6x8:
 277 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 277      00000000 
 278 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 278      20002000 
 279 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 279      00000000 
 280 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 280      F8505000 
 281 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 281      28F02000 
 282 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 282      40981800 
 283 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 283      A8906800 
 284 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 284      00000000 
 285 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 285      40201000 
 286 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 286      10204000 
 287 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 287      A8200000 
 288 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 288      20200000 
 289 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 289      60204000 
 290 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 290      00000000 
 291 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 291      00606000 
 292 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 292      40800000 
 293 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 293      C8887000 
 294 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 294      2020F800 
 295 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
ARM GAS  forth.s 			page 24


 295      4080F800 
 296 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 296      0808F000 
 297 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 297      F8101000 
 298 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 298      0808F000 
 299 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 299      88887000 
 300 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 300      40404000 
 301 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 301      88887000 
 302 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 302      08087000 
 303 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 303      60600000 
 304 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 304      60204000 
 305 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 305      40201000 
 306 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 306      F8000000 
 307 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 307      10204000 
 308 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 308      20002000 
 309 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 309      A8A87000 
 310 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 310      88888800 
 311 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 311      8888F000 
 312 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 312      80807800 
 313 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 313      8888F000 
 314 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 314      8080F800 
 315 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 315      80808000 
 316 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 316      88887000 
 317 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 317      88888800 
 318 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 318      20207000 
 319 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 319      08906000 
 320 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 320      A0908800 
 321 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 321      8080F800 
 322 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 322      88888800 
 323 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 323      98888800 
ARM GAS  forth.s 			page 25


 324 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 324      88887000 
 325 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 325      80808000 
 326 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 326      A8987800 
 327 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 327      A0908800 
 328 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 328      0808F000 
 329 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 329      20202000 
 330 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 330      88887000 
 331 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 331      88502000 
 332 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 332      A8D88800 
 333 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 333      50888800 
 334 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 334      20202000 
 335 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 335      8080F800 
 336 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 336      40406000 
 337 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 337      10080000 
 338 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 338      08081800 
 339 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 339      00000000 
 340 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 340      0000F800 
 341 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 341      00000000 
 342 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 342      78887800 
 343 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 343      C888F000 
 344 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 344      80887000 
 345 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 345      98887800 
 346 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 346      F8807000 
 347 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 347      40404000 
 348 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 348      88780870 
 349 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 349      88888800 
 350 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 350      20202000 
 351 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 351      10906000 
 352 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
ARM GAS  forth.s 			page 26


 352      C0A09000 
 353 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 353      20207000 
 354 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 354      A8888800 
 355 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 355      88888800 
 356 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 356      88887000 
 357 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 357      88F08080 
 358 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 358      90B05018 
 359 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 359      80808000 
 360 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 360      7008F000 
 361 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 361      40483000 
 362 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 362      88986800 
 363 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 363      88502000 
 364 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 364      A8A85000 
 365 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 365      20508800 
 366 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 366      88780870 
 367 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 367      2040F800 
 368 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 368      40402000 
 369 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 369      20202000 
 370 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 370      20204000 
 371 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 371      10000000 
 372 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 372      FCFCFCFC 
 373 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 373      10204000 
 374 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 374      40201000 
 375 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 375      20200000 
 376 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 376      A8702000 
 377 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 377      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
ARM GAS  forth.s 			page 27


   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	
  36              	/**********************************
  37              	  keyboard structure 
  38              	
  39              	struct {
  40              	    byte bitcntr; received bit counter 
  41              	    byte rxshift; shiftin keycode 
  42              	    byte flags; flags 
  43              	    byte ones; count bits to 1 
  44              	    }
  45              	
  46              	flags 
  47              	   :0 -> parity error flags 
  48              	**********************************/
  49              	    .equ KBD_F_PAR_ERR,1
  50              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  51              	    .equ KBD_RXSHIFT,KBD_STRUCT+1
  52              	    .equ KBD_BITCNTR,KBD_STRUCT 
  53              	    .equ KBD_ONES,KBD_STRUCT+3 
  54              	
  55              	/**********************************
  56              	    kbd_isr
  57              	    interrupt service routine 
  58              	    EXTI0 connected to keyboard 
  59              	    clock signal and triggered 
  60              	    on falling edge 
  61              	**********************************/
  62              	    _GBL_FUNC kbd_isr 
  63 01bc 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
ARM GAS  forth.s 			page 28


  63      C4F20102 
  64 01c4 4FF00100 	    mov r0,#1 
  65 01c8 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  66 01ca 4FF00002 	    _MOV32 r2,GPIOA_BASE_ADR
  66      C4F20202 
  67 01d2 108A     	    ldrh r0,[r2,#GPIO_IDR]
  68 01d4 93F86C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  69 01d8 0029     	    cmp r1,#0 
  70 01da 19D0     	    beq start_bit 
  71 01dc 0929     	    cmp r1,#9 
  72 01de 22D0     	    beq parity_bit 
  73 01e0 0A29     	    cmp r1,#10 
  74 01e2 31D0     	    beq stop_bit 
  75 01e4 93F86D20 	    ldrb r2,[UP,#KBD_RXSHIFT]
  76 01e8 4FEA5202 	    lsr r2,#1 
  77 01ec 10F4805F 	    tst r0,#(1<<12) // data bit 
  78 01f0 07D0     	    beq 1f 
  79 01f2 42F08002 	    orr r2,#(1<<7)
  80 01f6 93F86F00 	    ldrb r0,[UP,#KBD_ONES]
  81 01fa 00F10100 	    add r0,#1 
  82 01fe 83F86F00 	    strb r0,[UP,#KBD_ONES]
  83 0202 83F86D20 	1:  strb r2,[UP,#KBD_RXSHIFT]
  84 0206 01F10101 	    add r1,#1 
  85 020a 83F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  86 020e 31E0     	    b 9f         
  87              	start_bit:
  88 0210 01F10101 	    add r1,#1 
  89 0214 83F86C10 	    strb r1,[UP,#KBD_BITCNTR]
  90 0218 81EA0101 	    eor r1,r1 
  91 021c 83F86D10 	    strb r1,[UP,#KBD_RXSHIFT]
  92 0220 83F86F10 	    strb r1,[UP,#KBD_ONES]
  93 0224 26E0     	    b 9f 
  94              	parity_bit:
  95 0226 D3F86F10 	    ldr r1,[UP,#KBD_ONES]
  96 022a 10F4805F 	    tst r0,#(1<<12)
  97 022e 01D0     	    beq 1f 
  98 0230 01F10101 	    add r1,#1 
  99 0234 11F0010F 	1:  tst r1,#1 
 100 0238 1CD1     	    bne 9f      
 101              	2: // parity error
 102 023a 93F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 103 023e 41F00101 	    orr r1,#KBD_F_PAR_ERR // parity error flags 
 104 0242 83F86E10 	    strb r1,[UP,#KBD_FLAGS]
 105 0246 15E0     	    b 9f      
 106              	stop_bit:
 107 0248 93F86E10 	    ldrb r1,[UP,#KBD_FLAGS]
 108 024c 11F0010F 	    tst r1,#KBD_F_PAR_ERR 
 109 0250 10D1     	    bne 9f // drop this code 
 110              	// store code in queue 
 111 0252 D3F88410 	    ldr r1,[UP,#KBD_QTAIL]
 112 0256 03F17002 	    add r2,UP,#KBD_QUEUE
 113 025a 93F86D00 	    ldrb r0,[UP,#KBD_RXSHIFT]
 114 025e 5054     	    strb r0,[r2,r1]
 115 0260 01F10101 	    add r1,#1
 116 0264 01F00F01 	    and r1,#KBD_QUEUE_SIZE-1
 117 0268 83F88410 	    strb r1,[UP,#KBD_QTAIL]
 118 026c 80EA0000 	    eor r0,r0 
ARM GAS  forth.s 			page 29


 119 0270 A3F86C00 	    strh r0,[UP,#KBD_BITCNTR]
 120 0274 7047     	9:  _RET 
 121              	    
 122              	/**********************************
 123              	    kbd_init 
 124              	    initialize keyboard 
 125              	    PS2 clock on PA11 
 126              	    PS2 data on PA12 
 127              	**********************************/
 128 0276 00BF     	    _GBL_FUNC kbd_init 
 129              	// configure EXTI0 on pin PA11 
 130 0278 4FF46052 	   _MOV32 r2,SYSCFG_BASE_ADR
 130      C4F20102 
 131 0280 4FF00B00 	   mov r0,#11 
 132 0284 9060     	   str r0,[R2,#SYSCFG_EXTICR1]
 133              	// interrupt triggered on falling edge 
 134 0286 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 134      C4F20102 
 135 028e 4FF00100 	   mov r0,#(1<<0)
 136 0292 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI0 
 137 0294 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 138              	// enable interrupt EXIT0 in NVIC 
 139 0296 4FF04000 	   mov r0,#(1<<6) // IRQ6
 140 029a 4FF46042 	   _MOV32 r2,NVIC_BASE_ADR
 140      CEF20002 
 141 02a2 D2F80011 	   ldr r1,[r2,#NVIC_ISER0]
 142 02a6 41EA0001 	   orr r1,r0 
 143 02aa C2F80011 	   str r1,[r2,#NVIC_ISER0]
 144 02ae 7047     	   _RET 
 145              	
 146              	
 147              	
 148              	
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/**************************
  22              	    Forth system 
  23              	**************************/
  24              	/*
ARM GAS  forth.s 			page 30


  25              	*	indirect thread model
  26              	*	  Register assignments
  27              	*	T0	 	R0 	working register 
  28              	*	T1	 	R1  working register 
  29              	*	T2	 	R2  working register  
  30              	*	UP	 	R3  variables pointer 
  31              	*	IPP	 	R4	instruction pointer  
  32              	*	TOS	 	R5  top of data stack 
  33              	*	DSP	 	R6 	data stack pointer 
  34              	*	RSP	 	R7	return stack pointer 
  35              	*   T3      R8  working register 
  36              	*   T4      R9  working register 
  37              	*/
  38              	
  39              	  .syntax unified
  40              	  .cpu cortex-m4
  41              	  .fpu softvfp
  42              	  .thumb
  43              	
  44              	  .include "stm32f411ce.inc"
  45              	//  .include "macros.inc"
  46              	
  47              	
  48              	/**************************
  49              	    inner interpreter 
  50              	**************************/
  51              	NEXT:
  52 0338 54F8042B 	    ldr T2,[IPP],#4
  53 033c 9047     	    blx T2
  54              	
  55 033e 00BF     	
ARM GAS  forth.s 			page 31


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 32


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  forth.s 			page 33


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:203    *ABS*:0000000000000e00 NVIC_STIR
     stm32f411ce.inc:206    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:207    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:208    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:209    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:211    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:212    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:213    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:214    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:217    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:218    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:221    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:222    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:223    *ABS*:0000000000000008 TIM_SMCR
ARM GAS  forth.s 			page 34


     stm32f411ce.inc:224    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:225    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:226    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:227    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:228    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:229    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:230    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:231    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:232    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:233    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:234    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:235    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:236    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:237    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:238    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:239    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:240    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:243    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:245    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:246    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:247    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:248    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:249    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:250    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:251    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:254    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:256    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:257    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:258    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:259    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:260    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:261    *ABS*:0000000000000014 EXTI_PR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:40     *ABS*:0000000040020800 LED_GPIO
          macros.inc:41     *ABS*:000000000000000d LED_PIN
          macros.inc:42     *ABS*:0000000040011000 UART
          macros.inc:45     *ABS*:000000002001ff80 RPP
          macros.inc:46     *ABS*:000000002001ff00 TIBB
          macros.inc:47     *ABS*:000000002001ff00 SPP
          macros.inc:48     *ABS*:0000000020018100 VID_BUFF
          macros.inc:49     *ABS*:0000000020000000 UPP
          macros.inc:50     *ABS*:00000000200180fc DEND
          macros.inc:51     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:53     *ABS*:0000000000000040 COMPO
          macros.inc:54     *ABS*:0000000000000080 IMEDD
          macros.inc:55     *ABS*:00000000ffffff1f MASKK
          macros.inc:57     *ABS*:0000000000000004 CELLL
          macros.inc:58     *ABS*:000000000000000a BASEE
          macros.inc:59     *ABS*:0000000000000008 VOCSS
          macros.inc:61     *ABS*:0000000000000008 BKSPP
          macros.inc:62     *ABS*:000000000000000a LF
          macros.inc:63     *ABS*:000000000000000d CRR
          macros.inc:64     *ABS*:000000000000001b ERR
          macros.inc:65     *ABS*:0000000000000027 TIC
          macros.inc:70     *ABS*:0000000000000004 SEED
          macros.inc:71     *ABS*:0000000000000008 TICKS
ARM GAS  forth.s 			page 35


          macros.inc:72     *ABS*:000000000000000c TIMER
          macros.inc:73     *ABS*:0000000000000010 BOOT
          macros.inc:74     *ABS*:0000000000000014 BASE
          macros.inc:75     *ABS*:0000000000000018 TMP
          macros.inc:76     *ABS*:000000000000001c SPAN
          macros.inc:77     *ABS*:0000000000000020 TOIN
          macros.inc:78     *ABS*:0000000000000024 NTIB
          macros.inc:79     *ABS*:0000000000000028 TIB
          macros.inc:80     *ABS*:000000000000002c EVAL
          macros.inc:81     *ABS*:0000000000000030 HLD
          macros.inc:82     *ABS*:0000000000000034 CTXT
          macros.inc:83     *ABS*:0000000000000038 FORTH_CTOP
          macros.inc:84     *ABS*:000000000000003c USER_CTOP
          macros.inc:85     *ABS*:0000000000000040 LASTN
          macros.inc:86     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:87     *ABS*:0000000000000044 RX_QUEUE
          macros.inc:88     *ABS*:0000000000000054 RX_HEAD
          macros.inc:89     *ABS*:0000000000000058 RX_TAIL
          macros.inc:90     *ABS*:000000000000005c VID_CNTR
          macros.inc:91     *ABS*:0000000000000060 VID_STATE
          macros.inc:92     *ABS*:0000000000000064 VID_FIELD
          macros.inc:93     *ABS*:0000000000000068 VID_BUFFER
          macros.inc:94     *ABS*:000000000000006c KBD_STRUCT
          macros.inc:95     *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:96     *ABS*:0000000000000070 KBD_QUEUE
          macros.inc:97     *ABS*:0000000000000080 KBD_QHEAD
          macros.inc:98     *ABS*:0000000000000084 KBD_QTAIL
          macros.inc:99     *ABS*:0000000000000088 ROW
          macros.inc:100    *ABS*:000000000000008c COL
          macros.inc:101    *ABS*:0000000000000090 BK_COLOR
          macros.inc:102    *ABS*:0000000000000094 FT_COLOR
              init.s:39     .isr_vector:0000000000000000 isr_vectors
              init.s:257    .inflash:00000000000000d0 reset_handler
              init.s:157    .inflash:0000000000000000 default_handler
              init.s:174    .inflash:0000000000000020 systick_handler
              init.s:57     .isr_vector:0000000000000040 irq0
           ps2_kbd.s:62     .text:00000000000001bc kbd_isr
             tvout.s:133    .text:000000000000009c tv_out_isr
              init.s:191    .inflash:000000000000003c uart_rx_handler
              init.s:145    .isr_vector:0000000000000198 isr_end
              init.s:147    .isr_vector:0000000000000198 $d
              init.s:155    .inflash:0000000000000000 $t
              init.s:162    .inflash:0000000000000008 exception_msg
              init.s:233    .inflash:00000000000000a4 uart_puts
              init.s:214    .inflash:000000000000007c reset_mcu
              init.s:163    .inflash:0000000000000008 $d
              init.s:183    .inflash:000000000000003a systick_exit
              init.s:211    .inflash:0000000000000076 user_reboot
              init.s:224    .inflash:0000000000000090 user_reboot_msg
              init.s:222    .inflash:000000000000008c scb_adr
              init.s:223    .inflash:000000000000008c $d
              init.s:228    .inflash:00000000000000a2 $t
              init.s:448    .inflash:0000000000000254 remap
              init.s:328    .inflash:0000000000000144 init_devices
              init.s:419    .inflash:0000000000000208 uart_init
             tvout.s:67     .text:0000000000000000 tv_init
              init.s:290    .inflash:0000000000000124 forth_init
ARM GAS  forth.s 			page 36


              init.s:286    .inflash:0000000000000124 forth_entry
              init.s:341    .inflash:0000000000000162 wait_hserdy
              init.s:362    .inflash:0000000000000184 wait_pllrdy
              init.s:374    .inflash:000000000000019e wait_sws
              init.s:473    .inflash:0000000000000294 UZERO
              init.s:507    .inflash:0000000000000334 ULAST
              init.s:474    .inflash:0000000000000294 $d
              init.s:515    .inflash:0000000000000334 HI
              init.s:509    .inflash:0000000000000334 INTER
              init.s:511    .inflash:0000000000000334 _LASTN
              init.s:513    .inflash:0000000000000334 CTOP
              init.s:515    .inflash:0000000000000334 $d
             tvout.s:29     *ABS*:0000000005b8d800 FCLK
             tvout.s:30     *ABS*:0000000000003d76 FHORZ
             tvout.s:31     *ABS*:00000000000017d4 HPER
             tvout.s:32     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:33     *ABS*:00000000000001c2 HPULSE
             tvout.s:34     *ABS*:00000000000000db SERRATION
             tvout.s:35     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:36     *ABS*:0000000000000140 HRES
             tvout.s:37     *ABS*:00000000000000c8 VRES
             tvout.s:38     *ABS*:0000000000000004 BPP
             tvout.s:39     *ABS*:00000000000000a0 BPR
             tvout.s:40     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
             tvout.s:41     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:42     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:43     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:44     *ABS*:00000000000003bf VIDEO_DELAY
             tvout.s:45     *ABS*:000000000000173f VIDEO_END
             tvout.s:48     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:49     *ABS*:0000000000000001 ST_PREVID
             tvout.s:50     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:51     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:53     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:54     *ABS*:ffffffffffffffff EVEN_FIELD
              init.s:36     .text:0000000000000000 $t
             tvout.s:153    .text:00000000000000cc state_vsync
             tvout.s:194    .text:0000000000000120 state_pre_video
             tvout.s:205    .text:0000000000000132 state_video_out
             tvout.s:235    .text:000000000000018c state_post_video
             tvout.s:252    .text:00000000000001b2 tv_isr_exit
             tvout.s:183    .text:0000000000000106 sync_end
             tvout.s:244    .text:000000000000019e frame_end
             tvout.s:263    .text:00000000000001b8 put_char
             tvout.s:269    .rodata:0000000000000000 $d
             tvout.s:273    *ABS*:0000000000000006 CHAR_WIDTH
             tvout.s:274    *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:276    .rodata:0000000000000000 font_6x8
           ps2_kbd.s:49     *ABS*:0000000000000001 KBD_F_PAR_ERR
           ps2_kbd.s:50     *ABS*:000000000000006e KBD_FLAGS
           ps2_kbd.s:51     *ABS*:000000000000006d KBD_RXSHIFT
           ps2_kbd.s:52     *ABS*:000000000000006c KBD_BITCNTR
           ps2_kbd.s:53     *ABS*:000000000000006f KBD_ONES
           ps2_kbd.s:87     .text:0000000000000210 start_bit
           ps2_kbd.s:94     .text:0000000000000226 parity_bit
           ps2_kbd.s:106    .text:0000000000000248 stop_bit
           ps2_kbd.s:128    .text:0000000000000278 kbd_init
ARM GAS  forth.s 			page 37


             forth.s:51     .inflash:0000000000000338 NEXT
             forth.s:52     .inflash:0000000000000338 $t
              init.s:166    .inflash:000000000000001f $d
              init.s:166    .inflash:0000000000000020 $t

UNDEFINED SYMBOLS
_mstack
