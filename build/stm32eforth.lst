ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	  .equ FP_WS, PEN_COLOR+4  // floating point work space 
ARM GAS  forth.s 			page 10


 109              	  .equ FP_WS_SIZE, 19  // 19 bytes for floating point work space 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
 165              	
ARM GAS  forth.s 			page 11


 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
 222              		// from a code word   
ARM GAS  forth.s 			page 12


 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 13


  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 14


 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF8A4C4 	  ldr IP,=dh
 159 000e 01F03DBE 	  b INEXT  
 160              	dh:
 161 0012 CD340000 	  _ADR PRESE    
 162 0016 0B1E0000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e C1220000 	  _ADR COUNT 
 164 0022 BD2B0000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 3D1F0000 	  _ADR DUPP
 167 002e E51E0000 	  _ADR TOR 
 168 0032 0B1E0000 	  _DOLIT 16 
 168      10000000 
 169 003a 59230000 	  _ADR BASE 
 170 003e 7D1E0000 	  _ADR STORE 
 171 0042 F52C0000 	  _ADR DOT 
 172 0046 BD1E0000 	  _ADR RFROM
 173 004a 0B1E0000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 811F0000 	  _ADR ANDD
 175 0056 4B1E0000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 0B1E0000 	  _DOLIT ','
 177      2C000000 
 178 006a 151D0000 	  _ADR EMIT 
 179 006e 692B0000 	  _ADR SPACE 
 180 0072 F52C0000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
ARM GAS  forth.s 			page 15


 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 01F000BE 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 01F0F7BD 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8D4C3 	  ldr IP,=ur
 232 00e2 01F0D3BD 	  b INEXT  
 233              	ur:
ARM GAS  forth.s 			page 16


 234 00e6 CD340000 	  _ADR PRESE
 235 00ea F12B0000 	  _ADR CR   
 236 00ee 0B1E0000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 C1220000 		_ADR COUNT 
 238 00fa BD2B0000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0CEF9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0C3FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 03F0CBBF 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 17


 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF834A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
ARM GAS  forth.s 			page 18


 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	
 347              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 348 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 349 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 350 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 351 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 352              	/* configure GPIOC:13 as output for user LED */
 353 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 353      C4F20200 
 354 0206 4FF00D01 	  mov r1,#LED_PIN
 355 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 356 020e 00B500F0 	  _CALL gpio_config 
 356      8FF85DF8 
 356      04EB
 357 0218 4FF00102 	  mov r2,#1
 358 021c 00B500F0 	  _CALL gpio_out 
 358      DEF85DF8 
 358      04EB
 359              	/* enable compensation CELL for fast I/O */
 360 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 360      C4F20101 
 361 022e 4FF00100 		mov r0,#1 
 362 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 363              	/* wait for ready bit */ 
 364 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 365 0236 10F4807F 	    tst r0,#(1<<8)
 366 023a FBD0     		beq 1b 	
 367              	
 368              	
 369              	/* configure systicks for 1msec ticks */
 370              	// set priority to 15 (lowest)
 371 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 372 0240 4FF00F01 	  mov r1,#15 
 373 0244 00B500F0 	  _CALL nvic_set_priority
 373      2FF85DF8 
 373      04EB
 374 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 374      CEF20000 
 375 0256 47F2FF61 	  _MOV32 r1,95999 
 375      C0F20101 
 376 025e 4160     	  str r1,[r0,#STK_LOAD]
 377 0260 4FF00701 	  mov r1,#7
 378 0264 0160     	  str r1,[r0,STK_CTL]
 379 0266 7047     	  _RET  
 380              	
ARM GAS  forth.s 			page 19


 381              	
 382              	/* copy system variables to RAM */ 
 383              		.type remap, %function 
 384              	    .global remap 
 385              	remap:
 386              	// copy system to RAM 	
 387 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 387      C2F20000 
 388 0270 9249     		ldr r1,=UZERO 
 389 0272 4FF0BB02 		mov r2,#ULAST-UZERO 
 390 0276 02F10302 		add r2,r2,#3
 391 027a 22F00302 		and r2,r2,#~3 
 392 027e 51F8043B 	1:	ldr r3,[r1],#4 
 393 0282 40F8043B 		str r3,[r0],#4 
 394 0286 043A     		subs R2,#4 
 395 0288 F9D1     		bne 1b
 396              	// zero end of RAM 
 397 028a 4FF00002 		_MOV32 r2,RAM_END 
 397      C2F20202 
 398 0292 83EA0303 		eor r3,r3,r3 
 399 0296 40F8043B 	2:  str r3,[r0],#4
 400 029a 9042     		cmp r0,r2 
 401 029c FBDB     		blt 2b 
 402 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 402      C2F20004 
 403 02a6 7047     		_RET 
 404              	
 405              	// set irq priority 
 406              	// 0 highest 
 407              	// 15 lowest
 408              	// input: r0 IRQn  
 409              	//        r1  ipr 
 410              	nvic_set_priority:
 411 02a8 08B4     	    push {r3}
 412 02aa 0028     	    cmp r0,#0 
 413 02ac 08D4     	    bmi negative_irq 
 414 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 414      CEF20003 
 415 02b6 4FEA0111 	    lsl r1,#4 
 416 02ba 1954     	    strb r1,[r3,r0]
 417 02bc 08BC     	    pop {r3}
 418 02be 7047     	    _RET 
 419              	negative_irq:
 420 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 420      CEF20003 
 421 02c8 00F00F00 	    and r0,#0XF 
 422 02cc A0F10400 	    sub r0,#4 
 423 02d0 4FEA0111 	    lsl r1,#4 
 424 02d4 1954     	    strb r1,[r3,r0]
 425 02d6 08BC     	    pop {r3}
 426 02d8 7047     	    _RET 
 427              	
 428              	
 429              	// enable interrupt in nvic 
 430              	// input: r0 = IRQn 
 431              	nvic_enable_irq: 
 432 02da 0EB4     	    push {r1,r2,r3}
ARM GAS  forth.s 			page 20


 433 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 433      CEF20003 
 434 02e4 0146     	    mov r1,r0 
 435 02e6 4FEA5111 	    lsr r1,#5  
 436 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 437 02ee 00F01F00 	    and r0,#31 // bit#
 438 02f2 4FF00102 	    mov r2,#1 
 439 02f6 02FA00F2 	    lsl r2,r0
 440 02fa 72B6     	    cpsid I
 441 02fc 5A50     	    str r2,[r3,r1]
 442 02fe 62B6     	    cpsie I 
 443 0300 0EBC     	    pop {r1,r2,r3}
 444 0302 7047     	    _RET 
 445              	
 446              	// disable interrupt in nvic
 447              	// input: r0 = IRQn
 448              	nvic_disable_irq:
 449 0304 0EB4     	    push {r1,r2,r3}
 450 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 450      CEF20003 
 451 030e 0146     	    mov r1,r0 
 452 0310 4FEA5111 	    lsr r1,#5  
 453 0314 4FEA8101 	    lsl r1,#2  // ISERn
 454 0318 00F01F00 	    and r0,#31 // bit#
 455 031c 4FF00102 	    mov r2,#1 
 456 0320 02FA00F2 	    lsl r2,r0
 457 0324 5A50     	    str r2,[r3,r1]
 458 0326 BFF34F8F 	    dsb 
 459 032a BFF36F8F 	    isb 
 460 032e 0EBC     	    pop {r1,r2,r3}
 461 0330 7047     	    _RET 
 462              	
 463              	/**********************************
 464              	  gpio_config 
 465              	  Configure gpio mode 
 466              	  input:
 467              	    r0   GPIOx 
 468              	    r1   pin 
 469              	    r2   mode 
 470              	  output:
 471              	    none 
 472              	  use:
 473              	    r3,r5,r11  
 474              	**********************************/
 475              	gpio_config:
 476 0332 2DE92808 	    push {r3,r5,r11}
 477              	//  clear registers field 
 478 0336 4FF00105 	    mov r5,#1
 479 033a 05FA01F5 	    lsl r5,r1
 480 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 481 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 482 0344 03EA0503 	    and r3,r5 
 483 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 484 034a 4FF00305 	    mov r5,#3 
 485 034e 4FF0020B 	    mov r11,#2 
 486 0352 01FB0BFB 	    mul r11,r1 
 487 0356 05FA0BF5 	    lsl r5,r11 
ARM GAS  forth.s 			page 21


 488 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 489 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 490 0360 03EA0503 	    and r3,r5 
 491 0364 0360     	    str r3,[r0,#GPIO_MODER]
 492 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 493 0368 03EA0503 	    and r3,r5 
 494 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 495              	// set mode register, r2 low nibble  
 496 036e 02F00305 	    and r5,r2,#3    
 497 0372 05FA0BF5 	    lsl r5,r11 // mode 
 498 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 499 0378 43EA0503 	    orr r3,r5 
 500 037c 0360     	    str r3,[r0,#GPIO_MODER]
 501 037e 032A     	    cmp r2,#3
 502 0380 13D0     	    beq 9f // analog input 
 503 0382 12F00305 	    ands r5,r2,#3 
 504 0386 08D0     	    beq input_pull 
 505              	output_type:
 506 0388 4FEA1212 	    lsr r2,#4 
 507 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 508 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 509 0392 43EA0203 	    orr r3,r2 
 510 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 511 0398 07E0     	    b 9f 
 512              	input_pull:
 513 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 514 039c 4FEA1212 	    lsr r2,#4 
 515 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 516 03a4 43EA0203 	    orr r3,r2 
 517 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 518 03aa BDE82808 	9:  pop {r3,r5,r11}
 519 03ae 7047     	    _RET 
 520              	
 521              	// configure gpio speed 
 522              	// input:
 523              	//    r0   GPIO_BASE_ADR 
 524              	//    r1   pin 
 525              	//    r2   speed
 526              	// use:
 527              	//  r3,r5,r11 
 528              	gpio_speed:
 529 03b0 2DE92808 	    push {r3,r5,r11}
 530 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 531 03b6 4FF00305 	    mov r5,#3
 532 03ba 4FF0020B 	    mov r11,#2 
 533 03be 01FB0BFB 	    mul r11,r1 
 534 03c2 05FA0BF5 	    lsl r5,r11
 535 03c6 6FEA0505 	    mvn r5,r5 
 536 03ca 03EA0503 	    and r3,r5   
 537 03ce 02FA0BF2 	    lsl r2,r11  
 538 03d2 43EA0203 	    orr r3,r2 
 539 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 540 03d8 BDE82808 	    pop {r3,r5,r11}
 541 03dc 7047     	    _RET
 542              	
 543              	/**************************** 
 544              	  gpio_out port,pin,0|1
ARM GAS  forth.s 			page 22


 545              	  input:
 546              	    r0   gpio_base_adr 
 547              	    r1   pin 
 548              	    r2   data 0|1 
 549              	**************************/
 550              	gpio_out:
 551 03de 08B4     	    push {r3}
 552 03e0 4FF00103 	    mov r3,#1 
 553 03e4 03FA01F3 	    lsl r3,r1 
 554 03e8 0AB9     	    cbnz r2, 1f 
 555 03ea 4FEA0343 	    lsl r3,#16 
 556 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 557 03f0 08BC     	    pop {r3}
 558 03f2 7047     	    _RET 
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564              		.p2align 2
 565              	UZERO:
 566 03f4 00000000 		.word 0  			/*Reserved */
 567 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 568 03fc 00000000 		.word 0      /* TICKS */
 569 0400 00000000 	    .word 0     /* CD_TIMER */
 570 0404 E03F0000 		.word HI  /*'BOOT */
 571 0408 D4130000 		.word PS2_QKEY /* query for character */
 572 040c 9C0C0000 	  .word TV_EMIT  /* char output device */
 573 0410 0A000000 	  .word BASEE 	/*BASE */
 574 0414 00000000 		.word 0			/*tmp */
 575 0418 00000000 		.word 0			/*SPAN */
 576 041c 00000000 		.word 0			/*>IN */
 577 0420 00000000 		.word 0			/*#TIB */
 578 0424 00FF0120 		.word TIBB	/*TIBU */
 579 0428 A4330000 		.word INTER	/*'EVAL */
 580 042c 00000000 		.word 0			/*HLD */
 581 0430 F4400000 		.word _LASTN	/*CONTEXT */
 582 0434 5C410000 		.word CTOP  	/* FCP end of system dictionnary */
 583 0438 683D0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 584 043c F4400000 		.word _LASTN	/*LAST word in dictionary */
 585 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 585      00000000 
 585      00000000 
 585      00000000 
 586 0450 00000000 		.word 0  /* RX_HEAD */
 587 0454 00000000 		.word 0  /* RX_TAIL */ 
 588 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 589 045c 00000000 		.word 0  /* VID_STATE, video state */  
 590 0460 00000000 	    .word 0  /* VID_FIELD, field */
 591 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 592 0468 00000000 	    .word 0 /* kbd struct */
 593 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 593      00000000 
 593      00000000 
 593      00000000 
 594 047c 00000000 		.word 0  /* kbd queue head */
 595 0480 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 23


 596 0484 00000000 	    .word 0 /* tv cursor row */
 597 0488 00000000 	    .word 0 /* tv cursor column */ 
 598 048c 00000000 	    .word 0 /* tv back color */
 599 0490 07000000 	    .word 7 /* tv font color */
 600 0494 00000000 	    .space FP_WS_SIZE  /* floating point work space */ 
 600      00000000 
 600      00000000 
 600      00000000 
 600      000000
 601 04a7 00000000 	    .word 0,0 
 601      00000000 
 602              	ULAST:
 603              	
 604              	// used by _HEADER macro 
 605              	// to link names field
 606              	// in dictionary  
 607 04af 00120000 	    .equ LINK, 0 
 607      00E60000 
 607      00841C00 
 607      00F40300 
 607      00
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04c0 4FF48053 		_MOV32 r3,UART 
ARM GAS  forth.s 			page 24


  36      C4F20103 
  37 04c8 1868     		ldr r0,[r3,#USART_SR]
  38 04ca 5968     		ldr r1,[r3,#USART_DR]
  39 04cc 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04d0 0CD0     		beq 2f // no char received 
  41 04d2 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04d6 3FF4FDAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04da 04F14C00 		add r0,UP,#RX_QUEUE
  44 04de 226E     		ldr r2,[UP,#RX_TAIL]
  45 04e0 8154     		strb r1,[r0,r2]
  46 04e2 02F10102 		add r2,#1 
  47 04e6 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04ea 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04ec 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04ee 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04f6 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04f8 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04fc 01EA0201 	  and r1,r1,r2
  62 0500 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0504 41EA0201 	  orr r1,r1,r2 
  64 0508 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 050a 4FF4EE61 	  mov r1,#0x77<<4 
  67 050e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0510 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0518 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 051c 8160     	  str r1,[r0,#USART_BRR]
  73 051e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0522 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0524 4FF02500 	  mov r0,#USART1_IRQ 
  77 0528 4FF00701 	  mov r1,#7
  78 052c 00B5FFF7 	  _CALL nvic_set_priority
  78      BBFE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0536 4FF02500 	  mov r0,#USART1_IRQ 
  81 053a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      CDFE5DF8 
  81      04EB
  82 0544 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
ARM GAS  forth.s 			page 25


  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0546 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0554 47F8046D 		_PUSH
  92 0558 206E     		ldr T0,[UP,#RX_TAIL] 
  93 055a E16D     		ldr T1,[UP,#RX_HEAD]
  94 055c 90EA0106 		eors TOS,T0,T1 
  95 0560 0CD0     		beq 1f
  96 0562 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0566 0844     		add T0,T1 
  98 0568 0678     		ldrb TOS,[T0]
  99 056a 01F10101 		add T1,#1 
 100 056e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0572 E165     		str T1,[UP,#RX_HEAD]
 102 0574 47F8046D 		_PUSH 
 103 0578 4FF0FF36 		mov TOS,#-1
 104 057c 01F086BB 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0580 4A050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0590 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0598 2868     	1:  ldr T0,[WP,#USART_SR]
 113 059a 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 059e FBD0     		beq 1b 
 115 05a0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 05a2 57F8046B 		_POP
 117 05a6 01F071BB 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 05aa 84050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05b4 47F8046D 	        _PUSH 
 126 05b8 4FF00006 	        mov TOS,#0
 127 05bc 01F066BB 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05c0 AE050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
ARM GAS  forth.s 			page 26


 133      49414C00 
 134 05cc 47F8046D 	        _PUSH 
 135 05d0 4FF00106 	        mov TOS,#1
 136 05d4 01F05ABB 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05d8 C4050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05e4 3046     	        mov T0,TOS
 144 05e6 57F8046B 	        _POP 
 145 05ea 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05ec 4B48     	        ldr T0,=SER_QKEY 
 148 05ee 6061     	        str T0,[UP,#STDIN]
 149 05f0 4B48     	        ldr T0,=SER_EMIT
 150 05f2 A061     	        str T0,[UP,#STDOUT]
 151 05f4 01F04ABB 	        _NEXT 
 152              	4: // local console 
 153 05f8 4A48     	        ldr T0,=PS2_QKEY
 154 05fa 6061     	        str T0,[UP,#STDIN]
 155 05fc 4A48     	        ldr T0,=TV_EMIT
 156 05fe A061     	        str T0,[UP,#STDOUT]
 157 0600 01F044BB 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0604 DC050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0614 504700BF 	      _NEST 
 166 0618 0B1E0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0620 5D200000 	1:    _ADR ONEP  // c+1
 168 0624 E51E0000 	      _ADR TOR   
 169 0628 0B1E0000 	      _DOLIT 10 
 169      0A000000 
 170 0630 4D250000 	      _ADR SLMOD // r q  
 171 0634 11210000 	      _ADR QDUP  // r q q | r 0  
 172 0638 4B1E0000 	      _QBRAN 2f  // r 0 
 172      4C060000 
 173 0640 BD1E0000 	      _ADR RFROM // r q c 
 174 0644 5F1E0000 	      _BRAN 1b
 174      20060000 
 175 064c 0B1E0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0654 01200000 	      _ADR PLUS 
 177 0658 151D0000 	      _ADR EMIT 
 178 065c BD1E0000 	      _ADR RFROM 
 179 0660 11210000 	      _ADR QDUP 
ARM GAS  forth.s 			page 27


 180 0664 4B1E0000 	      _QBRAN 3f
 180      7C060000 
 181 066c 6D200000 	      _ADR ONEM 
 182 0670 E51E0000 	      _ADR TOR 
 183 0674 5F1E0000 	      _BRAN 2b 
 183      4C060000 
 184              	3:    
 185 067c 931C0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0680 08060000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 068c 504700BF 	      _NEST 
 193 0690 0B1E0000 	      _DOLIT 27 
 193      1B000000 
 194 0698 151D0000 	      _ADR EMIT 
 195 069c 0B1E0000 	      _DOLIT '['
 195      5B000000 
 196 06a4 151D0000 	      _ADR EMIT 
 197 06a8 931C0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 06ac 84060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06b8 504700BF 	      _NEST
 205 06bc 8D060000 	      _ADR ANSI_ESC
 206 06c0 4D1F0000 	      _ADR SWAP 
 207 06c4 15060000 	      _ADR ANSI_PARAM 
 208 06c8 0B1E0000 	      _DOLIT ';'
 208      3B000000 
 209 06d0 151D0000 	      _ADR EMIT
 210 06d4 15060000 	      _ADR ANSI_PARAM
 211 06d8 0B1E0000 	      _DOLIT 'H'
 211      48000000 
 212 06e0 151D0000 	      _ADR EMIT 
 213 06e4 931C0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06e8 B0060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06f4 504700BF 	    _NEST
 221 06f8 0B1E0000 	    _DOLIT 1 
 221      01000000 
 222 0700 3D1F0000 	    _ADR DUPP 
 223 0704 B9060000 	    _ADR SER_AT  
ARM GAS  forth.s 			page 28


 224 0708 8D060000 	    _ADR ANSI_ESC
 225 070c 0B1E0000 	    _DOLIT 'J'
 225      4A000000 
 226 0714 151D0000 	    _ADR EMIT 
 227 0718 931C0000 	    _UNNEST 
 228 071c 54050000 	
 228      90050000 
 228      D4130000 
 228      9C0C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
ARM GAS  forth.s 			page 29


  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 072c 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
ARM GAS  forth.s 			page 30


  77 0734 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0736 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 073e 41EA0201 	  orr r1,r2
  82 0742 0160     	  str r1,[r0,#GPIO_MODER]
  83 0744 81EA0101 	  eor r1,r1 
  84 0748 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 074a 4FF00101 	  mov r1,#1 // pin 1 
  88 074e 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0752 00B5FFF7 	  _CALL gpio_config 
  89      EDFD5DF8 
  89      04EB
  90 075c 4FF00101 	  mov r1,#1 
  91 0760 4FF00202 	  mov r2,#2
  92 0764 00B5FFF7 	  _CALL gpio_speed 
  92      23FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 076e 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0770 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0774 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0776 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 077e 4FF00200 	  mov r0,#2 
 100 0782 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0784 41EA0001 	  orr r1,r0 
 102 0788 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 078a 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0792 41F2D470 	  mov r0,#HPER
 106 0796 D062     	  str r0,[r2,#TIM_ARR]
 107 0798 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 079c D063     	  str r0,[r2,#TIM_CCR3]
 109 079e 4FF4E170 	  mov r0,#HPULSE 
 110 07a2 1064     	  str r0,[r2,#TIM_CCR4]  
 111 07a4 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 07a8 D061     	  str r0,[r2,#TIM_CCMR2]
 113 07aa 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 07ae 1062     	  str r0,[r2,#TIM_CCER]
 115 07b0 4FF00100 	  mov r0,#1 
 116 07b4 D060     	  str r0,[r2,#TIM_DIER]
 117 07b6 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07b8 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07bc 4FF00201 	  mov r1,#2
 121 07c0 00B5FFF7 	  _CALL nvic_set_priority
 121      71FD5DF8 
 121      04EB
 122 07ca 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07ce 00B5FFF7 	  _CALL nvic_enable_irq
 123      83FD5DF8 
ARM GAS  forth.s 			page 31


 123      04EB
 124 07d8 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07da 00BF     	  _GBL_FUNC tv_out_isr
 132 07dc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07e4 81EA0101 	  eor T1,T1
 134 07e8 0161     	  str T1,[T0,#TIM_SR]
 135 07ea 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07ec 01F10101 	  add T1,#1 
 137 07f0 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07f2 A26E     	  ldr T2,[UP,#VID_STATE]
 140 07f4 002A     	  cmp T2,#ST_VSYNC 
 141 07f6 07D0     	  beq state_vsync
 142 07f8 012A     	  cmp T2,#ST_PREVID 
 143 07fa 2FD0     	  beq state_pre_video 
 144 07fc 022A     	  cmp T2,#ST_VIDEO 
 145 07fe 36D0     	  beq state_video_out 
 146 0800 032A     	  cmp T2,#ST_POSTVID 
 147 0802 63D0     	  beq state_post_video
 148 0804 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0808 0129     	  cmp T1,#1
 152 080a 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 080c 4FF0DB01 	  mov T1,#SERRATION
 155 0810 0164     	  str T1,[T0,#TIM_CCR4]
 156 0812 40F6E931 	  mov T1,#SYNC_LINE 
 157 0816 C162     	  str T1,[T0,#TIM_ARR]
 158 0818 6BE0     	  b tv_isr_exit 
 159 081a 0729     	1: cmp T1,#7
 160 081c 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 081e 40F62821 	  mov T1,#VSYNC_PULSE
 163 0822 0164     	  str T1,[T0,#TIM_CCR4]
 164 0824 65E0     	  b tv_isr_exit
 165 0826 0D29     	2: cmp T1,#13
 166 0828 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 082a 4FF0DB01 	   mov T1,#SERRATION 
 169 082e 0164     	   str T1,[T0,#TIM_CCR4]
 170 0830 5FE0     	   b tv_isr_exit   
 171 0832 1229     	3: cmp T1,#18
 172 0834 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0836 E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0838 0029     	   cmp T1,#ODD_FIELD  
 176 083a 5AD0     	   beq tv_isr_exit 
 177 083c 01E0     	   b sync_end 
 178 083e 1329     	4: cmp T1,#19 
ARM GAS  forth.s 			page 32


 179 0840 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0842 4FF00901 	   mov T1,#9
 182 0846 6166     	   str T1,[UP,#VID_CNTR]
 183 0848 4FF4E171 	   mov T1,#HPULSE 
 184 084c 0164     	   str T1,[T0,#TIM_CCR4] 
 185 084e 41F2D471 	   mov T1,#HPER 
 186 0852 C162     	   str T1,[T0,#TIM_ARR] 
 187 0854 4FF00101 	   mov T1,#ST_PREVID 
 188 0858 A166     	   str T1,[UP,#VID_STATE]
 189 085a 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 085c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 085e 48D4     	   bmi tv_isr_exit 
 194 0860 4FF00201 	   mov T1,#ST_VIDEO 
 195 0864 A166     	   str T1,[UP,#VID_STATE]
 196 0866 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 086a C160     	   str T1,[T0,#TIM_DIER]
 198 086c 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 086e F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0870 06D9     	   bls 1f 
 205 0872 4FF00301 	   mov T1,#ST_POSTVID 
 206 0876 A166     	   str T1,[UP,#VID_STATE]
 207 0878 4FF00101 	   mov T1,#1 
 208 087c C160     	   str T1,[T0,#TIM_DIER]
 209 087e 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0880 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0882 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0886 4FF0A003 	   mov T3,#160
 214 088a 03FB01F1 	   mul T1,T3 
 215 088e 0844     	   add T0,T1  
 216 0890 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0898 10F8012B 	2: ldrb T2,[T0],#1 
 222 089c 4FEA0222 	   lsl T2,#8 
 223 08a0 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 08a2 AFF30080 	   nop.w 
 225 08a6 AFF30080 	   nop.w
 226 08aa AFF30080 	   nop.w 
 227 08ae AFF30080 	   nop.w 
 228 08b2 4FEA0212 	   lsl T2,#4  
 229 08b6 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08b8 AFF30080 	   nop.w
 231 08bc AFF30080 	   nop.w  
 232 08c0 013B     	   subs T3,#1
 233 08c2 E9D1     	   bne 2b  
 234 08c4 4FF47022 	   mov T2,#(15<<16) 
ARM GAS  forth.s 			page 33


 235 08c8 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08ca 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08cc 4FF48372 	   mov T2,#262
 239 08d0 9142     	   cmp T1,T2
 240 08d2 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08d4 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08d6 11B9     	   cbnz T1, frame_end 
 244 08d8 40F6E931 	   mov T1,#SYNC_LINE
 245 08dc C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08de 4FF00001 	   mov T1,#ST_VSYNC 
 248 08e2 A166     	   str T1,[UP,#VID_STATE]
 249 08e4 81EA0101 	   eor T1,T1 
 250 08e8 6166     	   str T1,[UP,#VID_CNTR]
 251 08ea E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08ec 6FEA0101 	   mvn T1,T1  
 253 08f0 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08f2 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08f4 EC060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0904 47F8046D 		_PUSH 
 266 0908 04F19806 		ADD TOS,UP,#BK_COLOR
 267 090c 01F0BEB9 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0910 F8080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0920 47F8046D 		_PUSH 
 273 0924 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0928 01F0B0B9 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 092c 14090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0938 47F8046D 	  _PUSH 
 280 093c 04F19406 	  ADD TOS,UP,#COL 
 281 0940 01F0A4B9 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
ARM GAS  forth.s 			page 34


 284              	// cursor row 
 285 0944 30090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 094c 47F8046D 	  _PUSH 
 287 0950 04F19006 	  ADD TOS,UP,#ROW 
 288 0954 01F09AB9 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0958 48090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0964 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0968 00FB06F6 	  mul TOS,T0 
 295 096c 01F08EB9 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0970 5C090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 097c 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0980 00FB06F6 	  mul TOS,T0 
 302 0984 01F082B9 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0988 74090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0994 47F8046D 	  _PUSH 
 308 0998 DFF88C65 	  ldr TOS,=font_6x8 
 309 099c 01F076B9 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 09a0 8C090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 09ac 47F8046D 	  _PUSH 
 315 09b0 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 09b2 01F06BB9 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09b6 A4090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09c0 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09c2 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09c6 02FB00F0 	    mul T0,T2 
ARM GAS  forth.s 			page 35


 330 09ca 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09ce 1044     	    add T0,T2 
 332 09d0 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09d2 0344     	    add T3,T0 // T3 -> byte address 
 334 09d4 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09d6 4FF00F02 	    mov T2,#15 // AND mask 
 336 09da 11F0010F 	    tst T1,#1 
 337 09de 01D0     	    beq 1f 
 338 09e0 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09e4 DFF84405 	1:  ldr T0,=plot_op 
 340 09e8 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09ec 05EA0205 	    and WP,T2 // mask out nibble 
 343 09f0 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09f4 11F0010F 	    tst T1,#1 
 345 09f8 01D1     	    bne 1f 
 346 09fa 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09fe 45EA0005 	1:  orr WP,T0  
 348 0a02 1D70     	    strb WP,[T3]
 349 0a04 1AE0     	    b 9f 
 350              	op_pen: 
 351 0a06 05EA0205 	    and WP,T2 
 352 0a0a 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0a0e 11F0010F 	    tst T1,#1
 354 0a12 01D1     	    bne 1f 
 355 0a14 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a18 45EA0005 	1:	orr WP,T0 
 357 0a1c 1D70     	    strb WP,[T3]
 358 0a1e 0DE0     	    b 9f 
 359              	op_invert:
 360 0a20 85EA0205 	    eor WP,T2 
 361 0a24 1D70     	    strb WP,[T3]
 362 0a26 09E0     	    b 9f 
 363              	op_xor:
 364 0a28 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a2c 11F0010F 	    tst T1,#1 
 366 0a30 01D1     	    bne 1f 
 367 0a32 4FEA0010 	    lsl T0,#4 
 368 0a36 85EA0005 	1:  eor WP,T0 
 369 0a3a 1D70     	    strb WP,[T3]
 370 0a3c 57F8046B 	9:  _POP 
 371 0a40 01F024B9 	    _NEXT 
 372              	
 373 0a44 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a48 BA090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a54 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a56 0028     	    cmp T0,#0
 381 0a58 FCD1     	    bne 1b
 382 0a5a 01F017B9 	    _NEXT 
 383              	
 384              	// CLS ( -- )
ARM GAS  forth.s 			page 36


 385              	// clear TV screen 
 386 0a5e 4C0A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0a68 80EA0000 	    eor T0,T0 
 388 0a6c 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a70 40EA0100 	    orr T0,T1 
 390 0a74 4FEA0111 	    lsl T1,#4 
 391 0a78 40EA0100 	    orr T0,T1 
 392 0a7c 4FEA0021 	    lsl T1,T0,#8 
 393 0a80 40EA0100 	    orr T0,T1 
 394 0a84 4FEA0041 	    lsl T1,T0,#16
 395 0a88 40EA0100 	    orr T0,T1 
 396 0a8c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a90 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a92 5050     	1:	str T0,[T2,T1]
 399 0a94 0439     	    subs T1,#4
 400 0a96 FCD1     	    bne 1b
 401 0a98 1060     	    str T0,[T2]
 402 0a9a 80EA0000 	    eor T0,T0 
 403 0a9e C4F89000 	    str T0,[UP,#ROW]
 404 0aa2 C4F89400 	    str T0,[UP,#COL]
 405 0aa6 01F0F1B8 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0aaa 620A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0ab8 504700BF 	  _NEST
 412 0abc 0B1E0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ac4 3D1F0000 	  _ADR DUPP  
 414 0ac8 E51E0000 	  _ADR TOR 
 415 0acc 21200000 	  _ADR STAR
 416 0ad0 AD090000 	  _ADR VIDBUFF
 417 0ad4 01200000 	  _ADR PLUS
 418 0ad8 BD1E0000 	  _ADR RFROM   
 419 0adc 0B1E0000 	  _DOLIT 0 
 419      00000000 
 420 0ae4 81270000 	  _ADR FILL 
 421 0ae8 931C0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0aec AE0A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0afc 504700BF 	    _NEST 
 429 0b00 AD090000 	    _ADR VIDBUFF 
 430 0b04 3D1F0000 	    _ADR DUPP 
 431 0b08 0B1E0000 	    _DOLIT BPR*CHAR_HEIGHT 
ARM GAS  forth.s 			page 37


 431      00050000 
 432 0b10 3D1F0000 	    _ADR DUPP 
 433 0b14 E51E0000 	    _ADR TOR 
 434 0b18 01200000 	    _ADR PLUS 
 435 0b1c 4D1F0000 	    _ADR SWAP 
 436 0b20 0B1E0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b28 BD1E0000 	    _ADR RFROM  
 438 0b2c 11200000 	    _ADR SUBB 
 439 0b30 39270000 	    _ADR MOVE
 440 0b34 0B1E0000 	    _DOLIT 24 
 440      18000000 
 441 0b3c B90A0000 	    _ADR CLRLINE 
 442 0b40 931C0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b44 F00A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b54 504700BF 	    _NEST 
 450 0b58 AD090000 	    _ADR VIDBUFF
 451 0b5c 3D1F0000 	    _ADR DUPP 
 452 0b60 0B1E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b68 01200000 	    _ADR PLUS 
 454 0b6c 0B1E0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b74 0B1E0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b7c 11200000 	    _ADR SUBB  
 457 0b80 39270000 	    _ADR MOVE
 458 0b84 0B1E0000 	    _DOLIT 0 
 458      00000000 
 459 0b8c B90A0000 	    _ADR CLRLINE
 460 0b90 931C0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b94 480B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0ba0 E34D     	    ldr WP,=SCROLLUP 
 469 0ba2 45F00105 	    orr WP,#1
 470 0ba6 80EA0000 	    eor T0,T0 
 471 0baa C4F89400 	    str T0,[UP,#COL]
 472 0bae D4F89000 	    ldr T0,[UP,#ROW]
 473 0bb2 1828     	    cmp T0,#24 
 474 0bb4 A2D0     	    beq SCROLLUP  
 475 0bb6 00F10100 	    add T0,#1 
 476 0bba C4F89000 	    str T0,[UP,#ROW]
ARM GAS  forth.s 			page 38


 477 0bbe 01F065B8 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0bc2 980B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bcc D4F89400 	  ldr T0,[UP,#COL]
 484 0bd0 00F10100 	  add T0,#1
 485 0bd4 3528     	  cmp T0,#53
 486 0bd6 E3D5     	  bpl TV_CRLF  
 487 0bd8 C4F89400 	  str T0,[UP,#COL]
 488 0bdc 01F056B8 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0be0 C60B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0bec D4F89400 	    ldr T0,[UP,#COL]
 497 0bf0 28B1     	    cbz T0,1f 
 498 0bf2 A0F10100 	    sub T0,#1 
 499 0bf6 C4F89400 	    str T0,[UP,#COL]
 500 0bfa 01F047B8 	    _NEXT 
 501 0bfe D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0c02 38B1     	    cbz T0,9f
 503 0c04 A0F10100 	    sub T0,#1
 504 0c08 C4F89000 	    str T0,[UP,#ROW]
 505 0c0c 4FF03400 	    mov T0,#52 
 506 0c10 C4F89400 	    str T0,[UP,#COL]
 507 0c14 01F03AB8 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c18 4FF08000 	    mov T0,#128 
 513 0c1c 06EA0006 	    and TOS,T0 
 514 0c20 4FEAD616 	    lsr TOS,#7
 515 0c24 01F032B8 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c28 3868     	  ldr T0,[DSP]
 520 0c2a 00F10100 	  add T0,#1 
 521 0c2e 3860     	  str T0,[DSP]
 522 0c30 01F02CB8 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c34 4FEA4606 	    lsl TOS,#1
 527 0c38 01F028B8 	    _NEXT 
 528              	
 529              	
ARM GAS  forth.s 			page 39


 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0c3c 504700BF 	    _NEST 
 536 0c40 0B1E0000 	    _DOLIT 5 
 536      05000000 
 537 0c48 E51E0000 	    _ADR TOR 
 538 0c4c E51E0000 	1:  _ADR TOR 
 539 0c50 75210000 	    _ADR DDUP 
 540 0c54 D11E0000 	    _ADR RAT
 541 0c58 190C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c5c C1090000 	    _ADR PLOT 
 543 0c60 290C0000 	    _ADR INCR_X 
 544 0c64 BD1E0000 	    _ADR RFROM 
 545 0c68 350C0000 	    _ADR NEXT_PIXEL
 546 0c6c 2D1E0000 	    _DONXT 1b
 546      4C0C0000 
 547 0c74 61210000 	    _ADR TDROP 
 548 0c78 931C0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0c7c A6F12006 	   sub TOS,#32
 553 0c80 4FF00800 	   mov T0,#8 
 554 0c84 00FB06F6 	   mul TOS,T0 
 555 0c88 A748     	   ldr T0,=font_6x8
 556 0c8a 0644     	   add TOS,T0 
 557 0c8c 00F0FEBF 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0c90 E40B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0c9c 504700BF 	    _NEST
 565 0ca0 3D1F0000 	    _ADR DUPP 
 566 0ca4 0B1E0000 	    _DOLIT 32 
 566      20000000 
 567 0cac 09220000 	    _ADR ULESS
 568 0cb0 4B1E0000 	    _QBRAN 1f
 568      C00C0000 
 569 0cb8 5F1E0000 	    _BRAN CTRL_KEY
 569      240D0000 
 570 0cc0 7D0C0000 	1:  _ADR CHAR_FONT 
 571 0cc4 39090000 	    _ADR CURSOR_COL 
 572 0cc8 911E0000 	    _ADR AT
 573 0ccc 7D090000 	    _ADR COLX  // x coord 
 574 0cd0 4D090000 	    _ADR CURSOR_ROW 
 575 0cd4 911E0000 	    _ADR AT    
 576 0cd8 65090000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0cdc 25210000 	    _ADR ROT  // TEST 
 578 0ce0 0B1E0000 	    _DOLIT 7   
 578      07000000 
ARM GAS  forth.s 			page 40


 579 0ce8 E51E0000 	    _ADR TOR  
 580 0cec E51E0000 	1:  _ADR TOR  // { x y }
 581 0cf0 75210000 	    _ADR DDUP  // { x y x y }
 582 0cf4 D11E0000 	    _ADR RAT 
 583 0cf8 B11E0000 	    _ADR CAT   // { x y x y r }
 584 0cfc 3D0C0000 	    _ADR CHAR_ROW 
 585 0d00 5D200000 	    _ADR ONEP // {x y' }
 586 0d04 BD1E0000 	    _ADR RFROM 
 587 0d08 5D200000 	    _ADR ONEP // {x y' c-adr' }
 588 0d0c 2D1E0000 	    _DONXT 1b
 588      EC0C0000 
 589 0d14 61210000 	    _ADR TDROP  
 590 0d18 CD0B0000 	    _ADR RIGHT
 591 0d1c 0D0E0000 	9:  _ADR SHOW_CURSOR 
 592 0d20 931C0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0d24 950E0000 	    _ADR HIDE_CURSOR
 595 0d28 3D1F0000 	    _ADR DUPP 
 596 0d2c 0B1E0000 	    _DOLIT BKSPP  
 596      08000000 
 597 0d34 F1210000 	    _ADR EQUAL 
 598 0d38 4B1E0000 	    _QBRAN 1f 
 598      500D0000 
 599 0d40 ED0D0000 	    _ADR BACK_SPACE 
 600 0d44 2D1F0000 	8:  _ADR DROP 
 601 0d48 5F1E0000 	    _BRAN 9b 
 601      1C0D0000 
 602 0d50 3D1F0000 	1:  _ADR DUPP 
 603 0d54 0B1E0000 	    _DOLIT CRR 
 603      0D000000 
 604 0d5c F1210000 	    _ADR EQUAL 
 605 0d60 4B1E0000 	    _QBRAN 1f 
 605      740D0000 
 606 0d68 950D0000 	    _ADR CAR_RET
 607 0d6c 5F1E0000 	    _BRAN 8b
 607      440D0000 
 608 0d74 0B1E0000 	1:  _DOLIT LF 
 608      0A000000 
 609 0d7c F1210000 	    _ADR EQUAL 
 610 0d80 4B1E0000 	    _QBRAN 9b 
 610      1C0D0000 
 611 0d88 AD0D0000 	    _ADR LN_FEED
 612 0d8c 5F1E0000 	    _BRAN 9b  
 612      1C0D0000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0d94 504700BF 	   _NEST
 620 0d98 0B1E0000 	   _DOLIT 0 
 620      00000000 
 621 0da0 39090000 	   _ADR CURSOR_COL 
 622 0da4 7D1E0000 	   _ADR STORE 
 623 0da8 931C0000 	   _UNNEST   
 624              	
ARM GAS  forth.s 			page 41


 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 0dac 504700BF 	    _NEST 
 631 0db0 4D090000 	    _ADR CURSOR_ROW 
 632 0db4 911E0000 	    _ADR AT 
 633 0db8 3D1F0000 	    _ADR DUPP 
 634 0dbc 0B1E0000 	    _DOLIT 24 
 634      18000000 
 635 0dc4 A91F0000 	    _ADR XORR 
 636 0dc8 4B1E0000 	    _QBRAN 1f
 636      E00D0000 
 637 0dd0 5D200000 	    _ADR ONEP 
 638 0dd4 4D090000 	    _ADR CURSOR_ROW 
 639 0dd8 7D1E0000 	    _ADR STORE 
 640 0ddc 931C0000 	    _UNNEST    
 641 0de0 2D1F0000 	1:  _ADR DROP 
 642 0de4 FD0A0000 	    _ADR SCROLLUP 
 643 0de8 931C0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 0dec 504700BF 	  _NEST 
 652 0df0 ED0B0000 	  _ADR LEFT 
 653 0df4 0D0E0000 	  _ADR SHOW_CURSOR
 654 0df8 931C0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 0dfc 940C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 0e0c 504700BF 	    _NEST 
 663 0e10 0B1E0000 	    _DOLIT 0xFF
 663      FF000000 
 664 0e18 4D090000 	0:  _ADR CURSOR_ROW
 665 0e1c 911E0000 	    _ADR AT  
 666 0e20 5D200000 	    _ADR ONEP 
 667 0e24 65090000 	    _ADR ROWY 
 668 0e28 0B1E0000 	    _DOLIT BPR
 668      A0000000 
 669 0e30 21200000 	    _ADR STAR
 670 0e34 0B1E0000 	    _DOLIT BPR  
 670      A0000000 
 671 0e3c 11200000 	    _ADR SUBB 
 672 0e40 39090000 	    _ADR CURSOR_COL
 673 0e44 911E0000 	    _ADR AT 
ARM GAS  forth.s 			page 42


 674 0e48 7D090000 	    _ADR COLX 
 675 0e4c 01210000 	    _ADR TWOSL  
 676 0e50 01200000 	    _ADR PLUS
 677 0e54 AD090000 	    _ADR VIDBUFF
 678 0e58 01200000 	    _ADR PLUS
 679 0e5c 0B1E0000 	    _DOLIT 2
 679      02000000 
 680 0e64 E51E0000 	    _ADR TOR  
 681 0e68 75210000 	1:  _ADR DDUP 
 682 0e6c 9D1E0000 	    _ADR CSTOR 
 683 0e70 5D200000 	    _ADR ONEP 
 684 0e74 2D1E0000 	    _DONXT 1b
 684      680E0000 
 685 0e7c 4D210000 	2:  _ADR DDROP // drop 3 elements 
 686 0e80 931C0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 0e84 000E0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 0e94 504700BF 	    _NEST 
 694 0e98 05090000 	    _ADR BACKCOLOR 
 695 0e9c 911E0000 	    _ADR AT 
 696 0ea0 3D1F0000 	    _ADR DUPP  
 697 0ea4 0B1E0000 	    _DOLIT 4 
 697      04000000 
 698 0eac F11F0000 	    _ADR LSHIFT 
 699 0eb0 951F0000 	    _ADR ORR 
 700 0eb4 5F1E0000 	    _BRAN 0b
 700      180E0000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 0ebc 880E0000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 0ec8 352E     	    cmp TOS,#53
 706 0eca 01D4     	    bmi 1f 
 707 0ecc 4FF03406 	    mov TOS,#52
 708 0ed0 C4F89460 	1:  str TOS,[UP,#COL]
 709 0ed4 57F8046B 	    _POP
 710 0ed8 192E     	    cmp TOS,#25
 711 0eda 01D4     	    bmi 1f 
 712 0edc 4FF01806 	    mov TOS,#24 
 713 0ee0 C4F89060 	1:  str TOS,[UP,#ROW]
 714 0ee4 57F8046B 	    _POP 
 715 0ee8 00F0D0BE 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 0eec C00E0000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
ARM GAS  forth.s 			page 43


 720 0ef8 504700BF 	    _NEST 
 721 0efc B1260000 	    _ADR PAD 
 722 0f00 3D1F0000 	    _ADR DUPP 
 723 0f04 5D200000 	    _ADR ONEP 
 724 0f08 0B1E0000 	    _DOLIT 53
 724      35000000 
 725 0f10 91320000 	    _ADR ACCEP
 726 0f14 4D1F0000 	    _ADR SWAP 
 727 0f18 2D1F0000 	    _ADR DROP 
 728 0f1c 611F0000 	    _ADR OVER 
 729 0f20 9D1E0000 	    _ADR CSTOR  
 730 0f24 931C0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
ARM GAS  forth.s 			page 44


 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
ARM GAS  forth.s 			page 45


 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
ARM GAS  forth.s 			page 46


 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
ARM GAS  forth.s 			page 47


   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
ARM GAS  forth.s 			page 48


  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
ARM GAS  forth.s 			page 49


  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
ARM GAS  forth.s 			page 50


 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f34 1C61     	   .byte 0x1c,'a' 
   9 0f36 3262     	   .byte 0x32,'b'
  10 0f38 2163     	   .byte 0x21,'c'
  11 0f3a 2364     	   .byte 0x23,'d'
  12 0f3c 2465     	   .byte 0x24,'e'
  13 0f3e 2B66     	   .byte 0x2b,'f'
  14 0f40 3467     	   .byte 0x34,'g'
  15 0f42 3368     	   .byte 0x33,'h'
  16 0f44 4369     	   .byte 0x43,'i'
  17 0f46 3B6A     	   .byte 0x3B,'j'
  18 0f48 426B     	   .byte 0x42,'k'
  19 0f4a 4B6C     	   .byte 0x4b,'l'
  20 0f4c 3A6D     	   .byte 0x3a,'m'
  21 0f4e 316E     	   .byte 0x31,'n'
  22 0f50 446F     	   .byte 0x44,'o'
  23 0f52 4D70     	   .byte 0x4d,'p'
  24 0f54 1571     	   .byte 0x15,'q'
  25 0f56 2D72     	   .byte 0x2d,'r'
  26 0f58 1B73     	   .byte 0x1b,'s'
  27 0f5a 2C74     	   .byte 0x2c,'t'
  28 0f5c 3C75     	   .byte 0x3c,'u'
  29 0f5e 2A76     	   .byte 0x2a,'v'
  30 0f60 1D77     	   .byte 0x1d,'w'
  31 0f62 2278     	   .byte 0x22,'x'
  32 0f64 3579     	   .byte 0x35,'y'
  33 0f66 1A7A     	   .byte 0x1a,'z'
  34 0f68 4530     	   .byte 0x45,'0'
  35 0f6a 1631     	   .byte 0x16,'1'
  36 0f6c 1E32     	   .byte 0x1e,'2'
  37 0f6e 2633     	   .byte 0x26,'3'
  38 0f70 2534     	   .byte 0x25,'4'
  39 0f72 2E35     	   .byte 0x2e,'5'
  40 0f74 3636     	   .byte 0x36,'6'
  41 0f76 3D37     	   .byte 0x3d,'7'
  42 0f78 3E38     	   .byte 0x3e,'8'
  43 0f7a 4639     	   .byte 0x46,'9'
  44 0f7c 0E60     	   .byte 0x0e,'`'
  45 0f7e 4E2D     	   .byte 0x4e,'-'
ARM GAS  forth.s 			page 51


  46 0f80 553D     	   .byte 0x55,'='
  47 0f82 5D5C     	   .byte 0x5d,'\\'
  48 0f84 545B     	   .byte 0x54,'['
  49 0f86 5B5D     	   .byte 0x5b,']'
  50 0f88 4C3B     	   .byte 0x4c,';'
  51 0f8a 5227     	   .byte 0x52,'\''
  52 0f8c 412C     	   .byte 0x41,','
  53 0f8e 492E     	   .byte 0x49,'.'
  54 0f90 7C2A     	   .byte 0x7c,'*'
  55 0f92 792B     	   .byte 0x79,'+'
  56 0f94 2920     	   .byte 0x29,' '
  57 0f96 5A0D     	   .byte SC_ENTER,CRR 
  58 0f98 6608     	   .byte SC_BKSP,BKSPP 
  59 0f9a 0D09     	   .byte SC_TAB,9
  60 0f9c 761B     	   .byte SC_ESC,27
  61 0f9e 119E     	   .byte SC_LALT,VK_LALT 
  62 0fa0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0fa2 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0fa4 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0fa6 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0fa8 5800     	   .byte SC_CAPS,0
  67 0faa 0580     	   .byte SC_F1,VK_F1
  68 0fac 0681     	   .byte SC_F2,VK_F2
  69 0fae 0482     	   .byte SC_F3,VK_F3
  70 0fb0 0C83     	   .byte SC_F4,VK_F4
  71 0fb2 0384     	   .byte SC_F5,VK_F5
  72 0fb4 0B85     	   .byte SC_F6,VK_F6
  73 0fb6 8386     	   .byte SC_F7,VK_F7
  74 0fb8 0A87     	   .byte SC_F8,VK_F8
  75 0fba 0188     	   .byte SC_F9,VK_F9
  76 0fbc 098A     	   .byte SC_F10,VK_F10
  77 0fbe 788B     	   .byte SC_F11,VK_F11
  78 0fc0 078C     	   .byte SC_F12,VK_F12
  79 0fc2 7030     	   .byte SC_KP0,'0'
  80 0fc4 6931     	   .byte SC_KP1,'1'
  81 0fc6 7232     	   .byte SC_KP2,'2'
  82 0fc8 7A33     	   .byte SC_KP3,'3'
  83 0fca 6B34     	   .byte SC_KP4,'4'
  84 0fcc 7335     	   .byte SC_KP5,'5'
  85 0fce 7436     	   .byte SC_KP6,'6'
  86 0fd0 6C37     	   .byte SC_KP7,'7'
  87 0fd2 7538     	   .byte SC_KP8,'8'
  88 0fd4 7D39     	   .byte SC_KP9,'9'
  89 0fd6 7C2A     	   .byte SC_KPMUL,'*'
  90 0fd8 4A2F     	   .byte SC_KPDIV,'/'
  91 0fda 792B     	   .byte SC_KPPLUS,'+'
  92 0fdc 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fde 712E     	   .byte SC_KPDOT,'.'
  94 0fe0 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fe2 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fe4 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fe6 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fe8 6141     	   .byte 'a','A'
 102 0fea 6242     	   .byte 'b','B'
ARM GAS  forth.s 			page 52


 103 0fec 6343     	   .byte 'c','C'
 104 0fee 6444     	   .byte 'd','D'
 105 0ff0 6545     	   .byte 'e','E'
 106 0ff2 6646     	   .byte 'f','F'
 107 0ff4 6747     	   .byte 'g','G'
 108 0ff6 6848     	   .byte 'h','H'
 109 0ff8 6949     	   .byte 'i','I'
 110 0ffa 6A4A     	   .byte 'j','J'
 111 0ffc 6B4B     	   .byte 'k','K'
 112 0ffe 6C4C     	   .byte 'l','L'
 113 1000 6D4D     	   .byte 'm','M'
 114 1002 6E4E     	   .byte 'n','N'
 115 1004 6F4F     	   .byte 'o','O'
 116 1006 7050     	   .byte 'p','P'
 117 1008 7151     	   .byte 'q','Q'
 118 100a 7252     	   .byte 'r','R'
 119 100c 7353     	   .byte 's','S'
 120 100e 7454     	   .byte 't','T'
 121 1010 7555     	   .byte 'u','U'
 122 1012 7656     	   .byte 'v','V'
 123 1014 7757     	   .byte 'w','W'
 124 1016 7858     	   .byte 'x','X'
 125 1018 7959     	   .byte 'y','Y'
 126 101a 7A5A     	   .byte 'z','Z'
 127 101c 3121     	   .byte '1','!'
 128 101e 3240     	   .byte '2','@'
 129 1020 3323     	   .byte '3','#'
 130 1022 3424     	   .byte '4','$'
 131 1024 3525     	   .byte '5','%'
 132 1026 365E     	   .byte '6','^'
 133 1028 3726     	   .byte '7','&'
 134 102a 382A     	   .byte '8','*'
 135 102c 3928     	   .byte '9','('
 136 102e 3029     	   .byte '0',')'
 137 1030 2D5F     	   .byte '-','_'
 138 1032 3D2B     	   .byte '=','+'
 139 1034 607E     	   .byte '`','~'
 140 1036 2722     	   .byte '\'','"'
 141 1038 2C3C     	   .byte ',','<'
 142 103a 2E3E     	   .byte '.','>'
 143 103c 2F3F     	   .byte '/','?'
 144 103e 5C7C     	   .byte '\\','|'
 145 1040 3B3A     	   .byte ';',':'
 146 1042 5B7B     	   .byte '[','{'
 147 1044 5D7D     	   .byte ']','}'
 148 1046 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1048 315C     	   .byte '1','\\'
 153 104a 3240     	   .byte '2','@'
 154 104c 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 104e 363F     	   .byte '6','?'
 158 1050 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
ARM GAS  forth.s 			page 53


 160 1052 397B     	   .byte '9','{'
 161 1054 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 1056 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1058 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 105a 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 105c 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 105e 11A3     	    .byte SC_RALT,VK_RALT
 172 1060 2F97     	    .byte SC_APPS,VK_APPS
 173 1062 758D     	    .byte SC_UP,VK_UP
 174 1064 728E     	    .byte SC_DOWN,VK_DOWN
 175 1066 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1068 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 106a 7095     	    .byte SC_INSERT,VK_INSERT
 178 106c 6C91     	    .byte SC_HOME,VK_HOME
 179 106e 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1070 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1072 717F     	    .byte SC_DEL,VK_DELETE
 182 1074 6992     	    .byte SC_END,VK_END
 183 1076 4A2F     	    .byte SC_KPDIV,'/'
 184 1078 5A0D     	    .byte SC_KPENTER,'\r'
 185 107a 1200     	    .byte 0x12,0
 186 107c 7C00     	    .byte 0x7c,0
 187 107e 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1080 6303     	   .byte 'c', VK_CTRL_C 
 193 1082 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1084 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1086 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1088 11A3     	   .byte SC_RALT,VK_RALT
 197 108a 2F97     	   .byte SC_APPS,VK_APPS
 198 108c 7095     	   .byte SC_INSERT,VK_INSERT
 199 108e 6C91     	   .byte SC_HOME,VK_HOME
 200 1090 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1092 717F     	   .byte SC_DEL,VK_DELETE
 202 1094 6992     	   .byte SC_END,VK_END
 203 1096 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1098 758D     	   .byte SC_UP,VK_UP
 205 109a 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 109c 728E     	   .byte SC_DOWN,VK_DOWN
 207 109e 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 10a0 4A2F     	   .byte SC_KPDIV,'/'
 209 10a2 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 10a4 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 10a6 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 10a8 119E     	   .byte SC_LALT,VK_LALT
 213 10aa 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 10ac 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 10ae 761B     	   .byte SC_ESC,VK_ESC
 216 10b0 779A     	   .byte SC_NUM,VK_NLOCK
ARM GAS  forth.s 			page 54


 217 10b2 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10b4 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10b6 00BF     	    _GBL_FUNC kbd_isr 
  79 10b8 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10c0 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10c4 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10c6 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10ce D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10d2 10F0020F 	    tst r0,#KBD_TX 
  85 10d6 40F08480 	    bne send_bit  
  86 10da 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10dc 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10e0 01F10102 	    add r2,r1,#1
ARM GAS  forth.s 			page 55


  89 10e4 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10e8 0029     	    cmp r1,#0
  91 10ea 15D0     	    beq start_bit 
  92 10ec 0929     	    cmp r1,#9 
  93 10ee 25D0     	    beq parity_bit 
  94 10f0 0A29     	    cmp r1,#10 
  95 10f2 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10f4 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10f8 4FEA5202 	    lsr r2,#1 
  99 10fc 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1100 07D0     	    beq 1f 
 101 1102 42F08002 	    orr r2,#(1<<7)
 102 1106 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 110a 00F10100 	    add r0,#1 
 104 110e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 1112 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1116 63E0     	    b 9f         
 107              	start_bit:
 108 1118 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 111c 60D1     	    bne 9f // not a start bit 
 110 111e 80EA0000 	    eor r0,r0 
 111 1122 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 1126 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 112a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 112e 6FF00101 	    mvn r1,#1
 115 1132 00EA0100 	    and r0,r1 // clear error flag 
 116 1136 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 113a 51E0     	    b 9f 
 118              	parity_bit:
 119 113c 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1140 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1144 4CD0     	    beq 9f  
 122 1146 01F10101 	    add r1,#1 
 123 114a 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 114e 47E0     	    b 9f      
 125              	stop_bit:
 126 1150 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1154 40D0     	    beq 8f // error stop bit expected 
 128 1156 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 115a 11F0010F 	    tst r1,#1 
 130 115e 3BD0     	    beq 8f // error parity
 131 1160 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1164 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1168 E028     	    cmp r0,#XT_KEY
 134 116a 04D1     	    bne 1f
 135 116c 41F04001 	    orr r1,#KBD_F_XT
 136 1170 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1174 30E0     	    b 8f  
 138 1176 11F0800F 	1:  tst r1,#KBD_F_REL
 139 117a 14D0     	    beq store_code
 140 117c 5828     	    cmp r0,#SC_CAPS
 141 117e 04D1     	    bne 1f
 142 1180 81F00401 	    eor r1,#KBD_F_CAPS
 143 1184 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1188 06E0     	    b 2f 
 145 118a 00B500F0 	1:  _CALL do_async_key 
ARM GAS  forth.s 			page 56


 145      73F85DF8 
 145      04EB
 146 1194 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1198 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 119c 01EA0201 	    and r1,r2
 149 11a0 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 11a4 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 11a6 F028     	    cmp r0,#KEY_REL
 154 11a8 04D1     	    bne 1f
 155              	// set release flags 
 156 11aa 41F08001 	    orr r1,#KBD_F_REL 
 157 11ae 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 11b2 11E0     	    b 8f     
 159 11b4 0146     	1:  mov r1,r0 
 160 11b6 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11c0 0AD1     	    bne 8f // was async key 
 162 11c2 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11c6 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11ca 1154     	    strb r1,[r2,r0]
 165 11cc 00F10100 	    add r0,#1
 166 11d0 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11d4 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11d8 80EA0000 	8:  eor r0,r0 
 169 11dc A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11e0 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11e2 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11e6 01F10100 	    add r0,r1,#1
 182 11ea 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11ee 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11f2 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11f6 0829     	1:  cmp r1,#8 
 187 11f8 15D0     	    beq send_parity 
 188 11fa 0929     	    cmp r1,#9 
 189 11fc 1CD0     	    beq send_stop
 190 11fe 0A29     	    cmp r1,#10
 191 1200 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 1202 10F0010F 	    tst r0,#1
 194 1206 4FEA5000 	    lsr r0,#1
 195 120a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 120e 02D1     	    bne 1f 
 197 1210 4FEA0242 	    lsl r2,#16
 198 1214 05E0     	    b 2f  
ARM GAS  forth.s 			page 57


 199 1216 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 121a 00F10100 	    add r0,#1 
 201 121e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 1222 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1224 1CE0     	    b 9f 
 204              	send_parity:
 205 1226 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 122a 10F0010F 	    tst r0,#1
 207 122e 01D0     	    beq 1f 
 208 1230 4FEA0242 	    lsl r2,#16
 209 1234 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1236 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1238 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 123a 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 123e 1960     	    str r1,[r3,#GPIO_MODER]
 217 1240 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1242 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1246 6FF00201 	    mvn r1,#KBD_TX 
 221 124a 00EA0100 	    and r0,r1 
 222 124e 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1250 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1254 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 1258 80EA0000 	    eor r0,r0 
 226 125c 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1260 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1262 02B4     	    push {r1}
 238 1264 DFF85C14 	    ldr r1,=async_keys
 239 1268 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1272 02BC     	    pop {r1}
 241 1274 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
ARM GAS  forth.s 			page 58


 254 1276 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1280 FF28     	    cmp r0,#255
 256 1282 01D1     	    bne set_async_key 
 257 1284 0020     	    movs r0,#0 
 258 1286 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1288 06B4     	    push {r1,r2}
 262 128a 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 128e DFF83814 	    ldr r1,=async_jump 
 264 1292 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1296 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 129a 04E0     	    b set_reset
 268              	ctrl_key:
 269 129c 4FF01000 	    mov r0,#KBD_F_CTRL
 270 12a0 01E0     	    b set_reset 
 271              	alt_key:
 272 12a2 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 12a6 12F0800F 	    tst r2,#KBD_F_REL 
 275 12aa 04D0     	    beq 1f 
 276 12ac 6FEA0000 	    mvn r0,r0
 277 12b0 02EA0002 	    and r2,r0
 278 12b4 01E0     	    b 2f
 279 12b6 42EA0002 	1:  orr r2,r0 
 280 12ba 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12be 5FF0FF30 	    movs r0,#-1
 282 12c2 06BC     	9:  pop {r1,r2}
 283 12c4 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12c6 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12c8 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12ca 1401     	    .byte SC_LCTRL,1  // left control 
 290 12cc 1401     	    .byte SC_RCTRL,1  // right control 
 291 12ce 1102     	    .byte SC_LALT,2  // left alt 
 292 12d0 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12d2 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12d4 00       	    .byte 0 // shift  key 
 297 12d5 03       	    .byte (ctrl_key-shift_key)/2
 298 12d6 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12d7 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
ARM GAS  forth.s 			page 59


 309 12d8 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12e0 1846     	    mov r0,r3 
 311 12e2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 12e6 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12ea 00B5FFF7 	    _CALL gpio_config
 313      21F85DF8 
 313      04EB
 314 12f4 1846     	    mov r0,r3 
 315 12f6 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12fa 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12fe 00B5FFF7 	    _CALL gpio_config
 317      17F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1308 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1310 4FF40050 	    mov r0,#(2<<12)
 321 1314 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1316 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 131e 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1322 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1324 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1326 80EA0000 	   eor r0,r0 
 328 132a C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 132e C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1332 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1336 4FF00101 	   mov r1,#1 
 333 133a 00B5FEF7 	   _CALL nvic_set_priority
 333      B4FF5DF8 
 333      04EB
 334 1344 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1348 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C6FF5DF8 
 335      04EB
 336 1352 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1354 F00E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1364 47F8046D 	    _PUSH 
 342 1368 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 136c 06F0FC06 	    and TOS,#0xFC  
 344 1370 00F08CBC 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1374 0EB4     	    push {T1,T2,T3}
ARM GAS  forth.s 			page 60


 352 1376 80EA0000 	    eor T0,T0  
 353 137a 04F17803 	    add T3,UP,#KBD_QUEUE
 354 137e D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1382 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 1386 9142     	    cmp T1,T2 
 357 1388 06D0     	    beq 2f  
 358 138a 585C     	    ldrb T0,[T3,T1]
 359 138c 01F10101 	    add T1,#1 
 360 1390 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1394 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 1398 0EBC     	2:  pop {T1,T2,T3}
 363 139a 7047     	    _RET 
 364              	
 365              	wait_code:
 366 139c 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 13a6 0000     	    movs T0,T0
 368 13a8 F8D0     	    beq wait_code  
 369 13aa 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 13ac 04B4     	    push {T2}
 380 13ae 11F8012B 	1:  ldrb T2,[T1],#1
 381 13b2 22B1     	    cbz T2,2f 
 382 13b4 8242     	    cmp T2,T0
 383 13b6 02D0     	    beq 2f 
 384 13b8 01F10101 	    add T1,#1 
 385 13bc F7E7     	    b 1b 
 386 13be 0878     	2:  ldrb T0,[T1]
 387 13c0 0000     	    movs T0,T0 // set/reset zero flag 
 388 13c2 04BC     	9:  pop {T2}
 389 13c4 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13c6 58130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 13d4 47F8046D 	    _PUSH 
 398 13d8 86EA0606 	    eor TOS,TOS 
 399 13dc BB49     	    ldr T1,=sc_ascii // translation table
 400 13de 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13e2 4FF04002 	    mov T2,#KBD_F_XT 
 402 13e6 1042     	    tst T0,T2
 403 13e8 00D0     	    beq 1f
ARM GAS  forth.s 			page 61


 404 13ea B949     	    ldr T1,=extended // extended code translation
 405 13ec 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 13f6 98B1     	    cbz T0,inkey_exit
 407 13f8 E128     	    cmp T0,#XT2_KEY // pause 
 408 13fa 13D0     	    beq pause_key
 409 13fc 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1406 0646     	    mov TOS,T0
 411 1408 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1412 032E     	    cmp TOS,#VK_CTRL_C 
 413 1414 3EF45EAE 	    beq user_reboot 
 414 1418 47F8046D 	    _PUSH 
 415 141c 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1420 00F034BC 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1424 4FF00701 	    mov T1,#7 
 420 1428 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1432 0139     	    subs T1,#1
 422 1434 F8D1     	    bne 1b 
 423 1436 00F029BC 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 143a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 143e 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1442 06D1     	    bne shift_down 
 431 1444 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1448 06D1     	    bne altchar_down 
 433 144a 10F0100F 	    tst T0,#KBD_F_CTRL
 434 144e 06D1     	    bne ctrl_down 
 435 1450 0DE0     	    b 9f 
 436              	shift_down:
 437 1452 3046     	    mov T0,TOS 
 438 1454 9F49     	    ldr T1,=shifted 
 439 1456 04E0     	    b 8f 
 440              	altchar_down:
 441 1458 3046     	    mov T0,TOS 
 442 145a 9F49     	    ldr T1,=altchar
 443 145c 01E0     	    b 8f
 444              	ctrl_down:
 445 145e 3046     	    mov T0,TOS 
 446 1460 9E49     	    ldr T1,=controls 
 447 1462 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 146c 0646     	    mov TOS,T0
 449 146e 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
ARM GAS  forth.s 			page 62


 449      04EB
 450 1478 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 147a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 147e 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1482 0BD0     	    beq 9f 
 456 1484 412E     	    cmp TOS,#'A'
 457 1486 09D4     	    bmi 9f 
 458 1488 5B2E     	    cmp TOS,#'Z'+1 
 459 148a 03D4     	    bmi 3f 
 460 148c 612E     	    cmp TOS,#'a'
 461 148e 05D4     	    bmi 9f 
 462 1490 7B2E     	    cmp TOS,#'z'+1
 463 1492 03D5     	    bpl 9f 
 464 1494 4FF02000 	3:  mov T0,#(1<<5)
 465 1498 86EA0006 	    eor TOS,T0 
 466 149c 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 149e 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 14a0 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 14a2 0128     	    cmp r0,ST_PREVID 
 484 14a4 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 14a6 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 14aa 00B5FEF7 	    _CALL nvic_disable_irq
 487      2AFF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 14b4 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14bc 1846     	    mov r0,r3 
 491 14be 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14c2 4FF01102 	    mov r2,#OUTPUT_OD
 493 14c6 00B5FEF7 	    _CALL gpio_config 
 493      33FF5DF8 
 493      04EB
 494 14d0 1846     	    mov r0,r3 
 495 14d2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14d6 82EA0202 	    eor r2,r2 
 497 14da 00B5FEF7 	    _CALL gpio_out 
 497      7FFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
ARM GAS  forth.s 			page 63


 499 14e4 4FF4E150 	    mov r0,#150*48
 500 14e8 0138     	1:  subs r0,#1 
 501 14ea FDD1     	    bne 1b
 502 14ec 01BC     	    pop {r0}
 503 14ee 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14f2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14f6 40F00200 	    orr r0,#KBD_TX 
 506 14fa 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14fe 80EA0000 	    eor r0,r0 
 508 1502 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 1506 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 150a 1846     	    mov r0,r3 
 513 150c 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1510 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1514 00B5FEF7 	    _CALL gpio_config 
 515      0CFF5DF8 
 515      04EB
 516 151e 1846     	    mov r0,r3 
 517 1520 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1524 82EA0202 	    eor r2,r2 
 519 1528 00B5FEF7 	    _CALL gpio_out
 519      58FF5DF8 
 519      04EB
 520              	// release clock line 
 521 1532 1846     	    mov r0,r3 
 522 1534 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1538 4FF00002 	    mov r2,#INPUT_FLOAT
 524 153c 00B5FEF7 	    _CALL gpio_config
 524      F8FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1546 4FF00A00 	    mov r0,#10
 528 154a E060     	    str r0,[UP,#CD_TIMER]
 529 154c E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 154e 20B1     	    cbz r0, 4f 
 531 1550 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1554 10F0020F 	    tst r0,#KBD_TX
 533 1558 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 155a 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 155e 00B5FEF7 	    _CALL nvic_enable_irq
 536      BBFE5DF8 
 536      04EB
 537 1568 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 156c 20F00201 	    bic r1,r0,#KBD_TX
 539 1570 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1574 00F00200 	    and r0,#KBD_TX
 541 1578 48B1     	    cbz r0, 5f
 542 157a 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 157c 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1580 1960     	    str r1,[r3,#GPIO_MODER]
 545 1582 80EA0000 	    eor r0,r0 
 546 1586 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 158a 6FEA0000 	    mvn r0,r0   
ARM GAS  forth.s 			page 64


 548 158e 0EBC     	5:  pop {r1,r2,r3}
 549 1590 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1592 80EA0000 	    eor T0,T0 
 555 1596 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 159a C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 159e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 15a2 6FF00301 	    mvn T1,#3
 559 15a6 00EA0100 	    and T0,T1 
 560 15aa 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 15ae 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 15b0 CA130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15bc 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15c0 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15ca B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15cc 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15d6 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 15e0 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15e2 EBD0     	    beq 1b 
 575 15e4 4FF4FA70 	    mov T0,#500 
 576 15e8 E060     	    str T0,[UP,#CD_TIMER]
 577 15ea 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 15f4 10B9     	    cbnz T0,3f
 579 15f6 E068     	    ldr T0,[UP,#CD_TIMER]
 580 15f8 0028     	    cmp T0,#0 
 581 15fa F6D1     	    bne 2b 
 582 15fc 47F8046D 	3:  _PUSH 
 583 1600 0646     	    mov TOS,T0  
 584 1602 43E3     	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1604 B4150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 592 1610 00B5FFF7 	1:  _CALL kbd_clear_queue
ARM GAS  forth.s 			page 65


 592      BEFF5DF8 
 592      04EB
 593 161a 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 161e 00B5FFF7 	    _CALL kbd_send 
 594      3DFF5DF8 
 594      04EB
 595 1628 00B5FFF7 	2:  _CALL wait_code 
 595      B7FE5DF8 
 595      04EB
 596 1632 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1634 ECD0     	    beq 1b
 598 1636 FA28     	    cmp T0,#KBD_ACK  
 599 1638 F6D1     	    bne 2b 
 600 163a 3046     	2:  mov T0,TOS 
 601 163c 00F00700 	    and T0,#7 
 602 1640 00B5FFF7 	    _CALL kbd_send 
 602      2CFF5DF8 
 602      04EB
 603 164a 00B5FFF7 	3:  _CALL wait_code 
 603      A6FE5DF8 
 603      04EB
 604 1654 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1656 F0D0     	    beq 2b
 606 1658 FA28     	    cmp T0,#KBD_ACK 
 607 165a F6D1     	    bne 3b  
 608 165c 57F8046B 	    _POP 
 609 1660 14E3     	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1662 08160000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      4400
 617 1670 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1674 10F0010F 	    tst T0,#1
 619 1678 00D1     	    bne 1f 
 620 167a 07E3     	    _NEXT 
 621 167c 47F8046D 	1: _PUSH 
 622 1680 6FF00101 	    mvn T1,#1 
 623 1684 00EA0100 	    and T0,T1 
 624 1688 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 168c 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1690 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105BBE7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1698 66160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
ARM GAS  forth.s 			page 66


 633      590000BF 
 634 16a8 504700BF 	    _NEST
 635 16ac 71160000 	1:  _ADR CAPS_LED  
 636 16b0 D5130000 	    _ADR PS2_QKEY 
 637 16b4 11210000 	    _ADR QDUP 
 638 16b8 4B1E0000 	    _QBRAN 1b  
 638      AC160000 
 639 16c0 931C0000 	    _UNNEST 
 640 16c4 C6120000 	
 640      D4120000 
 640      340F0000 
 640      58100000 
 640      E80F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16e4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16ec 0346     	    mov r3,r0 
  42 16ee 4FF00401 	    mov r1,#PIN_F_SC 
  43 16f2 4FF00102 	    mov r2,#OUTPUT_PP
ARM GAS  forth.s 			page 67


  44 16f6 00B5FEF7 	    _CALL gpio_config 
  44      1BFE5DF8 
  44      04EB
  45 1700 1846     	    mov r0,r3 
  46 1702 4FF00401 	    mov r1,#PIN_F_SC  
  47 1706 4FF00102 	    MOV r2,#1
  48 170a 00B5FEF7 	    _CALL gpio_out 
  48      67FE5DF8 
  48      04EB
  49 1714 1846     	    mov r0,r3 
  50 1716 4FF00501 	    mov r1,#PIN_SCK  
  51 171a 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 171e 00B5FEF7 	    _CALL gpio_config 
  52      07FE5DF8 
  52      04EB
  53 1728 1846     	    mov r0,r3 
  54 172a 4FF00701 	    mov r1,#PIN_MOSI 
  55 172e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 1732 00B5FEF7 	    _CALL gpio_config 
  56      FDFD5DF8 
  56      04EB
  57 173c 1846     	    mov r0,r3
  58 173e 4FF00601 	    mov r1,#PIN_MISO
  59 1742 4FF00202 	    mov r2,#INPUT_AFO  
  60 1746 00B5FEF7 	    _CALL gpio_config
  60      F3FD5DF8 
  60      04EB
  61              	// PA5:7 at max speed 
  62 1750 4CF6AA40 	    mov r0,#0xCCAA
  63 1754 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  64 1756 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  64      C4F20200 
  65 175e 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  66 1760 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  67 1764 4164     	    str r1,[r0,#RCC_APB2ENR]
  68 1766 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  68      C4F20100 
  69 176e 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  70 1772 0180     	    strh r1,[r0,#SPI_CR1]
  71 1774 196A     	    ldr r1,[r3,#GPIO_AFRL]
  72 1776 80EA0000 	    eor r0,r0 
  73 177a C5F25050 	    movt r0,#0x5550 
  74 177e 40EA0100 	    orr r0,r1 
  75 1782 1862     	    str r0,[r3,#GPIO_AFRL]
  76 1784 7047     	    _RET 
  77              	
  78              	
  79              	/**********************
  80              	    CHIP-SEL ( -- )
  81              	    drive F_SC low 
  82              	*********************/
  83 1786 9C160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  83      08434849 
  83      502D5345 
  83      4C00
  84 1794 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  84      C4F20200 
ARM GAS  forth.s 			page 68


  85 179c 4FF00401 	    mov r1,#PIN_F_SC 
  86 17a0 4FF00002 	    mov r2,#0 
  87 17a4 00B5FEF7 	    _CALL gpio_out 
  87      1AFE5DF8 
  87      04EB
  88 17ae 6DE2     	    _NEXT 
  89              	
  90              	
  91              	/*********************
  92              	    CHIP-DSEL 
  93              	    drive F_SC high 
  94              	*********************/
  95 17b0 8A170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  95      09434849 
  95      502D4453 
  95      454C00BF 
  96 17c0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  96      C4F20100 
  97 17c8 0189     	1:  ldrh T1,[T0,#SPI_SR]
  98 17ca 11F0800F 	    tst T1,(1<<7) // BSY 
  99 17ce FBD1     	    bne 1b 
 100 17d0 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 100      C4F20200 
 101 17d8 4FF00401 	    mov r1,#PIN_F_SC 
 102 17dc 4FF00102 	    mov r2,#1 
 103 17e0 00B5FEF7 	    _CALL gpio_out 
 103      FCFD5DF8 
 103      04EB
 104 17ea 4FE2     	    _NEXT 
 105              	
 106              	
 107              	/****************************
 108              	    RD-BYTE ( -- )
 109              	    read flash byte 
 110              	***************************/
 111 17ec B4170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 111      0752442D 
 111      42595445 
 112 17f8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 112      C4F20100 
 113 1800 0189     	0:  ldrh T1,[T0,#SPI_SR]
 114 1802 11F0020F 	    tst T1,#(1<<1) //TXE
 115 1806 FBD0     	    beq 0b 
 116 1808 6FF00001 	    mvn T1,#0 
 117 180c 0173     	    strb T1,[T0,#SPI_DR]
 118 180e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 119 1810 11F0010F 	    tst T1,#(1<<0) // RXNE  
 120 1814 FBD0     	    beq 1b     
 121              	2:  
 122 1816 47F8046D 	    _PUSH 
 123 181a 067B     	    ldrb TOS,[T0,#SPI_DR]
 124 181c 36E2     	    _NEXT 
 125              	
 126              	
 127              	/*********************************
 128              	    WR-BYTE  ( c -- )
 129              	    write flash byte 
ARM GAS  forth.s 			page 69


 130              	*************************/
 131 181e F0170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 131      0757522D 
 131      42595445 
 131      00BF
 132 182c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 132      C4F20100 
 133 1834 0189     	0:  ldrh T1,[T0,#SPI_SR]
 134 1836 11F0020F 	    tst T1,#(1<<1) //TXE
 135 183a FBD0     	    beq 0b 
 136 183c 0673     	    strb TOS,[T0,#SPI_DR]
 137 183e 0189     	1:  ldrh T1,[T0,#SPI_SR]
 138 1840 11F0010F 	    tst T1,#(1<<0) // RXNE  
 139 1844 FBD0     	    beq 1b 
 140 1846 8189     	    ldrh T1,[T0,#SPI_DR]
 141 1848 57F8046B 	    _POP 
 142 184c 1EE2     	    _NEXT 
 143              	
 144              	/*************************
 145              	    WR-DIS ( -- )
 146              	    write disable 
 147              	    reset WEL bit 
 148              	*************************/
 149 184e 22180000 	    _HEADER WR_DIS,6,"WR-DIS"
 149      0657522D 
 149      44495300 
 149      00BF
 150 185c 504700BF 	    _NEST 
 151 1860 95170000 	    _ADR CHIP_SEL 
 152 1864 0B1E0000 	    _DOLIT 4
 152      04000000 
 153 186c 2D180000 	    _ADR WR_BYTE
 154 1870 C1170000 	    _ADR CHIP_DSEL
 155 1874 931C0000 	    _UNNEST
 156              	
 157              	/*************************
 158              	    WR-ENBL ( -- )
 159              	    set WEL flag in SR0 
 160              	************************/
 161 1878 52180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 161      0757522D 
 161      454E424C 
 162 1884 504700BF 	    _NEST 
 163 1888 95170000 	    _ADR CHIP_SEL 
 164 188c 0B1E0000 	    _DOLIT 6 
 164      06000000 
 165 1894 2D180000 	    _ADR WR_BYTE 
 166 1898 C1170000 	    _ADR CHIP_DSEL 
 167 189c 931C0000 	    _UNNEST 
 168              	
 169              	/********************************
 170              	    RD-SR ( n -- c )
 171              	    read status register  
 172              	********************************/
 173 18a0 7C180000 	    _HEADER RD_SR,5,"RD-SR"
 173      0552442D 
 173      535200BF 
ARM GAS  forth.s 			page 70


 174 18ac 504700BF 	    _NEST
 175 18b0 95170000 	    _ADR CHIP_SEL  
 176 18b4 0B1E0000 	    _DOLIT sr_cmd 
 176      D4180000 
 177 18bc 01200000 	    _ADR PLUS 
 178 18c0 B11E0000 	    _ADR CAT
 179 18c4 2D180000 	    _ADR WR_BYTE
 180 18c8 F9170000 	    _ADR RD_BYTE
 181 18cc C1170000 	    _ADR CHIP_DSEL  
 182 18d0 931C0000 	    _UNNEST 
 183 18d4 053515   	sr_cmd: .byte 5,0x35,0x15      
 184              	
 185              	/*********************************
 186              	    SEND-ADR ( a -- )
 187              	    send 24 bits address 
 188              	*******************************/
 189 18d7 A4180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 189      0853454E 
 189      442D4144 
 189      52
 190 18e4 504700BF 	    _NEST 
 191 18e8 3D1F0000 	    _ADR DUPP 
 192 18ec 0B1E0000 	    _DOLIT 16
 192      10000000 
 193 18f4 D91F0000 	    _ADR RSHIFT 
 194 18f8 2D180000 	    _ADR WR_BYTE 
 195 18fc 3D1F0000 	    _ADR DUPP
 196 1900 0B1E0000 	    _DOLIT 8 
 196      08000000 
 197 1908 D91F0000 	    _ADR RSHIFT 
 198 190c 2D180000 	    _ADR WR_BYTE 
 199 1910 2D180000 	    _ADR WR_BYTE 
 200 1914 931C0000 	    _UNNEST 
 201              	
 202              	/**********************************
 203              	    WAIT-DONE ( -- )
 204              	    wait write operation completed 
 205              	**********************************/
 206 1918 DB180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 206      09574149 
 206      542D444F 
 206      4E4500BF 
 207 1928 504700BF 	    _NEST 
 208 192c 0B1E0000 	1:  _DOLIT 0 
 208      00000000 
 209 1934 AD180000 	    _ADR RD_SR 
 210 1938 0B1E0000 	    _DOLIT 3 
 210      03000000 
 211 1940 811F0000 	    _ADR ANDD 
 212 1944 4B1E0000 	    _QBRAN 2f
 212      54190000 
 213 194c 5F1E0000 	    _BRAN 1b
 213      2C190000 
 214 1954 931C0000 	2:  _UNNEST 
 215              	
 216              	
 217              	/****************************
ARM GAS  forth.s 			page 71


 218              	   ERASE-BLK ( a -- )
 219              	   erase 4Ko block  
 220              	***************************/
 221 1958 1C190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 221      09455241 
 221      53452D42 
 221      4C4B00BF 
 222 1968 504700BF 	    _NEST 
 223 196c 85180000 	    _ADR WR_ENBL
 224 1970 95170000 	    _ADR CHIP_SEL 
 225 1974 0B1E0000 	    _DOLIT 0x20 
 225      20000000 
 226 197c 2D180000 	    _ADR WR_BYTE 
 227 1980 E5180000 	    _ADR SEND_ADR
 228 1984 C1170000 	    _ADR CHIP_DSEL 
 229 1988 29190000 	    _ADR WAIT_DONE 
 230 198c 931C0000 	    _UNNEST 
 231              	
 232              	/******************************
 233              	    ERASE-CHIP ( -- )
 234              	    erase all data 
 235              	******************************/
 236 1990 5C190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 236      0A455241 
 236      53452D43 
 236      48495000 
 237 19a0 504700BF 	    _NEST 
 238 19a4 85180000 	    _ADR WR_ENBL 
 239 19a8 95170000 	    _ADR CHIP_SEL
 240 19ac 0B1E0000 	    _DOLIT 0x60
 240      60000000 
 241 19b4 0B1E0000 	    _DOLIT 0xC7 
 241      C7000000 
 242 19bc 2D180000 	    _ADR WR_BYTE 
 243 19c0 2D180000 	    _ADR WR_BYTE 
 244 19c4 C1170000 	    _ADR CHIP_DSEL 
 245 19c8 29190000 	    _ADR WAIT_DONE
 246 19cc 931C0000 	    _UNNEST 
 247              	
 248              	
 249              	/******************************
 250              	    RD-BLK ( buff n a --  )
 251              	    read n bytes in buff 
 252              	    starting at address a  
 253              	******************************/
 254 19d0 94190000 	    _HEADER RD_BLK,6,"RD-BLK"
 254      0652442D 
 254      424C4B00 
 255 19dc 504700BF 	    _NEST
 256 19e0 95170000 	    _ADR CHIP_SEL 
 257 19e4 0B1E0000 	    _DOLIT 3 
 257      03000000 
 258 19ec 2D180000 	    _ADR WR_BYTE 
 259 19f0 E5180000 	    _ADR SEND_ADR
 260 19f4 E51E0000 	    _ADR TOR   
 261 19f8 5F1E0000 	    _BRAN 2f
 261      101A0000 
ARM GAS  forth.s 			page 72


 262 1a00 F9170000 	1:  _ADR RD_BYTE
 263 1a04 611F0000 	    _ADR OVER 
 264 1a08 9D1E0000 	    _ADR CSTOR
 265 1a0c 5D200000 	    _ADR ONEP 
 266 1a10 2D1E0000 	2:  _DONXT 1b
 266      001A0000 
 267 1a18 2D1F0000 	    _ADR DROP 
 268 1a1c C1170000 	    _ADR CHIP_DSEL 
 269 1a20 931C0000 	    _UNNEST 
 270              	
 271              	/*****************************
 272              	    WR-BLK ( buff n a -- )
 273              	    write up to 256 bytes 
 274              	    in erased flash
 275              	****************************/
 276 1a24 D4190000 	    _HEADER WR_BLK,6,"WR-BLK"
 276      0657522D 
 276      424C4B00 
 277 1a30 504700BF 	    _NEST 
 278 1a34 85180000 	    _ADR WR_ENBL
 279 1a38 95170000 	    _ADR CHIP_SEL
 280 1a3c 0B1E0000 	    _DOLIT 2 
 280      02000000 
 281 1a44 2D180000 	    _ADR WR_BYTE 
 282 1a48 E5180000 	    _ADR SEND_ADR
 283 1a4c E51E0000 	    _ADR TOR
 284 1a50 5F1E0000 	    _BRAN 2f 
 284      701A0000 
 285 1a58 3D1F0000 	1:  _ADR DUPP 
 286 1a5c B11E0000 	    _ADR CAT 
 287 1a60 3D1F0000 	    _ADR DUPP 
 288 1a64 352D0000 	    _ADR DOTH
 289 1a68 2D180000 	    _ADR WR_BYTE 
 290 1a6c 5D200000 	    _ADR ONEP
 291 1a70 2D1E0000 	2:  _DONXT 1b 
 291      581A0000 
 292 1a78 2D1F0000 	    _ADR DROP
 293 1a7c C1170000 	    _ADR CHIP_DSEL
 294 1a80 29190000 	    _ADR WAIT_DONE 
 295 1a84 931C0000 	    _UNNEST
 296              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  forth.s 			page 73


  17              	
  18              	***************************************************************************/
  19              	
  20              	/*==========================================================
  21              	    THE 'FLOATING POINT ARITHMETIC' ROUTINES
  22              	==========================================================*/
  23              	
  24              	/******************************************************
  25              	    Parsing float32 to IEEE-754 format is quite Complex
  26              	    so the original Jupiter ACE Z80 code 
  27              	    is adapted to this ARM-7M architecture.
  28              	    REF: docs/Jupiter-Ace-ROM.asm 
  29              	
  30              	    based on BCD  (binary Coded Decimal)
  31              	Format:
  32              	    bit 23:0  6 BCD digits mantissa
  33              	        mantissa range 0...999999 
  34              	    bit 30:24 exponent offset by 127 for exponent (decimal value)
  35              	        exponent range:  -127...127   128 value indicate out of range 
  36              	    bit 31    mantissa sign 
  37              	
  38              	    ** Floating point words: 
  39              	    REF: docs/JA-Ace4000-Manual-First-US-Edition.pdf, chapter 15
  40              	    F+, F-, F*, F/, 
  41              	    FNEGATE, INT, UFLOAT, F. 
  42              	*******************************************************/    
  43              	
  44              	
  45              	/*****************************************************************************
  46              	    PREP_FP  
  47              	    prepare floating point
  48              	    work space 
  49              	
  50              	; ( f1, f2 -- m1, m2 )
  51              	; -> from add/mult/div
  52              	; Entered with two floating point numbers on the stack.
  53              	; The exponents are stored in the first two bytes of FP_WS and the third byte
  54              	; is loaded with the manipulated result sign.
  55              	; the two exponent locations on the Data Stack are blanked leaving just the
  56              	; binary coded mantissas.
  57              	*******************************************************************************/
  58              	PREP_FP:
  59 1a88 D4F8A000 	    ldr T0,[UP,#FP_WS] // float work space pointer 
  60              	// clear first 16 bytes of 19 bytes array 
  61 1a8c 4FF00401 	    mov T1,#4 
  62 1a90 82EA0202 	    eor T2,T2 
  63 1a94 40F8042B 	1:  str T2,[T0],#4
  64 1a98 0139     	    subs T1,#1
  65 1a9a FBD1     	    bne 1b 
  66 1a9c 2262     	    str T2,[UP,#TMP] // clear tmp variable (SPARE)
  67              	
  68 1a9e 7047     	    _RET 
  69              	
  70              	/****************************************
  71              	    BCD+  ( bcd1 bcd2 carry -- sum carry )
  72              	    sum=bcd1+bcd2+carry 
  73              	    bcd are 8 digits packed in 32 bits   
ARM GAS  forth.s 			page 74


  74              	*****************************************/
  75 1aa0 281A0000 	    _HEADER BCD_ADD,4,"BCD+"
  75      04424344 
  75      2B0000BF 
  76 1aac 3246     	    mov T2,TOS // carry
  77 1aae 57F8046B 	    _POP 
  78 1ab2 83EA0303 	    eor T3,T3 // bit shift  
  79 1ab6 85EA0505 	    eor WP,WP // sum   
  80 1aba 3868     	1:  ldr T0,[DSP]
  81 1abc 20FA03F0 	    lsr T0,T3 
  82 1ac0 00F00F00 	    and T0,#15
  83 1ac4 1044     	    add T0,T2 // add carry 
  84 1ac6 26FA03F1 	    lsr T1,TOS,T3 
  85 1aca 01F00F01 	    and T1,#15
  86 1ace 0844     	    add T0,T1
  87 1ad0 0A28     	    cmp T0,#10
  88 1ad2 01D4     	    bmi 2f 
  89 1ad4 00F10600 	    add T0,#6
  90 1ad8 4FEA1012 	2:  lsr T2,T0,#4 // carry   
  91 1adc 00F00F00 	    and T0,#15
  92 1ae0 00FA03F0 	    lsl T0,T3
  93 1ae4 45EA0005 	    orr WP,T0 
  94 1ae8 03F10403 	    add T3,#4 
  95 1aec 202B     	    cmp T3,#32 
  96 1aee E4D4     	    bmi 1b 
  97 1af0 3D60     	    str WP,[DSP]
  98 1af2 1646     	    mov TOS,T2  
  99 1af4 CAE0     	    _NEXT 
 100              	
 101              	
 102              	/*******************************
 103              	    F+ ( f1 f2 -- f1+f2 )
 104              	    add 2 float 
 105              	*******************************/
 106 1af6 A41A0000 	    _HEADER FPLUS,2,"F+"
 106      02462B00 
 106      00BF
 107 1b00 504700BF 	    _NEST 
 108              	
 109 1b04 931C0000 	    _UNNEST 
 110              	
 111              	/*******************************
 112              	    F- ( f1 f2 -- f1-f2 )
 113              	    substract 2 float 
 114              	*******************************/
 115 1b08 FA1A0000 	    _HEADER FMINUS,2,"F-"
 115      02462D00 
 116 1b10 504700BF 	    _NEST 
 117              	
 118 1b14 931C0000 	    _UNNEST 
 119              	
 120              	/*******************************
 121              	    F* ( f1 f2 -- f1*f2 )
 122              	    multiply 2 float 
 123              	******************************/
 124              	
 125              	/*******************************
ARM GAS  forth.s 			page 75


 126              	    F/ ( f1 f2 -- f1/f2 )
 127              	    divide f1 by f2 
 128              	*******************************/
 129 1b18 0C1B0000 	    _HEADER FSLH,2,"F/"
 129      02462F00 
 130 1b20 504700BF 	    _NEST 
 131              	
 132 1b24 931C0000 	    _UNNEST 
 133              	
 134              	
 135              	/********************************
 136              	    FNEGATE ( f -- -f )
 137              	    negate floating point 
 138              	********************************/
 139 1b28 1C1B0000 	    _HEADER FNEG,7,"FNEGATE"
 139      07464E45 
 139      47415445 
 140 1b34 504700BF 	    _NEST 
 141              	
 142 1b38 931C0000 	    _UNNEST 
 143              	
 144              	/*******************************
 145              	    INT ( f -- n )
 146              	    convert float to integer 
 147              	*******************************/
 148 1b3c 2C1B0000 	    _HEADER INT,3,"INT"
 148      03494E54 
 149 1b44 504700BF 	    _NEST 
 150              	
 151 1b48 931C0000 	    _UNNEST 
 152              	
 153              	/*******************************
 154              	    UFLOAT ( n -- f )
 155              	    convert integer to float 
 156              	*******************************/
 157 1b4c 401B0000 	    _HEADER UFLOAT,6,"UFLOAT"
 157      0655464C 
 157      4F415400 
 158 1b58 504700BF 	    _NEST 
 159              	
 160 1b5c 931C0000 	    _UNNEST 
 161              	
 162              	/*******************************
 163              	    F. ( f -- )
 164              	    print float
 165              	*******************************/
 166 1b60 501B0000 	    _HEADER FDOT,2,"F."
 166      02462E00 
 167 1b68 504700BF 	    _NEST
 168              	
 169 1b6c 931C0000 	    _UNNEST 
 170              	
 171              	/*******************************
 172              	    IS_BASE10 ( c -- n t | c f )
 173              	    check if character is base 10
 174              	    digit. 
 175              	*******************************/ 
ARM GAS  forth.s 			page 76


 176              	IS_BASE10:
 177 1b70 01B4     	    push {T0}
 178 1b72 3046     	    mov T0,TOS 
 179 1b74 47F8046D 	    _PUSH 
 180 1b78 86EA0606 	    eor TOS,TOS 
 181 1b7c 3038     	    subs T0,#'0' 
 182 1b7e 02D4     	    bmi 2f 
 183 1b80 0A28     	    cmp T0,#10 
 184 1b82 00D5     	    bpl 2f 
 185 1b84 3860     	    str T0,[DSP] 
 186 1b86 01BC     	2:  pop {T0}
 187 1b88 7047     	    _RET 
 188              	
 189              	
 190              	/*****************************
 191              	    PARSE_PREDECIM ( a -- a+ n t | a f )
 192              	    parse integer part of float32 
 193              	*****************************/
 194              	PARSE_PREDCIM:
 195              	
 196              	
 197              	/*****************************
 198              	   parse decimal part of float32 
 199              	*****************************/
 200              	PARSE_DECIM:
 201 1b8a 80EA0000 	    eor T0,T0 // sign 
 202 1b8e 81EA0101 	    eor T1,T1 // u
 203 1b92 4FF00A03 	    mov T3,#10 // numeric base  
 204 1b96 16F8012B 	    ldrb T2,[TOS],#1
 205 1b9a 48F8042D 	    stmfd RSP!,{T2} //count >R 
 206 1b9e 3278     	    ldrb T2,[TOS]
 207 1ba0 2D2A     	    cmp T2,'-'
 208 1ba2 02D1     	    bne 1f 
 209 1ba4 6FEA0000 	    mvn T0,T0 // negative 
 210 1ba8 06E0     	    b 2f
 211 1baa 303A     	1:  subs T2,#'0'
 212 1bac 0BD4     	    bmi 3f 
 213 1bae 0A2A     	    cmp T2,#10
 214 1bb0 09D5     	    bpl 3f 
 215 1bb2 03FB01F1 	    mul T1,T3 
 216 1bb6 1144     	    add T1,T2 
 217              	// NEXT 
 218 1bb8 06F10106 	2:  add TOS,#1 
 219 1bbc D8F80020 	    ldr T2,[RSP]
 220 1bc0 013A     	    subs T2,#1 
 221 1bc2 7FF437AE 	    bne 0b 
 222 1bc6 08F10408 	3:  add RSP,#4 
 223 1bca 27E90300 	    stmfd DSP!,{T0,T1}
 224 1bce 5DE0     	    _NEXT 
 225              	
 226              	
 227              	/*******************************
 228              	    FLOAT? ( a -- f -1 | a 0 )
 229              	    parse floating point 
 230              	*******************************/
 231 1bd0 641B0000 	    _HEADER FLOATQ,6,"FLOAT?"
 231      06464C4F 
ARM GAS  forth.s 			page 77


 231      41543F00 
 232 1bdc 504700BF 	    _NEST
 233 1be0 0B1E0000 	_DOLIT 0 
 233      00000000 
 234 1be8 931C0000 	_UNNEST     
 235 1bec 3D1F0000 	    _ADR DUPP 
 236 1bf0 E51E0000 	    _ADR TOR  // a >R 
 237 1bf4 8B1B0000 	    _ADR PARSE_DECIM // get mantissa 
 238 1bf8 25210000 	    _ADR ROT 
 239 1bfc 3D1F0000 	    _ADR DUPP 
 240 1c00 B11E0000 	    _ADR CAT 
 241 1c04 3D1F0000 	    _ADR DUPP 
 242 1c08 0B1E0000 	    _DOLIT '.'
 242      2E000000 
 243 1c10 A91F0000 	    _ADR XORR   
 244 1c14 4B1E0000 	    _QBRAN fraction   
 244      441C0000 
 245              	try_e:
 246 1c1c 0B1E0000 	    _DOLIT 'E'
 246      45000000 
 247 1c24 A91F0000 	    _ADR XORR 
 248 1c28 4B1E0000 	    _QBRAN exponent 
 248      541C0000 
 249              	not_float:
 250 1c30 61210000 	    _ADR TDROP // drop 3 elements
 251 1c34 BD1E0000 	    _ADR RFROM   
 252 1c38 0B1E0000 	    _DOLIT 0 
 252      00000000 
 253 1c40 931C0000 	    _UNNEST 
 254              	fraction:
 255 1c44 2D1F0000 	    _ADR DROP
 256 1c48 5D200000 	1:  _ADR ONEP // m s a+ --
 257 1c4c 8B1B0000 	    _ADR PARSE_DECIM // get fraction
 258              	    
 259 1c50 931C0000 	    _UNNEST 
 260              	exponent: // get exponent 
 261              	
 262 1c54 931C0000 	    _UNNEST 
 263              	
 264              	/********************************
 265              	    NUMBER ( a -- n -1 | f -2 | a 0 )
 266              	    parse number, integer or float 
 267              	    if not a number return 0 
 268              	    if integer return n -1 
 269              	    if float return f -2 
 270              	**********************************/
 271 1c58 D41B0000 	    _HEADER NUMBER,6,"NUMBER"
 271      064E554D 
 271      42455200 
 272 1c64 504700BF 	    _NEST 
 273 1c68 2D2A0000 	    _ADR NUMBQ
 274 1c6c 11210000 	    _ADR QDUP 
 275 1c70 4B1E0000 	    _QBRAN 2f 
 275      7C1C0000 
 276 1c78 931C0000 	    _UNNEST 
 277 1c7c DD1B0000 	2:  _ADR FLOATQ
 278 1c80 931C0000 	    _UNNEST 
ARM GAS  forth.s 			page 78


 279              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
ARM GAS  forth.s 			page 79


  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 1c84 48F804CD 		STMFD	RSP!,{IP}
  85 1c88 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 1c8c 5CF8045B 		LDR WP,[IP],#4 
  89 1c90 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 1c92 58F804CB 		LDMFD RSP!,{IP}
  92 1c96 5CF8045B 		LDR WP,[IP],#4 
  93 1c9a 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 1c9c 04F14401 		add T1,UP,#USER_CTOP 
 105 1ca0 0968     		ldr T1,[T1]
 106 1ca2 44F25072 		mov T2,#0x4700+(10<<3)
 107 1ca6 21F8022B 		strh T2,[T1],#2
 108 1caa 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 1cae 21F8022B 		strh T2,[T1],#2 
 110 1cb2 04F14402 		add T2,UP,#USER_CTOP 
 111 1cb6 1160     		str T1,[T2]
 112 1cb8 E8E7     		_NEXT  
 113              	
ARM GAS  forth.s 			page 80


 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 1cba 47F8046D 		_PUSH 
 118 1cbe 04F11406 		ADD TOS,UP,#STDIN 
 119 1cc2 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 1cc4 47F8046D 		_PUSH 
 125 1cc8 04F11806 		ADD TOS,UP,#STDOUT
 126 1ccc DEE7     		_NEXT 
 127              		
 128              	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132 1cce 5C1C0000 		_HEADER QKEY,4,"KEY?" 
 132      044B4559 
 132      3F00
 133 1cd8 504700BF 		_NEST 
 134 1cdc BB1C0000 		_ADR TSTDIN // ' STDIN 
 135 1ce0 E9260000 		_ADR ATEXE
 136 1ce4 931C0000 		_UNNEST 
 137              	
 138              	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142 1ce8 D21C0000 		_HEADER KEY,3,"KEY"
 142      034B4559 
 143 1cf0 504700BF 		_NEST
 144              	KEY1:
 145 1cf4 71160000 		_ADR CAPS_LED 
 146 1cf8 D91C0000 		_ADR	QKEY 
 147 1cfc 4B1E0000 		_QBRAN	KEY1
 147      F41C0000 
 148 1d04 931C0000 		_UNNEST
 149              	
 150              	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154 1d08 EC1C0000 		_HEADER EMIT,4,"EMIT"
 154      04454D49 
 154      540000BF 
 155 1d14 504700BF 		_NEST 
 156 1d18 C51C0000 		_ADR TSTDOUT 
 157 1d1c E9260000 		_ADR ATEXE 
 158 1d20 931C0000 		_UNNEST 
 159              	
 160              	
 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
ARM GAS  forth.s 			page 81


 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190 1d24 0C1D0000 		_HEADER RAND,6,"RANDOM"
 190      0652414E 
 190      444F4D00 
 191 1d30 504700BF 		_NEST
 192 1d34 C9210000 		_ADR ABSS   
 193 1d38 09230000 		_ADR SEED 
 194 1d3c 911E0000 		_ADR AT 
 195 1d40 3D1F0000 		_ADR DUPP 
 196 1d44 0B1E0000 		_DOLIT 13
 196      0D000000 
 197 1d4c F11F0000 		_ADR LSHIFT 
 198 1d50 A91F0000 		_ADR XORR  
 199 1d54 3D1F0000 		_ADR DUPP 
 200 1d58 0B1E0000 		_DOLIT 17 
 200      11000000 
 201 1d60 D91F0000 		_ADR RSHIFT 
 202 1d64 A91F0000 		_ADR XORR 
 203 1d68 3D1F0000 		_ADR DUPP
 204 1d6c 0B1E0000 		_DOLIT 5 
 204      05000000 
 205 1d74 F11F0000 		_ADR LSHIFT 
 206 1d78 A91F0000 		_ADR XORR  
 207 1d7c 3D1F0000 		_ADR DUPP 
 208 1d80 09230000 		_ADR SEED 
 209 1d84 7D1E0000 		_ADR STORE 
 210 1d88 0B1E0000 		_DOLIT 0x7FFFFFFF
 210      FFFFFF7F 
 211 1d90 811F0000 		_ADR ANDD 
 212 1d94 4D1F0000 		_ADR SWAP 
 213 1d98 6D250000 		_ADR MODD 
 214 1d9c 931C0000 		_UNNEST 
 215              	
ARM GAS  forth.s 			page 82


 216              	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221 1da0 281D0000 		_HEADER PAUSE,5,"PAUSE"
 221      05504155 
 221      534500BF 
 222 1dac 504700BF 		_NEST 
 223 1db0 31230000 		_ADR TIMER 
 224 1db4 7D1E0000 		_ADR STORE 
 225              	PAUSE_LOOP:
 226 1db8 31230000 		_ADR TIMER 
 227 1dbc 911E0000 		_ADR AT 
 228 1dc0 4B1E0000 		_QBRAN PAUSE_EXIT 
 228      D01D0000 
 229 1dc8 5F1E0000 		_BRAN PAUSE_LOOP 
 229      B81D0000 
 230              	PAUSE_EXIT: 		
 231 1dd0 931C0000 		_UNNEST 
 232              	
 233              	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237 1dd4 A41D0000 		_HEADER ULED,4,"ULED"
 237      04554C45 
 237      440000BF 
 238 1de0 4FF40050 		mov T0,#(1<<LED_PIN)
 239 1de4 4FF40061 		_MOV32 T1,LED_GPIO 
 239      C4F20201 
 240 1dec 3600     		movs TOS,TOS 
 241 1dee 57F8046B 		_POP
 242 1df2 03D0     		beq ULED_OFF
 243 1df4 4FEA0040 		lsl T0,#16 
 244 1df8 8861     		str T0,[T1,#GPIO_BSRR]
 245 1dfa 47E7     		_NEXT 
 246              	ULED_OFF:
 247 1dfc 8861     		str T0,[T1,#GPIO_BSRR]
 248 1dfe 45E7     		_NEXT    
 249              	
 250              	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
 259              	*********************/
 260 1e00 D81D0000 		_HEADER NOP,3,"NOP"
 260      034E4F50 
 261 1e08 40E7     		_NEXT 
 262              	 
 263              	/********************
 264              	    doLIT	( -- w )
ARM GAS  forth.s 			page 83


 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269 1e0a 47F8046D 		_PUSH				//  store TOS on data stack
 270 1e0e 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 1e12 3BE7     		_NEXT 
 272              	
 273              	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
 277 1e14 041E0000 		_HEADER EXECU,7,"EXECUTE"
 277      07455845 
 277      43555445 
 278 1e20 46F00105 		ORR	WP,TOS,#1 
 279 1e24 57F8046B 		_POP
 280 1e28 2847     		BX WP 
 281 1e2a 2FE7     		_NEXT 
 282              	
 283              	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291 1e2c D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 292 1e30 22B9     		CBNZ T2,NEXT1 
 293              		/* loop done */
 294 1e32 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 295 1e36 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 296 1e3a 27E7     		_NEXT
 297              	NEXT1:
 298              		/* decrement loop counter */
 299 1e3c A2F10102 		SUB	T2,T2,#1
 300 1e40 C8F80020 		STR	T2,[RSP]
 301 1e44 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 302 1e48 20E7     		_NEXT 
 303              	
 304              	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310 1e4a 3600     		MOVS	TOS,TOS
 311 1e4c 57F8046B 		_POP
 312 1e50 02D1     		BNE	QBRAN1
 313 1e52 DCF800C0 		LDR	IP,[IP]
 314 1e56 19E7     		_NEXT
 315              	QBRAN1:
 316 1e58 0CF1040C 	 	ADD	IP,IP,#4
 317 1e5c 16E7     		_NEXT
 318              	
 319              	/***********************************
ARM GAS  forth.s 			page 84


 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325 1e5e DCF800C0 		LDR	IP,[IP]
 326 1e62 13E7     		_NEXT
 327              	
 328              	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
 332 1e64 181E0000 		_HEADER EXIT,4,"EXIT"
 332      04455849 
 332      540000BF 
 333 1e70 931C0000 		_UNNEST
 334              	
 335              	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339 1e74 681E0000 		_HEADER STORE,1,"!"
 339      012100BF 
 340 1e7c 57F8045B 		LDR	WP,[DSP],#4
 341 1e80 3560     		STR	WP,[TOS]
 342 1e82 57F8046B 		_POP
 343 1e86 01E7     		_NEXT 
 344              	
 345              	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349 1e88 781E0000 		_HEADER AT,1,"@"
 349      014000BF 
 350 1e90 3668     		LDR	TOS,[TOS]
 351 1e92 FBE6     		_NEXT 
 352              	
 353              	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357 1e94 8C1E0000 		_HEADER CSTOR,2,"C!"
 357      02432100 
 358 1e9c 57F8045B 		LDR	WP,[DSP],#4
 359 1ea0 3570     		STRB WP,[TOS]
 360 1ea2 57F8046B 		_POP
 361 1ea6 F1E6     		_NEXT
 362              	
 363              	/*********************************************
 364              	    C@	  ( b -- c )
 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367 1ea8 981E0000 		_HEADER CAT,2,"C@"
 367      02434000 
 368 1eb0 3678     		LDRB	TOS,[TOS]
 369 1eb2 EBE6     		_NEXT 
 370              	
ARM GAS  forth.s 			page 85


 371              	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375 1eb4 AC1E0000 		_HEADER RFROM,2,"R>"
 375      02523E00 
 376 1ebc 47F8046D 		_PUSH
 377 1ec0 58F8046B 		LDR	TOS,[RSP],#4
 378 1ec4 E2E6     		_NEXT 
 379              	
 380              	/************************************************
 381              	    R@	  ( -- w )
 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384 1ec6 B81E0000 		_HEADER RAT,2,"R@"
 384      02524000 
 384      00BF
 385 1ed0 47F8046D 		_PUSH
 386 1ed4 D8F80060 		LDR	TOS,[RSP]
 387 1ed8 D8E6     		_NEXT 
 388              	
 389              	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393 1eda CA1E0000 		_HEADER TOR,2,">R"
 393      023E5200 
 393      00BF
 394 1ee4 48F8046D 		STR	TOS,[RSP,#-4]!
 395 1ee8 57F8046B 		_POP
 396 1eec CEE6     		_NEXT
 397              	
 398              	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
 401              	*******************************/
 402 1eee DE1E0000 		_HEADER RPSTOR,3,"RP!"
 402      03525021 
 402      00BF
 403 1ef8 B046     		MOV RSP,TOS 
 404 1efa 57F8046B 		_POP  
 405 1efe C5E6     		_NEXT 
 406              	
 407              	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411 1f00 F21E0000 		_HEADER SPSTOR,3,"SP!"
 411      03535021 
 412 1f08 3746     		MOV DSP,TOS 
 413 1f0a 86EA0606 		EOR TOS,TOS,TOS 
 414 1f0e BDE6     		_NEXT 
 415              	
 416              	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
ARM GAS  forth.s 			page 86


 420 1f10 041F0000 		_HEADER SPAT,3,"SP@"
 420      03535040 
 421 1f18 47F8046D 		_PUSH
 422 1f1c 3E46     		MOV	TOS,DSP
 423 1f1e B5E6     		_NEXT
 424              	
 425              	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429 1f20 141F0000 		_HEADER DROP,4,"DROP"
 429      0444524F 
 429      500000BF 
 430 1f2c 57F8046B 		_POP
 431 1f30 ACE6     		_NEXT 
 432              	
 433              	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437 1f32 241F0000 		_HEADER DUPP,3,"DUP"
 437      03445550 
 437      00BF
 438 1f3c 47F8046D 		_PUSH
 439 1f40 A4E6     		_NEXT 
 440              	
 441              	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445 1f42 361F0000 		_HEADER SWAP,4,"SWAP"
 445      04535741 
 445      5000
 446 1f4c 3D68     		LDR	WP,[DSP]
 447 1f4e 3E60     		STR	TOS,[DSP]
 448 1f50 2E46     		MOV	TOS,WP
 449 1f52 9BE6     		_NEXT 
 450              	
 451              	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455 1f54 461F0000 		_HEADER OVER,4,"OVER"
 455      044F5645 
 455      520000BF 
 456 1f60 47F8046D 		_PUSH
 457 1f64 7E68     		LDR	TOS,[DSP,#4]
 458 1f66 91E6     		_NEXT 
 459              	
 460              	/***********************************
 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
 464 1f68 581F0000 		_HEADER ZLESS,2,"0<"
 464      02303C00 
 465 1f70 4FEAE676 		ASR TOS,#31
 466 1f74 8AE6     		_NEXT 
ARM GAS  forth.s 			page 87


 467              	
 468              	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472 1f76 6C1F0000 		_HEADER ANDD,3,"AND"
 472      03414E44 
 472      00BF
 473 1f80 57F8045B 		LDR	WP,[DSP],#4
 474 1f84 06EA0506 		AND	TOS,TOS,WP
 475 1f88 80E6     		_NEXT 
 476              	
 477              	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481 1f8a 7A1F0000 		_HEADER ORR,2,"OR"
 481      024F5200 
 481      00BF
 482 1f94 57F8045B 		LDR	WP,[DSP],#4
 483 1f98 46EA0506 		ORR	TOS,TOS,WP
 484 1f9c 76E6     		_NEXT 
 485              	
 486              	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490 1f9e 8E1F0000 		_HEADER XORR,3,"XOR"
 490      03584F52 
 490      00BF
 491 1fa8 57F8045B 		LDR	WP,[DSP],#4
 492 1fac 86EA0506 		EOR	TOS,TOS,WP
 493 1fb0 6CE6     		_NEXT 
 494              	
 495              	/**************************************************
 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499 1fb2 A21F0000 		_HEADER UPLUS,3,"UM+"
 499      03554D2B 
 499      00BF
 500 1fbc 3D68     		LDR	WP,[DSP]
 501 1fbe AD19     		ADDS	WP,WP,TOS
 502 1fc0 4FF00006 		MOV	TOS,#0
 503 1fc4 46F10006 		ADC	TOS,TOS,#0
 504 1fc8 3D60     		STR	WP,[DSP]
 505 1fca 5FE6     		_NEXT 
 506              	
 507              	/*********************************
 508              	    RSHIFT	 ( w # -- w )
 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511 1fcc B61F0000 		_HEADER RSHIFT,6,"RSHIFT"
 511      06525348 
 511      49465400 
 512 1fd8 57F8045B 		LDR	WP,[DSP],#4
 513 1fdc 45FA06F6 		MOV	TOS,WP,ASR TOS
ARM GAS  forth.s 			page 88


 514 1fe0 54E6     		_NEXT 
 515              	
 516              	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520 1fe2 D01F0000 		_HEADER LSHIFT,6,"LSHIFT"
 520      064C5348 
 520      49465400 
 520      00BF
 521 1ff0 57F8045B 		LDR	WP,[DSP],#4
 522 1ff4 05FA06F6 		MOV	TOS,WP,LSL TOS
 523 1ff8 48E6     		_NEXT
 524              	
 525              	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529 1ffa E61F0000 		_HEADER PLUS,1,"+"
 529      012B
 530 2000 57F8045B 		LDR	WP,[DSP],#4
 531 2004 2E44     		ADD	TOS,TOS,WP
 532 2006 41E6     		_NEXT 
 533              	
 534              	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538 2008 FE1F0000 		_HEADER SUBB,1,"-"
 538      012D00BF 
 539 2010 57F8045B 		LDR	WP,[DSP],#4
 540 2014 C6EB0506 		RSB	TOS,TOS,WP
 541 2018 38E6     		_NEXT 
 542              	
 543              	/************************
 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547 201a 0C200000 		_HEADER STAR,1,"*"
 547      012A
 548 2020 57F8045B 		LDR	WP,[DSP],#4
 549 2024 05FB06F6 		MUL	TOS,WP,TOS
 550 2028 30E6     		_NEXT 
 551              	
 552              	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556 202a 1E200000 		_HEADER UMSTA,3,"UM*"
 556      03554D2A 
 556      00BF
 557 2034 3D68     		LDR	WP,[DSP]
 558 2036 A6FB0523 		UMULL	T2,T3,TOS,WP
 559 203a 3A60     		STR	T2,[DSP]
 560 203c 1E46     		MOV	TOS,T3
 561 203e 25E6     		_NEXT 
 562              	
ARM GAS  forth.s 			page 89


 563              	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              	***************************/
 567 2040 2E200000 		_HEADER MSTAR,2,"M*"
 567      024D2A00 
 568 2048 3D68     		LDR	WP,[DSP]
 569 204a 86FB0523 		SMULL	T2,T3,TOS,WP
 570 204e 3A60     		STR	T2,[DSP]
 571 2050 1E46     		MOV	TOS,T3
 572 2052 1BE6     		_NEXT 
 573              	
 574              	/***************************
 575              	    1+	 ( w -- w+1 )
 576              	 	Add 1.
 577              	***************************/
 578 2054 44200000 		_HEADER ONEP,2,"1+"
 578      02312B00 
 579 205c 06F10106 		ADD	TOS,TOS,#1
 580 2060 14E6     		_NEXT 
 581              	
 582              	/***************************
 583              	    1-	 ( w -- w-1 )
 584              	 	Subtract 1.
 585              	***************************/
 586 2062 58200000 		_HEADER ONEM,2,"1-"
 586      02312D00 
 586      00BF
 587 206c A6F10106 		SUB	TOS,TOS,#1
 588 2070 0CE6     		_NEXT 
 589              	
 590              	/***************************
 591              	    2+	 ( w -- w+2 )
 592              	 	Add 2.
 593              	**************************/
 594 2072 66200000 		_HEADER TWOP,2,"2+"
 594      02322B00 
 594      00BF
 595 207c 06F10206 		ADD	TOS,TOS,#2
 596 2080 04E6     		_NEXT
 597              	
 598              	/**************************
 599              	    2-	 ( w -- w-2 )
 600              	 	Subtract 2.
 601              	**************************/
 602 2082 76200000 		_HEADER TWOM,2,"2-"
 602      02322D00 
 602      00BF
 603 208c A6F10206 		SUB	TOS,TOS,#2
 604 2090 FCE5     		_NEXT
 605              	
 606              	/***************************
 607              	    CELL+	( w -- w+4 )
 608              	 	Add CELLL.
 609              	***************************/
 610 2092 86200000 		_HEADER CELLP,5,"CELL+"
 610      0543454C 
ARM GAS  forth.s 			page 90


 610      4C2B
 611 209c 06F10406 		ADD	TOS,TOS,#CELLL
 612 20a0 F4E5     		_NEXT
 613              	
 614              	/***************************
 615              	    CELL-	( w -- w-4 )
 616              	 	Subtract CELLL.
 617              	**************************/
 618 20a2 96200000 		_HEADER CELLM,5,"CELL-"
 618      0543454C 
 618      4C2D
 619 20ac A6F10406 		SUB	TOS,TOS,#CELLL
 620 20b0 ECE5     		_NEXT
 621              	
 622              	/**************************** 
 623              	    BL	( -- 32 )
 624              	 	Blank (ASCII space).
 625              	*****************************/
 626 20b2 A6200000 		_HEADER BLANK,2,"BL"
 626      02424C00 
 626      00BF
 627 20bc 47F8046D 		_PUSH
 628 20c0 4FF02006 		MOV	TOS,#32
 629 20c4 E2E5     		_NEXT 
 630              	
 631              	/**************************
 632              	    CELLS	( w -- w*4 )
 633              	 	Multiply CELLL 
 634              	***************************/
 635 20c6 B6200000 		_HEADER CELLS,5,"CELLS"
 635      0543454C 
 635      4C53
 636 20d0 4FEA8606 		LSL TOS,#2
 637 20d4 DAE5     		_NEXT
 638              	
 639              	/***************************
 640              	    CELL/	( w -- w/4 )
 641              	 	Divide by CELLL.
 642              	***************************/
 643 20d6 CA200000 		_HEADER CELLSL,5,"CELL/"
 643      0543454C 
 643      4C2F
 644 20e0 4FEAA606 		ASR TOS,#2
 645 20e4 D2E5     		_NEXT
 646              	
 647              	/*************************
 648              	    2*	( w -- w*2 )
 649              	 	Multiply 2.
 650              	*************************/
 651 20e6 DA200000 		_HEADER TWOST,2,"2*"
 651      02322A00 
 651      00BF
 652 20f0 4FEA4606 		MOV	TOS,TOS,LSL#1
 653 20f4 CAE5     		_NEXT
 654              	
 655              	/*************************
 656              	    2/	( w -- w/2 )
ARM GAS  forth.s 			page 91


 657              	 	Divide by 2.
 658              	***********************/
 659 20f6 EA200000 		_HEADER TWOSL,2,"2/"
 659      02322F00 
 659      00BF
 660 2100 4FEA6606 		MOV	TOS,TOS,ASR#1
 661 2104 C2E5     		_NEXT
 662              	
 663              	/****************************
 664              	    ?DUP	( w -- w w | 0 )
 665              	 	Conditional duplicate.
 666              	*****************************/
 667 2106 FA200000 		_HEADER QDUP,4,"?DUP"
 667      043F4455 
 667      5000
 668 2110 3500     		MOVS	WP,TOS
 669 2112 18BF     		IT NE 
 670 2114 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 671 2118 B8E5     		_NEXT
 672              	
 673              	/***********************************
 674              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 675              	 	Rotate top 3 items.
 676              	*************************************/
 677 211a 0A210000 		_HEADER ROT,3,"ROT"
 677      03524F54 
 677      00BF
 678 2124 3868     		LDR	T0,[DSP]  // w2 
 679 2126 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 680 2128 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 681 212a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 682 212c AEE5     		_NEXT
 683              	
 684              	/*********************************
 685              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 686              	 left rotate top 3 elements 
 687              	********************************/
 688 212e 1E210000 		_HEADER NROT,4,"-ROT"
 688      042D524F 
 688      5400
 689 2138 7868     		LDR T0,[DSP,#4]
 690 213a 7E60     		STR TOS,[DSP,#4]	
 691 213c 3E68     		LDR TOS,[DSP]
 692 213e 3860     		STR T0,[DSP]
 693 2140 A4E5     		_NEXT 
 694              	
 695              	/*********************************
 696              	    2DROP	( w1 w2 -- )
 697              	 	Drop top 2 items.
 698              	*********************************/
 699 2142 32210000 		_HEADER DDROP,5,"2DROP"
 699      05324452 
 699      4F50
 700 214c 57F8046B 		_POP
 701 2150 57F8046B 		_POP
 702 2154 9AE5     		_NEXT 
 703              	
ARM GAS  forth.s 			page 92


 704              	/********************************
 705              		3DROP ( w1 w2 w3 -- )
 706              		drop top 3 items 
 707              	********************************/
 708 2156 46210000 		_HEADER TDROP,5,"3DROP"
 708      05334452 
 708      4F50
 709 2160 07F10807 	    add DSP,#8 
 710 2164 57F8046B 	    _POP 
 711 2168 90E5     	    _NEXT 
 712              	
 713              	/***********************************
 714              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 715              	 	Duplicate top 2 items.
 716              	************************************/
 717 216a 5A210000 		_HEADER DDUP,4,"2DUP"
 717      04324455 
 717      5000
 718 2174 3868     		LDR	T0,[DSP] // w1
 719 2176 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 720 217a 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 721 217e 85E5     		_NEXT
 722              	
 723              	/******************************
 724              	    D+	( d1 d2 -- d3 )
 725              	 	Add top 2 double numbers.
 726              	******************************/
 727 2180 6E210000 		_HEADER DPLUS,2,"D+"
 727      02442B00 
 728 2188 57F8045B 		LDR	WP,[DSP],#4
 729 218c 57F8042B 		LDR	T2,[DSP],#4
 730 2190 3B68     		LDR	T3,[DSP]
 731 2192 ED18     		ADDS	WP,WP,T3
 732 2194 3D60     		STR	WP,[DSP]
 733 2196 46EB0206 		ADC	TOS,TOS,T2
 734 219a 77E5     		_NEXT
 735              	
 736              	/*****************************
 737              	    NOT	 ( w -- !w )
 738              	 	1"s complement.
 739              	*****************************/
 740 219c 84210000 		_HEADER INVER,3,"NOT"
 740      034E4F54 
 741 21a4 6FEA0606 		MVN	TOS,TOS
 742 21a8 70E5     		_NEXT
 743              	
 744              	/*****************************
 745              	    NEGATE	( w -- -w )
 746              	 	2's complement.
 747              	***************************/
 748 21aa A0210000 		_HEADER NEGAT,6,"NEGATE"
 748      064E4547 
 748      41544500 
 748      00BF
 749 21b8 C6F10006 		RSB	TOS,TOS,#0
 750 21bc 66E5     		_NEXT
 751              	
ARM GAS  forth.s 			page 93


 752              	/***************************
 753              	    ABS	 ( w -- |w| )
 754              	 	Absolute.
 755              	**************************/
 756 21be AE210000 		_HEADER ABSS,3,"ABS"
 756      03414253 
 756      00BF
 757 21c8 16F0004F 		TST	TOS,#0x80000000
 758 21cc 18BF     		IT NE
 759 21ce 7642     	    RSBNE   TOS,TOS,#0
 760 21d0 5CE5     		_NEXT
 761              	
 762              	/*******************
 763              	  0= ( w -- f )
 764              	 TOS==0?
 765              	*******************/
 766 21d2 C2210000 		_HEADER ZEQUAL,2,"0="
 766      02303D00 
 766      00BF
 767 21dc 16B9     		cbnz TOS,1f
 768 21de 4FF0FF36 		mov TOS,#-1
 769 21e2 53E5     		_NEXT 
 770 21e4 86EA0606 	1:  eor TOS,TOS,TOS  
 771 21e8 50E5     		_NEXT 	
 772              	
 773              	/*********************
 774              	    =	 ( w w -- t )
 775              	 	Equal?
 776              	*********************/
 777 21ea D6210000 		_HEADER EQUAL,1,"="
 777      013D
 778 21f0 57F8045B 		LDR	WP,[DSP],#4
 779 21f4 AE42     		CMP	TOS,WP
 780 21f6 0CBF     		ITE EQ 
 781 21f8 6FF00006 	    MVNEQ	TOS,#0
 782 21fc 0026     		MOVNE	TOS,#0
 783 21fe 45E5     		_NEXT
 784              	
 785              	/************************
 786              	    U<	 ( w w -- t )
 787              	 	Unsigned less?
 788              	*************************/
 789 2200 EE210000 		_HEADER ULESS,2,"U<"
 789      02553C00 
 790 2208 57F8045B 		LDR	WP,[DSP],#4
 791 220c B542     		CMP	WP,TOS
 792 220e 34BF     		ITE CC 
 793 2210 6FF00006 		MVNCC	TOS,#0
 794 2214 0026     		MOVCS	TOS,#0
 795 2216 39E5     		_NEXT
 796              	
 797              	/**********************
 798              	    <	( w w -- t )
 799              	 	Less?
 800              	**********************/
 801 2218 04220000 		_HEADER LESS,1,"<"
 801      013C00BF 
ARM GAS  forth.s 			page 94


 802 2220 57F8045B 		LDR	WP,[DSP],#4
 803 2224 B542     		CMP	WP,TOS
 804 2226 B4BF     	    ITE LT
 805 2228 6FF00006 		MVNLT	TOS,#0
 806 222c 0026     		MOVGE	TOS,#0
 807 222e 2DE5     		_NEXT 
 808              	
 809              	/***********************
 810              	    >	( w w -- t )
 811              	 	greater?
 812              	***********************/
 813 2230 1C220000 		_HEADER GREAT,1,">"
 813      013E00BF 
 814 2238 57F8045B 		LDR	WP,[DSP],#4
 815 223c B542     		CMP	WP,TOS
 816 223e CCBF     		ITE GT
 817 2240 6FF00006 	    MVNGT	TOS,#0
 818 2244 0026     		MOVLE	TOS,#0
 819 2246 21E5     		_NEXT
 820              	
 821              	/***************************
 822              	    MAX	 ( w w -- max )
 823              	 	Leave maximum.
 824              	***************************/
 825 2248 34220000 		_HEADER MAX,3,"MAX"
 825      034D4158 
 826 2250 57F8045B 		LDR	WP,[DSP],#4
 827 2254 B542     		CMP	WP,TOS
 828 2256 C8BF     		IT GT 
 829 2258 2E46     		MOVGT	TOS,WP
 830 225a 17E5     		_NEXT 
 831              	
 832              	/**************************
 833              	    MIN	 ( w w -- min )
 834              	 	Leave minimum.
 835              	**************************/
 836 225c 4C220000 		_HEADER MIN,3,"MIN"
 836      034D494E 
 837 2264 57F8045B 		LDR	WP,[DSP],#4
 838 2268 B542     		CMP	WP,TOS
 839 226a B8BF     		IT LT
 840 226c 2E46     		MOVLT	TOS,WP
 841 226e 0DE5     		_NEXT
 842              	
 843              	/***********************
 844              	    +!	 ( w a -- )
 845              	 	Add to memory.
 846              	***********************/
 847 2270 60220000 		_HEADER PSTOR,2,"+!"
 847      022B2100 
 848 2278 57F8045B 		LDR	WP,[DSP],#4
 849 227c 3268     		LDR	T2,[TOS]
 850 227e 2A44     		ADD	T2,T2,WP
 851 2280 3260     		STR	T2,[TOS]
 852 2282 57F8046B 		_POP
 853 2286 01E5     		_NEXT
 854              	
ARM GAS  forth.s 			page 95


 855              	/************************
 856              	    2!	 ( d a -- )
 857              	 	Store double number.
 858              	*************************/
 859 2288 74220000 		_HEADER DSTOR,2,"2!"
 859      02322100 
 860 2290 57F8045B 		LDR	WP,[DSP],#4
 861 2294 57F8042B 		LDR	T2,[DSP],#4
 862 2298 46F8045B 		STR	WP,[TOS],#4
 863 229c 3260     		STR	T2,[TOS]
 864 229e 57F8046B 		_POP
 865 22a2 F3E4     		_NEXT
 866              	
 867              	/************************
 868              	    2@	 ( a -- d )
 869              	 	Fetch double number.
 870              	************************/
 871 22a4 8C220000 		_HEADER DAT,2,"D@"
 871      02444000 
 872 22ac 7568     		LDR	WP,[TOS,#4]
 873 22ae 47F8045D 		STR	WP,[DSP,#-4]!
 874 22b2 3668     		LDR	TOS,[TOS]
 875 22b4 EAE4     		_NEXT
 876              	
 877              	/***************************
 878              	    COUNT	( b -- b+1 c )
 879              	 	Fetch length of string.
 880              	****************************/
 881 22b6 A8220000 		_HEADER COUNT,5,"COUNT"
 881      05434F55 
 881      4E54
 882 22c0 16F8015B 		LDRB	WP,[TOS],#1
 883 22c4 47F8046D 		_PUSH
 884 22c8 2E46     		MOV	TOS,WP
 885 22ca DFE4     		_NEXT
 886              	
 887              	/******************************
 888              	    DNEGATE	( d -- -d )
 889              	 	Negate double number.
 890              	**************************/
 891 22cc BA220000 		_HEADER DNEGA,7,"DNEGATE"
 891      07444E45 
 891      47415445 
 892 22d8 3D68     		LDR	WP,[DSP]
 893 22da A2EB0202 		SUB	T2,T2,T2
 894 22de 551B     		SUBS WP,T2,WP
 895 22e0 62EB0606 		SBC	TOS,T2,TOS
 896 22e4 3D60     		STR	WP,[DSP]
 897 22e6 D1E4     		_NEXT
 898              	
 899              	/******************************
 900              	  System and user variables
 901              	******************************/
 902              	
 903              	/*******************************
 904              	  doVAR	( -- a )
 905              	  Run time routine for VARIABLE and CREATE.
ARM GAS  forth.s 			page 96


 906              	hidden word used by compiler
 907              	********************************/
 908              	DOVAR:
 909 22e8 47F8046D 		_PUSH
 910 22ec 6646     		MOV TOS,IP
 911 22ee 0CF1040C 		ADD IP,IP,#4 
 912 22f2 CEE4     		B UNNEST 
 913              	
 914              	/**********************************
 915              	    doCON	( -- a ) 
 916              	 	Run time routine for CONSTANT.
 917              	hidden word used by compiler 
 918              	***********************************/
 919              	DOCON:
 920 22f4 47F8046D 		_PUSH
 921 22f8 5CF8046B 		LDR.W TOS,[IP],#4 
 922 22fc C9E4     		B UNNEST 
 923              	
 924              	/***********************
 925              	  system variables 
 926              	***********************/
 927              	
 928              	/**************************
 929              	 SEED ( -- a)
 930              	 return PRNG seed address 
 931              	**************************/
 932 22fe D0220000 		_HEADER SEED,4,"SEED"
 932      04534545 
 932      4400
 933 2308 47F8046D 		_PUSH 
 934 230c 04F10406 		ADD TOS,UP,#RNDSEED
 935 2310 BCE4     		_NEXT 	
 936              	
 937              	/****************************************
 938              	  MSEC ( -- a)
 939              	 return address of milliseconds counter
 940              	****************************************/
 941 2312 02230000 		_HEADER MSEC,4,"MSEC"
 941      044D5345 
 941      4300
 942 231c 47F8046D 	    _PUSH
 943 2320 04F10806 	    ADD TOS,UP,#TICKS
 944 2324 B2E4     	    _NEXT 
 945              	
 946              	/*************************
 947              	 TIMER ( -- a )
 948              	 count down timer 
 949              	**********************/
 950 2326 16230000 		_HEADER TIMER,5,"TIMER"
 950      0554494D 
 950      4552
 951 2330 47F8046D 		 _PUSH 
 952 2334 04F10C06 	    ADD TOS,UP,#CD_TIMER
 953 2338 A8E4     	    _NEXT
 954              	
 955              	/*****************************
 956              	    'BOOT	 ( -- a )
ARM GAS  forth.s 			page 97


 957              	 	boot up application vector 
 958              	*****************************/
 959 233a 2A230000 		_HEADER TBOOT,5,"'BOOT"
 959      0527424F 
 959      4F54
 960 2344 47F8046D 		_PUSH
 961 2348 04F11006 		ADD	TOS,UP,#BOOT 
 962 234c 9EE4     		_NEXT
 963              		
 964              	/********************************************	
 965              	    BASE	( -- a )
 966              	 	Storage of the radix base for numeric I/O.
 967              	**********************************************/
 968 234e 3E230000 		_HEADER BASE,4,"BASE"
 968      04424153 
 968      4500
 969 2358 47F8046D 		_PUSH
 970 235c 04F11C06 		ADD	TOS,UP,#NBASE
 971 2360 94E4     		_NEXT
 972              	
 973              	/*****************************************************
 974              	    temp	 ( -- a )
 975              	 	A temporary storage location used in parse and find.
 976              	hidden word for internal use
 977              	********************************************************/
 978              	TEMP:
 979 2362 47F8046D 		_PUSH
 980 2366 04F12006 		ADD	TOS,UP,#TMP
 981 236a 8FE4     		_NEXT
 982              	
 983              	/*******************************************
 984              	    SPAN	( -- a )
 985              	 	Hold character count received by EXPECT.
 986              	********************************************/
 987 236c 52230000 		_HEADER SPAN,4,"SPAN"
 987      04535041 
 987      4E0000BF 
 988 2378 47F8046D 		_PUSH
 989 237c 04F12406 		ADD	TOS,UP,#CSPAN
 990 2380 84E4     		_NEXT
 991              	
 992              	/***********************************************************
 993              	    >IN	 ( -- a )
 994              	 	Hold the character pointer while parsing input stream.
 995              	***********************************************************/
 996 2382 70230000 		_HEADER INN,3,">IN"
 996      033E494E 
 996      00BF
 997 238c 47F8046D 		_PUSH
 998 2390 04F12806 		ADD	TOS,UP,#TOIN
 999 2394 7AE4     		_NEXT
 1000              	
 1001              	/**************************************
 1002              	    #TIB	( -- a )
 1003              	 	Hold the current count and address 
 1004              		of the terminal input buffer.
 1005              	**************************************/
ARM GAS  forth.s 			page 98


 1006 2396 86230000 		_HEADER NTIB,4,"#TIB"
 1006      04235449 
 1006      4200
 1007 23a0 47F8046D 		_PUSH
 1008 23a4 04F12C06 		ADD	TOS,UP,#NTIBB
 1009 23a8 70E4     		_NEXT
 1010              	
 1011              	/******************************
 1012              	    'EVAL	( -- a )
 1013              	 	Execution vector of EVAL.
 1014              	*******************************/
 1015 23aa 9A230000 		_HEADER TEVAL,5,"'EVAL"
 1015      05274556 
 1015      414C
 1016 23b4 47F8046D 		_PUSH
 1017 23b8 04F13406 		ADD	TOS,UP,#EVAL
 1018 23bc 66E4     		_NEXT
 1019              	
 1020              	/*********************************
 1021              	    HLD	 ( -- a )
 1022              	 	Hold a pointer in building a 
 1023              		numeric output string.
 1024              	*********************************/
 1025 23be AE230000 		_HEADER HLD,3,"HLD"
 1025      03484C44 
 1025      00BF
 1026 23c8 47F8046D 		_PUSH
 1027 23cc 04F13806 		ADD	TOS,UP,#HOLD
 1028 23d0 5CE4     		_NEXT
 1029              	
 1030              	/**********************************
 1031              	    CONTEXT	( -- a )
 1032              	 	A area to specify vocabulary 
 1033              		search order.
 1034              	**********************************/
 1035 23d2 C2230000 		_HEADER CNTXT,7,"CONTEXT"
 1035      07434F4E 
 1035      54455854 
 1035      00BF
 1036              	CRRNT:
 1037 23e0 47F8046D 		_PUSH
 1038 23e4 04F13C06 		ADD	TOS,UP,#CTXT
 1039 23e8 50E4     		_NEXT
 1040              	
 1041              	/******************************
 1042              	    CP	( -- a )
 1043              	 	Point to top name in RAM 
 1044              		vocabulary.
 1045              	******************************/
 1046 23ea D6230000 		_HEADER CPP,2,"CP"
 1046      02435000 
 1046      00BF
 1047 23f4 47F8046D 		_PUSH
 1048 23f8 04F14406 		ADD	TOS,UP,#USER_CTOP
 1049 23fc 46E4     		_NEXT
 1050              	
 1051              	/****************************
ARM GAS  forth.s 			page 99


 1052              	   FCP ( -- a )
 1053              	  Point ot top of Forth 
 1054              	  system dictionary
 1055              	****************************/
 1056 23fe EE230000 		_HEADER FCP,3,"FCP"
 1056      03464350 
 1056      00BF
 1057 2408 47F8046D 		_PUSH 
 1058 240c 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1059 2410 3CE4     		_NEXT 
 1060              	
 1061              	/***************************
 1062              	    LAST	( -- a )
 1063              	 	Point to the last name 
 1064              		in the name dictionary.
 1065              	***************************/
 1066 2412 02240000 		_HEADER LAST,4,"LAST"
 1066      044C4153 
 1066      5400
 1067 241c 47F8046D 		_PUSH
 1068 2420 04F14806 		ADD	TOS,UP,#LASTN
 1069 2424 32E4     		_NEXT
 1070              	
 1071              	
 1072              	/***********************
 1073              		system constants 
 1074              	***********************/
 1075              	
 1076              	/********************************
 1077              		USER-BEGIN ( -- a )
 1078              	  where user area begin in RAM
 1079              	********************************/
 1080 2426 16240000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1080      0A555345 
 1080      522D4245 
 1080      47494E00 
 1080      00BF
 1081 2438 47F8046D 		_PUSH 
 1082 243c 004E     		ldr TOS,USR_BGN_ADR 
 1083 243e 25E4     		_NEXT 
 1084              	USR_BGN_ADR:
 1085 2440 12050020 	.word  DTOP 
 1086              	
 1087              	/*********************************
 1088              	  USER_END ( -- a )
 1089              	  where user area end in RAM 
 1090              	******************************/
 1091 2444 2A240000 		_HEADER USER_END,8,"USER-END"
 1091      08555345 
 1091      522D454E 
 1091      440000BF 
 1092 2454 47F8046D 		_PUSH 
 1093 2458 004E     		ldr TOS,USER_END_ADR 
 1094 245a 17E4     		_NEXT 
 1095              	USER_END_ADR:
 1096 245c FC800120 		.word DEND 
 1097              	
ARM GAS  forth.s 			page 100


 1098              	
 1099              	/* *********************
 1100              	  Common functions
 1101              	***********************/
 1102              	
 1103              	/********************************
 1104              	    WITHIN	( u ul uh -- t )
 1105              	 	Return true if u is within 
 1106              		the range of ul and uh.
 1107              	********************************/
 1108 2460 48240000 		_HEADER WITHI,6,"WITHIN"
 1108      06574954 
 1108      48494E00 
 1109 246c 504700BF 		_NEST
 1110 2470 611F0000 		_ADR	OVER
 1111 2474 11200000 		_ADR	SUBB
 1112 2478 E51E0000 		_ADR	TOR
 1113 247c 11200000 		_ADR	SUBB
 1114 2480 BD1E0000 		_ADR	RFROM
 1115 2484 09220000 		_ADR	ULESS
 1116 2488 931C0000 		_UNNEST
 1117              	
 1118              	//  Divide
 1119              	
 1120              	/*************************************
 1121              	    UM/MOD	( udl udh u -- ur uq )
 1122              	 	Unsigned divide of a double by a 
 1123              		single. Return mod and quotient.
 1124              	**************************************/
 1125 248c 64240000 		_HEADER UMMOD,6,"UM/MOD"
 1125      06554D2F 
 1125      4D4F4400 
 1126 2498 4FF00103 		MOV	T3,#1
 1127 249c 57F8045B 		LDR	WP,[DSP],#4
 1128 24a0 3A68     		LDR	T2,[DSP]
 1129              	UMMOD0:
 1130 24a2 9218     		ADDS	T2,T2,T2
 1131 24a4 6D41     		ADCS	WP,WP,WP
 1132 24a6 04D3     		BCC	UMMOD1
 1133 24a8 A5EB0605 		SUB	WP,WP,TOS
 1134 24ac 02F10102 		ADD	T2,T2,#1
 1135 24b0 04E0     		B UMMOD2
 1136              	UMMOD1:
 1137 24b2 AD1B     		SUBS	WP,WP,TOS 
 1138 24b4 28BF     		IT CS 
 1139 24b6 0132     		ADDCS	T2,T2,#1
 1140 24b8 00D2     		BCS	UMMOD2
 1141 24ba 3544     		ADD	WP,WP,TOS
 1142              	UMMOD2:
 1143 24bc DB18     		ADDS	T3,T3,T3
 1144 24be F0D3     		BCC	UMMOD0
 1145 24c0 1646     		MOV	TOS,T2
 1146 24c2 3D60     		STR	WP,[DSP]
 1147 24c4 FFF7E2BB 		_NEXT
 1148              	
 1149              	/****************************
 1150              	    M/MOD	( d n -- r q )
ARM GAS  forth.s 			page 101


 1151              	 	Signed floored divide 
 1152              		of double by single. 
 1153              		Return mod and quotient.
 1154              	****************************/
 1155 24c8 90240000 		_HEADER MSMOD,5,"M/MOD"
 1155      054D2F4D 
 1155      4F4400BF 
 1156 24d4 504700BF 		_NEST
 1157 24d8 3D1F0000 		_ADR	DUPP
 1158 24dc 711F0000 		_ADR	ZLESS
 1159 24e0 3D1F0000 		_ADR	DUPP
 1160 24e4 E51E0000 		_ADR	TOR
 1161 24e8 4B1E0000 		_QBRAN MMOD1
 1161      00250000 
 1162 24f0 B9210000 		_ADR	NEGAT
 1163 24f4 E51E0000 		_ADR	TOR
 1164 24f8 D9220000 		_ADR	DNEGA
 1165 24fc BD1E0000 		_ADR	RFROM
 1166              	MMOD1:
 1167 2500 E51E0000 		_ADR	TOR
 1168 2504 3D1F0000 		_ADR	DUPP
 1169 2508 711F0000 		_ADR	ZLESS
 1170 250c 4B1E0000 		_QBRAN MMOD2
 1170      1C250000 
 1171 2514 D11E0000 		_ADR	RAT
 1172 2518 01200000 		_ADR	PLUS
 1173              	MMOD2:
 1174 251c BD1E0000 		_ADR	RFROM
 1175 2520 99240000 		_ADR	UMMOD
 1176 2524 BD1E0000 		_ADR	RFROM
 1177 2528 4B1E0000 		_QBRAN	MMOD3
 1177      3C250000 
 1178 2530 4D1F0000 		_ADR	SWAP
 1179 2534 B9210000 		_ADR	NEGAT
 1180 2538 4D1F0000 		_ADR	SWAP
 1181              	MMOD3:   
 1182 253c 931C0000 		_UNNEST
 1183              	
 1184              	/****************************
 1185              	   /MOD	( n n -- r q )
 1186              		Signed divide. Return
 1187              		mod and quotient.
 1188              	****************************/
 1189 2540 CC240000 		_HEADER SLMOD,4,"/MOD"
 1189      042F4D4F 
 1189      440000BF 
 1190 254c 504700BF 		_NEST
 1191 2550 611F0000 		_ADR	OVER
 1192 2554 711F0000 		_ADR	ZLESS
 1193 2558 4D1F0000 		_ADR	SWAP
 1194 255c D5240000 		_ADR	MSMOD
 1195 2560 931C0000 		_UNNEST
 1196              	
 1197              	/**************************
 1198              	    MOD	 ( n n -- r )
 1199              	 	Signed divide. Return
 1200              		mod only.
ARM GAS  forth.s 			page 102


 1201              	**************************/
 1202 2564 44250000 		_HEADER MODD,3,"MOD"
 1202      034D4F44 
 1203 256c 504700BF 		_NEST
 1204 2570 4D250000 		_ADR	SLMOD
 1205 2574 2D1F0000 		_ADR	DROP
 1206 2578 931C0000 		_UNNEST
 1207              	
 1208              	/*************************
 1209              	    /	   ( n n -- q )
 1210              	 	Signed divide. Return
 1211              		quotient only.
 1212              	**************************/
 1213 257c 68250000 		_HEADER SLASH,1,"/"
 1213      012F00BF 
 1214 2584 504700BF 		_NEST
 1215 2588 4D250000 		_ADR	SLMOD
 1216 258c 4D1F0000 		_ADR	SWAP
 1217 2590 2D1F0000 		_ADR	DROP
 1218 2594 931C0000 		_UNNEST
 1219              	
 1220              	//******************************
 1221              	//  */MOD	( n1 n2 n3 -- r q )
 1222              	/* 	Multiply n1 and n2, then 
 1223              		divide by n3. Return 
 1224              		mod and quotient.
 1225              	******************************/
 1226 2598 80250000 		_HEADER SSMOD,5,"*/MOD"
 1226      052A2F4D 
 1226      4F4400BF 
 1227 25a4 504700BF 		_NEST
 1228 25a8 E51E0000 		_ADR	TOR
 1229 25ac 49200000 		_ADR	MSTAR
 1230 25b0 BD1E0000 		_ADR	RFROM
 1231 25b4 D5240000 		_ADR	MSMOD
 1232 25b8 931C0000 		_UNNEST
 1233              	
 1234              	//*******************************
 1235              	//  */ ( n1 n2 n3 -- q )
 1236              	/* 	Multiply n1 by n2, then 
 1237              		divide by n3. Return quotient
 1238              		only.
 1239              	*******************************/
 1240 25bc 9C250000 		_HEADER STASL,2,"*/"
 1240      022A2F00 
 1241 25c4 504700BF 		_NEST
 1242 25c8 A5250000 		_ADR	SSMOD
 1243 25cc 4D1F0000 		_ADR	SWAP
 1244 25d0 2D1F0000 		_ADR	DROP
 1245 25d4 931C0000 		_UNNEST
 1246              	
 1247              	/*******************
 1248              	  Miscellaneous
 1249              	*******************/
 1250              	
 1251              	/*************************
 1252              	    ALIGNED	( b -- a )
ARM GAS  forth.s 			page 103


 1253              	 	Align address to the 
 1254              		cell boundary.
 1255              	**************************/
 1256 25d8 C0250000 		_HEADER ALGND,7,"ALIGNED"
 1256      07414C49 
 1256      474E4544 
 1257 25e4 06F10306 		ADD	TOS,TOS,#3
 1258 25e8 6FF00305 		MVN	WP,#3
 1259 25ec 06EA0506 		AND	TOS,TOS,WP
 1260 25f0 FFF74CBB 		_NEXT
 1261              	
 1262              	/****************************
 1263              	    >CHAR	( c -- c )
 1264              	 	Filter non-printing 
 1265              		characters.
 1266              	****************************/
 1267 25f4 DC250000 		_HEADER TCHAR,5,">CHAR"
 1267      053E4348 
 1267      415200BF 
 1268 2600 504700BF 		_NEST
 1269 2604 0B1E0000 		_DOLIT  0x7F
 1269      7F000000 
 1270 260c 811F0000 		_ADR	ANDD
 1271 2610 3D1F0000 		_ADR	DUPP	// mask msb
 1272 2614 BD200000 		_ADR	BLANK
 1273 2618 0B1E0000 		_DOLIT 	127
 1273      7F000000 
 1274 2620 6D240000 		_ADR	WITHI	// check for printable
 1275 2624 A5210000 		_ADR	INVER
 1276 2628 4B1E0000 		_QBRAN	TCHA1
 1276      3C260000 
 1277 2630 2D1F0000 		_ADR	DROP
 1278 2634 0B1E0000 		_DOLIT 	'_'	// replace non-printables
 1278      5F000000 
 1279              	TCHA1:
 1280 263c 931C0000 		  _UNNEST
 1281              	
 1282              	/************************
 1283              	    DEPTH	( -- n )
 1284              	 	Return the depth of
 1285              		the data stack.
 1286              	***********************/
 1287 2640 F8250000 		_HEADER DEPTH,5,"DEPTH"
 1287      05444550 
 1287      544800BF 
 1288 264c 4FF47F42 		_MOV32 T2,SPP 
 1288      C2F20102 
 1289 2654 A2EB0702 		SUB	T2,T2,DSP
 1290 2658 47F8046D 		_PUSH
 1291 265c 4FEAA206 		ASR	TOS,T2,#2
 1292 2660 FFF714BB 		_NEXT
 1293              	
 1294              	/*****************************
 1295              	    PICK	( ... +n -- ... w )
 1296              	 	Copy the nth stack item 
 1297              		to tos.
 1298              	******************************/
ARM GAS  forth.s 			page 104


 1299 2664 44260000 		_HEADER PICK,4,"PICK"
 1299      04504943 
 1299      4B0000BF 
 1300 2670 504700BF 		_NEST
 1301 2674 5D200000 		_ADR	ONEP
 1302 2678 D1200000 		_ADR	CELLS
 1303 267c 191F0000 		_ADR	SPAT
 1304 2680 01200000 		_ADR	PLUS
 1305 2684 911E0000 		_ADR	AT
 1306 2688 931C0000 		_UNNEST
 1307              	
 1308              	/*********************
 1309              	  Memory access
 1310              	*********************/
 1311              	
 1312              	/*************************
 1313              	    HERE	( -- a )
 1314              	 	Return the top of
 1315              		the code dictionary.
 1316              	*************************/
 1317 268c 68260000 		_HEADER HERE,4,"HERE"
 1317      04484552 
 1317      450000BF 
 1318 2698 504700BF 		_NEST
 1319 269c F5230000 		_ADR	CPP
 1320 26a0 911E0000 		_ADR	AT
 1321 26a4 931C0000 		_UNNEST
 1322              	
 1323              	/***************************	
 1324              	    PAD	 ( -- a )
 1325              	 	Return the address of 
 1326              		a temporary buffer.
 1327              	***************************/
 1328 26a8 90260000 		_HEADER PAD,3,"PAD"
 1328      03504144 
 1329 26b0 504700BF 		_NEST
 1330 26b4 99260000 		_ADR	HERE
 1331 26b8 0B1E0000 		_DOLIT 80
 1331      50000000 
 1332 26c0 01200000 		_ADR PLUS 
 1333 26c4 931C0000 		_UNNEST
 1334              	
 1335              	/***********************
 1336              	    TIB	 ( -- a )
 1337              	 	Return the address 
 1338              		of the terminal 
 1339              		input buffer.
 1340              	************************/
 1341 26c8 AC260000 		_HEADER TIB,3,"TIB"
 1341      03544942 
 1342 26d0 47F8046D 		_PUSH
 1343 26d4 266B     		ldr TOS,[UP,#TIBUF]
 1344 26d6 FFF7D9BA 		_NEXT
 1345              	
 1346              	/*************************
 1347              	    @EXECUTE	( a -- )
 1348              	 	Execute vector stored
ARM GAS  forth.s 			page 105


 1349              		in address a.
 1350              	*************************/
 1351 26da CC260000 		_HEADER ATEXE,8,"@EXECUTE"
 1351      08404558 
 1351      45435554 
 1351      4500
 1352 26e8 3500     		MOVS	WP,TOS
 1353 26ea 57F8046B 		_POP
 1354 26ee 2D68     		LDR	WP,[WP]
 1355 26f0 45F00105 		ORR	WP,WP,#1
 1356 26f4 18BF     	    IT NE 
 1357 26f6 2847     		BXNE	WP
 1358 26f8 FFF7C8BA 		_NEXT
 1359              	
 1360              	/*******************************
 1361              	    CMOVE	( b1 b2 u -- )
 1362              	 	Copy u bytes from b1 to b2.
 1363              	********************************/
 1364 26fc DE260000 		_HEADER CMOVE,5,"CMOVE"
 1364      05434D4F 
 1364      564500BF 
 1365 2708 57F8042B 		LDR	T2,[DSP],#4
 1366 270c 57F8043B 		LDR	T3,[DSP],#4
 1367 2710 03E0     		B CMOV1
 1368              	CMOV0:
 1369 2712 13F8015B 		LDRB	WP,[T3],#1
 1370 2716 02F8015B 		STRB	WP,[T2],#1
 1371              	CMOV1:
 1372 271a 3600     		MOVS	TOS,TOS
 1373 271c 02D0     		BEQ	CMOV2
 1374 271e A6F10106 		SUB	TOS,TOS,#1
 1375 2722 F6E7     		B CMOV0
 1376              	CMOV2:
 1377 2724 57F8046B 		_POP
 1378 2728 FFF7B0BA 		_NEXT
 1379              	
 1380              	/***************************
 1381              	    MOVE	( a1 a2 u -- )
 1382              	 	Copy u words from a1 to a2.
 1383              	*******************************/
 1384 272c 00270000 		_HEADER MOVE,4,"MOVE"
 1384      044D4F56 
 1384      450000BF 
 1385 2738 4FF00400 		MOV T0,#4 
 1386 273c 06F10306 		ADD TOS,#3 
 1387 2740 26F00306 		BIC TOS,#3
 1388 2744 57F8041B 		LDR	T1,[DSP],#4 // dest
 1389 2748 57F8042B 		LDR	T2,[DSP],#4 // src 
 1390 274c 8A42     		CMP T2,T1 
 1391 274e 08D5     		BPL MOVE1
 1392 2750 6FF00300 		MOV T0,#-4 
 1393 2754 3144     		ADD T1,TOS
 1394 2756 3244     		ADD T2,TOS 
 1395 2758 01E0     		B MOVE3
 1396              	MOVE0:
 1397 275a 1568     		LDR	WP,[T2]
 1398 275c 0D60     		STR	WP,[T1]
ARM GAS  forth.s 			page 106


 1399              	MOVE3: 
 1400 275e 0144     		ADD T1,T0 
 1401 2760 0244     		ADD T2,T0 
 1402              	MOVE1:
 1403 2762 3600     		MOVS TOS,TOS
 1404 2764 02D0     		BEQ	MOVE2
 1405 2766 A6F10406 		SUB	TOS,TOS,#4
 1406 276a F6E7     		B MOVE0
 1407              	MOVE2:
 1408 276c 57F8046B 		_POP
 1409 2770 FFF78CBA 		_NEXT
 1410              	
 1411              	/**************************
 1412              	    FILL	( b u c -- )
 1413              	 	Fill u bytes of character
 1414              		c to area beginning at b.
 1415              	******************************/
 1416 2774 30270000 		_HEADER FILL,4,"FILL"
 1416      0446494C 
 1416      4C0000BF 
 1417 2780 03CF     		LDMFD DSP!,{T0,T1} 
 1418 2782 0000     		MOVS T0,T0 
 1419 2784 03D0     		BEQ FILL2
 1420              	FILL1:
 1421 2786 01F8016B 		STRB	TOS,[T1],#1
 1422 278a 0138     		SUBS	T0,T0,#1
 1423 278c FBD1     		BNE FILL1
 1424              	FILL2:
 1425 278e 57F8046B 		_POP
 1426 2792 FFF77BBA 		_NEXT
 1427              	
 1428              	/*****************************
 1429              	    PACK$	( b u a -- a )
 1430              	 	Build a counted word with
 1431              		u characters from b. 
 1432              		Null fill.
 1433              	*****************************/
 1434 2796 78270000 		_HEADER PACKS,5,"PACK$"
 1434      05504143 
 1434      4B24
 1435 27a0 504700BF 		_NEST
 1436 27a4 E5250000 		_ADR	ALGND
 1437 27a8 3D1F0000 		_ADR	DUPP
 1438 27ac E51E0000 		_ADR	TOR			// strings only on cell boundary
 1439 27b0 611F0000 		_ADR	OVER
 1440 27b4 01200000 		_ADR	PLUS
 1441 27b8 5D200000 		_ADR	ONEP
 1442 27bc 0B1E0000 		_DOLIT 	0xFFFFFFFC
 1442      FCFFFFFF 
 1443 27c4 811F0000 		_ADR	ANDD			// count mod cell
 1444 27c8 0B1E0000 		_DOLIT 	0
 1444      00000000 
 1445 27d0 4D1F0000 		_ADR	SWAP
 1446 27d4 7D1E0000 		_ADR	STORE			// null fill cell
 1447 27d8 D11E0000 		_ADR	RAT
 1448 27dc 75210000 		_ADR	DDUP
 1449 27e0 9D1E0000 		_ADR	CSTOR
ARM GAS  forth.s 			page 107


 1450 27e4 5D200000 		_ADR	ONEP			// save count
 1451 27e8 4D1F0000 		_ADR	SWAP
 1452 27ec 09270000 		_ADR	CMOVE
 1453 27f0 BD1E0000 		_ADR	RFROM
 1454 27f4 931C0000 		_UNNEST   			// move string
 1455              	
 1456              	/***********************************
 1457              	  Numeric output, single precision
 1458              	***********************************/
 1459              	
 1460              	/**************************
 1461              	    DIGIT	( u -- c )
 1462              	 	Convert digit u to 
 1463              		a character.
 1464              	***************************/
 1465 27f8 9A270000 		_HEADER DIGIT,5,"DIGIT"
 1465      05444947 
 1465      495400BF 
 1466 2804 504700BF 		_NEST
 1467 2808 0B1E0000 		_DOLIT 9
 1467      09000000 
 1468 2810 611F0000 		_ADR	OVER
 1469 2814 21220000 		_ADR	LESS
 1470 2818 0B1E0000 		_DOLIT	7
 1470      07000000 
 1471 2820 811F0000 		_ADR	ANDD
 1472 2824 01200000 		_ADR	PLUS
 1473 2828 0B1E0000 		_DOLIT	'0'
 1473      30000000 
 1474 2830 01200000 		_ADR	PLUS 
 1475 2834 931C0000 		_UNNEST
 1476              	
 1477              	/*********************************
 1478              	    EXTRACT	( n base -- n c )
 1479              	 	Extract the least significant
 1480              		digit from n.
 1481              	**********************************/
 1482 2838 FC270000 		_HEADER EXTRC,7,"EXTRACT"
 1482      07455854 
 1482      52414354 
 1483 2844 504700BF 		_NEST
 1484 2848 0B1E0000 		_DOLIT 0
 1484      00000000 
 1485 2850 4D1F0000 		_ADR	SWAP
 1486 2854 99240000 		_ADR	UMMOD
 1487 2858 4D1F0000 		_ADR	SWAP
 1488 285c 05280000 		_ADR	DIGIT
 1489 2860 931C0000 		_UNNEST
 1490              	
 1491              	/***************************
 1492              	    <#	  ( -- )
 1493              	 	Initiate the numeric
 1494              		output process.
 1495              	****************************/
 1496 2864 3C280000 		_HEADER BDIGS,2,"<#"
 1496      023C2300 
 1497 286c 504700BF 		_NEST
ARM GAS  forth.s 			page 108


 1498 2870 B1260000 		_ADR	PAD
 1499 2874 C9230000 		_ADR	HLD
 1500 2878 7D1E0000 		_ADR	STORE
 1501 287c 931C0000 		_UNNEST
 1502              	
 1503              	/*********************************
 1504              	    HOLD	( c -- )
 1505              	 	Insert a character into the 
 1506              		numeric output string.
 1507              	**********************************/
 1508 2880 68280000 		_HEADER HOLD,4,"HOLD"
 1508      04484F4C 
 1508      440000BF 
 1509 288c 504700BF 		_NEST
 1510 2890 C9230000 		_ADR	HLD
 1511 2894 911E0000 		_ADR	AT
 1512 2898 6D200000 		_ADR	ONEM
 1513 289c 3D1F0000 		_ADR	DUPP
 1514 28a0 C9230000 		_ADR	HLD
 1515 28a4 7D1E0000 		_ADR	STORE
 1516 28a8 9D1E0000 		_ADR	CSTOR
 1517 28ac 931C0000 		_UNNEST
 1518              	
 1519              	/***********************
 1520              	    #	   ( u -- u )
 1521              	 	Extract one digit 
 1522              		from u and append 
 1523              		the digit to output 
 1524              		string.
 1525              	*************************/
 1526 28b0 84280000 		_HEADER DIG,1,"#"
 1526      012300BF 
 1527 28b8 504700BF 		_NEST
 1528 28bc 59230000 		_ADR	BASE
 1529 28c0 911E0000 		_ADR	AT
 1530 28c4 45280000 		_ADR	EXTRC
 1531 28c8 8D280000 		_ADR	HOLD
 1532 28cc 931C0000 		_UNNEST
 1533              	
 1534              	/***************************
 1535              	    #S	  ( u -- 0 )
 1536              	 	Convert u until all 
 1537              		digits are added to 
 1538              		the output string.
 1539              	***************************/
 1540 28d0 B4280000 		_HEADER DIGS,2,"#S"
 1540      02235300 
 1541 28d8 504700BF 		_NEST
 1542              	DIGS1:
 1543 28dc B9280000 	    _ADR	DIG
 1544 28e0 3D1F0000 		_ADR	DUPP
 1545 28e4 4B1E0000 		_QBRAN 	DIGS2
 1545      F4280000 
 1546 28ec 5F1E0000 		_BRAN	DIGS1
 1546      DC280000 
 1547              	DIGS2:
 1548 28f4 931C0000 		  _UNNEST
ARM GAS  forth.s 			page 109


 1549              	
 1550              	/*********************
 1551              	    SIGN	( n -- )
 1552              	 	Add a minus sign
 1553              		to the numeric
 1554              		output string.
 1555              	*********************/
 1556 28f8 D4280000 		_HEADER SIGN,4,"SIGN"
 1556      04534947 
 1556      4E0000BF 
 1557 2904 504700BF 		_NEST
 1558 2908 711F0000 		_ADR	ZLESS
 1559 290c 4B1E0000 		_QBRAN	SIGN1
 1559      20290000 
 1560 2914 0B1E0000 		_DOLIT '-'
 1560      2D000000 
 1561 291c 8D280000 		_ADR	HOLD
 1562              	SIGN1:
 1563 2920 931C0000 		  _UNNEST
 1564              	
 1565              	/*************************
 1566              	    #>  ( w -- b u )
 1567              	 	Prepare the output 
 1568              		word to be TYPE'd.
 1569              	************************/
 1570 2924 FC280000 		_HEADER EDIGS,2,"#>"
 1570      02233E00 
 1571 292c 504700BF 		_NEST
 1572 2930 2D1F0000 		_ADR	DROP
 1573 2934 C9230000 		_ADR	HLD
 1574 2938 911E0000 		_ADR	AT
 1575 293c B1260000 		_ADR	PAD
 1576 2940 611F0000 		_ADR	OVER
 1577 2944 11200000 		_ADR	SUBB
 1578 2948 931C0000 		_UNNEST
 1579              	
 1580              	/**************************
 1581              	    str	 ( n -- b u )
 1582              	 	Convert a signed 
 1583              		integer to a numeric 
 1584              		string.
 1585              	hidden word used by compiler
 1586              	***************************/
 1587              	STRR:
 1588 294c 504700BF 		_NEST
 1589 2950 3D1F0000 		_ADR	DUPP
 1590 2954 E51E0000 		_ADR	TOR
 1591 2958 C9210000 		_ADR	ABSS
 1592 295c 6D280000 		_ADR	BDIGS
 1593 2960 D9280000 		_ADR	DIGS
 1594 2964 BD1E0000 		_ADR	RFROM
 1595 2968 05290000 		_ADR	SIGN
 1596 296c 2D290000 		_ADR	EDIGS
 1597 2970 931C0000 		_UNNEST
 1598              	
 1599              	/*************************
 1600              	    HEX	 ( -- )
ARM GAS  forth.s 			page 110


 1601              	 	Use radix 16 as 
 1602              		base for numeric 
 1603              		conversions.
 1604              	*************************/
 1605 2974 28290000 		_HEADER HEX,3,"HEX"
 1605      03484558 
 1606 297c 504700BF 		_NEST
 1607 2980 0B1E0000 		_DOLIT 16
 1607      10000000 
 1608 2988 59230000 		_ADR	BASE
 1609 298c 7D1E0000 		_ADR	STORE
 1610 2990 931C0000 		_UNNEST
 1611              	
 1612              	/************************
 1613              	    DECIMAL	( -- )
 1614              	 	Use radix 10 as base
 1615              		for numeric conversions.
 1616              	*************************/
 1617 2994 78290000 		_HEADER DECIM,7,"DECIMAL"
 1617      07444543 
 1617      494D414C 
 1618 29a0 504700BF 		_NEST
 1619 29a4 0B1E0000 		_DOLIT 10
 1619      0A000000 
 1620 29ac 59230000 		_ADR	BASE
 1621 29b0 7D1E0000 		_ADR	STORE
 1622 29b4 931C0000 		_UNNEST
 1623              	
 1624              	/************************************
 1625              	  Numeric input, single precision
 1626              	***********************************/
 1627              	
 1628              	/***********************************
 1629              	    DIGIT?	( c base -- u t )
 1630              	 	Convert a character to its 
 1631              		numeric value. A flag 
 1632              		indicates success.
 1633              	**********************************/
 1634 29b8 98290000 		_HEADER DIGTQ,6,"DIGIT?"
 1634      06444947 
 1634      49543F00 
 1635 29c4 504700BF 		_NEST
 1636 29c8 E51E0000 		_ADR	TOR
 1637 29cc 0B1E0000 		_DOLIT 	'0'
 1637      30000000 
 1638 29d4 11200000 		_ADR	SUBB
 1639 29d8 0B1E0000 		_DOLIT 9
 1639      09000000 
 1640 29e0 611F0000 		_ADR	OVER
 1641 29e4 21220000 		_ADR	LESS
 1642 29e8 4B1E0000 		_QBRAN	DGTQ1
 1642      102A0000 
 1643 29f0 0B1E0000 		_DOLIT 7
 1643      07000000 
 1644 29f8 11200000 		_ADR	SUBB
 1645 29fc 3D1F0000 		_ADR	DUPP
 1646 2a00 0B1E0000 		_DOLIT	10
ARM GAS  forth.s 			page 111


 1646      0A000000 
 1647 2a08 21220000 		_ADR	LESS
 1648 2a0c 951F0000 		_ADR	ORR
 1649              	DGTQ1:
 1650 2a10 3D1F0000 		_ADR	DUPP
 1651 2a14 BD1E0000 		_ADR	RFROM
 1652 2a18 09220000 		_ADR	ULESS
 1653 2a1c 931C0000 		_UNNEST
 1654              	
 1655              	/**********************************
 1656              	    NUMBER?	( a -- n T | a F )
 1657              	 	Convert a number word to 
 1658              		integer. Push a flag on TOS.
 1659              	**********************************/
 1660 2a20 BC290000 		_HEADER NUMBQ,7,"NUMBER?"
 1660      074E554D 
 1660      4245523F 
 1661 2a2c 504700BF 		_NEST
 1662 2a30 59230000 		_ADR	BASE
 1663 2a34 911E0000 		_ADR	AT
 1664 2a38 E51E0000 		_ADR	TOR
 1665 2a3c 0B1E0000 		_DOLIT	0
 1665      00000000 
 1666 2a44 611F0000 		_ADR	OVER
 1667 2a48 C1220000 		_ADR	COUNT
 1668 2a4c 611F0000 		_ADR	OVER
 1669 2a50 B11E0000 		_ADR	CAT
 1670 2a54 0B1E0000 		_DOLIT '$'
 1670      24000000 
 1671 2a5c F1210000 		_ADR	EQUAL
 1672 2a60 4B1E0000 		_QBRAN	NUMQ1
 1672      7C2A0000 
 1673 2a68 7D290000 		_ADR	HEX
 1674 2a6c 4D1F0000 		_ADR	SWAP
 1675 2a70 5D200000 		_ADR	ONEP
 1676 2a74 4D1F0000 		_ADR	SWAP
 1677 2a78 6D200000 		_ADR	ONEM
 1678              	NUMQ1:
 1679 2a7c 611F0000 		_ADR	OVER
 1680 2a80 B11E0000 		_ADR	CAT
 1681 2a84 0B1E0000 		_DOLIT	'-'
 1681      2D000000 
 1682 2a8c F1210000 		_ADR	EQUAL
 1683 2a90 E51E0000 		_ADR	TOR
 1684 2a94 4D1F0000 		_ADR	SWAP
 1685 2a98 D11E0000 		_ADR	RAT
 1686 2a9c 11200000 		_ADR	SUBB
 1687 2aa0 4D1F0000 		_ADR	SWAP
 1688 2aa4 D11E0000 		_ADR	RAT
 1689 2aa8 01200000 		_ADR	PLUS
 1690 2aac 11210000 		_ADR	QDUP
 1691 2ab0 4B1E0000 		_QBRAN	NUMQ6
 1691      442B0000 
 1692 2ab8 6D200000 		_ADR	ONEM
 1693 2abc E51E0000 		_ADR	TOR
 1694              	NUMQ2:
 1695 2ac0 3D1F0000 		_ADR	DUPP
ARM GAS  forth.s 			page 112


 1696 2ac4 E51E0000 		_ADR	TOR
 1697 2ac8 B11E0000 		_ADR	CAT
 1698 2acc 59230000 		_ADR	BASE
 1699 2ad0 911E0000 		_ADR	AT
 1700 2ad4 C5290000 		_ADR	DIGTQ
 1701 2ad8 4B1E0000 		_QBRAN	NUMQ4
 1701      282B0000 
 1702 2ae0 4D1F0000 		_ADR	SWAP
 1703 2ae4 59230000 		_ADR	BASE
 1704 2ae8 911E0000 		_ADR	AT
 1705 2aec 21200000 		_ADR	STAR
 1706 2af0 01200000 		_ADR	PLUS
 1707 2af4 BD1E0000 		_ADR	RFROM
 1708 2af8 5D200000 		_ADR	ONEP
 1709 2afc 2D1E0000 		_DONXT	NUMQ2
 1709      C02A0000 
 1710 2b04 D11E0000 		_ADR	RAT
 1711 2b08 4D1F0000 		_ADR	SWAP
 1712 2b0c 2D1F0000 		_ADR	DROP
 1713 2b10 4B1E0000 		_QBRAN	NUMQ3
 1713      1C2B0000 
 1714 2b18 B9210000 		_ADR	NEGAT
 1715              	NUMQ3:
 1716 2b1c 4D1F0000 		_ADR	SWAP
 1717 2b20 5F1E0000 		_BRAN	NUMQ5
 1717      402B0000 
 1718              	NUMQ4:
 1719 2b28 BD1E0000 		_ADR	RFROM
 1720 2b2c BD1E0000 		_ADR	RFROM
 1721 2b30 4D210000 		_ADR	DDROP
 1722 2b34 4D210000 		_ADR	DDROP
 1723 2b38 0B1E0000 		_DOLIT	0
 1723      00000000 
 1724              	NUMQ5:
 1725 2b40 3D1F0000 		_ADR	DUPP
 1726              	NUMQ6:
 1727 2b44 BD1E0000 		_ADR	RFROM
 1728 2b48 4D210000 		_ADR	DDROP
 1729 2b4c BD1E0000 		_ADR	RFROM
 1730 2b50 59230000 		_ADR	BASE
 1731 2b54 7D1E0000 		_ADR	STORE
 1732 2b58 931C0000 		_UNNEST
 1733              	
 1734              	/********************
 1735              	  console I/O
 1736              	********************/
 1737              	
 1738              	/**********************
 1739              	    SPACE	( -- )
 1740              	 	Send the blank 
 1741              		character to 
 1742              		the output device.
 1743              	************************/
 1744 2b5c 242A0000 		_HEADER SPACE,5,"SPACE"
 1744      05535041 
 1744      434500BF 
 1745 2b68 504700BF 		_NEST
ARM GAS  forth.s 			page 113


 1746 2b6c BD200000 		_ADR	BLANK
 1747 2b70 151D0000 		_ADR	EMIT
 1748 2b74 931C0000 		_UNNEST
 1749              	
 1750              	/***************************
 1751              	    SPACES	( +n -- )
 1752              	 	Send n spaces to the 
 1753              		output device.
 1754              	****************************/
 1755 2b78 602B0000 		_HEADER SPACS,6,"SPACES"
 1755      06535041 
 1755      43455300 
 1756 2b84 504700BF 		_NEST
 1757 2b88 0B1E0000 		_DOLIT	0
 1757      00000000 
 1758 2b90 51220000 		_ADR	MAX
 1759 2b94 E51E0000 		_ADR	TOR
 1760 2b98 5F1E0000 		_BRAN	CHAR2
 1760      A42B0000 
 1761              	CHAR1:
 1762 2ba0 692B0000 		_ADR	SPACE
 1763              	CHAR2:
 1764 2ba4 2D1E0000 		_DONXT	CHAR1
 1764      A02B0000 
 1765 2bac 931C0000 		_UNNEST
 1766              	
 1767              	/***********************
 1768              	    TYPE	( b u -- )
 1769              	 	Output u characters 
 1770              		from b.
 1771              	************************/
 1772 2bb0 7C2B0000 		_HEADER TYPEE,4,"TYPE"
 1772      04545950 
 1772      450000BF 
 1773 2bbc 504700BF 		_NEST
 1774 2bc0 E51E0000 		_ADR  TOR   // ( a+1 -- R: u )
 1775 2bc4 5F1E0000 		_BRAN	TYPE2
 1775      D82B0000 
 1776              	TYPE1:  
 1777 2bcc C1220000 		_ADR  COUNT
 1778 2bd0 01260000 		_ADR TCHAR
 1779 2bd4 151D0000 		_ADR EMIT
 1780              	TYPE2:  
 1781 2bd8 2D1E0000 		_DONXT	TYPE1
 1781      CC2B0000 
 1782 2be0 2D1F0000 		_ADR	DROP
 1783 2be4 931C0000 		_UNNEST
 1784              	
 1785              	/***************************
 1786              	    CR	  ( -- )
 1787              	 	Output a carriage return
 1788              		and a line feed.
 1789              	****************************/
 1790 2be8 B42B0000 		_HEADER CR,2,"CR"
 1790      02435200 
 1791 2bf0 504700BF 		_NEST
 1792 2bf4 0B1E0000 		_DOLIT	CRR
ARM GAS  forth.s 			page 114


 1792      0D000000 
 1793 2bfc 151D0000 		_ADR	EMIT
 1794 2c00 0B1E0000 		_DOLIT	LF
 1794      0A000000 
 1795 2c08 151D0000 		_ADR	EMIT
 1796 2c0c 931C0000 		_UNNEST
 1797              	
 1798              	/******************************************
 1799              	  do_$	( -- a )
 1800              	  Return the address of a compiled string.
 1801              	  adjust return address to skip over it.
 1802              	hidden word used by compiler. 
 1803              	******************************************/
 1804              	DOSTR:
 1805 2c10 504700BF 		_NEST     
 1806              	/* compiled string address is 2 levels deep */
 1807 2c14 BD1E0000 		_ADR	RFROM	// { -- a1 }
 1808 2c18 BD1E0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1809 2c1c 3D1F0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1810 2c20 C1220000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1811 2c24 01200000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1812 2c28 E5250000 		_ADR	ALGND	//  end of string
 1813              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1814 2c2c E51E0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1815 2c30 4D1F0000 		_ADR	SWAP	//  count tugged
 1816 2c34 E51E0000 		_ADR	TOR     //  ( -- a2) is string address
 1817 2c38 931C0000 		_UNNEST
 1818              	
 1819              	/******************************************
 1820              	    $"|	( -- a )
 1821              	 	Run time routine compiled by _". 
 1822              		Return address of a compiled string.
 1823              	hidden word used by compiler
 1824              	*****************************************/
 1825              	STRQP:
 1826 2c3c 504700BF 		_NEST
 1827 2c40 112C0000 		_ADR	DOSTR
 1828 2c44 931C0000 		_UNNEST			// force a call to dostr
 1829              	
 1830              	/*******************************
 1831              	    .$	( a -- )
 1832              	 	Run time routine of ." 
 1833              		Output a compiled string.
 1834              	hidden word used by compiler
 1835              	*******************************/
 1836              	DOTST:
 1837 2c48 504700BF 		_NEST
 1838 2c4c C1220000 		_ADR	COUNT // ( -- a+1 c )
 1839 2c50 BD2B0000 		_ADR	TYPEE
 1840 2c54 931C0000 		_UNNEST
 1841              	
 1842              	/**********************
 1843              	    ."|	( -- )
 1844              	 	Run time routine of ." 
 1845              		Output a compiled string.
 1846              	hidden word used by compiler
 1847              	*****************************/
ARM GAS  forth.s 			page 115


 1848              	DOTQP:
 1849 2c58 504700BF 		_NEST
 1850 2c5c 112C0000 		_ADR	DOSTR
 1851 2c60 492C0000 		_ADR	DOTST
 1852 2c64 931C0000 		_UNNEST
 1853              	
 1854              	/******************************
 1855              	    .R	  ( n +n -- )
 1856              	 	Display an integer in a 
 1857              		field of n columns, 
 1858              		right justified.
 1859              	*******************************/
 1860 2c68 EC2B0000 		_HEADER DOTR,2,".R"
 1860      022E5200 
 1861 2c70 504700BF 		_NEST
 1862 2c74 E51E0000 		_ADR	TOR
 1863 2c78 4D290000 		_ADR	STRR
 1864 2c7c BD1E0000 		_ADR	RFROM
 1865 2c80 611F0000 		_ADR	OVER
 1866 2c84 11200000 		_ADR	SUBB
 1867 2c88 852B0000 		_ADR	SPACS
 1868 2c8c BD2B0000 		_ADR	TYPEE
 1869 2c90 931C0000 		_UNNEST
 1870              	
 1871              	/*************************
 1872              	    U.R	 ( u +n -- )
 1873              	 	Display an unsigned 
 1874              		integer in n column, 
 1875              		right justified.
 1876              	***************************/
 1877 2c94 6C2C0000 		_HEADER UDOTR,3,"U.R"
 1877      03552E52 
 1878 2c9c 504700BF 		_NEST
 1879 2ca0 E51E0000 		_ADR	TOR
 1880 2ca4 6D280000 		_ADR	BDIGS
 1881 2ca8 D9280000 		_ADR	DIGS
 1882 2cac 2D290000 		_ADR	EDIGS
 1883 2cb0 BD1E0000 		_ADR	RFROM
 1884 2cb4 611F0000 		_ADR	OVER
 1885 2cb8 11200000 		_ADR	SUBB
 1886 2cbc 852B0000 		_ADR	SPACS
 1887 2cc0 BD2B0000 		_ADR	TYPEE
 1888 2cc4 931C0000 		_UNNEST
 1889              	
 1890              	/************************
 1891              	    U.	  ( u -- )
 1892              	 	Display an unsigned 
 1893              		integer in free format.
 1894              	***************************/
 1895 2cc8 982C0000 		_HEADER UDOT,2,"U."
 1895      02552E00 
 1896 2cd0 504700BF 		_NEST
 1897 2cd4 6D280000 		_ADR	BDIGS
 1898 2cd8 D9280000 		_ADR	DIGS
 1899 2cdc 2D290000 		_ADR	EDIGS
 1900 2ce0 692B0000 		_ADR	SPACE
 1901 2ce4 BD2B0000 		_ADR	TYPEE
ARM GAS  forth.s 			page 116


 1902 2ce8 931C0000 		_UNNEST
 1903              	
 1904              	/************************
 1905              	    .	   ( w -- )
 1906              	 	Display an integer 
 1907              		in free format, 
 1908              		preceeded by a space.
 1909              	**************************/
 1910 2cec CC2C0000 		_HEADER DOT,1,"."
 1910      012E00BF 
 1911 2cf4 504700BF 		_NEST
 1912 2cf8 59230000 		_ADR	BASE
 1913 2cfc 911E0000 		_ADR	AT
 1914 2d00 0B1E0000 		_DOLIT 10
 1914      0A000000 
 1915 2d08 A91F0000 		_ADR	XORR			// ?decimal
 1916 2d0c 4B1E0000 		_QBRAN	DOT1
 1916      1C2D0000 
 1917 2d14 D12C0000 		_ADR	UDOT
 1918 2d18 931C0000 		_UNNEST			// no,display unsigned
 1919              	DOT1:
 1920 2d1c 4D290000 	    _ADR	STRR
 1921 2d20 692B0000 		_ADR	SPACE
 1922 2d24 BD2B0000 		_ADR	TYPEE
 1923 2d28 931C0000 		_UNNEST			// yes, display signed
 1924              	
 1925              	/***********************
 1926              		.H ( w -- )
 1927              		display integer 
 1928              		in hexadecimal 
 1929              	*********************/
 1930 2d2c F02C0000 		_HEADER DOTH,2,".H"
 1930      022E4800 
 1931 2d34 504700BF 		_NEST 
 1932 2d38 59230000 		_ADR BASE
 1933 2d3c 911E0000 		_ADR AT 
 1934 2d40 4D1F0000 		_ADR SWAP
 1935 2d44 7D290000 		_ADR HEX
 1936 2d48 D12C0000 		_ADR UDOT 
 1937 2d4c 59230000 		_ADR BASE
 1938 2d50 7D1E0000 		_ADR STORE  
 1939 2d54 931C0000 		_UNNEST 
 1940              	
 1941              	
 1942              	/***********************
 1943              	    ?	   ( a -- )
 1944              	 	Display the contents
 1945              		in a memory cell.
 1946              	*************************/
 1947 2d58 302D0000 		_HEADER QUEST,1,"?"
 1947      013F00BF 
 1948 2d60 504700BF 		_NEST
 1949 2d64 911E0000 		_ADR	AT
 1950 2d68 F52C0000 		_ADR	DOT
 1951 2d6c 931C0000 		_UNNEST
 1952              	
 1953              	/**************
ARM GAS  forth.s 			page 117


 1954              	  Parsing
 1955              	***************/
 1956              	
 1957              	/*********************************************
 1958              	    parse	( b u c -- b u delta //  string> )
 1959              	 	Scan word delimited by c. 
 1960              		Return found string and its offset.
 1961              	hidden word used by PARSE
 1962              	**********************************************/
 1963              	PARS:
 1964 2d70 504700BF 		_NEST
 1965 2d74 63230000 		_ADR	TEMP
 1966 2d78 7D1E0000 		_ADR	STORE
 1967 2d7c 611F0000 		_ADR	OVER
 1968 2d80 E51E0000 		_ADR	TOR
 1969 2d84 3D1F0000 		_ADR	DUPP
 1970 2d88 4B1E0000 		_QBRAN	PARS8
 1970      842E0000 
 1971 2d90 6D200000 		_ADR	ONEM
 1972 2d94 63230000 		_ADR	TEMP
 1973 2d98 911E0000 		_ADR	AT
 1974 2d9c BD200000 		_ADR	BLANK
 1975 2da0 F1210000 		_ADR	EQUAL
 1976 2da4 4B1E0000 		_QBRAN	PARS3
 1976      F82D0000 
 1977 2dac E51E0000 		_ADR	TOR
 1978              	PARS1:
 1979 2db0 BD200000 		_ADR	BLANK
 1980 2db4 611F0000 		_ADR	OVER
 1981 2db8 B11E0000 		_ADR	CAT			// skip leading blanks 
 1982 2dbc 11200000 		_ADR	SUBB
 1983 2dc0 711F0000 		_ADR	ZLESS
 1984 2dc4 A5210000 		_ADR	INVER
 1985 2dc8 4B1E0000 		_QBRAN	PARS2
 1985      F42D0000 
 1986 2dd0 5D200000 		_ADR	ONEP
 1987 2dd4 2D1E0000 		_DONXT	PARS1
 1987      B02D0000 
 1988 2ddc BD1E0000 		_ADR	RFROM
 1989 2de0 2D1F0000 		_ADR	DROP
 1990 2de4 0B1E0000 		_DOLIT	0
 1990      00000000 
 1991 2dec 3D1F0000 		_ADR	DUPP
 1992 2df0 931C0000 		_UNNEST
 1993              	PARS2:
 1994 2df4 BD1E0000 		_ADR	RFROM
 1995              	PARS3:
 1996 2df8 611F0000 		_ADR	OVER
 1997 2dfc 4D1F0000 		_ADR	SWAP
 1998 2e00 E51E0000 		_ADR	TOR
 1999              	PARS4:
 2000 2e04 63230000 		_ADR	TEMP
 2001 2e08 911E0000 		_ADR	AT
 2002 2e0c 611F0000 		_ADR	OVER
 2003 2e10 B11E0000 		_ADR	CAT
 2004 2e14 11200000 		_ADR	SUBB			// scan for delimiter
 2005 2e18 63230000 		_ADR	TEMP
ARM GAS  forth.s 			page 118


 2006 2e1c 911E0000 		_ADR	AT
 2007 2e20 BD200000 		_ADR	BLANK
 2008 2e24 F1210000 		_ADR	EQUAL
 2009 2e28 4B1E0000 		_QBRAN	PARS5
 2009      342E0000 
 2010 2e30 711F0000 		_ADR	ZLESS
 2011              	PARS5:
 2012 2e34 4B1E0000 		_QBRAN	PARS6
 2012      582E0000 
 2013 2e3c 5D200000 		_ADR	ONEP
 2014 2e40 2D1E0000 		_DONXT	PARS4
 2014      042E0000 
 2015 2e48 3D1F0000 		_ADR	DUPP
 2016 2e4c E51E0000 		_ADR	TOR
 2017 2e50 5F1E0000 		_BRAN	PARS7
 2017      6C2E0000 
 2018              	PARS6:
 2019 2e58 BD1E0000 		_ADR	RFROM
 2020 2e5c 2D1F0000 		_ADR	DROP
 2021 2e60 3D1F0000 		_ADR	DUPP
 2022 2e64 5D200000 		_ADR	ONEP
 2023 2e68 E51E0000 		_ADR	TOR
 2024              	PARS7:
 2025 2e6c 611F0000 		_ADR	OVER
 2026 2e70 11200000 		_ADR	SUBB
 2027 2e74 BD1E0000 		_ADR	RFROM
 2028 2e78 BD1E0000 		_ADR	RFROM
 2029 2e7c 11200000 		_ADR	SUBB
 2030 2e80 931C0000 		_UNNEST
 2031              	PARS8:
 2032 2e84 611F0000 		_ADR	OVER
 2033 2e88 BD1E0000 		_ADR	RFROM
 2034 2e8c 11200000 		_ADR	SUBB
 2035 2e90 931C0000 		_UNNEST
 2036              	
 2037              	/************************************
 2038              	    PARSE	( c -- b u //  string> )
 2039              	 	Scan input stream and return 
 2040              		counted string delimited by c.
 2041              	************************************/
 2042 2e94 5C2D0000 		_HEADER PARSE,5,"PARSE"
 2042      05504152 
 2042      534500BF 
 2043 2ea0 504700BF 		_NEST
 2044 2ea4 E51E0000 		_ADR	TOR
 2045 2ea8 D1260000 		_ADR	TIB
 2046 2eac 8D230000 		_ADR	INN
 2047 2eb0 911E0000 		_ADR	AT
 2048 2eb4 01200000 		_ADR	PLUS			// current input buffer pointer
 2049 2eb8 A1230000 		_ADR	NTIB
 2050 2ebc 911E0000 		_ADR	AT
 2051 2ec0 8D230000 		_ADR	INN
 2052 2ec4 911E0000 		_ADR	AT
 2053 2ec8 11200000 		_ADR	SUBB			// remaining count
 2054 2ecc BD1E0000 		_ADR	RFROM
 2055 2ed0 712D0000 		_ADR	PARS
 2056 2ed4 8D230000 		_ADR	INN
ARM GAS  forth.s 			page 119


 2057 2ed8 79220000 		_ADR	PSTOR
 2058 2edc 931C0000 		_UNNEST
 2059              	
 2060              	/*******************************
 2061              	    .(	  ( -- )
 2062              	 	Output following string 
 2063              		up to next ) .
 2064              	******************************/
 2065 2ee0 982E0000 		_HEADER DOTPR,2,".("
 2065      022E2800 
 2066 2ee8 504700BF 		_NEST
 2067 2eec 0B1E0000 		_DOLIT	')'
 2067      29000000 
 2068 2ef4 A12E0000 		_ADR	PARSE
 2069 2ef8 BD2B0000 		_ADR	TYPEE
 2070 2efc 931C0000 		_UNNEST
 2071              	
 2072              	/************************
 2073              	    (	   ( -- )
 2074              	 	Ignore following 
 2075              		string up to next )
 2076              		A comment.
 2077              	************************/
 2078 2f00 E42E0000 		_HEADER PAREN,1,"("
 2078      012800BF 
 2079 2f08 504700BF 		_NEST
 2080 2f0c 0B1E0000 		_DOLIT	')'
 2080      29000000 
 2081 2f14 A12E0000 		_ADR	PARSE
 2082 2f18 4D210000 		_ADR	DDROP
 2083 2f1c 931C0000 		_UNNEST
 2084              	
 2085              	/*******************
 2086              	    \	   ( -- )
 2087              	 	Ignore following 
 2088              		text till the 
 2089              		end of line.
 2090              	********************/
 2091 2f20 042F0000 		_HEADER BKSLA,1,"\\"
 2091      015C00BF 
 2092 2f28 504700BF 		_NEST
 2093 2f2c A1230000 		_ADR	NTIB
 2094 2f30 911E0000 		_ADR	AT
 2095 2f34 8D230000 		_ADR	INN
 2096 2f38 7D1E0000 		_ADR	STORE
 2097 2f3c 931C0000 		_UNNEST
 2098              	
 2099              	/******************************
 2100              	    CHAR	( -- c )
 2101              	 	Parse next word and
 2102              		return its first character.
 2103              	*******************************/
 2104 2f40 242F0000 		_HEADER CHAR,4,"CHAR"
 2104      04434841 
 2104      520000BF 
 2105 2f4c 504700BF 		_NEST
 2106 2f50 BD200000 		_ADR	BLANK
ARM GAS  forth.s 			page 120


 2107 2f54 A12E0000 		_ADR	PARSE
 2108 2f58 2D1F0000 		_ADR	DROP
 2109 2f5c B11E0000 		_ADR	CAT
 2110 2f60 931C0000 		_UNNEST
 2111              	
 2112              	/**********************************
 2113              	    WORD	( c -- a //  string> )
 2114              	 	Parse a word from input stream
 2115              		and copy it to code dictionary.
 2116              	***********************************/
 2117 2f64 442F0000 		_HEADER WORDD,4,"WORD"
 2117      04574F52 
 2117      440000BF 
 2118 2f70 504700BF 		_NEST
 2119 2f74 A12E0000 		_ADR	PARSE
 2120 2f78 99260000 		_ADR	HERE
 2121 2f7c 9D200000 		_ADR	CELLP
 2122 2f80 A1270000 		_ADR	PACKS
 2123 2f84 931C0000 		_UNNEST
 2124              	
 2125              	/********************************
 2126              	    TOKEN	( -- a //  string> )
 2127              	 	Parse a word from input 
 2128              		stream and copy it to 
 2129              		name dictionary.
 2130              	*********************************/
 2131 2f88 682F0000 		_HEADER TOKEN,5,"TOKEN"
 2131      05544F4B 
 2131      454E00BF 
 2132 2f94 504700BF 		_NEST
 2133 2f98 BD200000 		_ADR	BLANK
 2134 2f9c 712F0000 		_ADR	WORDD
 2135 2fa0 3D310000 		_ADR	UPPER 
 2136 2fa4 931C0000 		_UNNEST
 2137              	
 2138              	/**********************
 2139              	  Dictionary search
 2140              	***********************/
 2141              	
 2142              	/*************************
 2143              	    NAME>	( na -- ca )
 2144              	 	Return a code address
 2145              		given a name address.
 2146              	**************************/
 2147 2fa8 8C2F0000 		_HEADER NAMET,5,"NAME>"
 2147      054E414D 
 2147      453E00BF 
 2148 2fb4 504700BF 		_NEST
 2149 2fb8 C1220000 		_ADR	COUNT
 2150 2fbc 0B1E0000 		_DOLIT	0x1F
 2150      1F000000 
 2151 2fc4 811F0000 		_ADR	ANDD
 2152 2fc8 01200000 		_ADR	PLUS
 2153 2fcc E5250000 		_ADR	ALGND
 2154 2fd0 931C0000 		_UNNEST
 2155              	
 2156              	/***************************************
ARM GAS  forth.s 			page 121


 2157              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2158              	 	Compare u bytes in two strings. 
 2159              		Return 0 if identical.
 2160              	
 2161              	  Picatout 2020-12-01, 
 2162              	    Because of problem with .align 
 2163              		directive that doesn't fill 
 2164              		with zero's I had to change 
 2165              		the "SAME?" and "FIND" 
 2166              	 	words  to do a byte by byte comparison. 
 2167              	****************************************/
 2168 2fd4 AC2F0000 		_HEADER SAMEQ,5,"SAME?"
 2168      0553414D 
 2168      453F00BF 
 2169 2fe0 504700BF 		_NEST
 2170 2fe4 E51E0000 		_ADR	TOR
 2171 2fe8 5F1E0000 		_BRAN	SAME2
 2171      2C300000 
 2172              	SAME1:
 2173 2ff0 611F0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2174 2ff4 D11E0000 		_ADR	RAT   // a1 a2 a1 u 
 2175 2ff8 01200000 		_ADR	PLUS  // a1 a2 a1+u 
 2176 2ffc B11E0000 		_ADR	CAT	   // a1 a2 c1    		
 2177 3000 611F0000 		_ADR	OVER  // a1 a2 c1 a2 
 2178 3004 D11E0000 		_ADR	RAT    
 2179 3008 01200000 		_ADR	PLUS    
 2180 300c B11E0000 		_ADR	CAT	  // a1 a2 c1 c2
 2181 3010 11200000 		_ADR	SUBB  
 2182 3014 11210000 		_ADR	QDUP
 2183 3018 4B1E0000 		_QBRAN	SAME2
 2183      2C300000 
 2184 3020 BD1E0000 		_ADR	RFROM
 2185 3024 2D1F0000 		_ADR	DROP
 2186 3028 931C0000 		_UNNEST	// strings not equal
 2187              	SAME2:
 2188 302c 2D1E0000 		_DONXT	SAME1
 2188      F02F0000 
 2189 3034 0B1E0000 		_DOLIT	0
 2189      00000000 
 2190 303c 931C0000 		_UNNEST	// strings equal
 2191              	
 2192              	/***********************************
 2193              	    FIND	( a na -- ca na | a F )
 2194              	 	Search a vocabulary for a string.
 2195              		Return ca and na if succeeded.
 2196              	hidden word used by NAME?
 2197              	
 2198              	  Picatout 2020-12-01,  
 2199              		 Modified from original. 
 2200              	   See comment for word "SAME?" 
 2201              	************************************/
 2202              	FIND:
 2203 3040 504700BF 		_NEST
 2204 3044 4D1F0000 		_ADR	SWAP			// na a	
 2205 3048 C1220000 		_ADR	COUNT			// na a+1 count
 2206 304c 3D1F0000 		_ADR	DUPP 
 2207 3050 63230000 		_ADR	TEMP
ARM GAS  forth.s 			page 122


 2208 3054 7D1E0000 		_ADR	STORE			// na a+1 count 
 2209 3058 E51E0000 		_ADR  TOR		// na a+1  R: count  
 2210 305c 4D1F0000 		_ADR	SWAP			// a+1 na
 2211              	FIND1:
 2212 3060 3D1F0000 		_ADR	DUPP			// a+1 na na
 2213 3064 4B1E0000 		_QBRAN	FIND6	// end of vocabulary
 2213      B8300000 
 2214 306c 3D1F0000 		_ADR	DUPP			// a+1 na na
 2215 3070 B11E0000 		_ADR	CAT			// a+1 na name1
 2216 3074 0B1E0000 		_DOLIT	MASKK
 2216      1FFFFFFF 
 2217 307c 811F0000 		_ADR	ANDD
 2218 3080 D11E0000 		_ADR	RAT			// a+1 na name1 count 
 2219 3084 A91F0000 		_ADR	XORR			// a+1 na,  same length?
 2220 3088 4B1E0000 		_QBRAN	FIND2
 2220      A0300000 
 2221 3090 AD200000 		_ADR	CELLM			// a+1 la
 2222 3094 911E0000 		_ADR	AT			// a+1 next_na
 2223 3098 5F1E0000 		_BRAN	FIND1			// try next word
 2223      60300000 
 2224              	FIND2:   
 2225 30a0 5D200000 		_ADR	ONEP			// a+1 na+1
 2226 30a4 63230000 		_ADR	TEMP
 2227 30a8 911E0000 		_ADR	AT			// a+1 na+1 count
 2228 30ac E12F0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2229              	FIND3:	
 2230 30b0 5F1E0000 		_BRAN	FIND4
 2230      D0300000 
 2231              	FIND6:	
 2232 30b8 BD1E0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2233 30bc 2D1F0000 		_ADR	DROP			// a+1 0
 2234 30c0 4D1F0000 		_ADR	SWAP			// 0 a+1
 2235 30c4 6D200000 		_ADR	ONEM			// 0 a
 2236 30c8 4D1F0000 		_ADR	SWAP			// a 0 
 2237 30cc 931C0000 		_UNNEST			// return without a match
 2238              	FIND4:	
 2239 30d0 4B1E0000 		_QBRAN	FIND5			// a+1 na+1
 2239      EC300000 
 2240 30d8 6D200000 		_ADR	ONEM			// a+1 na
 2241 30dc AD200000 		_ADR	CELLM			// a+4 la
 2242 30e0 911E0000 		_ADR	AT			// a+1 next_na
 2243 30e4 5F1E0000 		_BRAN	FIND1			// compare next name
 2243      60300000 
 2244              	FIND5:	
 2245 30ec BD1E0000 		_ADR	RFROM			// a+1 na+1 count
 2246 30f0 2D1F0000 		_ADR	DROP			// a+1 na+1
 2247 30f4 4D1F0000 		_ADR	SWAP			// na+1 a+1
 2248 30f8 2D1F0000 		_ADR	DROP			// na+1
 2249 30fc 6D200000 		_ADR	ONEM			// na
 2250 3100 3D1F0000 		_ADR	DUPP			// na na
 2251 3104 B52F0000 		_ADR	NAMET			// na ca
 2252 3108 4D1F0000 		_ADR	SWAP			// ca na
 2253 310c 931C0000 		_UNNEST			//  return with a match
 2254              	
 2255              	/********************************
 2256              	    NAME?	( a -- ca na | a F )
 2257              	 	Search all context vocabularies 
ARM GAS  forth.s 			page 123


 2258              		for a string.
 2259              	***********************************/
 2260 3110 D82F0000 		_HEADER NAMEQ,5,"NAME?"
 2260      054E414D 
 2260      453F00BF 
 2261 311c 504700BF 		_NEST
 2262 3120 E1230000 		_ADR	CNTXT
 2263 3124 911E0000 		_ADR	AT
 2264 3128 41300000 		_ADR	FIND
 2265 312c 931C0000 		_UNNEST
 2266              	
 2267              	/********************
 2268              	  console input
 2269              	********************/
 2270              	
 2271              	/***********************
 2272              		UPPER (cstring -- cstring )
 2273              		convert to upper case in situ
 2274              	*******************************/
 2275 3130 14310000 		_HEADER UPPER,5,"UPPER"
 2275      05555050 
 2275      455200BF 
 2276 313c 504700BF 		_NEST 
 2277 3140 3D1F0000 		_ADR DUPP 
 2278 3144 E51E0000 		_ADR TOR 
 2279 3148 C1220000 		_ADR COUNT
 2280 314c 0B1E0000 		_DOLIT 0x1f
 2280      1F000000 
 2281 3154 811F0000 		_ADR ANDD
 2282 3158 E51E0000 		_ADR TOR 
 2283 315c 5F1E0000 		_BRAN 3f
 2283      B0310000 
 2284 3164 3D1F0000 	1:  _ADR DUPP 
 2285 3168 C1220000 		_ADR COUNT 
 2286 316c 3D1F0000 		_ADR DUPP 
 2287 3170 0B1E0000 		_DOLIT 'a'-1
 2287      60000000 
 2288 3178 39220000 		_ADR GREAT
 2289 317c 4B1E0000 		_QBRAN 2f 
 2289      A8310000 
 2290 3184 3D1F0000 		_ADR DUPP 
 2291 3188 0B1E0000 		_DOLIT 'z'+1 
 2291      7B000000 
 2292 3190 21220000 		_ADR LESS 
 2293 3194 4B1E0000 		_QBRAN 2f 
 2293      A8310000 
 2294 319c 0B1E0000 		_DOLIT 0x5f  
 2294      5F000000 
 2295 31a4 811F0000 		_ADR ANDD
 2296 31a8 25210000 	2:	_ADR ROT
 2297 31ac 9D1E0000 		_ADR CSTOR
 2298 31b0 2D1E0000 	3:  _DONXT 1b
 2298      64310000 
 2299 31b8 2D1F0000 		_ADR DROP 
 2300 31bc BD1E0000 		_ADR RFROM
 2301 31c0 931C0000 		_UNNEST 
 2302              	
ARM GAS  forth.s 			page 124


 2303              	/**************************************
 2304              	   BKSP  ( bot eot cur -- bot eot cur )
 2305              	   Move cursor left by one character.
 2306              	hidden word used by KTAP
 2307              	***************************************/
 2308              	BKSP:
 2309 31c4 504700BF 		_NEST
 2310 31c8 E51E0000 		_ADR	TOR
 2311 31cc 611F0000 		_ADR	OVER
 2312 31d0 BD1E0000 		_ADR	RFROM
 2313 31d4 4D1F0000 		_ADR	SWAP
 2314 31d8 611F0000 		_ADR	OVER
 2315 31dc A91F0000 		_ADR	XORR
 2316 31e0 4B1E0000 		_QBRAN	BACK1
 2316      0C320000 
 2317 31e8 0B1E0000 		_DOLIT	BKSPP
 2317      08000000 
 2318 31f0 151D0000 		_ADR	EMIT
 2319 31f4 6D200000 		_ADR	ONEM
 2320 31f8 BD200000 		_ADR	BLANK
 2321 31fc 151D0000 		_ADR	EMIT
 2322 3200 0B1E0000 		_DOLIT	BKSPP
 2322      08000000 
 2323 3208 151D0000 		_ADR	EMIT
 2324              	BACK1:
 2325 320c 931C0000 		  _UNNEST
 2326              	
 2327              	/****************************************
 2328              	   TAP	 ( bot eot cur c -- bot eot cur )
 2329              	   Accept and echo the key stroke 
 2330              	   and bump the cursor.
 2331              	hidden word used by KTAP 
 2332              	****************************************/
 2333              	TAP:
 2334 3210 504700BF 		_NEST
 2335 3214 3D1F0000 		_ADR	DUPP
 2336 3218 151D0000 		_ADR	EMIT
 2337 321c 611F0000 		_ADR	OVER
 2338 3220 9D1E0000 		_ADR	CSTOR
 2339 3224 5D200000 		_ADR	ONEP
 2340 3228 931C0000 		_UNNEST
 2341              	
 2342              	
 2343              	/*******************************************
 2344              	    kTAP	( bot eot cur c -- bot eot cur )
 2345              	 	Process a key stroke, CR or backspace.
 2346              	hidden word used by ACCEPT 
 2347              	*******************************************/
 2348              	KTAP:
 2349              	TTAP:
 2350 322c 504700BF 		_NEST
 2351 3230 3D1F0000 		_ADR	DUPP
 2352 3234 0B1E0000 		_DOLIT	CRR
 2352      0D000000 
 2353 323c A91F0000 		_ADR	XORR
 2354 3240 4B1E0000 		_QBRAN  KTAP2
 2354      70320000 
ARM GAS  forth.s 			page 125


 2355 3248 0B1E0000 		_DOLIT	BKSPP
 2355      08000000 
 2356 3250 A91F0000 		_ADR	XORR
 2357 3254 4B1E0000 		_QBRAN	KTAP1
 2357      68320000 
 2358 325c BD200000 		_ADR	BLANK
 2359 3260 11320000 		_ADR	TAP
 2360 3264 931C0000 		_UNNEST
 2361              	//	.word	0			// patch
 2362              	KTAP1:
 2363 3268 C5310000 		_ADR	BKSP
 2364 326c 931C0000 		_UNNEST
 2365              	KTAP2:
 2366 3270 2D1F0000 		_ADR	DROP
 2367 3274 4D1F0000 		_ADR	SWAP
 2368 3278 2D1F0000 		_ADR	DROP
 2369 327c 3D1F0000 		_ADR	DUPP
 2370 3280 931C0000 		_UNNEST
 2371              	
 2372              	/************************************
 2373              	    ACCEPT	( b u -- b u )
 2374              	 	Accept characters to input 
 2375              		buffer. Return with actual count.
 2376              	*************************************/
 2377 3284 34310000 		_HEADER ACCEP,6,"ACCEPT"
 2377      06414343 
 2377      45505400 
 2378 3290 504700BF 		_NEST
 2379 3294 611F0000 		_ADR	OVER
 2380 3298 01200000 		_ADR	PLUS
 2381 329c 611F0000 		_ADR	OVER
 2382              	ACCP1:
 2383 32a0 75210000 		_ADR	DDUP
 2384 32a4 A91F0000 		_ADR	XORR
 2385 32a8 4B1E0000 		_QBRAN	ACCP4
 2385      E8320000 
 2386 32b0 F11C0000 		_ADR	KEY
 2387 32b4 3D1F0000 		_ADR	DUPP
 2388 32b8 BD200000 		_ADR	BLANK
 2389 32bc 0B1E0000 		_DOLIT 127
 2389      7F000000 
 2390 32c4 6D240000 		_ADR	WITHI
 2391 32c8 4B1E0000 		_QBRAN	ACCP2
 2391      DC320000 
 2392 32d0 11320000 		_ADR	TAP
 2393 32d4 5F1E0000 		_BRAN	ACCP3
 2393      E0320000 
 2394              	ACCP2:
 2395 32dc 2D320000 		_ADR	KTAP
 2396              	ACCP3:	  
 2397 32e0 5F1E0000 		_BRAN	ACCP1
 2397      A0320000 
 2398              	ACCP4:
 2399 32e8 2D1F0000 		_ADR	DROP
 2400 32ec 611F0000 		_ADR	OVER
 2401 32f0 11200000 		_ADR	SUBB
 2402 32f4 931C0000 		_UNNEST
ARM GAS  forth.s 			page 126


 2403              	
 2404              	/*****************************
 2405              	    QUERY	( -- )
 2406              	 	Accept input stream 
 2407              		to terminal input buffer.
 2408              	******************************/
 2409 32f8 88320000 		_HEADER QUERY,5,"QUERY"
 2409      05515545 
 2409      525900BF 
 2410 3304 504700BF 		_NEST
 2411 3308 D1260000 		_ADR	TIB
 2412 330c 0B1E0000 		_DOLIT 80
 2412      50000000 
 2413 3314 91320000 		_ADR	ACCEP
 2414 3318 A1230000 		_ADR	NTIB
 2415 331c 7D1E0000 		_ADR	STORE
 2416 3320 2D1F0000 		_ADR	DROP
 2417 3324 0B1E0000 		_DOLIT	0
 2417      00000000 
 2418 332c 8D230000 		_ADR	INN
 2419 3330 7D1E0000 		_ADR	STORE
 2420 3334 931C0000 		_UNNEST
 2421              	
 2422              	/********************
 2423              	  Error handling
 2424              	********************/
 2425              	
 2426              	/*********************
 2427              	    ABORT	( a -- )
 2428              	 	Reset data stack 
 2429              		and jump to QUIT.
 2430              	**********************/
 2431 3338 FC320000 		_HEADER ABORT,5,"ABORT"
 2431      0541424F 
 2431      525400BF 
 2432 3344 504700BF 		_NEST
 2433              	ABORT1:
 2434 3348 692B0000 		_ADR	SPACE
 2435 334c C1220000 		_ADR	COUNT
 2436 3350 BD2B0000 		_ADR	TYPEE
 2437 3354 0B1E0000 		_DOLIT	0X3F
 2437      3F000000 
 2438 335c 151D0000 		_ADR	EMIT
 2439 3360 F12B0000 		_ADR	CR
 2440 3364 CD340000 		_ADR	PRESE
 2441 3368 5F1E0000 		_BRAN	QUIT
 2441      EC340000 
 2442              	
 2443              	/*******************************
 2444              	    _abort"	( f -- )
 2445              	 	Run time routine of ABORT"
 2446              		Abort with a message.
 2447              	hidden used by compiler 
 2448              	********************************/
 2449              	ABORQ:
 2450 3370 504700BF 		_NEST
 2451 3374 112C0000 		_ADR	DOSTR
ARM GAS  forth.s 			page 127


 2452 3378 4D1F0000 		_ADR	SWAP 
 2453 337c 4B1E0000 		_QBRAN	1f	// text flag
 2453      8C330000 
 2454 3384 5F1E0000 		_BRAN	ABORT1
 2454      48330000 
 2455              	1:
 2456 338c 2D1F0000 		_ADR	DROP
 2457 3390 931C0000 		_UNNEST			// drop error
 2458              	
 2459              	/************************
 2460              	  The text interpreter
 2461              	************************/
 2462              	
 2463              	/***************************
 2464              	    $INTERPRET  ( a -- )
 2465              	 	Interpret a word. 
 2466              		If failed, try to 
 2467              		convert it to an integer.
 2468              	******************************/
 2469 3394 3C330000 		_HEADER INTER,10,"$INTERPRET"
 2469      0A24494E 
 2469      54455250 
 2469      52455400 
 2470 33a4 504700BF 		_NEST
 2471 33a8 1D310000 		_ADR	NAMEQ
 2472 33ac 11210000 		_ADR	QDUP	// ?defined
 2473 33b0 4B1E0000 		_QBRAN	INTE1
 2473      E4330000 
 2474 33b8 911E0000 		_ADR	AT
 2475 33bc 0B1E0000 		_DOLIT	COMPO
 2475      40000000 
 2476 33c4 811F0000 		_ADR	ANDD	// ?compile only lexicon bits
 2477 33c8 71330000 		_ABORQ	13," compile only"
 2477      0D20636F 
 2477      6D70696C 
 2477      65206F6E 
 2477      6C7900BF 
 2478 33dc 211E0000 		_ADR	EXECU
 2479 33e0 931C0000 		_UNNEST			// execute defined word
 2480              	INTE1:
 2481 33e4 651C0000 		_ADR	NUMBER 
 2482 33e8 4B1E0000 		_QBRAN	INTE2
 2482      F4330000 
 2483 33f0 931C0000 		_UNNEST
 2484              	INTE2:
 2485 33f4 45330000 		_ADR	ABORT	// error
 2486              	
 2487              	/******************************
 2488              	    [	   ( -- )
 2489              	 	Start the text interpreter.
 2490              	*******************************/
 2491 33f8 98330000 		_HEADER LBRAC,1,"["
 2491      015B00BF 
 2492 3400 504700BF 		_NEST
 2493 3404 0B1E0000 		_DOLIT	INTER
 2493      A4330000 
 2494 340c B5230000 		_ADR	TEVAL
ARM GAS  forth.s 			page 128


 2495 3410 7D1E0000 		_ADR	STORE
 2496 3414 931C0000 		_UNNEST
 2497              	
 2498              	/**********************
 2499              	    .OK	 ( -- )
 2500              	 	Display "ok" only 
 2501              		while interpreting.
 2502              	************************/
 2503 3418 FC330000 		_HEADER DOTOK,3,".OK"
 2503      032E4F4B 
 2504 3420 504700BF 		_NEST
 2505 3424 0B1E0000 		_DOLIT	INTER
 2505      A4330000 
 2506 342c B5230000 		_ADR	TEVAL
 2507 3430 911E0000 		_ADR	AT
 2508 3434 F1210000 		_ADR	EQUAL
 2509 3438 4B1E0000 		_QBRAN	DOTO1
 2509      48340000 
 2510 3440 592C0000 		_DOTQP	3," ok"
 2510      03206F6B 
 2511              	DOTO1:
 2512 3448 F12B0000 		_ADR	CR
 2513 344c 931C0000 		_UNNEST
 2514              	
 2515              	/*************************
 2516              	    ?STACK	( -- )
 2517              	 	Abort if the data 
 2518              		stack underflows.
 2519              	************************/
 2520 3450 1C340000 		_HEADER QSTAC,6,"?STACK"
 2520      063F5354 
 2520      41434B00 
 2521 345c 504700BF 		_NEST
 2522 3460 4D260000 		_ADR	DEPTH
 2523 3464 711F0000 		_ADR	ZLESS	// check only for underflow
 2524 3468 71330000 		_ABORQ	9,"underflow"
 2524      09756E64 
 2524      6572666C 
 2524      6F7700BF 
 2525 3478 931C0000 		_UNNEST
 2526              	
 2527              	/*******************
 2528              	    EVAL	( -- )
 2529              	 	Interpret the 
 2530              		input stream.
 2531              	*******************/
 2532 347c 54340000 		_HEADER EVAL,4,"EVAL"
 2532      04455641 
 2532      4C0000BF 
 2533 3488 504700BF 		_NEST
 2534              	EVAL1:
 2535 348c 952F0000 	    _ADR	TOKEN
 2536 3490 3D1F0000 		_ADR	DUPP
 2537 3494 B11E0000 		_ADR	CAT	// ?input stream empty
 2538 3498 4B1E0000 		_QBRAN	EVAL2
 2538      B4340000 
 2539 34a0 B5230000 		_ADR	TEVAL
ARM GAS  forth.s 			page 129


 2540 34a4 E9260000 		_ADR	ATEXE
 2541 34a8 5D340000 		_ADR	QSTAC	// evaluate input, check stack
 2542 34ac 5F1E0000 		_BRAN	EVAL1
 2542      8C340000 
 2543              	EVAL2:
 2544 34b4 2D1F0000 		_ADR	DROP
 2545 34b8 21340000 		_ADR	DOTOK
 2546 34bc 931C0000 		_UNNEST	// prompt
 2547              	
 2548              	/**********************************
 2549              	    PRESET	( -- )
 2550              	 	Reset data stack pointer 
 2551              		and the terminal input buffer.
 2552              	**********************************/
 2553 34c0 80340000 		_HEADER PRESE,6,"PRESET"
 2553      06505245 
 2553      53455400 
 2554 34cc 504700BF 		_NEST 
 2555 34d0 0B1E0000 		_DOLIT SPP 
 2555      00FF0120 
 2556 34d8 091F0000 		_ADR SPSTOR 
 2557 34dc 931C0000 		_UNNEST 
 2558              	
 2559              	/*********************
 2560              	    QUIT	( -- )
 2561              	 	Reset return stack 
 2562              		pointer and start 
 2563              		text interpreter.
 2564              	***********************/
 2565 34e0 C4340000 		_HEADER QUIT,4,"QUIT"
 2565      04515549 
 2565      540000BF 
 2566 34ec 0B1E0000 		_DOLIT RPP 
 2566      80FF0120 
 2567 34f4 F91E0000 		_ADR RPSTOR 
 2568              	QUIT1:
 2569 34f8 01340000 		_ADR	LBRAC			// start interpretation
 2570              	QUIT2:
 2571 34fc 05330000 		_ADR	QUERY			// get input
 2572 3500 89340000 		_ADR	EVAL
 2573 3504 5F1E0000 		_BRAN	QUIT2	// continue till error
 2573      FC340000 
 2574              	
 2575              	/***************************
 2576              		FORGET ( <string> -- )
 2577              		forget all definition 
 2578              		starting at <string>
 2579              	****************************/
 2580 350c E4340000 		_HEADER FORGET,6,"FORGET"
 2580      06464F52 
 2580      47455400 
 2581 3518 504700BF 		_NEST 
 2582 351c 952F0000 		_ADR TOKEN 
 2583 3520 3D1F0000 		_ADR DUPP 
 2584 3524 4B1E0000 		_QBRAN 9f 
 2584      60350000 
 2585 352c 1D310000 		_ADR NAMEQ // ( a -- ca na | a 0 )
ARM GAS  forth.s 			page 130


 2586 3530 11210000 		_ADR QDUP 
 2587 3534 4B1E0000 		_QBRAN 8f
 2587      5C350000 
 2588 353c AD200000 		_ADR CELLM // ( ca la )
 2589 3540 3D1F0000 		_ADR DUPP 
 2590 3544 F5230000 		_ADR CPP   
 2591 3548 7D1E0000 		_ADR STORE
 2592 354c 911E0000 		_ADR AT 
 2593 3550 1D240000 		_ADR LAST 
 2594 3554 7D1E0000 		_ADR STORE
 2595 3558 B53A0000 		_ADR OVERT 
 2596 355c 2D1F0000 	8:  _ADR DROP 
 2597 3560 931C0000 	9:	_UNNEST 
 2598              	
 2599              		.p2align 2 
 2600              	
 2601              	/*****************
 2602              	  The compiler
 2603              	******************/
 2604              	
 2605              	/**************************************
 2606              	    '	   ( -- ca )
 2607              	 	Search context vocabularies 
 2608              		for the next word in input stream.
 2609              	***************************************/
 2610 3564 10350000 		_HEADER TICK,1,"'"
 2610      012700BF 
 2611 356c 504700BF 		_NEST
 2612 3570 952F0000 		_ADR	TOKEN
 2613 3574 1D310000 		_ADR	NAMEQ	// ?defined
 2614 3578 4B1E0000 		_QBRAN	TICK1
 2614      84350000 
 2615 3580 931C0000 		_UNNEST	// yes, push code address
 2616              	TICK1:	
 2617 3584 45330000 		_ADR ABORT	// no, error
 2618              	
 2619              	/***********************
 2620              	    ALLOT	( n -- )
 2621              	 	Allocate n bytes to 
 2622              		the ram area.
 2623              	************************/
 2624 3588 68350000 		_HEADER ALLOT,5,"ALLOT"
 2624      05414C4C 
 2624      4F5400BF 
 2625 3594 504700BF 		_NEST
 2626 3598 F5230000 		_ADR	CPP
 2627 359c 79220000 		_ADR	PSTOR
 2628 35a0 931C0000 		_UNNEST			// adjust code pointer
 2629              	
 2630              	/******************************
 2631              	    ,	   ( w -- )
 2632              	 	Compile an integer 
 2633              		into the code dictionary.
 2634              	******************************/
 2635 35a4 8C350000 		_HEADER COMMA,1,","
 2635      012C00BF 
 2636 35ac 504700BF 		_NEST
ARM GAS  forth.s 			page 131


 2637 35b0 99260000 		_ADR	HERE
 2638 35b4 3D1F0000 		_ADR	DUPP
 2639 35b8 9D200000 		_ADR	CELLP	// cell boundary
 2640 35bc F5230000 		_ADR	CPP
 2641 35c0 7D1E0000 		_ADR	STORE
 2642 35c4 7D1E0000 		_ADR	STORE
 2643 35c8 931C0000 		_UNNEST	// adjust code pointer, compile
 2644              		.p2align 2 
 2645              	
 2646              	/************************************
 2647              	    [COMPILE]   ( -- //  string> )
 2648              	 	Compile the next immediate word 
 2649              		into code dictionary.
 2650              	*************************************/
 2651 35cc A8350000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2651      895B434F 
 2651      4D50494C 
 2651      455D00BF 
 2652 35dc 504700BF 		_NEST
 2653 35e0 6D350000 		_ADR	TICK
 2654 35e4 AD350000 		_ADR	COMMA
 2655 35e8 931C0000 		_UNNEST
 2656              	
 2657              	/****************************
 2658              	    COMPILE	( -- )
 2659              	 	Compile the next address 
 2660              		in colon list to code 
 2661              		dictionary.
 2662              	*******************************/
 2663 35ec D0350000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2663      47434F4D 
 2663      50494C45 
 2664 35f8 504700BF 		_NEST
 2665 35fc BD1E0000 		_ADR	RFROM
 2666 3600 3D1F0000 		_ADR	DUPP 
 2667 3604 911E0000 		_ADR	AT
 2668 3608 0B1E0000 		_DOLIT 1 
 2668      01000000 
 2669 3610 951F0000 		_ADR	ORR 
 2670 3614 AD350000 		_ADR	COMMA 
 2671 3618 9D200000 		_ADR	CELLP 
 2672 361c E51E0000 		_ADR	TOR 
 2673 3620 931C0000 		_UNNEST	// adjust return address
 2674              	
 2675              	/*************************
 2676              	    LITERAL	( w -- )
 2677              	 	Compile tos to code 
 2678              		dictionary as an 
 2679              		integer literal.
 2680              	***************************/
 2681 3624 F0350000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2681      874C4954 
 2681      4552414C 
 2682 3630 504700BF 		_NEST
 2683 3634 0B1E0000 		_COMPI	DOLIT
 2683      0A1E0000 
 2683      113B0000 
ARM GAS  forth.s 			page 132


 2684 3640 AD350000 		_ADR	COMMA
 2685 3644 931C0000 		_UNNEST
 2686              	
 2687              	/********************
 2688              	    $,"	( -- )
 2689              	 	Compile a literal 
 2690              		string up to next " .
 2691              	hidden word 
 2692              	************************/
 2693              	STRCQ:
 2694 3648 504700BF 		_NEST
 2695 364c 0B1E0000 		_DOLIT -4
 2695      FCFFFFFF 
 2696 3654 F5230000 		_ADR	CPP
 2697 3658 79220000 		_ADR	PSTOR
 2698 365c 0B1E0000 		_DOLIT	'\"'
 2698      22000000 
 2699 3664 712F0000 		_ADR	WORDD			// move word to code dictionary
 2700 3668 C1220000 		_ADR	COUNT
 2701 366c 01200000 		_ADR	PLUS
 2702 3670 E5250000 		_ADR	ALGND			// calculate aligned end of string
 2703 3674 F5230000 		_ADR	CPP
 2704 3678 7D1E0000 		_ADR	STORE
 2705 367c 931C0000 		_UNNEST 			// adjust the code pointer
 2706              	
 2707              	/*******************
 2708              	   Structures
 2709              	*******************/
 2710              	
 2711              	/*************************
 2712              	    FOR	 ( -- a )
 2713              	 	Start a FOR-NEXT loop 
 2714              		structure in a colon 
 2715              		definition.
 2716              	**************************/
 2717 3680 28360000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2717      C3464F52 
 2718 3688 504700BF 		_NEST
 2719 368c 0B1E0000 		_COMPI	TOR
 2719      E41E0000 
 2719      113B0000 
 2720 3698 99260000 		_ADR	HERE
 2721 369c 931C0000 		_UNNEST
 2722              	
 2723              	/********************************
 2724              		DO ( limit start -- )
 2725              		initialise a DO...LOOP 
 2726              		or DO...+LOOP 
 2727              	********************************/
 2728 36a0 84360000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 2728      C2444F00 
 2729 36a8 504700BF 		_NEST
 2730 36ac 0B1E0000 		_COMPI SWAP
 2730      4C1F0000 
 2730      113B0000 
 2731 36b8 0B1E0000 		_COMPI TOR 
 2731      E41E0000 
ARM GAS  forth.s 			page 133


 2731      113B0000 
 2732 36c4 0B1E0000 		_COMPI TOR 
 2732      E41E0000 
 2732      113B0000 
 2733 36d0 99260000 		_ADR HERE 
 2734 36d4 931C0000 		_UNNEST 
 2735              	
 2736              	DOPLOOP: // ( n -- R: counter limit )
 2737 36d8 B8E80300 		ldmfd RSP!,{T0,T1}
 2738 36dc 3044     		add T0,TOS 
 2739 36de 28E90300 		stmfd RSP!,{T0,T1}
 2740 36e2 8842     		cmp T0,T1 
 2741 36e4 05D4     		bmi 9f 
 2742 36e6 08F10808 		add RSP,#8
 2743 36ea 0CF1040C 		add IP,#4
 2744 36ee FEF7CDBA 		_NEXT 
 2745 36f2 DCF800C0 	9:  ldr IP,[IP]
 2746 36f6 FEF7C9BA 		_NEXT 
 2747              		
 2748              	/***************************
 2749              		+LOOP ( a -- )
 2750              		increment counter 
 2751              		end loop if countr>limit
 2752              	****************************/
 2753 36fa A4360000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 2753      C52B4C4F 
 2753      4F50
 2754 3704 504700BF 		_NEST 
 2755 3708 0B1E0000 		_COMPI DOPLOOP 
 2755      D8360000 
 2755      113B0000 
 2756 3714 AD350000 		_ADR COMMA
 2757 3718 931C0000 		_UNNEST 
 2758              	
 2759              	DOLOOP: // ( -- R: counter limit )
 2760 371c D8F80000 		ldr T0,[RSP]
 2761 3720 00F10100 		add T0,#1
 2762 3724 C8F80000 		str T0,[RSP]
 2763 3728 D8F80410 		ldr T1,[RSP,#4]
 2764 372c 8842     		cmp T0,T1 
 2765 372e 05D4     		bmi 9f
 2766 3730 08F10808 		add RSP,#8  // counter and limit  
 2767 3734 0CF1040C 		add IP,IP,#4 // skip loop address 
 2768 3738 FEF7A8BA 		_NEXT 
 2769 373c DCF800C0 	9:  ldr IP,[IP]
 2770 3740 FEF7A4BA 		_NEXT 
 2771              	
 2772              	
 2773              	/********************************
 2774              		LOOP ( a -- )
 2775              		increment counter 
 2776              		end loop if >= limit 
 2777              	*********************************/
 2778 3744 FE360000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 2778      C44C4F4F 
 2778      500000BF 
 2779 3750 504700BF 		_NEST 
ARM GAS  forth.s 			page 134


 2780 3754 0B1E0000 		_COMPI DOLOOP
 2780      1C370000 
 2780      113B0000 
 2781 3760 AD350000 		_ADR COMMA 
 2782 3764 931C0000 		_UNNEST 
 2783              	
 2784              	
 2785              	/**********************
 2786              	    BEGIN	( -- a )
 2787              	 	Start an infinite 
 2788              		or indefinite 
 2789              		loop structure.
 2790              	************************/
 2791 3768 48370000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2791      C5424547 
 2791      494E00BF 
 2792 3774 504700BF 		_NEST
 2793 3778 99260000 		_ADR	HERE
 2794 377c 931C0000 		_UNNEST
 2795              		.p2align 2 
 2796              	
 2797              	/********************
 2798              	    NEXT	( a -- )
 2799              	 	Terminate a FOR-NEXT
 2800              		loop structure.
 2801              	**************************/
 2802 3780 6C370000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2802      C44E4558 
 2802      540000BF 
 2803 378c 504700BF 		_NEST
 2804 3790 0B1E0000 		_COMPI	DONXT
 2804      2C1E0000 
 2804      113B0000 
 2805 379c AD350000 		_ADR	COMMA
 2806 37a0 931C0000 		_UNNEST
 2807              	
 2808              	/***************************
 2809              		I ( -- n )
 2810              		stack for loop counter 
 2811              	***************************/
 2812 37a4 84370000 		_HEADER I,1+COMPO,"I"
 2812      414900BF 
 2813 37ac 47F8046D 		_PUSH 
 2814 37b0 D8F80060 		ldr TOS,[RSP]
 2815 37b4 FEF76ABA 		_NEXT 
 2816              	
 2817              	/****************************
 2818              		J ( -- n )
 2819              		stack outer loop counter 
 2820              	****************************/
 2821 37b8 A8370000 		_HEADER J,1,"J"
 2821      014A00BF 
 2822 37c0 47F8046D 		_PUSH 
 2823 37c4 D8F80460 		ldr TOS,[RSP,#4]
 2824 37c8 FEF760BA 		_NEXT 
 2825              	
 2826              	/**********************
ARM GAS  forth.s 			page 135


 2827              	    UNTIL	( a -- )
 2828              	 	Terminate a BEGIN-UNTIL
 2829              		indefinite loop structure.
 2830              	******************************/
 2831 37cc BC370000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2831      C5554E54 
 2831      494C00BF 
 2832 37d8 504700BF 		_NEST
 2833 37dc 0B1E0000 		_COMPI	QBRAN
 2833      4A1E0000 
 2833      113B0000 
 2834 37e8 AD350000 		_ADR	COMMA
 2835 37ec 931C0000 		_UNNEST
 2836              	
 2837              	/**********************
 2838              	    AGAIN	( a -- )
 2839              	 	Terminate a BEGIN-AGAIN
 2840              		infinite loop structure.
 2841              	*****************************/
 2842 37f0 D0370000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2842      C5414741 
 2842      494E00BF 
 2843 37fc 504700BF 		_NEST
 2844 3800 0B1E0000 		_COMPI	BRAN
 2844      5E1E0000 
 2844      113B0000 
 2845 380c AD350000 		_ADR	COMMA
 2846 3810 931C0000 		_UNNEST
 2847              	
 2848              	/************************
 2849              	    IF	  ( -- A )
 2850              	 	Begin a conditional
 2851              		branch structure.
 2852              	**************************/
 2853 3814 F4370000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2853      C2494600 
 2854 381c 504700BF 		_NEST
 2855 3820 0B1E0000 		_COMPI	QBRAN
 2855      4A1E0000 
 2855      113B0000 
 2856 382c 99260000 		_ADR	HERE
 2857 3830 0B1E0000 		_DOLIT	4
 2857      04000000 
 2858 3838 F5230000 		_ADR	CPP
 2859 383c 79220000 		_ADR	PSTOR
 2860 3840 931C0000 		_UNNEST
 2861              	
 2862              	/*************************
 2863              	    AHEAD	( -- A )
 2864              	 	Compile a forward 
 2865              		branch instruction.
 2866              	*************************/
 2867 3844 18380000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2867      C5414845 
 2867      414400BF 
 2868 3850 504700BF 		_NEST
 2869 3854 0B1E0000 		_COMPI	BRAN
ARM GAS  forth.s 			page 136


 2869      5E1E0000 
 2869      113B0000 
 2870 3860 99260000 		_ADR	HERE
 2871 3864 0B1E0000 		_DOLIT	4
 2871      04000000 
 2872 386c F5230000 		_ADR	CPP
 2873 3870 79220000 		_ADR	PSTOR
 2874 3874 931C0000 		_UNNEST
 2875              	
 2876              	/**************************
 2877              	    REPEAT	( A a -- )
 2878              	 	Terminate a BEGIN-WHILE-REPEAT
 2879              		indefinite loop.
 2880              	**********************************/
 2881 3878 48380000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2881      C6524550 
 2881      45415400 
 2882 3884 504700BF 		_NEST
 2883 3888 FD370000 		_ADR	AGAIN
 2884 388c 99260000 		_ADR	HERE
 2885 3890 4D1F0000 		_ADR	SWAP
 2886 3894 7D1E0000 		_ADR	STORE
 2887 3898 931C0000 		_UNNEST
 2888              	
 2889              	/*********************
 2890              	    THEN	( A -- )
 2891              	 	Terminate a conditional
 2892              		branch structure.
 2893              	*****************************/
 2894 389c 7C380000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2894      C4544845 
 2894      4E0000BF 
 2895 38a8 504700BF 		_NEST
 2896 38ac 99260000 		_ADR	HERE
 2897 38b0 4D1F0000 		_ADR	SWAP
 2898 38b4 7D1E0000 		_ADR	STORE
 2899 38b8 931C0000 		_UNNEST
 2900              	
 2901              	/***************************
 2902              	    AFT	 ( a -- a A )
 2903              	 	Jump to THEN in a 
 2904              		FOR-AFT-THEN-NEXT loop 
 2905              		the first time through.
 2906              	*****************************/
 2907 38bc A0380000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2907      C3414654 
 2908 38c4 504700BF 		_NEST
 2909 38c8 2D1F0000 		_ADR	DROP
 2910 38cc 51380000 		_ADR	AHEAD
 2911 38d0 75370000 		_ADR	BEGIN
 2912 38d4 4D1F0000 		_ADR	SWAP
 2913 38d8 931C0000 		_UNNEST
 2914              	
 2915              	/**********************
 2916              	    ELSE	( A -- A )
 2917              	 	Start the false 
 2918              		clause in an 
ARM GAS  forth.s 			page 137


 2919              		IF-ELSE-THEN structure.
 2920              	****************************/
 2921 38dc C0380000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 2921      C4454C53 
 2921      450000BF 
 2922 38e8 504700BF 		_NEST
 2923 38ec 51380000 		_ADR	AHEAD
 2924 38f0 4D1F0000 		_ADR	SWAP
 2925 38f4 A9380000 		_ADR	THENN
 2926 38f8 931C0000 		_UNNEST
 2927              	
 2928              	/**************************
 2929              	    WHILE	( a -- A a )
 2930              	 	Conditional branch out 
 2931              		of a BEGIN-WHILE-REPEAT loop.
 2932              	*********************************/
 2933 38fc E0380000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 2933      C5574849 
 2933      4C4500BF 
 2934 3908 504700BF 		_NEST
 2935 390c 1D380000 		_ADR	IFF
 2936 3910 4D1F0000 		_ADR	SWAP
 2937 3914 931C0000 		_UNNEST
 2938              	
 2939              	/***********************************
 2940              	    ABORT"	( -- //  string> )
 2941              	 	Conditional abort with an 
 2942              		error message.
 2943              	***********************************/
 2944 3918 00390000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 2944      8641424F 
 2944      52542200 
 2945 3924 504700BF 		_NEST
 2946 3928 0B1E0000 		_COMPI	ABORQ
 2946      70330000 
 2946      113B0000 
 2947 3934 49360000 		_ADR	STRCQ
 2948 3938 931C0000 		_UNNEST
 2949              	
 2950              	/******************************
 2951              	    $"	( -- //  string> )
 2952              	 	Compile an inline 
 2953              		word literal.
 2954              	*****************************/
 2955 393c 1C390000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 2955      C2242200 
 2956 3944 504700BF 		_NEST
 2957 3948 0B1E0000 		_COMPI	STRQP
 2957      3C2C0000 
 2957      113B0000 
 2958 3954 49360000 		_ADR	STRCQ
 2959 3958 931C0000 		_UNNEST
 2960              	
 2961              	/******************************
 2962              	    ."	( -- //  string> )
 2963              	 	Compile an inline word
 2964              		literal to be typed out 
ARM GAS  forth.s 			page 138


 2965              		at run time.
 2966              	*******************************/
 2967 395c 40390000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 2967      C22E2200 
 2968 3964 504700BF 		_NEST
 2969 3968 0B1E0000 		_COMPI	DOTQP
 2969      582C0000 
 2969      113B0000 
 2970 3974 49360000 		_ADR	STRCQ
 2971 3978 931C0000 		_UNNEST
 2972              	
 2973              	/*********************
 2974              	  Name compiler
 2975              	***********************/
 2976              	
 2977              	/**************************
 2978              	    ?UNIQUE	( a -- a )
 2979              	 	Display a warning 
 2980              		message if the word 
 2981              		already exists.
 2982              	**************************/
 2983 397c 60390000 		_HEADER UNIQU,7,"?UNIQUE"
 2983      073F554E 
 2983      49515545 
 2984 3988 504700BF 		_NEST
 2985 398c 3D1F0000 		_ADR	DUPP
 2986 3990 1D310000 		_ADR	NAMEQ			// ?name exists
 2987 3994 4B1E0000 		_QBRAN	UNIQ1	// redefinitions are OK
 2987      B4390000 
 2988 399c 592C0000 		_DOTQP	7," reDef "		// but warn the user
 2988      07207265 
 2988      44656620 
 2989 39a8 611F0000 		_ADR	OVER
 2990 39ac C1220000 		_ADR	COUNT
 2991 39b0 BD2B0000 		_ADR	TYPEE			// just in case its not planned
 2992              	UNIQ1:
 2993 39b4 2D1F0000 		_ADR	DROP
 2994 39b8 931C0000 		_UNNEST
 2995              	
 2996              	/***********************
 2997              	    $,n	 ( na -- )
 2998              	 	Build a new dictionary 
 2999              		name using the data at na.
 3000              	hidden word 
 3001              	*******************************/
 3002              	SNAME:
 3003 39bc 504700BF 		_NEST
 3004 39c0 3D1F0000 		_ADR	DUPP			//  na na
 3005 39c4 B11E0000 		_ADR	CAT			//  ?null input
 3006 39c8 4B1E0000 		_QBRAN	SNAM1
 3006      043A0000 
 3007 39d0 89390000 		_ADR	UNIQU			//  na
 3008 39d4 1D240000 		_ADR	LAST			//  na last
 3009 39d8 911E0000 		_ADR	AT			//  na la
 3010 39dc AD350000 		_ADR	COMMA			//  na
 3011 39e0 3D1F0000 		_ADR	DUPP			//  na na
 3012 39e4 1D240000 		_ADR	LAST			//  na na last
ARM GAS  forth.s 			page 139


 3013 39e8 7D1E0000 		_ADR	STORE			//  na , save na for vocabulary link
 3014 39ec C1220000 		_ADR	COUNT			//  na+1 count
 3015 39f0 01200000 		_ADR	PLUS			//  na+1+count
 3016 39f4 E5250000 		_ADR	ALGND			//  word boundary
 3017 39f8 F5230000 		_ADR	CPP
 3018 39fc 7D1E0000 		_ADR	STORE			//  top of dictionary now
 3019 3a00 931C0000 		_UNNEST
 3020              	SNAM1:
 3021 3a04 3D2C0000 		_ADR	STRQP
 3022 3a08 07       		.byte	7
 3023 3a09 206E616D 		.ascii " name? "
 3023      653F20
 3024 3a10 45330000 		_ADR	ABORT
 3025              	
 3026              	/************************
 3027              	    $COMPILE	( a -- )
 3028              	 	Compile next word to 
 3029              		code dictionary as 
 3030              		a token or literal.
 3031              	**************************/
 3032 3a14 80390000 		_HEADER SCOMP,8,"$COMPILE"
 3032      0824434F 
 3032      4D50494C 
 3032      450000BF 
 3033 3a24 504700BF 		_NEST
 3034 3a28 1D310000 		_ADR	NAMEQ
 3035 3a2c 11210000 		_ADR	QDUP	// defined?
 3036 3a30 4B1E0000 		_QBRAN	SCOM2
 3036      603A0000 
 3037 3a38 911E0000 		_ADR	AT
 3038 3a3c 0B1E0000 		_DOLIT	IMEDD
 3038      80000000 
 3039 3a44 811F0000 		_ADR	ANDD	// immediate?
 3040 3a48 4B1E0000 		_QBRAN	SCOM1
 3040      583A0000 
 3041 3a50 211E0000 		_ADR	EXECU
 3042 3a54 931C0000 		_UNNEST			// it's immediate, execute
 3043              	SCOM1:
 3044 3a58 113B0000 		_ADR	CALLC			// it's not immediate, compile
 3045 3a5c 931C0000 		_UNNEST	
 3046              	SCOM2:
 3047 3a60 651C0000 		_ADR	NUMBER 
 3048 3a64 4B1E0000 		_QBRAN	SCOM3
 3048      743A0000 
 3049 3a6c 31360000 		_ADR	LITER
 3050 3a70 931C0000 		_UNNEST			// compile number as integer
 3051              	SCOM3: // compilation abort 
 3052 3a74 7D3A0000 		_ADR COLON_ABORT 
 3053 3a78 45330000 		_ADR	ABORT			// error
 3054              	
 3055              	/********************************
 3056              	 before aborting a compilation 
 3057              	 reset HERE and LAST
 3058              	 to previous values. 
 3059              	*******************************/
 3060              	COLON_ABORT:
 3061 3a7c 504700BF 		_NEST 
ARM GAS  forth.s 			page 140


 3062 3a80 1D240000 		_ADR LAST 
 3063 3a84 911E0000 		_ADR AT 
 3064 3a88 AD200000 		_ADR CELLM 
 3065 3a8c 3D1F0000 		_ADR DUPP 
 3066 3a90 F5230000 		_ADR CPP  
 3067 3a94 7D1E0000 		_ADR STORE 
 3068 3a98 911E0000 		_ADR AT 
 3069 3a9c 1D240000 		_ADR LAST 
 3070 3aa0 7D1E0000 		_ADR STORE 
 3071 3aa4 931C0000 		_UNNEST 
 3072              	
 3073              	/*********************
 3074              	    OVERT	( -- )
 3075              	 	Link a new word 
 3076              		into the current 
 3077              		vocabulary.
 3078              	**********************/
 3079 3aa8 183A0000 		_HEADER OVERT,5,"OVERT"
 3079      054F5645 
 3079      525400BF 
 3080 3ab4 504700BF 		_NEST
 3081 3ab8 1D240000 		_ADR	LAST
 3082 3abc 911E0000 		_ADR	AT
 3083 3ac0 E1230000 		_ADR	CNTXT
 3084 3ac4 7D1E0000 		_ADR	STORE
 3085 3ac8 931C0000 		_UNNEST
 3086              	
 3087              	/**********************
 3088              	    ;  ( -- )
 3089              	 	Terminate a colon
 3090              		definition.
 3091              	***********************/
 3092 3acc AC3A0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3092      C13B00BF 
 3093 3ad4 504700BF 		_NEST
 3094 3ad8 0B1E0000 		_DOLIT	UNNEST
 3094      921C0000 
 3095 3ae0 113B0000 		_ADR	CALLC
 3096 3ae4 01340000 		_ADR	LBRAC
 3097 3ae8 B53A0000 		_ADR	OVERT
 3098 3aec 931C0000 		_UNNEST
 3099              	
 3100              	/******************
 3101              	    ]	   ( -- )
 3102              	 	Start compiling 
 3103              		the words in 
 3104              		the input stream.
 3105              	*********************/
 3106 3af0 D03A0000 		_HEADER RBRAC,1,"]"
 3106      015D00BF 
 3107 3af8 504700BF 		_NEST
 3108 3afc 0B1E0000 		_DOLIT	SCOMP
 3108      243A0000 
 3109 3b04 B5230000 		_ADR	TEVAL
 3110 3b08 7D1E0000 		_ADR	STORE
 3111 3b0c 931C0000 		_UNNEST
 3112              	
ARM GAS  forth.s 			page 141


 3113              	/*********************
 3114              	    BL.W	( ca -- )
 3115              	 	compile ca.
 3116              	hidden word used by compiler
 3117              	*****************************/
 3118              	CALLC:
 3119 3b10 504700BF 		_NEST
 3120 3b14 0B1E0000 		_DOLIT 1 
 3120      01000000 
 3121 3b1c 951F0000 		_ADR ORR 
 3122 3b20 AD350000 		_ADR COMMA  
 3123 3b24 931C0000 		_UNNEST 
 3124              	
 3125              	
 3126              	/*************************
 3127              	 	:	( -- //  string> )
 3128              	 	Start a new colon 
 3129              		definition using 
 3130              		next word as its name.
 3131              	**************************/
 3132 3b28 F43A0000 		_HEADER COLON,1,":"
 3132      013A00BF 
 3133 3b30 504700BF 		_NEST
 3134 3b34 952F0000 		_ADR	TOKEN
 3135 3b38 BD390000 		_ADR	SNAME
 3136 3b3c 9D1C0000 		_ADR	COMPI_NEST 
 3137 3b40 F93A0000 		_ADR	RBRAC
 3138 3b44 931C0000 		_UNNEST
 3139              	
 3140              	/*************************
 3141              	    IMMEDIATE   ( -- )
 3142              	 	Make the last compiled 
 3143              		word an immediate word.
 3144              	***************************/
 3145 3b48 2C3B0000 		_HEADER IMMED,9,"IMMEDIATE"
 3145      09494D4D 
 3145      45444941 
 3145      544500BF 
 3146 3b58 504700BF 		_NEST
 3147 3b5c 0B1E0000 		_DOLIT	IMEDD
 3147      80000000 
 3148 3b64 1D240000 		_ADR	LAST
 3149 3b68 911E0000 		_ADR	AT
 3150 3b6c 911E0000 		_ADR	AT
 3151 3b70 951F0000 		_ADR	ORR
 3152 3b74 1D240000 		_ADR	LAST
 3153 3b78 911E0000 		_ADR	AT
 3154 3b7c 7D1E0000 		_ADR	STORE
 3155 3b80 931C0000 		_UNNEST
 3156              	
 3157              	/******************
 3158              	  Defining words
 3159              	******************/
 3160              	
 3161              	/***********************************
 3162              	    CONSTANT	( u -- //  string> )
 3163              	 	Compile a new constant.
ARM GAS  forth.s 			page 142


 3164              	************************************/
 3165 3b84 4C3B0000 		_HEADER CONST,8,"CONSTANT"
 3165      08434F4E 
 3165      5354414E 
 3165      540000BF 
 3166 3b94 504700BF 		_NEST 
 3167 3b98 952F0000 		_ADR	TOKEN
 3168 3b9c BD390000 		_ADR	SNAME
 3169 3ba0 B53A0000 		_ADR	OVERT
 3170 3ba4 9D1C0000 		_ADR	COMPI_NEST
 3171 3ba8 0B1E0000 		_DOLIT	DOCON
 3171      F4220000 
 3172 3bb0 113B0000 		_ADR	CALLC
 3173 3bb4 AD350000 		_ADR	COMMA
 3174 3bb8 0B1E0000 		_DOLIT	UNNEST 
 3174      921C0000 
 3175 3bc0 113B0000 		_ADR	CALLC  
 3176 3bc4 931C0000 		_UNNEST
 3177              	
 3178              		.p2align 2 
 3179              	/****************************************
 3180              	 doDOES> ( -- a )
 3181              	 runtime action of DOES> 
 3182              	 leave parameter field address on stack 
 3183              	hidden word used by compiler 
 3184              	***************************************/
 3185              	DODOES:
 3186 3bc8 504700BF 		_NEST 
 3187 3bcc BD1E0000 		_ADR	RFROM
 3188 3bd0 9D200000 		_ADR	CELLP 
 3189 3bd4 5D200000 		_ADR	ONEP  
 3190 3bd8 1D240000 		_ADR LAST 
 3191 3bdc 911E0000 		_ADR AT
 3192 3be0 B52F0000 		_ADR NAMET 
 3193 3be4 9D200000 		_ADR CELLP 
 3194 3be8 7D1E0000 		_ADR STORE  
 3195 3bec 931C0000 		_UNNEST 
 3196              	
 3197              		.p2align 2
 3198              	/**********************
 3199              	  DOES> ( -- )
 3200              	  compile time action
 3201              	*************************/
 3202 3bf0 883B0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3202      C5444F45 
 3202      533E00BF 
 3203 3bfc 504700BF 		_NEST 
 3204 3c00 0B1E0000 		_DOLIT DODOES 
 3204      C83B0000 
 3205 3c08 113B0000 		_ADR CALLC 
 3206 3c0c 0B1E0000 		_DOLIT	UNNEST
 3206      921C0000 
 3207 3c14 113B0000 		_ADR	CALLC 
 3208 3c18 9D1C0000 		_ADR COMPI_NEST
 3209 3c1c 0B1E0000 		_DOLIT RFROM 
 3209      BC1E0000 
 3210 3c24 113B0000 		_ADR	CALLC
ARM GAS  forth.s 			page 143


 3211 3c28 931C0000 		_UNNEST 
 3212              	
 3213              	
 3214              	/****************************
 3215              	  DEFER@ ( "name" -- a )
 3216              	  return value of code field 
 3217              	  of defered function. 
 3218              	******************************/
 3219 3c2c F43B0000 		_HEADER DEFERAT,6,"DEFER@"
 3219      06444546 
 3219      45524000 
 3220 3c38 504700BF 		_NEST 
 3221 3c3c 6D350000 		_ADR TICK
 3222 3c40 9D200000 		_ADR CELLP 
 3223 3c44 911E0000 		_ADR AT 
 3224 3c48 6D200000 		_ADR ONEM 
 3225 3c4c 931C0000 		_UNNEST 
 3226              	
 3227              	/*********************************
 3228              	 DEFER! ( "name1" "name2" -- )
 3229              	 assign an action to a defered word 
 3230              	************************************/
 3231 3c50 303C0000 		_HEADER DEFERSTO,6,"DEFER!"
 3231      06444546 
 3231      45522100 
 3232 3c5c 504700BF 		_NEST 
 3233 3c60 6D350000 		_ADR TICK 
 3234 3c64 5D200000 		_ADR ONEP 
 3235 3c68 6D350000 		_ADR TICK 
 3236 3c6c 9D200000 		_ADR CELLP 
 3237 3c70 7D1E0000 		_ADR STORE 
 3238 3c74 931C0000 		_UNNEST
 3239              	
 3240              	/****************************
 3241              	  DEFER ( "name" -- )
 3242              	  create a defered definition
 3243              	*****************************/
 3244 3c78 543C0000 		_HEADER DEFER,5,"DEFER"
 3244      05444546 
 3244      455200BF 
 3245 3c84 504700BF 		_NEST 
 3246 3c88 D53C0000 		_ADR CREAT 
 3247 3c8c 0B1E0000 		_DOLIT UNNEST 
 3247      921C0000 
 3248 3c94 113B0000 		_ADR CALLC 
 3249 3c98 0B1E0000 		_DOLIT DEFER_NOP
 3249      BC3C0000 
 3250 3ca0 5D200000 		_ADR ONEP 
 3251 3ca4 1D240000 		_ADR LAST 
 3252 3ca8 911E0000 		_ADR AT 
 3253 3cac B52F0000 		_ADR NAMET 
 3254 3cb0 9D200000 		_ADR CELLP 
 3255 3cb4 7D1E0000 		_ADR STORE 
 3256 3cb8 931C0000 		_UNNEST 
 3257              	DEFER_NOP:
 3258 3cbc 504700BF 		_NEST  
 3259 3cc0 091E0000 		_ADR NOP 
ARM GAS  forth.s 			page 144


 3260 3cc4 931C0000 		_UNNEST 
 3261              	
 3262              	/******************************
 3263              	    CREATE	( -- //  string> )
 3264              	 	Compile a new array entry 
 3265              		without allocating code space.
 3266              	***********************************/
 3267 3cc8 7C3C0000 		_HEADER CREAT,6,"CREATE"
 3267      06435245 
 3267      41544500 
 3268 3cd4 504700BF 		_NEST 
 3269 3cd8 952F0000 		_ADR	TOKEN
 3270 3cdc BD390000 		_ADR	SNAME
 3271 3ce0 B53A0000 		_ADR	OVERT
 3272 3ce4 9D1C0000 		_ADR	COMPI_NEST 
 3273 3ce8 0B1E0000 		_DOLIT	DOVAR
 3273      E8220000 
 3274 3cf0 113B0000 		_ADR	CALLC
 3275 3cf4 931C0000 		_UNNEST
 3276              	
 3277              	/*******************************
 3278              	    VARIABLE	( -- //  string> )
 3279              	 	Compile a new variable 
 3280              		initialized to 0.
 3281              	***********************************/
 3282 3cf8 CC3C0000 		_HEADER VARIA,8,"VARIABLE"
 3282      08564152 
 3282      4941424C 
 3282      450000BF 
 3283 3d08 504700BF 		_NEST
 3284 3d0c D53C0000 		_ADR	CREAT
 3285 3d10 0B1E0000 		_DOLIT	0
 3285      00000000 
 3286 3d18 AD350000 		_ADR	COMMA
 3287 3d1c 0B1E0000 		_DOLIT UNNEST
 3287      921C0000 
 3288 3d24 113B0000 		_ADR	CALLC  
 3289 3d28 931C0000 		_UNNEST
 3290              	
 3291              	/***********
 3292              	  Tools
 3293              	***********/
 3294              	
 3295              	/*************************
 3296              	    dm+	 ( a u -- a )
 3297              	 	Dump u bytes from , 
 3298              		leaving a+u on the stack.
 3299              	hidden word used by DUMP 
 3300              	****************************/
 3301              	DMP:
 3302 3d2c 504700BF 		_NEST
 3303 3d30 611F0000 		_ADR	OVER
 3304 3d34 0B1E0000 		_DOLIT	4
 3304      04000000 
 3305 3d3c 9D2C0000 		_ADR	UDOTR			// display address
 3306 3d40 692B0000 		_ADR	SPACE
 3307 3d44 E51E0000 		_ADR	TOR			// start count down loop
ARM GAS  forth.s 			page 145


 3308 3d48 5F1E0000 		_BRAN	PDUM2			// skip first pass
 3308      683D0000 
 3309              	PDUM1:
 3310 3d50 3D1F0000 	  _ADR	DUPP
 3311 3d54 B11E0000 		_ADR	CAT
 3312 3d58 0B1E0000 		_DOLIT	3
 3312      03000000 
 3313 3d60 9D2C0000 		_ADR	UDOTR			// display numeric data
 3314 3d64 5D200000 		_ADR	ONEP			// increment address
 3315              	PDUM2:
 3316 3d68 2D1E0000 	  _ADR	DONXT
 3317 3d6c 503D0000 		.word	PDUM1	// loop till done
 3318 3d70 931C0000 		_UNNEST
 3319              		.p2align 2 
 3320              	//    DUMP	( a u -- )
 3321              	// 	Dump u bytes from a, in a formatted manner.
 3322              	
 3323              	/**********************
 3324              		DUMP ( a n -- )
 3325              		hex dump memory 
 3326              	*********************/
 3327 3d74 FC3C0000 		_HEADER DUMP,4,"DUMP"
 3327      0444554D 
 3327      500000BF 
 3328 3d80 504700BF 		_NEST
 3329 3d84 59230000 		_ADR	BASE
 3330 3d88 911E0000 		_ADR	AT
 3331 3d8c E51E0000 		_ADR	TOR
 3332 3d90 7D290000 		_ADR	HEX			// save radix,set hex
 3333 3d94 0B1E0000 		_DOLIT	16
 3333      10000000 
 3334 3d9c 85250000 		_ADR	SLASH			// change count to lines
 3335 3da0 E51E0000 		_ADR	TOR
 3336 3da4 5F1E0000 		_BRAN	DUMP4			// start count down loop
 3336      D43D0000 
 3337              	DUMP1:
 3338 3dac F12B0000 	  _ADR	CR
 3339 3db0 0B1E0000 		_DOLIT	16
 3339      10000000 
 3340 3db8 75210000 		_ADR	DDUP
 3341 3dbc 2D3D0000 		_ADR	DMP			// display numeric
 3342 3dc0 25210000 		_ADR	ROT
 3343 3dc4 25210000 		_ADR	ROT
 3344 3dc8 692B0000 		_ADR	SPACE
 3345 3dcc 692B0000 		_ADR	SPACE
 3346 3dd0 BD2B0000 		_ADR	TYPEE			// display printable characters
 3347              	DUMP4:
 3348 3dd4 2D1E0000 	  _DONXT	DUMP1	// loop till done
 3348      AC3D0000 
 3349              	DUMP3:
 3350 3ddc 2D1F0000 		_ADR	DROP
 3351 3de0 BD1E0000 		_ADR	RFROM
 3352 3de4 59230000 		_ADR	BASE
 3353 3de8 7D1E0000 		_ADR	STORE			// restore radix
 3354 3dec 931C0000 		_UNNEST
 3355              	
 3356              	/**********************
ARM GAS  forth.s 			page 146


 3357              	   .S	  ( ... -- ... )
 3358              	 	Display the contents 
 3359              		of the data stack.
 3360              	*************************/
 3361 3df0 783D0000 		_HEADER DOTS,2,".S"
 3361      022E5300 
 3362 3df8 504700BF 		_NEST
 3363 3dfc 692B0000 		_ADR	SPACE
 3364 3e00 4D260000 		_ADR	DEPTH			// stack depth
 3365 3e04 E51E0000 		_ADR	TOR			// start count down loop
 3366 3e08 5F1E0000 		_BRAN	DOTS2			// skip first pass
 3366      1C3E0000 
 3367              	DOTS1:
 3368 3e10 D11E0000 		_ADR	RAT
 3369 3e14 71260000 		_ADR	PICK
 3370 3e18 F52C0000 		_ADR	DOT			// index stack, display contents
 3371              	DOTS2:
 3372 3e1c 2D1E0000 		_DONXT	DOTS1	// loop till done
 3372      103E0000 
 3373 3e24 692B0000 		_ADR	SPACE
 3374 3e28 931C0000 		_UNNEST
 3375              	
 3376              	/*****************************
 3377              	    >NAME	( ca -- na | F )
 3378              	 	Convert code address 
 3379              		to a name address.
 3380              	*****************************/
 3381 3e2c F43D0000 		_HEADER TNAME,5,">NAME"
 3381      053E4E41 
 3381      4D4500BF 
 3382 3e38 504700BF 		_NEST
 3383 3e3c E51E0000 		_ADR	TOR			//  
 3384 3e40 E1230000 		_ADR	CNTXT			//  va
 3385 3e44 911E0000 		_ADR	AT			//  na
 3386              	TNAM1:
 3387 3e48 3D1F0000 		_ADR	DUPP			//  na na
 3388 3e4c 4B1E0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3388      7C3E0000 
 3389 3e54 3D1F0000 		_ADR	DUPP			//  na na
 3390 3e58 B52F0000 		_ADR	NAMET			//  na ca
 3391 3e5c D11E0000 		_ADR	RAT			//  na ca code
 3392 3e60 A91F0000 		_ADR	XORR			//  na f --
 3393 3e64 4B1E0000 		_QBRAN	TNAM2
 3393      7C3E0000 
 3394 3e6c AD200000 		_ADR	CELLM			//  la 
 3395 3e70 911E0000 		_ADR	AT			//  next_na
 3396 3e74 5F1E0000 		_BRAN	TNAM1
 3396      483E0000 
 3397              	TNAM2:	
 3398 3e7c BD1E0000 		_ADR	RFROM
 3399 3e80 2D1F0000 		_ADR	DROP			//  0|na --
 3400 3e84 931C0000 		_UNNEST			// 0
 3401              	
 3402              	/********************************
 3403              	    .ID	 ( na -- )
 3404              	 	Display the name at address.
 3405              	********************************/
ARM GAS  forth.s 			page 147


 3406 3e88 303E0000 		_HEADER DOTID,3,".ID"
 3406      032E4944 
 3407 3e90 504700BF 		_NEST
 3408 3e94 11210000 		_ADR	QDUP			// if zero no name
 3409 3e98 4B1E0000 		_QBRAN	DOTI1
 3409      B83E0000 
 3410 3ea0 C1220000 		_ADR	COUNT
 3411 3ea4 0B1E0000 		_DOLIT	0x1F
 3411      1F000000 
 3412 3eac 811F0000 		_ADR	ANDD			// mask lexicon bits
 3413 3eb0 BD2B0000 		_ADR	TYPEE
 3414 3eb4 931C0000 		_UNNEST			// display name string
 3415              	DOTI1:
 3416 3eb8 592C0000 		_DOTQP	9," {noName}"
 3416      09207B6E 
 3416      6F4E616D 
 3416      657D00BF 
 3417 3ec8 931C0000 		_UNNEST
 3418              	
 3419              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3420              	.if WANT_SEE 
 3421              	/*******************************
 3422              	    SEE	 ( -- //  string> )
 3423              	 	A simple decompiler.
 3424              	*******************************/
 3425              		_HEADER SEE,3,"SEE"
 3426              		_NEST
 3427              		_ADR	TICK	//  ca --, starting address
 3428              		_ADR	CR	
 3429              		_DOLIT	20
 3430              		_ADR	TOR
 3431              	SEE1:
 3432              		_ADR	CELLP			//  a
 3433              		_ADR	DUPP			//  a a
 3434              		_ADR	DECOMP		//  a
 3435              		_DONXT	SEE1
 3436              		_ADR	DROP
 3437              		_UNNEST
 3438              	
 3439              	/*************************
 3440              	 	DECOMPILE ( a -- )
 3441              	 	Convert code in a.  
 3442              		Display name of command or as data.
 3443              	*************************************/
 3444              		_HEADER DECOMP,9,"DECOMPILE"
 3445              		_NEST
 3446              		_ADR	DUPP			//  a a
 3447              	// 	_ADR	TOR			//  a
 3448              		_ADR	AT			//  a code
 3449              		_ADR	DUPP			//  a code code
 3450              		_DOLIT	0xF800D000 //0xF800F800
 3451              		_ADR	ANDD
 3452              		_DOLIT	0xF000D000 //0xF800F000
 3453              		_ADR	EQUAL			//  a code ?
 3454              		_ADR	INVER 
 3455              		_QBRAN	DECOM2	//  not a command
 3456              		//  a valid_code --, extract address and display name
ARM GAS  forth.s 			page 148


 3457              		MOVW	IP,#0xFFE
 3458              		MOV	WP,TOS
 3459              		LSL	TOS,TOS,#21		//  get bits 22-12
 3460              		ASR	TOS,TOS,#9		//  with sign extension
 3461              		LSR	WP,WP,#15		//  get bits 11-1
 3462              		AND	WP,WP,IP		//  retain only bits 11-1
 3463              		ORR	TOS,TOS,WP		//  get bits 22-1
 3464              		NOP
 3465              		_ADR	OVER			//  a offset a
 3466              		_ADR	PLUS			//  a target-4
 3467              		_ADR	CELLP			//  a target
 3468              		_ADR	TNAME			//  a na/0 --, is it a name?
 3469              		_ADR	QDUP			//  name address or zero
 3470              		_QBRAN	DECOM1
 3471              		_ADR	SPACE			//  a na
 3472              		_ADR	DOTID			//  a --, display name
 3473              	// 	_ADR	RFROM			//  a
 3474              		_ADR	DROP
 3475              		_UNNEST
 3476              	DECOM1:	// _ADR	RFROM		//  a
 3477              		_ADR	AT			//  data
 3478              		_ADR	UDOT			//  display data
 3479              		_UNNEST
 3480              	DECOM2:
 3481              		_ADR	UDOT
 3482              	// 	_ADR	RFROM
 3483              		_ADR	DROP
 3484              		_UNNEST
 3485              	.endif 
 3486              	
 3487              	/**********************
 3488              		VLIST ( -- )
 3489              		WORDS alias 
 3490              		+ display words count 
 3491              	**********************/
 3492 3ecc 8C3E0000 		_HEADER VLIST,5,"VLIST"
 3492      05564C49 
 3492      535400BF 
 3493 3ed8 504700BF 		_NEST 
 3494 3edc FD3E0000 		_ADR WORDS
 3495 3ee0 F12B0000 		_ADR CR 
 3496 3ee4 413F0000 		_ADR WC
 3497 3ee8 F52C0000 		_ADR DOT    
 3498 3eec 931C0000 		_UNNEST 
 3499              	
 3500              	/*********************
 3501              	    WORDS	( -- )
 3502              	 	Display the names 
 3503              		in the context vocabulary.
 3504              	*******************************/
 3505 3ef0 D03E0000 		_HEADER WORDS,5,"WORDS"
 3505      05574F52 
 3505      445300BF 
 3506 3efc 504700BF 		_NEST
 3507 3f00 F12B0000 		_ADR	CR
 3508 3f04 E1230000 		_ADR	CNTXT
 3509 3f08 911E0000 		_ADR	AT			// only in context
ARM GAS  forth.s 			page 149


 3510              	WORS1:
 3511 3f0c 11210000 		_ADR	QDUP			// ?at end of list
 3512 3f10 4B1E0000 		_QBRAN	WORS2
 3512      343F0000 
 3513 3f18 3D1F0000 		_ADR	DUPP
 3514 3f1c 692B0000 		_ADR	SPACE
 3515 3f20 913E0000 		_ADR	DOTID			// display a name
 3516 3f24 AD200000 		_ADR	CELLM
 3517 3f28 911E0000 		_ADR	AT
 3518 3f2c 5F1E0000 		_BRAN	WORS1
 3518      0C3F0000 
 3519              	WORS2:
 3520 3f34 931C0000 		_UNNEST
 3521              	
 3522              	/*****************************
 3523              		WC ( - n )
 3524              		count words in dictionary 
 3525              	******************************/
 3526 3f38 F43E0000 		_HEADER WC,2,"WC"
 3526      02574300 
 3527 3f40 504700BF 		_NEST 
 3528 3f44 0B1E0000 		_DOLIT 0 
 3528      00000000 
 3529 3f4c 1D240000 		_ADR LAST
 3530 3f50 911E0000 	1:	_ADR AT
 3531 3f54 11210000 		_ADR QDUP
 3532 3f58 4B1E0000 		_QBRAN 9f
 3532      783F0000 
 3533 3f60 4D1F0000 		_ADR SWAP
 3534 3f64 5D200000 		_ADR ONEP
 3535 3f68 4D1F0000 		_ADR SWAP
 3536 3f6c AD200000 		_ADR CELLM
 3537 3f70 5F1E0000 		_BRAN 1b
 3537      503F0000 
 3538 3f78 931C0000 	9:	_UNNEST 
 3539              	
 3540              	/*************************
 3541              		MARK <string> ( -- )
 3542              	    create forget point 
 3543              		in dictionary 
 3544              	*************************/	
 3545 3f7c 3C3F0000 		_HEADER MARK,4,"MARK"
 3545      044D4152 
 3545      4B0000BF 
 3546 3f88 504700BF 		_NEST
 3547 3f8c D53C0000 		_ADR CREAT 
 3548 3f90 C93B0000 		_ADR DODOES 
 3549 3f94 931C0000 		_UNNEST
 3550 3f98 504700BF 		_NEST  
 3551 3f9c BD1E0000 		_ADR RFROM 
 3552 3fa0 0B1E0000 		_DOLIT 8
 3552      08000000 
 3553 3fa8 11200000 		_ADR SUBB
 3554 3fac 393E0000 		_ADR TNAME
 3555 3fb0 AD200000 		_ADR CELLM
 3556 3fb4 911E0000 		_ADR AT  
 3557 3fb8 1D240000 		_ADR LAST 
ARM GAS  forth.s 			page 150


 3558 3fbc 7D1E0000 		_ADR STORE 
 3559 3fc0 B53A0000 		_ADR OVERT
 3560 3fc4 931C0000 		_UNNEST 
 3561              	
 3562              	/****************
 3563              	  cold start
 3564              	*****************/
 3565              	
 3566              	/**********************************
 3567              	    VER	 ( -- n )
 3568              	 	Return the version 
 3569              		number of this implementation.
 3570              	hidden word used by COLD
 3571              	**********************************/
 3572              	VERSN:
 3573 3fc8 504700BF 		_NEST
 3574 3fcc 0B1E0000 		_DOLIT	VER*256+EXT
 3574      00010000 
 3575 3fd4 931C0000 		_UNNEST
 3576              	
 3577              	/*********************
 3578              	    hi	  ( -- )
 3579              	 	Display the sign-on 
 3580              		message.
 3581              	***********************/
 3582 3fd8 803F0000 		_HEADER HI,2,"HI"
 3582      02484900 
 3583 3fe0 504700BF 		_NEST
 3584 3fe4 F12B0000 		_ADR	CR	// initialize I/O
 3585 3fe8 592C0000 		_DOTQP	17, "beyond Jupiter, v" 
 3585      11626579 
 3585      6F6E6420 
 3585      4A757069 
 3585      7465722C 
 3586 4000 59230000 		_ADR	BASE
 3587 4004 911E0000 		_ADR	AT
 3588 4008 7D290000 		_ADR	HEX	// save radix
 3589 400c C93F0000 		_ADR	VERSN
 3590 4010 6D280000 		_ADR	BDIGS
 3591 4014 B9280000 		_ADR	DIG
 3592 4018 B9280000 		_ADR	DIG
 3593 401c 0B1E0000 		_DOLIT	'.'
 3593      2E000000 
 3594 4024 8D280000 		_ADR	HOLD
 3595 4028 D9280000 		_ADR	DIGS
 3596 402c 2D290000 		_ADR	EDIGS
 3597 4030 BD2B0000 		_ADR	TYPEE	// format version number
 3598 4034 59230000 		_ADR	BASE
 3599 4038 7D1E0000 		_ADR	STORE
 3600 403c F12B0000 		_ADR	CR
 3601 4040 931C0000 		_UNNEST			// restore radix
 3602              	
 3603              	/**********************
 3604              	 check if PS2 keyboard 
 3605              	 present.
 3606              	**********************/
 3607              	PS2_QUERY: 
ARM GAS  forth.s 			page 151


 3608 4044 504700BF 		_NEST 
 3609 4048 0B1E0000 		_DOLIT 400 
 3609      90010000 
 3610 4050 AD1D0000 		_ADR PAUSE
 3611 4054 D5130000 		_ADR PS2_QKEY
 3612 4058 4B1E0000 		_QBRAN 1f
 3612      74400000 
 3613 4060 0B1E0000 		_DOLIT BAT_OK 
 3613      AA000000 
 3614 4068 A91F0000 		_ADR XORR 
 3615 406c 4B1E0000 		_QBRAN 9f 
 3615      B8400000 
 3616 4074 BD150000 	1:	_ADR KBD_RST
 3617 4078 0B1E0000 		_DOLIT BAT_OK 
 3617      AA000000 
 3618 4080 A91F0000 		_ADR XORR  
 3619 4084 4B1E0000 		_QBRAN 9f  
 3619      B8400000 
 3620              	// no ps2 keyboard 
 3621              	// swith to serial console
 3622 408c F12B0000 		_ADR CR 
 3623 4090 592C0000 		_DOTQP 25,"no PS2 keyboard detected."
 3623      196E6F20 
 3623      50533220 
 3623      6B657962 
 3623      6F617264 
 3624 40b0 CD050000 		_ADR SERIAL 
 3625 40b4 E5050000 		_ADR CONSOLE 
 3626 40b8 931C0000 	9:	_UNNEST 
 3627              	
 3628              	/*************************
 3629              	   check PA8 to 
 3630              	   select console 
 3631              	   PA8 -> low  LOCAL 
 3632              	   PA8 -> high SERIAL 
 3633              	*************************/
 3634              	IF_SENSE:
 3635 40bc 504700BF 		_NEST 
 3636 40c0 B5050000 		_ADR LOCAL 
 3637 40c4 0B1E0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3637      10000240 
 3638 40cc 911E0000 		_ADR AT 
 3639 40d0 0B1E0000 		_DOLIT (1<<8)
 3639      00010000 
 3640 40d8 811F0000 		_ADR ANDD 
 3641 40dc 4B1E0000 		_QBRAN 9f 
 3641      E8400000 
 3642 40e4 5D200000 		_ADR ONEP 
 3643 40e8 E5050000 	9:  _ADR CONSOLE 
 3644 40ec 931C0000 		_UNNEST 
 3645              	
 3646              	
 3647              	/********************
 3648              	    COLD	( -- )
 3649              	 	The high level cold 
 3650              		start sequence.
 3651              	**************************/
ARM GAS  forth.s 			page 152


 3652 40f0 DC3F0000 		.word	LINK 
 3653              		LINK = . 
 3654 40f4 04       	_LASTN:	.byte  4
 3655 40f5 434F4C44 		.ascii "COLD"
 3656 40f9 0000BF   		.p2align 2	
 3657              	COLD:
 3658 40fc 00B5FCF7 		_CALL forth_init 
 3658      33F85DF8 
 3658      04EB
 3659 4106 DFF858C0 		ldr IP,=COLD1 
 3660 410a FDF7BFBD 		_NEXT
 3661 410e 00BF     		.p2align 2 
 3662              	COLD1:
 3663 4110 0B1E0000 		_DOLIT  0 
 3663      00000000 
 3664 4118 E11D0000 		_ADR ULED // turn off user LED 
 3665 411c 0B1E0000 		_DOLIT	UZERO
 3665      F4030000 
 3666 4124 0B1E0000 		_DOLIT	UPP
 3666      00000020 
 3667 412c 0B1E0000 		_DOLIT	ULAST-UZERO
 3667      BB000000 
 3668 4134 39270000 		_ADR	MOVE 			// initialize user area
 3669 4138 CD340000 		_ADR	PRESE			// initialize stack and TIB
 3670 413c BD400000 		_ADR	IF_SENSE
 3671 4140 5D180000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 3672 4144 45400000 		_ADR 	PS2_QUERY  
 3673 4148 45230000 		_ADR	TBOOT
 3674 414c E9260000 		_ADR	ATEXE			// application boot
 3675 4150 B53A0000 		_ADR	OVERT
 3676 4154 5F1E0000 		_BRAN	QUIT			// start interpretation
 3676      EC340000 
 3677              	COLD2:
 3678              		.p2align 2 	
 3679              	CTOP:
 3680 415c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3681              	
 3682              	
 3683 4160 10410000 	  .end 
ARM GAS  forth.s 			page 153


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 154


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 155


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 156


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 157


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 158


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 159


             forth.s:2532   .text:0000000000003488 EVAL
             forth.s:1508   .text:000000000000288c HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 FP_WS
          macros.inc:109    *ABS*:0000000000000013 FP_WS_SIZE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007dc tv_out_isr
          ser-term.s:35     .text:00000000000004c0 uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010b8 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000001c8c INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2553   .text:00000000000034cc PRESE
             forth.s:268    .text:0000000000001e0a DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:881    .text:00000000000022c0 COUNT
             forth.s:1772   .text:0000000000002bbc TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:437    .text:0000000000001f3c DUPP
             forth.s:393    .text:0000000000001ee4 TOR
             forth.s:968    .text:0000000000002358 BASE
             forth.s:339    .text:0000000000001e7c STORE
             forth.s:1910   .text:0000000000002cf4 DOT
             forth.s:375    .text:0000000000001ebc RFROM
             forth.s:472    .text:0000000000001f80 ANDD
             forth.s:309    .text:0000000000001e4a QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:154    .text:0000000000001d14 EMIT
             forth.s:1744   .text:0000000000002b68 SPACE
ARM GAS  forth.s 			page 160


              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1790   .text:0000000000002bf0 CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:385    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004ee ser_init
             tvout.s:74     .text:000000000000072c tv_init
           ps2_kbd.s:307    .text:00000000000012d8 kbd_init
         spi-flash.s:39     .text:00000000000016e4 flash_spi_init
             forth.s:3657   .text:00000000000040fc COLD
             forth.s:83     .text:0000000000001c84 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:475    .text:0000000000000332 gpio_config
              init.s:550    .text:00000000000003de gpio_out
              init.s:410    .text:00000000000002a8 nvic_set_priority
              init.s:565    .text:00000000000003f4 UZERO
              init.s:602    .text:00000000000004af ULAST
              init.s:419    .text:00000000000002c0 negative_irq
              init.s:431    .text:00000000000002da nvic_enable_irq
              init.s:448    .text:0000000000000304 nvic_disable_irq
              init.s:512    .text:000000000000039a input_pull
              init.s:505    .text:0000000000000388 output_type
              init.s:528    .text:00000000000003b0 gpio_speed
              init.s:566    .text:00000000000003f4 $d
             forth.s:3582   .text:0000000000003fe0 HI
           ps2_kbd.s:396    .text:00000000000013d4 PS2_QKEY
             tvout.s:563    .text:0000000000000c9c TV_EMIT
             forth.s:2469   .text:00000000000033a4 INTER
             forth.s:3654   .text:00000000000040f4 _LASTN
             forth.s:3679   .text:000000000000415c CTOP
             forth.s:3653   .text:00000000000040f4 LINK
              init.s:607    .text:00000000000004b0 $d
          ser-term.s:33     .text:00000000000004c0 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000546 $d
          ser-term.s:90     .text:000000000000054a _SER_QKEY
          ser-term.s:90     .text:0000000000000554 SER_QKEY
          ser-term.s:110    .text:0000000000000580 $d
          ser-term.s:110    .text:0000000000000584 _SER_EMIT
          ser-term.s:110    .text:0000000000000590 SER_EMIT
          ser-term.s:124    .text:00000000000005aa $d
          ser-term.s:124    .text:00000000000005ae _LOCAL
          ser-term.s:124    .text:00000000000005b4 $t
          ser-term.s:124    .text:00000000000005b4 LOCAL
          ser-term.s:133    .text:00000000000005c0 $d
          ser-term.s:133    .text:00000000000005c4 _SERIAL
ARM GAS  forth.s 			page 161


          ser-term.s:133    .text:00000000000005cc SERIAL
          ser-term.s:142    .text:00000000000005d8 $d
          ser-term.s:142    .text:00000000000005dc _CONSOLE
          ser-term.s:142    .text:00000000000005e4 $t
          ser-term.s:142    .text:00000000000005e4 CONSOLE
          ser-term.s:164    .text:0000000000000604 $d
          ser-term.s:164    .text:0000000000000608 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000614 ANSI_PARAM
          ser-term.s:166    .text:0000000000000618 $d
             forth.s:578    .text:000000000000205c ONEP
             forth.s:1189   .text:000000000000254c SLMOD
             forth.s:667    .text:0000000000002110 QDUP
             forth.s:324    .text:0000000000001e5e BRAN
             forth.s:529    .text:0000000000002000 PLUS
             forth.s:586    .text:000000000000206c ONEM
             forth.s:90     .text:0000000000001c92 UNNEST
          ser-term.s:191    .text:0000000000000684 _ANSI_ESC
          ser-term.s:191    .text:000000000000068c ANSI_ESC
          ser-term.s:193    .text:0000000000000690 $d
          ser-term.s:203    .text:00000000000006b0 _SER_AT
          ser-term.s:203    .text:00000000000006b8 SER_AT
          ser-term.s:205    .text:00000000000006bc $d
             forth.s:445    .text:0000000000001f4c SWAP
          ser-term.s:219    .text:00000000000006ec _SER_CLS
          ser-term.s:219    .text:00000000000006f4 $t
          ser-term.s:219    .text:00000000000006f4 SER_CLS
          ser-term.s:221    .text:00000000000006f8 $d
          ser-term.s:228    .text:000000000000071c $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
ARM GAS  forth.s 			page 162


             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:000000000000072c $t
             tvout.s:150    .text:0000000000000808 state_vsync
             tvout.s:191    .text:000000000000085c state_pre_video
             tvout.s:202    .text:000000000000086e state_video_out
             tvout.s:237    .text:00000000000008cc state_post_video
             tvout.s:254    .text:00000000000008f2 tv_isr_exit
             tvout.s:180    .text:0000000000000842 sync_end
             tvout.s:246    .text:00000000000008de frame_end
             tvout.s:264    .text:00000000000008f4 $d
             tvout.s:264    .text:00000000000008f8 _BACKCOLOR
             tvout.s:264    .text:0000000000000904 BACKCOLOR
             tvout.s:271    .text:0000000000000910 $d
             tvout.s:271    .text:0000000000000914 _PENCOLOR
             tvout.s:271    .text:000000000000091e $t
             tvout.s:271    .text:0000000000000920 PENCOLOR
             tvout.s:278    .text:000000000000092c $d
             tvout.s:278    .text:0000000000000930 _CURSOR_COL
             tvout.s:278    .text:0000000000000938 CURSOR_COL
             tvout.s:285    .text:0000000000000944 $d
             tvout.s:285    .text:0000000000000948 _CURSOR_ROW
             tvout.s:285    .text:000000000000094c $t
             tvout.s:285    .text:000000000000094c CURSOR_ROW
             tvout.s:292    .text:0000000000000958 $d
             tvout.s:292    .text:000000000000095c _ROWY
             tvout.s:292    .text:0000000000000962 $t
             tvout.s:292    .text:0000000000000964 ROWY
             tvout.s:299    .text:0000000000000970 $d
             tvout.s:299    .text:0000000000000974 _COLX
             tvout.s:299    .text:000000000000097a $t
             tvout.s:299    .text:000000000000097c COLX
             tvout.s:306    .text:0000000000000988 $d
             tvout.s:306    .text:000000000000098c _FONT
             tvout.s:306    .text:0000000000000994 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:00000000000009a0 $d
             tvout.s:313    .text:00000000000009a4 _VIDBUFF
             tvout.s:313    .text:00000000000009ac $t
             tvout.s:313    .text:00000000000009ac VIDBUFF
             tvout.s:325    .text:00000000000009b6 $d
             tvout.s:325    .text:00000000000009ba _PLOT
             tvout.s:325    .text:00000000000009c0 PLOT
             tvout.s:373    .text:0000000000000a44 plot_op
             tvout.s:341    .text:00000000000009ec op_back
             tvout.s:350    .text:0000000000000a06 op_pen
             tvout.s:359    .text:0000000000000a20 op_invert
             tvout.s:363    .text:0000000000000a28 op_xor
             tvout.s:373    .text:0000000000000a44 $d
             tvout.s:378    .text:0000000000000a4c _VSYNC
             tvout.s:378    .text:0000000000000a52 $t
             tvout.s:378    .text:0000000000000a54 VSYNC
             tvout.s:386    .text:0000000000000a5e $d
             tvout.s:386    .text:0000000000000a62 _CLS
             tvout.s:386    .text:0000000000000a66 $t
             tvout.s:386    .text:0000000000000a68 CLS
             tvout.s:410    .text:0000000000000aaa $d
             tvout.s:410    .text:0000000000000aae _CLRLINE
ARM GAS  forth.s 			page 163


             tvout.s:410    .text:0000000000000ab6 $t
             tvout.s:410    .text:0000000000000ab8 CLRLINE
             tvout.s:412    .text:0000000000000abc $d
             forth.s:547    .text:0000000000002020 STAR
             forth.s:1416   .text:0000000000002780 FILL
             tvout.s:427    .text:0000000000000af0 _SCROLLUP
             tvout.s:427    .text:0000000000000afc SCROLLUP
             tvout.s:429    .text:0000000000000b00 $d
             forth.s:538    .text:0000000000002010 SUBB
             forth.s:1384   .text:0000000000002738 MOVE
             tvout.s:448    .text:0000000000000b48 _SCROLLDOWN
             tvout.s:448    .text:0000000000000b54 SCROLLDOWN
             tvout.s:450    .text:0000000000000b58 $d
             tvout.s:467    .text:0000000000000b98 _TV_CRLF
             tvout.s:467    .text:0000000000000ba0 $t
             tvout.s:467    .text:0000000000000ba0 TV_CRLF
             tvout.s:482    .text:0000000000000bc2 $d
             tvout.s:482    .text:0000000000000bc6 _RIGHT
             tvout.s:482    .text:0000000000000bcc $t
             tvout.s:482    .text:0000000000000bcc RIGHT
             tvout.s:495    .text:0000000000000be0 $d
             tvout.s:495    .text:0000000000000be4 _LEFT
             tvout.s:495    .text:0000000000000bec LEFT
             tvout.s:511    .text:0000000000000c18 FONT_PIXEL
             tvout.s:518    .text:0000000000000c28 INCR_X
             tvout.s:525    .text:0000000000000c34 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c3c CHAR_ROW
             tvout.s:536    .text:0000000000000c40 $d
             forth.s:717    .text:0000000000002174 DDUP
             forth.s:384    .text:0000000000001ed0 RAT
             forth.s:290    .text:0000000000001e2c DONXT
             forth.s:708    .text:0000000000002160 TDROP
             tvout.s:551    .text:0000000000000c7c CHAR_FONT
             tvout.s:552    .text:0000000000000c7c $t
             tvout.s:563    .text:0000000000000c90 $d
             tvout.s:563    .text:0000000000000c94 _TV_EMIT
             tvout.s:563    .text:0000000000000c9c $t
             tvout.s:565    .text:0000000000000ca0 $d
             forth.s:789    .text:0000000000002208 ULESS
             tvout.s:593    .text:0000000000000d24 CTRL_KEY
             forth.s:349    .text:0000000000001e90 AT
             forth.s:677    .text:0000000000002124 ROT
             forth.s:367    .text:0000000000001eb0 CAT
             tvout.s:660    .text:0000000000000e0c SHOW_CURSOR
             tvout.s:691    .text:0000000000000e94 HIDE_CURSOR
             forth.s:777    .text:00000000000021f0 EQUAL
             tvout.s:650    .text:0000000000000dec BACK_SPACE
             forth.s:429    .text:0000000000001f2c DROP
             tvout.s:618    .text:0000000000000d94 CAR_RET
             tvout.s:629    .text:0000000000000dac LN_FEED
             tvout.s:619    .text:0000000000000d94 $t
             tvout.s:620    .text:0000000000000d98 $d
             tvout.s:630    .text:0000000000000dac $t
             tvout.s:631    .text:0000000000000db0 $d
             forth.s:490    .text:0000000000001fa8 XORR
             tvout.s:651    .text:0000000000000dec $t
             tvout.s:652    .text:0000000000000df0 $d
ARM GAS  forth.s 			page 164


             tvout.s:660    .text:0000000000000e00 _SHOW_CURSOR
             tvout.s:660    .text:0000000000000e0c $t
             tvout.s:663    .text:0000000000000e10 $d
             forth.s:659    .text:0000000000002100 TWOSL
             forth.s:357    .text:0000000000001e9c CSTOR
             forth.s:699    .text:000000000000214c DDROP
             tvout.s:691    .text:0000000000000e88 _HIDE_CURSOR
             tvout.s:691    .text:0000000000000e94 $t
             tvout.s:694    .text:0000000000000e98 $d
             forth.s:520    .text:0000000000001ff0 LSHIFT
             forth.s:481    .text:0000000000001f94 ORR
             tvout.s:704    .text:0000000000000ec0 _TV_AT
             tvout.s:704    .text:0000000000000ec6 $t
             tvout.s:704    .text:0000000000000ec8 TV_AT
             tvout.s:719    .text:0000000000000eec $d
             tvout.s:719    .text:0000000000000ef0 _INPUT
             tvout.s:719    .text:0000000000000ef6 $t
             tvout.s:719    .text:0000000000000ef8 INPUT
             tvout.s:721    .text:0000000000000efc $d
             forth.s:1328   .text:00000000000026b0 PAD
             forth.s:2377   .text:0000000000003290 ACCEP
             forth.s:455    .text:0000000000001f60 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000000f28 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 165


       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 166


       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f34 sc_ascii
         mcSaite.inc:100    .text:0000000000000fe8 shifted
         mcSaite.inc:151    .text:0000000000001048 altchar
         mcSaite.inc:167    .text:0000000000001058 extended
         mcSaite.inc:191    .text:0000000000001080 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
ARM GAS  forth.s 			page 167


           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010b6 $t
           ps2_kbd.s:179    .text:00000000000011e2 send_bit
           ps2_kbd.s:107    .text:0000000000001118 start_bit
           ps2_kbd.s:118    .text:000000000000113c parity_bit
           ps2_kbd.s:125    .text:0000000000001150 stop_bit
           ps2_kbd.s:152    .text:00000000000011a6 store_code
           ps2_kbd.s:253    .text:0000000000001276 do_async_key
           ps2_kbd.s:204    .text:0000000000001226 send_parity
           ps2_kbd.s:211    .text:0000000000001238 send_stop
           ps2_kbd.s:218    .text:0000000000001242 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001262 is_async_key
           ps2_kbd.s:286    .text:00000000000012c6 async_keys
           ps2_kbd.s:378    .text:00000000000013ac table_scan
           ps2_kbd.s:260    .text:0000000000001288 set_async_key
           ps2_kbd.s:295    .text:00000000000012d4 async_jump
           ps2_kbd.s:265    .text:0000000000001296 shift_key
           ps2_kbd.s:273    .text:00000000000012a6 set_reset
           ps2_kbd.s:268    .text:000000000000129c ctrl_key
           ps2_kbd.s:271    .text:00000000000012a2 alt_key
           ps2_kbd.s:287    .text:00000000000012c6 $d
           ps2_kbd.s:340    .text:0000000000001354 $d
           ps2_kbd.s:340    .text:0000000000001358 _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001362 $t
           ps2_kbd.s:340    .text:0000000000001364 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001374 keycode
           ps2_kbd.s:365    .text:000000000000139c wait_code
           ps2_kbd.s:396    .text:00000000000013c6 $d
           ps2_kbd.s:396    .text:00000000000013ca _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001420 inkey_exit
           ps2_kbd.s:418    .text:0000000000001424 pause_key
           ps2_kbd.s:427    .text:000000000000143a do_modifiers
           ps2_kbd.s:436    .text:0000000000001452 shift_down
           ps2_kbd.s:440    .text:0000000000001458 altchar_down
           ps2_kbd.s:444    .text:000000000000145e ctrl_down
           ps2_kbd.s:452    .text:000000000000147a do_capslock
           ps2_kbd.s:478    .text:000000000000149e kbd_send
           ps2_kbd.s:553    .text:0000000000001592 kbd_clear_queue
           ps2_kbd.s:567    .text:00000000000015b0 $d
           ps2_kbd.s:567    .text:00000000000015b4 _KBD_RST
           ps2_kbd.s:567    .text:00000000000015bc $t
           ps2_kbd.s:567    .text:00000000000015bc KBD_RST
           ps2_kbd.s:591    .text:0000000000001604 $d
           ps2_kbd.s:591    .text:0000000000001608 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001610 $t
           ps2_kbd.s:591    .text:0000000000001610 KBD_LED
           ps2_kbd.s:616    .text:0000000000001662 $d
           ps2_kbd.s:616    .text:0000000000001666 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001670 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001698 $d
           ps2_kbd.s:633    .text:000000000000169c _WKEY
ARM GAS  forth.s 			page 168


           ps2_kbd.s:633    .text:00000000000016a8 WKEY
           ps2_kbd.s:635    .text:00000000000016ac $d
           ps2_kbd.s:640    .text:00000000000016c4 $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016e4 $t
         spi-flash.s:83     .text:0000000000001786 $d
         spi-flash.s:83     .text:000000000000178a _CHIP_SEL
         spi-flash.s:83     .text:0000000000001794 CHIP_SEL
         spi-flash.s:95     .text:00000000000017b0 $d
         spi-flash.s:95     .text:00000000000017b4 _CHIP_DSEL
         spi-flash.s:95     .text:00000000000017be $t
         spi-flash.s:95     .text:00000000000017c0 CHIP_DSEL
         spi-flash.s:111    .text:00000000000017ec $d
         spi-flash.s:111    .text:00000000000017f0 _RD_BYTE
         spi-flash.s:111    .text:00000000000017f8 $t
         spi-flash.s:111    .text:00000000000017f8 RD_BYTE
         spi-flash.s:131    .text:000000000000181e $d
         spi-flash.s:131    .text:0000000000001822 _WR_BYTE
         spi-flash.s:131    .text:000000000000182a $t
         spi-flash.s:131    .text:000000000000182c WR_BYTE
         spi-flash.s:149    .text:000000000000184e $d
         spi-flash.s:149    .text:0000000000001852 _WR_DIS
         spi-flash.s:149    .text:000000000000185c WR_DIS
         spi-flash.s:151    .text:0000000000001860 $d
         spi-flash.s:161    .text:000000000000187c _WR_ENBL
         spi-flash.s:161    .text:0000000000001884 $t
         spi-flash.s:161    .text:0000000000001884 WR_ENBL
         spi-flash.s:163    .text:0000000000001888 $d
         spi-flash.s:173    .text:00000000000018a4 _RD_SR
         spi-flash.s:173    .text:00000000000018aa $t
         spi-flash.s:173    .text:00000000000018ac RD_SR
         spi-flash.s:175    .text:00000000000018b0 $d
         spi-flash.s:183    .text:00000000000018d4 sr_cmd
         spi-flash.s:189    .text:00000000000018db _SEND_ADR
         spi-flash.s:189    .text:00000000000018e4 $t
         spi-flash.s:189    .text:00000000000018e4 SEND_ADR
         spi-flash.s:191    .text:00000000000018e8 $d
             forth.s:511    .text:0000000000001fd8 RSHIFT
         spi-flash.s:206    .text:000000000000191c _WAIT_DONE
         spi-flash.s:206    .text:0000000000001926 $t
         spi-flash.s:206    .text:0000000000001928 WAIT_DONE
         spi-flash.s:208    .text:000000000000192c $d
         spi-flash.s:221    .text:000000000000195c _ERASE_BLK
         spi-flash.s:221    .text:0000000000001966 $t
         spi-flash.s:221    .text:0000000000001968 ERASE_BLK
         spi-flash.s:223    .text:000000000000196c $d
         spi-flash.s:236    .text:0000000000001994 _ERASE_CHIP
         spi-flash.s:236    .text:00000000000019a0 ERASE_CHIP
         spi-flash.s:238    .text:00000000000019a4 $d
         spi-flash.s:254    .text:00000000000019d4 _RD_BLK
         spi-flash.s:254    .text:00000000000019dc RD_BLK
         spi-flash.s:256    .text:00000000000019e0 $d
         spi-flash.s:276    .text:0000000000001a28 _WR_BLK
         spi-flash.s:276    .text:0000000000001a30 WR_BLK
ARM GAS  forth.s 			page 169


         spi-flash.s:278    .text:0000000000001a34 $d
             forth.s:1930   .text:0000000000002d34 DOTH
             float.s:58     .text:0000000000001a88 PREP_FP
             float.s:59     .text:0000000000001a88 $t
             float.s:75     .text:0000000000001aa0 $d
             float.s:75     .text:0000000000001aa4 _BCD_ADD
             float.s:75     .text:0000000000001aac BCD_ADD
             float.s:106    .text:0000000000001af6 $d
             float.s:106    .text:0000000000001afa _FPLUS
             float.s:106    .text:0000000000001b00 FPLUS
             float.s:109    .text:0000000000001b04 $d
             float.s:115    .text:0000000000001b0c _FMINUS
             float.s:115    .text:0000000000001b10 FMINUS
             float.s:118    .text:0000000000001b14 $d
             float.s:129    .text:0000000000001b1c _FSLH
             float.s:129    .text:0000000000001b20 FSLH
             float.s:132    .text:0000000000001b24 $d
             float.s:139    .text:0000000000001b2c _FNEG
             float.s:139    .text:0000000000001b34 $t
             float.s:139    .text:0000000000001b34 FNEG
             float.s:142    .text:0000000000001b38 $d
             float.s:148    .text:0000000000001b40 _INT
             float.s:148    .text:0000000000001b44 $t
             float.s:148    .text:0000000000001b44 INT
             float.s:151    .text:0000000000001b48 $d
             float.s:157    .text:0000000000001b50 _UFLOAT
             float.s:157    .text:0000000000001b58 UFLOAT
             float.s:160    .text:0000000000001b5c $d
             float.s:166    .text:0000000000001b64 _FDOT
             float.s:166    .text:0000000000001b68 FDOT
             float.s:169    .text:0000000000001b6c $d
             float.s:176    .text:0000000000001b70 IS_BASE10
             float.s:177    .text:0000000000001b70 $t
             float.s:194    .text:0000000000001b8a PARSE_PREDCIM
             float.s:200    .text:0000000000001b8a PARSE_DECIM
             float.s:231    .text:0000000000001bd0 $d
             float.s:231    .text:0000000000001bd4 _FLOATQ
             float.s:231    .text:0000000000001bdc FLOATQ
             float.s:233    .text:0000000000001be0 $d
             float.s:254    .text:0000000000001c44 fraction
             float.s:245    .text:0000000000001c1c try_e
             float.s:260    .text:0000000000001c54 exponent
             float.s:249    .text:0000000000001c30 not_float
             float.s:271    .text:0000000000001c5c _NUMBER
             float.s:271    .text:0000000000001c64 NUMBER
             float.s:273    .text:0000000000001c68 $d
             forth.s:1660   .text:0000000000002a2c NUMBQ
             forth.s:80     .text:0000000000001c84 $t
             forth.s:103    .text:0000000000001c9c COMPI_NEST
             forth.s:116    .text:0000000000001cba TSTDIN
             forth.s:123    .text:0000000000001cc4 TSTDOUT
             forth.s:132    .text:0000000000001cce $d
             forth.s:132    .text:0000000000001cd2 _QKEY
             forth.s:132    .text:0000000000001cd8 QKEY
             forth.s:134    .text:0000000000001cdc $d
             forth.s:1351   .text:00000000000026e8 ATEXE
             forth.s:142    .text:0000000000001cec _KEY
ARM GAS  forth.s 			page 170


             forth.s:142    .text:0000000000001cf0 $t
             forth.s:142    .text:0000000000001cf0 KEY
             forth.s:144    .text:0000000000001cf4 KEY1
             forth.s:145    .text:0000000000001cf4 $d
             forth.s:154    .text:0000000000001d0c _EMIT
             forth.s:156    .text:0000000000001d18 $d
             forth.s:190    .text:0000000000001d28 _RAND
             forth.s:190    .text:0000000000001d30 RAND
             forth.s:192    .text:0000000000001d34 $d
             forth.s:756    .text:00000000000021c8 ABSS
             forth.s:932    .text:0000000000002308 SEED
             forth.s:1202   .text:000000000000256c MODD
             forth.s:221    .text:0000000000001da4 _PAUSE
             forth.s:221    .text:0000000000001daa $t
             forth.s:221    .text:0000000000001dac PAUSE
             forth.s:223    .text:0000000000001db0 $d
             forth.s:950    .text:0000000000002330 TIMER
             forth.s:225    .text:0000000000001db8 PAUSE_LOOP
             forth.s:230    .text:0000000000001dd0 PAUSE_EXIT
             forth.s:237    .text:0000000000001dd8 _ULED
             forth.s:237    .text:0000000000001de0 ULED
             forth.s:246    .text:0000000000001dfc ULED_OFF
             forth.s:260    .text:0000000000001e00 $d
             forth.s:260    .text:0000000000001e04 _NOP
             forth.s:260    .text:0000000000001e08 $t
             forth.s:260    .text:0000000000001e08 NOP
             forth.s:277    .text:0000000000001e14 $d
             forth.s:277    .text:0000000000001e18 _EXECU
             forth.s:277    .text:0000000000001e20 $t
             forth.s:277    .text:0000000000001e20 EXECU
             forth.s:297    .text:0000000000001e3c NEXT1
             forth.s:315    .text:0000000000001e58 QBRAN1
             forth.s:332    .text:0000000000001e64 $d
             forth.s:332    .text:0000000000001e68 _EXIT
             forth.s:332    .text:0000000000001e70 EXIT
             forth.s:333    .text:0000000000001e70 $d
             forth.s:339    .text:0000000000001e78 _STORE
             forth.s:339    .text:0000000000001e7a $t
             forth.s:349    .text:0000000000001e88 $d
             forth.s:349    .text:0000000000001e8c _AT
             forth.s:349    .text:0000000000001e8e $t
             forth.s:357    .text:0000000000001e94 $d
             forth.s:357    .text:0000000000001e98 _CSTOR
             forth.s:367    .text:0000000000001ea8 $d
             forth.s:367    .text:0000000000001eac _CAT
             forth.s:375    .text:0000000000001eb4 $d
             forth.s:375    .text:0000000000001eb8 _RFROM
             forth.s:384    .text:0000000000001ec6 $d
             forth.s:384    .text:0000000000001eca _RAT
             forth.s:393    .text:0000000000001eda $d
             forth.s:393    .text:0000000000001ede _TOR
             forth.s:402    .text:0000000000001eee $d
             forth.s:402    .text:0000000000001ef2 _RPSTOR
             forth.s:402    .text:0000000000001ef6 $t
             forth.s:402    .text:0000000000001ef8 RPSTOR
             forth.s:411    .text:0000000000001f00 $d
             forth.s:411    .text:0000000000001f04 _SPSTOR
ARM GAS  forth.s 			page 171


             forth.s:411    .text:0000000000001f08 $t
             forth.s:411    .text:0000000000001f08 SPSTOR
             forth.s:420    .text:0000000000001f10 $d
             forth.s:420    .text:0000000000001f14 _SPAT
             forth.s:420    .text:0000000000001f18 $t
             forth.s:420    .text:0000000000001f18 SPAT
             forth.s:429    .text:0000000000001f20 $d
             forth.s:429    .text:0000000000001f24 _DROP
             forth.s:437    .text:0000000000001f32 $d
             forth.s:437    .text:0000000000001f36 _DUPP
             forth.s:437    .text:0000000000001f3a $t
             forth.s:445    .text:0000000000001f42 $d
             forth.s:445    .text:0000000000001f46 _SWAP
             forth.s:455    .text:0000000000001f54 $d
             forth.s:455    .text:0000000000001f58 _OVER
             forth.s:464    .text:0000000000001f68 $d
             forth.s:464    .text:0000000000001f6c _ZLESS
             forth.s:464    .text:0000000000001f70 ZLESS
             forth.s:472    .text:0000000000001f76 $d
             forth.s:472    .text:0000000000001f7a _ANDD
             forth.s:472    .text:0000000000001f7e $t
             forth.s:481    .text:0000000000001f8a $d
             forth.s:481    .text:0000000000001f8e _ORR
             forth.s:490    .text:0000000000001f9e $d
             forth.s:490    .text:0000000000001fa2 _XORR
             forth.s:490    .text:0000000000001fa6 $t
             forth.s:499    .text:0000000000001fb2 $d
             forth.s:499    .text:0000000000001fb6 _UPLUS
             forth.s:499    .text:0000000000001fba $t
             forth.s:499    .text:0000000000001fbc UPLUS
             forth.s:511    .text:0000000000001fcc $d
             forth.s:511    .text:0000000000001fd0 _RSHIFT
             forth.s:520    .text:0000000000001fe2 $d
             forth.s:520    .text:0000000000001fe6 _LSHIFT
             forth.s:529    .text:0000000000001ffa $d
             forth.s:529    .text:0000000000001ffe _PLUS
             forth.s:529    .text:0000000000002000 $t
             forth.s:538    .text:0000000000002008 $d
             forth.s:538    .text:000000000000200c _SUBB
             forth.s:538    .text:000000000000200e $t
             forth.s:547    .text:000000000000201a $d
             forth.s:547    .text:000000000000201e _STAR
             forth.s:547    .text:0000000000002020 $t
             forth.s:556    .text:000000000000202a $d
             forth.s:556    .text:000000000000202e _UMSTA
             forth.s:556    .text:0000000000002032 $t
             forth.s:556    .text:0000000000002034 UMSTA
             forth.s:567    .text:0000000000002040 $d
             forth.s:567    .text:0000000000002044 _MSTAR
             forth.s:567    .text:0000000000002048 MSTAR
             forth.s:578    .text:0000000000002054 $d
             forth.s:578    .text:0000000000002058 _ONEP
             forth.s:586    .text:0000000000002062 $d
             forth.s:586    .text:0000000000002066 _ONEM
             forth.s:594    .text:0000000000002072 $d
             forth.s:594    .text:0000000000002076 _TWOP
             forth.s:594    .text:000000000000207c TWOP
ARM GAS  forth.s 			page 172


             forth.s:602    .text:0000000000002082 $d
             forth.s:602    .text:0000000000002086 _TWOM
             forth.s:602    .text:000000000000208c TWOM
             forth.s:610    .text:0000000000002092 $d
             forth.s:610    .text:0000000000002096 _CELLP
             forth.s:610    .text:000000000000209c $t
             forth.s:610    .text:000000000000209c CELLP
             forth.s:618    .text:00000000000020a2 $d
             forth.s:618    .text:00000000000020a6 _CELLM
             forth.s:618    .text:00000000000020ac $t
             forth.s:618    .text:00000000000020ac CELLM
             forth.s:626    .text:00000000000020b2 $d
             forth.s:626    .text:00000000000020b6 _BLANK
             forth.s:626    .text:00000000000020bc BLANK
             forth.s:635    .text:00000000000020c6 $d
             forth.s:635    .text:00000000000020ca _CELLS
             forth.s:635    .text:00000000000020d0 $t
             forth.s:635    .text:00000000000020d0 CELLS
             forth.s:643    .text:00000000000020d6 $d
             forth.s:643    .text:00000000000020da _CELLSL
             forth.s:643    .text:00000000000020e0 $t
             forth.s:643    .text:00000000000020e0 CELLSL
             forth.s:651    .text:00000000000020e6 $d
             forth.s:651    .text:00000000000020ea _TWOST
             forth.s:651    .text:00000000000020f0 TWOST
             forth.s:659    .text:00000000000020f6 $d
             forth.s:659    .text:00000000000020fa _TWOSL
             forth.s:667    .text:0000000000002106 $d
             forth.s:667    .text:000000000000210a _QDUP
             forth.s:677    .text:000000000000211a $d
             forth.s:677    .text:000000000000211e _ROT
             forth.s:677    .text:0000000000002122 $t
             forth.s:688    .text:000000000000212e $d
             forth.s:688    .text:0000000000002132 _NROT
             forth.s:688    .text:0000000000002138 NROT
             forth.s:699    .text:0000000000002142 $d
             forth.s:699    .text:0000000000002146 _DDROP
             forth.s:699    .text:000000000000214c $t
             forth.s:708    .text:0000000000002156 $d
             forth.s:708    .text:000000000000215a _TDROP
             forth.s:708    .text:0000000000002160 $t
             forth.s:717    .text:000000000000216a $d
             forth.s:717    .text:000000000000216e _DDUP
             forth.s:727    .text:0000000000002180 $d
             forth.s:727    .text:0000000000002184 _DPLUS
             forth.s:727    .text:0000000000002188 DPLUS
             forth.s:740    .text:000000000000219c $d
             forth.s:740    .text:00000000000021a0 _INVER
             forth.s:740    .text:00000000000021a4 $t
             forth.s:740    .text:00000000000021a4 INVER
             forth.s:748    .text:00000000000021aa $d
             forth.s:748    .text:00000000000021ae _NEGAT
             forth.s:748    .text:00000000000021b8 NEGAT
             forth.s:756    .text:00000000000021be $d
             forth.s:756    .text:00000000000021c2 _ABSS
             forth.s:756    .text:00000000000021c6 $t
             forth.s:766    .text:00000000000021d2 $d
ARM GAS  forth.s 			page 173


             forth.s:766    .text:00000000000021d6 _ZEQUAL
             forth.s:766    .text:00000000000021dc ZEQUAL
             forth.s:777    .text:00000000000021ea $d
             forth.s:777    .text:00000000000021ee _EQUAL
             forth.s:777    .text:00000000000021f0 $t
             forth.s:789    .text:0000000000002200 $d
             forth.s:789    .text:0000000000002204 _ULESS
             forth.s:801    .text:0000000000002218 $d
             forth.s:801    .text:000000000000221c _LESS
             forth.s:801    .text:000000000000221e $t
             forth.s:801    .text:0000000000002220 LESS
             forth.s:813    .text:0000000000002230 $d
             forth.s:813    .text:0000000000002234 _GREAT
             forth.s:813    .text:0000000000002236 $t
             forth.s:813    .text:0000000000002238 GREAT
             forth.s:825    .text:0000000000002248 $d
             forth.s:825    .text:000000000000224c _MAX
             forth.s:825    .text:0000000000002250 $t
             forth.s:825    .text:0000000000002250 MAX
             forth.s:836    .text:000000000000225c $d
             forth.s:836    .text:0000000000002260 _MIN
             forth.s:836    .text:0000000000002264 $t
             forth.s:836    .text:0000000000002264 MIN
             forth.s:847    .text:0000000000002270 $d
             forth.s:847    .text:0000000000002274 _PSTOR
             forth.s:847    .text:0000000000002278 PSTOR
             forth.s:859    .text:0000000000002288 $d
             forth.s:859    .text:000000000000228c _DSTOR
             forth.s:859    .text:0000000000002290 DSTOR
             forth.s:871    .text:00000000000022a4 $d
             forth.s:871    .text:00000000000022a8 _DAT
             forth.s:871    .text:00000000000022ac DAT
             forth.s:881    .text:00000000000022b6 $d
             forth.s:881    .text:00000000000022ba _COUNT
             forth.s:881    .text:00000000000022c0 $t
             forth.s:891    .text:00000000000022cc $d
             forth.s:891    .text:00000000000022d0 _DNEGA
             forth.s:891    .text:00000000000022d8 $t
             forth.s:891    .text:00000000000022d8 DNEGA
             forth.s:908    .text:00000000000022e8 DOVAR
             forth.s:919    .text:00000000000022f4 DOCON
             forth.s:932    .text:00000000000022fe $d
             forth.s:932    .text:0000000000002302 _SEED
             forth.s:941    .text:0000000000002312 $d
             forth.s:941    .text:0000000000002316 _MSEC
             forth.s:941    .text:000000000000231c MSEC
             forth.s:950    .text:0000000000002326 $d
             forth.s:950    .text:000000000000232a _TIMER
             forth.s:950    .text:0000000000002330 $t
             forth.s:959    .text:000000000000233a $d
             forth.s:959    .text:000000000000233e _TBOOT
             forth.s:959    .text:0000000000002344 $t
             forth.s:959    .text:0000000000002344 TBOOT
             forth.s:968    .text:000000000000234e $d
             forth.s:968    .text:0000000000002352 _BASE
             forth.s:978    .text:0000000000002362 TEMP
             forth.s:987    .text:000000000000236c $d
ARM GAS  forth.s 			page 174


             forth.s:987    .text:0000000000002370 _SPAN
             forth.s:987    .text:0000000000002378 SPAN
             forth.s:996    .text:0000000000002382 $d
             forth.s:996    .text:0000000000002386 _INN
             forth.s:996    .text:000000000000238a $t
             forth.s:996    .text:000000000000238c INN
             forth.s:1006   .text:0000000000002396 $d
             forth.s:1006   .text:000000000000239a _NTIB
             forth.s:1006   .text:00000000000023a0 NTIB
             forth.s:1015   .text:00000000000023aa $d
             forth.s:1015   .text:00000000000023ae _TEVAL
             forth.s:1015   .text:00000000000023b4 $t
             forth.s:1015   .text:00000000000023b4 TEVAL
             forth.s:1025   .text:00000000000023be $d
             forth.s:1025   .text:00000000000023c2 _HLD
             forth.s:1025   .text:00000000000023c6 $t
             forth.s:1025   .text:00000000000023c8 HLD
             forth.s:1035   .text:00000000000023d2 $d
             forth.s:1035   .text:00000000000023d6 _CNTXT
             forth.s:1035   .text:00000000000023de $t
             forth.s:1035   .text:00000000000023e0 CNTXT
             forth.s:1036   .text:00000000000023e0 CRRNT
             forth.s:1046   .text:00000000000023ea $d
             forth.s:1046   .text:00000000000023ee _CPP
             forth.s:1046   .text:00000000000023f4 CPP
             forth.s:1056   .text:00000000000023fe $d
             forth.s:1056   .text:0000000000002402 _FCP
             forth.s:1056   .text:0000000000002406 $t
             forth.s:1056   .text:0000000000002408 FCP
             forth.s:1066   .text:0000000000002412 $d
             forth.s:1066   .text:0000000000002416 _LAST
             forth.s:1066   .text:000000000000241c LAST
             forth.s:1080   .text:0000000000002426 $d
             forth.s:1080   .text:000000000000242a _USER_BEGIN
             forth.s:1080   .text:0000000000002438 USER_BEGIN
             forth.s:1084   .text:0000000000002440 USR_BGN_ADR
             forth.s:1085   .text:0000000000002440 $d
             forth.s:1091   .text:0000000000002448 _USER_END
             forth.s:1091   .text:0000000000002454 USER_END
             forth.s:1095   .text:000000000000245c USER_END_ADR
             forth.s:1096   .text:000000000000245c $d
             forth.s:1108   .text:0000000000002464 _WITHI
             forth.s:1108   .text:000000000000246c WITHI
             forth.s:1110   .text:0000000000002470 $d
             forth.s:1125   .text:0000000000002490 _UMMOD
             forth.s:1125   .text:0000000000002498 UMMOD
             forth.s:1129   .text:00000000000024a2 UMMOD0
             forth.s:1136   .text:00000000000024b2 UMMOD1
             forth.s:1142   .text:00000000000024bc UMMOD2
             forth.s:1155   .text:00000000000024c8 $d
             forth.s:1155   .text:00000000000024cc _MSMOD
             forth.s:1155   .text:00000000000024d2 $t
             forth.s:1155   .text:00000000000024d4 MSMOD
             forth.s:1157   .text:00000000000024d8 $d
             forth.s:1166   .text:0000000000002500 MMOD1
             forth.s:1173   .text:000000000000251c MMOD2
             forth.s:1181   .text:000000000000253c MMOD3
ARM GAS  forth.s 			page 175


             forth.s:1189   .text:0000000000002544 _SLMOD
             forth.s:1191   .text:0000000000002550 $d
             forth.s:1202   .text:0000000000002568 _MODD
             forth.s:1202   .text:000000000000256c $t
             forth.s:1204   .text:0000000000002570 $d
             forth.s:1213   .text:0000000000002580 _SLASH
             forth.s:1213   .text:0000000000002582 $t
             forth.s:1213   .text:0000000000002584 SLASH
             forth.s:1215   .text:0000000000002588 $d
             forth.s:1226   .text:000000000000259c _SSMOD
             forth.s:1226   .text:00000000000025a2 $t
             forth.s:1226   .text:00000000000025a4 SSMOD
             forth.s:1228   .text:00000000000025a8 $d
             forth.s:1240   .text:00000000000025c0 _STASL
             forth.s:1240   .text:00000000000025c4 STASL
             forth.s:1242   .text:00000000000025c8 $d
             forth.s:1256   .text:00000000000025dc _ALGND
             forth.s:1256   .text:00000000000025e4 $t
             forth.s:1256   .text:00000000000025e4 ALGND
             forth.s:1267   .text:00000000000025f4 $d
             forth.s:1267   .text:00000000000025f8 _TCHAR
             forth.s:1267   .text:00000000000025fe $t
             forth.s:1267   .text:0000000000002600 TCHAR
             forth.s:1269   .text:0000000000002604 $d
             forth.s:1279   .text:000000000000263c TCHA1
             forth.s:1287   .text:0000000000002644 _DEPTH
             forth.s:1287   .text:000000000000264a $t
             forth.s:1287   .text:000000000000264c DEPTH
             forth.s:1299   .text:0000000000002664 $d
             forth.s:1299   .text:0000000000002668 _PICK
             forth.s:1299   .text:0000000000002670 PICK
             forth.s:1301   .text:0000000000002674 $d
             forth.s:1317   .text:0000000000002690 _HERE
             forth.s:1317   .text:0000000000002698 HERE
             forth.s:1319   .text:000000000000269c $d
             forth.s:1328   .text:00000000000026ac _PAD
             forth.s:1328   .text:00000000000026b0 $t
             forth.s:1330   .text:00000000000026b4 $d
             forth.s:1341   .text:00000000000026cc _TIB
             forth.s:1341   .text:00000000000026d0 $t
             forth.s:1341   .text:00000000000026d0 TIB
             forth.s:1351   .text:00000000000026da $d
             forth.s:1351   .text:00000000000026de _ATEXE
             forth.s:1364   .text:00000000000026fc $d
             forth.s:1364   .text:0000000000002700 _CMOVE
             forth.s:1364   .text:0000000000002706 $t
             forth.s:1364   .text:0000000000002708 CMOVE
             forth.s:1371   .text:000000000000271a CMOV1
             forth.s:1368   .text:0000000000002712 CMOV0
             forth.s:1376   .text:0000000000002724 CMOV2
             forth.s:1384   .text:000000000000272c $d
             forth.s:1384   .text:0000000000002730 _MOVE
             forth.s:1402   .text:0000000000002762 MOVE1
             forth.s:1399   .text:000000000000275e MOVE3
             forth.s:1396   .text:000000000000275a MOVE0
             forth.s:1407   .text:000000000000276c MOVE2
             forth.s:1416   .text:0000000000002774 $d
ARM GAS  forth.s 			page 176


             forth.s:1416   .text:0000000000002778 _FILL
             forth.s:1424   .text:000000000000278e FILL2
             forth.s:1420   .text:0000000000002786 FILL1
             forth.s:1434   .text:0000000000002796 $d
             forth.s:1434   .text:000000000000279a _PACKS
             forth.s:1434   .text:00000000000027a0 $t
             forth.s:1434   .text:00000000000027a0 PACKS
             forth.s:1436   .text:00000000000027a4 $d
             forth.s:1465   .text:00000000000027fc _DIGIT
             forth.s:1465   .text:0000000000002802 $t
             forth.s:1465   .text:0000000000002804 DIGIT
             forth.s:1467   .text:0000000000002808 $d
             forth.s:1482   .text:000000000000283c _EXTRC
             forth.s:1482   .text:0000000000002844 $t
             forth.s:1482   .text:0000000000002844 EXTRC
             forth.s:1484   .text:0000000000002848 $d
             forth.s:1496   .text:0000000000002868 _BDIGS
             forth.s:1496   .text:000000000000286c BDIGS
             forth.s:1498   .text:0000000000002870 $d
             forth.s:1508   .text:0000000000002884 _HOLD
             forth.s:1510   .text:0000000000002890 $d
             forth.s:1526   .text:00000000000028b4 _DIG
             forth.s:1526   .text:00000000000028b6 $t
             forth.s:1526   .text:00000000000028b8 DIG
             forth.s:1528   .text:00000000000028bc $d
             forth.s:1540   .text:00000000000028d4 _DIGS
             forth.s:1540   .text:00000000000028d8 DIGS
             forth.s:1542   .text:00000000000028dc DIGS1
             forth.s:1543   .text:00000000000028dc $d
             forth.s:1547   .text:00000000000028f4 DIGS2
             forth.s:1556   .text:00000000000028fc _SIGN
             forth.s:1556   .text:0000000000002904 SIGN
             forth.s:1558   .text:0000000000002908 $d
             forth.s:1562   .text:0000000000002920 SIGN1
             forth.s:1570   .text:0000000000002928 _EDIGS
             forth.s:1570   .text:000000000000292c EDIGS
             forth.s:1572   .text:0000000000002930 $d
             forth.s:1587   .text:000000000000294c STRR
             forth.s:1588   .text:000000000000294c $t
             forth.s:1589   .text:0000000000002950 $d
             forth.s:1605   .text:0000000000002978 _HEX
             forth.s:1605   .text:000000000000297c $t
             forth.s:1605   .text:000000000000297c HEX
             forth.s:1607   .text:0000000000002980 $d
             forth.s:1617   .text:0000000000002998 _DECIM
             forth.s:1617   .text:00000000000029a0 $t
             forth.s:1617   .text:00000000000029a0 DECIM
             forth.s:1619   .text:00000000000029a4 $d
             forth.s:1634   .text:00000000000029bc _DIGTQ
             forth.s:1634   .text:00000000000029c4 DIGTQ
             forth.s:1636   .text:00000000000029c8 $d
             forth.s:1649   .text:0000000000002a10 DGTQ1
             forth.s:1660   .text:0000000000002a24 _NUMBQ
             forth.s:1660   .text:0000000000002a2c $t
             forth.s:1662   .text:0000000000002a30 $d
             forth.s:1678   .text:0000000000002a7c NUMQ1
             forth.s:1726   .text:0000000000002b44 NUMQ6
ARM GAS  forth.s 			page 177


             forth.s:1694   .text:0000000000002ac0 NUMQ2
             forth.s:1718   .text:0000000000002b28 NUMQ4
             forth.s:1715   .text:0000000000002b1c NUMQ3
             forth.s:1724   .text:0000000000002b40 NUMQ5
             forth.s:1744   .text:0000000000002b60 _SPACE
             forth.s:1744   .text:0000000000002b66 $t
             forth.s:1746   .text:0000000000002b6c $d
             forth.s:1755   .text:0000000000002b7c _SPACS
             forth.s:1755   .text:0000000000002b84 SPACS
             forth.s:1757   .text:0000000000002b88 $d
             forth.s:1763   .text:0000000000002ba4 CHAR2
             forth.s:1761   .text:0000000000002ba0 CHAR1
             forth.s:1772   .text:0000000000002bb4 _TYPEE
             forth.s:1774   .text:0000000000002bc0 $d
             forth.s:1780   .text:0000000000002bd8 TYPE2
             forth.s:1776   .text:0000000000002bcc TYPE1
             forth.s:1790   .text:0000000000002bec _CR
             forth.s:1792   .text:0000000000002bf4 $d
             forth.s:1804   .text:0000000000002c10 DOSTR
             forth.s:1805   .text:0000000000002c10 $t
             forth.s:1807   .text:0000000000002c14 $d
             forth.s:1825   .text:0000000000002c3c STRQP
             forth.s:1826   .text:0000000000002c3c $t
             forth.s:1827   .text:0000000000002c40 $d
             forth.s:1836   .text:0000000000002c48 DOTST
             forth.s:1837   .text:0000000000002c48 $t
             forth.s:1838   .text:0000000000002c4c $d
             forth.s:1848   .text:0000000000002c58 DOTQP
             forth.s:1849   .text:0000000000002c58 $t
             forth.s:1850   .text:0000000000002c5c $d
             forth.s:1860   .text:0000000000002c6c _DOTR
             forth.s:1860   .text:0000000000002c70 DOTR
             forth.s:1862   .text:0000000000002c74 $d
             forth.s:1877   .text:0000000000002c98 _UDOTR
             forth.s:1877   .text:0000000000002c9c $t
             forth.s:1877   .text:0000000000002c9c UDOTR
             forth.s:1879   .text:0000000000002ca0 $d
             forth.s:1895   .text:0000000000002ccc _UDOT
             forth.s:1895   .text:0000000000002cd0 UDOT
             forth.s:1897   .text:0000000000002cd4 $d
             forth.s:1910   .text:0000000000002cf0 _DOT
             forth.s:1910   .text:0000000000002cf2 $t
             forth.s:1912   .text:0000000000002cf8 $d
             forth.s:1919   .text:0000000000002d1c DOT1
             forth.s:1930   .text:0000000000002d30 _DOTH
             forth.s:1932   .text:0000000000002d38 $d
             forth.s:1947   .text:0000000000002d5c _QUEST
             forth.s:1947   .text:0000000000002d5e $t
             forth.s:1947   .text:0000000000002d60 QUEST
             forth.s:1949   .text:0000000000002d64 $d
             forth.s:1963   .text:0000000000002d70 PARS
             forth.s:1964   .text:0000000000002d70 $t
             forth.s:1965   .text:0000000000002d74 $d
             forth.s:2031   .text:0000000000002e84 PARS8
             forth.s:1995   .text:0000000000002df8 PARS3
             forth.s:1978   .text:0000000000002db0 PARS1
             forth.s:1993   .text:0000000000002df4 PARS2
ARM GAS  forth.s 			page 178


             forth.s:1999   .text:0000000000002e04 PARS4
             forth.s:2011   .text:0000000000002e34 PARS5
             forth.s:2018   .text:0000000000002e58 PARS6
             forth.s:2024   .text:0000000000002e6c PARS7
             forth.s:2042   .text:0000000000002e98 _PARSE
             forth.s:2042   .text:0000000000002e9e $t
             forth.s:2042   .text:0000000000002ea0 PARSE
             forth.s:2044   .text:0000000000002ea4 $d
             forth.s:2065   .text:0000000000002ee4 _DOTPR
             forth.s:2065   .text:0000000000002ee8 DOTPR
             forth.s:2067   .text:0000000000002eec $d
             forth.s:2078   .text:0000000000002f04 _PAREN
             forth.s:2078   .text:0000000000002f06 $t
             forth.s:2078   .text:0000000000002f08 PAREN
             forth.s:2080   .text:0000000000002f0c $d
             forth.s:2091   .text:0000000000002f24 _BKSLA
             forth.s:2091   .text:0000000000002f26 $t
             forth.s:2091   .text:0000000000002f28 BKSLA
             forth.s:2093   .text:0000000000002f2c $d
             forth.s:2104   .text:0000000000002f44 _CHAR
             forth.s:2104   .text:0000000000002f4c CHAR
             forth.s:2106   .text:0000000000002f50 $d
             forth.s:2117   .text:0000000000002f68 _WORDD
             forth.s:2117   .text:0000000000002f70 WORDD
             forth.s:2119   .text:0000000000002f74 $d
             forth.s:2131   .text:0000000000002f8c _TOKEN
             forth.s:2131   .text:0000000000002f92 $t
             forth.s:2131   .text:0000000000002f94 TOKEN
             forth.s:2133   .text:0000000000002f98 $d
             forth.s:2275   .text:000000000000313c UPPER
             forth.s:2147   .text:0000000000002fac _NAMET
             forth.s:2147   .text:0000000000002fb2 $t
             forth.s:2147   .text:0000000000002fb4 NAMET
             forth.s:2149   .text:0000000000002fb8 $d
             forth.s:2168   .text:0000000000002fd8 _SAMEQ
             forth.s:2168   .text:0000000000002fde $t
             forth.s:2168   .text:0000000000002fe0 SAMEQ
             forth.s:2170   .text:0000000000002fe4 $d
             forth.s:2187   .text:000000000000302c SAME2
             forth.s:2172   .text:0000000000002ff0 SAME1
             forth.s:2202   .text:0000000000003040 FIND
             forth.s:2203   .text:0000000000003040 $t
             forth.s:2204   .text:0000000000003044 $d
             forth.s:2211   .text:0000000000003060 FIND1
             forth.s:2231   .text:00000000000030b8 FIND6
             forth.s:2224   .text:00000000000030a0 FIND2
             forth.s:2229   .text:00000000000030b0 FIND3
             forth.s:2238   .text:00000000000030d0 FIND4
             forth.s:2244   .text:00000000000030ec FIND5
             forth.s:2260   .text:0000000000003114 _NAMEQ
             forth.s:2260   .text:000000000000311a $t
             forth.s:2260   .text:000000000000311c NAMEQ
             forth.s:2262   .text:0000000000003120 $d
             forth.s:2275   .text:0000000000003134 _UPPER
             forth.s:2275   .text:000000000000313a $t
             forth.s:2277   .text:0000000000003140 $d
             forth.s:2308   .text:00000000000031c4 BKSP
ARM GAS  forth.s 			page 179


             forth.s:2309   .text:00000000000031c4 $t
             forth.s:2310   .text:00000000000031c8 $d
             forth.s:2324   .text:000000000000320c BACK1
             forth.s:2333   .text:0000000000003210 TAP
             forth.s:2334   .text:0000000000003210 $t
             forth.s:2335   .text:0000000000003214 $d
             forth.s:2348   .text:000000000000322c KTAP
             forth.s:2349   .text:000000000000322c TTAP
             forth.s:2350   .text:000000000000322c $t
             forth.s:2351   .text:0000000000003230 $d
             forth.s:2365   .text:0000000000003270 KTAP2
             forth.s:2362   .text:0000000000003268 KTAP1
             forth.s:2377   .text:0000000000003288 _ACCEP
             forth.s:2379   .text:0000000000003294 $d
             forth.s:2382   .text:00000000000032a0 ACCP1
             forth.s:2398   .text:00000000000032e8 ACCP4
             forth.s:2394   .text:00000000000032dc ACCP2
             forth.s:2396   .text:00000000000032e0 ACCP3
             forth.s:2409   .text:00000000000032fc _QUERY
             forth.s:2409   .text:0000000000003302 $t
             forth.s:2409   .text:0000000000003304 QUERY
             forth.s:2411   .text:0000000000003308 $d
             forth.s:2431   .text:000000000000333c _ABORT
             forth.s:2431   .text:0000000000003342 $t
             forth.s:2431   .text:0000000000003344 ABORT
             forth.s:2433   .text:0000000000003348 ABORT1
             forth.s:2434   .text:0000000000003348 $d
             forth.s:2565   .text:00000000000034ec QUIT
             forth.s:2449   .text:0000000000003370 ABORQ
             forth.s:2450   .text:0000000000003370 $t
             forth.s:2451   .text:0000000000003374 $d
             forth.s:2469   .text:0000000000003398 _INTER
             forth.s:2471   .text:00000000000033a8 $d
             forth.s:2480   .text:00000000000033e4 INTE1
             forth.s:2477   .text:00000000000033da $t
             forth.s:2478   .text:00000000000033dc $d
             forth.s:2484   .text:00000000000033f4 INTE2
             forth.s:2491   .text:00000000000033fc _LBRAC
             forth.s:2491   .text:00000000000033fe $t
             forth.s:2491   .text:0000000000003400 LBRAC
             forth.s:2493   .text:0000000000003404 $d
             forth.s:2503   .text:000000000000341c _DOTOK
             forth.s:2503   .text:0000000000003420 $t
             forth.s:2503   .text:0000000000003420 DOTOK
             forth.s:2505   .text:0000000000003424 $d
             forth.s:2511   .text:0000000000003448 DOTO1
             forth.s:2512   .text:0000000000003448 $d
             forth.s:2520   .text:0000000000003454 _QSTAC
             forth.s:2520   .text:000000000000345c QSTAC
             forth.s:2522   .text:0000000000003460 $d
             forth.s:2524   .text:0000000000003476 $t
             forth.s:2525   .text:0000000000003478 $d
             forth.s:2532   .text:0000000000003480 _EVAL
             forth.s:2534   .text:000000000000348c EVAL1
             forth.s:2535   .text:000000000000348c $d
             forth.s:2543   .text:00000000000034b4 EVAL2
             forth.s:2553   .text:00000000000034c4 _PRESE
ARM GAS  forth.s 			page 180


             forth.s:2555   .text:00000000000034d0 $d
             forth.s:2565   .text:00000000000034e4 _QUIT
             forth.s:2566   .text:00000000000034ec $d
             forth.s:2568   .text:00000000000034f8 QUIT1
             forth.s:2570   .text:00000000000034fc QUIT2
             forth.s:2580   .text:0000000000003510 _FORGET
             forth.s:2580   .text:0000000000003518 FORGET
             forth.s:2582   .text:000000000000351c $d
             forth.s:3079   .text:0000000000003ab4 OVERT
             forth.s:2610   .text:0000000000003564 $d
             forth.s:2610   .text:0000000000003568 _TICK
             forth.s:2610   .text:000000000000356a $t
             forth.s:2610   .text:000000000000356c TICK
             forth.s:2612   .text:0000000000003570 $d
             forth.s:2616   .text:0000000000003584 TICK1
             forth.s:2624   .text:000000000000358c _ALLOT
             forth.s:2624   .text:0000000000003592 $t
             forth.s:2624   .text:0000000000003594 ALLOT
             forth.s:2626   .text:0000000000003598 $d
             forth.s:2635   .text:00000000000035a8 _COMMA
             forth.s:2635   .text:00000000000035aa $t
             forth.s:2635   .text:00000000000035ac COMMA
             forth.s:2637   .text:00000000000035b0 $d
             forth.s:2651   .text:00000000000035cc $d
             forth.s:2651   .text:00000000000035d0 _BCOMP
             forth.s:2651   .text:00000000000035da $t
             forth.s:2651   .text:00000000000035dc BCOMP
             forth.s:2653   .text:00000000000035e0 $d
             forth.s:2663   .text:00000000000035f0 _COMPI
             forth.s:2663   .text:00000000000035f8 $t
             forth.s:2663   .text:00000000000035f8 COMPI
             forth.s:2665   .text:00000000000035fc $d
             forth.s:2681   .text:0000000000003628 _LITER
             forth.s:2681   .text:0000000000003630 $t
             forth.s:2681   .text:0000000000003630 LITER
             forth.s:2683   .text:0000000000003634 $d
             forth.s:3118   .text:0000000000003b10 CALLC
             forth.s:2693   .text:0000000000003648 STRCQ
             forth.s:2694   .text:0000000000003648 $t
             forth.s:2695   .text:000000000000364c $d
             forth.s:2717   .text:0000000000003684 _FOR
             forth.s:2717   .text:0000000000003688 $t
             forth.s:2717   .text:0000000000003688 FOR
             forth.s:2719   .text:000000000000368c $d
             forth.s:2728   .text:00000000000036a4 _DO
             forth.s:2728   .text:00000000000036a8 DO
             forth.s:2730   .text:00000000000036ac $d
             forth.s:2736   .text:00000000000036d8 DOPLOOP
             forth.s:2737   .text:00000000000036d8 $t
             forth.s:2753   .text:00000000000036fa $d
             forth.s:2753   .text:00000000000036fe _PLOOP
             forth.s:2753   .text:0000000000003704 $t
             forth.s:2753   .text:0000000000003704 PLOOP
             forth.s:2755   .text:0000000000003708 $d
             forth.s:2759   .text:000000000000371c DOLOOP
             forth.s:2760   .text:000000000000371c $t
             forth.s:2778   .text:0000000000003744 $d
ARM GAS  forth.s 			page 181


             forth.s:2778   .text:0000000000003748 _LOOP
             forth.s:2778   .text:0000000000003750 LOOP
             forth.s:2780   .text:0000000000003754 $d
             forth.s:2791   .text:000000000000376c _BEGIN
             forth.s:2791   .text:0000000000003772 $t
             forth.s:2791   .text:0000000000003774 BEGIN
             forth.s:2793   .text:0000000000003778 $d
             forth.s:2802   .text:0000000000003780 $d
             forth.s:2802   .text:0000000000003784 _FNEXT
             forth.s:2802   .text:000000000000378c FNEXT
             forth.s:2804   .text:0000000000003790 $d
             forth.s:2812   .text:00000000000037a8 _I
             forth.s:2812   .text:00000000000037aa $t
             forth.s:2812   .text:00000000000037ac I
             forth.s:2821   .text:00000000000037b8 $d
             forth.s:2821   .text:00000000000037bc _J
             forth.s:2821   .text:00000000000037be $t
             forth.s:2821   .text:00000000000037c0 J
             forth.s:2831   .text:00000000000037cc $d
             forth.s:2831   .text:00000000000037d0 _UNTIL
             forth.s:2831   .text:00000000000037d6 $t
             forth.s:2831   .text:00000000000037d8 UNTIL
             forth.s:2833   .text:00000000000037dc $d
             forth.s:2842   .text:00000000000037f4 _AGAIN
             forth.s:2842   .text:00000000000037fa $t
             forth.s:2842   .text:00000000000037fc AGAIN
             forth.s:2844   .text:0000000000003800 $d
             forth.s:2853   .text:0000000000003818 _IFF
             forth.s:2853   .text:000000000000381c IFF
             forth.s:2855   .text:0000000000003820 $d
             forth.s:2867   .text:0000000000003848 _AHEAD
             forth.s:2867   .text:000000000000384e $t
             forth.s:2867   .text:0000000000003850 AHEAD
             forth.s:2869   .text:0000000000003854 $d
             forth.s:2881   .text:000000000000387c _REPEA
             forth.s:2881   .text:0000000000003884 REPEA
             forth.s:2883   .text:0000000000003888 $d
             forth.s:2894   .text:00000000000038a0 _THENN
             forth.s:2894   .text:00000000000038a8 THENN
             forth.s:2896   .text:00000000000038ac $d
             forth.s:2907   .text:00000000000038c0 _AFT
             forth.s:2907   .text:00000000000038c4 $t
             forth.s:2907   .text:00000000000038c4 AFT
             forth.s:2909   .text:00000000000038c8 $d
             forth.s:2921   .text:00000000000038e0 _ELSEE
             forth.s:2921   .text:00000000000038e8 ELSEE
             forth.s:2923   .text:00000000000038ec $d
             forth.s:2933   .text:0000000000003900 _WHILE
             forth.s:2933   .text:0000000000003906 $t
             forth.s:2933   .text:0000000000003908 WHILE
             forth.s:2935   .text:000000000000390c $d
             forth.s:2944   .text:000000000000391c _ABRTQ
             forth.s:2944   .text:0000000000003924 ABRTQ
             forth.s:2946   .text:0000000000003928 $d
             forth.s:2955   .text:0000000000003940 _STRQ
             forth.s:2955   .text:0000000000003944 STRQ
             forth.s:2957   .text:0000000000003948 $d
ARM GAS  forth.s 			page 182


             forth.s:2967   .text:0000000000003960 _DOTQ
             forth.s:2967   .text:0000000000003964 DOTQ
             forth.s:2969   .text:0000000000003968 $d
             forth.s:2983   .text:0000000000003980 _UNIQU
             forth.s:2983   .text:0000000000003988 $t
             forth.s:2983   .text:0000000000003988 UNIQU
             forth.s:2985   .text:000000000000398c $d
             forth.s:2992   .text:00000000000039b4 UNIQ1
             forth.s:2989   .text:00000000000039a8 $d
             forth.s:3002   .text:00000000000039bc SNAME
             forth.s:3003   .text:00000000000039bc $t
             forth.s:3004   .text:00000000000039c0 $d
             forth.s:3020   .text:0000000000003a04 SNAM1
             forth.s:3032   .text:0000000000003a18 _SCOMP
             forth.s:3032   .text:0000000000003a24 SCOMP
             forth.s:3034   .text:0000000000003a28 $d
             forth.s:3046   .text:0000000000003a60 SCOM2
             forth.s:3043   .text:0000000000003a58 SCOM1
             forth.s:3051   .text:0000000000003a74 SCOM3
             forth.s:3060   .text:0000000000003a7c COLON_ABORT
             forth.s:3061   .text:0000000000003a7c $t
             forth.s:3062   .text:0000000000003a80 $d
             forth.s:3079   .text:0000000000003aac _OVERT
             forth.s:3079   .text:0000000000003ab2 $t
             forth.s:3081   .text:0000000000003ab8 $d
             forth.s:3092   .text:0000000000003ad0 _SEMIS
             forth.s:3092   .text:0000000000003ad2 $t
             forth.s:3092   .text:0000000000003ad4 SEMIS
             forth.s:3094   .text:0000000000003ad8 $d
             forth.s:3106   .text:0000000000003af4 _RBRAC
             forth.s:3106   .text:0000000000003af6 $t
             forth.s:3106   .text:0000000000003af8 RBRAC
             forth.s:3108   .text:0000000000003afc $d
             forth.s:3119   .text:0000000000003b10 $t
             forth.s:3120   .text:0000000000003b14 $d
             forth.s:3132   .text:0000000000003b2c _COLON
             forth.s:3132   .text:0000000000003b2e $t
             forth.s:3132   .text:0000000000003b30 COLON
             forth.s:3134   .text:0000000000003b34 $d
             forth.s:3145   .text:0000000000003b4c _IMMED
             forth.s:3145   .text:0000000000003b56 $t
             forth.s:3145   .text:0000000000003b58 IMMED
             forth.s:3147   .text:0000000000003b5c $d
             forth.s:3165   .text:0000000000003b88 _CONST
             forth.s:3165   .text:0000000000003b94 CONST
             forth.s:3167   .text:0000000000003b98 $d
             forth.s:3178   .text:0000000000003bc8 $t
             forth.s:3185   .text:0000000000003bc8 DODOES
             forth.s:3187   .text:0000000000003bcc $d
             forth.s:3202   .text:0000000000003bf0 $d
             forth.s:3202   .text:0000000000003bf4 _DOES
             forth.s:3202   .text:0000000000003bfa $t
             forth.s:3202   .text:0000000000003bfc DOES
             forth.s:3204   .text:0000000000003c00 $d
             forth.s:3219   .text:0000000000003c30 _DEFERAT
             forth.s:3219   .text:0000000000003c38 DEFERAT
             forth.s:3221   .text:0000000000003c3c $d
ARM GAS  forth.s 			page 183


             forth.s:3231   .text:0000000000003c54 _DEFERSTO
             forth.s:3231   .text:0000000000003c5c DEFERSTO
             forth.s:3233   .text:0000000000003c60 $d
             forth.s:3244   .text:0000000000003c7c _DEFER
             forth.s:3244   .text:0000000000003c82 $t
             forth.s:3244   .text:0000000000003c84 DEFER
             forth.s:3246   .text:0000000000003c88 $d
             forth.s:3267   .text:0000000000003cd4 CREAT
             forth.s:3257   .text:0000000000003cbc DEFER_NOP
             forth.s:3258   .text:0000000000003cbc $t
             forth.s:3259   .text:0000000000003cc0 $d
             forth.s:3267   .text:0000000000003ccc _CREAT
             forth.s:3269   .text:0000000000003cd8 $d
             forth.s:3282   .text:0000000000003cfc _VARIA
             forth.s:3282   .text:0000000000003d08 VARIA
             forth.s:3284   .text:0000000000003d0c $d
             forth.s:3301   .text:0000000000003d2c DMP
             forth.s:3302   .text:0000000000003d2c $t
             forth.s:3303   .text:0000000000003d30 $d
             forth.s:3315   .text:0000000000003d68 PDUM2
             forth.s:3309   .text:0000000000003d50 PDUM1
             forth.s:3327   .text:0000000000003d74 $d
             forth.s:3327   .text:0000000000003d78 _DUMP
             forth.s:3327   .text:0000000000003d80 DUMP
             forth.s:3329   .text:0000000000003d84 $d
             forth.s:3347   .text:0000000000003dd4 DUMP4
             forth.s:3337   .text:0000000000003dac DUMP1
             forth.s:3349   .text:0000000000003ddc DUMP3
             forth.s:3361   .text:0000000000003df4 _DOTS
             forth.s:3361   .text:0000000000003df8 DOTS
             forth.s:3363   .text:0000000000003dfc $d
             forth.s:3371   .text:0000000000003e1c DOTS2
             forth.s:3367   .text:0000000000003e10 DOTS1
             forth.s:3381   .text:0000000000003e30 _TNAME
             forth.s:3381   .text:0000000000003e36 $t
             forth.s:3381   .text:0000000000003e38 TNAME
             forth.s:3383   .text:0000000000003e3c $d
             forth.s:3386   .text:0000000000003e48 TNAM1
             forth.s:3397   .text:0000000000003e7c TNAM2
             forth.s:3406   .text:0000000000003e8c _DOTID
             forth.s:3406   .text:0000000000003e90 $t
             forth.s:3406   .text:0000000000003e90 DOTID
             forth.s:3408   .text:0000000000003e94 $d
             forth.s:3415   .text:0000000000003eb8 DOTI1
             forth.s:3416   .text:0000000000003ec6 $t
             forth.s:3417   .text:0000000000003ec8 $d
             forth.s:3419   *ABS*:0000000000000000 WANT_SEE
             forth.s:3492   .text:0000000000003ed0 _VLIST
             forth.s:3492   .text:0000000000003ed6 $t
             forth.s:3492   .text:0000000000003ed8 VLIST
             forth.s:3494   .text:0000000000003edc $d
             forth.s:3505   .text:0000000000003efc WORDS
             forth.s:3526   .text:0000000000003f40 WC
             forth.s:3505   .text:0000000000003ef4 _WORDS
             forth.s:3505   .text:0000000000003efa $t
             forth.s:3507   .text:0000000000003f00 $d
             forth.s:3510   .text:0000000000003f0c WORS1
ARM GAS  forth.s 			page 184


             forth.s:3519   .text:0000000000003f34 WORS2
             forth.s:3526   .text:0000000000003f3c _WC
             forth.s:3528   .text:0000000000003f44 $d
             forth.s:3545   .text:0000000000003f80 _MARK
             forth.s:3545   .text:0000000000003f88 MARK
             forth.s:3547   .text:0000000000003f8c $d
             forth.s:3550   .text:0000000000003f98 $t
             forth.s:3551   .text:0000000000003f9c $d
             forth.s:3572   .text:0000000000003fc8 VERSN
             forth.s:3573   .text:0000000000003fc8 $t
             forth.s:3574   .text:0000000000003fcc $d
             forth.s:3582   .text:0000000000003fdc _HI
             forth.s:3584   .text:0000000000003fe4 $d
             forth.s:3585   .text:0000000000003ffe $t
             forth.s:3586   .text:0000000000004000 $d
             forth.s:3607   .text:0000000000004044 PS2_QUERY
             forth.s:3608   .text:0000000000004044 $t
             forth.s:3609   .text:0000000000004048 $d
             forth.s:3623   .text:00000000000040ae $t
             forth.s:3624   .text:00000000000040b0 $d
             forth.s:3634   .text:00000000000040bc IF_SENSE
             forth.s:3635   .text:00000000000040bc $t
             forth.s:3636   .text:00000000000040c0 $d
             forth.s:3662   .text:0000000000004110 COLD1
             forth.s:3663   .text:0000000000004110 $d
             forth.s:3677   .text:000000000000415c COLD2
             forth.s:3680   .text:000000000000415c $d
             forth.s:3683   .text:0000000000004160 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:0000000000000553 $d
          ser-term.s:90     .text:0000000000000554 $t
          ser-term.s:110    .text:000000000000058d $d
          ser-term.s:110    .text:000000000000058e $t
          ser-term.s:133    .text:00000000000005cb $d
          ser-term.s:133    .text:00000000000005cc $t
          ser-term.s:164    .text:0000000000000613 $d
          ser-term.s:164    .text:0000000000000614 $t
          ser-term.s:191    .text:0000000000000689 $d
          ser-term.s:191    .text:000000000000068a $t
          ser-term.s:203    .text:00000000000006b7 $d
          ser-term.s:203    .text:00000000000006b8 $t
             tvout.s:264    .text:0000000000000903 $d
             tvout.s:264    .text:0000000000000904 $t
             tvout.s:278    .text:0000000000000937 $d
             tvout.s:278    .text:0000000000000938 $t
             tvout.s:306    .text:0000000000000991 $d
             tvout.s:306    .text:0000000000000992 $t
             tvout.s:325    .text:00000000000009bf $d
             tvout.s:325    .text:00000000000009c0 $t
             tvout.s:427    .text:0000000000000af9 $d
             tvout.s:427    .text:0000000000000afa $t
             tvout.s:448    .text:0000000000000b53 $d
             tvout.s:448    .text:0000000000000b54 $t
             tvout.s:495    .text:0000000000000be9 $d
             tvout.s:495    .text:0000000000000bea $t
           ps2_kbd.s:307    .text:00000000000012d7 $d
ARM GAS  forth.s 			page 185


           ps2_kbd.s:307    .text:00000000000012d8 $t
           ps2_kbd.s:396    .text:00000000000013d3 $d
           ps2_kbd.s:396    .text:00000000000013d4 $t
           ps2_kbd.s:616    .text:000000000000166f $d
           ps2_kbd.s:616    .text:0000000000001670 $t
           ps2_kbd.s:633    .text:00000000000016a5 $d
           ps2_kbd.s:633    .text:00000000000016a6 $t
         spi-flash.s:83     .text:0000000000001793 $d
         spi-flash.s:83     .text:0000000000001794 $t
         spi-flash.s:149    .text:0000000000001859 $d
         spi-flash.s:149    .text:000000000000185a $t
         spi-flash.s:236    .text:000000000000199f $d
         spi-flash.s:236    .text:00000000000019a0 $t
         spi-flash.s:254    .text:00000000000019db $d
         spi-flash.s:254    .text:00000000000019dc $t
         spi-flash.s:276    .text:0000000000001a2f $d
         spi-flash.s:276    .text:0000000000001a30 $t
             float.s:75     .text:0000000000001aa9 $d
             float.s:75     .text:0000000000001aaa $t
             float.s:106    .text:0000000000001afd $d
             float.s:106    .text:0000000000001afe $t
             float.s:115    .text:0000000000001b0f $d
             float.s:115    .text:0000000000001b10 $t
             float.s:129    .text:0000000000001b1f $d
             float.s:129    .text:0000000000001b20 $t
             float.s:157    .text:0000000000001b57 $d
             float.s:157    .text:0000000000001b58 $t
             float.s:166    .text:0000000000001b67 $d
             float.s:166    .text:0000000000001b68 $t
             float.s:231    .text:0000000000001bdb $d
             float.s:231    .text:0000000000001bdc $t
             float.s:271    .text:0000000000001c63 $d
             float.s:271    .text:0000000000001c64 $t
             forth.s:132    .text:0000000000001cd7 $d
             forth.s:132    .text:0000000000001cd8 $t
             forth.s:154    .text:0000000000001d11 $d
             forth.s:154    .text:0000000000001d12 $t
             forth.s:190    .text:0000000000001d2f $d
             forth.s:190    .text:0000000000001d30 $t
             forth.s:237    .text:0000000000001ddd $d
             forth.s:237    .text:0000000000001dde $t
             forth.s:332    .text:0000000000001e6d $d
             forth.s:332    .text:0000000000001e6e $t
             forth.s:357    .text:0000000000001e9b $d
             forth.s:357    .text:0000000000001e9c $t
             forth.s:367    .text:0000000000001eaf $d
             forth.s:367    .text:0000000000001eb0 $t
             forth.s:375    .text:0000000000001ebb $d
             forth.s:375    .text:0000000000001ebc $t
             forth.s:384    .text:0000000000001ecd $d
             forth.s:384    .text:0000000000001ece $t
             forth.s:393    .text:0000000000001ee1 $d
             forth.s:393    .text:0000000000001ee2 $t
             forth.s:429    .text:0000000000001f29 $d
             forth.s:429    .text:0000000000001f2a $t
             forth.s:445    .text:0000000000001f4b $d
             forth.s:445    .text:0000000000001f4c $t
ARM GAS  forth.s 			page 186


             forth.s:455    .text:0000000000001f5d $d
             forth.s:455    .text:0000000000001f5e $t
             forth.s:464    .text:0000000000001f6f $d
             forth.s:464    .text:0000000000001f70 $t
             forth.s:481    .text:0000000000001f91 $d
             forth.s:481    .text:0000000000001f92 $t
             forth.s:511    .text:0000000000001fd7 $d
             forth.s:511    .text:0000000000001fd8 $t
             forth.s:520    .text:0000000000001fed $d
             forth.s:520    .text:0000000000001fee $t
             forth.s:567    .text:0000000000002047 $d
             forth.s:567    .text:0000000000002048 $t
             forth.s:578    .text:000000000000205b $d
             forth.s:578    .text:000000000000205c $t
             forth.s:586    .text:0000000000002069 $d
             forth.s:586    .text:000000000000206a $t
             forth.s:594    .text:0000000000002079 $d
             forth.s:594    .text:000000000000207a $t
             forth.s:602    .text:0000000000002089 $d
             forth.s:602    .text:000000000000208a $t
             forth.s:626    .text:00000000000020b9 $d
             forth.s:626    .text:00000000000020ba $t
             forth.s:651    .text:00000000000020ed $d
             forth.s:651    .text:00000000000020ee $t
             forth.s:659    .text:00000000000020fd $d
             forth.s:659    .text:00000000000020fe $t
             forth.s:667    .text:000000000000210f $d
             forth.s:667    .text:0000000000002110 $t
             forth.s:688    .text:0000000000002137 $d
             forth.s:688    .text:0000000000002138 $t
             forth.s:717    .text:0000000000002173 $d
             forth.s:717    .text:0000000000002174 $t
             forth.s:727    .text:0000000000002187 $d
             forth.s:727    .text:0000000000002188 $t
             forth.s:748    .text:00000000000021b5 $d
             forth.s:748    .text:00000000000021b6 $t
             forth.s:766    .text:00000000000021d9 $d
             forth.s:766    .text:00000000000021da $t
             forth.s:789    .text:0000000000002207 $d
             forth.s:789    .text:0000000000002208 $t
             forth.s:847    .text:0000000000002277 $d
             forth.s:847    .text:0000000000002278 $t
             forth.s:859    .text:000000000000228f $d
             forth.s:859    .text:0000000000002290 $t
             forth.s:871    .text:00000000000022ab $d
             forth.s:871    .text:00000000000022ac $t
             forth.s:932    .text:0000000000002307 $d
             forth.s:932    .text:0000000000002308 $t
             forth.s:941    .text:000000000000231b $d
             forth.s:941    .text:000000000000231c $t
             forth.s:968    .text:0000000000002357 $d
             forth.s:968    .text:0000000000002358 $t
             forth.s:987    .text:0000000000002375 $d
             forth.s:987    .text:0000000000002376 $t
             forth.s:1006   .text:000000000000239f $d
             forth.s:1006   .text:00000000000023a0 $t
             forth.s:1046   .text:00000000000023f1 $d
ARM GAS  forth.s 			page 187


             forth.s:1046   .text:00000000000023f2 $t
             forth.s:1066   .text:000000000000241b $d
             forth.s:1066   .text:000000000000241c $t
             forth.s:1080   .text:0000000000002435 $d
             forth.s:1080   .text:0000000000002436 $t
             forth.s:1091   .text:0000000000002451 $d
             forth.s:1091   .text:0000000000002452 $t
             forth.s:1108   .text:000000000000246b $d
             forth.s:1108   .text:000000000000246c $t
             forth.s:1125   .text:0000000000002497 $d
             forth.s:1125   .text:0000000000002498 $t
             forth.s:1189   .text:0000000000002549 $d
             forth.s:1189   .text:000000000000254a $t
             forth.s:1240   .text:00000000000025c3 $d
             forth.s:1240   .text:00000000000025c4 $t
             forth.s:1299   .text:000000000000266d $d
             forth.s:1299   .text:000000000000266e $t
             forth.s:1317   .text:0000000000002695 $d
             forth.s:1317   .text:0000000000002696 $t
             forth.s:1351   .text:00000000000026e7 $d
             forth.s:1351   .text:00000000000026e8 $t
             forth.s:1384   .text:0000000000002735 $d
             forth.s:1384   .text:0000000000002736 $t
             forth.s:1416   .text:000000000000277d $d
             forth.s:1416   .text:000000000000277e $t
             forth.s:1496   .text:000000000000286b $d
             forth.s:1496   .text:000000000000286c $t
             forth.s:1508   .text:0000000000002889 $d
             forth.s:1508   .text:000000000000288a $t
             forth.s:1540   .text:00000000000028d7 $d
             forth.s:1540   .text:00000000000028d8 $t
             forth.s:1556   .text:0000000000002901 $d
             forth.s:1556   .text:0000000000002902 $t
             forth.s:1570   .text:000000000000292b $d
             forth.s:1570   .text:000000000000292c $t
             forth.s:1634   .text:00000000000029c3 $d
             forth.s:1634   .text:00000000000029c4 $t
             forth.s:1755   .text:0000000000002b83 $d
             forth.s:1755   .text:0000000000002b84 $t
             forth.s:1772   .text:0000000000002bb9 $d
             forth.s:1772   .text:0000000000002bba $t
             forth.s:1790   .text:0000000000002bef $d
             forth.s:1790   .text:0000000000002bf0 $t
             forth.s:1860   .text:0000000000002c6f $d
             forth.s:1860   .text:0000000000002c70 $t
             forth.s:1895   .text:0000000000002ccf $d
             forth.s:1895   .text:0000000000002cd0 $t
             forth.s:1930   .text:0000000000002d33 $d
             forth.s:1930   .text:0000000000002d34 $t
             forth.s:2065   .text:0000000000002ee7 $d
             forth.s:2065   .text:0000000000002ee8 $t
             forth.s:2104   .text:0000000000002f49 $d
             forth.s:2104   .text:0000000000002f4a $t
             forth.s:2117   .text:0000000000002f6d $d
             forth.s:2117   .text:0000000000002f6e $t
             forth.s:2377   .text:000000000000328f $d
             forth.s:2377   .text:0000000000003290 $t
ARM GAS  forth.s 			page 188


             forth.s:2469   .text:00000000000033a3 $d
             forth.s:2469   .text:00000000000033a4 $t
             forth.s:2520   .text:000000000000345b $d
             forth.s:2520   .text:000000000000345c $t
             forth.s:2532   .text:0000000000003485 $d
             forth.s:2532   .text:0000000000003486 $t
             forth.s:2553   .text:00000000000034cb $d
             forth.s:2553   .text:00000000000034cc $t
             forth.s:2565   .text:00000000000034e9 $d
             forth.s:2565   .text:00000000000034ea $t
             forth.s:2580   .text:0000000000003517 $d
             forth.s:2580   .text:0000000000003518 $t
             forth.s:2728   .text:00000000000036a7 $d
             forth.s:2728   .text:00000000000036a8 $t
             forth.s:2778   .text:000000000000374d $d
             forth.s:2778   .text:000000000000374e $t
             forth.s:2802   .text:0000000000003789 $d
             forth.s:2802   .text:000000000000378a $t
             forth.s:2853   .text:000000000000381b $d
             forth.s:2853   .text:000000000000381c $t
             forth.s:2881   .text:0000000000003883 $d
             forth.s:2881   .text:0000000000003884 $t
             forth.s:2894   .text:00000000000038a5 $d
             forth.s:2894   .text:00000000000038a6 $t
             forth.s:2921   .text:00000000000038e5 $d
             forth.s:2921   .text:00000000000038e6 $t
             forth.s:2944   .text:0000000000003923 $d
             forth.s:2944   .text:0000000000003924 $t
             forth.s:2955   .text:0000000000003943 $d
             forth.s:2955   .text:0000000000003944 $t
             forth.s:2967   .text:0000000000003963 $d
             forth.s:2967   .text:0000000000003964 $t
             forth.s:3032   .text:0000000000003a21 $d
             forth.s:3032   .text:0000000000003a22 $t
             forth.s:3165   .text:0000000000003b91 $d
             forth.s:3165   .text:0000000000003b92 $t
             forth.s:3219   .text:0000000000003c37 $d
             forth.s:3219   .text:0000000000003c38 $t
             forth.s:3231   .text:0000000000003c5b $d
             forth.s:3231   .text:0000000000003c5c $t
             forth.s:3267   .text:0000000000003cd3 $d
             forth.s:3267   .text:0000000000003cd4 $t
             forth.s:3282   .text:0000000000003d05 $d
             forth.s:3282   .text:0000000000003d06 $t
             forth.s:3327   .text:0000000000003d7d $d
             forth.s:3327   .text:0000000000003d7e $t
             forth.s:3361   .text:0000000000003df7 $d
             forth.s:3361   .text:0000000000003df8 $t
             forth.s:3526   .text:0000000000003f3f $d
             forth.s:3526   .text:0000000000003f40 $t
             forth.s:3545   .text:0000000000003f85 $d
             forth.s:3545   .text:0000000000003f86 $t
             forth.s:3582   .text:0000000000003fdf $d
             forth.s:3582   .text:0000000000003fe0 $t
             forth.s:3656   .text:00000000000040f9 $d
             forth.s:3656   .text:00000000000040fa $t

ARM GAS  forth.s 			page 189


UNDEFINED SYMBOLS
xE000EF34
_mstack
