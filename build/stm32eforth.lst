ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  54              		.equ DTOP,  RAM_ADR+0x512 
  55              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  56              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  57              	
  58              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  59              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  60              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  61              	
  62              		.equ CELLL ,	4	/*size of a cell */
  63              		.equ BASEE ,	10	/*default radix */
  64              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  65              	
  66              		.equ BKSPP ,	8	/*backspace */
  67              		.equ LF ,	10	  /*line feed */
  68              		.equ CRR ,	13	/*carriage return */
  69              		.equ ERR ,	27	/*error escape */
  70              		.equ TIC ,	39	/*tick */
  71              	
  72              	/*************************************
  73              	   system variables offset from UPP
  74              	*************************************/
  75              	  .equ RNDSEED, 4    // prng seed 
  76              	  .equ TICKS, RNDSEED+4  // millseconds counter
  77              	  .equ CD_TIMER, TICKS+4  // count down timer
  78              	  .equ BOOT, CD_TIMER+4  // boot program address
  79              	  .equ STDIN, BOOT+4   //character ouput device 
  80              	  .equ STDOUT, STDIN+4 // character input device 
  81              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  82              	  .equ BCHAR, NBASE+4   // display base character flag 
  83              	  .equ TMP, BCHAR+4   // temporary variable
  84              	  .equ CSPAN, TMP+4  // character count received by expect  
  85              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  86              	  .equ SRC, TOIN+4    // SOURCE 
  87              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  88              	  .equ TIBUF, SRC+4   // TIB buffer address 
  89              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  90              	  .equ VHOLD, EVAL+4   // hold pointer 
  91              	  .equ CTXT, VHOLD+4  // context pointer 
  92              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  93              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  94              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  95              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  96              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  97              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  98              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  99              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 100              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 101              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 102              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 103              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 104              	  .equ KBD_QUEUE_SIZE, 16 
 105              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 106              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 107              	  .equ KBD_QTAIL,KBD_QHEAD+4
ARM GAS  forth.s 			page 10


 108              	  .equ ROW,KBD_QTAIL+4 
 109              	  .equ COL,ROW+4 
 110              	  .equ BK_COLOR,COL+4 
 111              	  .equ PEN_COLOR,BK_COLOR+4
 112              	  .equ VFPSW, PEN_COLOR+4 
 113              	  .equ VFBASE, VFPSW+4 
 114              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 115              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 116              	
 117              	/***********************************************
 118              	* MACROS
 119              	*	Assemble inline direct threaded code ending.
 120              	***********************************************/
 121              		.macro _CALL fn /* low level routine call */ 
 122              	 	PUSH {LR}
 123              		BL \fn  
 124              		POP {LR}
 125              		.endm
 126              		
 127              		.macro _RET /* exit sub-routine */ 
 128              		BX LR 
 129              		.endm 
 130              	
 131              		// dictionary header  
 132              		.macro _HEADER  label, nlen, name
 133              			.word LINK 
 134              			.equ LINK , . 
 135              		_\label: .byte \nlen    // name field
 136              			.ascii "\name"
 137              			.p2align 2 
 138              		\label:   // code field 
 139              		.endm 
 140              		
 141              	
 142              	// local function header 
 143              		.macro _FUNC label 
 144              		.section .text, "ax", %progbits 
 145              		.p2align 2 
 146              		.type \label, %function  
 147              		\label:
 148              		.endm 
 149              	
 150              	// global function header 
 151              		.macro _GBL_FUNC label 
 152              		.global \label 
 153              		_FUNC \label 
 154              		.endm 
 155              	
 156              	
 157              	// load large constant to register 
 158              		.macro _MOV32 r, value 
 159              		mov \r,#(\value&0xffff)
 160              		movt \r,#(\value>>16)
 161              		.endm 
 162              	
 163              		.macro _NEXT /* direct jump INEXT */ 
 164              		B INEXT   
ARM GAS  forth.s 			page 11


 165              		.endm 
 166              	
 167              	 	.macro	_NEST /*start high level word */
 168              		BX INX  
 169              		NOP.N 
 170              		.endm
 171              	
 172              		.macro _ADR label 
 173              		.word 1+\label  
 174              		.endm 
 175              	
 176              	 	.macro	_UNNEST	/*end high level word */
 177              		_ADR UNNEST 
 178              		.endm
 179              	
 180              	 	.macro	_DOLIT u /*long literals */
 181              		_ADR	DOLIT
 182              		.word	\u 
 183              		.endm
 184              	
 185              		.macro _DOTQP len, text 
 186              		_ADR DOTQP 
 187              		.byte \len 
 188              		.ascii "\text" 
 189              		.p2align 2 
 190              		.endm
 191              	
 192              		.macro _COMPI name 
 193              		_DOLIT \name 
 194              		_ADR CALLC 
 195              		.endm 
 196              	
 197              		.macro _ABORQ len,name 
 198              		_ADR ABORQ 
 199              		.byte \len 
 200              		.ascii "\name"
 201              		.p2align 2 
 202              		.endm
 203              	
 204              		.macro _BRAN label 
 205              		_ADR BRAN 
 206              		.word \label 
 207              		.endm 
 208              	
 209              		.macro _QBRAN label 
 210              		_ADR QBRAN 
 211              		.word \label
 212              		.endm 
 213              	
 214              		.macro _TBRAN label 
 215              		_ADR TBRAN 
 216              		.word \label 
 217              		.endm 
 218              	
 219              		.macro _DONXT label 
 220              		_ADR DONXT
 221              		.word \label 
ARM GAS  forth.s 			page 12


 222              		.endm 
 223              	
 224              	 	.macro	_PUSH	/*push TOS on data stack*/
 225              		STR	TOS,[DSP,#-4]!
 226              		.endm
 227              	
 228              	 	.macro	_POP /*pop data stack to TOS */
 229              		LDR	TOS,[DSP],#4
 230              		.endm
 231              	
 232              		// calling a colon word 
 233              		// from a code word   
 234              		.macro _CALL_COLWORD target 
 235              	    ldr WP,=\target 
 236              		orr WP,#1
 237              		b \target  
 238              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
ARM GAS  forth.s 			page 13


  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
ARM GAS  forth.s 			page 14


 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 000a DFF814C9 	  ldr IP,=dh
 159 000e 02F071BE 	  b INEXT  
 160              	dh:
 161 0012 994C0000 	  _ADR PRESE
 162 0016 69420000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 412D0000 	  _ADR CFSR 
 164 0038 A9300000 	  _ADR DUPP
 165 003c 25300000 	  _ADR TOR 
 166 0040 1F2F0000 	  _DOLIT 16 
 166      10000000 
 167 0048 15360000 	  _ADR BASE 
 168 004c A12F0000 	  _ADR STORE 
 169 0050 65430000 	  _ADR UDOT 
 170 0054 69420000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
ARM GAS  forth.s 			page 15


 171 0064 E12F0000 	  _ADR RFROM
 172 0068 1F2F0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 29310000 	  _ADR ANDD
 174 0074 5F2F0000 	  _QBRAN 1f
 174      94000000 
 175 007c 612D0000 	  _ADR BFAR
 176 0080 1F2F0000 	  _DOLIT ','
 176      2C000000 
 177 0088 BD2D0000 	  _ADR EMIT 
 178 008c 85410000 	  _ADR SPACE 
 179 0090 65430000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 69420000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 4D200000 	  _ADR FPSCR
 184 00a8 65430000 	  _ADR UDOT 
 185              	1:
 186 00ac D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 00b0 00B5     	  push {lr}
 197 00b2 4FF05100 	  mov r0,#FPU_IRQ 
 198 00b6 00F045FB 	  bl nvic_disable_irq 
 199 00ba 47F8046D 	  _PUSH 
 200 00be 6646     	  mov TOS,IP 
 201 00c0 DFF860C8 	  ldr IP,=fpu_except
 202 00c4 02F016BE 	  b INEXT 
 203              	fpu_except:  
 204 00c8 0D420000 	  _ADR CR 
 205 00cc 15360000 	  _ADR BASE 
 206 00d0 B52F0000 	  _ADR AT 
 207 00d4 25300000 	  _ADR TOR  
 208 00d8 1F2F0000 	  _DOLIT 16 
 208      10000000 
 209 00e0 15360000 	  _ADR BASE 
 210 00e4 A12F0000 	  _ADR STORE
 211 00e8 1F2F0000 	  _DOLIT 4 
 211      04000000 
 212 00f0 B9310000 	  _ADR SUBB  
 213 00f4 69420000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 0100 99430000 	  _ADR DOT 
 215 0104 69420000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
ARM GAS  forth.s 			page 16


 215      78636570 
 215      74696F6E 
 216 0120 4D200000 	  _ADR FPSCR 
 217 0124 A9300000 	  _ADR DUPP 
 218 0128 99430000 	  _ADR DOT
 219 012c B9320000 	  _ADR QDUP 
 220 0130 5F2F0000 	  _QBRAN 2f 
 220      C8010000 
 221 0138 1F2F0000 	  _DOLIT ',' 
 221      2C000000 
 222 0140 BD2D0000 	  _ADR EMIT 
 223 0144 1F2F0000 	  _DOLIT ' ' 
 223      20000000 
 224 014c BD2D0000 	  _ADR EMIT
 225 0150 A9300000 	  _ADR DUPP 
 226 0154 1F2F0000 	  _DOLIT 0x10 
 226      10000000 
 227 015c 29310000 	  _ADR ANDD
 228 0160 B9320000 	  _ADR QDUP  
 229 0164 5F2F0000 	  _QBRAN 1f 
 229      84010000 
 230 016c 1F2F0000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 0174 A9310000 	  _ADR PLUS 
 232 0178 B52F0000 	  _ADR AT 
 233 017c 49350000 	  _ADR COUNT 
 234 0180 D9410000 	  _ADR TYPEE
 235 0184 1F2F0000 	1: _DOLIT 15 
 235      0F000000 
 236 018c 29310000 	  _ADR ANDD
 237 0190 F1330000 	  _ADR CLZ 
 238 0194 1F2F0000 	  _DOLIT 31 
 238      1F000000 
 239 019c B9300000 	  _ADR SWAP 
 240 01a0 B9310000 	  _ADR SUBB 
 241 01a4 1F2F0000 	  _DOLIT 2 
 241      02000000 
 242 01ac 99310000 	  _ADR LSHIFT 
 243 01b0 1F2F0000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 01b8 A9310000 	  _ADR PLUS 
 245 01bc B52F0000 	  _ADR AT 
 246 01c0 49350000 	  _ADR COUNT 
 247 01c4 D9410000 	  _ADR TYPEE 
 248 01c8 0D420000 	2: _ADR CR 
 249 01cc 1F2F0000 	  _DOLIT 0
 249      00000000 
 250 01d4 6D200000 	  _ADR CLR_FPSCR 
 251 01d8 E12F0000 	  _ADR RFROM  
 252 01dc 15360000 	  _ADR BASE 
 253 01e0 A12F0000 	  _ADR STORE 
 254 01e4 E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 01e8 DFF83CC7 	   ldr IP,=QUIT  
 258 01ec 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
ARM GAS  forth.s 			page 17


 259 01f4 81EA0101 	   eor r1,r1 
 260 01f8 4160     	   str r1,[r0,#SCB_ICSR]
 261 01fa 4FF05100 	   mov r0,#FPU_IRQ 
 262 01fe 00F08CFA 	   bl nvic_enable_irq 
 263 0202 5DF804EB 	   pop {lr}
 264 0206 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 0208 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 021c 12       	  .byte 18
 274 021d 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 022f 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 0230 0E       	  .byte 14 
 279 0231 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 023f 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 0240 09       	  .byte 9 
 284 0241 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 024a 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 024c 0A       	  .byte 10
 289 024d 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 0257 00       	  .p2align 2 
 292              	fpu_except_inexact: // bit 4 
 293 0258 0A       	  .byte 10 
 294 0259 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
ARM GAS  forth.s 			page 18


 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 0263 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 0264 DFF8C4C6 	  ldr IP,=nmi_hl 
 306 0268 02F044BD 	  b  INEXT
 307              	nmi_hl:
 308 026c 994C0000 	  _ADR PRESE 
 309 0270 0D420000 	  _ADR CR 
 310 0274 69420000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 0294 0D420000 	  _ADR CR 
 312 0298 DD4A0000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 029c 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 02a4 8546     	  mov sp,r0 
 325 02a6 DFF888C6 	  ldr IP,=hardfault_hl 
 326 02aa 02F023BD 	  b INEXT
 327              	hardfault_hl:
 328 02ae 994C0000 	  _ADR PRESE
 329 02b2 0D420000 	  _ADR CR  
 330 02b6 69420000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 02d0 0D420000 	  _ADR CR 
 332 02d4 D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 02d8 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 02e0 8546     	  mov sp,r0 
 344 02e2 DFF850C6 	  ldr IP,=memfault_hl 
 345 02e6 02F005BD 	  b INEXT 
ARM GAS  forth.s 			page 19


 346              	memfault_hl: 
 347 02ea 994C0000 	  _ADR PRESE
 348 02ee 0D420000 	  _ADR CR  
 349 02f2 69420000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 0318 1F2F0000 	  _DOLIT 16 
 350      10000000 
 351 0320 15360000 	  _ADR BASE 
 352 0324 A12F0000 	  _ADR STORE   
 353 0328 412D0000 	  _ADR CFSR
 354 032c 1F2F0000 	  _DOLIT 255 
 354      FF000000 
 355 0334 29310000 	  _ADR ANDD 
 356 0338 65430000 	  _ADR UDOT 
 357 033c 0D420000 	  _ADR CR 
 358 0340 D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 0344 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 034c 8546     	  mov sp,r0 
 371 034e DFF8E8C5 	  ldr IP,=busfault_hl 
 372 0352 02F0CFBC 	  b INEXT 
 373              	busfault_hl:
 374 0356 994C0000 	  _ADR PRESE
 375 035a 1F2F0000 	  _DOLIT 1 
 375      01000000 
 376 0362 892E0000 	  _ADR ULED 
 377 0366 1F2F0000 	  _DOLIT  100 
 377      64000000 
 378 036e CD350000 	  _ADR MSEC 
 379 0372 612D0000 	  _ADR BFAR 
 380 0376 412D0000 	  _ADR CFSR 
 381 037a 0D420000 	  _ADR CR  
 382 037e 69420000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
 382      6C742065 
 382      78636570 
 383 03a0 1F2F0000 	  _DOLIT 16 
 383      10000000 
 384 03a8 15360000 	  _ADR BASE 
 385 03ac A12F0000 	  _ADR STORE   
 386 03b0 1F2F0000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 03b8 29310000 	  _ADR ANDD   
ARM GAS  forth.s 			page 20


 388 03bc 65430000 	  _ADR UDOT 
 389 03c0 69420000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 03cc 65430000 	  _ADR UDOT 
 391 03d0 0D420000 	  _ADR CR 
 392 03d4 D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 03d8 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 03e0 8546     	  mov sp,r0 
 404 03e2 DFF858C5 	  ldr IP,=usagefault_hl
 405 03e6 02F085BC 	  b INEXT 
 406              	usagefault_hl:
 407 03ea 994C0000 	  _ADR PRESE
 408 03ee 0D420000 	  _ADR CR  
 409 03f2 69420000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 0410 1F2F0000 	  _DOLIT 16 
 410      10000000 
 411 0418 15360000 	  _ADR BASE 
 412 041c A12F0000 	  _ADR STORE   
 413 0420 412D0000 	  _ADR CFSR
 414 0424 1F2F0000 	  _DOLIT 16 
 414      10000000 
 415 042c 81310000 	  _ADR RSHIFT 
 416 0430 65430000 	  _ADR UDOT 
 417 0434 0D420000 	  _ADR CR 
 418 0438 D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
 427              	timer4_handler:
 428 043c 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 0444 D3F8AC00 	    ldr r0,[r3,#BEEP_DTMR]
 430 0448 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 044a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 0452 1868     	    ldr r0,[r3,#TIM_CR1]
ARM GAS  forth.s 			page 21


 434 0454 20F00100 	    and r0,#-2 
 435 0458 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 045a 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 0462 1869     	    ldr r0,[r3,#TIM_SR]
 442 0464 20F00300 	    and r0,#-4
 443 0468 1861     	    str r0,[r3,#TIM_SR]
 444 046a 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 046c 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 0474 9868     	  ldr r0,[r3,#TICKS]  
 456 0476 00F10100 	  add r0,#1
 457 047a 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 047c D3F8AC00 	  ldr r0,[r3,#BEEP_DTMR]
 460 0480 18B1     	  cbz r0,1f
 461 0482 A0F10100 	  sub r0,#1 
 462 0486 C3F8AC00 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 048a D868     	  ldr r0,[r3,#CD_TIMER]
 465 048c 10B1     	  cbz r0, systick_exit
 466 048e A0F10100 	  sub r0,#1
 467 0492 D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 0494 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 0496 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 04a0 DFF89CC4 	  ldr IP,=ur
 474 04a4 02F026BC 	  b INEXT  
 475              	ur:
 476 04a8 994C0000 	  _ADR PRESE
 477 04ac 0D420000 	  _ADR CR   
 478 04b0 1F2F0000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 04b8 49350000 		_ADR COUNT 
 480 04bc D9410000 	  _ADR TYPEE 
 481 04c0 D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 04c4 0C       		.byte 12
ARM GAS  forth.s 			page 22


 486 04c5 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 04d1 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 04d4 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 04dc 0168     	1: ldr r1,[r0,#USART_SR]
 492 04de 11F0400F 	  tst r1,#(1<<6)
 493 04e2 FBD0     	  beq 1b
 494 04e4 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 04ec C168     		ldr r1,[r0,#SCB_AIRCR]
 496 04ee 41F00401 		orr r1,#(1<<2)
 497 04f2 C0F2FA51 		movt r1,#SCB_VECTKEY
 498 04f6 C160     		str r1,[r0,#SCB_AIRCR]
 499 04f8 FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 04fa 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 04fc 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 0504 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 0506 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 050e 81EA0101 	  eor r1,r1 
 513 0512 C0F20701 	  movt r1,#7 
 514 0516 4162     	  str r1,[r0,#SCB_SHCSR]
 515 0518 FFF7FEFF 		bl	remap 
 516 051c 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 0520 01F065FD 	  bl  fpu_init 
 518 0524 00F029FA 		bl  ser_init
 519 0528 FFF7FEFF 	 	bl	tv_init
 520 052c FFF7FEFF 	  bl  kbd_init
 521 0530 01F022FB 	  bl  flash_spi_init   
 522 0534 05F074BB 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
 528              	forth_init:
 529 0538 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 0540 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 0548 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 0550 DFF8F0A3 	  ldr INX,=NEST
 533 0554 4AF0010A 	  orr INX,#1 
ARM GAS  forth.s 			page 23


 534 0558 86EA0606 		EOR TOS,TOS  
 535 055c 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 055e 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 0560 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 0568 4FF00301 	  mov r1,#3 
 546 056c 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 056e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 0576 0168     	  ldr r1,[r0,#RCC_CR]
 551 0578 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 057c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 057e 0168     	  ldr r1,[r0,#RCC_CR]
 556 0580 11F4003F 	  tst r1,#(1<<17)
 557 0584 FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 0586 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 058e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 0596 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 0598 0168     	  ldr r1,[r0,#RCC_CR]
 572 059a 41F08071 	  orr r1, #(1<<24)
 573 059e 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 05a0 0168     	  ldr r1,[r0,#RCC_CR]
 577 05a2 11F0007F 	  tst r1,#(1<<25)
 578 05a6 FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 05a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 05b0 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 05b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 05b4 41F00201 	  orr r1,#2
 585 05b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
ARM GAS  forth.s 			page 24


 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 05ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 05bc 11F0080F 	  tst r1,#(2<<2)
 590 05c0 FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 05c2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 05c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 05c8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 05cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 05ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 05d6 4FF00D01 	  mov r1,#LED_PIN
 602 05da 4FF01102 	  mov r2,#OUTPUT_OD 
 603 05de 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 05e8 4FF00102 	  mov r2,#1
 605 05ec 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 05f6 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 05fe 4FF00100 		mov r0,#1 
 609 0602 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 0604 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 0606 10F4807F 	    tst r0,#(1<<8)
 613 060a FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 060c 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 0614 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 0616 41F00071 	  orr r1,#(2<<24)
 624 061a 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 061c 4FF00601 	  mov r1,#6 // pin 
 626 0620 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
 627 0624 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 062e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 0636 4FF00400 	  mov r0,#4
 631 063a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 063c 41EA0001 	  orr r1,r0 
ARM GAS  forth.s 			page 25


 633 0640 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 0642 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 064a 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 0652 4FF00F01 	  mov r1,#15 
 639 0656 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 0658 4FF07001 	  mov r1,#7<<4 
 642 065c 8161     	  str r1,[r0,#TIM_CCMR1]
 643 065e 016A     	  ldr r1,[r0,TIM_CCER]
 644 0660 41F00101 	  orr r1,#1
 645 0664 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 0666 C168     	  ldr r1,[r0,#TIM_DIER]
 648 0668 41F00101 	  orr r1,#1 
 649 066c C160     	  str r1,[r0,#TIM_DIER]
 650 066e 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 0672 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 067c 4FF0FF30 	  mov r0,#STCK_IRQ
 657 0680 4FF00F01 	  mov r1,#15 
 658 0684 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 068e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 0696 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 069e 4160     	  str r1,[r0,#STK_LOAD]
 662 06a0 4FF00701 	  mov r1,#7
 663 06a4 0160     	  str r1,[r0,STK_CTL]
 664 06a6 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 06a8 4FF00000 		_MOV32 r0,RAM_ADR 
 672      C2F20000 
 673 06b0 A549     		ldr r1,=UZERO 
 674 06b2 4FF0BC02 		mov r2,#ULAST-UZERO 
 675 06b6 02F10302 		add r2,r2,#3
 676 06ba 22F00302 		and r2,r2,#~3 
 677 06be 51F8043B 	1:	ldr r3,[r1],#4 
 678 06c2 40F8043B 		str r3,[r0],#4 
 679 06c6 043A     		subs R2,#4 
 680 06c8 F9D1     		bne 1b
ARM GAS  forth.s 			page 26


 681              	// zero end of RAM 
 682 06ca 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 06d2 83EA0303 		eor r3,r3,r3 
 684 06d6 40F8043B 	2:  str r3,[r0],#4
 685 06da 9042     		cmp r0,r2 
 686 06dc FBDB     		blt 2b 
 687 06de 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 06e6 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 06e8 08B4     	    push {r3}
 697 06ea 0028     	    cmp r0,#0 
 698 06ec 08D4     	    bmi negative_irq 
 699 06ee 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 06f6 4FEA0111 	    lsl r1,#4 
 701 06fa 1954     	    strb r1,[r3,r0]
 702 06fc 08BC     	    pop {r3}
 703 06fe 7047     	    _RET 
 704              	negative_irq:
 705 0700 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 0708 00F00F00 	    and r0,#0XF 
 707 070c A0F10400 	    sub r0,#4 
 708 0710 4FEA0111 	    lsl r1,#4 
 709 0714 1954     	    strb r1,[r3,r0]
 710 0716 08BC     	    pop {r3}
 711 0718 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 071a 0EB4     	    push {r1,r2,r3}
 718 071c 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 0724 0146     	    mov r1,r0 
 720 0726 4FEA5111 	    lsr r1,#5  
 721 072a 4FEA8101 	    lsl r1,#2  // ISERn  
 722 072e 00F01F00 	    and r0,#31 // bit#
 723 0732 4FF00102 	    mov r2,#1 
 724 0736 02FA00F2 	    lsl r2,r0
 725 073a 72B6     	    cpsid I
 726 073c 5A50     	    str r2,[r3,r1]
 727 073e 62B6     	    cpsie I 
 728 0740 0EBC     	    pop {r1,r2,r3}
 729 0742 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
ARM GAS  forth.s 			page 27


 733              	nvic_disable_irq:
 734 0744 0EB4     	    push {r1,r2,r3}
 735 0746 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 074e 0146     	    mov r1,r0 
 737 0750 4FEA5111 	    lsr r1,#5  
 738 0754 4FEA8101 	    lsl r1,#2  // ISERn
 739 0758 00F01F00 	    and r0,#31 // bit#
 740 075c 4FF00102 	    mov r2,#1 
 741 0760 02FA00F2 	    lsl r2,r0
 742 0764 5A50     	    str r2,[r3,r1]
 743 0766 BFF34F8F 	    dsb 
 744 076a BFF36F8F 	    isb 
 745 076e 0EBC     	    pop {r1,r2,r3}
 746 0770 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 0772 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 077a 0EB4     	    push {r1,r2,r3}
 753 077c 0146     	    mov r1,r0 
 754 077e 4FEA5111 	    lsr r1,#5 
 755 0782 4FEA8101 	    lsl r1,#2  // IABRn
 756 0786 00F01F00 	    and r0,#31 // bit#
 757 078a 4FF00102 	    mov r2,#1 
 758 078e 02FA00F2 	    lsl r2,r0
 759 0792 5A50     	    str r2,[r3,r1]
 760 0794 BFF34F8F 	    dsb 
 761 0798 BFF36F8F 	    isb 
 762 079c 0EBC     	    pop {r1,r2,r3}
 763 079e 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
 779 07a0 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 07a4 4FF00105 	    mov r5,#1
 782 07a8 05FA01F5 	    lsl r5,r1
 783 07ac 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 07b0 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 07b2 03EA0503 	    and r3,r5 
 786 07b6 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 07b8 4FF00305 	    mov r5,#3 
ARM GAS  forth.s 			page 28


 788 07bc 4FF0020B 	    mov r11,#2 
 789 07c0 01FB0BFB 	    mul r11,r1 
 790 07c4 05FA0BF5 	    lsl r5,r11 
 791 07c8 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 07cc 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 07ce 03EA0503 	    and r3,r5 
 794 07d2 0360     	    str r3,[r0,#GPIO_MODER]
 795 07d4 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 07d6 03EA0503 	    and r3,r5 
 797 07da C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 07dc 02F00305 	    and r5,r2,#3    
 800 07e0 05FA0BF5 	    lsl r5,r11 // mode 
 801 07e4 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 07e6 43EA0503 	    orr r3,r5 
 803 07ea 0360     	    str r3,[r0,#GPIO_MODER]
 804 07ec 032A     	    cmp r2,#3
 805 07ee 13D0     	    beq 9f // analog input 
 806 07f0 12F00305 	    ands r5,r2,#3 
 807 07f4 08D0     	    beq input_pull 
 808              	output_type:
 809 07f6 4FEA1212 	    lsr r2,#4 
 810 07fa 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 07fe 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 0800 43EA0203 	    orr r3,r2 
 813 0804 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 0806 07E0     	    b 9f 
 815              	input_pull:
 816 0808 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 080a 4FEA1212 	    lsr r2,#4 
 818 080e 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 0812 43EA0203 	    orr r3,r2 
 820 0816 C360     	    str r3,[r0,#GPIO_PUPDR]
 821 0818 BDE82808 	9:  pop {r3,r5,r11}
 822 081c 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 081e 2DE92808 	    push {r3,r5,r11}
 833 0822 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 0824 4FF00305 	    mov r5,#3
 835 0828 4FF0020B 	    mov r11,#2 
 836 082c 01FB0BFB 	    mul r11,r1 
 837 0830 05FA0BF5 	    lsl r5,r11
 838 0834 6FEA0505 	    mvn r5,r5 
 839 0838 03EA0503 	    and r3,r5   
 840 083c 02FA0BF2 	    lsl r2,r11  
 841 0840 43EA0203 	    orr r3,r2 
 842 0844 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 0846 BDE82808 	    pop {r3,r5,r11}
 844 084a 7047     	    _RET
ARM GAS  forth.s 			page 29


 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 084c 08B4     	    push {r3}
 855 084e 4FF00103 	    mov r3,#1 
 856 0852 03FA01F3 	    lsl r3,r1 
 857 0856 0AB9     	    cbnz r2, 1f 
 858 0858 4FEA0343 	    lsl r3,#16 
 859 085c 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 085e 08BC     	    pop {r3}
 861 0860 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 0862 00BF     		.p2align 2
 868              	UZERO:
 869 0864 00000000 		.word 0  			/*Reserved */
 870 0868 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 086c 00000000 		.word 0      /* TICKS */
 872 0870 00000000 	    .word 0     /* CD_TIMER */
 873 0874 305B0000 		.word HI_BOTH  /*'BOOT */
 874 0878 60180000 		.word PS2_QKEY /* query for character */
 875 087c 28110000 	  .word TV_EMIT  /* char output device */
 876 0880 0A000000 	  .word BASEE 	/*BASE */
 877 0884 FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 0888 00000000 		.word 0			/*tmp */
 879 088c 00000000 		.word 0			/*SPAN */
 880 0890 00000000 		.word 0			/*>IN */
 881 0894 00000000 		.word 0			/*#TIB */
 882 0898 B0FE0120 		.word TIBB	/*TIBU */
 883 089c 604B0000 		.word INTER	/*'EVAL */
 884 08a0 00000000 		.word 0			/*HLD */
 885 08a4 185C0000 		.word _LASTN	/*CONTEXT */
 886 08a8 845C0000 		.word CTOP  	/* FCP end of system dictionnary */
 887 08ac 20540020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 888 08b0 185C0000 		.word _LASTN	/*LAST word in dictionary */
 889 08b4 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 889      00000000 
 889      00000000 
 889      00000000 
 890 08c4 00000000 		.word 0  /* RX_HEAD */
 891 08c8 00000000 		.word 0  /* RX_TAIL */ 
 892 08cc 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 893 08d0 00000000 		.word 0  /* VID_STATE, video state */  
 894 08d4 00000000 	    .word 0  /* VID_FIELD, field */
 895 08d8 30810120 		.word VID_BUFF /* video_buffer address */ 
 896 08dc 00000000 	    .word 0 /* kbd struct */
 897 08e0 00000000 		.space KBD_QUEUE_SIZE,0  
 897      00000000 
ARM GAS  forth.s 			page 30


 897      00000000 
 897      00000000 
 898 08f0 00000000 		.word 0  /* kbd queue head */
 899 08f4 00000000 		.word 0 /* kbd queue tail */ 
 900 08f8 00000000 	    .word 0 /* tv cursor row */
 901 08fc 00000000 	    .word 0 /* tv cursor column */ 
 902 0900 00000000 	    .word 0 /* tv back color */
 903 0904 07000000 	    .word 7 /* tv font color */
 904 0908 00000000 	    .word 0 /* FPSW */
 905 090c 00000000 	    .word 0 /* FBASE */ 
 906 0910 00000000 	    .word 0 /* BEEP_DTMR */
 907 0914 00000000 	    .word 0 /* CSTATE */ 
 908 0918 00000000 	    .word 0,0 
 908      00000000 
 909              	ULAST:
 910              	
 911              	// used by _HEADER macro 
 912              	// to link names field
 913              	// in dictionary  
 914 0920 12000000 	    .equ LINK, 0 
 914      C8000000 
 914      D04C0000 
 914      6C020000 
 914      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
ARM GAS  forth.s 			page 31


  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 094c 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0954 1868     		ldr r0,[r3,#USART_SR]
  38 0956 5968     		ldr r1,[r3,#USART_DR]
  39 0958 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 095c 0CD0     		beq 2f // no char received 
  41 095e B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0962 3FF498AD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0966 04F15000 		add r0,UP,#RX_QUEUE
  44 096a 626E     		ldr r2,[UP,#RX_TAIL]
  45 096c 8154     		strb r1,[r0,r2]
  46 096e 02F10102 		add r2,#1 
  47 0972 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0976 6266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0978 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 097a 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0982 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0984 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 0988 01EA0201 	  and r1,r1,r2
  62 098c 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0990 41EA0201 	  orr r1,r1,r2 
  64 0994 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 0996 4FF4EE61 	  mov r1,#0x77<<4 
  67 099a 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 099c 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 09a4 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 09a8 8160     	  str r1,[r0,#USART_BRR]
  73 09aa 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 09ae C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 09b0 4FF02500 	  mov r0,#USART1_IRQ 
  77 09b4 4FF00701 	  mov r1,#7
  78 09b8 00B5FFF7 	  _CALL nvic_set_priority
  78      95FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 09c2 4FF02500 	  mov r0,#USART1_IRQ 
  81 09c6 00B5FFF7 	  _CALL nvic_enable_irq  
  81      A7FE5DF8 
  81      04EB
  82 09d0 7047     	  _RET  
  83              	
ARM GAS  forth.s 			page 32


  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 09d2 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 09e0 47F8046D 		_PUSH
  92 09e4 606E     		ldr T0,[UP,#RX_TAIL] 
  93 09e6 216E     		ldr T1,[UP,#RX_HEAD]
  94 09e8 90EA0106 		eors TOS,T0,T1 
  95 09ec 0CD0     		beq 1f
  96 09ee 04F15000 		add T0,UP,#RX_QUEUE 
  97 09f2 0844     		add T0,T1 
  98 09f4 0678     		ldrb TOS,[T0]
  99 09f6 01F10101 		add T1,#1 
 100 09fa 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 09fe 2166     		str T1,[UP,#RX_HEAD]
 102 0a00 47F8046D 		_PUSH 
 103 0a04 4FF0FF36 		mov TOS,#-1
 104 0a08 02F074B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0a0c D6090000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0a1c 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0a24 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0a26 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0a2a FBD0     		beq 1b 
 115 0a2c 2E71     		strb TOS,[WP,#USART_DR]	 
 116 0a2e 57F8046B 		_POP
 117 0a32 02F05FB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0a36 100A0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 0a40 47F8046D 	        _PUSH 
 126 0a44 4FF00006 	        mov TOS,#0
 127 0a48 02F054B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
ARM GAS  forth.s 			page 33


 132              	****************************************/
 133 0a4c 3A0A0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0a58 47F8046D 	        _PUSH 
 135 0a5c 4FF00106 	        mov TOS,#1
 136 0a60 02F048B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0a64 500A0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0a70 3046     	        mov T0,TOS
 144 0a72 57F8046B 	        _POP 
 145 0a76 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0a78 4B48     	        ldr T0,=SER_QKEY 
 148 0a7a 6061     	        str T0,[UP,#STDIN]
 149 0a7c 4B48     	        ldr T0,=SER_EMIT
 150 0a7e A061     	        str T0,[UP,#STDOUT]
 151 0a80 02F038B9 	        _NEXT 
 152              	4: // local console 
 153 0a84 4A48     	        ldr T0,=PS2_QKEY
 154 0a86 6061     	        str T0,[UP,#STDIN]
 155 0a88 4A48     	        ldr T0,=TV_EMIT
 156 0a8a A061     	        str T0,[UP,#STDOUT]
 157 0a8c 02F032B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0a90 680A0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0aa0 504700BF 	      _NEST 
 166 0aa4 1F2F0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0aac 05320000 	1:    _ADR ONEP  // c+1
 168 0ab0 25300000 	      _ADR TOR   
 169 0ab4 1F2F0000 	      _DOLIT 10 
 169      0A000000 
 170 0abc 493A0000 	      _ADR SLMOD // r q  
 171 0ac0 B9320000 	      _ADR QDUP  // r q q | r 0  
 172 0ac4 5F2F0000 	      _QBRAN 2f  // r 0 
 172      D80A0000 
 173 0acc E12F0000 	      _ADR RFROM // r q c 
 174 0ad0 872F0000 	      _BRAN 1b
 174      AC0A0000 
 175 0ad8 1F2F0000 	2:    _DOLIT '0'  
 175      30000000 
 176 0ae0 A9310000 	      _ADR PLUS 
ARM GAS  forth.s 			page 34


 177 0ae4 BD2D0000 	      _ADR EMIT 
 178 0ae8 E12F0000 	      _ADR RFROM 
 179 0aec B9320000 	      _ADR QDUP 
 180 0af0 5F2F0000 	      _QBRAN 3f
 180      080B0000 
 181 0af8 15320000 	      _ADR ONEM 
 182 0afc 25300000 	      _ADR TOR 
 183 0b00 872F0000 	      _BRAN 2b 
 183      D80A0000 
 184              	3:    
 185 0b08 FB2C0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0b0c 940A0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0b18 504700BF 	      _NEST 
 193 0b1c 1F2F0000 	      _DOLIT 27 
 193      1B000000 
 194 0b24 BD2D0000 	      _ADR EMIT 
 195 0b28 1F2F0000 	      _DOLIT '['
 195      5B000000 
 196 0b30 BD2D0000 	      _ADR EMIT 
 197 0b34 FB2C0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0b38 100B0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0b44 504700BF 	      _NEST
 205 0b48 190B0000 	      _ADR ANSI_ESC
 206 0b4c B9300000 	      _ADR SWAP 
 207 0b50 A10A0000 	      _ADR ANSI_PARAM 
 208 0b54 1F2F0000 	      _DOLIT ';'
 208      3B000000 
 209 0b5c BD2D0000 	      _ADR EMIT
 210 0b60 A10A0000 	      _ADR ANSI_PARAM
 211 0b64 1F2F0000 	      _DOLIT 'H'
 211      48000000 
 212 0b6c BD2D0000 	      _ADR EMIT 
 213 0b70 FB2C0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 0b74 3C0B0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0b80 504700BF 	    _NEST
 221 0b84 1F2F0000 	    _DOLIT 1 
ARM GAS  forth.s 			page 35


 221      01000000 
 222 0b8c A9300000 	    _ADR DUPP 
 223 0b90 450B0000 	    _ADR SER_AT  
 224 0b94 190B0000 	    _ADR ANSI_ESC
 225 0b98 1F2F0000 	    _DOLIT 'J'
 225      4A000000 
 226 0ba0 BD2D0000 	    _ADR EMIT 
 227 0ba4 FB2C0000 	    _UNNEST 
 228 0ba8 E0090000 	
 228      1C0A0000 
 228      60180000 
 228      28110000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
ARM GAS  forth.s 			page 36


  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
ARM GAS  forth.s 			page 37


  75              	// configure PB12:15 as OUTPUT_PP 
  76 0bb8 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0bc0 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0bc2 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0bca 41EA0201 	  orr r1,r2
  82 0bce 0160     	  str r1,[r0,#GPIO_MODER]
  83 0bd0 81EA0101 	  eor r1,r1 
  84 0bd4 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0bd6 4FF00101 	  mov r1,#1 // pin 1 
  88 0bda 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0bde 00B5FFF7 	  _CALL gpio_config 
  89      DEFD5DF8 
  89      04EB
  90 0be8 4FF00101 	  mov r1,#1 
  91 0bec 4FF00202 	  mov r2,#2
  92 0bf0 00B5FFF7 	  _CALL gpio_speed 
  92      14FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0bfa 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0bfc 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0c00 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0c02 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0c0a 4FF00200 	  mov r0,#2 
 100 0c0e 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0c10 41EA0001 	  orr r1,r0 
 102 0c14 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0c16 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0c1e 41F2D470 	  mov r0,#HPER
 106 0c22 D062     	  str r0,[r2,#TIM_ARR]
 107 0c24 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0c28 D063     	  str r0,[r2,#TIM_CCR3]
 109 0c2a 4FF4E170 	  mov r0,#HPULSE 
 110 0c2e 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0c30 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0c34 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0c36 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0c3a 1062     	  str r0,[r2,#TIM_CCER]
 115 0c3c 4FF00100 	  mov r0,#1 
 116 0c40 D060     	  str r0,[r2,#TIM_DIER]
 117 0c42 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0c44 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0c48 4FF00201 	  mov r1,#2
 121 0c4c 00B5FFF7 	  _CALL nvic_set_priority
 121      4BFD5DF8 
 121      04EB
ARM GAS  forth.s 			page 38


 122 0c56 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0c5a 00B5FFF7 	  _CALL nvic_enable_irq
 123      5DFD5DF8 
 123      04EB
 124 0c64 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0c66 00BF     	  _GBL_FUNC tv_out_isr
 132 0c68 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0c70 81EA0101 	  eor T1,T1
 134 0c74 0161     	  str T1,[T0,#TIM_SR]
 135 0c76 A16E     	  ldr T1,[UP,#VID_CNTR]
 136 0c78 01F10101 	  add T1,#1 
 137 0c7c A166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0c7e E26E     	  ldr T2,[UP,#VID_STATE]
 140 0c80 002A     	  cmp T2,#ST_VSYNC 
 141 0c82 07D0     	  beq state_vsync
 142 0c84 012A     	  cmp T2,#ST_PREVID 
 143 0c86 2FD0     	  beq state_pre_video 
 144 0c88 022A     	  cmp T2,#ST_VIDEO 
 145 0c8a 36D0     	  beq state_video_out 
 146 0c8c 032A     	  cmp T2,#ST_POSTVID 
 147 0c8e 63D0     	  beq state_post_video
 148 0c90 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0c94 0129     	  cmp T1,#1
 152 0c96 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0c98 4FF0DB01 	  mov T1,#SERRATION
 155 0c9c 0164     	  str T1,[T0,#TIM_CCR4]
 156 0c9e 40F6E931 	  mov T1,#SYNC_LINE 
 157 0ca2 C162     	  str T1,[T0,#TIM_ARR]
 158 0ca4 6BE0     	  b tv_isr_exit 
 159 0ca6 0729     	1: cmp T1,#7
 160 0ca8 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0caa 40F62821 	  mov T1,#VSYNC_PULSE
 163 0cae 0164     	  str T1,[T0,#TIM_CCR4]
 164 0cb0 65E0     	  b tv_isr_exit
 165 0cb2 0D29     	2: cmp T1,#13
 166 0cb4 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0cb6 4FF0DB01 	   mov T1,#SERRATION 
 169 0cba 0164     	   str T1,[T0,#TIM_CCR4]
 170 0cbc 5FE0     	   b tv_isr_exit   
 171 0cbe 1229     	3: cmp T1,#18
 172 0cc0 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0cc2 216F     	   ldr T1,[UP,#VID_FIELD]
 175 0cc4 0029     	   cmp T1,#ODD_FIELD  
ARM GAS  forth.s 			page 39


 176 0cc6 5AD0     	   beq tv_isr_exit 
 177 0cc8 01E0     	   b sync_end 
 178 0cca 1329     	4: cmp T1,#19 
 179 0ccc 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0cce 4FF00901 	   mov T1,#9
 182 0cd2 A166     	   str T1,[UP,#VID_CNTR]
 183 0cd4 4FF4E171 	   mov T1,#HPULSE 
 184 0cd8 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0cda 41F2D471 	   mov T1,#HPER 
 186 0cde C162     	   str T1,[T0,#TIM_ARR] 
 187 0ce0 4FF00101 	   mov T1,#ST_PREVID 
 188 0ce4 E166     	   str T1,[UP,#VID_STATE]
 189 0ce6 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ce8 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0cea 48D4     	   bmi tv_isr_exit 
 194 0cec 4FF00201 	   mov T1,#ST_VIDEO 
 195 0cf0 E166     	   str T1,[UP,#VID_STATE]
 196 0cf2 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0cf6 C160     	   str T1,[T0,#TIM_DIER]
 198 0cf8 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0cfa F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0cfc 06D9     	   bls 1f 
 205 0cfe 4FF00301 	   mov T1,#ST_POSTVID 
 206 0d02 E166     	   str T1,[UP,#VID_STATE]
 207 0d04 4FF00101 	   mov T1,#1 
 208 0d08 C160     	   str T1,[T0,#TIM_DIER]
 209 0d0a 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0d0c 606F     	   ldr T0,[UP,#VID_BUFFER]
 212 0d0e A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0d12 4FF0A003 	   mov T3,#160
 214 0d16 03FB01F1 	   mul T1,T3 
 215 0d1a 0844     	   add T0,T1  
 216 0d1c 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0d24 10F8012B 	2: ldrb T2,[T0],#1 
 222 0d28 4FEA0222 	   lsl T2,#8 
 223 0d2c 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0d2e AFF30080 	   nop.w 
 225 0d32 AFF30080 	   nop.w
 226 0d36 AFF30080 	   nop.w 
 227 0d3a AFF30080 	   nop.w 
 228 0d3e 4FEA0212 	   lsl T2,#4  
 229 0d42 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0d44 AFF30080 	   nop.w
 231 0d48 AFF30080 	   nop.w  
ARM GAS  forth.s 			page 40


 232 0d4c 013B     	   subs T3,#1
 233 0d4e E9D1     	   bne 2b  
 234 0d50 4FF47022 	   mov T2,#(15<<16) 
 235 0d54 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0d56 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0d58 4FF48372 	   mov T2,#262
 239 0d5c 9142     	   cmp T1,T2
 240 0d5e 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0d60 216F     	   ldr T1,[UP,VID_FIELD]
 243 0d62 11B9     	   cbnz T1, frame_end 
 244 0d64 40F6E931 	   mov T1,#SYNC_LINE
 245 0d68 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0d6a 4FF00001 	   mov T1,#ST_VSYNC 
 248 0d6e E166     	   str T1,[UP,#VID_STATE]
 249 0d70 81EA0101 	   eor T1,T1 
 250 0d74 A166     	   str T1,[UP,#VID_CNTR]
 251 0d76 216F     	   ldr T1,[UP,#VID_FIELD]
 252 0d78 6FEA0101 	   mvn T1,T1  
 253 0d7c 2167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0d7e 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0d80 780B0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0d90 47F8046D 		_PUSH 
 266 0d94 04F19C06 		ADD TOS,UP,#BK_COLOR
 267 0d98 01F0ACBF 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0d9c 840D0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0dac 47F8046D 		_PUSH 
 273 0db0 04F1A006 		ADD TOS,UP,#PEN_COLOR
 274 0db4 01F09EBF 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0db8 A00D0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0dc4 47F8046D 	  _PUSH 
 280 0dc8 04F19806 	  ADD TOS,UP,#COL 
ARM GAS  forth.s 			page 41


 281 0dcc 01F092BF 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0dd0 BC0D0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0dd8 47F8046D 	  _PUSH 
 287 0ddc 04F19406 	  ADD TOS,UP,#ROW 
 288 0de0 01F088BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0de4 D40D0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0df0 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0df4 00FB06F6 	  mul TOS,T0 
 295 0df8 01F07CBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0dfc E80D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0e08 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0e0c 00FB06F6 	  mul TOS,T0 
 302 0e10 01F070BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0e14 000E0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0e20 47F8046D 	  _PUSH 
 308 0e24 DFF88C65 	  ldr TOS,=font_6x8 
 309 0e28 01F064BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0e2c 180E0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0e38 47F8046D 	  _PUSH 
 315 0e3c 666F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0e3e 01F059BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0e42 300E0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
ARM GAS  forth.s 			page 42


 327 0e4c 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0e4e 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0e52 02FB00F0 	    mul T0,T2 
 330 0e56 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0e5a 1044     	    add T0,T2 
 332 0e5c 636F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0e5e 0344     	    add T3,T0 // T3 -> byte address 
 334 0e60 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0e62 4FF00F02 	    mov T2,#15 // AND mask 
 336 0e66 11F0010F 	    tst T1,#1 
 337 0e6a 01D0     	    beq 1f 
 338 0e6c 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0e70 DFF84405 	1:  ldr T0,=plot_op 
 340 0e74 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0e78 05EA0205 	    and WP,T2 // mask out nibble 
 343 0e7c 94F89C00 	    ldrb T0,[UP,#BK_COLOR]
 344 0e80 11F0010F 	    tst T1,#1 
 345 0e84 01D1     	    bne 1f 
 346 0e86 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0e8a 45EA0005 	1:  orr WP,T0  
 348 0e8e 1D70     	    strb WP,[T3]
 349 0e90 1AE0     	    b 9f 
 350              	op_pen: 
 351 0e92 05EA0205 	    and WP,T2 
 352 0e96 94F8A000 	    ldrb T0,[UP,#PEN_COLOR]
 353 0e9a 11F0010F 	    tst T1,#1
 354 0e9e 01D1     	    bne 1f 
 355 0ea0 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0ea4 45EA0005 	1:	orr WP,T0 
 357 0ea8 1D70     	    strb WP,[T3]
 358 0eaa 0DE0     	    b 9f 
 359              	op_invert:
 360 0eac 85EA0205 	    eor WP,T2 
 361 0eb0 1D70     	    strb WP,[T3]
 362 0eb2 09E0     	    b 9f 
 363              	op_xor:
 364 0eb4 D4F8A000 	    ldr T0,[UP,#PEN_COLOR]
 365 0eb8 11F0010F 	    tst T1,#1 
 366 0ebc 01D1     	    bne 1f 
 367 0ebe 4FEA0010 	    lsl T0,#4 
 368 0ec2 85EA0005 	1:  eor WP,T0 
 369 0ec6 1D70     	    strb WP,[T3]
 370 0ec8 57F8046B 	9:  _POP 
 371 0ecc 01F012BF 	    _NEXT 
 372              	
 373 0ed0 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ed4 460E0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0ee0 A06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0ee2 0028     	    cmp T0,#0
 381 0ee4 FCD1     	    bne 1b
ARM GAS  forth.s 			page 43


 382 0ee6 01F005BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0eea D80E0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0ef4 80EA0000 	    eor T0,T0 
 388 0ef8 94F89C10 	    ldrb T1,[UP,#BK_COLOR]
 389 0efc 40EA0100 	    orr T0,T1 
 390 0f00 4FEA0111 	    lsl T1,#4 
 391 0f04 40EA0100 	    orr T0,T1 
 392 0f08 4FEA0021 	    lsl T1,T0,#8 
 393 0f0c 40EA0100 	    orr T0,T1 
 394 0f10 4FEA0041 	    lsl T1,T0,#16
 395 0f14 40EA0100 	    orr T0,T1 
 396 0f18 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0f1c 626F     	    ldr T2,[UP,#VID_BUFFER]
 398 0f1e 5050     	1:	str T0,[T2,T1]
 399 0f20 0439     	    subs T1,#4
 400 0f22 FCD1     	    bne 1b
 401 0f24 1060     	    str T0,[T2]
 402 0f26 80EA0000 	    eor T0,T0 
 403 0f2a C4F89400 	    str T0,[UP,#ROW]
 404 0f2e C4F89800 	    str T0,[UP,#COL]
 405 0f32 01F0DFBE 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0f36 EE0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0f44 504700BF 	  _NEST
 412 0f48 1F2F0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0f50 A9300000 	  _ADR DUPP  
 414 0f54 25300000 	  _ADR TOR 
 415 0f58 C9310000 	  _ADR STAR
 416 0f5c 390E0000 	  _ADR VIDBUFF
 417 0f60 A9310000 	  _ADR PLUS
 418 0f64 E12F0000 	  _ADR RFROM   
 419 0f68 1F2F0000 	  _DOLIT 0 
 419      00000000 
 420 0f70 ED3C0000 	  _ADR FILL 
 421 0f74 FB2C0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0f78 3A0F0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0f88 504700BF 	    _NEST 
ARM GAS  forth.s 			page 44


 429 0f8c 390E0000 	    _ADR VIDBUFF 
 430 0f90 A9300000 	    _ADR DUPP 
 431 0f94 1F2F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0f9c A9300000 	    _ADR DUPP 
 433 0fa0 25300000 	    _ADR TOR 
 434 0fa4 A9310000 	    _ADR PLUS 
 435 0fa8 B9300000 	    _ADR SWAP 
 436 0fac 1F2F0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0fb4 E12F0000 	    _ADR RFROM  
 438 0fb8 B9310000 	    _ADR SUBB 
 439 0fbc A53C0000 	    _ADR MOVE
 440 0fc0 1F2F0000 	    _DOLIT 24 
 440      18000000 
 441 0fc8 450F0000 	    _ADR CLRLINE 
 442 0fcc FB2C0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0fd0 7C0F0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0fe0 504700BF 	    _NEST 
 450 0fe4 390E0000 	    _ADR VIDBUFF
 451 0fe8 A9300000 	    _ADR DUPP 
 452 0fec 1F2F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0ff4 A9310000 	    _ADR PLUS 
 454 0ff8 1F2F0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 1000 1F2F0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 1008 B9310000 	    _ADR SUBB  
 457 100c A53C0000 	    _ADR MOVE
 458 1010 1F2F0000 	    _DOLIT 0 
 458      00000000 
 459 1018 450F0000 	    _ADR CLRLINE
 460 101c FB2C0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 1020 D40F0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 102c E34D     	    ldr WP,=SCROLLUP 
 469 102e 45F00105 	    orr WP,#1
 470 1032 80EA0000 	    eor T0,T0 
 471 1036 C4F89800 	    str T0,[UP,#COL]
 472 103a D4F89400 	    ldr T0,[UP,#ROW]
 473 103e 1828     	    cmp T0,#24 
ARM GAS  forth.s 			page 45


 474 1040 A2D0     	    beq SCROLLUP  
 475 1042 00F10100 	    add T0,#1 
 476 1046 C4F89400 	    str T0,[UP,#ROW]
 477 104a 01F053BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 104e 24100000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 1058 D4F89800 	  ldr T0,[UP,#COL]
 484 105c 00F10100 	  add T0,#1
 485 1060 3528     	  cmp T0,#53
 486 1062 E3D5     	  bpl TV_CRLF  
 487 1064 C4F89800 	  str T0,[UP,#COL]
 488 1068 01F044BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 106c 52100000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 1078 D4F89800 	    ldr T0,[UP,#COL]
 497 107c 28B1     	    cbz T0,1f 
 498 107e A0F10100 	    sub T0,#1 
 499 1082 C4F89800 	    str T0,[UP,#COL]
 500 1086 01F035BE 	    _NEXT 
 501 108a D4F89400 	1:  ldr T0,[UP,#ROW]
 502 108e 38B1     	    cbz T0,9f
 503 1090 A0F10100 	    sub T0,#1
 504 1094 C4F89400 	    str T0,[UP,#ROW]
 505 1098 4FF03400 	    mov T0,#52 
 506 109c C4F89800 	    str T0,[UP,#COL]
 507 10a0 01F028BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 10a4 4FF08000 	    mov T0,#128 
 513 10a8 06EA0006 	    and TOS,T0 
 514 10ac 4FEAD616 	    lsr TOS,#7
 515 10b0 01F020BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 10b4 3868     	  ldr T0,[DSP]
 520 10b6 00F10100 	  add T0,#1 
 521 10ba 3860     	  str T0,[DSP]
 522 10bc 01F01ABE 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 10c0 4FEA4606 	    lsl TOS,#1
ARM GAS  forth.s 			page 46


 527 10c4 01F016BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 10c8 504700BF 	    _NEST 
 536 10cc 1F2F0000 	    _DOLIT 5 
 536      05000000 
 537 10d4 25300000 	    _ADR TOR 
 538 10d8 25300000 	1:  _ADR TOR 
 539 10dc 1D330000 	    _ADR DDUP 
 540 10e0 11300000 	    _ADR RAT
 541 10e4 A5100000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 10e8 4D0E0000 	    _ADR PLOT 
 543 10ec B5100000 	    _ADR INCR_X 
 544 10f0 E12F0000 	    _ADR RFROM 
 545 10f4 C1100000 	    _ADR NEXT_PIXEL
 546 10f8 412F0000 	    _DONXT 1b
 546      D8100000 
 547 1100 09330000 	    _ADR TDROP 
 548 1104 FB2C0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1108 A6F12006 	   sub TOS,#32
 553 110c 4FF00800 	   mov T0,#8 
 554 1110 00FB06F6 	   mul TOS,T0 
 555 1114 A748     	   ldr T0,=font_6x8
 556 1116 0644     	   add TOS,T0 
 557 1118 01F0ECBD 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 111c 70100000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1128 504700BF 	    _NEST
 565 112c A9300000 	    _ADR DUPP 
 566 1130 1F2F0000 	    _DOLIT 32 
 566      20000000 
 567 1138 6D340000 	    _ADR ULESS
 568 113c 5F2F0000 	    _QBRAN 1f
 568      4C110000 
 569 1144 872F0000 	    _BRAN CTRL_KEY
 569      B0110000 
 570 114c 09110000 	1:  _ADR CHAR_FONT 
 571 1150 C50D0000 	    _ADR CURSOR_COL 
 572 1154 B52F0000 	    _ADR AT
 573 1158 090E0000 	    _ADR COLX  // x coord 
 574 115c D90D0000 	    _ADR CURSOR_ROW 
 575 1160 B52F0000 	    _ADR AT    
 576 1164 F10D0000 	    _ADR ROWY  // {c-adr x y -- } 
ARM GAS  forth.s 			page 47


 577 1168 CD320000 	    _ADR ROT  // TEST 
 578 116c 1F2F0000 	    _DOLIT 7   
 578      07000000 
 579 1174 25300000 	    _ADR TOR  
 580 1178 25300000 	1:  _ADR TOR  // { x y }
 581 117c 1D330000 	    _ADR DDUP  // { x y x y }
 582 1180 11300000 	    _ADR RAT 
 583 1184 D52F0000 	    _ADR CAT   // { x y x y r }
 584 1188 C9100000 	    _ADR CHAR_ROW 
 585 118c 05320000 	    _ADR ONEP // {x y' }
 586 1190 E12F0000 	    _ADR RFROM 
 587 1194 05320000 	    _ADR ONEP // {x y' c-adr' }
 588 1198 412F0000 	    _DONXT 1b
 588      78110000 
 589 11a0 09330000 	    _ADR TDROP  
 590 11a4 59100000 	    _ADR RIGHT
 591 11a8 99120000 	9:  _ADR SHOW_CURSOR 
 592 11ac FB2C0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 11b0 21130000 	    _ADR HIDE_CURSOR
 595 11b4 A9300000 	    _ADR DUPP 
 596 11b8 1F2F0000 	    _DOLIT BKSPP  
 596      08000000 
 597 11c0 35340000 	    _ADR EQUAL 
 598 11c4 5F2F0000 	    _QBRAN 1f 
 598      DC110000 
 599 11cc 79120000 	    _ADR BACK_SPACE 
 600 11d0 99300000 	8:  _ADR DROP 
 601 11d4 872F0000 	    _BRAN 9b 
 601      A8110000 
 602 11dc A9300000 	1:  _ADR DUPP 
 603 11e0 1F2F0000 	    _DOLIT CRR 
 603      0D000000 
 604 11e8 35340000 	    _ADR EQUAL 
 605 11ec 5F2F0000 	    _QBRAN 1f 
 605      00120000 
 606 11f4 21120000 	    _ADR CAR_RET
 607 11f8 872F0000 	    _BRAN 8b
 607      D0110000 
 608 1200 1F2F0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1208 35340000 	    _ADR EQUAL 
 610 120c 5F2F0000 	    _QBRAN 9b 
 610      A8110000 
 611 1214 39120000 	    _ADR LN_FEED
 612 1218 872F0000 	    _BRAN 9b  
 612      A8110000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 1220 504700BF 	   _NEST
 620 1224 1F2F0000 	   _DOLIT 0 
 620      00000000 
 621 122c C50D0000 	   _ADR CURSOR_COL 
ARM GAS  forth.s 			page 48


 622 1230 A12F0000 	   _ADR STORE 
 623 1234 FB2C0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1238 504700BF 	    _NEST 
 631 123c D90D0000 	    _ADR CURSOR_ROW 
 632 1240 B52F0000 	    _ADR AT 
 633 1244 A9300000 	    _ADR DUPP 
 634 1248 1F2F0000 	    _DOLIT 24 
 634      18000000 
 635 1250 51310000 	    _ADR XORR 
 636 1254 5F2F0000 	    _QBRAN 1f
 636      6C120000 
 637 125c 05320000 	    _ADR ONEP 
 638 1260 D90D0000 	    _ADR CURSOR_ROW 
 639 1264 A12F0000 	    _ADR STORE 
 640 1268 FB2C0000 	    _UNNEST    
 641 126c 99300000 	1:  _ADR DROP 
 642 1270 890F0000 	    _ADR SCROLLUP 
 643 1274 FB2C0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1278 504700BF 	  _NEST 
 652 127c 79100000 	  _ADR LEFT 
 653 1280 99120000 	  _ADR SHOW_CURSOR
 654 1284 FB2C0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1288 20110000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1298 504700BF 	    _NEST 
 663 129c 1F2F0000 	    _DOLIT 0xFF
 663      FF000000 
 664 12a4 D90D0000 	0:  _ADR CURSOR_ROW
 665 12a8 B52F0000 	    _ADR AT  
 666 12ac 05320000 	    _ADR ONEP 
 667 12b0 F10D0000 	    _ADR ROWY 
 668 12b4 1F2F0000 	    _DOLIT BPR
 668      A0000000 
 669 12bc C9310000 	    _ADR STAR
 670 12c0 1F2F0000 	    _DOLIT BPR  
 670      A0000000 
ARM GAS  forth.s 			page 49


 671 12c8 B9310000 	    _ADR SUBB 
 672 12cc C50D0000 	    _ADR CURSOR_COL
 673 12d0 B52F0000 	    _ADR AT 
 674 12d4 090E0000 	    _ADR COLX 
 675 12d8 A9320000 	    _ADR TWOSL  
 676 12dc A9310000 	    _ADR PLUS
 677 12e0 390E0000 	    _ADR VIDBUFF
 678 12e4 A9310000 	    _ADR PLUS
 679 12e8 1F2F0000 	    _DOLIT 2
 679      02000000 
 680 12f0 25300000 	    _ADR TOR  
 681 12f4 1D330000 	1:  _ADR DDUP 
 682 12f8 C12F0000 	    _ADR CSTOR 
 683 12fc 05320000 	    _ADR ONEP 
 684 1300 412F0000 	    _DONXT 1b
 684      F4120000 
 685 1308 F5320000 	2:  _ADR DDROP // drop 3 elements 
 686 130c FB2C0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 1310 8C120000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 1320 504700BF 	    _NEST 
 694 1324 910D0000 	    _ADR BACKCOLOR 
 695 1328 B52F0000 	    _ADR AT 
 696 132c A9300000 	    _ADR DUPP  
 697 1330 1F2F0000 	    _DOLIT 4 
 697      04000000 
 698 1338 99310000 	    _ADR LSHIFT 
 699 133c 3D310000 	    _ADR ORR 
 700 1340 872F0000 	    _BRAN 0b
 700      A4120000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1348 14130000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1354 352E     	    cmp TOS,#53
 706 1356 01D4     	    bmi 1f 
 707 1358 4FF03406 	    mov TOS,#52
 708 135c C4F89860 	1:  str TOS,[UP,#COL]
 709 1360 57F8046B 	    _POP
 710 1364 192E     	    cmp TOS,#25
 711 1366 01D4     	    bmi 1f 
 712 1368 4FF01806 	    mov TOS,#24 
 713 136c C4F89460 	1:  str TOS,[UP,#ROW]
 714 1370 57F8046B 	    _POP 
 715 1374 01F0BEBC 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
ARM GAS  forth.s 			page 50


 719 1378 4C130000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1384 504700BF 	    _NEST 
 721 1388 F93B0000 	    _ADR PAD 
 722 138c A9300000 	    _ADR DUPP 
 723 1390 05320000 	    _ADR ONEP 
 724 1394 1F2F0000 	    _DOLIT 53
 724      35000000 
 725 139c 294A0000 	    _ADR ACCEP
 726 13a0 B9300000 	    _ADR SWAP 
 727 13a4 99300000 	    _ADR DROP 
 728 13a8 E9300000 	    _ADR OVER 
 729 13ac C12F0000 	    _ADR CSTOR  
 730 13b0 FB2C0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
ARM GAS  forth.s 			page 51


 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
ARM GAS  forth.s 			page 52


 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
ARM GAS  forth.s 			page 53


 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
ARM GAS  forth.s 			page 54


   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
ARM GAS  forth.s 			page 55


  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
ARM GAS  forth.s 			page 56


  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
ARM GAS  forth.s 			page 57


 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 13c0 1C61     	   .byte 0x1c,'a' 
   9 13c2 3262     	   .byte 0x32,'b'
  10 13c4 2163     	   .byte 0x21,'c'
  11 13c6 2364     	   .byte 0x23,'d'
  12 13c8 2465     	   .byte 0x24,'e'
  13 13ca 2B66     	   .byte 0x2b,'f'
  14 13cc 3467     	   .byte 0x34,'g'
  15 13ce 3368     	   .byte 0x33,'h'
  16 13d0 4369     	   .byte 0x43,'i'
  17 13d2 3B6A     	   .byte 0x3B,'j'
  18 13d4 426B     	   .byte 0x42,'k'
  19 13d6 4B6C     	   .byte 0x4b,'l'
  20 13d8 3A6D     	   .byte 0x3a,'m'
  21 13da 316E     	   .byte 0x31,'n'
  22 13dc 446F     	   .byte 0x44,'o'
  23 13de 4D70     	   .byte 0x4d,'p'
  24 13e0 1571     	   .byte 0x15,'q'
  25 13e2 2D72     	   .byte 0x2d,'r'
  26 13e4 1B73     	   .byte 0x1b,'s'
  27 13e6 2C74     	   .byte 0x2c,'t'
  28 13e8 3C75     	   .byte 0x3c,'u'
  29 13ea 2A76     	   .byte 0x2a,'v'
  30 13ec 1D77     	   .byte 0x1d,'w'
  31 13ee 2278     	   .byte 0x22,'x'
  32 13f0 3579     	   .byte 0x35,'y'
  33 13f2 1A7A     	   .byte 0x1a,'z'
  34 13f4 4530     	   .byte 0x45,'0'
  35 13f6 1631     	   .byte 0x16,'1'
  36 13f8 1E32     	   .byte 0x1e,'2'
  37 13fa 2633     	   .byte 0x26,'3'
  38 13fc 2534     	   .byte 0x25,'4'
  39 13fe 2E35     	   .byte 0x2e,'5'
  40 1400 3636     	   .byte 0x36,'6'
  41 1402 3D37     	   .byte 0x3d,'7'
  42 1404 3E38     	   .byte 0x3e,'8'
ARM GAS  forth.s 			page 58


  43 1406 4639     	   .byte 0x46,'9'
  44 1408 0E60     	   .byte 0x0e,'`'
  45 140a 4E2D     	   .byte 0x4e,'-'
  46 140c 553D     	   .byte 0x55,'='
  47 140e 5D5C     	   .byte 0x5d,'\\'
  48 1410 545B     	   .byte 0x54,'['
  49 1412 5B5D     	   .byte 0x5b,']'
  50 1414 4C3B     	   .byte 0x4c,';'
  51 1416 5227     	   .byte 0x52,'\''
  52 1418 412C     	   .byte 0x41,','
  53 141a 492E     	   .byte 0x49,'.'
  54 141c 7C2A     	   .byte 0x7c,'*'
  55 141e 792B     	   .byte 0x79,'+'
  56 1420 2920     	   .byte 0x29,' '
  57 1422 5A0D     	   .byte SC_ENTER,CRR 
  58 1424 6608     	   .byte SC_BKSP,BKSPP 
  59 1426 0D09     	   .byte SC_TAB,9
  60 1428 761B     	   .byte SC_ESC,27
  61 142a 119E     	   .byte SC_LALT,VK_LALT 
  62 142c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 142e 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 1430 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 1432 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1434 5800     	   .byte SC_CAPS,0
  67 1436 0580     	   .byte SC_F1,VK_F1
  68 1438 0681     	   .byte SC_F2,VK_F2
  69 143a 0482     	   .byte SC_F3,VK_F3
  70 143c 0C83     	   .byte SC_F4,VK_F4
  71 143e 0384     	   .byte SC_F5,VK_F5
  72 1440 0B85     	   .byte SC_F6,VK_F6
  73 1442 8386     	   .byte SC_F7,VK_F7
  74 1444 0A87     	   .byte SC_F8,VK_F8
  75 1446 0188     	   .byte SC_F9,VK_F9
  76 1448 098A     	   .byte SC_F10,VK_F10
  77 144a 788B     	   .byte SC_F11,VK_F11
  78 144c 078C     	   .byte SC_F12,VK_F12
  79 144e 7030     	   .byte SC_KP0,'0'
  80 1450 6931     	   .byte SC_KP1,'1'
  81 1452 7232     	   .byte SC_KP2,'2'
  82 1454 7A33     	   .byte SC_KP3,'3'
  83 1456 6B34     	   .byte SC_KP4,'4'
  84 1458 7335     	   .byte SC_KP5,'5'
  85 145a 7436     	   .byte SC_KP6,'6'
  86 145c 6C37     	   .byte SC_KP7,'7'
  87 145e 7538     	   .byte SC_KP8,'8'
  88 1460 7D39     	   .byte SC_KP9,'9'
  89 1462 7C2A     	   .byte SC_KPMUL,'*'
  90 1464 4A2F     	   .byte SC_KPDIV,'/'
  91 1466 792B     	   .byte SC_KPPLUS,'+'
  92 1468 7B2D     	   .byte SC_KPMINUS,'-'
  93 146a 712E     	   .byte SC_KPDOT,'.'
  94 146c 5A0D     	   .byte SC_KPENTER,'\r'
  95 146e FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 1470 AAAA     	   .byte BAT_OK,BAT_OK  
  97 1472 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
ARM GAS  forth.s 			page 59


 100              	shifted:
 101 1474 6141     	   .byte 'a','A'
 102 1476 6242     	   .byte 'b','B'
 103 1478 6343     	   .byte 'c','C'
 104 147a 6444     	   .byte 'd','D'
 105 147c 6545     	   .byte 'e','E'
 106 147e 6646     	   .byte 'f','F'
 107 1480 6747     	   .byte 'g','G'
 108 1482 6848     	   .byte 'h','H'
 109 1484 6949     	   .byte 'i','I'
 110 1486 6A4A     	   .byte 'j','J'
 111 1488 6B4B     	   .byte 'k','K'
 112 148a 6C4C     	   .byte 'l','L'
 113 148c 6D4D     	   .byte 'm','M'
 114 148e 6E4E     	   .byte 'n','N'
 115 1490 6F4F     	   .byte 'o','O'
 116 1492 7050     	   .byte 'p','P'
 117 1494 7151     	   .byte 'q','Q'
 118 1496 7252     	   .byte 'r','R'
 119 1498 7353     	   .byte 's','S'
 120 149a 7454     	   .byte 't','T'
 121 149c 7555     	   .byte 'u','U'
 122 149e 7656     	   .byte 'v','V'
 123 14a0 7757     	   .byte 'w','W'
 124 14a2 7858     	   .byte 'x','X'
 125 14a4 7959     	   .byte 'y','Y'
 126 14a6 7A5A     	   .byte 'z','Z'
 127 14a8 3121     	   .byte '1','!'
 128 14aa 3240     	   .byte '2','@'
 129 14ac 3323     	   .byte '3','#'
 130 14ae 3424     	   .byte '4','$'
 131 14b0 3525     	   .byte '5','%'
 132 14b2 365E     	   .byte '6','^'
 133 14b4 3726     	   .byte '7','&'
 134 14b6 382A     	   .byte '8','*'
 135 14b8 3928     	   .byte '9','('
 136 14ba 3029     	   .byte '0',')'
 137 14bc 2D5F     	   .byte '-','_'
 138 14be 3D2B     	   .byte '=','+'
 139 14c0 607E     	   .byte '`','~'
 140 14c2 2722     	   .byte '\'','"'
 141 14c4 2C3C     	   .byte ',','<'
 142 14c6 2E3E     	   .byte '.','>'
 143 14c8 2F3F     	   .byte '/','?'
 144 14ca 5C7C     	   .byte '\\','|'
 145 14cc 3B3A     	   .byte ';',':'
 146 14ce 5B7B     	   .byte '[','{'
 147 14d0 5D7D     	   .byte ']','}'
 148 14d2 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 14d4 315C     	   .byte '1','\\'
 153 14d6 3240     	   .byte '2','@'
 154 14d8 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
ARM GAS  forth.s 			page 60


 157 14da 363F     	   .byte '6','?'
 158 14dc 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 14de 397B     	   .byte '9','{'
 161 14e0 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 14e2 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 14e4 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 14e6 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 14e8 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 14ea 11A3     	    .byte SC_RALT,VK_RALT
 172 14ec 2F97     	    .byte SC_APPS,VK_APPS
 173 14ee 758D     	    .byte SC_UP,VK_UP
 174 14f0 728E     	    .byte SC_DOWN,VK_DOWN
 175 14f2 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 14f4 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 14f6 7095     	    .byte SC_INSERT,VK_INSERT
 178 14f8 6C91     	    .byte SC_HOME,VK_HOME
 179 14fa 7D93     	    .byte SC_PGUP,VK_PGUP
 180 14fc 7A94     	    .byte SC_PGDN,VK_PGDN
 181 14fe 717F     	    .byte SC_DEL,VK_DELETE
 182 1500 6992     	    .byte SC_END,VK_END
 183 1502 4A2F     	    .byte SC_KPDIV,'/'
 184 1504 5A0D     	    .byte SC_KPENTER,'\r'
 185 1506 1200     	    .byte 0x12,0
 186 1508 7C00     	    .byte 0x7c,0
 187 150a 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 150c 6303     	   .byte 'c', VK_CTRL_C 
 193 150e 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1510 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1512 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1514 11A3     	   .byte SC_RALT,VK_RALT
 197 1516 2F97     	   .byte SC_APPS,VK_APPS
 198 1518 7095     	   .byte SC_INSERT,VK_INSERT
 199 151a 6C91     	   .byte SC_HOME,VK_HOME
 200 151c 7D93     	   .byte SC_PGUP,VK_PGUP
 201 151e 717F     	   .byte SC_DEL,VK_DELETE
 202 1520 6992     	   .byte SC_END,VK_END
 203 1522 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1524 758D     	   .byte SC_UP,VK_UP
 205 1526 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1528 728E     	   .byte SC_DOWN,VK_DOWN
 207 152a 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 152c 4A2F     	   .byte SC_KPDIV,'/'
 209 152e 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 1530 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 1532 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1534 119E     	   .byte SC_LALT,VK_LALT
 213 1536 599F     	   .byte SC_RSHIFT,VK_RSHIFT
ARM GAS  forth.s 			page 61


 214 1538 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 153a 761B     	   .byte SC_ESC,VK_ESC
 216 153c 779A     	   .byte SC_NUM,VK_NLOCK
 217 153e 589B     	   .byte SC_CAPS,VK_CLOCK
 218 1540 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 1542 00BF     	    _GBL_FUNC kbd_isr 
  79 1544 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 154c 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 1550 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 1552 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 155a D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
  84 155e 10F0020F 	    tst r0,#KBD_TX 
  85 1562 40F08480 	    bne send_bit  
ARM GAS  forth.s 			page 62


  86 1566 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1568 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 156c 01F10102 	    add r2,r1,#1
  89 1570 84F87820 	    strb r2,[UP,#KBD_BITCNTR]
  90 1574 0029     	    cmp r1,#0
  91 1576 15D0     	    beq start_bit 
  92 1578 0929     	    cmp r1,#9 
  93 157a 25D0     	    beq parity_bit 
  94 157c 0A29     	    cmp r1,#10 
  95 157e 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 1580 94F87920 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1584 4FEA5202 	    lsr r2,#1 
  99 1588 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 158c 07D0     	    beq 1f 
 101 158e 42F08002 	    orr r2,#(1<<7)
 102 1592 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 103 1596 00F10100 	    add r0,#1 
 104 159a 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 105 159e 84F87920 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 15a2 63E0     	    b 9f         
 107              	start_bit:
 108 15a4 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 15a8 60D1     	    bne 9f // not a start bit 
 110 15aa 80EA0000 	    eor r0,r0 
 111 15ae 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 112 15b2 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 113 15b6 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 15ba 6FF00101 	    mvn r1,#1
 115 15be 00EA0100 	    and r0,r1 // clear error flag 
 116 15c2 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 117 15c6 51E0     	    b 9f 
 118              	parity_bit:
 119 15c8 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 120 15cc 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 15d0 4CD0     	    beq 9f  
 122 15d2 01F10101 	    add r1,#1 
 123 15d6 84F87B10 	    strb r1,[UP,#KBD_PARITY]  
 124 15da 47E0     	    b 9f      
 125              	stop_bit:
 126 15dc 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 15e0 40D0     	    beq 8f // error stop bit expected 
 128 15e2 94F87B10 	    ldrb r1,[UP,#KBD_PARITY]
 129 15e6 11F0010F 	    tst r1,#1 
 130 15ea 3BD0     	    beq 8f // error parity
 131 15ec 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 15f0 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 15f4 E028     	    cmp r0,#XT_KEY
 134 15f6 04D1     	    bne 1f
 135 15f8 41F04001 	    orr r1,#KBD_F_XT
 136 15fc 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 137 1600 30E0     	    b 8f  
 138 1602 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1606 14D0     	    beq store_code
 140 1608 5828     	    cmp r0,#SC_CAPS
 141 160a 04D1     	    bne 1f
 142 160c 81F00401 	    eor r1,#KBD_F_CAPS
ARM GAS  forth.s 			page 63


 143 1610 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1614 06E0     	    b 2f 
 145 1616 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 1620 94F87A10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1624 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1628 01EA0201 	    and r1,r2
 149 162c 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 150 1630 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 1632 F028     	    cmp r0,#KEY_REL
 154 1634 04D1     	    bne 1f
 155              	// set release flags 
 156 1636 41F08001 	    orr r1,#KBD_F_REL 
 157 163a 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 158 163e 11E0     	    b 8f     
 159 1640 0146     	1:  mov r1,r0 
 160 1642 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 164c 0AD1     	    bne 8f // was async key 
 162 164e D4F89000 	    ldr r0,[UP,#KBD_QTAIL]
 163 1652 04F17C02 	    add r2,UP,#KBD_QUEUE
 164 1656 1154     	    strb r1,[r2,r0]
 165 1658 00F10100 	    add r0,#1
 166 165c 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 1660 84F89000 	    strb r0,[UP,#KBD_QTAIL]
 168 1664 80EA0000 	8:  eor r0,r0 
 169 1668 A4F87800 	    strh r0,[UP,#KBD_BITCNTR]
 170 166c 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 166e 94F87810 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 1672 01F10100 	    add r0,r1,#1
 182 1676 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 183 167a 94F87900 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 167e 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 1682 0829     	1:  cmp r1,#8 
 187 1684 15D0     	    beq send_parity 
 188 1686 0929     	    cmp r1,#9 
 189 1688 1CD0     	    beq send_stop
 190 168a 0A29     	    cmp r1,#10
 191 168c 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 168e 10F0010F 	    tst r0,#1
 194 1692 4FEA5000 	    lsr r0,#1
 195 1696 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
ARM GAS  forth.s 			page 64


 196 169a 02D1     	    bne 1f 
 197 169c 4FEA0242 	    lsl r2,#16
 198 16a0 05E0     	    b 2f  
 199 16a2 94F87B00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 16a6 00F10100 	    add r0,#1 
 201 16aa 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 202 16ae 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 16b0 1CE0     	    b 9f 
 204              	send_parity:
 205 16b2 94F87B00 	    ldrb r0,[UP,#KBD_PARITY]
 206 16b6 10F0010F 	    tst r0,#1
 207 16ba 01D0     	    beq 1f 
 208 16bc 4FEA0242 	    lsl r2,#16
 209 16c0 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 16c2 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 16c4 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 16c6 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 16ca 1960     	    str r1,[r3,#GPIO_MODER]
 217 16cc 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 16ce 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 16d2 6FF00201 	    mvn r1,#KBD_TX 
 221 16d6 00EA0100 	    and r0,r1 
 222 16da 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 16dc 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 16e0 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 225 16e4 80EA0000 	    eor r0,r0 
 226 16e8 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 227 16ec 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 16ee 02B4     	    push {r1}
 238 16f0 DFF86414 	    ldr r1,=async_keys
 239 16f4 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 16fe 02BC     	    pop {r1}
 241 1700 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
ARM GAS  forth.s 			page 65


 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 1702 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 170c FF28     	    cmp r0,#255
 256 170e 01D1     	    bne set_async_key 
 257 1710 0020     	    movs r0,#0 
 258 1712 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1714 06B4     	    push {r1,r2}
 262 1716 94F87A20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 171a DFF84014 	    ldr r1,=async_jump 
 264 171e D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1722 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1726 04E0     	    b set_reset
 268              	ctrl_key:
 269 1728 4FF01000 	    mov r0,#KBD_F_CTRL
 270 172c 01E0     	    b set_reset 
 271              	alt_key:
 272 172e 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 1732 12F0800F 	    tst r2,#KBD_F_REL 
 275 1736 04D0     	    beq 1f 
 276 1738 6FEA0000 	    mvn r0,r0
 277 173c 02EA0002 	    and r2,r0
 278 1740 01E0     	    b 2f
 279 1742 42EA0002 	1:  orr r2,r0 
 280 1746 84F87A20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 174a 5FF0FF30 	    movs r0,#-1
 282 174e 06BC     	9:  pop {r1,r2}
 283 1750 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 1752 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1754 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1756 1401     	    .byte SC_LCTRL,1  // left control 
 290 1758 1401     	    .byte SC_RCTRL,1  // right control 
 291 175a 1102     	    .byte SC_LALT,2  // left alt 
 292 175c 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 175e 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 1760 00       	    .byte 0 // shift  key 
 297 1761 03       	    .byte (ctrl_key-shift_key)/2
 298 1762 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
ARM GAS  forth.s 			page 66


 306              	**********************************/
 307 1763 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1764 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 176c 1846     	    mov r0,r3 
 311 176e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 1772 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1776 00B5FFF7 	    _CALL gpio_config
 313      12F85DF8 
 313      04EB
 314 1780 1846     	    mov r0,r3 
 315 1782 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1786 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 178a 00B5FFF7 	    _CALL gpio_config
 317      08F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1794 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 179c 4FF40050 	    mov r0,#(2<<12)
 321 17a0 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 17a2 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 17aa 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 17ae 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 17b0 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 17b2 80EA0000 	   eor r0,r0 
 328 17b6 C4F88C00 	   str r0,[UP,#KBD_QHEAD]
 329 17ba C4F89000 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 17be 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 17c2 4FF00101 	   mov r1,#1 
 333 17c6 00B5FEF7 	   _CALL nvic_set_priority
 333      8EFF5DF8 
 333      04EB
 334 17d0 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 17d4 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A0FF5DF8 
 335      04EB
 336 17de 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 17e0 7C130000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 17f0 47F8046D 	    _PUSH 
 342 17f4 94F87A60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 17f8 06F0FC06 	    and TOS,#0xFC  
 344 17fc 01F07ABA 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
ARM GAS  forth.s 			page 67


 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1800 0EB4     	    push {T1,T2,T3}
 352 1802 80EA0000 	    eor T0,T0  
 353 1806 04F17C03 	    add T3,UP,#KBD_QUEUE
 354 180a D4F88C10 	    ldr T1,[UP,#KBD_QHEAD]
 355 180e D4F89020 	    ldr T2,[UP,#KBD_QTAIL]
 356 1812 9142     	    cmp T1,T2 
 357 1814 06D0     	    beq 2f  
 358 1816 585C     	    ldrb T0,[T3,T1]
 359 1818 01F10101 	    add T1,#1 
 360 181c 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1820 C4F88C10 	    str T1,[UP,#KBD_QHEAD]
 362 1824 0EBC     	2:  pop {T1,T2,T3}
 363 1826 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1828 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 1832 0000     	    movs T0,T0
 368 1834 F8D0     	    beq wait_code  
 369 1836 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1838 04B4     	    push {T2}
 380 183a 11F8012B 	1:  ldrb T2,[T1],#1
 381 183e 22B1     	    cbz T2,2f 
 382 1840 8242     	    cmp T2,T0
 383 1842 02D0     	    beq 2f 
 384 1844 01F10101 	    add T1,#1 
 385 1848 F7E7     	    b 1b 
 386 184a 0878     	2:  ldrb T0,[T1]
 387 184c 0000     	    movs T0,T0 // set/reset zero flag 
 388 184e 04BC     	9:  pop {T2}
 389 1850 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 1852 E4170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 1860 47F8046D 	    _PUSH 
 398 1864 86EA0606 	    eor TOS,TOS 
 399 1868 BD49     	    ldr T1,=sc_ascii // translation table
 400 186a 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 68


 401 186e 4FF04002 	    mov T2,#KBD_F_XT 
 402 1872 1042     	    tst T0,T2
 403 1874 00D0     	    beq 1f
 404 1876 BB49     	    ldr T1,=extended // extended code translation
 405 1878 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 1882 98B1     	    cbz T0,inkey_exit
 407 1884 E128     	    cmp T0,#XT2_KEY // pause 
 408 1886 13D0     	    beq pause_key
 409 1888 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1892 0646     	    mov TOS,T0
 411 1894 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 189e 032E     	    cmp TOS,#VK_CTRL_C 
 413 18a0 3EF4F9AD 	    beq user_reboot 
 414 18a4 47F8046D 	    _PUSH 
 415 18a8 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 18ac 01F022BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 18b0 4FF00701 	    mov T1,#7 
 420 18b4 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 18be 0139     	    subs T1,#1
 422 18c0 F8D1     	    bne 1b 
 423 18c2 01F017BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 18c6 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 18ca 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 18ce 06D1     	    bne shift_down 
 431 18d0 10F0200F 	    tst T0,#KBD_F_ALT  
 432 18d4 06D1     	    bne altchar_down 
 433 18d6 10F0100F 	    tst T0,#KBD_F_CTRL
 434 18da 06D1     	    bne ctrl_down 
 435 18dc 0DE0     	    b 9f 
 436              	shift_down:
 437 18de 3046     	    mov T0,TOS 
 438 18e0 A149     	    ldr T1,=shifted 
 439 18e2 04E0     	    b 8f 
 440              	altchar_down:
 441 18e4 3046     	    mov T0,TOS 
 442 18e6 A149     	    ldr T1,=altchar
 443 18e8 01E0     	    b 8f
 444              	ctrl_down:
 445 18ea 3046     	    mov T0,TOS 
 446 18ec A049     	    ldr T1,=controls 
 447 18ee 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
ARM GAS  forth.s 			page 69


 448 18f8 0646     	    mov TOS,T0
 449 18fa 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1904 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1906 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 190a 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 190e 0BD0     	    beq 9f 
 456 1910 412E     	    cmp TOS,#'A'
 457 1912 09D4     	    bmi 9f 
 458 1914 5B2E     	    cmp TOS,#'Z'+1 
 459 1916 03D4     	    bmi 3f 
 460 1918 612E     	    cmp TOS,#'a'
 461 191a 05D4     	    bmi 9f 
 462 191c 7B2E     	    cmp TOS,#'z'+1
 463 191e 03D5     	    bpl 9f 
 464 1920 4FF02000 	3:  mov T0,#(1<<5)
 465 1924 86EA0006 	    eor TOS,T0 
 466 1928 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 192a 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 192c E06E     	1:  ldr r0,[UP,#VID_STATE]
 483 192e 0128     	    cmp r0,ST_PREVID 
 484 1930 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 1932 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1936 00B5FEF7 	    _CALL nvic_disable_irq
 487      04FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 1940 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1948 1846     	    mov r0,r3 
 491 194a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 194e 4FF01102 	    mov r2,#OUTPUT_OD
 493 1952 00B5FEF7 	    _CALL gpio_config 
 493      24FF5DF8 
 493      04EB
 494 195c 1846     	    mov r0,r3 
 495 195e 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 1962 82EA0202 	    eor r2,r2 
 497 1966 00B5FEF7 	    _CALL gpio_out 
ARM GAS  forth.s 			page 70


 497      70FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 1970 4FF4E150 	    mov r0,#150*48
 500 1974 0138     	1:  subs r0,#1 
 501 1976 FDD1     	    bne 1b
 502 1978 01BC     	    pop {r0}
 503 197a 84F87900 	    strb r0,[UP,#KBD_SHIFTER]
 504 197e D4F87A00 	    ldr r0,[UP,#KBD_FLAGS]
 505 1982 40F00200 	    orr r0,#KBD_TX 
 506 1986 84F87A00 	    strb r0,[UP,#KBD_FLAGS]
 507 198a 80EA0000 	    eor r0,r0 
 508 198e 84F87800 	    strb r0,[UP,#KBD_BITCNTR]
 509 1992 84F87B00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1996 1846     	    mov r0,r3 
 513 1998 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 199c 4FF01102 	    mov r2,#OUTPUT_OD 
 515 19a0 00B5FEF7 	    _CALL gpio_config 
 515      FDFE5DF8 
 515      04EB
 516 19aa 1846     	    mov r0,r3 
 517 19ac 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 19b0 82EA0202 	    eor r2,r2 
 519 19b4 00B5FEF7 	    _CALL gpio_out
 519      49FF5DF8 
 519      04EB
 520              	// release clock line 
 521 19be 1846     	    mov r0,r3 
 522 19c0 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 19c4 4FF00002 	    mov r2,#INPUT_FLOAT
 524 19c8 00B5FEF7 	    _CALL gpio_config
 524      E9FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 19d2 4FF00A00 	    mov r0,#10
 528 19d6 E060     	    str r0,[UP,#CD_TIMER]
 529 19d8 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 19da 20B1     	    cbz r0, 4f 
 531 19dc 94F87A00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 19e0 10F0020F 	    tst r0,#KBD_TX
 533 19e4 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 19e6 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 19ea 00B5FEF7 	    _CALL nvic_enable_irq
 536      95FE5DF8 
 536      04EB
 537 19f4 94F87A00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 19f8 20F00201 	    bic r1,r0,#KBD_TX
 539 19fc 84F87A10 	    strb r1,[UP,#KBD_FLAGS]
 540 1a00 00F00200 	    and r0,#KBD_TX
 541 1a04 48B1     	    cbz r0, 5f
 542 1a06 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1a08 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1a0c 1960     	    str r1,[r3,#GPIO_MODER]
ARM GAS  forth.s 			page 71


 545 1a0e 80EA0000 	    eor r0,r0 
 546 1a12 84F87800 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1a16 6FEA0000 	    mvn r0,r0   
 548 1a1a 0EBC     	5:  pop {r1,r2,r3}
 549 1a1c 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1a1e 80EA0000 	    eor T0,T0 
 555 1a22 C4F88C00 	    str T0,[UP,#KBD_QHEAD]
 556 1a26 C4F89000 	    str T0,[UP,#KBD_QTAIL]
 557 1a2a 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 1a2e 6FF00301 	    mvn T1,#3
 559 1a32 00EA0100 	    and T0,T1 
 560 1a36 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 561 1a3a 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1a3c 56180000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1a48 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1a4c 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1a56 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1a58 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 1a62 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1a6c FE28     	    cmp r0,KBD_CMD_RESEND
 574 1a6e EBD0     	    beq 1b 
 575 1a70 4FF4FA70 	    mov T0,#500 
 576 1a74 E060     	    str T0,[UP,#CD_TIMER]
 577 1a76 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 1a80 10B9     	    cbnz T0,3f
 579 1a82 E068     	    ldr T0,[UP,#CD_TIMER]
 580 1a84 0028     	    cmp T0,#0 
 581 1a86 F6D1     	    bne 2b 
 582 1a88 47F8046D 	3:  _PUSH 
 583 1a8c 0646     	    mov TOS,T0  
 584 1a8e 01F031B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1a92 401A0000 	    _HEADER KBD_LED,7,"KBD-LED"
ARM GAS  forth.s 			page 72


 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 1aa0 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1aaa 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1aae 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1ab8 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1ac2 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1ac4 ECD0     	    beq 1b
 598 1ac6 FA28     	    cmp T0,#KBD_ACK  
 599 1ac8 F6D1     	    bne 2b 
 600 1aca 3046     	2:  mov T0,TOS 
 601 1acc 00F00700 	    and T0,#7 
 602 1ad0 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 1ada 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1ae4 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1ae6 F0D0     	    beq 2b
 606 1ae8 FA28     	    cmp T0,#KBD_ACK 
 607 1aea F6D1     	    bne 3b  
 608 1aec 57F8046B 	    _POP 
 609 1af0 01F000B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1af4 961A0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1b04 94F87A00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1b08 10F0010F 	    tst T0,#1
 619 1b0c 01D1     	    bne 1f 
 620 1b0e 01F0F1B8 	    _NEXT 
 621 1b12 47F8046D 	1: _PUSH 
 622 1b16 6FF00101 	    mvn T1,#1 
 623 1b1a 00EA0100 	    and T0,T1 
 624 1b1e 84F87A00 	    strb T0,[UP,#KBD_FLAGS]
 625 1b22 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 1b26 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
ARM GAS  forth.s 			page 73


 632              	*************************/
 633 1b2e F81A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1b3c 504700BF 	    _NEST
 635 1b40 051B0000 	1:  _ADR CAPS_LED  
 636 1b44 61180000 	    _ADR PS2_QKEY 
 637 1b48 B9320000 	    _ADR QDUP 
 638 1b4c 5F2F0000 	    _QBRAN 1b  
 638      401B0000 
 639 1b54 FB2C0000 	    _UNNEST 
 640 1b58 52170000 	
 640      60170000 
 640      C0130000 
 640      E4140000 
 640      74140000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
ARM GAS  forth.s 			page 74


  41              	flash_spi_init:
  42 1b78 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1b80 0346     	    mov r3,r0 
  44 1b82 4FF00401 	    mov r1,#PIN_F_SC 
  45 1b86 4FF00102 	    mov r2,#OUTPUT_PP
  46 1b8a 00B5FEF7 	    _CALL gpio_config 
  46      08FE5DF8 
  46      04EB
  47 1b94 1846     	    mov r0,r3 
  48 1b96 4FF00401 	    mov r1,#PIN_F_SC  
  49 1b9a 4FF00102 	    MOV r2,#1
  50 1b9e 00B5FEF7 	    _CALL gpio_out 
  50      54FE5DF8 
  50      04EB
  51 1ba8 1846     	    mov r0,r3 
  52 1baa 4FF00501 	    mov r1,#PIN_SCK  
  53 1bae 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1bb2 00B5FEF7 	    _CALL gpio_config 
  54      F4FD5DF8 
  54      04EB
  55 1bbc 1846     	    mov r0,r3 
  56 1bbe 4FF00701 	    mov r1,#PIN_MOSI 
  57 1bc2 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1bc6 00B5FEF7 	    _CALL gpio_config 
  58      EAFD5DF8 
  58      04EB
  59 1bd0 1846     	    mov r0,r3
  60 1bd2 4FF00601 	    mov r1,#PIN_MISO
  61 1bd6 4FF00202 	    mov r2,#INPUT_AFO  
  62 1bda 00B5FEF7 	    _CALL gpio_config
  62      E0FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1be4 4CF6AA40 	    mov r0,#0xCCAA
  65 1be8 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1bea 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1bf2 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1bf4 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1bf8 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1bfa 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1c02 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1c06 0180     	    strh r1,[r0,#SPI_CR1]
  73 1c08 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1c0a 80EA0000 	    eor r0,r0 
  75 1c0e C5F25050 	    movt r0,#0x5550 
  76 1c12 40EA0100 	    orr r0,r1 
  77 1c16 1862     	    str r0,[r3,#GPIO_AFRL]
  78 1c18 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
ARM GAS  forth.s 			page 75


  85 1c1a 321B0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1c28 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1c30 4FF00401 	    mov r1,#PIN_F_SC 
  88 1c34 4FF00002 	    mov r2,#0 
  89 1c38 00B5FEF7 	    _CALL gpio_out 
  89      07FE5DF8 
  89      04EB
  90 1c42 01F057B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1c46 1E1C0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1c54 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1c5c 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1c5e 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1c62 FBD1     	    bne 1b 
 102 1c64 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1c6c 4FF00401 	    mov r1,#PIN_F_SC 
 104 1c70 4FF00102 	    mov r2,#1 
 105 1c74 00B5FEF7 	    _CALL gpio_out 
 105      E9FD5DF8 
 105      04EB
 106 1c7e 01F039B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1c82 4A1C0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1c90 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1c98 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1c9a 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1c9e FBD0     	    beq 0b 
 118 1ca0 6FF00001 	    mvn T1,#0 
 119 1ca4 0173     	    strb T1,[T0,#SPI_DR]
 120 1ca6 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1ca8 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1cac FBD0     	    beq 1b     
 123              	2:  
 124 1cae 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 76


 125 1cb2 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1cb4 01F01EB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1cb8 861C0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1cc4 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1ccc 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1cce 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1cd2 FBD0     	    beq 0b 
 138 1cd4 0673     	    strb TOS,[T0,#SPI_DR]
 139 1cd6 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1cd8 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1cdc FBD0     	    beq 1b 
 142 1cde 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1ce0 57F8046B 	    _POP 
 144 1ce4 01F006B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ce8 BC1C0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1cf4 504700BF 	    _NEST 
 153 1cf8 291C0000 	    _ADR CHIP_SEL 
 154 1cfc 1F2F0000 	    _DOLIT 4
 154      04000000 
 155 1d04 C51C0000 	    _ADR WR_BYTE
 156 1d08 551C0000 	    _ADR CHIP_DSEL
 157 1d0c FB2C0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1d10 EC1C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1d1c 504700BF 	    _NEST 
 165 1d20 291C0000 	    _ADR CHIP_SEL 
 166 1d24 1F2F0000 	    _DOLIT 6 
 166      06000000 
 167 1d2c C51C0000 	    _ADR WR_BYTE 
 168 1d30 551C0000 	    _ADR CHIP_DSEL 
 169 1d34 FB2C0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
ARM GAS  forth.s 			page 77


 173              	    read status register  
 174              	********************************/
 175 1d38 141D0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1d44 504700BF 	    _NEST
 177 1d48 291C0000 	    _ADR CHIP_SEL  
 178 1d4c 1F2F0000 	    _DOLIT sr_cmd 
 178      6C1D0000 
 179 1d54 A9310000 	    _ADR PLUS 
 180 1d58 D52F0000 	    _ADR CAT
 181 1d5c C51C0000 	    _ADR WR_BYTE
 182 1d60 911C0000 	    _ADR RD_BYTE
 183 1d64 551C0000 	    _ADR CHIP_DSEL  
 184 1d68 FB2C0000 	    _UNNEST 
 185 1d6c 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1d6f 3C1D0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1d7c 504700BF 	    _NEST 
 193 1d80 A9300000 	    _ADR DUPP 
 194 1d84 1F2F0000 	    _DOLIT 16
 194      10000000 
 195 1d8c 81310000 	    _ADR RSHIFT 
 196 1d90 C51C0000 	    _ADR WR_BYTE 
 197 1d94 A9300000 	    _ADR DUPP
 198 1d98 1F2F0000 	    _DOLIT 8 
 198      08000000 
 199 1da0 81310000 	    _ADR RSHIFT 
 200 1da4 C51C0000 	    _ADR WR_BYTE 
 201 1da8 C51C0000 	    _ADR WR_BYTE 
 202 1dac FB2C0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1db0 731D0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1dc0 504700BF 	    _NEST 
 210 1dc4 1F2F0000 	1:  _DOLIT 0 
 210      00000000 
 211 1dcc 451D0000 	    _ADR RD_SR 
 212 1dd0 1F2F0000 	    _DOLIT 3 
 212      03000000 
 213 1dd8 29310000 	    _ADR ANDD 
 214 1ddc 5F2F0000 	    _QBRAN 2f
 214      EC1D0000 
 215 1de4 872F0000 	    _BRAN 1b
ARM GAS  forth.s 			page 78


 215      C41D0000 
 216 1dec FB2C0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1df0 B41D0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1e00 504700BF 	    _NEST 
 225 1e04 1D1D0000 	    _ADR WR_ENBL
 226 1e08 291C0000 	    _ADR CHIP_SEL 
 227 1e0c 1F2F0000 	    _DOLIT 0x20 
 227      20000000 
 228 1e14 C51C0000 	    _ADR WR_BYTE 
 229 1e18 7D1D0000 	    _ADR SEND_ADR
 230 1e1c 551C0000 	    _ADR CHIP_DSEL 
 231 1e20 C11D0000 	    _ADR WAIT_DONE 
 232 1e24 FB2C0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1e28 F41D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1e38 504700BF 	    _NEST 
 240 1e3c 1D1D0000 	    _ADR WR_ENBL 
 241 1e40 291C0000 	    _ADR CHIP_SEL
 242 1e44 1F2F0000 	    _DOLIT 0x60
 242      60000000 
 243 1e4c 1F2F0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1e54 C51C0000 	    _ADR WR_BYTE 
 245 1e58 C51C0000 	    _ADR WR_BYTE 
 246 1e5c 551C0000 	    _ADR CHIP_DSEL 
 247 1e60 C11D0000 	    _ADR WAIT_DONE
 248 1e64 FB2C0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1e68 2C1E0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1e74 504700BF 	    _NEST
 258 1e78 291C0000 	    _ADR CHIP_SEL 
 259 1e7c 1F2F0000 	    _DOLIT 3 
 259      03000000 
ARM GAS  forth.s 			page 79


 260 1e84 C51C0000 	    _ADR WR_BYTE 
 261 1e88 7D1D0000 	    _ADR SEND_ADR
 262 1e8c 25300000 	    _ADR TOR   
 263 1e90 872F0000 	    _BRAN 2f
 263      A81E0000 
 264 1e98 911C0000 	1:  _ADR RD_BYTE
 265 1e9c E9300000 	    _ADR OVER 
 266 1ea0 C12F0000 	    _ADR CSTOR
 267 1ea4 05320000 	    _ADR ONEP 
 268 1ea8 412F0000 	2:  _DONXT 1b
 268      981E0000 
 269 1eb0 99300000 	    _ADR DROP 
 270 1eb4 551C0000 	    _ADR CHIP_DSEL 
 271 1eb8 FB2C0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1ebc 6C1E0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1ec8 504700BF 	    _NEST 
 280 1ecc 1D1D0000 	    _ADR WR_ENBL
 281 1ed0 291C0000 	    _ADR CHIP_SEL
 282 1ed4 1F2F0000 	    _DOLIT 2 
 282      02000000 
 283 1edc C51C0000 	    _ADR WR_BYTE 
 284 1ee0 7D1D0000 	    _ADR SEND_ADR
 285 1ee4 25300000 	    _ADR TOR
 286 1ee8 872F0000 	    _BRAN 2f 
 286      081F0000 
 287 1ef0 A9300000 	1:  _ADR DUPP 
 288 1ef4 D52F0000 	    _ADR CAT 
 289 1ef8 A9300000 	    _ADR DUPP 
 290 1efc 41440000 	    _ADR HDOT
 291 1f00 C51C0000 	    _ADR WR_BYTE 
 292 1f04 05320000 	    _ADR ONEP
 293 1f08 412F0000 	2:  _DONXT 1b 
 293      F01E0000 
 294 1f10 99300000 	    _ADR DROP
 295 1f14 551C0000 	    _ADR CHIP_DSEL
 296 1f18 C11D0000 	    _ADR WAIT_DONE 
 297 1f1c FB2C0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
ARM GAS  forth.s 			page 80


 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1f20 C01E0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1f30 504700BF 	    _NEST 
 318              	    
 319 1f34 FB2C0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1f38 241F0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1f48 504700BF 	    _NEST 
 327              	
 328 1f4c FB2C0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1f50 3C1F0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1f58 504700BF 	    _NEST 
 336              	
 337 1f5c FB2C0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1f60 541F0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1f6c 504700BF 	    _NEST 
 345              	
 346 1f70 FB2C0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1f74 641F0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1f80 504700BF 	    _NEST 
 354              	
 355 1f84 FB2C0000 	    _UNNEST 
ARM GAS  forth.s 			page 81


 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1f88 5F708930 	     .word  0x3089705F // 1e-9
  34 1f8c 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1f90 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1f94 BD378635 	     .word  0x358637BD // 1e-6 
  37 1f98 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1f9c 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1fa0 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1fa4 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1fa8 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1fac 0000803F 	     .word  0x3F800000 // 1.0 
  44 1fb0 00002041 	     .word  0x41200000 // 1e1 
  45 1fb4 0000C842 	     .word  0x42C80000 // 1e2 
  46 1fb8 00007A44 	     .word  0x447A0000 // 1e3 
  47 1fbc 00401C46 	     .word  0x461C4000 // 1e4 
  48 1fc0 0050C347 	     .word  0x47C35000 // 1e5 
  49 1fc4 00247449 	     .word  0x49742400 // 1e6 
  50 1fc8 8096184B 	     .word  0x4B189680 // 1e7
  51 1fcc 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1fd0 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
ARM GAS  forth.s 			page 82


  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1fd4 781F0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1fe0 4FEA8606 	    lsl TOS,#2  
  61 1fe4 FF48     	    ldr t0, =p10 
  62 1fe6 0644     	    add TOS,TOS,T0
  63 1fe8 3668     	    ldr TOS,[TOS]  
  64 1fea 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1fee DFF8F803 	   ldr.w r0,=CPACR 
  73 1ff2 0168     	   ldr R1,[R0]
  74 1ff4 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1ff8 0160     	   str r1,[r0]
  76 1ffa BFF34F8F 	   dsb 
  77 1ffe FB48     	   ldr r0,=FPC_BASE_ADR
  78 2000 81EA0101 	   eor r1,r1 
  79 2004 0160     	   str r1,[r0,FPCCR]
  80 2006 BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 200a 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 200c D81F0000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 2014 4FF05100 	    mov r0,#FPU_IRQ 
  92 2018 00B5FEF7 	    _CALL nvic_disable_irq
  92      93FB5DF8 
  92      04EB
  93 2022 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 2026 10200000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 2030 4FF05100 	    mov r0,#FPU_IRQ
 102 2034 00B5FEF7 	    _CALL nvic_enable_irq
 102      70FB5DF8 
 102      04EB
ARM GAS  forth.s 			page 83


 103 203e 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 2042 2A200000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 204c 47F8046D 	   _PUSH 
 112 2050 F1EE106A 	   vmrs TOS,FPSCR
 113 2054 BFF34F8F 	   dsb  
 114 2058 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 205c 46200000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 206c F1EE100A 	   vmrs T0,FPSCR 
 125 2070 BFF34F8F 	   dsb 
 126 2074 06EA0006 	   and TOS,T0  
 127 2078 E1EE106A 	   vmsr FPSCR,TOS 
 128 207c BFF34F8F 	   dsb 
 129 2080 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 2084 60200000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 208c 00EE106A 	    vmov.f32 S0,TOS 
 138 2090 57F8046B 	    _POP 
 139 2094 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 2098 88200000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 20a0 00EE906A 	    vmov.f32 S1,TOS 
 147 20a4 57F8046B 	    _POP 
 148 20a8 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
ARM GAS  forth.s 			page 84


 153              	**********************************/
 154 20ac 9C200000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 20b4 01EE106A 	    vmov.f32 S2,TOS 
 156 20b8 57F8046B 	    _POP 
 157 20bc 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 20c0 B0200000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 20c8 47F8046D 	    _PUSH 
 165 20cc 10EE106A 	    vmov.f32 TOS,S0 
 166 20d0 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 20d4 C4200000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 20dc 47F8046D 	    _PUSH 
 174 20e0 10EE906A 	    vmov.f32 TOS,S1 
 175 20e4 00F006BE 	    _NEXT 
 176              	
 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 20e8 D8200000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 20f0 47F8046D 	    _PUSH 
 183 20f4 11EE106A 	    vmov.f32 TOS,S2 
 184 20f8 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 20fc EC200000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 2104 00EE106A 	    vmov.f32 S0,TOS
 194 2108 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 210c 10EE106A 	    vmov.f32 TOS,s0 
 196 2110 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 2114 00210000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
ARM GAS  forth.s 			page 85


 203 2120 00EE106A 	    vmov.f32 S0,TOS 
 204 2124 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 2128 10EE106A 	    vmov.f32 TOS,S0 
 206 212c 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 2130 18210000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 2138 00EE106A 	    vmov.f32 S0,TOS
 214 213c B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 2140 10EE106A 	    vmov.f32 TOS,s0 
 216 2144 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 2148 34210000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 2150 00EE106A 	   vmov.f32 s0,TOS 
 224 2154 57F8046B 	   _POP 
 225 2158 00EE906A 	   vmov.f32 s1,TOS 
 226 215c 30EE200A 	   vadd.f32 s0,s0,s1 
 227 2160 10EE106A 	   vmov.f32 TOS,s0
 228 2164 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 2168 4C210000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 2170 00EE106A 	   vmov.f32 s0,TOS 
 237 2174 57F8046B 	   _POP 
 238 2178 00EE906A 	   vmov.f32 s1,TOS 
 239 217c 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 2180 10EE106A 	   vmov.f32 TOS,s0
 241 2184 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 2188 6C210000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 2190 00EE106A 	   vmov.f32 s0,TOS 
 251 2194 57F8046B 	   _POP 
 252 2198 00EE906A 	   vmov.f32 s1,TOS 
 253 219c 20EE800A 	   vmul.f32 s0,s1,s0 
 254 21a0 10EE106A 	   vmov.f32 TOS,s0
 255 21a4 00F0A6BD 	   _NEXT 
ARM GAS  forth.s 			page 86


 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 21a8 8C210000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 21b0 00EE106A 	   vmov.f32 s0,TOS 
 264 21b4 57F8046B 	   _POP 
 265 21b8 00EE906A 	   vmov.f32 s1,TOS 
 266 21bc 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 21c0 10EE106A 	   vmov.f32 TOS,s0
 268 21c4 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 21c8 AC210000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 21d4 00EE106A 	    vmov.f32 s0,TOS 
 277 21d8 B1EE400A 	    vneg.f32 S0,S0 
 278 21dc 10EE106A 	    vmov.f32 TOS,S0    
 279 21e0 00F088BD 	    _NEXT 
 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 21e4 CC210000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 21f0 80EA0000 	    eor T0,T0 
 287 21f4 6FEA0000 	    mvn T0,T0 
 288 21f8 4FEA5000 	    lsr T0,#1 
 289 21fc 06EA0006 	    and TOS,T0 
 290 2200 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 2204 E8210000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 2210 00EE106A 	     vmov.f32 s0,TOS 
 299 2214 B1EEC00A 	     vsqrt.f32 s0,s0 
 300 2218 10EE106A 	     vmov.f32 TOS,s0 
 301 221c 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
ARM GAS  forth.s 			page 87


 306              	*****************************/
 307 2220 08220000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 2228 00EE106A 	    vmov.f32 s0,TOS 
 309 222c B5EE400A 	    vcmp.f32 s0, #0.0 
 310 2230 F1EE106A 	    vmrs TOS,FPSCR
 311 2234 BFF34F8F 	    dsb  
 312 2238 4FEAE676 	    asr TOS,#31   
 313 223c 00F05ABD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 2240 24220000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 2248 504700BF 	    _NEST 
 321 224c 71210000 	    _ADR FSUBB
 322 2250 29220000 	    _ADR FZLESS
 323 2254 B9330000 	    _ADR INVER     
 324 2258 FB2C0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 225c 44220000 	    _HEADER FLESS,2,"F<"
 330      02463C00 
 331 2264 504700BF 	    _NEST 
 332 2268 71210000 	    _ADR FSUBB 
 333 226c 29220000 	    _ADR FZLESS
 334 2270 FB2C0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 2274 60220000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 2280 504700BF 	    _NEST 
 342 2284 E9300000 	   _ADR OVER 
 343 2288 E9300000 	   _ADR OVER 
 344 228c 49220000 	   _ADR FGREAT 
 345 2290 5F2F0000 	   _QBRAN 1f 
 345      9C220000 
 346 2298 B9300000 	   _ADR SWAP  
 347 229c 99300000 	1: _ADR DROP 
 348 22a0 FB2C0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 22a4 78220000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 22b0 504700BF 	    _NEST 
ARM GAS  forth.s 			page 88


 355 22b4 E9300000 	    _ADR OVER 
 356 22b8 E9300000 	    _ADR OVER 
 357 22bc 65220000 	    _ADR FLESS 
 358 22c0 5F2F0000 	    _QBRAN 1f
 358      CC220000 
 359 22c8 B9300000 	    _ADR SWAP   
 360 22cc 99300000 	1:  _ADR DROP 
 361 22d0 FB2C0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 22d4 A8220000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 22e0 80EA0000 	    eor T0,T0 
 370 22e4 C8F20000 	    movt T0,#0X8000
 371 22e8 06EA0006 	    and TOS,T0
 372 22ec 4FEAE676 	    asr TOS,#31  
 373 22f0 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
 379 22f4 D8220000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 2300 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 2308 06EA0006 	    and TOS,T0 
 382 230c 4FEAD656 	    lsr TOS,#23
 383 2310 A6F17F06 	    sub TOS,#127 
 384 2314 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 2318 F8220000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 2324 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 232c 06EA0006 	    AND TOS,T0 
 393 2330 80EA0000 	    EOR T0,T0 
 394 2334 C0F28000 	    MOVT T0,0x80
 395 2338 46EA0006 	    ORR TOS,T0 
 396 233c 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
ARM GAS  forth.s 			page 89


 403 2340 1C230000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 2348 47F8046D 	    _PUSH 
 405 234c 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 2354 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 2358 44230000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 2360 47F8046D 	    _PUSH 
 414 2364 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 236c 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 2370 5C230000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 237c 47F8046D 	    _PUSH 
 423 2380 45F68E56 	    _MOV32 TOS, 0x40135D8E
 423      C4F21306 
 424 2388 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 238c 74230000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 2398 47F8046D 	    _PUSH 
 433 239c 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 23a4 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 23a8 90230000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 23b4 504700BF 	    _NEST
 443 23b8 01230000 	    _ADR FEXP 
 444 23bc 39210000 	    _ADR STOF 
 445 23c0 99230000 	    _ADR LOG2
 446 23c4 91210000 	    _ADR FSTAR 
 447 23c8 21210000 	    _ADR TRUNC  
ARM GAS  forth.s 			page 90


 448 23cc A9300000 	    _ADR DUPP 
 449 23d0 19310000 	    _ADR ZLESS 
 450 23d4 5F2F0000 	    _QBRAN 1f 
 450      E0230000 
 451 23dc 15320000 	    _ADR ONEM
 452 23e0 FB2C0000 	1:  _UNNEST 
 453 23e4 AC1F0000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 23f0 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 23f4 0000C842 	            .word  0x42C80000  // 100.0
  31 23f8 00401C46 	            .word  0x461C4000  // 10000.0 
  32 23fc 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 2400 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 2404 AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 2408 504700BF 	    _NEST 
  45 240c 1F2F0000 	    _DOLIT 2 
  45      02000000 
  46 2414 99310000 	    _ADR LSHIFT 
  47 2418 1F2F0000 	    _DOLIT p10p2n 
ARM GAS  forth.s 			page 91


  47      F0230000 
  48 2420 A9310000 	    _ADR PLUS 
  49 2424 B52F0000 	    _ADR AT 
  50 2428 FB2C0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 242c 504700BF 	    _NEST 
  59 2430 1F2F0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2438 1F2F0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2440 AD3B0000 	    _ADR PICK  // idx f e 1 idx 
  62 2444 99310000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2448 29310000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 244c FB2C0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2450 504700BF 	    _NEST 
  78 2454 25300000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2458 11300000 	    _ADR RAT   // idx f e R: e 
  81 245c 2D240000 	    _ADR bit_state // idx f state 
  82 2460 5F2F0000 	    _QBRAN 1f   // bit reset 
  82      74240000 
  83 2468 E9300000 	    _ADR OVER 
  84 246c 09240000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2470 B1210000 	    _ADR FSLH  // idx f R: e 
  86 2474 B9300000 	1:  _ADR SWAP  // f idx R: e 
  87 2478 05320000 	    _ADR ONEP   // F idx++ R: e 
  88 247c B9300000 	    _ADR SWAP   // idx f  
  89 2480 E9300000 	    _ADR OVER   // idx f idx 
  90 2484 1F2F0000 	    _DOLIT 5 
  90      05000000 
  91 248c B5340000 	    _ADR GREAT  // idx > 5
  92 2490 5F2F0000 	    _QBRAN div_loop 
  92      58240000 
  93 2498 E12F0000 	    _ADR RFROM 
  94 249c 99300000 	    _ADR DROP 
  95 24a0 FB2C0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
ARM GAS  forth.s 			page 92


  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 24a4 504700BF 	    _NEST 
 109 24a8 25300000 	    _ADR TOR 
 110              	mult_loop:
 111 24ac 11300000 	    _ADR RAT   // idx f e R: e 
 112 24b0 2D240000 	    _ADR bit_state // idx f state 
 113 24b4 5F2F0000 	    _QBRAN 1f   // bit reset 
 113      C8240000 
 114 24bc E9300000 	    _ADR OVER  
 115 24c0 09240000 	    _ADR p10p2at // idx f pwr10 R: e
 116 24c4 91210000 	    _ADR FSTAR  // idx f R: e 
 117 24c8 B9300000 	1:  _ADR SWAP  // f idx R: e 
 118 24cc 05320000 	    _ADR ONEP   // F idx++ R: e 
 119 24d0 B9300000 	    _ADR SWAP   // idx f  
 120 24d4 E9300000 	    _ADR OVER   // idx f idx 
 121 24d8 1F2F0000 	    _DOLIT 5 
 121      05000000 
 122 24e0 B5340000 	    _ADR GREAT  // idx > 5
 123 24e4 5F2F0000 	    _QBRAN mult_loop 
 123      AC240000 
 124 24ec E12F0000 	    _ADR RFROM 
 125 24f0 99300000 	    _ADR DROP 
 126 24f4 FB2C0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 24f8 504700BF 	    _NEST 
 136 24fc E9300000 	    _ADR OVER  // e f e 
 137 2500 5F2F0000 	    _QBRAN 3f // exp==0,  done 
 137      3C250000 
 138 2508 1F2F0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 2510 E1320000 	    _ADR NROT // idx e f
 140 2514 B9300000 	    _ADR SWAP // idx f e   
 141 2518 A9300000 	    _ADR DUPP  // idx f e e 
 142 251c 19310000 	    _ADR ZLESS
 143 2520 5F2F0000 	    _QBRAN pos_exp 
 143      38250000 
 144              	// negative exponent 
 145 2528 DD330000 	    _ADR ABSS 
 146 252c 51240000 	    _ADR mant_div 
 147 2530 872F0000 	    _BRAN 3f 
 147      3C250000 
 148              	pos_exp: // positive exponent 
ARM GAS  forth.s 			page 93


 149 2538 A5240000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 253c B9300000 	3:  _ADR SWAP 
 152 2540 99300000 	    _ADR DROP 
 153 2544 FB2C0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
 160 2548 504700BF 	    _NEST 
 161 254c 1F2F0000 	    _DOLIT 0 
 161      00000000 
 162 2554 A9300000 	    _ADR DUPP 
 163 2558 CD300000 	    _ADR DSWAP // 0 0 a cnt 
 164 255c B93F0000 	    _ADR TONBR // d a+ cnt- 
 165 2560 39300000 	    _ADR DTOR 
 166 2564 99300000 	    _ADR DROP // drop hi word 
 167 2568 F52F0000 	    _ADR DRFROM // i a+ cnt-  
 168 256c CD320000 	    _ADR ROT  // a+ cnt- i
 169 2570 39210000 	    _ADR STOF 
 170 2574 FB2C0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 2578 504700BF 	    _NEST 
 180 257c A9300000 	    _ADR DUPP 
 181 2580 25300000 	    _ADR TOR 
 182 2584 1F2F0000 	    _DOLIT 0
 182      00000000 
 183 258c A9300000 	    _ADR DUPP
 184 2590 CD300000 	    _ADR DSWAP 
 185 2594 B93F0000 	    _ADR TONBR // -- d a+ cnt-  
 186 2598 CD300000 	    _ADR DSWAP  // a+ cnt- d
 187 259c 99300000 	    _ADR DROP   // a+ cnt- i 
 188 25a0 39210000 	    _ADR STOF  // convert integer to float 
 189 25a4 E12F0000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 25a8 1F2F0000 	    _DOLIT 2 
 190      02000000 
 191 25b0 AD3B0000 	    _ADR  PICK  
 192 25b4 B9310000 	    _ADR SUBB 
 193 25b8 1F2F0000 	    _DOLIT 9 
 193      09000000 
 194 25c0 E1340000 	    _ADR MIN 
 195 25c4 E11F0000 	    _ADR PWR10
 196 25c8 B1210000 	    _ADR FSLH  // a+ cnt- fdec 
 197 25cc FB2C0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
ARM GAS  forth.s 			page 94


 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 25d0 504700BF 	    _NEST 
 206 25d4 4F400000 	    _ADR NEGQ 
 207 25d8 25300000 	    _ADR TOR 
 208 25dc 1F2F0000 	    _DOLIT 0 
 208      00000000 
 209 25e4 A9300000 	    _ADR DUPP 
 210 25e8 CD300000 	    _ADR DSWAP // 0 0 a cnt  
 211 25ec B93F0000 	    _ADR TONBR // d a cnt   
 212 25f0 CD300000 	    _ADR DSWAP
 213 25f4 99300000 	    _ADR DROP  // hi word 
 214 25f8 E12F0000 	    _ADR RFROM 
 215 25fc 5F2F0000 	    _QBRAN 1f 
 215      08260000 
 216 2604 CD330000 	    _ADR NEGAT 
 217              	1:  
 218 2608 FB2C0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 260c AC230000 	    _HEADER FLOATQ,6,"FLOAT?"
 226      06464C4F 
 226      41543F00 
 227 2618 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 261c 15360000 	    _ADR BASE 
 231 2620 B52F0000 	    _ADR AT 
 232 2624 25300000 	    _ADR TOR 
 233              	    // use decimal base  
 234 2628 2D3F0000 	    _ADR DECIM 
 235 262c 1F2F0000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 2634 E9300000 		_ADR	OVER   // a 0 a     R: base
 237 2638 49350000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 263c 4F400000 	    _ADR   NEGQ
 240 2640 25300000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 2644 A9300000 	    _ADR   DUPP 
 242 2648 25300000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 264c 49250000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 2650 E9300000 	    _ADR  OVER  
 245 2654 E12F0000 	    _ADR  RFROM  
 246 2658 35340000 	    _ADR  EQUAL
 247 265c B9300000 	    _ADR  SWAP
 248 2660 25300000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 2664 732F0000 	    _TBRAN expect_dot  
 249      9C260000 
 250              	// must be '.' or 'E'     
 251 266c 1F2F0000 	    _DOLIT '.' 
 251      2E000000 
ARM GAS  forth.s 			page 95


 252 2674 2D400000 	    _ADR CHARQ
 253 2678 732F0000 	    _TBRAN get_fraction  
 253      B0260000 
 254 2680 1F2F0000 	    _DOLIT 'E'
 254      45000000 
 255 2688 2D400000 	    _ADR  CHARQ 
 256 268c 732F0000 	    _TBRAN get_exponent 
 256      04270000 
 257 2694 872F0000 	    _BRAN error2
 257      58270000 
 258              	expect_dot:
 259 269c 1F2F0000 	    _DOLIT '.' 
 259      2E000000 
 260 26a4 2D400000 	    _ADR CHARQ 
 261 26a8 5F2F0000 	    _QBRAN error2
 261      58270000 
 262              	get_fraction:
 263 26b0 E9300000 	    _ADR OVER 
 264 26b4 D52F0000 	    _ADR CAT 
 265 26b8 1F2F0000 	    _DOLIT 10
 265      0A000000 
 266 26c0 513F0000 	    _ADR DIGTQ 
 267 26c4 B9300000 	    _ADR SWAP 
 268 26c8 99300000 	    _ADR DROP 
 269 26cc 5F2F0000 	    _QBRAN error2       
 269      58270000 
 270 26d4 79250000 	    _ADR decimals 
 271 26d8 25300000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 26dc 1F2F0000 	    _DOLIT 'E' 
 273      45000000 
 274 26e4 2D400000 	    _ADR CHARQ
 275 26e8 732F0000 	    _TBRAN get_exponent 
 275      04270000 
 276 26f0 1F2F0000 	    _DOLIT fzero 
 276      00000000 
 277 26f8 25300000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 26fc 872F0000 	    _BRAN build_float
 278      18270000 
 279              	get_exponent: 
 280 2704 D1250000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 2708 25300000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 270c A9300000 	    _ADR DUPP 
 283 2710 732F0000 	    _TBRAN error4   // count must be 0 
 283      78270000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 2718 F5320000 	    _ADR DDROP 
 286 271c F5320000 	    _ADR DDROP 
 287 2720 E12F0000 	    _ADR RFROM 
 288 2724 F52F0000 	    _ADR DRFROM 
 289 2728 51210000 	    _ADR FPLUS 
 290 272c F9240000 	    _ADR exp_adjust
 291 2730 E12F0000 	    _ADR RFROM 
 292 2734 5F2F0000 	    _QBRAN 1f 
 292      48270000 
 293 273c 1F2F0000 	    _DOLIT fminus1
 293      000080BF 
ARM GAS  forth.s 			page 96


 294 2744 91210000 	    _ADR FSTAR 
 295 2748 1F2F0000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 2750 872F0000 	    _BRAN restore_base  
 296      8C270000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 2758 F5320000 	    _ADR DDROP  
 299 275c 872F0000 	    _BRAN e4  
 299      84270000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 2764 F5320000 	    _ADR DDROP  // a 0 a R: base sign
 302 2768 E12F0000 	    _ADR RFROM 
 303 276c 99300000 	    _ADR DROP 
 304 2770 872F0000 	    _BRAN e4  
 304      84270000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 2778 F5320000 	    _ADR DDROP 
 307 277c F52F0000 	    _ADR DRFROM 
 308 2780 F5320000 	    _ADR DDROP 
 309 2784 F52F0000 	e4: _ADR DRFROM 
 310 2788 F5320000 	    _ADR DDROP 
 311              	restore_base: 
 312 278c E12F0000 	    _ADR RFROM 
 313 2790 15360000 	    _ADR BASE 
 314 2794 A12F0000 	    _ADR STORE 
 315 2798 FB2C0000 	    _UNNEST 
 316              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 279c 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 27a0 CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
ARM GAS  forth.s 			page 97


  31 27a4 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 27a8 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 27ac 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 27b0 ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 27b4 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 27b8 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 27bc 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 27c0 10260000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 27cc 504700BF 	    _NEST
  50 27d0 1F2F0000 	    _DOLIT 1  
  50      01000000 
  51 27d8 CD340000 	    _ADR MAX  
  52 27dc 1F2F0000 	    _DOLIT 8
  52      08000000 
  53 27e4 E1340000 	    _ADR MIN 
  54 27e8 1F2F0000 	    _DOLIT 2 
  54      02000000 
  55 27f0 99310000 	    _ADR LSHIFT 
  56 27f4 1F2F0000 	    _DOLIT rounding 
  56      9C270000 
  57 27fc A9310000 	    _ADR PLUS 
  58 2800 B52F0000 	    _ADR AT   
  59 2804 51210000 	    _ADR FPLUS 
  60 2808 FB2C0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 280c C4270000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 2814 57F8040B 	    ldr T0,[DSP],#4
  69 2818 3070     	    strb T0,[TOS]  
  70 281a 06F10106 	    add TOS,#1
  71 281e 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 2820 504700BF 	    _NEST 
ARM GAS  forth.s 			page 98


  81 2824 25300000 	    _ADR TOR  // >R ( i r: b )
  82 2828 21390000 	    _ADR STOD // ( dbl r: b )
  83 282c A9300000 	    _ADR DUPP // ( dbl i r: b )
  84 2830 25300000 	    _ADR TOR  // ( dbl r: b sign )
  85 2834 51330000 	    _ADR DABS 
  86 2838 CD3D0000 	    _ADR BDIGS 
  87 283c 393E0000 	    _ADR DIGS 
  88 2840 E12F0000 	    _ADR RFROM 
  89 2844 6D3E0000 	    _ADR SIGN 
  90 2848 953E0000 	    _ADR EDIGS // ( -- p u )
  91 284c A9300000 	    _ADR DUPP  
  92 2850 E1320000 	    _ADR NROT // -rot ( -- u p u )
  93 2854 11300000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2858 B9300000 	    _ADR SWAP // ( -- u p b u )
  95 285c 753C0000 	    _ADR CMOVE // ( -- u ) 
  96 2860 A9300000 	    _ADR DUPP  // ( -- u u )
  97 2864 E12F0000 	    _ADR RFROM // ( -- u u b )
  98 2868 A9310000 	    _ADR PLUS  // ( -- u b+ )
  99 286c B9300000 	    _ADR SWAP  // ( -- b+ u )
 100 2870 FB2C0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 2874 10280000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 2880 504700BF 	    _NEST 
 116 2884 E11F0000 	    _ADR PWR10 
 117 2888 25300000 	    _ADR TOR  // f2 r: f1 
 118 288c 1F2F0000 	    _DOLIT 0   // m 
 118      00000000 
 119 2894 B9300000 	    _ADR SWAP  // m f2 
 120 2898 A9300000 	1:  _ADR DUPP 
 121 289c 11300000 	    _ADR RAT 
 122 28a0 65220000 	    _ADR FLESS
 123 28a4 5F2F0000 	    _QBRAN 2f
 123      CC280000 
 124 28ac 1F2F0000 	    _DOLIT ten 
 124      00002041 
 125 28b4 91210000 	    _ADR FSTAR
 126              	    // decrement m   
 127 28b8 B9300000 	    _ADR SWAP
 128 28bc 15320000 	    _ADR ONEM 
 129 28c0 B9300000 	    _ADR SWAP 
 130 28c4 872F0000 	    _BRAN 1b
 130      98280000 
 131 28cc E12F0000 	2:  _ADR RFROM 
ARM GAS  forth.s 			page 99


 132 28d0 99300000 	    _ADR DROP 
 133 28d4 B9300000 	    _ADR SWAP 
 134 28d8 FB2C0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 28dc 78280000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 28ec 504700BF 	    _NEST 
 150 28f0 E11F0000 	    _ADR PWR10
 151 28f4 25300000 	    _ADR TOR
 152 28f8 1F2F0000 	    _DOLIT 0 
 152      00000000 
 153 2900 B9300000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 2904 11300000 	1:  _ADR RAT   
 155 2908 E9300000 	    _ADR OVER 
 156 290c 49220000 	    _ADR FGREAT 
 157 2910 732F0000 	    _TBRAN 2f 
 157      38290000 
 158 2918 1F2F0000 	    _DOLIT ten 
 158      00002041 
 159 2920 B1210000 	    _ADR FSLH 
 160              	    // increment m 
 161 2924 B9300000 	    _ADR SWAP 
 162 2928 05320000 	    _ADR ONEP 
 163 292c B9300000 	    _ADR SWAP 
 164 2930 872F0000 	    _BRAN 1b   
 164      04290000 
 165 2938 E12F0000 	2:  _ADR RFROM 
 166 293c 99300000 	    _ADR DROP
 167 2940 B9300000 	    _ADR SWAP 
 168 2944 FB2C0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
ARM GAS  forth.s 			page 100


 182 2948 504700BF 	    _NEST
 183 294c B9300000 	    _ADR SWAP
 184 2950 B9320000 	    _ADR QDUP    
 185 2954 5F2F0000 	    _QBRAN 2f 
 185      78290000 
 186 295c B9300000 	    _ADR SWAP 
 187 2960 1F2F0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 2968 B9300000 	    _ADR SWAP  
 189 296c 15280000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 2970 21280000 	    _ADR ITOA // ( i b -- b u )
 191 2974 99300000 	    _ADR DROP // ( -- b+ )     
 192 2978 FB2C0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
 207 297c 504700BF 	    _NEST
 208 2980 1F2F0000 	    _DOLIT 2 
 208      02000000 
 209 2988 AD3B0000 	    _ADR PICK 
 210 298c 19310000 	    _ADR ZLESS 
 211 2990 5F2F0000 	    _QBRAN 1f 
 211      A8290000 
 212 2998 25300000 	    _ADR TOR 
 213 299c 99300000 	    _ADR DROP 
 214 29a0 872F0000 	    _BRAN 2f 
 214      142A0000 
 215 29a8 1F2F0000 	1:   _DOLIT '.' 
 215      2E000000 
 216 29b0 B9300000 	    _ADR SWAP 
 217 29b4 15280000 	    _ADR CSTOP 
 218 29b8 25300000 	    _ADR TOR // >r ( d f r: b ) 
 219 29bc B9300000 	1:  _ADR SWAP  
 220 29c0 B9320000 	    _ADR QDUP 
 221 29c4 5F2F0000 	    _QBRAN 2f
 221      142A0000 
 222 29cc 15320000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 29d0 B9300000 	    _ADR SWAP // swap ( -- d f r: b )
 224 29d4 1F2F0000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 29dc 91210000 	    _ADR FSTAR // f*
 226 29e0 A9300000 	    _ADR DUPP  
 227 29e4 21210000 	    _ADR TRUNC // d f i
 228 29e8 A9300000 	    _ADR DUPP  // d f i i  
 229 29ec 1F2F0000 	    _DOLIT '0' 
 229      30000000 
ARM GAS  forth.s 			page 101


 230 29f4 A9310000 	    _ADR PLUS 
 231 29f8 E12F0000 	    _ADR RFROM // R> ( d f c b )
 232 29fc 15280000 	    _ADR CSTOP // ( d f i b+ )
 233 2a00 25300000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 2a04 39210000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 2a08 71210000 	    _ADR FSUBB 
 236 2a0c 872F0000 	    _BRAN 1b 
 236      BC290000 
 237 2a14 99300000 	2:  _ADR DROP 
 238 2a18 E12F0000 	    _ADR RFROM 
 239 2a1c FB2C0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
 256 2a20 504700BF 	    _NEST 
 257 2a24 25300000 	    _ADR TOR // ( -- d f r: b )
 258 2a28 A9300000 	    _ADR DUPP 
 259 2a2c 1F2F0000 	    _DOLIT fone 
 259      0000803F 
 260 2a34 65220000 	    _ADR FLESS 
 261 2a38 5F2F0000 	    _QBRAN 1f
 261      982A0000 
 262 2a40 1F2F0000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 2a48 81280000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 2a4c E1320000 	    _ADR NROT
 265 2a50 E9300000 	    _ADR OVER 
 266 2a54 CD270000 	    _ADR ROUND
 267 2a58 A9300000 	    _ADR DUPP 
 268 2a5c 1F2F0000 	    _DOLIT fone 
 268      0000803F 
 269 2a64 65220000 	    _ADR FLESS 
 270 2a68 5F2F0000 	    _QBRAN 2f 
 270      A42A0000 
 271              	    // first digit '0' 
 272 2a70 1F2F0000 	    _DOLIT '0' 
 272      30000000 
 273 2a78 E12F0000 	    _ADR RFROM 
 274 2a7c 15280000 	    _ADR CSTOP 
 275 2a80 25300000 	    _ADR TOR 
 276              	    // decrement d 
 277 2a84 B9300000 	    _ADR SWAP 
 278 2a88 15320000 	    _ADR ONEM 
 279 2a8c B9300000 	    _ADR SWAP 
ARM GAS  forth.s 			page 102


 280 2a90 E12F0000 	    _ADR RFROM // r> ( -- m d f b )  
 281 2a94 FB2C0000 	    _UNNEST 
 282 2a98 E9300000 	1:  _ADR OVER 
 283 2a9c ED280000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 2aa0 E1320000 	    _ADR NROT   // m d f r: b 
 285 2aa4 A9300000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 2aa8 21210000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 2aac A9300000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 2ab0 25300000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 2ab4 39210000 	    _ADR STOF  // ( -- m d f f )
 290 2ab8 71210000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 2abc E12F0000 	    _ADR RFROM // ( -- m d f i r: b )
 292 2ac0 E12F0000 	    _ADR RFROM  // ( -- m d f i b )  
 293 2ac4 21280000 	    _ADR ITOA // -- m d f b u )
 294 2ac8 25300000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 2acc CD320000 	    _ADR ROT
 296 2ad0 E12F0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 2ad4 B9310000 	    _ADR SUBB // ( -- m f b d- )
 298 2ad8 E1320000 	    _ADR NROT // ( -- m d f b )
 299 2adc FB2C0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 2ae0 E0280000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 2ae8 504700BF 	    _NEST 
 315 2aec E9300000 	    _ADR OVER  
 316 2af0 01230000 	    _ADR FEXP 
 317 2af4 1F2F0000 	    _DOLIT 128 
 317      80000000 
 318 2afc 35340000 	    _ADR EQUAL 
 319 2b00 5F2F0000 	    _QBRAN 1f
 319      102B0000 
 320 2b08 872F0000 	    _BRAN nan 
 320      CC2B0000 
 321 2b10 A9300000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 2b14 25300000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 2b18 65320000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 2b1c B9300000 	    _ADR SWAP 
 326 2b20 15280000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 2b24 E9300000 	    _ADR OVER 
 328 2b28 5F2F0000 	    _QBRAN zdz // 0.0 
 328      7C2B0000 
 329              	    // check float sign 
 330 2b30 E9300000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 2b34 E1220000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
ARM GAS  forth.s 			page 103


 332 2b38 5F2F0000 	    _QBRAN 1f  // 0branch 1f 
 332      5C2B0000 
 333              	    // negative number add '-' to buffer 
 334 2b40 B9300000 	    _ADR SWAP 
 335 2b44 F1210000 	    _ADR FABS 
 336 2b48 B9300000 	    _ADR SWAP 
 337 2b4c 1F2F0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 2b54 B9300000 	    _ADR SWAP 
 339 2b58 15280000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 2b5c 212A0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 2b60 7D290000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 2b64 49290000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 2b68 11300000 	    _ADR RAT 
 344 2b6c B9310000 	    _ADR SUBB 
 345 2b70 E12F0000 	    _ADR RFROM 
 346 2b74 B9300000 	    _ADR SWAP 
 347 2b78 FB2C0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 2b7c 25300000 	     _ADR TOR 
 350 2b80 F5320000 	     _ADR DDROP
 351 2b84 E12F0000 	     _ADR RFROM
 352 2b88 1F2F0000 	     _DOLIT '0'
 352      30000000 
 353 2b90 B9300000 	     _ADR SWAP 
 354 2b94 15280000 	     _ADR CSTOP 
 355 2b98 1F2F0000 	     _DOLIT '.'
 355      2E000000 
 356 2ba0 B9300000 	     _ADR SWAP 
 357 2ba4 15280000 	     _ADR CSTOP 
 358 2ba8 1F2F0000 	     _DOLIT '0'
 358      30000000 
 359 2bb0 B9300000 	     _ADR SWAP 
 360 2bb4 15280000 	     _ADR CSTOP 
 361 2bb8 99300000 	     _ADR DROP  
 362 2bbc E12F0000 	     _ADR RFROM 
 363 2bc0 1F2F0000 	     _DOLIT 4 
 363      04000000 
 364 2bc8 FB2C0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 2bcc 25300000 	    _ADR TOR   // ( d f r: b )
 367 2bd0 B9300000 	    _ADR SWAP  // f d  
 368 2bd4 99300000 	    _ADR DROP  // f 
 369 2bd8 65320000 	    _ADR BLANK  // f c 
 370 2bdc 11300000 	    _ADR RAT    // f c b 
 371 2be0 15280000 	    _ADR CSTOP  // f b+ 
 372 2be4 B9300000 	    _ADR SWAP   // b+ f 
 373 2be8 25230000 	    _ADR FMANT  // b+ mant
 374 2bec 1F2F0000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 2bf4 29310000 	    _ADR ANDD   
 376 2bf8 5F2F0000 	    _QBRAN infinity 
 376      382C0000 
 377 2c00 1F2F0000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 2c08 B9300000 	    _ADR SWAP   // c b+
 379 2c0c 15280000 	    _ADR CSTOP  // b+
ARM GAS  forth.s 			page 104


 380 2c10 1F2F0000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 2c18 B9300000 	    _ADR SWAP   // c b+ 
 382 2c1c 15280000 	    _ADR CSTOP  // b+
 383 2c20 1F2F0000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 2c28 B9300000 	    _ADR SWAP   // c b+ 
 385 2c2c 15280000 	    _ADR CSTOP  // b+
 386 2c30 872F0000 	    _BRAN 1f 
 386      682C0000 
 387              	infinity:
 388 2c38 1F2F0000 	    _DOLIT 'I'
 388      49000000 
 389 2c40 B9300000 	    _ADR SWAP 
 390 2c44 15280000 	    _ADR CSTOP 
 391 2c48 1F2F0000 	    _DOLIT 'N'
 391      4E000000 
 392 2c50 B9300000 	    _ADR SWAP 
 393 2c54 15280000 	    _ADR CSTOP 
 394 2c58 1F2F0000 	    _DOLIT 'F'
 394      46000000 
 395 2c60 B9300000 	    _ADR SWAP 
 396 2c64 15280000 	    _ADR CSTOP 
 397              	1:
 398 2c68 99300000 	    _ADR DROP 
 399 2c6c E12F0000 	    _ADR RFROM 
 400 2c70 1F2F0000 	    _DOLIT 4 
 400      04000000 
 401 2c78 FB2C0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 2c7c E42A0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 2c84 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 2c88 1F2F0000 	    _DOLIT 1 
 415      01000000 
 416 2c90 CD340000 	    _ADR MAX 
 417 2c94 1F2F0000 	    _DOLIT 7 
 417      07000000 
 418 2c9c E1340000 	    _ADR MIN
 419 2ca0 B9300000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 2ca4 E13B0000 	    _ADR HERE
 422 2ca8 25300000 	    _ADR TOR  
 423 2cac 1F2F0000 	    _DOLIT 16 
 423      10000000 
 424 2cb4 FD4D0000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
ARM GAS  forth.s 			page 105


 426 2cb8 11300000 	    _ADR RAT 
 427 2cbc 1F2F0000 	    _DOLIT 16 
 427      10000000 
 428 2cc4 1F2F0000 	    _DOLIT 0 
 428      00000000 
 429 2ccc ED3C0000 	    _ADR FILL 
 430 2cd0 E12F0000 	    _ADR RFROM // ( d f b )
 431 2cd4 E92A0000 	    _ADR FTOA 
 432 2cd8 D9410000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 2cdc 1F2F0000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 2ce4 FD4D0000 	    _ADR ALLOT
 436 2ce8 FB2C0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
ARM GAS  forth.s 			page 106


  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2cec 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 2cf0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2cf4 5CF8045B 		LDR WP,[IP],#4 
  89 2cf8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2cfa 58F804CB 		LDMFD RSP!,{IP}
  92 2cfe 5CF8045B 		LDR WP,[IP],#4 
  93 2d02 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
ARM GAS  forth.s 			page 107


  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 2d04 04F14801 		add T1,UP,#USER_CTOP // pointer HERE 
 106 2d08 0968     		ldr T1,[T1]     // address in here   
 107 2d0a 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 2d0e 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 2d12 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 2d16 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 2d1a 04F14802 		add T2,UP,#USER_CTOP 
 112 2d1e 1160     		str T1,[T2]  // save update HERE value 
 113 2d20 E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 2d22 47F8046D 		_PUSH 
 119 2d26 04F11406 		ADD TOS,UP,#STDIN 
 120 2d2a E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
 124              	TSTDOUT:
 125 2d2c 47F8046D 		_PUSH 
 126 2d30 04F11806 		ADD TOS,UP,#STDOUT
 127 2d34 DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 2d36 802C0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 2d40 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 2d48 47F8046D 	    _PUSH 
 136 2d4c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 2d4e 81EA0101 	    eor T1,T1 
 138 2d52 8162     	    str T1,[T0,#SCB_CFSR]
 139 2d54 CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 2d56 3A2D0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 2d60 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 2d68 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 108


 148 2d6c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 2d6e 81EA0101 	    eor T1,T1 
 150 2d72 8163     	    str T1,[T0,#SCB_BFAR]
 151 2d74 BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 2d76 5A2D0000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 2d80 504700BF 		_NEST 
 159 2d84 232D0000 		_ADR TSTDIN // ' STDIN 
 160 2d88 553C0000 		_ADR ATEXE
 161 2d8c FB2C0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 2d90 7A2D0000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 2d98 504700BF 		_NEST
 169              	KEY1:
 170 2d9c 051B0000 		_ADR CAPS_LED 
 171 2da0 812D0000 		_ADR	QKEY 
 172 2da4 5F2F0000 		_QBRAN	KEY1
 172      9C2D0000 
 173 2dac FB2C0000 		_UNNEST
 174              	
 175              	/**********************************************
 176              		EMIT ( c -- )
 177              		transmit a character to console 
 178              	**********************************************/
 179 2db0 942D0000 		_HEADER EMIT,4,"EMIT"
 179      04454D49 
 179      540000BF 
 180 2dbc 504700BF 		_NEST 
 181 2dc0 2D2D0000 		_ADR TSTDOUT 
 182 2dc4 553C0000 		_ADR ATEXE 
 183 2dc8 FB2C0000 		_UNNEST 
 184              	
 185              	
 186              	/************************************************
 187              	 GET-IP ( n - c )
 188              	 return interrupt priority of IRQn 
 189              	************************************************/
 190              	/*
 191              		_HEADER GETIP,6,"GET-IP" 
 192              		_NEST 
 193              		_ADR DUPP 
 194              		_ADR ZLESS
 195              		_QBRAN 1f 
 196              		_DOLIT 15
 197              		_ADR ANDD
 198              		_DOLIT 4
ARM GAS  forth.s 			page 109


 199              		_ADR SUBB  
 200              		_DOLIT 0xE000ED18 
 201              		_BRAN 2f 
 202              	1:	_DOLIT 0xE000E400 
 203              	2:	_ADR PLUS 
 204              		_ADR CAT
 205              		_DOLIT 4 
 206              		_ADR RSHIFT 
 207              		_UNNEST 
 208              	*/
 209              	
 210              	/***********************************************
 211              	 RANDOM ( n+ -- {0..n+ - 1} )
 212              	 return pseudo random number 
 213              	 REF: https://en.wikipedia.org/wiki/Xorshift
 214              	************************************************/
 215 2dcc B42D0000 		_HEADER RAND,6,"RANDOM"
 215      0652414E 
 215      444F4D00 
 216 2dd8 504700BF 		_NEST
 217 2ddc DD330000 		_ADR ABSS   
 218 2de0 B5350000 		_ADR SEED 
 219 2de4 B52F0000 		_ADR AT 
 220 2de8 A9300000 		_ADR DUPP 
 221 2dec 1F2F0000 		_DOLIT 13
 221      0D000000 
 222 2df4 99310000 		_ADR LSHIFT 
 223 2df8 51310000 		_ADR XORR  
 224 2dfc A9300000 		_ADR DUPP 
 225 2e00 1F2F0000 		_DOLIT 17 
 225      11000000 
 226 2e08 81310000 		_ADR RSHIFT 
 227 2e0c 51310000 		_ADR XORR 
 228 2e10 A9300000 		_ADR DUPP
 229 2e14 1F2F0000 		_DOLIT 5 
 229      05000000 
 230 2e1c 99310000 		_ADR LSHIFT 
 231 2e20 51310000 		_ADR XORR  
 232 2e24 A9300000 		_ADR DUPP 
 233 2e28 B5350000 		_ADR SEED 
 234 2e2c A12F0000 		_ADR STORE 
 235 2e30 1F2F0000 		_DOLIT 0x7FFFFFFF
 235      FFFFFF7F 
 236 2e38 29310000 		_ADR ANDD 
 237 2e3c B9300000 		_ADR SWAP 
 238 2e40 693A0000 		_ADR MODD 
 239 2e44 FB2C0000 		_UNNEST 
 240              	
 241              	
 242              	/****************************************
 243              	 PAUSE ( u -- ) 
 244              	 suspend execution for u milliseconds
 245              	****************************************/
 246 2e48 D02D0000 		_HEADER PAUSE,5,"PAUSE"
 246      05504155 
 246      534500BF 
 247 2e54 504700BF 		_NEST 
ARM GAS  forth.s 			page 110


 248 2e58 E5350000 		_ADR TIMER 
 249 2e5c A12F0000 		_ADR STORE 
 250              	PAUSE_LOOP:
 251 2e60 E5350000 		_ADR TIMER 
 252 2e64 B52F0000 		_ADR AT 
 253 2e68 5F2F0000 		_QBRAN PAUSE_EXIT 
 253      782E0000 
 254 2e70 872F0000 		_BRAN PAUSE_LOOP 
 254      602E0000 
 255              	PAUSE_EXIT: 		
 256 2e78 FB2C0000 		_UNNEST 
 257              	
 258              	/******************************************
 259              	  ULED ( T|F -- )
 260              	  control user LED, -1 ON, 0 OFF 
 261              	*******************************************/
 262 2e7c 4C2E0000 		_HEADER ULED,4,"ULED"
 262      04554C45 
 262      440000BF 
 263 2e88 4FF40050 		mov T0,#(1<<LED_PIN)
 264 2e8c 4FF40061 		_MOV32 T1,LED_GPIO 
 264      C4F20201 
 265 2e94 3600     		movs TOS,TOS 
 266 2e96 57F8046B 		_POP
 267 2e9a 03D0     		beq ULED_OFF
 268 2e9c 4FEA0040 		lsl T0,#16 
 269 2ea0 8861     		str T0,[T1,#GPIO_BSRR]
 270 2ea2 27E7     		_NEXT 
 271              	ULED_OFF:
 272 2ea4 8861     		str T0,[T1,#GPIO_BSRR]
 273 2ea6 25E7     		_NEXT    
 274              	
 275              	/**************************
 276              	   JOYSTK  ( -- u )
 277              	   read joystick port 
 278              	**************************/
 279 2ea8 802E0000 		_HEADER JOYSTK,6,"JOYSTK"
 279      064A4F59 
 279      53544B00 
 280 2eb4 504700BF 		_NEST 
 281 2eb8 1F2F0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 281      10000240 
 282 2ec0 B52F0000 		_ADR AT 
 283 2ec4 1F2F0000 		_DOLIT 0x100f 
 283      0F100000 
 284 2ecc 29310000 		_ADR ANDD 
 285 2ed0 FB2C0000 		_UNNEST 
 286              	
 287              	/****************************
 288              		BEEP ( msec freq -- )
 289              	input:
 290              		freq  frequence hertz 
 291              		msec  durration in msec 
 292              	*****************************/
 293 2ed4 AC2E0000 		_HEADER BEEP,4,"BEEP"
 293      04424545 
 293      500000BF 
ARM GAS  forth.s 			page 111


 294 2ee0 48F68050 		_MOV32 r0,6000000 // Fclk 
 294      C0F25B00 
 295 2ee8 B0FBF6F0 		udiv r0,r0,TOS
 296 2eec 57F8046B 		_POP  
 297 2ef0 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 297      C4F20001 
 298 2ef8 C862     		str r0,[r1,#TIM_ARR]
 299 2efa 4FEA5000 		lsr r0,#1
 300 2efe 4863     		str r0,[r1,#TIM_CCR1]
 301 2f00 4FF00100 		mov r0,#1 
 302 2f04 0862     		str r0,[r1,#TIM_CCER]
 303 2f06 0860     		str r0,[r1,#TIM_CR1]
 304 2f08 C868     		ldr r0,[r1,#TIM_DIER]
 305 2f0a C4F8AC60 		str TOS,[UP,#BEEP_DTMR]
 306 2f0e 57F8046B 		_POP
 307 2f12 EFE6     		_NEXT 
 308              	
 309              	
 310              	/***************
 311              	//  The kernel
 312              	***************/
 313              	
 314              	/********************
 315              	    NOP	( -- )
 316              	 	do nothing.
 317              	*********************/
 318 2f14 D82E0000 		_HEADER NOP,3,"NOP"
 318      034E4F50 
 319 2f1c EAE6     		_NEXT 
 320              	 
 321              	/********************
 322              	    doLIT	( -- w )
 323              	 	Push an inline literal.
 324              	hidden word used by compiler 
 325              	*********************/
 326              	DOLIT:
 327 2f1e 47F8046D 		_PUSH				//  store TOS on data stack
 328 2f22 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 329 2f26 E5E6     		_NEXT 
 330              	
 331              	/*******************************
 332              	    EXECUTE	( ca -- )
 333              	 	Execute the word at ca.
 334              	*******************************/
 335 2f28 182F0000 		_HEADER EXECU,7,"EXECUTE"
 335      07455845 
 335      43555445 
 336 2f34 46F00105 		ORR	WP,TOS,#1 
 337 2f38 57F8046B 		_POP
 338 2f3c 2847     		BX WP 
 339 2f3e D9E6     		_NEXT 
 340              	
 341              	/**********************************************************
 342              	    donext	( -- ) counter on R:
 343              	 	Run time code for the single index loop.
 344              	 	: next ( -- ) \ hilevel model
 345              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
ARM GAS  forth.s 			page 112


 346              	hidden word used by compiler 	  
 347              	*********************************************************/
 348              	DONXT:
 349 2f40 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 350 2f44 22B9     		CBNZ T2,NEXT1 
 351              		/* loop done */
 352 2f46 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 353 2f4a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 354 2f4e D1E6     		_NEXT
 355              	NEXT1:
 356              		/* decrement loop counter */
 357 2f50 A2F10102 		SUB	T2,T2,#1
 358 2f54 C8F80020 		STR	T2,[RSP]
 359 2f58 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 360 2f5c CAE6     		_NEXT 
 361              	
 362              	/**************************************
 363              	    ?branch	( f -- )
 364              	 	Branch if flag is zero.
 365              	hiddend word used by compiler
 366              	**************************************/
 367              	QBRAN:
 368 2f5e 3600     		MOVS	TOS,TOS
 369 2f60 57F8046B 		_POP
 370 2f64 02D1     		BNE	QBRAN1
 371 2f66 DCF800C0 		LDR	IP,[IP]
 372 2f6a C3E6     		_NEXT
 373              	QBRAN1:
 374 2f6c 0CF1040C 	 	ADD	IP,IP,#4
 375 2f70 C0E6     		_NEXT
 376              	
 377              	/***********************************
 378              		tbranch ( f -- )
 379              	    branch if flag is true 
 380              	***********************************/
 381              	TBRAN:
 382 2f72 3600     		MOVS TOS,TOS 
 383 2f74 57F8046B 		_POP 
 384 2f78 02D0     		BEQ 1f 
 385 2f7a DCF800C0 		LDR IP,[IP]
 386 2f7e B9E6     		_NEXT 
 387 2f80 0CF1040C 	1:  ADD IP,IP,#4
 388 2f84 B6E6     		_NEXT 
 389              	
 390              	
 391              	/***********************************
 392              	    branch	( -- )
 393              	 	Branch to an inline address.
 394              	hidden word used by compiler 
 395              	***********************************/
 396              	BRAN:
 397 2f86 DCF800C0 		LDR	IP,[IP]
 398 2f8a B3E6     		_NEXT
 399              	
 400              	/******************************************
 401              	    EXIT	(  -- )
 402              	 	Exit the currently executing command.
ARM GAS  forth.s 			page 113


 403              	******************************************/
 404 2f8c 2C2F0000 		_HEADER EXIT,4,"EXIT"
 404      04455849 
 404      540000BF 
 405 2f98 AFE6     		b UNNEST 
 406              	
 407              	
 408              	/***********************************
 409              	    !	   ( w a -- )
 410              	 	Pop the data stack to memory.
 411              	************************************/
 412 2f9a 902F0000 		_HEADER STORE,1,"!"
 412      0121
 413 2fa0 57F8045B 		LDR	WP,[DSP],#4
 414 2fa4 3560     		STR	WP,[TOS]
 415 2fa6 57F8046B 		_POP
 416 2faa A3E6     		_NEXT 
 417              	
 418              	/********************************************
 419              	    @	   ( a -- w )
 420              	 	Push memory location to the data stack.
 421              	*********************************************/
 422 2fac 9E2F0000 		_HEADER AT,1,"@"
 422      014000BF 
 423 2fb4 3668     		LDR	TOS,[TOS]
 424 2fb6 9DE6     		_NEXT 
 425              	
 426              	/*******************************************
 427              	    C!	  ( c b -- )
 428              	 	Pop the data stack to byte memory.
 429              	*******************************************/
 430 2fb8 B02F0000 		_HEADER CSTOR,2,"C!"
 430      02432100 
 431 2fc0 57F8045B 		LDR	WP,[DSP],#4
 432 2fc4 3570     		STRB WP,[TOS]
 433 2fc6 57F8046B 		_POP
 434 2fca 93E6     		_NEXT
 435              	
 436              	/*********************************************
 437              	    C@	  ( b -- c )
 438              	 	Push byte memory location to the data stack.
 439              	**********************************************/
 440 2fcc BC2F0000 		_HEADER CAT,2,"C@"
 440      02434000 
 441 2fd4 3678     		LDRB	TOS,[TOS]
 442 2fd6 8DE6     		_NEXT 
 443              	
 444              	
 445              	/*********************************************
 446              	    R>	  ( -- w  R: w -- ) 
 447              	 	push from rstack.
 448              	**********************************************/
 449 2fd8 D02F0000 		_HEADER RFROM,2,"R>"
 449      02523E00 
 450 2fe0 47F8046D 		_PUSH
 451 2fe4 58F8046B 		LDR	TOS,[RSP],#4
 452 2fe8 84E6     		_NEXT 
ARM GAS  forth.s 			page 114


 453              	
 454              	/***********************************************
 455              		2R> (  -- D ) R: D --  
 456              	    push a double from rstack 
 457              	***********************************************/
 458 2fea DC2F0000 		_HEADER DRFROM,3,"2R>"
 458      0332523E 
 458      00BF
 459 2ff4 47F8046D 		_PUSH 
 460 2ff8 58F8046B 		LDR TOS,[RSP],#4 
 461 2ffc 47F8046D 		_PUSH 
 462 3000 58F8046B 		LDR TOS,[RSP],#4
 463 3004 76E6     		_NEXT 
 464              	
 465              	/************************************************
 466              	    R@	  ( -- w )
 467              	 	Copy top of return stack to the data stack.
 468              	************************************************/
 469 3006 EE2F0000 		_HEADER RAT,2,"R@"
 469      02524000 
 469      00BF
 470 3010 47F8046D 		_PUSH
 471 3014 D8F80060 		LDR	TOS,[RSP]
 472 3018 6CE6     		_NEXT 
 473              	
 474              	/***********************************************
 475              	    >R	  ( w -- ) R: -- w 
 476              	 	pop to rstack.
 477              	************************************************/
 478 301a 0A300000 		_HEADER TOR,2,">R"
 478      023E5200 
 478      00BF
 479 3024 48F8046D 		STR	TOS,[RSP,#-4]!
 480 3028 57F8046B 		_POP
 481 302c 62E6     		_NEXT
 482              	
 483              	/*********************************************
 484              		2>R ( d -- ) R: -- d 
 485              		pop a double to rstack 
 486              	*********************************************/
 487 302e 1E300000 		_HEADER DTOR,3,"2>R"
 487      03323E52 
 487      00BF
 488 3038 48F8046D 		STR TOS,[RSP,#-4]!
 489 303c 57F8046B 	    _POP 
 490 3040 48F8046D 		STR TOS,[RSP,#-4]!
 491 3044 57F8046B 		_POP  
 492 3048 54E6     		_NEXT 	
 493              	
 494              	
 495              	/*******************************
 496              	//	RP! ( u -- )
 497              	// initialize RPP with u 
 498              	*******************************/
 499 304a 32300000 		_HEADER RPSTOR,3,"RP!"
 499      03525021 
 499      00BF
ARM GAS  forth.s 			page 115


 500 3054 B046     		MOV RSP,TOS 
 501 3056 57F8046B 		_POP  
 502 305a 4BE6     		_NEXT 
 503              	
 504              	/********************************
 505              		SP! ( u -- )
 506              	 initialize SPP with u 
 507              	********************************/
 508 305c 4E300000 		_HEADER SPSTOR,3,"SP!"
 508      03535021 
 509 3064 3746     		MOV DSP,TOS 
 510 3066 86EA0606 		EOR TOS,TOS,TOS 
 511 306a 43E6     		_NEXT 
 512              	
 513              	/**************************************
 514              	    SP@	 ( -- a )
 515              	 	Push the current data stack pointer.
 516              	***************************************/
 517 306c 60300000 		_HEADER SPAT,3,"SP@"
 517      03535040 
 518 3074 47F8046D 		_PUSH
 519 3078 3E46     		MOV	TOS,DSP
 520 307a 3BE6     		_NEXT
 521              	
 522              	/**************************************
 523              	   RP@ ( -- a )
 524              	   push current rstack pointer 
 525              	**************************************/
 526 307c 70300000 		_HEADER RPAT,3,"RP@"
 526      03525040 
 527 3084 47F8046D 		_PUSH 
 528 3088 4646     		MOV TOS,RSP 
 529 308a 33E6     		_NEXT 
 530              	
 531              	/********************************
 532              	    DROP	( w -- )
 533              	 	Discard top stack item.
 534              	********************************/
 535 308c 80300000 		_HEADER DROP,4,"DROP"
 535      0444524F 
 535      500000BF 
 536 3098 57F8046B 		_POP
 537 309c 2AE6     		_NEXT 
 538              	
 539              	/*********************************
 540              	    DUP	 ( w -- w w )
 541              	 	Duplicate the top stack item.
 542              	*********************************/
 543 309e 90300000 		_HEADER DUPP,3,"DUP"
 543      03445550 
 543      00BF
 544 30a8 47F8046D 		_PUSH
 545 30ac 22E6     		_NEXT 
 546              	
 547              	/**********************************
 548              	    SWAP	( w1 w2 -- w2 w1 )
 549              	 	Exchange top two stack items.
ARM GAS  forth.s 			page 116


 550              	**********************************/
 551 30ae A2300000 		_HEADER SWAP,4,"SWAP"
 551      04535741 
 551      5000
 552 30b8 3D68     		LDR	WP,[DSP]
 553 30ba 3E60     		STR	TOS,[DSP]
 554 30bc 2E46     		MOV	TOS,WP
 555 30be 19E6     		_NEXT 
 556              	
 557              	/***********************************
 558              		2SWAP ( d2 d1 -- d1 d2 )
 559              		swap double integer 
 560              	***************************************/
 561 30c0 B2300000 		_HEADER DSWAP,5,"2SWAP"
 561      05325357 
 561      415000BF 
 562 30cc 3046     		mov T0,TOS 
 563 30ce 3968     		ldr T1,[DSP]
 564 30d0 7E68     		ldr TOS,[DSP,#4]
 565 30d2 BD68     		ldr WP,[DSP,#8]
 566 30d4 3D60     		str WP,[DSP]
 567 30d6 7860     		str T0,[DSP,#4]
 568 30d8 B960     		str T1,[DSP,#8]
 569 30da 0BE6     		_NEXT 
 570              	
 571              	
 572              	/***********************************
 573              	    OVER	( w1 w2 -- w1 w2 w1 )
 574              	 	Copy second stack item to top.
 575              	***********************************/
 576 30dc C4300000 		_HEADER OVER,4,"OVER"
 576      044F5645 
 576      520000BF 
 577 30e8 47F8046D 		_PUSH
 578 30ec 7E68     		LDR	TOS,[DSP,#4]
 579 30ee 01E6     		_NEXT 
 580              	
 581              	/***********************************
 582              		2OVER ( d2 d1 -- d2 d1 d2 )
 583              		copy a double integer to TOS 
 584              	**********************************************/
 585 30f0 E0300000 		_HEADER DOVER,5,"2OVER"
 585      05324F56 
 585      455200BF 
 586 30fc 7868     		ldr T0,[DSP,#4]
 587 30fe BD68     		ldr WP,[DSP,#8]
 588 3100 47F8046D 		_PUSH 
 589 3104 2E46     		mov TOS,WP 
 590 3106 47F8046D 		_PUSH
 591 310a 0646     		mov TOS,T0 
 592 310c F2E5     		_NEXT 
 593              	
 594              	
 595              	/***********************************
 596              	    0<	  ( n -- t )
 597              	 	Return true if n is negative.
 598              	***********************************/
ARM GAS  forth.s 			page 117


 599 310e F4300000 		_HEADER ZLESS,2,"0<"
 599      02303C00 
 599      00BF
 600 3118 4FEAE676 		ASR TOS,#31
 601 311c EAE5     		_NEXT 
 602              	
 603              	/********************************
 604              	    AND	 ( w w -- w )
 605              	 	Bitwise AND.
 606              	********************************/
 607 311e 12310000 		_HEADER ANDD,3,"AND"
 607      03414E44 
 607      00BF
 608 3128 57F8045B 		LDR	WP,[DSP],#4
 609 312c 06EA0506 		AND	TOS,TOS,WP
 610 3130 E0E5     		_NEXT 
 611              	
 612              	/******************************
 613              	    OR	  ( w w -- w )
 614              	 	Bitwise inclusive OR.
 615              	******************************/
 616 3132 22310000 		_HEADER ORR,2,"OR"
 616      024F5200 
 616      00BF
 617 313c 57F8045B 		LDR	WP,[DSP],#4
 618 3140 46EA0506 		ORR	TOS,TOS,WP
 619 3144 D6E5     		_NEXT 
 620              	
 621              	/*****************************
 622              	    XOR	 ( w w -- w )
 623              	 	Bitwise exclusive OR.
 624              	*****************************/
 625 3146 36310000 		_HEADER XORR,3,"XOR"
 625      03584F52 
 625      00BF
 626 3150 57F8045B 		LDR	WP,[DSP],#4
 627 3154 86EA0506 		EOR	TOS,TOS,WP
 628 3158 CCE5     		_NEXT 
 629              	
 630              	/**************************************************
 631              	    UM+	 ( w w -- w cy )
 632              	 	Add two numbers, return the sum and carry flag.
 633              	***************************************************/
 634 315a 4A310000 		_HEADER UPLUS,3,"UM+"
 634      03554D2B 
 634      00BF
 635 3164 3D68     		LDR	WP,[DSP]
 636 3166 AD19     		ADDS	WP,WP,TOS
 637 3168 4FF00006 		MOV	TOS,#0
 638 316c 46F10006 		ADC	TOS,TOS,#0
 639 3170 3D60     		STR	WP,[DSP]
 640 3172 BFE5     		_NEXT 
 641              	
 642              	/*********************************
 643              	    RSHIFT	 ( w # -- w )
 644              	 	logical Right shift # bits.
 645              	**********************************/
ARM GAS  forth.s 			page 118


 646 3174 5E310000 		_HEADER RSHIFT,6,"RSHIFT"
 646      06525348 
 646      49465400 
 647 3180 57F8045B 		LDR	WP,[DSP],#4
 648 3184 25FA06F6 		MOV	TOS,WP,LSR TOS
 649 3188 B4E5     		_NEXT 
 650              	
 651              	/****************************
 652              	    LSHIFT	 ( w # -- w )
 653              	 	left shift # bits.
 654              	****************************/
 655 318a 78310000 		_HEADER LSHIFT,6,"LSHIFT"
 655      064C5348 
 655      49465400 
 655      00BF
 656 3198 57F8045B 		LDR	WP,[DSP],#4
 657 319c 05FA06F6 		MOV	TOS,WP,LSL TOS
 658 31a0 A8E5     		_NEXT
 659              	
 660              	/*************************
 661              	    +	 ( w w -- w )
 662              	 	Add.
 663              	*************************/
 664 31a2 8E310000 		_HEADER PLUS,1,"+"
 664      012B
 665 31a8 57F8045B 		LDR	WP,[DSP],#4
 666 31ac 2E44     		ADD	TOS,TOS,WP
 667 31ae A1E5     		_NEXT 
 668              	
 669              	/************************
 670              	    -	 ( w w -- w )
 671              	 	Subtract.
 672              	************************/
 673 31b0 A6310000 		_HEADER SUBB,1,"-"
 673      012D00BF 
 674 31b8 57F8045B 		LDR	WP,[DSP],#4
 675 31bc C6EB0506 		RSB	TOS,TOS,WP
 676 31c0 98E5     		_NEXT 
 677              	
 678              	/************************
 679              	    *	 ( w w -- w )
 680              	 	Multiply.
 681              	***********************/
 682 31c2 B4310000 		_HEADER STAR,1,"*"
 682      012A
 683 31c8 57F8045B 		LDR	WP,[DSP],#4
 684 31cc 05FB06F6 		MUL	TOS,WP,TOS
 685 31d0 90E5     		_NEXT 
 686              	
 687              	/***************************
 688              	    UM*	 ( w w -- ud )
 689              	 	Unsigned multiply.
 690              	****************************/
 691 31d2 C6310000 		_HEADER UMSTA,3,"UM*"
 691      03554D2A 
 691      00BF
 692 31dc 3D68     		LDR	WP,[DSP]
ARM GAS  forth.s 			page 119


 693 31de A6FB0523 		UMULL	T2,T3,TOS,WP
 694 31e2 3A60     		STR	T2,[DSP]
 695 31e4 1E46     		MOV	TOS,T3
 696 31e6 85E5     		_NEXT 
 697              	
 698              	/***************************
 699              	    M*	 ( w w -- d )
 700              	 	signed multiply.
 701              		hold double result
 702              	***************************/
 703 31e8 D6310000 		_HEADER MSTAR,2,"M*"
 703      024D2A00 
 704 31f0 3D68     		LDR	WP,[DSP]
 705 31f2 86FB0523 		SMULL	T2,T3,TOS,WP
 706 31f6 3A60     		STR	T2,[DSP]
 707 31f8 1E46     		MOV	TOS,T3
 708 31fa 7BE5     		_NEXT 
 709              	
 710              	/***************************
 711              	    1+	 ( w -- w+1 )
 712              	 	Add 1.
 713              	***************************/
 714 31fc EC310000 		_HEADER ONEP,2,"1+"
 714      02312B00 
 715 3204 06F10106 		ADD	TOS,TOS,#1
 716 3208 74E5     		_NEXT 
 717              	
 718              	/***************************
 719              	    1-	 ( w -- w-1 )
 720              	 	Subtract 1.
 721              	***************************/
 722 320a 00320000 		_HEADER ONEM,2,"1-"
 722      02312D00 
 722      00BF
 723 3214 A6F10106 		SUB	TOS,TOS,#1
 724 3218 6CE5     		_NEXT 
 725              	
 726              	/***************************
 727              	    2+	 ( w -- w+2 )
 728              	 	Add 2.
 729              	**************************/
 730 321a 0E320000 		_HEADER TWOP,2,"2+"
 730      02322B00 
 730      00BF
 731 3224 06F10206 		ADD	TOS,TOS,#2
 732 3228 64E5     		_NEXT
 733              	
 734              	/**************************
 735              	    2-	 ( w -- w-2 )
 736              	 	Subtract 2.
 737              	**************************/
 738 322a 1E320000 		_HEADER TWOM,2,"2-"
 738      02322D00 
 738      00BF
 739 3234 A6F10206 		SUB	TOS,TOS,#2
 740 3238 5CE5     		_NEXT
 741              	
ARM GAS  forth.s 			page 120


 742              	/***************************
 743              	    CELL+	( w -- w+4 )
 744              	 	Add CELLL.
 745              	***************************/
 746 323a 2E320000 		_HEADER CELLP,5,"CELL+"
 746      0543454C 
 746      4C2B
 747 3244 06F10406 		ADD	TOS,TOS,#CELLL
 748 3248 54E5     		_NEXT
 749              	
 750              	/***************************
 751              	    CELL-	( w -- w-4 )
 752              	 	Subtract CELLL.
 753              	**************************/
 754 324a 3E320000 		_HEADER CELLM,5,"CELL-"
 754      0543454C 
 754      4C2D
 755 3254 A6F10406 		SUB	TOS,TOS,#CELLL
 756 3258 4CE5     		_NEXT
 757              	
 758              	/**************************** 
 759              	    BL	( -- 32 )
 760              	 	Blank (ASCII space).
 761              	*****************************/
 762 325a 4E320000 		_HEADER BLANK,2,"BL"
 762      02424C00 
 762      00BF
 763 3264 47F8046D 		_PUSH
 764 3268 4FF02006 		MOV	TOS,#32
 765 326c 42E5     		_NEXT 
 766              	
 767              	/**************************
 768              	    CELLS	( w -- w*4 )
 769              	 	Multiply CELLL 
 770              	***************************/
 771 326e 5E320000 		_HEADER CELLS,5,"CELLS"
 771      0543454C 
 771      4C53
 772 3278 4FEA8606 		LSL TOS,#2
 773 327c 3AE5     		_NEXT
 774              	
 775              	/***************************
 776              	    CELL/	( w -- w/4 )
 777              	 	Divide by CELLL.
 778              	***************************/
 779 327e 72320000 		_HEADER CELLSL,5,"CELL/"
 779      0543454C 
 779      4C2F
 780 3288 4FEAA606 		ASR TOS,#2
 781 328c 32E5     		_NEXT
 782              	
 783              	/*************************
 784              	    2*	( w -- w*2 )
 785              	 	Multiply 2.
 786              	*************************/
 787 328e 82320000 		_HEADER TWOST,2,"2*"
 787      02322A00 
ARM GAS  forth.s 			page 121


 787      00BF
 788 3298 4FEA4606 		MOV	TOS,TOS,LSL#1
 789 329c 2AE5     		_NEXT
 790              	
 791              	/*************************
 792              	    2/	( w -- w/2 )
 793              	 	Divide by 2.
 794              	***********************/
 795 329e 92320000 		_HEADER TWOSL,2,"2/"
 795      02322F00 
 795      00BF
 796 32a8 4FEA6606 		MOV	TOS,TOS,ASR#1
 797 32ac 22E5     		_NEXT
 798              	
 799              	/****************************
 800              	    ?DUP	( w -- w w | 0 )
 801              	 	Conditional duplicate.
 802              	*****************************/
 803 32ae A2320000 		_HEADER QDUP,4,"?DUP"
 803      043F4455 
 803      5000
 804 32b8 3500     		MOVS	WP,TOS
 805 32ba 18BF     		IT NE 
 806 32bc 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 807 32c0 18E5     		_NEXT
 808              	
 809              	/***********************************
 810              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 811              	 	Rotate top 3 items.
 812              	*************************************/
 813 32c2 B2320000 		_HEADER ROT,3,"ROT"
 813      03524F54 
 813      00BF
 814 32cc 3868     		LDR	T0,[DSP]  // w2 
 815 32ce 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 816 32d0 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 817 32d2 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 818 32d4 0EE5     		_NEXT
 819              	
 820              	/*********************************
 821              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 822              	 left rotate top 3 elements 
 823              	********************************/
 824 32d6 C6320000 		_HEADER NROT,4,"-ROT"
 824      042D524F 
 824      5400
 825 32e0 7868     		LDR T0,[DSP,#4]
 826 32e2 7E60     		STR TOS,[DSP,#4]	
 827 32e4 3E68     		LDR TOS,[DSP]
 828 32e6 3860     		STR T0,[DSP]
 829 32e8 04E5     		_NEXT 
 830              	
 831              	/*********************************
 832              	    2DROP	( w1 w2 -- )
 833              	 	Drop top 2 items.
 834              	*********************************/
 835 32ea DA320000 		_HEADER DDROP,5,"2DROP"
ARM GAS  forth.s 			page 122


 835      05324452 
 835      4F50
 836 32f4 57F8046B 		_POP
 837 32f8 57F8046B 		_POP
 838 32fc FAE4     		_NEXT 
 839              	
 840              	/********************************
 841              		3DROP ( w1 w2 w3 -- )
 842              		drop top 3 items 
 843              	********************************/
 844 32fe EE320000 		_HEADER TDROP,5,"3DROP"
 844      05334452 
 844      4F50
 845 3308 07F10807 	    add DSP,#8 
 846 330c 57F8046B 	    _POP 
 847 3310 F0E4     	    _NEXT 
 848              	
 849              	/***********************************
 850              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 851              	 	Duplicate top 2 items.
 852              	************************************/
 853 3312 02330000 		_HEADER DDUP,4,"2DUP"
 853      04324455 
 853      5000
 854 331c 3868     		LDR	T0,[DSP] // w1
 855 331e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 856 3322 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 857 3326 E5E4     		_NEXT
 858              	
 859              	/******************************
 860              	    D+	( d1 d2 -- d3 )
 861              	 	Add top 2 double numbers.
 862              	******************************/
 863 3328 16330000 		_HEADER DPLUS,2,"D+"
 863      02442B00 
 864 3330 57F8045B 		LDR	WP,[DSP],#4
 865 3334 57F8042B 		LDR	T2,[DSP],#4
 866 3338 3B68     		LDR	T3,[DSP]
 867 333a ED18     		ADDS	WP,WP,T3
 868 333c 3D60     		STR	WP,[DSP]
 869 333e 46EB0206 		ADC	TOS,TOS,T2
 870 3342 D7E4     		_NEXT
 871              	
 872              	/******************************
 873              		DABS ( d -- ud )
 874              		absolute value double 
 875              	*****************************/
 876 3344 2C330000 		_HEADER DABS,4,"DABS"
 876      04444142 
 876      530000BF 
 877 3350 16F0004F 		tst TOS,#(1<<31)
 878 3354 09D0     		beq 9f 
 879 3356 6FEA0606 		mvn TOS,TOS 
 880 335a 3D68     		ldr WP,[DSP]
 881 335c 6FEA0505 		mvn WP,WP 
 882 3360 0135     		adds WP,#1
 883 3362 3D60     		str WP,[DSP]
ARM GAS  forth.s 			page 123


 884 3364 01D3     		bcc 9f 
 885 3366 06F10106 		add TOS,#1 
 886 336a C3E4     	9:	_NEXT 
 887              	
 888              	/*****************************
 889              	  UD> ( d1 d2 -- f )
 890              	  unsigned compare double d1 > d2 
 891              	******************************/
 892 336c 48330000 		_HEADER UDGREAT,3,"UD>"
 892      0355443E 
 893 3374 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 894 3378 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 895 337a B042     		cmp T0,TOS 
 896 337c 02D8     		bhi 1f
 897 337e 04D4     		bmi 2f  
 898 3380 A942     		cmp T1,WP 
 899 3382 02D9     		bls 2f 
 900 3384 4FF0FF36 	1:	mov TOS,#-1 
 901 3388 B4E4     		_NEXT 
 902 338a 4FF00006 	2:  mov TOS,#0 
 903 338e B1E4     		_NEXT 
 904              	
 905              	/******************************
 906              		D0= ( d -- f )
 907              		double 0= 
 908              	*****************************/
 909 3390 70330000 		_HEADER DZEQUAL,3,"D0="
 909      0344303D 
 910 3398 3046     		mov T0,TOS
 911 339a 57F8046B 		_POP 
 912 339e 46EA0006 		orr TOS,T0 
 913 33a2 01D0     		beq 9f
 914 33a4 6FF00006 		mvn TOS,#0 
 915 33a8 A4E4     	9:	_NEXT 
 916              	
 917              	/*****************************
 918              	    INVERT	 ( w -- !w )
 919              	 	1"s complement.
 920              	*****************************/
 921 33aa 94330000 		_HEADER INVER,6,"INVERT"
 921      06494E56 
 921      45525400 
 921      00BF
 922 33b8 6FEA0606 		MVN	TOS,TOS
 923 33bc 9AE4     		_NEXT
 924              	
 925              	/*****************************
 926              	    NEGATE	( w -- -w )
 927              	 	2's complement.
 928              	***************************/
 929 33be AE330000 		_HEADER NEGAT,6,"NEGATE"
 929      064E4547 
 929      41544500 
 929      00BF
 930 33cc C6F10006 		RSB	TOS,TOS,#0
 931 33d0 90E4     		_NEXT
 932              	
ARM GAS  forth.s 			page 124


 933              	/***************************
 934              	    ABS	 ( w -- |w| )
 935              	 	Absolute.
 936              	**************************/
 937 33d2 C2330000 		_HEADER ABSS,3,"ABS"
 937      03414253 
 937      00BF
 938 33dc 16F0004F 		TST	TOS,#0x80000000
 939 33e0 18BF     		IT NE
 940 33e2 7642     	    RSBNE   TOS,TOS,#0
 941 33e4 86E4     		_NEXT
 942              	
 943              	/**************************
 944              		CLZ ( n - n )
 945              		count leading zeros 
 946              	**************************/
 947 33e6 D6330000 		_HEADER CLZ,3,"CLZ"
 947      03434C5A 
 947      00BF
 948 33f0 B6FA86F6 		clz TOS,TOS 
 949 33f4 7EE4     		_NEXT 
 950              	
 951              	/*************************
 952              		CTZ ( n -- n )
 953              		count trailing zeros 
 954              	************************/
 955 33f6 EA330000 		_HEADER CTZ,3,"CTZ"
 955      0343545A 
 955      00BF
 956 3400 80EA0000 		eor T0,T0 
 957 3404 16F0010F 	1:  tst TOS,#1 
 958 3408 04D1     		bne 2f 
 959 340a 4FEA5606 		lsr TOS,#1 
 960 340e 00F10100 		add T0,#1 
 961 3412 F7E7     		b 1b 
 962 3414 0646     	2:  mov TOS,T0 
 963 3416 6DE4     		_NEXT 
 964              	
 965              	
 966              	/*******************
 967              	  0= ( w -- f )
 968              	 TOS==0?
 969              	*******************/
 970 3418 FA330000 		_HEADER ZEQUAL,2,"0="
 970      02303D00 
 971 3420 16B9     		cbnz TOS,1f
 972 3422 4FF0FF36 		mov TOS,#-1
 973 3426 65E4     		_NEXT 
 974 3428 86EA0606 	1:  eor TOS,TOS,TOS  
 975 342c 62E4     		_NEXT 	
 976              	
 977              	/*********************
 978              	    =	 ( w w -- t )
 979              	 	Equal?
 980              	*********************/
 981 342e 1C340000 		_HEADER EQUAL,1,"="
 981      013D
ARM GAS  forth.s 			page 125


 982 3434 57F8045B 		LDR	WP,[DSP],#4
 983 3438 AE42     		CMP	TOS,WP
 984 343a 0CBF     		ITE EQ 
 985 343c 6FF00006 	    MVNEQ	TOS,#0
 986 3440 0026     		MOVNE	TOS,#0
 987 3442 57E4     		_NEXT
 988              	
 989              	/************************
 990              		<> ( w w -- f )
 991              		different?
 992              	************************/
 993 3444 32340000 		_HEADER DIFF,2,"<>"
 993      023C3E00 
 994 344c 3046     		mov T0,TOS 
 995 344e 57F8046B 		_POP 
 996 3452 86EA0006 		eor TOS,T0
 997 3456 B6FA86F0 		clz T0,TOS 
 998 345a 06FA00F6 		lsl TOS,T0 
 999 345e 4FEAE676 		asr TOS,#31 
 1000 3462 47E4     		_NEXT 
 1001              	
 1002              	/************************
 1003              	    U<	 ( w w -- t )
 1004              	 	Unsigned less?
 1005              	*************************/
 1006 3464 48340000 		_HEADER ULESS,2,"U<"
 1006      02553C00 
 1007 346c 57F8045B 		LDR	WP,[DSP],#4
 1008 3470 B542     		CMP	WP,TOS
 1009 3472 34BF     		ITE CC 
 1010 3474 6FF00006 		MVNCC	TOS,#0
 1011 3478 0026     		MOVCS	TOS,#0
 1012 347a 3BE4     		_NEXT
 1013              	
 1014              	/**********************
 1015              	    <	( w w -- t )
 1016              	 	Less?
 1017              	**********************/
 1018 347c 68340000 		_HEADER LESS,1,"<"
 1018      013C00BF 
 1019 3484 57F8045B 		LDR	WP,[DSP],#4
 1020 3488 B542     		CMP	WP,TOS
 1021 348a B4BF     	    ITE LT
 1022 348c 6FF00006 		MVNLT	TOS,#0
 1023 3490 0026     		MOVGE	TOS,#0
 1024 3492 2FE4     		_NEXT 
 1025              	
 1026              	/**********************
 1027              		U> ( u u -- t|f )
 1028              	    unsigned greater 
 1029              	**********************/
 1030 3494 80340000 		_HEADER UGREAT,2,"U>"
 1030      02553E00 
 1031 349c 57F8045B 		LDR WP,[DSP],#4 
 1032 34a0 AE42     		CMP TOS,WP 
 1033 34a2 34BF     		ITE CC  
 1034 34a4 6FF00006 		MVNCC TOS,#0 
ARM GAS  forth.s 			page 126


 1035 34a8 0026     		MOVCS TOS,#0
 1036 34aa 23E4     		_NEXT 
 1037              	
 1038              	/***********************
 1039              	    >	( w w -- t )
 1040              	 	greater?
 1041              	***********************/
 1042 34ac 98340000 		_HEADER GREAT,1,">"
 1042      013E00BF 
 1043 34b4 57F8045B 		LDR	WP,[DSP],#4
 1044 34b8 B542     		CMP	WP,TOS
 1045 34ba CCBF     		ITE GT
 1046 34bc 6FF00006 	    MVNGT	TOS,#0
 1047 34c0 0026     		MOVLE	TOS,#0
 1048 34c2 17E4     		_NEXT
 1049              	
 1050              	/***************************
 1051              	    MAX	 ( w w -- max )
 1052              	 	Leave maximum.
 1053              	***************************/
 1054 34c4 B0340000 		_HEADER MAX,3,"MAX"
 1054      034D4158 
 1055 34cc 57F8045B 		LDR	WP,[DSP],#4
 1056 34d0 B542     		CMP	WP,TOS
 1057 34d2 C8BF     		IT GT 
 1058 34d4 2E46     		MOVGT	TOS,WP
 1059 34d6 0DE4     		_NEXT 
 1060              	
 1061              	/**************************
 1062              	    MIN	 ( w w -- min )
 1063              	 	Leave minimum.
 1064              	**************************/
 1065 34d8 C8340000 		_HEADER MIN,3,"MIN"
 1065      034D494E 
 1066 34e0 57F8045B 		LDR	WP,[DSP],#4
 1067 34e4 B542     		CMP	WP,TOS
 1068 34e6 B8BF     		IT LT
 1069 34e8 2E46     		MOVLT	TOS,WP
 1070 34ea 03E4     		_NEXT
 1071              	
 1072              	/***********************
 1073              	    +!	 ( w a -- )
 1074              	 	Add to memory.
 1075              	***********************/
 1076 34ec DC340000 		_HEADER PSTOR,2,"+!"
 1076      022B2100 
 1077 34f4 57F8045B 		LDR	WP,[DSP],#4
 1078 34f8 3268     		LDR	T2,[TOS]
 1079 34fa 2A44     		ADD	T2,T2,WP
 1080 34fc 3260     		STR	T2,[TOS]
 1081 34fe 57F8046B 		_POP
 1082 3502 FFF7F7BB 		_NEXT
 1083              	
 1084              	/************************
 1085              	    2!	 ( d a -- )
 1086              	 	Store double number.
 1087              	*************************/
ARM GAS  forth.s 			page 127


 1088 3506 F0340000 		_HEADER DSTOR,2,"2!"
 1088      02322100 
 1088      00BF
 1089 3510 57F8045B 		LDR	WP,[DSP],#4
 1090 3514 57F8042B 		LDR	T2,[DSP],#4
 1091 3518 46F8045B 		STR	WP,[TOS],#4
 1092 351c 3260     		STR	T2,[TOS]
 1093 351e 57F8046B 		_POP
 1094 3522 FFF7E7BB 		_NEXT
 1095              	
 1096              	/************************
 1097              	    2@	 ( a -- d )
 1098              	 	Fetch double number.
 1099              	************************/
 1100 3526 0A350000 		_HEADER DAT,2,"2@"
 1100      02324000 
 1100      00BF
 1101 3530 7568     		LDR	WP,[TOS,#4]
 1102 3532 47F8045D 		STR	WP,[DSP,#-4]!
 1103 3536 3668     		LDR	TOS,[TOS]
 1104 3538 FFF7DCBB 		_NEXT
 1105              	
 1106              	/***************************
 1107              	    COUNT	( b -- b+1 c )
 1108              	 	Fetch length of string.
 1109              	****************************/
 1110 353c 2A350000 		_HEADER COUNT,5,"COUNT"
 1110      05434F55 
 1110      4E5400BF 
 1111 3548 16F8015B 		LDRB	WP,[TOS],#1
 1112 354c 47F8046D 		_PUSH
 1113 3550 2E46     		MOV	TOS,WP
 1114 3552 FFF7CFBB 		_NEXT
 1115              	
 1116              	/******************************
 1117              	    DNEGATE	( d -- -d )
 1118              	 	Negate double number.
 1119              	**************************/
 1120 3556 40350000 		_HEADER DNEGA,7,"DNEGATE"
 1120      07444E45 
 1120      47415445 
 1120      00BF
 1121 3564 3D68     		LDR	WP,[DSP]
 1122 3566 A2EB0202 		SUB	T2,T2,T2
 1123 356a 551B     		SUBS WP,T2,WP
 1124 356c 62EB0606 		SBC	TOS,T2,TOS
 1125 3570 3D60     		STR	WP,[DSP]
 1126 3572 FFF7BFBB 		_NEXT
 1127              	
 1128              	/******************************
 1129              	  System and user variables
 1130              	******************************/
 1131              	
 1132              	/*******************************
 1133              	  doVAR	( -- a )
 1134              	  Run time routine for VARIABLE and CREATE.
 1135              	hidden word used by compiler
ARM GAS  forth.s 			page 128


 1136              	********************************/
 1137              	DOVAR:
 1138 3576 47F8046D 		_PUSH
 1139 357a 6646     		MOV TOS,IP
 1140 357c 0CF1040C 		ADD IP,IP,#4 
 1141 3580 FFF7BBBB 		B UNNEST 
 1142              	
 1143              	/**********************************
 1144              	    doCON	( -- a ) 
 1145              	 	Run time routine for CONSTANT.
 1146              	hidden word used by compiler 
 1147              	***********************************/
 1148              	DOCON:
 1149 3584 47F8046D 		_PUSH
 1150 3588 5CF8046B 		LDR.W TOS,[IP],#4 
 1151 358c FFF7B5BB 		B UNNEST 
 1152              	
 1153              	/***********************
 1154              	  system variables 
 1155              	***********************/
 1156              	
 1157              	/***********************
 1158              		STATE ( -- a )
 1159              		compilation state 
 1160              		0 -> interpret
 1161              		-1 -> compile 
 1162              	************************/
 1163 3590 5A350000 		_HEADER STATE,5,"STATE"
 1163      05535441 
 1163      544500BF 
 1164 359c 47F8046D 		_PUSH 
 1165 35a0 04F1B006 		ADD TOS,UP,#CSTATE 
 1166 35a4 FFF7A6BB 		_NEXT 
 1167              	
 1168              	/**************************
 1169              	 SEED ( -- a)
 1170              	 return PRNG seed address 
 1171              	**************************/
 1172 35a8 94350000 		_HEADER SEED,4,"SEED"
 1172      04534545 
 1172      440000BF 
 1173 35b4 47F8046D 		_PUSH 
 1174 35b8 04F10406 		ADD TOS,UP,#RNDSEED
 1175 35bc FFF79ABB 		_NEXT 	
 1176              	
 1177              	/****************************************
 1178              	  MSEC ( -- a)
 1179              	 return address of milliseconds counter
 1180              	****************************************/
 1181 35c0 AC350000 		_HEADER MSEC,4,"MSEC"
 1181      044D5345 
 1181      430000BF 
 1182 35cc 47F8046D 	    _PUSH
 1183 35d0 04F10806 	    ADD TOS,UP,#TICKS
 1184 35d4 FFF78EBB 	    _NEXT 
 1185              	
 1186              	/*************************
ARM GAS  forth.s 			page 129


 1187              	 TIMER ( -- a )
 1188              	 count down timer 
 1189              	**********************/
 1190 35d8 C4350000 		_HEADER TIMER,5,"TIMER"
 1190      0554494D 
 1190      455200BF 
 1191 35e4 47F8046D 		 _PUSH 
 1192 35e8 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1193 35ec FFF782BB 	    _NEXT
 1194              	
 1195              	/*****************************
 1196              	    'BOOT	 ( -- a )
 1197              	 	boot up application vector 
 1198              	*****************************/
 1199 35f0 DC350000 		_HEADER TBOOT,5,"'BOOT"
 1199      0527424F 
 1199      4F5400BF 
 1200 35fc 47F8046D 		_PUSH
 1201 3600 04F11006 		ADD	TOS,UP,#BOOT 
 1202 3604 FFF776BB 		_NEXT
 1203              		
 1204              	/********************************************	
 1205              	    BASE	( -- a )
 1206              	 	Storage of the radix base for numeric I/O.
 1207              	**********************************************/
 1208 3608 F4350000 		_HEADER BASE,4,"BASE"
 1208      04424153 
 1208      450000BF 
 1209 3614 47F8046D 		_PUSH
 1210 3618 04F11C06 		ADD	TOS,UP,#NBASE
 1211 361c FFF76ABB 		_NEXT
 1212              	
 1213              	/***********************************************
 1214              		BCHAR ( -- flag )
 1215              		boolean variable
 1216              		if set base char include in convertion 
 1217              		of integer to string.  
 1218              	************************************************/
 1219 3620 0C360000 			_HEADER BCHR,5,"BCHAR"
 1219      05424348 
 1219      415200BF 
 1220 362c 47F8046D 			_PUSH 
 1221 3630 04F12006 			ADD TOS,UP,#BCHAR 
 1222 3634 FFF75EBB 			_NEXT 
 1223              	
 1224              	/*****************************************************
 1225              	    temp	 ( -- a )
 1226              	 	A temporary storage location used in parse and find.
 1227              	hidden word for internal use
 1228              	********************************************************/
 1229              	TEMP:
 1230 3638 47F8046D 		_PUSH
 1231 363c 04F12406 		ADD	TOS,UP,#TMP
 1232 3640 FFF758BB 		_NEXT
 1233              	
 1234              	/*******************************************
 1235              	    SPAN	( -- a )
ARM GAS  forth.s 			page 130


 1236              	 	Hold character count received by EXPECT.
 1237              	********************************************/
 1238 3644 24360000 		_HEADER SPAN,4,"SPAN"
 1238      04535041 
 1238      4E0000BF 
 1239 3650 47F8046D 		_PUSH
 1240 3654 04F12806 		ADD	TOS,UP,#CSPAN
 1241 3658 FFF74CBB 		_NEXT
 1242              	
 1243              	/***********************************************************
 1244              	    >IN	 ( -- a )
 1245              	 	Hold the character pointer while parsing input stream.
 1246              	***********************************************************/
 1247 365c 48360000 		_HEADER INN,3,">IN"
 1247      033E494E 
 1248 3664 47F8046D 		_PUSH
 1249 3668 04F12C06 		ADD	TOS,UP,#TOIN
 1250 366c FFF742BB 		_NEXT
 1251              	
 1252              	/**************************************
 1253              	    #TIB	( -- a )
 1254              	 	Hold the current count and address 
 1255              		of the terminal input buffer.
 1256              	**************************************/
 1257 3670 60360000 		_HEADER NTIB,4,"#TIB"
 1257      04235449 
 1257      420000BF 
 1258 367c 47F8046D 		_PUSH
 1259 3680 04F13006 		ADD	TOS,UP,#NTIBB
 1260 3684 FFF736BB 		_NEXT
 1261              	
 1262              	/******************************
 1263              	    'EVAL	( -- a )
 1264              	 	Execution vector of EVAL.
 1265              	*******************************/
 1266 3688 74360000 		_HEADER TEVAL,5,"'EVAL"
 1266      05274556 
 1266      414C00BF 
 1267 3694 47F8046D 		_PUSH
 1268 3698 04F13806 		ADD	TOS,UP,#EVAL
 1269 369c FFF72ABB 		_NEXT
 1270              	
 1271              	/*********************************
 1272              	    HLD	 ( -- a )
 1273              	 	Hold a pointer in building a 
 1274              		numeric output string.
 1275              	*********************************/
 1276 36a0 8C360000 		_HEADER HLD,3,"HLD"
 1276      03484C44 
 1277 36a8 47F8046D 		_PUSH
 1278 36ac 04F13C06 		ADD	TOS,UP,#VHOLD
 1279 36b0 FFF720BB 		_NEXT
 1280              	
 1281              	/**********************************
 1282              	    CONTEXT	( -- a )
 1283              	 	A area to specify vocabulary 
 1284              		search order.
ARM GAS  forth.s 			page 131


 1285              	**********************************/
 1286 36b4 A4360000 		_HEADER CNTXT,7,"CONTEXT"
 1286      07434F4E 
 1286      54455854 
 1287              	CRRNT:
 1288 36c0 47F8046D 		_PUSH
 1289 36c4 04F14006 		ADD	TOS,UP,#CTXT
 1290 36c8 FFF714BB 		_NEXT
 1291              	
 1292              	/******************************
 1293              	    CP	( -- a )
 1294              	 	Point to top free area  
 1295              		in user RAM. 
 1296              	******************************/
 1297 36cc B8360000 		_HEADER CPP,2,"CP"
 1297      02435000 
 1298 36d4 47F8046D 		_PUSH
 1299 36d8 04F14806 		ADD	TOS,UP,#USER_CTOP
 1300 36dc FFF70ABB 		_NEXT
 1301              	
 1302              	/****************************
 1303              	   FCP ( -- a )
 1304              	  Point ot top of Forth 
 1305              	  system dictionary
 1306              	****************************/
 1307 36e0 D0360000 		_HEADER FCP,3,"FCP"
 1307      03464350 
 1308 36e8 47F8046D 		_PUSH 
 1309 36ec 04F14406 		ADD TOS,UP,#FORTH_CTOP 
 1310 36f0 FFF700BB 		_NEXT 
 1311              	
 1312              	/***************************
 1313              	    LAST	( -- a )
 1314              	 	Point to the last name 
 1315              		in the dictionary.
 1316              	***************************/
 1317 36f4 E4360000 		_HEADER LAST,4,"LAST"
 1317      044C4153 
 1317      540000BF 
 1318 3700 47F8046D 		_PUSH
 1319 3704 04F14C06 		ADD	TOS,UP,#LASTN
 1320 3708 FFF7F4BA 		_NEXT
 1321              	
 1322              	
 1323              	/***********************
 1324              		system constants 
 1325              	***********************/
 1326              	
 1327              	/********************************
 1328              		USER-BEGIN ( -- a )
 1329              	  where user area begin in RAM
 1330              	********************************/
 1331 370c F8360000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1331      0A555345 
 1331      522D4245 
 1331      47494E00 
 1332 371c 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 132


 1333 3720 DFF80460 		ldr TOS,USR_BGN_ADR 
 1334 3724 FFF7E6BA 		_NEXT 
 1335              	USR_BGN_ADR:
 1336 3728 12050020 	.word  DTOP 
 1337              	
 1338              	/*********************************
 1339              	  USER_END ( -- a )
 1340              	  where user area end in RAM 
 1341              	******************************/
 1342 372c 10370000 		_HEADER USER_END,8,"USER-END"
 1342      08555345 
 1342      522D454E 
 1342      440000BF 
 1343 373c 47F8046D 		_PUSH 
 1344 3740 DFF80460 		ldr TOS,USER_END_ADR 
 1345 3744 FFF7D6BA 		_NEXT 
 1346              	USER_END_ADR:
 1347 3748 2C810120 		.word DEND 
 1348              	
 1349              	/********************************
 1350              		MAX-INT ( -- n+ )
 1351              		maximum integer 
 1352              	*******************************/
 1353 374c 30370000 		_HEADER MAXINT,7,"MAX-INT"
 1353      074D4158 
 1353      2D494E54 
 1354 3758 47F8046D 		_PUSH 
 1355 375c 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1355      C7F6FF76 
 1356 3764 FFF7C6BA 		_NEXT 
 1357              	
 1358              	/******************************
 1359              		MIN-INT ( -- n- )
 1360              		minimum integer 
 1361              	******************************/
 1362 3768 50370000 		_HEADER MININT,7,"MIN-INT"
 1362      074D494E 
 1362      2D494E54 
 1363 3774 47F8046D 		_PUSH 
 1364 3778 4FF00006 		_MOV32 TOS, 0x80000000
 1364      C8F20006 
 1365 3780 FFF7B8BA 		_NEXT 
 1366              	
 1367              	/******************************
 1368              		MAX-UINT ( -- u )
 1369              		maximum unsigned integer 
 1370              	******************************/
 1371 3784 6C370000 		_HEADER MAXUINT,8,"MAX-UINT"
 1371      084D4158 
 1371      2D55494E 
 1371      540000BF 
 1372 3794 47F8046D 		_PUSH
 1373 3798 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1373      CFF6FF76 
 1374 37a0 FFF7A8BA 		_NEXT 
 1375              	
 1376              	
ARM GAS  forth.s 			page 133


 1377              	/* *********************
 1378              	  Common functions
 1379              	***********************/
 1380              	
 1381              	/********************************
 1382              	    WITHIN	( u ul uh -- t )
 1383              	 	Return true if u is within 
 1384              		the range of ul and uh.
 1385              	********************************/
 1386 37a4 88370000 		_HEADER WITHI,6,"WITHIN"
 1386      06574954 
 1386      48494E00 
 1387 37b0 504700BF 		_NEST
 1388 37b4 E9300000 		_ADR	OVER
 1389 37b8 B9310000 		_ADR	SUBB
 1390 37bc 25300000 		_ADR	TOR
 1391 37c0 B9310000 		_ADR	SUBB
 1392 37c4 E12F0000 		_ADR	RFROM
 1393 37c8 6D340000 		_ADR	ULESS
 1394 37cc FB2C0000 		_UNNEST
 1395              	
 1396              	//  Divide
 1397              	
 1398              	/*************************************
 1399              	    UM/MOD	( udl udh u -- ur uq )
 1400              	 	Unsigned divide of a double by a 
 1401              		single. Return mod and quotient.
 1402              	**************************************/
 1403 37d0 A8370000 		_HEADER UMMOD,6,"UM/MOD"
 1403      06554D2F 
 1403      4D4F4400 
 1404 37dc 4FF00103 		MOV	T3,#1
 1405 37e0 57F8045B 		LDR	WP,[DSP],#4
 1406 37e4 3A68     		LDR	T2,[DSP]
 1407              	UMMOD0:
 1408 37e6 9218     		ADDS	T2,T2,T2
 1409 37e8 6D41     		ADCS	WP,WP,WP
 1410 37ea 04D3     		BCC	UMMOD1
 1411 37ec A5EB0605 		SUB	WP,WP,TOS
 1412 37f0 02F10102 		ADD	T2,T2,#1
 1413 37f4 04E0     		B UMMOD2
 1414              	UMMOD1:
 1415 37f6 AD1B     		SUBS	WP,WP,TOS 
 1416 37f8 28BF     		IT CS 
 1417 37fa 0132     		ADDCS	T2,T2,#1
 1418 37fc 00D2     		BCS	UMMOD2
 1419 37fe 3544     		ADD	WP,WP,TOS
 1420              	UMMOD2:
 1421 3800 DB18     		ADDS	T3,T3,T3
 1422 3802 F0D3     		BCC	UMMOD0
 1423 3804 1646     		MOV	TOS,T2
 1424 3806 3D60     		STR	WP,[DSP]
 1425 3808 FFF774BA 		_NEXT
 1426              	
 1427              	/****************************
 1428              	    FM/MOD	( d n -- r q )
 1429              	 	Signed floored divide 
ARM GAS  forth.s 			page 134


 1430              		of double by single. 
 1431              		Return mod and quotient.
 1432              	****************************/
 1433 380c D4370000 		_HEADER MSMOD,6,"FM/MOD"
 1433      06464D2F 
 1433      4D4F4400 
 1434 3818 504700BF 		_NEST
 1435 381c A9300000 		_ADR	DUPP
 1436 3820 19310000 		_ADR	ZLESS
 1437 3824 A9300000 		_ADR	DUPP
 1438 3828 25300000 		_ADR	TOR
 1439 382c 5F2F0000 		_QBRAN MMOD1
 1439      44380000 
 1440 3834 CD330000 		_ADR	NEGAT
 1441 3838 25300000 		_ADR	TOR
 1442 383c 65350000 		_ADR	DNEGA
 1443 3840 E12F0000 		_ADR	RFROM
 1444              	MMOD1:
 1445 3844 25300000 		_ADR	TOR
 1446 3848 A9300000 		_ADR	DUPP
 1447 384c 19310000 		_ADR	ZLESS
 1448 3850 5F2F0000 		_QBRAN MMOD2
 1448      60380000 
 1449 3858 11300000 		_ADR	RAT
 1450 385c A9310000 		_ADR	PLUS
 1451              	MMOD2:
 1452 3860 E12F0000 		_ADR	RFROM
 1453 3864 DD370000 		_ADR	UMMOD
 1454 3868 E12F0000 		_ADR	RFROM
 1455 386c 5F2F0000 		_QBRAN	MMOD3
 1455      80380000 
 1456 3874 B9300000 		_ADR	SWAP
 1457 3878 CD330000 		_ADR	NEGAT
 1458 387c B9300000 		_ADR	SWAP
 1459              	MMOD3:   
 1460 3880 FB2C0000 		_UNNEST
 1461              	
 1462              	/****************************
 1463              		SM/REM (d n1 -- n2 n3 )
 1464              	    symetric signed division 
 1465              		double by single 
 1466              	input:
 1467              		d   signed double 
 1468              		n1  signed single 
 1469              	output: 
 1470              		n2  signed remainder 
 1471              		n3  signed quotient 
 1472              	****************************/
 1473 3884 10380000 		_HEADER SMSLSHREM,6,"SM/REM"
 1473      06534D2F 
 1473      52454D00 
 1474 3890 504700BF 		_NEST 
 1475 3894 A9300000 		_ADR DUPP 
 1476 3898 19310000 		_ADR ZLESS 
 1477 389c A9300000 		_ADR DUPP 
 1478 38a0 25300000 		_ADR TOR   // divisor sign 
 1479 38a4 5F2F0000 		_QBRAN 1f 
ARM GAS  forth.s 			page 135


 1479      B0380000 
 1480 38ac CD330000 		_ADR NEGAT 
 1481 38b0 E9300000 	1:  _ADR OVER 
 1482 38b4 19310000 		_ADR ZLESS 
 1483 38b8 A9300000 		_ADR DUPP 
 1484 38bc 25300000 		_ADR TOR  // divident sign 
 1485 38c0 5F2F0000 		_QBRAN  1f 
 1485      D4380000 
 1486 38c8 25300000 		_ADR TOR 
 1487 38cc 65350000 		_ADR DNEGA
 1488 38d0 E12F0000 		_ADR RFROM 
 1489 38d4 DD370000 	1:  _ADR UMMOD  // rem quot  
 1490 38d8 E12F0000 		_ADR RFROM 
 1491 38dc 11300000 		_ADR RAT 
 1492 38e0 51310000 		_ADR XORR
 1493 38e4 5F2F0000 		_QBRAN 1f
 1493      F0380000 
 1494 38ec CD330000 		_ADR NEGAT 
 1495 38f0 A9300000 	1:  _ADR DUPP 
 1496 38f4 19310000 		_ADR ZLESS 
 1497 38f8 E12F0000 		_ADR RFROM 
 1498 38fc 51310000 		_ADR XORR 
 1499 3900 5F2F0000 		_QBRAN 1f 
 1499      14390000 
 1500 3908 B9300000 		_ADR SWAP 
 1501 390c CD330000 		_ADR NEGAT 
 1502 3910 B9300000 	    _ADR SWAP 
 1503 3914 FB2C0000 	1:  _UNNEST 
 1504              	
 1505              	
 1506              	/****************************
 1507              		S>D ( n -- d )
 1508              		convert single to double 
 1509              	*****************************/
 1510 3918 88380000 		_HEADER STOD,3,"S>D"
 1510      03533E44 
 1511 3920 47F8046D 		_PUSH 
 1512 3924 4FEAE676 		ASR TOS,#31
 1513 3928 FFF7E4B9 		_NEXT 
 1514              	
 1515              	/****************************
 1516              		D2* ( d -- d<<1 )
 1517              		double * 2 
 1518              	***************************/
 1519 392c 1C390000 		_HEADER D2STAR,3,"D2*"
 1519      0344322A 
 1520 3934 3868     		ldr T0,[DSP]
 1521 3936 4000     		lsls T0,#1
 1522 3938 3860     		str T0,[DSP]
 1523 393a 4FEA4606 		lsl TOS,#1
 1524 393e 46F10006 		adc TOS,#0
 1525 3942 FFF7D7B9 		_NEXT 
 1526              	
 1527              	/****************************
 1528              		D2/  ( d -- d>>1 )
 1529              		double signed divide by 2 
 1530              	*****************************/
ARM GAS  forth.s 			page 136


 1531 3946 30390000 		_HEADER D2SL,3,"D2/"
 1531      0344322F 
 1531      00BF
 1532 3950 3868     		ldr T0,[DSP]
 1533 3952 7610     		asrs TOS,#1
 1534 3954 4FEA3000 		rrx T0,T0 
 1535 3958 3860     		str T0,[DSP]
 1536 395a FFF7CBB9 		_NEXT 
 1537              	
 1538              	/***************************
 1539              		D/MOD  ( d+ n+ - r+ qd+ )
 1540              		unsigned double division
 1541              		and modulo 
 1542              		output:
 1543              			qd+ = d+ / n+
 1544              			r+ = qd+ - (d+ * n+ )
 1545              	***************************/
 1546 395e 4A390000 		_HEADER DSLMOD,5,"D/MOD"
 1546      05442F4D 
 1546      4F44
 1547 3968 3D68     		ldr WP,[DSP]  // d+ high 
 1548 396a 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1549 396c 4FF02002 		mov T2,#32 // shift counter  
 1550 3970 81EA0101 		eor T1,T1 // quotient T0:T1  
 1551 3974 25B9     		cbnz WP,1f    
 1552 3976 82EA0202 		eor T2,T2 // nos shifting required 
 1553 397a 0546     		mov WP,T0 
 1554 397c 80EA0000 		eor T0,T0 
 1555 3980 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1556 3982 15F0004F 	    tst WP,#(1<<31) 
 1557 3986 06D1     		bne 2f
 1558 3988 4918     		adds T1,T1,T1 
 1559 398a 4041     		adcs T0,T0,T0 
 1560 398c 45EB0505 		adc WP,WP,WP 
 1561 3990 A2F10102 		sub T2,#1 
 1562 3994 F4E7     		b 1b 
 1563 3996 B5FBF6F3 	2:  udiv T3,WP,TOS
 1564 399a 41EA0301 		orr T1,T3   // append partial quotient 
 1565 399e 06FB03F3 		mul T3,TOS
 1566 39a2 A5EB0305 		sub WP,T3 //remainder 
 1567 39a6 02B1     		cbz T2,8f 
 1568 39a8 EAE7     		b 1b 
 1569 39aa 7D60     	8:	str WP,[DSP,#4] // remainder 
 1570 39ac 3960     		str T1,[DSP]  // q lo 
 1571 39ae 0646     		mov TOS,T0  // q hi 		
 1572 39b0 FFF7A0B9 		_NEXT 
 1573              	
 1574              	
 1575              	/****************************
 1576              		D/  ( ud u -- udq )
 1577              		divide unsigned double 
 1578              		by unsigned single 
 1579              		return double quotient
 1580              		rounded to nearest integer 
 1581              	****************************/
 1582 39b4 62390000 		_HEADER DSLASH,2,"D/"
 1582      02442F00 
ARM GAS  forth.s 			page 137


 1583 39bc 504700BF 		_NEST 
 1584 39c0 A9300000 		_ADR DUPP 
 1585 39c4 1F2F0000 		_DOLIT 1 
 1585      01000000 
 1586 39cc 81310000 		_ADR RSHIFT 
 1587 39d0 25300000 		_ADR TOR 
 1588 39d4 69390000 		_ADR DSLMOD 
 1589 39d8 CD320000 		_ADR ROT 
 1590 39dc E12F0000 		_ADR RFROM 
 1591 39e0 B5340000 		_ADR GREAT 
 1592 39e4 5F2F0000 		_QBRAN 9f
 1592      FC390000 
 1593 39ec 1F2F0000 		_DOLIT 1 
 1593      01000000 
 1594 39f4 21390000 		_ADR STOD 
 1595 39f8 31330000 		_ADR DPLUS 
 1596 39fc FB2C0000 	9:	_UNNEST 
 1597              	
 1598              	
 1599              	/****************************
 1600              		D* ( d s -- d )
 1601              	    multiply a double 
 1602              		by a single 
 1603              	****************************/
 1604 3a00 B8390000 		_HEADER DSTAR,2,"D*"
 1604      02442A00 
 1605              	/*
 1606              		_NEST 
 1607              		_ADR NROT 
 1608              		_ADR DUPP 
 1609              		_ADR TOR 
 1610              		_ADR DABS
 1611              		_ADR SWAP  
 1612              		_ADR ROT   
 1613              		_ADR DUPP
 1614              		_ADR TOR
 1615              		_ADR MSTAR
 1616              		_ADR ROT
 1617              		_ADR RFROM 
 1618              		_ADR STAR 
 1619              		_ADR PLUS
 1620              		_ADR RFROM 
 1621              		_ADR ZLESS 
 1622              		_QBRAN 9f
 1623              		_ADR DNEGA   
 1624              	9:	_UNNEST 
 1625              	*/
 1626 3a08 57F8040B 		ldr T0,[DSP],#4
 1627 3a0c 3968     		ldr T1,[DSP]
 1628 3a0e 3860     		str T0,[DSP] 
 1629 3a10 83EA0303 		eor T3,T3 
 1630 3a14 10F0004F 		tst T0,#(1<<31)
 1631 3a18 02D0     		beq 1f 
 1632              		// DNEGATE 
 1633 3a1a 591A     		subs T1,T3,T1  
 1634 3a1c 63EB0000 		sbc T0,T3,T0 
 1635 3a20 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
ARM GAS  forth.s 			page 138


 1636 3a24 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1637 3a28 0E44     		add TOS,T1  // TOS:T2 product  
 1638 3a2a 3868     		ldr r0,[DSP]
 1639 3a2c 10F0004F 		tst T0,#(1<<31)
 1640 3a30 02D0     		beq 2f 
 1641              		// DNEGATE product 
 1642 3a32 9A1A     		subs T2,T3,T2  
 1643 3a34 63EB0606 		sbc TOS,T3,TOS 
 1644 3a38 3A60     	2:  str T2,[DSP]
 1645 3a3a FFF75BB9 		_NEXT 
 1646              	
 1647              	
 1648              	/****************************
 1649              	   /MOD	( n n -- r q )
 1650              		Signed divide. Return
 1651              		mod and quotient.
 1652              	****************************/
 1653 3a3e 043A0000 		_HEADER SLMOD,4,"/MOD"
 1653      042F4D4F 
 1653      4400
 1654 3a48 504700BF 		_NEST
 1655 3a4c E9300000 		_ADR	OVER
 1656 3a50 19310000 		_ADR	ZLESS
 1657 3a54 B9300000 		_ADR	SWAP
 1658 3a58 19380000 		_ADR	MSMOD
 1659 3a5c FB2C0000 		_UNNEST
 1660              	
 1661              	/**************************
 1662              	    MOD	 ( n n -- r )
 1663              	 	Signed divide. Return
 1664              		mod only.
 1665              	**************************/
 1666 3a60 423A0000 		_HEADER MODD,3,"MOD"
 1666      034D4F44 
 1667 3a68 504700BF 		_NEST
 1668 3a6c 493A0000 		_ADR	SLMOD
 1669 3a70 99300000 		_ADR	DROP
 1670 3a74 FB2C0000 		_UNNEST
 1671              	
 1672              	/*************************
 1673              	    /	   ( n n -- q )
 1674              	 	Signed divide. Return
 1675              		quotient only.
 1676              	**************************/
 1677 3a78 643A0000 		_HEADER SLASH,1,"/"
 1677      012F00BF 
 1678 3a80 504700BF 		_NEST
 1679 3a84 493A0000 		_ADR	SLMOD
 1680 3a88 B9300000 		_ADR	SWAP
 1681 3a8c 99300000 		_ADR	DROP
 1682 3a90 FB2C0000 		_UNNEST
 1683              	
 1684              	//******************************
 1685              	//   */MOD	( n1 n2 n3 -- r q )
 1686              	/*   Multiply n1 and n2, then 
 1687              	   divide by n3. Return 
 1688              	   mod and quotient.
ARM GAS  forth.s 			page 139


 1689              	******************************/
 1690 3a94 7C3A0000 		_HEADER SSMOD,5,"*/MOD"
 1690      052A2F4D 
 1690      4F4400BF 
 1691 3aa0 504700BF 		_NEST
 1692 3aa4 25300000 		_ADR	TOR
 1693 3aa8 F1310000 		_ADR	MSTAR
 1694 3aac E12F0000 		_ADR	RFROM
 1695 3ab0 19380000 		_ADR	MSMOD
 1696 3ab4 FB2C0000 		_UNNEST
 1697              	
 1698              	//*******************************
 1699              	//  */ ( n1 n2 n3 -- q )
 1700              	/* 	Multiply n1 by n2, then 
 1701              		divide by n3. Return quotient
 1702              		only.
 1703              	*******************************/
 1704 3ab8 983A0000 		_HEADER STASL,2,"*/"
 1704      022A2F00 
 1705 3ac0 504700BF 		_NEST
 1706 3ac4 A13A0000 		_ADR	SSMOD
 1707 3ac8 B9300000 		_ADR	SWAP
 1708 3acc 99300000 		_ADR	DROP
 1709 3ad0 FB2C0000 		_UNNEST
 1710              	
 1711              	/*******************
 1712              	  Miscellaneous
 1713              	*******************/
 1714              	
 1715              	/*************************
 1716              		CHAR+ ( a -- a+ )
 1717              		increment a by one 
 1718              		char size unit. 
 1719              	*************************/
 1720 3ad4 BC3A0000 		_HEADER CHARP,5,"CHAR+"
 1720      05434841 
 1720      522B00BF 
 1721 3ae0 06F10106 		add TOS,#1
 1722 3ae4 FFF706B9 		_NEXT 
 1723              	
 1724              	/*************************
 1725              		CHARS ( n1 -- n1 )
 1726              		address size of 
 1727              		n1 character
 1728              		same on this system 
 1729              	*************************/
 1730 3ae8 D83A0000 		_HEADER CHARS,5,"CHARS"
 1730      05434841 
 1730      525300BF 
 1731 3af4 FFF7FEB8 		_NEXT 
 1732              	
 1733              	
 1734              	
 1735              	/*************************
 1736              		ALIGN ( -- )
 1737              		align data pointer 
 1738              		to cell boundary 
ARM GAS  forth.s 			page 140


 1739              	************************/
 1740 3af8 EC3A0000 		_HEADER ALIGN,5,"ALIGN"
 1740      05414C49 
 1740      474E00BF 
 1741 3b04 A06C     		ldr T0,[UP,#USER_CTOP]
 1742 3b06 00F10300 		add T0,#(CELLL-1)
 1743 3b0a 20F00300 		and T0,#0xFFFFFFFC 
 1744 3b0e A064     		str T0,[UP,#USER_CTOP]
 1745 3b10 FFF7F0B8 		_NEXT 
 1746              	
 1747              	
 1748              	/*************************
 1749              	    ALIGNED	( b -- a )
 1750              	 	Align address to the 
 1751              		cell boundary.
 1752              	**************************/
 1753 3b14 FC3A0000 		_HEADER ALGND,7,"ALIGNED"
 1753      07414C49 
 1753      474E4544 
 1754 3b20 06F10306 		ADD	TOS,TOS,#3
 1755 3b24 6FF00305 		MVN	WP,#3
 1756 3b28 06EA0506 		AND	TOS,TOS,WP
 1757 3b2c FFF7E2B8 		_NEXT
 1758              	
 1759              	/****************************
 1760              	    >CHAR	( c -- c )
 1761              	 	Filter non-printing 
 1762              		characters.
 1763              	****************************/
 1764 3b30 183B0000 		_HEADER TCHAR,5,">CHAR"
 1764      053E4348 
 1764      415200BF 
 1765 3b3c 504700BF 		_NEST
 1766 3b40 1F2F0000 		_DOLIT  0x7F
 1766      7F000000 
 1767 3b48 29310000 		_ADR	ANDD
 1768 3b4c A9300000 		_ADR	DUPP	// mask msb
 1769 3b50 65320000 		_ADR	BLANK
 1770 3b54 1F2F0000 		_DOLIT 	127
 1770      7F000000 
 1771 3b5c B1370000 		_ADR	WITHI	// check for printable
 1772 3b60 B9330000 		_ADR	INVER
 1773 3b64 5F2F0000 		_QBRAN	TCHA1
 1773      783B0000 
 1774 3b6c 99300000 		_ADR	DROP
 1775 3b70 1F2F0000 		_DOLIT 	'_'	// replace non-printables
 1775      5F000000 
 1776              	TCHA1:
 1777 3b78 FB2C0000 		  _UNNEST
 1778              	
 1779              	/************************
 1780              	    DEPTH	( -- n )
 1781              	 	Return the depth of
 1782              		the data stack.
 1783              	***********************/
 1784 3b7c 343B0000 		_HEADER DEPTH,5,"DEPTH"
 1784      05444550 
ARM GAS  forth.s 			page 141


 1784      544800BF 
 1785 3b88 4FF6B062 		_MOV32 T2,SPP 
 1785      C2F20102 
 1786 3b90 A2EB0702 		SUB	T2,T2,DSP
 1787 3b94 47F8046D 		_PUSH
 1788 3b98 4FEAA206 		ASR	TOS,T2,#2
 1789 3b9c FFF7AAB8 		_NEXT
 1790              	
 1791              	/*****************************
 1792              	    PICK	( ... +n -- ... w )
 1793              	 	Copy the nth stack item 
 1794              		to tos.
 1795              	******************************/
 1796 3ba0 803B0000 		_HEADER PICK,4,"PICK"
 1796      04504943 
 1796      4B0000BF 
 1797 3bac 4FEA8606 		lsl TOS,#2 
 1798 3bb0 BE59     		ldr TOS,[DSP,TOS]
 1799 3bb2 FFF79FB8 		_NEXT 
 1800              	
 1801              	/*****************************
 1802              		PUT ( xn..x0 w i -- xi...x0 )
 1803              		put value w at position 
 1804              		xi on stack 
 1805              		i in range [0..n] 
 1806              	*****************************/
 1807 3bb6 A43B0000 		_HEADER PUT,3,"PUT"
 1807      03505554 
 1807      00BF
 1808 3bc0 3546     		mov WP,TOS 
 1809 3bc2 57F8046B 		_POP 
 1810 3bc6 4FEA8505 		lsl WP,#2 
 1811 3bca 7E51     		str TOS,[DSP,WP]
 1812 3bcc 57F8046B 		_POP 
 1813 3bd0 FFF790B8 		_NEXT 
 1814              	
 1815              	/*********************
 1816              	  Memory access
 1817              	*********************/
 1818              	
 1819              	/*************************
 1820              	    HERE	( -- a )
 1821              	 	Return the top of
 1822              		the code dictionary.
 1823              	*************************/
 1824 3bd4 BA3B0000 		_HEADER HERE,4,"HERE"
 1824      04484552 
 1824      450000BF 
 1825 3be0 504700BF 		_NEST
 1826 3be4 D5360000 		_ADR	CPP
 1827 3be8 B52F0000 		_ADR	AT
 1828 3bec FB2C0000 		_UNNEST
 1829              	
 1830              	/***************************	
 1831              	    PAD	 ( -- a )
 1832              	 	Return the address of 
 1833              		a temporary buffer.
ARM GAS  forth.s 			page 142


 1834              	***************************/
 1835 3bf0 D83B0000 		_HEADER PAD,3,"PAD"
 1835      03504144 
 1836 3bf8 504700BF 		_NEST
 1837 3bfc E13B0000 		_ADR	HERE
 1838 3c00 1F2F0000 		_DOLIT 80
 1838      50000000 
 1839 3c08 A9310000 		_ADR PLUS 
 1840 3c0c FB2C0000 		_UNNEST
 1841              	
 1842              	/***********************
 1843              	    TIB	 ( -- a )
 1844              	 	Return the address 
 1845              		of the terminal 
 1846              		input buffer.
 1847              	************************/
 1848 3c10 F43B0000 		_HEADER TIB,3,"TIB"
 1848      03544942 
 1849 3c18 47F8046D 		_PUSH
 1850 3c1c 666B     		ldr TOS,[UP,#TIBUF]
 1851 3c1e FFF769B8 		_NEXT
 1852              	
 1853              	/***********************************
 1854              		SOURCE ( -- a u )
 1855              	output:
 1856              		a  address of transaction buffer 
 1857              		u  # char in buffer 
 1858              	***********************************/
 1859 3c22 143C0000 		_HEADER SOURCE,6,"SOURCE"
 1859      06534F55 
 1859      52434500 
 1859      00BF
 1860 3c30 504700BF 		_NEST 
 1861 3c34 1F2F0000 		_DOLIT  SRC 
 1861      30000000 
 1862 3c3c 31350000 		_ADR   DAT 
 1863 3c40 FB2C0000 		_UNNEST 
 1864              	
 1865              	/*************************
 1866              	    @EXECUTE	( a -- )
 1867              	 	Execute vector stored
 1868              		in address a.
 1869              	*************************/
 1870 3c44 263C0000 		_HEADER ATEXE,8,"@EXECUTE"
 1870      08404558 
 1870      45435554 
 1870      450000BF 
 1871 3c54 3500     		MOVS	WP,TOS
 1872 3c56 57F8046B 		_POP
 1873 3c5a 2D68     		LDR	WP,[WP]
 1874 3c5c 45F00105 		ORR	WP,WP,#1
 1875 3c60 18BF     	    IT NE 
 1876 3c62 2847     		BXNE	WP
 1877 3c64 FFF746B8 		_NEXT
 1878              	
 1879              	/*******************************
 1880              	    CMOVE	( b1 b2 u -- )
ARM GAS  forth.s 			page 143


 1881              	 	Copy u bytes from b1 to b2.
 1882              	********************************/
 1883 3c68 483C0000 		_HEADER CMOVE,5,"CMOVE"
 1883      05434D4F 
 1883      564500BF 
 1884 3c74 57F8042B 		LDR	T2,[DSP],#4
 1885 3c78 57F8043B 		LDR	T3,[DSP],#4
 1886 3c7c 03E0     		B CMOV1
 1887              	CMOV0:
 1888 3c7e 13F8015B 		LDRB	WP,[T3],#1
 1889 3c82 02F8015B 		STRB	WP,[T2],#1
 1890              	CMOV1:
 1891 3c86 3600     		MOVS	TOS,TOS
 1892 3c88 02D0     		BEQ	CMOV2
 1893 3c8a A6F10106 		SUB	TOS,TOS,#1
 1894 3c8e F6E7     		B CMOV0
 1895              	CMOV2:
 1896 3c90 57F8046B 		_POP
 1897 3c94 FFF72EB8 		_NEXT
 1898              	
 1899              	/***************************
 1900              	    MOVE	( a1 a2 u -- )
 1901              	 	Copy u words from a1 to a2.
 1902              	*******************************/
 1903 3c98 6C3C0000 		_HEADER MOVE,4,"MOVE"
 1903      044D4F56 
 1903      450000BF 
 1904 3ca4 4FF00400 		MOV T0,#4 
 1905 3ca8 06F10306 		ADD TOS,#3 
 1906 3cac 26F00306 		BIC TOS,#3
 1907 3cb0 57F8041B 		LDR	T1,[DSP],#4 // dest
 1908 3cb4 57F8042B 		LDR	T2,[DSP],#4 // src 
 1909 3cb8 8A42     		CMP T2,T1 
 1910 3cba 08D5     		BPL MOVE1
 1911 3cbc 6FF00300 		MOV T0,#-4 
 1912 3cc0 3144     		ADD T1,TOS
 1913 3cc2 3244     		ADD T2,TOS 
 1914 3cc4 01E0     		B MOVE3
 1915              	MOVE0:
 1916 3cc6 1568     		LDR	WP,[T2]
 1917 3cc8 0D60     		STR	WP,[T1]
 1918              	MOVE3: 
 1919 3cca 0144     		ADD T1,T0 
 1920 3ccc 0244     		ADD T2,T0 
 1921              	MOVE1:
 1922 3cce 3600     		MOVS TOS,TOS
 1923 3cd0 02D0     		BEQ	MOVE2
 1924 3cd2 A6F10406 		SUB	TOS,TOS,#4
 1925 3cd6 F6E7     		B MOVE0
 1926              	MOVE2:
 1927 3cd8 57F8046B 		_POP
 1928 3cdc FFF70AB8 		_NEXT
 1929              	
 1930              	/**************************
 1931              	    FILL	( b u c -- )
 1932              	 	Fill u bytes of character
 1933              		c to area beginning at b.
ARM GAS  forth.s 			page 144


 1934              	******************************/
 1935 3ce0 9C3C0000 		_HEADER FILL,4,"FILL"
 1935      0446494C 
 1935      4C0000BF 
 1936 3cec 03CF     		LDMFD DSP!,{T0,T1} 
 1937 3cee 0000     		MOVS T0,T0 
 1938 3cf0 03D0     		BEQ FILL2
 1939              	FILL1:
 1940 3cf2 01F8016B 		STRB	TOS,[T1],#1
 1941 3cf6 0138     		SUBS	T0,T0,#1
 1942 3cf8 FBD1     		BNE FILL1
 1943              	FILL2:
 1944 3cfa 57F8046B 		_POP
 1945 3cfe FEF7F9BF 		_NEXT
 1946              	
 1947              	/*****************************
 1948              	    PACK$	( b u a -- a )
 1949              	 	Build a counted word with
 1950              		u characters from b. 
 1951              		Null fill.
 1952              	*****************************/
 1953 3d02 E43C0000 		_HEADER PACKS,5,"PACK$"
 1953      05504143 
 1953      4B24
 1954 3d0c 504700BF 		_NEST
 1955 3d10 213B0000 		_ADR	ALGND
 1956 3d14 A9300000 		_ADR	DUPP
 1957 3d18 25300000 		_ADR	TOR		// strings only on cell boundary
 1958 3d1c E9300000 		_ADR	OVER
 1959 3d20 A9310000 		_ADR	PLUS
 1960 3d24 05320000 		_ADR	ONEP 
 1961 3d28 1F2F0000 		_DOLIT 	0xFFFFFFFC
 1961      FCFFFFFF 
 1962 3d30 29310000 		_ADR	ANDD			// count mod cell
 1963 3d34 1F2F0000 		_DOLIT 	0
 1963      00000000 
 1964 3d3c B9300000 		_ADR	SWAP
 1965 3d40 A12F0000 		_ADR	STORE			// null fill cell
 1966 3d44 11300000 		_ADR	RAT
 1967 3d48 1D330000 		_ADR	DDUP
 1968 3d4c C12F0000 		_ADR	CSTOR
 1969 3d50 05320000 		_ADR	ONEP			// save count
 1970 3d54 B9300000 		_ADR	SWAP
 1971 3d58 753C0000 		_ADR	CMOVE
 1972 3d5c E12F0000 		_ADR	RFROM
 1973 3d60 FB2C0000 		_UNNEST   			// move string
 1974              	
 1975              	/***********************************
 1976              	  Numeric output, single precision
 1977              	***********************************/
 1978              	
 1979              	/**************************
 1980              	    DIGIT	( u -- c )
 1981              	 	Convert digit u to 
 1982              		a character.
 1983              	***************************/
 1984 3d64 063D0000 		_HEADER DIGIT,5,"DIGIT"
ARM GAS  forth.s 			page 145


 1984      05444947 
 1984      495400BF 
 1985 3d70 504700BF 		_NEST
 1986 3d74 1F2F0000 		_DOLIT 9
 1986      09000000 
 1987 3d7c E9300000 		_ADR	OVER
 1988 3d80 85340000 		_ADR	LESS
 1989 3d84 1F2F0000 		_DOLIT	7
 1989      07000000 
 1990 3d8c 29310000 		_ADR	ANDD
 1991 3d90 A9310000 		_ADR	PLUS
 1992 3d94 1F2F0000 		_DOLIT	'0'
 1992      30000000 
 1993 3d9c A9310000 		_ADR	PLUS 
 1994 3da0 FB2C0000 		_UNNEST
 1995              	
 1996              	/*********************************
 1997              	    EXTRACT	( ud base -- ud c )
 1998              	 	Extract the least significant
 1999              		digit from positive double.
 2000              	**********************************/
 2001 3da4 683D0000 		_HEADER EXTRC,7,"EXTRACT"
 2001      07455854 
 2001      52414354 
 2002 3db0 504700BF 		_NEST
 2003 3db4 69390000 		_ADR	DSLMOD
 2004 3db8 CD320000 		_ADR	ROT
 2005 3dbc 713D0000 		_ADR	DIGIT
 2006 3dc0 FB2C0000 		_UNNEST
 2007              	
 2008              	/***************************
 2009              	    <#	  ( -- )
 2010              	 	Initiate the numeric
 2011              		output process.
 2012              	****************************/
 2013 3dc4 A83D0000 		_HEADER BDIGS,2,"<#"
 2013      023C2300 
 2014 3dcc 504700BF 		_NEST
 2015 3dd0 F93B0000 		_ADR	PAD
 2016 3dd4 A9360000 		_ADR	HLD
 2017 3dd8 A12F0000 		_ADR	STORE
 2018 3ddc FB2C0000 		_UNNEST
 2019              	
 2020              	/*********************************
 2021              	    HOLD	( c -- )
 2022              	 	Insert a character into the 
 2023              		numeric output string.
 2024              	**********************************/
 2025 3de0 C83D0000 		_HEADER HOLD,4,"HOLD"
 2025      04484F4C 
 2025      440000BF 
 2026 3dec 504700BF 		_NEST
 2027 3df0 A9360000 		_ADR	HLD
 2028 3df4 B52F0000 		_ADR	AT
 2029 3df8 15320000 		_ADR	ONEM
 2030 3dfc A9300000 		_ADR	DUPP
 2031 3e00 A9360000 		_ADR	HLD
ARM GAS  forth.s 			page 146


 2032 3e04 A12F0000 		_ADR	STORE
 2033 3e08 C12F0000 		_ADR	CSTOR
 2034 3e0c FB2C0000 		_UNNEST
 2035              	
 2036              	/***********************
 2037              	    #	   ( ud -- ud )
 2038              	 	Extract one digit 
 2039              		from ud and append 
 2040              		the digit to output 
 2041              		string.
 2042              	*************************/
 2043 3e10 E43D0000 		_HEADER DIG,1,"#"
 2043      012300BF 
 2044 3e18 504700BF 		_NEST
 2045 3e1c 15360000 		_ADR	BASE
 2046 3e20 B52F0000 		_ADR	AT
 2047 3e24 B13D0000 		_ADR	EXTRC
 2048 3e28 ED3D0000 		_ADR	HOLD
 2049 3e2c FB2C0000 		_UNNEST
 2050              	
 2051              	/***************************
 2052              	    #S	  ( ud -- 0 )
 2053              	 	Convert ud until all 
 2054              		digits are added to 
 2055              		the output string.
 2056              	***************************/
 2057 3e30 143E0000 		_HEADER DIGS,2,"#S"
 2057      02235300 
 2058 3e38 504700BF 		_NEST
 2059              	DIGS1:
 2060 3e3c 193E0000 	    _ADR	DIG
 2061 3e40 1D330000 		_ADR	DDUP
 2062 3e44 3D310000 		_ADR    ORR 
 2063 3e48 5F2F0000 		_QBRAN 	DIGS2
 2063      583E0000 
 2064 3e50 872F0000 		_BRAN	DIGS1
 2064      3C3E0000 
 2065              	DIGS2:
 2066 3e58 99300000 		 _ADR DROP 
 2067 3e5c FB2C0000 		 _UNNEST
 2068              	
 2069              	/*********************
 2070              	    SIGN	( n -- )
 2071              	 	Add a minus sign
 2072              		to the numeric
 2073              		output string.
 2074              	*********************/
 2075 3e60 343E0000 		_HEADER SIGN,4,"SIGN"
 2075      04534947 
 2075      4E0000BF 
 2076 3e6c 504700BF 		_NEST
 2077 3e70 19310000 		_ADR	ZLESS
 2078 3e74 5F2F0000 		_QBRAN	SIGN1
 2078      883E0000 
 2079 3e7c 1F2F0000 		_DOLIT '-'
 2079      2D000000 
 2080 3e84 ED3D0000 		_ADR	HOLD
ARM GAS  forth.s 			page 147


 2081              	SIGN1:
 2082 3e88 FB2C0000 		  _UNNEST
 2083              	
 2084              	/*************************
 2085              	    #>  ( w -- b u )
 2086              	 	Prepare the output 
 2087              		word to be TYPE'd.
 2088              	************************/
 2089 3e8c 643E0000 		_HEADER EDIGS,2,"#>"
 2089      02233E00 
 2090 3e94 504700BF 		_NEST
 2091 3e98 99300000 		_ADR	DROP
 2092 3e9c A9360000 		_ADR	HLD
 2093 3ea0 B52F0000 		_ADR	AT
 2094 3ea4 F93B0000 		_ADR	PAD
 2095 3ea8 E9300000 		_ADR	OVER
 2096 3eac B9310000 		_ADR	SUBB
 2097 3eb0 FB2C0000 		_UNNEST
 2098              	
 2099              	/**************************
 2100              	    str	 ( n -- b u )
 2101              	 	Convert a signed 
 2102              		integer to a numeric 
 2103              		string.
 2104              	hidden word used by compiler
 2105              	***************************/
 2106              	STRR:
 2107 3eb4 504700BF 		_NEST
 2108 3eb8 21390000 		_ADR 	STOD 
 2109 3ebc A9300000 		_ADR	DUPP
 2110 3ec0 25300000 		_ADR	TOR
 2111 3ec4 51330000 		_ADR	DABS
 2112 3ec8 CD3D0000 		_ADR	BDIGS
 2113 3ecc 393E0000 		_ADR	DIGS
 2114 3ed0 E12F0000 		_ADR	RFROM
 2115 3ed4 6D3E0000 		_ADR	SIGN
 2116 3ed8 953E0000 		_ADR	EDIGS
 2117 3edc FB2C0000 		_UNNEST
 2118              	
 2119              	/*************************
 2120              	    HEX	 ( -- )
 2121              	 	Use radix 16 as 
 2122              		base for numeric 
 2123              		conversions.
 2124              	*************************/
 2125 3ee0 903E0000 		_HEADER HEX,3,"HEX"
 2125      03484558 
 2126 3ee8 504700BF 		_NEST
 2127 3eec 1F2F0000 		_DOLIT 16
 2127      10000000 
 2128 3ef4 15360000 		_ADR	BASE
 2129 3ef8 A12F0000 		_ADR	STORE
 2130 3efc FB2C0000 		_UNNEST
 2131              	
 2132              	/**************************
 2133              		BIN ( -- )
 2134              		Use radix 2 as 
ARM GAS  forth.s 			page 148


 2135              		base for numeric 
 2136              		conversion 
 2137              	**************************/
 2138 3f00 E43E0000 		_HEADER BIN,3,"BIN"
 2138      0342494E 
 2139 3f08 504700BF 		_NEST 
 2140 3f0c 1F2F0000 		_DOLIT 2 
 2140      02000000 
 2141 3f14 15360000 		_ADR BASE 
 2142 3f18 A12F0000 		_ADR STORE
 2143 3f1c FB2C0000 		_UNNEST 
 2144              	
 2145              	/************************
 2146              	    DECIMAL	( -- )
 2147              	 	Use radix 10 as base
 2148              		for numeric conversions.
 2149              	*************************/
 2150 3f20 043F0000 		_HEADER DECIM,7,"DECIMAL"
 2150      07444543 
 2150      494D414C 
 2151 3f2c 504700BF 		_NEST
 2152 3f30 1F2F0000 		_DOLIT 10
 2152      0A000000 
 2153 3f38 15360000 		_ADR	BASE
 2154 3f3c A12F0000 		_ADR	STORE
 2155 3f40 FB2C0000 		_UNNEST
 2156              	
 2157              	/************************************
 2158              	  Numeric input
 2159              	***********************************/
 2160              	
 2161              	/***********************************
 2162              	    DIGIT?	( c base -- u t )
 2163              	 	Convert a character to its 
 2164              		numeric value. A flag 
 2165              		indicates success.
 2166              	**********************************/
 2167 3f44 243F0000 		_HEADER DIGTQ,6,"DIGIT?"
 2167      06444947 
 2167      49543F00 
 2168 3f50 504700BF 		_NEST
 2169 3f54 25300000 		_ADR	TOR
 2170 3f58 1F2F0000 		_DOLIT 	'0'
 2170      30000000 
 2171 3f60 B9310000 		_ADR	SUBB
 2172 3f64 1F2F0000 		_DOLIT 9
 2172      09000000 
 2173 3f6c E9300000 		_ADR	OVER
 2174 3f70 85340000 		_ADR	LESS
 2175 3f74 5F2F0000 		_QBRAN	DGTQ1
 2175      9C3F0000 
 2176 3f7c 1F2F0000 		_DOLIT 7
 2176      07000000 
 2177 3f84 B9310000 		_ADR	SUBB
 2178 3f88 A9300000 		_ADR	DUPP
 2179 3f8c 1F2F0000 		_DOLIT	10
 2179      0A000000 
ARM GAS  forth.s 			page 149


 2180 3f94 85340000 		_ADR	LESS
 2181 3f98 3D310000 		_ADR	ORR
 2182              	DGTQ1:
 2183 3f9c A9300000 		_ADR	DUPP
 2184 3fa0 E12F0000 		_ADR	RFROM
 2185 3fa4 6D340000 		_ADR	ULESS
 2186 3fa8 FB2C0000 		_UNNEST
 2187              	
 2188              	
 2189              	/*****************************************
 2190              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2191              	  convert unsigned double string 
 2192              	  to double integer adding to ud1 
 2193              	input:
 2194              		ud1  unsiged double 
 2195              		adr1  string address 
 2196              		u1    string length 
 2197              	outpout:
 2198              		ud2   modifield ud1 
 2199              		adr2  point to char not converted 
 2200              		u2    char left in string 
 2201              	**************************************/
 2202 3fac 483F0000 		_HEADER TONBR,7,">NUMBER"
 2202      073E4E55 
 2202      4D424552 
 2203 3fb8 504700BF 		_NEST 
 2204 3fbc A9300000 		_ADR DUPP 
 2205 3fc0 5F2F0000 		_QBRAN 9f 
 2205      28400000 
 2206 3fc8 E9300000 	1: 	_ADR OVER  // d a u a 
 2207 3fcc D52F0000 		_ADR CAT   // d  a u c 
 2208 3fd0 15360000 		_ADR BASE   
 2209 3fd4 B52F0000 		_ADR AT      // d a u c base
 2210 3fd8 513F0000 		_ADR DIGTQ   // d a u n flag 
 2211 3fdc 5F2F0000 		_QBRAN 8f
 2211      24400000 
 2212 3fe4 25300000 		_ADR TOR   	 
 2213 3fe8 15320000 		_ADR ONEM 
 2214 3fec CD300000 		_ADR DSWAP // a u d 
 2215 3ff0 15360000 		_ADR BASE 
 2216 3ff4 B52F0000 		_ADR AT 
 2217 3ff8 093A0000 		_ADR DSTAR 
 2218 3ffc E12F0000 		_ADR RFROM 
 2219 4000 1F2F0000 		_DOLIT 0    
 2219      00000000 
 2220 4008 31330000 		_ADR DPLUS 
 2221 400c CD300000 		_ADR DSWAP 
 2222 4010 B9300000 		_ADR SWAP 
 2223 4014 05320000 		_ADR ONEP
 2224 4018 B9300000 		_ADR SWAP  
 2225 401c 872F0000 		_BRAN 1b 
 2225      C83F0000 
 2226 4024 99300000 	8:  _ADR DROP
 2227 4028 FB2C0000 	9:	_UNNEST 
 2228              	
 2229              	
 2230              	/**************************
ARM GAS  forth.s 			page 150


 2231              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2232              	 check for charcter c 
 2233              	 move pointer if *a==c  
 2234              	**************************/
 2235              	CHARQ:
 2236 402c 7868     	    ldr T0,[DSP,#4]
 2237 402e 10F8011B 	    ldrb T1,[T0],#1 
 2238 4032 3246     	    mov T2,TOS 
 2239 4034 86EA0606 	    eor TOS,TOS
 2240 4038 9142     	    cmp T1,T2
 2241 403a 06D1     	    bne 1f 
 2242 403c 7860     	    str T0,[DSP,#4]
 2243 403e 3868     		ldr T0,[DSP]
 2244 4040 A0F10100 		sub T0,#1 
 2245 4044 3860     		str T0,[DSP]
 2246 4046 6FEA0606 	    mvn TOS,TOS  
 2247 404a FEF753BE 	1:  _NEXT
 2248              	
 2249              	
 2250              	/*********************************
 2251              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2252              	   skip '-'|'+' return -1 if '-' 
 2253              	   else return 0 
 2254              	*********************************/
 2255              	NEGQ: 
 2256 404e 47F8046D 		_PUSH 
 2257 4052 86EA0606 		eor TOS,TOS // false flag 
 2258 4056 7868     		ldr T0,[DSP,#4]
 2259 4058 10F8011B 		ldrb T1,[T0],#1
 2260 405c 2D29     		cmp T1,#'-' 
 2261 405e 02D0     		beq 1f
 2262 4060 2B29     		cmp T1,#'+'
 2263 4062 07D1     		bne 3f 
 2264 4064 01E0     		b 2f 
 2265 4066 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2266 406a 7860     	2:	str T0,[DSP,#4]
 2267 406c 3868     		ldr T0,[DSP]
 2268 406e A0F10100 		sub T0,#1 
 2269 4072 3860     		str T0,[DSP]
 2270 4074 FEF73EBE 	3:	_NEXT 
 2271              	
 2272              	
 2273              	
 2274              	/**********************************
 2275              	    INT?	( a -- n T | a F )
 2276              	 	parse string  at 'a' for 
 2277              		integer. Push a flag on TOS.
 2278              		integer form:
 2279              			[-]hex_digit+  | 
 2280              			$[-]hex_digit+ |
 2281              			%[-]bin_digit+ | 
 2282              			[-]dec_digit+ 
 2283              	**********************************/
 2284 4078 B03F0000 		_HEADER INTQ,4,"INT?"
 2284      04494E54 
 2284      3F0000BF 
 2285 4084 504700BF 		_NEST
ARM GAS  forth.s 			page 151


 2286              	// save BASE 	
 2287 4088 15360000 		_ADR	BASE
 2288 408c B52F0000 		_ADR	AT
 2289 4090 25300000 		_ADR	TOR
 2290 4094 1F2F0000 		_DOLIT	0      // a 0 
 2290      00000000 
 2291 409c E9300000 		_ADR	OVER   // a 0 a 
 2292 40a0 49350000 		_ADR	COUNT  // a 0 a+ cnt 
 2293 40a4 1F2F0000 		_DOLIT  '$' 
 2293      24000000 
 2294 40ac 2D400000 		_ADR    CHARQ 
 2295 40b0 5F2F0000 		_QBRAN  0f 
 2295      C4400000 
 2296              	// hexadecimal number 
 2297 40b8 E93E0000 		_ADR    HEX
 2298 40bc 872F0000 		_BRAN   2f 
 2298      DC400000 
 2299 40c4 1F2F0000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2299      25000000 
 2300 40cc 2D400000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2301 40d0 5F2F0000 		_QBRAN  2f
 2301      DC400000 
 2302 40d8 093F0000 		_ADR	BIN 
 2303              	2: // check if negative number 
 2304 40dc 4F400000 		_ADR    NEGQ 
 2305 40e0 25300000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2306 40e4 1F2F0000 		_DOLIT  0
 2306      00000000 
 2307 40ec A9300000 		_ADR	DUPP 
 2308 40f0 CD300000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2309 40f4 B93F0000 		_ADR    TONBR // a 0 d a+ cnt 
 2310 40f8 5F2F0000 		_QBRAN  2f
 2310      14410000 
 2311              	    // not an integer 
 2312 4100 E12F0000 		_ADR RFROM // a 0 d a sign  
 2313 4104 F5320000 		_ADR DDROP 
 2314 4108 F5320000 		_ADR DDROP 
 2315 410c 872F0000 		_BRAN 7f 
 2315      3C410000 
 2316              	2: // valid integer 
 2317 4114 99300000 		_ADR	DROP // a 0 d
 2318 4118 CD300000 		_ADR    DSWAP 
 2319 411c F5320000 		_ADR    DDROP 
 2320 4120 99300000 		_ADR    DROP  // d>s 
 2321 4124 E12F0000 		_ADR    RFROM // n sign 
 2322 4128 5F2F0000 		_QBRAN  2f
 2322      34410000 
 2323 4130 CD330000 		_ADR    NEGAT   
 2324 4134 1F2F0000 	2:	_DOLIT  -1 
 2324      FFFFFFFF 
 2325              	7: // restore BASE 
 2326 413c E12F0000 		_ADR	RFROM
 2327 4140 15360000 		_ADR	BASE
 2328 4144 A12F0000 		_ADR	STORE
 2329 4148 FB2C0000 		_UNNEST
 2330              	
 2331              	
ARM GAS  forth.s 			page 152


 2332              	/********************************
 2333              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2334              	    parse number, integer or float 
 2335              	    if not a number return ( a 0 ) 
 2336              	    if integer return ( int -1 ) 
 2337              	    if float return ( float -2 )
 2338              	**********************************/
 2339 414c 7C400000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2339      074E554D 
 2339      4245523F 
 2340 4158 504700BF 	    _NEST 
 2341 415c 85400000 	    _ADR INTQ
 2342 4160 B9320000 	    _ADR QDUP 
 2343 4164 5F2F0000 	    _QBRAN 2f 
 2343      70410000 
 2344 416c FB2C0000 	    _UNNEST 
 2345 4170 19260000 	2:  _ADR FLOATQ
 2346 4174 FB2C0000 	    _UNNEST 
 2347              	
 2348              	
 2349              	/********************
 2350              	  console I/O
 2351              	********************/
 2352              	
 2353              	/**********************
 2354              	    SPACE	( -- )
 2355              	 	Send the blank 
 2356              		character to 
 2357              		the output device.
 2358              	************************/
 2359 4178 50410000 		_HEADER SPACE,5,"SPACE"
 2359      05535041 
 2359      434500BF 
 2360 4184 504700BF 		_NEST
 2361 4188 65320000 		_ADR	BLANK
 2362 418c BD2D0000 		_ADR	EMIT
 2363 4190 FB2C0000 		_UNNEST
 2364              	
 2365              	/***************************
 2366              	    SPACES	( +n -- )
 2367              	 	Send n spaces to the 
 2368              		output device.
 2369              	****************************/
 2370 4194 7C410000 		_HEADER SPACS,6,"SPACES"
 2370      06535041 
 2370      43455300 
 2371 41a0 504700BF 		_NEST
 2372 41a4 1F2F0000 		_DOLIT	0
 2372      00000000 
 2373 41ac CD340000 		_ADR	MAX
 2374 41b0 25300000 		_ADR	TOR
 2375 41b4 872F0000 		_BRAN	CHAR2
 2375      C0410000 
 2376              	CHAR1:
 2377 41bc 85410000 		_ADR	SPACE
 2378              	CHAR2:
 2379 41c0 412F0000 		_DONXT	CHAR1
ARM GAS  forth.s 			page 153


 2379      BC410000 
 2380 41c8 FB2C0000 		_UNNEST
 2381              	
 2382              	/***********************
 2383              	    TYPE	( b u -- )
 2384              	 	Output u characters 
 2385              		from b.
 2386              	************************/
 2387 41cc 98410000 		_HEADER TYPEE,4,"TYPE"
 2387      04545950 
 2387      450000BF 
 2388 41d8 504700BF 		_NEST
 2389 41dc 25300000 		_ADR  TOR   // ( a+1 -- R: u )
 2390 41e0 872F0000 		_BRAN	TYPE2
 2390      F4410000 
 2391              	TYPE1:  
 2392 41e8 49350000 		_ADR  COUNT
 2393 41ec 3D3B0000 		_ADR TCHAR
 2394 41f0 BD2D0000 		_ADR EMIT
 2395              	TYPE2:  
 2396 41f4 412F0000 		_DONXT	TYPE1
 2396      E8410000 
 2397 41fc 99300000 		_ADR	DROP
 2398 4200 FB2C0000 		_UNNEST
 2399              	
 2400              	/***************************
 2401              	    CR	  ( -- )
 2402              	 	Output a carriage return
 2403              		and a line feed.
 2404              	****************************/
 2405 4204 D0410000 		_HEADER CR,2,"CR"
 2405      02435200 
 2406 420c 504700BF 		_NEST
 2407 4210 1F2F0000 		_DOLIT	CRR
 2407      0D000000 
 2408 4218 BD2D0000 		_ADR	EMIT
 2409 421c 1F2F0000 		_DOLIT	LF
 2409      0A000000 
 2410 4224 BD2D0000 		_ADR	EMIT
 2411 4228 FB2C0000 		_UNNEST
 2412              	
 2413              	/******************************************
 2414              	  do_$	( -- a u )
 2415              	  Return the address of a compiled string.
 2416              	  adjust return address to skip over it.
 2417              	hidden word used by compiler. 
 2418              	******************************************/
 2419              	DOSTR:
 2420 422c 504700BF 		_NEST     
 2421              	/* compiled string address is 2 levels deep */
 2422 4230 E12F0000 		_ADR	RFROM	// { -- a1 }
 2423 4234 E12F0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2424 4238 A9300000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2425 423c 49350000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2426 4240 A9310000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2427 4244 213B0000 		_ADR	ALGND	//  end of string
 2428              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
ARM GAS  forth.s 			page 154


 2429 4248 25300000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2430 424c B9300000 		_ADR	SWAP	//  count tugged
 2431 4250 25300000 		_ADR	TOR     //  ( -- a2) is string address
 2432 4254 49350000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2433 4258 FB2C0000 		_UNNEST
 2434              	
 2435              	/******************************************
 2436              	    $"|	( -- a u )
 2437              	 	Run time routine compiled by _". 
 2438              		Return address of a compiled string.
 2439              	hidden word used by compiler
 2440              	*****************************************/
 2441              	STRQP:
 2442 425c 504700BF 		_NEST
 2443 4260 2D420000 		_ADR	DOSTR
 2444 4264 FB2C0000 		_UNNEST			// force a call to dostr
 2445              	
 2446              	
 2447              	/**********************
 2448              	    ."|	( -- )
 2449              	 	Run time routine of ." 
 2450              		Output a compiled string.
 2451              	hidden word used by compiler
 2452              	*****************************/
 2453              	DOTQP:
 2454 4268 504700BF 		_NEST
 2455 426c 2D420000 		_ADR	DOSTR
 2456 4270 D9410000 		_ADR	TYPEE 
 2457 4274 FB2C0000 		_UNNEST
 2458              	
 2459              	/*************************
 2460              		LPAD  ( n+ -- )
 2461              		emit n spaceS + 
 2462              		base character  
 2463              		16 -> $
 2464              		 2 -> %
 2465              		 other -> none 
 2466              	*************************/
 2467              	LPAD:
 2468 4278 504700BF 		_NEST 
 2469 427c 2D360000 		_ADR BCHR 
 2470 4280 B52F0000 		_ADR  AT 
 2471 4284 5F2F0000 		_QBRAN 3f 
 2471      F0420000 
 2472 428c 15360000 		_ADR BASE 
 2473 4290 B52F0000 		_ADR AT 
 2474 4294 A9300000 		_ADR DUPP 
 2475 4298 1F2F0000 		_DOLIT 16
 2475      10000000 
 2476 42a0 35340000 		_ADR EQUAL 
 2477 42a4 5F2F0000 		_QBRAN 1f
 2477      CC420000 
 2478 42ac 99300000 		_ADR DROP 
 2479 42b0 1F2F0000 		_DOLIT '$'
 2479      24000000 
 2480 42b8 B9300000 	0:	_ADR  SWAP 
 2481 42bc 15320000 		_ADR  ONEM 
ARM GAS  forth.s 			page 155


 2482 42c0 A1410000 		_ADR  SPACS 
 2483 42c4 BD2D0000 		_ADR  EMIT 
 2484 42c8 FB2C0000 		_UNNEST 
 2485 42cc 1F2F0000 	1:  _DOLIT 2 
 2485      02000000 
 2486 42d4 35340000 		_ADR EQUAL 
 2487 42d8 5F2F0000 		_QBRAN 3f
 2487      F0420000 
 2488 42e0 1F2F0000 		_DOLIT '%'
 2488      25000000 
 2489 42e8 872F0000 		_BRAN 0b   	
 2489      B8420000 
 2490 42f0 A1410000 	3:	_ADR  SPACS 
 2491 42f4 FB2C0000 		_UNNEST 
 2492              	
 2493              	
 2494              	/******************************
 2495              	    .R	  ( n +n -- )
 2496              	 	Display an integer in a 
 2497              		field of n columns, 
 2498              		right justified.
 2499              	*******************************/
 2500 42f8 08420000 		_HEADER DOTR,2,".R"
 2500      022E5200 
 2501 4300 504700BF 		_NEST
 2502 4304 25300000 		_ADR	TOR
 2503 4308 21390000 		_ADR    STOD 
 2504 430c E9430000 		_ADR	DTOA 
 2505 4310 E12F0000 		_ADR	RFROM
 2506 4314 E9300000 		_ADR	OVER
 2507 4318 B9310000 		_ADR	SUBB
 2508 431c 79420000 		_ADR    LPAD  
 2509 4320 D9410000 		_ADR	TYPEE
 2510 4324 FB2C0000 		_UNNEST
 2511              	
 2512              	
 2513              	/*************************
 2514              	    U.R	 ( u +n -- )
 2515              	 	Display an unsigned 
 2516              		integer in n column, 
 2517              		right justified.
 2518              	***************************/
 2519 4328 FC420000 		_HEADER UDOTR,3,"U.R"
 2519      03552E52 
 2520 4330 504700BF 		_NEST
 2521 4334 25300000 		_ADR    TOR 
 2522 4338 1F2F0000 		_DOLIT  0
 2522      00000000 
 2523 4340 E9430000 		_ADR    DTOA 
 2524 4344 E12F0000 		_ADR	RFROM
 2525 4348 E9300000 		_ADR	OVER
 2526 434c B9310000 		_ADR	SUBB
 2527 4350 79420000 		_ADR    LPAD  
 2528 4354 D9410000 		_ADR	TYPEE
 2529 4358 FB2C0000 		_UNNEST
 2530              	
 2531              	
ARM GAS  forth.s 			page 156


 2532              	/************************
 2533              	    U.	  ( u -- )
 2534              	 	Display an unsigned 
 2535              		integer in free format.
 2536              	***************************/
 2537 435c 2C430000 		_HEADER UDOT,2,"U."
 2537      02552E00 
 2538 4364 504700BF 		_NEST
 2539 4368 1F2F0000 		_DOLIT  0 
 2539      00000000 
 2540 4370 CD3D0000 		_ADR	BDIGS
 2541 4374 393E0000 		_ADR	DIGS
 2542 4378 953E0000 		_ADR	EDIGS
 2543 437c 1F2F0000 		_DOLIT  1 
 2543      01000000 
 2544 4384 79420000 		_ADR	LPAD  
 2545 4388 D9410000 		_ADR	TYPEE
 2546 438c FB2C0000 		_UNNEST
 2547              	
 2548              	
 2549              	/************************
 2550              	    .	   ( w -- )
 2551              	 	Display an integer 
 2552              		in free format, 
 2553              		preceeded by a space.
 2554              	**************************/
 2555 4390 60430000 		_HEADER DOT,1,"."
 2555      012E00BF 
 2556 4398 504700BF 		_NEST
 2557 439c 85410000 		_ADR    SPACE 
 2558 43a0 15360000 		_ADR	BASE
 2559 43a4 B52F0000 		_ADR	AT
 2560 43a8 1F2F0000 	1:	_DOLIT  10
 2560      0A000000 
 2561 43b0 51310000 		_ADR	XORR	// decimal base?
 2562 43b4 5F2F0000 		_QBRAN	DOT1
 2562      C4430000 
 2563 43bc 65430000 		_ADR	UDOT    // no,display unsigned
 2564 43c0 FB2C0000 		_UNNEST			
 2565              	DOT1:
 2566 43c4 21390000 		_ADR    STOD 
 2567 43c8 E9430000 	    _ADR	DTOA
 2568 43cc 1F2F0000 		_DOLIT  1 
 2568      01000000 
 2569 43d4 79420000 		_ADR	LPAD  
 2570 43d8 D9410000 	1:	_ADR	TYPEE
 2571 43dc FB2C0000 		_UNNEST			// yes, display signed
 2572              	
 2573              	
 2574              	/*************************
 2575              	  D>A ( d -- p u )
 2576              	  convert double integer to 
 2577              	  ASCII string in pad  
 2578              	input:
 2579              		d    int64 to convert 
 2580              	output:
 2581              		p     pointer to string  
ARM GAS  forth.s 			page 157


 2582              		u     string length 
 2583              	**************************/
 2584 43e0 94430000 		_HEADER DTOA,3,"D>A" 
 2584      03443E41 
 2585 43e8 504700BF 		_NEST
 2586 43ec A9300000 	    _ADR DUPP 
 2587 43f0 25300000 		_ADR TOR 
 2588 43f4 51330000 		_ADR DABS 
 2589 43f8 CD3D0000 		_ADR BDIGS
 2590 43fc 393E0000 		_ADR DIGS 
 2591 4400 E12F0000 		_ADR RFROM 
 2592 4404 6D3E0000 		_ADR SIGN  
 2593 4408 953E0000 		_ADR EDIGS 
 2594 440c FB2C0000 		_UNNEST 
 2595              	
 2596              	
 2597              	/*************************
 2598              	   D. ( d -- )
 2599              	   display double integer 
 2600              	**************************/
 2601 4410 E4430000 		_HEADER DDOT,2,"D."
 2601      02442E00 
 2602 4418 504700BF 		_NEST
 2603 441c 85410000 		_ADR SPACE 
 2604 4420 E9430000 		_ADR DTOA 
 2605 4424 1F2F0000 		_DOLIT 1
 2605      01000000 
 2606 442c 79420000 		_ADR LPAD 
 2607 4430 D9410000 		_ADR TYPEE
 2608 4434 FB2C0000 		_UNNEST 
 2609              	
 2610              	
 2611              	
 2612              	/***********************
 2613              		H. ( w -- )
 2614              		display integer 
 2615              		in hexadecimal 
 2616              	*********************/
 2617 4438 14440000 		_HEADER HDOT,2,"H."
 2617      02482E00 
 2618 4440 504700BF 		_NEST 
 2619 4444 15360000 		_ADR BASE
 2620 4448 B52F0000 		_ADR AT 
 2621 444c B9300000 		_ADR SWAP
 2622 4450 E93E0000 		_ADR HEX
 2623 4454 1F2F0000 		_DOLIT 0 
 2623      00000000 
 2624 445c CD3D0000 		_ADR BDIGS
 2625 4460 393E0000 		_ADR DIGS
 2626 4464 953E0000 		_ADR EDIGS
 2627 4468 85410000 		_ADR SPACE
 2628 446c 1F2F0000 		_DOLIT '$'
 2628      24000000 
 2629 4474 BD2D0000 		_ADR EMIT 
 2630 4478 D9410000 		_ADR TYPEE
 2631 447c 15360000 		_ADR BASE
 2632 4480 A12F0000 		_ADR STORE  
ARM GAS  forth.s 			page 158


 2633 4484 FB2C0000 		_UNNEST 
 2634              	
 2635              	
 2636              	/***********************
 2637              	    ?	   ( a -- )
 2638              	 	Display the contents
 2639              		in a memory cell.
 2640              	*************************/
 2641 4488 3C440000 		_HEADER QUEST,1,"?"
 2641      013F00BF 
 2642 4490 504700BF 		_NEST
 2643 4494 B52F0000 		_ADR	AT
 2644 4498 99430000 		_ADR	DOT
 2645 449c FB2C0000 		_UNNEST
 2646              	
 2647              	/**************
 2648              	  Parsing
 2649              	***************/
 2650              	
 2651              	/*********************************************
 2652              	    parse	( b u c -- b u delta //  string> )
 2653              	 	Scan word delimited by c. 
 2654              		Return found string and its offset.
 2655              	hidden word used by PARSE
 2656              	**********************************************/
 2657              	PARS:
 2658 44a0 504700BF 		_NEST
 2659 44a4 39360000 		_ADR	TEMP
 2660 44a8 A12F0000 		_ADR	STORE
 2661 44ac E9300000 		_ADR	OVER
 2662 44b0 25300000 		_ADR	TOR
 2663 44b4 A9300000 		_ADR	DUPP
 2664 44b8 5F2F0000 		_QBRAN	PARS8
 2664      B4450000 
 2665 44c0 15320000 		_ADR	ONEM
 2666 44c4 39360000 		_ADR	TEMP
 2667 44c8 B52F0000 		_ADR	AT
 2668 44cc 65320000 		_ADR	BLANK
 2669 44d0 35340000 		_ADR	EQUAL
 2670 44d4 5F2F0000 		_QBRAN	PARS3
 2670      28450000 
 2671 44dc 25300000 		_ADR	TOR
 2672              	PARS1:
 2673 44e0 65320000 		_ADR	BLANK
 2674 44e4 E9300000 		_ADR	OVER
 2675 44e8 D52F0000 		_ADR	CAT	 // skip leading blanks 
 2676 44ec B9310000 		_ADR	SUBB
 2677 44f0 19310000 		_ADR	ZLESS
 2678 44f4 B9330000 		_ADR	INVER
 2679 44f8 5F2F0000 		_QBRAN	PARS2
 2679      24450000 
 2680 4500 05320000 		_ADR	ONEP
 2681 4504 412F0000 		_DONXT	PARS1
 2681      E0440000 
 2682 450c E12F0000 		_ADR	RFROM
 2683 4510 99300000 		_ADR	DROP
 2684 4514 1F2F0000 		_DOLIT	0
ARM GAS  forth.s 			page 159


 2684      00000000 
 2685 451c A9300000 		_ADR	DUPP
 2686 4520 FB2C0000 		_UNNEST
 2687              	PARS2:
 2688 4524 E12F0000 		_ADR	RFROM
 2689              	PARS3:
 2690 4528 E9300000 		_ADR	OVER
 2691 452c B9300000 		_ADR	SWAP
 2692 4530 25300000 		_ADR	TOR
 2693              	PARS4:
 2694 4534 39360000 		_ADR	TEMP
 2695 4538 B52F0000 		_ADR	AT
 2696 453c E9300000 		_ADR	OVER
 2697 4540 D52F0000 		_ADR	CAT
 2698 4544 B9310000 		_ADR	SUBB // scan for delimiter
 2699 4548 39360000 		_ADR	TEMP
 2700 454c B52F0000 		_ADR	AT
 2701 4550 65320000 		_ADR	BLANK
 2702 4554 35340000 		_ADR	EQUAL
 2703 4558 5F2F0000 		_QBRAN	PARS5
 2703      64450000 
 2704 4560 19310000 		_ADR	ZLESS
 2705              	PARS5:
 2706 4564 5F2F0000 		_QBRAN	PARS6
 2706      88450000 
 2707 456c 05320000 		_ADR	ONEP
 2708 4570 412F0000 		_DONXT	PARS4
 2708      34450000 
 2709 4578 A9300000 		_ADR	DUPP
 2710 457c 25300000 		_ADR	TOR
 2711 4580 872F0000 		_BRAN	PARS7
 2711      9C450000 
 2712              	PARS6:
 2713 4588 E12F0000 		_ADR	RFROM
 2714 458c 99300000 		_ADR	DROP
 2715 4590 A9300000 		_ADR	DUPP
 2716 4594 05320000 		_ADR	ONEP
 2717 4598 25300000 		_ADR	TOR
 2718              	PARS7:
 2719 459c E9300000 		_ADR	OVER
 2720 45a0 B9310000 		_ADR	SUBB
 2721 45a4 E12F0000 		_ADR	RFROM
 2722 45a8 E12F0000 		_ADR	RFROM
 2723 45ac B9310000 		_ADR	SUBB
 2724 45b0 FB2C0000 		_UNNEST
 2725              	PARS8:
 2726 45b4 E9300000 		_ADR	OVER
 2727 45b8 E12F0000 		_ADR	RFROM
 2728 45bc B9310000 		_ADR	SUBB
 2729 45c0 FB2C0000 		_UNNEST
 2730              	
 2731              	/************************************
 2732              	    PARSE	( c -- b u //  string> )
 2733              	 	Scan input stream and return 
 2734              		counted string delimited by c.
 2735              	************************************/
 2736 45c4 8C440000 		_HEADER PARSE,5,"PARSE"
ARM GAS  forth.s 			page 160


 2736      05504152 
 2736      534500BF 
 2737 45d0 504700BF 		_NEST
 2738 45d4 25300000 		_ADR	TOR
 2739 45d8 193C0000 		_ADR	TIB
 2740 45dc 65360000 		_ADR	INN
 2741 45e0 B52F0000 		_ADR	AT
 2742 45e4 A9310000 		_ADR	PLUS			// current input buffer pointer
 2743 45e8 7D360000 		_ADR	NTIB
 2744 45ec B52F0000 		_ADR	AT
 2745 45f0 65360000 		_ADR	INN
 2746 45f4 B52F0000 		_ADR	AT
 2747 45f8 B9310000 		_ADR	SUBB			// remaining count
 2748 45fc E12F0000 		_ADR	RFROM
 2749 4600 A1440000 		_ADR	PARS
 2750 4604 65360000 		_ADR	INN
 2751 4608 F5340000 		_ADR	PSTOR
 2752 460c FB2C0000 		_UNNEST
 2753              	
 2754              	/*******************************
 2755              	    .(	  ( -- )
 2756              	 	Output following string 
 2757              		up to next ) .
 2758              	******************************/
 2759 4610 C8450000 		_HEADER DOTPR,2,".("
 2759      022E2800 
 2760 4618 504700BF 		_NEST
 2761 461c 1F2F0000 		_DOLIT	')'
 2761      29000000 
 2762 4624 D1450000 		_ADR	PARSE
 2763 4628 D9410000 		_ADR	TYPEE
 2764 462c FB2C0000 		_UNNEST
 2765              	
 2766              	/************************
 2767              	    (	   ( -- )
 2768              	 	Ignore following 
 2769              		string up to next )
 2770              		A comment.
 2771              	************************/
 2772 4630 14460000 		_HEADER PAREN,IMEDD+1,"("
 2772      812800BF 
 2773 4638 504700BF 		_NEST
 2774 463c 1F2F0000 		_DOLIT	')'
 2774      29000000 
 2775 4644 D1450000 		_ADR	PARSE
 2776 4648 F5320000 		_ADR	DDROP
 2777 464c FB2C0000 		_UNNEST
 2778              	
 2779              	/*******************
 2780              	    \	   ( -- )
 2781              	 	Ignore following 
 2782              		text till the 
 2783              		end of line.
 2784              	********************/
 2785 4650 34460000 		_HEADER BKSLA,IMEDD+1,"\\"
 2785      815C00BF 
 2786 4658 504700BF 		_NEST
ARM GAS  forth.s 			page 161


 2787 465c 7D360000 		_ADR	NTIB
 2788 4660 B52F0000 		_ADR	AT
 2789 4664 65360000 		_ADR	INN
 2790 4668 A12F0000 		_ADR	STORE
 2791 466c FB2C0000 		_UNNEST
 2792              	
 2793              	/******************************
 2794              	    CHAR	( -- c )
 2795              	 	Parse next word and
 2796              		return its first character.
 2797              	*******************************/
 2798 4670 54460000 		_HEADER CHAR,4,"CHAR"
 2798      04434841 
 2798      520000BF 
 2799 467c 504700BF 		_NEST
 2800 4680 65320000 		_ADR	BLANK
 2801 4684 D1450000 		_ADR	PARSE
 2802 4688 99300000 		_ADR	DROP
 2803 468c D52F0000 		_ADR	CAT
 2804 4690 FB2C0000 		_UNNEST
 2805              	
 2806              	/**********************************
 2807              		[CHAR] ( -- c )
 2808              		immediate version of CHAR 
 2809              	**********************************/
 2810 4694 74460000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2810      C65B4348 
 2810      41525D00 
 2811 46a0 504700BF 		_NEST 
 2812 46a4 7D460000 		_ADR CHAR
 2813 46a8 994E0000 		_ADR LITER 
 2814 46ac FB2C0000 		_UNNEST 
 2815              	
 2816              	/**********************************
 2817              	    WORD	( c -- a //  string> )
 2818              	 	Parse a word from input stream
 2819              		and copy it to code dictionary.
 2820              	***********************************/
 2821 46b0 98460000 		_HEADER WORDD,4,"WORD"
 2821      04574F52 
 2821      440000BF 
 2822 46bc 504700BF 		_NEST
 2823 46c0 D1450000 		_ADR	PARSE
 2824 46c4 E13B0000 		_ADR	HERE
 2825 46c8 45320000 		_ADR	CELLP
 2826 46cc 0D3D0000 		_ADR	PACKS
 2827 46d0 FB2C0000 		_UNNEST
 2828              	
 2829              	/********************************
 2830              	    TOKEN	( -- a //  string> )
 2831              	 	Parse a word from input 
 2832              		stream and copy it to 
 2833              		name dictionary.
 2834              	*********************************/
 2835 46d4 B4460000 		_HEADER TOKEN,5,"TOKEN"
 2835      05544F4B 
 2835      454E00BF 
ARM GAS  forth.s 			page 162


 2836 46e0 504700BF 		_NEST
 2837 46e4 65320000 		_ADR	BLANK
 2838 46e8 BD460000 		_ADR	WORDD
 2839 46ec D5480000 		_ADR	UPPER 
 2840 46f0 FB2C0000 		_UNNEST
 2841              	
 2842              	/**********************
 2843              	  Dictionary search
 2844              	***********************/
 2845              	
 2846              	/*************************
 2847              	    NAME>	( na -- ca )
 2848              	 	Return a code address
 2849              		given a name address.
 2850              	**************************/
 2851 46f4 D8460000 		_HEADER NAMET,5,"NAME>"
 2851      054E414D 
 2851      453E00BF 
 2852 4700 504700BF 		_NEST
 2853 4704 49350000 		_ADR	COUNT
 2854 4708 1F2F0000 		_DOLIT	0x1F
 2854      1F000000 
 2855 4710 29310000 		_ADR	ANDD
 2856 4714 A9310000 		_ADR	PLUS
 2857 4718 213B0000 		_ADR	ALGND
 2858 471c FB2C0000 		_UNNEST
 2859              	
 2860              	/***************************************
 2861              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2862              	 	Compare u bytes in two strings. 
 2863              		Return 0 if identical.
 2864              	
 2865              	  Picatout 2020-12-01, 
 2866              	    Because of problem with .align 
 2867              		directive that doesn't fill 
 2868              		with zero's I had to change 
 2869              		the "SAME?" and "SEARCH" 
 2870              	 	words  to do a byte by byte comparison. 
 2871              	****************************************/
 2872 4720 F8460000 		_HEADER SAMEQ,5,"SAME?"
 2872      0553414D 
 2872      453F00BF 
 2873 472c 504700BF 		_NEST
 2874 4730 25300000 		_ADR	TOR
 2875 4734 872F0000 		_BRAN	SAME2
 2875      78470000 
 2876              	SAME1:
 2877 473c E9300000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2878 4740 11300000 		_ADR	RAT   // a1 a2 a1 u 
 2879 4744 A9310000 		_ADR	PLUS  // a1 a2 a1+u 
 2880 4748 D52F0000 		_ADR	CAT	   // a1 a2 c1    		
 2881 474c E9300000 		_ADR	OVER  // a1 a2 c1 a2 
 2882 4750 11300000 		_ADR	RAT    
 2883 4754 A9310000 		_ADR	PLUS    
 2884 4758 D52F0000 		_ADR	CAT	  // a1 a2 c1 c2
 2885 475c B9310000 		_ADR	SUBB  
 2886 4760 B9320000 		_ADR	QDUP
ARM GAS  forth.s 			page 163


 2887 4764 5F2F0000 		_QBRAN	SAME2
 2887      78470000 
 2888 476c E12F0000 		_ADR	RFROM
 2889 4770 99300000 		_ADR	DROP
 2890 4774 FB2C0000 		_UNNEST	// strings not equal
 2891              	SAME2:
 2892 4778 412F0000 		_DONXT	SAME1
 2892      3C470000 
 2893 4780 1F2F0000 		_DOLIT	0
 2893      00000000 
 2894 4788 FB2C0000 		_UNNEST	// strings equal
 2895              	
 2896              	/***********************************
 2897              	    SEARCH	( a na -- ca na | a F )
 2898              	 	Search a vocabulary for a string.
 2899              		Return ca and na if succeeded.
 2900              	hidden word used by NAME?
 2901              	
 2902              	  Picatout 2020-12-01,  
 2903              		 Modified from original. 
 2904              	   See comment for word "SAME?" 
 2905              	************************************/
 2906              	SEARCH:
 2907 478c 504700BF 		_NEST
 2908 4790 B9300000 		_ADR	SWAP			// na a	
 2909 4794 49350000 		_ADR	COUNT			// na a+1 count
 2910 4798 A9300000 		_ADR	DUPP 
 2911 479c 39360000 		_ADR	TEMP
 2912 47a0 A12F0000 		_ADR	STORE			// na a+1 count 
 2913 47a4 25300000 		_ADR  TOR		// na a+1  R: count  
 2914 47a8 B9300000 		_ADR	SWAP			// a+1 na
 2915              	SEARCH1:
 2916 47ac A9300000 		_ADR	DUPP			// a+1 na na
 2917 47b0 5F2F0000 		_QBRAN	SEARCH6	// end of vocabulary
 2917      04480000 
 2918 47b8 A9300000 		_ADR	DUPP			// a+1 na na
 2919 47bc D52F0000 		_ADR	CAT			// a+1 na name1
 2920 47c0 1F2F0000 		_DOLIT	MASKK
 2920      1FFFFFFF 
 2921 47c8 29310000 		_ADR	ANDD
 2922 47cc 11300000 		_ADR	RAT			// a+1 na name1 count 
 2923 47d0 51310000 		_ADR	XORR			// a+1 na,  same length?
 2924 47d4 5F2F0000 		_QBRAN	SEARCH2
 2924      EC470000 
 2925 47dc 55320000 		_ADR	CELLM			// a+1 la
 2926 47e0 B52F0000 		_ADR	AT			// a+1 next_na
 2927 47e4 872F0000 		_BRAN	SEARCH1			// try next word
 2927      AC470000 
 2928              	SEARCH2:   
 2929 47ec 05320000 		_ADR	ONEP			// a+1 na+1
 2930 47f0 39360000 		_ADR	TEMP
 2931 47f4 B52F0000 		_ADR	AT			// a+1 na+1 count
 2932 47f8 2D470000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2933              	SEARCH3:	
 2934 47fc 872F0000 		_BRAN	SEARCH4
 2934      1C480000 
 2935              	SEARCH6:	
ARM GAS  forth.s 			page 164


 2936 4804 E12F0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2937 4808 99300000 		_ADR	DROP			// a+1 0
 2938 480c B9300000 		_ADR	SWAP			// 0 a+1
 2939 4810 15320000 		_ADR	ONEM			// 0 a
 2940 4814 B9300000 		_ADR	SWAP			// a 0 
 2941 4818 FB2C0000 		_UNNEST			// return without a match
 2942              	SEARCH4:	
 2943 481c 5F2F0000 		_QBRAN	SEARCH5			// a+1 na+1
 2943      38480000 
 2944 4824 15320000 		_ADR	ONEM			// a+1 na
 2945 4828 55320000 		_ADR	CELLM			// a+4 la
 2946 482c B52F0000 		_ADR	AT			// a+1 next_na
 2947 4830 872F0000 		_BRAN	SEARCH1			// compare next name
 2947      AC470000 
 2948              	SEARCH5:	
 2949 4838 E12F0000 		_ADR	RFROM			// a+1 na+1 count
 2950 483c 99300000 		_ADR	DROP			// a+1 na+1
 2951 4840 B9300000 		_ADR	SWAP			// na+1 a+1
 2952 4844 99300000 		_ADR	DROP			// na+1
 2953 4848 15320000 		_ADR	ONEM			// na
 2954 484c A9300000 		_ADR	DUPP			// na na
 2955 4850 01470000 		_ADR	NAMET			// na ca
 2956 4854 B9300000 		_ADR	SWAP			// ca na
 2957 4858 FB2C0000 		_UNNEST			//  return with a match
 2958              	
 2959              	/********************************
 2960              	    NAME?	( a -- ca na | a F )
 2961              	 	Search all context vocabularies 
 2962              		for a string.
 2963              	***********************************/
 2964 485c 24470000 		_HEADER NAMEQ,5,"NAME?"
 2964      054E414D 
 2964      453F00BF 
 2965 4868 504700BF 		_NEST
 2966 486c C1360000 		_ADR	CNTXT
 2967 4870 B52F0000 		_ADR	AT
 2968 4874 8D470000 		_ADR	SEARCH
 2969 4878 FB2C0000 		_UNNEST
 2970              	
 2971              	/********************
 2972              	  console input
 2973              	********************/
 2974              	
 2975              	/****************************
 2976              		ASCIZ ( a -- a+ )
 2977              		convert counted string to 
 2978              		null terminated string 
 2979              		in pad.
 2980              	*****************************/
 2981 487c 60480000 		_HEADER ASCIZ,5,"ASCIZ" 
 2981      05415343 
 2981      495A00BF 
 2982 4888 504700BF 		_NEST 
 2983 488c 49350000 		_ADR COUNT
 2984 4890 A9300000 		_ADR DUPP
 2985 4894 25300000 		_ADR TOR 
 2986 4898 F93B0000 		_ADR PAD 
ARM GAS  forth.s 			page 165


 2987 489c B9300000 		_ADR SWAP
 2988 48a0 A53C0000 		_ADR MOVE  
 2989 48a4 F93B0000 		_ADR PAD 
 2990 48a8 E12F0000 		_ADR RFROM
 2991 48ac A9310000 		_ADR PLUS 
 2992 48b0 1F2F0000 		_DOLIT 0 
 2992      00000000 
 2993 48b8 B9300000 		_ADR SWAP  
 2994 48bc C12F0000 		_ADR CSTOR
 2995 48c0 F93B0000 		_ADR PAD   
 2996 48c4 FB2C0000 		_UNNEST 
 2997              	
 2998              	/***********************
 2999              		UPPER (cstring -- cstring )
 3000              		convert to upper case in situ
 3001              	*******************************/
 3002 48c8 80480000 		_HEADER UPPER,5,"UPPER"
 3002      05555050 
 3002      455200BF 
 3003 48d4 504700BF 		_NEST 
 3004 48d8 A9300000 		_ADR DUPP 
 3005 48dc 25300000 		_ADR TOR 
 3006 48e0 49350000 		_ADR COUNT
 3007 48e4 1F2F0000 		_DOLIT 0x1f
 3007      1F000000 
 3008 48ec 29310000 		_ADR ANDD
 3009 48f0 25300000 		_ADR TOR 
 3010 48f4 872F0000 		_BRAN 3f
 3010      48490000 
 3011 48fc A9300000 	1:  _ADR DUPP 
 3012 4900 49350000 		_ADR COUNT 
 3013 4904 A9300000 		_ADR DUPP 
 3014 4908 1F2F0000 		_DOLIT 'a'-1
 3014      60000000 
 3015 4910 B5340000 		_ADR GREAT
 3016 4914 5F2F0000 		_QBRAN 2f 
 3016      40490000 
 3017 491c A9300000 		_ADR DUPP 
 3018 4920 1F2F0000 		_DOLIT 'z'+1 
 3018      7B000000 
 3019 4928 85340000 		_ADR LESS 
 3020 492c 5F2F0000 		_QBRAN 2f 
 3020      40490000 
 3021 4934 1F2F0000 		_DOLIT 0x5f  
 3021      5F000000 
 3022 493c 29310000 		_ADR ANDD
 3023 4940 CD320000 	2:	_ADR ROT
 3024 4944 C12F0000 		_ADR CSTOR
 3025 4948 412F0000 	3:  _DONXT 1b
 3025      FC480000 
 3026 4950 99300000 		_ADR DROP 
 3027 4954 E12F0000 		_ADR RFROM
 3028 4958 FB2C0000 		_UNNEST 
 3029              	
 3030              	/**************************************
 3031              	   BKSP  ( bot eot cur -- bot eot cur )
 3032              	   Move cursor left by one character.
ARM GAS  forth.s 			page 166


 3033              	hidden word used by KTAP
 3034              	***************************************/
 3035              	BKSP:
 3036 495c 504700BF 		_NEST
 3037 4960 25300000 		_ADR	TOR
 3038 4964 E9300000 		_ADR	OVER
 3039 4968 E12F0000 		_ADR	RFROM
 3040 496c B9300000 		_ADR	SWAP
 3041 4970 E9300000 		_ADR	OVER
 3042 4974 51310000 		_ADR	XORR
 3043 4978 5F2F0000 		_QBRAN	BACK1
 3043      A4490000 
 3044 4980 1F2F0000 		_DOLIT	BKSPP
 3044      08000000 
 3045 4988 BD2D0000 		_ADR	EMIT
 3046 498c 15320000 		_ADR	ONEM
 3047 4990 65320000 		_ADR	BLANK
 3048 4994 BD2D0000 		_ADR	EMIT
 3049 4998 1F2F0000 		_DOLIT	BKSPP
 3049      08000000 
 3050 49a0 BD2D0000 		_ADR	EMIT
 3051              	BACK1:
 3052 49a4 FB2C0000 		  _UNNEST
 3053              	
 3054              	/****************************************
 3055              	   TAP	 ( bot eot cur c -- bot eot cur )
 3056              	   Accept and echo the key stroke 
 3057              	   and bump the cursor.
 3058              	hidden word used by KTAP 
 3059              	****************************************/
 3060              	TAP:
 3061 49a8 504700BF 		_NEST
 3062 49ac A9300000 		_ADR	DUPP
 3063 49b0 BD2D0000 		_ADR	EMIT
 3064 49b4 E9300000 		_ADR	OVER
 3065 49b8 C12F0000 		_ADR	CSTOR
 3066 49bc 05320000 		_ADR	ONEP
 3067 49c0 FB2C0000 		_UNNEST
 3068              	
 3069              	
 3070              	/*******************************************
 3071              	    kTAP	( bot eot cur c -- bot eot cur )
 3072              	 	Process a key stroke, CR or backspace.
 3073              	hidden word used by ACCEPT 
 3074              	*******************************************/
 3075              	KTAP:
 3076              	TTAP:
 3077 49c4 504700BF 		_NEST
 3078 49c8 A9300000 		_ADR	DUPP
 3079 49cc 1F2F0000 		_DOLIT	CRR
 3079      0D000000 
 3080 49d4 51310000 		_ADR	XORR
 3081 49d8 5F2F0000 		_QBRAN  KTAP2
 3081      084A0000 
 3082 49e0 1F2F0000 		_DOLIT	BKSPP
 3082      08000000 
 3083 49e8 51310000 		_ADR	XORR
ARM GAS  forth.s 			page 167


 3084 49ec 5F2F0000 		_QBRAN	KTAP1
 3084      004A0000 
 3085 49f4 65320000 		_ADR	BLANK
 3086 49f8 A9490000 		_ADR	TAP
 3087 49fc FB2C0000 		_UNNEST
 3088              	//	.word	0			// patch
 3089              	KTAP1:
 3090 4a00 5D490000 		_ADR	BKSP
 3091 4a04 FB2C0000 		_UNNEST
 3092              	KTAP2:
 3093 4a08 99300000 		_ADR	DROP
 3094 4a0c B9300000 		_ADR	SWAP
 3095 4a10 99300000 		_ADR	DROP
 3096 4a14 A9300000 		_ADR	DUPP
 3097 4a18 FB2C0000 		_UNNEST
 3098              	
 3099              	/************************************
 3100              	    ACCEPT	( b u -- b u )
 3101              	 	Accept characters to input 
 3102              		buffer. Return with actual count.
 3103              	*************************************/
 3104 4a1c CC480000 		_HEADER ACCEP,6,"ACCEPT"
 3104      06414343 
 3104      45505400 
 3105 4a28 504700BF 		_NEST
 3106 4a2c E9300000 		_ADR	OVER
 3107 4a30 A9310000 		_ADR	PLUS
 3108 4a34 E9300000 		_ADR	OVER
 3109              	ACCP1:
 3110 4a38 1D330000 		_ADR	DDUP
 3111 4a3c 51310000 		_ADR	XORR
 3112 4a40 5F2F0000 		_QBRAN	ACCP4
 3112      804A0000 
 3113 4a48 992D0000 		_ADR	KEY
 3114 4a4c A9300000 		_ADR	DUPP
 3115 4a50 65320000 		_ADR	BLANK
 3116 4a54 1F2F0000 		_DOLIT 127
 3116      7F000000 
 3117 4a5c B1370000 		_ADR	WITHI
 3118 4a60 5F2F0000 		_QBRAN	ACCP2
 3118      744A0000 
 3119 4a68 A9490000 		_ADR	TAP
 3120 4a6c 872F0000 		_BRAN	ACCP3
 3120      784A0000 
 3121              	ACCP2:
 3122 4a74 C5490000 		_ADR	KTAP
 3123              	ACCP3:	  
 3124 4a78 872F0000 		_BRAN	ACCP1
 3124      384A0000 
 3125              	ACCP4:
 3126 4a80 99300000 		_ADR	DROP
 3127 4a84 E9300000 		_ADR	OVER
 3128 4a88 B9310000 		_ADR	SUBB
 3129 4a8c FB2C0000 		_UNNEST
 3130              	
 3131              	/*****************************
 3132              	    QUERY	( -- )
ARM GAS  forth.s 			page 168


 3133              	 	Accept input stream 
 3134              		to terminal input buffer.
 3135              	******************************/
 3136 4a90 204A0000 		_HEADER QUERY,5,"QUERY"
 3136      05515545 
 3136      525900BF 
 3137 4a9c 504700BF 		_NEST
 3138 4aa0 193C0000 		_ADR	TIB
 3139 4aa4 1F2F0000 		_DOLIT 80
 3139      50000000 
 3140 4aac 294A0000 		_ADR	ACCEP
 3141 4ab0 7D360000 		_ADR	NTIB
 3142 4ab4 A12F0000 		_ADR	STORE
 3143 4ab8 99300000 		_ADR	DROP
 3144 4abc 1F2F0000 		_DOLIT	0
 3144      00000000 
 3145 4ac4 65360000 		_ADR	INN
 3146 4ac8 A12F0000 		_ADR	STORE
 3147 4acc FB2C0000 		_UNNEST
 3148              	
 3149              	/********************
 3150              	  Error handling
 3151              	********************/
 3152              	
 3153              	/*********************
 3154              	    ABORT	( a -- )
 3155              	 	Reset data stack 
 3156              		and jump to QUIT.
 3157              	**********************/
 3158 4ad0 944A0000 		_HEADER ABORT,5,"ABORT"
 3158      0541424F 
 3158      525400BF 
 3159 4adc 504700BF 		_NEST
 3160              	ABORT1: 
 3161 4ae0 BD4B0000 		_ADR    LBRAC  
 3162 4ae4 994C0000 		_ADR	PRESE
 3163 4ae8 872F0000 		_BRAN	QUIT
 3163      D04C0000 
 3164              	
 3165              	
 3166              	/*******************************
 3167              		PRT_ABORT ( a -- )
 3168              	    print message and abort 
 3169              	input:
 3170              		a   address of counted string 	
 3171              	
 3172              	hidden word 
 3173              	*******************************/
 3174              	PRT_ABORT:
 3175 4af0 504700BF 		_NEST 
 3176 4af4 85410000 		_ADR SPACE 
 3177 4af8 49350000 		_ADR COUNT 
 3178 4afc D9410000 		_ADR TYPEE 
 3179 4b00 1F2F0000 		_DOLIT '?'
 3179      3F000000 
 3180 4b08 BD2D0000 		_ADR    EMIT 
 3181 4b0c 0D420000 		_ADR    CR 
ARM GAS  forth.s 			page 169


 3182 4b10 872F0000 		_BRAN   ABORT1 
 3182      E04A0000 
 3183              	
 3184              	
 3185              	
 3186              	
 3187              	/*******************************
 3188              	    _abort"	( f -- )
 3189              	 	Run time routine of ABORT"
 3190              		Abort with a message.
 3191              	hidden used by compiler 
 3192              	********************************/
 3193              	ABORQ:
 3194 4b18 504700BF 		_NEST
 3195 4b1c 2D420000 		_ADR	DOSTR
 3196 4b20 CD320000 		_ADR	ROT  
 3197 4b24 5F2F0000 		_QBRAN	1f	// error flag
 3197      484B0000 
 3198 4b2c 85410000 		_ADR	SPACE
 3199 4b30 D9410000 		_ADR	TYPEE
 3200 4b34 1F2F0000 		_DOLIT	0X3F
 3200      3F000000 
 3201 4b3c BD2D0000 		_ADR	EMIT
 3202 4b40 0D420000 		_ADR	CR
 3203 4b44 E14A0000 		_ADR    ABORT1
 3204              	1:
 3205 4b48 F5320000 		_ADR	DDROP
 3206 4b4c FB2C0000 		_UNNEST			// drop message
 3207              	
 3208              	
 3209              	/************************
 3210              	  The text interpreter
 3211              	************************/
 3212              	
 3213              	/***************************
 3214              	    $INTERPRET  ( a -- )
 3215              	 	Interpret a word. 
 3216              		If failed, try to 
 3217              		convert it to an integer.
 3218              	******************************/
 3219 4b50 D44A0000 		_HEADER INTER,10,"$INTERPRET"
 3219      0A24494E 
 3219      54455250 
 3219      52455400 
 3220 4b60 504700BF 		_NEST
 3221 4b64 69480000 		_ADR	NAMEQ
 3222 4b68 B9320000 		_ADR	QDUP	// ?defined
 3223 4b6c 5F2F0000 		_QBRAN	INTE1
 3223      A04B0000 
 3224 4b74 B52F0000 		_ADR	AT
 3225 4b78 1F2F0000 		_DOLIT	COMPO
 3225      40000000 
 3226 4b80 29310000 		_ADR	ANDD	// ?compile only lexicon bits
 3227 4b84 194B0000 		_ABORQ	13," compile only"
 3227      0D20636F 
 3227      6D70696C 
 3227      65206F6E 
ARM GAS  forth.s 			page 170


 3227      6C7900BF 
 3228 4b98 352F0000 		_ADR	EXECU
 3229 4b9c FB2C0000 		_UNNEST			// execute defined word
 3230              	INTE1:
 3231 4ba0 59410000 		_ADR	NUMBERQ
 3232 4ba4 5F2F0000 		_QBRAN	INTE2
 3232      B04B0000 
 3233 4bac FB2C0000 		_UNNEST
 3234              	INTE2:
 3235 4bb0 F14A0000 		_ADR	PRT_ABORT	// error
 3236              	
 3237              	/******************************
 3238              	    [	   ( -- )
 3239              	 	Start the text interpreter.
 3240              	*******************************/
 3241 4bb4 544B0000 		_HEADER LBRAC,IMEDD+1,"["
 3241      815B00BF 
 3242 4bbc 504700BF 		_NEST
 3243 4bc0 1F2F0000 		_DOLIT	INTER
 3243      604B0000 
 3244 4bc8 95360000 		_ADR	TEVAL
 3245 4bcc A12F0000 		_ADR	STORE
 3246 4bd0 1F2F0000 		_DOLIT  0 
 3246      00000000 
 3247 4bd8 9D350000 		_ADR    STATE 
 3248 4bdc A12F0000 		_ADR    STORE 
 3249 4be0 FB2C0000 		_UNNEST
 3250              	
 3251              	/**********************
 3252              	    .OK	 ( -- )
 3253              	 	Display "ok" only 
 3254              		while interpreting.
 3255              	************************/
 3256 4be4 B84B0000 		_HEADER DOTOK,3,".OK"
 3256      032E4F4B 
 3257 4bec 504700BF 		_NEST
 3258 4bf0 1F2F0000 		_DOLIT	INTER
 3258      604B0000 
 3259 4bf8 95360000 		_ADR	TEVAL
 3260 4bfc B52F0000 		_ADR	AT
 3261 4c00 35340000 		_ADR	EQUAL
 3262 4c04 5F2F0000 		_QBRAN	DOTO1
 3262      144C0000 
 3263 4c0c 69420000 		_DOTQP	3," ok"
 3263      03206F6B 
 3264              	DOTO1:
 3265 4c14 0D420000 		_ADR	CR
 3266 4c18 FB2C0000 		_UNNEST
 3267              	
 3268              	/*************************
 3269              	    ?STACK	( -- )
 3270              	 	Abort if the data 
 3271              		stack underflows.
 3272              	************************/
 3273 4c1c E84B0000 		_HEADER QSTAC,6,"?STACK"
 3273      063F5354 
 3273      41434B00 
ARM GAS  forth.s 			page 171


 3274 4c28 504700BF 		_NEST
 3275 4c2c 893B0000 		_ADR	DEPTH
 3276 4c30 19310000 		_ADR	ZLESS	// check only for underflow
 3277 4c34 194B0000 		_ABORQ	9,"underflow"
 3277      09756E64 
 3277      6572666C 
 3277      6F7700BF 
 3278 4c44 FB2C0000 		_UNNEST
 3279              	
 3280              	/*******************
 3281              	    EVAL	( -- )
 3282              	 	Interpret the 
 3283              		input stream.
 3284              	*******************/
 3285 4c48 204C0000 		_HEADER EVAL,4,"EVAL"
 3285      04455641 
 3285      4C0000BF 
 3286 4c54 504700BF 		_NEST
 3287              	EVAL1:
 3288 4c58 E1460000 	    _ADR	TOKEN
 3289 4c5c A9300000 		_ADR	DUPP
 3290 4c60 D52F0000 		_ADR	CAT	// ?input stream empty
 3291 4c64 5F2F0000 		_QBRAN	EVAL2
 3291      804C0000 
 3292 4c6c 95360000 		_ADR	TEVAL
 3293 4c70 553C0000 		_ADR	ATEXE
 3294 4c74 294C0000 		_ADR	QSTAC	// evaluate input, check stack
 3295 4c78 872F0000 		_BRAN	EVAL1
 3295      584C0000 
 3296              	EVAL2:
 3297 4c80 99300000 		_ADR	DROP
 3298 4c84 ED4B0000 		_ADR	DOTOK
 3299 4c88 FB2C0000 		_UNNEST	// prompt
 3300              	
 3301              	/**********************************
 3302              	    PRESET	( -- )
 3303              	 	Reset data stack pointer 
 3304              		and the terminal input buffer.
 3305              	**********************************/
 3306 4c8c 4C4C0000 		_HEADER PRESE,6,"PRESET"
 3306      06505245 
 3306      53455400 
 3307 4c98 504700BF 		_NEST 
 3308 4c9c 1F2F0000 		_DOLIT SPP 
 3308      B0FE0120 
 3309 4ca4 65300000 		_ADR SPSTOR
 3310 4ca8 1F2F0000 		_DOLIT TIBB        
 3310      B0FE0120 
 3311 4cb0 1F2F0000 		_DOLIT 0   
 3311      00000000 
 3312 4cb8 7D360000 		_ADR   NTIB 
 3313 4cbc 11350000 		_ADR   DSTOR    
 3314 4cc0 FB2C0000 		_UNNEST 
 3315              	
 3316              	/*********************
 3317              	    QUIT	( -- )
 3318              	 	Reset return stack 
ARM GAS  forth.s 			page 172


 3319              		pointer and start 
 3320              		text interpreter.
 3321              	***********************/
 3322 4cc4 904C0000 		_HEADER QUIT,4,"QUIT"
 3322      04515549 
 3322      540000BF 
 3323 4cd0 1F2F0000 		_DOLIT RPP 
 3323      80FF0120 
 3324 4cd8 55300000 		_ADR RPSTOR 
 3325              	QUIT1:
 3326 4cdc BD4B0000 		_ADR	LBRAC			// start interpretation
 3327              	QUIT2:
 3328 4ce0 9D4A0000 		_ADR	QUERY			// get input
 3329 4ce4 554C0000 		_ADR	EVAL
 3330 4ce8 872F0000 		_BRAN	QUIT2	// continue till error
 3330      E04C0000 
 3331              	
 3332              	/***************************
 3333              		FORGET ( <string> -- )
 3334              		forget all definition 
 3335              		starting at <string>
 3336              	****************************/
 3337 4cf0 C84C0000 		_HEADER FORGET,6,"FORGET"
 3337      06464F52 
 3337      47455400 
 3338 4cfc 504700BF 		_NEST 
 3339 4d00 E1460000 		_ADR TOKEN 
 3340 4d04 A9300000 		_ADR DUPP 
 3341 4d08 5F2F0000 		_QBRAN 9f 
 3341      444D0000 
 3342 4d10 69480000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3343 4d14 B9320000 		_ADR QDUP 
 3344 4d18 5F2F0000 		_QBRAN 8f
 3344      404D0000 
 3345 4d20 55320000 		_ADR CELLM // ( ca la )
 3346 4d24 A9300000 		_ADR DUPP 
 3347 4d28 D5360000 		_ADR CPP   
 3348 4d2c A12F0000 		_ADR STORE
 3349 4d30 B52F0000 		_ADR AT 
 3350 4d34 01370000 		_ADR LAST 
 3351 4d38 A12F0000 		_ADR STORE
 3352 4d3c C5530000 		_ADR OVERT 
 3353 4d40 99300000 	8:  _ADR DROP 
 3354 4d44 FB2C0000 	9:	_UNNEST 
 3355              	
 3356              		.p2align 2 
 3357              	
 3358              	/*****************
 3359              	  The compiler
 3360              	******************/
 3361              	
 3362              	/**************************************
 3363              		POSTPONE <name> ( -- )
 3364              		use to compile immediate word 
 3365              	**************************************/
 3366 4d48 F44C0000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3366      C8504F53 
ARM GAS  forth.s 			page 173


 3366      54504F4E 
 3366      450000BF 
 3367 4d58 504700BF 		_NEST 
 3368 4d5c 954D0000 		_ADR ITICK
 3369 4d60 31540000 		_ADR CALLC  
 3370 4d64 FB2C0000 		_UNNEST 
 3371              	
 3372              	
 3373              	/**************************************
 3374              	    '	   ( -- ca )
 3375              	 	Search context vocabularies 
 3376              		for the next word in input stream.
 3377              	***************************************/
 3378 4d68 4C4D0000 		_HEADER TICK,1,"'"
 3378      012700BF 
 3379 4d70 504700BF 		_NEST
 3380 4d74 E1460000 		_ADR	TOKEN
 3381 4d78 69480000 		_ADR	NAMEQ	// ?defined
 3382 4d7c 5F2F0000 		_QBRAN	TICK1
 3382      884D0000 
 3383 4d84 FB2C0000 		_UNNEST	// yes, push code address
 3384              	TICK1:
 3385 4d88 F14A0000 		_ADR PRT_ABORT	// error
 3386              	
 3387              	/*****************************************
 3388              		['] ( -- ca )
 3389              		immediate version of ' 
 3390              	****************************************/
 3391 4d8c 6C4D0000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3391      C35B275D 
 3392 4d94 504700BF 		_NEST 
 3393 4d98 714D0000 		_ADR TICK  
 3394 4d9c FB2C0000 		_UNNEST 
 3395              	
 3396              	
 3397              	/***********************************
 3398              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3399              		search all context for name at 
 3400              		c-adr 
 3401              	input:
 3402              		c-adr   name 
 3403              	output:
 3404              		c-adr  0   not found 
 3405              		xt 1   found word immediate 
 3406              		xt -1  found normal word 
 3407              	***********************************/
 3408 4da0 904D0000 		_HEADER FIND,4,"FIND"
 3408      0446494E 
 3408      440000BF 
 3409 4dac 504700BF 		_NEST 
 3410 4db0 69480000 		_ADR NAMEQ 
 3411 4db4 A9300000 		_ADR DUPP 
 3412 4db8 5F2F0000 		_QBRAN 9f
 3412      EC4D0000 
 3413 4dc0 D52F0000 		_ADR CAT 
 3414 4dc4 1F2F0000 		_DOLIT IMEDD
 3414      80000000 
ARM GAS  forth.s 			page 174


 3415 4dcc 29310000 		_ADR ANDD 
 3416 4dd0 1F2F0000 		_DOLIT 7 
 3416      07000000 
 3417 4dd8 81310000 		_ADR RSHIFT  
 3418 4ddc A9300000 		_ADR DUPP 
 3419 4de0 732F0000 		_TBRAN 9f 
 3419      EC4D0000 
 3420 4de8 B9330000 		_ADR INVER 
 3421 4dec FB2C0000 	9:	_UNNEST 
 3422              	
 3423              	
 3424              	
 3425              	/***********************
 3426              	    ALLOT	( n -- )
 3427              	 	Allocate n bytes to 
 3428              		the ram area.
 3429              	************************/
 3430 4df0 A44D0000 		_HEADER ALLOT,5,"ALLOT"
 3430      05414C4C 
 3430      4F5400BF 
 3431 4dfc 504700BF 		_NEST
 3432 4e00 D5360000 		_ADR	CPP
 3433 4e04 F5340000 		_ADR	PSTOR
 3434 4e08 FB2C0000 		_UNNEST			// adjust code pointer
 3435              	
 3436              	/******************************
 3437              	    ,	   ( w -- )
 3438              	 	Compile an integer 
 3439              		into the code dictionary.
 3440              	******************************/
 3441 4e0c F44D0000 		_HEADER COMMA,1,","
 3441      012C00BF 
 3442 4e14 504700BF 		_NEST
 3443 4e18 E13B0000 		_ADR	HERE
 3444 4e1c A9300000 		_ADR	DUPP
 3445 4e20 45320000 		_ADR	CELLP	// cell boundary
 3446 4e24 D5360000 		_ADR	CPP
 3447 4e28 A12F0000 		_ADR	STORE
 3448 4e2c A12F0000 		_ADR	STORE
 3449 4e30 FB2C0000 		_UNNEST	// adjust code pointer, compile
 3450              		.p2align 2 
 3451              	
 3452              	/************************************
 3453              	    [COMPILE]   ( -- //  string> )
 3454              	 	Compile the next immediate word 
 3455              		into code dictionary.
 3456              	*************************************/
 3457 4e34 104E0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3457      895B434F 
 3457      4D50494C 
 3457      455D00BF 
 3458 4e44 504700BF 		_NEST
 3459 4e48 714D0000 		_ADR	TICK
 3460 4e4c 154E0000 		_ADR	COMMA
 3461 4e50 FB2C0000 		_UNNEST
 3462              	
 3463              	/****************************
ARM GAS  forth.s 			page 175


 3464              	    COMPILE	( -- )
 3465              	 	Compile the next address 
 3466              		in colon list to code 
 3467              		dictionary.
 3468              	*******************************/
 3469 4e54 384E0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3469      47434F4D 
 3469      50494C45 
 3470 4e60 504700BF 		_NEST
 3471 4e64 E12F0000 		_ADR	RFROM
 3472 4e68 A9300000 		_ADR	DUPP 
 3473 4e6c B52F0000 		_ADR	AT
 3474 4e70 1F2F0000 		_DOLIT 1 
 3474      01000000 
 3475 4e78 3D310000 		_ADR	ORR 
 3476 4e7c 154E0000 		_ADR	COMMA 
 3477 4e80 45320000 		_ADR	CELLP 
 3478 4e84 25300000 		_ADR	TOR 
 3479 4e88 FB2C0000 		_UNNEST	// adjust return address
 3480              	
 3481              	/*************************
 3482              	    LITERAL	( w -- )
 3483              	 	Compile tos to code 
 3484              		dictionary as an 
 3485              		integer literal.
 3486              	***************************/
 3487 4e8c 584E0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3487      874C4954 
 3487      4552414C 
 3488 4e98 504700BF 		_NEST
 3489 4e9c 1F2F0000 		_COMPI	DOLIT
 3489      1E2F0000 
 3489      31540000 
 3490 4ea8 154E0000 		_ADR	COMMA
 3491 4eac FB2C0000 		_UNNEST
 3492              	
 3493              	/********************
 3494              	    $,"	( -- )
 3495              	 	Compile a literal 
 3496              		string up to next " .
 3497              	hidden word 
 3498              	************************/
 3499              	STRCQ:
 3500 4eb0 504700BF 		_NEST
 3501 4eb4 1F2F0000 		_DOLIT -4
 3501      FCFFFFFF 
 3502 4ebc D5360000 		_ADR	CPP
 3503 4ec0 F5340000 		_ADR	PSTOR
 3504 4ec4 1F2F0000 		_DOLIT	'\"'
 3504      22000000 
 3505 4ecc BD460000 		_ADR	WORDD			// move word to code dictionary
 3506 4ed0 49350000 		_ADR	COUNT
 3507 4ed4 A9310000 		_ADR	PLUS
 3508 4ed8 213B0000 		_ADR	ALGND			// calculate aligned end of string
 3509 4edc D5360000 		_ADR	CPP
 3510 4ee0 A12F0000 		_ADR	STORE
 3511 4ee4 FB2C0000 		_UNNEST 			// adjust the code pointer
ARM GAS  forth.s 			page 176


 3512              	
 3513              	/*******************
 3514              	   Structures
 3515              	*******************/
 3516              	
 3517              	/*************************
 3518              	    FOR	 ( -- a )
 3519              	 	Start a FOR-NEXT loop 
 3520              		structure in a colon 
 3521              		definition.
 3522              	**************************/
 3523 4ee8 904E0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3523      C3464F52 
 3524 4ef0 504700BF 		_NEST
 3525 4ef4 1F2F0000 		_COMPI	TOR
 3525      24300000 
 3525      31540000 
 3526 4f00 E13B0000 		_ADR	HERE
 3527 4f04 FB2C0000 		_UNNEST
 3528              	
 3529              	/********************************
 3530              		DO ( limit start -- )
 3531              		initialise a DO...LOOP 
 3532              		or DO...+LOOP 
 3533              	********************************/
 3534 4f08 EC4E0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3534      C2444F00 
 3535 4f10 504700BF 		_NEST
 3536 4f14 1F2F0000 		_COMPI SWAP
 3536      B8300000 
 3536      31540000 
 3537 4f20 1F2F0000 		_COMPI TOR 
 3537      24300000 
 3537      31540000 
 3538 4f2c 1F2F0000 		_COMPI TOR 
 3538      24300000 
 3538      31540000 
 3539 4f38 E13B0000 		_ADR HERE 
 3540 4f3c 1F2F0000 		_DOLIT 0  // end marker used by resolve_leave 
 3540      00000000 
 3541 4f44 FB2C0000 		_UNNEST 
 3542              	
 3543              	DOPLOOP: // ( n -- R: limit counter )
 3544 4f48 3246     		mov T2,TOS 
 3545 4f4a 57F8046B 		_POP 
 3546 4f4e B8E80300 		ldmfd RSP!,{T0,T1}
 3547 4f52 1044     		add T0,T2 
 3548 4f54 28E90300 		stmfd RSP!,{T0,T1}
 3549 4f58 8842     		cmp T0,T1 
 3550 4f5a 05D4     		bmi 9f 
 3551 4f5c 08F10808 		add RSP,#8
 3552 4f60 0CF1040C 		add IP,#4
 3553 4f64 FDF7C6BE 		_NEXT 
 3554 4f68 DCF800C0 	9:  ldr IP,[IP]
 3555 4f6c FDF7C2BE 		_NEXT 
 3556              		
 3557              	/***************************
ARM GAS  forth.s 			page 177


 3558              		+LOOP ( a -- )
 3559              		increment counter 
 3560              		end loop if countr>limit
 3561              	****************************/
 3562 4f70 0C4F0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3562      C52B4C4F 
 3562      4F5000BF 
 3563 4f7c 504700BF 		_NEST 
 3564 4f80 1F2F0000 		_COMPI DOPLOOP 
 3564      484F0000 
 3564      31540000 
 3565 4f8c C14F0000 		_ADR resolve_leave 
 3566 4f90 154E0000 		_ADR COMMA
 3567 4f94 FB2C0000 		_UNNEST 
 3568              	
 3569              	DOLOOP: // ( -- R: limit counter )
 3570 4f98 D8F80000 		ldr T0,[RSP]
 3571 4f9c 00F10100 		add T0,#1
 3572 4fa0 C8F80000 		str T0,[RSP]
 3573 4fa4 D8F80410 		ldr T1,[RSP,#4]
 3574 4fa8 8842     		cmp T0,T1 
 3575 4faa 05D4     		bmi 9f
 3576 4fac 08F10808 		add RSP,#8  // drop counter and limit  
 3577 4fb0 0CF1040C 		add IP,IP,#4 // skip loop address 
 3578 4fb4 FDF79EBE 		_NEXT 
 3579 4fb8 DCF800C0 	9:  ldr IP,[IP]
 3580 4fbc FDF79ABE 		_NEXT 
 3581              	
 3582              	
 3583              	resolve_leave:
 3584 4fc0 504700BF 		_NEST
 3585 4fc4 B9320000 	1:	_ADR QDUP 
 3586 4fc8 5F2F0000 		_QBRAN 2f 
 3586      E84F0000 
 3587 4fd0 E13B0000 		_ADR HERE 
 3588 4fd4 45320000 		_ADR CELLP 
 3589 4fd8 B9300000 		_ADR SWAP 
 3590 4fdc A12F0000 		_ADR STORE 
 3591 4fe0 872F0000 		_BRAN 1b 
 3591      C44F0000 
 3592              	2:
 3593 4fe8 FB2C0000 		_UNNEST 
 3594              	
 3595              	/********************************
 3596              		LOOP ( a -- )
 3597              		increment counter 
 3598              		end loop if >= limit 
 3599              	*********************************/
 3600 4fec 744F0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3600      C44C4F4F 
 3600      500000BF 
 3601 4ff8 504700BF 		_NEST 
 3602 4ffc 1F2F0000 		_COMPI DOLOOP
 3602      984F0000 
 3602      31540000 
 3603 5008 C14F0000 		_ADR resolve_leave 
 3604 500c 154E0000 		_ADR COMMA  // resolve loop branch 
ARM GAS  forth.s 			page 178


 3605 5010 FB2C0000 		_UNNEST 
 3606              	
 3607              	/************************************
 3608              		UNLOOP ( -- ) ( R: limit count -- )
 3609              		remove loop parameters from rstack 
 3610              	****************************************/
 3611 5014 F04F0000 		_HEADER UNLOOP,6,"UNLOOP"
 3611      06554E4C 
 3611      4F4F5000 
 3612 5020 08F10808 		add RSP,#2*CELLL 
 3613 5024 FDF766BE 		_NEXT 
 3614              	
 3615              	
 3616              	/*********************************
 3617              		LEAVE ( -- ) ( R: loop-sys -- ) 
 3618              		exit inner DO...LOOP 
 3619              	**********************************/
 3620 5028 18500000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 3620      C54C4541 
 3620      564500BF 
 3621 5034 504700BF 		_NEST 
 3622 5038 1F2F0000 		_COMPI DOLEAVE
 3622      68500000 
 3622      31540000 
 3623 5044 E13B0000 		_ADR HERE
 3624 5048 E9300000 		_ADR OVER 
 3625 504c 5F2F0000 		_QBRAN 1f
 3625      58500000 
 3626 5054 B9300000 		_ADR SWAP 
 3627 5058 1F2F0000 	1:	_DOLIT 0 
 3627      00000000 
 3628 5060 154E0000 		_ADR COMMA   
 3629 5064 FB2C0000 		_UNNEST 
 3630              	
 3631              	// LEAVE runtime
 3632              	// remove limit and counter from rstack  
 3633              	DOLEAVE:
 3634 5068 08F10808 		add RSP,#2*CELLL
 3635 506c DCF800C0 		ldr IP,[IP] 
 3636 5070 FDF740BE 		_NEXT 
 3637              	
 3638              	
 3639              	/**********************
 3640              	    BEGIN	( -- a )
 3641              	 	Start an infinite 
 3642              		or indefinite 
 3643              		loop structure.
 3644              	************************/
 3645 5074 2C500000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3645      C5424547 
 3645      494E00BF 
 3646 5080 504700BF 		_NEST
 3647 5084 E13B0000 		_ADR	HERE
 3648 5088 FB2C0000 		_UNNEST
 3649              		.p2align 2 
 3650              	
 3651              	/********************
ARM GAS  forth.s 			page 179


 3652              	    NEXT	( a -- )
 3653              	 	Terminate a FOR-NEXT
 3654              		loop structure.
 3655              	**************************/
 3656 508c 78500000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3656      C44E4558 
 3656      540000BF 
 3657 5098 504700BF 		_NEST
 3658 509c 1F2F0000 		_COMPI	DONXT
 3658      402F0000 
 3658      31540000 
 3659 50a8 154E0000 		_ADR	COMMA
 3660 50ac FB2C0000 		_UNNEST
 3661              	
 3662              	/***************************
 3663              		I ( -- n )
 3664              		stack for loop counter 
 3665              	***************************/
 3666 50b0 90500000 		_HEADER I,1+COMPO,"I"
 3666      414900BF 
 3667 50b8 47F8046D 		_PUSH 
 3668 50bc D8F80060 		ldr TOS,[RSP]
 3669 50c0 FDF718BE 		_NEXT 
 3670              	
 3671              	/****************************
 3672              		J ( -- n )
 3673              		stack outer loop counter 
 3674              	****************************/
 3675 50c4 B4500000 		_HEADER J,1,"J"
 3675      014A00BF 
 3676 50cc 47F8046D 		_PUSH 
 3677 50d0 D8F80460 		ldr TOS,[RSP,#4]
 3678 50d4 FDF70EBE 		_NEXT 
 3679              	
 3680              	/**********************
 3681              	    UNTIL	( a -- )
 3682              	 	Terminate a BEGIN-UNTIL
 3683              		indefinite loop structure.
 3684              	******************************/
 3685 50d8 C8500000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3685      C5554E54 
 3685      494C00BF 
 3686 50e4 504700BF 		_NEST
 3687 50e8 1F2F0000 		_COMPI	QBRAN
 3687      5E2F0000 
 3687      31540000 
 3688 50f4 154E0000 		_ADR	COMMA
 3689 50f8 FB2C0000 		_UNNEST
 3690              	
 3691              	/**********************
 3692              	    AGAIN	( a -- )
 3693              	 	Terminate a BEGIN-AGAIN
 3694              		infinite loop structure.
 3695              	*****************************/
 3696 50fc DC500000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3696      C5414741 
 3696      494E00BF 
ARM GAS  forth.s 			page 180


 3697 5108 504700BF 		_NEST
 3698 510c 1F2F0000 		_COMPI	BRAN
 3698      862F0000 
 3698      31540000 
 3699 5118 154E0000 		_ADR	COMMA
 3700 511c FB2C0000 		_UNNEST
 3701              	
 3702              	/************************
 3703              	    IF	  ( -- A )
 3704              	 	Begin a conditional
 3705              		branch structure.
 3706              	**************************/
 3707 5120 00510000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3707      C2494600 
 3708 5128 504700BF 		_NEST
 3709 512c 1F2F0000 		_COMPI	QBRAN
 3709      5E2F0000 
 3709      31540000 
 3710 5138 E13B0000 		_ADR	HERE
 3711 513c 1F2F0000 		_DOLIT	4
 3711      04000000 
 3712 5144 D5360000 		_ADR	CPP
 3713 5148 F5340000 		_ADR	PSTOR
 3714 514c FB2C0000 		_UNNEST
 3715              	
 3716              	/*************************
 3717              	    AHEAD	( -- A )
 3718              	 	Compile a forward 
 3719              		branch instruction.
 3720              	*************************/
 3721 5150 24510000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3721      C5414845 
 3721      414400BF 
 3722 515c 504700BF 		_NEST
 3723 5160 1F2F0000 		_COMPI	BRAN
 3723      862F0000 
 3723      31540000 
 3724 516c E13B0000 		_ADR	HERE
 3725 5170 1F2F0000 		_DOLIT	4
 3725      04000000 
 3726 5178 D5360000 		_ADR	CPP
 3727 517c F5340000 		_ADR	PSTOR
 3728 5180 FB2C0000 		_UNNEST
 3729              	
 3730              	/**************************
 3731              	    REPEAT	( A a -- )
 3732              	 	Terminate a BEGIN-WHILE-REPEAT
 3733              		indefinite loop.
 3734              	**********************************/
 3735 5184 54510000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3735      C6524550 
 3735      45415400 
 3736 5190 504700BF 		_NEST
 3737 5194 09510000 		_ADR	AGAIN
 3738 5198 E13B0000 		_ADR	HERE
 3739 519c B9300000 		_ADR	SWAP
 3740 51a0 A12F0000 		_ADR	STORE
ARM GAS  forth.s 			page 181


 3741 51a4 FB2C0000 		_UNNEST
 3742              	
 3743              	/*********************
 3744              	    THEN	( A -- )
 3745              	 	Terminate a conditional
 3746              		branch structure.
 3747              	*****************************/
 3748 51a8 88510000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3748      C4544845 
 3748      4E0000BF 
 3749 51b4 504700BF 		_NEST
 3750 51b8 E13B0000 		_ADR	HERE
 3751 51bc B9300000 		_ADR	SWAP
 3752 51c0 A12F0000 		_ADR	STORE
 3753 51c4 FB2C0000 		_UNNEST
 3754              	
 3755              	/***************************
 3756              	    AFT	 ( a -- a A )
 3757              	 	Jump to THEN in a 
 3758              		FOR-AFT-THEN-NEXT loop 
 3759              		the first time through.
 3760              	*****************************/
 3761 51c8 AC510000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3761      C3414654 
 3762 51d0 504700BF 		_NEST
 3763 51d4 99300000 		_ADR	DROP
 3764 51d8 5D510000 		_ADR	AHEAD
 3765 51dc 81500000 		_ADR	BEGIN
 3766 51e0 B9300000 		_ADR	SWAP
 3767 51e4 FB2C0000 		_UNNEST
 3768              	
 3769              	/**********************
 3770              	    ELSE	( A -- A )
 3771              	 	Start the false 
 3772              		clause in an 
 3773              		IF-ELSE-THEN structure.
 3774              	****************************/
 3775 51e8 CC510000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3775      C4454C53 
 3775      450000BF 
 3776 51f4 504700BF 		_NEST
 3777 51f8 5D510000 		_ADR	AHEAD
 3778 51fc B9300000 		_ADR	SWAP
 3779 5200 B5510000 		_ADR	THENN
 3780 5204 FB2C0000 		_UNNEST
 3781              	
 3782              	/**************************
 3783              	    WHILE	( a -- A a )
 3784              	 	Conditional branch out 
 3785              		of a BEGIN-WHILE-REPEAT loop.
 3786              	*********************************/
 3787 5208 EC510000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3787      C5574849 
 3787      4C4500BF 
 3788 5214 504700BF 		_NEST
 3789 5218 29510000 		_ADR	IFF
 3790 521c B9300000 		_ADR	SWAP
ARM GAS  forth.s 			page 182


 3791 5220 FB2C0000 		_UNNEST
 3792              	
 3793              	/***********************************
 3794              	    ABORT"	( -- //  string> )
 3795              	 	Conditional abort with an 
 3796              		error message.
 3797              	***********************************/
 3798 5224 0C520000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3798      8641424F 
 3798      52542200 
 3799 5230 504700BF 		_NEST
 3800 5234 1F2F0000 		_COMPI	ABORQ
 3800      184B0000 
 3800      31540000 
 3801 5240 B14E0000 		_ADR	STRCQ
 3802 5244 FB2C0000 		_UNNEST
 3803              	
 3804              	/******************************
 3805              	    S"	( -- //  string> )
 3806              	 	Compile an inline 
 3807              		word literal.
 3808              	*****************************/
 3809 5248 28520000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 3809      C2532200 
 3810 5250 504700BF 		_NEST
 3811 5254 1F2F0000 		_COMPI	STRQP
 3811      5C420000 
 3811      31540000 
 3812 5260 B14E0000 		_ADR	STRCQ
 3813 5264 FB2C0000 		_UNNEST
 3814              	
 3815              	/******************************
 3816              	    ."	( -- //  string> )
 3817              	 	Compile an inline word
 3818              		literal to be typed out 
 3819              		at run time.
 3820              	*******************************/
 3821 5268 4C520000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3821      C22E2200 
 3822 5270 504700BF 		_NEST
 3823 5274 1F2F0000 		_COMPI	DOTQP
 3823      68420000 
 3823      31540000 
 3824 5280 B14E0000 		_ADR	STRCQ
 3825 5284 FB2C0000 		_UNNEST
 3826              	
 3827              	/*********************
 3828              	  Name compiler
 3829              	***********************/
 3830              	
 3831              	/**************************
 3832              	    ?UNIQUE	( a -- a )
 3833              	 	Display a warning 
 3834              		message if the word 
 3835              		already exists.
 3836              	**************************/
 3837 5288 6C520000 		_HEADER UNIQU,7,"?UNIQUE"
ARM GAS  forth.s 			page 183


 3837      073F554E 
 3837      49515545 
 3838 5294 504700BF 		_NEST
 3839 5298 A9300000 		_ADR	DUPP
 3840 529c 69480000 		_ADR	NAMEQ			// ?name exists
 3841 52a0 5F2F0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3841      C0520000 
 3842 52a8 69420000 		_DOTQP	7," reDef "		// but warn the user
 3842      07207265 
 3842      44656620 
 3843 52b4 E9300000 		_ADR	OVER
 3844 52b8 49350000 		_ADR	COUNT
 3845 52bc D9410000 		_ADR	TYPEE			// just in case its not planned
 3846              	UNIQ1:
 3847 52c0 99300000 		_ADR	DROP
 3848 52c4 FB2C0000 		_UNNEST
 3849              	
 3850              	/***********************
 3851              	    $,n	 ( na -- )
 3852              	 	Build a new dictionary 
 3853              		name using the data at na.
 3854              	hidden word 
 3855              	*******************************/
 3856              	SNAME:
 3857 52c8 504700BF 		_NEST
 3858 52cc A9300000 		_ADR	DUPP			//  na na
 3859 52d0 D52F0000 		_ADR	CAT			//  ?null input
 3860 52d4 5F2F0000 		_QBRAN	SNAM1
 3860      10530000 
 3861 52dc 95520000 		_ADR	UNIQU			//  na
 3862 52e0 01370000 		_ADR	LAST			//  na last
 3863 52e4 B52F0000 		_ADR	AT			//  na la
 3864 52e8 154E0000 		_ADR	COMMA			//  na
 3865 52ec A9300000 		_ADR	DUPP			//  na na
 3866 52f0 01370000 		_ADR	LAST			//  na na last
 3867 52f4 A12F0000 		_ADR	STORE			//  na , save na for vocabulary link
 3868 52f8 49350000 		_ADR	COUNT			//  na+1 count
 3869 52fc A9310000 		_ADR	PLUS			//  na+1+count
 3870 5300 213B0000 		_ADR	ALGND			//  word boundary
 3871 5304 D5360000 		_ADR	CPP
 3872 5308 A12F0000 		_ADR	STORE			//  top of dictionary now
 3873 530c FB2C0000 		_UNNEST
 3874              	SNAM1:
 3875 5310 5D420000 		_ADR	STRQP
 3876 5314 07       		.byte	7
 3877 5315 206E616D 		.ascii " name? "
 3877      653F20
 3878 531c F14A0000 		_ADR	PRT_ABORT
 3879              	
 3880              	/************************
 3881              	    $COMPILE	( a -- )
 3882              	 	Compile next word to 
 3883              		code dictionary as 
 3884              		a token or literal.
 3885              	**************************/
 3886 5320 8C520000 		_HEADER SCOMP,8,"$COMPILE"
 3886      0824434F 
ARM GAS  forth.s 			page 184


 3886      4D50494C 
 3886      450000BF 
 3887 5330 504700BF 		_NEST
 3888 5334 69480000 		_ADR	NAMEQ
 3889 5338 B9320000 		_ADR	QDUP	// defined?
 3890 533c 5F2F0000 		_QBRAN	SCOM2
 3890      6C530000 
 3891 5344 B52F0000 		_ADR	AT
 3892 5348 1F2F0000 		_DOLIT	IMEDD
 3892      80000000 
 3893 5350 29310000 		_ADR	ANDD	// immediate?
 3894 5354 5F2F0000 		_QBRAN	SCOM1
 3894      64530000 
 3895 535c 352F0000 		_ADR	EXECU
 3896 5360 FB2C0000 		_UNNEST			// it's immediate, execute
 3897              	SCOM1:
 3898 5364 31540000 		_ADR	CALLC			// it's not immediate, compile
 3899 5368 FB2C0000 		_UNNEST	
 3900              	SCOM2:
 3901 536c 59410000 		_ADR	NUMBERQ 
 3902 5370 5F2F0000 		_QBRAN	SCOM3
 3902      80530000 
 3903 5378 994E0000 		_ADR	LITER
 3904 537c FB2C0000 		_UNNEST			// compile number as integer
 3905              	SCOM3: // compilation abort 
 3906 5380 89530000 		_ADR COLON_ABORT 
 3907 5384 F14A0000 		_ADR	PRT_ABORT			// error
 3908              	
 3909              	/********************************
 3910              	 before aborting a compilation 
 3911              	 reset HERE and LAST
 3912              	 to previous values. 
 3913              	*******************************/
 3914              	COLON_ABORT:
 3915 5388 504700BF 		_NEST 
 3916 538c 01370000 		_ADR LAST 
 3917 5390 B52F0000 		_ADR AT 
 3918 5394 55320000 		_ADR CELLM 
 3919 5398 A9300000 		_ADR DUPP 
 3920 539c D5360000 		_ADR CPP  
 3921 53a0 A12F0000 		_ADR STORE 
 3922 53a4 B52F0000 		_ADR AT 
 3923 53a8 01370000 		_ADR LAST 
 3924 53ac A12F0000 		_ADR STORE 
 3925 53b0 C5530000 		_ADR OVERT 
 3926 53b4 FB2C0000 		_UNNEST 
 3927              	
 3928              	/*********************
 3929              	    OVERT	( -- )
 3930              	 	Link a new word 
 3931              		into the current 
 3932              		vocabulary.
 3933              	**********************/
 3934 53b8 24530000 		_HEADER OVERT,5,"OVERT"
 3934      054F5645 
 3934      525400BF 
 3935 53c4 504700BF 		_NEST
ARM GAS  forth.s 			page 185


 3936 53c8 01370000 		_ADR	LAST
 3937 53cc B52F0000 		_ADR	AT
 3938 53d0 C1360000 		_ADR	CNTXT
 3939 53d4 A12F0000 		_ADR	STORE
 3940 53d8 FB2C0000 		_UNNEST
 3941              	
 3942              	/**********************
 3943              	    ;  ( -- )
 3944              	 	Terminate a colon
 3945              		definition.
 3946              	***********************/
 3947 53dc BC530000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3947      C13B00BF 
 3948 53e4 504700BF 		_NEST
 3949 53e8 1F2F0000 		_DOLIT	UNNEST
 3949      FA2C0000 
 3950 53f0 31540000 		_ADR	CALLC
 3951 53f4 BD4B0000 		_ADR	LBRAC
 3952 53f8 C5530000 		_ADR	OVERT
 3953 53fc FB2C0000 		_UNNEST
 3954              	
 3955              	/******************
 3956              	    ]	   ( -- )
 3957              	 	Start compiling 
 3958              		the words in 
 3959              		the input stream.
 3960              	*********************/
 3961 5400 E0530000 		_HEADER RBRAC,1,"]"
 3961      015D00BF 
 3962 5408 504700BF 		_NEST
 3963 540c 1F2F0000 		_DOLIT	SCOMP
 3963      30530000 
 3964 5414 95360000 		_ADR	TEVAL
 3965 5418 A12F0000 		_ADR	STORE
 3966 541c 1F2F0000 		_DOLIT  -1
 3966      FFFFFFFF 
 3967 5424 9D350000 		_ADR    STATE 
 3968 5428 A12F0000 		_ADR    STORE 
 3969 542c FB2C0000 		_UNNEST
 3970              	
 3971              	/****************************
 3972              	    CALLC	( ca -- )
 3973              	 	compile ca.
 3974              	hidden word used by compiler
 3975              	*****************************/
 3976              	CALLC:
 3977 5430 504700BF 		_NEST
 3978 5434 1F2F0000 		_DOLIT 1 
 3978      01000000 
 3979 543c 3D310000 		_ADR ORR 
 3980 5440 154E0000 		_ADR COMMA  
 3981 5444 FB2C0000 		_UNNEST 
 3982              	
 3983              	
 3984              	/*************************
 3985              	 	:	( -- //  string> )
 3986              	 	Start a new colon 
ARM GAS  forth.s 			page 186


 3987              		definition using 
 3988              		next word as its name.
 3989              	**************************/
 3990 5448 04540000 		_HEADER COLON,1,":"
 3990      013A00BF 
 3991 5450 504700BF 		_NEST
 3992 5454 E1460000 		_ADR	TOKEN
 3993 5458 C9520000 		_ADR	SNAME
 3994 545c C5530000 		_ADR    OVERT 
 3995 5460 052D0000 		_ADR	COMPI_NEST 
 3996 5464 09540000 		_ADR	RBRAC
 3997 5468 FB2C0000 		_UNNEST
 3998              	
 3999              	/*************************
 4000              	    IMMEDIATE   ( -- )
 4001              	 	Make the last compiled 
 4002              		word an immediate word.
 4003              	***************************/
 4004 546c 4C540000 		_HEADER IMMED,9,"IMMEDIATE"
 4004      09494D4D 
 4004      45444941 
 4004      544500BF 
 4005 547c 504700BF 		_NEST
 4006 5480 1F2F0000 		_DOLIT	IMEDD
 4006      80000000 
 4007 5488 01370000 		_ADR	LAST
 4008 548c B52F0000 		_ADR	AT
 4009 5490 B52F0000 		_ADR	AT
 4010 5494 3D310000 		_ADR	ORR
 4011 5498 01370000 		_ADR	LAST
 4012 549c B52F0000 		_ADR	AT
 4013 54a0 A12F0000 		_ADR	STORE
 4014 54a4 FB2C0000 		_UNNEST
 4015              	
 4016              	/******************
 4017              	  Defining words
 4018              	******************/
 4019              	
 4020              	/***********************************
 4021              	    CONSTANT	( u -- //  string> )
 4022              	 	Compile a new constant.
 4023              	************************************/
 4024 54a8 70540000 		_HEADER CONST,8,"CONSTANT"
 4024      08434F4E 
 4024      5354414E 
 4024      540000BF 
 4025 54b8 504700BF 		_NEST 
 4026 54bc E1460000 		_ADR	TOKEN
 4027 54c0 C9520000 		_ADR	SNAME
 4028 54c4 C5530000 		_ADR	OVERT
 4029 54c8 052D0000 		_ADR	COMPI_NEST
 4030 54cc 1F2F0000 		_DOLIT	DOCON
 4030      84350000 
 4031 54d4 31540000 		_ADR	CALLC
 4032 54d8 154E0000 		_ADR	COMMA
 4033 54dc 1F2F0000 		_DOLIT	UNNEST 
 4033      FA2C0000 
ARM GAS  forth.s 			page 187


 4034 54e4 31540000 		_ADR	CALLC  
 4035 54e8 FB2C0000 		_UNNEST
 4036              	
 4037              		.p2align 2 
 4038              	/****************************************
 4039              	 doDOES> ( -- a )
 4040              	 runtime action of 		 
 4041              	 leave parameter field address on stack 
 4042              	hidden word used by compiler 
 4043              	***************************************/
 4044              	DODOES:
 4045 54ec 504700BF 		_NEST 
 4046 54f0 E12F0000 		_ADR	RFROM
 4047 54f4 45320000 		_ADR	CELLP 
 4048 54f8 05320000 		_ADR	ONEP  
 4049 54fc 01370000 		_ADR LAST 
 4050 5500 B52F0000 		_ADR AT
 4051 5504 01470000 		_ADR NAMET 
 4052 5508 45320000 		_ADR CELLP 
 4053 550c A12F0000 		_ADR STORE  
 4054 5510 FB2C0000 		_UNNEST 
 4055              	
 4056              		.p2align 2
 4057              	/**********************
 4058              	  DOES> ( -- )
 4059              	  compile time action
 4060              	*************************/
 4061 5514 AC540000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4061      C5444F45 
 4061      533E00BF 
 4062 5520 504700BF 		_NEST 
 4063 5524 1F2F0000 		_DOLIT DODOES 
 4063      EC540000 
 4064 552c 31540000 		_ADR CALLC 
 4065 5530 1F2F0000 		_DOLIT	UNNEST
 4065      FA2C0000 
 4066 5538 31540000 		_ADR	CALLC 
 4067 553c 052D0000 		_ADR COMPI_NEST
 4068 5540 1F2F0000 		_DOLIT RFROM 
 4068      E02F0000 
 4069 5548 31540000 		_ADR	CALLC
 4070 554c FB2C0000 		_UNNEST 
 4071              	
 4072              	
 4073              	/****************************
 4074              	  DEFER@ ( "name" -- a )
 4075              	  return value of code field 
 4076              	  of defered function. 
 4077              	******************************/
 4078 5550 18550000 		_HEADER DEFERAT,6,"DEFER@"
 4078      06444546 
 4078      45524000 
 4079 555c 504700BF 		_NEST 
 4080 5560 714D0000 		_ADR TICK
 4081 5564 45320000 		_ADR CELLP 
 4082 5568 B52F0000 		_ADR AT 
 4083 556c 15320000 		_ADR ONEM 
ARM GAS  forth.s 			page 188


 4084 5570 FB2C0000 		_UNNEST 
 4085              	
 4086              	/*********************************
 4087              	 DEFER! ( "name1" "name2" -- )
 4088              	 assign an action to a defered word 
 4089              	************************************/
 4090 5574 54550000 		_HEADER DEFERSTO,6,"DEFER!"
 4090      06444546 
 4090      45522100 
 4091 5580 504700BF 		_NEST 
 4092 5584 714D0000 		_ADR TICK 
 4093 5588 05320000 		_ADR ONEP 
 4094 558c 714D0000 		_ADR TICK 
 4095 5590 45320000 		_ADR CELLP 
 4096 5594 A12F0000 		_ADR STORE 
 4097 5598 FB2C0000 		_UNNEST
 4098              	
 4099              	/****************************
 4100              	  DEFER ( "name" -- )
 4101              	  create a defered definition
 4102              	*****************************/
 4103 559c 78550000 		_HEADER DEFER,5,"DEFER"
 4103      05444546 
 4103      455200BF 
 4104 55a8 504700BF 		_NEST 
 4105 55ac F9550000 		_ADR CREAT 
 4106 55b0 1F2F0000 		_DOLIT UNNEST 
 4106      FA2C0000 
 4107 55b8 31540000 		_ADR CALLC 
 4108 55bc 1F2F0000 		_DOLIT DEFER_NOP
 4108      E0550000 
 4109 55c4 05320000 		_ADR ONEP 
 4110 55c8 01370000 		_ADR LAST 
 4111 55cc B52F0000 		_ADR AT 
 4112 55d0 01470000 		_ADR NAMET 
 4113 55d4 45320000 		_ADR CELLP 
 4114 55d8 A12F0000 		_ADR STORE 
 4115 55dc FB2C0000 		_UNNEST 
 4116              	DEFER_NOP:
 4117 55e0 504700BF 		_NEST  
 4118 55e4 1D2F0000 		_ADR NOP 
 4119 55e8 FB2C0000 		_UNNEST 
 4120              	
 4121              	/*********************************
 4122              		:NONAME  
 4123              	/******************************
 4124              	    CREATE	( -- //  string> )
 4125              	 	Compile a new array entry 
 4126              		without allocating code space.
 4127              	***********************************/
 4128 55ec A0550000 		_HEADER CREAT,6,"CREATE"
 4128      06435245 
 4128      41544500 
 4129 55f8 504700BF 		_NEST 
 4130 55fc E1460000 		_ADR	TOKEN
 4131 5600 C9520000 		_ADR	SNAME
 4132 5604 C5530000 		_ADR	OVERT
ARM GAS  forth.s 			page 189


 4133 5608 052D0000 		_ADR	COMPI_NEST 
 4134 560c 1F2F0000 		_DOLIT	DOVAR
 4134      76350000 
 4135 5614 31540000 		_ADR	CALLC
 4136 5618 FB2C0000 		_UNNEST
 4137              	
 4138              	/*******************************
 4139              	    VARIABLE	( -- //  string> )
 4140              	 	Compile a new variable 
 4141              		initialized to 0.
 4142              	***********************************/
 4143 561c F0550000 		_HEADER VARIA,8,"VARIABLE"
 4143      08564152 
 4143      4941424C 
 4143      450000BF 
 4144 562c 504700BF 		_NEST
 4145 5630 F9550000 		_ADR	CREAT
 4146 5634 1F2F0000 		_DOLIT	0
 4146      00000000 
 4147 563c 154E0000 		_ADR	COMMA
 4148 5640 1F2F0000 		_DOLIT UNNEST
 4148      FA2C0000 
 4149 5648 31540000 		_ADR	CALLC  
 4150 564c FB2C0000 		_UNNEST
 4151              	
 4152              	
 4153              	/***********
 4154              	  Tools
 4155              	***********/
 4156              	
 4157              	/*************************
 4158              	    dm+	 ( a u -- a )
 4159              	 	Dump u bytes from a , 
 4160              		leaving a+u on the stack.
 4161              		hidden word used by DUMP 
 4162              	****************************/
 4163              	DMP:
 4164 5650 504700BF 		_NEST
 4165 5654 E9300000 		_ADR	OVER
 4166 5658 1F2F0000 		_DOLIT	4
 4166      04000000 
 4167 5660 31430000 		_ADR	UDOTR			// display address
 4168 5664 1F2F0000 		_DOLIT  0         // don't show base char 
 4168      00000000 
 4169 566c 2D360000 		_ADR    BCHR
 4170 5670 A9300000 		_ADR    DUPP
 4171 5674 B52F0000 		_ADR    AT 
 4172 5678 25300000 		_ADR    TOR      // save original value of BCHAR 
 4173 567c A12F0000 		_ADR    STORE 
 4174 5680 85410000 		_ADR	SPACE
 4175 5684 25300000 		_ADR	TOR			// start count down loop
 4176 5688 872F0000 		_BRAN	PDUM2			// skip first pass
 4176      A8560000 
 4177              	PDUM1:
 4178 5690 A9300000 	    _ADR	DUPP
 4179 5694 D52F0000 		_ADR	CAT
 4180 5698 1F2F0000 		_DOLIT	3
ARM GAS  forth.s 			page 190


 4180      03000000 
 4181 56a0 31430000 		_ADR	UDOTR			// display numeric data
 4182 56a4 05320000 		_ADR	ONEP			// increment address
 4183              	PDUM2:
 4184 56a8 412F0000 	    _ADR	DONXT
 4185 56ac 90560000 		.word	PDUM1	// loop till done
 4186 56b0 E12F0000 		_ADR    RFROM   // restore BCHAR value 
 4187 56b4 2D360000 		_ADR    BCHR 
 4188 56b8 A12F0000 		_ADR    STORE 
 4189 56bc FB2C0000 		_UNNEST
 4190              		.p2align 2 
 4191              	//    DUMP	( a u -- )
 4192              	// 	Dump u bytes from a, in a formatted manner.
 4193              	
 4194              	/**********************
 4195              		DUMP ( a n -- )
 4196              		hex dump memory 
 4197              	*********************/
 4198 56c0 20560000 		_HEADER DUMP,4,"DUMP"
 4198      0444554D 
 4198      500000BF 
 4199 56cc 504700BF 		_NEST
 4200 56d0 1F2F0000 		_DOLIT  15 
 4200      0F000000 
 4201 56d8 A9310000 		_ADR    PLUS 
 4202 56dc 1F2F0000 		_DOLIT  0xFFFFFFF0 
 4202      F0FFFFFF 
 4203 56e4 29310000 		_ADR    ANDD 
 4204 56e8 B9300000 		_ADR    SWAP 
 4205 56ec 1F2F0000 		_DOLIT  0xFFFFFFFC
 4205      FCFFFFFF 
 4206 56f4 29310000 		_ADR    ANDD 
 4207 56f8 B9300000 		_ADR    SWAP 
 4208 56fc 15360000 		_ADR	BASE
 4209 5700 B52F0000 		_ADR	AT
 4210 5704 25300000 		_ADR	TOR
 4211 5708 E93E0000 		_ADR	HEX			// save radix,set hex
 4212 570c 1F2F0000 		_DOLIT	16
 4212      10000000 
 4213 5714 813A0000 		_ADR	SLASH			// change count to lines
 4214 5718 25300000 		_ADR	TOR
 4215 571c 872F0000 		_BRAN	DUMP4			// start count down loop
 4215      4C570000 
 4216              	DUMP1:
 4217 5724 0D420000 	    _ADR	CR
 4218 5728 1F2F0000 		_DOLIT	16
 4218      10000000 
 4219 5730 1D330000 		_ADR	DDUP
 4220 5734 51560000 		_ADR	DMP			// display numeric
 4221 5738 CD320000 		_ADR	ROT
 4222 573c CD320000 		_ADR	ROT
 4223 5740 85410000 		_ADR	SPACE
 4224 5744 85410000 		_ADR	SPACE
 4225 5748 D9410000 		_ADR	TYPEE			// display printable characters
 4226              	DUMP4:
 4227 574c 412F0000 	  _DONXT	DUMP1	// loop till done
 4227      24570000 
ARM GAS  forth.s 			page 191


 4228              	DUMP3:
 4229 5754 99300000 		_ADR	DROP
 4230 5758 E12F0000 		_ADR	RFROM
 4231 575c 15360000 		_ADR	BASE
 4232 5760 A12F0000 		_ADR	STORE			// restore radix
 4233 5764 FB2C0000 		_UNNEST
 4234              	
 4235              	/*******************************
 4236              	   TRACE. display in hexadecimal
 4237              	   TRACE. use a different buffer 
 4238              	   than DOT  to avoid current 
 4239              	   display overwrite.
 4240              	*******************************/ 
 4241              	TDOT: // ( u -- )
 4242 5768 504700BF 		_NEST 
 4243 576c 15360000 		_ADR BASE 
 4244 5770 B52F0000 		_ADR AT 
 4245 5774 25300000 		_ADR TOR
 4246 5778 E93E0000 		_ADR HEX  
 4247 577c A9360000 		_ADR HLD 
 4248 5780 B52F0000 		_ADR AT 
 4249 5784 25300000 		_ADR TOR   // R: base *hold 
 4250 5788 E13B0000 		_ADR HERE 
 4251 578c 1F2F0000 		_DOLIT 160 
 4251      A0000000 
 4252 5794 A9310000 		_ADR PLUS
 4253 5798 A9300000 		_ADR DUPP 
 4254 579c 25300000 		_ADR TOR  
 4255 57a0 A9360000 		_ADR HLD 
 4256 57a4 A12F0000 		_ADR STORE
 4257 57a8 1F2F0000 		_DOLIT 0  
 4257      00000000 
 4258 57b0 393E0000 		_ADR DIGS  
 4259 57b4 99300000 		_ADR DROP
 4260 57b8 1F2F0000 		_DOLIT '$'
 4260      24000000 
 4261 57c0 ED3D0000 		_ADR HOLD 
 4262 57c4 A9360000 		_ADR HLD 
 4263 57c8 B52F0000 		_ADR AT
 4264 57cc E12F0000 		_ADR RFROM   
 4265 57d0 E9300000 		_ADR OVER 
 4266 57d4 B9310000 		_ADR SUBB 
 4267 57d8 85410000 		_ADR SPACE 
 4268 57dc D9410000 		_ADR TYPEE 
 4269 57e0 E12F0000 		_ADR RFROM 
 4270 57e4 A9360000 		_ADR HLD 
 4271 57e8 A12F0000 		_ADR STORE 
 4272 57ec E12F0000 		_ADR RFROM 
 4273 57f0 15360000 		_ADR BASE 
 4274 57f4 A12F0000 		_ADR STORE 
 4275 57f8 FB2C0000 		_UNNEST 
 4276              	
 4277              	/**********************
 4278              	   .S	  ( ... -- ... )
 4279              	 	Display the contents 
 4280              		of the data stack.
 4281              	*************************/
ARM GAS  forth.s 			page 192


 4282 57fc C4560000 		_HEADER DOTS,2,".S"
 4282      022E5300 
 4283 5804 504700BF 		_NEST
 4284 5808 893B0000 		_ADR	DEPTH	// stack depth
 4285 580c 25300000 		_ADR	TOR		// start count down loop
 4286 5810 872F0000 		_BRAN	DOTS2  // skip first pass
 4286      24580000 
 4287              	DOTS1:
 4288 5818 11300000 		_ADR	RAT
 4289 581c AD3B0000 		_ADR	PICK
 4290 5820 69570000 		_ADR	TDOT // index stack, display contents
 4291              	DOTS2:
 4292 5824 412F0000 		_DONXT	DOTS1 // loop till done
 4292      18580000 
 4293 582c 0D420000 		_ADR	CR 
 4294 5830 FB2C0000 		_UNNEST
 4295              	
 4296              	RBASE: 
 4297 5834 47F8046D 		_PUSH 
 4298 5838 4FF68076 		_MOV32 TOS,RPP 
 4298      C2F20106 
 4299 5840 FDF758BA 		_NEXT 
 4300              	
 4301              	
 4302              	/**************************
 4303              	  R.  display return stack 
 4304              	**************************/
 4305              	RDOT: 
 4306 5844 504700BF 		_NEST 
 4307 5848 35580000 		_ADR RBASE
 4308 584c 85300000 		_ADR RPAT 
 4309 5850 B9310000 		_ADR SUBB
 4310 5854 89320000 		_ADR CELLSL   
 4311 5858 1F2F0000 		_DOLIT 2
 4311      02000000 
 4312 5860 B9310000 		_ADR SUBB 
 4313 5864 25300000 		_ADR TOR
 4314 5868 35580000 		_ADR RBASE 
 4315 586c 55320000 	1:	_ADR CELLM 
 4316 5870 A9300000 		_ADR DUPP 
 4317 5874 B52F0000 		_ADR AT 
 4318 5878 69570000 		_ADR TDOT 
 4319 587c E12F0000 		_ADR RFROM   
 4320 5880 15320000 		_ADR ONEM 
 4321 5884 A9300000 		_ADR DUPP
 4322 5888 25300000 		_ADR TOR 
 4323 588c 21340000 		_ADR ZEQUAL   
 4324 5890 5F2F0000 		_QBRAN 1b
 4324      6C580000 
 4325 5898 E12F0000 		_ADR RFROM  
 4326 589c F5320000 		_ADR DDROP
 4327 58a0 0D420000 		_ADR CR   
 4328 58a4 FB2C0000 		_UNNEST 
 4329              	
 4330              	/**************************
 4331              		TRACE ( -- )
 4332              		display stacks content 
ARM GAS  forth.s 			page 193


 4333              	**************************/
 4334 58a8 00580000 		_HEADER TRACE,5,"TRACE"
 4334      05545241 
 4334      434500BF 
 4335 58b4 504700BF 		_NEST
 4336 58b8 0D420000 		_ADR CR 
 4337 58bc 1F2F0000 		_DOLIT '>' 
 4337      3E000000 
 4338 58c4 1F2F0000 		_DOLIT 'S'
 4338      53000000 
 4339 58cc BD2D0000 		_ADR EMIT 
 4340 58d0 BD2D0000 		_ADR EMIT  
 4341 58d4 05580000 		_ADR DOTS
 4342 58d8 1F2F0000 		_DOLIT '>'
 4342      3E000000 
 4343 58e0 1F2F0000 		_DOLIT 'R'
 4343      52000000 
 4344 58e8 BD2D0000 		_ADR EMIT 
 4345 58ec BD2D0000 		_ADR EMIT 
 4346 58f0 45580000 		_ADR RDOT 
 4347 58f4 FB2C0000 		_UNNEST 
 4348              	
 4349              	
 4350              	/****************************
 4351              	  >BODY  ( xt -- adr )
 4352              	  get parameter field address
 4353              	  from code field address 
 4354              	****************************/
 4355 58f8 AC580000 		_HEADER TOBODY,5,">BODY"
 4355      053E424F 
 4355      445900BF 
 4356 5904 06F10806 		add TOS,#8 
 4357 5908 FDF7F4B9 		_NEXT 		
 4358              	
 4359              	/*****************************
 4360              	    >NAME	( ca -- na | F )
 4361              	 	Convert code address 
 4362              		to a name address.
 4363              	*****************************/
 4364 590c FC580000 		_HEADER TNAME,5,">NAME"
 4364      053E4E41 
 4364      4D4500BF 
 4365 5918 504700BF 		_NEST
 4366 591c 25300000 		_ADR	TOR			//  
 4367 5920 C1360000 		_ADR	CNTXT			//  va
 4368 5924 B52F0000 		_ADR	AT			//  na
 4369              	TNAM1:
 4370 5928 A9300000 		_ADR	DUPP			//  na na
 4371 592c 5F2F0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4371      5C590000 
 4372 5934 A9300000 		_ADR	DUPP			//  na na
 4373 5938 01470000 		_ADR	NAMET			//  na ca
 4374 593c 11300000 		_ADR	RAT			//  na ca code
 4375 5940 51310000 		_ADR	XORR			//  na f --
 4376 5944 5F2F0000 		_QBRAN	TNAM2
 4376      5C590000 
 4377 594c 55320000 		_ADR	CELLM			//  la 
ARM GAS  forth.s 			page 194


 4378 5950 B52F0000 		_ADR	AT			//  next_na
 4379 5954 872F0000 		_BRAN	TNAM1
 4379      28590000 
 4380              	TNAM2:	
 4381 595c E12F0000 		_ADR	RFROM
 4382 5960 99300000 		_ADR	DROP			//  0|na --
 4383 5964 FB2C0000 		_UNNEST			// 0
 4384              	
 4385              	/********************************
 4386              	    .ID	 ( na -- )
 4387              	 	Display the name at address.
 4388              	********************************/
 4389 5968 10590000 		_HEADER DOTID,3,".ID"
 4389      032E4944 
 4390 5970 504700BF 		_NEST
 4391 5974 B9320000 		_ADR	QDUP			// if zero no name
 4392 5978 5F2F0000 		_QBRAN	DOTI1
 4392      98590000 
 4393 5980 49350000 		_ADR	COUNT
 4394 5984 1F2F0000 		_DOLIT	0x1F
 4394      1F000000 
 4395 598c 29310000 		_ADR	ANDD			// mask lexicon bits
 4396 5990 D9410000 		_ADR	TYPEE
 4397 5994 FB2C0000 		_UNNEST			// display name string
 4398              	DOTI1:
 4399 5998 69420000 		_DOTQP	9," {noName}"
 4399      09207B6E 
 4399      6F4E616D 
 4399      657D00BF 
 4400 59a8 FB2C0000 		_UNNEST
 4401              	
 4402              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4403              	.if WANT_SEE 
 4404              	/*******************************
 4405              	    SEE	 ( -- //  string> )
 4406              	 	A simple decompiler.
 4407              	*******************************/
 4408              		_HEADER SEE,3,"SEE"
 4409              		_NEST
 4410              		_ADR	TICK	//  ca --, starting address
 4411              		_ADR	CR	
 4412              		_DOLIT	20
 4413              		_ADR	TOR
 4414              	SEE1:
 4415              		_ADR	CELLP			//  a
 4416              		_ADR	DUPP			//  a a
 4417              		_ADR	DECOMP		//  a
 4418              		_DONXT	SEE1
 4419              		_ADR	DROP
 4420              		_UNNEST
 4421              	
 4422              	/*************************
 4423              	 	DECOMPILE ( a -- )
 4424              	 	Convert code in a.  
 4425              		Display name of command or as data.
 4426              	*************************************/
 4427              		_HEADER DECOMP,9,"DECOMPILE"
ARM GAS  forth.s 			page 195


 4428              		_NEST
 4429              		_ADR	DUPP			//  a a
 4430              	// 	_ADR	TOR			//  a
 4431              		_ADR	AT			//  a code
 4432              		_ADR	DUPP			//  a code code
 4433              		_DOLIT	0xF800D000 //0xF800F800
 4434              		_ADR	ANDD
 4435              		_DOLIT	0xF000D000 //0xF800F000
 4436              		_ADR	EQUAL			//  a code ?
 4437              		_ADR	INVER 
 4438              		_QBRAN	DECOM2	//  not a command
 4439              		//  a valid_code --, extract address and display name
 4440              		MOVW	IP,#0xFFE
 4441              		MOV	WP,TOS
 4442              		LSL	TOS,TOS,#21		//  get bits 22-12
 4443              		ASR	TOS,TOS,#9		//  with sign extension
 4444              		LSR	WP,WP,#15		//  get bits 11-1
 4445              		AND	WP,WP,IP		//  retain only bits 11-1
 4446              		ORR	TOS,TOS,WP		//  get bits 22-1
 4447              		NOP
 4448              		_ADR	OVER			//  a offset a
 4449              		_ADR	PLUS			//  a target-4
 4450              		_ADR	CELLP			//  a target
 4451              		_ADR	TNAME			//  a na/0 --, is it a name?
 4452              		_ADR	QDUP			//  name address or zero
 4453              		_QBRAN	DECOM1
 4454              		_ADR	SPACE			//  a na
 4455              		_ADR	DOTID			//  a --, display name
 4456              	// 	_ADR	RFROM			//  a
 4457              		_ADR	DROP
 4458              		_UNNEST
 4459              	DECOM1:	// _ADR	RFROM		//  a
 4460              		_ADR	AT			//  data
 4461              		_ADR	UDOT			//  display data
 4462              		_UNNEST
 4463              	DECOM2:
 4464              		_ADR	UDOT
 4465              	// 	_ADR	RFROM
 4466              		_ADR	DROP
 4467              		_UNNEST
 4468              	.endif 
 4469              	
 4470              	
 4471              	/*********************
 4472              	    WORDS	( -- )
 4473              	 	Display the names 
 4474              		in the context vocabulary.
 4475              	*******************************/
 4476 59ac 6C590000 		_HEADER WORDS,5,"WORDS"
 4476      05574F52 
 4476      445300BF 
 4477 59b8 504700BF 		_NEST
 4478 59bc 0D420000 		_ADR	CR
 4479 59c0 C1360000 		_ADR	CNTXT
 4480 59c4 B52F0000 		_ADR	AT			// only in context
 4481              	WORS1:
 4482 59c8 B9320000 		_ADR	QDUP			// ?at end of list
ARM GAS  forth.s 			page 196


 4483 59cc 5F2F0000 		_QBRAN	WORS2
 4483      F0590000 
 4484 59d4 A9300000 		_ADR	DUPP
 4485 59d8 85410000 		_ADR	SPACE
 4486 59dc 71590000 		_ADR	DOTID			// display a name
 4487 59e0 55320000 		_ADR	CELLM
 4488 59e4 B52F0000 		_ADR	AT
 4489 59e8 872F0000 		_BRAN	WORS1
 4489      C8590000 
 4490              	WORS2:
 4491 59f0 FB2C0000 		_UNNEST
 4492              	
 4493              	
 4494              	/*************************
 4495              		MARK <string> ( -- )
 4496              	    create forget point 
 4497              		in dictionary 
 4498              	*************************/	
 4499 59f4 B0590000 		_HEADER MARK,4,"MARK"
 4499      044D4152 
 4499      4B0000BF 
 4500 5a00 504700BF 		_NEST
 4501 5a04 F9550000 		_ADR CREAT 
 4502 5a08 ED540000 		_ADR DODOES 
 4503 5a0c FB2C0000 		_UNNEST
 4504 5a10 504700BF 		_NEST  
 4505 5a14 E12F0000 		_ADR RFROM 
 4506 5a18 1F2F0000 		_DOLIT 8
 4506      08000000 
 4507 5a20 B9310000 		_ADR SUBB
 4508 5a24 19590000 		_ADR TNAME
 4509 5a28 55320000 		_ADR CELLM
 4510 5a2c B52F0000 		_ADR AT  
 4511 5a30 01370000 		_ADR LAST 
 4512 5a34 A12F0000 		_ADR STORE 
 4513 5a38 C5530000 		_ADR OVERT
 4514 5a3c FB2C0000 		_UNNEST 
 4515              	
 4516              	/*********************************
 4517              		ARRAY "name" ( n -- )
 4518              	    create an array of n elements 
 4519              	*********************************/
 4520 5a40 F8590000 		_HEADER ARRAY,5,"ARRAY"
 4520      05415252 
 4520      415900BF 
 4521 5a4c 504700BF 		_NEST 
 4522 5a50 E1460000 		_ADR	TOKEN
 4523 5a54 C9520000 		_ADR	SNAME
 4524 5a58 C5530000 		_ADR	OVERT
 4525 5a5c 052D0000 		_ADR	COMPI_NEST
 4526 5a60 1F2F0000 		_DOLIT	DO_ARRAY
 4526      8C5A0000 
 4527 5a68 31540000 		_ADR	CALLC
 4528 5a6c 1F2F0000 		_DOLIT	UNNEST 
 4528      FA2C0000 
 4529 5a74 31540000 		_ADR	CALLC  
 4530 5a78 1F2F0000 		_DOLIT  4 
ARM GAS  forth.s 			page 197


 4530      04000000 
 4531 5a80 C9310000 		_ADR    STAR 
 4532 5a84 FD4D0000 		_ADR    ALLOT 
 4533 5a88 FB2C0000 		_UNNEST 	
 4534              	
 4535              	// does> du array
 4536              	DO_ARRAY:
 4537 5a8c 504700BF 		_NEST  
 4538 5a90 1F2F0000 		_DOLIT 4 
 4538      04000000 
 4539 5a98 C9310000 		_ADR STAR  
 4540 5a9c 11300000 		_ADR RAT  
 4541 5aa0 45320000 		_ADR CELLP 
 4542 5aa4 A9310000 		_ADR PLUS  
 4543 5aa8 FB2C0000 		_UNNEST 
 4544              	
 4545              	
 4546              	/****************
 4547              	  cold start
 4548              	*****************/
 4549              	
 4550              	/**********************************
 4551              	    VER	 ( -- n )
 4552              	 	Return the version 
 4553              		number of this implementation.
 4554              	hidden word used by COLD
 4555              	**********************************/
 4556              	VERSN:
 4557 5aac 504700BF 		_NEST
 4558 5ab0 1F2F0000 		_DOLIT	VER*256+EXT
 4558      00010000 
 4559 5ab8 FB2C0000 		_UNNEST
 4560              	
 4561              	/*********************
 4562              	    hi	  ( -- )
 4563              	 	Display the sign-on 
 4564              		message.
 4565              	***********************/
 4566 5abc 445A0000 		_HEADER HI,2,"HI"
 4566      02484900 
 4567 5ac4 504700BF 		_NEST
 4568 5ac8 0D420000 		_ADR	CR	// initialize I/O
 4569 5acc 69420000 		_DOTQP	17, "beyond Jupiter, v" 
 4569      11626579 
 4569      6F6E6420 
 4569      4A757069 
 4569      7465722C 
 4570 5ae4 15360000 		_ADR	BASE
 4571 5ae8 B52F0000 		_ADR	AT
 4572 5aec E93E0000 		_ADR	HEX	// save radix
 4573 5af0 AD5A0000 		_ADR	VERSN
 4574 5af4 CD3D0000 		_ADR	BDIGS
 4575 5af8 1F2F0000 		_DOLIT  0 
 4575      00000000 
 4576 5b00 193E0000 		_ADR	DIG
 4577 5b04 193E0000 		_ADR	DIG
 4578 5b08 1F2F0000 		_DOLIT	'.'
ARM GAS  forth.s 			page 198


 4578      2E000000 
 4579 5b10 ED3D0000 		_ADR	HOLD
 4580 5b14 393E0000 		_ADR	DIGS
 4581 5b18 953E0000 		_ADR	EDIGS
 4582 5b1c D9410000 		_ADR	TYPEE	// format version number
 4583 5b20 15360000 		_ADR	BASE
 4584 5b24 A12F0000 		_ADR	STORE
 4585 5b28 0D420000 		_ADR	CR
 4586 5b2c FB2C0000 		_UNNEST			// restore radix
 4587              	
 4588              	/***********************
 4589              	   HI_BOTH ( -- )
 4590              	   display sign-on 
 4591              	   on both CONSOLE
 4592              	***********************/
 4593              	HI_BOTH:
 4594 5b30 504700BF 	    _NEST 
 4595 5b34 410A0000 		_ADR LOCAL 
 4596 5b38 710A0000 		_ADR CONSOLE 
 4597 5b3c C55A0000 		_ADR HI 
 4598 5b40 590A0000 		_ADR SERIAL 
 4599 5b44 710A0000 		_ADR CONSOLE 
 4600 5b48 C55A0000 		_ADR HI
 4601 5b4c FB2C0000 		_UNNEST 
 4602              	
 4603              	/**********************
 4604              	 check if PS2 keyboard 
 4605              	 present.
 4606              	**********************/
 4607              	PS2_QUERY: 
 4608 5b50 504700BF 		_NEST 
 4609 5b54 1F2F0000 		_DOLIT 400 
 4609      90010000 
 4610 5b5c 552E0000 		_ADR PAUSE
 4611 5b60 61180000 		_ADR PS2_QKEY
 4612 5b64 5F2F0000 		_QBRAN 1f
 4612      805B0000 
 4613 5b6c 1F2F0000 		_DOLIT BAT_OK 
 4613      AA000000 
 4614 5b74 51310000 		_ADR XORR 
 4615 5b78 5F2F0000 		_QBRAN 9f 
 4615      C45B0000 
 4616 5b80 491A0000 	1:	_ADR KBD_RST
 4617 5b84 1F2F0000 		_DOLIT BAT_OK 
 4617      AA000000 
 4618 5b8c 51310000 		_ADR XORR  
 4619 5b90 5F2F0000 		_QBRAN 9f  
 4619      C45B0000 
 4620              	// no ps2 keyboard 
 4621              	// swith to serial console
 4622 5b98 0D420000 		_ADR CR 
 4623 5b9c 69420000 		_DOTQP 25,"no PS2 keyboard detected."
 4623      196E6F20 
 4623      50533220 
 4623      6B657962 
 4623      6F617264 
 4624 5bbc 590A0000 		_ADR SERIAL 
ARM GAS  forth.s 			page 199


 4625 5bc0 710A0000 		_ADR CONSOLE 
 4626 5bc4 FB2C0000 	9:	_UNNEST 
 4627              	
 4628              	/*************************
 4629              	   check PA8 to 
 4630              	   select console 
 4631              	   PA8 -> low  LOCAL 
 4632              	   PA8 -> high SERIAL 
 4633              	*************************/
 4634              	IF_SENSE:
 4635 5bc8 504700BF 		_NEST 
 4636 5bcc 410A0000 		_ADR LOCAL 
 4637 5bd0 1F2F0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4637      10000240 
 4638 5bd8 B52F0000 		_ADR AT 
 4639 5bdc 1F2F0000 		_DOLIT (1<<8)
 4639      00010000 
 4640 5be4 29310000 		_ADR ANDD 
 4641 5be8 5F2F0000 		_QBRAN 9f 
 4641      F45B0000 
 4642 5bf0 05320000 		_ADR ONEP 
 4643 5bf4 710A0000 	9:  _ADR CONSOLE 
 4644 5bf8 FB2C0000 		_UNNEST 
 4645              	
 4646              	/****************************
 4647              	   display READY on active
 4648              	   console
 4649              	***************************/
 4650              	READY:
 4651 5bfc 504700BF 	    _NEST 
 4652 5c00 69420000 		_DOTQP 5,"READY"
 4652      05524541 
 4652      445900BF 
 4653 5c0c 0D420000 		_ADR  CR 
 4654 5c10 FB2C0000 	    _UNNEST 
 4655              	
 4656              	/********************
 4657              	    COLD	( -- )
 4658              	 	The high level cold 
 4659              		start sequence.
 4660              	**************************/
 4661 5c14 C05A0000 		.word	LINK 
 4662              		LINK = . 
 4663 5c18 04       	_LASTN:	.byte  4
 4664 5c19 434F4C44 		.ascii "COLD"
 4665 5c1d 0000BF   		.p2align 2	
 4666              	COLD:
 4667 5c20 00B5FAF7 		_CALL forth_init 
 4667      89FC5DF8 
 4667      04EB
 4668 5c2a DFF85CC0 		ldr IP,=COLD1 
 4669 5c2e FDF761B8 		_NEXT
 4670 5c32 00BF     		.p2align 2 
 4671              	COLD1:
 4672 5c34 1F2F0000 		_DOLIT  0 
 4672      00000000 
 4673 5c3c 892E0000 		_ADR ULED // turn off user LED 
ARM GAS  forth.s 			page 200


 4674 5c40 1F2F0000 		_DOLIT	UZERO
 4674      64080000 
 4675 5c48 1F2F0000 		_DOLIT	UPP
 4675      00000020 
 4676 5c50 1F2F0000 		_DOLIT	ULAST-UZERO
 4676      BC000000 
 4677 5c58 A53C0000 		_ADR	MOVE 			// initialize user area
 4678 5c5c 994C0000 		_ADR	PRESE			// initialize stack and TIB
 4679 5c60 F51C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4680 5c64 515B0000 		_ADR 	PS2_QUERY  
 4681 5c68 FD350000 		_ADR	TBOOT
 4682 5c6c 553C0000 		_ADR	ATEXE			// application boot
 4683 5c70 C5530000 		_ADR	OVERT
 4684 5c74 C95B0000 		_ADR	IF_SENSE
 4685 5c78 FD5B0000 		_ADR    READY 
 4686 5c7c 872F0000 		_BRAN	QUIT			// start interpretation
 4686      D04C0000 
 4687              	COLD2:
 4688              		.p2align 2 	
 4689              	CTOP:
 4690 5c84 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4691              	
 4692              	
 4693 5c88 345C0000 	  .end 
ARM GAS  forth.s 			page 201


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 202


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 203


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 204


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 205


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 206


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020000000 UPP
          macros.inc:54     *ABS*:0000000020000512 DTOP
          macros.inc:55     *ABS*:000000002001812c DEND
          macros.inc:56     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:58     *ABS*:0000000000000040 COMPO
          macros.inc:59     *ABS*:0000000000000080 IMEDD
          macros.inc:60     *ABS*:00000000ffffff1f MASKK
          macros.inc:62     *ABS*:0000000000000004 CELLL
          macros.inc:63     *ABS*:000000000000000a BASEE
          macros.inc:64     *ABS*:0000000000000008 VOCSS
          macros.inc:66     *ABS*:0000000000000008 BKSPP
          macros.inc:67     *ABS*:000000000000000a LF
          macros.inc:68     *ABS*:000000000000000d CRR
          macros.inc:69     *ABS*:000000000000001b ERR
          macros.inc:70     *ABS*:0000000000000027 TIC
          macros.inc:75     *ABS*:0000000000000004 RNDSEED
          macros.inc:76     *ABS*:0000000000000008 TICKS
          macros.inc:77     *ABS*:000000000000000c CD_TIMER
          macros.inc:78     *ABS*:0000000000000010 BOOT
          macros.inc:79     *ABS*:0000000000000014 STDIN
          macros.inc:80     *ABS*:0000000000000018 STDOUT
          macros.inc:81     *ABS*:000000000000001c NBASE
          macros.inc:82     *ABS*:0000000000000020 BCHAR
          macros.inc:83     *ABS*:0000000000000024 TMP
          macros.inc:84     *ABS*:0000000000000028 CSPAN
ARM GAS  forth.s 			page 207


          macros.inc:85     *ABS*:000000000000002c TOIN
          macros.inc:86     *ABS*:0000000000000030 SRC
          macros.inc:87     *ABS*:0000000000000030 NTIBB
          macros.inc:88     *ABS*:0000000000000034 TIBUF
             forth.s:3285   .text:0000000000004c54 EVAL
          macros.inc:90     *ABS*:000000000000003c VHOLD
          macros.inc:91     *ABS*:0000000000000040 CTXT
          macros.inc:92     *ABS*:0000000000000044 FORTH_CTOP
          macros.inc:93     *ABS*:0000000000000048 USER_CTOP
          macros.inc:94     *ABS*:000000000000004c LASTN
          macros.inc:95     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:96     *ABS*:0000000000000050 RX_QUEUE
          macros.inc:97     *ABS*:0000000000000060 RX_HEAD
          macros.inc:98     *ABS*:0000000000000064 RX_TAIL
          macros.inc:99     *ABS*:0000000000000068 VID_CNTR
          macros.inc:100    *ABS*:000000000000006c VID_STATE
          macros.inc:101    *ABS*:0000000000000070 VID_FIELD
          macros.inc:102    *ABS*:0000000000000074 VID_BUFFER
          macros.inc:103    *ABS*:0000000000000078 KBD_STRUCT
          macros.inc:104    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:105    *ABS*:000000000000007c KBD_QUEUE
          macros.inc:106    *ABS*:000000000000008c KBD_QHEAD
          macros.inc:107    *ABS*:0000000000000090 KBD_QTAIL
          macros.inc:108    *ABS*:0000000000000094 ROW
          macros.inc:109    *ABS*:0000000000000098 COL
          macros.inc:110    *ABS*:000000000000009c BK_COLOR
          macros.inc:111    *ABS*:00000000000000a0 PEN_COLOR
          macros.inc:112    *ABS*:00000000000000a4 VFPSW
          macros.inc:113    *ABS*:00000000000000a8 VFBASE
          macros.inc:114    *ABS*:00000000000000ac BEEP_DTMR
          macros.inc:115    *ABS*:00000000000000b0 CSTATE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000c68 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:000000000000094c uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001544 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002cf4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:3306   .text:0000000000004c98 PRESE
             forth.s:2453   .text:0000000000004268 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
ARM GAS  forth.s 			page 208


             forth.s:133    .text:0000000000002d40 CFSR
             forth.s:543    .text:00000000000030a8 DUPP
             forth.s:478    .text:0000000000003024 TOR
             forth.s:326    .text:0000000000002f1e DOLIT
             forth.s:1208   .text:0000000000003614 BASE
             forth.s:412    .text:0000000000002fa0 STORE
             forth.s:2537   .text:0000000000004364 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:449    .text:0000000000002fe0 RFROM
             forth.s:607    .text:0000000000003128 ANDD
             forth.s:367    .text:0000000000002f5e QBRAN
             forth.s:145    .text:0000000000002d60 BFAR
             forth.s:179    .text:0000000000002dbc EMIT
             forth.s:2359   .text:0000000000004184 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:000000000000204c FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2405   .text:000000000000420c CR
             forth.s:422    .text:0000000000002fb4 AT
             forth.s:673    .text:00000000000031b8 SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2555   .text:0000000000004398 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:803    .text:00000000000032b8 QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:664    .text:00000000000031a8 PLUS
             forth.s:1110   .text:0000000000003548 COUNT
             forth.s:2387   .text:00000000000041d8 TYPEE
             forth.s:947    .text:00000000000033f0 CLZ
             forth.s:551    .text:00000000000030b8 SWAP
             forth.s:655    .text:0000000000003198 LSHIFT
               fpu.s:123    .text:000000000000206c CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3322   .text:0000000000004cd0 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
ARM GAS  forth.s 			page 209


             forth.s:3158   .text:0000000000004adc ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:262    .text:0000000000002e88 ULED
             forth.s:1181   .text:00000000000035cc MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:646    .text:0000000000003180 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:0000000000001fee fpu_init
          ser-term.s:56     .text:000000000000097a ser_init
             tvout.s:74     .text:0000000000000bb8 tv_init
           ps2_kbd.s:307    .text:0000000000001764 kbd_init
         spi-flash.s:41     .text:0000000000001b78 flash_spi_init
             forth.s:4666   .text:0000000000005c20 COLD
             forth.s:83     .text:0000000000002cec NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:909    .text:0000000000000920 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
              init.s:869    .text:0000000000000864 $d
             forth.s:4593   .text:0000000000005b30 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001860 PS2_QKEY
             tvout.s:563    .text:0000000000001128 TV_EMIT
             forth.s:3219   .text:0000000000004b60 INTER
ARM GAS  forth.s 			page 210


             forth.s:4663   .text:0000000000005c18 _LASTN
             forth.s:4689   .text:0000000000005c84 CTOP
             forth.s:4662   .text:0000000000005c18 LINK
              init.s:914    .text:0000000000000920 $d
          ser-term.s:33     .text:000000000000094c $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000009d2 $d
          ser-term.s:90     .text:00000000000009d6 _SER_QKEY
          ser-term.s:90     .text:00000000000009e0 SER_QKEY
          ser-term.s:110    .text:0000000000000a0c $d
          ser-term.s:110    .text:0000000000000a10 _SER_EMIT
          ser-term.s:110    .text:0000000000000a1c SER_EMIT
          ser-term.s:124    .text:0000000000000a36 $d
          ser-term.s:124    .text:0000000000000a3a _LOCAL
          ser-term.s:124    .text:0000000000000a40 $t
          ser-term.s:124    .text:0000000000000a40 LOCAL
          ser-term.s:133    .text:0000000000000a4c $d
          ser-term.s:133    .text:0000000000000a50 _SERIAL
          ser-term.s:133    .text:0000000000000a58 SERIAL
          ser-term.s:142    .text:0000000000000a64 $d
          ser-term.s:142    .text:0000000000000a68 _CONSOLE
          ser-term.s:142    .text:0000000000000a70 $t
          ser-term.s:142    .text:0000000000000a70 CONSOLE
          ser-term.s:164    .text:0000000000000a90 $d
          ser-term.s:164    .text:0000000000000a94 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000aa0 ANSI_PARAM
          ser-term.s:166    .text:0000000000000aa4 $d
             forth.s:714    .text:0000000000003204 ONEP
             forth.s:1653   .text:0000000000003a48 SLMOD
             forth.s:396    .text:0000000000002f86 BRAN
             forth.s:722    .text:0000000000003214 ONEM
             forth.s:90     .text:0000000000002cfa UNNEST
          ser-term.s:191    .text:0000000000000b10 _ANSI_ESC
          ser-term.s:191    .text:0000000000000b18 ANSI_ESC
          ser-term.s:193    .text:0000000000000b1c $d
          ser-term.s:203    .text:0000000000000b3c _SER_AT
          ser-term.s:203    .text:0000000000000b44 SER_AT
          ser-term.s:205    .text:0000000000000b48 $d
          ser-term.s:219    .text:0000000000000b78 _SER_CLS
          ser-term.s:219    .text:0000000000000b80 $t
          ser-term.s:219    .text:0000000000000b80 SER_CLS
          ser-term.s:221    .text:0000000000000b84 $d
          ser-term.s:228    .text:0000000000000ba8 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
ARM GAS  forth.s 			page 211


             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000bb8 $t
             tvout.s:150    .text:0000000000000c94 state_vsync
             tvout.s:191    .text:0000000000000ce8 state_pre_video
             tvout.s:202    .text:0000000000000cfa state_video_out
             tvout.s:237    .text:0000000000000d58 state_post_video
             tvout.s:254    .text:0000000000000d7e tv_isr_exit
             tvout.s:180    .text:0000000000000cce sync_end
             tvout.s:246    .text:0000000000000d6a frame_end
             tvout.s:264    .text:0000000000000d80 $d
             tvout.s:264    .text:0000000000000d84 _BACKCOLOR
             tvout.s:264    .text:0000000000000d90 BACKCOLOR
             tvout.s:271    .text:0000000000000d9c $d
             tvout.s:271    .text:0000000000000da0 _PENCOLOR
             tvout.s:271    .text:0000000000000daa $t
             tvout.s:271    .text:0000000000000dac PENCOLOR
             tvout.s:278    .text:0000000000000db8 $d
             tvout.s:278    .text:0000000000000dbc _CURSOR_COL
             tvout.s:278    .text:0000000000000dc4 CURSOR_COL
             tvout.s:285    .text:0000000000000dd0 $d
             tvout.s:285    .text:0000000000000dd4 _CURSOR_ROW
             tvout.s:285    .text:0000000000000dd8 $t
             tvout.s:285    .text:0000000000000dd8 CURSOR_ROW
             tvout.s:292    .text:0000000000000de4 $d
             tvout.s:292    .text:0000000000000de8 _ROWY
             tvout.s:292    .text:0000000000000dee $t
             tvout.s:292    .text:0000000000000df0 ROWY
             tvout.s:299    .text:0000000000000dfc $d
             tvout.s:299    .text:0000000000000e00 _COLX
             tvout.s:299    .text:0000000000000e06 $t
             tvout.s:299    .text:0000000000000e08 COLX
             tvout.s:306    .text:0000000000000e14 $d
             tvout.s:306    .text:0000000000000e18 _FONT
             tvout.s:306    .text:0000000000000e20 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000e2c $d
             tvout.s:313    .text:0000000000000e30 _VIDBUFF
             tvout.s:313    .text:0000000000000e38 $t
             tvout.s:313    .text:0000000000000e38 VIDBUFF
             tvout.s:325    .text:0000000000000e42 $d
             tvout.s:325    .text:0000000000000e46 _PLOT
             tvout.s:325    .text:0000000000000e4c PLOT
ARM GAS  forth.s 			page 212


             tvout.s:373    .text:0000000000000ed0 plot_op
             tvout.s:341    .text:0000000000000e78 op_back
             tvout.s:350    .text:0000000000000e92 op_pen
             tvout.s:359    .text:0000000000000eac op_invert
             tvout.s:363    .text:0000000000000eb4 op_xor
             tvout.s:373    .text:0000000000000ed0 $d
             tvout.s:378    .text:0000000000000ed8 _VSYNC
             tvout.s:378    .text:0000000000000ede $t
             tvout.s:378    .text:0000000000000ee0 VSYNC
             tvout.s:386    .text:0000000000000eea $d
             tvout.s:386    .text:0000000000000eee _CLS
             tvout.s:386    .text:0000000000000ef2 $t
             tvout.s:386    .text:0000000000000ef4 CLS
             tvout.s:410    .text:0000000000000f36 $d
             tvout.s:410    .text:0000000000000f3a _CLRLINE
             tvout.s:410    .text:0000000000000f42 $t
             tvout.s:410    .text:0000000000000f44 CLRLINE
             tvout.s:412    .text:0000000000000f48 $d
             forth.s:682    .text:00000000000031c8 STAR
             forth.s:1935   .text:0000000000003cec FILL
             tvout.s:427    .text:0000000000000f7c _SCROLLUP
             tvout.s:427    .text:0000000000000f88 SCROLLUP
             tvout.s:429    .text:0000000000000f8c $d
             forth.s:1903   .text:0000000000003ca4 MOVE
             tvout.s:448    .text:0000000000000fd4 _SCROLLDOWN
             tvout.s:448    .text:0000000000000fe0 SCROLLDOWN
             tvout.s:450    .text:0000000000000fe4 $d
             tvout.s:467    .text:0000000000001024 _TV_CRLF
             tvout.s:467    .text:000000000000102c $t
             tvout.s:467    .text:000000000000102c TV_CRLF
             tvout.s:482    .text:000000000000104e $d
             tvout.s:482    .text:0000000000001052 _RIGHT
             tvout.s:482    .text:0000000000001058 $t
             tvout.s:482    .text:0000000000001058 RIGHT
             tvout.s:495    .text:000000000000106c $d
             tvout.s:495    .text:0000000000001070 _LEFT
             tvout.s:495    .text:0000000000001078 LEFT
             tvout.s:511    .text:00000000000010a4 FONT_PIXEL
             tvout.s:518    .text:00000000000010b4 INCR_X
             tvout.s:525    .text:00000000000010c0 NEXT_PIXEL
             tvout.s:534    .text:00000000000010c8 CHAR_ROW
             tvout.s:536    .text:00000000000010cc $d
             forth.s:853    .text:000000000000331c DDUP
             forth.s:469    .text:0000000000003010 RAT
             forth.s:348    .text:0000000000002f40 DONXT
             forth.s:844    .text:0000000000003308 TDROP
             tvout.s:551    .text:0000000000001108 CHAR_FONT
             tvout.s:552    .text:0000000000001108 $t
             tvout.s:563    .text:000000000000111c $d
             tvout.s:563    .text:0000000000001120 _TV_EMIT
             tvout.s:563    .text:0000000000001128 $t
             tvout.s:565    .text:000000000000112c $d
             forth.s:1006   .text:000000000000346c ULESS
             tvout.s:593    .text:00000000000011b0 CTRL_KEY
             forth.s:813    .text:00000000000032cc ROT
             forth.s:440    .text:0000000000002fd4 CAT
             tvout.s:660    .text:0000000000001298 SHOW_CURSOR
ARM GAS  forth.s 			page 213


             tvout.s:691    .text:0000000000001320 HIDE_CURSOR
             forth.s:981    .text:0000000000003434 EQUAL
             tvout.s:650    .text:0000000000001278 BACK_SPACE
             forth.s:535    .text:0000000000003098 DROP
             tvout.s:618    .text:0000000000001220 CAR_RET
             tvout.s:629    .text:0000000000001238 LN_FEED
             tvout.s:619    .text:0000000000001220 $t
             tvout.s:620    .text:0000000000001224 $d
             tvout.s:630    .text:0000000000001238 $t
             tvout.s:631    .text:000000000000123c $d
             forth.s:625    .text:0000000000003150 XORR
             tvout.s:651    .text:0000000000001278 $t
             tvout.s:652    .text:000000000000127c $d
             tvout.s:660    .text:000000000000128c _SHOW_CURSOR
             tvout.s:660    .text:0000000000001298 $t
             tvout.s:663    .text:000000000000129c $d
             forth.s:795    .text:00000000000032a8 TWOSL
             forth.s:430    .text:0000000000002fc0 CSTOR
             forth.s:835    .text:00000000000032f4 DDROP
             tvout.s:691    .text:0000000000001314 _HIDE_CURSOR
             tvout.s:691    .text:0000000000001320 $t
             tvout.s:694    .text:0000000000001324 $d
             forth.s:616    .text:000000000000313c ORR
             tvout.s:704    .text:000000000000134c _TV_AT
             tvout.s:704    .text:0000000000001352 $t
             tvout.s:704    .text:0000000000001354 TV_AT
             tvout.s:719    .text:0000000000001378 $d
             tvout.s:719    .text:000000000000137c _INPUT
             tvout.s:719    .text:0000000000001382 $t
             tvout.s:719    .text:0000000000001384 INPUT
             tvout.s:721    .text:0000000000001388 $d
             forth.s:1835   .text:0000000000003bf8 PAD
             forth.s:3104   .text:0000000000004a28 ACCEP
             forth.s:576    .text:00000000000030e8 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000013b4 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
ARM GAS  forth.s 			page 214


       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
ARM GAS  forth.s 			page 215


       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000013c0 sc_ascii
ARM GAS  forth.s 			page 216


         mcSaite.inc:100    .text:0000000000001474 shifted
         mcSaite.inc:151    .text:00000000000014d4 altchar
         mcSaite.inc:167    .text:00000000000014e4 extended
         mcSaite.inc:191    .text:000000000000150c controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007a KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000079 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000078 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007b KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:0000000000001542 $t
           ps2_kbd.s:179    .text:000000000000166e send_bit
           ps2_kbd.s:107    .text:00000000000015a4 start_bit
           ps2_kbd.s:118    .text:00000000000015c8 parity_bit
           ps2_kbd.s:125    .text:00000000000015dc stop_bit
           ps2_kbd.s:152    .text:0000000000001632 store_code
           ps2_kbd.s:253    .text:0000000000001702 do_async_key
           ps2_kbd.s:204    .text:00000000000016b2 send_parity
           ps2_kbd.s:211    .text:00000000000016c4 send_stop
           ps2_kbd.s:218    .text:00000000000016ce rx_ack_bit
           ps2_kbd.s:236    .text:00000000000016ee is_async_key
           ps2_kbd.s:286    .text:0000000000001752 async_keys
           ps2_kbd.s:378    .text:0000000000001838 table_scan
           ps2_kbd.s:260    .text:0000000000001714 set_async_key
           ps2_kbd.s:295    .text:0000000000001760 async_jump
           ps2_kbd.s:265    .text:0000000000001722 shift_key
           ps2_kbd.s:273    .text:0000000000001732 set_reset
           ps2_kbd.s:268    .text:0000000000001728 ctrl_key
           ps2_kbd.s:271    .text:000000000000172e alt_key
           ps2_kbd.s:287    .text:0000000000001752 $d
           ps2_kbd.s:340    .text:00000000000017e0 $d
           ps2_kbd.s:340    .text:00000000000017e4 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000017ee $t
           ps2_kbd.s:340    .text:00000000000017f0 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001800 keycode
           ps2_kbd.s:365    .text:0000000000001828 wait_code
           ps2_kbd.s:396    .text:0000000000001852 $d
           ps2_kbd.s:396    .text:0000000000001856 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000018ac inkey_exit
           ps2_kbd.s:418    .text:00000000000018b0 pause_key
           ps2_kbd.s:427    .text:00000000000018c6 do_modifiers
           ps2_kbd.s:436    .text:00000000000018de shift_down
           ps2_kbd.s:440    .text:00000000000018e4 altchar_down
           ps2_kbd.s:444    .text:00000000000018ea ctrl_down
           ps2_kbd.s:452    .text:0000000000001906 do_capslock
           ps2_kbd.s:478    .text:000000000000192a kbd_send
           ps2_kbd.s:553    .text:0000000000001a1e kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001a3c $d
ARM GAS  forth.s 			page 217


           ps2_kbd.s:567    .text:0000000000001a40 _KBD_RST
           ps2_kbd.s:567    .text:0000000000001a48 $t
           ps2_kbd.s:567    .text:0000000000001a48 KBD_RST
           ps2_kbd.s:591    .text:0000000000001a92 $d
           ps2_kbd.s:591    .text:0000000000001a96 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001a9e $t
           ps2_kbd.s:591    .text:0000000000001aa0 KBD_LED
           ps2_kbd.s:616    .text:0000000000001af4 $d
           ps2_kbd.s:616    .text:0000000000001af8 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001b04 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001b2e $d
           ps2_kbd.s:633    .text:0000000000001b32 _WKEY
           ps2_kbd.s:633    .text:0000000000001b3c WKEY
           ps2_kbd.s:635    .text:0000000000001b40 $d
           ps2_kbd.s:640    .text:0000000000001b58 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001b78 $t
         spi-flash.s:85     .text:0000000000001c1a $d
         spi-flash.s:85     .text:0000000000001c1e _CHIP_SEL
         spi-flash.s:85     .text:0000000000001c28 CHIP_SEL
         spi-flash.s:97     .text:0000000000001c46 $d
         spi-flash.s:97     .text:0000000000001c4a _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001c54 $t
         spi-flash.s:97     .text:0000000000001c54 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001c82 $d
         spi-flash.s:113    .text:0000000000001c86 _RD_BYTE
         spi-flash.s:113    .text:0000000000001c8e $t
         spi-flash.s:113    .text:0000000000001c90 RD_BYTE
         spi-flash.s:133    .text:0000000000001cb8 $d
         spi-flash.s:133    .text:0000000000001cbc _WR_BYTE
         spi-flash.s:133    .text:0000000000001cc4 $t
         spi-flash.s:133    .text:0000000000001cc4 WR_BYTE
         spi-flash.s:151    .text:0000000000001ce8 $d
         spi-flash.s:151    .text:0000000000001cec _WR_DIS
         spi-flash.s:151    .text:0000000000001cf4 WR_DIS
         spi-flash.s:153    .text:0000000000001cf8 $d
         spi-flash.s:163    .text:0000000000001d14 _WR_ENBL
         spi-flash.s:163    .text:0000000000001d1c $t
         spi-flash.s:163    .text:0000000000001d1c WR_ENBL
         spi-flash.s:165    .text:0000000000001d20 $d
         spi-flash.s:175    .text:0000000000001d3c _RD_SR
         spi-flash.s:175    .text:0000000000001d42 $t
         spi-flash.s:175    .text:0000000000001d44 RD_SR
         spi-flash.s:177    .text:0000000000001d48 $d
         spi-flash.s:185    .text:0000000000001d6c sr_cmd
         spi-flash.s:191    .text:0000000000001d73 _SEND_ADR
         spi-flash.s:191    .text:0000000000001d7c $t
         spi-flash.s:191    .text:0000000000001d7c SEND_ADR
         spi-flash.s:193    .text:0000000000001d80 $d
         spi-flash.s:208    .text:0000000000001db4 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001dbe $t
         spi-flash.s:208    .text:0000000000001dc0 WAIT_DONE
         spi-flash.s:210    .text:0000000000001dc4 $d
         spi-flash.s:223    .text:0000000000001df4 _ERASE_BLK
ARM GAS  forth.s 			page 218


         spi-flash.s:223    .text:0000000000001dfe $t
         spi-flash.s:223    .text:0000000000001e00 ERASE_BLK
         spi-flash.s:225    .text:0000000000001e04 $d
         spi-flash.s:238    .text:0000000000001e2c _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001e38 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001e3c $d
         spi-flash.s:256    .text:0000000000001e6c _RD_BLK
         spi-flash.s:256    .text:0000000000001e74 RD_BLK
         spi-flash.s:258    .text:0000000000001e78 $d
         spi-flash.s:278    .text:0000000000001ec0 _WR_BLK
         spi-flash.s:278    .text:0000000000001ec8 WR_BLK
         spi-flash.s:280    .text:0000000000001ecc $d
             forth.s:2617   .text:0000000000004440 HDOT
         spi-flash.s:316    .text:0000000000001f24 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001f30 $t
         spi-flash.s:316    .text:0000000000001f30 SEARCH_FILE
         spi-flash.s:319    .text:0000000000001f34 $d
         spi-flash.s:325    .text:0000000000001f3c _ERASE_FILE
         spi-flash.s:325    .text:0000000000001f48 ERASE_FILE
         spi-flash.s:328    .text:0000000000001f4c $d
         spi-flash.s:334    .text:0000000000001f54 _DIR
         spi-flash.s:334    .text:0000000000001f58 $t
         spi-flash.s:334    .text:0000000000001f58 DIR
         spi-flash.s:337    .text:0000000000001f5c $d
         spi-flash.s:343    .text:0000000000001f64 _SAVE
         spi-flash.s:343    .text:0000000000001f6c SAVE
         spi-flash.s:346    .text:0000000000001f70 $d
         spi-flash.s:352    .text:0000000000001f78 _LOAD
         spi-flash.s:352    .text:0000000000001f80 LOAD
         spi-flash.s:355    .text:0000000000001f84 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001fac p10
               fpu.s:59     .text:0000000000001fd8 _PWR10
               fpu.s:59     .text:0000000000001fde $t
               fpu.s:59     .text:0000000000001fe0 PWR10
               fpu.s:90     .text:000000000000200c $d
               fpu.s:90     .text:0000000000002010 _FDI
               fpu.s:90     .text:0000000000002014 $t
               fpu.s:90     .text:0000000000002014 FDI
               fpu.s:100    .text:0000000000002026 $d
               fpu.s:100    .text:000000000000202a _FEI
               fpu.s:100    .text:000000000000202e $t
               fpu.s:100    .text:0000000000002030 FEI
               fpu.s:110    .text:0000000000002042 $d
               fpu.s:110    .text:0000000000002046 _FPSCR
               fpu.s:110    .text:000000000000204c $t
               fpu.s:123    .text:000000000000205c $d
               fpu.s:123    .text:0000000000002060 _CLR_FPSCR
               fpu.s:123    .text:000000000000206a $t
               fpu.s:136    .text:0000000000002084 $d
               fpu.s:136    .text:0000000000002088 _TOS0
               fpu.s:136    .text:000000000000208c $t
               fpu.s:136    .text:000000000000208c TOS0
               fpu.s:145    .text:0000000000002098 $d
ARM GAS  forth.s 			page 219


               fpu.s:145    .text:000000000000209c _TOS1
               fpu.s:145    .text:00000000000020a0 $t
               fpu.s:145    .text:00000000000020a0 TOS1
               fpu.s:154    .text:00000000000020ac $d
               fpu.s:154    .text:00000000000020b0 _TOS2
               fpu.s:154    .text:00000000000020b4 $t
               fpu.s:154    .text:00000000000020b4 TOS2
               fpu.s:163    .text:00000000000020c0 $d
               fpu.s:163    .text:00000000000020c4 _S0FROM
               fpu.s:163    .text:00000000000020c8 $t
               fpu.s:163    .text:00000000000020c8 S0FROM
               fpu.s:172    .text:00000000000020d4 $d
               fpu.s:172    .text:00000000000020d8 _S1FROM
               fpu.s:172    .text:00000000000020dc $t
               fpu.s:172    .text:00000000000020dc S1FROM
               fpu.s:181    .text:00000000000020e8 $d
               fpu.s:181    .text:00000000000020ec _S2FROM
               fpu.s:181    .text:00000000000020f0 $t
               fpu.s:181    .text:00000000000020f0 S2FROM
               fpu.s:192    .text:00000000000020fc $d
               fpu.s:192    .text:0000000000002100 _FTOS
               fpu.s:192    .text:0000000000002104 $t
               fpu.s:192    .text:0000000000002104 FTOS
               fpu.s:202    .text:0000000000002114 $d
               fpu.s:202    .text:0000000000002118 _TRUNC
               fpu.s:202    .text:000000000000211e $t
               fpu.s:202    .text:0000000000002120 TRUNC
               fpu.s:212    .text:0000000000002130 $d
               fpu.s:212    .text:0000000000002134 _STOF
               fpu.s:212    .text:0000000000002138 $t
               fpu.s:212    .text:0000000000002138 STOF
               fpu.s:222    .text:0000000000002148 $d
               fpu.s:222    .text:000000000000214c _FPLUS
               fpu.s:222    .text:0000000000002150 FPLUS
               fpu.s:235    .text:0000000000002168 $d
               fpu.s:235    .text:000000000000216c _FSUBB
               fpu.s:235    .text:0000000000002170 FSUBB
               fpu.s:249    .text:0000000000002188 $d
               fpu.s:249    .text:000000000000218c _FSTAR
               fpu.s:249    .text:0000000000002190 FSTAR
               fpu.s:262    .text:00000000000021a8 $d
               fpu.s:262    .text:00000000000021ac _FSLH
               fpu.s:262    .text:00000000000021b0 FSLH
               fpu.s:275    .text:00000000000021c8 $d
               fpu.s:275    .text:00000000000021cc _FNEG
               fpu.s:275    .text:00000000000021d4 $t
               fpu.s:275    .text:00000000000021d4 FNEG
               fpu.s:285    .text:00000000000021e4 $d
               fpu.s:285    .text:00000000000021e8 _FABS
               fpu.s:285    .text:00000000000021f0 FABS
               fpu.s:297    .text:0000000000002204 $d
               fpu.s:297    .text:0000000000002208 _SQRT
               fpu.s:297    .text:0000000000002210 SQRT
               fpu.s:307    .text:0000000000002220 $d
               fpu.s:307    .text:0000000000002224 _FZLESS
               fpu.s:307    .text:0000000000002228 $t
               fpu.s:307    .text:0000000000002228 FZLESS
ARM GAS  forth.s 			page 220


               fpu.s:319    .text:0000000000002240 $d
               fpu.s:319    .text:0000000000002244 _FGREAT
               fpu.s:319    .text:0000000000002248 FGREAT
               fpu.s:321    .text:000000000000224c $d
             forth.s:921    .text:00000000000033b8 INVER
               fpu.s:330    .text:0000000000002260 _FLESS
               fpu.s:330    .text:0000000000002264 FLESS
               fpu.s:332    .text:0000000000002268 $d
               fpu.s:340    .text:0000000000002278 _FMIN
               fpu.s:340    .text:0000000000002280 FMIN
               fpu.s:342    .text:0000000000002284 $d
               fpu.s:353    .text:00000000000022a8 _FMAX
               fpu.s:353    .text:00000000000022b0 FMAX
               fpu.s:355    .text:00000000000022b4 $d
               fpu.s:368    .text:00000000000022d8 _FSIGN
               fpu.s:368    .text:00000000000022de $t
               fpu.s:368    .text:00000000000022e0 FSIGN
               fpu.s:379    .text:00000000000022f4 $d
               fpu.s:379    .text:00000000000022f8 _FEXP
               fpu.s:379    .text:0000000000002300 FEXP
               fpu.s:390    .text:0000000000002318 $d
               fpu.s:390    .text:000000000000231c _FMANT
               fpu.s:390    .text:0000000000002322 $t
               fpu.s:390    .text:0000000000002324 FMANT
               fpu.s:403    .text:0000000000002340 $d
               fpu.s:403    .text:0000000000002344 _PI
               fpu.s:403    .text:0000000000002348 PI
               fpu.s:412    .text:0000000000002358 $d
               fpu.s:412    .text:000000000000235c _LN2
               fpu.s:412    .text:0000000000002360 $t
               fpu.s:412    .text:0000000000002360 LN2
               fpu.s:421    .text:0000000000002370 $d
               fpu.s:421    .text:0000000000002374 _LN10
               fpu.s:421    .text:000000000000237c LN10
               fpu.s:431    .text:000000000000238c $d
               fpu.s:431    .text:0000000000002390 _LOG2
               fpu.s:431    .text:0000000000002398 LOG2
               fpu.s:441    .text:00000000000023a8 $d
               fpu.s:441    .text:00000000000023ac _LOG2TO10
               fpu.s:441    .text:00000000000023b4 $t
               fpu.s:441    .text:00000000000023b4 LOG2TO10
               fpu.s:443    .text:00000000000023b8 $d
             forth.s:599    .text:0000000000003118 ZLESS
               fpu.s:453    .text:00000000000023e4 $d
            strtof.s:29     .text:00000000000023f0 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:0000000000002408 p10p2at
            strtof.s:44     .text:0000000000002408 $t
            strtof.s:45     .text:000000000000240c $d
            strtof.s:57     .text:000000000000242c bit_state
            strtof.s:58     .text:000000000000242c $t
            strtof.s:59     .text:0000000000002430 $d
             forth.s:1796   .text:0000000000003bac PICK
            strtof.s:76     .text:0000000000002450 mant_div
ARM GAS  forth.s 			page 221


            strtof.s:77     .text:0000000000002450 $t
            strtof.s:78     .text:0000000000002454 $d
            strtof.s:79     .text:0000000000002458 div_loop
             forth.s:1042   .text:00000000000034b4 GREAT
            strtof.s:107    .text:00000000000024a4 mant_mult
            strtof.s:108    .text:00000000000024a4 $t
            strtof.s:109    .text:00000000000024a8 $d
            strtof.s:110    .text:00000000000024ac mult_loop
            strtof.s:134    .text:00000000000024f8 exp_adjust
            strtof.s:135    .text:00000000000024f8 $t
            strtof.s:136    .text:00000000000024fc $d
             forth.s:824    .text:00000000000032e0 NROT
            strtof.s:148    .text:0000000000002538 pos_exp
             forth.s:937    .text:00000000000033dc ABSS
            strtof.s:159    .text:0000000000002548 integer
            strtof.s:160    .text:0000000000002548 $t
            strtof.s:161    .text:000000000000254c $d
             forth.s:561    .text:00000000000030cc DSWAP
             forth.s:2202   .text:0000000000003fb8 TONBR
             forth.s:487    .text:0000000000003038 DTOR
             forth.s:458    .text:0000000000002ff4 DRFROM
            strtof.s:178    .text:0000000000002578 decimals
            strtof.s:179    .text:0000000000002578 $t
            strtof.s:180    .text:000000000000257c $d
             forth.s:1065   .text:00000000000034e0 MIN
            strtof.s:204    .text:00000000000025d0 exponent
            strtof.s:205    .text:00000000000025d0 $t
            strtof.s:206    .text:00000000000025d4 $d
             forth.s:2255   .text:000000000000404e NEGQ
             forth.s:929    .text:00000000000033cc NEGAT
            strtof.s:226    .text:0000000000002610 _FLOATQ
            strtof.s:226    .text:0000000000002618 FLOATQ
            strtof.s:230    .text:000000000000261c $d
             forth.s:2150   .text:0000000000003f2c DECIM
             forth.s:381    .text:0000000000002f72 TBRAN
            strtof.s:258    .text:000000000000269c expect_dot
             forth.s:2235   .text:000000000000402c CHARQ
            strtof.s:262    .text:00000000000026b0 get_fraction
            strtof.s:279    .text:0000000000002704 get_exponent
            strtof.s:297    .text:0000000000002758 error2
             forth.s:2167   .text:0000000000003f50 DIGTQ
            strtof.s:284    .text:0000000000002718 build_float
            strtof.s:305    .text:0000000000002778 error4
            strtof.s:311    .text:000000000000278c restore_base
            strtof.s:309    .text:0000000000002784 e4
            strtof.s:300    .text:0000000000002764 error3
              ftoa.s:28     .text:000000000000279c rounding
              ftoa.s:48     .text:00000000000027c4 _ROUND
              ftoa.s:48     .text:00000000000027ca $t
              ftoa.s:48     .text:00000000000027cc ROUND
              ftoa.s:50     .text:00000000000027d0 $d
             forth.s:1054   .text:00000000000034cc MAX
              ftoa.s:67     .text:0000000000002810 _CSTOP
              ftoa.s:67     .text:0000000000002814 $t
              ftoa.s:67     .text:0000000000002814 CSTOP
              ftoa.s:79     .text:0000000000002820 ITOA
              ftoa.s:81     .text:0000000000002824 $d
ARM GAS  forth.s 			page 222


             forth.s:1510   .text:0000000000003920 STOD
             forth.s:876    .text:0000000000003350 DABS
             forth.s:2013   .text:0000000000003dcc BDIGS
             forth.s:2057   .text:0000000000003e38 DIGS
             forth.s:2075   .text:0000000000003e6c SIGN
             forth.s:2089   .text:0000000000003e94 EDIGS
             forth.s:1883   .text:0000000000003c74 CMOVE
              ftoa.s:114    .text:0000000000002878 _SCALEUP
              ftoa.s:114    .text:0000000000002880 $t
              ftoa.s:114    .text:0000000000002880 SCALEUP
              ftoa.s:116    .text:0000000000002884 $d
              ftoa.s:148    .text:00000000000028e0 _SCALEDOWN
              ftoa.s:148    .text:00000000000028ea $t
              ftoa.s:148    .text:00000000000028ec SCALEDOWN
              ftoa.s:150    .text:00000000000028f0 $d
              ftoa.s:181    .text:0000000000002948 EPART
              ftoa.s:182    .text:0000000000002948 $t
              ftoa.s:183    .text:000000000000294c $d
              ftoa.s:206    .text:000000000000297c FPART
              ftoa.s:207    .text:000000000000297c $t
              ftoa.s:208    .text:0000000000002980 $d
              ftoa.s:255    .text:0000000000002a20 IPART
              ftoa.s:256    .text:0000000000002a20 $t
              ftoa.s:257    .text:0000000000002a24 $d
              ftoa.s:313    .text:0000000000002ae4 _FTOA
              ftoa.s:313    .text:0000000000002ae8 $t
              ftoa.s:313    .text:0000000000002ae8 FTOA
              ftoa.s:315    .text:0000000000002aec $d
              ftoa.s:365    .text:0000000000002bcc nan
             forth.s:762    .text:0000000000003264 BLANK
              ftoa.s:348    .text:0000000000002b7c zdz
              ftoa.s:387    .text:0000000000002c38 infinity
              ftoa.s:412    .text:0000000000002c80 _FDOT
              ftoa.s:412    .text:0000000000002c84 FDOT
              ftoa.s:415    .text:0000000000002c88 $d
             forth.s:1824   .text:0000000000003be0 HERE
             forth.s:3430   .text:0000000000004dfc ALLOT
             forth.s:80     .text:0000000000002cec $t
             forth.s:104    .text:0000000000002d04 COMPI_NEST
             forth.s:117    .text:0000000000002d22 TSTDIN
             forth.s:124    .text:0000000000002d2c TSTDOUT
             forth.s:133    .text:0000000000002d36 $d
             forth.s:133    .text:0000000000002d3a _CFSR
             forth.s:145    .text:0000000000002d56 $d
             forth.s:145    .text:0000000000002d5a _BFAR
             forth.s:157    .text:0000000000002d76 $d
             forth.s:157    .text:0000000000002d7a _QKEY
             forth.s:157    .text:0000000000002d80 QKEY
             forth.s:159    .text:0000000000002d84 $d
             forth.s:1870   .text:0000000000003c54 ATEXE
             forth.s:167    .text:0000000000002d94 _KEY
             forth.s:167    .text:0000000000002d98 $t
             forth.s:167    .text:0000000000002d98 KEY
             forth.s:169    .text:0000000000002d9c KEY1
             forth.s:170    .text:0000000000002d9c $d
             forth.s:179    .text:0000000000002db4 _EMIT
             forth.s:181    .text:0000000000002dc0 $d
ARM GAS  forth.s 			page 223


             forth.s:215    .text:0000000000002dd0 _RAND
             forth.s:215    .text:0000000000002dd8 RAND
             forth.s:217    .text:0000000000002ddc $d
             forth.s:1172   .text:00000000000035b4 SEED
             forth.s:1666   .text:0000000000003a68 MODD
             forth.s:246    .text:0000000000002e4c _PAUSE
             forth.s:246    .text:0000000000002e52 $t
             forth.s:246    .text:0000000000002e54 PAUSE
             forth.s:248    .text:0000000000002e58 $d
             forth.s:1190   .text:00000000000035e4 TIMER
             forth.s:250    .text:0000000000002e60 PAUSE_LOOP
             forth.s:255    .text:0000000000002e78 PAUSE_EXIT
             forth.s:262    .text:0000000000002e80 _ULED
             forth.s:271    .text:0000000000002ea4 ULED_OFF
             forth.s:279    .text:0000000000002ea8 $d
             forth.s:279    .text:0000000000002eac _JOYSTK
             forth.s:279    .text:0000000000002eb4 JOYSTK
             forth.s:281    .text:0000000000002eb8 $d
             forth.s:293    .text:0000000000002ed8 _BEEP
             forth.s:293    .text:0000000000002ee0 BEEP
             forth.s:318    .text:0000000000002f14 $d
             forth.s:318    .text:0000000000002f18 _NOP
             forth.s:318    .text:0000000000002f1c $t
             forth.s:318    .text:0000000000002f1c NOP
             forth.s:335    .text:0000000000002f28 $d
             forth.s:335    .text:0000000000002f2c _EXECU
             forth.s:335    .text:0000000000002f34 $t
             forth.s:335    .text:0000000000002f34 EXECU
             forth.s:355    .text:0000000000002f50 NEXT1
             forth.s:373    .text:0000000000002f6c QBRAN1
             forth.s:404    .text:0000000000002f8c $d
             forth.s:404    .text:0000000000002f90 _EXIT
             forth.s:404    .text:0000000000002f98 EXIT
             forth.s:412    .text:0000000000002f9a $d
             forth.s:412    .text:0000000000002f9e _STORE
             forth.s:412    .text:0000000000002fa0 $t
             forth.s:422    .text:0000000000002fac $d
             forth.s:422    .text:0000000000002fb0 _AT
             forth.s:422    .text:0000000000002fb2 $t
             forth.s:430    .text:0000000000002fb8 $d
             forth.s:430    .text:0000000000002fbc _CSTOR
             forth.s:440    .text:0000000000002fcc $d
             forth.s:440    .text:0000000000002fd0 _CAT
             forth.s:449    .text:0000000000002fd8 $d
             forth.s:449    .text:0000000000002fdc _RFROM
             forth.s:458    .text:0000000000002fea $d
             forth.s:458    .text:0000000000002fee _DRFROM
             forth.s:458    .text:0000000000002ff2 $t
             forth.s:469    .text:0000000000003006 $d
             forth.s:469    .text:000000000000300a _RAT
             forth.s:478    .text:000000000000301a $d
             forth.s:478    .text:000000000000301e _TOR
             forth.s:487    .text:000000000000302e $d
             forth.s:487    .text:0000000000003032 _DTOR
             forth.s:487    .text:0000000000003036 $t
             forth.s:499    .text:000000000000304a $d
             forth.s:499    .text:000000000000304e _RPSTOR
ARM GAS  forth.s 			page 224


             forth.s:499    .text:0000000000003052 $t
             forth.s:499    .text:0000000000003054 RPSTOR
             forth.s:508    .text:000000000000305c $d
             forth.s:508    .text:0000000000003060 _SPSTOR
             forth.s:508    .text:0000000000003064 $t
             forth.s:508    .text:0000000000003064 SPSTOR
             forth.s:517    .text:000000000000306c $d
             forth.s:517    .text:0000000000003070 _SPAT
             forth.s:517    .text:0000000000003074 $t
             forth.s:517    .text:0000000000003074 SPAT
             forth.s:526    .text:000000000000307c $d
             forth.s:526    .text:0000000000003080 _RPAT
             forth.s:526    .text:0000000000003084 $t
             forth.s:526    .text:0000000000003084 RPAT
             forth.s:535    .text:000000000000308c $d
             forth.s:535    .text:0000000000003090 _DROP
             forth.s:543    .text:000000000000309e $d
             forth.s:543    .text:00000000000030a2 _DUPP
             forth.s:543    .text:00000000000030a6 $t
             forth.s:551    .text:00000000000030ae $d
             forth.s:551    .text:00000000000030b2 _SWAP
             forth.s:561    .text:00000000000030c0 $d
             forth.s:561    .text:00000000000030c4 _DSWAP
             forth.s:561    .text:00000000000030ca $t
             forth.s:576    .text:00000000000030dc $d
             forth.s:576    .text:00000000000030e0 _OVER
             forth.s:585    .text:00000000000030f0 $d
             forth.s:585    .text:00000000000030f4 _DOVER
             forth.s:585    .text:00000000000030fa $t
             forth.s:585    .text:00000000000030fc DOVER
             forth.s:599    .text:000000000000310e $d
             forth.s:599    .text:0000000000003112 _ZLESS
             forth.s:607    .text:000000000000311e $d
             forth.s:607    .text:0000000000003122 _ANDD
             forth.s:607    .text:0000000000003126 $t
             forth.s:616    .text:0000000000003132 $d
             forth.s:616    .text:0000000000003136 _ORR
             forth.s:625    .text:0000000000003146 $d
             forth.s:625    .text:000000000000314a _XORR
             forth.s:625    .text:000000000000314e $t
             forth.s:634    .text:000000000000315a $d
             forth.s:634    .text:000000000000315e _UPLUS
             forth.s:634    .text:0000000000003162 $t
             forth.s:634    .text:0000000000003164 UPLUS
             forth.s:646    .text:0000000000003174 $d
             forth.s:646    .text:0000000000003178 _RSHIFT
             forth.s:655    .text:000000000000318a $d
             forth.s:655    .text:000000000000318e _LSHIFT
             forth.s:664    .text:00000000000031a2 $d
             forth.s:664    .text:00000000000031a6 _PLUS
             forth.s:664    .text:00000000000031a8 $t
             forth.s:673    .text:00000000000031b0 $d
             forth.s:673    .text:00000000000031b4 _SUBB
             forth.s:673    .text:00000000000031b6 $t
             forth.s:682    .text:00000000000031c2 $d
             forth.s:682    .text:00000000000031c6 _STAR
             forth.s:682    .text:00000000000031c8 $t
ARM GAS  forth.s 			page 225


             forth.s:691    .text:00000000000031d2 $d
             forth.s:691    .text:00000000000031d6 _UMSTA
             forth.s:691    .text:00000000000031da $t
             forth.s:691    .text:00000000000031dc UMSTA
             forth.s:703    .text:00000000000031e8 $d
             forth.s:703    .text:00000000000031ec _MSTAR
             forth.s:703    .text:00000000000031f0 MSTAR
             forth.s:714    .text:00000000000031fc $d
             forth.s:714    .text:0000000000003200 _ONEP
             forth.s:722    .text:000000000000320a $d
             forth.s:722    .text:000000000000320e _ONEM
             forth.s:730    .text:000000000000321a $d
             forth.s:730    .text:000000000000321e _TWOP
             forth.s:730    .text:0000000000003224 TWOP
             forth.s:738    .text:000000000000322a $d
             forth.s:738    .text:000000000000322e _TWOM
             forth.s:738    .text:0000000000003234 TWOM
             forth.s:746    .text:000000000000323a $d
             forth.s:746    .text:000000000000323e _CELLP
             forth.s:746    .text:0000000000003244 $t
             forth.s:746    .text:0000000000003244 CELLP
             forth.s:754    .text:000000000000324a $d
             forth.s:754    .text:000000000000324e _CELLM
             forth.s:754    .text:0000000000003254 $t
             forth.s:754    .text:0000000000003254 CELLM
             forth.s:762    .text:000000000000325a $d
             forth.s:762    .text:000000000000325e _BLANK
             forth.s:771    .text:000000000000326e $d
             forth.s:771    .text:0000000000003272 _CELLS
             forth.s:771    .text:0000000000003278 $t
             forth.s:771    .text:0000000000003278 CELLS
             forth.s:779    .text:000000000000327e $d
             forth.s:779    .text:0000000000003282 _CELLSL
             forth.s:779    .text:0000000000003288 $t
             forth.s:779    .text:0000000000003288 CELLSL
             forth.s:787    .text:000000000000328e $d
             forth.s:787    .text:0000000000003292 _TWOST
             forth.s:787    .text:0000000000003298 TWOST
             forth.s:795    .text:000000000000329e $d
             forth.s:795    .text:00000000000032a2 _TWOSL
             forth.s:803    .text:00000000000032ae $d
             forth.s:803    .text:00000000000032b2 _QDUP
             forth.s:813    .text:00000000000032c2 $d
             forth.s:813    .text:00000000000032c6 _ROT
             forth.s:813    .text:00000000000032ca $t
             forth.s:824    .text:00000000000032d6 $d
             forth.s:824    .text:00000000000032da _NROT
             forth.s:835    .text:00000000000032ea $d
             forth.s:835    .text:00000000000032ee _DDROP
             forth.s:835    .text:00000000000032f4 $t
             forth.s:844    .text:00000000000032fe $d
             forth.s:844    .text:0000000000003302 _TDROP
             forth.s:844    .text:0000000000003308 $t
             forth.s:853    .text:0000000000003312 $d
             forth.s:853    .text:0000000000003316 _DDUP
             forth.s:863    .text:0000000000003328 $d
             forth.s:863    .text:000000000000332c _DPLUS
ARM GAS  forth.s 			page 226


             forth.s:863    .text:0000000000003330 DPLUS
             forth.s:876    .text:0000000000003344 $d
             forth.s:876    .text:0000000000003348 _DABS
             forth.s:892    .text:000000000000336c $d
             forth.s:892    .text:0000000000003370 _UDGREAT
             forth.s:892    .text:0000000000003374 $t
             forth.s:892    .text:0000000000003374 UDGREAT
             forth.s:909    .text:0000000000003390 $d
             forth.s:909    .text:0000000000003394 _DZEQUAL
             forth.s:909    .text:0000000000003398 $t
             forth.s:909    .text:0000000000003398 DZEQUAL
             forth.s:921    .text:00000000000033aa $d
             forth.s:921    .text:00000000000033ae _INVER
             forth.s:929    .text:00000000000033be $d
             forth.s:929    .text:00000000000033c2 _NEGAT
             forth.s:937    .text:00000000000033d2 $d
             forth.s:937    .text:00000000000033d6 _ABSS
             forth.s:937    .text:00000000000033da $t
             forth.s:947    .text:00000000000033e6 $d
             forth.s:947    .text:00000000000033ea _CLZ
             forth.s:947    .text:00000000000033ee $t
             forth.s:955    .text:00000000000033f6 $d
             forth.s:955    .text:00000000000033fa _CTZ
             forth.s:955    .text:00000000000033fe $t
             forth.s:955    .text:0000000000003400 CTZ
             forth.s:970    .text:0000000000003418 $d
             forth.s:970    .text:000000000000341c _ZEQUAL
             forth.s:970    .text:0000000000003420 ZEQUAL
             forth.s:981    .text:000000000000342e $d
             forth.s:981    .text:0000000000003432 _EQUAL
             forth.s:981    .text:0000000000003434 $t
             forth.s:993    .text:0000000000003444 $d
             forth.s:993    .text:0000000000003448 _DIFF
             forth.s:993    .text:000000000000344c DIFF
             forth.s:1006   .text:0000000000003464 $d
             forth.s:1006   .text:0000000000003468 _ULESS
             forth.s:1018   .text:000000000000347c $d
             forth.s:1018   .text:0000000000003480 _LESS
             forth.s:1018   .text:0000000000003482 $t
             forth.s:1018   .text:0000000000003484 LESS
             forth.s:1030   .text:0000000000003494 $d
             forth.s:1030   .text:0000000000003498 _UGREAT
             forth.s:1030   .text:000000000000349c UGREAT
             forth.s:1042   .text:00000000000034ac $d
             forth.s:1042   .text:00000000000034b0 _GREAT
             forth.s:1042   .text:00000000000034b2 $t
             forth.s:1054   .text:00000000000034c4 $d
             forth.s:1054   .text:00000000000034c8 _MAX
             forth.s:1054   .text:00000000000034cc $t
             forth.s:1065   .text:00000000000034d8 $d
             forth.s:1065   .text:00000000000034dc _MIN
             forth.s:1065   .text:00000000000034e0 $t
             forth.s:1076   .text:00000000000034ec $d
             forth.s:1076   .text:00000000000034f0 _PSTOR
             forth.s:1076   .text:00000000000034f4 PSTOR
             forth.s:1088   .text:0000000000003506 $d
             forth.s:1088   .text:000000000000350a _DSTOR
ARM GAS  forth.s 			page 227


             forth.s:1088   .text:0000000000003510 DSTOR
             forth.s:1100   .text:0000000000003526 $d
             forth.s:1100   .text:000000000000352a _DAT
             forth.s:1100   .text:0000000000003530 DAT
             forth.s:1110   .text:000000000000353c $d
             forth.s:1110   .text:0000000000003540 _COUNT
             forth.s:1110   .text:0000000000003546 $t
             forth.s:1120   .text:0000000000003556 $d
             forth.s:1120   .text:000000000000355a _DNEGA
             forth.s:1120   .text:0000000000003562 $t
             forth.s:1120   .text:0000000000003564 DNEGA
             forth.s:1137   .text:0000000000003576 DOVAR
             forth.s:1148   .text:0000000000003584 DOCON
             forth.s:1163   .text:0000000000003590 $d
             forth.s:1163   .text:0000000000003594 _STATE
             forth.s:1163   .text:000000000000359a $t
             forth.s:1163   .text:000000000000359c STATE
             forth.s:1172   .text:00000000000035a8 $d
             forth.s:1172   .text:00000000000035ac _SEED
             forth.s:1181   .text:00000000000035c0 $d
             forth.s:1181   .text:00000000000035c4 _MSEC
             forth.s:1190   .text:00000000000035d8 $d
             forth.s:1190   .text:00000000000035dc _TIMER
             forth.s:1190   .text:00000000000035e2 $t
             forth.s:1199   .text:00000000000035f0 $d
             forth.s:1199   .text:00000000000035f4 _TBOOT
             forth.s:1199   .text:00000000000035fa $t
             forth.s:1199   .text:00000000000035fc TBOOT
             forth.s:1208   .text:0000000000003608 $d
             forth.s:1208   .text:000000000000360c _BASE
             forth.s:1219   .text:0000000000003620 $d
             forth.s:1219   .text:0000000000003624 _BCHR
             forth.s:1219   .text:000000000000362a $t
             forth.s:1219   .text:000000000000362c BCHR
             forth.s:1229   .text:0000000000003638 TEMP
             forth.s:1238   .text:0000000000003644 $d
             forth.s:1238   .text:0000000000003648 _SPAN
             forth.s:1238   .text:0000000000003650 SPAN
             forth.s:1247   .text:000000000000365c $d
             forth.s:1247   .text:0000000000003660 _INN
             forth.s:1247   .text:0000000000003664 $t
             forth.s:1247   .text:0000000000003664 INN
             forth.s:1257   .text:0000000000003670 $d
             forth.s:1257   .text:0000000000003674 _NTIB
             forth.s:1257   .text:000000000000367c NTIB
             forth.s:1266   .text:0000000000003688 $d
             forth.s:1266   .text:000000000000368c _TEVAL
             forth.s:1266   .text:0000000000003692 $t
             forth.s:1266   .text:0000000000003694 TEVAL
             forth.s:1276   .text:00000000000036a0 $d
             forth.s:1276   .text:00000000000036a4 _HLD
             forth.s:1276   .text:00000000000036a8 $t
             forth.s:1276   .text:00000000000036a8 HLD
             forth.s:1286   .text:00000000000036b4 $d
             forth.s:1286   .text:00000000000036b8 _CNTXT
             forth.s:1286   .text:00000000000036c0 $t
             forth.s:1286   .text:00000000000036c0 CNTXT
ARM GAS  forth.s 			page 228


             forth.s:1287   .text:00000000000036c0 CRRNT
             forth.s:1297   .text:00000000000036cc $d
             forth.s:1297   .text:00000000000036d0 _CPP
             forth.s:1297   .text:00000000000036d4 CPP
             forth.s:1307   .text:00000000000036e0 $d
             forth.s:1307   .text:00000000000036e4 _FCP
             forth.s:1307   .text:00000000000036e8 $t
             forth.s:1307   .text:00000000000036e8 FCP
             forth.s:1317   .text:00000000000036f4 $d
             forth.s:1317   .text:00000000000036f8 _LAST
             forth.s:1317   .text:0000000000003700 LAST
             forth.s:1331   .text:000000000000370c $d
             forth.s:1331   .text:0000000000003710 _USER_BEGIN
             forth.s:1331   .text:000000000000371c USER_BEGIN
             forth.s:1335   .text:0000000000003728 USR_BGN_ADR
             forth.s:1336   .text:0000000000003728 $d
             forth.s:1342   .text:0000000000003730 _USER_END
             forth.s:1342   .text:000000000000373c USER_END
             forth.s:1346   .text:0000000000003748 USER_END_ADR
             forth.s:1347   .text:0000000000003748 $d
             forth.s:1353   .text:0000000000003750 _MAXINT
             forth.s:1353   .text:0000000000003758 $t
             forth.s:1353   .text:0000000000003758 MAXINT
             forth.s:1362   .text:0000000000003768 $d
             forth.s:1362   .text:000000000000376c _MININT
             forth.s:1362   .text:0000000000003774 $t
             forth.s:1362   .text:0000000000003774 MININT
             forth.s:1371   .text:0000000000003784 $d
             forth.s:1371   .text:0000000000003788 _MAXUINT
             forth.s:1371   .text:0000000000003794 MAXUINT
             forth.s:1386   .text:00000000000037a4 $d
             forth.s:1386   .text:00000000000037a8 _WITHI
             forth.s:1386   .text:00000000000037b0 WITHI
             forth.s:1388   .text:00000000000037b4 $d
             forth.s:1403   .text:00000000000037d4 _UMMOD
             forth.s:1403   .text:00000000000037dc UMMOD
             forth.s:1407   .text:00000000000037e6 UMMOD0
             forth.s:1414   .text:00000000000037f6 UMMOD1
             forth.s:1420   .text:0000000000003800 UMMOD2
             forth.s:1433   .text:000000000000380c $d
             forth.s:1433   .text:0000000000003810 _MSMOD
             forth.s:1433   .text:0000000000003818 MSMOD
             forth.s:1435   .text:000000000000381c $d
             forth.s:1444   .text:0000000000003844 MMOD1
             forth.s:1451   .text:0000000000003860 MMOD2
             forth.s:1459   .text:0000000000003880 MMOD3
             forth.s:1473   .text:0000000000003888 _SMSLSHREM
             forth.s:1473   .text:0000000000003890 SMSLSHREM
             forth.s:1475   .text:0000000000003894 $d
             forth.s:1510   .text:000000000000391c _STOD
             forth.s:1510   .text:0000000000003920 $t
             forth.s:1519   .text:000000000000392c $d
             forth.s:1519   .text:0000000000003930 _D2STAR
             forth.s:1519   .text:0000000000003934 $t
             forth.s:1519   .text:0000000000003934 D2STAR
             forth.s:1531   .text:0000000000003946 $d
             forth.s:1531   .text:000000000000394a _D2SL
ARM GAS  forth.s 			page 229


             forth.s:1531   .text:000000000000394e $t
             forth.s:1531   .text:0000000000003950 D2SL
             forth.s:1546   .text:000000000000395e $d
             forth.s:1546   .text:0000000000003962 _DSLMOD
             forth.s:1546   .text:0000000000003968 $t
             forth.s:1546   .text:0000000000003968 DSLMOD
             forth.s:1582   .text:00000000000039b4 $d
             forth.s:1582   .text:00000000000039b8 _DSLASH
             forth.s:1582   .text:00000000000039bc DSLASH
             forth.s:1584   .text:00000000000039c0 $d
             forth.s:1604   .text:0000000000003a04 _DSTAR
             forth.s:1604   .text:0000000000003a08 DSTAR
             forth.s:1653   .text:0000000000003a3e $d
             forth.s:1653   .text:0000000000003a42 _SLMOD
             forth.s:1655   .text:0000000000003a4c $d
             forth.s:1666   .text:0000000000003a64 _MODD
             forth.s:1666   .text:0000000000003a68 $t
             forth.s:1668   .text:0000000000003a6c $d
             forth.s:1677   .text:0000000000003a7c _SLASH
             forth.s:1677   .text:0000000000003a7e $t
             forth.s:1677   .text:0000000000003a80 SLASH
             forth.s:1679   .text:0000000000003a84 $d
             forth.s:1690   .text:0000000000003a98 _SSMOD
             forth.s:1690   .text:0000000000003a9e $t
             forth.s:1690   .text:0000000000003aa0 SSMOD
             forth.s:1692   .text:0000000000003aa4 $d
             forth.s:1704   .text:0000000000003abc _STASL
             forth.s:1704   .text:0000000000003ac0 STASL
             forth.s:1706   .text:0000000000003ac4 $d
             forth.s:1720   .text:0000000000003ad8 _CHARP
             forth.s:1720   .text:0000000000003ade $t
             forth.s:1720   .text:0000000000003ae0 CHARP
             forth.s:1730   .text:0000000000003ae8 $d
             forth.s:1730   .text:0000000000003aec _CHARS
             forth.s:1730   .text:0000000000003af2 $t
             forth.s:1730   .text:0000000000003af4 CHARS
             forth.s:1740   .text:0000000000003af8 $d
             forth.s:1740   .text:0000000000003afc _ALIGN
             forth.s:1740   .text:0000000000003b02 $t
             forth.s:1740   .text:0000000000003b04 ALIGN
             forth.s:1753   .text:0000000000003b14 $d
             forth.s:1753   .text:0000000000003b18 _ALGND
             forth.s:1753   .text:0000000000003b20 $t
             forth.s:1753   .text:0000000000003b20 ALGND
             forth.s:1764   .text:0000000000003b30 $d
             forth.s:1764   .text:0000000000003b34 _TCHAR
             forth.s:1764   .text:0000000000003b3a $t
             forth.s:1764   .text:0000000000003b3c TCHAR
             forth.s:1766   .text:0000000000003b40 $d
             forth.s:1776   .text:0000000000003b78 TCHA1
             forth.s:1784   .text:0000000000003b80 _DEPTH
             forth.s:1784   .text:0000000000003b86 $t
             forth.s:1784   .text:0000000000003b88 DEPTH
             forth.s:1796   .text:0000000000003ba0 $d
             forth.s:1796   .text:0000000000003ba4 _PICK
             forth.s:1807   .text:0000000000003bb6 $d
             forth.s:1807   .text:0000000000003bba _PUT
ARM GAS  forth.s 			page 230


             forth.s:1807   .text:0000000000003bbe $t
             forth.s:1807   .text:0000000000003bc0 PUT
             forth.s:1824   .text:0000000000003bd4 $d
             forth.s:1824   .text:0000000000003bd8 _HERE
             forth.s:1826   .text:0000000000003be4 $d
             forth.s:1835   .text:0000000000003bf4 _PAD
             forth.s:1835   .text:0000000000003bf8 $t
             forth.s:1837   .text:0000000000003bfc $d
             forth.s:1848   .text:0000000000003c14 _TIB
             forth.s:1848   .text:0000000000003c18 $t
             forth.s:1848   .text:0000000000003c18 TIB
             forth.s:1859   .text:0000000000003c22 $d
             forth.s:1859   .text:0000000000003c26 _SOURCE
             forth.s:1859   .text:0000000000003c30 SOURCE
             forth.s:1861   .text:0000000000003c34 $d
             forth.s:1870   .text:0000000000003c48 _ATEXE
             forth.s:1883   .text:0000000000003c68 $d
             forth.s:1883   .text:0000000000003c6c _CMOVE
             forth.s:1883   .text:0000000000003c72 $t
             forth.s:1890   .text:0000000000003c86 CMOV1
             forth.s:1887   .text:0000000000003c7e CMOV0
             forth.s:1895   .text:0000000000003c90 CMOV2
             forth.s:1903   .text:0000000000003c98 $d
             forth.s:1903   .text:0000000000003c9c _MOVE
             forth.s:1921   .text:0000000000003cce MOVE1
             forth.s:1918   .text:0000000000003cca MOVE3
             forth.s:1915   .text:0000000000003cc6 MOVE0
             forth.s:1926   .text:0000000000003cd8 MOVE2
             forth.s:1935   .text:0000000000003ce0 $d
             forth.s:1935   .text:0000000000003ce4 _FILL
             forth.s:1943   .text:0000000000003cfa FILL2
             forth.s:1939   .text:0000000000003cf2 FILL1
             forth.s:1953   .text:0000000000003d02 $d
             forth.s:1953   .text:0000000000003d06 _PACKS
             forth.s:1953   .text:0000000000003d0c $t
             forth.s:1953   .text:0000000000003d0c PACKS
             forth.s:1955   .text:0000000000003d10 $d
             forth.s:1984   .text:0000000000003d68 _DIGIT
             forth.s:1984   .text:0000000000003d6e $t
             forth.s:1984   .text:0000000000003d70 DIGIT
             forth.s:1986   .text:0000000000003d74 $d
             forth.s:2001   .text:0000000000003da8 _EXTRC
             forth.s:2001   .text:0000000000003db0 $t
             forth.s:2001   .text:0000000000003db0 EXTRC
             forth.s:2003   .text:0000000000003db4 $d
             forth.s:2013   .text:0000000000003dc8 _BDIGS
             forth.s:2015   .text:0000000000003dd0 $d
             forth.s:2025   .text:0000000000003de4 _HOLD
             forth.s:2025   .text:0000000000003dec HOLD
             forth.s:2027   .text:0000000000003df0 $d
             forth.s:2043   .text:0000000000003e14 _DIG
             forth.s:2043   .text:0000000000003e16 $t
             forth.s:2043   .text:0000000000003e18 DIG
             forth.s:2045   .text:0000000000003e1c $d
             forth.s:2057   .text:0000000000003e34 _DIGS
             forth.s:2059   .text:0000000000003e3c DIGS1
             forth.s:2060   .text:0000000000003e3c $d
ARM GAS  forth.s 			page 231


             forth.s:2065   .text:0000000000003e58 DIGS2
             forth.s:2075   .text:0000000000003e64 _SIGN
             forth.s:2077   .text:0000000000003e70 $d
             forth.s:2081   .text:0000000000003e88 SIGN1
             forth.s:2089   .text:0000000000003e90 _EDIGS
             forth.s:2091   .text:0000000000003e98 $d
             forth.s:2106   .text:0000000000003eb4 STRR
             forth.s:2107   .text:0000000000003eb4 $t
             forth.s:2108   .text:0000000000003eb8 $d
             forth.s:2125   .text:0000000000003ee4 _HEX
             forth.s:2125   .text:0000000000003ee8 $t
             forth.s:2125   .text:0000000000003ee8 HEX
             forth.s:2127   .text:0000000000003eec $d
             forth.s:2138   .text:0000000000003f04 _BIN
             forth.s:2138   .text:0000000000003f08 $t
             forth.s:2138   .text:0000000000003f08 BIN
             forth.s:2140   .text:0000000000003f0c $d
             forth.s:2150   .text:0000000000003f24 _DECIM
             forth.s:2150   .text:0000000000003f2c $t
             forth.s:2152   .text:0000000000003f30 $d
             forth.s:2167   .text:0000000000003f48 _DIGTQ
             forth.s:2169   .text:0000000000003f54 $d
             forth.s:2182   .text:0000000000003f9c DGTQ1
             forth.s:2202   .text:0000000000003fb0 _TONBR
             forth.s:2202   .text:0000000000003fb8 $t
             forth.s:2204   .text:0000000000003fbc $d
             forth.s:2236   .text:000000000000402c $t
             forth.s:2284   .text:0000000000004078 $d
             forth.s:2284   .text:000000000000407c _INTQ
             forth.s:2284   .text:0000000000004084 INTQ
             forth.s:2287   .text:0000000000004088 $d
             forth.s:2339   .text:0000000000004150 _NUMBERQ
             forth.s:2339   .text:0000000000004158 $t
             forth.s:2339   .text:0000000000004158 NUMBERQ
             forth.s:2341   .text:000000000000415c $d
             forth.s:2359   .text:000000000000417c _SPACE
             forth.s:2359   .text:0000000000004182 $t
             forth.s:2361   .text:0000000000004188 $d
             forth.s:2370   .text:0000000000004198 _SPACS
             forth.s:2370   .text:00000000000041a0 SPACS
             forth.s:2372   .text:00000000000041a4 $d
             forth.s:2378   .text:00000000000041c0 CHAR2
             forth.s:2376   .text:00000000000041bc CHAR1
             forth.s:2387   .text:00000000000041d0 _TYPEE
             forth.s:2389   .text:00000000000041dc $d
             forth.s:2395   .text:00000000000041f4 TYPE2
             forth.s:2391   .text:00000000000041e8 TYPE1
             forth.s:2405   .text:0000000000004208 _CR
             forth.s:2407   .text:0000000000004210 $d
             forth.s:2419   .text:000000000000422c DOSTR
             forth.s:2420   .text:000000000000422c $t
             forth.s:2422   .text:0000000000004230 $d
             forth.s:2441   .text:000000000000425c STRQP
             forth.s:2442   .text:000000000000425c $t
             forth.s:2443   .text:0000000000004260 $d
             forth.s:2454   .text:0000000000004268 $t
             forth.s:2455   .text:000000000000426c $d
ARM GAS  forth.s 			page 232


             forth.s:2467   .text:0000000000004278 LPAD
             forth.s:2468   .text:0000000000004278 $t
             forth.s:2469   .text:000000000000427c $d
             forth.s:2500   .text:00000000000042fc _DOTR
             forth.s:2500   .text:0000000000004300 DOTR
             forth.s:2502   .text:0000000000004304 $d
             forth.s:2584   .text:00000000000043e8 DTOA
             forth.s:2519   .text:000000000000432c _UDOTR
             forth.s:2519   .text:0000000000004330 $t
             forth.s:2519   .text:0000000000004330 UDOTR
             forth.s:2521   .text:0000000000004334 $d
             forth.s:2537   .text:0000000000004360 _UDOT
             forth.s:2539   .text:0000000000004368 $d
             forth.s:2555   .text:0000000000004394 _DOT
             forth.s:2555   .text:0000000000004396 $t
             forth.s:2557   .text:000000000000439c $d
             forth.s:2565   .text:00000000000043c4 DOT1
             forth.s:2584   .text:00000000000043e4 _DTOA
             forth.s:2584   .text:00000000000043e8 $t
             forth.s:2586   .text:00000000000043ec $d
             forth.s:2601   .text:0000000000004414 _DDOT
             forth.s:2601   .text:0000000000004418 DDOT
             forth.s:2603   .text:000000000000441c $d
             forth.s:2617   .text:000000000000443c _HDOT
             forth.s:2619   .text:0000000000004444 $d
             forth.s:2641   .text:000000000000448c _QUEST
             forth.s:2641   .text:000000000000448e $t
             forth.s:2641   .text:0000000000004490 QUEST
             forth.s:2643   .text:0000000000004494 $d
             forth.s:2657   .text:00000000000044a0 PARS
             forth.s:2658   .text:00000000000044a0 $t
             forth.s:2659   .text:00000000000044a4 $d
             forth.s:2725   .text:00000000000045b4 PARS8
             forth.s:2689   .text:0000000000004528 PARS3
             forth.s:2672   .text:00000000000044e0 PARS1
             forth.s:2687   .text:0000000000004524 PARS2
             forth.s:2693   .text:0000000000004534 PARS4
             forth.s:2705   .text:0000000000004564 PARS5
             forth.s:2712   .text:0000000000004588 PARS6
             forth.s:2718   .text:000000000000459c PARS7
             forth.s:2736   .text:00000000000045c8 _PARSE
             forth.s:2736   .text:00000000000045ce $t
             forth.s:2736   .text:00000000000045d0 PARSE
             forth.s:2738   .text:00000000000045d4 $d
             forth.s:2759   .text:0000000000004614 _DOTPR
             forth.s:2759   .text:0000000000004618 DOTPR
             forth.s:2761   .text:000000000000461c $d
             forth.s:2772   .text:0000000000004634 _PAREN
             forth.s:2772   .text:0000000000004636 $t
             forth.s:2772   .text:0000000000004638 PAREN
             forth.s:2774   .text:000000000000463c $d
             forth.s:2785   .text:0000000000004654 _BKSLA
             forth.s:2785   .text:0000000000004656 $t
             forth.s:2785   .text:0000000000004658 BKSLA
             forth.s:2787   .text:000000000000465c $d
             forth.s:2798   .text:0000000000004674 _CHAR
             forth.s:2798   .text:000000000000467c CHAR
ARM GAS  forth.s 			page 233


             forth.s:2800   .text:0000000000004680 $d
             forth.s:2810   .text:0000000000004698 _IMCHAR
             forth.s:2810   .text:00000000000046a0 IMCHAR
             forth.s:2812   .text:00000000000046a4 $d
             forth.s:3487   .text:0000000000004e98 LITER
             forth.s:2821   .text:00000000000046b4 _WORDD
             forth.s:2821   .text:00000000000046bc WORDD
             forth.s:2823   .text:00000000000046c0 $d
             forth.s:2835   .text:00000000000046d8 _TOKEN
             forth.s:2835   .text:00000000000046de $t
             forth.s:2835   .text:00000000000046e0 TOKEN
             forth.s:2837   .text:00000000000046e4 $d
             forth.s:3002   .text:00000000000048d4 UPPER
             forth.s:2851   .text:00000000000046f8 _NAMET
             forth.s:2851   .text:00000000000046fe $t
             forth.s:2851   .text:0000000000004700 NAMET
             forth.s:2853   .text:0000000000004704 $d
             forth.s:2872   .text:0000000000004724 _SAMEQ
             forth.s:2872   .text:000000000000472a $t
             forth.s:2872   .text:000000000000472c SAMEQ
             forth.s:2874   .text:0000000000004730 $d
             forth.s:2891   .text:0000000000004778 SAME2
             forth.s:2876   .text:000000000000473c SAME1
             forth.s:2906   .text:000000000000478c SEARCH
             forth.s:2907   .text:000000000000478c $t
             forth.s:2908   .text:0000000000004790 $d
             forth.s:2915   .text:00000000000047ac SEARCH1
             forth.s:2935   .text:0000000000004804 SEARCH6
             forth.s:2928   .text:00000000000047ec SEARCH2
             forth.s:2933   .text:00000000000047fc SEARCH3
             forth.s:2942   .text:000000000000481c SEARCH4
             forth.s:2948   .text:0000000000004838 SEARCH5
             forth.s:2964   .text:0000000000004860 _NAMEQ
             forth.s:2964   .text:0000000000004866 $t
             forth.s:2964   .text:0000000000004868 NAMEQ
             forth.s:2966   .text:000000000000486c $d
             forth.s:2981   .text:0000000000004880 _ASCIZ
             forth.s:2981   .text:0000000000004886 $t
             forth.s:2981   .text:0000000000004888 ASCIZ
             forth.s:2983   .text:000000000000488c $d
             forth.s:3002   .text:00000000000048cc _UPPER
             forth.s:3002   .text:00000000000048d2 $t
             forth.s:3004   .text:00000000000048d8 $d
             forth.s:3035   .text:000000000000495c BKSP
             forth.s:3036   .text:000000000000495c $t
             forth.s:3037   .text:0000000000004960 $d
             forth.s:3051   .text:00000000000049a4 BACK1
             forth.s:3060   .text:00000000000049a8 TAP
             forth.s:3061   .text:00000000000049a8 $t
             forth.s:3062   .text:00000000000049ac $d
             forth.s:3075   .text:00000000000049c4 KTAP
             forth.s:3076   .text:00000000000049c4 TTAP
             forth.s:3077   .text:00000000000049c4 $t
             forth.s:3078   .text:00000000000049c8 $d
             forth.s:3092   .text:0000000000004a08 KTAP2
             forth.s:3089   .text:0000000000004a00 KTAP1
             forth.s:3104   .text:0000000000004a20 _ACCEP
ARM GAS  forth.s 			page 234


             forth.s:3106   .text:0000000000004a2c $d
             forth.s:3109   .text:0000000000004a38 ACCP1
             forth.s:3125   .text:0000000000004a80 ACCP4
             forth.s:3121   .text:0000000000004a74 ACCP2
             forth.s:3123   .text:0000000000004a78 ACCP3
             forth.s:3136   .text:0000000000004a94 _QUERY
             forth.s:3136   .text:0000000000004a9a $t
             forth.s:3136   .text:0000000000004a9c QUERY
             forth.s:3138   .text:0000000000004aa0 $d
             forth.s:3158   .text:0000000000004ad4 _ABORT
             forth.s:3158   .text:0000000000004ada $t
             forth.s:3160   .text:0000000000004ae0 ABORT1
             forth.s:3161   .text:0000000000004ae0 $d
             forth.s:3241   .text:0000000000004bbc LBRAC
             forth.s:3174   .text:0000000000004af0 PRT_ABORT
             forth.s:3175   .text:0000000000004af0 $t
             forth.s:3176   .text:0000000000004af4 $d
             forth.s:3193   .text:0000000000004b18 ABORQ
             forth.s:3194   .text:0000000000004b18 $t
             forth.s:3195   .text:0000000000004b1c $d
             forth.s:3219   .text:0000000000004b54 _INTER
             forth.s:3221   .text:0000000000004b64 $d
             forth.s:3230   .text:0000000000004ba0 INTE1
             forth.s:3227   .text:0000000000004b96 $t
             forth.s:3228   .text:0000000000004b98 $d
             forth.s:3234   .text:0000000000004bb0 INTE2
             forth.s:3241   .text:0000000000004bb8 _LBRAC
             forth.s:3241   .text:0000000000004bba $t
             forth.s:3243   .text:0000000000004bc0 $d
             forth.s:3256   .text:0000000000004be8 _DOTOK
             forth.s:3256   .text:0000000000004bec $t
             forth.s:3256   .text:0000000000004bec DOTOK
             forth.s:3258   .text:0000000000004bf0 $d
             forth.s:3264   .text:0000000000004c14 DOTO1
             forth.s:3265   .text:0000000000004c14 $d
             forth.s:3273   .text:0000000000004c20 _QSTAC
             forth.s:3273   .text:0000000000004c28 QSTAC
             forth.s:3275   .text:0000000000004c2c $d
             forth.s:3277   .text:0000000000004c42 $t
             forth.s:3278   .text:0000000000004c44 $d
             forth.s:3285   .text:0000000000004c4c _EVAL
             forth.s:3287   .text:0000000000004c58 EVAL1
             forth.s:3288   .text:0000000000004c58 $d
             forth.s:3296   .text:0000000000004c80 EVAL2
             forth.s:3306   .text:0000000000004c90 _PRESE
             forth.s:3308   .text:0000000000004c9c $d
             forth.s:3322   .text:0000000000004cc8 _QUIT
             forth.s:3323   .text:0000000000004cd0 $d
             forth.s:3325   .text:0000000000004cdc QUIT1
             forth.s:3327   .text:0000000000004ce0 QUIT2
             forth.s:3337   .text:0000000000004cf4 _FORGET
             forth.s:3337   .text:0000000000004cfc FORGET
             forth.s:3339   .text:0000000000004d00 $d
             forth.s:3934   .text:00000000000053c4 OVERT
             forth.s:3366   .text:0000000000004d48 $d
             forth.s:3366   .text:0000000000004d4c _POSTPONE
             forth.s:3366   .text:0000000000004d58 POSTPONE
ARM GAS  forth.s 			page 235


             forth.s:3368   .text:0000000000004d5c $d
             forth.s:3391   .text:0000000000004d94 ITICK
             forth.s:3976   .text:0000000000005430 CALLC
             forth.s:3378   .text:0000000000004d6c _TICK
             forth.s:3378   .text:0000000000004d6e $t
             forth.s:3378   .text:0000000000004d70 TICK
             forth.s:3380   .text:0000000000004d74 $d
             forth.s:3384   .text:0000000000004d88 TICK1
             forth.s:3391   .text:0000000000004d90 _ITICK
             forth.s:3391   .text:0000000000004d94 $t
             forth.s:3393   .text:0000000000004d98 $d
             forth.s:3408   .text:0000000000004da4 _FIND
             forth.s:3408   .text:0000000000004dac FIND
             forth.s:3410   .text:0000000000004db0 $d
             forth.s:3430   .text:0000000000004df4 _ALLOT
             forth.s:3430   .text:0000000000004dfa $t
             forth.s:3432   .text:0000000000004e00 $d
             forth.s:3441   .text:0000000000004e10 _COMMA
             forth.s:3441   .text:0000000000004e12 $t
             forth.s:3441   .text:0000000000004e14 COMMA
             forth.s:3443   .text:0000000000004e18 $d
             forth.s:3457   .text:0000000000004e34 $d
             forth.s:3457   .text:0000000000004e38 _BCOMP
             forth.s:3457   .text:0000000000004e42 $t
             forth.s:3457   .text:0000000000004e44 BCOMP
             forth.s:3459   .text:0000000000004e48 $d
             forth.s:3469   .text:0000000000004e58 _COMPI
             forth.s:3469   .text:0000000000004e60 $t
             forth.s:3469   .text:0000000000004e60 COMPI
             forth.s:3471   .text:0000000000004e64 $d
             forth.s:3487   .text:0000000000004e90 _LITER
             forth.s:3487   .text:0000000000004e98 $t
             forth.s:3489   .text:0000000000004e9c $d
             forth.s:3499   .text:0000000000004eb0 STRCQ
             forth.s:3500   .text:0000000000004eb0 $t
             forth.s:3501   .text:0000000000004eb4 $d
             forth.s:3523   .text:0000000000004eec _FOR
             forth.s:3523   .text:0000000000004ef0 $t
             forth.s:3523   .text:0000000000004ef0 FOR
             forth.s:3525   .text:0000000000004ef4 $d
             forth.s:3534   .text:0000000000004f0c _DO
             forth.s:3534   .text:0000000000004f10 DO
             forth.s:3536   .text:0000000000004f14 $d
             forth.s:3543   .text:0000000000004f48 DOPLOOP
             forth.s:3544   .text:0000000000004f48 $t
             forth.s:3562   .text:0000000000004f70 $d
             forth.s:3562   .text:0000000000004f74 _PLOOP
             forth.s:3562   .text:0000000000004f7a $t
             forth.s:3562   .text:0000000000004f7c PLOOP
             forth.s:3564   .text:0000000000004f80 $d
             forth.s:3583   .text:0000000000004fc0 resolve_leave
             forth.s:3569   .text:0000000000004f98 DOLOOP
             forth.s:3570   .text:0000000000004f98 $t
             forth.s:3585   .text:0000000000004fc4 $d
             forth.s:3600   .text:0000000000004ff0 _LOOP
             forth.s:3600   .text:0000000000004ff8 LOOP
             forth.s:3602   .text:0000000000004ffc $d
ARM GAS  forth.s 			page 236


             forth.s:3611   .text:0000000000005018 _UNLOOP
             forth.s:3611   .text:0000000000005020 UNLOOP
             forth.s:3620   .text:0000000000005028 $d
             forth.s:3620   .text:000000000000502c _LEAVE
             forth.s:3620   .text:0000000000005032 $t
             forth.s:3620   .text:0000000000005034 LEAVE
             forth.s:3622   .text:0000000000005038 $d
             forth.s:3633   .text:0000000000005068 DOLEAVE
             forth.s:3634   .text:0000000000005068 $t
             forth.s:3645   .text:0000000000005074 $d
             forth.s:3645   .text:0000000000005078 _BEGIN
             forth.s:3645   .text:000000000000507e $t
             forth.s:3645   .text:0000000000005080 BEGIN
             forth.s:3647   .text:0000000000005084 $d
             forth.s:3656   .text:000000000000508c $d
             forth.s:3656   .text:0000000000005090 _FNEXT
             forth.s:3656   .text:0000000000005098 FNEXT
             forth.s:3658   .text:000000000000509c $d
             forth.s:3666   .text:00000000000050b4 _I
             forth.s:3666   .text:00000000000050b6 $t
             forth.s:3666   .text:00000000000050b8 I
             forth.s:3675   .text:00000000000050c4 $d
             forth.s:3675   .text:00000000000050c8 _J
             forth.s:3675   .text:00000000000050ca $t
             forth.s:3675   .text:00000000000050cc J
             forth.s:3685   .text:00000000000050d8 $d
             forth.s:3685   .text:00000000000050dc _UNTIL
             forth.s:3685   .text:00000000000050e2 $t
             forth.s:3685   .text:00000000000050e4 UNTIL
             forth.s:3687   .text:00000000000050e8 $d
             forth.s:3696   .text:0000000000005100 _AGAIN
             forth.s:3696   .text:0000000000005106 $t
             forth.s:3696   .text:0000000000005108 AGAIN
             forth.s:3698   .text:000000000000510c $d
             forth.s:3707   .text:0000000000005124 _IFF
             forth.s:3707   .text:0000000000005128 IFF
             forth.s:3709   .text:000000000000512c $d
             forth.s:3721   .text:0000000000005154 _AHEAD
             forth.s:3721   .text:000000000000515a $t
             forth.s:3721   .text:000000000000515c AHEAD
             forth.s:3723   .text:0000000000005160 $d
             forth.s:3735   .text:0000000000005188 _REPEA
             forth.s:3735   .text:0000000000005190 REPEA
             forth.s:3737   .text:0000000000005194 $d
             forth.s:3748   .text:00000000000051ac _THENN
             forth.s:3748   .text:00000000000051b4 THENN
             forth.s:3750   .text:00000000000051b8 $d
             forth.s:3761   .text:00000000000051cc _AFT
             forth.s:3761   .text:00000000000051d0 $t
             forth.s:3761   .text:00000000000051d0 AFT
             forth.s:3763   .text:00000000000051d4 $d
             forth.s:3775   .text:00000000000051ec _ELSEE
             forth.s:3775   .text:00000000000051f4 ELSEE
             forth.s:3777   .text:00000000000051f8 $d
             forth.s:3787   .text:000000000000520c _WHILE
             forth.s:3787   .text:0000000000005212 $t
             forth.s:3787   .text:0000000000005214 WHILE
ARM GAS  forth.s 			page 237


             forth.s:3789   .text:0000000000005218 $d
             forth.s:3798   .text:0000000000005228 _ABRTQ
             forth.s:3798   .text:0000000000005230 ABRTQ
             forth.s:3800   .text:0000000000005234 $d
             forth.s:3809   .text:000000000000524c _STRQ
             forth.s:3809   .text:0000000000005250 STRQ
             forth.s:3811   .text:0000000000005254 $d
             forth.s:3821   .text:000000000000526c _DOTQ
             forth.s:3821   .text:0000000000005270 DOTQ
             forth.s:3823   .text:0000000000005274 $d
             forth.s:3837   .text:000000000000528c _UNIQU
             forth.s:3837   .text:0000000000005294 $t
             forth.s:3837   .text:0000000000005294 UNIQU
             forth.s:3839   .text:0000000000005298 $d
             forth.s:3846   .text:00000000000052c0 UNIQ1
             forth.s:3843   .text:00000000000052b4 $d
             forth.s:3856   .text:00000000000052c8 SNAME
             forth.s:3857   .text:00000000000052c8 $t
             forth.s:3858   .text:00000000000052cc $d
             forth.s:3874   .text:0000000000005310 SNAM1
             forth.s:3886   .text:0000000000005324 _SCOMP
             forth.s:3886   .text:0000000000005330 SCOMP
             forth.s:3888   .text:0000000000005334 $d
             forth.s:3900   .text:000000000000536c SCOM2
             forth.s:3897   .text:0000000000005364 SCOM1
             forth.s:3905   .text:0000000000005380 SCOM3
             forth.s:3914   .text:0000000000005388 COLON_ABORT
             forth.s:3915   .text:0000000000005388 $t
             forth.s:3916   .text:000000000000538c $d
             forth.s:3934   .text:00000000000053bc _OVERT
             forth.s:3934   .text:00000000000053c2 $t
             forth.s:3936   .text:00000000000053c8 $d
             forth.s:3947   .text:00000000000053e0 _SEMIS
             forth.s:3947   .text:00000000000053e2 $t
             forth.s:3947   .text:00000000000053e4 SEMIS
             forth.s:3949   .text:00000000000053e8 $d
             forth.s:3961   .text:0000000000005404 _RBRAC
             forth.s:3961   .text:0000000000005406 $t
             forth.s:3961   .text:0000000000005408 RBRAC
             forth.s:3963   .text:000000000000540c $d
             forth.s:3977   .text:0000000000005430 $t
             forth.s:3978   .text:0000000000005434 $d
             forth.s:3990   .text:000000000000544c _COLON
             forth.s:3990   .text:000000000000544e $t
             forth.s:3990   .text:0000000000005450 COLON
             forth.s:3992   .text:0000000000005454 $d
             forth.s:4004   .text:0000000000005470 _IMMED
             forth.s:4004   .text:000000000000547a $t
             forth.s:4004   .text:000000000000547c IMMED
             forth.s:4006   .text:0000000000005480 $d
             forth.s:4024   .text:00000000000054ac _CONST
             forth.s:4024   .text:00000000000054b8 CONST
             forth.s:4026   .text:00000000000054bc $d
             forth.s:4037   .text:00000000000054ec $t
             forth.s:4044   .text:00000000000054ec DODOES
             forth.s:4046   .text:00000000000054f0 $d
             forth.s:4061   .text:0000000000005514 $d
ARM GAS  forth.s 			page 238


             forth.s:4061   .text:0000000000005518 _DOES
             forth.s:4061   .text:000000000000551e $t
             forth.s:4061   .text:0000000000005520 DOES
             forth.s:4063   .text:0000000000005524 $d
             forth.s:4078   .text:0000000000005554 _DEFERAT
             forth.s:4078   .text:000000000000555c DEFERAT
             forth.s:4080   .text:0000000000005560 $d
             forth.s:4090   .text:0000000000005578 _DEFERSTO
             forth.s:4090   .text:0000000000005580 DEFERSTO
             forth.s:4092   .text:0000000000005584 $d
             forth.s:4103   .text:00000000000055a0 _DEFER
             forth.s:4103   .text:00000000000055a6 $t
             forth.s:4103   .text:00000000000055a8 DEFER
             forth.s:4105   .text:00000000000055ac $d
             forth.s:4128   .text:00000000000055f8 CREAT
             forth.s:4116   .text:00000000000055e0 DEFER_NOP
             forth.s:4117   .text:00000000000055e0 $t
             forth.s:4118   .text:00000000000055e4 $d
             forth.s:4128   .text:00000000000055f0 _CREAT
             forth.s:4130   .text:00000000000055fc $d
             forth.s:4143   .text:0000000000005620 _VARIA
             forth.s:4143   .text:000000000000562c VARIA
             forth.s:4145   .text:0000000000005630 $d
             forth.s:4163   .text:0000000000005650 DMP
             forth.s:4164   .text:0000000000005650 $t
             forth.s:4165   .text:0000000000005654 $d
             forth.s:4183   .text:00000000000056a8 PDUM2
             forth.s:4177   .text:0000000000005690 PDUM1
             forth.s:4198   .text:00000000000056c0 $d
             forth.s:4198   .text:00000000000056c4 _DUMP
             forth.s:4198   .text:00000000000056cc DUMP
             forth.s:4200   .text:00000000000056d0 $d
             forth.s:4226   .text:000000000000574c DUMP4
             forth.s:4216   .text:0000000000005724 DUMP1
             forth.s:4228   .text:0000000000005754 DUMP3
             forth.s:4241   .text:0000000000005768 TDOT
             forth.s:4242   .text:0000000000005768 $t
             forth.s:4243   .text:000000000000576c $d
             forth.s:4282   .text:0000000000005800 _DOTS
             forth.s:4282   .text:0000000000005804 DOTS
             forth.s:4284   .text:0000000000005808 $d
             forth.s:4291   .text:0000000000005824 DOTS2
             forth.s:4287   .text:0000000000005818 DOTS1
             forth.s:4296   .text:0000000000005834 RBASE
             forth.s:4297   .text:0000000000005834 $t
             forth.s:4305   .text:0000000000005844 RDOT
             forth.s:4307   .text:0000000000005848 $d
             forth.s:4334   .text:00000000000058ac _TRACE
             forth.s:4334   .text:00000000000058b2 $t
             forth.s:4334   .text:00000000000058b4 TRACE
             forth.s:4336   .text:00000000000058b8 $d
             forth.s:4355   .text:00000000000058fc _TOBODY
             forth.s:4355   .text:0000000000005902 $t
             forth.s:4355   .text:0000000000005904 TOBODY
             forth.s:4364   .text:000000000000590c $d
             forth.s:4364   .text:0000000000005910 _TNAME
             forth.s:4364   .text:0000000000005916 $t
ARM GAS  forth.s 			page 239


             forth.s:4364   .text:0000000000005918 TNAME
             forth.s:4366   .text:000000000000591c $d
             forth.s:4369   .text:0000000000005928 TNAM1
             forth.s:4380   .text:000000000000595c TNAM2
             forth.s:4389   .text:000000000000596c _DOTID
             forth.s:4389   .text:0000000000005970 $t
             forth.s:4389   .text:0000000000005970 DOTID
             forth.s:4391   .text:0000000000005974 $d
             forth.s:4398   .text:0000000000005998 DOTI1
             forth.s:4399   .text:00000000000059a6 $t
             forth.s:4400   .text:00000000000059a8 $d
             forth.s:4402   *ABS*:0000000000000000 WANT_SEE
             forth.s:4476   .text:00000000000059b0 _WORDS
             forth.s:4476   .text:00000000000059b6 $t
             forth.s:4476   .text:00000000000059b8 WORDS
             forth.s:4478   .text:00000000000059bc $d
             forth.s:4481   .text:00000000000059c8 WORS1
             forth.s:4490   .text:00000000000059f0 WORS2
             forth.s:4499   .text:00000000000059f8 _MARK
             forth.s:4499   .text:0000000000005a00 MARK
             forth.s:4501   .text:0000000000005a04 $d
             forth.s:4504   .text:0000000000005a10 $t
             forth.s:4505   .text:0000000000005a14 $d
             forth.s:4520   .text:0000000000005a44 _ARRAY
             forth.s:4520   .text:0000000000005a4a $t
             forth.s:4520   .text:0000000000005a4c ARRAY
             forth.s:4522   .text:0000000000005a50 $d
             forth.s:4536   .text:0000000000005a8c DO_ARRAY
             forth.s:4537   .text:0000000000005a8c $t
             forth.s:4538   .text:0000000000005a90 $d
             forth.s:4556   .text:0000000000005aac VERSN
             forth.s:4557   .text:0000000000005aac $t
             forth.s:4558   .text:0000000000005ab0 $d
             forth.s:4566   .text:0000000000005ac0 _HI
             forth.s:4566   .text:0000000000005ac4 HI
             forth.s:4568   .text:0000000000005ac8 $d
             forth.s:4569   .text:0000000000005ae2 $t
             forth.s:4570   .text:0000000000005ae4 $d
             forth.s:4594   .text:0000000000005b30 $t
             forth.s:4595   .text:0000000000005b34 $d
             forth.s:4607   .text:0000000000005b50 PS2_QUERY
             forth.s:4608   .text:0000000000005b50 $t
             forth.s:4609   .text:0000000000005b54 $d
             forth.s:4623   .text:0000000000005bba $t
             forth.s:4624   .text:0000000000005bbc $d
             forth.s:4634   .text:0000000000005bc8 IF_SENSE
             forth.s:4635   .text:0000000000005bc8 $t
             forth.s:4636   .text:0000000000005bcc $d
             forth.s:4650   .text:0000000000005bfc READY
             forth.s:4651   .text:0000000000005bfc $t
             forth.s:4652   .text:0000000000005c00 $d
             forth.s:4652   .text:0000000000005c0a $t
             forth.s:4653   .text:0000000000005c0c $d
             forth.s:4671   .text:0000000000005c34 COLD1
             forth.s:4672   .text:0000000000005c34 $d
             forth.s:4687   .text:0000000000005c84 COLD2
             forth.s:4690   .text:0000000000005c84 $d
ARM GAS  forth.s 			page 240


             forth.s:4693   .text:0000000000005c88 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
          ser-term.s:90     .text:00000000000009df $d
          ser-term.s:90     .text:00000000000009e0 $t
          ser-term.s:110    .text:0000000000000a19 $d
          ser-term.s:110    .text:0000000000000a1a $t
          ser-term.s:133    .text:0000000000000a57 $d
          ser-term.s:133    .text:0000000000000a58 $t
          ser-term.s:164    .text:0000000000000a9f $d
          ser-term.s:164    .text:0000000000000aa0 $t
          ser-term.s:191    .text:0000000000000b15 $d
          ser-term.s:191    .text:0000000000000b16 $t
          ser-term.s:203    .text:0000000000000b43 $d
          ser-term.s:203    .text:0000000000000b44 $t
             tvout.s:264    .text:0000000000000d8f $d
             tvout.s:264    .text:0000000000000d90 $t
             tvout.s:278    .text:0000000000000dc3 $d
             tvout.s:278    .text:0000000000000dc4 $t
             tvout.s:306    .text:0000000000000e1d $d
             tvout.s:306    .text:0000000000000e1e $t
             tvout.s:325    .text:0000000000000e4b $d
             tvout.s:325    .text:0000000000000e4c $t
             tvout.s:427    .text:0000000000000f85 $d
             tvout.s:427    .text:0000000000000f86 $t
             tvout.s:448    .text:0000000000000fdf $d
             tvout.s:448    .text:0000000000000fe0 $t
             tvout.s:495    .text:0000000000001075 $d
             tvout.s:495    .text:0000000000001076 $t
           ps2_kbd.s:307    .text:0000000000001763 $d
           ps2_kbd.s:307    .text:0000000000001764 $t
           ps2_kbd.s:396    .text:000000000000185f $d
           ps2_kbd.s:396    .text:0000000000001860 $t
           ps2_kbd.s:616    .text:0000000000001b01 $d
           ps2_kbd.s:616    .text:0000000000001b02 $t
           ps2_kbd.s:633    .text:0000000000001b3b $d
           ps2_kbd.s:633    .text:0000000000001b3c $t
         spi-flash.s:85     .text:0000000000001c27 $d
         spi-flash.s:85     .text:0000000000001c28 $t
         spi-flash.s:151    .text:0000000000001cf3 $d
         spi-flash.s:151    .text:0000000000001cf4 $t
         spi-flash.s:238    .text:0000000000001e37 $d
         spi-flash.s:238    .text:0000000000001e38 $t
         spi-flash.s:256    .text:0000000000001e73 $d
         spi-flash.s:256    .text:0000000000001e74 $t
         spi-flash.s:278    .text:0000000000001ec7 $d
         spi-flash.s:278    .text:0000000000001ec8 $t
ARM GAS  forth.s 			page 241


         spi-flash.s:325    .text:0000000000001f47 $d
         spi-flash.s:325    .text:0000000000001f48 $t
         spi-flash.s:343    .text:0000000000001f69 $d
         spi-flash.s:343    .text:0000000000001f6a $t
         spi-flash.s:352    .text:0000000000001f7d $d
         spi-flash.s:352    .text:0000000000001f7e $t
               fpu.s:222    .text:000000000000214f $d
               fpu.s:222    .text:0000000000002150 $t
               fpu.s:235    .text:000000000000216f $d
               fpu.s:235    .text:0000000000002170 $t
               fpu.s:249    .text:000000000000218f $d
               fpu.s:249    .text:0000000000002190 $t
               fpu.s:262    .text:00000000000021af $d
               fpu.s:262    .text:00000000000021b0 $t
               fpu.s:285    .text:00000000000021ed $d
               fpu.s:285    .text:00000000000021ee $t
               fpu.s:297    .text:000000000000220d $d
               fpu.s:297    .text:000000000000220e $t
               fpu.s:319    .text:0000000000002247 $d
               fpu.s:319    .text:0000000000002248 $t
               fpu.s:330    .text:0000000000002263 $d
               fpu.s:330    .text:0000000000002264 $t
               fpu.s:340    .text:000000000000227d $d
               fpu.s:340    .text:000000000000227e $t
               fpu.s:353    .text:00000000000022ad $d
               fpu.s:353    .text:00000000000022ae $t
               fpu.s:379    .text:00000000000022fd $d
               fpu.s:379    .text:00000000000022fe $t
               fpu.s:403    .text:0000000000002347 $d
               fpu.s:403    .text:0000000000002348 $t
               fpu.s:421    .text:0000000000002379 $d
               fpu.s:421    .text:000000000000237a $t
               fpu.s:431    .text:0000000000002395 $d
               fpu.s:431    .text:0000000000002396 $t
            strtof.s:226    .text:0000000000002617 $d
            strtof.s:226    .text:0000000000002618 $t
              ftoa.s:412    .text:0000000000002c83 $d
              ftoa.s:412    .text:0000000000002c84 $t
             forth.s:133    .text:0000000000002d3f $d
             forth.s:133    .text:0000000000002d40 $t
             forth.s:145    .text:0000000000002d5f $d
             forth.s:145    .text:0000000000002d60 $t
             forth.s:157    .text:0000000000002d7f $d
             forth.s:157    .text:0000000000002d80 $t
             forth.s:179    .text:0000000000002db9 $d
             forth.s:179    .text:0000000000002dba $t
             forth.s:215    .text:0000000000002dd7 $d
             forth.s:215    .text:0000000000002dd8 $t
             forth.s:262    .text:0000000000002e85 $d
             forth.s:262    .text:0000000000002e86 $t
             forth.s:279    .text:0000000000002eb3 $d
             forth.s:279    .text:0000000000002eb4 $t
             forth.s:293    .text:0000000000002edd $d
             forth.s:293    .text:0000000000002ede $t
             forth.s:404    .text:0000000000002f95 $d
             forth.s:404    .text:0000000000002f96 $t
             forth.s:430    .text:0000000000002fbf $d
ARM GAS  forth.s 			page 242


             forth.s:430    .text:0000000000002fc0 $t
             forth.s:440    .text:0000000000002fd3 $d
             forth.s:440    .text:0000000000002fd4 $t
             forth.s:449    .text:0000000000002fdf $d
             forth.s:449    .text:0000000000002fe0 $t
             forth.s:469    .text:000000000000300d $d
             forth.s:469    .text:000000000000300e $t
             forth.s:478    .text:0000000000003021 $d
             forth.s:478    .text:0000000000003022 $t
             forth.s:535    .text:0000000000003095 $d
             forth.s:535    .text:0000000000003096 $t
             forth.s:551    .text:00000000000030b7 $d
             forth.s:551    .text:00000000000030b8 $t
             forth.s:576    .text:00000000000030e5 $d
             forth.s:576    .text:00000000000030e6 $t
             forth.s:599    .text:0000000000003115 $d
             forth.s:599    .text:0000000000003116 $t
             forth.s:616    .text:0000000000003139 $d
             forth.s:616    .text:000000000000313a $t
             forth.s:646    .text:000000000000317f $d
             forth.s:646    .text:0000000000003180 $t
             forth.s:655    .text:0000000000003195 $d
             forth.s:655    .text:0000000000003196 $t
             forth.s:703    .text:00000000000031ef $d
             forth.s:703    .text:00000000000031f0 $t
             forth.s:714    .text:0000000000003203 $d
             forth.s:714    .text:0000000000003204 $t
             forth.s:722    .text:0000000000003211 $d
             forth.s:722    .text:0000000000003212 $t
             forth.s:730    .text:0000000000003221 $d
             forth.s:730    .text:0000000000003222 $t
             forth.s:738    .text:0000000000003231 $d
             forth.s:738    .text:0000000000003232 $t
             forth.s:762    .text:0000000000003261 $d
             forth.s:762    .text:0000000000003262 $t
             forth.s:787    .text:0000000000003295 $d
             forth.s:787    .text:0000000000003296 $t
             forth.s:795    .text:00000000000032a5 $d
             forth.s:795    .text:00000000000032a6 $t
             forth.s:803    .text:00000000000032b7 $d
             forth.s:803    .text:00000000000032b8 $t
             forth.s:824    .text:00000000000032df $d
             forth.s:824    .text:00000000000032e0 $t
             forth.s:853    .text:000000000000331b $d
             forth.s:853    .text:000000000000331c $t
             forth.s:863    .text:000000000000332f $d
             forth.s:863    .text:0000000000003330 $t
             forth.s:876    .text:000000000000334d $d
             forth.s:876    .text:000000000000334e $t
             forth.s:921    .text:00000000000033b5 $d
             forth.s:921    .text:00000000000033b6 $t
             forth.s:929    .text:00000000000033c9 $d
             forth.s:929    .text:00000000000033ca $t
             forth.s:970    .text:000000000000341f $d
             forth.s:970    .text:0000000000003420 $t
             forth.s:993    .text:000000000000344b $d
             forth.s:993    .text:000000000000344c $t
ARM GAS  forth.s 			page 243


             forth.s:1006   .text:000000000000346b $d
             forth.s:1006   .text:000000000000346c $t
             forth.s:1030   .text:000000000000349b $d
             forth.s:1030   .text:000000000000349c $t
             forth.s:1076   .text:00000000000034f3 $d
             forth.s:1076   .text:00000000000034f4 $t
             forth.s:1088   .text:000000000000350d $d
             forth.s:1088   .text:000000000000350e $t
             forth.s:1100   .text:000000000000352d $d
             forth.s:1100   .text:000000000000352e $t
             forth.s:1172   .text:00000000000035b1 $d
             forth.s:1172   .text:00000000000035b2 $t
             forth.s:1181   .text:00000000000035c9 $d
             forth.s:1181   .text:00000000000035ca $t
             forth.s:1208   .text:0000000000003611 $d
             forth.s:1208   .text:0000000000003612 $t
             forth.s:1238   .text:000000000000364d $d
             forth.s:1238   .text:000000000000364e $t
             forth.s:1257   .text:0000000000003679 $d
             forth.s:1257   .text:000000000000367a $t
             forth.s:1297   .text:00000000000036d3 $d
             forth.s:1297   .text:00000000000036d4 $t
             forth.s:1317   .text:00000000000036fd $d
             forth.s:1317   .text:00000000000036fe $t
             forth.s:1331   .text:000000000000371b $d
             forth.s:1331   .text:000000000000371c $t
             forth.s:1342   .text:0000000000003739 $d
             forth.s:1342   .text:000000000000373a $t
             forth.s:1371   .text:0000000000003791 $d
             forth.s:1371   .text:0000000000003792 $t
             forth.s:1386   .text:00000000000037af $d
             forth.s:1386   .text:00000000000037b0 $t
             forth.s:1403   .text:00000000000037db $d
             forth.s:1403   .text:00000000000037dc $t
             forth.s:1433   .text:0000000000003817 $d
             forth.s:1433   .text:0000000000003818 $t
             forth.s:1473   .text:000000000000388f $d
             forth.s:1473   .text:0000000000003890 $t
             forth.s:1582   .text:00000000000039bb $d
             forth.s:1582   .text:00000000000039bc $t
             forth.s:1604   .text:0000000000003a07 $d
             forth.s:1604   .text:0000000000003a08 $t
             forth.s:1653   .text:0000000000003a47 $d
             forth.s:1653   .text:0000000000003a48 $t
             forth.s:1704   .text:0000000000003abf $d
             forth.s:1704   .text:0000000000003ac0 $t
             forth.s:1796   .text:0000000000003ba9 $d
             forth.s:1796   .text:0000000000003baa $t
             forth.s:1824   .text:0000000000003bdd $d
             forth.s:1824   .text:0000000000003bde $t
             forth.s:1859   .text:0000000000003c2d $d
             forth.s:1859   .text:0000000000003c2e $t
             forth.s:1870   .text:0000000000003c51 $d
             forth.s:1870   .text:0000000000003c52 $t
             forth.s:1903   .text:0000000000003ca1 $d
             forth.s:1903   .text:0000000000003ca2 $t
             forth.s:1935   .text:0000000000003ce9 $d
ARM GAS  forth.s 			page 244


             forth.s:1935   .text:0000000000003cea $t
             forth.s:2013   .text:0000000000003dcb $d
             forth.s:2013   .text:0000000000003dcc $t
             forth.s:2025   .text:0000000000003de9 $d
             forth.s:2025   .text:0000000000003dea $t
             forth.s:2057   .text:0000000000003e37 $d
             forth.s:2057   .text:0000000000003e38 $t
             forth.s:2075   .text:0000000000003e69 $d
             forth.s:2075   .text:0000000000003e6a $t
             forth.s:2089   .text:0000000000003e93 $d
             forth.s:2089   .text:0000000000003e94 $t
             forth.s:2167   .text:0000000000003f4f $d
             forth.s:2167   .text:0000000000003f50 $t
             forth.s:2284   .text:0000000000004081 $d
             forth.s:2284   .text:0000000000004082 $t
             forth.s:2370   .text:000000000000419f $d
             forth.s:2370   .text:00000000000041a0 $t
             forth.s:2387   .text:00000000000041d5 $d
             forth.s:2387   .text:00000000000041d6 $t
             forth.s:2405   .text:000000000000420b $d
             forth.s:2405   .text:000000000000420c $t
             forth.s:2500   .text:00000000000042ff $d
             forth.s:2500   .text:0000000000004300 $t
             forth.s:2537   .text:0000000000004363 $d
             forth.s:2537   .text:0000000000004364 $t
             forth.s:2601   .text:0000000000004417 $d
             forth.s:2601   .text:0000000000004418 $t
             forth.s:2617   .text:000000000000443f $d
             forth.s:2617   .text:0000000000004440 $t
             forth.s:2759   .text:0000000000004617 $d
             forth.s:2759   .text:0000000000004618 $t
             forth.s:2798   .text:0000000000004679 $d
             forth.s:2798   .text:000000000000467a $t
             forth.s:2810   .text:000000000000469f $d
             forth.s:2810   .text:00000000000046a0 $t
             forth.s:2821   .text:00000000000046b9 $d
             forth.s:2821   .text:00000000000046ba $t
             forth.s:3104   .text:0000000000004a27 $d
             forth.s:3104   .text:0000000000004a28 $t
             forth.s:3219   .text:0000000000004b5f $d
             forth.s:3219   .text:0000000000004b60 $t
             forth.s:3273   .text:0000000000004c27 $d
             forth.s:3273   .text:0000000000004c28 $t
             forth.s:3285   .text:0000000000004c51 $d
             forth.s:3285   .text:0000000000004c52 $t
             forth.s:3306   .text:0000000000004c97 $d
             forth.s:3306   .text:0000000000004c98 $t
             forth.s:3322   .text:0000000000004ccd $d
             forth.s:3322   .text:0000000000004cce $t
             forth.s:3337   .text:0000000000004cfb $d
             forth.s:3337   .text:0000000000004cfc $t
             forth.s:3366   .text:0000000000004d55 $d
             forth.s:3366   .text:0000000000004d56 $t
             forth.s:3408   .text:0000000000004da9 $d
             forth.s:3408   .text:0000000000004daa $t
             forth.s:3534   .text:0000000000004f0f $d
             forth.s:3534   .text:0000000000004f10 $t
ARM GAS  forth.s 			page 245


             forth.s:3600   .text:0000000000004ff5 $d
             forth.s:3600   .text:0000000000004ff6 $t
             forth.s:3611   .text:000000000000501f $d
             forth.s:3611   .text:0000000000005020 $t
             forth.s:3656   .text:0000000000005095 $d
             forth.s:3656   .text:0000000000005096 $t
             forth.s:3707   .text:0000000000005127 $d
             forth.s:3707   .text:0000000000005128 $t
             forth.s:3735   .text:000000000000518f $d
             forth.s:3735   .text:0000000000005190 $t
             forth.s:3748   .text:00000000000051b1 $d
             forth.s:3748   .text:00000000000051b2 $t
             forth.s:3775   .text:00000000000051f1 $d
             forth.s:3775   .text:00000000000051f2 $t
             forth.s:3798   .text:000000000000522f $d
             forth.s:3798   .text:0000000000005230 $t
             forth.s:3809   .text:000000000000524f $d
             forth.s:3809   .text:0000000000005250 $t
             forth.s:3821   .text:000000000000526f $d
             forth.s:3821   .text:0000000000005270 $t
             forth.s:3886   .text:000000000000532d $d
             forth.s:3886   .text:000000000000532e $t
             forth.s:4024   .text:00000000000054b5 $d
             forth.s:4024   .text:00000000000054b6 $t
             forth.s:4078   .text:000000000000555b $d
             forth.s:4078   .text:000000000000555c $t
             forth.s:4090   .text:000000000000557f $d
             forth.s:4090   .text:0000000000005580 $t
             forth.s:4128   .text:00000000000055f7 $d
             forth.s:4128   .text:00000000000055f8 $t
             forth.s:4143   .text:0000000000005629 $d
             forth.s:4143   .text:000000000000562a $t
             forth.s:4198   .text:00000000000056c9 $d
             forth.s:4198   .text:00000000000056ca $t
             forth.s:4282   .text:0000000000005803 $d
             forth.s:4282   .text:0000000000005804 $t
             forth.s:4499   .text:00000000000059fd $d
             forth.s:4499   .text:00000000000059fe $t
             forth.s:4566   .text:0000000000005ac3 $d
             forth.s:4566   .text:0000000000005ac4 $t
             forth.s:4665   .text:0000000000005c1d $d
             forth.s:4665   .text:0000000000005c1e $t

UNDEFINED SYMBOLS
_mstack
