ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      CBF95DF8 
 157      04EB
 158 000a DFF8CCC6 	  ldr IP,=dh
 159 000e 02F0FDBA 	  b INEXT  
 160              	dh:
 161 0012 09420000 	  _ADR PRESE
 162 0016 E5380000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 5D260000 	  _ADR CFSR 
 164 0038 3D290000 	  _ADR DUPP
 165 003c C9280000 	  _ADR TOR 
 166 0040 D3270000 	  _DOLIT 16 
 166      10000000 
 167 0048 2D2E0000 	  _ADR BASE 
 168 004c 45280000 	  _ADR STORE 
 169 0050 69390000 	  _ADR UDOT 
 170 0054 E5380000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 85280000 	  _ADR RFROM
 172 0068 D3270000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 81290000 	  _ADR ANDD
 174 0074 13280000 	  _QBRAN 1f
 174      94000000 
 175 007c 81260000 	  _ADR BFAR
 176 0080 D3270000 	  _DOLIT ','
 176      2C000000 
 177 0088 DD260000 	  _ADR EMIT 
 178 008c F5370000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 69390000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 E5380000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 8D1D0000 	  _ADR FPSCR
 184 00a8 69390000 	  _ADR UDOT 
 185              	1:
 186 00ac 39030000 	  _ADR reset_mcu 
 187              	
 188              	  
 189              	
 190              	/*********************************
 191              	   fpu exception 
 192              	*********************************/
 193              	  .type fpu_exception, %function 
 194              	  .global fpu_exception 
 195              	  .p2align 2 
 196              	fpu_exception:
 197 00b0 4FF00000 	  _MOV32 r0,RAM_END 
 197      C2F20200 
 198 00b8 8546     	  mov sp,r0 
 199 00ba DFF820C6 	  ldr IP,=fpu_except 
 200 00be 02F0A5BA 	  b INEXT 
 201              	fpu_except:  
 202              	//  _CALL forth_init 
 203 00c2 09420000 	  _ADR PRESE
 204 00c6 7D380000 	  _ADR CR  
 205 00ca D3270000 	  _DOLIT 16 
 205      10000000 
 206 00d2 2D2E0000 	  _ADR BASE 
 207 00d6 45280000 	  _ADR STORE 
 208 00da E5380000 	  _DOTQP 21 , "fpu exception FPSCR: "
 208      15667075 
 208      20657863 
 208      65707469 
 208      6F6E2046 
 209 00f4 8D1D0000 	  _ADR FPSCR 
 210 00f8 69390000 	  _ADR UDOT 
 211 00fc 7D380000 	  _ADR CR 
 212 0100 39030000 	  _ADR reset_mcu  
 213              	
 214              	
 215              	
 216              	
 217              	/*********************************
 218              	  non maskable interrupt handler
 219              	  irq -14 
 220              	*********************************/
 221              	  .type nmi_handler, %function
 222              	  .p2align 2
 223              	  .global nmi_handler 
 224              	nmi_handler:
 225 0104 DFF8D8C5 	  ldr IP,=nmi_hl 
 226 0108 02F080BA 	  b  INEXT
ARM GAS  forth.s 			page 16


 227              	nmi_hl:
 228 010c 09420000 	  _ADR PRESE 
 229 0110 7D380000 	  _ADR CR 
 230 0114 E5380000 	  _DOTQP  25 , "not managed nmi exception"
 230      196E6F74 
 230      206D616E 
 230      61676564 
 230      206E6D69 
 231 0134 7D380000 	  _ADR CR 
 232 0138 81400000 	  _ADR ABORT 
 233              	   
 234              	
 235              	/***********************************
 236              	   hard fault handler
 237              	   irq -13
 238              	***********************************/
 239              	  .type hardfault_handler, %function
 240              	  .p2align 2
 241              	  .global hardfault_handler 
 242              	hardfault_handler:
 243 013c 4FF00000 	  _MOV32 r0,RAM_END 
 243      C2F20200 
 244 0144 8546     	  mov sp,r0 
 245 0146 DFF89CC5 	  ldr IP,=hardfault_hl 
 246 014a 02F05FBA 	  b INEXT
 247              	hardfault_hl:
 248 014e 09420000 	  _ADR PRESE
 249 0152 7D380000 	  _ADR CR  
 250 0156 E5380000 	  _DOTQP  20 , "hard fault exception"
 250      14686172 
 250      64206661 
 250      756C7420 
 250      65786365 
 251 0170 7D380000 	  _ADR CR 
 252 0174 39030000 	  _ADR reset_mcu
 253              	
 254              	/***********************************
 255              	   memory manager fault 
 256              	   irq -12 
 257              	************************************/
 258              	  .type memfault_handler, %function
 259              	  .p2align 2
 260              	  .global memfault_handler 
 261              	memfault_handler:
 262 0178 4FF00000 	  _MOV32 r0,RAM_END 
 262      C2F20200 
 263 0180 8546     	  mov sp,r0 
 264 0182 DFF864C5 	  ldr IP,=memfault_hl 
 265 0186 02F041BA 	  b INEXT 
 266              	memfault_hl: 
 267 018a 09420000 	  _ADR PRESE
 268 018e 7D380000 	  _ADR CR  
 269 0192 E5380000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 269      216D656D 
 269      6F727920 
 269      6D616E61 
 269      67657220 
ARM GAS  forth.s 			page 17


 270 01b8 D3270000 	  _DOLIT 16 
 270      10000000 
 271 01c0 2D2E0000 	  _ADR BASE 
 272 01c4 45280000 	  _ADR STORE   
 273 01c8 5D260000 	  _ADR CFSR
 274 01cc D3270000 	  _DOLIT 255 
 274      FF000000 
 275 01d4 81290000 	  _ADR ANDD 
 276 01d8 69390000 	  _ADR UDOT 
 277 01dc 7D380000 	  _ADR CR 
 278 01e0 39030000 	  _ADR reset_mcu 
 279              	
 280              	
 281              	/************************************
 282              	   bus fault 
 283              	   irq -11 
 284              	***********************************/
 285              	  .type busfault_handler, %function
 286              	  .p2align 2
 287              	  .global busfault_handler 
 288              	busfault_handler:
 289 01e4 4FF00000 	  _MOV32 r0,RAM_END 
 289      C2F20200 
 290 01ec 8546     	  mov sp,r0 
 291 01ee DFF8FCC4 	  ldr IP,=busfault_hl 
 292 01f2 02F00BBA 	  b INEXT 
 293              	busfault_hl:
 294 01f6 09420000 	  _ADR PRESE
 295 01fa D3270000 	  _DOLIT 1 
 295      01000000 
 296 0202 A9270000 	  _ADR ULED 
 297 0206 D3270000 	  _DOLIT  100 
 297      64000000 
 298 020e ED2D0000 	  _ADR MSEC 
 299 0212 81260000 	  _ADR BFAR 
 300 0216 5D260000 	  _ADR CFSR 
 301 021a 7D380000 	  _ADR CR  
 302 021e E5380000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 302      1B627573 
 302      20666175 
 302      6C742065 
 302      78636570 
 303 0240 D3270000 	  _DOLIT 16 
 303      10000000 
 304 0248 2D2E0000 	  _ADR BASE 
 305 024c 45280000 	  _ADR STORE   
 306 0250 D3270000 	  _DOLIT 0XFF00 
 306      00FF0000 
 307 0258 81290000 	  _ADR ANDD   
 308 025c 69390000 	  _ADR UDOT 
 309 0260 E5380000 	  _DOTQP 7 , " BFAR: "
 309      07204246 
 309      41523A20 
 310 026c 69390000 	  _ADR UDOT 
 311 0270 7D380000 	  _ADR CR 
 312 0274 39030000 	  _ADR reset_mcu  
 313              	
ARM GAS  forth.s 			page 18


 314              	/************************************
 315              	    usage fault
 316              	    irq -10 
 317              	************************************/
 318              	  .type usagefault_handler, %function
 319              	  .p2align 2
 320              	  .global usagefault_handler 
 321              	usagefault_handler:
 322 0278 4FF00000 	  _MOV32 r0,RAM_END 
 322      C2F20200 
 323 0280 8546     	  mov sp,r0 
 324 0282 DFF86CC4 	  ldr IP,=usagefault_hl
 325 0286 02F0C1B9 	  b INEXT 
 326              	usagefault_hl:
 327 028a 09420000 	  _ADR PRESE
 328 028e 7D380000 	  _ADR CR  
 329 0292 E5380000 	  _DOTQP  23 , "usage exception, UFSR: "
 329      17757361 
 329      67652065 
 329      78636570 
 329      74696F6E 
 330 02b0 D3270000 	  _DOLIT 16 
 330      10000000 
 331 02b8 2D2E0000 	  _ADR BASE 
 332 02bc 45280000 	  _ADR STORE   
 333 02c0 5D260000 	  _ADR CFSR
 334 02c4 D3270000 	  _DOLIT 16 
 334      10000000 
 335 02cc D9290000 	  _ADR RSHIFT 
 336 02d0 69390000 	  _ADR UDOT 
 337 02d4 7D380000 	  _ADR CR 
 338 02d8 39030000 	  _ADR reset_mcu  
 339              	
 340              	
 341              	/*********************************
 342              		system milliseconds counter
 343              	*********************************/	
 344              	  .type systick_handler, %function
 345              	  .p2align 2 
 346              	  .global systick_handler
 347              	systick_handler:
 348 02dc 4FF00003 	  _MOV32 r3,UPP
 348      C2F20003 
 349 02e4 9868     	  ldr r0,[r3,#TICKS]  
 350 02e6 00F10100 	  add r0,#1
 351 02ea 9860     	  str r0,[r3,#TICKS]
 352 02ec D868     	  ldr r0,[r3,#CD_TIMER]
 353 02ee 10B1     	  cbz r0, systick_exit
 354 02f0 A0F10100 	  sub r0,#1
 355 02f4 D860     	  str r0,[r3,#CD_TIMER]
 356              	systick_exit:
 357 02f6 7047     	  bx lr
 358              	
 359              	user_reboot:
 360 02f8 00B500F0 	   _CALL forth_init 
 360      4FF85DF8 
 360      04EB
ARM GAS  forth.s 			page 19


 361 0302 DFF8F0C3 	  ldr IP,=ur
 362 0306 02F081B9 	  b INEXT  
 363              	ur:
 364 030a 09420000 	  _ADR PRESE
 365 030e 7D380000 	  _ADR CR   
 366 0312 D3270000 		_DOLIT user_reboot_msg
 366      28030000 
 367 031a 912D0000 		_ADR COUNT 
 368 031e 49380000 	  _ADR TYPEE 
 369 0322 39030000 	  _ADR reset_mcu 
 370              	
 371 0326 00BF     		.p2align 2 
 372              	user_reboot_msg:
 373 0328 0C       		.byte 12
 374 0329 75736572 		.ascii "user reboot!"
 374      20726562 
 374      6F6F7421 
 375 0335 0000BF   		.p2align 2 
 376              	
 377              	reset_mcu:
 378 0338 4FF48050 	  _MOV32 r0,UART 
 378      C4F20100 
 379 0340 0168     	1: ldr r1,[r0,#USART_SR]
 380 0342 11F0400F 	  tst r1,#(1<<6)
 381 0346 FBD0     	  beq 1b
 382 0348 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 382      CEF20000 
 383 0350 C168     		ldr r1,[r0,#SCB_AIRCR]
 384 0352 41F00401 		orr r1,#(1<<2)
 385 0356 C0F2FA51 		movt r1,#SCB_VECTKEY
 386 035a C160     		str r1,[r0,#SCB_AIRCR]
 387 035c FEE7     		b . 
 388              	
 389              	/**************************************
 390              	  reset_handler execute at MCU reset
 391              	***************************************/
 392              	  .type  reset_handler, %function
 393 035e 00BF     	  .p2align 2 
 394              	  .global reset_handler
 395              	reset_handler:
 396 0360 4FF00000 		_MOV32 r0,RAM_END
 396      C2F20200 
 397 0368 8546     		mov sp,r0 
 398              	// enable memory, bus and usage exceptions  
 399 036a 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 399      CEF20000 
 400 0372 81EA0101 	  eor r1,r1 
 401 0376 C0F20701 	  movt r1,#7 
 402 037a 4162     	  str r1,[r0,#SCB_SHCSR]
 403 037c FFF7FEFF 		bl	remap 
 404 0380 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 405 0384 01F0E6FC 	  bl  fpu_init 
 406 0388 00F0D1F9 		bl  ser_init
 407 038c FFF7FEFF 	 	bl	tv_init
 408 0390 FFF7FEFF 	  bl  kbd_init
 409 0394 01F0D6FA 	  bl  flash_spi_init   
 410 0398 04F01ABE 		b COLD 
ARM GAS  forth.s 			page 20


 411              	
 412              	
 413              	
 414              		.type forth_init, %function 
 415              	  .p2align 2 
 416              	forth_init:
 417 039c 4FF00004 		_MOV32 UP,UPP 
 417      C2F20004 
 418 03a4 4FF68067 		_MOV32 DSP,SPP
 418      C2F20107 
 419 03ac 4FF47F48 		_MOV32 RSP,RPP
 419      C2F20108 
 420 03b4 DFF840A3 	  ldr INX,=NEST
 421 03b8 4AF0010A 	  orr INX,#1 
 422 03bc 86EA0606 		EOR TOS,TOS  
 423 03c0 7047     		_RET 
 424              	
 425              	
 426              	
 427              	  .type init_devices, %function
 428 03c2 00BF     	  .p2align 2 
 429              	init_devices:
 430              	/* init clock to HSE 96 Mhz */
 431              	/* set 3 wait states in FLASH_ACR_LATENCY */
 432 03c4 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 432      C4F20200 
 433 03cc 4FF00301 	  mov r1,#3 
 434 03d0 0160     	  str r1,[r0,#FLASH_ACR]
 435              	/* configure clock for HSE, 25 Mhz crystal */
 436              	/* enable HSE in RCC_CR */
 437 03d2 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 437      C4F20200 
 438 03da 0168     	  ldr r1,[r0,#RCC_CR]
 439 03dc 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 440 03e0 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 441              	/* wait HSERDY loop */
 442              	wait_hserdy:
 443 03e2 0168     	  ldr r1,[r0,#RCC_CR]
 444 03e4 11F4003F 	  tst r1,#(1<<17)
 445 03e8 FBD0     	  beq wait_hserdy
 446              	
 447              	/************************************************* 
 448              	   configure PLL  and source 
 449              	   SYSCLOCK=96 Mhz
 450              	   select HSE as  PLL source clock
 451              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 452              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 453              	****************************************************/
 454              	  /* set RCC_PLLCFGR */
 455 03ea 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 455      C4F20200 
 456 03f2 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 456      C0F24041 
 457 03fa 4160     	  str r1,[r0,#RCC_PLLCFGR]
 458              	  /* enable PLL */
 459 03fc 0168     	  ldr r1,[r0,#RCC_CR]
 460 03fe 41F08071 	  orr r1, #(1<<24)
ARM GAS  forth.s 			page 21


 461 0402 0160     	  str r1,[r0,#RCC_CR]
 462              	/* wait for PLLRDY */
 463              	wait_pllrdy:
 464 0404 0168     	  ldr r1,[r0,#RCC_CR]
 465 0406 11F0007F 	  tst r1,#(1<<25)
 466 040a FBD1     	  bne wait_pllrdy 
 467              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 468 040c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 468      C0F21901 
 469 0414 8160     	  str r1,[r0,#RCC_CFGR]
 470              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 471 0416 8168     	  ldr r1,[r0,#RCC_CFGR]
 472 0418 41F00201 	  orr r1,#2
 473 041c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 474              	/* wait for SWS==2 */
 475              	wait_sws:
 476 041e 8168     	  ldr r1,[r0,#RCC_CFGR]
 477 0420 11F0080F 	  tst r1,#(2<<2)
 478 0424 FBD0     	  beq wait_sws
 479              	/* now sysclock is 96 Mhz */
 480              	
 481              	
 482              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 483 0426 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 484 042a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 485 042c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 486 0430 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 487              	/* configure GPIOC:13 as output for user LED */
 488 0432 4FF40060 	  _MOV32 r0,LED_GPIO 
 488      C4F20200 
 489 043a 4FF00D01 	  mov r1,#LED_PIN
 490 043e 4FF01102 	  mov r2,#OUTPUT_OD 
 491 0442 00B500F0 	  _CALL gpio_config 
 491      8FF85DF8 
 491      04EB
 492 044c 4FF00102 	  mov r2,#1
 493 0450 00B500F0 	  _CALL gpio_out 
 493      DEF85DF8 
 493      04EB
 494              	/* enable compensation CELL for fast I/O */
 495 045a 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 495      C4F20101 
 496 0462 4FF00100 		mov r0,#1 
 497 0466 0862     		str r0,[R1,#SYSCFG_CMPCR]
 498              	/* wait for ready bit */ 
 499 0468 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 500 046a 10F4807F 	    tst r0,#(1<<8)
 501 046e FBD0     		beq 1b 	
 502              	
 503              	
 504              	/* configure systicks for 1msec ticks */
 505              	// set priority to 15 (lowest)
 506 0470 4FF0FF30 	  mov r0,#STCK_IRQ
 507 0474 4FF00F01 	  mov r1,#15 
 508 0478 00B500F0 	  _CALL nvic_set_priority
 508      2FF85DF8 
 508      04EB
ARM GAS  forth.s 			page 22


 509 0482 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 509      CEF20000 
 510 048a 47F2FF61 	  _MOV32 r1,95999 
 510      C0F20101 
 511 0492 4160     	  str r1,[r0,#STK_LOAD]
 512 0494 4FF00701 	  mov r1,#7
 513 0498 0160     	  str r1,[r0,STK_CTL]
 514 049a 7047     	  _RET  
 515              	
 516              	
 517              	/* copy system variables to RAM */ 
 518              		.type remap, %function 
 519              	    .global remap 
 520              	remap:
 521              	// copy system to RAM 	
 522 049c 4FF00000 		_MOV32 r0,RAM_ADR 
 522      C2F20000 
 523 04a4 9549     		ldr r1,=UZERO 
 524 04a6 4FF0B002 		mov r2,#ULAST-UZERO 
 525 04aa 02F10302 		add r2,r2,#3
 526 04ae 22F00302 		and r2,r2,#~3 
 527 04b2 51F8043B 	1:	ldr r3,[r1],#4 
 528 04b6 40F8043B 		str r3,[r0],#4 
 529 04ba 043A     		subs R2,#4 
 530 04bc F9D1     		bne 1b
 531              	// zero end of RAM 
 532 04be 4FF00002 		_MOV32 r2,RAM_END 
 532      C2F20202 
 533 04c6 83EA0303 		eor r3,r3,r3 
 534 04ca 40F8043B 	2:  str r3,[r0],#4
 535 04ce 9042     		cmp r0,r2 
 536 04d0 FBDB     		blt 2b 
 537 04d2 4FF00004 		_MOV32 UP,RAM_ADR  
 537      C2F20004 
 538 04da 7047     		_RET 
 539              	
 540              	// set irq priority 
 541              	// 0 highest 
 542              	// 15 lowest
 543              	// input: r0 IRQn  
 544              	//        r1  ipr 
 545              	nvic_set_priority:
 546 04dc 08B4     	    push {r3}
 547 04de 0028     	    cmp r0,#0 
 548 04e0 08D4     	    bmi negative_irq 
 549 04e2 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 549      CEF20003 
 550 04ea 4FEA0111 	    lsl r1,#4 
 551 04ee 1954     	    strb r1,[r3,r0]
 552 04f0 08BC     	    pop {r3}
 553 04f2 7047     	    _RET 
 554              	negative_irq:
 555 04f4 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 555      CEF20003 
 556 04fc 00F00F00 	    and r0,#0XF 
 557 0500 A0F10400 	    sub r0,#4 
 558 0504 4FEA0111 	    lsl r1,#4 
ARM GAS  forth.s 			page 23


 559 0508 1954     	    strb r1,[r3,r0]
 560 050a 08BC     	    pop {r3}
 561 050c 7047     	    _RET 
 562              	
 563              	
 564              	// enable interrupt in nvic 
 565              	// input: r0 = IRQn 
 566              	nvic_enable_irq: 
 567 050e 0EB4     	    push {r1,r2,r3}
 568 0510 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 568      CEF20003 
 569 0518 0146     	    mov r1,r0 
 570 051a 4FEA5111 	    lsr r1,#5  
 571 051e 4FEA8101 	    lsl r1,#2  // ISERn  
 572 0522 00F01F00 	    and r0,#31 // bit#
 573 0526 4FF00102 	    mov r2,#1 
 574 052a 02FA00F2 	    lsl r2,r0
 575 052e 72B6     	    cpsid I
 576 0530 5A50     	    str r2,[r3,r1]
 577 0532 62B6     	    cpsie I 
 578 0534 0EBC     	    pop {r1,r2,r3}
 579 0536 7047     	    _RET 
 580              	
 581              	// disable interrupt in nvic
 582              	// input: r0 = IRQn
 583              	nvic_disable_irq:
 584 0538 0EB4     	    push {r1,r2,r3}
 585 053a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 585      CEF20003 
 586 0542 0146     	    mov r1,r0 
 587 0544 4FEA5111 	    lsr r1,#5  
 588 0548 4FEA8101 	    lsl r1,#2  // ISERn
 589 054c 00F01F00 	    and r0,#31 // bit#
 590 0550 4FF00102 	    mov r2,#1 
 591 0554 02FA00F2 	    lsl r2,r0
 592 0558 5A50     	    str r2,[r3,r1]
 593 055a BFF34F8F 	    dsb 
 594 055e BFF36F8F 	    isb 
 595 0562 0EBC     	    pop {r1,r2,r3}
 596 0564 7047     	    _RET 
 597              	
 598              	/**********************************
 599              	  gpio_config 
 600              	  Configure gpio mode 
 601              	  input:
 602              	    r0   GPIOx 
 603              	    r1   pin 
 604              	    r2   mode 
 605              	  output:
 606              	    none 
 607              	  use:
 608              	    r3,r5,r11  
 609              	**********************************/
 610              	gpio_config:
 611 0566 2DE92808 	    push {r3,r5,r11}
 612              	//  clear registers field 
 613 056a 4FF00105 	    mov r5,#1
ARM GAS  forth.s 			page 24


 614 056e 05FA01F5 	    lsl r5,r1
 615 0572 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 616 0576 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 617 0578 03EA0503 	    and r3,r5 
 618 057c 4360     	    str r3,[r0,#GPIO_OTYPER]
 619 057e 4FF00305 	    mov r5,#3 
 620 0582 4FF0020B 	    mov r11,#2 
 621 0586 01FB0BFB 	    mul r11,r1 
 622 058a 05FA0BF5 	    lsl r5,r11 
 623 058e 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 624 0592 0368     	    ldr r3,[r0,#GPIO_MODER]
 625 0594 03EA0503 	    and r3,r5 
 626 0598 0360     	    str r3,[r0,#GPIO_MODER]
 627 059a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 628 059c 03EA0503 	    and r3,r5 
 629 05a0 C360     	    str r3,[r0,#GPIO_PUPDR]
 630              	// set mode register, r2 low nibble  
 631 05a2 02F00305 	    and r5,r2,#3    
 632 05a6 05FA0BF5 	    lsl r5,r11 // mode 
 633 05aa 0368     	    ldr r3,[r0,#GPIO_MODER]
 634 05ac 43EA0503 	    orr r3,r5 
 635 05b0 0360     	    str r3,[r0,#GPIO_MODER]
 636 05b2 032A     	    cmp r2,#3
 637 05b4 13D0     	    beq 9f // analog input 
 638 05b6 12F00305 	    ands r5,r2,#3 
 639 05ba 08D0     	    beq input_pull 
 640              	output_type:
 641 05bc 4FEA1212 	    lsr r2,#4 
 642 05c0 02FA01F2 	    lsl r2,r1 // 1 bit field 
 643 05c4 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 644 05c6 43EA0203 	    orr r3,r2 
 645 05ca 4360     	    str r3,[r0,#GPIO_OTYPER]
 646 05cc 07E0     	    b 9f 
 647              	input_pull:
 648 05ce C368     	    ldr r3,[r0,#GPIO_PUPDR]
 649 05d0 4FEA1212 	    lsr r2,#4 
 650 05d4 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 651 05d8 43EA0203 	    orr r3,r2 
 652 05dc C360     	    str r3,[r0,#GPIO_PUPDR]
 653 05de BDE82808 	9:  pop {r3,r5,r11}
 654 05e2 7047     	    _RET 
 655              	
 656              	// configure gpio speed 
 657              	// input:
 658              	//    r0   GPIO_BASE_ADR 
 659              	//    r1   pin 
 660              	//    r2   speed
 661              	// use:
 662              	//  r3,r5,r11 
 663              	gpio_speed:
 664 05e4 2DE92808 	    push {r3,r5,r11}
 665 05e8 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 666 05ea 4FF00305 	    mov r5,#3
 667 05ee 4FF0020B 	    mov r11,#2 
 668 05f2 01FB0BFB 	    mul r11,r1 
 669 05f6 05FA0BF5 	    lsl r5,r11
 670 05fa 6FEA0505 	    mvn r5,r5 
ARM GAS  forth.s 			page 25


 671 05fe 03EA0503 	    and r3,r5   
 672 0602 02FA0BF2 	    lsl r2,r11  
 673 0606 43EA0203 	    orr r3,r2 
 674 060a 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 675 060c BDE82808 	    pop {r3,r5,r11}
 676 0610 7047     	    _RET
 677              	
 678              	/**************************** 
 679              	  gpio_out port,pin,0|1
 680              	  input:
 681              	    r0   gpio_base_adr 
 682              	    r1   pin 
 683              	    r2   data 0|1 
 684              	**************************/
 685              	gpio_out:
 686 0612 08B4     	    push {r3}
 687 0614 4FF00103 	    mov r3,#1 
 688 0618 03FA01F3 	    lsl r3,r1 
 689 061c 0AB9     	    cbnz r2, 1f 
 690 061e 4FEA0343 	    lsl r3,#16 
 691 0622 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 692 0624 08BC     	    pop {r3}
 693 0626 7047     	    _RET 
 694              	
 695              	/******************************************************
 696              	*  COLD start moves the following to USER variables.
 697              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 698              	******************************************************/
 699              		.p2align 2
 700              	UZERO:
 701 0628 00000000 		.word 0  			/*Reserved */
 702 062c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 703 0630 00000000 		.word 0      /* TICKS */
 704 0634 00000000 	    .word 0     /* CD_TIMER */
 705 0638 E04E0000 		.word HI_BOTH  /*'BOOT */
 706 063c 2C160000 		.word PS2_QKEY /* query for character */
 707 0640 F40E0000 	  .word TV_EMIT  /* char output device */
 708 0644 0A000000 	  .word BASEE 	/*BASE */
 709 0648 00000000 		.word 0			/*tmp */
 710 064c 00000000 		.word 0			/*SPAN */
 711 0650 00000000 		.word 0			/*>IN */
 712 0654 00000000 		.word 0			/*#TIB */
 713 0658 80FE0120 		.word TIBB	/*TIBU */
 714 065c E0400000 		.word INTER	/*'EVAL */
 715 0660 00000000 		.word 0			/*HLD */
 716 0664 C84F0000 		.word _LASTN	/*CONTEXT */
 717 0668 30500000 		.word CTOP  	/* FCP end of system dictionnary */
 718 066c 084A0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 719 0670 C84F0000 		.word _LASTN	/*LAST word in dictionary */
 720 0674 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 720      00000000 
 720      00000000 
 720      00000000 
 721 0684 00000000 		.word 0  /* RX_HEAD */
 722 0688 00000000 		.word 0  /* RX_TAIL */ 
 723 068c 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 724 0690 00000000 		.word 0  /* VID_STATE, video state */  
ARM GAS  forth.s 			page 26


 725 0694 00000000 	    .word 0  /* VID_FIELD, field */
 726 0698 80800120 		.word VID_BUFF /* video_buffer address */ 
 727 069c 00000000 	    .word 0 /* kbd struct */
 728 06a0 00000000 		.space KBD_QUEUE_SIZE,0  
 728      00000000 
 728      00000000 
 728      00000000 
 729 06b0 00000000 		.word 0  /* kbd queue head */
 730 06b4 00000000 		.word 0 /* kbd queue tail */ 
 731 06b8 00000000 	    .word 0 /* tv cursor row */
 732 06bc 00000000 	    .word 0 /* tv cursor column */ 
 733 06c0 00000000 	    .word 0 /* tv back color */
 734 06c4 07000000 	    .word 7 /* tv font color */
 735 06c8 00000000 	    .word 0 /* FPSW */
 736 06cc 00000000 	    .word 0 /* FBASE */ 
 737 06d0 00000000 	    .word 0,0 
 737      00000000 
 738              	ULAST:
 739              	
 740              	// used by _HEADER macro 
 741              	// to link names field
 742              	// in dictionary  
 743 06d8 12000000 	    .equ LINK, 0 
 743      C2000000 
 743      0C010000 
 743      4E010000 
 743      8A010000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
ARM GAS  forth.s 			page 27


  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0700 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0708 1868     		ldr r0,[r3,#USART_SR]
  38 070a 5968     		ldr r1,[r3,#USART_DR]
  39 070c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0710 0CD0     		beq 2f // no char received 
  41 0712 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0716 3FF4EFAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 071a 04F14C00 		add r0,UP,#RX_QUEUE
  44 071e 226E     		ldr r2,[UP,#RX_TAIL]
  45 0720 8154     		strb r1,[r0,r2]
  46 0722 02F10102 		add r2,#1 
  47 0726 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 072a 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 072c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 072e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0736 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0738 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 073c 01EA0201 	  and r1,r1,r2
  62 0740 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0744 41EA0201 	  orr r1,r1,r2 
  64 0748 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 074a 4FF4EE61 	  mov r1,#0x77<<4 
  67 074e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0750 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0758 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 075c 8160     	  str r1,[r0,#USART_BRR]
  73 075e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0762 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0764 4FF02500 	  mov r0,#USART1_IRQ 
  77 0768 4FF00701 	  mov r1,#7
  78 076c 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0776 4FF02500 	  mov r0,#USART1_IRQ 
  81 077a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FE5DF8 
ARM GAS  forth.s 			page 28


  81      04EB
  82 0784 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0786 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0794 47F8046D 		_PUSH
  92 0798 206E     		ldr T0,[UP,#RX_TAIL] 
  93 079a E16D     		ldr T1,[UP,#RX_HEAD]
  94 079c 90EA0106 		eors TOS,T0,T1 
  95 07a0 0CD0     		beq 1f
  96 07a2 04F14C00 		add T0,UP,#RX_QUEUE 
  97 07a6 0844     		add T0,T1 
  98 07a8 0678     		ldrb TOS,[T0]
  99 07aa 01F10101 		add T1,#1 
 100 07ae 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 07b2 E165     		str T1,[UP,#RX_HEAD]
 102 07b4 47F8046D 		_PUSH 
 103 07b8 4FF0FF36 		mov TOS,#-1
 104 07bc 01F026BF 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 07c0 8A070000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 07d0 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 07d8 2868     	1:  ldr T0,[WP,#USART_SR]
 113 07da 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 07de FBD0     		beq 1b 
 115 07e0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 07e2 57F8046B 		_POP
 117 07e6 01F011BF 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 07ea C4070000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 07f4 47F8046D 	        _PUSH 
 126 07f8 4FF00006 	        mov TOS,#0
 127 07fc 01F006BF 	        _NEXT 
 128              	
ARM GAS  forth.s 			page 29


 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0800 EE070000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 080c 47F8046D 	        _PUSH 
 135 0810 4FF00106 	        mov TOS,#1
 136 0814 01F0FABE 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0818 04080000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0824 3046     	        mov T0,TOS
 144 0826 57F8046B 	        _POP 
 145 082a 50B1     	        cbz T0, 4f 
 146              	// serial console 
 147 082c 5048     	        ldr T0,=SER_QKEY 
 148 082e 6061     	        str T0,[UP,#STDIN]
 149 0830 5048     	        ldr T0,=SER_EMIT
 150 0832 A061     	        str T0,[UP,#STDOUT]
 151 0834 504D45F0 	        _CALL_COLWORD READY 
 151      010504F0 
 151      B7BB
 152 083e 01F0E5BE 	        _NEXT 
 153              	4: // local console 
 154 0842 4E48     	        ldr T0,=PS2_QKEY
 155 0844 6061     	        str T0,[UP,#STDIN]
 156 0846 4E48     	        ldr T0,=TV_EMIT
 157 0848 A061     	        str T0,[UP,#STDOUT]
 158 084a 4B4D45F0 	        _CALL_COLWORD READY 
 158      010504F0 
 158      ACBB
 159 0854 01F0DABE 	        _NEXT 
 160              	
 161              	/*******************************
 162              	    ANSI-PARAM ( n -- )
 163              	    convert and transmit 
 164              	    ANSI ESC[  parameter 
 165              	*******************************/
 166 0858 1C080000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 166      0A414E53 
 166      492D5041 
 166      52414D00 
 167 0868 504700BF 	      _NEST 
 168 086c D3270000 	      _DOLIT -1 // c 
 168      FFFFFFFF 
 169 0874 5D2A0000 	1:    _ADR ONEP  // c+1
 170 0878 C9280000 	      _ADR TOR   
 171 087c D3270000 	      _DOLIT 10 
 171      0A000000 
 172 0884 5D310000 	      _ADR SLMOD // r q  
ARM GAS  forth.s 			page 30


 173 0888 112B0000 	      _ADR QDUP  // r q q | r 0  
 174 088c 13280000 	      _QBRAN 2f  // r 0 
 174      A0080000 
 175 0894 85280000 	      _ADR RFROM // r q c 
 176 0898 27280000 	      _BRAN 1b
 176      74080000 
 177 08a0 D3270000 	2:    _DOLIT '0'  
 177      30000000 
 178 08a8 012A0000 	      _ADR PLUS 
 179 08ac DD260000 	      _ADR EMIT 
 180 08b0 85280000 	      _ADR RFROM 
 181 08b4 112B0000 	      _ADR QDUP 
 182 08b8 13280000 	      _QBRAN 3f
 182      D0080000 
 183 08c0 6D2A0000 	      _ADR ONEM 
 184 08c4 C9280000 	      _ADR TOR 
 185 08c8 27280000 	      _BRAN 2b 
 185      A0080000 
 186              	3:    
 187 08d0 13260000 	      _UNNEST 
 188              	
 189              	/******************************
 190              	    ESC[ 
 191              	    send ANSI escape sequence
 192              	*******************************/
 193 08d4 5C080000 	      _HEADER ANSI_ESC,4,"ESC["
 193      04455343 
 193      5B0000BF 
 194 08e0 504700BF 	      _NEST 
 195 08e4 D3270000 	      _DOLIT 27 
 195      1B000000 
 196 08ec DD260000 	      _ADR EMIT 
 197 08f0 D3270000 	      _DOLIT '['
 197      5B000000 
 198 08f8 DD260000 	      _ADR EMIT 
 199 08fc 13260000 	      _UNNEST 
 200              	
 201              	/*************************************
 202              	    SER-AT ( line col -- )
 203              	    move cursor on serial console
 204              	*************************************/
 205 0900 D8080000 	      _HEADER SER_AT,6,"SER-AT"
 205      06534552 
 205      2D415400 
 206 090c 504700BF 	      _NEST
 207 0910 E1080000 	      _ADR ANSI_ESC
 208 0914 4D290000 	      _ADR SWAP 
 209 0918 69080000 	      _ADR ANSI_PARAM 
 210 091c D3270000 	      _DOLIT ';'
 210      3B000000 
 211 0924 DD260000 	      _ADR EMIT
 212 0928 69080000 	      _ADR ANSI_PARAM
 213 092c D3270000 	      _DOLIT 'H'
 213      48000000 
 214 0934 DD260000 	      _ADR EMIT 
 215 0938 13260000 	      _UNNEST 
 216              	
ARM GAS  forth.s 			page 31


 217              	/****************************
 218              	    SER-CLS ( -- )
 219              	    serial clear screeen 
 220              	****************************/
 221 093c 04090000 	    _HEADER SER_CLS,7,"SER-CLS"
 221      07534552 
 221      2D434C53 
 222 0948 504700BF 	    _NEST
 223 094c D3270000 	    _DOLIT 1 
 223      01000000 
 224 0954 3D290000 	    _ADR DUPP 
 225 0958 0D090000 	    _ADR SER_AT  
 226 095c E1080000 	    _ADR ANSI_ESC
 227 0960 D3270000 	    _DOLIT 'J'
 227      4A000000 
 228 0968 DD260000 	    _ADR EMIT 
 229 096c 13260000 	    _UNNEST 
 230 0970 94070000 	
 230      D0070000 
 230      AC4F0000 
 230      2C160000 
 230      F40E0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 32


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
ARM GAS  forth.s 			page 33


  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0984 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 098c 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 098e 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0996 41EA0201 	  orr r1,r2
  82 099a 0160     	  str r1,[r0,#GPIO_MODER]
  83 099c 81EA0101 	  eor r1,r1 
  84 09a0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 09a2 4FF00101 	  mov r1,#1 // pin 1 
  88 09a6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 09aa 00B5FFF7 	  _CALL gpio_config 
  89      DBFD5DF8 
  89      04EB
  90 09b4 4FF00101 	  mov r1,#1 
  91 09b8 4FF00202 	  mov r2,#2
  92 09bc 00B5FFF7 	  _CALL gpio_speed 
  92      11FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 09c6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 09c8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 09cc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 09ce 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 09d6 4FF00200 	  mov r0,#2 
 100 09da 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 09dc 41EA0001 	  orr r1,r0 
 102 09e0 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 09e2 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 09ea 41F2D470 	  mov r0,#HPER
 106 09ee D062     	  str r0,[r2,#TIM_ARR]
 107 09f0 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 09f4 D063     	  str r0,[r2,#TIM_CCR3]
 109 09f6 4FF4E170 	  mov r0,#HPULSE 
 110 09fa 1064     	  str r0,[r2,#TIM_CCR4]  
 111 09fc 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0a00 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0a02 4FF48850 	  mov r0,#(1<<12)+(1<<8)
ARM GAS  forth.s 			page 34


 114 0a06 1062     	  str r0,[r2,#TIM_CCER]
 115 0a08 4FF00100 	  mov r0,#1 
 116 0a0c D060     	  str r0,[r2,#TIM_DIER]
 117 0a0e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0a10 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0a14 4FF00201 	  mov r1,#2
 121 0a18 00B5FFF7 	  _CALL nvic_set_priority
 121      5FFD5DF8 
 121      04EB
 122 0a22 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0a26 00B5FFF7 	  _CALL nvic_enable_irq
 123      71FD5DF8 
 123      04EB
 124 0a30 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0a32 00BF     	  _GBL_FUNC tv_out_isr
 132 0a34 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0a3c 81EA0101 	  eor T1,T1
 134 0a40 0161     	  str T1,[T0,#TIM_SR]
 135 0a42 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0a44 01F10101 	  add T1,#1 
 137 0a48 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0a4a A26E     	  ldr T2,[UP,#VID_STATE]
 140 0a4c 002A     	  cmp T2,#ST_VSYNC 
 141 0a4e 07D0     	  beq state_vsync
 142 0a50 012A     	  cmp T2,#ST_PREVID 
 143 0a52 2FD0     	  beq state_pre_video 
 144 0a54 022A     	  cmp T2,#ST_VIDEO 
 145 0a56 36D0     	  beq state_video_out 
 146 0a58 032A     	  cmp T2,#ST_POSTVID 
 147 0a5a 63D0     	  beq state_post_video
 148 0a5c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0a60 0129     	  cmp T1,#1
 152 0a62 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0a64 4FF0DB01 	  mov T1,#SERRATION
 155 0a68 0164     	  str T1,[T0,#TIM_CCR4]
 156 0a6a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0a6e C162     	  str T1,[T0,#TIM_ARR]
 158 0a70 6BE0     	  b tv_isr_exit 
 159 0a72 0729     	1: cmp T1,#7
 160 0a74 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0a76 40F62821 	  mov T1,#VSYNC_PULSE
 163 0a7a 0164     	  str T1,[T0,#TIM_CCR4]
 164 0a7c 65E0     	  b tv_isr_exit
 165 0a7e 0D29     	2: cmp T1,#13
ARM GAS  forth.s 			page 35


 166 0a80 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0a82 4FF0DB01 	   mov T1,#SERRATION 
 169 0a86 0164     	   str T1,[T0,#TIM_CCR4]
 170 0a88 5FE0     	   b tv_isr_exit   
 171 0a8a 1229     	3: cmp T1,#18
 172 0a8c 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0a8e E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0a90 0029     	   cmp T1,#ODD_FIELD  
 176 0a92 5AD0     	   beq tv_isr_exit 
 177 0a94 01E0     	   b sync_end 
 178 0a96 1329     	4: cmp T1,#19 
 179 0a98 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0a9a 4FF00901 	   mov T1,#9
 182 0a9e 6166     	   str T1,[UP,#VID_CNTR]
 183 0aa0 4FF4E171 	   mov T1,#HPULSE 
 184 0aa4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0aa6 41F2D471 	   mov T1,#HPER 
 186 0aaa C162     	   str T1,[T0,#TIM_ARR] 
 187 0aac 4FF00101 	   mov T1,#ST_PREVID 
 188 0ab0 A166     	   str T1,[UP,#VID_STATE]
 189 0ab2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ab4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ab6 48D4     	   bmi tv_isr_exit 
 194 0ab8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0abc A166     	   str T1,[UP,#VID_STATE]
 196 0abe 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0ac2 C160     	   str T1,[T0,#TIM_DIER]
 198 0ac4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0ac6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ac8 06D9     	   bls 1f 
 205 0aca 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ace A166     	   str T1,[UP,#VID_STATE]
 207 0ad0 4FF00101 	   mov T1,#1 
 208 0ad4 C160     	   str T1,[T0,#TIM_DIER]
 209 0ad6 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ad8 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ada A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ade 4FF0A003 	   mov T3,#160
 214 0ae2 03FB01F1 	   mul T1,T3 
 215 0ae6 0844     	   add T0,T1  
 216 0ae8 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0af0 10F8012B 	2: ldrb T2,[T0],#1 
ARM GAS  forth.s 			page 36


 222 0af4 4FEA0222 	   lsl T2,#8 
 223 0af8 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0afa AFF30080 	   nop.w 
 225 0afe AFF30080 	   nop.w
 226 0b02 AFF30080 	   nop.w 
 227 0b06 AFF30080 	   nop.w 
 228 0b0a 4FEA0212 	   lsl T2,#4  
 229 0b0e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0b10 AFF30080 	   nop.w
 231 0b14 AFF30080 	   nop.w  
 232 0b18 013B     	   subs T3,#1
 233 0b1a E9D1     	   bne 2b  
 234 0b1c 4FF47022 	   mov T2,#(15<<16) 
 235 0b20 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0b22 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0b24 4FF48372 	   mov T2,#262
 239 0b28 9142     	   cmp T1,T2
 240 0b2a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0b2c E16E     	   ldr T1,[UP,VID_FIELD]
 243 0b2e 11B9     	   cbnz T1, frame_end 
 244 0b30 40F6E931 	   mov T1,#SYNC_LINE
 245 0b34 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0b36 4FF00001 	   mov T1,#ST_VSYNC 
 248 0b3a A166     	   str T1,[UP,#VID_STATE]
 249 0b3c 81EA0101 	   eor T1,T1 
 250 0b40 6166     	   str T1,[UP,#VID_CNTR]
 251 0b42 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0b44 6FEA0101 	   mvn T1,T1  
 253 0b48 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0b4a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0b4c 40090000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0b5c 47F8046D 		_PUSH 
 266 0b60 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0b64 01F052BD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0b68 500B0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0b78 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 37


 273 0b7c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0b80 01F044BD 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0b84 6C0B0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0b90 47F8046D 	  _PUSH 
 280 0b94 04F19406 	  ADD TOS,UP,#COL 
 281 0b98 01F038BD 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0b9c 880B0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0ba4 47F8046D 	  _PUSH 
 287 0ba8 04F19006 	  ADD TOS,UP,#ROW 
 288 0bac 01F02EBD 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0bb0 A00B0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0bbc 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0bc0 00FB06F6 	  mul TOS,T0 
 295 0bc4 01F022BD 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0bc8 B40B0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0bd4 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0bd8 00FB06F6 	  mul TOS,T0 
 302 0bdc 01F016BD 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0be0 CC0B0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0bec 47F8046D 	  _PUSH 
 308 0bf0 DFF88C65 	  ldr TOS,=font_6x8 
 309 0bf4 01F00ABD 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0bf8 E40B0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0c04 47F8046D 	  _PUSH 
 315 0c08 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0c0a 01F0FFBC 	  _NEXT 
 317              	
 318              	
ARM GAS  forth.s 			page 38


 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0c0e FC0B0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0c18 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0c1a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0c1e 02FB00F0 	    mul T0,T2 
 330 0c22 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0c26 1044     	    add T0,T2 
 332 0c28 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0c2a 0344     	    add T3,T0 // T3 -> byte address 
 334 0c2c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0c2e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0c32 11F0010F 	    tst T1,#1 
 337 0c36 01D0     	    beq 1f 
 338 0c38 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0c3c DFF84405 	1:  ldr T0,=plot_op 
 340 0c40 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0c44 05EA0205 	    and WP,T2 // mask out nibble 
 343 0c48 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0c4c 11F0010F 	    tst T1,#1 
 345 0c50 01D1     	    bne 1f 
 346 0c52 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0c56 45EA0005 	1:  orr WP,T0  
 348 0c5a 1D70     	    strb WP,[T3]
 349 0c5c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0c5e 05EA0205 	    and WP,T2 
 352 0c62 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0c66 11F0010F 	    tst T1,#1
 354 0c6a 01D1     	    bne 1f 
 355 0c6c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0c70 45EA0005 	1:	orr WP,T0 
 357 0c74 1D70     	    strb WP,[T3]
 358 0c76 0DE0     	    b 9f 
 359              	op_invert:
 360 0c78 85EA0205 	    eor WP,T2 
 361 0c7c 1D70     	    strb WP,[T3]
 362 0c7e 09E0     	    b 9f 
 363              	op_xor:
 364 0c80 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0c84 11F0010F 	    tst T1,#1 
 366 0c88 01D1     	    bne 1f 
 367 0c8a 4FEA0010 	    lsl T0,#4 
 368 0c8e 85EA0005 	1:  eor WP,T0 
 369 0c92 1D70     	    strb WP,[T3]
 370 0c94 57F8046B 	9:  _POP 
 371 0c98 01F0B8BC 	    _NEXT 
 372              	
 373 0c9c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
ARM GAS  forth.s 			page 39


 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ca0 120C0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0cac 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0cae 0028     	    cmp T0,#0
 381 0cb0 FCD1     	    bne 1b
 382 0cb2 01F0ABBC 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0cb6 A40C0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0cc0 80EA0000 	    eor T0,T0 
 388 0cc4 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0cc8 40EA0100 	    orr T0,T1 
 390 0ccc 4FEA0111 	    lsl T1,#4 
 391 0cd0 40EA0100 	    orr T0,T1 
 392 0cd4 4FEA0021 	    lsl T1,T0,#8 
 393 0cd8 40EA0100 	    orr T0,T1 
 394 0cdc 4FEA0041 	    lsl T1,T0,#16
 395 0ce0 40EA0100 	    orr T0,T1 
 396 0ce4 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0ce8 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0cea 5050     	1:	str T0,[T2,T1]
 399 0cec 0439     	    subs T1,#4
 400 0cee FCD1     	    bne 1b
 401 0cf0 1060     	    str T0,[T2]
 402 0cf2 80EA0000 	    eor T0,T0 
 403 0cf6 C4F89000 	    str T0,[UP,#ROW]
 404 0cfa C4F89400 	    str T0,[UP,#COL]
 405 0cfe 01F085BC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0d02 BA0C0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0d10 504700BF 	  _NEST
 412 0d14 D3270000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0d1c 3D290000 	  _ADR DUPP  
 414 0d20 C9280000 	  _ADR TOR 
 415 0d24 212A0000 	  _ADR STAR
 416 0d28 050C0000 	  _ADR VIDBUFF
 417 0d2c 012A0000 	  _ADR PLUS
 418 0d30 85280000 	  _ADR RFROM   
 419 0d34 D3270000 	  _DOLIT 0 
 419      00000000 
 420 0d3c 91330000 	  _ADR FILL 
 421 0d40 13260000 	  _UNNEST 
ARM GAS  forth.s 			page 40


 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0d44 060D0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0d54 504700BF 	    _NEST 
 429 0d58 050C0000 	    _ADR VIDBUFF 
 430 0d5c 3D290000 	    _ADR DUPP 
 431 0d60 D3270000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0d68 3D290000 	    _ADR DUPP 
 433 0d6c C9280000 	    _ADR TOR 
 434 0d70 012A0000 	    _ADR PLUS 
 435 0d74 4D290000 	    _ADR SWAP 
 436 0d78 D3270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0d80 85280000 	    _ADR RFROM  
 438 0d84 112A0000 	    _ADR SUBB 
 439 0d88 49330000 	    _ADR MOVE
 440 0d8c D3270000 	    _DOLIT 24 
 440      18000000 
 441 0d94 110D0000 	    _ADR CLRLINE 
 442 0d98 13260000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0d9c 480D0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0dac 504700BF 	    _NEST 
 450 0db0 050C0000 	    _ADR VIDBUFF
 451 0db4 3D290000 	    _ADR DUPP 
 452 0db8 D3270000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0dc0 012A0000 	    _ADR PLUS 
 454 0dc4 D3270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0dcc D3270000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0dd4 112A0000 	    _ADR SUBB  
 457 0dd8 49330000 	    _ADR MOVE
 458 0ddc D3270000 	    _DOLIT 0 
 458      00000000 
 459 0de4 110D0000 	    _ADR CLRLINE
 460 0de8 13260000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
ARM GAS  forth.s 			page 41


 466              	*****************************/
 467 0dec A00D0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0df8 E34D     	    ldr WP,=SCROLLUP 
 469 0dfa 45F00105 	    orr WP,#1
 470 0dfe 80EA0000 	    eor T0,T0 
 471 0e02 C4F89400 	    str T0,[UP,#COL]
 472 0e06 D4F89000 	    ldr T0,[UP,#ROW]
 473 0e0a 1828     	    cmp T0,#24 
 474 0e0c A2D0     	    beq SCROLLUP  
 475 0e0e 00F10100 	    add T0,#1 
 476 0e12 C4F89000 	    str T0,[UP,#ROW]
 477 0e16 01F0F9BB 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0e1a F00D0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0e24 D4F89400 	  ldr T0,[UP,#COL]
 484 0e28 00F10100 	  add T0,#1
 485 0e2c 3528     	  cmp T0,#53
 486 0e2e E3D5     	  bpl TV_CRLF  
 487 0e30 C4F89400 	  str T0,[UP,#COL]
 488 0e34 01F0EABB 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0e38 1E0E0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0e44 D4F89400 	    ldr T0,[UP,#COL]
 497 0e48 28B1     	    cbz T0,1f 
 498 0e4a A0F10100 	    sub T0,#1 
 499 0e4e C4F89400 	    str T0,[UP,#COL]
 500 0e52 01F0DBBB 	    _NEXT 
 501 0e56 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0e5a 38B1     	    cbz T0,9f
 503 0e5c A0F10100 	    sub T0,#1
 504 0e60 C4F89000 	    str T0,[UP,#ROW]
 505 0e64 4FF03400 	    mov T0,#52 
 506 0e68 C4F89400 	    str T0,[UP,#COL]
 507 0e6c 01F0CEBB 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0e70 4FF08000 	    mov T0,#128 
 513 0e74 06EA0006 	    and TOS,T0 
 514 0e78 4FEAD616 	    lsr TOS,#7
 515 0e7c 01F0C6BB 	    _NEXT 
 516              	
ARM GAS  forth.s 			page 42


 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0e80 3868     	  ldr T0,[DSP]
 520 0e82 00F10100 	  add T0,#1 
 521 0e86 3860     	  str T0,[DSP]
 522 0e88 01F0C0BB 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0e8c 4FEA4606 	    lsl TOS,#1
 527 0e90 01F0BCBB 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0e94 504700BF 	    _NEST 
 536 0e98 D3270000 	    _DOLIT 5 
 536      05000000 
 537 0ea0 C9280000 	    _ADR TOR 
 538 0ea4 C9280000 	1:  _ADR TOR 
 539 0ea8 752B0000 	    _ADR DDUP 
 540 0eac B5280000 	    _ADR RAT
 541 0eb0 710E0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0eb4 190C0000 	    _ADR PLOT 
 543 0eb8 810E0000 	    _ADR INCR_X 
 544 0ebc 85280000 	    _ADR RFROM 
 545 0ec0 8D0E0000 	    _ADR NEXT_PIXEL
 546 0ec4 F5270000 	    _DONXT 1b
 546      A40E0000 
 547 0ecc 612B0000 	    _ADR TDROP 
 548 0ed0 13260000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0ed4 A6F12006 	   sub TOS,#32
 553 0ed8 4FF00800 	   mov T0,#8 
 554 0edc 00FB06F6 	   mul TOS,T0 
 555 0ee0 A748     	   ldr T0,=font_6x8
 556 0ee2 0644     	   add TOS,T0 
 557 0ee4 01F092BB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0ee8 3C0E0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0ef4 504700BF 	    _NEST
 565 0ef8 3D290000 	    _ADR DUPP 
 566 0efc D3270000 	    _DOLIT 32 
 566      20000000 
 567 0f04 C12C0000 	    _ADR ULESS
 568 0f08 13280000 	    _QBRAN 1f
ARM GAS  forth.s 			page 43


 568      180F0000 
 569 0f10 27280000 	    _BRAN CTRL_KEY
 569      7C0F0000 
 570 0f18 D50E0000 	1:  _ADR CHAR_FONT 
 571 0f1c 910B0000 	    _ADR CURSOR_COL 
 572 0f20 59280000 	    _ADR AT
 573 0f24 D50B0000 	    _ADR COLX  // x coord 
 574 0f28 A50B0000 	    _ADR CURSOR_ROW 
 575 0f2c 59280000 	    _ADR AT    
 576 0f30 BD0B0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0f34 252B0000 	    _ADR ROT  // TEST 
 578 0f38 D3270000 	    _DOLIT 7   
 578      07000000 
 579 0f40 C9280000 	    _ADR TOR  
 580 0f44 C9280000 	1:  _ADR TOR  // { x y }
 581 0f48 752B0000 	    _ADR DDUP  // { x y x y }
 582 0f4c B5280000 	    _ADR RAT 
 583 0f50 79280000 	    _ADR CAT   // { x y x y r }
 584 0f54 950E0000 	    _ADR CHAR_ROW 
 585 0f58 5D2A0000 	    _ADR ONEP // {x y' }
 586 0f5c 85280000 	    _ADR RFROM 
 587 0f60 5D2A0000 	    _ADR ONEP // {x y' c-adr' }
 588 0f64 F5270000 	    _DONXT 1b
 588      440F0000 
 589 0f6c 612B0000 	    _ADR TDROP  
 590 0f70 250E0000 	    _ADR RIGHT
 591 0f74 65100000 	9:  _ADR SHOW_CURSOR 
 592 0f78 13260000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0f7c ED100000 	    _ADR HIDE_CURSOR
 595 0f80 3D290000 	    _ADR DUPP 
 596 0f84 D3270000 	    _DOLIT BKSPP  
 596      08000000 
 597 0f8c 892C0000 	    _ADR EQUAL 
 598 0f90 13280000 	    _QBRAN 1f 
 598      A80F0000 
 599 0f98 45100000 	    _ADR BACK_SPACE 
 600 0f9c 2D290000 	8:  _ADR DROP 
 601 0fa0 27280000 	    _BRAN 9b 
 601      740F0000 
 602 0fa8 3D290000 	1:  _ADR DUPP 
 603 0fac D3270000 	    _DOLIT CRR 
 603      0D000000 
 604 0fb4 892C0000 	    _ADR EQUAL 
 605 0fb8 13280000 	    _QBRAN 1f 
 605      CC0F0000 
 606 0fc0 ED0F0000 	    _ADR CAR_RET
 607 0fc4 27280000 	    _BRAN 8b
 607      9C0F0000 
 608 0fcc D3270000 	1:  _DOLIT LF 
 608      0A000000 
 609 0fd4 892C0000 	    _ADR EQUAL 
 610 0fd8 13280000 	    _QBRAN 9b 
 610      740F0000 
 611 0fe0 05100000 	    _ADR LN_FEED
 612 0fe4 27280000 	    _BRAN 9b  
 612      740F0000 
ARM GAS  forth.s 			page 44


 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0fec 504700BF 	   _NEST
 620 0ff0 D3270000 	   _DOLIT 0 
 620      00000000 
 621 0ff8 910B0000 	   _ADR CURSOR_COL 
 622 0ffc 45280000 	   _ADR STORE 
 623 1000 13260000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1004 504700BF 	    _NEST 
 631 1008 A50B0000 	    _ADR CURSOR_ROW 
 632 100c 59280000 	    _ADR AT 
 633 1010 3D290000 	    _ADR DUPP 
 634 1014 D3270000 	    _DOLIT 24 
 634      18000000 
 635 101c A9290000 	    _ADR XORR 
 636 1020 13280000 	    _QBRAN 1f
 636      38100000 
 637 1028 5D2A0000 	    _ADR ONEP 
 638 102c A50B0000 	    _ADR CURSOR_ROW 
 639 1030 45280000 	    _ADR STORE 
 640 1034 13260000 	    _UNNEST    
 641 1038 2D290000 	1:  _ADR DROP 
 642 103c 550D0000 	    _ADR SCROLLUP 
 643 1040 13260000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1044 504700BF 	  _NEST 
 652 1048 450E0000 	  _ADR LEFT 
 653 104c 65100000 	  _ADR SHOW_CURSOR
 654 1050 13260000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1054 EC0E0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1064 504700BF 	    _NEST 
 663 1068 D3270000 	    _DOLIT 0xFF
ARM GAS  forth.s 			page 45


 663      FF000000 
 664 1070 A50B0000 	0:  _ADR CURSOR_ROW
 665 1074 59280000 	    _ADR AT  
 666 1078 5D2A0000 	    _ADR ONEP 
 667 107c BD0B0000 	    _ADR ROWY 
 668 1080 D3270000 	    _DOLIT BPR
 668      A0000000 
 669 1088 212A0000 	    _ADR STAR
 670 108c D3270000 	    _DOLIT BPR  
 670      A0000000 
 671 1094 112A0000 	    _ADR SUBB 
 672 1098 910B0000 	    _ADR CURSOR_COL
 673 109c 59280000 	    _ADR AT 
 674 10a0 D50B0000 	    _ADR COLX 
 675 10a4 012B0000 	    _ADR TWOSL  
 676 10a8 012A0000 	    _ADR PLUS
 677 10ac 050C0000 	    _ADR VIDBUFF
 678 10b0 012A0000 	    _ADR PLUS
 679 10b4 D3270000 	    _DOLIT 2
 679      02000000 
 680 10bc C9280000 	    _ADR TOR  
 681 10c0 752B0000 	1:  _ADR DDUP 
 682 10c4 65280000 	    _ADR CSTOR 
 683 10c8 5D2A0000 	    _ADR ONEP 
 684 10cc F5270000 	    _DONXT 1b
 684      C0100000 
 685 10d4 4D2B0000 	2:  _ADR DDROP // drop 3 elements 
 686 10d8 13260000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 10dc 58100000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 10ec 504700BF 	    _NEST 
 694 10f0 5D0B0000 	    _ADR BACKCOLOR 
 695 10f4 59280000 	    _ADR AT 
 696 10f8 3D290000 	    _ADR DUPP  
 697 10fc D3270000 	    _DOLIT 4 
 697      04000000 
 698 1104 F1290000 	    _ADR LSHIFT 
 699 1108 95290000 	    _ADR ORR 
 700 110c 27280000 	    _BRAN 0b
 700      70100000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1114 E0100000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1120 352E     	    cmp TOS,#53
 706 1122 01D4     	    bmi 1f 
 707 1124 4FF03406 	    mov TOS,#52
 708 1128 C4F89460 	1:  str TOS,[UP,#COL]
ARM GAS  forth.s 			page 46


 709 112c 57F8046B 	    _POP
 710 1130 192E     	    cmp TOS,#25
 711 1132 01D4     	    bmi 1f 
 712 1134 4FF01806 	    mov TOS,#24 
 713 1138 C4F89060 	1:  str TOS,[UP,#ROW]
 714 113c 57F8046B 	    _POP 
 715 1140 01F064BA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1144 18110000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1150 504700BF 	    _NEST 
 721 1154 C1320000 	    _ADR PAD 
 722 1158 3D290000 	    _ADR DUPP 
 723 115c 5D2A0000 	    _ADR ONEP 
 724 1160 D3270000 	    _DOLIT 53
 724      35000000 
 725 1168 CD3F0000 	    _ADR ACCEP
 726 116c 4D290000 	    _ADR SWAP 
 727 1170 2D290000 	    _ADR DROP 
 728 1174 61290000 	    _ADR OVER 
 729 1178 65280000 	    _ADR CSTOR  
 730 117c 13260000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
ARM GAS  forth.s 			page 47


 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
ARM GAS  forth.s 			page 48


 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
ARM GAS  forth.s 			page 49


 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
ARM GAS  forth.s 			page 50


 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
ARM GAS  forth.s 			page 51


  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
ARM GAS  forth.s 			page 52


  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
ARM GAS  forth.s 			page 53


 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 118c 1C61     	   .byte 0x1c,'a' 
   9 118e 3262     	   .byte 0x32,'b'
  10 1190 2163     	   .byte 0x21,'c'
  11 1192 2364     	   .byte 0x23,'d'
  12 1194 2465     	   .byte 0x24,'e'
  13 1196 2B66     	   .byte 0x2b,'f'
  14 1198 3467     	   .byte 0x34,'g'
  15 119a 3368     	   .byte 0x33,'h'
  16 119c 4369     	   .byte 0x43,'i'
  17 119e 3B6A     	   .byte 0x3B,'j'
  18 11a0 426B     	   .byte 0x42,'k'
  19 11a2 4B6C     	   .byte 0x4b,'l'
  20 11a4 3A6D     	   .byte 0x3a,'m'
  21 11a6 316E     	   .byte 0x31,'n'
  22 11a8 446F     	   .byte 0x44,'o'
  23 11aa 4D70     	   .byte 0x4d,'p'
  24 11ac 1571     	   .byte 0x15,'q'
  25 11ae 2D72     	   .byte 0x2d,'r'
  26 11b0 1B73     	   .byte 0x1b,'s'
  27 11b2 2C74     	   .byte 0x2c,'t'
  28 11b4 3C75     	   .byte 0x3c,'u'
  29 11b6 2A76     	   .byte 0x2a,'v'
  30 11b8 1D77     	   .byte 0x1d,'w'
  31 11ba 2278     	   .byte 0x22,'x'
  32 11bc 3579     	   .byte 0x35,'y'
ARM GAS  forth.s 			page 54


  33 11be 1A7A     	   .byte 0x1a,'z'
  34 11c0 4530     	   .byte 0x45,'0'
  35 11c2 1631     	   .byte 0x16,'1'
  36 11c4 1E32     	   .byte 0x1e,'2'
  37 11c6 2633     	   .byte 0x26,'3'
  38 11c8 2534     	   .byte 0x25,'4'
  39 11ca 2E35     	   .byte 0x2e,'5'
  40 11cc 3636     	   .byte 0x36,'6'
  41 11ce 3D37     	   .byte 0x3d,'7'
  42 11d0 3E38     	   .byte 0x3e,'8'
  43 11d2 4639     	   .byte 0x46,'9'
  44 11d4 0E60     	   .byte 0x0e,'`'
  45 11d6 4E2D     	   .byte 0x4e,'-'
  46 11d8 553D     	   .byte 0x55,'='
  47 11da 5D5C     	   .byte 0x5d,'\\'
  48 11dc 545B     	   .byte 0x54,'['
  49 11de 5B5D     	   .byte 0x5b,']'
  50 11e0 4C3B     	   .byte 0x4c,';'
  51 11e2 5227     	   .byte 0x52,'\''
  52 11e4 412C     	   .byte 0x41,','
  53 11e6 492E     	   .byte 0x49,'.'
  54 11e8 7C2A     	   .byte 0x7c,'*'
  55 11ea 792B     	   .byte 0x79,'+'
  56 11ec 2920     	   .byte 0x29,' '
  57 11ee 5A0D     	   .byte SC_ENTER,CRR 
  58 11f0 6608     	   .byte SC_BKSP,BKSPP 
  59 11f2 0D09     	   .byte SC_TAB,9
  60 11f4 761B     	   .byte SC_ESC,27
  61 11f6 119E     	   .byte SC_LALT,VK_LALT 
  62 11f8 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 11fa 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 11fc 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 11fe 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1200 5800     	   .byte SC_CAPS,0
  67 1202 0580     	   .byte SC_F1,VK_F1
  68 1204 0681     	   .byte SC_F2,VK_F2
  69 1206 0482     	   .byte SC_F3,VK_F3
  70 1208 0C83     	   .byte SC_F4,VK_F4
  71 120a 0384     	   .byte SC_F5,VK_F5
  72 120c 0B85     	   .byte SC_F6,VK_F6
  73 120e 8386     	   .byte SC_F7,VK_F7
  74 1210 0A87     	   .byte SC_F8,VK_F8
  75 1212 0188     	   .byte SC_F9,VK_F9
  76 1214 098A     	   .byte SC_F10,VK_F10
  77 1216 788B     	   .byte SC_F11,VK_F11
  78 1218 078C     	   .byte SC_F12,VK_F12
  79 121a 7030     	   .byte SC_KP0,'0'
  80 121c 6931     	   .byte SC_KP1,'1'
  81 121e 7232     	   .byte SC_KP2,'2'
  82 1220 7A33     	   .byte SC_KP3,'3'
  83 1222 6B34     	   .byte SC_KP4,'4'
  84 1224 7335     	   .byte SC_KP5,'5'
  85 1226 7436     	   .byte SC_KP6,'6'
  86 1228 6C37     	   .byte SC_KP7,'7'
  87 122a 7538     	   .byte SC_KP8,'8'
  88 122c 7D39     	   .byte SC_KP9,'9'
  89 122e 7C2A     	   .byte SC_KPMUL,'*'
ARM GAS  forth.s 			page 55


  90 1230 4A2F     	   .byte SC_KPDIV,'/'
  91 1232 792B     	   .byte SC_KPPLUS,'+'
  92 1234 7B2D     	   .byte SC_KPMINUS,'-'
  93 1236 712E     	   .byte SC_KPDOT,'.'
  94 1238 5A0D     	   .byte SC_KPENTER,'\r'
  95 123a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 123c AAAA     	   .byte BAT_OK,BAT_OK  
  97 123e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1240 6141     	   .byte 'a','A'
 102 1242 6242     	   .byte 'b','B'
 103 1244 6343     	   .byte 'c','C'
 104 1246 6444     	   .byte 'd','D'
 105 1248 6545     	   .byte 'e','E'
 106 124a 6646     	   .byte 'f','F'
 107 124c 6747     	   .byte 'g','G'
 108 124e 6848     	   .byte 'h','H'
 109 1250 6949     	   .byte 'i','I'
 110 1252 6A4A     	   .byte 'j','J'
 111 1254 6B4B     	   .byte 'k','K'
 112 1256 6C4C     	   .byte 'l','L'
 113 1258 6D4D     	   .byte 'm','M'
 114 125a 6E4E     	   .byte 'n','N'
 115 125c 6F4F     	   .byte 'o','O'
 116 125e 7050     	   .byte 'p','P'
 117 1260 7151     	   .byte 'q','Q'
 118 1262 7252     	   .byte 'r','R'
 119 1264 7353     	   .byte 's','S'
 120 1266 7454     	   .byte 't','T'
 121 1268 7555     	   .byte 'u','U'
 122 126a 7656     	   .byte 'v','V'
 123 126c 7757     	   .byte 'w','W'
 124 126e 7858     	   .byte 'x','X'
 125 1270 7959     	   .byte 'y','Y'
 126 1272 7A5A     	   .byte 'z','Z'
 127 1274 3121     	   .byte '1','!'
 128 1276 3240     	   .byte '2','@'
 129 1278 3323     	   .byte '3','#'
 130 127a 3424     	   .byte '4','$'
 131 127c 3525     	   .byte '5','%'
 132 127e 365E     	   .byte '6','^'
 133 1280 3726     	   .byte '7','&'
 134 1282 382A     	   .byte '8','*'
 135 1284 3928     	   .byte '9','('
 136 1286 3029     	   .byte '0',')'
 137 1288 2D5F     	   .byte '-','_'
 138 128a 3D2B     	   .byte '=','+'
 139 128c 607E     	   .byte '`','~'
 140 128e 2722     	   .byte '\'','"'
 141 1290 2C3C     	   .byte ',','<'
 142 1292 2E3E     	   .byte '.','>'
 143 1294 2F3F     	   .byte '/','?'
 144 1296 5C7C     	   .byte '\\','|'
 145 1298 3B3A     	   .byte ';',':'
 146 129a 5B7B     	   .byte '[','{'
ARM GAS  forth.s 			page 56


 147 129c 5D7D     	   .byte ']','}'
 148 129e 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 12a0 315C     	   .byte '1','\\'
 153 12a2 3240     	   .byte '2','@'
 154 12a4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 12a6 363F     	   .byte '6','?'
 158 12a8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 12aa 397B     	   .byte '9','{'
 161 12ac 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 12ae 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 12b0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 12b2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 12b4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 12b6 11A3     	    .byte SC_RALT,VK_RALT
 172 12b8 2F97     	    .byte SC_APPS,VK_APPS
 173 12ba 758D     	    .byte SC_UP,VK_UP
 174 12bc 728E     	    .byte SC_DOWN,VK_DOWN
 175 12be 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 12c0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 12c2 7095     	    .byte SC_INSERT,VK_INSERT
 178 12c4 6C91     	    .byte SC_HOME,VK_HOME
 179 12c6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 12c8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 12ca 717F     	    .byte SC_DEL,VK_DELETE
 182 12cc 6992     	    .byte SC_END,VK_END
 183 12ce 4A2F     	    .byte SC_KPDIV,'/'
 184 12d0 5A0D     	    .byte SC_KPENTER,'\r'
 185 12d2 1200     	    .byte 0x12,0
 186 12d4 7C00     	    .byte 0x7c,0
 187 12d6 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 12d8 6303     	   .byte 'c', VK_CTRL_C 
 193 12da 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 12dc 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 12de 27A2     	   .byte SC_RGUI,VK_RGUI
 196 12e0 11A3     	   .byte SC_RALT,VK_RALT
 197 12e2 2F97     	   .byte SC_APPS,VK_APPS
 198 12e4 7095     	   .byte SC_INSERT,VK_INSERT
 199 12e6 6C91     	   .byte SC_HOME,VK_HOME
 200 12e8 7D93     	   .byte SC_PGUP,VK_PGUP
 201 12ea 717F     	   .byte SC_DEL,VK_DELETE
 202 12ec 6992     	   .byte SC_END,VK_END
 203 12ee 7A94     	   .byte SC_PGDN,VK_PGDN
ARM GAS  forth.s 			page 57


 204 12f0 758D     	   .byte SC_UP,VK_UP
 205 12f2 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 12f4 728E     	   .byte SC_DOWN,VK_DOWN
 207 12f6 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 12f8 4A2F     	   .byte SC_KPDIV,'/'
 209 12fa 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 12fc 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 12fe 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1300 119E     	   .byte SC_LALT,VK_LALT
 213 1302 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1304 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1306 761B     	   .byte SC_ESC,VK_ESC
 216 1308 779A     	   .byte SC_NUM,VK_NLOCK
 217 130a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 130c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
ARM GAS  forth.s 			page 58


  78 130e 00BF     	    _GBL_FUNC kbd_isr 
  79 1310 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1318 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 131c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 131e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1326 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 132a 10F0020F 	    tst r0,#KBD_TX 
  85 132e 40F08480 	    bne send_bit  
  86 1332 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1334 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1338 01F10102 	    add r2,r1,#1
  89 133c 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 1340 0029     	    cmp r1,#0
  91 1342 15D0     	    beq start_bit 
  92 1344 0929     	    cmp r1,#9 
  93 1346 25D0     	    beq parity_bit 
  94 1348 0A29     	    cmp r1,#10 
  95 134a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 134c 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1350 4FEA5202 	    lsr r2,#1 
  99 1354 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1358 07D0     	    beq 1f 
 101 135a 42F08002 	    orr r2,#(1<<7)
 102 135e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 1362 00F10100 	    add r0,#1 
 104 1366 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 136a 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 136e 63E0     	    b 9f         
 107              	start_bit:
 108 1370 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1374 60D1     	    bne 9f // not a start bit 
 110 1376 80EA0000 	    eor r0,r0 
 111 137a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 137e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1382 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1386 6FF00101 	    mvn r1,#1
 115 138a 00EA0100 	    and r0,r1 // clear error flag 
 116 138e 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1392 51E0     	    b 9f 
 118              	parity_bit:
 119 1394 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1398 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 139c 4CD0     	    beq 9f  
 122 139e 01F10101 	    add r1,#1 
 123 13a2 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 13a6 47E0     	    b 9f      
 125              	stop_bit:
 126 13a8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 13ac 40D0     	    beq 8f // error stop bit expected 
 128 13ae 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 13b2 11F0010F 	    tst r1,#1 
 130 13b6 3BD0     	    beq 8f // error parity
 131 13b8 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 13bc 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 59


 133 13c0 E028     	    cmp r0,#XT_KEY
 134 13c2 04D1     	    bne 1f
 135 13c4 41F04001 	    orr r1,#KBD_F_XT
 136 13c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 13cc 30E0     	    b 8f  
 138 13ce 11F0800F 	1:  tst r1,#KBD_F_REL
 139 13d2 14D0     	    beq store_code
 140 13d4 5828     	    cmp r0,#SC_CAPS
 141 13d6 04D1     	    bne 1f
 142 13d8 81F00401 	    eor r1,#KBD_F_CAPS
 143 13dc 41F00101 	    orr r1,#KBD_F_CTGL 
 144 13e0 06E0     	    b 2f 
 145 13e2 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 13ec 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 13f0 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 13f4 01EA0201 	    and r1,r2
 149 13f8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 13fc 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 13fe F028     	    cmp r0,#KEY_REL
 154 1400 04D1     	    bne 1f
 155              	// set release flags 
 156 1402 41F08001 	    orr r1,#KBD_F_REL 
 157 1406 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 140a 11E0     	    b 8f     
 159 140c 0146     	1:  mov r1,r0 
 160 140e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1418 0AD1     	    bne 8f // was async key 
 162 141a D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 141e 04F17802 	    add r2,UP,#KBD_QUEUE
 164 1422 1154     	    strb r1,[r2,r0]
 165 1424 00F10100 	    add r0,#1
 166 1428 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 142c 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 1430 80EA0000 	8:  eor r0,r0 
 169 1434 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1438 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 143a 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 143e 01F10100 	    add r0,r1,#1
 182 1442 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 1446 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 144a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
ARM GAS  forth.s 			page 60


 186 144e 0829     	1:  cmp r1,#8 
 187 1450 15D0     	    beq send_parity 
 188 1452 0929     	    cmp r1,#9 
 189 1454 1CD0     	    beq send_stop
 190 1456 0A29     	    cmp r1,#10
 191 1458 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 145a 10F0010F 	    tst r0,#1
 194 145e 4FEA5000 	    lsr r0,#1
 195 1462 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1466 02D1     	    bne 1f 
 197 1468 4FEA0242 	    lsl r2,#16
 198 146c 05E0     	    b 2f  
 199 146e 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1472 00F10100 	    add r0,#1 
 201 1476 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 147a 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 147c 1CE0     	    b 9f 
 204              	send_parity:
 205 147e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1482 10F0010F 	    tst r0,#1
 207 1486 01D0     	    beq 1f 
 208 1488 4FEA0242 	    lsl r2,#16
 209 148c 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 148e 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1490 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1492 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1496 1960     	    str r1,[r3,#GPIO_MODER]
 217 1498 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 149a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 149e 6FF00201 	    mvn r1,#KBD_TX 
 221 14a2 00EA0100 	    and r0,r1 
 222 14a6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 14a8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 14ac 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 14b0 80EA0000 	    eor r0,r0 
 226 14b4 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 14b8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 14ba 02B4     	    push {r1}
 238 14bc DFF86414 	    ldr r1,=async_keys
 239 14c0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 14ca 02BC     	    pop {r1}
ARM GAS  forth.s 			page 61


 241 14cc 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 14ce 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 14d8 FF28     	    cmp r0,#255
 256 14da 01D1     	    bne set_async_key 
 257 14dc 0020     	    movs r0,#0 
 258 14de 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 14e0 06B4     	    push {r1,r2}
 262 14e2 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 14e6 DFF84014 	    ldr r1,=async_jump 
 264 14ea D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 14ee 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 14f2 04E0     	    b set_reset
 268              	ctrl_key:
 269 14f4 4FF01000 	    mov r0,#KBD_F_CTRL
 270 14f8 01E0     	    b set_reset 
 271              	alt_key:
 272 14fa 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 14fe 12F0800F 	    tst r2,#KBD_F_REL 
 275 1502 04D0     	    beq 1f 
 276 1504 6FEA0000 	    mvn r0,r0
 277 1508 02EA0002 	    and r2,r0
 278 150c 01E0     	    b 2f
 279 150e 42EA0002 	1:  orr r2,r0 
 280 1512 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1516 5FF0FF30 	    movs r0,#-1
 282 151a 06BC     	9:  pop {r1,r2}
 283 151c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 151e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1520 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1522 1401     	    .byte SC_LCTRL,1  // left control 
 290 1524 1401     	    .byte SC_RCTRL,1  // right control 
 291 1526 1102     	    .byte SC_LALT,2  // left alt 
 292 1528 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 152a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
ARM GAS  forth.s 			page 62


 296 152c 00       	    .byte 0 // shift  key 
 297 152d 03       	    .byte (ctrl_key-shift_key)/2
 298 152e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 152f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1530 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1538 1846     	    mov r0,r3 
 311 153a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 153e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1542 00B5FFF7 	    _CALL gpio_config
 313      0FF85DF8 
 313      04EB
 314 154c 1846     	    mov r0,r3 
 315 154e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1552 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1556 00B5FFF7 	    _CALL gpio_config
 317      05F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1560 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1568 4FF40050 	    mov r0,#(2<<12)
 321 156c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 156e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1576 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 157a 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 157c D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 157e 80EA0000 	   eor r0,r0 
 328 1582 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1586 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 158a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 158e 4FF00101 	   mov r1,#1 
 333 1592 00B5FEF7 	   _CALL nvic_set_priority
 333      A2FF5DF8 
 333      04EB
 334 159c 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 15a0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      B4FF5DF8 
 335      04EB
 336 15aa 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 15ac 48110000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
ARM GAS  forth.s 			page 63


 340      2D415359 
 340      4E4300BF 
 341 15bc 47F8046D 	    _PUSH 
 342 15c0 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 15c4 06F0FC06 	    and TOS,#0xFC  
 344 15c8 01F020B8 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 15cc 0EB4     	    push {T1,T2,T3}
 352 15ce 80EA0000 	    eor T0,T0  
 353 15d2 04F17803 	    add T3,UP,#KBD_QUEUE
 354 15d6 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 15da D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 15de 9142     	    cmp T1,T2 
 357 15e0 06D0     	    beq 2f  
 358 15e2 585C     	    ldrb T0,[T3,T1]
 359 15e4 01F10101 	    add T1,#1 
 360 15e8 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 15ec C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 15f0 0EBC     	2:  pop {T1,T2,T3}
 363 15f2 7047     	    _RET 
 364              	
 365              	wait_code:
 366 15f4 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 15fe 0000     	    movs T0,T0
 368 1600 F8D0     	    beq wait_code  
 369 1602 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1604 04B4     	    push {T2}
 380 1606 11F8012B 	1:  ldrb T2,[T1],#1
 381 160a 22B1     	    cbz T2,2f 
 382 160c 8242     	    cmp T2,T0
 383 160e 02D0     	    beq 2f 
 384 1610 01F10101 	    add T1,#1 
 385 1614 F7E7     	    b 1b 
 386 1616 0878     	2:  ldrb T0,[T1]
 387 1618 0000     	    movs T0,T0 // set/reset zero flag 
 388 161a 04BC     	9:  pop {T2}
 389 161c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
ARM GAS  forth.s 			page 64


 394              	   don't wait for it.
 395              	*********************************/
 396 161e B0150000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 162c 47F8046D 	    _PUSH 
 398 1630 86EA0606 	    eor TOS,TOS 
 399 1634 BD49     	    ldr T1,=sc_ascii // translation table
 400 1636 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 163a 4FF04002 	    mov T2,#KBD_F_XT 
 402 163e 1042     	    tst T0,T2
 403 1640 00D0     	    beq 1f
 404 1642 BB49     	    ldr T1,=extended // extended code translation
 405 1644 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 164e 98B1     	    cbz T0,inkey_exit
 407 1650 E128     	    cmp T0,#XT2_KEY // pause 
 408 1652 13D0     	    beq pause_key
 409 1654 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 165e 0646     	    mov TOS,T0
 411 1660 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 166a 032E     	    cmp TOS,#VK_CTRL_C 
 413 166c 3EF444AE 	    beq user_reboot 
 414 1670 47F8046D 	    _PUSH 
 415 1674 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1678 00F0C8BF 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 167c 4FF00701 	    mov T1,#7 
 420 1680 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 168a 0139     	    subs T1,#1
 422 168c F8D1     	    bne 1b 
 423 168e 00F0BDBF 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1692 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1696 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 169a 06D1     	    bne shift_down 
 431 169c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 16a0 06D1     	    bne altchar_down 
 433 16a2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 16a6 06D1     	    bne ctrl_down 
 435 16a8 0DE0     	    b 9f 
 436              	shift_down:
 437 16aa 3046     	    mov T0,TOS 
 438 16ac A149     	    ldr T1,=shifted 
 439 16ae 04E0     	    b 8f 
ARM GAS  forth.s 			page 65


 440              	altchar_down:
 441 16b0 3046     	    mov T0,TOS 
 442 16b2 A149     	    ldr T1,=altchar
 443 16b4 01E0     	    b 8f
 444              	ctrl_down:
 445 16b6 3046     	    mov T0,TOS 
 446 16b8 A049     	    ldr T1,=controls 
 447 16ba 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 16c4 0646     	    mov TOS,T0
 449 16c6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 16d0 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 16d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 16d6 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 16da 0BD0     	    beq 9f 
 456 16dc 412E     	    cmp TOS,#'A'
 457 16de 09D4     	    bmi 9f 
 458 16e0 5B2E     	    cmp TOS,#'Z'+1 
 459 16e2 03D4     	    bmi 3f 
 460 16e4 612E     	    cmp TOS,#'a'
 461 16e6 05D4     	    bmi 9f 
 462 16e8 7B2E     	    cmp TOS,#'z'+1
 463 16ea 03D5     	    bpl 9f 
 464 16ec 4FF02000 	3:  mov T0,#(1<<5)
 465 16f0 86EA0006 	    eor TOS,T0 
 466 16f4 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 16f6 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 16f8 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 16fa 0128     	    cmp r0,ST_PREVID 
 484 16fc FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 16fe 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1702 00B5FEF7 	    _CALL nvic_disable_irq
 487      18FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 170c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
ARM GAS  forth.s 			page 66


 490 1714 1846     	    mov r0,r3 
 491 1716 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 171a 4FF01102 	    mov r2,#OUTPUT_OD
 493 171e 00B5FEF7 	    _CALL gpio_config 
 493      21FF5DF8 
 493      04EB
 494 1728 1846     	    mov r0,r3 
 495 172a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 172e 82EA0202 	    eor r2,r2 
 497 1732 00B5FEF7 	    _CALL gpio_out 
 497      6DFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 173c 4FF4E150 	    mov r0,#150*48
 500 1740 0138     	1:  subs r0,#1 
 501 1742 FDD1     	    bne 1b
 502 1744 01BC     	    pop {r0}
 503 1746 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 174a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 174e 40F00200 	    orr r0,#KBD_TX 
 506 1752 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 1756 80EA0000 	    eor r0,r0 
 508 175a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 175e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1762 1846     	    mov r0,r3 
 513 1764 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1768 4FF01102 	    mov r2,#OUTPUT_OD 
 515 176c 00B5FEF7 	    _CALL gpio_config 
 515      FAFE5DF8 
 515      04EB
 516 1776 1846     	    mov r0,r3 
 517 1778 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 177c 82EA0202 	    eor r2,r2 
 519 1780 00B5FEF7 	    _CALL gpio_out
 519      46FF5DF8 
 519      04EB
 520              	// release clock line 
 521 178a 1846     	    mov r0,r3 
 522 178c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1790 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1794 00B5FEF7 	    _CALL gpio_config
 524      E6FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 179e 4FF00A00 	    mov r0,#10
 528 17a2 E060     	    str r0,[UP,#CD_TIMER]
 529 17a4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 17a6 20B1     	    cbz r0, 4f 
 531 17a8 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 17ac 10F0020F 	    tst r0,#KBD_TX
 533 17b0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 17b2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 17b6 00B5FEF7 	    _CALL nvic_enable_irq
ARM GAS  forth.s 			page 67


 536      A9FE5DF8 
 536      04EB
 537 17c0 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 17c4 20F00201 	    bic r1,r0,#KBD_TX
 539 17c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 17cc 00F00200 	    and r0,#KBD_TX
 541 17d0 48B1     	    cbz r0, 5f
 542 17d2 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 17d4 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 17d8 1960     	    str r1,[r3,#GPIO_MODER]
 545 17da 80EA0000 	    eor r0,r0 
 546 17de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 17e2 6FEA0000 	    mvn r0,r0   
 548 17e6 0EBC     	5:  pop {r1,r2,r3}
 549 17e8 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 17ea 80EA0000 	    eor T0,T0 
 555 17ee C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 17f2 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 17f6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 17fa 6FF00301 	    mvn T1,#3
 559 17fe 00EA0100 	    and T0,T1 
 560 1802 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1806 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1808 22160000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1814 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1818 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1822 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1824 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 182e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1838 FE28     	    cmp r0,KBD_CMD_RESEND
 574 183a EBD0     	    beq 1b 
 575 183c 4FF4FA70 	    mov T0,#500 
 576 1840 E060     	    str T0,[UP,#CD_TIMER]
 577 1842 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 184c 10B9     	    cbnz T0,3f
 579 184e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1850 0028     	    cmp T0,#0 
 581 1852 F6D1     	    bne 2b 
ARM GAS  forth.s 			page 68


 582 1854 47F8046D 	3:  _PUSH 
 583 1858 0646     	    mov TOS,T0  
 584 185a 00F0D7BE 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 185e 0C180000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 186c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1876 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 187a 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1884 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 188e FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1890 ECD0     	    beq 1b
 598 1892 FA28     	    cmp T0,#KBD_ACK  
 599 1894 F6D1     	    bne 2b 
 600 1896 3046     	2:  mov T0,TOS 
 601 1898 00F00700 	    and T0,#7 
 602 189c 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 18a6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 18b0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 18b2 F0D0     	    beq 2b
 606 18b4 FA28     	    cmp T0,#KBD_ACK 
 607 18b6 F6D1     	    bne 3b  
 608 18b8 57F8046B 	    _POP 
 609 18bc 00F0A6BE 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 18c0 62180000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 18d0 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 18d4 10F0010F 	    tst T0,#1
 619 18d8 01D1     	    bne 1f 
 620 18da 00F097BE 	    _NEXT 
 621 18de 47F8046D 	1: _PUSH 
 622 18e2 6FF00101 	    mvn T1,#1 
ARM GAS  forth.s 			page 69


 623 18e6 00EA0100 	    and T0,T1 
 624 18ea 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 18ee 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 18f2 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 18fa C4180000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1908 504700BF 	    _NEST
 635 190c D1180000 	1:  _ADR CAPS_LED  
 636 1910 2D160000 	    _ADR PS2_QKEY 
 637 1914 112B0000 	    _ADR QDUP 
 638 1918 13280000 	    _QBRAN 1b  
 638      0C190000 
 639 1920 13260000 	    _UNNEST 
 640 1924 1E150000 	
 640      2C150000 
 640      8C110000 
 640      B0120000 
 640      40120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
ARM GAS  forth.s 			page 70


  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1944 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 194c 0346     	    mov r3,r0 
  44 194e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1952 4FF00102 	    mov r2,#OUTPUT_PP
  46 1956 00B5FEF7 	    _CALL gpio_config 
  46      05FE5DF8 
  46      04EB
  47 1960 1846     	    mov r0,r3 
  48 1962 4FF00401 	    mov r1,#PIN_F_SC  
  49 1966 4FF00102 	    MOV r2,#1
  50 196a 00B5FEF7 	    _CALL gpio_out 
  50      51FE5DF8 
  50      04EB
  51 1974 1846     	    mov r0,r3 
  52 1976 4FF00501 	    mov r1,#PIN_SCK  
  53 197a 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 197e 00B5FEF7 	    _CALL gpio_config 
  54      F1FD5DF8 
  54      04EB
  55 1988 1846     	    mov r0,r3 
  56 198a 4FF00701 	    mov r1,#PIN_MOSI 
  57 198e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1992 00B5FEF7 	    _CALL gpio_config 
  58      E7FD5DF8 
  58      04EB
  59 199c 1846     	    mov r0,r3
  60 199e 4FF00601 	    mov r1,#PIN_MISO
  61 19a2 4FF00202 	    mov r2,#INPUT_AFO  
  62 19a6 00B5FEF7 	    _CALL gpio_config
  62      DDFD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 19b0 4CF6AA40 	    mov r0,#0xCCAA
  65 19b4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 19b6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 19be 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 19c0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 19c4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 19c6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 19ce 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 19d2 0180     	    strh r1,[r0,#SPI_CR1]
  73 19d4 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 19d6 80EA0000 	    eor r0,r0 
ARM GAS  forth.s 			page 71


  75 19da C5F25050 	    movt r0,#0x5550 
  76 19de 40EA0100 	    orr r0,r1 
  77 19e2 1862     	    str r0,[r3,#GPIO_AFRL]
  78 19e4 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 19e6 FE180000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 19f4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 19fc 4FF00401 	    mov r1,#PIN_F_SC 
  88 1a00 4FF00002 	    mov r2,#0 
  89 1a04 00B5FEF7 	    _CALL gpio_out 
  89      04FE5DF8 
  89      04EB
  90 1a0e 00F0FDBD 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1a12 EA190000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1a20 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1a28 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1a2a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1a2e FBD1     	    bne 1b 
 102 1a30 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1a38 4FF00401 	    mov r1,#PIN_F_SC 
 104 1a3c 4FF00102 	    mov r2,#1 
 105 1a40 00B5FEF7 	    _CALL gpio_out 
 105      E6FD5DF8 
 105      04EB
 106 1a4a 00F0DFBD 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1a4e 161A0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1a5c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
ARM GAS  forth.s 			page 72


 115 1a64 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1a66 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1a6a FBD0     	    beq 0b 
 118 1a6c 6FF00001 	    mvn T1,#0 
 119 1a70 0173     	    strb T1,[T0,#SPI_DR]
 120 1a72 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1a74 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1a78 FBD0     	    beq 1b     
 123              	2:  
 124 1a7a 47F8046D 	    _PUSH 
 125 1a7e 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1a80 00F0C4BD 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1a84 521A0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1a90 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1a98 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1a9a 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1a9e FBD0     	    beq 0b 
 138 1aa0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1aa2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1aa4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1aa8 FBD0     	    beq 1b 
 142 1aaa 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1aac 57F8046B 	    _POP 
 144 1ab0 00F0ACBD 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ab4 881A0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1ac0 504700BF 	    _NEST 
 153 1ac4 F5190000 	    _ADR CHIP_SEL 
 154 1ac8 D3270000 	    _DOLIT 4
 154      04000000 
 155 1ad0 911A0000 	    _ADR WR_BYTE
 156 1ad4 211A0000 	    _ADR CHIP_DSEL
 157 1ad8 13260000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1adc B81A0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
ARM GAS  forth.s 			page 73


 164 1ae8 504700BF 	    _NEST 
 165 1aec F5190000 	    _ADR CHIP_SEL 
 166 1af0 D3270000 	    _DOLIT 6 
 166      06000000 
 167 1af8 911A0000 	    _ADR WR_BYTE 
 168 1afc 211A0000 	    _ADR CHIP_DSEL 
 169 1b00 13260000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1b04 E01A0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1b10 504700BF 	    _NEST
 177 1b14 F5190000 	    _ADR CHIP_SEL  
 178 1b18 D3270000 	    _DOLIT sr_cmd 
 178      381B0000 
 179 1b20 012A0000 	    _ADR PLUS 
 180 1b24 79280000 	    _ADR CAT
 181 1b28 911A0000 	    _ADR WR_BYTE
 182 1b2c 5D1A0000 	    _ADR RD_BYTE
 183 1b30 211A0000 	    _ADR CHIP_DSEL  
 184 1b34 13260000 	    _UNNEST 
 185 1b38 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1b3b 081B0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1b48 504700BF 	    _NEST 
 193 1b4c 3D290000 	    _ADR DUPP 
 194 1b50 D3270000 	    _DOLIT 16
 194      10000000 
 195 1b58 D9290000 	    _ADR RSHIFT 
 196 1b5c 911A0000 	    _ADR WR_BYTE 
 197 1b60 3D290000 	    _ADR DUPP
 198 1b64 D3270000 	    _DOLIT 8 
 198      08000000 
 199 1b6c D9290000 	    _ADR RSHIFT 
 200 1b70 911A0000 	    _ADR WR_BYTE 
 201 1b74 911A0000 	    _ADR WR_BYTE 
 202 1b78 13260000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1b7c 3F1B0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
ARM GAS  forth.s 			page 74


 209 1b8c 504700BF 	    _NEST 
 210 1b90 D3270000 	1:  _DOLIT 0 
 210      00000000 
 211 1b98 111B0000 	    _ADR RD_SR 
 212 1b9c D3270000 	    _DOLIT 3 
 212      03000000 
 213 1ba4 81290000 	    _ADR ANDD 
 214 1ba8 13280000 	    _QBRAN 2f
 214      B81B0000 
 215 1bb0 27280000 	    _BRAN 1b
 215      901B0000 
 216 1bb8 13260000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1bbc 801B0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1bcc 504700BF 	    _NEST 
 225 1bd0 E91A0000 	    _ADR WR_ENBL
 226 1bd4 F5190000 	    _ADR CHIP_SEL 
 227 1bd8 D3270000 	    _DOLIT 0x20 
 227      20000000 
 228 1be0 911A0000 	    _ADR WR_BYTE 
 229 1be4 491B0000 	    _ADR SEND_ADR
 230 1be8 211A0000 	    _ADR CHIP_DSEL 
 231 1bec 8D1B0000 	    _ADR WAIT_DONE 
 232 1bf0 13260000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1bf4 C01B0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1c04 504700BF 	    _NEST 
 240 1c08 E91A0000 	    _ADR WR_ENBL 
 241 1c0c F5190000 	    _ADR CHIP_SEL
 242 1c10 D3270000 	    _DOLIT 0x60
 242      60000000 
 243 1c18 D3270000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1c20 911A0000 	    _ADR WR_BYTE 
 245 1c24 911A0000 	    _ADR WR_BYTE 
 246 1c28 211A0000 	    _ADR CHIP_DSEL 
 247 1c2c 8D1B0000 	    _ADR WAIT_DONE
 248 1c30 13260000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
ARM GAS  forth.s 			page 75


 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1c34 F81B0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1c40 504700BF 	    _NEST
 258 1c44 F5190000 	    _ADR CHIP_SEL 
 259 1c48 D3270000 	    _DOLIT 3 
 259      03000000 
 260 1c50 911A0000 	    _ADR WR_BYTE 
 261 1c54 491B0000 	    _ADR SEND_ADR
 262 1c58 C9280000 	    _ADR TOR   
 263 1c5c 27280000 	    _BRAN 2f
 263      741C0000 
 264 1c64 5D1A0000 	1:  _ADR RD_BYTE
 265 1c68 61290000 	    _ADR OVER 
 266 1c6c 65280000 	    _ADR CSTOR
 267 1c70 5D2A0000 	    _ADR ONEP 
 268 1c74 F5270000 	2:  _DONXT 1b
 268      641C0000 
 269 1c7c 2D290000 	    _ADR DROP 
 270 1c80 211A0000 	    _ADR CHIP_DSEL 
 271 1c84 13260000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1c88 381C0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1c94 504700BF 	    _NEST 
 280 1c98 E91A0000 	    _ADR WR_ENBL
 281 1c9c F5190000 	    _ADR CHIP_SEL
 282 1ca0 D3270000 	    _DOLIT 2 
 282      02000000 
 283 1ca8 911A0000 	    _ADR WR_BYTE 
 284 1cac 491B0000 	    _ADR SEND_ADR
 285 1cb0 C9280000 	    _ADR TOR
 286 1cb4 27280000 	    _BRAN 2f 
 286      D41C0000 
 287 1cbc 3D290000 	1:  _ADR DUPP 
 288 1cc0 79280000 	    _ADR CAT 
 289 1cc4 3D290000 	    _ADR DUPP 
 290 1cc8 093A0000 	    _ADR HDOT
 291 1ccc 911A0000 	    _ADR WR_BYTE 
 292 1cd0 5D2A0000 	    _ADR ONEP
 293 1cd4 F5270000 	2:  _DONXT 1b 
 293      BC1C0000 
 294 1cdc 2D290000 	    _ADR DROP
 295 1ce0 211A0000 	    _ADR CHIP_DSEL
 296 1ce4 8D1B0000 	    _ADR WAIT_DONE 
 297 1ce8 13260000 	    _UNNEST
 298              	
 299              	
ARM GAS  forth.s 			page 76


 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1cec 8C1C0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1cfc 504700BF 	    _NEST 
 318              	    
 319 1d00 13260000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1d04 F01C0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1d14 504700BF 	    _NEST 
 327              	
 328 1d18 13260000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1d1c 081D0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1d24 504700BF 	    _NEST 
 336              	
 337 1d28 13260000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1d2c 201D0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1d38 504700BF 	    _NEST 
 345              	
 346 1d3c 13260000 	    _UNNEST 
 347              	
ARM GAS  forth.s 			page 77


 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1d40 301D0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1d4c 504700BF 	    _NEST 
 354              	
 355 1d50 13260000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	
  32              	
  33              	/*****************************
  34              	   initialize FPU
  35              	****************************/
  36              	fpu_init: 
  37 1d54 DFF80804 	   ldr.w r0,=CPACR 
  38 1d58 0168     	   ldr R1,[R0]
  39 1d5a 41F47001 	   orr r1,r1,#(0xf<<20)
  40 1d5e 0160     	   str r1,[r0]
  41 1d60 BFF34F8F 	   dsb 
  42 1d64 4FF00000 	   ldr r0,=FPCCR
  43 1d68 81EA0101 	   eor r1,r1 
  44 1d6c 0160     	   str r1,[r0]
ARM GAS  forth.s 			page 78


  45 1d6e BFF34F8F 	   dsb 
  46 1d72 4FF05100 	   mov r0,#FPU_IRQ 
  47 1d76 00B5FEF7 	   _CALL nvic_enable_irq
  47      C9FB5DF8 
  47      04EB
  48 1d80 7047     	   _RET
  49              	
  50              	/***************************
  51              	   FPSCR ( -- u )
  52              	   stack fpu SCR register 
  53              	***************************/
  54 1d82 441D0000 	   _HEADER FPSCR,5,"FPSCR"
  54      05465053 
  54      4352
  55 1d8c 47F8046D 	   _PUSH 
  56 1d90 F1EE106A 	   vmrs TOS,FPSCR
  57 1d94 BFF34F8F 	   dsb  
  58 1d98 00F038BC 	   _NEXT 
  59              	
  60              	
  61              	/**************************
  62              	   CLR_FPSCR ( -- )
  63              	************************/
  64 1d9c 861D0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
  64      09434C52 
  64      5F465053 
  64      435200BF 
  65 1dac 80EA0000 	   eor T0,T0 
  66 1db0 E1EE100A 	   vmsr FPSCR,T0
  67 1db4 BFF34F8F 	   dsb 
  68 1db8 00F028BC 	   _NEXT 
  69              	
  70              	
  71              	/*******************************
  72              	    >S0 variable ( f# --  )
  73              	    send float to fpu S0 
  74              	**********************************/
  75 1dbc A01D0000 	    _HEADER TOS0,3,">S0"
  75      033E5330 
  76 1dc4 00EE106A 	    vmov.f32 S0,TOS 
  77 1dc8 57F8046B 	    _POP 
  78 1dcc 00F01EBC 	    _NEXT  
  79              	
  80              	/*******************************
  81              	    >S1 variable ( f# --  )
  82              	    send float to fpu S1 
  83              	**********************************/
  84 1dd0 C01D0000 	    _HEADER TOS1,3,">S1"
  84      033E5331 
  85 1dd8 00EE906A 	    vmov.f32 S1,TOS 
  86 1ddc 57F8046B 	    _POP 
  87 1de0 00F014BC 	    _NEXT  
  88              	
  89              	/*******************************
  90              	    >S2 variable ( f# --  )
  91              	    send float to fpu S2 
  92              	**********************************/
ARM GAS  forth.s 			page 79


  93 1de4 D41D0000 	    _HEADER TOS2,3,">S2"
  93      033E5332 
  94 1dec 01EE106A 	    vmov.f32 S2,TOS 
  95 1df0 57F8046B 	    _POP 
  96 1df4 00F00ABC 	    _NEXT  
  97              	
  98              	/*******************************
  99              	    S0>  ( -- f )
 100              	    push fpu S0 
 101              	*******************************/
 102 1df8 E81D0000 	    _HEADER S0FROM,3,"S0>"
 102      0353303E 
 103 1e00 47F8046D 	    _PUSH 
 104 1e04 10EE106A 	    vmov.f32 TOS,S0 
 105 1e08 00F000BC 	    _NEXT 
 106              	
 107              	/*******************************
 108              	    S1>  ( -- f )
 109              	    push fpu S1 
 110              	*******************************/
 111 1e0c FC1D0000 	    _HEADER S1FROM,3,"S1>"
 111      0353313E 
 112 1e14 47F8046D 	    _PUSH 
 113 1e18 10EE906A 	    vmov.f32 TOS,S1 
 114 1e1c F6E3     	    _NEXT 
 115              	
 116              	/*******************************
 117              	    S2>  ( -- f )
 118              	    push fpu S2 
 119              	*******************************/
 120 1e1e 101E0000 	    _HEADER S2FROM,3,"S2>"
 120      0353323E 
 120      00BF
 121 1e28 47F8046D 	    _PUSH 
 122 1e2c 11EE106A 	    vmov.f32 TOS,S2 
 123 1e30 ECE3     	    _NEXT 
 124              	
 125              	
 126              	/*******************************
 127              	    F>S ( f -- n )
 128              	    convert float to integer 
 129              	    round to nearest integer 
 130              	*******************************/
 131 1e32 221E0000 	    _HEADER FTOS,3,"F>S"
 131      03463E53 
 131      00BF
 132 1e3c 00EE106A 	    vmov.f32 S0,TOS
 133 1e40 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 134 1e44 10EE106A 	    vmov.f32 TOS,s0 
 135 1e48 E0E3     	    _NEXT 
 136              	    
 137              	/*******************************
 138              	    TRUNC (f - n )
 139              	    truncate float to integer 
 140              	*******************************/
 141 1e4a 361E0000 	    _HEADER TRUNC,5,"TRUNC"
 141      05545255 
ARM GAS  forth.s 			page 80


 141      4E43
 142 1e54 00EE106A 	    vmov.f32 S0,TOS 
 143 1e58 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 144 1e5c 10EE106A 	    vmov.f32 TOS,S0 
 145 1e60 D4E3     	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S>F ( s -- f )
 149              	    convert integer to float 
 150              	*******************************/
 151 1e62 4E1E0000 	    _HEADER STOF,3,"S>F" 
 151      03533E46 
 151      00BF
 152 1e6c 00EE106A 	    vmov.f32 S0,TOS
 153 1e70 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 154 1e74 10EE106A 	    vmov.f32 TOS,s0 
 155 1e78 C8E3     	   _NEXT 
 156              	
 157              	/*******************************
 158              	    F+ ( f1 f2 -- f1+f2 )
 159              	    add 2 floats 
 160              	*******************************/
 161 1e7a 661E0000 	    _HEADER FPLUS,2,"F+"
 161      02462B00 
 161      00BF
 162 1e84 00EE106A 	   vmov.f32 s0,TOS 
 163 1e88 57F8046B 	   _POP 
 164 1e8c 00EE906A 	   vmov.f32 s1,TOS 
 165 1e90 30EE200A 	   vadd.f32 s0,s0,s1 
 166 1e94 10EE106A 	   vmov.f32 TOS,s0
 167 1e98 B8E3     	   _NEXT 
 168              	
 169              	   
 170              	/*******************************
 171              	    F- ( f1 f2 -- f1-f2 )
 172              	    substract 2 float 
 173              	*******************************/
 174 1e9a 7E1E0000 	    _HEADER FMINUS,2,"F-"
 174      02462D00 
 174      00BF
 175 1ea4 00EE106A 	   vmov.f32 s0,TOS 
 176 1ea8 57F8046B 	   _POP 
 177 1eac 00EE906A 	   vmov.f32 s1,TOS 
 178 1eb0 30EEC00A 	   vsub.f32 s0,s1,s0 
 179 1eb4 10EE106A 	   vmov.f32 TOS,s0
 180 1eb8 A8E3     	   _NEXT 
 181              	
 182              	
 183              	
 184              	/*******************************
 185              	    F* ( f1 f2 -- f1*f2 )
 186              	    multiply 2 float 
 187              	******************************/
 188 1eba 9E1E0000 	   _HEADER FSTAR,2,"F*"
 188      02462A00 
 188      00BF
 189 1ec4 00EE106A 	   vmov.f32 s0,TOS 
ARM GAS  forth.s 			page 81


 190 1ec8 57F8046B 	   _POP 
 191 1ecc 00EE906A 	   vmov.f32 s1,TOS 
 192 1ed0 20EE800A 	   vmul.f32 s0,s1,s0 
 193 1ed4 10EE106A 	   vmov.f32 TOS,s0
 194 1ed8 98E3     	   _NEXT 
 195              	
 196              	
 197              	/*******************************
 198              	    F/ ( f1 f2 -- f1/f2 )
 199              	    divide f1 by f2 
 200              	*******************************/
 201 1eda BE1E0000 	    _HEADER FSLH,2,"F/"
 201      02462F00 
 201      00BF
 202 1ee4 00EE106A 	   vmov.f32 s0,TOS 
 203 1ee8 57F8046B 	   _POP 
 204 1eec 00EE906A 	   vmov.f32 s1,TOS 
 205 1ef0 80EE800A 	   vdiv.f32 s0,s1,s0 
 206 1ef4 10EE106A 	   vmov.f32 TOS,s0
 207 1ef8 88E3     	   _NEXT 
 208              	
 209              	
 210              	/********************************
 211              	    FNEGATE ( f -- -f )
 212              	    negate floating point 
 213              	********************************/
 214 1efa DE1E0000 	    _HEADER FNEG,7,"FNEGATE"
 214      07464E45 
 214      47415445 
 214      00BF
 215 1f08 00EE106A 	    vmov.f32 s0,TOS 
 216 1f0c B1EE400A 	    vneg.f32 S0,S0 
 217 1f10 10EE106A 	    vmov.f32 TOS,S0    
 218 1f14 7AE3     	    _NEXT 
 219              	
 220              	/**********************************
 221              	    FABS ( f -- f )
 222              	    return absolute value 
 223              	******************************/
 224 1f16 FE1E0000 	    _HEADER FABS,4,"FABS"
 224      04464142 
 224      5300
 225 1f20 00EE106A 	    vmov.f32 s0,TOS 
 226 1f24 B0EEC00A 	    vabs.f32 S0,S0 
 227 1f28 10EE106A 	    vmov.f32 TOS,S0    
 228 1f2c 6EE3     	    _NEXT 
 229              	
 230              	
 231              	/*****************************
 232              	     SQRT  ( f -- f )
 233              	     compute square root 
 234              	*****************************/
 235 1f2e 1A1F0000 	     _HEADER SQRT,4,"SQRT"
 235      04535152 
 235      5400
 236 1f38 00EE106A 	     vmov.f32 s0,TOS 
 237 1f3c B1EEC00A 	     vsqrt.f32 s0,s0 
ARM GAS  forth.s 			page 82


 238 1f40 10EE106A 	     vmov.f32 TOS,s0 
 239 1f44 62E3     	     _NEXT 
 240              	
 241              	
 242              	/*****************************
 243              	   F0<   ( f -- flag )
 244              	*****************************/
 245 1f46 321F0000 	    _HEADER FZLESS,3,"F0<"
 245      0346303C 
 245      00BF
 246 1f50 00EE106A 	    vmov.f32 s0,TOS 
 247 1f54 B5EE400A 	    vcmp.f32 s0, #0.0 
 248 1f58 F1EE106A 	    vmrs TOS,FPSCR
 249 1f5c BFF34F8F 	    dsb  
 250 1f60 4FEAE676 	    asr TOS,#31   
 251 1f64 52E3     	    _NEXT 
 252              	
 253              	/*****************************
 254              	    F> ( f#1 f#2 -- flag )
 255              	    f#1>f#2 ? 
 256              	*****************************/
 257 1f66 4A1F0000 	    _HEADER FGREAT,2,"F>"
 257      02463E00 
 257      00BF
 258 1f70 504700BF 	    _NEST 
 259 1f74 A51E0000 	    _ADR FMINUS
 260 1f78 511F0000 	    _ADR FZLESS
 261 1f7c 0D2C0000 	    _ADR INVER     
 262 1f80 13260000 	    _UNNEST 
 263              	
 264              	/*****************************
 265              	    F< ( f#1 f#2 -- flag )
 266              	    f#1<f#2 ? 
 267              	*****************************/
 268 1f84 6A1F0000 	    _HEADER FLESS,2,"F<"
 268      02463C00 
 269 1f8c 504700BF 	    _NEST 
 270 1f90 A51E0000 	    _ADR FMINUS 
 271 1f94 511F0000 	    _ADR FZLESS
 272 1f98 13260000 	    _UNNEST 
 273              	
 274              	
 275              	/*******************************
 276              	    FMIN ( f#1 f#2 -- smallest )
 277              	********************************/
 278 1f9c 881F0000 	    _HEADER FMIN,4,"FMIN"
 278      04464D49 
 278      4E0000BF 
 279 1fa8 504700BF 	    _NEST 
 280 1fac 61290000 	   _ADR OVER 
 281 1fb0 61290000 	   _ADR OVER 
 282 1fb4 711F0000 	   _ADR FGREAT 
 283 1fb8 13280000 	   _QBRAN 1f 
 283      C41F0000 
 284 1fc0 4D290000 	   _ADR SWAP  
 285 1fc4 2D290000 	1: _ADR DROP 
 286 1fc8 13260000 	    _UNNEST 
ARM GAS  forth.s 			page 83


 287              	
 288              	/*******************************
 289              	    FMAX (f#1 f#2 -- largest )
 290              	*******************************/
 291 1fcc A01F0000 	    _HEADER FMAX,4,"FMAX"
 291      04464D41 
 291      580000BF 
 292 1fd8 504700BF 	    _NEST 
 293 1fdc 61290000 	    _ADR OVER 
 294 1fe0 61290000 	    _ADR OVER 
 295 1fe4 8D1F0000 	    _ADR FLESS 
 296 1fe8 13280000 	    _QBRAN 1f
 296      F41F0000 
 297 1ff0 4D290000 	    _ADR SWAP   
 298 1ff4 2D290000 	1:  _ADR DROP 
 299 1ff8 13260000 	    _UNNEST 
 300              	
 301              	
 302              	/*******************************
 303              	    PI  ( -- f )
 304              	    return 3.14159265
 305              	*******************************/
 306 1ffc D01F0000 	    _HEADER PI,2,"PI"
 306      02504900 
 307 2004 47F8046D 	    _PUSH 
 308 2008 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 308      C4F24906 
 309 2010 FCE2     	    _NEXT
 310              	 
 311              	
 312              	/*********************************
 313              	     float printing 
 314              	*********************************/
 315              	
 316              	/*********************************
 317              	    @EXPONENT ( f -- n )
 318              	    extract exponent from float 
 319              	********************************/
 320 2012 00200000 	    _HEADER AT_EXPONENT,9,"@EXPONENT"
 320      09404558 
 320      504F4E45 
 320      4E54
 321 2020 504700BF 	    _NEST 
 322 2024 D3270000 	    _DOLIT 23
 322      17000000 
 323 202c D9290000 	    _ADR RSHIFT 
 324 2030 D3270000 	    _DOLIT 255  
 324      FF000000 
 325 2038 81290000 	    _ADR ANDD 
 326 203c D3270000 	    _DOLIT 127 
 326      7F000000 
 327 2044 112A0000 	    _ADR SUBB  
 328 2048 13260000 	    _UNNEST 
 329              	
 330              	/**************************************
 331              	    E. ( f -- )
 332              	    print float in scientific notation
ARM GAS  forth.s 			page 84


 333              	***************************************
 334              	    _HEADER EDOT,2,"E."
 335              	    _NEST 
 336              	
 337              	    _UNNEST 
 338              	
 339              	frac_digit: 
 340              	    vmov.f32 s2,#ten 
 341              	    vmul.f32 s1,s0,s2 
 342              	
 343              	/********************************
 344              	    F. ( f -- )
 345              	    print float in fixed point 
 346              	*********************************/
 347 204c 16200000 	    _HEADER FDOT,2,"F."
 347      02462E00 
 348 2054 504700BF 	    _NEST 
 349 2058 3D290000 	    _ADR DUPP 
 350 205c 511F0000 	    _ADR FZLESS 
 351 2060 13280000 	    _QBRAN 1f 
 351      78200000 
 352 2068 D3270000 	    _DOLIT '-'
 352      2D000000 
 353 2070 DD260000 	    _ADR EMIT 
 354 2074 091F0000 	    _ADR FNEG
 355 2078 3D290000 	1:  _ADR DUPP 
 356 207c D3270000 	    _DOLIT plus1 
 356      0000803F 
 357 2084 8D1F0000 	    _ADR FLESS 
 358 2088 13280000 	    _QBRAN 2f // float > 0 
 358      BC200000 
 359              	// float < 0 
 360 2090 D3270000 	    _DOLIT '0' 
 360      30000000 
 361 2098 DD260000 	    _ADR EMIT 
 362 209c D3270000 	    _DOLIT '.' 
 362      2E000000 
 363 20a4 DD260000 	    _ADR EMIT 
 364 20a8 D3270000 	    _DOLIT 7 
 364      07000000 
 365 20b0 C9280000 	    _ADR TOR
 366 20b4 D3270000 	    _DOLIT ten 
 366      00002041 
 367              	
 368              	1:      
 369              	
 370              	2: // float > 0         
 371 20bc 13260000 	    _UNNEST 
 372              	
 373              	/*********************************
 374              	    float parsing 
 375              	*********************************/
 376              	
 377              	
 378              	 /********************************
 379              	 check for exponent 
 380              	********************************/
ARM GAS  forth.s 			page 85


 381              	EXPONENT: // ( a -- e a+ )
 382 20c0 504700BF 	    _NEST 
 383 20c4 D3270000 	    _DOLIT 'E'
 383      45000000 
 384 20cc B1360000 	    _ADR CHARQ 
 385 20d0 13280000 	    _QBRAN 2f 
 385      24210000 
 386 20d8 D3270000 	    _DOLIT '-'
 386      2D000000 
 387 20e0 B1360000 	    _ADR CHARQ
 388 20e4 C9280000 	    _ADR TOR
 389 20e8 D3270000 	    _DOLIT 0 
 389      00000000 
 390 20f0 3D290000 	    _ADR DUPP  
 391 20f4 252B0000 	    _ADR ROT 
 392 20f8 51360000 	    _ADR PARSE_DIGITS
 393 20fc 252B0000 	    _ADR ROT
 394 2100 2D290000 	    _ADR DROP // discard digits count  
 395 2104 85280000 	    _ADR RFROM 
 396 2108 13280000 	    _QBRAN 8f 
 396      30210000 
 397 2110 4D290000 	    _ADR SWAP
 398 2114 212C0000 	    _ADR NEGAT
 399 2118 4D290000 	    _ADR SWAP
 400 211c 27280000 	    _BRAN 8f    
 400      30210000 
 401 2124 D3270000 	2:  _DOLIT 0 
 401      00000000 
 402 212c 4D290000 	    _ADR SWAP     
 403 2130 13260000 	8:  _UNNEST 
 404              	
 405              	
 406              	
 407              	
 408              	/********************************
 409              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 410              	    parse number, integer or float 
 411              	    if not a number return ( a 0 ) 
 412              	    if integer return ( int -1 ) 
 413              	    if float return ( float -2 )
 414              	**********************************/
 415 2134 50200000 	    _HEADER NUMBER,6,"NUMBER"
 415      064E554D 
 415      42455200 
 416 2140 504700BF 	    _NEST 
 417 2144 D5360000 	    _ADR INTQ
 418 2148 112B0000 	    _ADR QDUP 
 419 214c 13280000 	    _QBRAN 2f 
 419      58210000 
 420 2154 13260000 	    _UNNEST 
 421 2158 B5240000 	2:  _ADR FLOATQ
 422 215c 13260000 	    _UNNEST 
 422      88ED00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 86


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/****************************************************************************************
  21              	  float number parser 
  22              	
  23              	  adapted from  following C code 
  24              	  ref: https://github.com/ochafik/LibCL/blob/master/src/main/resources/LibCL/strtof.c
  25              	
  26              	****************************************************************************************/
  27              	
  28              	/******************************************************
  29              	    powers of 10 used in parsing float numbers 
  30              	*******************************************************/    
  31              	
  32 2164 00002041 	powersof10:  .word  0x41200000  // 10.0 
  33 2168 0000C842 	             .word  0x42C80000  // 100.0
  34 216c 00401C46 	             .word  0x461C4000  // 10000.0 
  35 2170 20BCBE4C 	             .word  0x4CBEBC20  // 1.0e8
  36 2174 CA1B0E5A 	             .word  0x5A0E1BCA  // 1.0e16 
  37 2178 AEC59D74 	             .word  0x749DC5AE  // 1.0e32 
  38              	
  39              	fzero =  0x0
  40              	fone =  0x3F800000
  41              	fminus1 = 0xBF800000
  42              	ften = 0x41200000 
  43              	
  44              	// check first char for '-'|'+' 
  45              	// update pointer if found 
  46              	get_sign: // ( a cnt -- a cnt 0 | a+ cnt- -1 )
  47 217c 504700BF 	    _NEST
  48 2180 61290000 	    _ADR OVER 
  49 2184 79280000 	    _ADR CAT 
  50 2188 3D290000 	    _ADR DUPP 
  51 218c D3270000 	    _DOLIT '-' 
  51      2D000000 
  52 2194 892C0000 	    _ADR EQUAL 
  53 2198 3D290000 	    _ADR DUPP 
  54 219c C9280000 	    _ADR TOR 
  55 21a0 13280000 	    _QBRAN 4f
  55      B8210000 
  56 21a8 2D290000 	    _ADR DROP  
  57 21ac 91240000 	1:  _ADR padv  
  58 21b0 85280000 	2:  _ADR RFROM 
  59 21b4 13260000 	    _UNNEST 
ARM GAS  forth.s 			page 87


  60 21b8 D3270000 	4:  _DOLIT '+' 
  60      2B000000 
  61 21c0 892C0000 	    _ADR EQUAL 
  62 21c4 13280000 	    _QBRAN 2b
  62      B0210000 
  63 21cc 27280000 	    _BRAN 1b 
  63      AC210000 
  64              	
  65              	/*
  66              	// get mantissa size 
  67              	// m -> digits count in mantissa 
  68              	mant_size: // ( a cnt -- a+ cnt- m )
  69              	    _NEST 
  70              	    _DOLIT 0 
  71              	    _ADR NROT   // mantissa size   -- m a cnt 
  72              	// check for cnt==0     
  73              	1:  _ADR DUPP 
  74              	    _ADR ZEQUAL 
  75              	    _QBRAN 2f 
  76              	    _BRAN 4f  // end of string 
  77              	2:  _ADR OVER 
  78              	    _ADR CAT 
  79              	    _ADR DIGTQ // return u flag  
  80              	    _ADR SWAP 
  81              	    _ADR DROP  // don't keep u  
  82              	    _QBRAN 4f  // not a digit 
  83              	    _ADR ROT 
  84              	    _ADR ONEP 
  85              	    _ADR NROT 
  86              	    _ADR padv 
  87              	    _BRAN 1b
  88              	4:  _ADR ROT     
  89              	    _UNNEST 
  90              	*/
  91              	
  92              	// parse integer part 
  93              	parse_int: // ( a cnt -- a+ cnt- fi )
  94 21d4 504700BF 	    _NEST 
  95 21d8 D3270000 	    _DOLIT fzero
  95      00000000 
  96 21e0 392B0000 	    _ADR NROT  // 0.0 a cnt 
  97              	1: // check for end fo string 
  98 21e4 3D290000 	    _ADR DUPP 
  99 21e8 752C0000 	    _ADR ZEQUAL 
 100 21ec 13280000 	    _QBRAN 2f 
 100      FC210000 
 101 21f4 27280000 	    _BRAN 4f // end of string 
 101      44220000 
 102 21fc 61290000 	2:  _ADR OVER 
 103 2200 79280000 	    _ADR CAT 
 104 2204 F5350000 	    _ADR DIGTQ 
 105 2208 13280000 	    _QBRAN 3f  
 105      40220000 
 106 2210 6D1E0000 	    _ADR STOF // convert digit to float 
 107 2214 C9280000 	    _ADR TOR  
 108 2218 252B0000 	    _ADR ROT  
 109 221c D3270000 	    _DOLIT ften 
ARM GAS  forth.s 			page 88


 109      00002041 
 110 2224 C51E0000 	    _ADR FSTAR 
 111 2228 85280000 	    _ADR RFROM 
 112 222c 851E0000 	    _ADR FPLUS 
 113 2230 392B0000 	    _ADR NROT 
 114 2234 91240000 	    _ADR padv 
 115 2238 27280000 	    _BRAN 1b 
 115      E4210000 
 116 2240 2D290000 	3:  _ADR DROP 
 117 2244 252B0000 	4:  _ADR ROT
 118 2248 13260000 	    _UNNEST 
 119              	
 120              	
 121              	// parse fraction part 
 122              	parse_frac: // ( a cnt -- a+ cnt- ff ) 
 123 224c 504700BF 	    _NEST 
 124 2250 D3270000 	    _DOLIT fzero  
 124      00000000 
 125 2258 C9280000 	    _ADR TOR 
 126 225c D3270000 	    _DOLIT fone 
 126      0000803F 
 127 2264 392B0000 	    _ADR NROT 
 128              	1:  // check for end of string 
 129 2268 3D290000 	    _ADR DUPP 
 130 226c 752C0000 	    _ADR ZEQUAL 
 131 2270 13280000 	    _QBRAN 2f 
 131      80220000 
 132 2278 27280000 	    _BRAN 4f // end of string 
 132      D4220000 
 133 2280 61290000 	2:  _ADR OVER 
 134 2284 79280000 	    _ADR CAT 
 135 2288 F5350000 	    _ADR DIGTQ 
 136 228c 13280000 	    _QBRAN 3f  
 136      D0220000 
 137 2294 6D1E0000 	    _ADR STOF // convert digit to float 
 138 2298 C9280000 	    _ADR TOR  
 139 229c 252B0000 	    _ADR ROT 
 140 22a0 01002041 	    _ADR ften 
 141 22a4 C51E0000 	    _ADR FSTAR
 142 22a8 3D290000 	    _ADR DUPP  
 143 22ac 85280000 	    _ADR RFROM 
 144 22b0 E51E0000 	    _ADR FSLH
 145 22b4 85280000 	    _ADR RFROM 
 146 22b8 851E0000 	    _ADR FPLUS 
 147 22bc C9280000 	    _ADR TOR 
 148 22c0 392B0000 	    _ADR NROT
 149 22c4 91240000 	    _ADR padv  
 150 22c8 27280000 	    _BRAN 1b 
 150      68220000 
 151 22d0 2D290000 	3:  _ADR DROP 
 152 22d4 252B0000 	4:  _ADR ROT 
 153 22d8 2D290000 	    _ADR DROP 
 154 22dc 85280000 	    _ADR RFROM 
 155 22e0 13260000 	    _UNNEST 
 156              	
 157              	// parse exponent part 
 158              	parse_exp: // ( a cnt -- a+ cnt- exp ) 
ARM GAS  forth.s 			page 89


 159 22e4 504700BF 	    _NEST
 160 22e8 7D210000 	    _ADR get_sign
 161 22ec C9280000 	    _ADR TOR 
 162 22f0 D3270000 	    _DOLIT 0 
 162      00000000 
 163 22f8 392B0000 	    _ADR NROT 
 164              	1:  // check for end of string 
 165 22fc 3D290000 	    _ADR DUPP 
 166 2300 752C0000 	    _ADR ZEQUAL 
 167 2304 13280000 	    _QBRAN 2f 
 167      14230000 
 168 230c 27280000 	    _BRAN 4f // end of string 
 168      58230000 
 169 2314 61290000 	2:  _ADR OVER 
 170 2318 79280000 	    _ADR CAT 
 171 231c F5350000 	    _ADR DIGTQ 
 172 2320 13280000 	    _QBRAN 3f  
 172      54230000 
 173 2328 C9280000 	    _ADR TOR 
 174 232c 252B0000 	    _ADR ROT 
 175 2330 D3270000 	    _DOLIT 10 
 175      0A000000 
 176 2338 212A0000 	    _ADR STAR
 177 233c 85280000 	    _ADR RFROM 
 178 2340 012A0000 	    _ADR PLUS 
 179 2344 392B0000 	    _ADR NROT 
 180 2348 91240000 	    _ADR padv 
 181 234c 27280000 	    _BRAN 1f 
 181      0C240000 
 182 2354 2D290000 	3:  _ADR DROP 
 183 2358 252B0000 	4:  _ADR ROT 
 184 235c 85280000 	    _ADR RFROM // sign 
 185 2360 13280000 	    _QBRAN 5f 
 185      6C230000 
 186 2368 212C0000 	    _ADR NEGAT 
 187 236c 13260000 	5:  _UNNEST 
 188              	
 189              	// fetch element from powersof10 array 
 190              	power10: // ( idx -- f )
 191 2370 504700BF 	    _NEST 
 192 2374 D3270000 	    _DOLIT 2 
 192      02000000 
 193 237c F1290000 	    _ADR LSHIFT 
 194 2380 D3270000 	    _DOLIT powersof10
 194      64210000 
 195 2388 012A0000 	    _ADR PLUS 
 196 238c 59280000 	    _ADR AT 
 197 2390 13260000 	    _UNNEST 
 198              	
 199              	
 200              	// check if exponent bit at idx position is 
 201              	// set or reset   
 202              	bit_state: // ( idx f e -- idx f bit )
 203 2394 504700BF 	    _NEST 
 204 2398 D3270000 	    _DOLIT 1  // idx f e 1
 204      01000000 
 205 23a0 D3270000 	    _DOLIT 3  // idx f e 1 3 
ARM GAS  forth.s 			page 90


 205      03000000 
 206 23a8 81320000 	    _ADR PICK  // idx f e 1 idx 
 207 23ac F1290000 	    _ADR LSHIFT // idx f e bit_mask 
 208 23b0 81290000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
 209 23b4 13260000 	    _UNNEST 
 210              	
 211              	// exponent adjustment 
 212              	// multiply or divide mantissa by exponent  
 213              	// if exponant < 0 divide 
 214              	// if exponant >0 multiply 
 215              	// 8f exponant == 0 done 
 216              	mult_div_exp: // ( e f  -- f )
 217 23b8 504700BF 	    _NEST 
 218 23bc 61290000 	    _ADR OVER  // e f e 
 219 23c0 13280000 	    _QBRAN 4f // exp==0,  done 
 219      84240000 
 220 23c8 D3270000 	    _DOLIT 0  // e f idx  
 220      00000000 
 221 23d0 392B0000 	    _ADR NROT // idx e f
 222 23d4 4D290000 	    _ADR SWAP // idx f e   
 223 23d8 3D290000 	    _ADR DUPP  // idx f e e 
 224 23dc 71290000 	    _ADR ZLESS
 225 23e0 13280000 	    _QBRAN pos_exp 
 225      38240000 
 226              	// negative exponent 
 227 23e8 312C0000 	    _ADR ABSS 
 228 23ec C9280000 	    _ADR TOR //  -- idx f R: e 
 229              	div_loop:
 230 23f0 B5280000 	    _ADR RAT   // idx f e R: e 
 231 23f4 95230000 	    _ADR bit_state // idx f state 
 232 23f8 13280000 	    _QBRAN 1f   // bit reset 
 232      0C240000 
 233 2400 61290000 	    _ADR OVER 
 234 2404 71230000 	    _ADR power10 // idx f pwr10 R: e
 235 2408 E51E0000 	    _ADR FSLH  // idx f R: e 
 236 240c 4D290000 	1:  _ADR SWAP  // f idx R: e 
 237 2410 5D2A0000 	    _ADR ONEP   // F idx++ R: e 
 238 2414 4D290000 	    _ADR SWAP   // idx f  
 239 2418 61290000 	    _ADR OVER   // idx f idx 
 240 241c D3270000 	    _DOLIT 5 
 240      05000000 
 241 2424 092D0000 	    _ADR GREAT  // idx > 5
 242 2428 13280000 	    _QBRAN div_loop 
 242      F0230000 
 243 2430 27280000 	    _BRAN 3f 
 243      7C240000 
 244              	pos_exp: // positive exponent 
 245 2438 C9280000 	    _ADR TOR // idx f  R: e 
 246              	mult_loop:
 247 243c B5280000 	    _ADR RAT   // idx f e R: e 
 248 2440 95230000 	    _ADR bit_state // idx f state 
 249 2444 13280000 	    _QBRAN 1f   // bit reset 
 249      58240000 
 250 244c 61290000 	    _ADR OVER  
 251 2450 71230000 	    _ADR power10 // idx f pwr10 R: e
 252 2454 C51E0000 	    _ADR FSTAR  // idx f R: e 
 253 2458 4D290000 	1:  _ADR SWAP  // f idx R: e 
ARM GAS  forth.s 			page 91


 254 245c 5D2A0000 	    _ADR ONEP   // F idx++ R: e 
 255 2460 4D290000 	    _ADR SWAP   // idx f  
 256 2464 61290000 	    _ADR OVER   // idx f idx 
 257 2468 D3270000 	    _DOLIT 5 
 257      05000000 
 258 2470 092D0000 	    _ADR GREAT  // idx > 5
 259 2474 13280000 	    _QBRAN mult_loop 
 259      3C240000 
 260              	// adjustment done 
 261 247c 85280000 	3:  _ADR RFROM 
 262 2480 2D290000 	    _ADR DROP 
 263 2484 4D290000 	4:  _ADR SWAP 
 264 2488 2D290000 	    _ADR DROP 
 265 248c 13260000 	    _UNNEST 
 266              	
 267              	// move pointer forward and decrement count 
 268              	padv: // ( a cnt -- a++ cnt-- )
 269 2490 504700BF 	    _NEST 
 270 2494 6D2A0000 	    _ADR ONEM 
 271 2498 4D290000 	    _ADR SWAP 
 272 249c 5D2A0000 	    _ADR ONEP 
 273 24a0 4D290000 	    _ADR SWAP 
 274 24a4 13260000 	    _UNNEST 
 275              	
 276              	
 277              	/**********************************
 278              	    FLOAT? ( a -- f# -2 | a 0 )
 279              	    parse float number 
 280              	    return a 0 if not float 
 281              	**********************************/
 282 24a8 38210000 	    _HEADER FLOATQ,6,"FLOAT?"
 282      06464C4F 
 282      41543F00 
 283 24b4 504700BF 	    _NEST
 284              	    // always use base 10 
 285              	    // hexadecimal float not accepted 
 286 24b8 2D2E0000 	    _ADR BASE 
 287 24bc 59280000 	    _ADR AT 
 288 24c0 C9280000 	    _ADR TOR 
 289 24c4 D3270000 	    _DOLIT 10 
 289      0A000000 
 290 24cc 2D2E0000 	    _ADR BASE 
 291 24d0 45280000 	    _ADR STORE
 292 24d4 D3270000 		_DOLIT	0      // failed flag   
 292      00000000 
 293 24dc 61290000 		_ADR	OVER   // a 0 a     R: base
 294 24e0 912D0000 		_ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 295              	// get sign and save it on R: 
 296 24e4 7D210000 	    _ADR    get_sign 
 297 24e8 C9280000 	    _ADR    TOR // -- a 0 a+ cnt R: base sign 
 298              	// check for end of string 
 299 24ec 3D290000 	    _ADR    DUPP 
 300 24f0 752C0000 	    _ADR   ZEQUAL 
 301 24f4 13280000 	    _QBRAN  int_part
 301      04250000 
 302 24fc 27280000 	    _BRAN  error1
 302      E8250000 
ARM GAS  forth.s 			page 92


 303              	int_part: // parse integer part. 
 304 2504 D5210000 	    _ADR   parse_int // -- a 0 a+ cnt- fi R: base sign 
 305 2508 C9280000 	    _ADR   TOR    // -- a 0 a+ cnt- R: base sign fi 
 306              	// check for end of string 
 307 250c 3D290000 	    _ADR   DUPP 
 308 2510 752C0000 	    _ADR   ZEQUAL  
 309 2514 13280000 	    _QBRAN  dot_or_e 
 309      24250000 
 310 251c 27280000 	    _BRAN  not_float  // if end of string it's not a float, missing '.' or 'E'.  
 310      E0250000 
 311              	dot_or_e: // next character must be '.' or 'E'   
 312 2524 61290000 	    _ADR   OVER 
 313 2528 79280000 	    _ADR   CAT 
 314 252c 3D290000 	    _ADR   DUPP 
 315 2530 D3270000 	    _DOLIT '.' 
 315      2E000000 
 316 2538 892C0000 	    _ADR  EQUAL 
 317 253c 13280000 	    _QBRAN test_E // not '.' 
 317      74250000 
 318              	// skip decimal point 
 319 2544 2D290000 	    _ADR  DROP // drop character  
 320 2548 91240000 	    _ADR  padv  
 321 254c 4D220000 	    _ADR  parse_frac
 322 2550 85280000 	    _ADR  RFROM 
 323 2554 851E0000 	    _ADR  FPLUS // int_part+frac_part  
 324 2558 C9280000 	    _ADR  TOR 
 325              	// check of end of string     
 326 255c 3D290000 	    _ADR  DUPP  // a 0 a+ cnt- cnt-  
 327 2560 752C0000 	    _ADR  ZEQUAL 
 328 2564 13280000 	    _QBRAN test_E  // next char must be 'E' 
 328      74250000 
 329              	// end of float 
 330 256c 27280000 	    _BRAN is_float 
 330      AC250000 
 331              	test_E: 
 332 2574 D3270000 	    _DOLIT 'E' 
 332      45000000 
 333 257c 892C0000 	    _ADR  EQUAL 
 334 2580 13280000 	    _QBRAN not_float  
 334      E0250000 
 335 2588 91240000 	    _ADR padv 
 336 258c E5220000 	    _ADR parse_exp
 337 2590 C9280000 	    _ADR TOR 
 338 2594 3D290000 	    _ADR DUPP 
 339 2598 892C0000 	    _ADR EQUAL 
 340 259c 13280000 	    _QBRAN not_float // character left in string. 
 340      E0250000 
 341 25a4 85280000 	    _ADR RFROM  
 342              	exp_to_bin: // convert decimal exponent to binary exponent  
 343 25a8 B9230000 	    _ADR mult_div_exp 
 344              	is_float: // a 0 a+ cnt- R: base float  
 345 25ac 4D2B0000 	    _ADR DDROP 
 346 25b0 4D2B0000 	    _ADR DDROP 
 347 25b4 85280000 	    _ADR RFROM  // float  
 348 25b8 85280000 	    _ADR RFROM // sign 
 349 25bc 13280000 	    _QBRAN 1f
 349      D0250000 
ARM GAS  forth.s 			page 93


 350 25c4 D3270000 	    _DOLIT fminus1  
 350      000080BF 
 351 25cc C51E0000 	    _ADR FSTAR 
 352 25d0 D3270000 	1:  _DOLIT 2  // flag indicating a float 
 352      02000000 
 353 25d8 27280000 	    _BRAN restore_base 
 353      F4250000 
 354              	not_float: // a 0 a+ cnt- R: base sign float 
 355 25e0 85280000 	    _ADR RFROM 
 356 25e4 2D290000 	    _ADR DROP  
 357              	error1:
 358 25e8 85280000 	    _ADR RFROM 
 359 25ec 2D290000 	    _ADR DROP 
 360 25f0 4D2B0000 	    _ADR DDROP 
 361              	restore_base: 
 362 25f4 85280000 	    _ADR RFROM 
 363 25f8 2D2E0000 	    _ADR BASE 
 364 25fc 45280000 	    _ADR STORE 
 365 2600 13260000 	    _UNNEST 
 366              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
ARM GAS  forth.s 			page 94


  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2604 48F804CD 		STMFD	RSP!,{IP}
  85 2608 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 260c 5CF8045B 		LDR WP,[IP],#4 
  89 2610 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2612 58F804CB 		LDMFD RSP!,{IP}
  92 2616 5CF8045B 		LDR WP,[IP],#4 
  93 261a 2847     		BX WP  
  94              	
ARM GAS  forth.s 			page 95


  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 261c 04F14401 		add T1,UP,#USER_CTOP 
 105 2620 0968     		ldr T1,[T1]
 106 2622 44F25072 		mov T2,#0x4700+(10<<3)
 107 2626 21F8022B 		strh T2,[T1],#2
 108 262a 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 262e 21F8022B 		strh T2,[T1],#2 
 110 2632 04F14402 		add T2,UP,#USER_CTOP 
 111 2636 1160     		str T1,[T2]
 112 2638 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 263a 47F8046D 		_PUSH 
 118 263e 04F11406 		ADD TOS,UP,#STDIN 
 119 2642 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2644 47F8046D 		_PUSH 
 125 2648 04F11806 		ADD TOS,UP,#STDOUT
 126 264c DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 264e AC240000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 265c 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2664 47F8046D 	    _PUSH 
 135 2668 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 266a 81EA0101 	    eor T1,T1 
 137 266e 8162     	    str T1,[T0,#SCB_CFSR]
 138 2670 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2672 52260000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
ARM GAS  forth.s 			page 96


 145 2680 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2688 47F8046D 		_PUSH 
 147 268c 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 268e 81EA0101 	    eor T1,T1 
 149 2692 8163     	    str T1,[T0,#SCB_BFAR]
 150 2694 BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 2696 76260000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 26a0 504700BF 		_NEST 
 158 26a4 3B260000 		_ADR TSTDIN // ' STDIN 
 159 26a8 F9320000 		_ADR ATEXE
 160 26ac 13260000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 26b0 9A260000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 26b8 504700BF 		_NEST
 168              	KEY1:
 169 26bc D1180000 		_ADR CAPS_LED 
 170 26c0 A1260000 		_ADR	QKEY 
 171 26c4 13280000 		_QBRAN	KEY1
 171      BC260000 
 172 26cc 13260000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 26d0 B4260000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 26dc 504700BF 		_NEST 
 180 26e0 45260000 		_ADR TSTDOUT 
 181 26e4 F9320000 		_ADR ATEXE 
 182 26e8 13260000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
ARM GAS  forth.s 			page 97


 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 26ec D4260000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 26f8 504700BF 		_NEST
 216 26fc 312C0000 		_ADR ABSS   
 217 2700 D92D0000 		_ADR SEED 
 218 2704 59280000 		_ADR AT 
 219 2708 3D290000 		_ADR DUPP 
 220 270c D3270000 		_DOLIT 13
 220      0D000000 
 221 2714 F1290000 		_ADR LSHIFT 
 222 2718 A9290000 		_ADR XORR  
 223 271c 3D290000 		_ADR DUPP 
 224 2720 D3270000 		_DOLIT 17 
 224      11000000 
 225 2728 D9290000 		_ADR RSHIFT 
 226 272c A9290000 		_ADR XORR 
 227 2730 3D290000 		_ADR DUPP
 228 2734 D3270000 		_DOLIT 5 
 228      05000000 
 229 273c F1290000 		_ADR LSHIFT 
 230 2740 A9290000 		_ADR XORR  
 231 2744 3D290000 		_ADR DUPP 
 232 2748 D92D0000 		_ADR SEED 
 233 274c 45280000 		_ADR STORE 
 234 2750 D3270000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2758 81290000 		_ADR ANDD 
 236 275c 4D290000 		_ADR SWAP 
 237 2760 7D310000 		_ADR MODD 
 238 2764 13260000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2768 F0260000 		_HEADER PAUSE,5,"PAUSE"
ARM GAS  forth.s 			page 98


 245      05504155 
 245      534500BF 
 246 2774 504700BF 		_NEST 
 247 2778 012E0000 		_ADR TIMER 
 248 277c 45280000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2780 012E0000 		_ADR TIMER 
 251 2784 59280000 		_ADR AT 
 252 2788 13280000 		_QBRAN PAUSE_EXIT 
 252      98270000 
 253 2790 27280000 		_BRAN PAUSE_LOOP 
 253      80270000 
 254              	PAUSE_EXIT: 		
 255 2798 13260000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 279c 6C270000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 27a8 4FF40050 		mov T0,#(1<<LED_PIN)
 263 27ac 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 27b4 3600     		movs TOS,TOS 
 265 27b6 57F8046B 		_POP
 266 27ba 03D0     		beq ULED_OFF
 267 27bc 4FEA0040 		lsl T0,#16 
 268 27c0 8861     		str T0,[T1,#GPIO_BSRR]
 269 27c2 23E7     		_NEXT 
 270              	ULED_OFF:
 271 27c4 8861     		str T0,[T1,#GPIO_BSRR]
 272 27c6 21E7     		_NEXT    
 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 27c8 A0270000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 27d0 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 27d2 47F8046D 		_PUSH				//  store TOS on data stack
 294 27d6 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
ARM GAS  forth.s 			page 99


 295 27da 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 27dc CC270000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 27e8 46F00105 		ORR	WP,TOS,#1 
 303 27ec 57F8046B 		_POP
 304 27f0 2847     		BX WP 
 305 27f2 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 27f4 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 27f8 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 27fa 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 27fe 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 2802 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 2804 A2F10102 		SUB	T2,T2,#1
 324 2808 C8F80020 		STR	T2,[RSP]
 325 280c DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 2810 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 2812 3600     		MOVS	TOS,TOS
 335 2814 57F8046B 		_POP
 336 2818 02D1     		BNE	QBRAN1
 337 281a DCF800C0 		LDR	IP,[IP]
 338 281e F5E6     		_NEXT
 339              	QBRAN1:
 340 2820 0CF1040C 	 	ADD	IP,IP,#4
 341 2824 F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 2826 DCF800C0 		LDR	IP,[IP]
ARM GAS  forth.s 			page 100


 350 282a EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 282c E0270000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 2838 13260000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 283c 30280000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 2844 57F8045B 		LDR	WP,[DSP],#4
 365 2848 3560     		STR	WP,[TOS]
 366 284a 57F8046B 		_POP
 367 284e DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2850 40280000 		_HEADER AT,1,"@"
 373      014000BF 
 374 2858 3668     		LDR	TOS,[TOS]
 375 285a D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 285c 54280000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 2864 57F8045B 		LDR	WP,[DSP],#4
 383 2868 3570     		STRB WP,[TOS]
 384 286a 57F8046B 		_POP
 385 286e CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2870 60280000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 2878 3678     		LDRB	TOS,[TOS]
 393 287a C7E6     		_NEXT 
 394              	
 395              	/*********************************************
 396              	    R>	  ( -- w  R: w -- ) 
 397              	 	push from rstack.
 398              	**********************************************/
 399 287c 74280000 		_HEADER RFROM,2,"R>"
 399      02523E00 
ARM GAS  forth.s 			page 101


 400 2884 47F8046D 		_PUSH
 401 2888 58F8046B 		LDR	TOS,[RSP],#4
 402 288c BEE6     		_NEXT 
 403              	
 404              	/***********************************************
 405              		2R> (  -- D ) R: D --  
 406              	    push a double from rstack 
 407              	***********************************************/
 408 288e 80280000 		_HEADER DRFROM,3,"2R>"
 408      0332523E 
 408      00BF
 409 2898 47F8046D 		_PUSH 
 410 289c 58F8046B 		LDR TOS,[RSP],#4 
 411 28a0 47F8046D 		_PUSH 
 412 28a4 58F8046B 		LDR TOS,[RSP],#4
 413 28a8 B0E6     		_NEXT 
 414              	
 415              	/************************************************
 416              	    R@	  ( -- w )
 417              	 	Copy top of return stack to the data stack.
 418              	************************************************/
 419 28aa 92280000 		_HEADER RAT,2,"R@"
 419      02524000 
 419      00BF
 420 28b4 47F8046D 		_PUSH
 421 28b8 D8F80060 		LDR	TOS,[RSP]
 422 28bc A6E6     		_NEXT 
 423              	
 424              	/***********************************************
 425              	    >R	  ( w -- ) R: -- w 
 426              	 	pop to rstack.
 427              	************************************************/
 428 28be AE280000 		_HEADER TOR,2,">R"
 428      023E5200 
 428      00BF
 429 28c8 48F8046D 		STR	TOS,[RSP,#-4]!
 430 28cc 57F8046B 		_POP
 431 28d0 9CE6     		_NEXT
 432              	
 433              	/*********************************************
 434              		2>R ( d -- ) R: -- d 
 435              		pop a double to rstack 
 436              	*********************************************/
 437 28d2 C2280000 		_HEADER DTOR,3,"2>R"
 437      03323E52 
 437      00BF
 438 28dc 48F8046D 		STR TOS,[RSP,#-4]!
 439 28e0 57F8046B 	    _POP 
 440 28e4 48F8046D 		STR TOS,[RSP,#-4]!
 441 28e8 57F8046B 		_POP  
 442 28ec 8EE6     		_NEXT 	
 443              	
 444              	
 445              	/*******************************
 446              	//	RP! ( u -- )
 447              	// initialize RPP with u 
 448              	*******************************/
ARM GAS  forth.s 			page 102


 449 28ee D6280000 		_HEADER RPSTOR,3,"RP!"
 449      03525021 
 449      00BF
 450 28f8 B046     		MOV RSP,TOS 
 451 28fa 57F8046B 		_POP  
 452 28fe 85E6     		_NEXT 
 453              	
 454              	/********************************
 455              		SP! ( u -- )
 456              	 initialize SPP with u 
 457              	********************************/
 458 2900 F2280000 		_HEADER SPSTOR,3,"SP!"
 458      03535021 
 459 2908 3746     		MOV DSP,TOS 
 460 290a 86EA0606 		EOR TOS,TOS,TOS 
 461 290e 7DE6     		_NEXT 
 462              	
 463              	/**************************************
 464              	    SP@	 ( -- a )
 465              	 	Push the current data stack pointer.
 466              	***************************************/
 467 2910 04290000 		_HEADER SPAT,3,"SP@"
 467      03535040 
 468 2918 47F8046D 		_PUSH
 469 291c 3E46     		MOV	TOS,DSP
 470 291e 75E6     		_NEXT
 471              	
 472              	/********************************
 473              	    DROP	( w -- )
 474              	 	Discard top stack item.
 475              	********************************/
 476 2920 14290000 		_HEADER DROP,4,"DROP"
 476      0444524F 
 476      500000BF 
 477 292c 57F8046B 		_POP
 478 2930 6CE6     		_NEXT 
 479              	
 480              	/*********************************
 481              	    DUP	 ( w -- w w )
 482              	 	Duplicate the top stack item.
 483              	*********************************/
 484 2932 24290000 		_HEADER DUPP,3,"DUP"
 484      03445550 
 484      00BF
 485 293c 47F8046D 		_PUSH
 486 2940 64E6     		_NEXT 
 487              	
 488              	/**********************************
 489              	    SWAP	( w1 w2 -- w2 w1 )
 490              	 	Exchange top two stack items.
 491              	**********************************/
 492 2942 36290000 		_HEADER SWAP,4,"SWAP"
 492      04535741 
 492      5000
 493 294c 3D68     		LDR	WP,[DSP]
 494 294e 3E60     		STR	TOS,[DSP]
 495 2950 2E46     		MOV	TOS,WP
ARM GAS  forth.s 			page 103


 496 2952 5BE6     		_NEXT 
 497              	
 498              	/***********************************
 499              	    OVER	( w1 w2 -- w1 w2 w1 )
 500              	 	Copy second stack item to top.
 501              	***********************************/
 502 2954 46290000 		_HEADER OVER,4,"OVER"
 502      044F5645 
 502      520000BF 
 503 2960 47F8046D 		_PUSH
 504 2964 7E68     		LDR	TOS,[DSP,#4]
 505 2966 51E6     		_NEXT 
 506              	
 507              	/***********************************
 508              	    0<	  ( n -- t )
 509              	 	Return true if n is negative.
 510              	***********************************/
 511 2968 58290000 		_HEADER ZLESS,2,"0<"
 511      02303C00 
 512 2970 4FEAE676 		ASR TOS,#31
 513 2974 4AE6     		_NEXT 
 514              	
 515              	/********************************
 516              	    AND	 ( w w -- w )
 517              	 	Bitwise AND.
 518              	********************************/
 519 2976 6C290000 		_HEADER ANDD,3,"AND"
 519      03414E44 
 519      00BF
 520 2980 57F8045B 		LDR	WP,[DSP],#4
 521 2984 06EA0506 		AND	TOS,TOS,WP
 522 2988 40E6     		_NEXT 
 523              	
 524              	/******************************
 525              	    OR	  ( w w -- w )
 526              	 	Bitwise inclusive OR.
 527              	******************************/
 528 298a 7A290000 		_HEADER ORR,2,"OR"
 528      024F5200 
 528      00BF
 529 2994 57F8045B 		LDR	WP,[DSP],#4
 530 2998 46EA0506 		ORR	TOS,TOS,WP
 531 299c 36E6     		_NEXT 
 532              	
 533              	/*****************************
 534              	    XOR	 ( w w -- w )
 535              	 	Bitwise exclusive OR.
 536              	*****************************/
 537 299e 8E290000 		_HEADER XORR,3,"XOR"
 537      03584F52 
 537      00BF
 538 29a8 57F8045B 		LDR	WP,[DSP],#4
 539 29ac 86EA0506 		EOR	TOS,TOS,WP
 540 29b0 2CE6     		_NEXT 
 541              	
 542              	/**************************************************
 543              	    UM+	 ( w w -- w cy )
ARM GAS  forth.s 			page 104


 544              	 	Add two numbers, return the sum and carry flag.
 545              	***************************************************/
 546 29b2 A2290000 		_HEADER UPLUS,3,"UM+"
 546      03554D2B 
 546      00BF
 547 29bc 3D68     		LDR	WP,[DSP]
 548 29be AD19     		ADDS	WP,WP,TOS
 549 29c0 4FF00006 		MOV	TOS,#0
 550 29c4 46F10006 		ADC	TOS,TOS,#0
 551 29c8 3D60     		STR	WP,[DSP]
 552 29ca 1FE6     		_NEXT 
 553              	
 554              	/*********************************
 555              	    RSHIFT	 ( w # -- w )
 556              	 	arithmetic Right shift # bits.
 557              	**********************************/
 558 29cc B6290000 		_HEADER RSHIFT,6,"RSHIFT"
 558      06525348 
 558      49465400 
 559 29d8 57F8045B 		LDR	WP,[DSP],#4
 560 29dc 45FA06F6 		MOV	TOS,WP,ASR TOS
 561 29e0 14E6     		_NEXT 
 562              	
 563              	/****************************
 564              	    LSHIFT	 ( w # -- w )
 565              	 	Right shift # bits.
 566              	****************************/
 567 29e2 D0290000 		_HEADER LSHIFT,6,"LSHIFT"
 567      064C5348 
 567      49465400 
 567      00BF
 568 29f0 57F8045B 		LDR	WP,[DSP],#4
 569 29f4 05FA06F6 		MOV	TOS,WP,LSL TOS
 570 29f8 08E6     		_NEXT
 571              	
 572              	/*************************
 573              	    +	 ( w w -- w )
 574              	 	Add.
 575              	*************************/
 576 29fa E6290000 		_HEADER PLUS,1,"+"
 576      012B
 577 2a00 57F8045B 		LDR	WP,[DSP],#4
 578 2a04 2E44     		ADD	TOS,TOS,WP
 579 2a06 01E6     		_NEXT 
 580              	
 581              	/************************
 582              	    -	 ( w w -- w )
 583              	 	Subtract.
 584              	************************/
 585 2a08 FE290000 		_HEADER SUBB,1,"-"
 585      012D00BF 
 586 2a10 57F8045B 		LDR	WP,[DSP],#4
 587 2a14 C6EB0506 		RSB	TOS,TOS,WP
 588 2a18 F8E5     		_NEXT 
 589              	
 590              	/************************
 591              	    *	 ( w w -- w )
ARM GAS  forth.s 			page 105


 592              	 	Multiply.
 593              	***********************/
 594 2a1a 0C2A0000 		_HEADER STAR,1,"*"
 594      012A
 595 2a20 57F8045B 		LDR	WP,[DSP],#4
 596 2a24 05FB06F6 		MUL	TOS,WP,TOS
 597 2a28 F0E5     		_NEXT 
 598              	
 599              	/***************************
 600              	    UM*	 ( w w -- ud )
 601              	 	Unsigned multiply.
 602              	****************************/
 603 2a2a 1E2A0000 		_HEADER UMSTA,3,"UM*"
 603      03554D2A 
 603      00BF
 604 2a34 3D68     		LDR	WP,[DSP]
 605 2a36 A6FB0523 		UMULL	T2,T3,TOS,WP
 606 2a3a 3A60     		STR	T2,[DSP]
 607 2a3c 1E46     		MOV	TOS,T3
 608 2a3e E5E5     		_NEXT 
 609              	
 610              	/***************************
 611              	    M*	 ( w w -- d )
 612              	 	signed multiply.
 613              		hold double result
 614              	***************************/
 615 2a40 2E2A0000 		_HEADER MSTAR,2,"M*"
 615      024D2A00 
 616 2a48 3D68     		LDR	WP,[DSP]
 617 2a4a 86FB0523 		SMULL	T2,T3,TOS,WP
 618 2a4e 3A60     		STR	T2,[DSP]
 619 2a50 1E46     		MOV	TOS,T3
 620 2a52 DBE5     		_NEXT 
 621              	
 622              	/***************************
 623              	    1+	 ( w -- w+1 )
 624              	 	Add 1.
 625              	***************************/
 626 2a54 442A0000 		_HEADER ONEP,2,"1+"
 626      02312B00 
 627 2a5c 06F10106 		ADD	TOS,TOS,#1
 628 2a60 D4E5     		_NEXT 
 629              	
 630              	/***************************
 631              	    1-	 ( w -- w-1 )
 632              	 	Subtract 1.
 633              	***************************/
 634 2a62 582A0000 		_HEADER ONEM,2,"1-"
 634      02312D00 
 634      00BF
 635 2a6c A6F10106 		SUB	TOS,TOS,#1
 636 2a70 CCE5     		_NEXT 
 637              	
 638              	/***************************
 639              	    2+	 ( w -- w+2 )
 640              	 	Add 2.
 641              	**************************/
ARM GAS  forth.s 			page 106


 642 2a72 662A0000 		_HEADER TWOP,2,"2+"
 642      02322B00 
 642      00BF
 643 2a7c 06F10206 		ADD	TOS,TOS,#2
 644 2a80 C4E5     		_NEXT
 645              	
 646              	/**************************
 647              	    2-	 ( w -- w-2 )
 648              	 	Subtract 2.
 649              	**************************/
 650 2a82 762A0000 		_HEADER TWOM,2,"2-"
 650      02322D00 
 650      00BF
 651 2a8c A6F10206 		SUB	TOS,TOS,#2
 652 2a90 BCE5     		_NEXT
 653              	
 654              	/***************************
 655              	    CELL+	( w -- w+4 )
 656              	 	Add CELLL.
 657              	***************************/
 658 2a92 862A0000 		_HEADER CELLP,5,"CELL+"
 658      0543454C 
 658      4C2B
 659 2a9c 06F10406 		ADD	TOS,TOS,#CELLL
 660 2aa0 B4E5     		_NEXT
 661              	
 662              	/***************************
 663              	    CELL-	( w -- w-4 )
 664              	 	Subtract CELLL.
 665              	**************************/
 666 2aa2 962A0000 		_HEADER CELLM,5,"CELL-"
 666      0543454C 
 666      4C2D
 667 2aac A6F10406 		SUB	TOS,TOS,#CELLL
 668 2ab0 ACE5     		_NEXT
 669              	
 670              	/**************************** 
 671              	    BL	( -- 32 )
 672              	 	Blank (ASCII space).
 673              	*****************************/
 674 2ab2 A62A0000 		_HEADER BLANK,2,"BL"
 674      02424C00 
 674      00BF
 675 2abc 47F8046D 		_PUSH
 676 2ac0 4FF02006 		MOV	TOS,#32
 677 2ac4 A2E5     		_NEXT 
 678              	
 679              	/**************************
 680              	    CELLS	( w -- w*4 )
 681              	 	Multiply CELLL 
 682              	***************************/
 683 2ac6 B62A0000 		_HEADER CELLS,5,"CELLS"
 683      0543454C 
 683      4C53
 684 2ad0 4FEA8606 		LSL TOS,#2
 685 2ad4 9AE5     		_NEXT
 686              	
ARM GAS  forth.s 			page 107


 687              	/***************************
 688              	    CELL/	( w -- w/4 )
 689              	 	Divide by CELLL.
 690              	***************************/
 691 2ad6 CA2A0000 		_HEADER CELLSL,5,"CELL/"
 691      0543454C 
 691      4C2F
 692 2ae0 4FEAA606 		ASR TOS,#2
 693 2ae4 92E5     		_NEXT
 694              	
 695              	/*************************
 696              	    2*	( w -- w*2 )
 697              	 	Multiply 2.
 698              	*************************/
 699 2ae6 DA2A0000 		_HEADER TWOST,2,"2*"
 699      02322A00 
 699      00BF
 700 2af0 4FEA4606 		MOV	TOS,TOS,LSL#1
 701 2af4 8AE5     		_NEXT
 702              	
 703              	/*************************
 704              	    2/	( w -- w/2 )
 705              	 	Divide by 2.
 706              	***********************/
 707 2af6 EA2A0000 		_HEADER TWOSL,2,"2/"
 707      02322F00 
 707      00BF
 708 2b00 4FEA6606 		MOV	TOS,TOS,ASR#1
 709 2b04 82E5     		_NEXT
 710              	
 711              	/****************************
 712              	    ?DUP	( w -- w w | 0 )
 713              	 	Conditional duplicate.
 714              	*****************************/
 715 2b06 FA2A0000 		_HEADER QDUP,4,"?DUP"
 715      043F4455 
 715      5000
 716 2b10 3500     		MOVS	WP,TOS
 717 2b12 18BF     		IT NE 
 718 2b14 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 719 2b18 78E5     		_NEXT
 720              	
 721              	/***********************************
 722              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 723              	 	Rotate top 3 items.
 724              	*************************************/
 725 2b1a 0A2B0000 		_HEADER ROT,3,"ROT"
 725      03524F54 
 725      00BF
 726 2b24 3868     		LDR	T0,[DSP]  // w2 
 727 2b26 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 728 2b28 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 729 2b2a 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 730 2b2c 6EE5     		_NEXT
 731              	
 732              	/*********************************
 733              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
ARM GAS  forth.s 			page 108


 734              	 left rotate top 3 elements 
 735              	********************************/
 736 2b2e 1E2B0000 		_HEADER NROT,4,"-ROT"
 736      042D524F 
 736      5400
 737 2b38 7868     		LDR T0,[DSP,#4]
 738 2b3a 7E60     		STR TOS,[DSP,#4]	
 739 2b3c 3E68     		LDR TOS,[DSP]
 740 2b3e 3860     		STR T0,[DSP]
 741 2b40 64E5     		_NEXT 
 742              	
 743              	/*********************************
 744              	    2DROP	( w1 w2 -- )
 745              	 	Drop top 2 items.
 746              	*********************************/
 747 2b42 322B0000 		_HEADER DDROP,5,"2DROP"
 747      05324452 
 747      4F50
 748 2b4c 57F8046B 		_POP
 749 2b50 57F8046B 		_POP
 750 2b54 5AE5     		_NEXT 
 751              	
 752              	/********************************
 753              		3DROP ( w1 w2 w3 -- )
 754              		drop top 3 items 
 755              	********************************/
 756 2b56 462B0000 		_HEADER TDROP,5,"3DROP"
 756      05334452 
 756      4F50
 757 2b60 07F10807 	    add DSP,#8 
 758 2b64 57F8046B 	    _POP 
 759 2b68 50E5     	    _NEXT 
 760              	
 761              	/***********************************
 762              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 763              	 	Duplicate top 2 items.
 764              	************************************/
 765 2b6a 5A2B0000 		_HEADER DDUP,4,"2DUP"
 765      04324455 
 765      5000
 766 2b74 3868     		LDR	T0,[DSP] // w1
 767 2b76 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 768 2b7a 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 769 2b7e 45E5     		_NEXT
 770              	
 771              	/******************************
 772              	    D+	( d1 d2 -- d3 )
 773              	 	Add top 2 double numbers.
 774              	******************************/
 775 2b80 6E2B0000 		_HEADER DPLUS,2,"D+"
 775      02442B00 
 776 2b88 57F8045B 		LDR	WP,[DSP],#4
 777 2b8c 57F8042B 		LDR	T2,[DSP],#4
 778 2b90 3B68     		LDR	T3,[DSP]
 779 2b92 ED18     		ADDS	WP,WP,T3
 780 2b94 3D60     		STR	WP,[DSP]
 781 2b96 46EB0206 		ADC	TOS,TOS,T2
ARM GAS  forth.s 			page 109


 782 2b9a 37E5     		_NEXT
 783              	
 784              	/******************************
 785              		DABS ( d -- ud )
 786              		absolute value double 
 787              	*****************************/
 788 2b9c 842B0000 		_HEADER DABS,4,"DABS"
 788      04444142 
 788      530000BF 
 789 2ba8 16F0004F 		tst TOS,#(1<<31)
 790 2bac 09D0     		beq 9f 
 791 2bae 6FEA0606 		mvn TOS,TOS 
 792 2bb2 3D68     		ldr WP,[DSP]
 793 2bb4 6FEA0505 		mvn WP,WP 
 794 2bb8 0135     		adds WP,#1
 795 2bba 3D60     		str WP,[DSP]
 796 2bbc 01D3     		bcc 9f 
 797 2bbe 06F10106 		add TOS,#1 
 798 2bc2 23E5     	9:	_NEXT 
 799              	
 800              	/*****************************
 801              	  UD> ( d1 d2 -- f )
 802              	  unsigned compare double d1 > d2 
 803              	******************************/
 804 2bc4 A02B0000 		_HEADER UDGREAT,3,"UD>"
 804      0355443E 
 805 2bcc 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 806 2bd0 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 807 2bd2 B042     		cmp T0,TOS 
 808 2bd4 02D8     		bhi 1f
 809 2bd6 04D4     		bmi 2f  
 810 2bd8 A942     		cmp T1,WP 
 811 2bda 02D9     		bls 2f 
 812 2bdc 4FF0FF36 	1:	mov TOS,#-1 
 813 2be0 14E5     		_NEXT 
 814 2be2 4FF00006 	2:  mov TOS,#0 
 815 2be6 11E5     		_NEXT 
 816              	
 817              	/******************************
 818              		D0= ( d -- f )
 819              		double 0= 
 820              	*****************************/
 821 2be8 C82B0000 		_HEADER DZEQUAL,3,"D0="
 821      0344303D 
 822 2bf0 3046     		mov T0,TOS
 823 2bf2 57F8046B 		_POP 
 824 2bf6 46EA0006 		orr TOS,T0 
 825 2bfa 01D0     		beq 9f
 826 2bfc 6FF00006 		mvn TOS,#0 
 827 2c00 04E5     	9:	_NEXT 
 828              	
 829              	/*****************************
 830              	    NOT	 ( w -- !w )
 831              	 	1"s complement.
 832              	*****************************/
 833 2c02 EC2B0000 		_HEADER INVER,3,"NOT"
 833      034E4F54 
ARM GAS  forth.s 			page 110


 833      00BF
 834 2c0c 6FEA0606 		MVN	TOS,TOS
 835 2c10 FCE4     		_NEXT
 836              	
 837              	/*****************************
 838              	    NEGATE	( w -- -w )
 839              	 	2's complement.
 840              	***************************/
 841 2c12 062C0000 		_HEADER NEGAT,6,"NEGATE"
 841      064E4547 
 841      41544500 
 841      00BF
 842 2c20 C6F10006 		RSB	TOS,TOS,#0
 843 2c24 F2E4     		_NEXT
 844              	
 845              	/***************************
 846              	    ABS	 ( w -- |w| )
 847              	 	Absolute.
 848              	**************************/
 849 2c26 162C0000 		_HEADER ABSS,3,"ABS"
 849      03414253 
 849      00BF
 850 2c30 16F0004F 		TST	TOS,#0x80000000
 851 2c34 18BF     		IT NE
 852 2c36 7642     	    RSBNE   TOS,TOS,#0
 853 2c38 E8E4     		_NEXT
 854              	
 855              	/**************************
 856              		CLZ ( n - n )
 857              		count leading zeros 
 858              	**************************/
 859 2c3a 2A2C0000 		_HEADER CLZ,3,"CLZ"
 859      03434C5A 
 859      00BF
 860 2c44 B6FA86F6 		clz TOS,TOS 
 861 2c48 E0E4     		_NEXT 
 862              	
 863              	/*************************
 864              		CTZ ( n -- n )
 865              		count trailing zeros 
 866              	************************/
 867 2c4a 3E2C0000 		_HEADER CTZ,3,"CTZ"
 867      0343545A 
 867      00BF
 868 2c54 80EA0000 		eor T0,T0 
 869 2c58 16F0010F 	1:  tst TOS,#1 
 870 2c5c 04D1     		bne 2f 
 871 2c5e 4FEA5606 		lsr TOS,#1 
 872 2c62 00F10100 		add T0,#1 
 873 2c66 F7E7     		b 1b 
 874 2c68 0646     	2:  mov TOS,T0 
 875 2c6a CFE4     		_NEXT 
 876              	
 877              	
 878              	/*******************
 879              	  0= ( w -- f )
 880              	 TOS==0?
ARM GAS  forth.s 			page 111


 881              	*******************/
 882 2c6c 4E2C0000 		_HEADER ZEQUAL,2,"0="
 882      02303D00 
 883 2c74 16B9     		cbnz TOS,1f
 884 2c76 4FF0FF36 		mov TOS,#-1
 885 2c7a C7E4     		_NEXT 
 886 2c7c 86EA0606 	1:  eor TOS,TOS,TOS  
 887 2c80 C4E4     		_NEXT 	
 888              	
 889              	/*********************
 890              	    =	 ( w w -- t )
 891              	 	Equal?
 892              	*********************/
 893 2c82 702C0000 		_HEADER EQUAL,1,"="
 893      013D
 894 2c88 57F8045B 		LDR	WP,[DSP],#4
 895 2c8c AE42     		CMP	TOS,WP
 896 2c8e 0CBF     		ITE EQ 
 897 2c90 6FF00006 	    MVNEQ	TOS,#0
 898 2c94 0026     		MOVNE	TOS,#0
 899 2c96 B9E4     		_NEXT
 900              	
 901              	/************************
 902              		<> ( w w -- f )
 903              		different?
 904              	************************/
 905 2c98 862C0000 		_HEADER DIFF,2,"<>"
 905      023C3E00 
 906 2ca0 3046     		mov T0,TOS 
 907 2ca2 57F8046B 		_POP 
 908 2ca6 86EA0006 		eor TOS,T0
 909 2caa B6FA86F0 		clz T0,TOS 
 910 2cae 06FA00F6 		lsl TOS,T0 
 911 2cb2 4FEAE676 		asr TOS,#31 
 912 2cb6 A9E4     		_NEXT 
 913              	
 914              	/************************
 915              	    U<	 ( w w -- t )
 916              	 	Unsigned less?
 917              	*************************/
 918 2cb8 9C2C0000 		_HEADER ULESS,2,"U<"
 918      02553C00 
 919 2cc0 57F8045B 		LDR	WP,[DSP],#4
 920 2cc4 B542     		CMP	WP,TOS
 921 2cc6 34BF     		ITE CC 
 922 2cc8 6FF00006 		MVNCC	TOS,#0
 923 2ccc 0026     		MOVCS	TOS,#0
 924 2cce 9DE4     		_NEXT
 925              	
 926              	/**********************
 927              	    <	( w w -- t )
 928              	 	Less?
 929              	**********************/
 930 2cd0 BC2C0000 		_HEADER LESS,1,"<"
 930      013C00BF 
 931 2cd8 57F8045B 		LDR	WP,[DSP],#4
 932 2cdc B542     		CMP	WP,TOS
ARM GAS  forth.s 			page 112


 933 2cde B4BF     	    ITE LT
 934 2ce0 6FF00006 		MVNLT	TOS,#0
 935 2ce4 0026     		MOVGE	TOS,#0
 936 2ce6 91E4     		_NEXT 
 937              	
 938              	/**********************
 939              		U> ( u u -- t|f )
 940              	    unsigned greater 
 941              	**********************/
 942 2ce8 D42C0000 		_HEADER UGREAT,2,"U>"
 942      02553E00 
 943 2cf0 57F8045B 		LDR WP,[DSP],#4 
 944 2cf4 AE42     		CMP TOS,WP 
 945 2cf6 34BF     		ITE CC  
 946 2cf8 6FF00006 		MVNCC TOS,#0 
 947 2cfc 0026     		MOVCS TOS,#0
 948 2cfe 85E4     		_NEXT 
 949              	
 950              	/***********************
 951              	    >	( w w -- t )
 952              	 	greater?
 953              	***********************/
 954 2d00 EC2C0000 		_HEADER GREAT,1,">"
 954      013E00BF 
 955 2d08 57F8045B 		LDR	WP,[DSP],#4
 956 2d0c B542     		CMP	WP,TOS
 957 2d0e CCBF     		ITE GT
 958 2d10 6FF00006 	    MVNGT	TOS,#0
 959 2d14 0026     		MOVLE	TOS,#0
 960 2d16 79E4     		_NEXT
 961              	
 962              	/***************************
 963              	    MAX	 ( w w -- max )
 964              	 	Leave maximum.
 965              	***************************/
 966 2d18 042D0000 		_HEADER MAX,3,"MAX"
 966      034D4158 
 967 2d20 57F8045B 		LDR	WP,[DSP],#4
 968 2d24 B542     		CMP	WP,TOS
 969 2d26 C8BF     		IT GT 
 970 2d28 2E46     		MOVGT	TOS,WP
 971 2d2a 6FE4     		_NEXT 
 972              	
 973              	/**************************
 974              	    MIN	 ( w w -- min )
 975              	 	Leave minimum.
 976              	**************************/
 977 2d2c 1C2D0000 		_HEADER MIN,3,"MIN"
 977      034D494E 
 978 2d34 57F8045B 		LDR	WP,[DSP],#4
 979 2d38 B542     		CMP	WP,TOS
 980 2d3a B8BF     		IT LT
 981 2d3c 2E46     		MOVLT	TOS,WP
 982 2d3e 65E4     		_NEXT
 983              	
 984              	/***********************
 985              	    +!	 ( w a -- )
ARM GAS  forth.s 			page 113


 986              	 	Add to memory.
 987              	***********************/
 988 2d40 302D0000 		_HEADER PSTOR,2,"+!"
 988      022B2100 
 989 2d48 57F8045B 		LDR	WP,[DSP],#4
 990 2d4c 3268     		LDR	T2,[TOS]
 991 2d4e 2A44     		ADD	T2,T2,WP
 992 2d50 3260     		STR	T2,[TOS]
 993 2d52 57F8046B 		_POP
 994 2d56 59E4     		_NEXT
 995              	
 996              	/************************
 997              	    2!	 ( d a -- )
 998              	 	Store double number.
 999              	*************************/
 1000 2d58 442D0000 		_HEADER DSTOR,2,"2!"
 1000      02322100 
 1001 2d60 57F8045B 		LDR	WP,[DSP],#4
 1002 2d64 57F8042B 		LDR	T2,[DSP],#4
 1003 2d68 46F8045B 		STR	WP,[TOS],#4
 1004 2d6c 3260     		STR	T2,[TOS]
 1005 2d6e 57F8046B 		_POP
 1006 2d72 4BE4     		_NEXT
 1007              	
 1008              	/************************
 1009              	    2@	 ( a -- d )
 1010              	 	Fetch double number.
 1011              	************************/
 1012 2d74 5C2D0000 		_HEADER DAT,2,"D@"
 1012      02444000 
 1013 2d7c 7568     		LDR	WP,[TOS,#4]
 1014 2d7e 47F8045D 		STR	WP,[DSP,#-4]!
 1015 2d82 3668     		LDR	TOS,[TOS]
 1016 2d84 42E4     		_NEXT
 1017              	
 1018              	/***************************
 1019              	    COUNT	( b -- b+1 c )
 1020              	 	Fetch length of string.
 1021              	****************************/
 1022 2d86 782D0000 		_HEADER COUNT,5,"COUNT"
 1022      05434F55 
 1022      4E54
 1023 2d90 16F8015B 		LDRB	WP,[TOS],#1
 1024 2d94 47F8046D 		_PUSH
 1025 2d98 2E46     		MOV	TOS,WP
 1026 2d9a 37E4     		_NEXT
 1027              	
 1028              	/******************************
 1029              	    DNEGATE	( d -- -d )
 1030              	 	Negate double number.
 1031              	**************************/
 1032 2d9c 8A2D0000 		_HEADER DNEGA,7,"DNEGATE"
 1032      07444E45 
 1032      47415445 
 1033 2da8 3D68     		LDR	WP,[DSP]
 1034 2daa A2EB0202 		SUB	T2,T2,T2
 1035 2dae 551B     		SUBS WP,T2,WP
ARM GAS  forth.s 			page 114


 1036 2db0 62EB0606 		SBC	TOS,T2,TOS
 1037 2db4 3D60     		STR	WP,[DSP]
 1038 2db6 29E4     		_NEXT
 1039              	
 1040              	/******************************
 1041              	  System and user variables
 1042              	******************************/
 1043              	
 1044              	/*******************************
 1045              	  doVAR	( -- a )
 1046              	  Run time routine for VARIABLE and CREATE.
 1047              	hidden word used by compiler
 1048              	********************************/
 1049              	DOVAR:
 1050 2db8 47F8046D 		_PUSH
 1051 2dbc 6646     		MOV TOS,IP
 1052 2dbe 0CF1040C 		ADD IP,IP,#4 
 1053 2dc2 26E4     		B UNNEST 
 1054              	
 1055              	/**********************************
 1056              	    doCON	( -- a ) 
 1057              	 	Run time routine for CONSTANT.
 1058              	hidden word used by compiler 
 1059              	***********************************/
 1060              	DOCON:
 1061 2dc4 47F8046D 		_PUSH
 1062 2dc8 5CF8046B 		LDR.W TOS,[IP],#4 
 1063 2dcc 21E4     		B UNNEST 
 1064              	
 1065              	/***********************
 1066              	  system variables 
 1067              	***********************/
 1068              	
 1069              	/**************************
 1070              	 SEED ( -- a)
 1071              	 return PRNG seed address 
 1072              	**************************/
 1073 2dce A02D0000 		_HEADER SEED,4,"SEED"
 1073      04534545 
 1073      4400
 1074 2dd8 47F8046D 		_PUSH 
 1075 2ddc 04F10406 		ADD TOS,UP,#RNDSEED
 1076 2de0 14E4     		_NEXT 	
 1077              	
 1078              	/****************************************
 1079              	  MSEC ( -- a)
 1080              	 return address of milliseconds counter
 1081              	****************************************/
 1082 2de2 D22D0000 		_HEADER MSEC,4,"MSEC"
 1082      044D5345 
 1082      4300
 1083 2dec 47F8046D 	    _PUSH
 1084 2df0 04F10806 	    ADD TOS,UP,#TICKS
 1085 2df4 0AE4     	    _NEXT 
 1086              	
 1087              	/*************************
 1088              	 TIMER ( -- a )
ARM GAS  forth.s 			page 115


 1089              	 count down timer 
 1090              	**********************/
 1091 2df6 E62D0000 		_HEADER TIMER,5,"TIMER"
 1091      0554494D 
 1091      4552
 1092 2e00 47F8046D 		 _PUSH 
 1093 2e04 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1094 2e08 00E4     	    _NEXT
 1095              	
 1096              	/*****************************
 1097              	    'BOOT	 ( -- a )
 1098              	 	boot up application vector 
 1099              	*****************************/
 1100 2e0a FA2D0000 		_HEADER TBOOT,5,"'BOOT"
 1100      0527424F 
 1100      4F54
 1101 2e14 47F8046D 		_PUSH
 1102 2e18 04F11006 		ADD	TOS,UP,#BOOT 
 1103 2e1c FFF7F6BB 		_NEXT
 1104              		
 1105              	/********************************************	
 1106              	    BASE	( -- a )
 1107              	 	Storage of the radix base for numeric I/O.
 1108              	**********************************************/
 1109 2e20 0E2E0000 		_HEADER BASE,4,"BASE"
 1109      04424153 
 1109      450000BF 
 1110 2e2c 47F8046D 		_PUSH
 1111 2e30 04F11C06 		ADD	TOS,UP,#NBASE
 1112 2e34 FFF7EABB 		_NEXT
 1113              	
 1114              	/*****************************************************
 1115              	    temp	 ( -- a )
 1116              	 	A temporary storage location used in parse and find.
 1117              	hidden word for internal use
 1118              	********************************************************/
 1119              	TEMP:
 1120 2e38 47F8046D 		_PUSH
 1121 2e3c 04F12006 		ADD	TOS,UP,#TMP
 1122 2e40 FFF7E4BB 		_NEXT
 1123              	
 1124              	/*******************************************
 1125              	    SPAN	( -- a )
 1126              	 	Hold character count received by EXPECT.
 1127              	********************************************/
 1128 2e44 242E0000 		_HEADER SPAN,4,"SPAN"
 1128      04535041 
 1128      4E0000BF 
 1129 2e50 47F8046D 		_PUSH
 1130 2e54 04F12406 		ADD	TOS,UP,#CSPAN
 1131 2e58 FFF7D8BB 		_NEXT
 1132              	
 1133              	/***********************************************************
 1134              	    >IN	 ( -- a )
 1135              	 	Hold the character pointer while parsing input stream.
 1136              	***********************************************************/
 1137 2e5c 482E0000 		_HEADER INN,3,">IN"
ARM GAS  forth.s 			page 116


 1137      033E494E 
 1138 2e64 47F8046D 		_PUSH
 1139 2e68 04F12806 		ADD	TOS,UP,#TOIN
 1140 2e6c FFF7CEBB 		_NEXT
 1141              	
 1142              	/**************************************
 1143              	    #TIB	( -- a )
 1144              	 	Hold the current count and address 
 1145              		of the terminal input buffer.
 1146              	**************************************/
 1147 2e70 602E0000 		_HEADER NTIB,4,"#TIB"
 1147      04235449 
 1147      420000BF 
 1148 2e7c 47F8046D 		_PUSH
 1149 2e80 04F12C06 		ADD	TOS,UP,#NTIBB
 1150 2e84 FFF7C2BB 		_NEXT
 1151              	
 1152              	/******************************
 1153              	    'EVAL	( -- a )
 1154              	 	Execution vector of EVAL.
 1155              	*******************************/
 1156 2e88 742E0000 		_HEADER TEVAL,5,"'EVAL"
 1156      05274556 
 1156      414C00BF 
 1157 2e94 47F8046D 		_PUSH
 1158 2e98 04F13406 		ADD	TOS,UP,#EVAL
 1159 2e9c FFF7B6BB 		_NEXT
 1160              	
 1161              	/*********************************
 1162              	    HLD	 ( -- a )
 1163              	 	Hold a pointer in building a 
 1164              		numeric output string.
 1165              	*********************************/
 1166 2ea0 8C2E0000 		_HEADER HLD,3,"HLD"
 1166      03484C44 
 1167 2ea8 47F8046D 		_PUSH
 1168 2eac 04F13806 		ADD	TOS,UP,#VHOLD
 1169 2eb0 FFF7ACBB 		_NEXT
 1170              	
 1171              	/**********************************
 1172              	    CONTEXT	( -- a )
 1173              	 	A area to specify vocabulary 
 1174              		search order.
 1175              	**********************************/
 1176 2eb4 A42E0000 		_HEADER CNTXT,7,"CONTEXT"
 1176      07434F4E 
 1176      54455854 
 1177              	CRRNT:
 1178 2ec0 47F8046D 		_PUSH
 1179 2ec4 04F13C06 		ADD	TOS,UP,#CTXT
 1180 2ec8 FFF7A0BB 		_NEXT
 1181              	
 1182              	/******************************
 1183              	    CP	( -- a )
 1184              	 	Point to top name in RAM 
 1185              		vocabulary.
 1186              	******************************/
ARM GAS  forth.s 			page 117


 1187 2ecc B82E0000 		_HEADER CPP,2,"CP"
 1187      02435000 
 1188 2ed4 47F8046D 		_PUSH
 1189 2ed8 04F14406 		ADD	TOS,UP,#USER_CTOP
 1190 2edc FFF796BB 		_NEXT
 1191              	
 1192              	/****************************
 1193              	   FCP ( -- a )
 1194              	  Point ot top of Forth 
 1195              	  system dictionary
 1196              	****************************/
 1197 2ee0 D02E0000 		_HEADER FCP,3,"FCP"
 1197      03464350 
 1198 2ee8 47F8046D 		_PUSH 
 1199 2eec 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1200 2ef0 FFF78CBB 		_NEXT 
 1201              	
 1202              	/***************************
 1203              	    LAST	( -- a )
 1204              	 	Point to the last name 
 1205              		in the name dictionary.
 1206              	***************************/
 1207 2ef4 E42E0000 		_HEADER LAST,4,"LAST"
 1207      044C4153 
 1207      540000BF 
 1208 2f00 47F8046D 		_PUSH
 1209 2f04 04F14806 		ADD	TOS,UP,#LASTN
 1210 2f08 FFF780BB 		_NEXT
 1211              	
 1212              	
 1213              	/***********************
 1214              		system constants 
 1215              	***********************/
 1216              	
 1217              	/********************************
 1218              		USER-BEGIN ( -- a )
 1219              	  where user area begin in RAM
 1220              	********************************/
 1221 2f0c F82E0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1221      0A555345 
 1221      522D4245 
 1221      47494E00 
 1222 2f1c 47F8046D 		_PUSH 
 1223 2f20 DFF80460 		ldr TOS,USR_BGN_ADR 
 1224 2f24 FFF772BB 		_NEXT 
 1225              	USR_BGN_ADR:
 1226 2f28 12050020 	.word  DTOP 
 1227              	
 1228              	/*********************************
 1229              	  USER_END ( -- a )
 1230              	  where user area end in RAM 
 1231              	******************************/
 1232 2f2c 102F0000 		_HEADER USER_END,8,"USER-END"
 1232      08555345 
 1232      522D454E 
 1232      440000BF 
 1233 2f3c 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 118


 1234 2f40 DFF80460 		ldr TOS,USER_END_ADR 
 1235 2f44 FFF762BB 		_NEXT 
 1236              	USER_END_ADR:
 1237 2f48 7C800120 		.word DEND 
 1238              	
 1239              	
 1240              	/* *********************
 1241              	  Common functions
 1242              	***********************/
 1243              	
 1244              	/********************************
 1245              	    WITHIN	( u ul uh -- t )
 1246              	 	Return true if u is within 
 1247              		the range of ul and uh.
 1248              	********************************/
 1249 2f4c 302F0000 		_HEADER WITHI,6,"WITHIN"
 1249      06574954 
 1249      48494E00 
 1250 2f58 504700BF 		_NEST
 1251 2f5c 61290000 		_ADR	OVER
 1252 2f60 112A0000 		_ADR	SUBB
 1253 2f64 C9280000 		_ADR	TOR
 1254 2f68 112A0000 		_ADR	SUBB
 1255 2f6c 85280000 		_ADR	RFROM
 1256 2f70 C12C0000 		_ADR	ULESS
 1257 2f74 13260000 		_UNNEST
 1258              	
 1259              	//  Divide
 1260              	
 1261              	/*************************************
 1262              	    UM/MOD	( udl udh u -- ur uq )
 1263              	 	Unsigned divide of a double by a 
 1264              		single. Return mod and quotient.
 1265              	**************************************/
 1266 2f78 502F0000 		_HEADER UMMOD,6,"UM/MOD"
 1266      06554D2F 
 1266      4D4F4400 
 1267 2f84 4FF00103 		MOV	T3,#1
 1268 2f88 57F8045B 		LDR	WP,[DSP],#4
 1269 2f8c 3A68     		LDR	T2,[DSP]
 1270              	UMMOD0:
 1271 2f8e 9218     		ADDS	T2,T2,T2
 1272 2f90 6D41     		ADCS	WP,WP,WP
 1273 2f92 04D3     		BCC	UMMOD1
 1274 2f94 A5EB0605 		SUB	WP,WP,TOS
 1275 2f98 02F10102 		ADD	T2,T2,#1
 1276 2f9c 04E0     		B UMMOD2
 1277              	UMMOD1:
 1278 2f9e AD1B     		SUBS	WP,WP,TOS 
 1279 2fa0 28BF     		IT CS 
 1280 2fa2 0132     		ADDCS	T2,T2,#1
 1281 2fa4 00D2     		BCS	UMMOD2
 1282 2fa6 3544     		ADD	WP,WP,TOS
 1283              	UMMOD2:
 1284 2fa8 DB18     		ADDS	T3,T3,T3
 1285 2faa F0D3     		BCC	UMMOD0
 1286 2fac 1646     		MOV	TOS,T2
ARM GAS  forth.s 			page 119


 1287 2fae 3D60     		STR	WP,[DSP]
 1288 2fb0 FFF72CBB 		_NEXT
 1289              	
 1290              	/****************************
 1291              	    M/MOD	( d n -- r q )
 1292              	 	Signed floored divide 
 1293              		of double by single. 
 1294              		Return mod and quotient.
 1295              	****************************/
 1296 2fb4 7C2F0000 		_HEADER MSMOD,5,"M/MOD"
 1296      054D2F4D 
 1296      4F4400BF 
 1297 2fc0 504700BF 		_NEST
 1298 2fc4 3D290000 		_ADR	DUPP
 1299 2fc8 71290000 		_ADR	ZLESS
 1300 2fcc 3D290000 		_ADR	DUPP
 1301 2fd0 C9280000 		_ADR	TOR
 1302 2fd4 13280000 		_QBRAN MMOD1
 1302      EC2F0000 
 1303 2fdc 212C0000 		_ADR	NEGAT
 1304 2fe0 C9280000 		_ADR	TOR
 1305 2fe4 A92D0000 		_ADR	DNEGA
 1306 2fe8 85280000 		_ADR	RFROM
 1307              	MMOD1:
 1308 2fec C9280000 		_ADR	TOR
 1309 2ff0 3D290000 		_ADR	DUPP
 1310 2ff4 71290000 		_ADR	ZLESS
 1311 2ff8 13280000 		_QBRAN MMOD2
 1311      08300000 
 1312 3000 B5280000 		_ADR	RAT
 1313 3004 012A0000 		_ADR	PLUS
 1314              	MMOD2:
 1315 3008 85280000 		_ADR	RFROM
 1316 300c 852F0000 		_ADR	UMMOD
 1317 3010 85280000 		_ADR	RFROM
 1318 3014 13280000 		_QBRAN	MMOD3
 1318      28300000 
 1319 301c 4D290000 		_ADR	SWAP
 1320 3020 212C0000 		_ADR	NEGAT
 1321 3024 4D290000 		_ADR	SWAP
 1322              	MMOD3:   
 1323 3028 13260000 		_UNNEST
 1324              	
 1325              	/****************************
 1326              		S>D ( n -- d )
 1327              		convert single to double 
 1328              	*****************************/
 1329 302c B82F0000 		_HEADER STOD,3,"S>D"
 1329      03533E44 
 1330 3034 47F8046D 		_PUSH 
 1331 3038 4FEAE676 		ASR TOS,#31
 1332 303c FFF7E6BA 		_NEXT 
 1333              	
 1334              	/****************************
 1335              		D2* ( d -- d<<1 )
 1336              		double * 2 
 1337              	***************************/
ARM GAS  forth.s 			page 120


 1338 3040 30300000 		_HEADER D2STAR,3,"D2*"
 1338      0344322A 
 1339 3048 3868     		ldr T0,[DSP]
 1340 304a 4000     		lsls T0,#1
 1341 304c 3860     		str T0,[DSP]
 1342 304e 4FEA4606 		lsl TOS,#1
 1343 3052 46F10006 		adc TOS,#0
 1344 3056 FFF7D9BA 		_NEXT 
 1345              	
 1346              	/****************************
 1347              		D2/  ( d -- d>>1 )
 1348              		double signed divide by 2 
 1349              	*****************************/
 1350 305a 44300000 		_HEADER D2SL,3,"D2/"
 1350      0344322F 
 1350      00BF
 1351 3064 3868     		ldr T0,[DSP]
 1352 3066 7610     		asrs TOS,#1
 1353 3068 4FEA3000 		rrx T0,T0 
 1354 306c 3860     		str T0,[DSP]
 1355 306e FFF7CDBA 		_NEXT 
 1356              	
 1357              	/***************************
 1358              		D/MOD  ( d+ n+ - r+ qd+ )
 1359              		unsigned double division
 1360              		and modulo 
 1361              		output:
 1362              			qd+ = d+ / n+
 1363              			r+ = qd+ - (d+ * n+ )
 1364              	***************************/
 1365 3072 5E300000 		_HEADER DSLMOD,5,"D/MOD"
 1365      05442F4D 
 1365      4F44
 1366 307c 3D68     		ldr WP,[DSP]  // d+ high 
 1367 307e 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1368 3080 4FF02002 		mov T2,#32 // shift counter  
 1369 3084 81EA0101 		eor T1,T1 // quotient T0:T1  
 1370 3088 25B9     		cbnz WP,1f    
 1371 308a 82EA0202 		eor T2,T2 // nos shifting required 
 1372 308e 0546     		mov WP,T0 
 1373 3090 80EA0000 		eor T0,T0 
 1374 3094 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1375 3096 15F0004F 	    tst WP,#(1<<31) 
 1376 309a 06D1     		bne 2f
 1377 309c 4918     		adds T1,T1,T1 
 1378 309e 4041     		adcs T0,T0,T0 
 1379 30a0 45EB0505 		adc WP,WP,WP 
 1380 30a4 A2F10102 		sub T2,#1 
 1381 30a8 F4E7     		b 1b 
 1382 30aa B5FBF6F3 	2:  udiv T3,WP,TOS
 1383 30ae 41EA0301 		orr T1,T3   // append partial quotient 
 1384 30b2 06FB03F3 		mul T3,TOS
 1385 30b6 A5EB0305 		sub WP,T3 //remainder 
 1386 30ba 02B1     		cbz T2,8f 
 1387 30bc EAE7     		b 1b 
 1388 30be 7D60     	8:	str WP,[DSP,#4] // remainder 
 1389 30c0 3960     		str T1,[DSP]  // q lo 
ARM GAS  forth.s 			page 121


 1390 30c2 0646     		mov TOS,T0  // q hi 		
 1391 30c4 FFF7A2BA 		_NEXT 
 1392              	
 1393              	
 1394              	/****************************
 1395              		D/  ( ud u -- udq )
 1396              		divide unsigned double 
 1397              		by unsigned single 
 1398              		return double quotient
 1399              		rounded to nearest integer 
 1400              	****************************/
 1401 30c8 76300000 		_HEADER DSLASH,2,"D/"
 1401      02442F00 
 1402 30d0 504700BF 		_NEST 
 1403 30d4 3D290000 		_ADR DUPP 
 1404 30d8 D3270000 		_DOLIT 1 
 1404      01000000 
 1405 30e0 D9290000 		_ADR RSHIFT 
 1406 30e4 C9280000 		_ADR TOR 
 1407 30e8 7D300000 		_ADR DSLMOD 
 1408 30ec 252B0000 		_ADR ROT 
 1409 30f0 85280000 		_ADR RFROM 
 1410 30f4 092D0000 		_ADR GREAT 
 1411 30f8 13280000 		_QBRAN 9f
 1411      10310000 
 1412 3100 D3270000 		_DOLIT 1 
 1412      01000000 
 1413 3108 35300000 		_ADR STOD 
 1414 310c 892B0000 		_ADR DPLUS 
 1415 3110 13260000 	9:	_UNNEST 
 1416              	
 1417              	
 1418              	/****************************
 1419              		D* ( d s -- d )
 1420              	    multiply a double 
 1421              		by a single 
 1422              	****************************/
 1423 3114 CC300000 		_HEADER DSTAR,2,"D*"
 1423      02442A00 
 1424              	/*
 1425              		_NEST 
 1426              		_ADR NROT 
 1427              		_ADR DUPP 
 1428              		_ADR TOR 
 1429              		_ADR DABS
 1430              		_ADR SWAP  
 1431              		_ADR ROT   
 1432              		_ADR DUPP
 1433              		_ADR TOR
 1434              		_ADR MSTAR
 1435              		_ADR ROT
 1436              		_ADR RFROM 
 1437              		_ADR STAR 
 1438              		_ADR PLUS
 1439              		_ADR RFROM 
 1440              		_ADR ZLESS 
 1441              		_QBRAN 9f
ARM GAS  forth.s 			page 122


 1442              		_ADR DNEGA   
 1443              	9:	_UNNEST 
 1444              	*/
 1445 311c 57F8040B 		ldr T0,[DSP],#4
 1446 3120 3968     		ldr T1,[DSP]
 1447 3122 3860     		str T0,[DSP] 
 1448 3124 83EA0303 		eor T3,T3 
 1449 3128 10F0004F 		tst T0,#(1<<31)
 1450 312c 02D0     		beq 1f 
 1451              		// DNEGATE 
 1452 312e 591A     		subs T1,T3,T1  
 1453 3130 63EB0000 		sbc T0,T3,T0 
 1454 3134 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1455 3138 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1456 313c 0E44     		add TOS,T1  // TOS:T2 product  
 1457 313e 3868     		ldr r0,[DSP]
 1458 3140 10F0004F 		tst T0,#(1<<31)
 1459 3144 02D0     		beq 2f 
 1460              		// DNEGATE product 
 1461 3146 9A1A     		subs T2,T3,T2  
 1462 3148 63EB0606 		sbc TOS,T3,TOS 
 1463 314c 3A60     	2:  str T2,[DSP]
 1464 314e FFF75DBA 		_NEXT 
 1465              	
 1466              	
 1467              	/****************************
 1468              	   /MOD	( n n -- r q )
 1469              		Signed divide. Return
 1470              		mod and quotient.
 1471              	****************************/
 1472 3152 18310000 		_HEADER SLMOD,4,"/MOD"
 1472      042F4D4F 
 1472      4400
 1473 315c 504700BF 		_NEST
 1474 3160 61290000 		_ADR	OVER
 1475 3164 71290000 		_ADR	ZLESS
 1476 3168 4D290000 		_ADR	SWAP
 1477 316c C12F0000 		_ADR	MSMOD
 1478 3170 13260000 		_UNNEST
 1479              	
 1480              	/**************************
 1481              	    MOD	 ( n n -- r )
 1482              	 	Signed divide. Return
 1483              		mod only.
 1484              	**************************/
 1485 3174 56310000 		_HEADER MODD,3,"MOD"
 1485      034D4F44 
 1486 317c 504700BF 		_NEST
 1487 3180 5D310000 		_ADR	SLMOD
 1488 3184 2D290000 		_ADR	DROP
 1489 3188 13260000 		_UNNEST
 1490              	
 1491              	/*************************
 1492              	    /	   ( n n -- q )
 1493              	 	Signed divide. Return
 1494              		quotient only.
 1495              	**************************/
ARM GAS  forth.s 			page 123


 1496 318c 78310000 		_HEADER SLASH,1,"/"
 1496      012F00BF 
 1497 3194 504700BF 		_NEST
 1498 3198 5D310000 		_ADR	SLMOD
 1499 319c 4D290000 		_ADR	SWAP
 1500 31a0 2D290000 		_ADR	DROP
 1501 31a4 13260000 		_UNNEST
 1502              	
 1503              	//******************************
 1504              	//  */MOD	( n1 n2 n3 -- r q )
 1505              	/* 	Multiply n1 and n2, then 
 1506              		divide by n3. Return 
 1507              		mod and quotient.
 1508              	******************************/
 1509 31a8 90310000 		_HEADER SSMOD,5,"*/MOD"
 1509      052A2F4D 
 1509      4F4400BF 
 1510 31b4 504700BF 		_NEST
 1511 31b8 C9280000 		_ADR	TOR
 1512 31bc 492A0000 		_ADR	MSTAR
 1513 31c0 85280000 		_ADR	RFROM
 1514 31c4 C12F0000 		_ADR	MSMOD
 1515 31c8 13260000 		_UNNEST
 1516              	
 1517              	//*******************************
 1518              	//  */ ( n1 n2 n3 -- q )
 1519              	/* 	Multiply n1 by n2, then 
 1520              		divide by n3. Return quotient
 1521              		only.
 1522              	*******************************/
 1523 31cc AC310000 		_HEADER STASL,2,"*/"
 1523      022A2F00 
 1524 31d4 504700BF 		_NEST
 1525 31d8 B5310000 		_ADR	SSMOD
 1526 31dc 4D290000 		_ADR	SWAP
 1527 31e0 2D290000 		_ADR	DROP
 1528 31e4 13260000 		_UNNEST
 1529              	
 1530              	/*******************
 1531              	  Miscellaneous
 1532              	*******************/
 1533              	
 1534              	/*************************
 1535              	    ALIGNED	( b -- a )
 1536              	 	Align address to the 
 1537              		cell boundary.
 1538              	**************************/
 1539 31e8 D0310000 		_HEADER ALGND,7,"ALIGNED"
 1539      07414C49 
 1539      474E4544 
 1540 31f4 06F10306 		ADD	TOS,TOS,#3
 1541 31f8 6FF00305 		MVN	WP,#3
 1542 31fc 06EA0506 		AND	TOS,TOS,WP
 1543 3200 FFF704BA 		_NEXT
 1544              	
 1545              	/****************************
 1546              	    >CHAR	( c -- c )
ARM GAS  forth.s 			page 124


 1547              	 	Filter non-printing 
 1548              		characters.
 1549              	****************************/
 1550 3204 EC310000 		_HEADER TCHAR,5,">CHAR"
 1550      053E4348 
 1550      415200BF 
 1551 3210 504700BF 		_NEST
 1552 3214 D3270000 		_DOLIT  0x7F
 1552      7F000000 
 1553 321c 81290000 		_ADR	ANDD
 1554 3220 3D290000 		_ADR	DUPP	// mask msb
 1555 3224 BD2A0000 		_ADR	BLANK
 1556 3228 D3270000 		_DOLIT 	127
 1556      7F000000 
 1557 3230 592F0000 		_ADR	WITHI	// check for printable
 1558 3234 0D2C0000 		_ADR	INVER
 1559 3238 13280000 		_QBRAN	TCHA1
 1559      4C320000 
 1560 3240 2D290000 		_ADR	DROP
 1561 3244 D3270000 		_DOLIT 	'_'	// replace non-printables
 1561      5F000000 
 1562              	TCHA1:
 1563 324c 13260000 		  _UNNEST
 1564              	
 1565              	/************************
 1566              	    DEPTH	( -- n )
 1567              	 	Return the depth of
 1568              		the data stack.
 1569              	***********************/
 1570 3250 08320000 		_HEADER DEPTH,5,"DEPTH"
 1570      05444550 
 1570      544800BF 
 1571 325c 4FF68062 		_MOV32 T2,SPP 
 1571      C2F20102 
 1572 3264 A2EB0702 		SUB	T2,T2,DSP
 1573 3268 47F8046D 		_PUSH
 1574 326c 4FEAA206 		ASR	TOS,T2,#2
 1575 3270 FFF7CCB9 		_NEXT
 1576              	
 1577              	/*****************************
 1578              	    PICK	( ... +n -- ... w )
 1579              	 	Copy the nth stack item 
 1580              		to tos.
 1581              	******************************/
 1582 3274 54320000 		_HEADER PICK,4,"PICK"
 1582      04504943 
 1582      4B0000BF 
 1583 3280 504700BF 		_NEST
 1584 3284 5D2A0000 		_ADR	ONEP
 1585 3288 D12A0000 		_ADR	CELLS
 1586 328c 19290000 		_ADR	SPAT
 1587 3290 012A0000 		_ADR	PLUS
 1588 3294 59280000 		_ADR	AT
 1589 3298 13260000 		_UNNEST
 1590              	
 1591              	/*********************
 1592              	  Memory access
ARM GAS  forth.s 			page 125


 1593              	*********************/
 1594              	
 1595              	/*************************
 1596              	    HERE	( -- a )
 1597              	 	Return the top of
 1598              		the code dictionary.
 1599              	*************************/
 1600 329c 78320000 		_HEADER HERE,4,"HERE"
 1600      04484552 
 1600      450000BF 
 1601 32a8 504700BF 		_NEST
 1602 32ac D52E0000 		_ADR	CPP
 1603 32b0 59280000 		_ADR	AT
 1604 32b4 13260000 		_UNNEST
 1605              	
 1606              	/***************************	
 1607              	    PAD	 ( -- a )
 1608              	 	Return the address of 
 1609              		a temporary buffer.
 1610              	***************************/
 1611 32b8 A0320000 		_HEADER PAD,3,"PAD"
 1611      03504144 
 1612 32c0 504700BF 		_NEST
 1613 32c4 A9320000 		_ADR	HERE
 1614 32c8 D3270000 		_DOLIT 80
 1614      50000000 
 1615 32d0 012A0000 		_ADR PLUS 
 1616 32d4 13260000 		_UNNEST
 1617              	
 1618              	/***********************
 1619              	    TIB	 ( -- a )
 1620              	 	Return the address 
 1621              		of the terminal 
 1622              		input buffer.
 1623              	************************/
 1624 32d8 BC320000 		_HEADER TIB,3,"TIB"
 1624      03544942 
 1625 32e0 47F8046D 		_PUSH
 1626 32e4 266B     		ldr TOS,[UP,#TIBUF]
 1627 32e6 FFF791B9 		_NEXT
 1628              	
 1629              	/*************************
 1630              	    @EXECUTE	( a -- )
 1631              	 	Execute vector stored
 1632              		in address a.
 1633              	*************************/
 1634 32ea DC320000 		_HEADER ATEXE,8,"@EXECUTE"
 1634      08404558 
 1634      45435554 
 1634      4500
 1635 32f8 3500     		MOVS	WP,TOS
 1636 32fa 57F8046B 		_POP
 1637 32fe 2D68     		LDR	WP,[WP]
 1638 3300 45F00105 		ORR	WP,WP,#1
 1639 3304 18BF     	    IT NE 
 1640 3306 2847     		BXNE	WP
 1641 3308 FFF780B9 		_NEXT
ARM GAS  forth.s 			page 126


 1642              	
 1643              	/*******************************
 1644              	    CMOVE	( b1 b2 u -- )
 1645              	 	Copy u bytes from b1 to b2.
 1646              	********************************/
 1647 330c EE320000 		_HEADER CMOVE,5,"CMOVE"
 1647      05434D4F 
 1647      564500BF 
 1648 3318 57F8042B 		LDR	T2,[DSP],#4
 1649 331c 57F8043B 		LDR	T3,[DSP],#4
 1650 3320 03E0     		B CMOV1
 1651              	CMOV0:
 1652 3322 13F8015B 		LDRB	WP,[T3],#1
 1653 3326 02F8015B 		STRB	WP,[T2],#1
 1654              	CMOV1:
 1655 332a 3600     		MOVS	TOS,TOS
 1656 332c 02D0     		BEQ	CMOV2
 1657 332e A6F10106 		SUB	TOS,TOS,#1
 1658 3332 F6E7     		B CMOV0
 1659              	CMOV2:
 1660 3334 57F8046B 		_POP
 1661 3338 FFF768B9 		_NEXT
 1662              	
 1663              	/***************************
 1664              	    MOVE	( a1 a2 u -- )
 1665              	 	Copy u words from a1 to a2.
 1666              	*******************************/
 1667 333c 10330000 		_HEADER MOVE,4,"MOVE"
 1667      044D4F56 
 1667      450000BF 
 1668 3348 4FF00400 		MOV T0,#4 
 1669 334c 06F10306 		ADD TOS,#3 
 1670 3350 26F00306 		BIC TOS,#3
 1671 3354 57F8041B 		LDR	T1,[DSP],#4 // dest
 1672 3358 57F8042B 		LDR	T2,[DSP],#4 // src 
 1673 335c 8A42     		CMP T2,T1 
 1674 335e 08D5     		BPL MOVE1
 1675 3360 6FF00300 		MOV T0,#-4 
 1676 3364 3144     		ADD T1,TOS
 1677 3366 3244     		ADD T2,TOS 
 1678 3368 01E0     		B MOVE3
 1679              	MOVE0:
 1680 336a 1568     		LDR	WP,[T2]
 1681 336c 0D60     		STR	WP,[T1]
 1682              	MOVE3: 
 1683 336e 0144     		ADD T1,T0 
 1684 3370 0244     		ADD T2,T0 
 1685              	MOVE1:
 1686 3372 3600     		MOVS TOS,TOS
 1687 3374 02D0     		BEQ	MOVE2
 1688 3376 A6F10406 		SUB	TOS,TOS,#4
 1689 337a F6E7     		B MOVE0
 1690              	MOVE2:
 1691 337c 57F8046B 		_POP
 1692 3380 FFF744B9 		_NEXT
 1693              	
 1694              	/**************************
ARM GAS  forth.s 			page 127


 1695              	    FILL	( b u c -- )
 1696              	 	Fill u bytes of character
 1697              		c to area beginning at b.
 1698              	******************************/
 1699 3384 40330000 		_HEADER FILL,4,"FILL"
 1699      0446494C 
 1699      4C0000BF 
 1700 3390 03CF     		LDMFD DSP!,{T0,T1} 
 1701 3392 0000     		MOVS T0,T0 
 1702 3394 03D0     		BEQ FILL2
 1703              	FILL1:
 1704 3396 01F8016B 		STRB	TOS,[T1],#1
 1705 339a 0138     		SUBS	T0,T0,#1
 1706 339c FBD1     		BNE FILL1
 1707              	FILL2:
 1708 339e 57F8046B 		_POP
 1709 33a2 FFF733B9 		_NEXT
 1710              	
 1711              	/*****************************
 1712              	    PACK$	( b u a -- a )
 1713              	 	Build a counted word with
 1714              		u characters from b. 
 1715              		Null fill.
 1716              	*****************************/
 1717 33a6 88330000 		_HEADER PACKS,5,"PACK$"
 1717      05504143 
 1717      4B24
 1718 33b0 504700BF 		_NEST
 1719 33b4 F5310000 		_ADR	ALGND
 1720 33b8 3D290000 		_ADR	DUPP
 1721 33bc C9280000 		_ADR	TOR		// strings only on cell boundary
 1722 33c0 61290000 		_ADR	OVER
 1723 33c4 012A0000 		_ADR	PLUS
 1724 33c8 5D2A0000 		_ADR	ONEP 
 1725 33cc D3270000 		_DOLIT 	0xFFFFFFFC
 1725      FCFFFFFF 
 1726 33d4 81290000 		_ADR	ANDD			// count mod cell
 1727 33d8 D3270000 		_DOLIT 	0
 1727      00000000 
 1728 33e0 4D290000 		_ADR	SWAP
 1729 33e4 45280000 		_ADR	STORE			// null fill cell
 1730 33e8 B5280000 		_ADR	RAT
 1731 33ec 752B0000 		_ADR	DDUP
 1732 33f0 65280000 		_ADR	CSTOR
 1733 33f4 5D2A0000 		_ADR	ONEP			// save count
 1734 33f8 4D290000 		_ADR	SWAP
 1735 33fc 19330000 		_ADR	CMOVE
 1736 3400 85280000 		_ADR	RFROM
 1737 3404 13260000 		_UNNEST   			// move string
 1738              	
 1739              	/***********************************
 1740              	  Numeric output, single precision
 1741              	***********************************/
 1742              	
 1743              	/**************************
 1744              	    DIGIT	( u -- c )
 1745              	 	Convert digit u to 
ARM GAS  forth.s 			page 128


 1746              		a character.
 1747              	***************************/
 1748 3408 AA330000 		_HEADER DIGIT,5,"DIGIT"
 1748      05444947 
 1748      495400BF 
 1749 3414 504700BF 		_NEST
 1750 3418 D3270000 		_DOLIT 9
 1750      09000000 
 1751 3420 61290000 		_ADR	OVER
 1752 3424 D92C0000 		_ADR	LESS
 1753 3428 D3270000 		_DOLIT	7
 1753      07000000 
 1754 3430 81290000 		_ADR	ANDD
 1755 3434 012A0000 		_ADR	PLUS
 1756 3438 D3270000 		_DOLIT	'0'
 1756      30000000 
 1757 3440 012A0000 		_ADR	PLUS 
 1758 3444 13260000 		_UNNEST
 1759              	
 1760              	/*********************************
 1761              	    EXTRACT	( ud base -- ud c )
 1762              	 	Extract the least significant
 1763              		digit from positive double.
 1764              	**********************************/
 1765 3448 0C340000 		_HEADER EXTRC,7,"EXTRACT"
 1765      07455854 
 1765      52414354 
 1766 3454 504700BF 		_NEST
 1767 3458 7D300000 		_ADR	DSLMOD
 1768 345c 252B0000 		_ADR	ROT
 1769 3460 15340000 		_ADR	DIGIT
 1770 3464 13260000 		_UNNEST
 1771              	
 1772              	/***************************
 1773              	    <#	  ( -- )
 1774              	 	Initiate the numeric
 1775              		output process.
 1776              	****************************/
 1777 3468 4C340000 		_HEADER BDIGS,2,"<#"
 1777      023C2300 
 1778 3470 504700BF 		_NEST
 1779 3474 C1320000 		_ADR	PAD
 1780 3478 A92E0000 		_ADR	HLD
 1781 347c 45280000 		_ADR	STORE
 1782 3480 13260000 		_UNNEST
 1783              	
 1784              	/*********************************
 1785              	    HOLD	( c -- )
 1786              	 	Insert a character into the 
 1787              		numeric output string.
 1788              	**********************************/
 1789 3484 6C340000 		_HEADER HOLD,4,"HOLD"
 1789      04484F4C 
 1789      440000BF 
 1790 3490 504700BF 		_NEST
 1791 3494 A92E0000 		_ADR	HLD
 1792 3498 59280000 		_ADR	AT
ARM GAS  forth.s 			page 129


 1793 349c 6D2A0000 		_ADR	ONEM
 1794 34a0 3D290000 		_ADR	DUPP
 1795 34a4 A92E0000 		_ADR	HLD
 1796 34a8 45280000 		_ADR	STORE
 1797 34ac 65280000 		_ADR	CSTOR
 1798 34b0 13260000 		_UNNEST
 1799              	
 1800              	/***********************
 1801              	    #	   ( ud -- ud )
 1802              	 	Extract one digit 
 1803              		from ud and append 
 1804              		the digit to output 
 1805              		string.
 1806              	*************************/
 1807 34b4 88340000 		_HEADER DIG,1,"#"
 1807      012300BF 
 1808 34bc 504700BF 		_NEST
 1809 34c0 2D2E0000 		_ADR	BASE
 1810 34c4 59280000 		_ADR	AT
 1811 34c8 55340000 		_ADR	EXTRC
 1812 34cc 91340000 		_ADR	HOLD
 1813 34d0 13260000 		_UNNEST
 1814              	
 1815              	/***************************
 1816              	    #S	  ( ud -- 0 )
 1817              	 	Convert ud until all 
 1818              		digits are added to 
 1819              		the output string.
 1820              	***************************/
 1821 34d4 B8340000 		_HEADER DIGS,2,"#S"
 1821      02235300 
 1822 34dc 504700BF 		_NEST
 1823              	DIGS1:
 1824 34e0 BD340000 	    _ADR	DIG
 1825 34e4 752B0000 		_ADR	DDUP
 1826 34e8 95290000 		_ADR    ORR 
 1827 34ec 13280000 		_QBRAN 	DIGS2
 1827      FC340000 
 1828 34f4 27280000 		_BRAN	DIGS1
 1828      E0340000 
 1829              	DIGS2:
 1830 34fc 2D290000 		 _ADR DROP 
 1831 3500 13260000 		 _UNNEST
 1832              	
 1833              	/*********************
 1834              	    SIGN	( n -- )
 1835              	 	Add a minus sign
 1836              		to the numeric
 1837              		output string.
 1838              	*********************/
 1839 3504 D8340000 		_HEADER SIGN,4,"SIGN"
 1839      04534947 
 1839      4E0000BF 
 1840 3510 504700BF 		_NEST
 1841 3514 71290000 		_ADR	ZLESS
 1842 3518 13280000 		_QBRAN	SIGN1
 1842      2C350000 
ARM GAS  forth.s 			page 130


 1843 3520 D3270000 		_DOLIT '-'
 1843      2D000000 
 1844 3528 91340000 		_ADR	HOLD
 1845              	SIGN1:
 1846 352c 13260000 		  _UNNEST
 1847              	
 1848              	/*************************
 1849              	    #>  ( w -- b u )
 1850              	 	Prepare the output 
 1851              		word to be TYPE'd.
 1852              	************************/
 1853 3530 08350000 		_HEADER EDIGS,2,"#>"
 1853      02233E00 
 1854 3538 504700BF 		_NEST
 1855 353c 2D290000 		_ADR	DROP
 1856 3540 A92E0000 		_ADR	HLD
 1857 3544 59280000 		_ADR	AT
 1858 3548 C1320000 		_ADR	PAD
 1859 354c 61290000 		_ADR	OVER
 1860 3550 112A0000 		_ADR	SUBB
 1861 3554 13260000 		_UNNEST
 1862              	
 1863              	/**************************
 1864              	    str	 ( n -- b u )
 1865              	 	Convert a signed 
 1866              		integer to a numeric 
 1867              		string.
 1868              	hidden word used by compiler
 1869              	***************************/
 1870              	STRR:
 1871 3558 504700BF 		_NEST
 1872 355c 35300000 		_ADR 	STOD 
 1873 3560 3D290000 		_ADR	DUPP
 1874 3564 C9280000 		_ADR	TOR
 1875 3568 A92B0000 		_ADR	DABS
 1876 356c 71340000 		_ADR	BDIGS
 1877 3570 DD340000 		_ADR	DIGS
 1878 3574 85280000 		_ADR	RFROM
 1879 3578 11350000 		_ADR	SIGN
 1880 357c 39350000 		_ADR	EDIGS
 1881 3580 13260000 		_UNNEST
 1882              	
 1883              	/*************************
 1884              	    HEX	 ( -- )
 1885              	 	Use radix 16 as 
 1886              		base for numeric 
 1887              		conversions.
 1888              	*************************/
 1889 3584 34350000 		_HEADER HEX,3,"HEX"
 1889      03484558 
 1890 358c 504700BF 		_NEST
 1891 3590 D3270000 		_DOLIT 16
 1891      10000000 
 1892 3598 2D2E0000 		_ADR	BASE
 1893 359c 45280000 		_ADR	STORE
 1894 35a0 13260000 		_UNNEST
 1895              	
ARM GAS  forth.s 			page 131


 1896              	/**************************
 1897              		BIN ( -- )
 1898              		Use radix 2 as 
 1899              		base for numeric 
 1900              		conversion 
 1901              	**************************/
 1902 35a4 88350000 		_HEADER BIN,3,"BIN"
 1902      0342494E 
 1903 35ac 504700BF 		_NEST 
 1904 35b0 D3270000 		_DOLIT 2 
 1904      02000000 
 1905 35b8 2D2E0000 		_ADR BASE 
 1906 35bc 45280000 		_ADR STORE
 1907 35c0 13260000 		_UNNEST 
 1908              	
 1909              	/************************
 1910              	    DECIMAL	( -- )
 1911              	 	Use radix 10 as base
 1912              		for numeric conversions.
 1913              	*************************/
 1914 35c4 A8350000 		_HEADER DECIM,7,"DECIMAL"
 1914      07444543 
 1914      494D414C 
 1915 35d0 504700BF 		_NEST
 1916 35d4 D3270000 		_DOLIT 10
 1916      0A000000 
 1917 35dc 2D2E0000 		_ADR	BASE
 1918 35e0 45280000 		_ADR	STORE
 1919 35e4 13260000 		_UNNEST
 1920              	
 1921              	/************************************
 1922              	  Numeric input, single precision
 1923              	***********************************/
 1924              	
 1925              	/***********************************
 1926              	    DIGIT?	( c base -- u t )
 1927              	 	Convert a character to its 
 1928              		numeric value. A flag 
 1929              		indicates success.
 1930              	**********************************/
 1931 35e8 C8350000 		_HEADER DIGTQ,6,"DIGIT?"
 1931      06444947 
 1931      49543F00 
 1932 35f4 504700BF 		_NEST
 1933 35f8 C9280000 		_ADR	TOR
 1934 35fc D3270000 		_DOLIT 	'0'
 1934      30000000 
 1935 3604 112A0000 		_ADR	SUBB
 1936 3608 D3270000 		_DOLIT 9
 1936      09000000 
 1937 3610 61290000 		_ADR	OVER
 1938 3614 D92C0000 		_ADR	LESS
 1939 3618 13280000 		_QBRAN	DGTQ1
 1939      40360000 
 1940 3620 D3270000 		_DOLIT 7
 1940      07000000 
 1941 3628 112A0000 		_ADR	SUBB
ARM GAS  forth.s 			page 132


 1942 362c 3D290000 		_ADR	DUPP
 1943 3630 D3270000 		_DOLIT	10
 1943      0A000000 
 1944 3638 D92C0000 		_ADR	LESS
 1945 363c 95290000 		_ADR	ORR
 1946              	DGTQ1:
 1947 3640 3D290000 		_ADR	DUPP
 1948 3644 85280000 		_ADR	RFROM
 1949 3648 C12C0000 		_ADR	ULESS
 1950 364c 13260000 		_UNNEST
 1951              	
 1952              	/***********************************
 1953              	 parse digits 
 1954              	  d digits count 
 1955              	  n parsed integer
 1956              	  a+ updated pointer  
 1957              	************************************/
 1958              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1959 3650 504700BF 	    _NEST
 1960 3654 2D2E0000 	    _ADR BASE 
 1961 3658 59280000 	    _ADR AT 
 1962 365c C9280000 	    _ADR TOR  
 1963 3660 912D0000 	1:  _ADR COUNT 
 1964 3664 B5280000 	    _ADR RAT 
 1965 3668 F5350000 	    _ADR DIGTQ
 1966 366c 13280000 	    _QBRAN 2f
 1966      9C360000 
 1967 3674 252B0000 	    _ADR ROT 
 1968 3678 B5280000 	    _ADR RAT 
 1969 367c 212A0000 	    _ADR STAR 
 1970 3680 012A0000 	    _ADR PLUS
 1971 3684 4D290000 	    _ADR SWAP 
 1972 3688 252B0000 	    _ADR ROT 
 1973 368c 5D2A0000 	    _ADR ONEP 
 1974 3690 392B0000 	    _ADR NROT
 1975 3694 27280000 	    _BRAN 1b 
 1975      60360000 
 1976 369c 2D290000 	2:  _ADR DROP 
 1977 36a0 6D2A0000 	    _ADR ONEM  // decrement a 
 1978 36a4 85280000 	    _ADR RFROM 
 1979 36a8 2D290000 	    _ADR DROP 
 1980 36ac 13260000 	    _UNNEST 
 1981              	
 1982              	/**************************
 1983              	 CHAR? 
 1984              	 check for charcter c 
 1985              	 move pointer if true 
 1986              	**************************/
 1987              	CHARQ: // ( a c -- a+ t | a f )
 1988 36b0 3868     	    ldr T0,[DSP]
 1989 36b2 10F8011B 	    ldrb T1,[T0],#1 
 1990 36b6 3246     	    mov T2,TOS 
 1991 36b8 86EA0606 	    eor TOS,TOS
 1992 36bc 9142     	    cmp T1,T2
 1993 36be 02D1     	    bne 1f 
 1994 36c0 3860     	    str T0,[DSP]
 1995 36c2 6FEA0606 	    mvn TOS,TOS  
ARM GAS  forth.s 			page 133


 1996 36c6 FEF7A1BF 	1:  _NEXT
 1997              	
 1998              	
 1999              	/**********************************
 2000              	    INT?	( a -- n T | a F )
 2001              	 	parse string for at 'a' for 
 2002              		integer. Push a flag on TOS.
 2003              		integer form:
 2004              			[-]hex_digit+  | 
 2005              			$[-]hex_digit+ |
 2006              			%[-]bin_digit+ | 
 2007              			[-]dec_digit+ 
 2008              	**********************************/
 2009 36ca EC350000 		_HEADER INTQ,4,"INT?"
 2009      04494E54 
 2009      3F00
 2010 36d4 504700BF 		_NEST
 2011 36d8 2D2E0000 		_ADR	BASE
 2012 36dc 59280000 		_ADR	AT
 2013 36e0 C9280000 		_ADR	TOR
 2014 36e4 D3270000 		_DOLIT	0      // a 0 
 2014      00000000 
 2015 36ec 61290000 		_ADR	OVER   // a 0 a 
 2016 36f0 912D0000 		_ADR	COUNT  // a 0 a+ cnt 
 2017 36f4 61290000 		_ADR	OVER   // a 0 a+ cnt a+
 2018 36f8 79280000 		_ADR	CAT    // a 0 a+ cnt char 
 2019 36fc D3270000 		_DOLIT '$'     // a 0 a+ cnt char '$'
 2019      24000000 
 2020 3704 892C0000 		_ADR	EQUAL  // a 0 a+ cnt f 
 2021 3708 13280000 		_QBRAN	0f    
 2021      1C370000 
 2022 3710 8D350000 		_ADR	HEX
 2023 3714 27280000 		_BRAN   1f 
 2023      3C370000 
 2024 371c 61290000 	0:  _ADR    OVER  // a 0 a+ cnt a+
 2025 3720 79280000 		_ADR    CAT   // a 0 a+ cnt char 
 2026 3724 D3270000 		_DOLIT  '%'   // a 0 a+ cnt char '%'
 2026      25000000 
 2027 372c 892C0000 		_ADR	EQUAL  // a 0 a+ cnt f 
 2028 3730 13280000 		_QBRAN  2f
 2028      4C370000 
 2029 3738 AD350000 		_ADR	BIN 
 2030 373c 4D290000 	1:	_ADR	SWAP 
 2031 3740 5D2A0000 		_ADR	ONEP 
 2032 3744 4D290000 		_ADR	SWAP 
 2033 3748 6D2A0000 		_ADR	ONEM // a 0 a+ cnt-  
 2034              	2: // check for '-'
 2035 374c 4D290000 		_ADR 	SWAP // a 0 cnt a+ 
 2036 3750 D3270000 		_DOLIT  '-' 
 2036      2D000000 
 2037 3758 B1360000 		_ADR	CHARQ
 2038 375c 252B0000 		_ADR	ROT 
 2039 3760 61290000 		_ADR	OVER 
 2040 3764 C9280000 		_ADR    TOR   // a 0 a+ f cnt R: sign  
 2041 3768 4D290000 		_ADR	SWAP   // a 0 a+ cnt f 
 2042 376c 13280000 		_QBRAN  2f 
 2042      78370000 
ARM GAS  forth.s 			page 134


 2043 3774 6D2A0000 		_ADR	ONEM 
 2044 3778 C9280000 	2:	_ADR 	TOR  // a 0 a+  R: sign cnt 
 2045 377c D3270000 		_DOLIT  0
 2045      00000000 
 2046 3784 3D290000 		_ADR	DUPP 
 2047 3788 252B0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2048 378c 51360000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2049 3790 2D290000 		_ADR	DROP // a 0 d n 
 2050 3794 4D290000 		_ADR	SWAP  // a 0 n d 
 2051 3798 85280000 		_ADR	RFROM // a 0 n d cnt  
 2052 379c 892C0000 		_ADR	EQUAL // d == cnt ? 
 2053 37a0 13280000 		_QBRAN  5f // digits left, not an integer 
 2053      D0370000 
 2054 37a8 85280000 	2:	_ADR	RFROM  // sign 
 2055 37ac 13280000 		_QBRAN  3f   // positive integer 
 2055      B8370000 
 2056 37b4 212C0000 		_ADR	NEGAT
 2057              	3:	
 2058 37b8 392B0000 		_ADR	NROT  // n a 0 
 2059 37bc 4D2B0000 		_ADR	DDROP // n  
 2060 37c0 D3270000 		_DOLIT  -1    // n -1 
 2060      FFFFFFFF 
 2061 37c8 27280000 		_BRAN   7f  
 2061      D8370000 
 2062 37d0 85280000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2063 37d4 4D2B0000 	    _ADR	DDROP 
 2064 37d8 85280000 	7:	_ADR	RFROM
 2065 37dc 2D2E0000 		_ADR	BASE
 2066 37e0 45280000 		_ADR	STORE
 2067 37e4 13260000 		_UNNEST
 2068              	
 2069              	
 2070              	/********************
 2071              	  console I/O
 2072              	********************/
 2073              	
 2074              	/**********************
 2075              	    SPACE	( -- )
 2076              	 	Send the blank 
 2077              		character to 
 2078              		the output device.
 2079              	************************/
 2080 37e8 CE360000 		_HEADER SPACE,5,"SPACE"
 2080      05535041 
 2080      434500BF 
 2081 37f4 504700BF 		_NEST
 2082 37f8 BD2A0000 		_ADR	BLANK
 2083 37fc DD260000 		_ADR	EMIT
 2084 3800 13260000 		_UNNEST
 2085              	
 2086              	/***************************
 2087              	    SPACES	( +n -- )
 2088              	 	Send n spaces to the 
 2089              		output device.
 2090              	****************************/
 2091 3804 EC370000 		_HEADER SPACS,6,"SPACES"
 2091      06535041 
ARM GAS  forth.s 			page 135


 2091      43455300 
 2092 3810 504700BF 		_NEST
 2093 3814 D3270000 		_DOLIT	0
 2093      00000000 
 2094 381c 212D0000 		_ADR	MAX
 2095 3820 C9280000 		_ADR	TOR
 2096 3824 27280000 		_BRAN	CHAR2
 2096      30380000 
 2097              	CHAR1:
 2098 382c F5370000 		_ADR	SPACE
 2099              	CHAR2:
 2100 3830 F5270000 		_DONXT	CHAR1
 2100      2C380000 
 2101 3838 13260000 		_UNNEST
 2102              	
 2103              	/***********************
 2104              	    TYPE	( b u -- )
 2105              	 	Output u characters 
 2106              		from b.
 2107              	************************/
 2108 383c 08380000 		_HEADER TYPEE,4,"TYPE"
 2108      04545950 
 2108      450000BF 
 2109 3848 504700BF 		_NEST
 2110 384c C9280000 		_ADR  TOR   // ( a+1 -- R: u )
 2111 3850 27280000 		_BRAN	TYPE2
 2111      64380000 
 2112              	TYPE1:  
 2113 3858 912D0000 		_ADR  COUNT
 2114 385c 11320000 		_ADR TCHAR
 2115 3860 DD260000 		_ADR EMIT
 2116              	TYPE2:  
 2117 3864 F5270000 		_DONXT	TYPE1
 2117      58380000 
 2118 386c 2D290000 		_ADR	DROP
 2119 3870 13260000 		_UNNEST
 2120              	
 2121              	/***************************
 2122              	    CR	  ( -- )
 2123              	 	Output a carriage return
 2124              		and a line feed.
 2125              	****************************/
 2126 3874 40380000 		_HEADER CR,2,"CR"
 2126      02435200 
 2127 387c 504700BF 		_NEST
 2128 3880 D3270000 		_DOLIT	CRR
 2128      0D000000 
 2129 3888 DD260000 		_ADR	EMIT
 2130 388c D3270000 		_DOLIT	LF
 2130      0A000000 
 2131 3894 DD260000 		_ADR	EMIT
 2132 3898 13260000 		_UNNEST
 2133              	
 2134              	/******************************************
 2135              	  do_$	( -- a )
 2136              	  Return the address of a compiled string.
 2137              	  adjust return address to skip over it.
ARM GAS  forth.s 			page 136


 2138              	hidden word used by compiler. 
 2139              	******************************************/
 2140              	DOSTR:
 2141 389c 504700BF 		_NEST     
 2142              	/* compiled string address is 2 levels deep */
 2143 38a0 85280000 		_ADR	RFROM	// { -- a1 }
 2144 38a4 85280000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2145 38a8 3D290000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2146 38ac 912D0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2147 38b0 012A0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2148 38b4 F5310000 		_ADR	ALGND	//  end of string
 2149              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2150 38b8 C9280000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2151 38bc 4D290000 		_ADR	SWAP	//  count tugged
 2152 38c0 C9280000 		_ADR	TOR     //  ( -- a2) is string address
 2153 38c4 13260000 		_UNNEST
 2154              	
 2155              	/******************************************
 2156              	    $"|	( -- a )
 2157              	 	Run time routine compiled by _". 
 2158              		Return address of a compiled string.
 2159              	hidden word used by compiler
 2160              	*****************************************/
 2161              	STRQP:
 2162 38c8 504700BF 		_NEST
 2163 38cc 9D380000 		_ADR	DOSTR
 2164 38d0 13260000 		_UNNEST			// force a call to dostr
 2165              	
 2166              	/*******************************
 2167              	    .$	( a -- )
 2168              	 	Run time routine of ." 
 2169              		Output a compiled string.
 2170              	hidden word used by compiler
 2171              	*******************************/
 2172              	DOTST:
 2173 38d4 504700BF 		_NEST
 2174 38d8 912D0000 		_ADR	COUNT // ( -- a+1 c )
 2175 38dc 49380000 		_ADR	TYPEE
 2176 38e0 13260000 		_UNNEST
 2177              	
 2178              	/**********************
 2179              	    ."|	( -- )
 2180              	 	Run time routine of ." 
 2181              		Output a compiled string.
 2182              	hidden word used by compiler
 2183              	*****************************/
 2184              	DOTQP:
 2185 38e4 504700BF 		_NEST
 2186 38e8 9D380000 		_ADR	DOSTR
 2187 38ec D5380000 		_ADR	DOTST
 2188 38f0 13260000 		_UNNEST
 2189              	
 2190              	/******************************
 2191              	    .R	  ( n +n -- )
 2192              	 	Display an integer in a 
 2193              		field of n columns, 
 2194              		right justified.
ARM GAS  forth.s 			page 137


 2195              	*******************************/
 2196 38f4 78380000 		_HEADER DOTR,2,".R"
 2196      022E5200 
 2197 38fc 504700BF 		_NEST
 2198 3900 C9280000 		_ADR	TOR
 2199 3904 59350000 		_ADR	STRR
 2200 3908 85280000 		_ADR	RFROM
 2201 390c 61290000 		_ADR	OVER
 2202 3910 112A0000 		_ADR	SUBB
 2203 3914 11380000 		_ADR	SPACS
 2204 3918 49380000 		_ADR	TYPEE
 2205 391c 13260000 		_UNNEST
 2206              	
 2207              	/*************************
 2208              	    U.R	 ( u +n -- )
 2209              	 	Display an unsigned 
 2210              		integer in n column, 
 2211              		right justified.
 2212              	***************************/
 2213 3920 F8380000 		_HEADER UDOTR,3,"U.R"
 2213      03552E52 
 2214 3928 504700BF 		_NEST
 2215 392c 4D290000 		_ADR	SWAP 
 2216 3930 35300000 		_ADR 	STOD 
 2217 3934 252B0000 		_ADR	ROT 
 2218 3938 C9280000 		_ADR	TOR
 2219 393c 71340000 		_ADR	BDIGS
 2220 3940 DD340000 		_ADR	DIGS
 2221 3944 39350000 		_ADR	EDIGS
 2222 3948 85280000 		_ADR	RFROM
 2223 394c 61290000 		_ADR	OVER
 2224 3950 112A0000 		_ADR	SUBB
 2225 3954 11380000 		_ADR	SPACS
 2226 3958 49380000 		_ADR	TYPEE
 2227 395c 13260000 		_UNNEST
 2228              	
 2229              	/************************
 2230              	    U.	  ( u -- )
 2231              	 	Display an unsigned 
 2232              		integer in free format.
 2233              	***************************/
 2234 3960 24390000 		_HEADER UDOT,2,"U."
 2234      02552E00 
 2235 3968 504700BF 		_NEST
 2236 396c 35300000 		_ADR 	STOD 
 2237 3970 71340000 		_ADR	BDIGS
 2238 3974 DD340000 		_ADR	DIGS
 2239 3978 39350000 		_ADR	EDIGS
 2240 397c F5370000 		_ADR	SPACE
 2241 3980 49380000 		_ADR	TYPEE
 2242 3984 13260000 		_UNNEST
 2243              	
 2244              	/************************
 2245              	    .	   ( w -- )
 2246              	 	Display an integer 
 2247              		in free format, 
 2248              		preceeded by a space.
ARM GAS  forth.s 			page 138


 2249              	**************************/
 2250 3988 64390000 		_HEADER DOT,1,"."
 2250      012E00BF 
 2251 3990 504700BF 		_NEST
 2252 3994 2D2E0000 		_ADR	BASE
 2253 3998 59280000 		_ADR	AT
 2254 399c D3270000 		_DOLIT 10
 2254      0A000000 
 2255 39a4 A9290000 		_ADR	XORR			// ?decimal
 2256 39a8 13280000 		_QBRAN	DOT1
 2256      B8390000 
 2257 39b0 69390000 		_ADR	UDOT
 2258 39b4 13260000 		_UNNEST			// no,display unsigned
 2259              	DOT1:
 2260 39b8 59350000 	    _ADR	STRR
 2261 39bc F5370000 		_ADR	SPACE
 2262 39c0 49380000 		_ADR	TYPEE
 2263 39c4 13260000 		_UNNEST			// yes, display signed
 2264              	
 2265              	/*************************
 2266              	   D. ( d -- )
 2267              	   display double integer 
 2268              	**************************/
 2269 39c8 8C390000 		_HEADER DDOT,2,"D."
 2269      02442E00 
 2270 39d0 504700BF 		_NEST 
 2271 39d4 3D290000 		_ADR DUPP 
 2272 39d8 C9280000 		_ADR TOR 
 2273 39dc A92B0000 		_ADR DABS 
 2274 39e0 71340000 		_ADR BDIGS
 2275 39e4 DD340000 		_ADR DIGS 
 2276 39e8 85280000 		_ADR RFROM
 2277 39ec 11350000 		_ADR SIGN 
 2278 39f0 39350000 		_ADR EDIGS
 2279 39f4 F5370000 		_ADR SPACE 
 2280 39f8 49380000 		_ADR TYPEE 
 2281 39fc 13260000 		_UNNEST 
 2282              	
 2283              	
 2284              	/***********************
 2285              		H. ( w -- )
 2286              		display integer 
 2287              		in hexadecimal 
 2288              	*********************/
 2289 3a00 CC390000 		_HEADER HDOT,2,"H."
 2289      02482E00 
 2290 3a08 504700BF 		_NEST 
 2291 3a0c 2D2E0000 		_ADR BASE
 2292 3a10 59280000 		_ADR AT 
 2293 3a14 4D290000 		_ADR SWAP
 2294 3a18 8D350000 		_ADR HEX
 2295 3a1c 69390000 		_ADR UDOT 
 2296 3a20 2D2E0000 		_ADR BASE
 2297 3a24 45280000 		_ADR STORE  
 2298 3a28 13260000 		_UNNEST 
 2299              	
 2300              	
ARM GAS  forth.s 			page 139


 2301              	/***********************
 2302              	    ?	   ( a -- )
 2303              	 	Display the contents
 2304              		in a memory cell.
 2305              	*************************/
 2306 3a2c 043A0000 		_HEADER QUEST,1,"?"
 2306      013F00BF 
 2307 3a34 504700BF 		_NEST
 2308 3a38 59280000 		_ADR	AT
 2309 3a3c 91390000 		_ADR	DOT
 2310 3a40 13260000 		_UNNEST
 2311              	
 2312              	/**************
 2313              	  Parsing
 2314              	***************/
 2315              	
 2316              	/*********************************************
 2317              	    parse	( b u c -- b u delta //  string> )
 2318              	 	Scan word delimited by c. 
 2319              		Return found string and its offset.
 2320              	hidden word used by PARSE
 2321              	**********************************************/
 2322              	PARS:
 2323 3a44 504700BF 		_NEST
 2324 3a48 392E0000 		_ADR	TEMP
 2325 3a4c 45280000 		_ADR	STORE
 2326 3a50 61290000 		_ADR	OVER
 2327 3a54 C9280000 		_ADR	TOR
 2328 3a58 3D290000 		_ADR	DUPP
 2329 3a5c 13280000 		_QBRAN	PARS8
 2329      583B0000 
 2330 3a64 6D2A0000 		_ADR	ONEM
 2331 3a68 392E0000 		_ADR	TEMP
 2332 3a6c 59280000 		_ADR	AT
 2333 3a70 BD2A0000 		_ADR	BLANK
 2334 3a74 892C0000 		_ADR	EQUAL
 2335 3a78 13280000 		_QBRAN	PARS3
 2335      CC3A0000 
 2336 3a80 C9280000 		_ADR	TOR
 2337              	PARS1:
 2338 3a84 BD2A0000 		_ADR	BLANK
 2339 3a88 61290000 		_ADR	OVER
 2340 3a8c 79280000 		_ADR	CAT	 // skip leading blanks 
 2341 3a90 112A0000 		_ADR	SUBB
 2342 3a94 71290000 		_ADR	ZLESS
 2343 3a98 0D2C0000 		_ADR	INVER
 2344 3a9c 13280000 		_QBRAN	PARS2
 2344      C83A0000 
 2345 3aa4 5D2A0000 		_ADR	ONEP
 2346 3aa8 F5270000 		_DONXT	PARS1
 2346      843A0000 
 2347 3ab0 85280000 		_ADR	RFROM
 2348 3ab4 2D290000 		_ADR	DROP
 2349 3ab8 D3270000 		_DOLIT	0
 2349      00000000 
 2350 3ac0 3D290000 		_ADR	DUPP
 2351 3ac4 13260000 		_UNNEST
ARM GAS  forth.s 			page 140


 2352              	PARS2:
 2353 3ac8 85280000 		_ADR	RFROM
 2354              	PARS3:
 2355 3acc 61290000 		_ADR	OVER
 2356 3ad0 4D290000 		_ADR	SWAP
 2357 3ad4 C9280000 		_ADR	TOR
 2358              	PARS4:
 2359 3ad8 392E0000 		_ADR	TEMP
 2360 3adc 59280000 		_ADR	AT
 2361 3ae0 61290000 		_ADR	OVER
 2362 3ae4 79280000 		_ADR	CAT
 2363 3ae8 112A0000 		_ADR	SUBB // scan for delimiter
 2364 3aec 392E0000 		_ADR	TEMP
 2365 3af0 59280000 		_ADR	AT
 2366 3af4 BD2A0000 		_ADR	BLANK
 2367 3af8 892C0000 		_ADR	EQUAL
 2368 3afc 13280000 		_QBRAN	PARS5
 2368      083B0000 
 2369 3b04 71290000 		_ADR	ZLESS
 2370              	PARS5:
 2371 3b08 13280000 		_QBRAN	PARS6
 2371      2C3B0000 
 2372 3b10 5D2A0000 		_ADR	ONEP
 2373 3b14 F5270000 		_DONXT	PARS4
 2373      D83A0000 
 2374 3b1c 3D290000 		_ADR	DUPP
 2375 3b20 C9280000 		_ADR	TOR
 2376 3b24 27280000 		_BRAN	PARS7
 2376      403B0000 
 2377              	PARS6:
 2378 3b2c 85280000 		_ADR	RFROM
 2379 3b30 2D290000 		_ADR	DROP
 2380 3b34 3D290000 		_ADR	DUPP
 2381 3b38 5D2A0000 		_ADR	ONEP
 2382 3b3c C9280000 		_ADR	TOR
 2383              	PARS7:
 2384 3b40 61290000 		_ADR	OVER
 2385 3b44 112A0000 		_ADR	SUBB
 2386 3b48 85280000 		_ADR	RFROM
 2387 3b4c 85280000 		_ADR	RFROM
 2388 3b50 112A0000 		_ADR	SUBB
 2389 3b54 13260000 		_UNNEST
 2390              	PARS8:
 2391 3b58 61290000 		_ADR	OVER
 2392 3b5c 85280000 		_ADR	RFROM
 2393 3b60 112A0000 		_ADR	SUBB
 2394 3b64 13260000 		_UNNEST
 2395              	
 2396              	/************************************
 2397              	    PARSE	( c -- b u //  string> )
 2398              	 	Scan input stream and return 
 2399              		counted string delimited by c.
 2400              	************************************/
 2401 3b68 303A0000 		_HEADER PARSE,5,"PARSE"
 2401      05504152 
 2401      534500BF 
 2402 3b74 504700BF 		_NEST
ARM GAS  forth.s 			page 141


 2403 3b78 C9280000 		_ADR	TOR
 2404 3b7c E1320000 		_ADR	TIB
 2405 3b80 652E0000 		_ADR	INN
 2406 3b84 59280000 		_ADR	AT
 2407 3b88 012A0000 		_ADR	PLUS			// current input buffer pointer
 2408 3b8c 7D2E0000 		_ADR	NTIB
 2409 3b90 59280000 		_ADR	AT
 2410 3b94 652E0000 		_ADR	INN
 2411 3b98 59280000 		_ADR	AT
 2412 3b9c 112A0000 		_ADR	SUBB			// remaining count
 2413 3ba0 85280000 		_ADR	RFROM
 2414 3ba4 453A0000 		_ADR	PARS
 2415 3ba8 652E0000 		_ADR	INN
 2416 3bac 492D0000 		_ADR	PSTOR
 2417 3bb0 13260000 		_UNNEST
 2418              	
 2419              	/*******************************
 2420              	    .(	  ( -- )
 2421              	 	Output following string 
 2422              		up to next ) .
 2423              	******************************/
 2424 3bb4 6C3B0000 		_HEADER DOTPR,2,".("
 2424      022E2800 
 2425 3bbc 504700BF 		_NEST
 2426 3bc0 D3270000 		_DOLIT	')'
 2426      29000000 
 2427 3bc8 753B0000 		_ADR	PARSE
 2428 3bcc 49380000 		_ADR	TYPEE
 2429 3bd0 13260000 		_UNNEST
 2430              	
 2431              	/************************
 2432              	    (	   ( -- )
 2433              	 	Ignore following 
 2434              		string up to next )
 2435              		A comment.
 2436              	************************/
 2437 3bd4 B83B0000 		_HEADER PAREN,IMEDD+1,"("
 2437      812800BF 
 2438 3bdc 504700BF 		_NEST
 2439 3be0 D3270000 		_DOLIT	')'
 2439      29000000 
 2440 3be8 753B0000 		_ADR	PARSE
 2441 3bec 4D2B0000 		_ADR	DDROP
 2442 3bf0 13260000 		_UNNEST
 2443              	
 2444              	/*******************
 2445              	    \	   ( -- )
 2446              	 	Ignore following 
 2447              		text till the 
 2448              		end of line.
 2449              	********************/
 2450 3bf4 D83B0000 		_HEADER BKSLA,IMEDD+1,"\\"
 2450      815C00BF 
 2451 3bfc 504700BF 		_NEST
 2452 3c00 7D2E0000 		_ADR	NTIB
 2453 3c04 59280000 		_ADR	AT
 2454 3c08 652E0000 		_ADR	INN
ARM GAS  forth.s 			page 142


 2455 3c0c 45280000 		_ADR	STORE
 2456 3c10 13260000 		_UNNEST
 2457              	
 2458              	/******************************
 2459              	    CHAR	( -- c )
 2460              	 	Parse next word and
 2461              		return its first character.
 2462              	*******************************/
 2463 3c14 F83B0000 		_HEADER CHAR,4,"CHAR"
 2463      04434841 
 2463      520000BF 
 2464 3c20 504700BF 		_NEST
 2465 3c24 BD2A0000 		_ADR	BLANK
 2466 3c28 753B0000 		_ADR	PARSE
 2467 3c2c 2D290000 		_ADR	DROP
 2468 3c30 79280000 		_ADR	CAT
 2469 3c34 13260000 		_UNNEST
 2470              	
 2471              	/**********************************
 2472              		[CHAR] ( -- c )
 2473              		immediate version of CHAR 
 2474              	**********************************/
 2475 3c38 183C0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2475      C65B4348 
 2475      41525D00 
 2476 3c44 504700BF 		_NEST 
 2477 3c48 213C0000 		_ADR CHAR
 2478 3c4c 6D430000 		_ADR LITER 
 2479 3c50 13260000 		_UNNEST 
 2480              	
 2481              	/**********************************
 2482              	    WORD	( c -- a //  string> )
 2483              	 	Parse a word from input stream
 2484              		and copy it to code dictionary.
 2485              	***********************************/
 2486 3c54 3C3C0000 		_HEADER WORDD,4,"WORD"
 2486      04574F52 
 2486      440000BF 
 2487 3c60 504700BF 		_NEST
 2488 3c64 753B0000 		_ADR	PARSE
 2489 3c68 A9320000 		_ADR	HERE
 2490 3c6c 9D2A0000 		_ADR	CELLP
 2491 3c70 B1330000 		_ADR	PACKS
 2492 3c74 13260000 		_UNNEST
 2493              	
 2494              	/********************************
 2495              	    TOKEN	( -- a //  string> )
 2496              	 	Parse a word from input 
 2497              		stream and copy it to 
 2498              		name dictionary.
 2499              	*********************************/
 2500 3c78 583C0000 		_HEADER TOKEN,5,"TOKEN"
 2500      05544F4B 
 2500      454E00BF 
 2501 3c84 504700BF 		_NEST
 2502 3c88 BD2A0000 		_ADR	BLANK
 2503 3c8c 613C0000 		_ADR	WORDD
ARM GAS  forth.s 			page 143


 2504 3c90 793E0000 		_ADR	UPPER 
 2505 3c94 13260000 		_UNNEST
 2506              	
 2507              	/**********************
 2508              	  Dictionary search
 2509              	***********************/
 2510              	
 2511              	/*************************
 2512              	    NAME>	( na -- ca )
 2513              	 	Return a code address
 2514              		given a name address.
 2515              	**************************/
 2516 3c98 7C3C0000 		_HEADER NAMET,5,"NAME>"
 2516      054E414D 
 2516      453E00BF 
 2517 3ca4 504700BF 		_NEST
 2518 3ca8 912D0000 		_ADR	COUNT
 2519 3cac D3270000 		_DOLIT	0x1F
 2519      1F000000 
 2520 3cb4 81290000 		_ADR	ANDD
 2521 3cb8 012A0000 		_ADR	PLUS
 2522 3cbc F5310000 		_ADR	ALGND
 2523 3cc0 13260000 		_UNNEST
 2524              	
 2525              	/***************************************
 2526              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2527              	 	Compare u bytes in two strings. 
 2528              		Return 0 if identical.
 2529              	
 2530              	  Picatout 2020-12-01, 
 2531              	    Because of problem with .align 
 2532              		directive that doesn't fill 
 2533              		with zero's I had to change 
 2534              		the "SAME?" and "FIND" 
 2535              	 	words  to do a byte by byte comparison. 
 2536              	****************************************/
 2537 3cc4 9C3C0000 		_HEADER SAMEQ,5,"SAME?"
 2537      0553414D 
 2537      453F00BF 
 2538 3cd0 504700BF 		_NEST
 2539 3cd4 C9280000 		_ADR	TOR
 2540 3cd8 27280000 		_BRAN	SAME2
 2540      1C3D0000 
 2541              	SAME1:
 2542 3ce0 61290000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2543 3ce4 B5280000 		_ADR	RAT   // a1 a2 a1 u 
 2544 3ce8 012A0000 		_ADR	PLUS  // a1 a2 a1+u 
 2545 3cec 79280000 		_ADR	CAT	   // a1 a2 c1    		
 2546 3cf0 61290000 		_ADR	OVER  // a1 a2 c1 a2 
 2547 3cf4 B5280000 		_ADR	RAT    
 2548 3cf8 012A0000 		_ADR	PLUS    
 2549 3cfc 79280000 		_ADR	CAT	  // a1 a2 c1 c2
 2550 3d00 112A0000 		_ADR	SUBB  
 2551 3d04 112B0000 		_ADR	QDUP
 2552 3d08 13280000 		_QBRAN	SAME2
 2552      1C3D0000 
 2553 3d10 85280000 		_ADR	RFROM
ARM GAS  forth.s 			page 144


 2554 3d14 2D290000 		_ADR	DROP
 2555 3d18 13260000 		_UNNEST	// strings not equal
 2556              	SAME2:
 2557 3d1c F5270000 		_DONXT	SAME1
 2557      E03C0000 
 2558 3d24 D3270000 		_DOLIT	0
 2558      00000000 
 2559 3d2c 13260000 		_UNNEST	// strings equal
 2560              	
 2561              	/***********************************
 2562              	    FIND	( a na -- ca na | a F )
 2563              	 	Search a vocabulary for a string.
 2564              		Return ca and na if succeeded.
 2565              	hidden word used by NAME?
 2566              	
 2567              	  Picatout 2020-12-01,  
 2568              		 Modified from original. 
 2569              	   See comment for word "SAME?" 
 2570              	************************************/
 2571              	FIND:
 2572 3d30 504700BF 		_NEST
 2573 3d34 4D290000 		_ADR	SWAP			// na a	
 2574 3d38 912D0000 		_ADR	COUNT			// na a+1 count
 2575 3d3c 3D290000 		_ADR	DUPP 
 2576 3d40 392E0000 		_ADR	TEMP
 2577 3d44 45280000 		_ADR	STORE			// na a+1 count 
 2578 3d48 C9280000 		_ADR  TOR		// na a+1  R: count  
 2579 3d4c 4D290000 		_ADR	SWAP			// a+1 na
 2580              	FIND1:
 2581 3d50 3D290000 		_ADR	DUPP			// a+1 na na
 2582 3d54 13280000 		_QBRAN	FIND6	// end of vocabulary
 2582      A83D0000 
 2583 3d5c 3D290000 		_ADR	DUPP			// a+1 na na
 2584 3d60 79280000 		_ADR	CAT			// a+1 na name1
 2585 3d64 D3270000 		_DOLIT	MASKK
 2585      1FFFFFFF 
 2586 3d6c 81290000 		_ADR	ANDD
 2587 3d70 B5280000 		_ADR	RAT			// a+1 na name1 count 
 2588 3d74 A9290000 		_ADR	XORR			// a+1 na,  same length?
 2589 3d78 13280000 		_QBRAN	FIND2
 2589      903D0000 
 2590 3d80 AD2A0000 		_ADR	CELLM			// a+1 la
 2591 3d84 59280000 		_ADR	AT			// a+1 next_na
 2592 3d88 27280000 		_BRAN	FIND1			// try next word
 2592      503D0000 
 2593              	FIND2:   
 2594 3d90 5D2A0000 		_ADR	ONEP			// a+1 na+1
 2595 3d94 392E0000 		_ADR	TEMP
 2596 3d98 59280000 		_ADR	AT			// a+1 na+1 count
 2597 3d9c D13C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2598              	FIND3:	
 2599 3da0 27280000 		_BRAN	FIND4
 2599      C03D0000 
 2600              	FIND6:	
 2601 3da8 85280000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2602 3dac 2D290000 		_ADR	DROP			// a+1 0
 2603 3db0 4D290000 		_ADR	SWAP			// 0 a+1
ARM GAS  forth.s 			page 145


 2604 3db4 6D2A0000 		_ADR	ONEM			// 0 a
 2605 3db8 4D290000 		_ADR	SWAP			// a 0 
 2606 3dbc 13260000 		_UNNEST			// return without a match
 2607              	FIND4:	
 2608 3dc0 13280000 		_QBRAN	FIND5			// a+1 na+1
 2608      DC3D0000 
 2609 3dc8 6D2A0000 		_ADR	ONEM			// a+1 na
 2610 3dcc AD2A0000 		_ADR	CELLM			// a+4 la
 2611 3dd0 59280000 		_ADR	AT			// a+1 next_na
 2612 3dd4 27280000 		_BRAN	FIND1			// compare next name
 2612      503D0000 
 2613              	FIND5:	
 2614 3ddc 85280000 		_ADR	RFROM			// a+1 na+1 count
 2615 3de0 2D290000 		_ADR	DROP			// a+1 na+1
 2616 3de4 4D290000 		_ADR	SWAP			// na+1 a+1
 2617 3de8 2D290000 		_ADR	DROP			// na+1
 2618 3dec 6D2A0000 		_ADR	ONEM			// na
 2619 3df0 3D290000 		_ADR	DUPP			// na na
 2620 3df4 A53C0000 		_ADR	NAMET			// na ca
 2621 3df8 4D290000 		_ADR	SWAP			// ca na
 2622 3dfc 13260000 		_UNNEST			//  return with a match
 2623              	
 2624              	/********************************
 2625              	    NAME?	( a -- ca na | a F )
 2626              	 	Search all context vocabularies 
 2627              		for a string.
 2628              	***********************************/
 2629 3e00 C83C0000 		_HEADER NAMEQ,5,"NAME?"
 2629      054E414D 
 2629      453F00BF 
 2630 3e0c 504700BF 		_NEST
 2631 3e10 C12E0000 		_ADR	CNTXT
 2632 3e14 59280000 		_ADR	AT
 2633 3e18 313D0000 		_ADR	FIND
 2634 3e1c 13260000 		_UNNEST
 2635              	
 2636              	/********************
 2637              	  console input
 2638              	********************/
 2639              	
 2640              	/****************************
 2641              		ASCIZ ( a -- a+ )
 2642              		convert counted string to 
 2643              		null terminated string 
 2644              		in pad.
 2645              	*****************************/
 2646 3e20 043E0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2646      05415343 
 2646      495A00BF 
 2647 3e2c 504700BF 		_NEST 
 2648 3e30 912D0000 		_ADR COUNT
 2649 3e34 3D290000 		_ADR DUPP
 2650 3e38 C9280000 		_ADR TOR 
 2651 3e3c C1320000 		_ADR PAD 
 2652 3e40 4D290000 		_ADR SWAP
 2653 3e44 49330000 		_ADR MOVE  
 2654 3e48 C1320000 		_ADR PAD 
ARM GAS  forth.s 			page 146


 2655 3e4c 85280000 		_ADR RFROM
 2656 3e50 012A0000 		_ADR PLUS 
 2657 3e54 D3270000 		_DOLIT 0 
 2657      00000000 
 2658 3e5c 4D290000 		_ADR SWAP  
 2659 3e60 65280000 		_ADR CSTOR
 2660 3e64 C1320000 		_ADR PAD   
 2661 3e68 13260000 		_UNNEST 
 2662              	
 2663              	/***********************
 2664              		UPPER (cstring -- cstring )
 2665              		convert to upper case in situ
 2666              	*******************************/
 2667 3e6c 243E0000 		_HEADER UPPER,5,"UPPER"
 2667      05555050 
 2667      455200BF 
 2668 3e78 504700BF 		_NEST 
 2669 3e7c 3D290000 		_ADR DUPP 
 2670 3e80 C9280000 		_ADR TOR 
 2671 3e84 912D0000 		_ADR COUNT
 2672 3e88 D3270000 		_DOLIT 0x1f
 2672      1F000000 
 2673 3e90 81290000 		_ADR ANDD
 2674 3e94 C9280000 		_ADR TOR 
 2675 3e98 27280000 		_BRAN 3f
 2675      EC3E0000 
 2676 3ea0 3D290000 	1:  _ADR DUPP 
 2677 3ea4 912D0000 		_ADR COUNT 
 2678 3ea8 3D290000 		_ADR DUPP 
 2679 3eac D3270000 		_DOLIT 'a'-1
 2679      60000000 
 2680 3eb4 092D0000 		_ADR GREAT
 2681 3eb8 13280000 		_QBRAN 2f 
 2681      E43E0000 
 2682 3ec0 3D290000 		_ADR DUPP 
 2683 3ec4 D3270000 		_DOLIT 'z'+1 
 2683      7B000000 
 2684 3ecc D92C0000 		_ADR LESS 
 2685 3ed0 13280000 		_QBRAN 2f 
 2685      E43E0000 
 2686 3ed8 D3270000 		_DOLIT 0x5f  
 2686      5F000000 
 2687 3ee0 81290000 		_ADR ANDD
 2688 3ee4 252B0000 	2:	_ADR ROT
 2689 3ee8 65280000 		_ADR CSTOR
 2690 3eec F5270000 	3:  _DONXT 1b
 2690      A03E0000 
 2691 3ef4 2D290000 		_ADR DROP 
 2692 3ef8 85280000 		_ADR RFROM
 2693 3efc 13260000 		_UNNEST 
 2694              	
 2695              	/**************************************
 2696              	   BKSP  ( bot eot cur -- bot eot cur )
 2697              	   Move cursor left by one character.
 2698              	hidden word used by KTAP
 2699              	***************************************/
 2700              	BKSP:
ARM GAS  forth.s 			page 147


 2701 3f00 504700BF 		_NEST
 2702 3f04 C9280000 		_ADR	TOR
 2703 3f08 61290000 		_ADR	OVER
 2704 3f0c 85280000 		_ADR	RFROM
 2705 3f10 4D290000 		_ADR	SWAP
 2706 3f14 61290000 		_ADR	OVER
 2707 3f18 A9290000 		_ADR	XORR
 2708 3f1c 13280000 		_QBRAN	BACK1
 2708      483F0000 
 2709 3f24 D3270000 		_DOLIT	BKSPP
 2709      08000000 
 2710 3f2c DD260000 		_ADR	EMIT
 2711 3f30 6D2A0000 		_ADR	ONEM
 2712 3f34 BD2A0000 		_ADR	BLANK
 2713 3f38 DD260000 		_ADR	EMIT
 2714 3f3c D3270000 		_DOLIT	BKSPP
 2714      08000000 
 2715 3f44 DD260000 		_ADR	EMIT
 2716              	BACK1:
 2717 3f48 13260000 		  _UNNEST
 2718              	
 2719              	/****************************************
 2720              	   TAP	 ( bot eot cur c -- bot eot cur )
 2721              	   Accept and echo the key stroke 
 2722              	   and bump the cursor.
 2723              	hidden word used by KTAP 
 2724              	****************************************/
 2725              	TAP:
 2726 3f4c 504700BF 		_NEST
 2727 3f50 3D290000 		_ADR	DUPP
 2728 3f54 DD260000 		_ADR	EMIT
 2729 3f58 61290000 		_ADR	OVER
 2730 3f5c 65280000 		_ADR	CSTOR
 2731 3f60 5D2A0000 		_ADR	ONEP
 2732 3f64 13260000 		_UNNEST
 2733              	
 2734              	
 2735              	/*******************************************
 2736              	    kTAP	( bot eot cur c -- bot eot cur )
 2737              	 	Process a key stroke, CR or backspace.
 2738              	hidden word used by ACCEPT 
 2739              	*******************************************/
 2740              	KTAP:
 2741              	TTAP:
 2742 3f68 504700BF 		_NEST
 2743 3f6c 3D290000 		_ADR	DUPP
 2744 3f70 D3270000 		_DOLIT	CRR
 2744      0D000000 
 2745 3f78 A9290000 		_ADR	XORR
 2746 3f7c 13280000 		_QBRAN  KTAP2
 2746      AC3F0000 
 2747 3f84 D3270000 		_DOLIT	BKSPP
 2747      08000000 
 2748 3f8c A9290000 		_ADR	XORR
 2749 3f90 13280000 		_QBRAN	KTAP1
 2749      A43F0000 
 2750 3f98 BD2A0000 		_ADR	BLANK
ARM GAS  forth.s 			page 148


 2751 3f9c 4D3F0000 		_ADR	TAP
 2752 3fa0 13260000 		_UNNEST
 2753              	//	.word	0			// patch
 2754              	KTAP1:
 2755 3fa4 013F0000 		_ADR	BKSP
 2756 3fa8 13260000 		_UNNEST
 2757              	KTAP2:
 2758 3fac 2D290000 		_ADR	DROP
 2759 3fb0 4D290000 		_ADR	SWAP
 2760 3fb4 2D290000 		_ADR	DROP
 2761 3fb8 3D290000 		_ADR	DUPP
 2762 3fbc 13260000 		_UNNEST
 2763              	
 2764              	/************************************
 2765              	    ACCEPT	( b u -- b u )
 2766              	 	Accept characters to input 
 2767              		buffer. Return with actual count.
 2768              	*************************************/
 2769 3fc0 703E0000 		_HEADER ACCEP,6,"ACCEPT"
 2769      06414343 
 2769      45505400 
 2770 3fcc 504700BF 		_NEST
 2771 3fd0 61290000 		_ADR	OVER
 2772 3fd4 012A0000 		_ADR	PLUS
 2773 3fd8 61290000 		_ADR	OVER
 2774              	ACCP1:
 2775 3fdc 752B0000 		_ADR	DDUP
 2776 3fe0 A9290000 		_ADR	XORR
 2777 3fe4 13280000 		_QBRAN	ACCP4
 2777      24400000 
 2778 3fec B9260000 		_ADR	KEY
 2779 3ff0 3D290000 		_ADR	DUPP
 2780 3ff4 BD2A0000 		_ADR	BLANK
 2781 3ff8 D3270000 		_DOLIT 127
 2781      7F000000 
 2782 4000 592F0000 		_ADR	WITHI
 2783 4004 13280000 		_QBRAN	ACCP2
 2783      18400000 
 2784 400c 4D3F0000 		_ADR	TAP
 2785 4010 27280000 		_BRAN	ACCP3
 2785      1C400000 
 2786              	ACCP2:
 2787 4018 693F0000 		_ADR	KTAP
 2788              	ACCP3:	  
 2789 401c 27280000 		_BRAN	ACCP1
 2789      DC3F0000 
 2790              	ACCP4:
 2791 4024 2D290000 		_ADR	DROP
 2792 4028 61290000 		_ADR	OVER
 2793 402c 112A0000 		_ADR	SUBB
 2794 4030 13260000 		_UNNEST
 2795              	
 2796              	/*****************************
 2797              	    QUERY	( -- )
 2798              	 	Accept input stream 
 2799              		to terminal input buffer.
 2800              	******************************/
ARM GAS  forth.s 			page 149


 2801 4034 C43F0000 		_HEADER QUERY,5,"QUERY"
 2801      05515545 
 2801      525900BF 
 2802 4040 504700BF 		_NEST
 2803 4044 E1320000 		_ADR	TIB
 2804 4048 D3270000 		_DOLIT 80
 2804      50000000 
 2805 4050 CD3F0000 		_ADR	ACCEP
 2806 4054 7D2E0000 		_ADR	NTIB
 2807 4058 45280000 		_ADR	STORE
 2808 405c 2D290000 		_ADR	DROP
 2809 4060 D3270000 		_DOLIT	0
 2809      00000000 
 2810 4068 652E0000 		_ADR	INN
 2811 406c 45280000 		_ADR	STORE
 2812 4070 13260000 		_UNNEST
 2813              	
 2814              	/********************
 2815              	  Error handling
 2816              	********************/
 2817              	
 2818              	/*********************
 2819              	    ABORT	( a -- )
 2820              	 	Reset data stack 
 2821              		and jump to QUIT.
 2822              	**********************/
 2823 4074 38400000 		_HEADER ABORT,5,"ABORT"
 2823      0541424F 
 2823      525400BF 
 2824 4080 504700BF 		_NEST
 2825              	ABORT1:
 2826 4084 F5370000 		_ADR	SPACE
 2827 4088 912D0000 		_ADR	COUNT
 2828 408c 49380000 		_ADR	TYPEE
 2829 4090 D3270000 		_DOLIT	0X3F
 2829      3F000000 
 2830 4098 DD260000 		_ADR	EMIT
 2831 409c 7D380000 		_ADR	CR
 2832 40a0 09420000 		_ADR	PRESE
 2833 40a4 27280000 		_BRAN	QUIT
 2833      28420000 
 2834              	
 2835              	/*******************************
 2836              	    _abort"	( f -- )
 2837              	 	Run time routine of ABORT"
 2838              		Abort with a message.
 2839              	hidden used by compiler 
 2840              	********************************/
 2841              	ABORQ:
 2842 40ac 504700BF 		_NEST
 2843 40b0 9D380000 		_ADR	DOSTR
 2844 40b4 4D290000 		_ADR	SWAP 
 2845 40b8 13280000 		_QBRAN	1f	// text flag
 2845      C8400000 
 2846 40c0 27280000 		_BRAN	ABORT1
 2846      84400000 
 2847              	1:
ARM GAS  forth.s 			page 150


 2848 40c8 2D290000 		_ADR	DROP
 2849 40cc 13260000 		_UNNEST			// drop error
 2850              	
 2851              	/************************
 2852              	  The text interpreter
 2853              	************************/
 2854              	
 2855              	/***************************
 2856              	    $INTERPRET  ( a -- )
 2857              	 	Interpret a word. 
 2858              		If failed, try to 
 2859              		convert it to an integer.
 2860              	******************************/
 2861 40d0 78400000 		_HEADER INTER,10,"$INTERPRET"
 2861      0A24494E 
 2861      54455250 
 2861      52455400 
 2862 40e0 504700BF 		_NEST
 2863 40e4 0D3E0000 		_ADR	NAMEQ
 2864 40e8 112B0000 		_ADR	QDUP	// ?defined
 2865 40ec 13280000 		_QBRAN	INTE1
 2865      20410000 
 2866 40f4 59280000 		_ADR	AT
 2867 40f8 D3270000 		_DOLIT	COMPO
 2867      40000000 
 2868 4100 81290000 		_ADR	ANDD	// ?compile only lexicon bits
 2869 4104 AD400000 		_ABORQ	13," compile only"
 2869      0D20636F 
 2869      6D70696C 
 2869      65206F6E 
 2869      6C7900BF 
 2870 4118 E9270000 		_ADR	EXECU
 2871 411c 13260000 		_UNNEST			// execute defined word
 2872              	INTE1:
 2873 4120 41210000 		_ADR	NUMBER 
 2874 4124 13280000 		_QBRAN	INTE2
 2874      30410000 
 2875 412c 13260000 		_UNNEST
 2876              	INTE2:
 2877 4130 81400000 		_ADR	ABORT	// error
 2878              	
 2879              	/******************************
 2880              	    [	   ( -- )
 2881              	 	Start the text interpreter.
 2882              	*******************************/
 2883 4134 D4400000 		_HEADER LBRAC,IMEDD+1,"["
 2883      815B00BF 
 2884 413c 504700BF 		_NEST
 2885 4140 D3270000 		_DOLIT	INTER
 2885      E0400000 
 2886 4148 952E0000 		_ADR	TEVAL
 2887 414c 45280000 		_ADR	STORE
 2888 4150 13260000 		_UNNEST
 2889              	
 2890              	/**********************
 2891              	    .OK	 ( -- )
 2892              	 	Display "ok" only 
ARM GAS  forth.s 			page 151


 2893              		while interpreting.
 2894              	************************/
 2895 4154 38410000 		_HEADER DOTOK,3,".OK"
 2895      032E4F4B 
 2896 415c 504700BF 		_NEST
 2897 4160 D3270000 		_DOLIT	INTER
 2897      E0400000 
 2898 4168 952E0000 		_ADR	TEVAL
 2899 416c 59280000 		_ADR	AT
 2900 4170 892C0000 		_ADR	EQUAL
 2901 4174 13280000 		_QBRAN	DOTO1
 2901      84410000 
 2902 417c E5380000 		_DOTQP	3," ok"
 2902      03206F6B 
 2903              	DOTO1:
 2904 4184 7D380000 		_ADR	CR
 2905 4188 13260000 		_UNNEST
 2906              	
 2907              	/*************************
 2908              	    ?STACK	( -- )
 2909              	 	Abort if the data 
 2910              		stack underflows.
 2911              	************************/
 2912 418c 58410000 		_HEADER QSTAC,6,"?STACK"
 2912      063F5354 
 2912      41434B00 
 2913 4198 504700BF 		_NEST
 2914 419c 5D320000 		_ADR	DEPTH
 2915 41a0 71290000 		_ADR	ZLESS	// check only for underflow
 2916 41a4 AD400000 		_ABORQ	9,"underflow"
 2916      09756E64 
 2916      6572666C 
 2916      6F7700BF 
 2917 41b4 13260000 		_UNNEST
 2918              	
 2919              	/*******************
 2920              	    EVAL	( -- )
 2921              	 	Interpret the 
 2922              		input stream.
 2923              	*******************/
 2924 41b8 90410000 		_HEADER EVAL,4,"EVAL"
 2924      04455641 
 2924      4C0000BF 
 2925 41c4 504700BF 		_NEST
 2926              	EVAL1:
 2927 41c8 853C0000 	    _ADR	TOKEN
 2928 41cc 3D290000 		_ADR	DUPP
 2929 41d0 79280000 		_ADR	CAT	// ?input stream empty
 2930 41d4 13280000 		_QBRAN	EVAL2
 2930      F0410000 
 2931 41dc 952E0000 		_ADR	TEVAL
 2932 41e0 F9320000 		_ADR	ATEXE
 2933 41e4 99410000 		_ADR	QSTAC	// evaluate input, check stack
 2934 41e8 27280000 		_BRAN	EVAL1
 2934      C8410000 
 2935              	EVAL2:
 2936 41f0 2D290000 		_ADR	DROP
ARM GAS  forth.s 			page 152


 2937 41f4 5D410000 		_ADR	DOTOK
 2938 41f8 13260000 		_UNNEST	// prompt
 2939              	
 2940              	/**********************************
 2941              	    PRESET	( -- )
 2942              	 	Reset data stack pointer 
 2943              		and the terminal input buffer.
 2944              	**********************************/
 2945 41fc BC410000 		_HEADER PRESE,6,"PRESET"
 2945      06505245 
 2945      53455400 
 2946 4208 504700BF 		_NEST 
 2947 420c D3270000 		_DOLIT SPP 
 2947      80FE0120 
 2948 4214 09290000 		_ADR SPSTOR 
 2949 4218 13260000 		_UNNEST 
 2950              	
 2951              	/*********************
 2952              	    QUIT	( -- )
 2953              	 	Reset return stack 
 2954              		pointer and start 
 2955              		text interpreter.
 2956              	***********************/
 2957 421c 00420000 		_HEADER QUIT,4,"QUIT"
 2957      04515549 
 2957      540000BF 
 2958 4228 D3270000 		_DOLIT RPP 
 2958      00FF0120 
 2959 4230 F9280000 		_ADR RPSTOR 
 2960              	QUIT1:
 2961 4234 3D410000 		_ADR	LBRAC			// start interpretation
 2962              	QUIT2:
 2963 4238 41400000 		_ADR	QUERY			// get input
 2964 423c C5410000 		_ADR	EVAL
 2965 4240 27280000 		_BRAN	QUIT2	// continue till error
 2965      38420000 
 2966              	
 2967              	/***************************
 2968              		FORGET ( <string> -- )
 2969              		forget all definition 
 2970              		starting at <string>
 2971              	****************************/
 2972 4248 20420000 		_HEADER FORGET,6,"FORGET"
 2972      06464F52 
 2972      47455400 
 2973 4254 504700BF 		_NEST 
 2974 4258 853C0000 		_ADR TOKEN 
 2975 425c 3D290000 		_ADR DUPP 
 2976 4260 13280000 		_QBRAN 9f 
 2976      9C420000 
 2977 4268 0D3E0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2978 426c 112B0000 		_ADR QDUP 
 2979 4270 13280000 		_QBRAN 8f
 2979      98420000 
 2980 4278 AD2A0000 		_ADR CELLM // ( ca la )
 2981 427c 3D290000 		_ADR DUPP 
 2982 4280 D52E0000 		_ADR CPP   
ARM GAS  forth.s 			page 153


 2983 4284 45280000 		_ADR STORE
 2984 4288 59280000 		_ADR AT 
 2985 428c 012F0000 		_ADR LAST 
 2986 4290 45280000 		_ADR STORE
 2987 4294 F1470000 		_ADR OVERT 
 2988 4298 2D290000 	8:  _ADR DROP 
 2989 429c 13260000 	9:	_UNNEST 
 2990              	
 2991              		.p2align 2 
 2992              	
 2993              	/*****************
 2994              	  The compiler
 2995              	******************/
 2996              	
 2997              	/**************************************
 2998              	    '	   ( -- ca )
 2999              	 	Search context vocabularies 
 3000              		for the next word in input stream.
 3001              	***************************************/
 3002 42a0 4C420000 		_HEADER TICK,1,"'"
 3002      012700BF 
 3003 42a8 504700BF 		_NEST
 3004 42ac 853C0000 		_ADR	TOKEN
 3005 42b0 0D3E0000 		_ADR	NAMEQ	// ?defined
 3006 42b4 13280000 		_QBRAN	TICK1
 3006      C0420000 
 3007 42bc 13260000 		_UNNEST	// yes, push code address
 3008              	TICK1:	
 3009 42c0 81400000 		_ADR ABORT	// no, error
 3010              	
 3011              	/***********************
 3012              	    ALLOT	( n -- )
 3013              	 	Allocate n bytes to 
 3014              		the ram area.
 3015              	************************/
 3016 42c4 A4420000 		_HEADER ALLOT,5,"ALLOT"
 3016      05414C4C 
 3016      4F5400BF 
 3017 42d0 504700BF 		_NEST
 3018 42d4 D52E0000 		_ADR	CPP
 3019 42d8 492D0000 		_ADR	PSTOR
 3020 42dc 13260000 		_UNNEST			// adjust code pointer
 3021              	
 3022              	/******************************
 3023              	    ,	   ( w -- )
 3024              	 	Compile an integer 
 3025              		into the code dictionary.
 3026              	******************************/
 3027 42e0 C8420000 		_HEADER COMMA,1,","
 3027      012C00BF 
 3028 42e8 504700BF 		_NEST
 3029 42ec A9320000 		_ADR	HERE
 3030 42f0 3D290000 		_ADR	DUPP
 3031 42f4 9D2A0000 		_ADR	CELLP	// cell boundary
 3032 42f8 D52E0000 		_ADR	CPP
 3033 42fc 45280000 		_ADR	STORE
 3034 4300 45280000 		_ADR	STORE
ARM GAS  forth.s 			page 154


 3035 4304 13260000 		_UNNEST	// adjust code pointer, compile
 3036              		.p2align 2 
 3037              	
 3038              	/************************************
 3039              	    [COMPILE]   ( -- //  string> )
 3040              	 	Compile the next immediate word 
 3041              		into code dictionary.
 3042              	*************************************/
 3043 4308 E4420000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3043      895B434F 
 3043      4D50494C 
 3043      455D00BF 
 3044 4318 504700BF 		_NEST
 3045 431c A9420000 		_ADR	TICK
 3046 4320 E9420000 		_ADR	COMMA
 3047 4324 13260000 		_UNNEST
 3048              	
 3049              	/****************************
 3050              	    COMPILE	( -- )
 3051              	 	Compile the next address 
 3052              		in colon list to code 
 3053              		dictionary.
 3054              	*******************************/
 3055 4328 0C430000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3055      47434F4D 
 3055      50494C45 
 3056 4334 504700BF 		_NEST
 3057 4338 85280000 		_ADR	RFROM
 3058 433c 3D290000 		_ADR	DUPP 
 3059 4340 59280000 		_ADR	AT
 3060 4344 D3270000 		_DOLIT 1 
 3060      01000000 
 3061 434c 95290000 		_ADR	ORR 
 3062 4350 E9420000 		_ADR	COMMA 
 3063 4354 9D2A0000 		_ADR	CELLP 
 3064 4358 C9280000 		_ADR	TOR 
 3065 435c 13260000 		_UNNEST	// adjust return address
 3066              	
 3067              	/*************************
 3068              	    LITERAL	( w -- )
 3069              	 	Compile tos to code 
 3070              		dictionary as an 
 3071              		integer literal.
 3072              	***************************/
 3073 4360 2C430000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3073      874C4954 
 3073      4552414C 
 3074 436c 504700BF 		_NEST
 3075 4370 D3270000 		_COMPI	DOLIT
 3075      D2270000 
 3075      4D480000 
 3076 437c E9420000 		_ADR	COMMA
 3077 4380 13260000 		_UNNEST
 3078              	
 3079              	/********************
 3080              	    $,"	( -- )
 3081              	 	Compile a literal 
ARM GAS  forth.s 			page 155


 3082              		string up to next " .
 3083              	hidden word 
 3084              	************************/
 3085              	STRCQ:
 3086 4384 504700BF 		_NEST
 3087 4388 D3270000 		_DOLIT -4
 3087      FCFFFFFF 
 3088 4390 D52E0000 		_ADR	CPP
 3089 4394 492D0000 		_ADR	PSTOR
 3090 4398 D3270000 		_DOLIT	'\"'
 3090      22000000 
 3091 43a0 613C0000 		_ADR	WORDD			// move word to code dictionary
 3092 43a4 912D0000 		_ADR	COUNT
 3093 43a8 012A0000 		_ADR	PLUS
 3094 43ac F5310000 		_ADR	ALGND			// calculate aligned end of string
 3095 43b0 D52E0000 		_ADR	CPP
 3096 43b4 45280000 		_ADR	STORE
 3097 43b8 13260000 		_UNNEST 			// adjust the code pointer
 3098              	
 3099              	/*******************
 3100              	   Structures
 3101              	*******************/
 3102              	
 3103              	/*************************
 3104              	    FOR	 ( -- a )
 3105              	 	Start a FOR-NEXT loop 
 3106              		structure in a colon 
 3107              		definition.
 3108              	**************************/
 3109 43bc 64430000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3109      C3464F52 
 3110 43c4 504700BF 		_NEST
 3111 43c8 D3270000 		_COMPI	TOR
 3111      C8280000 
 3111      4D480000 
 3112 43d4 A9320000 		_ADR	HERE
 3113 43d8 13260000 		_UNNEST
 3114              	
 3115              	/********************************
 3116              		DO ( limit start -- )
 3117              		initialise a DO...LOOP 
 3118              		or DO...+LOOP 
 3119              	********************************/
 3120 43dc C0430000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3120      C2444F00 
 3121 43e4 504700BF 		_NEST
 3122 43e8 D3270000 		_COMPI SWAP
 3122      4C290000 
 3122      4D480000 
 3123 43f4 D3270000 		_COMPI TOR 
 3123      C8280000 
 3123      4D480000 
 3124 4400 D3270000 		_COMPI TOR 
 3124      C8280000 
 3124      4D480000 
 3125 440c A9320000 		_ADR HERE 
 3126 4410 13260000 		_UNNEST 
ARM GAS  forth.s 			page 156


 3127              	
 3128              	DOPLOOP: // ( n -- R: counter limit )
 3129 4414 B8E80300 		ldmfd RSP!,{T0,T1}
 3130 4418 3044     		add T0,TOS 
 3131 441a 28E90300 		stmfd RSP!,{T0,T1}
 3132 441e 8842     		cmp T0,T1 
 3133 4420 05D4     		bmi 9f 
 3134 4422 08F10808 		add RSP,#8
 3135 4426 0CF1040C 		add IP,#4
 3136 442a FEF7EFB8 		_NEXT 
 3137 442e DCF800C0 	9:  ldr IP,[IP]
 3138 4432 FEF7EBB8 		_NEXT 
 3139              		
 3140              	/***************************
 3141              		+LOOP ( a -- )
 3142              		increment counter 
 3143              		end loop if countr>limit
 3144              	****************************/
 3145 4436 E0430000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3145      C52B4C4F 
 3145      4F50
 3146 4440 504700BF 		_NEST 
 3147 4444 D3270000 		_COMPI DOPLOOP 
 3147      14440000 
 3147      4D480000 
 3148 4450 E9420000 		_ADR COMMA
 3149 4454 13260000 		_UNNEST 
 3150              	
 3151              	DOLOOP: // ( -- R: counter limit )
 3152 4458 D8F80000 		ldr T0,[RSP]
 3153 445c 00F10100 		add T0,#1
 3154 4460 C8F80000 		str T0,[RSP]
 3155 4464 D8F80410 		ldr T1,[RSP,#4]
 3156 4468 8842     		cmp T0,T1 
 3157 446a 05D4     		bmi 9f
 3158 446c 08F10808 		add RSP,#8  // counter and limit  
 3159 4470 0CF1040C 		add IP,IP,#4 // skip loop address 
 3160 4474 FEF7CAB8 		_NEXT 
 3161 4478 DCF800C0 	9:  ldr IP,[IP]
 3162 447c FEF7C6B8 		_NEXT 
 3163              	
 3164              	
 3165              	/********************************
 3166              		LOOP ( a -- )
 3167              		increment counter 
 3168              		end loop if >= limit 
 3169              	*********************************/
 3170 4480 3A440000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3170      C44C4F4F 
 3170      500000BF 
 3171 448c 504700BF 		_NEST 
 3172 4490 D3270000 		_COMPI DOLOOP
 3172      58440000 
 3172      4D480000 
 3173 449c E9420000 		_ADR COMMA 
 3174 44a0 13260000 		_UNNEST 
 3175              	
ARM GAS  forth.s 			page 157


 3176              	
 3177              	/**********************
 3178              	    BEGIN	( -- a )
 3179              	 	Start an infinite 
 3180              		or indefinite 
 3181              		loop structure.
 3182              	************************/
 3183 44a4 84440000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3183      C5424547 
 3183      494E00BF 
 3184 44b0 504700BF 		_NEST
 3185 44b4 A9320000 		_ADR	HERE
 3186 44b8 13260000 		_UNNEST
 3187              		.p2align 2 
 3188              	
 3189              	/********************
 3190              	    NEXT	( a -- )
 3191              	 	Terminate a FOR-NEXT
 3192              		loop structure.
 3193              	**************************/
 3194 44bc A8440000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3194      C44E4558 
 3194      540000BF 
 3195 44c8 504700BF 		_NEST
 3196 44cc D3270000 		_COMPI	DONXT
 3196      F4270000 
 3196      4D480000 
 3197 44d8 E9420000 		_ADR	COMMA
 3198 44dc 13260000 		_UNNEST
 3199              	
 3200              	/***************************
 3201              		I ( -- n )
 3202              		stack for loop counter 
 3203              	***************************/
 3204 44e0 C0440000 		_HEADER I,1+COMPO,"I"
 3204      414900BF 
 3205 44e8 47F8046D 		_PUSH 
 3206 44ec D8F80060 		ldr TOS,[RSP]
 3207 44f0 FEF78CB8 		_NEXT 
 3208              	
 3209              	/****************************
 3210              		J ( -- n )
 3211              		stack outer loop counter 
 3212              	****************************/
 3213 44f4 E4440000 		_HEADER J,1,"J"
 3213      014A00BF 
 3214 44fc 47F8046D 		_PUSH 
 3215 4500 D8F80460 		ldr TOS,[RSP,#4]
 3216 4504 FEF782B8 		_NEXT 
 3217              	
 3218              	/**********************
 3219              	    UNTIL	( a -- )
 3220              	 	Terminate a BEGIN-UNTIL
 3221              		indefinite loop structure.
 3222              	******************************/
 3223 4508 F8440000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3223      C5554E54 
ARM GAS  forth.s 			page 158


 3223      494C00BF 
 3224 4514 504700BF 		_NEST
 3225 4518 D3270000 		_COMPI	QBRAN
 3225      12280000 
 3225      4D480000 
 3226 4524 E9420000 		_ADR	COMMA
 3227 4528 13260000 		_UNNEST
 3228              	
 3229              	/**********************
 3230              	    AGAIN	( a -- )
 3231              	 	Terminate a BEGIN-AGAIN
 3232              		infinite loop structure.
 3233              	*****************************/
 3234 452c 0C450000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3234      C5414741 
 3234      494E00BF 
 3235 4538 504700BF 		_NEST
 3236 453c D3270000 		_COMPI	BRAN
 3236      26280000 
 3236      4D480000 
 3237 4548 E9420000 		_ADR	COMMA
 3238 454c 13260000 		_UNNEST
 3239              	
 3240              	/************************
 3241              	    IF	  ( -- A )
 3242              	 	Begin a conditional
 3243              		branch structure.
 3244              	**************************/
 3245 4550 30450000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3245      C2494600 
 3246 4558 504700BF 		_NEST
 3247 455c D3270000 		_COMPI	QBRAN
 3247      12280000 
 3247      4D480000 
 3248 4568 A9320000 		_ADR	HERE
 3249 456c D3270000 		_DOLIT	4
 3249      04000000 
 3250 4574 D52E0000 		_ADR	CPP
 3251 4578 492D0000 		_ADR	PSTOR
 3252 457c 13260000 		_UNNEST
 3253              	
 3254              	/*************************
 3255              	    AHEAD	( -- A )
 3256              	 	Compile a forward 
 3257              		branch instruction.
 3258              	*************************/
 3259 4580 54450000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3259      C5414845 
 3259      414400BF 
 3260 458c 504700BF 		_NEST
 3261 4590 D3270000 		_COMPI	BRAN
 3261      26280000 
 3261      4D480000 
 3262 459c A9320000 		_ADR	HERE
 3263 45a0 D3270000 		_DOLIT	4
 3263      04000000 
 3264 45a8 D52E0000 		_ADR	CPP
ARM GAS  forth.s 			page 159


 3265 45ac 492D0000 		_ADR	PSTOR
 3266 45b0 13260000 		_UNNEST
 3267              	
 3268              	/**************************
 3269              	    REPEAT	( A a -- )
 3270              	 	Terminate a BEGIN-WHILE-REPEAT
 3271              		indefinite loop.
 3272              	**********************************/
 3273 45b4 84450000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3273      C6524550 
 3273      45415400 
 3274 45c0 504700BF 		_NEST
 3275 45c4 39450000 		_ADR	AGAIN
 3276 45c8 A9320000 		_ADR	HERE
 3277 45cc 4D290000 		_ADR	SWAP
 3278 45d0 45280000 		_ADR	STORE
 3279 45d4 13260000 		_UNNEST
 3280              	
 3281              	/*********************
 3282              	    THEN	( A -- )
 3283              	 	Terminate a conditional
 3284              		branch structure.
 3285              	*****************************/
 3286 45d8 B8450000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3286      C4544845 
 3286      4E0000BF 
 3287 45e4 504700BF 		_NEST
 3288 45e8 A9320000 		_ADR	HERE
 3289 45ec 4D290000 		_ADR	SWAP
 3290 45f0 45280000 		_ADR	STORE
 3291 45f4 13260000 		_UNNEST
 3292              	
 3293              	/***************************
 3294              	    AFT	 ( a -- a A )
 3295              	 	Jump to THEN in a 
 3296              		FOR-AFT-THEN-NEXT loop 
 3297              		the first time through.
 3298              	*****************************/
 3299 45f8 DC450000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3299      C3414654 
 3300 4600 504700BF 		_NEST
 3301 4604 2D290000 		_ADR	DROP
 3302 4608 8D450000 		_ADR	AHEAD
 3303 460c B1440000 		_ADR	BEGIN
 3304 4610 4D290000 		_ADR	SWAP
 3305 4614 13260000 		_UNNEST
 3306              	
 3307              	/**********************
 3308              	    ELSE	( A -- A )
 3309              	 	Start the false 
 3310              		clause in an 
 3311              		IF-ELSE-THEN structure.
 3312              	****************************/
 3313 4618 FC450000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3313      C4454C53 
 3313      450000BF 
 3314 4624 504700BF 		_NEST
ARM GAS  forth.s 			page 160


 3315 4628 8D450000 		_ADR	AHEAD
 3316 462c 4D290000 		_ADR	SWAP
 3317 4630 E5450000 		_ADR	THENN
 3318 4634 13260000 		_UNNEST
 3319              	
 3320              	/**************************
 3321              	    WHILE	( a -- A a )
 3322              	 	Conditional branch out 
 3323              		of a BEGIN-WHILE-REPEAT loop.
 3324              	*********************************/
 3325 4638 1C460000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3325      C5574849 
 3325      4C4500BF 
 3326 4644 504700BF 		_NEST
 3327 4648 59450000 		_ADR	IFF
 3328 464c 4D290000 		_ADR	SWAP
 3329 4650 13260000 		_UNNEST
 3330              	
 3331              	/***********************************
 3332              	    ABORT"	( -- //  string> )
 3333              	 	Conditional abort with an 
 3334              		error message.
 3335              	***********************************/
 3336 4654 3C460000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3336      8641424F 
 3336      52542200 
 3337 4660 504700BF 		_NEST
 3338 4664 D3270000 		_COMPI	ABORQ
 3338      AC400000 
 3338      4D480000 
 3339 4670 85430000 		_ADR	STRCQ
 3340 4674 13260000 		_UNNEST
 3341              	
 3342              	/******************************
 3343              	    $"	( -- //  string> )
 3344              	 	Compile an inline 
 3345              		word literal.
 3346              	*****************************/
 3347 4678 58460000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3347      C2242200 
 3348 4680 504700BF 		_NEST
 3349 4684 D3270000 		_COMPI	STRQP
 3349      C8380000 
 3349      4D480000 
 3350 4690 85430000 		_ADR	STRCQ
 3351 4694 13260000 		_UNNEST
 3352              	
 3353              	/******************************
 3354              	    ."	( -- //  string> )
 3355              	 	Compile an inline word
 3356              		literal to be typed out 
 3357              		at run time.
 3358              	*******************************/
 3359 4698 7C460000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3359      C22E2200 
 3360 46a0 504700BF 		_NEST
 3361 46a4 D3270000 		_COMPI	DOTQP
ARM GAS  forth.s 			page 161


 3361      E4380000 
 3361      4D480000 
 3362 46b0 85430000 		_ADR	STRCQ
 3363 46b4 13260000 		_UNNEST
 3364              	
 3365              	/*********************
 3366              	  Name compiler
 3367              	***********************/
 3368              	
 3369              	/**************************
 3370              	    ?UNIQUE	( a -- a )
 3371              	 	Display a warning 
 3372              		message if the word 
 3373              		already exists.
 3374              	**************************/
 3375 46b8 9C460000 		_HEADER UNIQU,7,"?UNIQUE"
 3375      073F554E 
 3375      49515545 
 3376 46c4 504700BF 		_NEST
 3377 46c8 3D290000 		_ADR	DUPP
 3378 46cc 0D3E0000 		_ADR	NAMEQ			// ?name exists
 3379 46d0 13280000 		_QBRAN	UNIQ1	// redefinitions are OK
 3379      F0460000 
 3380 46d8 E5380000 		_DOTQP	7," reDef "		// but warn the user
 3380      07207265 
 3380      44656620 
 3381 46e4 61290000 		_ADR	OVER
 3382 46e8 912D0000 		_ADR	COUNT
 3383 46ec 49380000 		_ADR	TYPEE			// just in case its not planned
 3384              	UNIQ1:
 3385 46f0 2D290000 		_ADR	DROP
 3386 46f4 13260000 		_UNNEST
 3387              	
 3388              	/***********************
 3389              	    $,n	 ( na -- )
 3390              	 	Build a new dictionary 
 3391              		name using the data at na.
 3392              	hidden word 
 3393              	*******************************/
 3394              	SNAME:
 3395 46f8 504700BF 		_NEST
 3396 46fc 3D290000 		_ADR	DUPP			//  na na
 3397 4700 79280000 		_ADR	CAT			//  ?null input
 3398 4704 13280000 		_QBRAN	SNAM1
 3398      40470000 
 3399 470c C5460000 		_ADR	UNIQU			//  na
 3400 4710 012F0000 		_ADR	LAST			//  na last
 3401 4714 59280000 		_ADR	AT			//  na la
 3402 4718 E9420000 		_ADR	COMMA			//  na
 3403 471c 3D290000 		_ADR	DUPP			//  na na
 3404 4720 012F0000 		_ADR	LAST			//  na na last
 3405 4724 45280000 		_ADR	STORE			//  na , save na for vocabulary link
 3406 4728 912D0000 		_ADR	COUNT			//  na+1 count
 3407 472c 012A0000 		_ADR	PLUS			//  na+1+count
 3408 4730 F5310000 		_ADR	ALGND			//  word boundary
 3409 4734 D52E0000 		_ADR	CPP
 3410 4738 45280000 		_ADR	STORE			//  top of dictionary now
ARM GAS  forth.s 			page 162


 3411 473c 13260000 		_UNNEST
 3412              	SNAM1:
 3413 4740 C9380000 		_ADR	STRQP
 3414 4744 07       		.byte	7
 3415 4745 206E616D 		.ascii " name? "
 3415      653F20
 3416 474c 81400000 		_ADR	ABORT
 3417              	
 3418              	/************************
 3419              	    $COMPILE	( a -- )
 3420              	 	Compile next word to 
 3421              		code dictionary as 
 3422              		a token or literal.
 3423              	**************************/
 3424 4750 BC460000 		_HEADER SCOMP,8,"$COMPILE"
 3424      0824434F 
 3424      4D50494C 
 3424      450000BF 
 3425 4760 504700BF 		_NEST
 3426 4764 0D3E0000 		_ADR	NAMEQ
 3427 4768 112B0000 		_ADR	QDUP	// defined?
 3428 476c 13280000 		_QBRAN	SCOM2
 3428      9C470000 
 3429 4774 59280000 		_ADR	AT
 3430 4778 D3270000 		_DOLIT	IMEDD
 3430      80000000 
 3431 4780 81290000 		_ADR	ANDD	// immediate?
 3432 4784 13280000 		_QBRAN	SCOM1
 3432      94470000 
 3433 478c E9270000 		_ADR	EXECU
 3434 4790 13260000 		_UNNEST			// it's immediate, execute
 3435              	SCOM1:
 3436 4794 4D480000 		_ADR	CALLC			// it's not immediate, compile
 3437 4798 13260000 		_UNNEST	
 3438              	SCOM2:
 3439 479c 41210000 		_ADR	NUMBER 
 3440 47a0 13280000 		_QBRAN	SCOM3
 3440      B0470000 
 3441 47a8 6D430000 		_ADR	LITER
 3442 47ac 13260000 		_UNNEST			// compile number as integer
 3443              	SCOM3: // compilation abort 
 3444 47b0 B9470000 		_ADR COLON_ABORT 
 3445 47b4 81400000 		_ADR	ABORT			// error
 3446              	
 3447              	/********************************
 3448              	 before aborting a compilation 
 3449              	 reset HERE and LAST
 3450              	 to previous values. 
 3451              	*******************************/
 3452              	COLON_ABORT:
 3453 47b8 504700BF 		_NEST 
 3454 47bc 012F0000 		_ADR LAST 
 3455 47c0 59280000 		_ADR AT 
 3456 47c4 AD2A0000 		_ADR CELLM 
 3457 47c8 3D290000 		_ADR DUPP 
 3458 47cc D52E0000 		_ADR CPP  
 3459 47d0 45280000 		_ADR STORE 
ARM GAS  forth.s 			page 163


 3460 47d4 59280000 		_ADR AT 
 3461 47d8 012F0000 		_ADR LAST 
 3462 47dc 45280000 		_ADR STORE 
 3463 47e0 13260000 		_UNNEST 
 3464              	
 3465              	/*********************
 3466              	    OVERT	( -- )
 3467              	 	Link a new word 
 3468              		into the current 
 3469              		vocabulary.
 3470              	**********************/
 3471 47e4 54470000 		_HEADER OVERT,5,"OVERT"
 3471      054F5645 
 3471      525400BF 
 3472 47f0 504700BF 		_NEST
 3473 47f4 012F0000 		_ADR	LAST
 3474 47f8 59280000 		_ADR	AT
 3475 47fc C12E0000 		_ADR	CNTXT
 3476 4800 45280000 		_ADR	STORE
 3477 4804 13260000 		_UNNEST
 3478              	
 3479              	/**********************
 3480              	    ;  ( -- )
 3481              	 	Terminate a colon
 3482              		definition.
 3483              	***********************/
 3484 4808 E8470000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3484      C13B00BF 
 3485 4810 504700BF 		_NEST
 3486 4814 D3270000 		_DOLIT	UNNEST
 3486      12260000 
 3487 481c 4D480000 		_ADR	CALLC
 3488 4820 3D410000 		_ADR	LBRAC
 3489 4824 F1470000 		_ADR	OVERT
 3490 4828 13260000 		_UNNEST
 3491              	
 3492              	/******************
 3493              	    ]	   ( -- )
 3494              	 	Start compiling 
 3495              		the words in 
 3496              		the input stream.
 3497              	*********************/
 3498 482c 0C480000 		_HEADER RBRAC,1,"]"
 3498      015D00BF 
 3499 4834 504700BF 		_NEST
 3500 4838 D3270000 		_DOLIT	SCOMP
 3500      60470000 
 3501 4840 952E0000 		_ADR	TEVAL
 3502 4844 45280000 		_ADR	STORE
 3503 4848 13260000 		_UNNEST
 3504              	
 3505              	/*********************
 3506              	    BL.W	( ca -- )
 3507              	 	compile ca.
 3508              	hidden word used by compiler
 3509              	*****************************/
 3510              	CALLC:
ARM GAS  forth.s 			page 164


 3511 484c 504700BF 		_NEST
 3512 4850 D3270000 		_DOLIT 1 
 3512      01000000 
 3513 4858 95290000 		_ADR ORR 
 3514 485c E9420000 		_ADR COMMA  
 3515 4860 13260000 		_UNNEST 
 3516              	
 3517              	
 3518              	/*************************
 3519              	 	:	( -- //  string> )
 3520              	 	Start a new colon 
 3521              		definition using 
 3522              		next word as its name.
 3523              	**************************/
 3524 4864 30480000 		_HEADER COLON,1,":"
 3524      013A00BF 
 3525 486c 504700BF 		_NEST
 3526 4870 853C0000 		_ADR	TOKEN
 3527 4874 F9460000 		_ADR	SNAME
 3528 4878 1D260000 		_ADR	COMPI_NEST 
 3529 487c 35480000 		_ADR	RBRAC
 3530 4880 13260000 		_UNNEST
 3531              	
 3532              	/*************************
 3533              	    IMMEDIATE   ( -- )
 3534              	 	Make the last compiled 
 3535              		word an immediate word.
 3536              	***************************/
 3537 4884 68480000 		_HEADER IMMED,9,"IMMEDIATE"
 3537      09494D4D 
 3537      45444941 
 3537      544500BF 
 3538 4894 504700BF 		_NEST
 3539 4898 D3270000 		_DOLIT	IMEDD
 3539      80000000 
 3540 48a0 012F0000 		_ADR	LAST
 3541 48a4 59280000 		_ADR	AT
 3542 48a8 59280000 		_ADR	AT
 3543 48ac 95290000 		_ADR	ORR
 3544 48b0 012F0000 		_ADR	LAST
 3545 48b4 59280000 		_ADR	AT
 3546 48b8 45280000 		_ADR	STORE
 3547 48bc 13260000 		_UNNEST
 3548              	
 3549              	/******************
 3550              	  Defining words
 3551              	******************/
 3552              	
 3553              	/***********************************
 3554              	    CONSTANT	( u -- //  string> )
 3555              	 	Compile a new constant.
 3556              	************************************/
 3557 48c0 88480000 		_HEADER CONST,8,"CONSTANT"
 3557      08434F4E 
 3557      5354414E 
 3557      540000BF 
 3558 48d0 504700BF 		_NEST 
ARM GAS  forth.s 			page 165


 3559 48d4 853C0000 		_ADR	TOKEN
 3560 48d8 F9460000 		_ADR	SNAME
 3561 48dc F1470000 		_ADR	OVERT
 3562 48e0 1D260000 		_ADR	COMPI_NEST
 3563 48e4 D3270000 		_DOLIT	DOCON
 3563      C42D0000 
 3564 48ec 4D480000 		_ADR	CALLC
 3565 48f0 E9420000 		_ADR	COMMA
 3566 48f4 D3270000 		_DOLIT	UNNEST 
 3566      12260000 
 3567 48fc 4D480000 		_ADR	CALLC  
 3568 4900 13260000 		_UNNEST
 3569              	
 3570              		.p2align 2 
 3571              	/****************************************
 3572              	 doDOES> ( -- a )
 3573              	 runtime action of DOES> 
 3574              	 leave parameter field address on stack 
 3575              	hidden word used by compiler 
 3576              	***************************************/
 3577              	DODOES:
 3578 4904 504700BF 		_NEST 
 3579 4908 85280000 		_ADR	RFROM
 3580 490c 9D2A0000 		_ADR	CELLP 
 3581 4910 5D2A0000 		_ADR	ONEP  
 3582 4914 012F0000 		_ADR LAST 
 3583 4918 59280000 		_ADR AT
 3584 491c A53C0000 		_ADR NAMET 
 3585 4920 9D2A0000 		_ADR CELLP 
 3586 4924 45280000 		_ADR STORE  
 3587 4928 13260000 		_UNNEST 
 3588              	
 3589              		.p2align 2
 3590              	/**********************
 3591              	  DOES> ( -- )
 3592              	  compile time action
 3593              	*************************/
 3594 492c C4480000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3594      C5444F45 
 3594      533E00BF 
 3595 4938 504700BF 		_NEST 
 3596 493c D3270000 		_DOLIT DODOES 
 3596      04490000 
 3597 4944 4D480000 		_ADR CALLC 
 3598 4948 D3270000 		_DOLIT	UNNEST
 3598      12260000 
 3599 4950 4D480000 		_ADR	CALLC 
 3600 4954 1D260000 		_ADR COMPI_NEST
 3601 4958 D3270000 		_DOLIT RFROM 
 3601      84280000 
 3602 4960 4D480000 		_ADR	CALLC
 3603 4964 13260000 		_UNNEST 
 3604              	
 3605              	
 3606              	/****************************
 3607              	  DEFER@ ( "name" -- a )
 3608              	  return value of code field 
ARM GAS  forth.s 			page 166


 3609              	  of defered function. 
 3610              	******************************/
 3611 4968 30490000 		_HEADER DEFERAT,6,"DEFER@"
 3611      06444546 
 3611      45524000 
 3612 4974 504700BF 		_NEST 
 3613 4978 A9420000 		_ADR TICK
 3614 497c 9D2A0000 		_ADR CELLP 
 3615 4980 59280000 		_ADR AT 
 3616 4984 6D2A0000 		_ADR ONEM 
 3617 4988 13260000 		_UNNEST 
 3618              	
 3619              	/*********************************
 3620              	 DEFER! ( "name1" "name2" -- )
 3621              	 assign an action to a defered word 
 3622              	************************************/
 3623 498c 6C490000 		_HEADER DEFERSTO,6,"DEFER!"
 3623      06444546 
 3623      45522100 
 3624 4998 504700BF 		_NEST 
 3625 499c A9420000 		_ADR TICK 
 3626 49a0 5D2A0000 		_ADR ONEP 
 3627 49a4 A9420000 		_ADR TICK 
 3628 49a8 9D2A0000 		_ADR CELLP 
 3629 49ac 45280000 		_ADR STORE 
 3630 49b0 13260000 		_UNNEST
 3631              	
 3632              	/****************************
 3633              	  DEFER ( "name" -- )
 3634              	  create a defered definition
 3635              	*****************************/
 3636 49b4 90490000 		_HEADER DEFER,5,"DEFER"
 3636      05444546 
 3636      455200BF 
 3637 49c0 504700BF 		_NEST 
 3638 49c4 114A0000 		_ADR CREAT 
 3639 49c8 D3270000 		_DOLIT UNNEST 
 3639      12260000 
 3640 49d0 4D480000 		_ADR CALLC 
 3641 49d4 D3270000 		_DOLIT DEFER_NOP
 3641      F8490000 
 3642 49dc 5D2A0000 		_ADR ONEP 
 3643 49e0 012F0000 		_ADR LAST 
 3644 49e4 59280000 		_ADR AT 
 3645 49e8 A53C0000 		_ADR NAMET 
 3646 49ec 9D2A0000 		_ADR CELLP 
 3647 49f0 45280000 		_ADR STORE 
 3648 49f4 13260000 		_UNNEST 
 3649              	DEFER_NOP:
 3650 49f8 504700BF 		_NEST  
 3651 49fc D1270000 		_ADR NOP 
 3652 4a00 13260000 		_UNNEST 
 3653              	
 3654              	/******************************
 3655              	    CREATE	( -- //  string> )
 3656              	 	Compile a new array entry 
 3657              		without allocating code space.
ARM GAS  forth.s 			page 167


 3658              	***********************************/
 3659 4a04 B8490000 		_HEADER CREAT,6,"CREATE"
 3659      06435245 
 3659      41544500 
 3660 4a10 504700BF 		_NEST 
 3661 4a14 853C0000 		_ADR	TOKEN
 3662 4a18 F9460000 		_ADR	SNAME
 3663 4a1c F1470000 		_ADR	OVERT
 3664 4a20 1D260000 		_ADR	COMPI_NEST 
 3665 4a24 D3270000 		_DOLIT	DOVAR
 3665      B82D0000 
 3666 4a2c 4D480000 		_ADR	CALLC
 3667 4a30 13260000 		_UNNEST
 3668              	
 3669              	/*******************************
 3670              	    VARIABLE	( -- //  string> )
 3671              	 	Compile a new variable 
 3672              		initialized to 0.
 3673              	***********************************/
 3674 4a34 084A0000 		_HEADER VARIA,8,"VARIABLE"
 3674      08564152 
 3674      4941424C 
 3674      450000BF 
 3675 4a44 504700BF 		_NEST
 3676 4a48 114A0000 		_ADR	CREAT
 3677 4a4c D3270000 		_DOLIT	0
 3677      00000000 
 3678 4a54 E9420000 		_ADR	COMMA
 3679 4a58 D3270000 		_DOLIT UNNEST
 3679      12260000 
 3680 4a60 4D480000 		_ADR	CALLC  
 3681 4a64 13260000 		_UNNEST
 3682              	
 3683              	/***********
 3684              	  Tools
 3685              	***********/
 3686              	
 3687              	/*************************
 3688              	    dm+	 ( a u -- a )
 3689              	 	Dump u bytes from , 
 3690              		leaving a+u on the stack.
 3691              	hidden word used by DUMP 
 3692              	****************************/
 3693              	DMP:
 3694 4a68 504700BF 		_NEST
 3695 4a6c 61290000 		_ADR	OVER
 3696 4a70 D3270000 		_DOLIT	4
 3696      04000000 
 3697 4a78 29390000 		_ADR	UDOTR			// display address
 3698 4a7c F5370000 		_ADR	SPACE
 3699 4a80 C9280000 		_ADR	TOR			// start count down loop
 3700 4a84 27280000 		_BRAN	PDUM2			// skip first pass
 3700      A44A0000 
 3701              	PDUM1:
 3702 4a8c 3D290000 	  _ADR	DUPP
 3703 4a90 79280000 		_ADR	CAT
 3704 4a94 D3270000 		_DOLIT	3
ARM GAS  forth.s 			page 168


 3704      03000000 
 3705 4a9c 29390000 		_ADR	UDOTR			// display numeric data
 3706 4aa0 5D2A0000 		_ADR	ONEP			// increment address
 3707              	PDUM2:
 3708 4aa4 F5270000 	  _ADR	DONXT
 3709 4aa8 8C4A0000 		.word	PDUM1	// loop till done
 3710 4aac 13260000 		_UNNEST
 3711              		.p2align 2 
 3712              	//    DUMP	( a u -- )
 3713              	// 	Dump u bytes from a, in a formatted manner.
 3714              	
 3715              	/**********************
 3716              		DUMP ( a n -- )
 3717              		hex dump memory 
 3718              	*********************/
 3719 4ab0 384A0000 		_HEADER DUMP,4,"DUMP"
 3719      0444554D 
 3719      500000BF 
 3720 4abc 504700BF 		_NEST
 3721 4ac0 2D2E0000 		_ADR	BASE
 3722 4ac4 59280000 		_ADR	AT
 3723 4ac8 C9280000 		_ADR	TOR
 3724 4acc 8D350000 		_ADR	HEX			// save radix,set hex
 3725 4ad0 D3270000 		_DOLIT	16
 3725      10000000 
 3726 4ad8 95310000 		_ADR	SLASH			// change count to lines
 3727 4adc C9280000 		_ADR	TOR
 3728 4ae0 27280000 		_BRAN	DUMP4			// start count down loop
 3728      104B0000 
 3729              	DUMP1:
 3730 4ae8 7D380000 	  _ADR	CR
 3731 4aec D3270000 		_DOLIT	16
 3731      10000000 
 3732 4af4 752B0000 		_ADR	DDUP
 3733 4af8 694A0000 		_ADR	DMP			// display numeric
 3734 4afc 252B0000 		_ADR	ROT
 3735 4b00 252B0000 		_ADR	ROT
 3736 4b04 F5370000 		_ADR	SPACE
 3737 4b08 F5370000 		_ADR	SPACE
 3738 4b0c 49380000 		_ADR	TYPEE			// display printable characters
 3739              	DUMP4:
 3740 4b10 F5270000 	  _DONXT	DUMP1	// loop till done
 3740      E84A0000 
 3741              	DUMP3:
 3742 4b18 2D290000 		_ADR	DROP
 3743 4b1c 85280000 		_ADR	RFROM
 3744 4b20 2D2E0000 		_ADR	BASE
 3745 4b24 45280000 		_ADR	STORE			// restore radix
 3746 4b28 13260000 		_UNNEST
 3747              	
 3748              	/*******************************
 3749              	   TRACE. display in hexadecimal
 3750              	   TRACE. use a different buffer 
 3751              	   than DOT  to avoid current 
 3752              	   display overwrite.
 3753              	*******************************/ 
 3754              	TDOT: // ( u -- )
ARM GAS  forth.s 			page 169


 3755 4b2c 504700BF 		_NEST 
 3756 4b30 2D2E0000 		_ADR BASE 
 3757 4b34 59280000 		_ADR AT 
 3758 4b38 C9280000 		_ADR TOR
 3759 4b3c 8D350000 		_ADR HEX  
 3760 4b40 A92E0000 		_ADR HLD 
 3761 4b44 59280000 		_ADR AT 
 3762 4b48 C9280000 		_ADR TOR   // R: base *hold 
 3763 4b4c A9320000 		_ADR HERE 
 3764 4b50 D3270000 		_DOLIT 160 
 3764      A0000000 
 3765 4b58 012A0000 		_ADR PLUS
 3766 4b5c 3D290000 		_ADR DUPP 
 3767 4b60 C9280000 		_ADR TOR  
 3768 4b64 A92E0000 		_ADR HLD 
 3769 4b68 45280000 		_ADR STORE
 3770 4b6c 35300000 		_ADR STOD 
 3771 4b70 DD340000 		_ADR DIGS  
 3772 4b74 2D290000 		_ADR DROP
 3773 4b78 D3270000 		_DOLIT '$'
 3773      24000000 
 3774 4b80 91340000 		_ADR HOLD 
 3775 4b84 A92E0000 		_ADR HLD 
 3776 4b88 59280000 		_ADR AT
 3777 4b8c 85280000 		_ADR RFROM   
 3778 4b90 61290000 		_ADR OVER 
 3779 4b94 112A0000 		_ADR SUBB 
 3780 4b98 F5370000 		_ADR SPACE 
 3781 4b9c 49380000 		_ADR TYPEE 
 3782 4ba0 85280000 		_ADR RFROM 
 3783 4ba4 A92E0000 		_ADR HLD 
 3784 4ba8 45280000 		_ADR STORE 
 3785 4bac 85280000 		_ADR RFROM 
 3786 4bb0 2D2E0000 		_ADR BASE 
 3787 4bb4 45280000 		_ADR STORE 
 3788 4bb8 13260000 		_UNNEST 
 3789              	
 3790              	/**********************
 3791              	   .S	  ( ... -- ... )
 3792              	 	Display the contents 
 3793              		of the data stack.
 3794              	*************************/
 3795 4bbc B44A0000 		_HEADER DOTS,2,".S"
 3795      022E5300 
 3796 4bc4 504700BF 		_NEST
 3797 4bc8 5D320000 		_ADR	DEPTH	// stack depth
 3798 4bcc C9280000 		_ADR	TOR		// start count down loop
 3799 4bd0 27280000 		_BRAN	DOTS2  // skip first pass
 3799      E44B0000 
 3800              	DOTS1:
 3801 4bd8 B5280000 		_ADR	RAT
 3802 4bdc 81320000 		_ADR	PICK
 3803 4be0 2D4B0000 		_ADR	TDOT // index stack, display contents
 3804              	DOTS2:
 3805 4be4 F5270000 		_DONXT	DOTS1 // loop till done
 3805      D84B0000 
 3806 4bec 7D380000 		_ADR	CR 
ARM GAS  forth.s 			page 170


 3807 4bf0 13260000 		_UNNEST
 3808              	
 3809              	RPAT: 
 3810 4bf4 47F8046D 		_PUSH 
 3811 4bf8 4646     		mov TOS,RSP 
 3812 4bfa FDF707BD 		_NEXT 
 3813              	
 3814              	RBASE: 
 3815 4bfe 47F8046D 		_PUSH 
 3816 4c02 4FF47F46 		_MOV32 TOS,RPP 
 3816      C2F20106 
 3817 4c0a FDF7FFBC 		_NEXT 
 3818              	
 3819              	
 3820              	/**************************
 3821              	  R.  display return stack 
 3822              	**************************/
 3823              	RDOT: 
 3824 4c0e 504700BF 		_NEST 
 3825 4c12 FF4B0000 		_ADR RBASE
 3826 4c16 F54B0000 		_ADR RPAT 
 3827 4c1a 112A0000 		_ADR SUBB
 3828 4c1e E12A0000 		_ADR CELLSL   
 3829 4c22 D3270000 		_DOLIT 2
 3829      02000000 
 3830 4c2a 112A0000 		_ADR SUBB 
 3831 4c2e C9280000 		_ADR TOR
 3832 4c32 FF4B0000 		_ADR RBASE 
 3833 4c36 AD2A0000 	1:	_ADR CELLM 
 3834 4c3a 3D290000 		_ADR DUPP 
 3835 4c3e 59280000 		_ADR AT 
 3836 4c42 2D4B0000 		_ADR TDOT 
 3837 4c46 85280000 		_ADR RFROM   
 3838 4c4a 6D2A0000 		_ADR ONEM 
 3839 4c4e 3D290000 		_ADR DUPP
 3840 4c52 C9280000 		_ADR TOR 
 3841 4c56 752C0000 		_ADR ZEQUAL   
 3842 4c5a 13280000 		_QBRAN 1b
 3842      364C0000 
 3843 4c62 85280000 		_ADR RFROM  
 3844 4c66 4D2B0000 		_ADR DDROP
 3845 4c6a 7D380000 		_ADR CR   
 3846 4c6e 13260000 		_UNNEST 
 3847              	
 3848              	/**************************
 3849              		TRACE ( -- )
 3850              		display stacks content 
 3851              	**************************/
 3852 4c72 C04B0000 		_HEADER TRACE,5,"TRACE"
 3852      05545241 
 3852      4345
 3853 4c7c 504700BF 		_NEST
 3854 4c80 7D380000 		_ADR CR 
 3855 4c84 D3270000 		_DOLIT '>' 
 3855      3E000000 
 3856 4c8c D3270000 		_DOLIT 'S'
 3856      53000000 
ARM GAS  forth.s 			page 171


 3857 4c94 DD260000 		_ADR EMIT 
 3858 4c98 DD260000 		_ADR EMIT  
 3859 4c9c C54B0000 		_ADR DOTS
 3860 4ca0 D3270000 		_DOLIT '>'
 3860      3E000000 
 3861 4ca8 D3270000 		_DOLIT 'R'
 3861      52000000 
 3862 4cb0 DD260000 		_ADR EMIT 
 3863 4cb4 DD260000 		_ADR EMIT 
 3864 4cb8 0F4C0000 		_ADR RDOT 
 3865 4cbc 13260000 		_UNNEST 
 3866              	
 3867              	
 3868              	/*****************************
 3869              	    >NAME	( ca -- na | F )
 3870              	 	Convert code address 
 3871              		to a name address.
 3872              	*****************************/
 3873 4cc0 764C0000 		_HEADER TNAME,5,">NAME"
 3873      053E4E41 
 3873      4D4500BF 
 3874 4ccc 504700BF 		_NEST
 3875 4cd0 C9280000 		_ADR	TOR			//  
 3876 4cd4 C12E0000 		_ADR	CNTXT			//  va
 3877 4cd8 59280000 		_ADR	AT			//  na
 3878              	TNAM1:
 3879 4cdc 3D290000 		_ADR	DUPP			//  na na
 3880 4ce0 13280000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3880      104D0000 
 3881 4ce8 3D290000 		_ADR	DUPP			//  na na
 3882 4cec A53C0000 		_ADR	NAMET			//  na ca
 3883 4cf0 B5280000 		_ADR	RAT			//  na ca code
 3884 4cf4 A9290000 		_ADR	XORR			//  na f --
 3885 4cf8 13280000 		_QBRAN	TNAM2
 3885      104D0000 
 3886 4d00 AD2A0000 		_ADR	CELLM			//  la 
 3887 4d04 59280000 		_ADR	AT			//  next_na
 3888 4d08 27280000 		_BRAN	TNAM1
 3888      DC4C0000 
 3889              	TNAM2:	
 3890 4d10 85280000 		_ADR	RFROM
 3891 4d14 2D290000 		_ADR	DROP			//  0|na --
 3892 4d18 13260000 		_UNNEST			// 0
 3893              	
 3894              	/********************************
 3895              	    .ID	 ( na -- )
 3896              	 	Display the name at address.
 3897              	********************************/
 3898 4d1c C44C0000 		_HEADER DOTID,3,".ID"
 3898      032E4944 
 3899 4d24 504700BF 		_NEST
 3900 4d28 112B0000 		_ADR	QDUP			// if zero no name
 3901 4d2c 13280000 		_QBRAN	DOTI1
 3901      4C4D0000 
 3902 4d34 912D0000 		_ADR	COUNT
 3903 4d38 D3270000 		_DOLIT	0x1F
 3903      1F000000 
ARM GAS  forth.s 			page 172


 3904 4d40 81290000 		_ADR	ANDD			// mask lexicon bits
 3905 4d44 49380000 		_ADR	TYPEE
 3906 4d48 13260000 		_UNNEST			// display name string
 3907              	DOTI1:
 3908 4d4c E5380000 		_DOTQP	9," {noName}"
 3908      09207B6E 
 3908      6F4E616D 
 3908      657D00BF 
 3909 4d5c 13260000 		_UNNEST
 3910              	
 3911              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3912              	.if WANT_SEE 
 3913              	/*******************************
 3914              	    SEE	 ( -- //  string> )
 3915              	 	A simple decompiler.
 3916              	*******************************/
 3917              		_HEADER SEE,3,"SEE"
 3918              		_NEST
 3919              		_ADR	TICK	//  ca --, starting address
 3920              		_ADR	CR	
 3921              		_DOLIT	20
 3922              		_ADR	TOR
 3923              	SEE1:
 3924              		_ADR	CELLP			//  a
 3925              		_ADR	DUPP			//  a a
 3926              		_ADR	DECOMP		//  a
 3927              		_DONXT	SEE1
 3928              		_ADR	DROP
 3929              		_UNNEST
 3930              	
 3931              	/*************************
 3932              	 	DECOMPILE ( a -- )
 3933              	 	Convert code in a.  
 3934              		Display name of command or as data.
 3935              	*************************************/
 3936              		_HEADER DECOMP,9,"DECOMPILE"
 3937              		_NEST
 3938              		_ADR	DUPP			//  a a
 3939              	// 	_ADR	TOR			//  a
 3940              		_ADR	AT			//  a code
 3941              		_ADR	DUPP			//  a code code
 3942              		_DOLIT	0xF800D000 //0xF800F800
 3943              		_ADR	ANDD
 3944              		_DOLIT	0xF000D000 //0xF800F000
 3945              		_ADR	EQUAL			//  a code ?
 3946              		_ADR	INVER 
 3947              		_QBRAN	DECOM2	//  not a command
 3948              		//  a valid_code --, extract address and display name
 3949              		MOVW	IP,#0xFFE
 3950              		MOV	WP,TOS
 3951              		LSL	TOS,TOS,#21		//  get bits 22-12
 3952              		ASR	TOS,TOS,#9		//  with sign extension
 3953              		LSR	WP,WP,#15		//  get bits 11-1
 3954              		AND	WP,WP,IP		//  retain only bits 11-1
 3955              		ORR	TOS,TOS,WP		//  get bits 22-1
 3956              		NOP
 3957              		_ADR	OVER			//  a offset a
ARM GAS  forth.s 			page 173


 3958              		_ADR	PLUS			//  a target-4
 3959              		_ADR	CELLP			//  a target
 3960              		_ADR	TNAME			//  a na/0 --, is it a name?
 3961              		_ADR	QDUP			//  name address or zero
 3962              		_QBRAN	DECOM1
 3963              		_ADR	SPACE			//  a na
 3964              		_ADR	DOTID			//  a --, display name
 3965              	// 	_ADR	RFROM			//  a
 3966              		_ADR	DROP
 3967              		_UNNEST
 3968              	DECOM1:	// _ADR	RFROM		//  a
 3969              		_ADR	AT			//  data
 3970              		_ADR	UDOT			//  display data
 3971              		_UNNEST
 3972              	DECOM2:
 3973              		_ADR	UDOT
 3974              	// 	_ADR	RFROM
 3975              		_ADR	DROP
 3976              		_UNNEST
 3977              	.endif 
 3978              	
 3979              	/**********************
 3980              		VLIST ( -- )
 3981              		WORDS alias 
 3982              		+ display words count 
 3983              	**********************/
 3984 4d60 204D0000 		_HEADER VLIST,5,"VLIST"
 3984      05564C49 
 3984      535400BF 
 3985 4d6c 504700BF 		_NEST 
 3986 4d70 914D0000 		_ADR WORDS
 3987 4d74 7D380000 		_ADR CR 
 3988 4d78 D54D0000 		_ADR WC
 3989 4d7c 91390000 		_ADR DOT    
 3990 4d80 13260000 		_UNNEST 
 3991              	
 3992              	/*********************
 3993              	    WORDS	( -- )
 3994              	 	Display the names 
 3995              		in the context vocabulary.
 3996              	*******************************/
 3997 4d84 644D0000 		_HEADER WORDS,5,"WORDS"
 3997      05574F52 
 3997      445300BF 
 3998 4d90 504700BF 		_NEST
 3999 4d94 7D380000 		_ADR	CR
 4000 4d98 C12E0000 		_ADR	CNTXT
 4001 4d9c 59280000 		_ADR	AT			// only in context
 4002              	WORS1:
 4003 4da0 112B0000 		_ADR	QDUP			// ?at end of list
 4004 4da4 13280000 		_QBRAN	WORS2
 4004      C84D0000 
 4005 4dac 3D290000 		_ADR	DUPP
 4006 4db0 F5370000 		_ADR	SPACE
 4007 4db4 254D0000 		_ADR	DOTID			// display a name
 4008 4db8 AD2A0000 		_ADR	CELLM
 4009 4dbc 59280000 		_ADR	AT
ARM GAS  forth.s 			page 174


 4010 4dc0 27280000 		_BRAN	WORS1
 4010      A04D0000 
 4011              	WORS2:
 4012 4dc8 13260000 		_UNNEST
 4013              	
 4014              	/*****************************
 4015              		WC ( - n )
 4016              		count words in dictionary 
 4017              	******************************/
 4018 4dcc 884D0000 		_HEADER WC,2,"WC"
 4018      02574300 
 4019 4dd4 504700BF 		_NEST 
 4020 4dd8 D3270000 		_DOLIT 0 
 4020      00000000 
 4021 4de0 012F0000 		_ADR LAST
 4022 4de4 59280000 	1:	_ADR AT
 4023 4de8 112B0000 		_ADR QDUP
 4024 4dec 13280000 		_QBRAN 9f
 4024      0C4E0000 
 4025 4df4 4D290000 		_ADR SWAP
 4026 4df8 5D2A0000 		_ADR ONEP
 4027 4dfc 4D290000 		_ADR SWAP
 4028 4e00 AD2A0000 		_ADR CELLM
 4029 4e04 27280000 		_BRAN 1b
 4029      E44D0000 
 4030 4e0c 13260000 	9:	_UNNEST 
 4031              	
 4032              	/*************************
 4033              		MARK <string> ( -- )
 4034              	    create forget point 
 4035              		in dictionary 
 4036              	*************************/	
 4037 4e10 D04D0000 		_HEADER MARK,4,"MARK"
 4037      044D4152 
 4037      4B0000BF 
 4038 4e1c 504700BF 		_NEST
 4039 4e20 114A0000 		_ADR CREAT 
 4040 4e24 05490000 		_ADR DODOES 
 4041 4e28 13260000 		_UNNEST
 4042 4e2c 504700BF 		_NEST  
 4043 4e30 85280000 		_ADR RFROM 
 4044 4e34 D3270000 		_DOLIT 8
 4044      08000000 
 4045 4e3c 112A0000 		_ADR SUBB
 4046 4e40 CD4C0000 		_ADR TNAME
 4047 4e44 AD2A0000 		_ADR CELLM
 4048 4e48 59280000 		_ADR AT  
 4049 4e4c 012F0000 		_ADR LAST 
 4050 4e50 45280000 		_ADR STORE 
 4051 4e54 F1470000 		_ADR OVERT
 4052 4e58 13260000 		_UNNEST 
 4053              	
 4054              	/****************
 4055              	  cold start
 4056              	*****************/
 4057              	
 4058              	/**********************************
ARM GAS  forth.s 			page 175


 4059              	    VER	 ( -- n )
 4060              	 	Return the version 
 4061              		number of this implementation.
 4062              	hidden word used by COLD
 4063              	**********************************/
 4064              	VERSN:
 4065 4e5c 504700BF 		_NEST
 4066 4e60 D3270000 		_DOLIT	VER*256+EXT
 4066      00010000 
 4067 4e68 13260000 		_UNNEST
 4068              	
 4069              	/*********************
 4070              	    hi	  ( -- )
 4071              	 	Display the sign-on 
 4072              		message.
 4073              	***********************/
 4074 4e6c 144E0000 		_HEADER HI,2,"HI"
 4074      02484900 
 4075 4e74 504700BF 		_NEST
 4076 4e78 7D380000 		_ADR	CR	// initialize I/O
 4077 4e7c E5380000 		_DOTQP	17, "beyond Jupiter, v" 
 4077      11626579 
 4077      6F6E6420 
 4077      4A757069 
 4077      7465722C 
 4078 4e94 2D2E0000 		_ADR	BASE
 4079 4e98 59280000 		_ADR	AT
 4080 4e9c 8D350000 		_ADR	HEX	// save radix
 4081 4ea0 5D4E0000 		_ADR	VERSN
 4082 4ea4 71340000 		_ADR	BDIGS
 4083 4ea8 D3270000 		_DOLIT  0 
 4083      00000000 
 4084 4eb0 BD340000 		_ADR	DIG
 4085 4eb4 BD340000 		_ADR	DIG
 4086 4eb8 D3270000 		_DOLIT	'.'
 4086      2E000000 
 4087 4ec0 91340000 		_ADR	HOLD
 4088 4ec4 DD340000 		_ADR	DIGS
 4089 4ec8 39350000 		_ADR	EDIGS
 4090 4ecc 49380000 		_ADR	TYPEE	// format version number
 4091 4ed0 2D2E0000 		_ADR	BASE
 4092 4ed4 45280000 		_ADR	STORE
 4093 4ed8 7D380000 		_ADR	CR
 4094 4edc 13260000 		_UNNEST			// restore radix
 4095              	
 4096              	/***********************
 4097              	   HI_BOTH ( -- )
 4098              	   display sign-on 
 4099              	   on both CONSOLE
 4100              	***********************/
 4101              	HI_BOTH:
 4102 4ee0 504700BF 	    _NEST 
 4103 4ee4 F5070000 		_ADR LOCAL 
 4104 4ee8 25080000 		_ADR CONSOLE 
 4105 4eec 754E0000 		_ADR HI 
 4106 4ef0 0D080000 		_ADR SERIAL 
 4107 4ef4 25080000 		_ADR CONSOLE 
ARM GAS  forth.s 			page 176


 4108 4ef8 754E0000 		_ADR HI
 4109 4efc 13260000 		_UNNEST 
 4110              	
 4111              	/**********************
 4112              	 check if PS2 keyboard 
 4113              	 present.
 4114              	**********************/
 4115              	PS2_QUERY: 
 4116 4f00 504700BF 		_NEST 
 4117 4f04 D3270000 		_DOLIT 400 
 4117      90010000 
 4118 4f0c 75270000 		_ADR PAUSE
 4119 4f10 2D160000 		_ADR PS2_QKEY
 4120 4f14 13280000 		_QBRAN 1f
 4120      304F0000 
 4121 4f1c D3270000 		_DOLIT BAT_OK 
 4121      AA000000 
 4122 4f24 A9290000 		_ADR XORR 
 4123 4f28 13280000 		_QBRAN 9f 
 4123      744F0000 
 4124 4f30 15180000 	1:	_ADR KBD_RST
 4125 4f34 D3270000 		_DOLIT BAT_OK 
 4125      AA000000 
 4126 4f3c A9290000 		_ADR XORR  
 4127 4f40 13280000 		_QBRAN 9f  
 4127      744F0000 
 4128              	// no ps2 keyboard 
 4129              	// swith to serial console
 4130 4f48 7D380000 		_ADR CR 
 4131 4f4c E5380000 		_DOTQP 25,"no PS2 keyboard detected."
 4131      196E6F20 
 4131      50533220 
 4131      6B657962 
 4131      6F617264 
 4132 4f6c 0D080000 		_ADR SERIAL 
 4133 4f70 25080000 		_ADR CONSOLE 
 4134 4f74 13260000 	9:	_UNNEST 
 4135              	
 4136              	/*************************
 4137              	   check PA8 to 
 4138              	   select console 
 4139              	   PA8 -> low  LOCAL 
 4140              	   PA8 -> high SERIAL 
 4141              	*************************/
 4142              	IF_SENSE:
 4143 4f78 504700BF 		_NEST 
 4144 4f7c F5070000 		_ADR LOCAL 
 4145 4f80 D3270000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4145      10000240 
 4146 4f88 59280000 		_ADR AT 
 4147 4f8c D3270000 		_DOLIT (1<<8)
 4147      00010000 
 4148 4f94 81290000 		_ADR ANDD 
 4149 4f98 13280000 		_QBRAN 9f 
 4149      A44F0000 
 4150 4fa0 5D2A0000 		_ADR ONEP 
 4151 4fa4 25080000 	9:  _ADR CONSOLE 
ARM GAS  forth.s 			page 177


 4152 4fa8 13260000 		_UNNEST 
 4153              	
 4154              	/****************************
 4155              	   display READY on active
 4156              	   console
 4157              	***************************/
 4158              	READY:
 4159 4fac 504700BF 	    _NEST 
 4160 4fb0 E5380000 		_DOTQP 5,"READY"
 4160      05524541 
 4160      445900BF 
 4161 4fbc 7D380000 		_ADR  CR 
 4162 4fc0 13260000 	    _UNNEST 
 4163              	
 4164              	/********************
 4165              	    COLD	( -- )
 4166              	 	The high level cold 
 4167              		start sequence.
 4168              	**************************/
 4169 4fc4 704E0000 		.word	LINK 
 4170              		LINK = . 
 4171 4fc8 04       	_LASTN:	.byte  4
 4172 4fc9 434F4C44 		.ascii "COLD"
 4173 4fcd 0000BF   		.p2align 2	
 4174              	COLD:
 4175 4fd0 00B5FBF7 		_CALL forth_init 
 4175      E3F95DF8 
 4175      04EB
 4176 4fda DFF858C0 		ldr IP,=COLD1 
 4177 4fde FDF715BB 		_NEXT
 4178 4fe2 00BF     		.p2align 2 
 4179              	COLD1:
 4180 4fe4 D3270000 		_DOLIT  0 
 4180      00000000 
 4181 4fec A9270000 		_ADR ULED // turn off user LED 
 4182 4ff0 D3270000 		_DOLIT	UZERO
 4182      28060000 
 4183 4ff8 D3270000 		_DOLIT	UPP
 4183      00000020 
 4184 5000 D3270000 		_DOLIT	ULAST-UZERO
 4184      B0000000 
 4185 5008 49330000 		_ADR	MOVE 			// initialize user area
 4186 500c 09420000 		_ADR	PRESE			// initialize stack and TIB
 4187 5010 C11A0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4188 5014 014F0000 		_ADR 	PS2_QUERY  
 4189 5018 152E0000 		_ADR	TBOOT
 4190 501c F9320000 		_ADR	ATEXE			// application boot
 4191 5020 F1470000 		_ADR	OVERT
 4192 5024 794F0000 		_ADR	IF_SENSE
 4193 5028 27280000 		_BRAN	QUIT			// start interpretation
 4193      28420000 
 4194              	COLD2:
 4195              		.p2align 2 	
 4196              	CTOP:
 4197 5030 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4198              	
 4199              	
ARM GAS  forth.s 			page 178


 4200 5034 E44F0000 	  .end 
ARM GAS  forth.s 			page 179


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 180


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 181


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 182


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 183


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 184


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 185


             forth.s:2924   .text:00000000000041c4 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:395    .text:0000000000000360 reset_handler
              init.s:224    .text:0000000000000104 nmi_handler
              init.s:242    .text:000000000000013c hardfault_handler
              init.s:261    .text:0000000000000178 memfault_handler
              init.s:288    .text:00000000000001e4 busfault_handler
              init.s:321    .text:0000000000000278 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:347    .text:00000000000002dc systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000a34 tv_out_isr
          ser-term.s:35     .text:0000000000000700 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001310 kbd_isr
              init.s:196    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:416    .text:000000000000039c forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:000000000000260c INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2945   .text:0000000000004208 PRESE
             forth.s:2184   .text:00000000000038e4 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:000000000000265c CFSR
             forth.s:484    .text:000000000000293c DUPP
             forth.s:428    .text:00000000000028c8 TOR
             forth.s:292    .text:00000000000027d2 DOLIT
             forth.s:1109   .text:0000000000002e2c BASE
             forth.s:363    .text:0000000000002844 STORE
             forth.s:2234   .text:0000000000003968 UDOT
ARM GAS  forth.s 			page 186


              init.s:171    .text:0000000000000064 $d
             forth.s:399    .text:0000000000002884 RFROM
             forth.s:519    .text:0000000000002980 ANDD
             forth.s:333    .text:0000000000002812 QBRAN
             forth.s:144    .text:0000000000002680 BFAR
             forth.s:178    .text:00000000000026dc EMIT
             forth.s:2080   .text:00000000000037f4 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:54     .text:0000000000001d8c FPSCR
              init.s:377    .text:0000000000000338 reset_mcu
              init.s:195    .text:00000000000000b0 $t
              init.s:201    .text:00000000000000c2 fpu_except
              init.s:203    .text:00000000000000c2 $d
             forth.s:2126   .text:000000000000387c CR
              init.s:209    .text:00000000000000f4 $d
              init.s:222    .text:0000000000000104 $t
              init.s:227    .text:000000000000010c nmi_hl
              init.s:228    .text:000000000000010c $d
              init.s:230    .text:0000000000000132 $t
              init.s:231    .text:0000000000000134 $d
             forth.s:2823   .text:0000000000004080 ABORT
              init.s:240    .text:000000000000013c $t
              init.s:247    .text:000000000000014e hardfault_hl
              init.s:248    .text:000000000000014e $d
              init.s:251    .text:0000000000000170 $d
              init.s:259    .text:0000000000000178 $t
              init.s:266    .text:000000000000018a memfault_hl
              init.s:267    .text:000000000000018a $d
              init.s:270    .text:00000000000001b8 $d
              init.s:286    .text:00000000000001e4 $t
              init.s:293    .text:00000000000001f6 busfault_hl
              init.s:294    .text:00000000000001f6 $d
             forth.s:261    .text:00000000000027a8 ULED
             forth.s:1082   .text:0000000000002dec MSEC
              init.s:302    .text:000000000000023e $t
              init.s:303    .text:0000000000000240 $d
              init.s:310    .text:000000000000026c $d
              init.s:319    .text:0000000000000278 $t
              init.s:326    .text:000000000000028a usagefault_hl
              init.s:327    .text:000000000000028a $d
              init.s:329    .text:00000000000002ae $t
              init.s:330    .text:00000000000002b0 $d
             forth.s:558    .text:00000000000029d8 RSHIFT
              init.s:345    .text:00000000000002dc $t
              init.s:356    .text:00000000000002f6 systick_exit
              init.s:359    .text:00000000000002f8 user_reboot
              init.s:363    .text:000000000000030a ur
              init.s:364    .text:000000000000030a $d
              init.s:372    .text:0000000000000328 user_reboot_msg
             forth.s:1022   .text:0000000000002d90 COUNT
             forth.s:2108   .text:0000000000003848 TYPEE
              init.s:371    .text:0000000000000326 $t
              init.s:373    .text:0000000000000328 $d
              init.s:520    .text:000000000000049c remap
              init.s:429    .text:00000000000003c4 init_devices
               fpu.s:36     .text:0000000000001d54 fpu_init
ARM GAS  forth.s 			page 187


          ser-term.s:56     .text:000000000000072e ser_init
             tvout.s:74     .text:0000000000000984 tv_init
           ps2_kbd.s:307    .text:0000000000001530 kbd_init
         spi-flash.s:41     .text:0000000000001944 flash_spi_init
             forth.s:4174   .text:0000000000004fd0 COLD
             forth.s:83     .text:0000000000002604 NEST
              init.s:442    .text:00000000000003e2 wait_hserdy
              init.s:463    .text:0000000000000404 wait_pllrdy
              init.s:475    .text:000000000000041e wait_sws
              init.s:610    .text:0000000000000566 gpio_config
              init.s:685    .text:0000000000000612 gpio_out
              init.s:545    .text:00000000000004dc nvic_set_priority
              init.s:700    .text:0000000000000628 UZERO
              init.s:738    .text:00000000000006d8 ULAST
              init.s:554    .text:00000000000004f4 negative_irq
              init.s:566    .text:000000000000050e nvic_enable_irq
              init.s:583    .text:0000000000000538 nvic_disable_irq
              init.s:647    .text:00000000000005ce input_pull
              init.s:640    .text:00000000000005bc output_type
              init.s:663    .text:00000000000005e4 gpio_speed
              init.s:701    .text:0000000000000628 $d
             forth.s:4101   .text:0000000000004ee0 HI_BOTH
           ps2_kbd.s:396    .text:000000000000162c PS2_QKEY
             tvout.s:563    .text:0000000000000ef4 TV_EMIT
             forth.s:2861   .text:00000000000040e0 INTER
             forth.s:4171   .text:0000000000004fc8 _LASTN
             forth.s:4196   .text:0000000000005030 CTOP
             forth.s:4170   .text:0000000000004fc8 LINK
              init.s:743    .text:00000000000006d8 $d
          ser-term.s:33     .text:0000000000000700 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000786 $d
          ser-term.s:90     .text:000000000000078a _SER_QKEY
          ser-term.s:90     .text:0000000000000794 SER_QKEY
          ser-term.s:110    .text:00000000000007c0 $d
          ser-term.s:110    .text:00000000000007c4 _SER_EMIT
          ser-term.s:110    .text:00000000000007d0 SER_EMIT
          ser-term.s:124    .text:00000000000007ea $d
          ser-term.s:124    .text:00000000000007ee _LOCAL
          ser-term.s:124    .text:00000000000007f4 $t
          ser-term.s:124    .text:00000000000007f4 LOCAL
          ser-term.s:133    .text:0000000000000800 $d
          ser-term.s:133    .text:0000000000000804 _SERIAL
          ser-term.s:133    .text:000000000000080c SERIAL
          ser-term.s:142    .text:0000000000000818 $d
          ser-term.s:142    .text:000000000000081c _CONSOLE
          ser-term.s:142    .text:0000000000000824 $t
          ser-term.s:142    .text:0000000000000824 CONSOLE
             forth.s:4158   .text:0000000000004fac READY
          ser-term.s:166    .text:0000000000000858 $d
          ser-term.s:166    .text:000000000000085c _ANSI_PARAM
          ser-term.s:166    .text:0000000000000868 ANSI_PARAM
          ser-term.s:168    .text:000000000000086c $d
             forth.s:626    .text:0000000000002a5c ONEP
             forth.s:1472   .text:000000000000315c SLMOD
             forth.s:715    .text:0000000000002b10 QDUP
             forth.s:348    .text:0000000000002826 BRAN
ARM GAS  forth.s 			page 188


             forth.s:576    .text:0000000000002a00 PLUS
             forth.s:634    .text:0000000000002a6c ONEM
             forth.s:90     .text:0000000000002612 UNNEST
          ser-term.s:193    .text:00000000000008d8 _ANSI_ESC
          ser-term.s:193    .text:00000000000008e0 ANSI_ESC
          ser-term.s:195    .text:00000000000008e4 $d
          ser-term.s:205    .text:0000000000000904 _SER_AT
          ser-term.s:205    .text:000000000000090c SER_AT
          ser-term.s:207    .text:0000000000000910 $d
             forth.s:492    .text:000000000000294c SWAP
          ser-term.s:221    .text:0000000000000940 _SER_CLS
          ser-term.s:221    .text:0000000000000948 $t
          ser-term.s:221    .text:0000000000000948 SER_CLS
          ser-term.s:223    .text:000000000000094c $d
          ser-term.s:230    .text:0000000000000970 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000984 $t
             tvout.s:150    .text:0000000000000a60 state_vsync
             tvout.s:191    .text:0000000000000ab4 state_pre_video
             tvout.s:202    .text:0000000000000ac6 state_video_out
             tvout.s:237    .text:0000000000000b24 state_post_video
             tvout.s:254    .text:0000000000000b4a tv_isr_exit
             tvout.s:180    .text:0000000000000a9a sync_end
             tvout.s:246    .text:0000000000000b36 frame_end
             tvout.s:264    .text:0000000000000b4c $d
             tvout.s:264    .text:0000000000000b50 _BACKCOLOR
             tvout.s:264    .text:0000000000000b5c BACKCOLOR
             tvout.s:271    .text:0000000000000b68 $d
ARM GAS  forth.s 			page 189


             tvout.s:271    .text:0000000000000b6c _PENCOLOR
             tvout.s:271    .text:0000000000000b76 $t
             tvout.s:271    .text:0000000000000b78 PENCOLOR
             tvout.s:278    .text:0000000000000b84 $d
             tvout.s:278    .text:0000000000000b88 _CURSOR_COL
             tvout.s:278    .text:0000000000000b90 CURSOR_COL
             tvout.s:285    .text:0000000000000b9c $d
             tvout.s:285    .text:0000000000000ba0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000ba4 $t
             tvout.s:285    .text:0000000000000ba4 CURSOR_ROW
             tvout.s:292    .text:0000000000000bb0 $d
             tvout.s:292    .text:0000000000000bb4 _ROWY
             tvout.s:292    .text:0000000000000bba $t
             tvout.s:292    .text:0000000000000bbc ROWY
             tvout.s:299    .text:0000000000000bc8 $d
             tvout.s:299    .text:0000000000000bcc _COLX
             tvout.s:299    .text:0000000000000bd2 $t
             tvout.s:299    .text:0000000000000bd4 COLX
             tvout.s:306    .text:0000000000000be0 $d
             tvout.s:306    .text:0000000000000be4 _FONT
             tvout.s:306    .text:0000000000000bec FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000bf8 $d
             tvout.s:313    .text:0000000000000bfc _VIDBUFF
             tvout.s:313    .text:0000000000000c04 $t
             tvout.s:313    .text:0000000000000c04 VIDBUFF
             tvout.s:325    .text:0000000000000c0e $d
             tvout.s:325    .text:0000000000000c12 _PLOT
             tvout.s:325    .text:0000000000000c18 PLOT
             tvout.s:373    .text:0000000000000c9c plot_op
             tvout.s:341    .text:0000000000000c44 op_back
             tvout.s:350    .text:0000000000000c5e op_pen
             tvout.s:359    .text:0000000000000c78 op_invert
             tvout.s:363    .text:0000000000000c80 op_xor
             tvout.s:373    .text:0000000000000c9c $d
             tvout.s:378    .text:0000000000000ca4 _VSYNC
             tvout.s:378    .text:0000000000000caa $t
             tvout.s:378    .text:0000000000000cac VSYNC
             tvout.s:386    .text:0000000000000cb6 $d
             tvout.s:386    .text:0000000000000cba _CLS
             tvout.s:386    .text:0000000000000cbe $t
             tvout.s:386    .text:0000000000000cc0 CLS
             tvout.s:410    .text:0000000000000d02 $d
             tvout.s:410    .text:0000000000000d06 _CLRLINE
             tvout.s:410    .text:0000000000000d0e $t
             tvout.s:410    .text:0000000000000d10 CLRLINE
             tvout.s:412    .text:0000000000000d14 $d
             forth.s:594    .text:0000000000002a20 STAR
             forth.s:1699   .text:0000000000003390 FILL
             tvout.s:427    .text:0000000000000d48 _SCROLLUP
             tvout.s:427    .text:0000000000000d54 SCROLLUP
             tvout.s:429    .text:0000000000000d58 $d
             forth.s:585    .text:0000000000002a10 SUBB
             forth.s:1667   .text:0000000000003348 MOVE
             tvout.s:448    .text:0000000000000da0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000dac SCROLLDOWN
             tvout.s:450    .text:0000000000000db0 $d
ARM GAS  forth.s 			page 190


             tvout.s:467    .text:0000000000000df0 _TV_CRLF
             tvout.s:467    .text:0000000000000df8 $t
             tvout.s:467    .text:0000000000000df8 TV_CRLF
             tvout.s:482    .text:0000000000000e1a $d
             tvout.s:482    .text:0000000000000e1e _RIGHT
             tvout.s:482    .text:0000000000000e24 $t
             tvout.s:482    .text:0000000000000e24 RIGHT
             tvout.s:495    .text:0000000000000e38 $d
             tvout.s:495    .text:0000000000000e3c _LEFT
             tvout.s:495    .text:0000000000000e44 LEFT
             tvout.s:511    .text:0000000000000e70 FONT_PIXEL
             tvout.s:518    .text:0000000000000e80 INCR_X
             tvout.s:525    .text:0000000000000e8c NEXT_PIXEL
             tvout.s:534    .text:0000000000000e94 CHAR_ROW
             tvout.s:536    .text:0000000000000e98 $d
             forth.s:765    .text:0000000000002b74 DDUP
             forth.s:419    .text:00000000000028b4 RAT
             forth.s:314    .text:00000000000027f4 DONXT
             forth.s:756    .text:0000000000002b60 TDROP
             tvout.s:551    .text:0000000000000ed4 CHAR_FONT
             tvout.s:552    .text:0000000000000ed4 $t
             tvout.s:563    .text:0000000000000ee8 $d
             tvout.s:563    .text:0000000000000eec _TV_EMIT
             tvout.s:563    .text:0000000000000ef4 $t
             tvout.s:565    .text:0000000000000ef8 $d
             forth.s:918    .text:0000000000002cc0 ULESS
             tvout.s:593    .text:0000000000000f7c CTRL_KEY
             forth.s:373    .text:0000000000002858 AT
             forth.s:725    .text:0000000000002b24 ROT
             forth.s:391    .text:0000000000002878 CAT
             tvout.s:660    .text:0000000000001064 SHOW_CURSOR
             tvout.s:691    .text:00000000000010ec HIDE_CURSOR
             forth.s:893    .text:0000000000002c88 EQUAL
             tvout.s:650    .text:0000000000001044 BACK_SPACE
             forth.s:476    .text:000000000000292c DROP
             tvout.s:618    .text:0000000000000fec CAR_RET
             tvout.s:629    .text:0000000000001004 LN_FEED
             tvout.s:619    .text:0000000000000fec $t
             tvout.s:620    .text:0000000000000ff0 $d
             tvout.s:630    .text:0000000000001004 $t
             tvout.s:631    .text:0000000000001008 $d
             forth.s:537    .text:00000000000029a8 XORR
             tvout.s:651    .text:0000000000001044 $t
             tvout.s:652    .text:0000000000001048 $d
             tvout.s:660    .text:0000000000001058 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001064 $t
             tvout.s:663    .text:0000000000001068 $d
             forth.s:707    .text:0000000000002b00 TWOSL
             forth.s:381    .text:0000000000002864 CSTOR
             forth.s:747    .text:0000000000002b4c DDROP
             tvout.s:691    .text:00000000000010e0 _HIDE_CURSOR
             tvout.s:691    .text:00000000000010ec $t
             tvout.s:694    .text:00000000000010f0 $d
             forth.s:567    .text:00000000000029f0 LSHIFT
             forth.s:528    .text:0000000000002994 ORR
             tvout.s:704    .text:0000000000001118 _TV_AT
             tvout.s:704    .text:000000000000111e $t
ARM GAS  forth.s 			page 191


             tvout.s:704    .text:0000000000001120 TV_AT
             tvout.s:719    .text:0000000000001144 $d
             tvout.s:719    .text:0000000000001148 _INPUT
             tvout.s:719    .text:000000000000114e $t
             tvout.s:719    .text:0000000000001150 INPUT
             tvout.s:721    .text:0000000000001154 $d
             forth.s:1611   .text:00000000000032c0 PAD
             forth.s:2769   .text:0000000000003fcc ACCEP
             forth.s:502    .text:0000000000002960 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001180 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
ARM GAS  forth.s 			page 192


       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
ARM GAS  forth.s 			page 193


       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000118c sc_ascii
         mcSaite.inc:100    .text:0000000000001240 shifted
         mcSaite.inc:151    .text:00000000000012a0 altchar
         mcSaite.inc:167    .text:00000000000012b0 extended
         mcSaite.inc:191    .text:00000000000012d8 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000130e $t
           ps2_kbd.s:179    .text:000000000000143a send_bit
           ps2_kbd.s:107    .text:0000000000001370 start_bit
           ps2_kbd.s:118    .text:0000000000001394 parity_bit
           ps2_kbd.s:125    .text:00000000000013a8 stop_bit
           ps2_kbd.s:152    .text:00000000000013fe store_code
ARM GAS  forth.s 			page 194


           ps2_kbd.s:253    .text:00000000000014ce do_async_key
           ps2_kbd.s:204    .text:000000000000147e send_parity
           ps2_kbd.s:211    .text:0000000000001490 send_stop
           ps2_kbd.s:218    .text:000000000000149a rx_ack_bit
           ps2_kbd.s:236    .text:00000000000014ba is_async_key
           ps2_kbd.s:286    .text:000000000000151e async_keys
           ps2_kbd.s:378    .text:0000000000001604 table_scan
           ps2_kbd.s:260    .text:00000000000014e0 set_async_key
           ps2_kbd.s:295    .text:000000000000152c async_jump
           ps2_kbd.s:265    .text:00000000000014ee shift_key
           ps2_kbd.s:273    .text:00000000000014fe set_reset
           ps2_kbd.s:268    .text:00000000000014f4 ctrl_key
           ps2_kbd.s:271    .text:00000000000014fa alt_key
           ps2_kbd.s:287    .text:000000000000151e $d
           ps2_kbd.s:340    .text:00000000000015ac $d
           ps2_kbd.s:340    .text:00000000000015b0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000015ba $t
           ps2_kbd.s:340    .text:00000000000015bc KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000015cc keycode
           ps2_kbd.s:365    .text:00000000000015f4 wait_code
           ps2_kbd.s:396    .text:000000000000161e $d
           ps2_kbd.s:396    .text:0000000000001622 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001678 inkey_exit
           ps2_kbd.s:418    .text:000000000000167c pause_key
           ps2_kbd.s:427    .text:0000000000001692 do_modifiers
           ps2_kbd.s:436    .text:00000000000016aa shift_down
           ps2_kbd.s:440    .text:00000000000016b0 altchar_down
           ps2_kbd.s:444    .text:00000000000016b6 ctrl_down
           ps2_kbd.s:452    .text:00000000000016d2 do_capslock
           ps2_kbd.s:478    .text:00000000000016f6 kbd_send
           ps2_kbd.s:553    .text:00000000000017ea kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001808 $d
           ps2_kbd.s:567    .text:000000000000180c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001814 $t
           ps2_kbd.s:567    .text:0000000000001814 KBD_RST
           ps2_kbd.s:591    .text:000000000000185e $d
           ps2_kbd.s:591    .text:0000000000001862 _KBD_LED
           ps2_kbd.s:591    .text:000000000000186a $t
           ps2_kbd.s:591    .text:000000000000186c KBD_LED
           ps2_kbd.s:616    .text:00000000000018c0 $d
           ps2_kbd.s:616    .text:00000000000018c4 _CAPS_LED
           ps2_kbd.s:616    .text:00000000000018d0 CAPS_LED
           ps2_kbd.s:633    .text:00000000000018fa $d
           ps2_kbd.s:633    .text:00000000000018fe _WKEY
           ps2_kbd.s:633    .text:0000000000001908 WKEY
           ps2_kbd.s:635    .text:000000000000190c $d
           ps2_kbd.s:640    .text:0000000000001924 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001944 $t
         spi-flash.s:85     .text:00000000000019e6 $d
         spi-flash.s:85     .text:00000000000019ea _CHIP_SEL
         spi-flash.s:85     .text:00000000000019f4 CHIP_SEL
         spi-flash.s:97     .text:0000000000001a12 $d
         spi-flash.s:97     .text:0000000000001a16 _CHIP_DSEL
ARM GAS  forth.s 			page 195


         spi-flash.s:97     .text:0000000000001a20 $t
         spi-flash.s:97     .text:0000000000001a20 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001a4e $d
         spi-flash.s:113    .text:0000000000001a52 _RD_BYTE
         spi-flash.s:113    .text:0000000000001a5a $t
         spi-flash.s:113    .text:0000000000001a5c RD_BYTE
         spi-flash.s:133    .text:0000000000001a84 $d
         spi-flash.s:133    .text:0000000000001a88 _WR_BYTE
         spi-flash.s:133    .text:0000000000001a90 $t
         spi-flash.s:133    .text:0000000000001a90 WR_BYTE
         spi-flash.s:151    .text:0000000000001ab4 $d
         spi-flash.s:151    .text:0000000000001ab8 _WR_DIS
         spi-flash.s:151    .text:0000000000001ac0 WR_DIS
         spi-flash.s:153    .text:0000000000001ac4 $d
         spi-flash.s:163    .text:0000000000001ae0 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ae8 $t
         spi-flash.s:163    .text:0000000000001ae8 WR_ENBL
         spi-flash.s:165    .text:0000000000001aec $d
         spi-flash.s:175    .text:0000000000001b08 _RD_SR
         spi-flash.s:175    .text:0000000000001b0e $t
         spi-flash.s:175    .text:0000000000001b10 RD_SR
         spi-flash.s:177    .text:0000000000001b14 $d
         spi-flash.s:185    .text:0000000000001b38 sr_cmd
         spi-flash.s:191    .text:0000000000001b3f _SEND_ADR
         spi-flash.s:191    .text:0000000000001b48 $t
         spi-flash.s:191    .text:0000000000001b48 SEND_ADR
         spi-flash.s:193    .text:0000000000001b4c $d
         spi-flash.s:208    .text:0000000000001b80 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001b8a $t
         spi-flash.s:208    .text:0000000000001b8c WAIT_DONE
         spi-flash.s:210    .text:0000000000001b90 $d
         spi-flash.s:223    .text:0000000000001bc0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001bca $t
         spi-flash.s:223    .text:0000000000001bcc ERASE_BLK
         spi-flash.s:225    .text:0000000000001bd0 $d
         spi-flash.s:238    .text:0000000000001bf8 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001c04 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001c08 $d
         spi-flash.s:256    .text:0000000000001c38 _RD_BLK
         spi-flash.s:256    .text:0000000000001c40 RD_BLK
         spi-flash.s:258    .text:0000000000001c44 $d
         spi-flash.s:278    .text:0000000000001c8c _WR_BLK
         spi-flash.s:278    .text:0000000000001c94 WR_BLK
         spi-flash.s:280    .text:0000000000001c98 $d
             forth.s:2289   .text:0000000000003a08 HDOT
         spi-flash.s:316    .text:0000000000001cf0 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001cfc $t
         spi-flash.s:316    .text:0000000000001cfc SEARCH_FILE
         spi-flash.s:319    .text:0000000000001d00 $d
         spi-flash.s:325    .text:0000000000001d08 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001d14 ERASE_FILE
         spi-flash.s:328    .text:0000000000001d18 $d
         spi-flash.s:334    .text:0000000000001d20 _DIR
         spi-flash.s:334    .text:0000000000001d24 $t
         spi-flash.s:334    .text:0000000000001d24 DIR
         spi-flash.s:337    .text:0000000000001d28 $d
         spi-flash.s:343    .text:0000000000001d30 _SAVE
ARM GAS  forth.s 			page 196


         spi-flash.s:343    .text:0000000000001d38 SAVE
         spi-flash.s:346    .text:0000000000001d3c $d
         spi-flash.s:352    .text:0000000000001d44 _LOAD
         spi-flash.s:352    .text:0000000000001d4c LOAD
         spi-flash.s:355    .text:0000000000001d50 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:37     .text:0000000000001d54 $t
               fpu.s:54     .text:0000000000001d82 $d
               fpu.s:54     .text:0000000000001d86 _FPSCR
               fpu.s:54     .text:0000000000001d8c $t
               fpu.s:64     .text:0000000000001d9c $d
               fpu.s:64     .text:0000000000001da0 _CLR_FPSCR
               fpu.s:64     .text:0000000000001daa $t
               fpu.s:64     .text:0000000000001dac CLR_FPSCR
               fpu.s:75     .text:0000000000001dbc $d
               fpu.s:75     .text:0000000000001dc0 _TOS0
               fpu.s:75     .text:0000000000001dc4 $t
               fpu.s:75     .text:0000000000001dc4 TOS0
               fpu.s:84     .text:0000000000001dd0 $d
               fpu.s:84     .text:0000000000001dd4 _TOS1
               fpu.s:84     .text:0000000000001dd8 $t
               fpu.s:84     .text:0000000000001dd8 TOS1
               fpu.s:93     .text:0000000000001de4 $d
               fpu.s:93     .text:0000000000001de8 _TOS2
               fpu.s:93     .text:0000000000001dec $t
               fpu.s:93     .text:0000000000001dec TOS2
               fpu.s:102    .text:0000000000001df8 $d
               fpu.s:102    .text:0000000000001dfc _S0FROM
               fpu.s:102    .text:0000000000001e00 $t
               fpu.s:102    .text:0000000000001e00 S0FROM
               fpu.s:111    .text:0000000000001e0c $d
               fpu.s:111    .text:0000000000001e10 _S1FROM
               fpu.s:111    .text:0000000000001e14 $t
               fpu.s:111    .text:0000000000001e14 S1FROM
               fpu.s:120    .text:0000000000001e1e $d
               fpu.s:120    .text:0000000000001e22 _S2FROM
               fpu.s:120    .text:0000000000001e26 $t
               fpu.s:120    .text:0000000000001e28 S2FROM
               fpu.s:131    .text:0000000000001e32 $d
               fpu.s:131    .text:0000000000001e36 _FTOS
               fpu.s:131    .text:0000000000001e3a $t
               fpu.s:131    .text:0000000000001e3c FTOS
               fpu.s:141    .text:0000000000001e4a $d
               fpu.s:141    .text:0000000000001e4e _TRUNC
               fpu.s:141    .text:0000000000001e54 $t
               fpu.s:141    .text:0000000000001e54 TRUNC
               fpu.s:151    .text:0000000000001e62 $d
               fpu.s:151    .text:0000000000001e66 _STOF
               fpu.s:151    .text:0000000000001e6a $t
               fpu.s:151    .text:0000000000001e6c STOF
               fpu.s:161    .text:0000000000001e7a $d
               fpu.s:161    .text:0000000000001e7e _FPLUS
               fpu.s:161    .text:0000000000001e84 FPLUS
               fpu.s:174    .text:0000000000001e9a $d
               fpu.s:174    .text:0000000000001e9e _FMINUS
ARM GAS  forth.s 			page 197


               fpu.s:174    .text:0000000000001ea4 FMINUS
               fpu.s:188    .text:0000000000001eba $d
               fpu.s:188    .text:0000000000001ebe _FSTAR
               fpu.s:188    .text:0000000000001ec4 FSTAR
               fpu.s:201    .text:0000000000001eda $d
               fpu.s:201    .text:0000000000001ede _FSLH
               fpu.s:201    .text:0000000000001ee4 FSLH
               fpu.s:214    .text:0000000000001efa $d
               fpu.s:214    .text:0000000000001efe _FNEG
               fpu.s:214    .text:0000000000001f06 $t
               fpu.s:214    .text:0000000000001f08 FNEG
               fpu.s:224    .text:0000000000001f16 $d
               fpu.s:224    .text:0000000000001f1a _FABS
               fpu.s:224    .text:0000000000001f20 FABS
               fpu.s:235    .text:0000000000001f2e $d
               fpu.s:235    .text:0000000000001f32 _SQRT
               fpu.s:235    .text:0000000000001f38 SQRT
               fpu.s:245    .text:0000000000001f46 $d
               fpu.s:245    .text:0000000000001f4a _FZLESS
               fpu.s:245    .text:0000000000001f4e $t
               fpu.s:245    .text:0000000000001f50 FZLESS
               fpu.s:257    .text:0000000000001f66 $d
               fpu.s:257    .text:0000000000001f6a _FGREAT
               fpu.s:257    .text:0000000000001f70 FGREAT
               fpu.s:259    .text:0000000000001f74 $d
             forth.s:833    .text:0000000000002c0c INVER
               fpu.s:268    .text:0000000000001f88 _FLESS
               fpu.s:268    .text:0000000000001f8c FLESS
               fpu.s:270    .text:0000000000001f90 $d
               fpu.s:278    .text:0000000000001fa0 _FMIN
               fpu.s:278    .text:0000000000001fa8 FMIN
               fpu.s:280    .text:0000000000001fac $d
               fpu.s:291    .text:0000000000001fd0 _FMAX
               fpu.s:291    .text:0000000000001fd8 FMAX
               fpu.s:293    .text:0000000000001fdc $d
               fpu.s:306    .text:0000000000002000 _PI
               fpu.s:306    .text:0000000000002004 PI
               fpu.s:320    .text:0000000000002012 $d
               fpu.s:320    .text:0000000000002016 _AT_EXPONENT
               fpu.s:320    .text:0000000000002020 $t
               fpu.s:320    .text:0000000000002020 AT_EXPONENT
               fpu.s:322    .text:0000000000002024 $d
               fpu.s:347    .text:0000000000002050 _FDOT
               fpu.s:347    .text:0000000000002054 FDOT
               fpu.s:349    .text:0000000000002058 $d
               fpu.s:381    .text:00000000000020c0 EXPONENT
               fpu.s:382    .text:00000000000020c0 $t
               fpu.s:383    .text:00000000000020c4 $d
             forth.s:1987   .text:00000000000036b0 CHARQ
             forth.s:1958   .text:0000000000003650 PARSE_DIGITS
             forth.s:841    .text:0000000000002c20 NEGAT
               fpu.s:415    .text:0000000000002138 _NUMBER
               fpu.s:415    .text:0000000000002140 NUMBER
               fpu.s:417    .text:0000000000002144 $d
             forth.s:2009   .text:00000000000036d4 INTQ
            strtof.s:282    .text:00000000000024b4 FLOATQ
               fpu.s:422    .text:0000000000002160 $d
ARM GAS  forth.s 			page 198


            strtof.s:32     .text:0000000000002164 powersof10
            strtof.s:39     *ABS*:0000000000000000 fzero
            strtof.s:40     *ABS*:000000003f800000 fone
            strtof.s:41     *ABS*:00000000bf800000 fminus1
            strtof.s:42     *ABS*:0000000041200000 ften
            strtof.s:46     .text:000000000000217c get_sign
            strtof.s:47     .text:000000000000217c $t
            strtof.s:48     .text:0000000000002180 $d
            strtof.s:268    .text:0000000000002490 padv
            strtof.s:93     .text:00000000000021d4 parse_int
            strtof.s:94     .text:00000000000021d4 $t
            strtof.s:95     .text:00000000000021d8 $d
             forth.s:736    .text:0000000000002b38 NROT
             forth.s:882    .text:0000000000002c74 ZEQUAL
             forth.s:1931   .text:00000000000035f4 DIGTQ
            strtof.s:122    .text:000000000000224c parse_frac
            strtof.s:123    .text:000000000000224c $t
            strtof.s:124    .text:0000000000002250 $d
            strtof.s:158    .text:00000000000022e4 parse_exp
            strtof.s:159    .text:00000000000022e4 $t
            strtof.s:160    .text:00000000000022e8 $d
            strtof.s:190    .text:0000000000002370 power10
            strtof.s:191    .text:0000000000002370 $t
            strtof.s:192    .text:0000000000002374 $d
            strtof.s:202    .text:0000000000002394 bit_state
            strtof.s:203    .text:0000000000002394 $t
            strtof.s:204    .text:0000000000002398 $d
             forth.s:1582   .text:0000000000003280 PICK
            strtof.s:216    .text:00000000000023b8 mult_div_exp
            strtof.s:217    .text:00000000000023b8 $t
            strtof.s:218    .text:00000000000023bc $d
             forth.s:511    .text:0000000000002970 ZLESS
            strtof.s:244    .text:0000000000002438 pos_exp
             forth.s:849    .text:0000000000002c30 ABSS
            strtof.s:229    .text:00000000000023f0 div_loop
             forth.s:954    .text:0000000000002d08 GREAT
            strtof.s:246    .text:000000000000243c mult_loop
            strtof.s:269    .text:0000000000002490 $t
            strtof.s:270    .text:0000000000002494 $d
            strtof.s:282    .text:00000000000024ac _FLOATQ
            strtof.s:286    .text:00000000000024b8 $d
            strtof.s:303    .text:0000000000002504 int_part
            strtof.s:357    .text:00000000000025e8 error1
            strtof.s:311    .text:0000000000002524 dot_or_e
            strtof.s:354    .text:00000000000025e0 not_float
            strtof.s:331    .text:0000000000002574 test_E
            strtof.s:344    .text:00000000000025ac is_float
            strtof.s:342    .text:00000000000025a8 exp_to_bin
            strtof.s:361    .text:00000000000025f4 restore_base
             forth.s:80     .text:0000000000002604 $t
             forth.s:103    .text:000000000000261c COMPI_NEST
             forth.s:116    .text:000000000000263a TSTDIN
             forth.s:123    .text:0000000000002644 TSTDOUT
             forth.s:132    .text:000000000000264e $d
             forth.s:132    .text:0000000000002652 _CFSR
             forth.s:144    .text:0000000000002672 $d
             forth.s:144    .text:0000000000002676 _BFAR
ARM GAS  forth.s 			page 199


             forth.s:156    .text:0000000000002696 $d
             forth.s:156    .text:000000000000269a _QKEY
             forth.s:156    .text:00000000000026a0 QKEY
             forth.s:158    .text:00000000000026a4 $d
             forth.s:1634   .text:00000000000032f8 ATEXE
             forth.s:166    .text:00000000000026b4 _KEY
             forth.s:166    .text:00000000000026b8 $t
             forth.s:166    .text:00000000000026b8 KEY
             forth.s:168    .text:00000000000026bc KEY1
             forth.s:169    .text:00000000000026bc $d
             forth.s:178    .text:00000000000026d4 _EMIT
             forth.s:180    .text:00000000000026e0 $d
             forth.s:214    .text:00000000000026f0 _RAND
             forth.s:214    .text:00000000000026f8 RAND
             forth.s:216    .text:00000000000026fc $d
             forth.s:1073   .text:0000000000002dd8 SEED
             forth.s:1485   .text:000000000000317c MODD
             forth.s:245    .text:000000000000276c _PAUSE
             forth.s:245    .text:0000000000002772 $t
             forth.s:245    .text:0000000000002774 PAUSE
             forth.s:247    .text:0000000000002778 $d
             forth.s:1091   .text:0000000000002e00 TIMER
             forth.s:249    .text:0000000000002780 PAUSE_LOOP
             forth.s:254    .text:0000000000002798 PAUSE_EXIT
             forth.s:261    .text:00000000000027a0 _ULED
             forth.s:270    .text:00000000000027c4 ULED_OFF
             forth.s:284    .text:00000000000027c8 $d
             forth.s:284    .text:00000000000027cc _NOP
             forth.s:284    .text:00000000000027d0 $t
             forth.s:284    .text:00000000000027d0 NOP
             forth.s:301    .text:00000000000027dc $d
             forth.s:301    .text:00000000000027e0 _EXECU
             forth.s:301    .text:00000000000027e8 $t
             forth.s:301    .text:00000000000027e8 EXECU
             forth.s:321    .text:0000000000002804 NEXT1
             forth.s:339    .text:0000000000002820 QBRAN1
             forth.s:356    .text:000000000000282c $d
             forth.s:356    .text:0000000000002830 _EXIT
             forth.s:356    .text:0000000000002838 EXIT
             forth.s:357    .text:0000000000002838 $d
             forth.s:363    .text:0000000000002840 _STORE
             forth.s:363    .text:0000000000002842 $t
             forth.s:373    .text:0000000000002850 $d
             forth.s:373    .text:0000000000002854 _AT
             forth.s:373    .text:0000000000002856 $t
             forth.s:381    .text:000000000000285c $d
             forth.s:381    .text:0000000000002860 _CSTOR
             forth.s:391    .text:0000000000002870 $d
             forth.s:391    .text:0000000000002874 _CAT
             forth.s:399    .text:000000000000287c $d
             forth.s:399    .text:0000000000002880 _RFROM
             forth.s:408    .text:000000000000288e $d
             forth.s:408    .text:0000000000002892 _DRFROM
             forth.s:408    .text:0000000000002896 $t
             forth.s:408    .text:0000000000002898 DRFROM
             forth.s:419    .text:00000000000028aa $d
             forth.s:419    .text:00000000000028ae _RAT
ARM GAS  forth.s 			page 200


             forth.s:428    .text:00000000000028be $d
             forth.s:428    .text:00000000000028c2 _TOR
             forth.s:437    .text:00000000000028d2 $d
             forth.s:437    .text:00000000000028d6 _DTOR
             forth.s:437    .text:00000000000028da $t
             forth.s:437    .text:00000000000028dc DTOR
             forth.s:449    .text:00000000000028ee $d
             forth.s:449    .text:00000000000028f2 _RPSTOR
             forth.s:449    .text:00000000000028f6 $t
             forth.s:449    .text:00000000000028f8 RPSTOR
             forth.s:458    .text:0000000000002900 $d
             forth.s:458    .text:0000000000002904 _SPSTOR
             forth.s:458    .text:0000000000002908 $t
             forth.s:458    .text:0000000000002908 SPSTOR
             forth.s:467    .text:0000000000002910 $d
             forth.s:467    .text:0000000000002914 _SPAT
             forth.s:467    .text:0000000000002918 $t
             forth.s:467    .text:0000000000002918 SPAT
             forth.s:476    .text:0000000000002920 $d
             forth.s:476    .text:0000000000002924 _DROP
             forth.s:484    .text:0000000000002932 $d
             forth.s:484    .text:0000000000002936 _DUPP
             forth.s:484    .text:000000000000293a $t
             forth.s:492    .text:0000000000002942 $d
             forth.s:492    .text:0000000000002946 _SWAP
             forth.s:502    .text:0000000000002954 $d
             forth.s:502    .text:0000000000002958 _OVER
             forth.s:511    .text:0000000000002968 $d
             forth.s:511    .text:000000000000296c _ZLESS
             forth.s:519    .text:0000000000002976 $d
             forth.s:519    .text:000000000000297a _ANDD
             forth.s:519    .text:000000000000297e $t
             forth.s:528    .text:000000000000298a $d
             forth.s:528    .text:000000000000298e _ORR
             forth.s:537    .text:000000000000299e $d
             forth.s:537    .text:00000000000029a2 _XORR
             forth.s:537    .text:00000000000029a6 $t
             forth.s:546    .text:00000000000029b2 $d
             forth.s:546    .text:00000000000029b6 _UPLUS
             forth.s:546    .text:00000000000029ba $t
             forth.s:546    .text:00000000000029bc UPLUS
             forth.s:558    .text:00000000000029cc $d
             forth.s:558    .text:00000000000029d0 _RSHIFT
             forth.s:567    .text:00000000000029e2 $d
             forth.s:567    .text:00000000000029e6 _LSHIFT
             forth.s:576    .text:00000000000029fa $d
             forth.s:576    .text:00000000000029fe _PLUS
             forth.s:576    .text:0000000000002a00 $t
             forth.s:585    .text:0000000000002a08 $d
             forth.s:585    .text:0000000000002a0c _SUBB
             forth.s:585    .text:0000000000002a0e $t
             forth.s:594    .text:0000000000002a1a $d
             forth.s:594    .text:0000000000002a1e _STAR
             forth.s:594    .text:0000000000002a20 $t
             forth.s:603    .text:0000000000002a2a $d
             forth.s:603    .text:0000000000002a2e _UMSTA
             forth.s:603    .text:0000000000002a32 $t
ARM GAS  forth.s 			page 201


             forth.s:603    .text:0000000000002a34 UMSTA
             forth.s:615    .text:0000000000002a40 $d
             forth.s:615    .text:0000000000002a44 _MSTAR
             forth.s:615    .text:0000000000002a48 MSTAR
             forth.s:626    .text:0000000000002a54 $d
             forth.s:626    .text:0000000000002a58 _ONEP
             forth.s:634    .text:0000000000002a62 $d
             forth.s:634    .text:0000000000002a66 _ONEM
             forth.s:642    .text:0000000000002a72 $d
             forth.s:642    .text:0000000000002a76 _TWOP
             forth.s:642    .text:0000000000002a7c TWOP
             forth.s:650    .text:0000000000002a82 $d
             forth.s:650    .text:0000000000002a86 _TWOM
             forth.s:650    .text:0000000000002a8c TWOM
             forth.s:658    .text:0000000000002a92 $d
             forth.s:658    .text:0000000000002a96 _CELLP
             forth.s:658    .text:0000000000002a9c $t
             forth.s:658    .text:0000000000002a9c CELLP
             forth.s:666    .text:0000000000002aa2 $d
             forth.s:666    .text:0000000000002aa6 _CELLM
             forth.s:666    .text:0000000000002aac $t
             forth.s:666    .text:0000000000002aac CELLM
             forth.s:674    .text:0000000000002ab2 $d
             forth.s:674    .text:0000000000002ab6 _BLANK
             forth.s:674    .text:0000000000002abc BLANK
             forth.s:683    .text:0000000000002ac6 $d
             forth.s:683    .text:0000000000002aca _CELLS
             forth.s:683    .text:0000000000002ad0 $t
             forth.s:683    .text:0000000000002ad0 CELLS
             forth.s:691    .text:0000000000002ad6 $d
             forth.s:691    .text:0000000000002ada _CELLSL
             forth.s:691    .text:0000000000002ae0 $t
             forth.s:691    .text:0000000000002ae0 CELLSL
             forth.s:699    .text:0000000000002ae6 $d
             forth.s:699    .text:0000000000002aea _TWOST
             forth.s:699    .text:0000000000002af0 TWOST
             forth.s:707    .text:0000000000002af6 $d
             forth.s:707    .text:0000000000002afa _TWOSL
             forth.s:715    .text:0000000000002b06 $d
             forth.s:715    .text:0000000000002b0a _QDUP
             forth.s:725    .text:0000000000002b1a $d
             forth.s:725    .text:0000000000002b1e _ROT
             forth.s:725    .text:0000000000002b22 $t
             forth.s:736    .text:0000000000002b2e $d
             forth.s:736    .text:0000000000002b32 _NROT
             forth.s:747    .text:0000000000002b42 $d
             forth.s:747    .text:0000000000002b46 _DDROP
             forth.s:747    .text:0000000000002b4c $t
             forth.s:756    .text:0000000000002b56 $d
             forth.s:756    .text:0000000000002b5a _TDROP
             forth.s:756    .text:0000000000002b60 $t
             forth.s:765    .text:0000000000002b6a $d
             forth.s:765    .text:0000000000002b6e _DDUP
             forth.s:775    .text:0000000000002b80 $d
             forth.s:775    .text:0000000000002b84 _DPLUS
             forth.s:775    .text:0000000000002b88 DPLUS
             forth.s:788    .text:0000000000002b9c $d
ARM GAS  forth.s 			page 202


             forth.s:788    .text:0000000000002ba0 _DABS
             forth.s:788    .text:0000000000002ba8 DABS
             forth.s:804    .text:0000000000002bc4 $d
             forth.s:804    .text:0000000000002bc8 _UDGREAT
             forth.s:804    .text:0000000000002bcc $t
             forth.s:804    .text:0000000000002bcc UDGREAT
             forth.s:821    .text:0000000000002be8 $d
             forth.s:821    .text:0000000000002bec _DZEQUAL
             forth.s:821    .text:0000000000002bf0 $t
             forth.s:821    .text:0000000000002bf0 DZEQUAL
             forth.s:833    .text:0000000000002c02 $d
             forth.s:833    .text:0000000000002c06 _INVER
             forth.s:833    .text:0000000000002c0a $t
             forth.s:841    .text:0000000000002c12 $d
             forth.s:841    .text:0000000000002c16 _NEGAT
             forth.s:849    .text:0000000000002c26 $d
             forth.s:849    .text:0000000000002c2a _ABSS
             forth.s:849    .text:0000000000002c2e $t
             forth.s:859    .text:0000000000002c3a $d
             forth.s:859    .text:0000000000002c3e _CLZ
             forth.s:859    .text:0000000000002c42 $t
             forth.s:859    .text:0000000000002c44 CLZ
             forth.s:867    .text:0000000000002c4a $d
             forth.s:867    .text:0000000000002c4e _CTZ
             forth.s:867    .text:0000000000002c52 $t
             forth.s:867    .text:0000000000002c54 CTZ
             forth.s:882    .text:0000000000002c6c $d
             forth.s:882    .text:0000000000002c70 _ZEQUAL
             forth.s:893    .text:0000000000002c82 $d
             forth.s:893    .text:0000000000002c86 _EQUAL
             forth.s:893    .text:0000000000002c88 $t
             forth.s:905    .text:0000000000002c98 $d
             forth.s:905    .text:0000000000002c9c _DIFF
             forth.s:905    .text:0000000000002ca0 DIFF
             forth.s:918    .text:0000000000002cb8 $d
             forth.s:918    .text:0000000000002cbc _ULESS
             forth.s:930    .text:0000000000002cd0 $d
             forth.s:930    .text:0000000000002cd4 _LESS
             forth.s:930    .text:0000000000002cd6 $t
             forth.s:930    .text:0000000000002cd8 LESS
             forth.s:942    .text:0000000000002ce8 $d
             forth.s:942    .text:0000000000002cec _UGREAT
             forth.s:942    .text:0000000000002cf0 UGREAT
             forth.s:954    .text:0000000000002d00 $d
             forth.s:954    .text:0000000000002d04 _GREAT
             forth.s:954    .text:0000000000002d06 $t
             forth.s:966    .text:0000000000002d18 $d
             forth.s:966    .text:0000000000002d1c _MAX
             forth.s:966    .text:0000000000002d20 $t
             forth.s:966    .text:0000000000002d20 MAX
             forth.s:977    .text:0000000000002d2c $d
             forth.s:977    .text:0000000000002d30 _MIN
             forth.s:977    .text:0000000000002d34 $t
             forth.s:977    .text:0000000000002d34 MIN
             forth.s:988    .text:0000000000002d40 $d
             forth.s:988    .text:0000000000002d44 _PSTOR
             forth.s:988    .text:0000000000002d48 PSTOR
ARM GAS  forth.s 			page 203


             forth.s:1000   .text:0000000000002d58 $d
             forth.s:1000   .text:0000000000002d5c _DSTOR
             forth.s:1000   .text:0000000000002d60 DSTOR
             forth.s:1012   .text:0000000000002d74 $d
             forth.s:1012   .text:0000000000002d78 _DAT
             forth.s:1012   .text:0000000000002d7c DAT
             forth.s:1022   .text:0000000000002d86 $d
             forth.s:1022   .text:0000000000002d8a _COUNT
             forth.s:1022   .text:0000000000002d90 $t
             forth.s:1032   .text:0000000000002d9c $d
             forth.s:1032   .text:0000000000002da0 _DNEGA
             forth.s:1032   .text:0000000000002da8 $t
             forth.s:1032   .text:0000000000002da8 DNEGA
             forth.s:1049   .text:0000000000002db8 DOVAR
             forth.s:1060   .text:0000000000002dc4 DOCON
             forth.s:1073   .text:0000000000002dce $d
             forth.s:1073   .text:0000000000002dd2 _SEED
             forth.s:1082   .text:0000000000002de2 $d
             forth.s:1082   .text:0000000000002de6 _MSEC
             forth.s:1091   .text:0000000000002df6 $d
             forth.s:1091   .text:0000000000002dfa _TIMER
             forth.s:1091   .text:0000000000002e00 $t
             forth.s:1100   .text:0000000000002e0a $d
             forth.s:1100   .text:0000000000002e0e _TBOOT
             forth.s:1100   .text:0000000000002e14 $t
             forth.s:1100   .text:0000000000002e14 TBOOT
             forth.s:1109   .text:0000000000002e20 $d
             forth.s:1109   .text:0000000000002e24 _BASE
             forth.s:1119   .text:0000000000002e38 TEMP
             forth.s:1128   .text:0000000000002e44 $d
             forth.s:1128   .text:0000000000002e48 _SPAN
             forth.s:1128   .text:0000000000002e50 SPAN
             forth.s:1137   .text:0000000000002e5c $d
             forth.s:1137   .text:0000000000002e60 _INN
             forth.s:1137   .text:0000000000002e64 $t
             forth.s:1137   .text:0000000000002e64 INN
             forth.s:1147   .text:0000000000002e70 $d
             forth.s:1147   .text:0000000000002e74 _NTIB
             forth.s:1147   .text:0000000000002e7c NTIB
             forth.s:1156   .text:0000000000002e88 $d
             forth.s:1156   .text:0000000000002e8c _TEVAL
             forth.s:1156   .text:0000000000002e92 $t
             forth.s:1156   .text:0000000000002e94 TEVAL
             forth.s:1166   .text:0000000000002ea0 $d
             forth.s:1166   .text:0000000000002ea4 _HLD
             forth.s:1166   .text:0000000000002ea8 $t
             forth.s:1166   .text:0000000000002ea8 HLD
             forth.s:1176   .text:0000000000002eb4 $d
             forth.s:1176   .text:0000000000002eb8 _CNTXT
             forth.s:1176   .text:0000000000002ec0 $t
             forth.s:1176   .text:0000000000002ec0 CNTXT
             forth.s:1177   .text:0000000000002ec0 CRRNT
             forth.s:1187   .text:0000000000002ecc $d
             forth.s:1187   .text:0000000000002ed0 _CPP
             forth.s:1187   .text:0000000000002ed4 CPP
             forth.s:1197   .text:0000000000002ee0 $d
             forth.s:1197   .text:0000000000002ee4 _FCP
ARM GAS  forth.s 			page 204


             forth.s:1197   .text:0000000000002ee8 $t
             forth.s:1197   .text:0000000000002ee8 FCP
             forth.s:1207   .text:0000000000002ef4 $d
             forth.s:1207   .text:0000000000002ef8 _LAST
             forth.s:1207   .text:0000000000002f00 LAST
             forth.s:1221   .text:0000000000002f0c $d
             forth.s:1221   .text:0000000000002f10 _USER_BEGIN
             forth.s:1221   .text:0000000000002f1c USER_BEGIN
             forth.s:1225   .text:0000000000002f28 USR_BGN_ADR
             forth.s:1226   .text:0000000000002f28 $d
             forth.s:1232   .text:0000000000002f30 _USER_END
             forth.s:1232   .text:0000000000002f3c USER_END
             forth.s:1236   .text:0000000000002f48 USER_END_ADR
             forth.s:1237   .text:0000000000002f48 $d
             forth.s:1249   .text:0000000000002f50 _WITHI
             forth.s:1249   .text:0000000000002f58 WITHI
             forth.s:1251   .text:0000000000002f5c $d
             forth.s:1266   .text:0000000000002f7c _UMMOD
             forth.s:1266   .text:0000000000002f84 UMMOD
             forth.s:1270   .text:0000000000002f8e UMMOD0
             forth.s:1277   .text:0000000000002f9e UMMOD1
             forth.s:1283   .text:0000000000002fa8 UMMOD2
             forth.s:1296   .text:0000000000002fb4 $d
             forth.s:1296   .text:0000000000002fb8 _MSMOD
             forth.s:1296   .text:0000000000002fbe $t
             forth.s:1296   .text:0000000000002fc0 MSMOD
             forth.s:1298   .text:0000000000002fc4 $d
             forth.s:1307   .text:0000000000002fec MMOD1
             forth.s:1314   .text:0000000000003008 MMOD2
             forth.s:1322   .text:0000000000003028 MMOD3
             forth.s:1329   .text:0000000000003030 _STOD
             forth.s:1329   .text:0000000000003034 $t
             forth.s:1329   .text:0000000000003034 STOD
             forth.s:1338   .text:0000000000003040 $d
             forth.s:1338   .text:0000000000003044 _D2STAR
             forth.s:1338   .text:0000000000003048 $t
             forth.s:1338   .text:0000000000003048 D2STAR
             forth.s:1350   .text:000000000000305a $d
             forth.s:1350   .text:000000000000305e _D2SL
             forth.s:1350   .text:0000000000003062 $t
             forth.s:1350   .text:0000000000003064 D2SL
             forth.s:1365   .text:0000000000003072 $d
             forth.s:1365   .text:0000000000003076 _DSLMOD
             forth.s:1365   .text:000000000000307c $t
             forth.s:1365   .text:000000000000307c DSLMOD
             forth.s:1401   .text:00000000000030c8 $d
             forth.s:1401   .text:00000000000030cc _DSLASH
             forth.s:1401   .text:00000000000030d0 DSLASH
             forth.s:1403   .text:00000000000030d4 $d
             forth.s:1423   .text:0000000000003118 _DSTAR
             forth.s:1423   .text:000000000000311c DSTAR
             forth.s:1472   .text:0000000000003152 $d
             forth.s:1472   .text:0000000000003156 _SLMOD
             forth.s:1474   .text:0000000000003160 $d
             forth.s:1485   .text:0000000000003178 _MODD
             forth.s:1485   .text:000000000000317c $t
             forth.s:1487   .text:0000000000003180 $d
ARM GAS  forth.s 			page 205


             forth.s:1496   .text:0000000000003190 _SLASH
             forth.s:1496   .text:0000000000003192 $t
             forth.s:1496   .text:0000000000003194 SLASH
             forth.s:1498   .text:0000000000003198 $d
             forth.s:1509   .text:00000000000031ac _SSMOD
             forth.s:1509   .text:00000000000031b2 $t
             forth.s:1509   .text:00000000000031b4 SSMOD
             forth.s:1511   .text:00000000000031b8 $d
             forth.s:1523   .text:00000000000031d0 _STASL
             forth.s:1523   .text:00000000000031d4 STASL
             forth.s:1525   .text:00000000000031d8 $d
             forth.s:1539   .text:00000000000031ec _ALGND
             forth.s:1539   .text:00000000000031f4 $t
             forth.s:1539   .text:00000000000031f4 ALGND
             forth.s:1550   .text:0000000000003204 $d
             forth.s:1550   .text:0000000000003208 _TCHAR
             forth.s:1550   .text:000000000000320e $t
             forth.s:1550   .text:0000000000003210 TCHAR
             forth.s:1552   .text:0000000000003214 $d
             forth.s:1562   .text:000000000000324c TCHA1
             forth.s:1570   .text:0000000000003254 _DEPTH
             forth.s:1570   .text:000000000000325a $t
             forth.s:1570   .text:000000000000325c DEPTH
             forth.s:1582   .text:0000000000003274 $d
             forth.s:1582   .text:0000000000003278 _PICK
             forth.s:1584   .text:0000000000003284 $d
             forth.s:1600   .text:00000000000032a0 _HERE
             forth.s:1600   .text:00000000000032a8 HERE
             forth.s:1602   .text:00000000000032ac $d
             forth.s:1611   .text:00000000000032bc _PAD
             forth.s:1611   .text:00000000000032c0 $t
             forth.s:1613   .text:00000000000032c4 $d
             forth.s:1624   .text:00000000000032dc _TIB
             forth.s:1624   .text:00000000000032e0 $t
             forth.s:1624   .text:00000000000032e0 TIB
             forth.s:1634   .text:00000000000032ea $d
             forth.s:1634   .text:00000000000032ee _ATEXE
             forth.s:1647   .text:000000000000330c $d
             forth.s:1647   .text:0000000000003310 _CMOVE
             forth.s:1647   .text:0000000000003316 $t
             forth.s:1647   .text:0000000000003318 CMOVE
             forth.s:1654   .text:000000000000332a CMOV1
             forth.s:1651   .text:0000000000003322 CMOV0
             forth.s:1659   .text:0000000000003334 CMOV2
             forth.s:1667   .text:000000000000333c $d
             forth.s:1667   .text:0000000000003340 _MOVE
             forth.s:1685   .text:0000000000003372 MOVE1
             forth.s:1682   .text:000000000000336e MOVE3
             forth.s:1679   .text:000000000000336a MOVE0
             forth.s:1690   .text:000000000000337c MOVE2
             forth.s:1699   .text:0000000000003384 $d
             forth.s:1699   .text:0000000000003388 _FILL
             forth.s:1707   .text:000000000000339e FILL2
             forth.s:1703   .text:0000000000003396 FILL1
             forth.s:1717   .text:00000000000033a6 $d
             forth.s:1717   .text:00000000000033aa _PACKS
             forth.s:1717   .text:00000000000033b0 $t
ARM GAS  forth.s 			page 206


             forth.s:1717   .text:00000000000033b0 PACKS
             forth.s:1719   .text:00000000000033b4 $d
             forth.s:1748   .text:000000000000340c _DIGIT
             forth.s:1748   .text:0000000000003412 $t
             forth.s:1748   .text:0000000000003414 DIGIT
             forth.s:1750   .text:0000000000003418 $d
             forth.s:1765   .text:000000000000344c _EXTRC
             forth.s:1765   .text:0000000000003454 $t
             forth.s:1765   .text:0000000000003454 EXTRC
             forth.s:1767   .text:0000000000003458 $d
             forth.s:1777   .text:000000000000346c _BDIGS
             forth.s:1777   .text:0000000000003470 BDIGS
             forth.s:1779   .text:0000000000003474 $d
             forth.s:1789   .text:0000000000003488 _HOLD
             forth.s:1789   .text:0000000000003490 HOLD
             forth.s:1791   .text:0000000000003494 $d
             forth.s:1807   .text:00000000000034b8 _DIG
             forth.s:1807   .text:00000000000034ba $t
             forth.s:1807   .text:00000000000034bc DIG
             forth.s:1809   .text:00000000000034c0 $d
             forth.s:1821   .text:00000000000034d8 _DIGS
             forth.s:1821   .text:00000000000034dc DIGS
             forth.s:1823   .text:00000000000034e0 DIGS1
             forth.s:1824   .text:00000000000034e0 $d
             forth.s:1829   .text:00000000000034fc DIGS2
             forth.s:1839   .text:0000000000003508 _SIGN
             forth.s:1839   .text:0000000000003510 SIGN
             forth.s:1841   .text:0000000000003514 $d
             forth.s:1845   .text:000000000000352c SIGN1
             forth.s:1853   .text:0000000000003534 _EDIGS
             forth.s:1853   .text:0000000000003538 EDIGS
             forth.s:1855   .text:000000000000353c $d
             forth.s:1870   .text:0000000000003558 STRR
             forth.s:1871   .text:0000000000003558 $t
             forth.s:1872   .text:000000000000355c $d
             forth.s:1889   .text:0000000000003588 _HEX
             forth.s:1889   .text:000000000000358c $t
             forth.s:1889   .text:000000000000358c HEX
             forth.s:1891   .text:0000000000003590 $d
             forth.s:1902   .text:00000000000035a8 _BIN
             forth.s:1902   .text:00000000000035ac $t
             forth.s:1902   .text:00000000000035ac BIN
             forth.s:1904   .text:00000000000035b0 $d
             forth.s:1914   .text:00000000000035c8 _DECIM
             forth.s:1914   .text:00000000000035d0 $t
             forth.s:1914   .text:00000000000035d0 DECIM
             forth.s:1916   .text:00000000000035d4 $d
             forth.s:1931   .text:00000000000035ec _DIGTQ
             forth.s:1933   .text:00000000000035f8 $d
             forth.s:1946   .text:0000000000003640 DGTQ1
             forth.s:1959   .text:0000000000003650 $t
             forth.s:1960   .text:0000000000003654 $d
             forth.s:1988   .text:00000000000036b0 $t
             forth.s:2009   .text:00000000000036ca $d
             forth.s:2009   .text:00000000000036ce _INTQ
             forth.s:2011   .text:00000000000036d8 $d
             forth.s:2080   .text:00000000000037ec _SPACE
ARM GAS  forth.s 			page 207


             forth.s:2080   .text:00000000000037f2 $t
             forth.s:2082   .text:00000000000037f8 $d
             forth.s:2091   .text:0000000000003808 _SPACS
             forth.s:2091   .text:0000000000003810 SPACS
             forth.s:2093   .text:0000000000003814 $d
             forth.s:2099   .text:0000000000003830 CHAR2
             forth.s:2097   .text:000000000000382c CHAR1
             forth.s:2108   .text:0000000000003840 _TYPEE
             forth.s:2110   .text:000000000000384c $d
             forth.s:2116   .text:0000000000003864 TYPE2
             forth.s:2112   .text:0000000000003858 TYPE1
             forth.s:2126   .text:0000000000003878 _CR
             forth.s:2128   .text:0000000000003880 $d
             forth.s:2140   .text:000000000000389c DOSTR
             forth.s:2141   .text:000000000000389c $t
             forth.s:2143   .text:00000000000038a0 $d
             forth.s:2161   .text:00000000000038c8 STRQP
             forth.s:2162   .text:00000000000038c8 $t
             forth.s:2163   .text:00000000000038cc $d
             forth.s:2172   .text:00000000000038d4 DOTST
             forth.s:2173   .text:00000000000038d4 $t
             forth.s:2174   .text:00000000000038d8 $d
             forth.s:2185   .text:00000000000038e4 $t
             forth.s:2186   .text:00000000000038e8 $d
             forth.s:2196   .text:00000000000038f8 _DOTR
             forth.s:2196   .text:00000000000038fc DOTR
             forth.s:2198   .text:0000000000003900 $d
             forth.s:2213   .text:0000000000003924 _UDOTR
             forth.s:2213   .text:0000000000003928 $t
             forth.s:2213   .text:0000000000003928 UDOTR
             forth.s:2215   .text:000000000000392c $d
             forth.s:2234   .text:0000000000003964 _UDOT
             forth.s:2236   .text:000000000000396c $d
             forth.s:2250   .text:000000000000398c _DOT
             forth.s:2250   .text:000000000000398e $t
             forth.s:2250   .text:0000000000003990 DOT
             forth.s:2252   .text:0000000000003994 $d
             forth.s:2259   .text:00000000000039b8 DOT1
             forth.s:2269   .text:00000000000039cc _DDOT
             forth.s:2269   .text:00000000000039d0 DDOT
             forth.s:2271   .text:00000000000039d4 $d
             forth.s:2289   .text:0000000000003a04 _HDOT
             forth.s:2291   .text:0000000000003a0c $d
             forth.s:2306   .text:0000000000003a30 _QUEST
             forth.s:2306   .text:0000000000003a32 $t
             forth.s:2306   .text:0000000000003a34 QUEST
             forth.s:2308   .text:0000000000003a38 $d
             forth.s:2322   .text:0000000000003a44 PARS
             forth.s:2323   .text:0000000000003a44 $t
             forth.s:2324   .text:0000000000003a48 $d
             forth.s:2390   .text:0000000000003b58 PARS8
             forth.s:2354   .text:0000000000003acc PARS3
             forth.s:2337   .text:0000000000003a84 PARS1
             forth.s:2352   .text:0000000000003ac8 PARS2
             forth.s:2358   .text:0000000000003ad8 PARS4
             forth.s:2370   .text:0000000000003b08 PARS5
             forth.s:2377   .text:0000000000003b2c PARS6
ARM GAS  forth.s 			page 208


             forth.s:2383   .text:0000000000003b40 PARS7
             forth.s:2401   .text:0000000000003b6c _PARSE
             forth.s:2401   .text:0000000000003b72 $t
             forth.s:2401   .text:0000000000003b74 PARSE
             forth.s:2403   .text:0000000000003b78 $d
             forth.s:2424   .text:0000000000003bb8 _DOTPR
             forth.s:2424   .text:0000000000003bbc DOTPR
             forth.s:2426   .text:0000000000003bc0 $d
             forth.s:2437   .text:0000000000003bd8 _PAREN
             forth.s:2437   .text:0000000000003bda $t
             forth.s:2437   .text:0000000000003bdc PAREN
             forth.s:2439   .text:0000000000003be0 $d
             forth.s:2450   .text:0000000000003bf8 _BKSLA
             forth.s:2450   .text:0000000000003bfa $t
             forth.s:2450   .text:0000000000003bfc BKSLA
             forth.s:2452   .text:0000000000003c00 $d
             forth.s:2463   .text:0000000000003c18 _CHAR
             forth.s:2463   .text:0000000000003c20 CHAR
             forth.s:2465   .text:0000000000003c24 $d
             forth.s:2475   .text:0000000000003c3c _IMCHAR
             forth.s:2475   .text:0000000000003c44 IMCHAR
             forth.s:2477   .text:0000000000003c48 $d
             forth.s:3073   .text:000000000000436c LITER
             forth.s:2486   .text:0000000000003c58 _WORDD
             forth.s:2486   .text:0000000000003c60 WORDD
             forth.s:2488   .text:0000000000003c64 $d
             forth.s:2500   .text:0000000000003c7c _TOKEN
             forth.s:2500   .text:0000000000003c82 $t
             forth.s:2500   .text:0000000000003c84 TOKEN
             forth.s:2502   .text:0000000000003c88 $d
             forth.s:2667   .text:0000000000003e78 UPPER
             forth.s:2516   .text:0000000000003c9c _NAMET
             forth.s:2516   .text:0000000000003ca2 $t
             forth.s:2516   .text:0000000000003ca4 NAMET
             forth.s:2518   .text:0000000000003ca8 $d
             forth.s:2537   .text:0000000000003cc8 _SAMEQ
             forth.s:2537   .text:0000000000003cce $t
             forth.s:2537   .text:0000000000003cd0 SAMEQ
             forth.s:2539   .text:0000000000003cd4 $d
             forth.s:2556   .text:0000000000003d1c SAME2
             forth.s:2541   .text:0000000000003ce0 SAME1
             forth.s:2571   .text:0000000000003d30 FIND
             forth.s:2572   .text:0000000000003d30 $t
             forth.s:2573   .text:0000000000003d34 $d
             forth.s:2580   .text:0000000000003d50 FIND1
             forth.s:2600   .text:0000000000003da8 FIND6
             forth.s:2593   .text:0000000000003d90 FIND2
             forth.s:2598   .text:0000000000003da0 FIND3
             forth.s:2607   .text:0000000000003dc0 FIND4
             forth.s:2613   .text:0000000000003ddc FIND5
             forth.s:2629   .text:0000000000003e04 _NAMEQ
             forth.s:2629   .text:0000000000003e0a $t
             forth.s:2629   .text:0000000000003e0c NAMEQ
             forth.s:2631   .text:0000000000003e10 $d
             forth.s:2646   .text:0000000000003e24 _ASCIZ
             forth.s:2646   .text:0000000000003e2a $t
             forth.s:2646   .text:0000000000003e2c ASCIZ
ARM GAS  forth.s 			page 209


             forth.s:2648   .text:0000000000003e30 $d
             forth.s:2667   .text:0000000000003e70 _UPPER
             forth.s:2667   .text:0000000000003e76 $t
             forth.s:2669   .text:0000000000003e7c $d
             forth.s:2700   .text:0000000000003f00 BKSP
             forth.s:2701   .text:0000000000003f00 $t
             forth.s:2702   .text:0000000000003f04 $d
             forth.s:2716   .text:0000000000003f48 BACK1
             forth.s:2725   .text:0000000000003f4c TAP
             forth.s:2726   .text:0000000000003f4c $t
             forth.s:2727   .text:0000000000003f50 $d
             forth.s:2740   .text:0000000000003f68 KTAP
             forth.s:2741   .text:0000000000003f68 TTAP
             forth.s:2742   .text:0000000000003f68 $t
             forth.s:2743   .text:0000000000003f6c $d
             forth.s:2757   .text:0000000000003fac KTAP2
             forth.s:2754   .text:0000000000003fa4 KTAP1
             forth.s:2769   .text:0000000000003fc4 _ACCEP
             forth.s:2771   .text:0000000000003fd0 $d
             forth.s:2774   .text:0000000000003fdc ACCP1
             forth.s:2790   .text:0000000000004024 ACCP4
             forth.s:2786   .text:0000000000004018 ACCP2
             forth.s:2788   .text:000000000000401c ACCP3
             forth.s:2801   .text:0000000000004038 _QUERY
             forth.s:2801   .text:000000000000403e $t
             forth.s:2801   .text:0000000000004040 QUERY
             forth.s:2803   .text:0000000000004044 $d
             forth.s:2823   .text:0000000000004078 _ABORT
             forth.s:2823   .text:000000000000407e $t
             forth.s:2825   .text:0000000000004084 ABORT1
             forth.s:2826   .text:0000000000004084 $d
             forth.s:2957   .text:0000000000004228 QUIT
             forth.s:2841   .text:00000000000040ac ABORQ
             forth.s:2842   .text:00000000000040ac $t
             forth.s:2843   .text:00000000000040b0 $d
             forth.s:2861   .text:00000000000040d4 _INTER
             forth.s:2863   .text:00000000000040e4 $d
             forth.s:2872   .text:0000000000004120 INTE1
             forth.s:2869   .text:0000000000004116 $t
             forth.s:2870   .text:0000000000004118 $d
             forth.s:2876   .text:0000000000004130 INTE2
             forth.s:2883   .text:0000000000004138 _LBRAC
             forth.s:2883   .text:000000000000413a $t
             forth.s:2883   .text:000000000000413c LBRAC
             forth.s:2885   .text:0000000000004140 $d
             forth.s:2895   .text:0000000000004158 _DOTOK
             forth.s:2895   .text:000000000000415c $t
             forth.s:2895   .text:000000000000415c DOTOK
             forth.s:2897   .text:0000000000004160 $d
             forth.s:2903   .text:0000000000004184 DOTO1
             forth.s:2904   .text:0000000000004184 $d
             forth.s:2912   .text:0000000000004190 _QSTAC
             forth.s:2912   .text:0000000000004198 QSTAC
             forth.s:2914   .text:000000000000419c $d
             forth.s:2916   .text:00000000000041b2 $t
             forth.s:2917   .text:00000000000041b4 $d
             forth.s:2924   .text:00000000000041bc _EVAL
ARM GAS  forth.s 			page 210


             forth.s:2926   .text:00000000000041c8 EVAL1
             forth.s:2927   .text:00000000000041c8 $d
             forth.s:2935   .text:00000000000041f0 EVAL2
             forth.s:2945   .text:0000000000004200 _PRESE
             forth.s:2947   .text:000000000000420c $d
             forth.s:2957   .text:0000000000004220 _QUIT
             forth.s:2958   .text:0000000000004228 $d
             forth.s:2960   .text:0000000000004234 QUIT1
             forth.s:2962   .text:0000000000004238 QUIT2
             forth.s:2972   .text:000000000000424c _FORGET
             forth.s:2972   .text:0000000000004254 FORGET
             forth.s:2974   .text:0000000000004258 $d
             forth.s:3471   .text:00000000000047f0 OVERT
             forth.s:3002   .text:00000000000042a0 $d
             forth.s:3002   .text:00000000000042a4 _TICK
             forth.s:3002   .text:00000000000042a6 $t
             forth.s:3002   .text:00000000000042a8 TICK
             forth.s:3004   .text:00000000000042ac $d
             forth.s:3008   .text:00000000000042c0 TICK1
             forth.s:3016   .text:00000000000042c8 _ALLOT
             forth.s:3016   .text:00000000000042ce $t
             forth.s:3016   .text:00000000000042d0 ALLOT
             forth.s:3018   .text:00000000000042d4 $d
             forth.s:3027   .text:00000000000042e4 _COMMA
             forth.s:3027   .text:00000000000042e6 $t
             forth.s:3027   .text:00000000000042e8 COMMA
             forth.s:3029   .text:00000000000042ec $d
             forth.s:3043   .text:0000000000004308 $d
             forth.s:3043   .text:000000000000430c _BCOMP
             forth.s:3043   .text:0000000000004316 $t
             forth.s:3043   .text:0000000000004318 BCOMP
             forth.s:3045   .text:000000000000431c $d
             forth.s:3055   .text:000000000000432c _COMPI
             forth.s:3055   .text:0000000000004334 $t
             forth.s:3055   .text:0000000000004334 COMPI
             forth.s:3057   .text:0000000000004338 $d
             forth.s:3073   .text:0000000000004364 _LITER
             forth.s:3073   .text:000000000000436c $t
             forth.s:3075   .text:0000000000004370 $d
             forth.s:3510   .text:000000000000484c CALLC
             forth.s:3085   .text:0000000000004384 STRCQ
             forth.s:3086   .text:0000000000004384 $t
             forth.s:3087   .text:0000000000004388 $d
             forth.s:3109   .text:00000000000043c0 _FOR
             forth.s:3109   .text:00000000000043c4 $t
             forth.s:3109   .text:00000000000043c4 FOR
             forth.s:3111   .text:00000000000043c8 $d
             forth.s:3120   .text:00000000000043e0 _DO
             forth.s:3120   .text:00000000000043e4 DO
             forth.s:3122   .text:00000000000043e8 $d
             forth.s:3128   .text:0000000000004414 DOPLOOP
             forth.s:3129   .text:0000000000004414 $t
             forth.s:3145   .text:0000000000004436 $d
             forth.s:3145   .text:000000000000443a _PLOOP
             forth.s:3145   .text:0000000000004440 $t
             forth.s:3145   .text:0000000000004440 PLOOP
             forth.s:3147   .text:0000000000004444 $d
ARM GAS  forth.s 			page 211


             forth.s:3151   .text:0000000000004458 DOLOOP
             forth.s:3152   .text:0000000000004458 $t
             forth.s:3170   .text:0000000000004480 $d
             forth.s:3170   .text:0000000000004484 _LOOP
             forth.s:3170   .text:000000000000448c LOOP
             forth.s:3172   .text:0000000000004490 $d
             forth.s:3183   .text:00000000000044a8 _BEGIN
             forth.s:3183   .text:00000000000044ae $t
             forth.s:3183   .text:00000000000044b0 BEGIN
             forth.s:3185   .text:00000000000044b4 $d
             forth.s:3194   .text:00000000000044bc $d
             forth.s:3194   .text:00000000000044c0 _FNEXT
             forth.s:3194   .text:00000000000044c8 FNEXT
             forth.s:3196   .text:00000000000044cc $d
             forth.s:3204   .text:00000000000044e4 _I
             forth.s:3204   .text:00000000000044e6 $t
             forth.s:3204   .text:00000000000044e8 I
             forth.s:3213   .text:00000000000044f4 $d
             forth.s:3213   .text:00000000000044f8 _J
             forth.s:3213   .text:00000000000044fa $t
             forth.s:3213   .text:00000000000044fc J
             forth.s:3223   .text:0000000000004508 $d
             forth.s:3223   .text:000000000000450c _UNTIL
             forth.s:3223   .text:0000000000004512 $t
             forth.s:3223   .text:0000000000004514 UNTIL
             forth.s:3225   .text:0000000000004518 $d
             forth.s:3234   .text:0000000000004530 _AGAIN
             forth.s:3234   .text:0000000000004536 $t
             forth.s:3234   .text:0000000000004538 AGAIN
             forth.s:3236   .text:000000000000453c $d
             forth.s:3245   .text:0000000000004554 _IFF
             forth.s:3245   .text:0000000000004558 IFF
             forth.s:3247   .text:000000000000455c $d
             forth.s:3259   .text:0000000000004584 _AHEAD
             forth.s:3259   .text:000000000000458a $t
             forth.s:3259   .text:000000000000458c AHEAD
             forth.s:3261   .text:0000000000004590 $d
             forth.s:3273   .text:00000000000045b8 _REPEA
             forth.s:3273   .text:00000000000045c0 REPEA
             forth.s:3275   .text:00000000000045c4 $d
             forth.s:3286   .text:00000000000045dc _THENN
             forth.s:3286   .text:00000000000045e4 THENN
             forth.s:3288   .text:00000000000045e8 $d
             forth.s:3299   .text:00000000000045fc _AFT
             forth.s:3299   .text:0000000000004600 $t
             forth.s:3299   .text:0000000000004600 AFT
             forth.s:3301   .text:0000000000004604 $d
             forth.s:3313   .text:000000000000461c _ELSEE
             forth.s:3313   .text:0000000000004624 ELSEE
             forth.s:3315   .text:0000000000004628 $d
             forth.s:3325   .text:000000000000463c _WHILE
             forth.s:3325   .text:0000000000004642 $t
             forth.s:3325   .text:0000000000004644 WHILE
             forth.s:3327   .text:0000000000004648 $d
             forth.s:3336   .text:0000000000004658 _ABRTQ
             forth.s:3336   .text:0000000000004660 ABRTQ
             forth.s:3338   .text:0000000000004664 $d
ARM GAS  forth.s 			page 212


             forth.s:3347   .text:000000000000467c _STRQ
             forth.s:3347   .text:0000000000004680 STRQ
             forth.s:3349   .text:0000000000004684 $d
             forth.s:3359   .text:000000000000469c _DOTQ
             forth.s:3359   .text:00000000000046a0 DOTQ
             forth.s:3361   .text:00000000000046a4 $d
             forth.s:3375   .text:00000000000046bc _UNIQU
             forth.s:3375   .text:00000000000046c4 $t
             forth.s:3375   .text:00000000000046c4 UNIQU
             forth.s:3377   .text:00000000000046c8 $d
             forth.s:3384   .text:00000000000046f0 UNIQ1
             forth.s:3381   .text:00000000000046e4 $d
             forth.s:3394   .text:00000000000046f8 SNAME
             forth.s:3395   .text:00000000000046f8 $t
             forth.s:3396   .text:00000000000046fc $d
             forth.s:3412   .text:0000000000004740 SNAM1
             forth.s:3424   .text:0000000000004754 _SCOMP
             forth.s:3424   .text:0000000000004760 SCOMP
             forth.s:3426   .text:0000000000004764 $d
             forth.s:3438   .text:000000000000479c SCOM2
             forth.s:3435   .text:0000000000004794 SCOM1
             forth.s:3443   .text:00000000000047b0 SCOM3
             forth.s:3452   .text:00000000000047b8 COLON_ABORT
             forth.s:3453   .text:00000000000047b8 $t
             forth.s:3454   .text:00000000000047bc $d
             forth.s:3471   .text:00000000000047e8 _OVERT
             forth.s:3471   .text:00000000000047ee $t
             forth.s:3473   .text:00000000000047f4 $d
             forth.s:3484   .text:000000000000480c _SEMIS
             forth.s:3484   .text:000000000000480e $t
             forth.s:3484   .text:0000000000004810 SEMIS
             forth.s:3486   .text:0000000000004814 $d
             forth.s:3498   .text:0000000000004830 _RBRAC
             forth.s:3498   .text:0000000000004832 $t
             forth.s:3498   .text:0000000000004834 RBRAC
             forth.s:3500   .text:0000000000004838 $d
             forth.s:3511   .text:000000000000484c $t
             forth.s:3512   .text:0000000000004850 $d
             forth.s:3524   .text:0000000000004868 _COLON
             forth.s:3524   .text:000000000000486a $t
             forth.s:3524   .text:000000000000486c COLON
             forth.s:3526   .text:0000000000004870 $d
             forth.s:3537   .text:0000000000004888 _IMMED
             forth.s:3537   .text:0000000000004892 $t
             forth.s:3537   .text:0000000000004894 IMMED
             forth.s:3539   .text:0000000000004898 $d
             forth.s:3557   .text:00000000000048c4 _CONST
             forth.s:3557   .text:00000000000048d0 CONST
             forth.s:3559   .text:00000000000048d4 $d
             forth.s:3570   .text:0000000000004904 $t
             forth.s:3577   .text:0000000000004904 DODOES
             forth.s:3579   .text:0000000000004908 $d
             forth.s:3594   .text:000000000000492c $d
             forth.s:3594   .text:0000000000004930 _DOES
             forth.s:3594   .text:0000000000004936 $t
             forth.s:3594   .text:0000000000004938 DOES
             forth.s:3596   .text:000000000000493c $d
ARM GAS  forth.s 			page 213


             forth.s:3611   .text:000000000000496c _DEFERAT
             forth.s:3611   .text:0000000000004974 DEFERAT
             forth.s:3613   .text:0000000000004978 $d
             forth.s:3623   .text:0000000000004990 _DEFERSTO
             forth.s:3623   .text:0000000000004998 DEFERSTO
             forth.s:3625   .text:000000000000499c $d
             forth.s:3636   .text:00000000000049b8 _DEFER
             forth.s:3636   .text:00000000000049be $t
             forth.s:3636   .text:00000000000049c0 DEFER
             forth.s:3638   .text:00000000000049c4 $d
             forth.s:3659   .text:0000000000004a10 CREAT
             forth.s:3649   .text:00000000000049f8 DEFER_NOP
             forth.s:3650   .text:00000000000049f8 $t
             forth.s:3651   .text:00000000000049fc $d
             forth.s:3659   .text:0000000000004a08 _CREAT
             forth.s:3661   .text:0000000000004a14 $d
             forth.s:3674   .text:0000000000004a38 _VARIA
             forth.s:3674   .text:0000000000004a44 VARIA
             forth.s:3676   .text:0000000000004a48 $d
             forth.s:3693   .text:0000000000004a68 DMP
             forth.s:3694   .text:0000000000004a68 $t
             forth.s:3695   .text:0000000000004a6c $d
             forth.s:3707   .text:0000000000004aa4 PDUM2
             forth.s:3701   .text:0000000000004a8c PDUM1
             forth.s:3719   .text:0000000000004ab0 $d
             forth.s:3719   .text:0000000000004ab4 _DUMP
             forth.s:3719   .text:0000000000004abc DUMP
             forth.s:3721   .text:0000000000004ac0 $d
             forth.s:3739   .text:0000000000004b10 DUMP4
             forth.s:3729   .text:0000000000004ae8 DUMP1
             forth.s:3741   .text:0000000000004b18 DUMP3
             forth.s:3754   .text:0000000000004b2c TDOT
             forth.s:3755   .text:0000000000004b2c $t
             forth.s:3756   .text:0000000000004b30 $d
             forth.s:3795   .text:0000000000004bc0 _DOTS
             forth.s:3795   .text:0000000000004bc4 DOTS
             forth.s:3797   .text:0000000000004bc8 $d
             forth.s:3804   .text:0000000000004be4 DOTS2
             forth.s:3800   .text:0000000000004bd8 DOTS1
             forth.s:3809   .text:0000000000004bf4 RPAT
             forth.s:3810   .text:0000000000004bf4 $t
             forth.s:3814   .text:0000000000004bfe RBASE
             forth.s:3823   .text:0000000000004c0e RDOT
             forth.s:3825   .text:0000000000004c12 $d
             forth.s:3852   .text:0000000000004c76 _TRACE
             forth.s:3852   .text:0000000000004c7c $t
             forth.s:3852   .text:0000000000004c7c TRACE
             forth.s:3854   .text:0000000000004c80 $d
             forth.s:3873   .text:0000000000004cc4 _TNAME
             forth.s:3873   .text:0000000000004cca $t
             forth.s:3873   .text:0000000000004ccc TNAME
             forth.s:3875   .text:0000000000004cd0 $d
             forth.s:3878   .text:0000000000004cdc TNAM1
             forth.s:3889   .text:0000000000004d10 TNAM2
             forth.s:3898   .text:0000000000004d20 _DOTID
             forth.s:3898   .text:0000000000004d24 $t
             forth.s:3898   .text:0000000000004d24 DOTID
ARM GAS  forth.s 			page 214


             forth.s:3900   .text:0000000000004d28 $d
             forth.s:3907   .text:0000000000004d4c DOTI1
             forth.s:3908   .text:0000000000004d5a $t
             forth.s:3909   .text:0000000000004d5c $d
             forth.s:3911   *ABS*:0000000000000000 WANT_SEE
             forth.s:3984   .text:0000000000004d64 _VLIST
             forth.s:3984   .text:0000000000004d6a $t
             forth.s:3984   .text:0000000000004d6c VLIST
             forth.s:3986   .text:0000000000004d70 $d
             forth.s:3997   .text:0000000000004d90 WORDS
             forth.s:4018   .text:0000000000004dd4 WC
             forth.s:3997   .text:0000000000004d88 _WORDS
             forth.s:3997   .text:0000000000004d8e $t
             forth.s:3999   .text:0000000000004d94 $d
             forth.s:4002   .text:0000000000004da0 WORS1
             forth.s:4011   .text:0000000000004dc8 WORS2
             forth.s:4018   .text:0000000000004dd0 _WC
             forth.s:4020   .text:0000000000004dd8 $d
             forth.s:4037   .text:0000000000004e14 _MARK
             forth.s:4037   .text:0000000000004e1c MARK
             forth.s:4039   .text:0000000000004e20 $d
             forth.s:4042   .text:0000000000004e2c $t
             forth.s:4043   .text:0000000000004e30 $d
             forth.s:4064   .text:0000000000004e5c VERSN
             forth.s:4065   .text:0000000000004e5c $t
             forth.s:4066   .text:0000000000004e60 $d
             forth.s:4074   .text:0000000000004e70 _HI
             forth.s:4074   .text:0000000000004e74 HI
             forth.s:4076   .text:0000000000004e78 $d
             forth.s:4077   .text:0000000000004e92 $t
             forth.s:4078   .text:0000000000004e94 $d
             forth.s:4102   .text:0000000000004ee0 $t
             forth.s:4103   .text:0000000000004ee4 $d
             forth.s:4115   .text:0000000000004f00 PS2_QUERY
             forth.s:4116   .text:0000000000004f00 $t
             forth.s:4117   .text:0000000000004f04 $d
             forth.s:4131   .text:0000000000004f6a $t
             forth.s:4132   .text:0000000000004f6c $d
             forth.s:4142   .text:0000000000004f78 IF_SENSE
             forth.s:4143   .text:0000000000004f78 $t
             forth.s:4144   .text:0000000000004f7c $d
             forth.s:4159   .text:0000000000004fac $t
             forth.s:4160   .text:0000000000004fb0 $d
             forth.s:4160   .text:0000000000004fba $t
             forth.s:4161   .text:0000000000004fbc $d
             forth.s:4179   .text:0000000000004fe4 COLD1
             forth.s:4180   .text:0000000000004fe4 $d
             forth.s:4194   .text:0000000000005030 COLD2
             forth.s:4197   .text:0000000000005030 $d
             forth.s:4200   .text:0000000000005034 $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:250    .text:000000000000016f $d
              init.s:375    .text:0000000000000335 $d
              init.s:375    .text:0000000000000336 $t
          ser-term.s:90     .text:0000000000000793 $d
          ser-term.s:90     .text:0000000000000794 $t
ARM GAS  forth.s 			page 215


          ser-term.s:110    .text:00000000000007cd $d
          ser-term.s:110    .text:00000000000007ce $t
          ser-term.s:133    .text:000000000000080b $d
          ser-term.s:133    .text:000000000000080c $t
          ser-term.s:166    .text:0000000000000867 $d
          ser-term.s:166    .text:0000000000000868 $t
          ser-term.s:193    .text:00000000000008dd $d
          ser-term.s:193    .text:00000000000008de $t
          ser-term.s:205    .text:000000000000090b $d
          ser-term.s:205    .text:000000000000090c $t
             tvout.s:264    .text:0000000000000b5b $d
             tvout.s:264    .text:0000000000000b5c $t
             tvout.s:278    .text:0000000000000b8f $d
             tvout.s:278    .text:0000000000000b90 $t
             tvout.s:306    .text:0000000000000be9 $d
             tvout.s:306    .text:0000000000000bea $t
             tvout.s:325    .text:0000000000000c17 $d
             tvout.s:325    .text:0000000000000c18 $t
             tvout.s:427    .text:0000000000000d51 $d
             tvout.s:427    .text:0000000000000d52 $t
             tvout.s:448    .text:0000000000000dab $d
             tvout.s:448    .text:0000000000000dac $t
             tvout.s:495    .text:0000000000000e41 $d
             tvout.s:495    .text:0000000000000e42 $t
           ps2_kbd.s:307    .text:000000000000152f $d
           ps2_kbd.s:307    .text:0000000000001530 $t
           ps2_kbd.s:396    .text:000000000000162b $d
           ps2_kbd.s:396    .text:000000000000162c $t
           ps2_kbd.s:616    .text:00000000000018cd $d
           ps2_kbd.s:616    .text:00000000000018ce $t
           ps2_kbd.s:633    .text:0000000000001907 $d
           ps2_kbd.s:633    .text:0000000000001908 $t
         spi-flash.s:85     .text:00000000000019f3 $d
         spi-flash.s:85     .text:00000000000019f4 $t
         spi-flash.s:151    .text:0000000000001abf $d
         spi-flash.s:151    .text:0000000000001ac0 $t
         spi-flash.s:238    .text:0000000000001c03 $d
         spi-flash.s:238    .text:0000000000001c04 $t
         spi-flash.s:256    .text:0000000000001c3f $d
         spi-flash.s:256    .text:0000000000001c40 $t
         spi-flash.s:278    .text:0000000000001c93 $d
         spi-flash.s:278    .text:0000000000001c94 $t
         spi-flash.s:325    .text:0000000000001d13 $d
         spi-flash.s:325    .text:0000000000001d14 $t
         spi-flash.s:343    .text:0000000000001d35 $d
         spi-flash.s:343    .text:0000000000001d36 $t
         spi-flash.s:352    .text:0000000000001d49 $d
         spi-flash.s:352    .text:0000000000001d4a $t
               fpu.s:161    .text:0000000000001e81 $d
               fpu.s:161    .text:0000000000001e82 $t
               fpu.s:174    .text:0000000000001ea1 $d
               fpu.s:174    .text:0000000000001ea2 $t
               fpu.s:188    .text:0000000000001ec1 $d
               fpu.s:188    .text:0000000000001ec2 $t
               fpu.s:201    .text:0000000000001ee1 $d
               fpu.s:201    .text:0000000000001ee2 $t
               fpu.s:224    .text:0000000000001f1f $d
ARM GAS  forth.s 			page 216


               fpu.s:224    .text:0000000000001f20 $t
               fpu.s:235    .text:0000000000001f37 $d
               fpu.s:235    .text:0000000000001f38 $t
               fpu.s:257    .text:0000000000001f6d $d
               fpu.s:257    .text:0000000000001f6e $t
               fpu.s:268    .text:0000000000001f8b $d
               fpu.s:268    .text:0000000000001f8c $t
               fpu.s:278    .text:0000000000001fa5 $d
               fpu.s:278    .text:0000000000001fa6 $t
               fpu.s:291    .text:0000000000001fd5 $d
               fpu.s:291    .text:0000000000001fd6 $t
               fpu.s:306    .text:0000000000002003 $d
               fpu.s:306    .text:0000000000002004 $t
               fpu.s:347    .text:0000000000002053 $d
               fpu.s:347    .text:0000000000002054 $t
               fpu.s:415    .text:000000000000213f $d
               fpu.s:415    .text:0000000000002140 $t
            strtof.s:282    .text:00000000000024b3 $d
            strtof.s:282    .text:00000000000024b4 $t
             forth.s:132    .text:0000000000002659 $d
             forth.s:132    .text:000000000000265a $t
             forth.s:144    .text:000000000000267d $d
             forth.s:144    .text:000000000000267e $t
             forth.s:156    .text:000000000000269f $d
             forth.s:156    .text:00000000000026a0 $t
             forth.s:178    .text:00000000000026d9 $d
             forth.s:178    .text:00000000000026da $t
             forth.s:214    .text:00000000000026f7 $d
             forth.s:214    .text:00000000000026f8 $t
             forth.s:261    .text:00000000000027a5 $d
             forth.s:261    .text:00000000000027a6 $t
             forth.s:356    .text:0000000000002835 $d
             forth.s:356    .text:0000000000002836 $t
             forth.s:381    .text:0000000000002863 $d
             forth.s:381    .text:0000000000002864 $t
             forth.s:391    .text:0000000000002877 $d
             forth.s:391    .text:0000000000002878 $t
             forth.s:399    .text:0000000000002883 $d
             forth.s:399    .text:0000000000002884 $t
             forth.s:419    .text:00000000000028b1 $d
             forth.s:419    .text:00000000000028b2 $t
             forth.s:428    .text:00000000000028c5 $d
             forth.s:428    .text:00000000000028c6 $t
             forth.s:476    .text:0000000000002929 $d
             forth.s:476    .text:000000000000292a $t
             forth.s:492    .text:000000000000294b $d
             forth.s:492    .text:000000000000294c $t
             forth.s:502    .text:000000000000295d $d
             forth.s:502    .text:000000000000295e $t
             forth.s:511    .text:000000000000296f $d
             forth.s:511    .text:0000000000002970 $t
             forth.s:528    .text:0000000000002991 $d
             forth.s:528    .text:0000000000002992 $t
             forth.s:558    .text:00000000000029d7 $d
             forth.s:558    .text:00000000000029d8 $t
             forth.s:567    .text:00000000000029ed $d
             forth.s:567    .text:00000000000029ee $t
ARM GAS  forth.s 			page 217


             forth.s:615    .text:0000000000002a47 $d
             forth.s:615    .text:0000000000002a48 $t
             forth.s:626    .text:0000000000002a5b $d
             forth.s:626    .text:0000000000002a5c $t
             forth.s:634    .text:0000000000002a69 $d
             forth.s:634    .text:0000000000002a6a $t
             forth.s:642    .text:0000000000002a79 $d
             forth.s:642    .text:0000000000002a7a $t
             forth.s:650    .text:0000000000002a89 $d
             forth.s:650    .text:0000000000002a8a $t
             forth.s:674    .text:0000000000002ab9 $d
             forth.s:674    .text:0000000000002aba $t
             forth.s:699    .text:0000000000002aed $d
             forth.s:699    .text:0000000000002aee $t
             forth.s:707    .text:0000000000002afd $d
             forth.s:707    .text:0000000000002afe $t
             forth.s:715    .text:0000000000002b0f $d
             forth.s:715    .text:0000000000002b10 $t
             forth.s:736    .text:0000000000002b37 $d
             forth.s:736    .text:0000000000002b38 $t
             forth.s:765    .text:0000000000002b73 $d
             forth.s:765    .text:0000000000002b74 $t
             forth.s:775    .text:0000000000002b87 $d
             forth.s:775    .text:0000000000002b88 $t
             forth.s:788    .text:0000000000002ba5 $d
             forth.s:788    .text:0000000000002ba6 $t
             forth.s:841    .text:0000000000002c1d $d
             forth.s:841    .text:0000000000002c1e $t
             forth.s:882    .text:0000000000002c73 $d
             forth.s:882    .text:0000000000002c74 $t
             forth.s:905    .text:0000000000002c9f $d
             forth.s:905    .text:0000000000002ca0 $t
             forth.s:918    .text:0000000000002cbf $d
             forth.s:918    .text:0000000000002cc0 $t
             forth.s:942    .text:0000000000002cef $d
             forth.s:942    .text:0000000000002cf0 $t
             forth.s:988    .text:0000000000002d47 $d
             forth.s:988    .text:0000000000002d48 $t
             forth.s:1000   .text:0000000000002d5f $d
             forth.s:1000   .text:0000000000002d60 $t
             forth.s:1012   .text:0000000000002d7b $d
             forth.s:1012   .text:0000000000002d7c $t
             forth.s:1073   .text:0000000000002dd7 $d
             forth.s:1073   .text:0000000000002dd8 $t
             forth.s:1082   .text:0000000000002deb $d
             forth.s:1082   .text:0000000000002dec $t
             forth.s:1109   .text:0000000000002e29 $d
             forth.s:1109   .text:0000000000002e2a $t
             forth.s:1128   .text:0000000000002e4d $d
             forth.s:1128   .text:0000000000002e4e $t
             forth.s:1147   .text:0000000000002e79 $d
             forth.s:1147   .text:0000000000002e7a $t
             forth.s:1187   .text:0000000000002ed3 $d
             forth.s:1187   .text:0000000000002ed4 $t
             forth.s:1207   .text:0000000000002efd $d
             forth.s:1207   .text:0000000000002efe $t
             forth.s:1221   .text:0000000000002f1b $d
ARM GAS  forth.s 			page 218


             forth.s:1221   .text:0000000000002f1c $t
             forth.s:1232   .text:0000000000002f39 $d
             forth.s:1232   .text:0000000000002f3a $t
             forth.s:1249   .text:0000000000002f57 $d
             forth.s:1249   .text:0000000000002f58 $t
             forth.s:1266   .text:0000000000002f83 $d
             forth.s:1266   .text:0000000000002f84 $t
             forth.s:1401   .text:00000000000030cf $d
             forth.s:1401   .text:00000000000030d0 $t
             forth.s:1423   .text:000000000000311b $d
             forth.s:1423   .text:000000000000311c $t
             forth.s:1472   .text:000000000000315b $d
             forth.s:1472   .text:000000000000315c $t
             forth.s:1523   .text:00000000000031d3 $d
             forth.s:1523   .text:00000000000031d4 $t
             forth.s:1582   .text:000000000000327d $d
             forth.s:1582   .text:000000000000327e $t
             forth.s:1600   .text:00000000000032a5 $d
             forth.s:1600   .text:00000000000032a6 $t
             forth.s:1634   .text:00000000000032f7 $d
             forth.s:1634   .text:00000000000032f8 $t
             forth.s:1667   .text:0000000000003345 $d
             forth.s:1667   .text:0000000000003346 $t
             forth.s:1699   .text:000000000000338d $d
             forth.s:1699   .text:000000000000338e $t
             forth.s:1777   .text:000000000000346f $d
             forth.s:1777   .text:0000000000003470 $t
             forth.s:1789   .text:000000000000348d $d
             forth.s:1789   .text:000000000000348e $t
             forth.s:1821   .text:00000000000034db $d
             forth.s:1821   .text:00000000000034dc $t
             forth.s:1839   .text:000000000000350d $d
             forth.s:1839   .text:000000000000350e $t
             forth.s:1853   .text:0000000000003537 $d
             forth.s:1853   .text:0000000000003538 $t
             forth.s:1931   .text:00000000000035f3 $d
             forth.s:1931   .text:00000000000035f4 $t
             forth.s:2009   .text:00000000000036d3 $d
             forth.s:2009   .text:00000000000036d4 $t
             forth.s:2091   .text:000000000000380f $d
             forth.s:2091   .text:0000000000003810 $t
             forth.s:2108   .text:0000000000003845 $d
             forth.s:2108   .text:0000000000003846 $t
             forth.s:2126   .text:000000000000387b $d
             forth.s:2126   .text:000000000000387c $t
             forth.s:2196   .text:00000000000038fb $d
             forth.s:2196   .text:00000000000038fc $t
             forth.s:2234   .text:0000000000003967 $d
             forth.s:2234   .text:0000000000003968 $t
             forth.s:2269   .text:00000000000039cf $d
             forth.s:2269   .text:00000000000039d0 $t
             forth.s:2289   .text:0000000000003a07 $d
             forth.s:2289   .text:0000000000003a08 $t
             forth.s:2424   .text:0000000000003bbb $d
             forth.s:2424   .text:0000000000003bbc $t
             forth.s:2463   .text:0000000000003c1d $d
             forth.s:2463   .text:0000000000003c1e $t
ARM GAS  forth.s 			page 219


             forth.s:2475   .text:0000000000003c43 $d
             forth.s:2475   .text:0000000000003c44 $t
             forth.s:2486   .text:0000000000003c5d $d
             forth.s:2486   .text:0000000000003c5e $t
             forth.s:2769   .text:0000000000003fcb $d
             forth.s:2769   .text:0000000000003fcc $t
             forth.s:2861   .text:00000000000040df $d
             forth.s:2861   .text:00000000000040e0 $t
             forth.s:2912   .text:0000000000004197 $d
             forth.s:2912   .text:0000000000004198 $t
             forth.s:2924   .text:00000000000041c1 $d
             forth.s:2924   .text:00000000000041c2 $t
             forth.s:2945   .text:0000000000004207 $d
             forth.s:2945   .text:0000000000004208 $t
             forth.s:2957   .text:0000000000004225 $d
             forth.s:2957   .text:0000000000004226 $t
             forth.s:2972   .text:0000000000004253 $d
             forth.s:2972   .text:0000000000004254 $t
             forth.s:3120   .text:00000000000043e3 $d
             forth.s:3120   .text:00000000000043e4 $t
             forth.s:3170   .text:0000000000004489 $d
             forth.s:3170   .text:000000000000448a $t
             forth.s:3194   .text:00000000000044c5 $d
             forth.s:3194   .text:00000000000044c6 $t
             forth.s:3245   .text:0000000000004557 $d
             forth.s:3245   .text:0000000000004558 $t
             forth.s:3273   .text:00000000000045bf $d
             forth.s:3273   .text:00000000000045c0 $t
             forth.s:3286   .text:00000000000045e1 $d
             forth.s:3286   .text:00000000000045e2 $t
             forth.s:3313   .text:0000000000004621 $d
             forth.s:3313   .text:0000000000004622 $t
             forth.s:3336   .text:000000000000465f $d
             forth.s:3336   .text:0000000000004660 $t
             forth.s:3347   .text:000000000000467f $d
             forth.s:3347   .text:0000000000004680 $t
             forth.s:3359   .text:000000000000469f $d
             forth.s:3359   .text:00000000000046a0 $t
             forth.s:3424   .text:000000000000475d $d
             forth.s:3424   .text:000000000000475e $t
             forth.s:3557   .text:00000000000048cd $d
             forth.s:3557   .text:00000000000048ce $t
             forth.s:3611   .text:0000000000004973 $d
             forth.s:3611   .text:0000000000004974 $t
             forth.s:3623   .text:0000000000004997 $d
             forth.s:3623   .text:0000000000004998 $t
             forth.s:3659   .text:0000000000004a0f $d
             forth.s:3659   .text:0000000000004a10 $t
             forth.s:3674   .text:0000000000004a41 $d
             forth.s:3674   .text:0000000000004a42 $t
             forth.s:3719   .text:0000000000004ab9 $d
             forth.s:3719   .text:0000000000004aba $t
             forth.s:3795   .text:0000000000004bc3 $d
             forth.s:3795   .text:0000000000004bc4 $t
             forth.s:4018   .text:0000000000004dd3 $d
             forth.s:4018   .text:0000000000004dd4 $t
             forth.s:4037   .text:0000000000004e19 $d
ARM GAS  forth.s 			page 220


             forth.s:4037   .text:0000000000004e1a $t
             forth.s:4074   .text:0000000000004e73 $d
             forth.s:4074   .text:0000000000004e74 $t
             forth.s:4173   .text:0000000000004fcd $d
             forth.s:4173   .text:0000000000004fce $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
