ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      CBF95DF8 
 157      04EB
 158 000a DFF8CCC6 	  ldr IP,=dh
 159 000e 02F0E1BA 	  b INEXT  
 160              	dh:
 161 0012 C1410000 	  _ADR PRESE
 162 0016 9D380000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 25260000 	  _ADR CFSR 
 164 0038 05290000 	  _ADR DUPP
 165 003c 91280000 	  _ADR TOR 
 166 0040 9B270000 	  _DOLIT 16 
 166      10000000 
 167 0048 F52D0000 	  _ADR BASE 
 168 004c 0D280000 	  _ADR STORE 
 169 0050 21390000 	  _ADR UDOT 
 170 0054 9D380000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 4D280000 	  _ADR RFROM
 172 0068 9B270000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 49290000 	  _ADR ANDD
 174 0074 DB270000 	  _QBRAN 1f
 174      94000000 
 175 007c 49260000 	  _ADR BFAR
 176 0080 9B270000 	  _DOLIT ','
 176      2C000000 
 177 0088 A5260000 	  _ADR EMIT 
 178 008c AD370000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 21390000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 9D380000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 8D1D0000 	  _ADR FPSCR
 184 00a8 21390000 	  _ADR UDOT 
 185              	1:
 186 00ac 39030000 	  _ADR reset_mcu 
 187              	
 188              	  
 189              	
 190              	/*********************************
 191              	   fpu exception 
 192              	*********************************/
 193              	  .type fpu_exception, %function 
 194              	  .global fpu_exception 
 195              	  .p2align 2 
 196              	fpu_exception:
 197 00b0 4FF00000 	  _MOV32 r0,RAM_END 
 197      C2F20200 
 198 00b8 8546     	  mov sp,r0 
 199 00ba DFF820C6 	  ldr IP,=fpu_except 
 200 00be 02F089BA 	  b INEXT 
 201              	fpu_except:  
 202              	//  _CALL forth_init 
 203 00c2 C1410000 	  _ADR PRESE
 204 00c6 35380000 	  _ADR CR  
 205 00ca 9B270000 	  _DOLIT 16 
 205      10000000 
 206 00d2 F52D0000 	  _ADR BASE 
 207 00d6 0D280000 	  _ADR STORE 
 208 00da 9D380000 	  _DOTQP 21 , "fpu exception FPSCR: "
 208      15667075 
 208      20657863 
 208      65707469 
 208      6F6E2046 
 209 00f4 8D1D0000 	  _ADR FPSCR 
 210 00f8 21390000 	  _ADR UDOT 
 211 00fc 35380000 	  _ADR CR 
 212 0100 39030000 	  _ADR reset_mcu  
 213              	
 214              	
 215              	
 216              	
 217              	/*********************************
 218              	  non maskable interrupt handler
 219              	  irq -14 
 220              	*********************************/
 221              	  .type nmi_handler, %function
 222              	  .p2align 2
 223              	  .global nmi_handler 
 224              	nmi_handler:
 225 0104 DFF8D8C5 	  ldr IP,=nmi_hl 
 226 0108 02F064BA 	  b  INEXT
ARM GAS  forth.s 			page 16


 227              	nmi_hl:
 228 010c C1410000 	  _ADR PRESE 
 229 0110 35380000 	  _ADR CR 
 230 0114 9D380000 	  _DOTQP  25 , "not managed nmi exception"
 230      196E6F74 
 230      206D616E 
 230      61676564 
 230      206E6D69 
 231 0134 35380000 	  _ADR CR 
 232 0138 39400000 	  _ADR ABORT 
 233              	   
 234              	
 235              	/***********************************
 236              	   hard fault handler
 237              	   irq -13
 238              	***********************************/
 239              	  .type hardfault_handler, %function
 240              	  .p2align 2
 241              	  .global hardfault_handler 
 242              	hardfault_handler:
 243 013c 4FF00000 	  _MOV32 r0,RAM_END 
 243      C2F20200 
 244 0144 8546     	  mov sp,r0 
 245 0146 DFF89CC5 	  ldr IP,=hardfault_hl 
 246 014a 02F043BA 	  b INEXT
 247              	hardfault_hl:
 248 014e C1410000 	  _ADR PRESE
 249 0152 35380000 	  _ADR CR  
 250 0156 9D380000 	  _DOTQP  20 , "hard fault exception"
 250      14686172 
 250      64206661 
 250      756C7420 
 250      65786365 
 251 0170 35380000 	  _ADR CR 
 252 0174 39030000 	  _ADR reset_mcu
 253              	
 254              	/***********************************
 255              	   memory manager fault 
 256              	   irq -12 
 257              	************************************/
 258              	  .type memfault_handler, %function
 259              	  .p2align 2
 260              	  .global memfault_handler 
 261              	memfault_handler:
 262 0178 4FF00000 	  _MOV32 r0,RAM_END 
 262      C2F20200 
 263 0180 8546     	  mov sp,r0 
 264 0182 DFF864C5 	  ldr IP,=memfault_hl 
 265 0186 02F025BA 	  b INEXT 
 266              	memfault_hl: 
 267 018a C1410000 	  _ADR PRESE
 268 018e 35380000 	  _ADR CR  
 269 0192 9D380000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 269      216D656D 
 269      6F727920 
 269      6D616E61 
 269      67657220 
ARM GAS  forth.s 			page 17


 270 01b8 9B270000 	  _DOLIT 16 
 270      10000000 
 271 01c0 F52D0000 	  _ADR BASE 
 272 01c4 0D280000 	  _ADR STORE   
 273 01c8 25260000 	  _ADR CFSR
 274 01cc 9B270000 	  _DOLIT 255 
 274      FF000000 
 275 01d4 49290000 	  _ADR ANDD 
 276 01d8 21390000 	  _ADR UDOT 
 277 01dc 35380000 	  _ADR CR 
 278 01e0 39030000 	  _ADR reset_mcu 
 279              	
 280              	
 281              	/************************************
 282              	   bus fault 
 283              	   irq -11 
 284              	***********************************/
 285              	  .type busfault_handler, %function
 286              	  .p2align 2
 287              	  .global busfault_handler 
 288              	busfault_handler:
 289 01e4 4FF00000 	  _MOV32 r0,RAM_END 
 289      C2F20200 
 290 01ec 8546     	  mov sp,r0 
 291 01ee DFF8FCC4 	  ldr IP,=busfault_hl 
 292 01f2 02F0EFB9 	  b INEXT 
 293              	busfault_hl:
 294 01f6 C1410000 	  _ADR PRESE
 295 01fa 9B270000 	  _DOLIT 1 
 295      01000000 
 296 0202 71270000 	  _ADR ULED 
 297 0206 9B270000 	  _DOLIT  100 
 297      64000000 
 298 020e B52D0000 	  _ADR MSEC 
 299 0212 49260000 	  _ADR BFAR 
 300 0216 25260000 	  _ADR CFSR 
 301 021a 35380000 	  _ADR CR  
 302 021e 9D380000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 302      1B627573 
 302      20666175 
 302      6C742065 
 302      78636570 
 303 0240 9B270000 	  _DOLIT 16 
 303      10000000 
 304 0248 F52D0000 	  _ADR BASE 
 305 024c 0D280000 	  _ADR STORE   
 306 0250 9B270000 	  _DOLIT 0XFF00 
 306      00FF0000 
 307 0258 49290000 	  _ADR ANDD   
 308 025c 21390000 	  _ADR UDOT 
 309 0260 9D380000 	  _DOTQP 7 , " BFAR: "
 309      07204246 
 309      41523A20 
 310 026c 21390000 	  _ADR UDOT 
 311 0270 35380000 	  _ADR CR 
 312 0274 39030000 	  _ADR reset_mcu  
 313              	
ARM GAS  forth.s 			page 18


 314              	/************************************
 315              	    usage fault
 316              	    irq -10 
 317              	************************************/
 318              	  .type usagefault_handler, %function
 319              	  .p2align 2
 320              	  .global usagefault_handler 
 321              	usagefault_handler:
 322 0278 4FF00000 	  _MOV32 r0,RAM_END 
 322      C2F20200 
 323 0280 8546     	  mov sp,r0 
 324 0282 DFF86CC4 	  ldr IP,=usagefault_hl
 325 0286 02F0A5B9 	  b INEXT 
 326              	usagefault_hl:
 327 028a C1410000 	  _ADR PRESE
 328 028e 35380000 	  _ADR CR  
 329 0292 9D380000 	  _DOTQP  23 , "usage exception, UFSR: "
 329      17757361 
 329      67652065 
 329      78636570 
 329      74696F6E 
 330 02b0 9B270000 	  _DOLIT 16 
 330      10000000 
 331 02b8 F52D0000 	  _ADR BASE 
 332 02bc 0D280000 	  _ADR STORE   
 333 02c0 25260000 	  _ADR CFSR
 334 02c4 9B270000 	  _DOLIT 16 
 334      10000000 
 335 02cc A1290000 	  _ADR RSHIFT 
 336 02d0 21390000 	  _ADR UDOT 
 337 02d4 35380000 	  _ADR CR 
 338 02d8 39030000 	  _ADR reset_mcu  
 339              	
 340              	
 341              	/*********************************
 342              		system milliseconds counter
 343              	*********************************/	
 344              	  .type systick_handler, %function
 345              	  .p2align 2 
 346              	  .global systick_handler
 347              	systick_handler:
 348 02dc 4FF00003 	  _MOV32 r3,UPP
 348      C2F20003 
 349 02e4 9868     	  ldr r0,[r3,#TICKS]  
 350 02e6 00F10100 	  add r0,#1
 351 02ea 9860     	  str r0,[r3,#TICKS]
 352 02ec D868     	  ldr r0,[r3,#CD_TIMER]
 353 02ee 10B1     	  cbz r0, systick_exit
 354 02f0 A0F10100 	  sub r0,#1
 355 02f4 D860     	  str r0,[r3,#CD_TIMER]
 356              	systick_exit:
 357 02f6 7047     	  bx lr
 358              	
 359              	user_reboot:
 360 02f8 00B500F0 	   _CALL forth_init 
 360      4FF85DF8 
 360      04EB
ARM GAS  forth.s 			page 19


 361 0302 DFF8F0C3 	  ldr IP,=ur
 362 0306 02F065B9 	  b INEXT  
 363              	ur:
 364 030a C1410000 	  _ADR PRESE
 365 030e 35380000 	  _ADR CR   
 366 0312 9B270000 		_DOLIT user_reboot_msg
 366      28030000 
 367 031a 592D0000 		_ADR COUNT 
 368 031e 01380000 	  _ADR TYPEE 
 369 0322 39030000 	  _ADR reset_mcu 
 370              	
 371 0326 00BF     		.p2align 2 
 372              	user_reboot_msg:
 373 0328 0C       		.byte 12
 374 0329 75736572 		.ascii "user reboot!"
 374      20726562 
 374      6F6F7421 
 375 0335 0000BF   		.p2align 2 
 376              	
 377              	reset_mcu:
 378 0338 4FF48050 	  _MOV32 r0,UART 
 378      C4F20100 
 379 0340 0168     	1: ldr r1,[r0,#USART_SR]
 380 0342 11F0400F 	  tst r1,#(1<<6)
 381 0346 FBD0     	  beq 1b
 382 0348 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 382      CEF20000 
 383 0350 C168     		ldr r1,[r0,#SCB_AIRCR]
 384 0352 41F00401 		orr r1,#(1<<2)
 385 0356 C0F2FA51 		movt r1,#SCB_VECTKEY
 386 035a C160     		str r1,[r0,#SCB_AIRCR]
 387 035c FEE7     		b . 
 388              	
 389              	/**************************************
 390              	  reset_handler execute at MCU reset
 391              	***************************************/
 392              	  .type  reset_handler, %function
 393 035e 00BF     	  .p2align 2 
 394              	  .global reset_handler
 395              	reset_handler:
 396 0360 4FF00000 		_MOV32 r0,RAM_END
 396      C2F20200 
 397 0368 8546     		mov sp,r0 
 398              	// enable memory, bus and usage exceptions  
 399 036a 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 399      CEF20000 
 400 0372 81EA0101 	  eor r1,r1 
 401 0376 C0F20701 	  movt r1,#7 
 402 037a 4162     	  str r1,[r0,#SCB_SHCSR]
 403 037c FFF7FEFF 		bl	remap 
 404 0380 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 405 0384 01F0E6FC 	  bl  fpu_init 
 406 0388 00F0D1F9 		bl  ser_init
 407 038c FFF7FEFF 	 	bl	tv_init
 408 0390 FFF7FEFF 	  bl  kbd_init
 409 0394 01F0D6FA 	  bl  flash_spi_init   
 410 0398 04F0F6BD 		b COLD 
ARM GAS  forth.s 			page 20


 411              	
 412              	
 413              	
 414              		.type forth_init, %function 
 415              	  .p2align 2 
 416              	forth_init:
 417 039c 4FF00004 		_MOV32 UP,UPP 
 417      C2F20004 
 418 03a4 4FF68067 		_MOV32 DSP,SPP
 418      C2F20107 
 419 03ac 4FF47F48 		_MOV32 RSP,RPP
 419      C2F20108 
 420 03b4 DFF840A3 	  ldr INX,=NEST
 421 03b8 4AF0010A 	  orr INX,#1 
 422 03bc 86EA0606 		EOR TOS,TOS  
 423 03c0 7047     		_RET 
 424              	
 425              	
 426              	
 427              	  .type init_devices, %function
 428 03c2 00BF     	  .p2align 2 
 429              	init_devices:
 430              	/* init clock to HSE 96 Mhz */
 431              	/* set 3 wait states in FLASH_ACR_LATENCY */
 432 03c4 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 432      C4F20200 
 433 03cc 4FF00301 	  mov r1,#3 
 434 03d0 0160     	  str r1,[r0,#FLASH_ACR]
 435              	/* configure clock for HSE, 25 Mhz crystal */
 436              	/* enable HSE in RCC_CR */
 437 03d2 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 437      C4F20200 
 438 03da 0168     	  ldr r1,[r0,#RCC_CR]
 439 03dc 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 440 03e0 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 441              	/* wait HSERDY loop */
 442              	wait_hserdy:
 443 03e2 0168     	  ldr r1,[r0,#RCC_CR]
 444 03e4 11F4003F 	  tst r1,#(1<<17)
 445 03e8 FBD0     	  beq wait_hserdy
 446              	
 447              	/************************************************* 
 448              	   configure PLL  and source 
 449              	   SYSCLOCK=96 Mhz
 450              	   select HSE as  PLL source clock
 451              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 452              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 453              	****************************************************/
 454              	  /* set RCC_PLLCFGR */
 455 03ea 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 455      C4F20200 
 456 03f2 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 456      C0F24041 
 457 03fa 4160     	  str r1,[r0,#RCC_PLLCFGR]
 458              	  /* enable PLL */
 459 03fc 0168     	  ldr r1,[r0,#RCC_CR]
 460 03fe 41F08071 	  orr r1, #(1<<24)
ARM GAS  forth.s 			page 21


 461 0402 0160     	  str r1,[r0,#RCC_CR]
 462              	/* wait for PLLRDY */
 463              	wait_pllrdy:
 464 0404 0168     	  ldr r1,[r0,#RCC_CR]
 465 0406 11F0007F 	  tst r1,#(1<<25)
 466 040a FBD1     	  bne wait_pllrdy 
 467              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 468 040c 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 468      C0F21901 
 469 0414 8160     	  str r1,[r0,#RCC_CFGR]
 470              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 471 0416 8168     	  ldr r1,[r0,#RCC_CFGR]
 472 0418 41F00201 	  orr r1,#2
 473 041c 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 474              	/* wait for SWS==2 */
 475              	wait_sws:
 476 041e 8168     	  ldr r1,[r0,#RCC_CFGR]
 477 0420 11F0080F 	  tst r1,#(2<<2)
 478 0424 FBD0     	  beq wait_sws
 479              	/* now sysclock is 96 Mhz */
 480              	
 481              	
 482              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 483 0426 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 484 042a 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 485 042c 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 486 0430 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 487              	/* configure GPIOC:13 as output for user LED */
 488 0432 4FF40060 	  _MOV32 r0,LED_GPIO 
 488      C4F20200 
 489 043a 4FF00D01 	  mov r1,#LED_PIN
 490 043e 4FF01102 	  mov r2,#OUTPUT_OD 
 491 0442 00B500F0 	  _CALL gpio_config 
 491      8FF85DF8 
 491      04EB
 492 044c 4FF00102 	  mov r2,#1
 493 0450 00B500F0 	  _CALL gpio_out 
 493      DEF85DF8 
 493      04EB
 494              	/* enable compensation CELL for fast I/O */
 495 045a 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 495      C4F20101 
 496 0462 4FF00100 		mov r0,#1 
 497 0466 0862     		str r0,[R1,#SYSCFG_CMPCR]
 498              	/* wait for ready bit */ 
 499 0468 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 500 046a 10F4807F 	    tst r0,#(1<<8)
 501 046e FBD0     		beq 1b 	
 502              	
 503              	
 504              	/* configure systicks for 1msec ticks */
 505              	// set priority to 15 (lowest)
 506 0470 4FF0FF30 	  mov r0,#STCK_IRQ
 507 0474 4FF00F01 	  mov r1,#15 
 508 0478 00B500F0 	  _CALL nvic_set_priority
 508      2FF85DF8 
 508      04EB
ARM GAS  forth.s 			page 22


 509 0482 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 509      CEF20000 
 510 048a 47F2FF61 	  _MOV32 r1,95999 
 510      C0F20101 
 511 0492 4160     	  str r1,[r0,#STK_LOAD]
 512 0494 4FF00701 	  mov r1,#7
 513 0498 0160     	  str r1,[r0,STK_CTL]
 514 049a 7047     	  _RET  
 515              	
 516              	
 517              	/* copy system variables to RAM */ 
 518              		.type remap, %function 
 519              	    .global remap 
 520              	remap:
 521              	// copy system to RAM 	
 522 049c 4FF00000 		_MOV32 r0,RAM_ADR 
 522      C2F20000 
 523 04a4 9549     		ldr r1,=UZERO 
 524 04a6 4FF0B002 		mov r2,#ULAST-UZERO 
 525 04aa 02F10302 		add r2,r2,#3
 526 04ae 22F00302 		and r2,r2,#~3 
 527 04b2 51F8043B 	1:	ldr r3,[r1],#4 
 528 04b6 40F8043B 		str r3,[r0],#4 
 529 04ba 043A     		subs R2,#4 
 530 04bc F9D1     		bne 1b
 531              	// zero end of RAM 
 532 04be 4FF00002 		_MOV32 r2,RAM_END 
 532      C2F20202 
 533 04c6 83EA0303 		eor r3,r3,r3 
 534 04ca 40F8043B 	2:  str r3,[r0],#4
 535 04ce 9042     		cmp r0,r2 
 536 04d0 FBDB     		blt 2b 
 537 04d2 4FF00004 		_MOV32 UP,RAM_ADR  
 537      C2F20004 
 538 04da 7047     		_RET 
 539              	
 540              	// set irq priority 
 541              	// 0 highest 
 542              	// 15 lowest
 543              	// input: r0 IRQn  
 544              	//        r1  ipr 
 545              	nvic_set_priority:
 546 04dc 08B4     	    push {r3}
 547 04de 0028     	    cmp r0,#0 
 548 04e0 08D4     	    bmi negative_irq 
 549 04e2 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 549      CEF20003 
 550 04ea 4FEA0111 	    lsl r1,#4 
 551 04ee 1954     	    strb r1,[r3,r0]
 552 04f0 08BC     	    pop {r3}
 553 04f2 7047     	    _RET 
 554              	negative_irq:
 555 04f4 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 555      CEF20003 
 556 04fc 00F00F00 	    and r0,#0XF 
 557 0500 A0F10400 	    sub r0,#4 
 558 0504 4FEA0111 	    lsl r1,#4 
ARM GAS  forth.s 			page 23


 559 0508 1954     	    strb r1,[r3,r0]
 560 050a 08BC     	    pop {r3}
 561 050c 7047     	    _RET 
 562              	
 563              	
 564              	// enable interrupt in nvic 
 565              	// input: r0 = IRQn 
 566              	nvic_enable_irq: 
 567 050e 0EB4     	    push {r1,r2,r3}
 568 0510 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 568      CEF20003 
 569 0518 0146     	    mov r1,r0 
 570 051a 4FEA5111 	    lsr r1,#5  
 571 051e 4FEA8101 	    lsl r1,#2  // ISERn  
 572 0522 00F01F00 	    and r0,#31 // bit#
 573 0526 4FF00102 	    mov r2,#1 
 574 052a 02FA00F2 	    lsl r2,r0
 575 052e 72B6     	    cpsid I
 576 0530 5A50     	    str r2,[r3,r1]
 577 0532 62B6     	    cpsie I 
 578 0534 0EBC     	    pop {r1,r2,r3}
 579 0536 7047     	    _RET 
 580              	
 581              	// disable interrupt in nvic
 582              	// input: r0 = IRQn
 583              	nvic_disable_irq:
 584 0538 0EB4     	    push {r1,r2,r3}
 585 053a 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 585      CEF20003 
 586 0542 0146     	    mov r1,r0 
 587 0544 4FEA5111 	    lsr r1,#5  
 588 0548 4FEA8101 	    lsl r1,#2  // ISERn
 589 054c 00F01F00 	    and r0,#31 // bit#
 590 0550 4FF00102 	    mov r2,#1 
 591 0554 02FA00F2 	    lsl r2,r0
 592 0558 5A50     	    str r2,[r3,r1]
 593 055a BFF34F8F 	    dsb 
 594 055e BFF36F8F 	    isb 
 595 0562 0EBC     	    pop {r1,r2,r3}
 596 0564 7047     	    _RET 
 597              	
 598              	/**********************************
 599              	  gpio_config 
 600              	  Configure gpio mode 
 601              	  input:
 602              	    r0   GPIOx 
 603              	    r1   pin 
 604              	    r2   mode 
 605              	  output:
 606              	    none 
 607              	  use:
 608              	    r3,r5,r11  
 609              	**********************************/
 610              	gpio_config:
 611 0566 2DE92808 	    push {r3,r5,r11}
 612              	//  clear registers field 
 613 056a 4FF00105 	    mov r5,#1
ARM GAS  forth.s 			page 24


 614 056e 05FA01F5 	    lsl r5,r1
 615 0572 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 616 0576 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 617 0578 03EA0503 	    and r3,r5 
 618 057c 4360     	    str r3,[r0,#GPIO_OTYPER]
 619 057e 4FF00305 	    mov r5,#3 
 620 0582 4FF0020B 	    mov r11,#2 
 621 0586 01FB0BFB 	    mul r11,r1 
 622 058a 05FA0BF5 	    lsl r5,r11 
 623 058e 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 624 0592 0368     	    ldr r3,[r0,#GPIO_MODER]
 625 0594 03EA0503 	    and r3,r5 
 626 0598 0360     	    str r3,[r0,#GPIO_MODER]
 627 059a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 628 059c 03EA0503 	    and r3,r5 
 629 05a0 C360     	    str r3,[r0,#GPIO_PUPDR]
 630              	// set mode register, r2 low nibble  
 631 05a2 02F00305 	    and r5,r2,#3    
 632 05a6 05FA0BF5 	    lsl r5,r11 // mode 
 633 05aa 0368     	    ldr r3,[r0,#GPIO_MODER]
 634 05ac 43EA0503 	    orr r3,r5 
 635 05b0 0360     	    str r3,[r0,#GPIO_MODER]
 636 05b2 032A     	    cmp r2,#3
 637 05b4 13D0     	    beq 9f // analog input 
 638 05b6 12F00305 	    ands r5,r2,#3 
 639 05ba 08D0     	    beq input_pull 
 640              	output_type:
 641 05bc 4FEA1212 	    lsr r2,#4 
 642 05c0 02FA01F2 	    lsl r2,r1 // 1 bit field 
 643 05c4 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 644 05c6 43EA0203 	    orr r3,r2 
 645 05ca 4360     	    str r3,[r0,#GPIO_OTYPER]
 646 05cc 07E0     	    b 9f 
 647              	input_pull:
 648 05ce C368     	    ldr r3,[r0,#GPIO_PUPDR]
 649 05d0 4FEA1212 	    lsr r2,#4 
 650 05d4 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 651 05d8 43EA0203 	    orr r3,r2 
 652 05dc C360     	    str r3,[r0,#GPIO_PUPDR]
 653 05de BDE82808 	9:  pop {r3,r5,r11}
 654 05e2 7047     	    _RET 
 655              	
 656              	// configure gpio speed 
 657              	// input:
 658              	//    r0   GPIO_BASE_ADR 
 659              	//    r1   pin 
 660              	//    r2   speed
 661              	// use:
 662              	//  r3,r5,r11 
 663              	gpio_speed:
 664 05e4 2DE92808 	    push {r3,r5,r11}
 665 05e8 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 666 05ea 4FF00305 	    mov r5,#3
 667 05ee 4FF0020B 	    mov r11,#2 
 668 05f2 01FB0BFB 	    mul r11,r1 
 669 05f6 05FA0BF5 	    lsl r5,r11
 670 05fa 6FEA0505 	    mvn r5,r5 
ARM GAS  forth.s 			page 25


 671 05fe 03EA0503 	    and r3,r5   
 672 0602 02FA0BF2 	    lsl r2,r11  
 673 0606 43EA0203 	    orr r3,r2 
 674 060a 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 675 060c BDE82808 	    pop {r3,r5,r11}
 676 0610 7047     	    _RET
 677              	
 678              	/**************************** 
 679              	  gpio_out port,pin,0|1
 680              	  input:
 681              	    r0   gpio_base_adr 
 682              	    r1   pin 
 683              	    r2   data 0|1 
 684              	**************************/
 685              	gpio_out:
 686 0612 08B4     	    push {r3}
 687 0614 4FF00103 	    mov r3,#1 
 688 0618 03FA01F3 	    lsl r3,r1 
 689 061c 0AB9     	    cbnz r2, 1f 
 690 061e 4FEA0343 	    lsl r3,#16 
 691 0622 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 692 0624 08BC     	    pop {r3}
 693 0626 7047     	    _RET 
 694              	
 695              	/******************************************************
 696              	*  COLD start moves the following to USER variables.
 697              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 698              	******************************************************/
 699              		.p2align 2
 700              	UZERO:
 701 0628 00000000 		.word 0  			/*Reserved */
 702 062c 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 703 0630 00000000 		.word 0      /* TICKS */
 704 0634 00000000 	    .word 0     /* CD_TIMER */
 705 0638 984E0000 		.word HI_BOTH  /*'BOOT */
 706 063c 2C160000 		.word PS2_QKEY /* query for character */
 707 0640 F40E0000 	  .word TV_EMIT  /* char output device */
 708 0644 0A000000 	  .word BASEE 	/*BASE */
 709 0648 00000000 		.word 0			/*tmp */
 710 064c 00000000 		.word 0			/*SPAN */
 711 0650 00000000 		.word 0			/*>IN */
 712 0654 00000000 		.word 0			/*#TIB */
 713 0658 80FE0120 		.word TIBB	/*TIBU */
 714 065c 98400000 		.word INTER	/*'EVAL */
 715 0660 00000000 		.word 0			/*HLD */
 716 0664 804F0000 		.word _LASTN	/*CONTEXT */
 717 0668 E84F0000 		.word CTOP  	/* FCP end of system dictionnary */
 718 066c C0490020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 719 0670 804F0000 		.word _LASTN	/*LAST word in dictionary */
 720 0674 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 720      00000000 
 720      00000000 
 720      00000000 
 721 0684 00000000 		.word 0  /* RX_HEAD */
 722 0688 00000000 		.word 0  /* RX_TAIL */ 
 723 068c 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 724 0690 00000000 		.word 0  /* VID_STATE, video state */  
ARM GAS  forth.s 			page 26


 725 0694 00000000 	    .word 0  /* VID_FIELD, field */
 726 0698 80800120 		.word VID_BUFF /* video_buffer address */ 
 727 069c 00000000 	    .word 0 /* kbd struct */
 728 06a0 00000000 		.space KBD_QUEUE_SIZE,0  
 728      00000000 
 728      00000000 
 728      00000000 
 729 06b0 00000000 		.word 0  /* kbd queue head */
 730 06b4 00000000 		.word 0 /* kbd queue tail */ 
 731 06b8 00000000 	    .word 0 /* tv cursor row */
 732 06bc 00000000 	    .word 0 /* tv cursor column */ 
 733 06c0 00000000 	    .word 0 /* tv back color */
 734 06c4 07000000 	    .word 7 /* tv font color */
 735 06c8 00000000 	    .word 0 /* FPSW */
 736 06cc 00000000 	    .word 0 /* FBASE */ 
 737 06d0 00000000 	    .word 0,0 
 737      00000000 
 738              	ULAST:
 739              	
 740              	// used by _HEADER macro 
 741              	// to link names field
 742              	// in dictionary  
 743 06d8 12000000 	    .equ LINK, 0 
 743      C2000000 
 743      0C010000 
 743      4E010000 
 743      8A010000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
ARM GAS  forth.s 			page 27


  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0700 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0708 1868     		ldr r0,[r3,#USART_SR]
  38 070a 5968     		ldr r1,[r3,#USART_DR]
  39 070c 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0710 0CD0     		beq 2f // no char received 
  41 0712 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 0716 3FF4EFAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 071a 04F14C00 		add r0,UP,#RX_QUEUE
  44 071e 226E     		ldr r2,[UP,#RX_TAIL]
  45 0720 8154     		strb r1,[r0,r2]
  46 0722 02F10102 		add r2,#1 
  47 0726 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 072a 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 072c 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 072e 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 0736 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 0738 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 073c 01EA0201 	  and r1,r1,r2
  62 0740 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0744 41EA0201 	  orr r1,r1,r2 
  64 0748 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 074a 4FF4EE61 	  mov r1,#0x77<<4 
  67 074e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0750 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0758 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 075c 8160     	  str r1,[r0,#USART_BRR]
  73 075e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0762 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0764 4FF02500 	  mov r0,#USART1_IRQ 
  77 0768 4FF00701 	  mov r1,#7
  78 076c 00B5FFF7 	  _CALL nvic_set_priority
  78      B5FE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0776 4FF02500 	  mov r0,#USART1_IRQ 
  81 077a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      C7FE5DF8 
ARM GAS  forth.s 			page 28


  81      04EB
  82 0784 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0786 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0794 47F8046D 		_PUSH
  92 0798 206E     		ldr T0,[UP,#RX_TAIL] 
  93 079a E16D     		ldr T1,[UP,#RX_HEAD]
  94 079c 90EA0106 		eors TOS,T0,T1 
  95 07a0 0CD0     		beq 1f
  96 07a2 04F14C00 		add T0,UP,#RX_QUEUE 
  97 07a6 0844     		add T0,T1 
  98 07a8 0678     		ldrb TOS,[T0]
  99 07aa 01F10101 		add T1,#1 
 100 07ae 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 07b2 E165     		str T1,[UP,#RX_HEAD]
 102 07b4 47F8046D 		_PUSH 
 103 07b8 4FF0FF36 		mov TOS,#-1
 104 07bc 01F00ABF 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 07c0 8A070000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 07d0 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 07d8 2868     	1:  ldr T0,[WP,#USART_SR]
 113 07da 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 07de FBD0     		beq 1b 
 115 07e0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 07e2 57F8046B 		_POP
 117 07e6 01F0F5BE 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 07ea C4070000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 07f4 47F8046D 	        _PUSH 
 126 07f8 4FF00006 	        mov TOS,#0
 127 07fc 01F0EABE 	        _NEXT 
 128              	
ARM GAS  forth.s 			page 29


 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0800 EE070000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 080c 47F8046D 	        _PUSH 
 135 0810 4FF00106 	        mov TOS,#1
 136 0814 01F0DEBE 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0818 04080000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 0824 3046     	        mov T0,TOS
 144 0826 57F8046B 	        _POP 
 145 082a 50B1     	        cbz T0, 4f 
 146              	// serial console 
 147 082c 5048     	        ldr T0,=SER_QKEY 
 148 082e 6061     	        str T0,[UP,#STDIN]
 149 0830 5048     	        ldr T0,=SER_EMIT
 150 0832 A061     	        str T0,[UP,#STDOUT]
 151 0834 504D45F0 	        _CALL_COLWORD READY 
 151      010504F0 
 151      93BB
 152 083e 01F0C9BE 	        _NEXT 
 153              	4: // local console 
 154 0842 4E48     	        ldr T0,=PS2_QKEY
 155 0844 6061     	        str T0,[UP,#STDIN]
 156 0846 4E48     	        ldr T0,=TV_EMIT
 157 0848 A061     	        str T0,[UP,#STDOUT]
 158 084a 4B4D45F0 	        _CALL_COLWORD READY 
 158      010504F0 
 158      88BB
 159 0854 01F0BEBE 	        _NEXT 
 160              	
 161              	/*******************************
 162              	    ANSI-PARAM ( n -- )
 163              	    convert and transmit 
 164              	    ANSI ESC[  parameter 
 165              	*******************************/
 166 0858 1C080000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 166      0A414E53 
 166      492D5041 
 166      52414D00 
 167 0868 504700BF 	      _NEST 
 168 086c 9B270000 	      _DOLIT -1 // c 
 168      FFFFFFFF 
 169 0874 252A0000 	1:    _ADR ONEP  // c+1
 170 0878 91280000 	      _ADR TOR   
 171 087c 9B270000 	      _DOLIT 10 
 171      0A000000 
 172 0884 25310000 	      _ADR SLMOD // r q  
ARM GAS  forth.s 			page 30


 173 0888 D92A0000 	      _ADR QDUP  // r q q | r 0  
 174 088c DB270000 	      _QBRAN 2f  // r 0 
 174      A0080000 
 175 0894 4D280000 	      _ADR RFROM // r q c 
 176 0898 EF270000 	      _BRAN 1b
 176      74080000 
 177 08a0 9B270000 	2:    _DOLIT '0'  
 177      30000000 
 178 08a8 C9290000 	      _ADR PLUS 
 179 08ac A5260000 	      _ADR EMIT 
 180 08b0 4D280000 	      _ADR RFROM 
 181 08b4 D92A0000 	      _ADR QDUP 
 182 08b8 DB270000 	      _QBRAN 3f
 182      D0080000 
 183 08c0 352A0000 	      _ADR ONEM 
 184 08c4 91280000 	      _ADR TOR 
 185 08c8 EF270000 	      _BRAN 2b 
 185      A0080000 
 186              	3:    
 187 08d0 DB250000 	      _UNNEST 
 188              	
 189              	/******************************
 190              	    ESC[ 
 191              	    send ANSI escape sequence
 192              	*******************************/
 193 08d4 5C080000 	      _HEADER ANSI_ESC,4,"ESC["
 193      04455343 
 193      5B0000BF 
 194 08e0 504700BF 	      _NEST 
 195 08e4 9B270000 	      _DOLIT 27 
 195      1B000000 
 196 08ec A5260000 	      _ADR EMIT 
 197 08f0 9B270000 	      _DOLIT '['
 197      5B000000 
 198 08f8 A5260000 	      _ADR EMIT 
 199 08fc DB250000 	      _UNNEST 
 200              	
 201              	/*************************************
 202              	    SER-AT ( line col -- )
 203              	    move cursor on serial console
 204              	*************************************/
 205 0900 D8080000 	      _HEADER SER_AT,6,"SER-AT"
 205      06534552 
 205      2D415400 
 206 090c 504700BF 	      _NEST
 207 0910 E1080000 	      _ADR ANSI_ESC
 208 0914 15290000 	      _ADR SWAP 
 209 0918 69080000 	      _ADR ANSI_PARAM 
 210 091c 9B270000 	      _DOLIT ';'
 210      3B000000 
 211 0924 A5260000 	      _ADR EMIT
 212 0928 69080000 	      _ADR ANSI_PARAM
 213 092c 9B270000 	      _DOLIT 'H'
 213      48000000 
 214 0934 A5260000 	      _ADR EMIT 
 215 0938 DB250000 	      _UNNEST 
 216              	
ARM GAS  forth.s 			page 31


 217              	/****************************
 218              	    SER-CLS ( -- )
 219              	    serial clear screeen 
 220              	****************************/
 221 093c 04090000 	    _HEADER SER_CLS,7,"SER-CLS"
 221      07534552 
 221      2D434C53 
 222 0948 504700BF 	    _NEST
 223 094c 9B270000 	    _DOLIT 1 
 223      01000000 
 224 0954 05290000 	    _ADR DUPP 
 225 0958 0D090000 	    _ADR SER_AT  
 226 095c E1080000 	    _ADR ANSI_ESC
 227 0960 9B270000 	    _DOLIT 'J'
 227      4A000000 
 228 0968 A5260000 	    _ADR EMIT 
 229 096c DB250000 	    _UNNEST 
 230 0970 94070000 	
 230      D0070000 
 230      644F0000 
 230      2C160000 
 230      F40E0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 32


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
ARM GAS  forth.s 			page 33


  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0984 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 098c 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 098e 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0996 41EA0201 	  orr r1,r2
  82 099a 0160     	  str r1,[r0,#GPIO_MODER]
  83 099c 81EA0101 	  eor r1,r1 
  84 09a0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 09a2 4FF00101 	  mov r1,#1 // pin 1 
  88 09a6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 09aa 00B5FFF7 	  _CALL gpio_config 
  89      DBFD5DF8 
  89      04EB
  90 09b4 4FF00101 	  mov r1,#1 
  91 09b8 4FF00202 	  mov r2,#2
  92 09bc 00B5FFF7 	  _CALL gpio_speed 
  92      11FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 09c6 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 09c8 41F02001 	  orr r1,#(2<<4) // AF2 
  96 09cc 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 09ce 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 09d6 4FF00200 	  mov r0,#2 
 100 09da 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 09dc 41EA0001 	  orr r1,r0 
 102 09e0 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 09e2 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 09ea 41F2D470 	  mov r0,#HPER
 106 09ee D062     	  str r0,[r2,#TIM_ARR]
 107 09f0 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 09f4 D063     	  str r0,[r2,#TIM_CCR3]
 109 09f6 4FF4E170 	  mov r0,#HPULSE 
 110 09fa 1064     	  str r0,[r2,#TIM_CCR4]  
 111 09fc 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0a00 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0a02 4FF48850 	  mov r0,#(1<<12)+(1<<8)
ARM GAS  forth.s 			page 34


 114 0a06 1062     	  str r0,[r2,#TIM_CCER]
 115 0a08 4FF00100 	  mov r0,#1 
 116 0a0c D060     	  str r0,[r2,#TIM_DIER]
 117 0a0e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0a10 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0a14 4FF00201 	  mov r1,#2
 121 0a18 00B5FFF7 	  _CALL nvic_set_priority
 121      5FFD5DF8 
 121      04EB
 122 0a22 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0a26 00B5FFF7 	  _CALL nvic_enable_irq
 123      71FD5DF8 
 123      04EB
 124 0a30 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0a32 00BF     	  _GBL_FUNC tv_out_isr
 132 0a34 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0a3c 81EA0101 	  eor T1,T1
 134 0a40 0161     	  str T1,[T0,#TIM_SR]
 135 0a42 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0a44 01F10101 	  add T1,#1 
 137 0a48 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0a4a A26E     	  ldr T2,[UP,#VID_STATE]
 140 0a4c 002A     	  cmp T2,#ST_VSYNC 
 141 0a4e 07D0     	  beq state_vsync
 142 0a50 012A     	  cmp T2,#ST_PREVID 
 143 0a52 2FD0     	  beq state_pre_video 
 144 0a54 022A     	  cmp T2,#ST_VIDEO 
 145 0a56 36D0     	  beq state_video_out 
 146 0a58 032A     	  cmp T2,#ST_POSTVID 
 147 0a5a 63D0     	  beq state_post_video
 148 0a5c FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0a60 0129     	  cmp T1,#1
 152 0a62 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0a64 4FF0DB01 	  mov T1,#SERRATION
 155 0a68 0164     	  str T1,[T0,#TIM_CCR4]
 156 0a6a 40F6E931 	  mov T1,#SYNC_LINE 
 157 0a6e C162     	  str T1,[T0,#TIM_ARR]
 158 0a70 6BE0     	  b tv_isr_exit 
 159 0a72 0729     	1: cmp T1,#7
 160 0a74 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0a76 40F62821 	  mov T1,#VSYNC_PULSE
 163 0a7a 0164     	  str T1,[T0,#TIM_CCR4]
 164 0a7c 65E0     	  b tv_isr_exit
 165 0a7e 0D29     	2: cmp T1,#13
ARM GAS  forth.s 			page 35


 166 0a80 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0a82 4FF0DB01 	   mov T1,#SERRATION 
 169 0a86 0164     	   str T1,[T0,#TIM_CCR4]
 170 0a88 5FE0     	   b tv_isr_exit   
 171 0a8a 1229     	3: cmp T1,#18
 172 0a8c 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0a8e E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0a90 0029     	   cmp T1,#ODD_FIELD  
 176 0a92 5AD0     	   beq tv_isr_exit 
 177 0a94 01E0     	   b sync_end 
 178 0a96 1329     	4: cmp T1,#19 
 179 0a98 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0a9a 4FF00901 	   mov T1,#9
 182 0a9e 6166     	   str T1,[UP,#VID_CNTR]
 183 0aa0 4FF4E171 	   mov T1,#HPULSE 
 184 0aa4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0aa6 41F2D471 	   mov T1,#HPER 
 186 0aaa C162     	   str T1,[T0,#TIM_ARR] 
 187 0aac 4FF00101 	   mov T1,#ST_PREVID 
 188 0ab0 A166     	   str T1,[UP,#VID_STATE]
 189 0ab2 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0ab4 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0ab6 48D4     	   bmi tv_isr_exit 
 194 0ab8 4FF00201 	   mov T1,#ST_VIDEO 
 195 0abc A166     	   str T1,[UP,#VID_STATE]
 196 0abe 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0ac2 C160     	   str T1,[T0,#TIM_DIER]
 198 0ac4 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0ac6 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0ac8 06D9     	   bls 1f 
 205 0aca 4FF00301 	   mov T1,#ST_POSTVID 
 206 0ace A166     	   str T1,[UP,#VID_STATE]
 207 0ad0 4FF00101 	   mov T1,#1 
 208 0ad4 C160     	   str T1,[T0,#TIM_DIER]
 209 0ad6 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0ad8 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0ada A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0ade 4FF0A003 	   mov T3,#160
 214 0ae2 03FB01F1 	   mul T1,T3 
 215 0ae6 0844     	   add T0,T1  
 216 0ae8 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0af0 10F8012B 	2: ldrb T2,[T0],#1 
ARM GAS  forth.s 			page 36


 222 0af4 4FEA0222 	   lsl T2,#8 
 223 0af8 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0afa AFF30080 	   nop.w 
 225 0afe AFF30080 	   nop.w
 226 0b02 AFF30080 	   nop.w 
 227 0b06 AFF30080 	   nop.w 
 228 0b0a 4FEA0212 	   lsl T2,#4  
 229 0b0e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0b10 AFF30080 	   nop.w
 231 0b14 AFF30080 	   nop.w  
 232 0b18 013B     	   subs T3,#1
 233 0b1a E9D1     	   bne 2b  
 234 0b1c 4FF47022 	   mov T2,#(15<<16) 
 235 0b20 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0b22 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0b24 4FF48372 	   mov T2,#262
 239 0b28 9142     	   cmp T1,T2
 240 0b2a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0b2c E16E     	   ldr T1,[UP,VID_FIELD]
 243 0b2e 11B9     	   cbnz T1, frame_end 
 244 0b30 40F6E931 	   mov T1,#SYNC_LINE
 245 0b34 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0b36 4FF00001 	   mov T1,#ST_VSYNC 
 248 0b3a A166     	   str T1,[UP,#VID_STATE]
 249 0b3c 81EA0101 	   eor T1,T1 
 250 0b40 6166     	   str T1,[UP,#VID_CNTR]
 251 0b42 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0b44 6FEA0101 	   mvn T1,T1  
 253 0b48 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0b4a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0b4c 40090000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0b5c 47F8046D 		_PUSH 
 266 0b60 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0b64 01F036BD 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0b68 500B0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0b78 47F8046D 		_PUSH 
ARM GAS  forth.s 			page 37


 273 0b7c 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0b80 01F028BD 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0b84 6C0B0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0b90 47F8046D 	  _PUSH 
 280 0b94 04F19406 	  ADD TOS,UP,#COL 
 281 0b98 01F01CBD 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0b9c 880B0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0ba4 47F8046D 	  _PUSH 
 287 0ba8 04F19006 	  ADD TOS,UP,#ROW 
 288 0bac 01F012BD 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0bb0 A00B0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0bbc 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0bc0 00FB06F6 	  mul TOS,T0 
 295 0bc4 01F006BD 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0bc8 B40B0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0bd4 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0bd8 00FB06F6 	  mul TOS,T0 
 302 0bdc 01F0FABC 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0be0 CC0B0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0bec 47F8046D 	  _PUSH 
 308 0bf0 DFF88C65 	  ldr TOS,=font_6x8 
 309 0bf4 01F0EEBC 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0bf8 E40B0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0c04 47F8046D 	  _PUSH 
 315 0c08 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0c0a 01F0E3BC 	  _NEXT 
 317              	
 318              	
ARM GAS  forth.s 			page 38


 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0c0e FC0B0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0c18 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0c1a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0c1e 02FB00F0 	    mul T0,T2 
 330 0c22 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0c26 1044     	    add T0,T2 
 332 0c28 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0c2a 0344     	    add T3,T0 // T3 -> byte address 
 334 0c2c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0c2e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0c32 11F0010F 	    tst T1,#1 
 337 0c36 01D0     	    beq 1f 
 338 0c38 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0c3c DFF84405 	1:  ldr T0,=plot_op 
 340 0c40 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0c44 05EA0205 	    and WP,T2 // mask out nibble 
 343 0c48 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0c4c 11F0010F 	    tst T1,#1 
 345 0c50 01D1     	    bne 1f 
 346 0c52 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0c56 45EA0005 	1:  orr WP,T0  
 348 0c5a 1D70     	    strb WP,[T3]
 349 0c5c 1AE0     	    b 9f 
 350              	op_pen: 
 351 0c5e 05EA0205 	    and WP,T2 
 352 0c62 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0c66 11F0010F 	    tst T1,#1
 354 0c6a 01D1     	    bne 1f 
 355 0c6c 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0c70 45EA0005 	1:	orr WP,T0 
 357 0c74 1D70     	    strb WP,[T3]
 358 0c76 0DE0     	    b 9f 
 359              	op_invert:
 360 0c78 85EA0205 	    eor WP,T2 
 361 0c7c 1D70     	    strb WP,[T3]
 362 0c7e 09E0     	    b 9f 
 363              	op_xor:
 364 0c80 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0c84 11F0010F 	    tst T1,#1 
 366 0c88 01D1     	    bne 1f 
 367 0c8a 4FEA0010 	    lsl T0,#4 
 368 0c8e 85EA0005 	1:  eor WP,T0 
 369 0c92 1D70     	    strb WP,[T3]
 370 0c94 57F8046B 	9:  _POP 
 371 0c98 01F09CBC 	    _NEXT 
 372              	
 373 0c9c 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
ARM GAS  forth.s 			page 39


 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0ca0 120C0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0cac 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0cae 0028     	    cmp T0,#0
 381 0cb0 FCD1     	    bne 1b
 382 0cb2 01F08FBC 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0cb6 A40C0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0cc0 80EA0000 	    eor T0,T0 
 388 0cc4 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0cc8 40EA0100 	    orr T0,T1 
 390 0ccc 4FEA0111 	    lsl T1,#4 
 391 0cd0 40EA0100 	    orr T0,T1 
 392 0cd4 4FEA0021 	    lsl T1,T0,#8 
 393 0cd8 40EA0100 	    orr T0,T1 
 394 0cdc 4FEA0041 	    lsl T1,T0,#16
 395 0ce0 40EA0100 	    orr T0,T1 
 396 0ce4 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0ce8 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0cea 5050     	1:	str T0,[T2,T1]
 399 0cec 0439     	    subs T1,#4
 400 0cee FCD1     	    bne 1b
 401 0cf0 1060     	    str T0,[T2]
 402 0cf2 80EA0000 	    eor T0,T0 
 403 0cf6 C4F89000 	    str T0,[UP,#ROW]
 404 0cfa C4F89400 	    str T0,[UP,#COL]
 405 0cfe 01F069BC 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0d02 BA0C0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0d10 504700BF 	  _NEST
 412 0d14 9B270000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0d1c 05290000 	  _ADR DUPP  
 414 0d20 91280000 	  _ADR TOR 
 415 0d24 E9290000 	  _ADR STAR
 416 0d28 050C0000 	  _ADR VIDBUFF
 417 0d2c C9290000 	  _ADR PLUS
 418 0d30 4D280000 	  _ADR RFROM   
 419 0d34 9B270000 	  _DOLIT 0 
 419      00000000 
 420 0d3c 59330000 	  _ADR FILL 
 421 0d40 DB250000 	  _UNNEST 
ARM GAS  forth.s 			page 40


 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0d44 060D0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0d54 504700BF 	    _NEST 
 429 0d58 050C0000 	    _ADR VIDBUFF 
 430 0d5c 05290000 	    _ADR DUPP 
 431 0d60 9B270000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0d68 05290000 	    _ADR DUPP 
 433 0d6c 91280000 	    _ADR TOR 
 434 0d70 C9290000 	    _ADR PLUS 
 435 0d74 15290000 	    _ADR SWAP 
 436 0d78 9B270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0d80 4D280000 	    _ADR RFROM  
 438 0d84 D9290000 	    _ADR SUBB 
 439 0d88 11330000 	    _ADR MOVE
 440 0d8c 9B270000 	    _DOLIT 24 
 440      18000000 
 441 0d94 110D0000 	    _ADR CLRLINE 
 442 0d98 DB250000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0d9c 480D0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0dac 504700BF 	    _NEST 
 450 0db0 050C0000 	    _ADR VIDBUFF
 451 0db4 05290000 	    _ADR DUPP 
 452 0db8 9B270000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0dc0 C9290000 	    _ADR PLUS 
 454 0dc4 9B270000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0dcc 9B270000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0dd4 D9290000 	    _ADR SUBB  
 457 0dd8 11330000 	    _ADR MOVE
 458 0ddc 9B270000 	    _DOLIT 0 
 458      00000000 
 459 0de4 110D0000 	    _ADR CLRLINE
 460 0de8 DB250000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
ARM GAS  forth.s 			page 41


 466              	*****************************/
 467 0dec A00D0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0df8 E34D     	    ldr WP,=SCROLLUP 
 469 0dfa 45F00105 	    orr WP,#1
 470 0dfe 80EA0000 	    eor T0,T0 
 471 0e02 C4F89400 	    str T0,[UP,#COL]
 472 0e06 D4F89000 	    ldr T0,[UP,#ROW]
 473 0e0a 1828     	    cmp T0,#24 
 474 0e0c A2D0     	    beq SCROLLUP  
 475 0e0e 00F10100 	    add T0,#1 
 476 0e12 C4F89000 	    str T0,[UP,#ROW]
 477 0e16 01F0DDBB 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0e1a F00D0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0e24 D4F89400 	  ldr T0,[UP,#COL]
 484 0e28 00F10100 	  add T0,#1
 485 0e2c 3528     	  cmp T0,#53
 486 0e2e E3D5     	  bpl TV_CRLF  
 487 0e30 C4F89400 	  str T0,[UP,#COL]
 488 0e34 01F0CEBB 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0e38 1E0E0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0e44 D4F89400 	    ldr T0,[UP,#COL]
 497 0e48 28B1     	    cbz T0,1f 
 498 0e4a A0F10100 	    sub T0,#1 
 499 0e4e C4F89400 	    str T0,[UP,#COL]
 500 0e52 01F0BFBB 	    _NEXT 
 501 0e56 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0e5a 38B1     	    cbz T0,9f
 503 0e5c A0F10100 	    sub T0,#1
 504 0e60 C4F89000 	    str T0,[UP,#ROW]
 505 0e64 4FF03400 	    mov T0,#52 
 506 0e68 C4F89400 	    str T0,[UP,#COL]
 507 0e6c 01F0B2BB 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0e70 4FF08000 	    mov T0,#128 
 513 0e74 06EA0006 	    and TOS,T0 
 514 0e78 4FEAD616 	    lsr TOS,#7
 515 0e7c 01F0AABB 	    _NEXT 
 516              	
ARM GAS  forth.s 			page 42


 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0e80 3868     	  ldr T0,[DSP]
 520 0e82 00F10100 	  add T0,#1 
 521 0e86 3860     	  str T0,[DSP]
 522 0e88 01F0A4BB 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0e8c 4FEA4606 	    lsl TOS,#1
 527 0e90 01F0A0BB 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0e94 504700BF 	    _NEST 
 536 0e98 9B270000 	    _DOLIT 5 
 536      05000000 
 537 0ea0 91280000 	    _ADR TOR 
 538 0ea4 91280000 	1:  _ADR TOR 
 539 0ea8 3D2B0000 	    _ADR DDUP 
 540 0eac 7D280000 	    _ADR RAT
 541 0eb0 710E0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0eb4 190C0000 	    _ADR PLOT 
 543 0eb8 810E0000 	    _ADR INCR_X 
 544 0ebc 4D280000 	    _ADR RFROM 
 545 0ec0 8D0E0000 	    _ADR NEXT_PIXEL
 546 0ec4 BD270000 	    _DONXT 1b
 546      A40E0000 
 547 0ecc 292B0000 	    _ADR TDROP 
 548 0ed0 DB250000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0ed4 A6F12006 	   sub TOS,#32
 553 0ed8 4FF00800 	   mov T0,#8 
 554 0edc 00FB06F6 	   mul TOS,T0 
 555 0ee0 A748     	   ldr T0,=font_6x8
 556 0ee2 0644     	   add TOS,T0 
 557 0ee4 01F076BB 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0ee8 3C0E0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0ef4 504700BF 	    _NEST
 565 0ef8 05290000 	    _ADR DUPP 
 566 0efc 9B270000 	    _DOLIT 32 
 566      20000000 
 567 0f04 892C0000 	    _ADR ULESS
 568 0f08 DB270000 	    _QBRAN 1f
ARM GAS  forth.s 			page 43


 568      180F0000 
 569 0f10 EF270000 	    _BRAN CTRL_KEY
 569      7C0F0000 
 570 0f18 D50E0000 	1:  _ADR CHAR_FONT 
 571 0f1c 910B0000 	    _ADR CURSOR_COL 
 572 0f20 21280000 	    _ADR AT
 573 0f24 D50B0000 	    _ADR COLX  // x coord 
 574 0f28 A50B0000 	    _ADR CURSOR_ROW 
 575 0f2c 21280000 	    _ADR AT    
 576 0f30 BD0B0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0f34 ED2A0000 	    _ADR ROT  // TEST 
 578 0f38 9B270000 	    _DOLIT 7   
 578      07000000 
 579 0f40 91280000 	    _ADR TOR  
 580 0f44 91280000 	1:  _ADR TOR  // { x y }
 581 0f48 3D2B0000 	    _ADR DDUP  // { x y x y }
 582 0f4c 7D280000 	    _ADR RAT 
 583 0f50 41280000 	    _ADR CAT   // { x y x y r }
 584 0f54 950E0000 	    _ADR CHAR_ROW 
 585 0f58 252A0000 	    _ADR ONEP // {x y' }
 586 0f5c 4D280000 	    _ADR RFROM 
 587 0f60 252A0000 	    _ADR ONEP // {x y' c-adr' }
 588 0f64 BD270000 	    _DONXT 1b
 588      440F0000 
 589 0f6c 292B0000 	    _ADR TDROP  
 590 0f70 250E0000 	    _ADR RIGHT
 591 0f74 65100000 	9:  _ADR SHOW_CURSOR 
 592 0f78 DB250000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0f7c ED100000 	    _ADR HIDE_CURSOR
 595 0f80 05290000 	    _ADR DUPP 
 596 0f84 9B270000 	    _DOLIT BKSPP  
 596      08000000 
 597 0f8c 512C0000 	    _ADR EQUAL 
 598 0f90 DB270000 	    _QBRAN 1f 
 598      A80F0000 
 599 0f98 45100000 	    _ADR BACK_SPACE 
 600 0f9c F5280000 	8:  _ADR DROP 
 601 0fa0 EF270000 	    _BRAN 9b 
 601      740F0000 
 602 0fa8 05290000 	1:  _ADR DUPP 
 603 0fac 9B270000 	    _DOLIT CRR 
 603      0D000000 
 604 0fb4 512C0000 	    _ADR EQUAL 
 605 0fb8 DB270000 	    _QBRAN 1f 
 605      CC0F0000 
 606 0fc0 ED0F0000 	    _ADR CAR_RET
 607 0fc4 EF270000 	    _BRAN 8b
 607      9C0F0000 
 608 0fcc 9B270000 	1:  _DOLIT LF 
 608      0A000000 
 609 0fd4 512C0000 	    _ADR EQUAL 
 610 0fd8 DB270000 	    _QBRAN 9b 
 610      740F0000 
 611 0fe0 05100000 	    _ADR LN_FEED
 612 0fe4 EF270000 	    _BRAN 9b  
 612      740F0000 
ARM GAS  forth.s 			page 44


 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0fec 504700BF 	   _NEST
 620 0ff0 9B270000 	   _DOLIT 0 
 620      00000000 
 621 0ff8 910B0000 	   _ADR CURSOR_COL 
 622 0ffc 0D280000 	   _ADR STORE 
 623 1000 DB250000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1004 504700BF 	    _NEST 
 631 1008 A50B0000 	    _ADR CURSOR_ROW 
 632 100c 21280000 	    _ADR AT 
 633 1010 05290000 	    _ADR DUPP 
 634 1014 9B270000 	    _DOLIT 24 
 634      18000000 
 635 101c 71290000 	    _ADR XORR 
 636 1020 DB270000 	    _QBRAN 1f
 636      38100000 
 637 1028 252A0000 	    _ADR ONEP 
 638 102c A50B0000 	    _ADR CURSOR_ROW 
 639 1030 0D280000 	    _ADR STORE 
 640 1034 DB250000 	    _UNNEST    
 641 1038 F5280000 	1:  _ADR DROP 
 642 103c 550D0000 	    _ADR SCROLLUP 
 643 1040 DB250000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1044 504700BF 	  _NEST 
 652 1048 450E0000 	  _ADR LEFT 
 653 104c 65100000 	  _ADR SHOW_CURSOR
 654 1050 DB250000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 1054 EC0E0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 1064 504700BF 	    _NEST 
 663 1068 9B270000 	    _DOLIT 0xFF
ARM GAS  forth.s 			page 45


 663      FF000000 
 664 1070 A50B0000 	0:  _ADR CURSOR_ROW
 665 1074 21280000 	    _ADR AT  
 666 1078 252A0000 	    _ADR ONEP 
 667 107c BD0B0000 	    _ADR ROWY 
 668 1080 9B270000 	    _DOLIT BPR
 668      A0000000 
 669 1088 E9290000 	    _ADR STAR
 670 108c 9B270000 	    _DOLIT BPR  
 670      A0000000 
 671 1094 D9290000 	    _ADR SUBB 
 672 1098 910B0000 	    _ADR CURSOR_COL
 673 109c 21280000 	    _ADR AT 
 674 10a0 D50B0000 	    _ADR COLX 
 675 10a4 C92A0000 	    _ADR TWOSL  
 676 10a8 C9290000 	    _ADR PLUS
 677 10ac 050C0000 	    _ADR VIDBUFF
 678 10b0 C9290000 	    _ADR PLUS
 679 10b4 9B270000 	    _DOLIT 2
 679      02000000 
 680 10bc 91280000 	    _ADR TOR  
 681 10c0 3D2B0000 	1:  _ADR DDUP 
 682 10c4 2D280000 	    _ADR CSTOR 
 683 10c8 252A0000 	    _ADR ONEP 
 684 10cc BD270000 	    _DONXT 1b
 684      C0100000 
 685 10d4 152B0000 	2:  _ADR DDROP // drop 3 elements 
 686 10d8 DB250000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 10dc 58100000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 10ec 504700BF 	    _NEST 
 694 10f0 5D0B0000 	    _ADR BACKCOLOR 
 695 10f4 21280000 	    _ADR AT 
 696 10f8 05290000 	    _ADR DUPP  
 697 10fc 9B270000 	    _DOLIT 4 
 697      04000000 
 698 1104 B9290000 	    _ADR LSHIFT 
 699 1108 5D290000 	    _ADR ORR 
 700 110c EF270000 	    _BRAN 0b
 700      70100000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1114 E0100000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1120 352E     	    cmp TOS,#53
 706 1122 01D4     	    bmi 1f 
 707 1124 4FF03406 	    mov TOS,#52
 708 1128 C4F89460 	1:  str TOS,[UP,#COL]
ARM GAS  forth.s 			page 46


 709 112c 57F8046B 	    _POP
 710 1130 192E     	    cmp TOS,#25
 711 1132 01D4     	    bmi 1f 
 712 1134 4FF01806 	    mov TOS,#24 
 713 1138 C4F89060 	1:  str TOS,[UP,#ROW]
 714 113c 57F8046B 	    _POP 
 715 1140 01F048BA 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1144 18110000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 1150 504700BF 	    _NEST 
 721 1154 89320000 	    _ADR PAD 
 722 1158 05290000 	    _ADR DUPP 
 723 115c 252A0000 	    _ADR ONEP 
 724 1160 9B270000 	    _DOLIT 53
 724      35000000 
 725 1168 853F0000 	    _ADR ACCEP
 726 116c 15290000 	    _ADR SWAP 
 727 1170 F5280000 	    _ADR DROP 
 728 1174 29290000 	    _ADR OVER 
 729 1178 2D280000 	    _ADR CSTOR  
 730 117c DB250000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
ARM GAS  forth.s 			page 47


 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
ARM GAS  forth.s 			page 48


 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
ARM GAS  forth.s 			page 49


 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
ARM GAS  forth.s 			page 50


 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
ARM GAS  forth.s 			page 51


  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
ARM GAS  forth.s 			page 52


  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
ARM GAS  forth.s 			page 53


 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 118c 1C61     	   .byte 0x1c,'a' 
   9 118e 3262     	   .byte 0x32,'b'
  10 1190 2163     	   .byte 0x21,'c'
  11 1192 2364     	   .byte 0x23,'d'
  12 1194 2465     	   .byte 0x24,'e'
  13 1196 2B66     	   .byte 0x2b,'f'
  14 1198 3467     	   .byte 0x34,'g'
  15 119a 3368     	   .byte 0x33,'h'
  16 119c 4369     	   .byte 0x43,'i'
  17 119e 3B6A     	   .byte 0x3B,'j'
  18 11a0 426B     	   .byte 0x42,'k'
  19 11a2 4B6C     	   .byte 0x4b,'l'
  20 11a4 3A6D     	   .byte 0x3a,'m'
  21 11a6 316E     	   .byte 0x31,'n'
  22 11a8 446F     	   .byte 0x44,'o'
  23 11aa 4D70     	   .byte 0x4d,'p'
  24 11ac 1571     	   .byte 0x15,'q'
  25 11ae 2D72     	   .byte 0x2d,'r'
  26 11b0 1B73     	   .byte 0x1b,'s'
  27 11b2 2C74     	   .byte 0x2c,'t'
  28 11b4 3C75     	   .byte 0x3c,'u'
  29 11b6 2A76     	   .byte 0x2a,'v'
  30 11b8 1D77     	   .byte 0x1d,'w'
  31 11ba 2278     	   .byte 0x22,'x'
  32 11bc 3579     	   .byte 0x35,'y'
ARM GAS  forth.s 			page 54


  33 11be 1A7A     	   .byte 0x1a,'z'
  34 11c0 4530     	   .byte 0x45,'0'
  35 11c2 1631     	   .byte 0x16,'1'
  36 11c4 1E32     	   .byte 0x1e,'2'
  37 11c6 2633     	   .byte 0x26,'3'
  38 11c8 2534     	   .byte 0x25,'4'
  39 11ca 2E35     	   .byte 0x2e,'5'
  40 11cc 3636     	   .byte 0x36,'6'
  41 11ce 3D37     	   .byte 0x3d,'7'
  42 11d0 3E38     	   .byte 0x3e,'8'
  43 11d2 4639     	   .byte 0x46,'9'
  44 11d4 0E60     	   .byte 0x0e,'`'
  45 11d6 4E2D     	   .byte 0x4e,'-'
  46 11d8 553D     	   .byte 0x55,'='
  47 11da 5D5C     	   .byte 0x5d,'\\'
  48 11dc 545B     	   .byte 0x54,'['
  49 11de 5B5D     	   .byte 0x5b,']'
  50 11e0 4C3B     	   .byte 0x4c,';'
  51 11e2 5227     	   .byte 0x52,'\''
  52 11e4 412C     	   .byte 0x41,','
  53 11e6 492E     	   .byte 0x49,'.'
  54 11e8 7C2A     	   .byte 0x7c,'*'
  55 11ea 792B     	   .byte 0x79,'+'
  56 11ec 2920     	   .byte 0x29,' '
  57 11ee 5A0D     	   .byte SC_ENTER,CRR 
  58 11f0 6608     	   .byte SC_BKSP,BKSPP 
  59 11f2 0D09     	   .byte SC_TAB,9
  60 11f4 761B     	   .byte SC_ESC,27
  61 11f6 119E     	   .byte SC_LALT,VK_LALT 
  62 11f8 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 11fa 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 11fc 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 11fe 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1200 5800     	   .byte SC_CAPS,0
  67 1202 0580     	   .byte SC_F1,VK_F1
  68 1204 0681     	   .byte SC_F2,VK_F2
  69 1206 0482     	   .byte SC_F3,VK_F3
  70 1208 0C83     	   .byte SC_F4,VK_F4
  71 120a 0384     	   .byte SC_F5,VK_F5
  72 120c 0B85     	   .byte SC_F6,VK_F6
  73 120e 8386     	   .byte SC_F7,VK_F7
  74 1210 0A87     	   .byte SC_F8,VK_F8
  75 1212 0188     	   .byte SC_F9,VK_F9
  76 1214 098A     	   .byte SC_F10,VK_F10
  77 1216 788B     	   .byte SC_F11,VK_F11
  78 1218 078C     	   .byte SC_F12,VK_F12
  79 121a 7030     	   .byte SC_KP0,'0'
  80 121c 6931     	   .byte SC_KP1,'1'
  81 121e 7232     	   .byte SC_KP2,'2'
  82 1220 7A33     	   .byte SC_KP3,'3'
  83 1222 6B34     	   .byte SC_KP4,'4'
  84 1224 7335     	   .byte SC_KP5,'5'
  85 1226 7436     	   .byte SC_KP6,'6'
  86 1228 6C37     	   .byte SC_KP7,'7'
  87 122a 7538     	   .byte SC_KP8,'8'
  88 122c 7D39     	   .byte SC_KP9,'9'
  89 122e 7C2A     	   .byte SC_KPMUL,'*'
ARM GAS  forth.s 			page 55


  90 1230 4A2F     	   .byte SC_KPDIV,'/'
  91 1232 792B     	   .byte SC_KPPLUS,'+'
  92 1234 7B2D     	   .byte SC_KPMINUS,'-'
  93 1236 712E     	   .byte SC_KPDOT,'.'
  94 1238 5A0D     	   .byte SC_KPENTER,'\r'
  95 123a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 123c AAAA     	   .byte BAT_OK,BAT_OK  
  97 123e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1240 6141     	   .byte 'a','A'
 102 1242 6242     	   .byte 'b','B'
 103 1244 6343     	   .byte 'c','C'
 104 1246 6444     	   .byte 'd','D'
 105 1248 6545     	   .byte 'e','E'
 106 124a 6646     	   .byte 'f','F'
 107 124c 6747     	   .byte 'g','G'
 108 124e 6848     	   .byte 'h','H'
 109 1250 6949     	   .byte 'i','I'
 110 1252 6A4A     	   .byte 'j','J'
 111 1254 6B4B     	   .byte 'k','K'
 112 1256 6C4C     	   .byte 'l','L'
 113 1258 6D4D     	   .byte 'm','M'
 114 125a 6E4E     	   .byte 'n','N'
 115 125c 6F4F     	   .byte 'o','O'
 116 125e 7050     	   .byte 'p','P'
 117 1260 7151     	   .byte 'q','Q'
 118 1262 7252     	   .byte 'r','R'
 119 1264 7353     	   .byte 's','S'
 120 1266 7454     	   .byte 't','T'
 121 1268 7555     	   .byte 'u','U'
 122 126a 7656     	   .byte 'v','V'
 123 126c 7757     	   .byte 'w','W'
 124 126e 7858     	   .byte 'x','X'
 125 1270 7959     	   .byte 'y','Y'
 126 1272 7A5A     	   .byte 'z','Z'
 127 1274 3121     	   .byte '1','!'
 128 1276 3240     	   .byte '2','@'
 129 1278 3323     	   .byte '3','#'
 130 127a 3424     	   .byte '4','$'
 131 127c 3525     	   .byte '5','%'
 132 127e 365E     	   .byte '6','^'
 133 1280 3726     	   .byte '7','&'
 134 1282 382A     	   .byte '8','*'
 135 1284 3928     	   .byte '9','('
 136 1286 3029     	   .byte '0',')'
 137 1288 2D5F     	   .byte '-','_'
 138 128a 3D2B     	   .byte '=','+'
 139 128c 607E     	   .byte '`','~'
 140 128e 2722     	   .byte '\'','"'
 141 1290 2C3C     	   .byte ',','<'
 142 1292 2E3E     	   .byte '.','>'
 143 1294 2F3F     	   .byte '/','?'
 144 1296 5C7C     	   .byte '\\','|'
 145 1298 3B3A     	   .byte ';',':'
 146 129a 5B7B     	   .byte '[','{'
ARM GAS  forth.s 			page 56


 147 129c 5D7D     	   .byte ']','}'
 148 129e 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 12a0 315C     	   .byte '1','\\'
 153 12a2 3240     	   .byte '2','@'
 154 12a4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 12a6 363F     	   .byte '6','?'
 158 12a8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 12aa 397B     	   .byte '9','{'
 161 12ac 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 12ae 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 12b0 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 12b2 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 12b4 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 12b6 11A3     	    .byte SC_RALT,VK_RALT
 172 12b8 2F97     	    .byte SC_APPS,VK_APPS
 173 12ba 758D     	    .byte SC_UP,VK_UP
 174 12bc 728E     	    .byte SC_DOWN,VK_DOWN
 175 12be 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 12c0 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 12c2 7095     	    .byte SC_INSERT,VK_INSERT
 178 12c4 6C91     	    .byte SC_HOME,VK_HOME
 179 12c6 7D93     	    .byte SC_PGUP,VK_PGUP
 180 12c8 7A94     	    .byte SC_PGDN,VK_PGDN
 181 12ca 717F     	    .byte SC_DEL,VK_DELETE
 182 12cc 6992     	    .byte SC_END,VK_END
 183 12ce 4A2F     	    .byte SC_KPDIV,'/'
 184 12d0 5A0D     	    .byte SC_KPENTER,'\r'
 185 12d2 1200     	    .byte 0x12,0
 186 12d4 7C00     	    .byte 0x7c,0
 187 12d6 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 12d8 6303     	   .byte 'c', VK_CTRL_C 
 193 12da 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 12dc 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 12de 27A2     	   .byte SC_RGUI,VK_RGUI
 196 12e0 11A3     	   .byte SC_RALT,VK_RALT
 197 12e2 2F97     	   .byte SC_APPS,VK_APPS
 198 12e4 7095     	   .byte SC_INSERT,VK_INSERT
 199 12e6 6C91     	   .byte SC_HOME,VK_HOME
 200 12e8 7D93     	   .byte SC_PGUP,VK_PGUP
 201 12ea 717F     	   .byte SC_DEL,VK_DELETE
 202 12ec 6992     	   .byte SC_END,VK_END
 203 12ee 7A94     	   .byte SC_PGDN,VK_PGDN
ARM GAS  forth.s 			page 57


 204 12f0 758D     	   .byte SC_UP,VK_UP
 205 12f2 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 12f4 728E     	   .byte SC_DOWN,VK_DOWN
 207 12f6 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 12f8 4A2F     	   .byte SC_KPDIV,'/'
 209 12fa 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 12fc 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 12fe 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1300 119E     	   .byte SC_LALT,VK_LALT
 213 1302 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1304 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1306 761B     	   .byte SC_ESC,VK_ESC
 216 1308 779A     	   .byte SC_NUM,VK_NLOCK
 217 130a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 130c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
ARM GAS  forth.s 			page 58


  78 130e 00BF     	    _GBL_FUNC kbd_isr 
  79 1310 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 1318 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 131c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 131e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1326 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 132a 10F0020F 	    tst r0,#KBD_TX 
  85 132e 40F08480 	    bne send_bit  
  86 1332 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1334 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1338 01F10102 	    add r2,r1,#1
  89 133c 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 1340 0029     	    cmp r1,#0
  91 1342 15D0     	    beq start_bit 
  92 1344 0929     	    cmp r1,#9 
  93 1346 25D0     	    beq parity_bit 
  94 1348 0A29     	    cmp r1,#10 
  95 134a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 134c 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 1350 4FEA5202 	    lsr r2,#1 
  99 1354 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1358 07D0     	    beq 1f 
 101 135a 42F08002 	    orr r2,#(1<<7)
 102 135e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 1362 00F10100 	    add r0,#1 
 104 1366 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 136a 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 136e 63E0     	    b 9f         
 107              	start_bit:
 108 1370 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 1374 60D1     	    bne 9f // not a start bit 
 110 1376 80EA0000 	    eor r0,r0 
 111 137a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 137e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 1382 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 1386 6FF00101 	    mvn r1,#1
 115 138a 00EA0100 	    and r0,r1 // clear error flag 
 116 138e 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 1392 51E0     	    b 9f 
 118              	parity_bit:
 119 1394 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1398 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 139c 4CD0     	    beq 9f  
 122 139e 01F10101 	    add r1,#1 
 123 13a2 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 13a6 47E0     	    b 9f      
 125              	stop_bit:
 126 13a8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 13ac 40D0     	    beq 8f // error stop bit expected 
 128 13ae 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 13b2 11F0010F 	    tst r1,#1 
 130 13b6 3BD0     	    beq 8f // error parity
 131 13b8 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 13bc 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 59


 133 13c0 E028     	    cmp r0,#XT_KEY
 134 13c2 04D1     	    bne 1f
 135 13c4 41F04001 	    orr r1,#KBD_F_XT
 136 13c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 13cc 30E0     	    b 8f  
 138 13ce 11F0800F 	1:  tst r1,#KBD_F_REL
 139 13d2 14D0     	    beq store_code
 140 13d4 5828     	    cmp r0,#SC_CAPS
 141 13d6 04D1     	    bne 1f
 142 13d8 81F00401 	    eor r1,#KBD_F_CAPS
 143 13dc 41F00101 	    orr r1,#KBD_F_CTGL 
 144 13e0 06E0     	    b 2f 
 145 13e2 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 13ec 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 13f0 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 13f4 01EA0201 	    and r1,r2
 149 13f8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 13fc 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 13fe F028     	    cmp r0,#KEY_REL
 154 1400 04D1     	    bne 1f
 155              	// set release flags 
 156 1402 41F08001 	    orr r1,#KBD_F_REL 
 157 1406 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 140a 11E0     	    b 8f     
 159 140c 0146     	1:  mov r1,r0 
 160 140e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1418 0AD1     	    bne 8f // was async key 
 162 141a D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 141e 04F17802 	    add r2,UP,#KBD_QUEUE
 164 1422 1154     	    strb r1,[r2,r0]
 165 1424 00F10100 	    add r0,#1
 166 1428 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 142c 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 1430 80EA0000 	8:  eor r0,r0 
 169 1434 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1438 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 143a 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 143e 01F10100 	    add r0,r1,#1
 182 1442 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 1446 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 144a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
ARM GAS  forth.s 			page 60


 186 144e 0829     	1:  cmp r1,#8 
 187 1450 15D0     	    beq send_parity 
 188 1452 0929     	    cmp r1,#9 
 189 1454 1CD0     	    beq send_stop
 190 1456 0A29     	    cmp r1,#10
 191 1458 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 145a 10F0010F 	    tst r0,#1
 194 145e 4FEA5000 	    lsr r0,#1
 195 1462 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 1466 02D1     	    bne 1f 
 197 1468 4FEA0242 	    lsl r2,#16
 198 146c 05E0     	    b 2f  
 199 146e 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 1472 00F10100 	    add r0,#1 
 201 1476 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 147a 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 147c 1CE0     	    b 9f 
 204              	send_parity:
 205 147e 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 1482 10F0010F 	    tst r0,#1
 207 1486 01D0     	    beq 1f 
 208 1488 4FEA0242 	    lsl r2,#16
 209 148c 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 148e 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1490 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 1492 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 1496 1960     	    str r1,[r3,#GPIO_MODER]
 217 1498 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 149a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 149e 6FF00201 	    mvn r1,#KBD_TX 
 221 14a2 00EA0100 	    and r0,r1 
 222 14a6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 14a8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 14ac 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 14b0 80EA0000 	    eor r0,r0 
 226 14b4 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 14b8 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 14ba 02B4     	    push {r1}
 238 14bc DFF86414 	    ldr r1,=async_keys
 239 14c0 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 14ca 02BC     	    pop {r1}
ARM GAS  forth.s 			page 61


 241 14cc 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 14ce 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 14d8 FF28     	    cmp r0,#255
 256 14da 01D1     	    bne set_async_key 
 257 14dc 0020     	    movs r0,#0 
 258 14de 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 14e0 06B4     	    push {r1,r2}
 262 14e2 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 14e6 DFF84014 	    ldr r1,=async_jump 
 264 14ea D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 14ee 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 14f2 04E0     	    b set_reset
 268              	ctrl_key:
 269 14f4 4FF01000 	    mov r0,#KBD_F_CTRL
 270 14f8 01E0     	    b set_reset 
 271              	alt_key:
 272 14fa 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 14fe 12F0800F 	    tst r2,#KBD_F_REL 
 275 1502 04D0     	    beq 1f 
 276 1504 6FEA0000 	    mvn r0,r0
 277 1508 02EA0002 	    and r2,r0
 278 150c 01E0     	    b 2f
 279 150e 42EA0002 	1:  orr r2,r0 
 280 1512 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1516 5FF0FF30 	    movs r0,#-1
 282 151a 06BC     	9:  pop {r1,r2}
 283 151c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 151e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1520 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1522 1401     	    .byte SC_LCTRL,1  // left control 
 290 1524 1401     	    .byte SC_RCTRL,1  // right control 
 291 1526 1102     	    .byte SC_LALT,2  // left alt 
 292 1528 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 152a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
ARM GAS  forth.s 			page 62


 296 152c 00       	    .byte 0 // shift  key 
 297 152d 03       	    .byte (ctrl_key-shift_key)/2
 298 152e 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 152f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1530 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1538 1846     	    mov r0,r3 
 311 153a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 153e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1542 00B5FFF7 	    _CALL gpio_config
 313      0FF85DF8 
 313      04EB
 314 154c 1846     	    mov r0,r3 
 315 154e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 1552 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 1556 00B5FFF7 	    _CALL gpio_config
 317      05F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1560 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1568 4FF40050 	    mov r0,#(2<<12)
 321 156c 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 156e 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 1576 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 157a 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 157c D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 157e 80EA0000 	   eor r0,r0 
 328 1582 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 1586 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 158a 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 158e 4FF00101 	   mov r1,#1 
 333 1592 00B5FEF7 	   _CALL nvic_set_priority
 333      A2FF5DF8 
 333      04EB
 334 159c 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 15a0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      B4FF5DF8 
 335      04EB
 336 15aa 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 15ac 48110000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
ARM GAS  forth.s 			page 63


 340      2D415359 
 340      4E4300BF 
 341 15bc 47F8046D 	    _PUSH 
 342 15c0 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 15c4 06F0FC06 	    and TOS,#0xFC  
 344 15c8 01F004B8 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 15cc 0EB4     	    push {T1,T2,T3}
 352 15ce 80EA0000 	    eor T0,T0  
 353 15d2 04F17803 	    add T3,UP,#KBD_QUEUE
 354 15d6 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 15da D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 15de 9142     	    cmp T1,T2 
 357 15e0 06D0     	    beq 2f  
 358 15e2 585C     	    ldrb T0,[T3,T1]
 359 15e4 01F10101 	    add T1,#1 
 360 15e8 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 15ec C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 15f0 0EBC     	2:  pop {T1,T2,T3}
 363 15f2 7047     	    _RET 
 364              	
 365              	wait_code:
 366 15f4 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 15fe 0000     	    movs T0,T0
 368 1600 F8D0     	    beq wait_code  
 369 1602 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1604 04B4     	    push {T2}
 380 1606 11F8012B 	1:  ldrb T2,[T1],#1
 381 160a 22B1     	    cbz T2,2f 
 382 160c 8242     	    cmp T2,T0
 383 160e 02D0     	    beq 2f 
 384 1610 01F10101 	    add T1,#1 
 385 1614 F7E7     	    b 1b 
 386 1616 0878     	2:  ldrb T0,[T1]
 387 1618 0000     	    movs T0,T0 // set/reset zero flag 
 388 161a 04BC     	9:  pop {T2}
 389 161c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
ARM GAS  forth.s 			page 64


 394              	   don't wait for it.
 395              	*********************************/
 396 161e B0150000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 162c 47F8046D 	    _PUSH 
 398 1630 86EA0606 	    eor TOS,TOS 
 399 1634 BD49     	    ldr T1,=sc_ascii // translation table
 400 1636 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 163a 4FF04002 	    mov T2,#KBD_F_XT 
 402 163e 1042     	    tst T0,T2
 403 1640 00D0     	    beq 1f
 404 1642 BB49     	    ldr T1,=extended // extended code translation
 405 1644 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 164e 98B1     	    cbz T0,inkey_exit
 407 1650 E128     	    cmp T0,#XT2_KEY // pause 
 408 1652 13D0     	    beq pause_key
 409 1654 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 165e 0646     	    mov TOS,T0
 411 1660 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 166a 032E     	    cmp TOS,#VK_CTRL_C 
 413 166c 3EF444AE 	    beq user_reboot 
 414 1670 47F8046D 	    _PUSH 
 415 1674 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1678 00F0ACBF 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 167c 4FF00701 	    mov T1,#7 
 420 1680 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 168a 0139     	    subs T1,#1
 422 168c F8D1     	    bne 1b 
 423 168e 00F0A1BF 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 1692 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 1696 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 169a 06D1     	    bne shift_down 
 431 169c 10F0200F 	    tst T0,#KBD_F_ALT  
 432 16a0 06D1     	    bne altchar_down 
 433 16a2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 16a6 06D1     	    bne ctrl_down 
 435 16a8 0DE0     	    b 9f 
 436              	shift_down:
 437 16aa 3046     	    mov T0,TOS 
 438 16ac A149     	    ldr T1,=shifted 
 439 16ae 04E0     	    b 8f 
ARM GAS  forth.s 			page 65


 440              	altchar_down:
 441 16b0 3046     	    mov T0,TOS 
 442 16b2 A149     	    ldr T1,=altchar
 443 16b4 01E0     	    b 8f
 444              	ctrl_down:
 445 16b6 3046     	    mov T0,TOS 
 446 16b8 A049     	    ldr T1,=controls 
 447 16ba 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 16c4 0646     	    mov TOS,T0
 449 16c6 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 16d0 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 16d2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 16d6 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 16da 0BD0     	    beq 9f 
 456 16dc 412E     	    cmp TOS,#'A'
 457 16de 09D4     	    bmi 9f 
 458 16e0 5B2E     	    cmp TOS,#'Z'+1 
 459 16e2 03D4     	    bmi 3f 
 460 16e4 612E     	    cmp TOS,#'a'
 461 16e6 05D4     	    bmi 9f 
 462 16e8 7B2E     	    cmp TOS,#'z'+1
 463 16ea 03D5     	    bpl 9f 
 464 16ec 4FF02000 	3:  mov T0,#(1<<5)
 465 16f0 86EA0006 	    eor TOS,T0 
 466 16f4 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 16f6 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 16f8 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 16fa 0128     	    cmp r0,ST_PREVID 
 484 16fc FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 16fe 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1702 00B5FEF7 	    _CALL nvic_disable_irq
 487      18FF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 170c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
ARM GAS  forth.s 			page 66


 490 1714 1846     	    mov r0,r3 
 491 1716 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 171a 4FF01102 	    mov r2,#OUTPUT_OD
 493 171e 00B5FEF7 	    _CALL gpio_config 
 493      21FF5DF8 
 493      04EB
 494 1728 1846     	    mov r0,r3 
 495 172a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 172e 82EA0202 	    eor r2,r2 
 497 1732 00B5FEF7 	    _CALL gpio_out 
 497      6DFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 173c 4FF4E150 	    mov r0,#150*48
 500 1740 0138     	1:  subs r0,#1 
 501 1742 FDD1     	    bne 1b
 502 1744 01BC     	    pop {r0}
 503 1746 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 174a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 174e 40F00200 	    orr r0,#KBD_TX 
 506 1752 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 1756 80EA0000 	    eor r0,r0 
 508 175a 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 175e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 1762 1846     	    mov r0,r3 
 513 1764 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1768 4FF01102 	    mov r2,#OUTPUT_OD 
 515 176c 00B5FEF7 	    _CALL gpio_config 
 515      FAFE5DF8 
 515      04EB
 516 1776 1846     	    mov r0,r3 
 517 1778 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 177c 82EA0202 	    eor r2,r2 
 519 1780 00B5FEF7 	    _CALL gpio_out
 519      46FF5DF8 
 519      04EB
 520              	// release clock line 
 521 178a 1846     	    mov r0,r3 
 522 178c 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1790 4FF00002 	    mov r2,#INPUT_FLOAT
 524 1794 00B5FEF7 	    _CALL gpio_config
 524      E6FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 179e 4FF00A00 	    mov r0,#10
 528 17a2 E060     	    str r0,[UP,#CD_TIMER]
 529 17a4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 17a6 20B1     	    cbz r0, 4f 
 531 17a8 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 17ac 10F0020F 	    tst r0,#KBD_TX
 533 17b0 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 17b2 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 17b6 00B5FEF7 	    _CALL nvic_enable_irq
ARM GAS  forth.s 			page 67


 536      A9FE5DF8 
 536      04EB
 537 17c0 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 17c4 20F00201 	    bic r1,r0,#KBD_TX
 539 17c8 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 17cc 00F00200 	    and r0,#KBD_TX
 541 17d0 48B1     	    cbz r0, 5f
 542 17d2 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 17d4 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 17d8 1960     	    str r1,[r3,#GPIO_MODER]
 545 17da 80EA0000 	    eor r0,r0 
 546 17de 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 17e2 6FEA0000 	    mvn r0,r0   
 548 17e6 0EBC     	5:  pop {r1,r2,r3}
 549 17e8 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 17ea 80EA0000 	    eor T0,T0 
 555 17ee C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 17f2 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 17f6 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 17fa 6FF00301 	    mvn T1,#3
 559 17fe 00EA0100 	    and T0,T1 
 560 1802 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1806 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1808 22160000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1814 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1818 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1822 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1824 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 182e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1838 FE28     	    cmp r0,KBD_CMD_RESEND
 574 183a EBD0     	    beq 1b 
 575 183c 4FF4FA70 	    mov T0,#500 
 576 1840 E060     	    str T0,[UP,#CD_TIMER]
 577 1842 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 184c 10B9     	    cbnz T0,3f
 579 184e E068     	    ldr T0,[UP,#CD_TIMER]
 580 1850 0028     	    cmp T0,#0 
 581 1852 F6D1     	    bne 2b 
ARM GAS  forth.s 			page 68


 582 1854 47F8046D 	3:  _PUSH 
 583 1858 0646     	    mov TOS,T0  
 584 185a 00F0BBBE 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 185e 0C180000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 186c 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 1876 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 187a 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 1884 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 188e FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1890 ECD0     	    beq 1b
 598 1892 FA28     	    cmp T0,#KBD_ACK  
 599 1894 F6D1     	    bne 2b 
 600 1896 3046     	2:  mov T0,TOS 
 601 1898 00F00700 	    and T0,#7 
 602 189c 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 18a6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 18b0 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 18b2 F0D0     	    beq 2b
 606 18b4 FA28     	    cmp T0,#KBD_ACK 
 607 18b6 F6D1     	    bne 3b  
 608 18b8 57F8046B 	    _POP 
 609 18bc 00F08ABE 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 18c0 62180000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 18d0 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 18d4 10F0010F 	    tst T0,#1
 619 18d8 01D1     	    bne 1f 
 620 18da 00F07BBE 	    _NEXT 
 621 18de 47F8046D 	1: _PUSH 
 622 18e2 6FF00101 	    mvn T1,#1 
ARM GAS  forth.s 			page 69


 623 18e6 00EA0100 	    and T0,T1 
 624 18ea 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 18ee 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 18f2 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 18fa C4180000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1908 504700BF 	    _NEST
 635 190c D1180000 	1:  _ADR CAPS_LED  
 636 1910 2D160000 	    _ADR PS2_QKEY 
 637 1914 D92A0000 	    _ADR QDUP 
 638 1918 DB270000 	    _QBRAN 1b  
 638      0C190000 
 639 1920 DB250000 	    _UNNEST 
 640 1924 1E150000 	
 640      2C150000 
 640      8C110000 
 640      B0120000 
 640      40120000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
ARM GAS  forth.s 			page 70


  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1944 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 194c 0346     	    mov r3,r0 
  44 194e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1952 4FF00102 	    mov r2,#OUTPUT_PP
  46 1956 00B5FEF7 	    _CALL gpio_config 
  46      05FE5DF8 
  46      04EB
  47 1960 1846     	    mov r0,r3 
  48 1962 4FF00401 	    mov r1,#PIN_F_SC  
  49 1966 4FF00102 	    MOV r2,#1
  50 196a 00B5FEF7 	    _CALL gpio_out 
  50      51FE5DF8 
  50      04EB
  51 1974 1846     	    mov r0,r3 
  52 1976 4FF00501 	    mov r1,#PIN_SCK  
  53 197a 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 197e 00B5FEF7 	    _CALL gpio_config 
  54      F1FD5DF8 
  54      04EB
  55 1988 1846     	    mov r0,r3 
  56 198a 4FF00701 	    mov r1,#PIN_MOSI 
  57 198e 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1992 00B5FEF7 	    _CALL gpio_config 
  58      E7FD5DF8 
  58      04EB
  59 199c 1846     	    mov r0,r3
  60 199e 4FF00601 	    mov r1,#PIN_MISO
  61 19a2 4FF00202 	    mov r2,#INPUT_AFO  
  62 19a6 00B5FEF7 	    _CALL gpio_config
  62      DDFD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 19b0 4CF6AA40 	    mov r0,#0xCCAA
  65 19b4 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 19b6 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 19be 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 19c0 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 19c4 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 19c6 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 19ce 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 19d2 0180     	    strh r1,[r0,#SPI_CR1]
  73 19d4 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 19d6 80EA0000 	    eor r0,r0 
ARM GAS  forth.s 			page 71


  75 19da C5F25050 	    movt r0,#0x5550 
  76 19de 40EA0100 	    orr r0,r1 
  77 19e2 1862     	    str r0,[r3,#GPIO_AFRL]
  78 19e4 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 19e6 FE180000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 19f4 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 19fc 4FF00401 	    mov r1,#PIN_F_SC 
  88 1a00 4FF00002 	    mov r2,#0 
  89 1a04 00B5FEF7 	    _CALL gpio_out 
  89      04FE5DF8 
  89      04EB
  90 1a0e 00F0E1BD 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1a12 EA190000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1a20 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1a28 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1a2a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1a2e FBD1     	    bne 1b 
 102 1a30 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1a38 4FF00401 	    mov r1,#PIN_F_SC 
 104 1a3c 4FF00102 	    mov r2,#1 
 105 1a40 00B5FEF7 	    _CALL gpio_out 
 105      E6FD5DF8 
 105      04EB
 106 1a4a 00F0C3BD 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1a4e 161A0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1a5c 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
ARM GAS  forth.s 			page 72


 115 1a64 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1a66 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1a6a FBD0     	    beq 0b 
 118 1a6c 6FF00001 	    mvn T1,#0 
 119 1a70 0173     	    strb T1,[T0,#SPI_DR]
 120 1a72 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1a74 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1a78 FBD0     	    beq 1b     
 123              	2:  
 124 1a7a 47F8046D 	    _PUSH 
 125 1a7e 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1a80 00F0A8BD 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1a84 521A0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1a90 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1a98 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1a9a 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1a9e FBD0     	    beq 0b 
 138 1aa0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1aa2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1aa4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1aa8 FBD0     	    beq 1b 
 142 1aaa 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1aac 57F8046B 	    _POP 
 144 1ab0 00F090BD 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1ab4 881A0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1ac0 504700BF 	    _NEST 
 153 1ac4 F5190000 	    _ADR CHIP_SEL 
 154 1ac8 9B270000 	    _DOLIT 4
 154      04000000 
 155 1ad0 911A0000 	    _ADR WR_BYTE
 156 1ad4 211A0000 	    _ADR CHIP_DSEL
 157 1ad8 DB250000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1adc B81A0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
ARM GAS  forth.s 			page 73


 164 1ae8 504700BF 	    _NEST 
 165 1aec F5190000 	    _ADR CHIP_SEL 
 166 1af0 9B270000 	    _DOLIT 6 
 166      06000000 
 167 1af8 911A0000 	    _ADR WR_BYTE 
 168 1afc 211A0000 	    _ADR CHIP_DSEL 
 169 1b00 DB250000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1b04 E01A0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1b10 504700BF 	    _NEST
 177 1b14 F5190000 	    _ADR CHIP_SEL  
 178 1b18 9B270000 	    _DOLIT sr_cmd 
 178      381B0000 
 179 1b20 C9290000 	    _ADR PLUS 
 180 1b24 41280000 	    _ADR CAT
 181 1b28 911A0000 	    _ADR WR_BYTE
 182 1b2c 5D1A0000 	    _ADR RD_BYTE
 183 1b30 211A0000 	    _ADR CHIP_DSEL  
 184 1b34 DB250000 	    _UNNEST 
 185 1b38 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1b3b 081B0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1b48 504700BF 	    _NEST 
 193 1b4c 05290000 	    _ADR DUPP 
 194 1b50 9B270000 	    _DOLIT 16
 194      10000000 
 195 1b58 A1290000 	    _ADR RSHIFT 
 196 1b5c 911A0000 	    _ADR WR_BYTE 
 197 1b60 05290000 	    _ADR DUPP
 198 1b64 9B270000 	    _DOLIT 8 
 198      08000000 
 199 1b6c A1290000 	    _ADR RSHIFT 
 200 1b70 911A0000 	    _ADR WR_BYTE 
 201 1b74 911A0000 	    _ADR WR_BYTE 
 202 1b78 DB250000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1b7c 3F1B0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
ARM GAS  forth.s 			page 74


 209 1b8c 504700BF 	    _NEST 
 210 1b90 9B270000 	1:  _DOLIT 0 
 210      00000000 
 211 1b98 111B0000 	    _ADR RD_SR 
 212 1b9c 9B270000 	    _DOLIT 3 
 212      03000000 
 213 1ba4 49290000 	    _ADR ANDD 
 214 1ba8 DB270000 	    _QBRAN 2f
 214      B81B0000 
 215 1bb0 EF270000 	    _BRAN 1b
 215      901B0000 
 216 1bb8 DB250000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1bbc 801B0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1bcc 504700BF 	    _NEST 
 225 1bd0 E91A0000 	    _ADR WR_ENBL
 226 1bd4 F5190000 	    _ADR CHIP_SEL 
 227 1bd8 9B270000 	    _DOLIT 0x20 
 227      20000000 
 228 1be0 911A0000 	    _ADR WR_BYTE 
 229 1be4 491B0000 	    _ADR SEND_ADR
 230 1be8 211A0000 	    _ADR CHIP_DSEL 
 231 1bec 8D1B0000 	    _ADR WAIT_DONE 
 232 1bf0 DB250000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1bf4 C01B0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1c04 504700BF 	    _NEST 
 240 1c08 E91A0000 	    _ADR WR_ENBL 
 241 1c0c F5190000 	    _ADR CHIP_SEL
 242 1c10 9B270000 	    _DOLIT 0x60
 242      60000000 
 243 1c18 9B270000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1c20 911A0000 	    _ADR WR_BYTE 
 245 1c24 911A0000 	    _ADR WR_BYTE 
 246 1c28 211A0000 	    _ADR CHIP_DSEL 
 247 1c2c 8D1B0000 	    _ADR WAIT_DONE
 248 1c30 DB250000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
ARM GAS  forth.s 			page 75


 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 1c34 F81B0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1c40 504700BF 	    _NEST
 258 1c44 F5190000 	    _ADR CHIP_SEL 
 259 1c48 9B270000 	    _DOLIT 3 
 259      03000000 
 260 1c50 911A0000 	    _ADR WR_BYTE 
 261 1c54 491B0000 	    _ADR SEND_ADR
 262 1c58 91280000 	    _ADR TOR   
 263 1c5c EF270000 	    _BRAN 2f
 263      741C0000 
 264 1c64 5D1A0000 	1:  _ADR RD_BYTE
 265 1c68 29290000 	    _ADR OVER 
 266 1c6c 2D280000 	    _ADR CSTOR
 267 1c70 252A0000 	    _ADR ONEP 
 268 1c74 BD270000 	2:  _DONXT 1b
 268      641C0000 
 269 1c7c F5280000 	    _ADR DROP 
 270 1c80 211A0000 	    _ADR CHIP_DSEL 
 271 1c84 DB250000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1c88 381C0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1c94 504700BF 	    _NEST 
 280 1c98 E91A0000 	    _ADR WR_ENBL
 281 1c9c F5190000 	    _ADR CHIP_SEL
 282 1ca0 9B270000 	    _DOLIT 2 
 282      02000000 
 283 1ca8 911A0000 	    _ADR WR_BYTE 
 284 1cac 491B0000 	    _ADR SEND_ADR
 285 1cb0 91280000 	    _ADR TOR
 286 1cb4 EF270000 	    _BRAN 2f 
 286      D41C0000 
 287 1cbc 05290000 	1:  _ADR DUPP 
 288 1cc0 41280000 	    _ADR CAT 
 289 1cc4 05290000 	    _ADR DUPP 
 290 1cc8 C1390000 	    _ADR HDOT
 291 1ccc 911A0000 	    _ADR WR_BYTE 
 292 1cd0 252A0000 	    _ADR ONEP
 293 1cd4 BD270000 	2:  _DONXT 1b 
 293      BC1C0000 
 294 1cdc F5280000 	    _ADR DROP
 295 1ce0 211A0000 	    _ADR CHIP_DSEL
 296 1ce4 8D1B0000 	    _ADR WAIT_DONE 
 297 1ce8 DB250000 	    _UNNEST
 298              	
 299              	
ARM GAS  forth.s 			page 76


 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1cec 8C1C0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1cfc 504700BF 	    _NEST 
 318              	    
 319 1d00 DB250000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1d04 F01C0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1d14 504700BF 	    _NEST 
 327              	
 328 1d18 DB250000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1d1c 081D0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1d24 504700BF 	    _NEST 
 336              	
 337 1d28 DB250000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1d2c 201D0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1d38 504700BF 	    _NEST 
 345              	
 346 1d3c DB250000 	    _UNNEST 
 347              	
ARM GAS  forth.s 			page 77


 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 1d40 301D0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1d4c 504700BF 	    _NEST 
 354              	
 355 1d50 DB250000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	
  32              	
  33              	/*****************************
  34              	   initialize FPU
  35              	****************************/
  36              	fpu_init: 
  37 1d54 DFF89403 	   ldr.w r0,=CPACR 
  38 1d58 0168     	   ldr R1,[R0]
  39 1d5a 41F47001 	   orr r1,r1,#(0xf<<20)
  40 1d5e 0160     	   str r1,[r0]
  41 1d60 BFF34F8F 	   dsb 
  42 1d64 4FF00000 	   ldr r0,=FPCCR
  43 1d68 81EA0101 	   eor r1,r1 
  44 1d6c 0160     	   str r1,[r0]
ARM GAS  forth.s 			page 78


  45 1d6e BFF34F8F 	   dsb 
  46 1d72 4FF05100 	   mov r0,#FPU_IRQ 
  47 1d76 00B5FEF7 	   _CALL nvic_enable_irq
  47      C9FB5DF8 
  47      04EB
  48 1d80 7047     	   _RET
  49              	
  50              	/***************************
  51              	   FPSCR ( -- u )
  52              	   stack fpu SCR register 
  53              	***************************/
  54 1d82 441D0000 	   _HEADER FPSCR,5,"FPSCR"
  54      05465053 
  54      4352
  55 1d8c 47F8046D 	   _PUSH 
  56 1d90 F1EE106A 	   vmrs TOS,FPSCR
  57 1d94 BFF34F8F 	   dsb  
  58 1d98 00F01CBC 	   _NEXT 
  59              	
  60              	
  61              	/**************************
  62              	   CLR_FPSCR ( -- )
  63              	************************/
  64 1d9c 861D0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
  64      09434C52 
  64      5F465053 
  64      435200BF 
  65 1dac 80EA0000 	   eor T0,T0 
  66 1db0 E1EE100A 	   vmsr FPSCR,T0
  67 1db4 BFF34F8F 	   dsb 
  68 1db8 00F00CBC 	   _NEXT 
  69              	
  70              	
  71              	/*******************************
  72              	    >S0 variable ( f# --  )
  73              	    send float to fpu S0 
  74              	**********************************/
  75 1dbc A01D0000 	    _HEADER TOS0,3,">S0"
  75      033E5330 
  76 1dc4 00EE106A 	    vmov.f32 S0,TOS 
  77 1dc8 57F8046B 	    _POP 
  78 1dcc 00F002BC 	    _NEXT  
  79              	
  80              	/*******************************
  81              	    >S1 variable ( f# --  )
  82              	    send float to fpu S1 
  83              	**********************************/
  84 1dd0 C01D0000 	    _HEADER TOS1,3,">S1"
  84      033E5331 
  85 1dd8 00EE906A 	    vmov.f32 S1,TOS 
  86 1ddc 57F8046B 	    _POP 
  87 1de0 F8E3     	    _NEXT  
  88              	
  89              	/*******************************
  90              	    >S2 variable ( f# --  )
  91              	    send float to fpu S2 
  92              	**********************************/
ARM GAS  forth.s 			page 79


  93 1de2 D41D0000 	    _HEADER TOS2,3,">S2"
  93      033E5332 
  93      00BF
  94 1dec 01EE106A 	    vmov.f32 S2,TOS 
  95 1df0 57F8046B 	    _POP 
  96 1df4 EEE3     	    _NEXT  
  97              	
  98              	/*******************************
  99              	    S0>  ( -- f )
 100              	    push fpu S0 
 101              	*******************************/
 102 1df6 E61D0000 	    _HEADER S0FROM,3,"S0>"
 102      0353303E 
 102      00BF
 103 1e00 47F8046D 	    _PUSH 
 104 1e04 10EE106A 	    vmov.f32 TOS,S0 
 105 1e08 E4E3     	    _NEXT 
 106              	
 107              	/*******************************
 108              	    S1>  ( -- f )
 109              	    push fpu S1 
 110              	*******************************/
 111 1e0a FA1D0000 	    _HEADER S1FROM,3,"S1>"
 111      0353313E 
 111      00BF
 112 1e14 47F8046D 	    _PUSH 
 113 1e18 10EE906A 	    vmov.f32 TOS,S1 
 114 1e1c DAE3     	    _NEXT 
 115              	
 116              	/*******************************
 117              	    S2>  ( -- f )
 118              	    push fpu S2 
 119              	*******************************/
 120 1e1e 0E1E0000 	    _HEADER S2FROM,3,"S2>"
 120      0353323E 
 120      00BF
 121 1e28 47F8046D 	    _PUSH 
 122 1e2c 11EE106A 	    vmov.f32 TOS,S2 
 123 1e30 D0E3     	    _NEXT 
 124              	
 125              	
 126              	/*******************************
 127              	    F>S ( f -- n )
 128              	    convert float to integer 
 129              	    round to nearest integer 
 130              	*******************************/
 131 1e32 221E0000 	    _HEADER FTOS,3,"F>S"
 131      03463E53 
 131      00BF
 132 1e3c 00EE106A 	    vmov.f32 S0,TOS
 133 1e40 BDEE400A 	    vcvtr.s32.f32 s0,s0 
 134 1e44 10EE106A 	    vmov.f32 TOS,s0 
 135 1e48 C4E3     	    _NEXT 
 136              	    
 137              	/*******************************
 138              	    TRUNC (f - n )
 139              	    truncate float to integer 
ARM GAS  forth.s 			page 80


 140              	*******************************/
 141 1e4a 361E0000 	    _HEADER TRUNC,5,"TRUNC"
 141      05545255 
 141      4E43
 142 1e54 00EE106A 	    vmov.f32 S0,TOS 
 143 1e58 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 144 1e5c 10EE106A 	    vmov.f32 TOS,S0 
 145 1e60 B8E3     	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S>F ( s -- f )
 149              	    convert integer to float 
 150              	*******************************/
 151 1e62 4E1E0000 	    _HEADER STOF,3,"S>F" 
 151      03533E46 
 151      00BF
 152 1e6c 00EE106A 	    vmov.f32 S0,TOS
 153 1e70 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 154 1e74 10EE106A 	    vmov.f32 TOS,s0 
 155 1e78 ACE3     	   _NEXT 
 156              	
 157              	/*******************************
 158              	    F+ ( f1 f2 -- f1+f2 )
 159              	    add 2 floats 
 160              	*******************************/
 161 1e7a 661E0000 	    _HEADER FPLUS,2,"F+"
 161      02462B00 
 161      00BF
 162 1e84 00EE106A 	   vmov.f32 s0,TOS 
 163 1e88 57F8046B 	   _POP 
 164 1e8c 00EE906A 	   vmov.f32 s1,TOS 
 165 1e90 30EE200A 	   vadd.f32 s0,s0,s1 
 166 1e94 10EE106A 	   vmov.f32 TOS,s0
 167 1e98 9CE3     	   _NEXT 
 168              	
 169              	   
 170              	/*******************************
 171              	    F- ( f1 f2 -- f1-f2 )
 172              	    substract 2 float 
 173              	*******************************/
 174 1e9a 7E1E0000 	    _HEADER FMINUS,2,"F-"
 174      02462D00 
 174      00BF
 175 1ea4 00EE106A 	   vmov.f32 s0,TOS 
 176 1ea8 57F8046B 	   _POP 
 177 1eac 00EE906A 	   vmov.f32 s1,TOS 
 178 1eb0 30EEC00A 	   vsub.f32 s0,s1,s0 
 179 1eb4 10EE106A 	   vmov.f32 TOS,s0
 180 1eb8 8CE3     	   _NEXT 
 181              	
 182              	
 183              	
 184              	/*******************************
 185              	    F* ( f1 f2 -- f1*f2 )
 186              	    multiply 2 float 
 187              	******************************/
 188 1eba 9E1E0000 	   _HEADER FSTAR,2,"F*"
ARM GAS  forth.s 			page 81


 188      02462A00 
 188      00BF
 189 1ec4 00EE106A 	   vmov.f32 s0,TOS 
 190 1ec8 57F8046B 	   _POP 
 191 1ecc 00EE906A 	   vmov.f32 s1,TOS 
 192 1ed0 20EE800A 	   vmul.f32 s0,s1,s0 
 193 1ed4 10EE106A 	   vmov.f32 TOS,s0
 194 1ed8 7CE3     	   _NEXT 
 195              	
 196              	
 197              	/*******************************
 198              	    F/ ( f1 f2 -- f1/f2 )
 199              	    divide f1 by f2 
 200              	*******************************/
 201 1eda BE1E0000 	    _HEADER FSLH,2,"F/"
 201      02462F00 
 201      00BF
 202 1ee4 00EE106A 	   vmov.f32 s0,TOS 
 203 1ee8 57F8046B 	   _POP 
 204 1eec 00EE906A 	   vmov.f32 s1,TOS 
 205 1ef0 80EE800A 	   vdiv.f32 s0,s1,s0 
 206 1ef4 10EE106A 	   vmov.f32 TOS,s0
 207 1ef8 6CE3     	   _NEXT 
 208              	
 209              	
 210              	/********************************
 211              	    FNEGATE ( f -- -f )
 212              	    negate floating point 
 213              	********************************/
 214 1efa DE1E0000 	    _HEADER FNEG,7,"FNEGATE"
 214      07464E45 
 214      47415445 
 214      00BF
 215 1f08 00EE106A 	    vmov.f32 s0,TOS 
 216 1f0c B1EE400A 	    vneg.f32 S0,S0 
 217 1f10 10EE106A 	    vmov.f32 TOS,S0    
 218 1f14 5EE3     	    _NEXT 
 219              	
 220              	/**********************************
 221              	    FABS ( f -- f )
 222              	    return absolute value 
 223              	******************************/
 224 1f16 FE1E0000 	    _HEADER FABS,4,"FABS"
 224      04464142 
 224      5300
 225 1f20 00EE106A 	    vmov.f32 s0,TOS 
 226 1f24 B0EEC00A 	    vabs.f32 S0,S0 
 227 1f28 10EE106A 	    vmov.f32 TOS,S0    
 228 1f2c 52E3     	    _NEXT 
 229              	
 230              	
 231              	/*****************************
 232              	     SQRT  ( f -- f )
 233              	     compute square root 
 234              	*****************************/
 235 1f2e 1A1F0000 	     _HEADER SQRT,4,"SQRT"
 235      04535152 
ARM GAS  forth.s 			page 82


 235      5400
 236 1f38 00EE106A 	     vmov.f32 s0,TOS 
 237 1f3c B1EEC00A 	     vsqrt.f32 s0,s0 
 238 1f40 10EE106A 	     vmov.f32 TOS,s0 
 239 1f44 46E3     	     _NEXT 
 240              	
 241              	
 242              	/*****************************
 243              	   F0<   ( f -- flag )
 244              	*****************************/
 245 1f46 321F0000 	    _HEADER FZLESS,3,"F0<"
 245      0346303C 
 245      00BF
 246 1f50 00EE106A 	    vmov.f32 s0,TOS 
 247 1f54 B5EE400A 	    vcmp.f32 s0, #0.0 
 248 1f58 F1EE106A 	    vmrs TOS,FPSCR
 249 1f5c BFF34F8F 	    dsb  
 250 1f60 4FEAE676 	    asr TOS,#31   
 251 1f64 36E3     	    _NEXT 
 252              	
 253              	/*****************************
 254              	    F> ( f#1 f#2 -- flag )
 255              	    f#1>f#2 ? 
 256              	*****************************/
 257 1f66 4A1F0000 	    _HEADER FGREAT,2,"F>"
 257      02463E00 
 257      00BF
 258 1f70 504700BF 	    _NEST 
 259 1f74 A51E0000 	    _ADR FMINUS
 260 1f78 511F0000 	    _ADR FZLESS
 261 1f7c D52B0000 	    _ADR INVER     
 262 1f80 DB250000 	    _UNNEST 
 263              	
 264              	/*****************************
 265              	    F< ( f#1 f#2 -- flag )
 266              	    f#1<f#2 ? 
 267              	*****************************/
 268 1f84 6A1F0000 	    _HEADER FLESS,2,"F<"
 268      02463C00 
 269 1f8c 504700BF 	    _NEST 
 270 1f90 A51E0000 	    _ADR FMINUS 
 271 1f94 511F0000 	    _ADR FZLESS
 272 1f98 DB250000 	    _UNNEST 
 273              	
 274              	
 275              	/*******************************
 276              	    FMIN ( f#1 f#2 -- smallest )
 277              	********************************/
 278 1f9c 881F0000 	    _HEADER FMIN,4,"FMIN"
 278      04464D49 
 278      4E0000BF 
 279 1fa8 504700BF 	    _NEST 
 280 1fac 29290000 	   _ADR OVER 
 281 1fb0 29290000 	   _ADR OVER 
 282 1fb4 711F0000 	   _ADR FGREAT 
 283 1fb8 DB270000 	   _QBRAN 1f 
 283      C41F0000 
ARM GAS  forth.s 			page 83


 284 1fc0 15290000 	   _ADR SWAP  
 285 1fc4 F5280000 	1: _ADR DROP 
 286 1fc8 DB250000 	    _UNNEST 
 287              	
 288              	/*******************************
 289              	    FMAX (f#1 f#2 -- largest )
 290              	*******************************/
 291 1fcc A01F0000 	    _HEADER FMAX,4,"FMAX"
 291      04464D41 
 291      580000BF 
 292 1fd8 504700BF 	    _NEST 
 293 1fdc 29290000 	    _ADR OVER 
 294 1fe0 29290000 	    _ADR OVER 
 295 1fe4 8D1F0000 	    _ADR FLESS 
 296 1fe8 DB270000 	    _QBRAN 1f
 296      F41F0000 
 297 1ff0 15290000 	    _ADR SWAP   
 298 1ff4 F5280000 	1:  _ADR DROP 
 299 1ff8 DB250000 	    _UNNEST 
 300              	
 301              	
 302              	/*******************************
 303              	    PI  ( -- f )
 304              	    return 3.14159265
 305              	*******************************/
 306 1ffc D01F0000 	    _HEADER PI,2,"PI"
 306      02504900 
 307 2004 47F8046D 	    _PUSH 
 308 2008 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 308      C4F24906 
 309 2010 E0E2     	    _NEXT
 310              	 
 311              	
 312              	/*********************************
 313              	     float printing 
 314              	*********************************/
 315              	
 316              	/*********************************
 317              	    @EXPONENT ( f -- n )
 318              	    extract exponent from float 
 319              	********************************/
 320 2012 00200000 	    _HEADER AT_EXPONENT,9,"@EXPONENT"
 320      09404558 
 320      504F4E45 
 320      4E54
 321 2020 504700BF 	    _NEST 
 322 2024 9B270000 	    _DOLIT 23
 322      17000000 
 323 202c A1290000 	    _ADR RSHIFT 
 324 2030 9B270000 	    _DOLIT 255  
 324      FF000000 
 325 2038 49290000 	    _ADR ANDD 
 326 203c 9B270000 	    _DOLIT 127 
 326      7F000000 
 327 2044 D9290000 	    _ADR SUBB  
 328 2048 DB250000 	    _UNNEST 
 329              	
ARM GAS  forth.s 			page 84


 330              	/**************************************
 331              	    E. ( f -- )
 332              	    print float in scientific notation
 333              	***************************************
 334              	    _HEADER EDOT,2,"E."
 335              	    _NEST 
 336              	
 337              	    _UNNEST 
 338              	
 339              	frac_digit: 
 340              	    vmov.f32 s2,#ten 
 341              	    vmul.f32 s1,s0,s2 
 342              	
 343              	/********************************
 344              	    F. ( f -- )
 345              	    print float in fixed point 
 346              	*********************************/
 347 204c 16200000 	    _HEADER FDOT,2,"F."
 347      02462E00 
 348 2054 504700BF 	    _NEST 
 349 2058 05290000 	    _ADR DUPP 
 350 205c 511F0000 	    _ADR FZLESS 
 351 2060 DB270000 	    _QBRAN 1f 
 351      78200000 
 352 2068 9B270000 	    _DOLIT '-'
 352      2D000000 
 353 2070 A5260000 	    _ADR EMIT 
 354 2074 091F0000 	    _ADR FNEG
 355 2078 05290000 	1:  _ADR DUPP 
 356 207c 9B270000 	    _DOLIT plus1 
 356      0000803F 
 357 2084 8D1F0000 	    _ADR FLESS 
 358 2088 DB270000 	    _QBRAN 2f // float > 0 
 358      BC200000 
 359              	// float < 0 
 360 2090 9B270000 	    _DOLIT '0' 
 360      30000000 
 361 2098 A5260000 	    _ADR EMIT 
 362 209c 9B270000 	    _DOLIT '.' 
 362      2E000000 
 363 20a4 A5260000 	    _ADR EMIT 
 364 20a8 9B270000 	    _DOLIT 7 
 364      07000000 
 365 20b0 91280000 	    _ADR TOR
 366 20b4 9B270000 	    _DOLIT ten 
 366      00002041 
 367              	
 368              	1:      
 369              	
 370              	2: // float > 0         
 371 20bc DB250000 	    _UNNEST 
 372              	
 373              	
 374              	/********************************
 375              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 376              	    parse number, integer or float 
 377              	    if not a number return ( a 0 ) 
ARM GAS  forth.s 			page 85


 378              	    if integer return ( int -1 ) 
 379              	    if float return ( float -2 )
 380              	**********************************/
 381 20c0 50200000 	    _HEADER NUMBER,6,"NUMBER"
 381      064E554D 
 381      42455200 
 382 20cc 504700BF 	    _NEST 
 383 20d0 9D360000 	    _ADR INTQ
 384 20d4 D92A0000 	    _ADR QDUP 
 385 20d8 DB270000 	    _QBRAN 2f 
 385      E4200000 
 386 20e0 DB250000 	    _UNNEST 
 387 20e4 75240000 	2:  _ADR FLOATQ
 388 20e8 DB250000 	    _UNNEST 
 388      88ED00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/****************************************************************************************
  21              	  float number parser 
  22              	
  23              	  adapted from  following C code 
  24              	  ref: https://github.com/ochafik/LibCL/blob/master/src/main/resources/LibCL/strtof.c
  25              	
  26              	****************************************************************************************/
  27              	
  28              	/******************************************************
  29              	    powers of 10 used in parsing float numbers 
  30              	*******************************************************/    
  31              	
  32 20f0 00002041 	powersof10:  .word  0x41200000  // 10.0 
  33 20f4 0000C842 	             .word  0x42C80000  // 100.0
  34 20f8 00401C46 	             .word  0x461C4000  // 10000.0 
  35 20fc 20BCBE4C 	             .word  0x4CBEBC20  // 1.0e8
  36 2100 CA1B0E5A 	             .word  0x5A0E1BCA  // 1.0e16 
  37 2104 AEC59D74 	             .word  0x749DC5AE  // 1.0e32 
  38              	
  39              	fzero =  0x0
  40              	fone =  0x3F800000
  41              	fminus1 = 0xBF800000
  42              	ften = 0x41200000 
ARM GAS  forth.s 			page 86


  43              	
  44              	// check first char for '-'|'+' 
  45              	// update pointer if found 
  46              	get_sign: // ( a cnt -- a cnt 0 | a+ cnt- -1 )
  47 2108 504700BF 	    _NEST
  48 210c 29290000 	    _ADR OVER 
  49 2110 41280000 	    _ADR CAT 
  50 2114 05290000 	    _ADR DUPP 
  51 2118 9B270000 	    _DOLIT '-' 
  51      2D000000 
  52 2120 512C0000 	    _ADR EQUAL 
  53 2124 05290000 	    _ADR DUPP 
  54 2128 91280000 	    _ADR TOR 
  55 212c DB270000 	    _QBRAN 4f
  55      44210000 
  56 2134 F5280000 	    _ADR DROP  
  57 2138 51240000 	1:  _ADR padv  
  58 213c 4D280000 	2:  _ADR RFROM 
  59 2140 DB250000 	    _UNNEST 
  60 2144 9B270000 	4:  _DOLIT '+' 
  60      2B000000 
  61 214c 512C0000 	    _ADR EQUAL 
  62 2150 DB270000 	    _QBRAN 2b
  62      3C210000 
  63 2158 EF270000 	    _BRAN 1b 
  63      38210000 
  64              	
  65              	/*
  66              	// get mantissa size 
  67              	// m -> digits count in mantissa 
  68              	mant_size: // ( a cnt -- a+ cnt- m )
  69              	    _NEST 
  70              	    _DOLIT 0 
  71              	    _ADR NROT   // mantissa size   -- m a cnt 
  72              	// check for cnt==0     
  73              	1:  _ADR DUPP 
  74              	    _ADR ZEQUAL 
  75              	    _QBRAN 2f 
  76              	    _BRAN 4f  // end of string 
  77              	2:  _ADR OVER 
  78              	    _ADR CAT 
  79              	    _DOLIT 10
  80              	    _ADR DIGTQ // return u flag  
  81              	    _ADR SWAP 
  82              	    _ADR DROP  // don't keep u  
  83              	    _QBRAN 4f  // not a digit 
  84              	    _ADR ROT 
  85              	    _ADR ONEP 
  86              	    _ADR NROT 
  87              	    _ADR padv 
  88              	    _BRAN 1b
  89              	4:  _ADR ROT     
  90              	    _UNNEST 
  91              	*/
  92              	
  93              	// parse integer part 
  94              	parse_int: // ( a cnt -- a+ cnt- fi )
ARM GAS  forth.s 			page 87


  95 2160 504700BF 	    _NEST 
  96 2164 9B270000 	    _DOLIT 0
  96      00000000 
  97 216c 012B0000 	    _ADR NROT  // 0 a cnt
  98 2170 9B270000 	    _DOLIT 10 
  98      0A000000 
  99 2178 91280000 	    _ADR TOR  
 100              	1: // check for end fo string 
 101 217c 05290000 	    _ADR DUPP  // n a cnt cnt 
 102 2180 3D2C0000 	    _ADR ZEQUAL 
 103 2184 DB270000 	    _QBRAN 2f 
 103      94210000 
 104 218c EF270000 	    _BRAN 4f // end of string 
 104      DC210000 
 105              	2:   
 106 2194 29290000 	    _ADR OVER // n a cnt a 
 107 2198 41280000 	    _ADR CAT
 108 219c 7D280000 	    _ADR RAT  // n a cnt a 10 
 109 21a0 BD350000 	    _ADR DIGTQ 
 110 21a4 DB270000 	    _QBRAN 3f
 110      D8210000 
 111 21ac 91280000 	    _ADR TOR   
 112 21b0 ED2A0000 	    _ADR ROT
 113 21b4 4D280000 	    _ADR RFROM 
 114 21b8 15290000 	    _ADR SWAP   
 115 21bc 7D280000 	    _ADR RAT  
 116 21c0 E9290000 	    _ADR STAR 
 117 21c4 C9290000 	    _ADR PLUS 
 118 21c8 012B0000 	    _ADR NROT 
 119 21cc 51240000 	    _ADR padv 
 120 21d0 EF270000 	    _BRAN 1b 
 120      7C210000 
 121 21d8 F5280000 	3:  _ADR DROP 
 122 21dc ED2A0000 	4:  _ADR ROT
 123 21e0 6D1E0000 	    _ADR STOF
 124 21e4 4D280000 	    _ADR RFROM 
 125 21e8 F5280000 	    _ADR DROP  
 126 21ec DB250000 	    _UNNEST 
 127              	
 128              	
 129              	// parse fraction part 
 130              	parse_frac: // ( a cnt -- a+ cnt- ff ) 
 131 21f0 504700BF 	    _NEST 
 132 21f4 9B270000 	    _DOLIT fzero // a cnt 0.0   
 132      00000000 
 133 21fc 91280000 	    _ADR TOR     // a cnt R: 0.0 
 134 2200 9B270000 	    _DOLIT fone  // a cnt 1.0 R: 0.0 
 134      0000803F 
 135 2208 012B0000 	    _ADR NROT    // 1.0 a cnt R: 0.0  
 136              	1:  // check for end of string 
 137 220c 05290000 	    _ADR DUPP 
 138 2210 3D2C0000 	    _ADR ZEQUAL 
 139 2214 DB270000 	    _QBRAN 2f 
 139      24220000 
 140 221c EF270000 	    _BRAN 4f // end of string 
 140      8C220000 
 141 2224 29290000 	2:  _ADR OVER  // f a cnt 
ARM GAS  forth.s 			page 88


 142 2228 41280000 	    _ADR CAT   // f a cnt c 
 143 222c 9B270000 	    _DOLIT 10
 143      0A000000 
 144 2234 BD350000 	    _ADR DIGTQ 
 145 2238 DB270000 	    _QBRAN 3f  
 145      88220000 
 146 2240 6D1E0000 	    _ADR STOF // convert digit to float 
 147 2244 91280000 	    _ADR TOR  // div a cnt R: frac fdigit  
 148 2248 ED2A0000 	    _ADR ROT    
 149 224c 9B270000 	    _DOLIT ften 
 149      00002041 
 150 2254 C51E0000 	    _ADR FSTAR // a cnt 10*div   
 151 2258 05290000 	    _ADR DUPP  // a cnt 10*div 10*fdiv   
 152 225c 4D280000 	    _ADR RFROM  // a cnt 10*div fdigit 
 153 2260 15290000 	    _ADR SWAP  // a cnt 10*div fdigit 10*div 
 154 2264 E51E0000 	    _ADR FSLH  // a cnt 10*div fdigit/10*div R: frac 
 155 2268 4D280000 	    _ADR RFROM 
 156 226c 851E0000 	    _ADR FPLUS // a cnt 10*div frac  
 157 2270 91280000 	    _ADR TOR  
 158 2274 012B0000 	    _ADR NROT  // div a cnt R: frac 
 159 2278 51240000 	    _ADR padv
 160 227c 7D4B0000 	    _ADR DOTS   
 161 2280 EF270000 	    _BRAN 1b 
 161      0C220000 
 162 2288 F5280000 	3:  _ADR DROP 
 163 228c ED2A0000 	4:  _ADR ROT 
 164 2290 F5280000 	    _ADR DROP 
 165 2294 4D280000 	    _ADR RFROM 
 166 2298 DB250000 	    _UNNEST 
 167              	
 168              	// parse exponent part 
 169              	parse_exp: // ( a cnt -- a+ cnt- exp ) 
 170 229c 504700BF 	    _NEST
 171 22a0 09210000 	    _ADR get_sign
 172 22a4 91280000 	    _ADR TOR 
 173 22a8 9B270000 	    _DOLIT 0 
 173      00000000 
 174 22b0 012B0000 	    _ADR NROT 
 175              	1:  // check for end of string 
 176 22b4 05290000 	    _ADR DUPP 
 177 22b8 3D2C0000 	    _ADR ZEQUAL 
 178 22bc DB270000 	    _QBRAN 2f 
 178      CC220000 
 179 22c4 EF270000 	    _BRAN 4f // end of string 
 179      18230000 
 180 22cc 29290000 	2:  _ADR OVER 
 181 22d0 41280000 	    _ADR CAT 
 182 22d4 9B270000 	    _DOLIT 10
 182      0A000000 
 183 22dc BD350000 	    _ADR DIGTQ 
 184 22e0 DB270000 	    _QBRAN 3f  
 184      14230000 
 185 22e8 91280000 	    _ADR TOR 
 186 22ec ED2A0000 	    _ADR ROT 
 187 22f0 9B270000 	    _DOLIT 10 
 187      0A000000 
 188 22f8 E9290000 	    _ADR STAR
ARM GAS  forth.s 			page 89


 189 22fc 4D280000 	    _ADR RFROM 
 190 2300 C9290000 	    _ADR PLUS 
 191 2304 012B0000 	    _ADR NROT 
 192 2308 51240000 	    _ADR padv 
 193 230c EF270000 	    _BRAN 1f 
 193      CC230000 
 194 2314 F5280000 	3:  _ADR DROP 
 195 2318 ED2A0000 	4:  _ADR ROT 
 196 231c 4D280000 	    _ADR RFROM // sign 
 197 2320 DB270000 	    _QBRAN 5f 
 197      2C230000 
 198 2328 E92B0000 	    _ADR NEGAT 
 199 232c DB250000 	5:  _UNNEST 
 200              	
 201              	// fetch element from powersof10 array 
 202              	power10: // ( idx -- f )
 203 2330 504700BF 	    _NEST 
 204 2334 9B270000 	    _DOLIT 2 
 204      02000000 
 205 233c B9290000 	    _ADR LSHIFT 
 206 2340 9B270000 	    _DOLIT powersof10
 206      F0200000 
 207 2348 C9290000 	    _ADR PLUS 
 208 234c 21280000 	    _ADR AT 
 209 2350 DB250000 	    _UNNEST 
 210              	
 211              	
 212              	// check if exponent bit at idx position is 
 213              	// set or reset   
 214              	bit_state: // ( idx f e -- idx f bit )
 215 2354 504700BF 	    _NEST 
 216 2358 9B270000 	    _DOLIT 1  // idx f e 1
 216      01000000 
 217 2360 9B270000 	    _DOLIT 3  // idx f e 1 3 
 217      03000000 
 218 2368 49320000 	    _ADR PICK  // idx f e 1 idx 
 219 236c B9290000 	    _ADR LSHIFT // idx f e bit_mask 
 220 2370 49290000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
 221 2374 DB250000 	    _UNNEST 
 222              	
 223              	// exponent adjustment 
 224              	// multiply or divide mantissa by exponent  
 225              	// if exponant < 0 divide 
 226              	// if exponant >0 multiply 
 227              	// 8f exponant == 0 done 
 228              	mult_div_exp: // ( e f  -- f )
 229 2378 504700BF 	    _NEST 
 230 237c 29290000 	    _ADR OVER  // e f e 
 231 2380 DB270000 	    _QBRAN 4f // exp==0,  done 
 231      44240000 
 232 2388 9B270000 	    _DOLIT 0  // e f idx  
 232      00000000 
 233 2390 012B0000 	    _ADR NROT // idx e f
 234 2394 15290000 	    _ADR SWAP // idx f e   
 235 2398 05290000 	    _ADR DUPP  // idx f e e 
 236 239c 39290000 	    _ADR ZLESS
 237 23a0 DB270000 	    _QBRAN pos_exp 
ARM GAS  forth.s 			page 90


 237      F8230000 
 238              	// negative exponent 
 239 23a8 F92B0000 	    _ADR ABSS 
 240 23ac 91280000 	    _ADR TOR //  -- idx f R: e 
 241              	div_loop:
 242 23b0 7D280000 	    _ADR RAT   // idx f e R: e 
 243 23b4 55230000 	    _ADR bit_state // idx f state 
 244 23b8 DB270000 	    _QBRAN 1f   // bit reset 
 244      CC230000 
 245 23c0 29290000 	    _ADR OVER 
 246 23c4 31230000 	    _ADR power10 // idx f pwr10 R: e
 247 23c8 E51E0000 	    _ADR FSLH  // idx f R: e 
 248 23cc 15290000 	1:  _ADR SWAP  // f idx R: e 
 249 23d0 252A0000 	    _ADR ONEP   // F idx++ R: e 
 250 23d4 15290000 	    _ADR SWAP   // idx f  
 251 23d8 29290000 	    _ADR OVER   // idx f idx 
 252 23dc 9B270000 	    _DOLIT 5 
 252      05000000 
 253 23e4 D12C0000 	    _ADR GREAT  // idx > 5
 254 23e8 DB270000 	    _QBRAN div_loop 
 254      B0230000 
 255 23f0 EF270000 	    _BRAN 3f 
 255      3C240000 
 256              	pos_exp: // positive exponent 
 257 23f8 91280000 	    _ADR TOR // idx f  R: e 
 258              	mult_loop:
 259 23fc 7D280000 	    _ADR RAT   // idx f e R: e 
 260 2400 55230000 	    _ADR bit_state // idx f state 
 261 2404 DB270000 	    _QBRAN 1f   // bit reset 
 261      18240000 
 262 240c 29290000 	    _ADR OVER  
 263 2410 31230000 	    _ADR power10 // idx f pwr10 R: e
 264 2414 C51E0000 	    _ADR FSTAR  // idx f R: e 
 265 2418 15290000 	1:  _ADR SWAP  // f idx R: e 
 266 241c 252A0000 	    _ADR ONEP   // F idx++ R: e 
 267 2420 15290000 	    _ADR SWAP   // idx f  
 268 2424 29290000 	    _ADR OVER   // idx f idx 
 269 2428 9B270000 	    _DOLIT 5 
 269      05000000 
 270 2430 D12C0000 	    _ADR GREAT  // idx > 5
 271 2434 DB270000 	    _QBRAN mult_loop 
 271      FC230000 
 272              	// adjustment done 
 273 243c 4D280000 	3:  _ADR RFROM 
 274 2440 F5280000 	    _ADR DROP 
 275 2444 15290000 	4:  _ADR SWAP 
 276 2448 F5280000 	    _ADR DROP 
 277 244c DB250000 	    _UNNEST 
 278              	
 279              	// move pointer forward and decrement count 
 280              	padv: // ( a cnt -- a++ cnt-- )
 281 2450 504700BF 	    _NEST 
 282 2454 352A0000 	    _ADR ONEM 
 283 2458 15290000 	    _ADR SWAP 
 284 245c 252A0000 	    _ADR ONEP 
 285 2460 15290000 	    _ADR SWAP 
 286 2464 DB250000 	    _UNNEST 
ARM GAS  forth.s 			page 91


 287              	
 288              	
 289              	/**********************************
 290              	    FLOAT? ( a -- f# -2 | a 0 )
 291              	    parse float number 
 292              	    return a 0 if not float 
 293              	**********************************/
 294 2468 C4200000 	    _HEADER FLOATQ,6,"FLOAT?"
 294      06464C4F 
 294      41543F00 
 295 2474 504700BF 	    _NEST
 296              	    // always use base 10 
 297              	    // hexadecimal float not accepted 
 298 2478 F52D0000 	    _ADR BASE 
 299 247c 21280000 	    _ADR AT 
 300 2480 91280000 	    _ADR TOR 
 301 2484 9B270000 	    _DOLIT 10 
 301      0A000000 
 302 248c F52D0000 	    _ADR BASE 
 303 2490 0D280000 	    _ADR STORE
 304 2494 9B270000 		_DOLIT	0      // failed flag   
 304      00000000 
 305 249c 29290000 		_ADR	OVER   // a 0 a     R: base
 306 24a0 592D0000 		_ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 307              	// get sign and save it on R: 
 308 24a4 09210000 	    _ADR    get_sign 
 309 24a8 91280000 	    _ADR    TOR // -- a 0 a+ cnt R: base sign 
 310              	// check for end of string 
 311 24ac 05290000 	    _ADR    DUPP 
 312 24b0 3D2C0000 	    _ADR   ZEQUAL 
 313 24b4 DB270000 	    _QBRAN  int_part // a 0 a+ cnt f 
 313      C4240000 
 314 24bc EF270000 	    _BRAN  error1
 314      B0250000 
 315              	int_part: // parse integer part. 
 316 24c4 61210000 	    _ADR   parse_int // -- a 0 a+ cnt- fi R: base sign 
 317 24c8 7D4B0000 	_ADR DOTS 
 318 24cc 91280000 	    _ADR   TOR    // -- a 0 a+ cnt- R: base sign fi 
 319              	// check for end of string 
 320 24d0 05290000 	    _ADR   DUPP 
 321 24d4 3D2C0000 	    _ADR   ZEQUAL  
 322 24d8 DB270000 	    _QBRAN  dot_or_e 
 322      E8240000 
 323 24e0 EF270000 	    _BRAN  not_float  // if end of string it's not a float, missing '.' or 'E'.  
 323      A8250000 
 324              	dot_or_e: // next character must be '.' or 'E'   
 325 24e8 29290000 	    _ADR   OVER 
 326 24ec 41280000 	    _ADR   CAT 
 327 24f0 05290000 	    _ADR   DUPP 
 328 24f4 9B270000 	    _DOLIT '.' 
 328      2E000000 
 329 24fc 512C0000 	    _ADR  EQUAL 
 330 2500 DB270000 	    _QBRAN test_E // not '.' 
 330      3C250000 
 331              	// skip decimal point 
 332 2508 F5280000 	    _ADR  DROP // drop character  
 333 250c 51240000 	    _ADR  padv  
ARM GAS  forth.s 			page 92


 334 2510 F1210000 	    _ADR  parse_frac
 335 2514 7D4B0000 	    _ADR  DOTS 
 336 2518 4D280000 	    _ADR  RFROM 
 337 251c 851E0000 	    _ADR  FPLUS // int_part+frac_part  
 338 2520 91280000 	    _ADR  TOR 
 339              	// check of end of string     
 340 2524 05290000 	    _ADR  DUPP  // a 0 a+ cnt- cnt-  
 341 2528 3D2C0000 	    _ADR  ZEQUAL 
 342 252c DB270000 	    _QBRAN test_E  // next char must be 'E' 
 342      3C250000 
 343              	// end of float 
 344 2534 EF270000 	    _BRAN is_float 
 344      74250000 
 345              	test_E: 
 346 253c 9B270000 	    _DOLIT 'E' 
 346      45000000 
 347 2544 512C0000 	    _ADR  EQUAL 
 348 2548 DB270000 	    _QBRAN not_float  
 348      A8250000 
 349 2550 51240000 	    _ADR padv 
 350 2554 9D220000 	    _ADR parse_exp
 351 2558 91280000 	    _ADR TOR 
 352 255c 05290000 	    _ADR DUPP 
 353 2560 512C0000 	    _ADR EQUAL 
 354 2564 DB270000 	    _QBRAN not_float // character left in string. 
 354      A8250000 
 355 256c 4D280000 	    _ADR RFROM  
 356              	exp_to_bin: // convert decimal exponent to binary exponent  
 357 2570 79230000 	    _ADR mult_div_exp 
 358              	is_float: // a 0 a+ cnt- R: base float  
 359 2574 152B0000 	    _ADR DDROP 
 360 2578 152B0000 	    _ADR DDROP 
 361 257c 4D280000 	    _ADR RFROM  // float  
 362 2580 4D280000 	    _ADR RFROM // sign 
 363 2584 DB270000 	    _QBRAN 1f
 363      98250000 
 364 258c 9B270000 	    _DOLIT fminus1  
 364      000080BF 
 365 2594 C51E0000 	    _ADR FSTAR 
 366 2598 9B270000 	1:  _DOLIT 2  // flag indicating a float 
 366      02000000 
 367 25a0 EF270000 	    _BRAN restore_base 
 367      BC250000 
 368              	not_float: // a 0 a+ cnt- R: base sign float 
 369 25a8 4D280000 	    _ADR RFROM 
 370 25ac F5280000 	    _ADR DROP  
 371              	error1:
 372 25b0 4D280000 	    _ADR RFROM 
 373 25b4 F5280000 	    _ADR DROP 
 374 25b8 152B0000 	    _ADR DDROP 
 375              	restore_base: 
 376 25bc 4D280000 	    _ADR RFROM 
 377 25c0 F52D0000 	    _ADR BASE 
 378 25c4 0D280000 	    _ADR STORE 
 379 25c8 DB250000 	    _UNNEST 
 380              	
   1              	/**************************************************************************
ARM GAS  forth.s 			page 93


   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
ARM GAS  forth.s 			page 94


  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 25cc 48F804CD 		STMFD	RSP!,{IP}
  85 25d0 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 25d4 5CF8045B 		LDR WP,[IP],#4 
  89 25d8 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 25da 58F804CB 		LDMFD RSP!,{IP}
  92 25de 5CF8045B 		LDR WP,[IP],#4 
  93 25e2 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 25e4 04F14401 		add T1,UP,#USER_CTOP 
 105 25e8 0968     		ldr T1,[T1]
 106 25ea 44F25072 		mov T2,#0x4700+(10<<3)
 107 25ee 21F8022B 		strh T2,[T1],#2
 108 25f2 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 25f6 21F8022B 		strh T2,[T1],#2 
 110 25fa 04F14402 		add T2,UP,#USER_CTOP 
 111 25fe 1160     		str T1,[T2]
 112 2600 E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
ARM GAS  forth.s 			page 95


 116              	TSTDIN:
 117 2602 47F8046D 		_PUSH 
 118 2606 04F11406 		ADD TOS,UP,#STDIN 
 119 260a E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 260c 47F8046D 		_PUSH 
 125 2610 04F11806 		ADD TOS,UP,#STDOUT
 126 2614 DEE7     		_NEXT 
 127              	
 128              	/***************************
 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2616 6C240000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2624 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 262c 47F8046D 	    _PUSH 
 135 2630 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2632 81EA0101 	    eor T1,T1 
 137 2636 8162     	    str T1,[T0,#SCB_CFSR]
 138 2638 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 263a 1A260000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2648 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2650 47F8046D 		_PUSH 
 147 2654 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2656 81EA0101 	    eor T1,T1 
 149 265a 8163     	    str T1,[T0,#SCB_BFAR]
 150 265c BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 265e 3E260000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 2668 504700BF 		_NEST 
 158 266c 03260000 		_ADR TSTDIN // ' STDIN 
 159 2670 C1320000 		_ADR ATEXE
 160 2674 DB250000 		_UNNEST 
 161              	
 162              	/********************************************
ARM GAS  forth.s 			page 96


 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2678 62260000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2680 504700BF 		_NEST
 168              	KEY1:
 169 2684 D1180000 		_ADR CAPS_LED 
 170 2688 69260000 		_ADR	QKEY 
 171 268c DB270000 		_QBRAN	KEY1
 171      84260000 
 172 2694 DB250000 		_UNNEST
 173              	
 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2698 7C260000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 26a4 504700BF 		_NEST 
 180 26a8 0D260000 		_ADR TSTDOUT 
 181 26ac C1320000 		_ADR ATEXE 
 182 26b0 DB250000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 26b4 9C260000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
ARM GAS  forth.s 			page 97


 214      444F4D00 
 215 26c0 504700BF 		_NEST
 216 26c4 F92B0000 		_ADR ABSS   
 217 26c8 A12D0000 		_ADR SEED 
 218 26cc 21280000 		_ADR AT 
 219 26d0 05290000 		_ADR DUPP 
 220 26d4 9B270000 		_DOLIT 13
 220      0D000000 
 221 26dc B9290000 		_ADR LSHIFT 
 222 26e0 71290000 		_ADR XORR  
 223 26e4 05290000 		_ADR DUPP 
 224 26e8 9B270000 		_DOLIT 17 
 224      11000000 
 225 26f0 A1290000 		_ADR RSHIFT 
 226 26f4 71290000 		_ADR XORR 
 227 26f8 05290000 		_ADR DUPP
 228 26fc 9B270000 		_DOLIT 5 
 228      05000000 
 229 2704 B9290000 		_ADR LSHIFT 
 230 2708 71290000 		_ADR XORR  
 231 270c 05290000 		_ADR DUPP 
 232 2710 A12D0000 		_ADR SEED 
 233 2714 0D280000 		_ADR STORE 
 234 2718 9B270000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2720 49290000 		_ADR ANDD 
 236 2724 15290000 		_ADR SWAP 
 237 2728 45310000 		_ADR MODD 
 238 272c DB250000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2730 B8260000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 273c 504700BF 		_NEST 
 247 2740 C92D0000 		_ADR TIMER 
 248 2744 0D280000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2748 C92D0000 		_ADR TIMER 
 251 274c 21280000 		_ADR AT 
 252 2750 DB270000 		_QBRAN PAUSE_EXIT 
 252      60270000 
 253 2758 EF270000 		_BRAN PAUSE_LOOP 
 253      48270000 
 254              	PAUSE_EXIT: 		
 255 2760 DB250000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2764 34270000 		_HEADER ULED,4,"ULED"
 261      04554C45 
ARM GAS  forth.s 			page 98


 261      440000BF 
 262 2770 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2774 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 277c 3600     		movs TOS,TOS 
 265 277e 57F8046B 		_POP
 266 2782 03D0     		beq ULED_OFF
 267 2784 4FEA0040 		lsl T0,#16 
 268 2788 8861     		str T0,[T1,#GPIO_BSRR]
 269 278a 23E7     		_NEXT 
 270              	ULED_OFF:
 271 278c 8861     		str T0,[T1,#GPIO_BSRR]
 272 278e 21E7     		_NEXT    
 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 2790 68270000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 2798 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 279a 47F8046D 		_PUSH				//  store TOS on data stack
 294 279e 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 27a2 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 27a4 94270000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 27b0 46F00105 		ORR	WP,TOS,#1 
 303 27b4 57F8046B 		_POP
 304 27b8 2847     		BX WP 
 305 27ba 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
ARM GAS  forth.s 			page 99


 314              	DONXT:
 315 27bc D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 27c0 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 27c2 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 27c6 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 27ca 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 27cc A2F10102 		SUB	T2,T2,#1
 324 27d0 C8F80020 		STR	T2,[RSP]
 325 27d4 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 27d8 FCE6     		_NEXT 
 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 27da 3600     		MOVS	TOS,TOS
 335 27dc 57F8046B 		_POP
 336 27e0 02D1     		BNE	QBRAN1
 337 27e2 DCF800C0 		LDR	IP,[IP]
 338 27e6 F5E6     		_NEXT
 339              	QBRAN1:
 340 27e8 0CF1040C 	 	ADD	IP,IP,#4
 341 27ec F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 27ee DCF800C0 		LDR	IP,[IP]
 350 27f2 EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 27f4 A8270000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 2800 DB250000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 2804 F8270000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 280c 57F8045B 		LDR	WP,[DSP],#4
 365 2810 3560     		STR	WP,[TOS]
 366 2812 57F8046B 		_POP
 367 2816 DDE6     		_NEXT 
ARM GAS  forth.s 			page 100


 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2818 08280000 		_HEADER AT,1,"@"
 373      014000BF 
 374 2820 3668     		LDR	TOS,[TOS]
 375 2822 D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
 380              	*******************************************/
 381 2824 1C280000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 282c 57F8045B 		LDR	WP,[DSP],#4
 383 2830 3570     		STRB WP,[TOS]
 384 2832 57F8046B 		_POP
 385 2836 CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2838 28280000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 2840 3678     		LDRB	TOS,[TOS]
 393 2842 C7E6     		_NEXT 
 394              	
 395              	/*********************************************
 396              	    R>	  ( -- w  R: w -- ) 
 397              	 	push from rstack.
 398              	**********************************************/
 399 2844 3C280000 		_HEADER RFROM,2,"R>"
 399      02523E00 
 400 284c 47F8046D 		_PUSH
 401 2850 58F8046B 		LDR	TOS,[RSP],#4
 402 2854 BEE6     		_NEXT 
 403              	
 404              	/***********************************************
 405              		2R> (  -- D ) R: D --  
 406              	    push a double from rstack 
 407              	***********************************************/
 408 2856 48280000 		_HEADER DRFROM,3,"2R>"
 408      0332523E 
 408      00BF
 409 2860 47F8046D 		_PUSH 
 410 2864 58F8046B 		LDR TOS,[RSP],#4 
 411 2868 47F8046D 		_PUSH 
 412 286c 58F8046B 		LDR TOS,[RSP],#4
 413 2870 B0E6     		_NEXT 
 414              	
 415              	/************************************************
 416              	    R@	  ( -- w )
 417              	 	Copy top of return stack to the data stack.
 418              	************************************************/
ARM GAS  forth.s 			page 101


 419 2872 5A280000 		_HEADER RAT,2,"R@"
 419      02524000 
 419      00BF
 420 287c 47F8046D 		_PUSH
 421 2880 D8F80060 		LDR	TOS,[RSP]
 422 2884 A6E6     		_NEXT 
 423              	
 424              	/***********************************************
 425              	    >R	  ( w -- ) R: -- w 
 426              	 	pop to rstack.
 427              	************************************************/
 428 2886 76280000 		_HEADER TOR,2,">R"
 428      023E5200 
 428      00BF
 429 2890 48F8046D 		STR	TOS,[RSP,#-4]!
 430 2894 57F8046B 		_POP
 431 2898 9CE6     		_NEXT
 432              	
 433              	/*********************************************
 434              		2>R ( d -- ) R: -- d 
 435              		pop a double to rstack 
 436              	*********************************************/
 437 289a 8A280000 		_HEADER DTOR,3,"2>R"
 437      03323E52 
 437      00BF
 438 28a4 48F8046D 		STR TOS,[RSP,#-4]!
 439 28a8 57F8046B 	    _POP 
 440 28ac 48F8046D 		STR TOS,[RSP,#-4]!
 441 28b0 57F8046B 		_POP  
 442 28b4 8EE6     		_NEXT 	
 443              	
 444              	
 445              	/*******************************
 446              	//	RP! ( u -- )
 447              	// initialize RPP with u 
 448              	*******************************/
 449 28b6 9E280000 		_HEADER RPSTOR,3,"RP!"
 449      03525021 
 449      00BF
 450 28c0 B046     		MOV RSP,TOS 
 451 28c2 57F8046B 		_POP  
 452 28c6 85E6     		_NEXT 
 453              	
 454              	/********************************
 455              		SP! ( u -- )
 456              	 initialize SPP with u 
 457              	********************************/
 458 28c8 BA280000 		_HEADER SPSTOR,3,"SP!"
 458      03535021 
 459 28d0 3746     		MOV DSP,TOS 
 460 28d2 86EA0606 		EOR TOS,TOS,TOS 
 461 28d6 7DE6     		_NEXT 
 462              	
 463              	/**************************************
 464              	    SP@	 ( -- a )
 465              	 	Push the current data stack pointer.
 466              	***************************************/
ARM GAS  forth.s 			page 102


 467 28d8 CC280000 		_HEADER SPAT,3,"SP@"
 467      03535040 
 468 28e0 47F8046D 		_PUSH
 469 28e4 3E46     		MOV	TOS,DSP
 470 28e6 75E6     		_NEXT
 471              	
 472              	/********************************
 473              	    DROP	( w -- )
 474              	 	Discard top stack item.
 475              	********************************/
 476 28e8 DC280000 		_HEADER DROP,4,"DROP"
 476      0444524F 
 476      500000BF 
 477 28f4 57F8046B 		_POP
 478 28f8 6CE6     		_NEXT 
 479              	
 480              	/*********************************
 481              	    DUP	 ( w -- w w )
 482              	 	Duplicate the top stack item.
 483              	*********************************/
 484 28fa EC280000 		_HEADER DUPP,3,"DUP"
 484      03445550 
 484      00BF
 485 2904 47F8046D 		_PUSH
 486 2908 64E6     		_NEXT 
 487              	
 488              	/**********************************
 489              	    SWAP	( w1 w2 -- w2 w1 )
 490              	 	Exchange top two stack items.
 491              	**********************************/
 492 290a FE280000 		_HEADER SWAP,4,"SWAP"
 492      04535741 
 492      5000
 493 2914 3D68     		LDR	WP,[DSP]
 494 2916 3E60     		STR	TOS,[DSP]
 495 2918 2E46     		MOV	TOS,WP
 496 291a 5BE6     		_NEXT 
 497              	
 498              	/***********************************
 499              	    OVER	( w1 w2 -- w1 w2 w1 )
 500              	 	Copy second stack item to top.
 501              	***********************************/
 502 291c 0E290000 		_HEADER OVER,4,"OVER"
 502      044F5645 
 502      520000BF 
 503 2928 47F8046D 		_PUSH
 504 292c 7E68     		LDR	TOS,[DSP,#4]
 505 292e 51E6     		_NEXT 
 506              	
 507              	/***********************************
 508              	    0<	  ( n -- t )
 509              	 	Return true if n is negative.
 510              	***********************************/
 511 2930 20290000 		_HEADER ZLESS,2,"0<"
 511      02303C00 
 512 2938 4FEAE676 		ASR TOS,#31
 513 293c 4AE6     		_NEXT 
ARM GAS  forth.s 			page 103


 514              	
 515              	/********************************
 516              	    AND	 ( w w -- w )
 517              	 	Bitwise AND.
 518              	********************************/
 519 293e 34290000 		_HEADER ANDD,3,"AND"
 519      03414E44 
 519      00BF
 520 2948 57F8045B 		LDR	WP,[DSP],#4
 521 294c 06EA0506 		AND	TOS,TOS,WP
 522 2950 40E6     		_NEXT 
 523              	
 524              	/******************************
 525              	    OR	  ( w w -- w )
 526              	 	Bitwise inclusive OR.
 527              	******************************/
 528 2952 42290000 		_HEADER ORR,2,"OR"
 528      024F5200 
 528      00BF
 529 295c 57F8045B 		LDR	WP,[DSP],#4
 530 2960 46EA0506 		ORR	TOS,TOS,WP
 531 2964 36E6     		_NEXT 
 532              	
 533              	/*****************************
 534              	    XOR	 ( w w -- w )
 535              	 	Bitwise exclusive OR.
 536              	*****************************/
 537 2966 56290000 		_HEADER XORR,3,"XOR"
 537      03584F52 
 537      00BF
 538 2970 57F8045B 		LDR	WP,[DSP],#4
 539 2974 86EA0506 		EOR	TOS,TOS,WP
 540 2978 2CE6     		_NEXT 
 541              	
 542              	/**************************************************
 543              	    UM+	 ( w w -- w cy )
 544              	 	Add two numbers, return the sum and carry flag.
 545              	***************************************************/
 546 297a 6A290000 		_HEADER UPLUS,3,"UM+"
 546      03554D2B 
 546      00BF
 547 2984 3D68     		LDR	WP,[DSP]
 548 2986 AD19     		ADDS	WP,WP,TOS
 549 2988 4FF00006 		MOV	TOS,#0
 550 298c 46F10006 		ADC	TOS,TOS,#0
 551 2990 3D60     		STR	WP,[DSP]
 552 2992 1FE6     		_NEXT 
 553              	
 554              	/*********************************
 555              	    RSHIFT	 ( w # -- w )
 556              	 	arithmetic Right shift # bits.
 557              	**********************************/
 558 2994 7E290000 		_HEADER RSHIFT,6,"RSHIFT"
 558      06525348 
 558      49465400 
 559 29a0 57F8045B 		LDR	WP,[DSP],#4
 560 29a4 45FA06F6 		MOV	TOS,WP,ASR TOS
ARM GAS  forth.s 			page 104


 561 29a8 14E6     		_NEXT 
 562              	
 563              	/****************************
 564              	    LSHIFT	 ( w # -- w )
 565              	 	Right shift # bits.
 566              	****************************/
 567 29aa 98290000 		_HEADER LSHIFT,6,"LSHIFT"
 567      064C5348 
 567      49465400 
 567      00BF
 568 29b8 57F8045B 		LDR	WP,[DSP],#4
 569 29bc 05FA06F6 		MOV	TOS,WP,LSL TOS
 570 29c0 08E6     		_NEXT
 571              	
 572              	/*************************
 573              	    +	 ( w w -- w )
 574              	 	Add.
 575              	*************************/
 576 29c2 AE290000 		_HEADER PLUS,1,"+"
 576      012B
 577 29c8 57F8045B 		LDR	WP,[DSP],#4
 578 29cc 2E44     		ADD	TOS,TOS,WP
 579 29ce 01E6     		_NEXT 
 580              	
 581              	/************************
 582              	    -	 ( w w -- w )
 583              	 	Subtract.
 584              	************************/
 585 29d0 C6290000 		_HEADER SUBB,1,"-"
 585      012D00BF 
 586 29d8 57F8045B 		LDR	WP,[DSP],#4
 587 29dc C6EB0506 		RSB	TOS,TOS,WP
 588 29e0 F8E5     		_NEXT 
 589              	
 590              	/************************
 591              	    *	 ( w w -- w )
 592              	 	Multiply.
 593              	***********************/
 594 29e2 D4290000 		_HEADER STAR,1,"*"
 594      012A
 595 29e8 57F8045B 		LDR	WP,[DSP],#4
 596 29ec 05FB06F6 		MUL	TOS,WP,TOS
 597 29f0 F0E5     		_NEXT 
 598              	
 599              	/***************************
 600              	    UM*	 ( w w -- ud )
 601              	 	Unsigned multiply.
 602              	****************************/
 603 29f2 E6290000 		_HEADER UMSTA,3,"UM*"
 603      03554D2A 
 603      00BF
 604 29fc 3D68     		LDR	WP,[DSP]
 605 29fe A6FB0523 		UMULL	T2,T3,TOS,WP
 606 2a02 3A60     		STR	T2,[DSP]
 607 2a04 1E46     		MOV	TOS,T3
 608 2a06 E5E5     		_NEXT 
 609              	
ARM GAS  forth.s 			page 105


 610              	/***************************
 611              	    M*	 ( w w -- d )
 612              	 	signed multiply.
 613              		hold double result
 614              	***************************/
 615 2a08 F6290000 		_HEADER MSTAR,2,"M*"
 615      024D2A00 
 616 2a10 3D68     		LDR	WP,[DSP]
 617 2a12 86FB0523 		SMULL	T2,T3,TOS,WP
 618 2a16 3A60     		STR	T2,[DSP]
 619 2a18 1E46     		MOV	TOS,T3
 620 2a1a DBE5     		_NEXT 
 621              	
 622              	/***************************
 623              	    1+	 ( w -- w+1 )
 624              	 	Add 1.
 625              	***************************/
 626 2a1c 0C2A0000 		_HEADER ONEP,2,"1+"
 626      02312B00 
 627 2a24 06F10106 		ADD	TOS,TOS,#1
 628 2a28 D4E5     		_NEXT 
 629              	
 630              	/***************************
 631              	    1-	 ( w -- w-1 )
 632              	 	Subtract 1.
 633              	***************************/
 634 2a2a 202A0000 		_HEADER ONEM,2,"1-"
 634      02312D00 
 634      00BF
 635 2a34 A6F10106 		SUB	TOS,TOS,#1
 636 2a38 CCE5     		_NEXT 
 637              	
 638              	/***************************
 639              	    2+	 ( w -- w+2 )
 640              	 	Add 2.
 641              	**************************/
 642 2a3a 2E2A0000 		_HEADER TWOP,2,"2+"
 642      02322B00 
 642      00BF
 643 2a44 06F10206 		ADD	TOS,TOS,#2
 644 2a48 C4E5     		_NEXT
 645              	
 646              	/**************************
 647              	    2-	 ( w -- w-2 )
 648              	 	Subtract 2.
 649              	**************************/
 650 2a4a 3E2A0000 		_HEADER TWOM,2,"2-"
 650      02322D00 
 650      00BF
 651 2a54 A6F10206 		SUB	TOS,TOS,#2
 652 2a58 BCE5     		_NEXT
 653              	
 654              	/***************************
 655              	    CELL+	( w -- w+4 )
 656              	 	Add CELLL.
 657              	***************************/
 658 2a5a 4E2A0000 		_HEADER CELLP,5,"CELL+"
ARM GAS  forth.s 			page 106


 658      0543454C 
 658      4C2B
 659 2a64 06F10406 		ADD	TOS,TOS,#CELLL
 660 2a68 B4E5     		_NEXT
 661              	
 662              	/***************************
 663              	    CELL-	( w -- w-4 )
 664              	 	Subtract CELLL.
 665              	**************************/
 666 2a6a 5E2A0000 		_HEADER CELLM,5,"CELL-"
 666      0543454C 
 666      4C2D
 667 2a74 A6F10406 		SUB	TOS,TOS,#CELLL
 668 2a78 ACE5     		_NEXT
 669              	
 670              	/**************************** 
 671              	    BL	( -- 32 )
 672              	 	Blank (ASCII space).
 673              	*****************************/
 674 2a7a 6E2A0000 		_HEADER BLANK,2,"BL"
 674      02424C00 
 674      00BF
 675 2a84 47F8046D 		_PUSH
 676 2a88 4FF02006 		MOV	TOS,#32
 677 2a8c A2E5     		_NEXT 
 678              	
 679              	/**************************
 680              	    CELLS	( w -- w*4 )
 681              	 	Multiply CELLL 
 682              	***************************/
 683 2a8e 7E2A0000 		_HEADER CELLS,5,"CELLS"
 683      0543454C 
 683      4C53
 684 2a98 4FEA8606 		LSL TOS,#2
 685 2a9c 9AE5     		_NEXT
 686              	
 687              	/***************************
 688              	    CELL/	( w -- w/4 )
 689              	 	Divide by CELLL.
 690              	***************************/
 691 2a9e 922A0000 		_HEADER CELLSL,5,"CELL/"
 691      0543454C 
 691      4C2F
 692 2aa8 4FEAA606 		ASR TOS,#2
 693 2aac 92E5     		_NEXT
 694              	
 695              	/*************************
 696              	    2*	( w -- w*2 )
 697              	 	Multiply 2.
 698              	*************************/
 699 2aae A22A0000 		_HEADER TWOST,2,"2*"
 699      02322A00 
 699      00BF
 700 2ab8 4FEA4606 		MOV	TOS,TOS,LSL#1
 701 2abc 8AE5     		_NEXT
 702              	
 703              	/*************************
ARM GAS  forth.s 			page 107


 704              	    2/	( w -- w/2 )
 705              	 	Divide by 2.
 706              	***********************/
 707 2abe B22A0000 		_HEADER TWOSL,2,"2/"
 707      02322F00 
 707      00BF
 708 2ac8 4FEA6606 		MOV	TOS,TOS,ASR#1
 709 2acc 82E5     		_NEXT
 710              	
 711              	/****************************
 712              	    ?DUP	( w -- w w | 0 )
 713              	 	Conditional duplicate.
 714              	*****************************/
 715 2ace C22A0000 		_HEADER QDUP,4,"?DUP"
 715      043F4455 
 715      5000
 716 2ad8 3500     		MOVS	WP,TOS
 717 2ada 18BF     		IT NE 
 718 2adc 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 719 2ae0 78E5     		_NEXT
 720              	
 721              	/***********************************
 722              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 723              	 	Rotate top 3 items.
 724              	*************************************/
 725 2ae2 D22A0000 		_HEADER ROT,3,"ROT"
 725      03524F54 
 725      00BF
 726 2aec 3868     		LDR	T0,[DSP]  // w2 
 727 2aee 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 728 2af0 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 729 2af2 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 730 2af4 6EE5     		_NEXT
 731              	
 732              	/*********************************
 733              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 734              	 left rotate top 3 elements 
 735              	********************************/
 736 2af6 E62A0000 		_HEADER NROT,4,"-ROT"
 736      042D524F 
 736      5400
 737 2b00 7868     		LDR T0,[DSP,#4]
 738 2b02 7E60     		STR TOS,[DSP,#4]	
 739 2b04 3E68     		LDR TOS,[DSP]
 740 2b06 3860     		STR T0,[DSP]
 741 2b08 64E5     		_NEXT 
 742              	
 743              	/*********************************
 744              	    2DROP	( w1 w2 -- )
 745              	 	Drop top 2 items.
 746              	*********************************/
 747 2b0a FA2A0000 		_HEADER DDROP,5,"2DROP"
 747      05324452 
 747      4F50
 748 2b14 57F8046B 		_POP
 749 2b18 57F8046B 		_POP
 750 2b1c 5AE5     		_NEXT 
ARM GAS  forth.s 			page 108


 751              	
 752              	/********************************
 753              		3DROP ( w1 w2 w3 -- )
 754              		drop top 3 items 
 755              	********************************/
 756 2b1e 0E2B0000 		_HEADER TDROP,5,"3DROP"
 756      05334452 
 756      4F50
 757 2b28 07F10807 	    add DSP,#8 
 758 2b2c 57F8046B 	    _POP 
 759 2b30 50E5     	    _NEXT 
 760              	
 761              	/***********************************
 762              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 763              	 	Duplicate top 2 items.
 764              	************************************/
 765 2b32 222B0000 		_HEADER DDUP,4,"2DUP"
 765      04324455 
 765      5000
 766 2b3c 3868     		LDR	T0,[DSP] // w1
 767 2b3e 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 768 2b42 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 769 2b46 45E5     		_NEXT
 770              	
 771              	/******************************
 772              	    D+	( d1 d2 -- d3 )
 773              	 	Add top 2 double numbers.
 774              	******************************/
 775 2b48 362B0000 		_HEADER DPLUS,2,"D+"
 775      02442B00 
 776 2b50 57F8045B 		LDR	WP,[DSP],#4
 777 2b54 57F8042B 		LDR	T2,[DSP],#4
 778 2b58 3B68     		LDR	T3,[DSP]
 779 2b5a ED18     		ADDS	WP,WP,T3
 780 2b5c 3D60     		STR	WP,[DSP]
 781 2b5e 46EB0206 		ADC	TOS,TOS,T2
 782 2b62 37E5     		_NEXT
 783              	
 784              	/******************************
 785              		DABS ( d -- ud )
 786              		absolute value double 
 787              	*****************************/
 788 2b64 4C2B0000 		_HEADER DABS,4,"DABS"
 788      04444142 
 788      530000BF 
 789 2b70 16F0004F 		tst TOS,#(1<<31)
 790 2b74 09D0     		beq 9f 
 791 2b76 6FEA0606 		mvn TOS,TOS 
 792 2b7a 3D68     		ldr WP,[DSP]
 793 2b7c 6FEA0505 		mvn WP,WP 
 794 2b80 0135     		adds WP,#1
 795 2b82 3D60     		str WP,[DSP]
 796 2b84 01D3     		bcc 9f 
 797 2b86 06F10106 		add TOS,#1 
 798 2b8a 23E5     	9:	_NEXT 
 799              	
 800              	/*****************************
ARM GAS  forth.s 			page 109


 801              	  UD> ( d1 d2 -- f )
 802              	  unsigned compare double d1 > d2 
 803              	******************************/
 804 2b8c 682B0000 		_HEADER UDGREAT,3,"UD>"
 804      0355443E 
 805 2b94 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 806 2b98 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 807 2b9a B042     		cmp T0,TOS 
 808 2b9c 02D8     		bhi 1f
 809 2b9e 04D4     		bmi 2f  
 810 2ba0 A942     		cmp T1,WP 
 811 2ba2 02D9     		bls 2f 
 812 2ba4 4FF0FF36 	1:	mov TOS,#-1 
 813 2ba8 14E5     		_NEXT 
 814 2baa 4FF00006 	2:  mov TOS,#0 
 815 2bae 11E5     		_NEXT 
 816              	
 817              	/******************************
 818              		D0= ( d -- f )
 819              		double 0= 
 820              	*****************************/
 821 2bb0 902B0000 		_HEADER DZEQUAL,3,"D0="
 821      0344303D 
 822 2bb8 3046     		mov T0,TOS
 823 2bba 57F8046B 		_POP 
 824 2bbe 46EA0006 		orr TOS,T0 
 825 2bc2 01D0     		beq 9f
 826 2bc4 6FF00006 		mvn TOS,#0 
 827 2bc8 04E5     	9:	_NEXT 
 828              	
 829              	/*****************************
 830              	    NOT	 ( w -- !w )
 831              	 	1"s complement.
 832              	*****************************/
 833 2bca B42B0000 		_HEADER INVER,3,"NOT"
 833      034E4F54 
 833      00BF
 834 2bd4 6FEA0606 		MVN	TOS,TOS
 835 2bd8 FCE4     		_NEXT
 836              	
 837              	/*****************************
 838              	    NEGATE	( w -- -w )
 839              	 	2's complement.
 840              	***************************/
 841 2bda CE2B0000 		_HEADER NEGAT,6,"NEGATE"
 841      064E4547 
 841      41544500 
 841      00BF
 842 2be8 C6F10006 		RSB	TOS,TOS,#0
 843 2bec F2E4     		_NEXT
 844              	
 845              	/***************************
 846              	    ABS	 ( w -- |w| )
 847              	 	Absolute.
 848              	**************************/
 849 2bee DE2B0000 		_HEADER ABSS,3,"ABS"
 849      03414253 
ARM GAS  forth.s 			page 110


 849      00BF
 850 2bf8 16F0004F 		TST	TOS,#0x80000000
 851 2bfc 18BF     		IT NE
 852 2bfe 7642     	    RSBNE   TOS,TOS,#0
 853 2c00 E8E4     		_NEXT
 854              	
 855              	/**************************
 856              		CLZ ( n - n )
 857              		count leading zeros 
 858              	**************************/
 859 2c02 F22B0000 		_HEADER CLZ,3,"CLZ"
 859      03434C5A 
 859      00BF
 860 2c0c B6FA86F6 		clz TOS,TOS 
 861 2c10 E0E4     		_NEXT 
 862              	
 863              	/*************************
 864              		CTZ ( n -- n )
 865              		count trailing zeros 
 866              	************************/
 867 2c12 062C0000 		_HEADER CTZ,3,"CTZ"
 867      0343545A 
 867      00BF
 868 2c1c 80EA0000 		eor T0,T0 
 869 2c20 16F0010F 	1:  tst TOS,#1 
 870 2c24 04D1     		bne 2f 
 871 2c26 4FEA5606 		lsr TOS,#1 
 872 2c2a 00F10100 		add T0,#1 
 873 2c2e F7E7     		b 1b 
 874 2c30 0646     	2:  mov TOS,T0 
 875 2c32 CFE4     		_NEXT 
 876              	
 877              	
 878              	/*******************
 879              	  0= ( w -- f )
 880              	 TOS==0?
 881              	*******************/
 882 2c34 162C0000 		_HEADER ZEQUAL,2,"0="
 882      02303D00 
 883 2c3c 16B9     		cbnz TOS,1f
 884 2c3e 4FF0FF36 		mov TOS,#-1
 885 2c42 C7E4     		_NEXT 
 886 2c44 86EA0606 	1:  eor TOS,TOS,TOS  
 887 2c48 C4E4     		_NEXT 	
 888              	
 889              	/*********************
 890              	    =	 ( w w -- t )
 891              	 	Equal?
 892              	*********************/
 893 2c4a 382C0000 		_HEADER EQUAL,1,"="
 893      013D
 894 2c50 57F8045B 		LDR	WP,[DSP],#4
 895 2c54 AE42     		CMP	TOS,WP
 896 2c56 0CBF     		ITE EQ 
 897 2c58 6FF00006 	    MVNEQ	TOS,#0
 898 2c5c 0026     		MOVNE	TOS,#0
 899 2c5e B9E4     		_NEXT
ARM GAS  forth.s 			page 111


 900              	
 901              	/************************
 902              		<> ( w w -- f )
 903              		different?
 904              	************************/
 905 2c60 4E2C0000 		_HEADER DIFF,2,"<>"
 905      023C3E00 
 906 2c68 3046     		mov T0,TOS 
 907 2c6a 57F8046B 		_POP 
 908 2c6e 86EA0006 		eor TOS,T0
 909 2c72 B6FA86F0 		clz T0,TOS 
 910 2c76 06FA00F6 		lsl TOS,T0 
 911 2c7a 4FEAE676 		asr TOS,#31 
 912 2c7e A9E4     		_NEXT 
 913              	
 914              	/************************
 915              	    U<	 ( w w -- t )
 916              	 	Unsigned less?
 917              	*************************/
 918 2c80 642C0000 		_HEADER ULESS,2,"U<"
 918      02553C00 
 919 2c88 57F8045B 		LDR	WP,[DSP],#4
 920 2c8c B542     		CMP	WP,TOS
 921 2c8e 34BF     		ITE CC 
 922 2c90 6FF00006 		MVNCC	TOS,#0
 923 2c94 0026     		MOVCS	TOS,#0
 924 2c96 9DE4     		_NEXT
 925              	
 926              	/**********************
 927              	    <	( w w -- t )
 928              	 	Less?
 929              	**********************/
 930 2c98 842C0000 		_HEADER LESS,1,"<"
 930      013C00BF 
 931 2ca0 57F8045B 		LDR	WP,[DSP],#4
 932 2ca4 B542     		CMP	WP,TOS
 933 2ca6 B4BF     	    ITE LT
 934 2ca8 6FF00006 		MVNLT	TOS,#0
 935 2cac 0026     		MOVGE	TOS,#0
 936 2cae 91E4     		_NEXT 
 937              	
 938              	/**********************
 939              		U> ( u u -- t|f )
 940              	    unsigned greater 
 941              	**********************/
 942 2cb0 9C2C0000 		_HEADER UGREAT,2,"U>"
 942      02553E00 
 943 2cb8 57F8045B 		LDR WP,[DSP],#4 
 944 2cbc AE42     		CMP TOS,WP 
 945 2cbe 34BF     		ITE CC  
 946 2cc0 6FF00006 		MVNCC TOS,#0 
 947 2cc4 0026     		MOVCS TOS,#0
 948 2cc6 85E4     		_NEXT 
 949              	
 950              	/***********************
 951              	    >	( w w -- t )
 952              	 	greater?
ARM GAS  forth.s 			page 112


 953              	***********************/
 954 2cc8 B42C0000 		_HEADER GREAT,1,">"
 954      013E00BF 
 955 2cd0 57F8045B 		LDR	WP,[DSP],#4
 956 2cd4 B542     		CMP	WP,TOS
 957 2cd6 CCBF     		ITE GT
 958 2cd8 6FF00006 	    MVNGT	TOS,#0
 959 2cdc 0026     		MOVLE	TOS,#0
 960 2cde 79E4     		_NEXT
 961              	
 962              	/***************************
 963              	    MAX	 ( w w -- max )
 964              	 	Leave maximum.
 965              	***************************/
 966 2ce0 CC2C0000 		_HEADER MAX,3,"MAX"
 966      034D4158 
 967 2ce8 57F8045B 		LDR	WP,[DSP],#4
 968 2cec B542     		CMP	WP,TOS
 969 2cee C8BF     		IT GT 
 970 2cf0 2E46     		MOVGT	TOS,WP
 971 2cf2 6FE4     		_NEXT 
 972              	
 973              	/**************************
 974              	    MIN	 ( w w -- min )
 975              	 	Leave minimum.
 976              	**************************/
 977 2cf4 E42C0000 		_HEADER MIN,3,"MIN"
 977      034D494E 
 978 2cfc 57F8045B 		LDR	WP,[DSP],#4
 979 2d00 B542     		CMP	WP,TOS
 980 2d02 B8BF     		IT LT
 981 2d04 2E46     		MOVLT	TOS,WP
 982 2d06 65E4     		_NEXT
 983              	
 984              	/***********************
 985              	    +!	 ( w a -- )
 986              	 	Add to memory.
 987              	***********************/
 988 2d08 F82C0000 		_HEADER PSTOR,2,"+!"
 988      022B2100 
 989 2d10 57F8045B 		LDR	WP,[DSP],#4
 990 2d14 3268     		LDR	T2,[TOS]
 991 2d16 2A44     		ADD	T2,T2,WP
 992 2d18 3260     		STR	T2,[TOS]
 993 2d1a 57F8046B 		_POP
 994 2d1e 59E4     		_NEXT
 995              	
 996              	/************************
 997              	    2!	 ( d a -- )
 998              	 	Store double number.
 999              	*************************/
 1000 2d20 0C2D0000 		_HEADER DSTOR,2,"2!"
 1000      02322100 
 1001 2d28 57F8045B 		LDR	WP,[DSP],#4
 1002 2d2c 57F8042B 		LDR	T2,[DSP],#4
 1003 2d30 46F8045B 		STR	WP,[TOS],#4
 1004 2d34 3260     		STR	T2,[TOS]
ARM GAS  forth.s 			page 113


 1005 2d36 57F8046B 		_POP
 1006 2d3a 4BE4     		_NEXT
 1007              	
 1008              	/************************
 1009              	    2@	 ( a -- d )
 1010              	 	Fetch double number.
 1011              	************************/
 1012 2d3c 242D0000 		_HEADER DAT,2,"D@"
 1012      02444000 
 1013 2d44 7568     		LDR	WP,[TOS,#4]
 1014 2d46 47F8045D 		STR	WP,[DSP,#-4]!
 1015 2d4a 3668     		LDR	TOS,[TOS]
 1016 2d4c 42E4     		_NEXT
 1017              	
 1018              	/***************************
 1019              	    COUNT	( b -- b+1 c )
 1020              	 	Fetch length of string.
 1021              	****************************/
 1022 2d4e 402D0000 		_HEADER COUNT,5,"COUNT"
 1022      05434F55 
 1022      4E54
 1023 2d58 16F8015B 		LDRB	WP,[TOS],#1
 1024 2d5c 47F8046D 		_PUSH
 1025 2d60 2E46     		MOV	TOS,WP
 1026 2d62 37E4     		_NEXT
 1027              	
 1028              	/******************************
 1029              	    DNEGATE	( d -- -d )
 1030              	 	Negate double number.
 1031              	**************************/
 1032 2d64 522D0000 		_HEADER DNEGA,7,"DNEGATE"
 1032      07444E45 
 1032      47415445 
 1033 2d70 3D68     		LDR	WP,[DSP]
 1034 2d72 A2EB0202 		SUB	T2,T2,T2
 1035 2d76 551B     		SUBS WP,T2,WP
 1036 2d78 62EB0606 		SBC	TOS,T2,TOS
 1037 2d7c 3D60     		STR	WP,[DSP]
 1038 2d7e 29E4     		_NEXT
 1039              	
 1040              	/******************************
 1041              	  System and user variables
 1042              	******************************/
 1043              	
 1044              	/*******************************
 1045              	  doVAR	( -- a )
 1046              	  Run time routine for VARIABLE and CREATE.
 1047              	hidden word used by compiler
 1048              	********************************/
 1049              	DOVAR:
 1050 2d80 47F8046D 		_PUSH
 1051 2d84 6646     		MOV TOS,IP
 1052 2d86 0CF1040C 		ADD IP,IP,#4 
 1053 2d8a 26E4     		B UNNEST 
 1054              	
 1055              	/**********************************
 1056              	    doCON	( -- a ) 
ARM GAS  forth.s 			page 114


 1057              	 	Run time routine for CONSTANT.
 1058              	hidden word used by compiler 
 1059              	***********************************/
 1060              	DOCON:
 1061 2d8c 47F8046D 		_PUSH
 1062 2d90 5CF8046B 		LDR.W TOS,[IP],#4 
 1063 2d94 21E4     		B UNNEST 
 1064              	
 1065              	/***********************
 1066              	  system variables 
 1067              	***********************/
 1068              	
 1069              	/**************************
 1070              	 SEED ( -- a)
 1071              	 return PRNG seed address 
 1072              	**************************/
 1073 2d96 682D0000 		_HEADER SEED,4,"SEED"
 1073      04534545 
 1073      4400
 1074 2da0 47F8046D 		_PUSH 
 1075 2da4 04F10406 		ADD TOS,UP,#RNDSEED
 1076 2da8 14E4     		_NEXT 	
 1077              	
 1078              	/****************************************
 1079              	  MSEC ( -- a)
 1080              	 return address of milliseconds counter
 1081              	****************************************/
 1082 2daa 9A2D0000 		_HEADER MSEC,4,"MSEC"
 1082      044D5345 
 1082      4300
 1083 2db4 47F8046D 	    _PUSH
 1084 2db8 04F10806 	    ADD TOS,UP,#TICKS
 1085 2dbc 0AE4     	    _NEXT 
 1086              	
 1087              	/*************************
 1088              	 TIMER ( -- a )
 1089              	 count down timer 
 1090              	**********************/
 1091 2dbe AE2D0000 		_HEADER TIMER,5,"TIMER"
 1091      0554494D 
 1091      4552
 1092 2dc8 47F8046D 		 _PUSH 
 1093 2dcc 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1094 2dd0 00E4     	    _NEXT
 1095              	
 1096              	/*****************************
 1097              	    'BOOT	 ( -- a )
 1098              	 	boot up application vector 
 1099              	*****************************/
 1100 2dd2 C22D0000 		_HEADER TBOOT,5,"'BOOT"
 1100      0527424F 
 1100      4F54
 1101 2ddc 47F8046D 		_PUSH
 1102 2de0 04F11006 		ADD	TOS,UP,#BOOT 
 1103 2de4 FFF7F6BB 		_NEXT
 1104              		
 1105              	/********************************************	
ARM GAS  forth.s 			page 115


 1106              	    BASE	( -- a )
 1107              	 	Storage of the radix base for numeric I/O.
 1108              	**********************************************/
 1109 2de8 D62D0000 		_HEADER BASE,4,"BASE"
 1109      04424153 
 1109      450000BF 
 1110 2df4 47F8046D 		_PUSH
 1111 2df8 04F11C06 		ADD	TOS,UP,#NBASE
 1112 2dfc FFF7EABB 		_NEXT
 1113              	
 1114              	/*****************************************************
 1115              	    temp	 ( -- a )
 1116              	 	A temporary storage location used in parse and find.
 1117              	hidden word for internal use
 1118              	********************************************************/
 1119              	TEMP:
 1120 2e00 47F8046D 		_PUSH
 1121 2e04 04F12006 		ADD	TOS,UP,#TMP
 1122 2e08 FFF7E4BB 		_NEXT
 1123              	
 1124              	/*******************************************
 1125              	    SPAN	( -- a )
 1126              	 	Hold character count received by EXPECT.
 1127              	********************************************/
 1128 2e0c EC2D0000 		_HEADER SPAN,4,"SPAN"
 1128      04535041 
 1128      4E0000BF 
 1129 2e18 47F8046D 		_PUSH
 1130 2e1c 04F12406 		ADD	TOS,UP,#CSPAN
 1131 2e20 FFF7D8BB 		_NEXT
 1132              	
 1133              	/***********************************************************
 1134              	    >IN	 ( -- a )
 1135              	 	Hold the character pointer while parsing input stream.
 1136              	***********************************************************/
 1137 2e24 102E0000 		_HEADER INN,3,">IN"
 1137      033E494E 
 1138 2e2c 47F8046D 		_PUSH
 1139 2e30 04F12806 		ADD	TOS,UP,#TOIN
 1140 2e34 FFF7CEBB 		_NEXT
 1141              	
 1142              	/**************************************
 1143              	    #TIB	( -- a )
 1144              	 	Hold the current count and address 
 1145              		of the terminal input buffer.
 1146              	**************************************/
 1147 2e38 282E0000 		_HEADER NTIB,4,"#TIB"
 1147      04235449 
 1147      420000BF 
 1148 2e44 47F8046D 		_PUSH
 1149 2e48 04F12C06 		ADD	TOS,UP,#NTIBB
 1150 2e4c FFF7C2BB 		_NEXT
 1151              	
 1152              	/******************************
 1153              	    'EVAL	( -- a )
 1154              	 	Execution vector of EVAL.
 1155              	*******************************/
ARM GAS  forth.s 			page 116


 1156 2e50 3C2E0000 		_HEADER TEVAL,5,"'EVAL"
 1156      05274556 
 1156      414C00BF 
 1157 2e5c 47F8046D 		_PUSH
 1158 2e60 04F13406 		ADD	TOS,UP,#EVAL
 1159 2e64 FFF7B6BB 		_NEXT
 1160              	
 1161              	/*********************************
 1162              	    HLD	 ( -- a )
 1163              	 	Hold a pointer in building a 
 1164              		numeric output string.
 1165              	*********************************/
 1166 2e68 542E0000 		_HEADER HLD,3,"HLD"
 1166      03484C44 
 1167 2e70 47F8046D 		_PUSH
 1168 2e74 04F13806 		ADD	TOS,UP,#VHOLD
 1169 2e78 FFF7ACBB 		_NEXT
 1170              	
 1171              	/**********************************
 1172              	    CONTEXT	( -- a )
 1173              	 	A area to specify vocabulary 
 1174              		search order.
 1175              	**********************************/
 1176 2e7c 6C2E0000 		_HEADER CNTXT,7,"CONTEXT"
 1176      07434F4E 
 1176      54455854 
 1177              	CRRNT:
 1178 2e88 47F8046D 		_PUSH
 1179 2e8c 04F13C06 		ADD	TOS,UP,#CTXT
 1180 2e90 FFF7A0BB 		_NEXT
 1181              	
 1182              	/******************************
 1183              	    CP	( -- a )
 1184              	 	Point to top name in RAM 
 1185              		vocabulary.
 1186              	******************************/
 1187 2e94 802E0000 		_HEADER CPP,2,"CP"
 1187      02435000 
 1188 2e9c 47F8046D 		_PUSH
 1189 2ea0 04F14406 		ADD	TOS,UP,#USER_CTOP
 1190 2ea4 FFF796BB 		_NEXT
 1191              	
 1192              	/****************************
 1193              	   FCP ( -- a )
 1194              	  Point ot top of Forth 
 1195              	  system dictionary
 1196              	****************************/
 1197 2ea8 982E0000 		_HEADER FCP,3,"FCP"
 1197      03464350 
 1198 2eb0 47F8046D 		_PUSH 
 1199 2eb4 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1200 2eb8 FFF78CBB 		_NEXT 
 1201              	
 1202              	/***************************
 1203              	    LAST	( -- a )
 1204              	 	Point to the last name 
 1205              		in the name dictionary.
ARM GAS  forth.s 			page 117


 1206              	***************************/
 1207 2ebc AC2E0000 		_HEADER LAST,4,"LAST"
 1207      044C4153 
 1207      540000BF 
 1208 2ec8 47F8046D 		_PUSH
 1209 2ecc 04F14806 		ADD	TOS,UP,#LASTN
 1210 2ed0 FFF780BB 		_NEXT
 1211              	
 1212              	
 1213              	/***********************
 1214              		system constants 
 1215              	***********************/
 1216              	
 1217              	/********************************
 1218              		USER-BEGIN ( -- a )
 1219              	  where user area begin in RAM
 1220              	********************************/
 1221 2ed4 C02E0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1221      0A555345 
 1221      522D4245 
 1221      47494E00 
 1222 2ee4 47F8046D 		_PUSH 
 1223 2ee8 DFF80460 		ldr TOS,USR_BGN_ADR 
 1224 2eec FFF772BB 		_NEXT 
 1225              	USR_BGN_ADR:
 1226 2ef0 12050020 	.word  DTOP 
 1227              	
 1228              	/*********************************
 1229              	  USER_END ( -- a )
 1230              	  where user area end in RAM 
 1231              	******************************/
 1232 2ef4 D82E0000 		_HEADER USER_END,8,"USER-END"
 1232      08555345 
 1232      522D454E 
 1232      440000BF 
 1233 2f04 47F8046D 		_PUSH 
 1234 2f08 DFF80460 		ldr TOS,USER_END_ADR 
 1235 2f0c FFF762BB 		_NEXT 
 1236              	USER_END_ADR:
 1237 2f10 7C800120 		.word DEND 
 1238              	
 1239              	
 1240              	/* *********************
 1241              	  Common functions
 1242              	***********************/
 1243              	
 1244              	/********************************
 1245              	    WITHIN	( u ul uh -- t )
 1246              	 	Return true if u is within 
 1247              		the range of ul and uh.
 1248              	********************************/
 1249 2f14 F82E0000 		_HEADER WITHI,6,"WITHIN"
 1249      06574954 
 1249      48494E00 
 1250 2f20 504700BF 		_NEST
 1251 2f24 29290000 		_ADR	OVER
 1252 2f28 D9290000 		_ADR	SUBB
ARM GAS  forth.s 			page 118


 1253 2f2c 91280000 		_ADR	TOR
 1254 2f30 D9290000 		_ADR	SUBB
 1255 2f34 4D280000 		_ADR	RFROM
 1256 2f38 892C0000 		_ADR	ULESS
 1257 2f3c DB250000 		_UNNEST
 1258              	
 1259              	//  Divide
 1260              	
 1261              	/*************************************
 1262              	    UM/MOD	( udl udh u -- ur uq )
 1263              	 	Unsigned divide of a double by a 
 1264              		single. Return mod and quotient.
 1265              	**************************************/
 1266 2f40 182F0000 		_HEADER UMMOD,6,"UM/MOD"
 1266      06554D2F 
 1266      4D4F4400 
 1267 2f4c 4FF00103 		MOV	T3,#1
 1268 2f50 57F8045B 		LDR	WP,[DSP],#4
 1269 2f54 3A68     		LDR	T2,[DSP]
 1270              	UMMOD0:
 1271 2f56 9218     		ADDS	T2,T2,T2
 1272 2f58 6D41     		ADCS	WP,WP,WP
 1273 2f5a 04D3     		BCC	UMMOD1
 1274 2f5c A5EB0605 		SUB	WP,WP,TOS
 1275 2f60 02F10102 		ADD	T2,T2,#1
 1276 2f64 04E0     		B UMMOD2
 1277              	UMMOD1:
 1278 2f66 AD1B     		SUBS	WP,WP,TOS 
 1279 2f68 28BF     		IT CS 
 1280 2f6a 0132     		ADDCS	T2,T2,#1
 1281 2f6c 00D2     		BCS	UMMOD2
 1282 2f6e 3544     		ADD	WP,WP,TOS
 1283              	UMMOD2:
 1284 2f70 DB18     		ADDS	T3,T3,T3
 1285 2f72 F0D3     		BCC	UMMOD0
 1286 2f74 1646     		MOV	TOS,T2
 1287 2f76 3D60     		STR	WP,[DSP]
 1288 2f78 FFF72CBB 		_NEXT
 1289              	
 1290              	/****************************
 1291              	    M/MOD	( d n -- r q )
 1292              	 	Signed floored divide 
 1293              		of double by single. 
 1294              		Return mod and quotient.
 1295              	****************************/
 1296 2f7c 442F0000 		_HEADER MSMOD,5,"M/MOD"
 1296      054D2F4D 
 1296      4F4400BF 
 1297 2f88 504700BF 		_NEST
 1298 2f8c 05290000 		_ADR	DUPP
 1299 2f90 39290000 		_ADR	ZLESS
 1300 2f94 05290000 		_ADR	DUPP
 1301 2f98 91280000 		_ADR	TOR
 1302 2f9c DB270000 		_QBRAN MMOD1
 1302      B42F0000 
 1303 2fa4 E92B0000 		_ADR	NEGAT
 1304 2fa8 91280000 		_ADR	TOR
ARM GAS  forth.s 			page 119


 1305 2fac 712D0000 		_ADR	DNEGA
 1306 2fb0 4D280000 		_ADR	RFROM
 1307              	MMOD1:
 1308 2fb4 91280000 		_ADR	TOR
 1309 2fb8 05290000 		_ADR	DUPP
 1310 2fbc 39290000 		_ADR	ZLESS
 1311 2fc0 DB270000 		_QBRAN MMOD2
 1311      D02F0000 
 1312 2fc8 7D280000 		_ADR	RAT
 1313 2fcc C9290000 		_ADR	PLUS
 1314              	MMOD2:
 1315 2fd0 4D280000 		_ADR	RFROM
 1316 2fd4 4D2F0000 		_ADR	UMMOD
 1317 2fd8 4D280000 		_ADR	RFROM
 1318 2fdc DB270000 		_QBRAN	MMOD3
 1318      F02F0000 
 1319 2fe4 15290000 		_ADR	SWAP
 1320 2fe8 E92B0000 		_ADR	NEGAT
 1321 2fec 15290000 		_ADR	SWAP
 1322              	MMOD3:   
 1323 2ff0 DB250000 		_UNNEST
 1324              	
 1325              	/****************************
 1326              		S>D ( n -- d )
 1327              		convert single to double 
 1328              	*****************************/
 1329 2ff4 802F0000 		_HEADER STOD,3,"S>D"
 1329      03533E44 
 1330 2ffc 47F8046D 		_PUSH 
 1331 3000 4FEAE676 		ASR TOS,#31
 1332 3004 FFF7E6BA 		_NEXT 
 1333              	
 1334              	/****************************
 1335              		D2* ( d -- d<<1 )
 1336              		double * 2 
 1337              	***************************/
 1338 3008 F82F0000 		_HEADER D2STAR,3,"D2*"
 1338      0344322A 
 1339 3010 3868     		ldr T0,[DSP]
 1340 3012 4000     		lsls T0,#1
 1341 3014 3860     		str T0,[DSP]
 1342 3016 4FEA4606 		lsl TOS,#1
 1343 301a 46F10006 		adc TOS,#0
 1344 301e FFF7D9BA 		_NEXT 
 1345              	
 1346              	/****************************
 1347              		D2/  ( d -- d>>1 )
 1348              		double signed divide by 2 
 1349              	*****************************/
 1350 3022 0C300000 		_HEADER D2SL,3,"D2/"
 1350      0344322F 
 1350      00BF
 1351 302c 3868     		ldr T0,[DSP]
 1352 302e 7610     		asrs TOS,#1
 1353 3030 4FEA3000 		rrx T0,T0 
 1354 3034 3860     		str T0,[DSP]
 1355 3036 FFF7CDBA 		_NEXT 
ARM GAS  forth.s 			page 120


 1356              	
 1357              	/***************************
 1358              		D/MOD  ( d+ n+ - r+ qd+ )
 1359              		unsigned double division
 1360              		and modulo 
 1361              		output:
 1362              			qd+ = d+ / n+
 1363              			r+ = qd+ - (d+ * n+ )
 1364              	***************************/
 1365 303a 26300000 		_HEADER DSLMOD,5,"D/MOD"
 1365      05442F4D 
 1365      4F44
 1366 3044 3D68     		ldr WP,[DSP]  // d+ high 
 1367 3046 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1368 3048 4FF02002 		mov T2,#32 // shift counter  
 1369 304c 81EA0101 		eor T1,T1 // quotient T0:T1  
 1370 3050 25B9     		cbnz WP,1f    
 1371 3052 82EA0202 		eor T2,T2 // nos shifting required 
 1372 3056 0546     		mov WP,T0 
 1373 3058 80EA0000 		eor T0,T0 
 1374 305c 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1375 305e 15F0004F 	    tst WP,#(1<<31) 
 1376 3062 06D1     		bne 2f
 1377 3064 4918     		adds T1,T1,T1 
 1378 3066 4041     		adcs T0,T0,T0 
 1379 3068 45EB0505 		adc WP,WP,WP 
 1380 306c A2F10102 		sub T2,#1 
 1381 3070 F4E7     		b 1b 
 1382 3072 B5FBF6F3 	2:  udiv T3,WP,TOS
 1383 3076 41EA0301 		orr T1,T3   // append partial quotient 
 1384 307a 06FB03F3 		mul T3,TOS
 1385 307e A5EB0305 		sub WP,T3 //remainder 
 1386 3082 02B1     		cbz T2,8f 
 1387 3084 EAE7     		b 1b 
 1388 3086 7D60     	8:	str WP,[DSP,#4] // remainder 
 1389 3088 3960     		str T1,[DSP]  // q lo 
 1390 308a 0646     		mov TOS,T0  // q hi 		
 1391 308c FFF7A2BA 		_NEXT 
 1392              	
 1393              	
 1394              	/****************************
 1395              		D/  ( ud u -- udq )
 1396              		divide unsigned double 
 1397              		by unsigned single 
 1398              		return double quotient
 1399              		rounded to nearest integer 
 1400              	****************************/
 1401 3090 3E300000 		_HEADER DSLASH,2,"D/"
 1401      02442F00 
 1402 3098 504700BF 		_NEST 
 1403 309c 05290000 		_ADR DUPP 
 1404 30a0 9B270000 		_DOLIT 1 
 1404      01000000 
 1405 30a8 A1290000 		_ADR RSHIFT 
 1406 30ac 91280000 		_ADR TOR 
 1407 30b0 45300000 		_ADR DSLMOD 
 1408 30b4 ED2A0000 		_ADR ROT 
ARM GAS  forth.s 			page 121


 1409 30b8 4D280000 		_ADR RFROM 
 1410 30bc D12C0000 		_ADR GREAT 
 1411 30c0 DB270000 		_QBRAN 9f
 1411      D8300000 
 1412 30c8 9B270000 		_DOLIT 1 
 1412      01000000 
 1413 30d0 FD2F0000 		_ADR STOD 
 1414 30d4 512B0000 		_ADR DPLUS 
 1415 30d8 DB250000 	9:	_UNNEST 
 1416              	
 1417              	
 1418              	/****************************
 1419              		D* ( d s -- d )
 1420              	    multiply a double 
 1421              		by a single 
 1422              	****************************/
 1423 30dc 94300000 		_HEADER DSTAR,2,"D*"
 1423      02442A00 
 1424              	/*
 1425              		_NEST 
 1426              		_ADR NROT 
 1427              		_ADR DUPP 
 1428              		_ADR TOR 
 1429              		_ADR DABS
 1430              		_ADR SWAP  
 1431              		_ADR ROT   
 1432              		_ADR DUPP
 1433              		_ADR TOR
 1434              		_ADR MSTAR
 1435              		_ADR ROT
 1436              		_ADR RFROM 
 1437              		_ADR STAR 
 1438              		_ADR PLUS
 1439              		_ADR RFROM 
 1440              		_ADR ZLESS 
 1441              		_QBRAN 9f
 1442              		_ADR DNEGA   
 1443              	9:	_UNNEST 
 1444              	*/
 1445 30e4 57F8040B 		ldr T0,[DSP],#4
 1446 30e8 3968     		ldr T1,[DSP]
 1447 30ea 3860     		str T0,[DSP] 
 1448 30ec 83EA0303 		eor T3,T3 
 1449 30f0 10F0004F 		tst T0,#(1<<31)
 1450 30f4 02D0     		beq 1f 
 1451              		// DNEGATE 
 1452 30f6 591A     		subs T1,T3,T1  
 1453 30f8 63EB0000 		sbc T0,T3,T0 
 1454 30fc 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1455 3100 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1456 3104 0E44     		add TOS,T1  // TOS:T2 product  
 1457 3106 3868     		ldr r0,[DSP]
 1458 3108 10F0004F 		tst T0,#(1<<31)
 1459 310c 02D0     		beq 2f 
 1460              		// DNEGATE product 
 1461 310e 9A1A     		subs T2,T3,T2  
 1462 3110 63EB0606 		sbc TOS,T3,TOS 
ARM GAS  forth.s 			page 122


 1463 3114 3A60     	2:  str T2,[DSP]
 1464 3116 FFF75DBA 		_NEXT 
 1465              	
 1466              	
 1467              	/****************************
 1468              	   /MOD	( n n -- r q )
 1469              		Signed divide. Return
 1470              		mod and quotient.
 1471              	****************************/
 1472 311a E0300000 		_HEADER SLMOD,4,"/MOD"
 1472      042F4D4F 
 1472      4400
 1473 3124 504700BF 		_NEST
 1474 3128 29290000 		_ADR	OVER
 1475 312c 39290000 		_ADR	ZLESS
 1476 3130 15290000 		_ADR	SWAP
 1477 3134 892F0000 		_ADR	MSMOD
 1478 3138 DB250000 		_UNNEST
 1479              	
 1480              	/**************************
 1481              	    MOD	 ( n n -- r )
 1482              	 	Signed divide. Return
 1483              		mod only.
 1484              	**************************/
 1485 313c 1E310000 		_HEADER MODD,3,"MOD"
 1485      034D4F44 
 1486 3144 504700BF 		_NEST
 1487 3148 25310000 		_ADR	SLMOD
 1488 314c F5280000 		_ADR	DROP
 1489 3150 DB250000 		_UNNEST
 1490              	
 1491              	/*************************
 1492              	    /	   ( n n -- q )
 1493              	 	Signed divide. Return
 1494              		quotient only.
 1495              	**************************/
 1496 3154 40310000 		_HEADER SLASH,1,"/"
 1496      012F00BF 
 1497 315c 504700BF 		_NEST
 1498 3160 25310000 		_ADR	SLMOD
 1499 3164 15290000 		_ADR	SWAP
 1500 3168 F5280000 		_ADR	DROP
 1501 316c DB250000 		_UNNEST
 1502              	
 1503              	//******************************
 1504              	//  */MOD	( n1 n2 n3 -- r q )
 1505              	/* 	Multiply n1 and n2, then 
 1506              		divide by n3. Return 
 1507              		mod and quotient.
 1508              	******************************/
 1509 3170 58310000 		_HEADER SSMOD,5,"*/MOD"
 1509      052A2F4D 
 1509      4F4400BF 
 1510 317c 504700BF 		_NEST
 1511 3180 91280000 		_ADR	TOR
 1512 3184 112A0000 		_ADR	MSTAR
 1513 3188 4D280000 		_ADR	RFROM
ARM GAS  forth.s 			page 123


 1514 318c 892F0000 		_ADR	MSMOD
 1515 3190 DB250000 		_UNNEST
 1516              	
 1517              	//*******************************
 1518              	//  */ ( n1 n2 n3 -- q )
 1519              	/* 	Multiply n1 by n2, then 
 1520              		divide by n3. Return quotient
 1521              		only.
 1522              	*******************************/
 1523 3194 74310000 		_HEADER STASL,2,"*/"
 1523      022A2F00 
 1524 319c 504700BF 		_NEST
 1525 31a0 7D310000 		_ADR	SSMOD
 1526 31a4 15290000 		_ADR	SWAP
 1527 31a8 F5280000 		_ADR	DROP
 1528 31ac DB250000 		_UNNEST
 1529              	
 1530              	/*******************
 1531              	  Miscellaneous
 1532              	*******************/
 1533              	
 1534              	/*************************
 1535              	    ALIGNED	( b -- a )
 1536              	 	Align address to the 
 1537              		cell boundary.
 1538              	**************************/
 1539 31b0 98310000 		_HEADER ALGND,7,"ALIGNED"
 1539      07414C49 
 1539      474E4544 
 1540 31bc 06F10306 		ADD	TOS,TOS,#3
 1541 31c0 6FF00305 		MVN	WP,#3
 1542 31c4 06EA0506 		AND	TOS,TOS,WP
 1543 31c8 FFF704BA 		_NEXT
 1544              	
 1545              	/****************************
 1546              	    >CHAR	( c -- c )
 1547              	 	Filter non-printing 
 1548              		characters.
 1549              	****************************/
 1550 31cc B4310000 		_HEADER TCHAR,5,">CHAR"
 1550      053E4348 
 1550      415200BF 
 1551 31d8 504700BF 		_NEST
 1552 31dc 9B270000 		_DOLIT  0x7F
 1552      7F000000 
 1553 31e4 49290000 		_ADR	ANDD
 1554 31e8 05290000 		_ADR	DUPP	// mask msb
 1555 31ec 852A0000 		_ADR	BLANK
 1556 31f0 9B270000 		_DOLIT 	127
 1556      7F000000 
 1557 31f8 212F0000 		_ADR	WITHI	// check for printable
 1558 31fc D52B0000 		_ADR	INVER
 1559 3200 DB270000 		_QBRAN	TCHA1
 1559      14320000 
 1560 3208 F5280000 		_ADR	DROP
 1561 320c 9B270000 		_DOLIT 	'_'	// replace non-printables
 1561      5F000000 
ARM GAS  forth.s 			page 124


 1562              	TCHA1:
 1563 3214 DB250000 		  _UNNEST
 1564              	
 1565              	/************************
 1566              	    DEPTH	( -- n )
 1567              	 	Return the depth of
 1568              		the data stack.
 1569              	***********************/
 1570 3218 D0310000 		_HEADER DEPTH,5,"DEPTH"
 1570      05444550 
 1570      544800BF 
 1571 3224 4FF68062 		_MOV32 T2,SPP 
 1571      C2F20102 
 1572 322c A2EB0702 		SUB	T2,T2,DSP
 1573 3230 47F8046D 		_PUSH
 1574 3234 4FEAA206 		ASR	TOS,T2,#2
 1575 3238 FFF7CCB9 		_NEXT
 1576              	
 1577              	/*****************************
 1578              	    PICK	( ... +n -- ... w )
 1579              	 	Copy the nth stack item 
 1580              		to tos.
 1581              	******************************/
 1582 323c 1C320000 		_HEADER PICK,4,"PICK"
 1582      04504943 
 1582      4B0000BF 
 1583 3248 504700BF 		_NEST
 1584 324c 252A0000 		_ADR	ONEP
 1585 3250 992A0000 		_ADR	CELLS
 1586 3254 E1280000 		_ADR	SPAT
 1587 3258 C9290000 		_ADR	PLUS
 1588 325c 21280000 		_ADR	AT
 1589 3260 DB250000 		_UNNEST
 1590              	
 1591              	/*********************
 1592              	  Memory access
 1593              	*********************/
 1594              	
 1595              	/*************************
 1596              	    HERE	( -- a )
 1597              	 	Return the top of
 1598              		the code dictionary.
 1599              	*************************/
 1600 3264 40320000 		_HEADER HERE,4,"HERE"
 1600      04484552 
 1600      450000BF 
 1601 3270 504700BF 		_NEST
 1602 3274 9D2E0000 		_ADR	CPP
 1603 3278 21280000 		_ADR	AT
 1604 327c DB250000 		_UNNEST
 1605              	
 1606              	/***************************	
 1607              	    PAD	 ( -- a )
 1608              	 	Return the address of 
 1609              		a temporary buffer.
 1610              	***************************/
 1611 3280 68320000 		_HEADER PAD,3,"PAD"
ARM GAS  forth.s 			page 125


 1611      03504144 
 1612 3288 504700BF 		_NEST
 1613 328c 71320000 		_ADR	HERE
 1614 3290 9B270000 		_DOLIT 80
 1614      50000000 
 1615 3298 C9290000 		_ADR PLUS 
 1616 329c DB250000 		_UNNEST
 1617              	
 1618              	/***********************
 1619              	    TIB	 ( -- a )
 1620              	 	Return the address 
 1621              		of the terminal 
 1622              		input buffer.
 1623              	************************/
 1624 32a0 84320000 		_HEADER TIB,3,"TIB"
 1624      03544942 
 1625 32a8 47F8046D 		_PUSH
 1626 32ac 266B     		ldr TOS,[UP,#TIBUF]
 1627 32ae FFF791B9 		_NEXT
 1628              	
 1629              	/*************************
 1630              	    @EXECUTE	( a -- )
 1631              	 	Execute vector stored
 1632              		in address a.
 1633              	*************************/
 1634 32b2 A4320000 		_HEADER ATEXE,8,"@EXECUTE"
 1634      08404558 
 1634      45435554 
 1634      4500
 1635 32c0 3500     		MOVS	WP,TOS
 1636 32c2 57F8046B 		_POP
 1637 32c6 2D68     		LDR	WP,[WP]
 1638 32c8 45F00105 		ORR	WP,WP,#1
 1639 32cc 18BF     	    IT NE 
 1640 32ce 2847     		BXNE	WP
 1641 32d0 FFF780B9 		_NEXT
 1642              	
 1643              	/*******************************
 1644              	    CMOVE	( b1 b2 u -- )
 1645              	 	Copy u bytes from b1 to b2.
 1646              	********************************/
 1647 32d4 B6320000 		_HEADER CMOVE,5,"CMOVE"
 1647      05434D4F 
 1647      564500BF 
 1648 32e0 57F8042B 		LDR	T2,[DSP],#4
 1649 32e4 57F8043B 		LDR	T3,[DSP],#4
 1650 32e8 03E0     		B CMOV1
 1651              	CMOV0:
 1652 32ea 13F8015B 		LDRB	WP,[T3],#1
 1653 32ee 02F8015B 		STRB	WP,[T2],#1
 1654              	CMOV1:
 1655 32f2 3600     		MOVS	TOS,TOS
 1656 32f4 02D0     		BEQ	CMOV2
 1657 32f6 A6F10106 		SUB	TOS,TOS,#1
 1658 32fa F6E7     		B CMOV0
 1659              	CMOV2:
 1660 32fc 57F8046B 		_POP
ARM GAS  forth.s 			page 126


 1661 3300 FFF768B9 		_NEXT
 1662              	
 1663              	/***************************
 1664              	    MOVE	( a1 a2 u -- )
 1665              	 	Copy u words from a1 to a2.
 1666              	*******************************/
 1667 3304 D8320000 		_HEADER MOVE,4,"MOVE"
 1667      044D4F56 
 1667      450000BF 
 1668 3310 4FF00400 		MOV T0,#4 
 1669 3314 06F10306 		ADD TOS,#3 
 1670 3318 26F00306 		BIC TOS,#3
 1671 331c 57F8041B 		LDR	T1,[DSP],#4 // dest
 1672 3320 57F8042B 		LDR	T2,[DSP],#4 // src 
 1673 3324 8A42     		CMP T2,T1 
 1674 3326 08D5     		BPL MOVE1
 1675 3328 6FF00300 		MOV T0,#-4 
 1676 332c 3144     		ADD T1,TOS
 1677 332e 3244     		ADD T2,TOS 
 1678 3330 01E0     		B MOVE3
 1679              	MOVE0:
 1680 3332 1568     		LDR	WP,[T2]
 1681 3334 0D60     		STR	WP,[T1]
 1682              	MOVE3: 
 1683 3336 0144     		ADD T1,T0 
 1684 3338 0244     		ADD T2,T0 
 1685              	MOVE1:
 1686 333a 3600     		MOVS TOS,TOS
 1687 333c 02D0     		BEQ	MOVE2
 1688 333e A6F10406 		SUB	TOS,TOS,#4
 1689 3342 F6E7     		B MOVE0
 1690              	MOVE2:
 1691 3344 57F8046B 		_POP
 1692 3348 FFF744B9 		_NEXT
 1693              	
 1694              	/**************************
 1695              	    FILL	( b u c -- )
 1696              	 	Fill u bytes of character
 1697              		c to area beginning at b.
 1698              	******************************/
 1699 334c 08330000 		_HEADER FILL,4,"FILL"
 1699      0446494C 
 1699      4C0000BF 
 1700 3358 03CF     		LDMFD DSP!,{T0,T1} 
 1701 335a 0000     		MOVS T0,T0 
 1702 335c 03D0     		BEQ FILL2
 1703              	FILL1:
 1704 335e 01F8016B 		STRB	TOS,[T1],#1
 1705 3362 0138     		SUBS	T0,T0,#1
 1706 3364 FBD1     		BNE FILL1
 1707              	FILL2:
 1708 3366 57F8046B 		_POP
 1709 336a FFF733B9 		_NEXT
 1710              	
 1711              	/*****************************
 1712              	    PACK$	( b u a -- a )
 1713              	 	Build a counted word with
ARM GAS  forth.s 			page 127


 1714              		u characters from b. 
 1715              		Null fill.
 1716              	*****************************/
 1717 336e 50330000 		_HEADER PACKS,5,"PACK$"
 1717      05504143 
 1717      4B24
 1718 3378 504700BF 		_NEST
 1719 337c BD310000 		_ADR	ALGND
 1720 3380 05290000 		_ADR	DUPP
 1721 3384 91280000 		_ADR	TOR		// strings only on cell boundary
 1722 3388 29290000 		_ADR	OVER
 1723 338c C9290000 		_ADR	PLUS
 1724 3390 252A0000 		_ADR	ONEP 
 1725 3394 9B270000 		_DOLIT 	0xFFFFFFFC
 1725      FCFFFFFF 
 1726 339c 49290000 		_ADR	ANDD			// count mod cell
 1727 33a0 9B270000 		_DOLIT 	0
 1727      00000000 
 1728 33a8 15290000 		_ADR	SWAP
 1729 33ac 0D280000 		_ADR	STORE			// null fill cell
 1730 33b0 7D280000 		_ADR	RAT
 1731 33b4 3D2B0000 		_ADR	DDUP
 1732 33b8 2D280000 		_ADR	CSTOR
 1733 33bc 252A0000 		_ADR	ONEP			// save count
 1734 33c0 15290000 		_ADR	SWAP
 1735 33c4 E1320000 		_ADR	CMOVE
 1736 33c8 4D280000 		_ADR	RFROM
 1737 33cc DB250000 		_UNNEST   			// move string
 1738              	
 1739              	/***********************************
 1740              	  Numeric output, single precision
 1741              	***********************************/
 1742              	
 1743              	/**************************
 1744              	    DIGIT	( u -- c )
 1745              	 	Convert digit u to 
 1746              		a character.
 1747              	***************************/
 1748 33d0 72330000 		_HEADER DIGIT,5,"DIGIT"
 1748      05444947 
 1748      495400BF 
 1749 33dc 504700BF 		_NEST
 1750 33e0 9B270000 		_DOLIT 9
 1750      09000000 
 1751 33e8 29290000 		_ADR	OVER
 1752 33ec A12C0000 		_ADR	LESS
 1753 33f0 9B270000 		_DOLIT	7
 1753      07000000 
 1754 33f8 49290000 		_ADR	ANDD
 1755 33fc C9290000 		_ADR	PLUS
 1756 3400 9B270000 		_DOLIT	'0'
 1756      30000000 
 1757 3408 C9290000 		_ADR	PLUS 
 1758 340c DB250000 		_UNNEST
 1759              	
 1760              	/*********************************
 1761              	    EXTRACT	( ud base -- ud c )
ARM GAS  forth.s 			page 128


 1762              	 	Extract the least significant
 1763              		digit from positive double.
 1764              	**********************************/
 1765 3410 D4330000 		_HEADER EXTRC,7,"EXTRACT"
 1765      07455854 
 1765      52414354 
 1766 341c 504700BF 		_NEST
 1767 3420 45300000 		_ADR	DSLMOD
 1768 3424 ED2A0000 		_ADR	ROT
 1769 3428 DD330000 		_ADR	DIGIT
 1770 342c DB250000 		_UNNEST
 1771              	
 1772              	/***************************
 1773              	    <#	  ( -- )
 1774              	 	Initiate the numeric
 1775              		output process.
 1776              	****************************/
 1777 3430 14340000 		_HEADER BDIGS,2,"<#"
 1777      023C2300 
 1778 3438 504700BF 		_NEST
 1779 343c 89320000 		_ADR	PAD
 1780 3440 712E0000 		_ADR	HLD
 1781 3444 0D280000 		_ADR	STORE
 1782 3448 DB250000 		_UNNEST
 1783              	
 1784              	/*********************************
 1785              	    HOLD	( c -- )
 1786              	 	Insert a character into the 
 1787              		numeric output string.
 1788              	**********************************/
 1789 344c 34340000 		_HEADER HOLD,4,"HOLD"
 1789      04484F4C 
 1789      440000BF 
 1790 3458 504700BF 		_NEST
 1791 345c 712E0000 		_ADR	HLD
 1792 3460 21280000 		_ADR	AT
 1793 3464 352A0000 		_ADR	ONEM
 1794 3468 05290000 		_ADR	DUPP
 1795 346c 712E0000 		_ADR	HLD
 1796 3470 0D280000 		_ADR	STORE
 1797 3474 2D280000 		_ADR	CSTOR
 1798 3478 DB250000 		_UNNEST
 1799              	
 1800              	/***********************
 1801              	    #	   ( ud -- ud )
 1802              	 	Extract one digit 
 1803              		from ud and append 
 1804              		the digit to output 
 1805              		string.
 1806              	*************************/
 1807 347c 50340000 		_HEADER DIG,1,"#"
 1807      012300BF 
 1808 3484 504700BF 		_NEST
 1809 3488 F52D0000 		_ADR	BASE
 1810 348c 21280000 		_ADR	AT
 1811 3490 1D340000 		_ADR	EXTRC
 1812 3494 59340000 		_ADR	HOLD
ARM GAS  forth.s 			page 129


 1813 3498 DB250000 		_UNNEST
 1814              	
 1815              	/***************************
 1816              	    #S	  ( ud -- 0 )
 1817              	 	Convert ud until all 
 1818              		digits are added to 
 1819              		the output string.
 1820              	***************************/
 1821 349c 80340000 		_HEADER DIGS,2,"#S"
 1821      02235300 
 1822 34a4 504700BF 		_NEST
 1823              	DIGS1:
 1824 34a8 85340000 	    _ADR	DIG
 1825 34ac 3D2B0000 		_ADR	DDUP
 1826 34b0 5D290000 		_ADR    ORR 
 1827 34b4 DB270000 		_QBRAN 	DIGS2
 1827      C4340000 
 1828 34bc EF270000 		_BRAN	DIGS1
 1828      A8340000 
 1829              	DIGS2:
 1830 34c4 F5280000 		 _ADR DROP 
 1831 34c8 DB250000 		 _UNNEST
 1832              	
 1833              	/*********************
 1834              	    SIGN	( n -- )
 1835              	 	Add a minus sign
 1836              		to the numeric
 1837              		output string.
 1838              	*********************/
 1839 34cc A0340000 		_HEADER SIGN,4,"SIGN"
 1839      04534947 
 1839      4E0000BF 
 1840 34d8 504700BF 		_NEST
 1841 34dc 39290000 		_ADR	ZLESS
 1842 34e0 DB270000 		_QBRAN	SIGN1
 1842      F4340000 
 1843 34e8 9B270000 		_DOLIT '-'
 1843      2D000000 
 1844 34f0 59340000 		_ADR	HOLD
 1845              	SIGN1:
 1846 34f4 DB250000 		  _UNNEST
 1847              	
 1848              	/*************************
 1849              	    #>  ( w -- b u )
 1850              	 	Prepare the output 
 1851              		word to be TYPE'd.
 1852              	************************/
 1853 34f8 D0340000 		_HEADER EDIGS,2,"#>"
 1853      02233E00 
 1854 3500 504700BF 		_NEST
 1855 3504 F5280000 		_ADR	DROP
 1856 3508 712E0000 		_ADR	HLD
 1857 350c 21280000 		_ADR	AT
 1858 3510 89320000 		_ADR	PAD
 1859 3514 29290000 		_ADR	OVER
 1860 3518 D9290000 		_ADR	SUBB
 1861 351c DB250000 		_UNNEST
ARM GAS  forth.s 			page 130


 1862              	
 1863              	/**************************
 1864              	    str	 ( n -- b u )
 1865              	 	Convert a signed 
 1866              		integer to a numeric 
 1867              		string.
 1868              	hidden word used by compiler
 1869              	***************************/
 1870              	STRR:
 1871 3520 504700BF 		_NEST
 1872 3524 FD2F0000 		_ADR 	STOD 
 1873 3528 05290000 		_ADR	DUPP
 1874 352c 91280000 		_ADR	TOR
 1875 3530 712B0000 		_ADR	DABS
 1876 3534 39340000 		_ADR	BDIGS
 1877 3538 A5340000 		_ADR	DIGS
 1878 353c 4D280000 		_ADR	RFROM
 1879 3540 D9340000 		_ADR	SIGN
 1880 3544 01350000 		_ADR	EDIGS
 1881 3548 DB250000 		_UNNEST
 1882              	
 1883              	/*************************
 1884              	    HEX	 ( -- )
 1885              	 	Use radix 16 as 
 1886              		base for numeric 
 1887              		conversions.
 1888              	*************************/
 1889 354c FC340000 		_HEADER HEX,3,"HEX"
 1889      03484558 
 1890 3554 504700BF 		_NEST
 1891 3558 9B270000 		_DOLIT 16
 1891      10000000 
 1892 3560 F52D0000 		_ADR	BASE
 1893 3564 0D280000 		_ADR	STORE
 1894 3568 DB250000 		_UNNEST
 1895              	
 1896              	/**************************
 1897              		BIN ( -- )
 1898              		Use radix 2 as 
 1899              		base for numeric 
 1900              		conversion 
 1901              	**************************/
 1902 356c 50350000 		_HEADER BIN,3,"BIN"
 1902      0342494E 
 1903 3574 504700BF 		_NEST 
 1904 3578 9B270000 		_DOLIT 2 
 1904      02000000 
 1905 3580 F52D0000 		_ADR BASE 
 1906 3584 0D280000 		_ADR STORE
 1907 3588 DB250000 		_UNNEST 
 1908              	
 1909              	/************************
 1910              	    DECIMAL	( -- )
 1911              	 	Use radix 10 as base
 1912              		for numeric conversions.
 1913              	*************************/
 1914 358c 70350000 		_HEADER DECIM,7,"DECIMAL"
ARM GAS  forth.s 			page 131


 1914      07444543 
 1914      494D414C 
 1915 3598 504700BF 		_NEST
 1916 359c 9B270000 		_DOLIT 10
 1916      0A000000 
 1917 35a4 F52D0000 		_ADR	BASE
 1918 35a8 0D280000 		_ADR	STORE
 1919 35ac DB250000 		_UNNEST
 1920              	
 1921              	/************************************
 1922              	  Numeric input, single precision
 1923              	***********************************/
 1924              	
 1925              	/***********************************
 1926              	    DIGIT?	( c base -- u t )
 1927              	 	Convert a character to its 
 1928              		numeric value. A flag 
 1929              		indicates success.
 1930              	**********************************/
 1931 35b0 90350000 		_HEADER DIGTQ,6,"DIGIT?"
 1931      06444947 
 1931      49543F00 
 1932 35bc 504700BF 		_NEST
 1933 35c0 91280000 		_ADR	TOR
 1934 35c4 9B270000 		_DOLIT 	'0'
 1934      30000000 
 1935 35cc D9290000 		_ADR	SUBB
 1936 35d0 9B270000 		_DOLIT 9
 1936      09000000 
 1937 35d8 29290000 		_ADR	OVER
 1938 35dc A12C0000 		_ADR	LESS
 1939 35e0 DB270000 		_QBRAN	DGTQ1
 1939      08360000 
 1940 35e8 9B270000 		_DOLIT 7
 1940      07000000 
 1941 35f0 D9290000 		_ADR	SUBB
 1942 35f4 05290000 		_ADR	DUPP
 1943 35f8 9B270000 		_DOLIT	10
 1943      0A000000 
 1944 3600 A12C0000 		_ADR	LESS
 1945 3604 5D290000 		_ADR	ORR
 1946              	DGTQ1:
 1947 3608 05290000 		_ADR	DUPP
 1948 360c 4D280000 		_ADR	RFROM
 1949 3610 892C0000 		_ADR	ULESS
 1950 3614 DB250000 		_UNNEST
 1951              	
 1952              	/***********************************
 1953              	 parse digits 
 1954              	  d digits count 
 1955              	  n parsed integer
 1956              	  a+ updated pointer  
 1957              	************************************/
 1958              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1959 3618 504700BF 	    _NEST
 1960 361c F52D0000 	    _ADR BASE 
 1961 3620 21280000 	    _ADR AT 
ARM GAS  forth.s 			page 132


 1962 3624 91280000 	    _ADR TOR  
 1963 3628 592D0000 	1:  _ADR COUNT 
 1964 362c 7D280000 	    _ADR RAT 
 1965 3630 BD350000 	    _ADR DIGTQ
 1966 3634 DB270000 	    _QBRAN 2f
 1966      64360000 
 1967 363c ED2A0000 	    _ADR ROT 
 1968 3640 7D280000 	    _ADR RAT 
 1969 3644 E9290000 	    _ADR STAR 
 1970 3648 C9290000 	    _ADR PLUS
 1971 364c 15290000 	    _ADR SWAP 
 1972 3650 ED2A0000 	    _ADR ROT 
 1973 3654 252A0000 	    _ADR ONEP 
 1974 3658 012B0000 	    _ADR NROT
 1975 365c EF270000 	    _BRAN 1b 
 1975      28360000 
 1976 3664 F5280000 	2:  _ADR DROP 
 1977 3668 352A0000 	    _ADR ONEM  // decrement a 
 1978 366c 4D280000 	    _ADR RFROM 
 1979 3670 F5280000 	    _ADR DROP 
 1980 3674 DB250000 	    _UNNEST 
 1981              	
 1982              	/**************************
 1983              	 CHAR? 
 1984              	 check for charcter c 
 1985              	 move pointer if true 
 1986              	**************************/
 1987              	CHARQ: // ( a c -- a+ t | a f )
 1988 3678 3868     	    ldr T0,[DSP]
 1989 367a 10F8011B 	    ldrb T1,[T0],#1 
 1990 367e 3246     	    mov T2,TOS 
 1991 3680 86EA0606 	    eor TOS,TOS
 1992 3684 9142     	    cmp T1,T2
 1993 3686 02D1     	    bne 1f 
 1994 3688 3860     	    str T0,[DSP]
 1995 368a 6FEA0606 	    mvn TOS,TOS  
 1996 368e FEF7A1BF 	1:  _NEXT
 1997              	
 1998              	
 1999              	/**********************************
 2000              	    INT?	( a -- n T | a F )
 2001              	 	parse string  at 'a' for 
 2002              		integer. Push a flag on TOS.
 2003              		integer form:
 2004              			[-]hex_digit+  | 
 2005              			$[-]hex_digit+ |
 2006              			%[-]bin_digit+ | 
 2007              			[-]dec_digit+ 
 2008              	**********************************/
 2009 3692 B4350000 		_HEADER INTQ,4,"INT?"
 2009      04494E54 
 2009      3F00
 2010 369c 504700BF 		_NEST
 2011              	// save BASE 	
 2012 36a0 F52D0000 		_ADR	BASE
 2013 36a4 21280000 		_ADR	AT
 2014 36a8 91280000 		_ADR	TOR
ARM GAS  forth.s 			page 133


 2015 36ac 9B270000 		_DOLIT	0      // a 0 
 2015      00000000 
 2016 36b4 29290000 		_ADR	OVER   // a 0 a 
 2017 36b8 592D0000 		_ADR	COUNT  // a 0 a+ cnt 
 2018 36bc 15290000 		_ADR    SWAP   
 2019 36c0 9B270000 		_DOLIT  '$' 
 2019      24000000 
 2020 36c8 79360000 		_ADR    CHARQ 
 2021 36cc DB270000 		_QBRAN  0f 
 2021      E0360000 
 2022              	// hexadecimal number 
 2023 36d4 55350000 		_ADR    HEX
 2024 36d8 EF270000 		_BRAN   1f 
 2024      F8360000 
 2025 36e0 9B270000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2025      25000000 
 2026 36e8 79360000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2027 36ec DB270000 		_QBRAN  2f
 2027      04370000 
 2028 36f4 75350000 		_ADR	BIN 
 2029              	1:	// decrement cnt 
 2030 36f8 15290000 	    _ADR	SWAP 
 2031 36fc 352A0000 		_ADR	ONEM 
 2032 3700 15290000 		_ADR	SWAP  // -- a 0 cnt- a  
 2033              	2: // check for '-'
 2034 3704 9B270000 		_DOLIT  '-' 
 2034      2D000000 
 2035 370c 79360000 		_ADR	CHARQ // -- a 0 cnt a f 
 2036 3710 05290000 		_ADR    DUPP  
 2037 3714 91280000 		_ADR	TOR  // -- a 0 cnt a f  R: sign 
 2038 3718 DB270000 		_QBRAN  2f 
 2038      2C370000 
 2039              	// decrement cnt 
 2040 3720 15290000 		_ADR   SWAP 
 2041 3724 352A0000 		_ADR   ONEM 
 2042 3728 15290000 		_ADR   SWAP // a 0 cnt- a  R: sign  
 2043 372c 15290000 	2:	_ADR   SWAP 
 2044 3730 91280000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2045 3734 9B270000 		_DOLIT  0
 2045      00000000 
 2046 373c 05290000 		_ADR	DUPP 
 2047 3740 ED2A0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2048 3744 19360000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2049 3748 F5280000 		_ADR	DROP // a 0 d n 
 2050 374c 15290000 		_ADR	SWAP  // a 0 n d 
 2051 3750 4D280000 		_ADR	RFROM // a 0 n d cnt  
 2052 3754 512C0000 		_ADR	EQUAL // d == cnt ? 
 2053 3758 DB270000 		_QBRAN  5f // digits left, not an integer 
 2053      88370000 
 2054 3760 4D280000 	2:	_ADR	RFROM  // sign 
 2055 3764 DB270000 		_QBRAN  3f   // positive integer 
 2055      70370000 
 2056 376c E92B0000 		_ADR	NEGAT
 2057              	3:	
 2058 3770 012B0000 		_ADR	NROT  // n a 0 
 2059 3774 152B0000 		_ADR	DDROP // n  
 2060 3778 9B270000 		_DOLIT  -1    // n -1 
ARM GAS  forth.s 			page 134


 2060      FFFFFFFF 
 2061 3780 EF270000 		_BRAN   7f  
 2061      90370000 
 2062 3788 4D280000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2063 378c 152B0000 	    _ADR	DDROP 
 2064              	7: // restore BASE 
 2065 3790 4D280000 		_ADR	RFROM
 2066 3794 F52D0000 		_ADR	BASE
 2067 3798 0D280000 		_ADR	STORE
 2068 379c DB250000 		_UNNEST
 2069              	
 2070              	
 2071              	/********************
 2072              	  console I/O
 2073              	********************/
 2074              	
 2075              	/**********************
 2076              	    SPACE	( -- )
 2077              	 	Send the blank 
 2078              		character to 
 2079              		the output device.
 2080              	************************/
 2081 37a0 96360000 		_HEADER SPACE,5,"SPACE"
 2081      05535041 
 2081      434500BF 
 2082 37ac 504700BF 		_NEST
 2083 37b0 852A0000 		_ADR	BLANK
 2084 37b4 A5260000 		_ADR	EMIT
 2085 37b8 DB250000 		_UNNEST
 2086              	
 2087              	/***************************
 2088              	    SPACES	( +n -- )
 2089              	 	Send n spaces to the 
 2090              		output device.
 2091              	****************************/
 2092 37bc A4370000 		_HEADER SPACS,6,"SPACES"
 2092      06535041 
 2092      43455300 
 2093 37c8 504700BF 		_NEST
 2094 37cc 9B270000 		_DOLIT	0
 2094      00000000 
 2095 37d4 E92C0000 		_ADR	MAX
 2096 37d8 91280000 		_ADR	TOR
 2097 37dc EF270000 		_BRAN	CHAR2
 2097      E8370000 
 2098              	CHAR1:
 2099 37e4 AD370000 		_ADR	SPACE
 2100              	CHAR2:
 2101 37e8 BD270000 		_DONXT	CHAR1
 2101      E4370000 
 2102 37f0 DB250000 		_UNNEST
 2103              	
 2104              	/***********************
 2105              	    TYPE	( b u -- )
 2106              	 	Output u characters 
 2107              		from b.
 2108              	************************/
ARM GAS  forth.s 			page 135


 2109 37f4 C0370000 		_HEADER TYPEE,4,"TYPE"
 2109      04545950 
 2109      450000BF 
 2110 3800 504700BF 		_NEST
 2111 3804 91280000 		_ADR  TOR   // ( a+1 -- R: u )
 2112 3808 EF270000 		_BRAN	TYPE2
 2112      1C380000 
 2113              	TYPE1:  
 2114 3810 592D0000 		_ADR  COUNT
 2115 3814 D9310000 		_ADR TCHAR
 2116 3818 A5260000 		_ADR EMIT
 2117              	TYPE2:  
 2118 381c BD270000 		_DONXT	TYPE1
 2118      10380000 
 2119 3824 F5280000 		_ADR	DROP
 2120 3828 DB250000 		_UNNEST
 2121              	
 2122              	/***************************
 2123              	    CR	  ( -- )
 2124              	 	Output a carriage return
 2125              		and a line feed.
 2126              	****************************/
 2127 382c F8370000 		_HEADER CR,2,"CR"
 2127      02435200 
 2128 3834 504700BF 		_NEST
 2129 3838 9B270000 		_DOLIT	CRR
 2129      0D000000 
 2130 3840 A5260000 		_ADR	EMIT
 2131 3844 9B270000 		_DOLIT	LF
 2131      0A000000 
 2132 384c A5260000 		_ADR	EMIT
 2133 3850 DB250000 		_UNNEST
 2134              	
 2135              	/******************************************
 2136              	  do_$	( -- a )
 2137              	  Return the address of a compiled string.
 2138              	  adjust return address to skip over it.
 2139              	hidden word used by compiler. 
 2140              	******************************************/
 2141              	DOSTR:
 2142 3854 504700BF 		_NEST     
 2143              	/* compiled string address is 2 levels deep */
 2144 3858 4D280000 		_ADR	RFROM	// { -- a1 }
 2145 385c 4D280000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2146 3860 05290000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2147 3864 592D0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2148 3868 C9290000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2149 386c BD310000 		_ADR	ALGND	//  end of string
 2150              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2151 3870 91280000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2152 3874 15290000 		_ADR	SWAP	//  count tugged
 2153 3878 91280000 		_ADR	TOR     //  ( -- a2) is string address
 2154 387c DB250000 		_UNNEST
 2155              	
 2156              	/******************************************
 2157              	    $"|	( -- a )
 2158              	 	Run time routine compiled by _". 
ARM GAS  forth.s 			page 136


 2159              		Return address of a compiled string.
 2160              	hidden word used by compiler
 2161              	*****************************************/
 2162              	STRQP:
 2163 3880 504700BF 		_NEST
 2164 3884 55380000 		_ADR	DOSTR
 2165 3888 DB250000 		_UNNEST			// force a call to dostr
 2166              	
 2167              	/*******************************
 2168              	    .$	( a -- )
 2169              	 	Run time routine of ." 
 2170              		Output a compiled string.
 2171              	hidden word used by compiler
 2172              	*******************************/
 2173              	DOTST:
 2174 388c 504700BF 		_NEST
 2175 3890 592D0000 		_ADR	COUNT // ( -- a+1 c )
 2176 3894 01380000 		_ADR	TYPEE
 2177 3898 DB250000 		_UNNEST
 2178              	
 2179              	/**********************
 2180              	    ."|	( -- )
 2181              	 	Run time routine of ." 
 2182              		Output a compiled string.
 2183              	hidden word used by compiler
 2184              	*****************************/
 2185              	DOTQP:
 2186 389c 504700BF 		_NEST
 2187 38a0 55380000 		_ADR	DOSTR
 2188 38a4 8D380000 		_ADR	DOTST
 2189 38a8 DB250000 		_UNNEST
 2190              	
 2191              	/******************************
 2192              	    .R	  ( n +n -- )
 2193              	 	Display an integer in a 
 2194              		field of n columns, 
 2195              		right justified.
 2196              	*******************************/
 2197 38ac 30380000 		_HEADER DOTR,2,".R"
 2197      022E5200 
 2198 38b4 504700BF 		_NEST
 2199 38b8 91280000 		_ADR	TOR
 2200 38bc 21350000 		_ADR	STRR
 2201 38c0 4D280000 		_ADR	RFROM
 2202 38c4 29290000 		_ADR	OVER
 2203 38c8 D9290000 		_ADR	SUBB
 2204 38cc C9370000 		_ADR	SPACS
 2205 38d0 01380000 		_ADR	TYPEE
 2206 38d4 DB250000 		_UNNEST
 2207              	
 2208              	/*************************
 2209              	    U.R	 ( u +n -- )
 2210              	 	Display an unsigned 
 2211              		integer in n column, 
 2212              		right justified.
 2213              	***************************/
 2214 38d8 B0380000 		_HEADER UDOTR,3,"U.R"
ARM GAS  forth.s 			page 137


 2214      03552E52 
 2215 38e0 504700BF 		_NEST
 2216 38e4 15290000 		_ADR	SWAP 
 2217 38e8 FD2F0000 		_ADR 	STOD 
 2218 38ec ED2A0000 		_ADR	ROT 
 2219 38f0 91280000 		_ADR	TOR
 2220 38f4 39340000 		_ADR	BDIGS
 2221 38f8 A5340000 		_ADR	DIGS
 2222 38fc 01350000 		_ADR	EDIGS
 2223 3900 4D280000 		_ADR	RFROM
 2224 3904 29290000 		_ADR	OVER
 2225 3908 D9290000 		_ADR	SUBB
 2226 390c C9370000 		_ADR	SPACS
 2227 3910 01380000 		_ADR	TYPEE
 2228 3914 DB250000 		_UNNEST
 2229              	
 2230              	/************************
 2231              	    U.	  ( u -- )
 2232              	 	Display an unsigned 
 2233              		integer in free format.
 2234              	***************************/
 2235 3918 DC380000 		_HEADER UDOT,2,"U."
 2235      02552E00 
 2236 3920 504700BF 		_NEST
 2237 3924 FD2F0000 		_ADR 	STOD 
 2238 3928 39340000 		_ADR	BDIGS
 2239 392c A5340000 		_ADR	DIGS
 2240 3930 01350000 		_ADR	EDIGS
 2241 3934 AD370000 		_ADR	SPACE
 2242 3938 01380000 		_ADR	TYPEE
 2243 393c DB250000 		_UNNEST
 2244              	
 2245              	/************************
 2246              	    .	   ( w -- )
 2247              	 	Display an integer 
 2248              		in free format, 
 2249              		preceeded by a space.
 2250              	**************************/
 2251 3940 1C390000 		_HEADER DOT,1,"."
 2251      012E00BF 
 2252 3948 504700BF 		_NEST
 2253 394c F52D0000 		_ADR	BASE
 2254 3950 21280000 		_ADR	AT
 2255 3954 9B270000 		_DOLIT 10
 2255      0A000000 
 2256 395c 71290000 		_ADR	XORR			// ?decimal
 2257 3960 DB270000 		_QBRAN	DOT1
 2257      70390000 
 2258 3968 21390000 		_ADR	UDOT
 2259 396c DB250000 		_UNNEST			// no,display unsigned
 2260              	DOT1:
 2261 3970 21350000 	    _ADR	STRR
 2262 3974 AD370000 		_ADR	SPACE
 2263 3978 01380000 		_ADR	TYPEE
 2264 397c DB250000 		_UNNEST			// yes, display signed
 2265              	
 2266              	/*************************
ARM GAS  forth.s 			page 138


 2267              	   D. ( d -- )
 2268              	   display double integer 
 2269              	**************************/
 2270 3980 44390000 		_HEADER DDOT,2,"D."
 2270      02442E00 
 2271 3988 504700BF 		_NEST 
 2272 398c 05290000 		_ADR DUPP 
 2273 3990 91280000 		_ADR TOR 
 2274 3994 712B0000 		_ADR DABS 
 2275 3998 39340000 		_ADR BDIGS
 2276 399c A5340000 		_ADR DIGS 
 2277 39a0 4D280000 		_ADR RFROM
 2278 39a4 D9340000 		_ADR SIGN 
 2279 39a8 01350000 		_ADR EDIGS
 2280 39ac AD370000 		_ADR SPACE 
 2281 39b0 01380000 		_ADR TYPEE 
 2282 39b4 DB250000 		_UNNEST 
 2283              	
 2284              	
 2285              	/***********************
 2286              		H. ( w -- )
 2287              		display integer 
 2288              		in hexadecimal 
 2289              	*********************/
 2290 39b8 84390000 		_HEADER HDOT,2,"H."
 2290      02482E00 
 2291 39c0 504700BF 		_NEST 
 2292 39c4 F52D0000 		_ADR BASE
 2293 39c8 21280000 		_ADR AT 
 2294 39cc 15290000 		_ADR SWAP
 2295 39d0 55350000 		_ADR HEX
 2296 39d4 21390000 		_ADR UDOT 
 2297 39d8 F52D0000 		_ADR BASE
 2298 39dc 0D280000 		_ADR STORE  
 2299 39e0 DB250000 		_UNNEST 
 2300              	
 2301              	
 2302              	/***********************
 2303              	    ?	   ( a -- )
 2304              	 	Display the contents
 2305              		in a memory cell.
 2306              	*************************/
 2307 39e4 BC390000 		_HEADER QUEST,1,"?"
 2307      013F00BF 
 2308 39ec 504700BF 		_NEST
 2309 39f0 21280000 		_ADR	AT
 2310 39f4 49390000 		_ADR	DOT
 2311 39f8 DB250000 		_UNNEST
 2312              	
 2313              	/**************
 2314              	  Parsing
 2315              	***************/
 2316              	
 2317              	/*********************************************
 2318              	    parse	( b u c -- b u delta //  string> )
 2319              	 	Scan word delimited by c. 
 2320              		Return found string and its offset.
ARM GAS  forth.s 			page 139


 2321              	hidden word used by PARSE
 2322              	**********************************************/
 2323              	PARS:
 2324 39fc 504700BF 		_NEST
 2325 3a00 012E0000 		_ADR	TEMP
 2326 3a04 0D280000 		_ADR	STORE
 2327 3a08 29290000 		_ADR	OVER
 2328 3a0c 91280000 		_ADR	TOR
 2329 3a10 05290000 		_ADR	DUPP
 2330 3a14 DB270000 		_QBRAN	PARS8
 2330      103B0000 
 2331 3a1c 352A0000 		_ADR	ONEM
 2332 3a20 012E0000 		_ADR	TEMP
 2333 3a24 21280000 		_ADR	AT
 2334 3a28 852A0000 		_ADR	BLANK
 2335 3a2c 512C0000 		_ADR	EQUAL
 2336 3a30 DB270000 		_QBRAN	PARS3
 2336      843A0000 
 2337 3a38 91280000 		_ADR	TOR
 2338              	PARS1:
 2339 3a3c 852A0000 		_ADR	BLANK
 2340 3a40 29290000 		_ADR	OVER
 2341 3a44 41280000 		_ADR	CAT	 // skip leading blanks 
 2342 3a48 D9290000 		_ADR	SUBB
 2343 3a4c 39290000 		_ADR	ZLESS
 2344 3a50 D52B0000 		_ADR	INVER
 2345 3a54 DB270000 		_QBRAN	PARS2
 2345      803A0000 
 2346 3a5c 252A0000 		_ADR	ONEP
 2347 3a60 BD270000 		_DONXT	PARS1
 2347      3C3A0000 
 2348 3a68 4D280000 		_ADR	RFROM
 2349 3a6c F5280000 		_ADR	DROP
 2350 3a70 9B270000 		_DOLIT	0
 2350      00000000 
 2351 3a78 05290000 		_ADR	DUPP
 2352 3a7c DB250000 		_UNNEST
 2353              	PARS2:
 2354 3a80 4D280000 		_ADR	RFROM
 2355              	PARS3:
 2356 3a84 29290000 		_ADR	OVER
 2357 3a88 15290000 		_ADR	SWAP
 2358 3a8c 91280000 		_ADR	TOR
 2359              	PARS4:
 2360 3a90 012E0000 		_ADR	TEMP
 2361 3a94 21280000 		_ADR	AT
 2362 3a98 29290000 		_ADR	OVER
 2363 3a9c 41280000 		_ADR	CAT
 2364 3aa0 D9290000 		_ADR	SUBB // scan for delimiter
 2365 3aa4 012E0000 		_ADR	TEMP
 2366 3aa8 21280000 		_ADR	AT
 2367 3aac 852A0000 		_ADR	BLANK
 2368 3ab0 512C0000 		_ADR	EQUAL
 2369 3ab4 DB270000 		_QBRAN	PARS5
 2369      C03A0000 
 2370 3abc 39290000 		_ADR	ZLESS
 2371              	PARS5:
ARM GAS  forth.s 			page 140


 2372 3ac0 DB270000 		_QBRAN	PARS6
 2372      E43A0000 
 2373 3ac8 252A0000 		_ADR	ONEP
 2374 3acc BD270000 		_DONXT	PARS4
 2374      903A0000 
 2375 3ad4 05290000 		_ADR	DUPP
 2376 3ad8 91280000 		_ADR	TOR
 2377 3adc EF270000 		_BRAN	PARS7
 2377      F83A0000 
 2378              	PARS6:
 2379 3ae4 4D280000 		_ADR	RFROM
 2380 3ae8 F5280000 		_ADR	DROP
 2381 3aec 05290000 		_ADR	DUPP
 2382 3af0 252A0000 		_ADR	ONEP
 2383 3af4 91280000 		_ADR	TOR
 2384              	PARS7:
 2385 3af8 29290000 		_ADR	OVER
 2386 3afc D9290000 		_ADR	SUBB
 2387 3b00 4D280000 		_ADR	RFROM
 2388 3b04 4D280000 		_ADR	RFROM
 2389 3b08 D9290000 		_ADR	SUBB
 2390 3b0c DB250000 		_UNNEST
 2391              	PARS8:
 2392 3b10 29290000 		_ADR	OVER
 2393 3b14 4D280000 		_ADR	RFROM
 2394 3b18 D9290000 		_ADR	SUBB
 2395 3b1c DB250000 		_UNNEST
 2396              	
 2397              	/************************************
 2398              	    PARSE	( c -- b u //  string> )
 2399              	 	Scan input stream and return 
 2400              		counted string delimited by c.
 2401              	************************************/
 2402 3b20 E8390000 		_HEADER PARSE,5,"PARSE"
 2402      05504152 
 2402      534500BF 
 2403 3b2c 504700BF 		_NEST
 2404 3b30 91280000 		_ADR	TOR
 2405 3b34 A9320000 		_ADR	TIB
 2406 3b38 2D2E0000 		_ADR	INN
 2407 3b3c 21280000 		_ADR	AT
 2408 3b40 C9290000 		_ADR	PLUS			// current input buffer pointer
 2409 3b44 452E0000 		_ADR	NTIB
 2410 3b48 21280000 		_ADR	AT
 2411 3b4c 2D2E0000 		_ADR	INN
 2412 3b50 21280000 		_ADR	AT
 2413 3b54 D9290000 		_ADR	SUBB			// remaining count
 2414 3b58 4D280000 		_ADR	RFROM
 2415 3b5c FD390000 		_ADR	PARS
 2416 3b60 2D2E0000 		_ADR	INN
 2417 3b64 112D0000 		_ADR	PSTOR
 2418 3b68 DB250000 		_UNNEST
 2419              	
 2420              	/*******************************
 2421              	    .(	  ( -- )
 2422              	 	Output following string 
 2423              		up to next ) .
ARM GAS  forth.s 			page 141


 2424              	******************************/
 2425 3b6c 243B0000 		_HEADER DOTPR,2,".("
 2425      022E2800 
 2426 3b74 504700BF 		_NEST
 2427 3b78 9B270000 		_DOLIT	')'
 2427      29000000 
 2428 3b80 2D3B0000 		_ADR	PARSE
 2429 3b84 01380000 		_ADR	TYPEE
 2430 3b88 DB250000 		_UNNEST
 2431              	
 2432              	/************************
 2433              	    (	   ( -- )
 2434              	 	Ignore following 
 2435              		string up to next )
 2436              		A comment.
 2437              	************************/
 2438 3b8c 703B0000 		_HEADER PAREN,IMEDD+1,"("
 2438      812800BF 
 2439 3b94 504700BF 		_NEST
 2440 3b98 9B270000 		_DOLIT	')'
 2440      29000000 
 2441 3ba0 2D3B0000 		_ADR	PARSE
 2442 3ba4 152B0000 		_ADR	DDROP
 2443 3ba8 DB250000 		_UNNEST
 2444              	
 2445              	/*******************
 2446              	    \	   ( -- )
 2447              	 	Ignore following 
 2448              		text till the 
 2449              		end of line.
 2450              	********************/
 2451 3bac 903B0000 		_HEADER BKSLA,IMEDD+1,"\\"
 2451      815C00BF 
 2452 3bb4 504700BF 		_NEST
 2453 3bb8 452E0000 		_ADR	NTIB
 2454 3bbc 21280000 		_ADR	AT
 2455 3bc0 2D2E0000 		_ADR	INN
 2456 3bc4 0D280000 		_ADR	STORE
 2457 3bc8 DB250000 		_UNNEST
 2458              	
 2459              	/******************************
 2460              	    CHAR	( -- c )
 2461              	 	Parse next word and
 2462              		return its first character.
 2463              	*******************************/
 2464 3bcc B03B0000 		_HEADER CHAR,4,"CHAR"
 2464      04434841 
 2464      520000BF 
 2465 3bd8 504700BF 		_NEST
 2466 3bdc 852A0000 		_ADR	BLANK
 2467 3be0 2D3B0000 		_ADR	PARSE
 2468 3be4 F5280000 		_ADR	DROP
 2469 3be8 41280000 		_ADR	CAT
 2470 3bec DB250000 		_UNNEST
 2471              	
 2472              	/**********************************
 2473              		[CHAR] ( -- c )
ARM GAS  forth.s 			page 142


 2474              		immediate version of CHAR 
 2475              	**********************************/
 2476 3bf0 D03B0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2476      C65B4348 
 2476      41525D00 
 2477 3bfc 504700BF 		_NEST 
 2478 3c00 D93B0000 		_ADR CHAR
 2479 3c04 25430000 		_ADR LITER 
 2480 3c08 DB250000 		_UNNEST 
 2481              	
 2482              	/**********************************
 2483              	    WORD	( c -- a //  string> )
 2484              	 	Parse a word from input stream
 2485              		and copy it to code dictionary.
 2486              	***********************************/
 2487 3c0c F43B0000 		_HEADER WORDD,4,"WORD"
 2487      04574F52 
 2487      440000BF 
 2488 3c18 504700BF 		_NEST
 2489 3c1c 2D3B0000 		_ADR	PARSE
 2490 3c20 71320000 		_ADR	HERE
 2491 3c24 652A0000 		_ADR	CELLP
 2492 3c28 79330000 		_ADR	PACKS
 2493 3c2c DB250000 		_UNNEST
 2494              	
 2495              	/********************************
 2496              	    TOKEN	( -- a //  string> )
 2497              	 	Parse a word from input 
 2498              		stream and copy it to 
 2499              		name dictionary.
 2500              	*********************************/
 2501 3c30 103C0000 		_HEADER TOKEN,5,"TOKEN"
 2501      05544F4B 
 2501      454E00BF 
 2502 3c3c 504700BF 		_NEST
 2503 3c40 852A0000 		_ADR	BLANK
 2504 3c44 193C0000 		_ADR	WORDD
 2505 3c48 313E0000 		_ADR	UPPER 
 2506 3c4c DB250000 		_UNNEST
 2507              	
 2508              	/**********************
 2509              	  Dictionary search
 2510              	***********************/
 2511              	
 2512              	/*************************
 2513              	    NAME>	( na -- ca )
 2514              	 	Return a code address
 2515              		given a name address.
 2516              	**************************/
 2517 3c50 343C0000 		_HEADER NAMET,5,"NAME>"
 2517      054E414D 
 2517      453E00BF 
 2518 3c5c 504700BF 		_NEST
 2519 3c60 592D0000 		_ADR	COUNT
 2520 3c64 9B270000 		_DOLIT	0x1F
 2520      1F000000 
 2521 3c6c 49290000 		_ADR	ANDD
ARM GAS  forth.s 			page 143


 2522 3c70 C9290000 		_ADR	PLUS
 2523 3c74 BD310000 		_ADR	ALGND
 2524 3c78 DB250000 		_UNNEST
 2525              	
 2526              	/***************************************
 2527              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2528              	 	Compare u bytes in two strings. 
 2529              		Return 0 if identical.
 2530              	
 2531              	  Picatout 2020-12-01, 
 2532              	    Because of problem with .align 
 2533              		directive that doesn't fill 
 2534              		with zero's I had to change 
 2535              		the "SAME?" and "FIND" 
 2536              	 	words  to do a byte by byte comparison. 
 2537              	****************************************/
 2538 3c7c 543C0000 		_HEADER SAMEQ,5,"SAME?"
 2538      0553414D 
 2538      453F00BF 
 2539 3c88 504700BF 		_NEST
 2540 3c8c 91280000 		_ADR	TOR
 2541 3c90 EF270000 		_BRAN	SAME2
 2541      D43C0000 
 2542              	SAME1:
 2543 3c98 29290000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2544 3c9c 7D280000 		_ADR	RAT   // a1 a2 a1 u 
 2545 3ca0 C9290000 		_ADR	PLUS  // a1 a2 a1+u 
 2546 3ca4 41280000 		_ADR	CAT	   // a1 a2 c1    		
 2547 3ca8 29290000 		_ADR	OVER  // a1 a2 c1 a2 
 2548 3cac 7D280000 		_ADR	RAT    
 2549 3cb0 C9290000 		_ADR	PLUS    
 2550 3cb4 41280000 		_ADR	CAT	  // a1 a2 c1 c2
 2551 3cb8 D9290000 		_ADR	SUBB  
 2552 3cbc D92A0000 		_ADR	QDUP
 2553 3cc0 DB270000 		_QBRAN	SAME2
 2553      D43C0000 
 2554 3cc8 4D280000 		_ADR	RFROM
 2555 3ccc F5280000 		_ADR	DROP
 2556 3cd0 DB250000 		_UNNEST	// strings not equal
 2557              	SAME2:
 2558 3cd4 BD270000 		_DONXT	SAME1
 2558      983C0000 
 2559 3cdc 9B270000 		_DOLIT	0
 2559      00000000 
 2560 3ce4 DB250000 		_UNNEST	// strings equal
 2561              	
 2562              	/***********************************
 2563              	    FIND	( a na -- ca na | a F )
 2564              	 	Search a vocabulary for a string.
 2565              		Return ca and na if succeeded.
 2566              	hidden word used by NAME?
 2567              	
 2568              	  Picatout 2020-12-01,  
 2569              		 Modified from original. 
 2570              	   See comment for word "SAME?" 
 2571              	************************************/
 2572              	FIND:
ARM GAS  forth.s 			page 144


 2573 3ce8 504700BF 		_NEST
 2574 3cec 15290000 		_ADR	SWAP			// na a	
 2575 3cf0 592D0000 		_ADR	COUNT			// na a+1 count
 2576 3cf4 05290000 		_ADR	DUPP 
 2577 3cf8 012E0000 		_ADR	TEMP
 2578 3cfc 0D280000 		_ADR	STORE			// na a+1 count 
 2579 3d00 91280000 		_ADR  TOR		// na a+1  R: count  
 2580 3d04 15290000 		_ADR	SWAP			// a+1 na
 2581              	FIND1:
 2582 3d08 05290000 		_ADR	DUPP			// a+1 na na
 2583 3d0c DB270000 		_QBRAN	FIND6	// end of vocabulary
 2583      603D0000 
 2584 3d14 05290000 		_ADR	DUPP			// a+1 na na
 2585 3d18 41280000 		_ADR	CAT			// a+1 na name1
 2586 3d1c 9B270000 		_DOLIT	MASKK
 2586      1FFFFFFF 
 2587 3d24 49290000 		_ADR	ANDD
 2588 3d28 7D280000 		_ADR	RAT			// a+1 na name1 count 
 2589 3d2c 71290000 		_ADR	XORR			// a+1 na,  same length?
 2590 3d30 DB270000 		_QBRAN	FIND2
 2590      483D0000 
 2591 3d38 752A0000 		_ADR	CELLM			// a+1 la
 2592 3d3c 21280000 		_ADR	AT			// a+1 next_na
 2593 3d40 EF270000 		_BRAN	FIND1			// try next word
 2593      083D0000 
 2594              	FIND2:   
 2595 3d48 252A0000 		_ADR	ONEP			// a+1 na+1
 2596 3d4c 012E0000 		_ADR	TEMP
 2597 3d50 21280000 		_ADR	AT			// a+1 na+1 count
 2598 3d54 893C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2599              	FIND3:	
 2600 3d58 EF270000 		_BRAN	FIND4
 2600      783D0000 
 2601              	FIND6:	
 2602 3d60 4D280000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2603 3d64 F5280000 		_ADR	DROP			// a+1 0
 2604 3d68 15290000 		_ADR	SWAP			// 0 a+1
 2605 3d6c 352A0000 		_ADR	ONEM			// 0 a
 2606 3d70 15290000 		_ADR	SWAP			// a 0 
 2607 3d74 DB250000 		_UNNEST			// return without a match
 2608              	FIND4:	
 2609 3d78 DB270000 		_QBRAN	FIND5			// a+1 na+1
 2609      943D0000 
 2610 3d80 352A0000 		_ADR	ONEM			// a+1 na
 2611 3d84 752A0000 		_ADR	CELLM			// a+4 la
 2612 3d88 21280000 		_ADR	AT			// a+1 next_na
 2613 3d8c EF270000 		_BRAN	FIND1			// compare next name
 2613      083D0000 
 2614              	FIND5:	
 2615 3d94 4D280000 		_ADR	RFROM			// a+1 na+1 count
 2616 3d98 F5280000 		_ADR	DROP			// a+1 na+1
 2617 3d9c 15290000 		_ADR	SWAP			// na+1 a+1
 2618 3da0 F5280000 		_ADR	DROP			// na+1
 2619 3da4 352A0000 		_ADR	ONEM			// na
 2620 3da8 05290000 		_ADR	DUPP			// na na
 2621 3dac 5D3C0000 		_ADR	NAMET			// na ca
 2622 3db0 15290000 		_ADR	SWAP			// ca na
ARM GAS  forth.s 			page 145


 2623 3db4 DB250000 		_UNNEST			//  return with a match
 2624              	
 2625              	/********************************
 2626              	    NAME?	( a -- ca na | a F )
 2627              	 	Search all context vocabularies 
 2628              		for a string.
 2629              	***********************************/
 2630 3db8 803C0000 		_HEADER NAMEQ,5,"NAME?"
 2630      054E414D 
 2630      453F00BF 
 2631 3dc4 504700BF 		_NEST
 2632 3dc8 892E0000 		_ADR	CNTXT
 2633 3dcc 21280000 		_ADR	AT
 2634 3dd0 E93C0000 		_ADR	FIND
 2635 3dd4 DB250000 		_UNNEST
 2636              	
 2637              	/********************
 2638              	  console input
 2639              	********************/
 2640              	
 2641              	/****************************
 2642              		ASCIZ ( a -- a+ )
 2643              		convert counted string to 
 2644              		null terminated string 
 2645              		in pad.
 2646              	*****************************/
 2647 3dd8 BC3D0000 		_HEADER ASCIZ,5,"ASCIZ" 
 2647      05415343 
 2647      495A00BF 
 2648 3de4 504700BF 		_NEST 
 2649 3de8 592D0000 		_ADR COUNT
 2650 3dec 05290000 		_ADR DUPP
 2651 3df0 91280000 		_ADR TOR 
 2652 3df4 89320000 		_ADR PAD 
 2653 3df8 15290000 		_ADR SWAP
 2654 3dfc 11330000 		_ADR MOVE  
 2655 3e00 89320000 		_ADR PAD 
 2656 3e04 4D280000 		_ADR RFROM
 2657 3e08 C9290000 		_ADR PLUS 
 2658 3e0c 9B270000 		_DOLIT 0 
 2658      00000000 
 2659 3e14 15290000 		_ADR SWAP  
 2660 3e18 2D280000 		_ADR CSTOR
 2661 3e1c 89320000 		_ADR PAD   
 2662 3e20 DB250000 		_UNNEST 
 2663              	
 2664              	/***********************
 2665              		UPPER (cstring -- cstring )
 2666              		convert to upper case in situ
 2667              	*******************************/
 2668 3e24 DC3D0000 		_HEADER UPPER,5,"UPPER"
 2668      05555050 
 2668      455200BF 
 2669 3e30 504700BF 		_NEST 
 2670 3e34 05290000 		_ADR DUPP 
 2671 3e38 91280000 		_ADR TOR 
 2672 3e3c 592D0000 		_ADR COUNT
ARM GAS  forth.s 			page 146


 2673 3e40 9B270000 		_DOLIT 0x1f
 2673      1F000000 
 2674 3e48 49290000 		_ADR ANDD
 2675 3e4c 91280000 		_ADR TOR 
 2676 3e50 EF270000 		_BRAN 3f
 2676      A43E0000 
 2677 3e58 05290000 	1:  _ADR DUPP 
 2678 3e5c 592D0000 		_ADR COUNT 
 2679 3e60 05290000 		_ADR DUPP 
 2680 3e64 9B270000 		_DOLIT 'a'-1
 2680      60000000 
 2681 3e6c D12C0000 		_ADR GREAT
 2682 3e70 DB270000 		_QBRAN 2f 
 2682      9C3E0000 
 2683 3e78 05290000 		_ADR DUPP 
 2684 3e7c 9B270000 		_DOLIT 'z'+1 
 2684      7B000000 
 2685 3e84 A12C0000 		_ADR LESS 
 2686 3e88 DB270000 		_QBRAN 2f 
 2686      9C3E0000 
 2687 3e90 9B270000 		_DOLIT 0x5f  
 2687      5F000000 
 2688 3e98 49290000 		_ADR ANDD
 2689 3e9c ED2A0000 	2:	_ADR ROT
 2690 3ea0 2D280000 		_ADR CSTOR
 2691 3ea4 BD270000 	3:  _DONXT 1b
 2691      583E0000 
 2692 3eac F5280000 		_ADR DROP 
 2693 3eb0 4D280000 		_ADR RFROM
 2694 3eb4 DB250000 		_UNNEST 
 2695              	
 2696              	/**************************************
 2697              	   BKSP  ( bot eot cur -- bot eot cur )
 2698              	   Move cursor left by one character.
 2699              	hidden word used by KTAP
 2700              	***************************************/
 2701              	BKSP:
 2702 3eb8 504700BF 		_NEST
 2703 3ebc 91280000 		_ADR	TOR
 2704 3ec0 29290000 		_ADR	OVER
 2705 3ec4 4D280000 		_ADR	RFROM
 2706 3ec8 15290000 		_ADR	SWAP
 2707 3ecc 29290000 		_ADR	OVER
 2708 3ed0 71290000 		_ADR	XORR
 2709 3ed4 DB270000 		_QBRAN	BACK1
 2709      003F0000 
 2710 3edc 9B270000 		_DOLIT	BKSPP
 2710      08000000 
 2711 3ee4 A5260000 		_ADR	EMIT
 2712 3ee8 352A0000 		_ADR	ONEM
 2713 3eec 852A0000 		_ADR	BLANK
 2714 3ef0 A5260000 		_ADR	EMIT
 2715 3ef4 9B270000 		_DOLIT	BKSPP
 2715      08000000 
 2716 3efc A5260000 		_ADR	EMIT
 2717              	BACK1:
 2718 3f00 DB250000 		  _UNNEST
ARM GAS  forth.s 			page 147


 2719              	
 2720              	/****************************************
 2721              	   TAP	 ( bot eot cur c -- bot eot cur )
 2722              	   Accept and echo the key stroke 
 2723              	   and bump the cursor.
 2724              	hidden word used by KTAP 
 2725              	****************************************/
 2726              	TAP:
 2727 3f04 504700BF 		_NEST
 2728 3f08 05290000 		_ADR	DUPP
 2729 3f0c A5260000 		_ADR	EMIT
 2730 3f10 29290000 		_ADR	OVER
 2731 3f14 2D280000 		_ADR	CSTOR
 2732 3f18 252A0000 		_ADR	ONEP
 2733 3f1c DB250000 		_UNNEST
 2734              	
 2735              	
 2736              	/*******************************************
 2737              	    kTAP	( bot eot cur c -- bot eot cur )
 2738              	 	Process a key stroke, CR or backspace.
 2739              	hidden word used by ACCEPT 
 2740              	*******************************************/
 2741              	KTAP:
 2742              	TTAP:
 2743 3f20 504700BF 		_NEST
 2744 3f24 05290000 		_ADR	DUPP
 2745 3f28 9B270000 		_DOLIT	CRR
 2745      0D000000 
 2746 3f30 71290000 		_ADR	XORR
 2747 3f34 DB270000 		_QBRAN  KTAP2
 2747      643F0000 
 2748 3f3c 9B270000 		_DOLIT	BKSPP
 2748      08000000 
 2749 3f44 71290000 		_ADR	XORR
 2750 3f48 DB270000 		_QBRAN	KTAP1
 2750      5C3F0000 
 2751 3f50 852A0000 		_ADR	BLANK
 2752 3f54 053F0000 		_ADR	TAP
 2753 3f58 DB250000 		_UNNEST
 2754              	//	.word	0			// patch
 2755              	KTAP1:
 2756 3f5c B93E0000 		_ADR	BKSP
 2757 3f60 DB250000 		_UNNEST
 2758              	KTAP2:
 2759 3f64 F5280000 		_ADR	DROP
 2760 3f68 15290000 		_ADR	SWAP
 2761 3f6c F5280000 		_ADR	DROP
 2762 3f70 05290000 		_ADR	DUPP
 2763 3f74 DB250000 		_UNNEST
 2764              	
 2765              	/************************************
 2766              	    ACCEPT	( b u -- b u )
 2767              	 	Accept characters to input 
 2768              		buffer. Return with actual count.
 2769              	*************************************/
 2770 3f78 283E0000 		_HEADER ACCEP,6,"ACCEPT"
 2770      06414343 
ARM GAS  forth.s 			page 148


 2770      45505400 
 2771 3f84 504700BF 		_NEST
 2772 3f88 29290000 		_ADR	OVER
 2773 3f8c C9290000 		_ADR	PLUS
 2774 3f90 29290000 		_ADR	OVER
 2775              	ACCP1:
 2776 3f94 3D2B0000 		_ADR	DDUP
 2777 3f98 71290000 		_ADR	XORR
 2778 3f9c DB270000 		_QBRAN	ACCP4
 2778      DC3F0000 
 2779 3fa4 81260000 		_ADR	KEY
 2780 3fa8 05290000 		_ADR	DUPP
 2781 3fac 852A0000 		_ADR	BLANK
 2782 3fb0 9B270000 		_DOLIT 127
 2782      7F000000 
 2783 3fb8 212F0000 		_ADR	WITHI
 2784 3fbc DB270000 		_QBRAN	ACCP2
 2784      D03F0000 
 2785 3fc4 053F0000 		_ADR	TAP
 2786 3fc8 EF270000 		_BRAN	ACCP3
 2786      D43F0000 
 2787              	ACCP2:
 2788 3fd0 213F0000 		_ADR	KTAP
 2789              	ACCP3:	  
 2790 3fd4 EF270000 		_BRAN	ACCP1
 2790      943F0000 
 2791              	ACCP4:
 2792 3fdc F5280000 		_ADR	DROP
 2793 3fe0 29290000 		_ADR	OVER
 2794 3fe4 D9290000 		_ADR	SUBB
 2795 3fe8 DB250000 		_UNNEST
 2796              	
 2797              	/*****************************
 2798              	    QUERY	( -- )
 2799              	 	Accept input stream 
 2800              		to terminal input buffer.
 2801              	******************************/
 2802 3fec 7C3F0000 		_HEADER QUERY,5,"QUERY"
 2802      05515545 
 2802      525900BF 
 2803 3ff8 504700BF 		_NEST
 2804 3ffc A9320000 		_ADR	TIB
 2805 4000 9B270000 		_DOLIT 80
 2805      50000000 
 2806 4008 853F0000 		_ADR	ACCEP
 2807 400c 452E0000 		_ADR	NTIB
 2808 4010 0D280000 		_ADR	STORE
 2809 4014 F5280000 		_ADR	DROP
 2810 4018 9B270000 		_DOLIT	0
 2810      00000000 
 2811 4020 2D2E0000 		_ADR	INN
 2812 4024 0D280000 		_ADR	STORE
 2813 4028 DB250000 		_UNNEST
 2814              	
 2815              	/********************
 2816              	  Error handling
 2817              	********************/
ARM GAS  forth.s 			page 149


 2818              	
 2819              	/*********************
 2820              	    ABORT	( a -- )
 2821              	 	Reset data stack 
 2822              		and jump to QUIT.
 2823              	**********************/
 2824 402c F03F0000 		_HEADER ABORT,5,"ABORT"
 2824      0541424F 
 2824      525400BF 
 2825 4038 504700BF 		_NEST
 2826              	ABORT1:
 2827 403c AD370000 		_ADR	SPACE
 2828 4040 592D0000 		_ADR	COUNT
 2829 4044 01380000 		_ADR	TYPEE
 2830 4048 9B270000 		_DOLIT	0X3F
 2830      3F000000 
 2831 4050 A5260000 		_ADR	EMIT
 2832 4054 35380000 		_ADR	CR
 2833 4058 C1410000 		_ADR	PRESE
 2834 405c EF270000 		_BRAN	QUIT
 2834      E0410000 
 2835              	
 2836              	/*******************************
 2837              	    _abort"	( f -- )
 2838              	 	Run time routine of ABORT"
 2839              		Abort with a message.
 2840              	hidden used by compiler 
 2841              	********************************/
 2842              	ABORQ:
 2843 4064 504700BF 		_NEST
 2844 4068 55380000 		_ADR	DOSTR
 2845 406c 15290000 		_ADR	SWAP 
 2846 4070 DB270000 		_QBRAN	1f	// text flag
 2846      80400000 
 2847 4078 EF270000 		_BRAN	ABORT1
 2847      3C400000 
 2848              	1:
 2849 4080 F5280000 		_ADR	DROP
 2850 4084 DB250000 		_UNNEST			// drop error
 2851              	
 2852              	/************************
 2853              	  The text interpreter
 2854              	************************/
 2855              	
 2856              	/***************************
 2857              	    $INTERPRET  ( a -- )
 2858              	 	Interpret a word. 
 2859              		If failed, try to 
 2860              		convert it to an integer.
 2861              	******************************/
 2862 4088 30400000 		_HEADER INTER,10,"$INTERPRET"
 2862      0A24494E 
 2862      54455250 
 2862      52455400 
 2863 4098 504700BF 		_NEST
 2864 409c C53D0000 		_ADR	NAMEQ
 2865 40a0 D92A0000 		_ADR	QDUP	// ?defined
ARM GAS  forth.s 			page 150


 2866 40a4 DB270000 		_QBRAN	INTE1
 2866      D8400000 
 2867 40ac 21280000 		_ADR	AT
 2868 40b0 9B270000 		_DOLIT	COMPO
 2868      40000000 
 2869 40b8 49290000 		_ADR	ANDD	// ?compile only lexicon bits
 2870 40bc 65400000 		_ABORQ	13," compile only"
 2870      0D20636F 
 2870      6D70696C 
 2870      65206F6E 
 2870      6C7900BF 
 2871 40d0 B1270000 		_ADR	EXECU
 2872 40d4 DB250000 		_UNNEST			// execute defined word
 2873              	INTE1:
 2874 40d8 CD200000 		_ADR	NUMBER 
 2875 40dc DB270000 		_QBRAN	INTE2
 2875      E8400000 
 2876 40e4 DB250000 		_UNNEST
 2877              	INTE2:
 2878 40e8 39400000 		_ADR	ABORT	// error
 2879              	
 2880              	/******************************
 2881              	    [	   ( -- )
 2882              	 	Start the text interpreter.
 2883              	*******************************/
 2884 40ec 8C400000 		_HEADER LBRAC,IMEDD+1,"["
 2884      815B00BF 
 2885 40f4 504700BF 		_NEST
 2886 40f8 9B270000 		_DOLIT	INTER
 2886      98400000 
 2887 4100 5D2E0000 		_ADR	TEVAL
 2888 4104 0D280000 		_ADR	STORE
 2889 4108 DB250000 		_UNNEST
 2890              	
 2891              	/**********************
 2892              	    .OK	 ( -- )
 2893              	 	Display "ok" only 
 2894              		while interpreting.
 2895              	************************/
 2896 410c F0400000 		_HEADER DOTOK,3,".OK"
 2896      032E4F4B 
 2897 4114 504700BF 		_NEST
 2898 4118 9B270000 		_DOLIT	INTER
 2898      98400000 
 2899 4120 5D2E0000 		_ADR	TEVAL
 2900 4124 21280000 		_ADR	AT
 2901 4128 512C0000 		_ADR	EQUAL
 2902 412c DB270000 		_QBRAN	DOTO1
 2902      3C410000 
 2903 4134 9D380000 		_DOTQP	3," ok"
 2903      03206F6B 
 2904              	DOTO1:
 2905 413c 35380000 		_ADR	CR
 2906 4140 DB250000 		_UNNEST
 2907              	
 2908              	/*************************
 2909              	    ?STACK	( -- )
ARM GAS  forth.s 			page 151


 2910              	 	Abort if the data 
 2911              		stack underflows.
 2912              	************************/
 2913 4144 10410000 		_HEADER QSTAC,6,"?STACK"
 2913      063F5354 
 2913      41434B00 
 2914 4150 504700BF 		_NEST
 2915 4154 25320000 		_ADR	DEPTH
 2916 4158 39290000 		_ADR	ZLESS	// check only for underflow
 2917 415c 65400000 		_ABORQ	9,"underflow"
 2917      09756E64 
 2917      6572666C 
 2917      6F7700BF 
 2918 416c DB250000 		_UNNEST
 2919              	
 2920              	/*******************
 2921              	    EVAL	( -- )
 2922              	 	Interpret the 
 2923              		input stream.
 2924              	*******************/
 2925 4170 48410000 		_HEADER EVAL,4,"EVAL"
 2925      04455641 
 2925      4C0000BF 
 2926 417c 504700BF 		_NEST
 2927              	EVAL1:
 2928 4180 3D3C0000 	    _ADR	TOKEN
 2929 4184 05290000 		_ADR	DUPP
 2930 4188 41280000 		_ADR	CAT	// ?input stream empty
 2931 418c DB270000 		_QBRAN	EVAL2
 2931      A8410000 
 2932 4194 5D2E0000 		_ADR	TEVAL
 2933 4198 C1320000 		_ADR	ATEXE
 2934 419c 51410000 		_ADR	QSTAC	// evaluate input, check stack
 2935 41a0 EF270000 		_BRAN	EVAL1
 2935      80410000 
 2936              	EVAL2:
 2937 41a8 F5280000 		_ADR	DROP
 2938 41ac 15410000 		_ADR	DOTOK
 2939 41b0 DB250000 		_UNNEST	// prompt
 2940              	
 2941              	/**********************************
 2942              	    PRESET	( -- )
 2943              	 	Reset data stack pointer 
 2944              		and the terminal input buffer.
 2945              	**********************************/
 2946 41b4 74410000 		_HEADER PRESE,6,"PRESET"
 2946      06505245 
 2946      53455400 
 2947 41c0 504700BF 		_NEST 
 2948 41c4 9B270000 		_DOLIT SPP 
 2948      80FE0120 
 2949 41cc D1280000 		_ADR SPSTOR 
 2950 41d0 DB250000 		_UNNEST 
 2951              	
 2952              	/*********************
 2953              	    QUIT	( -- )
 2954              	 	Reset return stack 
ARM GAS  forth.s 			page 152


 2955              		pointer and start 
 2956              		text interpreter.
 2957              	***********************/
 2958 41d4 B8410000 		_HEADER QUIT,4,"QUIT"
 2958      04515549 
 2958      540000BF 
 2959 41e0 9B270000 		_DOLIT RPP 
 2959      00FF0120 
 2960 41e8 C1280000 		_ADR RPSTOR 
 2961              	QUIT1:
 2962 41ec F5400000 		_ADR	LBRAC			// start interpretation
 2963              	QUIT2:
 2964 41f0 F93F0000 		_ADR	QUERY			// get input
 2965 41f4 7D410000 		_ADR	EVAL
 2966 41f8 EF270000 		_BRAN	QUIT2	// continue till error
 2966      F0410000 
 2967              	
 2968              	/***************************
 2969              		FORGET ( <string> -- )
 2970              		forget all definition 
 2971              		starting at <string>
 2972              	****************************/
 2973 4200 D8410000 		_HEADER FORGET,6,"FORGET"
 2973      06464F52 
 2973      47455400 
 2974 420c 504700BF 		_NEST 
 2975 4210 3D3C0000 		_ADR TOKEN 
 2976 4214 05290000 		_ADR DUPP 
 2977 4218 DB270000 		_QBRAN 9f 
 2977      54420000 
 2978 4220 C53D0000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2979 4224 D92A0000 		_ADR QDUP 
 2980 4228 DB270000 		_QBRAN 8f
 2980      50420000 
 2981 4230 752A0000 		_ADR CELLM // ( ca la )
 2982 4234 05290000 		_ADR DUPP 
 2983 4238 9D2E0000 		_ADR CPP   
 2984 423c 0D280000 		_ADR STORE
 2985 4240 21280000 		_ADR AT 
 2986 4244 C92E0000 		_ADR LAST 
 2987 4248 0D280000 		_ADR STORE
 2988 424c A9470000 		_ADR OVERT 
 2989 4250 F5280000 	8:  _ADR DROP 
 2990 4254 DB250000 	9:	_UNNEST 
 2991              	
 2992              		.p2align 2 
 2993              	
 2994              	/*****************
 2995              	  The compiler
 2996              	******************/
 2997              	
 2998              	/**************************************
 2999              	    '	   ( -- ca )
 3000              	 	Search context vocabularies 
 3001              		for the next word in input stream.
 3002              	***************************************/
 3003 4258 04420000 		_HEADER TICK,1,"'"
ARM GAS  forth.s 			page 153


 3003      012700BF 
 3004 4260 504700BF 		_NEST
 3005 4264 3D3C0000 		_ADR	TOKEN
 3006 4268 C53D0000 		_ADR	NAMEQ	// ?defined
 3007 426c DB270000 		_QBRAN	TICK1
 3007      78420000 
 3008 4274 DB250000 		_UNNEST	// yes, push code address
 3009              	TICK1:	
 3010 4278 39400000 		_ADR ABORT	// no, error
 3011              	
 3012              	/***********************
 3013              	    ALLOT	( n -- )
 3014              	 	Allocate n bytes to 
 3015              		the ram area.
 3016              	************************/
 3017 427c 5C420000 		_HEADER ALLOT,5,"ALLOT"
 3017      05414C4C 
 3017      4F5400BF 
 3018 4288 504700BF 		_NEST
 3019 428c 9D2E0000 		_ADR	CPP
 3020 4290 112D0000 		_ADR	PSTOR
 3021 4294 DB250000 		_UNNEST			// adjust code pointer
 3022              	
 3023              	/******************************
 3024              	    ,	   ( w -- )
 3025              	 	Compile an integer 
 3026              		into the code dictionary.
 3027              	******************************/
 3028 4298 80420000 		_HEADER COMMA,1,","
 3028      012C00BF 
 3029 42a0 504700BF 		_NEST
 3030 42a4 71320000 		_ADR	HERE
 3031 42a8 05290000 		_ADR	DUPP
 3032 42ac 652A0000 		_ADR	CELLP	// cell boundary
 3033 42b0 9D2E0000 		_ADR	CPP
 3034 42b4 0D280000 		_ADR	STORE
 3035 42b8 0D280000 		_ADR	STORE
 3036 42bc DB250000 		_UNNEST	// adjust code pointer, compile
 3037              		.p2align 2 
 3038              	
 3039              	/************************************
 3040              	    [COMPILE]   ( -- //  string> )
 3041              	 	Compile the next immediate word 
 3042              		into code dictionary.
 3043              	*************************************/
 3044 42c0 9C420000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3044      895B434F 
 3044      4D50494C 
 3044      455D00BF 
 3045 42d0 504700BF 		_NEST
 3046 42d4 61420000 		_ADR	TICK
 3047 42d8 A1420000 		_ADR	COMMA
 3048 42dc DB250000 		_UNNEST
 3049              	
 3050              	/****************************
 3051              	    COMPILE	( -- )
 3052              	 	Compile the next address 
ARM GAS  forth.s 			page 154


 3053              		in colon list to code 
 3054              		dictionary.
 3055              	*******************************/
 3056 42e0 C4420000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3056      47434F4D 
 3056      50494C45 
 3057 42ec 504700BF 		_NEST
 3058 42f0 4D280000 		_ADR	RFROM
 3059 42f4 05290000 		_ADR	DUPP 
 3060 42f8 21280000 		_ADR	AT
 3061 42fc 9B270000 		_DOLIT 1 
 3061      01000000 
 3062 4304 5D290000 		_ADR	ORR 
 3063 4308 A1420000 		_ADR	COMMA 
 3064 430c 652A0000 		_ADR	CELLP 
 3065 4310 91280000 		_ADR	TOR 
 3066 4314 DB250000 		_UNNEST	// adjust return address
 3067              	
 3068              	/*************************
 3069              	    LITERAL	( w -- )
 3070              	 	Compile tos to code 
 3071              		dictionary as an 
 3072              		integer literal.
 3073              	***************************/
 3074 4318 E4420000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3074      874C4954 
 3074      4552414C 
 3075 4324 504700BF 		_NEST
 3076 4328 9B270000 		_COMPI	DOLIT
 3076      9A270000 
 3076      05480000 
 3077 4334 A1420000 		_ADR	COMMA
 3078 4338 DB250000 		_UNNEST
 3079              	
 3080              	/********************
 3081              	    $,"	( -- )
 3082              	 	Compile a literal 
 3083              		string up to next " .
 3084              	hidden word 
 3085              	************************/
 3086              	STRCQ:
 3087 433c 504700BF 		_NEST
 3088 4340 9B270000 		_DOLIT -4
 3088      FCFFFFFF 
 3089 4348 9D2E0000 		_ADR	CPP
 3090 434c 112D0000 		_ADR	PSTOR
 3091 4350 9B270000 		_DOLIT	'\"'
 3091      22000000 
 3092 4358 193C0000 		_ADR	WORDD			// move word to code dictionary
 3093 435c 592D0000 		_ADR	COUNT
 3094 4360 C9290000 		_ADR	PLUS
 3095 4364 BD310000 		_ADR	ALGND			// calculate aligned end of string
 3096 4368 9D2E0000 		_ADR	CPP
 3097 436c 0D280000 		_ADR	STORE
 3098 4370 DB250000 		_UNNEST 			// adjust the code pointer
 3099              	
 3100              	/*******************
ARM GAS  forth.s 			page 155


 3101              	   Structures
 3102              	*******************/
 3103              	
 3104              	/*************************
 3105              	    FOR	 ( -- a )
 3106              	 	Start a FOR-NEXT loop 
 3107              		structure in a colon 
 3108              		definition.
 3109              	**************************/
 3110 4374 1C430000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3110      C3464F52 
 3111 437c 504700BF 		_NEST
 3112 4380 9B270000 		_COMPI	TOR
 3112      90280000 
 3112      05480000 
 3113 438c 71320000 		_ADR	HERE
 3114 4390 DB250000 		_UNNEST
 3115              	
 3116              	/********************************
 3117              		DO ( limit start -- )
 3118              		initialise a DO...LOOP 
 3119              		or DO...+LOOP 
 3120              	********************************/
 3121 4394 78430000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3121      C2444F00 
 3122 439c 504700BF 		_NEST
 3123 43a0 9B270000 		_COMPI SWAP
 3123      14290000 
 3123      05480000 
 3124 43ac 9B270000 		_COMPI TOR 
 3124      90280000 
 3124      05480000 
 3125 43b8 9B270000 		_COMPI TOR 
 3125      90280000 
 3125      05480000 
 3126 43c4 71320000 		_ADR HERE 
 3127 43c8 DB250000 		_UNNEST 
 3128              	
 3129              	DOPLOOP: // ( n -- R: counter limit )
 3130 43cc B8E80300 		ldmfd RSP!,{T0,T1}
 3131 43d0 3044     		add T0,TOS 
 3132 43d2 28E90300 		stmfd RSP!,{T0,T1}
 3133 43d6 8842     		cmp T0,T1 
 3134 43d8 05D4     		bmi 9f 
 3135 43da 08F10808 		add RSP,#8
 3136 43de 0CF1040C 		add IP,#4
 3137 43e2 FEF7F7B8 		_NEXT 
 3138 43e6 DCF800C0 	9:  ldr IP,[IP]
 3139 43ea FEF7F3B8 		_NEXT 
 3140              		
 3141              	/***************************
 3142              		+LOOP ( a -- )
 3143              		increment counter 
 3144              		end loop if countr>limit
 3145              	****************************/
 3146 43ee 98430000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3146      C52B4C4F 
ARM GAS  forth.s 			page 156


 3146      4F50
 3147 43f8 504700BF 		_NEST 
 3148 43fc 9B270000 		_COMPI DOPLOOP 
 3148      CC430000 
 3148      05480000 
 3149 4408 A1420000 		_ADR COMMA
 3150 440c DB250000 		_UNNEST 
 3151              	
 3152              	DOLOOP: // ( -- R: counter limit )
 3153 4410 D8F80000 		ldr T0,[RSP]
 3154 4414 00F10100 		add T0,#1
 3155 4418 C8F80000 		str T0,[RSP]
 3156 441c D8F80410 		ldr T1,[RSP,#4]
 3157 4420 8842     		cmp T0,T1 
 3158 4422 05D4     		bmi 9f
 3159 4424 08F10808 		add RSP,#8  // counter and limit  
 3160 4428 0CF1040C 		add IP,IP,#4 // skip loop address 
 3161 442c FEF7D2B8 		_NEXT 
 3162 4430 DCF800C0 	9:  ldr IP,[IP]
 3163 4434 FEF7CEB8 		_NEXT 
 3164              	
 3165              	
 3166              	/********************************
 3167              		LOOP ( a -- )
 3168              		increment counter 
 3169              		end loop if >= limit 
 3170              	*********************************/
 3171 4438 F2430000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3171      C44C4F4F 
 3171      500000BF 
 3172 4444 504700BF 		_NEST 
 3173 4448 9B270000 		_COMPI DOLOOP
 3173      10440000 
 3173      05480000 
 3174 4454 A1420000 		_ADR COMMA 
 3175 4458 DB250000 		_UNNEST 
 3176              	
 3177              	
 3178              	/**********************
 3179              	    BEGIN	( -- a )
 3180              	 	Start an infinite 
 3181              		or indefinite 
 3182              		loop structure.
 3183              	************************/
 3184 445c 3C440000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3184      C5424547 
 3184      494E00BF 
 3185 4468 504700BF 		_NEST
 3186 446c 71320000 		_ADR	HERE
 3187 4470 DB250000 		_UNNEST
 3188              		.p2align 2 
 3189              	
 3190              	/********************
 3191              	    NEXT	( a -- )
 3192              	 	Terminate a FOR-NEXT
 3193              		loop structure.
 3194              	**************************/
ARM GAS  forth.s 			page 157


 3195 4474 60440000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3195      C44E4558 
 3195      540000BF 
 3196 4480 504700BF 		_NEST
 3197 4484 9B270000 		_COMPI	DONXT
 3197      BC270000 
 3197      05480000 
 3198 4490 A1420000 		_ADR	COMMA
 3199 4494 DB250000 		_UNNEST
 3200              	
 3201              	/***************************
 3202              		I ( -- n )
 3203              		stack for loop counter 
 3204              	***************************/
 3205 4498 78440000 		_HEADER I,1+COMPO,"I"
 3205      414900BF 
 3206 44a0 47F8046D 		_PUSH 
 3207 44a4 D8F80060 		ldr TOS,[RSP]
 3208 44a8 FEF794B8 		_NEXT 
 3209              	
 3210              	/****************************
 3211              		J ( -- n )
 3212              		stack outer loop counter 
 3213              	****************************/
 3214 44ac 9C440000 		_HEADER J,1,"J"
 3214      014A00BF 
 3215 44b4 47F8046D 		_PUSH 
 3216 44b8 D8F80460 		ldr TOS,[RSP,#4]
 3217 44bc FEF78AB8 		_NEXT 
 3218              	
 3219              	/**********************
 3220              	    UNTIL	( a -- )
 3221              	 	Terminate a BEGIN-UNTIL
 3222              		indefinite loop structure.
 3223              	******************************/
 3224 44c0 B0440000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3224      C5554E54 
 3224      494C00BF 
 3225 44cc 504700BF 		_NEST
 3226 44d0 9B270000 		_COMPI	QBRAN
 3226      DA270000 
 3226      05480000 
 3227 44dc A1420000 		_ADR	COMMA
 3228 44e0 DB250000 		_UNNEST
 3229              	
 3230              	/**********************
 3231              	    AGAIN	( a -- )
 3232              	 	Terminate a BEGIN-AGAIN
 3233              		infinite loop structure.
 3234              	*****************************/
 3235 44e4 C4440000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3235      C5414741 
 3235      494E00BF 
 3236 44f0 504700BF 		_NEST
 3237 44f4 9B270000 		_COMPI	BRAN
 3237      EE270000 
 3237      05480000 
ARM GAS  forth.s 			page 158


 3238 4500 A1420000 		_ADR	COMMA
 3239 4504 DB250000 		_UNNEST
 3240              	
 3241              	/************************
 3242              	    IF	  ( -- A )
 3243              	 	Begin a conditional
 3244              		branch structure.
 3245              	**************************/
 3246 4508 E8440000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3246      C2494600 
 3247 4510 504700BF 		_NEST
 3248 4514 9B270000 		_COMPI	QBRAN
 3248      DA270000 
 3248      05480000 
 3249 4520 71320000 		_ADR	HERE
 3250 4524 9B270000 		_DOLIT	4
 3250      04000000 
 3251 452c 9D2E0000 		_ADR	CPP
 3252 4530 112D0000 		_ADR	PSTOR
 3253 4534 DB250000 		_UNNEST
 3254              	
 3255              	/*************************
 3256              	    AHEAD	( -- A )
 3257              	 	Compile a forward 
 3258              		branch instruction.
 3259              	*************************/
 3260 4538 0C450000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3260      C5414845 
 3260      414400BF 
 3261 4544 504700BF 		_NEST
 3262 4548 9B270000 		_COMPI	BRAN
 3262      EE270000 
 3262      05480000 
 3263 4554 71320000 		_ADR	HERE
 3264 4558 9B270000 		_DOLIT	4
 3264      04000000 
 3265 4560 9D2E0000 		_ADR	CPP
 3266 4564 112D0000 		_ADR	PSTOR
 3267 4568 DB250000 		_UNNEST
 3268              	
 3269              	/**************************
 3270              	    REPEAT	( A a -- )
 3271              	 	Terminate a BEGIN-WHILE-REPEAT
 3272              		indefinite loop.
 3273              	**********************************/
 3274 456c 3C450000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3274      C6524550 
 3274      45415400 
 3275 4578 504700BF 		_NEST
 3276 457c F1440000 		_ADR	AGAIN
 3277 4580 71320000 		_ADR	HERE
 3278 4584 15290000 		_ADR	SWAP
 3279 4588 0D280000 		_ADR	STORE
 3280 458c DB250000 		_UNNEST
 3281              	
 3282              	/*********************
 3283              	    THEN	( A -- )
ARM GAS  forth.s 			page 159


 3284              	 	Terminate a conditional
 3285              		branch structure.
 3286              	*****************************/
 3287 4590 70450000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3287      C4544845 
 3287      4E0000BF 
 3288 459c 504700BF 		_NEST
 3289 45a0 71320000 		_ADR	HERE
 3290 45a4 15290000 		_ADR	SWAP
 3291 45a8 0D280000 		_ADR	STORE
 3292 45ac DB250000 		_UNNEST
 3293              	
 3294              	/***************************
 3295              	    AFT	 ( a -- a A )
 3296              	 	Jump to THEN in a 
 3297              		FOR-AFT-THEN-NEXT loop 
 3298              		the first time through.
 3299              	*****************************/
 3300 45b0 94450000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3300      C3414654 
 3301 45b8 504700BF 		_NEST
 3302 45bc F5280000 		_ADR	DROP
 3303 45c0 45450000 		_ADR	AHEAD
 3304 45c4 69440000 		_ADR	BEGIN
 3305 45c8 15290000 		_ADR	SWAP
 3306 45cc DB250000 		_UNNEST
 3307              	
 3308              	/**********************
 3309              	    ELSE	( A -- A )
 3310              	 	Start the false 
 3311              		clause in an 
 3312              		IF-ELSE-THEN structure.
 3313              	****************************/
 3314 45d0 B4450000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3314      C4454C53 
 3314      450000BF 
 3315 45dc 504700BF 		_NEST
 3316 45e0 45450000 		_ADR	AHEAD
 3317 45e4 15290000 		_ADR	SWAP
 3318 45e8 9D450000 		_ADR	THENN
 3319 45ec DB250000 		_UNNEST
 3320              	
 3321              	/**************************
 3322              	    WHILE	( a -- A a )
 3323              	 	Conditional branch out 
 3324              		of a BEGIN-WHILE-REPEAT loop.
 3325              	*********************************/
 3326 45f0 D4450000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3326      C5574849 
 3326      4C4500BF 
 3327 45fc 504700BF 		_NEST
 3328 4600 11450000 		_ADR	IFF
 3329 4604 15290000 		_ADR	SWAP
 3330 4608 DB250000 		_UNNEST
 3331              	
 3332              	/***********************************
 3333              	    ABORT"	( -- //  string> )
ARM GAS  forth.s 			page 160


 3334              	 	Conditional abort with an 
 3335              		error message.
 3336              	***********************************/
 3337 460c F4450000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3337      8641424F 
 3337      52542200 
 3338 4618 504700BF 		_NEST
 3339 461c 9B270000 		_COMPI	ABORQ
 3339      64400000 
 3339      05480000 
 3340 4628 3D430000 		_ADR	STRCQ
 3341 462c DB250000 		_UNNEST
 3342              	
 3343              	/******************************
 3344              	    $"	( -- //  string> )
 3345              	 	Compile an inline 
 3346              		word literal.
 3347              	*****************************/
 3348 4630 10460000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3348      C2242200 
 3349 4638 504700BF 		_NEST
 3350 463c 9B270000 		_COMPI	STRQP
 3350      80380000 
 3350      05480000 
 3351 4648 3D430000 		_ADR	STRCQ
 3352 464c DB250000 		_UNNEST
 3353              	
 3354              	/******************************
 3355              	    ."	( -- //  string> )
 3356              	 	Compile an inline word
 3357              		literal to be typed out 
 3358              		at run time.
 3359              	*******************************/
 3360 4650 34460000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3360      C22E2200 
 3361 4658 504700BF 		_NEST
 3362 465c 9B270000 		_COMPI	DOTQP
 3362      9C380000 
 3362      05480000 
 3363 4668 3D430000 		_ADR	STRCQ
 3364 466c DB250000 		_UNNEST
 3365              	
 3366              	/*********************
 3367              	  Name compiler
 3368              	***********************/
 3369              	
 3370              	/**************************
 3371              	    ?UNIQUE	( a -- a )
 3372              	 	Display a warning 
 3373              		message if the word 
 3374              		already exists.
 3375              	**************************/
 3376 4670 54460000 		_HEADER UNIQU,7,"?UNIQUE"
 3376      073F554E 
 3376      49515545 
 3377 467c 504700BF 		_NEST
 3378 4680 05290000 		_ADR	DUPP
ARM GAS  forth.s 			page 161


 3379 4684 C53D0000 		_ADR	NAMEQ			// ?name exists
 3380 4688 DB270000 		_QBRAN	UNIQ1	// redefinitions are OK
 3380      A8460000 
 3381 4690 9D380000 		_DOTQP	7," reDef "		// but warn the user
 3381      07207265 
 3381      44656620 
 3382 469c 29290000 		_ADR	OVER
 3383 46a0 592D0000 		_ADR	COUNT
 3384 46a4 01380000 		_ADR	TYPEE			// just in case its not planned
 3385              	UNIQ1:
 3386 46a8 F5280000 		_ADR	DROP
 3387 46ac DB250000 		_UNNEST
 3388              	
 3389              	/***********************
 3390              	    $,n	 ( na -- )
 3391              	 	Build a new dictionary 
 3392              		name using the data at na.
 3393              	hidden word 
 3394              	*******************************/
 3395              	SNAME:
 3396 46b0 504700BF 		_NEST
 3397 46b4 05290000 		_ADR	DUPP			//  na na
 3398 46b8 41280000 		_ADR	CAT			//  ?null input
 3399 46bc DB270000 		_QBRAN	SNAM1
 3399      F8460000 
 3400 46c4 7D460000 		_ADR	UNIQU			//  na
 3401 46c8 C92E0000 		_ADR	LAST			//  na last
 3402 46cc 21280000 		_ADR	AT			//  na la
 3403 46d0 A1420000 		_ADR	COMMA			//  na
 3404 46d4 05290000 		_ADR	DUPP			//  na na
 3405 46d8 C92E0000 		_ADR	LAST			//  na na last
 3406 46dc 0D280000 		_ADR	STORE			//  na , save na for vocabulary link
 3407 46e0 592D0000 		_ADR	COUNT			//  na+1 count
 3408 46e4 C9290000 		_ADR	PLUS			//  na+1+count
 3409 46e8 BD310000 		_ADR	ALGND			//  word boundary
 3410 46ec 9D2E0000 		_ADR	CPP
 3411 46f0 0D280000 		_ADR	STORE			//  top of dictionary now
 3412 46f4 DB250000 		_UNNEST
 3413              	SNAM1:
 3414 46f8 81380000 		_ADR	STRQP
 3415 46fc 07       		.byte	7
 3416 46fd 206E616D 		.ascii " name? "
 3416      653F20
 3417 4704 39400000 		_ADR	ABORT
 3418              	
 3419              	/************************
 3420              	    $COMPILE	( a -- )
 3421              	 	Compile next word to 
 3422              		code dictionary as 
 3423              		a token or literal.
 3424              	**************************/
 3425 4708 74460000 		_HEADER SCOMP,8,"$COMPILE"
 3425      0824434F 
 3425      4D50494C 
 3425      450000BF 
 3426 4718 504700BF 		_NEST
 3427 471c C53D0000 		_ADR	NAMEQ
ARM GAS  forth.s 			page 162


 3428 4720 D92A0000 		_ADR	QDUP	// defined?
 3429 4724 DB270000 		_QBRAN	SCOM2
 3429      54470000 
 3430 472c 21280000 		_ADR	AT
 3431 4730 9B270000 		_DOLIT	IMEDD
 3431      80000000 
 3432 4738 49290000 		_ADR	ANDD	// immediate?
 3433 473c DB270000 		_QBRAN	SCOM1
 3433      4C470000 
 3434 4744 B1270000 		_ADR	EXECU
 3435 4748 DB250000 		_UNNEST			// it's immediate, execute
 3436              	SCOM1:
 3437 474c 05480000 		_ADR	CALLC			// it's not immediate, compile
 3438 4750 DB250000 		_UNNEST	
 3439              	SCOM2:
 3440 4754 CD200000 		_ADR	NUMBER 
 3441 4758 DB270000 		_QBRAN	SCOM3
 3441      68470000 
 3442 4760 25430000 		_ADR	LITER
 3443 4764 DB250000 		_UNNEST			// compile number as integer
 3444              	SCOM3: // compilation abort 
 3445 4768 71470000 		_ADR COLON_ABORT 
 3446 476c 39400000 		_ADR	ABORT			// error
 3447              	
 3448              	/********************************
 3449              	 before aborting a compilation 
 3450              	 reset HERE and LAST
 3451              	 to previous values. 
 3452              	*******************************/
 3453              	COLON_ABORT:
 3454 4770 504700BF 		_NEST 
 3455 4774 C92E0000 		_ADR LAST 
 3456 4778 21280000 		_ADR AT 
 3457 477c 752A0000 		_ADR CELLM 
 3458 4780 05290000 		_ADR DUPP 
 3459 4784 9D2E0000 		_ADR CPP  
 3460 4788 0D280000 		_ADR STORE 
 3461 478c 21280000 		_ADR AT 
 3462 4790 C92E0000 		_ADR LAST 
 3463 4794 0D280000 		_ADR STORE 
 3464 4798 DB250000 		_UNNEST 
 3465              	
 3466              	/*********************
 3467              	    OVERT	( -- )
 3468              	 	Link a new word 
 3469              		into the current 
 3470              		vocabulary.
 3471              	**********************/
 3472 479c 0C470000 		_HEADER OVERT,5,"OVERT"
 3472      054F5645 
 3472      525400BF 
 3473 47a8 504700BF 		_NEST
 3474 47ac C92E0000 		_ADR	LAST
 3475 47b0 21280000 		_ADR	AT
 3476 47b4 892E0000 		_ADR	CNTXT
 3477 47b8 0D280000 		_ADR	STORE
 3478 47bc DB250000 		_UNNEST
ARM GAS  forth.s 			page 163


 3479              	
 3480              	/**********************
 3481              	    ;  ( -- )
 3482              	 	Terminate a colon
 3483              		definition.
 3484              	***********************/
 3485 47c0 A0470000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3485      C13B00BF 
 3486 47c8 504700BF 		_NEST
 3487 47cc 9B270000 		_DOLIT	UNNEST
 3487      DA250000 
 3488 47d4 05480000 		_ADR	CALLC
 3489 47d8 F5400000 		_ADR	LBRAC
 3490 47dc A9470000 		_ADR	OVERT
 3491 47e0 DB250000 		_UNNEST
 3492              	
 3493              	/******************
 3494              	    ]	   ( -- )
 3495              	 	Start compiling 
 3496              		the words in 
 3497              		the input stream.
 3498              	*********************/
 3499 47e4 C4470000 		_HEADER RBRAC,1,"]"
 3499      015D00BF 
 3500 47ec 504700BF 		_NEST
 3501 47f0 9B270000 		_DOLIT	SCOMP
 3501      18470000 
 3502 47f8 5D2E0000 		_ADR	TEVAL
 3503 47fc 0D280000 		_ADR	STORE
 3504 4800 DB250000 		_UNNEST
 3505              	
 3506              	/*********************
 3507              	    BL.W	( ca -- )
 3508              	 	compile ca.
 3509              	hidden word used by compiler
 3510              	*****************************/
 3511              	CALLC:
 3512 4804 504700BF 		_NEST
 3513 4808 9B270000 		_DOLIT 1 
 3513      01000000 
 3514 4810 5D290000 		_ADR ORR 
 3515 4814 A1420000 		_ADR COMMA  
 3516 4818 DB250000 		_UNNEST 
 3517              	
 3518              	
 3519              	/*************************
 3520              	 	:	( -- //  string> )
 3521              	 	Start a new colon 
 3522              		definition using 
 3523              		next word as its name.
 3524              	**************************/
 3525 481c E8470000 		_HEADER COLON,1,":"
 3525      013A00BF 
 3526 4824 504700BF 		_NEST
 3527 4828 3D3C0000 		_ADR	TOKEN
 3528 482c B1460000 		_ADR	SNAME
 3529 4830 E5250000 		_ADR	COMPI_NEST 
ARM GAS  forth.s 			page 164


 3530 4834 ED470000 		_ADR	RBRAC
 3531 4838 DB250000 		_UNNEST
 3532              	
 3533              	/*************************
 3534              	    IMMEDIATE   ( -- )
 3535              	 	Make the last compiled 
 3536              		word an immediate word.
 3537              	***************************/
 3538 483c 20480000 		_HEADER IMMED,9,"IMMEDIATE"
 3538      09494D4D 
 3538      45444941 
 3538      544500BF 
 3539 484c 504700BF 		_NEST
 3540 4850 9B270000 		_DOLIT	IMEDD
 3540      80000000 
 3541 4858 C92E0000 		_ADR	LAST
 3542 485c 21280000 		_ADR	AT
 3543 4860 21280000 		_ADR	AT
 3544 4864 5D290000 		_ADR	ORR
 3545 4868 C92E0000 		_ADR	LAST
 3546 486c 21280000 		_ADR	AT
 3547 4870 0D280000 		_ADR	STORE
 3548 4874 DB250000 		_UNNEST
 3549              	
 3550              	/******************
 3551              	  Defining words
 3552              	******************/
 3553              	
 3554              	/***********************************
 3555              	    CONSTANT	( u -- //  string> )
 3556              	 	Compile a new constant.
 3557              	************************************/
 3558 4878 40480000 		_HEADER CONST,8,"CONSTANT"
 3558      08434F4E 
 3558      5354414E 
 3558      540000BF 
 3559 4888 504700BF 		_NEST 
 3560 488c 3D3C0000 		_ADR	TOKEN
 3561 4890 B1460000 		_ADR	SNAME
 3562 4894 A9470000 		_ADR	OVERT
 3563 4898 E5250000 		_ADR	COMPI_NEST
 3564 489c 9B270000 		_DOLIT	DOCON
 3564      8C2D0000 
 3565 48a4 05480000 		_ADR	CALLC
 3566 48a8 A1420000 		_ADR	COMMA
 3567 48ac 9B270000 		_DOLIT	UNNEST 
 3567      DA250000 
 3568 48b4 05480000 		_ADR	CALLC  
 3569 48b8 DB250000 		_UNNEST
 3570              	
 3571              		.p2align 2 
 3572              	/****************************************
 3573              	 doDOES> ( -- a )
 3574              	 runtime action of DOES> 
 3575              	 leave parameter field address on stack 
 3576              	hidden word used by compiler 
 3577              	***************************************/
ARM GAS  forth.s 			page 165


 3578              	DODOES:
 3579 48bc 504700BF 		_NEST 
 3580 48c0 4D280000 		_ADR	RFROM
 3581 48c4 652A0000 		_ADR	CELLP 
 3582 48c8 252A0000 		_ADR	ONEP  
 3583 48cc C92E0000 		_ADR LAST 
 3584 48d0 21280000 		_ADR AT
 3585 48d4 5D3C0000 		_ADR NAMET 
 3586 48d8 652A0000 		_ADR CELLP 
 3587 48dc 0D280000 		_ADR STORE  
 3588 48e0 DB250000 		_UNNEST 
 3589              	
 3590              		.p2align 2
 3591              	/**********************
 3592              	  DOES> ( -- )
 3593              	  compile time action
 3594              	*************************/
 3595 48e4 7C480000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3595      C5444F45 
 3595      533E00BF 
 3596 48f0 504700BF 		_NEST 
 3597 48f4 9B270000 		_DOLIT DODOES 
 3597      BC480000 
 3598 48fc 05480000 		_ADR CALLC 
 3599 4900 9B270000 		_DOLIT	UNNEST
 3599      DA250000 
 3600 4908 05480000 		_ADR	CALLC 
 3601 490c E5250000 		_ADR COMPI_NEST
 3602 4910 9B270000 		_DOLIT RFROM 
 3602      4C280000 
 3603 4918 05480000 		_ADR	CALLC
 3604 491c DB250000 		_UNNEST 
 3605              	
 3606              	
 3607              	/****************************
 3608              	  DEFER@ ( "name" -- a )
 3609              	  return value of code field 
 3610              	  of defered function. 
 3611              	******************************/
 3612 4920 E8480000 		_HEADER DEFERAT,6,"DEFER@"
 3612      06444546 
 3612      45524000 
 3613 492c 504700BF 		_NEST 
 3614 4930 61420000 		_ADR TICK
 3615 4934 652A0000 		_ADR CELLP 
 3616 4938 21280000 		_ADR AT 
 3617 493c 352A0000 		_ADR ONEM 
 3618 4940 DB250000 		_UNNEST 
 3619              	
 3620              	/*********************************
 3621              	 DEFER! ( "name1" "name2" -- )
 3622              	 assign an action to a defered word 
 3623              	************************************/
 3624 4944 24490000 		_HEADER DEFERSTO,6,"DEFER!"
 3624      06444546 
 3624      45522100 
 3625 4950 504700BF 		_NEST 
ARM GAS  forth.s 			page 166


 3626 4954 61420000 		_ADR TICK 
 3627 4958 252A0000 		_ADR ONEP 
 3628 495c 61420000 		_ADR TICK 
 3629 4960 652A0000 		_ADR CELLP 
 3630 4964 0D280000 		_ADR STORE 
 3631 4968 DB250000 		_UNNEST
 3632              	
 3633              	/****************************
 3634              	  DEFER ( "name" -- )
 3635              	  create a defered definition
 3636              	*****************************/
 3637 496c 48490000 		_HEADER DEFER,5,"DEFER"
 3637      05444546 
 3637      455200BF 
 3638 4978 504700BF 		_NEST 
 3639 497c C9490000 		_ADR CREAT 
 3640 4980 9B270000 		_DOLIT UNNEST 
 3640      DA250000 
 3641 4988 05480000 		_ADR CALLC 
 3642 498c 9B270000 		_DOLIT DEFER_NOP
 3642      B0490000 
 3643 4994 252A0000 		_ADR ONEP 
 3644 4998 C92E0000 		_ADR LAST 
 3645 499c 21280000 		_ADR AT 
 3646 49a0 5D3C0000 		_ADR NAMET 
 3647 49a4 652A0000 		_ADR CELLP 
 3648 49a8 0D280000 		_ADR STORE 
 3649 49ac DB250000 		_UNNEST 
 3650              	DEFER_NOP:
 3651 49b0 504700BF 		_NEST  
 3652 49b4 99270000 		_ADR NOP 
 3653 49b8 DB250000 		_UNNEST 
 3654              	
 3655              	/******************************
 3656              	    CREATE	( -- //  string> )
 3657              	 	Compile a new array entry 
 3658              		without allocating code space.
 3659              	***********************************/
 3660 49bc 70490000 		_HEADER CREAT,6,"CREATE"
 3660      06435245 
 3660      41544500 
 3661 49c8 504700BF 		_NEST 
 3662 49cc 3D3C0000 		_ADR	TOKEN
 3663 49d0 B1460000 		_ADR	SNAME
 3664 49d4 A9470000 		_ADR	OVERT
 3665 49d8 E5250000 		_ADR	COMPI_NEST 
 3666 49dc 9B270000 		_DOLIT	DOVAR
 3666      802D0000 
 3667 49e4 05480000 		_ADR	CALLC
 3668 49e8 DB250000 		_UNNEST
 3669              	
 3670              	/*******************************
 3671              	    VARIABLE	( -- //  string> )
 3672              	 	Compile a new variable 
 3673              		initialized to 0.
 3674              	***********************************/
 3675 49ec C0490000 		_HEADER VARIA,8,"VARIABLE"
ARM GAS  forth.s 			page 167


 3675      08564152 
 3675      4941424C 
 3675      450000BF 
 3676 49fc 504700BF 		_NEST
 3677 4a00 C9490000 		_ADR	CREAT
 3678 4a04 9B270000 		_DOLIT	0
 3678      00000000 
 3679 4a0c A1420000 		_ADR	COMMA
 3680 4a10 9B270000 		_DOLIT UNNEST
 3680      DA250000 
 3681 4a18 05480000 		_ADR	CALLC  
 3682 4a1c DB250000 		_UNNEST
 3683              	
 3684              	/***********
 3685              	  Tools
 3686              	***********/
 3687              	
 3688              	/*************************
 3689              	    dm+	 ( a u -- a )
 3690              	 	Dump u bytes from , 
 3691              		leaving a+u on the stack.
 3692              	hidden word used by DUMP 
 3693              	****************************/
 3694              	DMP:
 3695 4a20 504700BF 		_NEST
 3696 4a24 29290000 		_ADR	OVER
 3697 4a28 9B270000 		_DOLIT	4
 3697      04000000 
 3698 4a30 E1380000 		_ADR	UDOTR			// display address
 3699 4a34 AD370000 		_ADR	SPACE
 3700 4a38 91280000 		_ADR	TOR			// start count down loop
 3701 4a3c EF270000 		_BRAN	PDUM2			// skip first pass
 3701      5C4A0000 
 3702              	PDUM1:
 3703 4a44 05290000 	  _ADR	DUPP
 3704 4a48 41280000 		_ADR	CAT
 3705 4a4c 9B270000 		_DOLIT	3
 3705      03000000 
 3706 4a54 E1380000 		_ADR	UDOTR			// display numeric data
 3707 4a58 252A0000 		_ADR	ONEP			// increment address
 3708              	PDUM2:
 3709 4a5c BD270000 	  _ADR	DONXT
 3710 4a60 444A0000 		.word	PDUM1	// loop till done
 3711 4a64 DB250000 		_UNNEST
 3712              		.p2align 2 
 3713              	//    DUMP	( a u -- )
 3714              	// 	Dump u bytes from a, in a formatted manner.
 3715              	
 3716              	/**********************
 3717              		DUMP ( a n -- )
 3718              		hex dump memory 
 3719              	*********************/
 3720 4a68 F0490000 		_HEADER DUMP,4,"DUMP"
 3720      0444554D 
 3720      500000BF 
 3721 4a74 504700BF 		_NEST
 3722 4a78 F52D0000 		_ADR	BASE
ARM GAS  forth.s 			page 168


 3723 4a7c 21280000 		_ADR	AT
 3724 4a80 91280000 		_ADR	TOR
 3725 4a84 55350000 		_ADR	HEX			// save radix,set hex
 3726 4a88 9B270000 		_DOLIT	16
 3726      10000000 
 3727 4a90 5D310000 		_ADR	SLASH			// change count to lines
 3728 4a94 91280000 		_ADR	TOR
 3729 4a98 EF270000 		_BRAN	DUMP4			// start count down loop
 3729      C84A0000 
 3730              	DUMP1:
 3731 4aa0 35380000 	  _ADR	CR
 3732 4aa4 9B270000 		_DOLIT	16
 3732      10000000 
 3733 4aac 3D2B0000 		_ADR	DDUP
 3734 4ab0 214A0000 		_ADR	DMP			// display numeric
 3735 4ab4 ED2A0000 		_ADR	ROT
 3736 4ab8 ED2A0000 		_ADR	ROT
 3737 4abc AD370000 		_ADR	SPACE
 3738 4ac0 AD370000 		_ADR	SPACE
 3739 4ac4 01380000 		_ADR	TYPEE			// display printable characters
 3740              	DUMP4:
 3741 4ac8 BD270000 	  _DONXT	DUMP1	// loop till done
 3741      A04A0000 
 3742              	DUMP3:
 3743 4ad0 F5280000 		_ADR	DROP
 3744 4ad4 4D280000 		_ADR	RFROM
 3745 4ad8 F52D0000 		_ADR	BASE
 3746 4adc 0D280000 		_ADR	STORE			// restore radix
 3747 4ae0 DB250000 		_UNNEST
 3748              	
 3749              	/*******************************
 3750              	   TRACE. display in hexadecimal
 3751              	   TRACE. use a different buffer 
 3752              	   than DOT  to avoid current 
 3753              	   display overwrite.
 3754              	*******************************/ 
 3755              	TDOT: // ( u -- )
 3756 4ae4 504700BF 		_NEST 
 3757 4ae8 F52D0000 		_ADR BASE 
 3758 4aec 21280000 		_ADR AT 
 3759 4af0 91280000 		_ADR TOR
 3760 4af4 55350000 		_ADR HEX  
 3761 4af8 712E0000 		_ADR HLD 
 3762 4afc 21280000 		_ADR AT 
 3763 4b00 91280000 		_ADR TOR   // R: base *hold 
 3764 4b04 71320000 		_ADR HERE 
 3765 4b08 9B270000 		_DOLIT 160 
 3765      A0000000 
 3766 4b10 C9290000 		_ADR PLUS
 3767 4b14 05290000 		_ADR DUPP 
 3768 4b18 91280000 		_ADR TOR  
 3769 4b1c 712E0000 		_ADR HLD 
 3770 4b20 0D280000 		_ADR STORE
 3771 4b24 FD2F0000 		_ADR STOD 
 3772 4b28 A5340000 		_ADR DIGS  
 3773 4b2c F5280000 		_ADR DROP
 3774 4b30 9B270000 		_DOLIT '$'
ARM GAS  forth.s 			page 169


 3774      24000000 
 3775 4b38 59340000 		_ADR HOLD 
 3776 4b3c 712E0000 		_ADR HLD 
 3777 4b40 21280000 		_ADR AT
 3778 4b44 4D280000 		_ADR RFROM   
 3779 4b48 29290000 		_ADR OVER 
 3780 4b4c D9290000 		_ADR SUBB 
 3781 4b50 AD370000 		_ADR SPACE 
 3782 4b54 01380000 		_ADR TYPEE 
 3783 4b58 4D280000 		_ADR RFROM 
 3784 4b5c 712E0000 		_ADR HLD 
 3785 4b60 0D280000 		_ADR STORE 
 3786 4b64 4D280000 		_ADR RFROM 
 3787 4b68 F52D0000 		_ADR BASE 
 3788 4b6c 0D280000 		_ADR STORE 
 3789 4b70 DB250000 		_UNNEST 
 3790              	
 3791              	/**********************
 3792              	   .S	  ( ... -- ... )
 3793              	 	Display the contents 
 3794              		of the data stack.
 3795              	*************************/
 3796 4b74 6C4A0000 		_HEADER DOTS,2,".S"
 3796      022E5300 
 3797 4b7c 504700BF 		_NEST
 3798 4b80 25320000 		_ADR	DEPTH	// stack depth
 3799 4b84 91280000 		_ADR	TOR		// start count down loop
 3800 4b88 EF270000 		_BRAN	DOTS2  // skip first pass
 3800      9C4B0000 
 3801              	DOTS1:
 3802 4b90 7D280000 		_ADR	RAT
 3803 4b94 49320000 		_ADR	PICK
 3804 4b98 E54A0000 		_ADR	TDOT // index stack, display contents
 3805              	DOTS2:
 3806 4b9c BD270000 		_DONXT	DOTS1 // loop till done
 3806      904B0000 
 3807 4ba4 35380000 		_ADR	CR 
 3808 4ba8 DB250000 		_UNNEST
 3809              	
 3810              	RPAT: 
 3811 4bac 47F8046D 		_PUSH 
 3812 4bb0 4646     		mov TOS,RSP 
 3813 4bb2 FDF70FBD 		_NEXT 
 3814              	
 3815              	RBASE: 
 3816 4bb6 47F8046D 		_PUSH 
 3817 4bba 4FF47F46 		_MOV32 TOS,RPP 
 3817      C2F20106 
 3818 4bc2 FDF707BD 		_NEXT 
 3819              	
 3820              	
 3821              	/**************************
 3822              	  R.  display return stack 
 3823              	**************************/
 3824              	RDOT: 
 3825 4bc6 504700BF 		_NEST 
 3826 4bca B74B0000 		_ADR RBASE
ARM GAS  forth.s 			page 170


 3827 4bce AD4B0000 		_ADR RPAT 
 3828 4bd2 D9290000 		_ADR SUBB
 3829 4bd6 A92A0000 		_ADR CELLSL   
 3830 4bda 9B270000 		_DOLIT 2
 3830      02000000 
 3831 4be2 D9290000 		_ADR SUBB 
 3832 4be6 91280000 		_ADR TOR
 3833 4bea B74B0000 		_ADR RBASE 
 3834 4bee 752A0000 	1:	_ADR CELLM 
 3835 4bf2 05290000 		_ADR DUPP 
 3836 4bf6 21280000 		_ADR AT 
 3837 4bfa E54A0000 		_ADR TDOT 
 3838 4bfe 4D280000 		_ADR RFROM   
 3839 4c02 352A0000 		_ADR ONEM 
 3840 4c06 05290000 		_ADR DUPP
 3841 4c0a 91280000 		_ADR TOR 
 3842 4c0e 3D2C0000 		_ADR ZEQUAL   
 3843 4c12 DB270000 		_QBRAN 1b
 3843      EE4B0000 
 3844 4c1a 4D280000 		_ADR RFROM  
 3845 4c1e 152B0000 		_ADR DDROP
 3846 4c22 35380000 		_ADR CR   
 3847 4c26 DB250000 		_UNNEST 
 3848              	
 3849              	/**************************
 3850              		TRACE ( -- )
 3851              		display stacks content 
 3852              	**************************/
 3853 4c2a 784B0000 		_HEADER TRACE,5,"TRACE"
 3853      05545241 
 3853      4345
 3854 4c34 504700BF 		_NEST
 3855 4c38 35380000 		_ADR CR 
 3856 4c3c 9B270000 		_DOLIT '>' 
 3856      3E000000 
 3857 4c44 9B270000 		_DOLIT 'S'
 3857      53000000 
 3858 4c4c A5260000 		_ADR EMIT 
 3859 4c50 A5260000 		_ADR EMIT  
 3860 4c54 7D4B0000 		_ADR DOTS
 3861 4c58 9B270000 		_DOLIT '>'
 3861      3E000000 
 3862 4c60 9B270000 		_DOLIT 'R'
 3862      52000000 
 3863 4c68 A5260000 		_ADR EMIT 
 3864 4c6c A5260000 		_ADR EMIT 
 3865 4c70 C74B0000 		_ADR RDOT 
 3866 4c74 DB250000 		_UNNEST 
 3867              	
 3868              	
 3869              	/*****************************
 3870              	    >NAME	( ca -- na | F )
 3871              	 	Convert code address 
 3872              		to a name address.
 3873              	*****************************/
 3874 4c78 2E4C0000 		_HEADER TNAME,5,">NAME"
 3874      053E4E41 
ARM GAS  forth.s 			page 171


 3874      4D4500BF 
 3875 4c84 504700BF 		_NEST
 3876 4c88 91280000 		_ADR	TOR			//  
 3877 4c8c 892E0000 		_ADR	CNTXT			//  va
 3878 4c90 21280000 		_ADR	AT			//  na
 3879              	TNAM1:
 3880 4c94 05290000 		_ADR	DUPP			//  na na
 3881 4c98 DB270000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3881      C84C0000 
 3882 4ca0 05290000 		_ADR	DUPP			//  na na
 3883 4ca4 5D3C0000 		_ADR	NAMET			//  na ca
 3884 4ca8 7D280000 		_ADR	RAT			//  na ca code
 3885 4cac 71290000 		_ADR	XORR			//  na f --
 3886 4cb0 DB270000 		_QBRAN	TNAM2
 3886      C84C0000 
 3887 4cb8 752A0000 		_ADR	CELLM			//  la 
 3888 4cbc 21280000 		_ADR	AT			//  next_na
 3889 4cc0 EF270000 		_BRAN	TNAM1
 3889      944C0000 
 3890              	TNAM2:	
 3891 4cc8 4D280000 		_ADR	RFROM
 3892 4ccc F5280000 		_ADR	DROP			//  0|na --
 3893 4cd0 DB250000 		_UNNEST			// 0
 3894              	
 3895              	/********************************
 3896              	    .ID	 ( na -- )
 3897              	 	Display the name at address.
 3898              	********************************/
 3899 4cd4 7C4C0000 		_HEADER DOTID,3,".ID"
 3899      032E4944 
 3900 4cdc 504700BF 		_NEST
 3901 4ce0 D92A0000 		_ADR	QDUP			// if zero no name
 3902 4ce4 DB270000 		_QBRAN	DOTI1
 3902      044D0000 
 3903 4cec 592D0000 		_ADR	COUNT
 3904 4cf0 9B270000 		_DOLIT	0x1F
 3904      1F000000 
 3905 4cf8 49290000 		_ADR	ANDD			// mask lexicon bits
 3906 4cfc 01380000 		_ADR	TYPEE
 3907 4d00 DB250000 		_UNNEST			// display name string
 3908              	DOTI1:
 3909 4d04 9D380000 		_DOTQP	9," {noName}"
 3909      09207B6E 
 3909      6F4E616D 
 3909      657D00BF 
 3910 4d14 DB250000 		_UNNEST
 3911              	
 3912              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3913              	.if WANT_SEE 
 3914              	/*******************************
 3915              	    SEE	 ( -- //  string> )
 3916              	 	A simple decompiler.
 3917              	*******************************/
 3918              		_HEADER SEE,3,"SEE"
 3919              		_NEST
 3920              		_ADR	TICK	//  ca --, starting address
 3921              		_ADR	CR	
ARM GAS  forth.s 			page 172


 3922              		_DOLIT	20
 3923              		_ADR	TOR
 3924              	SEE1:
 3925              		_ADR	CELLP			//  a
 3926              		_ADR	DUPP			//  a a
 3927              		_ADR	DECOMP		//  a
 3928              		_DONXT	SEE1
 3929              		_ADR	DROP
 3930              		_UNNEST
 3931              	
 3932              	/*************************
 3933              	 	DECOMPILE ( a -- )
 3934              	 	Convert code in a.  
 3935              		Display name of command or as data.
 3936              	*************************************/
 3937              		_HEADER DECOMP,9,"DECOMPILE"
 3938              		_NEST
 3939              		_ADR	DUPP			//  a a
 3940              	// 	_ADR	TOR			//  a
 3941              		_ADR	AT			//  a code
 3942              		_ADR	DUPP			//  a code code
 3943              		_DOLIT	0xF800D000 //0xF800F800
 3944              		_ADR	ANDD
 3945              		_DOLIT	0xF000D000 //0xF800F000
 3946              		_ADR	EQUAL			//  a code ?
 3947              		_ADR	INVER 
 3948              		_QBRAN	DECOM2	//  not a command
 3949              		//  a valid_code --, extract address and display name
 3950              		MOVW	IP,#0xFFE
 3951              		MOV	WP,TOS
 3952              		LSL	TOS,TOS,#21		//  get bits 22-12
 3953              		ASR	TOS,TOS,#9		//  with sign extension
 3954              		LSR	WP,WP,#15		//  get bits 11-1
 3955              		AND	WP,WP,IP		//  retain only bits 11-1
 3956              		ORR	TOS,TOS,WP		//  get bits 22-1
 3957              		NOP
 3958              		_ADR	OVER			//  a offset a
 3959              		_ADR	PLUS			//  a target-4
 3960              		_ADR	CELLP			//  a target
 3961              		_ADR	TNAME			//  a na/0 --, is it a name?
 3962              		_ADR	QDUP			//  name address or zero
 3963              		_QBRAN	DECOM1
 3964              		_ADR	SPACE			//  a na
 3965              		_ADR	DOTID			//  a --, display name
 3966              	// 	_ADR	RFROM			//  a
 3967              		_ADR	DROP
 3968              		_UNNEST
 3969              	DECOM1:	// _ADR	RFROM		//  a
 3970              		_ADR	AT			//  data
 3971              		_ADR	UDOT			//  display data
 3972              		_UNNEST
 3973              	DECOM2:
 3974              		_ADR	UDOT
 3975              	// 	_ADR	RFROM
 3976              		_ADR	DROP
 3977              		_UNNEST
 3978              	.endif 
ARM GAS  forth.s 			page 173


 3979              	
 3980              	/**********************
 3981              		VLIST ( -- )
 3982              		WORDS alias 
 3983              		+ display words count 
 3984              	**********************/
 3985 4d18 D84C0000 		_HEADER VLIST,5,"VLIST"
 3985      05564C49 
 3985      535400BF 
 3986 4d24 504700BF 		_NEST 
 3987 4d28 494D0000 		_ADR WORDS
 3988 4d2c 35380000 		_ADR CR 
 3989 4d30 8D4D0000 		_ADR WC
 3990 4d34 49390000 		_ADR DOT    
 3991 4d38 DB250000 		_UNNEST 
 3992              	
 3993              	/*********************
 3994              	    WORDS	( -- )
 3995              	 	Display the names 
 3996              		in the context vocabulary.
 3997              	*******************************/
 3998 4d3c 1C4D0000 		_HEADER WORDS,5,"WORDS"
 3998      05574F52 
 3998      445300BF 
 3999 4d48 504700BF 		_NEST
 4000 4d4c 35380000 		_ADR	CR
 4001 4d50 892E0000 		_ADR	CNTXT
 4002 4d54 21280000 		_ADR	AT			// only in context
 4003              	WORS1:
 4004 4d58 D92A0000 		_ADR	QDUP			// ?at end of list
 4005 4d5c DB270000 		_QBRAN	WORS2
 4005      804D0000 
 4006 4d64 05290000 		_ADR	DUPP
 4007 4d68 AD370000 		_ADR	SPACE
 4008 4d6c DD4C0000 		_ADR	DOTID			// display a name
 4009 4d70 752A0000 		_ADR	CELLM
 4010 4d74 21280000 		_ADR	AT
 4011 4d78 EF270000 		_BRAN	WORS1
 4011      584D0000 
 4012              	WORS2:
 4013 4d80 DB250000 		_UNNEST
 4014              	
 4015              	/*****************************
 4016              		WC ( - n )
 4017              		count words in dictionary 
 4018              	******************************/
 4019 4d84 404D0000 		_HEADER WC,2,"WC"
 4019      02574300 
 4020 4d8c 504700BF 		_NEST 
 4021 4d90 9B270000 		_DOLIT 0 
 4021      00000000 
 4022 4d98 C92E0000 		_ADR LAST
 4023 4d9c 21280000 	1:	_ADR AT
 4024 4da0 D92A0000 		_ADR QDUP
 4025 4da4 DB270000 		_QBRAN 9f
 4025      C44D0000 
 4026 4dac 15290000 		_ADR SWAP
ARM GAS  forth.s 			page 174


 4027 4db0 252A0000 		_ADR ONEP
 4028 4db4 15290000 		_ADR SWAP
 4029 4db8 752A0000 		_ADR CELLM
 4030 4dbc EF270000 		_BRAN 1b
 4030      9C4D0000 
 4031 4dc4 DB250000 	9:	_UNNEST 
 4032              	
 4033              	/*************************
 4034              		MARK <string> ( -- )
 4035              	    create forget point 
 4036              		in dictionary 
 4037              	*************************/	
 4038 4dc8 884D0000 		_HEADER MARK,4,"MARK"
 4038      044D4152 
 4038      4B0000BF 
 4039 4dd4 504700BF 		_NEST
 4040 4dd8 C9490000 		_ADR CREAT 
 4041 4ddc BD480000 		_ADR DODOES 
 4042 4de0 DB250000 		_UNNEST
 4043 4de4 504700BF 		_NEST  
 4044 4de8 4D280000 		_ADR RFROM 
 4045 4dec 9B270000 		_DOLIT 8
 4045      08000000 
 4046 4df4 D9290000 		_ADR SUBB
 4047 4df8 854C0000 		_ADR TNAME
 4048 4dfc 752A0000 		_ADR CELLM
 4049 4e00 21280000 		_ADR AT  
 4050 4e04 C92E0000 		_ADR LAST 
 4051 4e08 0D280000 		_ADR STORE 
 4052 4e0c A9470000 		_ADR OVERT
 4053 4e10 DB250000 		_UNNEST 
 4054              	
 4055              	/****************
 4056              	  cold start
 4057              	*****************/
 4058              	
 4059              	/**********************************
 4060              	    VER	 ( -- n )
 4061              	 	Return the version 
 4062              		number of this implementation.
 4063              	hidden word used by COLD
 4064              	**********************************/
 4065              	VERSN:
 4066 4e14 504700BF 		_NEST
 4067 4e18 9B270000 		_DOLIT	VER*256+EXT
 4067      00010000 
 4068 4e20 DB250000 		_UNNEST
 4069              	
 4070              	/*********************
 4071              	    hi	  ( -- )
 4072              	 	Display the sign-on 
 4073              		message.
 4074              	***********************/
 4075 4e24 CC4D0000 		_HEADER HI,2,"HI"
 4075      02484900 
 4076 4e2c 504700BF 		_NEST
 4077 4e30 35380000 		_ADR	CR	// initialize I/O
ARM GAS  forth.s 			page 175


 4078 4e34 9D380000 		_DOTQP	17, "beyond Jupiter, v" 
 4078      11626579 
 4078      6F6E6420 
 4078      4A757069 
 4078      7465722C 
 4079 4e4c F52D0000 		_ADR	BASE
 4080 4e50 21280000 		_ADR	AT
 4081 4e54 55350000 		_ADR	HEX	// save radix
 4082 4e58 154E0000 		_ADR	VERSN
 4083 4e5c 39340000 		_ADR	BDIGS
 4084 4e60 9B270000 		_DOLIT  0 
 4084      00000000 
 4085 4e68 85340000 		_ADR	DIG
 4086 4e6c 85340000 		_ADR	DIG
 4087 4e70 9B270000 		_DOLIT	'.'
 4087      2E000000 
 4088 4e78 59340000 		_ADR	HOLD
 4089 4e7c A5340000 		_ADR	DIGS
 4090 4e80 01350000 		_ADR	EDIGS
 4091 4e84 01380000 		_ADR	TYPEE	// format version number
 4092 4e88 F52D0000 		_ADR	BASE
 4093 4e8c 0D280000 		_ADR	STORE
 4094 4e90 35380000 		_ADR	CR
 4095 4e94 DB250000 		_UNNEST			// restore radix
 4096              	
 4097              	/***********************
 4098              	   HI_BOTH ( -- )
 4099              	   display sign-on 
 4100              	   on both CONSOLE
 4101              	***********************/
 4102              	HI_BOTH:
 4103 4e98 504700BF 	    _NEST 
 4104 4e9c F5070000 		_ADR LOCAL 
 4105 4ea0 25080000 		_ADR CONSOLE 
 4106 4ea4 2D4E0000 		_ADR HI 
 4107 4ea8 0D080000 		_ADR SERIAL 
 4108 4eac 25080000 		_ADR CONSOLE 
 4109 4eb0 2D4E0000 		_ADR HI
 4110 4eb4 DB250000 		_UNNEST 
 4111              	
 4112              	/**********************
 4113              	 check if PS2 keyboard 
 4114              	 present.
 4115              	**********************/
 4116              	PS2_QUERY: 
 4117 4eb8 504700BF 		_NEST 
 4118 4ebc 9B270000 		_DOLIT 400 
 4118      90010000 
 4119 4ec4 3D270000 		_ADR PAUSE
 4120 4ec8 2D160000 		_ADR PS2_QKEY
 4121 4ecc DB270000 		_QBRAN 1f
 4121      E84E0000 
 4122 4ed4 9B270000 		_DOLIT BAT_OK 
 4122      AA000000 
 4123 4edc 71290000 		_ADR XORR 
 4124 4ee0 DB270000 		_QBRAN 9f 
 4124      2C4F0000 
ARM GAS  forth.s 			page 176


 4125 4ee8 15180000 	1:	_ADR KBD_RST
 4126 4eec 9B270000 		_DOLIT BAT_OK 
 4126      AA000000 
 4127 4ef4 71290000 		_ADR XORR  
 4128 4ef8 DB270000 		_QBRAN 9f  
 4128      2C4F0000 
 4129              	// no ps2 keyboard 
 4130              	// swith to serial console
 4131 4f00 35380000 		_ADR CR 
 4132 4f04 9D380000 		_DOTQP 25,"no PS2 keyboard detected."
 4132      196E6F20 
 4132      50533220 
 4132      6B657962 
 4132      6F617264 
 4133 4f24 0D080000 		_ADR SERIAL 
 4134 4f28 25080000 		_ADR CONSOLE 
 4135 4f2c DB250000 	9:	_UNNEST 
 4136              	
 4137              	/*************************
 4138              	   check PA8 to 
 4139              	   select console 
 4140              	   PA8 -> low  LOCAL 
 4141              	   PA8 -> high SERIAL 
 4142              	*************************/
 4143              	IF_SENSE:
 4144 4f30 504700BF 		_NEST 
 4145 4f34 F5070000 		_ADR LOCAL 
 4146 4f38 9B270000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4146      10000240 
 4147 4f40 21280000 		_ADR AT 
 4148 4f44 9B270000 		_DOLIT (1<<8)
 4148      00010000 
 4149 4f4c 49290000 		_ADR ANDD 
 4150 4f50 DB270000 		_QBRAN 9f 
 4150      5C4F0000 
 4151 4f58 252A0000 		_ADR ONEP 
 4152 4f5c 25080000 	9:  _ADR CONSOLE 
 4153 4f60 DB250000 		_UNNEST 
 4154              	
 4155              	/****************************
 4156              	   display READY on active
 4157              	   console
 4158              	***************************/
 4159              	READY:
 4160 4f64 504700BF 	    _NEST 
 4161 4f68 9D380000 		_DOTQP 5,"READY"
 4161      05524541 
 4161      445900BF 
 4162 4f74 35380000 		_ADR  CR 
 4163 4f78 DB250000 	    _UNNEST 
 4164              	
 4165              	/********************
 4166              	    COLD	( -- )
 4167              	 	The high level cold 
 4168              		start sequence.
 4169              	**************************/
 4170 4f7c 284E0000 		.word	LINK 
ARM GAS  forth.s 			page 177


 4171              		LINK = . 
 4172 4f80 04       	_LASTN:	.byte  4
 4173 4f81 434F4C44 		.ascii "COLD"
 4174 4f85 0000BF   		.p2align 2	
 4175              	COLD:
 4176 4f88 00B5FBF7 		_CALL forth_init 
 4176      07FA5DF8 
 4176      04EB
 4177 4f92 DFF858C0 		ldr IP,=COLD1 
 4178 4f96 FDF71DBB 		_NEXT
 4179 4f9a 00BF     		.p2align 2 
 4180              	COLD1:
 4181 4f9c 9B270000 		_DOLIT  0 
 4181      00000000 
 4182 4fa4 71270000 		_ADR ULED // turn off user LED 
 4183 4fa8 9B270000 		_DOLIT	UZERO
 4183      28060000 
 4184 4fb0 9B270000 		_DOLIT	UPP
 4184      00000020 
 4185 4fb8 9B270000 		_DOLIT	ULAST-UZERO
 4185      B0000000 
 4186 4fc0 11330000 		_ADR	MOVE 			// initialize user area
 4187 4fc4 C1410000 		_ADR	PRESE			// initialize stack and TIB
 4188 4fc8 C11A0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4189 4fcc B94E0000 		_ADR 	PS2_QUERY  
 4190 4fd0 DD2D0000 		_ADR	TBOOT
 4191 4fd4 C1320000 		_ADR	ATEXE			// application boot
 4192 4fd8 A9470000 		_ADR	OVERT
 4193 4fdc 314F0000 		_ADR	IF_SENSE
 4194 4fe0 EF270000 		_BRAN	QUIT			// start interpretation
 4194      E0410000 
 4195              	COLD2:
 4196              		.p2align 2 	
 4197              	CTOP:
 4198 4fe8 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4199              	
 4200              	
 4201 4fec 9C4F0000 	  .end 
ARM GAS  forth.s 			page 178


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 179


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 180


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 181


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 182


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 183


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 184


             forth.s:2925   .text:000000000000417c EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:395    .text:0000000000000360 reset_handler
              init.s:224    .text:0000000000000104 nmi_handler
              init.s:242    .text:000000000000013c hardfault_handler
              init.s:261    .text:0000000000000178 memfault_handler
              init.s:288    .text:00000000000001e4 busfault_handler
              init.s:321    .text:0000000000000278 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:347    .text:00000000000002dc systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000a34 tv_out_isr
          ser-term.s:35     .text:0000000000000700 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001310 kbd_isr
              init.s:196    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:416    .text:000000000000039c forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:00000000000025d4 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2946   .text:00000000000041c0 PRESE
             forth.s:2185   .text:000000000000389c DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002624 CFSR
             forth.s:484    .text:0000000000002904 DUPP
             forth.s:428    .text:0000000000002890 TOR
             forth.s:292    .text:000000000000279a DOLIT
             forth.s:1109   .text:0000000000002df4 BASE
             forth.s:363    .text:000000000000280c STORE
             forth.s:2235   .text:0000000000003920 UDOT
ARM GAS  forth.s 			page 185


              init.s:171    .text:0000000000000064 $d
             forth.s:399    .text:000000000000284c RFROM
             forth.s:519    .text:0000000000002948 ANDD
             forth.s:333    .text:00000000000027da QBRAN
             forth.s:144    .text:0000000000002648 BFAR
             forth.s:178    .text:00000000000026a4 EMIT
             forth.s:2081   .text:00000000000037ac SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:54     .text:0000000000001d8c FPSCR
              init.s:377    .text:0000000000000338 reset_mcu
              init.s:195    .text:00000000000000b0 $t
              init.s:201    .text:00000000000000c2 fpu_except
              init.s:203    .text:00000000000000c2 $d
             forth.s:2127   .text:0000000000003834 CR
              init.s:209    .text:00000000000000f4 $d
              init.s:222    .text:0000000000000104 $t
              init.s:227    .text:000000000000010c nmi_hl
              init.s:228    .text:000000000000010c $d
              init.s:230    .text:0000000000000132 $t
              init.s:231    .text:0000000000000134 $d
             forth.s:2824   .text:0000000000004038 ABORT
              init.s:240    .text:000000000000013c $t
              init.s:247    .text:000000000000014e hardfault_hl
              init.s:248    .text:000000000000014e $d
              init.s:251    .text:0000000000000170 $d
              init.s:259    .text:0000000000000178 $t
              init.s:266    .text:000000000000018a memfault_hl
              init.s:267    .text:000000000000018a $d
              init.s:270    .text:00000000000001b8 $d
              init.s:286    .text:00000000000001e4 $t
              init.s:293    .text:00000000000001f6 busfault_hl
              init.s:294    .text:00000000000001f6 $d
             forth.s:261    .text:0000000000002770 ULED
             forth.s:1082   .text:0000000000002db4 MSEC
              init.s:302    .text:000000000000023e $t
              init.s:303    .text:0000000000000240 $d
              init.s:310    .text:000000000000026c $d
              init.s:319    .text:0000000000000278 $t
              init.s:326    .text:000000000000028a usagefault_hl
              init.s:327    .text:000000000000028a $d
              init.s:329    .text:00000000000002ae $t
              init.s:330    .text:00000000000002b0 $d
             forth.s:558    .text:00000000000029a0 RSHIFT
              init.s:345    .text:00000000000002dc $t
              init.s:356    .text:00000000000002f6 systick_exit
              init.s:359    .text:00000000000002f8 user_reboot
              init.s:363    .text:000000000000030a ur
              init.s:364    .text:000000000000030a $d
              init.s:372    .text:0000000000000328 user_reboot_msg
             forth.s:1022   .text:0000000000002d58 COUNT
             forth.s:2109   .text:0000000000003800 TYPEE
              init.s:371    .text:0000000000000326 $t
              init.s:373    .text:0000000000000328 $d
              init.s:520    .text:000000000000049c remap
              init.s:429    .text:00000000000003c4 init_devices
               fpu.s:36     .text:0000000000001d54 fpu_init
ARM GAS  forth.s 			page 186


          ser-term.s:56     .text:000000000000072e ser_init
             tvout.s:74     .text:0000000000000984 tv_init
           ps2_kbd.s:307    .text:0000000000001530 kbd_init
         spi-flash.s:41     .text:0000000000001944 flash_spi_init
             forth.s:4175   .text:0000000000004f88 COLD
             forth.s:83     .text:00000000000025cc NEST
              init.s:442    .text:00000000000003e2 wait_hserdy
              init.s:463    .text:0000000000000404 wait_pllrdy
              init.s:475    .text:000000000000041e wait_sws
              init.s:610    .text:0000000000000566 gpio_config
              init.s:685    .text:0000000000000612 gpio_out
              init.s:545    .text:00000000000004dc nvic_set_priority
              init.s:700    .text:0000000000000628 UZERO
              init.s:738    .text:00000000000006d8 ULAST
              init.s:554    .text:00000000000004f4 negative_irq
              init.s:566    .text:000000000000050e nvic_enable_irq
              init.s:583    .text:0000000000000538 nvic_disable_irq
              init.s:647    .text:00000000000005ce input_pull
              init.s:640    .text:00000000000005bc output_type
              init.s:663    .text:00000000000005e4 gpio_speed
              init.s:701    .text:0000000000000628 $d
             forth.s:4102   .text:0000000000004e98 HI_BOTH
           ps2_kbd.s:396    .text:000000000000162c PS2_QKEY
             tvout.s:563    .text:0000000000000ef4 TV_EMIT
             forth.s:2862   .text:0000000000004098 INTER
             forth.s:4172   .text:0000000000004f80 _LASTN
             forth.s:4197   .text:0000000000004fe8 CTOP
             forth.s:4171   .text:0000000000004f80 LINK
              init.s:743    .text:00000000000006d8 $d
          ser-term.s:33     .text:0000000000000700 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000786 $d
          ser-term.s:90     .text:000000000000078a _SER_QKEY
          ser-term.s:90     .text:0000000000000794 SER_QKEY
          ser-term.s:110    .text:00000000000007c0 $d
          ser-term.s:110    .text:00000000000007c4 _SER_EMIT
          ser-term.s:110    .text:00000000000007d0 SER_EMIT
          ser-term.s:124    .text:00000000000007ea $d
          ser-term.s:124    .text:00000000000007ee _LOCAL
          ser-term.s:124    .text:00000000000007f4 $t
          ser-term.s:124    .text:00000000000007f4 LOCAL
          ser-term.s:133    .text:0000000000000800 $d
          ser-term.s:133    .text:0000000000000804 _SERIAL
          ser-term.s:133    .text:000000000000080c SERIAL
          ser-term.s:142    .text:0000000000000818 $d
          ser-term.s:142    .text:000000000000081c _CONSOLE
          ser-term.s:142    .text:0000000000000824 $t
          ser-term.s:142    .text:0000000000000824 CONSOLE
             forth.s:4159   .text:0000000000004f64 READY
          ser-term.s:166    .text:0000000000000858 $d
          ser-term.s:166    .text:000000000000085c _ANSI_PARAM
          ser-term.s:166    .text:0000000000000868 ANSI_PARAM
          ser-term.s:168    .text:000000000000086c $d
             forth.s:626    .text:0000000000002a24 ONEP
             forth.s:1472   .text:0000000000003124 SLMOD
             forth.s:715    .text:0000000000002ad8 QDUP
             forth.s:348    .text:00000000000027ee BRAN
ARM GAS  forth.s 			page 187


             forth.s:576    .text:00000000000029c8 PLUS
             forth.s:634    .text:0000000000002a34 ONEM
             forth.s:90     .text:00000000000025da UNNEST
          ser-term.s:193    .text:00000000000008d8 _ANSI_ESC
          ser-term.s:193    .text:00000000000008e0 ANSI_ESC
          ser-term.s:195    .text:00000000000008e4 $d
          ser-term.s:205    .text:0000000000000904 _SER_AT
          ser-term.s:205    .text:000000000000090c SER_AT
          ser-term.s:207    .text:0000000000000910 $d
             forth.s:492    .text:0000000000002914 SWAP
          ser-term.s:221    .text:0000000000000940 _SER_CLS
          ser-term.s:221    .text:0000000000000948 $t
          ser-term.s:221    .text:0000000000000948 SER_CLS
          ser-term.s:223    .text:000000000000094c $d
          ser-term.s:230    .text:0000000000000970 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000984 $t
             tvout.s:150    .text:0000000000000a60 state_vsync
             tvout.s:191    .text:0000000000000ab4 state_pre_video
             tvout.s:202    .text:0000000000000ac6 state_video_out
             tvout.s:237    .text:0000000000000b24 state_post_video
             tvout.s:254    .text:0000000000000b4a tv_isr_exit
             tvout.s:180    .text:0000000000000a9a sync_end
             tvout.s:246    .text:0000000000000b36 frame_end
             tvout.s:264    .text:0000000000000b4c $d
             tvout.s:264    .text:0000000000000b50 _BACKCOLOR
             tvout.s:264    .text:0000000000000b5c BACKCOLOR
             tvout.s:271    .text:0000000000000b68 $d
ARM GAS  forth.s 			page 188


             tvout.s:271    .text:0000000000000b6c _PENCOLOR
             tvout.s:271    .text:0000000000000b76 $t
             tvout.s:271    .text:0000000000000b78 PENCOLOR
             tvout.s:278    .text:0000000000000b84 $d
             tvout.s:278    .text:0000000000000b88 _CURSOR_COL
             tvout.s:278    .text:0000000000000b90 CURSOR_COL
             tvout.s:285    .text:0000000000000b9c $d
             tvout.s:285    .text:0000000000000ba0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000ba4 $t
             tvout.s:285    .text:0000000000000ba4 CURSOR_ROW
             tvout.s:292    .text:0000000000000bb0 $d
             tvout.s:292    .text:0000000000000bb4 _ROWY
             tvout.s:292    .text:0000000000000bba $t
             tvout.s:292    .text:0000000000000bbc ROWY
             tvout.s:299    .text:0000000000000bc8 $d
             tvout.s:299    .text:0000000000000bcc _COLX
             tvout.s:299    .text:0000000000000bd2 $t
             tvout.s:299    .text:0000000000000bd4 COLX
             tvout.s:306    .text:0000000000000be0 $d
             tvout.s:306    .text:0000000000000be4 _FONT
             tvout.s:306    .text:0000000000000bec FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000bf8 $d
             tvout.s:313    .text:0000000000000bfc _VIDBUFF
             tvout.s:313    .text:0000000000000c04 $t
             tvout.s:313    .text:0000000000000c04 VIDBUFF
             tvout.s:325    .text:0000000000000c0e $d
             tvout.s:325    .text:0000000000000c12 _PLOT
             tvout.s:325    .text:0000000000000c18 PLOT
             tvout.s:373    .text:0000000000000c9c plot_op
             tvout.s:341    .text:0000000000000c44 op_back
             tvout.s:350    .text:0000000000000c5e op_pen
             tvout.s:359    .text:0000000000000c78 op_invert
             tvout.s:363    .text:0000000000000c80 op_xor
             tvout.s:373    .text:0000000000000c9c $d
             tvout.s:378    .text:0000000000000ca4 _VSYNC
             tvout.s:378    .text:0000000000000caa $t
             tvout.s:378    .text:0000000000000cac VSYNC
             tvout.s:386    .text:0000000000000cb6 $d
             tvout.s:386    .text:0000000000000cba _CLS
             tvout.s:386    .text:0000000000000cbe $t
             tvout.s:386    .text:0000000000000cc0 CLS
             tvout.s:410    .text:0000000000000d02 $d
             tvout.s:410    .text:0000000000000d06 _CLRLINE
             tvout.s:410    .text:0000000000000d0e $t
             tvout.s:410    .text:0000000000000d10 CLRLINE
             tvout.s:412    .text:0000000000000d14 $d
             forth.s:594    .text:00000000000029e8 STAR
             forth.s:1699   .text:0000000000003358 FILL
             tvout.s:427    .text:0000000000000d48 _SCROLLUP
             tvout.s:427    .text:0000000000000d54 SCROLLUP
             tvout.s:429    .text:0000000000000d58 $d
             forth.s:585    .text:00000000000029d8 SUBB
             forth.s:1667   .text:0000000000003310 MOVE
             tvout.s:448    .text:0000000000000da0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000dac SCROLLDOWN
             tvout.s:450    .text:0000000000000db0 $d
ARM GAS  forth.s 			page 189


             tvout.s:467    .text:0000000000000df0 _TV_CRLF
             tvout.s:467    .text:0000000000000df8 $t
             tvout.s:467    .text:0000000000000df8 TV_CRLF
             tvout.s:482    .text:0000000000000e1a $d
             tvout.s:482    .text:0000000000000e1e _RIGHT
             tvout.s:482    .text:0000000000000e24 $t
             tvout.s:482    .text:0000000000000e24 RIGHT
             tvout.s:495    .text:0000000000000e38 $d
             tvout.s:495    .text:0000000000000e3c _LEFT
             tvout.s:495    .text:0000000000000e44 LEFT
             tvout.s:511    .text:0000000000000e70 FONT_PIXEL
             tvout.s:518    .text:0000000000000e80 INCR_X
             tvout.s:525    .text:0000000000000e8c NEXT_PIXEL
             tvout.s:534    .text:0000000000000e94 CHAR_ROW
             tvout.s:536    .text:0000000000000e98 $d
             forth.s:765    .text:0000000000002b3c DDUP
             forth.s:419    .text:000000000000287c RAT
             forth.s:314    .text:00000000000027bc DONXT
             forth.s:756    .text:0000000000002b28 TDROP
             tvout.s:551    .text:0000000000000ed4 CHAR_FONT
             tvout.s:552    .text:0000000000000ed4 $t
             tvout.s:563    .text:0000000000000ee8 $d
             tvout.s:563    .text:0000000000000eec _TV_EMIT
             tvout.s:563    .text:0000000000000ef4 $t
             tvout.s:565    .text:0000000000000ef8 $d
             forth.s:918    .text:0000000000002c88 ULESS
             tvout.s:593    .text:0000000000000f7c CTRL_KEY
             forth.s:373    .text:0000000000002820 AT
             forth.s:725    .text:0000000000002aec ROT
             forth.s:391    .text:0000000000002840 CAT
             tvout.s:660    .text:0000000000001064 SHOW_CURSOR
             tvout.s:691    .text:00000000000010ec HIDE_CURSOR
             forth.s:893    .text:0000000000002c50 EQUAL
             tvout.s:650    .text:0000000000001044 BACK_SPACE
             forth.s:476    .text:00000000000028f4 DROP
             tvout.s:618    .text:0000000000000fec CAR_RET
             tvout.s:629    .text:0000000000001004 LN_FEED
             tvout.s:619    .text:0000000000000fec $t
             tvout.s:620    .text:0000000000000ff0 $d
             tvout.s:630    .text:0000000000001004 $t
             tvout.s:631    .text:0000000000001008 $d
             forth.s:537    .text:0000000000002970 XORR
             tvout.s:651    .text:0000000000001044 $t
             tvout.s:652    .text:0000000000001048 $d
             tvout.s:660    .text:0000000000001058 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001064 $t
             tvout.s:663    .text:0000000000001068 $d
             forth.s:707    .text:0000000000002ac8 TWOSL
             forth.s:381    .text:000000000000282c CSTOR
             forth.s:747    .text:0000000000002b14 DDROP
             tvout.s:691    .text:00000000000010e0 _HIDE_CURSOR
             tvout.s:691    .text:00000000000010ec $t
             tvout.s:694    .text:00000000000010f0 $d
             forth.s:567    .text:00000000000029b8 LSHIFT
             forth.s:528    .text:000000000000295c ORR
             tvout.s:704    .text:0000000000001118 _TV_AT
             tvout.s:704    .text:000000000000111e $t
ARM GAS  forth.s 			page 190


             tvout.s:704    .text:0000000000001120 TV_AT
             tvout.s:719    .text:0000000000001144 $d
             tvout.s:719    .text:0000000000001148 _INPUT
             tvout.s:719    .text:000000000000114e $t
             tvout.s:719    .text:0000000000001150 INPUT
             tvout.s:721    .text:0000000000001154 $d
             forth.s:1611   .text:0000000000003288 PAD
             forth.s:2770   .text:0000000000003f84 ACCEP
             forth.s:502    .text:0000000000002928 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001180 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
ARM GAS  forth.s 			page 191


       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
ARM GAS  forth.s 			page 192


       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000118c sc_ascii
         mcSaite.inc:100    .text:0000000000001240 shifted
         mcSaite.inc:151    .text:00000000000012a0 altchar
         mcSaite.inc:167    .text:00000000000012b0 extended
         mcSaite.inc:191    .text:00000000000012d8 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000130e $t
           ps2_kbd.s:179    .text:000000000000143a send_bit
           ps2_kbd.s:107    .text:0000000000001370 start_bit
           ps2_kbd.s:118    .text:0000000000001394 parity_bit
           ps2_kbd.s:125    .text:00000000000013a8 stop_bit
           ps2_kbd.s:152    .text:00000000000013fe store_code
ARM GAS  forth.s 			page 193


           ps2_kbd.s:253    .text:00000000000014ce do_async_key
           ps2_kbd.s:204    .text:000000000000147e send_parity
           ps2_kbd.s:211    .text:0000000000001490 send_stop
           ps2_kbd.s:218    .text:000000000000149a rx_ack_bit
           ps2_kbd.s:236    .text:00000000000014ba is_async_key
           ps2_kbd.s:286    .text:000000000000151e async_keys
           ps2_kbd.s:378    .text:0000000000001604 table_scan
           ps2_kbd.s:260    .text:00000000000014e0 set_async_key
           ps2_kbd.s:295    .text:000000000000152c async_jump
           ps2_kbd.s:265    .text:00000000000014ee shift_key
           ps2_kbd.s:273    .text:00000000000014fe set_reset
           ps2_kbd.s:268    .text:00000000000014f4 ctrl_key
           ps2_kbd.s:271    .text:00000000000014fa alt_key
           ps2_kbd.s:287    .text:000000000000151e $d
           ps2_kbd.s:340    .text:00000000000015ac $d
           ps2_kbd.s:340    .text:00000000000015b0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000015ba $t
           ps2_kbd.s:340    .text:00000000000015bc KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000015cc keycode
           ps2_kbd.s:365    .text:00000000000015f4 wait_code
           ps2_kbd.s:396    .text:000000000000161e $d
           ps2_kbd.s:396    .text:0000000000001622 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001678 inkey_exit
           ps2_kbd.s:418    .text:000000000000167c pause_key
           ps2_kbd.s:427    .text:0000000000001692 do_modifiers
           ps2_kbd.s:436    .text:00000000000016aa shift_down
           ps2_kbd.s:440    .text:00000000000016b0 altchar_down
           ps2_kbd.s:444    .text:00000000000016b6 ctrl_down
           ps2_kbd.s:452    .text:00000000000016d2 do_capslock
           ps2_kbd.s:478    .text:00000000000016f6 kbd_send
           ps2_kbd.s:553    .text:00000000000017ea kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001808 $d
           ps2_kbd.s:567    .text:000000000000180c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001814 $t
           ps2_kbd.s:567    .text:0000000000001814 KBD_RST
           ps2_kbd.s:591    .text:000000000000185e $d
           ps2_kbd.s:591    .text:0000000000001862 _KBD_LED
           ps2_kbd.s:591    .text:000000000000186a $t
           ps2_kbd.s:591    .text:000000000000186c KBD_LED
           ps2_kbd.s:616    .text:00000000000018c0 $d
           ps2_kbd.s:616    .text:00000000000018c4 _CAPS_LED
           ps2_kbd.s:616    .text:00000000000018d0 CAPS_LED
           ps2_kbd.s:633    .text:00000000000018fa $d
           ps2_kbd.s:633    .text:00000000000018fe _WKEY
           ps2_kbd.s:633    .text:0000000000001908 WKEY
           ps2_kbd.s:635    .text:000000000000190c $d
           ps2_kbd.s:640    .text:0000000000001924 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001944 $t
         spi-flash.s:85     .text:00000000000019e6 $d
         spi-flash.s:85     .text:00000000000019ea _CHIP_SEL
         spi-flash.s:85     .text:00000000000019f4 CHIP_SEL
         spi-flash.s:97     .text:0000000000001a12 $d
         spi-flash.s:97     .text:0000000000001a16 _CHIP_DSEL
ARM GAS  forth.s 			page 194


         spi-flash.s:97     .text:0000000000001a20 $t
         spi-flash.s:97     .text:0000000000001a20 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001a4e $d
         spi-flash.s:113    .text:0000000000001a52 _RD_BYTE
         spi-flash.s:113    .text:0000000000001a5a $t
         spi-flash.s:113    .text:0000000000001a5c RD_BYTE
         spi-flash.s:133    .text:0000000000001a84 $d
         spi-flash.s:133    .text:0000000000001a88 _WR_BYTE
         spi-flash.s:133    .text:0000000000001a90 $t
         spi-flash.s:133    .text:0000000000001a90 WR_BYTE
         spi-flash.s:151    .text:0000000000001ab4 $d
         spi-flash.s:151    .text:0000000000001ab8 _WR_DIS
         spi-flash.s:151    .text:0000000000001ac0 WR_DIS
         spi-flash.s:153    .text:0000000000001ac4 $d
         spi-flash.s:163    .text:0000000000001ae0 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ae8 $t
         spi-flash.s:163    .text:0000000000001ae8 WR_ENBL
         spi-flash.s:165    .text:0000000000001aec $d
         spi-flash.s:175    .text:0000000000001b08 _RD_SR
         spi-flash.s:175    .text:0000000000001b0e $t
         spi-flash.s:175    .text:0000000000001b10 RD_SR
         spi-flash.s:177    .text:0000000000001b14 $d
         spi-flash.s:185    .text:0000000000001b38 sr_cmd
         spi-flash.s:191    .text:0000000000001b3f _SEND_ADR
         spi-flash.s:191    .text:0000000000001b48 $t
         spi-flash.s:191    .text:0000000000001b48 SEND_ADR
         spi-flash.s:193    .text:0000000000001b4c $d
         spi-flash.s:208    .text:0000000000001b80 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001b8a $t
         spi-flash.s:208    .text:0000000000001b8c WAIT_DONE
         spi-flash.s:210    .text:0000000000001b90 $d
         spi-flash.s:223    .text:0000000000001bc0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001bca $t
         spi-flash.s:223    .text:0000000000001bcc ERASE_BLK
         spi-flash.s:225    .text:0000000000001bd0 $d
         spi-flash.s:238    .text:0000000000001bf8 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001c04 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001c08 $d
         spi-flash.s:256    .text:0000000000001c38 _RD_BLK
         spi-flash.s:256    .text:0000000000001c40 RD_BLK
         spi-flash.s:258    .text:0000000000001c44 $d
         spi-flash.s:278    .text:0000000000001c8c _WR_BLK
         spi-flash.s:278    .text:0000000000001c94 WR_BLK
         spi-flash.s:280    .text:0000000000001c98 $d
             forth.s:2290   .text:00000000000039c0 HDOT
         spi-flash.s:316    .text:0000000000001cf0 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001cfc $t
         spi-flash.s:316    .text:0000000000001cfc SEARCH_FILE
         spi-flash.s:319    .text:0000000000001d00 $d
         spi-flash.s:325    .text:0000000000001d08 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001d14 ERASE_FILE
         spi-flash.s:328    .text:0000000000001d18 $d
         spi-flash.s:334    .text:0000000000001d20 _DIR
         spi-flash.s:334    .text:0000000000001d24 $t
         spi-flash.s:334    .text:0000000000001d24 DIR
         spi-flash.s:337    .text:0000000000001d28 $d
         spi-flash.s:343    .text:0000000000001d30 _SAVE
ARM GAS  forth.s 			page 195


         spi-flash.s:343    .text:0000000000001d38 SAVE
         spi-flash.s:346    .text:0000000000001d3c $d
         spi-flash.s:352    .text:0000000000001d44 _LOAD
         spi-flash.s:352    .text:0000000000001d4c LOAD
         spi-flash.s:355    .text:0000000000001d50 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:37     .text:0000000000001d54 $t
               fpu.s:54     .text:0000000000001d82 $d
               fpu.s:54     .text:0000000000001d86 _FPSCR
               fpu.s:54     .text:0000000000001d8c $t
               fpu.s:64     .text:0000000000001d9c $d
               fpu.s:64     .text:0000000000001da0 _CLR_FPSCR
               fpu.s:64     .text:0000000000001daa $t
               fpu.s:64     .text:0000000000001dac CLR_FPSCR
               fpu.s:75     .text:0000000000001dbc $d
               fpu.s:75     .text:0000000000001dc0 _TOS0
               fpu.s:75     .text:0000000000001dc4 $t
               fpu.s:75     .text:0000000000001dc4 TOS0
               fpu.s:84     .text:0000000000001dd0 $d
               fpu.s:84     .text:0000000000001dd4 _TOS1
               fpu.s:84     .text:0000000000001dd8 $t
               fpu.s:84     .text:0000000000001dd8 TOS1
               fpu.s:93     .text:0000000000001de2 $d
               fpu.s:93     .text:0000000000001de6 _TOS2
               fpu.s:93     .text:0000000000001dea $t
               fpu.s:93     .text:0000000000001dec TOS2
               fpu.s:102    .text:0000000000001df6 $d
               fpu.s:102    .text:0000000000001dfa _S0FROM
               fpu.s:102    .text:0000000000001dfe $t
               fpu.s:102    .text:0000000000001e00 S0FROM
               fpu.s:111    .text:0000000000001e0a $d
               fpu.s:111    .text:0000000000001e0e _S1FROM
               fpu.s:111    .text:0000000000001e12 $t
               fpu.s:111    .text:0000000000001e14 S1FROM
               fpu.s:120    .text:0000000000001e1e $d
               fpu.s:120    .text:0000000000001e22 _S2FROM
               fpu.s:120    .text:0000000000001e26 $t
               fpu.s:120    .text:0000000000001e28 S2FROM
               fpu.s:131    .text:0000000000001e32 $d
               fpu.s:131    .text:0000000000001e36 _FTOS
               fpu.s:131    .text:0000000000001e3a $t
               fpu.s:131    .text:0000000000001e3c FTOS
               fpu.s:141    .text:0000000000001e4a $d
               fpu.s:141    .text:0000000000001e4e _TRUNC
               fpu.s:141    .text:0000000000001e54 $t
               fpu.s:141    .text:0000000000001e54 TRUNC
               fpu.s:151    .text:0000000000001e62 $d
               fpu.s:151    .text:0000000000001e66 _STOF
               fpu.s:151    .text:0000000000001e6a $t
               fpu.s:151    .text:0000000000001e6c STOF
               fpu.s:161    .text:0000000000001e7a $d
               fpu.s:161    .text:0000000000001e7e _FPLUS
               fpu.s:161    .text:0000000000001e84 FPLUS
               fpu.s:174    .text:0000000000001e9a $d
               fpu.s:174    .text:0000000000001e9e _FMINUS
ARM GAS  forth.s 			page 196


               fpu.s:174    .text:0000000000001ea4 FMINUS
               fpu.s:188    .text:0000000000001eba $d
               fpu.s:188    .text:0000000000001ebe _FSTAR
               fpu.s:188    .text:0000000000001ec4 FSTAR
               fpu.s:201    .text:0000000000001eda $d
               fpu.s:201    .text:0000000000001ede _FSLH
               fpu.s:201    .text:0000000000001ee4 FSLH
               fpu.s:214    .text:0000000000001efa $d
               fpu.s:214    .text:0000000000001efe _FNEG
               fpu.s:214    .text:0000000000001f06 $t
               fpu.s:214    .text:0000000000001f08 FNEG
               fpu.s:224    .text:0000000000001f16 $d
               fpu.s:224    .text:0000000000001f1a _FABS
               fpu.s:224    .text:0000000000001f20 FABS
               fpu.s:235    .text:0000000000001f2e $d
               fpu.s:235    .text:0000000000001f32 _SQRT
               fpu.s:235    .text:0000000000001f38 SQRT
               fpu.s:245    .text:0000000000001f46 $d
               fpu.s:245    .text:0000000000001f4a _FZLESS
               fpu.s:245    .text:0000000000001f4e $t
               fpu.s:245    .text:0000000000001f50 FZLESS
               fpu.s:257    .text:0000000000001f66 $d
               fpu.s:257    .text:0000000000001f6a _FGREAT
               fpu.s:257    .text:0000000000001f70 FGREAT
               fpu.s:259    .text:0000000000001f74 $d
             forth.s:833    .text:0000000000002bd4 INVER
               fpu.s:268    .text:0000000000001f88 _FLESS
               fpu.s:268    .text:0000000000001f8c FLESS
               fpu.s:270    .text:0000000000001f90 $d
               fpu.s:278    .text:0000000000001fa0 _FMIN
               fpu.s:278    .text:0000000000001fa8 FMIN
               fpu.s:280    .text:0000000000001fac $d
               fpu.s:291    .text:0000000000001fd0 _FMAX
               fpu.s:291    .text:0000000000001fd8 FMAX
               fpu.s:293    .text:0000000000001fdc $d
               fpu.s:306    .text:0000000000002000 _PI
               fpu.s:306    .text:0000000000002004 PI
               fpu.s:320    .text:0000000000002012 $d
               fpu.s:320    .text:0000000000002016 _AT_EXPONENT
               fpu.s:320    .text:0000000000002020 $t
               fpu.s:320    .text:0000000000002020 AT_EXPONENT
               fpu.s:322    .text:0000000000002024 $d
               fpu.s:347    .text:0000000000002050 _FDOT
               fpu.s:347    .text:0000000000002054 FDOT
               fpu.s:349    .text:0000000000002058 $d
               fpu.s:381    .text:00000000000020c4 _NUMBER
               fpu.s:381    .text:00000000000020cc NUMBER
               fpu.s:383    .text:00000000000020d0 $d
             forth.s:2009   .text:000000000000369c INTQ
            strtof.s:294    .text:0000000000002474 FLOATQ
               fpu.s:388    .text:00000000000020ec $d
            strtof.s:32     .text:00000000000020f0 powersof10
            strtof.s:39     *ABS*:0000000000000000 fzero
            strtof.s:40     *ABS*:000000003f800000 fone
            strtof.s:41     *ABS*:00000000bf800000 fminus1
            strtof.s:42     *ABS*:0000000041200000 ften
            strtof.s:46     .text:0000000000002108 get_sign
ARM GAS  forth.s 			page 197


            strtof.s:47     .text:0000000000002108 $t
            strtof.s:48     .text:000000000000210c $d
            strtof.s:280    .text:0000000000002450 padv
            strtof.s:94     .text:0000000000002160 parse_int
            strtof.s:95     .text:0000000000002160 $t
            strtof.s:96     .text:0000000000002164 $d
             forth.s:736    .text:0000000000002b00 NROT
             forth.s:882    .text:0000000000002c3c ZEQUAL
             forth.s:1931   .text:00000000000035bc DIGTQ
            strtof.s:130    .text:00000000000021f0 parse_frac
            strtof.s:131    .text:00000000000021f0 $t
            strtof.s:132    .text:00000000000021f4 $d
             forth.s:3796   .text:0000000000004b7c DOTS
            strtof.s:169    .text:000000000000229c parse_exp
            strtof.s:170    .text:000000000000229c $t
            strtof.s:171    .text:00000000000022a0 $d
             forth.s:841    .text:0000000000002be8 NEGAT
            strtof.s:202    .text:0000000000002330 power10
            strtof.s:203    .text:0000000000002330 $t
            strtof.s:204    .text:0000000000002334 $d
            strtof.s:214    .text:0000000000002354 bit_state
            strtof.s:215    .text:0000000000002354 $t
            strtof.s:216    .text:0000000000002358 $d
             forth.s:1582   .text:0000000000003248 PICK
            strtof.s:228    .text:0000000000002378 mult_div_exp
            strtof.s:229    .text:0000000000002378 $t
            strtof.s:230    .text:000000000000237c $d
             forth.s:511    .text:0000000000002938 ZLESS
            strtof.s:256    .text:00000000000023f8 pos_exp
             forth.s:849    .text:0000000000002bf8 ABSS
            strtof.s:241    .text:00000000000023b0 div_loop
             forth.s:954    .text:0000000000002cd0 GREAT
            strtof.s:258    .text:00000000000023fc mult_loop
            strtof.s:281    .text:0000000000002450 $t
            strtof.s:282    .text:0000000000002454 $d
            strtof.s:294    .text:000000000000246c _FLOATQ
            strtof.s:298    .text:0000000000002478 $d
            strtof.s:315    .text:00000000000024c4 int_part
            strtof.s:371    .text:00000000000025b0 error1
            strtof.s:324    .text:00000000000024e8 dot_or_e
            strtof.s:368    .text:00000000000025a8 not_float
            strtof.s:345    .text:000000000000253c test_E
            strtof.s:358    .text:0000000000002574 is_float
            strtof.s:356    .text:0000000000002570 exp_to_bin
            strtof.s:375    .text:00000000000025bc restore_base
             forth.s:80     .text:00000000000025cc $t
             forth.s:103    .text:00000000000025e4 COMPI_NEST
             forth.s:116    .text:0000000000002602 TSTDIN
             forth.s:123    .text:000000000000260c TSTDOUT
             forth.s:132    .text:0000000000002616 $d
             forth.s:132    .text:000000000000261a _CFSR
             forth.s:144    .text:000000000000263a $d
             forth.s:144    .text:000000000000263e _BFAR
             forth.s:156    .text:000000000000265e $d
             forth.s:156    .text:0000000000002662 _QKEY
             forth.s:156    .text:0000000000002668 QKEY
             forth.s:158    .text:000000000000266c $d
ARM GAS  forth.s 			page 198


             forth.s:1634   .text:00000000000032c0 ATEXE
             forth.s:166    .text:000000000000267c _KEY
             forth.s:166    .text:0000000000002680 $t
             forth.s:166    .text:0000000000002680 KEY
             forth.s:168    .text:0000000000002684 KEY1
             forth.s:169    .text:0000000000002684 $d
             forth.s:178    .text:000000000000269c _EMIT
             forth.s:180    .text:00000000000026a8 $d
             forth.s:214    .text:00000000000026b8 _RAND
             forth.s:214    .text:00000000000026c0 RAND
             forth.s:216    .text:00000000000026c4 $d
             forth.s:1073   .text:0000000000002da0 SEED
             forth.s:1485   .text:0000000000003144 MODD
             forth.s:245    .text:0000000000002734 _PAUSE
             forth.s:245    .text:000000000000273a $t
             forth.s:245    .text:000000000000273c PAUSE
             forth.s:247    .text:0000000000002740 $d
             forth.s:1091   .text:0000000000002dc8 TIMER
             forth.s:249    .text:0000000000002748 PAUSE_LOOP
             forth.s:254    .text:0000000000002760 PAUSE_EXIT
             forth.s:261    .text:0000000000002768 _ULED
             forth.s:270    .text:000000000000278c ULED_OFF
             forth.s:284    .text:0000000000002790 $d
             forth.s:284    .text:0000000000002794 _NOP
             forth.s:284    .text:0000000000002798 $t
             forth.s:284    .text:0000000000002798 NOP
             forth.s:301    .text:00000000000027a4 $d
             forth.s:301    .text:00000000000027a8 _EXECU
             forth.s:301    .text:00000000000027b0 $t
             forth.s:301    .text:00000000000027b0 EXECU
             forth.s:321    .text:00000000000027cc NEXT1
             forth.s:339    .text:00000000000027e8 QBRAN1
             forth.s:356    .text:00000000000027f4 $d
             forth.s:356    .text:00000000000027f8 _EXIT
             forth.s:356    .text:0000000000002800 EXIT
             forth.s:357    .text:0000000000002800 $d
             forth.s:363    .text:0000000000002808 _STORE
             forth.s:363    .text:000000000000280a $t
             forth.s:373    .text:0000000000002818 $d
             forth.s:373    .text:000000000000281c _AT
             forth.s:373    .text:000000000000281e $t
             forth.s:381    .text:0000000000002824 $d
             forth.s:381    .text:0000000000002828 _CSTOR
             forth.s:391    .text:0000000000002838 $d
             forth.s:391    .text:000000000000283c _CAT
             forth.s:399    .text:0000000000002844 $d
             forth.s:399    .text:0000000000002848 _RFROM
             forth.s:408    .text:0000000000002856 $d
             forth.s:408    .text:000000000000285a _DRFROM
             forth.s:408    .text:000000000000285e $t
             forth.s:408    .text:0000000000002860 DRFROM
             forth.s:419    .text:0000000000002872 $d
             forth.s:419    .text:0000000000002876 _RAT
             forth.s:428    .text:0000000000002886 $d
             forth.s:428    .text:000000000000288a _TOR
             forth.s:437    .text:000000000000289a $d
             forth.s:437    .text:000000000000289e _DTOR
ARM GAS  forth.s 			page 199


             forth.s:437    .text:00000000000028a2 $t
             forth.s:437    .text:00000000000028a4 DTOR
             forth.s:449    .text:00000000000028b6 $d
             forth.s:449    .text:00000000000028ba _RPSTOR
             forth.s:449    .text:00000000000028be $t
             forth.s:449    .text:00000000000028c0 RPSTOR
             forth.s:458    .text:00000000000028c8 $d
             forth.s:458    .text:00000000000028cc _SPSTOR
             forth.s:458    .text:00000000000028d0 $t
             forth.s:458    .text:00000000000028d0 SPSTOR
             forth.s:467    .text:00000000000028d8 $d
             forth.s:467    .text:00000000000028dc _SPAT
             forth.s:467    .text:00000000000028e0 $t
             forth.s:467    .text:00000000000028e0 SPAT
             forth.s:476    .text:00000000000028e8 $d
             forth.s:476    .text:00000000000028ec _DROP
             forth.s:484    .text:00000000000028fa $d
             forth.s:484    .text:00000000000028fe _DUPP
             forth.s:484    .text:0000000000002902 $t
             forth.s:492    .text:000000000000290a $d
             forth.s:492    .text:000000000000290e _SWAP
             forth.s:502    .text:000000000000291c $d
             forth.s:502    .text:0000000000002920 _OVER
             forth.s:511    .text:0000000000002930 $d
             forth.s:511    .text:0000000000002934 _ZLESS
             forth.s:519    .text:000000000000293e $d
             forth.s:519    .text:0000000000002942 _ANDD
             forth.s:519    .text:0000000000002946 $t
             forth.s:528    .text:0000000000002952 $d
             forth.s:528    .text:0000000000002956 _ORR
             forth.s:537    .text:0000000000002966 $d
             forth.s:537    .text:000000000000296a _XORR
             forth.s:537    .text:000000000000296e $t
             forth.s:546    .text:000000000000297a $d
             forth.s:546    .text:000000000000297e _UPLUS
             forth.s:546    .text:0000000000002982 $t
             forth.s:546    .text:0000000000002984 UPLUS
             forth.s:558    .text:0000000000002994 $d
             forth.s:558    .text:0000000000002998 _RSHIFT
             forth.s:567    .text:00000000000029aa $d
             forth.s:567    .text:00000000000029ae _LSHIFT
             forth.s:576    .text:00000000000029c2 $d
             forth.s:576    .text:00000000000029c6 _PLUS
             forth.s:576    .text:00000000000029c8 $t
             forth.s:585    .text:00000000000029d0 $d
             forth.s:585    .text:00000000000029d4 _SUBB
             forth.s:585    .text:00000000000029d6 $t
             forth.s:594    .text:00000000000029e2 $d
             forth.s:594    .text:00000000000029e6 _STAR
             forth.s:594    .text:00000000000029e8 $t
             forth.s:603    .text:00000000000029f2 $d
             forth.s:603    .text:00000000000029f6 _UMSTA
             forth.s:603    .text:00000000000029fa $t
             forth.s:603    .text:00000000000029fc UMSTA
             forth.s:615    .text:0000000000002a08 $d
             forth.s:615    .text:0000000000002a0c _MSTAR
             forth.s:615    .text:0000000000002a10 MSTAR
ARM GAS  forth.s 			page 200


             forth.s:626    .text:0000000000002a1c $d
             forth.s:626    .text:0000000000002a20 _ONEP
             forth.s:634    .text:0000000000002a2a $d
             forth.s:634    .text:0000000000002a2e _ONEM
             forth.s:642    .text:0000000000002a3a $d
             forth.s:642    .text:0000000000002a3e _TWOP
             forth.s:642    .text:0000000000002a44 TWOP
             forth.s:650    .text:0000000000002a4a $d
             forth.s:650    .text:0000000000002a4e _TWOM
             forth.s:650    .text:0000000000002a54 TWOM
             forth.s:658    .text:0000000000002a5a $d
             forth.s:658    .text:0000000000002a5e _CELLP
             forth.s:658    .text:0000000000002a64 $t
             forth.s:658    .text:0000000000002a64 CELLP
             forth.s:666    .text:0000000000002a6a $d
             forth.s:666    .text:0000000000002a6e _CELLM
             forth.s:666    .text:0000000000002a74 $t
             forth.s:666    .text:0000000000002a74 CELLM
             forth.s:674    .text:0000000000002a7a $d
             forth.s:674    .text:0000000000002a7e _BLANK
             forth.s:674    .text:0000000000002a84 BLANK
             forth.s:683    .text:0000000000002a8e $d
             forth.s:683    .text:0000000000002a92 _CELLS
             forth.s:683    .text:0000000000002a98 $t
             forth.s:683    .text:0000000000002a98 CELLS
             forth.s:691    .text:0000000000002a9e $d
             forth.s:691    .text:0000000000002aa2 _CELLSL
             forth.s:691    .text:0000000000002aa8 $t
             forth.s:691    .text:0000000000002aa8 CELLSL
             forth.s:699    .text:0000000000002aae $d
             forth.s:699    .text:0000000000002ab2 _TWOST
             forth.s:699    .text:0000000000002ab8 TWOST
             forth.s:707    .text:0000000000002abe $d
             forth.s:707    .text:0000000000002ac2 _TWOSL
             forth.s:715    .text:0000000000002ace $d
             forth.s:715    .text:0000000000002ad2 _QDUP
             forth.s:725    .text:0000000000002ae2 $d
             forth.s:725    .text:0000000000002ae6 _ROT
             forth.s:725    .text:0000000000002aea $t
             forth.s:736    .text:0000000000002af6 $d
             forth.s:736    .text:0000000000002afa _NROT
             forth.s:747    .text:0000000000002b0a $d
             forth.s:747    .text:0000000000002b0e _DDROP
             forth.s:747    .text:0000000000002b14 $t
             forth.s:756    .text:0000000000002b1e $d
             forth.s:756    .text:0000000000002b22 _TDROP
             forth.s:756    .text:0000000000002b28 $t
             forth.s:765    .text:0000000000002b32 $d
             forth.s:765    .text:0000000000002b36 _DDUP
             forth.s:775    .text:0000000000002b48 $d
             forth.s:775    .text:0000000000002b4c _DPLUS
             forth.s:775    .text:0000000000002b50 DPLUS
             forth.s:788    .text:0000000000002b64 $d
             forth.s:788    .text:0000000000002b68 _DABS
             forth.s:788    .text:0000000000002b70 DABS
             forth.s:804    .text:0000000000002b8c $d
             forth.s:804    .text:0000000000002b90 _UDGREAT
ARM GAS  forth.s 			page 201


             forth.s:804    .text:0000000000002b94 $t
             forth.s:804    .text:0000000000002b94 UDGREAT
             forth.s:821    .text:0000000000002bb0 $d
             forth.s:821    .text:0000000000002bb4 _DZEQUAL
             forth.s:821    .text:0000000000002bb8 $t
             forth.s:821    .text:0000000000002bb8 DZEQUAL
             forth.s:833    .text:0000000000002bca $d
             forth.s:833    .text:0000000000002bce _INVER
             forth.s:833    .text:0000000000002bd2 $t
             forth.s:841    .text:0000000000002bda $d
             forth.s:841    .text:0000000000002bde _NEGAT
             forth.s:849    .text:0000000000002bee $d
             forth.s:849    .text:0000000000002bf2 _ABSS
             forth.s:849    .text:0000000000002bf6 $t
             forth.s:859    .text:0000000000002c02 $d
             forth.s:859    .text:0000000000002c06 _CLZ
             forth.s:859    .text:0000000000002c0a $t
             forth.s:859    .text:0000000000002c0c CLZ
             forth.s:867    .text:0000000000002c12 $d
             forth.s:867    .text:0000000000002c16 _CTZ
             forth.s:867    .text:0000000000002c1a $t
             forth.s:867    .text:0000000000002c1c CTZ
             forth.s:882    .text:0000000000002c34 $d
             forth.s:882    .text:0000000000002c38 _ZEQUAL
             forth.s:893    .text:0000000000002c4a $d
             forth.s:893    .text:0000000000002c4e _EQUAL
             forth.s:893    .text:0000000000002c50 $t
             forth.s:905    .text:0000000000002c60 $d
             forth.s:905    .text:0000000000002c64 _DIFF
             forth.s:905    .text:0000000000002c68 DIFF
             forth.s:918    .text:0000000000002c80 $d
             forth.s:918    .text:0000000000002c84 _ULESS
             forth.s:930    .text:0000000000002c98 $d
             forth.s:930    .text:0000000000002c9c _LESS
             forth.s:930    .text:0000000000002c9e $t
             forth.s:930    .text:0000000000002ca0 LESS
             forth.s:942    .text:0000000000002cb0 $d
             forth.s:942    .text:0000000000002cb4 _UGREAT
             forth.s:942    .text:0000000000002cb8 UGREAT
             forth.s:954    .text:0000000000002cc8 $d
             forth.s:954    .text:0000000000002ccc _GREAT
             forth.s:954    .text:0000000000002cce $t
             forth.s:966    .text:0000000000002ce0 $d
             forth.s:966    .text:0000000000002ce4 _MAX
             forth.s:966    .text:0000000000002ce8 $t
             forth.s:966    .text:0000000000002ce8 MAX
             forth.s:977    .text:0000000000002cf4 $d
             forth.s:977    .text:0000000000002cf8 _MIN
             forth.s:977    .text:0000000000002cfc $t
             forth.s:977    .text:0000000000002cfc MIN
             forth.s:988    .text:0000000000002d08 $d
             forth.s:988    .text:0000000000002d0c _PSTOR
             forth.s:988    .text:0000000000002d10 PSTOR
             forth.s:1000   .text:0000000000002d20 $d
             forth.s:1000   .text:0000000000002d24 _DSTOR
             forth.s:1000   .text:0000000000002d28 DSTOR
             forth.s:1012   .text:0000000000002d3c $d
ARM GAS  forth.s 			page 202


             forth.s:1012   .text:0000000000002d40 _DAT
             forth.s:1012   .text:0000000000002d44 DAT
             forth.s:1022   .text:0000000000002d4e $d
             forth.s:1022   .text:0000000000002d52 _COUNT
             forth.s:1022   .text:0000000000002d58 $t
             forth.s:1032   .text:0000000000002d64 $d
             forth.s:1032   .text:0000000000002d68 _DNEGA
             forth.s:1032   .text:0000000000002d70 $t
             forth.s:1032   .text:0000000000002d70 DNEGA
             forth.s:1049   .text:0000000000002d80 DOVAR
             forth.s:1060   .text:0000000000002d8c DOCON
             forth.s:1073   .text:0000000000002d96 $d
             forth.s:1073   .text:0000000000002d9a _SEED
             forth.s:1082   .text:0000000000002daa $d
             forth.s:1082   .text:0000000000002dae _MSEC
             forth.s:1091   .text:0000000000002dbe $d
             forth.s:1091   .text:0000000000002dc2 _TIMER
             forth.s:1091   .text:0000000000002dc8 $t
             forth.s:1100   .text:0000000000002dd2 $d
             forth.s:1100   .text:0000000000002dd6 _TBOOT
             forth.s:1100   .text:0000000000002ddc $t
             forth.s:1100   .text:0000000000002ddc TBOOT
             forth.s:1109   .text:0000000000002de8 $d
             forth.s:1109   .text:0000000000002dec _BASE
             forth.s:1119   .text:0000000000002e00 TEMP
             forth.s:1128   .text:0000000000002e0c $d
             forth.s:1128   .text:0000000000002e10 _SPAN
             forth.s:1128   .text:0000000000002e18 SPAN
             forth.s:1137   .text:0000000000002e24 $d
             forth.s:1137   .text:0000000000002e28 _INN
             forth.s:1137   .text:0000000000002e2c $t
             forth.s:1137   .text:0000000000002e2c INN
             forth.s:1147   .text:0000000000002e38 $d
             forth.s:1147   .text:0000000000002e3c _NTIB
             forth.s:1147   .text:0000000000002e44 NTIB
             forth.s:1156   .text:0000000000002e50 $d
             forth.s:1156   .text:0000000000002e54 _TEVAL
             forth.s:1156   .text:0000000000002e5a $t
             forth.s:1156   .text:0000000000002e5c TEVAL
             forth.s:1166   .text:0000000000002e68 $d
             forth.s:1166   .text:0000000000002e6c _HLD
             forth.s:1166   .text:0000000000002e70 $t
             forth.s:1166   .text:0000000000002e70 HLD
             forth.s:1176   .text:0000000000002e7c $d
             forth.s:1176   .text:0000000000002e80 _CNTXT
             forth.s:1176   .text:0000000000002e88 $t
             forth.s:1176   .text:0000000000002e88 CNTXT
             forth.s:1177   .text:0000000000002e88 CRRNT
             forth.s:1187   .text:0000000000002e94 $d
             forth.s:1187   .text:0000000000002e98 _CPP
             forth.s:1187   .text:0000000000002e9c CPP
             forth.s:1197   .text:0000000000002ea8 $d
             forth.s:1197   .text:0000000000002eac _FCP
             forth.s:1197   .text:0000000000002eb0 $t
             forth.s:1197   .text:0000000000002eb0 FCP
             forth.s:1207   .text:0000000000002ebc $d
             forth.s:1207   .text:0000000000002ec0 _LAST
ARM GAS  forth.s 			page 203


             forth.s:1207   .text:0000000000002ec8 LAST
             forth.s:1221   .text:0000000000002ed4 $d
             forth.s:1221   .text:0000000000002ed8 _USER_BEGIN
             forth.s:1221   .text:0000000000002ee4 USER_BEGIN
             forth.s:1225   .text:0000000000002ef0 USR_BGN_ADR
             forth.s:1226   .text:0000000000002ef0 $d
             forth.s:1232   .text:0000000000002ef8 _USER_END
             forth.s:1232   .text:0000000000002f04 USER_END
             forth.s:1236   .text:0000000000002f10 USER_END_ADR
             forth.s:1237   .text:0000000000002f10 $d
             forth.s:1249   .text:0000000000002f18 _WITHI
             forth.s:1249   .text:0000000000002f20 WITHI
             forth.s:1251   .text:0000000000002f24 $d
             forth.s:1266   .text:0000000000002f44 _UMMOD
             forth.s:1266   .text:0000000000002f4c UMMOD
             forth.s:1270   .text:0000000000002f56 UMMOD0
             forth.s:1277   .text:0000000000002f66 UMMOD1
             forth.s:1283   .text:0000000000002f70 UMMOD2
             forth.s:1296   .text:0000000000002f7c $d
             forth.s:1296   .text:0000000000002f80 _MSMOD
             forth.s:1296   .text:0000000000002f86 $t
             forth.s:1296   .text:0000000000002f88 MSMOD
             forth.s:1298   .text:0000000000002f8c $d
             forth.s:1307   .text:0000000000002fb4 MMOD1
             forth.s:1314   .text:0000000000002fd0 MMOD2
             forth.s:1322   .text:0000000000002ff0 MMOD3
             forth.s:1329   .text:0000000000002ff8 _STOD
             forth.s:1329   .text:0000000000002ffc $t
             forth.s:1329   .text:0000000000002ffc STOD
             forth.s:1338   .text:0000000000003008 $d
             forth.s:1338   .text:000000000000300c _D2STAR
             forth.s:1338   .text:0000000000003010 $t
             forth.s:1338   .text:0000000000003010 D2STAR
             forth.s:1350   .text:0000000000003022 $d
             forth.s:1350   .text:0000000000003026 _D2SL
             forth.s:1350   .text:000000000000302a $t
             forth.s:1350   .text:000000000000302c D2SL
             forth.s:1365   .text:000000000000303a $d
             forth.s:1365   .text:000000000000303e _DSLMOD
             forth.s:1365   .text:0000000000003044 $t
             forth.s:1365   .text:0000000000003044 DSLMOD
             forth.s:1401   .text:0000000000003090 $d
             forth.s:1401   .text:0000000000003094 _DSLASH
             forth.s:1401   .text:0000000000003098 DSLASH
             forth.s:1403   .text:000000000000309c $d
             forth.s:1423   .text:00000000000030e0 _DSTAR
             forth.s:1423   .text:00000000000030e4 DSTAR
             forth.s:1472   .text:000000000000311a $d
             forth.s:1472   .text:000000000000311e _SLMOD
             forth.s:1474   .text:0000000000003128 $d
             forth.s:1485   .text:0000000000003140 _MODD
             forth.s:1485   .text:0000000000003144 $t
             forth.s:1487   .text:0000000000003148 $d
             forth.s:1496   .text:0000000000003158 _SLASH
             forth.s:1496   .text:000000000000315a $t
             forth.s:1496   .text:000000000000315c SLASH
             forth.s:1498   .text:0000000000003160 $d
ARM GAS  forth.s 			page 204


             forth.s:1509   .text:0000000000003174 _SSMOD
             forth.s:1509   .text:000000000000317a $t
             forth.s:1509   .text:000000000000317c SSMOD
             forth.s:1511   .text:0000000000003180 $d
             forth.s:1523   .text:0000000000003198 _STASL
             forth.s:1523   .text:000000000000319c STASL
             forth.s:1525   .text:00000000000031a0 $d
             forth.s:1539   .text:00000000000031b4 _ALGND
             forth.s:1539   .text:00000000000031bc $t
             forth.s:1539   .text:00000000000031bc ALGND
             forth.s:1550   .text:00000000000031cc $d
             forth.s:1550   .text:00000000000031d0 _TCHAR
             forth.s:1550   .text:00000000000031d6 $t
             forth.s:1550   .text:00000000000031d8 TCHAR
             forth.s:1552   .text:00000000000031dc $d
             forth.s:1562   .text:0000000000003214 TCHA1
             forth.s:1570   .text:000000000000321c _DEPTH
             forth.s:1570   .text:0000000000003222 $t
             forth.s:1570   .text:0000000000003224 DEPTH
             forth.s:1582   .text:000000000000323c $d
             forth.s:1582   .text:0000000000003240 _PICK
             forth.s:1584   .text:000000000000324c $d
             forth.s:1600   .text:0000000000003268 _HERE
             forth.s:1600   .text:0000000000003270 HERE
             forth.s:1602   .text:0000000000003274 $d
             forth.s:1611   .text:0000000000003284 _PAD
             forth.s:1611   .text:0000000000003288 $t
             forth.s:1613   .text:000000000000328c $d
             forth.s:1624   .text:00000000000032a4 _TIB
             forth.s:1624   .text:00000000000032a8 $t
             forth.s:1624   .text:00000000000032a8 TIB
             forth.s:1634   .text:00000000000032b2 $d
             forth.s:1634   .text:00000000000032b6 _ATEXE
             forth.s:1647   .text:00000000000032d4 $d
             forth.s:1647   .text:00000000000032d8 _CMOVE
             forth.s:1647   .text:00000000000032de $t
             forth.s:1647   .text:00000000000032e0 CMOVE
             forth.s:1654   .text:00000000000032f2 CMOV1
             forth.s:1651   .text:00000000000032ea CMOV0
             forth.s:1659   .text:00000000000032fc CMOV2
             forth.s:1667   .text:0000000000003304 $d
             forth.s:1667   .text:0000000000003308 _MOVE
             forth.s:1685   .text:000000000000333a MOVE1
             forth.s:1682   .text:0000000000003336 MOVE3
             forth.s:1679   .text:0000000000003332 MOVE0
             forth.s:1690   .text:0000000000003344 MOVE2
             forth.s:1699   .text:000000000000334c $d
             forth.s:1699   .text:0000000000003350 _FILL
             forth.s:1707   .text:0000000000003366 FILL2
             forth.s:1703   .text:000000000000335e FILL1
             forth.s:1717   .text:000000000000336e $d
             forth.s:1717   .text:0000000000003372 _PACKS
             forth.s:1717   .text:0000000000003378 $t
             forth.s:1717   .text:0000000000003378 PACKS
             forth.s:1719   .text:000000000000337c $d
             forth.s:1748   .text:00000000000033d4 _DIGIT
             forth.s:1748   .text:00000000000033da $t
ARM GAS  forth.s 			page 205


             forth.s:1748   .text:00000000000033dc DIGIT
             forth.s:1750   .text:00000000000033e0 $d
             forth.s:1765   .text:0000000000003414 _EXTRC
             forth.s:1765   .text:000000000000341c $t
             forth.s:1765   .text:000000000000341c EXTRC
             forth.s:1767   .text:0000000000003420 $d
             forth.s:1777   .text:0000000000003434 _BDIGS
             forth.s:1777   .text:0000000000003438 BDIGS
             forth.s:1779   .text:000000000000343c $d
             forth.s:1789   .text:0000000000003450 _HOLD
             forth.s:1789   .text:0000000000003458 HOLD
             forth.s:1791   .text:000000000000345c $d
             forth.s:1807   .text:0000000000003480 _DIG
             forth.s:1807   .text:0000000000003482 $t
             forth.s:1807   .text:0000000000003484 DIG
             forth.s:1809   .text:0000000000003488 $d
             forth.s:1821   .text:00000000000034a0 _DIGS
             forth.s:1821   .text:00000000000034a4 DIGS
             forth.s:1823   .text:00000000000034a8 DIGS1
             forth.s:1824   .text:00000000000034a8 $d
             forth.s:1829   .text:00000000000034c4 DIGS2
             forth.s:1839   .text:00000000000034d0 _SIGN
             forth.s:1839   .text:00000000000034d8 SIGN
             forth.s:1841   .text:00000000000034dc $d
             forth.s:1845   .text:00000000000034f4 SIGN1
             forth.s:1853   .text:00000000000034fc _EDIGS
             forth.s:1853   .text:0000000000003500 EDIGS
             forth.s:1855   .text:0000000000003504 $d
             forth.s:1870   .text:0000000000003520 STRR
             forth.s:1871   .text:0000000000003520 $t
             forth.s:1872   .text:0000000000003524 $d
             forth.s:1889   .text:0000000000003550 _HEX
             forth.s:1889   .text:0000000000003554 $t
             forth.s:1889   .text:0000000000003554 HEX
             forth.s:1891   .text:0000000000003558 $d
             forth.s:1902   .text:0000000000003570 _BIN
             forth.s:1902   .text:0000000000003574 $t
             forth.s:1902   .text:0000000000003574 BIN
             forth.s:1904   .text:0000000000003578 $d
             forth.s:1914   .text:0000000000003590 _DECIM
             forth.s:1914   .text:0000000000003598 $t
             forth.s:1914   .text:0000000000003598 DECIM
             forth.s:1916   .text:000000000000359c $d
             forth.s:1931   .text:00000000000035b4 _DIGTQ
             forth.s:1933   .text:00000000000035c0 $d
             forth.s:1946   .text:0000000000003608 DGTQ1
             forth.s:1958   .text:0000000000003618 PARSE_DIGITS
             forth.s:1959   .text:0000000000003618 $t
             forth.s:1960   .text:000000000000361c $d
             forth.s:1987   .text:0000000000003678 CHARQ
             forth.s:1988   .text:0000000000003678 $t
             forth.s:2009   .text:0000000000003692 $d
             forth.s:2009   .text:0000000000003696 _INTQ
             forth.s:2012   .text:00000000000036a0 $d
             forth.s:2081   .text:00000000000037a4 _SPACE
             forth.s:2081   .text:00000000000037aa $t
             forth.s:2083   .text:00000000000037b0 $d
ARM GAS  forth.s 			page 206


             forth.s:2092   .text:00000000000037c0 _SPACS
             forth.s:2092   .text:00000000000037c8 SPACS
             forth.s:2094   .text:00000000000037cc $d
             forth.s:2100   .text:00000000000037e8 CHAR2
             forth.s:2098   .text:00000000000037e4 CHAR1
             forth.s:2109   .text:00000000000037f8 _TYPEE
             forth.s:2111   .text:0000000000003804 $d
             forth.s:2117   .text:000000000000381c TYPE2
             forth.s:2113   .text:0000000000003810 TYPE1
             forth.s:2127   .text:0000000000003830 _CR
             forth.s:2129   .text:0000000000003838 $d
             forth.s:2141   .text:0000000000003854 DOSTR
             forth.s:2142   .text:0000000000003854 $t
             forth.s:2144   .text:0000000000003858 $d
             forth.s:2162   .text:0000000000003880 STRQP
             forth.s:2163   .text:0000000000003880 $t
             forth.s:2164   .text:0000000000003884 $d
             forth.s:2173   .text:000000000000388c DOTST
             forth.s:2174   .text:000000000000388c $t
             forth.s:2175   .text:0000000000003890 $d
             forth.s:2186   .text:000000000000389c $t
             forth.s:2187   .text:00000000000038a0 $d
             forth.s:2197   .text:00000000000038b0 _DOTR
             forth.s:2197   .text:00000000000038b4 DOTR
             forth.s:2199   .text:00000000000038b8 $d
             forth.s:2214   .text:00000000000038dc _UDOTR
             forth.s:2214   .text:00000000000038e0 $t
             forth.s:2214   .text:00000000000038e0 UDOTR
             forth.s:2216   .text:00000000000038e4 $d
             forth.s:2235   .text:000000000000391c _UDOT
             forth.s:2237   .text:0000000000003924 $d
             forth.s:2251   .text:0000000000003944 _DOT
             forth.s:2251   .text:0000000000003946 $t
             forth.s:2251   .text:0000000000003948 DOT
             forth.s:2253   .text:000000000000394c $d
             forth.s:2260   .text:0000000000003970 DOT1
             forth.s:2270   .text:0000000000003984 _DDOT
             forth.s:2270   .text:0000000000003988 DDOT
             forth.s:2272   .text:000000000000398c $d
             forth.s:2290   .text:00000000000039bc _HDOT
             forth.s:2292   .text:00000000000039c4 $d
             forth.s:2307   .text:00000000000039e8 _QUEST
             forth.s:2307   .text:00000000000039ea $t
             forth.s:2307   .text:00000000000039ec QUEST
             forth.s:2309   .text:00000000000039f0 $d
             forth.s:2323   .text:00000000000039fc PARS
             forth.s:2324   .text:00000000000039fc $t
             forth.s:2325   .text:0000000000003a00 $d
             forth.s:2391   .text:0000000000003b10 PARS8
             forth.s:2355   .text:0000000000003a84 PARS3
             forth.s:2338   .text:0000000000003a3c PARS1
             forth.s:2353   .text:0000000000003a80 PARS2
             forth.s:2359   .text:0000000000003a90 PARS4
             forth.s:2371   .text:0000000000003ac0 PARS5
             forth.s:2378   .text:0000000000003ae4 PARS6
             forth.s:2384   .text:0000000000003af8 PARS7
             forth.s:2402   .text:0000000000003b24 _PARSE
ARM GAS  forth.s 			page 207


             forth.s:2402   .text:0000000000003b2a $t
             forth.s:2402   .text:0000000000003b2c PARSE
             forth.s:2404   .text:0000000000003b30 $d
             forth.s:2425   .text:0000000000003b70 _DOTPR
             forth.s:2425   .text:0000000000003b74 DOTPR
             forth.s:2427   .text:0000000000003b78 $d
             forth.s:2438   .text:0000000000003b90 _PAREN
             forth.s:2438   .text:0000000000003b92 $t
             forth.s:2438   .text:0000000000003b94 PAREN
             forth.s:2440   .text:0000000000003b98 $d
             forth.s:2451   .text:0000000000003bb0 _BKSLA
             forth.s:2451   .text:0000000000003bb2 $t
             forth.s:2451   .text:0000000000003bb4 BKSLA
             forth.s:2453   .text:0000000000003bb8 $d
             forth.s:2464   .text:0000000000003bd0 _CHAR
             forth.s:2464   .text:0000000000003bd8 CHAR
             forth.s:2466   .text:0000000000003bdc $d
             forth.s:2476   .text:0000000000003bf4 _IMCHAR
             forth.s:2476   .text:0000000000003bfc IMCHAR
             forth.s:2478   .text:0000000000003c00 $d
             forth.s:3074   .text:0000000000004324 LITER
             forth.s:2487   .text:0000000000003c10 _WORDD
             forth.s:2487   .text:0000000000003c18 WORDD
             forth.s:2489   .text:0000000000003c1c $d
             forth.s:2501   .text:0000000000003c34 _TOKEN
             forth.s:2501   .text:0000000000003c3a $t
             forth.s:2501   .text:0000000000003c3c TOKEN
             forth.s:2503   .text:0000000000003c40 $d
             forth.s:2668   .text:0000000000003e30 UPPER
             forth.s:2517   .text:0000000000003c54 _NAMET
             forth.s:2517   .text:0000000000003c5a $t
             forth.s:2517   .text:0000000000003c5c NAMET
             forth.s:2519   .text:0000000000003c60 $d
             forth.s:2538   .text:0000000000003c80 _SAMEQ
             forth.s:2538   .text:0000000000003c86 $t
             forth.s:2538   .text:0000000000003c88 SAMEQ
             forth.s:2540   .text:0000000000003c8c $d
             forth.s:2557   .text:0000000000003cd4 SAME2
             forth.s:2542   .text:0000000000003c98 SAME1
             forth.s:2572   .text:0000000000003ce8 FIND
             forth.s:2573   .text:0000000000003ce8 $t
             forth.s:2574   .text:0000000000003cec $d
             forth.s:2581   .text:0000000000003d08 FIND1
             forth.s:2601   .text:0000000000003d60 FIND6
             forth.s:2594   .text:0000000000003d48 FIND2
             forth.s:2599   .text:0000000000003d58 FIND3
             forth.s:2608   .text:0000000000003d78 FIND4
             forth.s:2614   .text:0000000000003d94 FIND5
             forth.s:2630   .text:0000000000003dbc _NAMEQ
             forth.s:2630   .text:0000000000003dc2 $t
             forth.s:2630   .text:0000000000003dc4 NAMEQ
             forth.s:2632   .text:0000000000003dc8 $d
             forth.s:2647   .text:0000000000003ddc _ASCIZ
             forth.s:2647   .text:0000000000003de2 $t
             forth.s:2647   .text:0000000000003de4 ASCIZ
             forth.s:2649   .text:0000000000003de8 $d
             forth.s:2668   .text:0000000000003e28 _UPPER
ARM GAS  forth.s 			page 208


             forth.s:2668   .text:0000000000003e2e $t
             forth.s:2670   .text:0000000000003e34 $d
             forth.s:2701   .text:0000000000003eb8 BKSP
             forth.s:2702   .text:0000000000003eb8 $t
             forth.s:2703   .text:0000000000003ebc $d
             forth.s:2717   .text:0000000000003f00 BACK1
             forth.s:2726   .text:0000000000003f04 TAP
             forth.s:2727   .text:0000000000003f04 $t
             forth.s:2728   .text:0000000000003f08 $d
             forth.s:2741   .text:0000000000003f20 KTAP
             forth.s:2742   .text:0000000000003f20 TTAP
             forth.s:2743   .text:0000000000003f20 $t
             forth.s:2744   .text:0000000000003f24 $d
             forth.s:2758   .text:0000000000003f64 KTAP2
             forth.s:2755   .text:0000000000003f5c KTAP1
             forth.s:2770   .text:0000000000003f7c _ACCEP
             forth.s:2772   .text:0000000000003f88 $d
             forth.s:2775   .text:0000000000003f94 ACCP1
             forth.s:2791   .text:0000000000003fdc ACCP4
             forth.s:2787   .text:0000000000003fd0 ACCP2
             forth.s:2789   .text:0000000000003fd4 ACCP3
             forth.s:2802   .text:0000000000003ff0 _QUERY
             forth.s:2802   .text:0000000000003ff6 $t
             forth.s:2802   .text:0000000000003ff8 QUERY
             forth.s:2804   .text:0000000000003ffc $d
             forth.s:2824   .text:0000000000004030 _ABORT
             forth.s:2824   .text:0000000000004036 $t
             forth.s:2826   .text:000000000000403c ABORT1
             forth.s:2827   .text:000000000000403c $d
             forth.s:2958   .text:00000000000041e0 QUIT
             forth.s:2842   .text:0000000000004064 ABORQ
             forth.s:2843   .text:0000000000004064 $t
             forth.s:2844   .text:0000000000004068 $d
             forth.s:2862   .text:000000000000408c _INTER
             forth.s:2864   .text:000000000000409c $d
             forth.s:2873   .text:00000000000040d8 INTE1
             forth.s:2870   .text:00000000000040ce $t
             forth.s:2871   .text:00000000000040d0 $d
             forth.s:2877   .text:00000000000040e8 INTE2
             forth.s:2884   .text:00000000000040f0 _LBRAC
             forth.s:2884   .text:00000000000040f2 $t
             forth.s:2884   .text:00000000000040f4 LBRAC
             forth.s:2886   .text:00000000000040f8 $d
             forth.s:2896   .text:0000000000004110 _DOTOK
             forth.s:2896   .text:0000000000004114 $t
             forth.s:2896   .text:0000000000004114 DOTOK
             forth.s:2898   .text:0000000000004118 $d
             forth.s:2904   .text:000000000000413c DOTO1
             forth.s:2905   .text:000000000000413c $d
             forth.s:2913   .text:0000000000004148 _QSTAC
             forth.s:2913   .text:0000000000004150 QSTAC
             forth.s:2915   .text:0000000000004154 $d
             forth.s:2917   .text:000000000000416a $t
             forth.s:2918   .text:000000000000416c $d
             forth.s:2925   .text:0000000000004174 _EVAL
             forth.s:2927   .text:0000000000004180 EVAL1
             forth.s:2928   .text:0000000000004180 $d
ARM GAS  forth.s 			page 209


             forth.s:2936   .text:00000000000041a8 EVAL2
             forth.s:2946   .text:00000000000041b8 _PRESE
             forth.s:2948   .text:00000000000041c4 $d
             forth.s:2958   .text:00000000000041d8 _QUIT
             forth.s:2959   .text:00000000000041e0 $d
             forth.s:2961   .text:00000000000041ec QUIT1
             forth.s:2963   .text:00000000000041f0 QUIT2
             forth.s:2973   .text:0000000000004204 _FORGET
             forth.s:2973   .text:000000000000420c FORGET
             forth.s:2975   .text:0000000000004210 $d
             forth.s:3472   .text:00000000000047a8 OVERT
             forth.s:3003   .text:0000000000004258 $d
             forth.s:3003   .text:000000000000425c _TICK
             forth.s:3003   .text:000000000000425e $t
             forth.s:3003   .text:0000000000004260 TICK
             forth.s:3005   .text:0000000000004264 $d
             forth.s:3009   .text:0000000000004278 TICK1
             forth.s:3017   .text:0000000000004280 _ALLOT
             forth.s:3017   .text:0000000000004286 $t
             forth.s:3017   .text:0000000000004288 ALLOT
             forth.s:3019   .text:000000000000428c $d
             forth.s:3028   .text:000000000000429c _COMMA
             forth.s:3028   .text:000000000000429e $t
             forth.s:3028   .text:00000000000042a0 COMMA
             forth.s:3030   .text:00000000000042a4 $d
             forth.s:3044   .text:00000000000042c0 $d
             forth.s:3044   .text:00000000000042c4 _BCOMP
             forth.s:3044   .text:00000000000042ce $t
             forth.s:3044   .text:00000000000042d0 BCOMP
             forth.s:3046   .text:00000000000042d4 $d
             forth.s:3056   .text:00000000000042e4 _COMPI
             forth.s:3056   .text:00000000000042ec $t
             forth.s:3056   .text:00000000000042ec COMPI
             forth.s:3058   .text:00000000000042f0 $d
             forth.s:3074   .text:000000000000431c _LITER
             forth.s:3074   .text:0000000000004324 $t
             forth.s:3076   .text:0000000000004328 $d
             forth.s:3511   .text:0000000000004804 CALLC
             forth.s:3086   .text:000000000000433c STRCQ
             forth.s:3087   .text:000000000000433c $t
             forth.s:3088   .text:0000000000004340 $d
             forth.s:3110   .text:0000000000004378 _FOR
             forth.s:3110   .text:000000000000437c $t
             forth.s:3110   .text:000000000000437c FOR
             forth.s:3112   .text:0000000000004380 $d
             forth.s:3121   .text:0000000000004398 _DO
             forth.s:3121   .text:000000000000439c DO
             forth.s:3123   .text:00000000000043a0 $d
             forth.s:3129   .text:00000000000043cc DOPLOOP
             forth.s:3130   .text:00000000000043cc $t
             forth.s:3146   .text:00000000000043ee $d
             forth.s:3146   .text:00000000000043f2 _PLOOP
             forth.s:3146   .text:00000000000043f8 $t
             forth.s:3146   .text:00000000000043f8 PLOOP
             forth.s:3148   .text:00000000000043fc $d
             forth.s:3152   .text:0000000000004410 DOLOOP
             forth.s:3153   .text:0000000000004410 $t
ARM GAS  forth.s 			page 210


             forth.s:3171   .text:0000000000004438 $d
             forth.s:3171   .text:000000000000443c _LOOP
             forth.s:3171   .text:0000000000004444 LOOP
             forth.s:3173   .text:0000000000004448 $d
             forth.s:3184   .text:0000000000004460 _BEGIN
             forth.s:3184   .text:0000000000004466 $t
             forth.s:3184   .text:0000000000004468 BEGIN
             forth.s:3186   .text:000000000000446c $d
             forth.s:3195   .text:0000000000004474 $d
             forth.s:3195   .text:0000000000004478 _FNEXT
             forth.s:3195   .text:0000000000004480 FNEXT
             forth.s:3197   .text:0000000000004484 $d
             forth.s:3205   .text:000000000000449c _I
             forth.s:3205   .text:000000000000449e $t
             forth.s:3205   .text:00000000000044a0 I
             forth.s:3214   .text:00000000000044ac $d
             forth.s:3214   .text:00000000000044b0 _J
             forth.s:3214   .text:00000000000044b2 $t
             forth.s:3214   .text:00000000000044b4 J
             forth.s:3224   .text:00000000000044c0 $d
             forth.s:3224   .text:00000000000044c4 _UNTIL
             forth.s:3224   .text:00000000000044ca $t
             forth.s:3224   .text:00000000000044cc UNTIL
             forth.s:3226   .text:00000000000044d0 $d
             forth.s:3235   .text:00000000000044e8 _AGAIN
             forth.s:3235   .text:00000000000044ee $t
             forth.s:3235   .text:00000000000044f0 AGAIN
             forth.s:3237   .text:00000000000044f4 $d
             forth.s:3246   .text:000000000000450c _IFF
             forth.s:3246   .text:0000000000004510 IFF
             forth.s:3248   .text:0000000000004514 $d
             forth.s:3260   .text:000000000000453c _AHEAD
             forth.s:3260   .text:0000000000004542 $t
             forth.s:3260   .text:0000000000004544 AHEAD
             forth.s:3262   .text:0000000000004548 $d
             forth.s:3274   .text:0000000000004570 _REPEA
             forth.s:3274   .text:0000000000004578 REPEA
             forth.s:3276   .text:000000000000457c $d
             forth.s:3287   .text:0000000000004594 _THENN
             forth.s:3287   .text:000000000000459c THENN
             forth.s:3289   .text:00000000000045a0 $d
             forth.s:3300   .text:00000000000045b4 _AFT
             forth.s:3300   .text:00000000000045b8 $t
             forth.s:3300   .text:00000000000045b8 AFT
             forth.s:3302   .text:00000000000045bc $d
             forth.s:3314   .text:00000000000045d4 _ELSEE
             forth.s:3314   .text:00000000000045dc ELSEE
             forth.s:3316   .text:00000000000045e0 $d
             forth.s:3326   .text:00000000000045f4 _WHILE
             forth.s:3326   .text:00000000000045fa $t
             forth.s:3326   .text:00000000000045fc WHILE
             forth.s:3328   .text:0000000000004600 $d
             forth.s:3337   .text:0000000000004610 _ABRTQ
             forth.s:3337   .text:0000000000004618 ABRTQ
             forth.s:3339   .text:000000000000461c $d
             forth.s:3348   .text:0000000000004634 _STRQ
             forth.s:3348   .text:0000000000004638 STRQ
ARM GAS  forth.s 			page 211


             forth.s:3350   .text:000000000000463c $d
             forth.s:3360   .text:0000000000004654 _DOTQ
             forth.s:3360   .text:0000000000004658 DOTQ
             forth.s:3362   .text:000000000000465c $d
             forth.s:3376   .text:0000000000004674 _UNIQU
             forth.s:3376   .text:000000000000467c $t
             forth.s:3376   .text:000000000000467c UNIQU
             forth.s:3378   .text:0000000000004680 $d
             forth.s:3385   .text:00000000000046a8 UNIQ1
             forth.s:3382   .text:000000000000469c $d
             forth.s:3395   .text:00000000000046b0 SNAME
             forth.s:3396   .text:00000000000046b0 $t
             forth.s:3397   .text:00000000000046b4 $d
             forth.s:3413   .text:00000000000046f8 SNAM1
             forth.s:3425   .text:000000000000470c _SCOMP
             forth.s:3425   .text:0000000000004718 SCOMP
             forth.s:3427   .text:000000000000471c $d
             forth.s:3439   .text:0000000000004754 SCOM2
             forth.s:3436   .text:000000000000474c SCOM1
             forth.s:3444   .text:0000000000004768 SCOM3
             forth.s:3453   .text:0000000000004770 COLON_ABORT
             forth.s:3454   .text:0000000000004770 $t
             forth.s:3455   .text:0000000000004774 $d
             forth.s:3472   .text:00000000000047a0 _OVERT
             forth.s:3472   .text:00000000000047a6 $t
             forth.s:3474   .text:00000000000047ac $d
             forth.s:3485   .text:00000000000047c4 _SEMIS
             forth.s:3485   .text:00000000000047c6 $t
             forth.s:3485   .text:00000000000047c8 SEMIS
             forth.s:3487   .text:00000000000047cc $d
             forth.s:3499   .text:00000000000047e8 _RBRAC
             forth.s:3499   .text:00000000000047ea $t
             forth.s:3499   .text:00000000000047ec RBRAC
             forth.s:3501   .text:00000000000047f0 $d
             forth.s:3512   .text:0000000000004804 $t
             forth.s:3513   .text:0000000000004808 $d
             forth.s:3525   .text:0000000000004820 _COLON
             forth.s:3525   .text:0000000000004822 $t
             forth.s:3525   .text:0000000000004824 COLON
             forth.s:3527   .text:0000000000004828 $d
             forth.s:3538   .text:0000000000004840 _IMMED
             forth.s:3538   .text:000000000000484a $t
             forth.s:3538   .text:000000000000484c IMMED
             forth.s:3540   .text:0000000000004850 $d
             forth.s:3558   .text:000000000000487c _CONST
             forth.s:3558   .text:0000000000004888 CONST
             forth.s:3560   .text:000000000000488c $d
             forth.s:3571   .text:00000000000048bc $t
             forth.s:3578   .text:00000000000048bc DODOES
             forth.s:3580   .text:00000000000048c0 $d
             forth.s:3595   .text:00000000000048e4 $d
             forth.s:3595   .text:00000000000048e8 _DOES
             forth.s:3595   .text:00000000000048ee $t
             forth.s:3595   .text:00000000000048f0 DOES
             forth.s:3597   .text:00000000000048f4 $d
             forth.s:3612   .text:0000000000004924 _DEFERAT
             forth.s:3612   .text:000000000000492c DEFERAT
ARM GAS  forth.s 			page 212


             forth.s:3614   .text:0000000000004930 $d
             forth.s:3624   .text:0000000000004948 _DEFERSTO
             forth.s:3624   .text:0000000000004950 DEFERSTO
             forth.s:3626   .text:0000000000004954 $d
             forth.s:3637   .text:0000000000004970 _DEFER
             forth.s:3637   .text:0000000000004976 $t
             forth.s:3637   .text:0000000000004978 DEFER
             forth.s:3639   .text:000000000000497c $d
             forth.s:3660   .text:00000000000049c8 CREAT
             forth.s:3650   .text:00000000000049b0 DEFER_NOP
             forth.s:3651   .text:00000000000049b0 $t
             forth.s:3652   .text:00000000000049b4 $d
             forth.s:3660   .text:00000000000049c0 _CREAT
             forth.s:3662   .text:00000000000049cc $d
             forth.s:3675   .text:00000000000049f0 _VARIA
             forth.s:3675   .text:00000000000049fc VARIA
             forth.s:3677   .text:0000000000004a00 $d
             forth.s:3694   .text:0000000000004a20 DMP
             forth.s:3695   .text:0000000000004a20 $t
             forth.s:3696   .text:0000000000004a24 $d
             forth.s:3708   .text:0000000000004a5c PDUM2
             forth.s:3702   .text:0000000000004a44 PDUM1
             forth.s:3720   .text:0000000000004a68 $d
             forth.s:3720   .text:0000000000004a6c _DUMP
             forth.s:3720   .text:0000000000004a74 DUMP
             forth.s:3722   .text:0000000000004a78 $d
             forth.s:3740   .text:0000000000004ac8 DUMP4
             forth.s:3730   .text:0000000000004aa0 DUMP1
             forth.s:3742   .text:0000000000004ad0 DUMP3
             forth.s:3755   .text:0000000000004ae4 TDOT
             forth.s:3756   .text:0000000000004ae4 $t
             forth.s:3757   .text:0000000000004ae8 $d
             forth.s:3796   .text:0000000000004b78 _DOTS
             forth.s:3798   .text:0000000000004b80 $d
             forth.s:3805   .text:0000000000004b9c DOTS2
             forth.s:3801   .text:0000000000004b90 DOTS1
             forth.s:3810   .text:0000000000004bac RPAT
             forth.s:3811   .text:0000000000004bac $t
             forth.s:3815   .text:0000000000004bb6 RBASE
             forth.s:3824   .text:0000000000004bc6 RDOT
             forth.s:3826   .text:0000000000004bca $d
             forth.s:3853   .text:0000000000004c2e _TRACE
             forth.s:3853   .text:0000000000004c34 $t
             forth.s:3853   .text:0000000000004c34 TRACE
             forth.s:3855   .text:0000000000004c38 $d
             forth.s:3874   .text:0000000000004c7c _TNAME
             forth.s:3874   .text:0000000000004c82 $t
             forth.s:3874   .text:0000000000004c84 TNAME
             forth.s:3876   .text:0000000000004c88 $d
             forth.s:3879   .text:0000000000004c94 TNAM1
             forth.s:3890   .text:0000000000004cc8 TNAM2
             forth.s:3899   .text:0000000000004cd8 _DOTID
             forth.s:3899   .text:0000000000004cdc $t
             forth.s:3899   .text:0000000000004cdc DOTID
             forth.s:3901   .text:0000000000004ce0 $d
             forth.s:3908   .text:0000000000004d04 DOTI1
             forth.s:3909   .text:0000000000004d12 $t
ARM GAS  forth.s 			page 213


             forth.s:3910   .text:0000000000004d14 $d
             forth.s:3912   *ABS*:0000000000000000 WANT_SEE
             forth.s:3985   .text:0000000000004d1c _VLIST
             forth.s:3985   .text:0000000000004d22 $t
             forth.s:3985   .text:0000000000004d24 VLIST
             forth.s:3987   .text:0000000000004d28 $d
             forth.s:3998   .text:0000000000004d48 WORDS
             forth.s:4019   .text:0000000000004d8c WC
             forth.s:3998   .text:0000000000004d40 _WORDS
             forth.s:3998   .text:0000000000004d46 $t
             forth.s:4000   .text:0000000000004d4c $d
             forth.s:4003   .text:0000000000004d58 WORS1
             forth.s:4012   .text:0000000000004d80 WORS2
             forth.s:4019   .text:0000000000004d88 _WC
             forth.s:4021   .text:0000000000004d90 $d
             forth.s:4038   .text:0000000000004dcc _MARK
             forth.s:4038   .text:0000000000004dd4 MARK
             forth.s:4040   .text:0000000000004dd8 $d
             forth.s:4043   .text:0000000000004de4 $t
             forth.s:4044   .text:0000000000004de8 $d
             forth.s:4065   .text:0000000000004e14 VERSN
             forth.s:4066   .text:0000000000004e14 $t
             forth.s:4067   .text:0000000000004e18 $d
             forth.s:4075   .text:0000000000004e28 _HI
             forth.s:4075   .text:0000000000004e2c HI
             forth.s:4077   .text:0000000000004e30 $d
             forth.s:4078   .text:0000000000004e4a $t
             forth.s:4079   .text:0000000000004e4c $d
             forth.s:4103   .text:0000000000004e98 $t
             forth.s:4104   .text:0000000000004e9c $d
             forth.s:4116   .text:0000000000004eb8 PS2_QUERY
             forth.s:4117   .text:0000000000004eb8 $t
             forth.s:4118   .text:0000000000004ebc $d
             forth.s:4132   .text:0000000000004f22 $t
             forth.s:4133   .text:0000000000004f24 $d
             forth.s:4143   .text:0000000000004f30 IF_SENSE
             forth.s:4144   .text:0000000000004f30 $t
             forth.s:4145   .text:0000000000004f34 $d
             forth.s:4160   .text:0000000000004f64 $t
             forth.s:4161   .text:0000000000004f68 $d
             forth.s:4161   .text:0000000000004f72 $t
             forth.s:4162   .text:0000000000004f74 $d
             forth.s:4180   .text:0000000000004f9c COLD1
             forth.s:4181   .text:0000000000004f9c $d
             forth.s:4195   .text:0000000000004fe8 COLD2
             forth.s:4198   .text:0000000000004fe8 $d
             forth.s:4201   .text:0000000000004fec $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:250    .text:000000000000016f $d
              init.s:375    .text:0000000000000335 $d
              init.s:375    .text:0000000000000336 $t
          ser-term.s:90     .text:0000000000000793 $d
          ser-term.s:90     .text:0000000000000794 $t
          ser-term.s:110    .text:00000000000007cd $d
          ser-term.s:110    .text:00000000000007ce $t
          ser-term.s:133    .text:000000000000080b $d
ARM GAS  forth.s 			page 214


          ser-term.s:133    .text:000000000000080c $t
          ser-term.s:166    .text:0000000000000867 $d
          ser-term.s:166    .text:0000000000000868 $t
          ser-term.s:193    .text:00000000000008dd $d
          ser-term.s:193    .text:00000000000008de $t
          ser-term.s:205    .text:000000000000090b $d
          ser-term.s:205    .text:000000000000090c $t
             tvout.s:264    .text:0000000000000b5b $d
             tvout.s:264    .text:0000000000000b5c $t
             tvout.s:278    .text:0000000000000b8f $d
             tvout.s:278    .text:0000000000000b90 $t
             tvout.s:306    .text:0000000000000be9 $d
             tvout.s:306    .text:0000000000000bea $t
             tvout.s:325    .text:0000000000000c17 $d
             tvout.s:325    .text:0000000000000c18 $t
             tvout.s:427    .text:0000000000000d51 $d
             tvout.s:427    .text:0000000000000d52 $t
             tvout.s:448    .text:0000000000000dab $d
             tvout.s:448    .text:0000000000000dac $t
             tvout.s:495    .text:0000000000000e41 $d
             tvout.s:495    .text:0000000000000e42 $t
           ps2_kbd.s:307    .text:000000000000152f $d
           ps2_kbd.s:307    .text:0000000000001530 $t
           ps2_kbd.s:396    .text:000000000000162b $d
           ps2_kbd.s:396    .text:000000000000162c $t
           ps2_kbd.s:616    .text:00000000000018cd $d
           ps2_kbd.s:616    .text:00000000000018ce $t
           ps2_kbd.s:633    .text:0000000000001907 $d
           ps2_kbd.s:633    .text:0000000000001908 $t
         spi-flash.s:85     .text:00000000000019f3 $d
         spi-flash.s:85     .text:00000000000019f4 $t
         spi-flash.s:151    .text:0000000000001abf $d
         spi-flash.s:151    .text:0000000000001ac0 $t
         spi-flash.s:238    .text:0000000000001c03 $d
         spi-flash.s:238    .text:0000000000001c04 $t
         spi-flash.s:256    .text:0000000000001c3f $d
         spi-flash.s:256    .text:0000000000001c40 $t
         spi-flash.s:278    .text:0000000000001c93 $d
         spi-flash.s:278    .text:0000000000001c94 $t
         spi-flash.s:325    .text:0000000000001d13 $d
         spi-flash.s:325    .text:0000000000001d14 $t
         spi-flash.s:343    .text:0000000000001d35 $d
         spi-flash.s:343    .text:0000000000001d36 $t
         spi-flash.s:352    .text:0000000000001d49 $d
         spi-flash.s:352    .text:0000000000001d4a $t
               fpu.s:161    .text:0000000000001e81 $d
               fpu.s:161    .text:0000000000001e82 $t
               fpu.s:174    .text:0000000000001ea1 $d
               fpu.s:174    .text:0000000000001ea2 $t
               fpu.s:188    .text:0000000000001ec1 $d
               fpu.s:188    .text:0000000000001ec2 $t
               fpu.s:201    .text:0000000000001ee1 $d
               fpu.s:201    .text:0000000000001ee2 $t
               fpu.s:224    .text:0000000000001f1f $d
               fpu.s:224    .text:0000000000001f20 $t
               fpu.s:235    .text:0000000000001f37 $d
               fpu.s:235    .text:0000000000001f38 $t
ARM GAS  forth.s 			page 215


               fpu.s:257    .text:0000000000001f6d $d
               fpu.s:257    .text:0000000000001f6e $t
               fpu.s:268    .text:0000000000001f8b $d
               fpu.s:268    .text:0000000000001f8c $t
               fpu.s:278    .text:0000000000001fa5 $d
               fpu.s:278    .text:0000000000001fa6 $t
               fpu.s:291    .text:0000000000001fd5 $d
               fpu.s:291    .text:0000000000001fd6 $t
               fpu.s:306    .text:0000000000002003 $d
               fpu.s:306    .text:0000000000002004 $t
               fpu.s:347    .text:0000000000002053 $d
               fpu.s:347    .text:0000000000002054 $t
               fpu.s:381    .text:00000000000020cb $d
               fpu.s:381    .text:00000000000020cc $t
            strtof.s:294    .text:0000000000002473 $d
            strtof.s:294    .text:0000000000002474 $t
             forth.s:132    .text:0000000000002621 $d
             forth.s:132    .text:0000000000002622 $t
             forth.s:144    .text:0000000000002645 $d
             forth.s:144    .text:0000000000002646 $t
             forth.s:156    .text:0000000000002667 $d
             forth.s:156    .text:0000000000002668 $t
             forth.s:178    .text:00000000000026a1 $d
             forth.s:178    .text:00000000000026a2 $t
             forth.s:214    .text:00000000000026bf $d
             forth.s:214    .text:00000000000026c0 $t
             forth.s:261    .text:000000000000276d $d
             forth.s:261    .text:000000000000276e $t
             forth.s:356    .text:00000000000027fd $d
             forth.s:356    .text:00000000000027fe $t
             forth.s:381    .text:000000000000282b $d
             forth.s:381    .text:000000000000282c $t
             forth.s:391    .text:000000000000283f $d
             forth.s:391    .text:0000000000002840 $t
             forth.s:399    .text:000000000000284b $d
             forth.s:399    .text:000000000000284c $t
             forth.s:419    .text:0000000000002879 $d
             forth.s:419    .text:000000000000287a $t
             forth.s:428    .text:000000000000288d $d
             forth.s:428    .text:000000000000288e $t
             forth.s:476    .text:00000000000028f1 $d
             forth.s:476    .text:00000000000028f2 $t
             forth.s:492    .text:0000000000002913 $d
             forth.s:492    .text:0000000000002914 $t
             forth.s:502    .text:0000000000002925 $d
             forth.s:502    .text:0000000000002926 $t
             forth.s:511    .text:0000000000002937 $d
             forth.s:511    .text:0000000000002938 $t
             forth.s:528    .text:0000000000002959 $d
             forth.s:528    .text:000000000000295a $t
             forth.s:558    .text:000000000000299f $d
             forth.s:558    .text:00000000000029a0 $t
             forth.s:567    .text:00000000000029b5 $d
             forth.s:567    .text:00000000000029b6 $t
             forth.s:615    .text:0000000000002a0f $d
             forth.s:615    .text:0000000000002a10 $t
             forth.s:626    .text:0000000000002a23 $d
ARM GAS  forth.s 			page 216


             forth.s:626    .text:0000000000002a24 $t
             forth.s:634    .text:0000000000002a31 $d
             forth.s:634    .text:0000000000002a32 $t
             forth.s:642    .text:0000000000002a41 $d
             forth.s:642    .text:0000000000002a42 $t
             forth.s:650    .text:0000000000002a51 $d
             forth.s:650    .text:0000000000002a52 $t
             forth.s:674    .text:0000000000002a81 $d
             forth.s:674    .text:0000000000002a82 $t
             forth.s:699    .text:0000000000002ab5 $d
             forth.s:699    .text:0000000000002ab6 $t
             forth.s:707    .text:0000000000002ac5 $d
             forth.s:707    .text:0000000000002ac6 $t
             forth.s:715    .text:0000000000002ad7 $d
             forth.s:715    .text:0000000000002ad8 $t
             forth.s:736    .text:0000000000002aff $d
             forth.s:736    .text:0000000000002b00 $t
             forth.s:765    .text:0000000000002b3b $d
             forth.s:765    .text:0000000000002b3c $t
             forth.s:775    .text:0000000000002b4f $d
             forth.s:775    .text:0000000000002b50 $t
             forth.s:788    .text:0000000000002b6d $d
             forth.s:788    .text:0000000000002b6e $t
             forth.s:841    .text:0000000000002be5 $d
             forth.s:841    .text:0000000000002be6 $t
             forth.s:882    .text:0000000000002c3b $d
             forth.s:882    .text:0000000000002c3c $t
             forth.s:905    .text:0000000000002c67 $d
             forth.s:905    .text:0000000000002c68 $t
             forth.s:918    .text:0000000000002c87 $d
             forth.s:918    .text:0000000000002c88 $t
             forth.s:942    .text:0000000000002cb7 $d
             forth.s:942    .text:0000000000002cb8 $t
             forth.s:988    .text:0000000000002d0f $d
             forth.s:988    .text:0000000000002d10 $t
             forth.s:1000   .text:0000000000002d27 $d
             forth.s:1000   .text:0000000000002d28 $t
             forth.s:1012   .text:0000000000002d43 $d
             forth.s:1012   .text:0000000000002d44 $t
             forth.s:1073   .text:0000000000002d9f $d
             forth.s:1073   .text:0000000000002da0 $t
             forth.s:1082   .text:0000000000002db3 $d
             forth.s:1082   .text:0000000000002db4 $t
             forth.s:1109   .text:0000000000002df1 $d
             forth.s:1109   .text:0000000000002df2 $t
             forth.s:1128   .text:0000000000002e15 $d
             forth.s:1128   .text:0000000000002e16 $t
             forth.s:1147   .text:0000000000002e41 $d
             forth.s:1147   .text:0000000000002e42 $t
             forth.s:1187   .text:0000000000002e9b $d
             forth.s:1187   .text:0000000000002e9c $t
             forth.s:1207   .text:0000000000002ec5 $d
             forth.s:1207   .text:0000000000002ec6 $t
             forth.s:1221   .text:0000000000002ee3 $d
             forth.s:1221   .text:0000000000002ee4 $t
             forth.s:1232   .text:0000000000002f01 $d
             forth.s:1232   .text:0000000000002f02 $t
ARM GAS  forth.s 			page 217


             forth.s:1249   .text:0000000000002f1f $d
             forth.s:1249   .text:0000000000002f20 $t
             forth.s:1266   .text:0000000000002f4b $d
             forth.s:1266   .text:0000000000002f4c $t
             forth.s:1401   .text:0000000000003097 $d
             forth.s:1401   .text:0000000000003098 $t
             forth.s:1423   .text:00000000000030e3 $d
             forth.s:1423   .text:00000000000030e4 $t
             forth.s:1472   .text:0000000000003123 $d
             forth.s:1472   .text:0000000000003124 $t
             forth.s:1523   .text:000000000000319b $d
             forth.s:1523   .text:000000000000319c $t
             forth.s:1582   .text:0000000000003245 $d
             forth.s:1582   .text:0000000000003246 $t
             forth.s:1600   .text:000000000000326d $d
             forth.s:1600   .text:000000000000326e $t
             forth.s:1634   .text:00000000000032bf $d
             forth.s:1634   .text:00000000000032c0 $t
             forth.s:1667   .text:000000000000330d $d
             forth.s:1667   .text:000000000000330e $t
             forth.s:1699   .text:0000000000003355 $d
             forth.s:1699   .text:0000000000003356 $t
             forth.s:1777   .text:0000000000003437 $d
             forth.s:1777   .text:0000000000003438 $t
             forth.s:1789   .text:0000000000003455 $d
             forth.s:1789   .text:0000000000003456 $t
             forth.s:1821   .text:00000000000034a3 $d
             forth.s:1821   .text:00000000000034a4 $t
             forth.s:1839   .text:00000000000034d5 $d
             forth.s:1839   .text:00000000000034d6 $t
             forth.s:1853   .text:00000000000034ff $d
             forth.s:1853   .text:0000000000003500 $t
             forth.s:1931   .text:00000000000035bb $d
             forth.s:1931   .text:00000000000035bc $t
             forth.s:2009   .text:000000000000369b $d
             forth.s:2009   .text:000000000000369c $t
             forth.s:2092   .text:00000000000037c7 $d
             forth.s:2092   .text:00000000000037c8 $t
             forth.s:2109   .text:00000000000037fd $d
             forth.s:2109   .text:00000000000037fe $t
             forth.s:2127   .text:0000000000003833 $d
             forth.s:2127   .text:0000000000003834 $t
             forth.s:2197   .text:00000000000038b3 $d
             forth.s:2197   .text:00000000000038b4 $t
             forth.s:2235   .text:000000000000391f $d
             forth.s:2235   .text:0000000000003920 $t
             forth.s:2270   .text:0000000000003987 $d
             forth.s:2270   .text:0000000000003988 $t
             forth.s:2290   .text:00000000000039bf $d
             forth.s:2290   .text:00000000000039c0 $t
             forth.s:2425   .text:0000000000003b73 $d
             forth.s:2425   .text:0000000000003b74 $t
             forth.s:2464   .text:0000000000003bd5 $d
             forth.s:2464   .text:0000000000003bd6 $t
             forth.s:2476   .text:0000000000003bfb $d
             forth.s:2476   .text:0000000000003bfc $t
             forth.s:2487   .text:0000000000003c15 $d
ARM GAS  forth.s 			page 218


             forth.s:2487   .text:0000000000003c16 $t
             forth.s:2770   .text:0000000000003f83 $d
             forth.s:2770   .text:0000000000003f84 $t
             forth.s:2862   .text:0000000000004097 $d
             forth.s:2862   .text:0000000000004098 $t
             forth.s:2913   .text:000000000000414f $d
             forth.s:2913   .text:0000000000004150 $t
             forth.s:2925   .text:0000000000004179 $d
             forth.s:2925   .text:000000000000417a $t
             forth.s:2946   .text:00000000000041bf $d
             forth.s:2946   .text:00000000000041c0 $t
             forth.s:2958   .text:00000000000041dd $d
             forth.s:2958   .text:00000000000041de $t
             forth.s:2973   .text:000000000000420b $d
             forth.s:2973   .text:000000000000420c $t
             forth.s:3121   .text:000000000000439b $d
             forth.s:3121   .text:000000000000439c $t
             forth.s:3171   .text:0000000000004441 $d
             forth.s:3171   .text:0000000000004442 $t
             forth.s:3195   .text:000000000000447d $d
             forth.s:3195   .text:000000000000447e $t
             forth.s:3246   .text:000000000000450f $d
             forth.s:3246   .text:0000000000004510 $t
             forth.s:3274   .text:0000000000004577 $d
             forth.s:3274   .text:0000000000004578 $t
             forth.s:3287   .text:0000000000004599 $d
             forth.s:3287   .text:000000000000459a $t
             forth.s:3314   .text:00000000000045d9 $d
             forth.s:3314   .text:00000000000045da $t
             forth.s:3337   .text:0000000000004617 $d
             forth.s:3337   .text:0000000000004618 $t
             forth.s:3348   .text:0000000000004637 $d
             forth.s:3348   .text:0000000000004638 $t
             forth.s:3360   .text:0000000000004657 $d
             forth.s:3360   .text:0000000000004658 $t
             forth.s:3425   .text:0000000000004715 $d
             forth.s:3425   .text:0000000000004716 $t
             forth.s:3558   .text:0000000000004885 $d
             forth.s:3558   .text:0000000000004886 $t
             forth.s:3612   .text:000000000000492b $d
             forth.s:3612   .text:000000000000492c $t
             forth.s:3624   .text:000000000000494f $d
             forth.s:3624   .text:0000000000004950 $t
             forth.s:3660   .text:00000000000049c7 $d
             forth.s:3660   .text:00000000000049c8 $t
             forth.s:3675   .text:00000000000049f9 $d
             forth.s:3675   .text:00000000000049fa $t
             forth.s:3720   .text:0000000000004a71 $d
             forth.s:3720   .text:0000000000004a72 $t
             forth.s:3796   .text:0000000000004b7b $d
             forth.s:3796   .text:0000000000004b7c $t
             forth.s:4019   .text:0000000000004d8b $d
             forth.s:4019   .text:0000000000004d8c $t
             forth.s:4038   .text:0000000000004dd1 $d
             forth.s:4038   .text:0000000000004dd2 $t
             forth.s:4075   .text:0000000000004e2b $d
             forth.s:4075   .text:0000000000004e2c $t
ARM GAS  forth.s 			page 219


             forth.s:4174   .text:0000000000004f85 $d
             forth.s:4174   .text:0000000000004f86 $t

UNDEFINED SYMBOLS
xE000EF34
_mstack
