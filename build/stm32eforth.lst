ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
ARM GAS  forth.s 			page 9


  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ HOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, HOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
 108              	  .equ FP_WS, PEN_COLOR+4  // floating point work space 
ARM GAS  forth.s 			page 10


 109              	  .equ FP_WS_SIZE, 19  // 19 bytes for floating point work space 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
 165              	
ARM GAS  forth.s 			page 11


 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
 222              		// from a code word   
ARM GAS  forth.s 			page 12


 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   default_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
ARM GAS  forth.s 			page 13


  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
 139 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
ARM GAS  forth.s 			page 14


 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      B1F85DF8 
 157      04EB
 158 000a DFF8A4C4 	  ldr IP,=dh
 159 000e 02F047B8 	  b INEXT  
 160              	dh:
 161 0012 8D390000 	  _ADR PRESE    
 162 0016 1F220000 		_DOLIT exception_msg 
 162      9E000000 
 163 001e ED260000 	  _ADR COUNT 
 164 0022 45300000 	  _ADR TYPEE 
 165 0026 7B000000 	  _ADR GET_CFSR 
 166 002a 51230000 	  _ADR DUPP
 167 002e F9220000 	  _ADR TOR 
 168 0032 1F220000 	  _DOLIT 16 
 168      10000000 
 169 003a 85270000 	  _ADR BASE 
 170 003e 91220000 	  _ADR STORE 
 171 0042 7D310000 	  _ADR DOT 
 172 0046 D1220000 	  _ADR RFROM
 173 004a 1F220000 	  _DOLIT (1<<15)
 173      00800000 
 174 0052 95230000 	  _ADR ANDD
 175 0056 5F220000 	  _QBRAN 1f
 175      76000000 
 176 005e 8D000000 	  _ADR GET_BFAR
 177 0062 1F220000 	  _DOLIT ','
 177      2C000000 
 178 006a 29210000 	  _ADR EMIT 
 179 006e F12F0000 	  _ADR SPACE 
 180 0072 7D310000 	  _ADR DOT 
 181              	1:
 182 0076 15010000 	  _ADR reset_mcu 
 183              	
 184              	/***************************
 185              	  GET_CFSR ( -- u )
ARM GAS  forth.s 			page 15


 186              	  stack CFSR register 
 187              	***************************/
 188              	GET_CFSR:
 189 007a 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 189      CEF20003 
 190 0082 47F8046D 	    _PUSH 
 191 0086 9E6A     	    ldr TOS,[r3,SCB_CFSR]
 192 0088 02F00AB8 	    _NEXT 
 193              	
 194              	/*****************************
 195              	  GET_BFAR ( -- u )
 196              	  stack BFAR register
 197              	*****************************/
 198              	GET_BFAR:
 199 008c 4FF46D43 	    _MOV32 r3,SCB_BASE_ADR  
 199      CEF20003 
 200 0094 47F8046D 	    _PUSH 
 201 0098 9E6B     	    ldr TOS,[r3,SCB_BFAR]
 202 009a 02F001B8 	    _NEXT 
 203              	
 204              	
 205              	  .size  default_handler, .-default_handler
 206              	exception_msg:
 207 009e 17       		.byte 23
 208 009f 65786570 		.ascii "exeption reboot, CFSR: "
 208      74696F6E 
 208      20726562 
 208      6F6F742C 
 208      20434653 
 209 00b6 00BF     		.p2align 2
 210              	
 211              	/*********************************
 212              		system milliseconds counter
 213              	*********************************/	
 214              	  .type systick_handler, %function
 215              	  .p2align 2 
 216              	  .global systick_handler
 217              	systick_handler:
 218 00b8 4FF00003 	  _MOV32 r3,UPP
 218      C2F20003 
 219 00c0 9868     	  ldr r0,[r3,#TICKS]  
 220 00c2 00F10100 	  add r0,#1
 221 00c6 9860     	  str r0,[r3,#TICKS]
 222 00c8 D868     	  ldr r0,[r3,#CD_TIMER]
 223 00ca 10B1     	  cbz r0, systick_exit
 224 00cc A0F10100 	  sub r0,#1
 225 00d0 D860     	  str r0,[r3,#CD_TIMER]
 226              	systick_exit:
 227 00d2 7047     	  bx lr
 228              	
 229              	user_reboot:
 230 00d4 00B500F0 	   _CALL forth_init 
 230      47F85DF8 
 230      04EB
 231 00de DFF8D4C3 	  ldr IP,=ur
 232 00e2 01F0DDBF 	  b INEXT  
 233              	ur:
ARM GAS  forth.s 			page 16


 234 00e6 8D390000 	  _ADR PRESE
 235 00ea 79300000 	  _ADR CR   
 236 00ee 1F220000 		_DOLIT user_reboot_msg
 236      04010000 
 237 00f6 ED260000 		_ADR COUNT 
 238 00fa 45300000 	  _ADR TYPEE 
 239 00fe 15010000 	  _ADR reset_mcu 
 240              	
 241 0102 00BF     		.p2align 2 
 242              	user_reboot_msg:
 243 0104 0C       		.byte 12
 244 0105 75736572 		.ascii "user reboot!"
 244      20726562 
 244      6F6F7421 
 245 0111 0000BF   		.p2align 2 
 246              	
 247              	reset_mcu:
 248 0114 4FF48050 	  _MOV32 r0,UART 
 248      C4F20100 
 249 011c 0168     	1: ldr r1,[r0,#USART_SR]
 250 011e 11F0400F 	  tst r1,#(1<<6)
 251 0122 FBD0     	  beq 1b
 252 0124 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 252      CEF20000 
 253 012c C168     		ldr r1,[r0,#SCB_AIRCR]
 254 012e 41F00401 		orr r1,#(1<<2)
 255 0132 C0F2FA51 		movt r1,#SCB_VECTKEY
 256 0136 C160     		str r1,[r0,#SCB_AIRCR]
 257 0138 FEE7     		b . 
 258              	
 259              	/**************************************
 260              	  reset_handler execute at MCU reset
 261              	***************************************/
 262              	  .type  reset_handler, %function
 263 013a 00BF     	  .p2align 2 
 264              	  .global reset_handler
 265              	reset_handler:
 266 013c 4FF00000 		_MOV32 r0,RAM_END
 266      C2F20200 
 267 0144 8546     		mov sp,r0  
 268 0146 FFF7FEFF 		bl	remap 
 269 014a 00F021F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 270 014e 00F0CEF9 		bl  ser_init
 271 0152 FFF7FEFF 	 	bl	tv_init
 272 0156 FFF7FEFF 	  bl  kbd_init
 273 015a 01F0C7FA 	  bl  flash_spi_init   
 274 015e 00F003F8 		bl forth_init 
 275 0162 04F055BA 		b COLD 
 276              	
 277              	
 278              	
 279              		.type forth_init, %function 
 280 0166 00BF     	  .p2align 2 
 281              	forth_init:
 282 0168 4FF00004 		_MOV32 UP,UPP 
 282      C2F20004 
 283 0170 4FF47F47 		_MOV32 DSP,SPP
ARM GAS  forth.s 			page 17


 283      C2F20107 
 284 0178 4FF68078 		_MOV32 RSP,RPP
 284      C2F20108 
 285 0180 DFF834A3 	  ldr INX,=NEST
 286 0184 4AF0010A 	  orr INX,#1 
 287 0188 86EA0606 		EOR TOS,TOS  
 288 018c 7047     		_RET 
 289              	
 290              	
 291              	
 292              	  .type init_devices, %function
 293 018e 00BF     	  .p2align 2 
 294              	init_devices:
 295              	/* init clock to HSE 96 Mhz */
 296              	/* set 3 wait states in FLASH_ACR_LATENCY */
 297 0190 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 297      C4F20200 
 298 0198 4FF00301 	  mov r1,#3 
 299 019c 0160     	  str r1,[r0,#FLASH_ACR]
 300              	/* configure clock for HSE, 25 Mhz crystal */
 301              	/* enable HSE in RCC_CR */
 302 019e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 302      C4F20200 
 303 01a6 0168     	  ldr r1,[r0,#RCC_CR]
 304 01a8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 305 01ac 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 306              	/* wait HSERDY loop */
 307              	wait_hserdy:
 308 01ae 0168     	  ldr r1,[r0,#RCC_CR]
 309 01b0 11F4003F 	  tst r1,#(1<<17)
 310 01b4 FBD0     	  beq wait_hserdy
 311              	
 312              	/************************************************* 
 313              	   configure PLL  and source 
 314              	   SYSCLOCK=96 Mhz
 315              	   select HSE as  PLL source clock
 316              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 317              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 318              	****************************************************/
 319              	  /* set RCC_PLLCFGR */
 320 01b6 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 320      C4F20200 
 321 01be 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 321      C0F24041 
 322 01c6 4160     	  str r1,[r0,#RCC_PLLCFGR]
 323              	  /* enable PLL */
 324 01c8 0168     	  ldr r1,[r0,#RCC_CR]
 325 01ca 41F08071 	  orr r1, #(1<<24)
 326 01ce 0160     	  str r1,[r0,#RCC_CR]
 327              	/* wait for PLLRDY */
 328              	wait_pllrdy:
 329 01d0 0168     	  ldr r1,[r0,#RCC_CR]
 330 01d2 11F0007F 	  tst r1,#(1<<25)
 331 01d6 FBD1     	  bne wait_pllrdy 
 332              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 333 01d8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 333      C0F21901 
ARM GAS  forth.s 			page 18


 334 01e0 8160     	  str r1,[r0,#RCC_CFGR]
 335              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 336 01e2 8168     	  ldr r1,[r0,#RCC_CFGR]
 337 01e4 41F00201 	  orr r1,#2
 338 01e8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 339              	/* wait for SWS==2 */
 340              	wait_sws:
 341 01ea 8168     	  ldr r1,[r0,#RCC_CFGR]
 342 01ec 11F0080F 	  tst r1,#(2<<2)
 343 01f0 FBD0     	  beq wait_sws
 344              	/* now sysclock is 96 Mhz */
 345              	
 346              	
 347              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 348 01f2 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 349 01f6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 350 01f8 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 351 01fc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 352              	/* configure GPIOC:13 as output for user LED */
 353 01fe 4FF40060 	  _MOV32 r0,LED_GPIO 
 353      C4F20200 
 354 0206 4FF00D01 	  mov r1,#LED_PIN
 355 020a 4FF01102 	  mov r2,#OUTPUT_OD 
 356 020e 00B500F0 	  _CALL gpio_config 
 356      8FF85DF8 
 356      04EB
 357 0218 4FF00102 	  mov r2,#1
 358 021c 00B500F0 	  _CALL gpio_out 
 358      DEF85DF8 
 358      04EB
 359              	/* enable compensation CELL for fast I/O */
 360 0226 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 360      C4F20101 
 361 022e 4FF00100 		mov r0,#1 
 362 0232 0862     		str r0,[R1,#SYSCFG_CMPCR]
 363              	/* wait for ready bit */ 
 364 0234 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 365 0236 10F4807F 	    tst r0,#(1<<8)
 366 023a FBD0     		beq 1b 	
 367              	
 368              	
 369              	/* configure systicks for 1msec ticks */
 370              	// set priority to 15 (lowest)
 371 023c 4FF0FF30 	  mov r0,#STCK_IRQ
 372 0240 4FF00F01 	  mov r1,#15 
 373 0244 00B500F0 	  _CALL nvic_set_priority
 373      2FF85DF8 
 373      04EB
 374 024e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 374      CEF20000 
 375 0256 47F2FF61 	  _MOV32 r1,95999 
 375      C0F20101 
 376 025e 4160     	  str r1,[r0,#STK_LOAD]
 377 0260 4FF00701 	  mov r1,#7
 378 0264 0160     	  str r1,[r0,STK_CTL]
 379 0266 7047     	  _RET  
 380              	
ARM GAS  forth.s 			page 19


 381              	
 382              	/* copy system variables to RAM */ 
 383              		.type remap, %function 
 384              	    .global remap 
 385              	remap:
 386              	// copy system to RAM 	
 387 0268 4FF00000 		_MOV32 r0,RAM_ADR 
 387      C2F20000 
 388 0270 9249     		ldr r1,=UZERO 
 389 0272 4FF0BB02 		mov r2,#ULAST-UZERO 
 390 0276 02F10302 		add r2,r2,#3
 391 027a 22F00302 		and r2,r2,#~3 
 392 027e 51F8043B 	1:	ldr r3,[r1],#4 
 393 0282 40F8043B 		str r3,[r0],#4 
 394 0286 043A     		subs R2,#4 
 395 0288 F9D1     		bne 1b
 396              	// zero end of RAM 
 397 028a 4FF00002 		_MOV32 r2,RAM_END 
 397      C2F20202 
 398 0292 83EA0303 		eor r3,r3,r3 
 399 0296 40F8043B 	2:  str r3,[r0],#4
 400 029a 9042     		cmp r0,r2 
 401 029c FBDB     		blt 2b 
 402 029e 4FF00004 		_MOV32 UP,RAM_ADR  
 402      C2F20004 
 403 02a6 7047     		_RET 
 404              	
 405              	// set irq priority 
 406              	// 0 highest 
 407              	// 15 lowest
 408              	// input: r0 IRQn  
 409              	//        r1  ipr 
 410              	nvic_set_priority:
 411 02a8 08B4     	    push {r3}
 412 02aa 0028     	    cmp r0,#0 
 413 02ac 08D4     	    bmi negative_irq 
 414 02ae 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 414      CEF20003 
 415 02b6 4FEA0111 	    lsl r1,#4 
 416 02ba 1954     	    strb r1,[r3,r0]
 417 02bc 08BC     	    pop {r3}
 418 02be 7047     	    _RET 
 419              	negative_irq:
 420 02c0 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 420      CEF20003 
 421 02c8 00F00F00 	    and r0,#0XF 
 422 02cc A0F10400 	    sub r0,#4 
 423 02d0 4FEA0111 	    lsl r1,#4 
 424 02d4 1954     	    strb r1,[r3,r0]
 425 02d6 08BC     	    pop {r3}
 426 02d8 7047     	    _RET 
 427              	
 428              	
 429              	// enable interrupt in nvic 
 430              	// input: r0 = IRQn 
 431              	nvic_enable_irq: 
 432 02da 0EB4     	    push {r1,r2,r3}
ARM GAS  forth.s 			page 20


 433 02dc 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 433      CEF20003 
 434 02e4 0146     	    mov r1,r0 
 435 02e6 4FEA5111 	    lsr r1,#5  
 436 02ea 4FEA8101 	    lsl r1,#2  // ISERn  
 437 02ee 00F01F00 	    and r0,#31 // bit#
 438 02f2 4FF00102 	    mov r2,#1 
 439 02f6 02FA00F2 	    lsl r2,r0
 440 02fa 72B6     	    cpsid I
 441 02fc 5A50     	    str r2,[r3,r1]
 442 02fe 62B6     	    cpsie I 
 443 0300 0EBC     	    pop {r1,r2,r3}
 444 0302 7047     	    _RET 
 445              	
 446              	// disable interrupt in nvic
 447              	// input: r0 = IRQn
 448              	nvic_disable_irq:
 449 0304 0EB4     	    push {r1,r2,r3}
 450 0306 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 450      CEF20003 
 451 030e 0146     	    mov r1,r0 
 452 0310 4FEA5111 	    lsr r1,#5  
 453 0314 4FEA8101 	    lsl r1,#2  // ISERn
 454 0318 00F01F00 	    and r0,#31 // bit#
 455 031c 4FF00102 	    mov r2,#1 
 456 0320 02FA00F2 	    lsl r2,r0
 457 0324 5A50     	    str r2,[r3,r1]
 458 0326 BFF34F8F 	    dsb 
 459 032a BFF36F8F 	    isb 
 460 032e 0EBC     	    pop {r1,r2,r3}
 461 0330 7047     	    _RET 
 462              	
 463              	/**********************************
 464              	  gpio_config 
 465              	  Configure gpio mode 
 466              	  input:
 467              	    r0   GPIOx 
 468              	    r1   pin 
 469              	    r2   mode 
 470              	  output:
 471              	    none 
 472              	  use:
 473              	    r3,r5,r11  
 474              	**********************************/
 475              	gpio_config:
 476 0332 2DE92808 	    push {r3,r5,r11}
 477              	//  clear registers field 
 478 0336 4FF00105 	    mov r5,#1
 479 033a 05FA01F5 	    lsl r5,r1
 480 033e 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 481 0342 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 482 0344 03EA0503 	    and r3,r5 
 483 0348 4360     	    str r3,[r0,#GPIO_OTYPER]
 484 034a 4FF00305 	    mov r5,#3 
 485 034e 4FF0020B 	    mov r11,#2 
 486 0352 01FB0BFB 	    mul r11,r1 
 487 0356 05FA0BF5 	    lsl r5,r11 
ARM GAS  forth.s 			page 21


 488 035a 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 489 035e 0368     	    ldr r3,[r0,#GPIO_MODER]
 490 0360 03EA0503 	    and r3,r5 
 491 0364 0360     	    str r3,[r0,#GPIO_MODER]
 492 0366 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 493 0368 03EA0503 	    and r3,r5 
 494 036c C360     	    str r3,[r0,#GPIO_PUPDR]
 495              	// set mode register, r2 low nibble  
 496 036e 02F00305 	    and r5,r2,#3    
 497 0372 05FA0BF5 	    lsl r5,r11 // mode 
 498 0376 0368     	    ldr r3,[r0,#GPIO_MODER]
 499 0378 43EA0503 	    orr r3,r5 
 500 037c 0360     	    str r3,[r0,#GPIO_MODER]
 501 037e 032A     	    cmp r2,#3
 502 0380 13D0     	    beq 9f // analog input 
 503 0382 12F00305 	    ands r5,r2,#3 
 504 0386 08D0     	    beq input_pull 
 505              	output_type:
 506 0388 4FEA1212 	    lsr r2,#4 
 507 038c 02FA01F2 	    lsl r2,r1 // 1 bit field 
 508 0390 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 509 0392 43EA0203 	    orr r3,r2 
 510 0396 4360     	    str r3,[r0,#GPIO_OTYPER]
 511 0398 07E0     	    b 9f 
 512              	input_pull:
 513 039a C368     	    ldr r3,[r0,#GPIO_PUPDR]
 514 039c 4FEA1212 	    lsr r2,#4 
 515 03a0 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 516 03a4 43EA0203 	    orr r3,r2 
 517 03a8 C360     	    str r3,[r0,#GPIO_PUPDR]
 518 03aa BDE82808 	9:  pop {r3,r5,r11}
 519 03ae 7047     	    _RET 
 520              	
 521              	// configure gpio speed 
 522              	// input:
 523              	//    r0   GPIO_BASE_ADR 
 524              	//    r1   pin 
 525              	//    r2   speed
 526              	// use:
 527              	//  r3,r5,r11 
 528              	gpio_speed:
 529 03b0 2DE92808 	    push {r3,r5,r11}
 530 03b4 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 531 03b6 4FF00305 	    mov r5,#3
 532 03ba 4FF0020B 	    mov r11,#2 
 533 03be 01FB0BFB 	    mul r11,r1 
 534 03c2 05FA0BF5 	    lsl r5,r11
 535 03c6 6FEA0505 	    mvn r5,r5 
 536 03ca 03EA0503 	    and r3,r5   
 537 03ce 02FA0BF2 	    lsl r2,r11  
 538 03d2 43EA0203 	    orr r3,r2 
 539 03d6 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 540 03d8 BDE82808 	    pop {r3,r5,r11}
 541 03dc 7047     	    _RET
 542              	
 543              	/**************************** 
 544              	  gpio_out port,pin,0|1
ARM GAS  forth.s 			page 22


 545              	  input:
 546              	    r0   gpio_base_adr 
 547              	    r1   pin 
 548              	    r2   data 0|1 
 549              	**************************/
 550              	gpio_out:
 551 03de 08B4     	    push {r3}
 552 03e0 4FF00103 	    mov r3,#1 
 553 03e4 03FA01F3 	    lsl r3,r1 
 554 03e8 0AB9     	    cbnz r2, 1f 
 555 03ea 4FEA0343 	    lsl r3,#16 
 556 03ee 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 557 03f0 08BC     	    pop {r3}
 558 03f2 7047     	    _RET 
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564              		.p2align 2
 565              	UZERO:
 566 03f4 00000000 		.word 0  			/*Reserved */
 567 03f8 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 568 03fc 00000000 		.word 0      /* TICKS */
 569 0400 00000000 	    .word 0     /* CD_TIMER */
 570 0404 F4440000 		.word HI  /*'BOOT */
 571 0408 D4130000 		.word PS2_QKEY /* query for character */
 572 040c 9C0C0000 	  .word TV_EMIT  /* char output device */
 573 0410 0A000000 	  .word BASEE 	/*BASE */
 574 0414 00000000 		.word 0			/*tmp */
 575 0418 00000000 		.word 0			/*SPAN */
 576 041c 00000000 		.word 0			/*>IN */
 577 0420 00000000 		.word 0			/*#TIB */
 578 0424 00FF0120 		.word TIBB	/*TIBU */
 579 0428 64380000 		.word INTER	/*'EVAL */
 580 042c 00000000 		.word 0			/*HLD */
 581 0430 08460000 		.word _LASTN	/*CONTEXT */
 582 0434 70460000 		.word CTOP  	/* FCP end of system dictionnary */
 583 0438 7C420020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 584 043c 08460000 		.word _LASTN	/*LAST word in dictionary */
 585 0440 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 585      00000000 
 585      00000000 
 585      00000000 
 586 0450 00000000 		.word 0  /* RX_HEAD */
 587 0454 00000000 		.word 0  /* RX_TAIL */ 
 588 0458 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 589 045c 00000000 		.word 0  /* VID_STATE, video state */  
 590 0460 00000000 	    .word 0  /* VID_FIELD, field */
 591 0464 00810120 		.word VID_BUFF /* video_buffer address */ 
 592 0468 00000000 	    .word 0 /* kbd struct */
 593 046c 00000000 		.space KBD_QUEUE_SIZE,0  
 593      00000000 
 593      00000000 
 593      00000000 
 594 047c 00000000 		.word 0  /* kbd queue head */
 595 0480 00000000 		.word 0 /* kbd queue tail */ 
ARM GAS  forth.s 			page 23


 596 0484 00000000 	    .word 0 /* tv cursor row */
 597 0488 00000000 	    .word 0 /* tv cursor column */ 
 598 048c 00000000 	    .word 0 /* tv back color */
 599 0490 07000000 	    .word 7 /* tv font color */
 600 0494 00000000 	    .space FP_WS_SIZE  /* floating point work space */ 
 600      00000000 
 600      00000000 
 600      00000000 
 600      000000
 601 04a7 00000000 	    .word 0,0 
 601      00000000 
 602              	ULAST:
 603              	
 604              	// used by _HEADER macro 
 605              	// to link names field
 606              	// in dictionary  
 607 04af 00120000 	    .equ LINK, 0 
 607      00E60000 
 607      00982000 
 607      00F40300 
 607      00
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 04c0 4FF48053 		_MOV32 r3,UART 
ARM GAS  forth.s 			page 24


  36      C4F20103 
  37 04c8 1868     		ldr r0,[r3,#USART_SR]
  38 04ca 5968     		ldr r1,[r3,#USART_DR]
  39 04cc 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 04d0 0CD0     		beq 2f // no char received 
  41 04d2 B1F1030F 		cmp r1,#VK_CTRL_C 
  42 04d6 3FF4FDAD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 04da 04F14C00 		add r0,UP,#RX_QUEUE
  44 04de 226E     		ldr r2,[UP,#RX_TAIL]
  45 04e0 8154     		strb r1,[r0,r2]
  46 04e2 02F10102 		add r2,#1 
  47 04e6 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 04ea 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 04ec 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 04ee 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 04f6 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 04f8 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 04fc 01EA0201 	  and r1,r1,r2
  62 0500 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 0504 41EA0201 	  orr r1,r1,r2 
  64 0508 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 050a 4FF4EE61 	  mov r1,#0x77<<4 
  67 050e 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 0510 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 0518 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 051c 8160     	  str r1,[r0,#USART_BRR]
  73 051e 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 0522 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 0524 4FF02500 	  mov r0,#USART1_IRQ 
  77 0528 4FF00701 	  mov r1,#7
  78 052c 00B5FFF7 	  _CALL nvic_set_priority
  78      BBFE5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 0536 4FF02500 	  mov r0,#USART1_IRQ 
  81 053a 00B5FFF7 	  _CALL nvic_enable_irq  
  81      CDFE5DF8 
  81      04EB
  82 0544 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
ARM GAS  forth.s 			page 25


  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 0546 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 0554 47F8046D 		_PUSH
  92 0558 206E     		ldr T0,[UP,#RX_TAIL] 
  93 055a E16D     		ldr T1,[UP,#RX_HEAD]
  94 055c 90EA0106 		eors TOS,T0,T1 
  95 0560 0CD0     		beq 1f
  96 0562 04F14C00 		add T0,UP,#RX_QUEUE 
  97 0566 0844     		add T0,T1 
  98 0568 0678     		ldrb TOS,[T0]
  99 056a 01F10101 		add T1,#1 
 100 056e 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 0572 E165     		str T1,[UP,#RX_HEAD]
 102 0574 47F8046D 		_PUSH 
 103 0578 4FF0FF36 		mov TOS,#-1
 104 057c 01F090BD 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0580 4A050000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0590 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0598 2868     	1:  ldr T0,[WP,#USART_SR]
 113 059a 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 059e FBD0     		beq 1b 
 115 05a0 2E71     		strb TOS,[WP,#USART_DR]	 
 116 05a2 57F8046B 		_POP
 117 05a6 01F07BBD 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 05aa 84050000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 05b4 47F8046D 	        _PUSH 
 126 05b8 4FF00006 	        mov TOS,#0
 127 05bc 01F070BD 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 05c0 AE050000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
ARM GAS  forth.s 			page 26


 133      49414C00 
 134 05cc 47F8046D 	        _PUSH 
 135 05d0 4FF00106 	        mov TOS,#1
 136 05d4 01F064BD 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 05d8 C4050000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 05e4 3046     	        mov T0,TOS
 144 05e6 57F8046B 	        _POP 
 145 05ea 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 05ec 4B48     	        ldr T0,=SER_QKEY 
 148 05ee 6061     	        str T0,[UP,#STDIN]
 149 05f0 4B48     	        ldr T0,=SER_EMIT
 150 05f2 A061     	        str T0,[UP,#STDOUT]
 151 05f4 01F054BD 	        _NEXT 
 152              	4: // local console 
 153 05f8 4A48     	        ldr T0,=PS2_QKEY
 154 05fa 6061     	        str T0,[UP,#STDIN]
 155 05fc 4A48     	        ldr T0,=TV_EMIT
 156 05fe A061     	        str T0,[UP,#STDOUT]
 157 0600 01F04EBD 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 0604 DC050000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 0614 504700BF 	      _NEST 
 166 0618 1F220000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 0620 71240000 	1:    _ADR ONEP  // c+1
 168 0624 F9220000 	      _ADR TOR   
 169 0628 1F220000 	      _DOLIT 10 
 169      0A000000 
 170 0630 79290000 	      _ADR SLMOD // r q  
 171 0634 25250000 	      _ADR QDUP  // r q q | r 0  
 172 0638 5F220000 	      _QBRAN 2f  // r 0 
 172      4C060000 
 173 0640 D1220000 	      _ADR RFROM // r q c 
 174 0644 73220000 	      _BRAN 1b
 174      20060000 
 175 064c 1F220000 	2:    _DOLIT '0'  
 175      30000000 
 176 0654 15240000 	      _ADR PLUS 
 177 0658 29210000 	      _ADR EMIT 
 178 065c D1220000 	      _ADR RFROM 
 179 0660 25250000 	      _ADR QDUP 
ARM GAS  forth.s 			page 27


 180 0664 5F220000 	      _QBRAN 3f
 180      7C060000 
 181 066c 81240000 	      _ADR ONEM 
 182 0670 F9220000 	      _ADR TOR 
 183 0674 73220000 	      _BRAN 2b 
 183      4C060000 
 184              	3:    
 185 067c A7200000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0680 08060000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 068c 504700BF 	      _NEST 
 193 0690 1F220000 	      _DOLIT 27 
 193      1B000000 
 194 0698 29210000 	      _ADR EMIT 
 195 069c 1F220000 	      _DOLIT '['
 195      5B000000 
 196 06a4 29210000 	      _ADR EMIT 
 197 06a8 A7200000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 06ac 84060000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 06b8 504700BF 	      _NEST
 205 06bc 8D060000 	      _ADR ANSI_ESC
 206 06c0 61230000 	      _ADR SWAP 
 207 06c4 15060000 	      _ADR ANSI_PARAM 
 208 06c8 1F220000 	      _DOLIT ';'
 208      3B000000 
 209 06d0 29210000 	      _ADR EMIT
 210 06d4 15060000 	      _ADR ANSI_PARAM
 211 06d8 1F220000 	      _DOLIT 'H'
 211      48000000 
 212 06e0 29210000 	      _ADR EMIT 
 213 06e4 A7200000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
 219 06e8 B0060000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 06f4 504700BF 	    _NEST
 221 06f8 1F220000 	    _DOLIT 1 
 221      01000000 
 222 0700 51230000 	    _ADR DUPP 
 223 0704 B9060000 	    _ADR SER_AT  
ARM GAS  forth.s 			page 28


 224 0708 8D060000 	    _ADR ANSI_ESC
 225 070c 1F220000 	    _DOLIT 'J'
 225      4A000000 
 226 0714 29210000 	    _ADR EMIT 
 227 0718 A7200000 	    _UNNEST 
 228 071c 54050000 	
 228      90050000 
 228      D4130000 
 228      9C0C0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
ARM GAS  forth.s 			page 29


  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 072c 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
ARM GAS  forth.s 			page 30


  77 0734 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0736 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 073e 41EA0201 	  orr r1,r2
  82 0742 0160     	  str r1,[r0,#GPIO_MODER]
  83 0744 81EA0101 	  eor r1,r1 
  84 0748 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 074a 4FF00101 	  mov r1,#1 // pin 1 
  88 074e 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0752 00B5FFF7 	  _CALL gpio_config 
  89      EDFD5DF8 
  89      04EB
  90 075c 4FF00101 	  mov r1,#1 
  91 0760 4FF00202 	  mov r2,#2
  92 0764 00B5FFF7 	  _CALL gpio_speed 
  92      23FE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 076e 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0770 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0774 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0776 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 077e 4FF00200 	  mov r0,#2 
 100 0782 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0784 41EA0001 	  orr r1,r0 
 102 0788 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 078a 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0792 41F2D470 	  mov r0,#HPER
 106 0796 D062     	  str r0,[r2,#TIM_ARR]
 107 0798 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 079c D063     	  str r0,[r2,#TIM_CCR3]
 109 079e 4FF4E170 	  mov r0,#HPULSE 
 110 07a2 1064     	  str r0,[r2,#TIM_CCR4]  
 111 07a4 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 07a8 D061     	  str r0,[r2,#TIM_CCMR2]
 113 07aa 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 07ae 1062     	  str r0,[r2,#TIM_CCER]
 115 07b0 4FF00100 	  mov r0,#1 
 116 07b4 D060     	  str r0,[r2,#TIM_DIER]
 117 07b6 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 07b8 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 07bc 4FF00201 	  mov r1,#2
 121 07c0 00B5FFF7 	  _CALL nvic_set_priority
 121      71FD5DF8 
 121      04EB
 122 07ca 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 07ce 00B5FFF7 	  _CALL nvic_enable_irq
 123      83FD5DF8 
ARM GAS  forth.s 			page 31


 123      04EB
 124 07d8 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 07da 00BF     	  _GBL_FUNC tv_out_isr
 132 07dc 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 07e4 81EA0101 	  eor T1,T1
 134 07e8 0161     	  str T1,[T0,#TIM_SR]
 135 07ea 616E     	  ldr T1,[UP,#VID_CNTR]
 136 07ec 01F10101 	  add T1,#1 
 137 07f0 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 07f2 A26E     	  ldr T2,[UP,#VID_STATE]
 140 07f4 002A     	  cmp T2,#ST_VSYNC 
 141 07f6 07D0     	  beq state_vsync
 142 07f8 012A     	  cmp T2,#ST_PREVID 
 143 07fa 2FD0     	  beq state_pre_video 
 144 07fc 022A     	  cmp T2,#ST_VIDEO 
 145 07fe 36D0     	  beq state_video_out 
 146 0800 032A     	  cmp T2,#ST_POSTVID 
 147 0802 63D0     	  beq state_post_video
 148 0804 FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0808 0129     	  cmp T1,#1
 152 080a 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 080c 4FF0DB01 	  mov T1,#SERRATION
 155 0810 0164     	  str T1,[T0,#TIM_CCR4]
 156 0812 40F6E931 	  mov T1,#SYNC_LINE 
 157 0816 C162     	  str T1,[T0,#TIM_ARR]
 158 0818 6BE0     	  b tv_isr_exit 
 159 081a 0729     	1: cmp T1,#7
 160 081c 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 081e 40F62821 	  mov T1,#VSYNC_PULSE
 163 0822 0164     	  str T1,[T0,#TIM_CCR4]
 164 0824 65E0     	  b tv_isr_exit
 165 0826 0D29     	2: cmp T1,#13
 166 0828 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 082a 4FF0DB01 	   mov T1,#SERRATION 
 169 082e 0164     	   str T1,[T0,#TIM_CCR4]
 170 0830 5FE0     	   b tv_isr_exit   
 171 0832 1229     	3: cmp T1,#18
 172 0834 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0836 E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0838 0029     	   cmp T1,#ODD_FIELD  
 176 083a 5AD0     	   beq tv_isr_exit 
 177 083c 01E0     	   b sync_end 
 178 083e 1329     	4: cmp T1,#19 
ARM GAS  forth.s 			page 32


 179 0840 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0842 4FF00901 	   mov T1,#9
 182 0846 6166     	   str T1,[UP,#VID_CNTR]
 183 0848 4FF4E171 	   mov T1,#HPULSE 
 184 084c 0164     	   str T1,[T0,#TIM_CCR4] 
 185 084e 41F2D471 	   mov T1,#HPER 
 186 0852 C162     	   str T1,[T0,#TIM_ARR] 
 187 0854 4FF00101 	   mov T1,#ST_PREVID 
 188 0858 A166     	   str T1,[UP,#VID_STATE]
 189 085a 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 085c 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 085e 48D4     	   bmi tv_isr_exit 
 194 0860 4FF00201 	   mov T1,#ST_VIDEO 
 195 0864 A166     	   str T1,[UP,#VID_STATE]
 196 0866 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 086a C160     	   str T1,[T0,#TIM_DIER]
 198 086c 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 086e F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0870 06D9     	   bls 1f 
 205 0872 4FF00301 	   mov T1,#ST_POSTVID 
 206 0876 A166     	   str T1,[UP,#VID_STATE]
 207 0878 4FF00101 	   mov T1,#1 
 208 087c C160     	   str T1,[T0,#TIM_DIER]
 209 087e 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0880 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0882 A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0886 4FF0A003 	   mov T3,#160
 214 088a 03FB01F1 	   mul T1,T3 
 215 088e 0844     	   add T0,T1  
 216 0890 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0898 10F8012B 	2: ldrb T2,[T0],#1 
 222 089c 4FEA0222 	   lsl T2,#8 
 223 08a0 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 08a2 AFF30080 	   nop.w 
 225 08a6 AFF30080 	   nop.w
 226 08aa AFF30080 	   nop.w 
 227 08ae AFF30080 	   nop.w 
 228 08b2 4FEA0212 	   lsl T2,#4  
 229 08b6 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 08b8 AFF30080 	   nop.w
 231 08bc AFF30080 	   nop.w  
 232 08c0 013B     	   subs T3,#1
 233 08c2 E9D1     	   bne 2b  
 234 08c4 4FF47022 	   mov T2,#(15<<16) 
ARM GAS  forth.s 			page 33


 235 08c8 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 08ca 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 08cc 4FF48372 	   mov T2,#262
 239 08d0 9142     	   cmp T1,T2
 240 08d2 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 08d4 E16E     	   ldr T1,[UP,VID_FIELD]
 243 08d6 11B9     	   cbnz T1, frame_end 
 244 08d8 40F6E931 	   mov T1,#SYNC_LINE
 245 08dc C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 08de 4FF00001 	   mov T1,#ST_VSYNC 
 248 08e2 A166     	   str T1,[UP,#VID_STATE]
 249 08e4 81EA0101 	   eor T1,T1 
 250 08e8 6166     	   str T1,[UP,#VID_CNTR]
 251 08ea E16E     	   ldr T1,[UP,#VID_FIELD]
 252 08ec 6FEA0101 	   mvn T1,T1  
 253 08f0 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 08f2 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 08f4 EC060000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0904 47F8046D 		_PUSH 
 266 0908 04F19806 		ADD TOS,UP,#BK_COLOR
 267 090c 01F0C8BB 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0910 F8080000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0920 47F8046D 		_PUSH 
 273 0924 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0928 01F0BABB 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 092c 14090000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0938 47F8046D 	  _PUSH 
 280 093c 04F19406 	  ADD TOS,UP,#COL 
 281 0940 01F0AEBB 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
ARM GAS  forth.s 			page 34


 284              	// cursor row 
 285 0944 30090000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 094c 47F8046D 	  _PUSH 
 287 0950 04F19006 	  ADD TOS,UP,#ROW 
 288 0954 01F0A4BB 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0958 48090000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0964 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0968 00FB06F6 	  mul TOS,T0 
 295 096c 01F098BB 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0970 5C090000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 097c 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0980 00FB06F6 	  mul TOS,T0 
 302 0984 01F08CBB 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0988 74090000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0994 47F8046D 	  _PUSH 
 308 0998 DFF88C65 	  ldr TOS,=font_6x8 
 309 099c 01F080BB 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 09a0 8C090000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 09ac 47F8046D 	  _PUSH 
 315 09b0 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 09b2 01F075BB 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 09b6 A4090000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 09c0 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 09c2 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 09c6 02FB00F0 	    mul T0,T2 
ARM GAS  forth.s 			page 35


 330 09ca 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 09ce 1044     	    add T0,T2 
 332 09d0 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 09d2 0344     	    add T3,T0 // T3 -> byte address 
 334 09d4 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 09d6 4FF00F02 	    mov T2,#15 // AND mask 
 336 09da 11F0010F 	    tst T1,#1 
 337 09de 01D0     	    beq 1f 
 338 09e0 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 09e4 DFF84405 	1:  ldr T0,=plot_op 
 340 09e8 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 09ec 05EA0205 	    and WP,T2 // mask out nibble 
 343 09f0 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 09f4 11F0010F 	    tst T1,#1 
 345 09f8 01D1     	    bne 1f 
 346 09fa 4FEA0010 	    lsl T0,#4 // high nibble  
 347 09fe 45EA0005 	1:  orr WP,T0  
 348 0a02 1D70     	    strb WP,[T3]
 349 0a04 1AE0     	    b 9f 
 350              	op_pen: 
 351 0a06 05EA0205 	    and WP,T2 
 352 0a0a 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0a0e 11F0010F 	    tst T1,#1
 354 0a12 01D1     	    bne 1f 
 355 0a14 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0a18 45EA0005 	1:	orr WP,T0 
 357 0a1c 1D70     	    strb WP,[T3]
 358 0a1e 0DE0     	    b 9f 
 359              	op_invert:
 360 0a20 85EA0205 	    eor WP,T2 
 361 0a24 1D70     	    strb WP,[T3]
 362 0a26 09E0     	    b 9f 
 363              	op_xor:
 364 0a28 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0a2c 11F0010F 	    tst T1,#1 
 366 0a30 01D1     	    bne 1f 
 367 0a32 4FEA0010 	    lsl T0,#4 
 368 0a36 85EA0005 	1:  eor WP,T0 
 369 0a3a 1D70     	    strb WP,[T3]
 370 0a3c 57F8046B 	9:  _POP 
 371 0a40 01F02EBB 	    _NEXT 
 372              	
 373 0a44 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 0a48 BA090000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0a54 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0a56 0028     	    cmp T0,#0
 381 0a58 FCD1     	    bne 1b
 382 0a5a 01F021BB 	    _NEXT 
 383              	
 384              	// CLS ( -- )
ARM GAS  forth.s 			page 36


 385              	// clear TV screen 
 386 0a5e 4C0A0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0a68 80EA0000 	    eor T0,T0 
 388 0a6c 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0a70 40EA0100 	    orr T0,T1 
 390 0a74 4FEA0111 	    lsl T1,#4 
 391 0a78 40EA0100 	    orr T0,T1 
 392 0a7c 4FEA0021 	    lsl T1,T0,#8 
 393 0a80 40EA0100 	    orr T0,T1 
 394 0a84 4FEA0041 	    lsl T1,T0,#16
 395 0a88 40EA0100 	    orr T0,T1 
 396 0a8c 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0a90 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0a92 5050     	1:	str T0,[T2,T1]
 399 0a94 0439     	    subs T1,#4
 400 0a96 FCD1     	    bne 1b
 401 0a98 1060     	    str T0,[T2]
 402 0a9a 80EA0000 	    eor T0,T0 
 403 0a9e C4F89000 	    str T0,[UP,#ROW]
 404 0aa2 C4F89400 	    str T0,[UP,#COL]
 405 0aa6 01F0FBBA 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0aaa 620A0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0ab8 504700BF 	  _NEST
 412 0abc 1F220000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0ac4 51230000 	  _ADR DUPP  
 414 0ac8 F9220000 	  _ADR TOR 
 415 0acc 35240000 	  _ADR STAR
 416 0ad0 AD090000 	  _ADR VIDBUFF
 417 0ad4 15240000 	  _ADR PLUS
 418 0ad8 D1220000 	  _ADR RFROM   
 419 0adc 1F220000 	  _DOLIT 0 
 419      00000000 
 420 0ae4 AD2B0000 	  _ADR FILL 
 421 0ae8 A7200000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0aec AE0A0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0afc 504700BF 	    _NEST 
 429 0b00 AD090000 	    _ADR VIDBUFF 
 430 0b04 51230000 	    _ADR DUPP 
 431 0b08 1F220000 	    _DOLIT BPR*CHAR_HEIGHT 
ARM GAS  forth.s 			page 37


 431      00050000 
 432 0b10 51230000 	    _ADR DUPP 
 433 0b14 F9220000 	    _ADR TOR 
 434 0b18 15240000 	    _ADR PLUS 
 435 0b1c 61230000 	    _ADR SWAP 
 436 0b20 1F220000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0b28 D1220000 	    _ADR RFROM  
 438 0b2c 25240000 	    _ADR SUBB 
 439 0b30 652B0000 	    _ADR MOVE
 440 0b34 1F220000 	    _DOLIT 24 
 440      18000000 
 441 0b3c B90A0000 	    _ADR CLRLINE 
 442 0b40 A7200000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0b44 F00A0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0b54 504700BF 	    _NEST 
 450 0b58 AD090000 	    _ADR VIDBUFF
 451 0b5c 51230000 	    _ADR DUPP 
 452 0b60 1F220000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0b68 15240000 	    _ADR PLUS 
 454 0b6c 1F220000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0b74 1F220000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0b7c 25240000 	    _ADR SUBB  
 457 0b80 652B0000 	    _ADR MOVE
 458 0b84 1F220000 	    _DOLIT 0 
 458      00000000 
 459 0b8c B90A0000 	    _ADR CLRLINE
 460 0b90 A7200000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0b94 480B0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 0ba0 E34D     	    ldr WP,=SCROLLUP 
 469 0ba2 45F00105 	    orr WP,#1
 470 0ba6 80EA0000 	    eor T0,T0 
 471 0baa C4F89400 	    str T0,[UP,#COL]
 472 0bae D4F89000 	    ldr T0,[UP,#ROW]
 473 0bb2 1828     	    cmp T0,#24 
 474 0bb4 A2D0     	    beq SCROLLUP  
 475 0bb6 00F10100 	    add T0,#1 
 476 0bba C4F89000 	    str T0,[UP,#ROW]
ARM GAS  forth.s 			page 38


 477 0bbe 01F06FBA 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0bc2 980B0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0bcc D4F89400 	  ldr T0,[UP,#COL]
 484 0bd0 00F10100 	  add T0,#1
 485 0bd4 3528     	  cmp T0,#53
 486 0bd6 E3D5     	  bpl TV_CRLF  
 487 0bd8 C4F89400 	  str T0,[UP,#COL]
 488 0bdc 01F060BA 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0be0 C60B0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0bec D4F89400 	    ldr T0,[UP,#COL]
 497 0bf0 28B1     	    cbz T0,1f 
 498 0bf2 A0F10100 	    sub T0,#1 
 499 0bf6 C4F89400 	    str T0,[UP,#COL]
 500 0bfa 01F051BA 	    _NEXT 
 501 0bfe D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0c02 38B1     	    cbz T0,9f
 503 0c04 A0F10100 	    sub T0,#1
 504 0c08 C4F89000 	    str T0,[UP,#ROW]
 505 0c0c 4FF03400 	    mov T0,#52 
 506 0c10 C4F89400 	    str T0,[UP,#COL]
 507 0c14 01F044BA 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0c18 4FF08000 	    mov T0,#128 
 513 0c1c 06EA0006 	    and TOS,T0 
 514 0c20 4FEAD616 	    lsr TOS,#7
 515 0c24 01F03CBA 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0c28 3868     	  ldr T0,[DSP]
 520 0c2a 00F10100 	  add T0,#1 
 521 0c2e 3860     	  str T0,[DSP]
 522 0c30 01F036BA 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0c34 4FEA4606 	    lsl TOS,#1
 527 0c38 01F032BA 	    _NEXT 
 528              	
 529              	
ARM GAS  forth.s 			page 39


 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0c3c 504700BF 	    _NEST 
 536 0c40 1F220000 	    _DOLIT 5 
 536      05000000 
 537 0c48 F9220000 	    _ADR TOR 
 538 0c4c F9220000 	1:  _ADR TOR 
 539 0c50 89250000 	    _ADR DDUP 
 540 0c54 E5220000 	    _ADR RAT
 541 0c58 190C0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 0c5c C1090000 	    _ADR PLOT 
 543 0c60 290C0000 	    _ADR INCR_X 
 544 0c64 D1220000 	    _ADR RFROM 
 545 0c68 350C0000 	    _ADR NEXT_PIXEL
 546 0c6c 41220000 	    _DONXT 1b
 546      4C0C0000 
 547 0c74 75250000 	    _ADR TDROP 
 548 0c78 A7200000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 0c7c A6F12006 	   sub TOS,#32
 553 0c80 4FF00800 	   mov T0,#8 
 554 0c84 00FB06F6 	   mul TOS,T0 
 555 0c88 A748     	   ldr T0,=font_6x8
 556 0c8a 0644     	   add TOS,T0 
 557 0c8c 01F008BA 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 0c90 E40B0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 0c9c 504700BF 	    _NEST
 565 0ca0 51230000 	    _ADR DUPP 
 566 0ca4 1F220000 	    _DOLIT 32 
 566      20000000 
 567 0cac 1D260000 	    _ADR ULESS
 568 0cb0 5F220000 	    _QBRAN 1f
 568      C00C0000 
 569 0cb8 73220000 	    _BRAN CTRL_KEY
 569      240D0000 
 570 0cc0 7D0C0000 	1:  _ADR CHAR_FONT 
 571 0cc4 39090000 	    _ADR CURSOR_COL 
 572 0cc8 A5220000 	    _ADR AT
 573 0ccc 7D090000 	    _ADR COLX  // x coord 
 574 0cd0 4D090000 	    _ADR CURSOR_ROW 
 575 0cd4 A5220000 	    _ADR AT    
 576 0cd8 65090000 	    _ADR ROWY  // {c-adr x y -- } 
 577 0cdc 39250000 	    _ADR ROT  // TEST 
 578 0ce0 1F220000 	    _DOLIT 7   
 578      07000000 
ARM GAS  forth.s 			page 40


 579 0ce8 F9220000 	    _ADR TOR  
 580 0cec F9220000 	1:  _ADR TOR  // { x y }
 581 0cf0 89250000 	    _ADR DDUP  // { x y x y }
 582 0cf4 E5220000 	    _ADR RAT 
 583 0cf8 C5220000 	    _ADR CAT   // { x y x y r }
 584 0cfc 3D0C0000 	    _ADR CHAR_ROW 
 585 0d00 71240000 	    _ADR ONEP // {x y' }
 586 0d04 D1220000 	    _ADR RFROM 
 587 0d08 71240000 	    _ADR ONEP // {x y' c-adr' }
 588 0d0c 41220000 	    _DONXT 1b
 588      EC0C0000 
 589 0d14 75250000 	    _ADR TDROP  
 590 0d18 CD0B0000 	    _ADR RIGHT
 591 0d1c 0D0E0000 	9:  _ADR SHOW_CURSOR 
 592 0d20 A7200000 	    _UNNEST  
 593              	CTRL_KEY:
 594 0d24 950E0000 	    _ADR HIDE_CURSOR
 595 0d28 51230000 	    _ADR DUPP 
 596 0d2c 1F220000 	    _DOLIT BKSPP  
 596      08000000 
 597 0d34 05260000 	    _ADR EQUAL 
 598 0d38 5F220000 	    _QBRAN 1f 
 598      500D0000 
 599 0d40 ED0D0000 	    _ADR BACK_SPACE 
 600 0d44 41230000 	8:  _ADR DROP 
 601 0d48 73220000 	    _BRAN 9b 
 601      1C0D0000 
 602 0d50 51230000 	1:  _ADR DUPP 
 603 0d54 1F220000 	    _DOLIT CRR 
 603      0D000000 
 604 0d5c 05260000 	    _ADR EQUAL 
 605 0d60 5F220000 	    _QBRAN 1f 
 605      740D0000 
 606 0d68 950D0000 	    _ADR CAR_RET
 607 0d6c 73220000 	    _BRAN 8b
 607      440D0000 
 608 0d74 1F220000 	1:  _DOLIT LF 
 608      0A000000 
 609 0d7c 05260000 	    _ADR EQUAL 
 610 0d80 5F220000 	    _QBRAN 9b 
 610      1C0D0000 
 611 0d88 AD0D0000 	    _ADR LN_FEED
 612 0d8c 73220000 	    _BRAN 9b  
 612      1C0D0000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 0d94 504700BF 	   _NEST
 620 0d98 1F220000 	   _DOLIT 0 
 620      00000000 
 621 0da0 39090000 	   _ADR CURSOR_COL 
 622 0da4 91220000 	   _ADR STORE 
 623 0da8 A7200000 	   _UNNEST   
 624              	
ARM GAS  forth.s 			page 41


 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 0dac 504700BF 	    _NEST 
 631 0db0 4D090000 	    _ADR CURSOR_ROW 
 632 0db4 A5220000 	    _ADR AT 
 633 0db8 51230000 	    _ADR DUPP 
 634 0dbc 1F220000 	    _DOLIT 24 
 634      18000000 
 635 0dc4 BD230000 	    _ADR XORR 
 636 0dc8 5F220000 	    _QBRAN 1f
 636      E00D0000 
 637 0dd0 71240000 	    _ADR ONEP 
 638 0dd4 4D090000 	    _ADR CURSOR_ROW 
 639 0dd8 91220000 	    _ADR STORE 
 640 0ddc A7200000 	    _UNNEST    
 641 0de0 41230000 	1:  _ADR DROP 
 642 0de4 FD0A0000 	    _ADR SCROLLUP 
 643 0de8 A7200000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 0dec 504700BF 	  _NEST 
 652 0df0 ED0B0000 	  _ADR LEFT 
 653 0df4 0D0E0000 	  _ADR SHOW_CURSOR
 654 0df8 A7200000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 0dfc 940C0000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 0e0c 504700BF 	    _NEST 
 663 0e10 1F220000 	    _DOLIT 0xFF
 663      FF000000 
 664 0e18 4D090000 	0:  _ADR CURSOR_ROW
 665 0e1c A5220000 	    _ADR AT  
 666 0e20 71240000 	    _ADR ONEP 
 667 0e24 65090000 	    _ADR ROWY 
 668 0e28 1F220000 	    _DOLIT BPR
 668      A0000000 
 669 0e30 35240000 	    _ADR STAR
 670 0e34 1F220000 	    _DOLIT BPR  
 670      A0000000 
 671 0e3c 25240000 	    _ADR SUBB 
 672 0e40 39090000 	    _ADR CURSOR_COL
 673 0e44 A5220000 	    _ADR AT 
ARM GAS  forth.s 			page 42


 674 0e48 7D090000 	    _ADR COLX 
 675 0e4c 15250000 	    _ADR TWOSL  
 676 0e50 15240000 	    _ADR PLUS
 677 0e54 AD090000 	    _ADR VIDBUFF
 678 0e58 15240000 	    _ADR PLUS
 679 0e5c 1F220000 	    _DOLIT 2
 679      02000000 
 680 0e64 F9220000 	    _ADR TOR  
 681 0e68 89250000 	1:  _ADR DDUP 
 682 0e6c B1220000 	    _ADR CSTOR 
 683 0e70 71240000 	    _ADR ONEP 
 684 0e74 41220000 	    _DONXT 1b
 684      680E0000 
 685 0e7c 61250000 	2:  _ADR DDROP // drop 3 elements 
 686 0e80 A7200000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 0e84 000E0000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 0e94 504700BF 	    _NEST 
 694 0e98 05090000 	    _ADR BACKCOLOR 
 695 0e9c A5220000 	    _ADR AT 
 696 0ea0 51230000 	    _ADR DUPP  
 697 0ea4 1F220000 	    _DOLIT 4 
 697      04000000 
 698 0eac 05240000 	    _ADR LSHIFT 
 699 0eb0 A9230000 	    _ADR ORR 
 700 0eb4 73220000 	    _BRAN 0b
 700      180E0000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 0ebc 880E0000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 0ec8 352E     	    cmp TOS,#53
 706 0eca 01D4     	    bmi 1f 
 707 0ecc 4FF03406 	    mov TOS,#52
 708 0ed0 C4F89460 	1:  str TOS,[UP,#COL]
 709 0ed4 57F8046B 	    _POP
 710 0ed8 192E     	    cmp TOS,#25
 711 0eda 01D4     	    bmi 1f 
 712 0edc 4FF01806 	    mov TOS,#24 
 713 0ee0 C4F89060 	1:  str TOS,[UP,#ROW]
 714 0ee4 57F8046B 	    _POP 
 715 0ee8 01F0DAB8 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 0eec C00E0000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
ARM GAS  forth.s 			page 43


 720 0ef8 504700BF 	    _NEST 
 721 0efc DD2A0000 	    _ADR PAD 
 722 0f00 51230000 	    _ADR DUPP 
 723 0f04 71240000 	    _ADR ONEP 
 724 0f08 1F220000 	    _DOLIT 53
 724      35000000 
 725 0f10 51370000 	    _ADR ACCEP
 726 0f14 61230000 	    _ADR SWAP 
 727 0f18 41230000 	    _ADR DROP 
 728 0f1c 75230000 	    _ADR OVER 
 729 0f20 B1220000 	    _ADR CSTOR  
 730 0f24 A7200000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
ARM GAS  forth.s 			page 44


 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
ARM GAS  forth.s 			page 45


 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
ARM GAS  forth.s 			page 46


 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
ARM GAS  forth.s 			page 47


   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
ARM GAS  forth.s 			page 48


  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
ARM GAS  forth.s 			page 49


  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
ARM GAS  forth.s 			page 50


 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 0f34 1C61     	   .byte 0x1c,'a' 
   9 0f36 3262     	   .byte 0x32,'b'
  10 0f38 2163     	   .byte 0x21,'c'
  11 0f3a 2364     	   .byte 0x23,'d'
  12 0f3c 2465     	   .byte 0x24,'e'
  13 0f3e 2B66     	   .byte 0x2b,'f'
  14 0f40 3467     	   .byte 0x34,'g'
  15 0f42 3368     	   .byte 0x33,'h'
  16 0f44 4369     	   .byte 0x43,'i'
  17 0f46 3B6A     	   .byte 0x3B,'j'
  18 0f48 426B     	   .byte 0x42,'k'
  19 0f4a 4B6C     	   .byte 0x4b,'l'
  20 0f4c 3A6D     	   .byte 0x3a,'m'
  21 0f4e 316E     	   .byte 0x31,'n'
  22 0f50 446F     	   .byte 0x44,'o'
  23 0f52 4D70     	   .byte 0x4d,'p'
  24 0f54 1571     	   .byte 0x15,'q'
  25 0f56 2D72     	   .byte 0x2d,'r'
  26 0f58 1B73     	   .byte 0x1b,'s'
  27 0f5a 2C74     	   .byte 0x2c,'t'
  28 0f5c 3C75     	   .byte 0x3c,'u'
  29 0f5e 2A76     	   .byte 0x2a,'v'
  30 0f60 1D77     	   .byte 0x1d,'w'
  31 0f62 2278     	   .byte 0x22,'x'
  32 0f64 3579     	   .byte 0x35,'y'
  33 0f66 1A7A     	   .byte 0x1a,'z'
  34 0f68 4530     	   .byte 0x45,'0'
  35 0f6a 1631     	   .byte 0x16,'1'
  36 0f6c 1E32     	   .byte 0x1e,'2'
  37 0f6e 2633     	   .byte 0x26,'3'
  38 0f70 2534     	   .byte 0x25,'4'
  39 0f72 2E35     	   .byte 0x2e,'5'
  40 0f74 3636     	   .byte 0x36,'6'
  41 0f76 3D37     	   .byte 0x3d,'7'
  42 0f78 3E38     	   .byte 0x3e,'8'
  43 0f7a 4639     	   .byte 0x46,'9'
  44 0f7c 0E60     	   .byte 0x0e,'`'
  45 0f7e 4E2D     	   .byte 0x4e,'-'
ARM GAS  forth.s 			page 51


  46 0f80 553D     	   .byte 0x55,'='
  47 0f82 5D5C     	   .byte 0x5d,'\\'
  48 0f84 545B     	   .byte 0x54,'['
  49 0f86 5B5D     	   .byte 0x5b,']'
  50 0f88 4C3B     	   .byte 0x4c,';'
  51 0f8a 5227     	   .byte 0x52,'\''
  52 0f8c 412C     	   .byte 0x41,','
  53 0f8e 492E     	   .byte 0x49,'.'
  54 0f90 7C2A     	   .byte 0x7c,'*'
  55 0f92 792B     	   .byte 0x79,'+'
  56 0f94 2920     	   .byte 0x29,' '
  57 0f96 5A0D     	   .byte SC_ENTER,CRR 
  58 0f98 6608     	   .byte SC_BKSP,BKSPP 
  59 0f9a 0D09     	   .byte SC_TAB,9
  60 0f9c 761B     	   .byte SC_ESC,27
  61 0f9e 119E     	   .byte SC_LALT,VK_LALT 
  62 0fa0 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 0fa2 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 0fa4 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 0fa6 779A     	   .byte SC_NUM,VK_NLOCK 
  66 0fa8 5800     	   .byte SC_CAPS,0
  67 0faa 0580     	   .byte SC_F1,VK_F1
  68 0fac 0681     	   .byte SC_F2,VK_F2
  69 0fae 0482     	   .byte SC_F3,VK_F3
  70 0fb0 0C83     	   .byte SC_F4,VK_F4
  71 0fb2 0384     	   .byte SC_F5,VK_F5
  72 0fb4 0B85     	   .byte SC_F6,VK_F6
  73 0fb6 8386     	   .byte SC_F7,VK_F7
  74 0fb8 0A87     	   .byte SC_F8,VK_F8
  75 0fba 0188     	   .byte SC_F9,VK_F9
  76 0fbc 098A     	   .byte SC_F10,VK_F10
  77 0fbe 788B     	   .byte SC_F11,VK_F11
  78 0fc0 078C     	   .byte SC_F12,VK_F12
  79 0fc2 7030     	   .byte SC_KP0,'0'
  80 0fc4 6931     	   .byte SC_KP1,'1'
  81 0fc6 7232     	   .byte SC_KP2,'2'
  82 0fc8 7A33     	   .byte SC_KP3,'3'
  83 0fca 6B34     	   .byte SC_KP4,'4'
  84 0fcc 7335     	   .byte SC_KP5,'5'
  85 0fce 7436     	   .byte SC_KP6,'6'
  86 0fd0 6C37     	   .byte SC_KP7,'7'
  87 0fd2 7538     	   .byte SC_KP8,'8'
  88 0fd4 7D39     	   .byte SC_KP9,'9'
  89 0fd6 7C2A     	   .byte SC_KPMUL,'*'
  90 0fd8 4A2F     	   .byte SC_KPDIV,'/'
  91 0fda 792B     	   .byte SC_KPPLUS,'+'
  92 0fdc 7B2D     	   .byte SC_KPMINUS,'-'
  93 0fde 712E     	   .byte SC_KPDOT,'.'
  94 0fe0 5A0D     	   .byte SC_KPENTER,'\r'
  95 0fe2 FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 0fe4 AAAA     	   .byte BAT_OK,BAT_OK  
  97 0fe6 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 0fe8 6141     	   .byte 'a','A'
 102 0fea 6242     	   .byte 'b','B'
ARM GAS  forth.s 			page 52


 103 0fec 6343     	   .byte 'c','C'
 104 0fee 6444     	   .byte 'd','D'
 105 0ff0 6545     	   .byte 'e','E'
 106 0ff2 6646     	   .byte 'f','F'
 107 0ff4 6747     	   .byte 'g','G'
 108 0ff6 6848     	   .byte 'h','H'
 109 0ff8 6949     	   .byte 'i','I'
 110 0ffa 6A4A     	   .byte 'j','J'
 111 0ffc 6B4B     	   .byte 'k','K'
 112 0ffe 6C4C     	   .byte 'l','L'
 113 1000 6D4D     	   .byte 'm','M'
 114 1002 6E4E     	   .byte 'n','N'
 115 1004 6F4F     	   .byte 'o','O'
 116 1006 7050     	   .byte 'p','P'
 117 1008 7151     	   .byte 'q','Q'
 118 100a 7252     	   .byte 'r','R'
 119 100c 7353     	   .byte 's','S'
 120 100e 7454     	   .byte 't','T'
 121 1010 7555     	   .byte 'u','U'
 122 1012 7656     	   .byte 'v','V'
 123 1014 7757     	   .byte 'w','W'
 124 1016 7858     	   .byte 'x','X'
 125 1018 7959     	   .byte 'y','Y'
 126 101a 7A5A     	   .byte 'z','Z'
 127 101c 3121     	   .byte '1','!'
 128 101e 3240     	   .byte '2','@'
 129 1020 3323     	   .byte '3','#'
 130 1022 3424     	   .byte '4','$'
 131 1024 3525     	   .byte '5','%'
 132 1026 365E     	   .byte '6','^'
 133 1028 3726     	   .byte '7','&'
 134 102a 382A     	   .byte '8','*'
 135 102c 3928     	   .byte '9','('
 136 102e 3029     	   .byte '0',')'
 137 1030 2D5F     	   .byte '-','_'
 138 1032 3D2B     	   .byte '=','+'
 139 1034 607E     	   .byte '`','~'
 140 1036 2722     	   .byte '\'','"'
 141 1038 2C3C     	   .byte ',','<'
 142 103a 2E3E     	   .byte '.','>'
 143 103c 2F3F     	   .byte '/','?'
 144 103e 5C7C     	   .byte '\\','|'
 145 1040 3B3A     	   .byte ';',':'
 146 1042 5B7B     	   .byte '[','{'
 147 1044 5D7D     	   .byte ']','}'
 148 1046 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 1048 315C     	   .byte '1','\\'
 153 104a 3240     	   .byte '2','@'
 154 104c 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 104e 363F     	   .byte '6','?'
 158 1050 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
ARM GAS  forth.s 			page 53


 160 1052 397B     	   .byte '9','{'
 161 1054 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 1056 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1058 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 105a 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 105c 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 105e 11A3     	    .byte SC_RALT,VK_RALT
 172 1060 2F97     	    .byte SC_APPS,VK_APPS
 173 1062 758D     	    .byte SC_UP,VK_UP
 174 1064 728E     	    .byte SC_DOWN,VK_DOWN
 175 1066 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1068 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 106a 7095     	    .byte SC_INSERT,VK_INSERT
 178 106c 6C91     	    .byte SC_HOME,VK_HOME
 179 106e 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1070 7A94     	    .byte SC_PGDN,VK_PGDN
 181 1072 717F     	    .byte SC_DEL,VK_DELETE
 182 1074 6992     	    .byte SC_END,VK_END
 183 1076 4A2F     	    .byte SC_KPDIV,'/'
 184 1078 5A0D     	    .byte SC_KPENTER,'\r'
 185 107a 1200     	    .byte 0x12,0
 186 107c 7C00     	    .byte 0x7c,0
 187 107e 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1080 6303     	   .byte 'c', VK_CTRL_C 
 193 1082 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 1084 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 1086 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1088 11A3     	   .byte SC_RALT,VK_RALT
 197 108a 2F97     	   .byte SC_APPS,VK_APPS
 198 108c 7095     	   .byte SC_INSERT,VK_INSERT
 199 108e 6C91     	   .byte SC_HOME,VK_HOME
 200 1090 7D93     	   .byte SC_PGUP,VK_PGUP
 201 1092 717F     	   .byte SC_DEL,VK_DELETE
 202 1094 6992     	   .byte SC_END,VK_END
 203 1096 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1098 758D     	   .byte SC_UP,VK_UP
 205 109a 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 109c 728E     	   .byte SC_DOWN,VK_DOWN
 207 109e 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 10a0 4A2F     	   .byte SC_KPDIV,'/'
 209 10a2 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 10a4 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 10a6 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 10a8 119E     	   .byte SC_LALT,VK_LALT
 213 10aa 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 10ac 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 10ae 761B     	   .byte SC_ESC,VK_ESC
 216 10b0 779A     	   .byte SC_NUM,VK_NLOCK
ARM GAS  forth.s 			page 54


 217 10b2 589B     	   .byte SC_CAPS,VK_CLOCK
 218 10b4 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 10b6 00BF     	    _GBL_FUNC kbd_isr 
  79 10b8 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 10c0 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 10c4 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 10c6 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 10ce D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 10d2 10F0020F 	    tst r0,#KBD_TX 
  85 10d6 40F08480 	    bne send_bit  
  86 10da 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 10dc 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 10e0 01F10102 	    add r2,r1,#1
ARM GAS  forth.s 			page 55


  89 10e4 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 10e8 0029     	    cmp r1,#0
  91 10ea 15D0     	    beq start_bit 
  92 10ec 0929     	    cmp r1,#9 
  93 10ee 25D0     	    beq parity_bit 
  94 10f0 0A29     	    cmp r1,#10 
  95 10f2 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 10f4 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 10f8 4FEA5202 	    lsr r2,#1 
  99 10fc 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 1100 07D0     	    beq 1f 
 101 1102 42F08002 	    orr r2,#(1<<7)
 102 1106 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 110a 00F10100 	    add r0,#1 
 104 110e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 1112 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 1116 63E0     	    b 9f         
 107              	start_bit:
 108 1118 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 111c 60D1     	    bne 9f // not a start bit 
 110 111e 80EA0000 	    eor r0,r0 
 111 1122 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 1126 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 112a 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 112e 6FF00101 	    mvn r1,#1
 115 1132 00EA0100 	    and r0,r1 // clear error flag 
 116 1136 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 113a 51E0     	    b 9f 
 118              	parity_bit:
 119 113c 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 1140 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 1144 4CD0     	    beq 9f  
 122 1146 01F10101 	    add r1,#1 
 123 114a 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 114e 47E0     	    b 9f      
 125              	stop_bit:
 126 1150 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 1154 40D0     	    beq 8f // error stop bit expected 
 128 1156 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 115a 11F0010F 	    tst r1,#1 
 130 115e 3BD0     	    beq 8f // error parity
 131 1160 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 1164 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1168 E028     	    cmp r0,#XT_KEY
 134 116a 04D1     	    bne 1f
 135 116c 41F04001 	    orr r1,#KBD_F_XT
 136 1170 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 1174 30E0     	    b 8f  
 138 1176 11F0800F 	1:  tst r1,#KBD_F_REL
 139 117a 14D0     	    beq store_code
 140 117c 5828     	    cmp r0,#SC_CAPS
 141 117e 04D1     	    bne 1f
 142 1180 81F00401 	    eor r1,#KBD_F_CAPS
 143 1184 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1188 06E0     	    b 2f 
 145 118a 00B500F0 	1:  _CALL do_async_key 
ARM GAS  forth.s 			page 56


 145      73F85DF8 
 145      04EB
 146 1194 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1198 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 119c 01EA0201 	    and r1,r2
 149 11a0 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 11a4 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 11a6 F028     	    cmp r0,#KEY_REL
 154 11a8 04D1     	    bne 1f
 155              	// set release flags 
 156 11aa 41F08001 	    orr r1,#KBD_F_REL 
 157 11ae 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 11b2 11E0     	    b 8f     
 159 11b4 0146     	1:  mov r1,r0 
 160 11b6 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 11c0 0AD1     	    bne 8f // was async key 
 162 11c2 D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 11c6 04F17802 	    add r2,UP,#KBD_QUEUE
 164 11ca 1154     	    strb r1,[r2,r0]
 165 11cc 00F10100 	    add r0,#1
 166 11d0 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 11d4 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 11d8 80EA0000 	8:  eor r0,r0 
 169 11dc A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 11e0 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 11e2 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 11e6 01F10100 	    add r0,r1,#1
 182 11ea 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 11ee 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 11f2 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 11f6 0829     	1:  cmp r1,#8 
 187 11f8 15D0     	    beq send_parity 
 188 11fa 0929     	    cmp r1,#9 
 189 11fc 1CD0     	    beq send_stop
 190 11fe 0A29     	    cmp r1,#10
 191 1200 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 1202 10F0010F 	    tst r0,#1
 194 1206 4FEA5000 	    lsr r0,#1
 195 120a 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 120e 02D1     	    bne 1f 
 197 1210 4FEA0242 	    lsl r2,#16
 198 1214 05E0     	    b 2f  
ARM GAS  forth.s 			page 57


 199 1216 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 121a 00F10100 	    add r0,#1 
 201 121e 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 1222 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 1224 1CE0     	    b 9f 
 204              	send_parity:
 205 1226 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 122a 10F0010F 	    tst r0,#1
 207 122e 01D0     	    beq 1f 
 208 1230 4FEA0242 	    lsl r2,#16
 209 1234 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 1236 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 1238 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 123a 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 123e 1960     	    str r1,[r3,#GPIO_MODER]
 217 1240 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 1242 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 1246 6FF00201 	    mvn r1,#KBD_TX 
 221 124a 00EA0100 	    and r0,r1 
 222 124e 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 1250 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 1254 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 1258 80EA0000 	    eor r0,r0 
 226 125c 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1260 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 1262 02B4     	    push {r1}
 238 1264 DFF86414 	    ldr r1,=async_keys
 239 1268 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 1272 02BC     	    pop {r1}
 241 1274 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
ARM GAS  forth.s 			page 58


 254 1276 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1280 FF28     	    cmp r0,#255
 256 1282 01D1     	    bne set_async_key 
 257 1284 0020     	    movs r0,#0 
 258 1286 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1288 06B4     	    push {r1,r2}
 262 128a 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 128e DFF84014 	    ldr r1,=async_jump 
 264 1292 D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 1296 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 129a 04E0     	    b set_reset
 268              	ctrl_key:
 269 129c 4FF01000 	    mov r0,#KBD_F_CTRL
 270 12a0 01E0     	    b set_reset 
 271              	alt_key:
 272 12a2 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 12a6 12F0800F 	    tst r2,#KBD_F_REL 
 275 12aa 04D0     	    beq 1f 
 276 12ac 6FEA0000 	    mvn r0,r0
 277 12b0 02EA0002 	    and r2,r0
 278 12b4 01E0     	    b 2f
 279 12b6 42EA0002 	1:  orr r2,r0 
 280 12ba 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 12be 5FF0FF30 	    movs r0,#-1
 282 12c2 06BC     	9:  pop {r1,r2}
 283 12c4 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 12c6 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 12c8 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 12ca 1401     	    .byte SC_LCTRL,1  // left control 
 290 12cc 1401     	    .byte SC_RCTRL,1  // right control 
 291 12ce 1102     	    .byte SC_LALT,2  // left alt 
 292 12d0 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 12d2 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 12d4 00       	    .byte 0 // shift  key 
 297 12d5 03       	    .byte (ctrl_key-shift_key)/2
 298 12d6 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 12d7 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
ARM GAS  forth.s 			page 59


 309 12d8 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 12e0 1846     	    mov r0,r3 
 311 12e2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 12e6 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 12ea 00B5FFF7 	    _CALL gpio_config
 313      21F85DF8 
 313      04EB
 314 12f4 1846     	    mov r0,r3 
 315 12f6 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 12fa 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 12fe 00B5FFF7 	    _CALL gpio_config
 317      17F85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 1308 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 1310 4FF40050 	    mov r0,#(2<<12)
 321 1314 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 1316 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 131e 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 1322 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 1324 D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 1326 80EA0000 	   eor r0,r0 
 328 132a C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 132e C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 1332 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 1336 4FF00101 	   mov r1,#1 
 333 133a 00B5FEF7 	   _CALL nvic_set_priority
 333      B4FF5DF8 
 333      04EB
 334 1344 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 1348 00B5FEF7 	   _CALL nvic_enable_irq 
 335      C6FF5DF8 
 335      04EB
 336 1352 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 1354 F00E0000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 1364 47F8046D 	    _PUSH 
 342 1368 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 136c 06F0FC06 	    and TOS,#0xFC  
 344 1370 00F096BE 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 1374 0EB4     	    push {T1,T2,T3}
ARM GAS  forth.s 			page 60


 352 1376 80EA0000 	    eor T0,T0  
 353 137a 04F17803 	    add T3,UP,#KBD_QUEUE
 354 137e D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 1382 D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 1386 9142     	    cmp T1,T2 
 357 1388 06D0     	    beq 2f  
 358 138a 585C     	    ldrb T0,[T3,T1]
 359 138c 01F10101 	    add T1,#1 
 360 1390 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 1394 C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 1398 0EBC     	2:  pop {T1,T2,T3}
 363 139a 7047     	    _RET 
 364              	
 365              	wait_code:
 366 139c 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 13a6 0000     	    movs T0,T0
 368 13a8 F8D0     	    beq wait_code  
 369 13aa 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 13ac 04B4     	    push {T2}
 380 13ae 11F8012B 	1:  ldrb T2,[T1],#1
 381 13b2 22B1     	    cbz T2,2f 
 382 13b4 8242     	    cmp T2,T0
 383 13b6 02D0     	    beq 2f 
 384 13b8 01F10101 	    add T1,#1 
 385 13bc F7E7     	    b 1b 
 386 13be 0878     	2:  ldrb T0,[T1]
 387 13c0 0000     	    movs T0,T0 // set/reset zero flag 
 388 13c2 04BC     	9:  pop {T2}
 389 13c4 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 13c6 58130000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
 397 13d4 47F8046D 	    _PUSH 
 398 13d8 86EA0606 	    eor TOS,TOS 
 399 13dc BD49     	    ldr T1,=sc_ascii // translation table
 400 13de 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 13e2 4FF04002 	    mov T2,#KBD_F_XT 
 402 13e6 1042     	    tst T0,T2
 403 13e8 00D0     	    beq 1f
ARM GAS  forth.s 			page 61


 404 13ea BB49     	    ldr T1,=extended // extended code translation
 405 13ec 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 13f6 98B1     	    cbz T0,inkey_exit
 407 13f8 E128     	    cmp T0,#XT2_KEY // pause 
 408 13fa 13D0     	    beq pause_key
 409 13fc 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 1406 0646     	    mov TOS,T0
 411 1408 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 1412 032E     	    cmp TOS,#VK_CTRL_C 
 413 1414 3EF45EAE 	    beq user_reboot 
 414 1418 47F8046D 	    _PUSH 
 415 141c 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 1420 00F03EBE 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 1424 4FF00701 	    mov T1,#7 
 420 1428 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 1432 0139     	    subs T1,#1
 422 1434 F8D1     	    bne 1b 
 423 1436 00F033BE 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 143a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 143e 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 1442 06D1     	    bne shift_down 
 431 1444 10F0200F 	    tst T0,#KBD_F_ALT  
 432 1448 06D1     	    bne altchar_down 
 433 144a 10F0100F 	    tst T0,#KBD_F_CTRL
 434 144e 06D1     	    bne ctrl_down 
 435 1450 0DE0     	    b 9f 
 436              	shift_down:
 437 1452 3046     	    mov T0,TOS 
 438 1454 A149     	    ldr T1,=shifted 
 439 1456 04E0     	    b 8f 
 440              	altchar_down:
 441 1458 3046     	    mov T0,TOS 
 442 145a A149     	    ldr T1,=altchar
 443 145c 01E0     	    b 8f
 444              	ctrl_down:
 445 145e 3046     	    mov T0,TOS 
 446 1460 A049     	    ldr T1,=controls 
 447 1462 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 146c 0646     	    mov TOS,T0
 449 146e 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
ARM GAS  forth.s 			page 62


 449      04EB
 450 1478 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 147a 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 147e 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 1482 0BD0     	    beq 9f 
 456 1484 412E     	    cmp TOS,#'A'
 457 1486 09D4     	    bmi 9f 
 458 1488 5B2E     	    cmp TOS,#'Z'+1 
 459 148a 03D4     	    bmi 3f 
 460 148c 612E     	    cmp TOS,#'a'
 461 148e 05D4     	    bmi 9f 
 462 1490 7B2E     	    cmp TOS,#'z'+1
 463 1492 03D5     	    bpl 9f 
 464 1494 4FF02000 	3:  mov T0,#(1<<5)
 465 1498 86EA0006 	    eor TOS,T0 
 466 149c 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 149e 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 14a0 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 14a2 0128     	    cmp r0,ST_PREVID 
 484 14a4 FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 14a6 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 14aa 00B5FEF7 	    _CALL nvic_disable_irq
 487      2AFF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 14b4 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 14bc 1846     	    mov r0,r3 
 491 14be 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 14c2 4FF01102 	    mov r2,#OUTPUT_OD
 493 14c6 00B5FEF7 	    _CALL gpio_config 
 493      33FF5DF8 
 493      04EB
 494 14d0 1846     	    mov r0,r3 
 495 14d2 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 14d6 82EA0202 	    eor r2,r2 
 497 14da 00B5FEF7 	    _CALL gpio_out 
 497      7FFF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
ARM GAS  forth.s 			page 63


 499 14e4 4FF4E150 	    mov r0,#150*48
 500 14e8 0138     	1:  subs r0,#1 
 501 14ea FDD1     	    bne 1b
 502 14ec 01BC     	    pop {r0}
 503 14ee 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 14f2 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 14f6 40F00200 	    orr r0,#KBD_TX 
 506 14fa 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 14fe 80EA0000 	    eor r0,r0 
 508 1502 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 1506 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 150a 1846     	    mov r0,r3 
 513 150c 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 1510 4FF01102 	    mov r2,#OUTPUT_OD 
 515 1514 00B5FEF7 	    _CALL gpio_config 
 515      0CFF5DF8 
 515      04EB
 516 151e 1846     	    mov r0,r3 
 517 1520 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 1524 82EA0202 	    eor r2,r2 
 519 1528 00B5FEF7 	    _CALL gpio_out
 519      58FF5DF8 
 519      04EB
 520              	// release clock line 
 521 1532 1846     	    mov r0,r3 
 522 1534 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 1538 4FF00002 	    mov r2,#INPUT_FLOAT
 524 153c 00B5FEF7 	    _CALL gpio_config
 524      F8FE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 1546 4FF00A00 	    mov r0,#10
 528 154a E060     	    str r0,[UP,#CD_TIMER]
 529 154c E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 154e 20B1     	    cbz r0, 4f 
 531 1550 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 1554 10F0020F 	    tst r0,#KBD_TX
 533 1558 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 155a 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 155e 00B5FEF7 	    _CALL nvic_enable_irq
 536      BBFE5DF8 
 536      04EB
 537 1568 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 538 156c 20F00201 	    bic r1,r0,#KBD_TX
 539 1570 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 1574 00F00200 	    and r0,#KBD_TX
 541 1578 48B1     	    cbz r0, 5f
 542 157a 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 157c 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1580 1960     	    str r1,[r3,#GPIO_MODER]
 545 1582 80EA0000 	    eor r0,r0 
 546 1586 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 158a 6FEA0000 	    mvn r0,r0   
ARM GAS  forth.s 			page 64


 548 158e 0EBC     	5:  pop {r1,r2,r3}
 549 1590 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 1592 80EA0000 	    eor T0,T0 
 555 1596 C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 159a C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 159e 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 15a2 6FF00301 	    mvn T1,#3
 559 15a6 00EA0100 	    and T0,T1 
 560 15aa 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 15ae 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 15b0 CA130000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 15bc 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 15c0 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 15ca B8B9     	    cbnz T0,3f // keyboard not dectected
 571 15cc 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 15d6 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 15e0 FE28     	    cmp r0,KBD_CMD_RESEND
 574 15e2 EBD0     	    beq 1b 
 575 15e4 4FF4FA70 	    mov T0,#500 
 576 15e8 E060     	    str T0,[UP,#CD_TIMER]
 577 15ea 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 15f4 10B9     	    cbnz T0,3f
 579 15f6 E068     	    ldr T0,[UP,#CD_TIMER]
 580 15f8 0028     	    cmp T0,#0 
 581 15fa F6D1     	    bne 2b 
 582 15fc 47F8046D 	3:  _PUSH 
 583 1600 0646     	    mov TOS,T0  
 584 1602 00F04DBD 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 1606 B4150000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
ARM GAS  forth.s 			page 65


 592 1614 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 161e 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 1622 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 162c 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 1636 FE28     	    cmp T0,#KBD_CMD_RESEND
 597 1638 ECD0     	    beq 1b
 598 163a FA28     	    cmp T0,#KBD_ACK  
 599 163c F6D1     	    bne 2b 
 600 163e 3046     	2:  mov T0,TOS 
 601 1640 00F00700 	    and T0,#7 
 602 1644 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 164e 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1658 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 165a F0D0     	    beq 2b
 606 165c FA28     	    cmp T0,#KBD_ACK 
 607 165e F6D1     	    bne 3b  
 608 1660 57F8046B 	    _POP 
 609 1664 00F01CBD 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1668 0A160000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1678 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 167c 10F0010F 	    tst T0,#1
 619 1680 01D1     	    bne 1f 
 620 1682 00F00DBD 	    _NEXT 
 621 1686 47F8046D 	1: _PUSH 
 622 168a 6FF00101 	    mvn T1,#1 
 623 168e 00EA0100 	    and T0,T1 
 624 1692 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 1696 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 169a 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 16a2 6C160000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
ARM GAS  forth.s 			page 66


 633      542D4B45 
 633      5900
 634 16b0 504700BF 	    _NEST
 635 16b4 79160000 	1:  _ADR CAPS_LED  
 636 16b8 D5130000 	    _ADR PS2_QKEY 
 637 16bc 25250000 	    _ADR QDUP 
 638 16c0 5F220000 	    _QBRAN 1b  
 638      B4160000 
 639 16c8 A7200000 	    _UNNEST 
 640 16cc C6120000 	
 640      D4120000 
 640      340F0000 
 640      58100000 
 640      E80F0000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes 
  24              	**********************************/
  25              	
  26              	    PIN_F_SC = 4 
  27              	    PIN_SCK = 5 
  28              	    PIN_MISO = 6 
  29              	    PIN_MOSI = 7 
  30              	
  31              	/*****************************
  32              	  initialize SPI peripheral 
  33              	  pinout:
  34              	     PA4 F_CS 
  35              	     PA5 SCK 
  36              	     PA6 MISO 
  37              	     PA7 MOSI    
  38              	******************************/
  39              	flash_spi_init:
  40 16ec 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  40      C4F20200 
  41 16f4 0346     	    mov r3,r0 
  42 16f6 4FF00401 	    mov r1,#PIN_F_SC 
ARM GAS  forth.s 			page 67


  43 16fa 4FF00102 	    mov r2,#OUTPUT_PP
  44 16fe 00B5FEF7 	    _CALL gpio_config 
  44      17FE5DF8 
  44      04EB
  45 1708 1846     	    mov r0,r3 
  46 170a 4FF00401 	    mov r1,#PIN_F_SC  
  47 170e 4FF00102 	    MOV r2,#1
  48 1712 00B5FEF7 	    _CALL gpio_out 
  48      63FE5DF8 
  48      04EB
  49 171c 1846     	    mov r0,r3 
  50 171e 4FF00501 	    mov r1,#PIN_SCK  
  51 1722 4FF00202 	    mov r2,#OUTPUT_AFPP
  52 1726 00B5FEF7 	    _CALL gpio_config 
  52      03FE5DF8 
  52      04EB
  53 1730 1846     	    mov r0,r3 
  54 1732 4FF00701 	    mov r1,#PIN_MOSI 
  55 1736 4FF00202 	    mov r2,#OUTPUT_AFPP 
  56 173a 00B5FEF7 	    _CALL gpio_config 
  56      F9FD5DF8 
  56      04EB
  57 1744 1846     	    mov r0,r3
  58 1746 4FF00601 	    mov r1,#PIN_MISO
  59 174a 4FF00202 	    mov r2,#INPUT_AFO  
  60 174e 00B5FEF7 	    _CALL gpio_config
  60      EFFD5DF8 
  60      04EB
  61              	// PA5:7 at max speed 
  62 1758 4CF6AA40 	    mov r0,#0xCCAA
  63 175c 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  64 175e 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  64      C4F20200 
  65 1766 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  66 1768 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  67 176c 4164     	    str r1,[r0,#RCC_APB2ENR]
  68 176e 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  68      C4F20100 
  69 1776 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  70 177a 0180     	    strh r1,[r0,#SPI_CR1]
  71 177c 196A     	    ldr r1,[r3,#GPIO_AFRL]
  72 177e 80EA0000 	    eor r0,r0 
  73 1782 C5F25050 	    movt r0,#0x5550 
  74 1786 40EA0100 	    orr r0,r1 
  75 178a 1862     	    str r0,[r3,#GPIO_AFRL]
  76 178c 7047     	    _RET 
  77              	
  78              	
  79              	/**********************
  80              	    CHIP-SEL ( -- )
  81              	    drive F_SC low 
  82              	*********************/
  83 178e A6160000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  83      08434849 
  83      502D5345 
  83      4C00
  84 179c 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
ARM GAS  forth.s 			page 68


  84      C4F20200 
  85 17a4 4FF00401 	    mov r1,#PIN_F_SC 
  86 17a8 4FF00002 	    mov r2,#0 
  87 17ac 00B5FEF7 	    _CALL gpio_out 
  87      16FE5DF8 
  87      04EB
  88 17b6 00F073BC 	    _NEXT 
  89              	
  90              	
  91              	/*********************
  92              	    CHIP-DSEL 
  93              	    drive F_SC high 
  94              	*********************/
  95 17ba 92170000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  95      09434849 
  95      502D4453 
  95      454C
  96 17c8 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  96      C4F20100 
  97 17d0 0189     	1:  ldrh T1,[T0,#SPI_SR]
  98 17d2 11F0800F 	    tst T1,(1<<7) // BSY 
  99 17d6 FBD1     	    bne 1b 
 100 17d8 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 100      C4F20200 
 101 17e0 4FF00401 	    mov r1,#PIN_F_SC 
 102 17e4 4FF00102 	    mov r2,#1 
 103 17e8 00B5FEF7 	    _CALL gpio_out 
 103      F8FD5DF8 
 103      04EB
 104 17f2 00F055BC 	    _NEXT 
 105              	
 106              	
 107              	/****************************
 108              	    RD-BYTE ( -- )
 109              	    read flash byte 
 110              	***************************/
 111 17f6 BE170000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 111      0752442D 
 111      42595445 
 111      00BF
 112 1804 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 112      C4F20100 
 113 180c 0189     	0:  ldrh T1,[T0,#SPI_SR]
 114 180e 11F0020F 	    tst T1,#(1<<1) //TXE
 115 1812 FBD0     	    beq 0b 
 116 1814 6FF00001 	    mvn T1,#0 
 117 1818 0173     	    strb T1,[T0,#SPI_DR]
 118 181a 0189     	1:  ldrh T1,[T0,#SPI_SR]
 119 181c 11F0010F 	    tst T1,#(1<<0) // RXNE  
 120 1820 FBD0     	    beq 1b     
 121              	2:  
 122 1822 47F8046D 	    _PUSH 
 123 1826 067B     	    ldrb TOS,[T0,#SPI_DR]
 124 1828 00F03ABC 	    _NEXT 
 125              	
 126              	
 127              	/*********************************
ARM GAS  forth.s 			page 69


 128              	    WR-BYTE  ( c -- )
 129              	    write flash byte 
 130              	*************************/
 131 182c FA170000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 131      0757522D 
 131      42595445 
 132 1838 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 132      C4F20100 
 133 1840 0189     	0:  ldrh T1,[T0,#SPI_SR]
 134 1842 11F0020F 	    tst T1,#(1<<1) //TXE
 135 1846 FBD0     	    beq 0b 
 136 1848 0673     	    strb TOS,[T0,#SPI_DR]
 137 184a 0189     	1:  ldrh T1,[T0,#SPI_SR]
 138 184c 11F0010F 	    tst T1,#(1<<0) // RXNE  
 139 1850 FBD0     	    beq 1b 
 140 1852 8189     	    ldrh T1,[T0,#SPI_DR]
 141 1854 57F8046B 	    _POP 
 142 1858 00F022BC 	    _NEXT 
 143              	
 144              	/*************************
 145              	    WR-DIS ( -- )
 146              	    write disable 
 147              	    reset WEL bit 
 148              	*************************/
 149 185c 30180000 	    _HEADER WR_DIS,6,"WR-DIS"
 149      0657522D 
 149      44495300 
 150 1868 504700BF 	    _NEST 
 151 186c 9D170000 	    _ADR CHIP_SEL 
 152 1870 1F220000 	    _DOLIT 4
 152      04000000 
 153 1878 39180000 	    _ADR WR_BYTE
 154 187c C9170000 	    _ADR CHIP_DSEL
 155 1880 A7200000 	    _UNNEST
 156              	
 157              	/*************************
 158              	    WR-ENBL ( -- )
 159              	    set WEL flag in SR0 
 160              	************************/
 161 1884 60180000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 161      0757522D 
 161      454E424C 
 162 1890 504700BF 	    _NEST 
 163 1894 9D170000 	    _ADR CHIP_SEL 
 164 1898 1F220000 	    _DOLIT 6 
 164      06000000 
 165 18a0 39180000 	    _ADR WR_BYTE 
 166 18a4 C9170000 	    _ADR CHIP_DSEL 
 167 18a8 A7200000 	    _UNNEST 
 168              	
 169              	/********************************
 170              	    RD-SR ( n -- c )
 171              	    read status register  
 172              	********************************/
 173 18ac 88180000 	    _HEADER RD_SR,5,"RD-SR"
 173      0552442D 
 173      535200BF 
ARM GAS  forth.s 			page 70


 174 18b8 504700BF 	    _NEST
 175 18bc 9D170000 	    _ADR CHIP_SEL  
 176 18c0 1F220000 	    _DOLIT sr_cmd 
 176      E0180000 
 177 18c8 15240000 	    _ADR PLUS 
 178 18cc C5220000 	    _ADR CAT
 179 18d0 39180000 	    _ADR WR_BYTE
 180 18d4 05180000 	    _ADR RD_BYTE
 181 18d8 C9170000 	    _ADR CHIP_DSEL  
 182 18dc A7200000 	    _UNNEST 
 183 18e0 053515   	sr_cmd: .byte 5,0x35,0x15      
 184              	
 185              	/*********************************
 186              	    SEND-ADR ( a -- )
 187              	    send 24 bits address 
 188              	*******************************/
 189 18e3 B0180000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 189      0853454E 
 189      442D4144 
 189      52
 190 18f0 504700BF 	    _NEST 
 191 18f4 51230000 	    _ADR DUPP 
 192 18f8 1F220000 	    _DOLIT 16
 192      10000000 
 193 1900 ED230000 	    _ADR RSHIFT 
 194 1904 39180000 	    _ADR WR_BYTE 
 195 1908 51230000 	    _ADR DUPP
 196 190c 1F220000 	    _DOLIT 8 
 196      08000000 
 197 1914 ED230000 	    _ADR RSHIFT 
 198 1918 39180000 	    _ADR WR_BYTE 
 199 191c 39180000 	    _ADR WR_BYTE 
 200 1920 A7200000 	    _UNNEST 
 201              	
 202              	/**********************************
 203              	    WAIT-DONE ( -- )
 204              	    wait write operation completed 
 205              	**********************************/
 206 1924 E7180000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 206      09574149 
 206      542D444F 
 206      4E4500BF 
 207 1934 504700BF 	    _NEST 
 208 1938 1F220000 	1:  _DOLIT 0 
 208      00000000 
 209 1940 B9180000 	    _ADR RD_SR 
 210 1944 1F220000 	    _DOLIT 3 
 210      03000000 
 211 194c 95230000 	    _ADR ANDD 
 212 1950 5F220000 	    _QBRAN 2f
 212      60190000 
 213 1958 73220000 	    _BRAN 1b
 213      38190000 
 214 1960 A7200000 	2:  _UNNEST 
 215              	
 216              	
 217              	/****************************
ARM GAS  forth.s 			page 71


 218              	   ERASE-BLK ( a -- )
 219              	   erase 4Ko block  
 220              	***************************/
 221 1964 28190000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 221      09455241 
 221      53452D42 
 221      4C4B00BF 
 222 1974 504700BF 	    _NEST 
 223 1978 91180000 	    _ADR WR_ENBL
 224 197c 9D170000 	    _ADR CHIP_SEL 
 225 1980 1F220000 	    _DOLIT 0x20 
 225      20000000 
 226 1988 39180000 	    _ADR WR_BYTE 
 227 198c F1180000 	    _ADR SEND_ADR
 228 1990 C9170000 	    _ADR CHIP_DSEL 
 229 1994 35190000 	    _ADR WAIT_DONE 
 230 1998 A7200000 	    _UNNEST 
 231              	
 232              	/******************************
 233              	    ERASE-CHIP ( -- )
 234              	    erase all data 
 235              	******************************/
 236 199c 68190000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 236      0A455241 
 236      53452D43 
 236      48495000 
 237 19ac 504700BF 	    _NEST 
 238 19b0 91180000 	    _ADR WR_ENBL 
 239 19b4 9D170000 	    _ADR CHIP_SEL
 240 19b8 1F220000 	    _DOLIT 0x60
 240      60000000 
 241 19c0 1F220000 	    _DOLIT 0xC7 
 241      C7000000 
 242 19c8 39180000 	    _ADR WR_BYTE 
 243 19cc 39180000 	    _ADR WR_BYTE 
 244 19d0 C9170000 	    _ADR CHIP_DSEL 
 245 19d4 35190000 	    _ADR WAIT_DONE
 246 19d8 A7200000 	    _UNNEST 
 247              	
 248              	
 249              	/******************************
 250              	    RD-BLK ( buff n a --  )
 251              	    read n bytes in buff 
 252              	    starting at address a  
 253              	******************************/
 254 19dc A0190000 	    _HEADER RD_BLK,6,"RD-BLK"
 254      0652442D 
 254      424C4B00 
 255 19e8 504700BF 	    _NEST
 256 19ec 9D170000 	    _ADR CHIP_SEL 
 257 19f0 1F220000 	    _DOLIT 3 
 257      03000000 
 258 19f8 39180000 	    _ADR WR_BYTE 
 259 19fc F1180000 	    _ADR SEND_ADR
 260 1a00 F9220000 	    _ADR TOR   
 261 1a04 73220000 	    _BRAN 2f
 261      1C1A0000 
ARM GAS  forth.s 			page 72


 262 1a0c 05180000 	1:  _ADR RD_BYTE
 263 1a10 75230000 	    _ADR OVER 
 264 1a14 B1220000 	    _ADR CSTOR
 265 1a18 71240000 	    _ADR ONEP 
 266 1a1c 41220000 	2:  _DONXT 1b
 266      0C1A0000 
 267 1a24 41230000 	    _ADR DROP 
 268 1a28 C9170000 	    _ADR CHIP_DSEL 
 269 1a2c A7200000 	    _UNNEST 
 270              	
 271              	/*****************************
 272              	    WR-BLK ( buff n a -- )
 273              	    write up to 256 bytes 
 274              	    in erased flash
 275              	****************************/
 276 1a30 E0190000 	    _HEADER WR_BLK,6,"WR-BLK"
 276      0657522D 
 276      424C4B00 
 277 1a3c 504700BF 	    _NEST 
 278 1a40 91180000 	    _ADR WR_ENBL
 279 1a44 9D170000 	    _ADR CHIP_SEL
 280 1a48 1F220000 	    _DOLIT 2 
 280      02000000 
 281 1a50 39180000 	    _ADR WR_BYTE 
 282 1a54 F1180000 	    _ADR SEND_ADR
 283 1a58 F9220000 	    _ADR TOR
 284 1a5c 73220000 	    _BRAN 2f 
 284      7C1A0000 
 285 1a64 51230000 	1:  _ADR DUPP 
 286 1a68 C5220000 	    _ADR CAT 
 287 1a6c 51230000 	    _ADR DUPP 
 288 1a70 BD310000 	    _ADR HDOT
 289 1a74 39180000 	    _ADR WR_BYTE 
 290 1a78 71240000 	    _ADR ONEP
 291 1a7c 41220000 	2:  _DONXT 1b 
 291      641A0000 
 292 1a84 41230000 	    _ADR DROP
 293 1a88 C9170000 	    _ADR CHIP_DSEL
 294 1a8c 35190000 	    _ADR WAIT_DONE 
 295 1a90 A7200000 	    _UNNEST
 296              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  forth.s 			page 73


  17              	
  18              	***************************************************************************/
  19              	
  20              	/*==========================================================
  21              	    THE 'FLOATING POINT ARITHMETIC' ROUTINES
  22              	==========================================================*/
  23              	
  24              	/******************************************************
  25              	    Parsing float32 to IEEE-754 format is quite Complex
  26              	    so the original Jupiter ACE Z80 code 
  27              	    is adapted to this ARM-7M architecture.
  28              	    REF: docs/Jupiter-Ace-ROM.asm 
  29              	
  30              	    based on BCD  (binary Coded Decimal)
  31              	Format:
  32              	    bit 23:0  6 BCD digits mantissa
  33              	        mantissa range 0...999999 
  34              	    bit 30:24 exponent offset by 127 for exponent (decimal value)
  35              	        exponent range:  -127...127   128 value indicate out of range 
  36              	    bit 31    mantissa sign 
  37              	
  38              	    ** Floating point words: 
  39              	    REF: docs/JA-Ace4000-Manual-First-US-Edition.pdf, chapter 15
  40              	    F+, F-, F*, F/, 
  41              	    FNEGATE, INT, UFLOAT, F. 
  42              	*******************************************************/    
  43              	
  44              	    MAX_MANTISSA = 0xffffff // biggest mantissa 
  45              	
  46              	/*****************************************************************************
  47              	    PREP_FP  
  48              	    prepare floating point
  49              	    work space 
  50              	
  51              	; ( f1, f2 -- m1, m2 )
  52              	; -> from add/mult/div
  53              	; Entered with two floating point numbers on the stack.
  54              	; The exponents are stored in the first two bytes of FP_WS and the third byte
  55              	; is loaded with the manipulated result sign.
  56              	; the two exponent locations on the Data Stack are blanked leaving just the
  57              	; binary coded mantissas.
  58              	*******************************************************************************/
  59              	PREP_FP:
  60 1a94 D4F8A000 	    ldr T0,[UP,#FP_WS] // float work space pointer 
  61              	// clear first 16 bytes of 19 bytes array 
  62 1a98 4FF00401 	    mov T1,#4 
  63 1a9c 82EA0202 	    eor T2,T2 
  64 1aa0 40F8042B 	1:  str T2,[T0],#4
  65 1aa4 0139     	    subs T1,#1
  66 1aa6 FBD1     	    bne 1b 
  67 1aa8 2262     	    str T2,[UP,#TMP] // clear tmp variable (SPARE)
  68              	
  69 1aaa 7047     	    _RET 
  70              	
  71              	/***********************
  72              	  digit_add  
  73              	 add 2 BCD digits 
ARM GAS  forth.s 			page 74


  74              	 input:
  75              	    T0  first digit
  76              	    T1  second digit 
  77              	    T2  carry 
  78              	 output:
  79              	    T0  sump
  80              	    T2  carry 
  81              	***********************/ 
  82              	    .type add_digit, %function
  83              	digit_add:
  84 1aac 1044     	    add T0,T2 
  85 1aae 0844     	    add T0,T1 
  86 1ab0 0A28     	    cmp T0,#10
  87 1ab2 01D4     	    bmi 1f 
  88 1ab4 00F10600 	    add T0,#6 
  89 1ab8 4FEA1012 	1:  lsr T2,T0,#4 
  90 1abc 00F00F00 	    and T0,#15
  91 1ac0 7047     	    _RET 
  92              	
  93              	/*********************************
  94              	    digit_sub 
  95              	    substract T0-BORROW-T1 
  96              	  input:
  97              	        T0  first digit 
  98              	        T1  second digit 
  99              	        T2  borrow 
 100              	  output:
 101              	        T0  substraction 
 102              	        T2  borrow 
 103              	*********************************/
 104              	digit_sub:
 105 1ac2 3AB1     	    cbz T2,1f
 106 1ac4 801A     	    subs T0,T2 
 107 1ac6 82EA0202 	    eor T2,T2 
 108 1aca 03D5     	    bpl 1f 
 109 1acc 00F10A00 	    add T0,#10  
 110 1ad0 4FF00102 	    mov T2,#1 
 111 1ad4 401A     	1:  subs T0,T1 
 112 1ad6 05D5     	    bpl 3f
 113 1ad8 00F10A00 	    add T0,#10
 114 1adc 00F00F00 	    and T0,#15 
 115 1ae0 4FF00102 	    mov T2,#1
 116 1ae4 7047     	3:  _RET 
 117              	
 118              	/**********************************
 119              	    digit_prod 
 120              	    multiply 2 BCD digits 
 121              	    input:
 122              	        T0 first digit 
 123              	        T1 second digit 
 124              	    output:
 125              	        T0  prod low digit 
 126              	        T1  prod high digit 
 127              	***********************************/
 128              	digit_prod:
 129 1ae6 01FB00F0 	    mul T0,T1 
 130 1aea 4FF00A01 	    mov T1,#10 
ARM GAS  forth.s 			page 75


 131 1aee B0FBF1F2 	    udiv T2,T0,T1 
 132 1af2 01FB02F1 	    mul T1,T1,T2 
 133 1af6 A0EB0100 	    sub T0,T1
 134 1afa 1146     	    mov T1,T2  
 135 1afc 7047     	    _RET 
 136              	
 137              	/****************************************
 138              	    BCD+  ( bcd1 bcd2 carry -- sum carry )
 139              	    sum=bcd1+bcd2+carry 
 140              	    bcd are 8 digits packed in 32 bits   
 141              	*****************************************/
 142 1afe 341A0000 	    _HEADER BCD_ADD,4,"BCD+"
 142      04424344 
 142      2B00
 143 1b08 83EA0303 	    eor T3,T3 // bit shift  
 144 1b0c 85EA0505 	    eor WP,WP // sum   
 145 1b10 3246     	    mov T2,TOS
 146 1b12 57F8046B 	    _POP   
 147 1b16 3868     	1:  ldr T0,[DSP]
 148 1b18 20FA03F0 	    lsr T0,T3 
 149 1b1c 00F00F00 	    and T0,#15
 150 1b20 26FA03F1 	    lsr T1,TOS,T3 
 151 1b24 01F00F01 	    and T1,#15
 152 1b28 FFF7C0FF 	    bl digit_add 
 153 1b2c 00FA03F0 	    lsl T0,T3 
 154 1b30 45EA0005 	    orr WP,T0 
 155 1b34 03F10403 	    add T3,#4 
 156 1b38 202B     	    cmp T3,#32 
 157 1b3a ECD4     	    bmi 1b 
 158 1b3c 3D60     	    str WP,[DSP]
 159 1b3e 1646     	    mov TOS,T2 
 160 1b40 AEE2     	    _NEXT 
 161              	
 162              	
 163              	/********************************************
 164              	    BCD- ( bcd1 bcd2 borrow -- diff borrow )
 165              	    diff=bcd1-borrow-bcd2 
 166              	********************************************/
 167 1b42 021B0000 	    _HEADER BCD_SUB,4,"BCD-"
 167      04424344 
 167      2D00
 168 1b4c 83EA0303 	    eor T3,T3 // bit shift 
 169 1b50 85EA0505 	    eor WP,WP
 170 1b54 3246     	    mov T2,TOS 
 171 1b56 57F8046B 	    _POP 
 172 1b5a 3868     	1:  ldr T0,[DSP]
 173 1b5c 20FA03F0 	    lsr T0,T3 
 174 1b60 00F00F00 	    and T0,#15 
 175 1b64 26FA03F1 	    lsr T1,TOS,T3
 176 1b68 01F00F01 	    and T1,#15 
 177 1b6c FFF7A9FF 	    bl digit_sub
 178 1b70 00FA03F0 	    lsl T0,T3 
 179 1b74 45EA0005 	    orr WP,T0 
 180 1b78 03F10403 	    add T3,#4 
 181 1b7c 202B     	    cmp T3,#32 
 182 1b7e ECD4     	    bmi 1b 
 183 1b80 3D60     	    str WP,[DSP]
ARM GAS  forth.s 			page 76


 184 1b82 1646     	    mov TOS,T2 
 185 1b84 8CE2     	    _NEXT 
 186              	
 187              	
 188              	/*********************************
 189              	    BCD1+ ( bcd -- bcd+1 carry )
 190              	    increment bcd integer 
 191              	*********************************/
 192 1b86 461B0000 	    _HEADER BCD_1P,5,"BCD1+"
 192      05424344 
 192      312B
 193 1b90 83EA0303 	    eor T3,T3 
 194 1b94 3546     	    mov WP,TOS 
 195 1b96 4FF00F00 	    mov T0,#15 
 196 1b9a 00FA03F1 	1:  lsl T1,T0,T3 
 197 1b9e 6FEA0101 	    mvn T1,T1 
 198 1ba2 05EA0105 	    and WP,T1 
 199 1ba6 26FA03F1 	    lsr T1,TOS,T3
 200 1baa 01F00F01 	    and T1,#15 
 201 1bae 01F10101 	    add T1,#1 
 202 1bb2 0A29     	    cmp T1,#10 
 203 1bb4 01D4     	    bmi 2f 
 204 1bb6 01F10601 	    add T1,#6 
 205 1bba 4FEA1112 	2:  lsr T2,T1,#4 
 206 1bbe 01F00F01 	    and T1,#15 
 207 1bc2 01FA03F1 	    lsl T1,T3 
 208 1bc6 45EA0105 	    orr WP,T1
 209 1bca 1AB1     	    cbz T2,3f 
 210 1bcc 03F10403 	    add T3,#4 
 211 1bd0 202B     	    cmp T3,#32 
 212 1bd2 E2D4     	    bmi 1b 
 213 1bd4 47F8045D 	3:  str WP,[DSP,#-4]! 
 214 1bd8 1646     	    mov TOS,T2 
 215 1bda 61E2     	    _NEXT     
 216              	
 217              	/*******************************
 218              	    BCD-NEG ( bcd -- - bcd carry )
 219              	    BCD ten's complement 
 220              	*******************************/
 221 1bdc 8A1B0000 	    _HEADER BCD_NEG,7,"BCD-NEG"
 221      07424344 
 221      2D4E4547 
 222 1be8 49F69915 	    _MOV32 WP,0x99999999
 222      C9F69915 
 223 1bf0 C6EB0506 	1:  rsb TOS,WP  
 224 1bf4 CCE7     	    b BCD_1P 
 225              	
 226              	
 227              	/*****************************************
 228              	    BCD* ( bcd1 bcd2 -- prod_low prod_hi )
 229              	    multiply 2 bcd numbers 
 230              	    return 16 digits products 
 231              	*****************************************/
 232 1bf6 E01B0000 	    _HEADER BCD_STAR,4,"BCD*"
 232      04424344 
 232      2A00
 233              	
ARM GAS  forth.s 			page 77


 234 1c00 4EE2     	    _NEXT 
 235              	
 236              	/**********************************
 237              	    BCD>BIN ( bcd sign -- binary )
 238              	    convert bcd number to binary 
 239              	**********************************/
 240 1c02 FA1B0000 	    _HEADER BCD_BIN,7,"BCD>BIN"
 240      07424344 
 240      3E42494E 
 240      00BF
 241 1c10 40B4     	    push {TOS}
 242 1c12 57F8046B 	    _POP 
 243 1c16 85EA0505 	    eor WP,WP 
 244 1c1a 4FF00A01 	    mov T1,#10 
 245 1c1e 4FF01C03 	    mov T3,#28 
 246 1c22 01FB05F5 	1:  mul WP,T1 
 247 1c26 26FA03F2 	    lsr T2,TOS,T3 
 248 1c2a 02F00F02 	    and T2,#15 
 249 1c2e 1544     	    add WP,T2 
 250 1c30 043B     	    subs T3,#4 
 251 1c32 F6D5     	    bpl 1b
 252 1c34 2E46     	    mov TOS,WP
 253 1c36 01BC     	    pop {T0}
 254 1c38 08B1     	    cbz T0,4f
 255 1c3a C6F10006 	    rsb TOS,#0 
 256 1c3e 2FE2     	4:  _NEXT 
 257              	
 258              	/**********************************
 259              	    BIN>BCD ( int -- bcd sign )
 260              	    convert bcd number to binary 
 261              	**********************************/
 262 1c40 061C0000 	    _HEADER BIN_BCD,7,"BIN>BCD"
 262      0742494E 
 262      3E424344 
 263 1c4c 3046     	    mov T0,TOS 
 264 1c4e 47F8046D 	    _PUSH
 265 1c52 86EA0606 	    eor TOS,TOS // sign  
 266 1c56 10F0004F 	    tst T0,#(1<<31)
 267 1c5a 03D0     	    beq 1f 
 268 1c5c 6FEA0606 	    mvn TOS,TOS // negative 
 269 1c60 C0F10000 	    rsb T0,#0 // 2's complement 
 270 1c64 4FF00A01 	1:  mov T1,#10
 271 1c68 85EA0505 	    eor WP,WP 
 272 1c6c 83EA0303 	    eor T3,T3 
 273 1c70 78B1     	2:  cbz T0,3f 
 274 1c72 B0FBF1F2 	    udiv T2,T0,T1    
 275 1c76 04B4     	    push {T2}
 276 1c78 01FB02F2 	    mul T2,T1 
 277 1c7c C2EB0002 	    rsb T2,T0 
 278 1c80 01BC     	    pop {T0}
 279 1c82 02FA03F2 	    lsl T2,T3 
 280 1c86 45EA0205 	    orr WP,T2 
 281 1c8a 03F10403 	    add T3,#4 
 282 1c8e 202B     	    cmp T3,#32 
 283 1c90 EED1     	    bne 2b 
 284 1c92 3D60     	3:  str WP,[DSP]
 285 1c94 04E2     	    _NEXT 
ARM GAS  forth.s 			page 78


 286              	
 287              	/*******************************
 288              	    F+ ( f1 f2 -- f1+f2 )
 289              	    add 2 float 
 290              	*******************************/
 291 1c96 441C0000 	    _HEADER FPLUS,2,"F+"
 291      02462B00 
 291      00BF
 292 1ca0 504700BF 	    _NEST 
 293              	
 294 1ca4 A7200000 	    _UNNEST 
 295              	
 296              	/*******************************
 297              	    F- ( f1 f2 -- f1-f2 )
 298              	    substract 2 float 
 299              	*******************************/
 300 1ca8 9A1C0000 	    _HEADER FMINUS,2,"F-"
 300      02462D00 
 301 1cb0 504700BF 	    _NEST 
 302              	
 303 1cb4 A7200000 	    _UNNEST 
 304              	
 305              	/*******************************
 306              	    F* ( f1 f2 -- f1*f2 )
 307              	    multiply 2 float 
 308              	******************************/
 309              	
 310              	/*******************************
 311              	    F/ ( f1 f2 -- f1/f2 )
 312              	    divide f1 by f2 
 313              	*******************************/
 314 1cb8 AC1C0000 	    _HEADER FSLH,2,"F/"
 314      02462F00 
 315 1cc0 504700BF 	    _NEST 
 316              	
 317 1cc4 A7200000 	    _UNNEST 
 318              	
 319              	
 320              	/********************************
 321              	    FNEGATE ( f -- -f )
 322              	    negate floating point 
 323              	********************************/
 324 1cc8 BC1C0000 	    _HEADER FNEG,7,"FNEGATE"
 324      07464E45 
 324      47415445 
 325 1cd4 504700BF 	    _NEST 
 326              	
 327 1cd8 A7200000 	    _UNNEST 
 328              	
 329              	/*******************************
 330              	    INT ( f -- n )
 331              	    convert float to integer 
 332              	*******************************/
 333 1cdc CC1C0000 	    _HEADER INT,3,"INT"
 333      03494E54 
 334 1ce4 504700BF 	    _NEST 
 335              	
ARM GAS  forth.s 			page 79


 336 1ce8 A7200000 	    _UNNEST 
 337              	
 338              	/*******************************
 339              	    UFLOAT ( n -- f )
 340              	    convert integer to float 
 341              	*******************************/
 342 1cec E01C0000 	    _HEADER UFLOAT,6,"UFLOAT"
 342      0655464C 
 342      4F415400 
 343 1cf8 504700BF 	    _NEST 
 344              	
 345 1cfc A7200000 	    _UNNEST 
 346              	
 347              	/*******************************
 348              	    F. ( f -- )
 349              	    print float
 350              	*******************************/
 351 1d00 F01C0000 	    _HEADER FDOT,2,"F."
 351      02462E00 
 352 1d08 504700BF 	    _NEST
 353              	
 354 1d0c A7200000 	    _UNNEST 
 355              	
 356              	
 357              	// accumulate digits 
 358              	// ( n a+ c -- n+ a+ c- )
 359              	ACCUM_DIGITS:
 360 1d10 504700BF 	    _NEST 
 361 1d14 F9220000 	    _ADR TOR 
 362 1d18 73220000 	    _BRAN 4f 
 362      501D0000 
 363 1d20 ED260000 	1:  _ADR COUNT 
 364 1d24 1F220000 	    _DOLIT 10  // n a+ char 10 
 364      0A000000 
 365 1d2c 112E0000 	    _ADR DIGTQ
 366 1d30 5F220000 	    _QBRAN 6f
 366      701D0000 
 367 1d38 39250000 	    _ADR ROT 
 368 1d3c 1F220000 	    _DOLIT 10 
 368      0A000000 
 369 1d44 35240000 	    _ADR STAR 
 370 1d48 15240000 	    _ADR PLUS 
 371 1d4c 61230000 	    _ADR SWAP // n a+  
 372 1d50 D1220000 	4:  _ADR RFROM  
 373 1d54 51230000 	    _ADR DUPP 
 374 1d58 5F220000 	    _QBRAN 9f 
 374      8C1D0000 
 375 1d60 81240000 	    _ADR ONEM 
 376 1d64 F9220000 	    _ADR TOR
 377 1d68 73220000 	    _BRAN 1b 
 377      201D0000 
 378 1d70 41230000 	6:  _ADR DROP 
 379 1d74 81240000 	    _ADR ONEM
 380 1d78 D1220000 	    _ADR RFROM
 381 1d7c 51230000 	    _ADR DUPP  
 382 1d80 5F220000 	    _QBRAN 9f 
 382      8C1D0000 
ARM GAS  forth.s 			page 80


 383 1d88 71240000 	    _ADR ONEP      
 384 1d8c A7200000 	9:  _UNNEST 
 385              	
 386              	// parse mantissa
 387              	//  ( a c -- dcnt m a+ c- ) 
 388              	MANTISSA:
 389 1d90 504700BF 	    _NEST
 390 1d94 75230000 	    _ADR OVER 
 391 1d98 F9220000 	    _ADR TOR  
 392 1d9c 1F220000 	    _DOLIT 0 
 392      00000000 
 393 1da4 4D250000 	    _ADR NROT 
 394 1da8 111D0000 	    _ADR ACCUM_DIGITS
 395 1dac 61230000 	    _ADR SWAP  // m c- a+ 
 396 1db0 51230000 	    _ADR DUPP  
 397 1db4 D1220000 	    _ADR RFROM // m c- a+ a+ a 
 398 1db8 25240000 	    _ADR  SUBB // m c- a+ dcnt 
 399 1dbc 4D250000 	    _ADR NROT // m dcnt c- a+ 
 400 1dc0 61230000 	    _ADR SWAP // m dcnt a+ c-
 401 1dc4 F9220000 	    _ADR TOR  // m dcnt a+ R: c- 
 402 1dc8 61230000 	    _ADR SWAP // m a+ dcnt 
 403 1dcc 4D250000 	    _ADR NROT // dcnt m a+ 
 404 1dd0 D1220000 	    _ADR RFROM // dcnt m a+ c-  
 405 1dd4 A7200000 	    _UNNEST 
 406              	
 407              	//parse exponent
 408              	// ( a c -- e esign a+ c- ) 
 409              	EXPONENT:
 410 1dd8 504700BF 	    _NEST 
 411 1ddc BD2E0000 	    _ADR DASHQ 
 412 1de0 F9220000 	    _ADR TOR  // a c R: esign 
 413 1de4 1F220000 	    _DOLIT 0 
 413      00000000 
 414 1dec 4D250000 	    _ADR NROT 
 415 1df0 111D0000 	    _ADR ACCUM_DIGITS 
 416 1df4 D1220000 	    _ADR RFROM 
 417 1df8 4D250000 	    _ADR NROT // e esign a+ c- 
 418 1dfc A7200000 	    _UNNEST 
 419              	
 420              	// build float
 421              	//  ( dcnt m e esign msign -- float ) 
 422              	FORMAT_FLOAT:
 423 1e00 504700BF 	    _NEST 
 424 1e04 1F220000 	    _DOLIT (1<<31)
 424      00000080 
 425 1e0c 95230000 	    _ADR ANDD 
 426 1e10 61230000 	    _ADR SWAP 
 427 1e14 1F220000 	    _DOLIT (1<<30)
 427      00000040 
 428 1e1c BD230000 	    _ADR XORR  
 429 1e20 A9230000 	    _ADR ORR  // dcnt m e sign 
 430 1e24 39250000 	    _ADR ROT  // dcnt e sign m 
 431 1e28 51230000 	    _ADR DUPP 
 432 1e2c 5F220000 	    _QBRAN 2f // mantissa = 0 
 432      6C1E0000 
 433 1e34 F9220000 	    _ADR TOR // dcnt e sign R:  mantissa 
 434 1e38 4D250000 	    _ADR NROT 
ARM GAS  forth.s 			page 81


 435 1e3c 15240000 	    _ADR PLUS // sign e R: mantissa  
 436 1e40 1F220000 	    _DOLIT 64 
 436      40000000 
 437 1e48 15240000 	    _ADR PLUS 
 438 1e4c 1F220000 	    _DOLIT 24 
 438      18000000 
 439 1e54 05240000 	    _ADR LSHIFT 
 440 1e58 D1220000 	    _ADR RFROM 
 441 1e5c 811E0000 	    _ADR BOUND_MANTISSA
 442 1e60 A9230000 	    _ADR ORR 
 443 1e64 73220000 	    _BRAN 9f
 443      7C1E0000 
 444 1e6c F9220000 	2:  _ADR TOR // 
 445 1e70 61250000 	    _ADR DDROP 
 446 1e74 41230000 	    _ADR DROP 
 447 1e78 D1220000 	    _ADR RFROM 
 448 1e7c A7200000 	9:  _UNNEST 
 449              	
 450              	
 451              	// bound mantissa
 452              	//  0xfffff < m <= MAX_MANTISSA
 453              	//  ( e m1 -- e m2 )
 454              	BOUND_MANTISSA:
 455 1e80 504700BF 	    _NEST
 456 1e84 51230000 	    _ADR DUPP 
 457 1e88 1F220000 	    _DOLIT MAX_MANTISSA
 457      FFFFFF00 
 458 1e90 4D260000 	    _ADR UGREAT  
 459 1e94 5F220000 	    _QBRAN SCALE_UP
 459      CC1E0000 
 460              	// to much digits 
 461              	// scale down  
 462 1e9c 51230000 	1:  _ADR DUPP 
 463 1ea0 1F220000 	    _DOLIT MAX_MANTISSA 
 463      FFFFFF00 
 464 1ea8 4D260000 	    _ADR UGREAT 
 465 1eac 5F220000 	    _QBRAN 2f 
 465      C81E0000 
 466 1eb4 1F220000 	    _DOLIT 10 
 466      0A000000 
 467 1ebc B1290000 	    _ADR SLASH 
 468 1ec0 73220000 	    _BRAN 1b
 468      9C1E0000 
 469 1ec8 A7200000 	2:  _UNNEST 
 470              	SCALE_UP:
 471 1ecc 51230000 	    _ADR DUPP 
 472 1ed0 1F220000 	    _DOLIT 0xff0000
 472      0000FF00 
 473 1ed8 95230000 	    _ADR ANDD 
 474 1edc B9250000 	    _ADR INVER
 475 1ee0 5F220000 	    _QBRAN 9f
 475      041F0000 
 476 1ee8 1F220000 	    _DOLIT 10 
 476      0A000000 
 477 1ef0 35240000 	    _ADR STAR 
 478 1ef4 61230000 	    _ADR SWAP 
 479 1ef8 81240000 	    _ADR ONEM
ARM GAS  forth.s 			page 82


 480 1efc 73220000 	    _BRAN 1b 
 480      9C1E0000 
 481 1f04 A7200000 	9:  _UNNEST 
 482              	
 483              	
 484              	/*******************************
 485              	    FLOAT? ( a -- f -1 | a 0 )
 486              	    parse floating point 
 487              	*******************************/
 488 1f08 041D0000 	    _HEADER FLOATQ,6,"FLOAT?"
 488      06464C4F 
 488      41543F00 
 489 1f14 504700BF 	    _NEST
 490 1f18 85270000 	    _ADR BASE 
 491 1f1c A5220000 	    _ADR AT 
 492 1f20 F9220000 	    _ADR TOR
 493 1f24 ED2D0000 	    _ADR DECIM 
 494 1f28 1F220000 	    _DOLIT 0
 494      00000000 
 495 1f30 75230000 	    _ADR OVER   // a 0 a  
 496 1f34 ED260000 	    _ADR COUNT  // a 0 a+ c 
 497 1f38 BD2E0000 	    _ADR DASHQ  // negative sign? 
 498 1f3c F9220000 	    _ADR TOR   // a 0 a+ c- R: base msign   
 499 1f40 911D0000 	    _ADR MANTISSA // a 0 dcnt m a+ c- 
 500 1f44 75230000 	    _ADR OVER 
 501 1f48 C5220000 	    _ADR CAT
 502 1f4c 51230000 	    _ADR DUPP  
 503 1f50 1F220000 	    _DOLIT '.' 
 503      2E000000 
 504 1f58 BD230000 	    _ADR XORR 
 505 1f5c 5F220000 	    _QBRAN 1f 
 505      901F0000 
 506 1f64 1F220000 	    _DOLIT 'E' 
 506      45000000 
 507 1f6c BD230000 	    _ADR XORR 
 508 1f70 5F220000 	    _QBRAN 2f
 508      E41F0000 
 509              	// format error 
 510 1f78 5B250000 	0:  _ADR _DDROP // -- a 0 dcnt m 
 511 1f7c 5B250000 	    _ADR _DDROP // -- a 0
 512 1f80 D1220000 	    _ADR RFROM 
 513 1f84 41230000 	    _ADR DROP 
 514 1f88 73220000 	    _BRAN 9f  
 514      5C200000 
 515 1f90 41230000 	1:  _ADR DROP
 516 1f94 81240000 	    _ADR ONEM
 517 1f98 61230000 	    _ADR SWAP 
 518 1f9c 71240000 	    _ADR ONEP 
 519 1fa0 61230000 	    _ADR SWAP
 520 1fa4 BD420000 	_ADR TRACE 
 521 1fa8 111D0000 	    _ADR ACCUM_DIGITS // a 0 dcnt m a+ c-
 522 1fac BD420000 	_ADR TRACE 
 523 1fb0 75230000 	    _ADR OVER 
 524 1fb4 C5220000 	    _ADR CAT 
 525 1fb8 51230000 	    _ADR DUPP 
 526 1fbc 1F220000 	    _DOLIT '.' 
 526      2E000000 
ARM GAS  forth.s 			page 83


 527 1fc4 05260000 	    _ADR EQUAL 
 528 1fc8 5F220000 	    _QBRAN 2f
 528      E41F0000 
 529 1fd0 41230000 	    _ADR DROP 
 530 1fd4 1F220000 	    _DOLIT 0 
 530      00000000 
 531 1fdc 73220000 	    _BRAN 3f 
 531      34200000 
 532 1fe4 1F220000 	2:  _DOLIT 'E'
 532      45000000 
 533 1fec BD230000 	    _ADR XORR 
 534 1ff0 5F220000 	    _QBRAN 2f
 534      1C200000 
 535 1ff8 51230000 	    _ADR DUPP 
 536 1ffc F1250000 	    _ADR ZEQUAL 
 537 2000 5F220000 	    _QBRAN 0b 
 537      781F0000 
 538 2008 1F220000 	    _DOLIT 0
 538      00000000 
 539 2010 39250000 	    _ADR ROT 
 540 2014 73220000 	    _BRAN 3f  
 540      34200000 
 541 201c D91D0000 	2:  _ADR EXPONENT // a 0 dcnt m e esign a+ c- 
 542 2020 5F220000 	    _QBRAN 3f   // if not char left ok 
 542      34200000 
 543 2028 61250000 	    _ADR DDROP 
 544 202c 73220000 	    _BRAN 0b
 544      781F0000 
 545 2034 BD420000 	3: _ADR TRACE   
 546 2038 41230000 	    _ADR DROP // a 0 dcnt m e esign 
 547 203c D1220000 	    _ADR RFROM // a 0 dcnt m e esign msign 
 548 2040 BD420000 	_ADR TRACE 
 549 2044 011E0000 	    _ADR FORMAT_FLOAT
 550 2048 BD420000 	_ADR TRACE 
 551 204c 4D250000 	    _ADR NROT 
 552 2050 61250000 	    _ADR DDROP 
 553 2054 1F220000 	    _DOLIT -2 
 553      FEFFFFFF 
 554 205c D1220000 	9:  _ADR RFROM 
 555 2060 85270000 	    _ADR BASE 
 556 2064 91220000 	    _ADR STORE     
 557 2068 A7200000 	    _UNNEST    
 558              	
 559              	/********************************
 560              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 561              	    parse number, integer or float 
 562              	    if not a number return ( a 0 ) 
 563              	    if integer return ( int -1 ) 
 564              	    if float return ( float -2 )
 565              	**********************************/
 566 206c 0C1F0000 	    _HEADER NUMBER,6,"NUMBER"
 566      064E554D 
 566      42455200 
 567 2078 504700BF 	    _NEST 
 568 207c ED2E0000 	    _ADR INTQ
 569 2080 25250000 	    _ADR QDUP 
 570 2084 5F220000 	    _QBRAN 2f 
ARM GAS  forth.s 			page 84


 570      90200000 
 571 208c A7200000 	    _UNNEST 
 572 2090 151F0000 	2:  _ADR FLOATQ
 573 2094 A7200000 	    _UNNEST 
 574              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
ARM GAS  forth.s 			page 85


  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu softvfp  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2098 48F804CD 		STMFD	RSP!,{IP}
  85 209c 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 20a0 5CF8045B 		LDR WP,[IP],#4 
  89 20a4 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 20a6 58F804CB 		LDMFD RSP!,{IP}
  92 20aa 5CF8045B 		LDR WP,[IP],#4 
  93 20ae 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 20b0 04F14401 		add T1,UP,#USER_CTOP 
 105 20b4 0968     		ldr T1,[T1]
 106 20b6 44F25072 		mov T2,#0x4700+(10<<3)
 107 20ba 21F8022B 		strh T2,[T1],#2
 108 20be 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 20c2 21F8022B 		strh T2,[T1],#2 
ARM GAS  forth.s 			page 86


 110 20c6 04F14402 		add T2,UP,#USER_CTOP 
 111 20ca 1160     		str T1,[T2]
 112 20cc E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 20ce 47F8046D 		_PUSH 
 118 20d2 04F11406 		ADD TOS,UP,#STDIN 
 119 20d6 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 20d8 47F8046D 		_PUSH 
 125 20dc 04F11806 		ADD TOS,UP,#STDOUT
 126 20e0 DEE7     		_NEXT 
 127              		
 128              	/********************************************
 129              		KEY? ( -- c T | F )
 130              		check if available character 
 131              	********************************************/
 132 20e2 70200000 		_HEADER QKEY,4,"KEY?" 
 132      044B4559 
 132      3F00
 133 20ec 504700BF 		_NEST 
 134 20f0 CF200000 		_ADR TSTDIN // ' STDIN 
 135 20f4 152B0000 		_ADR ATEXE
 136 20f8 A7200000 		_UNNEST 
 137              	
 138              	/********************************************
 139              	    KEY	 ( -- c )
 140              	 	Wait for and return an input character.
 141              	********************************************/
 142 20fc E6200000 		_HEADER KEY,3,"KEY"
 142      034B4559 
 143 2104 504700BF 		_NEST
 144              	KEY1:
 145 2108 79160000 		_ADR CAPS_LED 
 146 210c ED200000 		_ADR	QKEY 
 147 2110 5F220000 		_QBRAN	KEY1
 147      08210000 
 148 2118 A7200000 		_UNNEST
 149              	
 150              	/**********************************************
 151              		EMIT ( c -- )
 152              		transmit a character to console 
 153              	**********************************************/
 154 211c 00210000 		_HEADER EMIT,4,"EMIT"
 154      04454D49 
 154      540000BF 
 155 2128 504700BF 		_NEST 
 156 212c D9200000 		_ADR TSTDOUT 
 157 2130 152B0000 		_ADR ATEXE 
 158 2134 A7200000 		_UNNEST 
 159              	
 160              	
ARM GAS  forth.s 			page 87


 161              	/************************************************
 162              	 GET-IP ( n - c )
 163              	 return interrupt priority of IRQn 
 164              	************************************************/
 165              	/*
 166              		_HEADER GETIP,6,"GET-IP" 
 167              		_NEST 
 168              		_ADR DUPP 
 169              		_ADR ZLESS
 170              		_QBRAN 1f 
 171              		_DOLIT 15
 172              		_ADR ANDD
 173              		_DOLIT 4
 174              		_ADR SUBB  
 175              		_DOLIT 0xE000ED18 
 176              		_BRAN 2f 
 177              	1:	_DOLIT 0xE000E400 
 178              	2:	_ADR PLUS 
 179              		_ADR CAT
 180              		_DOLIT 4 
 181              		_ADR RSHIFT 
 182              		_UNNEST 
 183              	*/
 184              	
 185              	/***********************************************
 186              	 RANDOM ( n+ -- {0..n+ - 1} )
 187              	 return pseudo random number 
 188              	 REF: https://en.wikipedia.org/wiki/Xorshift
 189              	************************************************/
 190 2138 20210000 		_HEADER RAND,6,"RANDOM"
 190      0652414E 
 190      444F4D00 
 191 2144 504700BF 		_NEST
 192 2148 DD250000 		_ADR ABSS   
 193 214c 35270000 		_ADR SEED 
 194 2150 A5220000 		_ADR AT 
 195 2154 51230000 		_ADR DUPP 
 196 2158 1F220000 		_DOLIT 13
 196      0D000000 
 197 2160 05240000 		_ADR LSHIFT 
 198 2164 BD230000 		_ADR XORR  
 199 2168 51230000 		_ADR DUPP 
 200 216c 1F220000 		_DOLIT 17 
 200      11000000 
 201 2174 ED230000 		_ADR RSHIFT 
 202 2178 BD230000 		_ADR XORR 
 203 217c 51230000 		_ADR DUPP
 204 2180 1F220000 		_DOLIT 5 
 204      05000000 
 205 2188 05240000 		_ADR LSHIFT 
 206 218c BD230000 		_ADR XORR  
 207 2190 51230000 		_ADR DUPP 
 208 2194 35270000 		_ADR SEED 
 209 2198 91220000 		_ADR STORE 
 210 219c 1F220000 		_DOLIT 0x7FFFFFFF
 210      FFFFFF7F 
 211 21a4 95230000 		_ADR ANDD 
ARM GAS  forth.s 			page 88


 212 21a8 61230000 		_ADR SWAP 
 213 21ac 99290000 		_ADR MODD 
 214 21b0 A7200000 		_UNNEST 
 215              	
 216              	
 217              	/****************************************
 218              	 PAUSE ( u -- ) 
 219              	 suspend execution for u milliseconds
 220              	****************************************/
 221 21b4 3C210000 		_HEADER PAUSE,5,"PAUSE"
 221      05504155 
 221      534500BF 
 222 21c0 504700BF 		_NEST 
 223 21c4 5D270000 		_ADR TIMER 
 224 21c8 91220000 		_ADR STORE 
 225              	PAUSE_LOOP:
 226 21cc 5D270000 		_ADR TIMER 
 227 21d0 A5220000 		_ADR AT 
 228 21d4 5F220000 		_QBRAN PAUSE_EXIT 
 228      E4210000 
 229 21dc 73220000 		_BRAN PAUSE_LOOP 
 229      CC210000 
 230              	PAUSE_EXIT: 		
 231 21e4 A7200000 		_UNNEST 
 232              	
 233              	/******************************************
 234              	  ULED ( T|F -- )
 235              	  control user LED, -1 ON, 0 OFF 
 236              	*******************************************/
 237 21e8 B8210000 		_HEADER ULED,4,"ULED"
 237      04554C45 
 237      440000BF 
 238 21f4 4FF40050 		mov T0,#(1<<LED_PIN)
 239 21f8 4FF40061 		_MOV32 T1,LED_GPIO 
 239      C4F20201 
 240 2200 3600     		movs TOS,TOS 
 241 2202 57F8046B 		_POP
 242 2206 03D0     		beq ULED_OFF
 243 2208 4FEA0040 		lsl T0,#16 
 244 220c 8861     		str T0,[T1,#GPIO_BSRR]
 245 220e 47E7     		_NEXT 
 246              	ULED_OFF:
 247 2210 8861     		str T0,[T1,#GPIO_BSRR]
 248 2212 45E7     		_NEXT    
 249              	
 250              	
 251              		
 252              	/***************
 253              	//  The kernel
 254              	***************/
 255              	
 256              	/********************
 257              	    NOP	( -- )
 258              	 	do nothing.
 259              	*********************/
 260 2214 EC210000 		_HEADER NOP,3,"NOP"
 260      034E4F50 
ARM GAS  forth.s 			page 89


 261 221c 40E7     		_NEXT 
 262              	 
 263              	/********************
 264              	    doLIT	( -- w )
 265              	 	Push an inline literal.
 266              	hidden word used by compiler 
 267              	*********************/
 268              	DOLIT:
 269 221e 47F8046D 		_PUSH				//  store TOS on data stack
 270 2222 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 271 2226 3BE7     		_NEXT 
 272              	
 273              	/*******************************
 274              	    EXECUTE	( ca -- )
 275              	 	Execute the word at ca.
 276              	*******************************/
 277 2228 18220000 		_HEADER EXECU,7,"EXECUTE"
 277      07455845 
 277      43555445 
 278 2234 46F00105 		ORR	WP,TOS,#1 
 279 2238 57F8046B 		_POP
 280 223c 2847     		BX WP 
 281 223e 2FE7     		_NEXT 
 282              	
 283              	/**********************************************************
 284              	    donext	( -- ) counter on R:
 285              	 	Run time code for the single index loop.
 286              	 	: next ( -- ) \ hilevel model
 287              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 288              	hidden word used by compiler 	  
 289              	*********************************************************/
 290              	DONXT:
 291 2240 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 292 2244 22B9     		CBNZ T2,NEXT1 
 293              		/* loop done */
 294 2246 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 295 224a 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 296 224e 27E7     		_NEXT
 297              	NEXT1:
 298              		/* decrement loop counter */
 299 2250 A2F10102 		SUB	T2,T2,#1
 300 2254 C8F80020 		STR	T2,[RSP]
 301 2258 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 302 225c 20E7     		_NEXT 
 303              	
 304              	/**************************************
 305              	    ?branch	( f -- )
 306              	 	Branch if flag is zero.
 307              	hiddend word used by compiler
 308              	**************************************/
 309              	QBRAN:
 310 225e 3600     		MOVS	TOS,TOS
 311 2260 57F8046B 		_POP
 312 2264 02D1     		BNE	QBRAN1
 313 2266 DCF800C0 		LDR	IP,[IP]
 314 226a 19E7     		_NEXT
 315              	QBRAN1:
ARM GAS  forth.s 			page 90


 316 226c 0CF1040C 	 	ADD	IP,IP,#4
 317 2270 16E7     		_NEXT
 318              	
 319              	/***********************************
 320              	    branch	( -- )
 321              	 	Branch to an inline address.
 322              	hidden word used by compiler 
 323              	***********************************/
 324              	BRAN:
 325 2272 DCF800C0 		LDR	IP,[IP]
 326 2276 13E7     		_NEXT
 327              	
 328              	/******************************************
 329              	    EXIT	(  -- )
 330              	 	Exit the currently executing command.
 331              	******************************************/
 332 2278 2C220000 		_HEADER EXIT,4,"EXIT"
 332      04455849 
 332      540000BF 
 333 2284 A7200000 		_UNNEST
 334              	
 335              	/***********************************
 336              	    !	   ( w a -- )
 337              	 	Pop the data stack to memory.
 338              	************************************/
 339 2288 7C220000 		_HEADER STORE,1,"!"
 339      012100BF 
 340 2290 57F8045B 		LDR	WP,[DSP],#4
 341 2294 3560     		STR	WP,[TOS]
 342 2296 57F8046B 		_POP
 343 229a 01E7     		_NEXT 
 344              	
 345              	/********************************************
 346              	    @	   ( a -- w )
 347              	 	Push memory location to the data stack.
 348              	*********************************************/
 349 229c 8C220000 		_HEADER AT,1,"@"
 349      014000BF 
 350 22a4 3668     		LDR	TOS,[TOS]
 351 22a6 FBE6     		_NEXT 
 352              	
 353              	/*******************************************
 354              	    C!	  ( c b -- )
 355              	 	Pop the data stack to byte memory.
 356              	*******************************************/
 357 22a8 A0220000 		_HEADER CSTOR,2,"C!"
 357      02432100 
 358 22b0 57F8045B 		LDR	WP,[DSP],#4
 359 22b4 3570     		STRB WP,[TOS]
 360 22b6 57F8046B 		_POP
 361 22ba F1E6     		_NEXT
 362              	
 363              	/*********************************************
 364              	    C@	  ( b -- c )
 365              	 	Push byte memory location to the data stack.
 366              	**********************************************/
 367 22bc AC220000 		_HEADER CAT,2,"C@"
ARM GAS  forth.s 			page 91


 367      02434000 
 368 22c4 3678     		LDRB	TOS,[TOS]
 369 22c6 EBE6     		_NEXT 
 370              	
 371              	/*********************************************
 372              	    R>	  ( -- w )
 373              	 	Pop the return stack to the data stack.
 374              	**********************************************/
 375 22c8 C0220000 		_HEADER RFROM,2,"R>"
 375      02523E00 
 376 22d0 47F8046D 		_PUSH
 377 22d4 58F8046B 		LDR	TOS,[RSP],#4
 378 22d8 E2E6     		_NEXT 
 379              	
 380              	/************************************************
 381              	    R@	  ( -- w )
 382              	 	Copy top of return stack to the data stack.
 383              	************************************************/
 384 22da CC220000 		_HEADER RAT,2,"R@"
 384      02524000 
 384      00BF
 385 22e4 47F8046D 		_PUSH
 386 22e8 D8F80060 		LDR	TOS,[RSP]
 387 22ec D8E6     		_NEXT 
 388              	
 389              	/***********************************************
 390              	    >R	  ( w -- )
 391              	 	Push the data stack to the return stack.
 392              	************************************************/
 393 22ee DE220000 		_HEADER TOR,2,">R"
 393      023E5200 
 393      00BF
 394 22f8 48F8046D 		STR	TOS,[RSP,#-4]!
 395 22fc 57F8046B 		_POP
 396 2300 CEE6     		_NEXT
 397              	
 398              	/*******************************
 399              	//	RP! ( u -- )
 400              	// initialize RPP with u 
 401              	*******************************/
 402 2302 F2220000 		_HEADER RPSTOR,3,"RP!"
 402      03525021 
 402      00BF
 403 230c B046     		MOV RSP,TOS 
 404 230e 57F8046B 		_POP  
 405 2312 C5E6     		_NEXT 
 406              	
 407              	/********************************
 408              		SP! ( u -- )
 409              	 initialize SPP with u 
 410              	********************************/
 411 2314 06230000 		_HEADER SPSTOR,3,"SP!"
 411      03535021 
 412 231c 3746     		MOV DSP,TOS 
 413 231e 86EA0606 		EOR TOS,TOS,TOS 
 414 2322 BDE6     		_NEXT 
 415              	
ARM GAS  forth.s 			page 92


 416              	/**************************************
 417              	    SP@	 ( -- a )
 418              	 	Push the current data stack pointer.
 419              	***************************************/
 420 2324 18230000 		_HEADER SPAT,3,"SP@"
 420      03535040 
 421 232c 47F8046D 		_PUSH
 422 2330 3E46     		MOV	TOS,DSP
 423 2332 B5E6     		_NEXT
 424              	
 425              	/********************************
 426              	    DROP	( w -- )
 427              	 	Discard top stack item.
 428              	********************************/
 429 2334 28230000 		_HEADER DROP,4,"DROP"
 429      0444524F 
 429      500000BF 
 430 2340 57F8046B 		_POP
 431 2344 ACE6     		_NEXT 
 432              	
 433              	/*********************************
 434              	    DUP	 ( w -- w w )
 435              	 	Duplicate the top stack item.
 436              	*********************************/
 437 2346 38230000 		_HEADER DUPP,3,"DUP"
 437      03445550 
 437      00BF
 438 2350 47F8046D 		_PUSH
 439 2354 A4E6     		_NEXT 
 440              	
 441              	/**********************************
 442              	    SWAP	( w1 w2 -- w2 w1 )
 443              	 	Exchange top two stack items.
 444              	**********************************/
 445 2356 4A230000 		_HEADER SWAP,4,"SWAP"
 445      04535741 
 445      5000
 446 2360 3D68     		LDR	WP,[DSP]
 447 2362 3E60     		STR	TOS,[DSP]
 448 2364 2E46     		MOV	TOS,WP
 449 2366 9BE6     		_NEXT 
 450              	
 451              	/***********************************
 452              	    OVER	( w1 w2 -- w1 w2 w1 )
 453              	 	Copy second stack item to top.
 454              	***********************************/
 455 2368 5A230000 		_HEADER OVER,4,"OVER"
 455      044F5645 
 455      520000BF 
 456 2374 47F8046D 		_PUSH
 457 2378 7E68     		LDR	TOS,[DSP,#4]
 458 237a 91E6     		_NEXT 
 459              	
 460              	/***********************************
 461              	    0<	  ( n -- t )
 462              	 	Return true if n is negative.
 463              	***********************************/
ARM GAS  forth.s 			page 93


 464 237c 6C230000 		_HEADER ZLESS,2,"0<"
 464      02303C00 
 465 2384 4FEAE676 		ASR TOS,#31
 466 2388 8AE6     		_NEXT 
 467              	
 468              	/********************************
 469              	    AND	 ( w w -- w )
 470              	 	Bitwise AND.
 471              	********************************/
 472 238a 80230000 		_HEADER ANDD,3,"AND"
 472      03414E44 
 472      00BF
 473 2394 57F8045B 		LDR	WP,[DSP],#4
 474 2398 06EA0506 		AND	TOS,TOS,WP
 475 239c 80E6     		_NEXT 
 476              	
 477              	/******************************
 478              	    OR	  ( w w -- w )
 479              	 	Bitwise inclusive OR.
 480              	******************************/
 481 239e 8E230000 		_HEADER ORR,2,"OR"
 481      024F5200 
 481      00BF
 482 23a8 57F8045B 		LDR	WP,[DSP],#4
 483 23ac 46EA0506 		ORR	TOS,TOS,WP
 484 23b0 76E6     		_NEXT 
 485              	
 486              	/*****************************
 487              	    XOR	 ( w w -- w )
 488              	 	Bitwise exclusive OR.
 489              	*****************************/
 490 23b2 A2230000 		_HEADER XORR,3,"XOR"
 490      03584F52 
 490      00BF
 491 23bc 57F8045B 		LDR	WP,[DSP],#4
 492 23c0 86EA0506 		EOR	TOS,TOS,WP
 493 23c4 6CE6     		_NEXT 
 494              	
 495              	/**************************************************
 496              	    UM+	 ( w w -- w cy )
 497              	 	Add two numbers, return the sum and carry flag.
 498              	***************************************************/
 499 23c6 B6230000 		_HEADER UPLUS,3,"UM+"
 499      03554D2B 
 499      00BF
 500 23d0 3D68     		LDR	WP,[DSP]
 501 23d2 AD19     		ADDS	WP,WP,TOS
 502 23d4 4FF00006 		MOV	TOS,#0
 503 23d8 46F10006 		ADC	TOS,TOS,#0
 504 23dc 3D60     		STR	WP,[DSP]
 505 23de 5FE6     		_NEXT 
 506              	
 507              	/*********************************
 508              	    RSHIFT	 ( w # -- w )
 509              	 	arithmetic Right shift # bits.
 510              	**********************************/
 511 23e0 CA230000 		_HEADER RSHIFT,6,"RSHIFT"
ARM GAS  forth.s 			page 94


 511      06525348 
 511      49465400 
 512 23ec 57F8045B 		LDR	WP,[DSP],#4
 513 23f0 45FA06F6 		MOV	TOS,WP,ASR TOS
 514 23f4 54E6     		_NEXT 
 515              	
 516              	/****************************
 517              	    LSHIFT	 ( w # -- w )
 518              	 	Right shift # bits.
 519              	****************************/
 520 23f6 E4230000 		_HEADER LSHIFT,6,"LSHIFT"
 520      064C5348 
 520      49465400 
 520      00BF
 521 2404 57F8045B 		LDR	WP,[DSP],#4
 522 2408 05FA06F6 		MOV	TOS,WP,LSL TOS
 523 240c 48E6     		_NEXT
 524              	
 525              	/*************************
 526              	    +	 ( w w -- w )
 527              	 	Add.
 528              	*************************/
 529 240e FA230000 		_HEADER PLUS,1,"+"
 529      012B
 530 2414 57F8045B 		LDR	WP,[DSP],#4
 531 2418 2E44     		ADD	TOS,TOS,WP
 532 241a 41E6     		_NEXT 
 533              	
 534              	/************************
 535              	    -	 ( w w -- w )
 536              	 	Subtract.
 537              	************************/
 538 241c 12240000 		_HEADER SUBB,1,"-"
 538      012D00BF 
 539 2424 57F8045B 		LDR	WP,[DSP],#4
 540 2428 C6EB0506 		RSB	TOS,TOS,WP
 541 242c 38E6     		_NEXT 
 542              	
 543              	/************************
 544              	    *	 ( w w -- w )
 545              	 	Multiply.
 546              	***********************/
 547 242e 20240000 		_HEADER STAR,1,"*"
 547      012A
 548 2434 57F8045B 		LDR	WP,[DSP],#4
 549 2438 05FB06F6 		MUL	TOS,WP,TOS
 550 243c 30E6     		_NEXT 
 551              	
 552              	/***************************
 553              	    UM*	 ( w w -- ud )
 554              	 	Unsigned multiply.
 555              	****************************/
 556 243e 32240000 		_HEADER UMSTA,3,"UM*"
 556      03554D2A 
 556      00BF
 557 2448 3D68     		LDR	WP,[DSP]
 558 244a A6FB0523 		UMULL	T2,T3,TOS,WP
ARM GAS  forth.s 			page 95


 559 244e 3A60     		STR	T2,[DSP]
 560 2450 1E46     		MOV	TOS,T3
 561 2452 25E6     		_NEXT 
 562              	
 563              	/***************************
 564              	    M*	 ( w w -- d )
 565              	 	signed multiply.
 566              	***************************/
 567 2454 42240000 		_HEADER MSTAR,2,"M*"
 567      024D2A00 
 568 245c 3D68     		LDR	WP,[DSP]
 569 245e 86FB0523 		SMULL	T2,T3,TOS,WP
 570 2462 3A60     		STR	T2,[DSP]
 571 2464 1E46     		MOV	TOS,T3
 572 2466 1BE6     		_NEXT 
 573              	
 574              	/***************************
 575              	    1+	 ( w -- w+1 )
 576              	 	Add 1.
 577              	***************************/
 578 2468 58240000 		_HEADER ONEP,2,"1+"
 578      02312B00 
 579 2470 06F10106 		ADD	TOS,TOS,#1
 580 2474 14E6     		_NEXT 
 581              	
 582              	/***************************
 583              	    1-	 ( w -- w-1 )
 584              	 	Subtract 1.
 585              	***************************/
 586 2476 6C240000 		_HEADER ONEM,2,"1-"
 586      02312D00 
 586      00BF
 587 2480 A6F10106 		SUB	TOS,TOS,#1
 588 2484 0CE6     		_NEXT 
 589              	
 590              	/***************************
 591              	    2+	 ( w -- w+2 )
 592              	 	Add 2.
 593              	**************************/
 594 2486 7A240000 		_HEADER TWOP,2,"2+"
 594      02322B00 
 594      00BF
 595 2490 06F10206 		ADD	TOS,TOS,#2
 596 2494 04E6     		_NEXT
 597              	
 598              	/**************************
 599              	    2-	 ( w -- w-2 )
 600              	 	Subtract 2.
 601              	**************************/
 602 2496 8A240000 		_HEADER TWOM,2,"2-"
 602      02322D00 
 602      00BF
 603 24a0 A6F10206 		SUB	TOS,TOS,#2
 604 24a4 FCE5     		_NEXT
 605              	
 606              	/***************************
 607              	    CELL+	( w -- w+4 )
ARM GAS  forth.s 			page 96


 608              	 	Add CELLL.
 609              	***************************/
 610 24a6 9A240000 		_HEADER CELLP,5,"CELL+"
 610      0543454C 
 610      4C2B
 611 24b0 06F10406 		ADD	TOS,TOS,#CELLL
 612 24b4 F4E5     		_NEXT
 613              	
 614              	/***************************
 615              	    CELL-	( w -- w-4 )
 616              	 	Subtract CELLL.
 617              	**************************/
 618 24b6 AA240000 		_HEADER CELLM,5,"CELL-"
 618      0543454C 
 618      4C2D
 619 24c0 A6F10406 		SUB	TOS,TOS,#CELLL
 620 24c4 ECE5     		_NEXT
 621              	
 622              	/**************************** 
 623              	    BL	( -- 32 )
 624              	 	Blank (ASCII space).
 625              	*****************************/
 626 24c6 BA240000 		_HEADER BLANK,2,"BL"
 626      02424C00 
 626      00BF
 627 24d0 47F8046D 		_PUSH
 628 24d4 4FF02006 		MOV	TOS,#32
 629 24d8 E2E5     		_NEXT 
 630              	
 631              	/**************************
 632              	    CELLS	( w -- w*4 )
 633              	 	Multiply CELLL 
 634              	***************************/
 635 24da CA240000 		_HEADER CELLS,5,"CELLS"
 635      0543454C 
 635      4C53
 636 24e4 4FEA8606 		LSL TOS,#2
 637 24e8 DAE5     		_NEXT
 638              	
 639              	/***************************
 640              	    CELL/	( w -- w/4 )
 641              	 	Divide by CELLL.
 642              	***************************/
 643 24ea DE240000 		_HEADER CELLSL,5,"CELL/"
 643      0543454C 
 643      4C2F
 644 24f4 4FEAA606 		ASR TOS,#2
 645 24f8 D2E5     		_NEXT
 646              	
 647              	/*************************
 648              	    2*	( w -- w*2 )
 649              	 	Multiply 2.
 650              	*************************/
 651 24fa EE240000 		_HEADER TWOST,2,"2*"
 651      02322A00 
 651      00BF
 652 2504 4FEA4606 		MOV	TOS,TOS,LSL#1
ARM GAS  forth.s 			page 97


 653 2508 CAE5     		_NEXT
 654              	
 655              	/*************************
 656              	    2/	( w -- w/2 )
 657              	 	Divide by 2.
 658              	***********************/
 659 250a FE240000 		_HEADER TWOSL,2,"2/"
 659      02322F00 
 659      00BF
 660 2514 4FEA6606 		MOV	TOS,TOS,ASR#1
 661 2518 C2E5     		_NEXT
 662              	
 663              	/****************************
 664              	    ?DUP	( w -- w w | 0 )
 665              	 	Conditional duplicate.
 666              	*****************************/
 667 251a 0E250000 		_HEADER QDUP,4,"?DUP"
 667      043F4455 
 667      5000
 668 2524 3500     		MOVS	WP,TOS
 669 2526 18BF     		IT NE 
 670 2528 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 671 252c B8E5     		_NEXT
 672              	
 673              	/***********************************
 674              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 675              	 	Rotate top 3 items.
 676              	*************************************/
 677 252e 1E250000 		_HEADER ROT,3,"ROT"
 677      03524F54 
 677      00BF
 678 2538 3868     		LDR	T0,[DSP]  // w2 
 679 253a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 680 253c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 681 253e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 682 2540 AEE5     		_NEXT
 683              	
 684              	/*********************************
 685              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 686              	 left rotate top 3 elements 
 687              	********************************/
 688 2542 32250000 		_HEADER NROT,4,"-ROT"
 688      042D524F 
 688      5400
 689 254c 7868     		LDR T0,[DSP,#4]
 690 254e 7E60     		STR TOS,[DSP,#4]	
 691 2550 3E68     		LDR TOS,[DSP]
 692 2552 3860     		STR T0,[DSP]
 693 2554 A4E5     		_NEXT 
 694              	
 695              	/*********************************
 696              	    2DROP	( w1 w2 -- )
 697              	 	Drop top 2 items.
 698              	*********************************/
 699 2556 46250000 		_HEADER DDROP,5,"2DROP"
 699      05324452 
 699      4F50
ARM GAS  forth.s 			page 98


 700 2560 57F8046B 		_POP
 701 2564 57F8046B 		_POP
 702 2568 9AE5     		_NEXT 
 703              	
 704              	/********************************
 705              		3DROP ( w1 w2 w3 -- )
 706              		drop top 3 items 
 707              	********************************/
 708 256a 5A250000 		_HEADER TDROP,5,"3DROP"
 708      05334452 
 708      4F50
 709 2574 07F10807 	    add DSP,#8 
 710 2578 57F8046B 	    _POP 
 711 257c 90E5     	    _NEXT 
 712              	
 713              	/***********************************
 714              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 715              	 	Duplicate top 2 items.
 716              	************************************/
 717 257e 6E250000 		_HEADER DDUP,4,"2DUP"
 717      04324455 
 717      5000
 718 2588 3868     		LDR	T0,[DSP] // w1
 719 258a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 720 258e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 721 2592 85E5     		_NEXT
 722              	
 723              	/******************************
 724              	    D+	( d1 d2 -- d3 )
 725              	 	Add top 2 double numbers.
 726              	******************************/
 727 2594 82250000 		_HEADER DPLUS,2,"D+"
 727      02442B00 
 728 259c 57F8045B 		LDR	WP,[DSP],#4
 729 25a0 57F8042B 		LDR	T2,[DSP],#4
 730 25a4 3B68     		LDR	T3,[DSP]
 731 25a6 ED18     		ADDS	WP,WP,T3
 732 25a8 3D60     		STR	WP,[DSP]
 733 25aa 46EB0206 		ADC	TOS,TOS,T2
 734 25ae 77E5     		_NEXT
 735              	
 736              	/*****************************
 737              	    NOT	 ( w -- !w )
 738              	 	1"s complement.
 739              	*****************************/
 740 25b0 98250000 		_HEADER INVER,3,"NOT"
 740      034E4F54 
 741 25b8 6FEA0606 		MVN	TOS,TOS
 742 25bc 70E5     		_NEXT
 743              	
 744              	/*****************************
 745              	    NEGATE	( w -- -w )
 746              	 	2's complement.
 747              	***************************/
 748 25be B4250000 		_HEADER NEGAT,6,"NEGATE"
 748      064E4547 
 748      41544500 
ARM GAS  forth.s 			page 99


 748      00BF
 749 25cc C6F10006 		RSB	TOS,TOS,#0
 750 25d0 66E5     		_NEXT
 751              	
 752              	/***************************
 753              	    ABS	 ( w -- |w| )
 754              	 	Absolute.
 755              	**************************/
 756 25d2 C2250000 		_HEADER ABSS,3,"ABS"
 756      03414253 
 756      00BF
 757 25dc 16F0004F 		TST	TOS,#0x80000000
 758 25e0 18BF     		IT NE
 759 25e2 7642     	    RSBNE   TOS,TOS,#0
 760 25e4 5CE5     		_NEXT
 761              	
 762              	/*******************
 763              	  0= ( w -- f )
 764              	 TOS==0?
 765              	*******************/
 766 25e6 D6250000 		_HEADER ZEQUAL,2,"0="
 766      02303D00 
 766      00BF
 767 25f0 16B9     		cbnz TOS,1f
 768 25f2 4FF0FF36 		mov TOS,#-1
 769 25f6 53E5     		_NEXT 
 770 25f8 86EA0606 	1:  eor TOS,TOS,TOS  
 771 25fc 50E5     		_NEXT 	
 772              	
 773              	/*********************
 774              	    =	 ( w w -- t )
 775              	 	Equal?
 776              	*********************/
 777 25fe EA250000 		_HEADER EQUAL,1,"="
 777      013D
 778 2604 57F8045B 		LDR	WP,[DSP],#4
 779 2608 AE42     		CMP	TOS,WP
 780 260a 0CBF     		ITE EQ 
 781 260c 6FF00006 	    MVNEQ	TOS,#0
 782 2610 0026     		MOVNE	TOS,#0
 783 2612 45E5     		_NEXT
 784              	
 785              	/************************
 786              	    U<	 ( w w -- t )
 787              	 	Unsigned less?
 788              	*************************/
 789 2614 02260000 		_HEADER ULESS,2,"U<"
 789      02553C00 
 790 261c 57F8045B 		LDR	WP,[DSP],#4
 791 2620 B542     		CMP	WP,TOS
 792 2622 34BF     		ITE CC 
 793 2624 6FF00006 		MVNCC	TOS,#0
 794 2628 0026     		MOVCS	TOS,#0
 795 262a 39E5     		_NEXT
 796              	
 797              	/**********************
 798              	    <	( w w -- t )
ARM GAS  forth.s 			page 100


 799              	 	Less?
 800              	**********************/
 801 262c 18260000 		_HEADER LESS,1,"<"
 801      013C00BF 
 802 2634 57F8045B 		LDR	WP,[DSP],#4
 803 2638 B542     		CMP	WP,TOS
 804 263a B4BF     	    ITE LT
 805 263c 6FF00006 		MVNLT	TOS,#0
 806 2640 0026     		MOVGE	TOS,#0
 807 2642 2DE5     		_NEXT 
 808              	
 809              	/**********************
 810              		U> ( u u -- t|f )
 811              	    unsigned greater 
 812              	**********************/
 813 2644 30260000 		_HEADER UGREAT,2,"U>"
 813      02553E00 
 814 264c 57F8045B 		LDR WP,[DSP],#4 
 815 2650 AE42     		CMP TOS,WP 
 816 2652 34BF     		ITE CC  
 817 2654 6FF00006 		MVNCC TOS,#0 
 818 2658 0026     		MOVCS TOS,#0
 819 265a 21E5     		_NEXT 
 820              	
 821              	/***********************
 822              	    >	( w w -- t )
 823              	 	greater?
 824              	***********************/
 825 265c 48260000 		_HEADER GREAT,1,">"
 825      013E00BF 
 826 2664 57F8045B 		LDR	WP,[DSP],#4
 827 2668 B542     		CMP	WP,TOS
 828 266a CCBF     		ITE GT
 829 266c 6FF00006 	    MVNGT	TOS,#0
 830 2670 0026     		MOVLE	TOS,#0
 831 2672 15E5     		_NEXT
 832              	
 833              	/***************************
 834              	    MAX	 ( w w -- max )
 835              	 	Leave maximum.
 836              	***************************/
 837 2674 60260000 		_HEADER MAX,3,"MAX"
 837      034D4158 
 838 267c 57F8045B 		LDR	WP,[DSP],#4
 839 2680 B542     		CMP	WP,TOS
 840 2682 C8BF     		IT GT 
 841 2684 2E46     		MOVGT	TOS,WP
 842 2686 0BE5     		_NEXT 
 843              	
 844              	/**************************
 845              	    MIN	 ( w w -- min )
 846              	 	Leave minimum.
 847              	**************************/
 848 2688 78260000 		_HEADER MIN,3,"MIN"
 848      034D494E 
 849 2690 57F8045B 		LDR	WP,[DSP],#4
 850 2694 B542     		CMP	WP,TOS
ARM GAS  forth.s 			page 101


 851 2696 B8BF     		IT LT
 852 2698 2E46     		MOVLT	TOS,WP
 853 269a 01E5     		_NEXT
 854              	
 855              	/***********************
 856              	    +!	 ( w a -- )
 857              	 	Add to memory.
 858              	***********************/
 859 269c 8C260000 		_HEADER PSTOR,2,"+!"
 859      022B2100 
 860 26a4 57F8045B 		LDR	WP,[DSP],#4
 861 26a8 3268     		LDR	T2,[TOS]
 862 26aa 2A44     		ADD	T2,T2,WP
 863 26ac 3260     		STR	T2,[TOS]
 864 26ae 57F8046B 		_POP
 865 26b2 F5E4     		_NEXT
 866              	
 867              	/************************
 868              	    2!	 ( d a -- )
 869              	 	Store double number.
 870              	*************************/
 871 26b4 A0260000 		_HEADER DSTOR,2,"2!"
 871      02322100 
 872 26bc 57F8045B 		LDR	WP,[DSP],#4
 873 26c0 57F8042B 		LDR	T2,[DSP],#4
 874 26c4 46F8045B 		STR	WP,[TOS],#4
 875 26c8 3260     		STR	T2,[TOS]
 876 26ca 57F8046B 		_POP
 877 26ce E7E4     		_NEXT
 878              	
 879              	/************************
 880              	    2@	 ( a -- d )
 881              	 	Fetch double number.
 882              	************************/
 883 26d0 B8260000 		_HEADER DAT,2,"D@"
 883      02444000 
 884 26d8 7568     		LDR	WP,[TOS,#4]
 885 26da 47F8045D 		STR	WP,[DSP,#-4]!
 886 26de 3668     		LDR	TOS,[TOS]
 887 26e0 DEE4     		_NEXT
 888              	
 889              	/***************************
 890              	    COUNT	( b -- b+1 c )
 891              	 	Fetch length of string.
 892              	****************************/
 893 26e2 D4260000 		_HEADER COUNT,5,"COUNT"
 893      05434F55 
 893      4E54
 894 26ec 16F8015B 		LDRB	WP,[TOS],#1
 895 26f0 47F8046D 		_PUSH
 896 26f4 2E46     		MOV	TOS,WP
 897 26f6 D3E4     		_NEXT
 898              	
 899              	/******************************
 900              	    DNEGATE	( d -- -d )
 901              	 	Negate double number.
 902              	**************************/
ARM GAS  forth.s 			page 102


 903 26f8 E6260000 		_HEADER DNEGA,7,"DNEGATE"
 903      07444E45 
 903      47415445 
 904 2704 3D68     		LDR	WP,[DSP]
 905 2706 A2EB0202 		SUB	T2,T2,T2
 906 270a 551B     		SUBS WP,T2,WP
 907 270c 62EB0606 		SBC	TOS,T2,TOS
 908 2710 3D60     		STR	WP,[DSP]
 909 2712 C5E4     		_NEXT
 910              	
 911              	/******************************
 912              	  System and user variables
 913              	******************************/
 914              	
 915              	/*******************************
 916              	  doVAR	( -- a )
 917              	  Run time routine for VARIABLE and CREATE.
 918              	hidden word used by compiler
 919              	********************************/
 920              	DOVAR:
 921 2714 47F8046D 		_PUSH
 922 2718 6646     		MOV TOS,IP
 923 271a 0CF1040C 		ADD IP,IP,#4 
 924 271e C2E4     		B UNNEST 
 925              	
 926              	/**********************************
 927              	    doCON	( -- a ) 
 928              	 	Run time routine for CONSTANT.
 929              	hidden word used by compiler 
 930              	***********************************/
 931              	DOCON:
 932 2720 47F8046D 		_PUSH
 933 2724 5CF8046B 		LDR.W TOS,[IP],#4 
 934 2728 BDE4     		B UNNEST 
 935              	
 936              	/***********************
 937              	  system variables 
 938              	***********************/
 939              	
 940              	/**************************
 941              	 SEED ( -- a)
 942              	 return PRNG seed address 
 943              	**************************/
 944 272a FC260000 		_HEADER SEED,4,"SEED"
 944      04534545 
 944      4400
 945 2734 47F8046D 		_PUSH 
 946 2738 04F10406 		ADD TOS,UP,#RNDSEED
 947 273c B0E4     		_NEXT 	
 948              	
 949              	/****************************************
 950              	  MSEC ( -- a)
 951              	 return address of milliseconds counter
 952              	****************************************/
 953 273e 2E270000 		_HEADER MSEC,4,"MSEC"
 953      044D5345 
 953      4300
ARM GAS  forth.s 			page 103


 954 2748 47F8046D 	    _PUSH
 955 274c 04F10806 	    ADD TOS,UP,#TICKS
 956 2750 A6E4     	    _NEXT 
 957              	
 958              	/*************************
 959              	 TIMER ( -- a )
 960              	 count down timer 
 961              	**********************/
 962 2752 42270000 		_HEADER TIMER,5,"TIMER"
 962      0554494D 
 962      4552
 963 275c 47F8046D 		 _PUSH 
 964 2760 04F10C06 	    ADD TOS,UP,#CD_TIMER
 965 2764 9CE4     	    _NEXT
 966              	
 967              	/*****************************
 968              	    'BOOT	 ( -- a )
 969              	 	boot up application vector 
 970              	*****************************/
 971 2766 56270000 		_HEADER TBOOT,5,"'BOOT"
 971      0527424F 
 971      4F54
 972 2770 47F8046D 		_PUSH
 973 2774 04F11006 		ADD	TOS,UP,#BOOT 
 974 2778 92E4     		_NEXT
 975              		
 976              	/********************************************	
 977              	    BASE	( -- a )
 978              	 	Storage of the radix base for numeric I/O.
 979              	**********************************************/
 980 277a 6A270000 		_HEADER BASE,4,"BASE"
 980      04424153 
 980      4500
 981 2784 47F8046D 		_PUSH
 982 2788 04F11C06 		ADD	TOS,UP,#NBASE
 983 278c 88E4     		_NEXT
 984              	
 985              	/*****************************************************
 986              	    temp	 ( -- a )
 987              	 	A temporary storage location used in parse and find.
 988              	hidden word for internal use
 989              	********************************************************/
 990              	TEMP:
 991 278e 47F8046D 		_PUSH
 992 2792 04F12006 		ADD	TOS,UP,#TMP
 993 2796 83E4     		_NEXT
 994              	
 995              	/*******************************************
 996              	    SPAN	( -- a )
 997              	 	Hold character count received by EXPECT.
 998              	********************************************/
 999 2798 7E270000 		_HEADER SPAN,4,"SPAN"
 999      04535041 
 999      4E0000BF 
 1000 27a4 47F8046D 		_PUSH
 1001 27a8 04F12406 		ADD	TOS,UP,#CSPAN
 1002 27ac 78E4     		_NEXT
ARM GAS  forth.s 			page 104


 1003              	
 1004              	/***********************************************************
 1005              	    >IN	 ( -- a )
 1006              	 	Hold the character pointer while parsing input stream.
 1007              	***********************************************************/
 1008 27ae 9C270000 		_HEADER INN,3,">IN"
 1008      033E494E 
 1008      00BF
 1009 27b8 47F8046D 		_PUSH
 1010 27bc 04F12806 		ADD	TOS,UP,#TOIN
 1011 27c0 6EE4     		_NEXT
 1012              	
 1013              	/**************************************
 1014              	    #TIB	( -- a )
 1015              	 	Hold the current count and address 
 1016              		of the terminal input buffer.
 1017              	**************************************/
 1018 27c2 B2270000 		_HEADER NTIB,4,"#TIB"
 1018      04235449 
 1018      4200
 1019 27cc 47F8046D 		_PUSH
 1020 27d0 04F12C06 		ADD	TOS,UP,#NTIBB
 1021 27d4 64E4     		_NEXT
 1022              	
 1023              	/******************************
 1024              	    'EVAL	( -- a )
 1025              	 	Execution vector of EVAL.
 1026              	*******************************/
 1027 27d6 C6270000 		_HEADER TEVAL,5,"'EVAL"
 1027      05274556 
 1027      414C
 1028 27e0 47F8046D 		_PUSH
 1029 27e4 04F13406 		ADD	TOS,UP,#EVAL
 1030 27e8 5AE4     		_NEXT
 1031              	
 1032              	/*********************************
 1033              	    HLD	 ( -- a )
 1034              	 	Hold a pointer in building a 
 1035              		numeric output string.
 1036              	*********************************/
 1037 27ea DA270000 		_HEADER HLD,3,"HLD"
 1037      03484C44 
 1037      00BF
 1038 27f4 47F8046D 		_PUSH
 1039 27f8 04F13806 		ADD	TOS,UP,#HOLD
 1040 27fc 50E4     		_NEXT
 1041              	
 1042              	/**********************************
 1043              	    CONTEXT	( -- a )
 1044              	 	A area to specify vocabulary 
 1045              		search order.
 1046              	**********************************/
 1047 27fe EE270000 		_HEADER CNTXT,7,"CONTEXT"
 1047      07434F4E 
 1047      54455854 
 1047      00BF
 1048              	CRRNT:
ARM GAS  forth.s 			page 105


 1049 280c 47F8046D 		_PUSH
 1050 2810 04F13C06 		ADD	TOS,UP,#CTXT
 1051 2814 44E4     		_NEXT
 1052              	
 1053              	/******************************
 1054              	    CP	( -- a )
 1055              	 	Point to top name in RAM 
 1056              		vocabulary.
 1057              	******************************/
 1058 2816 02280000 		_HEADER CPP,2,"CP"
 1058      02435000 
 1058      00BF
 1059 2820 47F8046D 		_PUSH
 1060 2824 04F14406 		ADD	TOS,UP,#USER_CTOP
 1061 2828 3AE4     		_NEXT
 1062              	
 1063              	/****************************
 1064              	   FCP ( -- a )
 1065              	  Point ot top of Forth 
 1066              	  system dictionary
 1067              	****************************/
 1068 282a 1A280000 		_HEADER FCP,3,"FCP"
 1068      03464350 
 1068      00BF
 1069 2834 47F8046D 		_PUSH 
 1070 2838 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1071 283c 30E4     		_NEXT 
 1072              	
 1073              	/***************************
 1074              	    LAST	( -- a )
 1075              	 	Point to the last name 
 1076              		in the name dictionary.
 1077              	***************************/
 1078 283e 2E280000 		_HEADER LAST,4,"LAST"
 1078      044C4153 
 1078      5400
 1079 2848 47F8046D 		_PUSH
 1080 284c 04F14806 		ADD	TOS,UP,#LASTN
 1081 2850 26E4     		_NEXT
 1082              	
 1083              	
 1084              	/***********************
 1085              		system constants 
 1086              	***********************/
 1087              	
 1088              	/********************************
 1089              		USER-BEGIN ( -- a )
 1090              	  where user area begin in RAM
 1091              	********************************/
 1092 2852 42280000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1092      0A555345 
 1092      522D4245 
 1092      47494E00 
 1092      00BF
 1093 2864 47F8046D 		_PUSH 
 1094 2868 004E     		ldr TOS,USR_BGN_ADR 
 1095 286a 19E4     		_NEXT 
ARM GAS  forth.s 			page 106


 1096              	USR_BGN_ADR:
 1097 286c 12050020 	.word  DTOP 
 1098              	
 1099              	/*********************************
 1100              	  USER_END ( -- a )
 1101              	  where user area end in RAM 
 1102              	******************************/
 1103 2870 56280000 		_HEADER USER_END,8,"USER-END"
 1103      08555345 
 1103      522D454E 
 1103      440000BF 
 1104 2880 47F8046D 		_PUSH 
 1105 2884 004E     		ldr TOS,USER_END_ADR 
 1106 2886 0BE4     		_NEXT 
 1107              	USER_END_ADR:
 1108 2888 FC800120 		.word DEND 
 1109              	
 1110              	
 1111              	/* *********************
 1112              	  Common functions
 1113              	***********************/
 1114              	
 1115              	/********************************
 1116              	    WITHIN	( u ul uh -- t )
 1117              	 	Return true if u is within 
 1118              		the range of ul and uh.
 1119              	********************************/
 1120 288c 74280000 		_HEADER WITHI,6,"WITHIN"
 1120      06574954 
 1120      48494E00 
 1121 2898 504700BF 		_NEST
 1122 289c 75230000 		_ADR	OVER
 1123 28a0 25240000 		_ADR	SUBB
 1124 28a4 F9220000 		_ADR	TOR
 1125 28a8 25240000 		_ADR	SUBB
 1126 28ac D1220000 		_ADR	RFROM
 1127 28b0 1D260000 		_ADR	ULESS
 1128 28b4 A7200000 		_UNNEST
 1129              	
 1130              	//  Divide
 1131              	
 1132              	/*************************************
 1133              	    UM/MOD	( udl udh u -- ur uq )
 1134              	 	Unsigned divide of a double by a 
 1135              		single. Return mod and quotient.
 1136              	**************************************/
 1137 28b8 90280000 		_HEADER UMMOD,6,"UM/MOD"
 1137      06554D2F 
 1137      4D4F4400 
 1138 28c4 4FF00103 		MOV	T3,#1
 1139 28c8 57F8045B 		LDR	WP,[DSP],#4
 1140 28cc 3A68     		LDR	T2,[DSP]
 1141              	UMMOD0:
 1142 28ce 9218     		ADDS	T2,T2,T2
 1143 28d0 6D41     		ADCS	WP,WP,WP
 1144 28d2 04D3     		BCC	UMMOD1
 1145 28d4 A5EB0605 		SUB	WP,WP,TOS
ARM GAS  forth.s 			page 107


 1146 28d8 02F10102 		ADD	T2,T2,#1
 1147 28dc 04E0     		B UMMOD2
 1148              	UMMOD1:
 1149 28de AD1B     		SUBS	WP,WP,TOS 
 1150 28e0 28BF     		IT CS 
 1151 28e2 0132     		ADDCS	T2,T2,#1
 1152 28e4 00D2     		BCS	UMMOD2
 1153 28e6 3544     		ADD	WP,WP,TOS
 1154              	UMMOD2:
 1155 28e8 DB18     		ADDS	T3,T3,T3
 1156 28ea F0D3     		BCC	UMMOD0
 1157 28ec 1646     		MOV	TOS,T2
 1158 28ee 3D60     		STR	WP,[DSP]
 1159 28f0 FFF7D6BB 		_NEXT
 1160              	
 1161              	/****************************
 1162              	    M/MOD	( d n -- r q )
 1163              	 	Signed floored divide 
 1164              		of double by single. 
 1165              		Return mod and quotient.
 1166              	****************************/
 1167 28f4 BC280000 		_HEADER MSMOD,5,"M/MOD"
 1167      054D2F4D 
 1167      4F4400BF 
 1168 2900 504700BF 		_NEST
 1169 2904 51230000 		_ADR	DUPP
 1170 2908 85230000 		_ADR	ZLESS
 1171 290c 51230000 		_ADR	DUPP
 1172 2910 F9220000 		_ADR	TOR
 1173 2914 5F220000 		_QBRAN MMOD1
 1173      2C290000 
 1174 291c CD250000 		_ADR	NEGAT
 1175 2920 F9220000 		_ADR	TOR
 1176 2924 05270000 		_ADR	DNEGA
 1177 2928 D1220000 		_ADR	RFROM
 1178              	MMOD1:
 1179 292c F9220000 		_ADR	TOR
 1180 2930 51230000 		_ADR	DUPP
 1181 2934 85230000 		_ADR	ZLESS
 1182 2938 5F220000 		_QBRAN MMOD2
 1182      48290000 
 1183 2940 E5220000 		_ADR	RAT
 1184 2944 15240000 		_ADR	PLUS
 1185              	MMOD2:
 1186 2948 D1220000 		_ADR	RFROM
 1187 294c C5280000 		_ADR	UMMOD
 1188 2950 D1220000 		_ADR	RFROM
 1189 2954 5F220000 		_QBRAN	MMOD3
 1189      68290000 
 1190 295c 61230000 		_ADR	SWAP
 1191 2960 CD250000 		_ADR	NEGAT
 1192 2964 61230000 		_ADR	SWAP
 1193              	MMOD3:   
 1194 2968 A7200000 		_UNNEST
 1195              	
 1196              	/****************************
 1197              	   /MOD	( n n -- r q )
ARM GAS  forth.s 			page 108


 1198              		Signed divide. Return
 1199              		mod and quotient.
 1200              	****************************/
 1201 296c F8280000 		_HEADER SLMOD,4,"/MOD"
 1201      042F4D4F 
 1201      440000BF 
 1202 2978 504700BF 		_NEST
 1203 297c 75230000 		_ADR	OVER
 1204 2980 85230000 		_ADR	ZLESS
 1205 2984 61230000 		_ADR	SWAP
 1206 2988 01290000 		_ADR	MSMOD
 1207 298c A7200000 		_UNNEST
 1208              	
 1209              	/**************************
 1210              	    MOD	 ( n n -- r )
 1211              	 	Signed divide. Return
 1212              		mod only.
 1213              	**************************/
 1214 2990 70290000 		_HEADER MODD,3,"MOD"
 1214      034D4F44 
 1215 2998 504700BF 		_NEST
 1216 299c 79290000 		_ADR	SLMOD
 1217 29a0 41230000 		_ADR	DROP
 1218 29a4 A7200000 		_UNNEST
 1219              	
 1220              	/*************************
 1221              	    /	   ( n n -- q )
 1222              	 	Signed divide. Return
 1223              		quotient only.
 1224              	**************************/
 1225 29a8 94290000 		_HEADER SLASH,1,"/"
 1225      012F00BF 
 1226 29b0 504700BF 		_NEST
 1227 29b4 79290000 		_ADR	SLMOD
 1228 29b8 61230000 		_ADR	SWAP
 1229 29bc 41230000 		_ADR	DROP
 1230 29c0 A7200000 		_UNNEST
 1231              	
 1232              	//******************************
 1233              	//  */MOD	( n1 n2 n3 -- r q )
 1234              	/* 	Multiply n1 and n2, then 
 1235              		divide by n3. Return 
 1236              		mod and quotient.
 1237              	******************************/
 1238 29c4 AC290000 		_HEADER SSMOD,5,"*/MOD"
 1238      052A2F4D 
 1238      4F4400BF 
 1239 29d0 504700BF 		_NEST
 1240 29d4 F9220000 		_ADR	TOR
 1241 29d8 5D240000 		_ADR	MSTAR
 1242 29dc D1220000 		_ADR	RFROM
 1243 29e0 01290000 		_ADR	MSMOD
 1244 29e4 A7200000 		_UNNEST
 1245              	
 1246              	//*******************************
 1247              	//  */ ( n1 n2 n3 -- q )
 1248              	/* 	Multiply n1 by n2, then 
ARM GAS  forth.s 			page 109


 1249              		divide by n3. Return quotient
 1250              		only.
 1251              	*******************************/
 1252 29e8 C8290000 		_HEADER STASL,2,"*/"
 1252      022A2F00 
 1253 29f0 504700BF 		_NEST
 1254 29f4 D1290000 		_ADR	SSMOD
 1255 29f8 61230000 		_ADR	SWAP
 1256 29fc 41230000 		_ADR	DROP
 1257 2a00 A7200000 		_UNNEST
 1258              	
 1259              	/*******************
 1260              	  Miscellaneous
 1261              	*******************/
 1262              	
 1263              	/*************************
 1264              	    ALIGNED	( b -- a )
 1265              	 	Align address to the 
 1266              		cell boundary.
 1267              	**************************/
 1268 2a04 EC290000 		_HEADER ALGND,7,"ALIGNED"
 1268      07414C49 
 1268      474E4544 
 1269 2a10 06F10306 		ADD	TOS,TOS,#3
 1270 2a14 6FF00305 		MVN	WP,#3
 1271 2a18 06EA0506 		AND	TOS,TOS,WP
 1272 2a1c FFF740BB 		_NEXT
 1273              	
 1274              	/****************************
 1275              	    >CHAR	( c -- c )
 1276              	 	Filter non-printing 
 1277              		characters.
 1278              	****************************/
 1279 2a20 082A0000 		_HEADER TCHAR,5,">CHAR"
 1279      053E4348 
 1279      415200BF 
 1280 2a2c 504700BF 		_NEST
 1281 2a30 1F220000 		_DOLIT  0x7F
 1281      7F000000 
 1282 2a38 95230000 		_ADR	ANDD
 1283 2a3c 51230000 		_ADR	DUPP	// mask msb
 1284 2a40 D1240000 		_ADR	BLANK
 1285 2a44 1F220000 		_DOLIT 	127
 1285      7F000000 
 1286 2a4c 99280000 		_ADR	WITHI	// check for printable
 1287 2a50 B9250000 		_ADR	INVER
 1288 2a54 5F220000 		_QBRAN	TCHA1
 1288      682A0000 
 1289 2a5c 41230000 		_ADR	DROP
 1290 2a60 1F220000 		_DOLIT 	'_'	// replace non-printables
 1290      5F000000 
 1291              	TCHA1:
 1292 2a68 A7200000 		  _UNNEST
 1293              	
 1294              	/************************
 1295              	    DEPTH	( -- n )
 1296              	 	Return the depth of
ARM GAS  forth.s 			page 110


 1297              		the data stack.
 1298              	***********************/
 1299 2a6c 242A0000 		_HEADER DEPTH,5,"DEPTH"
 1299      05444550 
 1299      544800BF 
 1300 2a78 4FF47F42 		_MOV32 T2,SPP 
 1300      C2F20102 
 1301 2a80 A2EB0702 		SUB	T2,T2,DSP
 1302 2a84 47F8046D 		_PUSH
 1303 2a88 4FEAA206 		ASR	TOS,T2,#2
 1304 2a8c FFF708BB 		_NEXT
 1305              	
 1306              	/*****************************
 1307              	    PICK	( ... +n -- ... w )
 1308              	 	Copy the nth stack item 
 1309              		to tos.
 1310              	******************************/
 1311 2a90 702A0000 		_HEADER PICK,4,"PICK"
 1311      04504943 
 1311      4B0000BF 
 1312 2a9c 504700BF 		_NEST
 1313 2aa0 71240000 		_ADR	ONEP
 1314 2aa4 E5240000 		_ADR	CELLS
 1315 2aa8 2D230000 		_ADR	SPAT
 1316 2aac 15240000 		_ADR	PLUS
 1317 2ab0 A5220000 		_ADR	AT
 1318 2ab4 A7200000 		_UNNEST
 1319              	
 1320              	/*********************
 1321              	  Memory access
 1322              	*********************/
 1323              	
 1324              	/*************************
 1325              	    HERE	( -- a )
 1326              	 	Return the top of
 1327              		the code dictionary.
 1328              	*************************/
 1329 2ab8 942A0000 		_HEADER HERE,4,"HERE"
 1329      04484552 
 1329      450000BF 
 1330 2ac4 504700BF 		_NEST
 1331 2ac8 21280000 		_ADR	CPP
 1332 2acc A5220000 		_ADR	AT
 1333 2ad0 A7200000 		_UNNEST
 1334              	
 1335              	/***************************	
 1336              	    PAD	 ( -- a )
 1337              	 	Return the address of 
 1338              		a temporary buffer.
 1339              	***************************/
 1340 2ad4 BC2A0000 		_HEADER PAD,3,"PAD"
 1340      03504144 
 1341 2adc 504700BF 		_NEST
 1342 2ae0 C52A0000 		_ADR	HERE
 1343 2ae4 1F220000 		_DOLIT 80
 1343      50000000 
 1344 2aec 15240000 		_ADR PLUS 
ARM GAS  forth.s 			page 111


 1345 2af0 A7200000 		_UNNEST
 1346              	
 1347              	/***********************
 1348              	    TIB	 ( -- a )
 1349              	 	Return the address 
 1350              		of the terminal 
 1351              		input buffer.
 1352              	************************/
 1353 2af4 D82A0000 		_HEADER TIB,3,"TIB"
 1353      03544942 
 1354 2afc 47F8046D 		_PUSH
 1355 2b00 266B     		ldr TOS,[UP,#TIBUF]
 1356 2b02 FFF7CDBA 		_NEXT
 1357              	
 1358              	/*************************
 1359              	    @EXECUTE	( a -- )
 1360              	 	Execute vector stored
 1361              		in address a.
 1362              	*************************/
 1363 2b06 F82A0000 		_HEADER ATEXE,8,"@EXECUTE"
 1363      08404558 
 1363      45435554 
 1363      4500
 1364 2b14 3500     		MOVS	WP,TOS
 1365 2b16 57F8046B 		_POP
 1366 2b1a 2D68     		LDR	WP,[WP]
 1367 2b1c 45F00105 		ORR	WP,WP,#1
 1368 2b20 18BF     	    IT NE 
 1369 2b22 2847     		BXNE	WP
 1370 2b24 FFF7BCBA 		_NEXT
 1371              	
 1372              	/*******************************
 1373              	    CMOVE	( b1 b2 u -- )
 1374              	 	Copy u bytes from b1 to b2.
 1375              	********************************/
 1376 2b28 0A2B0000 		_HEADER CMOVE,5,"CMOVE"
 1376      05434D4F 
 1376      564500BF 
 1377 2b34 57F8042B 		LDR	T2,[DSP],#4
 1378 2b38 57F8043B 		LDR	T3,[DSP],#4
 1379 2b3c 03E0     		B CMOV1
 1380              	CMOV0:
 1381 2b3e 13F8015B 		LDRB	WP,[T3],#1
 1382 2b42 02F8015B 		STRB	WP,[T2],#1
 1383              	CMOV1:
 1384 2b46 3600     		MOVS	TOS,TOS
 1385 2b48 02D0     		BEQ	CMOV2
 1386 2b4a A6F10106 		SUB	TOS,TOS,#1
 1387 2b4e F6E7     		B CMOV0
 1388              	CMOV2:
 1389 2b50 57F8046B 		_POP
 1390 2b54 FFF7A4BA 		_NEXT
 1391              	
 1392              	/***************************
 1393              	    MOVE	( a1 a2 u -- )
 1394              	 	Copy u words from a1 to a2.
 1395              	*******************************/
ARM GAS  forth.s 			page 112


 1396 2b58 2C2B0000 		_HEADER MOVE,4,"MOVE"
 1396      044D4F56 
 1396      450000BF 
 1397 2b64 4FF00400 		MOV T0,#4 
 1398 2b68 06F10306 		ADD TOS,#3 
 1399 2b6c 26F00306 		BIC TOS,#3
 1400 2b70 57F8041B 		LDR	T1,[DSP],#4 // dest
 1401 2b74 57F8042B 		LDR	T2,[DSP],#4 // src 
 1402 2b78 8A42     		CMP T2,T1 
 1403 2b7a 08D5     		BPL MOVE1
 1404 2b7c 6FF00300 		MOV T0,#-4 
 1405 2b80 3144     		ADD T1,TOS
 1406 2b82 3244     		ADD T2,TOS 
 1407 2b84 01E0     		B MOVE3
 1408              	MOVE0:
 1409 2b86 1568     		LDR	WP,[T2]
 1410 2b88 0D60     		STR	WP,[T1]
 1411              	MOVE3: 
 1412 2b8a 0144     		ADD T1,T0 
 1413 2b8c 0244     		ADD T2,T0 
 1414              	MOVE1:
 1415 2b8e 3600     		MOVS TOS,TOS
 1416 2b90 02D0     		BEQ	MOVE2
 1417 2b92 A6F10406 		SUB	TOS,TOS,#4
 1418 2b96 F6E7     		B MOVE0
 1419              	MOVE2:
 1420 2b98 57F8046B 		_POP
 1421 2b9c FFF780BA 		_NEXT
 1422              	
 1423              	/**************************
 1424              	    FILL	( b u c -- )
 1425              	 	Fill u bytes of character
 1426              		c to area beginning at b.
 1427              	******************************/
 1428 2ba0 5C2B0000 		_HEADER FILL,4,"FILL"
 1428      0446494C 
 1428      4C0000BF 
 1429 2bac 03CF     		LDMFD DSP!,{T0,T1} 
 1430 2bae 0000     		MOVS T0,T0 
 1431 2bb0 03D0     		BEQ FILL2
 1432              	FILL1:
 1433 2bb2 01F8016B 		STRB	TOS,[T1],#1
 1434 2bb6 0138     		SUBS	T0,T0,#1
 1435 2bb8 FBD1     		BNE FILL1
 1436              	FILL2:
 1437 2bba 57F8046B 		_POP
 1438 2bbe FFF76FBA 		_NEXT
 1439              	
 1440              	/*****************************
 1441              	    PACK$	( b u a -- a )
 1442              	 	Build a counted word with
 1443              		u characters from b. 
 1444              		Null fill.
 1445              	*****************************/
 1446 2bc2 A42B0000 		_HEADER PACKS,5,"PACK$"
 1446      05504143 
 1446      4B24
ARM GAS  forth.s 			page 113


 1447 2bcc 504700BF 		_NEST
 1448 2bd0 112A0000 		_ADR	ALGND
 1449 2bd4 51230000 		_ADR	DUPP
 1450 2bd8 F9220000 		_ADR	TOR			// strings only on cell boundary
 1451 2bdc 75230000 		_ADR	OVER
 1452 2be0 15240000 		_ADR	PLUS
 1453 2be4 71240000 		_ADR	ONEP
 1454 2be8 1F220000 		_DOLIT 	0xFFFFFFFC
 1454      FCFFFFFF 
 1455 2bf0 95230000 		_ADR	ANDD			// count mod cell
 1456 2bf4 1F220000 		_DOLIT 	0
 1456      00000000 
 1457 2bfc 61230000 		_ADR	SWAP
 1458 2c00 91220000 		_ADR	STORE			// null fill cell
 1459 2c04 E5220000 		_ADR	RAT
 1460 2c08 89250000 		_ADR	DDUP
 1461 2c0c B1220000 		_ADR	CSTOR
 1462 2c10 71240000 		_ADR	ONEP			// save count
 1463 2c14 61230000 		_ADR	SWAP
 1464 2c18 352B0000 		_ADR	CMOVE
 1465 2c1c D1220000 		_ADR	RFROM
 1466 2c20 A7200000 		_UNNEST   			// move string
 1467              	
 1468              	/***********************************
 1469              	  Numeric output, single precision
 1470              	***********************************/
 1471              	
 1472              	/**************************
 1473              	    DIGIT	( u -- c )
 1474              	 	Convert digit u to 
 1475              		a character.
 1476              	***************************/
 1477 2c24 C62B0000 		_HEADER DIGIT,5,"DIGIT"
 1477      05444947 
 1477      495400BF 
 1478 2c30 504700BF 		_NEST
 1479 2c34 1F220000 		_DOLIT 9
 1479      09000000 
 1480 2c3c 75230000 		_ADR	OVER
 1481 2c40 35260000 		_ADR	LESS
 1482 2c44 1F220000 		_DOLIT	7
 1482      07000000 
 1483 2c4c 95230000 		_ADR	ANDD
 1484 2c50 15240000 		_ADR	PLUS
 1485 2c54 1F220000 		_DOLIT	'0'
 1485      30000000 
 1486 2c5c 15240000 		_ADR	PLUS 
 1487 2c60 A7200000 		_UNNEST
 1488              	
 1489              	/*********************************
 1490              	    EXTRACT	( n base -- n c )
 1491              	 	Extract the least significant
 1492              		digit from n.
 1493              	**********************************/
 1494 2c64 282C0000 		_HEADER EXTRC,7,"EXTRACT"
 1494      07455854 
 1494      52414354 
ARM GAS  forth.s 			page 114


 1495 2c70 504700BF 		_NEST
 1496 2c74 1F220000 		_DOLIT 0
 1496      00000000 
 1497 2c7c 61230000 		_ADR	SWAP
 1498 2c80 C5280000 		_ADR	UMMOD
 1499 2c84 61230000 		_ADR	SWAP
 1500 2c88 312C0000 		_ADR	DIGIT
 1501 2c8c A7200000 		_UNNEST
 1502              	
 1503              	/***************************
 1504              	    <#	  ( -- )
 1505              	 	Initiate the numeric
 1506              		output process.
 1507              	****************************/
 1508 2c90 682C0000 		_HEADER BDIGS,2,"<#"
 1508      023C2300 
 1509 2c98 504700BF 		_NEST
 1510 2c9c DD2A0000 		_ADR	PAD
 1511 2ca0 F5270000 		_ADR	HLD
 1512 2ca4 91220000 		_ADR	STORE
 1513 2ca8 A7200000 		_UNNEST
 1514              	
 1515              	/*********************************
 1516              	    HOLD	( c -- )
 1517              	 	Insert a character into the 
 1518              		numeric output string.
 1519              	**********************************/
 1520 2cac 942C0000 		_HEADER HOLD,4,"HOLD"
 1520      04484F4C 
 1520      440000BF 
 1521 2cb8 504700BF 		_NEST
 1522 2cbc F5270000 		_ADR	HLD
 1523 2cc0 A5220000 		_ADR	AT
 1524 2cc4 81240000 		_ADR	ONEM
 1525 2cc8 51230000 		_ADR	DUPP
 1526 2ccc F5270000 		_ADR	HLD
 1527 2cd0 91220000 		_ADR	STORE
 1528 2cd4 B1220000 		_ADR	CSTOR
 1529 2cd8 A7200000 		_UNNEST
 1530              	
 1531              	/***********************
 1532              	    #	   ( u -- u )
 1533              	 	Extract one digit 
 1534              		from u and append 
 1535              		the digit to output 
 1536              		string.
 1537              	*************************/
 1538 2cdc B02C0000 		_HEADER DIG,1,"#"
 1538      012300BF 
 1539 2ce4 504700BF 		_NEST
 1540 2ce8 85270000 		_ADR	BASE
 1541 2cec A5220000 		_ADR	AT
 1542 2cf0 712C0000 		_ADR	EXTRC
 1543 2cf4 B92C0000 		_ADR	HOLD
 1544 2cf8 A7200000 		_UNNEST
 1545              	
 1546              	/***************************
ARM GAS  forth.s 			page 115


 1547              	    #S	  ( u -- 0 )
 1548              	 	Convert u until all 
 1549              		digits are added to 
 1550              		the output string.
 1551              	***************************/
 1552 2cfc E02C0000 		_HEADER DIGS,2,"#S"
 1552      02235300 
 1553 2d04 504700BF 		_NEST
 1554              	DIGS1:
 1555 2d08 E52C0000 	    _ADR	DIG
 1556 2d0c 51230000 		_ADR	DUPP
 1557 2d10 5F220000 		_QBRAN 	DIGS2
 1557      202D0000 
 1558 2d18 73220000 		_BRAN	DIGS1
 1558      082D0000 
 1559              	DIGS2:
 1560 2d20 A7200000 		  _UNNEST
 1561              	
 1562              	/*********************
 1563              	    SIGN	( n -- )
 1564              	 	Add a minus sign
 1565              		to the numeric
 1566              		output string.
 1567              	*********************/
 1568 2d24 002D0000 		_HEADER SIGN,4,"SIGN"
 1568      04534947 
 1568      4E0000BF 
 1569 2d30 504700BF 		_NEST
 1570 2d34 85230000 		_ADR	ZLESS
 1571 2d38 5F220000 		_QBRAN	SIGN1
 1571      4C2D0000 
 1572 2d40 1F220000 		_DOLIT '-'
 1572      2D000000 
 1573 2d48 B92C0000 		_ADR	HOLD
 1574              	SIGN1:
 1575 2d4c A7200000 		  _UNNEST
 1576              	
 1577              	/*************************
 1578              	    #>  ( w -- b u )
 1579              	 	Prepare the output 
 1580              		word to be TYPE'd.
 1581              	************************/
 1582 2d50 282D0000 		_HEADER EDIGS,2,"#>"
 1582      02233E00 
 1583 2d58 504700BF 		_NEST
 1584 2d5c 41230000 		_ADR	DROP
 1585 2d60 F5270000 		_ADR	HLD
 1586 2d64 A5220000 		_ADR	AT
 1587 2d68 DD2A0000 		_ADR	PAD
 1588 2d6c 75230000 		_ADR	OVER
 1589 2d70 25240000 		_ADR	SUBB
 1590 2d74 A7200000 		_UNNEST
 1591              	
 1592              	/**************************
 1593              	    str	 ( n -- b u )
 1594              	 	Convert a signed 
 1595              		integer to a numeric 
ARM GAS  forth.s 			page 116


 1596              		string.
 1597              	hidden word used by compiler
 1598              	***************************/
 1599              	STRR:
 1600 2d78 504700BF 		_NEST
 1601 2d7c 51230000 		_ADR	DUPP
 1602 2d80 F9220000 		_ADR	TOR
 1603 2d84 DD250000 		_ADR	ABSS
 1604 2d88 992C0000 		_ADR	BDIGS
 1605 2d8c 052D0000 		_ADR	DIGS
 1606 2d90 D1220000 		_ADR	RFROM
 1607 2d94 312D0000 		_ADR	SIGN
 1608 2d98 592D0000 		_ADR	EDIGS
 1609 2d9c A7200000 		_UNNEST
 1610              	
 1611              	/*************************
 1612              	    HEX	 ( -- )
 1613              	 	Use radix 16 as 
 1614              		base for numeric 
 1615              		conversions.
 1616              	*************************/
 1617 2da0 542D0000 		_HEADER HEX,3,"HEX"
 1617      03484558 
 1618 2da8 504700BF 		_NEST
 1619 2dac 1F220000 		_DOLIT 16
 1619      10000000 
 1620 2db4 85270000 		_ADR	BASE
 1621 2db8 91220000 		_ADR	STORE
 1622 2dbc A7200000 		_UNNEST
 1623              	
 1624              	/**************************
 1625              		BIN ( -- )
 1626              		Use radix 2 as 
 1627              		base for numeric 
 1628              		conversion 
 1629              	**************************/
 1630 2dc0 A42D0000 		_HEADER BIN,3,"BIN"
 1630      0342494E 
 1631 2dc8 504700BF 		_NEST 
 1632 2dcc 1F220000 		_DOLIT 2 
 1632      02000000 
 1633 2dd4 85270000 		_ADR BASE 
 1634 2dd8 91220000 		_ADR STORE
 1635 2ddc A7200000 		_UNNEST 
 1636              	
 1637              	/************************
 1638              	    DECIMAL	( -- )
 1639              	 	Use radix 10 as base
 1640              		for numeric conversions.
 1641              	*************************/
 1642 2de0 C42D0000 		_HEADER DECIM,7,"DECIMAL"
 1642      07444543 
 1642      494D414C 
 1643 2dec 504700BF 		_NEST
 1644 2df0 1F220000 		_DOLIT 10
 1644      0A000000 
 1645 2df8 85270000 		_ADR	BASE
ARM GAS  forth.s 			page 117


 1646 2dfc 91220000 		_ADR	STORE
 1647 2e00 A7200000 		_UNNEST
 1648              	
 1649              	/************************************
 1650              	  Numeric input, single precision
 1651              	***********************************/
 1652              	
 1653              	/***********************************
 1654              	    DIGIT?	( c base -- u t )
 1655              	 	Convert a character to its 
 1656              		numeric value. A flag 
 1657              		indicates success.
 1658              	**********************************/
 1659 2e04 E42D0000 		_HEADER DIGTQ,6,"DIGIT?"
 1659      06444947 
 1659      49543F00 
 1660 2e10 504700BF 		_NEST
 1661 2e14 F9220000 		_ADR	TOR
 1662 2e18 1F220000 		_DOLIT 	'0'
 1662      30000000 
 1663 2e20 25240000 		_ADR	SUBB
 1664 2e24 1F220000 		_DOLIT 9
 1664      09000000 
 1665 2e2c 75230000 		_ADR	OVER
 1666 2e30 35260000 		_ADR	LESS
 1667 2e34 5F220000 		_QBRAN	DGTQ1
 1667      5C2E0000 
 1668 2e3c 1F220000 		_DOLIT 7
 1668      07000000 
 1669 2e44 25240000 		_ADR	SUBB
 1670 2e48 51230000 		_ADR	DUPP
 1671 2e4c 1F220000 		_DOLIT	10
 1671      0A000000 
 1672 2e54 35260000 		_ADR	LESS
 1673 2e58 A9230000 		_ADR	ORR
 1674              	DGTQ1:
 1675 2e5c 51230000 		_ADR	DUPP
 1676 2e60 D1220000 		_ADR	RFROM
 1677 2e64 1D260000 		_ADR	ULESS
 1678 2e68 A7200000 		_UNNEST
 1679              	
 1680              	/*****************************
 1681              		( a c -- a+ n c- )
 1682              		a  string pointer 
 1683              		c string length 
 1684              		a+ updated pointer 
 1685              		n  parsed integer 
 1686              		c- character left in string   
 1687              	****************************/
 1688              		.type PARSE_DIGITS, %function 
 1689              	PARSE_DIGITS:
 1690 2e6c 3046     		mov T0,TOS // string length 
 1691 2e6e 57F8046B 		_POP // TOS <- a 
 1692 2e72 85EA0505 		eor WP,WP  // integer accumulator  
 1693 2e76 E269     		ldr T2,[UP,#NBASE] // conversion base 
 1694 2e78 98B1     	1:	cbz T0, 8f 
 1695 2e7a 16F8011B 		ldrb T1,[TOS],#1
ARM GAS  forth.s 			page 118


 1696 2e7e A1F13001 		sub T1,#'0'
 1697 2e82 0A29     		cmp T1,#10 
 1698 2e84 01D4     		bmi 2f 
 1699 2e86 A1F10701 		sub T1,#7
 1700 2e8a 9142     	2:  cmp T1,T2
 1701 2e8c 05D2     		bcs 7f 
 1702 2e8e 02FB05F5 		mul WP,T2 
 1703 2e92 0D44     		add WP,T1
 1704 2e94 A0F10100 		sub T0,#1 
 1705 2e98 EEE7     		b 1b 
 1706              	7:  // not a valid character 
 1707 2e9a A6F10106 		sub TOS,#1
 1708 2e9e 00F10100 		add T0,#1 
 1709 2ea2 47F8046D 	8:	_PUSH // -- a+
 1710 2ea6 47F8045D 		str WP,[DSP,#-4]! // -- a+ n 
 1711 2eaa 0646     		mov TOS,T0  // -- a+ n c- 
 1712 2eac FFF7F8B8 		_NEXT 
 1713              	
 1714              	/************************************
 1715              		DASH? ( a c -- a+ c- t | a c f )
 1716              		check if *a is '-' 
 1717              	*************************************/
 1718 2eb0 082E0000 		_HEADER DASHQ,5,"DASH?"
 1718      05444153 
 1718      483F00BF 
 1719 2ebc 82EA0202 		eor T2,T2  // flag 
 1720 2ec0 3868     		ldr T0,[DSP] // T0 <- a 
 1721 2ec2 47F8046D 		str TOS,[DSP,#-4]! // a c c 
 1722 2ec6 10F8011B 		ldrb T1,[T0],#1
 1723 2eca 2D29     		cmp T1,#'-'
 1724 2ecc 05D1     		bne 9f 
 1725 2ece 7860     		str T0,[DSP,#4] // a+ 
 1726 2ed0 A6F10106 		sub TOS,#1 
 1727 2ed4 3E60     		str TOS,[DSP] // a+ c- 
 1728 2ed6 6FEA0202 		mvn T2,T2 // -1 
 1729 2eda 1646     	9:	mov TOS,T2 // a+ c- -1 | a c 0 
 1730 2edc FFF7E0B8 		_NEXT
 1731              	
 1732              	
 1733              	/**********************************
 1734              	    INT?	( a -- n T | a F )
 1735              	 	parse string for at 'a' for 
 1736              		integer. Push a flag on TOS.
 1737              		integer form:
 1738              			[-]hex_digit+  | 
 1739              			$[-]hex_digit+ |
 1740              			%[-]bin_digit+ | 
 1741              			[-]dec_digit+ 
 1742              	**********************************/
 1743 2ee0 B42E0000 		_HEADER INTQ,4,"INT?"
 1743      04494E54 
 1743      3F0000BF 
 1744 2eec 504700BF 		_NEST
 1745 2ef0 85270000 		_ADR	BASE
 1746 2ef4 A5220000 		_ADR	AT
 1747 2ef8 F9220000 		_ADR	TOR
 1748 2efc 1F220000 		_DOLIT	0      // a 0 
ARM GAS  forth.s 			page 119


 1748      00000000 
 1749 2f04 75230000 		_ADR	OVER   // a 0 a 
 1750 2f08 ED260000 		_ADR	COUNT  // a 0 a+ c 
 1751 2f0c 75230000 		_ADR	OVER   // a 0 a+ c a+
 1752 2f10 C5220000 		_ADR	CAT    // a 0 a+ c char 
 1753 2f14 1F220000 		_DOLIT '$'     // a 0 a+ c char '$'
 1753      24000000 
 1754 2f1c 05260000 		_ADR	EQUAL  // a 0 a+ c f 
 1755 2f20 5F220000 		_QBRAN	0f    
 1755      442F0000 
 1756 2f28 A92D0000 		_ADR	HEX
 1757 2f2c 61230000 		_ADR	SWAP  // a 0 c a+ 
 1758 2f30 71240000 		_ADR	ONEP
 1759 2f34 61230000 		_ADR	SWAP
 1760 2f38 81240000 		_ADR	ONEM // a 0 a+ c 
 1761 2f3c 73220000 		_BRAN   1f
 1761      742F0000 
 1762 2f44 75230000 	0:  _ADR    OVER  // a 0 a+ c a+
 1763 2f48 C5220000 		_ADR    CAT   // a 0 a+ c char 
 1764 2f4c 1F220000 		_DOLIT  '%'   // a 0 a+ c char '%'
 1764      25000000 
 1765 2f54 05260000 		_ADR	EQUAL  // a 0 a+ c f 
 1766 2f58 5F220000 		_QBRAN  1f
 1766      742F0000 
 1767 2f60 C92D0000 		_ADR	BIN 
 1768 2f64 61230000 		_ADR	SWAP 
 1769 2f68 71240000 		_ADR	ONEP 
 1770 2f6c 61230000 		_ADR	SWAP 
 1771 2f70 81240000 		_ADR	ONEM
 1772              	1:  // a 0 a+ c 
 1773 2f74 BD2E0000 		_ADR	DASHQ
 1774 2f78 F9220000 		_ADR	TOR   // save sign -- a 0 a+ c- 
 1775 2f7c 25250000 		_ADR	QDUP
 1776 2f80 5F220000 		_QBRAN	6f
 1776      CC2F0000 
 1777 2f88 01000000 		_ADR	PARSE_DIGITS  // a 0 a+ c -- a 0 a+ n c- 
 1778 2f8c F1250000 		_ADR	ZEQUAL
 1779 2f90 5F220000 		_QBRAN  5f // digits left, not an integer 
 1779      C82F0000 
 1780 2f98 D1220000 	2:	_ADR	RFROM  // sign 
 1781 2f9c 5F220000 		_QBRAN  3f   // positive integer 
 1781      A82F0000 
 1782 2fa4 CD250000 		_ADR	NEGAT
 1783              	3:	
 1784 2fa8 4D250000 		_ADR	NROT  // a n 0 a+
 1785 2fac 61250000 		_ADR	DDROP // a n 
 1786 2fb0 1F220000 		_DOLIT  -1    // a n -1 
 1786      FFFFFFFF 
 1787 2fb8 39250000 		_ADR	ROT   // n -1 a 
 1788 2fbc 41230000 		_ADR	DROP 
 1789 2fc0 73220000 		_BRAN   7f  
 1789      D42F0000 
 1790 2fc8 41230000 	5:  _ADR    DROP  // -- a 0 a+   	 
 1791 2fcc D1220000 	6:  _ADR	RFROM
 1792 2fd0 61250000 		_ADR	DDROP
 1793 2fd4 D1220000 	7:	_ADR	RFROM
 1794 2fd8 85270000 		_ADR	BASE
ARM GAS  forth.s 			page 120


 1795 2fdc 91220000 		_ADR	STORE
 1796 2fe0 A7200000 		_UNNEST
 1797              	
 1798              	
 1799              	/********************
 1800              	  console I/O
 1801              	********************/
 1802              	
 1803              	/**********************
 1804              	    SPACE	( -- )
 1805              	 	Send the blank 
 1806              		character to 
 1807              		the output device.
 1808              	************************/
 1809 2fe4 E42E0000 		_HEADER SPACE,5,"SPACE"
 1809      05535041 
 1809      434500BF 
 1810 2ff0 504700BF 		_NEST
 1811 2ff4 D1240000 		_ADR	BLANK
 1812 2ff8 29210000 		_ADR	EMIT
 1813 2ffc A7200000 		_UNNEST
 1814              	
 1815              	/***************************
 1816              	    SPACES	( +n -- )
 1817              	 	Send n spaces to the 
 1818              		output device.
 1819              	****************************/
 1820 3000 E82F0000 		_HEADER SPACS,6,"SPACES"
 1820      06535041 
 1820      43455300 
 1821 300c 504700BF 		_NEST
 1822 3010 1F220000 		_DOLIT	0
 1822      00000000 
 1823 3018 7D260000 		_ADR	MAX
 1824 301c F9220000 		_ADR	TOR
 1825 3020 73220000 		_BRAN	CHAR2
 1825      2C300000 
 1826              	CHAR1:
 1827 3028 F12F0000 		_ADR	SPACE
 1828              	CHAR2:
 1829 302c 41220000 		_DONXT	CHAR1
 1829      28300000 
 1830 3034 A7200000 		_UNNEST
 1831              	
 1832              	/***********************
 1833              	    TYPE	( b u -- )
 1834              	 	Output u characters 
 1835              		from b.
 1836              	************************/
 1837 3038 04300000 		_HEADER TYPEE,4,"TYPE"
 1837      04545950 
 1837      450000BF 
 1838 3044 504700BF 		_NEST
 1839 3048 F9220000 		_ADR  TOR   // ( a+1 -- R: u )
 1840 304c 73220000 		_BRAN	TYPE2
 1840      60300000 
 1841              	TYPE1:  
ARM GAS  forth.s 			page 121


 1842 3054 ED260000 		_ADR  COUNT
 1843 3058 2D2A0000 		_ADR TCHAR
 1844 305c 29210000 		_ADR EMIT
 1845              	TYPE2:  
 1846 3060 41220000 		_DONXT	TYPE1
 1846      54300000 
 1847 3068 41230000 		_ADR	DROP
 1848 306c A7200000 		_UNNEST
 1849              	
 1850              	/***************************
 1851              	    CR	  ( -- )
 1852              	 	Output a carriage return
 1853              		and a line feed.
 1854              	****************************/
 1855 3070 3C300000 		_HEADER CR,2,"CR"
 1855      02435200 
 1856 3078 504700BF 		_NEST
 1857 307c 1F220000 		_DOLIT	CRR
 1857      0D000000 
 1858 3084 29210000 		_ADR	EMIT
 1859 3088 1F220000 		_DOLIT	LF
 1859      0A000000 
 1860 3090 29210000 		_ADR	EMIT
 1861 3094 A7200000 		_UNNEST
 1862              	
 1863              	/******************************************
 1864              	  do_$	( -- a )
 1865              	  Return the address of a compiled string.
 1866              	  adjust return address to skip over it.
 1867              	hidden word used by compiler. 
 1868              	******************************************/
 1869              	DOSTR:
 1870 3098 504700BF 		_NEST     
 1871              	/* compiled string address is 2 levels deep */
 1872 309c D1220000 		_ADR	RFROM	// { -- a1 }
 1873 30a0 D1220000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 1874 30a4 51230000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 1875 30a8 ED260000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1876 30ac 15240000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 1877 30b0 112A0000 		_ADR	ALGND	//  end of string
 1878              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 1879 30b4 F9220000 		_ADR	TOR		//  address after string { -- a1 a2 }
 1880 30b8 61230000 		_ADR	SWAP	//  count tugged
 1881 30bc F9220000 		_ADR	TOR     //  ( -- a2) is string address
 1882 30c0 A7200000 		_UNNEST
 1883              	
 1884              	/******************************************
 1885              	    $"|	( -- a )
 1886              	 	Run time routine compiled by _". 
 1887              		Return address of a compiled string.
 1888              	hidden word used by compiler
 1889              	*****************************************/
 1890              	STRQP:
 1891 30c4 504700BF 		_NEST
 1892 30c8 99300000 		_ADR	DOSTR
 1893 30cc A7200000 		_UNNEST			// force a call to dostr
 1894              	
ARM GAS  forth.s 			page 122


 1895              	/*******************************
 1896              	    .$	( a -- )
 1897              	 	Run time routine of ." 
 1898              		Output a compiled string.
 1899              	hidden word used by compiler
 1900              	*******************************/
 1901              	DOTST:
 1902 30d0 504700BF 		_NEST
 1903 30d4 ED260000 		_ADR	COUNT // ( -- a+1 c )
 1904 30d8 45300000 		_ADR	TYPEE
 1905 30dc A7200000 		_UNNEST
 1906              	
 1907              	/**********************
 1908              	    ."|	( -- )
 1909              	 	Run time routine of ." 
 1910              		Output a compiled string.
 1911              	hidden word used by compiler
 1912              	*****************************/
 1913              	DOTQP:
 1914 30e0 504700BF 		_NEST
 1915 30e4 99300000 		_ADR	DOSTR
 1916 30e8 D1300000 		_ADR	DOTST
 1917 30ec A7200000 		_UNNEST
 1918              	
 1919              	/******************************
 1920              	    .R	  ( n +n -- )
 1921              	 	Display an integer in a 
 1922              		field of n columns, 
 1923              		right justified.
 1924              	*******************************/
 1925 30f0 74300000 		_HEADER DOTR,2,".R"
 1925      022E5200 
 1926 30f8 504700BF 		_NEST
 1927 30fc F9220000 		_ADR	TOR
 1928 3100 792D0000 		_ADR	STRR
 1929 3104 D1220000 		_ADR	RFROM
 1930 3108 75230000 		_ADR	OVER
 1931 310c 25240000 		_ADR	SUBB
 1932 3110 0D300000 		_ADR	SPACS
 1933 3114 45300000 		_ADR	TYPEE
 1934 3118 A7200000 		_UNNEST
 1935              	
 1936              	/*************************
 1937              	    U.R	 ( u +n -- )
 1938              	 	Display an unsigned 
 1939              		integer in n column, 
 1940              		right justified.
 1941              	***************************/
 1942 311c F4300000 		_HEADER UDOTR,3,"U.R"
 1942      03552E52 
 1943 3124 504700BF 		_NEST
 1944 3128 F9220000 		_ADR	TOR
 1945 312c 992C0000 		_ADR	BDIGS
 1946 3130 052D0000 		_ADR	DIGS
 1947 3134 592D0000 		_ADR	EDIGS
 1948 3138 D1220000 		_ADR	RFROM
 1949 313c 75230000 		_ADR	OVER
ARM GAS  forth.s 			page 123


 1950 3140 25240000 		_ADR	SUBB
 1951 3144 0D300000 		_ADR	SPACS
 1952 3148 45300000 		_ADR	TYPEE
 1953 314c A7200000 		_UNNEST
 1954              	
 1955              	/************************
 1956              	    U.	  ( u -- )
 1957              	 	Display an unsigned 
 1958              		integer in free format.
 1959              	***************************/
 1960 3150 20310000 		_HEADER UDOT,2,"U."
 1960      02552E00 
 1961 3158 504700BF 		_NEST
 1962 315c 992C0000 		_ADR	BDIGS
 1963 3160 052D0000 		_ADR	DIGS
 1964 3164 592D0000 		_ADR	EDIGS
 1965 3168 F12F0000 		_ADR	SPACE
 1966 316c 45300000 		_ADR	TYPEE
 1967 3170 A7200000 		_UNNEST
 1968              	
 1969              	/************************
 1970              	    .	   ( w -- )
 1971              	 	Display an integer 
 1972              		in free format, 
 1973              		preceeded by a space.
 1974              	**************************/
 1975 3174 54310000 		_HEADER DOT,1,"."
 1975      012E00BF 
 1976 317c 504700BF 		_NEST
 1977 3180 85270000 		_ADR	BASE
 1978 3184 A5220000 		_ADR	AT
 1979 3188 1F220000 		_DOLIT 10
 1979      0A000000 
 1980 3190 BD230000 		_ADR	XORR			// ?decimal
 1981 3194 5F220000 		_QBRAN	DOT1
 1981      A4310000 
 1982 319c 59310000 		_ADR	UDOT
 1983 31a0 A7200000 		_UNNEST			// no,display unsigned
 1984              	DOT1:
 1985 31a4 792D0000 	    _ADR	STRR
 1986 31a8 F12F0000 		_ADR	SPACE
 1987 31ac 45300000 		_ADR	TYPEE
 1988 31b0 A7200000 		_UNNEST			// yes, display signed
 1989              	
 1990              	/***********************
 1991              		H. ( w -- )
 1992              		display integer 
 1993              		in hexadecimal 
 1994              	*********************/
 1995 31b4 78310000 		_HEADER HDOT,2,"H."
 1995      02482E00 
 1996 31bc 504700BF 		_NEST 
 1997 31c0 85270000 		_ADR BASE
 1998 31c4 A5220000 		_ADR AT 
 1999 31c8 61230000 		_ADR SWAP
 2000 31cc A92D0000 		_ADR HEX
 2001 31d0 59310000 		_ADR UDOT 
ARM GAS  forth.s 			page 124


 2002 31d4 85270000 		_ADR BASE
 2003 31d8 91220000 		_ADR STORE  
 2004 31dc A7200000 		_UNNEST 
 2005              	
 2006              	
 2007              	/***********************
 2008              	    ?	   ( a -- )
 2009              	 	Display the contents
 2010              		in a memory cell.
 2011              	*************************/
 2012 31e0 B8310000 		_HEADER QUEST,1,"?"
 2012      013F00BF 
 2013 31e8 504700BF 		_NEST
 2014 31ec A5220000 		_ADR	AT
 2015 31f0 7D310000 		_ADR	DOT
 2016 31f4 A7200000 		_UNNEST
 2017              	
 2018              	/**************
 2019              	  Parsing
 2020              	***************/
 2021              	
 2022              	/*********************************************
 2023              	    parse	( b u c -- b u delta //  string> )
 2024              	 	Scan word delimited by c. 
 2025              		Return found string and its offset.
 2026              	hidden word used by PARSE
 2027              	**********************************************/
 2028              	PARS:
 2029 31f8 504700BF 		_NEST
 2030 31fc 8F270000 		_ADR	TEMP
 2031 3200 91220000 		_ADR	STORE
 2032 3204 75230000 		_ADR	OVER
 2033 3208 F9220000 		_ADR	TOR
 2034 320c 51230000 		_ADR	DUPP
 2035 3210 5F220000 		_QBRAN	PARS8
 2035      0C330000 
 2036 3218 81240000 		_ADR	ONEM
 2037 321c 8F270000 		_ADR	TEMP
 2038 3220 A5220000 		_ADR	AT
 2039 3224 D1240000 		_ADR	BLANK
 2040 3228 05260000 		_ADR	EQUAL
 2041 322c 5F220000 		_QBRAN	PARS3
 2041      80320000 
 2042 3234 F9220000 		_ADR	TOR
 2043              	PARS1:
 2044 3238 D1240000 		_ADR	BLANK
 2045 323c 75230000 		_ADR	OVER
 2046 3240 C5220000 		_ADR	CAT			// skip leading blanks 
 2047 3244 25240000 		_ADR	SUBB
 2048 3248 85230000 		_ADR	ZLESS
 2049 324c B9250000 		_ADR	INVER
 2050 3250 5F220000 		_QBRAN	PARS2
 2050      7C320000 
 2051 3258 71240000 		_ADR	ONEP
 2052 325c 41220000 		_DONXT	PARS1
 2052      38320000 
 2053 3264 D1220000 		_ADR	RFROM
ARM GAS  forth.s 			page 125


 2054 3268 41230000 		_ADR	DROP
 2055 326c 1F220000 		_DOLIT	0
 2055      00000000 
 2056 3274 51230000 		_ADR	DUPP
 2057 3278 A7200000 		_UNNEST
 2058              	PARS2:
 2059 327c D1220000 		_ADR	RFROM
 2060              	PARS3:
 2061 3280 75230000 		_ADR	OVER
 2062 3284 61230000 		_ADR	SWAP
 2063 3288 F9220000 		_ADR	TOR
 2064              	PARS4:
 2065 328c 8F270000 		_ADR	TEMP
 2066 3290 A5220000 		_ADR	AT
 2067 3294 75230000 		_ADR	OVER
 2068 3298 C5220000 		_ADR	CAT
 2069 329c 25240000 		_ADR	SUBB			// scan for delimiter
 2070 32a0 8F270000 		_ADR	TEMP
 2071 32a4 A5220000 		_ADR	AT
 2072 32a8 D1240000 		_ADR	BLANK
 2073 32ac 05260000 		_ADR	EQUAL
 2074 32b0 5F220000 		_QBRAN	PARS5
 2074      BC320000 
 2075 32b8 85230000 		_ADR	ZLESS
 2076              	PARS5:
 2077 32bc 5F220000 		_QBRAN	PARS6
 2077      E0320000 
 2078 32c4 71240000 		_ADR	ONEP
 2079 32c8 41220000 		_DONXT	PARS4
 2079      8C320000 
 2080 32d0 51230000 		_ADR	DUPP
 2081 32d4 F9220000 		_ADR	TOR
 2082 32d8 73220000 		_BRAN	PARS7
 2082      F4320000 
 2083              	PARS6:
 2084 32e0 D1220000 		_ADR	RFROM
 2085 32e4 41230000 		_ADR	DROP
 2086 32e8 51230000 		_ADR	DUPP
 2087 32ec 71240000 		_ADR	ONEP
 2088 32f0 F9220000 		_ADR	TOR
 2089              	PARS7:
 2090 32f4 75230000 		_ADR	OVER
 2091 32f8 25240000 		_ADR	SUBB
 2092 32fc D1220000 		_ADR	RFROM
 2093 3300 D1220000 		_ADR	RFROM
 2094 3304 25240000 		_ADR	SUBB
 2095 3308 A7200000 		_UNNEST
 2096              	PARS8:
 2097 330c 75230000 		_ADR	OVER
 2098 3310 D1220000 		_ADR	RFROM
 2099 3314 25240000 		_ADR	SUBB
 2100 3318 A7200000 		_UNNEST
 2101              	
 2102              	/************************************
 2103              	    PARSE	( c -- b u //  string> )
 2104              	 	Scan input stream and return 
 2105              		counted string delimited by c.
ARM GAS  forth.s 			page 126


 2106              	************************************/
 2107 331c E4310000 		_HEADER PARSE,5,"PARSE"
 2107      05504152 
 2107      534500BF 
 2108 3328 504700BF 		_NEST
 2109 332c F9220000 		_ADR	TOR
 2110 3330 FD2A0000 		_ADR	TIB
 2111 3334 B9270000 		_ADR	INN
 2112 3338 A5220000 		_ADR	AT
 2113 333c 15240000 		_ADR	PLUS			// current input buffer pointer
 2114 3340 CD270000 		_ADR	NTIB
 2115 3344 A5220000 		_ADR	AT
 2116 3348 B9270000 		_ADR	INN
 2117 334c A5220000 		_ADR	AT
 2118 3350 25240000 		_ADR	SUBB			// remaining count
 2119 3354 D1220000 		_ADR	RFROM
 2120 3358 F9310000 		_ADR	PARS
 2121 335c B9270000 		_ADR	INN
 2122 3360 A5260000 		_ADR	PSTOR
 2123 3364 A7200000 		_UNNEST
 2124              	
 2125              	/*******************************
 2126              	    .(	  ( -- )
 2127              	 	Output following string 
 2128              		up to next ) .
 2129              	******************************/
 2130 3368 20330000 		_HEADER DOTPR,2,".("
 2130      022E2800 
 2131 3370 504700BF 		_NEST
 2132 3374 1F220000 		_DOLIT	')'
 2132      29000000 
 2133 337c 29330000 		_ADR	PARSE
 2134 3380 45300000 		_ADR	TYPEE
 2135 3384 A7200000 		_UNNEST
 2136              	
 2137              	/************************
 2138              	    (	   ( -- )
 2139              	 	Ignore following 
 2140              		string up to next )
 2141              		A comment.
 2142              	************************/
 2143 3388 6C330000 		_HEADER PAREN,IMEDD+1,"("
 2143      812800BF 
 2144 3390 504700BF 		_NEST
 2145 3394 1F220000 		_DOLIT	')'
 2145      29000000 
 2146 339c 29330000 		_ADR	PARSE
 2147 33a0 61250000 		_ADR	DDROP
 2148 33a4 A7200000 		_UNNEST
 2149              	
 2150              	/*******************
 2151              	    \	   ( -- )
 2152              	 	Ignore following 
 2153              		text till the 
 2154              		end of line.
 2155              	********************/
 2156 33a8 8C330000 		_HEADER BKSLA,IMEDD+1,"\\"
ARM GAS  forth.s 			page 127


 2156      815C00BF 
 2157 33b0 504700BF 		_NEST
 2158 33b4 CD270000 		_ADR	NTIB
 2159 33b8 A5220000 		_ADR	AT
 2160 33bc B9270000 		_ADR	INN
 2161 33c0 91220000 		_ADR	STORE
 2162 33c4 A7200000 		_UNNEST
 2163              	
 2164              	/******************************
 2165              	    CHAR	( -- c )
 2166              	 	Parse next word and
 2167              		return its first character.
 2168              	*******************************/
 2169 33c8 AC330000 		_HEADER CHAR,4,"CHAR"
 2169      04434841 
 2169      520000BF 
 2170 33d4 504700BF 		_NEST
 2171 33d8 D1240000 		_ADR	BLANK
 2172 33dc 29330000 		_ADR	PARSE
 2173 33e0 41230000 		_ADR	DROP
 2174 33e4 C5220000 		_ADR	CAT
 2175 33e8 A7200000 		_UNNEST
 2176              	
 2177              	/**********************************
 2178              	    WORD	( c -- a //  string> )
 2179              	 	Parse a word from input stream
 2180              		and copy it to code dictionary.
 2181              	***********************************/
 2182 33ec CC330000 		_HEADER WORDD,4,"WORD"
 2182      04574F52 
 2182      440000BF 
 2183 33f8 504700BF 		_NEST
 2184 33fc 29330000 		_ADR	PARSE
 2185 3400 C52A0000 		_ADR	HERE
 2186 3404 B1240000 		_ADR	CELLP
 2187 3408 CD2B0000 		_ADR	PACKS
 2188 340c A7200000 		_UNNEST
 2189              	
 2190              	/********************************
 2191              	    TOKEN	( -- a //  string> )
 2192              	 	Parse a word from input 
 2193              		stream and copy it to 
 2194              		name dictionary.
 2195              	*********************************/
 2196 3410 F0330000 		_HEADER TOKEN,5,"TOKEN"
 2196      05544F4B 
 2196      454E00BF 
 2197 341c 504700BF 		_NEST
 2198 3420 D1240000 		_ADR	BLANK
 2199 3424 F9330000 		_ADR	WORDD
 2200 3428 FD350000 		_ADR	UPPER 
 2201 342c A7200000 		_UNNEST
 2202              	
 2203              	/**********************
 2204              	  Dictionary search
 2205              	***********************/
 2206              	
ARM GAS  forth.s 			page 128


 2207              	/*************************
 2208              	    NAME>	( na -- ca )
 2209              	 	Return a code address
 2210              		given a name address.
 2211              	**************************/
 2212 3430 14340000 		_HEADER NAMET,5,"NAME>"
 2212      054E414D 
 2212      453E00BF 
 2213 343c 504700BF 		_NEST
 2214 3440 ED260000 		_ADR	COUNT
 2215 3444 1F220000 		_DOLIT	0x1F
 2215      1F000000 
 2216 344c 95230000 		_ADR	ANDD
 2217 3450 15240000 		_ADR	PLUS
 2218 3454 112A0000 		_ADR	ALGND
 2219 3458 A7200000 		_UNNEST
 2220              	
 2221              	/***************************************
 2222              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2223              	 	Compare u bytes in two strings. 
 2224              		Return 0 if identical.
 2225              	
 2226              	  Picatout 2020-12-01, 
 2227              	    Because of problem with .align 
 2228              		directive that doesn't fill 
 2229              		with zero's I had to change 
 2230              		the "SAME?" and "FIND" 
 2231              	 	words  to do a byte by byte comparison. 
 2232              	****************************************/
 2233 345c 34340000 		_HEADER SAMEQ,5,"SAME?"
 2233      0553414D 
 2233      453F00BF 
 2234 3468 504700BF 		_NEST
 2235 346c F9220000 		_ADR	TOR
 2236 3470 73220000 		_BRAN	SAME2
 2236      B4340000 
 2237              	SAME1:
 2238 3478 75230000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2239 347c E5220000 		_ADR	RAT   // a1 a2 a1 u 
 2240 3480 15240000 		_ADR	PLUS  // a1 a2 a1+u 
 2241 3484 C5220000 		_ADR	CAT	   // a1 a2 c1    		
 2242 3488 75230000 		_ADR	OVER  // a1 a2 c1 a2 
 2243 348c E5220000 		_ADR	RAT    
 2244 3490 15240000 		_ADR	PLUS    
 2245 3494 C5220000 		_ADR	CAT	  // a1 a2 c1 c2
 2246 3498 25240000 		_ADR	SUBB  
 2247 349c 25250000 		_ADR	QDUP
 2248 34a0 5F220000 		_QBRAN	SAME2
 2248      B4340000 
 2249 34a8 D1220000 		_ADR	RFROM
 2250 34ac 41230000 		_ADR	DROP
 2251 34b0 A7200000 		_UNNEST	// strings not equal
 2252              	SAME2:
 2253 34b4 41220000 		_DONXT	SAME1
 2253      78340000 
 2254 34bc 1F220000 		_DOLIT	0
 2254      00000000 
ARM GAS  forth.s 			page 129


 2255 34c4 A7200000 		_UNNEST	// strings equal
 2256              	
 2257              	/***********************************
 2258              	    FIND	( a na -- ca na | a F )
 2259              	 	Search a vocabulary for a string.
 2260              		Return ca and na if succeeded.
 2261              	hidden word used by NAME?
 2262              	
 2263              	  Picatout 2020-12-01,  
 2264              		 Modified from original. 
 2265              	   See comment for word "SAME?" 
 2266              	************************************/
 2267              	FIND:
 2268 34c8 504700BF 		_NEST
 2269 34cc 61230000 		_ADR	SWAP			// na a	
 2270 34d0 ED260000 		_ADR	COUNT			// na a+1 count
 2271 34d4 51230000 		_ADR	DUPP 
 2272 34d8 8F270000 		_ADR	TEMP
 2273 34dc 91220000 		_ADR	STORE			// na a+1 count 
 2274 34e0 F9220000 		_ADR  TOR		// na a+1  R: count  
 2275 34e4 61230000 		_ADR	SWAP			// a+1 na
 2276              	FIND1:
 2277 34e8 51230000 		_ADR	DUPP			// a+1 na na
 2278 34ec 5F220000 		_QBRAN	FIND6	// end of vocabulary
 2278      40350000 
 2279 34f4 51230000 		_ADR	DUPP			// a+1 na na
 2280 34f8 C5220000 		_ADR	CAT			// a+1 na name1
 2281 34fc 1F220000 		_DOLIT	MASKK
 2281      1FFFFFFF 
 2282 3504 95230000 		_ADR	ANDD
 2283 3508 E5220000 		_ADR	RAT			// a+1 na name1 count 
 2284 350c BD230000 		_ADR	XORR			// a+1 na,  same length?
 2285 3510 5F220000 		_QBRAN	FIND2
 2285      28350000 
 2286 3518 C1240000 		_ADR	CELLM			// a+1 la
 2287 351c A5220000 		_ADR	AT			// a+1 next_na
 2288 3520 73220000 		_BRAN	FIND1			// try next word
 2288      E8340000 
 2289              	FIND2:   
 2290 3528 71240000 		_ADR	ONEP			// a+1 na+1
 2291 352c 8F270000 		_ADR	TEMP
 2292 3530 A5220000 		_ADR	AT			// a+1 na+1 count
 2293 3534 69340000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2294              	FIND3:	
 2295 3538 73220000 		_BRAN	FIND4
 2295      58350000 
 2296              	FIND6:	
 2297 3540 D1220000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2298 3544 41230000 		_ADR	DROP			// a+1 0
 2299 3548 61230000 		_ADR	SWAP			// 0 a+1
 2300 354c 81240000 		_ADR	ONEM			// 0 a
 2301 3550 61230000 		_ADR	SWAP			// a 0 
 2302 3554 A7200000 		_UNNEST			// return without a match
 2303              	FIND4:	
 2304 3558 5F220000 		_QBRAN	FIND5			// a+1 na+1
 2304      74350000 
 2305 3560 81240000 		_ADR	ONEM			// a+1 na
ARM GAS  forth.s 			page 130


 2306 3564 C1240000 		_ADR	CELLM			// a+4 la
 2307 3568 A5220000 		_ADR	AT			// a+1 next_na
 2308 356c 73220000 		_BRAN	FIND1			// compare next name
 2308      E8340000 
 2309              	FIND5:	
 2310 3574 D1220000 		_ADR	RFROM			// a+1 na+1 count
 2311 3578 41230000 		_ADR	DROP			// a+1 na+1
 2312 357c 61230000 		_ADR	SWAP			// na+1 a+1
 2313 3580 41230000 		_ADR	DROP			// na+1
 2314 3584 81240000 		_ADR	ONEM			// na
 2315 3588 51230000 		_ADR	DUPP			// na na
 2316 358c 3D340000 		_ADR	NAMET			// na ca
 2317 3590 61230000 		_ADR	SWAP			// ca na
 2318 3594 A7200000 		_UNNEST			//  return with a match
 2319              	
 2320              	/********************************
 2321              	    NAME?	( a -- ca na | a F )
 2322              	 	Search all context vocabularies 
 2323              		for a string.
 2324              	***********************************/
 2325 3598 60340000 		_HEADER NAMEQ,5,"NAME?"
 2325      054E414D 
 2325      453F00BF 
 2326 35a4 504700BF 		_NEST
 2327 35a8 0D280000 		_ADR	CNTXT
 2328 35ac A5220000 		_ADR	AT
 2329 35b0 C9340000 		_ADR	FIND
 2330 35b4 A7200000 		_UNNEST
 2331              	
 2332              	/********************
 2333              	  console input
 2334              	********************/
 2335              	
 2336              	/****************************
 2337              		ASCIZ ( a -- a+ )
 2338              		convert counted string to 
 2339              		null terminated string 
 2340              		in pad.
 2341              	*****************************/
 2342 35b8 9C350000 		_HEADER ASCIZ,5,"ASCIZ" 
 2342      05415343 
 2342      495A00BF 
 2343 35c4 504700BF 		_NEST 
 2344 35c8 ED260000 		_ADR COUNT 
 2345 35cc F9220000 		_ADR TOR 
 2346 35d0 51230000 		_ADR DUPP 
 2347 35d4 D1220000 		_ADR RFROM
 2348 35d8 15240000 		_ADR PLUS 
 2349 35dc 1F220000 		_DOLIT 0 
 2349      00000000 
 2350 35e4 61230000 		_ADR SWAP 
 2351 35e8 B1220000 		_ADR CSTOR  
 2352 35ec FEF758BD 		_NEXT 
 2353              	
 2354              	/***********************
 2355              		UPPER (cstring -- cstring )
 2356              		convert to upper case in situ
ARM GAS  forth.s 			page 131


 2357              	*******************************/
 2358 35f0 BC350000 		_HEADER UPPER,5,"UPPER"
 2358      05555050 
 2358      455200BF 
 2359 35fc 504700BF 		_NEST 
 2360 3600 51230000 		_ADR DUPP 
 2361 3604 F9220000 		_ADR TOR 
 2362 3608 ED260000 		_ADR COUNT
 2363 360c 1F220000 		_DOLIT 0x1f
 2363      1F000000 
 2364 3614 95230000 		_ADR ANDD
 2365 3618 F9220000 		_ADR TOR 
 2366 361c 73220000 		_BRAN 3f
 2366      70360000 
 2367 3624 51230000 	1:  _ADR DUPP 
 2368 3628 ED260000 		_ADR COUNT 
 2369 362c 51230000 		_ADR DUPP 
 2370 3630 1F220000 		_DOLIT 'a'-1
 2370      60000000 
 2371 3638 65260000 		_ADR GREAT
 2372 363c 5F220000 		_QBRAN 2f 
 2372      68360000 
 2373 3644 51230000 		_ADR DUPP 
 2374 3648 1F220000 		_DOLIT 'z'+1 
 2374      7B000000 
 2375 3650 35260000 		_ADR LESS 
 2376 3654 5F220000 		_QBRAN 2f 
 2376      68360000 
 2377 365c 1F220000 		_DOLIT 0x5f  
 2377      5F000000 
 2378 3664 95230000 		_ADR ANDD
 2379 3668 39250000 	2:	_ADR ROT
 2380 366c B1220000 		_ADR CSTOR
 2381 3670 41220000 	3:  _DONXT 1b
 2381      24360000 
 2382 3678 41230000 		_ADR DROP 
 2383 367c D1220000 		_ADR RFROM
 2384 3680 A7200000 		_UNNEST 
 2385              	
 2386              	/**************************************
 2387              	   BKSP  ( bot eot cur -- bot eot cur )
 2388              	   Move cursor left by one character.
 2389              	hidden word used by KTAP
 2390              	***************************************/
 2391              	BKSP:
 2392 3684 504700BF 		_NEST
 2393 3688 F9220000 		_ADR	TOR
 2394 368c 75230000 		_ADR	OVER
 2395 3690 D1220000 		_ADR	RFROM
 2396 3694 61230000 		_ADR	SWAP
 2397 3698 75230000 		_ADR	OVER
 2398 369c BD230000 		_ADR	XORR
 2399 36a0 5F220000 		_QBRAN	BACK1
 2399      CC360000 
 2400 36a8 1F220000 		_DOLIT	BKSPP
 2400      08000000 
 2401 36b0 29210000 		_ADR	EMIT
ARM GAS  forth.s 			page 132


 2402 36b4 81240000 		_ADR	ONEM
 2403 36b8 D1240000 		_ADR	BLANK
 2404 36bc 29210000 		_ADR	EMIT
 2405 36c0 1F220000 		_DOLIT	BKSPP
 2405      08000000 
 2406 36c8 29210000 		_ADR	EMIT
 2407              	BACK1:
 2408 36cc A7200000 		  _UNNEST
 2409              	
 2410              	/****************************************
 2411              	   TAP	 ( bot eot cur c -- bot eot cur )
 2412              	   Accept and echo the key stroke 
 2413              	   and bump the cursor.
 2414              	hidden word used by KTAP 
 2415              	****************************************/
 2416              	TAP:
 2417 36d0 504700BF 		_NEST
 2418 36d4 51230000 		_ADR	DUPP
 2419 36d8 29210000 		_ADR	EMIT
 2420 36dc 75230000 		_ADR	OVER
 2421 36e0 B1220000 		_ADR	CSTOR
 2422 36e4 71240000 		_ADR	ONEP
 2423 36e8 A7200000 		_UNNEST
 2424              	
 2425              	
 2426              	/*******************************************
 2427              	    kTAP	( bot eot cur c -- bot eot cur )
 2428              	 	Process a key stroke, CR or backspace.
 2429              	hidden word used by ACCEPT 
 2430              	*******************************************/
 2431              	KTAP:
 2432              	TTAP:
 2433 36ec 504700BF 		_NEST
 2434 36f0 51230000 		_ADR	DUPP
 2435 36f4 1F220000 		_DOLIT	CRR
 2435      0D000000 
 2436 36fc BD230000 		_ADR	XORR
 2437 3700 5F220000 		_QBRAN  KTAP2
 2437      30370000 
 2438 3708 1F220000 		_DOLIT	BKSPP
 2438      08000000 
 2439 3710 BD230000 		_ADR	XORR
 2440 3714 5F220000 		_QBRAN	KTAP1
 2440      28370000 
 2441 371c D1240000 		_ADR	BLANK
 2442 3720 D1360000 		_ADR	TAP
 2443 3724 A7200000 		_UNNEST
 2444              	//	.word	0			// patch
 2445              	KTAP1:
 2446 3728 85360000 		_ADR	BKSP
 2447 372c A7200000 		_UNNEST
 2448              	KTAP2:
 2449 3730 41230000 		_ADR	DROP
 2450 3734 61230000 		_ADR	SWAP
 2451 3738 41230000 		_ADR	DROP
 2452 373c 51230000 		_ADR	DUPP
 2453 3740 A7200000 		_UNNEST
ARM GAS  forth.s 			page 133


 2454              	
 2455              	/************************************
 2456              	    ACCEPT	( b u -- b u )
 2457              	 	Accept characters to input 
 2458              		buffer. Return with actual count.
 2459              	*************************************/
 2460 3744 F4350000 		_HEADER ACCEP,6,"ACCEPT"
 2460      06414343 
 2460      45505400 
 2461 3750 504700BF 		_NEST
 2462 3754 75230000 		_ADR	OVER
 2463 3758 15240000 		_ADR	PLUS
 2464 375c 75230000 		_ADR	OVER
 2465              	ACCP1:
 2466 3760 89250000 		_ADR	DDUP
 2467 3764 BD230000 		_ADR	XORR
 2468 3768 5F220000 		_QBRAN	ACCP4
 2468      A8370000 
 2469 3770 05210000 		_ADR	KEY
 2470 3774 51230000 		_ADR	DUPP
 2471 3778 D1240000 		_ADR	BLANK
 2472 377c 1F220000 		_DOLIT 127
 2472      7F000000 
 2473 3784 99280000 		_ADR	WITHI
 2474 3788 5F220000 		_QBRAN	ACCP2
 2474      9C370000 
 2475 3790 D1360000 		_ADR	TAP
 2476 3794 73220000 		_BRAN	ACCP3
 2476      A0370000 
 2477              	ACCP2:
 2478 379c ED360000 		_ADR	KTAP
 2479              	ACCP3:	  
 2480 37a0 73220000 		_BRAN	ACCP1
 2480      60370000 
 2481              	ACCP4:
 2482 37a8 41230000 		_ADR	DROP
 2483 37ac 75230000 		_ADR	OVER
 2484 37b0 25240000 		_ADR	SUBB
 2485 37b4 A7200000 		_UNNEST
 2486              	
 2487              	/*****************************
 2488              	    QUERY	( -- )
 2489              	 	Accept input stream 
 2490              		to terminal input buffer.
 2491              	******************************/
 2492 37b8 48370000 		_HEADER QUERY,5,"QUERY"
 2492      05515545 
 2492      525900BF 
 2493 37c4 504700BF 		_NEST
 2494 37c8 FD2A0000 		_ADR	TIB
 2495 37cc 1F220000 		_DOLIT 80
 2495      50000000 
 2496 37d4 51370000 		_ADR	ACCEP
 2497 37d8 CD270000 		_ADR	NTIB
 2498 37dc 91220000 		_ADR	STORE
 2499 37e0 41230000 		_ADR	DROP
 2500 37e4 1F220000 		_DOLIT	0
ARM GAS  forth.s 			page 134


 2500      00000000 
 2501 37ec B9270000 		_ADR	INN
 2502 37f0 91220000 		_ADR	STORE
 2503 37f4 A7200000 		_UNNEST
 2504              	
 2505              	/********************
 2506              	  Error handling
 2507              	********************/
 2508              	
 2509              	/*********************
 2510              	    ABORT	( a -- )
 2511              	 	Reset data stack 
 2512              		and jump to QUIT.
 2513              	**********************/
 2514 37f8 BC370000 		_HEADER ABORT,5,"ABORT"
 2514      0541424F 
 2514      525400BF 
 2515 3804 504700BF 		_NEST
 2516              	ABORT1:
 2517 3808 F12F0000 		_ADR	SPACE
 2518 380c ED260000 		_ADR	COUNT
 2519 3810 45300000 		_ADR	TYPEE
 2520 3814 1F220000 		_DOLIT	0X3F
 2520      3F000000 
 2521 381c 29210000 		_ADR	EMIT
 2522 3820 79300000 		_ADR	CR
 2523 3824 8D390000 		_ADR	PRESE
 2524 3828 73220000 		_BRAN	QUIT
 2524      AC390000 
 2525              	
 2526              	/*******************************
 2527              	    _abort"	( f -- )
 2528              	 	Run time routine of ABORT"
 2529              		Abort with a message.
 2530              	hidden used by compiler 
 2531              	********************************/
 2532              	ABORQ:
 2533 3830 504700BF 		_NEST
 2534 3834 99300000 		_ADR	DOSTR
 2535 3838 61230000 		_ADR	SWAP 
 2536 383c 5F220000 		_QBRAN	1f	// text flag
 2536      4C380000 
 2537 3844 73220000 		_BRAN	ABORT1
 2537      08380000 
 2538              	1:
 2539 384c 41230000 		_ADR	DROP
 2540 3850 A7200000 		_UNNEST			// drop error
 2541              	
 2542              	/************************
 2543              	  The text interpreter
 2544              	************************/
 2545              	
 2546              	/***************************
 2547              	    $INTERPRET  ( a -- )
 2548              	 	Interpret a word. 
 2549              		If failed, try to 
 2550              		convert it to an integer.
ARM GAS  forth.s 			page 135


 2551              	******************************/
 2552 3854 FC370000 		_HEADER INTER,10,"$INTERPRET"
 2552      0A24494E 
 2552      54455250 
 2552      52455400 
 2553 3864 504700BF 		_NEST
 2554 3868 A5350000 		_ADR	NAMEQ
 2555 386c 25250000 		_ADR	QDUP	// ?defined
 2556 3870 5F220000 		_QBRAN	INTE1
 2556      A4380000 
 2557 3878 A5220000 		_ADR	AT
 2558 387c 1F220000 		_DOLIT	COMPO
 2558      40000000 
 2559 3884 95230000 		_ADR	ANDD	// ?compile only lexicon bits
 2560 3888 31380000 		_ABORQ	13," compile only"
 2560      0D20636F 
 2560      6D70696C 
 2560      65206F6E 
 2560      6C7900BF 
 2561 389c 35220000 		_ADR	EXECU
 2562 38a0 A7200000 		_UNNEST			// execute defined word
 2563              	INTE1:
 2564 38a4 79200000 		_ADR	NUMBER 
 2565 38a8 5F220000 		_QBRAN	INTE2
 2565      B4380000 
 2566 38b0 A7200000 		_UNNEST
 2567              	INTE2:
 2568 38b4 05380000 		_ADR	ABORT	// error
 2569              	
 2570              	/******************************
 2571              	    [	   ( -- )
 2572              	 	Start the text interpreter.
 2573              	*******************************/
 2574 38b8 58380000 		_HEADER LBRAC,IMEDD+1,"["
 2574      815B00BF 
 2575 38c0 504700BF 		_NEST
 2576 38c4 1F220000 		_DOLIT	INTER
 2576      64380000 
 2577 38cc E1270000 		_ADR	TEVAL
 2578 38d0 91220000 		_ADR	STORE
 2579 38d4 A7200000 		_UNNEST
 2580              	
 2581              	/**********************
 2582              	    .OK	 ( -- )
 2583              	 	Display "ok" only 
 2584              		while interpreting.
 2585              	************************/
 2586 38d8 BC380000 		_HEADER DOTOK,3,".OK"
 2586      032E4F4B 
 2587 38e0 504700BF 		_NEST
 2588 38e4 1F220000 		_DOLIT	INTER
 2588      64380000 
 2589 38ec E1270000 		_ADR	TEVAL
 2590 38f0 A5220000 		_ADR	AT
 2591 38f4 05260000 		_ADR	EQUAL
 2592 38f8 5F220000 		_QBRAN	DOTO1
 2592      08390000 
ARM GAS  forth.s 			page 136


 2593 3900 E1300000 		_DOTQP	3," ok"
 2593      03206F6B 
 2594              	DOTO1:
 2595 3908 79300000 		_ADR	CR
 2596 390c A7200000 		_UNNEST
 2597              	
 2598              	/*************************
 2599              	    ?STACK	( -- )
 2600              	 	Abort if the data 
 2601              		stack underflows.
 2602              	************************/
 2603 3910 DC380000 		_HEADER QSTAC,6,"?STACK"
 2603      063F5354 
 2603      41434B00 
 2604 391c 504700BF 		_NEST
 2605 3920 792A0000 		_ADR	DEPTH
 2606 3924 85230000 		_ADR	ZLESS	// check only for underflow
 2607 3928 31380000 		_ABORQ	9,"underflow"
 2607      09756E64 
 2607      6572666C 
 2607      6F7700BF 
 2608 3938 A7200000 		_UNNEST
 2609              	
 2610              	/*******************
 2611              	    EVAL	( -- )
 2612              	 	Interpret the 
 2613              		input stream.
 2614              	*******************/
 2615 393c 14390000 		_HEADER EVAL,4,"EVAL"
 2615      04455641 
 2615      4C0000BF 
 2616 3948 504700BF 		_NEST
 2617              	EVAL1:
 2618 394c 1D340000 	    _ADR	TOKEN
 2619 3950 51230000 		_ADR	DUPP
 2620 3954 C5220000 		_ADR	CAT	// ?input stream empty
 2621 3958 5F220000 		_QBRAN	EVAL2
 2621      74390000 
 2622 3960 E1270000 		_ADR	TEVAL
 2623 3964 152B0000 		_ADR	ATEXE
 2624 3968 1D390000 		_ADR	QSTAC	// evaluate input, check stack
 2625 396c 73220000 		_BRAN	EVAL1
 2625      4C390000 
 2626              	EVAL2:
 2627 3974 41230000 		_ADR	DROP
 2628 3978 E1380000 		_ADR	DOTOK
 2629 397c A7200000 		_UNNEST	// prompt
 2630              	
 2631              	/**********************************
 2632              	    PRESET	( -- )
 2633              	 	Reset data stack pointer 
 2634              		and the terminal input buffer.
 2635              	**********************************/
 2636 3980 40390000 		_HEADER PRESE,6,"PRESET"
 2636      06505245 
 2636      53455400 
 2637 398c 504700BF 		_NEST 
ARM GAS  forth.s 			page 137


 2638 3990 1F220000 		_DOLIT SPP 
 2638      00FF0120 
 2639 3998 1D230000 		_ADR SPSTOR 
 2640 399c A7200000 		_UNNEST 
 2641              	
 2642              	/*********************
 2643              	    QUIT	( -- )
 2644              	 	Reset return stack 
 2645              		pointer and start 
 2646              		text interpreter.
 2647              	***********************/
 2648 39a0 84390000 		_HEADER QUIT,4,"QUIT"
 2648      04515549 
 2648      540000BF 
 2649 39ac 1F220000 		_DOLIT RPP 
 2649      80FF0120 
 2650 39b4 0D230000 		_ADR RPSTOR 
 2651              	QUIT1:
 2652 39b8 C1380000 		_ADR	LBRAC			// start interpretation
 2653              	QUIT2:
 2654 39bc C5370000 		_ADR	QUERY			// get input
 2655 39c0 49390000 		_ADR	EVAL
 2656 39c4 73220000 		_BRAN	QUIT2	// continue till error
 2656      BC390000 
 2657              	
 2658              	/***************************
 2659              		FORGET ( <string> -- )
 2660              		forget all definition 
 2661              		starting at <string>
 2662              	****************************/
 2663 39cc A4390000 		_HEADER FORGET,6,"FORGET"
 2663      06464F52 
 2663      47455400 
 2664 39d8 504700BF 		_NEST 
 2665 39dc 1D340000 		_ADR TOKEN 
 2666 39e0 51230000 		_ADR DUPP 
 2667 39e4 5F220000 		_QBRAN 9f 
 2667      203A0000 
 2668 39ec A5350000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 2669 39f0 25250000 		_ADR QDUP 
 2670 39f4 5F220000 		_QBRAN 8f
 2670      1C3A0000 
 2671 39fc C1240000 		_ADR CELLM // ( ca la )
 2672 3a00 51230000 		_ADR DUPP 
 2673 3a04 21280000 		_ADR CPP   
 2674 3a08 91220000 		_ADR STORE
 2675 3a0c A5220000 		_ADR AT 
 2676 3a10 49280000 		_ADR LAST 
 2677 3a14 91220000 		_ADR STORE
 2678 3a18 753F0000 		_ADR OVERT 
 2679 3a1c 41230000 	8:  _ADR DROP 
 2680 3a20 A7200000 	9:	_UNNEST 
 2681              	
 2682              		.p2align 2 
 2683              	
 2684              	/*****************
 2685              	  The compiler
ARM GAS  forth.s 			page 138


 2686              	******************/
 2687              	
 2688              	/**************************************
 2689              	    '	   ( -- ca )
 2690              	 	Search context vocabularies 
 2691              		for the next word in input stream.
 2692              	***************************************/
 2693 3a24 D0390000 		_HEADER TICK,1,"'"
 2693      012700BF 
 2694 3a2c 504700BF 		_NEST
 2695 3a30 1D340000 		_ADR	TOKEN
 2696 3a34 A5350000 		_ADR	NAMEQ	// ?defined
 2697 3a38 5F220000 		_QBRAN	TICK1
 2697      443A0000 
 2698 3a40 A7200000 		_UNNEST	// yes, push code address
 2699              	TICK1:	
 2700 3a44 05380000 		_ADR ABORT	// no, error
 2701              	
 2702              	/***********************
 2703              	    ALLOT	( n -- )
 2704              	 	Allocate n bytes to 
 2705              		the ram area.
 2706              	************************/
 2707 3a48 283A0000 		_HEADER ALLOT,5,"ALLOT"
 2707      05414C4C 
 2707      4F5400BF 
 2708 3a54 504700BF 		_NEST
 2709 3a58 21280000 		_ADR	CPP
 2710 3a5c A5260000 		_ADR	PSTOR
 2711 3a60 A7200000 		_UNNEST			// adjust code pointer
 2712              	
 2713              	/******************************
 2714              	    ,	   ( w -- )
 2715              	 	Compile an integer 
 2716              		into the code dictionary.
 2717              	******************************/
 2718 3a64 4C3A0000 		_HEADER COMMA,1,","
 2718      012C00BF 
 2719 3a6c 504700BF 		_NEST
 2720 3a70 C52A0000 		_ADR	HERE
 2721 3a74 51230000 		_ADR	DUPP
 2722 3a78 B1240000 		_ADR	CELLP	// cell boundary
 2723 3a7c 21280000 		_ADR	CPP
 2724 3a80 91220000 		_ADR	STORE
 2725 3a84 91220000 		_ADR	STORE
 2726 3a88 A7200000 		_UNNEST	// adjust code pointer, compile
 2727              		.p2align 2 
 2728              	
 2729              	/************************************
 2730              	    [COMPILE]   ( -- //  string> )
 2731              	 	Compile the next immediate word 
 2732              		into code dictionary.
 2733              	*************************************/
 2734 3a8c 683A0000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 2734      895B434F 
 2734      4D50494C 
 2734      455D00BF 
ARM GAS  forth.s 			page 139


 2735 3a9c 504700BF 		_NEST
 2736 3aa0 2D3A0000 		_ADR	TICK
 2737 3aa4 6D3A0000 		_ADR	COMMA
 2738 3aa8 A7200000 		_UNNEST
 2739              	
 2740              	/****************************
 2741              	    COMPILE	( -- )
 2742              	 	Compile the next address 
 2743              		in colon list to code 
 2744              		dictionary.
 2745              	*******************************/
 2746 3aac 903A0000 		_HEADER COMPI,COMPO+7,"COMPILE"
 2746      47434F4D 
 2746      50494C45 
 2747 3ab8 504700BF 		_NEST
 2748 3abc D1220000 		_ADR	RFROM
 2749 3ac0 51230000 		_ADR	DUPP 
 2750 3ac4 A5220000 		_ADR	AT
 2751 3ac8 1F220000 		_DOLIT 1 
 2751      01000000 
 2752 3ad0 A9230000 		_ADR	ORR 
 2753 3ad4 6D3A0000 		_ADR	COMMA 
 2754 3ad8 B1240000 		_ADR	CELLP 
 2755 3adc F9220000 		_ADR	TOR 
 2756 3ae0 A7200000 		_UNNEST	// adjust return address
 2757              	
 2758              	/*************************
 2759              	    LITERAL	( w -- )
 2760              	 	Compile tos to code 
 2761              		dictionary as an 
 2762              		integer literal.
 2763              	***************************/
 2764 3ae4 B03A0000 		_HEADER LITER,IMEDD+7,"LITERAL"
 2764      874C4954 
 2764      4552414C 
 2765 3af0 504700BF 		_NEST
 2766 3af4 1F220000 		_COMPI	DOLIT
 2766      1E220000 
 2766      D13F0000 
 2767 3b00 6D3A0000 		_ADR	COMMA
 2768 3b04 A7200000 		_UNNEST
 2769              	
 2770              	/********************
 2771              	    $,"	( -- )
 2772              	 	Compile a literal 
 2773              		string up to next " .
 2774              	hidden word 
 2775              	************************/
 2776              	STRCQ:
 2777 3b08 504700BF 		_NEST
 2778 3b0c 1F220000 		_DOLIT -4
 2778      FCFFFFFF 
 2779 3b14 21280000 		_ADR	CPP
 2780 3b18 A5260000 		_ADR	PSTOR
 2781 3b1c 1F220000 		_DOLIT	'\"'
 2781      22000000 
 2782 3b24 F9330000 		_ADR	WORDD			// move word to code dictionary
ARM GAS  forth.s 			page 140


 2783 3b28 ED260000 		_ADR	COUNT
 2784 3b2c 15240000 		_ADR	PLUS
 2785 3b30 112A0000 		_ADR	ALGND			// calculate aligned end of string
 2786 3b34 21280000 		_ADR	CPP
 2787 3b38 91220000 		_ADR	STORE
 2788 3b3c A7200000 		_UNNEST 			// adjust the code pointer
 2789              	
 2790              	/*******************
 2791              	   Structures
 2792              	*******************/
 2793              	
 2794              	/*************************
 2795              	    FOR	 ( -- a )
 2796              	 	Start a FOR-NEXT loop 
 2797              		structure in a colon 
 2798              		definition.
 2799              	**************************/
 2800 3b40 E83A0000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 2800      C3464F52 
 2801 3b48 504700BF 		_NEST
 2802 3b4c 1F220000 		_COMPI	TOR
 2802      F8220000 
 2802      D13F0000 
 2803 3b58 C52A0000 		_ADR	HERE
 2804 3b5c A7200000 		_UNNEST
 2805              	
 2806              	/********************************
 2807              		DO ( limit start -- )
 2808              		initialise a DO...LOOP 
 2809              		or DO...+LOOP 
 2810              	********************************/
 2811 3b60 443B0000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 2811      C2444F00 
 2812 3b68 504700BF 		_NEST
 2813 3b6c 1F220000 		_COMPI SWAP
 2813      60230000 
 2813      D13F0000 
 2814 3b78 1F220000 		_COMPI TOR 
 2814      F8220000 
 2814      D13F0000 
 2815 3b84 1F220000 		_COMPI TOR 
 2815      F8220000 
 2815      D13F0000 
 2816 3b90 C52A0000 		_ADR HERE 
 2817 3b94 A7200000 		_UNNEST 
 2818              	
 2819              	DOPLOOP: // ( n -- R: counter limit )
 2820 3b98 B8E80300 		ldmfd RSP!,{T0,T1}
 2821 3b9c 3044     		add T0,TOS 
 2822 3b9e 28E90300 		stmfd RSP!,{T0,T1}
 2823 3ba2 8842     		cmp T0,T1 
 2824 3ba4 05D4     		bmi 9f 
 2825 3ba6 08F10808 		add RSP,#8
 2826 3baa 0CF1040C 		add IP,#4
 2827 3bae FEF777BA 		_NEXT 
 2828 3bb2 DCF800C0 	9:  ldr IP,[IP]
 2829 3bb6 FEF773BA 		_NEXT 
ARM GAS  forth.s 			page 141


 2830              		
 2831              	/***************************
 2832              		+LOOP ( a -- )
 2833              		increment counter 
 2834              		end loop if countr>limit
 2835              	****************************/
 2836 3bba 643B0000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 2836      C52B4C4F 
 2836      4F50
 2837 3bc4 504700BF 		_NEST 
 2838 3bc8 1F220000 		_COMPI DOPLOOP 
 2838      983B0000 
 2838      D13F0000 
 2839 3bd4 6D3A0000 		_ADR COMMA
 2840 3bd8 A7200000 		_UNNEST 
 2841              	
 2842              	DOLOOP: // ( -- R: counter limit )
 2843 3bdc D8F80000 		ldr T0,[RSP]
 2844 3be0 00F10100 		add T0,#1
 2845 3be4 C8F80000 		str T0,[RSP]
 2846 3be8 D8F80410 		ldr T1,[RSP,#4]
 2847 3bec 8842     		cmp T0,T1 
 2848 3bee 05D4     		bmi 9f
 2849 3bf0 08F10808 		add RSP,#8  // counter and limit  
 2850 3bf4 0CF1040C 		add IP,IP,#4 // skip loop address 
 2851 3bf8 FEF752BA 		_NEXT 
 2852 3bfc DCF800C0 	9:  ldr IP,[IP]
 2853 3c00 FEF74EBA 		_NEXT 
 2854              	
 2855              	
 2856              	/********************************
 2857              		LOOP ( a -- )
 2858              		increment counter 
 2859              		end loop if >= limit 
 2860              	*********************************/
 2861 3c04 BE3B0000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 2861      C44C4F4F 
 2861      500000BF 
 2862 3c10 504700BF 		_NEST 
 2863 3c14 1F220000 		_COMPI DOLOOP
 2863      DC3B0000 
 2863      D13F0000 
 2864 3c20 6D3A0000 		_ADR COMMA 
 2865 3c24 A7200000 		_UNNEST 
 2866              	
 2867              	
 2868              	/**********************
 2869              	    BEGIN	( -- a )
 2870              	 	Start an infinite 
 2871              		or indefinite 
 2872              		loop structure.
 2873              	************************/
 2874 3c28 083C0000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 2874      C5424547 
 2874      494E00BF 
 2875 3c34 504700BF 		_NEST
 2876 3c38 C52A0000 		_ADR	HERE
ARM GAS  forth.s 			page 142


 2877 3c3c A7200000 		_UNNEST
 2878              		.p2align 2 
 2879              	
 2880              	/********************
 2881              	    NEXT	( a -- )
 2882              	 	Terminate a FOR-NEXT
 2883              		loop structure.
 2884              	**************************/
 2885 3c40 2C3C0000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 2885      C44E4558 
 2885      540000BF 
 2886 3c4c 504700BF 		_NEST
 2887 3c50 1F220000 		_COMPI	DONXT
 2887      40220000 
 2887      D13F0000 
 2888 3c5c 6D3A0000 		_ADR	COMMA
 2889 3c60 A7200000 		_UNNEST
 2890              	
 2891              	/***************************
 2892              		I ( -- n )
 2893              		stack for loop counter 
 2894              	***************************/
 2895 3c64 443C0000 		_HEADER I,1+COMPO,"I"
 2895      414900BF 
 2896 3c6c 47F8046D 		_PUSH 
 2897 3c70 D8F80060 		ldr TOS,[RSP]
 2898 3c74 FEF714BA 		_NEXT 
 2899              	
 2900              	/****************************
 2901              		J ( -- n )
 2902              		stack outer loop counter 
 2903              	****************************/
 2904 3c78 683C0000 		_HEADER J,1,"J"
 2904      014A00BF 
 2905 3c80 47F8046D 		_PUSH 
 2906 3c84 D8F80460 		ldr TOS,[RSP,#4]
 2907 3c88 FEF70ABA 		_NEXT 
 2908              	
 2909              	/**********************
 2910              	    UNTIL	( a -- )
 2911              	 	Terminate a BEGIN-UNTIL
 2912              		indefinite loop structure.
 2913              	******************************/
 2914 3c8c 7C3C0000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 2914      C5554E54 
 2914      494C00BF 
 2915 3c98 504700BF 		_NEST
 2916 3c9c 1F220000 		_COMPI	QBRAN
 2916      5E220000 
 2916      D13F0000 
 2917 3ca8 6D3A0000 		_ADR	COMMA
 2918 3cac A7200000 		_UNNEST
 2919              	
 2920              	/**********************
 2921              	    AGAIN	( a -- )
 2922              	 	Terminate a BEGIN-AGAIN
 2923              		infinite loop structure.
ARM GAS  forth.s 			page 143


 2924              	*****************************/
 2925 3cb0 903C0000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 2925      C5414741 
 2925      494E00BF 
 2926 3cbc 504700BF 		_NEST
 2927 3cc0 1F220000 		_COMPI	BRAN
 2927      72220000 
 2927      D13F0000 
 2928 3ccc 6D3A0000 		_ADR	COMMA
 2929 3cd0 A7200000 		_UNNEST
 2930              	
 2931              	/************************
 2932              	    IF	  ( -- A )
 2933              	 	Begin a conditional
 2934              		branch structure.
 2935              	**************************/
 2936 3cd4 B43C0000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 2936      C2494600 
 2937 3cdc 504700BF 		_NEST
 2938 3ce0 1F220000 		_COMPI	QBRAN
 2938      5E220000 
 2938      D13F0000 
 2939 3cec C52A0000 		_ADR	HERE
 2940 3cf0 1F220000 		_DOLIT	4
 2940      04000000 
 2941 3cf8 21280000 		_ADR	CPP
 2942 3cfc A5260000 		_ADR	PSTOR
 2943 3d00 A7200000 		_UNNEST
 2944              	
 2945              	/*************************
 2946              	    AHEAD	( -- A )
 2947              	 	Compile a forward 
 2948              		branch instruction.
 2949              	*************************/
 2950 3d04 D83C0000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 2950      C5414845 
 2950      414400BF 
 2951 3d10 504700BF 		_NEST
 2952 3d14 1F220000 		_COMPI	BRAN
 2952      72220000 
 2952      D13F0000 
 2953 3d20 C52A0000 		_ADR	HERE
 2954 3d24 1F220000 		_DOLIT	4
 2954      04000000 
 2955 3d2c 21280000 		_ADR	CPP
 2956 3d30 A5260000 		_ADR	PSTOR
 2957 3d34 A7200000 		_UNNEST
 2958              	
 2959              	/**************************
 2960              	    REPEAT	( A a -- )
 2961              	 	Terminate a BEGIN-WHILE-REPEAT
 2962              		indefinite loop.
 2963              	**********************************/
 2964 3d38 083D0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 2964      C6524550 
 2964      45415400 
 2965 3d44 504700BF 		_NEST
ARM GAS  forth.s 			page 144


 2966 3d48 BD3C0000 		_ADR	AGAIN
 2967 3d4c C52A0000 		_ADR	HERE
 2968 3d50 61230000 		_ADR	SWAP
 2969 3d54 91220000 		_ADR	STORE
 2970 3d58 A7200000 		_UNNEST
 2971              	
 2972              	/*********************
 2973              	    THEN	( A -- )
 2974              	 	Terminate a conditional
 2975              		branch structure.
 2976              	*****************************/
 2977 3d5c 3C3D0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 2977      C4544845 
 2977      4E0000BF 
 2978 3d68 504700BF 		_NEST
 2979 3d6c C52A0000 		_ADR	HERE
 2980 3d70 61230000 		_ADR	SWAP
 2981 3d74 91220000 		_ADR	STORE
 2982 3d78 A7200000 		_UNNEST
 2983              	
 2984              	/***************************
 2985              	    AFT	 ( a -- a A )
 2986              	 	Jump to THEN in a 
 2987              		FOR-AFT-THEN-NEXT loop 
 2988              		the first time through.
 2989              	*****************************/
 2990 3d7c 603D0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 2990      C3414654 
 2991 3d84 504700BF 		_NEST
 2992 3d88 41230000 		_ADR	DROP
 2993 3d8c 113D0000 		_ADR	AHEAD
 2994 3d90 353C0000 		_ADR	BEGIN
 2995 3d94 61230000 		_ADR	SWAP
 2996 3d98 A7200000 		_UNNEST
 2997              	
 2998              	/**********************
 2999              	    ELSE	( A -- A )
 3000              	 	Start the false 
 3001              		clause in an 
 3002              		IF-ELSE-THEN structure.
 3003              	****************************/
 3004 3d9c 803D0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3004      C4454C53 
 3004      450000BF 
 3005 3da8 504700BF 		_NEST
 3006 3dac 113D0000 		_ADR	AHEAD
 3007 3db0 61230000 		_ADR	SWAP
 3008 3db4 693D0000 		_ADR	THENN
 3009 3db8 A7200000 		_UNNEST
 3010              	
 3011              	/**************************
 3012              	    WHILE	( a -- A a )
 3013              	 	Conditional branch out 
 3014              		of a BEGIN-WHILE-REPEAT loop.
 3015              	*********************************/
 3016 3dbc A03D0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3016      C5574849 
ARM GAS  forth.s 			page 145


 3016      4C4500BF 
 3017 3dc8 504700BF 		_NEST
 3018 3dcc DD3C0000 		_ADR	IFF
 3019 3dd0 61230000 		_ADR	SWAP
 3020 3dd4 A7200000 		_UNNEST
 3021              	
 3022              	/***********************************
 3023              	    ABORT"	( -- //  string> )
 3024              	 	Conditional abort with an 
 3025              		error message.
 3026              	***********************************/
 3027 3dd8 C03D0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3027      8641424F 
 3027      52542200 
 3028 3de4 504700BF 		_NEST
 3029 3de8 1F220000 		_COMPI	ABORQ
 3029      30380000 
 3029      D13F0000 
 3030 3df4 093B0000 		_ADR	STRCQ
 3031 3df8 A7200000 		_UNNEST
 3032              	
 3033              	/******************************
 3034              	    $"	( -- //  string> )
 3035              	 	Compile an inline 
 3036              		word literal.
 3037              	*****************************/
 3038 3dfc DC3D0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3038      C2242200 
 3039 3e04 504700BF 		_NEST
 3040 3e08 1F220000 		_COMPI	STRQP
 3040      C4300000 
 3040      D13F0000 
 3041 3e14 093B0000 		_ADR	STRCQ
 3042 3e18 A7200000 		_UNNEST
 3043              	
 3044              	/******************************
 3045              	    ."	( -- //  string> )
 3046              	 	Compile an inline word
 3047              		literal to be typed out 
 3048              		at run time.
 3049              	*******************************/
 3050 3e1c 003E0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3050      C22E2200 
 3051 3e24 504700BF 		_NEST
 3052 3e28 1F220000 		_COMPI	DOTQP
 3052      E0300000 
 3052      D13F0000 
 3053 3e34 093B0000 		_ADR	STRCQ
 3054 3e38 A7200000 		_UNNEST
 3055              	
 3056              	/*********************
 3057              	  Name compiler
 3058              	***********************/
 3059              	
 3060              	/**************************
 3061              	    ?UNIQUE	( a -- a )
 3062              	 	Display a warning 
ARM GAS  forth.s 			page 146


 3063              		message if the word 
 3064              		already exists.
 3065              	**************************/
 3066 3e3c 203E0000 		_HEADER UNIQU,7,"?UNIQUE"
 3066      073F554E 
 3066      49515545 
 3067 3e48 504700BF 		_NEST
 3068 3e4c 51230000 		_ADR	DUPP
 3069 3e50 A5350000 		_ADR	NAMEQ			// ?name exists
 3070 3e54 5F220000 		_QBRAN	UNIQ1	// redefinitions are OK
 3070      743E0000 
 3071 3e5c E1300000 		_DOTQP	7," reDef "		// but warn the user
 3071      07207265 
 3071      44656620 
 3072 3e68 75230000 		_ADR	OVER
 3073 3e6c ED260000 		_ADR	COUNT
 3074 3e70 45300000 		_ADR	TYPEE			// just in case its not planned
 3075              	UNIQ1:
 3076 3e74 41230000 		_ADR	DROP
 3077 3e78 A7200000 		_UNNEST
 3078              	
 3079              	/***********************
 3080              	    $,n	 ( na -- )
 3081              	 	Build a new dictionary 
 3082              		name using the data at na.
 3083              	hidden word 
 3084              	*******************************/
 3085              	SNAME:
 3086 3e7c 504700BF 		_NEST
 3087 3e80 51230000 		_ADR	DUPP			//  na na
 3088 3e84 C5220000 		_ADR	CAT			//  ?null input
 3089 3e88 5F220000 		_QBRAN	SNAM1
 3089      C43E0000 
 3090 3e90 493E0000 		_ADR	UNIQU			//  na
 3091 3e94 49280000 		_ADR	LAST			//  na last
 3092 3e98 A5220000 		_ADR	AT			//  na la
 3093 3e9c 6D3A0000 		_ADR	COMMA			//  na
 3094 3ea0 51230000 		_ADR	DUPP			//  na na
 3095 3ea4 49280000 		_ADR	LAST			//  na na last
 3096 3ea8 91220000 		_ADR	STORE			//  na , save na for vocabulary link
 3097 3eac ED260000 		_ADR	COUNT			//  na+1 count
 3098 3eb0 15240000 		_ADR	PLUS			//  na+1+count
 3099 3eb4 112A0000 		_ADR	ALGND			//  word boundary
 3100 3eb8 21280000 		_ADR	CPP
 3101 3ebc 91220000 		_ADR	STORE			//  top of dictionary now
 3102 3ec0 A7200000 		_UNNEST
 3103              	SNAM1:
 3104 3ec4 C5300000 		_ADR	STRQP
 3105 3ec8 07       		.byte	7
 3106 3ec9 206E616D 		.ascii " name? "
 3106      653F20
 3107 3ed0 05380000 		_ADR	ABORT
 3108              	
 3109              	/************************
 3110              	    $COMPILE	( a -- )
 3111              	 	Compile next word to 
 3112              		code dictionary as 
ARM GAS  forth.s 			page 147


 3113              		a token or literal.
 3114              	**************************/
 3115 3ed4 403E0000 		_HEADER SCOMP,8,"$COMPILE"
 3115      0824434F 
 3115      4D50494C 
 3115      450000BF 
 3116 3ee4 504700BF 		_NEST
 3117 3ee8 A5350000 		_ADR	NAMEQ
 3118 3eec 25250000 		_ADR	QDUP	// defined?
 3119 3ef0 5F220000 		_QBRAN	SCOM2
 3119      203F0000 
 3120 3ef8 A5220000 		_ADR	AT
 3121 3efc 1F220000 		_DOLIT	IMEDD
 3121      80000000 
 3122 3f04 95230000 		_ADR	ANDD	// immediate?
 3123 3f08 5F220000 		_QBRAN	SCOM1
 3123      183F0000 
 3124 3f10 35220000 		_ADR	EXECU
 3125 3f14 A7200000 		_UNNEST			// it's immediate, execute
 3126              	SCOM1:
 3127 3f18 D13F0000 		_ADR	CALLC			// it's not immediate, compile
 3128 3f1c A7200000 		_UNNEST	
 3129              	SCOM2:
 3130 3f20 79200000 		_ADR	NUMBER 
 3131 3f24 5F220000 		_QBRAN	SCOM3
 3131      343F0000 
 3132 3f2c F13A0000 		_ADR	LITER
 3133 3f30 A7200000 		_UNNEST			// compile number as integer
 3134              	SCOM3: // compilation abort 
 3135 3f34 3D3F0000 		_ADR COLON_ABORT 
 3136 3f38 05380000 		_ADR	ABORT			// error
 3137              	
 3138              	/********************************
 3139              	 before aborting a compilation 
 3140              	 reset HERE and LAST
 3141              	 to previous values. 
 3142              	*******************************/
 3143              	COLON_ABORT:
 3144 3f3c 504700BF 		_NEST 
 3145 3f40 49280000 		_ADR LAST 
 3146 3f44 A5220000 		_ADR AT 
 3147 3f48 C1240000 		_ADR CELLM 
 3148 3f4c 51230000 		_ADR DUPP 
 3149 3f50 21280000 		_ADR CPP  
 3150 3f54 91220000 		_ADR STORE 
 3151 3f58 A5220000 		_ADR AT 
 3152 3f5c 49280000 		_ADR LAST 
 3153 3f60 91220000 		_ADR STORE 
 3154 3f64 A7200000 		_UNNEST 
 3155              	
 3156              	/*********************
 3157              	    OVERT	( -- )
 3158              	 	Link a new word 
 3159              		into the current 
 3160              		vocabulary.
 3161              	**********************/
 3162 3f68 D83E0000 		_HEADER OVERT,5,"OVERT"
ARM GAS  forth.s 			page 148


 3162      054F5645 
 3162      525400BF 
 3163 3f74 504700BF 		_NEST
 3164 3f78 49280000 		_ADR	LAST
 3165 3f7c A5220000 		_ADR	AT
 3166 3f80 0D280000 		_ADR	CNTXT
 3167 3f84 91220000 		_ADR	STORE
 3168 3f88 A7200000 		_UNNEST
 3169              	
 3170              	/**********************
 3171              	    ;  ( -- )
 3172              	 	Terminate a colon
 3173              		definition.
 3174              	***********************/
 3175 3f8c 6C3F0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3175      C13B00BF 
 3176 3f94 504700BF 		_NEST
 3177 3f98 1F220000 		_DOLIT	UNNEST
 3177      A6200000 
 3178 3fa0 D13F0000 		_ADR	CALLC
 3179 3fa4 C1380000 		_ADR	LBRAC
 3180 3fa8 753F0000 		_ADR	OVERT
 3181 3fac A7200000 		_UNNEST
 3182              	
 3183              	/******************
 3184              	    ]	   ( -- )
 3185              	 	Start compiling 
 3186              		the words in 
 3187              		the input stream.
 3188              	*********************/
 3189 3fb0 903F0000 		_HEADER RBRAC,1,"]"
 3189      015D00BF 
 3190 3fb8 504700BF 		_NEST
 3191 3fbc 1F220000 		_DOLIT	SCOMP
 3191      E43E0000 
 3192 3fc4 E1270000 		_ADR	TEVAL
 3193 3fc8 91220000 		_ADR	STORE
 3194 3fcc A7200000 		_UNNEST
 3195              	
 3196              	/*********************
 3197              	    BL.W	( ca -- )
 3198              	 	compile ca.
 3199              	hidden word used by compiler
 3200              	*****************************/
 3201              	CALLC:
 3202 3fd0 504700BF 		_NEST
 3203 3fd4 1F220000 		_DOLIT 1 
 3203      01000000 
 3204 3fdc A9230000 		_ADR ORR 
 3205 3fe0 6D3A0000 		_ADR COMMA  
 3206 3fe4 A7200000 		_UNNEST 
 3207              	
 3208              	
 3209              	/*************************
 3210              	 	:	( -- //  string> )
 3211              	 	Start a new colon 
 3212              		definition using 
ARM GAS  forth.s 			page 149


 3213              		next word as its name.
 3214              	**************************/
 3215 3fe8 B43F0000 		_HEADER COLON,1,":"
 3215      013A00BF 
 3216 3ff0 504700BF 		_NEST
 3217 3ff4 1D340000 		_ADR	TOKEN
 3218 3ff8 7D3E0000 		_ADR	SNAME
 3219 3ffc B1200000 		_ADR	COMPI_NEST 
 3220 4000 B93F0000 		_ADR	RBRAC
 3221 4004 A7200000 		_UNNEST
 3222              	
 3223              	/*************************
 3224              	    IMMEDIATE   ( -- )
 3225              	 	Make the last compiled 
 3226              		word an immediate word.
 3227              	***************************/
 3228 4008 EC3F0000 		_HEADER IMMED,9,"IMMEDIATE"
 3228      09494D4D 
 3228      45444941 
 3228      544500BF 
 3229 4018 504700BF 		_NEST
 3230 401c 1F220000 		_DOLIT	IMEDD
 3230      80000000 
 3231 4024 49280000 		_ADR	LAST
 3232 4028 A5220000 		_ADR	AT
 3233 402c A5220000 		_ADR	AT
 3234 4030 A9230000 		_ADR	ORR
 3235 4034 49280000 		_ADR	LAST
 3236 4038 A5220000 		_ADR	AT
 3237 403c 91220000 		_ADR	STORE
 3238 4040 A7200000 		_UNNEST
 3239              	
 3240              	/******************
 3241              	  Defining words
 3242              	******************/
 3243              	
 3244              	/***********************************
 3245              	    CONSTANT	( u -- //  string> )
 3246              	 	Compile a new constant.
 3247              	************************************/
 3248 4044 0C400000 		_HEADER CONST,8,"CONSTANT"
 3248      08434F4E 
 3248      5354414E 
 3248      540000BF 
 3249 4054 504700BF 		_NEST 
 3250 4058 1D340000 		_ADR	TOKEN
 3251 405c 7D3E0000 		_ADR	SNAME
 3252 4060 753F0000 		_ADR	OVERT
 3253 4064 B1200000 		_ADR	COMPI_NEST
 3254 4068 1F220000 		_DOLIT	DOCON
 3254      20270000 
 3255 4070 D13F0000 		_ADR	CALLC
 3256 4074 6D3A0000 		_ADR	COMMA
 3257 4078 1F220000 		_DOLIT	UNNEST 
 3257      A6200000 
 3258 4080 D13F0000 		_ADR	CALLC  
 3259 4084 A7200000 		_UNNEST
ARM GAS  forth.s 			page 150


 3260              	
 3261              		.p2align 2 
 3262              	/****************************************
 3263              	 doDOES> ( -- a )
 3264              	 runtime action of DOES> 
 3265              	 leave parameter field address on stack 
 3266              	hidden word used by compiler 
 3267              	***************************************/
 3268              	DODOES:
 3269 4088 504700BF 		_NEST 
 3270 408c D1220000 		_ADR	RFROM
 3271 4090 B1240000 		_ADR	CELLP 
 3272 4094 71240000 		_ADR	ONEP  
 3273 4098 49280000 		_ADR LAST 
 3274 409c A5220000 		_ADR AT
 3275 40a0 3D340000 		_ADR NAMET 
 3276 40a4 B1240000 		_ADR CELLP 
 3277 40a8 91220000 		_ADR STORE  
 3278 40ac A7200000 		_UNNEST 
 3279              	
 3280              		.p2align 2
 3281              	/**********************
 3282              	  DOES> ( -- )
 3283              	  compile time action
 3284              	*************************/
 3285 40b0 48400000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3285      C5444F45 
 3285      533E00BF 
 3286 40bc 504700BF 		_NEST 
 3287 40c0 1F220000 		_DOLIT DODOES 
 3287      88400000 
 3288 40c8 D13F0000 		_ADR CALLC 
 3289 40cc 1F220000 		_DOLIT	UNNEST
 3289      A6200000 
 3290 40d4 D13F0000 		_ADR	CALLC 
 3291 40d8 B1200000 		_ADR COMPI_NEST
 3292 40dc 1F220000 		_DOLIT RFROM 
 3292      D0220000 
 3293 40e4 D13F0000 		_ADR	CALLC
 3294 40e8 A7200000 		_UNNEST 
 3295              	
 3296              	
 3297              	/****************************
 3298              	  DEFER@ ( "name" -- a )
 3299              	  return value of code field 
 3300              	  of defered function. 
 3301              	******************************/
 3302 40ec B4400000 		_HEADER DEFERAT,6,"DEFER@"
 3302      06444546 
 3302      45524000 
 3303 40f8 504700BF 		_NEST 
 3304 40fc 2D3A0000 		_ADR TICK
 3305 4100 B1240000 		_ADR CELLP 
 3306 4104 A5220000 		_ADR AT 
 3307 4108 81240000 		_ADR ONEM 
 3308 410c A7200000 		_UNNEST 
 3309              	
ARM GAS  forth.s 			page 151


 3310              	/*********************************
 3311              	 DEFER! ( "name1" "name2" -- )
 3312              	 assign an action to a defered word 
 3313              	************************************/
 3314 4110 F0400000 		_HEADER DEFERSTO,6,"DEFER!"
 3314      06444546 
 3314      45522100 
 3315 411c 504700BF 		_NEST 
 3316 4120 2D3A0000 		_ADR TICK 
 3317 4124 71240000 		_ADR ONEP 
 3318 4128 2D3A0000 		_ADR TICK 
 3319 412c B1240000 		_ADR CELLP 
 3320 4130 91220000 		_ADR STORE 
 3321 4134 A7200000 		_UNNEST
 3322              	
 3323              	/****************************
 3324              	  DEFER ( "name" -- )
 3325              	  create a defered definition
 3326              	*****************************/
 3327 4138 14410000 		_HEADER DEFER,5,"DEFER"
 3327      05444546 
 3327      455200BF 
 3328 4144 504700BF 		_NEST 
 3329 4148 95410000 		_ADR CREAT 
 3330 414c 1F220000 		_DOLIT UNNEST 
 3330      A6200000 
 3331 4154 D13F0000 		_ADR CALLC 
 3332 4158 1F220000 		_DOLIT DEFER_NOP
 3332      7C410000 
 3333 4160 71240000 		_ADR ONEP 
 3334 4164 49280000 		_ADR LAST 
 3335 4168 A5220000 		_ADR AT 
 3336 416c 3D340000 		_ADR NAMET 
 3337 4170 B1240000 		_ADR CELLP 
 3338 4174 91220000 		_ADR STORE 
 3339 4178 A7200000 		_UNNEST 
 3340              	DEFER_NOP:
 3341 417c 504700BF 		_NEST  
 3342 4180 1D220000 		_ADR NOP 
 3343 4184 A7200000 		_UNNEST 
 3344              	
 3345              	/******************************
 3346              	    CREATE	( -- //  string> )
 3347              	 	Compile a new array entry 
 3348              		without allocating code space.
 3349              	***********************************/
 3350 4188 3C410000 		_HEADER CREAT,6,"CREATE"
 3350      06435245 
 3350      41544500 
 3351 4194 504700BF 		_NEST 
 3352 4198 1D340000 		_ADR	TOKEN
 3353 419c 7D3E0000 		_ADR	SNAME
 3354 41a0 753F0000 		_ADR	OVERT
 3355 41a4 B1200000 		_ADR	COMPI_NEST 
 3356 41a8 1F220000 		_DOLIT	DOVAR
 3356      14270000 
 3357 41b0 D13F0000 		_ADR	CALLC
ARM GAS  forth.s 			page 152


 3358 41b4 A7200000 		_UNNEST
 3359              	
 3360              	/*******************************
 3361              	    VARIABLE	( -- //  string> )
 3362              	 	Compile a new variable 
 3363              		initialized to 0.
 3364              	***********************************/
 3365 41b8 8C410000 		_HEADER VARIA,8,"VARIABLE"
 3365      08564152 
 3365      4941424C 
 3365      450000BF 
 3366 41c8 504700BF 		_NEST
 3367 41cc 95410000 		_ADR	CREAT
 3368 41d0 1F220000 		_DOLIT	0
 3368      00000000 
 3369 41d8 6D3A0000 		_ADR	COMMA
 3370 41dc 1F220000 		_DOLIT UNNEST
 3370      A6200000 
 3371 41e4 D13F0000 		_ADR	CALLC  
 3372 41e8 A7200000 		_UNNEST
 3373              	
 3374              	/***********
 3375              	  Tools
 3376              	***********/
 3377              	
 3378              	/*************************
 3379              	    dm+	 ( a u -- a )
 3380              	 	Dump u bytes from , 
 3381              		leaving a+u on the stack.
 3382              	hidden word used by DUMP 
 3383              	****************************/
 3384              	DMP:
 3385 41ec 504700BF 		_NEST
 3386 41f0 75230000 		_ADR	OVER
 3387 41f4 1F220000 		_DOLIT	4
 3387      04000000 
 3388 41fc 25310000 		_ADR	UDOTR			// display address
 3389 4200 F12F0000 		_ADR	SPACE
 3390 4204 F9220000 		_ADR	TOR			// start count down loop
 3391 4208 73220000 		_BRAN	PDUM2			// skip first pass
 3391      28420000 
 3392              	PDUM1:
 3393 4210 51230000 	  _ADR	DUPP
 3394 4214 C5220000 		_ADR	CAT
 3395 4218 1F220000 		_DOLIT	3
 3395      03000000 
 3396 4220 25310000 		_ADR	UDOTR			// display numeric data
 3397 4224 71240000 		_ADR	ONEP			// increment address
 3398              	PDUM2:
 3399 4228 41220000 	  _ADR	DONXT
 3400 422c 10420000 		.word	PDUM1	// loop till done
 3401 4230 A7200000 		_UNNEST
 3402              		.p2align 2 
 3403              	//    DUMP	( a u -- )
 3404              	// 	Dump u bytes from a, in a formatted manner.
 3405              	
 3406              	/**********************
ARM GAS  forth.s 			page 153


 3407              		DUMP ( a n -- )
 3408              		hex dump memory 
 3409              	*********************/
 3410 4234 BC410000 		_HEADER DUMP,4,"DUMP"
 3410      0444554D 
 3410      500000BF 
 3411 4240 504700BF 		_NEST
 3412 4244 85270000 		_ADR	BASE
 3413 4248 A5220000 		_ADR	AT
 3414 424c F9220000 		_ADR	TOR
 3415 4250 A92D0000 		_ADR	HEX			// save radix,set hex
 3416 4254 1F220000 		_DOLIT	16
 3416      10000000 
 3417 425c B1290000 		_ADR	SLASH			// change count to lines
 3418 4260 F9220000 		_ADR	TOR
 3419 4264 73220000 		_BRAN	DUMP4			// start count down loop
 3419      94420000 
 3420              	DUMP1:
 3421 426c 79300000 	  _ADR	CR
 3422 4270 1F220000 		_DOLIT	16
 3422      10000000 
 3423 4278 89250000 		_ADR	DDUP
 3424 427c ED410000 		_ADR	DMP			// display numeric
 3425 4280 39250000 		_ADR	ROT
 3426 4284 39250000 		_ADR	ROT
 3427 4288 F12F0000 		_ADR	SPACE
 3428 428c F12F0000 		_ADR	SPACE
 3429 4290 45300000 		_ADR	TYPEE			// display printable characters
 3430              	DUMP4:
 3431 4294 41220000 	  _DONXT	DUMP1	// loop till done
 3431      6C420000 
 3432              	DUMP3:
 3433 429c 41230000 		_ADR	DROP
 3434 42a0 D1220000 		_ADR	RFROM
 3435 42a4 85270000 		_ADR	BASE
 3436 42a8 91220000 		_ADR	STORE			// restore radix
 3437 42ac A7200000 		_UNNEST
 3438              	
 3439              	/***********************
 3440              		TRACE ( -- )
 3441              	**********************/
 3442 42b0 38420000 		_HEADER TRACE,5,"TRACE"
 3442      05545241 
 3442      434500BF 
 3443 42bc 504700BF 		_NEST 
 3444 42c0 79300000 		_ADR CR 
 3445 42c4 85270000 		_ADR BASE 
 3446 42c8 A5220000 		_ADR AT 
 3447 42cc F9220000 		_ADR TOR
 3448 42d0 ED2D0000 		_ADR DECIM
 3449 42d4 1F220000 		_DOLIT '>' 
 3449      3E000000 
 3450 42dc 1F220000 		_DOLIT 'S'
 3450      53000000 
 3451 42e4 29210000 		_ADR EMIT 
 3452 42e8 29210000 		_ADR EMIT  
 3453 42ec 0D430000 		_ADR DOTS
ARM GAS  forth.s 			page 154


 3454 42f0 D1220000 		_ADR RFROM 
 3455 42f4 85270000 		_ADR BASE 
 3456 42f8 91220000 		_ADR STORE  
 3457 42fc 79300000 		_ADR CR 
 3458 4300 A7200000 		_UNNEST 
 3459              	
 3460              	
 3461              	/**********************
 3462              	   .S	  ( ... -- ... )
 3463              	 	Display the contents 
 3464              		of the data stack.
 3465              	*************************/
 3466 4304 B4420000 		_HEADER DOTS,2,".S"
 3466      022E5300 
 3467 430c 504700BF 		_NEST
 3468 4310 F12F0000 		_ADR	SPACE
 3469 4314 792A0000 		_ADR	DEPTH			// stack depth
 3470 4318 F9220000 		_ADR	TOR			// start count down loop
 3471 431c 73220000 		_BRAN	DOTS2			// skip first pass
 3471      30430000 
 3472              	DOTS1:
 3473 4324 E5220000 		_ADR	RAT
 3474 4328 9D2A0000 		_ADR	PICK
 3475 432c 7D310000 		_ADR	DOT			// index stack, display contents
 3476              	DOTS2:
 3477 4330 41220000 		_DONXT	DOTS1	// loop till done
 3477      24430000 
 3478 4338 F12F0000 		_ADR	SPACE
 3479 433c A7200000 		_UNNEST
 3480              	
 3481              	/*****************************
 3482              	    >NAME	( ca -- na | F )
 3483              	 	Convert code address 
 3484              		to a name address.
 3485              	*****************************/
 3486 4340 08430000 		_HEADER TNAME,5,">NAME"
 3486      053E4E41 
 3486      4D4500BF 
 3487 434c 504700BF 		_NEST
 3488 4350 F9220000 		_ADR	TOR			//  
 3489 4354 0D280000 		_ADR	CNTXT			//  va
 3490 4358 A5220000 		_ADR	AT			//  na
 3491              	TNAM1:
 3492 435c 51230000 		_ADR	DUPP			//  na na
 3493 4360 5F220000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3493      90430000 
 3494 4368 51230000 		_ADR	DUPP			//  na na
 3495 436c 3D340000 		_ADR	NAMET			//  na ca
 3496 4370 E5220000 		_ADR	RAT			//  na ca code
 3497 4374 BD230000 		_ADR	XORR			//  na f --
 3498 4378 5F220000 		_QBRAN	TNAM2
 3498      90430000 
 3499 4380 C1240000 		_ADR	CELLM			//  la 
 3500 4384 A5220000 		_ADR	AT			//  next_na
 3501 4388 73220000 		_BRAN	TNAM1
 3501      5C430000 
 3502              	TNAM2:	
ARM GAS  forth.s 			page 155


 3503 4390 D1220000 		_ADR	RFROM
 3504 4394 41230000 		_ADR	DROP			//  0|na --
 3505 4398 A7200000 		_UNNEST			// 0
 3506              	
 3507              	/********************************
 3508              	    .ID	 ( na -- )
 3509              	 	Display the name at address.
 3510              	********************************/
 3511 439c 44430000 		_HEADER DOTID,3,".ID"
 3511      032E4944 
 3512 43a4 504700BF 		_NEST
 3513 43a8 25250000 		_ADR	QDUP			// if zero no name
 3514 43ac 5F220000 		_QBRAN	DOTI1
 3514      CC430000 
 3515 43b4 ED260000 		_ADR	COUNT
 3516 43b8 1F220000 		_DOLIT	0x1F
 3516      1F000000 
 3517 43c0 95230000 		_ADR	ANDD			// mask lexicon bits
 3518 43c4 45300000 		_ADR	TYPEE
 3519 43c8 A7200000 		_UNNEST			// display name string
 3520              	DOTI1:
 3521 43cc E1300000 		_DOTQP	9," {noName}"
 3521      09207B6E 
 3521      6F4E616D 
 3521      657D00BF 
 3522 43dc A7200000 		_UNNEST
 3523              	
 3524              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3525              	.if WANT_SEE 
 3526              	/*******************************
 3527              	    SEE	 ( -- //  string> )
 3528              	 	A simple decompiler.
 3529              	*******************************/
 3530              		_HEADER SEE,3,"SEE"
 3531              		_NEST
 3532              		_ADR	TICK	//  ca --, starting address
 3533              		_ADR	CR	
 3534              		_DOLIT	20
 3535              		_ADR	TOR
 3536              	SEE1:
 3537              		_ADR	CELLP			//  a
 3538              		_ADR	DUPP			//  a a
 3539              		_ADR	DECOMP		//  a
 3540              		_DONXT	SEE1
 3541              		_ADR	DROP
 3542              		_UNNEST
 3543              	
 3544              	/*************************
 3545              	 	DECOMPILE ( a -- )
 3546              	 	Convert code in a.  
 3547              		Display name of command or as data.
 3548              	*************************************/
 3549              		_HEADER DECOMP,9,"DECOMPILE"
 3550              		_NEST
 3551              		_ADR	DUPP			//  a a
 3552              	// 	_ADR	TOR			//  a
 3553              		_ADR	AT			//  a code
ARM GAS  forth.s 			page 156


 3554              		_ADR	DUPP			//  a code code
 3555              		_DOLIT	0xF800D000 //0xF800F800
 3556              		_ADR	ANDD
 3557              		_DOLIT	0xF000D000 //0xF800F000
 3558              		_ADR	EQUAL			//  a code ?
 3559              		_ADR	INVER 
 3560              		_QBRAN	DECOM2	//  not a command
 3561              		//  a valid_code --, extract address and display name
 3562              		MOVW	IP,#0xFFE
 3563              		MOV	WP,TOS
 3564              		LSL	TOS,TOS,#21		//  get bits 22-12
 3565              		ASR	TOS,TOS,#9		//  with sign extension
 3566              		LSR	WP,WP,#15		//  get bits 11-1
 3567              		AND	WP,WP,IP		//  retain only bits 11-1
 3568              		ORR	TOS,TOS,WP		//  get bits 22-1
 3569              		NOP
 3570              		_ADR	OVER			//  a offset a
 3571              		_ADR	PLUS			//  a target-4
 3572              		_ADR	CELLP			//  a target
 3573              		_ADR	TNAME			//  a na/0 --, is it a name?
 3574              		_ADR	QDUP			//  name address or zero
 3575              		_QBRAN	DECOM1
 3576              		_ADR	SPACE			//  a na
 3577              		_ADR	DOTID			//  a --, display name
 3578              	// 	_ADR	RFROM			//  a
 3579              		_ADR	DROP
 3580              		_UNNEST
 3581              	DECOM1:	// _ADR	RFROM		//  a
 3582              		_ADR	AT			//  data
 3583              		_ADR	UDOT			//  display data
 3584              		_UNNEST
 3585              	DECOM2:
 3586              		_ADR	UDOT
 3587              	// 	_ADR	RFROM
 3588              		_ADR	DROP
 3589              		_UNNEST
 3590              	.endif 
 3591              	
 3592              	/**********************
 3593              		VLIST ( -- )
 3594              		WORDS alias 
 3595              		+ display words count 
 3596              	**********************/
 3597 43e0 A0430000 		_HEADER VLIST,5,"VLIST"
 3597      05564C49 
 3597      535400BF 
 3598 43ec 504700BF 		_NEST 
 3599 43f0 11440000 		_ADR WORDS
 3600 43f4 79300000 		_ADR CR 
 3601 43f8 55440000 		_ADR WC
 3602 43fc 7D310000 		_ADR DOT    
 3603 4400 A7200000 		_UNNEST 
 3604              	
 3605              	/*********************
 3606              	    WORDS	( -- )
 3607              	 	Display the names 
 3608              		in the context vocabulary.
ARM GAS  forth.s 			page 157


 3609              	*******************************/
 3610 4404 E4430000 		_HEADER WORDS,5,"WORDS"
 3610      05574F52 
 3610      445300BF 
 3611 4410 504700BF 		_NEST
 3612 4414 79300000 		_ADR	CR
 3613 4418 0D280000 		_ADR	CNTXT
 3614 441c A5220000 		_ADR	AT			// only in context
 3615              	WORS1:
 3616 4420 25250000 		_ADR	QDUP			// ?at end of list
 3617 4424 5F220000 		_QBRAN	WORS2
 3617      48440000 
 3618 442c 51230000 		_ADR	DUPP
 3619 4430 F12F0000 		_ADR	SPACE
 3620 4434 A5430000 		_ADR	DOTID			// display a name
 3621 4438 C1240000 		_ADR	CELLM
 3622 443c A5220000 		_ADR	AT
 3623 4440 73220000 		_BRAN	WORS1
 3623      20440000 
 3624              	WORS2:
 3625 4448 A7200000 		_UNNEST
 3626              	
 3627              	/*****************************
 3628              		WC ( - n )
 3629              		count words in dictionary 
 3630              	******************************/
 3631 444c 08440000 		_HEADER WC,2,"WC"
 3631      02574300 
 3632 4454 504700BF 		_NEST 
 3633 4458 1F220000 		_DOLIT 0 
 3633      00000000 
 3634 4460 49280000 		_ADR LAST
 3635 4464 A5220000 	1:	_ADR AT
 3636 4468 25250000 		_ADR QDUP
 3637 446c 5F220000 		_QBRAN 9f
 3637      8C440000 
 3638 4474 61230000 		_ADR SWAP
 3639 4478 71240000 		_ADR ONEP
 3640 447c 61230000 		_ADR SWAP
 3641 4480 C1240000 		_ADR CELLM
 3642 4484 73220000 		_BRAN 1b
 3642      64440000 
 3643 448c A7200000 	9:	_UNNEST 
 3644              	
 3645              	/*************************
 3646              		MARK <string> ( -- )
 3647              	    create forget point 
 3648              		in dictionary 
 3649              	*************************/	
 3650 4490 50440000 		_HEADER MARK,4,"MARK"
 3650      044D4152 
 3650      4B0000BF 
 3651 449c 504700BF 		_NEST
 3652 44a0 95410000 		_ADR CREAT 
 3653 44a4 89400000 		_ADR DODOES 
 3654 44a8 A7200000 		_UNNEST
 3655 44ac 504700BF 		_NEST  
ARM GAS  forth.s 			page 158


 3656 44b0 D1220000 		_ADR RFROM 
 3657 44b4 1F220000 		_DOLIT 8
 3657      08000000 
 3658 44bc 25240000 		_ADR SUBB
 3659 44c0 4D430000 		_ADR TNAME
 3660 44c4 C1240000 		_ADR CELLM
 3661 44c8 A5220000 		_ADR AT  
 3662 44cc 49280000 		_ADR LAST 
 3663 44d0 91220000 		_ADR STORE 
 3664 44d4 753F0000 		_ADR OVERT
 3665 44d8 A7200000 		_UNNEST 
 3666              	
 3667              	/****************
 3668              	  cold start
 3669              	*****************/
 3670              	
 3671              	/**********************************
 3672              	    VER	 ( -- n )
 3673              	 	Return the version 
 3674              		number of this implementation.
 3675              	hidden word used by COLD
 3676              	**********************************/
 3677              	VERSN:
 3678 44dc 504700BF 		_NEST
 3679 44e0 1F220000 		_DOLIT	VER*256+EXT
 3679      00010000 
 3680 44e8 A7200000 		_UNNEST
 3681              	
 3682              	/*********************
 3683              	    hi	  ( -- )
 3684              	 	Display the sign-on 
 3685              		message.
 3686              	***********************/
 3687 44ec 94440000 		_HEADER HI,2,"HI"
 3687      02484900 
 3688 44f4 504700BF 		_NEST
 3689 44f8 79300000 		_ADR	CR	// initialize I/O
 3690 44fc E1300000 		_DOTQP	17, "beyond Jupiter, v" 
 3690      11626579 
 3690      6F6E6420 
 3690      4A757069 
 3690      7465722C 
 3691 4514 85270000 		_ADR	BASE
 3692 4518 A5220000 		_ADR	AT
 3693 451c A92D0000 		_ADR	HEX	// save radix
 3694 4520 DD440000 		_ADR	VERSN
 3695 4524 992C0000 		_ADR	BDIGS
 3696 4528 E52C0000 		_ADR	DIG
 3697 452c E52C0000 		_ADR	DIG
 3698 4530 1F220000 		_DOLIT	'.'
 3698      2E000000 
 3699 4538 B92C0000 		_ADR	HOLD
 3700 453c 052D0000 		_ADR	DIGS
 3701 4540 592D0000 		_ADR	EDIGS
 3702 4544 45300000 		_ADR	TYPEE	// format version number
 3703 4548 85270000 		_ADR	BASE
 3704 454c 91220000 		_ADR	STORE
ARM GAS  forth.s 			page 159


 3705 4550 79300000 		_ADR	CR
 3706 4554 A7200000 		_UNNEST			// restore radix
 3707              	
 3708              	/**********************
 3709              	 check if PS2 keyboard 
 3710              	 present.
 3711              	**********************/
 3712              	PS2_QUERY: 
 3713 4558 504700BF 		_NEST 
 3714 455c 1F220000 		_DOLIT 400 
 3714      90010000 
 3715 4564 C1210000 		_ADR PAUSE
 3716 4568 D5130000 		_ADR PS2_QKEY
 3717 456c 5F220000 		_QBRAN 1f
 3717      88450000 
 3718 4574 1F220000 		_DOLIT BAT_OK 
 3718      AA000000 
 3719 457c BD230000 		_ADR XORR 
 3720 4580 5F220000 		_QBRAN 9f 
 3720      CC450000 
 3721 4588 BD150000 	1:	_ADR KBD_RST
 3722 458c 1F220000 		_DOLIT BAT_OK 
 3722      AA000000 
 3723 4594 BD230000 		_ADR XORR  
 3724 4598 5F220000 		_QBRAN 9f  
 3724      CC450000 
 3725              	// no ps2 keyboard 
 3726              	// swith to serial console
 3727 45a0 79300000 		_ADR CR 
 3728 45a4 E1300000 		_DOTQP 25,"no PS2 keyboard detected."
 3728      196E6F20 
 3728      50533220 
 3728      6B657962 
 3728      6F617264 
 3729 45c4 CD050000 		_ADR SERIAL 
 3730 45c8 E5050000 		_ADR CONSOLE 
 3731 45cc A7200000 	9:	_UNNEST 
 3732              	
 3733              	/*************************
 3734              	   check PA8 to 
 3735              	   select console 
 3736              	   PA8 -> low  LOCAL 
 3737              	   PA8 -> high SERIAL 
 3738              	*************************/
 3739              	IF_SENSE:
 3740 45d0 504700BF 		_NEST 
 3741 45d4 B5050000 		_ADR LOCAL 
 3742 45d8 1F220000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 3742      10000240 
 3743 45e0 A5220000 		_ADR AT 
 3744 45e4 1F220000 		_DOLIT (1<<8)
 3744      00010000 
 3745 45ec 95230000 		_ADR ANDD 
 3746 45f0 5F220000 		_QBRAN 9f 
 3746      FC450000 
 3747 45f8 71240000 		_ADR ONEP 
 3748 45fc E5050000 	9:  _ADR CONSOLE 
ARM GAS  forth.s 			page 160


 3749 4600 A7200000 		_UNNEST 
 3750              	
 3751              	
 3752              	/********************
 3753              	    COLD	( -- )
 3754              	 	The high level cold 
 3755              		start sequence.
 3756              	**************************/
 3757 4604 F0440000 		.word	LINK 
 3758              		LINK = . 
 3759 4608 04       	_LASTN:	.byte  4
 3760 4609 434F4C44 		.ascii "COLD"
 3761 460d 0000BF   		.p2align 2	
 3762              	COLD:
 3763 4610 00B5FBF7 		_CALL forth_init 
 3763      A9FD5DF8 
 3763      04EB
 3764 461a DFF858C0 		ldr IP,=COLD1 
 3765 461e FDF73FBD 		_NEXT
 3766 4622 00BF     		.p2align 2 
 3767              	COLD1:
 3768 4624 1F220000 		_DOLIT  0 
 3768      00000000 
 3769 462c F5210000 		_ADR ULED // turn off user LED 
 3770 4630 1F220000 		_DOLIT	UZERO
 3770      F4030000 
 3771 4638 1F220000 		_DOLIT	UPP
 3771      00000020 
 3772 4640 1F220000 		_DOLIT	ULAST-UZERO
 3772      BB000000 
 3773 4648 652B0000 		_ADR	MOVE 			// initialize user area
 3774 464c 8D390000 		_ADR	PRESE			// initialize stack and TIB
 3775 4650 D1450000 		_ADR	IF_SENSE
 3776 4654 69180000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 3777 4658 59450000 		_ADR 	PS2_QUERY  
 3778 465c 71270000 		_ADR	TBOOT
 3779 4660 152B0000 		_ADR	ATEXE			// application boot
 3780 4664 753F0000 		_ADR	OVERT
 3781 4668 73220000 		_BRAN	QUIT			// start interpretation
 3781      AC390000 
 3782              	COLD2:
 3783              		.p2align 2 	
 3784              	CTOP:
 3785 4670 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 3786              	
 3787              	
 3788 4674 24460000 	  .end 
ARM GAS  forth.s 			page 161


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 162


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 163


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
ARM GAS  forth.s 			page 164


     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
ARM GAS  forth.s 			page 165


     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
ARM GAS  forth.s 			page 166


     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff80 RPP
          macros.inc:48     *ABS*:000000002001ff00 TIBB
          macros.inc:49     *ABS*:000000002001ff00 SPP
          macros.inc:50     *ABS*:0000000020018100 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:00000000200180fc DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
          macros.inc:84     *ABS*:0000000000000030 TIBUF
ARM GAS  forth.s 			page 167


             forth.s:2615   .text:0000000000003948 EVAL
             forth.s:1520   .text:0000000000002cb8 HOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 FP_WS
          macros.inc:109    *ABS*:0000000000000013 FP_WS_SIZE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:265    .text:000000000000013c reset_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:217    .text:00000000000000b8 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:00000000000007dc tv_out_isr
          ser-term.s:35     .text:00000000000004c0 uart_rx_handler
           ps2_kbd.s:78     .text:00000000000010b8 kbd_isr
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:281    .text:0000000000000168 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:00000000000020a0 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2636   .text:000000000000398c PRESE
             forth.s:268    .text:000000000000221e DOLIT
              init.s:206    .text:000000000000009e exception_msg
             forth.s:893    .text:00000000000026ec COUNT
             forth.s:1837   .text:0000000000003044 TYPEE
              init.s:188    .text:000000000000007a GET_CFSR
             forth.s:437    .text:0000000000002350 DUPP
             forth.s:393    .text:00000000000022f8 TOR
             forth.s:980    .text:0000000000002784 BASE
             forth.s:339    .text:0000000000002290 STORE
             forth.s:1975   .text:000000000000317c DOT
             forth.s:375    .text:00000000000022d0 RFROM
             forth.s:472    .text:0000000000002394 ANDD
             forth.s:309    .text:000000000000225e QBRAN
              init.s:198    .text:000000000000008c GET_BFAR
             forth.s:154    .text:0000000000002128 EMIT
             forth.s:1809   .text:0000000000002ff0 SPACE
ARM GAS  forth.s 			page 168


              init.s:247    .text:0000000000000114 reset_mcu
              init.s:189    .text:000000000000007a $t
              init.s:207    .text:000000000000009e $d
              init.s:209    .text:00000000000000b6 $t
              init.s:226    .text:00000000000000d2 systick_exit
              init.s:229    .text:00000000000000d4 user_reboot
              init.s:233    .text:00000000000000e6 ur
              init.s:234    .text:00000000000000e6 $d
             forth.s:1855   .text:0000000000003078 CR
              init.s:242    .text:0000000000000104 user_reboot_msg
              init.s:241    .text:0000000000000102 $t
              init.s:243    .text:0000000000000104 $d
              init.s:385    .text:0000000000000268 remap
              init.s:294    .text:0000000000000190 init_devices
          ser-term.s:56     .text:00000000000004ee ser_init
             tvout.s:74     .text:000000000000072c tv_init
           ps2_kbd.s:307    .text:00000000000012d8 kbd_init
         spi-flash.s:39     .text:00000000000016ec flash_spi_init
             forth.s:3762   .text:0000000000004610 COLD
             forth.s:83     .text:0000000000002098 NEST
              init.s:307    .text:00000000000001ae wait_hserdy
              init.s:328    .text:00000000000001d0 wait_pllrdy
              init.s:340    .text:00000000000001ea wait_sws
              init.s:475    .text:0000000000000332 gpio_config
              init.s:550    .text:00000000000003de gpio_out
              init.s:410    .text:00000000000002a8 nvic_set_priority
              init.s:565    .text:00000000000003f4 UZERO
              init.s:602    .text:00000000000004af ULAST
              init.s:419    .text:00000000000002c0 negative_irq
              init.s:431    .text:00000000000002da nvic_enable_irq
              init.s:448    .text:0000000000000304 nvic_disable_irq
              init.s:512    .text:000000000000039a input_pull
              init.s:505    .text:0000000000000388 output_type
              init.s:528    .text:00000000000003b0 gpio_speed
              init.s:566    .text:00000000000003f4 $d
             forth.s:3687   .text:00000000000044f4 HI
           ps2_kbd.s:396    .text:00000000000013d4 PS2_QKEY
             tvout.s:563    .text:0000000000000c9c TV_EMIT
             forth.s:2552   .text:0000000000003864 INTER
             forth.s:3759   .text:0000000000004608 _LASTN
             forth.s:3784   .text:0000000000004670 CTOP
             forth.s:3758   .text:0000000000004608 LINK
              init.s:607    .text:00000000000004b0 $d
          ser-term.s:33     .text:00000000000004c0 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000546 $d
          ser-term.s:90     .text:000000000000054a _SER_QKEY
          ser-term.s:90     .text:0000000000000554 SER_QKEY
          ser-term.s:110    .text:0000000000000580 $d
          ser-term.s:110    .text:0000000000000584 _SER_EMIT
          ser-term.s:110    .text:0000000000000590 SER_EMIT
          ser-term.s:124    .text:00000000000005aa $d
          ser-term.s:124    .text:00000000000005ae _LOCAL
          ser-term.s:124    .text:00000000000005b4 $t
          ser-term.s:124    .text:00000000000005b4 LOCAL
          ser-term.s:133    .text:00000000000005c0 $d
          ser-term.s:133    .text:00000000000005c4 _SERIAL
ARM GAS  forth.s 			page 169


          ser-term.s:133    .text:00000000000005cc SERIAL
          ser-term.s:142    .text:00000000000005d8 $d
          ser-term.s:142    .text:00000000000005dc _CONSOLE
          ser-term.s:142    .text:00000000000005e4 $t
          ser-term.s:142    .text:00000000000005e4 CONSOLE
          ser-term.s:164    .text:0000000000000604 $d
          ser-term.s:164    .text:0000000000000608 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000614 ANSI_PARAM
          ser-term.s:166    .text:0000000000000618 $d
             forth.s:578    .text:0000000000002470 ONEP
             forth.s:1201   .text:0000000000002978 SLMOD
             forth.s:667    .text:0000000000002524 QDUP
             forth.s:324    .text:0000000000002272 BRAN
             forth.s:529    .text:0000000000002414 PLUS
             forth.s:586    .text:0000000000002480 ONEM
             forth.s:90     .text:00000000000020a6 UNNEST
          ser-term.s:191    .text:0000000000000684 _ANSI_ESC
          ser-term.s:191    .text:000000000000068c ANSI_ESC
          ser-term.s:193    .text:0000000000000690 $d
          ser-term.s:203    .text:00000000000006b0 _SER_AT
          ser-term.s:203    .text:00000000000006b8 SER_AT
          ser-term.s:205    .text:00000000000006bc $d
             forth.s:445    .text:0000000000002360 SWAP
          ser-term.s:219    .text:00000000000006ec _SER_CLS
          ser-term.s:219    .text:00000000000006f4 $t
          ser-term.s:219    .text:00000000000006f4 SER_CLS
          ser-term.s:221    .text:00000000000006f8 $d
          ser-term.s:228    .text:000000000000071c $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
ARM GAS  forth.s 			page 170


             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:000000000000072c $t
             tvout.s:150    .text:0000000000000808 state_vsync
             tvout.s:191    .text:000000000000085c state_pre_video
             tvout.s:202    .text:000000000000086e state_video_out
             tvout.s:237    .text:00000000000008cc state_post_video
             tvout.s:254    .text:00000000000008f2 tv_isr_exit
             tvout.s:180    .text:0000000000000842 sync_end
             tvout.s:246    .text:00000000000008de frame_end
             tvout.s:264    .text:00000000000008f4 $d
             tvout.s:264    .text:00000000000008f8 _BACKCOLOR
             tvout.s:264    .text:0000000000000904 BACKCOLOR
             tvout.s:271    .text:0000000000000910 $d
             tvout.s:271    .text:0000000000000914 _PENCOLOR
             tvout.s:271    .text:000000000000091e $t
             tvout.s:271    .text:0000000000000920 PENCOLOR
             tvout.s:278    .text:000000000000092c $d
             tvout.s:278    .text:0000000000000930 _CURSOR_COL
             tvout.s:278    .text:0000000000000938 CURSOR_COL
             tvout.s:285    .text:0000000000000944 $d
             tvout.s:285    .text:0000000000000948 _CURSOR_ROW
             tvout.s:285    .text:000000000000094c $t
             tvout.s:285    .text:000000000000094c CURSOR_ROW
             tvout.s:292    .text:0000000000000958 $d
             tvout.s:292    .text:000000000000095c _ROWY
             tvout.s:292    .text:0000000000000962 $t
             tvout.s:292    .text:0000000000000964 ROWY
             tvout.s:299    .text:0000000000000970 $d
             tvout.s:299    .text:0000000000000974 _COLX
             tvout.s:299    .text:000000000000097a $t
             tvout.s:299    .text:000000000000097c COLX
             tvout.s:306    .text:0000000000000988 $d
             tvout.s:306    .text:000000000000098c _FONT
             tvout.s:306    .text:0000000000000994 FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:00000000000009a0 $d
             tvout.s:313    .text:00000000000009a4 _VIDBUFF
             tvout.s:313    .text:00000000000009ac $t
             tvout.s:313    .text:00000000000009ac VIDBUFF
             tvout.s:325    .text:00000000000009b6 $d
             tvout.s:325    .text:00000000000009ba _PLOT
             tvout.s:325    .text:00000000000009c0 PLOT
             tvout.s:373    .text:0000000000000a44 plot_op
             tvout.s:341    .text:00000000000009ec op_back
             tvout.s:350    .text:0000000000000a06 op_pen
             tvout.s:359    .text:0000000000000a20 op_invert
             tvout.s:363    .text:0000000000000a28 op_xor
             tvout.s:373    .text:0000000000000a44 $d
             tvout.s:378    .text:0000000000000a4c _VSYNC
             tvout.s:378    .text:0000000000000a52 $t
             tvout.s:378    .text:0000000000000a54 VSYNC
             tvout.s:386    .text:0000000000000a5e $d
             tvout.s:386    .text:0000000000000a62 _CLS
             tvout.s:386    .text:0000000000000a66 $t
             tvout.s:386    .text:0000000000000a68 CLS
             tvout.s:410    .text:0000000000000aaa $d
             tvout.s:410    .text:0000000000000aae _CLRLINE
ARM GAS  forth.s 			page 171


             tvout.s:410    .text:0000000000000ab6 $t
             tvout.s:410    .text:0000000000000ab8 CLRLINE
             tvout.s:412    .text:0000000000000abc $d
             forth.s:547    .text:0000000000002434 STAR
             forth.s:1428   .text:0000000000002bac FILL
             tvout.s:427    .text:0000000000000af0 _SCROLLUP
             tvout.s:427    .text:0000000000000afc SCROLLUP
             tvout.s:429    .text:0000000000000b00 $d
             forth.s:538    .text:0000000000002424 SUBB
             forth.s:1396   .text:0000000000002b64 MOVE
             tvout.s:448    .text:0000000000000b48 _SCROLLDOWN
             tvout.s:448    .text:0000000000000b54 SCROLLDOWN
             tvout.s:450    .text:0000000000000b58 $d
             tvout.s:467    .text:0000000000000b98 _TV_CRLF
             tvout.s:467    .text:0000000000000ba0 $t
             tvout.s:467    .text:0000000000000ba0 TV_CRLF
             tvout.s:482    .text:0000000000000bc2 $d
             tvout.s:482    .text:0000000000000bc6 _RIGHT
             tvout.s:482    .text:0000000000000bcc $t
             tvout.s:482    .text:0000000000000bcc RIGHT
             tvout.s:495    .text:0000000000000be0 $d
             tvout.s:495    .text:0000000000000be4 _LEFT
             tvout.s:495    .text:0000000000000bec LEFT
             tvout.s:511    .text:0000000000000c18 FONT_PIXEL
             tvout.s:518    .text:0000000000000c28 INCR_X
             tvout.s:525    .text:0000000000000c34 NEXT_PIXEL
             tvout.s:534    .text:0000000000000c3c CHAR_ROW
             tvout.s:536    .text:0000000000000c40 $d
             forth.s:717    .text:0000000000002588 DDUP
             forth.s:384    .text:00000000000022e4 RAT
             forth.s:290    .text:0000000000002240 DONXT
             forth.s:708    .text:0000000000002574 TDROP
             tvout.s:551    .text:0000000000000c7c CHAR_FONT
             tvout.s:552    .text:0000000000000c7c $t
             tvout.s:563    .text:0000000000000c90 $d
             tvout.s:563    .text:0000000000000c94 _TV_EMIT
             tvout.s:563    .text:0000000000000c9c $t
             tvout.s:565    .text:0000000000000ca0 $d
             forth.s:789    .text:000000000000261c ULESS
             tvout.s:593    .text:0000000000000d24 CTRL_KEY
             forth.s:349    .text:00000000000022a4 AT
             forth.s:677    .text:0000000000002538 ROT
             forth.s:367    .text:00000000000022c4 CAT
             tvout.s:660    .text:0000000000000e0c SHOW_CURSOR
             tvout.s:691    .text:0000000000000e94 HIDE_CURSOR
             forth.s:777    .text:0000000000002604 EQUAL
             tvout.s:650    .text:0000000000000dec BACK_SPACE
             forth.s:429    .text:0000000000002340 DROP
             tvout.s:618    .text:0000000000000d94 CAR_RET
             tvout.s:629    .text:0000000000000dac LN_FEED
             tvout.s:619    .text:0000000000000d94 $t
             tvout.s:620    .text:0000000000000d98 $d
             tvout.s:630    .text:0000000000000dac $t
             tvout.s:631    .text:0000000000000db0 $d
             forth.s:490    .text:00000000000023bc XORR
             tvout.s:651    .text:0000000000000dec $t
             tvout.s:652    .text:0000000000000df0 $d
ARM GAS  forth.s 			page 172


             tvout.s:660    .text:0000000000000e00 _SHOW_CURSOR
             tvout.s:660    .text:0000000000000e0c $t
             tvout.s:663    .text:0000000000000e10 $d
             forth.s:659    .text:0000000000002514 TWOSL
             forth.s:357    .text:00000000000022b0 CSTOR
             forth.s:699    .text:0000000000002560 DDROP
             tvout.s:691    .text:0000000000000e88 _HIDE_CURSOR
             tvout.s:691    .text:0000000000000e94 $t
             tvout.s:694    .text:0000000000000e98 $d
             forth.s:520    .text:0000000000002404 LSHIFT
             forth.s:481    .text:00000000000023a8 ORR
             tvout.s:704    .text:0000000000000ec0 _TV_AT
             tvout.s:704    .text:0000000000000ec6 $t
             tvout.s:704    .text:0000000000000ec8 TV_AT
             tvout.s:719    .text:0000000000000eec $d
             tvout.s:719    .text:0000000000000ef0 _INPUT
             tvout.s:719    .text:0000000000000ef6 $t
             tvout.s:719    .text:0000000000000ef8 INPUT
             tvout.s:721    .text:0000000000000efc $d
             forth.s:1340   .text:0000000000002adc PAD
             forth.s:2460   .text:0000000000003750 ACCEP
             forth.s:455    .text:0000000000002374 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000000f28 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
ARM GAS  forth.s 			page 173


       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
ARM GAS  forth.s 			page 174


       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:0000000000000f34 sc_ascii
         mcSaite.inc:100    .text:0000000000000fe8 shifted
         mcSaite.inc:151    .text:0000000000001048 altchar
         mcSaite.inc:167    .text:0000000000001058 extended
         mcSaite.inc:191    .text:0000000000001080 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
ARM GAS  forth.s 			page 175


           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:00000000000010b6 $t
           ps2_kbd.s:179    .text:00000000000011e2 send_bit
           ps2_kbd.s:107    .text:0000000000001118 start_bit
           ps2_kbd.s:118    .text:000000000000113c parity_bit
           ps2_kbd.s:125    .text:0000000000001150 stop_bit
           ps2_kbd.s:152    .text:00000000000011a6 store_code
           ps2_kbd.s:253    .text:0000000000001276 do_async_key
           ps2_kbd.s:204    .text:0000000000001226 send_parity
           ps2_kbd.s:211    .text:0000000000001238 send_stop
           ps2_kbd.s:218    .text:0000000000001242 rx_ack_bit
           ps2_kbd.s:236    .text:0000000000001262 is_async_key
           ps2_kbd.s:286    .text:00000000000012c6 async_keys
           ps2_kbd.s:378    .text:00000000000013ac table_scan
           ps2_kbd.s:260    .text:0000000000001288 set_async_key
           ps2_kbd.s:295    .text:00000000000012d4 async_jump
           ps2_kbd.s:265    .text:0000000000001296 shift_key
           ps2_kbd.s:273    .text:00000000000012a6 set_reset
           ps2_kbd.s:268    .text:000000000000129c ctrl_key
           ps2_kbd.s:271    .text:00000000000012a2 alt_key
           ps2_kbd.s:287    .text:00000000000012c6 $d
           ps2_kbd.s:340    .text:0000000000001354 $d
           ps2_kbd.s:340    .text:0000000000001358 _KEY_ASYNC
           ps2_kbd.s:340    .text:0000000000001362 $t
           ps2_kbd.s:340    .text:0000000000001364 KEY_ASYNC
           ps2_kbd.s:350    .text:0000000000001374 keycode
           ps2_kbd.s:365    .text:000000000000139c wait_code
           ps2_kbd.s:396    .text:00000000000013c6 $d
           ps2_kbd.s:396    .text:00000000000013ca _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001420 inkey_exit
           ps2_kbd.s:418    .text:0000000000001424 pause_key
           ps2_kbd.s:427    .text:000000000000143a do_modifiers
           ps2_kbd.s:436    .text:0000000000001452 shift_down
           ps2_kbd.s:440    .text:0000000000001458 altchar_down
           ps2_kbd.s:444    .text:000000000000145e ctrl_down
           ps2_kbd.s:452    .text:000000000000147a do_capslock
           ps2_kbd.s:478    .text:000000000000149e kbd_send
           ps2_kbd.s:553    .text:0000000000001592 kbd_clear_queue
           ps2_kbd.s:567    .text:00000000000015b0 $d
           ps2_kbd.s:567    .text:00000000000015b4 _KBD_RST
           ps2_kbd.s:567    .text:00000000000015bc $t
           ps2_kbd.s:567    .text:00000000000015bc KBD_RST
           ps2_kbd.s:591    .text:0000000000001606 $d
           ps2_kbd.s:591    .text:000000000000160a _KBD_LED
           ps2_kbd.s:591    .text:0000000000001612 $t
           ps2_kbd.s:591    .text:0000000000001614 KBD_LED
           ps2_kbd.s:616    .text:0000000000001668 $d
           ps2_kbd.s:616    .text:000000000000166c _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001678 CAPS_LED
           ps2_kbd.s:633    .text:00000000000016a2 $d
           ps2_kbd.s:633    .text:00000000000016a6 _WKEY
ARM GAS  forth.s 			page 176


           ps2_kbd.s:633    .text:00000000000016b0 WKEY
           ps2_kbd.s:635    .text:00000000000016b4 $d
           ps2_kbd.s:640    .text:00000000000016cc $d
         spi-flash.s:26     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:27     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:28     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:29     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:40     .text:00000000000016ec $t
         spi-flash.s:83     .text:000000000000178e $d
         spi-flash.s:83     .text:0000000000001792 _CHIP_SEL
         spi-flash.s:83     .text:000000000000179c CHIP_SEL
         spi-flash.s:95     .text:00000000000017ba $d
         spi-flash.s:95     .text:00000000000017be _CHIP_DSEL
         spi-flash.s:95     .text:00000000000017c8 $t
         spi-flash.s:95     .text:00000000000017c8 CHIP_DSEL
         spi-flash.s:111    .text:00000000000017f6 $d
         spi-flash.s:111    .text:00000000000017fa _RD_BYTE
         spi-flash.s:111    .text:0000000000001802 $t
         spi-flash.s:111    .text:0000000000001804 RD_BYTE
         spi-flash.s:131    .text:000000000000182c $d
         spi-flash.s:131    .text:0000000000001830 _WR_BYTE
         spi-flash.s:131    .text:0000000000001838 $t
         spi-flash.s:131    .text:0000000000001838 WR_BYTE
         spi-flash.s:149    .text:000000000000185c $d
         spi-flash.s:149    .text:0000000000001860 _WR_DIS
         spi-flash.s:149    .text:0000000000001868 WR_DIS
         spi-flash.s:151    .text:000000000000186c $d
         spi-flash.s:161    .text:0000000000001888 _WR_ENBL
         spi-flash.s:161    .text:0000000000001890 $t
         spi-flash.s:161    .text:0000000000001890 WR_ENBL
         spi-flash.s:163    .text:0000000000001894 $d
         spi-flash.s:173    .text:00000000000018b0 _RD_SR
         spi-flash.s:173    .text:00000000000018b6 $t
         spi-flash.s:173    .text:00000000000018b8 RD_SR
         spi-flash.s:175    .text:00000000000018bc $d
         spi-flash.s:183    .text:00000000000018e0 sr_cmd
         spi-flash.s:189    .text:00000000000018e7 _SEND_ADR
         spi-flash.s:189    .text:00000000000018f0 $t
         spi-flash.s:189    .text:00000000000018f0 SEND_ADR
         spi-flash.s:191    .text:00000000000018f4 $d
             forth.s:511    .text:00000000000023ec RSHIFT
         spi-flash.s:206    .text:0000000000001928 _WAIT_DONE
         spi-flash.s:206    .text:0000000000001932 $t
         spi-flash.s:206    .text:0000000000001934 WAIT_DONE
         spi-flash.s:208    .text:0000000000001938 $d
         spi-flash.s:221    .text:0000000000001968 _ERASE_BLK
         spi-flash.s:221    .text:0000000000001972 $t
         spi-flash.s:221    .text:0000000000001974 ERASE_BLK
         spi-flash.s:223    .text:0000000000001978 $d
         spi-flash.s:236    .text:00000000000019a0 _ERASE_CHIP
         spi-flash.s:236    .text:00000000000019ac ERASE_CHIP
         spi-flash.s:238    .text:00000000000019b0 $d
         spi-flash.s:254    .text:00000000000019e0 _RD_BLK
         spi-flash.s:254    .text:00000000000019e8 RD_BLK
         spi-flash.s:256    .text:00000000000019ec $d
         spi-flash.s:276    .text:0000000000001a34 _WR_BLK
         spi-flash.s:276    .text:0000000000001a3c WR_BLK
ARM GAS  forth.s 			page 177


         spi-flash.s:278    .text:0000000000001a40 $d
             forth.s:1995   .text:00000000000031bc HDOT
             float.s:44     *ABS*:0000000000ffffff MAX_MANTISSA
             float.s:59     .text:0000000000001a94 PREP_FP
             float.s:60     .text:0000000000001a94 $t
             float.s:83     .text:0000000000001aac digit_add
             float.s:104    .text:0000000000001ac2 digit_sub
             float.s:128    .text:0000000000001ae6 digit_prod
             float.s:142    .text:0000000000001afe $d
             float.s:142    .text:0000000000001b02 _BCD_ADD
             float.s:142    .text:0000000000001b08 BCD_ADD
             float.s:167    .text:0000000000001b42 $d
             float.s:167    .text:0000000000001b46 _BCD_SUB
             float.s:167    .text:0000000000001b4c BCD_SUB
             float.s:192    .text:0000000000001b86 $d
             float.s:192    .text:0000000000001b8a _BCD_1P
             float.s:192    .text:0000000000001b90 $t
             float.s:192    .text:0000000000001b90 BCD_1P
             float.s:221    .text:0000000000001bdc $d
             float.s:221    .text:0000000000001be0 _BCD_NEG
             float.s:221    .text:0000000000001be8 $t
             float.s:221    .text:0000000000001be8 BCD_NEG
             float.s:232    .text:0000000000001bf6 $d
             float.s:232    .text:0000000000001bfa _BCD_STAR
             float.s:232    .text:0000000000001c00 BCD_STAR
             float.s:240    .text:0000000000001c02 $d
             float.s:240    .text:0000000000001c06 _BCD_BIN
             float.s:240    .text:0000000000001c0e $t
             float.s:240    .text:0000000000001c10 BCD_BIN
             float.s:262    .text:0000000000001c40 $d
             float.s:262    .text:0000000000001c44 _BIN_BCD
             float.s:262    .text:0000000000001c4c $t
             float.s:262    .text:0000000000001c4c BIN_BCD
             float.s:291    .text:0000000000001c96 $d
             float.s:291    .text:0000000000001c9a _FPLUS
             float.s:291    .text:0000000000001ca0 FPLUS
             float.s:294    .text:0000000000001ca4 $d
             float.s:300    .text:0000000000001cac _FMINUS
             float.s:300    .text:0000000000001cb0 FMINUS
             float.s:303    .text:0000000000001cb4 $d
             float.s:314    .text:0000000000001cbc _FSLH
             float.s:314    .text:0000000000001cc0 FSLH
             float.s:317    .text:0000000000001cc4 $d
             float.s:324    .text:0000000000001ccc _FNEG
             float.s:324    .text:0000000000001cd4 $t
             float.s:324    .text:0000000000001cd4 FNEG
             float.s:327    .text:0000000000001cd8 $d
             float.s:333    .text:0000000000001ce0 _INT
             float.s:333    .text:0000000000001ce4 $t
             float.s:333    .text:0000000000001ce4 INT
             float.s:336    .text:0000000000001ce8 $d
             float.s:342    .text:0000000000001cf0 _UFLOAT
             float.s:342    .text:0000000000001cf8 UFLOAT
             float.s:345    .text:0000000000001cfc $d
             float.s:351    .text:0000000000001d04 _FDOT
             float.s:351    .text:0000000000001d08 FDOT
             float.s:354    .text:0000000000001d0c $d
ARM GAS  forth.s 			page 178


             float.s:359    .text:0000000000001d10 ACCUM_DIGITS
             float.s:360    .text:0000000000001d10 $t
             float.s:361    .text:0000000000001d14 $d
             forth.s:1659   .text:0000000000002e10 DIGTQ
             float.s:388    .text:0000000000001d90 MANTISSA
             float.s:389    .text:0000000000001d90 $t
             float.s:390    .text:0000000000001d94 $d
             forth.s:688    .text:000000000000254c NROT
             float.s:409    .text:0000000000001dd8 EXPONENT
             float.s:410    .text:0000000000001dd8 $t
             float.s:411    .text:0000000000001ddc $d
             forth.s:1718   .text:0000000000002ebc DASHQ
             float.s:422    .text:0000000000001e00 FORMAT_FLOAT
             float.s:423    .text:0000000000001e00 $t
             float.s:424    .text:0000000000001e04 $d
             float.s:454    .text:0000000000001e80 BOUND_MANTISSA
             float.s:455    .text:0000000000001e80 $t
             float.s:456    .text:0000000000001e84 $d
             forth.s:813    .text:000000000000264c UGREAT
             float.s:470    .text:0000000000001ecc SCALE_UP
             forth.s:1225   .text:00000000000029b0 SLASH
             forth.s:740    .text:00000000000025b8 INVER
             float.s:488    .text:0000000000001f0c _FLOATQ
             float.s:488    .text:0000000000001f14 FLOATQ
             float.s:490    .text:0000000000001f18 $d
             forth.s:1642   .text:0000000000002dec DECIM
             forth.s:699    .text:000000000000255a _DDROP
             forth.s:3442   .text:00000000000042bc TRACE
             forth.s:766    .text:00000000000025f0 ZEQUAL
             float.s:566    .text:0000000000002070 _NUMBER
             float.s:566    .text:0000000000002078 NUMBER
             float.s:568    .text:000000000000207c $d
             forth.s:1743   .text:0000000000002eec INTQ
             forth.s:80     .text:0000000000002098 $t
             forth.s:103    .text:00000000000020b0 COMPI_NEST
             forth.s:116    .text:00000000000020ce TSTDIN
             forth.s:123    .text:00000000000020d8 TSTDOUT
             forth.s:132    .text:00000000000020e2 $d
             forth.s:132    .text:00000000000020e6 _QKEY
             forth.s:132    .text:00000000000020ec QKEY
             forth.s:134    .text:00000000000020f0 $d
             forth.s:1363   .text:0000000000002b14 ATEXE
             forth.s:142    .text:0000000000002100 _KEY
             forth.s:142    .text:0000000000002104 $t
             forth.s:142    .text:0000000000002104 KEY
             forth.s:144    .text:0000000000002108 KEY1
             forth.s:145    .text:0000000000002108 $d
             forth.s:154    .text:0000000000002120 _EMIT
             forth.s:156    .text:000000000000212c $d
             forth.s:190    .text:000000000000213c _RAND
             forth.s:190    .text:0000000000002144 RAND
             forth.s:192    .text:0000000000002148 $d
             forth.s:756    .text:00000000000025dc ABSS
             forth.s:944    .text:0000000000002734 SEED
             forth.s:1214   .text:0000000000002998 MODD
             forth.s:221    .text:00000000000021b8 _PAUSE
             forth.s:221    .text:00000000000021be $t
ARM GAS  forth.s 			page 179


             forth.s:221    .text:00000000000021c0 PAUSE
             forth.s:223    .text:00000000000021c4 $d
             forth.s:962    .text:000000000000275c TIMER
             forth.s:225    .text:00000000000021cc PAUSE_LOOP
             forth.s:230    .text:00000000000021e4 PAUSE_EXIT
             forth.s:237    .text:00000000000021ec _ULED
             forth.s:237    .text:00000000000021f4 ULED
             forth.s:246    .text:0000000000002210 ULED_OFF
             forth.s:260    .text:0000000000002214 $d
             forth.s:260    .text:0000000000002218 _NOP
             forth.s:260    .text:000000000000221c $t
             forth.s:260    .text:000000000000221c NOP
             forth.s:277    .text:0000000000002228 $d
             forth.s:277    .text:000000000000222c _EXECU
             forth.s:277    .text:0000000000002234 $t
             forth.s:277    .text:0000000000002234 EXECU
             forth.s:297    .text:0000000000002250 NEXT1
             forth.s:315    .text:000000000000226c QBRAN1
             forth.s:332    .text:0000000000002278 $d
             forth.s:332    .text:000000000000227c _EXIT
             forth.s:332    .text:0000000000002284 EXIT
             forth.s:333    .text:0000000000002284 $d
             forth.s:339    .text:000000000000228c _STORE
             forth.s:339    .text:000000000000228e $t
             forth.s:349    .text:000000000000229c $d
             forth.s:349    .text:00000000000022a0 _AT
             forth.s:349    .text:00000000000022a2 $t
             forth.s:357    .text:00000000000022a8 $d
             forth.s:357    .text:00000000000022ac _CSTOR
             forth.s:367    .text:00000000000022bc $d
             forth.s:367    .text:00000000000022c0 _CAT
             forth.s:375    .text:00000000000022c8 $d
             forth.s:375    .text:00000000000022cc _RFROM
             forth.s:384    .text:00000000000022da $d
             forth.s:384    .text:00000000000022de _RAT
             forth.s:393    .text:00000000000022ee $d
             forth.s:393    .text:00000000000022f2 _TOR
             forth.s:402    .text:0000000000002302 $d
             forth.s:402    .text:0000000000002306 _RPSTOR
             forth.s:402    .text:000000000000230a $t
             forth.s:402    .text:000000000000230c RPSTOR
             forth.s:411    .text:0000000000002314 $d
             forth.s:411    .text:0000000000002318 _SPSTOR
             forth.s:411    .text:000000000000231c $t
             forth.s:411    .text:000000000000231c SPSTOR
             forth.s:420    .text:0000000000002324 $d
             forth.s:420    .text:0000000000002328 _SPAT
             forth.s:420    .text:000000000000232c $t
             forth.s:420    .text:000000000000232c SPAT
             forth.s:429    .text:0000000000002334 $d
             forth.s:429    .text:0000000000002338 _DROP
             forth.s:437    .text:0000000000002346 $d
             forth.s:437    .text:000000000000234a _DUPP
             forth.s:437    .text:000000000000234e $t
             forth.s:445    .text:0000000000002356 $d
             forth.s:445    .text:000000000000235a _SWAP
             forth.s:455    .text:0000000000002368 $d
ARM GAS  forth.s 			page 180


             forth.s:455    .text:000000000000236c _OVER
             forth.s:464    .text:000000000000237c $d
             forth.s:464    .text:0000000000002380 _ZLESS
             forth.s:464    .text:0000000000002384 ZLESS
             forth.s:472    .text:000000000000238a $d
             forth.s:472    .text:000000000000238e _ANDD
             forth.s:472    .text:0000000000002392 $t
             forth.s:481    .text:000000000000239e $d
             forth.s:481    .text:00000000000023a2 _ORR
             forth.s:490    .text:00000000000023b2 $d
             forth.s:490    .text:00000000000023b6 _XORR
             forth.s:490    .text:00000000000023ba $t
             forth.s:499    .text:00000000000023c6 $d
             forth.s:499    .text:00000000000023ca _UPLUS
             forth.s:499    .text:00000000000023ce $t
             forth.s:499    .text:00000000000023d0 UPLUS
             forth.s:511    .text:00000000000023e0 $d
             forth.s:511    .text:00000000000023e4 _RSHIFT
             forth.s:520    .text:00000000000023f6 $d
             forth.s:520    .text:00000000000023fa _LSHIFT
             forth.s:529    .text:000000000000240e $d
             forth.s:529    .text:0000000000002412 _PLUS
             forth.s:529    .text:0000000000002414 $t
             forth.s:538    .text:000000000000241c $d
             forth.s:538    .text:0000000000002420 _SUBB
             forth.s:538    .text:0000000000002422 $t
             forth.s:547    .text:000000000000242e $d
             forth.s:547    .text:0000000000002432 _STAR
             forth.s:547    .text:0000000000002434 $t
             forth.s:556    .text:000000000000243e $d
             forth.s:556    .text:0000000000002442 _UMSTA
             forth.s:556    .text:0000000000002446 $t
             forth.s:556    .text:0000000000002448 UMSTA
             forth.s:567    .text:0000000000002454 $d
             forth.s:567    .text:0000000000002458 _MSTAR
             forth.s:567    .text:000000000000245c MSTAR
             forth.s:578    .text:0000000000002468 $d
             forth.s:578    .text:000000000000246c _ONEP
             forth.s:586    .text:0000000000002476 $d
             forth.s:586    .text:000000000000247a _ONEM
             forth.s:594    .text:0000000000002486 $d
             forth.s:594    .text:000000000000248a _TWOP
             forth.s:594    .text:0000000000002490 TWOP
             forth.s:602    .text:0000000000002496 $d
             forth.s:602    .text:000000000000249a _TWOM
             forth.s:602    .text:00000000000024a0 TWOM
             forth.s:610    .text:00000000000024a6 $d
             forth.s:610    .text:00000000000024aa _CELLP
             forth.s:610    .text:00000000000024b0 $t
             forth.s:610    .text:00000000000024b0 CELLP
             forth.s:618    .text:00000000000024b6 $d
             forth.s:618    .text:00000000000024ba _CELLM
             forth.s:618    .text:00000000000024c0 $t
             forth.s:618    .text:00000000000024c0 CELLM
             forth.s:626    .text:00000000000024c6 $d
             forth.s:626    .text:00000000000024ca _BLANK
             forth.s:626    .text:00000000000024d0 BLANK
ARM GAS  forth.s 			page 181


             forth.s:635    .text:00000000000024da $d
             forth.s:635    .text:00000000000024de _CELLS
             forth.s:635    .text:00000000000024e4 $t
             forth.s:635    .text:00000000000024e4 CELLS
             forth.s:643    .text:00000000000024ea $d
             forth.s:643    .text:00000000000024ee _CELLSL
             forth.s:643    .text:00000000000024f4 $t
             forth.s:643    .text:00000000000024f4 CELLSL
             forth.s:651    .text:00000000000024fa $d
             forth.s:651    .text:00000000000024fe _TWOST
             forth.s:651    .text:0000000000002504 TWOST
             forth.s:659    .text:000000000000250a $d
             forth.s:659    .text:000000000000250e _TWOSL
             forth.s:667    .text:000000000000251a $d
             forth.s:667    .text:000000000000251e _QDUP
             forth.s:677    .text:000000000000252e $d
             forth.s:677    .text:0000000000002532 _ROT
             forth.s:677    .text:0000000000002536 $t
             forth.s:688    .text:0000000000002542 $d
             forth.s:688    .text:0000000000002546 _NROT
             forth.s:699    .text:0000000000002556 $d
             forth.s:699    .text:0000000000002560 $t
             forth.s:708    .text:000000000000256a $d
             forth.s:708    .text:000000000000256e _TDROP
             forth.s:708    .text:0000000000002574 $t
             forth.s:717    .text:000000000000257e $d
             forth.s:717    .text:0000000000002582 _DDUP
             forth.s:727    .text:0000000000002594 $d
             forth.s:727    .text:0000000000002598 _DPLUS
             forth.s:727    .text:000000000000259c DPLUS
             forth.s:740    .text:00000000000025b0 $d
             forth.s:740    .text:00000000000025b4 _INVER
             forth.s:740    .text:00000000000025b8 $t
             forth.s:748    .text:00000000000025be $d
             forth.s:748    .text:00000000000025c2 _NEGAT
             forth.s:748    .text:00000000000025cc NEGAT
             forth.s:756    .text:00000000000025d2 $d
             forth.s:756    .text:00000000000025d6 _ABSS
             forth.s:756    .text:00000000000025da $t
             forth.s:766    .text:00000000000025e6 $d
             forth.s:766    .text:00000000000025ea _ZEQUAL
             forth.s:777    .text:00000000000025fe $d
             forth.s:777    .text:0000000000002602 _EQUAL
             forth.s:777    .text:0000000000002604 $t
             forth.s:789    .text:0000000000002614 $d
             forth.s:789    .text:0000000000002618 _ULESS
             forth.s:801    .text:000000000000262c $d
             forth.s:801    .text:0000000000002630 _LESS
             forth.s:801    .text:0000000000002632 $t
             forth.s:801    .text:0000000000002634 LESS
             forth.s:813    .text:0000000000002644 $d
             forth.s:813    .text:0000000000002648 _UGREAT
             forth.s:825    .text:000000000000265c $d
             forth.s:825    .text:0000000000002660 _GREAT
             forth.s:825    .text:0000000000002662 $t
             forth.s:825    .text:0000000000002664 GREAT
             forth.s:837    .text:0000000000002674 $d
ARM GAS  forth.s 			page 182


             forth.s:837    .text:0000000000002678 _MAX
             forth.s:837    .text:000000000000267c $t
             forth.s:837    .text:000000000000267c MAX
             forth.s:848    .text:0000000000002688 $d
             forth.s:848    .text:000000000000268c _MIN
             forth.s:848    .text:0000000000002690 $t
             forth.s:848    .text:0000000000002690 MIN
             forth.s:859    .text:000000000000269c $d
             forth.s:859    .text:00000000000026a0 _PSTOR
             forth.s:859    .text:00000000000026a4 PSTOR
             forth.s:871    .text:00000000000026b4 $d
             forth.s:871    .text:00000000000026b8 _DSTOR
             forth.s:871    .text:00000000000026bc DSTOR
             forth.s:883    .text:00000000000026d0 $d
             forth.s:883    .text:00000000000026d4 _DAT
             forth.s:883    .text:00000000000026d8 DAT
             forth.s:893    .text:00000000000026e2 $d
             forth.s:893    .text:00000000000026e6 _COUNT
             forth.s:893    .text:00000000000026ec $t
             forth.s:903    .text:00000000000026f8 $d
             forth.s:903    .text:00000000000026fc _DNEGA
             forth.s:903    .text:0000000000002704 $t
             forth.s:903    .text:0000000000002704 DNEGA
             forth.s:920    .text:0000000000002714 DOVAR
             forth.s:931    .text:0000000000002720 DOCON
             forth.s:944    .text:000000000000272a $d
             forth.s:944    .text:000000000000272e _SEED
             forth.s:953    .text:000000000000273e $d
             forth.s:953    .text:0000000000002742 _MSEC
             forth.s:953    .text:0000000000002748 MSEC
             forth.s:962    .text:0000000000002752 $d
             forth.s:962    .text:0000000000002756 _TIMER
             forth.s:962    .text:000000000000275c $t
             forth.s:971    .text:0000000000002766 $d
             forth.s:971    .text:000000000000276a _TBOOT
             forth.s:971    .text:0000000000002770 $t
             forth.s:971    .text:0000000000002770 TBOOT
             forth.s:980    .text:000000000000277a $d
             forth.s:980    .text:000000000000277e _BASE
             forth.s:990    .text:000000000000278e TEMP
             forth.s:999    .text:0000000000002798 $d
             forth.s:999    .text:000000000000279c _SPAN
             forth.s:999    .text:00000000000027a4 SPAN
             forth.s:1008   .text:00000000000027ae $d
             forth.s:1008   .text:00000000000027b2 _INN
             forth.s:1008   .text:00000000000027b6 $t
             forth.s:1008   .text:00000000000027b8 INN
             forth.s:1018   .text:00000000000027c2 $d
             forth.s:1018   .text:00000000000027c6 _NTIB
             forth.s:1018   .text:00000000000027cc NTIB
             forth.s:1027   .text:00000000000027d6 $d
             forth.s:1027   .text:00000000000027da _TEVAL
             forth.s:1027   .text:00000000000027e0 $t
             forth.s:1027   .text:00000000000027e0 TEVAL
             forth.s:1037   .text:00000000000027ea $d
             forth.s:1037   .text:00000000000027ee _HLD
             forth.s:1037   .text:00000000000027f2 $t
ARM GAS  forth.s 			page 183


             forth.s:1037   .text:00000000000027f4 HLD
             forth.s:1047   .text:00000000000027fe $d
             forth.s:1047   .text:0000000000002802 _CNTXT
             forth.s:1047   .text:000000000000280a $t
             forth.s:1047   .text:000000000000280c CNTXT
             forth.s:1048   .text:000000000000280c CRRNT
             forth.s:1058   .text:0000000000002816 $d
             forth.s:1058   .text:000000000000281a _CPP
             forth.s:1058   .text:0000000000002820 CPP
             forth.s:1068   .text:000000000000282a $d
             forth.s:1068   .text:000000000000282e _FCP
             forth.s:1068   .text:0000000000002832 $t
             forth.s:1068   .text:0000000000002834 FCP
             forth.s:1078   .text:000000000000283e $d
             forth.s:1078   .text:0000000000002842 _LAST
             forth.s:1078   .text:0000000000002848 LAST
             forth.s:1092   .text:0000000000002852 $d
             forth.s:1092   .text:0000000000002856 _USER_BEGIN
             forth.s:1092   .text:0000000000002864 USER_BEGIN
             forth.s:1096   .text:000000000000286c USR_BGN_ADR
             forth.s:1097   .text:000000000000286c $d
             forth.s:1103   .text:0000000000002874 _USER_END
             forth.s:1103   .text:0000000000002880 USER_END
             forth.s:1107   .text:0000000000002888 USER_END_ADR
             forth.s:1108   .text:0000000000002888 $d
             forth.s:1120   .text:0000000000002890 _WITHI
             forth.s:1120   .text:0000000000002898 WITHI
             forth.s:1122   .text:000000000000289c $d
             forth.s:1137   .text:00000000000028bc _UMMOD
             forth.s:1137   .text:00000000000028c4 UMMOD
             forth.s:1141   .text:00000000000028ce UMMOD0
             forth.s:1148   .text:00000000000028de UMMOD1
             forth.s:1154   .text:00000000000028e8 UMMOD2
             forth.s:1167   .text:00000000000028f4 $d
             forth.s:1167   .text:00000000000028f8 _MSMOD
             forth.s:1167   .text:00000000000028fe $t
             forth.s:1167   .text:0000000000002900 MSMOD
             forth.s:1169   .text:0000000000002904 $d
             forth.s:1178   .text:000000000000292c MMOD1
             forth.s:1185   .text:0000000000002948 MMOD2
             forth.s:1193   .text:0000000000002968 MMOD3
             forth.s:1201   .text:0000000000002970 _SLMOD
             forth.s:1203   .text:000000000000297c $d
             forth.s:1214   .text:0000000000002994 _MODD
             forth.s:1214   .text:0000000000002998 $t
             forth.s:1216   .text:000000000000299c $d
             forth.s:1225   .text:00000000000029ac _SLASH
             forth.s:1225   .text:00000000000029ae $t
             forth.s:1227   .text:00000000000029b4 $d
             forth.s:1238   .text:00000000000029c8 _SSMOD
             forth.s:1238   .text:00000000000029ce $t
             forth.s:1238   .text:00000000000029d0 SSMOD
             forth.s:1240   .text:00000000000029d4 $d
             forth.s:1252   .text:00000000000029ec _STASL
             forth.s:1252   .text:00000000000029f0 STASL
             forth.s:1254   .text:00000000000029f4 $d
             forth.s:1268   .text:0000000000002a08 _ALGND
ARM GAS  forth.s 			page 184


             forth.s:1268   .text:0000000000002a10 $t
             forth.s:1268   .text:0000000000002a10 ALGND
             forth.s:1279   .text:0000000000002a20 $d
             forth.s:1279   .text:0000000000002a24 _TCHAR
             forth.s:1279   .text:0000000000002a2a $t
             forth.s:1279   .text:0000000000002a2c TCHAR
             forth.s:1281   .text:0000000000002a30 $d
             forth.s:1291   .text:0000000000002a68 TCHA1
             forth.s:1299   .text:0000000000002a70 _DEPTH
             forth.s:1299   .text:0000000000002a76 $t
             forth.s:1299   .text:0000000000002a78 DEPTH
             forth.s:1311   .text:0000000000002a90 $d
             forth.s:1311   .text:0000000000002a94 _PICK
             forth.s:1311   .text:0000000000002a9c PICK
             forth.s:1313   .text:0000000000002aa0 $d
             forth.s:1329   .text:0000000000002abc _HERE
             forth.s:1329   .text:0000000000002ac4 HERE
             forth.s:1331   .text:0000000000002ac8 $d
             forth.s:1340   .text:0000000000002ad8 _PAD
             forth.s:1340   .text:0000000000002adc $t
             forth.s:1342   .text:0000000000002ae0 $d
             forth.s:1353   .text:0000000000002af8 _TIB
             forth.s:1353   .text:0000000000002afc $t
             forth.s:1353   .text:0000000000002afc TIB
             forth.s:1363   .text:0000000000002b06 $d
             forth.s:1363   .text:0000000000002b0a _ATEXE
             forth.s:1376   .text:0000000000002b28 $d
             forth.s:1376   .text:0000000000002b2c _CMOVE
             forth.s:1376   .text:0000000000002b32 $t
             forth.s:1376   .text:0000000000002b34 CMOVE
             forth.s:1383   .text:0000000000002b46 CMOV1
             forth.s:1380   .text:0000000000002b3e CMOV0
             forth.s:1388   .text:0000000000002b50 CMOV2
             forth.s:1396   .text:0000000000002b58 $d
             forth.s:1396   .text:0000000000002b5c _MOVE
             forth.s:1414   .text:0000000000002b8e MOVE1
             forth.s:1411   .text:0000000000002b8a MOVE3
             forth.s:1408   .text:0000000000002b86 MOVE0
             forth.s:1419   .text:0000000000002b98 MOVE2
             forth.s:1428   .text:0000000000002ba0 $d
             forth.s:1428   .text:0000000000002ba4 _FILL
             forth.s:1436   .text:0000000000002bba FILL2
             forth.s:1432   .text:0000000000002bb2 FILL1
             forth.s:1446   .text:0000000000002bc2 $d
             forth.s:1446   .text:0000000000002bc6 _PACKS
             forth.s:1446   .text:0000000000002bcc $t
             forth.s:1446   .text:0000000000002bcc PACKS
             forth.s:1448   .text:0000000000002bd0 $d
             forth.s:1477   .text:0000000000002c28 _DIGIT
             forth.s:1477   .text:0000000000002c2e $t
             forth.s:1477   .text:0000000000002c30 DIGIT
             forth.s:1479   .text:0000000000002c34 $d
             forth.s:1494   .text:0000000000002c68 _EXTRC
             forth.s:1494   .text:0000000000002c70 $t
             forth.s:1494   .text:0000000000002c70 EXTRC
             forth.s:1496   .text:0000000000002c74 $d
             forth.s:1508   .text:0000000000002c94 _BDIGS
ARM GAS  forth.s 			page 185


             forth.s:1508   .text:0000000000002c98 BDIGS
             forth.s:1510   .text:0000000000002c9c $d
             forth.s:1520   .text:0000000000002cb0 _HOLD
             forth.s:1522   .text:0000000000002cbc $d
             forth.s:1538   .text:0000000000002ce0 _DIG
             forth.s:1538   .text:0000000000002ce2 $t
             forth.s:1538   .text:0000000000002ce4 DIG
             forth.s:1540   .text:0000000000002ce8 $d
             forth.s:1552   .text:0000000000002d00 _DIGS
             forth.s:1552   .text:0000000000002d04 DIGS
             forth.s:1554   .text:0000000000002d08 DIGS1
             forth.s:1555   .text:0000000000002d08 $d
             forth.s:1559   .text:0000000000002d20 DIGS2
             forth.s:1568   .text:0000000000002d28 _SIGN
             forth.s:1568   .text:0000000000002d30 SIGN
             forth.s:1570   .text:0000000000002d34 $d
             forth.s:1574   .text:0000000000002d4c SIGN1
             forth.s:1582   .text:0000000000002d54 _EDIGS
             forth.s:1582   .text:0000000000002d58 EDIGS
             forth.s:1584   .text:0000000000002d5c $d
             forth.s:1599   .text:0000000000002d78 STRR
             forth.s:1600   .text:0000000000002d78 $t
             forth.s:1601   .text:0000000000002d7c $d
             forth.s:1617   .text:0000000000002da4 _HEX
             forth.s:1617   .text:0000000000002da8 $t
             forth.s:1617   .text:0000000000002da8 HEX
             forth.s:1619   .text:0000000000002dac $d
             forth.s:1630   .text:0000000000002dc4 _BIN
             forth.s:1630   .text:0000000000002dc8 $t
             forth.s:1630   .text:0000000000002dc8 BIN
             forth.s:1632   .text:0000000000002dcc $d
             forth.s:1642   .text:0000000000002de4 _DECIM
             forth.s:1642   .text:0000000000002dec $t
             forth.s:1644   .text:0000000000002df0 $d
             forth.s:1659   .text:0000000000002e08 _DIGTQ
             forth.s:1661   .text:0000000000002e14 $d
             forth.s:1674   .text:0000000000002e5c DGTQ1
             forth.s:1689   .text:0000000000002e6c PARSE_DIGITS
             forth.s:1690   .text:0000000000002e6c $t
             forth.s:1718   .text:0000000000002eb0 $d
             forth.s:1718   .text:0000000000002eb4 _DASHQ
             forth.s:1718   .text:0000000000002eba $t
             forth.s:1743   .text:0000000000002ee0 $d
             forth.s:1743   .text:0000000000002ee4 _INTQ
             forth.s:1745   .text:0000000000002ef0 $d
             forth.s:1809   .text:0000000000002fe8 _SPACE
             forth.s:1809   .text:0000000000002fee $t
             forth.s:1811   .text:0000000000002ff4 $d
             forth.s:1820   .text:0000000000003004 _SPACS
             forth.s:1820   .text:000000000000300c SPACS
             forth.s:1822   .text:0000000000003010 $d
             forth.s:1828   .text:000000000000302c CHAR2
             forth.s:1826   .text:0000000000003028 CHAR1
             forth.s:1837   .text:000000000000303c _TYPEE
             forth.s:1839   .text:0000000000003048 $d
             forth.s:1845   .text:0000000000003060 TYPE2
             forth.s:1841   .text:0000000000003054 TYPE1
ARM GAS  forth.s 			page 186


             forth.s:1855   .text:0000000000003074 _CR
             forth.s:1857   .text:000000000000307c $d
             forth.s:1869   .text:0000000000003098 DOSTR
             forth.s:1870   .text:0000000000003098 $t
             forth.s:1872   .text:000000000000309c $d
             forth.s:1890   .text:00000000000030c4 STRQP
             forth.s:1891   .text:00000000000030c4 $t
             forth.s:1892   .text:00000000000030c8 $d
             forth.s:1901   .text:00000000000030d0 DOTST
             forth.s:1902   .text:00000000000030d0 $t
             forth.s:1903   .text:00000000000030d4 $d
             forth.s:1913   .text:00000000000030e0 DOTQP
             forth.s:1914   .text:00000000000030e0 $t
             forth.s:1915   .text:00000000000030e4 $d
             forth.s:1925   .text:00000000000030f4 _DOTR
             forth.s:1925   .text:00000000000030f8 DOTR
             forth.s:1927   .text:00000000000030fc $d
             forth.s:1942   .text:0000000000003120 _UDOTR
             forth.s:1942   .text:0000000000003124 $t
             forth.s:1942   .text:0000000000003124 UDOTR
             forth.s:1944   .text:0000000000003128 $d
             forth.s:1960   .text:0000000000003154 _UDOT
             forth.s:1960   .text:0000000000003158 UDOT
             forth.s:1962   .text:000000000000315c $d
             forth.s:1975   .text:0000000000003178 _DOT
             forth.s:1975   .text:000000000000317a $t
             forth.s:1977   .text:0000000000003180 $d
             forth.s:1984   .text:00000000000031a4 DOT1
             forth.s:1995   .text:00000000000031b8 _HDOT
             forth.s:1997   .text:00000000000031c0 $d
             forth.s:2012   .text:00000000000031e4 _QUEST
             forth.s:2012   .text:00000000000031e6 $t
             forth.s:2012   .text:00000000000031e8 QUEST
             forth.s:2014   .text:00000000000031ec $d
             forth.s:2028   .text:00000000000031f8 PARS
             forth.s:2029   .text:00000000000031f8 $t
             forth.s:2030   .text:00000000000031fc $d
             forth.s:2096   .text:000000000000330c PARS8
             forth.s:2060   .text:0000000000003280 PARS3
             forth.s:2043   .text:0000000000003238 PARS1
             forth.s:2058   .text:000000000000327c PARS2
             forth.s:2064   .text:000000000000328c PARS4
             forth.s:2076   .text:00000000000032bc PARS5
             forth.s:2083   .text:00000000000032e0 PARS6
             forth.s:2089   .text:00000000000032f4 PARS7
             forth.s:2107   .text:0000000000003320 _PARSE
             forth.s:2107   .text:0000000000003326 $t
             forth.s:2107   .text:0000000000003328 PARSE
             forth.s:2109   .text:000000000000332c $d
             forth.s:2130   .text:000000000000336c _DOTPR
             forth.s:2130   .text:0000000000003370 DOTPR
             forth.s:2132   .text:0000000000003374 $d
             forth.s:2143   .text:000000000000338c _PAREN
             forth.s:2143   .text:000000000000338e $t
             forth.s:2143   .text:0000000000003390 PAREN
             forth.s:2145   .text:0000000000003394 $d
             forth.s:2156   .text:00000000000033ac _BKSLA
ARM GAS  forth.s 			page 187


             forth.s:2156   .text:00000000000033ae $t
             forth.s:2156   .text:00000000000033b0 BKSLA
             forth.s:2158   .text:00000000000033b4 $d
             forth.s:2169   .text:00000000000033cc _CHAR
             forth.s:2169   .text:00000000000033d4 CHAR
             forth.s:2171   .text:00000000000033d8 $d
             forth.s:2182   .text:00000000000033f0 _WORDD
             forth.s:2182   .text:00000000000033f8 WORDD
             forth.s:2184   .text:00000000000033fc $d
             forth.s:2196   .text:0000000000003414 _TOKEN
             forth.s:2196   .text:000000000000341a $t
             forth.s:2196   .text:000000000000341c TOKEN
             forth.s:2198   .text:0000000000003420 $d
             forth.s:2358   .text:00000000000035fc UPPER
             forth.s:2212   .text:0000000000003434 _NAMET
             forth.s:2212   .text:000000000000343a $t
             forth.s:2212   .text:000000000000343c NAMET
             forth.s:2214   .text:0000000000003440 $d
             forth.s:2233   .text:0000000000003460 _SAMEQ
             forth.s:2233   .text:0000000000003466 $t
             forth.s:2233   .text:0000000000003468 SAMEQ
             forth.s:2235   .text:000000000000346c $d
             forth.s:2252   .text:00000000000034b4 SAME2
             forth.s:2237   .text:0000000000003478 SAME1
             forth.s:2267   .text:00000000000034c8 FIND
             forth.s:2268   .text:00000000000034c8 $t
             forth.s:2269   .text:00000000000034cc $d
             forth.s:2276   .text:00000000000034e8 FIND1
             forth.s:2296   .text:0000000000003540 FIND6
             forth.s:2289   .text:0000000000003528 FIND2
             forth.s:2294   .text:0000000000003538 FIND3
             forth.s:2303   .text:0000000000003558 FIND4
             forth.s:2309   .text:0000000000003574 FIND5
             forth.s:2325   .text:000000000000359c _NAMEQ
             forth.s:2325   .text:00000000000035a2 $t
             forth.s:2325   .text:00000000000035a4 NAMEQ
             forth.s:2327   .text:00000000000035a8 $d
             forth.s:2342   .text:00000000000035bc _ASCIZ
             forth.s:2342   .text:00000000000035c2 $t
             forth.s:2342   .text:00000000000035c4 ASCIZ
             forth.s:2344   .text:00000000000035c8 $d
             forth.s:2352   .text:00000000000035ec $t
             forth.s:2358   .text:00000000000035f0 $d
             forth.s:2358   .text:00000000000035f4 _UPPER
             forth.s:2358   .text:00000000000035fa $t
             forth.s:2360   .text:0000000000003600 $d
             forth.s:2391   .text:0000000000003684 BKSP
             forth.s:2392   .text:0000000000003684 $t
             forth.s:2393   .text:0000000000003688 $d
             forth.s:2407   .text:00000000000036cc BACK1
             forth.s:2416   .text:00000000000036d0 TAP
             forth.s:2417   .text:00000000000036d0 $t
             forth.s:2418   .text:00000000000036d4 $d
             forth.s:2431   .text:00000000000036ec KTAP
             forth.s:2432   .text:00000000000036ec TTAP
             forth.s:2433   .text:00000000000036ec $t
             forth.s:2434   .text:00000000000036f0 $d
ARM GAS  forth.s 			page 188


             forth.s:2448   .text:0000000000003730 KTAP2
             forth.s:2445   .text:0000000000003728 KTAP1
             forth.s:2460   .text:0000000000003748 _ACCEP
             forth.s:2462   .text:0000000000003754 $d
             forth.s:2465   .text:0000000000003760 ACCP1
             forth.s:2481   .text:00000000000037a8 ACCP4
             forth.s:2477   .text:000000000000379c ACCP2
             forth.s:2479   .text:00000000000037a0 ACCP3
             forth.s:2492   .text:00000000000037bc _QUERY
             forth.s:2492   .text:00000000000037c2 $t
             forth.s:2492   .text:00000000000037c4 QUERY
             forth.s:2494   .text:00000000000037c8 $d
             forth.s:2514   .text:00000000000037fc _ABORT
             forth.s:2514   .text:0000000000003802 $t
             forth.s:2514   .text:0000000000003804 ABORT
             forth.s:2516   .text:0000000000003808 ABORT1
             forth.s:2517   .text:0000000000003808 $d
             forth.s:2648   .text:00000000000039ac QUIT
             forth.s:2532   .text:0000000000003830 ABORQ
             forth.s:2533   .text:0000000000003830 $t
             forth.s:2534   .text:0000000000003834 $d
             forth.s:2552   .text:0000000000003858 _INTER
             forth.s:2554   .text:0000000000003868 $d
             forth.s:2563   .text:00000000000038a4 INTE1
             forth.s:2560   .text:000000000000389a $t
             forth.s:2561   .text:000000000000389c $d
             forth.s:2567   .text:00000000000038b4 INTE2
             forth.s:2574   .text:00000000000038bc _LBRAC
             forth.s:2574   .text:00000000000038be $t
             forth.s:2574   .text:00000000000038c0 LBRAC
             forth.s:2576   .text:00000000000038c4 $d
             forth.s:2586   .text:00000000000038dc _DOTOK
             forth.s:2586   .text:00000000000038e0 $t
             forth.s:2586   .text:00000000000038e0 DOTOK
             forth.s:2588   .text:00000000000038e4 $d
             forth.s:2594   .text:0000000000003908 DOTO1
             forth.s:2595   .text:0000000000003908 $d
             forth.s:2603   .text:0000000000003914 _QSTAC
             forth.s:2603   .text:000000000000391c QSTAC
             forth.s:2605   .text:0000000000003920 $d
             forth.s:2607   .text:0000000000003936 $t
             forth.s:2608   .text:0000000000003938 $d
             forth.s:2615   .text:0000000000003940 _EVAL
             forth.s:2617   .text:000000000000394c EVAL1
             forth.s:2618   .text:000000000000394c $d
             forth.s:2626   .text:0000000000003974 EVAL2
             forth.s:2636   .text:0000000000003984 _PRESE
             forth.s:2638   .text:0000000000003990 $d
             forth.s:2648   .text:00000000000039a4 _QUIT
             forth.s:2649   .text:00000000000039ac $d
             forth.s:2651   .text:00000000000039b8 QUIT1
             forth.s:2653   .text:00000000000039bc QUIT2
             forth.s:2663   .text:00000000000039d0 _FORGET
             forth.s:2663   .text:00000000000039d8 FORGET
             forth.s:2665   .text:00000000000039dc $d
             forth.s:3162   .text:0000000000003f74 OVERT
             forth.s:2693   .text:0000000000003a24 $d
ARM GAS  forth.s 			page 189


             forth.s:2693   .text:0000000000003a28 _TICK
             forth.s:2693   .text:0000000000003a2a $t
             forth.s:2693   .text:0000000000003a2c TICK
             forth.s:2695   .text:0000000000003a30 $d
             forth.s:2699   .text:0000000000003a44 TICK1
             forth.s:2707   .text:0000000000003a4c _ALLOT
             forth.s:2707   .text:0000000000003a52 $t
             forth.s:2707   .text:0000000000003a54 ALLOT
             forth.s:2709   .text:0000000000003a58 $d
             forth.s:2718   .text:0000000000003a68 _COMMA
             forth.s:2718   .text:0000000000003a6a $t
             forth.s:2718   .text:0000000000003a6c COMMA
             forth.s:2720   .text:0000000000003a70 $d
             forth.s:2734   .text:0000000000003a8c $d
             forth.s:2734   .text:0000000000003a90 _BCOMP
             forth.s:2734   .text:0000000000003a9a $t
             forth.s:2734   .text:0000000000003a9c BCOMP
             forth.s:2736   .text:0000000000003aa0 $d
             forth.s:2746   .text:0000000000003ab0 _COMPI
             forth.s:2746   .text:0000000000003ab8 $t
             forth.s:2746   .text:0000000000003ab8 COMPI
             forth.s:2748   .text:0000000000003abc $d
             forth.s:2764   .text:0000000000003ae8 _LITER
             forth.s:2764   .text:0000000000003af0 $t
             forth.s:2764   .text:0000000000003af0 LITER
             forth.s:2766   .text:0000000000003af4 $d
             forth.s:3201   .text:0000000000003fd0 CALLC
             forth.s:2776   .text:0000000000003b08 STRCQ
             forth.s:2777   .text:0000000000003b08 $t
             forth.s:2778   .text:0000000000003b0c $d
             forth.s:2800   .text:0000000000003b44 _FOR
             forth.s:2800   .text:0000000000003b48 $t
             forth.s:2800   .text:0000000000003b48 FOR
             forth.s:2802   .text:0000000000003b4c $d
             forth.s:2811   .text:0000000000003b64 _DO
             forth.s:2811   .text:0000000000003b68 DO
             forth.s:2813   .text:0000000000003b6c $d
             forth.s:2819   .text:0000000000003b98 DOPLOOP
             forth.s:2820   .text:0000000000003b98 $t
             forth.s:2836   .text:0000000000003bba $d
             forth.s:2836   .text:0000000000003bbe _PLOOP
             forth.s:2836   .text:0000000000003bc4 $t
             forth.s:2836   .text:0000000000003bc4 PLOOP
             forth.s:2838   .text:0000000000003bc8 $d
             forth.s:2842   .text:0000000000003bdc DOLOOP
             forth.s:2843   .text:0000000000003bdc $t
             forth.s:2861   .text:0000000000003c04 $d
             forth.s:2861   .text:0000000000003c08 _LOOP
             forth.s:2861   .text:0000000000003c10 LOOP
             forth.s:2863   .text:0000000000003c14 $d
             forth.s:2874   .text:0000000000003c2c _BEGIN
             forth.s:2874   .text:0000000000003c32 $t
             forth.s:2874   .text:0000000000003c34 BEGIN
             forth.s:2876   .text:0000000000003c38 $d
             forth.s:2885   .text:0000000000003c40 $d
             forth.s:2885   .text:0000000000003c44 _FNEXT
             forth.s:2885   .text:0000000000003c4c FNEXT
ARM GAS  forth.s 			page 190


             forth.s:2887   .text:0000000000003c50 $d
             forth.s:2895   .text:0000000000003c68 _I
             forth.s:2895   .text:0000000000003c6a $t
             forth.s:2895   .text:0000000000003c6c I
             forth.s:2904   .text:0000000000003c78 $d
             forth.s:2904   .text:0000000000003c7c _J
             forth.s:2904   .text:0000000000003c7e $t
             forth.s:2904   .text:0000000000003c80 J
             forth.s:2914   .text:0000000000003c8c $d
             forth.s:2914   .text:0000000000003c90 _UNTIL
             forth.s:2914   .text:0000000000003c96 $t
             forth.s:2914   .text:0000000000003c98 UNTIL
             forth.s:2916   .text:0000000000003c9c $d
             forth.s:2925   .text:0000000000003cb4 _AGAIN
             forth.s:2925   .text:0000000000003cba $t
             forth.s:2925   .text:0000000000003cbc AGAIN
             forth.s:2927   .text:0000000000003cc0 $d
             forth.s:2936   .text:0000000000003cd8 _IFF
             forth.s:2936   .text:0000000000003cdc IFF
             forth.s:2938   .text:0000000000003ce0 $d
             forth.s:2950   .text:0000000000003d08 _AHEAD
             forth.s:2950   .text:0000000000003d0e $t
             forth.s:2950   .text:0000000000003d10 AHEAD
             forth.s:2952   .text:0000000000003d14 $d
             forth.s:2964   .text:0000000000003d3c _REPEA
             forth.s:2964   .text:0000000000003d44 REPEA
             forth.s:2966   .text:0000000000003d48 $d
             forth.s:2977   .text:0000000000003d60 _THENN
             forth.s:2977   .text:0000000000003d68 THENN
             forth.s:2979   .text:0000000000003d6c $d
             forth.s:2990   .text:0000000000003d80 _AFT
             forth.s:2990   .text:0000000000003d84 $t
             forth.s:2990   .text:0000000000003d84 AFT
             forth.s:2992   .text:0000000000003d88 $d
             forth.s:3004   .text:0000000000003da0 _ELSEE
             forth.s:3004   .text:0000000000003da8 ELSEE
             forth.s:3006   .text:0000000000003dac $d
             forth.s:3016   .text:0000000000003dc0 _WHILE
             forth.s:3016   .text:0000000000003dc6 $t
             forth.s:3016   .text:0000000000003dc8 WHILE
             forth.s:3018   .text:0000000000003dcc $d
             forth.s:3027   .text:0000000000003ddc _ABRTQ
             forth.s:3027   .text:0000000000003de4 ABRTQ
             forth.s:3029   .text:0000000000003de8 $d
             forth.s:3038   .text:0000000000003e00 _STRQ
             forth.s:3038   .text:0000000000003e04 STRQ
             forth.s:3040   .text:0000000000003e08 $d
             forth.s:3050   .text:0000000000003e20 _DOTQ
             forth.s:3050   .text:0000000000003e24 DOTQ
             forth.s:3052   .text:0000000000003e28 $d
             forth.s:3066   .text:0000000000003e40 _UNIQU
             forth.s:3066   .text:0000000000003e48 $t
             forth.s:3066   .text:0000000000003e48 UNIQU
             forth.s:3068   .text:0000000000003e4c $d
             forth.s:3075   .text:0000000000003e74 UNIQ1
             forth.s:3072   .text:0000000000003e68 $d
             forth.s:3085   .text:0000000000003e7c SNAME
ARM GAS  forth.s 			page 191


             forth.s:3086   .text:0000000000003e7c $t
             forth.s:3087   .text:0000000000003e80 $d
             forth.s:3103   .text:0000000000003ec4 SNAM1
             forth.s:3115   .text:0000000000003ed8 _SCOMP
             forth.s:3115   .text:0000000000003ee4 SCOMP
             forth.s:3117   .text:0000000000003ee8 $d
             forth.s:3129   .text:0000000000003f20 SCOM2
             forth.s:3126   .text:0000000000003f18 SCOM1
             forth.s:3134   .text:0000000000003f34 SCOM3
             forth.s:3143   .text:0000000000003f3c COLON_ABORT
             forth.s:3144   .text:0000000000003f3c $t
             forth.s:3145   .text:0000000000003f40 $d
             forth.s:3162   .text:0000000000003f6c _OVERT
             forth.s:3162   .text:0000000000003f72 $t
             forth.s:3164   .text:0000000000003f78 $d
             forth.s:3175   .text:0000000000003f90 _SEMIS
             forth.s:3175   .text:0000000000003f92 $t
             forth.s:3175   .text:0000000000003f94 SEMIS
             forth.s:3177   .text:0000000000003f98 $d
             forth.s:3189   .text:0000000000003fb4 _RBRAC
             forth.s:3189   .text:0000000000003fb6 $t
             forth.s:3189   .text:0000000000003fb8 RBRAC
             forth.s:3191   .text:0000000000003fbc $d
             forth.s:3202   .text:0000000000003fd0 $t
             forth.s:3203   .text:0000000000003fd4 $d
             forth.s:3215   .text:0000000000003fec _COLON
             forth.s:3215   .text:0000000000003fee $t
             forth.s:3215   .text:0000000000003ff0 COLON
             forth.s:3217   .text:0000000000003ff4 $d
             forth.s:3228   .text:000000000000400c _IMMED
             forth.s:3228   .text:0000000000004016 $t
             forth.s:3228   .text:0000000000004018 IMMED
             forth.s:3230   .text:000000000000401c $d
             forth.s:3248   .text:0000000000004048 _CONST
             forth.s:3248   .text:0000000000004054 CONST
             forth.s:3250   .text:0000000000004058 $d
             forth.s:3261   .text:0000000000004088 $t
             forth.s:3268   .text:0000000000004088 DODOES
             forth.s:3270   .text:000000000000408c $d
             forth.s:3285   .text:00000000000040b0 $d
             forth.s:3285   .text:00000000000040b4 _DOES
             forth.s:3285   .text:00000000000040ba $t
             forth.s:3285   .text:00000000000040bc DOES
             forth.s:3287   .text:00000000000040c0 $d
             forth.s:3302   .text:00000000000040f0 _DEFERAT
             forth.s:3302   .text:00000000000040f8 DEFERAT
             forth.s:3304   .text:00000000000040fc $d
             forth.s:3314   .text:0000000000004114 _DEFERSTO
             forth.s:3314   .text:000000000000411c DEFERSTO
             forth.s:3316   .text:0000000000004120 $d
             forth.s:3327   .text:000000000000413c _DEFER
             forth.s:3327   .text:0000000000004142 $t
             forth.s:3327   .text:0000000000004144 DEFER
             forth.s:3329   .text:0000000000004148 $d
             forth.s:3350   .text:0000000000004194 CREAT
             forth.s:3340   .text:000000000000417c DEFER_NOP
             forth.s:3341   .text:000000000000417c $t
ARM GAS  forth.s 			page 192


             forth.s:3342   .text:0000000000004180 $d
             forth.s:3350   .text:000000000000418c _CREAT
             forth.s:3352   .text:0000000000004198 $d
             forth.s:3365   .text:00000000000041bc _VARIA
             forth.s:3365   .text:00000000000041c8 VARIA
             forth.s:3367   .text:00000000000041cc $d
             forth.s:3384   .text:00000000000041ec DMP
             forth.s:3385   .text:00000000000041ec $t
             forth.s:3386   .text:00000000000041f0 $d
             forth.s:3398   .text:0000000000004228 PDUM2
             forth.s:3392   .text:0000000000004210 PDUM1
             forth.s:3410   .text:0000000000004234 $d
             forth.s:3410   .text:0000000000004238 _DUMP
             forth.s:3410   .text:0000000000004240 DUMP
             forth.s:3412   .text:0000000000004244 $d
             forth.s:3430   .text:0000000000004294 DUMP4
             forth.s:3420   .text:000000000000426c DUMP1
             forth.s:3432   .text:000000000000429c DUMP3
             forth.s:3442   .text:00000000000042b4 _TRACE
             forth.s:3442   .text:00000000000042ba $t
             forth.s:3444   .text:00000000000042c0 $d
             forth.s:3466   .text:000000000000430c DOTS
             forth.s:3466   .text:0000000000004308 _DOTS
             forth.s:3468   .text:0000000000004310 $d
             forth.s:3476   .text:0000000000004330 DOTS2
             forth.s:3472   .text:0000000000004324 DOTS1
             forth.s:3486   .text:0000000000004344 _TNAME
             forth.s:3486   .text:000000000000434a $t
             forth.s:3486   .text:000000000000434c TNAME
             forth.s:3488   .text:0000000000004350 $d
             forth.s:3491   .text:000000000000435c TNAM1
             forth.s:3502   .text:0000000000004390 TNAM2
             forth.s:3511   .text:00000000000043a0 _DOTID
             forth.s:3511   .text:00000000000043a4 $t
             forth.s:3511   .text:00000000000043a4 DOTID
             forth.s:3513   .text:00000000000043a8 $d
             forth.s:3520   .text:00000000000043cc DOTI1
             forth.s:3521   .text:00000000000043da $t
             forth.s:3522   .text:00000000000043dc $d
             forth.s:3524   *ABS*:0000000000000000 WANT_SEE
             forth.s:3597   .text:00000000000043e4 _VLIST
             forth.s:3597   .text:00000000000043ea $t
             forth.s:3597   .text:00000000000043ec VLIST
             forth.s:3599   .text:00000000000043f0 $d
             forth.s:3610   .text:0000000000004410 WORDS
             forth.s:3631   .text:0000000000004454 WC
             forth.s:3610   .text:0000000000004408 _WORDS
             forth.s:3610   .text:000000000000440e $t
             forth.s:3612   .text:0000000000004414 $d
             forth.s:3615   .text:0000000000004420 WORS1
             forth.s:3624   .text:0000000000004448 WORS2
             forth.s:3631   .text:0000000000004450 _WC
             forth.s:3633   .text:0000000000004458 $d
             forth.s:3650   .text:0000000000004494 _MARK
             forth.s:3650   .text:000000000000449c MARK
             forth.s:3652   .text:00000000000044a0 $d
             forth.s:3655   .text:00000000000044ac $t
ARM GAS  forth.s 			page 193


             forth.s:3656   .text:00000000000044b0 $d
             forth.s:3677   .text:00000000000044dc VERSN
             forth.s:3678   .text:00000000000044dc $t
             forth.s:3679   .text:00000000000044e0 $d
             forth.s:3687   .text:00000000000044f0 _HI
             forth.s:3689   .text:00000000000044f8 $d
             forth.s:3690   .text:0000000000004512 $t
             forth.s:3691   .text:0000000000004514 $d
             forth.s:3712   .text:0000000000004558 PS2_QUERY
             forth.s:3713   .text:0000000000004558 $t
             forth.s:3714   .text:000000000000455c $d
             forth.s:3728   .text:00000000000045c2 $t
             forth.s:3729   .text:00000000000045c4 $d
             forth.s:3739   .text:00000000000045d0 IF_SENSE
             forth.s:3740   .text:00000000000045d0 $t
             forth.s:3741   .text:00000000000045d4 $d
             forth.s:3767   .text:0000000000004624 COLD1
             forth.s:3768   .text:0000000000004624 $d
             forth.s:3782   .text:0000000000004670 COLD2
             forth.s:3785   .text:0000000000004670 $d
             forth.s:3788   .text:0000000000004674 $d
              init.s:245    .text:0000000000000111 $d
              init.s:245    .text:0000000000000112 $t
          ser-term.s:90     .text:0000000000000553 $d
          ser-term.s:90     .text:0000000000000554 $t
          ser-term.s:110    .text:000000000000058d $d
          ser-term.s:110    .text:000000000000058e $t
          ser-term.s:133    .text:00000000000005cb $d
          ser-term.s:133    .text:00000000000005cc $t
          ser-term.s:164    .text:0000000000000613 $d
          ser-term.s:164    .text:0000000000000614 $t
          ser-term.s:191    .text:0000000000000689 $d
          ser-term.s:191    .text:000000000000068a $t
          ser-term.s:203    .text:00000000000006b7 $d
          ser-term.s:203    .text:00000000000006b8 $t
             tvout.s:264    .text:0000000000000903 $d
             tvout.s:264    .text:0000000000000904 $t
             tvout.s:278    .text:0000000000000937 $d
             tvout.s:278    .text:0000000000000938 $t
             tvout.s:306    .text:0000000000000991 $d
             tvout.s:306    .text:0000000000000992 $t
             tvout.s:325    .text:00000000000009bf $d
             tvout.s:325    .text:00000000000009c0 $t
             tvout.s:427    .text:0000000000000af9 $d
             tvout.s:427    .text:0000000000000afa $t
             tvout.s:448    .text:0000000000000b53 $d
             tvout.s:448    .text:0000000000000b54 $t
             tvout.s:495    .text:0000000000000be9 $d
             tvout.s:495    .text:0000000000000bea $t
           ps2_kbd.s:307    .text:00000000000012d7 $d
           ps2_kbd.s:307    .text:00000000000012d8 $t
           ps2_kbd.s:396    .text:00000000000013d3 $d
           ps2_kbd.s:396    .text:00000000000013d4 $t
           ps2_kbd.s:616    .text:0000000000001675 $d
           ps2_kbd.s:616    .text:0000000000001676 $t
           ps2_kbd.s:633    .text:00000000000016af $d
           ps2_kbd.s:633    .text:00000000000016b0 $t
ARM GAS  forth.s 			page 194


         spi-flash.s:83     .text:000000000000179b $d
         spi-flash.s:83     .text:000000000000179c $t
         spi-flash.s:149    .text:0000000000001867 $d
         spi-flash.s:149    .text:0000000000001868 $t
         spi-flash.s:236    .text:00000000000019ab $d
         spi-flash.s:236    .text:00000000000019ac $t
         spi-flash.s:254    .text:00000000000019e7 $d
         spi-flash.s:254    .text:00000000000019e8 $t
         spi-flash.s:276    .text:0000000000001a3b $d
         spi-flash.s:276    .text:0000000000001a3c $t
             float.s:142    .text:0000000000001b07 $d
             float.s:142    .text:0000000000001b08 $t
             float.s:167    .text:0000000000001b4b $d
             float.s:167    .text:0000000000001b4c $t
             float.s:232    .text:0000000000001bff $d
             float.s:232    .text:0000000000001c00 $t
             float.s:291    .text:0000000000001c9d $d
             float.s:291    .text:0000000000001c9e $t
             float.s:300    .text:0000000000001caf $d
             float.s:300    .text:0000000000001cb0 $t
             float.s:314    .text:0000000000001cbf $d
             float.s:314    .text:0000000000001cc0 $t
             float.s:342    .text:0000000000001cf7 $d
             float.s:342    .text:0000000000001cf8 $t
             float.s:351    .text:0000000000001d07 $d
             float.s:351    .text:0000000000001d08 $t
             float.s:488    .text:0000000000001f13 $d
             float.s:488    .text:0000000000001f14 $t
             float.s:566    .text:0000000000002077 $d
             float.s:566    .text:0000000000002078 $t
             forth.s:132    .text:00000000000020eb $d
             forth.s:132    .text:00000000000020ec $t
             forth.s:154    .text:0000000000002125 $d
             forth.s:154    .text:0000000000002126 $t
             forth.s:190    .text:0000000000002143 $d
             forth.s:190    .text:0000000000002144 $t
             forth.s:237    .text:00000000000021f1 $d
             forth.s:237    .text:00000000000021f2 $t
             forth.s:332    .text:0000000000002281 $d
             forth.s:332    .text:0000000000002282 $t
             forth.s:357    .text:00000000000022af $d
             forth.s:357    .text:00000000000022b0 $t
             forth.s:367    .text:00000000000022c3 $d
             forth.s:367    .text:00000000000022c4 $t
             forth.s:375    .text:00000000000022cf $d
             forth.s:375    .text:00000000000022d0 $t
             forth.s:384    .text:00000000000022e1 $d
             forth.s:384    .text:00000000000022e2 $t
             forth.s:393    .text:00000000000022f5 $d
             forth.s:393    .text:00000000000022f6 $t
             forth.s:429    .text:000000000000233d $d
             forth.s:429    .text:000000000000233e $t
             forth.s:445    .text:000000000000235f $d
             forth.s:445    .text:0000000000002360 $t
             forth.s:455    .text:0000000000002371 $d
             forth.s:455    .text:0000000000002372 $t
             forth.s:464    .text:0000000000002383 $d
ARM GAS  forth.s 			page 195


             forth.s:464    .text:0000000000002384 $t
             forth.s:481    .text:00000000000023a5 $d
             forth.s:481    .text:00000000000023a6 $t
             forth.s:511    .text:00000000000023eb $d
             forth.s:511    .text:00000000000023ec $t
             forth.s:520    .text:0000000000002401 $d
             forth.s:520    .text:0000000000002402 $t
             forth.s:567    .text:000000000000245b $d
             forth.s:567    .text:000000000000245c $t
             forth.s:578    .text:000000000000246f $d
             forth.s:578    .text:0000000000002470 $t
             forth.s:586    .text:000000000000247d $d
             forth.s:586    .text:000000000000247e $t
             forth.s:594    .text:000000000000248d $d
             forth.s:594    .text:000000000000248e $t
             forth.s:602    .text:000000000000249d $d
             forth.s:602    .text:000000000000249e $t
             forth.s:626    .text:00000000000024cd $d
             forth.s:626    .text:00000000000024ce $t
             forth.s:651    .text:0000000000002501 $d
             forth.s:651    .text:0000000000002502 $t
             forth.s:659    .text:0000000000002511 $d
             forth.s:659    .text:0000000000002512 $t
             forth.s:667    .text:0000000000002523 $d
             forth.s:667    .text:0000000000002524 $t
             forth.s:688    .text:000000000000254b $d
             forth.s:688    .text:000000000000254c $t
             forth.s:717    .text:0000000000002587 $d
             forth.s:717    .text:0000000000002588 $t
             forth.s:727    .text:000000000000259b $d
             forth.s:727    .text:000000000000259c $t
             forth.s:748    .text:00000000000025c9 $d
             forth.s:748    .text:00000000000025ca $t
             forth.s:766    .text:00000000000025ed $d
             forth.s:766    .text:00000000000025ee $t
             forth.s:789    .text:000000000000261b $d
             forth.s:789    .text:000000000000261c $t
             forth.s:813    .text:000000000000264b $d
             forth.s:813    .text:000000000000264c $t
             forth.s:859    .text:00000000000026a3 $d
             forth.s:859    .text:00000000000026a4 $t
             forth.s:871    .text:00000000000026bb $d
             forth.s:871    .text:00000000000026bc $t
             forth.s:883    .text:00000000000026d7 $d
             forth.s:883    .text:00000000000026d8 $t
             forth.s:944    .text:0000000000002733 $d
             forth.s:944    .text:0000000000002734 $t
             forth.s:953    .text:0000000000002747 $d
             forth.s:953    .text:0000000000002748 $t
             forth.s:980    .text:0000000000002783 $d
             forth.s:980    .text:0000000000002784 $t
             forth.s:999    .text:00000000000027a1 $d
             forth.s:999    .text:00000000000027a2 $t
             forth.s:1018   .text:00000000000027cb $d
             forth.s:1018   .text:00000000000027cc $t
             forth.s:1058   .text:000000000000281d $d
             forth.s:1058   .text:000000000000281e $t
ARM GAS  forth.s 			page 196


             forth.s:1078   .text:0000000000002847 $d
             forth.s:1078   .text:0000000000002848 $t
             forth.s:1092   .text:0000000000002861 $d
             forth.s:1092   .text:0000000000002862 $t
             forth.s:1103   .text:000000000000287d $d
             forth.s:1103   .text:000000000000287e $t
             forth.s:1120   .text:0000000000002897 $d
             forth.s:1120   .text:0000000000002898 $t
             forth.s:1137   .text:00000000000028c3 $d
             forth.s:1137   .text:00000000000028c4 $t
             forth.s:1201   .text:0000000000002975 $d
             forth.s:1201   .text:0000000000002976 $t
             forth.s:1252   .text:00000000000029ef $d
             forth.s:1252   .text:00000000000029f0 $t
             forth.s:1311   .text:0000000000002a99 $d
             forth.s:1311   .text:0000000000002a9a $t
             forth.s:1329   .text:0000000000002ac1 $d
             forth.s:1329   .text:0000000000002ac2 $t
             forth.s:1363   .text:0000000000002b13 $d
             forth.s:1363   .text:0000000000002b14 $t
             forth.s:1396   .text:0000000000002b61 $d
             forth.s:1396   .text:0000000000002b62 $t
             forth.s:1428   .text:0000000000002ba9 $d
             forth.s:1428   .text:0000000000002baa $t
             forth.s:1508   .text:0000000000002c97 $d
             forth.s:1508   .text:0000000000002c98 $t
             forth.s:1520   .text:0000000000002cb5 $d
             forth.s:1520   .text:0000000000002cb6 $t
             forth.s:1552   .text:0000000000002d03 $d
             forth.s:1552   .text:0000000000002d04 $t
             forth.s:1568   .text:0000000000002d2d $d
             forth.s:1568   .text:0000000000002d2e $t
             forth.s:1582   .text:0000000000002d57 $d
             forth.s:1582   .text:0000000000002d58 $t
             forth.s:1659   .text:0000000000002e0f $d
             forth.s:1659   .text:0000000000002e10 $t
             forth.s:1743   .text:0000000000002ee9 $d
             forth.s:1743   .text:0000000000002eea $t
             forth.s:1820   .text:000000000000300b $d
             forth.s:1820   .text:000000000000300c $t
             forth.s:1837   .text:0000000000003041 $d
             forth.s:1837   .text:0000000000003042 $t
             forth.s:1855   .text:0000000000003077 $d
             forth.s:1855   .text:0000000000003078 $t
             forth.s:1925   .text:00000000000030f7 $d
             forth.s:1925   .text:00000000000030f8 $t
             forth.s:1960   .text:0000000000003157 $d
             forth.s:1960   .text:0000000000003158 $t
             forth.s:1995   .text:00000000000031bb $d
             forth.s:1995   .text:00000000000031bc $t
             forth.s:2130   .text:000000000000336f $d
             forth.s:2130   .text:0000000000003370 $t
             forth.s:2169   .text:00000000000033d1 $d
             forth.s:2169   .text:00000000000033d2 $t
             forth.s:2182   .text:00000000000033f5 $d
             forth.s:2182   .text:00000000000033f6 $t
             forth.s:2460   .text:000000000000374f $d
ARM GAS  forth.s 			page 197


             forth.s:2460   .text:0000000000003750 $t
             forth.s:2552   .text:0000000000003863 $d
             forth.s:2552   .text:0000000000003864 $t
             forth.s:2603   .text:000000000000391b $d
             forth.s:2603   .text:000000000000391c $t
             forth.s:2615   .text:0000000000003945 $d
             forth.s:2615   .text:0000000000003946 $t
             forth.s:2636   .text:000000000000398b $d
             forth.s:2636   .text:000000000000398c $t
             forth.s:2648   .text:00000000000039a9 $d
             forth.s:2648   .text:00000000000039aa $t
             forth.s:2663   .text:00000000000039d7 $d
             forth.s:2663   .text:00000000000039d8 $t
             forth.s:2811   .text:0000000000003b67 $d
             forth.s:2811   .text:0000000000003b68 $t
             forth.s:2861   .text:0000000000003c0d $d
             forth.s:2861   .text:0000000000003c0e $t
             forth.s:2885   .text:0000000000003c49 $d
             forth.s:2885   .text:0000000000003c4a $t
             forth.s:2936   .text:0000000000003cdb $d
             forth.s:2936   .text:0000000000003cdc $t
             forth.s:2964   .text:0000000000003d43 $d
             forth.s:2964   .text:0000000000003d44 $t
             forth.s:2977   .text:0000000000003d65 $d
             forth.s:2977   .text:0000000000003d66 $t
             forth.s:3004   .text:0000000000003da5 $d
             forth.s:3004   .text:0000000000003da6 $t
             forth.s:3027   .text:0000000000003de3 $d
             forth.s:3027   .text:0000000000003de4 $t
             forth.s:3038   .text:0000000000003e03 $d
             forth.s:3038   .text:0000000000003e04 $t
             forth.s:3050   .text:0000000000003e23 $d
             forth.s:3050   .text:0000000000003e24 $t
             forth.s:3115   .text:0000000000003ee1 $d
             forth.s:3115   .text:0000000000003ee2 $t
             forth.s:3248   .text:0000000000004051 $d
             forth.s:3248   .text:0000000000004052 $t
             forth.s:3302   .text:00000000000040f7 $d
             forth.s:3302   .text:00000000000040f8 $t
             forth.s:3314   .text:000000000000411b $d
             forth.s:3314   .text:000000000000411c $t
             forth.s:3350   .text:0000000000004193 $d
             forth.s:3350   .text:0000000000004194 $t
             forth.s:3365   .text:00000000000041c5 $d
             forth.s:3365   .text:00000000000041c6 $t
             forth.s:3410   .text:000000000000423d $d
             forth.s:3410   .text:000000000000423e $t
             forth.s:3466   .text:000000000000430b $d
             forth.s:3466   .text:000000000000430c $t
             forth.s:3631   .text:0000000000004453 $d
             forth.s:3631   .text:0000000000004454 $t
             forth.s:3650   .text:0000000000004499 $d
             forth.s:3650   .text:000000000000449a $t
             forth.s:3687   .text:00000000000044f3 $d
             forth.s:3687   .text:00000000000044f4 $t
             forth.s:3761   .text:000000000000460d $d
             forth.s:3761   .text:000000000000460e $t
ARM GAS  forth.s 			page 198



UNDEFINED SYMBOLS
xE000EF34
_mstack
add_digit
