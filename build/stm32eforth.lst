ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              		.equ RPP ,	RAM_END-256	/*top of return stack (RP0) */
  48              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  49              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  50              		.equ VID_BUFF, SPP-256-32000 /* video buffer */
ARM GAS  forth.s 			page 9


  51              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  52              		.equ DTOP,  RAM_ADR+0x512 
  53              		.equ DEND , VID_BUFF-4  /*usable RAM end */
  54              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  55              	
  56              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  57              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  58              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  59              	
  60              		.equ CELLL ,	4	/*size of a cell */
  61              		.equ BASEE ,	10	/*default radix */
  62              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  63              	
  64              		.equ BKSPP ,	8	/*backspace */
  65              		.equ LF ,	10	  /*line feed */
  66              		.equ CRR ,	13	/*carriage return */
  67              		.equ ERR ,	27	/*error escape */
  68              		.equ TIC ,	39	/*tick */
  69              	
  70              	/*************************************
  71              	   system variables offset from UPP
  72              	*************************************/
  73              	  .equ RNDSEED, 4    // prng seed 
  74              	  .equ TICKS, RNDSEED+4  // millseconds counter
  75              	  .equ CD_TIMER, TICKS+4  // count down timer
  76              	  .equ BOOT, CD_TIMER+4  // boot program address
  77              	  .equ STDIN, BOOT+4   //character ouput device 
  78              	  .equ STDOUT, STDIN+4 // character input device 
  79              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  80              	  .equ TMP, NBASE+4   // temporary variable
  81              	  .equ CSPAN, TMP+4  // character count received by expect  
  82              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  83              	  .equ NTIBB, TOIN+4  // #TIB  characters in TIB 
  84              	  .equ TIBUF, NTIBB+4   // TIB buffer address 
  85              	  .equ EVAL, TIBUF+4  // eval|compile vector 
  86              	  .equ VHOLD, EVAL+4   // hold pointer 
  87              	  .equ CTXT, VHOLD+4  // context pointer 
  88              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  89              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  90              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  91              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  92              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  93              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
  94              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
  95              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
  96              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
  97              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
  98              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
  99              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 100              	  .equ KBD_QUEUE_SIZE, 16 
 101              	  .equ KBD_QUEUE, KBD_STRUCT+4 
 102              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 103              	  .equ KBD_QTAIL,KBD_QHEAD+4
 104              	  .equ ROW,KBD_QTAIL+4 
 105              	  .equ COL,ROW+4 
 106              	  .equ BK_COLOR,COL+4 
 107              	  .equ PEN_COLOR,BK_COLOR+4
ARM GAS  forth.s 			page 10


 108              	  .equ VFPSW, PEN_COLOR+4 
 109              	  .equ VFBASE, VFPSW+4 
 110              	
 111              	/***********************************************
 112              	* MACROS
 113              	*	Assemble inline direct threaded code ending.
 114              	***********************************************/
 115              		.macro _CALL fn /* low level routine call */ 
 116              	 	PUSH {LR}
 117              		BL \fn  
 118              		POP {LR}
 119              		.endm
 120              		
 121              		.macro _RET /* exit sub-routine */ 
 122              		BX LR 
 123              		.endm 
 124              	
 125              		// dictionary header  
 126              		.macro _HEADER  label, nlen, name
 127              			.word LINK 
 128              			.equ LINK , . 
 129              		_\label: .byte \nlen    // name field
 130              			.ascii "\name"
 131              			.p2align 2 
 132              		\label:   // code field 
 133              		.endm 
 134              		
 135              	
 136              	// local function header 
 137              		.macro _FUNC label 
 138              		.section .text, "ax", %progbits 
 139              		.p2align 2 
 140              		.type \label, %function  
 141              		\label:
 142              		.endm 
 143              	
 144              	// global function header 
 145              		.macro _GBL_FUNC label 
 146              		.global \label 
 147              		_FUNC \label 
 148              		.endm 
 149              	
 150              	
 151              	// load large constant to register 
 152              		.macro _MOV32 r, value 
 153              		mov \r,#(\value&0xffff)
 154              		movt \r,#(\value>>16)
 155              		.endm 
 156              	
 157              		.macro _NEXT /* direct jump INEXT */ 
 158              		B INEXT   
 159              		.endm 
 160              	
 161              	 	.macro	_NEST /*start high level word */
 162              		BX INX  
 163              		NOP.N 
 164              		.endm
ARM GAS  forth.s 			page 11


 165              	
 166              		.macro _ADR label 
 167              		.word 1+\label  
 168              		.endm 
 169              	
 170              	 	.macro	_UNNEST	/*end high level word */
 171              		_ADR UNNEST 
 172              		.endm
 173              	
 174              	 	.macro	_DOLIT u /*long literals */
 175              		_ADR	DOLIT
 176              		.word	\u 
 177              		.endm
 178              	
 179              		.macro _DOTQP len, text 
 180              		_ADR DOTQP 
 181              		.byte \len 
 182              		.ascii "\text" 
 183              		.p2align 2 
 184              		.endm
 185              	
 186              		.macro _COMPI name 
 187              		_DOLIT \name 
 188              		_ADR CALLC 
 189              		.endm 
 190              	
 191              		.macro _ABORQ len,name 
 192              		_ADR ABORQ 
 193              		.byte \len 
 194              		.ascii "\name"
 195              		.p2align 2 
 196              		.endm
 197              	
 198              		.macro _BRAN label 
 199              		_ADR BRAN 
 200              		.word \label 
 201              		.endm 
 202              	
 203              		.macro _QBRAN label 
 204              		_ADR QBRAN 
 205              		.word \label
 206              		.endm 
 207              	
 208              		.macro _DONXT label 
 209              		_ADR DONXT
 210              		.word \label 
 211              		.endm 
 212              	
 213              	 	.macro	_PUSH	/*push TOS on data stack*/
 214              		STR	TOS,[DSP,#-4]!
 215              		.endm
 216              	
 217              	 	.macro	_POP /*pop data stack to TOS */
 218              		LDR	TOS,[DSP],#4
 219              		.endm
 220              	
 221              		// calling a colon word 
ARM GAS  forth.s 			page 12


 222              		// from a code word   
 223              		.macro _CALL_COLWORD target 
 224              	    ldr WP,=\target 
 225              		orr WP,#1
 226              		b \target  
 227              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 0000 00000000 	  .word   _mstack          /* main return stack address */
  40 0004 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 0008 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 000c 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 0010 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 0014 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 0018 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 001c 00000000 	  .word   0 /* -9 */
  48 0020 00000000 	  .word   0 /* -8 */ 
  49 0024 00000000 	  .word   0 /* -7 */
  50 0028 00000000 	  .word   0	/* -6 */
  51 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 0034 00000000 	  .word   0 /* -3 */
  54 0038 00000000 	  .word   default_handler  /* -2 PendSV */
  55 003c 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  62 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 008c 00000000 	  .word      0 /* IRQ19 not used */                         
  78 0090 00000000 	  .word      0 /* IRQ20 not used */                          
  79 0094 00000000 	  .word      0 /* IRQ21 not used */                          
  80 0098 00000000 	  .word      0 /* IRQ22 not used */                          
  81 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
ARM GAS  forth.s 			page 13


  82 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 00b4 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
  89 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
  98 00e0 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 102 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 103 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 104 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 105 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 112 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 113 011c 00000000 	  .word      0 /* IRQ55, not used  */
 114 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 119 0134 00000000 	  .word		 0 /* IRQ61, not used */
 120 0138 00000000 	  .word		 0 /* IRQ62, not used */
 121 013c 00000000 	  .word		 0 /* IRQ63, not used */
 122 0140 00000000 	  .word		 0 /* IRQ64, not used */
 123 0144 00000000 	  .word		 0 /* IRQ65, not used */
 124 0148 00000000 	  .word		 0 /* IRQ66, not used */
 125 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 0168 00000000 	  .word		 0 /* IRQ74, not used */
 133 016c 00000000 	  .word		 0 /* IRQ75, not used */
 134 0170 00000000 	  .word		 0 /* IRQ76, not used */
 135 0174 00000000 	  .word		 0 /* IRQ77, not used */
 136 0178 00000000 	  .word		 0 /* IRQ78, not used */
 137 017c 00000000 	  .word		 0 /* IRQ79, not used */
 138 0180 00000000 	  .word		 0 /* IRQ80, not used */
ARM GAS  forth.s 			page 14


 139 0184 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 0188 00000000 	  .word		 0 /* IRQ82, not used */
 141 018c 00000000 	  .word		 0 /* IRQ83, not used */
 142 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 0198 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 0000 00B500F0 	  _CALL forth_init 
 157      65FA5DF8 
 157      04EB
 158 000a DFF830C8 	  ldr IP,=dh
 159 000e 02F007BD 	  b INEXT  
 160              	dh:
 161 0012 AD460000 	  _ADR PRESE
 162 0016 653D0000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 0034 712A0000 	  _ADR CFSR 
 164 0038 612D0000 	  _ADR DUPP
 165 003c DD2C0000 	  _ADR TOR 
 166 0040 E72B0000 	  _DOLIT 16 
 166      10000000 
 167 0048 55320000 	  _ADR BASE 
 168 004c 592C0000 	  _ADR STORE 
 169 0050 E93D0000 	  _ADR UDOT 
 170 0054 653D0000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 0064 992C0000 	  _ADR RFROM
 172 0068 E72B0000 	  _DOLIT (1<<15)
 172      00800000 
 173 0070 A52D0000 	  _ADR ANDD
 174 0074 272C0000 	  _QBRAN 1f
 174      94000000 
 175 007c 952A0000 	  _ADR BFAR
 176 0080 E72B0000 	  _DOLIT ','
 176      2C000000 
 177 0088 F12A0000 	  _ADR EMIT 
 178 008c 753C0000 	  _ADR SPACE 
ARM GAS  forth.s 			page 15


 179 0090 E93D0000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 0094 653D0000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 00a4 411F0000 	  _ADR FPSCR
 184 00a8 E93D0000 	  _ADR UDOT 
 185              	1:
 186 00ac 6D040000 	  _ADR reset_mcu 
 187              	
 188              	exit_fpu_isr:
 189 00b0 DFF88CC7 	   ldr IP,=QUIT  
 190 00b4 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 190      CEF20000 
 191 00bc 81EA0101 	   eor r1,r1 
 192 00c0 4160     	   str r1,[r0,#SCB_ICSR]
 193 00c2 4FF05100 	   mov r0,#FPU_IRQ 
 194 00c6 00F0BCFA 	   bl nvic_enable_irq 
 195 00ca 5DF804EB 	   pop {lr}
 196 00ce 7047     	   bx lr 
 197              	
 198              	
 199              	/*********************************
 200              	   fpu exception 
 201              	*********************************/
 202              	  .type fpu_exception, %function 
 203              	  .global fpu_exception 
 204              	  .p2align 2 
 205              	fpu_exception:
 206 00d0 00B5     	  push {lr}
 207 00d2 4FF05100 	  mov r0,#FPU_IRQ 
 208 00d6 00F0C9FA 	  bl nvic_disable_irq 
 209 00da DFF868C7 	  ldr IP,=fpu_except
 210 00de 02F09FBC 	  b INEXT 
 211              	fpu_except:  
 212 00e2 AD460000 	  _ADR PRESE
 213 00e6 FD3C0000 	  _ADR CR  
 214 00ea E72B0000 	  _DOLIT 16 
 214      10000000 
 215 00f2 55320000 	  _ADR BASE 
 216 00f6 592C0000 	  _ADR STORE 
 217 00fa 653D0000 	  _DOTQP 21 , "fpu exception FPSCR: "
 217      15667075 
 217      20657863 
 217      65707469 
 217      6F6E2046 
 218 0114 411F0000 	  _ADR FPSCR 
 219 0118 612D0000 	  _ADR DUPP 
 220 011c E72B0000 	  _DOLIT '$'
 220      24000000 
 221 0124 F12A0000 	  _ADR EMIT 
 222 0128 E93D0000 	  _ADR UDOT
 223 012c 352F0000 	  _ADR QDUP 
 224 0130 272C0000 	  _QBRAN 2f 
 224      C8010000 
ARM GAS  forth.s 			page 16


 225 0138 E72B0000 	  _DOLIT ',' 
 225      2C000000 
 226 0140 F12A0000 	  _ADR EMIT 
 227 0144 E72B0000 	  _DOLIT ' ' 
 227      20000000 
 228 014c F12A0000 	  _ADR EMIT
 229 0150 612D0000 	  _ADR DUPP 
 230 0154 E72B0000 	  _DOLIT 0x10 
 230      10000000 
 231 015c A52D0000 	  _ADR ANDD
 232 0160 352F0000 	  _ADR QDUP  
 233 0164 272C0000 	  _QBRAN 1f 
 233      84010000 
 234 016c E72B0000 	  _DOLIT fpu_exceptions
 234      DC010000 
 235 0174 252E0000 	  _ADR PLUS 
 236 0178 6D2C0000 	  _ADR AT 
 237 017c B5310000 	  _ADR COUNT 
 238 0180 C93C0000 	  _ADR TYPEE
 239 0184 E72B0000 	1: _DOLIT 15 
 239      0F000000 
 240 018c A52D0000 	  _ADR ANDD
 241 0190 69300000 	  _ADR CLZ 
 242 0194 E72B0000 	  _DOLIT 31 
 242      1F000000 
 243 019c 712D0000 	  _ADR SWAP 
 244 01a0 352E0000 	  _ADR SUBB 
 245 01a4 E72B0000 	  _DOLIT 2 
 245      02000000 
 246 01ac 152E0000 	  _ADR LSHIFT 
 247 01b0 E72B0000 	  _DOLIT fpu_exceptions 
 247      DC010000 
 248 01b8 252E0000 	  _ADR PLUS 
 249 01bc 6D2C0000 	  _ADR AT 
 250 01c0 B5310000 	  _ADR COUNT 
 251 01c4 C93C0000 	  _ADR TYPEE 
 252 01c8 FD3C0000 	2: _ADR CR 
 253 01cc E72B0000 	  _DOLIT 0
 253      00000000 
 254 01d4 611F0000 	  _ADR CLR_FPSCR 
 255 01d8 B1000000 	  _ADR exit_fpu_isr // reset_mcu 
 256              	
 257              	  .p2align 2 
 258              	// fpu exception 
 259 01dc F0010000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 259      04020000 
 259      14020000 
 259      20020000 
 259      2C020000 
 260              	
 261              	  .p2align 2 
 262              	fpu_except_invalid_op: // bit 0  
 263 01f0 12       	  .byte 18
 264 01f1 20696E76 	  .ascii " invalid operation" 
 264      616C6964 
 264      206F7065 
 264      72617469 
ARM GAS  forth.s 			page 17


 264      6F6E
 265              	                      
 266 0203 00       	  .p2align 2 
 267              	fpu_except_div0: // bit 1 
 268 0204 0E       	  .byte 14 
 269 0205 20646976 	  .ascii " division by 0" 
 269      6973696F 
 269      6E206279 
 269      2030
 270              	
 271 0213 00       	  .p2align 2 
 272              	fpu_except_overflow: // bit 2
 273 0214 09       	  .byte 9 
 274 0215 206F7665 	  .ascii " overflow"
 274      72666C6F 
 274      77
 275              	
 276 021e 00BF     	  .p2align 2 
 277              	fpu_except_underflow:  // bit 3 
 278 0220 0A       	  .byte 10
 279 0221 20756E64 	  .ascii " underflow"
 279      6572666C 
 279      6F77
 280              	
 281 022b 00       	  .p2align 2 
 282              	fpu_except_inexact: // bit 4 
 283 022c 0A       	  .byte 10 
 284 022d 20696E65 	  .ascii " inexact, "
 284      78616374 
 284      2C20
 285              	
 286              	
 287              	/*********************************
 288              	  non maskable interrupt handler
 289              	  irq -14 
 290              	*********************************/
 291              	  .type nmi_handler, %function
 292 0237 00       	  .p2align 2
 293              	  .global nmi_handler 
 294              	nmi_handler:
 295 0238 DFF80CC6 	  ldr IP,=nmi_hl 
 296 023c 02F0F0BB 	  b  INEXT
 297              	nmi_hl:
 298 0240 AD460000 	  _ADR PRESE 
 299 0244 FD3C0000 	  _ADR CR 
 300 0248 653D0000 	  _DOTQP  25 , "not managed nmi exception"
 300      196E6F74 
 300      206D616E 
 300      61676564 
 300      206E6D69 
 301 0268 FD3C0000 	  _ADR CR 
 302 026c 25450000 	  _ADR ABORT 
 303              	   
 304              	
 305              	/***********************************
 306              	   hard fault handler
 307              	   irq -13
ARM GAS  forth.s 			page 18


 308              	***********************************/
 309              	  .type hardfault_handler, %function
 310              	  .p2align 2
 311              	  .global hardfault_handler 
 312              	hardfault_handler:
 313 0270 4FF00000 	  _MOV32 r0,RAM_END 
 313      C2F20200 
 314 0278 8546     	  mov sp,r0 
 315 027a DFF8D0C5 	  ldr IP,=hardfault_hl 
 316 027e 02F0CFBB 	  b INEXT
 317              	hardfault_hl:
 318 0282 AD460000 	  _ADR PRESE
 319 0286 FD3C0000 	  _ADR CR  
 320 028a 653D0000 	  _DOTQP  20 , "hard fault exception"
 320      14686172 
 320      64206661 
 320      756C7420 
 320      65786365 
 321 02a4 FD3C0000 	  _ADR CR 
 322 02a8 6D040000 	  _ADR reset_mcu
 323              	
 324              	/***********************************
 325              	   memory manager fault 
 326              	   irq -12 
 327              	************************************/
 328              	  .type memfault_handler, %function
 329              	  .p2align 2
 330              	  .global memfault_handler 
 331              	memfault_handler:
 332 02ac 4FF00000 	  _MOV32 r0,RAM_END 
 332      C2F20200 
 333 02b4 8546     	  mov sp,r0 
 334 02b6 DFF898C5 	  ldr IP,=memfault_hl 
 335 02ba 02F0B1BB 	  b INEXT 
 336              	memfault_hl: 
 337 02be AD460000 	  _ADR PRESE
 338 02c2 FD3C0000 	  _ADR CR  
 339 02c6 653D0000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 339      216D656D 
 339      6F727920 
 339      6D616E61 
 339      67657220 
 340 02ec E72B0000 	  _DOLIT 16 
 340      10000000 
 341 02f4 55320000 	  _ADR BASE 
 342 02f8 592C0000 	  _ADR STORE   
 343 02fc 712A0000 	  _ADR CFSR
 344 0300 E72B0000 	  _DOLIT 255 
 344      FF000000 
 345 0308 A52D0000 	  _ADR ANDD 
 346 030c E93D0000 	  _ADR UDOT 
 347 0310 FD3C0000 	  _ADR CR 
 348 0314 6D040000 	  _ADR reset_mcu 
 349              	
 350              	
 351              	/************************************
 352              	   bus fault 
ARM GAS  forth.s 			page 19


 353              	   irq -11 
 354              	***********************************/
 355              	  .type busfault_handler, %function
 356              	  .p2align 2
 357              	  .global busfault_handler 
 358              	busfault_handler:
 359 0318 4FF00000 	  _MOV32 r0,RAM_END 
 359      C2F20200 
 360 0320 8546     	  mov sp,r0 
 361 0322 DFF830C5 	  ldr IP,=busfault_hl 
 362 0326 02F07BBB 	  b INEXT 
 363              	busfault_hl:
 364 032a AD460000 	  _ADR PRESE
 365 032e E72B0000 	  _DOLIT 1 
 365      01000000 
 366 0336 BD2B0000 	  _ADR ULED 
 367 033a E72B0000 	  _DOLIT  100 
 367      64000000 
 368 0342 11320000 	  _ADR MSEC 
 369 0346 952A0000 	  _ADR BFAR 
 370 034a 712A0000 	  _ADR CFSR 
 371 034e FD3C0000 	  _ADR CR  
 372 0352 653D0000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 372      1B627573 
 372      20666175 
 372      6C742065 
 372      78636570 
 373 0374 E72B0000 	  _DOLIT 16 
 373      10000000 
 374 037c 55320000 	  _ADR BASE 
 375 0380 592C0000 	  _ADR STORE   
 376 0384 E72B0000 	  _DOLIT 0XFF00 
 376      00FF0000 
 377 038c A52D0000 	  _ADR ANDD   
 378 0390 E93D0000 	  _ADR UDOT 
 379 0394 653D0000 	  _DOTQP 7 , " BFAR: "
 379      07204246 
 379      41523A20 
 380 03a0 E93D0000 	  _ADR UDOT 
 381 03a4 FD3C0000 	  _ADR CR 
 382 03a8 6D040000 	  _ADR reset_mcu  
 383              	
 384              	/************************************
 385              	    usage fault
 386              	    irq -10 
 387              	************************************/
 388              	  .type usagefault_handler, %function
 389              	  .p2align 2
 390              	  .global usagefault_handler 
 391              	usagefault_handler:
 392 03ac 4FF00000 	  _MOV32 r0,RAM_END 
 392      C2F20200 
 393 03b4 8546     	  mov sp,r0 
 394 03b6 DFF8A0C4 	  ldr IP,=usagefault_hl
 395 03ba 02F031BB 	  b INEXT 
 396              	usagefault_hl:
 397 03be AD460000 	  _ADR PRESE
ARM GAS  forth.s 			page 20


 398 03c2 FD3C0000 	  _ADR CR  
 399 03c6 653D0000 	  _DOTQP  23 , "usage exception, UFSR: "
 399      17757361 
 399      67652065 
 399      78636570 
 399      74696F6E 
 400 03e4 E72B0000 	  _DOLIT 16 
 400      10000000 
 401 03ec 55320000 	  _ADR BASE 
 402 03f0 592C0000 	  _ADR STORE   
 403 03f4 712A0000 	  _ADR CFSR
 404 03f8 E72B0000 	  _DOLIT 16 
 404      10000000 
 405 0400 FD2D0000 	  _ADR RSHIFT 
 406 0404 E93D0000 	  _ADR UDOT 
 407 0408 FD3C0000 	  _ADR CR 
 408 040c 6D040000 	  _ADR reset_mcu  
 409              	
 410              	
 411              	/*********************************
 412              		system milliseconds counter
 413              	*********************************/	
 414              	  .type systick_handler, %function
 415              	  .p2align 2 
 416              	  .global systick_handler
 417              	systick_handler:
 418 0410 4FF00003 	  _MOV32 r3,UPP
 418      C2F20003 
 419 0418 9868     	  ldr r0,[r3,#TICKS]  
 420 041a 00F10100 	  add r0,#1
 421 041e 9860     	  str r0,[r3,#TICKS]
 422 0420 D868     	  ldr r0,[r3,#CD_TIMER]
 423 0422 10B1     	  cbz r0, systick_exit
 424 0424 A0F10100 	  sub r0,#1
 425 0428 D860     	  str r0,[r3,#CD_TIMER]
 426              	systick_exit:
 427 042a 7047     	  bx lr
 428              	
 429              	user_reboot:
 430 042c 00B500F0 	   _CALL forth_init 
 430      4FF85DF8 
 430      04EB
 431 0436 DFF824C4 	  ldr IP,=ur
 432 043a 02F0F1BA 	  b INEXT  
 433              	ur:
 434 043e AD460000 	  _ADR PRESE
 435 0442 FD3C0000 	  _ADR CR   
 436 0446 E72B0000 		_DOLIT user_reboot_msg
 436      5C040000 
 437 044e B5310000 		_ADR COUNT 
 438 0452 C93C0000 	  _ADR TYPEE 
 439 0456 6D040000 	  _ADR reset_mcu 
 440              	
 441 045a 00BF     		.p2align 2 
 442              	user_reboot_msg:
 443 045c 0C       		.byte 12
 444 045d 75736572 		.ascii "user reboot!"
ARM GAS  forth.s 			page 21


 444      20726562 
 444      6F6F7421 
 445 0469 0000BF   		.p2align 2 
 446              	
 447              	reset_mcu:
 448 046c 4FF48050 	  _MOV32 r0,UART 
 448      C4F20100 
 449 0474 0168     	1: ldr r1,[r0,#USART_SR]
 450 0476 11F0400F 	  tst r1,#(1<<6)
 451 047a FBD0     	  beq 1b
 452 047c 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 452      CEF20000 
 453 0484 C168     		ldr r1,[r0,#SCB_AIRCR]
 454 0486 41F00401 		orr r1,#(1<<2)
 455 048a C0F2FA51 		movt r1,#SCB_VECTKEY
 456 048e C160     		str r1,[r0,#SCB_AIRCR]
 457 0490 FEE7     		b . 
 458              	
 459              	/**************************************
 460              	  reset_handler execute at MCU reset
 461              	***************************************/
 462              	  .type  reset_handler, %function
 463 0492 00BF     	  .p2align 2 
 464              	  .global reset_handler
 465              	reset_handler:
 466 0494 4FF00000 		_MOV32 r0,RAM_END
 466      C2F20200 
 467 049c 8546     		mov sp,r0 
 468              	// enable memory, bus and usage exceptions  
 469 049e 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 469      CEF20000 
 470 04a6 81EA0101 	  eor r1,r1 
 471 04aa C0F20701 	  movt r1,#7 
 472 04ae 4162     	  str r1,[r0,#SCB_SHCSR]
 473 04b0 FFF7FEFF 		bl	remap 
 474 04b4 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 475 04b8 01F027FD 	  bl  fpu_init 
 476 04bc 00F0EBF9 		bl  ser_init
 477 04c0 FFF7FEFF 	 	bl	tv_init
 478 04c4 FFF7FEFF 	  bl  kbd_init
 479 04c8 01F0E4FA 	  bl  flash_spi_init   
 480 04cc 05F01AB8 		b COLD 
 481              	
 482              	
 483              	
 484              		.type forth_init, %function 
 485              	  .p2align 2 
 486              	forth_init:
 487 04d0 4FF00004 		_MOV32 UP,UPP 
 487      C2F20004 
 488 04d8 4FF68067 		_MOV32 DSP,SPP
 488      C2F20107 
 489 04e0 4FF47F48 		_MOV32 RSP,RPP
 489      C2F20108 
 490 04e8 DFF874A3 	  ldr INX,=NEST
 491 04ec 4AF0010A 	  orr INX,#1 
 492 04f0 86EA0606 		EOR TOS,TOS  
ARM GAS  forth.s 			page 22


 493 04f4 7047     		_RET 
 494              	
 495              	
 496              	
 497              	  .type init_devices, %function
 498 04f6 00BF     	  .p2align 2 
 499              	init_devices:
 500              	/* init clock to HSE 96 Mhz */
 501              	/* set 3 wait states in FLASH_ACR_LATENCY */
 502 04f8 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 502      C4F20200 
 503 0500 4FF00301 	  mov r1,#3 
 504 0504 0160     	  str r1,[r0,#FLASH_ACR]
 505              	/* configure clock for HSE, 25 Mhz crystal */
 506              	/* enable HSE in RCC_CR */
 507 0506 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 507      C4F20200 
 508 050e 0168     	  ldr r1,[r0,#RCC_CR]
 509 0510 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 510 0514 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 511              	/* wait HSERDY loop */
 512              	wait_hserdy:
 513 0516 0168     	  ldr r1,[r0,#RCC_CR]
 514 0518 11F4003F 	  tst r1,#(1<<17)
 515 051c FBD0     	  beq wait_hserdy
 516              	
 517              	/************************************************* 
 518              	   configure PLL  and source 
 519              	   SYSCLOCK=96 Mhz
 520              	   select HSE as  PLL source clock
 521              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 522              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 523              	****************************************************/
 524              	  /* set RCC_PLLCFGR */
 525 051e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 525      C4F20200 
 526 0526 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 526      C0F24041 
 527 052e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 528              	  /* enable PLL */
 529 0530 0168     	  ldr r1,[r0,#RCC_CR]
 530 0532 41F08071 	  orr r1, #(1<<24)
 531 0536 0160     	  str r1,[r0,#RCC_CR]
 532              	/* wait for PLLRDY */
 533              	wait_pllrdy:
 534 0538 0168     	  ldr r1,[r0,#RCC_CR]
 535 053a 11F0007F 	  tst r1,#(1<<25)
 536 053e FBD1     	  bne wait_pllrdy 
 537              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 538 0540 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 538      C0F21901 
 539 0548 8160     	  str r1,[r0,#RCC_CFGR]
 540              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 541 054a 8168     	  ldr r1,[r0,#RCC_CFGR]
 542 054c 41F00201 	  orr r1,#2
 543 0550 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 544              	/* wait for SWS==2 */
ARM GAS  forth.s 			page 23


 545              	wait_sws:
 546 0552 8168     	  ldr r1,[r0,#RCC_CFGR]
 547 0554 11F0080F 	  tst r1,#(2<<2)
 548 0558 FBD0     	  beq wait_sws
 549              	/* now sysclock is 96 Mhz */
 550              	
 551              	
 552              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 553 055a 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 554 055e 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 555 0560 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 556 0564 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 557              	/* configure GPIOC:13 as output for user LED */
 558 0566 4FF40060 	  _MOV32 r0,LED_GPIO 
 558      C4F20200 
 559 056e 4FF00D01 	  mov r1,#LED_PIN
 560 0572 4FF01102 	  mov r2,#OUTPUT_OD 
 561 0576 00B500F0 	  _CALL gpio_config 
 561      A6F85DF8 
 561      04EB
 562 0580 4FF00102 	  mov r2,#1
 563 0584 00B500F0 	  _CALL gpio_out 
 563      F5F85DF8 
 563      04EB
 564              	/* enable compensation CELL for fast I/O */
 565 058e 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 565      C4F20101 
 566 0596 4FF00100 		mov r0,#1 
 567 059a 0862     		str r0,[R1,#SYSCFG_CMPCR]
 568              	/* wait for ready bit */ 
 569 059c 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 570 059e 10F4807F 	    tst r0,#(1<<8)
 571 05a2 FBD0     		beq 1b 	
 572              	
 573              	
 574              	/* configure systicks for 1msec ticks */
 575              	// set priority to 15 (lowest)
 576 05a4 4FF0FF30 	  mov r0,#STCK_IRQ
 577 05a8 4FF00F01 	  mov r1,#15 
 578 05ac 00B500F0 	  _CALL nvic_set_priority
 578      2FF85DF8 
 578      04EB
 579 05b6 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 579      CEF20000 
 580 05be 47F2FF61 	  _MOV32 r1,95999 
 580      C0F20101 
 581 05c6 4160     	  str r1,[r0,#STK_LOAD]
 582 05c8 4FF00701 	  mov r1,#7
 583 05cc 0160     	  str r1,[r0,STK_CTL]
 584 05ce 7047     	  _RET  
 585              	
 586              	
 587              	/* copy system variables to RAM */ 
 588              		.type remap, %function 
 589              	    .global remap 
 590              	remap:
 591              	// copy system to RAM 	
ARM GAS  forth.s 			page 24


 592 05d0 4FF00000 		_MOV32 r0,RAM_ADR 
 592      C2F20000 
 593 05d8 A249     		ldr r1,=UZERO 
 594 05da 4FF0B002 		mov r2,#ULAST-UZERO 
 595 05de 02F10302 		add r2,r2,#3
 596 05e2 22F00302 		and r2,r2,#~3 
 597 05e6 51F8043B 	1:	ldr r3,[r1],#4 
 598 05ea 40F8043B 		str r3,[r0],#4 
 599 05ee 043A     		subs R2,#4 
 600 05f0 F9D1     		bne 1b
 601              	// zero end of RAM 
 602 05f2 4FF00002 		_MOV32 r2,RAM_END 
 602      C2F20202 
 603 05fa 83EA0303 		eor r3,r3,r3 
 604 05fe 40F8043B 	2:  str r3,[r0],#4
 605 0602 9042     		cmp r0,r2 
 606 0604 FBDB     		blt 2b 
 607 0606 4FF00004 		_MOV32 UP,RAM_ADR  
 607      C2F20004 
 608 060e 7047     		_RET 
 609              	
 610              	// set irq priority 
 611              	// 0 highest 
 612              	// 15 lowest
 613              	// input: r0 IRQn  
 614              	//        r1  ipr 
 615              	nvic_set_priority:
 616 0610 08B4     	    push {r3}
 617 0612 0028     	    cmp r0,#0 
 618 0614 08D4     	    bmi negative_irq 
 619 0616 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 619      CEF20003 
 620 061e 4FEA0111 	    lsl r1,#4 
 621 0622 1954     	    strb r1,[r3,r0]
 622 0624 08BC     	    pop {r3}
 623 0626 7047     	    _RET 
 624              	negative_irq:
 625 0628 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 625      CEF20003 
 626 0630 00F00F00 	    and r0,#0XF 
 627 0634 A0F10400 	    sub r0,#4 
 628 0638 4FEA0111 	    lsl r1,#4 
 629 063c 1954     	    strb r1,[r3,r0]
 630 063e 08BC     	    pop {r3}
 631 0640 7047     	    _RET 
 632              	
 633              	
 634              	// enable interrupt in nvic 
 635              	// input: r0 = IRQn 
 636              	nvic_enable_irq: 
 637 0642 0EB4     	    push {r1,r2,r3}
 638 0644 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 638      CEF20003 
 639 064c 0146     	    mov r1,r0 
 640 064e 4FEA5111 	    lsr r1,#5  
 641 0652 4FEA8101 	    lsl r1,#2  // ISERn  
 642 0656 00F01F00 	    and r0,#31 // bit#
ARM GAS  forth.s 			page 25


 643 065a 4FF00102 	    mov r2,#1 
 644 065e 02FA00F2 	    lsl r2,r0
 645 0662 72B6     	    cpsid I
 646 0664 5A50     	    str r2,[r3,r1]
 647 0666 62B6     	    cpsie I 
 648 0668 0EBC     	    pop {r1,r2,r3}
 649 066a 7047     	    _RET 
 650              	
 651              	// disable interrupt in nvic
 652              	// input: r0 = IRQn
 653              	nvic_disable_irq:
 654 066c 0EB4     	    push {r1,r2,r3}
 655 066e 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 655      CEF20003 
 656 0676 0146     	    mov r1,r0 
 657 0678 4FEA5111 	    lsr r1,#5  
 658 067c 4FEA8101 	    lsl r1,#2  // ISERn
 659 0680 00F01F00 	    and r0,#31 // bit#
 660 0684 4FF00102 	    mov r2,#1 
 661 0688 02FA00F2 	    lsl r2,r0
 662 068c 5A50     	    str r2,[r3,r1]
 663 068e BFF34F8F 	    dsb 
 664 0692 BFF36F8F 	    isb 
 665 0696 0EBC     	    pop {r1,r2,r3}
 666 0698 7047     	    _RET 
 667              	
 668              	// clear interrupt pending flag 
 669              	// input: r0 = IRQn
 670              	nvic_clear_irq_pending:
 671 069a 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 671      CEF20003 
 672 06a2 0EB4     	    push {r1,r2,r3}
 673 06a4 0146     	    mov r1,r0 
 674 06a6 4FEA5111 	    lsr r1,#5 
 675 06aa 4FEA8101 	    lsl r1,#2  // IABRn
 676 06ae 00F01F00 	    and r0,#31 // bit#
 677 06b2 4FF00102 	    mov r2,#1 
 678 06b6 02FA00F2 	    lsl r2,r0
 679 06ba 5A50     	    str r2,[r3,r1]
 680 06bc BFF34F8F 	    dsb 
 681 06c0 BFF36F8F 	    isb 
 682 06c4 0EBC     	    pop {r1,r2,r3}
 683 06c6 7047     	    _RET 
 684              	
 685              	
 686              	/**********************************
 687              	  gpio_config 
 688              	  Configure gpio mode 
 689              	  input:
 690              	    r0   GPIOx 
 691              	    r1   pin 
 692              	    r2   mode 
 693              	  output:
 694              	    none 
 695              	  use:
 696              	    r3,r5,r11  
 697              	**********************************/
ARM GAS  forth.s 			page 26


 698              	gpio_config:
 699 06c8 2DE92808 	    push {r3,r5,r11}
 700              	//  clear registers field 
 701 06cc 4FF00105 	    mov r5,#1
 702 06d0 05FA01F5 	    lsl r5,r1
 703 06d4 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 704 06d8 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 705 06da 03EA0503 	    and r3,r5 
 706 06de 4360     	    str r3,[r0,#GPIO_OTYPER]
 707 06e0 4FF00305 	    mov r5,#3 
 708 06e4 4FF0020B 	    mov r11,#2 
 709 06e8 01FB0BFB 	    mul r11,r1 
 710 06ec 05FA0BF5 	    lsl r5,r11 
 711 06f0 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 712 06f4 0368     	    ldr r3,[r0,#GPIO_MODER]
 713 06f6 03EA0503 	    and r3,r5 
 714 06fa 0360     	    str r3,[r0,#GPIO_MODER]
 715 06fc C368     	    ldr r3,[r0,#GPIO_PUPDR]
 716 06fe 03EA0503 	    and r3,r5 
 717 0702 C360     	    str r3,[r0,#GPIO_PUPDR]
 718              	// set mode register, r2 low nibble  
 719 0704 02F00305 	    and r5,r2,#3    
 720 0708 05FA0BF5 	    lsl r5,r11 // mode 
 721 070c 0368     	    ldr r3,[r0,#GPIO_MODER]
 722 070e 43EA0503 	    orr r3,r5 
 723 0712 0360     	    str r3,[r0,#GPIO_MODER]
 724 0714 032A     	    cmp r2,#3
 725 0716 13D0     	    beq 9f // analog input 
 726 0718 12F00305 	    ands r5,r2,#3 
 727 071c 08D0     	    beq input_pull 
 728              	output_type:
 729 071e 4FEA1212 	    lsr r2,#4 
 730 0722 02FA01F2 	    lsl r2,r1 // 1 bit field 
 731 0726 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 732 0728 43EA0203 	    orr r3,r2 
 733 072c 4360     	    str r3,[r0,#GPIO_OTYPER]
 734 072e 07E0     	    b 9f 
 735              	input_pull:
 736 0730 C368     	    ldr r3,[r0,#GPIO_PUPDR]
 737 0732 4FEA1212 	    lsr r2,#4 
 738 0736 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 739 073a 43EA0203 	    orr r3,r2 
 740 073e C360     	    str r3,[r0,#GPIO_PUPDR]
 741 0740 BDE82808 	9:  pop {r3,r5,r11}
 742 0744 7047     	    _RET 
 743              	
 744              	// configure gpio speed 
 745              	// input:
 746              	//    r0   GPIO_BASE_ADR 
 747              	//    r1   pin 
 748              	//    r2   speed
 749              	// use:
 750              	//  r3,r5,r11 
 751              	gpio_speed:
 752 0746 2DE92808 	    push {r3,r5,r11}
 753 074a 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 754 074c 4FF00305 	    mov r5,#3
ARM GAS  forth.s 			page 27


 755 0750 4FF0020B 	    mov r11,#2 
 756 0754 01FB0BFB 	    mul r11,r1 
 757 0758 05FA0BF5 	    lsl r5,r11
 758 075c 6FEA0505 	    mvn r5,r5 
 759 0760 03EA0503 	    and r3,r5   
 760 0764 02FA0BF2 	    lsl r2,r11  
 761 0768 43EA0203 	    orr r3,r2 
 762 076c 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 763 076e BDE82808 	    pop {r3,r5,r11}
 764 0772 7047     	    _RET
 765              	
 766              	/**************************** 
 767              	  gpio_out port,pin,0|1
 768              	  input:
 769              	    r0   gpio_base_adr 
 770              	    r1   pin 
 771              	    r2   data 0|1 
 772              	**************************/
 773              	gpio_out:
 774 0774 08B4     	    push {r3}
 775 0776 4FF00103 	    mov r3,#1 
 776 077a 03FA01F3 	    lsl r3,r1 
 777 077e 0AB9     	    cbnz r2, 1f 
 778 0780 4FEA0343 	    lsl r3,#16 
 779 0784 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 780 0786 08BC     	    pop {r3}
 781 0788 7047     	    _RET 
 782              	
 783              	/******************************************************
 784              	*  COLD start moves the following to USER variables.
 785              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 786              	******************************************************/
 787 078a 00BF     		.p2align 2
 788              	UZERO:
 789 078c 00000000 		.word 0  			/*Reserved */
 790 0790 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 791 0794 00000000 		.word 0      /* TICKS */
 792 0798 00000000 	    .word 0     /* CD_TIMER */
 793 079c 14540000 		.word HI_BOTH  /*'BOOT */
 794 07a0 7C170000 		.word PS2_QKEY /* query for character */
 795 07a4 44100000 	  .word TV_EMIT  /* char output device */
 796 07a8 0A000000 	  .word BASEE 	/*BASE */
 797 07ac 00000000 		.word 0			/*tmp */
 798 07b0 00000000 		.word 0			/*SPAN */
 799 07b4 00000000 		.word 0			/*>IN */
 800 07b8 00000000 		.word 0			/*#TIB */
 801 07bc 80FE0120 		.word TIBB	/*TIBU */
 802 07c0 84450000 		.word INTER	/*'EVAL */
 803 07c4 00000000 		.word 0			/*HLD */
 804 07c8 FC540000 		.word _LASTN	/*CONTEXT */
 805 07cc 68550000 		.word CTOP  	/* FCP end of system dictionnary */
 806 07d0 DC4D0020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 807 07d4 FC540000 		.word _LASTN	/*LAST word in dictionary */
 808 07d8 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 808      00000000 
 808      00000000 
 808      00000000 
ARM GAS  forth.s 			page 28


 809 07e8 00000000 		.word 0  /* RX_HEAD */
 810 07ec 00000000 		.word 0  /* RX_TAIL */ 
 811 07f0 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 812 07f4 00000000 		.word 0  /* VID_STATE, video state */  
 813 07f8 00000000 	    .word 0  /* VID_FIELD, field */
 814 07fc 80800120 		.word VID_BUFF /* video_buffer address */ 
 815 0800 00000000 	    .word 0 /* kbd struct */
 816 0804 00000000 		.space KBD_QUEUE_SIZE,0  
 816      00000000 
 816      00000000 
 816      00000000 
 817 0814 00000000 		.word 0  /* kbd queue head */
 818 0818 00000000 		.word 0 /* kbd queue tail */ 
 819 081c 00000000 	    .word 0 /* tv cursor row */
 820 0820 00000000 	    .word 0 /* tv cursor column */ 
 821 0824 00000000 	    .word 0 /* tv back color */
 822 0828 07000000 	    .word 7 /* tv font color */
 823 082c 00000000 	    .word 0 /* FPSW */
 824 0830 00000000 	    .word 0 /* FBASE */ 
 825 0834 00000000 	    .word 0,0 
 825      00000000 
 826              	ULAST:
 827              	
 828              	// used by _HEADER macro 
 829              	// to link names field
 830              	// in dictionary  
 831 083c 12000000 	    .equ LINK, 0 
 831      CC460000 
 831      E2000000 
 831      40020000 
 831      82020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
ARM GAS  forth.s 			page 29


  27              	  .thumb
  28              	
  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 0868 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 0870 1868     		ldr r0,[r3,#USART_SR]
  38 0872 5968     		ldr r1,[r3,#USART_DR]
  39 0874 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 0878 0CD0     		beq 2f // no char received 
  41 087a B1F1030F 		cmp r1,#VK_CTRL_C 
  42 087e 3FF4D5AD 		beq user_reboot // received CTRL-C then reboot MCU 
  43 0882 04F14C00 		add r0,UP,#RX_QUEUE
  44 0886 226E     		ldr r2,[UP,#RX_TAIL]
  45 0888 8154     		strb r1,[r0,r2]
  46 088a 02F10102 		add r2,#1 
  47 088e 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 0892 2266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 0894 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 0896 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 089e 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 08a0 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 08a4 01EA0201 	  and r1,r1,r2
  62 08a8 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 08ac 41EA0201 	  orr r1,r1,r2 
  64 08b0 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 08b2 4FF4EE61 	  mov r1,#0x77<<4 
  67 08b6 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 08b8 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 08c0 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 08c4 8160     	  str r1,[r0,#USART_BRR]
  73 08c6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 08ca C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 08cc 4FF02500 	  mov r0,#USART1_IRQ 
  77 08d0 4FF00701 	  mov r1,#7
  78 08d4 00B5FFF7 	  _CALL nvic_set_priority
  78      9BFE5DF8 
  78      04EB
ARM GAS  forth.s 			page 30


  79              	/* enable interrupt in NVIC */
  80 08de 4FF02500 	  mov r0,#USART1_IRQ 
  81 08e2 00B5FFF7 	  _CALL nvic_enable_irq  
  81      ADFE5DF8 
  81      04EB
  82 08ec 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 08ee 00000000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 08fc 47F8046D 		_PUSH
  92 0900 206E     		ldr T0,[UP,#RX_TAIL] 
  93 0902 E16D     		ldr T1,[UP,#RX_HEAD]
  94 0904 90EA0106 		eors TOS,T0,T1 
  95 0908 0CD0     		beq 1f
  96 090a 04F14C00 		add T0,UP,#RX_QUEUE 
  97 090e 0844     		add T0,T1 
  98 0910 0678     		ldrb TOS,[T0]
  99 0912 01F10101 		add T1,#1 
 100 0916 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 091a E165     		str T1,[UP,#RX_HEAD]
 102 091c 47F8046D 		_PUSH 
 103 0920 4FF0FF36 		mov TOS,#-1
 104 0924 02F07CB8 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 0928 F2080000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 0938 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 0940 2868     	1:  ldr T0,[WP,#USART_SR]
 113 0942 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 0946 FBD0     		beq 1b 
 115 0948 2E71     		strb TOS,[WP,#USART_DR]	 
 116 094a 57F8046B 		_POP
 117 094e 02F067B8 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 0952 2C090000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
ARM GAS  forth.s 			page 31


 125 095c 47F8046D 	        _PUSH 
 126 0960 4FF00006 	        mov TOS,#0
 127 0964 02F05CB8 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 0968 56090000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 0974 47F8046D 	        _PUSH 
 135 0978 4FF00106 	        mov TOS,#1
 136 097c 02F050B8 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 0980 6C090000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 098c 3046     	        mov T0,TOS
 144 098e 57F8046B 	        _POP 
 145 0992 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 0994 4B48     	        ldr T0,=SER_QKEY 
 148 0996 6061     	        str T0,[UP,#STDIN]
 149 0998 4B48     	        ldr T0,=SER_EMIT
 150 099a A061     	        str T0,[UP,#STDOUT]
 151 099c 02F040B8 	        _NEXT 
 152              	4: // local console 
 153 09a0 4A48     	        ldr T0,=PS2_QKEY
 154 09a2 6061     	        str T0,[UP,#STDIN]
 155 09a4 4A48     	        ldr T0,=TV_EMIT
 156 09a6 A061     	        str T0,[UP,#STDOUT]
 157 09a8 02F03AB8 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 09ac 84090000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 09bc 504700BF 	      _NEST 
 166 09c0 E72B0000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 09c8 812E0000 	1:    _ADR ONEP  // c+1
 168 09cc DD2C0000 	      _ADR TOR   
 169 09d0 E72B0000 	      _DOLIT 10 
 169      0A000000 
 170 09d8 85350000 	      _ADR SLMOD // r q  
 171 09dc 352F0000 	      _ADR QDUP  // r q q | r 0  
 172 09e0 272C0000 	      _QBRAN 2f  // r 0 
ARM GAS  forth.s 			page 32


 172      F4090000 
 173 09e8 992C0000 	      _ADR RFROM // r q c 
 174 09ec 3B2C0000 	      _BRAN 1b
 174      C8090000 
 175 09f4 E72B0000 	2:    _DOLIT '0'  
 175      30000000 
 176 09fc 252E0000 	      _ADR PLUS 
 177 0a00 F12A0000 	      _ADR EMIT 
 178 0a04 992C0000 	      _ADR RFROM 
 179 0a08 352F0000 	      _ADR QDUP 
 180 0a0c 272C0000 	      _QBRAN 3f
 180      240A0000 
 181 0a14 912E0000 	      _ADR ONEM 
 182 0a18 DD2C0000 	      _ADR TOR 
 183 0a1c 3B2C0000 	      _BRAN 2b 
 183      F4090000 
 184              	3:    
 185 0a24 272A0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 0a28 B0090000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 0a34 504700BF 	      _NEST 
 193 0a38 E72B0000 	      _DOLIT 27 
 193      1B000000 
 194 0a40 F12A0000 	      _ADR EMIT 
 195 0a44 E72B0000 	      _DOLIT '['
 195      5B000000 
 196 0a4c F12A0000 	      _ADR EMIT 
 197 0a50 272A0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 0a54 2C0A0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 0a60 504700BF 	      _NEST
 205 0a64 350A0000 	      _ADR ANSI_ESC
 206 0a68 712D0000 	      _ADR SWAP 
 207 0a6c BD090000 	      _ADR ANSI_PARAM 
 208 0a70 E72B0000 	      _DOLIT ';'
 208      3B000000 
 209 0a78 F12A0000 	      _ADR EMIT
 210 0a7c BD090000 	      _ADR ANSI_PARAM
 211 0a80 E72B0000 	      _DOLIT 'H'
 211      48000000 
 212 0a88 F12A0000 	      _ADR EMIT 
 213 0a8c 272A0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
ARM GAS  forth.s 			page 33


 217              	    serial clear screeen 
 218              	****************************/
 219 0a90 580A0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 0a9c 504700BF 	    _NEST
 221 0aa0 E72B0000 	    _DOLIT 1 
 221      01000000 
 222 0aa8 612D0000 	    _ADR DUPP 
 223 0aac 610A0000 	    _ADR SER_AT  
 224 0ab0 350A0000 	    _ADR ANSI_ESC
 225 0ab4 E72B0000 	    _DOLIT 'J'
 225      4A000000 
 226 0abc F12A0000 	    _ADR EMIT 
 227 0ac0 272A0000 	    _UNNEST 
 228 0ac4 FC080000 	
 228      38090000 
 228      7C170000 
 228      44100000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
ARM GAS  forth.s 			page 34


   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	  .equ HRES, 320  // horizontal resolution
  21              	  .equ VRES, 200   // vertical resolution
  22              	  .equ BPP, 4     // bits per pixel
  23              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  24              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  25              	
  26              	  .equ CHAR_WIDTH, 6 
  27              	  .equ CHAR_HEIGHT, 8
  28              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
ARM GAS  forth.s 			page 35


  68              	********************************************************/
  69              	
  70              	/**************************************
  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 0ad4 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 0adc 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 0ade 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 0ae6 41EA0201 	  orr r1,r2
  82 0aea 0160     	  str r1,[r0,#GPIO_MODER]
  83 0aec 81EA0101 	  eor r1,r1 
  84 0af0 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 0af2 4FF00101 	  mov r1,#1 // pin 1 
  88 0af6 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 0afa 00B5FFF7 	  _CALL gpio_config 
  89      E4FD5DF8 
  89      04EB
  90 0b04 4FF00101 	  mov r1,#1 
  91 0b08 4FF00202 	  mov r2,#2
  92 0b0c 00B5FFF7 	  _CALL gpio_speed 
  92      1AFE5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 0b16 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 0b18 41F02001 	  orr r1,#(2<<4) // AF2 
  96 0b1c 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 0b1e 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 0b26 4FF00200 	  mov r0,#2 
 100 0b2a 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 0b2c 41EA0001 	  orr r1,r0 
 102 0b30 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 0b32 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 0b3a 41F2D470 	  mov r0,#HPER
 106 0b3e D062     	  str r0,[r2,#TIM_ARR]
 107 0b40 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 0b44 D063     	  str r0,[r2,#TIM_CCR3]
 109 0b46 4FF4E170 	  mov r0,#HPULSE 
 110 0b4a 1064     	  str r0,[r2,#TIM_CCR4]  
 111 0b4c 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 0b50 D061     	  str r0,[r2,#TIM_CCMR2]
 113 0b52 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 0b56 1062     	  str r0,[r2,#TIM_CCER]
 115 0b58 4FF00100 	  mov r0,#1 
 116 0b5c D060     	  str r0,[r2,#TIM_DIER]
ARM GAS  forth.s 			page 36


 117 0b5e 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 0b60 4FF01D00 	  mov r0,#TIM3_IRQ 
 120 0b64 4FF00201 	  mov r1,#2
 121 0b68 00B5FFF7 	  _CALL nvic_set_priority
 121      51FD5DF8 
 121      04EB
 122 0b72 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 0b76 00B5FFF7 	  _CALL nvic_enable_irq
 123      63FD5DF8 
 123      04EB
 124 0b80 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 0b82 00BF     	  _GBL_FUNC tv_out_isr
 132 0b84 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 0b8c 81EA0101 	  eor T1,T1
 134 0b90 0161     	  str T1,[T0,#TIM_SR]
 135 0b92 616E     	  ldr T1,[UP,#VID_CNTR]
 136 0b94 01F10101 	  add T1,#1 
 137 0b98 6166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 0b9a A26E     	  ldr T2,[UP,#VID_STATE]
 140 0b9c 002A     	  cmp T2,#ST_VSYNC 
 141 0b9e 07D0     	  beq state_vsync
 142 0ba0 012A     	  cmp T2,#ST_PREVID 
 143 0ba2 2FD0     	  beq state_pre_video 
 144 0ba4 022A     	  cmp T2,#ST_VIDEO 
 145 0ba6 36D0     	  beq state_video_out 
 146 0ba8 032A     	  cmp T2,#ST_POSTVID 
 147 0baa 63D0     	  beq state_post_video
 148 0bac FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 0bb0 0129     	  cmp T1,#1
 152 0bb2 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 0bb4 4FF0DB01 	  mov T1,#SERRATION
 155 0bb8 0164     	  str T1,[T0,#TIM_CCR4]
 156 0bba 40F6E931 	  mov T1,#SYNC_LINE 
 157 0bbe C162     	  str T1,[T0,#TIM_ARR]
 158 0bc0 6BE0     	  b tv_isr_exit 
 159 0bc2 0729     	1: cmp T1,#7
 160 0bc4 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 0bc6 40F62821 	  mov T1,#VSYNC_PULSE
 163 0bca 0164     	  str T1,[T0,#TIM_CCR4]
 164 0bcc 65E0     	  b tv_isr_exit
 165 0bce 0D29     	2: cmp T1,#13
 166 0bd0 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 0bd2 4FF0DB01 	   mov T1,#SERRATION 
ARM GAS  forth.s 			page 37


 169 0bd6 0164     	   str T1,[T0,#TIM_CCR4]
 170 0bd8 5FE0     	   b tv_isr_exit   
 171 0bda 1229     	3: cmp T1,#18
 172 0bdc 03D1     	   bne 4f 
 173              	// if even field full line  
 174 0bde E16E     	   ldr T1,[UP,#VID_FIELD]
 175 0be0 0029     	   cmp T1,#ODD_FIELD  
 176 0be2 5AD0     	   beq tv_isr_exit 
 177 0be4 01E0     	   b sync_end 
 178 0be6 1329     	4: cmp T1,#19 
 179 0be8 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 0bea 4FF00901 	   mov T1,#9
 182 0bee 6166     	   str T1,[UP,#VID_CNTR]
 183 0bf0 4FF4E171 	   mov T1,#HPULSE 
 184 0bf4 0164     	   str T1,[T0,#TIM_CCR4] 
 185 0bf6 41F2D471 	   mov T1,#HPER 
 186 0bfa C162     	   str T1,[T0,#TIM_ARR] 
 187 0bfc 4FF00101 	   mov T1,#ST_PREVID 
 188 0c00 A166     	   str T1,[UP,#VID_STATE]
 189 0c02 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 0c04 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 0c06 48D4     	   bmi tv_isr_exit 
 194 0c08 4FF00201 	   mov T1,#ST_VIDEO 
 195 0c0c A166     	   str T1,[UP,#VID_STATE]
 196 0c0e 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 0c12 C160     	   str T1,[T0,#TIM_DIER]
 198 0c14 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 0c16 F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 0c18 06D9     	   bls 1f 
 205 0c1a 4FF00301 	   mov T1,#ST_POSTVID 
 206 0c1e A166     	   str T1,[UP,#VID_STATE]
 207 0c20 4FF00101 	   mov T1,#1 
 208 0c24 C160     	   str T1,[T0,#TIM_DIER]
 209 0c26 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 0c28 206F     	   ldr T0,[UP,#VID_BUFFER]
 212 0c2a A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 0c2e 4FF0A003 	   mov T3,#160
 214 0c32 03FB01F1 	   mul T1,T3 
 215 0c36 0844     	   add T0,T1  
 216 0c38 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 0c40 10F8012B 	2: ldrb T2,[T0],#1 
 222 0c44 4FEA0222 	   lsl T2,#8 
 223 0c48 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 0c4a AFF30080 	   nop.w 
ARM GAS  forth.s 			page 38


 225 0c4e AFF30080 	   nop.w
 226 0c52 AFF30080 	   nop.w 
 227 0c56 AFF30080 	   nop.w 
 228 0c5a 4FEA0212 	   lsl T2,#4  
 229 0c5e 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 0c60 AFF30080 	   nop.w
 231 0c64 AFF30080 	   nop.w  
 232 0c68 013B     	   subs T3,#1
 233 0c6a E9D1     	   bne 2b  
 234 0c6c 4FF47022 	   mov T2,#(15<<16) 
 235 0c70 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 0c72 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 0c74 4FF48372 	   mov T2,#262
 239 0c78 9142     	   cmp T1,T2
 240 0c7a 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 0c7c E16E     	   ldr T1,[UP,VID_FIELD]
 243 0c7e 11B9     	   cbnz T1, frame_end 
 244 0c80 40F6E931 	   mov T1,#SYNC_LINE
 245 0c84 C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 0c86 4FF00001 	   mov T1,#ST_VSYNC 
 248 0c8a A166     	   str T1,[UP,#VID_STATE]
 249 0c8c 81EA0101 	   eor T1,T1 
 250 0c90 6166     	   str T1,[UP,#VID_CNTR]
 251 0c92 E16E     	   ldr T1,[UP,#VID_FIELD]
 252 0c94 6FEA0101 	   mvn T1,T1  
 253 0c98 E166     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 0c9a 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 0c9c 940A0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 0cac 47F8046D 		_PUSH 
 266 0cb0 04F19806 		ADD TOS,UP,#BK_COLOR
 267 0cb4 01F0B4BE 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 0cb8 A00C0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 0cc8 47F8046D 		_PUSH 
 273 0ccc 04F19C06 		ADD TOS,UP,#PEN_COLOR
 274 0cd0 01F0A6BE 		_NEXT 
 275              	
ARM GAS  forth.s 			page 39


 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 0cd4 BC0C0000 	  _HEADER CURSOR_COL,6,"COLUMN"
 278      06434F4C 
 278      554D4E00 
 279 0ce0 47F8046D 	  _PUSH 
 280 0ce4 04F19406 	  ADD TOS,UP,#COL 
 281 0ce8 01F09ABE 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 0cec D80C0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 0cf4 47F8046D 	  _PUSH 
 287 0cf8 04F19006 	  ADD TOS,UP,#ROW 
 288 0cfc 01F090BE 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 0d00 F00C0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 0d0c 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 0d10 00FB06F6 	  mul TOS,T0 
 295 0d14 01F084BE 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 0d18 040D0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 0d24 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 0d28 00FB06F6 	  mul TOS,T0 
 302 0d2c 01F078BE 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 0d30 1C0D0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 0d3c 47F8046D 	  _PUSH 
 308 0d40 DFF88C65 	  ldr TOS,=font_6x8 
 309 0d44 01F06CBE 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 0d48 340D0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 0d54 47F8046D 	  _PUSH 
 315 0d58 266F     	  LDR TOS,[UP,#VID_BUFFER]
 316 0d5a 01F061BE 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
ARM GAS  forth.s 			page 40


 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
 325 0d5e 4C0D0000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 0d68 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 0d6a 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 0d6e 02FB00F0 	    mul T0,T2 
 330 0d72 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 0d76 1044     	    add T0,T2 
 332 0d78 236F     	    ldr T3,[UP,#VID_BUFFER] 
 333 0d7a 0344     	    add T3,T0 // T3 -> byte address 
 334 0d7c 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 0d7e 4FF00F02 	    mov T2,#15 // AND mask 
 336 0d82 11F0010F 	    tst T1,#1 
 337 0d86 01D0     	    beq 1f 
 338 0d88 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 0d8c DFF84405 	1:  ldr T0,=plot_op 
 340 0d90 D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 0d94 05EA0205 	    and WP,T2 // mask out nibble 
 343 0d98 94F89800 	    ldrb T0,[UP,#BK_COLOR]
 344 0d9c 11F0010F 	    tst T1,#1 
 345 0da0 01D1     	    bne 1f 
 346 0da2 4FEA0010 	    lsl T0,#4 // high nibble  
 347 0da6 45EA0005 	1:  orr WP,T0  
 348 0daa 1D70     	    strb WP,[T3]
 349 0dac 1AE0     	    b 9f 
 350              	op_pen: 
 351 0dae 05EA0205 	    and WP,T2 
 352 0db2 94F89C00 	    ldrb T0,[UP,#PEN_COLOR]
 353 0db6 11F0010F 	    tst T1,#1
 354 0dba 01D1     	    bne 1f 
 355 0dbc 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 0dc0 45EA0005 	1:	orr WP,T0 
 357 0dc4 1D70     	    strb WP,[T3]
 358 0dc6 0DE0     	    b 9f 
 359              	op_invert:
 360 0dc8 85EA0205 	    eor WP,T2 
 361 0dcc 1D70     	    strb WP,[T3]
 362 0dce 09E0     	    b 9f 
 363              	op_xor:
 364 0dd0 D4F89C00 	    ldr T0,[UP,#PEN_COLOR]
 365 0dd4 11F0010F 	    tst T1,#1 
 366 0dd8 01D1     	    bne 1f 
 367 0dda 4FEA0010 	    lsl T0,#4 
 368 0dde 85EA0005 	1:  eor WP,T0 
 369 0de2 1D70     	    strb WP,[T3]
 370 0de4 57F8046B 	9:  _POP 
 371 0de8 01F01ABE 	    _NEXT 
 372              	
 373 0dec 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
ARM GAS  forth.s 			page 41


 377              	// wait vertical sync phase 
 378 0df0 620D0000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
 378      4E4300BF 
 379 0dfc 606E     	1:  ldr T0,[UP,#VID_CNTR]
 380 0dfe 0028     	    cmp T0,#0
 381 0e00 FCD1     	    bne 1b
 382 0e02 01F00DBE 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 0e06 F40D0000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 0e10 80EA0000 	    eor T0,T0 
 388 0e14 94F89810 	    ldrb T1,[UP,#BK_COLOR]
 389 0e18 40EA0100 	    orr T0,T1 
 390 0e1c 4FEA0111 	    lsl T1,#4 
 391 0e20 40EA0100 	    orr T0,T1 
 392 0e24 4FEA0021 	    lsl T1,T0,#8 
 393 0e28 40EA0100 	    orr T0,T1 
 394 0e2c 4FEA0041 	    lsl T1,T0,#16
 395 0e30 40EA0100 	    orr T0,T1 
 396 0e34 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 0e38 226F     	    ldr T2,[UP,#VID_BUFFER]
 398 0e3a 5050     	1:	str T0,[T2,T1]
 399 0e3c 0439     	    subs T1,#4
 400 0e3e FCD1     	    bne 1b
 401 0e40 1060     	    str T0,[T2]
 402 0e42 80EA0000 	    eor T0,T0 
 403 0e46 C4F89000 	    str T0,[UP,#ROW]
 404 0e4a C4F89400 	    str T0,[UP,#COL]
 405 0e4e 01F0E7BD 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 0e52 0A0E0000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 0e60 504700BF 	  _NEST
 412 0e64 E72B0000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 0e6c 612D0000 	  _ADR DUPP  
 414 0e70 DD2C0000 	  _ADR TOR 
 415 0e74 452E0000 	  _ADR STAR
 416 0e78 550D0000 	  _ADR VIDBUFF
 417 0e7c 252E0000 	  _ADR PLUS
 418 0e80 992C0000 	  _ADR RFROM   
 419 0e84 E72B0000 	  _DOLIT 0 
 419      00000000 
 420 0e8c B9370000 	  _ADR FILL 
 421 0e90 272A0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
ARM GAS  forth.s 			page 42


 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 0e94 560E0000 	    _HEADER SCROLLUP,8,"SCROLLUP"
 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 0ea4 504700BF 	    _NEST 
 429 0ea8 550D0000 	    _ADR VIDBUFF 
 430 0eac 612D0000 	    _ADR DUPP 
 431 0eb0 E72B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 0eb8 612D0000 	    _ADR DUPP 
 433 0ebc DD2C0000 	    _ADR TOR 
 434 0ec0 252E0000 	    _ADR PLUS 
 435 0ec4 712D0000 	    _ADR SWAP 
 436 0ec8 E72B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 0ed0 992C0000 	    _ADR RFROM  
 438 0ed4 352E0000 	    _ADR SUBB 
 439 0ed8 71370000 	    _ADR MOVE
 440 0edc E72B0000 	    _DOLIT 24 
 440      18000000 
 441 0ee4 610E0000 	    _ADR CLRLINE 
 442 0ee8 272A0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 0eec 980E0000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 0efc 504700BF 	    _NEST 
 450 0f00 550D0000 	    _ADR VIDBUFF
 451 0f04 612D0000 	    _ADR DUPP 
 452 0f08 E72B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 0f10 252E0000 	    _ADR PLUS 
 454 0f14 E72B0000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 0f1c E72B0000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 0f24 352E0000 	    _ADR SUBB  
 457 0f28 71370000 	    _ADR MOVE
 458 0f2c E72B0000 	    _DOLIT 0 
 458      00000000 
 459 0f34 610E0000 	    _ADR CLRLINE
 460 0f38 272A0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 0f3c F00E0000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
ARM GAS  forth.s 			page 43


 467      43524C46 
 468 0f48 E34D     	    ldr WP,=SCROLLUP 
 469 0f4a 45F00105 	    orr WP,#1
 470 0f4e 80EA0000 	    eor T0,T0 
 471 0f52 C4F89400 	    str T0,[UP,#COL]
 472 0f56 D4F89000 	    ldr T0,[UP,#ROW]
 473 0f5a 1828     	    cmp T0,#24 
 474 0f5c A2D0     	    beq SCROLLUP  
 475 0f5e 00F10100 	    add T0,#1 
 476 0f62 C4F89000 	    str T0,[UP,#ROW]
 477 0f66 01F05BBD 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 0f6a 400F0000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 0f74 D4F89400 	  ldr T0,[UP,#COL]
 484 0f78 00F10100 	  add T0,#1
 485 0f7c 3528     	  cmp T0,#53
 486 0f7e E3D5     	  bpl TV_CRLF  
 487 0f80 C4F89400 	  str T0,[UP,#COL]
 488 0f84 01F04CBD 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 0f88 6E0F0000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 0f94 D4F89400 	    ldr T0,[UP,#COL]
 497 0f98 28B1     	    cbz T0,1f 
 498 0f9a A0F10100 	    sub T0,#1 
 499 0f9e C4F89400 	    str T0,[UP,#COL]
 500 0fa2 01F03DBD 	    _NEXT 
 501 0fa6 D4F89000 	1:  ldr T0,[UP,#ROW]
 502 0faa 38B1     	    cbz T0,9f
 503 0fac A0F10100 	    sub T0,#1
 504 0fb0 C4F89000 	    str T0,[UP,#ROW]
 505 0fb4 4FF03400 	    mov T0,#52 
 506 0fb8 C4F89400 	    str T0,[UP,#COL]
 507 0fbc 01F030BD 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 0fc0 4FF08000 	    mov T0,#128 
 513 0fc4 06EA0006 	    and TOS,T0 
 514 0fc8 4FEAD616 	    lsr TOS,#7
 515 0fcc 01F028BD 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 0fd0 3868     	  ldr T0,[DSP]
ARM GAS  forth.s 			page 44


 520 0fd2 00F10100 	  add T0,#1 
 521 0fd6 3860     	  str T0,[DSP]
 522 0fd8 01F022BD 	  _NEXT 
 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 0fdc 4FEA4606 	    lsl TOS,#1
 527 0fe0 01F01EBD 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 0fe4 504700BF 	    _NEST 
 536 0fe8 E72B0000 	    _DOLIT 5 
 536      05000000 
 537 0ff0 DD2C0000 	    _ADR TOR 
 538 0ff4 DD2C0000 	1:  _ADR TOR 
 539 0ff8 992F0000 	    _ADR DDUP 
 540 0ffc C92C0000 	    _ADR RAT
 541 1000 C10F0000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 1004 690D0000 	    _ADR PLOT 
 543 1008 D10F0000 	    _ADR INCR_X 
 544 100c 992C0000 	    _ADR RFROM 
 545 1010 DD0F0000 	    _ADR NEXT_PIXEL
 546 1014 092C0000 	    _DONXT 1b
 546      F40F0000 
 547 101c 852F0000 	    _ADR TDROP 
 548 1020 272A0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 1024 A6F12006 	   sub TOS,#32
 553 1028 4FF00800 	   mov T0,#8 
 554 102c 00FB06F6 	   mul TOS,T0 
 555 1030 A748     	   ldr T0,=font_6x8
 556 1032 0644     	   add TOS,T0 
 557 1034 01F0F4BC 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 1038 8C0F0000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 1044 504700BF 	    _NEST
 565 1048 612D0000 	    _ADR DUPP 
 566 104c E72B0000 	    _DOLIT 32 
 566      20000000 
 567 1054 E5300000 	    _ADR ULESS
 568 1058 272C0000 	    _QBRAN 1f
 568      68100000 
 569 1060 3B2C0000 	    _BRAN CTRL_KEY
 569      CC100000 
ARM GAS  forth.s 			page 45


 570 1068 25100000 	1:  _ADR CHAR_FONT 
 571 106c E10C0000 	    _ADR CURSOR_COL 
 572 1070 6D2C0000 	    _ADR AT
 573 1074 250D0000 	    _ADR COLX  // x coord 
 574 1078 F50C0000 	    _ADR CURSOR_ROW 
 575 107c 6D2C0000 	    _ADR AT    
 576 1080 0D0D0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 1084 492F0000 	    _ADR ROT  // TEST 
 578 1088 E72B0000 	    _DOLIT 7   
 578      07000000 
 579 1090 DD2C0000 	    _ADR TOR  
 580 1094 DD2C0000 	1:  _ADR TOR  // { x y }
 581 1098 992F0000 	    _ADR DDUP  // { x y x y }
 582 109c C92C0000 	    _ADR RAT 
 583 10a0 8D2C0000 	    _ADR CAT   // { x y x y r }
 584 10a4 E50F0000 	    _ADR CHAR_ROW 
 585 10a8 812E0000 	    _ADR ONEP // {x y' }
 586 10ac 992C0000 	    _ADR RFROM 
 587 10b0 812E0000 	    _ADR ONEP // {x y' c-adr' }
 588 10b4 092C0000 	    _DONXT 1b
 588      94100000 
 589 10bc 852F0000 	    _ADR TDROP  
 590 10c0 750F0000 	    _ADR RIGHT
 591 10c4 B5110000 	9:  _ADR SHOW_CURSOR 
 592 10c8 272A0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 10cc 3D120000 	    _ADR HIDE_CURSOR
 595 10d0 612D0000 	    _ADR DUPP 
 596 10d4 E72B0000 	    _DOLIT BKSPP  
 596      08000000 
 597 10dc AD300000 	    _ADR EQUAL 
 598 10e0 272C0000 	    _QBRAN 1f 
 598      F8100000 
 599 10e8 95110000 	    _ADR BACK_SPACE 
 600 10ec 512D0000 	8:  _ADR DROP 
 601 10f0 3B2C0000 	    _BRAN 9b 
 601      C4100000 
 602 10f8 612D0000 	1:  _ADR DUPP 
 603 10fc E72B0000 	    _DOLIT CRR 
 603      0D000000 
 604 1104 AD300000 	    _ADR EQUAL 
 605 1108 272C0000 	    _QBRAN 1f 
 605      1C110000 
 606 1110 3D110000 	    _ADR CAR_RET
 607 1114 3B2C0000 	    _BRAN 8b
 607      EC100000 
 608 111c E72B0000 	1:  _DOLIT LF 
 608      0A000000 
 609 1124 AD300000 	    _ADR EQUAL 
 610 1128 272C0000 	    _QBRAN 9b 
 610      C4100000 
 611 1130 55110000 	    _ADR LN_FEED
 612 1134 3B2C0000 	    _BRAN 9b  
 612      C4100000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
ARM GAS  forth.s 			page 46


 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
 619 113c 504700BF 	   _NEST
 620 1140 E72B0000 	   _DOLIT 0 
 620      00000000 
 621 1148 E10C0000 	   _ADR CURSOR_COL 
 622 114c 592C0000 	   _ADR STORE 
 623 1150 272A0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 1154 504700BF 	    _NEST 
 631 1158 F50C0000 	    _ADR CURSOR_ROW 
 632 115c 6D2C0000 	    _ADR AT 
 633 1160 612D0000 	    _ADR DUPP 
 634 1164 E72B0000 	    _DOLIT 24 
 634      18000000 
 635 116c CD2D0000 	    _ADR XORR 
 636 1170 272C0000 	    _QBRAN 1f
 636      88110000 
 637 1178 812E0000 	    _ADR ONEP 
 638 117c F50C0000 	    _ADR CURSOR_ROW 
 639 1180 592C0000 	    _ADR STORE 
 640 1184 272A0000 	    _UNNEST    
 641 1188 512D0000 	1:  _ADR DROP 
 642 118c A50E0000 	    _ADR SCROLLUP 
 643 1190 272A0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 1194 504700BF 	  _NEST 
 652 1198 950F0000 	  _ADR LEFT 
 653 119c B5110000 	  _ADR SHOW_CURSOR
 654 11a0 272A0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 11a4 3C100000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 11b4 504700BF 	    _NEST 
 663 11b8 E72B0000 	    _DOLIT 0xFF
 663      FF000000 
 664 11c0 F50C0000 	0:  _ADR CURSOR_ROW
 665 11c4 6D2C0000 	    _ADR AT  
ARM GAS  forth.s 			page 47


 666 11c8 812E0000 	    _ADR ONEP 
 667 11cc 0D0D0000 	    _ADR ROWY 
 668 11d0 E72B0000 	    _DOLIT BPR
 668      A0000000 
 669 11d8 452E0000 	    _ADR STAR
 670 11dc E72B0000 	    _DOLIT BPR  
 670      A0000000 
 671 11e4 352E0000 	    _ADR SUBB 
 672 11e8 E10C0000 	    _ADR CURSOR_COL
 673 11ec 6D2C0000 	    _ADR AT 
 674 11f0 250D0000 	    _ADR COLX 
 675 11f4 252F0000 	    _ADR TWOSL  
 676 11f8 252E0000 	    _ADR PLUS
 677 11fc 550D0000 	    _ADR VIDBUFF
 678 1200 252E0000 	    _ADR PLUS
 679 1204 E72B0000 	    _DOLIT 2
 679      02000000 
 680 120c DD2C0000 	    _ADR TOR  
 681 1210 992F0000 	1:  _ADR DDUP 
 682 1214 792C0000 	    _ADR CSTOR 
 683 1218 812E0000 	    _ADR ONEP 
 684 121c 092C0000 	    _DONXT 1b
 684      10120000 
 685 1224 712F0000 	2:  _ADR DDROP // drop 3 elements 
 686 1228 272A0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 122c A8110000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 123c 504700BF 	    _NEST 
 694 1240 AD0C0000 	    _ADR BACKCOLOR 
 695 1244 6D2C0000 	    _ADR AT 
 696 1248 612D0000 	    _ADR DUPP  
 697 124c E72B0000 	    _DOLIT 4 
 697      04000000 
 698 1254 152E0000 	    _ADR LSHIFT 
 699 1258 B92D0000 	    _ADR ORR 
 700 125c 3B2C0000 	    _BRAN 0b
 700      C0110000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 1264 30120000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 1270 352E     	    cmp TOS,#53
 706 1272 01D4     	    bmi 1f 
 707 1274 4FF03406 	    mov TOS,#52
 708 1278 C4F89460 	1:  str TOS,[UP,#COL]
 709 127c 57F8046B 	    _POP
 710 1280 192E     	    cmp TOS,#25
 711 1282 01D4     	    bmi 1f 
ARM GAS  forth.s 			page 48


 712 1284 4FF01806 	    mov TOS,#24 
 713 1288 C4F89060 	1:  str TOS,[UP,#ROW]
 714 128c 57F8046B 	    _POP 
 715 1290 01F0C6BB 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 1294 68120000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 12a0 504700BF 	    _NEST 
 721 12a4 E9360000 	    _ADR PAD 
 722 12a8 612D0000 	    _ADR DUPP 
 723 12ac 812E0000 	    _ADR ONEP 
 724 12b0 E72B0000 	    _DOLIT 53
 724      35000000 
 725 12b8 71440000 	    _ADR ACCEP
 726 12bc 712D0000 	    _ADR SWAP 
 727 12c0 512D0000 	    _ADR DROP 
 728 12c4 852D0000 	    _ADR OVER 
 729 12c8 792C0000 	    _ADR CSTOR  
 730 12cc 272A0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 0000 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 0008 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 0010 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 0018 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 0020 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 0028 C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 0030 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 0038 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 0040 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 0048 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 0050 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 0058 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 0060 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 0068 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
ARM GAS  forth.s 			page 49


 752      00000000 
 753 0070 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
 754 0078 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 0080 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 0088 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 0090 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 0098 F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 00a0 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 00a8 F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 00b0 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 00b8 F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 00c0 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 00c8 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 00d0 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 00d8 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 00e0 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 00e8 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 00f0 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 00f8 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 0100 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 0108 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 0110 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 0118 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 0120 F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 0128 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 0130 F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 0138 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 0140 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 0148 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
ARM GAS  forth.s 			page 50


 781 0150 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 0158 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
 782      A0908800 
 783 0160 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 0168 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 0170 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 0178 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 0180 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 0188 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 0190 F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 0198 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 01a0 F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 01a8 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 01b0 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 01b8 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 01c0 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 01c8 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 01d0 F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 01d8 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 01e0 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 01e8 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 01f0 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 01f8 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 0200 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 0208 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 0210 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 0218 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 0220 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 0228 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 0230 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
ARM GAS  forth.s 			page 51


 809      40404000 
 810 0238 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
 811 0240 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 0248 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 0250 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 0258 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 0260 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 0268 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 0270 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 0278 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 0280 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 0288 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 0290 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 0298 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 02a0 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 02a8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 02b0 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 02b8 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 02c0 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 02c8 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 02d0 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 02d8 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 02e0 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 02e8 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 02f0 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 02f8 FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 0300 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 0308 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 0310 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
ARM GAS  forth.s 			page 52


 838 0318 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 0320 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
ARM GAS  forth.s 			page 53


  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
ARM GAS  forth.s 			page 54


  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
ARM GAS  forth.s 			page 55


 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 12dc 1C61     	   .byte 0x1c,'a' 
   9 12de 3262     	   .byte 0x32,'b'
  10 12e0 2163     	   .byte 0x21,'c'
  11 12e2 2364     	   .byte 0x23,'d'
  12 12e4 2465     	   .byte 0x24,'e'
  13 12e6 2B66     	   .byte 0x2b,'f'
  14 12e8 3467     	   .byte 0x34,'g'
  15 12ea 3368     	   .byte 0x33,'h'
  16 12ec 4369     	   .byte 0x43,'i'
  17 12ee 3B6A     	   .byte 0x3B,'j'
  18 12f0 426B     	   .byte 0x42,'k'
  19 12f2 4B6C     	   .byte 0x4b,'l'
  20 12f4 3A6D     	   .byte 0x3a,'m'
  21 12f6 316E     	   .byte 0x31,'n'
  22 12f8 446F     	   .byte 0x44,'o'
  23 12fa 4D70     	   .byte 0x4d,'p'
  24 12fc 1571     	   .byte 0x15,'q'
  25 12fe 2D72     	   .byte 0x2d,'r'
  26 1300 1B73     	   .byte 0x1b,'s'
  27 1302 2C74     	   .byte 0x2c,'t'
  28 1304 3C75     	   .byte 0x3c,'u'
  29 1306 2A76     	   .byte 0x2a,'v'
  30 1308 1D77     	   .byte 0x1d,'w'
  31 130a 2278     	   .byte 0x22,'x'
  32 130c 3579     	   .byte 0x35,'y'
  33 130e 1A7A     	   .byte 0x1a,'z'
  34 1310 4530     	   .byte 0x45,'0'
  35 1312 1631     	   .byte 0x16,'1'
ARM GAS  forth.s 			page 56


  36 1314 1E32     	   .byte 0x1e,'2'
  37 1316 2633     	   .byte 0x26,'3'
  38 1318 2534     	   .byte 0x25,'4'
  39 131a 2E35     	   .byte 0x2e,'5'
  40 131c 3636     	   .byte 0x36,'6'
  41 131e 3D37     	   .byte 0x3d,'7'
  42 1320 3E38     	   .byte 0x3e,'8'
  43 1322 4639     	   .byte 0x46,'9'
  44 1324 0E60     	   .byte 0x0e,'`'
  45 1326 4E2D     	   .byte 0x4e,'-'
  46 1328 553D     	   .byte 0x55,'='
  47 132a 5D5C     	   .byte 0x5d,'\\'
  48 132c 545B     	   .byte 0x54,'['
  49 132e 5B5D     	   .byte 0x5b,']'
  50 1330 4C3B     	   .byte 0x4c,';'
  51 1332 5227     	   .byte 0x52,'\''
  52 1334 412C     	   .byte 0x41,','
  53 1336 492E     	   .byte 0x49,'.'
  54 1338 7C2A     	   .byte 0x7c,'*'
  55 133a 792B     	   .byte 0x79,'+'
  56 133c 2920     	   .byte 0x29,' '
  57 133e 5A0D     	   .byte SC_ENTER,CRR 
  58 1340 6608     	   .byte SC_BKSP,BKSPP 
  59 1342 0D09     	   .byte SC_TAB,9
  60 1344 761B     	   .byte SC_ESC,27
  61 1346 119E     	   .byte SC_LALT,VK_LALT 
  62 1348 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 134a 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 134c 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 134e 779A     	   .byte SC_NUM,VK_NLOCK 
  66 1350 5800     	   .byte SC_CAPS,0
  67 1352 0580     	   .byte SC_F1,VK_F1
  68 1354 0681     	   .byte SC_F2,VK_F2
  69 1356 0482     	   .byte SC_F3,VK_F3
  70 1358 0C83     	   .byte SC_F4,VK_F4
  71 135a 0384     	   .byte SC_F5,VK_F5
  72 135c 0B85     	   .byte SC_F6,VK_F6
  73 135e 8386     	   .byte SC_F7,VK_F7
  74 1360 0A87     	   .byte SC_F8,VK_F8
  75 1362 0188     	   .byte SC_F9,VK_F9
  76 1364 098A     	   .byte SC_F10,VK_F10
  77 1366 788B     	   .byte SC_F11,VK_F11
  78 1368 078C     	   .byte SC_F12,VK_F12
  79 136a 7030     	   .byte SC_KP0,'0'
  80 136c 6931     	   .byte SC_KP1,'1'
  81 136e 7232     	   .byte SC_KP2,'2'
  82 1370 7A33     	   .byte SC_KP3,'3'
  83 1372 6B34     	   .byte SC_KP4,'4'
  84 1374 7335     	   .byte SC_KP5,'5'
  85 1376 7436     	   .byte SC_KP6,'6'
  86 1378 6C37     	   .byte SC_KP7,'7'
  87 137a 7538     	   .byte SC_KP8,'8'
  88 137c 7D39     	   .byte SC_KP9,'9'
  89 137e 7C2A     	   .byte SC_KPMUL,'*'
  90 1380 4A2F     	   .byte SC_KPDIV,'/'
  91 1382 792B     	   .byte SC_KPPLUS,'+'
  92 1384 7B2D     	   .byte SC_KPMINUS,'-'
ARM GAS  forth.s 			page 57


  93 1386 712E     	   .byte SC_KPDOT,'.'
  94 1388 5A0D     	   .byte SC_KPENTER,'\r'
  95 138a FAFA     	   .byte KBD_ACK,KBD_ACK 
  96 138c AAAA     	   .byte BAT_OK,BAT_OK  
  97 138e 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 1390 6141     	   .byte 'a','A'
 102 1392 6242     	   .byte 'b','B'
 103 1394 6343     	   .byte 'c','C'
 104 1396 6444     	   .byte 'd','D'
 105 1398 6545     	   .byte 'e','E'
 106 139a 6646     	   .byte 'f','F'
 107 139c 6747     	   .byte 'g','G'
 108 139e 6848     	   .byte 'h','H'
 109 13a0 6949     	   .byte 'i','I'
 110 13a2 6A4A     	   .byte 'j','J'
 111 13a4 6B4B     	   .byte 'k','K'
 112 13a6 6C4C     	   .byte 'l','L'
 113 13a8 6D4D     	   .byte 'm','M'
 114 13aa 6E4E     	   .byte 'n','N'
 115 13ac 6F4F     	   .byte 'o','O'
 116 13ae 7050     	   .byte 'p','P'
 117 13b0 7151     	   .byte 'q','Q'
 118 13b2 7252     	   .byte 'r','R'
 119 13b4 7353     	   .byte 's','S'
 120 13b6 7454     	   .byte 't','T'
 121 13b8 7555     	   .byte 'u','U'
 122 13ba 7656     	   .byte 'v','V'
 123 13bc 7757     	   .byte 'w','W'
 124 13be 7858     	   .byte 'x','X'
 125 13c0 7959     	   .byte 'y','Y'
 126 13c2 7A5A     	   .byte 'z','Z'
 127 13c4 3121     	   .byte '1','!'
 128 13c6 3240     	   .byte '2','@'
 129 13c8 3323     	   .byte '3','#'
 130 13ca 3424     	   .byte '4','$'
 131 13cc 3525     	   .byte '5','%'
 132 13ce 365E     	   .byte '6','^'
 133 13d0 3726     	   .byte '7','&'
 134 13d2 382A     	   .byte '8','*'
 135 13d4 3928     	   .byte '9','('
 136 13d6 3029     	   .byte '0',')'
 137 13d8 2D5F     	   .byte '-','_'
 138 13da 3D2B     	   .byte '=','+'
 139 13dc 607E     	   .byte '`','~'
 140 13de 2722     	   .byte '\'','"'
 141 13e0 2C3C     	   .byte ',','<'
 142 13e2 2E3E     	   .byte '.','>'
 143 13e4 2F3F     	   .byte '/','?'
 144 13e6 5C7C     	   .byte '\\','|'
 145 13e8 3B3A     	   .byte ';',':'
 146 13ea 5B7B     	   .byte '[','{'
 147 13ec 5D7D     	   .byte ']','}'
 148 13ee 0000     	   .byte 0,0
 149              	   
ARM GAS  forth.s 			page 58


 150              	//alt char keys 
 151              	altchar:
 152 13f0 315C     	   .byte '1','\\'
 153 13f2 3240     	   .byte '2','@'
 154 13f4 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 13f6 363F     	   .byte '6','?'
 158 13f8 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 13fa 397B     	   .byte '9','{'
 161 13fc 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 13fe 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 1400 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 1402 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 1404 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 1406 11A3     	    .byte SC_RALT,VK_RALT
 172 1408 2F97     	    .byte SC_APPS,VK_APPS
 173 140a 758D     	    .byte SC_UP,VK_UP
 174 140c 728E     	    .byte SC_DOWN,VK_DOWN
 175 140e 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 1410 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 1412 7095     	    .byte SC_INSERT,VK_INSERT
 178 1414 6C91     	    .byte SC_HOME,VK_HOME
 179 1416 7D93     	    .byte SC_PGUP,VK_PGUP
 180 1418 7A94     	    .byte SC_PGDN,VK_PGDN
 181 141a 717F     	    .byte SC_DEL,VK_DELETE
 182 141c 6992     	    .byte SC_END,VK_END
 183 141e 4A2F     	    .byte SC_KPDIV,'/'
 184 1420 5A0D     	    .byte SC_KPENTER,'\r'
 185 1422 1200     	    .byte 0x12,0
 186 1424 7C00     	    .byte 0x7c,0
 187 1426 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 1428 6303     	   .byte 'c', VK_CTRL_C 
 193 142a 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 142c 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 142e 27A2     	   .byte SC_RGUI,VK_RGUI
 196 1430 11A3     	   .byte SC_RALT,VK_RALT
 197 1432 2F97     	   .byte SC_APPS,VK_APPS
 198 1434 7095     	   .byte SC_INSERT,VK_INSERT
 199 1436 6C91     	   .byte SC_HOME,VK_HOME
 200 1438 7D93     	   .byte SC_PGUP,VK_PGUP
 201 143a 717F     	   .byte SC_DEL,VK_DELETE
 202 143c 6992     	   .byte SC_END,VK_END
 203 143e 7A94     	   .byte SC_PGDN,VK_PGDN
 204 1440 758D     	   .byte SC_UP,VK_UP
 205 1442 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 1444 728E     	   .byte SC_DOWN,VK_DOWN
ARM GAS  forth.s 			page 59


 207 1446 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 1448 4A2F     	   .byte SC_KPDIV,'/'
 209 144a 5A0D     	   .byte SC_ENTER,VK_ENTER
 210 144c 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 144e 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 1450 119E     	   .byte SC_LALT,VK_LALT
 213 1452 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 1454 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 1456 761B     	   .byte SC_ESC,VK_ESC
 216 1458 779A     	   .byte SC_NUM,VK_NLOCK
 217 145a 589B     	   .byte SC_CAPS,VK_CLOCK
 218 145c 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 145e 00BF     	    _GBL_FUNC kbd_isr 
  79 1460 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
ARM GAS  forth.s 			page 60


  80 1468 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 146c 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 146e 4FF40063 	    _MOV32 r3,KBD_GPIO
  82      C4F20203 
  83 1476 D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
  84 147a 10F0020F 	    tst r0,#KBD_TX 
  85 147e 40F08480 	    bne send_bit  
  86 1482 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 1484 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 1488 01F10102 	    add r2,r1,#1
  89 148c 84F87420 	    strb r2,[UP,#KBD_BITCNTR]
  90 1490 0029     	    cmp r1,#0
  91 1492 15D0     	    beq start_bit 
  92 1494 0929     	    cmp r1,#9 
  93 1496 25D0     	    beq parity_bit 
  94 1498 0A29     	    cmp r1,#10 
  95 149a 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 149c 94F87520 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 14a0 4FEA5202 	    lsr r2,#1 
  99 14a4 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 14a8 07D0     	    beq 1f 
 101 14aa 42F08002 	    orr r2,#(1<<7)
 102 14ae 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 103 14b2 00F10100 	    add r0,#1 
 104 14b6 84F87700 	    strb r0,[UP,#KBD_PARITY]
 105 14ba 84F87520 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 14be 63E0     	    b 9f         
 107              	start_bit:
 108 14c0 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 14c4 60D1     	    bne 9f // not a start bit 
 110 14c6 80EA0000 	    eor r0,r0 
 111 14ca 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 112 14ce 84F87700 	    strb r0,[UP,#KBD_PARITY]
 113 14d2 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 114 14d6 6FF00101 	    mvn r1,#1
 115 14da 00EA0100 	    and r0,r1 // clear error flag 
 116 14de 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 117 14e2 51E0     	    b 9f 
 118              	parity_bit:
 119 14e4 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 120 14e8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 14ec 4CD0     	    beq 9f  
 122 14ee 01F10101 	    add r1,#1 
 123 14f2 84F87710 	    strb r1,[UP,#KBD_PARITY]  
 124 14f6 47E0     	    b 9f      
 125              	stop_bit:
 126 14f8 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 14fc 40D0     	    beq 8f // error stop bit expected 
 128 14fe 94F87710 	    ldrb r1,[UP,#KBD_PARITY]
 129 1502 11F0010F 	    tst r1,#1 
 130 1506 3BD0     	    beq 8f // error parity
 131 1508 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 150c 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 133 1510 E028     	    cmp r0,#XT_KEY
 134 1512 04D1     	    bne 1f
 135 1514 41F04001 	    orr r1,#KBD_F_XT
ARM GAS  forth.s 			page 61


 136 1518 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 137 151c 30E0     	    b 8f  
 138 151e 11F0800F 	1:  tst r1,#KBD_F_REL
 139 1522 14D0     	    beq store_code
 140 1524 5828     	    cmp r0,#SC_CAPS
 141 1526 04D1     	    bne 1f
 142 1528 81F00401 	    eor r1,#KBD_F_CAPS
 143 152c 41F00101 	    orr r1,#KBD_F_CTGL 
 144 1530 06E0     	    b 2f 
 145 1532 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 153c 94F87610 	    ldrb r1,[UP,#KBD_FLAGS]
 147 1540 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 1544 01EA0201 	    and r1,r2
 149 1548 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 150 154c 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 154e F028     	    cmp r0,#KEY_REL
 154 1550 04D1     	    bne 1f
 155              	// set release flags 
 156 1552 41F08001 	    orr r1,#KBD_F_REL 
 157 1556 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 158 155a 11E0     	    b 8f     
 159 155c 0146     	1:  mov r1,r0 
 160 155e 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 1568 0AD1     	    bne 8f // was async key 
 162 156a D4F88C00 	    ldr r0,[UP,#KBD_QTAIL]
 163 156e 04F17802 	    add r2,UP,#KBD_QUEUE
 164 1572 1154     	    strb r1,[r2,r0]
 165 1574 00F10100 	    add r0,#1
 166 1578 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 157c 84F88C00 	    strb r0,[UP,#KBD_QTAIL]
 168 1580 80EA0000 	8:  eor r0,r0 
 169 1584 A4F87400 	    strh r0,[UP,#KBD_BITCNTR]
 170 1588 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 158a 94F87410 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 158e 01F10100 	    add r0,r1,#1
 182 1592 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 183 1596 94F87500 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 159a 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 159e 0829     	1:  cmp r1,#8 
 187 15a0 15D0     	    beq send_parity 
 188 15a2 0929     	    cmp r1,#9 
ARM GAS  forth.s 			page 62


 189 15a4 1CD0     	    beq send_stop
 190 15a6 0A29     	    cmp r1,#10
 191 15a8 1FD0     	    beq rx_ack_bit  
 192              	// data bits
 193 15aa 10F0010F 	    tst r0,#1
 194 15ae 4FEA5000 	    lsr r0,#1
 195 15b2 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 196 15b6 02D1     	    bne 1f 
 197 15b8 4FEA0242 	    lsl r2,#16
 198 15bc 05E0     	    b 2f  
 199 15be 94F87700 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 15c2 00F10100 	    add r0,#1 
 201 15c6 84F87700 	    strb r0,[UP,#KBD_PARITY]
 202 15ca 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 15cc 1CE0     	    b 9f 
 204              	send_parity:
 205 15ce 94F87700 	    ldrb r0,[UP,#KBD_PARITY]
 206 15d2 10F0010F 	    tst r0,#1
 207 15d6 01D0     	    beq 1f 
 208 15d8 4FEA0242 	    lsl r2,#16
 209 15dc 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 15de 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 15e0 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 15e2 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 15e6 1960     	    str r1,[r3,#GPIO_MODER]
 217 15e8 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 15ea 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
 220 15ee 6FF00201 	    mvn r1,#KBD_TX 
 221 15f2 00EA0100 	    and r0,r1 
 222 15f6 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 15f8 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 15fc 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 225 1600 80EA0000 	    eor r0,r0 
 226 1604 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 227 1608 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 160a 02B4     	    push {r1}
 238 160c DFF86414 	    ldr r1,=async_keys
 239 1610 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 161a 02BC     	    pop {r1}
 241 161c 7047     	    _RET 
 242              	
 243              	
ARM GAS  forth.s 			page 63


 244              	/***************************
 245              	 check if async key 
 246              	 and process it
 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 161e 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 1628 FF28     	    cmp r0,#255
 256 162a 01D1     	    bne set_async_key 
 257 162c 0020     	    movs r0,#0 
 258 162e 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 1630 06B4     	    push {r1,r2}
 262 1632 94F87620 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 1636 DFF84014 	    ldr r1,=async_jump 
 264 163a D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 163e 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 1642 04E0     	    b set_reset
 268              	ctrl_key:
 269 1644 4FF01000 	    mov r0,#KBD_F_CTRL
 270 1648 01E0     	    b set_reset 
 271              	alt_key:
 272 164a 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 164e 12F0800F 	    tst r2,#KBD_F_REL 
 275 1652 04D0     	    beq 1f 
 276 1654 6FEA0000 	    mvn r0,r0
 277 1658 02EA0002 	    and r2,r0
 278 165c 01E0     	    b 2f
 279 165e 42EA0002 	1:  orr r2,r0 
 280 1662 84F87620 	2:  strb r2,[UP,#KBD_FLAGS]
 281 1666 5FF0FF30 	    movs r0,#-1
 282 166a 06BC     	9:  pop {r1,r2}
 283 166c 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 166e 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 1670 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 1672 1401     	    .byte SC_LCTRL,1  // left control 
 290 1674 1401     	    .byte SC_RCTRL,1  // right control 
 291 1676 1102     	    .byte SC_LALT,2  // left alt 
 292 1678 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 167a 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 167c 00       	    .byte 0 // shift  key 
 297 167d 03       	    .byte (ctrl_key-shift_key)/2
 298 167e 06       	    .byte (alt_key-shift_key)/2
ARM GAS  forth.s 			page 64


 299              	
 300              	
 301              	/**********************************
 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 167f 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 1680 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 1688 1846     	    mov r0,r3 
 311 168a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 168e 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 1692 00B5FFF7 	    _CALL gpio_config
 313      18F85DF8 
 313      04EB
 314 169c 1846     	    mov r0,r3 
 315 169e 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 16a2 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 16a6 00B5FFF7 	    _CALL gpio_config
 317      0EF85DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 16b0 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 16b8 4FF40050 	    mov r0,#(2<<12)
 321 16bc 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 16be 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 16c6 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 16ca 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 16cc D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 16ce 80EA0000 	   eor r0,r0 
 328 16d2 C4F88800 	   str r0,[UP,#KBD_QHEAD]
 329 16d6 C4F88C00 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 16da 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 16de 4FF00101 	   mov r1,#1 
 333 16e2 00B5FEF7 	   _CALL nvic_set_priority
 333      94FF5DF8 
 333      04EB
 334 16ec 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 16f0 00B5FEF7 	   _CALL nvic_enable_irq 
 335      A6FF5DF8 
 335      04EB
 336 16fa 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 16fc 98120000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 170c 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 65


 342 1710 94F87660 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 1714 06F0FC06 	    and TOS,#0xFC  
 344 1718 01F082B9 	    _NEXT 
 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 171c 0EB4     	    push {T1,T2,T3}
 352 171e 80EA0000 	    eor T0,T0  
 353 1722 04F17803 	    add T3,UP,#KBD_QUEUE
 354 1726 D4F88810 	    ldr T1,[UP,#KBD_QHEAD]
 355 172a D4F88C20 	    ldr T2,[UP,#KBD_QTAIL]
 356 172e 9142     	    cmp T1,T2 
 357 1730 06D0     	    beq 2f  
 358 1732 585C     	    ldrb T0,[T3,T1]
 359 1734 01F10101 	    add T1,#1 
 360 1738 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 173c C4F88810 	    str T1,[UP,#KBD_QHEAD]
 362 1740 0EBC     	2:  pop {T1,T2,T3}
 363 1742 7047     	    _RET 
 364              	
 365              	wait_code:
 366 1744 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 174e 0000     	    movs T0,T0
 368 1750 F8D0     	    beq wait_code  
 369 1752 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 1754 04B4     	    push {T2}
 380 1756 11F8012B 	1:  ldrb T2,[T1],#1
 381 175a 22B1     	    cbz T2,2f 
 382 175c 8242     	    cmp T2,T0
 383 175e 02D0     	    beq 2f 
 384 1760 01F10101 	    add T1,#1 
 385 1764 F7E7     	    b 1b 
 386 1766 0878     	2:  ldrb T0,[T1]
 387 1768 0000     	    movs T0,T0 // set/reset zero flag 
 388 176a 04BC     	9:  pop {T2}
 389 176c 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 176e 00170000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
ARM GAS  forth.s 			page 66


 396      08505332 
 396      2D4B4559 
 396      3F00
 397 177c 47F8046D 	    _PUSH 
 398 1780 86EA0606 	    eor TOS,TOS 
 399 1784 BD49     	    ldr T1,=sc_ascii // translation table
 400 1786 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 401 178a 4FF04002 	    mov T2,#KBD_F_XT 
 402 178e 1042     	    tst T0,T2
 403 1790 00D0     	    beq 1f
 404 1792 BB49     	    ldr T1,=extended // extended code translation
 405 1794 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 179e 98B1     	    cbz T0,inkey_exit
 407 17a0 E128     	    cmp T0,#XT2_KEY // pause 
 408 17a2 13D0     	    beq pause_key
 409 17a4 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 17ae 0646     	    mov TOS,T0
 411 17b0 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 17ba 032E     	    cmp TOS,#VK_CTRL_C 
 413 17bc 3EF436AE 	    beq user_reboot 
 414 17c0 47F8046D 	    _PUSH 
 415 17c4 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 17c8 01F02AB9 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 17cc 4FF00701 	    mov T1,#7 
 420 17d0 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 17da 0139     	    subs T1,#1
 422 17dc F8D1     	    bne 1b 
 423 17de 01F01FB9 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 17e2 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 429 17e6 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 17ea 06D1     	    bne shift_down 
 431 17ec 10F0200F 	    tst T0,#KBD_F_ALT  
 432 17f0 06D1     	    bne altchar_down 
 433 17f2 10F0100F 	    tst T0,#KBD_F_CTRL
 434 17f6 06D1     	    bne ctrl_down 
 435 17f8 0DE0     	    b 9f 
 436              	shift_down:
 437 17fa 3046     	    mov T0,TOS 
 438 17fc A149     	    ldr T1,=shifted 
 439 17fe 04E0     	    b 8f 
 440              	altchar_down:
 441 1800 3046     	    mov T0,TOS 
 442 1802 A149     	    ldr T1,=altchar
ARM GAS  forth.s 			page 67


 443 1804 01E0     	    b 8f
 444              	ctrl_down:
 445 1806 3046     	    mov T0,TOS 
 446 1808 A049     	    ldr T1,=controls 
 447 180a 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 1814 0646     	    mov TOS,T0
 449 1816 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 1820 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 1822 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 454 1826 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 182a 0BD0     	    beq 9f 
 456 182c 412E     	    cmp TOS,#'A'
 457 182e 09D4     	    bmi 9f 
 458 1830 5B2E     	    cmp TOS,#'Z'+1 
 459 1832 03D4     	    bmi 3f 
 460 1834 612E     	    cmp TOS,#'a'
 461 1836 05D4     	    bmi 9f 
 462 1838 7B2E     	    cmp TOS,#'z'+1
 463 183a 03D5     	    bpl 9f 
 464 183c 4FF02000 	3:  mov T0,#(1<<5)
 465 1840 86EA0006 	    eor TOS,T0 
 466 1844 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 1846 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 1848 A06E     	1:  ldr r0,[UP,#VID_STATE]
 483 184a 0128     	    cmp r0,ST_PREVID 
 484 184c FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 184e 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 1852 00B5FEF7 	    _CALL nvic_disable_irq
 487      0AFF5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 185c 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 1864 1846     	    mov r0,r3 
 491 1866 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 186a 4FF01102 	    mov r2,#OUTPUT_OD
ARM GAS  forth.s 			page 68


 493 186e 00B5FEF7 	    _CALL gpio_config 
 493      2AFF5DF8 
 493      04EB
 494 1878 1846     	    mov r0,r3 
 495 187a 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 187e 82EA0202 	    eor r2,r2 
 497 1882 00B5FEF7 	    _CALL gpio_out 
 497      76FF5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 188c 4FF4E150 	    mov r0,#150*48
 500 1890 0138     	1:  subs r0,#1 
 501 1892 FDD1     	    bne 1b
 502 1894 01BC     	    pop {r0}
 503 1896 84F87500 	    strb r0,[UP,#KBD_SHIFTER]
 504 189a D4F87600 	    ldr r0,[UP,#KBD_FLAGS]
 505 189e 40F00200 	    orr r0,#KBD_TX 
 506 18a2 84F87600 	    strb r0,[UP,#KBD_FLAGS]
 507 18a6 80EA0000 	    eor r0,r0 
 508 18aa 84F87400 	    strb r0,[UP,#KBD_BITCNTR]
 509 18ae 84F87700 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 18b2 1846     	    mov r0,r3 
 513 18b4 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 18b8 4FF01102 	    mov r2,#OUTPUT_OD 
 515 18bc 00B5FEF7 	    _CALL gpio_config 
 515      03FF5DF8 
 515      04EB
 516 18c6 1846     	    mov r0,r3 
 517 18c8 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 18cc 82EA0202 	    eor r2,r2 
 519 18d0 00B5FEF7 	    _CALL gpio_out
 519      4FFF5DF8 
 519      04EB
 520              	// release clock line 
 521 18da 1846     	    mov r0,r3 
 522 18dc 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 18e0 4FF00002 	    mov r2,#INPUT_FLOAT
 524 18e4 00B5FEF7 	    _CALL gpio_config
 524      EFFE5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 18ee 4FF00A00 	    mov r0,#10
 528 18f2 E060     	    str r0,[UP,#CD_TIMER]
 529 18f4 E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 18f6 20B1     	    cbz r0, 4f 
 531 18f8 94F87600 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 18fc 10F0020F 	    tst r0,#KBD_TX
 533 1900 F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 1902 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 1906 00B5FEF7 	    _CALL nvic_enable_irq
 536      9BFE5DF8 
 536      04EB
 537 1910 94F87600 	    ldrb r0,[UP,#KBD_FLAGS]
ARM GAS  forth.s 			page 69


 538 1914 20F00201 	    bic r1,r0,#KBD_TX
 539 1918 84F87610 	    strb r1,[UP,#KBD_FLAGS]
 540 191c 00F00200 	    and r0,#KBD_TX
 541 1920 48B1     	    cbz r0, 5f
 542 1922 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 1924 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 1928 1960     	    str r1,[r3,#GPIO_MODER]
 545 192a 80EA0000 	    eor r0,r0 
 546 192e 84F87400 	    strb r0,[UP,#KBD_BITCNTR]     
 547 1932 6FEA0000 	    mvn r0,r0   
 548 1936 0EBC     	5:  pop {r1,r2,r3}
 549 1938 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 193a 80EA0000 	    eor T0,T0 
 555 193e C4F88800 	    str T0,[UP,#KBD_QHEAD]
 556 1942 C4F88C00 	    str T0,[UP,#KBD_QTAIL]
 557 1946 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 558 194a 6FF00301 	    mvn T1,#3
 559 194e 00EA0100 	    and T0,T1 
 560 1952 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 561 1956 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 1958 72170000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 1964 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 1968 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 1972 B8B9     	    cbnz T0,3f // keyboard not dectected
 571 1974 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 197e 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 1988 FE28     	    cmp r0,KBD_CMD_RESEND
 574 198a EBD0     	    beq 1b 
 575 198c 4FF4FA70 	    mov T0,#500 
 576 1990 E060     	    str T0,[UP,#CD_TIMER]
 577 1992 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 199c 10B9     	    cbnz T0,3f
 579 199e E068     	    ldr T0,[UP,#CD_TIMER]
 580 19a0 0028     	    cmp T0,#0 
 581 19a2 F6D1     	    bne 2b 
 582 19a4 47F8046D 	3:  _PUSH 
 583 19a8 0646     	    mov TOS,T0  
 584 19aa 01F039B8 	    _NEXT 
ARM GAS  forth.s 			page 70


 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 19ae 5C190000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 19bc 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 19c6 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 19ca 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 19d4 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 19de FE28     	    cmp T0,#KBD_CMD_RESEND
 597 19e0 ECD0     	    beq 1b
 598 19e2 FA28     	    cmp T0,#KBD_ACK  
 599 19e4 F6D1     	    bne 2b 
 600 19e6 3046     	2:  mov T0,TOS 
 601 19e8 00F00700 	    and T0,#7 
 602 19ec 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 19f6 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 1a00 FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 1a02 F0D0     	    beq 2b
 606 1a04 FA28     	    cmp T0,#KBD_ACK 
 607 1a06 F6D1     	    bne 3b  
 608 1a08 57F8046B 	    _POP 
 609 1a0c 01F008B8 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 1a10 B2190000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 1a20 94F87600 	    ldrb T0,[UP,#KBD_FLAGS]
 618 1a24 10F0010F 	    tst T0,#1
 619 1a28 01D1     	    bne 1f 
 620 1a2a 00F0F9BF 	    _NEXT 
 621 1a2e 47F8046D 	1: _PUSH 
 622 1a32 6FF00101 	    mvn T1,#1 
 623 1a36 00EA0100 	    and T0,T1 
 624 1a3a 84F87600 	    strb T0,[UP,#KBD_FLAGS]
 625 1a3e 00F00406 	    and TOS,T0,#KBD_F_CAPS   
ARM GAS  forth.s 			page 71


 626 1a42 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 1a4a 141A0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 1a58 504700BF 	    _NEST
 635 1a5c 211A0000 	1:  _ADR CAPS_LED  
 636 1a60 7D170000 	    _ADR PS2_QKEY 
 637 1a64 352F0000 	    _ADR QDUP 
 638 1a68 272C0000 	    _QBRAN 1b  
 638      5C1A0000 
 639 1a70 272A0000 	    _UNNEST 
 640 1a74 6E160000 	
 640      7C160000 
 640      DC120000 
 640      00140000 
 640      90130000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
ARM GAS  forth.s 			page 72


  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 1a94 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 1a9c 0346     	    mov r3,r0 
  44 1a9e 4FF00401 	    mov r1,#PIN_F_SC 
  45 1aa2 4FF00102 	    mov r2,#OUTPUT_PP
  46 1aa6 00B5FEF7 	    _CALL gpio_config 
  46      0EFE5DF8 
  46      04EB
  47 1ab0 1846     	    mov r0,r3 
  48 1ab2 4FF00401 	    mov r1,#PIN_F_SC  
  49 1ab6 4FF00102 	    MOV r2,#1
  50 1aba 00B5FEF7 	    _CALL gpio_out 
  50      5AFE5DF8 
  50      04EB
  51 1ac4 1846     	    mov r0,r3 
  52 1ac6 4FF00501 	    mov r1,#PIN_SCK  
  53 1aca 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 1ace 00B5FEF7 	    _CALL gpio_config 
  54      FAFD5DF8 
  54      04EB
  55 1ad8 1846     	    mov r0,r3 
  56 1ada 4FF00701 	    mov r1,#PIN_MOSI 
  57 1ade 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 1ae2 00B5FEF7 	    _CALL gpio_config 
  58      F0FD5DF8 
  58      04EB
  59 1aec 1846     	    mov r0,r3
  60 1aee 4FF00601 	    mov r1,#PIN_MISO
  61 1af2 4FF00202 	    mov r2,#INPUT_AFO  
  62 1af6 00B5FEF7 	    _CALL gpio_config
  62      E6FD5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 1b00 4CF6AA40 	    mov r0,#0xCCAA
  65 1b04 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 1b06 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 1b0e 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 1b10 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 1b14 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 1b16 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 1b1e 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 1b22 0180     	    strh r1,[r0,#SPI_CR1]
  73 1b24 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 1b26 80EA0000 	    eor r0,r0 
  75 1b2a C5F25050 	    movt r0,#0x5550 
  76 1b2e 40EA0100 	    orr r0,r1 
  77 1b32 1862     	    str r0,[r3,#GPIO_AFRL]
ARM GAS  forth.s 			page 73


  78 1b34 7047     	    _RET 
  79              	
  80              	
  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 1b36 4E1A0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 1b44 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 1b4c 4FF00401 	    mov r1,#PIN_F_SC 
  88 1b50 4FF00002 	    mov r2,#0 
  89 1b54 00B5FEF7 	    _CALL gpio_out 
  89      0DFE5DF8 
  89      04EB
  90 1b5e 00F05FBF 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 1b62 3A1B0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 1b70 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 1b78 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 1b7a 11F0800F 	    tst T1,(1<<7) // BSY 
 101 1b7e FBD1     	    bne 1b 
 102 1b80 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 1b88 4FF00401 	    mov r1,#PIN_F_SC 
 104 1b8c 4FF00102 	    mov r2,#1 
 105 1b90 00B5FEF7 	    _CALL gpio_out 
 105      EFFD5DF8 
 105      04EB
 106 1b9a 00F041BF 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 1b9e 661B0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 1bac 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 1bb4 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 1bb6 11F0020F 	    tst T1,#(1<<1) //TXE
 117 1bba FBD0     	    beq 0b 
ARM GAS  forth.s 			page 74


 118 1bbc 6FF00001 	    mvn T1,#0 
 119 1bc0 0173     	    strb T1,[T0,#SPI_DR]
 120 1bc2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 121 1bc4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 1bc8 FBD0     	    beq 1b     
 123              	2:  
 124 1bca 47F8046D 	    _PUSH 
 125 1bce 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 1bd0 00F026BF 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 1bd4 A21B0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 1be0 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 1be8 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 1bea 11F0020F 	    tst T1,#(1<<1) //TXE
 137 1bee FBD0     	    beq 0b 
 138 1bf0 0673     	    strb TOS,[T0,#SPI_DR]
 139 1bf2 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 1bf4 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 1bf8 FBD0     	    beq 1b 
 142 1bfa 8189     	    ldrh T1,[T0,#SPI_DR]
 143 1bfc 57F8046B 	    _POP 
 144 1c00 00F00EBF 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 1c04 D81B0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 1c10 504700BF 	    _NEST 
 153 1c14 451B0000 	    _ADR CHIP_SEL 
 154 1c18 E72B0000 	    _DOLIT 4
 154      04000000 
 155 1c20 E11B0000 	    _ADR WR_BYTE
 156 1c24 711B0000 	    _ADR CHIP_DSEL
 157 1c28 272A0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 1c2c 081C0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 1c38 504700BF 	    _NEST 
 165 1c3c 451B0000 	    _ADR CHIP_SEL 
 166 1c40 E72B0000 	    _DOLIT 6 
ARM GAS  forth.s 			page 75


 166      06000000 
 167 1c48 E11B0000 	    _ADR WR_BYTE 
 168 1c4c 711B0000 	    _ADR CHIP_DSEL 
 169 1c50 272A0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 1c54 301C0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 1c60 504700BF 	    _NEST
 177 1c64 451B0000 	    _ADR CHIP_SEL  
 178 1c68 E72B0000 	    _DOLIT sr_cmd 
 178      881C0000 
 179 1c70 252E0000 	    _ADR PLUS 
 180 1c74 8D2C0000 	    _ADR CAT
 181 1c78 E11B0000 	    _ADR WR_BYTE
 182 1c7c AD1B0000 	    _ADR RD_BYTE
 183 1c80 711B0000 	    _ADR CHIP_DSEL  
 184 1c84 272A0000 	    _UNNEST 
 185 1c88 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 1c8b 581C0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 1c98 504700BF 	    _NEST 
 193 1c9c 612D0000 	    _ADR DUPP 
 194 1ca0 E72B0000 	    _DOLIT 16
 194      10000000 
 195 1ca8 FD2D0000 	    _ADR RSHIFT 
 196 1cac E11B0000 	    _ADR WR_BYTE 
 197 1cb0 612D0000 	    _ADR DUPP
 198 1cb4 E72B0000 	    _DOLIT 8 
 198      08000000 
 199 1cbc FD2D0000 	    _ADR RSHIFT 
 200 1cc0 E11B0000 	    _ADR WR_BYTE 
 201 1cc4 E11B0000 	    _ADR WR_BYTE 
 202 1cc8 272A0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 1ccc 8F1C0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 1cdc 504700BF 	    _NEST 
 210 1ce0 E72B0000 	1:  _DOLIT 0 
 210      00000000 
ARM GAS  forth.s 			page 76


 211 1ce8 611C0000 	    _ADR RD_SR 
 212 1cec E72B0000 	    _DOLIT 3 
 212      03000000 
 213 1cf4 A52D0000 	    _ADR ANDD 
 214 1cf8 272C0000 	    _QBRAN 2f
 214      081D0000 
 215 1d00 3B2C0000 	    _BRAN 1b
 215      E01C0000 
 216 1d08 272A0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 1d0c D01C0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 1d1c 504700BF 	    _NEST 
 225 1d20 391C0000 	    _ADR WR_ENBL
 226 1d24 451B0000 	    _ADR CHIP_SEL 
 227 1d28 E72B0000 	    _DOLIT 0x20 
 227      20000000 
 228 1d30 E11B0000 	    _ADR WR_BYTE 
 229 1d34 991C0000 	    _ADR SEND_ADR
 230 1d38 711B0000 	    _ADR CHIP_DSEL 
 231 1d3c DD1C0000 	    _ADR WAIT_DONE 
 232 1d40 272A0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 1d44 101D0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 1d54 504700BF 	    _NEST 
 240 1d58 391C0000 	    _ADR WR_ENBL 
 241 1d5c 451B0000 	    _ADR CHIP_SEL
 242 1d60 E72B0000 	    _DOLIT 0x60
 242      60000000 
 243 1d68 E72B0000 	    _DOLIT 0xC7 
 243      C7000000 
 244 1d70 E11B0000 	    _ADR WR_BYTE 
 245 1d74 E11B0000 	    _ADR WR_BYTE 
 246 1d78 711B0000 	    _ADR CHIP_DSEL 
 247 1d7c DD1C0000 	    _ADR WAIT_DONE
 248 1d80 272A0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
ARM GAS  forth.s 			page 77


 256 1d84 481D0000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
 257 1d90 504700BF 	    _NEST
 258 1d94 451B0000 	    _ADR CHIP_SEL 
 259 1d98 E72B0000 	    _DOLIT 3 
 259      03000000 
 260 1da0 E11B0000 	    _ADR WR_BYTE 
 261 1da4 991C0000 	    _ADR SEND_ADR
 262 1da8 DD2C0000 	    _ADR TOR   
 263 1dac 3B2C0000 	    _BRAN 2f
 263      C41D0000 
 264 1db4 AD1B0000 	1:  _ADR RD_BYTE
 265 1db8 852D0000 	    _ADR OVER 
 266 1dbc 792C0000 	    _ADR CSTOR
 267 1dc0 812E0000 	    _ADR ONEP 
 268 1dc4 092C0000 	2:  _DONXT 1b
 268      B41D0000 
 269 1dcc 512D0000 	    _ADR DROP 
 270 1dd0 711B0000 	    _ADR CHIP_DSEL 
 271 1dd4 272A0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 1dd8 881D0000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 1de4 504700BF 	    _NEST 
 280 1de8 391C0000 	    _ADR WR_ENBL
 281 1dec 451B0000 	    _ADR CHIP_SEL
 282 1df0 E72B0000 	    _DOLIT 2 
 282      02000000 
 283 1df8 E11B0000 	    _ADR WR_BYTE 
 284 1dfc 991C0000 	    _ADR SEND_ADR
 285 1e00 DD2C0000 	    _ADR TOR
 286 1e04 3B2C0000 	    _BRAN 2f 
 286      241E0000 
 287 1e0c 612D0000 	1:  _ADR DUPP 
 288 1e10 8D2C0000 	    _ADR CAT 
 289 1e14 612D0000 	    _ADR DUPP 
 290 1e18 893E0000 	    _ADR HDOT
 291 1e1c E11B0000 	    _ADR WR_BYTE 
 292 1e20 812E0000 	    _ADR ONEP
 293 1e24 092C0000 	2:  _DONXT 1b 
 293      0C1E0000 
 294 1e2c 512D0000 	    _ADR DROP
 295 1e30 711B0000 	    _ADR CHIP_DSEL
 296 1e34 DD1C0000 	    _ADR WAIT_DONE 
 297 1e38 272A0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
ARM GAS  forth.s 			page 78


 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 1e3c DC1D0000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 1e4c 504700BF 	    _NEST 
 318              	    
 319 1e50 272A0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 1e54 401E0000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 1e64 504700BF 	    _NEST 
 327              	
 328 1e68 272A0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 1e6c 581E0000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 1e74 504700BF 	    _NEST 
 336              	
 337 1e78 272A0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 1e7c 701E0000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 1e88 504700BF 	    _NEST 
 345              	
 346 1e8c 272A0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
ARM GAS  forth.s 			page 79


 351              	******************************/
 352 1e90 801E0000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
 352      440000BF 
 353 1e9c 504700BF 	    _NEST 
 354              	
 355 1ea0 272A0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 1ea4 5F708930 	     .word  0x3089705F // 1e-9
  34 1ea8 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 1eac 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 1eb0 BD378635 	     .word  0x358637BD // 1e-6 
  37 1eb4 ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 1eb8 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 1ebc 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 1ec0 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 1ec4 CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 1ec8 0000803F 	     .word  0x3F800000 // 1.0 
  44 1ecc 00002041 	     .word  0x41200000 // 1e1 
  45 1ed0 0000C842 	     .word  0x42C80000 // 1e2 
  46 1ed4 00007A44 	     .word  0x447A0000 // 1e3 
  47 1ed8 00401C46 	     .word  0x461C4000 // 1e4 
ARM GAS  forth.s 			page 80


  48 1edc 0050C347 	     .word  0x47C35000 // 1e5 
  49 1ee0 00247449 	     .word  0x49742400 // 1e6 
  50 1ee4 8096184B 	     .word  0x4B189680 // 1e7
  51 1ee8 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 1eec 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10 
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 1ef0 941E0000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 1efc 4FEA8606 	    lsl TOS,#2  
  61 1f00 F248     	    ldr t0, =p10 
  62 1f02 0644     	    add TOS,TOS,T0
  63 1f04 3668     	    ldr TOS,[TOS]  
  64 1f06 00F08BBD 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 1f0a DFF8C403 	   ldr.w r0,=CPACR 
  73 1f0e 0168     	   ldr R1,[R0]
  74 1f10 41F47001 	   orr r1,r1,#(0xf<<20)
  75 1f14 0160     	   str r1,[r0]
  76 1f16 BFF34F8F 	   dsb 
  77 1f1a EE48     	   ldr r0,=FPC_BASE_ADR
  78 1f1c 81EA0101 	   eor r1,r1 
  79 1f20 0160     	   str r1,[r0,FPCCR]
  80 1f22 BFF34F8F 	   dsb
  81 1f26 4FF05100 	   mov r0,#FPU_IRQ 
  82 1f2a 00B5FEF7 	   _CALL nvic_enable_irq
  82      89FB5DF8 
  82      04EB
  83 1f34 7047     	   _RET
  84              	
  85              	/***************************
  86              	   FPSCR ( -- u )
  87              	   stack fpu SCR register 
  88              	***************************/
  89 1f36 F41E0000 	   _HEADER FPSCR,5,"FPSCR"
  89      05465053 
  89      4352
  90 1f40 47F8046D 	   _PUSH 
  91 1f44 F1EE106A 	   vmrs TOS,FPSCR
  92 1f48 BFF34F8F 	   dsb  
  93 1f4c 00F068BD 	   _NEXT 
  94              	
  95              	
  96              	/**************************
  97              	   CLR_FPSCR ( mask -- )
  98              	   clear FPSCR bits 
ARM GAS  forth.s 			page 81


  99              	input:
 100              	    mask  and mask 
 101              	************************/
 102 1f50 3A1F0000 	   _HEADER CLR_FPSCR,9,"CLR_FPSCR"
 102      09434C52 
 102      5F465053 
 102      435200BF 
 103 1f60 F1EE100A 	   vmrs T0,FPSCR 
 104 1f64 BFF34F8F 	   dsb 
 105 1f68 06EA0006 	   and TOS,T0  
 106 1f6c E1EE106A 	   vmsr FPSCR,TOS 
 107 1f70 BFF34F8F 	   dsb 
 108 1f74 00F054BD 	   _NEXT 
 109              	
 110              	
 111              	/*******************************
 112              	    >S0 variable ( f# --  )
 113              	    send float to fpu S0 
 114              	**********************************/
 115 1f78 541F0000 	    _HEADER TOS0,3,">S0"
 115      033E5330 
 116 1f80 00EE106A 	    vmov.f32 S0,TOS 
 117 1f84 57F8046B 	    _POP 
 118 1f88 00F04ABD 	    _NEXT  
 119              	
 120              	/*******************************
 121              	    >S1 variable ( f# --  )
 122              	    send float to fpu S1 
 123              	**********************************/
 124 1f8c 7C1F0000 	    _HEADER TOS1,3,">S1"
 124      033E5331 
 125 1f94 00EE906A 	    vmov.f32 S1,TOS 
 126 1f98 57F8046B 	    _POP 
 127 1f9c 00F040BD 	    _NEXT  
 128              	
 129              	/*******************************
 130              	    >S2 variable ( f# --  )
 131              	    send float to fpu S2 
 132              	**********************************/
 133 1fa0 901F0000 	    _HEADER TOS2,3,">S2"
 133      033E5332 
 134 1fa8 01EE106A 	    vmov.f32 S2,TOS 
 135 1fac 57F8046B 	    _POP 
 136 1fb0 00F036BD 	    _NEXT  
 137              	
 138              	/*******************************
 139              	    S0>  ( -- f )
 140              	    push fpu S0 
 141              	*******************************/
 142 1fb4 A41F0000 	    _HEADER S0FROM,3,"S0>"
 142      0353303E 
 143 1fbc 47F8046D 	    _PUSH 
 144 1fc0 10EE106A 	    vmov.f32 TOS,S0 
 145 1fc4 00F02CBD 	    _NEXT 
 146              	
 147              	/*******************************
 148              	    S1>  ( -- f )
ARM GAS  forth.s 			page 82


 149              	    push fpu S1 
 150              	*******************************/
 151 1fc8 B81F0000 	    _HEADER S1FROM,3,"S1>"
 151      0353313E 
 152 1fd0 47F8046D 	    _PUSH 
 153 1fd4 10EE906A 	    vmov.f32 TOS,S1 
 154 1fd8 00F022BD 	    _NEXT 
 155              	
 156              	/*******************************
 157              	    S2>  ( -- f )
 158              	    push fpu S2 
 159              	*******************************/
 160 1fdc CC1F0000 	    _HEADER S2FROM,3,"S2>"
 160      0353323E 
 161 1fe4 47F8046D 	    _PUSH 
 162 1fe8 11EE106A 	    vmov.f32 TOS,S2 
 163 1fec 00F018BD 	    _NEXT 
 164              	
 165              	
 166              	/*******************************
 167              	    F>S ( f -- n )
 168              	    convert float to integer 
 169              	    round to nearest integer 
 170              	*******************************/
 171 1ff0 E01F0000 	    _HEADER FTOS,3,"F>S"
 171      03463E53 
 172 1ff8 00EE106A 	    vmov.f32 S0,TOS
 173 1ffc BDEE400A 	    vcvtr.s32.f32 s0,s0 
 174 2000 10EE106A 	    vmov.f32 TOS,s0 
 175 2004 00F00CBD 	    _NEXT 
 176              	    
 177              	/*******************************
 178              	    TRUNC (f - n )
 179              	    truncate float to integer 
 180              	*******************************/
 181 2008 F41F0000 	    _HEADER TRUNC,5,"TRUNC"
 181      05545255 
 181      4E4300BF 
 182 2014 00EE106A 	    vmov.f32 S0,TOS 
 183 2018 BDEEC00A 	    vcvt.s32.f32 s0,s0 
 184 201c 10EE106A 	    vmov.f32 TOS,S0 
 185 2020 00F0FEBC 	    _NEXT 
 186              	
 187              	/*******************************
 188              	    S>F ( s -- f )
 189              	    convert integer to float 
 190              	*******************************/
 191 2024 0C200000 	    _HEADER STOF,3,"S>F" 
 191      03533E46 
 192 202c 00EE106A 	    vmov.f32 S0,TOS
 193 2030 B8EEC00A 	    vcvt.f32.s32 s0,s0 
 194 2034 10EE106A 	    vmov.f32 TOS,s0 
 195 2038 00F0F2BC 	   _NEXT 
 196              	
 197              	/*******************************
 198              	    F+ ( f1 f2 -- f1+f2 )
 199              	    add 2 floats 
ARM GAS  forth.s 			page 83


 200              	*******************************/
 201 203c 28200000 	    _HEADER FPLUS,2,"F+"
 201      02462B00 
 202 2044 00EE106A 	   vmov.f32 s0,TOS 
 203 2048 57F8046B 	   _POP 
 204 204c 00EE906A 	   vmov.f32 s1,TOS 
 205 2050 30EE200A 	   vadd.f32 s0,s0,s1 
 206 2054 10EE106A 	   vmov.f32 TOS,s0
 207 2058 00F0E2BC 	   _NEXT 
 208              	
 209              	   
 210              	/*******************************
 211              	    F- ( f1 f2 -- f1-f2 )
 212              	    substract 2 float 
 213              	*******************************/
 214 205c 40200000 	    _HEADER FSUBB,2,"F-"
 214      02462D00 
 215 2064 00EE106A 	   vmov.f32 s0,TOS 
 216 2068 57F8046B 	   _POP 
 217 206c 00EE906A 	   vmov.f32 s1,TOS 
 218 2070 30EEC00A 	   vsub.f32 s0,s1,s0 
 219 2074 10EE106A 	   vmov.f32 TOS,s0
 220 2078 00F0D2BC 	   _NEXT 
 221              	
 222              	
 223              	
 224              	/*******************************
 225              	    F* ( f1 f2 -- f1*f2 )
 226              	    multiply 2 float 
 227              	******************************/
 228 207c 60200000 	   _HEADER FSTAR,2,"F*"
 228      02462A00 
 229 2084 00EE106A 	   vmov.f32 s0,TOS 
 230 2088 57F8046B 	   _POP 
 231 208c 00EE906A 	   vmov.f32 s1,TOS 
 232 2090 20EE800A 	   vmul.f32 s0,s1,s0 
 233 2094 10EE106A 	   vmov.f32 TOS,s0
 234 2098 00F0C2BC 	   _NEXT 
 235              	
 236              	
 237              	/*******************************
 238              	    F/ ( f1 f2 -- f1/f2 )
 239              	    divide f1 by f2 
 240              	*******************************/
 241 209c 80200000 	    _HEADER FSLH,2,"F/"
 241      02462F00 
 242 20a4 00EE106A 	   vmov.f32 s0,TOS 
 243 20a8 57F8046B 	   _POP 
 244 20ac 00EE906A 	   vmov.f32 s1,TOS 
 245 20b0 80EE800A 	   vdiv.f32 s0,s1,s0 
 246 20b4 10EE106A 	   vmov.f32 TOS,s0
 247 20b8 00F0B2BC 	   _NEXT 
 248              	
 249              	
 250              	/********************************
 251              	    FNEGATE ( f -- -f )
 252              	    negate floating point 
ARM GAS  forth.s 			page 84


 253              	********************************/
 254 20bc A0200000 	    _HEADER FNEG,7,"FNEGATE"
 254      07464E45 
 254      47415445 
 255 20c8 00EE106A 	    vmov.f32 s0,TOS 
 256 20cc B1EE400A 	    vneg.f32 S0,S0 
 257 20d0 10EE106A 	    vmov.f32 TOS,S0    
 258 20d4 00F0A4BC 	    _NEXT 
 259              	
 260              	/**********************************
 261              	    FABS ( f -- f )
 262              	    return absolute value 
 263              	******************************/
 264 20d8 C0200000 	    _HEADER FABS,4,"FABS"
 264      04464142 
 264      530000BF 
 265 20e4 80EA0000 	    eor T0,T0 
 266 20e8 6FEA0000 	    mvn T0,T0 
 267 20ec 4FEA5000 	    lsr T0,#1 
 268 20f0 06EA0006 	    and TOS,T0 
 269 20f4 00F094BC 	    _NEXT 
 270              	
 271              	
 272              	/*****************************
 273              	     SQRT  ( f -- f )
 274              	     compute square root 
 275              	*****************************/
 276 20f8 DC200000 	     _HEADER SQRT,4,"SQRT"
 276      04535152 
 276      540000BF 
 277 2104 00EE106A 	     vmov.f32 s0,TOS 
 278 2108 B1EEC00A 	     vsqrt.f32 s0,s0 
 279 210c 10EE106A 	     vmov.f32 TOS,s0 
 280 2110 00F086BC 	     _NEXT 
 281              	
 282              	
 283              	/*****************************
 284              	   F0<   ( f -- flag )
 285              	*****************************/
 286 2114 FC200000 	    _HEADER FZLESS,3,"F0<"
 286      0346303C 
 287 211c 00EE106A 	    vmov.f32 s0,TOS 
 288 2120 B5EE400A 	    vcmp.f32 s0, #0.0 
 289 2124 F1EE106A 	    vmrs TOS,FPSCR
 290 2128 BFF34F8F 	    dsb  
 291 212c 4FEAE676 	    asr TOS,#31   
 292 2130 00F076BC 	    _NEXT 
 293              	
 294              	/*****************************
 295              	    F> ( f#1 f#2 -- flag )
 296              	    f#1>f#2 ? 
 297              	*****************************/
 298 2134 18210000 	    _HEADER FGREAT,2,"F>"
 298      02463E00 
 299 213c 504700BF 	    _NEST 
 300 2140 65200000 	    _ADR FSUBB
 301 2144 1D210000 	    _ADR FZLESS
ARM GAS  forth.s 			page 85


 302 2148 31300000 	    _ADR INVER     
 303 214c 272A0000 	    _UNNEST 
 304              	
 305              	/*****************************
 306              	    F< ( f#1 f#2 -- flag )
 307              	    f#1<f#2 ? 
 308              	*****************************/
 309 2150 38210000 	    _HEADER FLESS,2,"F<"
 309      02463C00 
 310 2158 504700BF 	    _NEST 
 311 215c 65200000 	    _ADR FSUBB 
 312 2160 1D210000 	    _ADR FZLESS
 313 2164 272A0000 	    _UNNEST 
 314              	
 315              	
 316              	/*******************************
 317              	    FMIN ( f#1 f#2 -- smallest )
 318              	********************************/
 319 2168 54210000 	    _HEADER FMIN,4,"FMIN"
 319      04464D49 
 319      4E0000BF 
 320 2174 504700BF 	    _NEST 
 321 2178 852D0000 	   _ADR OVER 
 322 217c 852D0000 	   _ADR OVER 
 323 2180 3D210000 	   _ADR FGREAT 
 324 2184 272C0000 	   _QBRAN 1f 
 324      90210000 
 325 218c 712D0000 	   _ADR SWAP  
 326 2190 512D0000 	1: _ADR DROP 
 327 2194 272A0000 	    _UNNEST 
 328              	
 329              	/*******************************
 330              	    FMAX (f#1 f#2 -- largest )
 331              	*******************************/
 332 2198 6C210000 	    _HEADER FMAX,4,"FMAX"
 332      04464D41 
 332      580000BF 
 333 21a4 504700BF 	    _NEST 
 334 21a8 852D0000 	    _ADR OVER 
 335 21ac 852D0000 	    _ADR OVER 
 336 21b0 59210000 	    _ADR FLESS 
 337 21b4 272C0000 	    _QBRAN 1f
 337      C0210000 
 338 21bc 712D0000 	    _ADR SWAP   
 339 21c0 512D0000 	1:  _ADR DROP 
 340 21c4 272A0000 	    _UNNEST 
 341              	
 342              	
 343              	/*******************************
 344              	    FSIGN ( f -- n )
 345              	    return float sign 
 346              	*******************************/
 347 21c8 9C210000 	    _HEADER FSIGN,5,"FSIGN"
 347      05465349 
 347      474E00BF 
 348 21d4 80EA0000 	    eor T0,T0 
 349 21d8 C8F20000 	    movt T0,#0X8000
ARM GAS  forth.s 			page 86


 350 21dc 06EA0006 	    and TOS,T0
 351 21e0 4FEAE676 	    asr TOS,#31  
 352 21e4 00F01CBC 	    _NEXT 
 353              	
 354              	/*******************************
 355              	    FEXP ( f --  n )
 356              	    return binary exponent of f 
 357              	*******************************/
 358 21e8 CC210000 	    _HEADER FEXP,4,"FEXP"
 358      04464558 
 358      500000BF 
 359 21f4 4FF00000 	    _MOV32 T0,0X7F800000
 359      C7F68070 
 360 21fc 06EA0006 	    and TOS,T0 
 361 2200 4FEAD656 	    lsr TOS,#23
 362 2204 A6F17F06 	    sub TOS,#127 
 363 2208 00F00ABC 	    _NEXT  
 364              	
 365              	/*******************************
 366              	   FMANT ( f -- n )
 367              	   return float mantisssa 
 368              	********************************/
 369 220c EC210000 	    _HEADER FMANT,5,"FMANT"
 369      05464D41 
 369      4E5400BF 
 370 2218 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 370      C0F27F00 
 371 2220 06EA0006 	    AND TOS,T0 
 372 2224 80EA0000 	    EOR T0,T0 
 373 2228 C0F28000 	    MOVT T0,0x80
 374 222c 46EA0006 	    ORR TOS,T0 
 375 2230 F6E3     	    _NEXT 
 376              	
 377              	
 378              	/*******************************
 379              	    PI  ( -- f )
 380              	    return 3.14159265
 381              	*******************************/
 382 2232 10220000 	    _HEADER PI,2,"PI"
 382      02504900 
 382      00BF
 383 223c 47F8046D 	    _PUSH 
 384 2240 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 384      C4F24906 
 385 2248 EAE3     	    _NEXT
 386              	 
 387              	/********************************
 388              	    LOG2 ( -- f)
 389              	    return log10(2)
 390              	*******************************/
 391 224a 36220000 	    _HEADER LOG2,4,"LOG2"
 391      044C4F47 
 391      3200
 392 2254 47F8046D 	    _PUSH 
 393 2258 42F29A06 	    _MOV32 TOS,0x3E9A209A
 393      C3F69A66 
 394 2260 DEE3     	    _NEXT 
ARM GAS  forth.s 			page 87


 395              	
 396              	/********************************
 397              	    LOG2>10 ( f -- exp )
 398              	    convert float base2 exponent 
 399              	    to base10
 400              	********************************/
 401 2262 4E220000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 401      074C4F47 
 401      323E3130 
 401      00BF
 402 2270 504700BF 	    _NEST
 403 2274 F5210000 	    _ADR FEXP 
 404 2278 2D200000 	    _ADR STOF 
 405 227c 55220000 	    _ADR LOG2
 406 2280 85200000 	    _ADR FSTAR 
 407 2284 15200000 	    _ADR TRUNC  
 408 2288 612D0000 	    _ADR DUPP 
 409 228c 952D0000 	    _ADR ZLESS 
 410 2290 272C0000 	    _QBRAN 1f 
 410      9C220000 
 411 2298 912E0000 	    _ADR ONEM
 412 229c 272A0000 	1:  _UNNEST 
 413              	
 414              	/********************************
 415              	    NUMBER ( a -- int -1 | float -2 | a 0 )
 416              	    parse number, integer or float 
 417              	    if not a number return ( a 0 ) 
 418              	    if integer return ( int -1 ) 
 419              	    if float return ( float -2 )
 420              	**********************************/
 421 22a0 66220000 	    _HEADER NUMBER,6,"NUMBER"
 421      064E554D 
 421      42455200 
 422 22ac 504700BF 	    _NEST 
 423 22b0 613B0000 	    _ADR INTQ
 424 22b4 352F0000 	    _ADR QDUP 
 425 22b8 272C0000 	    _QBRAN 2f 
 425      C4220000 
 426 22c0 272A0000 	    _UNNEST 
 427 22c4 BD240000 	2:  _ADR FLOATQ
 428 22c8 272A0000 	    _UNNEST 
 428      C81E0000 
 428      88ED00E0 
 428      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
ARM GAS  forth.s 			page 88


  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 22d8 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 22dc 0000C842 	            .word  0x42C80000  // 100.0
  31 22e0 00401C46 	            .word  0x461C4000  // 10000.0 
  32 22e4 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 22e8 CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 22ec AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 22f0 504700BF 	    _NEST 
  45 22f4 E72B0000 	    _DOLIT 2 
  45      02000000 
  46 22fc 152E0000 	    _ADR LSHIFT 
  47 2300 E72B0000 	    _DOLIT p10p2n 
  47      D8220000 
  48 2308 252E0000 	    _ADR PLUS 
  49 230c 6D2C0000 	    _ADR AT 
  50 2310 272A0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 2314 504700BF 	    _NEST 
  59 2318 E72B0000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 2320 E72B0000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 2328 A9360000 	    _ADR PICK  // idx f e 1 idx 
  62 232c 152E0000 	    _ADR LSHIFT // idx f e bit_mask 
  63 2330 A52D0000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 2334 272A0000 	    _UNNEST 
  65              	
  66              	
ARM GAS  forth.s 			page 89


  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 2338 504700BF 	    _NEST 
  78 233c DD2C0000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 2340 C92C0000 	    _ADR RAT   // idx f e R: e 
  81 2344 15230000 	    _ADR bit_state // idx f state 
  82 2348 272C0000 	    _QBRAN 1f   // bit reset 
  82      5C230000 
  83 2350 852D0000 	    _ADR OVER 
  84 2354 F1220000 	    _ADR p10p2at // idx f pwr10 R: e
  85 2358 A5200000 	    _ADR FSLH  // idx f R: e 
  86 235c 712D0000 	1:  _ADR SWAP  // f idx R: e 
  87 2360 812E0000 	    _ADR ONEP   // F idx++ R: e 
  88 2364 712D0000 	    _ADR SWAP   // idx f  
  89 2368 852D0000 	    _ADR OVER   // idx f idx 
  90 236c E72B0000 	    _DOLIT 5 
  90      05000000 
  91 2374 2D310000 	    _ADR GREAT  // idx > 5
  92 2378 272C0000 	    _QBRAN div_loop 
  92      40230000 
  93 2380 992C0000 	    _ADR RFROM 
  94 2384 512D0000 	    _ADR DROP 
  95 2388 272A0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 238c 504700BF 	    _NEST 
 109 2390 DD2C0000 	    _ADR TOR 
 110              	mult_loop:
 111 2394 C92C0000 	    _ADR RAT   // idx f e R: e 
 112 2398 15230000 	    _ADR bit_state // idx f state 
 113 239c 272C0000 	    _QBRAN 1f   // bit reset 
 113      B0230000 
 114 23a4 852D0000 	    _ADR OVER  
 115 23a8 F1220000 	    _ADR p10p2at // idx f pwr10 R: e
 116 23ac 85200000 	    _ADR FSTAR  // idx f R: e 
 117 23b0 712D0000 	1:  _ADR SWAP  // f idx R: e 
 118 23b4 812E0000 	    _ADR ONEP   // F idx++ R: e 
 119 23b8 712D0000 	    _ADR SWAP   // idx f  
ARM GAS  forth.s 			page 90


 120 23bc 852D0000 	    _ADR OVER   // idx f idx 
 121 23c0 E72B0000 	    _DOLIT 5 
 121      05000000 
 122 23c8 2D310000 	    _ADR GREAT  // idx > 5
 123 23cc 272C0000 	    _QBRAN mult_loop 
 123      94230000 
 124 23d4 992C0000 	    _ADR RFROM 
 125 23d8 512D0000 	    _ADR DROP 
 126 23dc 272A0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 23e0 504700BF 	    _NEST 
 136 23e4 852D0000 	    _ADR OVER  // e f e 
 137 23e8 272C0000 	    _QBRAN 3f // exp==0,  done 
 137      24240000 
 138 23f0 E72B0000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 23f8 5D2F0000 	    _ADR NROT // idx e f
 140 23fc 712D0000 	    _ADR SWAP // idx f e   
 141 2400 612D0000 	    _ADR DUPP  // idx f e e 
 142 2404 952D0000 	    _ADR ZLESS
 143 2408 272C0000 	    _QBRAN pos_exp 
 143      20240000 
 144              	// negative exponent 
 145 2410 55300000 	    _ADR ABSS 
 146 2414 39230000 	    _ADR mant_div 
 147 2418 3B2C0000 	    _BRAN 3f 
 147      24240000 
 148              	pos_exp: // positive exponent 
 149 2420 8D230000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 2424 712D0000 	3:  _ADR SWAP 
 152 2428 512D0000 	    _ADR DROP 
 153 242c 272A0000 	    _UNNEST 
 154              	
 155              	
 156              	/*****************************
 157              	   decimals ( a -- a+ fdec | a 0.0 )
 158              	   parse digits after '.' 
 159              	   convert to float 
 160              	*****************************/
 161              	decimals:
 162 2430 504700BF 	    _NEST 
 163 2434 E72B0000 	    _DOLIT 0
 163      00000000 
 164 243c 612D0000 	    _ADR DUPP
 165 2440 492F0000 	    _ADR ROT
 166 2444 793A0000 	    _ADR PARSE_DIGITS // d n a+ 
 167 2448 5D2F0000 	    _ADR NROT  // a d n 
 168 244c 2D200000 	    _ADR STOF  // convert integer n to float 
 169 2450 712D0000 	    _ADR SWAP
ARM GAS  forth.s 			page 91


 170 2454 E72B0000 	    _DOLIT 9 
 170      09000000 
 171 245c 59310000 	    _ADR MIN 
 172 2460 FD1E0000 	    _ADR PWR10 
 173 2464 A5200000 	    _ADR FSLH 
 174 2468 272A0000 	    _UNNEST 
 175              	
 176              	
 177              	/************************************
 178              	   exponent ( a -- exp a+ )
 179              	   parse float exponent 
 180              	************************************/
 181              	exponent: 
 182 246c 504700BF 	    _NEST 
 183 2470 173B0000 	    _ADR NEGQ 
 184 2474 DD2C0000 	    _ADR TOR 
 185 2478 E72B0000 	    _DOLIT 0 
 185      00000000 
 186 2480 612D0000 	    _ADR DUPP 
 187 2484 492F0000 	    _ADR ROT 
 188 2488 793A0000 	    _ADR PARSE_DIGITS // d n a  
 189 248c 5D2F0000 	    _ADR NROT 
 190 2490 712D0000 	    _ADR SWAP 
 191 2494 512D0000 	    _ADR DROP 
 192 2498 992C0000 	    _ADR RFROM 
 193 249c 272C0000 	    _QBRAN 1f 
 193      A8240000 
 194 24a4 45300000 	    _ADR NEGAT 
 195 24a8 712D0000 	1:  _ADR SWAP 
 196 24ac 272A0000 	    _UNNEST  // -- exp a+  
 197              	
 198              	
 199              	/**********************************
 200              	    FLOAT? ( a -- f# -2 | a 0 )
 201              	    parse float number 
 202              	    return a 0 if not float 
 203              	**********************************/
 204 24b0 A4220000 	    _HEADER FLOATQ,6,"FLOAT?"
 204      06464C4F 
 204      41543F00 
 205 24bc 504700BF 	    _NEST
 206              	    // always use base 10 
 207              	    // hexadecimal float not accepted 
 208 24c0 55320000 	    _ADR BASE 
 209 24c4 6D2C0000 	    _ADR AT 
 210 24c8 DD2C0000 	    _ADR TOR 
 211              	    // use decimal base  
 212 24cc F9390000 	    _ADR DECIM 
 213 24d0 E72B0000 		_DOLIT	0      // failed flag   
 213      00000000 
 214 24d8 852D0000 		_ADR	OVER   // a 0 a     R: base
 215 24dc B5310000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 216 24e0 512D0000 	    _ADR    DROP   // can drop cnt as there is a 0 at end of string 
 217              	// check for '-'|'+' save sign on R: 
 218 24e4 173B0000 	    _ADR NEGQ 
 219 24e8 DD2C0000 	    _ADR   TOR // -- ... a  R: base sign 
 220              	// if next char is digit parse integer part 
ARM GAS  forth.s 			page 92


 221 24ec 612D0000 	    _ADR DUPP 
 222 24f0 8D2C0000 	    _ADR CAT 
 223 24f4 E72B0000 	    _DOLIT 10 
 223      0A000000 
 224 24fc 1D3A0000 	    _ADR DIGTQ // u t|f 
 225 2500 712D0000 	    _ADR SWAP 
 226 2504 512D0000 	    _ADR DROP  // drop u 
 227 2508 272C0000 	    _QBRAN must_be_dot 
 227      5C250000 
 228              	// get integer part     
 229 2510 E72B0000 	    _DOLIT 0 
 229      00000000 
 230 2518 612D0000 	    _ADR DUPP
 231 251c 492F0000 	    _ADR ROT // a 0 0 0 a  
 232 2520 793A0000 	    _ADR PARSE_DIGITS // a 0 d n a 
 233 2524 5D2F0000 	    _ADR NROT // ... a d n 
 234 2528 2D200000 	    _ADR STOF  // convert n to float 
 235 252c DD2C0000 	    _ADR TOR  //  -- a 0 a d R: base sign fint 
 236 2530 512D0000 	    _ADR DROP // d not needed
 237              	// if next char is 'E' get exponent 
 238 2534 E72B0000 	    _DOLIT 'E' 
 238      45000000 
 239 253c FD3A0000 	    _ADR CHARQ 
 240 2540 272C0000 	    _QBRAN 1f // next is decimal fraction  
 240      68250000 
 241 2548 E72B0000 	    _DOLIT fzero // no fraction 
 241      00000000 
 242 2550 DD2C0000 	    _ADR TOR  // R: base sign fint 0.0
 243 2554 3B2C0000 	    _BRAN 3f // get exponent   
 243      C4250000 
 244              	// no integer part, next character must be '.' 
 245              	must_be_dot: 
 246 255c E72B0000 	    _DOLIT fzero // integer part 0.0 
 246      00000000 
 247 2564 DD2C0000 	    _ADR TOR  // R: base sign fint 
 248 2568 E72B0000 	1:  _DOLIT '.' 
 248      2E000000 
 249 2570 FD3A0000 	    _ADR CHARQ 
 250 2574 272C0000 	    _QBRAN error1  // -- a 0 a R: base sign fint  
 250      34260000 
 251 257c 31240000 	    _ADR decimals // -- a 0 a fdec 
 252 2580 DD2C0000 	    _ADR TOR // a 0 a R: base sign fint fdec 
 253              	// if next char == 'E' there is an exponent 
 254              	// else no exponent, float completed 
 255 2584 E72B0000 	    _DOLIT 'E' 
 255      45000000 
 256 258c FD3A0000 	    _ADR CHARQ 
 257 2590 272C0000 	    _QBRAN 1f
 257      A0250000 
 258 2598 3B2C0000 	    _BRAN 3f 
 258      C4250000 
 259              	// no exponent, must be end of string 
 260 25a0 8D2C0000 	1:   _ADR CAT 
 261 25a4 272C0000 	    _QBRAN 1f 
 261      B4250000 
 262 25ac 3B2C0000 	    _BRAN error2 // error not end of string 
 262      48260000 
ARM GAS  forth.s 			page 93


 263 25b4 DD2C0000 	1:  _ADR TOR  // a 0 a R: base sign fint fdec exp 
 264 25b8 512D0000 	    _ADR DROP 
 265 25bc 3B2C0000 	    _BRAN build_float 
 265      FC250000 
 266              	3: // get exponent 
 267 25c4 6D240000 	    _ADR exponent // a 0 exp a+ 
 268              	// must be end of string 
 269 25c8 8D2C0000 	    _ADR CAT 
 270 25cc 272C0000 	    _QBRAN 4f
 270      DC250000 
 271 25d4 3B2C0000 	    _BRAN error2  // a 0 exp R: base sign fint fdec  
 271      48260000 
 272 25dc DD2C0000 	4:  _ADR TOR   // a 0 R: base sign fint fdec exp 
 273 25e0 712F0000 	    _ADR DDROP 
 274 25e4 3B2C0000 	    _BRAN build_float     
 274      FC250000 
 275              	5: // no exponent 
 276 25ec E72B0000 	    _DOLIT 0 
 276      00000000 
 277 25f4 DD2C0000 	    _ADR TOR  // a 0 a R: base sign fn ffrac exp 
 278 25f8 512D0000 	    _ADR DROP 
 279              	build_float: // a 0 R: base sign fint fdec exp 
 280 25fc 992C0000 	    _ADR RFROM 
 281 2600 AD2C0000 	    _ADR DRFROM 
 282 2604 45200000 	    _ADR FPLUS 
 283 2608 E1230000 	    _ADR exp_adjust
 284 260c 992C0000 	    _ADR RFROM 
 285 2610 272C0000 	    _QBRAN 1f 
 285      24260000 
 286 2618 E72B0000 	    _DOLIT fminus1
 286      000080BF 
 287 2620 85200000 	    _ADR FSTAR 
 288 2624 E72B0000 	1:  _DOLIT -2 
 288      FEFFFFFF 
 289 262c 3B2C0000 	    _BRAN restore_base  
 289      58260000 
 290              	error1: // a 0 a R: base sign fint 
 291 2634 AD2C0000 	    _ADR DRFROM 
 292 2638 712F0000 	    _ADR DDROP
 293 263c 512D0000 	    _ADR DROP  
 294 2640 3B2C0000 	    _BRAN restore_base  
 294      58260000 
 295              	error2: // a 0 a R: base sign fint fdec  
 296 2648 AD2C0000 	    _ADR DRFROM 
 297 264c 712F0000 	    _ADR DDROP  // a 0 a R: base sign
 298 2650 992C0000 	    _ADR RFROM  // a 0 a sign R: base  
 299 2654 712F0000 	    _ADR DDROP  
 300              	restore_base: 
 301 2658 992C0000 	    _ADR RFROM 
 302 265c 55320000 	    _ADR BASE 
 303 2660 592C0000 	    _ADR STORE 
 304 2664 272A0000 	    _UNNEST 
 305              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
ARM GAS  forth.s 			page 94


   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 2668 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 266c CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 2670 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 2674 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 2678 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 267c ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 2680 BD370635 	    .word  0x350637BD // 0.5e-6f
  36 2684 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 2688 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 268c B4240000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 2698 504700BF 	    _NEST
  50 269c E72B0000 	    _DOLIT 1  
  50      01000000 
  51 26a4 45310000 	    _ADR MAX  
  52 26a8 E72B0000 	    _DOLIT 8
  52      08000000 
  53 26b0 59310000 	    _ADR MIN 
  54 26b4 E72B0000 	    _DOLIT 2 
  54      02000000 
  55 26bc 152E0000 	    _ADR LSHIFT 
  56 26c0 E72B0000 	    _DOLIT rounding 
ARM GAS  forth.s 			page 95


  56      68260000 
  57 26c8 252E0000 	    _ADR PLUS 
  58 26cc 6D2C0000 	    _ADR AT   
  59 26d0 45200000 	    _ADR FPLUS 
  60 26d4 272A0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 26d8 90260000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 26e0 57F8040B 	    ldr T0,[DSP],#4
  69 26e4 3070     	    strb T0,[TOS]  
  70 26e6 06F10106 	    add TOS,#1
  71 26ea 99E1     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 26ec 504700BF 	    _NEST 
  81 26f0 DD2C0000 	    _ADR TOR  // >R ( i r: b )
  82 26f4 5D340000 	    _ADR STOD // ( dbl r: b )
  83 26f8 612D0000 	    _ADR DUPP // ( dbl i r: b )
  84 26fc DD2C0000 	    _ADR TOR  // ( dbl r: b sign )
  85 2700 CD2F0000 	    _ADR DABS 
  86 2704 99380000 	    _ADR BDIGS 
  87 2708 05390000 	    _ADR DIGS 
  88 270c 992C0000 	    _ADR RFROM 
  89 2710 39390000 	    _ADR SIGN 
  90 2714 61390000 	    _ADR EDIGS // ( -- p u )
  91 2718 612D0000 	    _ADR DUPP  
  92 271c 5D2F0000 	    _ADR NROT // -rot ( -- u p u )
  93 2720 C92C0000 	    _ADR RAT  // r@ ( -- u p u b )
  94 2724 712D0000 	    _ADR SWAP // ( -- u p b u )
  95 2728 41370000 	    _ADR CMOVE // ( -- u ) 
  96 272c 612D0000 	    _ADR DUPP  // ( -- u u )
  97 2730 992C0000 	    _ADR RFROM // ( -- u u b )
  98 2734 252E0000 	    _ADR PLUS  // ( -- u b+ )
  99 2738 712D0000 	    _ADR SWAP  // ( -- b+ u )
 100 273c 272A0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	\ SCALEUP ( f1 -- m f2 ) 
 105              	\ multiply fraction until 
 106              	\ f1 >= 0.1
 107              	\ input: 
 108              	\   f1  float
 109              	\ output:
 110              	\   m  log10 exponent 
 111              	\   f2  >= 0.1 
ARM GAS  forth.s 			page 96


 112              	*************************/
 113              	//    _HEADER SCALEUP,7,"SCALEUP" 
 114              	SCALEUP:
 115 2740 504700BF 	    _NEST 
 116 2744 E72B0000 	    _DOLIT 0   // m 
 116      00000000 
 117 274c 712D0000 	    _ADR SWAP  // m f1 
 118 2750 612D0000 	1:  _ADR DUPP 
 119 2754 E72B0000 	    _DOLIT onetenth 
 119      CDCCCC3D 
 120 275c 59210000 	    _ADR FLESS
 121 2760 272C0000 	    _QBRAN 2f
 121      88270000 
 122 2768 E72B0000 	    _DOLIT ten 
 122      00002041 
 123 2770 85200000 	    _ADR FSTAR
 124              	    // decrement m   
 125 2774 712D0000 	    _ADR SWAP
 126 2778 912E0000 	    _ADR ONEM 
 127 277c 712D0000 	    _ADR SWAP 
 128 2780 3B2C0000 	    _BRAN 1b
 128      50270000 
 129 2788 272A0000 	2:  _UNNEST 
 130              	
 131              	/******************************
 132              	\ SCALEDOWN ( d f1 -- m d f2 )
 133              	\ divide by 10.0 until 
 134              	\ f < 10^d 
 135              	******************************/
 136              	//    _HEADER SCALEDOWN,9,"SCALEDOWN"
 137              	SCALEDOWN: // ( d f1 -- m d f2 )
 138 278c 504700BF 	    _NEST 
 139 2790 852D0000 	    _ADR OVER 
 140 2794 FD1E0000 	    _ADR PWR10
 141 2798 E72B0000 	    _DOLIT 0x31ABCC77 // 0.5e-8
 141      77CCAB31 
 142 27a0 65200000 	    _ADR FSUBB 
 143 27a4 DD2C0000 	    _ADR TOR
 144 27a8 E72B0000 	    _DOLIT 0 
 144      00000000 
 145 27b0 712D0000 	    _ADR SWAP // d 0 f1 r: pwr10  
 146 27b4 612D0000 	1:  _ADR DUPP
 147 27b8 C92C0000 	    _ADR RAT 
 148 27bc 3D210000 	    _ADR FGREAT 
 149 27c0 272C0000 	    _QBRAN 2f
 149      E8270000 
 150 27c8 E72B0000 	    _DOLIT ten 
 150      00002041 
 151 27d0 A5200000 	    _ADR FSLH 
 152              	    // increment m 
 153 27d4 712D0000 	    _ADR SWAP 
 154 27d8 812E0000 	    _ADR ONEP 
 155 27dc 712D0000 	    _ADR SWAP 
 156 27e0 3B2C0000 	    _BRAN 1b   
 156      B4270000 
 157 27e8 992C0000 	2:  _ADR RFROM 
 158 27ec 512D0000 	    _ADR DROP
ARM GAS  forth.s 			page 97


 159 27f0 712D0000 	    _ADR SWAP // ( -- d f m ) 
 160 27f4 5D2F0000 	    _ADR NROT // ( -- m d f )
 161 27f8 272A0000 	    _UNNEST 
 162              	
 163              	
 164              	/***************************
 165              	convert exponant of float 
 166              	    EPART ( m b -- b+ )
 167              	input: 
 168              	    m   decimal exponent 
 169              	    b   string buffer 
 170              	output:
 171              	    b+   adjusted pointer 
 172              	****************************/
 173              	//    _HEADER EPART,5,"EPART"
 174              	EPART:
 175 27fc 504700BF 	    _NEST
 176 2800 712D0000 	    _ADR SWAP
 177 2804 352F0000 	    _ADR QDUP    
 178 2808 272C0000 	    _QBRAN 2f 
 178      2C280000 
 179 2810 712D0000 	    _ADR SWAP 
 180 2814 E72B0000 	    _DOLIT 'E' // [char] E ( -- m b c )
 180      45000000 
 181 281c 712D0000 	    _ADR SWAP  
 182 2820 E1260000 	    _ADR CSTOP // c!+ ( -- m b ) 
 183 2824 ED260000 	    _ADR ITOA // ( i b -- b u )
 184 2828 512D0000 	    _ADR DROP // ( -- b+ )     
 185 282c 272A0000 	2:  _UNNEST 
 186              	
 187              	
 188              	/***************************
 189              	conver fraction part of float 
 190              	    FPART ( d f b -- b+ )
 191              	input:
 192              	    d   digit left to display 
 193              	    f   float to convert
 194              	    b   string* buffer  
 195              	output:
 196              	    b+  updated string* 
 197              	****************************/
 198              	//    _HEADER FPART,5,"FPART"
 199              	FPART:
 200 2830 504700BF 	    _NEST
 201 2834 E72B0000 	    _DOLIT '.' 
 201      2E000000 
 202 283c 712D0000 	    _ADR SWAP 
 203 2840 E1260000 	    _ADR CSTOP 
 204 2844 DD2C0000 	    _ADR TOR // >r ( d f r: b ) 
 205              	    // round to next digit 
 206 2848 852D0000 	    _ADR OVER 
 207 284c 99260000 	    _ADR ROUND 
 208 2850 712D0000 	1:  _ADR SWAP  
 209 2854 352F0000 	    _ADR QDUP 
 210 2858 272C0000 	    _QBRAN 2f
 210      A8280000 
 211 2860 912E0000 	    _ADR ONEM // 1- ( -- f d- r: b )
ARM GAS  forth.s 			page 98


 212 2864 712D0000 	    _ADR SWAP // swap ( -- d f r: b )
 213 2868 E72B0000 	    _DOLIT ten // ( d f 10.0 ) 
 213      00002041 
 214 2870 85200000 	    _ADR FSTAR // f*
 215 2874 612D0000 	    _ADR DUPP  
 216 2878 15200000 	    _ADR TRUNC // d f i
 217 287c 612D0000 	    _ADR DUPP  // d f i i  
 218 2880 E72B0000 	    _DOLIT '0' 
 218      30000000 
 219 2888 252E0000 	    _ADR PLUS 
 220 288c 992C0000 	    _ADR RFROM // R> ( d f c b )
 221 2890 E1260000 	    _ADR CSTOP // ( d f i b+ )
 222 2894 DD2C0000 	    _ADR TOR  // >r ( -- d f i r: b )
 223 2898 2D200000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 224 289c 65200000 	    _ADR FSUBB 
 225 28a0 3B2C0000 	    _BRAN 1b 
 225      50280000 
 226 28a8 512D0000 	2:  _ADR DROP 
 227 28ac 992C0000 	    _ADR RFROM 
 228 28b0 272A0000 	    _UNNEST 
 229              	
 230              	/***************************
 231              	 convert integer part of float 
 232              	    IPART ( d f b -- m d f b )
 233              	input:
 234              	    d   digit# to display 
 235              	    f   float to convert 
 236              	    b   string* buffer 
 237              	output:
 238              	    m   decimal exponent 
 239              	    d   digit# to display left 
 240              	    f   float fraction 
 241              	    b   update str* 
 242              	****************************/
 243              	//    _HEADER IPART,5,"IPART"
 244              	IPART: 
 245 28b4 504700BF 	    _NEST 
 246 28b8 DD2C0000 	    _ADR TOR // ( -- d f r: b )
 247 28bc 612D0000 	    _ADR DUPP 
 248 28c0 E72B0000 	    _DOLIT fone 
 248      0000803F 
 249 28c8 59210000 	    _ADR FLESS 
 250 28cc 272C0000 	    _QBRAN 1f 
 250      08290000 
 251 28d4 E72B0000 	    _DOLIT '0' 
 251      30000000 
 252 28dc 992C0000 	    _ADR RFROM 
 253 28e0 E1260000 	    _ADR CSTOP 
 254 28e4 DD2C0000 	    _ADR TOR 
 255 28e8 41270000 	    _ADR SCALEUP 
 256 28ec 712D0000 	    _ADR SWAP 
 257 28f0 5D2F0000 	    _ADR NROT 
 258              	    // decrement d 
 259 28f4 712D0000 	    _ADR SWAP 
 260 28f8 912E0000 	    _ADR ONEM 
 261 28fc 712D0000 	    _ADR SWAP 
 262 2900 992C0000 	    _ADR RFROM // r> ( -- m d f b )  
ARM GAS  forth.s 			page 99


 263 2904 272A0000 	    _UNNEST 
 264 2908 8D270000 	1:  _ADR SCALEDOWN // ( -- m d f r: b)
 265 290c 612D0000 	    _ADR DUPP  // ( -- m d f f r: b )
 266 2910 15200000 	    _ADR TRUNC // ( -- m d f i r: b )
 267 2914 612D0000 	    _ADR DUPP  // ( -- m d f i i r: b )
 268 2918 DD2C0000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 269 291c 2D200000 	    _ADR STOF  // ( -- m d f f )
 270 2920 65200000 	    _ADR FSUBB // ( -- m d f r: b i )
 271 2924 992C0000 	    _ADR RFROM // ( -- m d f i r: b )
 272 2928 992C0000 	    _ADR RFROM  // ( -- m d f i b )  
 273 292c ED260000 	    _ADR ITOA // -- m d f b u )
 274 2930 DD2C0000 	    _ADR TOR  // >r ( -- m d f b r: u )
 275 2934 492F0000 	    _ADR ROT
 276 2938 992C0000 	    _ADR RFROM // r> ( -- m f b d u ) 
 277 293c 352E0000 	    _ADR SUBB // ( -- m f b d- )
 278 2940 5D2F0000 	    _ADR NROT // ( -- m d f b )
 279 2944 272A0000 	    _UNNEST
 280              	
 281              	
 282              	/***************************************
 283              	\  f>a ( d f b -- b u )
 284              	\ convert float to string
 285              	\ input: 
 286              	\   b  output buffer  
 287              	\   d n# of digits [1..7] to convert 
 288              	\   f float to convert 
 289              	\  output: 
 290              	\   b output buffer 
 291              	\    u length of string 
 292              	****************************************/
 293 2948 DC260000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 293      03463E41 
 294 2950 504700BF 	    _NEST 
 295 2954 612D0000 	    _ADR DUPP // dup ( -- d f b b )
 296 2958 DD2C0000 	    _ADR TOR // >r   ( d f b r: b )  
 297              	    // store space first buffer char. 
 298 295c E12E0000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 299 2960 712D0000 	    _ADR SWAP 
 300 2964 E1260000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 301              	    // check float sign 
 302 2968 852D0000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 303 296c D5210000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 304 2970 272C0000 	    _QBRAN 1f  // 0branch 1f 
 304      88290000 
 305              	    // negative number add '-' to buffer 
 306 2978 E72B0000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 306      2D000000 
 307 2980 712D0000 	    _ADR SWAP 
 308 2984 E1260000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 309 2988 B5280000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 310 298c 31280000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 311 2990 FD270000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 312 2994 C92C0000 	    _ADR RAT 
 313 2998 352E0000 	    _ADR SUBB 
 314 299c 992C0000 	    _ADR RFROM 
 315 29a0 712D0000 	    _ADR SWAP 
 316 29a4 272A0000 	    _UNNEST 
ARM GAS  forth.s 			page 100


 317              	
 318              	
 319              	/***********************************
 320              	    F. (  f d -- )
 321              	    print float32 number  
 322              	    f -> float to print 
 323              	    d -> string digits# 
 324              	***********************************/
 325 29a8 4C290000 	    _HEADER FDOT,2,"F."
 325      02462E00 
 326 29b0 504700BF 	    _NEST 
 327              	    // limit digits range [1..7]
 328 29b4 E72B0000 	    _DOLIT 1 
 328      01000000 
 329 29bc 45310000 	    _ADR MAX 
 330 29c0 E72B0000 	    _DOLIT 7 
 330      07000000 
 331 29c8 59310000 	    _ADR MIN
 332 29cc 712D0000 	    _ADR SWAP // ( -- d f )
 333              	    // allocate convertion buffer 
 334 29d0 D1360000 	    _ADR HERE
 335 29d4 DD2C0000 	    _ADR TOR  
 336 29d8 E72B0000 	    _DOLIT 16 
 336      10000000 
 337 29e0 75470000 	    _ADR ALLOT 
 338              	    // fill it with zero's 
 339 29e4 C92C0000 	    _ADR RAT 
 340 29e8 E72B0000 	    _DOLIT 16 
 340      10000000 
 341 29f0 E72B0000 	    _DOLIT 0 
 341      00000000 
 342 29f8 B9370000 	    _ADR FILL 
 343 29fc 992C0000 	    _ADR RFROM // ( d f b )
 344 2a00 51290000 	    _ADR FTOA 
 345 2a04 C93C0000 	    _ADR TYPEE 
 346              	    // free buffer 
 347 2a08 E72B0000 	    _DOLIT -16 
 347      F0FFFFFF 
 348 2a10 75470000 	    _ADR ALLOT
 349 2a14 272A0000 	    _UNNEST 
 350              	
 351              	
 352              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
ARM GAS  forth.s 			page 101


  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
ARM GAS  forth.s 			page 102


  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 2a18 48F804CD 		STMFD	RSP!,{IP}
  85 2a1c 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 2a20 5CF8045B 		LDR WP,[IP],#4 
  89 2a24 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 2a26 58F804CB 		LDMFD RSP!,{IP}
  92 2a2a 5CF8045B 		LDR WP,[IP],#4 
  93 2a2e 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX 	INX" 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX is initialized to NEST address 
 102              	// and must be preserved   
 103              	COMPI_NEST:
 104 2a30 04F14401 		add T1,UP,#USER_CTOP 
 105 2a34 0968     		ldr T1,[T1]
 106 2a36 44F25072 		mov T2,#0x4700+(10<<3)
 107 2a3a 21F8022B 		strh T2,[T1],#2
 108 2a3e 4FF43F42 		mov T2,#0xbf00 // NOP.N   
 109 2a42 21F8022B 		strh T2,[T1],#2 
 110 2a46 04F14402 		add T2,UP,#USER_CTOP 
 111 2a4a 1160     		str T1,[T2]
 112 2a4c E8E7     		_NEXT  
 113              	
 114              	// ' STDIN 
 115              	// stdin vector 
 116              	TSTDIN:
 117 2a4e 47F8046D 		_PUSH 
 118 2a52 04F11406 		ADD TOS,UP,#STDIN 
 119 2a56 E3E7     		_NEXT 
 120              	
 121              	// ' STDOUT 
 122              	// stdout vector 
 123              	TSTDOUT:
 124 2a58 47F8046D 		_PUSH 
 125 2a5c 04F11806 		ADD TOS,UP,#STDOUT
 126 2a60 DEE7     		_NEXT 
 127              	
 128              	/***************************
ARM GAS  forth.s 			page 103


 129              	  CFSR ( -- u )
 130              	  stack CFSR register 
 131              	***************************/
 132 2a62 AC290000 	    _HEADER CFSR,6,"ATCFSR"
 132      06415443 
 132      46535200 
 132      00BF
 133 2a70 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 133      CEF20000 
 134 2a78 47F8046D 	    _PUSH 
 135 2a7c 866A     	    ldr TOS,[T0,#SCB_CFSR]
 136 2a7e 81EA0101 	    eor T1,T1 
 137 2a82 8162     	    str T1,[T0,#SCB_CFSR]
 138 2a84 CCE7     	    _NEXT 
 139              	
 140              	/*****************************
 141              	  BFAR ( -- u )
 142              	  stack BFAR register
 143              	*****************************/
 144 2a86 662A0000 	    _HEADER BFAR,6,"ATBFAR"
 144      06415442 
 144      46415200 
 144      00BF
 145 2a94 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 145      CEF20000 
 146 2a9c 47F8046D 		_PUSH 
 147 2aa0 866B     	    ldr TOS,[T0,#SCB_BFAR]
 148 2aa2 81EA0101 	    eor T1,T1 
 149 2aa6 8163     	    str T1,[T0,#SCB_BFAR]
 150 2aa8 BAE7     	    _NEXT 
 151              	
 152              	/********************************************
 153              		KEY? ( -- c T | F )
 154              		check if available character 
 155              	********************************************/
 156 2aaa 8A2A0000 		_HEADER QKEY,4,"KEY?" 
 156      044B4559 
 156      3F00
 157 2ab4 504700BF 		_NEST 
 158 2ab8 4F2A0000 		_ADR TSTDIN // ' STDIN 
 159 2abc 21370000 		_ADR ATEXE
 160 2ac0 272A0000 		_UNNEST 
 161              	
 162              	/********************************************
 163              	    KEY	 ( -- c )
 164              	 	Wait for and return an input character.
 165              	********************************************/
 166 2ac4 AE2A0000 		_HEADER KEY,3,"KEY"
 166      034B4559 
 167 2acc 504700BF 		_NEST
 168              	KEY1:
 169 2ad0 211A0000 		_ADR CAPS_LED 
 170 2ad4 B52A0000 		_ADR	QKEY 
 171 2ad8 272C0000 		_QBRAN	KEY1
 171      D02A0000 
 172 2ae0 272A0000 		_UNNEST
 173              	
ARM GAS  forth.s 			page 104


 174              	/**********************************************
 175              		EMIT ( c -- )
 176              		transmit a character to console 
 177              	**********************************************/
 178 2ae4 C82A0000 		_HEADER EMIT,4,"EMIT"
 178      04454D49 
 178      540000BF 
 179 2af0 504700BF 		_NEST 
 180 2af4 592A0000 		_ADR TSTDOUT 
 181 2af8 21370000 		_ADR ATEXE 
 182 2afc 272A0000 		_UNNEST 
 183              	
 184              	
 185              	/************************************************
 186              	 GET-IP ( n - c )
 187              	 return interrupt priority of IRQn 
 188              	************************************************/
 189              	/*
 190              		_HEADER GETIP,6,"GET-IP" 
 191              		_NEST 
 192              		_ADR DUPP 
 193              		_ADR ZLESS
 194              		_QBRAN 1f 
 195              		_DOLIT 15
 196              		_ADR ANDD
 197              		_DOLIT 4
 198              		_ADR SUBB  
 199              		_DOLIT 0xE000ED18 
 200              		_BRAN 2f 
 201              	1:	_DOLIT 0xE000E400 
 202              	2:	_ADR PLUS 
 203              		_ADR CAT
 204              		_DOLIT 4 
 205              		_ADR RSHIFT 
 206              		_UNNEST 
 207              	*/
 208              	
 209              	/***********************************************
 210              	 RANDOM ( n+ -- {0..n+ - 1} )
 211              	 return pseudo random number 
 212              	 REF: https://en.wikipedia.org/wiki/Xorshift
 213              	************************************************/
 214 2b00 E82A0000 		_HEADER RAND,6,"RANDOM"
 214      0652414E 
 214      444F4D00 
 215 2b0c 504700BF 		_NEST
 216 2b10 55300000 		_ADR ABSS   
 217 2b14 FD310000 		_ADR SEED 
 218 2b18 6D2C0000 		_ADR AT 
 219 2b1c 612D0000 		_ADR DUPP 
 220 2b20 E72B0000 		_DOLIT 13
 220      0D000000 
 221 2b28 152E0000 		_ADR LSHIFT 
 222 2b2c CD2D0000 		_ADR XORR  
 223 2b30 612D0000 		_ADR DUPP 
 224 2b34 E72B0000 		_DOLIT 17 
 224      11000000 
ARM GAS  forth.s 			page 105


 225 2b3c FD2D0000 		_ADR RSHIFT 
 226 2b40 CD2D0000 		_ADR XORR 
 227 2b44 612D0000 		_ADR DUPP
 228 2b48 E72B0000 		_DOLIT 5 
 228      05000000 
 229 2b50 152E0000 		_ADR LSHIFT 
 230 2b54 CD2D0000 		_ADR XORR  
 231 2b58 612D0000 		_ADR DUPP 
 232 2b5c FD310000 		_ADR SEED 
 233 2b60 592C0000 		_ADR STORE 
 234 2b64 E72B0000 		_DOLIT 0x7FFFFFFF
 234      FFFFFF7F 
 235 2b6c A52D0000 		_ADR ANDD 
 236 2b70 712D0000 		_ADR SWAP 
 237 2b74 A5350000 		_ADR MODD 
 238 2b78 272A0000 		_UNNEST 
 239              	
 240              	
 241              	/****************************************
 242              	 PAUSE ( u -- ) 
 243              	 suspend execution for u milliseconds
 244              	****************************************/
 245 2b7c 042B0000 		_HEADER PAUSE,5,"PAUSE"
 245      05504155 
 245      534500BF 
 246 2b88 504700BF 		_NEST 
 247 2b8c 25320000 		_ADR TIMER 
 248 2b90 592C0000 		_ADR STORE 
 249              	PAUSE_LOOP:
 250 2b94 25320000 		_ADR TIMER 
 251 2b98 6D2C0000 		_ADR AT 
 252 2b9c 272C0000 		_QBRAN PAUSE_EXIT 
 252      AC2B0000 
 253 2ba4 3B2C0000 		_BRAN PAUSE_LOOP 
 253      942B0000 
 254              	PAUSE_EXIT: 		
 255 2bac 272A0000 		_UNNEST 
 256              	
 257              	/******************************************
 258              	  ULED ( T|F -- )
 259              	  control user LED, -1 ON, 0 OFF 
 260              	*******************************************/
 261 2bb0 802B0000 		_HEADER ULED,4,"ULED"
 261      04554C45 
 261      440000BF 
 262 2bbc 4FF40050 		mov T0,#(1<<LED_PIN)
 263 2bc0 4FF40061 		_MOV32 T1,LED_GPIO 
 263      C4F20201 
 264 2bc8 3600     		movs TOS,TOS 
 265 2bca 57F8046B 		_POP
 266 2bce 03D0     		beq ULED_OFF
 267 2bd0 4FEA0040 		lsl T0,#16 
 268 2bd4 8861     		str T0,[T1,#GPIO_BSRR]
 269 2bd6 23E7     		_NEXT 
 270              	ULED_OFF:
 271 2bd8 8861     		str T0,[T1,#GPIO_BSRR]
 272 2bda 21E7     		_NEXT    
ARM GAS  forth.s 			page 106


 273              	
 274              	
 275              		
 276              	/***************
 277              	//  The kernel
 278              	***************/
 279              	
 280              	/********************
 281              	    NOP	( -- )
 282              	 	do nothing.
 283              	*********************/
 284 2bdc B42B0000 		_HEADER NOP,3,"NOP"
 284      034E4F50 
 285 2be4 1CE7     		_NEXT 
 286              	 
 287              	/********************
 288              	    doLIT	( -- w )
 289              	 	Push an inline literal.
 290              	hidden word used by compiler 
 291              	*********************/
 292              	DOLIT:
 293 2be6 47F8046D 		_PUSH				//  store TOS on data stack
 294 2bea 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 295 2bee 17E7     		_NEXT 
 296              	
 297              	/*******************************
 298              	    EXECUTE	( ca -- )
 299              	 	Execute the word at ca.
 300              	*******************************/
 301 2bf0 E02B0000 		_HEADER EXECU,7,"EXECUTE"
 301      07455845 
 301      43555445 
 302 2bfc 46F00105 		ORR	WP,TOS,#1 
 303 2c00 57F8046B 		_POP
 304 2c04 2847     		BX WP 
 305 2c06 0BE7     		_NEXT 
 306              	
 307              	/**********************************************************
 308              	    donext	( -- ) counter on R:
 309              	 	Run time code for the single index loop.
 310              	 	: next ( -- ) \ hilevel model
 311              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 312              	hidden word used by compiler 	  
 313              	*********************************************************/
 314              	DONXT:
 315 2c08 D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 316 2c0c 22B9     		CBNZ T2,NEXT1 
 317              		/* loop done */
 318 2c0e 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 319 2c12 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 320 2c16 03E7     		_NEXT
 321              	NEXT1:
 322              		/* decrement loop counter */
 323 2c18 A2F10102 		SUB	T2,T2,#1
 324 2c1c C8F80020 		STR	T2,[RSP]
 325 2c20 DCF800C0 		LDR	IP,[IP]	// go begining of loop 
 326 2c24 FCE6     		_NEXT 
ARM GAS  forth.s 			page 107


 327              	
 328              	/**************************************
 329              	    ?branch	( f -- )
 330              	 	Branch if flag is zero.
 331              	hiddend word used by compiler
 332              	**************************************/
 333              	QBRAN:
 334 2c26 3600     		MOVS	TOS,TOS
 335 2c28 57F8046B 		_POP
 336 2c2c 02D1     		BNE	QBRAN1
 337 2c2e DCF800C0 		LDR	IP,[IP]
 338 2c32 F5E6     		_NEXT
 339              	QBRAN1:
 340 2c34 0CF1040C 	 	ADD	IP,IP,#4
 341 2c38 F2E6     		_NEXT
 342              	
 343              	/***********************************
 344              	    branch	( -- )
 345              	 	Branch to an inline address.
 346              	hidden word used by compiler 
 347              	***********************************/
 348              	BRAN:
 349 2c3a DCF800C0 		LDR	IP,[IP]
 350 2c3e EFE6     		_NEXT
 351              	
 352              	/******************************************
 353              	    EXIT	(  -- )
 354              	 	Exit the currently executing command.
 355              	******************************************/
 356 2c40 F42B0000 		_HEADER EXIT,4,"EXIT"
 356      04455849 
 356      540000BF 
 357 2c4c 272A0000 		_UNNEST
 358              	
 359              	/***********************************
 360              	    !	   ( w a -- )
 361              	 	Pop the data stack to memory.
 362              	************************************/
 363 2c50 442C0000 		_HEADER STORE,1,"!"
 363      012100BF 
 364 2c58 57F8045B 		LDR	WP,[DSP],#4
 365 2c5c 3560     		STR	WP,[TOS]
 366 2c5e 57F8046B 		_POP
 367 2c62 DDE6     		_NEXT 
 368              	
 369              	/********************************************
 370              	    @	   ( a -- w )
 371              	 	Push memory location to the data stack.
 372              	*********************************************/
 373 2c64 542C0000 		_HEADER AT,1,"@"
 373      014000BF 
 374 2c6c 3668     		LDR	TOS,[TOS]
 375 2c6e D7E6     		_NEXT 
 376              	
 377              	/*******************************************
 378              	    C!	  ( c b -- )
 379              	 	Pop the data stack to byte memory.
ARM GAS  forth.s 			page 108


 380              	*******************************************/
 381 2c70 682C0000 		_HEADER CSTOR,2,"C!"
 381      02432100 
 382 2c78 57F8045B 		LDR	WP,[DSP],#4
 383 2c7c 3570     		STRB WP,[TOS]
 384 2c7e 57F8046B 		_POP
 385 2c82 CDE6     		_NEXT
 386              	
 387              	/*********************************************
 388              	    C@	  ( b -- c )
 389              	 	Push byte memory location to the data stack.
 390              	**********************************************/
 391 2c84 742C0000 		_HEADER CAT,2,"C@"
 391      02434000 
 392 2c8c 3678     		LDRB	TOS,[TOS]
 393 2c8e C7E6     		_NEXT 
 394              	
 395              	
 396              	/*********************************************
 397              	    R>	  ( -- w  R: w -- ) 
 398              	 	push from rstack.
 399              	**********************************************/
 400 2c90 882C0000 		_HEADER RFROM,2,"R>"
 400      02523E00 
 401 2c98 47F8046D 		_PUSH
 402 2c9c 58F8046B 		LDR	TOS,[RSP],#4
 403 2ca0 BEE6     		_NEXT 
 404              	
 405              	/***********************************************
 406              		2R> (  -- D ) R: D --  
 407              	    push a double from rstack 
 408              	***********************************************/
 409 2ca2 942C0000 		_HEADER DRFROM,3,"2R>"
 409      0332523E 
 409      00BF
 410 2cac 47F8046D 		_PUSH 
 411 2cb0 58F8046B 		LDR TOS,[RSP],#4 
 412 2cb4 47F8046D 		_PUSH 
 413 2cb8 58F8046B 		LDR TOS,[RSP],#4
 414 2cbc B0E6     		_NEXT 
 415              	
 416              	/************************************************
 417              	    R@	  ( -- w )
 418              	 	Copy top of return stack to the data stack.
 419              	************************************************/
 420 2cbe A62C0000 		_HEADER RAT,2,"R@"
 420      02524000 
 420      00BF
 421 2cc8 47F8046D 		_PUSH
 422 2ccc D8F80060 		LDR	TOS,[RSP]
 423 2cd0 A6E6     		_NEXT 
 424              	
 425              	/***********************************************
 426              	    >R	  ( w -- ) R: -- w 
 427              	 	pop to rstack.
 428              	************************************************/
 429 2cd2 C22C0000 		_HEADER TOR,2,">R"
ARM GAS  forth.s 			page 109


 429      023E5200 
 429      00BF
 430 2cdc 48F8046D 		STR	TOS,[RSP,#-4]!
 431 2ce0 57F8046B 		_POP
 432 2ce4 9CE6     		_NEXT
 433              	
 434              	/*********************************************
 435              		2>R ( d -- ) R: -- d 
 436              		pop a double to rstack 
 437              	*********************************************/
 438 2ce6 D62C0000 		_HEADER DTOR,3,"2>R"
 438      03323E52 
 438      00BF
 439 2cf0 48F8046D 		STR TOS,[RSP,#-4]!
 440 2cf4 57F8046B 	    _POP 
 441 2cf8 48F8046D 		STR TOS,[RSP,#-4]!
 442 2cfc 57F8046B 		_POP  
 443 2d00 8EE6     		_NEXT 	
 444              	
 445              	
 446              	/*******************************
 447              	//	RP! ( u -- )
 448              	// initialize RPP with u 
 449              	*******************************/
 450 2d02 EA2C0000 		_HEADER RPSTOR,3,"RP!"
 450      03525021 
 450      00BF
 451 2d0c B046     		MOV RSP,TOS 
 452 2d0e 57F8046B 		_POP  
 453 2d12 85E6     		_NEXT 
 454              	
 455              	/********************************
 456              		SP! ( u -- )
 457              	 initialize SPP with u 
 458              	********************************/
 459 2d14 062D0000 		_HEADER SPSTOR,3,"SP!"
 459      03535021 
 460 2d1c 3746     		MOV DSP,TOS 
 461 2d1e 86EA0606 		EOR TOS,TOS,TOS 
 462 2d22 7DE6     		_NEXT 
 463              	
 464              	/**************************************
 465              	    SP@	 ( -- a )
 466              	 	Push the current data stack pointer.
 467              	***************************************/
 468 2d24 182D0000 		_HEADER SPAT,3,"SP@"
 468      03535040 
 469 2d2c 47F8046D 		_PUSH
 470 2d30 3E46     		MOV	TOS,DSP
 471 2d32 75E6     		_NEXT
 472              	
 473              	/**************************************
 474              	   RP@ ( -- a )
 475              	   push current rstack pointer 
 476              	**************************************/
 477 2d34 282D0000 		_HEADER RPAT,3,"RP@"
 477      03525040 
ARM GAS  forth.s 			page 110


 478 2d3c 47F8046D 		_PUSH 
 479 2d40 4646     		MOV TOS,RSP 
 480 2d42 6DE6     		_NEXT 
 481              	
 482              	/********************************
 483              	    DROP	( w -- )
 484              	 	Discard top stack item.
 485              	********************************/
 486 2d44 382D0000 		_HEADER DROP,4,"DROP"
 486      0444524F 
 486      500000BF 
 487 2d50 57F8046B 		_POP
 488 2d54 64E6     		_NEXT 
 489              	
 490              	/*********************************
 491              	    DUP	 ( w -- w w )
 492              	 	Duplicate the top stack item.
 493              	*********************************/
 494 2d56 482D0000 		_HEADER DUPP,3,"DUP"
 494      03445550 
 494      00BF
 495 2d60 47F8046D 		_PUSH
 496 2d64 5CE6     		_NEXT 
 497              	
 498              	/**********************************
 499              	    SWAP	( w1 w2 -- w2 w1 )
 500              	 	Exchange top two stack items.
 501              	**********************************/
 502 2d66 5A2D0000 		_HEADER SWAP,4,"SWAP"
 502      04535741 
 502      5000
 503 2d70 3D68     		LDR	WP,[DSP]
 504 2d72 3E60     		STR	TOS,[DSP]
 505 2d74 2E46     		MOV	TOS,WP
 506 2d76 53E6     		_NEXT 
 507              	
 508              	/***********************************
 509              	    OVER	( w1 w2 -- w1 w2 w1 )
 510              	 	Copy second stack item to top.
 511              	***********************************/
 512 2d78 6A2D0000 		_HEADER OVER,4,"OVER"
 512      044F5645 
 512      520000BF 
 513 2d84 47F8046D 		_PUSH
 514 2d88 7E68     		LDR	TOS,[DSP,#4]
 515 2d8a 49E6     		_NEXT 
 516              	
 517              	/***********************************
 518              	    0<	  ( n -- t )
 519              	 	Return true if n is negative.
 520              	***********************************/
 521 2d8c 7C2D0000 		_HEADER ZLESS,2,"0<"
 521      02303C00 
 522 2d94 4FEAE676 		ASR TOS,#31
 523 2d98 42E6     		_NEXT 
 524              	
 525              	/********************************
ARM GAS  forth.s 			page 111


 526              	    AND	 ( w w -- w )
 527              	 	Bitwise AND.
 528              	********************************/
 529 2d9a 902D0000 		_HEADER ANDD,3,"AND"
 529      03414E44 
 529      00BF
 530 2da4 57F8045B 		LDR	WP,[DSP],#4
 531 2da8 06EA0506 		AND	TOS,TOS,WP
 532 2dac 38E6     		_NEXT 
 533              	
 534              	/******************************
 535              	    OR	  ( w w -- w )
 536              	 	Bitwise inclusive OR.
 537              	******************************/
 538 2dae 9E2D0000 		_HEADER ORR,2,"OR"
 538      024F5200 
 538      00BF
 539 2db8 57F8045B 		LDR	WP,[DSP],#4
 540 2dbc 46EA0506 		ORR	TOS,TOS,WP
 541 2dc0 2EE6     		_NEXT 
 542              	
 543              	/*****************************
 544              	    XOR	 ( w w -- w )
 545              	 	Bitwise exclusive OR.
 546              	*****************************/
 547 2dc2 B22D0000 		_HEADER XORR,3,"XOR"
 547      03584F52 
 547      00BF
 548 2dcc 57F8045B 		LDR	WP,[DSP],#4
 549 2dd0 86EA0506 		EOR	TOS,TOS,WP
 550 2dd4 24E6     		_NEXT 
 551              	
 552              	/**************************************************
 553              	    UM+	 ( w w -- w cy )
 554              	 	Add two numbers, return the sum and carry flag.
 555              	***************************************************/
 556 2dd6 C62D0000 		_HEADER UPLUS,3,"UM+"
 556      03554D2B 
 556      00BF
 557 2de0 3D68     		LDR	WP,[DSP]
 558 2de2 AD19     		ADDS	WP,WP,TOS
 559 2de4 4FF00006 		MOV	TOS,#0
 560 2de8 46F10006 		ADC	TOS,TOS,#0
 561 2dec 3D60     		STR	WP,[DSP]
 562 2dee 17E6     		_NEXT 
 563              	
 564              	/*********************************
 565              	    RSHIFT	 ( w # -- w )
 566              	 	arithmetic Right shift # bits.
 567              	**********************************/
 568 2df0 DA2D0000 		_HEADER RSHIFT,6,"RSHIFT"
 568      06525348 
 568      49465400 
 569 2dfc 57F8045B 		LDR	WP,[DSP],#4
 570 2e00 45FA06F6 		MOV	TOS,WP,ASR TOS
 571 2e04 0CE6     		_NEXT 
 572              	
ARM GAS  forth.s 			page 112


 573              	/****************************
 574              	    LSHIFT	 ( w # -- w )
 575              	 	Right shift # bits.
 576              	****************************/
 577 2e06 F42D0000 		_HEADER LSHIFT,6,"LSHIFT"
 577      064C5348 
 577      49465400 
 577      00BF
 578 2e14 57F8045B 		LDR	WP,[DSP],#4
 579 2e18 05FA06F6 		MOV	TOS,WP,LSL TOS
 580 2e1c 00E6     		_NEXT
 581              	
 582              	/*************************
 583              	    +	 ( w w -- w )
 584              	 	Add.
 585              	*************************/
 586 2e1e 0A2E0000 		_HEADER PLUS,1,"+"
 586      012B
 587 2e24 57F8045B 		LDR	WP,[DSP],#4
 588 2e28 2E44     		ADD	TOS,TOS,WP
 589 2e2a F9E5     		_NEXT 
 590              	
 591              	/************************
 592              	    -	 ( w w -- w )
 593              	 	Subtract.
 594              	************************/
 595 2e2c 222E0000 		_HEADER SUBB,1,"-"
 595      012D00BF 
 596 2e34 57F8045B 		LDR	WP,[DSP],#4
 597 2e38 C6EB0506 		RSB	TOS,TOS,WP
 598 2e3c F0E5     		_NEXT 
 599              	
 600              	/************************
 601              	    *	 ( w w -- w )
 602              	 	Multiply.
 603              	***********************/
 604 2e3e 302E0000 		_HEADER STAR,1,"*"
 604      012A
 605 2e44 57F8045B 		LDR	WP,[DSP],#4
 606 2e48 05FB06F6 		MUL	TOS,WP,TOS
 607 2e4c E8E5     		_NEXT 
 608              	
 609              	/***************************
 610              	    UM*	 ( w w -- ud )
 611              	 	Unsigned multiply.
 612              	****************************/
 613 2e4e 422E0000 		_HEADER UMSTA,3,"UM*"
 613      03554D2A 
 613      00BF
 614 2e58 3D68     		LDR	WP,[DSP]
 615 2e5a A6FB0523 		UMULL	T2,T3,TOS,WP
 616 2e5e 3A60     		STR	T2,[DSP]
 617 2e60 1E46     		MOV	TOS,T3
 618 2e62 DDE5     		_NEXT 
 619              	
 620              	/***************************
 621              	    M*	 ( w w -- d )
ARM GAS  forth.s 			page 113


 622              	 	signed multiply.
 623              		hold double result
 624              	***************************/
 625 2e64 522E0000 		_HEADER MSTAR,2,"M*"
 625      024D2A00 
 626 2e6c 3D68     		LDR	WP,[DSP]
 627 2e6e 86FB0523 		SMULL	T2,T3,TOS,WP
 628 2e72 3A60     		STR	T2,[DSP]
 629 2e74 1E46     		MOV	TOS,T3
 630 2e76 D3E5     		_NEXT 
 631              	
 632              	/***************************
 633              	    1+	 ( w -- w+1 )
 634              	 	Add 1.
 635              	***************************/
 636 2e78 682E0000 		_HEADER ONEP,2,"1+"
 636      02312B00 
 637 2e80 06F10106 		ADD	TOS,TOS,#1
 638 2e84 CCE5     		_NEXT 
 639              	
 640              	/***************************
 641              	    1-	 ( w -- w-1 )
 642              	 	Subtract 1.
 643              	***************************/
 644 2e86 7C2E0000 		_HEADER ONEM,2,"1-"
 644      02312D00 
 644      00BF
 645 2e90 A6F10106 		SUB	TOS,TOS,#1
 646 2e94 C4E5     		_NEXT 
 647              	
 648              	/***************************
 649              	    2+	 ( w -- w+2 )
 650              	 	Add 2.
 651              	**************************/
 652 2e96 8A2E0000 		_HEADER TWOP,2,"2+"
 652      02322B00 
 652      00BF
 653 2ea0 06F10206 		ADD	TOS,TOS,#2
 654 2ea4 BCE5     		_NEXT
 655              	
 656              	/**************************
 657              	    2-	 ( w -- w-2 )
 658              	 	Subtract 2.
 659              	**************************/
 660 2ea6 9A2E0000 		_HEADER TWOM,2,"2-"
 660      02322D00 
 660      00BF
 661 2eb0 A6F10206 		SUB	TOS,TOS,#2
 662 2eb4 B4E5     		_NEXT
 663              	
 664              	/***************************
 665              	    CELL+	( w -- w+4 )
 666              	 	Add CELLL.
 667              	***************************/
 668 2eb6 AA2E0000 		_HEADER CELLP,5,"CELL+"
 668      0543454C 
 668      4C2B
ARM GAS  forth.s 			page 114


 669 2ec0 06F10406 		ADD	TOS,TOS,#CELLL
 670 2ec4 ACE5     		_NEXT
 671              	
 672              	/***************************
 673              	    CELL-	( w -- w-4 )
 674              	 	Subtract CELLL.
 675              	**************************/
 676 2ec6 BA2E0000 		_HEADER CELLM,5,"CELL-"
 676      0543454C 
 676      4C2D
 677 2ed0 A6F10406 		SUB	TOS,TOS,#CELLL
 678 2ed4 A4E5     		_NEXT
 679              	
 680              	/**************************** 
 681              	    BL	( -- 32 )
 682              	 	Blank (ASCII space).
 683              	*****************************/
 684 2ed6 CA2E0000 		_HEADER BLANK,2,"BL"
 684      02424C00 
 684      00BF
 685 2ee0 47F8046D 		_PUSH
 686 2ee4 4FF02006 		MOV	TOS,#32
 687 2ee8 9AE5     		_NEXT 
 688              	
 689              	/**************************
 690              	    CELLS	( w -- w*4 )
 691              	 	Multiply CELLL 
 692              	***************************/
 693 2eea DA2E0000 		_HEADER CELLS,5,"CELLS"
 693      0543454C 
 693      4C53
 694 2ef4 4FEA8606 		LSL TOS,#2
 695 2ef8 92E5     		_NEXT
 696              	
 697              	/***************************
 698              	    CELL/	( w -- w/4 )
 699              	 	Divide by CELLL.
 700              	***************************/
 701 2efa EE2E0000 		_HEADER CELLSL,5,"CELL/"
 701      0543454C 
 701      4C2F
 702 2f04 4FEAA606 		ASR TOS,#2
 703 2f08 8AE5     		_NEXT
 704              	
 705              	/*************************
 706              	    2*	( w -- w*2 )
 707              	 	Multiply 2.
 708              	*************************/
 709 2f0a FE2E0000 		_HEADER TWOST,2,"2*"
 709      02322A00 
 709      00BF
 710 2f14 4FEA4606 		MOV	TOS,TOS,LSL#1
 711 2f18 82E5     		_NEXT
 712              	
 713              	/*************************
 714              	    2/	( w -- w/2 )
 715              	 	Divide by 2.
ARM GAS  forth.s 			page 115


 716              	***********************/
 717 2f1a 0E2F0000 		_HEADER TWOSL,2,"2/"
 717      02322F00 
 717      00BF
 718 2f24 4FEA6606 		MOV	TOS,TOS,ASR#1
 719 2f28 7AE5     		_NEXT
 720              	
 721              	/****************************
 722              	    ?DUP	( w -- w w | 0 )
 723              	 	Conditional duplicate.
 724              	*****************************/
 725 2f2a 1E2F0000 		_HEADER QDUP,4,"?DUP"
 725      043F4455 
 725      5000
 726 2f34 3500     		MOVS	WP,TOS
 727 2f36 18BF     		IT NE 
 728 2f38 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 729 2f3c 70E5     		_NEXT
 730              	
 731              	/***********************************
 732              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 733              	 	Rotate top 3 items.
 734              	*************************************/
 735 2f3e 2E2F0000 		_HEADER ROT,3,"ROT"
 735      03524F54 
 735      00BF
 736 2f48 3868     		LDR	T0,[DSP]  // w2 
 737 2f4a 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 738 2f4c 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 739 2f4e 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 740 2f50 66E5     		_NEXT
 741              	
 742              	/*********************************
 743              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 744              	 left rotate top 3 elements 
 745              	********************************/
 746 2f52 422F0000 		_HEADER NROT,4,"-ROT"
 746      042D524F 
 746      5400
 747 2f5c 7868     		LDR T0,[DSP,#4]
 748 2f5e 7E60     		STR TOS,[DSP,#4]	
 749 2f60 3E68     		LDR TOS,[DSP]
 750 2f62 3860     		STR T0,[DSP]
 751 2f64 5CE5     		_NEXT 
 752              	
 753              	/*********************************
 754              	    2DROP	( w1 w2 -- )
 755              	 	Drop top 2 items.
 756              	*********************************/
 757 2f66 562F0000 		_HEADER DDROP,5,"2DROP"
 757      05324452 
 757      4F50
 758 2f70 57F8046B 		_POP
 759 2f74 57F8046B 		_POP
 760 2f78 52E5     		_NEXT 
 761              	
 762              	/********************************
ARM GAS  forth.s 			page 116


 763              		3DROP ( w1 w2 w3 -- )
 764              		drop top 3 items 
 765              	********************************/
 766 2f7a 6A2F0000 		_HEADER TDROP,5,"3DROP"
 766      05334452 
 766      4F50
 767 2f84 07F10807 	    add DSP,#8 
 768 2f88 57F8046B 	    _POP 
 769 2f8c 48E5     	    _NEXT 
 770              	
 771              	/***********************************
 772              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 773              	 	Duplicate top 2 items.
 774              	************************************/
 775 2f8e 7E2F0000 		_HEADER DDUP,4,"2DUP"
 775      04324455 
 775      5000
 776 2f98 3868     		LDR	T0,[DSP] // w1
 777 2f9a 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 778 2f9e 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 779 2fa2 3DE5     		_NEXT
 780              	
 781              	/******************************
 782              	    D+	( d1 d2 -- d3 )
 783              	 	Add top 2 double numbers.
 784              	******************************/
 785 2fa4 922F0000 		_HEADER DPLUS,2,"D+"
 785      02442B00 
 786 2fac 57F8045B 		LDR	WP,[DSP],#4
 787 2fb0 57F8042B 		LDR	T2,[DSP],#4
 788 2fb4 3B68     		LDR	T3,[DSP]
 789 2fb6 ED18     		ADDS	WP,WP,T3
 790 2fb8 3D60     		STR	WP,[DSP]
 791 2fba 46EB0206 		ADC	TOS,TOS,T2
 792 2fbe 2FE5     		_NEXT
 793              	
 794              	/******************************
 795              		DABS ( d -- ud )
 796              		absolute value double 
 797              	*****************************/
 798 2fc0 A82F0000 		_HEADER DABS,4,"DABS"
 798      04444142 
 798      530000BF 
 799 2fcc 16F0004F 		tst TOS,#(1<<31)
 800 2fd0 09D0     		beq 9f 
 801 2fd2 6FEA0606 		mvn TOS,TOS 
 802 2fd6 3D68     		ldr WP,[DSP]
 803 2fd8 6FEA0505 		mvn WP,WP 
 804 2fdc 0135     		adds WP,#1
 805 2fde 3D60     		str WP,[DSP]
 806 2fe0 01D3     		bcc 9f 
 807 2fe2 06F10106 		add TOS,#1 
 808 2fe6 1BE5     	9:	_NEXT 
 809              	
 810              	/*****************************
 811              	  UD> ( d1 d2 -- f )
 812              	  unsigned compare double d1 > d2 
ARM GAS  forth.s 			page 117


 813              	******************************/
 814 2fe8 C42F0000 		_HEADER UDGREAT,3,"UD>"
 814      0355443E 
 815 2ff0 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 816 2ff4 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 817 2ff6 B042     		cmp T0,TOS 
 818 2ff8 02D8     		bhi 1f
 819 2ffa 04D4     		bmi 2f  
 820 2ffc A942     		cmp T1,WP 
 821 2ffe 02D9     		bls 2f 
 822 3000 4FF0FF36 	1:	mov TOS,#-1 
 823 3004 0CE5     		_NEXT 
 824 3006 4FF00006 	2:  mov TOS,#0 
 825 300a 09E5     		_NEXT 
 826              	
 827              	/******************************
 828              		D0= ( d -- f )
 829              		double 0= 
 830              	*****************************/
 831 300c EC2F0000 		_HEADER DZEQUAL,3,"D0="
 831      0344303D 
 832 3014 3046     		mov T0,TOS
 833 3016 57F8046B 		_POP 
 834 301a 46EA0006 		orr TOS,T0 
 835 301e 01D0     		beq 9f
 836 3020 6FF00006 		mvn TOS,#0 
 837 3024 FCE4     	9:	_NEXT 
 838              	
 839              	/*****************************
 840              	    NOT	 ( w -- !w )
 841              	 	1"s complement.
 842              	*****************************/
 843 3026 10300000 		_HEADER INVER,3,"NOT"
 843      034E4F54 
 843      00BF
 844 3030 6FEA0606 		MVN	TOS,TOS
 845 3034 F4E4     		_NEXT
 846              	
 847              	/*****************************
 848              	    NEGATE	( w -- -w )
 849              	 	2's complement.
 850              	***************************/
 851 3036 2A300000 		_HEADER NEGAT,6,"NEGATE"
 851      064E4547 
 851      41544500 
 851      00BF
 852 3044 C6F10006 		RSB	TOS,TOS,#0
 853 3048 EAE4     		_NEXT
 854              	
 855              	/***************************
 856              	    ABS	 ( w -- |w| )
 857              	 	Absolute.
 858              	**************************/
 859 304a 3A300000 		_HEADER ABSS,3,"ABS"
 859      03414253 
 859      00BF
 860 3054 16F0004F 		TST	TOS,#0x80000000
ARM GAS  forth.s 			page 118


 861 3058 18BF     		IT NE
 862 305a 7642     	    RSBNE   TOS,TOS,#0
 863 305c E0E4     		_NEXT
 864              	
 865              	/**************************
 866              		CLZ ( n - n )
 867              		count leading zeros 
 868              	**************************/
 869 305e 4E300000 		_HEADER CLZ,3,"CLZ"
 869      03434C5A 
 869      00BF
 870 3068 B6FA86F6 		clz TOS,TOS 
 871 306c D8E4     		_NEXT 
 872              	
 873              	/*************************
 874              		CTZ ( n -- n )
 875              		count trailing zeros 
 876              	************************/
 877 306e 62300000 		_HEADER CTZ,3,"CTZ"
 877      0343545A 
 877      00BF
 878 3078 80EA0000 		eor T0,T0 
 879 307c 16F0010F 	1:  tst TOS,#1 
 880 3080 04D1     		bne 2f 
 881 3082 4FEA5606 		lsr TOS,#1 
 882 3086 00F10100 		add T0,#1 
 883 308a F7E7     		b 1b 
 884 308c 0646     	2:  mov TOS,T0 
 885 308e C7E4     		_NEXT 
 886              	
 887              	
 888              	/*******************
 889              	  0= ( w -- f )
 890              	 TOS==0?
 891              	*******************/
 892 3090 72300000 		_HEADER ZEQUAL,2,"0="
 892      02303D00 
 893 3098 16B9     		cbnz TOS,1f
 894 309a 4FF0FF36 		mov TOS,#-1
 895 309e BFE4     		_NEXT 
 896 30a0 86EA0606 	1:  eor TOS,TOS,TOS  
 897 30a4 BCE4     		_NEXT 	
 898              	
 899              	/*********************
 900              	    =	 ( w w -- t )
 901              	 	Equal?
 902              	*********************/
 903 30a6 94300000 		_HEADER EQUAL,1,"="
 903      013D
 904 30ac 57F8045B 		LDR	WP,[DSP],#4
 905 30b0 AE42     		CMP	TOS,WP
 906 30b2 0CBF     		ITE EQ 
 907 30b4 6FF00006 	    MVNEQ	TOS,#0
 908 30b8 0026     		MOVNE	TOS,#0
 909 30ba B1E4     		_NEXT
 910              	
 911              	/************************
ARM GAS  forth.s 			page 119


 912              		<> ( w w -- f )
 913              		different?
 914              	************************/
 915 30bc AA300000 		_HEADER DIFF,2,"<>"
 915      023C3E00 
 916 30c4 3046     		mov T0,TOS 
 917 30c6 57F8046B 		_POP 
 918 30ca 86EA0006 		eor TOS,T0
 919 30ce B6FA86F0 		clz T0,TOS 
 920 30d2 06FA00F6 		lsl TOS,T0 
 921 30d6 4FEAE676 		asr TOS,#31 
 922 30da A1E4     		_NEXT 
 923              	
 924              	/************************
 925              	    U<	 ( w w -- t )
 926              	 	Unsigned less?
 927              	*************************/
 928 30dc C0300000 		_HEADER ULESS,2,"U<"
 928      02553C00 
 929 30e4 57F8045B 		LDR	WP,[DSP],#4
 930 30e8 B542     		CMP	WP,TOS
 931 30ea 34BF     		ITE CC 
 932 30ec 6FF00006 		MVNCC	TOS,#0
 933 30f0 0026     		MOVCS	TOS,#0
 934 30f2 95E4     		_NEXT
 935              	
 936              	/**********************
 937              	    <	( w w -- t )
 938              	 	Less?
 939              	**********************/
 940 30f4 E0300000 		_HEADER LESS,1,"<"
 940      013C00BF 
 941 30fc 57F8045B 		LDR	WP,[DSP],#4
 942 3100 B542     		CMP	WP,TOS
 943 3102 B4BF     	    ITE LT
 944 3104 6FF00006 		MVNLT	TOS,#0
 945 3108 0026     		MOVGE	TOS,#0
 946 310a 89E4     		_NEXT 
 947              	
 948              	/**********************
 949              		U> ( u u -- t|f )
 950              	    unsigned greater 
 951              	**********************/
 952 310c F8300000 		_HEADER UGREAT,2,"U>"
 952      02553E00 
 953 3114 57F8045B 		LDR WP,[DSP],#4 
 954 3118 AE42     		CMP TOS,WP 
 955 311a 34BF     		ITE CC  
 956 311c 6FF00006 		MVNCC TOS,#0 
 957 3120 0026     		MOVCS TOS,#0
 958 3122 7DE4     		_NEXT 
 959              	
 960              	/***********************
 961              	    >	( w w -- t )
 962              	 	greater?
 963              	***********************/
 964 3124 10310000 		_HEADER GREAT,1,">"
ARM GAS  forth.s 			page 120


 964      013E00BF 
 965 312c 57F8045B 		LDR	WP,[DSP],#4
 966 3130 B542     		CMP	WP,TOS
 967 3132 CCBF     		ITE GT
 968 3134 6FF00006 	    MVNGT	TOS,#0
 969 3138 0026     		MOVLE	TOS,#0
 970 313a 71E4     		_NEXT
 971              	
 972              	/***************************
 973              	    MAX	 ( w w -- max )
 974              	 	Leave maximum.
 975              	***************************/
 976 313c 28310000 		_HEADER MAX,3,"MAX"
 976      034D4158 
 977 3144 57F8045B 		LDR	WP,[DSP],#4
 978 3148 B542     		CMP	WP,TOS
 979 314a C8BF     		IT GT 
 980 314c 2E46     		MOVGT	TOS,WP
 981 314e 67E4     		_NEXT 
 982              	
 983              	/**************************
 984              	    MIN	 ( w w -- min )
 985              	 	Leave minimum.
 986              	**************************/
 987 3150 40310000 		_HEADER MIN,3,"MIN"
 987      034D494E 
 988 3158 57F8045B 		LDR	WP,[DSP],#4
 989 315c B542     		CMP	WP,TOS
 990 315e B8BF     		IT LT
 991 3160 2E46     		MOVLT	TOS,WP
 992 3162 5DE4     		_NEXT
 993              	
 994              	/***********************
 995              	    +!	 ( w a -- )
 996              	 	Add to memory.
 997              	***********************/
 998 3164 54310000 		_HEADER PSTOR,2,"+!"
 998      022B2100 
 999 316c 57F8045B 		LDR	WP,[DSP],#4
 1000 3170 3268     		LDR	T2,[TOS]
 1001 3172 2A44     		ADD	T2,T2,WP
 1002 3174 3260     		STR	T2,[TOS]
 1003 3176 57F8046B 		_POP
 1004 317a 51E4     		_NEXT
 1005              	
 1006              	/************************
 1007              	    2!	 ( d a -- )
 1008              	 	Store double number.
 1009              	*************************/
 1010 317c 68310000 		_HEADER DSTOR,2,"2!"
 1010      02322100 
 1011 3184 57F8045B 		LDR	WP,[DSP],#4
 1012 3188 57F8042B 		LDR	T2,[DSP],#4
 1013 318c 46F8045B 		STR	WP,[TOS],#4
 1014 3190 3260     		STR	T2,[TOS]
 1015 3192 57F8046B 		_POP
 1016 3196 43E4     		_NEXT
ARM GAS  forth.s 			page 121


 1017              	
 1018              	/************************
 1019              	    2@	 ( a -- d )
 1020              	 	Fetch double number.
 1021              	************************/
 1022 3198 80310000 		_HEADER DAT,2,"D@"
 1022      02444000 
 1023 31a0 7568     		LDR	WP,[TOS,#4]
 1024 31a2 47F8045D 		STR	WP,[DSP,#-4]!
 1025 31a6 3668     		LDR	TOS,[TOS]
 1026 31a8 3AE4     		_NEXT
 1027              	
 1028              	/***************************
 1029              	    COUNT	( b -- b+1 c )
 1030              	 	Fetch length of string.
 1031              	****************************/
 1032 31aa 9C310000 		_HEADER COUNT,5,"COUNT"
 1032      05434F55 
 1032      4E54
 1033 31b4 16F8015B 		LDRB	WP,[TOS],#1
 1034 31b8 47F8046D 		_PUSH
 1035 31bc 2E46     		MOV	TOS,WP
 1036 31be 2FE4     		_NEXT
 1037              	
 1038              	/******************************
 1039              	    DNEGATE	( d -- -d )
 1040              	 	Negate double number.
 1041              	**************************/
 1042 31c0 AE310000 		_HEADER DNEGA,7,"DNEGATE"
 1042      07444E45 
 1042      47415445 
 1043 31cc 3D68     		LDR	WP,[DSP]
 1044 31ce A2EB0202 		SUB	T2,T2,T2
 1045 31d2 551B     		SUBS WP,T2,WP
 1046 31d4 62EB0606 		SBC	TOS,T2,TOS
 1047 31d8 3D60     		STR	WP,[DSP]
 1048 31da 21E4     		_NEXT
 1049              	
 1050              	/******************************
 1051              	  System and user variables
 1052              	******************************/
 1053              	
 1054              	/*******************************
 1055              	  doVAR	( -- a )
 1056              	  Run time routine for VARIABLE and CREATE.
 1057              	hidden word used by compiler
 1058              	********************************/
 1059              	DOVAR:
 1060 31dc 47F8046D 		_PUSH
 1061 31e0 6646     		MOV TOS,IP
 1062 31e2 0CF1040C 		ADD IP,IP,#4 
 1063 31e6 1EE4     		B UNNEST 
 1064              	
 1065              	/**********************************
 1066              	    doCON	( -- a ) 
 1067              	 	Run time routine for CONSTANT.
 1068              	hidden word used by compiler 
ARM GAS  forth.s 			page 122


 1069              	***********************************/
 1070              	DOCON:
 1071 31e8 47F8046D 		_PUSH
 1072 31ec 5CF8046B 		LDR.W TOS,[IP],#4 
 1073 31f0 19E4     		B UNNEST 
 1074              	
 1075              	/***********************
 1076              	  system variables 
 1077              	***********************/
 1078              	
 1079              	/**************************
 1080              	 SEED ( -- a)
 1081              	 return PRNG seed address 
 1082              	**************************/
 1083 31f2 C4310000 		_HEADER SEED,4,"SEED"
 1083      04534545 
 1083      4400
 1084 31fc 47F8046D 		_PUSH 
 1085 3200 04F10406 		ADD TOS,UP,#RNDSEED
 1086 3204 0CE4     		_NEXT 	
 1087              	
 1088              	/****************************************
 1089              	  MSEC ( -- a)
 1090              	 return address of milliseconds counter
 1091              	****************************************/
 1092 3206 F6310000 		_HEADER MSEC,4,"MSEC"
 1092      044D5345 
 1092      4300
 1093 3210 47F8046D 	    _PUSH
 1094 3214 04F10806 	    ADD TOS,UP,#TICKS
 1095 3218 02E4     	    _NEXT 
 1096              	
 1097              	/*************************
 1098              	 TIMER ( -- a )
 1099              	 count down timer 
 1100              	**********************/
 1101 321a 0A320000 		_HEADER TIMER,5,"TIMER"
 1101      0554494D 
 1101      4552
 1102 3224 47F8046D 		 _PUSH 
 1103 3228 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1104 322c FFF7F8BB 	    _NEXT
 1105              	
 1106              	/*****************************
 1107              	    'BOOT	 ( -- a )
 1108              	 	boot up application vector 
 1109              	*****************************/
 1110 3230 1E320000 		_HEADER TBOOT,5,"'BOOT"
 1110      0527424F 
 1110      4F5400BF 
 1111 323c 47F8046D 		_PUSH
 1112 3240 04F11006 		ADD	TOS,UP,#BOOT 
 1113 3244 FFF7ECBB 		_NEXT
 1114              		
 1115              	/********************************************	
 1116              	    BASE	( -- a )
 1117              	 	Storage of the radix base for numeric I/O.
ARM GAS  forth.s 			page 123


 1118              	**********************************************/
 1119 3248 34320000 		_HEADER BASE,4,"BASE"
 1119      04424153 
 1119      450000BF 
 1120 3254 47F8046D 		_PUSH
 1121 3258 04F11C06 		ADD	TOS,UP,#NBASE
 1122 325c FFF7E0BB 		_NEXT
 1123              	
 1124              	/*****************************************************
 1125              	    temp	 ( -- a )
 1126              	 	A temporary storage location used in parse and find.
 1127              	hidden word for internal use
 1128              	********************************************************/
 1129              	TEMP:
 1130 3260 47F8046D 		_PUSH
 1131 3264 04F12006 		ADD	TOS,UP,#TMP
 1132 3268 FFF7DABB 		_NEXT
 1133              	
 1134              	/*******************************************
 1135              	    SPAN	( -- a )
 1136              	 	Hold character count received by EXPECT.
 1137              	********************************************/
 1138 326c 4C320000 		_HEADER SPAN,4,"SPAN"
 1138      04535041 
 1138      4E0000BF 
 1139 3278 47F8046D 		_PUSH
 1140 327c 04F12406 		ADD	TOS,UP,#CSPAN
 1141 3280 FFF7CEBB 		_NEXT
 1142              	
 1143              	/***********************************************************
 1144              	    >IN	 ( -- a )
 1145              	 	Hold the character pointer while parsing input stream.
 1146              	***********************************************************/
 1147 3284 70320000 		_HEADER INN,3,">IN"
 1147      033E494E 
 1148 328c 47F8046D 		_PUSH
 1149 3290 04F12806 		ADD	TOS,UP,#TOIN
 1150 3294 FFF7C4BB 		_NEXT
 1151              	
 1152              	/**************************************
 1153              	    #TIB	( -- a )
 1154              	 	Hold the current count and address 
 1155              		of the terminal input buffer.
 1156              	**************************************/
 1157 3298 88320000 		_HEADER NTIB,4,"#TIB"
 1157      04235449 
 1157      420000BF 
 1158 32a4 47F8046D 		_PUSH
 1159 32a8 04F12C06 		ADD	TOS,UP,#NTIBB
 1160 32ac FFF7B8BB 		_NEXT
 1161              	
 1162              	/******************************
 1163              	    'EVAL	( -- a )
 1164              	 	Execution vector of EVAL.
 1165              	*******************************/
 1166 32b0 9C320000 		_HEADER TEVAL,5,"'EVAL"
 1166      05274556 
ARM GAS  forth.s 			page 124


 1166      414C00BF 
 1167 32bc 47F8046D 		_PUSH
 1168 32c0 04F13406 		ADD	TOS,UP,#EVAL
 1169 32c4 FFF7ACBB 		_NEXT
 1170              	
 1171              	/*********************************
 1172              	    HLD	 ( -- a )
 1173              	 	Hold a pointer in building a 
 1174              		numeric output string.
 1175              	*********************************/
 1176 32c8 B4320000 		_HEADER HLD,3,"HLD"
 1176      03484C44 
 1177 32d0 47F8046D 		_PUSH
 1178 32d4 04F13806 		ADD	TOS,UP,#VHOLD
 1179 32d8 FFF7A2BB 		_NEXT
 1180              	
 1181              	/**********************************
 1182              	    CONTEXT	( -- a )
 1183              	 	A area to specify vocabulary 
 1184              		search order.
 1185              	**********************************/
 1186 32dc CC320000 		_HEADER CNTXT,7,"CONTEXT"
 1186      07434F4E 
 1186      54455854 
 1187              	CRRNT:
 1188 32e8 47F8046D 		_PUSH
 1189 32ec 04F13C06 		ADD	TOS,UP,#CTXT
 1190 32f0 FFF796BB 		_NEXT
 1191              	
 1192              	/******************************
 1193              	    CP	( -- a )
 1194              	 	Point to top name in RAM 
 1195              		vocabulary.
 1196              	******************************/
 1197 32f4 E0320000 		_HEADER CPP,2,"CP"
 1197      02435000 
 1198 32fc 47F8046D 		_PUSH
 1199 3300 04F14406 		ADD	TOS,UP,#USER_CTOP
 1200 3304 FFF78CBB 		_NEXT
 1201              	
 1202              	/****************************
 1203              	   FCP ( -- a )
 1204              	  Point ot top of Forth 
 1205              	  system dictionary
 1206              	****************************/
 1207 3308 F8320000 		_HEADER FCP,3,"FCP"
 1207      03464350 
 1208 3310 47F8046D 		_PUSH 
 1209 3314 04F14006 		ADD TOS,UP,#FORTH_CTOP 
 1210 3318 FFF782BB 		_NEXT 
 1211              	
 1212              	/***************************
 1213              	    LAST	( -- a )
 1214              	 	Point to the last name 
 1215              		in the name dictionary.
 1216              	***************************/
 1217 331c 0C330000 		_HEADER LAST,4,"LAST"
ARM GAS  forth.s 			page 125


 1217      044C4153 
 1217      540000BF 
 1218 3328 47F8046D 		_PUSH
 1219 332c 04F14806 		ADD	TOS,UP,#LASTN
 1220 3330 FFF776BB 		_NEXT
 1221              	
 1222              	
 1223              	/***********************
 1224              		system constants 
 1225              	***********************/
 1226              	
 1227              	/********************************
 1228              		USER-BEGIN ( -- a )
 1229              	  where user area begin in RAM
 1230              	********************************/
 1231 3334 20330000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1231      0A555345 
 1231      522D4245 
 1231      47494E00 
 1232 3344 47F8046D 		_PUSH 
 1233 3348 DFF80460 		ldr TOS,USR_BGN_ADR 
 1234 334c FFF768BB 		_NEXT 
 1235              	USR_BGN_ADR:
 1236 3350 12050020 	.word  DTOP 
 1237              	
 1238              	/*********************************
 1239              	  USER_END ( -- a )
 1240              	  where user area end in RAM 
 1241              	******************************/
 1242 3354 38330000 		_HEADER USER_END,8,"USER-END"
 1242      08555345 
 1242      522D454E 
 1242      440000BF 
 1243 3364 47F8046D 		_PUSH 
 1244 3368 DFF80460 		ldr TOS,USER_END_ADR 
 1245 336c FFF758BB 		_NEXT 
 1246              	USER_END_ADR:
 1247 3370 7C800120 		.word DEND 
 1248              	
 1249              	
 1250              	/* *********************
 1251              	  Common functions
 1252              	***********************/
 1253              	
 1254              	/********************************
 1255              	    WITHIN	( u ul uh -- t )
 1256              	 	Return true if u is within 
 1257              		the range of ul and uh.
 1258              	********************************/
 1259 3374 58330000 		_HEADER WITHI,6,"WITHIN"
 1259      06574954 
 1259      48494E00 
 1260 3380 504700BF 		_NEST
 1261 3384 852D0000 		_ADR	OVER
 1262 3388 352E0000 		_ADR	SUBB
 1263 338c DD2C0000 		_ADR	TOR
 1264 3390 352E0000 		_ADR	SUBB
ARM GAS  forth.s 			page 126


 1265 3394 992C0000 		_ADR	RFROM
 1266 3398 E5300000 		_ADR	ULESS
 1267 339c 272A0000 		_UNNEST
 1268              	
 1269              	//  Divide
 1270              	
 1271              	/*************************************
 1272              	    UM/MOD	( udl udh u -- ur uq )
 1273              	 	Unsigned divide of a double by a 
 1274              		single. Return mod and quotient.
 1275              	**************************************/
 1276 33a0 78330000 		_HEADER UMMOD,6,"UM/MOD"
 1276      06554D2F 
 1276      4D4F4400 
 1277 33ac 4FF00103 		MOV	T3,#1
 1278 33b0 57F8045B 		LDR	WP,[DSP],#4
 1279 33b4 3A68     		LDR	T2,[DSP]
 1280              	UMMOD0:
 1281 33b6 9218     		ADDS	T2,T2,T2
 1282 33b8 6D41     		ADCS	WP,WP,WP
 1283 33ba 04D3     		BCC	UMMOD1
 1284 33bc A5EB0605 		SUB	WP,WP,TOS
 1285 33c0 02F10102 		ADD	T2,T2,#1
 1286 33c4 04E0     		B UMMOD2
 1287              	UMMOD1:
 1288 33c6 AD1B     		SUBS	WP,WP,TOS 
 1289 33c8 28BF     		IT CS 
 1290 33ca 0132     		ADDCS	T2,T2,#1
 1291 33cc 00D2     		BCS	UMMOD2
 1292 33ce 3544     		ADD	WP,WP,TOS
 1293              	UMMOD2:
 1294 33d0 DB18     		ADDS	T3,T3,T3
 1295 33d2 F0D3     		BCC	UMMOD0
 1296 33d4 1646     		MOV	TOS,T2
 1297 33d6 3D60     		STR	WP,[DSP]
 1298 33d8 FFF722BB 		_NEXT
 1299              	
 1300              	/****************************
 1301              	    M/MOD	( d n -- r q )
 1302              	 	Signed floored divide 
 1303              		of double by single. 
 1304              		Return mod and quotient.
 1305              	****************************/
 1306 33dc A4330000 		_HEADER MSMOD,5,"M/MOD"
 1306      054D2F4D 
 1306      4F4400BF 
 1307 33e8 504700BF 		_NEST
 1308 33ec 612D0000 		_ADR	DUPP
 1309 33f0 952D0000 		_ADR	ZLESS
 1310 33f4 612D0000 		_ADR	DUPP
 1311 33f8 DD2C0000 		_ADR	TOR
 1312 33fc 272C0000 		_QBRAN MMOD1
 1312      14340000 
 1313 3404 45300000 		_ADR	NEGAT
 1314 3408 DD2C0000 		_ADR	TOR
 1315 340c CD310000 		_ADR	DNEGA
 1316 3410 992C0000 		_ADR	RFROM
ARM GAS  forth.s 			page 127


 1317              	MMOD1:
 1318 3414 DD2C0000 		_ADR	TOR
 1319 3418 612D0000 		_ADR	DUPP
 1320 341c 952D0000 		_ADR	ZLESS
 1321 3420 272C0000 		_QBRAN MMOD2
 1321      30340000 
 1322 3428 C92C0000 		_ADR	RAT
 1323 342c 252E0000 		_ADR	PLUS
 1324              	MMOD2:
 1325 3430 992C0000 		_ADR	RFROM
 1326 3434 AD330000 		_ADR	UMMOD
 1327 3438 992C0000 		_ADR	RFROM
 1328 343c 272C0000 		_QBRAN	MMOD3
 1328      50340000 
 1329 3444 712D0000 		_ADR	SWAP
 1330 3448 45300000 		_ADR	NEGAT
 1331 344c 712D0000 		_ADR	SWAP
 1332              	MMOD3:   
 1333 3450 272A0000 		_UNNEST
 1334              	
 1335              	/****************************
 1336              		S>D ( n -- d )
 1337              		convert single to double 
 1338              	*****************************/
 1339 3454 E0330000 		_HEADER STOD,3,"S>D"
 1339      03533E44 
 1340 345c 47F8046D 		_PUSH 
 1341 3460 4FEAE676 		ASR TOS,#31
 1342 3464 FFF7DCBA 		_NEXT 
 1343              	
 1344              	/****************************
 1345              		D2* ( d -- d<<1 )
 1346              		double * 2 
 1347              	***************************/
 1348 3468 58340000 		_HEADER D2STAR,3,"D2*"
 1348      0344322A 
 1349 3470 3868     		ldr T0,[DSP]
 1350 3472 4000     		lsls T0,#1
 1351 3474 3860     		str T0,[DSP]
 1352 3476 4FEA4606 		lsl TOS,#1
 1353 347a 46F10006 		adc TOS,#0
 1354 347e FFF7CFBA 		_NEXT 
 1355              	
 1356              	/****************************
 1357              		D2/  ( d -- d>>1 )
 1358              		double signed divide by 2 
 1359              	*****************************/
 1360 3482 6C340000 		_HEADER D2SL,3,"D2/"
 1360      0344322F 
 1360      00BF
 1361 348c 3868     		ldr T0,[DSP]
 1362 348e 7610     		asrs TOS,#1
 1363 3490 4FEA3000 		rrx T0,T0 
 1364 3494 3860     		str T0,[DSP]
 1365 3496 FFF7C3BA 		_NEXT 
 1366              	
 1367              	/***************************
ARM GAS  forth.s 			page 128


 1368              		D/MOD  ( d+ n+ - r+ qd+ )
 1369              		unsigned double division
 1370              		and modulo 
 1371              		output:
 1372              			qd+ = d+ / n+
 1373              			r+ = qd+ - (d+ * n+ )
 1374              	***************************/
 1375 349a 86340000 		_HEADER DSLMOD,5,"D/MOD"
 1375      05442F4D 
 1375      4F44
 1376 34a4 3D68     		ldr WP,[DSP]  // d+ high 
 1377 34a6 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1378 34a8 4FF02002 		mov T2,#32 // shift counter  
 1379 34ac 81EA0101 		eor T1,T1 // quotient T0:T1  
 1380 34b0 25B9     		cbnz WP,1f    
 1381 34b2 82EA0202 		eor T2,T2 // nos shifting required 
 1382 34b6 0546     		mov WP,T0 
 1383 34b8 80EA0000 		eor T0,T0 
 1384 34bc 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1385 34be 15F0004F 	    tst WP,#(1<<31) 
 1386 34c2 06D1     		bne 2f
 1387 34c4 4918     		adds T1,T1,T1 
 1388 34c6 4041     		adcs T0,T0,T0 
 1389 34c8 45EB0505 		adc WP,WP,WP 
 1390 34cc A2F10102 		sub T2,#1 
 1391 34d0 F4E7     		b 1b 
 1392 34d2 B5FBF6F3 	2:  udiv T3,WP,TOS
 1393 34d6 41EA0301 		orr T1,T3   // append partial quotient 
 1394 34da 06FB03F3 		mul T3,TOS
 1395 34de A5EB0305 		sub WP,T3 //remainder 
 1396 34e2 02B1     		cbz T2,8f 
 1397 34e4 EAE7     		b 1b 
 1398 34e6 7D60     	8:	str WP,[DSP,#4] // remainder 
 1399 34e8 3960     		str T1,[DSP]  // q lo 
 1400 34ea 0646     		mov TOS,T0  // q hi 		
 1401 34ec FFF798BA 		_NEXT 
 1402              	
 1403              	
 1404              	/****************************
 1405              		D/  ( ud u -- udq )
 1406              		divide unsigned double 
 1407              		by unsigned single 
 1408              		return double quotient
 1409              		rounded to nearest integer 
 1410              	****************************/
 1411 34f0 9E340000 		_HEADER DSLASH,2,"D/"
 1411      02442F00 
 1412 34f8 504700BF 		_NEST 
 1413 34fc 612D0000 		_ADR DUPP 
 1414 3500 E72B0000 		_DOLIT 1 
 1414      01000000 
 1415 3508 FD2D0000 		_ADR RSHIFT 
 1416 350c DD2C0000 		_ADR TOR 
 1417 3510 A5340000 		_ADR DSLMOD 
 1418 3514 492F0000 		_ADR ROT 
 1419 3518 992C0000 		_ADR RFROM 
 1420 351c 2D310000 		_ADR GREAT 
ARM GAS  forth.s 			page 129


 1421 3520 272C0000 		_QBRAN 9f
 1421      38350000 
 1422 3528 E72B0000 		_DOLIT 1 
 1422      01000000 
 1423 3530 5D340000 		_ADR STOD 
 1424 3534 AD2F0000 		_ADR DPLUS 
 1425 3538 272A0000 	9:	_UNNEST 
 1426              	
 1427              	
 1428              	/****************************
 1429              		D* ( d s -- d )
 1430              	    multiply a double 
 1431              		by a single 
 1432              	****************************/
 1433 353c F4340000 		_HEADER DSTAR,2,"D*"
 1433      02442A00 
 1434              	/*
 1435              		_NEST 
 1436              		_ADR NROT 
 1437              		_ADR DUPP 
 1438              		_ADR TOR 
 1439              		_ADR DABS
 1440              		_ADR SWAP  
 1441              		_ADR ROT   
 1442              		_ADR DUPP
 1443              		_ADR TOR
 1444              		_ADR MSTAR
 1445              		_ADR ROT
 1446              		_ADR RFROM 
 1447              		_ADR STAR 
 1448              		_ADR PLUS
 1449              		_ADR RFROM 
 1450              		_ADR ZLESS 
 1451              		_QBRAN 9f
 1452              		_ADR DNEGA   
 1453              	9:	_UNNEST 
 1454              	*/
 1455 3544 57F8040B 		ldr T0,[DSP],#4
 1456 3548 3968     		ldr T1,[DSP]
 1457 354a 3860     		str T0,[DSP] 
 1458 354c 83EA0303 		eor T3,T3 
 1459 3550 10F0004F 		tst T0,#(1<<31)
 1460 3554 02D0     		beq 1f 
 1461              		// DNEGATE 
 1462 3556 591A     		subs T1,T3,T1  
 1463 3558 63EB0000 		sbc T0,T3,T0 
 1464 355c 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1465 3560 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1466 3564 0E44     		add TOS,T1  // TOS:T2 product  
 1467 3566 3868     		ldr r0,[DSP]
 1468 3568 10F0004F 		tst T0,#(1<<31)
 1469 356c 02D0     		beq 2f 
 1470              		// DNEGATE product 
 1471 356e 9A1A     		subs T2,T3,T2  
 1472 3570 63EB0606 		sbc TOS,T3,TOS 
 1473 3574 3A60     	2:  str T2,[DSP]
 1474 3576 FFF753BA 		_NEXT 
ARM GAS  forth.s 			page 130


 1475              	
 1476              	
 1477              	/****************************
 1478              	   /MOD	( n n -- r q )
 1479              		Signed divide. Return
 1480              		mod and quotient.
 1481              	****************************/
 1482 357a 40350000 		_HEADER SLMOD,4,"/MOD"
 1482      042F4D4F 
 1482      4400
 1483 3584 504700BF 		_NEST
 1484 3588 852D0000 		_ADR	OVER
 1485 358c 952D0000 		_ADR	ZLESS
 1486 3590 712D0000 		_ADR	SWAP
 1487 3594 E9330000 		_ADR	MSMOD
 1488 3598 272A0000 		_UNNEST
 1489              	
 1490              	/**************************
 1491              	    MOD	 ( n n -- r )
 1492              	 	Signed divide. Return
 1493              		mod only.
 1494              	**************************/
 1495 359c 7E350000 		_HEADER MODD,3,"MOD"
 1495      034D4F44 
 1496 35a4 504700BF 		_NEST
 1497 35a8 85350000 		_ADR	SLMOD
 1498 35ac 512D0000 		_ADR	DROP
 1499 35b0 272A0000 		_UNNEST
 1500              	
 1501              	/*************************
 1502              	    /	   ( n n -- q )
 1503              	 	Signed divide. Return
 1504              		quotient only.
 1505              	**************************/
 1506 35b4 A0350000 		_HEADER SLASH,1,"/"
 1506      012F00BF 
 1507 35bc 504700BF 		_NEST
 1508 35c0 85350000 		_ADR	SLMOD
 1509 35c4 712D0000 		_ADR	SWAP
 1510 35c8 512D0000 		_ADR	DROP
 1511 35cc 272A0000 		_UNNEST
 1512              	
 1513              	//******************************
 1514              	//  */MOD	( n1 n2 n3 -- r q )
 1515              	/* 	Multiply n1 and n2, then 
 1516              		divide by n3. Return 
 1517              		mod and quotient.
 1518              	******************************/
 1519 35d0 B8350000 		_HEADER SSMOD,5,"*/MOD"
 1519      052A2F4D 
 1519      4F4400BF 
 1520 35dc 504700BF 		_NEST
 1521 35e0 DD2C0000 		_ADR	TOR
 1522 35e4 6D2E0000 		_ADR	MSTAR
 1523 35e8 992C0000 		_ADR	RFROM
 1524 35ec E9330000 		_ADR	MSMOD
 1525 35f0 272A0000 		_UNNEST
ARM GAS  forth.s 			page 131


 1526              	
 1527              	//*******************************
 1528              	//  */ ( n1 n2 n3 -- q )
 1529              	/* 	Multiply n1 by n2, then 
 1530              		divide by n3. Return quotient
 1531              		only.
 1532              	*******************************/
 1533 35f4 D4350000 		_HEADER STASL,2,"*/"
 1533      022A2F00 
 1534 35fc 504700BF 		_NEST
 1535 3600 DD350000 		_ADR	SSMOD
 1536 3604 712D0000 		_ADR	SWAP
 1537 3608 512D0000 		_ADR	DROP
 1538 360c 272A0000 		_UNNEST
 1539              	
 1540              	/*******************
 1541              	  Miscellaneous
 1542              	*******************/
 1543              	
 1544              	/*************************
 1545              	    ALIGNED	( b -- a )
 1546              	 	Align address to the 
 1547              		cell boundary.
 1548              	**************************/
 1549 3610 F8350000 		_HEADER ALGND,7,"ALIGNED"
 1549      07414C49 
 1549      474E4544 
 1550 361c 06F10306 		ADD	TOS,TOS,#3
 1551 3620 6FF00305 		MVN	WP,#3
 1552 3624 06EA0506 		AND	TOS,TOS,WP
 1553 3628 FFF7FAB9 		_NEXT
 1554              	
 1555              	/****************************
 1556              	    >CHAR	( c -- c )
 1557              	 	Filter non-printing 
 1558              		characters.
 1559              	****************************/
 1560 362c 14360000 		_HEADER TCHAR,5,">CHAR"
 1560      053E4348 
 1560      415200BF 
 1561 3638 504700BF 		_NEST
 1562 363c E72B0000 		_DOLIT  0x7F
 1562      7F000000 
 1563 3644 A52D0000 		_ADR	ANDD
 1564 3648 612D0000 		_ADR	DUPP	// mask msb
 1565 364c E12E0000 		_ADR	BLANK
 1566 3650 E72B0000 		_DOLIT 	127
 1566      7F000000 
 1567 3658 81330000 		_ADR	WITHI	// check for printable
 1568 365c 31300000 		_ADR	INVER
 1569 3660 272C0000 		_QBRAN	TCHA1
 1569      74360000 
 1570 3668 512D0000 		_ADR	DROP
 1571 366c E72B0000 		_DOLIT 	'_'	// replace non-printables
 1571      5F000000 
 1572              	TCHA1:
 1573 3674 272A0000 		  _UNNEST
ARM GAS  forth.s 			page 132


 1574              	
 1575              	/************************
 1576              	    DEPTH	( -- n )
 1577              	 	Return the depth of
 1578              		the data stack.
 1579              	***********************/
 1580 3678 30360000 		_HEADER DEPTH,5,"DEPTH"
 1580      05444550 
 1580      544800BF 
 1581 3684 4FF68062 		_MOV32 T2,SPP 
 1581      C2F20102 
 1582 368c A2EB0702 		SUB	T2,T2,DSP
 1583 3690 47F8046D 		_PUSH
 1584 3694 4FEAA206 		ASR	TOS,T2,#2
 1585 3698 FFF7C2B9 		_NEXT
 1586              	
 1587              	/*****************************
 1588              	    PICK	( ... +n -- ... w )
 1589              	 	Copy the nth stack item 
 1590              		to tos.
 1591              	******************************/
 1592 369c 7C360000 		_HEADER PICK,4,"PICK"
 1592      04504943 
 1592      4B0000BF 
 1593 36a8 504700BF 		_NEST
 1594 36ac 812E0000 		_ADR	ONEP
 1595 36b0 F52E0000 		_ADR	CELLS
 1596 36b4 2D2D0000 		_ADR	SPAT
 1597 36b8 252E0000 		_ADR	PLUS
 1598 36bc 6D2C0000 		_ADR	AT
 1599 36c0 272A0000 		_UNNEST
 1600              	
 1601              	/*********************
 1602              	  Memory access
 1603              	*********************/
 1604              	
 1605              	/*************************
 1606              	    HERE	( -- a )
 1607              	 	Return the top of
 1608              		the code dictionary.
 1609              	*************************/
 1610 36c4 A0360000 		_HEADER HERE,4,"HERE"
 1610      04484552 
 1610      450000BF 
 1611 36d0 504700BF 		_NEST
 1612 36d4 FD320000 		_ADR	CPP
 1613 36d8 6D2C0000 		_ADR	AT
 1614 36dc 272A0000 		_UNNEST
 1615              	
 1616              	/***************************	
 1617              	    PAD	 ( -- a )
 1618              	 	Return the address of 
 1619              		a temporary buffer.
 1620              	***************************/
 1621 36e0 C8360000 		_HEADER PAD,3,"PAD"
 1621      03504144 
 1622 36e8 504700BF 		_NEST
ARM GAS  forth.s 			page 133


 1623 36ec D1360000 		_ADR	HERE
 1624 36f0 E72B0000 		_DOLIT 80
 1624      50000000 
 1625 36f8 252E0000 		_ADR PLUS 
 1626 36fc 272A0000 		_UNNEST
 1627              	
 1628              	/***********************
 1629              	    TIB	 ( -- a )
 1630              	 	Return the address 
 1631              		of the terminal 
 1632              		input buffer.
 1633              	************************/
 1634 3700 E4360000 		_HEADER TIB,3,"TIB"
 1634      03544942 
 1635 3708 47F8046D 		_PUSH
 1636 370c 266B     		ldr TOS,[UP,#TIBUF]
 1637 370e FFF787B9 		_NEXT
 1638              	
 1639              	/*************************
 1640              	    @EXECUTE	( a -- )
 1641              	 	Execute vector stored
 1642              		in address a.
 1643              	*************************/
 1644 3712 04370000 		_HEADER ATEXE,8,"@EXECUTE"
 1644      08404558 
 1644      45435554 
 1644      4500
 1645 3720 3500     		MOVS	WP,TOS
 1646 3722 57F8046B 		_POP
 1647 3726 2D68     		LDR	WP,[WP]
 1648 3728 45F00105 		ORR	WP,WP,#1
 1649 372c 18BF     	    IT NE 
 1650 372e 2847     		BXNE	WP
 1651 3730 FFF776B9 		_NEXT
 1652              	
 1653              	/*******************************
 1654              	    CMOVE	( b1 b2 u -- )
 1655              	 	Copy u bytes from b1 to b2.
 1656              	********************************/
 1657 3734 16370000 		_HEADER CMOVE,5,"CMOVE"
 1657      05434D4F 
 1657      564500BF 
 1658 3740 57F8042B 		LDR	T2,[DSP],#4
 1659 3744 57F8043B 		LDR	T3,[DSP],#4
 1660 3748 03E0     		B CMOV1
 1661              	CMOV0:
 1662 374a 13F8015B 		LDRB	WP,[T3],#1
 1663 374e 02F8015B 		STRB	WP,[T2],#1
 1664              	CMOV1:
 1665 3752 3600     		MOVS	TOS,TOS
 1666 3754 02D0     		BEQ	CMOV2
 1667 3756 A6F10106 		SUB	TOS,TOS,#1
 1668 375a F6E7     		B CMOV0
 1669              	CMOV2:
 1670 375c 57F8046B 		_POP
 1671 3760 FFF75EB9 		_NEXT
 1672              	
ARM GAS  forth.s 			page 134


 1673              	/***************************
 1674              	    MOVE	( a1 a2 u -- )
 1675              	 	Copy u words from a1 to a2.
 1676              	*******************************/
 1677 3764 38370000 		_HEADER MOVE,4,"MOVE"
 1677      044D4F56 
 1677      450000BF 
 1678 3770 4FF00400 		MOV T0,#4 
 1679 3774 06F10306 		ADD TOS,#3 
 1680 3778 26F00306 		BIC TOS,#3
 1681 377c 57F8041B 		LDR	T1,[DSP],#4 // dest
 1682 3780 57F8042B 		LDR	T2,[DSP],#4 // src 
 1683 3784 8A42     		CMP T2,T1 
 1684 3786 08D5     		BPL MOVE1
 1685 3788 6FF00300 		MOV T0,#-4 
 1686 378c 3144     		ADD T1,TOS
 1687 378e 3244     		ADD T2,TOS 
 1688 3790 01E0     		B MOVE3
 1689              	MOVE0:
 1690 3792 1568     		LDR	WP,[T2]
 1691 3794 0D60     		STR	WP,[T1]
 1692              	MOVE3: 
 1693 3796 0144     		ADD T1,T0 
 1694 3798 0244     		ADD T2,T0 
 1695              	MOVE1:
 1696 379a 3600     		MOVS TOS,TOS
 1697 379c 02D0     		BEQ	MOVE2
 1698 379e A6F10406 		SUB	TOS,TOS,#4
 1699 37a2 F6E7     		B MOVE0
 1700              	MOVE2:
 1701 37a4 57F8046B 		_POP
 1702 37a8 FFF73AB9 		_NEXT
 1703              	
 1704              	/**************************
 1705              	    FILL	( b u c -- )
 1706              	 	Fill u bytes of character
 1707              		c to area beginning at b.
 1708              	******************************/
 1709 37ac 68370000 		_HEADER FILL,4,"FILL"
 1709      0446494C 
 1709      4C0000BF 
 1710 37b8 03CF     		LDMFD DSP!,{T0,T1} 
 1711 37ba 0000     		MOVS T0,T0 
 1712 37bc 03D0     		BEQ FILL2
 1713              	FILL1:
 1714 37be 01F8016B 		STRB	TOS,[T1],#1
 1715 37c2 0138     		SUBS	T0,T0,#1
 1716 37c4 FBD1     		BNE FILL1
 1717              	FILL2:
 1718 37c6 57F8046B 		_POP
 1719 37ca FFF729B9 		_NEXT
 1720              	
 1721              	/*****************************
 1722              	    PACK$	( b u a -- a )
 1723              	 	Build a counted word with
 1724              		u characters from b. 
 1725              		Null fill.
ARM GAS  forth.s 			page 135


 1726              	*****************************/
 1727 37ce B0370000 		_HEADER PACKS,5,"PACK$"
 1727      05504143 
 1727      4B24
 1728 37d8 504700BF 		_NEST
 1729 37dc 1D360000 		_ADR	ALGND
 1730 37e0 612D0000 		_ADR	DUPP
 1731 37e4 DD2C0000 		_ADR	TOR		// strings only on cell boundary
 1732 37e8 852D0000 		_ADR	OVER
 1733 37ec 252E0000 		_ADR	PLUS
 1734 37f0 812E0000 		_ADR	ONEP 
 1735 37f4 E72B0000 		_DOLIT 	0xFFFFFFFC
 1735      FCFFFFFF 
 1736 37fc A52D0000 		_ADR	ANDD			// count mod cell
 1737 3800 E72B0000 		_DOLIT 	0
 1737      00000000 
 1738 3808 712D0000 		_ADR	SWAP
 1739 380c 592C0000 		_ADR	STORE			// null fill cell
 1740 3810 C92C0000 		_ADR	RAT
 1741 3814 992F0000 		_ADR	DDUP
 1742 3818 792C0000 		_ADR	CSTOR
 1743 381c 812E0000 		_ADR	ONEP			// save count
 1744 3820 712D0000 		_ADR	SWAP
 1745 3824 41370000 		_ADR	CMOVE
 1746 3828 992C0000 		_ADR	RFROM
 1747 382c 272A0000 		_UNNEST   			// move string
 1748              	
 1749              	/***********************************
 1750              	  Numeric output, single precision
 1751              	***********************************/
 1752              	
 1753              	/**************************
 1754              	    DIGIT	( u -- c )
 1755              	 	Convert digit u to 
 1756              		a character.
 1757              	***************************/
 1758 3830 D2370000 		_HEADER DIGIT,5,"DIGIT"
 1758      05444947 
 1758      495400BF 
 1759 383c 504700BF 		_NEST
 1760 3840 E72B0000 		_DOLIT 9
 1760      09000000 
 1761 3848 852D0000 		_ADR	OVER
 1762 384c FD300000 		_ADR	LESS
 1763 3850 E72B0000 		_DOLIT	7
 1763      07000000 
 1764 3858 A52D0000 		_ADR	ANDD
 1765 385c 252E0000 		_ADR	PLUS
 1766 3860 E72B0000 		_DOLIT	'0'
 1766      30000000 
 1767 3868 252E0000 		_ADR	PLUS 
 1768 386c 272A0000 		_UNNEST
 1769              	
 1770              	/*********************************
 1771              	    EXTRACT	( ud base -- ud c )
 1772              	 	Extract the least significant
 1773              		digit from positive double.
ARM GAS  forth.s 			page 136


 1774              	**********************************/
 1775 3870 34380000 		_HEADER EXTRC,7,"EXTRACT"
 1775      07455854 
 1775      52414354 
 1776 387c 504700BF 		_NEST
 1777 3880 A5340000 		_ADR	DSLMOD
 1778 3884 492F0000 		_ADR	ROT
 1779 3888 3D380000 		_ADR	DIGIT
 1780 388c 272A0000 		_UNNEST
 1781              	
 1782              	/***************************
 1783              	    <#	  ( -- )
 1784              	 	Initiate the numeric
 1785              		output process.
 1786              	****************************/
 1787 3890 74380000 		_HEADER BDIGS,2,"<#"
 1787      023C2300 
 1788 3898 504700BF 		_NEST
 1789 389c E9360000 		_ADR	PAD
 1790 38a0 D1320000 		_ADR	HLD
 1791 38a4 592C0000 		_ADR	STORE
 1792 38a8 272A0000 		_UNNEST
 1793              	
 1794              	/*********************************
 1795              	    HOLD	( c -- )
 1796              	 	Insert a character into the 
 1797              		numeric output string.
 1798              	**********************************/
 1799 38ac 94380000 		_HEADER HOLD,4,"HOLD"
 1799      04484F4C 
 1799      440000BF 
 1800 38b8 504700BF 		_NEST
 1801 38bc D1320000 		_ADR	HLD
 1802 38c0 6D2C0000 		_ADR	AT
 1803 38c4 912E0000 		_ADR	ONEM
 1804 38c8 612D0000 		_ADR	DUPP
 1805 38cc D1320000 		_ADR	HLD
 1806 38d0 592C0000 		_ADR	STORE
 1807 38d4 792C0000 		_ADR	CSTOR
 1808 38d8 272A0000 		_UNNEST
 1809              	
 1810              	/***********************
 1811              	    #	   ( ud -- ud )
 1812              	 	Extract one digit 
 1813              		from ud and append 
 1814              		the digit to output 
 1815              		string.
 1816              	*************************/
 1817 38dc B0380000 		_HEADER DIG,1,"#"
 1817      012300BF 
 1818 38e4 504700BF 		_NEST
 1819 38e8 55320000 		_ADR	BASE
 1820 38ec 6D2C0000 		_ADR	AT
 1821 38f0 7D380000 		_ADR	EXTRC
 1822 38f4 B9380000 		_ADR	HOLD
 1823 38f8 272A0000 		_UNNEST
 1824              	
ARM GAS  forth.s 			page 137


 1825              	/***************************
 1826              	    #S	  ( ud -- 0 )
 1827              	 	Convert ud until all 
 1828              		digits are added to 
 1829              		the output string.
 1830              	***************************/
 1831 38fc E0380000 		_HEADER DIGS,2,"#S"
 1831      02235300 
 1832 3904 504700BF 		_NEST
 1833              	DIGS1:
 1834 3908 E5380000 	    _ADR	DIG
 1835 390c 992F0000 		_ADR	DDUP
 1836 3910 B92D0000 		_ADR    ORR 
 1837 3914 272C0000 		_QBRAN 	DIGS2
 1837      24390000 
 1838 391c 3B2C0000 		_BRAN	DIGS1
 1838      08390000 
 1839              	DIGS2:
 1840 3924 512D0000 		 _ADR DROP 
 1841 3928 272A0000 		 _UNNEST
 1842              	
 1843              	/*********************
 1844              	    SIGN	( n -- )
 1845              	 	Add a minus sign
 1846              		to the numeric
 1847              		output string.
 1848              	*********************/
 1849 392c 00390000 		_HEADER SIGN,4,"SIGN"
 1849      04534947 
 1849      4E0000BF 
 1850 3938 504700BF 		_NEST
 1851 393c 952D0000 		_ADR	ZLESS
 1852 3940 272C0000 		_QBRAN	SIGN1
 1852      54390000 
 1853 3948 E72B0000 		_DOLIT '-'
 1853      2D000000 
 1854 3950 B9380000 		_ADR	HOLD
 1855              	SIGN1:
 1856 3954 272A0000 		  _UNNEST
 1857              	
 1858              	/*************************
 1859              	    #>  ( w -- b u )
 1860              	 	Prepare the output 
 1861              		word to be TYPE'd.
 1862              	************************/
 1863 3958 30390000 		_HEADER EDIGS,2,"#>"
 1863      02233E00 
 1864 3960 504700BF 		_NEST
 1865 3964 512D0000 		_ADR	DROP
 1866 3968 D1320000 		_ADR	HLD
 1867 396c 6D2C0000 		_ADR	AT
 1868 3970 E9360000 		_ADR	PAD
 1869 3974 852D0000 		_ADR	OVER
 1870 3978 352E0000 		_ADR	SUBB
 1871 397c 272A0000 		_UNNEST
 1872              	
 1873              	/**************************
ARM GAS  forth.s 			page 138


 1874              	    str	 ( n -- b u )
 1875              	 	Convert a signed 
 1876              		integer to a numeric 
 1877              		string.
 1878              	hidden word used by compiler
 1879              	***************************/
 1880              	STRR:
 1881 3980 504700BF 		_NEST
 1882 3984 5D340000 		_ADR 	STOD 
 1883 3988 612D0000 		_ADR	DUPP
 1884 398c DD2C0000 		_ADR	TOR
 1885 3990 CD2F0000 		_ADR	DABS
 1886 3994 99380000 		_ADR	BDIGS
 1887 3998 05390000 		_ADR	DIGS
 1888 399c 992C0000 		_ADR	RFROM
 1889 39a0 39390000 		_ADR	SIGN
 1890 39a4 61390000 		_ADR	EDIGS
 1891 39a8 272A0000 		_UNNEST
 1892              	
 1893              	/*************************
 1894              	    HEX	 ( -- )
 1895              	 	Use radix 16 as 
 1896              		base for numeric 
 1897              		conversions.
 1898              	*************************/
 1899 39ac 5C390000 		_HEADER HEX,3,"HEX"
 1899      03484558 
 1900 39b4 504700BF 		_NEST
 1901 39b8 E72B0000 		_DOLIT 16
 1901      10000000 
 1902 39c0 55320000 		_ADR	BASE
 1903 39c4 592C0000 		_ADR	STORE
 1904 39c8 272A0000 		_UNNEST
 1905              	
 1906              	/**************************
 1907              		BIN ( -- )
 1908              		Use radix 2 as 
 1909              		base for numeric 
 1910              		conversion 
 1911              	**************************/
 1912 39cc B0390000 		_HEADER BIN,3,"BIN"
 1912      0342494E 
 1913 39d4 504700BF 		_NEST 
 1914 39d8 E72B0000 		_DOLIT 2 
 1914      02000000 
 1915 39e0 55320000 		_ADR BASE 
 1916 39e4 592C0000 		_ADR STORE
 1917 39e8 272A0000 		_UNNEST 
 1918              	
 1919              	/************************
 1920              	    DECIMAL	( -- )
 1921              	 	Use radix 10 as base
 1922              		for numeric conversions.
 1923              	*************************/
 1924 39ec D0390000 		_HEADER DECIM,7,"DECIMAL"
 1924      07444543 
 1924      494D414C 
ARM GAS  forth.s 			page 139


 1925 39f8 504700BF 		_NEST
 1926 39fc E72B0000 		_DOLIT 10
 1926      0A000000 
 1927 3a04 55320000 		_ADR	BASE
 1928 3a08 592C0000 		_ADR	STORE
 1929 3a0c 272A0000 		_UNNEST
 1930              	
 1931              	/************************************
 1932              	  Numeric input, single precision
 1933              	***********************************/
 1934              	
 1935              	/***********************************
 1936              	    DIGIT?	( c base -- u t )
 1937              	 	Convert a character to its 
 1938              		numeric value. A flag 
 1939              		indicates success.
 1940              	**********************************/
 1941 3a10 F0390000 		_HEADER DIGTQ,6,"DIGIT?"
 1941      06444947 
 1941      49543F00 
 1942 3a1c 504700BF 		_NEST
 1943 3a20 DD2C0000 		_ADR	TOR
 1944 3a24 E72B0000 		_DOLIT 	'0'
 1944      30000000 
 1945 3a2c 352E0000 		_ADR	SUBB
 1946 3a30 E72B0000 		_DOLIT 9
 1946      09000000 
 1947 3a38 852D0000 		_ADR	OVER
 1948 3a3c FD300000 		_ADR	LESS
 1949 3a40 272C0000 		_QBRAN	DGTQ1
 1949      683A0000 
 1950 3a48 E72B0000 		_DOLIT 7
 1950      07000000 
 1951 3a50 352E0000 		_ADR	SUBB
 1952 3a54 612D0000 		_ADR	DUPP
 1953 3a58 E72B0000 		_DOLIT	10
 1953      0A000000 
 1954 3a60 FD300000 		_ADR	LESS
 1955 3a64 B92D0000 		_ADR	ORR
 1956              	DGTQ1:
 1957 3a68 612D0000 		_ADR	DUPP
 1958 3a6c 992C0000 		_ADR	RFROM
 1959 3a70 E5300000 		_ADR	ULESS
 1960 3a74 272A0000 		_UNNEST
 1961              	
 1962              	/***********************************
 1963              	 parse digits 
 1964              	  d digits count 
 1965              	  n parsed integer
 1966              	  a+ updated pointer  
 1967              	************************************/
 1968              	PARSE_DIGITS: // ( d n a -- d+ n+ a+ )
 1969 3a78 504700BF 	    _NEST
 1970 3a7c 55320000 	    _ADR BASE 
 1971 3a80 6D2C0000 	    _ADR AT 
 1972 3a84 DD2C0000 	    _ADR TOR  
 1973 3a88 B5310000 	1:  _ADR COUNT 
ARM GAS  forth.s 			page 140


 1974 3a8c C92C0000 	    _ADR RAT 
 1975 3a90 1D3A0000 	    _ADR DIGTQ
 1976 3a94 272C0000 	    _QBRAN 3f
 1976      E83A0000 
 1977 3a9c 492F0000 	    _ADR ROT
 1978 3aa0 612D0000 		_ADR DUPP 
 1979 3aa4 E72B0000 		_DOLIT 0XCCCCCCC // limit before overflow 
 1979      CCCCCC0C 
 1980 3aac 2D310000 		_ADR GREAT 
 1981 3ab0 272C0000 		_QBRAN 2f 
 1981      C43A0000 
 1982 3ab8 5D2F0000 		_ADR NROT 
 1983 3abc 3B2C0000 		_BRAN 3f  // too big 
 1983      E83A0000 
 1984 3ac4 C92C0000 	2:  _ADR RAT 
 1985 3ac8 452E0000 	    _ADR STAR 
 1986 3acc 252E0000 	    _ADR PLUS
 1987 3ad0 712D0000 	    _ADR SWAP 
 1988 3ad4 492F0000 	    _ADR ROT 
 1989 3ad8 812E0000 	    _ADR ONEP 
 1990 3adc 5D2F0000 	    _ADR NROT
 1991 3ae0 3B2C0000 	    _BRAN 1b 
 1991      883A0000 
 1992 3ae8 512D0000 	3:  _ADR DROP 
 1993 3aec 912E0000 	    _ADR ONEM  // decrement a 
 1994 3af0 992C0000 	    _ADR RFROM 
 1995 3af4 512D0000 	    _ADR DROP 
 1996 3af8 272A0000 	    _UNNEST 
 1997              	
 1998              	/**************************
 1999              	 CHAR? 
 2000              	 check for charcter c 
 2001              	 move pointer if *a==c  
 2002              	**************************/
 2003              	CHARQ: // ( a c -- a+ t | a f )
 2004 3afc 3868     	    ldr T0,[DSP]
 2005 3afe 10F8011B 	    ldrb T1,[T0],#1 
 2006 3b02 3246     	    mov T2,TOS 
 2007 3b04 86EA0606 	    eor TOS,TOS
 2008 3b08 9142     	    cmp T1,T2
 2009 3b0a 02D1     	    bne 1f 
 2010 3b0c 3860     	    str T0,[DSP]
 2011 3b0e 6FEA0606 	    mvn TOS,TOS  
 2012 3b12 FEF785BF 	1:  _NEXT
 2013              	
 2014              	/*********************************
 2015              	   NEG? ( a -- a|a+  f|t )
 2016              	   skip '-'|'+' return -1 if '-' 
 2017              	   else return 0 
 2018              	*********************************/
 2019              	NEGQ: 
 2020 3b16 504700BF 	    _NEST 
 2021 3b1a E72B0000 	    _DOLIT '-' 
 2021      2D000000 
 2022 3b22 FD3A0000 	    _ADR CHARQ
 2023 3b26 612D0000 	    _ADR DUPP  
 2024 3b2a 272C0000 	    _QBRAN 1f
ARM GAS  forth.s 			page 141


 2024      3A3B0000 
 2025 3b32 3B2C0000 	    _BRAN 2f
 2025      523B0000 
 2026 3b3a 712D0000 	1:  _ADR SWAP 
 2027 3b3e E72B0000 	    _DOLIT '+'
 2027      2B000000 
 2028 3b46 FD3A0000 	    _ADR CHARQ
 2029 3b4a 512D0000 	    _ADR DROP  
 2030 3b4e 712D0000 		_ADR SWAP 
 2031 3b52 272A0000 	2:  _UNNEST 
 2032              	
 2033              	
 2034              	/**********************************
 2035              	    INT?	( a -- n T | a F )
 2036              	 	parse string  at 'a' for 
 2037              		integer. Push a flag on TOS.
 2038              		integer form:
 2039              			[-]hex_digit+  | 
 2040              			$[-]hex_digit+ |
 2041              			%[-]bin_digit+ | 
 2042              			[-]dec_digit+ 
 2043              	**********************************/
 2044 3b56 143A0000 		_HEADER INTQ,4,"INT?"
 2044      04494E54 
 2044      3F00
 2045 3b60 504700BF 		_NEST
 2046              	// save BASE 	
 2047 3b64 55320000 		_ADR	BASE
 2048 3b68 6D2C0000 		_ADR	AT
 2049 3b6c DD2C0000 		_ADR	TOR
 2050 3b70 E72B0000 		_DOLIT	0      // a 0 
 2050      00000000 
 2051 3b78 852D0000 		_ADR	OVER   // a 0 a 
 2052 3b7c B5310000 		_ADR	COUNT  // a 0 a+ cnt 
 2053 3b80 712D0000 		_ADR    SWAP   
 2054 3b84 E72B0000 		_DOLIT  '$' 
 2054      24000000 
 2055 3b8c FD3A0000 		_ADR    CHARQ 
 2056 3b90 272C0000 		_QBRAN  0f 
 2056      A43B0000 
 2057              	// hexadecimal number 
 2058 3b98 B5390000 		_ADR    HEX
 2059 3b9c 3B2C0000 		_BRAN   1f 
 2059      BC3B0000 
 2060 3ba4 E72B0000 	0:  _DOLIT  '%'   // -- a 0 cnt a '%'
 2060      25000000 
 2061 3bac FD3A0000 		_ADR	CHARQ  // -- a 0 cnt a f 
 2062 3bb0 272C0000 		_QBRAN  2f
 2062      C83B0000 
 2063 3bb8 D5390000 		_ADR	BIN 
 2064              	1:	// decrement cnt 
 2065 3bbc 712D0000 	    _ADR	SWAP 
 2066 3bc0 912E0000 		_ADR	ONEM 
 2067 3bc4 712D0000 		_ADR	SWAP  // -- a 0 cnt- a  
 2068              	2: // check if negative number 
 2069 3bc8 612D0000 		_ADR    DUPP 
 2070 3bcc 173B0000 		_ADR    NEGQ 
ARM GAS  forth.s 			page 142


 2071 3bd0 DD2C0000 		_ADR	TOR  // -- a 0 cnt a a+  R: sign 
 2072 3bd4 612D0000 		_ADR    DUPP 
 2073 3bd8 492F0000 		_ADR    ROT  // a 0 cnt a+ a+ a 
 2074 3bdc 352E0000 		_ADR    SUBB // -- a 0 cnt a+ diff 
 2075 3be0 272C0000 		_QBRAN  2f  
 2075      F43B0000 
 2076 3be8 712D0000 		_ADR    SWAP  // -- a 0 a cnt 
 2077 3bec 912E0000 		_ADR    ONEM  // -- a 0 a cnt--
 2078 3bf0 712D0000 		_ADR    SWAP   
 2079 3bf4 712D0000 	2:  _ADR    SWAP 
 2080 3bf8 DD2C0000 		_ADR 	TOR  // a 0 a+  R: sign cnt 
 2081 3bfc E72B0000 		_DOLIT  0
 2081      00000000 
 2082 3c04 612D0000 		_ADR	DUPP 
 2083 3c08 492F0000 		_ADR	ROT // a 0 0 0 a+ R: sign cnt 
 2084 3c0c 793A0000 		_ADR	PARSE_DIGITS  // a 0 d n a+
 2085 3c10 512D0000 		_ADR	DROP // a 0 d n 
 2086 3c14 712D0000 		_ADR	SWAP  // a 0 n d 
 2087 3c18 992C0000 		_ADR	RFROM // a 0 n d cnt  
 2088 3c1c AD300000 		_ADR	EQUAL // d == cnt ? 
 2089 3c20 272C0000 		_QBRAN  5f // digits left, not an integer 
 2089      503C0000 
 2090 3c28 992C0000 	2:	_ADR	RFROM  // sign 
 2091 3c2c 272C0000 		_QBRAN  3f   // positive integer 
 2091      383C0000 
 2092 3c34 45300000 		_ADR	NEGAT
 2093              	3:	
 2094 3c38 5D2F0000 		_ADR	NROT  // n a 0 
 2095 3c3c 712F0000 		_ADR	DDROP // n  
 2096 3c40 E72B0000 		_DOLIT  -1    // n -1 
 2096      FFFFFFFF 
 2097 3c48 3B2C0000 		_BRAN   7f  
 2097      583C0000 
 2098 3c50 992C0000 	5:  _ADR	RFROM //  a 0 n sign      	 
 2099 3c54 712F0000 	    _ADR	DDROP 
 2100              	7: // restore BASE 
 2101 3c58 992C0000 		_ADR	RFROM
 2102 3c5c 55320000 		_ADR	BASE
 2103 3c60 592C0000 		_ADR	STORE
 2104 3c64 272A0000 		_UNNEST
 2105              	
 2106              	
 2107              	/********************
 2108              	  console I/O
 2109              	********************/
 2110              	
 2111              	/**********************
 2112              	    SPACE	( -- )
 2113              	 	Send the blank 
 2114              		character to 
 2115              		the output device.
 2116              	************************/
 2117 3c68 5A3B0000 		_HEADER SPACE,5,"SPACE"
 2117      05535041 
 2117      434500BF 
 2118 3c74 504700BF 		_NEST
 2119 3c78 E12E0000 		_ADR	BLANK
ARM GAS  forth.s 			page 143


 2120 3c7c F12A0000 		_ADR	EMIT
 2121 3c80 272A0000 		_UNNEST
 2122              	
 2123              	/***************************
 2124              	    SPACES	( +n -- )
 2125              	 	Send n spaces to the 
 2126              		output device.
 2127              	****************************/
 2128 3c84 6C3C0000 		_HEADER SPACS,6,"SPACES"
 2128      06535041 
 2128      43455300 
 2129 3c90 504700BF 		_NEST
 2130 3c94 E72B0000 		_DOLIT	0
 2130      00000000 
 2131 3c9c 45310000 		_ADR	MAX
 2132 3ca0 DD2C0000 		_ADR	TOR
 2133 3ca4 3B2C0000 		_BRAN	CHAR2
 2133      B03C0000 
 2134              	CHAR1:
 2135 3cac 753C0000 		_ADR	SPACE
 2136              	CHAR2:
 2137 3cb0 092C0000 		_DONXT	CHAR1
 2137      AC3C0000 
 2138 3cb8 272A0000 		_UNNEST
 2139              	
 2140              	/***********************
 2141              	    TYPE	( b u -- )
 2142              	 	Output u characters 
 2143              		from b.
 2144              	************************/
 2145 3cbc 883C0000 		_HEADER TYPEE,4,"TYPE"
 2145      04545950 
 2145      450000BF 
 2146 3cc8 504700BF 		_NEST
 2147 3ccc DD2C0000 		_ADR  TOR   // ( a+1 -- R: u )
 2148 3cd0 3B2C0000 		_BRAN	TYPE2
 2148      E43C0000 
 2149              	TYPE1:  
 2150 3cd8 B5310000 		_ADR  COUNT
 2151 3cdc 39360000 		_ADR TCHAR
 2152 3ce0 F12A0000 		_ADR EMIT
 2153              	TYPE2:  
 2154 3ce4 092C0000 		_DONXT	TYPE1
 2154      D83C0000 
 2155 3cec 512D0000 		_ADR	DROP
 2156 3cf0 272A0000 		_UNNEST
 2157              	
 2158              	/***************************
 2159              	    CR	  ( -- )
 2160              	 	Output a carriage return
 2161              		and a line feed.
 2162              	****************************/
 2163 3cf4 C03C0000 		_HEADER CR,2,"CR"
 2163      02435200 
 2164 3cfc 504700BF 		_NEST
 2165 3d00 E72B0000 		_DOLIT	CRR
 2165      0D000000 
ARM GAS  forth.s 			page 144


 2166 3d08 F12A0000 		_ADR	EMIT
 2167 3d0c E72B0000 		_DOLIT	LF
 2167      0A000000 
 2168 3d14 F12A0000 		_ADR	EMIT
 2169 3d18 272A0000 		_UNNEST
 2170              	
 2171              	/******************************************
 2172              	  do_$	( -- a )
 2173              	  Return the address of a compiled string.
 2174              	  adjust return address to skip over it.
 2175              	hidden word used by compiler. 
 2176              	******************************************/
 2177              	DOSTR:
 2178 3d1c 504700BF 		_NEST     
 2179              	/* compiled string address is 2 levels deep */
 2180 3d20 992C0000 		_ADR	RFROM	// { -- a1 }
 2181 3d24 992C0000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2182 3d28 612D0000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2183 3d2c B5310000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2184 3d30 252E0000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2185 3d34 1D360000 		_ADR	ALGND	//  end of string
 2186              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2187 3d38 DD2C0000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2188 3d3c 712D0000 		_ADR	SWAP	//  count tugged
 2189 3d40 DD2C0000 		_ADR	TOR     //  ( -- a2) is string address
 2190 3d44 272A0000 		_UNNEST
 2191              	
 2192              	/******************************************
 2193              	    $"|	( -- a )
 2194              	 	Run time routine compiled by _". 
 2195              		Return address of a compiled string.
 2196              	hidden word used by compiler
 2197              	*****************************************/
 2198              	STRQP:
 2199 3d48 504700BF 		_NEST
 2200 3d4c 1D3D0000 		_ADR	DOSTR
 2201 3d50 272A0000 		_UNNEST			// force a call to dostr
 2202              	
 2203              	/*******************************
 2204              	    .$	( a -- )
 2205              	 	Run time routine of ." 
 2206              		Output a compiled string.
 2207              	hidden word used by compiler
 2208              	*******************************/
 2209              	DOTST:
 2210 3d54 504700BF 		_NEST
 2211 3d58 B5310000 		_ADR	COUNT // ( -- a+1 c )
 2212 3d5c C93C0000 		_ADR	TYPEE
 2213 3d60 272A0000 		_UNNEST
 2214              	
 2215              	/**********************
 2216              	    ."|	( -- )
 2217              	 	Run time routine of ." 
 2218              		Output a compiled string.
 2219              	hidden word used by compiler
 2220              	*****************************/
 2221              	DOTQP:
ARM GAS  forth.s 			page 145


 2222 3d64 504700BF 		_NEST
 2223 3d68 1D3D0000 		_ADR	DOSTR
 2224 3d6c 553D0000 		_ADR	DOTST
 2225 3d70 272A0000 		_UNNEST
 2226              	
 2227              	/******************************
 2228              	    .R	  ( n +n -- )
 2229              	 	Display an integer in a 
 2230              		field of n columns, 
 2231              		right justified.
 2232              	*******************************/
 2233 3d74 F83C0000 		_HEADER DOTR,2,".R"
 2233      022E5200 
 2234 3d7c 504700BF 		_NEST
 2235 3d80 DD2C0000 		_ADR	TOR
 2236 3d84 81390000 		_ADR	STRR
 2237 3d88 992C0000 		_ADR	RFROM
 2238 3d8c 852D0000 		_ADR	OVER
 2239 3d90 352E0000 		_ADR	SUBB
 2240 3d94 913C0000 		_ADR	SPACS
 2241 3d98 C93C0000 		_ADR	TYPEE
 2242 3d9c 272A0000 		_UNNEST
 2243              	
 2244              	/*************************
 2245              	    U.R	 ( u +n -- )
 2246              	 	Display an unsigned 
 2247              		integer in n column, 
 2248              		right justified.
 2249              	***************************/
 2250 3da0 783D0000 		_HEADER UDOTR,3,"U.R"
 2250      03552E52 
 2251 3da8 504700BF 		_NEST
 2252 3dac 712D0000 		_ADR	SWAP 
 2253 3db0 5D340000 		_ADR 	STOD 
 2254 3db4 492F0000 		_ADR	ROT 
 2255 3db8 DD2C0000 		_ADR	TOR
 2256 3dbc 99380000 		_ADR	BDIGS
 2257 3dc0 05390000 		_ADR	DIGS
 2258 3dc4 61390000 		_ADR	EDIGS
 2259 3dc8 992C0000 		_ADR	RFROM
 2260 3dcc 852D0000 		_ADR	OVER
 2261 3dd0 352E0000 		_ADR	SUBB
 2262 3dd4 913C0000 		_ADR	SPACS
 2263 3dd8 C93C0000 		_ADR	TYPEE
 2264 3ddc 272A0000 		_UNNEST
 2265              	
 2266              	/************************
 2267              	    U.	  ( u -- )
 2268              	 	Display an unsigned 
 2269              		integer in free format.
 2270              	***************************/
 2271 3de0 A43D0000 		_HEADER UDOT,2,"U."
 2271      02552E00 
 2272 3de8 504700BF 		_NEST
 2273 3dec 5D340000 		_ADR 	STOD 
 2274 3df0 99380000 		_ADR	BDIGS
 2275 3df4 05390000 		_ADR	DIGS
ARM GAS  forth.s 			page 146


 2276 3df8 61390000 		_ADR	EDIGS
 2277 3dfc 753C0000 		_ADR	SPACE
 2278 3e00 C93C0000 		_ADR	TYPEE
 2279 3e04 272A0000 		_UNNEST
 2280              	
 2281              	/************************
 2282              	    .	   ( w -- )
 2283              	 	Display an integer 
 2284              		in free format, 
 2285              		preceeded by a space.
 2286              	**************************/
 2287 3e08 E43D0000 		_HEADER DOT,1,"."
 2287      012E00BF 
 2288 3e10 504700BF 		_NEST
 2289 3e14 55320000 		_ADR	BASE
 2290 3e18 6D2C0000 		_ADR	AT
 2291 3e1c E72B0000 		_DOLIT 10
 2291      0A000000 
 2292 3e24 CD2D0000 		_ADR	XORR			// ?decimal
 2293 3e28 272C0000 		_QBRAN	DOT1
 2293      383E0000 
 2294 3e30 E93D0000 		_ADR	UDOT
 2295 3e34 272A0000 		_UNNEST			// no,display unsigned
 2296              	DOT1:
 2297 3e38 81390000 	    _ADR	STRR
 2298 3e3c 753C0000 		_ADR	SPACE
 2299 3e40 C93C0000 		_ADR	TYPEE
 2300 3e44 272A0000 		_UNNEST			// yes, display signed
 2301              	
 2302              	/*************************
 2303              	   D. ( d -- )
 2304              	   display double integer 
 2305              	**************************/
 2306 3e48 0C3E0000 		_HEADER DDOT,2,"D."
 2306      02442E00 
 2307 3e50 504700BF 		_NEST 
 2308 3e54 612D0000 		_ADR DUPP 
 2309 3e58 DD2C0000 		_ADR TOR 
 2310 3e5c CD2F0000 		_ADR DABS 
 2311 3e60 99380000 		_ADR BDIGS
 2312 3e64 05390000 		_ADR DIGS 
 2313 3e68 992C0000 		_ADR RFROM
 2314 3e6c 39390000 		_ADR SIGN 
 2315 3e70 61390000 		_ADR EDIGS
 2316 3e74 753C0000 		_ADR SPACE 
 2317 3e78 C93C0000 		_ADR TYPEE 
 2318 3e7c 272A0000 		_UNNEST 
 2319              	
 2320              	
 2321              	/***********************
 2322              		H. ( w -- )
 2323              		display integer 
 2324              		in hexadecimal 
 2325              	*********************/
 2326 3e80 4C3E0000 		_HEADER HDOT,2,"H."
 2326      02482E00 
 2327 3e88 504700BF 		_NEST 
ARM GAS  forth.s 			page 147


 2328 3e8c 55320000 		_ADR BASE
 2329 3e90 6D2C0000 		_ADR AT 
 2330 3e94 712D0000 		_ADR SWAP
 2331 3e98 B5390000 		_ADR HEX
 2332 3e9c E72B0000 		_DOLIT 0 
 2332      00000000 
 2333 3ea4 99380000 		_ADR BDIGS
 2334 3ea8 05390000 		_ADR DIGS
 2335 3eac 61390000 		_ADR EDIGS
 2336 3eb0 753C0000 		_ADR SPACE
 2337 3eb4 E72B0000 		_DOLIT '$'
 2337      24000000 
 2338 3ebc F12A0000 		_ADR EMIT 
 2339 3ec0 C93C0000 		_ADR TYPEE
 2340 3ec4 55320000 		_ADR BASE
 2341 3ec8 592C0000 		_ADR STORE  
 2342 3ecc 272A0000 		_UNNEST 
 2343              	
 2344              	
 2345              	/***********************
 2346              	    ?	   ( a -- )
 2347              	 	Display the contents
 2348              		in a memory cell.
 2349              	*************************/
 2350 3ed0 843E0000 		_HEADER QUEST,1,"?"
 2350      013F00BF 
 2351 3ed8 504700BF 		_NEST
 2352 3edc 6D2C0000 		_ADR	AT
 2353 3ee0 113E0000 		_ADR	DOT
 2354 3ee4 272A0000 		_UNNEST
 2355              	
 2356              	/**************
 2357              	  Parsing
 2358              	***************/
 2359              	
 2360              	/*********************************************
 2361              	    parse	( b u c -- b u delta //  string> )
 2362              	 	Scan word delimited by c. 
 2363              		Return found string and its offset.
 2364              	hidden word used by PARSE
 2365              	**********************************************/
 2366              	PARS:
 2367 3ee8 504700BF 		_NEST
 2368 3eec 61320000 		_ADR	TEMP
 2369 3ef0 592C0000 		_ADR	STORE
 2370 3ef4 852D0000 		_ADR	OVER
 2371 3ef8 DD2C0000 		_ADR	TOR
 2372 3efc 612D0000 		_ADR	DUPP
 2373 3f00 272C0000 		_QBRAN	PARS8
 2373      FC3F0000 
 2374 3f08 912E0000 		_ADR	ONEM
 2375 3f0c 61320000 		_ADR	TEMP
 2376 3f10 6D2C0000 		_ADR	AT
 2377 3f14 E12E0000 		_ADR	BLANK
 2378 3f18 AD300000 		_ADR	EQUAL
 2379 3f1c 272C0000 		_QBRAN	PARS3
 2379      703F0000 
ARM GAS  forth.s 			page 148


 2380 3f24 DD2C0000 		_ADR	TOR
 2381              	PARS1:
 2382 3f28 E12E0000 		_ADR	BLANK
 2383 3f2c 852D0000 		_ADR	OVER
 2384 3f30 8D2C0000 		_ADR	CAT	 // skip leading blanks 
 2385 3f34 352E0000 		_ADR	SUBB
 2386 3f38 952D0000 		_ADR	ZLESS
 2387 3f3c 31300000 		_ADR	INVER
 2388 3f40 272C0000 		_QBRAN	PARS2
 2388      6C3F0000 
 2389 3f48 812E0000 		_ADR	ONEP
 2390 3f4c 092C0000 		_DONXT	PARS1
 2390      283F0000 
 2391 3f54 992C0000 		_ADR	RFROM
 2392 3f58 512D0000 		_ADR	DROP
 2393 3f5c E72B0000 		_DOLIT	0
 2393      00000000 
 2394 3f64 612D0000 		_ADR	DUPP
 2395 3f68 272A0000 		_UNNEST
 2396              	PARS2:
 2397 3f6c 992C0000 		_ADR	RFROM
 2398              	PARS3:
 2399 3f70 852D0000 		_ADR	OVER
 2400 3f74 712D0000 		_ADR	SWAP
 2401 3f78 DD2C0000 		_ADR	TOR
 2402              	PARS4:
 2403 3f7c 61320000 		_ADR	TEMP
 2404 3f80 6D2C0000 		_ADR	AT
 2405 3f84 852D0000 		_ADR	OVER
 2406 3f88 8D2C0000 		_ADR	CAT
 2407 3f8c 352E0000 		_ADR	SUBB // scan for delimiter
 2408 3f90 61320000 		_ADR	TEMP
 2409 3f94 6D2C0000 		_ADR	AT
 2410 3f98 E12E0000 		_ADR	BLANK
 2411 3f9c AD300000 		_ADR	EQUAL
 2412 3fa0 272C0000 		_QBRAN	PARS5
 2412      AC3F0000 
 2413 3fa8 952D0000 		_ADR	ZLESS
 2414              	PARS5:
 2415 3fac 272C0000 		_QBRAN	PARS6
 2415      D03F0000 
 2416 3fb4 812E0000 		_ADR	ONEP
 2417 3fb8 092C0000 		_DONXT	PARS4
 2417      7C3F0000 
 2418 3fc0 612D0000 		_ADR	DUPP
 2419 3fc4 DD2C0000 		_ADR	TOR
 2420 3fc8 3B2C0000 		_BRAN	PARS7
 2420      E43F0000 
 2421              	PARS6:
 2422 3fd0 992C0000 		_ADR	RFROM
 2423 3fd4 512D0000 		_ADR	DROP
 2424 3fd8 612D0000 		_ADR	DUPP
 2425 3fdc 812E0000 		_ADR	ONEP
 2426 3fe0 DD2C0000 		_ADR	TOR
 2427              	PARS7:
 2428 3fe4 852D0000 		_ADR	OVER
 2429 3fe8 352E0000 		_ADR	SUBB
ARM GAS  forth.s 			page 149


 2430 3fec 992C0000 		_ADR	RFROM
 2431 3ff0 992C0000 		_ADR	RFROM
 2432 3ff4 352E0000 		_ADR	SUBB
 2433 3ff8 272A0000 		_UNNEST
 2434              	PARS8:
 2435 3ffc 852D0000 		_ADR	OVER
 2436 4000 992C0000 		_ADR	RFROM
 2437 4004 352E0000 		_ADR	SUBB
 2438 4008 272A0000 		_UNNEST
 2439              	
 2440              	/************************************
 2441              	    PARSE	( c -- b u //  string> )
 2442              	 	Scan input stream and return 
 2443              		counted string delimited by c.
 2444              	************************************/
 2445 400c D43E0000 		_HEADER PARSE,5,"PARSE"
 2445      05504152 
 2445      534500BF 
 2446 4018 504700BF 		_NEST
 2447 401c DD2C0000 		_ADR	TOR
 2448 4020 09370000 		_ADR	TIB
 2449 4024 8D320000 		_ADR	INN
 2450 4028 6D2C0000 		_ADR	AT
 2451 402c 252E0000 		_ADR	PLUS			// current input buffer pointer
 2452 4030 A5320000 		_ADR	NTIB
 2453 4034 6D2C0000 		_ADR	AT
 2454 4038 8D320000 		_ADR	INN
 2455 403c 6D2C0000 		_ADR	AT
 2456 4040 352E0000 		_ADR	SUBB			// remaining count
 2457 4044 992C0000 		_ADR	RFROM
 2458 4048 E93E0000 		_ADR	PARS
 2459 404c 8D320000 		_ADR	INN
 2460 4050 6D310000 		_ADR	PSTOR
 2461 4054 272A0000 		_UNNEST
 2462              	
 2463              	/*******************************
 2464              	    .(	  ( -- )
 2465              	 	Output following string 
 2466              		up to next ) .
 2467              	******************************/
 2468 4058 10400000 		_HEADER DOTPR,2,".("
 2468      022E2800 
 2469 4060 504700BF 		_NEST
 2470 4064 E72B0000 		_DOLIT	')'
 2470      29000000 
 2471 406c 19400000 		_ADR	PARSE
 2472 4070 C93C0000 		_ADR	TYPEE
 2473 4074 272A0000 		_UNNEST
 2474              	
 2475              	/************************
 2476              	    (	   ( -- )
 2477              	 	Ignore following 
 2478              		string up to next )
 2479              		A comment.
 2480              	************************/
 2481 4078 5C400000 		_HEADER PAREN,IMEDD+1,"("
 2481      812800BF 
ARM GAS  forth.s 			page 150


 2482 4080 504700BF 		_NEST
 2483 4084 E72B0000 		_DOLIT	')'
 2483      29000000 
 2484 408c 19400000 		_ADR	PARSE
 2485 4090 712F0000 		_ADR	DDROP
 2486 4094 272A0000 		_UNNEST
 2487              	
 2488              	/*******************
 2489              	    \	   ( -- )
 2490              	 	Ignore following 
 2491              		text till the 
 2492              		end of line.
 2493              	********************/
 2494 4098 7C400000 		_HEADER BKSLA,IMEDD+1,"\\"
 2494      815C00BF 
 2495 40a0 504700BF 		_NEST
 2496 40a4 A5320000 		_ADR	NTIB
 2497 40a8 6D2C0000 		_ADR	AT
 2498 40ac 8D320000 		_ADR	INN
 2499 40b0 592C0000 		_ADR	STORE
 2500 40b4 272A0000 		_UNNEST
 2501              	
 2502              	/******************************
 2503              	    CHAR	( -- c )
 2504              	 	Parse next word and
 2505              		return its first character.
 2506              	*******************************/
 2507 40b8 9C400000 		_HEADER CHAR,4,"CHAR"
 2507      04434841 
 2507      520000BF 
 2508 40c4 504700BF 		_NEST
 2509 40c8 E12E0000 		_ADR	BLANK
 2510 40cc 19400000 		_ADR	PARSE
 2511 40d0 512D0000 		_ADR	DROP
 2512 40d4 8D2C0000 		_ADR	CAT
 2513 40d8 272A0000 		_UNNEST
 2514              	
 2515              	/**********************************
 2516              		[CHAR] ( -- c )
 2517              		immediate version of CHAR 
 2518              	**********************************/
 2519 40dc BC400000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 2519      C65B4348 
 2519      41525D00 
 2520 40e8 504700BF 		_NEST 
 2521 40ec C5400000 		_ADR CHAR
 2522 40f0 11480000 		_ADR LITER 
 2523 40f4 272A0000 		_UNNEST 
 2524              	
 2525              	/**********************************
 2526              	    WORD	( c -- a //  string> )
 2527              	 	Parse a word from input stream
 2528              		and copy it to code dictionary.
 2529              	***********************************/
 2530 40f8 E0400000 		_HEADER WORDD,4,"WORD"
 2530      04574F52 
 2530      440000BF 
ARM GAS  forth.s 			page 151


 2531 4104 504700BF 		_NEST
 2532 4108 19400000 		_ADR	PARSE
 2533 410c D1360000 		_ADR	HERE
 2534 4110 C12E0000 		_ADR	CELLP
 2535 4114 D9370000 		_ADR	PACKS
 2536 4118 272A0000 		_UNNEST
 2537              	
 2538              	/********************************
 2539              	    TOKEN	( -- a //  string> )
 2540              	 	Parse a word from input 
 2541              		stream and copy it to 
 2542              		name dictionary.
 2543              	*********************************/
 2544 411c FC400000 		_HEADER TOKEN,5,"TOKEN"
 2544      05544F4B 
 2544      454E00BF 
 2545 4128 504700BF 		_NEST
 2546 412c E12E0000 		_ADR	BLANK
 2547 4130 05410000 		_ADR	WORDD
 2548 4134 1D430000 		_ADR	UPPER 
 2549 4138 272A0000 		_UNNEST
 2550              	
 2551              	/**********************
 2552              	  Dictionary search
 2553              	***********************/
 2554              	
 2555              	/*************************
 2556              	    NAME>	( na -- ca )
 2557              	 	Return a code address
 2558              		given a name address.
 2559              	**************************/
 2560 413c 20410000 		_HEADER NAMET,5,"NAME>"
 2560      054E414D 
 2560      453E00BF 
 2561 4148 504700BF 		_NEST
 2562 414c B5310000 		_ADR	COUNT
 2563 4150 E72B0000 		_DOLIT	0x1F
 2563      1F000000 
 2564 4158 A52D0000 		_ADR	ANDD
 2565 415c 252E0000 		_ADR	PLUS
 2566 4160 1D360000 		_ADR	ALGND
 2567 4164 272A0000 		_UNNEST
 2568              	
 2569              	/***************************************
 2570              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2571              	 	Compare u bytes in two strings. 
 2572              		Return 0 if identical.
 2573              	
 2574              	  Picatout 2020-12-01, 
 2575              	    Because of problem with .align 
 2576              		directive that doesn't fill 
 2577              		with zero's I had to change 
 2578              		the "SAME?" and "FIND" 
 2579              	 	words  to do a byte by byte comparison. 
 2580              	****************************************/
 2581 4168 40410000 		_HEADER SAMEQ,5,"SAME?"
 2581      0553414D 
ARM GAS  forth.s 			page 152


 2581      453F00BF 
 2582 4174 504700BF 		_NEST
 2583 4178 DD2C0000 		_ADR	TOR
 2584 417c 3B2C0000 		_BRAN	SAME2
 2584      C0410000 
 2585              	SAME1:
 2586 4184 852D0000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2587 4188 C92C0000 		_ADR	RAT   // a1 a2 a1 u 
 2588 418c 252E0000 		_ADR	PLUS  // a1 a2 a1+u 
 2589 4190 8D2C0000 		_ADR	CAT	   // a1 a2 c1    		
 2590 4194 852D0000 		_ADR	OVER  // a1 a2 c1 a2 
 2591 4198 C92C0000 		_ADR	RAT    
 2592 419c 252E0000 		_ADR	PLUS    
 2593 41a0 8D2C0000 		_ADR	CAT	  // a1 a2 c1 c2
 2594 41a4 352E0000 		_ADR	SUBB  
 2595 41a8 352F0000 		_ADR	QDUP
 2596 41ac 272C0000 		_QBRAN	SAME2
 2596      C0410000 
 2597 41b4 992C0000 		_ADR	RFROM
 2598 41b8 512D0000 		_ADR	DROP
 2599 41bc 272A0000 		_UNNEST	// strings not equal
 2600              	SAME2:
 2601 41c0 092C0000 		_DONXT	SAME1
 2601      84410000 
 2602 41c8 E72B0000 		_DOLIT	0
 2602      00000000 
 2603 41d0 272A0000 		_UNNEST	// strings equal
 2604              	
 2605              	/***********************************
 2606              	    FIND	( a na -- ca na | a F )
 2607              	 	Search a vocabulary for a string.
 2608              		Return ca and na if succeeded.
 2609              	hidden word used by NAME?
 2610              	
 2611              	  Picatout 2020-12-01,  
 2612              		 Modified from original. 
 2613              	   See comment for word "SAME?" 
 2614              	************************************/
 2615              	FIND:
 2616 41d4 504700BF 		_NEST
 2617 41d8 712D0000 		_ADR	SWAP			// na a	
 2618 41dc B5310000 		_ADR	COUNT			// na a+1 count
 2619 41e0 612D0000 		_ADR	DUPP 
 2620 41e4 61320000 		_ADR	TEMP
 2621 41e8 592C0000 		_ADR	STORE			// na a+1 count 
 2622 41ec DD2C0000 		_ADR  TOR		// na a+1  R: count  
 2623 41f0 712D0000 		_ADR	SWAP			// a+1 na
 2624              	FIND1:
 2625 41f4 612D0000 		_ADR	DUPP			// a+1 na na
 2626 41f8 272C0000 		_QBRAN	FIND6	// end of vocabulary
 2626      4C420000 
 2627 4200 612D0000 		_ADR	DUPP			// a+1 na na
 2628 4204 8D2C0000 		_ADR	CAT			// a+1 na name1
 2629 4208 E72B0000 		_DOLIT	MASKK
 2629      1FFFFFFF 
 2630 4210 A52D0000 		_ADR	ANDD
 2631 4214 C92C0000 		_ADR	RAT			// a+1 na name1 count 
ARM GAS  forth.s 			page 153


 2632 4218 CD2D0000 		_ADR	XORR			// a+1 na,  same length?
 2633 421c 272C0000 		_QBRAN	FIND2
 2633      34420000 
 2634 4224 D12E0000 		_ADR	CELLM			// a+1 la
 2635 4228 6D2C0000 		_ADR	AT			// a+1 next_na
 2636 422c 3B2C0000 		_BRAN	FIND1			// try next word
 2636      F4410000 
 2637              	FIND2:   
 2638 4234 812E0000 		_ADR	ONEP			// a+1 na+1
 2639 4238 61320000 		_ADR	TEMP
 2640 423c 6D2C0000 		_ADR	AT			// a+1 na+1 count
 2641 4240 75410000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2642              	FIND3:	
 2643 4244 3B2C0000 		_BRAN	FIND4
 2643      64420000 
 2644              	FIND6:	
 2645 424c 992C0000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2646 4250 512D0000 		_ADR	DROP			// a+1 0
 2647 4254 712D0000 		_ADR	SWAP			// 0 a+1
 2648 4258 912E0000 		_ADR	ONEM			// 0 a
 2649 425c 712D0000 		_ADR	SWAP			// a 0 
 2650 4260 272A0000 		_UNNEST			// return without a match
 2651              	FIND4:	
 2652 4264 272C0000 		_QBRAN	FIND5			// a+1 na+1
 2652      80420000 
 2653 426c 912E0000 		_ADR	ONEM			// a+1 na
 2654 4270 D12E0000 		_ADR	CELLM			// a+4 la
 2655 4274 6D2C0000 		_ADR	AT			// a+1 next_na
 2656 4278 3B2C0000 		_BRAN	FIND1			// compare next name
 2656      F4410000 
 2657              	FIND5:	
 2658 4280 992C0000 		_ADR	RFROM			// a+1 na+1 count
 2659 4284 512D0000 		_ADR	DROP			// a+1 na+1
 2660 4288 712D0000 		_ADR	SWAP			// na+1 a+1
 2661 428c 512D0000 		_ADR	DROP			// na+1
 2662 4290 912E0000 		_ADR	ONEM			// na
 2663 4294 612D0000 		_ADR	DUPP			// na na
 2664 4298 49410000 		_ADR	NAMET			// na ca
 2665 429c 712D0000 		_ADR	SWAP			// ca na
 2666 42a0 272A0000 		_UNNEST			//  return with a match
 2667              	
 2668              	/********************************
 2669              	    NAME?	( a -- ca na | a F )
 2670              	 	Search all context vocabularies 
 2671              		for a string.
 2672              	***********************************/
 2673 42a4 6C410000 		_HEADER NAMEQ,5,"NAME?"
 2673      054E414D 
 2673      453F00BF 
 2674 42b0 504700BF 		_NEST
 2675 42b4 E9320000 		_ADR	CNTXT
 2676 42b8 6D2C0000 		_ADR	AT
 2677 42bc D5410000 		_ADR	FIND
 2678 42c0 272A0000 		_UNNEST
 2679              	
 2680              	/********************
 2681              	  console input
ARM GAS  forth.s 			page 154


 2682              	********************/
 2683              	
 2684              	/****************************
 2685              		ASCIZ ( a -- a+ )
 2686              		convert counted string to 
 2687              		null terminated string 
 2688              		in pad.
 2689              	*****************************/
 2690 42c4 A8420000 		_HEADER ASCIZ,5,"ASCIZ" 
 2690      05415343 
 2690      495A00BF 
 2691 42d0 504700BF 		_NEST 
 2692 42d4 B5310000 		_ADR COUNT
 2693 42d8 612D0000 		_ADR DUPP
 2694 42dc DD2C0000 		_ADR TOR 
 2695 42e0 E9360000 		_ADR PAD 
 2696 42e4 712D0000 		_ADR SWAP
 2697 42e8 71370000 		_ADR MOVE  
 2698 42ec E9360000 		_ADR PAD 
 2699 42f0 992C0000 		_ADR RFROM
 2700 42f4 252E0000 		_ADR PLUS 
 2701 42f8 E72B0000 		_DOLIT 0 
 2701      00000000 
 2702 4300 712D0000 		_ADR SWAP  
 2703 4304 792C0000 		_ADR CSTOR
 2704 4308 E9360000 		_ADR PAD   
 2705 430c 272A0000 		_UNNEST 
 2706              	
 2707              	/***********************
 2708              		UPPER (cstring -- cstring )
 2709              		convert to upper case in situ
 2710              	*******************************/
 2711 4310 C8420000 		_HEADER UPPER,5,"UPPER"
 2711      05555050 
 2711      455200BF 
 2712 431c 504700BF 		_NEST 
 2713 4320 612D0000 		_ADR DUPP 
 2714 4324 DD2C0000 		_ADR TOR 
 2715 4328 B5310000 		_ADR COUNT
 2716 432c E72B0000 		_DOLIT 0x1f
 2716      1F000000 
 2717 4334 A52D0000 		_ADR ANDD
 2718 4338 DD2C0000 		_ADR TOR 
 2719 433c 3B2C0000 		_BRAN 3f
 2719      90430000 
 2720 4344 612D0000 	1:  _ADR DUPP 
 2721 4348 B5310000 		_ADR COUNT 
 2722 434c 612D0000 		_ADR DUPP 
 2723 4350 E72B0000 		_DOLIT 'a'-1
 2723      60000000 
 2724 4358 2D310000 		_ADR GREAT
 2725 435c 272C0000 		_QBRAN 2f 
 2725      88430000 
 2726 4364 612D0000 		_ADR DUPP 
 2727 4368 E72B0000 		_DOLIT 'z'+1 
 2727      7B000000 
 2728 4370 FD300000 		_ADR LESS 
ARM GAS  forth.s 			page 155


 2729 4374 272C0000 		_QBRAN 2f 
 2729      88430000 
 2730 437c E72B0000 		_DOLIT 0x5f  
 2730      5F000000 
 2731 4384 A52D0000 		_ADR ANDD
 2732 4388 492F0000 	2:	_ADR ROT
 2733 438c 792C0000 		_ADR CSTOR
 2734 4390 092C0000 	3:  _DONXT 1b
 2734      44430000 
 2735 4398 512D0000 		_ADR DROP 
 2736 439c 992C0000 		_ADR RFROM
 2737 43a0 272A0000 		_UNNEST 
 2738              	
 2739              	/**************************************
 2740              	   BKSP  ( bot eot cur -- bot eot cur )
 2741              	   Move cursor left by one character.
 2742              	hidden word used by KTAP
 2743              	***************************************/
 2744              	BKSP:
 2745 43a4 504700BF 		_NEST
 2746 43a8 DD2C0000 		_ADR	TOR
 2747 43ac 852D0000 		_ADR	OVER
 2748 43b0 992C0000 		_ADR	RFROM
 2749 43b4 712D0000 		_ADR	SWAP
 2750 43b8 852D0000 		_ADR	OVER
 2751 43bc CD2D0000 		_ADR	XORR
 2752 43c0 272C0000 		_QBRAN	BACK1
 2752      EC430000 
 2753 43c8 E72B0000 		_DOLIT	BKSPP
 2753      08000000 
 2754 43d0 F12A0000 		_ADR	EMIT
 2755 43d4 912E0000 		_ADR	ONEM
 2756 43d8 E12E0000 		_ADR	BLANK
 2757 43dc F12A0000 		_ADR	EMIT
 2758 43e0 E72B0000 		_DOLIT	BKSPP
 2758      08000000 
 2759 43e8 F12A0000 		_ADR	EMIT
 2760              	BACK1:
 2761 43ec 272A0000 		  _UNNEST
 2762              	
 2763              	/****************************************
 2764              	   TAP	 ( bot eot cur c -- bot eot cur )
 2765              	   Accept and echo the key stroke 
 2766              	   and bump the cursor.
 2767              	hidden word used by KTAP 
 2768              	****************************************/
 2769              	TAP:
 2770 43f0 504700BF 		_NEST
 2771 43f4 612D0000 		_ADR	DUPP
 2772 43f8 F12A0000 		_ADR	EMIT
 2773 43fc 852D0000 		_ADR	OVER
 2774 4400 792C0000 		_ADR	CSTOR
 2775 4404 812E0000 		_ADR	ONEP
 2776 4408 272A0000 		_UNNEST
 2777              	
 2778              	
 2779              	/*******************************************
ARM GAS  forth.s 			page 156


 2780              	    kTAP	( bot eot cur c -- bot eot cur )
 2781              	 	Process a key stroke, CR or backspace.
 2782              	hidden word used by ACCEPT 
 2783              	*******************************************/
 2784              	KTAP:
 2785              	TTAP:
 2786 440c 504700BF 		_NEST
 2787 4410 612D0000 		_ADR	DUPP
 2788 4414 E72B0000 		_DOLIT	CRR
 2788      0D000000 
 2789 441c CD2D0000 		_ADR	XORR
 2790 4420 272C0000 		_QBRAN  KTAP2
 2790      50440000 
 2791 4428 E72B0000 		_DOLIT	BKSPP
 2791      08000000 
 2792 4430 CD2D0000 		_ADR	XORR
 2793 4434 272C0000 		_QBRAN	KTAP1
 2793      48440000 
 2794 443c E12E0000 		_ADR	BLANK
 2795 4440 F1430000 		_ADR	TAP
 2796 4444 272A0000 		_UNNEST
 2797              	//	.word	0			// patch
 2798              	KTAP1:
 2799 4448 A5430000 		_ADR	BKSP
 2800 444c 272A0000 		_UNNEST
 2801              	KTAP2:
 2802 4450 512D0000 		_ADR	DROP
 2803 4454 712D0000 		_ADR	SWAP
 2804 4458 512D0000 		_ADR	DROP
 2805 445c 612D0000 		_ADR	DUPP
 2806 4460 272A0000 		_UNNEST
 2807              	
 2808              	/************************************
 2809              	    ACCEPT	( b u -- b u )
 2810              	 	Accept characters to input 
 2811              		buffer. Return with actual count.
 2812              	*************************************/
 2813 4464 14430000 		_HEADER ACCEP,6,"ACCEPT"
 2813      06414343 
 2813      45505400 
 2814 4470 504700BF 		_NEST
 2815 4474 852D0000 		_ADR	OVER
 2816 4478 252E0000 		_ADR	PLUS
 2817 447c 852D0000 		_ADR	OVER
 2818              	ACCP1:
 2819 4480 992F0000 		_ADR	DDUP
 2820 4484 CD2D0000 		_ADR	XORR
 2821 4488 272C0000 		_QBRAN	ACCP4
 2821      C8440000 
 2822 4490 CD2A0000 		_ADR	KEY
 2823 4494 612D0000 		_ADR	DUPP
 2824 4498 E12E0000 		_ADR	BLANK
 2825 449c E72B0000 		_DOLIT 127
 2825      7F000000 
 2826 44a4 81330000 		_ADR	WITHI
 2827 44a8 272C0000 		_QBRAN	ACCP2
 2827      BC440000 
ARM GAS  forth.s 			page 157


 2828 44b0 F1430000 		_ADR	TAP
 2829 44b4 3B2C0000 		_BRAN	ACCP3
 2829      C0440000 
 2830              	ACCP2:
 2831 44bc 0D440000 		_ADR	KTAP
 2832              	ACCP3:	  
 2833 44c0 3B2C0000 		_BRAN	ACCP1
 2833      80440000 
 2834              	ACCP4:
 2835 44c8 512D0000 		_ADR	DROP
 2836 44cc 852D0000 		_ADR	OVER
 2837 44d0 352E0000 		_ADR	SUBB
 2838 44d4 272A0000 		_UNNEST
 2839              	
 2840              	/*****************************
 2841              	    QUERY	( -- )
 2842              	 	Accept input stream 
 2843              		to terminal input buffer.
 2844              	******************************/
 2845 44d8 68440000 		_HEADER QUERY,5,"QUERY"
 2845      05515545 
 2845      525900BF 
 2846 44e4 504700BF 		_NEST
 2847 44e8 09370000 		_ADR	TIB
 2848 44ec E72B0000 		_DOLIT 80
 2848      50000000 
 2849 44f4 71440000 		_ADR	ACCEP
 2850 44f8 A5320000 		_ADR	NTIB
 2851 44fc 592C0000 		_ADR	STORE
 2852 4500 512D0000 		_ADR	DROP
 2853 4504 E72B0000 		_DOLIT	0
 2853      00000000 
 2854 450c 8D320000 		_ADR	INN
 2855 4510 592C0000 		_ADR	STORE
 2856 4514 272A0000 		_UNNEST
 2857              	
 2858              	/********************
 2859              	  Error handling
 2860              	********************/
 2861              	
 2862              	/*********************
 2863              	    ABORT	( a -- )
 2864              	 	Reset data stack 
 2865              		and jump to QUIT.
 2866              	**********************/
 2867 4518 DC440000 		_HEADER ABORT,5,"ABORT"
 2867      0541424F 
 2867      525400BF 
 2868 4524 504700BF 		_NEST
 2869              	ABORT1:
 2870 4528 753C0000 		_ADR	SPACE
 2871 452c B5310000 		_ADR	COUNT
 2872 4530 C93C0000 		_ADR	TYPEE
 2873 4534 E72B0000 		_DOLIT	0X3F
 2873      3F000000 
 2874 453c F12A0000 		_ADR	EMIT
 2875 4540 FD3C0000 		_ADR	CR
ARM GAS  forth.s 			page 158


 2876 4544 AD460000 		_ADR	PRESE
 2877 4548 3B2C0000 		_BRAN	QUIT
 2877      CC460000 
 2878              	
 2879              	/*******************************
 2880              	    _abort"	( f -- )
 2881              	 	Run time routine of ABORT"
 2882              		Abort with a message.
 2883              	hidden used by compiler 
 2884              	********************************/
 2885              	ABORQ:
 2886 4550 504700BF 		_NEST
 2887 4554 1D3D0000 		_ADR	DOSTR
 2888 4558 712D0000 		_ADR	SWAP 
 2889 455c 272C0000 		_QBRAN	1f	// text flag
 2889      6C450000 
 2890 4564 3B2C0000 		_BRAN	ABORT1
 2890      28450000 
 2891              	1:
 2892 456c 512D0000 		_ADR	DROP
 2893 4570 272A0000 		_UNNEST			// drop error
 2894              	
 2895              	/************************
 2896              	  The text interpreter
 2897              	************************/
 2898              	
 2899              	/***************************
 2900              	    $INTERPRET  ( a -- )
 2901              	 	Interpret a word. 
 2902              		If failed, try to 
 2903              		convert it to an integer.
 2904              	******************************/
 2905 4574 1C450000 		_HEADER INTER,10,"$INTERPRET"
 2905      0A24494E 
 2905      54455250 
 2905      52455400 
 2906 4584 504700BF 		_NEST
 2907 4588 B1420000 		_ADR	NAMEQ
 2908 458c 352F0000 		_ADR	QDUP	// ?defined
 2909 4590 272C0000 		_QBRAN	INTE1
 2909      C4450000 
 2910 4598 6D2C0000 		_ADR	AT
 2911 459c E72B0000 		_DOLIT	COMPO
 2911      40000000 
 2912 45a4 A52D0000 		_ADR	ANDD	// ?compile only lexicon bits
 2913 45a8 51450000 		_ABORQ	13," compile only"
 2913      0D20636F 
 2913      6D70696C 
 2913      65206F6E 
 2913      6C7900BF 
 2914 45bc FD2B0000 		_ADR	EXECU
 2915 45c0 272A0000 		_UNNEST			// execute defined word
 2916              	INTE1:
 2917 45c4 AD220000 		_ADR	NUMBER 
 2918 45c8 272C0000 		_QBRAN	INTE2
 2918      D4450000 
 2919 45d0 272A0000 		_UNNEST
ARM GAS  forth.s 			page 159


 2920              	INTE2:
 2921 45d4 25450000 		_ADR	ABORT	// error
 2922              	
 2923              	/******************************
 2924              	    [	   ( -- )
 2925              	 	Start the text interpreter.
 2926              	*******************************/
 2927 45d8 78450000 		_HEADER LBRAC,IMEDD+1,"["
 2927      815B00BF 
 2928 45e0 504700BF 		_NEST
 2929 45e4 E72B0000 		_DOLIT	INTER
 2929      84450000 
 2930 45ec BD320000 		_ADR	TEVAL
 2931 45f0 592C0000 		_ADR	STORE
 2932 45f4 272A0000 		_UNNEST
 2933              	
 2934              	/**********************
 2935              	    .OK	 ( -- )
 2936              	 	Display "ok" only 
 2937              		while interpreting.
 2938              	************************/
 2939 45f8 DC450000 		_HEADER DOTOK,3,".OK"
 2939      032E4F4B 
 2940 4600 504700BF 		_NEST
 2941 4604 E72B0000 		_DOLIT	INTER
 2941      84450000 
 2942 460c BD320000 		_ADR	TEVAL
 2943 4610 6D2C0000 		_ADR	AT
 2944 4614 AD300000 		_ADR	EQUAL
 2945 4618 272C0000 		_QBRAN	DOTO1
 2945      28460000 
 2946 4620 653D0000 		_DOTQP	3," ok"
 2946      03206F6B 
 2947              	DOTO1:
 2948 4628 FD3C0000 		_ADR	CR
 2949 462c 272A0000 		_UNNEST
 2950              	
 2951              	/*************************
 2952              	    ?STACK	( -- )
 2953              	 	Abort if the data 
 2954              		stack underflows.
 2955              	************************/
 2956 4630 FC450000 		_HEADER QSTAC,6,"?STACK"
 2956      063F5354 
 2956      41434B00 
 2957 463c 504700BF 		_NEST
 2958 4640 85360000 		_ADR	DEPTH
 2959 4644 952D0000 		_ADR	ZLESS	// check only for underflow
 2960 4648 51450000 		_ABORQ	9,"underflow"
 2960      09756E64 
 2960      6572666C 
 2960      6F7700BF 
 2961 4658 272A0000 		_UNNEST
 2962              	
 2963              	/*******************
 2964              	    EVAL	( -- )
 2965              	 	Interpret the 
ARM GAS  forth.s 			page 160


 2966              		input stream.
 2967              	*******************/
 2968 465c 34460000 		_HEADER EVAL,4,"EVAL"
 2968      04455641 
 2968      4C0000BF 
 2969 4668 504700BF 		_NEST
 2970              	EVAL1:
 2971 466c 29410000 	    _ADR	TOKEN
 2972 4670 612D0000 		_ADR	DUPP
 2973 4674 8D2C0000 		_ADR	CAT	// ?input stream empty
 2974 4678 272C0000 		_QBRAN	EVAL2
 2974      94460000 
 2975 4680 BD320000 		_ADR	TEVAL
 2976 4684 21370000 		_ADR	ATEXE
 2977 4688 3D460000 		_ADR	QSTAC	// evaluate input, check stack
 2978 468c 3B2C0000 		_BRAN	EVAL1
 2978      6C460000 
 2979              	EVAL2:
 2980 4694 512D0000 		_ADR	DROP
 2981 4698 01460000 		_ADR	DOTOK
 2982 469c 272A0000 		_UNNEST	// prompt
 2983              	
 2984              	/**********************************
 2985              	    PRESET	( -- )
 2986              	 	Reset data stack pointer 
 2987              		and the terminal input buffer.
 2988              	**********************************/
 2989 46a0 60460000 		_HEADER PRESE,6,"PRESET"
 2989      06505245 
 2989      53455400 
 2990 46ac 504700BF 		_NEST 
 2991 46b0 E72B0000 		_DOLIT SPP 
 2991      80FE0120 
 2992 46b8 1D2D0000 		_ADR SPSTOR 
 2993 46bc 272A0000 		_UNNEST 
 2994              	
 2995              	/*********************
 2996              	    QUIT	( -- )
 2997              	 	Reset return stack 
 2998              		pointer and start 
 2999              		text interpreter.
 3000              	***********************/
 3001 46c0 A4460000 		_HEADER QUIT,4,"QUIT"
 3001      04515549 
 3001      540000BF 
 3002 46cc E72B0000 		_DOLIT RPP 
 3002      00FF0120 
 3003 46d4 0D2D0000 		_ADR RPSTOR 
 3004              	QUIT1:
 3005 46d8 E1450000 		_ADR	LBRAC			// start interpretation
 3006              	QUIT2:
 3007 46dc E5440000 		_ADR	QUERY			// get input
 3008 46e0 69460000 		_ADR	EVAL
 3009 46e4 3B2C0000 		_BRAN	QUIT2	// continue till error
 3009      DC460000 
 3010              	
 3011              	/***************************
ARM GAS  forth.s 			page 161


 3012              		FORGET ( <string> -- )
 3013              		forget all definition 
 3014              		starting at <string>
 3015              	****************************/
 3016 46ec C4460000 		_HEADER FORGET,6,"FORGET"
 3016      06464F52 
 3016      47455400 
 3017 46f8 504700BF 		_NEST 
 3018 46fc 29410000 		_ADR TOKEN 
 3019 4700 612D0000 		_ADR DUPP 
 3020 4704 272C0000 		_QBRAN 9f 
 3020      40470000 
 3021 470c B1420000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3022 4710 352F0000 		_ADR QDUP 
 3023 4714 272C0000 		_QBRAN 8f
 3023      3C470000 
 3024 471c D12E0000 		_ADR CELLM // ( ca la )
 3025 4720 612D0000 		_ADR DUPP 
 3026 4724 FD320000 		_ADR CPP   
 3027 4728 592C0000 		_ADR STORE
 3028 472c 6D2C0000 		_ADR AT 
 3029 4730 29330000 		_ADR LAST 
 3030 4734 592C0000 		_ADR STORE
 3031 4738 954C0000 		_ADR OVERT 
 3032 473c 512D0000 	8:  _ADR DROP 
 3033 4740 272A0000 	9:	_UNNEST 
 3034              	
 3035              		.p2align 2 
 3036              	
 3037              	/*****************
 3038              	  The compiler
 3039              	******************/
 3040              	
 3041              	/**************************************
 3042              	    '	   ( -- ca )
 3043              	 	Search context vocabularies 
 3044              		for the next word in input stream.
 3045              	***************************************/
 3046 4744 F0460000 		_HEADER TICK,1,"'"
 3046      012700BF 
 3047 474c 504700BF 		_NEST
 3048 4750 29410000 		_ADR	TOKEN
 3049 4754 B1420000 		_ADR	NAMEQ	// ?defined
 3050 4758 272C0000 		_QBRAN	TICK1
 3050      64470000 
 3051 4760 272A0000 		_UNNEST	// yes, push code address
 3052              	TICK1:	
 3053 4764 25450000 		_ADR ABORT	// no, error
 3054              	
 3055              	/***********************
 3056              	    ALLOT	( n -- )
 3057              	 	Allocate n bytes to 
 3058              		the ram area.
 3059              	************************/
 3060 4768 48470000 		_HEADER ALLOT,5,"ALLOT"
 3060      05414C4C 
 3060      4F5400BF 
ARM GAS  forth.s 			page 162


 3061 4774 504700BF 		_NEST
 3062 4778 FD320000 		_ADR	CPP
 3063 477c 6D310000 		_ADR	PSTOR
 3064 4780 272A0000 		_UNNEST			// adjust code pointer
 3065              	
 3066              	/******************************
 3067              	    ,	   ( w -- )
 3068              	 	Compile an integer 
 3069              		into the code dictionary.
 3070              	******************************/
 3071 4784 6C470000 		_HEADER COMMA,1,","
 3071      012C00BF 
 3072 478c 504700BF 		_NEST
 3073 4790 D1360000 		_ADR	HERE
 3074 4794 612D0000 		_ADR	DUPP
 3075 4798 C12E0000 		_ADR	CELLP	// cell boundary
 3076 479c FD320000 		_ADR	CPP
 3077 47a0 592C0000 		_ADR	STORE
 3078 47a4 592C0000 		_ADR	STORE
 3079 47a8 272A0000 		_UNNEST	// adjust code pointer, compile
 3080              		.p2align 2 
 3081              	
 3082              	/************************************
 3083              	    [COMPILE]   ( -- //  string> )
 3084              	 	Compile the next immediate word 
 3085              		into code dictionary.
 3086              	*************************************/
 3087 47ac 88470000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3087      895B434F 
 3087      4D50494C 
 3087      455D00BF 
 3088 47bc 504700BF 		_NEST
 3089 47c0 4D470000 		_ADR	TICK
 3090 47c4 8D470000 		_ADR	COMMA
 3091 47c8 272A0000 		_UNNEST
 3092              	
 3093              	/****************************
 3094              	    COMPILE	( -- )
 3095              	 	Compile the next address 
 3096              		in colon list to code 
 3097              		dictionary.
 3098              	*******************************/
 3099 47cc B0470000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3099      47434F4D 
 3099      50494C45 
 3100 47d8 504700BF 		_NEST
 3101 47dc 992C0000 		_ADR	RFROM
 3102 47e0 612D0000 		_ADR	DUPP 
 3103 47e4 6D2C0000 		_ADR	AT
 3104 47e8 E72B0000 		_DOLIT 1 
 3104      01000000 
 3105 47f0 B92D0000 		_ADR	ORR 
 3106 47f4 8D470000 		_ADR	COMMA 
 3107 47f8 C12E0000 		_ADR	CELLP 
 3108 47fc DD2C0000 		_ADR	TOR 
 3109 4800 272A0000 		_UNNEST	// adjust return address
 3110              	
ARM GAS  forth.s 			page 163


 3111              	/*************************
 3112              	    LITERAL	( w -- )
 3113              	 	Compile tos to code 
 3114              		dictionary as an 
 3115              		integer literal.
 3116              	***************************/
 3117 4804 D0470000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3117      874C4954 
 3117      4552414C 
 3118 4810 504700BF 		_NEST
 3119 4814 E72B0000 		_COMPI	DOLIT
 3119      E62B0000 
 3119      F14C0000 
 3120 4820 8D470000 		_ADR	COMMA
 3121 4824 272A0000 		_UNNEST
 3122              	
 3123              	/********************
 3124              	    $,"	( -- )
 3125              	 	Compile a literal 
 3126              		string up to next " .
 3127              	hidden word 
 3128              	************************/
 3129              	STRCQ:
 3130 4828 504700BF 		_NEST
 3131 482c E72B0000 		_DOLIT -4
 3131      FCFFFFFF 
 3132 4834 FD320000 		_ADR	CPP
 3133 4838 6D310000 		_ADR	PSTOR
 3134 483c E72B0000 		_DOLIT	'\"'
 3134      22000000 
 3135 4844 05410000 		_ADR	WORDD			// move word to code dictionary
 3136 4848 B5310000 		_ADR	COUNT
 3137 484c 252E0000 		_ADR	PLUS
 3138 4850 1D360000 		_ADR	ALGND			// calculate aligned end of string
 3139 4854 FD320000 		_ADR	CPP
 3140 4858 592C0000 		_ADR	STORE
 3141 485c 272A0000 		_UNNEST 			// adjust the code pointer
 3142              	
 3143              	/*******************
 3144              	   Structures
 3145              	*******************/
 3146              	
 3147              	/*************************
 3148              	    FOR	 ( -- a )
 3149              	 	Start a FOR-NEXT loop 
 3150              		structure in a colon 
 3151              		definition.
 3152              	**************************/
 3153 4860 08480000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3153      C3464F52 
 3154 4868 504700BF 		_NEST
 3155 486c E72B0000 		_COMPI	TOR
 3155      DC2C0000 
 3155      F14C0000 
 3156 4878 D1360000 		_ADR	HERE
 3157 487c 272A0000 		_UNNEST
 3158              	
ARM GAS  forth.s 			page 164


 3159              	/********************************
 3160              		DO ( limit start -- )
 3161              		initialise a DO...LOOP 
 3162              		or DO...+LOOP 
 3163              	********************************/
 3164 4880 64480000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3164      C2444F00 
 3165 4888 504700BF 		_NEST
 3166 488c E72B0000 		_COMPI SWAP
 3166      702D0000 
 3166      F14C0000 
 3167 4898 E72B0000 		_COMPI TOR 
 3167      DC2C0000 
 3167      F14C0000 
 3168 48a4 E72B0000 		_COMPI TOR 
 3168      DC2C0000 
 3168      F14C0000 
 3169 48b0 D1360000 		_ADR HERE 
 3170 48b4 272A0000 		_UNNEST 
 3171              	
 3172              	DOPLOOP: // ( n -- R: counter limit )
 3173 48b8 B8E80300 		ldmfd RSP!,{T0,T1}
 3174 48bc 3044     		add T0,TOS 
 3175 48be 28E90300 		stmfd RSP!,{T0,T1}
 3176 48c2 8842     		cmp T0,T1 
 3177 48c4 05D4     		bmi 9f 
 3178 48c6 08F10808 		add RSP,#8
 3179 48ca 0CF1040C 		add IP,#4
 3180 48ce FEF7A7B8 		_NEXT 
 3181 48d2 DCF800C0 	9:  ldr IP,[IP]
 3182 48d6 FEF7A3B8 		_NEXT 
 3183              		
 3184              	/***************************
 3185              		+LOOP ( a -- )
 3186              		increment counter 
 3187              		end loop if countr>limit
 3188              	****************************/
 3189 48da 84480000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3189      C52B4C4F 
 3189      4F50
 3190 48e4 504700BF 		_NEST 
 3191 48e8 E72B0000 		_COMPI DOPLOOP 
 3191      B8480000 
 3191      F14C0000 
 3192 48f4 8D470000 		_ADR COMMA
 3193 48f8 272A0000 		_UNNEST 
 3194              	
 3195              	DOLOOP: // ( -- R: counter limit )
 3196 48fc D8F80000 		ldr T0,[RSP]
 3197 4900 00F10100 		add T0,#1
 3198 4904 C8F80000 		str T0,[RSP]
 3199 4908 D8F80410 		ldr T1,[RSP,#4]
 3200 490c 8842     		cmp T0,T1 
 3201 490e 05D4     		bmi 9f
 3202 4910 08F10808 		add RSP,#8  // counter and limit  
 3203 4914 0CF1040C 		add IP,IP,#4 // skip loop address 
 3204 4918 FEF782B8 		_NEXT 
ARM GAS  forth.s 			page 165


 3205 491c DCF800C0 	9:  ldr IP,[IP]
 3206 4920 FEF77EB8 		_NEXT 
 3207              	
 3208              	
 3209              	/********************************
 3210              		LOOP ( a -- )
 3211              		increment counter 
 3212              		end loop if >= limit 
 3213              	*********************************/
 3214 4924 DE480000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3214      C44C4F4F 
 3214      500000BF 
 3215 4930 504700BF 		_NEST 
 3216 4934 E72B0000 		_COMPI DOLOOP
 3216      FC480000 
 3216      F14C0000 
 3217 4940 8D470000 		_ADR COMMA 
 3218 4944 272A0000 		_UNNEST 
 3219              	
 3220              	
 3221              	/**********************
 3222              	    BEGIN	( -- a )
 3223              	 	Start an infinite 
 3224              		or indefinite 
 3225              		loop structure.
 3226              	************************/
 3227 4948 28490000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3227      C5424547 
 3227      494E00BF 
 3228 4954 504700BF 		_NEST
 3229 4958 D1360000 		_ADR	HERE
 3230 495c 272A0000 		_UNNEST
 3231              		.p2align 2 
 3232              	
 3233              	/********************
 3234              	    NEXT	( a -- )
 3235              	 	Terminate a FOR-NEXT
 3236              		loop structure.
 3237              	**************************/
 3238 4960 4C490000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 3238      C44E4558 
 3238      540000BF 
 3239 496c 504700BF 		_NEST
 3240 4970 E72B0000 		_COMPI	DONXT
 3240      082C0000 
 3240      F14C0000 
 3241 497c 8D470000 		_ADR	COMMA
 3242 4980 272A0000 		_UNNEST
 3243              	
 3244              	/***************************
 3245              		I ( -- n )
 3246              		stack for loop counter 
 3247              	***************************/
 3248 4984 64490000 		_HEADER I,1+COMPO,"I"
 3248      414900BF 
 3249 498c 47F8046D 		_PUSH 
 3250 4990 D8F80060 		ldr TOS,[RSP]
ARM GAS  forth.s 			page 166


 3251 4994 FEF744B8 		_NEXT 
 3252              	
 3253              	/****************************
 3254              		J ( -- n )
 3255              		stack outer loop counter 
 3256              	****************************/
 3257 4998 88490000 		_HEADER J,1,"J"
 3257      014A00BF 
 3258 49a0 47F8046D 		_PUSH 
 3259 49a4 D8F80460 		ldr TOS,[RSP,#4]
 3260 49a8 FEF73AB8 		_NEXT 
 3261              	
 3262              	/**********************
 3263              	    UNTIL	( a -- )
 3264              	 	Terminate a BEGIN-UNTIL
 3265              		indefinite loop structure.
 3266              	******************************/
 3267 49ac 9C490000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3267      C5554E54 
 3267      494C00BF 
 3268 49b8 504700BF 		_NEST
 3269 49bc E72B0000 		_COMPI	QBRAN
 3269      262C0000 
 3269      F14C0000 
 3270 49c8 8D470000 		_ADR	COMMA
 3271 49cc 272A0000 		_UNNEST
 3272              	
 3273              	/**********************
 3274              	    AGAIN	( a -- )
 3275              	 	Terminate a BEGIN-AGAIN
 3276              		infinite loop structure.
 3277              	*****************************/
 3278 49d0 B0490000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3278      C5414741 
 3278      494E00BF 
 3279 49dc 504700BF 		_NEST
 3280 49e0 E72B0000 		_COMPI	BRAN
 3280      3A2C0000 
 3280      F14C0000 
 3281 49ec 8D470000 		_ADR	COMMA
 3282 49f0 272A0000 		_UNNEST
 3283              	
 3284              	/************************
 3285              	    IF	  ( -- A )
 3286              	 	Begin a conditional
 3287              		branch structure.
 3288              	**************************/
 3289 49f4 D4490000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3289      C2494600 
 3290 49fc 504700BF 		_NEST
 3291 4a00 E72B0000 		_COMPI	QBRAN
 3291      262C0000 
 3291      F14C0000 
 3292 4a0c D1360000 		_ADR	HERE
 3293 4a10 E72B0000 		_DOLIT	4
 3293      04000000 
 3294 4a18 FD320000 		_ADR	CPP
ARM GAS  forth.s 			page 167


 3295 4a1c 6D310000 		_ADR	PSTOR
 3296 4a20 272A0000 		_UNNEST
 3297              	
 3298              	/*************************
 3299              	    AHEAD	( -- A )
 3300              	 	Compile a forward 
 3301              		branch instruction.
 3302              	*************************/
 3303 4a24 F8490000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3303      C5414845 
 3303      414400BF 
 3304 4a30 504700BF 		_NEST
 3305 4a34 E72B0000 		_COMPI	BRAN
 3305      3A2C0000 
 3305      F14C0000 
 3306 4a40 D1360000 		_ADR	HERE
 3307 4a44 E72B0000 		_DOLIT	4
 3307      04000000 
 3308 4a4c FD320000 		_ADR	CPP
 3309 4a50 6D310000 		_ADR	PSTOR
 3310 4a54 272A0000 		_UNNEST
 3311              	
 3312              	/**************************
 3313              	    REPEAT	( A a -- )
 3314              	 	Terminate a BEGIN-WHILE-REPEAT
 3315              		indefinite loop.
 3316              	**********************************/
 3317 4a58 284A0000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3317      C6524550 
 3317      45415400 
 3318 4a64 504700BF 		_NEST
 3319 4a68 DD490000 		_ADR	AGAIN
 3320 4a6c D1360000 		_ADR	HERE
 3321 4a70 712D0000 		_ADR	SWAP
 3322 4a74 592C0000 		_ADR	STORE
 3323 4a78 272A0000 		_UNNEST
 3324              	
 3325              	/*********************
 3326              	    THEN	( A -- )
 3327              	 	Terminate a conditional
 3328              		branch structure.
 3329              	*****************************/
 3330 4a7c 5C4A0000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3330      C4544845 
 3330      4E0000BF 
 3331 4a88 504700BF 		_NEST
 3332 4a8c D1360000 		_ADR	HERE
 3333 4a90 712D0000 		_ADR	SWAP
 3334 4a94 592C0000 		_ADR	STORE
 3335 4a98 272A0000 		_UNNEST
 3336              	
 3337              	/***************************
 3338              	    AFT	 ( a -- a A )
 3339              	 	Jump to THEN in a 
 3340              		FOR-AFT-THEN-NEXT loop 
 3341              		the first time through.
 3342              	*****************************/
ARM GAS  forth.s 			page 168


 3343 4a9c 804A0000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3343      C3414654 
 3344 4aa4 504700BF 		_NEST
 3345 4aa8 512D0000 		_ADR	DROP
 3346 4aac 314A0000 		_ADR	AHEAD
 3347 4ab0 55490000 		_ADR	BEGIN
 3348 4ab4 712D0000 		_ADR	SWAP
 3349 4ab8 272A0000 		_UNNEST
 3350              	
 3351              	/**********************
 3352              	    ELSE	( A -- A )
 3353              	 	Start the false 
 3354              		clause in an 
 3355              		IF-ELSE-THEN structure.
 3356              	****************************/
 3357 4abc A04A0000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3357      C4454C53 
 3357      450000BF 
 3358 4ac8 504700BF 		_NEST
 3359 4acc 314A0000 		_ADR	AHEAD
 3360 4ad0 712D0000 		_ADR	SWAP
 3361 4ad4 894A0000 		_ADR	THENN
 3362 4ad8 272A0000 		_UNNEST
 3363              	
 3364              	/**************************
 3365              	    WHILE	( a -- A a )
 3366              	 	Conditional branch out 
 3367              		of a BEGIN-WHILE-REPEAT loop.
 3368              	*********************************/
 3369 4adc C04A0000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3369      C5574849 
 3369      4C4500BF 
 3370 4ae8 504700BF 		_NEST
 3371 4aec FD490000 		_ADR	IFF
 3372 4af0 712D0000 		_ADR	SWAP
 3373 4af4 272A0000 		_UNNEST
 3374              	
 3375              	/***********************************
 3376              	    ABORT"	( -- //  string> )
 3377              	 	Conditional abort with an 
 3378              		error message.
 3379              	***********************************/
 3380 4af8 E04A0000 		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3380      8641424F 
 3380      52542200 
 3381 4b04 504700BF 		_NEST
 3382 4b08 E72B0000 		_COMPI	ABORQ
 3382      50450000 
 3382      F14C0000 
 3383 4b14 29480000 		_ADR	STRCQ
 3384 4b18 272A0000 		_UNNEST
 3385              	
 3386              	/******************************
 3387              	    $"	( -- //  string> )
 3388              	 	Compile an inline 
 3389              		word literal.
 3390              	*****************************/
ARM GAS  forth.s 			page 169


 3391 4b1c FC4A0000 		_HEADER STRQ,IMEDD+COMPO+2,"$\""
 3391      C2242200 
 3392 4b24 504700BF 		_NEST
 3393 4b28 E72B0000 		_COMPI	STRQP
 3393      483D0000 
 3393      F14C0000 
 3394 4b34 29480000 		_ADR	STRCQ
 3395 4b38 272A0000 		_UNNEST
 3396              	
 3397              	/******************************
 3398              	    ."	( -- //  string> )
 3399              	 	Compile an inline word
 3400              		literal to be typed out 
 3401              		at run time.
 3402              	*******************************/
 3403 4b3c 204B0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3403      C22E2200 
 3404 4b44 504700BF 		_NEST
 3405 4b48 E72B0000 		_COMPI	DOTQP
 3405      643D0000 
 3405      F14C0000 
 3406 4b54 29480000 		_ADR	STRCQ
 3407 4b58 272A0000 		_UNNEST
 3408              	
 3409              	/*********************
 3410              	  Name compiler
 3411              	***********************/
 3412              	
 3413              	/**************************
 3414              	    ?UNIQUE	( a -- a )
 3415              	 	Display a warning 
 3416              		message if the word 
 3417              		already exists.
 3418              	**************************/
 3419 4b5c 404B0000 		_HEADER UNIQU,7,"?UNIQUE"
 3419      073F554E 
 3419      49515545 
 3420 4b68 504700BF 		_NEST
 3421 4b6c 612D0000 		_ADR	DUPP
 3422 4b70 B1420000 		_ADR	NAMEQ			// ?name exists
 3423 4b74 272C0000 		_QBRAN	UNIQ1	// redefinitions are OK
 3423      944B0000 
 3424 4b7c 653D0000 		_DOTQP	7," reDef "		// but warn the user
 3424      07207265 
 3424      44656620 
 3425 4b88 852D0000 		_ADR	OVER
 3426 4b8c B5310000 		_ADR	COUNT
 3427 4b90 C93C0000 		_ADR	TYPEE			// just in case its not planned
 3428              	UNIQ1:
 3429 4b94 512D0000 		_ADR	DROP
 3430 4b98 272A0000 		_UNNEST
 3431              	
 3432              	/***********************
 3433              	    $,n	 ( na -- )
 3434              	 	Build a new dictionary 
 3435              		name using the data at na.
 3436              	hidden word 
ARM GAS  forth.s 			page 170


 3437              	*******************************/
 3438              	SNAME:
 3439 4b9c 504700BF 		_NEST
 3440 4ba0 612D0000 		_ADR	DUPP			//  na na
 3441 4ba4 8D2C0000 		_ADR	CAT			//  ?null input
 3442 4ba8 272C0000 		_QBRAN	SNAM1
 3442      E44B0000 
 3443 4bb0 694B0000 		_ADR	UNIQU			//  na
 3444 4bb4 29330000 		_ADR	LAST			//  na last
 3445 4bb8 6D2C0000 		_ADR	AT			//  na la
 3446 4bbc 8D470000 		_ADR	COMMA			//  na
 3447 4bc0 612D0000 		_ADR	DUPP			//  na na
 3448 4bc4 29330000 		_ADR	LAST			//  na na last
 3449 4bc8 592C0000 		_ADR	STORE			//  na , save na for vocabulary link
 3450 4bcc B5310000 		_ADR	COUNT			//  na+1 count
 3451 4bd0 252E0000 		_ADR	PLUS			//  na+1+count
 3452 4bd4 1D360000 		_ADR	ALGND			//  word boundary
 3453 4bd8 FD320000 		_ADR	CPP
 3454 4bdc 592C0000 		_ADR	STORE			//  top of dictionary now
 3455 4be0 272A0000 		_UNNEST
 3456              	SNAM1:
 3457 4be4 493D0000 		_ADR	STRQP
 3458 4be8 07       		.byte	7
 3459 4be9 206E616D 		.ascii " name? "
 3459      653F20
 3460 4bf0 25450000 		_ADR	ABORT
 3461              	
 3462              	/************************
 3463              	    $COMPILE	( a -- )
 3464              	 	Compile next word to 
 3465              		code dictionary as 
 3466              		a token or literal.
 3467              	**************************/
 3468 4bf4 604B0000 		_HEADER SCOMP,8,"$COMPILE"
 3468      0824434F 
 3468      4D50494C 
 3468      450000BF 
 3469 4c04 504700BF 		_NEST
 3470 4c08 B1420000 		_ADR	NAMEQ
 3471 4c0c 352F0000 		_ADR	QDUP	// defined?
 3472 4c10 272C0000 		_QBRAN	SCOM2
 3472      404C0000 
 3473 4c18 6D2C0000 		_ADR	AT
 3474 4c1c E72B0000 		_DOLIT	IMEDD
 3474      80000000 
 3475 4c24 A52D0000 		_ADR	ANDD	// immediate?
 3476 4c28 272C0000 		_QBRAN	SCOM1
 3476      384C0000 
 3477 4c30 FD2B0000 		_ADR	EXECU
 3478 4c34 272A0000 		_UNNEST			// it's immediate, execute
 3479              	SCOM1:
 3480 4c38 F14C0000 		_ADR	CALLC			// it's not immediate, compile
 3481 4c3c 272A0000 		_UNNEST	
 3482              	SCOM2:
 3483 4c40 AD220000 		_ADR	NUMBER 
 3484 4c44 272C0000 		_QBRAN	SCOM3
 3484      544C0000 
ARM GAS  forth.s 			page 171


 3485 4c4c 11480000 		_ADR	LITER
 3486 4c50 272A0000 		_UNNEST			// compile number as integer
 3487              	SCOM3: // compilation abort 
 3488 4c54 5D4C0000 		_ADR COLON_ABORT 
 3489 4c58 25450000 		_ADR	ABORT			// error
 3490              	
 3491              	/********************************
 3492              	 before aborting a compilation 
 3493              	 reset HERE and LAST
 3494              	 to previous values. 
 3495              	*******************************/
 3496              	COLON_ABORT:
 3497 4c5c 504700BF 		_NEST 
 3498 4c60 29330000 		_ADR LAST 
 3499 4c64 6D2C0000 		_ADR AT 
 3500 4c68 D12E0000 		_ADR CELLM 
 3501 4c6c 612D0000 		_ADR DUPP 
 3502 4c70 FD320000 		_ADR CPP  
 3503 4c74 592C0000 		_ADR STORE 
 3504 4c78 6D2C0000 		_ADR AT 
 3505 4c7c 29330000 		_ADR LAST 
 3506 4c80 592C0000 		_ADR STORE 
 3507 4c84 272A0000 		_UNNEST 
 3508              	
 3509              	/*********************
 3510              	    OVERT	( -- )
 3511              	 	Link a new word 
 3512              		into the current 
 3513              		vocabulary.
 3514              	**********************/
 3515 4c88 F84B0000 		_HEADER OVERT,5,"OVERT"
 3515      054F5645 
 3515      525400BF 
 3516 4c94 504700BF 		_NEST
 3517 4c98 29330000 		_ADR	LAST
 3518 4c9c 6D2C0000 		_ADR	AT
 3519 4ca0 E9320000 		_ADR	CNTXT
 3520 4ca4 592C0000 		_ADR	STORE
 3521 4ca8 272A0000 		_UNNEST
 3522              	
 3523              	/**********************
 3524              	    ;  ( -- )
 3525              	 	Terminate a colon
 3526              		definition.
 3527              	***********************/
 3528 4cac 8C4C0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3528      C13B00BF 
 3529 4cb4 504700BF 		_NEST
 3530 4cb8 E72B0000 		_DOLIT	UNNEST
 3530      262A0000 
 3531 4cc0 F14C0000 		_ADR	CALLC
 3532 4cc4 E1450000 		_ADR	LBRAC
 3533 4cc8 954C0000 		_ADR	OVERT
 3534 4ccc 272A0000 		_UNNEST
 3535              	
 3536              	/******************
 3537              	    ]	   ( -- )
ARM GAS  forth.s 			page 172


 3538              	 	Start compiling 
 3539              		the words in 
 3540              		the input stream.
 3541              	*********************/
 3542 4cd0 B04C0000 		_HEADER RBRAC,1,"]"
 3542      015D00BF 
 3543 4cd8 504700BF 		_NEST
 3544 4cdc E72B0000 		_DOLIT	SCOMP
 3544      044C0000 
 3545 4ce4 BD320000 		_ADR	TEVAL
 3546 4ce8 592C0000 		_ADR	STORE
 3547 4cec 272A0000 		_UNNEST
 3548              	
 3549              	/*********************
 3550              	    BL.W	( ca -- )
 3551              	 	compile ca.
 3552              	hidden word used by compiler
 3553              	*****************************/
 3554              	CALLC:
 3555 4cf0 504700BF 		_NEST
 3556 4cf4 E72B0000 		_DOLIT 1 
 3556      01000000 
 3557 4cfc B92D0000 		_ADR ORR 
 3558 4d00 8D470000 		_ADR COMMA  
 3559 4d04 272A0000 		_UNNEST 
 3560              	
 3561              	
 3562              	/*************************
 3563              	 	:	( -- //  string> )
 3564              	 	Start a new colon 
 3565              		definition using 
 3566              		next word as its name.
 3567              	**************************/
 3568 4d08 D44C0000 		_HEADER COLON,1,":"
 3568      013A00BF 
 3569 4d10 504700BF 		_NEST
 3570 4d14 29410000 		_ADR	TOKEN
 3571 4d18 9D4B0000 		_ADR	SNAME
 3572 4d1c 312A0000 		_ADR	COMPI_NEST 
 3573 4d20 D94C0000 		_ADR	RBRAC
 3574 4d24 272A0000 		_UNNEST
 3575              	
 3576              	/*************************
 3577              	    IMMEDIATE   ( -- )
 3578              	 	Make the last compiled 
 3579              		word an immediate word.
 3580              	***************************/
 3581 4d28 0C4D0000 		_HEADER IMMED,9,"IMMEDIATE"
 3581      09494D4D 
 3581      45444941 
 3581      544500BF 
 3582 4d38 504700BF 		_NEST
 3583 4d3c E72B0000 		_DOLIT	IMEDD
 3583      80000000 
 3584 4d44 29330000 		_ADR	LAST
 3585 4d48 6D2C0000 		_ADR	AT
 3586 4d4c 6D2C0000 		_ADR	AT
ARM GAS  forth.s 			page 173


 3587 4d50 B92D0000 		_ADR	ORR
 3588 4d54 29330000 		_ADR	LAST
 3589 4d58 6D2C0000 		_ADR	AT
 3590 4d5c 592C0000 		_ADR	STORE
 3591 4d60 272A0000 		_UNNEST
 3592              	
 3593              	/******************
 3594              	  Defining words
 3595              	******************/
 3596              	
 3597              	/***********************************
 3598              	    CONSTANT	( u -- //  string> )
 3599              	 	Compile a new constant.
 3600              	************************************/
 3601 4d64 2C4D0000 		_HEADER CONST,8,"CONSTANT"
 3601      08434F4E 
 3601      5354414E 
 3601      540000BF 
 3602 4d74 504700BF 		_NEST 
 3603 4d78 29410000 		_ADR	TOKEN
 3604 4d7c 9D4B0000 		_ADR	SNAME
 3605 4d80 954C0000 		_ADR	OVERT
 3606 4d84 312A0000 		_ADR	COMPI_NEST
 3607 4d88 E72B0000 		_DOLIT	DOCON
 3607      E8310000 
 3608 4d90 F14C0000 		_ADR	CALLC
 3609 4d94 8D470000 		_ADR	COMMA
 3610 4d98 E72B0000 		_DOLIT	UNNEST 
 3610      262A0000 
 3611 4da0 F14C0000 		_ADR	CALLC  
 3612 4da4 272A0000 		_UNNEST
 3613              	
 3614              		.p2align 2 
 3615              	/****************************************
 3616              	 doDOES> ( -- a )
 3617              	 runtime action of 		 
 3618              	 leave parameter field address on stack 
 3619              	hidden word used by compiler 
 3620              	***************************************/
 3621              	DODOES:
 3622 4da8 504700BF 		_NEST 
 3623 4dac 992C0000 		_ADR	RFROM
 3624 4db0 C12E0000 		_ADR	CELLP 
 3625 4db4 812E0000 		_ADR	ONEP  
 3626 4db8 29330000 		_ADR LAST 
 3627 4dbc 6D2C0000 		_ADR AT
 3628 4dc0 49410000 		_ADR NAMET 
 3629 4dc4 C12E0000 		_ADR CELLP 
 3630 4dc8 592C0000 		_ADR STORE  
 3631 4dcc 272A0000 		_UNNEST 
 3632              	
 3633              		.p2align 2
 3634              	/**********************
 3635              	  DOES> ( -- )
 3636              	  compile time action
 3637              	*************************/
 3638 4dd0 684D0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
ARM GAS  forth.s 			page 174


 3638      C5444F45 
 3638      533E00BF 
 3639 4ddc 504700BF 		_NEST 
 3640 4de0 E72B0000 		_DOLIT DODOES 
 3640      A84D0000 
 3641 4de8 F14C0000 		_ADR CALLC 
 3642 4dec E72B0000 		_DOLIT	UNNEST
 3642      262A0000 
 3643 4df4 F14C0000 		_ADR	CALLC 
 3644 4df8 312A0000 		_ADR COMPI_NEST
 3645 4dfc E72B0000 		_DOLIT RFROM 
 3645      982C0000 
 3646 4e04 F14C0000 		_ADR	CALLC
 3647 4e08 272A0000 		_UNNEST 
 3648              	
 3649              	
 3650              	/****************************
 3651              	  DEFER@ ( "name" -- a )
 3652              	  return value of code field 
 3653              	  of defered function. 
 3654              	******************************/
 3655 4e0c D44D0000 		_HEADER DEFERAT,6,"DEFER@"
 3655      06444546 
 3655      45524000 
 3656 4e18 504700BF 		_NEST 
 3657 4e1c 4D470000 		_ADR TICK
 3658 4e20 C12E0000 		_ADR CELLP 
 3659 4e24 6D2C0000 		_ADR AT 
 3660 4e28 912E0000 		_ADR ONEM 
 3661 4e2c 272A0000 		_UNNEST 
 3662              	
 3663              	/*********************************
 3664              	 DEFER! ( "name1" "name2" -- )
 3665              	 assign an action to a defered word 
 3666              	************************************/
 3667 4e30 104E0000 		_HEADER DEFERSTO,6,"DEFER!"
 3667      06444546 
 3667      45522100 
 3668 4e3c 504700BF 		_NEST 
 3669 4e40 4D470000 		_ADR TICK 
 3670 4e44 812E0000 		_ADR ONEP 
 3671 4e48 4D470000 		_ADR TICK 
 3672 4e4c C12E0000 		_ADR CELLP 
 3673 4e50 592C0000 		_ADR STORE 
 3674 4e54 272A0000 		_UNNEST
 3675              	
 3676              	/****************************
 3677              	  DEFER ( "name" -- )
 3678              	  create a defered definition
 3679              	*****************************/
 3680 4e58 344E0000 		_HEADER DEFER,5,"DEFER"
 3680      05444546 
 3680      455200BF 
 3681 4e64 504700BF 		_NEST 
 3682 4e68 B54E0000 		_ADR CREAT 
 3683 4e6c E72B0000 		_DOLIT UNNEST 
 3683      262A0000 
ARM GAS  forth.s 			page 175


 3684 4e74 F14C0000 		_ADR CALLC 
 3685 4e78 E72B0000 		_DOLIT DEFER_NOP
 3685      9C4E0000 
 3686 4e80 812E0000 		_ADR ONEP 
 3687 4e84 29330000 		_ADR LAST 
 3688 4e88 6D2C0000 		_ADR AT 
 3689 4e8c 49410000 		_ADR NAMET 
 3690 4e90 C12E0000 		_ADR CELLP 
 3691 4e94 592C0000 		_ADR STORE 
 3692 4e98 272A0000 		_UNNEST 
 3693              	DEFER_NOP:
 3694 4e9c 504700BF 		_NEST  
 3695 4ea0 E52B0000 		_ADR NOP 
 3696 4ea4 272A0000 		_UNNEST 
 3697              	
 3698              	/******************************
 3699              	    CREATE	( -- //  string> )
 3700              	 	Compile a new array entry 
 3701              		without allocating code space.
 3702              	***********************************/
 3703 4ea8 5C4E0000 		_HEADER CREAT,6,"CREATE"
 3703      06435245 
 3703      41544500 
 3704 4eb4 504700BF 		_NEST 
 3705 4eb8 29410000 		_ADR	TOKEN
 3706 4ebc 9D4B0000 		_ADR	SNAME
 3707 4ec0 954C0000 		_ADR	OVERT
 3708 4ec4 312A0000 		_ADR	COMPI_NEST 
 3709 4ec8 E72B0000 		_DOLIT	DOVAR
 3709      DC310000 
 3710 4ed0 F14C0000 		_ADR	CALLC
 3711 4ed4 272A0000 		_UNNEST
 3712              	
 3713              	/*******************************
 3714              	    VARIABLE	( -- //  string> )
 3715              	 	Compile a new variable 
 3716              		initialized to 0.
 3717              	***********************************/
 3718 4ed8 AC4E0000 		_HEADER VARIA,8,"VARIABLE"
 3718      08564152 
 3718      4941424C 
 3718      450000BF 
 3719 4ee8 504700BF 		_NEST
 3720 4eec B54E0000 		_ADR	CREAT
 3721 4ef0 E72B0000 		_DOLIT	0
 3721      00000000 
 3722 4ef8 8D470000 		_ADR	COMMA
 3723 4efc E72B0000 		_DOLIT UNNEST
 3723      262A0000 
 3724 4f04 F14C0000 		_ADR	CALLC  
 3725 4f08 272A0000 		_UNNEST
 3726              	
 3727              	
 3728              	/***********
 3729              	  Tools
 3730              	***********/
 3731              	
ARM GAS  forth.s 			page 176


 3732              	/*************************
 3733              	    dm+	 ( a u -- a )
 3734              	 	Dump u bytes from , 
 3735              		leaving a+u on the stack.
 3736              	hidden word used by DUMP 
 3737              	****************************/
 3738              	DMP:
 3739 4f0c 504700BF 		_NEST
 3740 4f10 852D0000 		_ADR	OVER
 3741 4f14 E72B0000 		_DOLIT	4
 3741      04000000 
 3742 4f1c A93D0000 		_ADR	UDOTR			// display address
 3743 4f20 753C0000 		_ADR	SPACE
 3744 4f24 DD2C0000 		_ADR	TOR			// start count down loop
 3745 4f28 3B2C0000 		_BRAN	PDUM2			// skip first pass
 3745      484F0000 
 3746              	PDUM1:
 3747 4f30 612D0000 	  _ADR	DUPP
 3748 4f34 8D2C0000 		_ADR	CAT
 3749 4f38 E72B0000 		_DOLIT	3
 3749      03000000 
 3750 4f40 A93D0000 		_ADR	UDOTR			// display numeric data
 3751 4f44 812E0000 		_ADR	ONEP			// increment address
 3752              	PDUM2:
 3753 4f48 092C0000 	  _ADR	DONXT
 3754 4f4c 304F0000 		.word	PDUM1	// loop till done
 3755 4f50 272A0000 		_UNNEST
 3756              		.p2align 2 
 3757              	//    DUMP	( a u -- )
 3758              	// 	Dump u bytes from a, in a formatted manner.
 3759              	
 3760              	/**********************
 3761              		DUMP ( a n -- )
 3762              		hex dump memory 
 3763              	*********************/
 3764 4f54 DC4E0000 		_HEADER DUMP,4,"DUMP"
 3764      0444554D 
 3764      500000BF 
 3765 4f60 504700BF 		_NEST
 3766 4f64 E72B0000 		_DOLIT  15 
 3766      0F000000 
 3767 4f6c 252E0000 		_ADR    PLUS 
 3768 4f70 E72B0000 		_DOLIT  0xFFFFFFF0 
 3768      F0FFFFFF 
 3769 4f78 A52D0000 		_ADR    ANDD 
 3770 4f7c 712D0000 		_ADR    SWAP 
 3771 4f80 E72B0000 		_DOLIT  0xFFFFFFFC
 3771      FCFFFFFF 
 3772 4f88 A52D0000 		_ADR    ANDD 
 3773 4f8c 712D0000 		_ADR    SWAP 
 3774 4f90 55320000 		_ADR	BASE
 3775 4f94 6D2C0000 		_ADR	AT
 3776 4f98 DD2C0000 		_ADR	TOR
 3777 4f9c B5390000 		_ADR	HEX			// save radix,set hex
 3778 4fa0 E72B0000 		_DOLIT	16
 3778      10000000 
 3779 4fa8 BD350000 		_ADR	SLASH			// change count to lines
ARM GAS  forth.s 			page 177


 3780 4fac DD2C0000 		_ADR	TOR
 3781 4fb0 3B2C0000 		_BRAN	DUMP4			// start count down loop
 3781      E04F0000 
 3782              	DUMP1:
 3783 4fb8 FD3C0000 	    _ADR	CR
 3784 4fbc E72B0000 		_DOLIT	16
 3784      10000000 
 3785 4fc4 992F0000 		_ADR	DDUP
 3786 4fc8 0D4F0000 		_ADR	DMP			// display numeric
 3787 4fcc 492F0000 		_ADR	ROT
 3788 4fd0 492F0000 		_ADR	ROT
 3789 4fd4 753C0000 		_ADR	SPACE
 3790 4fd8 753C0000 		_ADR	SPACE
 3791 4fdc C93C0000 		_ADR	TYPEE			// display printable characters
 3792              	DUMP4:
 3793 4fe0 092C0000 	  _DONXT	DUMP1	// loop till done
 3793      B84F0000 
 3794              	DUMP3:
 3795 4fe8 512D0000 		_ADR	DROP
 3796 4fec 992C0000 		_ADR	RFROM
 3797 4ff0 55320000 		_ADR	BASE
 3798 4ff4 592C0000 		_ADR	STORE			// restore radix
 3799 4ff8 272A0000 		_UNNEST
 3800              	
 3801              	/*******************************
 3802              	   TRACE. display in hexadecimal
 3803              	   TRACE. use a different buffer 
 3804              	   than DOT  to avoid current 
 3805              	   display overwrite.
 3806              	*******************************/ 
 3807              	TDOT: // ( u -- )
 3808 4ffc 504700BF 		_NEST 
 3809 5000 55320000 		_ADR BASE 
 3810 5004 6D2C0000 		_ADR AT 
 3811 5008 DD2C0000 		_ADR TOR
 3812 500c B5390000 		_ADR HEX  
 3813 5010 D1320000 		_ADR HLD 
 3814 5014 6D2C0000 		_ADR AT 
 3815 5018 DD2C0000 		_ADR TOR   // R: base *hold 
 3816 501c D1360000 		_ADR HERE 
 3817 5020 E72B0000 		_DOLIT 160 
 3817      A0000000 
 3818 5028 252E0000 		_ADR PLUS
 3819 502c 612D0000 		_ADR DUPP 
 3820 5030 DD2C0000 		_ADR TOR  
 3821 5034 D1320000 		_ADR HLD 
 3822 5038 592C0000 		_ADR STORE
 3823 503c 5D340000 		_ADR STOD 
 3824 5040 05390000 		_ADR DIGS  
 3825 5044 512D0000 		_ADR DROP
 3826 5048 E72B0000 		_DOLIT '$'
 3826      24000000 
 3827 5050 B9380000 		_ADR HOLD 
 3828 5054 D1320000 		_ADR HLD 
 3829 5058 6D2C0000 		_ADR AT
 3830 505c 992C0000 		_ADR RFROM   
 3831 5060 852D0000 		_ADR OVER 
ARM GAS  forth.s 			page 178


 3832 5064 352E0000 		_ADR SUBB 
 3833 5068 753C0000 		_ADR SPACE 
 3834 506c C93C0000 		_ADR TYPEE 
 3835 5070 992C0000 		_ADR RFROM 
 3836 5074 D1320000 		_ADR HLD 
 3837 5078 592C0000 		_ADR STORE 
 3838 507c 992C0000 		_ADR RFROM 
 3839 5080 55320000 		_ADR BASE 
 3840 5084 592C0000 		_ADR STORE 
 3841 5088 272A0000 		_UNNEST 
 3842              	
 3843              	/**********************
 3844              	   .S	  ( ... -- ... )
 3845              	 	Display the contents 
 3846              		of the data stack.
 3847              	*************************/
 3848 508c 584F0000 		_HEADER DOTS,2,".S"
 3848      022E5300 
 3849 5094 504700BF 		_NEST
 3850 5098 85360000 		_ADR	DEPTH	// stack depth
 3851 509c DD2C0000 		_ADR	TOR		// start count down loop
 3852 50a0 3B2C0000 		_BRAN	DOTS2  // skip first pass
 3852      B4500000 
 3853              	DOTS1:
 3854 50a8 C92C0000 		_ADR	RAT
 3855 50ac A9360000 		_ADR	PICK
 3856 50b0 FD4F0000 		_ADR	TDOT // index stack, display contents
 3857              	DOTS2:
 3858 50b4 092C0000 		_DONXT	DOTS1 // loop till done
 3858      A8500000 
 3859 50bc FD3C0000 		_ADR	CR 
 3860 50c0 272A0000 		_UNNEST
 3861              	
 3862              	RBASE: 
 3863 50c4 47F8046D 		_PUSH 
 3864 50c8 4FF47F46 		_MOV32 TOS,RPP 
 3864      C2F20106 
 3865 50d0 FDF7A6BC 		_NEXT 
 3866              	
 3867              	
 3868              	/**************************
 3869              	  R.  display return stack 
 3870              	**************************/
 3871              	RDOT: 
 3872 50d4 504700BF 		_NEST 
 3873 50d8 C5500000 		_ADR RBASE
 3874 50dc 3D2D0000 		_ADR RPAT 
 3875 50e0 352E0000 		_ADR SUBB
 3876 50e4 052F0000 		_ADR CELLSL   
 3877 50e8 E72B0000 		_DOLIT 2
 3877      02000000 
 3878 50f0 352E0000 		_ADR SUBB 
 3879 50f4 DD2C0000 		_ADR TOR
 3880 50f8 C5500000 		_ADR RBASE 
 3881 50fc D12E0000 	1:	_ADR CELLM 
 3882 5100 612D0000 		_ADR DUPP 
 3883 5104 6D2C0000 		_ADR AT 
ARM GAS  forth.s 			page 179


 3884 5108 FD4F0000 		_ADR TDOT 
 3885 510c 992C0000 		_ADR RFROM   
 3886 5110 912E0000 		_ADR ONEM 
 3887 5114 612D0000 		_ADR DUPP
 3888 5118 DD2C0000 		_ADR TOR 
 3889 511c 99300000 		_ADR ZEQUAL   
 3890 5120 272C0000 		_QBRAN 1b
 3890      FC500000 
 3891 5128 992C0000 		_ADR RFROM  
 3892 512c 712F0000 		_ADR DDROP
 3893 5130 FD3C0000 		_ADR CR   
 3894 5134 272A0000 		_UNNEST 
 3895              	
 3896              	/**************************
 3897              		TRACE ( -- )
 3898              		display stacks content 
 3899              	**************************/
 3900 5138 90500000 		_HEADER TRACE,5,"TRACE"
 3900      05545241 
 3900      434500BF 
 3901 5144 504700BF 		_NEST
 3902 5148 FD3C0000 		_ADR CR 
 3903 514c E72B0000 		_DOLIT '>' 
 3903      3E000000 
 3904 5154 E72B0000 		_DOLIT 'S'
 3904      53000000 
 3905 515c F12A0000 		_ADR EMIT 
 3906 5160 F12A0000 		_ADR EMIT  
 3907 5164 95500000 		_ADR DOTS
 3908 5168 E72B0000 		_DOLIT '>'
 3908      3E000000 
 3909 5170 E72B0000 		_DOLIT 'R'
 3909      52000000 
 3910 5178 F12A0000 		_ADR EMIT 
 3911 517c F12A0000 		_ADR EMIT 
 3912 5180 D5500000 		_ADR RDOT 
 3913 5184 272A0000 		_UNNEST 
 3914              	
 3915              	
 3916              	/*****************************
 3917              	    >NAME	( ca -- na | F )
 3918              	 	Convert code address 
 3919              		to a name address.
 3920              	*****************************/
 3921 5188 3C510000 		_HEADER TNAME,5,">NAME"
 3921      053E4E41 
 3921      4D4500BF 
 3922 5194 504700BF 		_NEST
 3923 5198 DD2C0000 		_ADR	TOR			//  
 3924 519c E9320000 		_ADR	CNTXT			//  va
 3925 51a0 6D2C0000 		_ADR	AT			//  na
 3926              	TNAM1:
 3927 51a4 612D0000 		_ADR	DUPP			//  na na
 3928 51a8 272C0000 		_QBRAN	TNAM2	//  vocabulary end, no match
 3928      D8510000 
 3929 51b0 612D0000 		_ADR	DUPP			//  na na
 3930 51b4 49410000 		_ADR	NAMET			//  na ca
ARM GAS  forth.s 			page 180


 3931 51b8 C92C0000 		_ADR	RAT			//  na ca code
 3932 51bc CD2D0000 		_ADR	XORR			//  na f --
 3933 51c0 272C0000 		_QBRAN	TNAM2
 3933      D8510000 
 3934 51c8 D12E0000 		_ADR	CELLM			//  la 
 3935 51cc 6D2C0000 		_ADR	AT			//  next_na
 3936 51d0 3B2C0000 		_BRAN	TNAM1
 3936      A4510000 
 3937              	TNAM2:	
 3938 51d8 992C0000 		_ADR	RFROM
 3939 51dc 512D0000 		_ADR	DROP			//  0|na --
 3940 51e0 272A0000 		_UNNEST			// 0
 3941              	
 3942              	/********************************
 3943              	    .ID	 ( na -- )
 3944              	 	Display the name at address.
 3945              	********************************/
 3946 51e4 8C510000 		_HEADER DOTID,3,".ID"
 3946      032E4944 
 3947 51ec 504700BF 		_NEST
 3948 51f0 352F0000 		_ADR	QDUP			// if zero no name
 3949 51f4 272C0000 		_QBRAN	DOTI1
 3949      14520000 
 3950 51fc B5310000 		_ADR	COUNT
 3951 5200 E72B0000 		_DOLIT	0x1F
 3951      1F000000 
 3952 5208 A52D0000 		_ADR	ANDD			// mask lexicon bits
 3953 520c C93C0000 		_ADR	TYPEE
 3954 5210 272A0000 		_UNNEST			// display name string
 3955              	DOTI1:
 3956 5214 653D0000 		_DOTQP	9," {noName}"
 3956      09207B6E 
 3956      6F4E616D 
 3956      657D00BF 
 3957 5224 272A0000 		_UNNEST
 3958              	
 3959              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 3960              	.if WANT_SEE 
 3961              	/*******************************
 3962              	    SEE	 ( -- //  string> )
 3963              	 	A simple decompiler.
 3964              	*******************************/
 3965              		_HEADER SEE,3,"SEE"
 3966              		_NEST
 3967              		_ADR	TICK	//  ca --, starting address
 3968              		_ADR	CR	
 3969              		_DOLIT	20
 3970              		_ADR	TOR
 3971              	SEE1:
 3972              		_ADR	CELLP			//  a
 3973              		_ADR	DUPP			//  a a
 3974              		_ADR	DECOMP		//  a
 3975              		_DONXT	SEE1
 3976              		_ADR	DROP
 3977              		_UNNEST
 3978              	
 3979              	/*************************
ARM GAS  forth.s 			page 181


 3980              	 	DECOMPILE ( a -- )
 3981              	 	Convert code in a.  
 3982              		Display name of command or as data.
 3983              	*************************************/
 3984              		_HEADER DECOMP,9,"DECOMPILE"
 3985              		_NEST
 3986              		_ADR	DUPP			//  a a
 3987              	// 	_ADR	TOR			//  a
 3988              		_ADR	AT			//  a code
 3989              		_ADR	DUPP			//  a code code
 3990              		_DOLIT	0xF800D000 //0xF800F800
 3991              		_ADR	ANDD
 3992              		_DOLIT	0xF000D000 //0xF800F000
 3993              		_ADR	EQUAL			//  a code ?
 3994              		_ADR	INVER 
 3995              		_QBRAN	DECOM2	//  not a command
 3996              		//  a valid_code --, extract address and display name
 3997              		MOVW	IP,#0xFFE
 3998              		MOV	WP,TOS
 3999              		LSL	TOS,TOS,#21		//  get bits 22-12
 4000              		ASR	TOS,TOS,#9		//  with sign extension
 4001              		LSR	WP,WP,#15		//  get bits 11-1
 4002              		AND	WP,WP,IP		//  retain only bits 11-1
 4003              		ORR	TOS,TOS,WP		//  get bits 22-1
 4004              		NOP
 4005              		_ADR	OVER			//  a offset a
 4006              		_ADR	PLUS			//  a target-4
 4007              		_ADR	CELLP			//  a target
 4008              		_ADR	TNAME			//  a na/0 --, is it a name?
 4009              		_ADR	QDUP			//  name address or zero
 4010              		_QBRAN	DECOM1
 4011              		_ADR	SPACE			//  a na
 4012              		_ADR	DOTID			//  a --, display name
 4013              	// 	_ADR	RFROM			//  a
 4014              		_ADR	DROP
 4015              		_UNNEST
 4016              	DECOM1:	// _ADR	RFROM		//  a
 4017              		_ADR	AT			//  data
 4018              		_ADR	UDOT			//  display data
 4019              		_UNNEST
 4020              	DECOM2:
 4021              		_ADR	UDOT
 4022              	// 	_ADR	RFROM
 4023              		_ADR	DROP
 4024              		_UNNEST
 4025              	.endif 
 4026              	
 4027              	/**********************
 4028              		VLIST ( -- )
 4029              		WORDS alias 
 4030              		+ display words count 
 4031              	**********************/
 4032 5228 E8510000 		_HEADER VLIST,5,"VLIST"
 4032      05564C49 
 4032      535400BF 
 4033 5234 504700BF 		_NEST 
 4034 5238 59520000 		_ADR WORDS
ARM GAS  forth.s 			page 182


 4035 523c FD3C0000 		_ADR CR 
 4036 5240 9D520000 		_ADR WC
 4037 5244 113E0000 		_ADR DOT    
 4038 5248 272A0000 		_UNNEST 
 4039              	
 4040              	/*********************
 4041              	    WORDS	( -- )
 4042              	 	Display the names 
 4043              		in the context vocabulary.
 4044              	*******************************/
 4045 524c 2C520000 		_HEADER WORDS,5,"WORDS"
 4045      05574F52 
 4045      445300BF 
 4046 5258 504700BF 		_NEST
 4047 525c FD3C0000 		_ADR	CR
 4048 5260 E9320000 		_ADR	CNTXT
 4049 5264 6D2C0000 		_ADR	AT			// only in context
 4050              	WORS1:
 4051 5268 352F0000 		_ADR	QDUP			// ?at end of list
 4052 526c 272C0000 		_QBRAN	WORS2
 4052      90520000 
 4053 5274 612D0000 		_ADR	DUPP
 4054 5278 753C0000 		_ADR	SPACE
 4055 527c ED510000 		_ADR	DOTID			// display a name
 4056 5280 D12E0000 		_ADR	CELLM
 4057 5284 6D2C0000 		_ADR	AT
 4058 5288 3B2C0000 		_BRAN	WORS1
 4058      68520000 
 4059              	WORS2:
 4060 5290 272A0000 		_UNNEST
 4061              	
 4062              	/*****************************
 4063              		WC ( - n )
 4064              		count words in dictionary 
 4065              	******************************/
 4066 5294 50520000 		_HEADER WC,2,"WC"
 4066      02574300 
 4067 529c 504700BF 		_NEST 
 4068 52a0 E72B0000 		_DOLIT 0 
 4068      00000000 
 4069 52a8 29330000 		_ADR LAST
 4070 52ac 6D2C0000 	1:	_ADR AT
 4071 52b0 352F0000 		_ADR QDUP
 4072 52b4 272C0000 		_QBRAN 9f
 4072      D4520000 
 4073 52bc 712D0000 		_ADR SWAP
 4074 52c0 812E0000 		_ADR ONEP
 4075 52c4 712D0000 		_ADR SWAP
 4076 52c8 D12E0000 		_ADR CELLM
 4077 52cc 3B2C0000 		_BRAN 1b
 4077      AC520000 
 4078 52d4 272A0000 	9:	_UNNEST 
 4079              	
 4080              	/*************************
 4081              		MARK <string> ( -- )
 4082              	    create forget point 
 4083              		in dictionary 
ARM GAS  forth.s 			page 183


 4084              	*************************/	
 4085 52d8 98520000 		_HEADER MARK,4,"MARK"
 4085      044D4152 
 4085      4B0000BF 
 4086 52e4 504700BF 		_NEST
 4087 52e8 B54E0000 		_ADR CREAT 
 4088 52ec A94D0000 		_ADR DODOES 
 4089 52f0 272A0000 		_UNNEST
 4090 52f4 504700BF 		_NEST  
 4091 52f8 992C0000 		_ADR RFROM 
 4092 52fc E72B0000 		_DOLIT 8
 4092      08000000 
 4093 5304 352E0000 		_ADR SUBB
 4094 5308 95510000 		_ADR TNAME
 4095 530c D12E0000 		_ADR CELLM
 4096 5310 6D2C0000 		_ADR AT  
 4097 5314 29330000 		_ADR LAST 
 4098 5318 592C0000 		_ADR STORE 
 4099 531c 954C0000 		_ADR OVERT
 4100 5320 272A0000 		_UNNEST 
 4101              	
 4102              	/*********************************
 4103              		ARRAY "name" ( n -- )
 4104              	    create an array of n elements 
 4105              	*********************************/
 4106 5324 DC520000 		_HEADER ARRAY,5,"ARRAY"
 4106      05415252 
 4106      415900BF 
 4107 5330 504700BF 		_NEST 
 4108 5334 29410000 		_ADR	TOKEN
 4109 5338 9D4B0000 		_ADR	SNAME
 4110 533c 954C0000 		_ADR	OVERT
 4111 5340 312A0000 		_ADR	COMPI_NEST
 4112 5344 E72B0000 		_DOLIT	DO_ARRAY
 4112      70530000 
 4113 534c F14C0000 		_ADR	CALLC
 4114 5350 E72B0000 		_DOLIT	UNNEST 
 4114      262A0000 
 4115 5358 F14C0000 		_ADR	CALLC  
 4116 535c E72B0000 		_DOLIT  4 
 4116      04000000 
 4117 5364 452E0000 		_ADR    STAR 
 4118 5368 75470000 		_ADR    ALLOT 
 4119 536c 272A0000 		_UNNEST 	
 4120              	
 4121              	// does> du array
 4122              	DO_ARRAY:
 4123 5370 504700BF 		_NEST  
 4124 5374 E72B0000 		_DOLIT 4 
 4124      04000000 
 4125 537c 452E0000 		_ADR STAR  
 4126 5380 C92C0000 		_ADR RAT  
 4127 5384 C12E0000 		_ADR CELLP 
 4128 5388 252E0000 		_ADR PLUS  
 4129 538c 272A0000 		_UNNEST 
 4130              	
 4131              	
ARM GAS  forth.s 			page 184


 4132              	/****************
 4133              	  cold start
 4134              	*****************/
 4135              	
 4136              	/**********************************
 4137              	    VER	 ( -- n )
 4138              	 	Return the version 
 4139              		number of this implementation.
 4140              	hidden word used by COLD
 4141              	**********************************/
 4142              	VERSN:
 4143 5390 504700BF 		_NEST
 4144 5394 E72B0000 		_DOLIT	VER*256+EXT
 4144      00010000 
 4145 539c 272A0000 		_UNNEST
 4146              	
 4147              	/*********************
 4148              	    hi	  ( -- )
 4149              	 	Display the sign-on 
 4150              		message.
 4151              	***********************/
 4152 53a0 28530000 		_HEADER HI,2,"HI"
 4152      02484900 
 4153 53a8 504700BF 		_NEST
 4154 53ac FD3C0000 		_ADR	CR	// initialize I/O
 4155 53b0 653D0000 		_DOTQP	17, "beyond Jupiter, v" 
 4155      11626579 
 4155      6F6E6420 
 4155      4A757069 
 4155      7465722C 
 4156 53c8 55320000 		_ADR	BASE
 4157 53cc 6D2C0000 		_ADR	AT
 4158 53d0 B5390000 		_ADR	HEX	// save radix
 4159 53d4 91530000 		_ADR	VERSN
 4160 53d8 99380000 		_ADR	BDIGS
 4161 53dc E72B0000 		_DOLIT  0 
 4161      00000000 
 4162 53e4 E5380000 		_ADR	DIG
 4163 53e8 E5380000 		_ADR	DIG
 4164 53ec E72B0000 		_DOLIT	'.'
 4164      2E000000 
 4165 53f4 B9380000 		_ADR	HOLD
 4166 53f8 05390000 		_ADR	DIGS
 4167 53fc 61390000 		_ADR	EDIGS
 4168 5400 C93C0000 		_ADR	TYPEE	// format version number
 4169 5404 55320000 		_ADR	BASE
 4170 5408 592C0000 		_ADR	STORE
 4171 540c FD3C0000 		_ADR	CR
 4172 5410 272A0000 		_UNNEST			// restore radix
 4173              	
 4174              	/***********************
 4175              	   HI_BOTH ( -- )
 4176              	   display sign-on 
 4177              	   on both CONSOLE
 4178              	***********************/
 4179              	HI_BOTH:
 4180 5414 504700BF 	    _NEST 
ARM GAS  forth.s 			page 185


 4181 5418 5D090000 		_ADR LOCAL 
 4182 541c 8D090000 		_ADR CONSOLE 
 4183 5420 A9530000 		_ADR HI 
 4184 5424 75090000 		_ADR SERIAL 
 4185 5428 8D090000 		_ADR CONSOLE 
 4186 542c A9530000 		_ADR HI
 4187 5430 272A0000 		_UNNEST 
 4188              	
 4189              	/**********************
 4190              	 check if PS2 keyboard 
 4191              	 present.
 4192              	**********************/
 4193              	PS2_QUERY: 
 4194 5434 504700BF 		_NEST 
 4195 5438 E72B0000 		_DOLIT 400 
 4195      90010000 
 4196 5440 892B0000 		_ADR PAUSE
 4197 5444 7D170000 		_ADR PS2_QKEY
 4198 5448 272C0000 		_QBRAN 1f
 4198      64540000 
 4199 5450 E72B0000 		_DOLIT BAT_OK 
 4199      AA000000 
 4200 5458 CD2D0000 		_ADR XORR 
 4201 545c 272C0000 		_QBRAN 9f 
 4201      A8540000 
 4202 5464 65190000 	1:	_ADR KBD_RST
 4203 5468 E72B0000 		_DOLIT BAT_OK 
 4203      AA000000 
 4204 5470 CD2D0000 		_ADR XORR  
 4205 5474 272C0000 		_QBRAN 9f  
 4205      A8540000 
 4206              	// no ps2 keyboard 
 4207              	// swith to serial console
 4208 547c FD3C0000 		_ADR CR 
 4209 5480 653D0000 		_DOTQP 25,"no PS2 keyboard detected."
 4209      196E6F20 
 4209      50533220 
 4209      6B657962 
 4209      6F617264 
 4210 54a0 75090000 		_ADR SERIAL 
 4211 54a4 8D090000 		_ADR CONSOLE 
 4212 54a8 272A0000 	9:	_UNNEST 
 4213              	
 4214              	/*************************
 4215              	   check PA8 to 
 4216              	   select console 
 4217              	   PA8 -> low  LOCAL 
 4218              	   PA8 -> high SERIAL 
 4219              	*************************/
 4220              	IF_SENSE:
 4221 54ac 504700BF 		_NEST 
 4222 54b0 5D090000 		_ADR LOCAL 
 4223 54b4 E72B0000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 4223      10000240 
 4224 54bc 6D2C0000 		_ADR AT 
 4225 54c0 E72B0000 		_DOLIT (1<<8)
 4225      00010000 
ARM GAS  forth.s 			page 186


 4226 54c8 A52D0000 		_ADR ANDD 
 4227 54cc 272C0000 		_QBRAN 9f 
 4227      D8540000 
 4228 54d4 812E0000 		_ADR ONEP 
 4229 54d8 8D090000 	9:  _ADR CONSOLE 
 4230 54dc 272A0000 		_UNNEST 
 4231              	
 4232              	/****************************
 4233              	   display READY on active
 4234              	   console
 4235              	***************************/
 4236              	READY:
 4237 54e0 504700BF 	    _NEST 
 4238 54e4 653D0000 		_DOTQP 5,"READY"
 4238      05524541 
 4238      445900BF 
 4239 54f0 FD3C0000 		_ADR  CR 
 4240 54f4 272A0000 	    _UNNEST 
 4241              	
 4242              	/********************
 4243              	    COLD	( -- )
 4244              	 	The high level cold 
 4245              		start sequence.
 4246              	**************************/
 4247 54f8 A4530000 		.word	LINK 
 4248              		LINK = . 
 4249 54fc 04       	_LASTN:	.byte  4
 4250 54fd 434F4C44 		.ascii "COLD"
 4251 5501 0000BF   		.p2align 2	
 4252              	COLD:
 4253 5504 00B5FAF7 		_CALL forth_init 
 4253      E3FF5DF8 
 4253      04EB
 4254 550e DFF85CC0 		ldr IP,=COLD1 
 4255 5512 FDF785BA 		_NEXT
 4256 5516 00BF     		.p2align 2 
 4257              	COLD1:
 4258 5518 E72B0000 		_DOLIT  0 
 4258      00000000 
 4259 5520 BD2B0000 		_ADR ULED // turn off user LED 
 4260 5524 E72B0000 		_DOLIT	UZERO
 4260      8C070000 
 4261 552c E72B0000 		_DOLIT	UPP
 4261      00000020 
 4262 5534 E72B0000 		_DOLIT	ULAST-UZERO
 4262      B0000000 
 4263 553c 71370000 		_ADR	MOVE 			// initialize user area
 4264 5540 AD460000 		_ADR	PRESE			// initialize stack and TIB
 4265 5544 111C0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 4266 5548 35540000 		_ADR 	PS2_QUERY  
 4267 554c 3D320000 		_ADR	TBOOT
 4268 5550 21370000 		_ADR	ATEXE			// application boot
 4269 5554 954C0000 		_ADR	OVERT
 4270 5558 AD540000 		_ADR	IF_SENSE
 4271 555c E1540000 		_ADR    READY 
 4272 5560 3B2C0000 		_BRAN	QUIT			// start interpretation
 4272      CC460000 
ARM GAS  forth.s 			page 187


 4273              	COLD2:
 4274              		.p2align 2 	
 4275              	CTOP:
 4276 5568 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4277              	
 4278              	
 4279 556c 18550000 	  .end 
ARM GAS  forth.s 			page 188


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 189


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 190


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 191


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 192


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 193


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:47     *ABS*:000000002001ff00 RPP
          macros.inc:48     *ABS*:000000002001fe80 TIBB
          macros.inc:49     *ABS*:000000002001fe80 SPP
          macros.inc:50     *ABS*:0000000020018080 VID_BUFF
          macros.inc:51     *ABS*:0000000020000000 UPP
          macros.inc:52     *ABS*:0000000020000512 DTOP
          macros.inc:53     *ABS*:000000002001807c DEND
          macros.inc:54     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:56     *ABS*:0000000000000040 COMPO
          macros.inc:57     *ABS*:0000000000000080 IMEDD
          macros.inc:58     *ABS*:00000000ffffff1f MASKK
          macros.inc:60     *ABS*:0000000000000004 CELLL
          macros.inc:61     *ABS*:000000000000000a BASEE
          macros.inc:62     *ABS*:0000000000000008 VOCSS
          macros.inc:64     *ABS*:0000000000000008 BKSPP
          macros.inc:65     *ABS*:000000000000000a LF
          macros.inc:66     *ABS*:000000000000000d CRR
          macros.inc:67     *ABS*:000000000000001b ERR
          macros.inc:68     *ABS*:0000000000000027 TIC
          macros.inc:73     *ABS*:0000000000000004 RNDSEED
          macros.inc:74     *ABS*:0000000000000008 TICKS
          macros.inc:75     *ABS*:000000000000000c CD_TIMER
          macros.inc:76     *ABS*:0000000000000010 BOOT
          macros.inc:77     *ABS*:0000000000000014 STDIN
          macros.inc:78     *ABS*:0000000000000018 STDOUT
          macros.inc:79     *ABS*:000000000000001c NBASE
          macros.inc:80     *ABS*:0000000000000020 TMP
          macros.inc:81     *ABS*:0000000000000024 CSPAN
          macros.inc:82     *ABS*:0000000000000028 TOIN
          macros.inc:83     *ABS*:000000000000002c NTIBB
ARM GAS  forth.s 			page 194


          macros.inc:84     *ABS*:0000000000000030 TIBUF
             forth.s:2968   .text:0000000000004668 EVAL
          macros.inc:86     *ABS*:0000000000000038 VHOLD
          macros.inc:87     *ABS*:000000000000003c CTXT
          macros.inc:88     *ABS*:0000000000000040 FORTH_CTOP
          macros.inc:89     *ABS*:0000000000000044 USER_CTOP
          macros.inc:90     *ABS*:0000000000000048 LASTN
          macros.inc:91     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:92     *ABS*:000000000000004c RX_QUEUE
          macros.inc:93     *ABS*:000000000000005c RX_HEAD
          macros.inc:94     *ABS*:0000000000000060 RX_TAIL
          macros.inc:95     *ABS*:0000000000000064 VID_CNTR
          macros.inc:96     *ABS*:0000000000000068 VID_STATE
          macros.inc:97     *ABS*:000000000000006c VID_FIELD
          macros.inc:98     *ABS*:0000000000000070 VID_BUFFER
          macros.inc:99     *ABS*:0000000000000074 KBD_STRUCT
          macros.inc:100    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:101    *ABS*:0000000000000078 KBD_QUEUE
          macros.inc:102    *ABS*:0000000000000088 KBD_QHEAD
          macros.inc:103    *ABS*:000000000000008c KBD_QTAIL
          macros.inc:104    *ABS*:0000000000000090 ROW
          macros.inc:105    *ABS*:0000000000000094 COL
          macros.inc:106    *ABS*:0000000000000098 BK_COLOR
          macros.inc:107    *ABS*:000000000000009c PEN_COLOR
          macros.inc:108    *ABS*:00000000000000a0 VFPSW
          macros.inc:109    *ABS*:00000000000000a4 VFBASE
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:465    .text:0000000000000494 reset_handler
              init.s:294    .text:0000000000000238 nmi_handler
              init.s:312    .text:0000000000000270 hardfault_handler
              init.s:331    .text:00000000000002ac memfault_handler
              init.s:358    .text:0000000000000318 busfault_handler
              init.s:391    .text:00000000000003ac usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:417    .text:0000000000000410 systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000b84 tv_out_isr
          ser-term.s:35     .text:0000000000000868 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001460 kbd_isr
              init.s:205    .text:00000000000000d0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:486    .text:00000000000004d0 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002a20 INEXT
              init.s:161    .text:0000000000000012 $d
             forth.s:2989   .text:00000000000046ac PRESE
             forth.s:2221   .text:0000000000003d64 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:132    .text:0000000000002a70 CFSR
             forth.s:494    .text:0000000000002d60 DUPP
             forth.s:429    .text:0000000000002cdc TOR
             forth.s:292    .text:0000000000002be6 DOLIT
             forth.s:1119   .text:0000000000003254 BASE
             forth.s:363    .text:0000000000002c58 STORE
ARM GAS  forth.s 			page 195


             forth.s:2271   .text:0000000000003de8 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:400    .text:0000000000002c98 RFROM
             forth.s:529    .text:0000000000002da4 ANDD
             forth.s:333    .text:0000000000002c26 QBRAN
             forth.s:144    .text:0000000000002a94 BFAR
             forth.s:178    .text:0000000000002af0 EMIT
             forth.s:2117   .text:0000000000003c74 SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:89     .text:0000000000001f40 FPSCR
              init.s:447    .text:000000000000046c reset_mcu
              init.s:188    .text:00000000000000b0 exit_fpu_isr
             forth.s:3001   .text:00000000000046cc QUIT
              init.s:189    .text:00000000000000b0 $t
              init.s:636    .text:0000000000000642 nvic_enable_irq
              init.s:653    .text:000000000000066c nvic_disable_irq
              init.s:211    .text:00000000000000e2 fpu_except
              init.s:212    .text:00000000000000e2 $d
             forth.s:2163   .text:0000000000003cfc CR
              init.s:218    .text:0000000000000114 $d
             forth.s:725    .text:0000000000002f34 QDUP
              init.s:259    .text:00000000000001dc fpu_exceptions
             forth.s:586    .text:0000000000002e24 PLUS
             forth.s:373    .text:0000000000002c6c AT
             forth.s:1032   .text:00000000000031b4 COUNT
             forth.s:2145   .text:0000000000003cc8 TYPEE
             forth.s:869    .text:0000000000003068 CLZ
             forth.s:502    .text:0000000000002d70 SWAP
             forth.s:595    .text:0000000000002e34 SUBB
             forth.s:577    .text:0000000000002e14 LSHIFT
               fpu.s:102    .text:0000000000001f60 CLR_FPSCR
              init.s:259    .text:00000000000001dc $d
              init.s:262    .text:00000000000001f0 fpu_except_invalid_op
              init.s:267    .text:0000000000000204 fpu_except_div0
              init.s:272    .text:0000000000000214 fpu_except_overflow
              init.s:277    .text:0000000000000220 fpu_except_underflow
              init.s:282    .text:000000000000022c fpu_except_inexact
              init.s:263    .text:00000000000001f0 $d
              init.s:268    .text:0000000000000204 $d
              init.s:273    .text:0000000000000214 $d
              init.s:276    .text:000000000000021e $t
              init.s:278    .text:0000000000000220 $d
              init.s:283    .text:000000000000022c $d
              init.s:297    .text:0000000000000240 nmi_hl
              init.s:298    .text:0000000000000240 $d
              init.s:300    .text:0000000000000266 $t
              init.s:301    .text:0000000000000268 $d
             forth.s:2867   .text:0000000000004524 ABORT
              init.s:310    .text:0000000000000270 $t
              init.s:317    .text:0000000000000282 hardfault_hl
              init.s:318    .text:0000000000000282 $d
              init.s:321    .text:00000000000002a4 $d
              init.s:329    .text:00000000000002ac $t
              init.s:336    .text:00000000000002be memfault_hl
              init.s:337    .text:00000000000002be $d
              init.s:340    .text:00000000000002ec $d
ARM GAS  forth.s 			page 196


              init.s:356    .text:0000000000000318 $t
              init.s:363    .text:000000000000032a busfault_hl
              init.s:364    .text:000000000000032a $d
             forth.s:261    .text:0000000000002bbc ULED
             forth.s:1092   .text:0000000000003210 MSEC
              init.s:372    .text:0000000000000372 $t
              init.s:373    .text:0000000000000374 $d
              init.s:380    .text:00000000000003a0 $d
              init.s:389    .text:00000000000003ac $t
              init.s:396    .text:00000000000003be usagefault_hl
              init.s:397    .text:00000000000003be $d
              init.s:399    .text:00000000000003e2 $t
              init.s:400    .text:00000000000003e4 $d
             forth.s:568    .text:0000000000002dfc RSHIFT
              init.s:415    .text:0000000000000410 $t
              init.s:426    .text:000000000000042a systick_exit
              init.s:429    .text:000000000000042c user_reboot
              init.s:433    .text:000000000000043e ur
              init.s:434    .text:000000000000043e $d
              init.s:442    .text:000000000000045c user_reboot_msg
              init.s:441    .text:000000000000045a $t
              init.s:443    .text:000000000000045c $d
              init.s:590    .text:00000000000005d0 remap
              init.s:499    .text:00000000000004f8 init_devices
               fpu.s:71     .text:0000000000001f0a fpu_init
          ser-term.s:56     .text:0000000000000896 ser_init
             tvout.s:74     .text:0000000000000ad4 tv_init
           ps2_kbd.s:307    .text:0000000000001680 kbd_init
         spi-flash.s:41     .text:0000000000001a94 flash_spi_init
             forth.s:4252   .text:0000000000005504 COLD
             forth.s:83     .text:0000000000002a18 NEST
              init.s:512    .text:0000000000000516 wait_hserdy
              init.s:533    .text:0000000000000538 wait_pllrdy
              init.s:545    .text:0000000000000552 wait_sws
              init.s:698    .text:00000000000006c8 gpio_config
              init.s:773    .text:0000000000000774 gpio_out
              init.s:615    .text:0000000000000610 nvic_set_priority
              init.s:788    .text:000000000000078c UZERO
              init.s:826    .text:000000000000083c ULAST
              init.s:624    .text:0000000000000628 negative_irq
              init.s:670    .text:000000000000069a nvic_clear_irq_pending
              init.s:735    .text:0000000000000730 input_pull
              init.s:728    .text:000000000000071e output_type
              init.s:751    .text:0000000000000746 gpio_speed
              init.s:789    .text:000000000000078c $d
             forth.s:4179   .text:0000000000005414 HI_BOTH
           ps2_kbd.s:396    .text:000000000000177c PS2_QKEY
             tvout.s:563    .text:0000000000001044 TV_EMIT
             forth.s:2905   .text:0000000000004584 INTER
             forth.s:4249   .text:00000000000054fc _LASTN
             forth.s:4275   .text:0000000000005568 CTOP
             forth.s:4248   .text:00000000000054fc LINK
              init.s:831    .text:000000000000083c $d
          ser-term.s:33     .text:0000000000000868 $t
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:00000000000008ee $d
          ser-term.s:90     .text:00000000000008f2 _SER_QKEY
ARM GAS  forth.s 			page 197


          ser-term.s:90     .text:00000000000008fc SER_QKEY
          ser-term.s:110    .text:0000000000000928 $d
          ser-term.s:110    .text:000000000000092c _SER_EMIT
          ser-term.s:110    .text:0000000000000938 SER_EMIT
          ser-term.s:124    .text:0000000000000952 $d
          ser-term.s:124    .text:0000000000000956 _LOCAL
          ser-term.s:124    .text:000000000000095c $t
          ser-term.s:124    .text:000000000000095c LOCAL
          ser-term.s:133    .text:0000000000000968 $d
          ser-term.s:133    .text:000000000000096c _SERIAL
          ser-term.s:133    .text:0000000000000974 SERIAL
          ser-term.s:142    .text:0000000000000980 $d
          ser-term.s:142    .text:0000000000000984 _CONSOLE
          ser-term.s:142    .text:000000000000098c $t
          ser-term.s:142    .text:000000000000098c CONSOLE
          ser-term.s:164    .text:00000000000009ac $d
          ser-term.s:164    .text:00000000000009b0 _ANSI_PARAM
          ser-term.s:164    .text:00000000000009bc ANSI_PARAM
          ser-term.s:166    .text:00000000000009c0 $d
             forth.s:636    .text:0000000000002e80 ONEP
             forth.s:1482   .text:0000000000003584 SLMOD
             forth.s:348    .text:0000000000002c3a BRAN
             forth.s:644    .text:0000000000002e90 ONEM
             forth.s:90     .text:0000000000002a26 UNNEST
          ser-term.s:191    .text:0000000000000a2c _ANSI_ESC
          ser-term.s:191    .text:0000000000000a34 ANSI_ESC
          ser-term.s:193    .text:0000000000000a38 $d
          ser-term.s:203    .text:0000000000000a58 _SER_AT
          ser-term.s:203    .text:0000000000000a60 SER_AT
          ser-term.s:205    .text:0000000000000a64 $d
          ser-term.s:219    .text:0000000000000a94 _SER_CLS
          ser-term.s:219    .text:0000000000000a9c $t
          ser-term.s:219    .text:0000000000000a9c SER_CLS
          ser-term.s:221    .text:0000000000000aa0 $d
          ser-term.s:228    .text:0000000000000ac4 $d
           tvout.inc:20     *ABS*:0000000000000140 HRES
           tvout.inc:21     *ABS*:00000000000000c8 VRES
           tvout.inc:22     *ABS*:0000000000000004 BPP
           tvout.inc:23     *ABS*:00000000000000a0 BPR
           tvout.inc:24     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:26     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:27     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
ARM GAS  forth.s 			page 198


             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000ad4 $t
             tvout.s:150    .text:0000000000000bb0 state_vsync
             tvout.s:191    .text:0000000000000c04 state_pre_video
             tvout.s:202    .text:0000000000000c16 state_video_out
             tvout.s:237    .text:0000000000000c74 state_post_video
             tvout.s:254    .text:0000000000000c9a tv_isr_exit
             tvout.s:180    .text:0000000000000bea sync_end
             tvout.s:246    .text:0000000000000c86 frame_end
             tvout.s:264    .text:0000000000000c9c $d
             tvout.s:264    .text:0000000000000ca0 _BACKCOLOR
             tvout.s:264    .text:0000000000000cac BACKCOLOR
             tvout.s:271    .text:0000000000000cb8 $d
             tvout.s:271    .text:0000000000000cbc _PENCOLOR
             tvout.s:271    .text:0000000000000cc6 $t
             tvout.s:271    .text:0000000000000cc8 PENCOLOR
             tvout.s:278    .text:0000000000000cd4 $d
             tvout.s:278    .text:0000000000000cd8 _CURSOR_COL
             tvout.s:278    .text:0000000000000ce0 CURSOR_COL
             tvout.s:285    .text:0000000000000cec $d
             tvout.s:285    .text:0000000000000cf0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000cf4 $t
             tvout.s:285    .text:0000000000000cf4 CURSOR_ROW
             tvout.s:292    .text:0000000000000d00 $d
             tvout.s:292    .text:0000000000000d04 _ROWY
             tvout.s:292    .text:0000000000000d0a $t
             tvout.s:292    .text:0000000000000d0c ROWY
             tvout.s:299    .text:0000000000000d18 $d
             tvout.s:299    .text:0000000000000d1c _COLX
             tvout.s:299    .text:0000000000000d22 $t
             tvout.s:299    .text:0000000000000d24 COLX
             tvout.s:306    .text:0000000000000d30 $d
             tvout.s:306    .text:0000000000000d34 _FONT
             tvout.s:306    .text:0000000000000d3c FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000000d48 $d
             tvout.s:313    .text:0000000000000d4c _VIDBUFF
             tvout.s:313    .text:0000000000000d54 $t
             tvout.s:313    .text:0000000000000d54 VIDBUFF
             tvout.s:325    .text:0000000000000d5e $d
             tvout.s:325    .text:0000000000000d62 _PLOT
             tvout.s:325    .text:0000000000000d68 PLOT
             tvout.s:373    .text:0000000000000dec plot_op
             tvout.s:341    .text:0000000000000d94 op_back
             tvout.s:350    .text:0000000000000dae op_pen
             tvout.s:359    .text:0000000000000dc8 op_invert
             tvout.s:363    .text:0000000000000dd0 op_xor
             tvout.s:373    .text:0000000000000dec $d
             tvout.s:378    .text:0000000000000df4 _VSYNC
             tvout.s:378    .text:0000000000000dfa $t
ARM GAS  forth.s 			page 199


             tvout.s:378    .text:0000000000000dfc VSYNC
             tvout.s:386    .text:0000000000000e06 $d
             tvout.s:386    .text:0000000000000e0a _CLS
             tvout.s:386    .text:0000000000000e0e $t
             tvout.s:386    .text:0000000000000e10 CLS
             tvout.s:410    .text:0000000000000e52 $d
             tvout.s:410    .text:0000000000000e56 _CLRLINE
             tvout.s:410    .text:0000000000000e5e $t
             tvout.s:410    .text:0000000000000e60 CLRLINE
             tvout.s:412    .text:0000000000000e64 $d
             forth.s:604    .text:0000000000002e44 STAR
             forth.s:1709   .text:00000000000037b8 FILL
             tvout.s:427    .text:0000000000000e98 _SCROLLUP
             tvout.s:427    .text:0000000000000ea4 SCROLLUP
             tvout.s:429    .text:0000000000000ea8 $d
             forth.s:1677   .text:0000000000003770 MOVE
             tvout.s:448    .text:0000000000000ef0 _SCROLLDOWN
             tvout.s:448    .text:0000000000000efc SCROLLDOWN
             tvout.s:450    .text:0000000000000f00 $d
             tvout.s:467    .text:0000000000000f40 _TV_CRLF
             tvout.s:467    .text:0000000000000f48 $t
             tvout.s:467    .text:0000000000000f48 TV_CRLF
             tvout.s:482    .text:0000000000000f6a $d
             tvout.s:482    .text:0000000000000f6e _RIGHT
             tvout.s:482    .text:0000000000000f74 $t
             tvout.s:482    .text:0000000000000f74 RIGHT
             tvout.s:495    .text:0000000000000f88 $d
             tvout.s:495    .text:0000000000000f8c _LEFT
             tvout.s:495    .text:0000000000000f94 LEFT
             tvout.s:511    .text:0000000000000fc0 FONT_PIXEL
             tvout.s:518    .text:0000000000000fd0 INCR_X
             tvout.s:525    .text:0000000000000fdc NEXT_PIXEL
             tvout.s:534    .text:0000000000000fe4 CHAR_ROW
             tvout.s:536    .text:0000000000000fe8 $d
             forth.s:775    .text:0000000000002f98 DDUP
             forth.s:420    .text:0000000000002cc8 RAT
             forth.s:314    .text:0000000000002c08 DONXT
             forth.s:766    .text:0000000000002f84 TDROP
             tvout.s:551    .text:0000000000001024 CHAR_FONT
             tvout.s:552    .text:0000000000001024 $t
             tvout.s:563    .text:0000000000001038 $d
             tvout.s:563    .text:000000000000103c _TV_EMIT
             tvout.s:563    .text:0000000000001044 $t
             tvout.s:565    .text:0000000000001048 $d
             forth.s:928    .text:00000000000030e4 ULESS
             tvout.s:593    .text:00000000000010cc CTRL_KEY
             forth.s:735    .text:0000000000002f48 ROT
             forth.s:391    .text:0000000000002c8c CAT
             tvout.s:660    .text:00000000000011b4 SHOW_CURSOR
             tvout.s:691    .text:000000000000123c HIDE_CURSOR
             forth.s:903    .text:00000000000030ac EQUAL
             tvout.s:650    .text:0000000000001194 BACK_SPACE
             forth.s:486    .text:0000000000002d50 DROP
             tvout.s:618    .text:000000000000113c CAR_RET
             tvout.s:629    .text:0000000000001154 LN_FEED
             tvout.s:619    .text:000000000000113c $t
             tvout.s:620    .text:0000000000001140 $d
ARM GAS  forth.s 			page 200


             tvout.s:630    .text:0000000000001154 $t
             tvout.s:631    .text:0000000000001158 $d
             forth.s:547    .text:0000000000002dcc XORR
             tvout.s:651    .text:0000000000001194 $t
             tvout.s:652    .text:0000000000001198 $d
             tvout.s:660    .text:00000000000011a8 _SHOW_CURSOR
             tvout.s:660    .text:00000000000011b4 $t
             tvout.s:663    .text:00000000000011b8 $d
             forth.s:717    .text:0000000000002f24 TWOSL
             forth.s:381    .text:0000000000002c78 CSTOR
             forth.s:757    .text:0000000000002f70 DDROP
             tvout.s:691    .text:0000000000001230 _HIDE_CURSOR
             tvout.s:691    .text:000000000000123c $t
             tvout.s:694    .text:0000000000001240 $d
             forth.s:538    .text:0000000000002db8 ORR
             tvout.s:704    .text:0000000000001268 _TV_AT
             tvout.s:704    .text:000000000000126e $t
             tvout.s:704    .text:0000000000001270 TV_AT
             tvout.s:719    .text:0000000000001294 $d
             tvout.s:719    .text:0000000000001298 _INPUT
             tvout.s:719    .text:000000000000129e $t
             tvout.s:719    .text:00000000000012a0 INPUT
             tvout.s:721    .text:00000000000012a4 $d
             forth.s:1621   .text:00000000000036e8 PAD
             forth.s:2813   .text:0000000000004470 ACCEP
             forth.s:512    .text:0000000000002d84 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:00000000000012d0 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
ARM GAS  forth.s 			page 201


       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
ARM GAS  forth.s 			page 202


       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:00000000000012dc sc_ascii
         mcSaite.inc:100    .text:0000000000001390 shifted
         mcSaite.inc:151    .text:00000000000013f0 altchar
         mcSaite.inc:167    .text:0000000000001400 extended
         mcSaite.inc:191    .text:0000000000001428 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
ARM GAS  forth.s 			page 203


           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:0000000000000076 KBD_FLAGS
           ps2_kbd.s:63     *ABS*:0000000000000075 KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:0000000000000074 KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:0000000000000077 KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000145e $t
           ps2_kbd.s:179    .text:000000000000158a send_bit
           ps2_kbd.s:107    .text:00000000000014c0 start_bit
           ps2_kbd.s:118    .text:00000000000014e4 parity_bit
           ps2_kbd.s:125    .text:00000000000014f8 stop_bit
           ps2_kbd.s:152    .text:000000000000154e store_code
           ps2_kbd.s:253    .text:000000000000161e do_async_key
           ps2_kbd.s:204    .text:00000000000015ce send_parity
           ps2_kbd.s:211    .text:00000000000015e0 send_stop
           ps2_kbd.s:218    .text:00000000000015ea rx_ack_bit
           ps2_kbd.s:236    .text:000000000000160a is_async_key
           ps2_kbd.s:286    .text:000000000000166e async_keys
           ps2_kbd.s:378    .text:0000000000001754 table_scan
           ps2_kbd.s:260    .text:0000000000001630 set_async_key
           ps2_kbd.s:295    .text:000000000000167c async_jump
           ps2_kbd.s:265    .text:000000000000163e shift_key
           ps2_kbd.s:273    .text:000000000000164e set_reset
           ps2_kbd.s:268    .text:0000000000001644 ctrl_key
           ps2_kbd.s:271    .text:000000000000164a alt_key
           ps2_kbd.s:287    .text:000000000000166e $d
           ps2_kbd.s:340    .text:00000000000016fc $d
           ps2_kbd.s:340    .text:0000000000001700 _KEY_ASYNC
           ps2_kbd.s:340    .text:000000000000170a $t
           ps2_kbd.s:340    .text:000000000000170c KEY_ASYNC
           ps2_kbd.s:350    .text:000000000000171c keycode
           ps2_kbd.s:365    .text:0000000000001744 wait_code
           ps2_kbd.s:396    .text:000000000000176e $d
           ps2_kbd.s:396    .text:0000000000001772 _PS2_QKEY
           ps2_kbd.s:416    .text:00000000000017c8 inkey_exit
           ps2_kbd.s:418    .text:00000000000017cc pause_key
           ps2_kbd.s:427    .text:00000000000017e2 do_modifiers
           ps2_kbd.s:436    .text:00000000000017fa shift_down
           ps2_kbd.s:440    .text:0000000000001800 altchar_down
           ps2_kbd.s:444    .text:0000000000001806 ctrl_down
           ps2_kbd.s:452    .text:0000000000001822 do_capslock
           ps2_kbd.s:478    .text:0000000000001846 kbd_send
           ps2_kbd.s:553    .text:000000000000193a kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001958 $d
           ps2_kbd.s:567    .text:000000000000195c _KBD_RST
           ps2_kbd.s:567    .text:0000000000001964 $t
           ps2_kbd.s:567    .text:0000000000001964 KBD_RST
           ps2_kbd.s:591    .text:00000000000019ae $d
           ps2_kbd.s:591    .text:00000000000019b2 _KBD_LED
           ps2_kbd.s:591    .text:00000000000019ba $t
           ps2_kbd.s:591    .text:00000000000019bc KBD_LED
           ps2_kbd.s:616    .text:0000000000001a10 $d
ARM GAS  forth.s 			page 204


           ps2_kbd.s:616    .text:0000000000001a14 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001a20 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001a4a $d
           ps2_kbd.s:633    .text:0000000000001a4e _WKEY
           ps2_kbd.s:633    .text:0000000000001a58 WKEY
           ps2_kbd.s:635    .text:0000000000001a5c $d
           ps2_kbd.s:640    .text:0000000000001a74 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001a94 $t
         spi-flash.s:85     .text:0000000000001b36 $d
         spi-flash.s:85     .text:0000000000001b3a _CHIP_SEL
         spi-flash.s:85     .text:0000000000001b44 CHIP_SEL
         spi-flash.s:97     .text:0000000000001b62 $d
         spi-flash.s:97     .text:0000000000001b66 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001b70 $t
         spi-flash.s:97     .text:0000000000001b70 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001b9e $d
         spi-flash.s:113    .text:0000000000001ba2 _RD_BYTE
         spi-flash.s:113    .text:0000000000001baa $t
         spi-flash.s:113    .text:0000000000001bac RD_BYTE
         spi-flash.s:133    .text:0000000000001bd4 $d
         spi-flash.s:133    .text:0000000000001bd8 _WR_BYTE
         spi-flash.s:133    .text:0000000000001be0 $t
         spi-flash.s:133    .text:0000000000001be0 WR_BYTE
         spi-flash.s:151    .text:0000000000001c04 $d
         spi-flash.s:151    .text:0000000000001c08 _WR_DIS
         spi-flash.s:151    .text:0000000000001c10 WR_DIS
         spi-flash.s:153    .text:0000000000001c14 $d
         spi-flash.s:163    .text:0000000000001c30 _WR_ENBL
         spi-flash.s:163    .text:0000000000001c38 $t
         spi-flash.s:163    .text:0000000000001c38 WR_ENBL
         spi-flash.s:165    .text:0000000000001c3c $d
         spi-flash.s:175    .text:0000000000001c58 _RD_SR
         spi-flash.s:175    .text:0000000000001c5e $t
         spi-flash.s:175    .text:0000000000001c60 RD_SR
         spi-flash.s:177    .text:0000000000001c64 $d
         spi-flash.s:185    .text:0000000000001c88 sr_cmd
         spi-flash.s:191    .text:0000000000001c8f _SEND_ADR
         spi-flash.s:191    .text:0000000000001c98 $t
         spi-flash.s:191    .text:0000000000001c98 SEND_ADR
         spi-flash.s:193    .text:0000000000001c9c $d
         spi-flash.s:208    .text:0000000000001cd0 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001cda $t
         spi-flash.s:208    .text:0000000000001cdc WAIT_DONE
         spi-flash.s:210    .text:0000000000001ce0 $d
         spi-flash.s:223    .text:0000000000001d10 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001d1a $t
         spi-flash.s:223    .text:0000000000001d1c ERASE_BLK
         spi-flash.s:225    .text:0000000000001d20 $d
         spi-flash.s:238    .text:0000000000001d48 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000001d54 ERASE_CHIP
         spi-flash.s:240    .text:0000000000001d58 $d
         spi-flash.s:256    .text:0000000000001d88 _RD_BLK
         spi-flash.s:256    .text:0000000000001d90 RD_BLK
ARM GAS  forth.s 			page 205


         spi-flash.s:258    .text:0000000000001d94 $d
         spi-flash.s:278    .text:0000000000001ddc _WR_BLK
         spi-flash.s:278    .text:0000000000001de4 WR_BLK
         spi-flash.s:280    .text:0000000000001de8 $d
             forth.s:2326   .text:0000000000003e88 HDOT
         spi-flash.s:316    .text:0000000000001e40 _SEARCH_FILE
         spi-flash.s:316    .text:0000000000001e4c $t
         spi-flash.s:316    .text:0000000000001e4c SEARCH_FILE
         spi-flash.s:319    .text:0000000000001e50 $d
         spi-flash.s:325    .text:0000000000001e58 _ERASE_FILE
         spi-flash.s:325    .text:0000000000001e64 ERASE_FILE
         spi-flash.s:328    .text:0000000000001e68 $d
         spi-flash.s:334    .text:0000000000001e70 _DIR
         spi-flash.s:334    .text:0000000000001e74 $t
         spi-flash.s:334    .text:0000000000001e74 DIR
         spi-flash.s:337    .text:0000000000001e78 $d
         spi-flash.s:343    .text:0000000000001e80 _SAVE
         spi-flash.s:343    .text:0000000000001e88 SAVE
         spi-flash.s:346    .text:0000000000001e8c $d
         spi-flash.s:352    .text:0000000000001e94 _LOAD
         spi-flash.s:352    .text:0000000000001e9c LOAD
         spi-flash.s:355    .text:0000000000001ea0 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000001ec8 p10
               fpu.s:59     .text:0000000000001ef4 _PWR10
               fpu.s:59     .text:0000000000001efa $t
               fpu.s:59     .text:0000000000001efc PWR10
               fpu.s:89     .text:0000000000001f36 $d
               fpu.s:89     .text:0000000000001f3a _FPSCR
               fpu.s:89     .text:0000000000001f40 $t
               fpu.s:102    .text:0000000000001f50 $d
               fpu.s:102    .text:0000000000001f54 _CLR_FPSCR
               fpu.s:102    .text:0000000000001f5e $t
               fpu.s:115    .text:0000000000001f78 $d
               fpu.s:115    .text:0000000000001f7c _TOS0
               fpu.s:115    .text:0000000000001f80 $t
               fpu.s:115    .text:0000000000001f80 TOS0
               fpu.s:124    .text:0000000000001f8c $d
               fpu.s:124    .text:0000000000001f90 _TOS1
               fpu.s:124    .text:0000000000001f94 $t
               fpu.s:124    .text:0000000000001f94 TOS1
               fpu.s:133    .text:0000000000001fa0 $d
               fpu.s:133    .text:0000000000001fa4 _TOS2
               fpu.s:133    .text:0000000000001fa8 $t
               fpu.s:133    .text:0000000000001fa8 TOS2
               fpu.s:142    .text:0000000000001fb4 $d
               fpu.s:142    .text:0000000000001fb8 _S0FROM
               fpu.s:142    .text:0000000000001fbc $t
               fpu.s:142    .text:0000000000001fbc S0FROM
               fpu.s:151    .text:0000000000001fc8 $d
               fpu.s:151    .text:0000000000001fcc _S1FROM
               fpu.s:151    .text:0000000000001fd0 $t
               fpu.s:151    .text:0000000000001fd0 S1FROM
               fpu.s:160    .text:0000000000001fdc $d
ARM GAS  forth.s 			page 206


               fpu.s:160    .text:0000000000001fe0 _S2FROM
               fpu.s:160    .text:0000000000001fe4 $t
               fpu.s:160    .text:0000000000001fe4 S2FROM
               fpu.s:171    .text:0000000000001ff0 $d
               fpu.s:171    .text:0000000000001ff4 _FTOS
               fpu.s:171    .text:0000000000001ff8 $t
               fpu.s:171    .text:0000000000001ff8 FTOS
               fpu.s:181    .text:0000000000002008 $d
               fpu.s:181    .text:000000000000200c _TRUNC
               fpu.s:181    .text:0000000000002012 $t
               fpu.s:181    .text:0000000000002014 TRUNC
               fpu.s:191    .text:0000000000002024 $d
               fpu.s:191    .text:0000000000002028 _STOF
               fpu.s:191    .text:000000000000202c $t
               fpu.s:191    .text:000000000000202c STOF
               fpu.s:201    .text:000000000000203c $d
               fpu.s:201    .text:0000000000002040 _FPLUS
               fpu.s:201    .text:0000000000002044 FPLUS
               fpu.s:214    .text:000000000000205c $d
               fpu.s:214    .text:0000000000002060 _FSUBB
               fpu.s:214    .text:0000000000002064 FSUBB
               fpu.s:228    .text:000000000000207c $d
               fpu.s:228    .text:0000000000002080 _FSTAR
               fpu.s:228    .text:0000000000002084 FSTAR
               fpu.s:241    .text:000000000000209c $d
               fpu.s:241    .text:00000000000020a0 _FSLH
               fpu.s:241    .text:00000000000020a4 FSLH
               fpu.s:254    .text:00000000000020bc $d
               fpu.s:254    .text:00000000000020c0 _FNEG
               fpu.s:254    .text:00000000000020c8 $t
               fpu.s:254    .text:00000000000020c8 FNEG
               fpu.s:264    .text:00000000000020d8 $d
               fpu.s:264    .text:00000000000020dc _FABS
               fpu.s:264    .text:00000000000020e4 FABS
               fpu.s:276    .text:00000000000020f8 $d
               fpu.s:276    .text:00000000000020fc _SQRT
               fpu.s:276    .text:0000000000002104 SQRT
               fpu.s:286    .text:0000000000002114 $d
               fpu.s:286    .text:0000000000002118 _FZLESS
               fpu.s:286    .text:000000000000211c $t
               fpu.s:286    .text:000000000000211c FZLESS
               fpu.s:298    .text:0000000000002134 $d
               fpu.s:298    .text:0000000000002138 _FGREAT
               fpu.s:298    .text:000000000000213c FGREAT
               fpu.s:300    .text:0000000000002140 $d
             forth.s:843    .text:0000000000003030 INVER
               fpu.s:309    .text:0000000000002154 _FLESS
               fpu.s:309    .text:0000000000002158 FLESS
               fpu.s:311    .text:000000000000215c $d
               fpu.s:319    .text:000000000000216c _FMIN
               fpu.s:319    .text:0000000000002174 FMIN
               fpu.s:321    .text:0000000000002178 $d
               fpu.s:332    .text:000000000000219c _FMAX
               fpu.s:332    .text:00000000000021a4 FMAX
               fpu.s:334    .text:00000000000021a8 $d
               fpu.s:347    .text:00000000000021cc _FSIGN
               fpu.s:347    .text:00000000000021d2 $t
ARM GAS  forth.s 			page 207


               fpu.s:347    .text:00000000000021d4 FSIGN
               fpu.s:358    .text:00000000000021e8 $d
               fpu.s:358    .text:00000000000021ec _FEXP
               fpu.s:358    .text:00000000000021f4 FEXP
               fpu.s:369    .text:000000000000220c $d
               fpu.s:369    .text:0000000000002210 _FMANT
               fpu.s:369    .text:0000000000002216 $t
               fpu.s:369    .text:0000000000002218 FMANT
               fpu.s:382    .text:0000000000002232 $d
               fpu.s:382    .text:0000000000002236 _PI
               fpu.s:382    .text:000000000000223c PI
               fpu.s:391    .text:000000000000224a $d
               fpu.s:391    .text:000000000000224e _LOG2
               fpu.s:391    .text:0000000000002254 LOG2
               fpu.s:401    .text:0000000000002262 $d
               fpu.s:401    .text:0000000000002266 _LOG2TO10
               fpu.s:401    .text:000000000000226e $t
               fpu.s:401    .text:0000000000002270 LOG2TO10
               fpu.s:403    .text:0000000000002274 $d
             forth.s:521    .text:0000000000002d94 ZLESS
               fpu.s:421    .text:00000000000022a4 _NUMBER
               fpu.s:421    .text:00000000000022ac NUMBER
               fpu.s:423    .text:00000000000022b0 $d
             forth.s:2044   .text:0000000000003b60 INTQ
            strtof.s:204    .text:00000000000024bc FLOATQ
               fpu.s:428    .text:00000000000022cc $d
            strtof.s:29     .text:00000000000022d8 p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000022f0 p10p2at
            strtof.s:44     .text:00000000000022f0 $t
            strtof.s:45     .text:00000000000022f4 $d
            strtof.s:57     .text:0000000000002314 bit_state
            strtof.s:58     .text:0000000000002314 $t
            strtof.s:59     .text:0000000000002318 $d
             forth.s:1592   .text:00000000000036a8 PICK
            strtof.s:76     .text:0000000000002338 mant_div
            strtof.s:77     .text:0000000000002338 $t
            strtof.s:78     .text:000000000000233c $d
            strtof.s:79     .text:0000000000002340 div_loop
             forth.s:964    .text:000000000000312c GREAT
            strtof.s:107    .text:000000000000238c mant_mult
            strtof.s:108    .text:000000000000238c $t
            strtof.s:109    .text:0000000000002390 $d
            strtof.s:110    .text:0000000000002394 mult_loop
            strtof.s:134    .text:00000000000023e0 exp_adjust
            strtof.s:135    .text:00000000000023e0 $t
            strtof.s:136    .text:00000000000023e4 $d
             forth.s:746    .text:0000000000002f5c NROT
            strtof.s:148    .text:0000000000002420 pos_exp
             forth.s:859    .text:0000000000003054 ABSS
            strtof.s:161    .text:0000000000002430 decimals
            strtof.s:162    .text:0000000000002430 $t
            strtof.s:163    .text:0000000000002434 $d
             forth.s:1968   .text:0000000000003a78 PARSE_DIGITS
ARM GAS  forth.s 			page 208


             forth.s:987    .text:0000000000003158 MIN
            strtof.s:181    .text:000000000000246c exponent
            strtof.s:182    .text:000000000000246c $t
            strtof.s:183    .text:0000000000002470 $d
             forth.s:2019   .text:0000000000003b16 NEGQ
             forth.s:851    .text:0000000000003044 NEGAT
            strtof.s:204    .text:00000000000024b4 _FLOATQ
            strtof.s:208    .text:00000000000024c0 $d
             forth.s:1924   .text:00000000000039f8 DECIM
             forth.s:1941   .text:0000000000003a1c DIGTQ
            strtof.s:245    .text:000000000000255c must_be_dot
             forth.s:2003   .text:0000000000003afc CHARQ
            strtof.s:290    .text:0000000000002634 error1
            strtof.s:295    .text:0000000000002648 error2
            strtof.s:279    .text:00000000000025fc build_float
             forth.s:409    .text:0000000000002cac DRFROM
            strtof.s:300    .text:0000000000002658 restore_base
              ftoa.s:28     .text:0000000000002668 rounding
              ftoa.s:48     .text:0000000000002690 _ROUND
              ftoa.s:48     .text:0000000000002696 $t
              ftoa.s:48     .text:0000000000002698 ROUND
              ftoa.s:50     .text:000000000000269c $d
             forth.s:976    .text:0000000000003144 MAX
              ftoa.s:67     .text:00000000000026dc _CSTOP
              ftoa.s:67     .text:00000000000026e0 $t
              ftoa.s:67     .text:00000000000026e0 CSTOP
              ftoa.s:79     .text:00000000000026ec ITOA
              ftoa.s:81     .text:00000000000026f0 $d
             forth.s:1339   .text:000000000000345c STOD
             forth.s:798    .text:0000000000002fcc DABS
             forth.s:1787   .text:0000000000003898 BDIGS
             forth.s:1831   .text:0000000000003904 DIGS
             forth.s:1849   .text:0000000000003938 SIGN
             forth.s:1863   .text:0000000000003960 EDIGS
             forth.s:1657   .text:0000000000003740 CMOVE
              ftoa.s:114    .text:0000000000002740 SCALEUP
              ftoa.s:115    .text:0000000000002740 $t
              ftoa.s:116    .text:0000000000002744 $d
              ftoa.s:137    .text:000000000000278c SCALEDOWN
              ftoa.s:138    .text:000000000000278c $t
              ftoa.s:139    .text:0000000000002790 $d
              ftoa.s:174    .text:00000000000027fc EPART
              ftoa.s:175    .text:00000000000027fc $t
              ftoa.s:176    .text:0000000000002800 $d
              ftoa.s:199    .text:0000000000002830 FPART
              ftoa.s:200    .text:0000000000002830 $t
              ftoa.s:201    .text:0000000000002834 $d
              ftoa.s:244    .text:00000000000028b4 IPART
              ftoa.s:245    .text:00000000000028b4 $t
              ftoa.s:246    .text:00000000000028b8 $d
              ftoa.s:293    .text:000000000000294c _FTOA
              ftoa.s:293    .text:0000000000002950 $t
              ftoa.s:293    .text:0000000000002950 FTOA
              ftoa.s:295    .text:0000000000002954 $d
             forth.s:684    .text:0000000000002ee0 BLANK
              ftoa.s:325    .text:00000000000029ac _FDOT
              ftoa.s:325    .text:00000000000029b0 FDOT
ARM GAS  forth.s 			page 209


              ftoa.s:328    .text:00000000000029b4 $d
             forth.s:1610   .text:00000000000036d0 HERE
             forth.s:3060   .text:0000000000004774 ALLOT
             forth.s:80     .text:0000000000002a18 $t
             forth.s:103    .text:0000000000002a30 COMPI_NEST
             forth.s:116    .text:0000000000002a4e TSTDIN
             forth.s:123    .text:0000000000002a58 TSTDOUT
             forth.s:132    .text:0000000000002a62 $d
             forth.s:132    .text:0000000000002a66 _CFSR
             forth.s:144    .text:0000000000002a86 $d
             forth.s:144    .text:0000000000002a8a _BFAR
             forth.s:156    .text:0000000000002aaa $d
             forth.s:156    .text:0000000000002aae _QKEY
             forth.s:156    .text:0000000000002ab4 QKEY
             forth.s:158    .text:0000000000002ab8 $d
             forth.s:1644   .text:0000000000003720 ATEXE
             forth.s:166    .text:0000000000002ac8 _KEY
             forth.s:166    .text:0000000000002acc $t
             forth.s:166    .text:0000000000002acc KEY
             forth.s:168    .text:0000000000002ad0 KEY1
             forth.s:169    .text:0000000000002ad0 $d
             forth.s:178    .text:0000000000002ae8 _EMIT
             forth.s:180    .text:0000000000002af4 $d
             forth.s:214    .text:0000000000002b04 _RAND
             forth.s:214    .text:0000000000002b0c RAND
             forth.s:216    .text:0000000000002b10 $d
             forth.s:1083   .text:00000000000031fc SEED
             forth.s:1495   .text:00000000000035a4 MODD
             forth.s:245    .text:0000000000002b80 _PAUSE
             forth.s:245    .text:0000000000002b86 $t
             forth.s:245    .text:0000000000002b88 PAUSE
             forth.s:247    .text:0000000000002b8c $d
             forth.s:1101   .text:0000000000003224 TIMER
             forth.s:249    .text:0000000000002b94 PAUSE_LOOP
             forth.s:254    .text:0000000000002bac PAUSE_EXIT
             forth.s:261    .text:0000000000002bb4 _ULED
             forth.s:270    .text:0000000000002bd8 ULED_OFF
             forth.s:284    .text:0000000000002bdc $d
             forth.s:284    .text:0000000000002be0 _NOP
             forth.s:284    .text:0000000000002be4 $t
             forth.s:284    .text:0000000000002be4 NOP
             forth.s:301    .text:0000000000002bf0 $d
             forth.s:301    .text:0000000000002bf4 _EXECU
             forth.s:301    .text:0000000000002bfc $t
             forth.s:301    .text:0000000000002bfc EXECU
             forth.s:321    .text:0000000000002c18 NEXT1
             forth.s:339    .text:0000000000002c34 QBRAN1
             forth.s:356    .text:0000000000002c40 $d
             forth.s:356    .text:0000000000002c44 _EXIT
             forth.s:356    .text:0000000000002c4c EXIT
             forth.s:357    .text:0000000000002c4c $d
             forth.s:363    .text:0000000000002c54 _STORE
             forth.s:363    .text:0000000000002c56 $t
             forth.s:373    .text:0000000000002c64 $d
             forth.s:373    .text:0000000000002c68 _AT
             forth.s:373    .text:0000000000002c6a $t
             forth.s:381    .text:0000000000002c70 $d
ARM GAS  forth.s 			page 210


             forth.s:381    .text:0000000000002c74 _CSTOR
             forth.s:391    .text:0000000000002c84 $d
             forth.s:391    .text:0000000000002c88 _CAT
             forth.s:400    .text:0000000000002c90 $d
             forth.s:400    .text:0000000000002c94 _RFROM
             forth.s:409    .text:0000000000002ca2 $d
             forth.s:409    .text:0000000000002ca6 _DRFROM
             forth.s:409    .text:0000000000002caa $t
             forth.s:420    .text:0000000000002cbe $d
             forth.s:420    .text:0000000000002cc2 _RAT
             forth.s:429    .text:0000000000002cd2 $d
             forth.s:429    .text:0000000000002cd6 _TOR
             forth.s:438    .text:0000000000002ce6 $d
             forth.s:438    .text:0000000000002cea _DTOR
             forth.s:438    .text:0000000000002cee $t
             forth.s:438    .text:0000000000002cf0 DTOR
             forth.s:450    .text:0000000000002d02 $d
             forth.s:450    .text:0000000000002d06 _RPSTOR
             forth.s:450    .text:0000000000002d0a $t
             forth.s:450    .text:0000000000002d0c RPSTOR
             forth.s:459    .text:0000000000002d14 $d
             forth.s:459    .text:0000000000002d18 _SPSTOR
             forth.s:459    .text:0000000000002d1c $t
             forth.s:459    .text:0000000000002d1c SPSTOR
             forth.s:468    .text:0000000000002d24 $d
             forth.s:468    .text:0000000000002d28 _SPAT
             forth.s:468    .text:0000000000002d2c $t
             forth.s:468    .text:0000000000002d2c SPAT
             forth.s:477    .text:0000000000002d34 $d
             forth.s:477    .text:0000000000002d38 _RPAT
             forth.s:477    .text:0000000000002d3c $t
             forth.s:477    .text:0000000000002d3c RPAT
             forth.s:486    .text:0000000000002d44 $d
             forth.s:486    .text:0000000000002d48 _DROP
             forth.s:494    .text:0000000000002d56 $d
             forth.s:494    .text:0000000000002d5a _DUPP
             forth.s:494    .text:0000000000002d5e $t
             forth.s:502    .text:0000000000002d66 $d
             forth.s:502    .text:0000000000002d6a _SWAP
             forth.s:512    .text:0000000000002d78 $d
             forth.s:512    .text:0000000000002d7c _OVER
             forth.s:521    .text:0000000000002d8c $d
             forth.s:521    .text:0000000000002d90 _ZLESS
             forth.s:529    .text:0000000000002d9a $d
             forth.s:529    .text:0000000000002d9e _ANDD
             forth.s:529    .text:0000000000002da2 $t
             forth.s:538    .text:0000000000002dae $d
             forth.s:538    .text:0000000000002db2 _ORR
             forth.s:547    .text:0000000000002dc2 $d
             forth.s:547    .text:0000000000002dc6 _XORR
             forth.s:547    .text:0000000000002dca $t
             forth.s:556    .text:0000000000002dd6 $d
             forth.s:556    .text:0000000000002dda _UPLUS
             forth.s:556    .text:0000000000002dde $t
             forth.s:556    .text:0000000000002de0 UPLUS
             forth.s:568    .text:0000000000002df0 $d
             forth.s:568    .text:0000000000002df4 _RSHIFT
ARM GAS  forth.s 			page 211


             forth.s:577    .text:0000000000002e06 $d
             forth.s:577    .text:0000000000002e0a _LSHIFT
             forth.s:586    .text:0000000000002e1e $d
             forth.s:586    .text:0000000000002e22 _PLUS
             forth.s:586    .text:0000000000002e24 $t
             forth.s:595    .text:0000000000002e2c $d
             forth.s:595    .text:0000000000002e30 _SUBB
             forth.s:595    .text:0000000000002e32 $t
             forth.s:604    .text:0000000000002e3e $d
             forth.s:604    .text:0000000000002e42 _STAR
             forth.s:604    .text:0000000000002e44 $t
             forth.s:613    .text:0000000000002e4e $d
             forth.s:613    .text:0000000000002e52 _UMSTA
             forth.s:613    .text:0000000000002e56 $t
             forth.s:613    .text:0000000000002e58 UMSTA
             forth.s:625    .text:0000000000002e64 $d
             forth.s:625    .text:0000000000002e68 _MSTAR
             forth.s:625    .text:0000000000002e6c MSTAR
             forth.s:636    .text:0000000000002e78 $d
             forth.s:636    .text:0000000000002e7c _ONEP
             forth.s:644    .text:0000000000002e86 $d
             forth.s:644    .text:0000000000002e8a _ONEM
             forth.s:652    .text:0000000000002e96 $d
             forth.s:652    .text:0000000000002e9a _TWOP
             forth.s:652    .text:0000000000002ea0 TWOP
             forth.s:660    .text:0000000000002ea6 $d
             forth.s:660    .text:0000000000002eaa _TWOM
             forth.s:660    .text:0000000000002eb0 TWOM
             forth.s:668    .text:0000000000002eb6 $d
             forth.s:668    .text:0000000000002eba _CELLP
             forth.s:668    .text:0000000000002ec0 $t
             forth.s:668    .text:0000000000002ec0 CELLP
             forth.s:676    .text:0000000000002ec6 $d
             forth.s:676    .text:0000000000002eca _CELLM
             forth.s:676    .text:0000000000002ed0 $t
             forth.s:676    .text:0000000000002ed0 CELLM
             forth.s:684    .text:0000000000002ed6 $d
             forth.s:684    .text:0000000000002eda _BLANK
             forth.s:693    .text:0000000000002eea $d
             forth.s:693    .text:0000000000002eee _CELLS
             forth.s:693    .text:0000000000002ef4 $t
             forth.s:693    .text:0000000000002ef4 CELLS
             forth.s:701    .text:0000000000002efa $d
             forth.s:701    .text:0000000000002efe _CELLSL
             forth.s:701    .text:0000000000002f04 $t
             forth.s:701    .text:0000000000002f04 CELLSL
             forth.s:709    .text:0000000000002f0a $d
             forth.s:709    .text:0000000000002f0e _TWOST
             forth.s:709    .text:0000000000002f14 TWOST
             forth.s:717    .text:0000000000002f1a $d
             forth.s:717    .text:0000000000002f1e _TWOSL
             forth.s:725    .text:0000000000002f2a $d
             forth.s:725    .text:0000000000002f2e _QDUP
             forth.s:735    .text:0000000000002f3e $d
             forth.s:735    .text:0000000000002f42 _ROT
             forth.s:735    .text:0000000000002f46 $t
             forth.s:746    .text:0000000000002f52 $d
ARM GAS  forth.s 			page 212


             forth.s:746    .text:0000000000002f56 _NROT
             forth.s:757    .text:0000000000002f66 $d
             forth.s:757    .text:0000000000002f6a _DDROP
             forth.s:757    .text:0000000000002f70 $t
             forth.s:766    .text:0000000000002f7a $d
             forth.s:766    .text:0000000000002f7e _TDROP
             forth.s:766    .text:0000000000002f84 $t
             forth.s:775    .text:0000000000002f8e $d
             forth.s:775    .text:0000000000002f92 _DDUP
             forth.s:785    .text:0000000000002fa4 $d
             forth.s:785    .text:0000000000002fa8 _DPLUS
             forth.s:785    .text:0000000000002fac DPLUS
             forth.s:798    .text:0000000000002fc0 $d
             forth.s:798    .text:0000000000002fc4 _DABS
             forth.s:814    .text:0000000000002fe8 $d
             forth.s:814    .text:0000000000002fec _UDGREAT
             forth.s:814    .text:0000000000002ff0 $t
             forth.s:814    .text:0000000000002ff0 UDGREAT
             forth.s:831    .text:000000000000300c $d
             forth.s:831    .text:0000000000003010 _DZEQUAL
             forth.s:831    .text:0000000000003014 $t
             forth.s:831    .text:0000000000003014 DZEQUAL
             forth.s:843    .text:0000000000003026 $d
             forth.s:843    .text:000000000000302a _INVER
             forth.s:843    .text:000000000000302e $t
             forth.s:851    .text:0000000000003036 $d
             forth.s:851    .text:000000000000303a _NEGAT
             forth.s:859    .text:000000000000304a $d
             forth.s:859    .text:000000000000304e _ABSS
             forth.s:859    .text:0000000000003052 $t
             forth.s:869    .text:000000000000305e $d
             forth.s:869    .text:0000000000003062 _CLZ
             forth.s:869    .text:0000000000003066 $t
             forth.s:877    .text:000000000000306e $d
             forth.s:877    .text:0000000000003072 _CTZ
             forth.s:877    .text:0000000000003076 $t
             forth.s:877    .text:0000000000003078 CTZ
             forth.s:892    .text:0000000000003090 $d
             forth.s:892    .text:0000000000003094 _ZEQUAL
             forth.s:892    .text:0000000000003098 ZEQUAL
             forth.s:903    .text:00000000000030a6 $d
             forth.s:903    .text:00000000000030aa _EQUAL
             forth.s:903    .text:00000000000030ac $t
             forth.s:915    .text:00000000000030bc $d
             forth.s:915    .text:00000000000030c0 _DIFF
             forth.s:915    .text:00000000000030c4 DIFF
             forth.s:928    .text:00000000000030dc $d
             forth.s:928    .text:00000000000030e0 _ULESS
             forth.s:940    .text:00000000000030f4 $d
             forth.s:940    .text:00000000000030f8 _LESS
             forth.s:940    .text:00000000000030fa $t
             forth.s:940    .text:00000000000030fc LESS
             forth.s:952    .text:000000000000310c $d
             forth.s:952    .text:0000000000003110 _UGREAT
             forth.s:952    .text:0000000000003114 UGREAT
             forth.s:964    .text:0000000000003124 $d
             forth.s:964    .text:0000000000003128 _GREAT
ARM GAS  forth.s 			page 213


             forth.s:964    .text:000000000000312a $t
             forth.s:976    .text:000000000000313c $d
             forth.s:976    .text:0000000000003140 _MAX
             forth.s:976    .text:0000000000003144 $t
             forth.s:987    .text:0000000000003150 $d
             forth.s:987    .text:0000000000003154 _MIN
             forth.s:987    .text:0000000000003158 $t
             forth.s:998    .text:0000000000003164 $d
             forth.s:998    .text:0000000000003168 _PSTOR
             forth.s:998    .text:000000000000316c PSTOR
             forth.s:1010   .text:000000000000317c $d
             forth.s:1010   .text:0000000000003180 _DSTOR
             forth.s:1010   .text:0000000000003184 DSTOR
             forth.s:1022   .text:0000000000003198 $d
             forth.s:1022   .text:000000000000319c _DAT
             forth.s:1022   .text:00000000000031a0 DAT
             forth.s:1032   .text:00000000000031aa $d
             forth.s:1032   .text:00000000000031ae _COUNT
             forth.s:1032   .text:00000000000031b4 $t
             forth.s:1042   .text:00000000000031c0 $d
             forth.s:1042   .text:00000000000031c4 _DNEGA
             forth.s:1042   .text:00000000000031cc $t
             forth.s:1042   .text:00000000000031cc DNEGA
             forth.s:1059   .text:00000000000031dc DOVAR
             forth.s:1070   .text:00000000000031e8 DOCON
             forth.s:1083   .text:00000000000031f2 $d
             forth.s:1083   .text:00000000000031f6 _SEED
             forth.s:1092   .text:0000000000003206 $d
             forth.s:1092   .text:000000000000320a _MSEC
             forth.s:1101   .text:000000000000321a $d
             forth.s:1101   .text:000000000000321e _TIMER
             forth.s:1101   .text:0000000000003224 $t
             forth.s:1110   .text:0000000000003230 $d
             forth.s:1110   .text:0000000000003234 _TBOOT
             forth.s:1110   .text:000000000000323a $t
             forth.s:1110   .text:000000000000323c TBOOT
             forth.s:1119   .text:0000000000003248 $d
             forth.s:1119   .text:000000000000324c _BASE
             forth.s:1129   .text:0000000000003260 TEMP
             forth.s:1138   .text:000000000000326c $d
             forth.s:1138   .text:0000000000003270 _SPAN
             forth.s:1138   .text:0000000000003278 SPAN
             forth.s:1147   .text:0000000000003284 $d
             forth.s:1147   .text:0000000000003288 _INN
             forth.s:1147   .text:000000000000328c $t
             forth.s:1147   .text:000000000000328c INN
             forth.s:1157   .text:0000000000003298 $d
             forth.s:1157   .text:000000000000329c _NTIB
             forth.s:1157   .text:00000000000032a4 NTIB
             forth.s:1166   .text:00000000000032b0 $d
             forth.s:1166   .text:00000000000032b4 _TEVAL
             forth.s:1166   .text:00000000000032ba $t
             forth.s:1166   .text:00000000000032bc TEVAL
             forth.s:1176   .text:00000000000032c8 $d
             forth.s:1176   .text:00000000000032cc _HLD
             forth.s:1176   .text:00000000000032d0 $t
             forth.s:1176   .text:00000000000032d0 HLD
ARM GAS  forth.s 			page 214


             forth.s:1186   .text:00000000000032dc $d
             forth.s:1186   .text:00000000000032e0 _CNTXT
             forth.s:1186   .text:00000000000032e8 $t
             forth.s:1186   .text:00000000000032e8 CNTXT
             forth.s:1187   .text:00000000000032e8 CRRNT
             forth.s:1197   .text:00000000000032f4 $d
             forth.s:1197   .text:00000000000032f8 _CPP
             forth.s:1197   .text:00000000000032fc CPP
             forth.s:1207   .text:0000000000003308 $d
             forth.s:1207   .text:000000000000330c _FCP
             forth.s:1207   .text:0000000000003310 $t
             forth.s:1207   .text:0000000000003310 FCP
             forth.s:1217   .text:000000000000331c $d
             forth.s:1217   .text:0000000000003320 _LAST
             forth.s:1217   .text:0000000000003328 LAST
             forth.s:1231   .text:0000000000003334 $d
             forth.s:1231   .text:0000000000003338 _USER_BEGIN
             forth.s:1231   .text:0000000000003344 USER_BEGIN
             forth.s:1235   .text:0000000000003350 USR_BGN_ADR
             forth.s:1236   .text:0000000000003350 $d
             forth.s:1242   .text:0000000000003358 _USER_END
             forth.s:1242   .text:0000000000003364 USER_END
             forth.s:1246   .text:0000000000003370 USER_END_ADR
             forth.s:1247   .text:0000000000003370 $d
             forth.s:1259   .text:0000000000003378 _WITHI
             forth.s:1259   .text:0000000000003380 WITHI
             forth.s:1261   .text:0000000000003384 $d
             forth.s:1276   .text:00000000000033a4 _UMMOD
             forth.s:1276   .text:00000000000033ac UMMOD
             forth.s:1280   .text:00000000000033b6 UMMOD0
             forth.s:1287   .text:00000000000033c6 UMMOD1
             forth.s:1293   .text:00000000000033d0 UMMOD2
             forth.s:1306   .text:00000000000033dc $d
             forth.s:1306   .text:00000000000033e0 _MSMOD
             forth.s:1306   .text:00000000000033e6 $t
             forth.s:1306   .text:00000000000033e8 MSMOD
             forth.s:1308   .text:00000000000033ec $d
             forth.s:1317   .text:0000000000003414 MMOD1
             forth.s:1324   .text:0000000000003430 MMOD2
             forth.s:1332   .text:0000000000003450 MMOD3
             forth.s:1339   .text:0000000000003458 _STOD
             forth.s:1339   .text:000000000000345c $t
             forth.s:1348   .text:0000000000003468 $d
             forth.s:1348   .text:000000000000346c _D2STAR
             forth.s:1348   .text:0000000000003470 $t
             forth.s:1348   .text:0000000000003470 D2STAR
             forth.s:1360   .text:0000000000003482 $d
             forth.s:1360   .text:0000000000003486 _D2SL
             forth.s:1360   .text:000000000000348a $t
             forth.s:1360   .text:000000000000348c D2SL
             forth.s:1375   .text:000000000000349a $d
             forth.s:1375   .text:000000000000349e _DSLMOD
             forth.s:1375   .text:00000000000034a4 $t
             forth.s:1375   .text:00000000000034a4 DSLMOD
             forth.s:1411   .text:00000000000034f0 $d
             forth.s:1411   .text:00000000000034f4 _DSLASH
             forth.s:1411   .text:00000000000034f8 DSLASH
ARM GAS  forth.s 			page 215


             forth.s:1413   .text:00000000000034fc $d
             forth.s:1433   .text:0000000000003540 _DSTAR
             forth.s:1433   .text:0000000000003544 DSTAR
             forth.s:1482   .text:000000000000357a $d
             forth.s:1482   .text:000000000000357e _SLMOD
             forth.s:1484   .text:0000000000003588 $d
             forth.s:1495   .text:00000000000035a0 _MODD
             forth.s:1495   .text:00000000000035a4 $t
             forth.s:1497   .text:00000000000035a8 $d
             forth.s:1506   .text:00000000000035b8 _SLASH
             forth.s:1506   .text:00000000000035ba $t
             forth.s:1506   .text:00000000000035bc SLASH
             forth.s:1508   .text:00000000000035c0 $d
             forth.s:1519   .text:00000000000035d4 _SSMOD
             forth.s:1519   .text:00000000000035da $t
             forth.s:1519   .text:00000000000035dc SSMOD
             forth.s:1521   .text:00000000000035e0 $d
             forth.s:1533   .text:00000000000035f8 _STASL
             forth.s:1533   .text:00000000000035fc STASL
             forth.s:1535   .text:0000000000003600 $d
             forth.s:1549   .text:0000000000003614 _ALGND
             forth.s:1549   .text:000000000000361c $t
             forth.s:1549   .text:000000000000361c ALGND
             forth.s:1560   .text:000000000000362c $d
             forth.s:1560   .text:0000000000003630 _TCHAR
             forth.s:1560   .text:0000000000003636 $t
             forth.s:1560   .text:0000000000003638 TCHAR
             forth.s:1562   .text:000000000000363c $d
             forth.s:1572   .text:0000000000003674 TCHA1
             forth.s:1580   .text:000000000000367c _DEPTH
             forth.s:1580   .text:0000000000003682 $t
             forth.s:1580   .text:0000000000003684 DEPTH
             forth.s:1592   .text:000000000000369c $d
             forth.s:1592   .text:00000000000036a0 _PICK
             forth.s:1594   .text:00000000000036ac $d
             forth.s:1610   .text:00000000000036c8 _HERE
             forth.s:1612   .text:00000000000036d4 $d
             forth.s:1621   .text:00000000000036e4 _PAD
             forth.s:1621   .text:00000000000036e8 $t
             forth.s:1623   .text:00000000000036ec $d
             forth.s:1634   .text:0000000000003704 _TIB
             forth.s:1634   .text:0000000000003708 $t
             forth.s:1634   .text:0000000000003708 TIB
             forth.s:1644   .text:0000000000003712 $d
             forth.s:1644   .text:0000000000003716 _ATEXE
             forth.s:1657   .text:0000000000003734 $d
             forth.s:1657   .text:0000000000003738 _CMOVE
             forth.s:1657   .text:000000000000373e $t
             forth.s:1664   .text:0000000000003752 CMOV1
             forth.s:1661   .text:000000000000374a CMOV0
             forth.s:1669   .text:000000000000375c CMOV2
             forth.s:1677   .text:0000000000003764 $d
             forth.s:1677   .text:0000000000003768 _MOVE
             forth.s:1695   .text:000000000000379a MOVE1
             forth.s:1692   .text:0000000000003796 MOVE3
             forth.s:1689   .text:0000000000003792 MOVE0
             forth.s:1700   .text:00000000000037a4 MOVE2
ARM GAS  forth.s 			page 216


             forth.s:1709   .text:00000000000037ac $d
             forth.s:1709   .text:00000000000037b0 _FILL
             forth.s:1717   .text:00000000000037c6 FILL2
             forth.s:1713   .text:00000000000037be FILL1
             forth.s:1727   .text:00000000000037ce $d
             forth.s:1727   .text:00000000000037d2 _PACKS
             forth.s:1727   .text:00000000000037d8 $t
             forth.s:1727   .text:00000000000037d8 PACKS
             forth.s:1729   .text:00000000000037dc $d
             forth.s:1758   .text:0000000000003834 _DIGIT
             forth.s:1758   .text:000000000000383a $t
             forth.s:1758   .text:000000000000383c DIGIT
             forth.s:1760   .text:0000000000003840 $d
             forth.s:1775   .text:0000000000003874 _EXTRC
             forth.s:1775   .text:000000000000387c $t
             forth.s:1775   .text:000000000000387c EXTRC
             forth.s:1777   .text:0000000000003880 $d
             forth.s:1787   .text:0000000000003894 _BDIGS
             forth.s:1789   .text:000000000000389c $d
             forth.s:1799   .text:00000000000038b0 _HOLD
             forth.s:1799   .text:00000000000038b8 HOLD
             forth.s:1801   .text:00000000000038bc $d
             forth.s:1817   .text:00000000000038e0 _DIG
             forth.s:1817   .text:00000000000038e2 $t
             forth.s:1817   .text:00000000000038e4 DIG
             forth.s:1819   .text:00000000000038e8 $d
             forth.s:1831   .text:0000000000003900 _DIGS
             forth.s:1833   .text:0000000000003908 DIGS1
             forth.s:1834   .text:0000000000003908 $d
             forth.s:1839   .text:0000000000003924 DIGS2
             forth.s:1849   .text:0000000000003930 _SIGN
             forth.s:1851   .text:000000000000393c $d
             forth.s:1855   .text:0000000000003954 SIGN1
             forth.s:1863   .text:000000000000395c _EDIGS
             forth.s:1865   .text:0000000000003964 $d
             forth.s:1880   .text:0000000000003980 STRR
             forth.s:1881   .text:0000000000003980 $t
             forth.s:1882   .text:0000000000003984 $d
             forth.s:1899   .text:00000000000039b0 _HEX
             forth.s:1899   .text:00000000000039b4 $t
             forth.s:1899   .text:00000000000039b4 HEX
             forth.s:1901   .text:00000000000039b8 $d
             forth.s:1912   .text:00000000000039d0 _BIN
             forth.s:1912   .text:00000000000039d4 $t
             forth.s:1912   .text:00000000000039d4 BIN
             forth.s:1914   .text:00000000000039d8 $d
             forth.s:1924   .text:00000000000039f0 _DECIM
             forth.s:1924   .text:00000000000039f8 $t
             forth.s:1926   .text:00000000000039fc $d
             forth.s:1941   .text:0000000000003a14 _DIGTQ
             forth.s:1943   .text:0000000000003a20 $d
             forth.s:1956   .text:0000000000003a68 DGTQ1
             forth.s:1969   .text:0000000000003a78 $t
             forth.s:1970   .text:0000000000003a7c $d
             forth.s:2004   .text:0000000000003afc $t
             forth.s:2021   .text:0000000000003b1a $d
             forth.s:2044   .text:0000000000003b5a _INTQ
ARM GAS  forth.s 			page 217


             forth.s:2047   .text:0000000000003b64 $d
             forth.s:2117   .text:0000000000003c6c _SPACE
             forth.s:2117   .text:0000000000003c72 $t
             forth.s:2119   .text:0000000000003c78 $d
             forth.s:2128   .text:0000000000003c88 _SPACS
             forth.s:2128   .text:0000000000003c90 SPACS
             forth.s:2130   .text:0000000000003c94 $d
             forth.s:2136   .text:0000000000003cb0 CHAR2
             forth.s:2134   .text:0000000000003cac CHAR1
             forth.s:2145   .text:0000000000003cc0 _TYPEE
             forth.s:2147   .text:0000000000003ccc $d
             forth.s:2153   .text:0000000000003ce4 TYPE2
             forth.s:2149   .text:0000000000003cd8 TYPE1
             forth.s:2163   .text:0000000000003cf8 _CR
             forth.s:2165   .text:0000000000003d00 $d
             forth.s:2177   .text:0000000000003d1c DOSTR
             forth.s:2178   .text:0000000000003d1c $t
             forth.s:2180   .text:0000000000003d20 $d
             forth.s:2198   .text:0000000000003d48 STRQP
             forth.s:2199   .text:0000000000003d48 $t
             forth.s:2200   .text:0000000000003d4c $d
             forth.s:2209   .text:0000000000003d54 DOTST
             forth.s:2210   .text:0000000000003d54 $t
             forth.s:2211   .text:0000000000003d58 $d
             forth.s:2222   .text:0000000000003d64 $t
             forth.s:2223   .text:0000000000003d68 $d
             forth.s:2233   .text:0000000000003d78 _DOTR
             forth.s:2233   .text:0000000000003d7c DOTR
             forth.s:2235   .text:0000000000003d80 $d
             forth.s:2250   .text:0000000000003da4 _UDOTR
             forth.s:2250   .text:0000000000003da8 $t
             forth.s:2250   .text:0000000000003da8 UDOTR
             forth.s:2252   .text:0000000000003dac $d
             forth.s:2271   .text:0000000000003de4 _UDOT
             forth.s:2273   .text:0000000000003dec $d
             forth.s:2287   .text:0000000000003e0c _DOT
             forth.s:2287   .text:0000000000003e0e $t
             forth.s:2287   .text:0000000000003e10 DOT
             forth.s:2289   .text:0000000000003e14 $d
             forth.s:2296   .text:0000000000003e38 DOT1
             forth.s:2306   .text:0000000000003e4c _DDOT
             forth.s:2306   .text:0000000000003e50 DDOT
             forth.s:2308   .text:0000000000003e54 $d
             forth.s:2326   .text:0000000000003e84 _HDOT
             forth.s:2328   .text:0000000000003e8c $d
             forth.s:2350   .text:0000000000003ed4 _QUEST
             forth.s:2350   .text:0000000000003ed6 $t
             forth.s:2350   .text:0000000000003ed8 QUEST
             forth.s:2352   .text:0000000000003edc $d
             forth.s:2366   .text:0000000000003ee8 PARS
             forth.s:2367   .text:0000000000003ee8 $t
             forth.s:2368   .text:0000000000003eec $d
             forth.s:2434   .text:0000000000003ffc PARS8
             forth.s:2398   .text:0000000000003f70 PARS3
             forth.s:2381   .text:0000000000003f28 PARS1
             forth.s:2396   .text:0000000000003f6c PARS2
             forth.s:2402   .text:0000000000003f7c PARS4
ARM GAS  forth.s 			page 218


             forth.s:2414   .text:0000000000003fac PARS5
             forth.s:2421   .text:0000000000003fd0 PARS6
             forth.s:2427   .text:0000000000003fe4 PARS7
             forth.s:2445   .text:0000000000004010 _PARSE
             forth.s:2445   .text:0000000000004016 $t
             forth.s:2445   .text:0000000000004018 PARSE
             forth.s:2447   .text:000000000000401c $d
             forth.s:2468   .text:000000000000405c _DOTPR
             forth.s:2468   .text:0000000000004060 DOTPR
             forth.s:2470   .text:0000000000004064 $d
             forth.s:2481   .text:000000000000407c _PAREN
             forth.s:2481   .text:000000000000407e $t
             forth.s:2481   .text:0000000000004080 PAREN
             forth.s:2483   .text:0000000000004084 $d
             forth.s:2494   .text:000000000000409c _BKSLA
             forth.s:2494   .text:000000000000409e $t
             forth.s:2494   .text:00000000000040a0 BKSLA
             forth.s:2496   .text:00000000000040a4 $d
             forth.s:2507   .text:00000000000040bc _CHAR
             forth.s:2507   .text:00000000000040c4 CHAR
             forth.s:2509   .text:00000000000040c8 $d
             forth.s:2519   .text:00000000000040e0 _IMCHAR
             forth.s:2519   .text:00000000000040e8 IMCHAR
             forth.s:2521   .text:00000000000040ec $d
             forth.s:3117   .text:0000000000004810 LITER
             forth.s:2530   .text:00000000000040fc _WORDD
             forth.s:2530   .text:0000000000004104 WORDD
             forth.s:2532   .text:0000000000004108 $d
             forth.s:2544   .text:0000000000004120 _TOKEN
             forth.s:2544   .text:0000000000004126 $t
             forth.s:2544   .text:0000000000004128 TOKEN
             forth.s:2546   .text:000000000000412c $d
             forth.s:2711   .text:000000000000431c UPPER
             forth.s:2560   .text:0000000000004140 _NAMET
             forth.s:2560   .text:0000000000004146 $t
             forth.s:2560   .text:0000000000004148 NAMET
             forth.s:2562   .text:000000000000414c $d
             forth.s:2581   .text:000000000000416c _SAMEQ
             forth.s:2581   .text:0000000000004172 $t
             forth.s:2581   .text:0000000000004174 SAMEQ
             forth.s:2583   .text:0000000000004178 $d
             forth.s:2600   .text:00000000000041c0 SAME2
             forth.s:2585   .text:0000000000004184 SAME1
             forth.s:2615   .text:00000000000041d4 FIND
             forth.s:2616   .text:00000000000041d4 $t
             forth.s:2617   .text:00000000000041d8 $d
             forth.s:2624   .text:00000000000041f4 FIND1
             forth.s:2644   .text:000000000000424c FIND6
             forth.s:2637   .text:0000000000004234 FIND2
             forth.s:2642   .text:0000000000004244 FIND3
             forth.s:2651   .text:0000000000004264 FIND4
             forth.s:2657   .text:0000000000004280 FIND5
             forth.s:2673   .text:00000000000042a8 _NAMEQ
             forth.s:2673   .text:00000000000042ae $t
             forth.s:2673   .text:00000000000042b0 NAMEQ
             forth.s:2675   .text:00000000000042b4 $d
             forth.s:2690   .text:00000000000042c8 _ASCIZ
ARM GAS  forth.s 			page 219


             forth.s:2690   .text:00000000000042ce $t
             forth.s:2690   .text:00000000000042d0 ASCIZ
             forth.s:2692   .text:00000000000042d4 $d
             forth.s:2711   .text:0000000000004314 _UPPER
             forth.s:2711   .text:000000000000431a $t
             forth.s:2713   .text:0000000000004320 $d
             forth.s:2744   .text:00000000000043a4 BKSP
             forth.s:2745   .text:00000000000043a4 $t
             forth.s:2746   .text:00000000000043a8 $d
             forth.s:2760   .text:00000000000043ec BACK1
             forth.s:2769   .text:00000000000043f0 TAP
             forth.s:2770   .text:00000000000043f0 $t
             forth.s:2771   .text:00000000000043f4 $d
             forth.s:2784   .text:000000000000440c KTAP
             forth.s:2785   .text:000000000000440c TTAP
             forth.s:2786   .text:000000000000440c $t
             forth.s:2787   .text:0000000000004410 $d
             forth.s:2801   .text:0000000000004450 KTAP2
             forth.s:2798   .text:0000000000004448 KTAP1
             forth.s:2813   .text:0000000000004468 _ACCEP
             forth.s:2815   .text:0000000000004474 $d
             forth.s:2818   .text:0000000000004480 ACCP1
             forth.s:2834   .text:00000000000044c8 ACCP4
             forth.s:2830   .text:00000000000044bc ACCP2
             forth.s:2832   .text:00000000000044c0 ACCP3
             forth.s:2845   .text:00000000000044dc _QUERY
             forth.s:2845   .text:00000000000044e2 $t
             forth.s:2845   .text:00000000000044e4 QUERY
             forth.s:2847   .text:00000000000044e8 $d
             forth.s:2867   .text:000000000000451c _ABORT
             forth.s:2867   .text:0000000000004522 $t
             forth.s:2869   .text:0000000000004528 ABORT1
             forth.s:2870   .text:0000000000004528 $d
             forth.s:2885   .text:0000000000004550 ABORQ
             forth.s:2886   .text:0000000000004550 $t
             forth.s:2887   .text:0000000000004554 $d
             forth.s:2905   .text:0000000000004578 _INTER
             forth.s:2907   .text:0000000000004588 $d
             forth.s:2916   .text:00000000000045c4 INTE1
             forth.s:2913   .text:00000000000045ba $t
             forth.s:2914   .text:00000000000045bc $d
             forth.s:2920   .text:00000000000045d4 INTE2
             forth.s:2927   .text:00000000000045dc _LBRAC
             forth.s:2927   .text:00000000000045de $t
             forth.s:2927   .text:00000000000045e0 LBRAC
             forth.s:2929   .text:00000000000045e4 $d
             forth.s:2939   .text:00000000000045fc _DOTOK
             forth.s:2939   .text:0000000000004600 $t
             forth.s:2939   .text:0000000000004600 DOTOK
             forth.s:2941   .text:0000000000004604 $d
             forth.s:2947   .text:0000000000004628 DOTO1
             forth.s:2948   .text:0000000000004628 $d
             forth.s:2956   .text:0000000000004634 _QSTAC
             forth.s:2956   .text:000000000000463c QSTAC
             forth.s:2958   .text:0000000000004640 $d
             forth.s:2960   .text:0000000000004656 $t
             forth.s:2961   .text:0000000000004658 $d
ARM GAS  forth.s 			page 220


             forth.s:2968   .text:0000000000004660 _EVAL
             forth.s:2970   .text:000000000000466c EVAL1
             forth.s:2971   .text:000000000000466c $d
             forth.s:2979   .text:0000000000004694 EVAL2
             forth.s:2989   .text:00000000000046a4 _PRESE
             forth.s:2991   .text:00000000000046b0 $d
             forth.s:3001   .text:00000000000046c4 _QUIT
             forth.s:3002   .text:00000000000046cc $d
             forth.s:3004   .text:00000000000046d8 QUIT1
             forth.s:3006   .text:00000000000046dc QUIT2
             forth.s:3016   .text:00000000000046f0 _FORGET
             forth.s:3016   .text:00000000000046f8 FORGET
             forth.s:3018   .text:00000000000046fc $d
             forth.s:3515   .text:0000000000004c94 OVERT
             forth.s:3046   .text:0000000000004744 $d
             forth.s:3046   .text:0000000000004748 _TICK
             forth.s:3046   .text:000000000000474a $t
             forth.s:3046   .text:000000000000474c TICK
             forth.s:3048   .text:0000000000004750 $d
             forth.s:3052   .text:0000000000004764 TICK1
             forth.s:3060   .text:000000000000476c _ALLOT
             forth.s:3060   .text:0000000000004772 $t
             forth.s:3062   .text:0000000000004778 $d
             forth.s:3071   .text:0000000000004788 _COMMA
             forth.s:3071   .text:000000000000478a $t
             forth.s:3071   .text:000000000000478c COMMA
             forth.s:3073   .text:0000000000004790 $d
             forth.s:3087   .text:00000000000047ac $d
             forth.s:3087   .text:00000000000047b0 _BCOMP
             forth.s:3087   .text:00000000000047ba $t
             forth.s:3087   .text:00000000000047bc BCOMP
             forth.s:3089   .text:00000000000047c0 $d
             forth.s:3099   .text:00000000000047d0 _COMPI
             forth.s:3099   .text:00000000000047d8 $t
             forth.s:3099   .text:00000000000047d8 COMPI
             forth.s:3101   .text:00000000000047dc $d
             forth.s:3117   .text:0000000000004808 _LITER
             forth.s:3117   .text:0000000000004810 $t
             forth.s:3119   .text:0000000000004814 $d
             forth.s:3554   .text:0000000000004cf0 CALLC
             forth.s:3129   .text:0000000000004828 STRCQ
             forth.s:3130   .text:0000000000004828 $t
             forth.s:3131   .text:000000000000482c $d
             forth.s:3153   .text:0000000000004864 _FOR
             forth.s:3153   .text:0000000000004868 $t
             forth.s:3153   .text:0000000000004868 FOR
             forth.s:3155   .text:000000000000486c $d
             forth.s:3164   .text:0000000000004884 _DO
             forth.s:3164   .text:0000000000004888 DO
             forth.s:3166   .text:000000000000488c $d
             forth.s:3172   .text:00000000000048b8 DOPLOOP
             forth.s:3173   .text:00000000000048b8 $t
             forth.s:3189   .text:00000000000048da $d
             forth.s:3189   .text:00000000000048de _PLOOP
             forth.s:3189   .text:00000000000048e4 $t
             forth.s:3189   .text:00000000000048e4 PLOOP
             forth.s:3191   .text:00000000000048e8 $d
ARM GAS  forth.s 			page 221


             forth.s:3195   .text:00000000000048fc DOLOOP
             forth.s:3196   .text:00000000000048fc $t
             forth.s:3214   .text:0000000000004924 $d
             forth.s:3214   .text:0000000000004928 _LOOP
             forth.s:3214   .text:0000000000004930 LOOP
             forth.s:3216   .text:0000000000004934 $d
             forth.s:3227   .text:000000000000494c _BEGIN
             forth.s:3227   .text:0000000000004952 $t
             forth.s:3227   .text:0000000000004954 BEGIN
             forth.s:3229   .text:0000000000004958 $d
             forth.s:3238   .text:0000000000004960 $d
             forth.s:3238   .text:0000000000004964 _FNEXT
             forth.s:3238   .text:000000000000496c FNEXT
             forth.s:3240   .text:0000000000004970 $d
             forth.s:3248   .text:0000000000004988 _I
             forth.s:3248   .text:000000000000498a $t
             forth.s:3248   .text:000000000000498c I
             forth.s:3257   .text:0000000000004998 $d
             forth.s:3257   .text:000000000000499c _J
             forth.s:3257   .text:000000000000499e $t
             forth.s:3257   .text:00000000000049a0 J
             forth.s:3267   .text:00000000000049ac $d
             forth.s:3267   .text:00000000000049b0 _UNTIL
             forth.s:3267   .text:00000000000049b6 $t
             forth.s:3267   .text:00000000000049b8 UNTIL
             forth.s:3269   .text:00000000000049bc $d
             forth.s:3278   .text:00000000000049d4 _AGAIN
             forth.s:3278   .text:00000000000049da $t
             forth.s:3278   .text:00000000000049dc AGAIN
             forth.s:3280   .text:00000000000049e0 $d
             forth.s:3289   .text:00000000000049f8 _IFF
             forth.s:3289   .text:00000000000049fc IFF
             forth.s:3291   .text:0000000000004a00 $d
             forth.s:3303   .text:0000000000004a28 _AHEAD
             forth.s:3303   .text:0000000000004a2e $t
             forth.s:3303   .text:0000000000004a30 AHEAD
             forth.s:3305   .text:0000000000004a34 $d
             forth.s:3317   .text:0000000000004a5c _REPEA
             forth.s:3317   .text:0000000000004a64 REPEA
             forth.s:3319   .text:0000000000004a68 $d
             forth.s:3330   .text:0000000000004a80 _THENN
             forth.s:3330   .text:0000000000004a88 THENN
             forth.s:3332   .text:0000000000004a8c $d
             forth.s:3343   .text:0000000000004aa0 _AFT
             forth.s:3343   .text:0000000000004aa4 $t
             forth.s:3343   .text:0000000000004aa4 AFT
             forth.s:3345   .text:0000000000004aa8 $d
             forth.s:3357   .text:0000000000004ac0 _ELSEE
             forth.s:3357   .text:0000000000004ac8 ELSEE
             forth.s:3359   .text:0000000000004acc $d
             forth.s:3369   .text:0000000000004ae0 _WHILE
             forth.s:3369   .text:0000000000004ae6 $t
             forth.s:3369   .text:0000000000004ae8 WHILE
             forth.s:3371   .text:0000000000004aec $d
             forth.s:3380   .text:0000000000004afc _ABRTQ
             forth.s:3380   .text:0000000000004b04 ABRTQ
             forth.s:3382   .text:0000000000004b08 $d
ARM GAS  forth.s 			page 222


             forth.s:3391   .text:0000000000004b20 _STRQ
             forth.s:3391   .text:0000000000004b24 STRQ
             forth.s:3393   .text:0000000000004b28 $d
             forth.s:3403   .text:0000000000004b40 _DOTQ
             forth.s:3403   .text:0000000000004b44 DOTQ
             forth.s:3405   .text:0000000000004b48 $d
             forth.s:3419   .text:0000000000004b60 _UNIQU
             forth.s:3419   .text:0000000000004b68 $t
             forth.s:3419   .text:0000000000004b68 UNIQU
             forth.s:3421   .text:0000000000004b6c $d
             forth.s:3428   .text:0000000000004b94 UNIQ1
             forth.s:3425   .text:0000000000004b88 $d
             forth.s:3438   .text:0000000000004b9c SNAME
             forth.s:3439   .text:0000000000004b9c $t
             forth.s:3440   .text:0000000000004ba0 $d
             forth.s:3456   .text:0000000000004be4 SNAM1
             forth.s:3468   .text:0000000000004bf8 _SCOMP
             forth.s:3468   .text:0000000000004c04 SCOMP
             forth.s:3470   .text:0000000000004c08 $d
             forth.s:3482   .text:0000000000004c40 SCOM2
             forth.s:3479   .text:0000000000004c38 SCOM1
             forth.s:3487   .text:0000000000004c54 SCOM3
             forth.s:3496   .text:0000000000004c5c COLON_ABORT
             forth.s:3497   .text:0000000000004c5c $t
             forth.s:3498   .text:0000000000004c60 $d
             forth.s:3515   .text:0000000000004c8c _OVERT
             forth.s:3515   .text:0000000000004c92 $t
             forth.s:3517   .text:0000000000004c98 $d
             forth.s:3528   .text:0000000000004cb0 _SEMIS
             forth.s:3528   .text:0000000000004cb2 $t
             forth.s:3528   .text:0000000000004cb4 SEMIS
             forth.s:3530   .text:0000000000004cb8 $d
             forth.s:3542   .text:0000000000004cd4 _RBRAC
             forth.s:3542   .text:0000000000004cd6 $t
             forth.s:3542   .text:0000000000004cd8 RBRAC
             forth.s:3544   .text:0000000000004cdc $d
             forth.s:3555   .text:0000000000004cf0 $t
             forth.s:3556   .text:0000000000004cf4 $d
             forth.s:3568   .text:0000000000004d0c _COLON
             forth.s:3568   .text:0000000000004d0e $t
             forth.s:3568   .text:0000000000004d10 COLON
             forth.s:3570   .text:0000000000004d14 $d
             forth.s:3581   .text:0000000000004d2c _IMMED
             forth.s:3581   .text:0000000000004d36 $t
             forth.s:3581   .text:0000000000004d38 IMMED
             forth.s:3583   .text:0000000000004d3c $d
             forth.s:3601   .text:0000000000004d68 _CONST
             forth.s:3601   .text:0000000000004d74 CONST
             forth.s:3603   .text:0000000000004d78 $d
             forth.s:3614   .text:0000000000004da8 $t
             forth.s:3621   .text:0000000000004da8 DODOES
             forth.s:3623   .text:0000000000004dac $d
             forth.s:3638   .text:0000000000004dd0 $d
             forth.s:3638   .text:0000000000004dd4 _DOES
             forth.s:3638   .text:0000000000004dda $t
             forth.s:3638   .text:0000000000004ddc DOES
             forth.s:3640   .text:0000000000004de0 $d
ARM GAS  forth.s 			page 223


             forth.s:3655   .text:0000000000004e10 _DEFERAT
             forth.s:3655   .text:0000000000004e18 DEFERAT
             forth.s:3657   .text:0000000000004e1c $d
             forth.s:3667   .text:0000000000004e34 _DEFERSTO
             forth.s:3667   .text:0000000000004e3c DEFERSTO
             forth.s:3669   .text:0000000000004e40 $d
             forth.s:3680   .text:0000000000004e5c _DEFER
             forth.s:3680   .text:0000000000004e62 $t
             forth.s:3680   .text:0000000000004e64 DEFER
             forth.s:3682   .text:0000000000004e68 $d
             forth.s:3703   .text:0000000000004eb4 CREAT
             forth.s:3693   .text:0000000000004e9c DEFER_NOP
             forth.s:3694   .text:0000000000004e9c $t
             forth.s:3695   .text:0000000000004ea0 $d
             forth.s:3703   .text:0000000000004eac _CREAT
             forth.s:3705   .text:0000000000004eb8 $d
             forth.s:3718   .text:0000000000004edc _VARIA
             forth.s:3718   .text:0000000000004ee8 VARIA
             forth.s:3720   .text:0000000000004eec $d
             forth.s:3738   .text:0000000000004f0c DMP
             forth.s:3739   .text:0000000000004f0c $t
             forth.s:3740   .text:0000000000004f10 $d
             forth.s:3752   .text:0000000000004f48 PDUM2
             forth.s:3746   .text:0000000000004f30 PDUM1
             forth.s:3764   .text:0000000000004f54 $d
             forth.s:3764   .text:0000000000004f58 _DUMP
             forth.s:3764   .text:0000000000004f60 DUMP
             forth.s:3766   .text:0000000000004f64 $d
             forth.s:3792   .text:0000000000004fe0 DUMP4
             forth.s:3782   .text:0000000000004fb8 DUMP1
             forth.s:3794   .text:0000000000004fe8 DUMP3
             forth.s:3807   .text:0000000000004ffc TDOT
             forth.s:3808   .text:0000000000004ffc $t
             forth.s:3809   .text:0000000000005000 $d
             forth.s:3848   .text:0000000000005090 _DOTS
             forth.s:3848   .text:0000000000005094 DOTS
             forth.s:3850   .text:0000000000005098 $d
             forth.s:3857   .text:00000000000050b4 DOTS2
             forth.s:3853   .text:00000000000050a8 DOTS1
             forth.s:3862   .text:00000000000050c4 RBASE
             forth.s:3863   .text:00000000000050c4 $t
             forth.s:3871   .text:00000000000050d4 RDOT
             forth.s:3873   .text:00000000000050d8 $d
             forth.s:3900   .text:000000000000513c _TRACE
             forth.s:3900   .text:0000000000005142 $t
             forth.s:3900   .text:0000000000005144 TRACE
             forth.s:3902   .text:0000000000005148 $d
             forth.s:3921   .text:000000000000518c _TNAME
             forth.s:3921   .text:0000000000005192 $t
             forth.s:3921   .text:0000000000005194 TNAME
             forth.s:3923   .text:0000000000005198 $d
             forth.s:3926   .text:00000000000051a4 TNAM1
             forth.s:3937   .text:00000000000051d8 TNAM2
             forth.s:3946   .text:00000000000051e8 _DOTID
             forth.s:3946   .text:00000000000051ec $t
             forth.s:3946   .text:00000000000051ec DOTID
             forth.s:3948   .text:00000000000051f0 $d
ARM GAS  forth.s 			page 224


             forth.s:3955   .text:0000000000005214 DOTI1
             forth.s:3956   .text:0000000000005222 $t
             forth.s:3957   .text:0000000000005224 $d
             forth.s:3959   *ABS*:0000000000000000 WANT_SEE
             forth.s:4032   .text:000000000000522c _VLIST
             forth.s:4032   .text:0000000000005232 $t
             forth.s:4032   .text:0000000000005234 VLIST
             forth.s:4034   .text:0000000000005238 $d
             forth.s:4045   .text:0000000000005258 WORDS
             forth.s:4066   .text:000000000000529c WC
             forth.s:4045   .text:0000000000005250 _WORDS
             forth.s:4045   .text:0000000000005256 $t
             forth.s:4047   .text:000000000000525c $d
             forth.s:4050   .text:0000000000005268 WORS1
             forth.s:4059   .text:0000000000005290 WORS2
             forth.s:4066   .text:0000000000005298 _WC
             forth.s:4068   .text:00000000000052a0 $d
             forth.s:4085   .text:00000000000052dc _MARK
             forth.s:4085   .text:00000000000052e4 MARK
             forth.s:4087   .text:00000000000052e8 $d
             forth.s:4090   .text:00000000000052f4 $t
             forth.s:4091   .text:00000000000052f8 $d
             forth.s:4106   .text:0000000000005328 _ARRAY
             forth.s:4106   .text:000000000000532e $t
             forth.s:4106   .text:0000000000005330 ARRAY
             forth.s:4108   .text:0000000000005334 $d
             forth.s:4122   .text:0000000000005370 DO_ARRAY
             forth.s:4123   .text:0000000000005370 $t
             forth.s:4124   .text:0000000000005374 $d
             forth.s:4142   .text:0000000000005390 VERSN
             forth.s:4143   .text:0000000000005390 $t
             forth.s:4144   .text:0000000000005394 $d
             forth.s:4152   .text:00000000000053a4 _HI
             forth.s:4152   .text:00000000000053a8 HI
             forth.s:4154   .text:00000000000053ac $d
             forth.s:4155   .text:00000000000053c6 $t
             forth.s:4156   .text:00000000000053c8 $d
             forth.s:4180   .text:0000000000005414 $t
             forth.s:4181   .text:0000000000005418 $d
             forth.s:4193   .text:0000000000005434 PS2_QUERY
             forth.s:4194   .text:0000000000005434 $t
             forth.s:4195   .text:0000000000005438 $d
             forth.s:4209   .text:000000000000549e $t
             forth.s:4210   .text:00000000000054a0 $d
             forth.s:4220   .text:00000000000054ac IF_SENSE
             forth.s:4221   .text:00000000000054ac $t
             forth.s:4222   .text:00000000000054b0 $d
             forth.s:4236   .text:00000000000054e0 READY
             forth.s:4237   .text:00000000000054e0 $t
             forth.s:4238   .text:00000000000054e4 $d
             forth.s:4238   .text:00000000000054ee $t
             forth.s:4239   .text:00000000000054f0 $d
             forth.s:4257   .text:0000000000005518 COLD1
             forth.s:4258   .text:0000000000005518 $d
             forth.s:4273   .text:0000000000005568 COLD2
             forth.s:4276   .text:0000000000005568 $d
             forth.s:4279   .text:000000000000556c $d
ARM GAS  forth.s 			page 225


              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:266    .text:0000000000000203 $d
              init.s:271    .text:0000000000000213 $d
              init.s:281    .text:000000000000022b $d
              init.s:292    .text:0000000000000237 $d
              init.s:292    .text:0000000000000238 $t
              init.s:320    .text:00000000000002a3 $d
              init.s:445    .text:0000000000000469 $d
              init.s:445    .text:000000000000046a $t
          ser-term.s:90     .text:00000000000008fb $d
          ser-term.s:90     .text:00000000000008fc $t
          ser-term.s:110    .text:0000000000000935 $d
          ser-term.s:110    .text:0000000000000936 $t
          ser-term.s:133    .text:0000000000000973 $d
          ser-term.s:133    .text:0000000000000974 $t
          ser-term.s:164    .text:00000000000009bb $d
          ser-term.s:164    .text:00000000000009bc $t
          ser-term.s:191    .text:0000000000000a31 $d
          ser-term.s:191    .text:0000000000000a32 $t
          ser-term.s:203    .text:0000000000000a5f $d
          ser-term.s:203    .text:0000000000000a60 $t
             tvout.s:264    .text:0000000000000cab $d
             tvout.s:264    .text:0000000000000cac $t
             tvout.s:278    .text:0000000000000cdf $d
             tvout.s:278    .text:0000000000000ce0 $t
             tvout.s:306    .text:0000000000000d39 $d
             tvout.s:306    .text:0000000000000d3a $t
             tvout.s:325    .text:0000000000000d67 $d
             tvout.s:325    .text:0000000000000d68 $t
             tvout.s:427    .text:0000000000000ea1 $d
             tvout.s:427    .text:0000000000000ea2 $t
             tvout.s:448    .text:0000000000000efb $d
             tvout.s:448    .text:0000000000000efc $t
             tvout.s:495    .text:0000000000000f91 $d
             tvout.s:495    .text:0000000000000f92 $t
           ps2_kbd.s:307    .text:000000000000167f $d
           ps2_kbd.s:307    .text:0000000000001680 $t
           ps2_kbd.s:396    .text:000000000000177b $d
           ps2_kbd.s:396    .text:000000000000177c $t
           ps2_kbd.s:616    .text:0000000000001a1d $d
           ps2_kbd.s:616    .text:0000000000001a1e $t
           ps2_kbd.s:633    .text:0000000000001a57 $d
           ps2_kbd.s:633    .text:0000000000001a58 $t
         spi-flash.s:85     .text:0000000000001b43 $d
         spi-flash.s:85     .text:0000000000001b44 $t
         spi-flash.s:151    .text:0000000000001c0f $d
         spi-flash.s:151    .text:0000000000001c10 $t
         spi-flash.s:238    .text:0000000000001d53 $d
         spi-flash.s:238    .text:0000000000001d54 $t
         spi-flash.s:256    .text:0000000000001d8f $d
         spi-flash.s:256    .text:0000000000001d90 $t
         spi-flash.s:278    .text:0000000000001de3 $d
         spi-flash.s:278    .text:0000000000001de4 $t
         spi-flash.s:325    .text:0000000000001e63 $d
         spi-flash.s:325    .text:0000000000001e64 $t
         spi-flash.s:343    .text:0000000000001e85 $d
ARM GAS  forth.s 			page 226


         spi-flash.s:343    .text:0000000000001e86 $t
         spi-flash.s:352    .text:0000000000001e99 $d
         spi-flash.s:352    .text:0000000000001e9a $t
               fpu.s:201    .text:0000000000002043 $d
               fpu.s:201    .text:0000000000002044 $t
               fpu.s:214    .text:0000000000002063 $d
               fpu.s:214    .text:0000000000002064 $t
               fpu.s:228    .text:0000000000002083 $d
               fpu.s:228    .text:0000000000002084 $t
               fpu.s:241    .text:00000000000020a3 $d
               fpu.s:241    .text:00000000000020a4 $t
               fpu.s:264    .text:00000000000020e1 $d
               fpu.s:264    .text:00000000000020e2 $t
               fpu.s:276    .text:0000000000002101 $d
               fpu.s:276    .text:0000000000002102 $t
               fpu.s:298    .text:000000000000213b $d
               fpu.s:298    .text:000000000000213c $t
               fpu.s:309    .text:0000000000002157 $d
               fpu.s:309    .text:0000000000002158 $t
               fpu.s:319    .text:0000000000002171 $d
               fpu.s:319    .text:0000000000002172 $t
               fpu.s:332    .text:00000000000021a1 $d
               fpu.s:332    .text:00000000000021a2 $t
               fpu.s:358    .text:00000000000021f1 $d
               fpu.s:358    .text:00000000000021f2 $t
               fpu.s:382    .text:0000000000002239 $d
               fpu.s:382    .text:000000000000223a $t
               fpu.s:391    .text:0000000000002253 $d
               fpu.s:391    .text:0000000000002254 $t
               fpu.s:421    .text:00000000000022ab $d
               fpu.s:421    .text:00000000000022ac $t
            strtof.s:204    .text:00000000000024bb $d
            strtof.s:204    .text:00000000000024bc $t
              ftoa.s:325    .text:00000000000029af $d
              ftoa.s:325    .text:00000000000029b0 $t
             forth.s:132    .text:0000000000002a6d $d
             forth.s:132    .text:0000000000002a6e $t
             forth.s:144    .text:0000000000002a91 $d
             forth.s:144    .text:0000000000002a92 $t
             forth.s:156    .text:0000000000002ab3 $d
             forth.s:156    .text:0000000000002ab4 $t
             forth.s:178    .text:0000000000002aed $d
             forth.s:178    .text:0000000000002aee $t
             forth.s:214    .text:0000000000002b0b $d
             forth.s:214    .text:0000000000002b0c $t
             forth.s:261    .text:0000000000002bb9 $d
             forth.s:261    .text:0000000000002bba $t
             forth.s:356    .text:0000000000002c49 $d
             forth.s:356    .text:0000000000002c4a $t
             forth.s:381    .text:0000000000002c77 $d
             forth.s:381    .text:0000000000002c78 $t
             forth.s:391    .text:0000000000002c8b $d
             forth.s:391    .text:0000000000002c8c $t
             forth.s:400    .text:0000000000002c97 $d
             forth.s:400    .text:0000000000002c98 $t
             forth.s:420    .text:0000000000002cc5 $d
             forth.s:420    .text:0000000000002cc6 $t
ARM GAS  forth.s 			page 227


             forth.s:429    .text:0000000000002cd9 $d
             forth.s:429    .text:0000000000002cda $t
             forth.s:486    .text:0000000000002d4d $d
             forth.s:486    .text:0000000000002d4e $t
             forth.s:502    .text:0000000000002d6f $d
             forth.s:502    .text:0000000000002d70 $t
             forth.s:512    .text:0000000000002d81 $d
             forth.s:512    .text:0000000000002d82 $t
             forth.s:521    .text:0000000000002d93 $d
             forth.s:521    .text:0000000000002d94 $t
             forth.s:538    .text:0000000000002db5 $d
             forth.s:538    .text:0000000000002db6 $t
             forth.s:568    .text:0000000000002dfb $d
             forth.s:568    .text:0000000000002dfc $t
             forth.s:577    .text:0000000000002e11 $d
             forth.s:577    .text:0000000000002e12 $t
             forth.s:625    .text:0000000000002e6b $d
             forth.s:625    .text:0000000000002e6c $t
             forth.s:636    .text:0000000000002e7f $d
             forth.s:636    .text:0000000000002e80 $t
             forth.s:644    .text:0000000000002e8d $d
             forth.s:644    .text:0000000000002e8e $t
             forth.s:652    .text:0000000000002e9d $d
             forth.s:652    .text:0000000000002e9e $t
             forth.s:660    .text:0000000000002ead $d
             forth.s:660    .text:0000000000002eae $t
             forth.s:684    .text:0000000000002edd $d
             forth.s:684    .text:0000000000002ede $t
             forth.s:709    .text:0000000000002f11 $d
             forth.s:709    .text:0000000000002f12 $t
             forth.s:717    .text:0000000000002f21 $d
             forth.s:717    .text:0000000000002f22 $t
             forth.s:725    .text:0000000000002f33 $d
             forth.s:725    .text:0000000000002f34 $t
             forth.s:746    .text:0000000000002f5b $d
             forth.s:746    .text:0000000000002f5c $t
             forth.s:775    .text:0000000000002f97 $d
             forth.s:775    .text:0000000000002f98 $t
             forth.s:785    .text:0000000000002fab $d
             forth.s:785    .text:0000000000002fac $t
             forth.s:798    .text:0000000000002fc9 $d
             forth.s:798    .text:0000000000002fca $t
             forth.s:851    .text:0000000000003041 $d
             forth.s:851    .text:0000000000003042 $t
             forth.s:892    .text:0000000000003097 $d
             forth.s:892    .text:0000000000003098 $t
             forth.s:915    .text:00000000000030c3 $d
             forth.s:915    .text:00000000000030c4 $t
             forth.s:928    .text:00000000000030e3 $d
             forth.s:928    .text:00000000000030e4 $t
             forth.s:952    .text:0000000000003113 $d
             forth.s:952    .text:0000000000003114 $t
             forth.s:998    .text:000000000000316b $d
             forth.s:998    .text:000000000000316c $t
             forth.s:1010   .text:0000000000003183 $d
             forth.s:1010   .text:0000000000003184 $t
             forth.s:1022   .text:000000000000319f $d
ARM GAS  forth.s 			page 228


             forth.s:1022   .text:00000000000031a0 $t
             forth.s:1083   .text:00000000000031fb $d
             forth.s:1083   .text:00000000000031fc $t
             forth.s:1092   .text:000000000000320f $d
             forth.s:1092   .text:0000000000003210 $t
             forth.s:1119   .text:0000000000003251 $d
             forth.s:1119   .text:0000000000003252 $t
             forth.s:1138   .text:0000000000003275 $d
             forth.s:1138   .text:0000000000003276 $t
             forth.s:1157   .text:00000000000032a1 $d
             forth.s:1157   .text:00000000000032a2 $t
             forth.s:1197   .text:00000000000032fb $d
             forth.s:1197   .text:00000000000032fc $t
             forth.s:1217   .text:0000000000003325 $d
             forth.s:1217   .text:0000000000003326 $t
             forth.s:1231   .text:0000000000003343 $d
             forth.s:1231   .text:0000000000003344 $t
             forth.s:1242   .text:0000000000003361 $d
             forth.s:1242   .text:0000000000003362 $t
             forth.s:1259   .text:000000000000337f $d
             forth.s:1259   .text:0000000000003380 $t
             forth.s:1276   .text:00000000000033ab $d
             forth.s:1276   .text:00000000000033ac $t
             forth.s:1411   .text:00000000000034f7 $d
             forth.s:1411   .text:00000000000034f8 $t
             forth.s:1433   .text:0000000000003543 $d
             forth.s:1433   .text:0000000000003544 $t
             forth.s:1482   .text:0000000000003583 $d
             forth.s:1482   .text:0000000000003584 $t
             forth.s:1533   .text:00000000000035fb $d
             forth.s:1533   .text:00000000000035fc $t
             forth.s:1592   .text:00000000000036a5 $d
             forth.s:1592   .text:00000000000036a6 $t
             forth.s:1610   .text:00000000000036cd $d
             forth.s:1610   .text:00000000000036ce $t
             forth.s:1644   .text:000000000000371f $d
             forth.s:1644   .text:0000000000003720 $t
             forth.s:1677   .text:000000000000376d $d
             forth.s:1677   .text:000000000000376e $t
             forth.s:1709   .text:00000000000037b5 $d
             forth.s:1709   .text:00000000000037b6 $t
             forth.s:1787   .text:0000000000003897 $d
             forth.s:1787   .text:0000000000003898 $t
             forth.s:1799   .text:00000000000038b5 $d
             forth.s:1799   .text:00000000000038b6 $t
             forth.s:1831   .text:0000000000003903 $d
             forth.s:1831   .text:0000000000003904 $t
             forth.s:1849   .text:0000000000003935 $d
             forth.s:1849   .text:0000000000003936 $t
             forth.s:1863   .text:000000000000395f $d
             forth.s:1863   .text:0000000000003960 $t
             forth.s:1941   .text:0000000000003a1b $d
             forth.s:1941   .text:0000000000003a1c $t
             forth.s:2044   .text:0000000000003b5f $d
             forth.s:2044   .text:0000000000003b60 $t
             forth.s:2128   .text:0000000000003c8f $d
             forth.s:2128   .text:0000000000003c90 $t
ARM GAS  forth.s 			page 229


             forth.s:2145   .text:0000000000003cc5 $d
             forth.s:2145   .text:0000000000003cc6 $t
             forth.s:2163   .text:0000000000003cfb $d
             forth.s:2163   .text:0000000000003cfc $t
             forth.s:2233   .text:0000000000003d7b $d
             forth.s:2233   .text:0000000000003d7c $t
             forth.s:2271   .text:0000000000003de7 $d
             forth.s:2271   .text:0000000000003de8 $t
             forth.s:2306   .text:0000000000003e4f $d
             forth.s:2306   .text:0000000000003e50 $t
             forth.s:2326   .text:0000000000003e87 $d
             forth.s:2326   .text:0000000000003e88 $t
             forth.s:2468   .text:000000000000405f $d
             forth.s:2468   .text:0000000000004060 $t
             forth.s:2507   .text:00000000000040c1 $d
             forth.s:2507   .text:00000000000040c2 $t
             forth.s:2519   .text:00000000000040e7 $d
             forth.s:2519   .text:00000000000040e8 $t
             forth.s:2530   .text:0000000000004101 $d
             forth.s:2530   .text:0000000000004102 $t
             forth.s:2813   .text:000000000000446f $d
             forth.s:2813   .text:0000000000004470 $t
             forth.s:2905   .text:0000000000004583 $d
             forth.s:2905   .text:0000000000004584 $t
             forth.s:2956   .text:000000000000463b $d
             forth.s:2956   .text:000000000000463c $t
             forth.s:2968   .text:0000000000004665 $d
             forth.s:2968   .text:0000000000004666 $t
             forth.s:2989   .text:00000000000046ab $d
             forth.s:2989   .text:00000000000046ac $t
             forth.s:3001   .text:00000000000046c9 $d
             forth.s:3001   .text:00000000000046ca $t
             forth.s:3016   .text:00000000000046f7 $d
             forth.s:3016   .text:00000000000046f8 $t
             forth.s:3164   .text:0000000000004887 $d
             forth.s:3164   .text:0000000000004888 $t
             forth.s:3214   .text:000000000000492d $d
             forth.s:3214   .text:000000000000492e $t
             forth.s:3238   .text:0000000000004969 $d
             forth.s:3238   .text:000000000000496a $t
             forth.s:3289   .text:00000000000049fb $d
             forth.s:3289   .text:00000000000049fc $t
             forth.s:3317   .text:0000000000004a63 $d
             forth.s:3317   .text:0000000000004a64 $t
             forth.s:3330   .text:0000000000004a85 $d
             forth.s:3330   .text:0000000000004a86 $t
             forth.s:3357   .text:0000000000004ac5 $d
             forth.s:3357   .text:0000000000004ac6 $t
             forth.s:3380   .text:0000000000004b03 $d
             forth.s:3380   .text:0000000000004b04 $t
             forth.s:3391   .text:0000000000004b23 $d
             forth.s:3391   .text:0000000000004b24 $t
             forth.s:3403   .text:0000000000004b43 $d
             forth.s:3403   .text:0000000000004b44 $t
             forth.s:3468   .text:0000000000004c01 $d
             forth.s:3468   .text:0000000000004c02 $t
             forth.s:3601   .text:0000000000004d71 $d
ARM GAS  forth.s 			page 230


             forth.s:3601   .text:0000000000004d72 $t
             forth.s:3655   .text:0000000000004e17 $d
             forth.s:3655   .text:0000000000004e18 $t
             forth.s:3667   .text:0000000000004e3b $d
             forth.s:3667   .text:0000000000004e3c $t
             forth.s:3703   .text:0000000000004eb3 $d
             forth.s:3703   .text:0000000000004eb4 $t
             forth.s:3718   .text:0000000000004ee5 $d
             forth.s:3718   .text:0000000000004ee6 $t
             forth.s:3764   .text:0000000000004f5d $d
             forth.s:3764   .text:0000000000004f5e $t
             forth.s:3848   .text:0000000000005093 $d
             forth.s:3848   .text:0000000000005094 $t
             forth.s:4066   .text:000000000000529b $d
             forth.s:4066   .text:000000000000529c $t
             forth.s:4085   .text:00000000000052e1 $d
             forth.s:4085   .text:00000000000052e2 $t
             forth.s:4152   .text:00000000000053a7 $d
             forth.s:4152   .text:00000000000053a8 $t
             forth.s:4251   .text:0000000000005501 $d
             forth.s:4251   .text:0000000000005502 $t

UNDEFINED SYMBOLS
_mstack
