ARM GAS  forth.s 			page 1


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	   Hardware initialization
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu vfpv4
  27              	  .thumb
  28              	
  29              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
ARM GAS  forth.s 			page 2


  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
ARM GAS  forth.s 			page 3


  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	   /* GPIO mode and type */
 116              	   .equ INP,(0) // input mode 
 117              	   .equ GPO,(1)   // general purpose output
 118              	   .equ AFO,(2)   // alternate fucntion 
 119              	   .equ ANA,(3)   // analog mode 
 120              	   .equ PP,(0)    // push pull output 
 121              	   .equ OD,(1)    // open drain output 
 122              	   // output, low nibble mode, high nibble type 
 123              	   .equ OUTPUT_PP,(PP<<4)+GPO 
 124              	   .equ OUTPUT_OD,(OD<<4)+GPO 
 125              	   .equ OUTPUT_AFPP,(PP<<4)+AFO
 126              	   .equ OUTPUT_AFOD,(OD<<4)+AFO 
 127              	   // input high nibble pull mode, low input type  
 128              	   .equ FLOAT,(0)
 129              	   .equ PULLUP,(1)
 130              	   .equ PULLDOWN,(2)
 131              	   .equ INPUT_ANA,(FLOAT<<4)+ANA     
 132              	   .equ INPUT_FLOAT,(FLOAT<<4)+INP
 133              	   .equ INPUT_PD,(PULLDOWN<<4)+INP
 134              	   .equ INPUT_PU,(PULLUP<<4)+INP 
 135              	   .EQU INPUT_AFO,AFO
 136              	    /* USART1 registers */
 137              	    .equ USART1_BASE_ADR, 0x40011000
 138              	    /* USARTx registers offset */
 139              	    .equ USART_SR, 0
 140              	    .equ USART_DR,4
 141              	    .equ USART_BRR,8
 142              	    .equ USART_CR1,12
ARM GAS  forth.s 			page 4


 143              	    .equ USART_CR2,16
 144              	    .equ USART_CR3,20
 145              	    .equ USART_GTPR,24
 146              	
 147              	   /* systick */
 148              	    .equ STK_BASE_ADR, 0xE000E010
 149              	    /* registers offset */
 150              	    .equ STK_CTL, 0
 151              	    .equ STK_LOAD, 4
 152              	    .equ STK_VAL, 8
 153              	    .equ STK_CALIB, 12
 154              	
 155              	   /* system control block */
 156              	   .equ SCB_BASE_ADR, 0xE000ED00
 157              	   /* registers offset */
 158              	   .equ SCB_CPUID, 0
 159              	   .equ SCB_ICSR, 0x4 
 160              	   .equ SCB_VTOR, 0x8
 161              	   .equ SCB_AIRCR, 0xc
 162              	   .equ SCB_SCR, 0x10
 163              	   .equ SCB_CCR, 0x14
 164              	   .equ SCB_SHPR1,0x18
 165              	   .equ SCB_SHPR2,0x1c
 166              	   .equ SCB_SHPR3,0x20
 167              	   .equ SCB_SHCSR,0x24
 168              	   .equ SCB_CFSR,0x28
 169              	   .equ SCB_MMSR,0x28
 170              	   .equ SCB_BFSR,0x29
 171              	   .equ SCB_UFSR,0x2a
 172              	   .equ SCB_HFSR,0x2c
 173              	   .equ SCB_MMAR,0x34
 174              	   .equ SCB_BFAR,0x38
 175              	   .equ SCB_AFSR,0x3c
 176              	   // key to to write in SCB_AIRCR 
 177              	   .equ SCB_VECTKEY,0x5fa 
 178              	
 179              	   // coprocessor control space 
 180              	   .equ CPACR, 0xE000ED88
 181              	   .equ FPC_BASE_ADR, 0xE000EF34
 182              	   .equ FPCCR, 0 
 183              	   .EQU FPCAR, 4 
 184              	   .EQU FPDSCR,8
 185              	   .equ MVFR0, 0xC 
 186              	   .EQU MVFR1, 0x10
 187              	   .EQU MVFR2, 0x14
 188              	
 189              	   /* NVIC block */
 190              	   .equ NVIC_BASE_ADR, 0xE000E000
 191              	   .equ NVIC_ISER0, 0x100
 192              	   .equ NVIC_ISER1, 0x104
 193              	   .equ NVIC_ISER2, 0x108
 194              	   .equ NVIC_ISER3, 0x10c
 195              	   .equ NVIC_ISER4, 0x110
 196              	   .equ NVIC_ISER5, 0x114
 197              	   .equ NVIC_ISER6, 0x118
 198              	   .equ NVIC_ISER7, 0x11c
 199              	   .equ NVIC_ICER0, 0x180
ARM GAS  forth.s 			page 5


 200              	   .equ NVIC_ICER1, 0x184 
 201              	   .equ NVIC_ICER2, 0x188 
 202              	   .equ NVIC_ICER3, 0x18C 
 203              	   .equ NVIC_ICER4, 0x190 
 204              	   .equ NVIC_ICER5, 0x194 
 205              	   .equ NVIC_ICER6, 0x198 
 206              	   .equ NVIC_ICER7, 0x19C 
 207              	   .equ NVIC_ISPR0, 0x200
 208              	   .equ NVIC_ISPR1, 0x204
 209              	   .equ NVIC_ISPR2, 0x208 
 210              	   .equ NVIC_ISPR3, 0x20c 
 211              	   .equ NVIC_ISPR4, 0x210 
 212              	   .equ NVIC_ISPR5, 0x214 
 213              	   .equ NVIC_ISPR6, 0x218 
 214              	   .equ NVIC_ISPR7, 0x21c 
 215              	   .equ NVIC_ICPR0, 0x280
 216              	   .equ NVIC_ICPR1, 0x284
 217              	   .equ NVIC_ICPR2, 0x288
 218              	   .equ NVIC_ICPR3, 0x28c
 219              	   .equ NVIC_ICPR4, 0x290
 220              	   .equ NVIC_ICPR5, 0x294
 221              	   .equ NVIC_ICPR6, 0x298
 222              	   .equ NVIC_ICPR7, 0x29c
 223              	   .equ NVIC_IABR0, 0x300
 224              	   .equ NVIC_IABR1, 0x304
 225              	   .equ NVIC_IABR2, 0x308
 226              	   .equ NVIC_IABR3, 0x30c
 227              	   .equ NVIC_IABR4, 0x310
 228              	   .equ NVIC_IABR5, 0x314
 229              	   .equ NVIC_IABR6, 0x318
 230              	   .equ NVIC_IABR7, 0x31c
 231              	/*  NVIC_IPR0 - NVIC_IPR59 */
 232              	   .equ NVIC_IPR_BASE, 0xE000E400 
 233              	
 234              	/*  IRQ number */
 235              	   .equ NMI_IRQ, (-14) // non maskable
 236              	   .equ HF_IRQ, (-13)  // hard fault
 237              	   .equ MM_IRQ, (-12)  // memory Management
 238              	   .equ BF_IRQ, (-11)  // bus fault 
 239              	   .equ UF_IRQ, (-10)  // usage fault 
 240              	   .equ SVC_IRQ, (-5)  // service call 
 241              	   .equ DM_IRQ, (-4)  // debug monitor
 242              	   .equ PSV_IRQ, (-2) // pending service 
 243              	   .equ STCK_IRQ, (-1) // systick 
 244              	   .equ WWDG_IRQ, (0) // window watchdog 
 245              	   .equ EXTI16_IRQ, (1) // external interrupt line 16
 246              	   .equ EXTI21_IRQ, (2) // external interrupt line 21
 247              	   .equ EXTI22_IRQ, (3) // external interrupt line 22
 248              	   .equ FLASH_IRQ, (4) // flash global 
 249              	   .equ RCC_IRQ, (5)  // real time clock 
 250              	   .equ EXTI0_IRQ, (6) // 
 251              	   .equ EXTI1_IRQ, (7)
 252              	   .equ EXTI2_IRQ, (8)
 253              	   .equ EXTI3_IRQ, (9)
 254              	   .equ EXTI4_IRQ, (10)
 255              	   .equ DMA1S0_IRQ, (11) // DMA1 stream 0 
 256              	   .equ DMA1S1_IRQ, (12)
ARM GAS  forth.s 			page 6


 257              	   .equ DMA1S2_IRQ, (13)
 258              	   .equ DMA1S3_IRQ, (14)
 259              	   .equ DMA1S4_IRQ, (15)
 260              	   .equ DMA1S5_IRQ, (16)
 261              	   .equ DMA1S6_IRQ, (17)
 262              	   .equ ADC_IRQ, (18)
 263              	   .equ EXTI9_5_IRQ, (23)
 264              	   .equ TIM1BRK_IRQ, (24) // TIMER1 BREAK 
 265              	   .equ TIM1UP_IRQ, (25) // TIMER1 Update
 266              	   .equ TIM1TRG_IRQ, (26) // TIMER1 trigger & commutation 
 267              	   .equ TIM1CC_IRQ, (27) // TIMER1 capture compare 
 268              	   .equ TIM2_IRQ, (28) // TIMER2 global 
 269              	   .equ TIM3_IRQ, (29) // TIMER3  global 
 270              	   .equ TIM4_IRQ, (30) // TIMER4 global
 271              	   .equ I2C1EV_IRQ, (31) // i2c1 event 
 272              	   .equ I2C1ER_IRQ, (32) // i2c1 error 
 273              	   .equ I2C2EV_IRQ, (33) // i2c2 event 
 274              	   .equ I2C2ER_IRQ, (34) // i2c2 error 
 275              	   .equ SPI1_IRQ, (35)  // SPI1 global 
 276              	   .equ SPI2_IRQ, (36)  // SPI2 global
 277              	   .equ USART1_IRQ, (37) // USART1 global
 278              	   .equ USART2_IRQ, (38) // USART2 global
 279              	   .equ EXTI15_10_IRQ, (40) // external interrupt lines 10,15
 280              	   .equ EXTI17_IRQ, (41)
 281              	   .equ EXTI18_IRQ, (42) // exti and OTG_FS_WKUP
 282              	   .equ DMA1S7_IRQ, (47) // DMA1 stream 7
 283              	   .equ SDIO_IRQ, (49) // SDIO global
 284              	   .equ TIM5_IRQ, (50) // TIMER5 global 
 285              	   .equ SPI3_IRQ, (51)
 286              	   .equ DMA2S0_IRQ, (56) // DMA2 stream 0 
 287              	   .equ DMA2S1_IRQ, (57) 
 288              	   .equ DMAS2_IRQ, (58)
 289              	   .equ DMAS3_IRQ, (59)
 290              	   .equ DMAS4_IRQ, (60)
 291              	   .equ OTG_FS_IRQ, (67)
 292              	   .equ DMA2S5_IRQ, (68)
 293              	   .equ DMA2S6_IRQ, (69)
 294              	   .equ DMA2S7_IRQ, (70)
 295              	   .equ USART6_IRQ, (71)
 296              	   .equ I2C3EV_IRQ, (72)
 297              	   .equ I2C3ER_IRQ, (73)
 298              	   .equ FPU_IRQ, (81) // FPU global
 299              	   .equ SPI4_IRQ, (84)
 300              	   .equ SPI5_IRQ, (85)
 301              	   
 302              	
 303              	/* TIMERS registers */
 304              	.equ TIM1_BASE_ADR,0x40010000
 305              	.equ TIM9_BASE_ADR,0x40010400
 306              	.equ TIM10_BASE_ADR,0x40010800
 307              	.equ TIM11_BASE_ADR,0x40010C00
 308              	
 309              	.equ TIM2_BASE_ADR,0x40000000
 310              	.equ TIM3_BASE_ADR,0x40000400
 311              	.equ TIM4_BASE_ADR,0x40000800
 312              	.equ TIM5_BASE_ADR,0x40000C00
 313              	
ARM GAS  forth.s 			page 7


 314              	/* TIMER1 */
 315              	.equ TIM1_RCR,48 
 316              	.equ TIM1_BDTR,68 
 317              	
 318              	/* TIMER2..TIMER5 */
 319              	.equ TIM_CR1,0
 320              	.equ TIM_CR2,4
 321              	.equ TIM_SMCR,8
 322              	.equ TIM_DIER,12
 323              	.equ TIM_SR,16
 324              	.equ TIM_EGR,20
 325              	.equ TIM_CCMR1,24
 326              	.equ TIM_CCMR2,28
 327              	.equ TIM_CCER,32
 328              	.equ TIM_CNT,36
 329              	.equ TIM_PSC,40
 330              	.equ TIM_ARR,44
 331              	.equ TIM_CCR1,52
 332              	.equ TIM_CCR2,56
 333              	.equ TIM_CCR3,60
 334              	.equ TIM_CCR4,64
 335              	.equ TIM_DCR,72
 336              	.equ TIM_DMAR,76
 337              	.equ TIM2_OR,80
 338              	.equ TIM5_OR,80 
 339              	
 340              	/* SYSCFG registers */
 341              	.equ SYSCFG_BASE_ADR, 0x40013800
 342              	
 343              	.equ SYSCFG_MEMRMP,0
 344              	.equ SYSCFG_PMC,4
 345              	.equ SYSCFG_EXTICR1,8
 346              	.equ SYSCFG_EXTICR2,12
 347              	.equ SYSCFG_EXTICR3,16
 348              	.equ SYSCFG_EXTICR4,20
 349              	.equ SYSCFG_CMPCR,32
 350              	
 351              	/* EXTI registers */
 352              	.equ EXTI_BASE_ADR, 0x40013C00
 353              	
 354              	.equ EXTI_IMR,0
 355              	.equ EXTI_EMR,4
 356              	.equ EXTI_RTSR,8
 357              	.equ EXTI_FTSR,12
 358              	.equ EXTI_SWIER,16
 359              	.equ EXTI_PR,20
 360              	
 361              	/* SPI registers */
 362              	SPI1_BASE_ADR = 0x40013000 
 363              	SPI2_BASE_ADR = 0x40003800
 364              	SPI3_BASE_ADR = 0x40003C00
 365              	SPI4_BASE_ADR = 0x40013400
 366              	
 367              	SPI_CR1 = 0
 368              	SPI_CR2 = 4
 369              	SPI_SR = 8
 370              	SPI_DR = 12 
ARM GAS  forth.s 			page 8


 371              	SPI_CRCPR = 16 
 372              	SPI_RXCRCR = 20 
 373              	SPI_TXCRCR = 24
 374              	SPI_I2SCFGR = 28  
 375              	SPI_I2SPR = 32 
 376              	
  30              	  .include "macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	/********************
  21              	* Version control
  22              	*******************/
  23              	.equ VER ,	0x01	/*major release version */
  24              	.equ EXT ,	0x00	/*minor extension */
  25              	
  26              	
  27              		/* registers alias */
  28              	    T0		.req	r0 	// temporary register 
  29              	    T1		.req	r1  // temporary register 
  30              	    T2		.req	r2  // temporary register  
  31              	    T3		.req    r3  // temporary register 
  32              	    UP		.req	r4  // user variables pointer 
  33              	    WP		.req    r5  // working register 
  34              		TOS		.req	r6  // top of data stack 
  35              	    DSP		.req	r7 	// data stack pointer 
  36              	    RSP		.req	r8	// return stack pointer 
  37              		INX 	.req    r10 // INEXT  address 
  38              	//	IP		.req	r12	// VM instruction pointer  
  39              	
  40              	
  41              	/* beyond Jupiter specific constants */ 
  42              	  .equ LED_GPIO, GPIOC_BASE_ADR
  43              	  .equ LED_PIN, 13
  44              	  .equ UART, USART1_BASE_ADR 
  45              	
  46              	/* Forth specific constants */
  47              	// exception stack is at RAM_END and reserve 128 bytes 
  48              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) reserve 128 bytes growing down */
  49              		.equ TIBB ,	RPP-208	/*terminal input buffer (TIB) reserve 80 bytes */
  50              		.equ TIB_SIZE, 80  // 80 bytes,  input transaction buffer size. 
ARM GAS  forth.s 			page 9


  51              		.equ SPP ,	RPP-208	/*top of data stack (SP0) groing down */
  52              		.equ VID_BUFF, SPP-128-32000 /* video buffer */
  53              		.equ BLK_BUFFS, VID_BUFF-4096 /* reserve 4K for blocks buffers */ 
  54              		.equ UPP ,	RAM_ADR	 /* start of user area (UP0) */
  55              		.equ DTOP,  RAM_ADR+0x512 
  56              		.equ DEND , BLK_BUFFS-4  /*usable RAM end */
  57              	    .equ MAPOFFSET, RAM_ADR-0x8000200
  58              	
  59              		.equ COMPO ,	0x040	/*lexicon compile only */ 
  60              		.equ IMEDD ,	0x080	/*lexicon immediate bit */
  61              		.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
  62              	
  63              		.equ CELLL ,	4	/*size of a cell */
  64              		.equ BASEE ,	10	/*default radix */
  65              		.equ VOCSS ,	8	/*depth of vocabulary stack */
  66              	
  67              		.equ BKSPP ,	8	/*backspace */
  68              		.equ LF ,	10	  /*line feed */
  69              		.equ CRR ,	13	/*carriage return */
  70              		.equ ERR ,	27	/*error escape */
  71              		.equ TIC ,	39	/*tick */
  72              	
  73              	/*************************************
  74              	   system variables offset from UPP
  75              	*************************************/
  76              	  .equ RNDSEED, 4    // prng seed 
  77              	  .equ TICKS, RNDSEED+4  // millseconds counter
  78              	  .equ CD_TIMER, TICKS+4  // count down timer
  79              	  .equ BOOT, CD_TIMER+4  // boot program address
  80              	  .equ STDIN, BOOT+4   //character ouput device 
  81              	  .equ STDOUT, STDIN+4 // character input device 
  82              	  .equ NBASE, STDOUT+4  // numeric conversion base 
  83              	  .equ BCHAR, NBASE+4   // display base character flag 
  84              	  .equ TMP, BCHAR+4   // temporary variable
  85              	  .equ CSPAN, TMP+4  // character count received by expect  
  86              	  .equ TOIN, CSPAN+4  // >IN  parse pointer in TIB
  87              	  .equ SRC, TOIN+4    // SOURCE 
  88              	  .equ NTIBB, SRC  // #TIB  characters in TIB 
  89              	  .equ TIBUF, SRC+4   // TIB buffer address 
  90              	  .equ SRCID, TIBUF+4  // evaluation source string or user interface
  91              	  .equ EVAL, SRCID+4  // eval|compile vector 
  92              	  .equ VHOLD, EVAL+4   // hold pointer 
  93              	  .equ CTXT, VHOLD+4  // context pointer 
  94              	  .equ FORTH_CTOP, CTXT+4  // flash free dictionary address 
  95              	  .equ USER_CTOP, FORTH_CTOP+4  // ram free dictionary address
  96              	  .equ LASTN, USER_CTOP+4     // last word in dictionary link nfa 
  97              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
  98              	  .equ RX_QUEUE, LASTN+4 // rx queue 
  99              	  .equ RX_HEAD, RX_QUEUE+RX_QUEUE_SIZE // queue head indice 
 100              	  .equ RX_TAIL, RX_HEAD+4 // queue tail indice 
 101              	  .equ VID_CNTR, RX_TAIL+4 // video line counter 
 102              	  .equ VID_STATE, VID_CNTR+4 // video field,ODD=0,EVEN=1 
 103              	  .equ VID_FIELD, VID_STATE+4 // VSYNC,PRE_VID,VID,POST_VID 
 104              	  .equ VID_BUFFER, VID_FIELD+4 // video buffer address 
 105              	  .equ KBD_STRUCT, VID_BUFFER+4 // keyboard structure 
 106              	  .equ KBD_QUEUE_SIZE, 16 
 107              	  .equ KBD_QUEUE, KBD_STRUCT+4 
ARM GAS  forth.s 			page 10


 108              	  .equ KBD_QHEAD,KBD_QUEUE+KBD_QUEUE_SIZE 
 109              	  .equ KBD_QTAIL,KBD_QHEAD+4
 110              	  .equ ROW,KBD_QTAIL+4 
 111              	  .equ COL,ROW+4 
 112              	  .equ BK_COLOR,COL+4 
 113              	  .equ PEN_COLOR,BK_COLOR+4
 114              	  .equ VFPSW, PEN_COLOR+4 
 115              	  .equ VFBASE, VFPSW+4 
 116              	  .equ BEEP_DTMR, VFBASE+4 // BEEP duration timer 
 117              	  .equ CSTATE, BEEP_DTMR+4 // compilation state 
 118              	// BLOCK words extension 
 119              	   .equ BLKID, CSTATE+4  // active block number  
 120              	   .equ BLKN, BLKID+4    // array block#[4]
 121              	   .equ BLKB, BLKN+16    // block buffers base address 
 122              	   .equ SRCID, BLKB+4 
 123              	
 124              	
 125              	/***********************************************
 126              	* MACROS
 127              	*	Assemble inline direct threaded code ending.
 128              	***********************************************/
 129              		.macro _CALL fn /* low level routine call */ 
 130              	 	PUSH {LR}
 131              		BL \fn  
 132              		POP {LR}
 133              		.endm
 134              		
 135              		.macro _RET /* exit sub-routine */ 
 136              		BX LR 
 137              		.endm 
 138              	
 139              		// dictionary header  
 140              		.macro _HEADER  label, nlen, name
 141              			.word LINK 
 142              			.equ LINK , . 
 143              		_\label: .byte \nlen    // name field
 144              			.ascii "\name"
 145              			.p2align 2 
 146              		\label:   // code field 
 147              		.endm 
 148              		
 149              	
 150              	// local function header 
 151              		.macro _FUNC label 
 152              		.section .text, "ax", %progbits 
 153              		.p2align 2 
 154              		.type \label, %function  
 155              		\label:
 156              		.endm 
 157              	
 158              	// global function header 
 159              		.macro _GBL_FUNC label 
 160              		.global \label 
 161              		_FUNC \label 
 162              		.endm 
 163              	
 164              	
ARM GAS  forth.s 			page 11


 165              	// load large constant to register 
 166              		.macro _MOV32 r, value 
 167              		mov \r,#(\value&0xffff)
 168              		movt \r,#(\value>>16)
 169              		.endm 
 170              	
 171              		.macro _NEXT /* direct jump INEXT */ 
 172              		B INEXT   
 173              		.endm 
 174              	
 175              	 	.macro	_NEST /*start high level word */
 176              		BX INX  
 177              		NOP.N 
 178              		.endm
 179              	
 180              		.macro _ADR label 
 181              		.word 1+\label  
 182              		.endm 
 183              	
 184              	 	.macro	_UNNEST	/*end high level word */
 185              		_ADR UNNEST 
 186              		.endm
 187              	
 188              	 	.macro	_DOLIT u /*long literals */
 189              		_ADR	DOLIT
 190              		.word	\u 
 191              		.endm
 192              	
 193              		.macro _DOTQP len, text 
 194              		_ADR DOTQP 
 195              		.byte \len 
 196              		.ascii "\text" 
 197              		.p2align 2 
 198              		.endm
 199              	
 200              		// POSTPONE COMPILE 
 201              		.macro _COMPI name 
 202              		_DOLIT	\name + 1
 203              		_ADR	COMMA 
 204              		.endm 
 205              	
 206              		.macro _ABORQ len,name 
 207              		_ADR ABORQ 
 208              		.byte \len 
 209              		.ascii "\name"
 210              		.p2align 2 
 211              		.endm
 212              	
 213              		.macro _BRAN label 
 214              		_ADR BRAN 
 215              		.word \label 
 216              		.endm 
 217              	
 218              		.macro _QBRAN label 
 219              		_ADR QBRAN 
 220              		.word \label
 221              		.endm 
ARM GAS  forth.s 			page 12


 222              	
 223              		.macro _TBRAN label 
 224              		_ADR TBRAN 
 225              		.word \label 
 226              		.endm 
 227              	
 228              		.macro _DONXT label 
 229              		_ADR DONXT
 230              		.word \label 
 231              		.endm 
 232              	
 233              	 	.macro	_PUSH	/*push TOS on data stack*/
 234              		STR	TOS,[DSP,#-4]!
 235              		.endm
 236              	
 237              	 	.macro	_POP /*pop data stack to TOS */
 238              		LDR	TOS,[DSP],#4
 239              		.endm
 240              	
 241              		// calling a colon word 
 242              		// from a code word   
 243              		.macro _CALL_COLWORD target 
 244              	    ldr WP,=\target 
 245              		orr WP,#1
 246              		b \target  
 247              		.endm 
  31              	
  32              	/*************************************
  33              	*   interrupt service vectors table 
  34              	**************************************/
  35              	   .section  .isr_vector,"a",%progbits
  36              	  .type  isr_vectors, %object
  37              	
  38              	isr_vectors:
  39 ???? 00000000 	  .word   _mstack          /* main return stack address */
  40 ???? 00000000 	  .word   reset_handler    /* startup address */
  41              	/* core interrupts || exceptions */
  42 ???? 00000000 	  .word   nmi_handler  /*  -14 NMI */
  43 ???? 00000000 	  .word   hardfault_handler  /*  -13 HardFault */
  44 ???? 00000000 	  .word   memfault_handler  /*  -12 Memory Management */
  45 ???? 00000000 	  .word   busfault_handler  /* -11 Bus fault */
  46 ???? 00000000 	  .word   usagefault_handler  /* -10 Usage fault */
  47 ???? 00000000 	  .word   0 /* -9 */
  48 ???? 00000000 	  .word   0 /* -8 */ 
  49 ???? 00000000 	  .word   0 /* -7 */
  50 ???? 00000000 	  .word   0	/* -6 */
  51 ???? 00000000 	  .word   default_handler  /* -5 SWI instruction */
  52 ???? 00000000 	  .word   default_handler  /* -4 Debug monitor */
  53 ???? 00000000 	  .word   0 /* -3 */
  54 ???? 00000000 	  .word   default_handler  /* -2 PendSV */
  55 ???? 00000000 	  .word   systick_handler  /* -1 Systick */
  56              	 irq0:  
  57              	  /* External Interrupts */
  58 ???? 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  59 ???? 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  60 ???? 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  61 ???? 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
ARM GAS  forth.s 			page 13


  62 ???? 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  63 ???? 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  64 ???? 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  65 ???? 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  66 ???? 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  67 ???? 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  68 ???? 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  69 ???? 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  70 ???? 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  71 ???? 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  72 ???? 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  73 ???? 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  74 ???? 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  75 ???? 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  76 ???? 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  77 ???? 00000000 	  .word      0 /* IRQ19 not used */                         
  78 ???? 00000000 	  .word      0 /* IRQ20 not used */                          
  79 ???? 00000000 	  .word      0 /* IRQ21 not used */                          
  80 ???? 00000000 	  .word      0 /* IRQ22 not used */                          
  81 ???? 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  82 ???? 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
  83 ???? 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
  84 ???? 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
  85 ???? 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
  86 ???? 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
  87 ???? 00000000 	  .word      tv_out_isr /* IRQ29, TIM3 */                   
  88 ???? 00000000 	  .word      timer4_handler /* IRQ30, TIM4 */                   
  89 ???? 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
  90 ???? 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
  91 ???? 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
  92 ???? 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
  93 ???? 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
  94 ???? 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
  95 ???? 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
  96 ???? 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
  97 ???? 00000000 	  .word      0 /* IRQ39, not used */                   
  98 ???? 00000000 	  .word      kbd_isr /* IRQ40, External Line[15:10]s */                          
  99 ???? 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 100 ???? 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 101 ???? 00000000 	  .word      0 /* IRQ43, not used  */         
 102 ???? 00000000 	  .word      0 /* IRQ44, not used */         
 103 ???? 00000000 	  .word      0 /* IRQ45, not used  */
 104 ???? 00000000 	  .word      0 /* IRQ46, not used */                          
 105 ???? 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 106 ???? 00000000 	  .word      0 /* IRQ48, not used  */                   
 107 ???? 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 108 ???? 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 109 ???? 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 110 ???? 00000000 	  .word      0 /* IRQ52, not used  */                   
 111 ???? 00000000 	  .word      0 /* IRQ53, not used */                   
 112 ???? 00000000 	  .word      0 /* IRQ54, not used */                   
 113 ???? 00000000 	  .word      0 /* IRQ55, not used  */
 114 ???? 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 115 ???? 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 116 ???? 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 117 ???? 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 118 ???? 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
ARM GAS  forth.s 			page 14


 119 ???? 00000000 	  .word		 0 /* IRQ61, not used */
 120 ???? 00000000 	  .word		 0 /* IRQ62, not used */
 121 ???? 00000000 	  .word		 0 /* IRQ63, not used */
 122 ???? 00000000 	  .word		 0 /* IRQ64, not used */
 123 ???? 00000000 	  .word		 0 /* IRQ65, not used */
 124 ???? 00000000 	  .word		 0 /* IRQ66, not used */
 125 ???? 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 126 ???? 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 127 ???? 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 128 ???? 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 129 ???? 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 130 ???? 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 131 ???? 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 132 ???? 00000000 	  .word		 0 /* IRQ74, not used */
 133 ???? 00000000 	  .word		 0 /* IRQ75, not used */
 134 ???? 00000000 	  .word		 0 /* IRQ76, not used */
 135 ???? 00000000 	  .word		 0 /* IRQ77, not used */
 136 ???? 00000000 	  .word		 0 /* IRQ78, not used */
 137 ???? 00000000 	  .word		 0 /* IRQ79, not used */
 138 ???? 00000000 	  .word		 0 /* IRQ80, not used */
 139 ???? 00000000 	  .word		 fpu_exception /* IRQ81, FPU */
 140 ???? 00000000 	  .word		 0 /* IRQ82, not used */
 141 ???? 00000000 	  .word		 0 /* IRQ83, not used */
 142 ???? 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 143 ???? 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 144              	isr_end:
 145              	  .size  isr_vectors, .-isr_vectors
 146 ???? 00000000 	  .p2align 9
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              	
 148              	/*****************************************************
 149              	* default isr handler called on unexpected interrupt
 150              	*****************************************************/
 151              	   .section  .text, "ax", %progbits 
 152              	   
 153              	  .type default_handler, %function
 154              	  .p2align 2 
 155              	  .global default_handler
 156              	default_handler:
 157 ???? 00B500F0 	  _CALL forth_init 
 157      99FA5DF8 
 157      04EB
 158 ???? DFF834C9 	  ldr IP,=dh
 159 ???? 02F0CFBF 	  b INEXT  
 160              	dh:
 161 ???? 3D530000 	  _ADR PRESE
 162 ???? 35470000 	  _DOTQP 23, "exeption reboot, CFSR: "     
 162      17657865 
 162      7074696F 
 162      6E207265 
 162      626F6F74 
 163 ???? FD2F0000 	  _ADR CFSR 
 164 ???? 91330000 	  _ADR DUPP
 165 ???? FD320000 	  _ADR TOR 
ARM GAS  forth.s 			page 15


 166 ???? D7310000 	  _DOLIT 16 
 166      10000000 
 167 ???? ED390000 	  _ADR BASE 
 168 ???? 59320000 	  _ADR STORE 
 169 ???? 31480000 	  _ADR UDOT 
 170 ???? 35470000 	  _DOTQP 8 , ", BFAR: "
 170      082C2042 
 170      4641523A 
 170      200000BF 
 171 ???? 99320000 	  _ADR RFROM
 172 ???? D7310000 	  _DOLIT (1<<15)
 172      00800000 
 173 ???? 4D340000 	  _ADR ANDD
 174 ???? 17320000 	  _QBRAN 1f
 174      94000000 
 175 ???? 1D300000 	  _ADR BFAR
 176 ???? D7310000 	  _DOLIT ','
 176      2C000000 
 177 ???? 79300000 	  _ADR EMIT 
 178 ???? 1D460000 	  _ADR SPACE 
 179 ???? 31480000 	  _ADR UDOT 
 180              	// display fpu
 181              	1:
 182 ???? 35470000 	  _DOTQP 9 , ", FPSCR: "
 182      092C2046 
 182      50534352 
 182      3A2000BF 
 183 ???? 09230000 	  _ADR FPSCR
 184 ???? 31480000 	  _ADR UDOT 
 185              	1:
 186 ???? D5040000 	  _ADR reset_mcu 
 187              	
 188              	
 189              	/*********************************
 190              	   fpu exception 
 191              	*********************************/
 192              	  .type fpu_exception, %function 
 193              	  .global fpu_exception 
 194              	  .p2align 2 
 195              	fpu_exception:
 196 ???? 00B5     	  push {lr}
 197 ???? 4FF05100 	  mov r0,#FPU_IRQ 
 198 ???? 00F045FB 	  bl nvic_disable_irq 
 199 ???? 47F8046D 	  _PUSH 
 200 ???? 6646     	  mov TOS,IP 
 201 ???? DFF880C8 	  ldr IP,=fpu_except
 202 ???? 02F074BF 	  b INEXT 
 203              	fpu_except:  
 204 ???? D9460000 	  _ADR CR 
 205 ???? ED390000 	  _ADR BASE 
 206 ???? 6D320000 	  _ADR AT 
 207 ???? FD320000 	  _ADR TOR  
 208 ???? D7310000 	  _DOLIT 16 
 208      10000000 
 209 ???? ED390000 	  _ADR BASE 
 210 ???? 59320000 	  _ADR STORE
 211 ???? D7310000 	  _DOLIT 4 
ARM GAS  forth.s 			page 16


 211      04000000 
 212 ???? DD340000 	  _ADR SUBB  
 213 ???? 35470000 	  _DOTQP 4, "IP= "
 213      0449503D 
 213      200000BF 
 214 ???? 65480000 	  _ADR DOT 
 215 ???? 35470000 	  _DOTQP 23 , " ,fpu exception FPSCR: "
 215      17202C66 
 215      70752065 
 215      78636570 
 215      74696F6E 
 216 ???? 09230000 	  _ADR FPSCR 
 217 ???? 91330000 	  _ADR DUPP 
 218 ???? 65480000 	  _ADR DOT
 219 ???? DD350000 	  _ADR QDUP 
 220 ???? 17320000 	  _QBRAN 2f 
 220      C8010000 
 221 ???? D7310000 	  _DOLIT ',' 
 221      2C000000 
 222 ???? 79300000 	  _ADR EMIT 
 223 ???? D7310000 	  _DOLIT ' ' 
 223      20000000 
 224 ???? 79300000 	  _ADR EMIT
 225 ???? 91330000 	  _ADR DUPP 
 226 ???? D7310000 	  _DOLIT 0x10 
 226      10000000 
 227 ???? 4D340000 	  _ADR ANDD
 228 ???? DD350000 	  _ADR QDUP  
 229 ???? 17320000 	  _QBRAN 1f 
 229      84010000 
 230 ???? D7310000 	  _DOLIT fpu_exceptions
 230      08020000 
 231 ???? CD340000 	  _ADR PLUS 
 232 ???? 6D320000 	  _ADR AT 
 233 ???? 41390000 	  _ADR COUNT 
 234 ???? 71460000 	  _ADR TYPEE
 235 ???? D7310000 	1: _DOLIT 15 
 235      0F000000 
 236 ???? 4D340000 	  _ADR ANDD
 237 ???? 99370000 	  _ADR CLZ 
 238 ???? D7310000 	  _DOLIT 31 
 238      1F000000 
 239 ???? A1330000 	  _ADR SWAP 
 240 ???? DD340000 	  _ADR SUBB 
 241 ???? D7310000 	  _DOLIT 2 
 241      02000000 
 242 ???? BD340000 	  _ADR LSHIFT 
 243 ???? D7310000 	  _DOLIT fpu_exceptions 
 243      08020000 
 244 ???? CD340000 	  _ADR PLUS 
 245 ???? 6D320000 	  _ADR AT 
 246 ???? 41390000 	  _ADR COUNT 
 247 ???? 71460000 	  _ADR TYPEE 
 248 ???? D9460000 	2: _ADR CR 
 249 ???? D7310000 	  _DOLIT 0
 249      00000000 
 250 ???? 29230000 	  _ADR CLR_FPSCR 
ARM GAS  forth.s 			page 17


 251 ???? 99320000 	  _ADR RFROM  
 252 ???? ED390000 	  _ADR BASE 
 253 ???? 59320000 	  _ADR STORE 
 254 ???? E9010000 	  _ADR exit_fpu_isr // reset_mcu 
 255              	
 256              	exit_fpu_isr:
 257 ???? DFF85CC7 	   ldr IP,=QUIT  
 258 ???? 4FF46D40 	   _MOV32 r0,SCB_BASE_ADR
 258      CEF20000 
 259 ???? 81EA0101 	   eor r1,r1 
 260 ???? 4160     	   str r1,[r0,#SCB_ICSR]
 261 ???? 4FF05100 	   mov r0,#FPU_IRQ 
 262 ???? 00F08CFA 	   bl nvic_enable_irq 
 263 ???? 5DF804EB 	   pop {lr}
 264 ???? 7047     	   bx lr 
 265              	
 266              	
 267              	  .p2align 2 
 268              	// fpu exception 
 269 ???? 1C020000 	fpu_exceptions:  .word fpu_except_invalid_op, fpu_except_div0, fpu_except_overflow, fpu_except_unde
 269      30020000 
 269      40020000 
 269      4C020000 
 269      58020000 
 270              	
 271              	  .p2align 2 
 272              	fpu_except_invalid_op: // bit 0  
 273 ???? 12       	  .byte 18
 274 ???? 20696E76 	  .ascii " invalid operation" 
 274      616C6964 
 274      206F7065 
 274      72617469 
 274      6F6E
 275              	                      
 276 ???? 00       	  .p2align 2 
 277              	fpu_except_div0: // bit 1 
 278 ???? 0E       	  .byte 14 
 279 ???? 20646976 	  .ascii " division by 0" 
 279      6973696F 
 279      6E206279 
 279      2030
 280              	
 281 ???? 00       	  .p2align 2 
 282              	fpu_except_overflow: // bit 2
 283 ???? 09       	  .byte 9 
 284 ???? 206F7665 	  .ascii " overflow"
 284      72666C6F 
 284      77
 285              	
 286 ???? 00BF     	  .p2align 2 
 287              	fpu_except_underflow:  // bit 3 
 288 ???? 0A       	  .byte 10
 289 ???? 20756E64 	  .ascii " underflow"
 289      6572666C 
 289      6F77
 290              	
 291 ???? 00       	  .p2align 2 
ARM GAS  forth.s 			page 18


 292              	fpu_except_inexact: // bit 4 
 293 ???? 0A       	  .byte 10 
 294 ???? 20696E65 	  .ascii " inexact, "
 294      78616374 
 294      2C20
 295              	
 296              	
 297              	/*********************************
 298              	  non maskable interrupt handler
 299              	  irq -14 
 300              	*********************************/
 301              	  .type nmi_handler, %function
 302 ???? 00       	  .p2align 2
 303              	  .global nmi_handler 
 304              	nmi_handler:
 305 ???? DFF8E4C6 	  ldr IP,=nmi_hl 
 306 ???? 02F0A2BE 	  b  INEXT
 307              	nmi_hl:
 308 ???? 3D530000 	  _ADR PRESE 
 309 ???? D9460000 	  _ADR CR 
 310 ???? 35470000 	  _DOTQP  25 , "not managed nmi exception"
 310      196E6F74 
 310      206D616E 
 310      61676564 
 310      206E6D69 
 311 ???? D9460000 	  _ADR CR 
 312 ???? A1500000 	  _ADR ABORT 
 313              	   
 314              	
 315              	/***********************************
 316              	   hard fault handler
 317              	   irq -13
 318              	***********************************/
 319              	  .type hardfault_handler, %function
 320              	  .p2align 2
 321              	  .global hardfault_handler 
 322              	hardfault_handler:
 323 ???? 4FF00000 	  _MOV32 r0,RAM_END 
 323      C2F20200 
 324 ???? 8546     	  mov sp,r0 
 325 ???? DFF8A8C6 	  ldr IP,=hardfault_hl 
 326 ???? 02F081BE 	  b INEXT
 327              	hardfault_hl:
 328 ???? 3D530000 	  _ADR PRESE
 329 ???? D9460000 	  _ADR CR  
 330 ???? 35470000 	  _DOTQP  20 , "hard fault exception"
 330      14686172 
 330      64206661 
 330      756C7420 
 330      65786365 
 331 ???? D9460000 	  _ADR CR 
 332 ???? D5040000 	  _ADR reset_mcu
 333              	
 334              	/***********************************
 335              	   memory manager fault 
 336              	   irq -12 
 337              	************************************/
ARM GAS  forth.s 			page 19


 338              	  .type memfault_handler, %function
 339              	  .p2align 2
 340              	  .global memfault_handler 
 341              	memfault_handler:
 342 ???? 4FF00000 	  _MOV32 r0,RAM_END 
 342      C2F20200 
 343 ???? 8546     	  mov sp,r0 
 344 ???? DFF870C6 	  ldr IP,=memfault_hl 
 345 ???? 02F063BE 	  b INEXT 
 346              	memfault_hl: 
 347 ???? 3D530000 	  _ADR PRESE
 348 ???? D9460000 	  _ADR CR  
 349 ???? 35470000 	  _DOTQP  33 , "memory manager exception, MMFSR: "
 349      216D656D 
 349      6F727920 
 349      6D616E61 
 349      67657220 
 350 ???? D7310000 	  _DOLIT 16 
 350      10000000 
 351 ???? ED390000 	  _ADR BASE 
 352 ???? 59320000 	  _ADR STORE   
 353 ???? FD2F0000 	  _ADR CFSR
 354 ???? D7310000 	  _DOLIT 255 
 354      FF000000 
 355 ???? 4D340000 	  _ADR ANDD 
 356 ???? 31480000 	  _ADR UDOT 
 357 ???? D9460000 	  _ADR CR 
 358 ???? D5040000 	  _ADR reset_mcu 
 359              	
 360              	
 361              	/************************************
 362              	   bus fault 
 363              	   irq -11 
 364              	***********************************/
 365              	  .type busfault_handler, %function
 366              	  .p2align 2
 367              	  .global busfault_handler 
 368              	busfault_handler:
 369 ???? 4FF00000 	  _MOV32 r0,RAM_END 
 369      C2F20200 
 370 ???? 8546     	  mov sp,r0 
 371 ???? DFF808C6 	  ldr IP,=busfault_hl 
 372 ???? 02F02DBE 	  b INEXT 
 373              	busfault_hl:
 374 ???? 3D530000 	  _ADR PRESE
 375 ???? D7310000 	  _DOLIT 1 
 375      01000000 
 376 ???? 41310000 	  _ADR ULED 
 377 ???? D7310000 	  _DOLIT  100 
 377      64000000 
 378 ???? A9390000 	  _ADR MSEC 
 379 ???? 1D300000 	  _ADR BFAR 
 380 ???? FD2F0000 	  _ADR CFSR 
 381 ???? D9460000 	  _ADR CR  
 382 ???? 35470000 	  _DOTQP  27 , "bus fault exception, BFSR: "
 382      1B627573 
 382      20666175 
ARM GAS  forth.s 			page 20


 382      6C742065 
 382      78636570 
 383 ???? D7310000 	  _DOLIT 16 
 383      10000000 
 384 ???? ED390000 	  _ADR BASE 
 385 ???? 59320000 	  _ADR STORE   
 386 ???? D7310000 	  _DOLIT 0XFF00 
 386      00FF0000 
 387 ???? 4D340000 	  _ADR ANDD   
 388 ???? 31480000 	  _ADR UDOT 
 389 ???? 35470000 	  _DOTQP 7 , " BFAR: "
 389      07204246 
 389      41523A20 
 390 ???? 31480000 	  _ADR UDOT 
 391 ???? D9460000 	  _ADR CR 
 392 ???? D5040000 	  _ADR reset_mcu  
 393              	
 394              	/************************************
 395              	    usage fault
 396              	    irq -10 
 397              	************************************/
 398              	  .type usagefault_handler, %function
 399              	  .p2align 2
 400              	  .global usagefault_handler 
 401              	usagefault_handler:
 402 ???? 4FF00000 	  _MOV32 r0,RAM_END 
 402      C2F20200 
 403 ???? 8546     	  mov sp,r0 
 404 ???? DFF878C5 	  ldr IP,=usagefault_hl
 405 ???? 02F0E3BD 	  b INEXT 
 406              	usagefault_hl:
 407 ???? 3D530000 	  _ADR PRESE
 408 ???? D9460000 	  _ADR CR  
 409 ???? 35470000 	  _DOTQP  23 , "usage exception, UFSR: "
 409      17757361 
 409      67652065 
 409      78636570 
 409      74696F6E 
 410 ???? D7310000 	  _DOLIT 16 
 410      10000000 
 411 ???? ED390000 	  _ADR BASE 
 412 ???? 59320000 	  _ADR STORE   
 413 ???? FD2F0000 	  _ADR CFSR
 414 ???? D7310000 	  _DOLIT 16 
 414      10000000 
 415 ???? A5340000 	  _ADR RSHIFT 
 416 ???? 31480000 	  _ADR UDOT 
 417 ???? D9460000 	  _ADR CR 
 418 ???? D5040000 	  _ADR reset_mcu  
 419              	
 420              	
 421              	/********************************
 422              	    timer interrupt handler
 423              	********************************/
 424              	  .type timer4_handler, %function
 425              	  .p2align 2
 426              	  .global timer4_handler
ARM GAS  forth.s 			page 21


 427              	timer4_handler:
 428 ???? 4FF00003 	    _MOV32 r3,UPP 
 428      C2F20003 
 429 ???? D3F8B000 	    ldr r0,[r3,#BEEP_DTMR]
 430 ???? 38B9     	    cbnz r0, 1f 
 431              	    // disable tone generator
 432 ???? 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 432      C4F20003 
 433 ???? 1868     	    ldr r0,[r3,#TIM_CR1]
 434 ???? 20F00100 	    and r0,#-2 
 435 ???? 1860     	    str r0,[r3,#TIM_CR1]
 436              	//    ldr r0,[r3,#TIM_DIER]
 437              	//    and r0,#-4
 438              	//    str r0,[r3,#TIM_DIER]
 439              	1:  // reset interrupt flags
 440 ???? 4FF40063 	    _MOV32 r3,TIM4_BASE_ADR
 440      C4F20003 
 441 ???? 1869     	    ldr r0,[r3,#TIM_SR]
 442 ???? 20F00300 	    and r0,#-4
 443 ???? 1861     	    str r0,[r3,#TIM_SR]
 444 ???? 7047     	    bx lr 
 445              	
 446              	
 447              	/*********************************
 448              		system milliseconds counter
 449              	*********************************/	
 450              	  .type systick_handler, %function
 451              	  .p2align 2 
 452              	  .global systick_handler
 453              	systick_handler:
 454 ???? 4FF00003 	  _MOV32 r3,UPP
 454      C2F20003 
 455 ???? 9868     	  ldr r0,[r3,#TICKS]  
 456 ???? 00F10100 	  add r0,#1
 457 ???? 9860     	  str r0,[r3,#TICKS]
 458              	  // tone timer 
 459 ???? D3F8B000 	  ldr r0,[r3,#BEEP_DTMR]
 460 ???? 18B1     	  cbz r0,1f
 461 ???? A0F10100 	  sub r0,#1 
 462 ???? C3F8B000 	  str r0,[r3,#BEEP_DTMR]
 463              	1: // countdown timer 
 464 ???? D868     	  ldr r0,[r3,#CD_TIMER]
 465 ???? 10B1     	  cbz r0, systick_exit
 466 ???? A0F10100 	  sub r0,#1
 467 ???? D860     	  str r0,[r3,#CD_TIMER]
 468              	systick_exit:
 469 ???? 7047     	  bx lr
 470              	
 471              	user_reboot:
 472 ???? 00B500F0 	   _CALL forth_init 
 472      4EF85DF8 
 472      04EB
 473 ???? DFF8BCC4 	  ldr IP,=ur
 474 ???? 02F084BD 	  b INEXT  
 475              	ur:
 476 ???? 3D530000 	  _ADR PRESE
 477 ???? D9460000 	  _ADR CR   
ARM GAS  forth.s 			page 22


 478 ???? D7310000 		_DOLIT user_reboot_msg
 478      C4040000 
 479 ???? 41390000 		_ADR COUNT 
 480 ???? 71460000 	  _ADR TYPEE 
 481 ???? D5040000 	  _ADR reset_mcu 
 482              	
 483              		.p2align 2 
 484              	user_reboot_msg:
 485 ???? 0C       		.byte 12
 486 ???? 75736572 		.ascii "user reboot!"
 486      20726562 
 486      6F6F7421 
 487 ???? 0000BF   		.p2align 2 
 488              	
 489              	reset_mcu:
 490 ???? 4FF48050 	  _MOV32 r0,UART 
 490      C4F20100 
 491 ???? 0168     	1: ldr r1,[r0,#USART_SR]
 492 ???? 11F0400F 	  tst r1,#(1<<6)
 493 ???? FBD0     	  beq 1b
 494 ???? 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR  
 494      CEF20000 
 495 ???? C168     		ldr r1,[r0,#SCB_AIRCR]
 496 ???? 41F00401 		orr r1,#(1<<2)
 497 ???? C0F2FA51 		movt r1,#SCB_VECTKEY
 498 ???? C160     		str r1,[r0,#SCB_AIRCR]
 499 ???? FEE7     		b . 
 500              	
 501              	/**************************************
 502              	  reset_handler execute at MCU reset
 503              	***************************************/
 504              	  .type  reset_handler, %function
 505 ???? 00BF     	  .p2align 2 
 506              	  .global reset_handler
 507              	reset_handler:
 508 ???? 4FF00000 		_MOV32 r0,RAM_END
 508      C2F20200 
 509 ???? 8546     		mov sp,r0 
 510              	// enable memory, bus and usage exceptions  
 511 ???? 4FF46D40 	  _MOV32 r0,SCB_BASE_ADR
 511      CEF20000 
 512 ???? 81EA0101 	  eor r1,r1 
 513 ???? C0F20701 	  movt r1,#7 
 514 ???? 4162     	  str r1,[r0,#SCB_SHCSR]
 515 ???? FFF7FEFF 		bl	remap 
 516 ???? 00F020F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 517 ???? 01F0C3FE 	  bl  fpu_init 
 518 ???? 00F017FB 		bl  ser_init
 519 ???? FFF7FEFF 	 	bl	tv_init
 520 ???? FFF7FEFF 	  bl  kbd_init
 521 ???? 01F010FC 	  bl  flash_spi_init   
 522 ???? 06F066B9 		b COLD 
 523              	
 524              	
 525              	
 526              		.type forth_init, %function 
 527              	  .p2align 2 
ARM GAS  forth.s 			page 23


 528              	forth_init:
 529 ???? 4FF00004 		_MOV32 UP,UPP 
 529      C2F20004 
 530 ???? 4FF6B067 		_MOV32 DSP,SPP
 530      C2F20107 
 531 ???? 4FF68078 		_MOV32 RSP,RPP
 531      C2F20108 
 532 ???? DFF810A4 	  ldr INX,=NEST
 533 ???? 4AF0010A 	  orr INX,#1 
 534 ???? 86EA0606 		EOR TOS,TOS  
 535 ???? 7047     		_RET 
 536              	
 537              	
 538              	
 539              	  .type init_devices, %function
 540 ???? 00BF     	  .p2align 2 
 541              	init_devices:
 542              	/* init clock to HSE 96 Mhz */
 543              	/* set 3 wait states in FLASH_ACR_LATENCY */
 544 ???? 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 544      C4F20200 
 545 ???? 4FF00301 	  mov r1,#3 
 546 ???? 0160     	  str r1,[r0,#FLASH_ACR]
 547              	/* configure clock for HSE, 25 Mhz crystal */
 548              	/* enable HSE in RCC_CR */
 549 ???? 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 549      C4F20200 
 550 ???? 0168     	  ldr r1,[r0,#RCC_CR]
 551 ???? 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 ???? 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 ???? 0168     	  ldr r1,[r0,#RCC_CR]
 556 ???? 11F4003F 	  tst r1,#(1<<17)
 557 ???? FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL  and source 
 561              	   SYSCLOCK=96 Mhz
 562              	   select HSE as  PLL source clock
 563              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 564              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 565              	****************************************************/
 566              	  /* set RCC_PLLCFGR */
 567 ???? 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 567      C4F20200 
 568 ???? 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 568      C0F24041 
 569 ???? 4160     	  str r1,[r0,#RCC_PLLCFGR]
 570              	  /* enable PLL */
 571 ???? 0168     	  ldr r1,[r0,#RCC_CR]
 572 ???? 41F08071 	  orr r1, #(1<<24)
 573 ???? 0160     	  str r1,[r0,#RCC_CR]
 574              	/* wait for PLLRDY */
 575              	wait_pllrdy:
 576 ???? 0168     	  ldr r1,[r0,#RCC_CR]
 577 ???? 11F0007F 	  tst r1,#(1<<25)
ARM GAS  forth.s 			page 24


 578 ???? FBD1     	  bne wait_pllrdy 
 579              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 580 ???? 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 580      C0F21901 
 581 ???? 8160     	  str r1,[r0,#RCC_CFGR]
 582              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 583 ???? 8168     	  ldr r1,[r0,#RCC_CFGR]
 584 ???? 41F00201 	  orr r1,#2
 585 ???? 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 ???? 8168     	  ldr r1,[r0,#RCC_CFGR]
 589 ???? 11F0080F 	  tst r1,#(2<<2)
 590 ???? FBD0     	  beq wait_sws
 591              	/* now sysclock is 96 Mhz */
 592              	
 593              	
 594              	/* enable peripheral clock for GPIOA, GPIOB, GPIOC and USART1 */
 595 ???? 4FF09F01 	  mov	r1, #0x9F		/* all GPIO clock */
 596 ???? 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 597 ???? 44F21001 	  mov	r1, #(1<<4)+(1<<14)  /* USART1 + SYSCFG clock enable */
 598 ???? 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 599              	/* configure GPIOC:13 as output for user LED */
 600 ???? 4FF40060 	  _MOV32 r0,LED_GPIO 
 600      C4F20200 
 601 ???? 4FF00D01 	  mov r1,#LED_PIN
 602 ???? 4FF01102 	  mov r2,#OUTPUT_OD 
 603 ???? 00B500F0 	  _CALL gpio_config 
 603      DEF85DF8 
 603      04EB
 604 ???? 4FF00102 	  mov r2,#1
 605 ???? 00B500F0 	  _CALL gpio_out 
 605      2DF95DF8 
 605      04EB
 606              	/* enable compensation CELL for fast I/O */
 607 ???? 4FF46051 		_MOV32 r1,SYSCFG_BASE_ADR
 607      C4F20101 
 608 ???? 4FF00100 		mov r0,#1 
 609 ???? 0862     		str r0,[R1,#SYSCFG_CMPCR]
 610              	/* wait for ready bit */ 
 611 ???? 086A     	1:  ldr r0,[R1,#SYSCFG_CMPCR]
 612 ???? 10F4807F 	    tst r0,#(1<<8)
 613 ???? FBD0     		beq 1b 	
 614              	
 615              	/* configure audio output 
 616              	   PB6 Aout 
 617              	   T4-CH1  PWM mode
 618              	   Fck = 96Mhz/16  
 619              	*/
 620 ???? 4FF48060 	  _MOV32 r0,GPIOB_BASE_ADR // port 
 620      C4F20200 
 621              	  // select AF02 on PB6 // T4-CH1 
 622 ???? 016A     	  ldr r1,[r0,#GPIO_AFRL]
 623 ???? 41F00071 	  orr r1,#(2<<24)
 624 ???? 0162     	  str r1,[r0,#GPIO_AFRL] 
 625 ???? 4FF00601 	  mov r1,#6 // pin 
 626 ???? 4FF00202 	  mov r2,#OUTPUT_AFPP  // mode 
ARM GAS  forth.s 			page 25


 627 ???? 00B500F0 	  _CALL gpio_config 
 627      BBF85DF8 
 627      04EB
 628              	// enable timer4 clock 
 629 ???? 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
 629      C4F20202 
 630 ???? 4FF00400 	  mov r0,#4
 631 ???? 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 632 ???? 41EA0001 	  orr r1,r0 
 633 ???? 1164     	  str r1,[r2,#RCC_APB1ENR]
 634              	// configure TIMER4 CH1  pwm mode   
 635 ???? 4FF40062 	  _MOV32 r2,TIM4_BASE_ADR
 635      C4F20002 
 636              	// prÃ©scale / 16 
 637 ???? 4FF40060 	  _MOV32 r0,TIM4_BASE_ADR
 637      C4F20000 
 638 ???? 4FF00F01 	  mov r1,#15 
 639 ???? 8162     	  str r1,[r0,#TIM_PSC] // div Fck/16
 640              	// pwm mode 
 641 ???? 4FF07001 	  mov r1,#7<<4 
 642 ???? 8161     	  str r1,[r0,#TIM_CCMR1]
 643 ???? 016A     	  ldr r1,[r0,TIM_CCER]
 644 ???? 41F00101 	  orr r1,#1
 645 ???? 0162     	  str r1,[r0,#TIM_CCER]
 646              	  // enable interrupt 
 647 ???? C168     	  ldr r1,[r0,#TIM_DIER]
 648 ???? 41F00101 	  orr r1,#1 
 649 ???? C160     	  str r1,[r0,#TIM_DIER]
 650 ???? 4FF01E00 	  mov r0,#TIM4_IRQ 
 651 ???? 00B500F0 	  _CALL  nvic_enable_irq
 651      51F85DF8 
 651      04EB
 652              	
 653              	
 654              	/* configure systicks for 1msec ticks */
 655              	// set priority to 15 (lowest)
 656 ???? 4FF0FF30 	  mov r0,#STCK_IRQ
 657 ???? 4FF00F01 	  mov r1,#15 
 658 ???? 00B500F0 	  _CALL nvic_set_priority
 658      2FF85DF8 
 658      04EB
 659 ???? 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 659      CEF20000 
 660 ???? 47F2FF61 	  _MOV32 r1,95999 
 660      C0F20101 
 661 ???? 4160     	  str r1,[r0,#STK_LOAD]
 662 ???? 4FF00701 	  mov r1,#7
 663 ???? 0160     	  str r1,[r0,STK_CTL]
 664 ???? 7047     	  _RET  
 665              	
 666              	  
 667              	/* copy system variables to RAM */ 
 668              		.type remap, %function 
 669              	    .global remap 
 670              	remap:
 671              	// copy system to RAM 	
 672 ???? 4FF00000 		_MOV32 r0,RAM_ADR 
ARM GAS  forth.s 			page 26


 672      C2F20000 
 673 ???? AD49     		ldr r1,=UZERO 
 674 ???? 4FF0DC02 		mov r2,#ULAST-UZERO 
 675 ???? 02F10302 		add r2,r2,#3
 676 ???? 22F00302 		and r2,r2,#~3 
 677 ???? 51F8043B 	1:	ldr r3,[r1],#4 
 678 ???? 40F8043B 		str r3,[r0],#4 
 679 ???? 043A     		subs R2,#4 
 680 ???? F9D1     		bne 1b
 681              	// zero end of RAM 
 682 ???? 4FF00002 		_MOV32 r2,RAM_END 
 682      C2F20202 
 683 ???? 83EA0303 		eor r3,r3,r3 
 684 ???? 40F8043B 	2:  str r3,[r0],#4
 685 ???? 9042     		cmp r0,r2 
 686 ???? FBDB     		blt 2b 
 687 ???? 4FF00004 		_MOV32 UP,RAM_ADR  
 687      C2F20004 
 688 ???? 7047     		_RET 
 689              	
 690              	// set irq priority 
 691              	// 0 highest 
 692              	// 15 lowest
 693              	// input: r0 IRQn  
 694              	//        r1  ipr 
 695              	nvic_set_priority:
 696 ???? 08B4     	    push {r3}
 697 ???? 0028     	    cmp r0,#0 
 698 ???? 08D4     	    bmi negative_irq 
 699 ???? 4FF46443 	    _mov32 r3,NVIC_IPR_BASE
 699      CEF20003 
 700 ???? 4FEA0111 	    lsl r1,#4 
 701 ???? 1954     	    strb r1,[r3,r0]
 702 ???? 08BC     	    pop {r3}
 703 ???? 7047     	    _RET 
 704              	negative_irq:
 705 ???? 4EF61853 	    _MOV32 r3,(SCB_BASE_ADR+SCB_SHPR1)
 705      CEF20003 
 706 ???? 00F00F00 	    and r0,#0XF 
 707 ???? A0F10400 	    sub r0,#4 
 708 ???? 4FEA0111 	    lsl r1,#4 
 709 ???? 1954     	    strb r1,[r3,r0]
 710 ???? 08BC     	    pop {r3}
 711 ???? 7047     	    _RET 
 712              	
 713              	
 714              	// enable interrupt in nvic 
 715              	// input: r0 = IRQn 
 716              	nvic_enable_irq: 
 717 ???? 0EB4     	    push {r1,r2,r3}
 718 ???? 4FF46143 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ISER0)
 718      CEF20003 
 719 ???? 0146     	    mov r1,r0 
 720 ???? 4FEA5111 	    lsr r1,#5  
 721 ???? 4FEA8101 	    lsl r1,#2  // ISERn  
 722 ???? 00F01F00 	    and r0,#31 // bit#
 723 ???? 4FF00102 	    mov r2,#1 
ARM GAS  forth.s 			page 27


 724 ???? 02FA00F2 	    lsl r2,r0
 725 ???? 72B6     	    cpsid I
 726 ???? 5A50     	    str r2,[r3,r1]
 727 ???? 62B6     	    cpsie I 
 728 ???? 0EBC     	    pop {r1,r2,r3}
 729 ???? 7047     	    _RET 
 730              	
 731              	// disable interrupt in nvic
 732              	// input: r0 = IRQn
 733              	nvic_disable_irq:
 734 ???? 0EB4     	    push {r1,r2,r3}
 735 ???? 4EF28013 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICER0)
 735      CEF20003 
 736 ???? 0146     	    mov r1,r0 
 737 ???? 4FEA5111 	    lsr r1,#5  
 738 ???? 4FEA8101 	    lsl r1,#2  // ISERn
 739 ???? 00F01F00 	    and r0,#31 // bit#
 740 ???? 4FF00102 	    mov r2,#1 
 741 ???? 02FA00F2 	    lsl r2,r0
 742 ???? 5A50     	    str r2,[r3,r1]
 743 ???? BFF34F8F 	    dsb 
 744 ???? BFF36F8F 	    isb 
 745 ???? 0EBC     	    pop {r1,r2,r3}
 746 ???? 7047     	    _RET 
 747              	
 748              	// clear interrupt pending flag 
 749              	// input: r0 = IRQn
 750              	nvic_clear_irq_pending:
 751 ???? 4EF28023 	    _MOV32 r3,(NVIC_BASE_ADR+NVIC_ICPR0)
 751      CEF20003 
 752 ???? 0EB4     	    push {r1,r2,r3}
 753 ???? 0146     	    mov r1,r0 
 754 ???? 4FEA5111 	    lsr r1,#5 
 755 ???? 4FEA8101 	    lsl r1,#2  // IABRn
 756 ???? 00F01F00 	    and r0,#31 // bit#
 757 ???? 4FF00102 	    mov r2,#1 
 758 ???? 02FA00F2 	    lsl r2,r0
 759 ???? 5A50     	    str r2,[r3,r1]
 760 ???? BFF34F8F 	    dsb 
 761 ???? BFF36F8F 	    isb 
 762 ???? 0EBC     	    pop {r1,r2,r3}
 763 ???? 7047     	    _RET 
 764              	
 765              	
 766              	/**********************************
 767              	  gpio_config 
 768              	  Configure gpio mode 
 769              	  input:
 770              	    r0   GPIOx 
 771              	    r1   pin 
 772              	    r2   mode 
 773              	  output:
 774              	    none 
 775              	  use:
 776              	    r3,r5,r11  
 777              	**********************************/
 778              	gpio_config:
ARM GAS  forth.s 			page 28


 779 ???? 2DE92808 	    push {r3,r5,r11}
 780              	//  clear registers field 
 781 ???? 4FF00105 	    mov r5,#1
 782 ???? 05FA01F5 	    lsl r5,r1
 783 ???? 6FEA0505 	    mvn r5,r5 // 1 bit field mask 
 784 ???? 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 785 ???? 03EA0503 	    and r3,r5 
 786 ???? 4360     	    str r3,[r0,#GPIO_OTYPER]
 787 ???? 4FF00305 	    mov r5,#3 
 788 ???? 4FF0020B 	    mov r11,#2 
 789 ???? 01FB0BFB 	    mul r11,r1 
 790 ???? 05FA0BF5 	    lsl r5,r11 
 791 ???? 6FEA0505 	    mvn r5,r5 // 2 bits field mask 
 792 ???? 0368     	    ldr r3,[r0,#GPIO_MODER]
 793 ???? 03EA0503 	    and r3,r5 
 794 ???? 0360     	    str r3,[r0,#GPIO_MODER]
 795 ???? C368     	    ldr r3,[r0,#GPIO_PUPDR]
 796 ???? 03EA0503 	    and r3,r5 
 797 ???? C360     	    str r3,[r0,#GPIO_PUPDR]
 798              	// set mode register, r2 low nibble  
 799 ???? 02F00305 	    and r5,r2,#3    
 800 ???? 05FA0BF5 	    lsl r5,r11 // mode 
 801 ???? 0368     	    ldr r3,[r0,#GPIO_MODER]
 802 ???? 43EA0503 	    orr r3,r5 
 803 ???? 0360     	    str r3,[r0,#GPIO_MODER]
 804 ???? 032A     	    cmp r2,#3
 805 ???? 13D0     	    beq 9f // analog input 
 806 ???? 12F00305 	    ands r5,r2,#3 
 807 ???? 08D0     	    beq input_pull 
 808              	output_type:
 809 ???? 4FEA1212 	    lsr r2,#4 
 810 ???? 02FA01F2 	    lsl r2,r1 // 1 bit field 
 811 ???? 4368     	    ldr r3,[r0,#GPIO_OTYPER]
 812 ???? 43EA0203 	    orr r3,r2 
 813 ???? 4360     	    str r3,[r0,#GPIO_OTYPER]
 814 ???? 07E0     	    b 9f 
 815              	input_pull:
 816 ???? C368     	    ldr r3,[r0,#GPIO_PUPDR]
 817 ???? 4FEA1212 	    lsr r2,#4 
 818 ???? 02FA0BF2 	    lsl r2,r11 // 2 bits field 
 819 ???? 43EA0203 	    orr r3,r2 
 820 ???? C360     	    str r3,[r0,#GPIO_PUPDR]
 821 ???? BDE82808 	9:  pop {r3,r5,r11}
 822 ???? 7047     	    _RET 
 823              	
 824              	// configure gpio speed 
 825              	// input:
 826              	//    r0   GPIO_BASE_ADR 
 827              	//    r1   pin 
 828              	//    r2   speed
 829              	// use:
 830              	//  r3,r5,r11 
 831              	gpio_speed:
 832 ???? 2DE92808 	    push {r3,r5,r11}
 833 ???? 8368     	    ldr r3,[r0,#GPIO_OSPEEDR]
 834 ???? 4FF00305 	    mov r5,#3
 835 ???? 4FF0020B 	    mov r11,#2 
ARM GAS  forth.s 			page 29


 836 ???? 01FB0BFB 	    mul r11,r1 
 837 ???? 05FA0BF5 	    lsl r5,r11
 838 ???? 6FEA0505 	    mvn r5,r5 
 839 ???? 03EA0503 	    and r3,r5   
 840 ???? 02FA0BF2 	    lsl r2,r11  
 841 ???? 43EA0203 	    orr r3,r2 
 842 ???? 8360     	    str r3,[r0,#GPIO_OSPEEDR]
 843 ???? BDE82808 	    pop {r3,r5,r11}
 844 ???? 7047     	    _RET
 845              	
 846              	/**************************** 
 847              	  gpio_out port,pin,0|1
 848              	  input:
 849              	    r0   gpio_base_adr 
 850              	    r1   pin 
 851              	    r2   data 0|1 
 852              	**************************/
 853              	gpio_out:
 854 ???? 08B4     	    push {r3}
 855 ???? 4FF00103 	    mov r3,#1 
 856 ???? 03FA01F3 	    lsl r3,r1 
 857 ???? 0AB9     	    cbnz r2, 1f 
 858 ???? 4FEA0343 	    lsl r3,#16 
 859 ???? 8361     	1:  str r3,[r0,#GPIO_BSRR]    
 860 ???? 08BC     	    pop {r3}
 861 ???? 7047     	    _RET 
 862              	
 863              	/******************************************************
 864              	*  COLD start moves the following to USER variables.
 865              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 866              	******************************************************/
 867 ???? 00BF     		.p2align 2
 868              	UZERO:
 869 ???? 00000000 		.word 0  			/*Reserved */
 870 ???? 55AA55AA 		.word 0xaa55aa55 /* SEED  */ 
 871 ???? 00000000 		.word 0      /* TICKS */
 872 ???? 00000000 	    .word 0     /* CD_TIMER */
 873 ???? 14670000 		.word HI_BOTH  /*'BOOT */
 874 ???? 3C1A0000 		.word PS2_QKEY /* query for character */
 875 ???? 04130000 	  .word TV_EMIT  /* char output device */
 876 ???? 0A000000 	  .word BASEE 	/*BASE */
 877 ???? FFFFFFFF 	  .word -1      /*BCHAR*/ 
 878 ???? 00000000 		.word 0			/*tmp */
 879 ???? 00000000 		.word 0			/*SPAN */
 880 ???? 00000000 		.word 0			/*>IN */
 881 ???? 00000000 		.word 0			/*#TIB */
 882 ???? B0FE0120 		.word TIBB	/*TIBU */
 883 ???? 00000000 	  .word 0     // SRCID 
 884 ???? 50510000 		.word INTER	/*'EVAL */
 885 ???? 00000000 		.word 0			/*HLD */
 886 ???? FC670000 		.word _LASTN	/*CONTEXT */
 887 ???? 68680000 		.word CTOP  	/* FCP end of system dictionnary */
 888 ???? 04600020 		.word RAM_ADR+(CTOP-UZERO)	/* CP end of RAM dictionary RAM */
 889 ???? FC670000 		.word _LASTN	/*LAST word in dictionary */
 890 ???? 00000000 		.space  RX_QUEUE_SIZE /* space reserved for rx_queue,head and tail pointer. */
 890      00000000 
 890      00000000 
ARM GAS  forth.s 			page 30


 890      00000000 
 891 ???? 00000000 		.word 0  /* RX_HEAD */
 892 ???? 00000000 		.word 0  /* RX_TAIL */ 
 893 ???? 00000000 		.word 0  /* VID_CNTR, video_line counter */ 
 894 ???? 00000000 		.word 0  /* VID_STATE, video state */  
 895 ???? 00000000 	    .word 0  /* VID_FIELD, field */
 896 ???? 30810120 		.word VID_BUFF /* video_buffer address */ 
 897 ???? 00000000 	    .word 0 /* kbd struct */
 898 ???? 00000000 		.space KBD_QUEUE_SIZE,0  
 898      00000000 
 898      00000000 
 898      00000000 
 899 ???? 00000000 		.word 0  /* kbd queue head */
 900 ???? 00000000 		.word 0 /* kbd queue tail */ 
 901 ???? 00000000 	    .word 0 /* tv cursor row */
 902 ???? 00000000 	    .word 0 /* tv cursor column */ 
 903 ???? 00000000 	    .word 0 /* tv back color */
 904 ???? 07000000 	    .word 7 /* tv font color */
 905 ???? 00000000 	    .word 0 /* FPSW */
 906 ???? 00000000 	    .word 0 /* FBASE */ 
 907 ???? 00000000 	    .word 0 /* BEEP_DTMR */
 908 ???? 00000000 	    .word 0 /* CSTATE */ 
 909 ???? 00000000 	    .word 0 /* BLKID */
 910 ???? 00000000 	    .word 0,0,0,0 /* BLKN,  array BLKN[4] */
 910      00000000 
 910      00000000 
 910      00000000 
 911 ???? 30710120 	    .word BLK_BUFFS  /* BLKN, blocks buffers base addres */
 912 ???? 00000000 	    .word 0 /* SRCID last block listed */   
 913 ???? 00000000 	    .word 0,0 
 913      00000000 
 914              	
 915              	ULAST:
 916              	
 917              	// used by _HEADER macro 
 918              	// to link names field
 919              	// in dictionary  
 920 ???? 12000000 	    .equ LINK, 0 
 920      C8000000 
 920      54530000 
 920      6C020000 
 920      AE020000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
ARM GAS  forth.s 			page 31


  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************
  21              	    ENVIRONMENT? 
  22              	    constants 
  23              	    vocabulary separate from 
  24              	    main dictionary  
  25              	*******************************/
  26              	
  27              	
  28              	/*******************************
  29              	    ENVIRONMENT? 
  30              	    ( c-addr u -- false | i * x true ) 
  31              	********************************/
  32 ???? 00000000 	    _HEADER ENVQ,12,"ENVIRONMENT?"
  32      0C454E56 
  32      49524F4E 
  32      4D454E54 
  32      3F0000BF 
  33 ???? 504700BF 	    _NEST 
  34              	    // save normal context 
  35 ???? 993A0000 	    _ADR CNTXT 
  36 ???? 6D320000 	    _ADR AT 
  37 ???? FD320000 	    _ADR TOR 
  38              	    // set environment context 
  39 ???? D7310000 	    _DOLIT _ENVLASTN  
  39      060B0000 
  40 ???? 993A0000 	    _ADR   CNTXT 
  41 ???? 59320000 	    _ADR   STORE 
  42              	    // search string 
  43 ???? 71330000 	    _ADR   DROP 
  44 ???? 39350000 	    _ADR   ONEM 
  45 ???? 914D0000 	    _ADR   NAMEQ
  46 ???? 91330000 	    _ADR   DUPP 
  47 ???? 17320000 	    _QBRAN  1f
  47      C8090000 
  48 ???? 71330000 	    _ADR   DROP 
  49 ???? ED310000 	    _ADR   EXECU 
  50 ???? 3F320000 	    _BRAN  2f
  50      D0090000 
  51 ???? A1330000 	1:  _ADR  SWAP 
  52 ???? 71330000 	    _ADR  DROP 
  53              	2:  // restore normal context 
  54 ???? 99320000 	    _ADR RFROM
  55 ???? 993A0000 	    _ADR CNTXT 
  56 ???? 59320000 	    _ADR STORE 
  57 ???? B72F0000 	    _UNNEST 
  58              	
  59              	
  60              	    .equ ENVLNK , 0 
  61              	
  62              		// dictionary header  
  63              		.macro _ENV_HEADER  label, nlen, name
  64              			.word ENVLNK 
  65              			.equ ENVLNK , . 
ARM GAS  forth.s 			page 32


  66              		_\label: .byte \nlen    // name field
  67              			.ascii "\name"
  68              			.p2align 2 
  69              		\label:   // code field 
  70              		.endm 
  71              		
  72              	
  73              	/***********************************
  74              	    envronment constants 
  75              	***********************************/
  76              	
  77              	/**********************************
  78              	    /COUNTED-STRING ( -- 255 t )
  79              	constant:
  80              	    255 maximum counted string length
  81              	*************************************/
  82 ???? 00000000 	    _ENV_HEADER CNTDSTR,15,"/COUNTED-STRING"
  82      0F2F434F 
  82      554E5445 
  82      442D5354 
  82      52494E47 
  83 ???? 47F8046D 	    _PUSH 
  84 ???? 4FF0FF06 	    MOV  TOS,#255
  85 ???? 8EE0     	    B flag_true
  86              	
  87              	
  88              	/******************************************
  89              	    /HOLD  ( -- 80 t )
  90              	    size of the pictured numeric 
  91              	    output string buffer, in characters
  92              	constant:
  93              	    80 bytes   
  94              	*******************************************/
  95 ???? E4090000 	    _ENV_HEADER SLHOLD,5,"/HOLD"
  95      052F484F 
  95      4C44
  96 ???? 47F8046D 	    _PUSH
  97 ???? 4FF05006 	    MOV TOS,#80
  98 ???? 84E0     	    B flag_true
  99              	
 100              	/***************************************
 101              	    /PAD ( -- 80 t )	
 102              	    size of the scratch area 
 103              	    pointed to by PAD, in characters
 104              	constant: 
 105              	    80 bytes 
 106              	***************************************/
 107 ???? 020A0000 	    _ENV_HEADER SLPAD,4,"/PAD"
 107      042F5041 
 107      4400
 108 ???? 47F8046D 	    _PUSH 
 109 ???? 4FF05006 	    MOV TOS,#80
 110 ???? 7AE0     	    B flag_true
 111              	
 112              	/**************************************
 113              	    ADDRESS-UNIT-BITS ( -- 32 t )
 114              	    size of one address unit, in bits
ARM GAS  forth.s 			page 33


 115              	constant:
 116              	    32 bits
 117              	**************************************/
 118 ???? 160A0000 	    _ENV_HEADER ADRBITS,17,"ADDRESS-UNIT-BITS"
 118      11414444 
 118      52455353 
 118      2D554E49 
 118      542D4249 
 119 ???? 47F8046D 	    _PUSH 
 120 ???? 4FF02006 	    MOV TOS,#32
 121 ???? 6AE0     	    B flag_true
 122              	
 123              	/***************************************
 124              	    FLOORED	( -- t ) 
 125              	    flag true if floored division 
 126              	    is the default
 127              	constant:
 128              	    true 
 129              	***************************************/
 130 ???? 2A0A0000 	    _ENV_HEADER FLOORED,7,"FLOORED"
 130      07464C4F 
 130      4F524544 
 130      00BF
 131 ???? 62E0     	    b flag_true
 132              	
 133              	/*************************************
 134              	    MAX-CHAR  ( -- 127 -1 t )
 135              	    maximum value of any character in 
 136              	    the implementation-defined 
 137              	    character set.
 138              	constant:
 139              	    127 
 140              	*************************************/
 141 ???? 4A0A0000 	    _ENV_HEADER MAXCHAR,8,"MAX-CHAR"
 141      084D4158 
 141      2D434841 
 141      5200
 142 ???? 47F8046D 	    _PUSH 
 143 ???? 4FF07F06 	    MOV TOS,#127 
 144 ???? 56E0     	    b flag_true 
 145              	
 146              	/************************************
 147              	    MAX-D	(-- 0xffffffff 0x7fffffff t )
 148              	    largest usable signed double number
 149              	constant:
 150              	    0x7FFF_FFFF_FFFF_FFFF 
 151              	************************************/
 152 ???? 5A0A0000 	    _ENV_HEADER MAXD,5,"MAX-D"
 152      054D4158 
 152      2D44
 153 ???? 47F8046D 	    _PUSH 
 154 ???? 4FF6FF76 	    _MOV32 TOS,0xFFFFFFFF 
 154      CFF6FF76 
 155 ???? 47F8046D 	    _PUSH
 156 ???? 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 156      C7F6FF76 
 157 ???? 44E0     	    B flag_true
ARM GAS  forth.s 			page 34


 158              	
 159              	/************************************
 160              	    MAX-N ( -- 0x7FFFFFFF t ) 
 161              	    largest usable signed integer
 162              	constant:
 163              	    0x7FFFFFFF
 164              	*************************************/
 165 ???? 720A0000 	    _ENV_HEADER MAXN,5,"MAX-N"
 165      054D4158 
 165      2D4E
 166 ???? 47F8046D 	    _PUSH 
 167 ???? 4FF6FF76 	    _MOV32 TOS,0x7FFFFFFF 
 167      C7F6FF76 
 168 ???? 38E0     	    B flag_true 
 169              	
 170              	/************************************
 171              	    MAX-U ( -- 0xFFFFFFFF t ) 
 172              	    largest usable unsigned integer
 173              	constant:
 174              	    0xFFFFFFFF 
 175              	************************************/
 176 ???? 960A0000 	    _ENV_HEADER MAXU,5,"MAX-U"
 176      054D4158 
 176      2D55
 177 ???? 47F8046D 	    _PUSH 
 178 ???? 4FF0FF36 	    MOV TOS,#-1 
 179 ???? 2EE0     	    B flag_true 
 180              	
 181              	/**********************************
 182              	    MAX-UD ( -- 0xFFFFFFFF 0xFFFFFFFFF t )
 183              	    largest usable unsigned double number
 184              	constant:
 185              	    0xFFFF_FFFF_FFFF_FFFF 
 186              	*************************************/
 187 ???? AE0A0000 	    _ENV_HEADER MAXUD,6,"MAX-UD"
 187      064D4158 
 187      2D554400 
 187      00BF
 188 ???? 47F8046D 	    _PUSH 
 189 ???? 4FF0FF36 	    MOV  TOS,#-1 
 190 ???? 47F8046D 	    _PUSH 
 191 ???? 4FF0FF36 	    MOV TOS,#-1 
 192 ???? 1EE0     	    B flag_true
 193              	
 194              	/*************************************
 195              	    RETURN-STACK-CELLS ( -- 32 t )
 196              	    maximum size of the return stack, 
 197              	    in cells
 198              	constant:
 199              	    32 cells 
 200              	************************************/
 201 ???? C20A0000 	    _ENV_HEADER RSTKCELLS,18,"RETURN-STACK-CELLS"
 201      12524554 
 201      55524E2D 
 201      53544143 
 201      4B2D4345 
 202 ???? 47F8046D 	    _PUSH 
ARM GAS  forth.s 			page 35


 203 ???? 4FF02006 	    MOV TOS,#32 
 204 ???? 0CE0     	    B flag_true
 205              	
 206              	/*************************************
 207              	    STACK-CELLS ( -- 32 t ) 
 208              	    maximum size of the data stack, 
 209              	    in cells
 210              	constant:
 211              	    32 cells 
 212              	*************************************/
 213 ???? E20A0000 		.word	ENVLNK 
 214              		ENVLINK = . 
 215 ???? 0B       	_ENVLASTN:	.byte 11
 216 ???? 53544143 		.ascii "STACK-CELLS"
 216      4B2D4345 
 216      4C4C53
 217 ???? 00BF     		.p2align 2	
 218              	STKCELLS: 
 219 ???? 47F8046D 	    _PUSH 
 220 ???? 4FF02006 	    MOV TOS,#32 
 221              	//    B flag_true 
 222              	
 223              	flag_true:
 224 ???? 47F8046D 	    _PUSH 
 225 ???? 4FF0FF36 	    MOV TOS,#-1 
 226 ???? 02F044BA 	    _NEXT 
 227              	
 228              	
 229              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    basic serial I/O 
  22              	**********************************/
  23              	
  24              	  .syntax unified
  25              	  .cpu cortex-m4
  26              	  .fpu softvfp 
  27              	  .thumb
  28              	
ARM GAS  forth.s 			page 36


  29              	
  30              	/**************************
  31              		UART RX handler
  32              	**************************/
  33              		.p2align 2
  34              		.type uart_rx_handler, %function
  35              	uart_rx_handler:
  36 ???? 4FF48053 		_MOV32 r3,UART 
  36      C4F20103 
  37 ???? 1868     		ldr r0,[r3,#USART_SR]
  38 ???? 5968     		ldr r1,[r3,#USART_DR]
  39 ???? 10F0200F 		tst r0,#(1<<5) // RXNE 
  40 ???? 0CD0     		beq 2f // no char received 
  41 ???? B1F1030F 		cmp r1,#VK_CTRL_C 
  42 ???? 3FF4AAAC 		beq user_reboot // received CTRL-C then reboot MCU 
  43 ???? 04F15400 		add r0,UP,#RX_QUEUE
  44 ???? A26E     		ldr r2,[UP,#RX_TAIL]
  45 ???? 8154     		strb r1,[r0,r2]
  46 ???? 02F10102 		add r2,#1 
  47 ???? 02F00F02 		and r2,#(RX_QUEUE_SIZE-1)
  48 ???? A266     		str r2,[UP,#RX_TAIL]
  49              	2:	
  50 ???? 7047     		bx lr 
  51              	
  52              	/*******************************
  53              	  initialize UART peripheral 
  54              	********************************/
  55              		.type ser_init, %function
  56              	ser_init:
  57              	/* set GPIOA PIN 9, uart TX  */
  58 ???? 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
  58      C4F20200 
  59 ???? 0168     	  ldr r1,[r0,#GPIO_MODER]
  60 ???? 6FF47012 	  mvn r2,#0xf<<(2*9)
  61 ???? 01EA0201 	  and r1,r1,r2
  62 ???? 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
  63 ???? 41EA0201 	  orr r1,r1,r2 
  64 ???? 0160     	  str r1,[r0,#GPIO_MODER]
  65              	/* select alternate functions USART1==AF07 */ 
  66 ???? 4FF4EE61 	  mov r1,#0x77<<4 
  67 ???? 4162     	  str r1,[r0,#GPIO_AFRH]
  68              	/* configure USART1 registers */
  69 ???? 4FF48050 	  _MOV32 r0,UART 
  69      C4F20100 
  70              	/* BAUD rate */
  71 ???? 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
  72 ???? 8160     	  str r1,[r0,#USART_BRR]
  73 ???? 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
  74 ???? C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
  75              	/* set interrupt priority */
  76 ???? 4FF02500 	  mov r0,#USART1_IRQ 
  77 ???? 4FF00701 	  mov r1,#7
  78 ???? 00B5FFF7 	  _CALL nvic_set_priority
  78      A7FD5DF8 
  78      04EB
  79              	/* enable interrupt in NVIC */
  80 ???? 4FF02500 	  mov r0,#USART1_IRQ 
ARM GAS  forth.s 			page 37


  81 ???? 00B5FFF7 	  _CALL nvic_enable_irq  
  81      B9FD5DF8 
  81      04EB
  82 ???? 7047     	  _RET  
  83              	
  84              	
  85              	
  86              	/***********************************************************
  87              	    SER-KEY?  ( -- c T | F )
  88              	 	Return input character and true, or a false if no input.
  89              	************************************************************/
  90 ???? 70090000 	    _HEADER SER_QKEY,8,"SER-KEY?"
  90      08534552 
  90      2D4B4559 
  90      3F00
  91 ???? 47F8046D 		_PUSH
  92 ???? A06E     		ldr T0,[UP,#RX_TAIL] 
  93 ???? 616E     		ldr T1,[UP,#RX_HEAD]
  94 ???? 90EA0106 		eors TOS,T0,T1 
  95 ???? 0CD0     		beq 1f
  96 ???? 04F15400 		add T0,UP,#RX_QUEUE 
  97 ???? 0844     		add T0,T1 
  98 ???? 0678     		ldrb TOS,[T0]
  99 ???? 01F10101 		add T1,#1 
 100 ???? 01F00F01 		and T1,#(RX_QUEUE_SIZE-1)
 101 ???? 6166     		str T1,[UP,#RX_HEAD]
 102 ???? 47F8046D 		_PUSH 
 103 ???? 4FF0FF36 		mov TOS,#-1
 104 ???? 02F0E4B9 	1:	_NEXT 
 105              	
 106              	/*******************************************
 107              	    SER-EMIT	 ( c -- )
 108              	    Send character c to the serial device.
 109              	*******************************************/
 110 ???? B20B0000 	    _HEADER SER_EMIT,8,"SER-EMIT"
 110      08534552 
 110      2D454D49 
 110      540000BF 
 111 ???? 4FF48055 		_MOV32 WP,UART 
 111      C4F20105 
 112 ???? 2868     	1:  ldr T0,[WP,#USART_SR]
 113 ???? 10F0800F 	    tst T0,#0x80 // TXE flag 
 114 ???? FBD0     		beq 1b 
 115 ???? 2E71     		strb TOS,[WP,#USART_DR]	 
 116 ???? 57F8046B 		_POP
 117 ???? 02F0CFB9 		_NEXT 
 118              	
 119              	
 120              	/****************************************
 121              	    LOCAL ( -- 0 )
 122              	    constant: local console id 
 123              	****************************************/
 124 ???? EC0B0000 	        _HEADER LOCAL,5,"LOCAL"
 124      054C4F43 
 124      414C
 125 ???? 47F8046D 	        _PUSH 
 126 ???? 4FF00006 	        mov TOS,#0
ARM GAS  forth.s 			page 38


 127 ???? 02F0C4B9 	        _NEXT 
 128              	
 129              	/****************************************
 130              	    SERIAL ( -- 1 )
 131              	    constant: serial console id 
 132              	****************************************/
 133 ???? 160C0000 	        _HEADER SERIAL,6,"SERIAL"
 133      06534552 
 133      49414C00 
 134 ???? 47F8046D 	        _PUSH 
 135 ???? 4FF00106 	        mov TOS,#1
 136 ???? 02F0B8B9 	        _NEXT 
 137              	
 138              	/****************************************
 139              	    CONSOLE ( id -- )
 140              	    select active user interface 
 141              	****************************************/
 142 ???? 2C0C0000 	        _HEADER CONSOLE,7,"CONSOLE"
 142      07434F4E 
 142      534F4C45 
 143 ???? 3046     	        mov T0,TOS
 144 ???? 57F8046B 	        _POP 
 145 ???? 28B1     	        cbz T0, 4f 
 146              	// serial console 
 147 ???? 4B48     	        ldr T0,=SER_QKEY 
 148 ???? 6061     	        str T0,[UP,#STDIN]
 149 ???? 4B48     	        ldr T0,=SER_EMIT
 150 ???? A061     	        str T0,[UP,#STDOUT]
 151 ???? 02F0A8B9 	        _NEXT 
 152              	4: // local console 
 153 ???? 4A48     	        ldr T0,=PS2_QKEY
 154 ???? 6061     	        str T0,[UP,#STDIN]
 155 ???? 4A48     	        ldr T0,=TV_EMIT
 156 ???? A061     	        str T0,[UP,#STDOUT]
 157 ???? 02F0A2B9 	        _NEXT 
 158              	
 159              	/*******************************
 160              	    ANSI-PARAM ( n -- )
 161              	    convert and transmit 
 162              	    ANSI ESC[  parameter 
 163              	*******************************/
 164 ???? 440C0000 	      _HEADER ANSI_PARAM,10,"ANSI-PARAM"
 164      0A414E53 
 164      492D5041 
 164      52414D00 
 165 ???? 504700BF 	      _NEST 
 166 ???? D7310000 	      _DOLIT -1 // c 
 166      FFFFFFFF 
 167 ???? 29350000 	1:    _ADR ONEP  // c+1
 168 ???? FD320000 	      _ADR TOR   
 169 ???? D7310000 	      _DOLIT 10 
 169      0A000000 
 170 ???? 453E0000 	      _ADR SLMOD // r q  
 171 ???? DD350000 	      _ADR QDUP  // r q q | r 0  
 172 ???? 17320000 	      _QBRAN 2f  // r 0 
 172      B40C0000 
 173 ???? 99320000 	      _ADR RFROM // r q c 
ARM GAS  forth.s 			page 39


 174 ???? 3F320000 	      _BRAN 1b
 174      880C0000 
 175 ???? D7310000 	2:    _DOLIT '0'  
 175      30000000 
 176 ???? CD340000 	      _ADR PLUS 
 177 ???? 79300000 	      _ADR EMIT 
 178 ???? 99320000 	      _ADR RFROM 
 179 ???? DD350000 	      _ADR QDUP 
 180 ???? 17320000 	      _QBRAN 3f
 180      E40C0000 
 181 ???? 39350000 	      _ADR ONEM 
 182 ???? FD320000 	      _ADR TOR 
 183 ???? 3F320000 	      _BRAN 2b 
 183      B40C0000 
 184              	3:    
 185 ???? B72F0000 	      _UNNEST 
 186              	
 187              	/******************************
 188              	    ESC[ 
 189              	    send ANSI escape sequence
 190              	*******************************/
 191 ???? 700C0000 	      _HEADER ANSI_ESC,4,"ESC["
 191      04455343 
 191      5B0000BF 
 192 ???? 504700BF 	      _NEST 
 193 ???? D7310000 	      _DOLIT 27 
 193      1B000000 
 194 ???? 79300000 	      _ADR EMIT 
 195 ???? D7310000 	      _DOLIT '['
 195      5B000000 
 196 ???? 79300000 	      _ADR EMIT 
 197 ???? B72F0000 	      _UNNEST 
 198              	
 199              	/*************************************
 200              	    SER-AT ( line col -- )
 201              	    move cursor on serial console
 202              	*************************************/
 203 ???? EC0C0000 	      _HEADER SER_AT,6,"SER-AT"
 203      06534552 
 203      2D415400 
 204 ???? 504700BF 	      _NEST
 205 ???? F50C0000 	      _ADR ANSI_ESC
 206 ???? A1330000 	      _ADR SWAP 
 207 ???? 7D0C0000 	      _ADR ANSI_PARAM 
 208 ???? D7310000 	      _DOLIT ';'
 208      3B000000 
 209 ???? 79300000 	      _ADR EMIT
 210 ???? 7D0C0000 	      _ADR ANSI_PARAM
 211 ???? D7310000 	      _DOLIT 'H'
 211      48000000 
 212 ???? 79300000 	      _ADR EMIT 
 213 ???? B72F0000 	      _UNNEST 
 214              	
 215              	/****************************
 216              	    SER-CLS ( -- )
 217              	    serial clear screeen 
 218              	****************************/
ARM GAS  forth.s 			page 40


 219 ???? 180D0000 	    _HEADER SER_CLS,7,"SER-CLS"
 219      07534552 
 219      2D434C53 
 220 ???? 504700BF 	    _NEST
 221 ???? D7310000 	    _DOLIT 1 
 221      01000000 
 222 ???? 91330000 	    _ADR DUPP 
 223 ???? 210D0000 	    _ADR SER_AT  
 224 ???? F50C0000 	    _ADR ANSI_ESC
 225 ???? D7310000 	    _DOLIT 'J'
 225      4A000000 
 226 ???? 79300000 	    _ADR EMIT 
 227 ???? B72F0000 	    _UNNEST 
 228 ???? BC0B0000 	
 228      F80B0000 
 228      3C1A0000 
 228      04130000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*********************************************
  21              	    user interface using an NTSC monitor and 
  22              	    a PS2 keyboard 
  23              	**********************************************/
  24              	
  25              	  .syntax unified
  26              	  .cpu cortex-m4
  27              	  .fpu softvfp 
  28              	  .thumb
  29              	
  30              	  .include "stm32f411ce.inc"
  31              	  .include "tvout.inc"
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
ARM GAS  forth.s 			page 41


  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	  .equ HRES, 320  // horizontal resolution
  20              	  .equ VRES, 200   // vertical resolution
  21              	  .equ BPP, 4     // bits per pixel
  22              	  .equ BPR, (HRES*BPP/8)  // bytes per row
  23              	  .equ VIDEO_BUFFER_SIZE, (VRES*BPR) // bytes 
  24              	
  25              	  .equ CHAR_WIDTH, 6 
  26              	  .equ CHAR_HEIGHT, 8
  27              	  
  32              	
  33              	  .equ FCLK, 96000000
  34              	  .equ FHORZ, 15734 
  35              	  .equ HPER,(FCLK/FHORZ-1)
  36              	  .equ SYNC_LINE,(FCLK/(2*FHORZ)-1)
  37              	  .equ HPULSE, (FCLK/1000000*47/10 -1) // 4.7ÂµS
  38              	  .equ SERRATION,(FCLK/1000000*23/10-1) // 2.3ÂµS
  39              	  .equ VSYNC_PULSE,(FCLK/1000000*271/10-1)  // 27.1Âµs
  40              	  .equ LEFT_MARGIN, (750) 
  41              	  .equ VIDEO_FIRST_LINE, 40
  42              	  .equ VIDEO_LAST_LINE, (VIDEO_FIRST_LINE+VRES)
  43              	  .equ VIDEO_DELAY,(FCLK/1000000*14-1) // 14ÂµSec
  44              	  .equ VIDEO_END, (FCLK/1000000*62-1) // 62ÂµSec
  45              	
  46              	// video state 
  47              	  .equ ST_VSYNC, 0 
  48              	  .equ ST_PREVID,1 
  49              	  .equ ST_VIDEO,2 
  50              	  .equ ST_POSTVID,3    
  51              	// field 
  52              	   .equ ODD_FIELD,0 
  53              	   .equ EVEN_FIELD,-1
  54              	
  55              	  // video DAC port 
  56              	  .equ VID_GPIO, GPIOB_BASE_ADR 
  57              	  // video output DAC bits 
  58              	  .equ VB0, 12 
  59              	  .equ VB1, 13 
  60              	  .equ VB2, 14 
  61              	  .equ VB3, 15 
  62              	
  63              	/*******************************************************
  64              	NOTES:
  65              	 1) Values computed for a 96Mhz sysclock 
  66              	 2) Video sync output on PB1 use T3_CH4
  67              	 3) video out trigger TIMER3 CH3 
  68              	********************************************************/
  69              	
  70              	/**************************************
ARM GAS  forth.s 			page 42


  71              	  initialize TIMER3 CH4 to generate tv_out
  72              	  synchronization signal.
  73              	**************************************/ 
  74              	  _GBL_FUNC tv_init
  75              	// configure PB12:15 as OUTPUT_PP 
  76 ???? 4FF48060 	  _MOV32 r0,VID_GPIO
  76      C4F20200 
  77 ???? 0168     	  ldr r1,[r0,#GPIO_MODER]
  78 ???? 4FF00002 	  _MOV32 r2,0x55000000
  78      C5F20052 
  79              	//  eor r2,r2 
  80              	//  movt r2,#0x55<<8 
  81 ???? 41EA0201 	  orr r1,r2
  82 ???? 0160     	  str r1,[r0,#GPIO_MODER]
  83 ???? 81EA0101 	  eor r1,r1 
  84 ???? 4161     	  str r1,[r0,#GPIO_ODR]  
  85              	// configure PB1 as OUTPUT_AFPP 
  86              	// this is TIM3_CC4 output compare 
  87 ???? 4FF00101 	  mov r1,#1 // pin 1 
  88 ???? 4FF00202 	  mov r2,#OUTPUT_AFPP // mode+type  
  89 ???? 00B5FFF7 	  _CALL gpio_config 
  89      F0FC5DF8 
  89      04EB
  90 ???? 4FF00101 	  mov r1,#1 
  91 ???? 4FF00202 	  mov r2,#2
  92 ???? 00B5FFF7 	  _CALL gpio_speed 
  92      26FD5DF8 
  92      04EB
  93              	//  mov r2,#(2<<4) // alternate function 2 on BP1==TIM3_CH4 
  94 ???? 016A     	  ldr r1,[r0,#GPIO_AFRL]
  95 ???? 41F02001 	  orr r1,#(2<<4) // AF2 
  96 ???? 0162     	  str r1,[r0,#GPIO_AFRL]
  97              	// enable peripheral clock 
  98 ???? 4FF46052 	  _MOV32 r2,RCC_BASE_ADR 
  98      C4F20202 
  99 ???? 4FF00200 	  mov r0,#2 
 100 ???? 116C     	  ldr r1,[r2,#RCC_APB1ENR]
 101 ???? 41EA0001 	  orr r1,r0 
 102 ???? 1164     	  str r1,[r2,#RCC_APB1ENR]
 103              	// configure TIMER3   
 104 ???? 4FF48062 	  _MOV32 r2,TIM3_BASE_ADR
 104      C4F20002 
 105 ???? 41F2D470 	  mov r0,#HPER
 106 ???? D062     	  str r0,[r2,#TIM_ARR]
 107 ???? 40F23F50 	  mov r0,#VIDEO_DELAY 
 108 ???? D063     	  str r0,[r2,#TIM_CCR3]
 109 ???? 4FF4E170 	  mov r0,#HPULSE 
 110 ???? 1064     	  str r0,[r2,#TIM_CCR4]  
 111 ???? 47F27000 	  mov r0,#(7<<12)+(7<<4)
 112 ???? D061     	  str r0,[r2,#TIM_CCMR2]
 113 ???? 4FF48850 	  mov r0,#(1<<12)+(1<<8)
 114 ???? 1062     	  str r0,[r2,#TIM_CCER]
 115 ???? 4FF00100 	  mov r0,#1 
 116 ???? D060     	  str r0,[r2,#TIM_DIER]
 117 ???? 1060     	  str r0,[r2,#TIM_CR1] //CEN 
 118              	// enable interrupt in NVIC controller 
 119 ???? 4FF01D00 	  mov r0,#TIM3_IRQ 
ARM GAS  forth.s 			page 43


 120 ???? 4FF00201 	  mov r1,#2
 121 ???? 00B5FFF7 	  _CALL nvic_set_priority
 121      5DFC5DF8 
 121      04EB
 122 ???? 4FF01D00 	  mov r0,#TIM3_IRQ 
 123 ???? 00B5FFF7 	  _CALL nvic_enable_irq
 123      6FFC5DF8 
 123      04EB
 124 ???? 7047     	  _RET
 125              	
 126              	/*************************************
 127              	  TIMER3 interrupt for tv_out
 128              	  T1 line # 
 129              	  T0 TIM3_BASE_ADR 
 130              	*************************************/
 131 ???? 00BF     	  _GBL_FUNC tv_out_isr
 132 ???? 4FF48060 	  _MOV32 T0,TIM3_BASE_ADR
 132      C4F20000 
 133 ???? 81EA0101 	  eor T1,T1
 134 ???? 0161     	  str T1,[T0,#TIM_SR]
 135 ???? E16E     	  ldr T1,[UP,#VID_CNTR]
 136 ???? 01F10101 	  add T1,#1 
 137 ???? E166     	  str T1,[UP,#VID_CNTR]
 138              	/** machine state cases **/
 139 ???? 226F     	  ldr T2,[UP,#VID_STATE]
 140 ???? 002A     	  cmp T2,#ST_VSYNC 
 141 ???? 07D0     	  beq state_vsync
 142 ???? 012A     	  cmp T2,#ST_PREVID 
 143 ???? 2FD0     	  beq state_pre_video 
 144 ???? 022A     	  cmp T2,#ST_VIDEO 
 145 ???? 36D0     	  beq state_video_out 
 146 ???? 032A     	  cmp T2,#ST_POSTVID 
 147 ???? 63D0     	  beq state_post_video
 148 ???? FFF7FEBF 	  b default_handler // invalid state 
 149              	/*** vertical sync state **/
 150              	state_vsync:
 151 ???? 0129     	  cmp T1,#1
 152 ???? 06D1     	  bne 1f 
 153              	/****** set vertical pre-sync  *****/
 154 ???? 4FF0DB01 	  mov T1,#SERRATION
 155 ???? 0164     	  str T1,[T0,#TIM_CCR4]
 156 ???? 40F6E931 	  mov T1,#SYNC_LINE 
 157 ???? C162     	  str T1,[T0,#TIM_ARR]
 158 ???? 6BE0     	  b tv_isr_exit 
 159 ???? 0729     	1: cmp T1,#7
 160 ???? 03D1     	  bne 2f 
 161              	// vertical sync pulse   
 162 ???? 40F62821 	  mov T1,#VSYNC_PULSE
 163 ???? 0164     	  str T1,[T0,#TIM_CCR4]
 164 ???? 65E0     	  b tv_isr_exit
 165 ???? 0D29     	2: cmp T1,#13
 166 ???? 03D1     	   bne 3f  
 167              	// set vertical post-sync    
 168 ???? 4FF0DB01 	   mov T1,#SERRATION 
 169 ???? 0164     	   str T1,[T0,#TIM_CCR4]
 170 ???? 5FE0     	   b tv_isr_exit   
 171 ???? 1229     	3: cmp T1,#18
ARM GAS  forth.s 			page 44


 172 ???? 03D1     	   bne 4f 
 173              	// if even field full line  
 174 ???? 616F     	   ldr T1,[UP,#VID_FIELD]
 175 ???? 0029     	   cmp T1,#ODD_FIELD  
 176 ???? 5AD0     	   beq tv_isr_exit 
 177 ???? 01E0     	   b sync_end 
 178 ???? 1329     	4: cmp T1,#19 
 179 ???? 57D1     	   bne tv_isr_exit
 180              	sync_end: 
 181 ???? 4FF00901 	   mov T1,#9
 182 ???? E166     	   str T1,[UP,#VID_CNTR]
 183 ???? 4FF4E171 	   mov T1,#HPULSE 
 184 ???? 0164     	   str T1,[T0,#TIM_CCR4] 
 185 ???? 41F2D471 	   mov T1,#HPER 
 186 ???? C162     	   str T1,[T0,#TIM_ARR] 
 187 ???? 4FF00101 	   mov T1,#ST_PREVID 
 188 ???? 2167     	   str T1,[UP,#VID_STATE]
 189 ???? 4AE0     	   b tv_isr_exit 
 190              	/*****************************/
 191              	state_pre_video:
 192 ???? 2829     	   cmp T1,#VIDEO_FIRST_LINE
 193 ???? 48D4     	   bmi tv_isr_exit 
 194 ???? 4FF00201 	   mov T1,#ST_VIDEO 
 195 ???? 2167     	   str T1,[UP,#VID_STATE]
 196 ???? 4FF00801 	   mov T1,#(1<<3) // CC3IE 
 197 ???? C160     	   str T1,[T0,#TIM_DIER]
 198 ???? 41E0     	   b tv_isr_exit 
 199              	/**************************
 200              	    VIDEO OUTPUT 
 201              	**************************/   
 202              	state_video_out:
 203 ???? F029     	   cmp T1,#VIDEO_LAST_LINE 
 204 ???? 06D9     	   bls 1f 
 205 ???? 4FF00301 	   mov T1,#ST_POSTVID 
 206 ???? 2167     	   str T1,[UP,#VID_STATE]
 207 ???? 4FF00101 	   mov T1,#1 
 208 ???? C160     	   str T1,[T0,#TIM_DIER]
 209 ???? 38E0     	   b tv_isr_exit 
 210              	1: // video output
 211 ???? A06F     	   ldr T0,[UP,#VID_BUFFER]
 212 ???? A1F12901 	   sub T1,#(VIDEO_FIRST_LINE+1) 
 213 ???? 4FF0A003 	   mov T3,#BPR 
 214 ???? 03FB01F1 	   mul T1,T3 
 215 ???? 0844     	   add T0,T1  
 216 ???? 4FF48061 	   _MOV32 T1,VID_GPIO 
 216      C4F20201 
 217              	// T0 video buffer ptr 
 218              	// T1 VID_GPIO  
 219              	// T2 temp 
 220              	// T3 byte counter 
 221 ???? 10F8012B 	2: ldrb T2,[T0],#1 
 222 ???? 4FEA0222 	   lsl T2,#8 
 223 ???? 8A82     	   strh T2,[T1,#GPIO_ODR]
 224 ???? AFF30080 	   nop.w 
 225 ???? AFF30080 	   nop.w
 226 ???? AFF30080 	   nop.w 
 227 ???? AFF30080 	   nop.w 
ARM GAS  forth.s 			page 45


 228 ???? 4FEA0212 	   lsl T2,#4  
 229 ???? 8A82     	   strh T2,[T1,#GPIO_ODR]
 230 ???? AFF30080 	   nop.w
 231 ???? AFF30080 	   nop.w  
 232 ???? 013B     	   subs T3,#1
 233 ???? E9D1     	   bne 2b  
 234 ???? 4FF47022 	   mov T2,#(15<<16) 
 235 ???? 8A61     	   str T2,[T1,#GPIO_BSRR]
 236 ???? 12E0     	   b tv_isr_exit 
 237              	state_post_video:
 238 ???? 4FF48372 	   mov T2,#262
 239 ???? 9142     	   cmp T1,T2
 240 ???? 0ED4     	   bmi tv_isr_exit     
 241              	// odd field line 262 half line 
 242 ???? 616F     	   ldr T1,[UP,VID_FIELD]
 243 ???? 11B9     	   cbnz T1, frame_end 
 244 ???? 40F6E931 	   mov T1,#SYNC_LINE
 245 ???? C162     	   str T1,[T0,#TIM_ARR]      
 246              	frame_end: 
 247 ???? 4FF00001 	   mov T1,#ST_VSYNC 
 248 ???? 2167     	   str T1,[UP,#VID_STATE]
 249 ???? 81EA0101 	   eor T1,T1 
 250 ???? E166     	   str T1,[UP,#VID_CNTR]
 251 ???? 616F     	   ldr T1,[UP,#VID_FIELD]
 252 ???? 6FEA0101 	   mvn T1,T1  
 253 ???? 6167     	   str T1,[UP,#VID_FIELD]
 254              	tv_isr_exit: 
 255 ???? 7047     	   _RET   
 256              	
 257              	
 258              	/***************************
 259              	    FORTH WORDS 
 260              	***************************/
 261              	
 262              	// BACK-COLOR ( -- a )
 263              	//   back color variable 
 264 ???? 540D0000 	   _HEADER BACKCOLOR,10,"BACK-COLOR" 
 264      0A424143 
 264      4B2D434F 
 264      4C4F5200 
 265 ???? 47F8046D 		_PUSH 
 266 ???? 04F1A006 		ADD TOS,UP,#BK_COLOR
 267 ???? 02F01CB8 		_NEXT
 268              	
 269              	// PEN-COLOR ( -- a )
 270              	// pen color variable 
 271 ???? 600F0000 	  _HEADER PENCOLOR,9,"PEN-COLOR"
 271      0950454E 
 271      2D434F4C 
 271      4F5200BF 
 272 ???? 47F8046D 		_PUSH 
 273 ???? 04F1A406 		ADD TOS,UP,#PEN_COLOR
 274 ???? 02F00EB8 		_NEXT 
 275              	
 276              	// COLUMN ( -- a )
 277              	// cursor column variable 
 278 ???? 7C0F0000 	  _HEADER CURSOR_COL,6,"COLUMN"
ARM GAS  forth.s 			page 46


 278      06434F4C 
 278      554D4E00 
 279 ???? 47F8046D 	  _PUSH 
 280 ???? 04F19C06 	  ADD TOS,UP,#COL 
 281 ???? 02F002B8 	  _NEXT 
 282              	
 283              	// ROW ( -- a )
 284              	// cursor row 
 285 ???? 980F0000 	  _HEADER CURSOR_ROW,3,"ROW"
 285      03524F57 
 286 ???? 47F8046D 	  _PUSH 
 287 ???? 04F19806 	  ADD TOS,UP,#ROW 
 288 ???? 01F0F8BF 	  _NEXT 
 289              	
 290              	// ROW>Y ( n1 - n2 )
 291              	// convert cursor row to y coord 
 292 ???? B00F0000 	  _HEADER ROWY,5,"ROW>Y"
 292      05524F57 
 292      3E5900BF 
 293 ???? 4FF00800 	  mov T0,#CHAR_HEIGHT
 294 ???? 00FB06F6 	  mul TOS,T0 
 295 ???? 01F0ECBF 	  _NEXT 
 296              	
 297              	// COL>X ( n1 -- n2 )
 298              	// convert cursor column to x coord 
 299 ???? C40F0000 	  _HEADER COLX,5,"COL>X" 
 299      05434F4C 
 299      3E5800BF 
 300 ???? 4FF00600 	  mov T0,#CHAR_WIDTH 
 301 ???? 00FB06F6 	  mul TOS,T0 
 302 ???? 01F0E0BF 	  _NEXT 
 303              	
 304              	// FONT ( -- a )
 305              	// return address of font table
 306 ???? DC0F0000 	  _HEADER FONT,4,"FONT" 
 306      04464F4E 
 306      540000BF 
 307 ???? 47F8046D 	  _PUSH 
 308 ???? DFF88C65 	  ldr TOS,=font_6x8 
 309 ???? 01F0D4BF 	  _NEXT 
 310              	
 311              	// VIDBUFF ( -- a )
 312              	// address of video buffer 
 313 ???? F40F0000 	  _HEADER VIDBUFF,7,"VIDBUFF"
 313      07564944 
 313      42554646 
 314 ???? 47F8046D 	  _PUSH 
 315 ???? A66F     	  LDR TOS,[UP,#VID_BUFFER]
 316 ???? 01F0C9BF 	  _NEXT 
 317              	
 318              	
 319              	// PLOT ( x y op -- )
 320              	// draw a pixel 
 321              	//    0 back color 
 322              	//    1 pen color 
 323              	//    2 invert (invert color pixels )
 324              	//    3 xor pen color  
ARM GAS  forth.s 			page 47


 325 ???? 0C100000 	    _HEADER PLOT,4,"PLOT"
 325      04504C4F 
 325      5400
 326              	// compute video buffer byte address from coords
 327 ???? 03CF     	    ldmfd DSP!,{T0,T1} // T0=y,T1=x 
 328 ???? 4FF0A002 	    mov T2,#BPR // bytes per row  
 329 ???? 02FB00F0 	    mul T0,T2 
 330 ???? 4FEA5102 	    lsr T2,T1,#1 // 2 pixels per byte  
 331 ???? 1044     	    add T0,T2 
 332 ???? A36F     	    ldr T3,[UP,#VID_BUFFER] 
 333 ???? 0344     	    add T3,T0 // T3 -> byte address 
 334 ???? 1D78     	    ldrb WP,[T3] // byte in buffer, 2 pixels 
 335 ???? 4FF00F02 	    mov T2,#15 // AND mask 
 336 ???? 11F0010F 	    tst T1,#1 
 337 ???? 01D0     	    beq 1f 
 338 ???? 4FEA0212 	    lsl T2,#4 // mask out low nibble for odd pixel  
 339 ???? DFF84405 	1:  ldr T0,=plot_op 
 340 ???? D0E806F0 	    tbb [T0,TOS]
 341              	op_back:
 342 ???? 05EA0205 	    and WP,T2 // mask out nibble 
 343 ???? 94F8A000 	    ldrb T0,[UP,#BK_COLOR]
 344 ???? 11F0010F 	    tst T1,#1 
 345 ???? 01D1     	    bne 1f 
 346 ???? 4FEA0010 	    lsl T0,#4 // high nibble  
 347 ???? 45EA0005 	1:  orr WP,T0  
 348 ???? 1D70     	    strb WP,[T3]
 349 ???? 1AE0     	    b 9f 
 350              	op_pen: 
 351 ???? 05EA0205 	    and WP,T2 
 352 ???? 94F8A400 	    ldrb T0,[UP,#PEN_COLOR]
 353 ???? 11F0010F 	    tst T1,#1
 354 ???? 01D1     	    bne 1f 
 355 ???? 4FEA0010 	    lsl T0,#4 // even pixel high nibble 
 356 ???? 45EA0005 	1:	orr WP,T0 
 357 ???? 1D70     	    strb WP,[T3]
 358 ???? 0DE0     	    b 9f 
 359              	op_invert:
 360 ???? 85EA0205 	    eor WP,T2 
 361 ???? 1D70     	    strb WP,[T3]
 362 ???? 09E0     	    b 9f 
 363              	op_xor:
 364 ???? D4F8A400 	    ldr T0,[UP,#PEN_COLOR]
 365 ???? 11F0010F 	    tst T1,#1 
 366 ???? 01D1     	    bne 1f 
 367 ???? 4FEA0010 	    lsl T0,#4 
 368 ???? 85EA0005 	1:  eor WP,T0 
 369 ???? 1D70     	    strb WP,[T3]
 370 ???? 57F8046B 	9:  _POP 
 371 ???? 01F082BF 	    _NEXT 
 372              	
 373 ???? 000D1A1E 	plot_op: .byte 0, (op_pen-op_back)/2,(op_invert-op_back)/2,(op_xor-op_back)/2
 374              	
 375              	
 376              	// VSYNC ( -- )
 377              	// wait vertical sync phase 
 378 ???? 22100000 	    _HEADER VSYNC,5,"VSYNC"
 378      05565359 
ARM GAS  forth.s 			page 48


 378      4E4300BF 
 379 ???? E06E     	1:  ldr T0,[UP,#VID_CNTR]
 380 ???? 0028     	    cmp T0,#0
 381 ???? FCD1     	    bne 1b
 382 ???? 01F075BF 	    _NEXT 
 383              	
 384              	// CLS ( -- )
 385              	// clear TV screen 
 386 ???? B4100000 	    _HEADER CLS,3,"CLS"
 386      03434C53 
 386      00BF
 387 ???? 80EA0000 	    eor T0,T0 
 388 ???? 94F8A010 	    ldrb T1,[UP,#BK_COLOR]
 389 ???? 40EA0100 	    orr T0,T1 
 390 ???? 4FEA0111 	    lsl T1,#4 
 391 ???? 40EA0100 	    orr T0,T1 
 392 ???? 4FEA0021 	    lsl T1,T0,#8 
 393 ???? 40EA0100 	    orr T0,T1 
 394 ???? 4FEA0041 	    lsl T1,T0,#16
 395 ???? 40EA0100 	    orr T0,T1 
 396 ???? 47F6FC41 	    mov T1,#VIDEO_BUFFER_SIZE-4   
 397 ???? A26F     	    ldr T2,[UP,#VID_BUFFER]
 398 ???? 5050     	1:	str T0,[T2,T1]
 399 ???? 0439     	    subs T1,#4
 400 ???? FCD1     	    bne 1b
 401 ???? 1060     	    str T0,[T2]
 402 ???? 80EA0000 	    eor T0,T0 
 403 ???? C4F89800 	    str T0,[UP,#ROW]
 404 ???? C4F89C00 	    str T0,[UP,#COL]
 405 ???? 01F04FBF 	    _NEXT 
 406              	
 407              	
 408              	// CLRLINE ( n -- )
 409              	// clear text line 
 410 ???? CA100000 	  _HEADER CLRLINE,7,"CLRLINE"
 410      07434C52 
 410      4C494E45 
 410      00BF
 411 ???? 504700BF 	  _NEST
 412 ???? D7310000 	  _DOLIT (BPR*CHAR_HEIGHT)
 412      00050000 
 413 ???? 91330000 	  _ADR DUPP  
 414 ???? FD320000 	  _ADR TOR 
 415 ???? ED340000 	  _ADR STAR
 416 ???? 15100000 	  _ADR VIDBUFF
 417 ???? CD340000 	  _ADR PLUS
 418 ???? 99320000 	  _ADR RFROM   
 419 ???? D7310000 	  _DOLIT 0 
 419      00000000 
 420 ???? 15410000 	  _ADR FILL 
 421 ???? B72F0000 	  _UNNEST 
 422              	
 423              	/**********************************
 424              	 SCROLLUP ( -- )
 425              	 scroll up tv screen 1 char height 
 426              	**********************************/
 427 ???? 16110000 	    _HEADER SCROLLUP,8,"SCROLLUP"
ARM GAS  forth.s 			page 49


 427      08534352 
 427      4F4C4C55 
 427      500000BF 
 428 ???? 504700BF 	    _NEST 
 429 ???? 15100000 	    _ADR VIDBUFF 
 430 ???? 91330000 	    _ADR DUPP 
 431 ???? D7310000 	    _DOLIT BPR*CHAR_HEIGHT 
 431      00050000 
 432 ???? 91330000 	    _ADR DUPP 
 433 ???? FD320000 	    _ADR TOR 
 434 ???? CD340000 	    _ADR PLUS 
 435 ???? A1330000 	    _ADR SWAP 
 436 ???? D7310000 	    _DOLIT VIDEO_BUFFER_SIZE 
 436      007D0000 
 437 ???? 99320000 	    _ADR RFROM  
 438 ???? DD340000 	    _ADR SUBB 
 439 ???? CD400000 	    _ADR WMOVE
 440 ???? D7310000 	    _DOLIT 24 
 440      18000000 
 441 ???? 21110000 	    _ADR CLRLINE 
 442 ???? B72F0000 	    _UNNEST 
 443              	
 444              	/***********************************
 445              	    SCROLLDOWN ( -- )
 446              	    scroll down tv screen 1 char 
 447              	***********************************/
 448 ???? 58110000 	    _HEADER SCROLLDOWN,10,"SCROLLDOWN"
 448      0A534352 
 448      4F4C4C44 
 448      4F574E00 
 449 ???? 504700BF 	    _NEST 
 450 ???? 15100000 	    _ADR VIDBUFF
 451 ???? 91330000 	    _ADR DUPP 
 452 ???? D7310000 	    _DOLIT BPR*CHAR_HEIGHT 
 452      00050000 
 453 ???? CD340000 	    _ADR PLUS 
 454 ???? D7310000 	    _DOLIT VIDEO_BUFFER_SIZE 
 454      007D0000 
 455 ???? D7310000 	    _DOLIT BPR*CHAR_HEIGHT 
 455      00050000 
 456 ???? DD340000 	    _ADR SUBB  
 457 ???? CD400000 	    _ADR WMOVE
 458 ???? D7310000 	    _DOLIT 0 
 458      00000000 
 459 ???? 21110000 	    _ADR CLRLINE
 460 ???? B72F0000 	    _UNNEST 
 461              	
 462              	
 463              	/*****************************
 464              	    TV-CRLF 
 465              	    carriage return line feed 
 466              	*****************************/
 467 ???? B0110000 	    _HEADER TV_CRLF,7,"TV-CRLF"
 467      0754562D 
 467      43524C46 
 468 ???? E34D     	    ldr WP,=SCROLLUP 
 469 ???? 45F00105 	    orr WP,#1
ARM GAS  forth.s 			page 50


 470 ???? 80EA0000 	    eor T0,T0 
 471 ???? C4F89C00 	    str T0,[UP,#COL]
 472 ???? D4F89800 	    ldr T0,[UP,#ROW]
 473 ???? 1828     	    cmp T0,#24 
 474 ???? A2D0     	    beq SCROLLUP  
 475 ???? 00F10100 	    add T0,#1 
 476 ???? C4F89800 	    str T0,[UP,#ROW]
 477 ???? 01F0C3BE 	    _NEXT 
 478              	
 479              	
 480              	//  RIGHT ( -- )
 481              	// move cursor 1 char. right 
 482 ???? 00120000 	  _HEADER RIGHT,5,"RIGHT"
 482      05524947 
 482      4854
 483 ???? D4F89C00 	  ldr T0,[UP,#COL]
 484 ???? 00F10100 	  add T0,#1
 485 ???? 3528     	  cmp T0,#53
 486 ???? E3D5     	  bpl TV_CRLF  
 487 ???? C4F89C00 	  str T0,[UP,#COL]
 488 ???? 01F0B4BE 	  _NEXT 
 489              	
 490              	/**************************
 491              	    LEFT ( -- )
 492              	    move text cursor 
 493              	    1 character left 
 494              	**************************/
 495 ???? 2E120000 	    _HEADER LEFT,4,"LEFT"
 495      044C4546 
 495      540000BF 
 496 ???? D4F89C00 	    ldr T0,[UP,#COL]
 497 ???? 28B1     	    cbz T0,1f 
 498 ???? A0F10100 	    sub T0,#1 
 499 ???? C4F89C00 	    str T0,[UP,#COL]
 500 ???? 01F0A5BE 	    _NEXT 
 501 ???? D4F89800 	1:  ldr T0,[UP,#ROW]
 502 ???? 38B1     	    cbz T0,9f
 503 ???? A0F10100 	    sub T0,#1
 504 ???? C4F89800 	    str T0,[UP,#ROW]
 505 ???? 4FF03400 	    mov T0,#52 
 506 ???? C4F89C00 	    str T0,[UP,#COL]
 507 ???? 01F098BE 	9:  _NEXT 
 508              	
 509              	
 510              	// extract font pixel 
 511              	FONT_PIXEL: // ( r -- 0|1 )
 512 ???? 4FF08000 	    mov T0,#128 
 513 ???? 06EA0006 	    and TOS,T0 
 514 ???? 4FEAD616 	    lsr TOS,#7
 515 ???? 01F090BE 	    _NEXT 
 516              	
 517              	// increment x coord 
 518              	INCR_X: // ( x y -- x' y )
 519 ???? 3868     	  ldr T0,[DSP]
 520 ???? 00F10100 	  add T0,#1 
 521 ???? 3860     	  str T0,[DSP]
 522 ???? 01F08ABE 	  _NEXT 
ARM GAS  forth.s 			page 51


 523              	
 524              	// shift font row data
 525              	NEXT_PIXEL:
 526 ???? 4FEA4606 	    lsl TOS,#1
 527 ???? 01F086BE 	    _NEXT 
 528              	
 529              	
 530              	// CHAR_ROW 
 531              	// plot character row 
 532              	// {x y r -- }
 533              	//  _HEADER CHAR_ROW,7,"CHARROW"
 534              	CHAR_ROW:  
 535 ???? 504700BF 	    _NEST 
 536 ???? D7310000 	    _DOLIT 5 
 536      05000000 
 537 ???? FD320000 	    _ADR TOR 
 538 ???? FD320000 	1:  _ADR TOR 
 539 ???? C5360000 	    _ADR DDUP 
 540 ???? CD320000 	    _ADR RAT
 541 ???? 81120000 	    _ADR FONT_PIXEL  // {x y x y 0|1 }
 542 ???? 29100000 	    _ADR PLOT 
 543 ???? 91120000 	    _ADR INCR_X 
 544 ???? 99320000 	    _ADR RFROM 
 545 ???? 9D120000 	    _ADR NEXT_PIXEL
 546 ???? F9310000 	    _DONXT 1b
 546      B4120000 
 547 ???? B1360000 	    _ADR TDROP 
 548 ???? B72F0000 	    _UNNEST 
 549              	
 550              	
 551              	CHAR_FONT: // ( c -- c-adr )
 552 ???? A6F12006 	   sub TOS,#32
 553 ???? 4FF00800 	   mov T0,#8 
 554 ???? 00FB06F6 	   mul TOS,T0 
 555 ???? A748     	   ldr T0,=font_6x8
 556 ???? 0644     	   add TOS,T0 
 557 ???? 01F05CBE 	   _NEXT 
 558              	
 559              	/**********************************
 560              	   TV-EMIT ( c -- )
 561              	   draw character in video buffer
 562              	**********************************/
 563 ???? 4C120000 	    _HEADER TV_EMIT,7,"TV-EMIT"
 563      0754562D 
 563      454D4954 
 564 ???? 504700BF 	    _NEST
 565 ???? 91330000 	    _ADR DUPP 
 566 ???? D7310000 	    _DOLIT 32 
 566      20000000 
 567 ???? 55380000 	    _ADR ULESS
 568 ???? 17320000 	    _QBRAN 1f
 568      28130000 
 569 ???? 3F320000 	    _BRAN CTRL_KEY
 569      8C130000 
 570 ???? E5120000 	1:  _ADR CHAR_FONT 
 571 ???? A10F0000 	    _ADR CURSOR_COL 
 572 ???? 6D320000 	    _ADR AT
ARM GAS  forth.s 			page 52


 573 ???? E50F0000 	    _ADR COLX  // x coord 
 574 ???? B50F0000 	    _ADR CURSOR_ROW 
 575 ???? 6D320000 	    _ADR AT    
 576 ???? CD0F0000 	    _ADR ROWY  // {c-adr x y -- } 
 577 ???? 75360000 	    _ADR ROT  // TEST 
 578 ???? D7310000 	    _DOLIT 7   
 578      07000000 
 579 ???? FD320000 	    _ADR TOR  
 580 ???? FD320000 	1:  _ADR TOR  // { x y }
 581 ???? C5360000 	    _ADR DDUP  // { x y x y }
 582 ???? CD320000 	    _ADR RAT 
 583 ???? 8D320000 	    _ADR CAT   // { x y x y r }
 584 ???? A5120000 	    _ADR CHAR_ROW 
 585 ???? 29350000 	    _ADR ONEP // {x y' }
 586 ???? 99320000 	    _ADR RFROM 
 587 ???? 29350000 	    _ADR ONEP // {x y' c-adr' }
 588 ???? F9310000 	    _DONXT 1b
 588      54130000 
 589 ???? B1360000 	    _ADR TDROP  
 590 ???? 35120000 	    _ADR RIGHT
 591 ???? 75140000 	9:  _ADR SHOW_CURSOR 
 592 ???? B72F0000 	    _UNNEST  
 593              	CTRL_KEY:
 594 ???? FD140000 	    _ADR HIDE_CURSOR
 595 ???? 91330000 	    _ADR DUPP 
 596 ???? D7310000 	    _DOLIT BKSPP  
 596      08000000 
 597 ???? 15380000 	    _ADR EQUAL 
 598 ???? 17320000 	    _QBRAN 1f 
 598      B8130000 
 599 ???? 55140000 	    _ADR BACK_SPACE 
 600 ???? 71330000 	8:  _ADR DROP 
 601 ???? 3F320000 	    _BRAN 9b 
 601      84130000 
 602 ???? 91330000 	1:  _ADR DUPP 
 603 ???? D7310000 	    _DOLIT CRR 
 603      0D000000 
 604 ???? 15380000 	    _ADR EQUAL 
 605 ???? 17320000 	    _QBRAN 1f 
 605      DC130000 
 606 ???? FD130000 	    _ADR CAR_RET
 607 ???? 3F320000 	    _BRAN 8b
 607      AC130000 
 608 ???? D7310000 	1:  _DOLIT LF 
 608      0A000000 
 609 ???? 15380000 	    _ADR EQUAL 
 610 ???? 17320000 	    _QBRAN 9b 
 610      84130000 
 611 ???? 15140000 	    _ADR LN_FEED
 612 ???? 3F320000 	    _BRAN 9b  
 612      84130000 
 613              	
 614              	/*******************************
 615              	  CAR_RET 
 616              	  carriage return
 617              	*******************************/
 618              	CAR_RET:
ARM GAS  forth.s 			page 53


 619 ???? 504700BF 	   _NEST
 620 ???? D7310000 	   _DOLIT 0 
 620      00000000 
 621 ???? A10F0000 	   _ADR CURSOR_COL 
 622 ???? 59320000 	   _ADR STORE 
 623 ???? B72F0000 	   _UNNEST   
 624              	
 625              	/*************************
 626              	  LN_FEED 
 627              	  send cursor to next line 
 628              	**************************/
 629              	LN_FEED:
 630 ???? 504700BF 	    _NEST 
 631 ???? B50F0000 	    _ADR CURSOR_ROW 
 632 ???? 6D320000 	    _ADR AT 
 633 ???? 91330000 	    _ADR DUPP 
 634 ???? D7310000 	    _DOLIT 24 
 634      18000000 
 635 ???? 75340000 	    _ADR XORR 
 636 ???? 17320000 	    _QBRAN 1f
 636      48140000 
 637 ???? 29350000 	    _ADR ONEP 
 638 ???? B50F0000 	    _ADR CURSOR_ROW 
 639 ???? 59320000 	    _ADR STORE 
 640 ???? B72F0000 	    _UNNEST    
 641 ???? 71330000 	1:  _ADR DROP 
 642 ???? 65110000 	    _ADR SCROLLUP 
 643 ???? B72F0000 	    _UNNEST  
 644              	
 645              	
 646              	/*****************************
 647              	  BACK_SPACE  
 648              	  move cursor left 1 character
 649              	*****************************/
 650              	BACK_SPACE: 
 651 ???? 504700BF 	  _NEST 
 652 ???? 55120000 	  _ADR LEFT 
 653 ???? 75140000 	  _ADR SHOW_CURSOR
 654 ???? B72F0000 	9: _UNNEST    
 655              	
 656              	
 657              	/*******************************
 658              	  SHOW_CURSOR ( -- )
 659              	********************************/
 660 ???? FC120000 	    _HEADER SHOW_CURSOR,11,"SHOW-CURSOR"
 660      0B53484F 
 660      572D4355 
 660      52534F52 
 661              	//SHOW_CURSOR:
 662 ???? 504700BF 	    _NEST 
 663 ???? D7310000 	    _DOLIT 0xFF
 663      FF000000 
 664 ???? B50F0000 	0:  _ADR CURSOR_ROW
 665 ???? 6D320000 	    _ADR AT  
 666 ???? 29350000 	    _ADR ONEP 
 667 ???? CD0F0000 	    _ADR ROWY 
 668 ???? D7310000 	    _DOLIT BPR
ARM GAS  forth.s 			page 54


 668      A0000000 
 669 ???? ED340000 	    _ADR STAR
 670 ???? D7310000 	    _DOLIT BPR  
 670      A0000000 
 671 ???? DD340000 	    _ADR SUBB 
 672 ???? A10F0000 	    _ADR CURSOR_COL
 673 ???? 6D320000 	    _ADR AT 
 674 ???? E50F0000 	    _ADR COLX 
 675 ???? CD350000 	    _ADR TWOSL  
 676 ???? CD340000 	    _ADR PLUS
 677 ???? 15100000 	    _ADR VIDBUFF
 678 ???? CD340000 	    _ADR PLUS
 679 ???? D7310000 	    _DOLIT 2
 679      02000000 
 680 ???? FD320000 	    _ADR TOR  
 681 ???? C5360000 	1:  _ADR DDUP 
 682 ???? 79320000 	    _ADR CSTOR 
 683 ???? 29350000 	    _ADR ONEP 
 684 ???? F9310000 	    _DONXT 1b
 684      D0140000 
 685 ???? 9D360000 	2:  _ADR DDROP // drop 3 elements 
 686 ???? B72F0000 	    _UNNEST  
 687              	
 688              	/*************************
 689              	    HIDE_CURSOR 
 690              	*************************/
 691 ???? 68140000 	    _HEADER HIDE_CURSOR,11,"HIDE-CURSOR"
 691      0B484944 
 691      452D4355 
 691      52534F52 
 692              	//HIDE_CURSOR:
 693 ???? 504700BF 	    _NEST 
 694 ???? 6D0F0000 	    _ADR BACKCOLOR 
 695 ???? 6D320000 	    _ADR AT 
 696 ???? 91330000 	    _ADR DUPP  
 697 ???? D7310000 	    _DOLIT 4 
 697      04000000 
 698 ???? BD340000 	    _ADR LSHIFT 
 699 ???? 61340000 	    _ADR ORR 
 700 ???? 3F320000 	    _BRAN 0b
 700      80140000 
 701              	
 702              	// TV-AT ( line col -- )
 703              	// set text cursor position 
 704 ???? F0140000 	    _HEADER TV_AT,5,"TV-AT"
 704      0554562D 
 704      415400BF 
 705 ???? 352E     	    cmp TOS,#53
 706 ???? 01D4     	    bmi 1f 
 707 ???? 4FF03406 	    mov TOS,#52
 708 ???? C4F89C60 	1:  str TOS,[UP,#COL]
 709 ???? 57F8046B 	    _POP
 710 ???? 192E     	    cmp TOS,#25
 711 ???? 01D4     	    bmi 1f 
 712 ???? 4FF01806 	    mov TOS,#24 
 713 ???? C4F89860 	1:  str TOS,[UP,#ROW]
 714 ???? 57F8046B 	    _POP 
ARM GAS  forth.s 			page 55


 715 ???? 01F02EBD 	    _NEXT 
 716              	
 717              	// INPUT ( -- c-adr )
 718              	// input a string in pad 
 719 ???? 28150000 	    _HEADER INPUT,5,"INPUT"
 719      05494E50 
 719      555400BF 
 720 ???? 504700BF 	    _NEST 
 721 ???? F53F0000 	    _ADR PAD 
 722 ???? 91330000 	    _ADR DUPP 
 723 ???? 29350000 	    _ADR ONEP 
 724 ???? D7310000 	    _DOLIT 53
 724      35000000 
 725 ???? 514F0000 	    _ADR ACCEP
 726 ???? A1330000 	    _ADR SWAP 
 727 ???? 71330000 	    _ADR DROP 
 728 ???? D1330000 	    _ADR OVER 
 729 ???? 79320000 	    _ADR CSTOR  
 730 ???? B72F0000 	    _UNNEST 
 731              	
 732              	
 733              		.section .rodata 
 734              		.p2align 2
 735              	/********************************************
 736              	    TV font  ASCII 6 pixels x 8 pixels 
 737              	********************************************/
 738              	font_6x8:
 739 ???? 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // espace
 739      00000000 
 740 ???? 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 // !
 740      20002000 
 741 ???? 50505000 	.byte 0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00 // "
 741      00000000 
 742 ???? 5050F850 	.byte 0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00 // #
 742      F8505000 
 743 ???? 2078A070 	.byte 0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00 // $
 743      28F02000 
 744 ???? C0C81020 	.byte 0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00 // %
 744      40981800 
 745 ???? 6090A040 	.byte 0x60,0x90,0xA0,0x40,0xA8,0x90,0x68,0x00 // &
 745      A8906800 
 746 ???? 60204000 	.byte 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 // '
 746      00000000 
 747 ???? 10204040 	.byte 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 // (
 747      40201000 
 748 ???? 40201010 	.byte 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 // )
 748      10204000 
 749 ???? 0020A870 	.byte 0x00,0x20,0xA8,0x70,0xA8,0x20,0x00,0x00 // *
 749      A8200000 
 750 ???? 002020F8 	.byte 0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00 // +
 750      20200000 
 751 ???? 00000000 	.byte 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 // ,
 751      60204000 
 752 ???? 000000F0 	.byte 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00 // -
 752      00000000 
 753 ???? 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 // .
 753      00606000 
ARM GAS  forth.s 			page 56


 754 ???? 00081020 	.byte 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 // /
 754      40800000 
 755 ???? 708898A8 	.byte 0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00 // 0
 755      C8887000 
 756 ???? 20602020 	.byte 0x20,0x60,0x20,0x20,0x20,0x20,0xF8,0x00 // 1
 756      2020F800 
 757 ???? 70881020 	.byte 0x70,0x88,0x10,0x20,0x40,0x80,0xF8,0x00 // 2
 757      4080F800 
 758 ???? F00808F0 	.byte 0xF0,0x08,0x08,0xF0,0x08,0x08,0xF0,0x00 // 3
 758      0808F000 
 759 ???? 10305090 	.byte 0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00 // 4
 759      F8101000 
 760 ???? F88080F0 	.byte 0xF8,0x80,0x80,0xF0,0x08,0x08,0xF0,0x00 // 5
 760      0808F000 
 761 ???? 304080F0 	.byte 0x30,0x40,0x80,0xF0,0x88,0x88,0x70,0x00 // 6
 761      88887000 
 762 ???? F8081020 	.byte 0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 // 7
 762      40404000 
 763 ???? 70888870 	.byte 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 // 8
 763      88887000 
 764 ???? 70888870 	.byte 0x70,0x88,0x88,0x70,0x08,0x08,0x70,0x00 // 9
 764      08087000 
 765 ???? 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00 // :
 765      60600000 
 766 ???? 00606000 	.byte 0x00,0x60,0x60,0x00,0x60,0x20,0x40,0x00 // ;
 766      60204000 
 767 ???? 10204080 	.byte 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 // <
 767      40201000 
 768 ???? 0000F800 	.byte 0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00 // =
 768      F8000000 
 769 ???? 40201008 	.byte 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 // >
 769      10204000 
 770 ???? 70880810 	.byte 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 // ?
 770      20002000 
 771 ???? 70880868 	.byte 0x70,0x88,0x08,0x68,0xA8,0xA8,0x70,0x00 // @
 771      A8A87000 
 772 ???? 708888F8 	.byte 0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // A
 772      88888800 
 773 ???? F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00 // B
 773      8888F000 
 774 ???? 78808080 	.byte 0x78,0x80,0x80,0x80,0x80,0x80,0x78,0x00 // C
 774      80807800 
 775 ???? F0888888 	.byte 0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00 // D
 775      8888F000 
 776 ???? F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0xF8,0x00 // E
 776      8080F800 
 777 ???? F88080F8 	.byte 0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0x00 // F
 777      80808000 
 778 ???? 788080B0 	.byte 0x78,0x80,0x80,0xB0,0x88,0x88,0x70,0x00 // G
 778      88887000 
 779 ???? 888888F8 	.byte 0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00 // H
 779      88888800 
 780 ???? 70202020 	.byte 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // I
 780      20207000 
 781 ???? 78080808 	.byte 0x78,0x08,0x08,0x08,0x08,0x90,0x60,0x00 // J
 781      08906000 
 782 ???? 8890A0C0 	.byte 0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00 // K
ARM GAS  forth.s 			page 57


 782      A0908800 
 783 ???? 80808080 	.byte 0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00 // L
 783      8080F800 
 784 ???? 88D8A888 	.byte 0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00 // M
 784      88888800 
 785 ???? 8888C8A8 	.byte 0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00 // N
 785      98888800 
 786 ???? 70888888 	.byte 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // O
 786      88887000 
 787 ???? F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00 // P
 787      80808000 
 788 ???? 70888888 	.byte 0x70,0x88,0x88,0x88,0xA8,0x98,0x78,0x00 // Q
 788      A8987800 
 789 ???? F08888F0 	.byte 0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00 // R
 789      A0908800 
 790 ???? 78808070 	.byte 0x78,0x80,0x80,0x70,0x08,0x08,0xF0,0x00 // S
 790      0808F000 
 791 ???? F8202020 	.byte 0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // T
 791      20202000 
 792 ???? 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 // U
 792      88887000 
 793 ???? 88888888 	.byte 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 // V
 793      88502000 
 794 ???? 888888A8 	.byte 0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00 // W
 794      A8D88800 
 795 ???? 88885020 	.byte 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 // X
 795      50888800 
 796 ???? 88888850 	.byte 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 // Y
 796      20202000 
 797 ???? F8102040 	.byte 0xF8,0x10,0x20,0x40,0x80,0x80,0xF8,0x00 // Z
 797      8080F800 
 798 ???? 60404040 	.byte 0x60,0x40,0x40,0x40,0x40,0x40,0x60,0x00 // [
 798      40406000 
 799 ???? 00804020 	.byte 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 // '\'
 799      10080000 
 800 ???? 18080808 	.byte 0x18,0x08,0x08,0x08,0x08,0x08,0x18,0x00 // ]
 800      08081800 
 801 ???? 20508800 	.byte 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 // ^
 801      00000000 
 802 ???? 00000000 	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00 // _
 802      0000F800 
 803 ???? 40201000 	.byte 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 // `
 803      00000000 
 804 ???? 00007008 	.byte 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 // a
 804      78887800 
 805 ???? 808080B0 	.byte 0x80,0x80,0x80,0xB0,0xC8,0x88,0xF0,0x00 // b
 805      C888F000 
 806 ???? 00007080 	.byte 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 // c
 806      80887000 
 807 ???? 08080868 	.byte 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 // d
 807      98887800 
 808 ???? 00007088 	.byte 0x00,0x00,0x70,0x88,0xF8,0x80,0x70,0x00 // e
 808      F8807000 
 809 ???? 304840E0 	.byte 0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00 // f
 809      40404000 
 810 ???? 00007888 	.byte 0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70 // g
 810      88780870 
ARM GAS  forth.s 			page 58


 811 ???? 8080B0C8 	.byte 0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00 // h
 811      88888800 
 812 ???? 00200020 	.byte 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 // i
 812      20202000 
 813 ???? 10003010 	.byte 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 // j
 813      10906000 
 814 ???? 808090A0 	.byte 0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00 // k
 814      C0A09000 
 815 ???? 60202020 	.byte 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 // l
 815      20207000 
 816 ???? 0000D0A8 	.byte 0x00,0x00,0xD0,0xA8,0xA8,0x88,0x88,0x00 // m
 816      A8888800 
 817 ???? 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x88,0x88,0x88,0x00 // n
 817      88888800 
 818 ???? 00007088 	.byte 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 // o
 818      88887000 
 819 ???? 0000F088 	.byte 0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80 // p
 819      88F08080 
 820 ???? 00006890 	.byte 0x00,0x00,0x68,0x90,0x90,0xB0,0x50,0x18 // q
 820      90B05018 
 821 ???? 0000B0C8 	.byte 0x00,0x00,0xB0,0xC8,0x80,0x80,0x80,0x00 // r
 821      80808000 
 822 ???? 00007080 	.byte 0x00,0x00,0x70,0x80,0x70,0x08,0xF0,0x00 // s
 822      7008F000 
 823 ???? 4040E040 	.byte 0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00 // t
 823      40483000 
 824 ???? 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 // u
 824      88986800 
 825 ???? 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 // v
 825      88502000 
 826 ???? 00008888 	.byte 0x00,0x00,0x88,0x88,0xA8,0xA8,0x50,0x00 // w
 826      A8A85000 
 827 ???? 00008850 	.byte 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 // x
 827      20508800 
 828 ???? 00008888 	.byte 0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70 // y
 828      88780870 
 829 ???? 0000F810 	.byte 0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00 // z
 829      2040F800 
 830 ???? 20404080 	.byte 0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00 // {
 830      40402000 
 831 ???? 20202020 	.byte 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 // |
 831      20202000 
 832 ???? 40202010 	.byte 0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00 // }
 832      20204000 
 833 ???? 000040A8 	.byte 0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00 // ~
 833      10000000 
 834 ???? FCFCFCFC 	.byte 0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC // 95 rectangle
 834      FCFCFCFC 
 835 ???? 402010F8 	.byte 0x40,0x20,0x10,0xF8,0x10,0x20,0x40,0x00 // 96 right arrow
 835      10204000 
 836 ???? 102040F8 	.byte 0x10,0x20,0x40,0xF8,0x40,0x20,0x10,0x00 // 97 left arrow
 836      40201000 
 837 ???? 2070A820 	.byte 0x20,0x70,0xA8,0x20,0x20,0x20,0x00,0x00 // 98 up arrrow
 837      20200000 
 838 ???? 00202020 	.byte 0x00,0x20,0x20,0x20,0xA8,0x70,0x20,0x00 // 99 down arrow
 838      A8702000 
 839 ???? 0070F8F8 	.byte 0x00,0x70,0xF8,0xF8,0xF8,0x70,0x00,0x00 // 100 circle 
ARM GAS  forth.s 			page 59


 839      F8700000 
   1              	/*****************************************************
   2              	*  STM32eForth version 7.20
   3              	*  Adapted to beyond Jupiter board by Picatout
   4              	*  date: 2020-11-22
   5              	*  IMPLEMENTATION NOTES:
   6              	
   7              	*     Use USART1 for console I/O
   8              	*     port config: 115200 8N1 
   9              	*     TX on  PA9,  RX on PA10  
  10              	*
  11              	*     eForth is executed from flash, not copied to RAM
  12              	*     eForth use main stack R13 as return stack (thread stack not used) 
  13              	*
  14              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  15              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  16              	*     a 128 bytes tib is reserved below flwr_buffer 
  17              	*     Forth dstack is below tib and reserve 512 bytes 
  18              	*   
  19              	******************************************************/
  20              	
  21              	/***************************************
  22              	
  23              	      PS2 KEYBOARD INTERFACE 
  24              	
  25              	***************************************/
  26              	
  27              	
  28              	  .syntax unified
  29              	  .cpu cortex-m4
  30              	  .fpu softvfp 
  31              	  .thumb
  32              	
  33              	  .include "stm32f411ce.inc"
  34              	
  35              	  .section  .text, "ax", %progbits 
  36              	
  37              	  .include "mcSaite.inc"
   1              	//  MCSaite keyboard scancode to ASSCII
   2              	
   3              	    .include "ps2_codes.inc"
   1              	// PS/2 scancode set 2 
   2              	    
   3              	// keyboard control commands 
   4              	KBD_CMD_RESET =	0xFF  // RESET keyboard 
   5              	KBD_CMD_LED =	0xED  // keyboard LEDS control 
   6              	KBD_CMD_RESEND =  0xFE  // resend command 
   7              	 
   8              	// keyboard state codes 
   9              	BAT_OK =	0xAA // keyboard test OK 
  10              	KBD_ACK =	0xFA // keyboard ACK code 
  11              	KEY_REL =	0xF0 // key released code 
  12              	XT_KEY =	0xE0 // extended key 
  13              	XT2_KEY =	0xE1 // start  8 codes PAUSE key sequence 
  14              	
  15              	// keyboard LEDS 
  16              	LED_CAPLOCK = 4 
ARM GAS  forth.s 			page 60


  17              	LED_NUMLOCK = 2
  18              	LED_SCROLL = 1 
  19              	  
  20              	// control keys 
  21              	SC_TAB =	    0x0D    //standard
  22              	SC_ENTER =	    0x5A    //standard
  23              	SC_CAPS =	    0x58    //standard
  24              	SC_NUM =	    0x77    //standard
  25              	SC_SCROLL   =	    0x7E    //standard
  26              	SC_LSHIFT =	    0x12    //standard
  27              	SC_RSHIFT =	    0x59    //standard
  28              	SC_LCTRL =	    0x14    //standard
  29              	SC_LALT =	    0x11    //standard
  30              	SC_BKSP =	    0x66    //standard
  31              	SC_ESC =	    0x76    //standard
  32              	SC_F1 =	    0x05    //standard
  33              	SC_F2 =	    0x06    //standard
  34              	SC_F3 =	    0x04    //standard
  35              	SC_F4 =	    0x0c    //standard
  36              	SC_F5 =	    0x03    //standard
  37              	SC_F6 =	    0x0b    //standard
  38              	SC_F7 =	    0x83    //standard
  39              	SC_F8 =	    0x0a    //standard
  40              	SC_F9 =	    0x01    //standard
  41              	SC_F10 =	    0x09    //standard
  42              	SC_F11 =	    0x78    //standard
  43              	SC_F12 =	    0x07    //standard
  44              	SC_KPMUL =	    0x7c    //standard
  45              	SC_KPMINUS =	0x7b    //standard
  46              	SC_KPPLUS =	    0x79    //standard
  47              	SC_KPDOT =	    0x71    //standard
  48              	SC_KP0 =	    0x70    //standard
  49              	SC_KP1 =	    0x69    //standard
  50              	SC_KP2 =	    0x72    //standard
  51              	SC_KP3 =	    0x7a    //standard
  52              	SC_KP4 =	    0x6b    //standard
  53              	SC_KP5 =	    0x73    //standard
  54              	SC_KP6 =	    0x74    //standard
  55              	SC_KP7 =	    0x6c    //standard
  56              	SC_KP8 =	    0x75    //standard
  57              	SC_KP9 =	    0x7d    //standard
  58              	
  59              	// extended keycode, i.e. preceded by 0xe0
  60              	SC_RCTRL =   0x14
  61              	SC_LGUI =    0x1f
  62              	SC_RGUI =    0x27 
  63              	SC_RALT =    0x11
  64              	SC_APPS =    0x2f
  65              	SC_UP	 =    0x75
  66              	SC_DOWN =    0x72
  67              	SC_LEFT =    0x6B
  68              	SC_RIGHT =   0x74
  69              	SC_INSERT =  0x70
  70              	SC_HOME =    0x6c
  71              	SC_PGUP =    0x7d
  72              	SC_PGDN =    0x7a
  73              	SC_DEL	 =    0x71
ARM GAS  forth.s 			page 61


  74              	SC_END	 =    0x69
  75              	SC_KPDIV =   0x4a
  76              	SC_KPENTER = 0x5a
  77              	SC_LWINDOW = 0x1f
  78              	SC_RWINDOW = 0x27
  79              	SC_MENU = 0x5d 
  80              	 
  81              	 
  82              	//virtual key codes 
  83              	VK_CTRL_C = 3  
  84              	VK_BACK =	8
  85              	VK_TAB =	9
  86              	VK_ESC =	27
  87              	VK_ENTER =	'\r'
  88              	VK_SPACE =	' ' 
  89              	VK_DELETE =	127 
  90              	VK_F1 =	128
  91              	VK_F2 =	129
  92              	VK_F3 =	130
  93              	VK_F4 =	131
  94              	VK_F5 =	132
  95              	VK_F6 =	133
  96              	VK_F7 =	134
  97              	VK_F8 =	135
  98              	VK_F9 =	136
  99              	VK_F10 =	138
 100              	VK_F11 =	139
 101              	VK_F12 =	140
 102              	VK_UP =	141
 103              	VK_DOWN =	142
 104              	VK_LEFT =	143
 105              	VK_RIGHT =	144
 106              	VK_HOME =	145
 107              	VK_END =	146
 108              	VK_PGUP =	147
 109              	VK_PGDN =	148
 110              	VK_INSERT =	149
 111              	VK_APPS =	151
 112              	VK_PRN	=	152
 113              	VK_PAUSE =	153
 114              	VK_NLOCK =    154 // numlock
 115              	VK_CLOCK =	155 // capslock
 116              	VK_LSHIFT =	156
 117              	VK_LCTRL =	157
 118              	VK_LALT =	158
 119              	VK_RSHIFT =	159
 120              	VK_LGUI =	160
 121              	VK_RCTRL =	161
 122              	VK_RGUI =	162
 123              	VK_RALT =	163
 124              	VK_SCROLL =	164
 125              	VK_NUM	=	165 
 126              	VK_CAPS =	168
 127              	//<SHIFT>-<KEY> 
 128              	VK_SUP	=	169
 129              	VK_SDOWN =	170
 130              	VK_SLEFT =	171
ARM GAS  forth.s 			page 62


 131              	VK_SRIGHT =	172
 132              	VK_SHOME =	173
 133              	VK_SEND	=	174
 134              	VK_SPGUP =	175
 135              	VK_SPGDN =	176
 136              	VK_SDEL  =    191
 137              	//<CTRL>-<KEY>
 138              	VK_CUP	=	177
 139              	VK_CDOWN =	178	
 140              	VK_CLEFT =	179
 141              	VK_CRIGHT =	180
 142              	VK_CHOME =	181
 143              	VK_CEND =	182
 144              	VK_CPGUP =	183
 145              	VK_CPGDN =	184
 146              	VK_CDEL  =    185
 147              	VK_CBACK =    186
 148              	VK_LWINDOW =  187
 149              	VK_RWINDOW =  188
 150              	VK_MENU	=   189
 151              	VK_SLEEP =	190
 152              	
   4              	    
   5              	
   6              	    // SCAN 2 ASCII translation
   7              	sc_ascii:
   8 ???? 1C61     	   .byte 0x1c,'a' 
   9 ???? 3262     	   .byte 0x32,'b'
  10 ???? 2163     	   .byte 0x21,'c'
  11 ???? 2364     	   .byte 0x23,'d'
  12 ???? 2465     	   .byte 0x24,'e'
  13 ???? 2B66     	   .byte 0x2b,'f'
  14 ???? 3467     	   .byte 0x34,'g'
  15 ???? 3368     	   .byte 0x33,'h'
  16 ???? 4369     	   .byte 0x43,'i'
  17 ???? 3B6A     	   .byte 0x3B,'j'
  18 ???? 426B     	   .byte 0x42,'k'
  19 ???? 4B6C     	   .byte 0x4b,'l'
  20 ???? 3A6D     	   .byte 0x3a,'m'
  21 ???? 316E     	   .byte 0x31,'n'
  22 ???? 446F     	   .byte 0x44,'o'
  23 ???? 4D70     	   .byte 0x4d,'p'
  24 ???? 1571     	   .byte 0x15,'q'
  25 ???? 2D72     	   .byte 0x2d,'r'
  26 ???? 1B73     	   .byte 0x1b,'s'
  27 ???? 2C74     	   .byte 0x2c,'t'
  28 ???? 3C75     	   .byte 0x3c,'u'
  29 ???? 2A76     	   .byte 0x2a,'v'
  30 ???? 1D77     	   .byte 0x1d,'w'
  31 ???? 2278     	   .byte 0x22,'x'
  32 ???? 3579     	   .byte 0x35,'y'
  33 ???? 1A7A     	   .byte 0x1a,'z'
  34 ???? 4530     	   .byte 0x45,'0'
  35 ???? 1631     	   .byte 0x16,'1'
  36 ???? 1E32     	   .byte 0x1e,'2'
  37 ???? 2633     	   .byte 0x26,'3'
  38 ???? 2534     	   .byte 0x25,'4'
ARM GAS  forth.s 			page 63


  39 ???? 2E35     	   .byte 0x2e,'5'
  40 ???? 3636     	   .byte 0x36,'6'
  41 ???? 3D37     	   .byte 0x3d,'7'
  42 ???? 3E38     	   .byte 0x3e,'8'
  43 ???? 4639     	   .byte 0x46,'9'
  44 ???? 0E60     	   .byte 0x0e,'`'
  45 ???? 4E2D     	   .byte 0x4e,'-'
  46 ???? 553D     	   .byte 0x55,'='
  47 ???? 5D5C     	   .byte 0x5d,'\\'
  48 ???? 545B     	   .byte 0x54,'['
  49 ???? 5B5D     	   .byte 0x5b,']'
  50 ???? 4C3B     	   .byte 0x4c,';'
  51 ???? 5227     	   .byte 0x52,'\''
  52 ???? 412C     	   .byte 0x41,','
  53 ???? 492E     	   .byte 0x49,'.'
  54 ???? 7C2A     	   .byte 0x7c,'*'
  55 ???? 792B     	   .byte 0x79,'+'
  56 ???? 2920     	   .byte 0x29,' '
  57 ???? 5A0D     	   .byte SC_ENTER,CRR 
  58 ???? 6608     	   .byte SC_BKSP,BKSPP 
  59 ???? 0D09     	   .byte SC_TAB,9
  60 ???? 761B     	   .byte SC_ESC,27
  61 ???? 119E     	   .byte SC_LALT,VK_LALT 
  62 ???? 129C     	   .byte SC_LSHIFT,VK_LSHIFT
  63 ???? 149D     	   .byte SC_LCTRL,VK_LCTRL
  64 ???? 7EA4     	   .byte SC_SCROLL,VK_SCROLL
  65 ???? 779A     	   .byte SC_NUM,VK_NLOCK 
  66 ???? 5800     	   .byte SC_CAPS,0
  67 ???? 0580     	   .byte SC_F1,VK_F1
  68 ???? 0681     	   .byte SC_F2,VK_F2
  69 ???? 0482     	   .byte SC_F3,VK_F3
  70 ???? 0C83     	   .byte SC_F4,VK_F4
  71 ???? 0384     	   .byte SC_F5,VK_F5
  72 ???? 0B85     	   .byte SC_F6,VK_F6
  73 ???? 8386     	   .byte SC_F7,VK_F7
  74 ???? 0A87     	   .byte SC_F8,VK_F8
  75 ???? 0188     	   .byte SC_F9,VK_F9
  76 ???? 098A     	   .byte SC_F10,VK_F10
  77 ???? 788B     	   .byte SC_F11,VK_F11
  78 ???? 078C     	   .byte SC_F12,VK_F12
  79 ???? 7030     	   .byte SC_KP0,'0'
  80 ???? 6931     	   .byte SC_KP1,'1'
  81 ???? 7232     	   .byte SC_KP2,'2'
  82 ???? 7A33     	   .byte SC_KP3,'3'
  83 ???? 6B34     	   .byte SC_KP4,'4'
  84 ???? 7335     	   .byte SC_KP5,'5'
  85 ???? 7436     	   .byte SC_KP6,'6'
  86 ???? 6C37     	   .byte SC_KP7,'7'
  87 ???? 7538     	   .byte SC_KP8,'8'
  88 ???? 7D39     	   .byte SC_KP9,'9'
  89 ???? 7C2A     	   .byte SC_KPMUL,'*'
  90 ???? 4A2F     	   .byte SC_KPDIV,'/'
  91 ???? 792B     	   .byte SC_KPPLUS,'+'
  92 ???? 7B2D     	   .byte SC_KPMINUS,'-'
  93 ???? 712E     	   .byte SC_KPDOT,'.'
  94 ???? 5A0D     	   .byte SC_KPENTER,'\r'
  95 ???? FAFA     	   .byte KBD_ACK,KBD_ACK 
ARM GAS  forth.s 			page 64


  96 ???? AAAA     	   .byte BAT_OK,BAT_OK  
  97 ???? 0000     	   .byte 0,0
  98              	   
  99              	// shifted key 
 100              	shifted:
 101 ???? 6141     	   .byte 'a','A'
 102 ???? 6242     	   .byte 'b','B'
 103 ???? 6343     	   .byte 'c','C'
 104 ???? 6444     	   .byte 'd','D'
 105 ???? 6545     	   .byte 'e','E'
 106 ???? 6646     	   .byte 'f','F'
 107 ???? 6747     	   .byte 'g','G'
 108 ???? 6848     	   .byte 'h','H'
 109 ???? 6949     	   .byte 'i','I'
 110 ???? 6A4A     	   .byte 'j','J'
 111 ???? 6B4B     	   .byte 'k','K'
 112 ???? 6C4C     	   .byte 'l','L'
 113 ???? 6D4D     	   .byte 'm','M'
 114 ???? 6E4E     	   .byte 'n','N'
 115 ???? 6F4F     	   .byte 'o','O'
 116 ???? 7050     	   .byte 'p','P'
 117 ???? 7151     	   .byte 'q','Q'
 118 ???? 7252     	   .byte 'r','R'
 119 ???? 7353     	   .byte 's','S'
 120 ???? 7454     	   .byte 't','T'
 121 ???? 7555     	   .byte 'u','U'
 122 ???? 7656     	   .byte 'v','V'
 123 ???? 7757     	   .byte 'w','W'
 124 ???? 7858     	   .byte 'x','X'
 125 ???? 7959     	   .byte 'y','Y'
 126 ???? 7A5A     	   .byte 'z','Z'
 127 ???? 3121     	   .byte '1','!'
 128 ???? 3240     	   .byte '2','@'
 129 ???? 3323     	   .byte '3','#'
 130 ???? 3424     	   .byte '4','$'
 131 ???? 3525     	   .byte '5','%'
 132 ???? 365E     	   .byte '6','^'
 133 ???? 3726     	   .byte '7','&'
 134 ???? 382A     	   .byte '8','*'
 135 ???? 3928     	   .byte '9','('
 136 ???? 3029     	   .byte '0',')'
 137 ???? 2D5F     	   .byte '-','_'
 138 ???? 3D2B     	   .byte '=','+'
 139 ???? 607E     	   .byte '`','~'
 140 ???? 2722     	   .byte '\'','"'
 141 ???? 2C3C     	   .byte ',','<'
 142 ???? 2E3E     	   .byte '.','>'
 143 ???? 2F3F     	   .byte '/','?'
 144 ???? 5C7C     	   .byte '\\','|'
 145 ???? 3B3A     	   .byte ';',':'
 146 ???? 5B7B     	   .byte '[','{'
 147 ???? 5D7D     	   .byte ']','}'
 148 ???? 0000     	   .byte 0,0
 149              	   
 150              	//alt char keys 
 151              	altchar:
 152 ???? 315C     	   .byte '1','\\'
ARM GAS  forth.s 			page 65


 153 ???? 3240     	   .byte '2','@'
 154 ???? 332F     	   .byte '3','/'
 155              	//   .byte '4','ï¿½'
 156              	//   .byte '5','ï¿½'
 157 ???? 363F     	   .byte '6','?'
 158 ???? 377C     	   .byte '7','|'
 159              	//   .byte '8','ï¿½'
 160 ???? 397B     	   .byte '9','{'
 161 ???? 307D     	   .byte '0','}'
 162              	//   .byte '-','ï¿½'
 163              	//   .byte '=','ï¿½'
 164 ???? 0000     	   .byte 0,0
 165              	   
 166              	// extended keycodes 
 167              	extended:
 168 ???? 14A1     	    .byte SC_RCTRL,VK_RCTRL
 169 ???? 1FA0     	    .byte SC_LGUI,VK_LGUI
 170 ???? 27A2     	    .byte SC_RGUI,VK_RGUI 
 171 ???? 11A3     	    .byte SC_RALT,VK_RALT
 172 ???? 2F97     	    .byte SC_APPS,VK_APPS
 173 ???? 758D     	    .byte SC_UP,VK_UP
 174 ???? 728E     	    .byte SC_DOWN,VK_DOWN
 175 ???? 6B8F     	    .byte SC_LEFT,VK_LEFT
 176 ???? 7490     	    .byte SC_RIGHT,VK_RIGHT
 177 ???? 7095     	    .byte SC_INSERT,VK_INSERT
 178 ???? 6C91     	    .byte SC_HOME,VK_HOME
 179 ???? 7D93     	    .byte SC_PGUP,VK_PGUP
 180 ???? 7A94     	    .byte SC_PGDN,VK_PGDN
 181 ???? 717F     	    .byte SC_DEL,VK_DELETE
 182 ???? 6992     	    .byte SC_END,VK_END
 183 ???? 4A2F     	    .byte SC_KPDIV,'/'
 184 ???? 5A0D     	    .byte SC_KPENTER,'\r'
 185 ???? 1200     	    .byte 0x12,0
 186 ???? 7C00     	    .byte 0x7c,0
 187 ???? 0000     	    .byte 0,0
 188              	    
 189              	   
 190              	// CTRL-n  keycodes 
 191              	controls:
 192 ???? 6303     	   .byte 'c', VK_CTRL_C 
 193 ???? 1FA0     	   .byte SC_LGUI,VK_LGUI
 194 ???? 14A1     	   .byte SC_RCTRL,VK_RCTRL
 195 ???? 27A2     	   .byte SC_RGUI,VK_RGUI
 196 ???? 11A3     	   .byte SC_RALT,VK_RALT
 197 ???? 2F97     	   .byte SC_APPS,VK_APPS
 198 ???? 7095     	   .byte SC_INSERT,VK_INSERT
 199 ???? 6C91     	   .byte SC_HOME,VK_HOME
 200 ???? 7D93     	   .byte SC_PGUP,VK_PGUP
 201 ???? 717F     	   .byte SC_DEL,VK_DELETE
 202 ???? 6992     	   .byte SC_END,VK_END
 203 ???? 7A94     	   .byte SC_PGDN,VK_PGDN
 204 ???? 758D     	   .byte SC_UP,VK_UP
 205 ???? 6B8F     	   .byte SC_LEFT,VK_LEFT
 206 ???? 728E     	   .byte SC_DOWN,VK_DOWN
 207 ???? 7490     	   .byte SC_RIGHT,VK_RIGHT
 208 ???? 4A2F     	   .byte SC_KPDIV,'/'
 209 ???? 5A0D     	   .byte SC_ENTER,VK_ENTER
ARM GAS  forth.s 			page 66


 210 ???? 129C     	   .byte SC_LSHIFT,VK_LSHIFT
 211 ???? 149D     	   .byte SC_LCTRL,VK_LCTRL
 212 ???? 119E     	   .byte SC_LALT,VK_LALT
 213 ???? 599F     	   .byte SC_RSHIFT,VK_RSHIFT
 214 ???? 5A0D     	   .byte SC_KPENTER,VK_ENTER
 215 ???? 761B     	   .byte SC_ESC,VK_ESC
 216 ???? 779A     	   .byte SC_NUM,VK_NLOCK
 217 ???? 589B     	   .byte SC_CAPS,VK_CLOCK
 218 ???? 0000     	   .byte 0,0
 219              	
 220              	
  38              	
  39              	/**********************************
  40              	  keyboard structure 
  41              	
  42              	struct {
  43              	    byte bitcntr; received bit counter 
  44              	    byte rxshift; shiftin keycode 
  45              	    byte flags; flags 
  46              	    byte parity; count parity bits 
  47              	    }
  48              	
  49              	flags 
  50              	   :0 -> parity error flags 
  51              	**********************************/
  52              	    // keyboard state flags 
  53              	    .equ KBD_F_CTGL,(1<<0)     // capslock was toggled  
  54              	    .equ KBD_TX,(1<<1)   // transmit character to keyboard  
  55              	    .equ KBD_F_CAPS,(1<<2) // capslock 
  56              	    .equ KBD_F_SHIFT,(1<<3)  // shift down
  57              	    .equ KBD_F_CTRL,(1<<4)   // ctrl down 
  58              	    .equ KBD_F_ALT,(1<<5)    // alt down
  59              	    .equ KBD_F_XT,(1<<6) // extended key  
  60              	    .equ KBD_F_REL,(1<<7) // key released flag 
  61              	    // structure members offset 
  62              	    .equ KBD_FLAGS,KBD_STRUCT+2 
  63              	    .equ KBD_SHIFTER,KBD_STRUCT+1
  64              	    .equ KBD_BITCNTR,KBD_STRUCT 
  65              	    .equ KBD_PARITY,KBD_STRUCT+3 
  66              	
  67              	    .equ KBD_DATA_PIN, 14 
  68              	    .equ KBD_CLOCK_PIN, 15
  69              	    .equ KBD_GPIO,GPIOC_BASE_ADR 
  70              	
  71              	/**********************************
  72              	    kbd_isr
  73              	    interrupt service routine 
  74              	    EXTI0 connected to keyboard 
  75              	    clock signal and triggered 
  76              	    on falling edge 
  77              	**********************************/
  78 ???? 00BF     	    _GBL_FUNC kbd_isr 
  79 ???? 4FF47052 	    _MOV32 r2,EXTI_BASE_ADR
  79      C4F20102 
  80 ???? 4FF40040 	    mov r0,#(1<<KBD_CLOCK_PIN) 
  81 ???? 5061     	    str r0,[r2,#EXTI_PR] // reset pending flag 
  82 ???? 4FF40063 	    _MOV32 r3,KBD_GPIO
ARM GAS  forth.s 			page 67


  82      C4F20203 
  83 ???? D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
  84 ???? 10F0020F 	    tst r0,#KBD_TX 
  85 ???? 40F08480 	    bne send_bit  
  86 ???? 188A     	    ldrh r0,[r3,#GPIO_IDR]
  87 ???? 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
  88 ???? 01F10102 	    add r2,r1,#1
  89 ???? 84F87C20 	    strb r2,[UP,#KBD_BITCNTR]
  90 ???? 0029     	    cmp r1,#0
  91 ???? 15D0     	    beq start_bit 
  92 ???? 0929     	    cmp r1,#9 
  93 ???? 25D0     	    beq parity_bit 
  94 ???? 0A29     	    cmp r1,#10 
  95 ???? 2DD0     	    beq stop_bit 
  96              	    // data bit 
  97 ???? 94F87D20 	    ldrb r2,[UP,#KBD_SHIFTER]
  98 ???? 4FEA5202 	    lsr r2,#1 
  99 ???? 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) // data bit 
 100 ???? 07D0     	    beq 1f 
 101 ???? 42F08002 	    orr r2,#(1<<7)
 102 ???? 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 103 ???? 00F10100 	    add r0,#1 
 104 ???? 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 105 ???? 84F87D20 	1:  strb r2,[UP,#KBD_SHIFTER]
 106 ???? 63E0     	    b 9f         
 107              	start_bit:
 108 ???? 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN) 
 109 ???? 60D1     	    bne 9f // not a start bit 
 110 ???? 80EA0000 	    eor r0,r0 
 111 ???? 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 112 ???? 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 113 ???? 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 114 ???? 6FF00101 	    mvn r1,#1
 115 ???? 00EA0100 	    and r0,r1 // clear error flag 
 116 ???? 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 117 ???? 51E0     	    b 9f 
 118              	parity_bit:
 119 ???? 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 120 ???? 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 121 ???? 4CD0     	    beq 9f  
 122 ???? 01F10101 	    add r1,#1 
 123 ???? 84F87F10 	    strb r1,[UP,#KBD_PARITY]  
 124 ???? 47E0     	    b 9f      
 125              	stop_bit:
 126 ???? 10F4804F 	    tst r0,#(1<<KBD_DATA_PIN)
 127 ???? 40D0     	    beq 8f // error stop bit expected 
 128 ???? 94F87F10 	    ldrb r1,[UP,#KBD_PARITY]
 129 ???? 11F0010F 	    tst r1,#1 
 130 ???? 3BD0     	    beq 8f // error parity
 131 ???? 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 132 ???? 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 133 ???? E028     	    cmp r0,#XT_KEY
 134 ???? 04D1     	    bne 1f
 135 ???? 41F04001 	    orr r1,#KBD_F_XT
 136 ???? 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 137 ???? 30E0     	    b 8f  
 138 ???? 11F0800F 	1:  tst r1,#KBD_F_REL
ARM GAS  forth.s 			page 68


 139 ???? 14D0     	    beq store_code
 140 ???? 5828     	    cmp r0,#SC_CAPS
 141 ???? 04D1     	    bne 1f
 142 ???? 81F00401 	    eor r1,#KBD_F_CAPS
 143 ???? 41F00101 	    orr r1,#KBD_F_CTGL 
 144 ???? 06E0     	    b 2f 
 145 ???? 00B500F0 	1:  _CALL do_async_key 
 145      73F85DF8 
 145      04EB
 146 ???? 94F87E10 	    ldrb r1,[UP,#KBD_FLAGS]
 147 ???? 6FF0C002 	2:  mvn r2,#(KBD_F_REL+KBD_F_XT) 
 148 ???? 01EA0201 	    and r1,r2
 149 ???? 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 150 ???? 18E0     	    b 8f
 151              	// store code in queue 
 152              	store_code:
 153 ???? F028     	    cmp r0,#KEY_REL
 154 ???? 04D1     	    bne 1f
 155              	// set release flags 
 156 ???? 41F08001 	    orr r1,#KBD_F_REL 
 157 ???? 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 158 ???? 11E0     	    b 8f     
 159 ???? 0146     	1:  mov r1,r0 
 160 ???? 00B500F0 	    _CALL do_async_key 
 160      5DF85DF8 
 160      04EB
 161 ???? 0AD1     	    bne 8f // was async key 
 162 ???? D4F89400 	    ldr r0,[UP,#KBD_QTAIL]
 163 ???? 04F18002 	    add r2,UP,#KBD_QUEUE
 164 ???? 1154     	    strb r1,[r2,r0]
 165 ???? 00F10100 	    add r0,#1
 166 ???? 00F00F00 	    and r0,#KBD_QUEUE_SIZE-1
 167 ???? 84F89400 	    strb r0,[UP,#KBD_QTAIL]
 168 ???? 80EA0000 	8:  eor r0,r0 
 169 ???? A4F87C00 	    strh r0,[UP,#KBD_BITCNTR]
 170 ???? 7047     	9:  _RET 
 171              	
 172              	/* send bit to keyboard 
 173              	 registers usage:
 174              	    r0 bit shifter 
 175              	    r1 bit counter 
 176              	    r2 output bit 
 177              	    r3 KBD_GPIO 
 178              	*/
 179              	send_bit:
 180 ???? 94F87C10 	    ldrb r1,[UP,#KBD_BITCNTR]
 181 ???? 01F10100 	    add r0,r1,#1
 182 ???? 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 183 ???? 94F87D00 	    ldrb r0,[UP,#KBD_SHIFTER]
 184 ???? 4FF48042 	    mov r2,#(1<<KBD_DATA_PIN)
 185              	//    cbz r1,9f 
 186 ???? 0829     	1:  cmp r1,#8 
 187 ???? 15D0     	    beq send_parity 
 188 ???? 0929     	    cmp r1,#9 
 189 ???? 1CD0     	    beq send_stop
 190 ???? 0A29     	    cmp r1,#10
 191 ???? 1FD0     	    beq rx_ack_bit  
ARM GAS  forth.s 			page 69


 192              	// data bits
 193 ???? 10F0010F 	    tst r0,#1
 194 ???? 4FEA5000 	    lsr r0,#1
 195 ???? 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 196 ???? 02D1     	    bne 1f 
 197 ???? 4FEA0242 	    lsl r2,#16
 198 ???? 05E0     	    b 2f  
 199 ???? 94F87F00 	1:  ldrb r0,[UP,#KBD_PARITY]
 200 ???? 00F10100 	    add r0,#1 
 201 ???? 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 202 ???? 9A61     	2:  str r2,[R3,#GPIO_BSRR]
 203 ???? 1CE0     	    b 9f 
 204              	send_parity:
 205 ???? 94F87F00 	    ldrb r0,[UP,#KBD_PARITY]
 206 ???? 10F0010F 	    tst r0,#1
 207 ???? 01D0     	    beq 1f 
 208 ???? 4FEA0242 	    lsl r2,#16
 209 ???? 9A61     	1:  str r2,[r3,#GPIO_BSRR]
 210 ???? 13E0     	    b 9f 
 211              	send_stop:
 212              	//    str r2,[r3,#GPIO_BSRR]
 213              	// release data pin 
 214 ???? 1968     	    ldr r1,[r3,#GPIO_MODER]
 215 ???? 21F04051 	    bic r1,#(3<<(2*KBD_DATA_PIN)) 
 216 ???? 1960     	    str r1,[r3,#GPIO_MODER]
 217 ???? 0EE0     	    b 9f
 218              	rx_ack_bit:
 219 ???? 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 220 ???? 6FF00201 	    mvn r1,#KBD_TX 
 221 ???? 00EA0100 	    and r0,r1 
 222 ???? 198A     	    ldrh r1,[r3,#GPIO_IDR]
 223 ???? 11F4804F 	    tst r1,#(1<<KBD_DATA_PIN)
 224 ???? 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 225 ???? 80EA0000 	    eor r0,r0 
 226 ???? 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 227 ???? 7047     	9:  _RET 
 228              	
 229              	/*************************************
 230              	 check if it is an asynchronous key 
 231              	 input:
 232              	    r0  virtual code
 233              	 output:
 234              	    r0 code order | 255 
 235              	*************************************/
 236              	is_async_key:
 237 ???? 02B4     	    push {r1}
 238 ???? DFF86414 	    ldr r1,=async_keys
 239 ???? 00B500F0 	    _CALL table_scan
 239      9FF85DF8 
 239      04EB
 240 ???? 02BC     	    pop {r1}
 241 ???? 7047     	    _RET 
 242              	
 243              	
 244              	/***************************
 245              	 check if async key 
 246              	 and process it
ARM GAS  forth.s 			page 70


 247              	 input: 
 248              	    r0 code 
 249              	 output:
 250              	    r0 0|-1  
 251              	    Z flag set->not async, reset->async key      
 252              	****************************/
 253              	do_async_key:
 254 ???? 00B5FFF7 	    _CALL is_async_key  
 254      F3FF5DF8 
 254      04EB
 255 ???? FF28     	    cmp r0,#255
 256 ???? 01D1     	    bne set_async_key 
 257 ???? 0020     	    movs r0,#0 
 258 ???? 7047     	    _RET  
 259              	// asynchornous key, set/reset flag 
 260              	set_async_key:
 261 ???? 06B4     	    push {r1,r2}
 262 ???? 94F87E20 	    ldrb r2,[UP,#KBD_FLAGS] 
 263 ???? DFF84014 	    ldr r1,=async_jump 
 264 ???? D1E800F0 	    tbb [r1,r0]
 265              	shift_key:
 266 ???? 4FF00800 	    mov r0,#KBD_F_SHIFT 
 267 ???? 04E0     	    b set_reset
 268              	ctrl_key:
 269 ???? 4FF01000 	    mov r0,#KBD_F_CTRL
 270 ???? 01E0     	    b set_reset 
 271              	alt_key:
 272 ???? 4FF02000 	    mov r0,#KBD_F_ALT 
 273              	set_reset:
 274 ???? 12F0800F 	    tst r2,#KBD_F_REL 
 275 ???? 04D0     	    beq 1f 
 276 ???? 6FEA0000 	    mvn r0,r0
 277 ???? 02EA0002 	    and r2,r0
 278 ???? 01E0     	    b 2f
 279 ???? 42EA0002 	1:  orr r2,r0 
 280 ???? 84F87E20 	2:  strb r2,[UP,#KBD_FLAGS]
 281 ???? 5FF0FF30 	    movs r0,#-1
 282 ???? 06BC     	9:  pop {r1,r2}
 283 ???? 7047     	    _RET 
 284              	
 285              	// asynchronous key table 
 286              	async_keys:
 287 ???? 1200     	    .byte SC_LSHIFT,0 // left shift 
 288 ???? 5900     	    .byte SC_RSHIFT,0 // right shift 
 289 ???? 1401     	    .byte SC_LCTRL,1  // left control 
 290 ???? 1401     	    .byte SC_RCTRL,1  // right control 
 291 ???? 1102     	    .byte SC_LALT,2  // left alt 
 292 ???? 1102     	    .byte SC_RALT,2   // right alt (alt char)
 293 ???? 00FF     	    .byte 0,255 
 294              	
 295              	async_jump: // tbb table for async keys 
 296 ???? 00       	    .byte 0 // shift  key 
 297 ???? 03       	    .byte (ctrl_key-shift_key)/2
 298 ???? 06       	    .byte (alt_key-shift_key)/2
 299              	
 300              	
 301              	/**********************************
ARM GAS  forth.s 			page 71


 302              	    kbd_init 
 303              	    initialize keyboard 
 304              	    PS2 clock on PA11 
 305              	    PS2 data on PA12 
 306              	**********************************/
 307 ???? 00       	    _GBL_FUNC kbd_init 
 308              	//  clock and data pins as INPUT_FLOAT 
 309 ???? 4FF40063 	    _MOV32 r3,KBD_GPIO 
 309      C4F20203 
 310 ???? 1846     	    mov r0,r3 
 311 ???? 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 312 ???? 4FF00002 	    mov r2,#INPUT_FLOAT 
 313 ???? 00B5FEF7 	    _CALL gpio_config
 313      24FF5DF8 
 313      04EB
 314 ???? 1846     	    mov r0,r3 
 315 ???? 4FF00E01 	    mov r1,#KBD_DATA_PIN
 316 ???? 4FF00002 	    mov r2,#INPUT_FLOAT 
 317 ???? 00B5FEF7 	    _CALL gpio_config
 317      1AFF5DF8 
 317      04EB
 318              	// map EXTI15 on PC15 i.e. kbd clock pin 
 319 ???? 4FF46052 	    _MOV32 r2,SYSCFG_BASE_ADR
 319      C4F20102 
 320 ???? 4FF40050 	    mov r0,#(2<<12)
 321 ???? 9082     	    strh r0,[r2,#SYSCFG_EXTICR4]    
 322              	// interrupt triggered on falling edge 
 323 ???? 4FF47052 	   _MOV32 r2,EXTI_BASE_ADR
 323      C4F20102 
 324 ???? 4FF40040 	   mov r0,#(1<<KBD_CLOCK_PIN)
 325 ???? 1060     	   str r0,[r2,#EXTI_IMR] // enable EXTI15 
 326 ???? D060     	   str r0,[r2,#EXTI_FTSR] // on falling edge 
 327 ???? 80EA0000 	   eor r0,r0 
 328 ???? C4F89000 	   str r0,[UP,#KBD_QHEAD]
 329 ???? C4F89400 	   str r0,[UP,#KBD_QTAIL]
 330              	// enable interrupt EXTI15_10_IRQ in NVIC 
 331 ???? 4FF02800 	   mov r0,#EXTI15_10_IRQ
 332 ???? 4FF00101 	   mov r1,#1 
 333 ???? 00B5FEF7 	   _CALL nvic_set_priority
 333      A0FE5DF8 
 333      04EB
 334 ???? 4FF02800 	   mov r0,#EXTI15_10_IRQ
 335 ???? 00B5FEF7 	   _CALL nvic_enable_irq 
 335      B2FE5DF8 
 335      04EB
 336 ???? 7047     	   _RET 
 337              	
 338              	// KEY-ASYNC ( -- n )
 339              	// return async key flags 
 340 ???? 58150000 	    _HEADER KEY_ASYNC,9,"KEY-ASYNC"
 340      094B4559 
 340      2D415359 
 340      4E4300BF 
 341 ???? 47F8046D 	    _PUSH 
 342 ???? 94F87E60 	    ldrb TOS,[UP,#KBD_FLAGS]
 343 ???? 06F0FC06 	    and TOS,#0xFC  
 344 ???? 01F0EABA 	    _NEXT 
ARM GAS  forth.s 			page 72


 345              	
 346              	// KEYCODE 
 347              	// extract keyboard scancode from queue.
 348              	// output:
 349              	//        T0  keycode | 0 
 350              	keycode: 
 351 ???? 0EB4     	    push {T1,T2,T3}
 352 ???? 80EA0000 	    eor T0,T0  
 353 ???? 04F18003 	    add T3,UP,#KBD_QUEUE
 354 ???? D4F89010 	    ldr T1,[UP,#KBD_QHEAD]
 355 ???? D4F89420 	    ldr T2,[UP,#KBD_QTAIL]
 356 ???? 9142     	    cmp T1,T2 
 357 ???? 06D0     	    beq 2f  
 358 ???? 585C     	    ldrb T0,[T3,T1]
 359 ???? 01F10101 	    add T1,#1 
 360 ???? 01F00F01 	    and T1,#KBD_QUEUE_SIZE-1
 361 ???? C4F89010 	    str T1,[UP,#KBD_QHEAD]
 362 ???? 0EBC     	2:  pop {T1,T2,T3}
 363 ???? 7047     	    _RET 
 364              	
 365              	wait_code:
 366 ???? 00B5FFF7 	    _CALL keycode 
 366      E9FF5DF8 
 366      04EB
 367 ???? 0000     	    movs T0,T0
 368 ???? F8D0     	    beq wait_code  
 369 ???? 7047     	    _RET 
 370              	
 371              	// translation table scan 
 372              	// input:
 373              	//      T0   target code 
 374              	//      T1   table pointer 
 375              	// output: 
 376              	//        T0   0 | code
 377              	//        Z flag  
 378              	table_scan:
 379 ???? 04B4     	    push {T2}
 380 ???? 11F8012B 	1:  ldrb T2,[T1],#1
 381 ???? 22B1     	    cbz T2,2f 
 382 ???? 8242     	    cmp T2,T0
 383 ???? 02D0     	    beq 2f 
 384 ???? 01F10101 	    add T1,#1 
 385 ???? F7E7     	    b 1b 
 386 ???? 0878     	2:  ldrb T0,[T1]
 387 ???? 0000     	    movs T0,T0 // set/reset zero flag 
 388 ???? 04BC     	9:  pop {T2}
 389 ???? 7047     	    _RET 
 390              	
 391              	/**********************************
 392              	   PS2-KEY? ( -- key -1 | 0 )
 393              	   get a character from keyboard
 394              	   don't wait for it.
 395              	*********************************/
 396 ???? C0190000 	    _HEADER PS2_QKEY,8,"PS2-KEY?"
 396      08505332 
 396      2D4B4559 
 396      3F00
ARM GAS  forth.s 			page 73


 397 ???? 47F8046D 	    _PUSH 
 398 ???? 86EA0606 	    eor TOS,TOS 
 399 ???? BD49     	    ldr T1,=sc_ascii // translation table
 400 ???? 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 401 ???? 4FF04002 	    mov T2,#KBD_F_XT 
 402 ???? 1042     	    tst T0,T2
 403 ???? 00D0     	    beq 1f
 404 ???? BB49     	    ldr T1,=extended // extended code translation
 405 ???? 00B5FFF7 	1:  _CALL keycode
 405      C1FF5DF8 
 405      04EB
 406 ???? 98B1     	    cbz T0,inkey_exit
 407 ???? E128     	    cmp T0,#XT2_KEY // pause 
 408 ???? 13D0     	    beq pause_key
 409 ???? 00B5FFF7 	    _CALL table_scan 
 409      D5FF5DF8 
 409      04EB
 410 ???? 0646     	    mov TOS,T0
 411 ???? 00B500F0 	    _CALL do_modifiers
 411      16F85DF8 
 411      04EB
 412 ???? 032E     	    cmp TOS,#VK_CTRL_C 
 413 ???? 3EF40BAD 	    beq user_reboot 
 414 ???? 47F8046D 	    _PUSH 
 415 ???? 4FF0FF36 	    mov TOS,#-1
 416              	inkey_exit:     
 417 ???? 01F092BA 	    _NEXT
 418              	pause_key: // discard next 7 codes 
 419 ???? 4FF00701 	    mov T1,#7 
 420 ???? 00B5FFF7 	1:  _CALL wait_code 
 420      B7FF5DF8 
 420      04EB
 421 ???? 0139     	    subs T1,#1
 422 ???? F8D1     	    bne 1b 
 423 ???? 01F087BA 	    _NEXT 
 424              	
 425              	// check for modifiers flags 
 426              	// and process it.
 427              	do_modifiers:
 428 ???? 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 429 ???? 10F0080F 	    tst T0,#KBD_F_SHIFT 
 430 ???? 06D1     	    bne shift_down 
 431 ???? 10F0200F 	    tst T0,#KBD_F_ALT  
 432 ???? 06D1     	    bne altchar_down 
 433 ???? 10F0100F 	    tst T0,#KBD_F_CTRL
 434 ???? 06D1     	    bne ctrl_down 
 435 ???? 0DE0     	    b 9f 
 436              	shift_down:
 437 ???? 3046     	    mov T0,TOS 
 438 ???? A149     	    ldr T1,=shifted 
 439 ???? 04E0     	    b 8f 
 440              	altchar_down:
 441 ???? 3046     	    mov T0,TOS 
 442 ???? A149     	    ldr T1,=altchar
 443 ???? 01E0     	    b 8f
 444              	ctrl_down:
 445 ???? 3046     	    mov T0,TOS 
ARM GAS  forth.s 			page 74


 446 ???? A049     	    ldr T1,=controls 
 447 ???? 00B5FFF7 	8:  _CALL table_scan
 447      A2FF5DF8 
 447      04EB
 448 ???? 0646     	    mov TOS,T0
 449 ???? 00B500F0 	9:  _CALL do_capslock 
 449      03F85DF8 
 449      04EB
 450 ???? 7047     	    _RET 
 451              	
 452              	do_capslock:
 453 ???? 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 454 ???? 10F0040F 	    tst T0,#KBD_F_CAPS 
 455 ???? 0BD0     	    beq 9f 
 456 ???? 412E     	    cmp TOS,#'A'
 457 ???? 09D4     	    bmi 9f 
 458 ???? 5B2E     	    cmp TOS,#'Z'+1 
 459 ???? 03D4     	    bmi 3f 
 460 ???? 612E     	    cmp TOS,#'a'
 461 ???? 05D4     	    bmi 9f 
 462 ???? 7B2E     	    cmp TOS,#'z'+1
 463 ???? 03D5     	    bpl 9f 
 464 ???? 4FF02000 	3:  mov T0,#(1<<5)
 465 ???? 86EA0006 	    eor TOS,T0 
 466 ???? 7047     	9:  _RET 
 467              	
 468              	
 469              	
 470              	/***************************
 471              	 send byte do keyboard
 472              	 input:
 473              	    r0  byte to send 
 474              	 use: 
 475              	    r1,r2 temp 
 476              	    r3 KBD_GPIO 
 477              	***************************/
 478              	kbd_send:
 479 ???? 0FB4     	    push {r0,r1,r2,r3}
 480              	// wait pre-video phase
 481              	// for least video output disturbance
 482 ???? 206F     	1:  ldr r0,[UP,#VID_STATE]
 483 ???? 0128     	    cmp r0,ST_PREVID 
 484 ???? FCD1     	    bne 1b
 485              	// disable video interrupt 
 486 ???? 4FF01D00 	    mov r0,#TIM3_IRQ 
 487 ???? 00B5FEF7 	    _CALL nvic_disable_irq
 487      16FE5DF8 
 487      04EB
 488              	// take control of keyboard clock line  
 489 ???? 4FF40063 	    _MOV32 r3,KBD_GPIO
 489      C4F20203 
 490 ???? 1846     	    mov r0,r3 
 491 ???? 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 492 ???? 4FF01102 	    mov r2,#OUTPUT_OD
 493 ???? 00B5FEF7 	    _CALL gpio_config 
 493      36FE5DF8 
 493      04EB
ARM GAS  forth.s 			page 75


 494 ???? 1846     	    mov r0,r3 
 495 ???? 4FF00F01 	    mov r1,#KBD_CLOCK_PIN
 496 ???? 82EA0202 	    eor r2,r2 
 497 ???? 00B5FEF7 	    _CALL gpio_out 
 497      82FE5DF8 
 497      04EB
 498              	// delay to hold clock line to 0 for 150Âµsec     
 499 ???? 4FF4E150 	    mov r0,#150*48
 500 ???? 0138     	1:  subs r0,#1 
 501 ???? FDD1     	    bne 1b
 502 ???? 01BC     	    pop {r0}
 503 ???? 84F87D00 	    strb r0,[UP,#KBD_SHIFTER]
 504 ???? D4F87E00 	    ldr r0,[UP,#KBD_FLAGS]
 505 ???? 40F00200 	    orr r0,#KBD_TX 
 506 ???? 84F87E00 	    strb r0,[UP,#KBD_FLAGS]
 507 ???? 80EA0000 	    eor r0,r0 
 508 ???? 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]
 509 ???? 84F87F00 	    strb r0,[UP,#KBD_PARITY]
 510              	// take control of data line 
 511              	// and put it to 0 for start bit.    
 512 ???? 1846     	    mov r0,r3 
 513 ???? 4FF00E01 	    mov r1,#KBD_DATA_PIN  
 514 ???? 4FF01102 	    mov r2,#OUTPUT_OD 
 515 ???? 00B5FEF7 	    _CALL gpio_config 
 515      0FFE5DF8 
 515      04EB
 516 ???? 1846     	    mov r0,r3 
 517 ???? 4FF00E01 	    mov r1,#KBD_DATA_PIN 
 518 ???? 82EA0202 	    eor r2,r2 
 519 ???? 00B5FEF7 	    _CALL gpio_out
 519      5BFE5DF8 
 519      04EB
 520              	// release clock line 
 521 ???? 1846     	    mov r0,r3 
 522 ???? 4FF00F01 	    mov r1,#KBD_CLOCK_PIN 
 523 ???? 4FF00002 	    mov r2,#INPUT_FLOAT
 524 ???? 00B5FEF7 	    _CALL gpio_config
 524      FBFD5DF8 
 524      04EB
 525              	// wait send completed
 526              	//  expire after 10 msec 
 527 ???? 4FF00A00 	    mov r0,#10
 528 ???? E060     	    str r0,[UP,#CD_TIMER]
 529 ???? E068     	1:  ldr r0,[UP,#CD_TIMER]
 530 ???? 20B1     	    cbz r0, 4f 
 531 ???? 94F87E00 	2:  ldrb r0,[UP,#KBD_FLAGS]
 532 ???? 10F0020F 	    tst r0,#KBD_TX
 533 ???? F8D1     	    bne 1b 
 534              	// enable video interrupt     
 535 ???? 4FF01D00 	4:  mov r0,#TIM3_IRQ
 536 ???? 00B5FEF7 	    _CALL nvic_enable_irq
 536      A7FD5DF8 
 536      04EB
 537 ???? 94F87E00 	    ldrb r0,[UP,#KBD_FLAGS]
 538 ???? 20F00201 	    bic r1,r0,#KBD_TX
 539 ???? 84F87E10 	    strb r1,[UP,#KBD_FLAGS]
 540 ???? 00F00200 	    and r0,#KBD_TX
ARM GAS  forth.s 			page 76


 541 ???? 48B1     	    cbz r0, 5f
 542 ???? 1968     	    ldr r1,[r3,#GPIO_MODER]
 543 ???? 21F04051 	    bic r1,r1,#(3<<(2*KBD_DATA_PIN))
 544 ???? 1960     	    str r1,[r3,#GPIO_MODER]
 545 ???? 80EA0000 	    eor r0,r0 
 546 ???? 84F87C00 	    strb r0,[UP,#KBD_BITCNTR]     
 547 ???? 6FEA0000 	    mvn r0,r0   
 548 ???? 0EBC     	5:  pop {r1,r2,r3}
 549 ???? 7047     	    _RET 
 550              	
 551              	 
 552              	// flush keyboard queue 
 553              	kbd_clear_queue:
 554 ???? 80EA0000 	    eor T0,T0 
 555 ???? C4F89000 	    str T0,[UP,#KBD_QHEAD]
 556 ???? C4F89400 	    str T0,[UP,#KBD_QTAIL]
 557 ???? 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 558 ???? 6FF00301 	    mvn T1,#3
 559 ???? 00EA0100 	    and T0,T1 
 560 ???? 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 561 ???? 7047     	    _RET 
 562              	
 563              	/**********************************
 564              	 KBD-RST ( -- c )
 565              	 send a reset command to keyboard
 566              	**********************************/
 567 ???? 321A0000 	    _HEADER KBD_RST,7,"KBD-RST"
 567      074B4244 
 567      2D525354 
 568 ???? 4FF0FF00 	1:  mov T0,#KBD_CMD_RESET 
 569 ???? 00B5FFF7 	    _CALL kbd_send
 569      6CFF5DF8 
 569      04EB
 570 ???? B8B9     	    cbnz T0,3f // keyboard not dectected
 571 ???? 00B5FFF7 	    _CALL kbd_clear_queue
 571      E0FF5DF8 
 571      04EB
 572 ???? 00B5FFF7 	    _CALL wait_code 
 572      E0FE5DF8 
 572      04EB
 573 ???? FE28     	    cmp r0,KBD_CMD_RESEND
 574 ???? EBD0     	    beq 1b 
 575 ???? 4FF4FA70 	    mov T0,#500 
 576 ???? E060     	    str T0,[UP,#CD_TIMER]
 577 ???? 00B5FFF7 	2:  _CALL keycode
 577      C2FE5DF8 
 577      04EB
 578 ???? 10B9     	    cbnz T0,3f
 579 ???? E068     	    ldr T0,[UP,#CD_TIMER]
 580 ???? 0028     	    cmp T0,#0 
 581 ???? F6D1     	    bne 2b 
 582 ???? 47F8046D 	3:  _PUSH 
 583 ???? 0646     	    mov TOS,T0  
 584 ???? 01F0A1B9 	    _NEXT 
 585              	
 586              	/*****************************
 587              	 KBD-LED ( c -- )
ARM GAS  forth.s 			page 77


 588              	 send command to control
 589              	 keyboard LEDS 
 590              	*****************************/
 591 ???? 1C1C0000 	    _HEADER KBD_LED,7,"KBD-LED"
 591      074B4244 
 591      2D4C4544 
 591      00BF
 592 ???? 00B5FFF7 	1:  _CALL kbd_clear_queue
 592      BCFF5DF8 
 592      04EB
 593 ???? 4FF0ED00 	     mov T0,#KBD_CMD_LED 
 594 ???? 00B5FFF7 	    _CALL kbd_send 
 594      3BFF5DF8 
 594      04EB
 595 ???? 00B5FFF7 	2:  _CALL wait_code 
 595      B5FE5DF8 
 595      04EB
 596 ???? FE28     	    cmp T0,#KBD_CMD_RESEND
 597 ???? ECD0     	    beq 1b
 598 ???? FA28     	    cmp T0,#KBD_ACK  
 599 ???? F6D1     	    bne 2b 
 600 ???? 3046     	2:  mov T0,TOS 
 601 ???? 00F00700 	    and T0,#7 
 602 ???? 00B5FFF7 	    _CALL kbd_send 
 602      2AFF5DF8 
 602      04EB
 603 ???? 00B5FFF7 	3:  _CALL wait_code 
 603      A4FE5DF8 
 603      04EB
 604 ???? FE28     	    cmp T0,#KBD_CMD_RESEND 
 605 ???? F0D0     	    beq 2b
 606 ???? FA28     	    cmp T0,#KBD_ACK 
 607 ???? F6D1     	    bne 3b  
 608 ???? 57F8046B 	    _POP 
 609 ???? 01F070B9 	    _NEXT 
 610              	
 611              	/**************************
 612              	 CAPS-LED ( -- )
 613              	 synch capslock LED
 614              	 to KBD_F_CAPS 
 615              	**************************/
 616 ???? 721C0000 	    _HEADER CAPS_LED,8,"CAPS-LED"
 616      08434150 
 616      532D4C45 
 616      440000BF 
 617 ???? 94F87E00 	    ldrb T0,[UP,#KBD_FLAGS]
 618 ???? 10F0010F 	    tst T0,#1
 619 ???? 01D1     	    bne 1f 
 620 ???? 01F061B9 	    _NEXT 
 621 ???? 47F8046D 	1: _PUSH 
 622 ???? 6FF00101 	    mvn T1,#1 
 623 ???? 00EA0100 	    and T0,T1 
 624 ???? 84F87E00 	    strb T0,[UP,#KBD_FLAGS]
 625 ???? 00F00406 	    and TOS,T0,#KBD_F_CAPS   
 626 ???? 134D45F0 	    _CALL_COLWORD KBD_LED
 626      0105B8E7 
 627              	
ARM GAS  forth.s 			page 78


 628              	
 629              	/************************
 630              	 WAIT-KEY ( -- c )
 631              	 wait for keyboard key 
 632              	*************************/
 633 ???? D41C0000 	    _HEADER WKEY,8,"WAIT-KEY"
 633      08574149 
 633      542D4B45 
 633      5900
 634 ???? 504700BF 	    _NEST
 635 ???? E11C0000 	1:  _ADR CAPS_LED  
 636 ???? 3D1A0000 	    _ADR PS2_QKEY 
 637 ???? DD350000 	    _ADR QDUP 
 638 ???? 17320000 	    _QBRAN 1b  
 638      1C1D0000 
 639 ???? B72F0000 	    _UNNEST 
 640 ???? 2E190000 	
 640      3C190000 
 640      9C150000 
 640      C0160000 
 640      50160000 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021, 2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/**********************************
  21              	    SPI FLASH memory 
  22              	    U3 chip: Winbound W25Q128FV
  23              	    16 MBytes
  24              	    erase BLOCK are 4KB 
  25              	    write pages are 256 bytes
  26              	**********************************/
  27              	
  28              	    PIN_F_SC = 4 
  29              	    PIN_SCK = 5 
  30              	    PIN_MISO = 6 
  31              	    PIN_MOSI = 7 
  32              	
  33              	/*****************************
  34              	  initialize SPI peripheral 
  35              	  pinout:
  36              	     PA4 F_CS 
ARM GAS  forth.s 			page 79


  37              	     PA5 SCK 
  38              	     PA6 MISO 
  39              	     PA7 MOSI    
  40              	******************************/
  41              	flash_spi_init:
  42 ???? 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR 
  42      C4F20200 
  43 ???? 0346     	    mov r3,r0 
  44 ???? 4FF00401 	    mov r1,#PIN_F_SC 
  45 ???? 4FF00102 	    mov r2,#OUTPUT_PP
  46 ???? 00B5FEF7 	    _CALL gpio_config 
  46      1AFD5DF8 
  46      04EB
  47 ???? 1846     	    mov r0,r3 
  48 ???? 4FF00401 	    mov r1,#PIN_F_SC  
  49 ???? 4FF00102 	    MOV r2,#1
  50 ???? 00B5FEF7 	    _CALL gpio_out 
  50      66FD5DF8 
  50      04EB
  51 ???? 1846     	    mov r0,r3 
  52 ???? 4FF00501 	    mov r1,#PIN_SCK  
  53 ???? 4FF00202 	    mov r2,#OUTPUT_AFPP
  54 ???? 00B5FEF7 	    _CALL gpio_config 
  54      06FD5DF8 
  54      04EB
  55 ???? 1846     	    mov r0,r3 
  56 ???? 4FF00701 	    mov r1,#PIN_MOSI 
  57 ???? 4FF00202 	    mov r2,#OUTPUT_AFPP 
  58 ???? 00B5FEF7 	    _CALL gpio_config 
  58      FCFC5DF8 
  58      04EB
  59 ???? 1846     	    mov r0,r3
  60 ???? 4FF00601 	    mov r1,#PIN_MISO
  61 ???? 4FF00202 	    mov r2,#INPUT_AFO  
  62 ???? 00B5FEF7 	    _CALL gpio_config
  62      F2FC5DF8 
  62      04EB
  63              	// PA5:7 at max speed 
  64 ???? 4CF6AA40 	    mov r0,#0xCCAA
  65 ???? 1881     	    strh r0,[r3,#GPIO_OSPEEDR]    
  66 ???? 4FF46050 	    _MOV32 r0,RCC_BASE_ADR
  66      C4F20200 
  67 ???? 416C     	    ldr r1,[r0,#RCC_APB2ENR]
  68 ???? 41F48051 	    orr r1,#(1<<12) // SPI1EN 
  69 ???? 4164     	    str r1,[r0,#RCC_APB2ENR]
  70 ???? 4FF44050 	    _MOV32 r0, SPI1_BASE_ADR 
  70      C4F20100 
  71 ???? 4FF45371 	    mov r1,#(1<<2)+(1<<3)+(1<<6)+(1<<8)+(1<<9) //MSTR+SPE+SS+SSI, Fpclk/4 
  72 ???? 0180     	    strh r1,[r0,#SPI_CR1]
  73 ???? 196A     	    ldr r1,[r3,#GPIO_AFRL]
  74 ???? 80EA0000 	    eor r0,r0 
  75 ???? C5F25050 	    movt r0,#0x5550 
  76 ???? 40EA0100 	    orr r0,r1 
  77 ???? 1862     	    str r0,[r3,#GPIO_AFRL]
  78 ???? 7047     	    _RET 
  79              	
  80              	
ARM GAS  forth.s 			page 80


  81              	/**********************
  82              	    CHIP-SEL ( -- )
  83              	    drive F_SC low 
  84              	*********************/
  85 ???? 0E1D0000 	    _HEADER CHIP_SEL,8,"CHIP-SEL"
  85      08434849 
  85      502D5345 
  85      4C00
  86 ???? 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
  86      C4F20200 
  87 ???? 4FF00401 	    mov r1,#PIN_F_SC 
  88 ???? 4FF00002 	    mov r2,#0 
  89 ???? 00B5FEF7 	    _CALL gpio_out 
  89      19FD5DF8 
  89      04EB
  90 ???? 01F0C7B8 	    _NEXT 
  91              	
  92              	
  93              	/*********************
  94              	    CHIP-DSEL 
  95              	    drive F_SC high 
  96              	*********************/
  97 ???? FA1D0000 	    _HEADER CHIP_DSEL,9,"CHIP-DSEL"
  97      09434849 
  97      502D4453 
  97      454C
  98 ???? 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR
  98      C4F20100 
  99 ???? 0189     	1:  ldrh T1,[T0,#SPI_SR]
 100 ???? 11F0800F 	    tst T1,(1<<7) // BSY 
 101 ???? FBD1     	    bne 1b 
 102 ???? 4FF00000 	    _MOV32 r0,GPIOA_BASE_ADR
 102      C4F20200 
 103 ???? 4FF00401 	    mov r1,#PIN_F_SC 
 104 ???? 4FF00102 	    mov r2,#1 
 105 ???? 00B5FEF7 	    _CALL gpio_out 
 105      FBFC5DF8 
 105      04EB
 106 ???? 01F0A9B8 	    _NEXT 
 107              	
 108              	
 109              	/****************************
 110              	    RD-BYTE ( -- )
 111              	    read flash byte 
 112              	***************************/
 113 ???? 261E0000 	    _HEADER RD_BYTE,7,"RD-BYTE"
 113      0752442D 
 113      42595445 
 113      00BF
 114 ???? 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 114      C4F20100 
 115 ???? 0189     	0:  ldrh T1,[T0,#SPI_SR]
 116 ???? 11F0020F 	    tst T1,#(1<<1) //TXE
 117 ???? FBD0     	    beq 0b 
 118 ???? 6FF00001 	    mvn T1,#0 
 119 ???? 0173     	    strb T1,[T0,#SPI_DR]
 120 ???? 0189     	1:  ldrh T1,[T0,#SPI_SR]
ARM GAS  forth.s 			page 81


 121 ???? 11F0010F 	    tst T1,#(1<<0) // RXNE  
 122 ???? FBD0     	    beq 1b     
 123              	2:  
 124 ???? 47F8046D 	    _PUSH 
 125 ???? 067B     	    ldrb TOS,[T0,#SPI_DR]
 126 ???? 01F08EB8 	    _NEXT 
 127              	
 128              	
 129              	/*********************************
 130              	    WR-BYTE  ( c -- )
 131              	    write flash byte 
 132              	*************************/
 133 ???? 621E0000 	    _HEADER WR_BYTE,7,"WR-BYTE"
 133      0757522D 
 133      42595445 
 134 ???? 4FF44050 	    _MOV32 T0,SPI1_BASE_ADR 
 134      C4F20100 
 135 ???? 0189     	0:  ldrh T1,[T0,#SPI_SR]
 136 ???? 11F0020F 	    tst T1,#(1<<1) //TXE
 137 ???? FBD0     	    beq 0b 
 138 ???? 0673     	    strb TOS,[T0,#SPI_DR]
 139 ???? 0189     	1:  ldrh T1,[T0,#SPI_SR]
 140 ???? 11F0010F 	    tst T1,#(1<<0) // RXNE  
 141 ???? FBD0     	    beq 1b 
 142 ???? 8189     	    ldrh T1,[T0,#SPI_DR]
 143 ???? 57F8046B 	    _POP 
 144 ???? 01F076B8 	    _NEXT 
 145              	
 146              	/*************************
 147              	    WR-DIS ( -- )
 148              	    write disable 
 149              	    reset WEL bit 
 150              	*************************/
 151 ???? 981E0000 	    _HEADER WR_DIS,6,"WR-DIS"
 151      0657522D 
 151      44495300 
 152 ???? 504700BF 	    _NEST 
 153 ???? 051E0000 	    _ADR CHIP_SEL 
 154 ???? D7310000 	    _DOLIT 4
 154      04000000 
 155 ???? A11E0000 	    _ADR WR_BYTE
 156 ???? 311E0000 	    _ADR CHIP_DSEL
 157 ???? B72F0000 	    _UNNEST
 158              	
 159              	/*************************
 160              	    WR-ENBL ( -- )
 161              	    set WEL flag in SR0 
 162              	************************/
 163 ???? C81E0000 	    _HEADER WR_ENBL,7,"WR-ENBL"
 163      0757522D 
 163      454E424C 
 164 ???? 504700BF 	    _NEST 
 165 ???? 051E0000 	    _ADR CHIP_SEL 
 166 ???? D7310000 	    _DOLIT 6 
 166      06000000 
 167 ???? A11E0000 	    _ADR WR_BYTE 
 168 ???? 311E0000 	    _ADR CHIP_DSEL 
ARM GAS  forth.s 			page 82


 169 ???? B72F0000 	    _UNNEST 
 170              	
 171              	/********************************
 172              	    RD-SR ( n -- c )
 173              	    read status register  
 174              	********************************/
 175 ???? F01E0000 	    _HEADER RD_SR,5,"RD-SR"
 175      0552442D 
 175      535200BF 
 176 ???? 504700BF 	    _NEST
 177 ???? 051E0000 	    _ADR CHIP_SEL  
 178 ???? D7310000 	    _DOLIT sr_cmd 
 178      481F0000 
 179 ???? CD340000 	    _ADR PLUS 
 180 ???? 8D320000 	    _ADR CAT
 181 ???? A11E0000 	    _ADR WR_BYTE
 182 ???? 6D1E0000 	    _ADR RD_BYTE
 183 ???? 311E0000 	    _ADR CHIP_DSEL  
 184 ???? B72F0000 	    _UNNEST 
 185 ???? 053515   	sr_cmd: .byte 5,0x35,0x15      
 186              	
 187              	/*********************************
 188              	    SEND-ADR ( a -- )
 189              	    send 24 bits address 
 190              	*******************************/
 191 ???? 181F0000 	    _HEADER SEND_ADR,8,"SEND-ADR"
 191      0853454E 
 191      442D4144 
 191      52
 192 ???? 504700BF 	    _NEST 
 193 ???? 91330000 	    _ADR DUPP 
 194 ???? D7310000 	    _DOLIT 16
 194      10000000 
 195 ???? A5340000 	    _ADR RSHIFT 
 196 ???? A11E0000 	    _ADR WR_BYTE 
 197 ???? 91330000 	    _ADR DUPP
 198 ???? D7310000 	    _DOLIT 8 
 198      08000000 
 199 ???? A5340000 	    _ADR RSHIFT 
 200 ???? A11E0000 	    _ADR WR_BYTE 
 201 ???? A11E0000 	    _ADR WR_BYTE 
 202 ???? B72F0000 	    _UNNEST 
 203              	
 204              	/**********************************
 205              	    WAIT-DONE ( -- )
 206              	    wait write operation completed 
 207              	**********************************/
 208 ???? 4F1F0000 	    _HEADER WAIT_DONE,9,"WAIT-DONE"
 208      09574149 
 208      542D444F 
 208      4E4500BF 
 209 ???? 504700BF 	    _NEST 
 210 ???? D7310000 	1:  _DOLIT 0 
 210      00000000 
 211 ???? 211F0000 	    _ADR RD_SR 
 212 ???? D7310000 	    _DOLIT 3 
 212      03000000 
ARM GAS  forth.s 			page 83


 213 ???? 4D340000 	    _ADR ANDD 
 214 ???? 17320000 	    _QBRAN 2f
 214      C81F0000 
 215 ???? 3F320000 	    _BRAN 1b
 215      A01F0000 
 216 ???? B72F0000 	2:  _UNNEST 
 217              	
 218              	
 219              	/****************************
 220              	   ERASE-BLK ( a -- )
 221              	   erase 4Ko block  
 222              	***************************/
 223 ???? 901F0000 	    _HEADER ERASE_BLK,9,"ERASE-BLK"
 223      09455241 
 223      53452D42 
 223      4C4B00BF 
 224 ???? 504700BF 	    _NEST 
 225 ???? F91E0000 	    _ADR WR_ENBL
 226 ???? 051E0000 	    _ADR CHIP_SEL 
 227 ???? D7310000 	    _DOLIT 0x20 
 227      20000000 
 228 ???? A11E0000 	    _ADR WR_BYTE 
 229 ???? 591F0000 	    _ADR SEND_ADR
 230 ???? 311E0000 	    _ADR CHIP_DSEL 
 231 ???? 9D1F0000 	    _ADR WAIT_DONE 
 232 ???? B72F0000 	    _UNNEST 
 233              	
 234              	/******************************
 235              	    ERASE-CHIP ( -- )
 236              	    erase all data 
 237              	******************************/
 238 ???? D01F0000 	    _HEADER ERASE_CHIP,10,"ERASE-CHIP"
 238      0A455241 
 238      53452D43 
 238      48495000 
 239 ???? 504700BF 	    _NEST 
 240 ???? F91E0000 	    _ADR WR_ENBL 
 241 ???? 051E0000 	    _ADR CHIP_SEL
 242 ???? D7310000 	    _DOLIT 0x60
 242      60000000 
 243 ???? D7310000 	    _DOLIT 0xC7 
 243      C7000000 
 244 ???? A11E0000 	    _ADR WR_BYTE 
 245 ???? A11E0000 	    _ADR WR_BYTE 
 246 ???? 311E0000 	    _ADR CHIP_DSEL 
 247 ???? 9D1F0000 	    _ADR WAIT_DONE
 248 ???? B72F0000 	    _UNNEST 
 249              	
 250              	
 251              	/******************************
 252              	    RD-BLK ( buff n a --  )
 253              	    read n bytes in buff 
 254              	    starting at address a  
 255              	******************************/
 256 ???? 08200000 	    _HEADER RD_BLK,6,"RD-BLK"
 256      0652442D 
 256      424C4B00 
ARM GAS  forth.s 			page 84


 257 ???? 504700BF 	    _NEST
 258 ???? 051E0000 	    _ADR CHIP_SEL 
 259 ???? D7310000 	    _DOLIT 3 
 259      03000000 
 260 ???? A11E0000 	    _ADR WR_BYTE 
 261 ???? 591F0000 	    _ADR SEND_ADR
 262 ???? FD320000 	    _ADR TOR   
 263 ???? 3F320000 	    _BRAN 2f
 263      84200000 
 264 ???? 6D1E0000 	1:  _ADR RD_BYTE
 265 ???? D1330000 	    _ADR OVER 
 266 ???? 79320000 	    _ADR CSTOR
 267 ???? 29350000 	    _ADR ONEP 
 268 ???? F9310000 	2:  _DONXT 1b
 268      74200000 
 269 ???? 71330000 	    _ADR DROP 
 270 ???? 311E0000 	    _ADR CHIP_DSEL 
 271 ???? B72F0000 	    _UNNEST 
 272              	
 273              	/*****************************
 274              	    WR-BLK ( buff n a -- )
 275              	    write up to 256 bytes 
 276              	    in erased flash
 277              	****************************/
 278 ???? 48200000 	    _HEADER WR_BLK,6,"WR-BLK"
 278      0657522D 
 278      424C4B00 
 279 ???? 504700BF 	    _NEST 
 280 ???? F91E0000 	    _ADR WR_ENBL
 281 ???? 051E0000 	    _ADR CHIP_SEL
 282 ???? D7310000 	    _DOLIT 2 
 282      02000000 
 283 ???? A11E0000 	    _ADR WR_BYTE 
 284 ???? 591F0000 	    _ADR SEND_ADR
 285 ???? FD320000 	    _ADR TOR
 286 ???? 3F320000 	    _BRAN 2f 
 286      E4200000 
 287 ???? 91330000 	1:  _ADR DUPP 
 288 ???? 8D320000 	    _ADR CAT 
 289 ???? 91330000 	    _ADR DUPP 
 290 ???? 3D490000 	    _ADR HDOT
 291 ???? A11E0000 	    _ADR WR_BYTE 
 292 ???? 29350000 	    _ADR ONEP
 293 ???? F9310000 	2:  _DONXT 1b 
 293      CC200000 
 294 ???? 71330000 	    _ADR DROP
 295 ???? 311E0000 	    _ADR CHIP_DSEL
 296 ???? 9D1F0000 	    _ADR WAIT_DONE 
 297 ???? B72F0000 	    _UNNEST
 298              	
 299              	
 300              	/********************************
 301              	   FILES structures 
 302              	   -----------------
 303              	   name: 16 bytes null padded 
 304              	   size: 4 bytes
 305              	   blocks count: 4 bytes
ARM GAS  forth.s 			page 85


 306              	   update counter: 4 bytes  
 307              	   block size: 4KB 
 308              	   free block: first byte 0xFF 
 309              	   erased file: first byte 0x00
 310              	********************************/
 311              	
 312              	/*******************************
 313              	    SEARCH-FILE 'name' ( -- adr )
 314              	    search file in flash 
 315              	********************************/
 316 ???? 9C200000 	    _HEADER SEARCH_FILE,11,"SEARCH-FILE"
 316      0B534541 
 316      5243482D 
 316      46494C45 
 317 ???? 504700BF 	    _NEST 
 318              	    
 319 ???? B72F0000 	    _UNNEST 
 320              	
 321              	 /******************************
 322              	    ERASE-FILE 'name' ( -- )
 323              	    delete a file 
 324              	*******************************/
 325 ???? 00210000 	    _HEADER ERASE_FILE,10,"ERASE-FILE"
 325      0A455241 
 325      53452D46 
 325      494C4500 
 326 ???? 504700BF 	    _NEST 
 327              	
 328 ???? B72F0000 	    _UNNEST 
 329              	
 330              	/*******************************
 331              	    DIR ( -- )
 332              	    print files list 
 333              	*******************************/
 334 ???? 18210000 	    _HEADER DIR,3,"DIR"
 334      03444952 
 335 ???? 504700BF 	    _NEST 
 336              	
 337 ???? B72F0000 	    _UNNEST 
 338              	
 339              	/*******************************
 340              	    SAVE 'name' ( -- ) 
 341              	    save program in flash 
 342              	********************************/
 343 ???? 30210000 	    _HEADER SAVE,4,"SAVE"
 343      04534156 
 343      450000BF 
 344 ???? 504700BF 	    _NEST 
 345              	
 346 ???? B72F0000 	    _UNNEST 
 347              	
 348              	/******************************
 349              	    LOAD 'name ( -- )
 350              	    load program from flash 
 351              	******************************/
 352 ???? 40210000 	    _HEADER LOAD,4,"LOAD"
 352      044C4F41 
ARM GAS  forth.s 			page 86


 352      440000BF 
 353 ???? 504700BF 	    _NEST 
 354              	
 355 ???? B72F0000 	    _UNNEST 
 356              	
 357              	
 358              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/***********************************
  21              	    block words set 
  22              	    according to Forth 2012 standard
  23              	    see forth-2012.pdf in docs 
  24              	************************************/
  25              	
  26              	/**************************************************************************************************
  27              	                                    EXCERPT from forth-2012.pdf chapter 7 
  28              	
  29              	7.2 Additional terms
  30              	
  31              	block: 1024 characters of data on mass storage, designated by a block number.
  32              	
  33              	block buffer: A block-sized region of data space where a block is made temporarily available for us
  34              	current block buffer is the block buffer most recently accessed by BLOCK, BUFFER, LOAD, LIST,
  35              	or THRU.
  36              	
  37              	NOTE:  these blocks will be stored on the flash memory on board of BLACK PILL. 
  38              	
  39              	***************************************************************************************************
  40              	
  41              	/*******************************
  42              	   BLKN[4]
  43              	
  44              	   record {
  45              	       updated: byte; 
  46              	       free: byte; 
  47              	       block_nbr: word;  
  48              	   }
  49              	
  50              	*******************************/
ARM GAS  forth.s 			page 87


  51              	
  52              	/*****************************
  53              	    BLK ( -- a-addr )
  54              	    address of system variable 
  55              	    containing the active 
  56              	    block #
  57              	******************************/
  58 ???? 54210000 	    _HEADER BLK,3,"BLK"
  58      03424C4B 
  59 ???? 47F8046D 	    _PUSH 
  60 ???? 2646     	    MOV     TOS,UP 
  61 ???? 06F1B806 	    ADD TOS,#BLKID
  62 ???? 00F01BBF 	    _NEXT 
  63              	
  64              	
  65              	/******************************
  66              	    BLOCK ( u -- a-addr )
  67              	    select block number u 
  68              	    load in buffer if not already 
  69              	    loaded 
  70              	input:
  71              	    u   block nbr to select 
  72              	output:
  73              	    a-addr  buffer address 
  74              	*********************************/
  75 ???? 68210000 	    _HEADER BLOCK,5,"BLOCK"
  75      05424C4F 
  75      434B
  76 ???? 504700BF 	    _NEST 
  77              	
  78 ???? B72F0000 	    _UNNEST 
  79              	
  80              	
  81              	/********************************
  82              	    BUFFER ( u -- a-addr )
  83              	    assign a buffer to bock u 
  84              	input:
  85              	    u   block number 
  86              	output:
  87              	    a-addr   address of buffer 
  88              	********************************/
  89              	    _HEADRE BUFFER,6,"BUFFER"
  90 ???? 504700BF 	    _NEST 
  91              	
  92 ???? B72F0000 	    _UNNEST 
  93              	
  94              	/*******************************
  95              	    FLUSH (-- )
  96              	    unassign all buffers 
  97              	    save modified ones.
  98              	******************************/
  99 ???? 7E210000 	    _HEADER FLUSH,5,"FLUSH"
  99      05464C55 
  99      534800BF 
 100 ???? 504700BF 	    _NEST 
 101              	
 102 ???? B72F0000 	    _UNNEST 
ARM GAS  forth.s 			page 88


 103              	
 104              	/*****************************
 105              	    LOAD ( u -- )
 106              	    interpret block u 
 107              	    load in buffer if not 
 108              	    already 
 109              	*****************************/
 110 ???? 98210000 	    _HEADER LOAD,4,"LOAD"
****  Error: symbol `_LOAD' is already defined
****  Error: symbol `LOAD' is already defined
 110      044C4F41 
 110      440000BF 
 111 ???? 504700BF 	    _NEST 
 112              	
 113 ???? B72F0000 	    _UNNEST 
 114              	
 115              	/******************************
 116              	    SAVE-BUFFERS ( -- )
 117              	    save all modified buffers
 118              	    mark as unmodified 
 119              	******************************/
 120 ???? AC210000 	    _HEADER SAVE_BUFFERS,12,"SAVE-BUFFERS"
 120      0C534156 
 120      452D4255 
 120      46464552 
 120      530000BF 
 121 ???? 504700BF 	    _NEST 
 122              	
 123 ???? B72F0000 	    _UNNEST 
 124              	
 125              	/*********************************
 126              	    UPDATE ( -- )
 127              	    mark current block as modified 
 128              	**********************************/
 129 ???? C0210000 	    _HEADER UPDATE,6,"UPDATE"
 129      06555044 
 129      41544500 
 130 ???? 504700BF 	    _NEST 
 131              	
 132 ???? B72F0000 	    _UNNEST 
 133              	
 134              	
 135              	/***********************************
 136              	    EMPTY-BUFFERS ( -- )
 137              	    unassign all buffers 
 138              	    don't save modified
 139              	***********************************/
 140 ???? DC210000 	    _HEADER EMPTY_BUFFERS,13,"EMPTY-BUFFERS"
 140      0D454D50 
 140      54592D42 
 140      55464645 
 140      525300BF 
 141 ???? 504700BF 	    _NEST
 142              	
 143 ???? B72F0000 	    _UNNEST 
 144              	    
 145              	/*************************************
ARM GAS  forth.s 			page 89


 146              	    LIST ( U -- )
 147              	    display content of block u 
 148              	*************************************/
 149 ???? F0210000 	    _HEADER LIST,4,"LIST"
 149      044C4953 
 149      540000BF 
 150 ???? 504700BF 	    _NEST 
 151              	
 152 ???? B72F0000 	    _UNNEST 
 153              	
 154              	/************************************
 155              	    SRC ( -- a-addr )
 156              	    addres of SRC variable 
 157              	    content last listed block number 
 158              	**************************************/
 159 ???? 0C220000 	    _HEADER SRC,3,"SRC"
 159      03535243 
 160 ???? 47F8046D 	    _PUSH 
 161 ???? 2646     	    MOV TOS,UP
 162 ???? 06F10006 	    ADD TOS,SRC 
 163 ???? 504700BF 	    _NEST 
 164              	
 165              	/***************************************
 166              	    THRU  ( u1 u2 -- )
 167              	    LOAD blocks u1 .. u2 
 168              	****************************************/    
 169 ???? 20220000 	    _HEADER THRU,4,"THRU" 
 169      04544852 
 169      5500
 170 ???? 504700BF 	    _NEST 
 171              	
 172 ???? B72F0000 	    _UNNEST 
 173              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	
  21              	/*************************************
  22              	   Floating point using FPU 
  23              	*************************************/
  24              	  .cpu cortex-m4
ARM GAS  forth.s 			page 90


  25              	  .fpu vfpv4
  26              	  .thumb
  27              	
  28              	minus1 = 0xBF800000  // -1.0  to invert mantissa sign 
  29              	plus1 = 0x3F800000  // 1.0  
  30              	ten = 0x41200000  // 10.0  
  31              	onetenth = 0x3DCCCCCD // 0.1 
  32              	
  33 ???? 5F708930 	     .word  0x3089705F // 1e-9
  34 ???? 77CC2B32 	     .word  0x322BCC77 // 1e-8
  35 ???? 95BFD633 	     .word  0x33D6BF95 // 1e-7
  36 ???? BD378635 	     .word  0x358637BD // 1e-6 
  37 ???? ACC52737 	     .word  0x3727C5AC // 1e-5 
  38 ???? 17B7D138 	     .word  0x38D1B717 // 1e-4 
  39 ???? 6F12833A 	     .word  0x3A83126F // 1e-3 
  40 ???? 0AD7233C 	     .word  0x3C23D70A // 1e-2 
  41 ???? CDCCCC3D 	     .word  0x3DCCCCCD // 1e-1 
  42              	p10:
  43 ???? 0000803F 	     .word  0x3F800000 // 1.0 
  44 ???? 00002041 	     .word  0x41200000 // 1e1 
  45 ???? 0000C842 	     .word  0x42C80000 // 1e2 
  46 ???? 00007A44 	     .word  0x447A0000 // 1e3 
  47 ???? 00401C46 	     .word  0x461C4000 // 1e4 
  48 ???? 0050C347 	     .word  0x47C35000 // 1e5 
  49 ???? 00247449 	     .word  0x49742400 // 1e6 
  50 ???? 8096184B 	     .word  0x4B189680 // 1e7
  51 ???? 20BCBE4C 	     .word  0x4CBEBC20 // 1e8 
  52 ???? 286B6E4E 	     .word  0x4E6E6B28 // 1e9  
  53              	
  54              	/***********************
  55              	    PWR10  ( n -- 10^n )
  56              	    return powers of 10
  57              	    from 1e-7..1e7
  58              	***********************/    
  59 ???? 36220000 	    _HEADER PWR10,5,"PWR10"
  59      05505752 
  59      313000BF 
  60 ???? 4FEA8606 	    lsl TOS,#2  
  61 ???? FF48     	    ldr t0, =p10 
  62 ???? 0644     	    add TOS,TOS,T0
  63 ???? 3668     	    ldr TOS,[TOS]  
  64 ???? 00F083BE 	    _NEXT  
  65              	    
  66              	
  67              	
  68              	/*****************************
  69              	   initialize FPU
  70              	****************************/
  71              	fpu_init: 
  72 ???? DFF8F803 	   ldr.w r0,=CPACR 
  73 ???? 0168     	   ldr R1,[R0]
  74 ???? 41F47001 	   orr r1,r1,#(0xf<<20)
  75 ???? 0160     	   str r1,[r0]
  76 ???? BFF34F8F 	   dsb 
  77 ???? FB48     	   ldr r0,=FPC_BASE_ADR
  78 ???? 81EA0101 	   eor r1,r1 
  79 ???? 0160     	   str r1,[r0,FPCCR]
ARM GAS  forth.s 			page 91


  80 ???? BFF34F8F 	   dsb
  81              	//   mov r0,#FPU_IRQ 
  82              	//   _CALL nvic_enable_irq
  83 ???? 7047     	   _RET
  84              	
  85              	/***************************
  86              	    FDI ( -- )
  87              	    disable fpu exception
  88              	    interrupt
  89              	***************************/
  90 ???? 94220000 	    _HEADER FDI,3,"FDI"
  90      03464449 
  91 ???? 4FF05100 	    mov r0,#FPU_IRQ 
  92 ???? 00B5FEF7 	    _CALL nvic_disable_irq
  92      35FA5DF8 
  92      04EB
  93 ???? 00F067BE 	    _NEXT 
  94              	
  95              	/***************************
  96              	    FEI ( -- )
  97              	    enable fpu exception 
  98              	    interrupt 
  99              	**************************/
 100 ???? CC220000 	    _HEADER FEI,3,"FEI"
 100      03464549 
 100      00BF
 101 ???? 4FF05100 	    mov r0,#FPU_IRQ
 102 ???? 00B5FEF7 	    _CALL nvic_enable_irq
 102      12FA5DF8 
 102      04EB
 103 ???? 00F059BE 	    _NEXT 
 104              	
 105              	
 106              	/***************************
 107              	   FPSCR ( -- u )
 108              	   stack fpu SCR register 
 109              	***************************/
 110 ???? E6220000 	   _HEADER FPSCR,5,"FPSCR"
 110      05465053 
 110      4352
 111 ???? 47F8046D 	   _PUSH 
 112 ???? F1EE106A 	   vmrs TOS,FPSCR
 113 ???? BFF34F8F 	   dsb  
 114 ???? 00F04CBE 	   _NEXT 
 115              	
 116              	
 117              	/**************************
 118              	   CLR-FPSCR ( mask -- )
 119              	   clear FPSCR bits 
 120              	input:
 121              	    mask  and mask 
 122              	************************/
 123 ???? 02230000 	   _HEADER CLR_FPSCR,9,"CLR-FPSCR"
 123      09434C52 
 123      2D465053 
 123      435200BF 
 124 ???? F1EE100A 	   vmrs T0,FPSCR 
ARM GAS  forth.s 			page 92


 125 ???? BFF34F8F 	   dsb 
 126 ???? 06EA0006 	   and TOS,T0  
 127 ???? E1EE106A 	   vmsr FPSCR,TOS 
 128 ???? BFF34F8F 	   dsb 
 129 ???? 00F038BE 	   _NEXT 
 130              	
 131              	
 132              	/*******************************
 133              	    >S0 variable ( f# --  )
 134              	    send float to fpu S0 
 135              	**********************************/
 136 ???? 1C230000 	    _HEADER TOS0,3,">S0"
 136      033E5330 
 137 ???? 00EE106A 	    vmov.f32 S0,TOS 
 138 ???? 57F8046B 	    _POP 
 139 ???? 00F02EBE 	    _NEXT  
 140              	
 141              	/*******************************
 142              	    >S1 variable ( f# --  )
 143              	    send float to fpu S1 
 144              	**********************************/
 145 ???? 44230000 	    _HEADER TOS1,3,">S1"
 145      033E5331 
 146 ???? 00EE906A 	    vmov.f32 S1,TOS 
 147 ???? 57F8046B 	    _POP 
 148 ???? 00F024BE 	    _NEXT  
 149              	
 150              	/*******************************
 151              	    >S2 variable ( f# --  )
 152              	    send float to fpu S2 
 153              	**********************************/
 154 ???? 58230000 	    _HEADER TOS2,3,">S2"
 154      033E5332 
 155 ???? 01EE106A 	    vmov.f32 S2,TOS 
 156 ???? 57F8046B 	    _POP 
 157 ???? 00F01ABE 	    _NEXT  
 158              	
 159              	/*******************************
 160              	    S0>  ( -- f )
 161              	    push fpu S0 
 162              	*******************************/
 163 ???? 6C230000 	    _HEADER S0FROM,3,"S0>"
 163      0353303E 
 164 ???? 47F8046D 	    _PUSH 
 165 ???? 10EE106A 	    vmov.f32 TOS,S0 
 166 ???? 00F010BE 	    _NEXT 
 167              	
 168              	/*******************************
 169              	    S1>  ( -- f )
 170              	    push fpu S1 
 171              	*******************************/
 172 ???? 80230000 	    _HEADER S1FROM,3,"S1>"
 172      0353313E 
 173 ???? 47F8046D 	    _PUSH 
 174 ???? 10EE906A 	    vmov.f32 TOS,S1 
 175 ???? 00F006BE 	    _NEXT 
 176              	
ARM GAS  forth.s 			page 93


 177              	/*******************************
 178              	    S2>  ( -- f )
 179              	    push fpu S2 
 180              	*******************************/
 181 ???? 94230000 	    _HEADER S2FROM,3,"S2>"
 181      0353323E 
 182 ???? 47F8046D 	    _PUSH 
 183 ???? 11EE106A 	    vmov.f32 TOS,S2 
 184 ???? 00F0FCBD 	    _NEXT 
 185              	
 186              	
 187              	/*******************************
 188              	    F>S ( f -- n )
 189              	    convert float to integer 
 190              	    round to nearest integer 
 191              	*******************************/
 192 ???? A8230000 	    _HEADER FTOS,3,"F>S"
 192      03463E53 
 193 ???? 00EE106A 	    vmov.f32 S0,TOS
 194 ???? BDEE400A 	    vcvtr.s32.f32 s0,s0 
 195 ???? 10EE106A 	    vmov.f32 TOS,s0 
 196 ???? 00F0F0BD 	    _NEXT 
 197              	    
 198              	/*******************************
 199              	    TRUNC (f - n )
 200              	    truncate float to integer 
 201              	*******************************/
 202 ???? BC230000 	    _HEADER TRUNC,5,"TRUNC"
 202      05545255 
 202      4E4300BF 
 203 ???? 00EE106A 	    vmov.f32 S0,TOS 
 204 ???? BDEEC00A 	    vcvt.s32.f32 s0,s0 
 205 ???? 10EE106A 	    vmov.f32 TOS,S0 
 206 ???? 00F0E2BD 	    _NEXT 
 207              	
 208              	/*******************************
 209              	    S>F ( s -- f )
 210              	    convert integer to float 
 211              	*******************************/
 212 ???? D4230000 	    _HEADER STOF,3,"S>F" 
 212      03533E46 
 213 ???? 00EE106A 	    vmov.f32 S0,TOS
 214 ???? B8EEC00A 	    vcvt.f32.s32 s0,s0 
 215 ???? 10EE106A 	    vmov.f32 TOS,s0 
 216 ???? 00F0D6BD 	   _NEXT 
 217              	
 218              	/*******************************
 219              	    F+ ( f1 f2 -- f1+f2 )
 220              	    add 2 floats 
 221              	*******************************/
 222 ???? F0230000 	    _HEADER FPLUS,2,"F+"
 222      02462B00 
 223 ???? 00EE106A 	   vmov.f32 s0,TOS 
 224 ???? 57F8046B 	   _POP 
 225 ???? 00EE906A 	   vmov.f32 s1,TOS 
 226 ???? 30EE200A 	   vadd.f32 s0,s0,s1 
 227 ???? 10EE106A 	   vmov.f32 TOS,s0
ARM GAS  forth.s 			page 94


 228 ???? 00F0C6BD 	   _NEXT 
 229              	
 230              	   
 231              	/*******************************
 232              	    F- ( f1 f2 -- f1-f2 )
 233              	    substract 2 float 
 234              	*******************************/
 235 ???? 08240000 	    _HEADER FSUBB,2,"F-"
 235      02462D00 
 236 ???? 00EE106A 	   vmov.f32 s0,TOS 
 237 ???? 57F8046B 	   _POP 
 238 ???? 00EE906A 	   vmov.f32 s1,TOS 
 239 ???? 30EEC00A 	   vsub.f32 s0,s1,s0 
 240 ???? 10EE106A 	   vmov.f32 TOS,s0
 241 ???? 00F0B6BD 	   _NEXT 
 242              	
 243              	
 244              	
 245              	/*******************************
 246              	    F* ( f1 f2 -- f1*f2 )
 247              	    multiply 2 float 
 248              	******************************/
 249 ???? 28240000 	   _HEADER FSTAR,2,"F*"
 249      02462A00 
 250 ???? 00EE106A 	   vmov.f32 s0,TOS 
 251 ???? 57F8046B 	   _POP 
 252 ???? 00EE906A 	   vmov.f32 s1,TOS 
 253 ???? 20EE800A 	   vmul.f32 s0,s1,s0 
 254 ???? 10EE106A 	   vmov.f32 TOS,s0
 255 ???? 00F0A6BD 	   _NEXT 
 256              	
 257              	
 258              	/*******************************
 259              	    F/ ( f1 f2 -- f1/f2 )
 260              	    divide f1 by f2 
 261              	*******************************/
 262 ???? 48240000 	    _HEADER FSLH,2,"F/"
 262      02462F00 
 263 ???? 00EE106A 	   vmov.f32 s0,TOS 
 264 ???? 57F8046B 	   _POP 
 265 ???? 00EE906A 	   vmov.f32 s1,TOS 
 266 ???? 80EE800A 	   vdiv.f32 s0,s1,s0 
 267 ???? 10EE106A 	   vmov.f32 TOS,s0
 268 ???? 00F096BD 	   _NEXT 
 269              	
 270              	
 271              	/********************************
 272              	    FNEGATE ( f -- -f )
 273              	    negate floating point 
 274              	********************************/
 275 ???? 68240000 	    _HEADER FNEG,7,"FNEGATE"
 275      07464E45 
 275      47415445 
 276 ???? 00EE106A 	    vmov.f32 s0,TOS 
 277 ???? B1EE400A 	    vneg.f32 S0,S0 
 278 ???? 10EE106A 	    vmov.f32 TOS,S0    
 279 ???? 00F088BD 	    _NEXT 
ARM GAS  forth.s 			page 95


 280              	
 281              	/**********************************
 282              	    FABS ( f -- f )
 283              	    return absolute value 
 284              	******************************/
 285 ???? 88240000 	    _HEADER FABS,4,"FABS"
 285      04464142 
 285      530000BF 
 286 ???? 80EA0000 	    eor T0,T0 
 287 ???? 6FEA0000 	    mvn T0,T0 
 288 ???? 4FEA5000 	    lsr T0,#1 
 289 ???? 06EA0006 	    and TOS,T0 
 290 ???? 00F078BD 	    _NEXT 
 291              	
 292              	
 293              	/*****************************
 294              	     SQRT  ( f -- f )
 295              	     compute square root 
 296              	*****************************/
 297 ???? A4240000 	     _HEADER SQRT,4,"SQRT"
 297      04535152 
 297      540000BF 
 298 ???? 00EE106A 	     vmov.f32 s0,TOS 
 299 ???? B1EEC00A 	     vsqrt.f32 s0,s0 
 300 ???? 10EE106A 	     vmov.f32 TOS,s0 
 301 ???? 00F06ABD 	     _NEXT 
 302              	
 303              	
 304              	/*****************************
 305              	   F0<   ( f -- flag )
 306              	*****************************/
 307 ???? C4240000 	    _HEADER FZLESS,3,"F0<"
 307      0346303C 
 308 ???? 00EE106A 	    vmov.f32 s0,TOS 
 309 ???? B5EE400A 	    vcmp.f32 s0, #0.0 
 310 ???? F1EE106A 	    vmrs TOS,FPSCR
 311 ???? BFF34F8F 	    dsb  
 312 ???? 4FEAE676 	    asr TOS,#31   
 313 ???? 00F05ABD 	    _NEXT 
 314              	
 315              	/*****************************
 316              	    F> ( f#1 f#2 -- flag )
 317              	    f#1>f#2 ? 
 318              	*****************************/
 319 ???? E0240000 	    _HEADER FGREAT,2,"F>"
 319      02463E00 
 320 ???? 504700BF 	    _NEST 
 321 ???? 2D240000 	    _ADR FSUBB
 322 ???? E5240000 	    _ADR FZLESS
 323 ???? 61370000 	    _ADR INVER     
 324 ???? B72F0000 	    _UNNEST 
 325              	
 326              	/*****************************
 327              	    F< ( f#1 f#2 -- flag )
 328              	    f#1<f#2 ? 
 329              	*****************************/
 330 ???? 00250000 	    _HEADER FLESS,2,"F<"
ARM GAS  forth.s 			page 96


 330      02463C00 
 331 ???? 504700BF 	    _NEST 
 332 ???? 2D240000 	    _ADR FSUBB 
 333 ???? E5240000 	    _ADR FZLESS
 334 ???? B72F0000 	    _UNNEST 
 335              	
 336              	
 337              	/*******************************
 338              	    FMIN ( f#1 f#2 -- smallest )
 339              	********************************/
 340 ???? 1C250000 	    _HEADER FMIN,4,"FMIN"
 340      04464D49 
 340      4E0000BF 
 341 ???? 504700BF 	    _NEST 
 342 ???? D1330000 	   _ADR OVER 
 343 ???? D1330000 	   _ADR OVER 
 344 ???? 05250000 	   _ADR FGREAT 
 345 ???? 17320000 	   _QBRAN 1f 
 345      58250000 
 346 ???? A1330000 	   _ADR SWAP  
 347 ???? 71330000 	1: _ADR DROP 
 348 ???? B72F0000 	    _UNNEST 
 349              	
 350              	/*******************************
 351              	    FMAX (f#1 f#2 -- largest )
 352              	*******************************/
 353 ???? 34250000 	    _HEADER FMAX,4,"FMAX"
 353      04464D41 
 353      580000BF 
 354 ???? 504700BF 	    _NEST 
 355 ???? D1330000 	    _ADR OVER 
 356 ???? D1330000 	    _ADR OVER 
 357 ???? 21250000 	    _ADR FLESS 
 358 ???? 17320000 	    _QBRAN 1f
 358      88250000 
 359 ???? A1330000 	    _ADR SWAP   
 360 ???? 71330000 	1:  _ADR DROP 
 361 ???? B72F0000 	    _UNNEST 
 362              	
 363              	
 364              	/*******************************
 365              	    FSIGN ( f -- n )
 366              	    return float sign 
 367              	*******************************/
 368 ???? 64250000 	    _HEADER FSIGN,5,"FSIGN"
 368      05465349 
 368      474E00BF 
 369 ???? 80EA0000 	    eor T0,T0 
 370 ???? C8F20000 	    movt T0,#0X8000
 371 ???? 06EA0006 	    and TOS,T0
 372 ???? 4FEAE676 	    asr TOS,#31  
 373 ???? 00F000BD 	    _NEXT 
 374              	
 375              	/*******************************
 376              	    FEXP ( f --  n )
 377              	    return binary exponent of f 
 378              	*******************************/
ARM GAS  forth.s 			page 97


 379 ???? 94250000 	    _HEADER FEXP,4,"FEXP"
 379      04464558 
 379      500000BF 
 380 ???? 4FF00000 	    _MOV32 T0,0X7F800000
 380      C7F68070 
 381 ???? 06EA0006 	    and TOS,T0 
 382 ???? 4FEAD656 	    lsr TOS,#23
 383 ???? A6F17F06 	    sub TOS,#127 
 384 ???? 00F0EEBC 	    _NEXT  
 385              	
 386              	/*******************************
 387              	   FMANT ( f -- n )
 388              	   return float mantisssa 
 389              	********************************/
 390 ???? B4250000 	    _HEADER FMANT,5,"FMANT"
 390      05464D41 
 390      4E5400BF 
 391 ???? 4FF6FF70 	    _MOV32 T0, 0X7FFFFF
 391      C0F27F00 
 392 ???? 06EA0006 	    AND TOS,T0 
 393 ???? 80EA0000 	    EOR T0,T0 
 394 ???? C0F28000 	    MOVT T0,0x80
 395 ???? 46EA0006 	    ORR TOS,T0 
 396 ???? 00F0DABC 	    _NEXT 
 397              	
 398              	
 399              	/*******************************
 400              	    PI  ( -- f )
 401              	    return 3.14159265
 402              	*******************************/
 403 ???? D8250000 	    _HEADER PI,2,"PI"
 403      02504900 
 404 ???? 47F8046D 	    _PUSH 
 405 ???? 40F6DB76 	    _MOV32 TOS, 0x40490FDB
 405      C4F24906 
 406 ???? 00F0CEBC 	    _NEXT
 407              	 
 408              	/********************************
 409              	    LN2 ( -- f )
 410              	    2.0 natural logarithm
 411              	********************************/
 412 ???? 00260000 	    _HEADER LN2,3,"LN2"
 412      034C4E32 
 413 ???? 47F8046D 	    _PUSH 
 414 ???? 47F21826 	    _MOV32 TOS,0x3F317218
 414      C3F63176 
 415 ???? 00F0C2BC 	    _NEXT 
 416              	
 417              	/********************************
 418              	    LN10 ( -- f )
 419              	    10.0 natural logarithm
 420              	********************************/
 421 ???? 18260000 	    _HEADER LN10,4,"LN10"
 421      044C4E31 
 421      300000BF 
 422 ???? 47F8046D 	    _PUSH 
 423 ???? 45F68E56 	    _MOV32 TOS, 0x40135D8E
ARM GAS  forth.s 			page 98


 423      C4F21306 
 424 ???? 00F0B4BC 	    _NEXT 
 425              	
 426              	
 427              	/********************************
 428              	    LOG2 ( -- f)
 429              	    return log10(2)
 430              	*******************************/
 431 ???? 30260000 	    _HEADER LOG2,4,"LOG2"
 431      044C4F47 
 431      320000BF 
 432 ???? 47F8046D 	    _PUSH 
 433 ???? 42F29A06 	    _MOV32 TOS,0x3E9A209A
 433      C3F69A66 
 434 ???? 00F0A6BC 	    _NEXT 
 435              	
 436              	/********************************
 437              	    LOG2>10 ( f -- exp )
 438              	    convert float base2 exponent 
 439              	    to base10
 440              	********************************/
 441 ???? 4C260000 	    _HEADER LOG2TO10,7,"LOG2>10" 
 441      074C4F47 
 441      323E3130 
 442 ???? 504700BF 	    _NEST
 443 ???? BD250000 	    _ADR FEXP 
 444 ???? F5230000 	    _ADR STOF 
 445 ???? 55260000 	    _ADR LOG2
 446 ???? 4D240000 	    _ADR FSTAR 
 447 ???? DD230000 	    _ADR TRUNC  
 448 ???? 91330000 	    _ADR DUPP 
 449 ???? 01340000 	    _ADR ZLESS 
 450 ???? 17320000 	    _QBRAN 1f 
 450      9C260000 
 451 ???? 39350000 	    _ADR ONEM
 452 ???? B72F0000 	1:  _UNNEST 
 453 ???? 68220000 	
 453      88ED00E0 
 453      34EF00E0 
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
ARM GAS  forth.s 			page 99


  19              	
  20              	/*******************************
  21              	  float number parser 
  22              	*******************************/
  23              	
  24              	/********************
  25              	    10^2^n  
  26              	    for n in [0..5]
  27              	********************/    
  28              	
  29 ???? 00002041 	p10p2n:     .word  0x41200000  // 10.0 
  30 ???? 0000C842 	            .word  0x42C80000  // 100.0
  31 ???? 00401C46 	            .word  0x461C4000  // 10000.0 
  32 ???? 20BCBE4C 	            .word  0x4CBEBC20  // 1.0e8
  33 ???? CA1B0E5A 	            .word  0x5A0E1BCA  // 1.0e16 
  34 ???? AEC59D74 	            .word  0x749DC5AE  // 1.0e32 
  35              	
  36              	fzero =  0x0
  37              	fone =  0x3F800000
  38              	fminus1 = 0xBF800000
  39              	ften = 0x41200000 
  40              	
  41              	//  P10P2N@ ( idx -- f )
  42              	// fetch element from p10p2n array 
  43              	p10p2at: // ( idx -- f )
  44 ???? 504700BF 	    _NEST 
  45 ???? D7310000 	    _DOLIT 2 
  45      02000000 
  46 ???? BD340000 	    _ADR LSHIFT 
  47 ???? D7310000 	    _DOLIT p10p2n 
  47      AC260000 
  48 ???? CD340000 	    _ADR PLUS 
  49 ???? 6D320000 	    _ADR AT 
  50 ???? B72F0000 	    _UNNEST 
  51              	
  52              	
  53              	
  54              	
  55              	// check if exponent bit at idx position is 
  56              	// set or reset   
  57              	bit_state: // ( idx f e -- idx f bit )
  58 ???? 504700BF 	    _NEST 
  59 ???? D7310000 	    _DOLIT 1  // idx f e 1
  59      01000000 
  60 ???? D7310000 	    _DOLIT 3  // idx f e 1 3 
  60      03000000 
  61 ???? A93F0000 	    _ADR PICK  // idx f e 1 idx 
  62 ???? BD340000 	    _ADR LSHIFT // idx f e bit_mask 
  63 ???? 4D340000 	    _ADR ANDD   // idx f bit, i.e. 0||1<<idx  
  64 ???? B72F0000 	    _UNNEST 
  65              	
  66              	
  67              	//  mant_div ( 0 f e -- f )
  68              	// negative exponent, divide mantissa 
  69              	// to adjust from decimal to binary exponent.
  70              	// input: 
  71              	//  0  exponent bit counter  
ARM GAS  forth.s 			page 100


  72              	//  f  mantissa converted float 
  73              	//  e  decimal exponent 
  74              	// output:
  75              	//   f float adjusted 
  76              	mant_div:
  77 ???? 504700BF 	    _NEST 
  78 ???? FD320000 	    _ADR TOR // idx f R: e 
  79              	div_loop:
  80 ???? CD320000 	    _ADR RAT   // idx f e R: e 
  81 ???? E9260000 	    _ADR bit_state // idx f state 
  82 ???? 17320000 	    _QBRAN 1f   // bit reset 
  82      30270000 
  83 ???? D1330000 	    _ADR OVER 
  84 ???? C5260000 	    _ADR p10p2at // idx f pwr10 R: e
  85 ???? 6D240000 	    _ADR FSLH  // idx f R: e 
  86 ???? A1330000 	1:  _ADR SWAP  // f idx R: e 
  87 ???? 29350000 	    _ADR ONEP   // F idx++ R: e 
  88 ???? A1330000 	    _ADR SWAP   // idx f  
  89 ???? D1330000 	    _ADR OVER   // idx f idx 
  90 ???? D7310000 	    _DOLIT 5 
  90      05000000 
  91 ???? A1380000 	    _ADR GREAT  // idx > 5
  92 ???? 17320000 	    _QBRAN div_loop 
  92      14270000 
  93 ???? 99320000 	    _ADR RFROM 
  94 ???? 71330000 	    _ADR DROP 
  95 ???? B72F0000 	    _UNNEST 
  96              	
  97              	
  98              	// mant_mult ( 0  f e -- f )
  99              	// positive exponent, multiply mantissa 
 100              	// to adjust from decimal to binary exponent 
 101              	// input:
 102              	//  0  exponent bit counter  
 103              	//  f  mantissa converted float 
 104              	//  e  decimal exponent 
 105              	// output:
 106              	//   f float adjusted 
 107              	mant_mult:
 108 ???? 504700BF 	    _NEST 
 109 ???? FD320000 	    _ADR TOR 
 110              	mult_loop:
 111 ???? CD320000 	    _ADR RAT   // idx f e R: e 
 112 ???? E9260000 	    _ADR bit_state // idx f state 
 113 ???? 17320000 	    _QBRAN 1f   // bit reset 
 113      84270000 
 114 ???? D1330000 	    _ADR OVER  
 115 ???? C5260000 	    _ADR p10p2at // idx f pwr10 R: e
 116 ???? 4D240000 	    _ADR FSTAR  // idx f R: e 
 117 ???? A1330000 	1:  _ADR SWAP  // f idx R: e 
 118 ???? 29350000 	    _ADR ONEP   // F idx++ R: e 
 119 ???? A1330000 	    _ADR SWAP   // idx f  
 120 ???? D1330000 	    _ADR OVER   // idx f idx 
 121 ???? D7310000 	    _DOLIT 5 
 121      05000000 
 122 ???? A1380000 	    _ADR GREAT  // idx > 5
 123 ???? 17320000 	    _QBRAN mult_loop 
ARM GAS  forth.s 			page 101


 123      68270000 
 124 ???? 99320000 	    _ADR RFROM 
 125 ???? 71330000 	    _ADR DROP 
 126 ???? B72F0000 	    _UNNEST 
 127              	
 128              	
 129              	// float adjustment from decimal exponent  
 130              	// multiply or divide mantissa by exponent  
 131              	// if exponant < 0 divide 
 132              	// if exponant >0 multiply 
 133              	// if exponant == 0 done 
 134              	exp_adjust: // ( e f  -- f )
 135 ???? 504700BF 	    _NEST 
 136 ???? D1330000 	    _ADR OVER  // e f e 
 137 ???? 17320000 	    _QBRAN 3f // exp==0,  done 
 137      F8270000 
 138 ???? D7310000 	    _DOLIT 0  // e f idx  
 138      00000000 
 139 ???? 89360000 	    _ADR NROT // idx e f
 140 ???? A1330000 	    _ADR SWAP // idx f e   
 141 ???? 91330000 	    _ADR DUPP  // idx f e e 
 142 ???? 01340000 	    _ADR ZLESS
 143 ???? 17320000 	    _QBRAN pos_exp 
 143      F4270000 
 144              	// negative exponent 
 145 ???? 85370000 	    _ADR ABSS 
 146 ???? 0D270000 	    _ADR mant_div 
 147 ???? 3F320000 	    _BRAN 3f 
 147      F8270000 
 148              	pos_exp: // positive exponent 
 149 ???? 61270000 	    _ADR mant_mult 
 150              	// adjustment done 
 151 ???? A1330000 	3:  _ADR SWAP 
 152 ???? 71330000 	    _ADR DROP 
 153 ???? B72F0000 	    _UNNEST 
 154              	
 155              	
 156              	/********************************
 157              	    integer ( a cnt -- a+ cnt- f# )
 158              	*********************************/
 159              	integer:
 160 ???? 504700BF 	    _NEST 
 161 ???? D7310000 	    _DOLIT 0 
 161      00000000 
 162 ???? 91330000 	    _ADR DUPP 
 163 ???? B5330000 	    _ADR DSWAP // 0 0 a cnt 
 164 ???? 51440000 	    _ADR TONBR // d a+ cnt- 
 165 ???? 11330000 	    _ADR DTOR 
 166 ???? 71330000 	    _ADR DROP // drop hi word 
 167 ???? AD320000 	    _ADR DRFROM // i a+ cnt-  
 168 ???? 75360000 	    _ADR ROT  // a+ cnt- i
 169 ???? F5230000 	    _ADR STOF 
 170 ???? B72F0000 	    _UNNEST 
 171              	
 172              	
 173              	/*****************************
 174              	   decimals ( a cnt -- a+ cnt- fdec )
ARM GAS  forth.s 			page 102


 175              	   parse digits after '.' 
 176              	   convert to float 
 177              	*****************************/
 178              	decimals:
 179 ???? 504700BF 	    _NEST 
 180 ???? 91330000 	    _ADR DUPP 
 181 ???? FD320000 	    _ADR TOR 
 182 ???? D7310000 	    _DOLIT 0
 182      00000000 
 183 ???? 91330000 	    _ADR DUPP
 184 ???? B5330000 	    _ADR DSWAP 
 185 ???? 51440000 	    _ADR TONBR // -- d a+ cnt-  
 186 ???? B5330000 	    _ADR DSWAP  // a+ cnt- d
 187 ???? 71330000 	    _ADR DROP   // a+ cnt- i 
 188 ???? F5230000 	    _ADR STOF  // convert integer to float 
 189 ???? 99320000 	    _ADR RFROM  // a+ cnt- f# cnt 
 190 ???? D7310000 	    _DOLIT 2 
 190      02000000 
 191 ???? A93F0000 	    _ADR  PICK  
 192 ???? DD340000 	    _ADR SUBB 
 193 ???? D7310000 	    _DOLIT 9 
 193      09000000 
 194 ???? D5380000 	    _ADR MIN 
 195 ???? 9D220000 	    _ADR PWR10
 196 ???? 6D240000 	    _ADR FSLH  // a+ cnt- fdec 
 197 ???? B72F0000 	    _UNNEST 
 198              	
 199              	
 200              	/************************************
 201              	   exponent ( a cnt -- a+ cnt- exp )
 202              	   parse float exponent 
 203              	************************************/
 204              	exponent: 
 205 ???? 504700BF 	    _NEST 
 206 ???? E7440000 	    _ADR NEGQ 
 207 ???? FD320000 	    _ADR TOR 
 208 ???? D7310000 	    _DOLIT 0 
 208      00000000 
 209 ???? 91330000 	    _ADR DUPP 
 210 ???? B5330000 	    _ADR DSWAP // 0 0 a cnt  
 211 ???? 51440000 	    _ADR TONBR // d a cnt   
 212 ???? B5330000 	    _ADR DSWAP
 213 ???? 71330000 	    _ADR DROP  // hi word 
 214 ???? 99320000 	    _ADR RFROM 
 215 ???? 17320000 	    _QBRAN 1f 
 215      C4280000 
 216 ???? 75370000 	    _ADR NEGAT 
 217              	1:  
 218 ???? B72F0000 	    _UNNEST  // -- a+ cnt- exp   
 219              	
 220              	
 221              	/**********************************
 222              	    FLOAT? ( a -- f# -2 | a 0 )
 223              	    parse float number 
 224              	    return a 0 if not float 
 225              	**********************************/
 226 ???? 68260000 	    _HEADER FLOATQ,6,"FLOAT?"
ARM GAS  forth.s 			page 103


 226      06464C4F 
 226      41543F00 
 227 ???? 504700BF 	    _NEST
 228              	    // always use base 10 
 229              	    // hexadecimal float not accepted 
 230 ???? ED390000 	    _ADR BASE 
 231 ???? 6D320000 	    _ADR AT 
 232 ???? FD320000 	    _ADR TOR 
 233              	    // use decimal base  
 234 ???? C5430000 	    _ADR DECIM 
 235 ???? D7310000 		_DOLIT	0      // failed flag   
 235      00000000 
 236 ???? D1330000 		_ADR	OVER   // a 0 a     R: base
 237 ???? 41390000 	    _ADR	COUNT  // a 0 a+ cnt  // cnt is length of string 
 238              	// check for '-'|'+' save sign on R: 
 239 ???? E7440000 	    _ADR   NEGQ
 240 ???? FD320000 	    _ADR   TOR // -- a 0 a+ cnt-  R: base sign 
 241 ???? 91330000 	    _ADR   DUPP 
 242 ???? FD320000 	    _ADR   TOR  // a 0 a+ cnt r: base sign cnt 
 243 ???? 05280000 	    _ADR  integer // a 0 a+ cnt- fint 
 244 ???? D1330000 	    _ADR  OVER  
 245 ???? 99320000 	    _ADR  RFROM  
 246 ???? 15380000 	    _ADR  EQUAL
 247 ???? A1330000 	    _ADR  SWAP
 248 ???? FD320000 	    _ADR  TOR  //  a 0 a+ cnt- flag r: base sign fint  
 249 ???? 2B320000 	    _TBRAN expect_dot  
 249      58290000 
 250              	// must be '.' or 'E'     
 251 ???? D7310000 	    _DOLIT '.' 
 251      2E000000 
 252 ???? C5440000 	    _ADR CHARQ
 253 ???? 2B320000 	    _TBRAN get_fraction  
 253      6C290000 
 254 ???? D7310000 	    _DOLIT 'E'
 254      45000000 
 255 ???? C5440000 	    _ADR  CHARQ 
 256 ???? 2B320000 	    _TBRAN get_exponent 
 256      C0290000 
 257 ???? 3F320000 	    _BRAN error2
 257      142A0000 
 258              	expect_dot:
 259 ???? D7310000 	    _DOLIT '.' 
 259      2E000000 
 260 ???? C5440000 	    _ADR CHARQ 
 261 ???? 17320000 	    _QBRAN error2
 261      142A0000 
 262              	get_fraction:
 263 ???? D1330000 	    _ADR OVER 
 264 ???? 8D320000 	    _ADR CAT 
 265 ???? D7310000 	    _DOLIT 10
 265      0A000000 
 266 ???? E9430000 	    _ADR DIGTQ 
 267 ???? A1330000 	    _ADR SWAP 
 268 ???? 71330000 	    _ADR DROP 
 269 ???? 17320000 	    _QBRAN error2       
 269      142A0000 
 270 ???? 35280000 	    _ADR decimals 
ARM GAS  forth.s 			page 104


 271 ???? FD320000 	    _ADR  TOR    // a 0 a+ cnt- r: base sign fint ffrac 
 272              	// if next char is 'E' get exponent 
 273 ???? D7310000 	    _DOLIT 'E' 
 273      45000000 
 274 ???? C5440000 	    _ADR CHARQ
 275 ???? 2B320000 	    _TBRAN get_exponent 
 275      C0290000 
 276 ???? D7310000 	    _DOLIT fzero 
 276      00000000 
 277 ???? FD320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac fexp 
 278 ???? 3F320000 	    _BRAN build_float
 278      D4290000 
 279              	get_exponent: 
 280 ???? 8D280000 	    _ADR exponent // -- a 0 a+ cnt- exp
 281 ???? FD320000 	    _ADR TOR   // a 0 a+ cnt- r: base sign fint ffrac exp 
 282 ???? 91330000 	    _ADR DUPP 
 283 ???? 2B320000 	    _TBRAN error4   // count must be 0 
 283      342A0000 
 284              	build_float: // a 0 a+ cnt- R: base sign fint fdec exp 
 285 ???? 9D360000 	    _ADR DDROP 
 286 ???? 9D360000 	    _ADR DDROP 
 287 ???? 99320000 	    _ADR RFROM 
 288 ???? AD320000 	    _ADR DRFROM 
 289 ???? 0D240000 	    _ADR FPLUS 
 290 ???? B5270000 	    _ADR exp_adjust
 291 ???? 99320000 	    _ADR RFROM 
 292 ???? 17320000 	    _QBRAN 1f 
 292      042A0000 
 293 ???? D7310000 	    _DOLIT fminus1
 293      000080BF 
 294 ???? 4D240000 	    _ADR FSTAR 
 295 ???? D7310000 	1:  _DOLIT -2 
 295      FEFFFFFF 
 296 ???? 3F320000 	    _BRAN restore_base  
 296      482A0000 
 297              	error2: // a 0 a cnt R: base sign fint 
 298 ???? 9D360000 	    _ADR DDROP  
 299 ???? 3F320000 	    _BRAN e4  
 299      402A0000 
 300              	error3: // a 0 a cnt R: base sign fint fdec  
 301 ???? 9D360000 	    _ADR DDROP  // a 0 a R: base sign
 302 ???? 99320000 	    _ADR RFROM 
 303 ???? 71330000 	    _ADR DROP 
 304 ???? 3F320000 	    _BRAN e4  
 304      402A0000 
 305              	error4: // a 0 a+ cnt- r: base sign fint ffrac fexp  
 306 ???? 9D360000 	    _ADR DDROP 
 307 ???? AD320000 	    _ADR DRFROM 
 308 ???? 9D360000 	    _ADR DDROP 
 309 ???? AD320000 	e4: _ADR DRFROM 
 310 ???? 9D360000 	    _ADR DDROP 
 311              	restore_base: 
 312 ???? 99320000 	    _ADR RFROM 
 313 ???? ED390000 	    _ADR BASE 
 314 ???? 59320000 	    _ADR STORE 
 315 ???? B72F0000 	    _UNNEST 
 316              	
ARM GAS  forth.s 			page 105


   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*******************************************************
  21              	  words to format float32 
  22              	  adapted to forth from c code 
  23              	  ref: https://searchcode.com/codesearch/view/14753060/
  24              	********************************************************/
  25              	
  26              	
  27              	// used to round mantissa 
  28              	rounding:
  29 ???? 0000003F 	 	.word  0x3F000000 // 0.5e0f
  30 ???? CDCC4C3D 	 	.word  0x3D4CCCCD // 0.5e-1f
  31 ???? 0AD7A33B 	 	.word  0x3BA3D70A // 0.5e-2f
  32 ???? 6F12033A 	 	.word  0x3A03126F // 0.5e-3f
  33 ???? 17B75138 	    .word  0x3851B717 // 0.5e-4f
  34 ???? ACC5A736 	    .word  0x36A7C5AC // 0.5e-5f
  35 ???? BD370635 	    .word  0x350637BD // 0.5e-6f
  36 ???? 95BF5633 	 	.word  0x3356BF95 // 0.5e-7f
  37 ???? 77CCAB31 	 	.word  0x31ABCC77 // 0.5e-8f
  38              	
  39              	/****************************************
  40              	// round ( f n -- f )
  41              	// round float fraction to nth decimal 
  42              	// input:
  43              	//      f  float to round 
  44              	//      n  decimal to be rounded [1..7]
  45              	// output:
  46              	//      f  rounded float 
  47              	***************************************/
  48 ???? CC280000 	    _HEADER ROUND,5,"ROUND"
  48      05524F55 
  48      4E4400BF 
  49 ???? 504700BF 	    _NEST
  50 ???? D7310000 	    _DOLIT 1  
  50      01000000 
  51 ???? BD380000 	    _ADR MAX  
  52 ???? D7310000 	    _DOLIT 8
  52      08000000 
  53 ???? D5380000 	    _ADR MIN 
ARM GAS  forth.s 			page 106


  54 ???? D7310000 	    _DOLIT 2 
  54      02000000 
  55 ???? BD340000 	    _ADR LSHIFT 
  56 ???? D7310000 	    _DOLIT rounding 
  56      582A0000 
  57 ???? CD340000 	    _ADR PLUS 
  58 ???? 6D320000 	    _ADR AT   
  59 ???? 0D240000 	    _ADR FPLUS 
  60 ???? B72F0000 	    _UNNEST 
  61              	
  62              	/*****************************
  63              	 c!+ (  c b -- b++ )
  64              	 store character in buffer 
  65              	 increment pointer 
  66              	*****************************/
  67 ???? 802A0000 	    _HEADER CSTOP,3,"C!+"
  67      0343212B 
  68 ???? 57F8040B 	    ldr T0,[DSP],#4
  69 ???? 3070     	    strb T0,[TOS]  
  70 ???? 06F10106 	    add TOS,#1
  71 ???? 69E2     	    _NEXT 
  72              	
  73              	/********************************
  74              	 convert integer part to ascii 
  75              	 in buffer b 
  76              	 i>a ( i b -- b+ u )
  77              	*******************************/
  78              	//    _HEADER ITOA,3,"I>A"
  79              	ITOA:
  80 ???? 504700BF 	    _NEST 
  81 ???? FD320000 	    _ADR TOR  // >R ( i r: b )
  82 ???? 1D3D0000 	    _ADR STOD // ( dbl r: b )
  83 ???? 91330000 	    _ADR DUPP // ( dbl i r: b )
  84 ???? FD320000 	    _ADR TOR  // ( dbl r: b sign )
  85 ???? F9360000 	    _ADR DABS 
  86 ???? 2D420000 	    _ADR BDIGS 
  87 ???? D1420000 	    _ADR DIGS 
  88 ???? 99320000 	    _ADR RFROM 
  89 ???? 05430000 	    _ADR SIGN 
  90 ???? 2D430000 	    _ADR EDIGS // ( -- p u )
  91 ???? 91330000 	    _ADR DUPP  
  92 ???? 89360000 	    _ADR NROT // -rot ( -- u p u )
  93 ???? CD320000 	    _ADR RAT  // r@ ( -- u p u b )
  94 ???? A1330000 	    _ADR SWAP // ( -- u p b u )
  95 ???? 89400000 	    _ADR CMOVE // ( -- u ) 
  96 ???? 91330000 	    _ADR DUPP  // ( -- u u )
  97 ???? 99320000 	    _ADR RFROM // ( -- u u b )
  98 ???? CD340000 	    _ADR PLUS  // ( -- u b+ )
  99 ???? A1330000 	    _ADR SWAP  // ( -- b+ u )
 100 ???? B72F0000 	    _UNNEST 
 101              	
 102              	
 103              	/*************************
 104              	 SCALEUP ( f1 n -- f2 m ) 
 105              	 multiply fraction until 
 106              	 f1 >= 10^n 
 107              	 input: 
ARM GAS  forth.s 			page 107


 108              	   f1  float to scale 
 109              	   n  int 10^n limit  
 110              	 output:
 111              	   f2  scaled up float 
 112              	   m  log10 exponent scale factor  
 113              	*************************/
 114 ???? CC2A0000 	    _HEADER SCALEUP,7,"SCALEUP" 
 114      07534341 
 114      4C455550 
 115 ???? 504700BF 	    _NEST 
 116 ???? 9D220000 	    _ADR PWR10 
 117 ???? FD320000 	    _ADR TOR  // f2 r: f1 
 118 ???? D7310000 	    _DOLIT 0   // m 
 118      00000000 
 119 ???? A1330000 	    _ADR SWAP  // m f2 
 120 ???? 91330000 	1:  _ADR DUPP 
 121 ???? CD320000 	    _ADR RAT 
 122 ???? 21250000 	    _ADR FLESS
 123 ???? 17320000 	    _QBRAN 2f
 123      882B0000 
 124 ???? D7310000 	    _DOLIT ten 
 124      00002041 
 125 ???? 4D240000 	    _ADR FSTAR
 126              	    // decrement m   
 127 ???? A1330000 	    _ADR SWAP
 128 ???? 39350000 	    _ADR ONEM 
 129 ???? A1330000 	    _ADR SWAP 
 130 ???? 3F320000 	    _BRAN 1b
 130      542B0000 
 131 ???? 99320000 	2:  _ADR RFROM 
 132 ???? 71330000 	    _ADR DROP 
 133 ???? A1330000 	    _ADR SWAP 
 134 ???? B72F0000 	    _UNNEST 
 135              	
 136              	
 137              	/******************************
 138              	 SCALEDOWN ( f1 n -- f2 m )
 139              	 divide by 10.0 until 
 140              	 f < 10^n  
 141              	 input:
 142              	    f1   float to scale 
 143              	    n    int 10^n limit 
 144              	 output:
 145              	    f2   scaled down float 
 146              	    m    log10 reduction factor
 147              	******************************/
 148 ???? 342B0000 	    _HEADER SCALEDOWN,9,"SCALEDOWN"
 148      09534341 
 148      4C45444F 
 148      574E00BF 
 149 ???? 504700BF 	    _NEST 
 150 ???? 9D220000 	    _ADR PWR10
 151 ???? FD320000 	    _ADR TOR
 152 ???? D7310000 	    _DOLIT 0 
 152      00000000 
 153 ???? A1330000 	    _ADR SWAP // 0 f1 r: pwr10  
 154 ???? CD320000 	1:  _ADR RAT   
ARM GAS  forth.s 			page 108


 155 ???? D1330000 	    _ADR OVER 
 156 ???? 05250000 	    _ADR FGREAT 
 157 ???? 2B320000 	    _TBRAN 2f 
 157      F42B0000 
 158 ???? D7310000 	    _DOLIT ten 
 158      00002041 
 159 ???? 6D240000 	    _ADR FSLH 
 160              	    // increment m 
 161 ???? A1330000 	    _ADR SWAP 
 162 ???? 29350000 	    _ADR ONEP 
 163 ???? A1330000 	    _ADR SWAP 
 164 ???? 3F320000 	    _BRAN 1b   
 164      C02B0000 
 165 ???? 99320000 	2:  _ADR RFROM 
 166 ???? 71330000 	    _ADR DROP
 167 ???? A1330000 	    _ADR SWAP 
 168 ???? B72F0000 	    _UNNEST 
 169              	
 170              	
 171              	/***************************
 172              	convert exponant of float 
 173              	    EPART ( m b -- b+ )
 174              	input: 
 175              	    m   decimal exponent 
 176              	    b   string buffer 
 177              	output:
 178              	    b+   adjusted pointer 
 179              	****************************/
 180              	//    _HEADER EPART,5,"EPART"
 181              	EPART:
 182 ???? 504700BF 	    _NEST
 183 ???? A1330000 	    _ADR SWAP
 184 ???? DD350000 	    _ADR QDUP    
 185 ???? 17320000 	    _QBRAN 2f 
 185      342C0000 
 186 ???? A1330000 	    _ADR SWAP 
 187 ???? D7310000 	    _DOLIT 'E' // [char] E ( -- m b c )
 187      45000000 
 188 ???? A1330000 	    _ADR SWAP  
 189 ???? D12A0000 	    _ADR CSTOP // c!+ ( -- m b ) 
 190 ???? DD2A0000 	    _ADR ITOA // ( i b -- b u )
 191 ???? 71330000 	    _ADR DROP // ( -- b+ )     
 192 ???? B72F0000 	2:  _UNNEST 
 193              	
 194              	
 195              	/***************************
 196              	conver fraction part of float 
 197              	    FPART ( d f b -- b+ )
 198              	input:
 199              	    d   digit left to display 
 200              	    f   float to convert
 201              	    b   string* buffer  
 202              	output:
 203              	    b+  updated string* 
 204              	****************************/
 205              	//    _HEADER FPART,5,"FPART"
 206              	FPART:
ARM GAS  forth.s 			page 109


 207 ???? 504700BF 	    _NEST
 208 ???? D7310000 	    _DOLIT 2 
 208      02000000 
 209 ???? A93F0000 	    _ADR PICK 
 210 ???? 01340000 	    _ADR ZLESS 
 211 ???? 17320000 	    _QBRAN 1f 
 211      642C0000 
 212 ???? FD320000 	    _ADR TOR 
 213 ???? 71330000 	    _ADR DROP 
 214 ???? 3F320000 	    _BRAN 2f 
 214      D02C0000 
 215 ???? D7310000 	1:   _DOLIT '.' 
 215      2E000000 
 216 ???? A1330000 	    _ADR SWAP 
 217 ???? D12A0000 	    _ADR CSTOP 
 218 ???? FD320000 	    _ADR TOR // >r ( d f r: b ) 
 219 ???? A1330000 	1:  _ADR SWAP  
 220 ???? DD350000 	    _ADR QDUP 
 221 ???? 17320000 	    _QBRAN 2f
 221      D02C0000 
 222 ???? 39350000 	    _ADR ONEM // 1- ( -- f d- r: b )
 223 ???? A1330000 	    _ADR SWAP // swap ( -- d f r: b )
 224 ???? D7310000 	    _DOLIT ten // ( d f 10.0 ) 
 224      00002041 
 225 ???? 4D240000 	    _ADR FSTAR // f*
 226 ???? 91330000 	    _ADR DUPP  
 227 ???? DD230000 	    _ADR TRUNC // d f i
 228 ???? 91330000 	    _ADR DUPP  // d f i i  
 229 ???? D7310000 	    _DOLIT '0' 
 229      30000000 
 230 ???? CD340000 	    _ADR PLUS 
 231 ???? 99320000 	    _ADR RFROM // R> ( d f c b )
 232 ???? D12A0000 	    _ADR CSTOP // ( d f i b+ )
 233 ???? FD320000 	    _ADR TOR  // >r ( -- d f i r: b )
 234 ???? F5230000 	    _ADR STOF // s>f ( -- d f f r: b ) 
 235 ???? 2D240000 	    _ADR FSUBB 
 236 ???? 3F320000 	    _BRAN 1b 
 236      782C0000 
 237 ???? 71330000 	2:  _ADR DROP 
 238 ???? 99320000 	    _ADR RFROM 
 239 ???? B72F0000 	    _UNNEST 
 240              	
 241              	/***************************
 242              	 convert integer part of float 
 243              	    IPART ( d f b -- m d f b )
 244              	input:
 245              	    d   digit# to display 
 246              	    f   float to convert 
 247              	    b   string* buffer 
 248              	output:
 249              	    m   decimal exponent 
 250              	    d   digit# to display left 
 251              	    f   float fraction 
 252              	    b   update str* 
 253              	****************************/
 254              	//    _HEADER IPART,5,"IPART"
 255              	IPART: 
ARM GAS  forth.s 			page 110


 256 ???? 504700BF 	    _NEST 
 257 ???? FD320000 	    _ADR TOR // ( -- d f r: b )
 258 ???? 91330000 	    _ADR DUPP 
 259 ???? D7310000 	    _DOLIT fone 
 259      0000803F 
 260 ???? 21250000 	    _ADR FLESS 
 261 ???? 17320000 	    _QBRAN 1f
 261      542D0000 
 262 ???? D7310000 	    _DOLIT -1 
 262      FFFFFFFF 
 263 ???? 3D2B0000 	    _ADR SCALEUP // ( d f -1 -- d f m  )
 264 ???? 89360000 	    _ADR NROT
 265 ???? D1330000 	    _ADR OVER 
 266 ???? 892A0000 	    _ADR ROUND
 267 ???? 91330000 	    _ADR DUPP 
 268 ???? D7310000 	    _DOLIT fone 
 268      0000803F 
 269 ???? 21250000 	    _ADR FLESS 
 270 ???? 17320000 	    _QBRAN 2f 
 270      602D0000 
 271              	    // first digit '0' 
 272 ???? D7310000 	    _DOLIT '0' 
 272      30000000 
 273 ???? 99320000 	    _ADR RFROM 
 274 ???? D12A0000 	    _ADR CSTOP 
 275 ???? FD320000 	    _ADR TOR 
 276              	    // decrement d 
 277 ???? A1330000 	    _ADR SWAP 
 278 ???? 39350000 	    _ADR ONEM 
 279 ???? A1330000 	    _ADR SWAP 
 280 ???? 99320000 	    _ADR RFROM // r> ( -- m d f b )  
 281 ???? B72F0000 	    _UNNEST 
 282 ???? D1330000 	1:  _ADR OVER 
 283 ???? A92B0000 	    _ADR SCALEDOWN // ( -- d f m r: b)
 284 ???? 89360000 	    _ADR NROT   // m d f r: b 
 285 ???? 91330000 	2:  _ADR DUPP  // ( -- m d f f r: b )
 286 ???? DD230000 	    _ADR TRUNC // ( -- m d f i r: b )
 287 ???? 91330000 	    _ADR DUPP  // ( -- m d f i i r: b )
 288 ???? FD320000 	    _ADR TOR   // ( -- m d f i r: b i ) 
 289 ???? F5230000 	    _ADR STOF  // ( -- m d f f )
 290 ???? 2D240000 	    _ADR FSUBB // ( -- m d f r: b i )
 291 ???? 99320000 	    _ADR RFROM // ( -- m d f i r: b )
 292 ???? 99320000 	    _ADR RFROM  // ( -- m d f i b )  
 293 ???? DD2A0000 	    _ADR ITOA // -- m d f b u )
 294 ???? FD320000 	    _ADR TOR  // >r ( -- m d f b r: u )
 295 ???? 75360000 	    _ADR ROT
 296 ???? 99320000 	    _ADR RFROM // r> ( -- m f b d u ) 
 297 ???? DD340000 	    _ADR SUBB // ( -- m f b d- )
 298 ???? 89360000 	    _ADR NROT // ( -- m d f b )
 299 ???? B72F0000 	    _UNNEST
 300              	
 301              	
 302              	/***************************************
 303              	\  f>a ( d f b -- b u )
 304              	\ convert float to string
 305              	\ input: 
 306              	\   b  output buffer  
ARM GAS  forth.s 			page 111


 307              	\   d n# of digits [1..7] to convert 
 308              	\   f float to convert 
 309              	\  output: 
 310              	\   b output buffer 
 311              	\    u length of string 
 312              	****************************************/
 313 ???? 9C2B0000 	    _HEADER FTOA,3,"F>A" // ( b d f -- b u )
 313      03463E41 
 314 ???? 504700BF 	    _NEST 
 315 ???? D1330000 	    _ADR OVER  
 316 ???? BD250000 	    _ADR FEXP 
 317 ???? D7310000 	    _DOLIT 128 
 317      80000000 
 318 ???? 15380000 	    _ADR EQUAL 
 319 ???? 17320000 	    _QBRAN 1f
 319      CC2D0000 
 320 ???? 3F320000 	    _BRAN nan 
 320      882E0000 
 321 ???? 91330000 	1:  _ADR DUPP // dup ( -- d f b b )
 322 ???? FD320000 	    _ADR TOR // >r   ( d f b r: b )  
 323              	    // store space first buffer char. 
 324 ???? 89350000 	    _ADR BLANK   //  bl ( -- d f b c r: b )
 325 ???? A1330000 	    _ADR SWAP 
 326 ???? D12A0000 	    _ADR CSTOP  // c!+ ( -- d f b+ r: b )
 327 ???? D1330000 	    _ADR OVER 
 328 ???? 17320000 	    _QBRAN zdz // 0.0 
 328      382E0000 
 329              	    // check float sign 
 330 ???? D1330000 	    _ADR OVER  // over ( -- d f b f r: b ) 
 331 ???? 9D250000 	    _ADR FSIGN // fsign ( -- d f b 0|-1 r: b )
 332 ???? 17320000 	    _QBRAN 1f  // 0branch 1f 
 332      182E0000 
 333              	    // negative number add '-' to buffer 
 334 ???? A1330000 	    _ADR SWAP 
 335 ???? AD240000 	    _ADR FABS 
 336 ???? A1330000 	    _ADR SWAP 
 337 ???? D7310000 	    _DOLIT '-'  // [char] - ( -- d f b+ c r: b )
 337      2D000000 
 338 ???? A1330000 	    _ADR SWAP 
 339 ???? D12A0000 	    _ADR CSTOP  // c!+  ( -- d f b+ r: b )
 340 ???? DD2C0000 	1:  _ADR IPART  // ( d f b+ -- m d- f- b+ r: b )  
 341 ???? 392C0000 	    _ADR FPART   // ( m d- f- b+ -- m b+ r: b )
 342 ???? 052C0000 	    _ADR EPART    // ( m b+ -- b+ r: b  )
 343 ???? CD320000 	    _ADR RAT 
 344 ???? DD340000 	    _ADR SUBB 
 345 ???? 99320000 	    _ADR RFROM 
 346 ???? A1330000 	    _ADR SWAP 
 347 ???? B72F0000 	    _UNNEST 
 348              	zdz: // 0.0 
 349 ???? FD320000 	     _ADR TOR 
 350 ???? 9D360000 	     _ADR DDROP
 351 ???? 99320000 	     _ADR RFROM
 352 ???? D7310000 	     _DOLIT '0'
 352      30000000 
 353 ???? A1330000 	     _ADR SWAP 
 354 ???? D12A0000 	     _ADR CSTOP 
 355 ???? D7310000 	     _DOLIT '.'
ARM GAS  forth.s 			page 112


 355      2E000000 
 356 ???? A1330000 	     _ADR SWAP 
 357 ???? D12A0000 	     _ADR CSTOP 
 358 ???? D7310000 	     _DOLIT '0'
 358      30000000 
 359 ???? A1330000 	     _ADR SWAP 
 360 ???? D12A0000 	     _ADR CSTOP 
 361 ???? 71330000 	     _ADR DROP  
 362 ???? 99320000 	     _ADR RFROM 
 363 ???? D7310000 	     _DOLIT 4 
 363      04000000 
 364 ???? B72F0000 	     _UNNEST  
 365              	nan: // not a number or infinity
 366 ???? FD320000 	    _ADR TOR   // ( d f r: b )
 367 ???? A1330000 	    _ADR SWAP  // f d  
 368 ???? 71330000 	    _ADR DROP  // f 
 369 ???? 89350000 	    _ADR BLANK  // f c 
 370 ???? CD320000 	    _ADR RAT    // f c b 
 371 ???? D12A0000 	    _ADR CSTOP  // f b+ 
 372 ???? A1330000 	    _ADR SWAP   // b+ f 
 373 ???? E1250000 	    _ADR FMANT  // b+ mant
 374 ???? D7310000 	    _DOLIT 0x7FFFFF 
 374      FFFF7F00 
 375 ???? 4D340000 	    _ADR ANDD   
 376 ???? 17320000 	    _QBRAN infinity 
 376      F42E0000 
 377 ???? D7310000 	    _DOLIT 'N'  // b+ c 
 377      4E000000 
 378 ???? A1330000 	    _ADR SWAP   // c b+
 379 ???? D12A0000 	    _ADR CSTOP  // b+
 380 ???? D7310000 	    _DOLIT 'a'  // b+ c
 380      61000000 
 381 ???? A1330000 	    _ADR SWAP   // c b+ 
 382 ???? D12A0000 	    _ADR CSTOP  // b+
 383 ???? D7310000 	    _DOLIT 'N'  // b+ c 
 383      4E000000 
 384 ???? A1330000 	    _ADR SWAP   // c b+ 
 385 ???? D12A0000 	    _ADR CSTOP  // b+
 386 ???? 3F320000 	    _BRAN 1f 
 386      242F0000 
 387              	infinity:
 388 ???? D7310000 	    _DOLIT 'I'
 388      49000000 
 389 ???? A1330000 	    _ADR SWAP 
 390 ???? D12A0000 	    _ADR CSTOP 
 391 ???? D7310000 	    _DOLIT 'N'
 391      4E000000 
 392 ???? A1330000 	    _ADR SWAP 
 393 ???? D12A0000 	    _ADR CSTOP 
 394 ???? D7310000 	    _DOLIT 'F'
 394      46000000 
 395 ???? A1330000 	    _ADR SWAP 
 396 ???? D12A0000 	    _ADR CSTOP 
 397              	1:
 398 ???? 71330000 	    _ADR DROP 
 399 ???? 99320000 	    _ADR RFROM 
 400 ???? D7310000 	    _DOLIT 4 
ARM GAS  forth.s 			page 113


 400      04000000 
 401 ???? B72F0000 	    _UNNEST 
 402              	
 403              	
 404              	
 405              	
 406              	/***********************************
 407              	    F. (  f d -- )
 408              	    print float32 number  
 409              	    f -> float to print 
 410              	    d -> string digits# 
 411              	***********************************/
 412 ???? A02D0000 	    _HEADER FDOT,2,"F."
 412      02462E00 
 413 ???? 504700BF 	    _NEST 
 414              	    // limit digits range [1..7]
 415 ???? D7310000 	    _DOLIT 1 
 415      01000000 
 416 ???? BD380000 	    _ADR MAX 
 417 ???? D7310000 	    _DOLIT 7 
 417      07000000 
 418 ???? D5380000 	    _ADR MIN
 419 ???? A1330000 	    _ADR SWAP // ( -- d f )
 420              	    // allocate convertion buffer 
 421 ???? DD3F0000 	    _ADR HERE
 422 ???? FD320000 	    _ADR TOR  
 423 ???? D7310000 	    _DOLIT 16 
 423      10000000 
 424 ???? 81540000 	    _ADR ALLOT 
 425              	    // fill it with zero's 
 426 ???? CD320000 	    _ADR RAT 
 427 ???? D7310000 	    _DOLIT 16 
 427      10000000 
 428 ???? D7310000 	    _DOLIT 0 
 428      00000000 
 429 ???? 15410000 	    _ADR FILL 
 430 ???? 99320000 	    _ADR RFROM // ( d f b )
 431 ???? A52D0000 	    _ADR FTOA 
 432 ???? 71460000 	    _ADR TYPEE 
 433              	    // free buffer 
 434 ???? D7310000 	    _DOLIT -16 
 434      F0FFFFFF 
 435 ???? 81540000 	    _ADR ALLOT
 436 ???? B72F0000 	    _UNNEST
 437              	
 438              	
 439              	
 440              	
   1              	/**************************************************************************
   2              	 Copyright Jacques DeschÃªnes 2021,2022 
   3              	 This file is part of beyond-Jupiter 
   4              	
   5              	     beyond-Jupiter is free software: you can redistribute it and/or modify
   6              	     it under the terms of the GNU General Public License as published by
   7              	     the Free Software Foundation, either version 3 of the License, or
   8              	     (at your option) any later version.
   9              	
ARM GAS  forth.s 			page 114


  10              	     beyond-Jupiter is distributed in the hope that it will be useful,
  11              	     but WITHOUT ANY WARRANTY without even the implied warranty of
  12              	     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	     GNU General Public License for more details.
  14              	
  15              	     You should have received a copy of the GNU General Public License
  16              	     along with beyond-Jupiter.  If not, see <http://www.gnu.org/licenses/>.
  17              	
  18              	***************************************************************************/
  19              	
  20              	/*****************************************************
  21              	*  STM32eForth version 7.20
  22              	*  Adapted to blue pill board by Picatout
  23              	*  date: 2020-11-22
  24              	*  IMPLEMENTATION NOTES:
  25              	* 
  26              	*	This version use indirect threaded model. This model enable 
  27              	*	leaving the core Forth system in FLASH memory while the users 
  28              	*	definitions reside in RAM. 
  29              	
  30              	*     Use USART1 for console I/O
  31              	*     port config: 115200 8N1 
  32              	*     TX on  PA9,  RX on PA10  
  33              	*
  34              	******************************************************/
  35              	
  36              	/***********************************************************
  37              	*	STM32eForth version 7.20
  38              	*	Chen-Hanson Ting,  July 2014
  39              	
  40              	*	Subroutine Threaded Forth Model
  41              	*	Adapted to STM32F407-Discovery Board
  42              	*	Assembled by Keil uVision 5.10
  43              	
  44              	*	Version 4.03
  45              	*	Direct Threaded Forth Model
  46              	*	Derived from 80386 eForth versin 4.02
  47              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  48              	
  49              	*	Version 5.02, 09oct04cht
  50              	*	fOR ADuC702x from Analog Devices
  51              	*	Version 6.01, 10apr08cht a
  52              	*	.p2align 2 to at91sam7x256
  53              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  54              	*	Running under uVision3 RealView from Keil
  55              	*	Version 7.01, 29jun14cht
  56              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  57              	*	.p2aligned to eForth 2 Model
  58              	*	Assembled to flash memory and executed therefrom.
  59              	*	Version 7.10, 30jun14cht
  60              	*	Flash memory mapped to Page 0 where codes are executed
  61              	*	Version 7.20, 02jul14cht
  62              	*	Irreducible Complexity
  63              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  64              	*	TURNKEY saves current application from RAM to flash.
  65              	*********************************************************/
  66              	
ARM GAS  forth.s 			page 115


  67              		.syntax unified
  68              		.cpu cortex-m4
  69              		.fpu vfpv4  
  70              		.thumb
  71              	
  72              		.include "stm32f411ce.inc"
  73              		
  74              		.section .text, "ax", %progbits
  75              	
  76              	/***********************************
  77              	  Start of eForth system 
  78              	***********************************/
  79              	
  80              		.p2align 2 
  81              	
  82              	// hi level word enter
  83              	NEST: 
  84 ???? 48F804CD 		STMFD	RSP!,{IP} // save return address 
  85 ???? 05F1030C 		ADD IP,WP,#3
  86              	// inner interprer
  87              	INEXT: 
  88 ???? 5CF8045B 		LDR WP,[IP],#4 
  89 ???? 2847     		BX WP  
  90              	UNNEST: // exit hi level word 
  91 ???? 58F804CB 		LDMFD RSP!,{IP}
  92 ???? 5CF8045B 		LDR WP,[IP],#4 
  93 ???? 2847     		BX WP  
  94              	
  95              		.p2align 2 
  96              	
  97              	// compile "BX INX\nNOP.N " 
  98              	// this is the only way 
  99              	// a colon defintion in RAM 
 100              	// can jump to NEST
 101              	// INX register is initialized 
 102              	// to NEST address 
 103              	// and must be preserved   
 104              	COMPI_NEST:
 105 ???? 04F14C01 		add T1,UP,#USER_CTOP // pointer HERE 
 106 ???? 0968     		ldr T1,[T1]     // address in here   
 107 ???? 44F25072 		mov T2,#0x4700+(10<<3) // binary code for BX INX 
 108 ???? 21F8022B 		strh T2,[T1],#2    // store code at HERE, ptr+2   
 109 ???? 4FF43F42 		mov T2,#0xbf00 // NOP.N   instruction 
 110 ???? 21F8022B 		strh T2,[T1],#2  // store code at HERE, ptr+2 
 111 ???? 04F14C02 		add T2,UP,#USER_CTOP 
 112 ???? 1160     		str T1,[T2]  // save update HERE value 
 113 ???? E8E7     		_NEXT  
 114              	
 115              	// ' STDIN 
 116              	// stdin vector 
 117              	TSTDIN:
 118 ???? 47F8046D 		_PUSH 
 119 ???? 04F11406 		ADD TOS,UP,#STDIN 
 120 ???? E3E7     		_NEXT 
 121              	
 122              	// ' STDOUT 
 123              	// stdout vector 
ARM GAS  forth.s 			page 116


 124              	TSTDOUT:
 125 ???? 47F8046D 		_PUSH 
 126 ???? 04F11806 		ADD TOS,UP,#STDOUT
 127 ???? DEE7     		_NEXT 
 128              	
 129              	/***************************
 130              	  CFSR ( -- u )
 131              	  stack CFSR register 
 132              	***************************/
 133 ???? 3C2F0000 	    _HEADER CFSR,4,"CFSR"
 133      04434653 
 133      5200
 134 ???? 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 134      CEF20000 
 135 ???? 47F8046D 	    _PUSH 
 136 ???? 866A     	    ldr TOS,[T0,#SCB_CFSR]
 137 ???? 81EA0101 	    eor T1,T1 
 138 ???? 8162     	    str T1,[T0,#SCB_CFSR]
 139 ???? CEE7     	    _NEXT 
 140              	
 141              	/*****************************
 142              	  BFAR ( -- u )
 143              	  stack BFAR register
 144              	*****************************/
 145 ???? F62F0000 	    _HEADER BFAR,4,"BFAR"
 145      04424641 
 145      5200
 146 ???? 4FF46D40 	    _MOV32 T0,SCB_BASE_ADR  
 146      CEF20000 
 147 ???? 47F8046D 		_PUSH 
 148 ???? 866B     	    ldr TOS,[T0,#SCB_BFAR]
 149 ???? 81EA0101 	    eor T1,T1 
 150 ???? 8163     	    str T1,[T0,#SCB_BFAR]
 151 ???? BEE7     	    _NEXT 
 152              	
 153              	/********************************************
 154              		KEY? ( -- c T | F )
 155              		check if available character 
 156              	********************************************/
 157 ???? 16300000 		_HEADER QKEY,4,"KEY?" 
 157      044B4559 
 157      3F00
 158 ???? 504700BF 		_NEST 
 159 ???? DF2F0000 		_ADR TSTDIN // ' STDIN 
 160 ???? 69400000 		_ADR ATEXE
 161 ???? B72F0000 		_UNNEST 
 162              	
 163              	/********************************************
 164              	    KEY	 ( -- c )
 165              	 	Wait for and return an input character.
 166              	********************************************/
 167 ???? 36300000 		_HEADER KEY,3,"KEY"
 167      034B4559 
 168 ???? 504700BF 		_NEST
 169              	KEY1:
 170 ???? E11C0000 		_ADR CAPS_LED 
 171 ???? 3D300000 		_ADR	QKEY 
ARM GAS  forth.s 			page 117


 172 ???? 17320000 		_QBRAN	KEY1
 172      58300000 
 173              	/*  add this code to filter out control characters 	
 174              		_ADR    DUPP 
 175              		_DOLIT  13 
 176              		_ADR    EQUAL 
 177              		_TBRAN  KEY2 
 178              		_ADR    DUPP
 179              		_DOLIT  32 
 180              		_ADR    LESS 
 181              		_QBRAN  KEY2 
 182              		_ADR    DROP 
 183              		_BRAN   KEY1 
 184              	*/ 
 185              	KEY2: 	
 186 ???? B72F0000 		_UNNEST
 187              	
 188              	/**********************************************
 189              		EMIT ( c -- )
 190              		transmit a character to console 
 191              	**********************************************/
 192 ???? 50300000 		_HEADER EMIT,4,"EMIT"
 192      04454D49 
 192      540000BF 
 193 ???? 504700BF 		_NEST 
 194 ???? E92F0000 		_ADR TSTDOUT 
 195 ???? 69400000 		_ADR ATEXE 
 196 ???? B72F0000 		_UNNEST 
 197              	
 198              	
 199              	/************************************************
 200              	 GET-IP ( n - c )
 201              	 return interrupt priority of IRQn 
 202              	************************************************/
 203              	/*
 204              		_HEADER GETIP,6,"GET-IP" 
 205              		_NEST 
 206              		_ADR DUPP 
 207              		_ADR ZLESS
 208              		_QBRAN 1f 
 209              		_DOLIT 15
 210              		_ADR ANDD
 211              		_DOLIT 4
 212              		_ADR SUBB  
 213              		_DOLIT 0xE000ED18 
 214              		_BRAN 2f 
 215              	1:	_DOLIT 0xE000E400 
 216              	2:	_ADR PLUS 
 217              		_ADR CAT
 218              		_DOLIT 4 
 219              		_ADR RSHIFT 
 220              		_UNNEST 
 221              	*/
 222              	
 223              	/***********************************************
 224              	 RANDOM ( n+ -- {0..n+ - 1} )
 225              	 return pseudo random number 
ARM GAS  forth.s 			page 118


 226              	 REF: https://en.wikipedia.org/wiki/Xorshift
 227              	************************************************/
 228 ???? 70300000 		_HEADER RAND,6,"RANDOM"
 228      0652414E 
 228      444F4D00 
 229 ???? 504700BF 		_NEST
 230 ???? 85370000 		_ADR ABSS   
 231 ???? 91390000 		_ADR SEED 
 232 ???? 6D320000 		_ADR AT 
 233 ???? 91330000 		_ADR DUPP 
 234 ???? D7310000 		_DOLIT 13
 234      0D000000 
 235 ???? BD340000 		_ADR LSHIFT 
 236 ???? 75340000 		_ADR XORR  
 237 ???? 91330000 		_ADR DUPP 
 238 ???? D7310000 		_DOLIT 17 
 238      11000000 
 239 ???? A5340000 		_ADR RSHIFT 
 240 ???? 75340000 		_ADR XORR 
 241 ???? 91330000 		_ADR DUPP
 242 ???? D7310000 		_DOLIT 5 
 242      05000000 
 243 ???? BD340000 		_ADR LSHIFT 
 244 ???? 75340000 		_ADR XORR  
 245 ???? 91330000 		_ADR DUPP 
 246 ???? 91390000 		_ADR SEED 
 247 ???? 59320000 		_ADR STORE 
 248 ???? D7310000 		_DOLIT 0x7FFFFFFF
 248      FFFFFF7F 
 249 ???? 4D340000 		_ADR ANDD 
 250 ???? A1330000 		_ADR SWAP 
 251 ???? 653E0000 		_ADR MODD 
 252 ???? B72F0000 		_UNNEST 
 253              	
 254              	
 255              	/****************************************
 256              	 MS ( u -- ) 
 257              	 suspend execution for u milliseconds
 258              	****************************************/
 259 ???? 8C300000 		_HEADER PAUSE,2,"MS"
 259      024D5300 
 260 ???? 504700BF 		_NEST 
 261 ???? BD390000 		_ADR TIMER 
 262 ???? 59320000 		_ADR STORE 
 263              	PAUSE_LOOP:
 264 ???? BD390000 		_ADR TIMER 
 265 ???? 6D320000 		_ADR AT 
 266 ???? 17320000 		_QBRAN PAUSE_EXIT 
 266      30310000 
 267 ???? 3F320000 		_BRAN PAUSE_LOOP 
 267      18310000 
 268              	PAUSE_EXIT: 		
 269 ???? B72F0000 		_UNNEST 
 270              	
 271              	/******************************************
 272              	  ULED ( T|F -- )
 273              	  control user LED, -1 ON, 0 OFF 
ARM GAS  forth.s 			page 119


 274              	*******************************************/
 275 ???? 08310000 		_HEADER ULED,4,"ULED"
 275      04554C45 
 275      440000BF 
 276 ???? 4FF40050 		mov T0,#(1<<LED_PIN)
 277 ???? 4FF40061 		_MOV32 T1,LED_GPIO 
 277      C4F20201 
 278 ???? 3600     		movs TOS,TOS 
 279 ???? 57F8046B 		_POP
 280 ???? 03D0     		beq ULED_OFF
 281 ???? 4FEA0040 		lsl T0,#16 
 282 ???? 8861     		str T0,[T1,#GPIO_BSRR]
 283 ???? 29E7     		_NEXT 
 284              	ULED_OFF:
 285 ???? 8861     		str T0,[T1,#GPIO_BSRR]
 286 ???? 27E7     		_NEXT    
 287              	
 288              	/**************************
 289              	   JOYSTK  ( -- u )
 290              	   read joystick port 
 291              	**************************/
 292 ???? 38310000 		_HEADER JOYSTK,6,"JOYSTK"
 292      064A4F59 
 292      53544B00 
 293 ???? 504700BF 		_NEST 
 294 ???? D7310000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR)
 294      10000240 
 295 ???? 6D320000 		_ADR AT 
 296 ???? D7310000 		_DOLIT 0x100f 
 296      0F100000 
 297 ???? 4D340000 		_ADR ANDD 
 298 ???? B72F0000 		_UNNEST 
 299              	
 300              	/****************************
 301              		BEEP ( msec freq -- )
 302              	input:
 303              		freq  frequence hertz 
 304              		msec  durration in msec 
 305              	*****************************/
 306 ???? 64310000 		_HEADER BEEP,4,"BEEP"
 306      04424545 
 306      500000BF 
 307 ???? 48F68050 		_MOV32 r0,6000000 // Fclk 
 307      C0F25B00 
 308 ???? B0FBF6F0 		udiv r0,r0,TOS
 309 ???? 57F8046B 		_POP  
 310 ???? 4FF40061 		_MOV32 r1,TIM4_BASE_ADR
 310      C4F20001 
 311 ???? C862     		str r0,[r1,#TIM_ARR]
 312 ???? 4FEA5000 		lsr r0,#1
 313 ???? 4863     		str r0,[r1,#TIM_CCR1]
 314 ???? 4FF00100 		mov r0,#1 
 315 ???? 0862     		str r0,[r1,#TIM_CCER]
 316 ???? 0860     		str r0,[r1,#TIM_CR1]
 317 ???? C868     		ldr r0,[r1,#TIM_DIER]
 318 ???? C4F8B060 		str TOS,[UP,#BEEP_DTMR]
 319 ???? 57F8046B 		_POP
ARM GAS  forth.s 			page 120


 320 ???? F1E6     		_NEXT 
 321              	
 322              	
 323              	/***************
 324              	//  The kernel
 325              	***************/
 326              	
 327              	/********************
 328              	    NOP	( -- )
 329              	 	do nothing.
 330              	*********************/
 331 ???? 90310000 		_HEADER NOP,3,"NOP"
 331      034E4F50 
 332 ???? ECE6     		_NEXT
 333              		  
 334              	 
 335              	/********************
 336              	    doLIT	( -- w )
 337              	 	Push an inline literal.
 338              	hidden word used by compiler 
 339              	*********************/
 340              	DOLIT:
 341 ???? 47F8046D 		_PUSH				//  store TOS on data stack
 342 ???? 5CF8046B 		LDR	TOS,[IP],#4		//  get literal at word boundary
 343 ???? E7E6     		_NEXT 
 344              	
 345              	/*******************************
 346              	    EXECUTE	( ca -- )
 347              	 	Execute the word at ca.
 348              	*******************************/
 349 ???? D0310000 		_HEADER EXECU,7,"EXECUTE"
 349      07455845 
 349      43555445 
 350 ???? 46F00105 		ORR	WP,TOS,#1 
 351 ???? 57F8046B 		_POP
 352 ???? 2847     		BX WP 
 353 ???? DBE6     		_NEXT 
 354              	
 355              	/**********************************************************
 356              	    donext	( -- ) counter on R:
 357              	 	Run time code for the single index loop.
 358              	 	: next ( -- ) \ hilevel model
 359              	 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 360              	hidden word used by compiler 	  
 361              	*********************************************************/
 362              	DONXT:
 363 ???? D8F80020 		LDR	T2,[RSP]   // ( -- u )  
 364 ???? 22B9     		CBNZ T2,NEXT1 
 365              		/* loop done */
 366 ???? 08F10408 		ADD	RSP,RSP,#4 // drop counter 
 367 ???? 0CF1040C 		ADD	IP,IP,#4 // skip after loop address 
 368 ???? D3E6     		_NEXT
 369              	NEXT1:
 370              		/* decrement loop counter */
 371 ???? A2F10102 		SUB	T2,T2,#1
 372 ???? C8F80020 		STR	T2,[RSP]
 373 ???? DCF800C0 		LDR	IP,[IP]	// go begining of loop 
ARM GAS  forth.s 			page 121


 374 ???? CCE6     		_NEXT 
 375              	
 376              	/**************************************
 377              	    ?branch	( f -- )
 378              	 	Branch if flag is zero.
 379              	hiddend word used by compiler
 380              	**************************************/
 381              	QBRAN:
 382 ???? 3600     		MOVS	TOS,TOS
 383 ???? 57F8046B 		_POP
 384 ???? 02D1     		BNE	QBRAN1
 385 ???? DCF800C0 		LDR	IP,[IP]
 386 ???? C5E6     		_NEXT
 387              	QBRAN1:
 388 ???? 0CF1040C 	 	ADD	IP,IP,#4
 389 ???? C2E6     		_NEXT
 390              	
 391              	/***********************************
 392              		tbranch ( f -- )
 393              	    branch if flag is true 
 394              	***********************************/
 395              	TBRAN:
 396 ???? 3600     		MOVS TOS,TOS 
 397 ???? 57F8046B 		_POP 
 398 ???? 02D0     		BEQ 1f 
 399 ???? DCF800C0 		LDR IP,[IP]
 400 ???? BBE6     		_NEXT 
 401 ???? 0CF1040C 	1:  ADD IP,IP,#4
 402 ???? B8E6     		_NEXT 
 403              	
 404              	
 405              	/***********************************
 406              	    branch	( -- )
 407              	 	Branch to an inline address.
 408              	hidden word used by compiler 
 409              	***********************************/
 410              	BRAN:
 411 ???? DCF800C0 		LDR	IP,[IP]
 412 ???? B5E6     		_NEXT
 413              	
 414              	/******************************************
 415              	    EXIT	(  -- )
 416              	 	Exit the currently executing command.
 417              	******************************************/
 418 ???? E4310000 		_HEADER EXIT,4,"EXIT"
 418      04455849 
 418      540000BF 
 419 ???? B1E6     		b UNNEST 
 420              	
 421              	
 422              	/***********************************
 423              	    !	   ( w a -- )
 424              	 	Pop the data stack to memory.
 425              	************************************/
 426 ???? 48320000 		_HEADER STORE,1,"!"
 426      0121
 427 ???? 57F8045B 		LDR	WP,[DSP],#4
ARM GAS  forth.s 			page 122


 428 ???? 3560     		STR	WP,[TOS]
 429 ???? 57F8046B 		_POP
 430 ???? A5E6     		_NEXT 
 431              	
 432              	/********************************************
 433              	    @	   ( a -- w )
 434              	 	Push memory location to the data stack.
 435              	*********************************************/
 436 ???? 56320000 		_HEADER AT,1,"@"
 436      014000BF 
 437 ???? 3668     		LDR	TOS,[TOS]
 438 ???? 9FE6     		_NEXT 
 439              	
 440              	/*******************************************
 441              	    C!	  ( c b -- )
 442              	 	Pop the data stack to byte memory.
 443              	*******************************************/
 444 ???? 68320000 		_HEADER CSTOR,2,"C!"
 444      02432100 
 445 ???? 57F8045B 		LDR	WP,[DSP],#4
 446 ???? 3570     		STRB WP,[TOS]
 447 ???? 57F8046B 		_POP
 448 ???? 95E6     		_NEXT
 449              	
 450              	/*********************************************
 451              	    C@	  ( b -- c )
 452              	 	Push byte memory location to the data stack.
 453              	**********************************************/
 454 ???? 74320000 		_HEADER CAT,2,"C@"
 454      02434000 
 455 ???? 3678     		LDRB	TOS,[TOS]
 456 ???? 8FE6     		_NEXT 
 457              	
 458              	
 459              	/*********************************************
 460              	    R>	  ( -- w  R: w -- ) 
 461              	 	push from rstack.
 462              	**********************************************/
 463 ???? 88320000 		_HEADER RFROM,2,"R>"
 463      02523E00 
 464 ???? 47F8046D 		_PUSH
 465 ???? 58F8046B 		LDR	TOS,[RSP],#4
 466 ???? 86E6     		_NEXT 
 467              	
 468              	/***********************************************
 469              		2R> (  -- x1 x2 ) R: x1 x2 --  
 470              	    push a double from rstack 
 471              	***********************************************/
 472 ???? 94320000 		_HEADER DRFROM,3,"2R>"
 472      0332523E 
 472      00BF
 473 ???? 47F8046D 		_PUSH 
 474 ???? D8F80460 		LDR TOS,[RSP,#CELLL] 
 475 ???? 47F8046D 		_PUSH 
 476 ???? D8F80060 		LDR TOS,[RSP]
 477 ???? 08F10808 		ADD RSP,#2*CELLL 
 478 ???? 76E6     		_NEXT 
ARM GAS  forth.s 			page 123


 479              	
 480              	/************************************************
 481              	    R@	  ( -- w )
 482              	 	Copy top of return stack to the data stack.
 483              	************************************************/
 484 ???? A6320000 		_HEADER RAT,2,"R@"
 484      02524000 
 484      00BF
 485 ???? 47F8046D 		_PUSH
 486 ???? D8F80060 		LDR	TOS,[RSP]
 487 ???? 6CE6     		_NEXT 
 488              	
 489              	/***********************************************
 490              		2R@ ( -- x2 x1 ) ( R: x1 x2 -- ) 
 491              		Copy 2 element of return stack to data stack
 492              	***********************************************/
 493 ???? C6320000 		_HEADER DRAT,3,"2R@"
 493      03325240 
 493      00BF
 494 ???? 47F8046D 		_PUSH 
 495 ???? D8F80460 		LDR TOS,[RSP,#CELLL] 
 496 ???? 47F8046D 		_PUSH 
 497 ???? D8F80060 		LDR TOS,[RSP] 
 498 ???? 5EE6     		_NEXT 
 499              	
 500              	
 501              	/***********************************************
 502              	    >R	  ( w -- ) R: -- w 
 503              	 	pop to rstack.
 504              	************************************************/
 505 ???? DA320000 		_HEADER TOR,2,">R"
 505      023E5200 
 505      00BF
 506 ???? 48F8046D 		STR	TOS,[RSP,#-CELLL]!
 507 ???? 57F8046B 		_POP
 508 ???? 54E6     		_NEXT
 509              	
 510              	/*********************************************
 511              		2>R ( x1 x2 -- ) R: -- x1 x2  
 512              		pop a double to rstack 
 513              	*********************************************/
 514 ???? F6320000 		_HEADER DTOR,3,"2>R"
 514      03323E52 
 514      00BF
 515 ???? 57F8040B 		LDR T0, [DSP],#CELLL
 516 ???? 48F8040D 		STR T0,[RSP,#-CELLL]!
 517 ???? 48F8046D 	 	STR TOS,[RSP,#-CELLL]!
 518 ???? 57F8046B 		_POP  
 519 ???? 46E6     		_NEXT 	
 520              	
 521              	
 522              	/*******************************
 523              	//	RP! ( u -- )
 524              	// initialize RPP with u 
 525              	*******************************/
 526 ???? 0A330000 		_HEADER RPSTOR,3,"RP!"
 526      03525021 
ARM GAS  forth.s 			page 124


 526      00BF
 527 ???? B046     		MOV RSP,TOS 
 528 ???? 57F8046B 		_POP  
 529 ???? 3DE6     		_NEXT 
 530              	
 531              	/********************************
 532              		SP! ( u -- )
 533              	 initialize SPP with u 
 534              	********************************/
 535 ???? 26330000 		_HEADER SPSTOR,3,"SP!"
 535      03535021 
 536 ???? 3746     		MOV DSP,TOS 
 537 ???? 86EA0606 		EOR TOS,TOS,TOS 
 538 ???? 35E6     		_NEXT 
 539              	
 540              	/**************************************
 541              	    SP@	 ( -- a )
 542              	 	Push the current data stack pointer.
 543              	***************************************/
 544 ???? 38330000 		_HEADER SPAT,3,"SP@"
 544      03535040 
 545 ???? 47F8046D 		_PUSH
 546 ???? 3E46     		MOV	TOS,DSP
 547 ???? 2DE6     		_NEXT
 548              	
 549              	/**************************************
 550              	   RP@ ( -- a )
 551              	   push current rstack pointer 
 552              	**************************************/
 553 ???? 48330000 		_HEADER RPAT,3,"RP@"
 553      03525040 
 554 ???? 47F8046D 		_PUSH 
 555 ???? 4646     		MOV TOS,RSP 
 556 ???? 25E6     		_NEXT 
 557              	
 558              	/********************************
 559              	    DROP	( w -- )
 560              	 	Discard top stack item.
 561              	********************************/
 562 ???? 58330000 		_HEADER DROP,4,"DROP"
 562      0444524F 
 562      500000BF 
 563 ???? 57F8046B 		_POP
 564 ???? 1CE6     		_NEXT 
 565              	
 566              	/*********************************
 567              	CORE EXTENSION 
 568              		NIP ( x1 x2 -- x2 )
 569              		throw next element 
 570              	*********************************/
 571 ???? 68330000 		_HEADER NIP,3,"NIP"
 571      034E4950 
 571      00BF
 572 ???? 07F10407 		ADD DSP,#CELLL 
 573 ???? 14E6     		_NEXT 
 574              	
 575              	/*********************************
ARM GAS  forth.s 			page 125


 576              	    DUP	 ( w -- w w )
 577              	 	Duplicate the top stack item.
 578              	*********************************/
 579 ???? 7A330000 		_HEADER DUPP,3,"DUP"
 579      03445550 
 579      00BF
 580 ???? 47F8046D 		_PUSH
 581 ???? 0CE6     		_NEXT 
 582              	
 583              	/**********************************
 584              	    SWAP	( w1 w2 -- w2 w1 )
 585              	 	Exchange top two stack items.
 586              	**********************************/
 587 ???? 8A330000 		_HEADER SWAP,4,"SWAP"
 587      04535741 
 587      5000
 588 ???? 3D68     		LDR	WP,[DSP]
 589 ???? 3E60     		STR	TOS,[DSP]
 590 ???? 2E46     		MOV	TOS,WP
 591 ???? 03E6     		_NEXT 
 592              	
 593              	/***********************************
 594              		2SWAP ( d2 d1 -- d1 d2 )
 595              		swap double integer 
 596              	***************************************/
 597 ???? 9A330000 		_HEADER DSWAP,5,"2SWAP"
 597      05325357 
 597      415000BF 
 598 ???? 3046     		mov T0,TOS 
 599 ???? 3968     		ldr T1,[DSP]
 600 ???? 7E68     		ldr TOS,[DSP,#4]
 601 ???? BD68     		ldr WP,[DSP,#8]
 602 ???? 3D60     		str WP,[DSP]
 603 ???? 7860     		str T0,[DSP,#4]
 604 ???? B960     		str T1,[DSP,#8]
 605 ???? F5E5     		_NEXT 
 606              	
 607              	
 608              	/***********************************
 609              	    OVER	( w1 w2 -- w1 w2 w1 )
 610              	 	Copy second stack item to top.
 611              	***********************************/
 612 ???? AC330000 		_HEADER OVER,4,"OVER"
 612      044F5645 
 612      520000BF 
 613 ???? 47F8046D 		_PUSH
 614 ???? 7E68     		LDR	TOS,[DSP,#4]
 615 ???? EBE5     		_NEXT 
 616              	
 617              	/***********************************
 618              		2OVER ( d2 d1 -- d2 d1 d2 )
 619              		copy a double integer to TOS 
 620              	**********************************************/
 621 ???? C8330000 		_HEADER DOVER,5,"2OVER"
 621      05324F56 
 621      455200BF 
 622 ???? 7868     		ldr T0,[DSP,#4]
ARM GAS  forth.s 			page 126


 623 ???? BD68     		ldr WP,[DSP,#8]
 624 ???? 47F8046D 		_PUSH 
 625 ???? 2E46     		mov TOS,WP 
 626 ???? 47F8046D 		_PUSH
 627 ???? 0646     		mov TOS,T0 
 628 ???? DCE5     		_NEXT 
 629              	
 630              	
 631              	/***********************************
 632              	    0<	  ( n -- t )
 633              	 	Return true if n is negative.
 634              	***********************************/
 635 ???? DC330000 		_HEADER ZLESS,2,"0<"
 635      02303C00 
 635      00BF
 636 ???? 4FEAE676 		ASR TOS,#31
 637 ???? D4E5     		_NEXT 
 638              	
 639              	/**********************************
 640              		0> ( n -- flag )
 641              		true if n > 0 
 642              	**********************************/
 643 ???? FA330000 		_HEADER ZGREAT,2,"0>"
 643      02303E00 
 643      00BF
 644 ???? 1EB1     		CBZ TOS, 1f
 645 ???? 4FEAE676 		ASR TOS,#31 
 646 ???? 6FEA0606 		MVN TOS,TOS 
 647 ???? C9E5     	1:	_NEXT 
 648              	
 649              	
 650              	/**********************************
 651              		0<> ( n -- flag )
 652              	    true if n <> 0
 653              	*********************************/
 654 ???? 0A340000 		_HEADER ZNEQU,3,"0<>"
 654      03303C3E 
 655 ???? 0EB1     		CBZ TOS,1f
 656 ???? 4FF0FF36 		MOV TOS,#-1
 657 ???? C1E5     	1:	_NEXT
 658              	
 659              	
 660              	/*********************************
 661              		<>  ( x1 x2 -- flag )
 662              		true fi x1 <> x2 
 663              	********************************/
 664 ???? 20340000 		_HEADER NEQU,2,"<>"
 664      023C3E00 
 665 ???? 57F8040B 		LDR T0,[DSP],#CELLL 
 666 ???? 4640     		EORS TOS,T0 
 667 ???? 01D0     		BEQ 1f
 668 ???? 4FF0FF36 		MOV TOS,#-1
 669 ???? B6E5     	1:  _NEXT 
 670              	
 671              	
 672              	/********************************
 673              	    AND	 ( w w -- w )
ARM GAS  forth.s 			page 127


 674              	 	Bitwise AND.
 675              	********************************/
 676 ???? 30340000 		_HEADER ANDD,3,"AND"
 676      03414E44 
 676      00BF
 677 ???? 57F8045B 		LDR	WP,[DSP],#4
 678 ???? 06EA0506 		AND	TOS,TOS,WP
 679 ???? ACE5     		_NEXT 
 680              	
 681              	/******************************
 682              	    OR	  ( w w -- w )
 683              	 	Bitwise inclusive OR.
 684              	******************************/
 685 ???? 46340000 		_HEADER ORR,2,"OR"
 685      024F5200 
 685      00BF
 686 ???? 57F8045B 		LDR	WP,[DSP],#4
 687 ???? 46EA0506 		ORR	TOS,TOS,WP
 688 ???? A2E5     		_NEXT 
 689              	
 690              	/*****************************
 691              	    XOR	 ( w w -- w )
 692              	 	Bitwise exclusive OR.
 693              	*****************************/
 694 ???? 5A340000 		_HEADER XORR,3,"XOR"
 694      03584F52 
 694      00BF
 695 ???? 57F8045B 		LDR	WP,[DSP],#4
 696 ???? 86EA0506 		EOR	TOS,TOS,WP
 697 ???? 98E5     		_NEXT 
 698              	
 699              	/**************************************************
 700              	    UM+	 ( w w -- w cy )
 701              	 	Add two numbers, return the sum and carry flag.
 702              	***************************************************/
 703 ???? 6E340000 		_HEADER UPLUS,3,"UM+"
 703      03554D2B 
 703      00BF
 704 ???? 3D68     		LDR	WP,[DSP]
 705 ???? AD19     		ADDS	WP,WP,TOS
 706 ???? 4FF00006 		MOV	TOS,#0
 707 ???? 46F10006 		ADC	TOS,TOS,#0
 708 ???? 3D60     		STR	WP,[DSP]
 709 ???? 8BE5     		_NEXT 
 710              	
 711              	/*********************************
 712              	    RSHIFT	 ( w # -- w )
 713              	 	logical Right shift # bits.
 714              	**********************************/
 715 ???? 82340000 		_HEADER RSHIFT,6,"RSHIFT"
 715      06525348 
 715      49465400 
 716 ???? 57F8045B 		LDR	WP,[DSP],#4
 717 ???? 25FA06F6 		MOV	TOS,WP,LSR TOS
 718 ???? 80E5     		_NEXT 
 719              	
 720              	/****************************
ARM GAS  forth.s 			page 128


 721              	    LSHIFT	 ( w # -- w )
 722              	 	left shift # bits.
 723              	****************************/
 724 ???? 9C340000 		_HEADER LSHIFT,6,"LSHIFT"
 724      064C5348 
 724      49465400 
 724      00BF
 725 ???? 57F8045B 		LDR	WP,[DSP],#4
 726 ???? 05FA06F6 		MOV	TOS,WP,LSL TOS
 727 ???? 74E5     		_NEXT
 728              	
 729              	/*************************
 730              	    +	 ( w w -- w )
 731              	 	Add.
 732              	*************************/
 733 ???? B2340000 		_HEADER PLUS,1,"+"
 733      012B
 734 ???? 57F8045B 		LDR	WP,[DSP],#4
 735 ???? 2E44     		ADD	TOS,TOS,WP
 736 ???? 6DE5     		_NEXT 
 737              	
 738              	/************************
 739              	    -	 ( w w -- w )
 740              	 	Subtract.
 741              	************************/
 742 ???? CA340000 		_HEADER SUBB,1,"-"
 742      012D00BF 
 743 ???? 57F8045B 		LDR	WP,[DSP],#4
 744 ???? C6EB0506 		RSB	TOS,TOS,WP
 745 ???? 64E5     		_NEXT 
 746              	
 747              	/************************
 748              	    *	 ( w w -- w )
 749              	 	Multiply.
 750              	***********************/
 751 ???? D8340000 		_HEADER STAR,1,"*"
 751      012A
 752 ???? 57F8045B 		LDR	WP,[DSP],#4
 753 ???? 05FB06F6 		MUL	TOS,WP,TOS
 754 ???? 5CE5     		_NEXT 
 755              	
 756              	/***************************
 757              	    UM*	 ( w w -- ud )
 758              	 	Unsigned multiply.
 759              	****************************/
 760 ???? EA340000 		_HEADER UMSTA,3,"UM*"
 760      03554D2A 
 760      00BF
 761 ???? 3D68     		LDR	WP,[DSP]
 762 ???? A6FB0523 		UMULL	T2,T3,TOS,WP
 763 ???? 3A60     		STR	T2,[DSP]
 764 ???? 1E46     		MOV	TOS,T3
 765 ???? 51E5     		_NEXT 
 766              	
 767              	/***************************
 768              	    M*	 ( w w -- d )
 769              	 	signed multiply.
ARM GAS  forth.s 			page 129


 770              		hold double result
 771              	***************************/
 772 ???? FA340000 		_HEADER MSTAR,2,"M*"
 772      024D2A00 
 773 ???? 3D68     		LDR	WP,[DSP]
 774 ???? 86FB0523 		SMULL	T2,T3,TOS,WP
 775 ???? 3A60     		STR	T2,[DSP]
 776 ???? 1E46     		MOV	TOS,T3
 777 ???? 47E5     		_NEXT 
 778              	
 779              	/***************************
 780              	    1+	 ( w -- w+1 )
 781              	 	Add 1.
 782              	***************************/
 783 ???? 10350000 		_HEADER ONEP,2,"1+"
 783      02312B00 
 784 ???? 06F10106 		ADD	TOS,TOS,#1
 785 ???? 40E5     		_NEXT 
 786              	
 787              	/***************************
 788              	    1-	 ( w -- w-1 )
 789              	 	Subtract 1.
 790              	***************************/
 791 ???? 24350000 		_HEADER ONEM,2,"1-"
 791      02312D00 
 791      00BF
 792 ???? A6F10106 		SUB	TOS,TOS,#1
 793 ???? 38E5     		_NEXT 
 794              	
 795              	/***************************
 796              	    2+	 ( w -- w+2 )
 797              	 	Add 2.
 798              	**************************/
 799 ???? 32350000 		_HEADER TWOP,2,"2+"
 799      02322B00 
 799      00BF
 800 ???? 06F10206 		ADD	TOS,TOS,#2
 801 ???? 30E5     		_NEXT
 802              	
 803              	/**************************
 804              	    2-	 ( w -- w-2 )
 805              	 	Subtract 2.
 806              	**************************/
 807 ???? 42350000 		_HEADER TWOM,2,"2-"
 807      02322D00 
 807      00BF
 808 ???? A6F10206 		SUB	TOS,TOS,#2
 809 ???? 28E5     		_NEXT
 810              	
 811              	/***************************
 812              	    CELL+	( w -- w+4 )
 813              	 	Add CELLL.
 814              	***************************/
 815 ???? 52350000 		_HEADER CELLP,5,"CELL+"
 815      0543454C 
 815      4C2B
 816 ???? 06F10406 		ADD	TOS,TOS,#CELLL
ARM GAS  forth.s 			page 130


 817 ???? 20E5     		_NEXT
 818              	
 819              	/***************************
 820              	    CELL-	( w -- w-4 )
 821              	 	Subtract CELLL.
 822              	**************************/
 823 ???? 62350000 		_HEADER CELLM,5,"CELL-"
 823      0543454C 
 823      4C2D
 824 ???? A6F10406 		SUB	TOS,TOS,#CELLL
 825 ???? 18E5     		_NEXT
 826              	
 827              	/**************************** 
 828              	    BL	( -- 32 )
 829              	 	Blank (ASCII space).
 830              	*****************************/
 831 ???? 72350000 		_HEADER BLANK,2,"BL"
 831      02424C00 
 831      00BF
 832 ???? 47F8046D 		_PUSH
 833 ???? 4FF02006 		MOV	TOS,#32
 834 ???? 0EE5     		_NEXT 
 835              	
 836              	/**************************
 837              	    CELLS	( w -- w*4 )
 838              	 	Multiply CELLL 
 839              	***************************/
 840 ???? 82350000 		_HEADER CELLS,5,"CELLS"
 840      0543454C 
 840      4C53
 841 ???? 4FEA8606 		LSL TOS,#2
 842 ???? 06E5     		_NEXT
 843              	
 844              	/***************************
 845              	    CELL/	( w -- w/4 )
 846              	 	Divide by CELLL.
 847              	***************************/
 848 ???? 96350000 		_HEADER CELLSL,5,"CELL/"
 848      0543454C 
 848      4C2F
 849 ???? 4FEAA606 		ASR TOS,#2
 850 ???? FEE4     		_NEXT
 851              	
 852              	/*************************
 853              	    2*	( w -- w*2 )
 854              	 	Multiply 2.
 855              	*************************/
 856 ???? A6350000 		_HEADER TWOST,2,"2*"
 856      02322A00 
 856      00BF
 857 ???? 4FEA4606 		MOV	TOS,TOS,LSL#1
 858 ???? F6E4     		_NEXT
 859              	
 860              	/*************************
 861              	    2/	( w -- w/2 )
 862              	 	Divide by 2.
 863              	***********************/
ARM GAS  forth.s 			page 131


 864 ???? B6350000 		_HEADER TWOSL,2,"2/"
 864      02322F00 
 864      00BF
 865 ???? 4FEA6606 		MOV	TOS,TOS,ASR#1
 866 ???? EEE4     		_NEXT
 867              	
 868              	/****************************
 869              	    ?DUP	( w -- w w | 0 )
 870              	 	Conditional duplicate.
 871              	*****************************/
 872 ???? C6350000 		_HEADER QDUP,4,"?DUP"
 872      043F4455 
 872      5000
 873 ???? 3500     		MOVS	WP,TOS
 874 ???? 18BF     		IT NE 
 875 ???? 47F8046D 	    STRNE	TOS,[DSP,#-4]!
 876 ???? E4E4     		_NEXT
 877              	
 878              	/************************************
 879              	 CORE EXTENSION 
 880              		TUCK ( x1 x2 -- x2 x1 x2 )
 881              	***********************************/
 882 ???? D6350000 		_HEADER TUCK,4,"TUCK"
 882      04545543 
 882      4B00
 883 ???? 47F8046D 		_PUSH 
 884 ???? 7E68     		LDR TOS, [DSP,#CELLL]
 885 ???? DBE4     		_NEXT 
 886              	
 887              	/************************************
 888              	 CORE EXTENSION 
 889              		ROLL ( Xu Xu-1 .. X0 u -- Xu-1 ... X0 Xu )
 890              	**********************************************/
 891 ???? EA350000 		_HEADER ROLL,4,"ROLL"
 891      04524F4C 
 891      4C0000BF 
 892 ???? 504700BF 		_NEST 
 893 ???? DD350000 		_ADR QDUP 
 894 ???? 17320000 		_QBRAN 9f 
 894      68360000 
 895 ???? 91330000 		_ADR  DUPP 
 896 ???? D7310000 		_DOLIT 1 
 896      01000000 
 897 ???? 15380000 		_ADR   EQUAL 
 898 ???? 17320000 		_QBRAN 1f 
 898      3C360000 
 899 ???? 71330000 		_ADR  DROP 
 900 ???? A1330000 		_ADR  SWAP 
 901 ???? 3F320000 		_BRAN 9f 
 901      68360000 
 902 ???? FD320000 	1:  _ADR  TOR 	
 903 ???? CD320000 		_ADR  RAT
 904 ???? A93F0000 		_ADR  PICK 	
 905 ???? 4D330000 		_ADR  SPAT
 906 ???? 91330000 		_ADR  DUPP 
 907 ???? 69350000 		_ADR  CELLP 
 908 ???? 99320000 		_ADR  RFROM
ARM GAS  forth.s 			page 132


 909 ???? 29350000 		_ADR  ONEP  
 910 ???? 9D350000 		_ADR  CELLS 
 911 ???? CD400000 		_ADR  WMOVE  
 912 ???? 71330000 		_ADR  DROP 
 913 ???? B72F0000 	9:	_UNNEST 
 914              	/*
 915              		MOV T0, TOS
 916              		CBZ T0, 9f 
 917              		MOV T1, T0   // COUNTER   
 918              		SUBB T0, #1 
 919              		SLL T0, #2 
 920              		_POP
 921              		MOV T2, TOS 
 922              		LDR TOS,[DSP,T0]
 923              		MOV T2, [DSP,T0]
 924              		SUBS T1,#1
 925              		BEQ  9f 
 926              	
 927              	9:	_NEXT 
 928              	*/
 929              	
 930              	/***********************************
 931              	    ROT	( w1 w2 w3 -- w2 w3 w1 )
 932              	 	Rotate top 3 items.
 933              	*************************************/
 934 ???? FC350000 		_HEADER ROT,3,"ROT"
 934      03524F54 
 935 ???? 3868     		LDR	T0,[DSP]  // w2 
 936 ???? 3E60     		STR	TOS,[DSP]  // w3 replace w2 
 937 ???? 7E68     		LDR	TOS,[DSP,#4] // w1 replace w3 
 938 ???? 7860     		STR	T0,[DSP,#4] // w2 rpelace w1 
 939 ???? 98E4     		_NEXT
 940              	
 941              	/*********************************
 942              	 -ROT ( w1 w2 w3 -- w3 w1 w2 )
 943              	 left rotate top 3 elements 
 944              	********************************/
 945 ???? 70360000 		_HEADER NROT,4,"-ROT"
 945      042D524F 
 945      5400
 946 ???? 7868     		LDR T0,[DSP,#4]
 947 ???? 7E60     		STR TOS,[DSP,#4]	
 948 ???? 3E68     		LDR TOS,[DSP]
 949 ???? 3860     		STR T0,[DSP]
 950 ???? 8EE4     		_NEXT 
 951              	
 952              	/*********************************
 953              	    2DROP	( w1 w2 -- )
 954              	 	Drop top 2 items.
 955              	*********************************/
 956 ???? 82360000 		_HEADER DDROP,5,"2DROP"
 956      05324452 
 956      4F50
 957 ???? 57F8046B 		_POP
 958 ???? 57F8046B 		_POP
 959 ???? 84E4     		_NEXT 
 960              	
ARM GAS  forth.s 			page 133


 961              	/********************************
 962              		3DROP ( w1 w2 w3 -- )
 963              		drop top 3 items 
 964              	********************************/
 965 ???? 96360000 		_HEADER TDROP,5,"3DROP"
 965      05334452 
 965      4F50
 966 ???? 07F10807 	    add DSP,#8 
 967 ???? 57F8046B 	    _POP 
 968 ???? 7AE4     	    _NEXT 
 969              	
 970              	/***********************************
 971              	    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 972              	 	Duplicate top 2 items.
 973              	************************************/
 974 ???? AA360000 		_HEADER DDUP,4,"2DUP"
 974      04324455 
 974      5000
 975 ???? 3868     		LDR	T0,[DSP] // w1
 976 ???? 47F8046D 		STR	TOS,[DSP,#-4]! // push w2  
 977 ???? 47F8040D 		STR	T0,[DSP,#-4]! // push w1 
 978 ???? 6FE4     		_NEXT
 979              	
 980              	/******************************
 981              	    D+	( d1 d2 -- d3 )
 982              	 	Add top 2 double numbers.
 983              	******************************/
 984 ???? BE360000 		_HEADER DPLUS,2,"D+"
 984      02442B00 
 985 ???? 57F8045B 		LDR	WP,[DSP],#4
 986 ???? 57F8042B 		LDR	T2,[DSP],#4
 987 ???? 3B68     		LDR	T3,[DSP]
 988 ???? ED18     		ADDS	WP,WP,T3
 989 ???? 3D60     		STR	WP,[DSP]
 990 ???? 46EB0206 		ADC	TOS,TOS,T2
 991 ???? 61E4     		_NEXT
 992              	
 993              	/******************************
 994              		DABS ( d -- ud )
 995              		absolute value double 
 996              	*****************************/
 997 ???? D4360000 		_HEADER DABS,4,"DABS"
 997      04444142 
 997      530000BF 
 998 ???? 16F0004F 		tst TOS,#(1<<31)
 999 ???? 09D0     		beq 9f 
 1000 ???? 6FEA0606 		mvn TOS,TOS 
 1001 ???? 3D68     		ldr WP,[DSP]
 1002 ???? 6FEA0505 		mvn WP,WP 
 1003 ???? 0135     		adds WP,#1
 1004 ???? 3D60     		str WP,[DSP]
 1005 ???? 01D3     		bcc 9f 
 1006 ???? 06F10106 		add TOS,#1 
 1007 ???? 4DE4     	9:	_NEXT 
 1008              	
 1009              	/*****************************
 1010              	  UD> ( d1 d2 -- f )
ARM GAS  forth.s 			page 134


 1011              	  unsigned compare double d1 > d2 
 1012              	******************************/
 1013 ???? F0360000 		_HEADER UDGREAT,3,"UD>"
 1013      0355443E 
 1014 ???? 57F8045B 		ldr WP,[DSP],#4  // d1 lo 
 1015 ???? 03CF     		ldmfd DSP!,{T0,T1} // d2 hi,lo   
 1016 ???? B042     		cmp T0,TOS 
 1017 ???? 02D8     		bhi 1f
 1018 ???? 04D4     		bmi 2f  
 1019 ???? A942     		cmp T1,WP 
 1020 ???? 02D9     		bls 2f 
 1021 ???? 4FF0FF36 	1:	mov TOS,#-1 
 1022 ???? 3EE4     		_NEXT 
 1023 ???? 4FF00006 	2:  mov TOS,#0 
 1024 ???? 3BE4     		_NEXT 
 1025              	
 1026              	/******************************
 1027              		D0= ( d -- f )
 1028              		double 0= 
 1029              	*****************************/
 1030 ???? 18370000 		_HEADER DZEQUAL,3,"D0="
 1030      0344303D 
 1031 ???? 3046     		mov T0,TOS
 1032 ???? 57F8046B 		_POP 
 1033 ???? 46EA0006 		orr TOS,T0 
 1034 ???? 01D0     		beq 9f
 1035 ???? 6FF00006 		mvn TOS,#0 
 1036 ???? 2EE4     	9:	_NEXT 
 1037              	
 1038              	/*****************************
 1039              	    INVERT	 ( w -- !w )
 1040              	 	1"s complement.
 1041              	*****************************/
 1042 ???? 3C370000 		_HEADER INVER,6,"INVERT"
 1042      06494E56 
 1042      45525400 
 1042      00BF
 1043 ???? 6FEA0606 		MVN	TOS,TOS
 1044 ???? 24E4     		_NEXT
 1045              	
 1046              	/*****************************
 1047              	    NEGATE	( w -- -w )
 1048              	 	2's complement.
 1049              	***************************/
 1050 ???? 56370000 		_HEADER NEGAT,6,"NEGATE"
 1050      064E4547 
 1050      41544500 
 1050      00BF
 1051 ???? C6F10006 		RSB	TOS,TOS,#0
 1052 ???? 1AE4     		_NEXT
 1053              	
 1054              	/***************************
 1055              	    ABS	 ( w -- |w| )
 1056              	 	Absolute.
 1057              	**************************/
 1058 ???? 6A370000 		_HEADER ABSS,3,"ABS"
 1058      03414253 
ARM GAS  forth.s 			page 135


 1058      00BF
 1059 ???? 16F0004F 		TST	TOS,#0x80000000
 1060 ???? 18BF     		IT NE
 1061 ???? 7642     	    RSBNE   TOS,TOS,#0
 1062 ???? 10E4     		_NEXT
 1063              	
 1064              	/**************************
 1065              		CLZ ( n - n )
 1066              		count leading zeros 
 1067              	**************************/
 1068 ???? 7E370000 		_HEADER CLZ,3,"CLZ"
 1068      03434C5A 
 1068      00BF
 1069 ???? B6FA86F6 		clz TOS,TOS 
 1070 ???? 08E4     		_NEXT 
 1071              	
 1072              	/*************************
 1073              		CTZ ( n -- n )
 1074              		count trailing zeros 
 1075              	************************/
 1076 ???? 92370000 		_HEADER CTZ,3,"CTZ"
 1076      0343545A 
 1076      00BF
 1077 ???? 80EA0000 		eor T0,T0 
 1078 ???? 16F0010F 	1:  tst TOS,#1 
 1079 ???? 04D1     		bne 2f 
 1080 ???? 4FEA5606 		lsr TOS,#1 
 1081 ???? 00F10100 		add T0,#1 
 1082 ???? F7E7     		b 1b 
 1083 ???? 0646     	2:  mov TOS,T0 
 1084 ???? FFF7F7BB 		_NEXT 
 1085              	
 1086              	/**********************
 1087              	CORE EXTENSION 
 1088              		FALSE ( -- 0 )
 1089              		return false flag 
 1090              	***********************/
 1091 ???? A2370000 		_HEADER FALSE,5,"FALSE"
 1091      0546414C 
 1091      5345
 1092 ???? 47F8046D 		_PUSH 
 1093 ???? 86EA0606 		EOR TOS,TOS 
 1094 ???? FFF7ECBB 		_NEXT 
 1095              	
 1096              	/**********************
 1097              	CORE EXTENSION 
 1098              		TRUE ( -- -1 )
 1099              		return true flag 
 1100              	***********************/
 1101 ???? C6370000 		_HEADER TRUE,4,"TRUE"
 1101      04545255 
 1101      450000BF 
 1102 ???? 47F8046D 		_PUSH 
 1103 ???? 86EA0606 		EOR TOS,TOS
 1104 ???? 6FEA0606 		MVN TOS,TOS 
 1105 ???? FFF7DEBB 		_NEXT 
 1106              	
ARM GAS  forth.s 			page 136


 1107              	
 1108              	/*******************
 1109              	  0= ( w -- f )
 1110              	 TOS==0?
 1111              	*******************/
 1112 ???? DC370000 		_HEADER ZEQUAL,2,"0="
 1112      02303D00 
 1113 ???? 1EB9     		cbnz TOS,1f
 1114 ???? 4FF0FF36 		mov TOS,#-1
 1115 ???? FFF7D5BB 		_NEXT 
 1116 ???? 86EA0606 	1:  eor TOS,TOS,TOS  
 1117 ???? FFF7D1BB 		_NEXT 	
 1118              	
 1119              	/*********************
 1120              	    =	 ( w w -- t )
 1121              	 	Equal?
 1122              	*********************/
 1123 ???? F8370000 		_HEADER EQUAL,1,"="
 1123      013D
 1124 ???? 57F8045B 		LDR	WP,[DSP],#4
 1125 ???? AE42     		CMP	TOS,WP
 1126 ???? 0CBF     		ITE EQ 
 1127 ???? 6FF00006 	    MVNEQ	TOS,#0
 1128 ???? 0026     		MOVNE	TOS,#0
 1129 ???? FFF7C5BB 		_NEXT
 1130              	
 1131              	/************************
 1132              		<> ( w w -- f )
 1133              		different?
 1134              	************************/
 1135 ???? 12380000 		_HEADER DIFF,2,"<>"
 1135      023C3E00 
 1135      00BF
 1136 ???? 3046     		mov T0,TOS 
 1137 ???? 57F8046B 		_POP 
 1138 ???? 86EA0006 		eor TOS,T0
 1139 ???? B6FA86F0 		clz T0,TOS 
 1140 ???? 06FA00F6 		lsl TOS,T0 
 1141 ???? 4FEAE676 		asr TOS,#31 
 1142 ???? FFF7B3BB 		_NEXT 
 1143              	
 1144              	/************************
 1145              	    U<	 ( w w -- t )
 1146              	 	Unsigned less?
 1147              	*************************/
 1148 ???? 2A380000 		_HEADER ULESS,2,"U<"
 1148      02553C00 
 1148      00BF
 1149 ???? 57F8045B 		LDR	WP,[DSP],#4
 1150 ???? B542     		CMP	WP,TOS
 1151 ???? 34BF     		ITE CC 
 1152 ???? 6FF00006 		MVNCC	TOS,#0
 1153 ???? 0026     		MOVCS	TOS,#0
 1154 ???? FFF7A5BB 		_NEXT
 1155              	
 1156              	/**********************
 1157              	    <	( w w -- t )
ARM GAS  forth.s 			page 137


 1158              	 	Less?
 1159              	**********************/
 1160 ???? 4E380000 		_HEADER LESS,1,"<"
 1160      013C
 1161 ???? 57F8045B 		LDR	WP,[DSP],#4
 1162 ???? B542     		CMP	WP,TOS
 1163 ???? B4BF     	    ITE LT
 1164 ???? 6FF00006 		MVNLT	TOS,#0
 1165 ???? 0026     		MOVGE	TOS,#0
 1166 ???? FFF799BB 		_NEXT 
 1167              	
 1168              	/**********************
 1169              		U> ( u u -- t|f )
 1170              	    unsigned greater 
 1171              	**********************/
 1172 ???? 6A380000 		_HEADER UGREAT,2,"U>"
 1172      02553E00 
 1172      00BF
 1173 ???? 57F8045B 		LDR WP,[DSP],#4 
 1174 ???? AE42     		CMP TOS,WP 
 1175 ???? 34BF     		ITE CC  
 1176 ???? 6FF00006 		MVNCC TOS,#0 
 1177 ???? 0026     		MOVCS TOS,#0
 1178 ???? FFF78BBB 		_NEXT 
 1179              	
 1180              	/***********************
 1181              	    >	( w w -- t )
 1182              	 	greater?
 1183              	***********************/
 1184 ???? 82380000 		_HEADER GREAT,1,">"
 1184      013E
 1185 ???? 57F8045B 		LDR	WP,[DSP],#4
 1186 ???? B542     		CMP	WP,TOS
 1187 ???? CCBF     		ITE GT
 1188 ???? 6FF00006 	    MVNGT	TOS,#0
 1189 ???? 0026     		MOVLE	TOS,#0
 1190 ???? FFF77FBB 		_NEXT
 1191              	
 1192              	/***************************
 1193              	    MAX	 ( w w -- max )
 1194              	 	Leave maximum.
 1195              	***************************/
 1196 ???? 9E380000 		_HEADER MAX,3,"MAX"
 1196      034D4158 
 1196      00BF
 1197 ???? 57F8045B 		LDR	WP,[DSP],#4
 1198 ???? B542     		CMP	WP,TOS
 1199 ???? C8BF     		IT GT 
 1200 ???? 2E46     		MOVGT	TOS,WP
 1201 ???? FFF773BB 		_NEXT 
 1202              	
 1203              	/**************************
 1204              	    MIN	 ( w w -- min )
 1205              	 	Leave minimum.
 1206              	**************************/
 1207 ???? B6380000 		_HEADER MIN,3,"MIN"
 1207      034D494E 
ARM GAS  forth.s 			page 138


 1207      00BF
 1208 ???? 57F8045B 		LDR	WP,[DSP],#4
 1209 ???? B542     		CMP	WP,TOS
 1210 ???? B8BF     		IT LT
 1211 ???? 2E46     		MOVLT	TOS,WP
 1212 ???? FFF767BB 		_NEXT
 1213              	
 1214              	/***********************
 1215              	    +!	 ( w a -- )
 1216              	 	Add to memory.
 1217              	***********************/
 1218 ???? CE380000 		_HEADER PSTOR,2,"+!"
 1218      022B2100 
 1218      00BF
 1219 ???? 57F8045B 		LDR	WP,[DSP],#4
 1220 ???? 3268     		LDR	T2,[TOS]
 1221 ???? 2A44     		ADD	T2,T2,WP
 1222 ???? 3260     		STR	T2,[TOS]
 1223 ???? 57F8046B 		_POP
 1224 ???? FFF759BB 		_NEXT
 1225              	
 1226              	/************************
 1227              	    2!	 ( d a -- )
 1228              	 	Store double number.
 1229              	*************************/
 1230 ???? E6380000 		_HEADER DSTOR,2,"2!"
 1230      02322100 
 1230      00BF
 1231 ???? 57F8045B 		LDR	WP,[DSP],#4
 1232 ???? 57F8042B 		LDR	T2,[DSP],#4
 1233 ???? 46F8045B 		STR	WP,[TOS],#4
 1234 ???? 3260     		STR	T2,[TOS]
 1235 ???? 57F8046B 		_POP
 1236 ???? FFF749BB 		_NEXT
 1237              	
 1238              	/************************
 1239              	    2@	 ( a -- d )
 1240              	 	Fetch double number.
 1241              	************************/
 1242 ???? 02390000 		_HEADER DAT,2,"2@"
 1242      02324000 
 1242      00BF
 1243 ???? 7568     		LDR	WP,[TOS,#4]
 1244 ???? 47F8045D 		STR	WP,[DSP,#-4]!
 1245 ???? 3668     		LDR	TOS,[TOS]
 1246 ???? FFF73EBB 		_NEXT
 1247              	
 1248              	/***************************
 1249              	    COUNT	( b -- b+1 c )
 1250              	 	Fetch length of string.
 1251              	****************************/
 1252 ???? 22390000 		_HEADER COUNT,5,"COUNT"
 1252      05434F55 
 1252      4E5400BF 
 1253 ???? 16F8015B 		LDRB	WP,[TOS],#1
 1254 ???? 47F8046D 		_PUSH
 1255 ???? 2E46     		MOV	TOS,WP
ARM GAS  forth.s 			page 139


 1256 ???? FFF731BB 		_NEXT
 1257              	
 1258              	/******************************
 1259              	    DNEGATE	( d -- -d )
 1260              	 	Negate double number.
 1261              	**************************/
 1262 ???? 38390000 		_HEADER DNEGA,7,"DNEGATE"
 1262      07444E45 
 1262      47415445 
 1262      00BF
 1263 ???? 3D68     		LDR	WP,[DSP]
 1264 ???? A2EB0202 		SUB	T2,T2,T2
 1265 ???? 551B     		SUBS WP,T2,WP
 1266 ???? 62EB0606 		SBC	TOS,T2,TOS
 1267 ???? 3D60     		STR	WP,[DSP]
 1268 ???? FFF721BB 		_NEXT
 1269              	
 1270              	/******************************
 1271              	  System and user variables
 1272              	******************************/
 1273              	
 1274              	/***********************
 1275              	  system variables 
 1276              	***********************/
 1277              	
 1278              	/***********************
 1279              		STATE ( -- a )
 1280              		compilation state 
 1281              		0 -> interpret
 1282              		-1 -> compile 
 1283              	************************/
 1284 ???? 52390000 		_HEADER STATE,5,"STATE"
 1284      05535441 
 1284      5445
 1285 ???? 47F8046D 		_PUSH 
 1286 ???? 04F1B406 		ADD TOS,UP,#CSTATE 
 1287 ???? FFF716BB 		_NEXT 
 1288              	
 1289              	/**************************
 1290              	 SEED ( -- a)
 1291              	 return PRNG seed address 
 1292              	**************************/
 1293 ???? 72390000 		_HEADER SEED,4,"SEED"
 1293      04534545 
 1293      440000BF 
 1294 ???? 47F8046D 		_PUSH 
 1295 ???? 04F10406 		ADD TOS,UP,#RNDSEED
 1296 ???? FFF70ABB 		_NEXT 	
 1297              	
 1298              	/****************************************
 1299              	  TICKS ( -- u )
 1300              	 return milliseconds since last reset or
 1301              	 power up. 
 1302              	****************************************/
 1303 ???? 88390000 		_HEADER MSEC,5,"TICKS"
 1303      05544943 
 1303      4B5300BF 
ARM GAS  forth.s 			page 140


 1304 ???? 47F8046D 	    _PUSH
 1305 ???? A668     	    LDR TOS,[UP,#TICKS]
 1306 ???? FFF7FFBA 	    _NEXT 
 1307              	
 1308              	/*************************
 1309              	 TIMER ( -- a )
 1310              	 count down timer 
 1311              	**********************/
 1312 ???? A0390000 		_HEADER TIMER,5,"TIMER"
 1312      0554494D 
 1312      4552
 1313 ???? 47F8046D 		 _PUSH 
 1314 ???? 04F10C06 	    ADD TOS,UP,#CD_TIMER
 1315 ???? FFF7F4BA 	    _NEXT
 1316              	
 1317              	/*****************************
 1318              	    'BOOT	 ( -- a )
 1319              	 	boot up application vector 
 1320              	*****************************/
 1321 ???? B6390000 		_HEADER TBOOT,5,"'BOOT"
 1321      0527424F 
 1321      4F5400BF 
 1322 ???? 47F8046D 		_PUSH
 1323 ???? 04F11006 		ADD	TOS,UP,#BOOT 
 1324 ???? FFF7E8BA 		_NEXT
 1325              		
 1326              	/********************************************	
 1327              	    BASE	( -- a )
 1328              	 	Storage of the radix base for numeric I/O.
 1329              	**********************************************/
 1330 ???? CC390000 		_HEADER BASE,4,"BASE"
 1330      04424153 
 1330      450000BF 
 1331 ???? 47F8046D 		_PUSH
 1332 ???? 04F11C06 		ADD	TOS,UP,#NBASE
 1333 ???? FFF7DCBA 		_NEXT
 1334              	
 1335              	/***********************************************
 1336              		BCHAR ( -- flag )
 1337              		boolean variable
 1338              		if set base char include in convertion 
 1339              		of integer to string.  
 1340              	************************************************/
 1341 ???? E4390000 			_HEADER BCHR,5,"BCHAR"
 1341      05424348 
 1341      415200BF 
 1342 ???? 47F8046D 			_PUSH 
 1343 ???? 04F12006 			ADD TOS,UP,#BCHAR 
 1344 ???? FFF7D0BA 			_NEXT 
 1345              	
 1346              	/*****************************************************
 1347              	    temp	 ( -- a )
 1348              	 	A temporary storage location used in parse and find.
 1349              	hidden word for internal use
 1350              	********************************************************/
 1351              	TEMP:
 1352 ???? 47F8046D 		_PUSH
ARM GAS  forth.s 			page 141


 1353 ???? 04F12406 		ADD	TOS,UP,#TMP
 1354 ???? FFF7CABA 		_NEXT
 1355              	
 1356              	/*******************************************
 1357              	    SPAN	( -- a )
 1358              	 	Hold character count received by EXPECT.
 1359              	********************************************/
 1360 ???? FC390000 		_HEADER SPAN,4,"SPAN"
 1360      04535041 
 1360      4E0000BF 
 1361 ???? 47F8046D 		_PUSH
 1362 ???? 04F12806 		ADD	TOS,UP,#CSPAN
 1363 ???? FFF7BEBA 		_NEXT
 1364              	
 1365              	/***********************************************************
 1366              	    >IN	 ( -- a )
 1367              	 	Hold the character pointer while parsing input stream.
 1368              	***********************************************************/
 1369 ???? 203A0000 		_HEADER INN,3,">IN"
 1369      033E494E 
 1370 ???? 47F8046D 		_PUSH
 1371 ???? 04F12C06 		ADD	TOS,UP,#TOIN
 1372 ???? FFF7B4BA 		_NEXT
 1373              	
 1374              	/**************************************
 1375              	    #TIB	( -- a )
 1376              	 	Hold the current count and address 
 1377              		of the terminal input buffer.
 1378              	**************************************/
 1379 ???? 383A0000 		_HEADER NTIB,4,"#TIB"
 1379      04235449 
 1379      420000BF 
 1380 ???? 47F8046D 		_PUSH
 1381 ???? 04F13006 		ADD	TOS,UP,#NTIBB
 1382 ???? FFF7A8BA 		_NEXT
 1383              	
 1384              	/******************************
 1385              	    'EVAL	( -- a )
 1386              	 	Execution vector of EVAL.
 1387              	*******************************/
 1388 ???? 4C3A0000 		_HEADER TEVAL,5,"'EVAL"
 1388      05274556 
 1388      414C00BF 
 1389 ???? 47F8046D 		_PUSH
 1390 ???? 04F13C06 		ADD	TOS,UP,#EVAL
 1391 ???? FFF79CBA 		_NEXT
 1392              	
 1393              	/*********************************
 1394              	    HLD	 ( -- a )
 1395              	 	Hold a pointer in building a 
 1396              		numeric output string.
 1397              	*********************************/
 1398 ???? 643A0000 		_HEADER HLD,3,"HLD"
 1398      03484C44 
 1399 ???? 47F8046D 		_PUSH
 1400 ???? 04F14006 		ADD	TOS,UP,#VHOLD
 1401 ???? FFF792BA 		_NEXT
ARM GAS  forth.s 			page 142


 1402              	
 1403              	/**********************************
 1404              	    CONTEXT	( -- a )
 1405              	 	A area to specify vocabulary 
 1406              		search order.
 1407              	**********************************/
 1408 ???? 7C3A0000 		_HEADER CNTXT,7,"CONTEXT"
 1408      07434F4E 
 1408      54455854 
 1409              	CRRNT:
 1410 ???? 47F8046D 		_PUSH
 1411 ???? 04F14406 		ADD	TOS,UP,#CTXT
 1412 ???? FFF786BA 		_NEXT
 1413              	
 1414              	/******************************
 1415              	    CP	( -- a )
 1416              	 	Point to top free area  
 1417              		in user RAM. 
 1418              	******************************/
 1419 ???? 903A0000 		_HEADER CPP,2,"CP"
 1419      02435000 
 1420 ???? 47F8046D 		_PUSH
 1421 ???? 04F14C06 		ADD	TOS,UP,#USER_CTOP
 1422 ???? FFF77CBA 		_NEXT
 1423              	
 1424              	/*****************************
 1425              	CORE EXT 
 1426              		UNUSED ( -- n )
 1427              		return free bytes in 
 1428              		user RAM 
 1429              	*****************************/
 1430 ???? A83A0000 		_HEADER UNUSED,6,"UNUSED"
 1430      06554E55 
 1430      53454400 
 1431 ???? 47F8046D 		_PUSH 
 1432 ???? E06C     		LDR T0,[UP,#USER_CTOP]
 1433 ???? 47F22C16 		_MOV32 TOS,DEND 
 1433      C2F20106 
 1434 ???? A6EB0006 		SUB TOS,T0 
 1435 ???? FFF76BBA 		_NEXT 
 1436              	
 1437              	/****************************
 1438              	   FCP ( -- a )
 1439              	  Point ot top of Forth 
 1440              	  system dictionary
 1441              	****************************/
 1442 ???? BC3A0000 		_HEADER FCP,3,"FCP"
 1442      03464350 
 1442      00BF
 1443 ???? 47F8046D 		_PUSH 
 1444 ???? 04F14806 		ADD TOS,UP,#FORTH_CTOP 
 1445 ???? FFF760BA 		_NEXT 
 1446              	
 1447              	/***************************
 1448              	    LAST	( -- a )
 1449              	 	Point to the last name 
 1450              		in the dictionary.
ARM GAS  forth.s 			page 143


 1451              	***************************/
 1452 ???? DE3A0000 		_HEADER LAST,4,"LAST"
 1452      044C4153 
 1452      540000BF 
 1453 ???? 47F8046D 		_PUSH
 1454 ???? 04F15006 		ADD	TOS,UP,#LASTN
 1455 ???? FFF754BA 		_NEXT
 1456              	
 1457              	
 1458              	/***********************
 1459              		system constants 
 1460              	***********************/
 1461              	
 1462              	/********************************
 1463              		USER-BEGIN ( -- a )
 1464              	  where user area begin in RAM
 1465              	********************************/
 1466 ???? F43A0000 		_HEADER USER_BEGIN,10,"USER-BEGIN"
 1466      0A555345 
 1466      522D4245 
 1466      47494E00 
 1467 ???? 47F8046D 		_PUSH 
 1468 ???? DFF80460 		ldr TOS,USR_BGN_ADR 
 1469 ???? FFF746BA 		_NEXT 
 1470              	USR_BGN_ADR:
 1471 ???? 12050020 	.word  DTOP 
 1472              	
 1473              	/*********************************
 1474              	  USER_END ( -- a )
 1475              	  where user area end in RAM 
 1476              	******************************/
 1477 ???? 0C3B0000 		_HEADER USER_END,8,"USER-END"
 1477      08555345 
 1477      522D454E 
 1477      440000BF 
 1478 ???? 47F8046D 		_PUSH 
 1479 ???? DFF80460 		ldr TOS,USER_END_ADR 
 1480 ???? FFF736BA 		_NEXT 
 1481              	USER_END_ADR:
 1482 ???? 2C710120 		.word DEND 
 1483              	
 1484              	/********************************
 1485              		MAX-INT ( -- n+ )
 1486              		maximum integer 
 1487              	*******************************/
 1488 ???? 2C3B0000 		_HEADER MAXINT,7,"MAX-INT"
 1488      074D4158 
 1488      2D494E54 
 1489 ???? 47F8046D 		_PUSH 
 1490 ???? 4FF6FF76 		_MOV32 TOS, 0x7FFFFFFF
 1490      C7F6FF76 
 1491 ???? FFF726BA 		_NEXT 
 1492              	
 1493              	/******************************
 1494              		MIN-INT ( -- n- )
 1495              		minimum integer 
 1496              	******************************/
ARM GAS  forth.s 			page 144


 1497 ???? 4C3B0000 		_HEADER MININT,7,"MIN-INT"
 1497      074D494E 
 1497      2D494E54 
 1498 ???? 47F8046D 		_PUSH 
 1499 ???? 4FF00006 		_MOV32 TOS, 0x80000000
 1499      C8F20006 
 1500 ???? FFF718BA 		_NEXT 
 1501              	
 1502              	/******************************
 1503              		MAX-UINT ( -- u )
 1504              		maximum unsigned integer 
 1505              	******************************/
 1506 ???? 683B0000 		_HEADER MAXUINT,8,"MAX-UINT"
 1506      084D4158 
 1506      2D55494E 
 1506      540000BF 
 1507 ???? 47F8046D 		_PUSH
 1508 ???? 4FF6FF76 		_MOV32 TOS, 0xFFFFFFFF 
 1508      CFF6FF76 
 1509 ???? FFF708BA 		_NEXT 
 1510              	
 1511              	
 1512              	/* *********************
 1513              	  Common functions
 1514              	***********************/
 1515              	
 1516              	/********************************
 1517              	    WITHIN	( u ul uh -- t )
 1518              	 	Return true if u is within 
 1519              		the range of ul and uh.
 1520              	********************************/
 1521 ???? 843B0000 		_HEADER WITHI,6,"WITHIN"
 1521      06574954 
 1521      48494E00 
 1522 ???? 504700BF 		_NEST
 1523 ???? D1330000 		_ADR	OVER
 1524 ???? DD340000 		_ADR	SUBB
 1525 ???? FD320000 		_ADR	TOR
 1526 ???? DD340000 		_ADR	SUBB
 1527 ???? 99320000 		_ADR	RFROM
 1528 ???? 55380000 		_ADR	ULESS
 1529 ???? B72F0000 		_UNNEST
 1530              	
 1531              	//  Divide
 1532              	
 1533              	/*************************************
 1534              	    UM/MOD	( udl udh u -- ur uq )
 1535              	 	Unsigned divide of a double by a 
 1536              		single. Return mod and quotient.
 1537              	**************************************/
 1538 ???? A43B0000 		_HEADER UMMOD,6,"UM/MOD"
 1538      06554D2F 
 1538      4D4F4400 
 1539 ???? 4FF00103 		MOV	T3,#1
 1540 ???? 57F8045B 		LDR	WP,[DSP],#4
 1541 ???? 3A68     		LDR	T2,[DSP]
 1542              	UMMOD0:
ARM GAS  forth.s 			page 145


 1543 ???? 9218     		ADDS	T2,T2,T2
 1544 ???? 6D41     		ADCS	WP,WP,WP
 1545 ???? 04D3     		BCC	UMMOD1
 1546 ???? A5EB0605 		SUB	WP,WP,TOS
 1547 ???? 02F10102 		ADD	T2,T2,#1
 1548 ???? 04E0     		B UMMOD2
 1549              	UMMOD1:
 1550 ???? AD1B     		SUBS	WP,WP,TOS 
 1551 ???? 28BF     		IT CS 
 1552 ???? 0132     		ADDCS	T2,T2,#1
 1553 ???? 00D2     		BCS	UMMOD2
 1554 ???? 3544     		ADD	WP,WP,TOS
 1555              	UMMOD2:
 1556 ???? DB18     		ADDS	T3,T3,T3
 1557 ???? F0D3     		BCC	UMMOD0
 1558 ???? 1646     		MOV	TOS,T2
 1559 ???? 3D60     		STR	WP,[DSP]
 1560 ???? FFF7D4B9 		_NEXT
 1561              	
 1562              	/****************************
 1563              	    FM/MOD	( d n -- r q )
 1564              	 	Signed floored divide 
 1565              		of double by single. 
 1566              		Return mod and quotient.
 1567              	****************************/
 1568 ???? D03B0000 		_HEADER MSMOD,6,"FM/MOD"
 1568      06464D2F 
 1568      4D4F4400 
 1569 ???? 504700BF 		_NEST
 1570 ???? 91330000 		_ADR	DUPP
 1571 ???? 01340000 		_ADR	ZLESS
 1572 ???? 91330000 		_ADR	DUPP
 1573 ???? FD320000 		_ADR	TOR
 1574 ???? 17320000 		_QBRAN MMOD1
 1574      403C0000 
 1575 ???? 75370000 		_ADR	NEGAT
 1576 ???? FD320000 		_ADR	TOR
 1577 ???? 5D390000 		_ADR	DNEGA
 1578 ???? 99320000 		_ADR	RFROM
 1579              	MMOD1:
 1580 ???? FD320000 		_ADR	TOR
 1581 ???? 91330000 		_ADR	DUPP
 1582 ???? 01340000 		_ADR	ZLESS
 1583 ???? 17320000 		_QBRAN MMOD2
 1583      5C3C0000 
 1584 ???? CD320000 		_ADR	RAT
 1585 ???? CD340000 		_ADR	PLUS
 1586              	MMOD2:
 1587 ???? 99320000 		_ADR	RFROM
 1588 ???? D93B0000 		_ADR	UMMOD
 1589 ???? 99320000 		_ADR	RFROM
 1590 ???? 17320000 		_QBRAN	MMOD3
 1590      7C3C0000 
 1591 ???? A1330000 		_ADR	SWAP
 1592 ???? 75370000 		_ADR	NEGAT
 1593 ???? A1330000 		_ADR	SWAP
 1594              	MMOD3:   
ARM GAS  forth.s 			page 146


 1595 ???? B72F0000 		_UNNEST
 1596              	
 1597              	/****************************
 1598              		SM/REM (d n1 -- n2 n3 )
 1599              	    symetric signed division 
 1600              		double by single 
 1601              	input:
 1602              		d   signed double 
 1603              		n1  signed single 
 1604              	output: 
 1605              		n2  signed remainder 
 1606              		n3  signed quotient 
 1607              	****************************/
 1608 ???? 0C3C0000 		_HEADER SMSLSHREM,6,"SM/REM"
 1608      06534D2F 
 1608      52454D00 
 1609 ???? 504700BF 		_NEST 
 1610 ???? 91330000 		_ADR DUPP 
 1611 ???? 01340000 		_ADR ZLESS 
 1612 ???? 91330000 		_ADR DUPP 
 1613 ???? FD320000 		_ADR TOR   // divisor sign 
 1614 ???? 17320000 		_QBRAN 1f 
 1614      AC3C0000 
 1615 ???? 75370000 		_ADR NEGAT 
 1616 ???? D1330000 	1:  _ADR OVER 
 1617 ???? 01340000 		_ADR ZLESS 
 1618 ???? 91330000 		_ADR DUPP 
 1619 ???? FD320000 		_ADR TOR  // divident sign 
 1620 ???? 17320000 		_QBRAN  1f 
 1620      D03C0000 
 1621 ???? FD320000 		_ADR TOR 
 1622 ???? 5D390000 		_ADR DNEGA
 1623 ???? 99320000 		_ADR RFROM 
 1624 ???? D93B0000 	1:  _ADR UMMOD  // rem quot  
 1625 ???? 99320000 		_ADR RFROM 
 1626 ???? CD320000 		_ADR RAT 
 1627 ???? 75340000 		_ADR XORR
 1628 ???? 17320000 		_QBRAN 1f
 1628      EC3C0000 
 1629 ???? 75370000 		_ADR NEGAT 
 1630 ???? 91330000 	1:  _ADR DUPP 
 1631 ???? 01340000 		_ADR ZLESS 
 1632 ???? 99320000 		_ADR RFROM 
 1633 ???? 75340000 		_ADR XORR 
 1634 ???? 17320000 		_QBRAN 1f 
 1634      103D0000 
 1635 ???? A1330000 		_ADR SWAP 
 1636 ???? 75370000 		_ADR NEGAT 
 1637 ???? A1330000 	    _ADR SWAP 
 1638 ???? B72F0000 	1:  _UNNEST 
 1639              	
 1640              	
 1641              	/****************************
 1642              		S>D ( n -- d )
 1643              		convert single to double 
 1644              	*****************************/
 1645 ???? 843C0000 		_HEADER STOD,3,"S>D"
ARM GAS  forth.s 			page 147


 1645      03533E44 
 1646 ???? 47F8046D 		_PUSH 
 1647 ???? 4FEAE676 		ASR TOS,#31
 1648 ???? FFF744B9 		_NEXT 
 1649              	
 1650              	/****************************
 1651              		D2* ( d -- d<<1 )
 1652              		double * 2 
 1653              	***************************/
 1654 ???? 183D0000 		_HEADER D2STAR,3,"D2*"
 1654      0344322A 
 1655 ???? 3868     		ldr T0,[DSP]
 1656 ???? 4000     		lsls T0,#1
 1657 ???? 3860     		str T0,[DSP]
 1658 ???? 4FEA4606 		lsl TOS,#1
 1659 ???? 46F10006 		adc TOS,#0
 1660 ???? FFF737B9 		_NEXT 
 1661              	
 1662              	/****************************
 1663              		D2/  ( d -- d>>1 )
 1664              		double signed divide by 2 
 1665              	*****************************/
 1666 ???? 2C3D0000 		_HEADER D2SL,3,"D2/"
 1666      0344322F 
 1666      00BF
 1667 ???? 3868     		ldr T0,[DSP]
 1668 ???? 7610     		asrs TOS,#1
 1669 ???? 4FEA3000 		rrx T0,T0 
 1670 ???? 3860     		str T0,[DSP]
 1671 ???? FFF72BB9 		_NEXT 
 1672              	
 1673              	/***************************
 1674              		D/MOD  ( d+ n+ - r+ qd+ )
 1675              		unsigned double division
 1676              		and modulo 
 1677              		output:
 1678              			qd+ = d+ / n+
 1679              			r+ = qd+ - (d+ * n+ )
 1680              	***************************/
 1681 ???? 463D0000 		_HEADER DSLMOD,5,"D/MOD"
 1681      05442F4D 
 1681      4F44
 1682 ???? 3D68     		ldr WP,[DSP]  // d+ high 
 1683 ???? 7868     		ldr T0,[DSP,#4]   // d+ low, d+ = WP:T0, remainder WP
 1684 ???? 4FF02002 		mov T2,#32 // shift counter  
 1685 ???? 81EA0101 		eor T1,T1 // quotient T0:T1  
 1686 ???? 25B9     		cbnz WP,1f    
 1687 ???? 82EA0202 		eor T2,T2 // nos shifting required 
 1688 ???? 0546     		mov WP,T0 
 1689 ???? 80EA0000 		eor T0,T0 
 1690 ???? 4AB1     	1:  cbz T2,2f   // shift divident for msb at WP:31 
 1691 ???? 15F0004F 	    tst WP,#(1<<31) 
 1692 ???? 06D1     		bne 2f
 1693 ???? 4918     		adds T1,T1,T1 
 1694 ???? 4041     		adcs T0,T0,T0 
 1695 ???? 45EB0505 		adc WP,WP,WP 
 1696 ???? A2F10102 		sub T2,#1 
ARM GAS  forth.s 			page 148


 1697 ???? F4E7     		b 1b 
 1698 ???? B5FBF6F3 	2:  udiv T3,WP,TOS
 1699 ???? 41EA0301 		orr T1,T3   // append partial quotient 
 1700 ???? 06FB03F3 		mul T3,TOS
 1701 ???? A5EB0305 		sub WP,T3 //remainder 
 1702 ???? 02B1     		cbz T2,8f 
 1703 ???? EAE7     		b 1b 
 1704 ???? 7D60     	8:	str WP,[DSP,#4] // remainder 
 1705 ???? 3960     		str T1,[DSP]  // q lo 
 1706 ???? 0646     		mov TOS,T0  // q hi 		
 1707 ???? FFF700B9 		_NEXT 
 1708              	
 1709              	
 1710              	/****************************
 1711              		D/  ( ud u -- udq )
 1712              		divide unsigned double 
 1713              		by unsigned single 
 1714              		return double quotient
 1715              		rounded to nearest integer 
 1716              	****************************/
 1717 ???? 5E3D0000 		_HEADER DSLASH,2,"D/"
 1717      02442F00 
 1718 ???? 504700BF 		_NEST 
 1719 ???? 91330000 		_ADR DUPP 
 1720 ???? D7310000 		_DOLIT 1 
 1720      01000000 
 1721 ???? A5340000 		_ADR RSHIFT 
 1722 ???? FD320000 		_ADR TOR 
 1723 ???? 653D0000 		_ADR DSLMOD 
 1724 ???? 75360000 		_ADR ROT 
 1725 ???? 99320000 		_ADR RFROM 
 1726 ???? A1380000 		_ADR GREAT 
 1727 ???? 17320000 		_QBRAN 9f
 1727      F83D0000 
 1728 ???? D7310000 		_DOLIT 1 
 1728      01000000 
 1729 ???? 1D3D0000 		_ADR STOD 
 1730 ???? D9360000 		_ADR DPLUS 
 1731 ???? B72F0000 	9:	_UNNEST 
 1732              	
 1733              	
 1734              	/****************************
 1735              		D* ( d s -- d )
 1736              	    multiply a double 
 1737              		by a single 
 1738              	****************************/
 1739 ???? B43D0000 		_HEADER DSTAR,2,"D*"
 1739      02442A00 
 1740              	/*
 1741              		_NEST 
 1742              		_ADR NROT 
 1743              		_ADR DUPP 
 1744              		_ADR TOR 
 1745              		_ADR DABS
 1746              		_ADR SWAP  
 1747              		_ADR ROT   
 1748              		_ADR DUPP
ARM GAS  forth.s 			page 149


 1749              		_ADR TOR
 1750              		_ADR MSTAR
 1751              		_ADR ROT
 1752              		_ADR RFROM 
 1753              		_ADR STAR 
 1754              		_ADR PLUS
 1755              		_ADR RFROM 
 1756              		_ADR ZLESS 
 1757              		_QBRAN 9f
 1758              		_ADR DNEGA   
 1759              	9:	_UNNEST 
 1760              	*/
 1761 ???? 57F8040B 		ldr T0,[DSP],#4
 1762 ???? 3968     		ldr T1,[DSP]
 1763 ???? 3860     		str T0,[DSP] 
 1764 ???? 83EA0303 		eor T3,T3 
 1765 ???? 10F0004F 		tst T0,#(1<<31)
 1766 ???? 02D0     		beq 1f 
 1767              		// DNEGATE 
 1768 ???? 591A     		subs T1,T3,T1  
 1769 ???? 63EB0000 		sbc T0,T3,T0 
 1770 ???? 81FB0621 	1:	smull  T2,T1,T1,TOS // partial product 
 1771 ???? 00FB06F6 		mul TOS,T0,TOS // second partial product 
 1772 ???? 0E44     		add TOS,T1  // TOS:T2 product  
 1773 ???? 3868     		ldr r0,[DSP]
 1774 ???? 10F0004F 		tst T0,#(1<<31)
 1775 ???? 02D0     		beq 2f 
 1776              		// DNEGATE product 
 1777 ???? 9A1A     		subs T2,T3,T2  
 1778 ???? 63EB0606 		sbc TOS,T3,TOS 
 1779 ???? 3A60     	2:  str T2,[DSP]
 1780 ???? FFF7BBB8 		_NEXT 
 1781              	
 1782              	
 1783              	/****************************
 1784              	   /MOD	( n n -- r q )
 1785              		Signed divide. Return
 1786              		mod and quotient.
 1787              	****************************/
 1788 ???? 003E0000 		_HEADER SLMOD,4,"/MOD"
 1788      042F4D4F 
 1788      4400
 1789 ???? 504700BF 		_NEST
 1790 ???? D1330000 		_ADR	OVER
 1791 ???? 01340000 		_ADR	ZLESS
 1792 ???? A1330000 		_ADR	SWAP
 1793 ???? 153C0000 		_ADR	MSMOD
 1794 ???? B72F0000 		_UNNEST
 1795              	
 1796              	/**************************
 1797              	    MOD	 ( n n -- r )
 1798              	 	Signed divide. Return
 1799              		mod only.
 1800              	**************************/
 1801 ???? 3E3E0000 		_HEADER MODD,3,"MOD"
 1801      034D4F44 
 1802 ???? 504700BF 		_NEST
ARM GAS  forth.s 			page 150


 1803 ???? 453E0000 		_ADR	SLMOD
 1804 ???? 71330000 		_ADR	DROP
 1805 ???? B72F0000 		_UNNEST
 1806              	
 1807              	/*************************
 1808              	    /	   ( n n -- q )
 1809              	 	Signed divide. Return
 1810              		quotient only.
 1811              	**************************/
 1812 ???? 603E0000 		_HEADER SLASH,1,"/"
 1812      012F00BF 
 1813 ???? 504700BF 		_NEST
 1814 ???? 453E0000 		_ADR	SLMOD
 1815 ???? A1330000 		_ADR	SWAP
 1816 ???? 71330000 		_ADR	DROP
 1817 ???? B72F0000 		_UNNEST
 1818              	
 1819              	//******************************
 1820              	//   */MOD	( n1 n2 n3 -- r q )
 1821              	/*   Multiply n1 and n2, then 
 1822              	   divide by n3. Return 
 1823              	   mod and quotient.
 1824              	******************************/
 1825 ???? 783E0000 		_HEADER SSMOD,5,"*/MOD"
 1825      052A2F4D 
 1825      4F4400BF 
 1826 ???? 504700BF 		_NEST
 1827 ???? FD320000 		_ADR	TOR
 1828 ???? 15350000 		_ADR	MSTAR
 1829 ???? 99320000 		_ADR	RFROM
 1830 ???? 153C0000 		_ADR	MSMOD
 1831 ???? B72F0000 		_UNNEST
 1832              	
 1833              	//*******************************
 1834              	//  */ ( n1 n2 n3 -- q )
 1835              	/* 	Multiply n1 by n2, then 
 1836              		divide by n3. Return quotient
 1837              		only.
 1838              	*******************************/
 1839 ???? 943E0000 		_HEADER STASL,2,"*/"
 1839      022A2F00 
 1840 ???? 504700BF 		_NEST
 1841 ???? 9D3E0000 		_ADR	SSMOD
 1842 ???? A1330000 		_ADR	SWAP
 1843 ???? 71330000 		_ADR	DROP
 1844 ???? B72F0000 		_UNNEST
 1845              	
 1846              	/*******************
 1847              	  Miscellaneous
 1848              	*******************/
 1849              	
 1850              	/*************************
 1851              		CHAR+ ( a -- a+ )
 1852              		increment a by one 
 1853              		char size unit. 
 1854              	*************************/
 1855 ???? B83E0000 		_HEADER CHARP,5,"CHAR+"
ARM GAS  forth.s 			page 151


 1855      05434841 
 1855      522B00BF 
 1856 ???? 06F10106 		add TOS,#1
 1857 ???? FFF766B8 		_NEXT 
 1858              	
 1859              	/*************************
 1860              		CHARS ( n1 -- n1 )
 1861              		address size of 
 1862              		n1 character
 1863              		same on this system 
 1864              	*************************/
 1865 ???? D43E0000 		_HEADER CHARS,5,"CHARS"
 1865      05434841 
 1865      525300BF 
 1866 ???? FFF75EB8 		_NEXT 
 1867              	
 1868              	
 1869              	
 1870              	/*************************
 1871              		ALIGN ( -- )
 1872              		align data pointer 
 1873              		to cell boundary 
 1874              	************************/
 1875 ???? E83E0000 		_HEADER ALIGN,5,"ALIGN"
 1875      05414C49 
 1875      474E00BF 
 1876 ???? E06C     		ldr T0,[UP,#USER_CTOP]
 1877 ???? 00F10300 		add T0,#(CELLL-1)
 1878 ???? 20F00300 		and T0,#0xFFFFFFFC 
 1879 ???? E064     		str T0,[UP,#USER_CTOP]
 1880 ???? FFF750B8 		_NEXT 
 1881              	
 1882              	
 1883              	/*************************
 1884              	    ALIGNED	( b -- a )
 1885              	 	Align address to the 
 1886              		cell boundary.
 1887              	**************************/
 1888 ???? F83E0000 		_HEADER ALGND,7,"ALIGNED"
 1888      07414C49 
 1888      474E4544 
 1889 ???? 06F10306 		ADD	TOS,TOS,#3
 1890 ???? 6FF00305 		MVN	WP,#3
 1891 ???? 06EA0506 		AND	TOS,TOS,WP
 1892 ???? FFF742B8 		_NEXT
 1893              	
 1894              	/****************************
 1895              	    >CHAR	( c -- c )
 1896              	 	Filter non-printing 
 1897              		characters.
 1898              	****************************/
 1899 ???? 143F0000 		_HEADER TCHAR,5,">CHAR"
 1899      053E4348 
 1899      415200BF 
 1900 ???? 504700BF 		_NEST
 1901 ???? D7310000 		_DOLIT  0x7F
 1901      7F000000 
ARM GAS  forth.s 			page 152


 1902 ???? 4D340000 		_ADR	ANDD
 1903 ???? 91330000 		_ADR	DUPP	// mask msb
 1904 ???? 89350000 		_ADR	BLANK
 1905 ???? D7310000 		_DOLIT 	127
 1905      7F000000 
 1906 ???? AD3B0000 		_ADR	WITHI	// check for printable
 1907 ???? 61370000 		_ADR	INVER
 1908 ???? 17320000 		_QBRAN	TCHA1
 1908      743F0000 
 1909 ???? 71330000 		_ADR	DROP
 1910 ???? D7310000 		_DOLIT 	'_'	// replace non-printables
 1910      5F000000 
 1911              	TCHA1:
 1912 ???? B72F0000 		  _UNNEST
 1913              	
 1914              	/************************
 1915              	    DEPTH	( -- n )
 1916              	 	Return the depth of
 1917              		the data stack.
 1918              	***********************/
 1919 ???? 303F0000 		_HEADER DEPTH,5,"DEPTH"
 1919      05444550 
 1919      544800BF 
 1920 ???? 4FF6B062 		_MOV32 T2,SPP 
 1920      C2F20102 
 1921 ???? A2EB0702 		SUB	T2,T2,DSP
 1922 ???? 47F8046D 		_PUSH
 1923 ???? 4FEAA206 		ASR	TOS,T2,#2
 1924 ???? FFF70AB8 		_NEXT
 1925              	
 1926              	/*****************************
 1927              	    PICK	( ... +n -- ... w )
 1928              	 	Copy the nth stack item 
 1929              		to tos.
 1930              	******************************/
 1931 ???? 7C3F0000 		_HEADER PICK,4,"PICK"
 1931      04504943 
 1931      4B0000BF 
 1932 ???? 4FEA8606 		lsl TOS,#2 
 1933 ???? BE59     		ldr TOS,[DSP,TOS]
 1934 ???? FEF7FFBF 		_NEXT 
 1935              	
 1936              	/*****************************
 1937              		PUT ( xn..x0 w i -- xi...x0 )
 1938              		put value w at position 
 1939              		xi on stack 
 1940              		i in range [0..n] 
 1941              	*****************************/
 1942 ???? A03F0000 		_HEADER PUT,3,"PUT"
 1942      03505554 
 1942      00BF
 1943 ???? 3546     		mov WP,TOS 
 1944 ???? 57F8046B 		_POP 
 1945 ???? 4FEA8505 		lsl WP,#2 
 1946 ???? 7E51     		str TOS,[DSP,WP]
 1947 ???? 57F8046B 		_POP 
 1948 ???? FEF7F0BF 		_NEXT 
ARM GAS  forth.s 			page 153


 1949              	
 1950              	/*********************
 1951              	  Memory access
 1952              	*********************/
 1953              	
 1954              	/*************************
 1955              	    HERE	( -- a )
 1956              	 	Return the top of
 1957              		the code dictionary.
 1958              	*************************/
 1959 ???? B63F0000 		_HEADER HERE,4,"HERE"
 1959      04484552 
 1959      450000BF 
 1960 ???? 504700BF 		_NEST
 1961 ???? AD3A0000 		_ADR	CPP
 1962 ???? 6D320000 		_ADR	AT
 1963 ???? B72F0000 		_UNNEST
 1964              	
 1965              	/***************************	
 1966              	    PAD	 ( -- a )
 1967              	 	Return the address of 
 1968              		a temporary buffer.
 1969              	***************************/
 1970 ???? D43F0000 		_HEADER PAD,3,"PAD"
 1970      03504144 
 1971 ???? 504700BF 		_NEST
 1972 ???? DD3F0000 		_ADR	HERE
 1973 ???? D7310000 		_DOLIT 80
 1973      50000000 
 1974 ???? CD340000 		_ADR PLUS 
 1975 ???? B72F0000 		_UNNEST
 1976              	
 1977              	/***********************
 1978              	    TIB	 ( -- a )
 1979              	 	Return the address 
 1980              		of the terminal 
 1981              		input buffer.
 1982              	************************/
 1983 ???? F03F0000 		_HEADER TIB,3,"TIB"
 1983      03544942 
 1984 ???? 47F8046D 		_PUSH
 1985 ???? 666B     		ldr TOS,[UP,#TIBUF]
 1986 ???? FEF7C9BF 		_NEXT
 1987              	
 1988              	/*************************
 1989              		SOURCE-ID, ( -- 0 | -1 )
 1990              	output:
 1991              		-1 	String (via EVALUATE)	
 1992              		0 	User input device
 1993              	*****************************/
 1994 ???? 10400000 		_HEADER SOURCID,9,"SOURCE-ID"
 1994      09534F55 
 1994      5243452D 
 1994      4944
 1995 ???? 47F8046D 		_PUSH 
 1996 ???? D4F8D060 		ldr TOS,[UP,#SRCID]
 1997 ???? FEF7BCBF 		_NEXT 
ARM GAS  forth.s 			page 154


 1998              	
 1999              	
 2000              	/***********************************
 2001              		SOURCE ( -- a u )
 2002              	output:
 2003              		a  address of transaction buffer 
 2004              		u  # char in buffer 
 2005              	***********************************/
 2006 ???? 22400000 		_HEADER SOURCE,6,"SOURCE"
 2006      06534F55 
 2006      52434500 
 2007 ???? 504700BF 		_NEST 
 2008 ???? D7310000 		_DOLIT  UPP+SRC 
 2008      24220020 
 2009 ???? 29390000 		_ADR   DAT 
 2010 ???? B72F0000 		_UNNEST 
 2011              	
 2012              	/*************************
 2013              	    @EXECUTE	( a -- )
 2014              	 	Execute vector stored
 2015              		in address a.
 2016              	*************************/
 2017 ???? 3C400000 		_HEADER ATEXE,8,"@EXECUTE"
 2017      08404558 
 2017      45435554 
 2017      450000BF 
 2018 ???? 3500     		MOVS	WP,TOS
 2019 ???? 57F8046B 		_POP
 2020 ???? 2D68     		LDR	WP,[WP]
 2021 ???? 45F00105 		ORR	WP,WP,#1
 2022 ???? 18BF     	    IT NE 
 2023 ???? 2847     		BXNE	WP
 2024 ???? FEF79ABF 		_NEXT
 2025              	
 2026              	/*******************************
 2027              	    CMOVE	( b1 b2 u -- )
 2028              	 	Copy u bytes from b1 to b2.
 2029              	********************************/
 2030 ???? 5C400000 		_HEADER CMOVE,5,"CMOVE"
 2030      05434D4F 
 2030      564500BF 
 2031 ???? 012E     		CMP TOS,#1 
 2032 ???? 0DD4     		BMI CMOV3 
 2033 ???? 57F8042B 		LDR	T2,[DSP],#4
 2034 ???? 57F8043B 		LDR	T3,[DSP],#4
 2035 ???? 03E0     		B CMOV1
 2036              	CMOV0:
 2037 ???? 13F8015B 		LDRB	WP,[T3],#1
 2038 ???? 02F8015B 		STRB	WP,[T2],#1
 2039              	CMOV1:
 2040 ???? 3600     		MOVS	TOS,TOS
 2041 ???? 04D0     		BEQ	CMOV2
 2042 ???? A6F10106 		SUB	TOS,TOS,#1
 2043 ???? F6E7     		B CMOV0
 2044              	CMOV3: 
 2045 ???? 07F10807 		ADD  DSP,#2*CELLL  
 2046              	CMOV2:
ARM GAS  forth.s 			page 155


 2047 ???? 57F8046B 		_POP
 2048 ???? FEF77EBF 		_NEXT
 2049              	
 2050              	/*********************************
 2051              		MOVE ( a1 a2 u -- )
 2052              		alias for CMOVE 
 2053              	*********************************/
 2054 ???? 80400000 		_HEADER MOVE,4,"MOVE"
 2054      044D4F56 
 2054      450000BF 
 2055 ???? E2E7     		B CMOVE 
 2056              	
 2057              	
 2058              	/***************************
 2059              	    WMOVE	( a1 a2 u -- )
 2060              	 	Copy u byte from a1 to a2
 2061              		round u to upper modulo 4 
 2062              	*******************************/
 2063 ???? B8400000 		_HEADER WMOVE,5,"WMOVE"
 2063      05574D4F 
 2063      5645
 2064 ???? 4FF00400 		MOV T0,#4
 2065 ???? 06F10306 		ADD TOS,#3 
 2066 ???? 26F00306 		BIC TOS,#3
 2067 ???? 57F8041B 		LDR	T1,[DSP],#4 // dest
 2068 ???? 57F8042B 		LDR	T2,[DSP],#4 // src 
 2069 ???? 8A42     		CMP T2,T1 
 2070 ???? 08D5     		BPL MOVE1
 2071 ???? 6FF00300 		MOV T0,#-4 
 2072 ???? 3144     		ADD T1,TOS
 2073 ???? 3244     		ADD T2,TOS 
 2074 ???? 01E0     		B MOVE3
 2075              	MOVE0:
 2076 ???? 1568     		LDR	WP,[T2]
 2077 ???? 0D60     		STR	WP,[T1]
 2078              	MOVE3: 
 2079 ???? 0144     		ADD T1,T0 
 2080 ???? 0244     		ADD T2,T0 
 2081              	MOVE1:
 2082 ???? 3600     		MOVS TOS,TOS
 2083 ???? 02D0     		BEQ	MOVE2
 2084 ???? A6F10406 		SUB	TOS,TOS,#4
 2085 ???? F6E7     		B MOVE0
 2086              	MOVE2:
 2087 ???? 57F8046B 		_POP
 2088 ???? FEF754BF 		_NEXT
 2089              	
 2090              	/**************************
 2091              	    FILL	( b u c -- )
 2092              	 	Fill u bytes of character
 2093              		c to area beginning at b.
 2094              	******************************/
 2095 ???? C6400000 		_HEADER FILL,4,"FILL"
 2095      0446494C 
 2095      4C0000BF 
 2096 ???? 03CF     		LDMFD DSP!,{T0,T1} 
 2097 ???? 0000     		MOVS T0,T0 
ARM GAS  forth.s 			page 156


 2098 ???? 03D0     		BEQ FILL2
 2099              	FILL1:
 2100 ???? 01F8016B 		STRB	TOS,[T1],#1
 2101 ???? 0138     		SUBS	T0,T0,#1
 2102 ???? FBD1     		BNE FILL1
 2103              	FILL2:
 2104 ???? 57F8046B 		_POP
 2105 ???? FEF743BF 		_NEXT
 2106              	
 2107              	/*****************************
 2108              	CORE EXTENSION 
 2109              		ERASE ( a u -- )
 2110              		fill u bytes with zeros 
 2111              		starting at a 
 2112              	*****************************/
 2113 ???? 0C410000 		_HEADER ERASE,5,"ERASE"
 2113      05455241 
 2113      5345
 2114 ???? 504700BF 		_NEST 
 2115 ???? 91330000 		_ADR	DUPP 
 2116 ???? 11340000 		_ADR	ZGREAT 
 2117 ???? 17320000 		_QBRAN	1f 
 2117      58410000 
 2118 ???? D7310000 		_DOLIT	0 
 2118      00000000 
 2119 ???? 15410000 		_ADR	FILL 
 2120 ???? B72F0000 		_UNNEST 
 2121 ???? 9D360000 	1:   _ADR	DDROP 
 2122 ???? B72F0000 		_UNNEST 
 2123              	
 2124              	
 2125              	/*****************************
 2126              	    PACK$	( b u a -- a )
 2127              	 	Build a counted word with
 2128              		u characters from b. 
 2129              		Null fill.
 2130              	*****************************/
 2131 ???? 2E410000 		_HEADER PACKS,5,"PACK$"
 2131      05504143 
 2131      4B2400BF 
 2132 ???? 504700BF 		_NEST
 2133 ???? 1D3F0000 		_ADR	ALGND
 2134 ???? 91330000 		_ADR	DUPP
 2135 ???? FD320000 		_ADR	TOR		// strings only on cell boundary
 2136 ???? D1330000 		_ADR	OVER
 2137 ???? CD340000 		_ADR	PLUS
 2138 ???? 29350000 		_ADR	ONEP 
 2139 ???? D7310000 		_DOLIT 	0xFFFFFFFC
 2139      FCFFFFFF 
 2140 ???? 4D340000 		_ADR	ANDD			// count mod cell
 2141 ???? D7310000 		_DOLIT 	0
 2141      00000000 
 2142 ???? A1330000 		_ADR	SWAP
 2143 ???? 59320000 		_ADR	STORE			// null fill cell
 2144 ???? CD320000 		_ADR	RAT
 2145 ???? C5360000 		_ADR	DDUP
 2146 ???? 79320000 		_ADR	CSTOR
ARM GAS  forth.s 			page 157


 2147 ???? 29350000 		_ADR	ONEP			// save count
 2148 ???? A1330000 		_ADR	SWAP
 2149 ???? 89400000 		_ADR	CMOVE
 2150 ???? 99320000 		_ADR	RFROM
 2151 ???? B72F0000 		_UNNEST   			// move string
 2152              	
 2153              	/***********************************
 2154              	  Numeric output, single precision
 2155              	***********************************/
 2156              	
 2157              	/**************************
 2158              	    DIGIT	( u -- c )
 2159              	 	Convert digit u to 
 2160              		a character.
 2161              	***************************/
 2162 ???? 64410000 		_HEADER DIGIT,5,"DIGIT"
 2162      05444947 
 2162      495400BF 
 2163 ???? 504700BF 		_NEST
 2164 ???? D7310000 		_DOLIT 9
 2164      09000000 
 2165 ???? D1330000 		_ADR	OVER
 2166 ???? 6D380000 		_ADR	LESS
 2167 ???? D7310000 		_DOLIT	7
 2167      07000000 
 2168 ???? 4D340000 		_ADR	ANDD
 2169 ???? CD340000 		_ADR	PLUS
 2170 ???? D7310000 		_DOLIT	'0'
 2170      30000000 
 2171 ???? CD340000 		_ADR	PLUS 
 2172 ???? B72F0000 		_UNNEST
 2173              	
 2174              	/*********************************
 2175              	    EXTRACT	( ud base -- ud c )
 2176              	 	Extract the least significant
 2177              		digit from positive double.
 2178              	**********************************/
 2179 ???? C8410000 		_HEADER EXTRC,7,"EXTRACT"
 2179      07455854 
 2179      52414354 
 2180 ???? 504700BF 		_NEST
 2181 ???? 653D0000 		_ADR	DSLMOD
 2182 ???? 75360000 		_ADR	ROT
 2183 ???? D1410000 		_ADR	DIGIT
 2184 ???? B72F0000 		_UNNEST
 2185              	
 2186              	/***************************
 2187              	    <#	  ( -- )
 2188              	 	Initiate the numeric
 2189              		output process.
 2190              	****************************/
 2191 ???? 08420000 		_HEADER BDIGS,2,"<#"
 2191      023C2300 
 2192 ???? 504700BF 		_NEST
 2193 ???? F53F0000 		_ADR	PAD
 2194 ???? 813A0000 		_ADR	HLD
 2195 ???? 59320000 		_ADR	STORE
ARM GAS  forth.s 			page 158


 2196 ???? B72F0000 		_UNNEST
 2197              	
 2198              	/*********************************
 2199              	    HOLD	( c -- )
 2200              	 	Insert a character into the 
 2201              		numeric output string.
 2202              	**********************************/
 2203 ???? 28420000 		_HEADER HOLD,4,"HOLD"
 2203      04484F4C 
 2203      440000BF 
 2204 ???? 504700BF 		_NEST
 2205 ???? 813A0000 		_ADR	HLD
 2206 ???? 6D320000 		_ADR	AT
 2207 ???? 39350000 		_ADR	ONEM
 2208 ???? 91330000 		_ADR	DUPP
 2209 ???? 813A0000 		_ADR	HLD
 2210 ???? 59320000 		_ADR	STORE
 2211 ???? 79320000 		_ADR	CSTOR
 2212 ???? B72F0000 		_UNNEST
 2213              	
 2214              	/********************************
 2215              	CORE EXTENSION 
 2216              		HOLDS ( c-addr u -- )
 2217              		add string to pictured 
 2218              		numeric output.
 2219              	*********************************/
 2220 ???? 44420000 		_HEADER HOLDS,5,"HOLDS" 
 2220      05484F4C 
 2220      445300BF 
 2221 ???? 504700BF 		_NEST 
 2222 ???? 813A0000 		_ADR	HLD   
 2223 ???? 6D320000 		_ADR	AT     // c-addr u a 
 2224 ???? D1330000 		_ADR	OVER 
 2225 ???? DD340000 		_ADR	SUBB 
 2226 ???? 91330000 		_ADR	DUPP 
 2227 ???? 813A0000 		_ADR	HLD 
 2228 ???? 59320000 		_ADR	STORE
 2229 ???? A1330000 		_ADR	SWAP  
 2230 ???? 89400000 		_ADR	CMOVE  
 2231 ???? B72F0000 		_UNNEST 
 2232              	
 2233              	
 2234              	/***********************
 2235              	    #	   ( ud -- ud )
 2236              	 	Extract one digit 
 2237              		from ud and append 
 2238              		the digit to output 
 2239              		string.
 2240              	*************************/
 2241 ???? 74420000 		_HEADER DIG,1,"#"
 2241      012300BF 
 2242 ???? 504700BF 		_NEST
 2243 ???? ED390000 		_ADR	BASE
 2244 ???? 6D320000 		_ADR	AT
 2245 ???? 11420000 		_ADR	EXTRC
 2246 ???? 4D420000 		_ADR	HOLD
 2247 ???? B72F0000 		_UNNEST
ARM GAS  forth.s 			page 159


 2248              	
 2249              	/***************************
 2250              	    #S	  ( ud -- 0 )
 2251              	 	Convert ud until all 
 2252              		digits are added to 
 2253              		the output string.
 2254              	***************************/
 2255 ???? AC420000 		_HEADER DIGS,2,"#S"
 2255      02235300 
 2256 ???? 504700BF 		_NEST
 2257              	DIGS1:
 2258 ???? B1420000 	    _ADR	DIG
 2259 ???? C5360000 		_ADR	DDUP
 2260 ???? 61340000 		_ADR    ORR 
 2261 ???? 17320000 		_QBRAN 	DIGS2
 2261      F0420000 
 2262 ???? 3F320000 		_BRAN	DIGS1
 2262      D4420000 
 2263              	DIGS2:
 2264 ???? 71330000 		 _ADR DROP 
 2265 ???? B72F0000 		 _UNNEST
 2266              	
 2267              	/*********************
 2268              	    SIGN	( n -- )
 2269              	 	Add a minus sign
 2270              		to the numeric
 2271              		output string.
 2272              	*********************/
 2273 ???? CC420000 		_HEADER SIGN,4,"SIGN"
 2273      04534947 
 2273      4E0000BF 
 2274 ???? 504700BF 		_NEST
 2275 ???? 01340000 		_ADR	ZLESS
 2276 ???? 17320000 		_QBRAN	SIGN1
 2276      20430000 
 2277 ???? D7310000 		_DOLIT '-'
 2277      2D000000 
 2278 ???? 4D420000 		_ADR	HOLD
 2279              	SIGN1:
 2280 ???? B72F0000 		  _UNNEST
 2281              	
 2282              	/*************************
 2283              	    #>  ( w -- b u )
 2284              	 	Prepare the output 
 2285              		word to be TYPE'd.
 2286              	************************/
 2287 ???? FC420000 		_HEADER EDIGS,2,"#>"
 2287      02233E00 
 2288 ???? 504700BF 		_NEST
 2289 ???? 71330000 		_ADR	DROP
 2290 ???? 813A0000 		_ADR	HLD
 2291 ???? 6D320000 		_ADR	AT
 2292 ???? F53F0000 		_ADR	PAD
 2293 ???? D1330000 		_ADR	OVER
 2294 ???? DD340000 		_ADR	SUBB
 2295 ???? B72F0000 		_UNNEST
 2296              	
ARM GAS  forth.s 			page 160


 2297              	/**************************
 2298              	    str	 ( n -- b u )
 2299              	 	Convert a signed 
 2300              		integer to a numeric 
 2301              		string.
 2302              	hidden word used by compiler
 2303              	***************************/
 2304              	STRR:
 2305 ???? 504700BF 		_NEST
 2306 ???? 1D3D0000 		_ADR 	STOD 
 2307 ???? 91330000 		_ADR	DUPP
 2308 ???? FD320000 		_ADR	TOR
 2309 ???? F9360000 		_ADR	DABS
 2310 ???? 2D420000 		_ADR	BDIGS
 2311 ???? D1420000 		_ADR	DIGS
 2312 ???? 99320000 		_ADR	RFROM
 2313 ???? 05430000 		_ADR	SIGN
 2314 ???? 2D430000 		_ADR	EDIGS
 2315 ???? B72F0000 		_UNNEST
 2316              	
 2317              	/*************************
 2318              	    HEX	 ( -- )
 2319              	 	Use radix 16 as 
 2320              		base for numeric 
 2321              		conversions.
 2322              	*************************/
 2323 ???? 28430000 		_HEADER HEX,3,"HEX"
 2323      03484558 
 2324 ???? 504700BF 		_NEST
 2325 ???? D7310000 		_DOLIT 16
 2325      10000000 
 2326 ???? ED390000 		_ADR	BASE
 2327 ???? 59320000 		_ADR	STORE
 2328 ???? B72F0000 		_UNNEST
 2329              	
 2330              	/**************************
 2331              		BIN ( -- )
 2332              		Use radix 2 as 
 2333              		base for numeric 
 2334              		conversion 
 2335              	**************************/
 2336 ???? 7C430000 		_HEADER BIN,3,"BIN"
 2336      0342494E 
 2337 ???? 504700BF 		_NEST 
 2338 ???? D7310000 		_DOLIT 2 
 2338      02000000 
 2339 ???? ED390000 		_ADR BASE 
 2340 ???? 59320000 		_ADR STORE
 2341 ???? B72F0000 		_UNNEST 
 2342              	
 2343              	/************************
 2344              	    DECIMAL	( -- )
 2345              	 	Use radix 10 as base
 2346              		for numeric conversions.
 2347              	*************************/
 2348 ???? 9C430000 		_HEADER DECIM,7,"DECIMAL"
 2348      07444543 
ARM GAS  forth.s 			page 161


 2348      494D414C 
 2349 ???? 504700BF 		_NEST
 2350 ???? D7310000 		_DOLIT 10
 2350      0A000000 
 2351 ???? ED390000 		_ADR	BASE
 2352 ???? 59320000 		_ADR	STORE
 2353 ???? B72F0000 		_UNNEST
 2354              	
 2355              	/************************************
 2356              	  Numeric input
 2357              	***********************************/
 2358              	
 2359              	/***********************************
 2360              	    DIGIT?	( c base -- u t )
 2361              	 	Convert a character to its 
 2362              		numeric value. A flag 
 2363              		indicates success.
 2364              	**********************************/
 2365 ???? BC430000 		_HEADER DIGTQ,6,"DIGIT?"
 2365      06444947 
 2365      49543F00 
 2366 ???? 504700BF 		_NEST
 2367 ???? FD320000 		_ADR	TOR
 2368 ???? D7310000 		_DOLIT 	'0'
 2368      30000000 
 2369 ???? DD340000 		_ADR	SUBB
 2370 ???? D7310000 		_DOLIT 9
 2370      09000000 
 2371 ???? D1330000 		_ADR	OVER
 2372 ???? 6D380000 		_ADR	LESS
 2373 ???? 17320000 		_QBRAN	DGTQ1
 2373      34440000 
 2374 ???? D7310000 		_DOLIT 7
 2374      07000000 
 2375 ???? DD340000 		_ADR	SUBB
 2376 ???? 91330000 		_ADR	DUPP
 2377 ???? D7310000 		_DOLIT	10
 2377      0A000000 
 2378 ???? 6D380000 		_ADR	LESS
 2379 ???? 61340000 		_ADR	ORR
 2380              	DGTQ1:
 2381 ???? 91330000 		_ADR	DUPP
 2382 ???? 99320000 		_ADR	RFROM
 2383 ???? 55380000 		_ADR	ULESS
 2384 ???? B72F0000 		_UNNEST
 2385              	
 2386              	
 2387              	/*****************************************
 2388              		>NUMBER ( ud1 adr1 u1 -- ud2 adr2 u2 )
 2389              	  convert unsigned double string 
 2390              	  to double integer adding to ud1 
 2391              	input:
 2392              		ud1  unsiged double 
 2393              		adr1  string address 
 2394              		u1    string length 
 2395              	outpout:
 2396              		ud2   modifield ud1 
ARM GAS  forth.s 			page 162


 2397              		adr2  point to char not converted 
 2398              		u2    char left in string 
 2399              	**************************************/
 2400 ???? E0430000 		_HEADER TONBR,7,">NUMBER"
 2400      073E4E55 
 2400      4D424552 
 2401 ???? 504700BF 		_NEST 
 2402 ???? 91330000 		_ADR DUPP 
 2403 ???? 17320000 		_QBRAN 9f 
 2403      C0440000 
 2404 ???? D1330000 	1: 	_ADR OVER  // d a u a 
 2405 ???? 8D320000 		_ADR CAT   // d  a u c 
 2406 ???? ED390000 		_ADR BASE   
 2407 ???? 6D320000 		_ADR AT      // d a u c base
 2408 ???? E9430000 		_ADR DIGTQ   // d a u n flag 
 2409 ???? 17320000 		_QBRAN 8f
 2409      BC440000 
 2410 ???? FD320000 		_ADR TOR   	 
 2411 ???? 39350000 		_ADR ONEM 
 2412 ???? B5330000 		_ADR DSWAP // a u d 
 2413 ???? ED390000 		_ADR BASE 
 2414 ???? 6D320000 		_ADR AT 
 2415 ???? 053E0000 		_ADR DSTAR 
 2416 ???? 99320000 		_ADR RFROM 
 2417 ???? D7310000 		_DOLIT 0    
 2417      00000000 
 2418 ???? D9360000 		_ADR DPLUS 
 2419 ???? B5330000 		_ADR DSWAP 
 2420 ???? A1330000 		_ADR SWAP 
 2421 ???? 29350000 		_ADR ONEP
 2422 ???? A1330000 		_ADR SWAP  
 2423 ???? 3F320000 		_BRAN 1b 
 2423      60440000 
 2424 ???? 71330000 	8:  _ADR DROP
 2425 ???? B72F0000 	9:	_UNNEST 
 2426              	
 2427              	
 2428              	/**************************
 2429              	 CHAR? ( a cnt c -- a+ cnt- t | a cnt f )
 2430              	 check for charcter c 
 2431              	 move pointer if *a==c  
 2432              	**************************/
 2433              	CHARQ:
 2434 ???? 7868     	    ldr T0,[DSP,#4]
 2435 ???? 10F8011B 	    ldrb T1,[T0],#1 
 2436 ???? 3246     	    mov T2,TOS 
 2437 ???? 86EA0606 	    eor TOS,TOS
 2438 ???? 9142     	    cmp T1,T2
 2439 ???? 06D1     	    bne 1f 
 2440 ???? 7860     	    str T0,[DSP,#4]
 2441 ???? 3868     		ldr T0,[DSP]
 2442 ???? A0F10100 		sub T0,#1 
 2443 ???? 3860     		str T0,[DSP]
 2444 ???? 6FEA0606 	    mvn TOS,TOS  
 2445 ???? FEF765BD 	1:  _NEXT
 2446              	
 2447              	
ARM GAS  forth.s 			page 163


 2448              	/*********************************
 2449              	   NEG? ( a cnt -- a cnt f |a+ cnt- t )
 2450              	   skip '-'|'+' return -1 if '-' 
 2451              	   else return 0 
 2452              	*********************************/
 2453              	NEGQ: 
 2454 ???? 47F8046D 		_PUSH 
 2455 ???? 86EA0606 		eor TOS,TOS // false flag 
 2456 ???? 7868     		ldr T0,[DSP,#4]
 2457 ???? 10F8011B 		ldrb T1,[T0],#1
 2458 ???? 2D29     		cmp T1,#'-' 
 2459 ???? 02D0     		beq 1f
 2460 ???? 2B29     		cmp T1,#'+'
 2461 ???? 07D1     		bne 3f 
 2462 ???? 01E0     		b 2f 
 2463 ???? 6FEA0606 	1:  mvn TOS,TOS  // true flag 
 2464 ???? 7860     	2:	str T0,[DSP,#4]
 2465 ???? 3868     		ldr T0,[DSP]
 2466 ???? A0F10100 		sub T0,#1 
 2467 ???? 3860     		str T0,[DSP]
 2468 ???? FEF750BD 	3:	_NEXT 
 2469              	
 2470              	
 2471              	
 2472              	/**********************************
 2473              	    INT?	( a -- n T | a F )
 2474              	 	parse string  at 'a' for 
 2475              		integer. Push a flag on TOS.
 2476              		integer form:
 2477              			[-]hex_digit+  | 
 2478              			$[-]hex_digit+ |
 2479              			%[-]bin_digit+ | 
 2480              			[-]dec_digit+ 
 2481              	**********************************/
 2482 ???? 48440000 		_HEADER INTQ,4,"INT?"
 2482      04494E54 
 2482      3F0000BF 
 2483 ???? 504700BF 		_NEST
 2484              	// save BASE 	
 2485 ???? ED390000 		_ADR	BASE
 2486 ???? 6D320000 		_ADR	AT
 2487 ???? FD320000 		_ADR	TOR
 2488 ???? D7310000 		_DOLIT	0      // a 0 
 2488      00000000 
 2489 ???? D1330000 		_ADR	OVER   // a 0 a 
 2490 ???? 41390000 		_ADR	COUNT  // a 0 a+ cnt 
 2491 ???? D7310000 		_DOLIT  '$' 
 2491      24000000 
 2492 ???? C5440000 		_ADR    CHARQ 
 2493 ???? 17320000 		_QBRAN  0f 
 2493      5C450000 
 2494              	// hexadecimal number 
 2495 ???? 81430000 		_ADR    HEX
 2496 ???? 3F320000 		_BRAN   2f 
 2496      74450000 
 2497 ???? D7310000 	0:  _DOLIT  '%'   // -- a 0 a cnt '%'
 2497      25000000 
ARM GAS  forth.s 			page 164


 2498 ???? C5440000 		_ADR	CHARQ  // -- a 0 a cnt f 
 2499 ???? 17320000 		_QBRAN  2f
 2499      74450000 
 2500 ???? A1430000 		_ADR	BIN 
 2501              	2: // check if negative number 
 2502 ???? E7440000 		_ADR    NEGQ 
 2503 ???? FD320000 		_ADR	TOR  // -- a 0 a+ cnt- R: sign 
 2504 ???? D7310000 		_DOLIT  0
 2504      00000000 
 2505 ???? 91330000 		_ADR	DUPP 
 2506 ???? B5330000 		_ADR	DSWAP // a 0 0 0 a+ cnt- R: sign 
 2507 ???? 51440000 		_ADR    TONBR // a 0 d a+ cnt 
 2508 ???? 17320000 		_QBRAN  2f
 2508      AC450000 
 2509              	    // not an integer 
 2510 ???? 99320000 		_ADR RFROM // a 0 d a sign  
 2511 ???? 9D360000 		_ADR DDROP 
 2512 ???? 9D360000 		_ADR DDROP 
 2513 ???? 3F320000 		_BRAN 7f 
 2513      D4450000 
 2514              	2: // valid integer 
 2515 ???? 71330000 		_ADR	DROP // a 0 d
 2516 ???? B5330000 		_ADR    DSWAP 
 2517 ???? 9D360000 		_ADR    DDROP 
 2518 ???? 71330000 		_ADR    DROP  // d>s 
 2519 ???? 99320000 		_ADR    RFROM // n sign 
 2520 ???? 17320000 		_QBRAN  2f
 2520      CC450000 
 2521 ???? 75370000 		_ADR    NEGAT   
 2522 ???? D7310000 	2:	_DOLIT  -1 
 2522      FFFFFFFF 
 2523              	7: // restore BASE 
 2524 ???? 99320000 		_ADR	RFROM
 2525 ???? ED390000 		_ADR	BASE
 2526 ???? 59320000 		_ADR	STORE
 2527 ???? B72F0000 		_UNNEST
 2528              	
 2529              	
 2530              	/********************************
 2531              	    NUMBER? ( a -- int -1 | float -2 | a 0 )
 2532              	    parse number, integer or float 
 2533              	    if not a number return ( a 0 ) 
 2534              	    if integer return ( int -1 ) 
 2535              	    if float return ( float -2 )
 2536              	**********************************/
 2537 ???? 14450000 	    _HEADER NUMBERQ,7,"NUMBER?"
 2537      074E554D 
 2537      4245523F 
 2538 ???? 504700BF 	    _NEST 
 2539 ???? 1D450000 	    _ADR INTQ
 2540 ???? DD350000 	    _ADR QDUP 
 2541 ???? 17320000 	    _QBRAN 2f 
 2541      08460000 
 2542 ???? B72F0000 	    _UNNEST 
 2543 ???? D5280000 	2:  _ADR FLOATQ
 2544 ???? B72F0000 	    _UNNEST 
 2545              	
ARM GAS  forth.s 			page 165


 2546              	
 2547              	/********************
 2548              	  console I/O
 2549              	********************/
 2550              	
 2551              	/**********************
 2552              	    SPACE	( -- )
 2553              	 	Send the blank 
 2554              		character to 
 2555              		the output device.
 2556              	************************/
 2557 ???? E8450000 		_HEADER SPACE,5,"SPACE"
 2557      05535041 
 2557      434500BF 
 2558 ???? 504700BF 		_NEST
 2559 ???? 89350000 		_ADR	BLANK
 2560 ???? 79300000 		_ADR	EMIT
 2561 ???? B72F0000 		_UNNEST
 2562              	
 2563              	/***************************
 2564              	    SPACES	( +n -- )
 2565              	 	Send n spaces to the 
 2566              		output device.
 2567              	****************************/
 2568 ???? 14460000 		_HEADER SPACS,6,"SPACES"
 2568      06535041 
 2568      43455300 
 2569 ???? 504700BF 		_NEST
 2570 ???? D7310000 		_DOLIT	0
 2570      00000000 
 2571 ???? BD380000 		_ADR	MAX
 2572 ???? FD320000 		_ADR	TOR
 2573 ???? 3F320000 		_BRAN	CHAR2
 2573      58460000 
 2574              	CHAR1:
 2575 ???? 1D460000 		_ADR	SPACE
 2576              	CHAR2:
 2577 ???? F9310000 		_DONXT	CHAR1
 2577      54460000 
 2578 ???? B72F0000 		_UNNEST
 2579              	
 2580              	/***********************
 2581              	    TYPE	( b u -- )
 2582              	 	Output u characters 
 2583              		from b.
 2584              	************************/
 2585 ???? 30460000 		_HEADER TYPEE,4,"TYPE"
 2585      04545950 
 2585      450000BF 
 2586 ???? 504700BF 		_NEST
 2587 ???? FD320000 		_ADR  TOR   // ( a+1 -- R: u )
 2588 ???? 3F320000 		_BRAN	TYPE2
 2588      8C460000 
 2589              	TYPE1:  
 2590 ???? 41390000 		_ADR  COUNT
 2591 ???? 393F0000 		_ADR TCHAR
 2592 ???? 79300000 		_ADR EMIT
ARM GAS  forth.s 			page 166


 2593              	TYPE2:  
 2594 ???? F9310000 		_DONXT	TYPE1
 2594      80460000 
 2595 ???? 71330000 		_ADR	DROP
 2596 ???? B72F0000 		_UNNEST
 2597              	
 2598              	/***************************
 2599              		\TYPE ( b u )
 2600              		like TYPE but without 
 2601              		filtering 
 2602              	***************************/
 2603 ???? 68460000 		_HEADER SLTYPE,5,"\\TYPE"
 2603      055C5459 
 2603      504500BF 
 2604 ???? 504700BF 		_NEST 
 2605 ???? FD320000 		_ADR	TOR 
 2606 ???? 3F320000 		_BRAN	2f 
 2606      C0460000 
 2607 ???? 41390000 	1:	_ADR	COUNT 
 2608 ???? 79300000 		_ADR	EMIT 
 2609 ???? F9310000 	2:  _DONXT	1b 
 2609      B8460000 
 2610 ???? 71330000 		_ADR	DROP 
 2611 ???? B72F0000 		_UNNEST 
 2612              	
 2613              	
 2614              	
 2615              	/***************************
 2616              	    CR	  ( -- )
 2617              	 	Output a carriage return
 2618              		and a line feed.
 2619              	****************************/
 2620 ???? A0460000 		_HEADER CR,2,"CR"
 2620      02435200 
 2621 ???? 504700BF 		_NEST
 2622 ???? D7310000 		_DOLIT	CRR
 2622      0D000000 
 2623 ???? 79300000 		_ADR	EMIT
 2624 ???? D7310000 		_DOLIT	LF
 2624      0A000000 
 2625 ???? 79300000 		_ADR	EMIT
 2626 ???? B72F0000 		_UNNEST
 2627              	
 2628              	/******************************************
 2629              	  do_$	( -- a u )
 2630              	  Return the address of a compiled string.
 2631              	  adjust return address to skip over it.
 2632              	hidden word used by compiler. 
 2633              	******************************************/
 2634              	DOSTR:
 2635 ???? 504700BF 		_NEST     
 2636              	/* compiled string address is 2 levels deep */
 2637 ???? 99320000 		_ADR	RFROM	// { -- a1 }
 2638 ???? 99320000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2639 ???? 91330000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2640 ???? 41390000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2641 ???? CD340000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
ARM GAS  forth.s 			page 167


 2642 ???? 1D3F0000 		_ADR	ALGND	//  end of string
 2643              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2644 ???? FD320000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2645 ???? A1330000 		_ADR	SWAP	//  count tugged
 2646 ???? FD320000 		_ADR	TOR     //  ( -- a2) is string address
 2647 ???? 41390000 		_ADR    COUNT  //   ( a2 -- a2+1 cnt )
 2648 ???? B72F0000 		_UNNEST
 2649              	
 2650              	/******************************************
 2651              	    $"|	( -- a u )
 2652              	 	Run time routine compiled by _". 
 2653              		Return address of a compiled string.
 2654              	hidden word used by compiler
 2655              	*****************************************/
 2656              	STRQP:
 2657 ???? 504700BF 		_NEST
 2658 ???? F9460000 		_ADR	DOSTR
 2659 ???? B72F0000 		_UNNEST			// force a call to dostr
 2660              	
 2661              	
 2662              	/**********************
 2663              	    ."|	( -- )
 2664              	 	Run time routine of ." 
 2665              		Output a compiled string.
 2666              	hidden word used by compiler
 2667              	*****************************/
 2668              	DOTQP:
 2669 ???? 504700BF 		_NEST
 2670 ???? F9460000 		_ADR	DOSTR
 2671 ???? 71460000 		_ADR	TYPEE 
 2672 ???? B72F0000 		_UNNEST
 2673              	
 2674              	/*************************
 2675              		LPAD  ( n+ -- )
 2676              		emit n spaceS + 
 2677              		base character  
 2678              		16 -> $
 2679              		 2 -> %
 2680              		 other -> none 
 2681              	*************************/
 2682              	LPAD:
 2683 ???? 504700BF 		_NEST 
 2684 ???? 053A0000 		_ADR BCHR 
 2685 ???? 6D320000 		_ADR  AT 
 2686 ???? 17320000 		_QBRAN 3f 
 2686      BC470000 
 2687 ???? ED390000 		_ADR BASE 
 2688 ???? 6D320000 		_ADR AT 
 2689 ???? 91330000 		_ADR DUPP 
 2690 ???? D7310000 		_DOLIT 16
 2690      10000000 
 2691 ???? 15380000 		_ADR EQUAL 
 2692 ???? 17320000 		_QBRAN 1f
 2692      98470000 
 2693 ???? 71330000 		_ADR DROP 
 2694 ???? D7310000 		_DOLIT '$'
 2694      24000000 
ARM GAS  forth.s 			page 168


 2695 ???? A1330000 	0:	_ADR  SWAP 
 2696 ???? 39350000 		_ADR  ONEM 
 2697 ???? 39460000 		_ADR  SPACS 
 2698 ???? 79300000 		_ADR  EMIT 
 2699 ???? B72F0000 		_UNNEST 
 2700 ???? D7310000 	1:  _DOLIT 2 
 2700      02000000 
 2701 ???? 15380000 		_ADR EQUAL 
 2702 ???? 17320000 		_QBRAN 3f
 2702      BC470000 
 2703 ???? D7310000 		_DOLIT '%'
 2703      25000000 
 2704 ???? 3F320000 		_BRAN 0b   	
 2704      84470000 
 2705 ???? 39460000 	3:	_ADR  SPACS 
 2706 ???? B72F0000 		_UNNEST 
 2707              	
 2708              	
 2709              	/******************************
 2710              	    .R	  ( n +n -- )
 2711              	 	Display an integer in a 
 2712              		field of n columns, 
 2713              		right justified.
 2714              	*******************************/
 2715 ???? D4460000 		_HEADER DOTR,2,".R"
 2715      022E5200 
 2716 ???? 504700BF 		_NEST
 2717 ???? FD320000 		_ADR	TOR
 2718 ???? 1D3D0000 		_ADR    STOD 
 2719 ???? B5480000 		_ADR	DTOA 
 2720 ???? 99320000 		_ADR	RFROM
 2721 ???? D1330000 		_ADR	OVER
 2722 ???? DD340000 		_ADR	SUBB
 2723 ???? 45470000 		_ADR    LPAD  
 2724 ???? 71460000 		_ADR	TYPEE
 2725 ???? B72F0000 		_UNNEST
 2726              	
 2727              	
 2728              	/*************************
 2729              	    U.R	 ( u +n -- )
 2730              	 	Display an unsigned 
 2731              		integer in n column, 
 2732              		right justified.
 2733              	***************************/
 2734 ???? C8470000 		_HEADER UDOTR,3,"U.R"
 2734      03552E52 
 2735 ???? 504700BF 		_NEST
 2736 ???? FD320000 		_ADR    TOR 
 2737 ???? D7310000 		_DOLIT  0
 2737      00000000 
 2738 ???? B5480000 		_ADR    DTOA 
 2739 ???? 99320000 		_ADR	RFROM
 2740 ???? D1330000 		_ADR	OVER
 2741 ???? DD340000 		_ADR	SUBB
 2742 ???? 45470000 		_ADR    LPAD  
 2743 ???? 71460000 		_ADR	TYPEE
 2744 ???? B72F0000 		_UNNEST
ARM GAS  forth.s 			page 169


 2745              	
 2746              	
 2747              	/************************
 2748              	    U.	  ( u -- )
 2749              	 	Display an unsigned 
 2750              		integer in free format.
 2751              	***************************/
 2752 ???? F8470000 		_HEADER UDOT,2,"U."
 2752      02552E00 
 2753 ???? 504700BF 		_NEST
 2754 ???? D7310000 		_DOLIT  0 
 2754      00000000 
 2755 ???? 2D420000 		_ADR	BDIGS
 2756 ???? D1420000 		_ADR	DIGS
 2757 ???? 2D430000 		_ADR	EDIGS
 2758 ???? D7310000 		_DOLIT  1 
 2758      01000000 
 2759 ???? 45470000 		_ADR	LPAD  
 2760 ???? 71460000 		_ADR	TYPEE
 2761 ???? B72F0000 		_UNNEST
 2762              	
 2763              	
 2764              	/************************
 2765              	    .	   ( w -- )
 2766              	 	Display an integer 
 2767              		in free format, 
 2768              		preceeded by a space.
 2769              	**************************/
 2770 ???? 2C480000 		_HEADER DOT,1,"."
 2770      012E00BF 
 2771 ???? 504700BF 		_NEST
 2772 ???? 1D460000 		_ADR    SPACE 
 2773 ???? ED390000 		_ADR	BASE
 2774 ???? 6D320000 		_ADR	AT
 2775 ???? D7310000 	1:	_DOLIT  10
 2775      0A000000 
 2776 ???? 75340000 		_ADR	XORR	// decimal base?
 2777 ???? 17320000 		_QBRAN	DOT1
 2777      90480000 
 2778 ???? 31480000 		_ADR	UDOT    // no,display unsigned
 2779 ???? B72F0000 		_UNNEST			
 2780              	DOT1:
 2781 ???? 1D3D0000 		_ADR    STOD 
 2782 ???? B5480000 	    _ADR	DTOA
 2783 ???? D7310000 		_DOLIT  1 
 2783      01000000 
 2784 ???? 45470000 		_ADR	LPAD  
 2785 ???? 71460000 	1:	_ADR	TYPEE
 2786 ???? B72F0000 		_UNNEST			// yes, display signed
 2787              	
 2788              	
 2789              	/*************************
 2790              	  D>A ( d -- p u )
 2791              	  convert double integer to 
 2792              	  ASCII string in pad  
 2793              	input:
 2794              		d    int64 to convert 
ARM GAS  forth.s 			page 170


 2795              	output:
 2796              		p     pointer to string  
 2797              		u     string length 
 2798              	**************************/
 2799 ???? 60480000 		_HEADER DTOA,3,"D>A" 
 2799      03443E41 
 2800 ???? 504700BF 		_NEST
 2801 ???? 91330000 	    _ADR DUPP 
 2802 ???? FD320000 		_ADR TOR 
 2803 ???? F9360000 		_ADR DABS 
 2804 ???? 2D420000 		_ADR BDIGS
 2805 ???? D1420000 		_ADR DIGS 
 2806 ???? 99320000 		_ADR RFROM 
 2807 ???? 05430000 		_ADR SIGN  
 2808 ???? 2D430000 		_ADR EDIGS 
 2809 ???? B72F0000 		_UNNEST 
 2810              	
 2811              	
 2812              	/*************************
 2813              	   D. ( d -- )
 2814              	   display double integer 
 2815              	**************************/
 2816 ???? B0480000 		_HEADER DDOT,2,"D."
 2816      02442E00 
 2817 ???? 504700BF 		_NEST
 2818 ???? 1D460000 		_ADR SPACE 
 2819 ???? B5480000 		_ADR DTOA 
 2820 ???? D7310000 		_DOLIT 1
 2820      01000000 
 2821 ???? 45470000 		_ADR LPAD 
 2822 ???? 71460000 		_ADR TYPEE
 2823 ???? B72F0000 		_UNNEST 
 2824              	
 2825              	/**************************
 2826              		UD. ( d -- )
 2827              		display unsigned double
 2828              	**************************/
 2829 ???? E0480000 		_HEADER UDDOT,3,"UD."
 2829      0355442E 
 2830 ???? 504700BF 		_NEST
 2831 ???? 1D460000 		_ADR SPACE 
 2832 ???? 2D420000 		_ADR BDIGS
 2833 ???? D1420000 		_ADR DIGS 
 2834 ???? 2D430000 		_ADR EDIGS 
 2835 ???? D7310000 		_DOLIT 1
 2835      01000000 
 2836 ???? 45470000 		_ADR LPAD 
 2837 ???? 71460000 		_ADR TYPEE
 2838 ???? B72F0000 		_UNNEST 
 2839              	
 2840              	
 2841              	
 2842              	/***********************
 2843              		H. ( w -- )
 2844              		display integer 
 2845              		in hexadecimal 
 2846              	*********************/
ARM GAS  forth.s 			page 171


 2847 ???? 08490000 		_HEADER HDOT,2,"H."
 2847      02482E00 
 2848 ???? 504700BF 		_NEST 
 2849 ???? ED390000 		_ADR BASE
 2850 ???? 6D320000 		_ADR AT 
 2851 ???? A1330000 		_ADR SWAP
 2852 ???? 81430000 		_ADR HEX
 2853 ???? D7310000 		_DOLIT 0 
 2853      00000000 
 2854 ???? 2D420000 		_ADR BDIGS
 2855 ???? D1420000 		_ADR DIGS
 2856 ???? 2D430000 		_ADR EDIGS
 2857 ???? 1D460000 		_ADR SPACE
 2858 ???? D7310000 		_DOLIT '$'
 2858      24000000 
 2859 ???? 79300000 		_ADR EMIT 
 2860 ???? 71460000 		_ADR TYPEE
 2861 ???? ED390000 		_ADR BASE
 2862 ???? 59320000 		_ADR STORE  
 2863 ???? B72F0000 		_UNNEST 
 2864              	
 2865              	
 2866              	/***********************
 2867              	    ?	   ( a -- )
 2868              	 	Display the contents
 2869              		in a memory cell.
 2870              	*************************/
 2871 ???? 38490000 		_HEADER QUEST,1,"?"
 2871      013F00BF 
 2872 ???? 504700BF 		_NEST
 2873 ???? 6D320000 		_ADR	AT
 2874 ???? 65480000 		_ADR	DOT
 2875 ???? B72F0000 		_UNNEST
 2876              	
 2877              	/**************
 2878              	  Parsing
 2879              	***************/
 2880              	
 2881              	/*********************************************
 2882              	    parse	( b u c -- b u delta //  string> )
 2883              	 	Scan word delimited by c. 
 2884              		Return found string and its offset.
 2885              	hidden word used by PARSE
 2886              	**********************************************/
 2887              	PARS:
 2888 ???? 504700BF 		_NEST
 2889 ???? 113A0000 		_ADR	TEMP
 2890 ???? 59320000 		_ADR	STORE
 2891 ???? D1330000 		_ADR	OVER
 2892 ???? FD320000 		_ADR	TOR
 2893 ???? 91330000 		_ADR	DUPP
 2894 ???? 17320000 		_QBRAN	PARS8
 2894      B04A0000 
 2895 ???? 39350000 		_ADR	ONEM
 2896 ???? 113A0000 		_ADR	TEMP
 2897 ???? 6D320000 		_ADR	AT
 2898 ???? 89350000 		_ADR	BLANK
ARM GAS  forth.s 			page 172


 2899 ???? 15380000 		_ADR	EQUAL
 2900 ???? 17320000 		_QBRAN	PARS3
 2900      244A0000 
 2901 ???? FD320000 		_ADR	TOR
 2902              	PARS1:
 2903 ???? 89350000 		_ADR	BLANK
 2904 ???? D1330000 		_ADR	OVER
 2905 ???? 8D320000 		_ADR	CAT	 // skip leading blanks 
 2906 ???? DD340000 		_ADR	SUBB
 2907 ???? 01340000 		_ADR	ZLESS
 2908 ???? 61370000 		_ADR	INVER
 2909 ???? 17320000 		_QBRAN	PARS2
 2909      204A0000 
 2910 ???? 29350000 		_ADR	ONEP
 2911 ???? F9310000 		_DONXT	PARS1
 2911      DC490000 
 2912 ???? 99320000 		_ADR	RFROM
 2913 ???? 71330000 		_ADR	DROP
 2914 ???? D7310000 		_DOLIT	0
 2914      00000000 
 2915 ???? 91330000 		_ADR	DUPP
 2916 ???? B72F0000 		_UNNEST
 2917              	PARS2:
 2918 ???? 99320000 		_ADR	RFROM
 2919              	PARS3:
 2920 ???? D1330000 		_ADR	OVER
 2921 ???? A1330000 		_ADR	SWAP
 2922 ???? FD320000 		_ADR	TOR
 2923              	PARS4:
 2924 ???? 113A0000 		_ADR	TEMP
 2925 ???? 6D320000 		_ADR	AT
 2926 ???? D1330000 		_ADR	OVER
 2927 ???? 8D320000 		_ADR	CAT
 2928 ???? DD340000 		_ADR	SUBB // scan for delimiter
 2929 ???? 113A0000 		_ADR	TEMP
 2930 ???? 6D320000 		_ADR	AT
 2931 ???? 89350000 		_ADR	BLANK
 2932 ???? 15380000 		_ADR	EQUAL
 2933 ???? 17320000 		_QBRAN	PARS5
 2933      604A0000 
 2934 ???? 01340000 		_ADR	ZLESS
 2935              	PARS5:
 2936 ???? 17320000 		_QBRAN	PARS6
 2936      844A0000 
 2937 ???? 29350000 		_ADR	ONEP
 2938 ???? F9310000 		_DONXT	PARS4
 2938      304A0000 
 2939 ???? 91330000 		_ADR	DUPP
 2940 ???? FD320000 		_ADR	TOR
 2941 ???? 3F320000 		_BRAN	PARS7
 2941      984A0000 
 2942              	PARS6:
 2943 ???? 99320000 		_ADR	RFROM
 2944 ???? 71330000 		_ADR	DROP
 2945 ???? 91330000 		_ADR	DUPP
 2946 ???? 29350000 		_ADR	ONEP
 2947 ???? FD320000 		_ADR	TOR
ARM GAS  forth.s 			page 173


 2948              	PARS7:
 2949 ???? D1330000 		_ADR	OVER
 2950 ???? DD340000 		_ADR	SUBB
 2951 ???? 99320000 		_ADR	RFROM
 2952 ???? 99320000 		_ADR	RFROM
 2953 ???? DD340000 		_ADR	SUBB
 2954 ???? B72F0000 		_UNNEST
 2955              	PARS8:
 2956 ???? D1330000 		_ADR	OVER
 2957 ???? 99320000 		_ADR	RFROM
 2958 ???? DD340000 		_ADR	SUBB
 2959 ???? B72F0000 		_UNNEST
 2960              	
 2961              	/************************************
 2962              	 CORE EXTENSION 
 2963              	    PARSE	( c -- b u //  string> )
 2964              	 	Scan input stream and return 
 2965              		counted string delimited by c.
 2966              	************************************/
 2967 ???? 88490000 		_HEADER PARSE,5,"PARSE"
 2967      05504152 
 2967      534500BF 
 2968 ???? 504700BF 		_NEST
 2969 ???? FD320000 		_ADR	TOR
 2970 ???? 15400000 		_ADR	TIB
 2971 ???? 3D3A0000 		_ADR	INN
 2972 ???? 6D320000 		_ADR	AT
 2973 ???? CD340000 		_ADR	PLUS			// current input buffer pointer
 2974 ???? 553A0000 		_ADR	NTIB
 2975 ???? 6D320000 		_ADR	AT
 2976 ???? 3D3A0000 		_ADR	INN
 2977 ???? 6D320000 		_ADR	AT
 2978 ???? DD340000 		_ADR	SUBB			// remaining count
 2979 ???? 99320000 		_ADR	RFROM
 2980 ???? 9D490000 		_ADR	PARS
 2981 ???? 3D3A0000 		_ADR	INN
 2982 ???? ED380000 		_ADR	PSTOR
 2983 ???? B72F0000 		_UNNEST
 2984              	
 2985              	/************************************
 2986              	 CORE EXTENSION 
 2987              		PARSE-NAME ( -- b u )
 2988              		space delimited parse input 
 2989              		buffer 
 2990              	*************************************/
 2991 ???? C44A0000 		_HEADER PARSENAME,10,"PARSE-NAME"
 2991      0A504152 
 2991      53452D4E 
 2991      414D4500 
 2992 ???? 504700BF 		_NEST 
 2993 ???? 89350000 		_ADR	BLANK  
 2994 ???? CD4A0000 		_ADR	PARSE 
 2995 ???? B72F0000 		_UNNEST 
 2996              	
 2997              	
 2998              	/*******************************
 2999              	    .(	  ( -- )
ARM GAS  forth.s 			page 174


 3000              	 	Output following string 
 3001              		up to next ) .
 3002              	******************************/
 3003 ???? 104B0000 		_HEADER DOTPR,IMEDD+2,".("
 3003      822E2800 
 3004 ???? 504700BF 		_NEST
 3005 ???? D7310000 		_DOLIT	')'
 3005      29000000 
 3006 ???? CD4A0000 		_ADR	PARSE
 3007 ???? 71460000 		_ADR	TYPEE
 3008 ???? B72F0000 		_UNNEST
 3009              	
 3010              	/************************
 3011              	    (	   ( -- )
 3012              	 	Ignore following 
 3013              		string up to next )
 3014              		A comment.
 3015              	************************/
 3016 ???? 304B0000 		_HEADER PAREN,IMEDD+1,"("
 3016      812800BF 
 3017 ???? 504700BF 		_NEST
 3018 ???? D7310000 		_DOLIT	')'
 3018      29000000 
 3019 ???? CD4A0000 		_ADR	PARSE
 3020 ???? 9D360000 		_ADR	DDROP
 3021 ???? B72F0000 		_UNNEST
 3022              	
 3023              	/*******************
 3024              	    \	   ( -- )
 3025              	 	Ignore following 
 3026              		text till the 
 3027              		end of line.
 3028              	********************/
 3029 ???? 504B0000 		_HEADER BKSLA,IMEDD+1,"\\"
 3029      815C00BF 
 3030 ???? 504700BF 		_NEST
 3031 ???? 553A0000 		_ADR	NTIB
 3032 ???? 6D320000 		_ADR	AT
 3033 ???? 3D3A0000 		_ADR	INN
 3034 ???? 59320000 		_ADR	STORE
 3035 ???? B72F0000 		_UNNEST
 3036              	
 3037              	/******************************
 3038              	    CHAR	( -- c )
 3039              	 	Parse next word and
 3040              		return its first character.
 3041              	*******************************/
 3042 ???? 704B0000 		_HEADER CHAR,4,"CHAR"
 3042      04434841 
 3042      520000BF 
 3043 ???? 504700BF 		_NEST
 3044 ???? 89350000 		_ADR	BLANK
 3045 ???? CD4A0000 		_ADR	PARSE
 3046 ???? 71330000 		_ADR	DROP
 3047 ???? 8D320000 		_ADR	CAT
 3048 ???? B72F0000 		_UNNEST
 3049              	
ARM GAS  forth.s 			page 175


 3050              	/**********************************
 3051              		[CHAR] ( -- c )
 3052              		immediate version of CHAR 
 3053              	**********************************/
 3054 ???? 904B0000 		_HEADER IMCHAR,COMPO+IMEDD+6,"[CHAR]"
 3054      C65B4348 
 3054      41525D00 
 3055 ???? 504700BF 		_NEST 
 3056 ???? 994B0000 		_ADR CHAR
 3057 ???? 45550000 		_ADR LITER 
 3058 ???? B72F0000 		_UNNEST 
 3059              	
 3060              	/**********************************
 3061              	    WORD	( c -- a //  string> )
 3062              	 	Parse a word from input stream
 3063              		and copy it to code dictionary.
 3064              	***********************************/
 3065 ???? B44B0000 		_HEADER WORDD,4,"WORD"
 3065      04574F52 
 3065      440000BF 
 3066 ???? 504700BF 		_NEST
 3067 ???? CD4A0000 		_ADR	PARSE
 3068 ???? DD3F0000 		_ADR	HERE
 3069 ???? 69350000 		_ADR	CELLP
 3070 ???? 6D410000 		_ADR	PACKS
 3071 ???? B72F0000 		_UNNEST
 3072              	
 3073              	/********************************
 3074              	    TOKEN	( -- a //  string> )
 3075              	 	Parse a word from input 
 3076              		stream and copy it to 
 3077              		name dictionary.
 3078              	*********************************/
 3079 ???? D04B0000 		_HEADER TOKEN,5,"TOKEN"
 3079      05544F4B 
 3079      454E00BF 
 3080 ???? 504700BF 		_NEST
 3081 ???? 89350000 		_ADR	BLANK
 3082 ???? D94B0000 		_ADR	WORDD
 3083 ???? FD4D0000 		_ADR	UPPER 
 3084 ???? B72F0000 		_UNNEST
 3085              	
 3086              	/**********************
 3087              	  Dictionary search
 3088              	***********************/
 3089              	
 3090              	/*************************
 3091              	    >CFA	( nfa -- cfa )
 3092              	 	Return a code field address
 3093              		given a name field address.
 3094              	**************************/
 3095 ???? F44B0000 		_HEADER TOCFA,4,">CFA"
 3095      043E4346 
 3095      410000BF 
 3096 ???? 504700BF 		_NEST
 3097 ???? 41390000 		_ADR	COUNT
 3098 ???? D7310000 		_DOLIT	0x1F
ARM GAS  forth.s 			page 176


 3098      1F000000 
 3099 ???? 4D340000 		_ADR	ANDD
 3100 ???? CD340000 		_ADR	PLUS
 3101 ???? 1D3F0000 		_ADR	ALGND
 3102 ???? D7310000 		_DOLIT  1
 3102      01000000 
 3103 ???? 61340000 		_ADR    ORR    // set thum bit 
 3104 ???? B72F0000 		_UNNEST
 3105              	
 3106              	/***************************************
 3107              	    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3108              	 	Compare u bytes in two strings. 
 3109              		Return 0 if identical.
 3110              	
 3111              	  Picatout 2020-12-01, 
 3112              	    Because of problem with .align 
 3113              		directive that doesn't fill 
 3114              		with zero's I had to change 
 3115              		the "SAME?" and "SEARCH" 
 3116              	 	words  to do a byte by byte comparison. 
 3117              	****************************************/
 3118 ???? 144C0000 		_HEADER SAMEQ,5,"SAME?"
 3118      0553414D 
 3118      453F00BF 
 3119 ???? 504700BF 		_NEST
 3120 ???? FD320000 		_ADR	TOR
 3121 ???? 3F320000 		_BRAN	SAME2
 3121      A04C0000 
 3122              	SAME1:
 3123 ???? D1330000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3124 ???? CD320000 		_ADR	RAT   // a1 a2 a1 u 
 3125 ???? CD340000 		_ADR	PLUS  // a1 a2 a1+u 
 3126 ???? 8D320000 		_ADR	CAT	   // a1 a2 c1    		
 3127 ???? D1330000 		_ADR	OVER  // a1 a2 c1 a2 
 3128 ???? CD320000 		_ADR	RAT    
 3129 ???? CD340000 		_ADR	PLUS    
 3130 ???? 8D320000 		_ADR	CAT	  // a1 a2 c1 c2
 3131 ???? DD340000 		_ADR	SUBB  
 3132 ???? DD350000 		_ADR	QDUP
 3133 ???? 17320000 		_QBRAN	SAME2
 3133      A04C0000 
 3134 ???? 99320000 		_ADR	RFROM
 3135 ???? 71330000 		_ADR	DROP
 3136 ???? B72F0000 		_UNNEST	// strings not equal
 3137              	SAME2:
 3138 ???? F9310000 		_DONXT	SAME1
 3138      644C0000 
 3139 ???? D7310000 		_DOLIT	0
 3139      00000000 
 3140 ???? B72F0000 		_UNNEST	// strings equal
 3141              	
 3142              	/***********************************
 3143              	    SEARCH	( a na -- ca na | a F )
 3144              	 	Search a vocabulary for a string.
 3145              		Return ca and na if succeeded.
 3146              	hidden word used by NAME?
 3147              	
ARM GAS  forth.s 			page 177


 3148              	  Picatout 2020-12-01,  
 3149              		 Modified from original. 
 3150              	   See comment for word "SAME?" 
 3151              	************************************/
 3152              	SEARCH:
 3153 ???? 504700BF 		_NEST
 3154 ???? A1330000 		_ADR	SWAP			// na a	
 3155 ???? 41390000 		_ADR	COUNT			// na a+1 count
 3156 ???? 91330000 		_ADR	DUPP 
 3157 ???? 113A0000 		_ADR	TEMP
 3158 ???? 59320000 		_ADR	STORE			// na a+1 count 
 3159 ???? FD320000 		_ADR  TOR		// na a+1  R: count  
 3160 ???? A1330000 		_ADR	SWAP			// a+1 na
 3161              	SEARCH1:
 3162 ???? 91330000 		_ADR	DUPP			// a+1 na na
 3163 ???? 17320000 		_QBRAN	SEARCH6	// end of vocabulary
 3163      2C4D0000 
 3164 ???? 91330000 		_ADR	DUPP			// a+1 na na
 3165 ???? 8D320000 		_ADR	CAT			// a+1 na name1
 3166 ???? D7310000 		_DOLIT	MASKK
 3166      1FFFFFFF 
 3167 ???? 4D340000 		_ADR	ANDD
 3168 ???? CD320000 		_ADR	RAT			// a+1 na name1 count 
 3169 ???? 75340000 		_ADR	XORR			// a+1 na,  same length?
 3170 ???? 17320000 		_QBRAN	SEARCH2
 3170      144D0000 
 3171 ???? 79350000 		_ADR	CELLM			// a+1 la
 3172 ???? 6D320000 		_ADR	AT			// a+1 next_na
 3173 ???? 3F320000 		_BRAN	SEARCH1			// try next word
 3173      D44C0000 
 3174              	SEARCH2:   
 3175 ???? 29350000 		_ADR	ONEP			// a+1 na+1
 3176 ???? 113A0000 		_ADR	TEMP
 3177 ???? 6D320000 		_ADR	AT			// a+1 na+1 count
 3178 ???? 554C0000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3179              	SEARCH3:	
 3180 ???? 3F320000 		_BRAN	SEARCH4
 3180      444D0000 
 3181              	SEARCH6:	
 3182 ???? 99320000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3183 ???? 71330000 		_ADR	DROP			// a+1 0
 3184 ???? A1330000 		_ADR	SWAP			// 0 a+1
 3185 ???? 39350000 		_ADR	ONEM			// 0 a
 3186 ???? A1330000 		_ADR	SWAP			// a 0 
 3187 ???? B72F0000 		_UNNEST			// return without a match
 3188              	SEARCH4:	
 3189 ???? 17320000 		_QBRAN	SEARCH5			// a+1 na+1
 3189      604D0000 
 3190 ???? 39350000 		_ADR	ONEM			// a+1 na
 3191 ???? 79350000 		_ADR	CELLM			// a+4 la
 3192 ???? 6D320000 		_ADR	AT			// a+1 next_na
 3193 ???? 3F320000 		_BRAN	SEARCH1			// compare next name
 3193      D44C0000 
 3194              	SEARCH5:	
 3195 ???? 99320000 		_ADR	RFROM			// a+1 na+1 count
 3196 ???? 71330000 		_ADR	DROP			// a+1 na+1
 3197 ???? A1330000 		_ADR	SWAP			// na+1 a+1
ARM GAS  forth.s 			page 178


 3198 ???? 71330000 		_ADR	DROP			// na+1
 3199 ???? 39350000 		_ADR	ONEM			// na
 3200 ???? 91330000 		_ADR	DUPP			// na na
 3201 ???? 1D4C0000 		_ADR	TOCFA			// na cfa
 3202 ???? A1330000 		_ADR	SWAP			// cfa na
 3203 ???? B72F0000 		_UNNEST			//  return with a match
 3204              	
 3205              	/********************************
 3206              	    NAME?	( a -- ca na | a F )
 3207              	 	Search all context vocabularies 
 3208              		for a string.
 3209              	***********************************/
 3210 ???? 4C4C0000 		_HEADER NAMEQ,5,"NAME?"
 3210      054E414D 
 3210      453F00BF 
 3211 ???? 504700BF 		_NEST
 3212 ???? 993A0000 		_ADR	CNTXT
 3213 ???? 6D320000 		_ADR	AT
 3214 ???? B54C0000 		_ADR	SEARCH
 3215 ???? B72F0000 		_UNNEST
 3216              	
 3217              	/********************
 3218              	  console input
 3219              	********************/
 3220              	
 3221              	/****************************
 3222              		ASCIZ ( a -- a+ )
 3223              		convert counted string to 
 3224              		null terminated string 
 3225              		in pad.
 3226              	*****************************/
 3227 ???? 884D0000 		_HEADER ASCIZ,5,"ASCIZ" 
 3227      05415343 
 3227      495A00BF 
 3228 ???? 504700BF 		_NEST 
 3229 ???? 41390000 		_ADR COUNT
 3230 ???? 91330000 		_ADR DUPP
 3231 ???? FD320000 		_ADR TOR 
 3232 ???? F53F0000 		_ADR PAD 
 3233 ???? A1330000 		_ADR SWAP
 3234 ???? CD400000 		_ADR WMOVE  
 3235 ???? F53F0000 		_ADR PAD 
 3236 ???? 99320000 		_ADR RFROM
 3237 ???? CD340000 		_ADR PLUS 
 3238 ???? D7310000 		_DOLIT 0 
 3238      00000000 
 3239 ???? A1330000 		_ADR SWAP  
 3240 ???? 79320000 		_ADR CSTOR
 3241 ???? F53F0000 		_ADR PAD   
 3242 ???? B72F0000 		_UNNEST 
 3243              	
 3244              	/***********************
 3245              		UPPER (cstring -- cstring )
 3246              		convert to upper case in situ
 3247              	*******************************/
 3248 ???? A84D0000 		_HEADER UPPER,5,"UPPER"
 3248      05555050 
ARM GAS  forth.s 			page 179


 3248      455200BF 
 3249 ???? 504700BF 		_NEST 
 3250 ???? 91330000 		_ADR DUPP 
 3251 ???? FD320000 		_ADR TOR 
 3252 ???? 41390000 		_ADR COUNT
 3253 ???? D7310000 		_DOLIT 0x1f
 3253      1F000000 
 3254 ???? 4D340000 		_ADR ANDD
 3255 ???? FD320000 		_ADR TOR 
 3256 ???? 3F320000 		_BRAN 3f
 3256      704E0000 
 3257 ???? 91330000 	1:  _ADR DUPP 
 3258 ???? 41390000 		_ADR COUNT 
 3259 ???? 91330000 		_ADR DUPP 
 3260 ???? D7310000 		_DOLIT 'a'-1
 3260      60000000 
 3261 ???? A1380000 		_ADR GREAT
 3262 ???? 17320000 		_QBRAN 2f 
 3262      684E0000 
 3263 ???? 91330000 		_ADR DUPP 
 3264 ???? D7310000 		_DOLIT 'z'+1 
 3264      7B000000 
 3265 ???? 6D380000 		_ADR LESS 
 3266 ???? 17320000 		_QBRAN 2f 
 3266      684E0000 
 3267 ???? D7310000 		_DOLIT 0x5f  
 3267      5F000000 
 3268 ???? 4D340000 		_ADR ANDD
 3269 ???? 75360000 	2:	_ADR ROT
 3270 ???? 79320000 		_ADR CSTOR
 3271 ???? F9310000 	3:  _DONXT 1b
 3271      244E0000 
 3272 ???? 71330000 		_ADR DROP 
 3273 ???? 99320000 		_ADR RFROM
 3274 ???? B72F0000 		_UNNEST 
 3275              	
 3276              	/**************************************
 3277              	   BKSP  ( bot eot cur -- bot eot cur )
 3278              	   Move cursor left by one character.
 3279              	hidden word used by KTAP
 3280              	***************************************/
 3281              	BKSP:
 3282 ???? 504700BF 		_NEST
 3283 ???? FD320000 		_ADR	TOR
 3284 ???? D1330000 		_ADR	OVER
 3285 ???? 99320000 		_ADR	RFROM
 3286 ???? A1330000 		_ADR	SWAP
 3287 ???? D1330000 		_ADR	OVER
 3288 ???? 75340000 		_ADR	XORR
 3289 ???? 17320000 		_QBRAN	BACK1
 3289      CC4E0000 
 3290 ???? D7310000 		_DOLIT	BKSPP
 3290      08000000 
 3291 ???? 79300000 		_ADR	EMIT
 3292 ???? 39350000 		_ADR	ONEM
 3293 ???? 89350000 		_ADR	BLANK
 3294 ???? 79300000 		_ADR	EMIT
ARM GAS  forth.s 			page 180


 3295 ???? D7310000 		_DOLIT	BKSPP
 3295      08000000 
 3296 ???? 79300000 		_ADR	EMIT
 3297              	BACK1:
 3298 ???? B72F0000 		  _UNNEST
 3299              	
 3300              	/****************************************
 3301              	   TAP	 ( bot eot cur c -- bot eot cur )
 3302              	   Accept and echo the key stroke 
 3303              	   and bump the cursor.
 3304              	hidden word used by KTAP 
 3305              	****************************************/
 3306              	TAP:
 3307 ???? 504700BF 		_NEST
 3308 ???? 91330000 		_ADR	DUPP
 3309 ???? 79300000 		_ADR	EMIT
 3310 ???? D1330000 		_ADR	OVER
 3311 ???? 79320000 		_ADR	CSTOR
 3312 ???? 29350000 		_ADR	ONEP
 3313 ???? B72F0000 		_UNNEST
 3314              	
 3315              	
 3316              	/*******************************************
 3317              	    kTAP	( bot eot cur c -- bot eot cur )
 3318              	 	Process a key stroke, CR or backspace.
 3319              	hidden word used by ACCEPT 
 3320              	*******************************************/
 3321              	KTAP:
 3322              	TTAP:
 3323 ???? 504700BF 		_NEST
 3324 ???? 91330000 		_ADR	DUPP
 3325 ???? D7310000 		_DOLIT	CRR
 3325      0D000000 
 3326 ???? 75340000 		_ADR	XORR
 3327 ???? 17320000 		_QBRAN  KTAP2
 3327      304F0000 
 3328 ???? D7310000 		_DOLIT	BKSPP
 3328      08000000 
 3329 ???? 75340000 		_ADR	XORR
 3330 ???? 17320000 		_QBRAN	KTAP1
 3330      284F0000 
 3331 ???? 89350000 		_ADR	BLANK
 3332 ???? D14E0000 		_ADR	TAP
 3333 ???? B72F0000 		_UNNEST
 3334              	//	.word	0			// patch
 3335              	KTAP1:
 3336 ???? 854E0000 		_ADR	BKSP
 3337 ???? B72F0000 		_UNNEST
 3338              	KTAP2:
 3339 ???? 71330000 		_ADR	DROP
 3340 ???? A1330000 		_ADR	SWAP
 3341 ???? 71330000 		_ADR	DROP
 3342 ???? 91330000 		_ADR	DUPP
 3343 ???? B72F0000 		_UNNEST
 3344              	
 3345              	/************************************
 3346              	    ACCEPT	( b u -- b u )
ARM GAS  forth.s 			page 181


 3347              	 	Accept characters to input 
 3348              		buffer. Return with actual count.
 3349              	*************************************/
 3350 ???? F44D0000 		_HEADER ACCEP,6,"ACCEPT"
 3350      06414343 
 3350      45505400 
 3351 ???? 504700BF 		_NEST
 3352 ???? D1330000 		_ADR	OVER
 3353 ???? CD340000 		_ADR	PLUS
 3354 ???? D1330000 		_ADR	OVER
 3355              	ACCP1:
 3356 ???? C5360000 		_ADR	DDUP
 3357 ???? 75340000 		_ADR	XORR
 3358 ???? 17320000 		_QBRAN	ACCP4
 3358      A84F0000 
 3359 ???? 55300000 		_ADR	KEY
 3360 ???? 91330000 		_ADR	DUPP
 3361 ???? 89350000 		_ADR	BLANK
 3362 ???? D7310000 		_DOLIT 127
 3362      7F000000 
 3363 ???? AD3B0000 		_ADR	WITHI
 3364 ???? 17320000 		_QBRAN	ACCP2
 3364      9C4F0000 
 3365 ???? D14E0000 		_ADR	TAP
 3366 ???? 3F320000 		_BRAN	ACCP3
 3366      A04F0000 
 3367              	ACCP2:
 3368 ???? ED4E0000 		_ADR	KTAP
 3369              	ACCP3:	  
 3370 ???? 3F320000 		_BRAN	ACCP1
 3370      604F0000 
 3371              	ACCP4:
 3372 ???? 71330000 		_ADR	DROP
 3373 ???? D1330000 		_ADR	OVER
 3374 ???? DD340000 		_ADR	SUBB
 3375 ???? B72F0000 		_UNNEST
 3376              	
 3377              	/*****************************
 3378              	    QUERY	( -- )
 3379              	 	Accept input stream 
 3380              		to terminal input buffer.
 3381              	******************************/
 3382 ???? 484F0000 		_HEADER QUERY,5,"QUERY"
 3382      05515545 
 3382      525900BF 
 3383 ???? 504700BF 		_NEST
 3384 ???? 15400000 		_ADR	TIB
 3385 ???? D7310000 		_DOLIT 80
 3385      50000000 
 3386 ???? 514F0000 		_ADR	ACCEP
 3387 ???? 553A0000 		_ADR	NTIB
 3388 ???? 59320000 		_ADR	STORE
 3389 ???? 71330000 		_ADR	DROP
 3390 ???? D7310000 		_DOLIT	0
 3390      00000000 
 3391 ???? 3D3A0000 		_ADR	INN
 3392 ???? 59320000 		_ADR	STORE
ARM GAS  forth.s 			page 182


 3393 ???? B72F0000 		_UNNEST
 3394              	
 3395              	/*****************************
 3396              	  CORE EXT 
 3397              	  REFILL ( -- )
 3398              	  if SOURCE-ID== 0 call QUERY 
 3399              	  and return TRUE 
 3400              	  if SOURCE-ID=1 return FALSE 
 3401              	******************************/
 3402 ???? BC4F0000 		_HEADER REFILL,6,"REFILL"
 3402      06524546 
 3402      494C4C00 
 3403 ???? 504700BF 		_NEST 
 3404 ???? 2D400000 		_ADR	SOURCID 
 3405 ???? 17320000 		_QBRAN	1f
 3405      1C500000 
 3406 ???? CD370000 		_ADR	FALSE 
 3407 ???? B72F0000 		_UNNEST 
 3408 ???? C54F0000 	1:  _ADR	QUERY 
 3409 ???? E5370000 		_ADR	TRUE 
 3410 ???? B72F0000 		_UNNEST 
 3411              	
 3412              	/*****************************
 3413              	  CORE EXT 
 3414              		SAVE-INPUT ( -- n )
 3415              		if SOURCE-ID=0 STACK >IN @ 
 3416              		if SOURCE-ID=1 do nothing 
 3417              	*****************************/
 3418 ???? FC4F0000 		_HEADER SAVEINP,10,"SAVE-INPUT"
 3418      0A534156 
 3418      452D494E 
 3418      50555400 
 3419 ???? 504700BF 		_NEST 
 3420 ???? 2D400000 		_ADR SOURCID 
 3421 ???? 17320000 		_QBRAN 1f 
 3421      4C500000 
 3422 ???? B72F0000 		_UNNEST 
 3423 ???? 3D3A0000 	1:  _ADR	INN 
 3424 ???? 6D320000 		_ADR	AT 
 3425 ???? B72F0000 		_UNNEST 
 3426              	
 3427              	/*****************************
 3428              	  CORE EXT 
 3429              		RESTORE-INPUT ( n -- flag )
 3430              		if SOURCE-ID=0 n -> >IN stack FALSE 
 3431              		if SOURCE-ID=1 stack TRUE 
 3432              	***************************************/
 3433 ???? 2C500000 		_HEADER RESTINP,13,"RESTORE-INPUT"
 3433      0D524553 
 3433      544F5245 
 3433      2D494E50 
 3433      555400BF 
 3434 ???? 504700BF 		_NEST 
 3435 ???? 2D400000 		_ADR	SOURCID 
 3436 ???? 17320000 		_QBRAN	1f
 3436      84500000 
 3437 ???? E5370000 		_ADR	TRUE 
ARM GAS  forth.s 			page 183


 3438 ???? B72F0000 		_UNNEST 
 3439 ???? 3D3A0000 	1:  _ADR	INN  
 3440 ???? 59320000 		_ADR	STORE 
 3441 ???? CD370000 		_ADR	FALSE 
 3442 ???? B72F0000 		_UNNEST 
 3443              	
 3444              	
 3445              	/********************
 3446              	  Error handling
 3447              	********************/
 3448              	
 3449              	/*********************
 3450              	    ABORT	( a -- )
 3451              	 	Reset data stack 
 3452              		and jump to QUIT.
 3453              	**********************/
 3454 ???? 5C500000 		_HEADER ABORT,5,"ABORT"
 3454      0541424F 
 3454      525400BF 
 3455 ???? 504700BF 		_NEST
 3456              	ABORT1: 
 3457 ???? AD510000 		_ADR    LBRAC  
 3458 ???? 3D530000 		_ADR	PRESE
 3459 ???? D7310000 		_DOLIT  0 
 3459      00000000 
 3460 ???? 91330000 		_ADR    DUPP 
 3461 ???? D7310000 		_DOLIT  UPP+TOIN 
 3461      2C000020 
 3462 ???? 09390000 		_ADR    DSTOR 
 3463 ???? D7310000 		_DOLIT  TIBB 
 3463      B0FE0120 
 3464 ???? D7310000 		_DOLIT  UPP+TIBUF  
 3464      34000020 
 3465 ???? 59320000 		_ADR    STORE 
 3466 ???? D9460000 		_ADR    CR 
 3467 ???? 3F320000 		_BRAN	QUIT
 3467      54530000 
 3468              	
 3469              	
 3470              	/*******************************
 3471              		PRT_ABORT ( a -- )
 3472              	    print message and abort 
 3473              	input:
 3474              		a   address of counted string 	
 3475              	
 3476              	hidden word 
 3477              	*******************************/
 3478              	PRT_ABORT:
 3479 ???? 504700BF 		_NEST 
 3480 ???? 1D460000 		_ADR SPACE 
 3481 ???? 41390000 		_ADR COUNT 
 3482 ???? 71460000 		_ADR TYPEE 
 3483 ???? 1D460000 		_ADR  SPACE 
 3484 ???? D7310000 		_DOLIT '?'
 3484      3F000000 
 3485 ???? 79300000 		_ADR    EMIT 
 3486 ???? D9460000 		_ADR    CR 
ARM GAS  forth.s 			page 184


 3487 ???? 3F320000 		_BRAN   ABORT1 
 3487      A4500000 
 3488              	
 3489              	
 3490              	
 3491              	
 3492              	/*******************************
 3493              	    _abort"	( f -- )
 3494              	 	Run time routine of ABORT"
 3495              		Abort with a message.
 3496              	hidden used by compiler 
 3497              	********************************/
 3498              	ABORQ:
 3499 ???? 504700BF 		_NEST
 3500 ???? F9460000 		_ADR	DOSTR
 3501 ???? 75360000 		_ADR	ROT  
 3502 ???? 17320000 		_QBRAN	1f	// error flag
 3502      38510000 
 3503 ???? 1D460000 		_ADR    SPACE 
 3504 ???? 71460000 		_ADR    TYPEE
 3505 ???? D9460000 		_ADR    CR  
 3506 ???? 3F320000 		_BRAN   ABORT1
 3506      A4500000 
 3507              	1:
 3508 ???? 9D360000 		_ADR	DDROP
 3509 ???? B72F0000 		_UNNEST			// drop message
 3510              	
 3511              	
 3512              	/************************
 3513              	  The text interpreter
 3514              	************************/
 3515              	
 3516              	/***************************
 3517              	    $INTERPRET  ( a -- )
 3518              	 	Interpret a word. 
 3519              		If failed, try to 
 3520              		convert it to an integer.
 3521              	******************************/
 3522 ???? 98500000 		_HEADER INTER,10,"$INTERPRET"
 3522      0A24494E 
 3522      54455250 
 3522      52455400 
 3523 ???? 504700BF 		_NEST
 3524 ???? 914D0000 		_ADR	NAMEQ
 3525 ???? DD350000 		_ADR	QDUP	// ?defined
 3526 ???? 17320000 		_QBRAN	INTE1
 3526      90510000 
 3527 ???? 6D320000 		_ADR	AT
 3528 ???? D7310000 		_DOLIT	COMPO
 3528      40000000 
 3529 ???? 4D340000 		_ADR	ANDD	// ?compile only lexicon bits
 3530 ???? 11510000 		_ABORQ	13," compile only"
 3530      0D20636F 
 3530      6D70696C 
 3530      65206F6E 
 3530      6C7900BF 
 3531 ???? ED310000 		_ADR	EXECU
ARM GAS  forth.s 			page 185


 3532 ???? B72F0000 		_UNNEST			// execute defined word
 3533              	INTE1:
 3534 ???? F1450000 		_ADR	NUMBERQ
 3535 ???? 17320000 		_QBRAN	INTE2
 3535      A0510000 
 3536 ???? B72F0000 		_UNNEST
 3537              	INTE2:
 3538 ???? E5500000 		_ADR	PRT_ABORT	// error
 3539              	
 3540              	/******************************
 3541              	    [	   ( -- )
 3542              	 	Start the text interpreter.
 3543              	*******************************/
 3544 ???? 44510000 		_HEADER LBRAC,IMEDD+1,"["
 3544      815B00BF 
 3545 ???? 504700BF 		_NEST
 3546 ???? D7310000 		_DOLIT	INTER
 3546      50510000 
 3547 ???? 6D3A0000 		_ADR	TEVAL
 3548 ???? 59320000 		_ADR	STORE
 3549 ???? D7310000 		_DOLIT  0 
 3549      00000000 
 3550 ???? 79390000 		_ADR    STATE 
 3551 ???? 59320000 		_ADR    STORE 
 3552 ???? B72F0000 		_UNNEST
 3553              	
 3554              	/**********************
 3555              	    .OK	 ( -- )
 3556              	 	Display "ok" only 
 3557              		while interpreting.
 3558              	************************/
 3559 ???? A8510000 		_HEADER DOTOK,3,".OK"
 3559      032E4F4B 
 3560 ???? 504700BF 		_NEST
 3561 ???? D7310000 		_DOLIT	INTER
 3561      50510000 
 3562 ???? 6D3A0000 		_ADR	TEVAL
 3563 ???? 6D320000 		_ADR	AT
 3564 ???? 15380000 		_ADR	EQUAL
 3565 ???? 17320000 		_QBRAN	DOTO1
 3565      04520000 
 3566 ???? 35470000 		_DOTQP	3," ok"
 3566      03206F6B 
 3567              	DOTO1:
 3568 ???? D9460000 		_ADR	CR
 3569 ???? B72F0000 		_UNNEST
 3570              	
 3571              	/*************************
 3572              	    ?STACK	( -- )
 3573              	 	Abort if the data 
 3574              		stack underflows.
 3575              	************************/
 3576 ???? D8510000 		_HEADER QSTAC,6,"?STACK"
 3576      063F5354 
 3576      41434B00 
 3577 ???? 504700BF 		_NEST
 3578 ???? 853F0000 		_ADR	DEPTH
ARM GAS  forth.s 			page 186


 3579 ???? 01340000 		_ADR	ZLESS	// check only for underflow
 3580 ???? 11510000 		_ABORQ	9,"underflow"
 3580      09756E64 
 3580      6572666C 
 3580      6F7700BF 
 3581 ???? B72F0000 		_UNNEST
 3582              	
 3583              	/*******************
 3584              	    EVAL	( -- )
 3585              	 	Interpret the 
 3586              		input stream.
 3587              	*******************/
 3588 ???? 10520000 		_HEADER EVAL,4,"EVAL"
 3588      04455641 
 3588      4C0000BF 
 3589 ???? 504700BF 		_NEST
 3590              	EVAL1:
 3591 ???? FD4B0000 	    _ADR	TOKEN
 3592 ???? 91330000 		_ADR	DUPP
 3593 ???? 8D320000 		_ADR	CAT	// ?input stream empty
 3594 ???? 17320000 		_QBRAN	EVAL2
 3594      70520000 
 3595 ???? 6D3A0000 		_ADR	TEVAL
 3596 ???? 69400000 		_ADR	ATEXE
 3597 ???? 19520000 		_ADR	QSTAC	// evaluate input, check stack
 3598 ???? 3F320000 		_BRAN	EVAL1
 3598      48520000 
 3599              	EVAL2:
 3600 ???? 71330000 		_ADR	DROP
 3601 ???? DD510000 		_ADR	DOTOK
 3602 ???? B72F0000 		_UNNEST	// prompt
 3603              	
 3604              	
 3605              	/******************************
 3606              		EVALUATE ( ix* a u -- jx* )
 3607              	    interpret string 
 3608              	input:
 3609              	    ix*  argument required 
 3610              		a   address string to interpret 
 3611              		u   str length 
 3612              	output:
 3613              		jx*  evalution results 
 3614              	***********************************/
 3615 ???? 3C520000 		_HEADER EVALUATE,8,"EVALUATE"
 3615      08455641 
 3615      4C554154 
 3615      450000BF 
 3616 ???? 504700BF 		_NEST 
 3617              		// save original source specs
 3618 ???? D7310000 		_DOLIT UPP+TOIN 
 3618      2C000020 
 3619 ???? 91330000 		_ADR   DUPP 
 3620 ???? 6D320000 		_ADR  AT 
 3621 ???? FD320000 		_ADR   TOR 
 3622 ???? D7310000 		_DOLIT  0
 3622      00000000 
 3623 ???? A1330000 		_ADR  SWAP
ARM GAS  forth.s 			page 187


 3624 ???? 59320000 		_ADR   STORE 
 3625 ???? D7310000 		_DOLIT UPP+SRC 
 3625      24220020 
 3626 ???? 29390000 		_ADR   DAT 
 3627 ???? 11330000 		_ADR   DTOR 
 3628 ???? D7310000 		_DOLIT -1
 3628      FFFFFFFF 
 3629 ???? D7310000 		_DOLIT UPP+SRCID 
 3629      D0000020 
 3630 ???? 59320000 		_ADR   STORE 
 3631 ???? D7310000 		_DOLIT UPP+SRC 
 3631      24220020 
 3632 ???? 09390000 		_ADR   DSTOR
 3633              		// clear BLK 
 3634 ???? D7310000 		_DOLIT	0 
 3634      00000000 
 3635 ???? 6D210000 		_ADR	BLK 
 3636 ???? 6D320000 		_ADR	AT 
 3637 ???? 45520000 		_ADR   EVAL 
 3638              	    // restore original source specs 
 3639 ???? AD320000 		_ADR   DRFROM 
 3640 ???? D7310000 		_DOLIT UPP+SRC 
 3640      24220020 
 3641 ???? 09390000 		_ADR   DSTOR 
 3642 ???? 99320000 		_ADR   RFROM 
 3643 ???? D7310000 		_DOLIT UPP+TOIN 
 3643      2C000020 
 3644 ???? 59320000 		_ADR   STORE 
 3645 ???? D7310000 		_DOLIT 0 
 3645      00000000 
 3646 ???? D7310000 		_DOLIT UPP+SRCID 
 3646      D0000020 
 3647 ???? 59320000 		_ADR   STORE 
 3648 ???? B72F0000 		_UNNEST 
 3649              	
 3650              	
 3651              	/**********************************
 3652              	    PRESET	( -- )
 3653              	 	Reset data stack pointer 
 3654              		and the terminal input buffer.
 3655              	**********************************/
 3656 ???? 80520000 		_HEADER PRESE,6,"PRESET"
 3656      06505245 
 3656      53455400 
 3657 ???? 4FF6B067 		_MOV32 DSP,SPP 
 3657      C2F20107 
 3658 ???? FDF734BE 		_NEXT 
 3659              	
 3660              	
 3661              	/*********************
 3662              	    QUIT	( -- )
 3663              	 	Reset return stack 
 3664              		pointer and start 
 3665              		text interpreter.
 3666              	***********************/
 3667 ???? 34530000 		_HEADER QUIT,4,"QUIT"
 3667      04515549 
ARM GAS  forth.s 			page 188


 3667      540000BF 
 3668 ???? D7310000 		_DOLIT RPP 
 3668      80FF0120 
 3669 ???? 2D330000 		_ADR RPSTOR 
 3670              	QUIT1:
 3671 ???? AD510000 		_ADR	LBRAC			// start interpretation
 3672              	QUIT2:
 3673 ???? C54F0000 		_ADR	QUERY			// get input
 3674 ???? 45520000 		_ADR	EVAL
 3675 ???? 3F320000 		_BRAN	QUIT2	// continue till error
 3675      64530000 
 3676              	
 3677              	/***************************
 3678              		FORGET ( <string> -- )
 3679              		forget all definition 
 3680              		starting at <string>
 3681              	****************************/
 3682 ???? 4C530000 		_HEADER FORGET,6,"FORGET"
 3682      06464F52 
 3682      47455400 
 3683 ???? 504700BF 		_NEST 
 3684 ???? FD4B0000 		_ADR TOKEN 
 3685 ???? 91330000 		_ADR DUPP 
 3686 ???? 17320000 		_QBRAN 9f 
 3686      C8530000 
 3687 ???? 914D0000 		_ADR NAMEQ // ( a -- cfa na | a 0 )
 3688 ???? DD350000 		_ADR QDUP 
 3689 ???? 17320000 		_QBRAN 8f
 3689      C4530000 
 3690 ???? 79350000 		_ADR CELLM // ( cfa la )
 3691 ???? 91330000 		_ADR DUPP 
 3692 ???? AD3A0000 		_ADR CPP   
 3693 ???? 59320000 		_ADR STORE
 3694 ???? 6D320000 		_ADR AT 
 3695 ???? FD3A0000 		_ADR LAST 
 3696 ???? 59320000 		_ADR STORE
 3697 ???? 155E0000 		_ADR OVERT 
 3698 ???? 71330000 	8:  _ADR DROP 
 3699 ???? B72F0000 	9:	_UNNEST 
 3700              	
 3701              		.p2align 2 
 3702              	
 3703              	/*****************
 3704              	  The compiler
 3705              	******************/
 3706              	
 3707              	/**************************************
 3708              		POSTPONE <name> ( -- )
 3709              		use to compile immediate word 
 3710              	**************************************/
 3711 ???? 78530000 		_HEADER POSTPONE,COMPO+IMEDD+8,"POSTPONE"
 3711      C8504F53 
 3711      54504F4E 
 3711      450000BF 
 3712 ???? 504700BF 		_NEST 
 3713 ???? 19540000 		_ADR ITICK
 3714 ???? 955E0000 		_ADR CALLC  
ARM GAS  forth.s 			page 189


 3715 ???? B72F0000 		_UNNEST 
 3716              	
 3717              	
 3718              	/**************************************
 3719              	    '	   ( -- ca )
 3720              	 	Search context vocabularies 
 3721              		for the next word in input stream.
 3722              	***************************************/
 3723 ???? D0530000 		_HEADER TICK,1,"'"
 3723      012700BF 
 3724 ???? 504700BF 		_NEST
 3725 ???? FD4B0000 		_ADR	TOKEN
 3726 ???? 914D0000 		_ADR	NAMEQ	// ?defined
 3727 ???? 17320000 		_QBRAN	TICK1
 3727      0C540000 
 3728 ???? B72F0000 		_UNNEST	// yes, push code address
 3729              	TICK1:
 3730 ???? E5500000 		_ADR PRT_ABORT	// error
 3731              	
 3732              	/*****************************************
 3733              		['] ( -- ca )
 3734              		immediate version of ' 
 3735              	****************************************/
 3736 ???? F0530000 		_HEADER ITICK,COMPO+IMEDD+3,"[']"
 3736      C35B275D 
 3737 ???? 504700BF 		_NEST 
 3738 ???? F5530000 		_ADR TICK  
 3739 ???? B72F0000 		_UNNEST 
 3740              	
 3741              	
 3742              	/***********************************
 3743              		FIND ( c-adr -- c-adr 0 | xt 1 | xt -1 )
 3744              		search all context for name at 
 3745              		c-adr 
 3746              	input:
 3747              		c-adr   name 
 3748              	output:
 3749              		c-adr  0   not found 
 3750              		xt 1   found word immediate 
 3751              		xt -1  found normal word 
 3752              	***********************************/
 3753 ???? 14540000 		_HEADER FIND,4,"FIND"
 3753      0446494E 
 3753      440000BF 
 3754 ???? 504700BF 		_NEST 
 3755 ???? 914D0000 		_ADR NAMEQ 
 3756 ???? 91330000 		_ADR DUPP 
 3757 ???? 17320000 		_QBRAN 9f
 3757      70540000 
 3758 ???? 8D320000 		_ADR CAT 
 3759 ???? D7310000 		_DOLIT IMEDD
 3759      80000000 
 3760 ???? 4D340000 		_ADR ANDD 
 3761 ???? D7310000 		_DOLIT 7 
 3761      07000000 
 3762 ???? A5340000 		_ADR RSHIFT  
 3763 ???? 91330000 		_ADR DUPP 
ARM GAS  forth.s 			page 190


 3764 ???? 2B320000 		_TBRAN 9f 
 3764      70540000 
 3765 ???? 61370000 		_ADR INVER 
 3766 ???? B72F0000 	9:	_UNNEST 
 3767              	
 3768              	
 3769              	
 3770              	/***********************
 3771              	    ALLOT	( n -- )
 3772              	 	Allocate n bytes to 
 3773              		the ram area.
 3774              	************************/
 3775 ???? 28540000 		_HEADER ALLOT,5,"ALLOT"
 3775      05414C4C 
 3775      4F5400BF 
 3776 ???? 504700BF 		_NEST
 3777 ???? AD3A0000 		_ADR	CPP
 3778 ???? ED380000 		_ADR	PSTOR
 3779 ???? B72F0000 		_UNNEST			// adjust code pointer
 3780              	
 3781              	/******************************
 3782              	    ,	   ( w -- )
 3783              	 	Compile an integer 
 3784              		into dataspace.
 3785              	******************************/
 3786 ???? 78540000 		_HEADER COMMA,1,","
 3786      012C00BF 
 3787 ???? 504700BF 		_NEST
 3788 ???? DD3F0000 		_ADR	HERE
 3789 ???? 91330000 		_ADR	DUPP
 3790 ???? 69350000 		_ADR	CELLP	// cell boundary
 3791 ???? AD3A0000 		_ADR	CPP
 3792 ???? 59320000 		_ADR	STORE
 3793 ???? 59320000 		_ADR	STORE
 3794 ???? B72F0000 		_UNNEST	// adjust code pointer, compile
 3795              		.p2align 2 
 3796              	
 3797              	/***********************************
 3798              		C, ( c -- )
 3799              		compile 1 character into 
 3800              		dataspace 
 3801              	************************************/
 3802 ???? 94540000 		_HEADER CCOMMA,2,"C,"
 3802      02432C00 
 3803 ???? 504700BF 		_NEST 
 3804 ???? DD3F0000 		_ADR 	HERE 
 3805 ???? 91330000 		_ADR	DUPP 
 3806 ???? 29350000 		_ADR    ONEP 
 3807 ???? AD3A0000 		_ADR    CPP 
 3808 ???? 59320000 		_ADR    STORE 
 3809 ???? 79320000 		_ADR    CSTOR 
 3810 ???? B72F0000 		_UNNEST 
 3811              	
 3812              	/************************************
 3813              	    [COMPILE]   ( -- //  string> )
 3814              	 	Compile the next immediate word 
 3815              		into code dictionary.
ARM GAS  forth.s 			page 191


 3816              	*************************************/
 3817 ???? BC540000 		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3817      895B434F 
 3817      4D50494C 
 3817      455D00BF 
 3818 ???? 504700BF 		_NEST
 3819 ???? F5530000 		_ADR	TICK
 3820 ???? 99540000 		_ADR	COMMA
 3821 ???? B72F0000 		_UNNEST
 3822              	
 3823              	/****************************
 3824              	    COMPILE	( -- )
 3825              	 	Compile the next address 
 3826              		in colon list to code 
 3827              		dictionary.
 3828              	*******************************/
 3829 ???? E4540000 		_HEADER COMPI,COMPO+7,"COMPILE"
 3829      47434F4D 
 3829      50494C45 
 3830 ???? 504700BF 		_NEST
 3831 ???? 99320000 		_ADR	RFROM
 3832 ???? 91330000 		_ADR	DUPP 
 3833 ???? 6D320000 		_ADR	AT
 3834 ???? D7310000 		_DOLIT 1 
 3834      01000000 
 3835 ???? 61340000 		_ADR	ORR 
 3836 ???? 99540000 		_ADR	COMMA 
 3837 ???? 69350000 		_ADR	CELLP 
 3838 ???? FD320000 		_ADR	TOR 
 3839 ???? B72F0000 		_UNNEST	// adjust return address
 3840              	
 3841              	/*************************
 3842              	    LITERAL	( w -- )
 3843              	 	Compile tos to code 
 3844              		dictionary as an 
 3845              		integer literal.
 3846              	***************************/
 3847 ???? 04550000 		_HEADER LITER,IMEDD+7,"LITERAL"
 3847      874C4954 
 3847      4552414C 
 3848 ???? 504700BF 		_NEST
 3849 ???? D7310000 		_COMPI	DOLIT
 3849      D7310000 
 3849      99540000 
 3850 ???? 99540000 		_ADR	COMMA
 3851 ???? B72F0000 		_UNNEST
 3852              	
 3853              	/********************
 3854              	    $,"	( -- )
 3855              	 	Compile a literal 
 3856              		string up to next " .
 3857              	hidden word 
 3858              	************************/
 3859              	STRCQ:
 3860 ???? 504700BF 		_NEST
 3861 ???? D7310000 		_DOLIT -4
 3861      FCFFFFFF 
ARM GAS  forth.s 			page 192


 3862 ???? AD3A0000 		_ADR	CPP
 3863 ???? ED380000 		_ADR	PSTOR
 3864 ???? D7310000 		_DOLIT	'\"'
 3864      22000000 
 3865 ???? D94B0000 		_ADR	WORDD	// move word to code dictionary
 3866 ???? 41390000 		_ADR	COUNT
 3867 ???? CD340000 		_ADR	PLUS
 3868 ???? 1D3F0000 		_ADR	ALGND	// calculate aligned end of string
 3869 ???? AD3A0000 		_ADR	CPP
 3870 ???? 59320000 		_ADR	STORE   // adjust the code pointer
 3871 ???? B72F0000 		_UNNEST 			
 3872              	
 3873              	/*******************
 3874              	   Structures
 3875              	*******************/
 3876              	
 3877              	/*************************
 3878              	    FOR	 ( -- a )
 3879              	 	Start a FOR-NEXT loop 
 3880              		structure in a colon 
 3881              		definition.
 3882              	**************************/
 3883 ???? 3C550000 		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3883      C3464F52 
 3884 ???? 504700BF 		_NEST
 3885 ???? D7310000 		_COMPI	TOR
 3885      FD320000 
 3885      99540000 
 3886 ???? DD3F0000 		_ADR	HERE
 3887 ???? B72F0000 		_UNNEST
 3888              	
 3889              	/********************************
 3890              		DO ( limit start -- a 0 )
 3891              		initialise a DO...LOOP 
 3892              		or DO...+LOOP 
 3893              	********************************/
 3894 ???? 98550000 		_HEADER DO,COMPO+IMEDD+2,"DO"
 3894      C2444F00 
 3895 ???? 504700BF 		_NEST
 3896 ???? D7310000 		_COMPI DTOR 
 3896      11330000 
 3896      99540000 
 3897 ???? DD3F0000 		_ADR HERE 
 3898 ???? D7310000 		_DOLIT 0  // end marker used by resolve_leave 
 3898      00000000 
 3899 ???? B72F0000 		_UNNEST 
 3900              		
 3901              	/******************************
 3902              		?DO ( limit start -- a )	
 3903              	    initialise conditional 
 3904              		?DO ... LOOP 	
 3905              		at run time abort loop 
 3906              		if limit = start 
 3907              	******************************/
 3908 ???? B8550000 		_HEADER QDO,COMPO+IMEDD+3,"?DO"
 3908      C33F444F 
 3909 ???? 504700BF 		_NEST 
ARM GAS  forth.s 			page 193


 3910 ???? D7310000 		_COMPI  DDUP
 3910      C5360000 
 3910      99540000 
 3911 ???? D7310000 		_COMPI  EQUAL 
 3911      15380000 
 3911      99540000 
 3912 ???? D7310000 		_COMPI  QBRAN
 3912      17320000 
 3912      99540000 
 3913 ???? DD3F0000 		_ADR    HERE 
 3914 ???? D7310000 		_DOLIT  0 
 3914      00000000 
 3915 ???? 99540000 		_ADR    COMMA 
 3916 ???? D7310000 		_COMPI  DDROP  
 3916      9D360000 
 3916      99540000 
 3917 ???? D7310000 		_COMPI  EXIT 
 3917      51320000 
 3917      99540000 
 3918 ???? DD3F0000 		_ADR    HERE 
 3919 ???? A1330000 		_ADR    SWAP 
 3920 ???? 59320000 		_ADR    STORE  
 3921 ???? BD550000 		_ADR    DO 
 3922 ???? B72F0000 		_UNNEST 
 3923              	
 3924              	DOPLOOP: // ( n -- R: limit counter )
 3925 ???? 3246     		mov T2,TOS 
 3926 ???? 57F8046B 		_POP 
 3927 ???? B8E80300 		ldmfd RSP!,{T0,T1}
 3928 ???? 1044     		add T0,T2 
 3929 ???? 28E90300 		stmfd RSP!,{T0,T1}
 3930 ???? 8842     		cmp T0,T1 
 3931 ???? 05D4     		bmi 9f 
 3932 ???? 08F10808 		add RSP,#8
 3933 ???? 0CF1040C 		add IP,#4
 3934 ???? FDF7A4BC 		_NEXT 
 3935 ???? DCF800C0 	9:  ldr IP,[IP]
 3936 ???? FDF7A0BC 		_NEXT 
 3937              	
 3938              	
 3939              	/***************************
 3940              		+LOOP ( a -- )
 3941              		increment counter 
 3942              		end loop if countr>limit
 3943              	****************************/
 3944 ???? E0550000 		_HEADER PLOOP,COMPO+IMEDD+5,"+LOOP"
 3944      C52B4C4F 
 3944      4F5000BF 
 3945 ???? 504700BF 		_NEST 
 3946 ???? D7310000 		_COMPI DOPLOOP 
 3946      49560000 
 3946      99540000 
 3947 ???? C1560000 		_ADR resolve_leave 
 3948 ???? 99540000 		_ADR COMMA
 3949 ???? B72F0000 		_UNNEST 
 3950              	
 3951              	DOLOOP: // ( -- R: limit counter )
ARM GAS  forth.s 			page 194


 3952 ???? D8F80000 		ldr T0,[RSP]
 3953 ???? 00F10100 		add T0,#1
 3954 ???? C8F80000 		str T0,[RSP]
 3955 ???? D8F80410 		ldr T1,[RSP,#4]
 3956 ???? 8842     		cmp T0,T1 
 3957 ???? 05D4     		bmi 9f
 3958 ???? 08F10808 		add RSP,#8  // drop counter and limit  
 3959 ???? 0CF1040C 		add IP,IP,#4 // skip loop address 
 3960 ???? FDF77CBC 		_NEXT 
 3961 ???? DCF800C0 	9:  ldr IP,[IP]
 3962 ???? FDF778BC 		_NEXT 
 3963              	
 3964              	
 3965              	resolve_leave:
 3966 ???? 504700BF 		_NEST
 3967 ???? DD350000 	1:	_ADR QDUP 
 3968 ???? 17320000 		_QBRAN 2f 
 3968      E8560000 
 3969 ???? DD3F0000 		_ADR HERE 
 3970 ???? 69350000 		_ADR CELLP 
 3971 ???? A1330000 		_ADR SWAP 
 3972 ???? 59320000 		_ADR STORE 
 3973 ???? 3F320000 		_BRAN 1b 
 3973      C4560000 
 3974              	2:
 3975 ???? B72F0000 		_UNNEST 
 3976              	
 3977              	/********************************
 3978              		LOOP ( a -- )
 3979              		increment counter 
 3980              		end loop if >= limit 
 3981              	*********************************/
 3982 ???? 74560000 		_HEADER LOOP,COMPO+IMEDD+4,"LOOP"
 3982      C44C4F4F 
 3982      500000BF 
 3983 ???? 504700BF 		_NEST 
 3984 ???? D7310000 		_COMPI DOLOOP
 3984      99560000 
 3984      99540000 
 3985 ???? C1560000 		_ADR resolve_leave 
 3986 ???? 99540000 		_ADR COMMA  // resolve loop branch 
 3987 ???? B72F0000 		_UNNEST 
 3988              	
 3989              	/************************************
 3990              		UNLOOP ( -- ) ( R: limit count -- )
 3991              		remove loop parameters from rstack 
 3992              	****************************************/
 3993 ???? F0560000 		_HEADER UNLOOP,6,"UNLOOP"
 3993      06554E4C 
 3993      4F4F5000 
 3994 ???? 08F10808 		add RSP,#2*CELLL 
 3995 ???? FDF744BC 		_NEXT 
 3996              	
 3997              	
 3998              	/*********************************
 3999              		LEAVE ( -- ) ( R: loop-sys -- ) 
 4000              		exit inner DO...LOOP 
ARM GAS  forth.s 			page 195


 4001              	**********************************/
 4002 ???? 18570000 		_HEADER LEAVE,COMPO+IMEDD+5,"LEAVE"
 4002      C54C4541 
 4002      564500BF 
 4003 ???? 504700BF 		_NEST 
 4004 ???? D7310000 		_COMPI DOLEAVE
 4004      69570000 
 4004      99540000 
 4005 ???? DD3F0000 		_ADR HERE
 4006 ???? D1330000 		_ADR OVER 
 4007 ???? 17320000 		_QBRAN 1f
 4007      58570000 
 4008 ???? A1330000 		_ADR SWAP 
 4009 ???? D7310000 	1:	_DOLIT 0 
 4009      00000000 
 4010 ???? 99540000 		_ADR COMMA   
 4011 ???? B72F0000 		_UNNEST 
 4012              	
 4013              	// LEAVE runtime
 4014              	// remove limit and counter from rstack  
 4015              	DOLEAVE:
 4016 ???? 08F10808 		add RSP,#2*CELLL
 4017 ???? DCF800C0 		ldr IP,[IP] 
 4018 ???? FDF71EBC 		_NEXT 
 4019              	
 4020              	
 4021              	/**********************
 4022              	    BEGIN	( -- a )
 4023              	 	Start an infinite 
 4024              		or indefinite 
 4025              		loop structure.
 4026              	************************/
 4027 ???? 2C570000 		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 4027      C5424547 
 4027      494E00BF 
 4028 ???? 504700BF 		_NEST
 4029 ???? DD3F0000 		_ADR	HERE
 4030 ???? B72F0000 		_UNNEST
 4031              		.p2align 2 
 4032              	
 4033              	/********************
 4034              	    NEXT	( a -- )
 4035              	 	Terminate a FOR-NEXT
 4036              		loop structure.
 4037              	**************************/
 4038 ???? 78570000 		_HEADER FNEXT,COMPO+IMEDD+4,"NEXT"	
 4038      C44E4558 
 4038      540000BF 
 4039 ???? 504700BF 		_NEST
 4040 ???? D7310000 		_COMPI	DONXT
 4040      F9310000 
 4040      99540000 
 4041 ???? 99540000 		_ADR	COMMA
 4042 ???? B72F0000 		_UNNEST
 4043              	
 4044              	/***************************
 4045              		I ( -- n )
ARM GAS  forth.s 			page 196


 4046              		stack for loop counter 
 4047              	***************************/
 4048 ???? 90570000 		_HEADER I,1+COMPO,"I"
 4048      414900BF 
 4049 ???? 47F8046D 		_PUSH 
 4050 ???? D8F80060 		ldr TOS,[RSP]
 4051 ???? FDF7F6BB 		_NEXT 
 4052              	
 4053              	/****************************
 4054              		J ( -- n )
 4055              		stack outer loop counter 
 4056              	****************************/
 4057 ???? B4570000 		_HEADER J,1,"J"
 4057      014A00BF 
 4058 ???? 47F8046D 		_PUSH 
 4059 ???? D8F80460 		ldr TOS,[RSP,#4]
 4060 ???? FDF7ECBB 		_NEXT 
 4061              	
 4062              	/**********************
 4063              	    UNTIL	( a -- )
 4064              	 	Terminate a BEGIN-UNTIL
 4065              		indefinite loop structure.
 4066              	******************************/
 4067 ???? C8570000 		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 4067      C5554E54 
 4067      494C00BF 
 4068 ???? 504700BF 		_NEST
 4069 ???? D7310000 		_COMPI	QBRAN
 4069      17320000 
 4069      99540000 
 4070 ???? 99540000 		_ADR	COMMA
 4071 ???? B72F0000 		_UNNEST
 4072              	
 4073              	/**********************
 4074              	    AGAIN	( a -- )
 4075              	 	Terminate a BEGIN-AGAIN
 4076              		infinite loop structure.
 4077              	*****************************/
 4078 ???? DC570000 		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 4078      C5414741 
 4078      494E00BF 
 4079 ???? 504700BF 		_NEST
 4080 ???? D7310000 		_COMPI	BRAN
 4080      3F320000 
 4080      99540000 
 4081 ???? 99540000 		_ADR	COMMA
 4082 ???? B72F0000 		_UNNEST
 4083              	
 4084              	/************************
 4085              	    IF	  ( -- A )
 4086              	 	Begin a conditional
 4087              		branch structure.
 4088              	**************************/
 4089 ???? 00580000 		_HEADER IFF,COMPO+IMEDD+2,"IF"
 4089      C2494600 
 4090 ???? 504700BF 		_NEST
 4091 ???? D7310000 		_COMPI	QBRAN
ARM GAS  forth.s 			page 197


 4091      17320000 
 4091      99540000 
 4092 ???? DD3F0000 		_ADR	HERE
 4093 ???? D7310000 		_DOLIT	4
 4093      04000000 
 4094 ???? AD3A0000 		_ADR	CPP
 4095 ???? ED380000 		_ADR	PSTOR
 4096 ???? B72F0000 		_UNNEST
 4097              	
 4098              	/*************************
 4099              	    AHEAD	( -- A )
 4100              	 	Compile a forward 
 4101              		branch instruction.
 4102              	*************************/
 4103 ???? 24580000 		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 4103      C5414845 
 4103      414400BF 
 4104 ???? 504700BF 		_NEST
 4105 ???? D7310000 		_COMPI	BRAN
 4105      3F320000 
 4105      99540000 
 4106 ???? DD3F0000 		_ADR	HERE
 4107 ???? D7310000 		_DOLIT	4
 4107      04000000 
 4108 ???? AD3A0000 		_ADR	CPP
 4109 ???? ED380000 		_ADR	PSTOR
 4110 ???? B72F0000 		_UNNEST
 4111              	
 4112              	/**************************
 4113              	    REPEAT	( A a -- )
 4114              	 	Terminate a BEGIN-WHILE-REPEAT
 4115              		indefinite loop.
 4116              	**********************************/
 4117 ???? 54580000 		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 4117      C6524550 
 4117      45415400 
 4118 ???? 504700BF 		_NEST
 4119 ???? 09580000 		_ADR	AGAIN
 4120 ???? DD3F0000 		_ADR	HERE
 4121 ???? A1330000 		_ADR	SWAP
 4122 ???? 59320000 		_ADR	STORE
 4123 ???? B72F0000 		_UNNEST
 4124              	
 4125              	/*********************
 4126              	    THEN	( A -- )
 4127              	 	Terminate a conditional
 4128              		branch structure.
 4129              	*****************************/
 4130 ???? 88580000 		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 4130      C4544845 
 4130      4E0000BF 
 4131 ???? 504700BF 		_NEST
 4132 ???? DD3F0000 		_ADR	HERE
 4133 ???? A1330000 		_ADR	SWAP
 4134 ???? 59320000 		_ADR	STORE
 4135 ???? B72F0000 		_UNNEST
 4136              	
ARM GAS  forth.s 			page 198


 4137              	/***************************
 4138              	    AFT	 ( a -- a A )
 4139              	 	Jump to THEN in a 
 4140              		FOR-AFT-THEN-NEXT loop 
 4141              		the first time through.
 4142              	*****************************/
 4143 ???? AC580000 		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 4143      C3414654 
 4144 ???? 504700BF 		_NEST
 4145 ???? 71330000 		_ADR	DROP
 4146 ???? 5D580000 		_ADR	AHEAD
 4147 ???? 81570000 		_ADR	BEGIN
 4148 ???? A1330000 		_ADR	SWAP
 4149 ???? B72F0000 		_UNNEST
 4150              	
 4151              	/**********************
 4152              	    ELSE	( A -- A )
 4153              	 	Start the false 
 4154              		clause in an 
 4155              		IF-ELSE-THEN structure.
 4156              	****************************/
 4157 ???? CC580000 		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 4157      C4454C53 
 4157      450000BF 
 4158 ???? 504700BF 		_NEST
 4159 ???? 5D580000 		_ADR	AHEAD
 4160 ???? A1330000 		_ADR	SWAP
 4161 ???? B5580000 		_ADR	THENN
 4162 ???? B72F0000 		_UNNEST
 4163              	
 4164              	/**************************
 4165              	    WHILE	( a -- A a )
 4166              	 	Conditional branch out 
 4167              		of a BEGIN-WHILE-REPEAT loop.
 4168              	*********************************/
 4169 ???? EC580000 		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 4169      C5574849 
 4169      4C4500BF 
 4170 ???? 504700BF 		_NEST
 4171 ???? 29580000 		_ADR	IFF
 4172 ???? A1330000 		_ADR	SWAP
 4173 ???? B72F0000 		_UNNEST
 4174              	
 4175              	/**********************************
 4176              		CASE ( -- 0 )
 4177              		put a 0 on stack as a marker 
 4178              		for end of BRANCH list to 
 4179              		resolve by ENDCASE 
 4180              	***********************************/
 4181 ???? 0C590000 		_HEADER CASE,COMPO+IMEDD+4,"CASE"
 4181      C4434153 
 4181      450000BF 
 4182 ???? 504700BF 		_NEST 
 4183 ???? D7310000 		_DOLIT 0 
 4183      00000000 
 4184 ???? B72F0000 		_UNNEST 
 4185              	
ARM GAS  forth.s 			page 199


 4186              	/**********************************
 4187              		OF ( -- a )
 4188              		compile code for value comparison
 4189              		and add address of slot to be 
 4190              		resolved by ENDOF 
 4191              	*********************************/
 4192 ???? 28590000 		_HEADER OF,COMPO+IMEDD+2,"OF"
 4192      C24F4600 
 4193 ???? 504700BF 		_NEST 
 4194 ???? D7310000 		_COMPI OVER 
 4194      D1330000 
 4194      99540000 
 4195 ???? D7310000 		_COMPI EQUAL  
 4195      15380000 
 4195      99540000 
 4196 ???? D7310000 		_COMPI QBRAN 
 4196      17320000 
 4196      99540000 
 4197 ???? DD3F0000 		_ADR	HERE  
 4198 ???? D7310000 		_DOLIT 0 
 4198      00000000 
 4199 ???? 99540000 		_ADR COMMA 
 4200 ???? B72F0000 		_UNNEST
 4201              	
 4202              	/**********************************
 4203              		ENDOF ( a1 -- a2 )
 4204              		resolve QBRAN of predecing OF 
 4205              		and add slot for forward BRANCH 
 4206              		to be resolved by ENDCASE 
 4207              	**********************************/
 4208 ???? 44590000 		_HEADER ENDOF,COMPO+IMEDD+5,"ENDOF"
 4208      C5454E44 
 4208      4F4600BF 
 4209 ???? 504700BF 		_NEST
 4210 ???? D7310000 		_COMPI	BRAN 
 4210      3F320000 
 4210      99540000 
 4211 ???? D7310000 		_DOLIT	0 
 4211      00000000 
 4212 ???? 99540000 		_ADR	COMMA 
 4213 ???? DD3F0000 		_ADR	HERE 
 4214 ???? A1330000 		_ADR	SWAP 
 4215 ???? 59320000 		_ADR	STORE 
 4216 ???? DD3F0000 		_ADR	HERE 
 4217 ???? 79350000 		_ADR	CELLM 
 4218 ???? B72F0000 		_UNNEST 
 4219              	
 4220              	/*************************************
 4221              		ENDCASE ( 0...a  -- )
 4222              		compile code for DROP 
 4223              		and resolve forward BRANCH 
 4224              		for each OF 
 4225              	*************************************/
 4226 ???? 88590000 		_HEADER ENDCASE,COMPO+IMEDD+7,"ENDCASE"
 4226      C7454E44 
 4226      43415345 
 4227 ???? 504700BF 		_NEST 
ARM GAS  forth.s 			page 200


 4228 ???? D7310000 		_COMPI DROP 
 4228      71330000 
 4228      99540000 
 4229 ???? DD350000 	1:	_ADR QDUP 
 4230 ???? 17320000 		_QBRAN 2f 
 4230      045A0000 
 4231 ???? DD3F0000 		_ADR HERE
 4232 ???? 79350000 		_ADR CELLM 	
 4233 ???? A1330000 		_ADR SWAP 
 4234 ???? 59320000 		_ADR STORE 
 4235 ???? 3F320000 		_BRAN 1b 
 4235      E0590000 
 4236              	2:
 4237 ???? B72F0000 		_UNNEST 
 4238              	
 4239              	
 4240              	/**********************************
 4241              		RECURSE ( -- )
 4242              		compile recursive call to 
 4243              		actual defined word 
 4244              	***********************************/
 4245 ???? C8590000 		_HEADER RECURSE,COMPO+IMEDD+7,"RECURSE"
 4245      C7524543 
 4245      55525345 
 4246 ???? 504700BF 		_NEST 
 4247 ???? FD3A0000 		_ADR LAST
 4248 ???? 6D320000 		_ADR AT  
 4249 ???? 1D4C0000 		_ADR TOCFA 
 4250 ???? 99540000 		_ADR COMMA  
 4251 ???? B72F0000 		_UNNEST 
 4252              	
 4253              	
 4254              	/***********************************
 4255              	    ABORT"	( -- //  string> )
 4256              	 	Conditional abort with an 
 4257              		error message.
 4258              	***********************************/
 4259 ???? 0C5A0000 		_HEADER ABRTQ,IMEDD+COMPO+6,"ABORT\""
 4259      C641424F 
 4259      52542200 
 4260 ???? 504700BF 		_NEST
 4261 ???? D7310000 		_COMPI	ABORQ
 4261      11510000 
 4261      99540000 
 4262 ???? 5D550000 		_ADR	STRCQ
 4263 ???? B72F0000 		_UNNEST
 4264              	
 4265              	/******************************
 4266              	    S"	( -- //  string> )
 4267              	 	Compile an inline 
 4268              		counted string. 
 4269              		at runtime: ( -- a u )
 4270              	*****************************/
 4271 ???? 305A0000 		_HEADER STRQ,IMEDD+COMPO+2,"S\""
 4271      C2532200 
 4272 ???? 504700BF 		_NEST
 4273 ???? D7310000 		_COMPI	STRQP
ARM GAS  forth.s 			page 201


 4273      29470000 
 4273      99540000 
 4274 ???? 5D550000 		_ADR	STRCQ
 4275 ???? B72F0000 		_UNNEST
 4276              	
 4277              	/********************************
 4278              	CORE EXT 
 4279              		S\" ( -- )
 4280              		compile and inline counted 
 4281              		string with escaped char.
 4282              	********************************/
 4283 ???? 545A0000 		_HEADER STRSLHQ,COMPO+IMEDD+3,"S\\\""
 4283      C3535C22 
 4284 ???? 504700BF 		_NEST 
 4285 ???? D7310000 		_COMPI	STRQP
 4285      29470000 
 4285      99540000 
 4286 ???? DD3F0000 		_ADR	HERE   
 4287 ???? D7310000 		_DOLIT	0 
 4287      00000000 
 4288 ???? C1540000 		_ADR	CCOMMA // space for count 
 4289 ???? 155B0000 	1:	_ADR	GETC
 4290 ???? DD350000 		_ADR	QDUP 
 4291 ???? 17320000 		_QBRAN  4f 
 4291      E85A0000 
 4292 ???? 91330000 		_ADR	DUPP 
 4293 ???? D7310000 		_DOLIT	'\\' 
 4293      5C000000 
 4294 ???? 15380000 		_ADR	EQUAL
 4295 ???? 17320000 		_QBRAN	2f
 4295      CC5A0000 
 4296 ???? 335B0000 		_ADR	ESCAPE
 4297 ???? 3F320000 		_BRAN	3f 
 4297      085B0000 
 4298 ???? 91330000 	2:  _ADR	DUPP 
 4299 ???? D7310000 		_DOLIT	'"' 
 4299      22000000 
 4300 ???? 15380000 		_ADR	EQUAL 
 4301 ???? 17320000 		_QBRAN	3f
 4301      085B0000 
 4302 ???? 71330000 		_ADR	DROP 
 4303 ???? DD3F0000 	4:	_ADR	HERE 
 4304 ???? D1330000 		_ADR	OVER
 4305 ???? 29350000 		_ADR	ONEP   
 4306 ???? DD340000 		_ADR	SUBB
 4307 ???? A1330000 		_ADR	SWAP 
 4308 ???? 79320000 		_ADR	CSTOR  
 4309 ???? 013F0000 		_ADR	ALIGN 
 4310 ???? B72F0000 		_UNNEST   
 4311              	3:	
 4312 ???? C1540000 		_ADR	CCOMMA 
 4313 ???? 3F320000 		_BRAN	1b 
 4313      985A0000 
 4314              	
 4315              	GETC: 
 4316 ???? 606B     		ldr T0,[UP,#TIBUF]
 4317 ???? E16A     		ldr T1,[UP,#TOIN]
ARM GAS  forth.s 			page 202


 4318 ???? 226B     		ldr T2,[UP,#NTIBB]
 4319 ???? 47F8046D 		_PUSH
 4320 ???? 4FF00006 		mov TOS,#0  
 4321 ???? 9142     		cmp	T1,T2 
 4322 ???? 03D0     		beq 1f 
 4323 ???? 465C     		Ldrb TOS,[T0,T1]
 4324 ???? 01F10101 		add  T1,#1 
 4325 ???? E162     		str T1,[UP,#TOIN]
 4326 ???? FDF73FBA 	1:	_NEXT 
 4327              	
 4328              	// replace escaped character 
 4329              	ESCAPE: 
 4330 ???? 504700BF 		_NEST 
 4331 ???? 71330000 		_ADR	DROP 
 4332 ???? 155B0000 		_ADR	GETC  
 4333 ???? 91330000 		_ADR	DUPP
 4334 ???? 17320000 		_QBRAN  5f 
 4334      DE5B0000 
 4335 ???? 91330000 		_ADR	DUPP 
 4336 ???? D7310000 		_DOLIT	'"' 
 4336      22000000 
 4337 ???? 15380000 		_ADR	EQUAL 
 4338 ???? 17320000 		_QBRAN  1f 
 4338      665B0000 
 4339 ???? B72F0000 		_UNNEST 
 4340 ???? 91330000 	1: 	_ADR	DUPP 
 4341 ???? D7310000 		_DOLIT	'\\' 
 4341      5C000000 
 4342 ???? 15380000 		_ADR	EQUAL 
 4343 ???? 17320000 		_QBRAN  2f 
 4343      825B0000 
 4344 ???? B72F0000 		_UNNEST 	
 4345 ???? D7310000 	2:	_DOLIT	0X20 
 4345      20000000 
 4346 ???? 61340000 		_ADR	ORR   // convert to lower case 
 4347 ???? 91330000 		_ADR	DUPP 
 4348 ???? D7310000 		_DOLIT	'x' 
 4348      78000000 
 4349 ???? 15380000 		_ADR	EQUAL 
 4350 ???? 17320000 		_QBRAN  3f 
 4350      AE5B0000 
 4351 ???? E35B0000 		_ADR	PARSE_HEX 
 4352 ???? B72F0000 		_UNNEST 
 4353 ???? D7310000 	3:  _DOLIT	'a' 
 4353      61000000 
 4354 ???? DD340000 		_ADR	SUBB
 4355 ???? 91330000 		_ADR	DUPP 
 4356 ???? 01340000 		_ADR	ZLESS 
 4357 ???? 17320000 		_QBRAN	4f
 4357      CE5B0000 
 4358 ???? B72F0000 		_UNNEST 
 4359 ???? D7310000 	4:  _DOLIT	esc_char 
 4359      665C0000 
 4360 ???? CD340000 		_ADR	PLUS 
 4361 ???? 8D320000 		_ADR	CAT 
 4362 ???? B72F0000 	5:	_UNNEST 
 4363              	
ARM GAS  forth.s 			page 203


 4364              	PARSE_HEX:
 4365 ???? 504700BF 		_NEST 
 4366 ???? 71330000 		_ADR 	DROP 
 4367 ???? 155B0000 		_ADR	GETC 
 4368 ???? 91330000 		_ADR	DUPP 
 4369 ???? 17320000 		_QBRAN	2f
 4369      2A5C0000 
 4370 ???? 2F5C0000 		_ADR	TO_HEX 
 4371 ???? D7310000 	1:	_DOLIT	16 
 4371      10000000 
 4372 ???? ED340000 		_ADR	STAR 
 4373 ???? FD320000 		_ADR	TOR 
 4374 ???? 155B0000 		_ADR	GETC
 4375 ???? 91330000 		_ADR	DUPP 
 4376 ???? 17320000 		_QBRAN	3f 
 4376      225C0000 
 4377 ???? 2F5C0000 		_ADR	TO_HEX 
 4378 ???? 99320000 	3:	_ADR	RFROM 
 4379 ???? CD340000 		_ADR	PLUS 
 4380 ???? B72F0000 	2:	_UNNEST 
 4381              	
 4382              	
 4383              	TO_HEX: 
 4384 ???? 504700BF 		_NEST 
 4385 ???? D7310000 		_DOLIT	'0' 
 4385      30000000 
 4386 ???? DD340000 		_ADR	SUBB 
 4387 ???? 91330000 		_ADR	DUPP 
 4388 ???? D7310000 		_DOLIT	9 
 4388      09000000 
 4389 ???? A1380000 		_ADR	GREAT 
 4390 ???? 17320000 		_QBRAN	1f 
 4390      625C0000 
 4391 ???? D7310000 		_DOLIT	7 
 4391      07000000 
 4392 ???? DD340000 		_ADR	SUBB  
 4393              	1:
 4394 ???? B72F0000 		_UNNEST 
 4395              	
 4396              	
 4397 ???? 07086364 	esc_char:  .byte 7,8,'c','d',27,12,'g','h','i','j','k',10,13,10,'o','p',34,13,'s',9,'u',11,'x','y',
 4397      1B0C6768 
 4397      696A6B0A 
 4397      0D0A6F70 
 4397      220D7309 
 4398              	
 4399              	
 4400              	/********************
 4401              	    $,\"	( -- )
 4402              	 	Compile a literal 
 4403              		escaped string up to next " .
 4404              	hidden word 
 4405              	************************/
 4406              	STRCSLHQ:
 4407              	
 4408              	
 4409              	
ARM GAS  forth.s 			page 204


 4410              	/********************************
 4411              	EXTENDED CORE 
 4412              		C" string" ( -- )
 4413              		Compile an inline counted 
 4414              		literal.
 4415              		at runtime ( -- a )
 4416              	*********************************/
 4417 ???? 745A0000 		_HEADER CSTRQ,IMEDD+COMPO+2,"C\""
 4417      C2432200 
 4417      BF
 4418 ???? 504700BF 		_NEST 
 4419 ???? D7310000 		_COMPI	STRQP
 4419      29470000 
 4419      99540000 
 4420 ???? 5D550000 		_ADR	STRCQ 
 4421 ???? D7310000 		_COMPI	DROP 
 4421      71330000 
 4421      99540000 
 4422 ???? D7310000 		_COMPI	ONEM  
 4422      39350000 
 4422      99540000 
 4423 ???? B72F0000 		_UNNEST 
 4424              	
 4425              	
 4426              	/******************************
 4427              	    ."	( -- //  string> )
 4428              	 	Compile an inline word
 4429              		literal to be typed out 
 4430              		at run time.
 4431              	*******************************/
 4432 ???? 835C0000 		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 4432      C22E2200 
 4433 ???? 504700BF 		_NEST
 4434 ???? D7310000 		_COMPI	DOTQP
 4434      35470000 
 4434      99540000 
 4435 ???? 5D550000 		_ADR	STRCQ
 4436 ???? B72F0000 		_UNNEST
 4437              	
 4438              	/*********************
 4439              	  Name compiler
 4440              	***********************/
 4441              	
 4442              	/**************************
 4443              	    ?UNIQUE	( a -- a )
 4444              	 	Display a warning 
 4445              		message if the word 
 4446              		already exists.
 4447              	**************************/
 4448 ???? BC5C0000 		_HEADER UNIQU,7,"?UNIQUE"
 4448      073F554E 
 4448      49515545 
 4449 ???? 504700BF 		_NEST
 4450 ???? 91330000 		_ADR	DUPP
 4451 ???? 914D0000 		_ADR	NAMEQ			// ?name exists
 4452 ???? 17320000 		_QBRAN	UNIQ1	// redefinitions are OK
 4452      105D0000 
ARM GAS  forth.s 			page 205


 4453 ???? 35470000 		_DOTQP	7," reDef "		// but warn the user
 4453      07207265 
 4453      44656620 
 4454 ???? D1330000 		_ADR	OVER
 4455 ???? 41390000 		_ADR	COUNT
 4456 ???? 71460000 		_ADR	TYPEE			// just in case its not planned
 4457              	UNIQ1:
 4458 ???? 71330000 		_ADR	DROP
 4459 ???? B72F0000 		_UNNEST
 4460              	
 4461              	/***********************
 4462              	    $,n	 ( na -- )
 4463              	 	Build a new dictionary 
 4464              		name using the data at na.
 4465              	hidden word 
 4466              	*******************************/
 4467              	SNAME:
 4468 ???? 504700BF 		_NEST
 4469 ???? 91330000 		_ADR	DUPP			//  na na
 4470 ???? 8D320000 		_ADR	CAT			//  ?null input
 4471 ???? 17320000 		_QBRAN	SNAM1
 4471      605D0000 
 4472 ???? E55C0000 		_ADR	UNIQU			//  na
 4473 ???? FD3A0000 		_ADR	LAST			//  na last
 4474 ???? 6D320000 		_ADR	AT			//  na la
 4475 ???? 99540000 		_ADR	COMMA			//  na
 4476 ???? 91330000 		_ADR	DUPP			//  na na
 4477 ???? FD3A0000 		_ADR	LAST			//  na na last
 4478 ???? 59320000 		_ADR	STORE			//  na , save na for vocabulary link
 4479 ???? 41390000 		_ADR	COUNT			//  na+1 count
 4480 ???? CD340000 		_ADR	PLUS			//  na+1+count
 4481 ???? 1D3F0000 		_ADR	ALGND			//  word boundary
 4482 ???? AD3A0000 		_ADR	CPP
 4483 ???? 59320000 		_ADR	STORE			//  top of dictionary now
 4484 ???? B72F0000 		_UNNEST
 4485              	SNAM1:
 4486 ???? 29470000 		_ADR	STRQP
 4487 ???? 07       		.byte	7
 4488 ???? 206E616D 		.ascii " name? "
 4488      653F20
 4489 ???? E5500000 		_ADR	PRT_ABORT
 4490              	
 4491              	/************************
 4492              	    $COMPILE	( a -- )
 4493              	 	Compile next word to 
 4494              		code dictionary as 
 4495              		a token or literal.
 4496              	**************************/
 4497 ???? DC5C0000 		_HEADER SCOMP,8,"$COMPILE"
 4497      0824434F 
 4497      4D50494C 
 4497      450000BF 
 4498 ???? 504700BF 		_NEST
 4499 ???? 914D0000 		_ADR	NAMEQ
 4500 ???? DD350000 		_ADR	QDUP	// defined?
 4501 ???? 17320000 		_QBRAN	SCOM2
 4501      BC5D0000 
ARM GAS  forth.s 			page 206


 4502 ???? 6D320000 		_ADR	AT
 4503 ???? D7310000 		_DOLIT	IMEDD
 4503      80000000 
 4504 ???? 4D340000 		_ADR	ANDD	// immediate?
 4505 ???? 17320000 		_QBRAN	SCOM1
 4505      B45D0000 
 4506 ???? ED310000 		_ADR	EXECU
 4507 ???? B72F0000 		_UNNEST			// it's immediate, execute
 4508              	SCOM1:
 4509 ???? 955E0000 		_ADR	CALLC			// it's not immediate, compile
 4510 ???? B72F0000 		_UNNEST	
 4511              	SCOM2:
 4512 ???? F1450000 		_ADR	NUMBERQ 
 4513 ???? 17320000 		_QBRAN	SCOM3
 4513      D05D0000 
 4514 ???? 45550000 		_ADR	LITER
 4515 ???? B72F0000 		_UNNEST			// compile number as integer
 4516              	SCOM3: // compilation abort 
 4517 ???? D95D0000 		_ADR COLON_ABORT 
 4518 ???? E5500000 		_ADR	PRT_ABORT			// error
 4519              	
 4520              	/********************************
 4521              	 before aborting a compilation 
 4522              	 reset HERE and LAST
 4523              	 to previous values. 
 4524              	*******************************/
 4525              	COLON_ABORT:
 4526 ???? 504700BF 		_NEST 
 4527 ???? FD3A0000 		_ADR LAST 
 4528 ???? 6D320000 		_ADR AT 
 4529 ???? 79350000 		_ADR CELLM 
 4530 ???? 91330000 		_ADR DUPP 
 4531 ???? AD3A0000 		_ADR CPP  
 4532 ???? 59320000 		_ADR STORE 
 4533 ???? 6D320000 		_ADR AT 
 4534 ???? FD3A0000 		_ADR LAST 
 4535 ???? 59320000 		_ADR STORE 
 4536 ???? 155E0000 		_ADR OVERT 
 4537 ???? B72F0000 		_UNNEST 
 4538              	
 4539              	/*********************
 4540              	    OVERT	( -- )
 4541              	 	Link a new word 
 4542              		into the current 
 4543              		vocabulary.
 4544              	**********************/
 4545 ???? 745D0000 		_HEADER OVERT,5,"OVERT"
 4545      054F5645 
 4545      525400BF 
 4546 ???? 504700BF 		_NEST
 4547 ???? FD3A0000 		_ADR	LAST
 4548 ???? 6D320000 		_ADR	AT
 4549 ???? 993A0000 		_ADR	CNTXT
 4550 ???? 59320000 		_ADR	STORE
 4551 ???? B72F0000 		_UNNEST
 4552              	
 4553              	/**********************
ARM GAS  forth.s 			page 207


 4554              	    ;  ( -- )
 4555              	 	Terminate a colon
 4556              		definition.
 4557              	***********************/
 4558 ???? 0C5E0000 		_HEADER SEMIS,IMEDD+COMPO+1,";"
 4558      C13B00BF 
 4559 ???? 504700BF 		_NEST
 4560 ???? D7310000 		_DOLIT	UNNEST
 4560      B62F0000 
 4561 ???? 955E0000 		_ADR	CALLC
 4562 ???? 013F0000 		_ADR    ALIGN 
 4563 ???? AD510000 		_ADR	LBRAC
 4564 ???? 155E0000 		_ADR	OVERT
 4565 ???? B72F0000 		_UNNEST
 4566              	
 4567              	/******************
 4568              	    ]	   ( -- )
 4569              	 	Start compiling 
 4570              		the words in 
 4571              		the input stream.
 4572              	*********************/
 4573 ???? 305E0000 		_HEADER RBRAC,1,"]"
 4573      015D00BF 
 4574 ???? 504700BF 		_NEST
 4575 ???? D7310000 		_DOLIT	SCOMP
 4575      805D0000 
 4576 ???? 6D3A0000 		_ADR	TEVAL
 4577 ???? 59320000 		_ADR	STORE
 4578 ???? D7310000 		_DOLIT  -1
 4578      FFFFFFFF 
 4579 ???? 79390000 		_ADR    STATE 
 4580 ???? 59320000 		_ADR    STORE 
 4581 ???? B72F0000 		_UNNEST
 4582              	
 4583              	/****************************
 4584              	    COMPILE,	( cfa -- )
 4585              	 	compile cfa.
 4586              	
 4587              	*****************************/
 4588 ???? 585E0000 		_HEADER CALLC,COMPO+IMEDD+8,"COMPILE,"
 4588      C8434F4D 
 4588      50494C45 
 4588      2C0000BF 
 4589 ???? 504700BF 		_NEST
 4590 ???? D7310000 		_DOLIT 1 
 4590      01000000 
 4591 ???? 61340000 		_ADR ORR 
 4592 ???? 99540000 		_ADR COMMA  
 4593 ???? B72F0000 		_UNNEST 
 4594              	
 4595              	
 4596              	/****************************
 4597              		BUFFER: "name" ( u -- a )
 4598              		create a named buffer of 
 4599              		u bytes 
 4600              		0's the buffer. 
 4601              	*****************************/
ARM GAS  forth.s 			page 208


 4602 ???? 885E0000 		_HEADER BUFFER,7,"BUFFER:"
 4602      07425546 
 4602      4645523A 
 4603 ???? 504700BF 		_NEST 
 4604 ???? 013F0000 		_ADR    ALIGN 
 4605 ???? FD4B0000 		_ADR	TOKEN
 4606 ???? 195D0000 		_ADR	SNAME
 4607 ???? DD3F0000 		_ADR    HERE 
 4608 ???? D1330000 		_ADR    OVER 
 4609 ???? 81540000 		_ADR    ALLOT 
 4610 ???? D7310000 		_DOLIT	0 
 4610      00000000 
 4611 ???? 75360000 		_ADR	ROT 
 4612 ???? 91330000 		_ADR	DUPP 
 4613 ???? FD320000 		_ADR	TOR 
 4614 ???? 15410000 		_ADR	FILL
 4615 ???? 99320000 		_ADR	RFROM 
 4616 ???? 155E0000 		_ADR    OVERT 
 4617 ???? B72F0000 		_UNNEST 
 4618              	
 4619              	
 4620              	/*************************
 4621              	 	:	( -- //  string> )
 4622              	 	Start a new colon 
 4623              		definition using 
 4624              		next word as its name.
 4625              	**************************/
 4626 ???? B05E0000 		_HEADER COLON,1,":"
 4626      013A00BF 
 4627 ???? 504700BF 		_NEST
 4628 ???? 013F0000 		_ADR    ALIGN 
 4629 ???? FD4B0000 		_ADR	TOKEN
 4630 ???? 195D0000 		_ADR	SNAME
 4631 ???? C12F0000 		_ADR	COMPI_NEST 
 4632 ???? 5D5E0000 		_ADR	RBRAC
 4633 ???? B72F0000 		_UNNEST
 4634              	
 4635              	/*************************
 4636              	    IMMEDIATE   ( -- )
 4637              	 	Make the last compiled 
 4638              		word an immediate word.
 4639              	***************************/
 4640 ???? FC5E0000 		_HEADER IMMED,9,"IMMEDIATE"
 4640      09494D4D 
 4640      45444941 
 4640      544500BF 
 4641 ???? 504700BF 		_NEST
 4642 ???? D7310000 		_DOLIT	IMEDD
 4642      80000000 
 4643 ???? FD3A0000 		_ADR	LAST
 4644 ???? 6D320000 		_ADR	AT
 4645 ???? 6D320000 		_ADR	AT
 4646 ???? 61340000 		_ADR	ORR
 4647 ???? FD3A0000 		_ADR	LAST
 4648 ???? 6D320000 		_ADR	AT
 4649 ???? 59320000 		_ADR	STORE
 4650 ???? B72F0000 		_UNNEST
ARM GAS  forth.s 			page 209


 4651              	
 4652              	/******************
 4653              	  Defining words
 4654              	******************/
 4655              	
 4656              		.p2align 2 
 4657              	/****************************************
 4658              	 doDOES> ( -- a )
 4659              	 runtime action of  DOES>		 
 4660              	hidden word used by compiler 
 4661              	***************************************/
 4662              	DODOES:
 4663 ???? 504700BF 		_NEST 
 4664 ???? CD320000 		_ADR	RAT 
 4665 ???? 69350000 		_ADR	CELLP 
 4666 ???? 29350000 		_ADR	ONEP  
 4667 ???? FD3A0000 		_ADR	LAST 
 4668 ???? 6D320000 		_ADR	AT
 4669 ???? 1D4C0000 		_ADR	TOCFA
 4670 ???? 39350000 		_ADR    ONEM  
 4671 ???? E5640000 		_ADR	TOVECTOR  
 4672 ???? 59320000 		_ADR	STORE
 4673 ???? B72F0000 		_UNNEST 
 4674              	
 4675              		.p2align 2
 4676              	/**********************
 4677              	  DOES> ( -- )
 4678              	  compile time action
 4679              	*************************/
 4680 ???? 205F0000 		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 4680      C5444F45 
 4680      533E00BF 
 4681 ???? 504700BF 		_NEST 
 4682 ???? D7310000 		_COMPI	DODOES 
 4682      595F0000 
 4682      99540000 
 4683 ???? D7310000 		_COMPI	UNNEST 
 4683      B72F0000 
 4683      99540000 
 4684 ???? C12F0000 		_ADR	COMPI_NEST
 4685 ???? B72F0000 	 	_UNNEST 
 4686              	
 4687              	
 4688              	/****************************
 4689              	  DEFER@ ( cfa1 -- cfa2 )
 4690              	
 4691              	******************************/
 4692 ???? 885F0000 		_HEADER DEFERAT,6,"DEFER@"
 4692      06444546 
 4692      45524000 
 4693 ???? 504700BF 		_NEST 
 4694 ???? 69350000 		_ADR CELLP 
 4695 ???? 6D320000 		_ADR AT 
 4696 ???? B72F0000 		_UNNEST 
 4697              	
 4698              	/*********************************
 4699              		ACTION-OF "name" ( -- xt )
ARM GAS  forth.s 			page 210


 4700              		push the action token 
 4701              		of defered word "name" 
 4702              	*********************************/
 4703 ???? B85F0000 		_HEADER ACTIONOF,IMEDD+9,"ACTION-OF"
 4703      89414354 
 4703      494F4E2D 
 4703      4F4600BF 
 4704 ???? 504700BF 		_NEST 
 4705 ???? F5530000 		_ADR 	TICK  
 4706 ???? C15F0000 		_ADR 	DEFERAT 
 4707 ???? 79390000 		_ADR    STATE 
 4708 ???? 6D320000 		_ADR 	AT 
 4709 ???? 17320000 		_QBRAN 	1f
 4709      00600000 
 4710 ???? 99540000 		_ADR    COMMA 
 4711 ???? B72F0000 	1: 	_UNNEST 
 4712              	
 4713              	
 4714              	/*********************************
 4715              	 DEFER! ( cfa1 cfa2 -- )
 4716              	 assign an action to a defered word 
 4717              	************************************/
 4718 ???? D45F0000 		_HEADER DEFERSTO,6,"DEFER!"
 4718      06444546 
 4718      45522100 
 4719 ???? 504700BF 		_NEST 
 4720 ???? D7310000 		_DOLIT	-2 
 4720      FEFFFFFF 
 4721 ???? 4D340000 		_ADR	ANDD   // clear thumb bit of cfa2  
 4722 ???? 69350000 		_ADR 	CELLP  // skip NEST 
 4723 ???? 59320000 		_ADR STORE 
 4724 ???? B72F0000 		_UNNEST
 4725              	
 4726              	/****************************
 4727              	  DEFER ( "name" -- )
 4728              	  create a defered definition
 4729              	*****************************/
 4730 ???? 08600000 		_HEADER DEFER,5,"DEFER"
 4730      05444546 
 4730      455200BF 
 4731 ???? 504700BF 		_NEST 
 4732 ???? 015F0000 		_ADR COLON 
 4733              	// runtime code 
 4734 ???? D7310000 		_DOLIT NO_ACTION  
 4734      60600000 
 4735 ???? 955E0000 		_ADR  CALLC 
 4736 ???? D7310000 		_DOLIT UNNEST 
 4736      B62F0000 
 4737 ???? 955E0000 		_ADR  CALLC
 4738              	// end of runtime code 	
 4739 ???? 355E0000 		_ADR  SEMIS  
 4740 ???? B72F0000 		_UNNEST 
 4741              	
 4742              	NO_ACTION:
 4743 ???? 504700BF 		_NEST 
 4744 ???? D7310000 		_DOLIT 1 
 4744      01000000 
ARM GAS  forth.s 			page 211


 4745 ???? 11510000 		_ABORQ 15 , " no action set!"
 4745      0F206E6F 
 4745      20616374 
 4745      696F6E20 
 4745      73657421 
 4746 ???? B72F0000 		_UNNEST 
 4747              	
 4748              	/*********************************
 4749              		:NONAME  ( -- xt )
 4750              		create a colon word without 
 4751              		name. 
 4752              	output:
 4753              		xt  exÃ©cution token of 
 4754              		new definition
 4755              	*********************************/
 4756 ???? 30600000 		_HEADER NONAME,7,":NONAME"
 4756      073A4E4F 
 4756      4E414D45 
 4757 ???? 504700BF 		_NEST 
 4758 ???? DD3F0000 		_ADR 	HERE 
 4759 ???? C12F0000 		_ADR	COMPI_NEST 
 4760 ???? 5D5E0000 		_ADR 	RBRAC
 4761 ???? B72F0000 		_UNNEST 
 4762              	
 4763              	/*******************************
 4764              		IS cccc ( cfa -- )
 4765              	input:
 4766              	   cccc  defered word name 
 4767              	   xt    execution token 
 4768              	   to be affected to the 
 4769              	   defered word.
 4770              	********************************/
 4771 ???? 88600000 		_HEADER IS,IMEDD+2,"IS"
 4771      82495300 
 4772 ???? 504700BF 		_NEST
 4773 ???? 79390000 		_ADR STATE 
 4774 ???? 6D320000 		_ADR AT 
 4775 ???? 17320000 		_QBRAN 1f 
 4775      E0600000 
 4776 ???? D7310000 		_DOLIT ITICK
 4776      18540000 
 4777 ???? 955E0000 		_ADR CALLC  
 4778 ???? D7310000 		_DOLIT DEFERSTO
 4778      10600000 
 4779 ???? 955E0000 		_ADR CALLC
 4780 ???? 3F320000 		_BRAN 2f    
 4780      E8600000 
 4781 ???? F5530000 	1:  _ADR TICK 
 4782 ???? 11600000 		_ADR DEFERSTO 
 4783 ???? B72F0000 	2:	_UNNEST 
 4784              	
 4785              	
 4786              	/******************************
 4787              	    CREATE	( -- //  string> )
 4788              	 	Compile a new array entry 
 4789              		without allocating code space.
 4790              	***********************************/
ARM GAS  forth.s 			page 212


 4791 ???? A8600000 		_HEADER CREAT,6,"CREATE"
 4791      06435245 
 4791      41544500 
 4792 ???? 504700BF 		_NEST 
 4793 ???? 013F0000 		_ADR	ALIGN 
 4794 ???? FD4B0000 		_ADR	TOKEN
 4795 ???? 195D0000 		_ADR	SNAME
 4796 ???? 155E0000 		_ADR	OVERT
 4797 ???? C12F0000 		_ADR	COMPI_NEST 
 4798 ???? D7310000 		_COMPI	DOVAR
 4798      39610000 
 4798      99540000 
 4799 ???? D7310000 		_COMPI  NOP     // reserved slot  for DOES> vector   
 4799      D5310000 
 4799      99540000 
 4800 ???? D7310000 		_COMPI  UNNEST 
 4800      B72F0000 
 4800      99540000 
 4801 ???? B72F0000 		_UNNEST
 4802              	
 4803              	/*******************************
 4804              	  doVAR	( -- a )
 4805              	  Run time routine for VARIABLE and CREATE.
 4806              	hidden word used by compiler
 4807              	********************************/
 4808              	DOVAR:
 4809 ???? 47F8046D 		_PUSH
 4810 ???? 6646     		MOV TOS,IP
 4811 ???? 06F10806 		ADD TOS,#2*CELLL // >BODY 
 4812 ???? FCF735BF 		_NEXT  
 4813              	
 4814              	
 4815              	/*******************************
 4816              	    VARIABLE	( -- //  string> )
 4817              	 	Compile a new variable 
 4818              		initialized to 0.
 4819              	***********************************/
 4820 ???? F0600000 		_HEADER VARIA,8,"VARIABLE"
 4820      08564152 
 4820      4941424C 
 4820      4500
 4821 ???? 504700BF 		_NEST
 4822 ???? F9600000 		_ADR	CREAT
 4823 ???? D7310000 		_DOLIT	0
 4823      00000000 
 4824 ???? 99540000 		_ADR	COMMA
 4825 ???? B72F0000 		_UNNEST
 4826              	
 4827              	/**********************************
 4828              	    doCON	( -- a ) 
 4829              	 	Run time routine for CONSTANT.
 4830              	hidden word used by compiler 
 4831              	***********************************/
 4832              	DOCON:
 4833 ???? 47F8046D 		_PUSH
 4834 ???? 5CF8046B 		LDR.W TOS,[IP],#4 
 4835 ???? FCF71FBF 		B UNNEST 
ARM GAS  forth.s 			page 213


 4836              	
 4837              	
 4838              	/***********************************
 4839              	CORE EXT 
 4840              		VALUE name ( x -- )
 4841              		create a value object and 
 4842              		assign x to it. 
 4843              	***********************************/
 4844 ???? 4A610000 		_HEADER VALUE,5,"VALUE" 
 4844      0556414C 
 4844      554500BF 
 4845 ???? 504700BF 		_NEST 
 4846 ???? F9600000 		_ADR CREAT 
 4847 ???? D7310000 		_DOLIT AT 
 4847      6C320000 
 4848 ???? D7310000 		_DOLIT	1 
 4848      01000000 
 4849 ???? 61340000 		_ADR	ORR 
 4850 ???? DD3F0000 		_ADR	HERE 
 4851 ???? D7310000 		_DOLIT	8 
 4851      08000000 
 4852 ???? DD340000 		_ADR	SUBB 
 4853 ???? 59320000 		_ADR	STORE 
 4854 ???? 99540000 		_ADR	COMMA 
 4855 ???? B72F0000 		_UNNEST 
 4856              	
 4857              	/***********************************
 4858              	CORE EXT 
 4859              		TO name ( x -- )
 4860              	    assign a new value to name 
 4861              	***********************************/
 4862 ???? 7C610000 		_HEADER TO,2,"TO"
 4862      02544F00 
 4863 ???? 504700BF 		_NEST 
 4864 ???? F5530000 		_ADR	TICK 
 4865 ???? 39350000 		_ADR	ONEM 
 4866 ???? D7310000 		_DOLIT	4*CELLL
 4866      10000000 
 4867 ???? CD340000 		_ADR	PLUS  
 4868 ???? 59320000 		_ADR	STORE 
 4869 ???? B72F0000 		_UNNEST 
 4870              	
 4871              	
 4872              	/***********************************
 4873              	    CONSTANT	( u -- //  string> )
 4874              	 	Compile a new constant.
 4875              	************************************/
 4876 ???? C0610000 		_HEADER CONST,8,"CONSTANT"
 4876      08434F4E 
 4876      5354414E 
 4876      540000BF 
 4877 ???? 504700BF 		_NEST 
 4878 ???? FD4B0000 		_ADR	TOKEN
 4879 ???? 195D0000 		_ADR	SNAME
 4880 ???? 155E0000 		_ADR	OVERT
 4881 ???? C12F0000 		_ADR	COMPI_NEST
 4882 ???? D7310000 		_DOLIT	DOCON
ARM GAS  forth.s 			page 214


 4882      6C610000 
 4883 ???? 955E0000 		_ADR	CALLC
 4884 ???? 99540000 		_ADR	COMMA
 4885 ???? D7310000 		_DOLIT	UNNEST 
 4885      B62F0000 
 4886 ???? 955E0000 		_ADR	CALLC  
 4887 ???? B72F0000 		_UNNEST
 4888              	
 4889              	
 4890              	/***********
 4891              	  Tools
 4892              	***********/
 4893              	
 4894              	/*************************
 4895              	    dm+	 ( a u -- a )
 4896              	 	Dump u bytes from a , 
 4897              		leaving a+u on the stack.
 4898              		hidden word used by DUMP 
 4899              	****************************/
 4900              	DMP:
 4901 ???? 504700BF 		_NEST
 4902 ???? D1330000 		_ADR	OVER
 4903 ???? D7310000 		_DOLIT	4
 4903      04000000 
 4904 ???? FD470000 		_ADR	UDOTR			// display address
 4905 ???? D7310000 		_DOLIT  0         // don't show base char 
 4905      00000000 
 4906 ???? 053A0000 		_ADR    BCHR
 4907 ???? 91330000 		_ADR    DUPP
 4908 ???? 6D320000 		_ADR    AT 
 4909 ???? FD320000 		_ADR    TOR      // save original value of BCHAR 
 4910 ???? 59320000 		_ADR    STORE 
 4911 ???? 1D460000 		_ADR	SPACE
 4912 ???? FD320000 		_ADR	TOR			// start count down loop
 4913 ???? 3F320000 		_BRAN	PDUM2			// skip first pass
 4913      80620000 
 4914              	PDUM1:
 4915 ???? 91330000 	    _ADR	DUPP
 4916 ???? 8D320000 		_ADR	CAT
 4917 ???? D7310000 		_DOLIT	3
 4917      03000000 
 4918 ???? FD470000 		_ADR	UDOTR			// display numeric data
 4919 ???? 29350000 		_ADR	ONEP			// increment address
 4920              	PDUM2:
 4921 ???? F9310000 	    _ADR	DONXT
 4922 ???? 68620000 		.word	PDUM1	// loop till done
 4923 ???? 99320000 		_ADR    RFROM   // restore BCHAR value 
 4924 ???? 053A0000 		_ADR    BCHR 
 4925 ???? 59320000 		_ADR    STORE 
 4926 ???? B72F0000 		_UNNEST
 4927              		.p2align 2 
 4928              	//    DUMP	( a u -- )
 4929              	// 	Dump u bytes from a, in a formatted manner.
 4930              	
 4931              	/**********************
 4932              		DUMP ( a n -- )
 4933              		hex dump memory 
ARM GAS  forth.s 			page 215


 4934              	*********************/
 4935 ???? E8610000 		_HEADER DUMP,4,"DUMP"
 4935      0444554D 
 4935      500000BF 
 4936 ???? 504700BF 		_NEST
 4937 ???? D7310000 		_DOLIT  15 
 4937      0F000000 
 4938 ???? CD340000 		_ADR    PLUS 
 4939 ???? D7310000 		_DOLIT  0xFFFFFFF0 
 4939      F0FFFFFF 
 4940 ???? 4D340000 		_ADR    ANDD 
 4941 ???? A1330000 		_ADR    SWAP 
 4942 ???? D7310000 		_DOLIT  0xFFFFFFFC
 4942      FCFFFFFF 
 4943 ???? 4D340000 		_ADR    ANDD 
 4944 ???? A1330000 		_ADR    SWAP 
 4945 ???? ED390000 		_ADR	BASE
 4946 ???? 6D320000 		_ADR	AT
 4947 ???? FD320000 		_ADR	TOR
 4948 ???? 81430000 		_ADR	HEX			// save radix,set hex
 4949 ???? D7310000 		_DOLIT	16
 4949      10000000 
 4950 ???? 7D3E0000 		_ADR	SLASH			// change count to lines
 4951 ???? FD320000 		_ADR	TOR
 4952 ???? 3F320000 		_BRAN	DUMP4			// start count down loop
 4952      24630000 
 4953              	DUMP1:
 4954 ???? D9460000 	    _ADR	CR
 4955 ???? D7310000 		_DOLIT	16
 4955      10000000 
 4956 ???? C5360000 		_ADR	DDUP
 4957 ???? 29620000 		_ADR	DMP			// display numeric
 4958 ???? 75360000 		_ADR	ROT
 4959 ???? 75360000 		_ADR	ROT
 4960 ???? 1D460000 		_ADR	SPACE
 4961 ???? 1D460000 		_ADR	SPACE
 4962 ???? 71460000 		_ADR	TYPEE			// display printable characters
 4963              	DUMP4:
 4964 ???? F9310000 	  _DONXT	DUMP1	// loop till done
 4964      FC620000 
 4965              	DUMP3:
 4966 ???? 71330000 		_ADR	DROP
 4967 ???? 99320000 		_ADR	RFROM
 4968 ???? ED390000 		_ADR	BASE
 4969 ???? 59320000 		_ADR	STORE			// restore radix
 4970 ???? B72F0000 		_UNNEST
 4971              	
 4972              	/*******************************
 4973              	   TRACE. display in hexadecimal
 4974              	   TRACE. use a different buffer 
 4975              	   than DOT  to avoid current 
 4976              	   display overwrite.
 4977              	*******************************/ 
 4978              	TDOT: // ( u -- )
 4979 ???? 504700BF 		_NEST 
 4980 ???? ED390000 		_ADR BASE 
 4981 ???? 6D320000 		_ADR AT 
ARM GAS  forth.s 			page 216


 4982 ???? FD320000 		_ADR TOR
 4983 ???? 81430000 		_ADR HEX  
 4984 ???? 813A0000 		_ADR HLD 
 4985 ???? 6D320000 		_ADR AT 
 4986 ???? FD320000 		_ADR TOR   // R: base *hold 
 4987 ???? DD3F0000 		_ADR HERE 
 4988 ???? D7310000 		_DOLIT 160 
 4988      A0000000 
 4989 ???? CD340000 		_ADR PLUS
 4990 ???? 91330000 		_ADR DUPP 
 4991 ???? FD320000 		_ADR TOR  
 4992 ???? 813A0000 		_ADR HLD 
 4993 ???? 59320000 		_ADR STORE
 4994 ???? D7310000 		_DOLIT 0  
 4994      00000000 
 4995 ???? D1420000 		_ADR DIGS  
 4996 ???? 71330000 		_ADR DROP
 4997 ???? D7310000 		_DOLIT '$'
 4997      24000000 
 4998 ???? 4D420000 		_ADR HOLD 
 4999 ???? 813A0000 		_ADR HLD 
 5000 ???? 6D320000 		_ADR AT
 5001 ???? 99320000 		_ADR RFROM   
 5002 ???? D1330000 		_ADR OVER 
 5003 ???? DD340000 		_ADR SUBB 
 5004 ???? 1D460000 		_ADR SPACE 
 5005 ???? 71460000 		_ADR TYPEE 
 5006 ???? 99320000 		_ADR RFROM 
 5007 ???? 813A0000 		_ADR HLD 
 5008 ???? 59320000 		_ADR STORE 
 5009 ???? 99320000 		_ADR RFROM 
 5010 ???? ED390000 		_ADR BASE 
 5011 ???? 59320000 		_ADR STORE 
 5012 ???? B72F0000 		_UNNEST 
 5013              	
 5014              	/**********************
 5015              	   .S	  ( ... -- ... )
 5016              	 	Display the contents 
 5017              		of the data stack.
 5018              	*************************/
 5019 ???? 9C620000 		_HEADER DOTS,2,".S"
 5019      022E5300 
 5020 ???? 504700BF 		_NEST
 5021 ???? 853F0000 		_ADR	DEPTH	// stack depth
 5022 ???? FD320000 		_ADR	TOR		// start count down loop
 5023 ???? 3F320000 		_BRAN	DOTS2  // skip first pass
 5023      FC630000 
 5024              	DOTS1:
 5025 ???? CD320000 		_ADR	RAT
 5026 ???? A93F0000 		_ADR	PICK
 5027 ???? 41630000 		_ADR	TDOT // index stack, display contents
 5028              	DOTS2:
 5029 ???? F9310000 		_DONXT	DOTS1 // loop till done
 5029      F0630000 
 5030 ???? D9460000 		_ADR	CR 
 5031 ???? B72F0000 		_UNNEST
 5032              	
ARM GAS  forth.s 			page 217


 5033              	RBASE: 
 5034 ???? 47F8046D 		_PUSH 
 5035 ???? 4FF68076 		_MOV32 TOS,RPP 
 5035      C2F20106 
 5036 ???? FCF7CABD 		_NEXT 
 5037              	
 5038              	
 5039              	/**************************
 5040              	  R.  display return stack 
 5041              	**************************/
 5042              	RDOT: 
 5043 ???? 504700BF 		_NEST 
 5044 ???? 0D640000 		_ADR RBASE
 5045 ???? 5D330000 		_ADR RPAT 
 5046 ???? DD340000 		_ADR SUBB
 5047 ???? AD350000 		_ADR CELLSL   
 5048 ???? D7310000 		_DOLIT 2
 5048      02000000 
 5049 ???? DD340000 		_ADR SUBB 
 5050 ???? FD320000 		_ADR TOR
 5051 ???? 0D640000 		_ADR RBASE 
 5052 ???? 79350000 	1:	_ADR CELLM 
 5053 ???? 91330000 		_ADR DUPP 
 5054 ???? 6D320000 		_ADR AT 
 5055 ???? 41630000 		_ADR TDOT 
 5056 ???? 99320000 		_ADR RFROM   
 5057 ???? 39350000 		_ADR ONEM 
 5058 ???? 91330000 		_ADR DUPP
 5059 ???? FD320000 		_ADR TOR 
 5060 ???? FD370000 		_ADR ZEQUAL   
 5061 ???? 17320000 		_QBRAN 1b
 5061      44640000 
 5062 ???? 99320000 		_ADR RFROM  
 5063 ???? 9D360000 		_ADR DDROP
 5064 ???? D9460000 		_ADR CR   
 5065 ???? B72F0000 		_UNNEST 
 5066              	
 5067              	/**************************
 5068              		TRACE ( -- )
 5069              		display stacks content 
 5070              	**************************/
 5071 ???? D8630000 		_HEADER TRACE,5,"TRACE"
 5071      05545241 
 5071      434500BF 
 5072 ???? 504700BF 		_NEST
 5073 ???? D9460000 		_ADR CR 
 5074 ???? D7310000 		_DOLIT '>' 
 5074      3E000000 
 5075 ???? D7310000 		_DOLIT 'S'
 5075      53000000 
 5076 ???? 79300000 		_ADR EMIT 
 5077 ???? 79300000 		_ADR EMIT  
 5078 ???? DD630000 		_ADR DOTS
 5079 ???? D7310000 		_DOLIT '>'
 5079      3E000000 
 5080 ???? D7310000 		_DOLIT 'R'
 5080      52000000 
ARM GAS  forth.s 			page 218


 5081 ???? 79300000 		_ADR EMIT 
 5082 ???? 79300000 		_ADR EMIT 
 5083 ???? 1D640000 		_ADR RDOT 
 5084 ???? B72F0000 		_UNNEST 
 5085              	
 5086              	
 5087              	/****************************
 5088              	  >BODY  ( xt -- adr )
 5089              	  get parameter field address
 5090              	  from code field address 
 5091              	****************************/
 5092 ???? 84640000 		_HEADER TOBODY,5,">BODY"
 5092      053E424F 
 5092      445900BF 
 5093 ???? 06F11006 		add TOS,#4*CELLL   
 5094 ???? FCF766BD 		_NEXT 		
 5095              	
 5096              	/*****************************
 5097              		>VECTOR ( xt -- adr )
 5098              		for words defined by 
 5099              		CREATE  return 
 5100              		address vector slot 
 5101              		for DOES> 
 5102              	hidden word.	
 5103              	*****************************/
 5104              	TOVECTOR:
 5105 ???? 06F10806 		add TOS,#2*CELLL
 5106 ???? FCF762BD 		_NEXT 
 5107              	
 5108              	/*****************************
 5109              	    >NFA	( cfa -- nfa | F )
 5110              	 	Convert code address 
 5111              		to a name address.
 5112              	*****************************/
 5113 ???? D4640000 		_HEADER TONFA,4,">NFA"
 5113      043E4E46 
 5113      410000BF 
 5114 ???? 504700BF 		_NEST
 5115 ???? FD320000 		_ADR	TOR			//  
 5116 ???? 993A0000 		_ADR	CNTXT			//  va
 5117 ???? 6D320000 		_ADR	AT			//  nfa
 5118              	TNAM1:
 5119 ???? 91330000 		_ADR	DUPP			//  nfa nfa
 5120 ???? 17320000 		_QBRAN	TNAM2	//  vocabulary end, no match
 5120      3C650000 
 5121 ???? 91330000 		_ADR	DUPP			//  nfa nfa
 5122 ???? 1D4C0000 		_ADR	TOCFA			//  nfa cfa
 5123 ???? CD320000 		_ADR	RAT			//  nfa cfa code
 5124 ???? 75340000 		_ADR	XORR			//  nfa f --
 5125 ???? 17320000 		_QBRAN	TNAM2
 5125      3C650000 
 5126 ???? 79350000 		_ADR	CELLM			//  la 
 5127 ???? 6D320000 		_ADR	AT			//  next_nfa
 5128 ???? 3F320000 		_BRAN	TNAM1
 5128      08650000 
 5129              	TNAM2:	
 5130 ???? 99320000 		_ADR	RFROM
ARM GAS  forth.s 			page 219


 5131 ???? 71330000 		_ADR	DROP			//  0|nfa --
 5132 ???? B72F0000 		_UNNEST			// 0
 5133              	
 5134              	
 5135              	/********************************
 5136              	    .ID	 ( na -- )
 5137              	 	Display the name at address.
 5138              	********************************/
 5139 ???? F0640000 		_HEADER DOTID,3,".ID"
 5139      032E4944 
 5140 ???? 504700BF 		_NEST
 5141 ???? DD350000 		_ADR	QDUP			// if zero no name
 5142 ???? 17320000 		_QBRAN	DOTI1
 5142      7C650000 
 5143 ???? 41390000 		_ADR	COUNT
 5144 ???? D7310000 		_DOLIT	0x1F
 5144      1F000000 
 5145 ???? 4D340000 		_ADR	ANDD			// mask lexicon bits
 5146 ???? 1D460000 		_ADR	SPACE 
 5147 ???? 71460000 		_ADR	TYPEE
 5148 ???? B72F0000 		_UNNEST			// display name string
 5149              	DOTI1:
 5150 ???? 35470000 		_DOTQP	9," {noName}"
 5150      09207B6E 
 5150      6F4E616D 
 5150      657D00BF 
 5151 ???? B72F0000 		_UNNEST
 5152              	
 5153              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 5154              	.if WANT_SEE 
 5155              	/*******************************
 5156              	    SEE	 ( -- //  string> )
 5157              	 	A simple decompiler.
 5158              	*******************************/
 5159              		_HEADER SEE,3,"SEE"
 5160              		_NEST
 5161              		_ADR	TICK	//  ca --, starting address
 5162              		_ADR	CR	
 5163              		_DOLIT	20
 5164              		_ADR	TOR
 5165              	SEE1:
 5166              		_ADR	CELLP			//  a
 5167              		_ADR	DUPP			//  a a
 5168              		_ADR	DECOMP		//  a
 5169              		_DONXT	SEE1
 5170              		_ADR	DROP
 5171              		_UNNEST
 5172              	
 5173              	/*************************
 5174              	 	DECOMPILE ( a -- )
 5175              	 	Convert code in a.  
 5176              		Display name of command or as data.
 5177              	*************************************/
 5178              		_HEADER DECOMP,9,"DECOMPILE"
 5179              		_NEST
 5180              		_ADR	DUPP			//  a a
 5181              	// 	_ADR	TOR			//  a
ARM GAS  forth.s 			page 220


 5182              		_ADR	AT			//  a code
 5183              		_ADR	DUPP			//  a code code
 5184              		_DOLIT	0xF800D000 //0xF800F800
 5185              		_ADR	ANDD
 5186              		_DOLIT	0xF000D000 //0xF800F000
 5187              		_ADR	EQUAL			//  a code ?
 5188              		_ADR	INVER 
 5189              		_QBRAN	DECOM2	//  not a command
 5190              		//  a valid_code --, extract address and display name
 5191              		MOVW	IP,#0xFFE
 5192              		MOV	WP,TOS
 5193              		LSL	TOS,TOS,#21		//  get bits 22-12
 5194              		ASR	TOS,TOS,#9		//  with sign extension
 5195              		LSR	WP,WP,#15		//  get bits 11-1
 5196              		AND	WP,WP,IP		//  retain only bits 11-1
 5197              		ORR	TOS,TOS,WP		//  get bits 22-1
 5198              		NOP
 5199              		_ADR	OVER			//  a offset a
 5200              		_ADR	PLUS			//  a target-4
 5201              		_ADR	CELLP			//  a target
 5202              		_ADR	TONFA			//  a na/0 --, is it a name?
 5203              		_ADR	QDUP			//  name address or zero
 5204              		_QBRAN	DECOM1
 5205              		_ADR	SPACE			//  a na
 5206              		_ADR	DOTID			//  a --, display name
 5207              	// 	_ADR	RFROM			//  a
 5208              		_ADR	DROP
 5209              		_UNNEST
 5210              	DECOM1:	// _ADR	RFROM		//  a
 5211              		_ADR	AT			//  data
 5212              		_ADR	UDOT			//  display data
 5213              		_UNNEST
 5214              	DECOM2:
 5215              		_ADR	UDOT
 5216              	// 	_ADR	RFROM
 5217              		_ADR	DROP
 5218              		_UNNEST
 5219              	.endif 
 5220              	
 5221              	
 5222              	/*********************
 5223              	    WORDS	( -- )
 5224              	 	Display the names 
 5225              		in the context vocabulary.
 5226              	*******************************/
 5227 ???? 4C650000 		_HEADER WORDS,5,"WORDS"
 5227      05574F52 
 5227      445300BF 
 5228 ???? 504700BF 		_NEST
 5229 ???? D9460000 		_ADR	CR
 5230 ???? 993A0000 		_ADR	CNTXT
 5231 ???? 6D320000 		_ADR	AT			// only in context
 5232              	WORS1:
 5233 ???? DD350000 		_ADR	QDUP			// ?at end of list
 5234 ???? 17320000 		_QBRAN	WORS2
 5234      D4650000 
 5235 ???? 91330000 		_ADR	DUPP
ARM GAS  forth.s 			page 221


 5236 ???? 1D460000 		_ADR	SPACE
 5237 ???? 51650000 		_ADR	DOTID			// display a name
 5238 ???? 79350000 		_ADR	CELLM
 5239 ???? 6D320000 		_ADR	AT
 5240 ???? 3F320000 		_BRAN	WORS1
 5240      AC650000 
 5241              	WORS2:
 5242 ???? B72F0000 		_UNNEST
 5243              	
 5244              	
 5245              	/*************************
 5246              		MARKER <string> ( -- )
 5247              	    create forget point 
 5248              		in dictionary 
 5249              	*************************/	
 5250 ???? 94650000 		_HEADER MARKER,6,"MARKER"
 5250      064D4152 
 5250      4B455200 
 5251 ???? 504700BF 		_NEST
 5252 ???? F9600000 		_ADR	CREAT 
 5253 ???? 595F0000 		_ADR	DODOES
 5254 ???? B72F0000 		_UNNEST 
 5255 ???? 504700BF 		_NEST 
 5256 ???? D7310000 		_DOLIT	4*CELLL  
 5256      10000000 
 5257 ???? DD340000 		_ADR	SUBB
 5258 ???? 29350000 		_ADR	ONEP  
 5259 ???? F9640000 		_ADR	TONFA 
 5260 ???? 79350000 		_ADR	CELLM
 5261 ???? 6D320000 		_ADR	AT  
 5262 ???? FD3A0000 		_ADR	LAST 
 5263 ???? 59320000 		_ADR	STORE 
 5264 ???? 155E0000 		_ADR	OVERT
 5265 ???? B72F0000 		_UNNEST 
 5266              	
 5267              	/*********************************
 5268              		ARRAY "name" ( n -- )
 5269              	    create an array of n elements 
 5270              	*********************************/
 5271 ???? DC650000 		_HEADER ARRAY,5,"ARRAY"
 5271      05415252 
 5271      415900BF 
 5272 ???? 504700BF 		_NEST 
 5273 ???? FD4B0000 		_ADR	TOKEN
 5274 ???? 195D0000 		_ADR	SNAME
 5275 ???? 155E0000 		_ADR	OVERT
 5276 ???? C12F0000 		_ADR	COMPI_NEST
 5277 ???? D7310000 		_DOLIT	DO_ARRAY
 5277      70660000 
 5278 ???? 955E0000 		_ADR	CALLC
 5279 ???? D7310000 		_DOLIT	UNNEST 
 5279      B62F0000 
 5280 ???? 955E0000 		_ADR	CALLC  
 5281 ???? D7310000 		_DOLIT  4 
 5281      04000000 
 5282 ???? ED340000 		_ADR    STAR 
 5283 ???? 81540000 		_ADR    ALLOT 
ARM GAS  forth.s 			page 222


 5284 ???? B72F0000 		_UNNEST 	
 5285              	
 5286              	// does> du array
 5287              	DO_ARRAY:
 5288 ???? 504700BF 		_NEST  
 5289 ???? D7310000 		_DOLIT 4 
 5289      04000000 
 5290 ???? ED340000 		_ADR STAR  
 5291 ???? CD320000 		_ADR RAT  
 5292 ???? 69350000 		_ADR CELLP 
 5293 ???? CD340000 		_ADR PLUS  
 5294 ???? B72F0000 		_UNNEST 
 5295              	
 5296              	
 5297              	/****************
 5298              	  cold start
 5299              	*****************/
 5300              	
 5301              	/**********************************
 5302              	    VER	 ( -- n )
 5303              	 	Return the version 
 5304              		number of this implementation.
 5305              	hidden word used by COLD
 5306              	**********************************/
 5307              	VERSN:
 5308 ???? 504700BF 		_NEST
 5309 ???? D7310000 		_DOLIT	VER*256+EXT
 5309      00010000 
 5310 ???? B72F0000 		_UNNEST
 5311              	
 5312              	/*********************
 5313              	    hi	  ( -- )
 5314              	 	Display the sign-on 
 5315              		message.
 5316              	***********************/
 5317 ???? 28660000 		_HEADER HI,2,"HI"
 5317      02484900 
 5318 ???? 504700BF 		_NEST
 5319 ???? D9460000 		_ADR	CR	// initialize I/O
 5320 ???? 35470000 		_DOTQP	17, "beyond Jupiter, v" 
 5320      11626579 
 5320      6F6E6420 
 5320      4A757069 
 5320      7465722C 
 5321 ???? ED390000 		_ADR	BASE
 5322 ???? 6D320000 		_ADR	AT
 5323 ???? 81430000 		_ADR	HEX	// save radix
 5324 ???? 91660000 		_ADR	VERSN
 5325 ???? 2D420000 		_ADR	BDIGS
 5326 ???? D7310000 		_DOLIT  0 
 5326      00000000 
 5327 ???? B1420000 		_ADR	DIG
 5328 ???? B1420000 		_ADR	DIG
 5329 ???? D7310000 		_DOLIT	'.'
 5329      2E000000 
 5330 ???? 4D420000 		_ADR	HOLD
 5331 ???? D1420000 		_ADR	DIGS
ARM GAS  forth.s 			page 223


 5332 ???? 2D430000 		_ADR	EDIGS
 5333 ???? 71460000 		_ADR	TYPEE	// format version number
 5334 ???? ED390000 		_ADR	BASE
 5335 ???? 59320000 		_ADR	STORE
 5336 ???? D9460000 		_ADR	CR
 5337 ???? B72F0000 		_UNNEST			// restore radix
 5338              	
 5339              	/***********************
 5340              	   HI_BOTH ( -- )
 5341              	   display sign-on 
 5342              	   on both CONSOLE
 5343              	***********************/
 5344              	HI_BOTH:
 5345 ???? 504700BF 	    _NEST 
 5346 ???? 1D0C0000 		_ADR LOCAL 
 5347 ???? 4D0C0000 		_ADR CONSOLE 
 5348 ???? A9660000 		_ADR HI 
 5349 ???? 350C0000 		_ADR SERIAL 
 5350 ???? 4D0C0000 		_ADR CONSOLE 
 5351 ???? A9660000 		_ADR HI
 5352 ???? B72F0000 		_UNNEST 
 5353              	
 5354              	/**********************
 5355              	 check if PS2 keyboard 
 5356              	 present.
 5357              	**********************/
 5358              	PS2_QUERY: 
 5359 ???? 504700BF 		_NEST 
 5360 ???? D7310000 		_DOLIT 400 
 5360      90010000 
 5361 ???? 0D310000 		_ADR PAUSE
 5362 ???? 3D1A0000 		_ADR PS2_QKEY
 5363 ???? 17320000 		_QBRAN 1f
 5363      64670000 
 5364 ???? D7310000 		_DOLIT BAT_OK 
 5364      AA000000 
 5365 ???? 75340000 		_ADR XORR 
 5366 ???? 17320000 		_QBRAN 9f 
 5366      A8670000 
 5367 ???? 251C0000 	1:	_ADR KBD_RST
 5368 ???? D7310000 		_DOLIT BAT_OK 
 5368      AA000000 
 5369 ???? 75340000 		_ADR XORR  
 5370 ???? 17320000 		_QBRAN 9f  
 5370      A8670000 
 5371              	// no ps2 keyboard 
 5372              	// swith to serial console
 5373 ???? D9460000 		_ADR CR 
 5374 ???? 35470000 		_DOTQP 25,"no PS2 keyboard detected."
 5374      196E6F20 
 5374      50533220 
 5374      6B657962 
 5374      6F617264 
 5375 ???? 350C0000 		_ADR SERIAL 
 5376 ???? 4D0C0000 		_ADR CONSOLE 
 5377 ???? B72F0000 	9:	_UNNEST 
 5378              	
ARM GAS  forth.s 			page 224


 5379              	/*************************
 5380              	   check PA8 to 
 5381              	   select console 
 5382              	   PA8 -> low  LOCAL 
 5383              	   PA8 -> high SERIAL 
 5384              	*************************/
 5385              	IF_SENSE:
 5386 ???? 504700BF 		_NEST 
 5387 ???? 1D0C0000 		_ADR LOCAL 
 5388 ???? D7310000 		_DOLIT (GPIOA_BASE_ADR+GPIO_IDR) 
 5388      10000240 
 5389 ???? 6D320000 		_ADR AT 
 5390 ???? D7310000 		_DOLIT (1<<8)
 5390      00010000 
 5391 ???? 4D340000 		_ADR ANDD 
 5392 ???? 17320000 		_QBRAN 9f 
 5392      D8670000 
 5393 ???? 29350000 		_ADR ONEP 
 5394 ???? 4D0C0000 	9:  _ADR CONSOLE 
 5395 ???? B72F0000 		_UNNEST 
 5396              	
 5397              	/****************************
 5398              	   display READY on active
 5399              	   console
 5400              	***************************/
 5401              	READY:
 5402 ???? 504700BF 	    _NEST 
 5403 ???? 35470000 		_DOTQP 5,"READY"
 5403      05524541 
 5403      445900BF 
 5404 ???? D9460000 		_ADR  CR 
 5405 ???? B72F0000 	    _UNNEST 
 5406              	
 5407              	/********************
 5408              	    COLD	( -- )
 5409              	 	The high level cold 
 5410              		start sequence.
 5411              	**************************/
 5412 ???? A4660000 		.word	LINK 
 5413              		LINK = . 
 5414 ???? 04       	_LASTN:	.byte  4
 5415 ???? 434F4C44 		.ascii "COLD"
 5416 ???? 0000BF   		.p2align 2	
 5417              	COLD:
 5418 ???? 00B5F9F7 		_CALL forth_init 
 5418      97FE5DF8 
 5418      04EB
 5419 ???? DFF85CC0 		ldr IP,=COLD1 
 5420 ???? FCF7CDBB 		_NEXT
 5421 ???? 00BF     		.p2align 2 
 5422              	COLD1:
 5423 ???? D7310000 		_DOLIT  0 
 5423      00000000 
 5424 ???? 41310000 		_ADR ULED // turn off user LED 
 5425 ???? D7310000 		_DOLIT	UZERO
 5425      64080000 
 5426 ???? D7310000 		_DOLIT	UPP
ARM GAS  forth.s 			page 225


 5426      00000020 
 5427 ???? D7310000 		_DOLIT	ULAST-UZERO
 5427      DC000000 
 5428 ???? CD400000 		_ADR	WMOVE 			// initialize user area
 5429 ???? 3D530000 		_ADR	PRESE			// initialize stack and TIB
 5430 ???? D11E0000 		_ADR	WR_DIS          // disable WEL bit in U3 spi flash  
 5431 ???? 35670000 		_ADR 	PS2_QUERY  
 5432 ???? D5390000 		_ADR	TBOOT
 5433 ???? 69400000 		_ADR	ATEXE			// application boot
 5434 ???? 155E0000 		_ADR	OVERT
 5435 ???? AD670000 		_ADR	IF_SENSE
 5436 ???? E1670000 		_ADR    READY 
 5437 ???? 3F320000 		_BRAN	QUIT			// start interpretation
 5437      54530000 
 5438              	COLD2:
 5439              		.p2align 2 	
 5440              	CTOP:
 5441 ???? FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5442              	
 5443              	
 5444 ???? 18680000 	  .end 
****  Error: invalid constant (2224) after fixup
ARM GAS  forth.s 			page 226


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  forth.s 			page 227


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:116    *ABS*:0000000000000000 INP
     stm32f411ce.inc:117    *ABS*:0000000000000001 GPO
     stm32f411ce.inc:118    *ABS*:0000000000000002 AFO
     stm32f411ce.inc:119    *ABS*:0000000000000003 ANA
     stm32f411ce.inc:120    *ABS*:0000000000000000 PP
     stm32f411ce.inc:121    *ABS*:0000000000000001 OD
     stm32f411ce.inc:123    *ABS*:0000000000000001 OUTPUT_PP
     stm32f411ce.inc:124    *ABS*:0000000000000011 OUTPUT_OD
     stm32f411ce.inc:125    *ABS*:0000000000000002 OUTPUT_AFPP
     stm32f411ce.inc:126    *ABS*:0000000000000012 OUTPUT_AFOD
     stm32f411ce.inc:128    *ABS*:0000000000000000 FLOAT
     stm32f411ce.inc:129    *ABS*:0000000000000001 PULLUP
     stm32f411ce.inc:130    *ABS*:0000000000000002 PULLDOWN
     stm32f411ce.inc:131    *ABS*:0000000000000003 INPUT_ANA
     stm32f411ce.inc:132    *ABS*:0000000000000000 INPUT_FLOAT
     stm32f411ce.inc:133    *ABS*:0000000000000020 INPUT_PD
     stm32f411ce.inc:134    *ABS*:0000000000000010 INPUT_PU
     stm32f411ce.inc:135    *ABS*:0000000000000002 INPUT_AFO
     stm32f411ce.inc:137    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:139    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:140    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:141    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:142    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:143    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:144    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:145    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:148    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:150    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:151    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:152    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:153    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:156    *ABS*:00000000e000ed00 SCB_BASE_ADR
ARM GAS  forth.s 			page 228


     stm32f411ce.inc:158    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:159    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:160    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:161    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:162    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:163    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:164    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:165    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:166    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:167    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:168    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:169    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:170    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:171    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:172    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:173    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:174    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:175    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:177    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:180    *ABS*:00000000e000ed88 CPACR
     stm32f411ce.inc:181    *ABS*:00000000e000ef34 FPC_BASE_ADR
     stm32f411ce.inc:182    *ABS*:0000000000000000 FPCCR
     stm32f411ce.inc:183    *ABS*:0000000000000004 FPCAR
     stm32f411ce.inc:184    *ABS*:0000000000000008 FPDSCR
     stm32f411ce.inc:185    *ABS*:000000000000000c MVFR0
     stm32f411ce.inc:186    *ABS*:0000000000000010 MVFR1
     stm32f411ce.inc:187    *ABS*:0000000000000014 MVFR2
     stm32f411ce.inc:190    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:191    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:192    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:193    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:194    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:195    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:196    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:197    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:198    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:199    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:200    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:201    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:202    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:203    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:204    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:205    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:206    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:207    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:208    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:209    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:210    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:211    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:212    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:213    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:214    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:215    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:216    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:217    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:218    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:219    *ABS*:0000000000000290 NVIC_ICPR4
ARM GAS  forth.s 			page 229


     stm32f411ce.inc:220    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:221    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:222    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:223    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:224    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:225    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:226    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:227    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:228    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:229    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:230    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:232    *ABS*:00000000e000e400 NVIC_IPR_BASE
     stm32f411ce.inc:235    *ABS*:fffffffffffffff2 NMI_IRQ
     stm32f411ce.inc:236    *ABS*:fffffffffffffff3 HF_IRQ
     stm32f411ce.inc:237    *ABS*:fffffffffffffff4 MM_IRQ
     stm32f411ce.inc:238    *ABS*:fffffffffffffff5 BF_IRQ
     stm32f411ce.inc:239    *ABS*:fffffffffffffff6 UF_IRQ
     stm32f411ce.inc:240    *ABS*:fffffffffffffffb SVC_IRQ
     stm32f411ce.inc:241    *ABS*:fffffffffffffffc DM_IRQ
     stm32f411ce.inc:242    *ABS*:fffffffffffffffe PSV_IRQ
     stm32f411ce.inc:243    *ABS*:ffffffffffffffff STCK_IRQ
     stm32f411ce.inc:244    *ABS*:0000000000000000 WWDG_IRQ
     stm32f411ce.inc:245    *ABS*:0000000000000001 EXTI16_IRQ
     stm32f411ce.inc:246    *ABS*:0000000000000002 EXTI21_IRQ
     stm32f411ce.inc:247    *ABS*:0000000000000003 EXTI22_IRQ
     stm32f411ce.inc:248    *ABS*:0000000000000004 FLASH_IRQ
     stm32f411ce.inc:249    *ABS*:0000000000000005 RCC_IRQ
     stm32f411ce.inc:250    *ABS*:0000000000000006 EXTI0_IRQ
     stm32f411ce.inc:251    *ABS*:0000000000000007 EXTI1_IRQ
     stm32f411ce.inc:252    *ABS*:0000000000000008 EXTI2_IRQ
     stm32f411ce.inc:253    *ABS*:0000000000000009 EXTI3_IRQ
     stm32f411ce.inc:254    *ABS*:000000000000000a EXTI4_IRQ
     stm32f411ce.inc:255    *ABS*:000000000000000b DMA1S0_IRQ
     stm32f411ce.inc:256    *ABS*:000000000000000c DMA1S1_IRQ
     stm32f411ce.inc:257    *ABS*:000000000000000d DMA1S2_IRQ
     stm32f411ce.inc:258    *ABS*:000000000000000e DMA1S3_IRQ
     stm32f411ce.inc:259    *ABS*:000000000000000f DMA1S4_IRQ
     stm32f411ce.inc:260    *ABS*:0000000000000010 DMA1S5_IRQ
     stm32f411ce.inc:261    *ABS*:0000000000000011 DMA1S6_IRQ
     stm32f411ce.inc:262    *ABS*:0000000000000012 ADC_IRQ
     stm32f411ce.inc:263    *ABS*:0000000000000017 EXTI9_5_IRQ
     stm32f411ce.inc:264    *ABS*:0000000000000018 TIM1BRK_IRQ
     stm32f411ce.inc:265    *ABS*:0000000000000019 TIM1UP_IRQ
     stm32f411ce.inc:266    *ABS*:000000000000001a TIM1TRG_IRQ
     stm32f411ce.inc:267    *ABS*:000000000000001b TIM1CC_IRQ
     stm32f411ce.inc:268    *ABS*:000000000000001c TIM2_IRQ
     stm32f411ce.inc:269    *ABS*:000000000000001d TIM3_IRQ
     stm32f411ce.inc:270    *ABS*:000000000000001e TIM4_IRQ
     stm32f411ce.inc:271    *ABS*:000000000000001f I2C1EV_IRQ
     stm32f411ce.inc:272    *ABS*:0000000000000020 I2C1ER_IRQ
     stm32f411ce.inc:273    *ABS*:0000000000000021 I2C2EV_IRQ
     stm32f411ce.inc:274    *ABS*:0000000000000022 I2C2ER_IRQ
     stm32f411ce.inc:275    *ABS*:0000000000000023 SPI1_IRQ
     stm32f411ce.inc:276    *ABS*:0000000000000024 SPI2_IRQ
     stm32f411ce.inc:277    *ABS*:0000000000000025 USART1_IRQ
     stm32f411ce.inc:278    *ABS*:0000000000000026 USART2_IRQ
     stm32f411ce.inc:279    *ABS*:0000000000000028 EXTI15_10_IRQ
ARM GAS  forth.s 			page 230


     stm32f411ce.inc:280    *ABS*:0000000000000029 EXTI17_IRQ
     stm32f411ce.inc:281    *ABS*:000000000000002a EXTI18_IRQ
     stm32f411ce.inc:282    *ABS*:000000000000002f DMA1S7_IRQ
     stm32f411ce.inc:283    *ABS*:0000000000000031 SDIO_IRQ
     stm32f411ce.inc:284    *ABS*:0000000000000032 TIM5_IRQ
     stm32f411ce.inc:285    *ABS*:0000000000000033 SPI3_IRQ
     stm32f411ce.inc:286    *ABS*:0000000000000038 DMA2S0_IRQ
     stm32f411ce.inc:287    *ABS*:0000000000000039 DMA2S1_IRQ
     stm32f411ce.inc:288    *ABS*:000000000000003a DMAS2_IRQ
     stm32f411ce.inc:289    *ABS*:000000000000003b DMAS3_IRQ
     stm32f411ce.inc:290    *ABS*:000000000000003c DMAS4_IRQ
     stm32f411ce.inc:291    *ABS*:0000000000000043 OTG_FS_IRQ
     stm32f411ce.inc:292    *ABS*:0000000000000044 DMA2S5_IRQ
     stm32f411ce.inc:293    *ABS*:0000000000000045 DMA2S6_IRQ
     stm32f411ce.inc:294    *ABS*:0000000000000046 DMA2S7_IRQ
     stm32f411ce.inc:295    *ABS*:0000000000000047 USART6_IRQ
     stm32f411ce.inc:296    *ABS*:0000000000000048 I2C3EV_IRQ
     stm32f411ce.inc:297    *ABS*:0000000000000049 I2C3ER_IRQ
     stm32f411ce.inc:298    *ABS*:0000000000000051 FPU_IRQ
     stm32f411ce.inc:299    *ABS*:0000000000000054 SPI4_IRQ
     stm32f411ce.inc:300    *ABS*:0000000000000055 SPI5_IRQ
     stm32f411ce.inc:304    *ABS*:0000000040010000 TIM1_BASE_ADR
     stm32f411ce.inc:305    *ABS*:0000000040010400 TIM9_BASE_ADR
     stm32f411ce.inc:306    *ABS*:0000000040010800 TIM10_BASE_ADR
     stm32f411ce.inc:307    *ABS*:0000000040010c00 TIM11_BASE_ADR
     stm32f411ce.inc:309    *ABS*:0000000040000000 TIM2_BASE_ADR
     stm32f411ce.inc:310    *ABS*:0000000040000400 TIM3_BASE_ADR
     stm32f411ce.inc:311    *ABS*:0000000040000800 TIM4_BASE_ADR
     stm32f411ce.inc:312    *ABS*:0000000040000c00 TIM5_BASE_ADR
     stm32f411ce.inc:315    *ABS*:0000000000000030 TIM1_RCR
     stm32f411ce.inc:316    *ABS*:0000000000000044 TIM1_BDTR
     stm32f411ce.inc:319    *ABS*:0000000000000000 TIM_CR1
     stm32f411ce.inc:320    *ABS*:0000000000000004 TIM_CR2
     stm32f411ce.inc:321    *ABS*:0000000000000008 TIM_SMCR
     stm32f411ce.inc:322    *ABS*:000000000000000c TIM_DIER
     stm32f411ce.inc:323    *ABS*:0000000000000010 TIM_SR
     stm32f411ce.inc:324    *ABS*:0000000000000014 TIM_EGR
     stm32f411ce.inc:325    *ABS*:0000000000000018 TIM_CCMR1
     stm32f411ce.inc:326    *ABS*:000000000000001c TIM_CCMR2
     stm32f411ce.inc:327    *ABS*:0000000000000020 TIM_CCER
     stm32f411ce.inc:328    *ABS*:0000000000000024 TIM_CNT
     stm32f411ce.inc:329    *ABS*:0000000000000028 TIM_PSC
     stm32f411ce.inc:330    *ABS*:000000000000002c TIM_ARR
     stm32f411ce.inc:331    *ABS*:0000000000000034 TIM_CCR1
     stm32f411ce.inc:332    *ABS*:0000000000000038 TIM_CCR2
     stm32f411ce.inc:333    *ABS*:000000000000003c TIM_CCR3
     stm32f411ce.inc:334    *ABS*:0000000000000040 TIM_CCR4
     stm32f411ce.inc:335    *ABS*:0000000000000048 TIM_DCR
     stm32f411ce.inc:336    *ABS*:000000000000004c TIM_DMAR
     stm32f411ce.inc:337    *ABS*:0000000000000050 TIM2_OR
     stm32f411ce.inc:338    *ABS*:0000000000000050 TIM5_OR
     stm32f411ce.inc:341    *ABS*:0000000040013800 SYSCFG_BASE_ADR
     stm32f411ce.inc:343    *ABS*:0000000000000000 SYSCFG_MEMRMP
     stm32f411ce.inc:344    *ABS*:0000000000000004 SYSCFG_PMC
     stm32f411ce.inc:345    *ABS*:0000000000000008 SYSCFG_EXTICR1
     stm32f411ce.inc:346    *ABS*:000000000000000c SYSCFG_EXTICR2
     stm32f411ce.inc:347    *ABS*:0000000000000010 SYSCFG_EXTICR3
ARM GAS  forth.s 			page 231


     stm32f411ce.inc:348    *ABS*:0000000000000014 SYSCFG_EXTICR4
     stm32f411ce.inc:349    *ABS*:0000000000000020 SYSCFG_CMPCR
     stm32f411ce.inc:352    *ABS*:0000000040013c00 EXTI_BASE_ADR
     stm32f411ce.inc:354    *ABS*:0000000000000000 EXTI_IMR
     stm32f411ce.inc:355    *ABS*:0000000000000004 EXTI_EMR
     stm32f411ce.inc:356    *ABS*:0000000000000008 EXTI_RTSR
     stm32f411ce.inc:357    *ABS*:000000000000000c EXTI_FTSR
     stm32f411ce.inc:358    *ABS*:0000000000000010 EXTI_SWIER
     stm32f411ce.inc:359    *ABS*:0000000000000014 EXTI_PR
     stm32f411ce.inc:362    *ABS*:0000000040013000 SPI1_BASE_ADR
     stm32f411ce.inc:363    *ABS*:0000000040003800 SPI2_BASE_ADR
     stm32f411ce.inc:364    *ABS*:0000000040003c00 SPI3_BASE_ADR
     stm32f411ce.inc:365    *ABS*:0000000040013400 SPI4_BASE_ADR
     stm32f411ce.inc:367    *ABS*:0000000000000000 SPI_CR1
     stm32f411ce.inc:368    *ABS*:0000000000000004 SPI_CR2
     stm32f411ce.inc:369    *ABS*:0000000000000008 SPI_SR
     stm32f411ce.inc:370    *ABS*:000000000000000c SPI_DR
     stm32f411ce.inc:371    *ABS*:0000000000000010 SPI_CRCPR
     stm32f411ce.inc:372    *ABS*:0000000000000014 SPI_RXCRCR
     stm32f411ce.inc:373    *ABS*:0000000000000018 SPI_TXCRCR
     stm32f411ce.inc:374    *ABS*:000000000000001c SPI_I2SCFGR
     stm32f411ce.inc:375    *ABS*:0000000000000020 SPI_I2SPR
          macros.inc:23     *ABS*:0000000000000001 VER
          macros.inc:24     *ABS*:0000000000000000 EXT
          macros.inc:42     *ABS*:0000000040020800 LED_GPIO
          macros.inc:43     *ABS*:000000000000000d LED_PIN
          macros.inc:44     *ABS*:0000000040011000 UART
          macros.inc:48     *ABS*:000000002001ff80 RPP
          macros.inc:49     *ABS*:000000002001feb0 TIBB
          macros.inc:50     *ABS*:0000000000000050 TIB_SIZE
          macros.inc:51     *ABS*:000000002001feb0 SPP
          macros.inc:52     *ABS*:0000000020018130 VID_BUFF
          macros.inc:53     *ABS*:0000000020017130 BLK_BUFFS
          macros.inc:54     *ABS*:0000000020000000 UPP
          macros.inc:55     *ABS*:0000000020000512 DTOP
          macros.inc:56     *ABS*:000000002001712c DEND
          macros.inc:57     *ABS*:0000000017fffe00 MAPOFFSET
          macros.inc:59     *ABS*:0000000000000040 COMPO
          macros.inc:60     *ABS*:0000000000000080 IMEDD
          macros.inc:61     *ABS*:00000000ffffff1f MASKK
          macros.inc:63     *ABS*:0000000000000004 CELLL
          macros.inc:64     *ABS*:000000000000000a BASEE
          macros.inc:65     *ABS*:0000000000000008 VOCSS
          macros.inc:67     *ABS*:0000000000000008 BKSPP
          macros.inc:68     *ABS*:000000000000000a LF
          macros.inc:69     *ABS*:000000000000000d CRR
          macros.inc:70     *ABS*:000000000000001b ERR
          macros.inc:71     *ABS*:0000000000000027 TIC
          macros.inc:76     *ABS*:0000000000000004 RNDSEED
          macros.inc:77     *ABS*:0000000000000008 TICKS
          macros.inc:78     *ABS*:000000000000000c CD_TIMER
          macros.inc:79     *ABS*:0000000000000010 BOOT
          macros.inc:80     *ABS*:0000000000000014 STDIN
          macros.inc:81     *ABS*:0000000000000018 STDOUT
          macros.inc:82     *ABS*:000000000000001c NBASE
          macros.inc:83     *ABS*:0000000000000020 BCHAR
          macros.inc:84     *ABS*:0000000000000024 TMP
ARM GAS  forth.s 			page 232


          macros.inc:85     *ABS*:0000000000000028 CSPAN
          macros.inc:86     *ABS*:000000000000002c TOIN
             block.s:159    .text:0000000000002224 SRC
          macros.inc:88     *ABS*:0000000000000030 NTIBB
          macros.inc:89     *ABS*:0000000000000034 TIBUF
          macros.inc:90     *ABS*:00000000000000d0 SRCID
             forth.s:3588   .text:0000000000005244 EVAL
          macros.inc:92     *ABS*:0000000000000040 VHOLD
          macros.inc:93     *ABS*:0000000000000044 CTXT
          macros.inc:94     *ABS*:0000000000000048 FORTH_CTOP
          macros.inc:95     *ABS*:000000000000004c USER_CTOP
          macros.inc:96     *ABS*:0000000000000050 LASTN
          macros.inc:97     *ABS*:0000000000000010 RX_QUEUE_SIZE
          macros.inc:98     *ABS*:0000000000000054 RX_QUEUE
          macros.inc:99     *ABS*:0000000000000064 RX_HEAD
          macros.inc:100    *ABS*:0000000000000068 RX_TAIL
          macros.inc:101    *ABS*:000000000000006c VID_CNTR
          macros.inc:102    *ABS*:0000000000000070 VID_STATE
          macros.inc:103    *ABS*:0000000000000074 VID_FIELD
          macros.inc:104    *ABS*:0000000000000078 VID_BUFFER
          macros.inc:105    *ABS*:000000000000007c KBD_STRUCT
          macros.inc:106    *ABS*:0000000000000010 KBD_QUEUE_SIZE
          macros.inc:107    *ABS*:0000000000000080 KBD_QUEUE
          macros.inc:108    *ABS*:0000000000000090 KBD_QHEAD
          macros.inc:109    *ABS*:0000000000000094 KBD_QTAIL
          macros.inc:110    *ABS*:0000000000000098 ROW
          macros.inc:111    *ABS*:000000000000009c COL
          macros.inc:112    *ABS*:00000000000000a0 BK_COLOR
          macros.inc:113    *ABS*:00000000000000a4 PEN_COLOR
          macros.inc:114    *ABS*:00000000000000a8 VFPSW
          macros.inc:115    *ABS*:00000000000000ac VFBASE
          macros.inc:116    *ABS*:00000000000000b0 BEEP_DTMR
          macros.inc:117    *ABS*:00000000000000b4 CSTATE
          macros.inc:119    *ABS*:00000000000000b8 BLKID
          macros.inc:120    *ABS*:00000000000000bc BLKN
          macros.inc:121    *ABS*:00000000000000cc BLKB
              init.s:38     .isr_vector:0000000000000000 isr_vectors
              init.s:507    .text:00000000000004fc reset_handler
              init.s:304    .text:0000000000000264 nmi_handler
              init.s:322    .text:000000000000029c hardfault_handler
              init.s:341    .text:00000000000002d8 memfault_handler
              init.s:368    .text:0000000000000344 busfault_handler
              init.s:401    .text:00000000000003d8 usagefault_handler
              init.s:156    .text:0000000000000000 default_handler
              init.s:453    .text:000000000000046c systick_handler
              init.s:56     .isr_vector:0000000000000040 irq0
             tvout.s:131    .text:0000000000000e44 tv_out_isr
              init.s:427    .text:000000000000043c timer4_handler
          ser-term.s:35     .text:0000000000000b28 uart_rx_handler
           ps2_kbd.s:78     .text:0000000000001720 kbd_isr
              init.s:195    .text:00000000000000b0 fpu_exception
              init.s:144    .isr_vector:0000000000000198 isr_end
              init.s:146    .isr_vector:0000000000000198 $d
              init.s:154    .text:0000000000000000 $t
              init.s:528    .text:0000000000000538 forth_init
              init.s:160    .text:0000000000000012 dh
             forth.s:87     .text:0000000000002fb0 INEXT
ARM GAS  forth.s 			page 233


              init.s:161    .text:0000000000000012 $d
             forth.s:3656   .text:000000000000533c PRESE
             forth.s:2668   .text:0000000000004734 DOTQP
              init.s:162    .text:0000000000000032 $t
              init.s:163    .text:0000000000000034 $d
             forth.s:133    .text:0000000000002ffc CFSR
             forth.s:579    .text:0000000000003390 DUPP
             forth.s:505    .text:00000000000032fc TOR
             forth.s:340    .text:00000000000031d6 DOLIT
             forth.s:1330   .text:00000000000039ec BASE
             forth.s:426    .text:0000000000003258 STORE
             forth.s:2752   .text:0000000000004830 UDOT
              init.s:171    .text:0000000000000064 $d
             forth.s:463    .text:0000000000003298 RFROM
             forth.s:676    .text:000000000000344c ANDD
             forth.s:381    .text:0000000000003216 QBRAN
             forth.s:145    .text:000000000000301c BFAR
             forth.s:192    .text:0000000000003078 EMIT
             forth.s:2557   .text:000000000000461c SPACE
              init.s:182    .text:00000000000000a2 $t
              init.s:183    .text:00000000000000a4 $d
               fpu.s:110    .text:0000000000002308 FPSCR
              init.s:489    .text:00000000000004d4 reset_mcu
              init.s:194    .text:00000000000000b0 $t
              init.s:733    .text:0000000000000744 nvic_disable_irq
              init.s:203    .text:00000000000000c8 fpu_except
              init.s:204    .text:00000000000000c8 $d
             forth.s:2620   .text:00000000000046d8 CR
             forth.s:436    .text:000000000000326c AT
             forth.s:742    .text:00000000000034dc SUBB
              init.s:214    .text:0000000000000100 $d
             forth.s:2770   .text:0000000000004864 DOT
              init.s:216    .text:0000000000000120 $d
             forth.s:872    .text:00000000000035dc QDUP
              init.s:269    .text:0000000000000208 fpu_exceptions
             forth.s:733    .text:00000000000034cc PLUS
             forth.s:1252   .text:0000000000003940 COUNT
             forth.s:2585   .text:0000000000004670 TYPEE
             forth.s:1068   .text:0000000000003798 CLZ
             forth.s:587    .text:00000000000033a0 SWAP
             forth.s:724    .text:00000000000034bc LSHIFT
               fpu.s:123    .text:0000000000002328 CLR_FPSCR
              init.s:256    .text:00000000000001e8 exit_fpu_isr
             forth.s:3667   .text:0000000000005354 QUIT
              init.s:257    .text:00000000000001e8 $t
              init.s:716    .text:000000000000071a nvic_enable_irq
              init.s:269    .text:0000000000000208 $d
              init.s:272    .text:000000000000021c fpu_except_invalid_op
              init.s:277    .text:0000000000000230 fpu_except_div0
              init.s:282    .text:0000000000000240 fpu_except_overflow
              init.s:287    .text:000000000000024c fpu_except_underflow
              init.s:292    .text:0000000000000258 fpu_except_inexact
              init.s:273    .text:000000000000021c $d
              init.s:278    .text:0000000000000230 $d
              init.s:283    .text:0000000000000240 $d
              init.s:286    .text:000000000000024a $t
              init.s:288    .text:000000000000024c $d
ARM GAS  forth.s 			page 234


              init.s:293    .text:0000000000000258 $d
              init.s:307    .text:000000000000026c nmi_hl
              init.s:308    .text:000000000000026c $d
              init.s:310    .text:0000000000000292 $t
              init.s:311    .text:0000000000000294 $d
             forth.s:3454   .text:00000000000050a0 ABORT
              init.s:320    .text:000000000000029c $t
              init.s:327    .text:00000000000002ae hardfault_hl
              init.s:328    .text:00000000000002ae $d
              init.s:331    .text:00000000000002d0 $d
              init.s:339    .text:00000000000002d8 $t
              init.s:346    .text:00000000000002ea memfault_hl
              init.s:347    .text:00000000000002ea $d
              init.s:350    .text:0000000000000318 $d
              init.s:366    .text:0000000000000344 $t
              init.s:373    .text:0000000000000356 busfault_hl
              init.s:374    .text:0000000000000356 $d
             forth.s:275    .text:0000000000003140 ULED
             forth.s:1303   .text:00000000000039a8 MSEC
              init.s:382    .text:000000000000039e $t
              init.s:383    .text:00000000000003a0 $d
              init.s:390    .text:00000000000003cc $d
              init.s:399    .text:00000000000003d8 $t
              init.s:406    .text:00000000000003ea usagefault_hl
              init.s:407    .text:00000000000003ea $d
              init.s:409    .text:000000000000040e $t
              init.s:410    .text:0000000000000410 $d
             forth.s:715    .text:00000000000034a4 RSHIFT
              init.s:425    .text:000000000000043c $t
              init.s:468    .text:0000000000000494 systick_exit
              init.s:471    .text:0000000000000496 user_reboot
              init.s:475    .text:00000000000004a8 ur
              init.s:476    .text:00000000000004a8 $d
              init.s:484    .text:00000000000004c4 user_reboot_msg
              init.s:485    .text:00000000000004c4 $d
              init.s:670    .text:00000000000006a8 remap
              init.s:541    .text:0000000000000560 init_devices
               fpu.s:71     .text:00000000000022aa fpu_init
          ser-term.s:56     .text:0000000000000b56 ser_init
             tvout.s:74     .text:0000000000000d94 tv_init
           ps2_kbd.s:307    .text:0000000000001940 kbd_init
         spi-flash.s:41     .text:0000000000001d54 flash_spi_init
             forth.s:5417   .text:0000000000006804 COLD
             forth.s:83     .text:0000000000002fa8 NEST
              init.s:554    .text:000000000000057e wait_hserdy
              init.s:575    .text:00000000000005a0 wait_pllrdy
              init.s:587    .text:00000000000005ba wait_sws
              init.s:778    .text:00000000000007a0 gpio_config
              init.s:853    .text:000000000000084c gpio_out
              init.s:695    .text:00000000000006e8 nvic_set_priority
              init.s:868    .text:0000000000000864 UZERO
              init.s:915    .text:0000000000000940 ULAST
              init.s:704    .text:0000000000000700 negative_irq
              init.s:750    .text:0000000000000772 nvic_clear_irq_pending
              init.s:815    .text:0000000000000808 input_pull
              init.s:808    .text:00000000000007f6 output_type
              init.s:831    .text:000000000000081e gpio_speed
ARM GAS  forth.s 			page 235


              init.s:869    .text:0000000000000864 $d
             forth.s:5344   .text:0000000000006714 HI_BOTH
           ps2_kbd.s:396    .text:0000000000001a3c PS2_QKEY
             tvout.s:563    .text:0000000000001304 TV_EMIT
             forth.s:3522   .text:0000000000005150 INTER
             forth.s:5414   .text:00000000000067fc _LASTN
             forth.s:5440   .text:0000000000006868 CTOP
             forth.s:5413   .text:00000000000067fc LINK
              init.s:920    .text:0000000000000940 $d
       environment.s:32     .text:0000000000000970 _ENVQ
       environment.s:32     .text:0000000000000980 ENVQ
       environment.s:35     .text:0000000000000984 $d
             forth.s:1408   .text:0000000000003a98 CNTXT
       environment.s:215    .text:0000000000000b06 _ENVLASTN
             forth.s:562    .text:0000000000003370 DROP
             forth.s:791    .text:0000000000003538 ONEM
             forth.s:3210   .text:0000000000004d90 NAMEQ
             forth.s:349    .text:00000000000031ec EXECU
             forth.s:410    .text:000000000000323e BRAN
             forth.s:90     .text:0000000000002fb6 UNNEST
       environment.s:201    .text:0000000000000ae2 ENVLNK
       environment.s:82     .text:00000000000009e4 _CNTDSTR
       environment.s:82     .text:00000000000009f4 $t
       environment.s:82     .text:00000000000009f4 CNTDSTR
       environment.s:223    .text:0000000000000b1c flag_true
       environment.s:95     .text:00000000000009fe $d
       environment.s:95     .text:0000000000000a02 _SLHOLD
       environment.s:95     .text:0000000000000a08 $t
       environment.s:95     .text:0000000000000a08 SLHOLD
       environment.s:107    .text:0000000000000a12 $d
       environment.s:107    .text:0000000000000a16 _SLPAD
       environment.s:107    .text:0000000000000a1c SLPAD
       environment.s:118    .text:0000000000000a26 $d
       environment.s:118    .text:0000000000000a2a _ADRBITS
       environment.s:118    .text:0000000000000a3c $t
       environment.s:118    .text:0000000000000a3c ADRBITS
       environment.s:130    .text:0000000000000a46 $d
       environment.s:130    .text:0000000000000a4a _FLOORED
       environment.s:130    .text:0000000000000a52 $t
       environment.s:130    .text:0000000000000a54 FLOORED
       environment.s:141    .text:0000000000000a56 $d
       environment.s:141    .text:0000000000000a5a _MAXCHAR
       environment.s:141    .text:0000000000000a64 MAXCHAR
       environment.s:152    .text:0000000000000a6e $d
       environment.s:152    .text:0000000000000a72 _MAXD
       environment.s:152    .text:0000000000000a78 $t
       environment.s:152    .text:0000000000000a78 MAXD
       environment.s:165    .text:0000000000000a92 $d
       environment.s:165    .text:0000000000000a96 _MAXN
       environment.s:165    .text:0000000000000a9c $t
       environment.s:165    .text:0000000000000a9c MAXN
       environment.s:176    .text:0000000000000aaa $d
       environment.s:176    .text:0000000000000aae _MAXU
       environment.s:176    .text:0000000000000ab4 $t
       environment.s:176    .text:0000000000000ab4 MAXU
       environment.s:187    .text:0000000000000abe $d
       environment.s:187    .text:0000000000000ac2 _MAXUD
ARM GAS  forth.s 			page 236


       environment.s:187    .text:0000000000000acc MAXUD
       environment.s:201    .text:0000000000000ade $d
       environment.s:201    .text:0000000000000ae2 _RSTKCELLS
       environment.s:201    .text:0000000000000af8 RSTKCELLS
       environment.s:213    .text:0000000000000b02 $d
       environment.s:214    .text:0000000000000b06 ENVLINK
       environment.s:217    .text:0000000000000b12 $t
       environment.s:218    .text:0000000000000b14 STKCELLS
                            *ABS*:0000000000000003 VK_CTRL_C
          ser-term.s:90     .text:0000000000000bae $d
          ser-term.s:90     .text:0000000000000bb2 _SER_QKEY
          ser-term.s:90     .text:0000000000000bbc SER_QKEY
          ser-term.s:110    .text:0000000000000be8 $d
          ser-term.s:110    .text:0000000000000bec _SER_EMIT
          ser-term.s:110    .text:0000000000000bf8 SER_EMIT
          ser-term.s:124    .text:0000000000000c12 $d
          ser-term.s:124    .text:0000000000000c16 _LOCAL
          ser-term.s:124    .text:0000000000000c1c $t
          ser-term.s:124    .text:0000000000000c1c LOCAL
          ser-term.s:133    .text:0000000000000c28 $d
          ser-term.s:133    .text:0000000000000c2c _SERIAL
          ser-term.s:133    .text:0000000000000c34 SERIAL
          ser-term.s:142    .text:0000000000000c40 $d
          ser-term.s:142    .text:0000000000000c44 _CONSOLE
          ser-term.s:142    .text:0000000000000c4c $t
          ser-term.s:142    .text:0000000000000c4c CONSOLE
          ser-term.s:164    .text:0000000000000c6c $d
          ser-term.s:164    .text:0000000000000c70 _ANSI_PARAM
          ser-term.s:164    .text:0000000000000c7c ANSI_PARAM
          ser-term.s:166    .text:0000000000000c80 $d
             forth.s:783    .text:0000000000003528 ONEP
             forth.s:1788   .text:0000000000003e44 SLMOD
          ser-term.s:191    .text:0000000000000cec _ANSI_ESC
          ser-term.s:191    .text:0000000000000cf4 ANSI_ESC
          ser-term.s:193    .text:0000000000000cf8 $d
          ser-term.s:203    .text:0000000000000d18 _SER_AT
          ser-term.s:203    .text:0000000000000d20 SER_AT
          ser-term.s:205    .text:0000000000000d24 $d
          ser-term.s:219    .text:0000000000000d54 _SER_CLS
          ser-term.s:219    .text:0000000000000d5c $t
          ser-term.s:219    .text:0000000000000d5c SER_CLS
          ser-term.s:221    .text:0000000000000d60 $d
          ser-term.s:228    .text:0000000000000d84 $d
           tvout.inc:19     *ABS*:0000000000000140 HRES
           tvout.inc:20     *ABS*:00000000000000c8 VRES
           tvout.inc:21     *ABS*:0000000000000004 BPP
           tvout.inc:22     *ABS*:00000000000000a0 BPR
           tvout.inc:23     *ABS*:0000000000007d00 VIDEO_BUFFER_SIZE
           tvout.inc:25     *ABS*:0000000000000006 CHAR_WIDTH
           tvout.inc:26     *ABS*:0000000000000008 CHAR_HEIGHT
             tvout.s:33     *ABS*:0000000005b8d800 FCLK
             tvout.s:34     *ABS*:0000000000003d76 FHORZ
             tvout.s:35     *ABS*:00000000000017d4 HPER
             tvout.s:36     *ABS*:0000000000000be9 SYNC_LINE
             tvout.s:37     *ABS*:00000000000001c2 HPULSE
             tvout.s:38     *ABS*:00000000000000db SERRATION
             tvout.s:39     *ABS*:0000000000000a28 VSYNC_PULSE
ARM GAS  forth.s 			page 237


             tvout.s:40     *ABS*:00000000000002ee LEFT_MARGIN
             tvout.s:41     *ABS*:0000000000000028 VIDEO_FIRST_LINE
             tvout.s:42     *ABS*:00000000000000f0 VIDEO_LAST_LINE
             tvout.s:43     *ABS*:000000000000053f VIDEO_DELAY
             tvout.s:44     *ABS*:000000000000173f VIDEO_END
             tvout.s:47     *ABS*:0000000000000000 ST_VSYNC
             tvout.s:48     *ABS*:0000000000000001 ST_PREVID
             tvout.s:49     *ABS*:0000000000000002 ST_VIDEO
             tvout.s:50     *ABS*:0000000000000003 ST_POSTVID
             tvout.s:52     *ABS*:0000000000000000 ODD_FIELD
             tvout.s:53     *ABS*:ffffffffffffffff EVEN_FIELD
             tvout.s:56     *ABS*:0000000040020400 VID_GPIO
             tvout.s:58     *ABS*:000000000000000c VB0
             tvout.s:59     *ABS*:000000000000000d VB1
             tvout.s:60     *ABS*:000000000000000e VB2
             tvout.s:61     *ABS*:000000000000000f VB3
             tvout.s:74     .text:0000000000000d94 $t
             tvout.s:150    .text:0000000000000e70 state_vsync
             tvout.s:191    .text:0000000000000ec4 state_pre_video
             tvout.s:202    .text:0000000000000ed6 state_video_out
             tvout.s:237    .text:0000000000000f34 state_post_video
             tvout.s:254    .text:0000000000000f5a tv_isr_exit
             tvout.s:180    .text:0000000000000eaa sync_end
             tvout.s:246    .text:0000000000000f46 frame_end
             tvout.s:264    .text:0000000000000f5c $d
             tvout.s:264    .text:0000000000000f60 _BACKCOLOR
             tvout.s:264    .text:0000000000000f6c BACKCOLOR
             tvout.s:271    .text:0000000000000f78 $d
             tvout.s:271    .text:0000000000000f7c _PENCOLOR
             tvout.s:271    .text:0000000000000f86 $t
             tvout.s:271    .text:0000000000000f88 PENCOLOR
             tvout.s:278    .text:0000000000000f94 $d
             tvout.s:278    .text:0000000000000f98 _CURSOR_COL
             tvout.s:278    .text:0000000000000fa0 CURSOR_COL
             tvout.s:285    .text:0000000000000fac $d
             tvout.s:285    .text:0000000000000fb0 _CURSOR_ROW
             tvout.s:285    .text:0000000000000fb4 $t
             tvout.s:285    .text:0000000000000fb4 CURSOR_ROW
             tvout.s:292    .text:0000000000000fc0 $d
             tvout.s:292    .text:0000000000000fc4 _ROWY
             tvout.s:292    .text:0000000000000fca $t
             tvout.s:292    .text:0000000000000fcc ROWY
             tvout.s:299    .text:0000000000000fd8 $d
             tvout.s:299    .text:0000000000000fdc _COLX
             tvout.s:299    .text:0000000000000fe2 $t
             tvout.s:299    .text:0000000000000fe4 COLX
             tvout.s:306    .text:0000000000000ff0 $d
             tvout.s:306    .text:0000000000000ff4 _FONT
             tvout.s:306    .text:0000000000000ffc FONT
             tvout.s:738    .rodata:0000000000000000 font_6x8
             tvout.s:313    .text:0000000000001008 $d
             tvout.s:313    .text:000000000000100c _VIDBUFF
             tvout.s:313    .text:0000000000001014 $t
             tvout.s:313    .text:0000000000001014 VIDBUFF
             tvout.s:325    .text:000000000000101e $d
             tvout.s:325    .text:0000000000001022 _PLOT
             tvout.s:325    .text:0000000000001028 PLOT
ARM GAS  forth.s 			page 238


             tvout.s:373    .text:00000000000010ac plot_op
             tvout.s:341    .text:0000000000001054 op_back
             tvout.s:350    .text:000000000000106e op_pen
             tvout.s:359    .text:0000000000001088 op_invert
             tvout.s:363    .text:0000000000001090 op_xor
             tvout.s:373    .text:00000000000010ac $d
             tvout.s:378    .text:00000000000010b4 _VSYNC
             tvout.s:378    .text:00000000000010ba $t
             tvout.s:378    .text:00000000000010bc VSYNC
             tvout.s:386    .text:00000000000010c6 $d
             tvout.s:386    .text:00000000000010ca _CLS
             tvout.s:386    .text:00000000000010ce $t
             tvout.s:386    .text:00000000000010d0 CLS
             tvout.s:410    .text:0000000000001112 $d
             tvout.s:410    .text:0000000000001116 _CLRLINE
             tvout.s:410    .text:000000000000111e $t
             tvout.s:410    .text:0000000000001120 CLRLINE
             tvout.s:412    .text:0000000000001124 $d
             forth.s:751    .text:00000000000034ec STAR
             forth.s:2095   .text:0000000000004114 FILL
             tvout.s:427    .text:0000000000001158 _SCROLLUP
             tvout.s:427    .text:0000000000001164 SCROLLUP
             tvout.s:429    .text:0000000000001168 $d
             forth.s:2063   .text:00000000000040cc WMOVE
             tvout.s:448    .text:00000000000011b0 _SCROLLDOWN
             tvout.s:448    .text:00000000000011bc SCROLLDOWN
             tvout.s:450    .text:00000000000011c0 $d
             tvout.s:467    .text:0000000000001200 _TV_CRLF
             tvout.s:467    .text:0000000000001208 $t
             tvout.s:467    .text:0000000000001208 TV_CRLF
             tvout.s:482    .text:000000000000122a $d
             tvout.s:482    .text:000000000000122e _RIGHT
             tvout.s:482    .text:0000000000001234 $t
             tvout.s:482    .text:0000000000001234 RIGHT
             tvout.s:495    .text:0000000000001248 $d
             tvout.s:495    .text:000000000000124c _LEFT
             tvout.s:495    .text:0000000000001254 LEFT
             tvout.s:511    .text:0000000000001280 FONT_PIXEL
             tvout.s:518    .text:0000000000001290 INCR_X
             tvout.s:525    .text:000000000000129c NEXT_PIXEL
             tvout.s:534    .text:00000000000012a4 CHAR_ROW
             tvout.s:536    .text:00000000000012a8 $d
             forth.s:974    .text:00000000000036c4 DDUP
             forth.s:484    .text:00000000000032cc RAT
             forth.s:362    .text:00000000000031f8 DONXT
             forth.s:965    .text:00000000000036b0 TDROP
             tvout.s:551    .text:00000000000012e4 CHAR_FONT
             tvout.s:552    .text:00000000000012e4 $t
             tvout.s:563    .text:00000000000012f8 $d
             tvout.s:563    .text:00000000000012fc _TV_EMIT
             tvout.s:563    .text:0000000000001304 $t
             tvout.s:565    .text:0000000000001308 $d
             forth.s:1148   .text:0000000000003854 ULESS
             tvout.s:593    .text:000000000000138c CTRL_KEY
             forth.s:934    .text:0000000000003674 ROT
             forth.s:454    .text:000000000000328c CAT
             tvout.s:660    .text:0000000000001474 SHOW_CURSOR
ARM GAS  forth.s 			page 239


             tvout.s:691    .text:00000000000014fc HIDE_CURSOR
             forth.s:1123   .text:0000000000003814 EQUAL
             tvout.s:650    .text:0000000000001454 BACK_SPACE
             tvout.s:618    .text:00000000000013fc CAR_RET
             tvout.s:629    .text:0000000000001414 LN_FEED
             tvout.s:619    .text:00000000000013fc $t
             tvout.s:620    .text:0000000000001400 $d
             tvout.s:630    .text:0000000000001414 $t
             tvout.s:631    .text:0000000000001418 $d
             forth.s:694    .text:0000000000003474 XORR
             tvout.s:651    .text:0000000000001454 $t
             tvout.s:652    .text:0000000000001458 $d
             tvout.s:660    .text:0000000000001468 _SHOW_CURSOR
             tvout.s:660    .text:0000000000001474 $t
             tvout.s:663    .text:0000000000001478 $d
             forth.s:864    .text:00000000000035cc TWOSL
             forth.s:444    .text:0000000000003278 CSTOR
             forth.s:956    .text:000000000000369c DDROP
             tvout.s:691    .text:00000000000014f0 _HIDE_CURSOR
             tvout.s:691    .text:00000000000014fc $t
             tvout.s:694    .text:0000000000001500 $d
             forth.s:685    .text:0000000000003460 ORR
             tvout.s:704    .text:0000000000001528 _TV_AT
             tvout.s:704    .text:000000000000152e $t
             tvout.s:704    .text:0000000000001530 TV_AT
             tvout.s:719    .text:0000000000001554 $d
             tvout.s:719    .text:0000000000001558 _INPUT
             tvout.s:719    .text:000000000000155e $t
             tvout.s:719    .text:0000000000001560 INPUT
             tvout.s:721    .text:0000000000001564 $d
             forth.s:1970   .text:0000000000003ff4 PAD
             forth.s:3350   .text:0000000000004f50 ACCEP
             forth.s:612    .text:00000000000033d0 OVER
             tvout.s:734    .rodata:0000000000000000 $d
             tvout.s:839    .text:0000000000001590 $d
       ps2_codes.inc:4      *ABS*:00000000000000ff KBD_CMD_RESET
       ps2_codes.inc:5      *ABS*:00000000000000ed KBD_CMD_LED
       ps2_codes.inc:6      *ABS*:00000000000000fe KBD_CMD_RESEND
       ps2_codes.inc:9      *ABS*:00000000000000aa BAT_OK
       ps2_codes.inc:10     *ABS*:00000000000000fa KBD_ACK
       ps2_codes.inc:11     *ABS*:00000000000000f0 KEY_REL
       ps2_codes.inc:12     *ABS*:00000000000000e0 XT_KEY
       ps2_codes.inc:13     *ABS*:00000000000000e1 XT2_KEY
       ps2_codes.inc:16     *ABS*:0000000000000004 LED_CAPLOCK
       ps2_codes.inc:17     *ABS*:0000000000000002 LED_NUMLOCK
       ps2_codes.inc:18     *ABS*:0000000000000001 LED_SCROLL
       ps2_codes.inc:21     *ABS*:000000000000000d SC_TAB
       ps2_codes.inc:22     *ABS*:000000000000005a SC_ENTER
       ps2_codes.inc:23     *ABS*:0000000000000058 SC_CAPS
       ps2_codes.inc:24     *ABS*:0000000000000077 SC_NUM
       ps2_codes.inc:25     *ABS*:000000000000007e SC_SCROLL
       ps2_codes.inc:26     *ABS*:0000000000000012 SC_LSHIFT
       ps2_codes.inc:27     *ABS*:0000000000000059 SC_RSHIFT
       ps2_codes.inc:28     *ABS*:0000000000000014 SC_LCTRL
       ps2_codes.inc:29     *ABS*:0000000000000011 SC_LALT
       ps2_codes.inc:30     *ABS*:0000000000000066 SC_BKSP
       ps2_codes.inc:31     *ABS*:0000000000000076 SC_ESC
ARM GAS  forth.s 			page 240


       ps2_codes.inc:32     *ABS*:0000000000000005 SC_F1
       ps2_codes.inc:33     *ABS*:0000000000000006 SC_F2
       ps2_codes.inc:34     *ABS*:0000000000000004 SC_F3
       ps2_codes.inc:35     *ABS*:000000000000000c SC_F4
       ps2_codes.inc:36     *ABS*:0000000000000003 SC_F5
       ps2_codes.inc:37     *ABS*:000000000000000b SC_F6
       ps2_codes.inc:38     *ABS*:0000000000000083 SC_F7
       ps2_codes.inc:39     *ABS*:000000000000000a SC_F8
       ps2_codes.inc:40     *ABS*:0000000000000001 SC_F9
       ps2_codes.inc:41     *ABS*:0000000000000009 SC_F10
       ps2_codes.inc:42     *ABS*:0000000000000078 SC_F11
       ps2_codes.inc:43     *ABS*:0000000000000007 SC_F12
       ps2_codes.inc:44     *ABS*:000000000000007c SC_KPMUL
       ps2_codes.inc:45     *ABS*:000000000000007b SC_KPMINUS
       ps2_codes.inc:46     *ABS*:0000000000000079 SC_KPPLUS
       ps2_codes.inc:47     *ABS*:0000000000000071 SC_KPDOT
       ps2_codes.inc:48     *ABS*:0000000000000070 SC_KP0
       ps2_codes.inc:49     *ABS*:0000000000000069 SC_KP1
       ps2_codes.inc:50     *ABS*:0000000000000072 SC_KP2
       ps2_codes.inc:51     *ABS*:000000000000007a SC_KP3
       ps2_codes.inc:52     *ABS*:000000000000006b SC_KP4
       ps2_codes.inc:53     *ABS*:0000000000000073 SC_KP5
       ps2_codes.inc:54     *ABS*:0000000000000074 SC_KP6
       ps2_codes.inc:55     *ABS*:000000000000006c SC_KP7
       ps2_codes.inc:56     *ABS*:0000000000000075 SC_KP8
       ps2_codes.inc:57     *ABS*:000000000000007d SC_KP9
       ps2_codes.inc:60     *ABS*:0000000000000014 SC_RCTRL
       ps2_codes.inc:61     *ABS*:000000000000001f SC_LGUI
       ps2_codes.inc:62     *ABS*:0000000000000027 SC_RGUI
       ps2_codes.inc:63     *ABS*:0000000000000011 SC_RALT
       ps2_codes.inc:64     *ABS*:000000000000002f SC_APPS
       ps2_codes.inc:65     *ABS*:0000000000000075 SC_UP
       ps2_codes.inc:66     *ABS*:0000000000000072 SC_DOWN
       ps2_codes.inc:67     *ABS*:000000000000006b SC_LEFT
       ps2_codes.inc:68     *ABS*:0000000000000074 SC_RIGHT
       ps2_codes.inc:69     *ABS*:0000000000000070 SC_INSERT
       ps2_codes.inc:70     *ABS*:000000000000006c SC_HOME
       ps2_codes.inc:71     *ABS*:000000000000007d SC_PGUP
       ps2_codes.inc:72     *ABS*:000000000000007a SC_PGDN
       ps2_codes.inc:73     *ABS*:0000000000000071 SC_DEL
       ps2_codes.inc:74     *ABS*:0000000000000069 SC_END
       ps2_codes.inc:75     *ABS*:000000000000004a SC_KPDIV
       ps2_codes.inc:76     *ABS*:000000000000005a SC_KPENTER
       ps2_codes.inc:77     *ABS*:000000000000001f SC_LWINDOW
       ps2_codes.inc:78     *ABS*:0000000000000027 SC_RWINDOW
       ps2_codes.inc:79     *ABS*:000000000000005d SC_MENU
       ps2_codes.inc:84     *ABS*:0000000000000008 VK_BACK
       ps2_codes.inc:85     *ABS*:0000000000000009 VK_TAB
       ps2_codes.inc:86     *ABS*:000000000000001b VK_ESC
       ps2_codes.inc:87     *ABS*:000000000000000d VK_ENTER
       ps2_codes.inc:88     *ABS*:0000000000000020 VK_SPACE
       ps2_codes.inc:89     *ABS*:000000000000007f VK_DELETE
       ps2_codes.inc:90     *ABS*:0000000000000080 VK_F1
       ps2_codes.inc:91     *ABS*:0000000000000081 VK_F2
       ps2_codes.inc:92     *ABS*:0000000000000082 VK_F3
       ps2_codes.inc:93     *ABS*:0000000000000083 VK_F4
       ps2_codes.inc:94     *ABS*:0000000000000084 VK_F5
ARM GAS  forth.s 			page 241


       ps2_codes.inc:95     *ABS*:0000000000000085 VK_F6
       ps2_codes.inc:96     *ABS*:0000000000000086 VK_F7
       ps2_codes.inc:97     *ABS*:0000000000000087 VK_F8
       ps2_codes.inc:98     *ABS*:0000000000000088 VK_F9
       ps2_codes.inc:99     *ABS*:000000000000008a VK_F10
       ps2_codes.inc:100    *ABS*:000000000000008b VK_F11
       ps2_codes.inc:101    *ABS*:000000000000008c VK_F12
       ps2_codes.inc:102    *ABS*:000000000000008d VK_UP
       ps2_codes.inc:103    *ABS*:000000000000008e VK_DOWN
       ps2_codes.inc:104    *ABS*:000000000000008f VK_LEFT
       ps2_codes.inc:105    *ABS*:0000000000000090 VK_RIGHT
       ps2_codes.inc:106    *ABS*:0000000000000091 VK_HOME
       ps2_codes.inc:107    *ABS*:0000000000000092 VK_END
       ps2_codes.inc:108    *ABS*:0000000000000093 VK_PGUP
       ps2_codes.inc:109    *ABS*:0000000000000094 VK_PGDN
       ps2_codes.inc:110    *ABS*:0000000000000095 VK_INSERT
       ps2_codes.inc:111    *ABS*:0000000000000097 VK_APPS
       ps2_codes.inc:112    *ABS*:0000000000000098 VK_PRN
       ps2_codes.inc:113    *ABS*:0000000000000099 VK_PAUSE
       ps2_codes.inc:114    *ABS*:000000000000009a VK_NLOCK
       ps2_codes.inc:115    *ABS*:000000000000009b VK_CLOCK
       ps2_codes.inc:116    *ABS*:000000000000009c VK_LSHIFT
       ps2_codes.inc:117    *ABS*:000000000000009d VK_LCTRL
       ps2_codes.inc:118    *ABS*:000000000000009e VK_LALT
       ps2_codes.inc:119    *ABS*:000000000000009f VK_RSHIFT
       ps2_codes.inc:120    *ABS*:00000000000000a0 VK_LGUI
       ps2_codes.inc:121    *ABS*:00000000000000a1 VK_RCTRL
       ps2_codes.inc:122    *ABS*:00000000000000a2 VK_RGUI
       ps2_codes.inc:123    *ABS*:00000000000000a3 VK_RALT
       ps2_codes.inc:124    *ABS*:00000000000000a4 VK_SCROLL
       ps2_codes.inc:125    *ABS*:00000000000000a5 VK_NUM
       ps2_codes.inc:126    *ABS*:00000000000000a8 VK_CAPS
       ps2_codes.inc:128    *ABS*:00000000000000a9 VK_SUP
       ps2_codes.inc:129    *ABS*:00000000000000aa VK_SDOWN
       ps2_codes.inc:130    *ABS*:00000000000000ab VK_SLEFT
       ps2_codes.inc:131    *ABS*:00000000000000ac VK_SRIGHT
       ps2_codes.inc:132    *ABS*:00000000000000ad VK_SHOME
       ps2_codes.inc:133    *ABS*:00000000000000ae VK_SEND
       ps2_codes.inc:134    *ABS*:00000000000000af VK_SPGUP
       ps2_codes.inc:135    *ABS*:00000000000000b0 VK_SPGDN
       ps2_codes.inc:136    *ABS*:00000000000000bf VK_SDEL
       ps2_codes.inc:138    *ABS*:00000000000000b1 VK_CUP
       ps2_codes.inc:139    *ABS*:00000000000000b2 VK_CDOWN
       ps2_codes.inc:140    *ABS*:00000000000000b3 VK_CLEFT
       ps2_codes.inc:141    *ABS*:00000000000000b4 VK_CRIGHT
       ps2_codes.inc:142    *ABS*:00000000000000b5 VK_CHOME
       ps2_codes.inc:143    *ABS*:00000000000000b6 VK_CEND
       ps2_codes.inc:144    *ABS*:00000000000000b7 VK_CPGUP
       ps2_codes.inc:145    *ABS*:00000000000000b8 VK_CPGDN
       ps2_codes.inc:146    *ABS*:00000000000000b9 VK_CDEL
       ps2_codes.inc:147    *ABS*:00000000000000ba VK_CBACK
       ps2_codes.inc:148    *ABS*:00000000000000bb VK_LWINDOW
       ps2_codes.inc:149    *ABS*:00000000000000bc VK_RWINDOW
       ps2_codes.inc:150    *ABS*:00000000000000bd VK_MENU
       ps2_codes.inc:151    *ABS*:00000000000000be VK_SLEEP
         mcSaite.inc:7      .text:000000000000159c sc_ascii
         mcSaite.inc:100    .text:0000000000001650 shifted
ARM GAS  forth.s 			page 242


         mcSaite.inc:151    .text:00000000000016b0 altchar
         mcSaite.inc:167    .text:00000000000016c0 extended
         mcSaite.inc:191    .text:00000000000016e8 controls
           ps2_kbd.s:53     *ABS*:0000000000000001 KBD_F_CTGL
           ps2_kbd.s:54     *ABS*:0000000000000002 KBD_TX
           ps2_kbd.s:55     *ABS*:0000000000000004 KBD_F_CAPS
           ps2_kbd.s:56     *ABS*:0000000000000008 KBD_F_SHIFT
           ps2_kbd.s:57     *ABS*:0000000000000010 KBD_F_CTRL
           ps2_kbd.s:58     *ABS*:0000000000000020 KBD_F_ALT
           ps2_kbd.s:59     *ABS*:0000000000000040 KBD_F_XT
           ps2_kbd.s:60     *ABS*:0000000000000080 KBD_F_REL
           ps2_kbd.s:62     *ABS*:000000000000007e KBD_FLAGS
           ps2_kbd.s:63     *ABS*:000000000000007d KBD_SHIFTER
           ps2_kbd.s:64     *ABS*:000000000000007c KBD_BITCNTR
           ps2_kbd.s:65     *ABS*:000000000000007f KBD_PARITY
           ps2_kbd.s:67     *ABS*:000000000000000e KBD_DATA_PIN
           ps2_kbd.s:68     *ABS*:000000000000000f KBD_CLOCK_PIN
           ps2_kbd.s:69     *ABS*:0000000040020800 KBD_GPIO
           ps2_kbd.s:78     .text:000000000000171e $t
           ps2_kbd.s:179    .text:000000000000184a send_bit
           ps2_kbd.s:107    .text:0000000000001780 start_bit
           ps2_kbd.s:118    .text:00000000000017a4 parity_bit
           ps2_kbd.s:125    .text:00000000000017b8 stop_bit
           ps2_kbd.s:152    .text:000000000000180e store_code
           ps2_kbd.s:253    .text:00000000000018de do_async_key
           ps2_kbd.s:204    .text:000000000000188e send_parity
           ps2_kbd.s:211    .text:00000000000018a0 send_stop
           ps2_kbd.s:218    .text:00000000000018aa rx_ack_bit
           ps2_kbd.s:236    .text:00000000000018ca is_async_key
           ps2_kbd.s:286    .text:000000000000192e async_keys
           ps2_kbd.s:378    .text:0000000000001a14 table_scan
           ps2_kbd.s:260    .text:00000000000018f0 set_async_key
           ps2_kbd.s:295    .text:000000000000193c async_jump
           ps2_kbd.s:265    .text:00000000000018fe shift_key
           ps2_kbd.s:273    .text:000000000000190e set_reset
           ps2_kbd.s:268    .text:0000000000001904 ctrl_key
           ps2_kbd.s:271    .text:000000000000190a alt_key
           ps2_kbd.s:287    .text:000000000000192e $d
           ps2_kbd.s:340    .text:00000000000019bc $d
           ps2_kbd.s:340    .text:00000000000019c0 _KEY_ASYNC
           ps2_kbd.s:340    .text:00000000000019ca $t
           ps2_kbd.s:340    .text:00000000000019cc KEY_ASYNC
           ps2_kbd.s:350    .text:00000000000019dc keycode
           ps2_kbd.s:365    .text:0000000000001a04 wait_code
           ps2_kbd.s:396    .text:0000000000001a2e $d
           ps2_kbd.s:396    .text:0000000000001a32 _PS2_QKEY
           ps2_kbd.s:416    .text:0000000000001a88 inkey_exit
           ps2_kbd.s:418    .text:0000000000001a8c pause_key
           ps2_kbd.s:427    .text:0000000000001aa2 do_modifiers
           ps2_kbd.s:436    .text:0000000000001aba shift_down
           ps2_kbd.s:440    .text:0000000000001ac0 altchar_down
           ps2_kbd.s:444    .text:0000000000001ac6 ctrl_down
           ps2_kbd.s:452    .text:0000000000001ae2 do_capslock
           ps2_kbd.s:478    .text:0000000000001b06 kbd_send
           ps2_kbd.s:553    .text:0000000000001bfa kbd_clear_queue
           ps2_kbd.s:567    .text:0000000000001c18 $d
           ps2_kbd.s:567    .text:0000000000001c1c _KBD_RST
ARM GAS  forth.s 			page 243


           ps2_kbd.s:567    .text:0000000000001c24 $t
           ps2_kbd.s:567    .text:0000000000001c24 KBD_RST
           ps2_kbd.s:591    .text:0000000000001c6e $d
           ps2_kbd.s:591    .text:0000000000001c72 _KBD_LED
           ps2_kbd.s:591    .text:0000000000001c7a $t
           ps2_kbd.s:591    .text:0000000000001c7c KBD_LED
           ps2_kbd.s:616    .text:0000000000001cd0 $d
           ps2_kbd.s:616    .text:0000000000001cd4 _CAPS_LED
           ps2_kbd.s:616    .text:0000000000001ce0 CAPS_LED
           ps2_kbd.s:633    .text:0000000000001d0a $d
           ps2_kbd.s:633    .text:0000000000001d0e _WKEY
           ps2_kbd.s:633    .text:0000000000001d18 WKEY
           ps2_kbd.s:635    .text:0000000000001d1c $d
           ps2_kbd.s:640    .text:0000000000001d34 $d
         spi-flash.s:28     *ABS*:0000000000000004 PIN_F_SC
         spi-flash.s:29     *ABS*:0000000000000005 PIN_SCK
         spi-flash.s:30     *ABS*:0000000000000006 PIN_MISO
         spi-flash.s:31     *ABS*:0000000000000007 PIN_MOSI
         spi-flash.s:42     .text:0000000000001d54 $t
         spi-flash.s:85     .text:0000000000001df6 $d
         spi-flash.s:85     .text:0000000000001dfa _CHIP_SEL
         spi-flash.s:85     .text:0000000000001e04 CHIP_SEL
         spi-flash.s:97     .text:0000000000001e22 $d
         spi-flash.s:97     .text:0000000000001e26 _CHIP_DSEL
         spi-flash.s:97     .text:0000000000001e30 $t
         spi-flash.s:97     .text:0000000000001e30 CHIP_DSEL
         spi-flash.s:113    .text:0000000000001e5e $d
         spi-flash.s:113    .text:0000000000001e62 _RD_BYTE
         spi-flash.s:113    .text:0000000000001e6a $t
         spi-flash.s:113    .text:0000000000001e6c RD_BYTE
         spi-flash.s:133    .text:0000000000001e94 $d
         spi-flash.s:133    .text:0000000000001e98 _WR_BYTE
         spi-flash.s:133    .text:0000000000001ea0 $t
         spi-flash.s:133    .text:0000000000001ea0 WR_BYTE
         spi-flash.s:151    .text:0000000000001ec4 $d
         spi-flash.s:151    .text:0000000000001ec8 _WR_DIS
         spi-flash.s:151    .text:0000000000001ed0 WR_DIS
         spi-flash.s:153    .text:0000000000001ed4 $d
         spi-flash.s:163    .text:0000000000001ef0 _WR_ENBL
         spi-flash.s:163    .text:0000000000001ef8 $t
         spi-flash.s:163    .text:0000000000001ef8 WR_ENBL
         spi-flash.s:165    .text:0000000000001efc $d
         spi-flash.s:175    .text:0000000000001f18 _RD_SR
         spi-flash.s:175    .text:0000000000001f1e $t
         spi-flash.s:175    .text:0000000000001f20 RD_SR
         spi-flash.s:177    .text:0000000000001f24 $d
         spi-flash.s:185    .text:0000000000001f48 sr_cmd
         spi-flash.s:191    .text:0000000000001f4f _SEND_ADR
         spi-flash.s:191    .text:0000000000001f58 $t
         spi-flash.s:191    .text:0000000000001f58 SEND_ADR
         spi-flash.s:193    .text:0000000000001f5c $d
         spi-flash.s:208    .text:0000000000001f90 _WAIT_DONE
         spi-flash.s:208    .text:0000000000001f9a $t
         spi-flash.s:208    .text:0000000000001f9c WAIT_DONE
         spi-flash.s:210    .text:0000000000001fa0 $d
         spi-flash.s:223    .text:0000000000001fd0 _ERASE_BLK
         spi-flash.s:223    .text:0000000000001fda $t
ARM GAS  forth.s 			page 244


         spi-flash.s:223    .text:0000000000001fdc ERASE_BLK
         spi-flash.s:225    .text:0000000000001fe0 $d
         spi-flash.s:238    .text:0000000000002008 _ERASE_CHIP
         spi-flash.s:238    .text:0000000000002014 ERASE_CHIP
         spi-flash.s:240    .text:0000000000002018 $d
         spi-flash.s:256    .text:0000000000002048 _RD_BLK
         spi-flash.s:256    .text:0000000000002050 RD_BLK
         spi-flash.s:258    .text:0000000000002054 $d
         spi-flash.s:278    .text:000000000000209c _WR_BLK
         spi-flash.s:278    .text:00000000000020a4 WR_BLK
         spi-flash.s:280    .text:00000000000020a8 $d
             forth.s:2847   .text:000000000000493c HDOT
         spi-flash.s:316    .text:0000000000002100 _SEARCH_FILE
         spi-flash.s:316    .text:000000000000210c $t
         spi-flash.s:316    .text:000000000000210c SEARCH_FILE
         spi-flash.s:319    .text:0000000000002110 $d
         spi-flash.s:325    .text:0000000000002118 _ERASE_FILE
         spi-flash.s:325    .text:0000000000002124 ERASE_FILE
         spi-flash.s:328    .text:0000000000002128 $d
         spi-flash.s:334    .text:0000000000002130 _DIR
         spi-flash.s:334    .text:0000000000002134 $t
         spi-flash.s:334    .text:0000000000002134 DIR
         spi-flash.s:337    .text:0000000000002138 $d
         spi-flash.s:343    .text:0000000000002140 _SAVE
         spi-flash.s:343    .text:0000000000002148 SAVE
         spi-flash.s:346    .text:000000000000214c $d
         spi-flash.s:352    .text:0000000000002154 _LOAD
         spi-flash.s:352    .text:000000000000215c LOAD
         spi-flash.s:355    .text:0000000000002160 $d
             block.s:58     .text:0000000000002168 _BLK
             block.s:58     .text:000000000000216c $t
             block.s:58     .text:000000000000216c BLK
             block.s:75     .text:000000000000217a $d
             block.s:75     .text:000000000000217e _BLOCK
             block.s:75     .text:0000000000002184 $t
             block.s:75     .text:0000000000002184 BLOCK
             block.s:78     .text:0000000000002188 $d
             block.s:90     .text:000000000000218c $t
             block.s:92     .text:0000000000002190 $d
             block.s:99     .text:0000000000002198 _FLUSH
             block.s:99     .text:000000000000219e $t
             block.s:99     .text:00000000000021a0 FLUSH
             block.s:102    .text:00000000000021a4 $d
             block.s:113    .text:00000000000021b8 $d
             block.s:120    .text:00000000000021c0 _SAVE_BUFFERS
             block.s:120    .text:00000000000021d0 SAVE_BUFFERS
             block.s:123    .text:00000000000021d4 $d
             block.s:129    .text:00000000000021dc _UPDATE
             block.s:129    .text:00000000000021e4 UPDATE
             block.s:132    .text:00000000000021e8 $d
             block.s:140    .text:00000000000021f0 _EMPTY_BUFFERS
             block.s:140    .text:00000000000021fe $t
             block.s:140    .text:0000000000002200 EMPTY_BUFFERS
             block.s:143    .text:0000000000002204 $d
             block.s:149    .text:000000000000220c _LIST
             block.s:149    .text:0000000000002214 LIST
             block.s:152    .text:0000000000002218 $d
ARM GAS  forth.s 			page 245


             block.s:159    .text:0000000000002220 _SRC
             block.s:159    .text:0000000000002224 $t
             block.s:169    .text:0000000000002232 $d
             block.s:169    .text:0000000000002236 _THRU
             block.s:169    .text:000000000000223c THRU
             block.s:172    .text:0000000000002240 $d
               fpu.s:28     *ABS*:00000000bf800000 minus1
               fpu.s:29     *ABS*:000000003f800000 plus1
               fpu.s:30     *ABS*:0000000041200000 ten
               fpu.s:31     *ABS*:000000003dcccccd onetenth
               fpu.s:42     .text:0000000000002268 p10
               fpu.s:59     .text:0000000000002294 _PWR10
               fpu.s:59     .text:000000000000229a $t
               fpu.s:59     .text:000000000000229c PWR10
               fpu.s:90     .text:00000000000022c8 $d
               fpu.s:90     .text:00000000000022cc _FDI
               fpu.s:90     .text:00000000000022d0 $t
               fpu.s:90     .text:00000000000022d0 FDI
               fpu.s:100    .text:00000000000022e2 $d
               fpu.s:100    .text:00000000000022e6 _FEI
               fpu.s:100    .text:00000000000022ea $t
               fpu.s:100    .text:00000000000022ec FEI
               fpu.s:110    .text:00000000000022fe $d
               fpu.s:110    .text:0000000000002302 _FPSCR
               fpu.s:110    .text:0000000000002308 $t
               fpu.s:123    .text:0000000000002318 $d
               fpu.s:123    .text:000000000000231c _CLR_FPSCR
               fpu.s:123    .text:0000000000002326 $t
               fpu.s:136    .text:0000000000002340 $d
               fpu.s:136    .text:0000000000002344 _TOS0
               fpu.s:136    .text:0000000000002348 $t
               fpu.s:136    .text:0000000000002348 TOS0
               fpu.s:145    .text:0000000000002354 $d
               fpu.s:145    .text:0000000000002358 _TOS1
               fpu.s:145    .text:000000000000235c $t
               fpu.s:145    .text:000000000000235c TOS1
               fpu.s:154    .text:0000000000002368 $d
               fpu.s:154    .text:000000000000236c _TOS2
               fpu.s:154    .text:0000000000002370 $t
               fpu.s:154    .text:0000000000002370 TOS2
               fpu.s:163    .text:000000000000237c $d
               fpu.s:163    .text:0000000000002380 _S0FROM
               fpu.s:163    .text:0000000000002384 $t
               fpu.s:163    .text:0000000000002384 S0FROM
               fpu.s:172    .text:0000000000002390 $d
               fpu.s:172    .text:0000000000002394 _S1FROM
               fpu.s:172    .text:0000000000002398 $t
               fpu.s:172    .text:0000000000002398 S1FROM
               fpu.s:181    .text:00000000000023a4 $d
               fpu.s:181    .text:00000000000023a8 _S2FROM
               fpu.s:181    .text:00000000000023ac $t
               fpu.s:181    .text:00000000000023ac S2FROM
               fpu.s:192    .text:00000000000023b8 $d
               fpu.s:192    .text:00000000000023bc _FTOS
               fpu.s:192    .text:00000000000023c0 $t
               fpu.s:192    .text:00000000000023c0 FTOS
               fpu.s:202    .text:00000000000023d0 $d
ARM GAS  forth.s 			page 246


               fpu.s:202    .text:00000000000023d4 _TRUNC
               fpu.s:202    .text:00000000000023da $t
               fpu.s:202    .text:00000000000023dc TRUNC
               fpu.s:212    .text:00000000000023ec $d
               fpu.s:212    .text:00000000000023f0 _STOF
               fpu.s:212    .text:00000000000023f4 $t
               fpu.s:212    .text:00000000000023f4 STOF
               fpu.s:222    .text:0000000000002404 $d
               fpu.s:222    .text:0000000000002408 _FPLUS
               fpu.s:222    .text:000000000000240c FPLUS
               fpu.s:235    .text:0000000000002424 $d
               fpu.s:235    .text:0000000000002428 _FSUBB
               fpu.s:235    .text:000000000000242c FSUBB
               fpu.s:249    .text:0000000000002444 $d
               fpu.s:249    .text:0000000000002448 _FSTAR
               fpu.s:249    .text:000000000000244c FSTAR
               fpu.s:262    .text:0000000000002464 $d
               fpu.s:262    .text:0000000000002468 _FSLH
               fpu.s:262    .text:000000000000246c FSLH
               fpu.s:275    .text:0000000000002484 $d
               fpu.s:275    .text:0000000000002488 _FNEG
               fpu.s:275    .text:0000000000002490 $t
               fpu.s:275    .text:0000000000002490 FNEG
               fpu.s:285    .text:00000000000024a0 $d
               fpu.s:285    .text:00000000000024a4 _FABS
               fpu.s:285    .text:00000000000024ac FABS
               fpu.s:297    .text:00000000000024c0 $d
               fpu.s:297    .text:00000000000024c4 _SQRT
               fpu.s:297    .text:00000000000024cc SQRT
               fpu.s:307    .text:00000000000024dc $d
               fpu.s:307    .text:00000000000024e0 _FZLESS
               fpu.s:307    .text:00000000000024e4 $t
               fpu.s:307    .text:00000000000024e4 FZLESS
               fpu.s:319    .text:00000000000024fc $d
               fpu.s:319    .text:0000000000002500 _FGREAT
               fpu.s:319    .text:0000000000002504 FGREAT
               fpu.s:321    .text:0000000000002508 $d
             forth.s:1042   .text:0000000000003760 INVER
               fpu.s:330    .text:000000000000251c _FLESS
               fpu.s:330    .text:0000000000002520 FLESS
               fpu.s:332    .text:0000000000002524 $d
               fpu.s:340    .text:0000000000002534 _FMIN
               fpu.s:340    .text:000000000000253c FMIN
               fpu.s:342    .text:0000000000002540 $d
               fpu.s:353    .text:0000000000002564 _FMAX
               fpu.s:353    .text:000000000000256c FMAX
               fpu.s:355    .text:0000000000002570 $d
               fpu.s:368    .text:0000000000002594 _FSIGN
               fpu.s:368    .text:000000000000259a $t
               fpu.s:368    .text:000000000000259c FSIGN
               fpu.s:379    .text:00000000000025b0 $d
               fpu.s:379    .text:00000000000025b4 _FEXP
               fpu.s:379    .text:00000000000025bc FEXP
               fpu.s:390    .text:00000000000025d4 $d
               fpu.s:390    .text:00000000000025d8 _FMANT
               fpu.s:390    .text:00000000000025de $t
               fpu.s:390    .text:00000000000025e0 FMANT
ARM GAS  forth.s 			page 247


               fpu.s:403    .text:00000000000025fc $d
               fpu.s:403    .text:0000000000002600 _PI
               fpu.s:403    .text:0000000000002604 PI
               fpu.s:412    .text:0000000000002614 $d
               fpu.s:412    .text:0000000000002618 _LN2
               fpu.s:412    .text:000000000000261c $t
               fpu.s:412    .text:000000000000261c LN2
               fpu.s:421    .text:000000000000262c $d
               fpu.s:421    .text:0000000000002630 _LN10
               fpu.s:421    .text:0000000000002638 LN10
               fpu.s:431    .text:0000000000002648 $d
               fpu.s:431    .text:000000000000264c _LOG2
               fpu.s:431    .text:0000000000002654 LOG2
               fpu.s:441    .text:0000000000002664 $d
               fpu.s:441    .text:0000000000002668 _LOG2TO10
               fpu.s:441    .text:0000000000002670 $t
               fpu.s:441    .text:0000000000002670 LOG2TO10
               fpu.s:443    .text:0000000000002674 $d
             forth.s:635    .text:0000000000003400 ZLESS
               fpu.s:453    .text:00000000000026a0 $d
            strtof.s:29     .text:00000000000026ac p10p2n
            strtof.s:36     *ABS*:0000000000000000 fzero
            strtof.s:37     *ABS*:000000003f800000 fone
            strtof.s:38     *ABS*:00000000bf800000 fminus1
            strtof.s:39     *ABS*:0000000041200000 ften
            strtof.s:43     .text:00000000000026c4 p10p2at
            strtof.s:44     .text:00000000000026c4 $t
            strtof.s:45     .text:00000000000026c8 $d
            strtof.s:57     .text:00000000000026e8 bit_state
            strtof.s:58     .text:00000000000026e8 $t
            strtof.s:59     .text:00000000000026ec $d
             forth.s:1931   .text:0000000000003fa8 PICK
            strtof.s:76     .text:000000000000270c mant_div
            strtof.s:77     .text:000000000000270c $t
            strtof.s:78     .text:0000000000002710 $d
            strtof.s:79     .text:0000000000002714 div_loop
             forth.s:1184   .text:00000000000038a0 GREAT
            strtof.s:107    .text:0000000000002760 mant_mult
            strtof.s:108    .text:0000000000002760 $t
            strtof.s:109    .text:0000000000002764 $d
            strtof.s:110    .text:0000000000002768 mult_loop
            strtof.s:134    .text:00000000000027b4 exp_adjust
            strtof.s:135    .text:00000000000027b4 $t
            strtof.s:136    .text:00000000000027b8 $d
             forth.s:945    .text:0000000000003688 NROT
            strtof.s:148    .text:00000000000027f4 pos_exp
             forth.s:1058   .text:0000000000003784 ABSS
            strtof.s:159    .text:0000000000002804 integer
            strtof.s:160    .text:0000000000002804 $t
            strtof.s:161    .text:0000000000002808 $d
             forth.s:597    .text:00000000000033b4 DSWAP
             forth.s:2400   .text:0000000000004450 TONBR
             forth.s:514    .text:0000000000003310 DTOR
             forth.s:472    .text:00000000000032ac DRFROM
            strtof.s:178    .text:0000000000002834 decimals
            strtof.s:179    .text:0000000000002834 $t
            strtof.s:180    .text:0000000000002838 $d
ARM GAS  forth.s 			page 248


             forth.s:1207   .text:00000000000038d4 MIN
            strtof.s:204    .text:000000000000288c exponent
            strtof.s:205    .text:000000000000288c $t
            strtof.s:206    .text:0000000000002890 $d
             forth.s:2453   .text:00000000000044e6 NEGQ
             forth.s:1050   .text:0000000000003774 NEGAT
            strtof.s:226    .text:00000000000028cc _FLOATQ
            strtof.s:226    .text:00000000000028d4 FLOATQ
            strtof.s:230    .text:00000000000028d8 $d
             forth.s:2348   .text:00000000000043c4 DECIM
             forth.s:395    .text:000000000000322a TBRAN
            strtof.s:258    .text:0000000000002958 expect_dot
             forth.s:2433   .text:00000000000044c4 CHARQ
            strtof.s:262    .text:000000000000296c get_fraction
            strtof.s:279    .text:00000000000029c0 get_exponent
            strtof.s:297    .text:0000000000002a14 error2
             forth.s:2365   .text:00000000000043e8 DIGTQ
            strtof.s:284    .text:00000000000029d4 build_float
            strtof.s:305    .text:0000000000002a34 error4
            strtof.s:311    .text:0000000000002a48 restore_base
            strtof.s:309    .text:0000000000002a40 e4
            strtof.s:300    .text:0000000000002a20 error3
              ftoa.s:28     .text:0000000000002a58 rounding
              ftoa.s:48     .text:0000000000002a80 _ROUND
              ftoa.s:48     .text:0000000000002a86 $t
              ftoa.s:48     .text:0000000000002a88 ROUND
              ftoa.s:50     .text:0000000000002a8c $d
             forth.s:1196   .text:00000000000038bc MAX
              ftoa.s:67     .text:0000000000002acc _CSTOP
              ftoa.s:67     .text:0000000000002ad0 $t
              ftoa.s:67     .text:0000000000002ad0 CSTOP
              ftoa.s:79     .text:0000000000002adc ITOA
              ftoa.s:81     .text:0000000000002ae0 $d
             forth.s:1645   .text:0000000000003d1c STOD
             forth.s:997    .text:00000000000036f8 DABS
             forth.s:2191   .text:000000000000422c BDIGS
             forth.s:2255   .text:00000000000042d0 DIGS
             forth.s:2273   .text:0000000000004304 SIGN
             forth.s:2287   .text:000000000000432c EDIGS
             forth.s:2030   .text:0000000000004088 CMOVE
              ftoa.s:114    .text:0000000000002b34 _SCALEUP
              ftoa.s:114    .text:0000000000002b3c $t
              ftoa.s:114    .text:0000000000002b3c SCALEUP
              ftoa.s:116    .text:0000000000002b40 $d
              ftoa.s:148    .text:0000000000002b9c _SCALEDOWN
              ftoa.s:148    .text:0000000000002ba6 $t
              ftoa.s:148    .text:0000000000002ba8 SCALEDOWN
              ftoa.s:150    .text:0000000000002bac $d
              ftoa.s:181    .text:0000000000002c04 EPART
              ftoa.s:182    .text:0000000000002c04 $t
              ftoa.s:183    .text:0000000000002c08 $d
              ftoa.s:206    .text:0000000000002c38 FPART
              ftoa.s:207    .text:0000000000002c38 $t
              ftoa.s:208    .text:0000000000002c3c $d
              ftoa.s:255    .text:0000000000002cdc IPART
              ftoa.s:256    .text:0000000000002cdc $t
              ftoa.s:257    .text:0000000000002ce0 $d
ARM GAS  forth.s 			page 249


              ftoa.s:313    .text:0000000000002da0 _FTOA
              ftoa.s:313    .text:0000000000002da4 $t
              ftoa.s:313    .text:0000000000002da4 FTOA
              ftoa.s:315    .text:0000000000002da8 $d
              ftoa.s:365    .text:0000000000002e88 nan
             forth.s:831    .text:0000000000003588 BLANK
              ftoa.s:348    .text:0000000000002e38 zdz
              ftoa.s:387    .text:0000000000002ef4 infinity
              ftoa.s:412    .text:0000000000002f3c _FDOT
              ftoa.s:412    .text:0000000000002f40 FDOT
              ftoa.s:415    .text:0000000000002f44 $d
             forth.s:1959   .text:0000000000003fdc HERE
             forth.s:3775   .text:0000000000005480 ALLOT
             forth.s:80     .text:0000000000002fa8 $t
             forth.s:104    .text:0000000000002fc0 COMPI_NEST
             forth.s:117    .text:0000000000002fde TSTDIN
             forth.s:124    .text:0000000000002fe8 TSTDOUT
             forth.s:133    .text:0000000000002ff2 $d
             forth.s:133    .text:0000000000002ff6 _CFSR
             forth.s:145    .text:0000000000003012 $d
             forth.s:145    .text:0000000000003016 _BFAR
             forth.s:157    .text:0000000000003032 $d
             forth.s:157    .text:0000000000003036 _QKEY
             forth.s:157    .text:000000000000303c QKEY
             forth.s:159    .text:0000000000003040 $d
             forth.s:2017   .text:0000000000004068 ATEXE
             forth.s:167    .text:0000000000003050 _KEY
             forth.s:167    .text:0000000000003054 $t
             forth.s:167    .text:0000000000003054 KEY
             forth.s:169    .text:0000000000003058 KEY1
             forth.s:170    .text:0000000000003058 $d
             forth.s:185    .text:0000000000003068 KEY2
             forth.s:192    .text:0000000000003070 _EMIT
             forth.s:194    .text:000000000000307c $d
             forth.s:228    .text:000000000000308c _RAND
             forth.s:228    .text:0000000000003094 RAND
             forth.s:230    .text:0000000000003098 $d
             forth.s:1293   .text:0000000000003990 SEED
             forth.s:1801   .text:0000000000003e64 MODD
             forth.s:259    .text:0000000000003108 _PAUSE
             forth.s:259    .text:000000000000310c PAUSE
             forth.s:261    .text:0000000000003110 $d
             forth.s:1312   .text:00000000000039bc TIMER
             forth.s:263    .text:0000000000003118 PAUSE_LOOP
             forth.s:268    .text:0000000000003130 PAUSE_EXIT
             forth.s:275    .text:0000000000003138 _ULED
             forth.s:284    .text:000000000000315c ULED_OFF
             forth.s:292    .text:0000000000003160 $d
             forth.s:292    .text:0000000000003164 _JOYSTK
             forth.s:292    .text:000000000000316c JOYSTK
             forth.s:294    .text:0000000000003170 $d
             forth.s:306    .text:0000000000003190 _BEEP
             forth.s:306    .text:0000000000003198 BEEP
             forth.s:331    .text:00000000000031cc $d
             forth.s:331    .text:00000000000031d0 _NOP
             forth.s:331    .text:00000000000031d4 $t
             forth.s:331    .text:00000000000031d4 NOP
ARM GAS  forth.s 			page 250


             forth.s:349    .text:00000000000031e0 $d
             forth.s:349    .text:00000000000031e4 _EXECU
             forth.s:349    .text:00000000000031ec $t
             forth.s:369    .text:0000000000003208 NEXT1
             forth.s:387    .text:0000000000003224 QBRAN1
             forth.s:418    .text:0000000000003244 $d
             forth.s:418    .text:0000000000003248 _EXIT
             forth.s:418    .text:0000000000003250 EXIT
             forth.s:426    .text:0000000000003252 $d
             forth.s:426    .text:0000000000003256 _STORE
             forth.s:426    .text:0000000000003258 $t
             forth.s:436    .text:0000000000003264 $d
             forth.s:436    .text:0000000000003268 _AT
             forth.s:436    .text:000000000000326a $t
             forth.s:444    .text:0000000000003270 $d
             forth.s:444    .text:0000000000003274 _CSTOR
             forth.s:454    .text:0000000000003284 $d
             forth.s:454    .text:0000000000003288 _CAT
             forth.s:463    .text:0000000000003290 $d
             forth.s:463    .text:0000000000003294 _RFROM
             forth.s:472    .text:00000000000032a2 $d
             forth.s:472    .text:00000000000032a6 _DRFROM
             forth.s:472    .text:00000000000032aa $t
             forth.s:484    .text:00000000000032c2 $d
             forth.s:484    .text:00000000000032c6 _RAT
             forth.s:493    .text:00000000000032d6 $d
             forth.s:493    .text:00000000000032da _DRAT
             forth.s:493    .text:00000000000032de $t
             forth.s:493    .text:00000000000032e0 DRAT
             forth.s:505    .text:00000000000032f2 $d
             forth.s:505    .text:00000000000032f6 _TOR
             forth.s:514    .text:0000000000003306 $d
             forth.s:514    .text:000000000000330a _DTOR
             forth.s:514    .text:000000000000330e $t
             forth.s:526    .text:0000000000003322 $d
             forth.s:526    .text:0000000000003326 _RPSTOR
             forth.s:526    .text:000000000000332a $t
             forth.s:526    .text:000000000000332c RPSTOR
             forth.s:535    .text:0000000000003334 $d
             forth.s:535    .text:0000000000003338 _SPSTOR
             forth.s:535    .text:000000000000333c $t
             forth.s:535    .text:000000000000333c SPSTOR
             forth.s:544    .text:0000000000003344 $d
             forth.s:544    .text:0000000000003348 _SPAT
             forth.s:544    .text:000000000000334c $t
             forth.s:544    .text:000000000000334c SPAT
             forth.s:553    .text:0000000000003354 $d
             forth.s:553    .text:0000000000003358 _RPAT
             forth.s:553    .text:000000000000335c $t
             forth.s:553    .text:000000000000335c RPAT
             forth.s:562    .text:0000000000003364 $d
             forth.s:562    .text:0000000000003368 _DROP
             forth.s:571    .text:0000000000003376 $d
             forth.s:571    .text:000000000000337a _NIP
             forth.s:571    .text:000000000000337e $t
             forth.s:571    .text:0000000000003380 NIP
             forth.s:579    .text:0000000000003386 $d
ARM GAS  forth.s 			page 251


             forth.s:579    .text:000000000000338a _DUPP
             forth.s:579    .text:000000000000338e $t
             forth.s:587    .text:0000000000003396 $d
             forth.s:587    .text:000000000000339a _SWAP
             forth.s:597    .text:00000000000033a8 $d
             forth.s:597    .text:00000000000033ac _DSWAP
             forth.s:597    .text:00000000000033b2 $t
             forth.s:612    .text:00000000000033c4 $d
             forth.s:612    .text:00000000000033c8 _OVER
             forth.s:621    .text:00000000000033d8 $d
             forth.s:621    .text:00000000000033dc _DOVER
             forth.s:621    .text:00000000000033e2 $t
             forth.s:621    .text:00000000000033e4 DOVER
             forth.s:635    .text:00000000000033f6 $d
             forth.s:635    .text:00000000000033fa _ZLESS
             forth.s:643    .text:0000000000003406 $d
             forth.s:643    .text:000000000000340a _ZGREAT
             forth.s:643    .text:0000000000003410 ZGREAT
             forth.s:654    .text:000000000000341c $d
             forth.s:654    .text:0000000000003420 _ZNEQU
             forth.s:654    .text:0000000000003424 $t
             forth.s:654    .text:0000000000003424 ZNEQU
             forth.s:664    .text:000000000000342c $d
             forth.s:664    .text:0000000000003430 _NEQU
             forth.s:664    .text:0000000000003434 NEQU
             forth.s:676    .text:0000000000003442 $d
             forth.s:676    .text:0000000000003446 _ANDD
             forth.s:676    .text:000000000000344a $t
             forth.s:685    .text:0000000000003456 $d
             forth.s:685    .text:000000000000345a _ORR
             forth.s:694    .text:000000000000346a $d
             forth.s:694    .text:000000000000346e _XORR
             forth.s:694    .text:0000000000003472 $t
             forth.s:703    .text:000000000000347e $d
             forth.s:703    .text:0000000000003482 _UPLUS
             forth.s:703    .text:0000000000003486 $t
             forth.s:703    .text:0000000000003488 UPLUS
             forth.s:715    .text:0000000000003498 $d
             forth.s:715    .text:000000000000349c _RSHIFT
             forth.s:724    .text:00000000000034ae $d
             forth.s:724    .text:00000000000034b2 _LSHIFT
             forth.s:733    .text:00000000000034c6 $d
             forth.s:733    .text:00000000000034ca _PLUS
             forth.s:733    .text:00000000000034cc $t
             forth.s:742    .text:00000000000034d4 $d
             forth.s:742    .text:00000000000034d8 _SUBB
             forth.s:742    .text:00000000000034da $t
             forth.s:751    .text:00000000000034e6 $d
             forth.s:751    .text:00000000000034ea _STAR
             forth.s:751    .text:00000000000034ec $t
             forth.s:760    .text:00000000000034f6 $d
             forth.s:760    .text:00000000000034fa _UMSTA
             forth.s:760    .text:00000000000034fe $t
             forth.s:760    .text:0000000000003500 UMSTA
             forth.s:772    .text:000000000000350c $d
             forth.s:772    .text:0000000000003510 _MSTAR
             forth.s:772    .text:0000000000003514 MSTAR
ARM GAS  forth.s 			page 252


             forth.s:783    .text:0000000000003520 $d
             forth.s:783    .text:0000000000003524 _ONEP
             forth.s:791    .text:000000000000352e $d
             forth.s:791    .text:0000000000003532 _ONEM
             forth.s:799    .text:000000000000353e $d
             forth.s:799    .text:0000000000003542 _TWOP
             forth.s:799    .text:0000000000003548 TWOP
             forth.s:807    .text:000000000000354e $d
             forth.s:807    .text:0000000000003552 _TWOM
             forth.s:807    .text:0000000000003558 TWOM
             forth.s:815    .text:000000000000355e $d
             forth.s:815    .text:0000000000003562 _CELLP
             forth.s:815    .text:0000000000003568 $t
             forth.s:815    .text:0000000000003568 CELLP
             forth.s:823    .text:000000000000356e $d
             forth.s:823    .text:0000000000003572 _CELLM
             forth.s:823    .text:0000000000003578 $t
             forth.s:823    .text:0000000000003578 CELLM
             forth.s:831    .text:000000000000357e $d
             forth.s:831    .text:0000000000003582 _BLANK
             forth.s:840    .text:0000000000003592 $d
             forth.s:840    .text:0000000000003596 _CELLS
             forth.s:840    .text:000000000000359c $t
             forth.s:840    .text:000000000000359c CELLS
             forth.s:848    .text:00000000000035a2 $d
             forth.s:848    .text:00000000000035a6 _CELLSL
             forth.s:848    .text:00000000000035ac $t
             forth.s:848    .text:00000000000035ac CELLSL
             forth.s:856    .text:00000000000035b2 $d
             forth.s:856    .text:00000000000035b6 _TWOST
             forth.s:856    .text:00000000000035bc TWOST
             forth.s:864    .text:00000000000035c2 $d
             forth.s:864    .text:00000000000035c6 _TWOSL
             forth.s:872    .text:00000000000035d2 $d
             forth.s:872    .text:00000000000035d6 _QDUP
             forth.s:882    .text:00000000000035e6 $d
             forth.s:882    .text:00000000000035ea _TUCK
             forth.s:882    .text:00000000000035f0 TUCK
             forth.s:891    .text:00000000000035f8 $d
             forth.s:891    .text:00000000000035fc _ROLL
             forth.s:891    .text:0000000000003604 ROLL
             forth.s:893    .text:0000000000003608 $d
             forth.s:934    .text:0000000000003670 _ROT
             forth.s:934    .text:0000000000003674 $t
             forth.s:945    .text:000000000000367e $d
             forth.s:945    .text:0000000000003682 _NROT
             forth.s:956    .text:0000000000003692 $d
             forth.s:956    .text:0000000000003696 _DDROP
             forth.s:956    .text:000000000000369c $t
             forth.s:965    .text:00000000000036a6 $d
             forth.s:965    .text:00000000000036aa _TDROP
             forth.s:965    .text:00000000000036b0 $t
             forth.s:974    .text:00000000000036ba $d
             forth.s:974    .text:00000000000036be _DDUP
             forth.s:984    .text:00000000000036d0 $d
             forth.s:984    .text:00000000000036d4 _DPLUS
             forth.s:984    .text:00000000000036d8 DPLUS
ARM GAS  forth.s 			page 253


             forth.s:997    .text:00000000000036ec $d
             forth.s:997    .text:00000000000036f0 _DABS
             forth.s:1013   .text:0000000000003714 $d
             forth.s:1013   .text:0000000000003718 _UDGREAT
             forth.s:1013   .text:000000000000371c $t
             forth.s:1013   .text:000000000000371c UDGREAT
             forth.s:1030   .text:0000000000003738 $d
             forth.s:1030   .text:000000000000373c _DZEQUAL
             forth.s:1030   .text:0000000000003740 $t
             forth.s:1030   .text:0000000000003740 DZEQUAL
             forth.s:1042   .text:0000000000003752 $d
             forth.s:1042   .text:0000000000003756 _INVER
             forth.s:1050   .text:0000000000003766 $d
             forth.s:1050   .text:000000000000376a _NEGAT
             forth.s:1058   .text:000000000000377a $d
             forth.s:1058   .text:000000000000377e _ABSS
             forth.s:1058   .text:0000000000003782 $t
             forth.s:1068   .text:000000000000378e $d
             forth.s:1068   .text:0000000000003792 _CLZ
             forth.s:1068   .text:0000000000003796 $t
             forth.s:1076   .text:000000000000379e $d
             forth.s:1076   .text:00000000000037a2 _CTZ
             forth.s:1076   .text:00000000000037a6 $t
             forth.s:1076   .text:00000000000037a8 CTZ
             forth.s:1091   .text:00000000000037c2 $d
             forth.s:1091   .text:00000000000037c6 _FALSE
             forth.s:1091   .text:00000000000037cc $t
             forth.s:1091   .text:00000000000037cc FALSE
             forth.s:1101   .text:00000000000037d8 $d
             forth.s:1101   .text:00000000000037dc _TRUE
             forth.s:1101   .text:00000000000037e4 TRUE
             forth.s:1112   .text:00000000000037f4 $d
             forth.s:1112   .text:00000000000037f8 _ZEQUAL
             forth.s:1112   .text:00000000000037fc ZEQUAL
             forth.s:1123   .text:000000000000380e $d
             forth.s:1123   .text:0000000000003812 _EQUAL
             forth.s:1123   .text:0000000000003814 $t
             forth.s:1135   .text:0000000000003826 $d
             forth.s:1135   .text:000000000000382a _DIFF
             forth.s:1135   .text:0000000000003830 DIFF
             forth.s:1148   .text:000000000000384a $d
             forth.s:1148   .text:000000000000384e _ULESS
             forth.s:1160   .text:0000000000003866 $d
             forth.s:1160   .text:000000000000386a _LESS
             forth.s:1160   .text:000000000000386c $t
             forth.s:1160   .text:000000000000386c LESS
             forth.s:1172   .text:000000000000387e $d
             forth.s:1172   .text:0000000000003882 _UGREAT
             forth.s:1172   .text:0000000000003888 UGREAT
             forth.s:1184   .text:000000000000389a $d
             forth.s:1184   .text:000000000000389e _GREAT
             forth.s:1184   .text:00000000000038a0 $t
             forth.s:1196   .text:00000000000038b2 $d
             forth.s:1196   .text:00000000000038b6 _MAX
             forth.s:1196   .text:00000000000038ba $t
             forth.s:1207   .text:00000000000038ca $d
             forth.s:1207   .text:00000000000038ce _MIN
ARM GAS  forth.s 			page 254


             forth.s:1207   .text:00000000000038d2 $t
             forth.s:1218   .text:00000000000038e2 $d
             forth.s:1218   .text:00000000000038e6 _PSTOR
             forth.s:1218   .text:00000000000038ec PSTOR
             forth.s:1230   .text:00000000000038fe $d
             forth.s:1230   .text:0000000000003902 _DSTOR
             forth.s:1230   .text:0000000000003908 DSTOR
             forth.s:1242   .text:000000000000391e $d
             forth.s:1242   .text:0000000000003922 _DAT
             forth.s:1242   .text:0000000000003928 DAT
             forth.s:1252   .text:0000000000003934 $d
             forth.s:1252   .text:0000000000003938 _COUNT
             forth.s:1252   .text:000000000000393e $t
             forth.s:1262   .text:000000000000394e $d
             forth.s:1262   .text:0000000000003952 _DNEGA
             forth.s:1262   .text:000000000000395a $t
             forth.s:1262   .text:000000000000395c DNEGA
             forth.s:1284   .text:000000000000396e $d
             forth.s:1284   .text:0000000000003972 _STATE
             forth.s:1284   .text:0000000000003978 $t
             forth.s:1284   .text:0000000000003978 STATE
             forth.s:1293   .text:0000000000003984 $d
             forth.s:1293   .text:0000000000003988 _SEED
             forth.s:1303   .text:000000000000399c $d
             forth.s:1303   .text:00000000000039a0 _MSEC
             forth.s:1303   .text:00000000000039a6 $t
             forth.s:1312   .text:00000000000039b2 $d
             forth.s:1312   .text:00000000000039b6 _TIMER
             forth.s:1312   .text:00000000000039bc $t
             forth.s:1321   .text:00000000000039c8 $d
             forth.s:1321   .text:00000000000039cc _TBOOT
             forth.s:1321   .text:00000000000039d2 $t
             forth.s:1321   .text:00000000000039d4 TBOOT
             forth.s:1330   .text:00000000000039e0 $d
             forth.s:1330   .text:00000000000039e4 _BASE
             forth.s:1341   .text:00000000000039f8 $d
             forth.s:1341   .text:00000000000039fc _BCHR
             forth.s:1341   .text:0000000000003a02 $t
             forth.s:1341   .text:0000000000003a04 BCHR
             forth.s:1351   .text:0000000000003a10 TEMP
             forth.s:1360   .text:0000000000003a1c $d
             forth.s:1360   .text:0000000000003a20 _SPAN
             forth.s:1360   .text:0000000000003a28 SPAN
             forth.s:1369   .text:0000000000003a34 $d
             forth.s:1369   .text:0000000000003a38 _INN
             forth.s:1369   .text:0000000000003a3c $t
             forth.s:1369   .text:0000000000003a3c INN
             forth.s:1379   .text:0000000000003a48 $d
             forth.s:1379   .text:0000000000003a4c _NTIB
             forth.s:1379   .text:0000000000003a54 NTIB
             forth.s:1388   .text:0000000000003a60 $d
             forth.s:1388   .text:0000000000003a64 _TEVAL
             forth.s:1388   .text:0000000000003a6a $t
             forth.s:1388   .text:0000000000003a6c TEVAL
             forth.s:1398   .text:0000000000003a78 $d
             forth.s:1398   .text:0000000000003a7c _HLD
             forth.s:1398   .text:0000000000003a80 $t
ARM GAS  forth.s 			page 255


             forth.s:1398   .text:0000000000003a80 HLD
             forth.s:1408   .text:0000000000003a8c $d
             forth.s:1408   .text:0000000000003a90 _CNTXT
             forth.s:1408   .text:0000000000003a98 $t
             forth.s:1409   .text:0000000000003a98 CRRNT
             forth.s:1419   .text:0000000000003aa4 $d
             forth.s:1419   .text:0000000000003aa8 _CPP
             forth.s:1419   .text:0000000000003aac CPP
             forth.s:1430   .text:0000000000003ab8 $d
             forth.s:1430   .text:0000000000003abc _UNUSED
             forth.s:1430   .text:0000000000003ac4 UNUSED
             forth.s:1442   .text:0000000000003ada $d
             forth.s:1442   .text:0000000000003ade _FCP
             forth.s:1442   .text:0000000000003ae2 $t
             forth.s:1442   .text:0000000000003ae4 FCP
             forth.s:1452   .text:0000000000003af0 $d
             forth.s:1452   .text:0000000000003af4 _LAST
             forth.s:1452   .text:0000000000003afc LAST
             forth.s:1466   .text:0000000000003b08 $d
             forth.s:1466   .text:0000000000003b0c _USER_BEGIN
             forth.s:1466   .text:0000000000003b18 USER_BEGIN
             forth.s:1470   .text:0000000000003b24 USR_BGN_ADR
             forth.s:1471   .text:0000000000003b24 $d
             forth.s:1477   .text:0000000000003b2c _USER_END
             forth.s:1477   .text:0000000000003b38 USER_END
             forth.s:1481   .text:0000000000003b44 USER_END_ADR
             forth.s:1482   .text:0000000000003b44 $d
             forth.s:1488   .text:0000000000003b4c _MAXINT
             forth.s:1488   .text:0000000000003b54 $t
             forth.s:1488   .text:0000000000003b54 MAXINT
             forth.s:1497   .text:0000000000003b64 $d
             forth.s:1497   .text:0000000000003b68 _MININT
             forth.s:1497   .text:0000000000003b70 $t
             forth.s:1497   .text:0000000000003b70 MININT
             forth.s:1506   .text:0000000000003b80 $d
             forth.s:1506   .text:0000000000003b84 _MAXUINT
             forth.s:1506   .text:0000000000003b90 MAXUINT
             forth.s:1521   .text:0000000000003ba0 $d
             forth.s:1521   .text:0000000000003ba4 _WITHI
             forth.s:1521   .text:0000000000003bac WITHI
             forth.s:1523   .text:0000000000003bb0 $d
             forth.s:1538   .text:0000000000003bd0 _UMMOD
             forth.s:1538   .text:0000000000003bd8 UMMOD
             forth.s:1542   .text:0000000000003be2 UMMOD0
             forth.s:1549   .text:0000000000003bf2 UMMOD1
             forth.s:1555   .text:0000000000003bfc UMMOD2
             forth.s:1568   .text:0000000000003c08 $d
             forth.s:1568   .text:0000000000003c0c _MSMOD
             forth.s:1568   .text:0000000000003c14 MSMOD
             forth.s:1570   .text:0000000000003c18 $d
             forth.s:1579   .text:0000000000003c40 MMOD1
             forth.s:1586   .text:0000000000003c5c MMOD2
             forth.s:1594   .text:0000000000003c7c MMOD3
             forth.s:1608   .text:0000000000003c84 _SMSLSHREM
             forth.s:1608   .text:0000000000003c8c SMSLSHREM
             forth.s:1610   .text:0000000000003c90 $d
             forth.s:1645   .text:0000000000003d18 _STOD
ARM GAS  forth.s 			page 256


             forth.s:1645   .text:0000000000003d1c $t
             forth.s:1654   .text:0000000000003d28 $d
             forth.s:1654   .text:0000000000003d2c _D2STAR
             forth.s:1654   .text:0000000000003d30 $t
             forth.s:1654   .text:0000000000003d30 D2STAR
             forth.s:1666   .text:0000000000003d42 $d
             forth.s:1666   .text:0000000000003d46 _D2SL
             forth.s:1666   .text:0000000000003d4a $t
             forth.s:1666   .text:0000000000003d4c D2SL
             forth.s:1681   .text:0000000000003d5a $d
             forth.s:1681   .text:0000000000003d5e _DSLMOD
             forth.s:1681   .text:0000000000003d64 $t
             forth.s:1681   .text:0000000000003d64 DSLMOD
             forth.s:1717   .text:0000000000003db0 $d
             forth.s:1717   .text:0000000000003db4 _DSLASH
             forth.s:1717   .text:0000000000003db8 DSLASH
             forth.s:1719   .text:0000000000003dbc $d
             forth.s:1739   .text:0000000000003e00 _DSTAR
             forth.s:1739   .text:0000000000003e04 DSTAR
             forth.s:1788   .text:0000000000003e3a $d
             forth.s:1788   .text:0000000000003e3e _SLMOD
             forth.s:1790   .text:0000000000003e48 $d
             forth.s:1801   .text:0000000000003e60 _MODD
             forth.s:1801   .text:0000000000003e64 $t
             forth.s:1803   .text:0000000000003e68 $d
             forth.s:1812   .text:0000000000003e78 _SLASH
             forth.s:1812   .text:0000000000003e7a $t
             forth.s:1812   .text:0000000000003e7c SLASH
             forth.s:1814   .text:0000000000003e80 $d
             forth.s:1825   .text:0000000000003e94 _SSMOD
             forth.s:1825   .text:0000000000003e9a $t
             forth.s:1825   .text:0000000000003e9c SSMOD
             forth.s:1827   .text:0000000000003ea0 $d
             forth.s:1839   .text:0000000000003eb8 _STASL
             forth.s:1839   .text:0000000000003ebc STASL
             forth.s:1841   .text:0000000000003ec0 $d
             forth.s:1855   .text:0000000000003ed4 _CHARP
             forth.s:1855   .text:0000000000003eda $t
             forth.s:1855   .text:0000000000003edc CHARP
             forth.s:1865   .text:0000000000003ee4 $d
             forth.s:1865   .text:0000000000003ee8 _CHARS
             forth.s:1865   .text:0000000000003eee $t
             forth.s:1865   .text:0000000000003ef0 CHARS
             forth.s:1875   .text:0000000000003ef4 $d
             forth.s:1875   .text:0000000000003ef8 _ALIGN
             forth.s:1875   .text:0000000000003efe $t
             forth.s:1875   .text:0000000000003f00 ALIGN
             forth.s:1888   .text:0000000000003f10 $d
             forth.s:1888   .text:0000000000003f14 _ALGND
             forth.s:1888   .text:0000000000003f1c $t
             forth.s:1888   .text:0000000000003f1c ALGND
             forth.s:1899   .text:0000000000003f2c $d
             forth.s:1899   .text:0000000000003f30 _TCHAR
             forth.s:1899   .text:0000000000003f36 $t
             forth.s:1899   .text:0000000000003f38 TCHAR
             forth.s:1901   .text:0000000000003f3c $d
             forth.s:1911   .text:0000000000003f74 TCHA1
ARM GAS  forth.s 			page 257


             forth.s:1919   .text:0000000000003f7c _DEPTH
             forth.s:1919   .text:0000000000003f82 $t
             forth.s:1919   .text:0000000000003f84 DEPTH
             forth.s:1931   .text:0000000000003f9c $d
             forth.s:1931   .text:0000000000003fa0 _PICK
             forth.s:1942   .text:0000000000003fb2 $d
             forth.s:1942   .text:0000000000003fb6 _PUT
             forth.s:1942   .text:0000000000003fba $t
             forth.s:1942   .text:0000000000003fbc PUT
             forth.s:1959   .text:0000000000003fd0 $d
             forth.s:1959   .text:0000000000003fd4 _HERE
             forth.s:1961   .text:0000000000003fe0 $d
             forth.s:1970   .text:0000000000003ff0 _PAD
             forth.s:1970   .text:0000000000003ff4 $t
             forth.s:1972   .text:0000000000003ff8 $d
             forth.s:1983   .text:0000000000004010 _TIB
             forth.s:1983   .text:0000000000004014 $t
             forth.s:1983   .text:0000000000004014 TIB
             forth.s:1994   .text:000000000000401e $d
             forth.s:1994   .text:0000000000004022 _SOURCID
             forth.s:1994   .text:000000000000402c $t
             forth.s:1994   .text:000000000000402c SOURCID
             forth.s:2006   .text:0000000000004038 $d
             forth.s:2006   .text:000000000000403c _SOURCE
             forth.s:2006   .text:0000000000004044 SOURCE
             forth.s:2008   .text:0000000000004048 $d
             forth.s:2017   .text:000000000000405c _ATEXE
             forth.s:2030   .text:000000000000407c $d
             forth.s:2030   .text:0000000000004080 _CMOVE
             forth.s:2030   .text:0000000000004086 $t
             forth.s:2044   .text:00000000000040a8 CMOV3
             forth.s:2039   .text:000000000000409e CMOV1
             forth.s:2036   .text:0000000000004096 CMOV0
             forth.s:2046   .text:00000000000040ac CMOV2
             forth.s:2054   .text:00000000000040b4 $d
             forth.s:2054   .text:00000000000040b8 _MOVE
             forth.s:2054   .text:00000000000040c0 MOVE
             forth.s:2063   .text:00000000000040c2 $d
             forth.s:2063   .text:00000000000040c6 _WMOVE
             forth.s:2063   .text:00000000000040cc $t
             forth.s:2081   .text:00000000000040f6 MOVE1
             forth.s:2078   .text:00000000000040f2 MOVE3
             forth.s:2075   .text:00000000000040ee MOVE0
             forth.s:2086   .text:0000000000004100 MOVE2
             forth.s:2095   .text:0000000000004108 $d
             forth.s:2095   .text:000000000000410c _FILL
             forth.s:2103   .text:0000000000004122 FILL2
             forth.s:2099   .text:000000000000411a FILL1
             forth.s:2113   .text:000000000000412a $d
             forth.s:2113   .text:000000000000412e _ERASE
             forth.s:2113   .text:0000000000004134 $t
             forth.s:2113   .text:0000000000004134 ERASE
             forth.s:2115   .text:0000000000004138 $d
             forth.s:2131   .text:0000000000004164 _PACKS
             forth.s:2131   .text:000000000000416a $t
             forth.s:2131   .text:000000000000416c PACKS
             forth.s:2133   .text:0000000000004170 $d
ARM GAS  forth.s 			page 258


             forth.s:2162   .text:00000000000041c8 _DIGIT
             forth.s:2162   .text:00000000000041ce $t
             forth.s:2162   .text:00000000000041d0 DIGIT
             forth.s:2164   .text:00000000000041d4 $d
             forth.s:2179   .text:0000000000004208 _EXTRC
             forth.s:2179   .text:0000000000004210 $t
             forth.s:2179   .text:0000000000004210 EXTRC
             forth.s:2181   .text:0000000000004214 $d
             forth.s:2191   .text:0000000000004228 _BDIGS
             forth.s:2193   .text:0000000000004230 $d
             forth.s:2203   .text:0000000000004244 _HOLD
             forth.s:2203   .text:000000000000424c HOLD
             forth.s:2205   .text:0000000000004250 $d
             forth.s:2220   .text:0000000000004274 _HOLDS
             forth.s:2220   .text:000000000000427a $t
             forth.s:2220   .text:000000000000427c HOLDS
             forth.s:2222   .text:0000000000004280 $d
             forth.s:2241   .text:00000000000042ac _DIG
             forth.s:2241   .text:00000000000042ae $t
             forth.s:2241   .text:00000000000042b0 DIG
             forth.s:2243   .text:00000000000042b4 $d
             forth.s:2255   .text:00000000000042cc _DIGS
             forth.s:2257   .text:00000000000042d4 DIGS1
             forth.s:2258   .text:00000000000042d4 $d
             forth.s:2263   .text:00000000000042f0 DIGS2
             forth.s:2273   .text:00000000000042fc _SIGN
             forth.s:2275   .text:0000000000004308 $d
             forth.s:2279   .text:0000000000004320 SIGN1
             forth.s:2287   .text:0000000000004328 _EDIGS
             forth.s:2289   .text:0000000000004330 $d
             forth.s:2304   .text:000000000000434c STRR
             forth.s:2305   .text:000000000000434c $t
             forth.s:2306   .text:0000000000004350 $d
             forth.s:2323   .text:000000000000437c _HEX
             forth.s:2323   .text:0000000000004380 $t
             forth.s:2323   .text:0000000000004380 HEX
             forth.s:2325   .text:0000000000004384 $d
             forth.s:2336   .text:000000000000439c _BIN
             forth.s:2336   .text:00000000000043a0 $t
             forth.s:2336   .text:00000000000043a0 BIN
             forth.s:2338   .text:00000000000043a4 $d
             forth.s:2348   .text:00000000000043bc _DECIM
             forth.s:2348   .text:00000000000043c4 $t
             forth.s:2350   .text:00000000000043c8 $d
             forth.s:2365   .text:00000000000043e0 _DIGTQ
             forth.s:2367   .text:00000000000043ec $d
             forth.s:2380   .text:0000000000004434 DGTQ1
             forth.s:2400   .text:0000000000004448 _TONBR
             forth.s:2400   .text:0000000000004450 $t
             forth.s:2402   .text:0000000000004454 $d
             forth.s:2434   .text:00000000000044c4 $t
             forth.s:2482   .text:0000000000004510 $d
             forth.s:2482   .text:0000000000004514 _INTQ
             forth.s:2482   .text:000000000000451c INTQ
             forth.s:2485   .text:0000000000004520 $d
             forth.s:2537   .text:00000000000045e8 _NUMBERQ
             forth.s:2537   .text:00000000000045f0 $t
ARM GAS  forth.s 			page 259


             forth.s:2537   .text:00000000000045f0 NUMBERQ
             forth.s:2539   .text:00000000000045f4 $d
             forth.s:2557   .text:0000000000004614 _SPACE
             forth.s:2557   .text:000000000000461a $t
             forth.s:2559   .text:0000000000004620 $d
             forth.s:2568   .text:0000000000004630 _SPACS
             forth.s:2568   .text:0000000000004638 SPACS
             forth.s:2570   .text:000000000000463c $d
             forth.s:2576   .text:0000000000004658 CHAR2
             forth.s:2574   .text:0000000000004654 CHAR1
             forth.s:2585   .text:0000000000004668 _TYPEE
             forth.s:2587   .text:0000000000004674 $d
             forth.s:2593   .text:000000000000468c TYPE2
             forth.s:2589   .text:0000000000004680 TYPE1
             forth.s:2603   .text:00000000000046a0 _SLTYPE
             forth.s:2603   .text:00000000000046a6 $t
             forth.s:2603   .text:00000000000046a8 SLTYPE
             forth.s:2605   .text:00000000000046ac $d
             forth.s:2620   .text:00000000000046d4 _CR
             forth.s:2622   .text:00000000000046dc $d
             forth.s:2634   .text:00000000000046f8 DOSTR
             forth.s:2635   .text:00000000000046f8 $t
             forth.s:2637   .text:00000000000046fc $d
             forth.s:2656   .text:0000000000004728 STRQP
             forth.s:2657   .text:0000000000004728 $t
             forth.s:2658   .text:000000000000472c $d
             forth.s:2669   .text:0000000000004734 $t
             forth.s:2670   .text:0000000000004738 $d
             forth.s:2682   .text:0000000000004744 LPAD
             forth.s:2683   .text:0000000000004744 $t
             forth.s:2684   .text:0000000000004748 $d
             forth.s:2715   .text:00000000000047c8 _DOTR
             forth.s:2715   .text:00000000000047cc DOTR
             forth.s:2717   .text:00000000000047d0 $d
             forth.s:2799   .text:00000000000048b4 DTOA
             forth.s:2734   .text:00000000000047f8 _UDOTR
             forth.s:2734   .text:00000000000047fc $t
             forth.s:2734   .text:00000000000047fc UDOTR
             forth.s:2736   .text:0000000000004800 $d
             forth.s:2752   .text:000000000000482c _UDOT
             forth.s:2754   .text:0000000000004834 $d
             forth.s:2770   .text:0000000000004860 _DOT
             forth.s:2770   .text:0000000000004862 $t
             forth.s:2772   .text:0000000000004868 $d
             forth.s:2780   .text:0000000000004890 DOT1
             forth.s:2799   .text:00000000000048b0 _DTOA
             forth.s:2799   .text:00000000000048b4 $t
             forth.s:2801   .text:00000000000048b8 $d
             forth.s:2816   .text:00000000000048e0 _DDOT
             forth.s:2816   .text:00000000000048e4 DDOT
             forth.s:2818   .text:00000000000048e8 $d
             forth.s:2829   .text:0000000000004908 _UDDOT
             forth.s:2829   .text:000000000000490c $t
             forth.s:2829   .text:000000000000490c UDDOT
             forth.s:2831   .text:0000000000004910 $d
             forth.s:2847   .text:0000000000004938 _HDOT
             forth.s:2849   .text:0000000000004940 $d
ARM GAS  forth.s 			page 260


             forth.s:2871   .text:0000000000004988 _QUEST
             forth.s:2871   .text:000000000000498a $t
             forth.s:2871   .text:000000000000498c QUEST
             forth.s:2873   .text:0000000000004990 $d
             forth.s:2887   .text:000000000000499c PARS
             forth.s:2888   .text:000000000000499c $t
             forth.s:2889   .text:00000000000049a0 $d
             forth.s:2955   .text:0000000000004ab0 PARS8
             forth.s:2919   .text:0000000000004a24 PARS3
             forth.s:2902   .text:00000000000049dc PARS1
             forth.s:2917   .text:0000000000004a20 PARS2
             forth.s:2923   .text:0000000000004a30 PARS4
             forth.s:2935   .text:0000000000004a60 PARS5
             forth.s:2942   .text:0000000000004a84 PARS6
             forth.s:2948   .text:0000000000004a98 PARS7
             forth.s:2967   .text:0000000000004ac4 _PARSE
             forth.s:2967   .text:0000000000004aca $t
             forth.s:2967   .text:0000000000004acc PARSE
             forth.s:2969   .text:0000000000004ad0 $d
             forth.s:2991   .text:0000000000004b10 _PARSENAME
             forth.s:2991   .text:0000000000004b1c PARSENAME
             forth.s:2993   .text:0000000000004b20 $d
             forth.s:3003   .text:0000000000004b30 _DOTPR
             forth.s:3003   .text:0000000000004b34 DOTPR
             forth.s:3005   .text:0000000000004b38 $d
             forth.s:3016   .text:0000000000004b50 _PAREN
             forth.s:3016   .text:0000000000004b52 $t
             forth.s:3016   .text:0000000000004b54 PAREN
             forth.s:3018   .text:0000000000004b58 $d
             forth.s:3029   .text:0000000000004b70 _BKSLA
             forth.s:3029   .text:0000000000004b72 $t
             forth.s:3029   .text:0000000000004b74 BKSLA
             forth.s:3031   .text:0000000000004b78 $d
             forth.s:3042   .text:0000000000004b90 _CHAR
             forth.s:3042   .text:0000000000004b98 CHAR
             forth.s:3044   .text:0000000000004b9c $d
             forth.s:3054   .text:0000000000004bb4 _IMCHAR
             forth.s:3054   .text:0000000000004bbc IMCHAR
             forth.s:3056   .text:0000000000004bc0 $d
             forth.s:3847   .text:0000000000005544 LITER
             forth.s:3065   .text:0000000000004bd0 _WORDD
             forth.s:3065   .text:0000000000004bd8 WORDD
             forth.s:3067   .text:0000000000004bdc $d
             forth.s:3079   .text:0000000000004bf4 _TOKEN
             forth.s:3079   .text:0000000000004bfa $t
             forth.s:3079   .text:0000000000004bfc TOKEN
             forth.s:3081   .text:0000000000004c00 $d
             forth.s:3248   .text:0000000000004dfc UPPER
             forth.s:3095   .text:0000000000004c14 _TOCFA
             forth.s:3095   .text:0000000000004c1c TOCFA
             forth.s:3097   .text:0000000000004c20 $d
             forth.s:3118   .text:0000000000004c4c _SAMEQ
             forth.s:3118   .text:0000000000004c52 $t
             forth.s:3118   .text:0000000000004c54 SAMEQ
             forth.s:3120   .text:0000000000004c58 $d
             forth.s:3137   .text:0000000000004ca0 SAME2
             forth.s:3122   .text:0000000000004c64 SAME1
ARM GAS  forth.s 			page 261


             forth.s:3152   .text:0000000000004cb4 SEARCH
             forth.s:3153   .text:0000000000004cb4 $t
             forth.s:3154   .text:0000000000004cb8 $d
             forth.s:3161   .text:0000000000004cd4 SEARCH1
             forth.s:3181   .text:0000000000004d2c SEARCH6
             forth.s:3174   .text:0000000000004d14 SEARCH2
             forth.s:3179   .text:0000000000004d24 SEARCH3
             forth.s:3188   .text:0000000000004d44 SEARCH4
             forth.s:3194   .text:0000000000004d60 SEARCH5
             forth.s:3210   .text:0000000000004d88 _NAMEQ
             forth.s:3210   .text:0000000000004d8e $t
             forth.s:3212   .text:0000000000004d94 $d
             forth.s:3227   .text:0000000000004da8 _ASCIZ
             forth.s:3227   .text:0000000000004dae $t
             forth.s:3227   .text:0000000000004db0 ASCIZ
             forth.s:3229   .text:0000000000004db4 $d
             forth.s:3248   .text:0000000000004df4 _UPPER
             forth.s:3248   .text:0000000000004dfa $t
             forth.s:3250   .text:0000000000004e00 $d
             forth.s:3281   .text:0000000000004e84 BKSP
             forth.s:3282   .text:0000000000004e84 $t
             forth.s:3283   .text:0000000000004e88 $d
             forth.s:3297   .text:0000000000004ecc BACK1
             forth.s:3306   .text:0000000000004ed0 TAP
             forth.s:3307   .text:0000000000004ed0 $t
             forth.s:3308   .text:0000000000004ed4 $d
             forth.s:3321   .text:0000000000004eec KTAP
             forth.s:3322   .text:0000000000004eec TTAP
             forth.s:3323   .text:0000000000004eec $t
             forth.s:3324   .text:0000000000004ef0 $d
             forth.s:3338   .text:0000000000004f30 KTAP2
             forth.s:3335   .text:0000000000004f28 KTAP1
             forth.s:3350   .text:0000000000004f48 _ACCEP
             forth.s:3352   .text:0000000000004f54 $d
             forth.s:3355   .text:0000000000004f60 ACCP1
             forth.s:3371   .text:0000000000004fa8 ACCP4
             forth.s:3367   .text:0000000000004f9c ACCP2
             forth.s:3369   .text:0000000000004fa0 ACCP3
             forth.s:3382   .text:0000000000004fbc _QUERY
             forth.s:3382   .text:0000000000004fc2 $t
             forth.s:3382   .text:0000000000004fc4 QUERY
             forth.s:3384   .text:0000000000004fc8 $d
             forth.s:3402   .text:0000000000004ffc _REFILL
             forth.s:3402   .text:0000000000005004 REFILL
             forth.s:3404   .text:0000000000005008 $d
             forth.s:3418   .text:000000000000502c _SAVEINP
             forth.s:3418   .text:0000000000005038 SAVEINP
             forth.s:3420   .text:000000000000503c $d
             forth.s:3433   .text:000000000000505c _RESTINP
             forth.s:3433   .text:000000000000506a $t
             forth.s:3433   .text:000000000000506c RESTINP
             forth.s:3435   .text:0000000000005070 $d
             forth.s:3454   .text:0000000000005098 _ABORT
             forth.s:3454   .text:000000000000509e $t
             forth.s:3456   .text:00000000000050a4 ABORT1
             forth.s:3457   .text:00000000000050a4 $d
             forth.s:3544   .text:00000000000051ac LBRAC
ARM GAS  forth.s 			page 262


             forth.s:3478   .text:00000000000050e4 PRT_ABORT
             forth.s:3479   .text:00000000000050e4 $t
             forth.s:3480   .text:00000000000050e8 $d
             forth.s:3498   .text:0000000000005110 ABORQ
             forth.s:3499   .text:0000000000005110 $t
             forth.s:3500   .text:0000000000005114 $d
             forth.s:3522   .text:0000000000005144 _INTER
             forth.s:3524   .text:0000000000005154 $d
             forth.s:3533   .text:0000000000005190 INTE1
             forth.s:3530   .text:0000000000005186 $t
             forth.s:3531   .text:0000000000005188 $d
             forth.s:3537   .text:00000000000051a0 INTE2
             forth.s:3544   .text:00000000000051a8 _LBRAC
             forth.s:3544   .text:00000000000051aa $t
             forth.s:3546   .text:00000000000051b0 $d
             forth.s:3559   .text:00000000000051d8 _DOTOK
             forth.s:3559   .text:00000000000051dc $t
             forth.s:3559   .text:00000000000051dc DOTOK
             forth.s:3561   .text:00000000000051e0 $d
             forth.s:3567   .text:0000000000005204 DOTO1
             forth.s:3568   .text:0000000000005204 $d
             forth.s:3576   .text:0000000000005210 _QSTAC
             forth.s:3576   .text:0000000000005218 QSTAC
             forth.s:3578   .text:000000000000521c $d
             forth.s:3580   .text:0000000000005232 $t
             forth.s:3581   .text:0000000000005234 $d
             forth.s:3588   .text:000000000000523c _EVAL
             forth.s:3590   .text:0000000000005248 EVAL1
             forth.s:3591   .text:0000000000005248 $d
             forth.s:3599   .text:0000000000005270 EVAL2
             forth.s:3615   .text:0000000000005280 _EVALUATE
             forth.s:3615   .text:000000000000528c EVALUATE
             forth.s:3618   .text:0000000000005290 $d
             forth.s:3656   .text:0000000000005334 _PRESE
             forth.s:3667   .text:0000000000005348 $d
             forth.s:3667   .text:000000000000534c _QUIT
             forth.s:3668   .text:0000000000005354 $d
             forth.s:3670   .text:0000000000005360 QUIT1
             forth.s:3672   .text:0000000000005364 QUIT2
             forth.s:3682   .text:0000000000005378 _FORGET
             forth.s:3682   .text:0000000000005380 FORGET
             forth.s:3684   .text:0000000000005384 $d
             forth.s:4545   .text:0000000000005e14 OVERT
             forth.s:3711   .text:00000000000053cc $d
             forth.s:3711   .text:00000000000053d0 _POSTPONE
             forth.s:3711   .text:00000000000053dc POSTPONE
             forth.s:3713   .text:00000000000053e0 $d
             forth.s:3736   .text:0000000000005418 ITICK
             forth.s:4588   .text:0000000000005e94 CALLC
             forth.s:3723   .text:00000000000053f0 _TICK
             forth.s:3723   .text:00000000000053f2 $t
             forth.s:3723   .text:00000000000053f4 TICK
             forth.s:3725   .text:00000000000053f8 $d
             forth.s:3729   .text:000000000000540c TICK1
             forth.s:3736   .text:0000000000005414 _ITICK
             forth.s:3736   .text:0000000000005418 $t
             forth.s:3738   .text:000000000000541c $d
ARM GAS  forth.s 			page 263


             forth.s:3753   .text:0000000000005428 _FIND
             forth.s:3753   .text:0000000000005430 FIND
             forth.s:3755   .text:0000000000005434 $d
             forth.s:3775   .text:0000000000005478 _ALLOT
             forth.s:3775   .text:000000000000547e $t
             forth.s:3777   .text:0000000000005484 $d
             forth.s:3786   .text:0000000000005494 _COMMA
             forth.s:3786   .text:0000000000005496 $t
             forth.s:3786   .text:0000000000005498 COMMA
             forth.s:3788   .text:000000000000549c $d
             forth.s:3802   .text:00000000000054b8 $d
             forth.s:3802   .text:00000000000054bc _CCOMMA
             forth.s:3802   .text:00000000000054c0 CCOMMA
             forth.s:3804   .text:00000000000054c4 $d
             forth.s:3817   .text:00000000000054e4 _BCOMP
             forth.s:3817   .text:00000000000054ee $t
             forth.s:3817   .text:00000000000054f0 BCOMP
             forth.s:3819   .text:00000000000054f4 $d
             forth.s:3829   .text:0000000000005504 _COMPI
             forth.s:3829   .text:000000000000550c $t
             forth.s:3829   .text:000000000000550c COMPI
             forth.s:3831   .text:0000000000005510 $d
             forth.s:3847   .text:000000000000553c _LITER
             forth.s:3847   .text:0000000000005544 $t
             forth.s:3849   .text:0000000000005548 $d
             forth.s:3859   .text:000000000000555c STRCQ
             forth.s:3860   .text:000000000000555c $t
             forth.s:3861   .text:0000000000005560 $d
             forth.s:3883   .text:0000000000005598 _FOR
             forth.s:3883   .text:000000000000559c $t
             forth.s:3883   .text:000000000000559c FOR
             forth.s:3885   .text:00000000000055a0 $d
             forth.s:3894   .text:00000000000055b8 _DO
             forth.s:3894   .text:00000000000055bc DO
             forth.s:3896   .text:00000000000055c0 $d
             forth.s:3908   .text:00000000000055e0 _QDO
             forth.s:3908   .text:00000000000055e4 $t
             forth.s:3908   .text:00000000000055e4 QDO
             forth.s:3910   .text:00000000000055e8 $d
             forth.s:3924   .text:0000000000005648 DOPLOOP
             forth.s:3925   .text:0000000000005648 $t
             forth.s:3944   .text:0000000000005670 $d
             forth.s:3944   .text:0000000000005674 _PLOOP
             forth.s:3944   .text:000000000000567a $t
             forth.s:3944   .text:000000000000567c PLOOP
             forth.s:3946   .text:0000000000005680 $d
             forth.s:3965   .text:00000000000056c0 resolve_leave
             forth.s:3951   .text:0000000000005698 DOLOOP
             forth.s:3952   .text:0000000000005698 $t
             forth.s:3967   .text:00000000000056c4 $d
             forth.s:3982   .text:00000000000056f0 _LOOP
             forth.s:3982   .text:00000000000056f8 LOOP
             forth.s:3984   .text:00000000000056fc $d
             forth.s:3993   .text:0000000000005718 _UNLOOP
             forth.s:3993   .text:0000000000005720 UNLOOP
             forth.s:4002   .text:0000000000005728 $d
             forth.s:4002   .text:000000000000572c _LEAVE
ARM GAS  forth.s 			page 264


             forth.s:4002   .text:0000000000005732 $t
             forth.s:4002   .text:0000000000005734 LEAVE
             forth.s:4004   .text:0000000000005738 $d
             forth.s:4015   .text:0000000000005768 DOLEAVE
             forth.s:4016   .text:0000000000005768 $t
             forth.s:4027   .text:0000000000005774 $d
             forth.s:4027   .text:0000000000005778 _BEGIN
             forth.s:4027   .text:000000000000577e $t
             forth.s:4027   .text:0000000000005780 BEGIN
             forth.s:4029   .text:0000000000005784 $d
             forth.s:4038   .text:000000000000578c $d
             forth.s:4038   .text:0000000000005790 _FNEXT
             forth.s:4038   .text:0000000000005798 FNEXT
             forth.s:4040   .text:000000000000579c $d
             forth.s:4048   .text:00000000000057b4 _I
             forth.s:4048   .text:00000000000057b6 $t
             forth.s:4048   .text:00000000000057b8 I
             forth.s:4057   .text:00000000000057c4 $d
             forth.s:4057   .text:00000000000057c8 _J
             forth.s:4057   .text:00000000000057ca $t
             forth.s:4057   .text:00000000000057cc J
             forth.s:4067   .text:00000000000057d8 $d
             forth.s:4067   .text:00000000000057dc _UNTIL
             forth.s:4067   .text:00000000000057e2 $t
             forth.s:4067   .text:00000000000057e4 UNTIL
             forth.s:4069   .text:00000000000057e8 $d
             forth.s:4078   .text:0000000000005800 _AGAIN
             forth.s:4078   .text:0000000000005806 $t
             forth.s:4078   .text:0000000000005808 AGAIN
             forth.s:4080   .text:000000000000580c $d
             forth.s:4089   .text:0000000000005824 _IFF
             forth.s:4089   .text:0000000000005828 IFF
             forth.s:4091   .text:000000000000582c $d
             forth.s:4103   .text:0000000000005854 _AHEAD
             forth.s:4103   .text:000000000000585a $t
             forth.s:4103   .text:000000000000585c AHEAD
             forth.s:4105   .text:0000000000005860 $d
             forth.s:4117   .text:0000000000005888 _REPEA
             forth.s:4117   .text:0000000000005890 REPEA
             forth.s:4119   .text:0000000000005894 $d
             forth.s:4130   .text:00000000000058ac _THENN
             forth.s:4130   .text:00000000000058b4 THENN
             forth.s:4132   .text:00000000000058b8 $d
             forth.s:4143   .text:00000000000058cc _AFT
             forth.s:4143   .text:00000000000058d0 $t
             forth.s:4143   .text:00000000000058d0 AFT
             forth.s:4145   .text:00000000000058d4 $d
             forth.s:4157   .text:00000000000058ec _ELSEE
             forth.s:4157   .text:00000000000058f4 ELSEE
             forth.s:4159   .text:00000000000058f8 $d
             forth.s:4169   .text:000000000000590c _WHILE
             forth.s:4169   .text:0000000000005912 $t
             forth.s:4169   .text:0000000000005914 WHILE
             forth.s:4171   .text:0000000000005918 $d
             forth.s:4181   .text:0000000000005928 _CASE
             forth.s:4181   .text:0000000000005930 CASE
             forth.s:4183   .text:0000000000005934 $d
ARM GAS  forth.s 			page 265


             forth.s:4192   .text:0000000000005944 _OF
             forth.s:4192   .text:0000000000005948 OF
             forth.s:4194   .text:000000000000594c $d
             forth.s:4208   .text:0000000000005988 _ENDOF
             forth.s:4208   .text:000000000000598e $t
             forth.s:4208   .text:0000000000005990 ENDOF
             forth.s:4210   .text:0000000000005994 $d
             forth.s:4226   .text:00000000000059c8 _ENDCASE
             forth.s:4226   .text:00000000000059d0 $t
             forth.s:4226   .text:00000000000059d0 ENDCASE
             forth.s:4228   .text:00000000000059d4 $d
             forth.s:4245   .text:0000000000005a0c _RECURSE
             forth.s:4245   .text:0000000000005a14 $t
             forth.s:4245   .text:0000000000005a14 RECURSE
             forth.s:4247   .text:0000000000005a18 $d
             forth.s:4259   .text:0000000000005a30 _ABRTQ
             forth.s:4259   .text:0000000000005a38 ABRTQ
             forth.s:4261   .text:0000000000005a3c $d
             forth.s:4271   .text:0000000000005a54 _STRQ
             forth.s:4271   .text:0000000000005a58 STRQ
             forth.s:4273   .text:0000000000005a5c $d
             forth.s:4283   .text:0000000000005a74 _STRSLHQ
             forth.s:4283   .text:0000000000005a78 $t
             forth.s:4283   .text:0000000000005a78 STRSLHQ
             forth.s:4285   .text:0000000000005a7c $d
             forth.s:4315   .text:0000000000005b14 GETC
             forth.s:4329   .text:0000000000005b32 ESCAPE
             forth.s:4316   .text:0000000000005b14 $t
             forth.s:4331   .text:0000000000005b36 $d
             forth.s:4364   .text:0000000000005be2 PARSE_HEX
             forth.s:4397   .text:0000000000005c66 esc_char
             forth.s:4365   .text:0000000000005be2 $t
             forth.s:4366   .text:0000000000005be6 $d
             forth.s:4383   .text:0000000000005c2e TO_HEX
             forth.s:4384   .text:0000000000005c2e $t
             forth.s:4385   .text:0000000000005c32 $d
             forth.s:4406   .text:0000000000005c7f STRCSLHQ
             forth.s:4417   .text:0000000000005c83 _CSTRQ
             forth.s:4417   .text:0000000000005c86 $t
             forth.s:4417   .text:0000000000005c88 CSTRQ
             forth.s:4419   .text:0000000000005c8c $d
             forth.s:4432   .text:0000000000005cbc _DOTQ
             forth.s:4432   .text:0000000000005cc0 DOTQ
             forth.s:4434   .text:0000000000005cc4 $d
             forth.s:4448   .text:0000000000005cdc _UNIQU
             forth.s:4448   .text:0000000000005ce4 $t
             forth.s:4448   .text:0000000000005ce4 UNIQU
             forth.s:4450   .text:0000000000005ce8 $d
             forth.s:4457   .text:0000000000005d10 UNIQ1
             forth.s:4454   .text:0000000000005d04 $d
             forth.s:4467   .text:0000000000005d18 SNAME
             forth.s:4468   .text:0000000000005d18 $t
             forth.s:4469   .text:0000000000005d1c $d
             forth.s:4485   .text:0000000000005d60 SNAM1
             forth.s:4497   .text:0000000000005d74 _SCOMP
             forth.s:4497   .text:0000000000005d80 SCOMP
             forth.s:4499   .text:0000000000005d84 $d
ARM GAS  forth.s 			page 266


             forth.s:4511   .text:0000000000005dbc SCOM2
             forth.s:4508   .text:0000000000005db4 SCOM1
             forth.s:4516   .text:0000000000005dd0 SCOM3
             forth.s:4525   .text:0000000000005dd8 COLON_ABORT
             forth.s:4526   .text:0000000000005dd8 $t
             forth.s:4527   .text:0000000000005ddc $d
             forth.s:4545   .text:0000000000005e0c _OVERT
             forth.s:4545   .text:0000000000005e12 $t
             forth.s:4547   .text:0000000000005e18 $d
             forth.s:4558   .text:0000000000005e30 _SEMIS
             forth.s:4558   .text:0000000000005e32 $t
             forth.s:4558   .text:0000000000005e34 SEMIS
             forth.s:4560   .text:0000000000005e38 $d
             forth.s:4573   .text:0000000000005e58 _RBRAC
             forth.s:4573   .text:0000000000005e5a $t
             forth.s:4573   .text:0000000000005e5c RBRAC
             forth.s:4575   .text:0000000000005e60 $d
             forth.s:4588   .text:0000000000005e88 _CALLC
             forth.s:4590   .text:0000000000005e98 $d
             forth.s:4602   .text:0000000000005eb0 _BUFFER
             forth.s:4602   .text:0000000000005eb8 $t
             forth.s:4602   .text:0000000000005eb8 BUFFER
             forth.s:4604   .text:0000000000005ebc $d
             forth.s:4626   .text:0000000000005efc _COLON
             forth.s:4626   .text:0000000000005efe $t
             forth.s:4626   .text:0000000000005f00 COLON
             forth.s:4628   .text:0000000000005f04 $d
             forth.s:4640   .text:0000000000005f20 _IMMED
             forth.s:4640   .text:0000000000005f2a $t
             forth.s:4640   .text:0000000000005f2c IMMED
             forth.s:4642   .text:0000000000005f30 $d
             forth.s:4656   .text:0000000000005f58 $t
             forth.s:4662   .text:0000000000005f58 DODOES
             forth.s:4664   .text:0000000000005f5c $d
             forth.s:5104   .text:00000000000064e4 TOVECTOR
             forth.s:4680   .text:0000000000005f84 $d
             forth.s:4680   .text:0000000000005f88 _DOES
             forth.s:4680   .text:0000000000005f8e $t
             forth.s:4680   .text:0000000000005f90 DOES
             forth.s:4682   .text:0000000000005f94 $d
             forth.s:4692   .text:0000000000005fb8 _DEFERAT
             forth.s:4692   .text:0000000000005fc0 DEFERAT
             forth.s:4694   .text:0000000000005fc4 $d
             forth.s:4703   .text:0000000000005fd4 _ACTIONOF
             forth.s:4703   .text:0000000000005fde $t
             forth.s:4703   .text:0000000000005fe0 ACTIONOF
             forth.s:4705   .text:0000000000005fe4 $d
             forth.s:4718   .text:0000000000006008 _DEFERSTO
             forth.s:4718   .text:0000000000006010 DEFERSTO
             forth.s:4720   .text:0000000000006014 $d
             forth.s:4730   .text:0000000000006030 _DEFER
             forth.s:4730   .text:0000000000006036 $t
             forth.s:4730   .text:0000000000006038 DEFER
             forth.s:4732   .text:000000000000603c $d
             forth.s:4742   .text:0000000000006060 NO_ACTION
             forth.s:4743   .text:0000000000006060 $t
             forth.s:4744   .text:0000000000006064 $d
ARM GAS  forth.s 			page 267


             forth.s:4746   .text:0000000000006080 $d
             forth.s:4756   .text:0000000000006088 _NONAME
             forth.s:4756   .text:0000000000006090 $t
             forth.s:4756   .text:0000000000006090 NONAME
             forth.s:4758   .text:0000000000006094 $d
             forth.s:4771   .text:00000000000060a8 _IS
             forth.s:4771   .text:00000000000060ac IS
             forth.s:4773   .text:00000000000060b0 $d
             forth.s:4791   .text:00000000000060f0 _CREAT
             forth.s:4791   .text:00000000000060f8 CREAT
             forth.s:4793   .text:00000000000060fc $d
             forth.s:4808   .text:0000000000006138 DOVAR
             forth.s:4809   .text:0000000000006138 $t
             forth.s:4820   .text:0000000000006146 $d
             forth.s:4820   .text:000000000000614a _VARIA
             forth.s:4820   .text:0000000000006154 VARIA
             forth.s:4822   .text:0000000000006158 $d
             forth.s:4832   .text:000000000000616c DOCON
             forth.s:4833   .text:000000000000616c $t
             forth.s:4844   .text:0000000000006178 $d
             forth.s:4844   .text:000000000000617c _VALUE
             forth.s:4844   .text:0000000000006182 $t
             forth.s:4844   .text:0000000000006184 VALUE
             forth.s:4846   .text:0000000000006188 $d
             forth.s:4862   .text:00000000000061c0 _TO
             forth.s:4862   .text:00000000000061c4 TO
             forth.s:4864   .text:00000000000061c8 $d
             forth.s:4876   .text:00000000000061e8 _CONST
             forth.s:4876   .text:00000000000061f4 CONST
             forth.s:4878   .text:00000000000061f8 $d
             forth.s:4900   .text:0000000000006228 DMP
             forth.s:4901   .text:0000000000006228 $t
             forth.s:4902   .text:000000000000622c $d
             forth.s:4920   .text:0000000000006280 PDUM2
             forth.s:4914   .text:0000000000006268 PDUM1
             forth.s:4935   .text:0000000000006298 $d
             forth.s:4935   .text:000000000000629c _DUMP
             forth.s:4935   .text:00000000000062a4 DUMP
             forth.s:4937   .text:00000000000062a8 $d
             forth.s:4963   .text:0000000000006324 DUMP4
             forth.s:4953   .text:00000000000062fc DUMP1
             forth.s:4965   .text:000000000000632c DUMP3
             forth.s:4978   .text:0000000000006340 TDOT
             forth.s:4979   .text:0000000000006340 $t
             forth.s:4980   .text:0000000000006344 $d
             forth.s:5019   .text:00000000000063d8 _DOTS
             forth.s:5019   .text:00000000000063dc DOTS
             forth.s:5021   .text:00000000000063e0 $d
             forth.s:5028   .text:00000000000063fc DOTS2
             forth.s:5024   .text:00000000000063f0 DOTS1
             forth.s:5033   .text:000000000000640c RBASE
             forth.s:5034   .text:000000000000640c $t
             forth.s:5042   .text:000000000000641c RDOT
             forth.s:5044   .text:0000000000006420 $d
             forth.s:5071   .text:0000000000006484 _TRACE
             forth.s:5071   .text:000000000000648a $t
             forth.s:5071   .text:000000000000648c TRACE
ARM GAS  forth.s 			page 268


             forth.s:5073   .text:0000000000006490 $d
             forth.s:5092   .text:00000000000064d4 _TOBODY
             forth.s:5092   .text:00000000000064da $t
             forth.s:5092   .text:00000000000064dc TOBODY
             forth.s:5113   .text:00000000000064ec $d
             forth.s:5113   .text:00000000000064f0 _TONFA
             forth.s:5113   .text:00000000000064f8 TONFA
             forth.s:5115   .text:00000000000064fc $d
             forth.s:5118   .text:0000000000006508 TNAM1
             forth.s:5129   .text:000000000000653c TNAM2
             forth.s:5139   .text:000000000000654c _DOTID
             forth.s:5139   .text:0000000000006550 $t
             forth.s:5139   .text:0000000000006550 DOTID
             forth.s:5141   .text:0000000000006554 $d
             forth.s:5149   .text:000000000000657c DOTI1
             forth.s:5150   .text:000000000000658a $t
             forth.s:5151   .text:000000000000658c $d
             forth.s:5153   *ABS*:0000000000000000 WANT_SEE
             forth.s:5227   .text:0000000000006594 _WORDS
             forth.s:5227   .text:000000000000659a $t
             forth.s:5227   .text:000000000000659c WORDS
             forth.s:5229   .text:00000000000065a0 $d
             forth.s:5232   .text:00000000000065ac WORS1
             forth.s:5241   .text:00000000000065d4 WORS2
             forth.s:5250   .text:00000000000065dc _MARKER
             forth.s:5250   .text:00000000000065e4 MARKER
             forth.s:5252   .text:00000000000065e8 $d
             forth.s:5255   .text:00000000000065f4 $t
             forth.s:5256   .text:00000000000065f8 $d
             forth.s:5271   .text:0000000000006628 _ARRAY
             forth.s:5271   .text:000000000000662e $t
             forth.s:5271   .text:0000000000006630 ARRAY
             forth.s:5273   .text:0000000000006634 $d
             forth.s:5287   .text:0000000000006670 DO_ARRAY
             forth.s:5288   .text:0000000000006670 $t
             forth.s:5289   .text:0000000000006674 $d
             forth.s:5307   .text:0000000000006690 VERSN
             forth.s:5308   .text:0000000000006690 $t
             forth.s:5309   .text:0000000000006694 $d
             forth.s:5317   .text:00000000000066a4 _HI
             forth.s:5317   .text:00000000000066a8 HI
             forth.s:5319   .text:00000000000066ac $d
             forth.s:5320   .text:00000000000066c6 $t
             forth.s:5321   .text:00000000000066c8 $d
             forth.s:5345   .text:0000000000006714 $t
             forth.s:5346   .text:0000000000006718 $d
             forth.s:5358   .text:0000000000006734 PS2_QUERY
             forth.s:5359   .text:0000000000006734 $t
             forth.s:5360   .text:0000000000006738 $d
             forth.s:5374   .text:000000000000679e $t
             forth.s:5375   .text:00000000000067a0 $d
             forth.s:5385   .text:00000000000067ac IF_SENSE
             forth.s:5386   .text:00000000000067ac $t
             forth.s:5387   .text:00000000000067b0 $d
             forth.s:5401   .text:00000000000067e0 READY
             forth.s:5402   .text:00000000000067e0 $t
             forth.s:5403   .text:00000000000067e4 $d
ARM GAS  forth.s 			page 269


             forth.s:5403   .text:00000000000067ee $t
             forth.s:5404   .text:00000000000067f0 $d
             forth.s:5422   .text:0000000000006818 COLD1
             forth.s:5423   .text:0000000000006818 $d
             forth.s:5438   .text:0000000000006868 COLD2
             forth.s:5441   .text:0000000000006868 $d
             forth.s:5444   .text:000000000000686c $d
              init.s:170    .text:0000000000000061 $d
              init.s:170    .text:0000000000000062 $t
              init.s:213    .text:00000000000000fd $d
              init.s:213    .text:00000000000000fe $t
              init.s:276    .text:000000000000022f $d
              init.s:281    .text:000000000000023f $d
              init.s:291    .text:0000000000000257 $d
              init.s:302    .text:0000000000000263 $d
              init.s:302    .text:0000000000000264 $t
              init.s:330    .text:00000000000002cf $d
              init.s:487    .text:00000000000004d1 $d
              init.s:487    .text:00000000000004d2 $t
       environment.s:32     .text:000000000000097d $d
       environment.s:32     .text:000000000000097e $t
       environment.s:107    .text:0000000000000a1b $d
       environment.s:107    .text:0000000000000a1c $t
       environment.s:141    .text:0000000000000a63 $d
       environment.s:141    .text:0000000000000a64 $t
       environment.s:187    .text:0000000000000ac9 $d
       environment.s:187    .text:0000000000000aca $t
       environment.s:201    .text:0000000000000af5 $d
       environment.s:201    .text:0000000000000af6 $t
          ser-term.s:90     .text:0000000000000bbb $d
          ser-term.s:90     .text:0000000000000bbc $t
          ser-term.s:110    .text:0000000000000bf5 $d
          ser-term.s:110    .text:0000000000000bf6 $t
          ser-term.s:133    .text:0000000000000c33 $d
          ser-term.s:133    .text:0000000000000c34 $t
          ser-term.s:164    .text:0000000000000c7b $d
          ser-term.s:164    .text:0000000000000c7c $t
          ser-term.s:191    .text:0000000000000cf1 $d
          ser-term.s:191    .text:0000000000000cf2 $t
          ser-term.s:203    .text:0000000000000d1f $d
          ser-term.s:203    .text:0000000000000d20 $t
             tvout.s:264    .text:0000000000000f6b $d
             tvout.s:264    .text:0000000000000f6c $t
             tvout.s:278    .text:0000000000000f9f $d
             tvout.s:278    .text:0000000000000fa0 $t
             tvout.s:306    .text:0000000000000ff9 $d
             tvout.s:306    .text:0000000000000ffa $t
             tvout.s:325    .text:0000000000001027 $d
             tvout.s:325    .text:0000000000001028 $t
             tvout.s:427    .text:0000000000001161 $d
             tvout.s:427    .text:0000000000001162 $t
             tvout.s:448    .text:00000000000011bb $d
             tvout.s:448    .text:00000000000011bc $t
             tvout.s:495    .text:0000000000001251 $d
             tvout.s:495    .text:0000000000001252 $t
           ps2_kbd.s:307    .text:000000000000193f $d
           ps2_kbd.s:307    .text:0000000000001940 $t
ARM GAS  forth.s 			page 270


           ps2_kbd.s:396    .text:0000000000001a3b $d
           ps2_kbd.s:396    .text:0000000000001a3c $t
           ps2_kbd.s:616    .text:0000000000001cdd $d
           ps2_kbd.s:616    .text:0000000000001cde $t
           ps2_kbd.s:633    .text:0000000000001d17 $d
           ps2_kbd.s:633    .text:0000000000001d18 $t
         spi-flash.s:85     .text:0000000000001e03 $d
         spi-flash.s:85     .text:0000000000001e04 $t
         spi-flash.s:151    .text:0000000000001ecf $d
         spi-flash.s:151    .text:0000000000001ed0 $t
         spi-flash.s:238    .text:0000000000002013 $d
         spi-flash.s:238    .text:0000000000002014 $t
         spi-flash.s:256    .text:000000000000204f $d
         spi-flash.s:256    .text:0000000000002050 $t
         spi-flash.s:278    .text:00000000000020a3 $d
         spi-flash.s:278    .text:00000000000020a4 $t
         spi-flash.s:325    .text:0000000000002123 $d
         spi-flash.s:325    .text:0000000000002124 $t
         spi-flash.s:343    .text:0000000000002145 $d
         spi-flash.s:343    .text:0000000000002146 $t
         spi-flash.s:352    .text:0000000000002159 $d
         spi-flash.s:352    .text:000000000000215a $t
             block.s:110    .text:00000000000021b1 $d
             block.s:110    .text:00000000000021b2 $t
             block.s:120    .text:00000000000021cd $d
             block.s:120    .text:00000000000021ce $t
             block.s:129    .text:00000000000021e3 $d
             block.s:129    .text:00000000000021e4 $t
             block.s:149    .text:0000000000002211 $d
             block.s:149    .text:0000000000002212 $t
             block.s:169    .text:000000000000223b $d
             block.s:169    .text:000000000000223c $t
               fpu.s:222    .text:000000000000240b $d
               fpu.s:222    .text:000000000000240c $t
               fpu.s:235    .text:000000000000242b $d
               fpu.s:235    .text:000000000000242c $t
               fpu.s:249    .text:000000000000244b $d
               fpu.s:249    .text:000000000000244c $t
               fpu.s:262    .text:000000000000246b $d
               fpu.s:262    .text:000000000000246c $t
               fpu.s:285    .text:00000000000024a9 $d
               fpu.s:285    .text:00000000000024aa $t
               fpu.s:297    .text:00000000000024c9 $d
               fpu.s:297    .text:00000000000024ca $t
               fpu.s:319    .text:0000000000002503 $d
               fpu.s:319    .text:0000000000002504 $t
               fpu.s:330    .text:000000000000251f $d
               fpu.s:330    .text:0000000000002520 $t
               fpu.s:340    .text:0000000000002539 $d
               fpu.s:340    .text:000000000000253a $t
               fpu.s:353    .text:0000000000002569 $d
               fpu.s:353    .text:000000000000256a $t
               fpu.s:379    .text:00000000000025b9 $d
               fpu.s:379    .text:00000000000025ba $t
               fpu.s:403    .text:0000000000002603 $d
               fpu.s:403    .text:0000000000002604 $t
               fpu.s:421    .text:0000000000002635 $d
ARM GAS  forth.s 			page 271


               fpu.s:421    .text:0000000000002636 $t
               fpu.s:431    .text:0000000000002651 $d
               fpu.s:431    .text:0000000000002652 $t
            strtof.s:226    .text:00000000000028d3 $d
            strtof.s:226    .text:00000000000028d4 $t
              ftoa.s:412    .text:0000000000002f3f $d
              ftoa.s:412    .text:0000000000002f40 $t
             forth.s:133    .text:0000000000002ffb $d
             forth.s:133    .text:0000000000002ffc $t
             forth.s:145    .text:000000000000301b $d
             forth.s:145    .text:000000000000301c $t
             forth.s:157    .text:000000000000303b $d
             forth.s:157    .text:000000000000303c $t
             forth.s:192    .text:0000000000003075 $d
             forth.s:192    .text:0000000000003076 $t
             forth.s:228    .text:0000000000003093 $d
             forth.s:228    .text:0000000000003094 $t
             forth.s:259    .text:000000000000310b $d
             forth.s:259    .text:000000000000310c $t
             forth.s:275    .text:000000000000313d $d
             forth.s:275    .text:000000000000313e $t
             forth.s:292    .text:000000000000316b $d
             forth.s:292    .text:000000000000316c $t
             forth.s:306    .text:0000000000003195 $d
             forth.s:306    .text:0000000000003196 $t
             forth.s:418    .text:000000000000324d $d
             forth.s:418    .text:000000000000324e $t
             forth.s:444    .text:0000000000003277 $d
             forth.s:444    .text:0000000000003278 $t
             forth.s:454    .text:000000000000328b $d
             forth.s:454    .text:000000000000328c $t
             forth.s:463    .text:0000000000003297 $d
             forth.s:463    .text:0000000000003298 $t
             forth.s:484    .text:00000000000032c9 $d
             forth.s:484    .text:00000000000032ca $t
             forth.s:505    .text:00000000000032f9 $d
             forth.s:505    .text:00000000000032fa $t
             forth.s:562    .text:000000000000336d $d
             forth.s:562    .text:000000000000336e $t
             forth.s:587    .text:000000000000339f $d
             forth.s:587    .text:00000000000033a0 $t
             forth.s:612    .text:00000000000033cd $d
             forth.s:612    .text:00000000000033ce $t
             forth.s:635    .text:00000000000033fd $d
             forth.s:635    .text:00000000000033fe $t
             forth.s:643    .text:000000000000340d $d
             forth.s:643    .text:000000000000340e $t
             forth.s:664    .text:0000000000003433 $d
             forth.s:664    .text:0000000000003434 $t
             forth.s:685    .text:000000000000345d $d
             forth.s:685    .text:000000000000345e $t
             forth.s:715    .text:00000000000034a3 $d
             forth.s:715    .text:00000000000034a4 $t
             forth.s:724    .text:00000000000034b9 $d
             forth.s:724    .text:00000000000034ba $t
             forth.s:772    .text:0000000000003513 $d
             forth.s:772    .text:0000000000003514 $t
ARM GAS  forth.s 			page 272


             forth.s:783    .text:0000000000003527 $d
             forth.s:783    .text:0000000000003528 $t
             forth.s:791    .text:0000000000003535 $d
             forth.s:791    .text:0000000000003536 $t
             forth.s:799    .text:0000000000003545 $d
             forth.s:799    .text:0000000000003546 $t
             forth.s:807    .text:0000000000003555 $d
             forth.s:807    .text:0000000000003556 $t
             forth.s:831    .text:0000000000003585 $d
             forth.s:831    .text:0000000000003586 $t
             forth.s:856    .text:00000000000035b9 $d
             forth.s:856    .text:00000000000035ba $t
             forth.s:864    .text:00000000000035c9 $d
             forth.s:864    .text:00000000000035ca $t
             forth.s:872    .text:00000000000035db $d
             forth.s:872    .text:00000000000035dc $t
             forth.s:882    .text:00000000000035ef $d
             forth.s:882    .text:00000000000035f0 $t
             forth.s:891    .text:0000000000003601 $d
             forth.s:891    .text:0000000000003602 $t
             forth.s:945    .text:0000000000003687 $d
             forth.s:945    .text:0000000000003688 $t
             forth.s:974    .text:00000000000036c3 $d
             forth.s:974    .text:00000000000036c4 $t
             forth.s:984    .text:00000000000036d7 $d
             forth.s:984    .text:00000000000036d8 $t
             forth.s:997    .text:00000000000036f5 $d
             forth.s:997    .text:00000000000036f6 $t
             forth.s:1042   .text:000000000000375d $d
             forth.s:1042   .text:000000000000375e $t
             forth.s:1050   .text:0000000000003771 $d
             forth.s:1050   .text:0000000000003772 $t
             forth.s:1101   .text:00000000000037e1 $d
             forth.s:1101   .text:00000000000037e2 $t
             forth.s:1112   .text:00000000000037fb $d
             forth.s:1112   .text:00000000000037fc $t
             forth.s:1135   .text:000000000000382d $d
             forth.s:1135   .text:000000000000382e $t
             forth.s:1148   .text:0000000000003851 $d
             forth.s:1148   .text:0000000000003852 $t
             forth.s:1172   .text:0000000000003885 $d
             forth.s:1172   .text:0000000000003886 $t
             forth.s:1218   .text:00000000000038e9 $d
             forth.s:1218   .text:00000000000038ea $t
             forth.s:1230   .text:0000000000003905 $d
             forth.s:1230   .text:0000000000003906 $t
             forth.s:1242   .text:0000000000003925 $d
             forth.s:1242   .text:0000000000003926 $t
             forth.s:1293   .text:000000000000398d $d
             forth.s:1293   .text:000000000000398e $t
             forth.s:1330   .text:00000000000039e9 $d
             forth.s:1330   .text:00000000000039ea $t
             forth.s:1360   .text:0000000000003a25 $d
             forth.s:1360   .text:0000000000003a26 $t
             forth.s:1379   .text:0000000000003a51 $d
             forth.s:1379   .text:0000000000003a52 $t
             forth.s:1419   .text:0000000000003aab $d
ARM GAS  forth.s 			page 273


             forth.s:1419   .text:0000000000003aac $t
             forth.s:1430   .text:0000000000003ac3 $d
             forth.s:1430   .text:0000000000003ac4 $t
             forth.s:1452   .text:0000000000003af9 $d
             forth.s:1452   .text:0000000000003afa $t
             forth.s:1466   .text:0000000000003b17 $d
             forth.s:1466   .text:0000000000003b18 $t
             forth.s:1477   .text:0000000000003b35 $d
             forth.s:1477   .text:0000000000003b36 $t
             forth.s:1506   .text:0000000000003b8d $d
             forth.s:1506   .text:0000000000003b8e $t
             forth.s:1521   .text:0000000000003bab $d
             forth.s:1521   .text:0000000000003bac $t
             forth.s:1538   .text:0000000000003bd7 $d
             forth.s:1538   .text:0000000000003bd8 $t
             forth.s:1568   .text:0000000000003c13 $d
             forth.s:1568   .text:0000000000003c14 $t
             forth.s:1608   .text:0000000000003c8b $d
             forth.s:1608   .text:0000000000003c8c $t
             forth.s:1717   .text:0000000000003db7 $d
             forth.s:1717   .text:0000000000003db8 $t
             forth.s:1739   .text:0000000000003e03 $d
             forth.s:1739   .text:0000000000003e04 $t
             forth.s:1788   .text:0000000000003e43 $d
             forth.s:1788   .text:0000000000003e44 $t
             forth.s:1839   .text:0000000000003ebb $d
             forth.s:1839   .text:0000000000003ebc $t
             forth.s:1931   .text:0000000000003fa5 $d
             forth.s:1931   .text:0000000000003fa6 $t
             forth.s:1959   .text:0000000000003fd9 $d
             forth.s:1959   .text:0000000000003fda $t
             forth.s:2006   .text:0000000000004043 $d
             forth.s:2006   .text:0000000000004044 $t
             forth.s:2017   .text:0000000000004065 $d
             forth.s:2017   .text:0000000000004066 $t
             forth.s:2054   .text:00000000000040bd $d
             forth.s:2054   .text:00000000000040be $t
             forth.s:2095   .text:0000000000004111 $d
             forth.s:2095   .text:0000000000004112 $t
             forth.s:2191   .text:000000000000422b $d
             forth.s:2191   .text:000000000000422c $t
             forth.s:2203   .text:0000000000004249 $d
             forth.s:2203   .text:000000000000424a $t
             forth.s:2255   .text:00000000000042cf $d
             forth.s:2255   .text:00000000000042d0 $t
             forth.s:2273   .text:0000000000004301 $d
             forth.s:2273   .text:0000000000004302 $t
             forth.s:2287   .text:000000000000432b $d
             forth.s:2287   .text:000000000000432c $t
             forth.s:2365   .text:00000000000043e7 $d
             forth.s:2365   .text:00000000000043e8 $t
             forth.s:2482   .text:0000000000004519 $d
             forth.s:2482   .text:000000000000451a $t
             forth.s:2568   .text:0000000000004637 $d
             forth.s:2568   .text:0000000000004638 $t
             forth.s:2585   .text:000000000000466d $d
             forth.s:2585   .text:000000000000466e $t
ARM GAS  forth.s 			page 274


             forth.s:2620   .text:00000000000046d7 $d
             forth.s:2620   .text:00000000000046d8 $t
             forth.s:2715   .text:00000000000047cb $d
             forth.s:2715   .text:00000000000047cc $t
             forth.s:2752   .text:000000000000482f $d
             forth.s:2752   .text:0000000000004830 $t
             forth.s:2816   .text:00000000000048e3 $d
             forth.s:2816   .text:00000000000048e4 $t
             forth.s:2847   .text:000000000000493b $d
             forth.s:2847   .text:000000000000493c $t
             forth.s:2991   .text:0000000000004b1b $d
             forth.s:2991   .text:0000000000004b1c $t
             forth.s:3003   .text:0000000000004b33 $d
             forth.s:3003   .text:0000000000004b34 $t
             forth.s:3042   .text:0000000000004b95 $d
             forth.s:3042   .text:0000000000004b96 $t
             forth.s:3054   .text:0000000000004bbb $d
             forth.s:3054   .text:0000000000004bbc $t
             forth.s:3065   .text:0000000000004bd5 $d
             forth.s:3065   .text:0000000000004bd6 $t
             forth.s:3095   .text:0000000000004c19 $d
             forth.s:3095   .text:0000000000004c1a $t
             forth.s:3350   .text:0000000000004f4f $d
             forth.s:3350   .text:0000000000004f50 $t
             forth.s:3402   .text:0000000000005003 $d
             forth.s:3402   .text:0000000000005004 $t
             forth.s:3418   .text:0000000000005037 $d
             forth.s:3418   .text:0000000000005038 $t
             forth.s:3522   .text:000000000000514f $d
             forth.s:3522   .text:0000000000005150 $t
             forth.s:3576   .text:0000000000005217 $d
             forth.s:3576   .text:0000000000005218 $t
             forth.s:3588   .text:0000000000005241 $d
             forth.s:3588   .text:0000000000005242 $t
             forth.s:3615   .text:0000000000005289 $d
             forth.s:3615   .text:000000000000528a $t
             forth.s:3656   .text:000000000000533b $d
             forth.s:3656   .text:000000000000533c $t
             forth.s:3667   .text:0000000000005351 $d
             forth.s:3667   .text:0000000000005352 $t
             forth.s:3682   .text:000000000000537f $d
             forth.s:3682   .text:0000000000005380 $t
             forth.s:3711   .text:00000000000053d9 $d
             forth.s:3711   .text:00000000000053da $t
             forth.s:3753   .text:000000000000542d $d
             forth.s:3753   .text:000000000000542e $t
             forth.s:3802   .text:00000000000054bf $d
             forth.s:3802   .text:00000000000054c0 $t
             forth.s:3894   .text:00000000000055bb $d
             forth.s:3894   .text:00000000000055bc $t
             forth.s:3982   .text:00000000000056f5 $d
             forth.s:3982   .text:00000000000056f6 $t
             forth.s:3993   .text:000000000000571f $d
             forth.s:3993   .text:0000000000005720 $t
             forth.s:4038   .text:0000000000005795 $d
             forth.s:4038   .text:0000000000005796 $t
             forth.s:4089   .text:0000000000005827 $d
ARM GAS  forth.s 			page 275


             forth.s:4089   .text:0000000000005828 $t
             forth.s:4117   .text:000000000000588f $d
             forth.s:4117   .text:0000000000005890 $t
             forth.s:4130   .text:00000000000058b1 $d
             forth.s:4130   .text:00000000000058b2 $t
             forth.s:4157   .text:00000000000058f1 $d
             forth.s:4157   .text:00000000000058f2 $t
             forth.s:4181   .text:000000000000592d $d
             forth.s:4181   .text:000000000000592e $t
             forth.s:4192   .text:0000000000005947 $d
             forth.s:4192   .text:0000000000005948 $t
             forth.s:4259   .text:0000000000005a37 $d
             forth.s:4259   .text:0000000000005a38 $t
             forth.s:4271   .text:0000000000005a57 $d
             forth.s:4271   .text:0000000000005a58 $t
             forth.s:4432   .text:0000000000005cbf $d
             forth.s:4432   .text:0000000000005cc0 $t
             forth.s:4497   .text:0000000000005d7d $d
             forth.s:4497   .text:0000000000005d7e $t
             forth.s:4588   .text:0000000000005e91 $d
             forth.s:4588   .text:0000000000005e92 $t
             forth.s:4692   .text:0000000000005fbf $d
             forth.s:4692   .text:0000000000005fc0 $t
             forth.s:4718   .text:000000000000600f $d
             forth.s:4718   .text:0000000000006010 $t
             forth.s:4771   .text:00000000000060ab $d
             forth.s:4771   .text:00000000000060ac $t
             forth.s:4791   .text:00000000000060f7 $d
             forth.s:4791   .text:00000000000060f8 $t
             forth.s:4820   .text:0000000000006153 $d
             forth.s:4820   .text:0000000000006154 $t
             forth.s:4862   .text:00000000000061c3 $d
             forth.s:4862   .text:00000000000061c4 $t
             forth.s:4876   .text:00000000000061f1 $d
             forth.s:4876   .text:00000000000061f2 $t
             forth.s:4935   .text:00000000000062a1 $d
             forth.s:4935   .text:00000000000062a2 $t
             forth.s:5019   .text:00000000000063db $d
             forth.s:5019   .text:00000000000063dc $t
             forth.s:5113   .text:00000000000064f5 $d
             forth.s:5113   .text:00000000000064f6 $t
             forth.s:5250   .text:00000000000065e3 $d
             forth.s:5250   .text:00000000000065e4 $t
             forth.s:5317   .text:00000000000066a7 $d
             forth.s:5317   .text:00000000000066a8 $t
             forth.s:5416   .text:0000000000006801 $d
             forth.s:5416   .text:0000000000006802 $t

UNDEFINED SYMBOLS
_mstack
